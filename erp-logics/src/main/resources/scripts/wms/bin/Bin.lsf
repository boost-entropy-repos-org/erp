MODULE Bin;

REQUIRE Stock, Barcode, WMS;

//------------------------- Ячейка -----------------------------//


CLASS  BinGroup 'Группа ячеек';
TABLE binGroup (BinGroup);

@defineExternalizable(bin, VARSTRING[100]);

nameBinGroup 'Наименование' = DATA VARISTRING[100](BinGroup);

TABLE binGroupBinGroup(BinGroup, BinGroup);
@defineHierarchy(binGroup, BinGroup);

FORM binGroup 'Группа ячеек'
    OBJECTS g=BinGroup FIXED PANEL
    PROPERTIES(g) nameBinGroup, nameParentBinGroup
    EDIT BinGroup OBJECT g
;

FORM binGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parentBinGroup
    PROPERTIES READONLY nameBinGroup(g), canonicalNameBinGroup (g)
    PROPERTIES(g) ADDFORM, EDITFORM, deleteg=DELETE
    ORDER BY canonicalNameBinGroup
    DIALOG BinGroup OBJECT g
;

CLASS Bin 'Ячейка' ;
TABLE bin (Bin);

nameBin 'Наименование' = DATA VARISTRING[100](Bin);
binGroupBin = DATA BinGroup (Bin) AUTOSET;
nameBinGroupBin 'Группа' (bin) = nameBinGroup(binGroupBin(bin));

TABLE binGroupBin(BinGroup, Bin);
isParentBinGroupBin (binGroup, bin) = isParentBinGroupBinGroup(binGroupBin(bin), binGroup);
canonicalNameBin 'Каноническое имя' (bin) = canonicalNameBinGroup(binGroupBin(bin));

FORM bin 'Ячейка'
    OBJECTS s = Bin FIXED PANEL
    PROPERTIES(s) nameBin, idBin SHOWIF showIDs(), nameBinGroupBin
    EDIT Bin OBJECT s
;

FORM bins 'Ячейки'
    TREE binTree sg = BinGroup PARENT parentBinGroup
    PROPERTIES READONLY nameBinGroup(sg)

    OBJECTS s = Bin
    PROPERTIES(s) READONLY nameBin, idBin SHOWIF showIDs(), canonicalNameBin
    PROPERTIES(s) ADDFORM, EDITFORM, DELETE TOOLBAR

    FILTERS isParentBinGroupBin(sg, s)
    ORDER BY nameBin

    DIALOG Bin OBJECT s
;

DESIGN bins FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            ADD binTree.tree.box {
                caption = 'Группы ячеек';
            }

            ADD s.box {
                fill = 2;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        ADD functions.box;
    }
}

// ----------------------------------- Ledger ------------------------------------------ //

binDataSkuLedger = ABSTRACT Bin(DataSkuLedger) PERSISTENT INDEXED;
nameBinDataSkuLedger 'Ячейка' (ledger) = nameBin(binDataSkuLedger(ledger)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

binBatch (batch) = ABSTRACT Bin (Batch) PERSISTENT INDEXED ;
nameBinBatch 'Ячейка' (batch) = nameBin(binBatch(batch)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

binSkuLedger (ledger) = MULTI binDataSkuLedger (ledger), binBatch (ledger) PERSISTENT INDEXED;
nameBinSkuLedger 'Ячейка' (ledger) = nameBin(binSkuLedger(ledger)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

TABLE skuBin(Sku, Bin);
TABLE skuStockBin(Sku, Stock, Bin);
TABLE skuStockBinDate(Sku, Stock, Bin, DATE);

META defineBinSkuLedgerBalanceProperties(postfix, caption)

    currentBalance##postfix##SkuStockBin 'Текущий остаток'###caption (sku, stock, bin) =
        GROUP SUM signedQuantityActive##postfix##SkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger) PERSISTENT;
    prevCurrentBalance##postfix##SkuStockBin 'Текущий остаток'###caption (sku, stock, bin) = PREV(currentBalance##postfix##SkuStockBin(sku, stock, bin));
    countLedger##postfix##SkuStockBin 'Кол-во движений'###caption (sku, stock, bin) =
        GROUP SUM 1 IF signedQuantityActive##postfix##SkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger) PERSISTENT;

    quantityIn##postfix##SkuStockBinDate (sku, stock, bin, date) =
        GROUP SUM quantityInActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    quantityOut##postfix##SkuStockBinDate (sku, stock, bin, date) =
        GROUP SUM quantityOutActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    quantity##postfix##SkuStockBinDate (sku, stock, bin, date) = quantityIn##postfix##SkuStockBinDate(sku, stock, bin, date)
                                                         (+)
                                                         quantityOut##postfix##SkuStockBinDate(sku, stock, bin, date) PERSISTENT;

    signedQuantity##postfix##SkuStockBinDate (sku, stock, bin, date) = quantityIn##postfix##SkuStockBinDate(sku, stock, bin, date)
                                                               (-)
                                                               quantityOut##postfix##SkuStockBinDate(sku, stock, bin, date) PERSISTENT;

    // без учета текущей даты/времени
    balanceB##postfix##SkuStockBinDate 'Остаток на начало дня'###caption (sku, stock, bin, date) = currentBalance##postfix##SkuStockBin(sku, stock, bin)
                                                                      (-) [GROUP SUM signedQuantity##postfix##SkuStockBinDate (sku, stock, bin, dateIn) IF dateIn >= date
                                                                                 BY sku, stock, bin, date](sku, stock, bin, date);

    // с учетом текущей даты/времени
    balanceA##postfix##SkuStockBinDate 'Остаток на конец дня'###caption (sku, stock, bin, date) = currentBalance##postfix##SkuStockBin(sku, stock, bin)
                                                                     (-) [GROUP SUM signedQuantity##postfix##SkuStockBinDate (sku, stock, bin, dateIn) IF dateIn > date
                                                                                BY sku, stock, bin, date](sku, stock, bin, date);

    // без учета текущей даты/времени
    balanceB##postfix##SkuStockBinDateTime 'Остаток (до)'###caption (sku, stock, bin, dateTime) = currentBalance##postfix##SkuStockBin(sku, stock, bin)
                                                                              (-) [GROUP SUM signedQuantityActive##postfix##SkuLedger(ledger) IF dateTimeSkuLedger(ledger) >= dateTime
                                                                                         BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger), dateTime](sku, stock, bin, dateTime);

    // с учетом текущей даты/времени
    balanceA##postfix##SkuStockBinDateTime 'Остаток (после)'###caption (sku, stock, bin, dateTime) = currentBalance##postfix##SkuStockBin(sku, stock, bin)
                                                                             (-) [GROUP SUM signedQuantityActive##postfix##SkuLedger(ledger) IF dateTimeSkuLedger(ledger) > dateTime
                                                                                        BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger), dateTime](sku, stock, bin, dateTime);

    currentBalance##postfix##SkuBin 'Остаток (всего)'###caption (sku, bin) = GROUP SUM currentBalance##postfix##SkuStockBin(sku, stock, bin) BY sku, bin PERSISTENT;

    // ---------------------------- Суммы по товару -------------------------------- //

    currentSum##postfix##SkuStockBin 'Сумма остатка'###caption (sku, stock, bin) =
        GROUP SUM signedSumActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger) PERSISTENT;

    sumIn##postfix##SkuStockBinDate (sku, stock, bin, date) =
        GROUP SUM sumInActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    sumOut##postfix##SkuStockBinDate (sku, stock, bin, date) =
        GROUP SUM sumOutActiveSkuLedger(ledger) BY skuSkuLedger(ledger), stockSkuLedger(ledger), binSkuLedger(ledger), dateSkuLedger(ledger) PERSISTENT;

    sum##postfix##SkuStockBinDate (sku, stock, bin, date) = sumIn##postfix##SkuStockBinDate(sku, stock, bin, date)
                                                         (+)
                                                         sumOut##postfix##SkuStockBinDate(sku, stock, bin, date) PERSISTENT;

    signedSum##postfix##SkuStockBinDate (sku, stock, bin, date) = sumIn##postfix##SkuStockBinDate(sku, stock, bin, date)
                                                               (-)
                                                               sumOut##postfix##SkuStockBinDate(sku, stock, bin, date) PERSISTENT;

    // без учета текущей даты/времени
    sumB##postfix##SkuStockBinDate 'Сумма на начало дня'###caption (sku, stock, bin, date) = currentSum##postfix##SkuStockBin(sku, stock, bin)
                                                                      (-) [GROUP SUM signedSum##postfix##SkuStockBinDate (sku, stock, bin, dateIn) IF dateIn >= date
                                                                                 BY sku, stock, bin, date](sku, stock, bin, date);

    // с учетом текущей даты/времени
    sumA##postfix##SkuStockBinDate 'Сумма на конец дня'###caption (sku, stock, bin, date) = currentSum##postfix##SkuStockBin(sku, stock, bin)
                                                                     (-) [GROUP SUM signedSum##postfix##SkuStockBinDate (sku, stock, bin, dateIn) IF dateIn > date
                                                                                BY sku, stock, bin, date](sku, stock, bin, date);

    averagePrice##postfix##SkuStockBin 'Цена (средневзв.)'###caption (sku, stock, bin) = currentSum##postfix##SkuStockBin(sku, stock, bin) / currentBalance##postfix##SkuStockBin(sku, stock, bin);

END

@defineBinSkuLedgerBalanceProperties(,);

EXTEND FORM currentBalanceSkuStock

    PROPERTIES(bil)   READONLY nameBinSkuLedger  BEFORE signedQuantitySkuLedger
    PROPERTIES(bt)    READONLY nameBinBatch  BEFORE quantityBatch

    OBJECTS           bin=Bin
    PROPERTIES        READONLY nameBin(bin), currentBalanceSkuStockBin(s,st,bin)
    FILTERS           currentBalanceSkuStockBin(s,st,bin)
;
EXTEND DESIGN currentBalanceSkuStock {
    ledger.box {
        ADD bin.box;
    }
}

EXTEND FORM balanceSkuStock

    PROPERTIES(bil)   READONLY nameBinSkuLedger  BEFORE signedQuantitySkuLedger
    PROPERTIES(bt)    READONLY nameBinBatch  BEFORE quantityBatch

    OBJECTS           bin=Bin
    PROPERTIES        READONLY nameBin(bin), balanceASkuStockBinDateTime(s,st,bin,t)
    FILTERS           balanceASkuStockBinDateTime(s,st,bin,t)
;
EXTEND DESIGN balanceSkuStock {
    ledger.box {
        ADD bin.box;
    }
}

// ---------------------  Склады с указанием ячеек ----------------------- //

TABLE stockBinGroup(Stock, BinGroup);
dataInStockBinGroup 'Отм.' = DATA BOOLEAN (Stock, BinGroup);

TABLE stockBin(Stock, Bin);
dataInStockBin 'Отм.' = DATA BOOLEAN (Stock, Bin);

levelParentStockBinGroup (stock, binGroup) = GROUP MIN levelBinGroupBinGroup(binGroup, parent) IF dataInStockBinGroup(stock, parent)
                                                               BY stock, binGroup PERSISTENT;
nearestParentStockBinGroup (stock, binGroup) =
    binGroupBinGroupLevel(binGroup, levelParentStockBinGroup(stock, binGroup));
nearestInStockBinGroup (stock, binGroup) =
    dataInStockBinGroup(stock, nearestParentStockBinGroup(stock, binGroup));

inStockBinGroup 'Отм.' (stock, binGroup) = OVERRIDE nearestInStockBinGroup (stock, binGroup), dataInStockBinGroup(stock, binGroup) PERSISTENT;

inStockBin 'Отм.' (stock, bin) = OVERRIDE inStockBinGroup(stock, binGroupBin(bin)), dataInStockBin(stock, bin) PERSISTENT;

binsStock 'Ячейки' (stock) = GROUP CONCAT nameBin(bin) IF inStockBin(stock, bin) , ', '
                                       BY stock
                                       ORDER bin MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;
stocksBin 'Склады' (bin) = GROUP CONCAT nameStock(stock) IF inStockBin(stock, bin) , ', '
                                       BY bin
                                       ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;


// ---------------- Ячейка по классификатору ------------------- //

groupTypeStock = DATA GroupType (Stock);
nameGroupTypeStock 'Тип классификатора' (stock) = nameGroupType(groupTypeStock(stock));

dataBinStockGroup = DATA Bin (Stock, Group);
nameDataBinStockGroup 'Ячейка' (stock,group) = nameBin(dataBinStockGroup(stock,group)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

dataBinStockSku = DATA Bin (Stock, Sku);
nameDataBinStockSku 'Ячейка' (stock,sku) = nameBin(dataBinStockSku(stock,sku)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

levelParentBinStockGroup (stock, group) = GROUP MIN levelGroupGroup(group, parent) IF dataBinStockGroup(stock, parent)
                                                              BY stock, group PERSISTENT;

nearestParentBinStockGroup (stock, group) = groupGroupLevel(group, levelParentBinStockGroup (stock, group));
nearestInBinStockGroup  (stock, group) =
    dataBinStockGroup(stock, nearestParentBinStockGroup (stock, group)) PERSISTENT;

binStockGroup (stock, group) = OVERRIDE nearestInBinStockGroup(stock, group), dataBinStockGroup(stock, group) PERSISTENT;
nameBinStockGroup 'Ячейка'= nameBin(binStockGroup(stock, group)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

binStockSku (stock, sku) = OVERRIDE binStockGroup(stock, groupGroupTypeSku(groupTypeStock(stock), sku)), dataBinStockSku(stock, sku) PERSISTENT;
nameBinStockSku 'Ячейка'= nameBin(binStockSku(stock, sku)) MINCHARWIDTH 10 PREFCHARWIDTH 10;

CONSTRAINT dataBinStockGroup(stock, group) AND NOT inStockBin(stock, dataBinStockGroup(stock, group))
           CHECKED BY dataBinStockGroup MESSAGE 'Ячейка (для группы sku) не включена для склада';

CONSTRAINT dataBinStockSku(stock, sku) AND NOT inStockBin(stock, dataBinStockSku(stock, sku))
           CHECKED BY dataBinStockSku MESSAGE 'Ячейка (для sku) не включена для склада';
// ------------------------------------- Формы ---------------------------------- //

FORM binStocks 'Ячейки'

    OBJECTS ts = Stock FIXED PANEL
    PROPERTIES(ts) SELECTOR nameStock
    PROPERTIES(ts) nameGroupTypeStock
    FILTERS isCompanyStock(ts)

    TREE binTree bg = BinGroup PARENT parentBinGroup
    PROPERTIES READONLY nameBinGroup(bg)
    PROPERTIES(ts, bg) inStockBinGroup
    PROPERTIES(bg) ADDFORM, EDITFORM, DELETE TOOLBAR

    OBJECTS b = Bin
    PROPERTIES(b) READONLY nameBin, canonicalNameBin
    PROPERTIES(ts, b) inStockBin
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParentBinGroupBin(bg, b)
    ORDER BY nameBin
    PROPERTIES(b) ADDFORM, EDITFORM, DELETE TOOLBAR

    FILTERGROUP filters1
            FILTER 'Отмеченные ячейки' 'F10' inStockBin(ts, b)

    TREE treeGroup g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    FILTERS groupTypeGroup(g) == groupTypeStock(ts)
    ORDER BY nameGroup(g)
    PROPERTIES(ts, g) nameBinStockGroup
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeGroup(g) DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku
    FILTERS isParentGroupSku(g, s) OR s IS Sku AND NOT g
    PROPERTIES(ts, s) nameBinStockSku
;

DESIGN binStocks FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        ADD ts.box;
        NEW topContainer {
            type = SPLITV;
            fill = 1;

            NEW binGroup {
                type = SPLITH;
                fill = 1;

                ADD binTree.tree.box {
                    caption = 'Группы ячеек';
                }

                ADD b.box {
                    fill = 2.5;
                    b.grid {
                        defaultComponent = TRUE;
                    }
                }
            }
            NEW skuGroup {
                type = SPLITH;
                fill = 1;

                ADD treeGroup.tree.box {
                    caption = 'Группы Sku';
                }

                ADD s.box {
                    fill = 2.5;
                    s.grid {
                        defaultComponent = TRUE;
                    }
                }
            }
        }

        ADD functions.box;
    }
}
//--------------------------------------------------Ячейка для Detail--------------------------------------//

META defineDocumentDetailBinCustomPrefix(detail, prefix, caption)
    prefix###bin###detail = DATA Bin (###detail);
    name###prefix###bin###detail 'Ячейка'###caption (detail) = nameBin(prefix###bin###detail(detail)) MINCHARWIDTH 10 PREFCHARWIDTH 10;
END
META defineDocumentAbstractDetailBinCustomPrefix(detail, prefix, caption)
    prefix###bin###detail = ABSTRACT Bin (###detail) PERSISTENT;
    name###prefix###bin###detail 'Ячейка'###caption (detail) = nameBin(prefix###bin###detail(detail)) MINCHARWIDTH 10 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceDetailBinCustomPrefix(detail, prefix, caption)
    @defineDocumentAbstractDetailBinCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailBinCustomPrefix(user###detail, prefix, caption);
    prefix###bin###detail(detail) += prefix###bin###user###detail(detail);
END
META defineDocumentInterfaceDetailBinCustom(detail)
    @defineDocumentInterfaceDetailBinCustomPrefix(detail, , );
END
META defineDocumentInterfaceDetailBin(object, caption)
    @defineDocumentInterfaceDetailBinCustomPrefix(object###detail, , caption);
END
META defineDocumentInterfaceDetailBin(object)
    @defineDocumentInterfaceDetailBinCustomPrefix(object###detail, , );
END

META extendFormInterfaceDetailBin(object, concrete, prefix, befProp)
    @defineDocumentInterfaceProperty (object, showBin, 'Ячейка');

    EXTEND FORM user###object
        PROPERTIES(concrete) showBin###user###object
        PROPERTIES (d) SHOWIF showBin###user###object(concrete) name###prefix###bin###user###object###detail BEFORE befProp###user###object###detail
    ;
    EXTEND DESIGN user###object {
        headerExtraParams {
            NEW headerBin {
                caption = 'Ячейка';
                childConstraints = TO THE RIGHTBOTTOM;
                ADD PROPERTY(showBin###user###object);
            }
        }
    }
    EXTEND FORM object##s
    PROPERTIES(concrete) READONLYIF isReadonly() showBin###object
    PROPERTIES (d) READONLY SHOWIF showBin###object(concrete) name###prefix###bin###object###detail BEFORE befProp###object###detail
    ;
END

//---------------- invoiceShipment --------------------//

META defineInvoiceShipmentBin(stockProp)

    @defineDocumentInterfaceDetailBin(invoice);
    binShipmentDetail (detail) += binInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

    @defineDocumentInterfaceProperty (invoice, showBin, 'Ячейка');

    EXTEND FORM userInvoice
        PROPERTIES(i) showBinUserInvoice
        PROPERTIES(d) BEFORE name###stockProp###userInvoiceDetail SHOWIF showBinUserInvoice(i) BACKGROUND backgroundShippedInvoice(i)
                      nameBinUserInvoiceDetail
    ;
    EXTEND DESIGN userInvoice {
        headerExtraParams {
            NEW headerBin {
                caption = 'Ячейка';
                ADD PROPERTY(showBinUserInvoice);
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) READONLYIF isReadonly() showBinInvoice
        PROPERTIES(d) READONLY BEFORE name###stockProp###invoiceDetail SHOWIF showBinInvoice(i) BACKGROUND backgroundShippedInvoice(i)
                      nameBinInvoiceDetail
    ;
    EXTEND FORM invoiceDetails
        PROPERTIES(d) READONLY BEFORE name###stockProp###invoiceDetail SHOWIF showBinInvoiceDetail(d) BACKGROUND backgroundShippedInvoiceDetail(d)
                      nameBinInvoiceDetail
    ;
    
    overCopyInvoiceDetail(d, detail) += ACTION (d, detail) {      
        binUserInvoiceDetail(d) <- binUserInvoiceDetail(detail);
    }     

END

NAVIGATOR {
    WMSNavigator {
        NEW binNavigator 'Ячейки' {
            ADD binGroups;
            ADD binStocks;
        }
    }
}



