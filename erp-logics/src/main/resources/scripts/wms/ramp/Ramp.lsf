MODULE Ramp;

REQUIRE Stock, WMS, SkuLedger;

NAMESPACE Ramp;

//------------------------- Интервал -----------------------------//

CLASS  IntervalType 'Тип интервала';
TABLE intervalType (IntervalType);

nameIntervalType 'Наименование' = DATA VARISTRING[100](IntervalType);
@defineExternalizable(intervalType, VARSTRING[100]);

CLASS  Interval 'Интервал';
TABLE interval (Interval);

nameInterval 'Наименование' = DATA VARISTRING[100](Interval);
@defineExternalizable(interval, VARSTRING[100]);
timeInterval 'Время' = DATA TIME (Interval);

intervalTypeInterval= DATA IntervalType (Interval) NOT NULL DELETE;
nameIntervalTypeInterval 'Тип интервала' (i) = nameIntervalType(intervalTypeInterval(i));

FORM intervalType 'Тип интервала'
    OBJECTS t=IntervalType FIXED PANEL
    PROPERTIES(t) nameIntervalType
    
    OBJECTS i= Interval
    PROPERTIES(i) timeInterval, ADDOBJ, DELETESESSION FORCE PANEL TOOLBAR       
    FILTERS intervalTypeInterval(i) == t
    
    EDIT IntervalType OBJECT t
;

FORM intervalTypes 'Типы интервала'
    OBJECTS t=IntervalType
    PROPERTIES(t) nameIntervalType READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameIntervalType(t)
    
    OBJECTS i= Interval
    PROPERTIES(i) READONLY timeInterval
    ORDER BY timeInterval(i)    
    FILTERS intervalTypeInterval(i) == t
        
    DIALOG IntervalType OBJECT t
;
DESIGN intervalTypes { main{ preferredSize = (600, 400); } }

//------------------------- Группы рамп -----------------------------//

CLASS  RampGroup 'Группа рамп';
TABLE rampGroup (RampGroup);

nameRampGroup 'Наименование' = DATA VARISTRING[100](RampGroup);

TABLE rampGroupRampGroup(RampGroup, RampGroup);
@defineHierarchy(rampGroup, RampGroup);

FORM rampGroup 'Группа рамп'
    OBJECTS g=RampGroup FIXED PANEL
    PROPERTIES(g) nameRampGroup, nameParentRampGroup
    EDIT RampGroup OBJECT g
;

FORM rampGroups 'Группы рамп'
    TREE treeGroups g=RampGroup PARENT parentRampGroup
    PROPERTIES READONLY nameRampGroup(g), canonicalNameRampGroup (g)
    PROPERTIES(g) ADDFORM, EDITFORM, deleteg=DELETE FORCE PANEL TOOLBAR
    ORDER BY canonicalNameRampGroup(g)
    DIALOG RampGroup OBJECT g
;

//------------------------- Рампа -----------------------------//

CLASS  Ramp 'Рампа';
TABLE ramp (Ramp);

nameRamp 'Наименование' = DATA VARISTRING[100](Ramp);
@defineExternalizable(ramp, VARSTRING[100]);

rampGroupRamp 'Группа рамп' = DATA RampGroup (Ramp) AUTOSET NOT NULL;
nameRampGroupRamp 'Группа' (ramp) = nameRampGroup(rampGroupRamp(ramp));

TABLE rampGroupRamp(RampGroup, Ramp);
isParentRampGroupRamp (rampGroup, ramp) = isParentRampGroupRampGroup(rampGroupRamp(ramp), rampGroup);
canonicalNameRamp 'Каноническое имя' (ramp) = canonicalNameRampGroup(rampGroupRamp(ramp));

intervalTypeRamp= DATA IntervalType (Ramp);
nameIntervalTypeRamp 'Тип интервала' (r) = nameIntervalType(intervalTypeRamp(r));

inRampInterval 'Вкл.' (r,i)= intervalTypeRamp(r) == intervalTypeInterval(i);
countIntervalRamp 'Кол-во интервалов' (r) = GROUP SUM 1 IF inRampInterval(r,i) BY r;

stockRamp= DATA Stock (Ramp);
nameStockRamp 'Склад' (r) = nameStock(stockRamp(r));
countIntervalStock 'Кол-во интервалов' (st) = GROUP SUM 1 IF inRampInterval(r,i) BY stockRamp(r);

CONSTRAINT stockRamp(r) AND NOT isCompanyStock(stockRamp(r))
    CHECKED BY stockRamp MESSAGE 'Для рампы должен быть задан склад компании';    
    
//--
TABLE rampSkuGroup(Ramp, SkuGroup);
inDataRampSkuGroup 'Вкл.' = DATA BOOLEAN (Ramp, SkuGroup);
levelParentRampSkuGroup (ramp, group) = GROUP MIN levelSkuGroupSkuGroup(group, parent) IF inDataRampSkuGroup(ramp, parent)
                                                              BY ramp, group PERSISTENT;

nearestParentRampSkuGroup (ramp, group) = skuGroupSkuGroupLevel(group, levelParentRampSkuGroup (ramp, group));
nearestInRampSkuGroup  (ramp, group) =
    inDataRampSkuGroup(ramp, nearestParentRampSkuGroup (ramp, group)) PERSISTENT;

inRampSkuGroup 'Вкл.' (ramp, group) = OVERRIDE nearestInRampSkuGroup(ramp, group), inDataRampSkuGroup(ramp, group) PERSISTENT;

inRampSku 'Вкл.' (ramp, sku) = inRampSkuGroup(ramp, skuGroupSku(sku));
// Пока что простенькая логика привязки групп товаров к рампам, возможно надо будет переделать

countSkuGroupsRamp (ramp) = GROUP SUM 1 IF inDataRampSkuGroup(ramp, skuGroup) BY ramp;

  
FORM ramp 'Рампа'
    OBJECTS r=Ramp FIXED PANEL
    PROPERTIES(r) nameRamp, nameIntervalTypeRamp, nameStockRamp, nameRampGroupRamp
    
    OBJECTS i= Interval
    PROPERTIES(i) READONLY timeInterval
    ORDER BY timeInterval(i)
    FILTERS intervalTypeRamp(r) == intervalTypeInterval(i)
    
    EDIT Ramp OBJECT r
;
FORM ramps 'Рампы'
    TREE rampTree sg = RampGroup PARENT parentRampGroup
    PROPERTIES READONLY nameRampGroup(sg)
    
    OBJECTS r=Ramp 
    PROPERTIES(r) READONLY nameRamp, nameIntervalTypeRamp, nameStockRamp
    PROPERTIES(r) ADDFORM, EDITFORM
    ORDER BY      nameRamp(r)
    FILTERS isParentRampGroupRamp(sg, r) 
    
    TREE skuTree gg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(gg), nameSkuGroup(gg)         
    PROPERTIES inRampSkuGroup(r,gg)      
    ORDER BY orderSkuGroup(gg)    
    OBJECTS i= Interval
    PROPERTIES(i) READONLY timeInterval
    ORDER BY timeInterval(i)
    FILTERS intervalTypeRamp(r) == intervalTypeInterval(i)
    
    DIALOG Ramp OBJECT r
;
DESIGN ramps { 
    main{ 
        preferredSize = (1024, 768); 
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            NEW treeBox {
                fill = 1;
                type = SPLITV;
                ADD rampTree.tree.box {
                    caption = 'Группы рамп';
                }
                ADD skuTree.tree.box {
                    caption = 'Группы товаров';
                }                
            }    
            NEW detailContainer {
                fill = 2;
                type = SPLITV;
                ADD r.box {                            
                    r.grid {
                        defaultComponent = TRUE;
                    }
                }
                ADD i.box;
            }
        }
        ADD functions.box;
    }
}

NAVIGATOR {
    WMSNavigator {
        NEW rampNavigator 'Рампа' {
            ADD intervalTypes;
            ADD rampGroups; 
            ADD ramps;
        }
    }
}



