MODULE OrderPickingOrder;

REQUIRE Picking, Order, Bin;

NAMESPACE Order;

//--  Связь с заказом

orderPickingOrder = ABSTRACT Order (PickingOrder) PERSISTENT;
orderUserPickingOrder = DATA Order (UserPickingOrder);
orderPickingOrder(pickingOrder) += orderUserPickingOrder(pickingOrder);

CONSTRAINT stockUserPickingOrder(pickingOrder) != fromOrder(orderUserPickingOrder(pickingOrder))
    CHECKED BY orderUserPickingOrder
        MESSAGE 'Склад в заказе на комплектацию и в заказе должны соответствовать друг другу';

inOrderPickingOrder (order, pickingOrder) = GROUP SUM 1 BY orderPickingOrder(pickingOrder), pickingOrder;
ordersPickingOrder 'Заказы' (pickingOrder) = GROUP CONCAT VARSTRING[255](seriesNumberOrder(order)) IF inOrderPickingOrder(order, pickingOrder) , ', '
                                         BY pickingOrder
                                         ORDER order
                                         IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

EXTEND FORM pickingOrders
    PROPERTIES (o) READONLY ordersPickingOrder
;

pickingNumberOrderDetail = ABSTRACT INTEGER (OrderDetail) PERSISTENT;

// ------------------- Свойства для заказа на комплектацию ------------------------------- //
 
numberOrderPickingOrder 'Номер заказа' (pickingOrder) = numberOrder(orderPickingOrder(pickingOrder));
seriesOrderPickingOrder 'Серия заказа' (pickingOrder) = seriesOrder(orderPickingOrder(pickingOrder));

toPickingOrder = toOrder(orderPickingOrder(pickingOrder));
nameToPickingOrder 'Получатель' = nameLegalEntity(toPickingOrder(pickingOrder));

toStockPickingOrder = toStockOrder(orderPickingOrder(pickingOrder));
nameToStockPickingOrder 'Склад получателя' = nameStock(toStockPickingOrder(pickingOrder));

addressToStockPickingOrder 'Пункт разгрузки' = addressStock(toStockPickingOrder(pickingOrder));

// ------------------------------ Свойства для комплектации ---------------------------- //

toPicking = toPickingOrder(pickingOrderPicking(picking));
nameToPicking 'Получатель' = nameLegalEntity(toPicking(picking));

toStockPicking = toStockPickingOrder(pickingOrderPicking(picking));
nameToStockPicking 'Склад получателя' = nameStock(toStockPicking(picking));

addressToStockPicking 'Пункт разгрузки' = addressStock(toStockPicking(picking));

// ------------------------------------ Кол-во по заказам -------------------------------------- //

pickingPickingDetailOrderSku 'Скомплектовано' (order, sku) = GROUP SUM quantityPickingDetail(pickingDetail)
                                                           BY orderPickingOrder(pickingOrderPicking(pickingPickingDetail(pickingDetail))), skuPickingDetail(pickingDetail);
pickingQuantityOrderDetail 'Кол-во (скомплектовано)' (orderDetail) = PARTITION UNGROUP pickingPickingDetailOrderSku
                                                          LIMIT STRICT quantityOrderDetail (orderDetail)
                                                          BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                          ORDER orderDetail;

//-- Количество излишне подобранных товаров, которых нет в заказе
quantityPickingPickingDetailOrderSku (order, sku)= GROUP SUM pickingQuantityOrderDetail(detail) BY orderOrderDetail(detail), skuOrderDetail(detail);

excessQuantityPickingPickingDetailOrderSku (order, sku) = pickingPickingDetailOrderSku(order, sku) (-) quantityPickingPickingDetailOrderSku (order, sku);
excessQuantityPickingPickingDetailOrder( order) = GROUP SUM 1 IF excessQuantityPickingPickingDetailOrderSku (order, sku) > 0 BY order;

// ------------------------------------ Создание комплектации по заказу -------------------------------- //

@defineDocumentAbstractProperty(order, createPickingOrder, 'Создать заказ на комплектацию');

CLASS OrderPickingOrder 'Заказ на комплектацию на основе заказа' : PickingOrder;
CLASS OrderPickingOrderDetail 'Строка заказа на комплектацию на основе заказа' : PickingOrderDetail;

@defineDocumentTables(orderPickingOrder);

quantityOrderPickingNumber = GROUP SUM quantityOrderDetail(d) BY orderOrderDetail(d), pickingNumberOrderDetail(d);
countPickingOrderOrder = GROUP SUM 1 IF quantityOrderPickingNumber(o, n) BY o PERSISTENT;

@defineAggregationClass(order, Order, pickingNumber, INTEGER, orderPickingOrder, OrderPickingOrder, quantityOrderPickingNumber);
@defineDocumentAggregationHeaderTime(order, orderPickingOrder);


@defineAggregation(orderDetail, orderPickingOrderDetail, createPickingOrderOrderDetail);

orderPickingOrderOrderPickingOrderDetail (detail) = orderPickingOrderOrderPickingNumber(orderOrderDetail(orderDetailOrderPickingOrderDetail(detail)), pickingNumberOrderDetail(orderDetailOrderPickingOrderDetail(detail)));

@defineDocumentAggregationDetailTime(order, orderPickingOrder);

@defineDocumentHeaderCount(orderPickingOrder);

isPostedPickingOrder(order) += isPostedOrder(orderOrderPickingOrder(order));
isClosedPickingOrder(order) += isClosedOrder(orderOrderPickingOrder(order)); 

pickingOrderPickingOrderDetail(detail) += orderPickingOrderOrderPickingOrderDetail(detail);

@defineDocumentDetailIndex(orderPickingOrder);

datePickingOrder(order) += dateOrderPickingOrder(order);
timePickingOrder(order) += timeOrderPickingOrder(order);

stockPickingOrder(order) += fromStockOrder(orderOrderPickingOrder(order));
numberPickingOrder(order) += numberOrder(orderOrderPickingOrder(order));
seriesPickingOrder(order) += seriesOrder(orderOrderPickingOrder(order));

seriesNumberOrderPickingOrder 'Серия/номер документа' (order) = seriesNumberOrder(orderOrderPickingOrder(order));

notePickingOrder(order) += noteOrder(orderOrderPickingOrder(order));

@defineDocumentDescription(orderPickingOrder, OrderPickingOrderDetail, 'Заказ на комплектацию на основе заказа');
descriptionPickingOrder (order) += descriptionOrderPickingOrder(order);

@defineDocumentAggregationDetailSku(order, orderPickingOrder, sku);
skuPickingOrderDetail(detail) += skuOrderPickingOrderDetail(detail);

quantityPickingOrderDetail(detail) += quantityOrderDetail(orderDetailOrderPickingOrderDetail(detail));
batchPickingOrderDetail(detail) += batchOrderDetail(orderDetailOrderPickingOrderDetail(detail));

@defineDocumentAbstractDetailBin(order);
binPickingOrderDetail(detail) += binOrderDetail(orderDetailOrderPickingOrderDetail(detail));

orderPickingOrder(pickingOrder) += orderOrderPickingOrder(pickingOrder);
editPickingOrder(pickingOrder) += ACTION EXEC editOrder(orderOrderPickingOrder(pickingOrder));

acceptedOrder 'Принят в работу' (order) = GROUP SUM 1 IF acceptedPickingOrder(o) BY orderPickingOrder(o);
namePerformerOrder 'Комплектовщики' (order) = GROUP CONCAT ',', namePerformerPickingOrder(o) BY orderPickingOrder(o);

calcPartOrder 'Частично собран' (order) = GROUP SUM 1 IF calcPartPickingOrder(o) BY orderPickingOrder(o);
calcFullOrder 'Полностью собран' (order) = GROUP SUM 1 IF calcFullPickingOrder(o) BY orderPickingOrder(o);
calcPartOrFullOrder 'Собран' (order) = calcPartOrder(order) OR calcFullOrder(order);

startDateTimeOrder 'Начало комплектации' (order) = GROUP MIN startDateTimePickingOrder(o) BY orderPickingOrder(o);
finishDateTimeOrder 'Завершение комплектации' (order) = GROUP MAX finishDateTimePickingOrder(o) BY orderPickingOrder(o);


statusPickingOrder 'Статус комплектации' (order) = CASE
    WHEN calcPartOrder(order) THEN 'Частично собран'
    WHEN calcFullOrder(order) THEN 'Полностью собран'
    WHEN acceptedOrder(order) THEN 'В комплектации'
    WHEN order IS Order THEN 'Без комплектации';

backgroundStatusPickingOrder 'Цвет' (order) = CASE
    WHEN calcPartOrder(order) THEN RGB(255,238,165)
    WHEN calcFullOrder(order) THEN RGB(212,255,212)
    WHEN acceptedOrder(order) THEN RGB(255,238,165)
    WHEN order IS Order THEN RGB(255,200,216);
    
packQuantityOrder 'Кол-во собранных мест' (order) = GROUP SUM packQuantityPickingOrder(o) BY orderPickingOrder(o);

META defineOrderPickingOrder(sign, stockProp)

    @defineDocumentInterfaceProperty (order, createPickingOrder, 'Создать заказ на комплектацию');
    Order.createPickingOrderOrder(o) += createPickingOrderOrder(o); 

    EXTEND FORM userOrder
        PROPERTIES(o)  createPickingOrderOrder
    ;
    EXTEND DESIGN userOrder {
        headerCreateDocuments {
            NEW headerPicking {
                type = CONTAINERH;
                caption = 'Заказ на комплектацию';
                ADD PROPERTY(createPickingOrderOrder);

            }
        }
    }
    //-------------------- Ячейки -----------------------//

    @defineDocumentInterfaceDetailBin(order);
    Order.binOrderDetail(d) += binOrderDetail(d);
    
    @extendFormInterfaceDetailBin(order, o, , quantity);

    @deriveDocumentOperationProperty(UserOrder, showBin);
    
    quantityUserOrderBin 'Кол-во' = GROUP SUM quantityUserOrderDetail(d) BY userOrderUserOrderDetail(d), binUserOrderDetail(d); 

    // ---------------------- Разбиение заказа на несколько комплектаций ------------------- //
    
    pickingNumberOrderDetail 'Номер комплектации' = ABSTRACT INTEGER (OrderDetail);
    pickingNumberUserOrderDetail 'Номер комплектации' = DATA INTEGER (UserOrderDetail);
    pickingNumberUserOrderDetail(d) <- 1 WHEN SET(d IS UserOrderDetail);
    
    pickingNumberOrderDetail(d) += pickingNumberUserOrderDetail(d);
    Order.pickingNumberOrderDetail (d) += pickingNumberOrderDetail(d);
    
    pickingNumberUserOrderBin 'Номер комплектации' = GROUP MAX pickingNumberUserOrderDetail(d) BY userOrderUserOrderDetail(d), binUserOrderDetail(d);
    changePickingNumberUserOrderBin = ACTION (o, b) {
        REQUEST INTEGER INPUT;
        pickingNumberUserOrderDetail(d) <- requestedInteger() WHERE userOrderUserOrderDetail(d) == o AND binUserOrderDetail(d) == b;
    }
    
    EXTEND FORM userOrder
        PROPERTIES(d) SHOWIF createPickingOrderUserOrder(o) pickingNumberUserOrderDetail AFTER nameBinUserOrderDetail
         
        OBJECTS bn = Bin
        PROPERTIES(bn) READONLY SHOWIF createPickingOrderUserOrder(o)    nameBin 
        PROPERTIES(o, bn) SHOWIF createPickingOrderUserOrder(o)          quantityUserOrderBin READONLY, 
                                                                         pickingNumberUserOrderBin ON CHANGE changePickingNumberUserOrderBin(o, bn)
        FILTERS quantityUserOrderBin(o, bn)
        ORDER BY nameBin
    ;
    
    EXTEND DESIGN userOrder {
        specification.box {
            ADD bn.box {
                caption = 'Комплектация';
            }
        }
    }

    //-------------------- Расширяем операции свойством по созданию заказа на комплектацию -----------------------//

    EXTEND FORM orders
        PROPERTIES(o) READONLY FORCE PANEL namePerformerOrder, startDateTimeOrder, finishDateTimeOrder,
                      statusPickingOrder BACKGROUND backgroundStatusPickingOrder(o), packQuantityOrder
    ;
    EXTEND DESIGN orders {
        documentHistory {
            NEW picking {
                caption = 'Комплектация';
                type = CONTAINERV;
                ADD PROPERTY(namePerformerOrder);
                ADD PROPERTY(startDateTimeOrder);
                ADD PROPERTY(statusPickingOrder);
                ADD PROPERTY(finishDateTimeOrder);
                ADD PROPERTY(packQuantityOrder);
            }
        }
    }
END
