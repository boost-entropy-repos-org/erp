MODULE OrderPickingOrder;

REQUIRE Picking, Order;

NAMESPACE Order;

//--  Связь с заказом

order = ABSTRACT Order (PickingOrder) MATERIALIZED;
order = DATA Order (UserPickingOrder);
order(UserPickingOrder pickingOrder) += order(pickingOrder);

CONSTRAINT stock(UserPickingOrder pickingOrder) != fromStock(order(pickingOrder))
    CHECKED BY order[UserPickingOrder]
        MESSAGE 'Склад в заказе на комплектацию и в заказе должны соответствовать друг другу';

orderSeriesNumber 'Заказ' (PickingOrder o)= seriesNumber(order(o)); 

EXTEND FORM pickingOrders
    PROPERTIES (o) READONLY orderSeriesNumber
;

countPickingOrder = GROUP BY order(PickingOrder o) SUM 1 MATERIALIZED;

pickingNumber = ABSTRACT INTEGER (OrderDetail) MATERIALIZED;

// ------------------- Свойства для заказа на комплектацию ------------------------------- //
 
numberOrder 'Номер заказа' (PickingOrder pickingOrder) = number(order(pickingOrder));
seriesOrder 'Серия заказа' (PickingOrder pickingOrder) = series(order(pickingOrder));

to = to(order(PickingOrder pickingOrder));
nameTo 'Получатель' = name(to(PickingOrder pickingOrder));

toStock = toStock(order(PickingOrder pickingOrder));
nameToStock 'Склад получателя' = name(toStock(PickingOrder pickingOrder));

toStock (PickingOrderDetail d) = toStock(pickingOrder(d));
nameToStock 'Склад получателя' (PickingOrderDetail d) = name(toStock(d));

addressToStock 'Пункт разгрузки' = address(toStock(PickingOrder pickingOrder));

// ------------------------------ Свойства для комплектации ---------------------------- //

to = to(pickingOrder(Picking picking));
nameTo 'Получатель' = name(to(Picking picking));

toStock = toStock(pickingOrder(Picking picking));
nameToStock 'Склад получателя' = name(toStock(Picking picking));

addressToStock 'Пункт разгрузки' = address(toStock(Picking picking));

// ------------------------------------ Кол-во по заказам -------------------------------------- //

pickingPickingDetail 'Скомплектовано' (order, sku) = GROUP
                                                           BY order(pickingOrder(picking(PickingDetail pickingDetail))), sku(pickingDetail) SUM quantity(pickingDetail);
pickingQuantity 'Кол-во (скомплектовано)' (OrderDetail orderDetail) = PARTITION UNGROUP pickingPickingDetail
                                                          LIMIT STRICT quantity (orderDetail)
                                                          BY order(orderDetail), sku(orderDetail)
                                                          ORDER orderDetail MATERIALIZED;

//-- Количество излишне подобранных товаров, которых нет в заказе
quantityPickingPickingDetail (order, sku)= GROUP BY order(OrderDetail detail), sku(detail) SUM pickingQuantity(detail);

excessQuantityPickingPickingDetail (Order order, Sku sku) = pickingPickingDetail(order, sku) (-) quantityPickingPickingDetail (order, sku);
excessQuantityPickingPickingDetail( order) = GROUP BY Order order SUM 1 IF excessQuantityPickingPickingDetail (order, Sku sku) > 0;

// ------------------------------------ Создание комплектации по заказу -------------------------------- //

@defineDocumentAbstractProperty(order, createPickingOrder, 'Создать заказ на комплектацию');

CLASS OrderPickingOrder 'Заказ на комплектацию на основе заказа' : PickingOrder;
CLASS OrderPickingOrderDetail 'Строка заказа на комплектацию на основе заказа' : PickingOrderDetail;

@defineDocumentTables(orderPickingOrder);

quantityPickingNumber = GROUP BY order(OrderDetail d), pickingNumber(d) SUM quantity(d);
overQuantity (Order order, INTEGER pickingNumber) = quantityPickingNumber (order, pickingNumber) AND createPickingOrder(order);

@defineAggregationClass(order, Order, pickingNumber, INTEGER, orderPickingOrder, OrderPickingOrder, overQuantity);
@defineDocumentAggregationHeaderTime(order, orderPickingOrder);


@defineAggregation(orderDetail, orderPickingOrderDetail, createPickingOrder);

orderPickingOrder (OrderPickingOrderDetail detail) = orderPickingOrder(order(orderDetail(detail)), pickingNumber(orderDetail(detail)));

@defineDocumentAggregationDetailTime(order, orderPickingOrder);

@defineDocumentHeaderCount(orderPickingOrder);

isPosted(OrderPickingOrder order) += isPosted(order(order));
isClosed(OrderPickingOrder order) += isClosed(order(order)); 

pickingOrder(OrderPickingOrderDetail detail) += orderPickingOrder(detail);

@defineDocumentDetailIndex(orderPickingOrder);

date(OrderPickingOrder order) += date(order);
time(OrderPickingOrder order) += time(order);

stock(OrderPickingOrder order) += fromStock(order(order));

index 'Номер комплектации (в заказе)' (OrderPickingOrder pickingOrder) = PARTITION SUM 1 BY order(pickingOrder) ORDER pickingOrder CHARWIDTH 4;
numberIndex 'Комплектации заказа' (OrderPickingOrder pickingOrder) = VARSTRING[28] (CONCAT '/', number(order(pickingOrder)), 
    index(pickingOrder) IF countPickingOrder(order(pickingOrder))>1);
     
number(OrderPickingOrder order) += numberIndex(order);
series(OrderPickingOrder order) += series(order(order));

seriesNumber 'Серия/номер документа' (OrderPickingOrder order) = seriesNumber(order(order));

note(OrderPickingOrder order) += note(order(order));

@defineDocumentDescription(orderPickingOrder, OrderPickingOrderDetail, 'Заказ на комплектацию на основе заказа');
description (OrderPickingOrder order) += description(order);

@defineDocumentAggregationDetailSku(order, orderPickingOrder, sku);
sku(OrderPickingOrderDetail detail) += sku(detail);

quantity(OrderPickingOrderDetail detail) += quantity(orderDetail(detail));
batch(OrderPickingOrderDetail detail) += batch(orderDetail(detail));

order(OrderPickingOrder pickingOrder) += order(pickingOrder);
edit(OrderPickingOrder pickingOrder) += { edit(order(pickingOrder)); }

accepted 'Принят в работу' (order) = GROUP BY order(PickingOrder o) SUM 1 IF accepted(o);
countPerformer 'Комплектовщики' (order) = GROUP BY order(PickingOrder order) SUM 1 IF performer(order) MATERIALIZED;
namePerformer 'Комплектовщики' (order) = GROUP BY order(PickingOrder o) CONCAT namePerformer(o), ',';

diffQuantityPickingDetail 'Расхождение' = quantityPickingOrderDetail(Sku sku, PickingOrder order) (-) quantityPickingDetail(sku, order);
diffQuantityPickingDetail 'Расхождение' = GROUP BY PickingOrder order SUM diffQuantityPickingDetail(Sku sku, order) MATERIALIZED;
diffQuantityPickingDetail 'Расхождение' = GROUP BY order(PickingOrder o) SUM diffQuantityPickingDetail(o) MATERIALIZED;

countPickingPicking 'Кол-во комплектаций' = GROUP BY order(pickingOrder(Picking picking)) SUM 1 MATERIALIZED;
//calcPartOrder 'Частично собран' (order) = GROUP SUM 1 IF quantityPickingsPickingOrder(o) BY orderPickingOrder(o);
//calcFullOrder 'Полностью собран' (order) = [= GROUP SUM 1 IF calcFullPickingOrder(o) BY orderPickingOrder(o)](order) == countPickingOrderOrder(order);
//calcPart 'Частично собран' (Order order) = countPickingOrder(order) == countPickingPicking(order) AND diffQuantityPickingDetail(order);
calcFull 'Полностью собран' (Order order) = countPickingOrder(order) AND NOT diffQuantityPickingDetail(order); 
calcPart 'Частично собран' (Order order) = countPickingPicking(order) AND NOT calcFull(order);
picked (Order order) = calcPart(order) OR calcFull(order);

startDateTime 'Начало комплектации' (order) = GROUP BY order(PickingOrder o) MIN startDateTime(o);
finishDateTime 'Завершение комплектации' (order) = GROUP BY order(PickingOrder o) MAX finishDateTime(o);

statusPicking 'Статус комплектации' (Order order) = CASE
    WHEN calcFull(order) THEN 'Полностью собран'
    WHEN calcPart(order) THEN 'Частично собран'
    WHEN accepted(order) THEN 'В комплектации'
    WHEN countPickingOrder(order) THEN 'Ожидает комплектацию' 
    WHEN order IS Order THEN 'Без комплектации';

backgroundStatusPicking 'Цвет' (Order order) = CASE
    WHEN calcFull(order) THEN RGB(212,255,212)
    WHEN calcPart(order) THEN RGB(255,238,165)
    WHEN accepted(order) THEN RGB(255,238,165)
    WHEN countPickingOrder(order) THEN RGB(212,212,255) 
    WHEN order IS Order THEN RGB(255,200,216);
    
statusPickingOrder = statusPicking(order(OrderDetail orderDetail));
backgroundStatusPickingOrder = backgroundStatusPicking(order(OrderDetail orderDetail));
    
packQuantity 'Кол-во собранных мест' (order) = GROUP BY order(PickingOrder o) SUM packQuantity(o);
grossWeightOrderPicking 'Вес заказа' (order) = GROUP BY order(PickingOrder o) SUM grossWeightPickingOrderDetail(o); 

notPicking 'Без комплектаций' (Order order) = order IS Order AND NOT (calcFull(order) OR calcPart(order) OR accepted(order));

META defineOrderPickingOrder(sign, stockProp)

    @defineDocumentInterfaceProperty (order, createPickingOrder, 'Создать заказ на комплектацию');
    createPickingOrder[Order.Order](Order o) += createPickingOrder(o); 

    EXTEND FORM userOrder
        PROPERTIES(o)  createPickingOrder
    ;
    DESIGN userOrder {
        headerCreateDocuments {
            NEW headerPicking {
                type = CONTAINERH;
                caption = 'Заказ на комплектацию';          
                MOVE PROPERTY(createPickingOrder(o));

            }
        }
    }

    // ---------------------- Разбиение заказа на несколько комплектаций ------------------- //
    
    pickingNumber 'Номер комплектации' = ABSTRACT INTEGER (OrderDetail);
    pickingNumber 'Номер комплектации' = DATA INTEGER (UserOrderDetail);
    pickingNumber(UserOrderDetail d) <- 1 WHEN SET(d IS UserOrderDetail);
    
    pickingNumber(UserOrderDetail d) += pickingNumber(d);
    pickingNumber[Order.OrderDetail] (OrderDetail d) += pickingNumber(d);
    
    pickingOrderCount 'Кол-во комплектаций' = DATA INTEGER (UserOrder);
    pickingOrderCount(UserOrder o) <- 1 WHEN SET(o IS UserOrder);

    //-------------------- Расширяем операции свойством по созданию заказа на комплектацию -----------------------//

    EXTEND FORM orders
        PROPERTIES(o) READONLY PANEL namePerformer, startDateTime, finishDateTime, packQuantity                       
        PROPERTIES(o) READONLY statusPicking BACKGROUND backgroundStatusPicking(o) BEFORE countOrderDetail(o)             
    ;
    DESIGN orders {
        documentHistory {
            NEW picking {
                caption = 'Комплектация';
                type = CONTAINERV;
                MOVE PROPERTY(namePerformer(o));
                MOVE PROPERTY(startDateTime(o));
                MOVE PROPERTY(finishDateTime(o));
                MOVE PROPERTY(packQuantity(o));
            }
        }
    }
END