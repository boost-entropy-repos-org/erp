MODULE OrderPickingOrder;

REQUIRE Picking, Order, Bin;

NAMESPACE Order;

//--  Связь с заказом

orderPickingOrder = ABSTRACT Order (PickingOrder) PERSISTENT;
orderUserPickingOrder = DATA Order (UserPickingOrder);
orderPickingOrder(pickingOrder) += orderUserPickingOrder(pickingOrder);

CONSTRAINT stockUserPickingOrder(pickingOrder) != fromOrder(orderUserPickingOrder(pickingOrder))
    CHECKED BY orderUserPickingOrder
        MESSAGE 'Склад в заказе на комплектацию и в заказе должны соответствовать друг другу';

inOrderPickingOrder (order, pickingOrder) = GROUP SUM 1 BY orderPickingOrder(pickingOrder), pickingOrder;
ordersPickingOrder 'Заказы' (pickingOrder) = GROUP CONCAT VARSTRING[255](seriesNumberOrder(order)) IF inOrderPickingOrder(order, pickingOrder) , ', '
                                         BY pickingOrder
                                         ORDER order
                                         IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

EXTEND FORM pickingOrders
    PROPERTIES (o) READONLY ordersPickingOrder
;

// ------------------- Свойства для заказа на комплектацию ------------------------------- //
 
numberOrderPickingOrder 'Номер заказа' (pickingOrder) = numberOrder(orderPickingOrder(pickingOrder));
seriesOrderPickingOrder 'Серия заказа' (pickingOrder) = seriesOrder(orderPickingOrder(pickingOrder));

toPickingOrder = toOrder(orderPickingOrder(pickingOrder));
nameToPickingOrder 'Получатель' = nameLegalEntity(toPickingOrder(pickingOrder));

toStockPickingOrder = toStockOrder(orderPickingOrder(pickingOrder));
nameToStockPickingOrder 'Склад получателя' = nameStock(toStockPickingOrder(pickingOrder));

addressToStockPickingOrder 'Пункт разгрузки' = addressStock(toStockPickingOrder(pickingOrder));

// ------------------------------ Свойства для комплектации ---------------------------- //

toPicking = toPickingOrder(pickingOrderPicking(picking));
nameToPicking 'Получатель' = nameLegalEntity(toPicking(picking));

toStockPicking = toStockPickingOrder(pickingOrderPicking(picking));
nameToStockPicking 'Склад получателя' = nameStock(toStockPicking(picking));

addressToStockPicking 'Пункт разгрузки' = addressStock(toStockPicking(picking));

// ------------------------------------ Кол-во по заказам -------------------------------------- //

pickingPickingDetailOrderSku 'Скомплектовано' (order, sku) = GROUP SUM quantityPickingDetail(pickingDetail)
                                                           BY orderPickingOrder(pickingOrderPicking(pickingPickingDetail(pickingDetail))), skuPickingDetail(pickingDetail);
pickingQuantityOrderDetail 'Кол-во (скомплектовано)' (orderDetail) = PARTITION UNGROUP pickingPickingDetailOrderSku
                                                          LIMIT STRICT quantityOrderDetail (orderDetail)
                                                          BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                          ORDER orderDetail;

//-- Количество излишне подобранных товаров, которых нет в заказе
quantityPickingPickingDetailOrderSku (order, sku)= GROUP SUM pickingQuantityOrderDetail(detail) BY orderOrderDetail(detail), skuOrderDetail(detail);

excessQuantityPickingPickingDetailOrderSku (order, sku) = pickingPickingDetailOrderSku(order, sku) (-) quantityPickingPickingDetailOrderSku (order, sku);
excessQuantityPickingPickingDetailOrder( order) = GROUP SUM 1 IF excessQuantityPickingPickingDetailOrderSku (order, sku) > 0 BY order;

// ------------------------------------ Создание комплектации по заказу -------------------------------- //

@defineDocumentAbstractProperty(order, createPickingOrder, 'Создать заказ на комплектацию');

CLASS OrderPickingOrder 'Заказ на комплектацию на основе заказа' : PickingOrder;
CLASS OrderPickingOrderDetail 'Строка заказа на комплектацию на основе заказа' : PickingOrderDetail;

@defineDocumentTables(orderPickingOrder);

@defineDocumentAggregation(order, orderPickingOrder, createPickingOrderOrder);

isPostedPickingOrder(order) += isPostedOrder(orderOrderPickingOrder(order));
isClosedPickingOrder(order) += isClosedOrder(orderOrderPickingOrder(order)); 

pickingOrderPickingOrderDetail(detail) += orderPickingOrderOrderPickingOrderDetail(detail);

@defineDocumentDetailIndex(orderPickingOrder);

datePickingOrder(order) += dateOrderPickingOrder(order);
timePickingOrder(order) += timeOrderPickingOrder(order);

stockPickingOrder(order) += fromStockOrder(orderOrderPickingOrder(order));
numberPickingOrder(order) += numberOrder(orderOrderPickingOrder(order));
seriesPickingOrder(order) += seriesOrder(orderOrderPickingOrder(order));

seriesNumberOrderPickingOrder 'Серия/номер документа' (order) = seriesNumberOrder(orderOrderPickingOrder(order));

notePickingOrder(order) += noteOrder(orderOrderPickingOrder(order));

@defineDocumentDescription(orderPickingOrder, OrderPickingOrderDetail, 'Заказ на комплектацию на основе заказа');
descriptionPickingOrder (order) += descriptionOrderPickingOrder(order);

@defineDocumentAggregationDetailSku(order, orderPickingOrder, sku);
skuPickingOrderDetail(detail) += skuOrderPickingOrderDetail(detail);

quantityPickingOrderDetail(detail) += quantityOrderDetail(orderDetailOrderPickingOrderDetail(detail));
batchPickingOrderDetail(detail) += batchOrderDetail(orderDetailOrderPickingOrderDetail(detail));

@defineDocumentAbstractDetailBin(order);
binPickingOrderDetail(detail) += binOrderDetail(orderDetailOrderPickingOrderDetail(detail));

orderPickingOrder(pickingOrder) += orderOrderPickingOrder(pickingOrder);
editPickingOrder(pickingOrder) += ACTION EXEC editOrder(orderOrderPickingOrder(pickingOrder));

acceptedOrder 'Принят в работу' (order) = acceptedPickingOrder(orderPickingOrderOrder(order));
namePerformerOrder 'Комплектовщик' (order) = namePerformerPickingOrder(orderPickingOrderOrder(order));

calcPartOrder 'Частично собран' (order) = calcPartPickingOrder(orderPickingOrderOrder(order));
calcFullOrder 'Полностью собран' (order) = calcFullPickingOrder(orderPickingOrderOrder(order));
calcPartOrFullOrder 'Собран' (order) = calcPartOrder(order) OR calcFullOrder(order);

startDateTimeOrder 'Начало комплектации' (order) = startDateTimePickingOrder(orderPickingOrderOrder(order));
finishDateTimeOrder 'Завершение комплектации' (order) = finishDateTimePickingOrder(orderPickingOrderOrder(order));

statusPickingOrder 'Статус комплектации' (order) = CASE
    WHEN orderPickingOrderOrder(order) THEN statusPickingPickingOrder(orderPickingOrderOrder(order))
    WHEN order IS Order THEN 'Без комплектации';
backgroundStatusPickingOrder 'Цвет' (order) = CASE
    WHEN orderPickingOrderOrder(order) THEN backgroundStatusPickingPickingOrder(orderPickingOrderOrder(order))
    WHEN order IS Order THEN RGB(224, 224, 255);
packQuantityOrder 'Кол-во собранных мест' (order) = packQuantityPickingOrder(orderPickingOrderOrder(order));


META defineOrderPickingOrder(sign, stockProp)

    @defineDocumentInterfaceProperty (order, createPickingOrder, 'Создать заказ на комплектацию');
    Order.createPickingOrderOrder(o) += createPickingOrderOrder(o); 

    EXTEND FORM userOrder
        PROPERTIES(o)  createPickingOrderOrder
    ;
    EXTEND DESIGN userOrder {
        headerCreateDocuments {
            NEW headerPicking {
                type = CONTAINERH;
                caption = 'Заказ на комплектацию';
                ADD PROPERTY(createPickingOrderOrder);

            }
        }
    }
    //-------------------- Ячейки -----------------------//

    @defineDocumentInterfaceDetailBin(order);
    Order.binOrderDetail(d) += binOrderDetail(d);
    
    @extendFormInterfaceDetailBin(order, o, , quantity);

    @deriveDocumentOperationProperty(UserOrder, showBin);

    //-------------------- Расширяем операции свойством по созданию заказа на комплектацию -----------------------//

    EXTEND FORM orders
        PROPERTIES(o) READONLY FORCE PANEL namePerformerOrder, startDateTimeOrder, finishDateTimeOrder,
                      statusPickingOrder BACKGROUND backgroundStatusPickingOrder(o), packQuantityOrder
    ;
    EXTEND DESIGN orders {
        documentHistory {
            NEW picking {
                caption = 'Комплектация';
                type = CONTAINERV;
                ADD PROPERTY(namePerformerOrder);
                ADD PROPERTY(startDateTimeOrder);
                ADD PROPERTY(statusPickingOrder);
                ADD PROPERTY(finishDateTimeOrder);
                ADD PROPERTY(packQuantityOrder);
            }
        }
    }
END
