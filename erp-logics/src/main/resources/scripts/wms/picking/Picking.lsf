MODULE Picking;

REQUIRE System,
        Historizable,
        Numerator,
        Document,
        Bin,
        Stock,
        PickingOrder,
        OrderLedger,
        PurchaseLedger,
        StockMovement;

CLASS ABSTRACT Picking 'Комплектация': Document ;
CLASS ABSTRACT PickingDetail 'Строка комплектации': DocumentDetail;

CLASS UserPicking 'Комплектация (польз.)': Picking;
CLASS UserPickingDetail 'Комплектации (польз.)': PickingDetail;

@defineDocumentInterface(picking);
@deriveDocumentHeaderTimePrefix(UserPicking, );

@defineDocumentInterfaceNumber(picking);
overNumberPicking = ABSTRACT STRING[18](Picking);
@defineNumeratedDefault(UserPicking, 'Комплектации', 'КК');
@defineDocumentInterfaceDataStock(picking, stock, 'Склад', );

@defineDocumentInterfaceDescription(picking, 'Комплектация');

@defineDocumentInterfaceDetailSku(picking, sku);
@defineDocumentInterfaceDetailQuantity(picking);
@showDocumentInterfaceDetailBatch(picking);
@defineDocumentInterfaceDetailBatch(picking, batch);
replaceSkuBatch(s, b) += ACTION (s, b){ skuUserPickingDetail(detail) <- s WHERE batchUserPickingDetail(detail) == b;}
@defineDocumentInterfaceDetailBin(picking);

@defineDocumentInterfaceHeaderQuantity(picking);

@defineDocumentHeaderSkuQuantity(picking, sku);
@defineDocumentHeaderSkuQuantity(userPicking, sku);

@defineAddDetailDialogSkuStock(userPicking, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userPicking, sku);

@defineDocumentDetailGrossWeight(picking, sku);

@defineDocumentHeaderGrossWeight(picking);

// История по правой кнопке
@defineMovementSku(pickingDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPickingDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pickingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPickingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(pickingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPickingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

@defineBalancesBatch(pickingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userPickingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pickingDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userPickingDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

changeBatchUserPickingDetail = ACTION (detail) {
    FORM dialogBatchStock OBJECTS st = stockUserPickingDetail(detail),
                                  t = dateTimeUserPickingDetail(detail),
                                  sk = skuUserPickingDetail(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserPickingDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batchUserPickingDetail(detail) <- NULL;
    }
};

packQuantityPicking 'Кол-во собранных мест' = ABSTRACT NUMERIC[14,3] (Picking);
packQuantityUserPicking 'Кол-во собранных мест' = DATA NUMERIC[14,3] (UserPicking);
packQuantityPicking(picking) += packQuantityUserPicking(picking);

// --------------------------- Формы Заказа ---------------------------------

editPicking 'Редактировать' = ABSTRACT ACTION LIST (Picking) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

editSkuUserPickingDetail 'Редактировать SKU' (d) = ACTION editSku(skuUserPickingDetail(d));
FORM userPicking 'Комплектация'
    OBJECTS o = UserPicking FIXED PANEL
    PROPERTIES (o) nameStockUserPicking,// ON CHANGE changeCustomerStock###customerFilter###userPicking(o),
                   nameNumeratorUserPicking, numberUserPicking, seriesUserPicking, dateUserPicking, timeUserPicking,
                   noteUserPicking, countUserPickingDetailUserPicking, quantityUserPickingDetailUserPicking,
                   packQuantityUserPicking

    OBJECTS d = UserPickingDetail
    PROPERTIES (d) indexUserPickingDetail
    PROPERTIES (d) ON EDIT editSkuUserPickingDetail(d) idBarcodeSkuUserPickingDetail, nameSkuUserPickingDetail, shortNameUOMSkuUserPickingDetail,
                   nameBatchUserPickingDetail ON CHANGE changeBatchUserPickingDetail(d), nameBinUserPickingDetail
    PROPERTIES (d) quantityUserPickingDetail, ADDOBJ, DELETESESSION

    PROPERTIES(o) TODRAW d addDetailDialogSkuStockUserPickingDetailUserPicking,
                           addDetailInputBarcodeUserPickingDetailUserPicking, deleteUserPickingDetailUserPicking
    FILTERS userPickingUserPickingDetail(d) == o

    EDIT UserPicking OBJECT o
;

DESIGN userPicking {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
                d.panel {
                    type = CONTAINERV;
                }
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;

                MOVE o.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameStockUserPicking(o));
                    MOVE PROPERTY(nameNumeratorUserPicking(o));
                    MOVE PROPERTY(numberUserPicking(o));
                    MOVE PROPERTY(seriesUserPicking(o));
                    MOVE PROPERTY(dateUserPicking(o));
                    MOVE PROPERTY(timeUserPicking(o));
                }
                MOVE o.documentPrm;
            }
                NEW sumContainer {
                    MOVE o.documentSum {
                        columns = 1;
                    }
                    NEW seatContainer {
                        MOVE PROPERTY(packQuantityUserPicking(o));
                    }
                }
        }
    }
}

//    @extendFormDocumentSkuStock(userPicking, userPicking, o, legalEntityProp, stockProp);



addUserPicking 'Добавить' = ACTION ADDFORM UserPicking;
editUserPicking 'Редактировать' (userPicking) = ACTION EDITFORM UserPicking;
editPicking(picking) += ACTION editUserPicking(picking);


copyPicking 'Копировать' = ACTION (picking) NEWSESSION {
    FOR ADDOBJ o = UserPicking DO {

        ASSIGN stockUserPicking(o) <- stockPicking(picking);
        ASSIGN noteUserPicking(o) <- notePicking(picking);

        FOR pickingPickingDetail(pickingDetail) == picking DO {
            FOR ADDOBJ d=UserPickingDetail DO {
                ASSIGN userPickingUserPickingDetail(d) <- o;
                ASSIGN skuUserPickingDetail(d) <- skuPickingDetail(pickingDetail);
                ASSIGN quantityUserPickingDetail(d) <- quantityPickingDetail(pickingDetail);
                ASSIGN batchUserPickingDetail(d) <- batchPickingDetail(pickingDetail);
                ASSIGN binUserPickingDetail(d) <- binPickingDetail(pickingDetail);
            }
        }

        FORM userPicking OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;


FORM pickings 'Комплектации'
    OBJECTS o = Picking
    PROPERTIES (o) READONLYIF isReadonly() numberPicking, seriesPicking, datePicking, timePicking,
                   nameStockPicking

    PROPERTIES (o) READONLY countPickingDetailPicking, quantityPickingDetailPicking

    PROPERTIES (o) READONLYIF isReadonly() packQuantityPicking //notePicking

    PROPERTIES (o) READONLY FORCE PANEL createdNameUserUserPicking, createdTimeUserPicking, createdHostnameComputerUserPicking

    PROPERTIES ()  addUserPicking TODRAW o
    PROPERTIES (o) editPicking, copyPicking
    PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserPicking(o)

    OBJECTS d=PickingDetail
    PROPERTIES (d) READONLY indexPickingDetail, nameSkuPickingDetail, shortNameUOMSkuPickingDetail,
                   nameBatchPickingDetail, nameBinPickingDetail, quantityPickingDetail
    FILTERS pickingPickingDetail(d) == o
    DIALOG Picking OBJECT o
;

DESIGN pickings {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;
        type = CONTAINERV;

        MOVE o.box { fill = 2; }

        NEW documentDetail {
            type = TABBED;
            fill = 2;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                fill = 1;
                caption = 'История';
                MOVE o.created;

            }
            NEW printTab {
                fill = 1;
                caption = 'Печатные формы';
                NEW printContainer {
                    fill = 1;
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
            NEW actionContainer {
                fill = 1;
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    fill = 1;
                    caption = 'Создание на основе';
                    type = CONTAINERV;
                    MOVE PROPERTY(copyPicking(o)) { caption = 'Комплектация';}
                }
            }
        }
    }
}
@extendFormEditable(pickings);
@defineDocumentLogForm(pickings, o);

//-- Подбор товар/партии

@defineDocumentSkuPriceListTypeSystemLedger(userPicking, accountPriceListType, stock, );
@extendFormDocumentSku(userPicking, userPicking, o);

@defineDocumentBatchPriceListTypeSystemLedger(userPicking, accountPriceListType, stock, );
@extendFormDocumentBatch(userPicking, userPicking, o);

// Резервы
@extendFormDocumentSkuOrderLedger(userPicking, userPicking, o, stock);
@extendFormDocumentSkuOrderLedgerAll(userPicking, userPicking, o);

@extendFormDocumentBatchOrderLedger(userPicking, userPicking, o, stock);
@extendFormDocumentBatchOrderLedgerAll(userPicking, userPicking, o);

@defineDocumentSkuStockSupplier (userPicking, userPicking, o);
@defineDocumentBatchStockSupplier(userPicking, userPicking, o);

//-------------------------- Связь комплектаций с заказами-комплектациями ------------------------------------//

pickingOrderPicking = ABSTRACT PickingOrder (Picking) PERSISTENT;
pickingOrderUserPicking = DATA PickingOrder (UserPicking);
pickingOrderPicking(picking) += pickingOrderUserPicking(picking);

CONSTRAINT stockUserPicking(picking) != stockPickingOrder(pickingOrderUserPicking(picking))
    CHECKED BY pickingOrderUserPicking
        MESSAGE 'Склад в заказе на комплектацию и в комплектации должны соответствовать друг другу';

descriptionPickingOrderPicking 'Заказ' (picking) = descriptionPickingOrder(pickingOrderPicking(picking)) MINCHARWIDTH 30 PREFCHARWIDTH 50 IN pickingOrders;
notePickingOrderPicking 'Примечание (заказ)' (p) = notePickingOrder(pickingOrderPicking(p)); 

quantityPickingsPickingOrder 'Количество комплектаций' (pickingOrder) = GROUP SUM 1 BY pickingOrderPicking(picking) PERSISTENT;

pickingsPickingOrder 'Комплектации' (pickingOrder) = GROUP CONCAT VARSTRING[255](descriptionPicking(picking)), ', '
                                         BY pickingOrderPicking(picking)
                                         ORDER picking
//                                         IN order
                                         MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

moveUserPickingPickingOrder 'Комплектация' = ACTION (pickingOrder) NEWSESSION {
    FOR ADDOBJ p = UserPicking DO {
        pickingOrderUserPicking(p) <- pickingOrder;
        stockUserPicking(p) <- stockPickingOrder(pickingOrder);
        FOR pickingOrderPickingOrderDetail(detail) == pickingOrder ADDOBJ d = UserPickingDetail DO {
            userPickingUserPickingDetail(d) <- p;
            skuUserPickingDetail(d) <- skuPickingOrderDetail(detail);
            quantityUserPickingDetail(d) <- quantityPickingOrderDetail(detail);
            batchUserPickingDetail(d) <- batchPickingOrderDetail(detail);
            binUserPickingDetail(d) <- binPickingOrderDetail(detail);
        }
        FORM userPicking OBJECTS o=p MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;


EXTEND FORM pickingOrders
    PROPERTIES(o) READONLY BEFORE deleteo quantityPickingsPickingOrder, pickingsPickingOrder
    PROPERTIES(o) moveUserPickingPickingOrder
;


DESIGN pickingOrders {
    createdContainer{
        MOVE PROPERTY(moveUserPickingPickingOrder(o));
    }
}

//--
FORM pickingsOrderPickings 'Заказы на комплектацию'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES (s) READONLY nameStock

    OBJECTS o = PickingOrder
    PROPERTIES (o) READONLY numberPickingOrder, seriesPickingOrder, datePickingOrder, timePickingOrder,
                   countPickingOrderDetailPickingOrder, quantityPickingOrderDetailPickingOrder,
                   notePickingOrder, quantityPickingsPickingOrder, pickingsPickingOrder

    OBJECTS d=PickingOrderDetail
    PROPERTIES (d) READONLY indexPickingOrderDetail, nameSkuPickingOrderDetail, shortNameUOMSkuPickingOrderDetail,
                   nameBatchPickingOrderDetail, nameBinPickingOrderDetail, quantityPickingOrderDetail
    FILTERS pickingOrderPickingOrderDetail(d) == o,
            stockPickingOrder(o) == s
;
fillUserPickingOrderPicking 'Заполнить на основании заказа на комплектацию' = ACTION (userPicking) {
    FORM pickingsOrderPickings OBJECTS s = stockUserPicking(userPicking) MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL order = PickingOrder();
        order() <- chosenObject('o');
        pickingOrderUserPicking(userPicking) <- order();

        FOR pickingOrderPickingOrderDetail(detail) == order() ADDOBJ d = UserPickingDetail DO {
            userPickingUserPickingDetail(d) <- userPicking;
            skuUserPickingDetail(d) <- skuPickingOrderDetail(detail);
            quantityUserPickingDetail(d) <- quantityPickingOrderDetail(detail);
            batchUserPickingDetail(d) <- batchPickingOrderDetail(detail);
            binUserPickingDetail(d) <- binPickingOrderDetail(detail);
        }
    }
} IN pickingOrders;


EXTEND FORM userPicking
    PROPERTIES(o) fillUserPickingOrderPicking, descriptionPickingOrderPicking
;
DESIGN userPicking {
    headerRow1 {
        NEW baseContainer {
            type = CONTAINERH;
            caption = 'Основание' ;
            MOVE o.pickingOrders;
        }
    }
}

EXTEND FORM pickings
    PROPERTIES(o) READONLY BEFORE deleteo descriptionPickingOrderPicking
;

//------------------------- Определение стадий комплектации--------------------//

countPickingOrderSkuPickingOrder 'Кол-во наименований' (pickingOrder) = GROUP SUM 1 IF quantityPickingOrderDetailSkuPickingOrder(sku, pickingOrder) BY pickingOrder;

quantityPickingDetailSkuPickingOrder 'Кол-во в комплектациях' (sku, pickingOrder) = GROUP SUM quantityPickingDetailSkuPicking(sku, picking) BY sku, pickingOrderPicking(picking);
countEqualPickingOrderSkuPickingOrder 'Кол-во наименований с равным кол-ом товара' (pickingOrder) = GROUP SUM 1 IF quantityPickingDetailSkuPickingOrder(sku, pickingOrder) == quantityPickingOrderDetailSkuPickingOrder(sku, pickingOrder) BY pickingOrder;

calcFullPickingOrder 'Полностью собран' (pickingOrder) = countPickingOrderSkuPickingOrder(pickingOrder) == countEqualPickingOrderSkuPickingOrder(pickingOrder) PERSISTENT;
calcPartPickingOrder 'Частично собран' (pickingOrder) = quantityPickingsPickingOrder(pickingOrder) AND NOT calcFullPickingOrder(pickingOrder);

packQuantityPickingOrder 'Кол-во собранных мест' (pickingOrder) = GROUP SUM packQuantityPicking(picking) BY pickingOrderPicking(picking);

acceptedPickingOrder 'Принят в работу' = DATA BOOLEAN (PickingOrder);
notAcceptedPickingOrder(o) = NOT acceptedPickingOrder(o);

startDatePickingOrder 'Дата начала' = DATA DATE (PickingOrder);
startTimePickingOrder 'Время начала' = DATA TIME (PickingOrder);
startDateTimePickingOrder 'Начало комплектации' (o) = dateTimeToDateTime(startDatePickingOrder(o), startTimePickingOrder(o)) PERSISTENT;

finishDatePickingOrder 'Дата окончания' = DATA DATE (PickingOrder);
finishTimePickingOrder 'Время окончания' = DATA TIME (PickingOrder);
finishDateTimePickingOrder 'Дата/время окончания' (o) = dateTimeToDateTime(finishDatePickingOrder(o), finishTimePickingOrder(o)) PERSISTENT;

startDateTimePicking 'Дата/время начала' (picking) = startDateTimePickingOrder(pickingOrderPicking(picking));
finishDateTimePicking 'Дата/время окончания' (picking) =  finishDateTimePickingOrder(pickingOrderPicking(picking));

performerPickingOrder  = DATA CustomUser (PickingOrder);
namePerformerPickingOrder 'Комплектовщик' (pickingOrder) = nameContact(performerPickingOrder(pickingOrder));

performerPicking = performerPickingOrder(pickingOrderPicking(picking));
namePerformerPicking 'Комплектовщик' (picking) = nameContact(performerPicking(picking));

statusPickingPickingOrder 'Статус комплектации' (order) = CASE
                                          WHEN calcPartPickingOrder(order) THEN 'Частично собран'
                                          WHEN calcFullPickingOrder(order) THEN 'Полностью собран'
                                          WHEN acceptedPickingOrder(order) THEN 'В комплектации'
                                          WHEN order IS PickingOrder THEN 'Ожидает комплектацию'
                                          MINCHARWIDTH 22 PREFCHARWIDTH 30
                                      ;
backgroundStatusPickingPickingOrder 'Цвет' (order) =  CASE
                                          WHEN calcPartPickingOrder(order) THEN RGB(255,238,165)
                                          WHEN calcFullPickingOrder(order) THEN RGB(212,255,212)
                                          WHEN acceptedPickingOrder(order) THEN RGB(255,238,165)
                                          WHEN order IS PickingOrder THEN RGB(255,200,216)
                                      ;

statusPicking 'Статус' = statusPickingPickingOrder(pickingOrderPicking(picking));
backgroundStatusPicking = backgroundStatusPickingPickingOrder(pickingOrderPicking(picking));

acceptPickingOrder 'Принять' = ACTION (pickingOrder) NEWSESSION {
    acceptedPickingOrder(pickingOrder) <- TRUE;
    performerPickingOrder(pickingOrder) <- currentUser();
    startDatePickingOrder(pickingOrder) <- currentDate();
    startTimePickingOrder(pickingOrder) <- currentTime();
    apply();

} TOOLBAR EDITKEY 'ctrl ENTER';
unacceptPickingOrder 'Отменить' = ACTION (pickingOrder) NEWSESSION {
    acceptedPickingOrder(pickingOrder) <- NULL;
    performerPickingOrder(pickingOrder) <- NULL;
    startDatePickingOrder(pickingOrder) <- NULL;
    startTimePickingOrder(pickingOrder) <- NULL;
    apply();
} TOOLBAR EDITKEY 'ctrl DELETE';

FORM packQuantity 'Комплектация'
    OBJECTS n = NUMERIC[14,3] FIXED PANEL
    PROPERTIES val = OBJVALUE(n)
;
DESIGN packQuantity {
    main {

        MOVE PROPERTY(val) {
            caption = 'Введите количество собранных мест';
            panelCaptionAbove = TRUE;
            font = 'bold 36';
            minimumCharWidth = 4;
            preferredCharWidth = 8;
            maximumCharWidth = 14;
        }
        MOVE functions.box;
    }
}

fullyAssembledPickingOrder 'Собран полностью' = ACTION (pickingOrder) NEWSESSION {
    FORM packQuantity MODAL;
    IF formResult() == FormResult.ok THEN {
        finishDatePickingOrder(pickingOrder) <- currentDate();
        finishTimePickingOrder(pickingOrder) <- currentTime();
        FOR ADDOBJ p = UserPicking DO {
            pickingOrderUserPicking(p) <- pickingOrder;
            stockUserPicking(p) <- stockPickingOrder(pickingOrder);
            packQuantityUserPicking(p) <- chosenNumeric('n');
            numberUserPicking(p) <- overNumberPicking(p);
            FOR pickingOrderPickingOrderDetail(detail) == pickingOrder ADDOBJ d = UserPickingDetail DO {
                userPickingUserPickingDetail(d) <- p;
                skuUserPickingDetail(d) <- skuPickingOrderDetail(detail);
                quantityUserPickingDetail(d) <- quantityPickingOrderDetail(detail);
                batchUserPickingDetail(d) <- batchPickingOrderDetail(detail);
                binUserPickingDetail(d) <- binPickingOrderDetail(detail);
            }
        }
    }
    apply();
} TOOLBAR EDITKEY 'F10';

partiallyAssembledPickingOrder 'Собран частично' = ACTION (pickingOrder) NEWSESSION{
    FORM packQuantity MODAL;
    IF formResult() == FormResult.ok THEN {
        finishDatePickingOrder(pickingOrder) <- currentDate();
        finishTimePickingOrder(pickingOrder) <- currentTime();
        FOR ADDOBJ p = UserPicking DO {
            pickingOrderUserPicking(p) <- pickingOrder;
            stockUserPicking(p) <- stockPickingOrder(pickingOrder);
            packQuantityUserPicking(p) <- chosenNumeric('n');
            numberUserPicking(p) <- overNumberPicking(p);
            FOR pickingOrderPickingOrderDetail(detail) == pickingOrder ADDOBJ d = UserPickingDetail DO {
                userPickingUserPickingDetail(d) <- p;
                skuUserPickingDetail(d) <- skuPickingOrderDetail(detail);
                quantityUserPickingDetail(d) <- quantityPickingOrderDetail(detail);
                batchUserPickingDetail(d) <- batchPickingOrderDetail(detail);
                binUserPickingDetail(d) <- binPickingOrderDetail(detail);
            }
            FORM userPicking OBJECTS o=p MANAGESESSION DOCKEDMODAL;
        }
    }
} TOOLBAR EDITKEY 'F9';

EXTEND FORM pickingOrders
    PROPERTIES(o) READONLYIF isReadonly() namePerformerPickingOrder, startDatePickingOrder, startTimePickingOrder
    PROPERTIES(o) READONLY statusPickingPickingOrder BACKGROUND backgroundStatusPickingPickingOrder(o)
    PROPERTIES(o) READONLYIF isReadonly() finishDatePickingOrder, finishTimePickingOrder
    PROPERTIES(o) READONLY packQuantityPickingOrder
    PROPERTIES(o) acceptPickingOrder, unacceptPickingOrder, fullyAssembledPickingOrder, partiallyAssembledPickingOrder

;

DESIGN pickingOrders {
    actionContainer {
        NEW  pickingContainer {
            caption = 'Комплектация';
            type = CONTAINERV;
            NEW pickingContainer1 {
                type = CONTAINERH;
                MOVE PROPERTY(acceptPickingOrder(o));
                MOVE PROPERTY(unacceptPickingOrder(o));
            }
            NEW pickingContainer2 {
                type = CONTAINERH;
                MOVE PROPERTY(fullyAssembledPickingOrder(o));
                MOVE PROPERTY(partiallyAssembledPickingOrder(o));
            }
        }
    }
}

//-------------------------------- Печатная форма-------------------------------//

FORM printPickingOrder 'Заказ на комплектацию'
    OBJECTS o = PickingOrder FIXED PANEL
    PROPERTIES (o) READONLY seriesNumberPickingOrder, datePickingOrder, timePickingOrder,
                   fullNameStockPickingOrder

    PROPERTIES (o) READONLY countPickingOrderDetailPickingOrder, quantityPickingOrderDetailPickingOrder,
                   namePerformerPickingOrder, startDatePickingOrder, startTimePickingOrder, statusPickingPickingOrder,
                   finishDatePickingOrder, finishTimePickingOrder

    OBJECTS d=PickingOrderDetail
    PROPERTIES (d) READONLY indexPickingOrderDetail, nameSkuPickingOrderDetail, shortNameUOMSkuPickingOrderDetail,
                   nameBatchPickingOrderDetail, nameBinPickingOrderDetail, quantityPickingOrderDetail
    FILTERS pickingOrderPickingOrderDetail(d) == o
;

printPickingOrder 'Заказ на комплектацию' (order) = ACTION FORM printPickingOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;

EXTEND FORM pickingOrders
    PROPERTIES(o) FORCE PANEL printPickingOrder
;
DESIGN pickingOrders {
    printTab {
        MOVE o.print;
    }
}

NAVIGATOR {
    pickingNavigator 'Комплектация' {
        ADD pickings;
    }
}