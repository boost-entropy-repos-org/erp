MODULE SalePickingOrder;

REQUIRE OrderPickingOrder, OrderInvoicePickingOrder, SaleOrder, SaleBin, SaleInvoice, SaleInvoiceConsignmentBy;

NAMESPACE Sale;

@defineOrderPickingOrder(' (продажа)', supplierStock);

@defineOrderInvoicePickingOrder (' (продажа)', supplierStock);

pickingBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP pickingQuantityOrderDetail
                                                           LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) IF skuBatch(batch) == skuOrderDetail(orderDetail)
                                                           BY orderDetail
                                                           ORDER orderBatch(batch);

createPickingExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += ACTION (userInvoice, order) {
    FOR orderOrderDetail(orderDetail) == order AND pickingBatchOrderDetail(batch, orderDetail) AND NOT batchOrderDetail(orderDetail)
        ADDOBJ d = UserInvoiceDetail DO {
            userInvoiceUserInvoiceDetail(d) <- userInvoice;
            orderUserInvoiceDetail(d) <- order;
            skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            batchUserInvoiceDetail(d) <- batch;
            quantityUserInvoiceDetail (d) <- pickingBatchOrderDetail(batch, orderDetail);
            
            fillUserInvoiceDetailOrderDetail(d, orderDetail);
            overFillUserInvoiceDetailOrderDetail(d, orderDetail);
        }
    FOR orderOrderDetail(orderDetail) == order AND PREV(pickingQuantityOrderDetail(orderDetail)) AND batchOrderDetail(orderDetail)
        ADDOBJ d = UserInvoiceDetail DO {
            userInvoiceUserInvoiceDetail(d) <- userInvoice;
            orderUserInvoiceDetail(d) <- order;
            skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            batchUserInvoiceDetail(d) <- batchOrderDetail(orderDetail);
            quantityUserInvoiceDetail (d) <- PREV(pickingQuantityOrderDetail(orderDetail));

            fillUserInvoiceDetailOrderDetail(d, orderDetail);
            overFillUserInvoiceDetailOrderDetail(d, orderDetail);
        }
}

packQuantityConsignment(consignment) += packQuantityInvoice(consignment);