MODULE ImportDocument;

REQUIRE System, Import;

CLASS FileExtension 'Тип файла' {
    xls 'XLS',
    xlsx 'XLSX',
    csv 'CSV',
    dbf 'DBF'
}

CLASS KeyType 'Ключ товара' {
    barcode 'Штрихкод',
    batch   'Код партии',
    item    'Код товара'
}

skuBatchId (idBatch) = skuBatch(batchId(idBatch));

CLASS ImportTypeDetail 'Свойство' {
    numberDocument 'Номер накладной',
    dateDocument 'Дата накладной',
    idSupplier 'Код поставщика',
    idSupplierStock 'Код склада поставщика',
    currencyDocument 'Валюта накладной',
    dataIndex 'Порядковый номер',
    idItem 'Код товара',
    idItemGroup 'Код группы товара',
    barcodeItem 'Штрихкод товара',
    originalCustomsGroupItem 'ТНВЭД (ориг.)',
    idBatch 'Код партии',
    idBox 'Код короба',
    nameBox 'Наименование короба',
    captionItem 'Наименование',
    originalCaptionItem 'Наименование (ориг.)',
    UOMItem 'Единица измерения',
    idManufacturer 'Код производителя',
    nameManufacturer 'Наименование производителя',
    nameCountry 'Наименование страны',
    nameOriginCountry 'Наименование страны (ориг.)',
    importCountryBatch 'Страна ввоза',
    idCustomerStock 'Код склада покупателя',
    pharmacyPriceGroupItem 'Тип лекарственного средства',
    quantity 'Количество',
    price 'Цена',
    manufacturingPrice 'Цена производителя',
    contractPrice 'Контрактная цена',
    shipmentPrice 'Учётная цена',
    shipmentSum 'Учётная сумма',
    rateExchange 'Курс',
    sum 'Сумма',
    valueVAT 'НДС, %',
    sumVAT 'Сумма НДС',
    invoiceSum 'Сумма с НДС',
    seriesPharmacy 'Серия лекарственного средства',
    numberCompliance 'Номер сертификата',
    dateCompliance 'Дата сертификата',
    declaration 'Декларация',
    expiryDate 'Срок годности',
    manufactureDate 'Дата изготовления',
    idArticle 'Код артикула',
    captionArticle 'Наименование артикула',
    originalCaptionArticle 'Наименование артикула (ориг.)',
    idColor 'Код цвета',
    nameColor 'Цвет',
    idTheme 'Код темы',
    nameTheme 'Тема',
    netWeight 'Масса нетто (ед.)',
    netWeightSum 'Масса нетто (сумма)',
    grossWeight 'Масса брутто (ед.)',
    grossWeightSum 'Масса брутто (сумма)',
    composition 'Состав',
    originalComposition 'Состав (ориг.)',
    idSize 'Код размера',
    nameSize 'Размер',
    nameOriginalSize 'Размер (ориг.)',
    idCollection 'Код коллекции',
    nameCollection 'Коллекция',
    idSeasonYear 'Год',
    idSeason 'Код сезона',
    nameSeason 'Сезон',
    idBrand 'Код бренда',
    nameBrand 'Наименование бренда'
}

CLASS ImportType 'Тип импорта';
TABLE importType(ImportType);

nameImportType 'Имя' =  DATA VARSTRING[100](ImportType);
startRowImportType 'Начинать со строки' = DATA INTEGER(ImportType);
isPostedImportType 'Импортировать проведёнными' = DATA BOOLEAN(ImportType);
separatorImportType 'Разделитель' = DATA INTEGER(ImportType);

primaryKeyTypeImportType 'Тип первичного ключа' = DATA KeyType(ImportType);
captionPrimaryKeyTypeImportType 'Тип первичного ключа' (importType) = staticCaption(primaryKeyTypeImportType(importType));
namePrimaryKeyTypeImportType 'Тип первичного ключа' (importType) = staticName(primaryKeyTypeImportType(importType));

secondaryKeyTypeImportType 'Тип вторичного ключа' = DATA KeyType(ImportType);
captionSecondaryKeyTypeImportType 'Тип вторичного ключа' (importType) = staticCaption(secondaryKeyTypeImportType(importType));
nameSecondaryKeyTypeImportType 'Тип вторичного ключа' (importType) = staticName(secondaryKeyTypeImportType(importType));

TABLE importTypeImportTypeDetail (ImportType, ImportTypeDetail);
indexImportTypeImportTypeDetail 'Поле' = DATA VARSTRING[50] (ImportType, ImportTypeDetail);

replaceOnlyNullImportTypeImportTypeDetail 'Не замещать' = DATA BOOLEAN (ImportType, ImportTypeDetail);

fileExtensionImportType  = DATA FileExtension(ImportType);
captionFileExtensionImportType 'Тип файла' (importType) = staticCaption(fileExtensionImportType(importType));

autoImportOperationImportType =  DATA Operation.Operation(ImportType);
nameAutoImportOperationImportType 'Операция'(importType) = Operation.nameOperation(autoImportOperationImportType(importType));

autoImportSupplierImportType =  DATA LegalEntity(ImportType);
nameAutoImportSupplierImportType 'Поставщик' (importType) =  nameLegalEntity(autoImportSupplierImportType(importType));
autoImportSupplierStockImportType = DATA Stock(ImportType);
nameAutoImportSupplierStockImportType 'Склад поставщика' (importType) =  nameStock(autoImportSupplierStockImportType(importType));
autoImportCustomerImportType = DATA LegalEntity(ImportType);
nameAutoImportCustomerImportType 'Покупатель' (importType) =  nameLegalEntity(autoImportCustomerImportType(importType));
autoImportCustomerStockImportType = DATA Stock(ImportType);
nameAutoImportCustomerStockImportType 'Склад покупателя' (importType) =  nameStock(autoImportCustomerStockImportType(importType));

FORM importTypeDetails
    OBJECTS itd = ImportTypeDetail
    PROPERTIES(itd) READONLY staticCaption
    DIALOG ImportTypeDetail OBJECT itd
;

FORM fileExtensions 'Типы файлов'
    OBJECTS f=FileExtension
    PROPERTIES(f) READONLY staticCaption
    DIALOG FileExtension OBJECT f
;

FORM keyTypes 'Типы ключа'
    OBJECTS k=KeyType
    PROPERTIES(k) READONLY staticCaption
    DIALOG KeyType OBJECT k
;

showSeparator (importType) = importType==FileExtension.csv;

FORM importType 'Тип импорта'
    OBJECTS i=ImportType FIXED PANEL
    PROPERTIES(i) nameImportType, captionFileExtensionImportType, startRowImportType, isPostedImportType,
                  separatorImportType SHOWIF showSeparator(i), captionPrimaryKeyTypeImportType, captionSecondaryKeyTypeImportType
    PROPERTIES(i) nameAutoImportOperationImportType FORCE PANEL, 
                  nameAutoImportSupplierImportType FORCE PANEL,
                  nameAutoImportSupplierStockImportType FORCE PANEL,
                  nameAutoImportCustomerImportType FORCE PANEL,
                  nameAutoImportCustomerStockImportType FORCE PANEL                  
    OBJECTS d = ImportTypeDetail
    PROPERTIES(d) READONLY staticCaption
    PROPERTIES(i,d) indexImportTypeImportTypeDetail, replaceOnlyNullImportTypeImportTypeDetail                   
    EDIT ImportType OBJECT i
;

FORM importTypes 'Типы импорта'
    OBJECTS i=ImportType
    PROPERTIES(i) READONLY nameImportType, captionFileExtensionImportType, startRowImportType, isPostedImportType,
                   separatorImportType SHOWIF showSeparator(i), captionPrimaryKeyTypeImportType, captionSecondaryKeyTypeImportType
    PROPERTIES(i) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG ImportType OBJECT i
;

EXTEND DESIGN importType {
    ADD i.box;
    NEW tabbedContainer {
        fill = 1;
        type = TABBED;
        NEW columnsContainer {
            caption = 'Колонки';
            ADD d.box;
        }
        NEW invoiceParamsContainer {
            caption = 'Параметры накладной';
            ADD PROPERTY(nameAutoImportOperationImportType);
            ADD PROPERTY(nameAutoImportSupplierImportType);
            ADD PROPERTY(nameAutoImportSupplierStockImportType);
            ADD PROPERTY(nameAutoImportCustomerImportType);
            ADD PROPERTY(nameAutoImportCustomerStockImportType);
        }
    }
    ADD functions.box;
}

EXTEND FORM integrationData
    OBJECTS i=ImportType
    PROPERTIES(i) READONLY nameImportType, captionFileExtensionImportType, startRowImportType, isPostedImportType,
                   separatorImportType SHOWIF showSeparator(i), captionPrimaryKeyTypeImportType, captionSecondaryKeyTypeImportType
    PROPERTIES(i) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
;

EXTEND DESIGN integrationData {
    pane {
        NEW importType {
            ADD i.box;
            caption = 'Универсальный импорт';
        }
    }
}

