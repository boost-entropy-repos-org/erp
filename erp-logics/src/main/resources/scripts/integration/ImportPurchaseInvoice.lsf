MODULE ImportPurchaseInvoice;

REQUIRE System,
        ImportDocument,
        Item,
        PurchaseInvoice;

importPurchaseInvoiceDataAction 'Импортировать накладную' = ACTION CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoiceActionProperty' (Purchase.UserInvoice);
importTypeUserInvoice = DATA ImportType(UserInvoice);
nameImportTypeUserInvoice 'Тип импорта' (userInvoice) = nameImportType(importTypeUserInvoice(userInvoice));

importPurchaseInvoicesDataAction 'Импортировать накладные' = ACTION CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesActionProperty' ();
importTypeUserInvoices = DATA ImportType();
nameImportTypeUserInvoices 'Тип импорта' () = nameImportType(importTypeUserInvoices());

importPurchaseInvoicesDirectoryDataAction 'Импортировать накладные из папки' = ACTION CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesDirectoryActionProperty' ();
importPurchaseInvoicesEmailDataAction 'Импортировать накладные из почты' = ACTION CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesEmailActionProperty' ();

originalInvoice 'Файл оригинала накладной'  = DATA CUSTOMFILE (Purchase.Invoice);

saveOriginalInvoice 'Загрузить файл оригинала накладной' (i) = ACTION LOADFILE originalInvoice(i);
openOriginalInvoice 'Просмотреть оригинал накладной' (i) = ACTION OPENFILE originalInvoice(i);

autoImportEmailImportType 'E-mail поставщика' =  DATA VARSTRING[100](ImportType);
autoImportAccountImportType 'E-mail аккаунт' =  DATA Account(ImportType);
autoImportNameAccountImportType 'E-mail аккаунт' (importType) = nameAccount(autoImportAccountImportType(importType));
autoImportCheckInvoiceExistenceImportType 'Проверять существование накладной' = DATA BOOLEAN (ImportType);

EXTEND FORM importTypes
PROPERTIES(i) READONLY SHOWIF autoImportImportType(i) autoImportEmailImportType, autoImportNameAccountImportType, 
                              autoImportCheckInvoiceExistenceImportType
;

EXTEND FORM importType
PROPERTIES(i) FORCE PANEL SHOWIF autoImportImportType(i) autoImportNameAccountImportType, autoImportEmailImportType,
                                 autoImportCheckInvoiceExistenceImportType

;

EXTEND DESIGN importType {
        autoImportContainer {
            ADD PROPERTY(autoImportNameAccountImportType(i));
            ADD PROPERTY(autoImportEmailImportType(i));
            ADD PROPERTY(autoImportCheckInvoiceExistenceImportType(i));
        }
}

EXTEND FORM userInvoice
    PROPERTIES(i) importPurchaseInvoiceDataAction TODRAW d TOOLBAR
    PROPERTIES(i) nameImportTypeUserInvoice
    PROPERTIES(i) saveOriginalInvoice, openOriginalInvoice 
;

EXTEND DESIGN userInvoice{
    import {
        NEW universalImport {
            caption = 'Универсальный импорт';
            ADD PROPERTY(nameImportTypeUserInvoice(i));
            ADD PROPERTY(importPurchaseInvoiceDataAction(i));
        }
        NEW origin {
            caption = 'Оригинал накладной';
            ADD PROPERTY(saveOriginalInvoice(i));
            ADD PROPERTY(openOriginalInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES() TODRAW d TOOLBAR importPurchaseInvoicesDataAction, nameImportTypeUserInvoices, 
                 importPurchaseInvoicesDirectoryDataAction, importPurchaseInvoicesEmailDataAction
;

EXTEND DESIGN invoices{
    documentDetail {
        NEW importUniversal {
            caption = 'Импорт';
            ADD PROPERTY(nameImportTypeUserInvoices());
            ADD PROPERTY(importPurchaseInvoicesDataAction());            
            ADD PROPERTY(importPurchaseInvoicesDirectoryDataAction());
            ADD PROPERTY(importPurchaseInvoicesEmailDataAction());
        }
    }
}

EXTEND FORM integrationData
    PROPERTIES() TOOLBAR importPurchaseInvoicesDirectoryDataAction, importPurchaseInvoicesEmailDataAction
;

EXTEND DESIGN integrationData {
    pane { 
        actionsContainer {
            ADD PROPERTY(importPurchaseInvoicesDirectoryDataAction());
            ADD PROPERTY(importPurchaseInvoicesEmailDataAction());
        }
    }
}

CONSTRAINT importTypeUserInvoice(invoice) AND (supplierUserInvoice(invoice) != autoImportSupplierImportType(importTypeUserInvoice(invoice)))
    CHECKED BY importTypeUserInvoice MESSAGE 'У накладной и типа импорта не совпадают поставщики';
    
CONSTRAINT importTypeUserInvoice(invoice) AND  (supplierStockUserInvoice(invoice) != autoImportSupplierStockImportType(importTypeUserInvoice(invoice)))
    CHECKED BY importTypeUserInvoice MESSAGE 'У накладной и типа импорта не совпадают склады поставщиков';

CONSTRAINT importTypeUserInvoice(invoice) AND  (customerUserInvoice(invoice) != autoImportCustomerImportType(importTypeUserInvoice(invoice)))
    CHECKED BY importTypeUserInvoice MESSAGE 'У накладной и типа импорта не совпадают покупатели';
CONSTRAINT importTypeUserInvoice(invoice) AND  (customerStockUserInvoice(invoice) != autoImportCustomerStockImportType(importTypeUserInvoice(invoice)))
    CHECKED BY importTypeUserInvoice MESSAGE 'У накладной и типа импорта не совпадают склады покупателей';
    
CONSTRAINT importTypeUserInvoice(invoice) AND  (operationUserInvoice(invoice) != autoImportOperationImportType(importTypeUserInvoice(invoice)))
   CHECKED BY importTypeUserInvoice MESSAGE 'У накладной и типа импорта не совпадают операции';    