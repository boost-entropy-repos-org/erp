MODULE WareItem;

REQUIRE System, Item, Ware;

NAMESPACE Item;

@defineObjectItemAttribute(ware, Ware, name, 'Посуда', itemBase);
@defineUniteAttributeItemWithoutExtendForm(ware, nameWare, 'посуда', 'посуда', item);

EXTEND FORM attributesItem
    TREE treeGroups wareGroup=WareGroup PARENT parent
    PROPERTIES READONLY name(wareGroup)
    ORDER BY name(wareGroup)

    OBJECTS ware=Ware
    PROPERTIES in(ware)    
    PROPERTIES(ware) READONLY name, id SHOWIF showIDs(), canonicalNameWareGroup, price, numberVAT, valueVAT
    PROPERTIES(ware) NEWSESSION NEW, EDIT, DELETE TOOLBAR        
    ORDER BY name(ware)
    PROPERTIES replace(ware) TODRAW ware TOOLBAR    
    FILTERS isParent(wareGroup, ware)
    
    OBJECTS wareItem = Item
    PROPERTIES(wareItem) READONLY idBarcode, name, id[Sku], idSkuGroup
    PROPERTIES(wareItem) nameWare, edit PANEL
    FILTERS ware(wareItem) == ware    

;

DESIGN attributesItem{
    tabContainer{
        NEW wareContainer{
            caption = 'Посуда';
            fill = 1;
            type = SPLITH;
            MOVE treeGroups.tree.box {
                caption = 'Группы посуды';
            }
            NEW rw {
                fill = 3;
                type = SPLITV;
                MOVE ware.box {                   
                    ware.grid {
                        defaultComponent = TRUE;
                    }
                }
                MOVE wareItem.box;
            }
        }
    }
}
@defineObjectItemAttributeBatch (ware, nameWare, 'Посуда');
@implementItemAttribute(nameWare, 'Посуда', String, itemBase);

@defineItemDefaultValue(ware, 'Посуда', Ware, nameWare);
@defineItemFilterValue(ware, 'Посуда', w);
DESIGN ware {
    tabContainer {
        MOVE groupTree.tree.box {
            caption = 'Группы товаров';
        }
    }
}

@defineItemExtractObjectAttribute(ware, nameWare, wareName);

inWare 'Товар в посуде' (Item item) = item IS Item AND ware(item);

overCopy(Item s, Item d) += ACTION {
    ASSIGN ware(d) <- ware(s);
}

