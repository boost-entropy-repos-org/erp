MODULE Ware;

REQUIRE System, Historizable, StockTax, Sku;

// ------------------------------------------ Глобальные настройки --------------------------------- //
showWare 'Показывать стеклопосуду' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() showWare
;
DESIGN options {
    commons {
        MOVE PROPERTY(showWare());
    }
}

// ----------------------------------------- Группа посуды ----------------------------- //
CLASS WareGroup 'Группа посуды' : SkuGroup;
TABLE wareGroup (WareGroup);

@defineExternalizable(wareGroup, VARSTRING[100]);

id(WareGroup group) += id(group) IF group IS WareGroup;

name 'Наименование' = DATA VARISTRING[100](WareGroup);

name(WareGroup group) += name(group) IF group IS WareGroup;

TABLE wareGroupWareGroup(WareGroup, WareGroup);
@defineHierarchy(wareGroup);

parent (WareGroup wareGroup) += parent(wareGroup);

// ------------------------------------------ Посуда ----------------------------------------------- //
CLASS Ware 'Посуда' : Sku;
TABLE ware(Ware);

@defineExternalizable(ware, VARSTRING[100]);

id(Ware sku) += id(sku);

name 'Наименование' = DATA VARISTRING[100](Ware);
wareName = GROUP AGGR Ware ware BY name(ware); 

wareGroup = DATA WareGroup(Ware) AUTOSET NOT NULL;
skuGroup(Ware ware) += wareGroup(ware);

name(Ware ware) += name(ware) IF ware IS Ware;

nameWareGroup 'Группа посуды' (Ware ware) = name(wareGroup(ware));
canonicalNameWareGroup 'Группа посуды' (Ware ware) = canonicalName(wareGroup(ware)) IN base;

// Товар
skuType (Ware sku) += SkuType.skuTypeItem IF sku IS Ware;

TABLE wareGroupWare (WareGroup, Ware);

isParent (WareGroup wareGroup, Ware ware) = isParent(wareGroup(ware), wareGroup);   //PERSISTENT

TABLE wareDate(Ware, DATE);

dataPrice 'Цена' = DATA NUMERIC[16,4] (Ware, DATE) IN base;

price 'Цена' (ware, date) = GROUP LAST  dataPrice(Ware ware, DATE dateIn)
                                                                     BY    ware, DATE date
                                                                     ORDER dateIn
                                                                     WHERE dataPrice(ware, dateIn) AND dateIn <= (date AS DATE) IN base;

overPrice 'Цена' = OVERRIDE price(Ware ware, DATE date), dataPrice(ware, date) IN base;

price 'Цена' (Ware ware) = price(ware, currentDate()) IN base;

FORM addPriceWare 'Цена'
    OBJECTS a=Ware FIXED PANEL, d=DATE FIXED PANEL
    PROPERTIES name(a) READONLY, OBJVALUE(d), dataPrice(a, d)
;
DESIGN addPriceWare {
    PROPERTY(name(a)) { focusable = FALSE; }
}

addPrice 'Добавить' (Ware ware) = ACTION SHOW addPriceWare OBJECTS a = ware  TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM dialogPriceWare 'Цена'
    OBJECTS a=Ware FIXED PANEL, d=DATE
    PROPERTIES name(a) READONLY, addPrice(a) TODRAW d FORCE PANEL, OBJVALUE(d) READONLY, dataPrice(a, d)
    FILTERS dataPrice(a, d)
;
DESIGN dialogPriceWare {
    PROPERTY(name(a)) { focusable = FALSE; }
}

dialogPrice 'Цена' (Ware ware) = ACTION SHOW dialogPriceWare OBJECTS a = ware  SHORTCUT price[Ware] ASON CHANGE price[Ware];
    
VAT 'НДС' = DATA Range (Ware, Country);
numberVAT 'НДС, номер' (Ware w, Country c) = number(VAT(w, c));

VAT (Ware sku, Country country) += VAT (sku, country);

CONSTRAINT tax(VAT(Ware ware, Country country)) != Tax.taxVAT OR
           country(VAT(ware, country)) != country AS Country
           CHECKED BY VAT[Ware,Country]
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС : Ware';

valueVAT 'НДС, %' (Ware ware, Country country, DATE date) = valueRate(VAT(ware, country), date);
valueVAT 'НДС, %' (Ware ware, Country country) = valueVAT(ware, country, currentDate());

VAT 'НДС' (Ware ware) = VAT(ware, defaultCountry()) PERSISTENT;
numberVAT 'НДС' (Ware ware) = number(VAT(ware));

valueVAT 'НДС, %' (Ware ware, DATE date) = valueRate(VAT(ware), date);
valueVAT 'НДС, %' (Ware ware) = valueVAT(ware, currentDate());

changeNumberVAT(Ware ware) = ACTION {
    REQUEST OBJECT r
        SHOW rangeDialog OBJECTS c = defaultCountry() DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        VAT(ware, Country country) <- requestedObject() WHERE country == defaultCountry();

    } ELSE IF formResult() == FormResult.drop THEN {
        VAT(ware, Country country) <- NULL WHERE country == defaultCountry();
    }
}
changeValueVAT(Ware ware) = ACTION {
    REQUEST NUMERIC[10,5] INPUT;
    VAT(ware, Country country) <- valueCurrentVAT(country, requestedNumeric()) WHERE country == defaultCountry();
}

// ------------------ Формы  --------------------- //

FORM wareGroup 'Группа посуды'
    OBJECTS g=WareGroup FIXED PANEL
    PROPERTIES(g) id SHOWIF showIDs(), name, nameParent
    EDIT WareGroup OBJECT g
;

FORM wareGroups 'Группы посуды'
    TREE treeGroups tg=WareGroup PARENT parent
    PROPERTIES READONLY name(tg)
    ORDER BY name(tg)

    OBJECTS g=WareGroup
    PROPERTIES(g) READONLY name, canonicalName
    PROPERTIES(g) NEWSESSION DELETE FORCE PANEL TOOLBAR, NEW, EDIT
    ORDER BY canonicalName(g)

    FILTERS isParent(g, tg)

    LIST WareGroup OBJECT g
;

DESIGN wareGroups {
    main{
        preferredSize = (1024, 768);
        NEW rootContainer BEFORE functions.box{
            fill = 1;
            type = SPLITH;

            MOVE treeGroups.tree.box;
            MOVE g.box {
                fill = 4;
            }
        }
    }
}


FORM ware 'Посуда'
    OBJECTS w=Ware FIXED PANEL
    PROPERTIES(w) name, id SHOWIF showIDs(), canonicalNameWareGroup, price

    PROPERTIES (w)         numberVAT ON CHANGE changeNumberVAT(w) 
    PROPERTIES (w)         valueVAT ON CHANGE changeValueVAT(w)

    EDIT Ware OBJECT w
;
DESIGN ware {
    MOVE w.box;
    NEW tabContainer;
    MOVE functions.box;
}

FORM wares 'Посуда'

    TREE treeGroups tg=WareGroup PARENT parent
    PROPERTIES READONLY name(tg)
    ORDER BY name(tg)

    OBJECTS w=Ware
    PROPERTIES(w) READONLY name, id SHOWIF showIDs(), canonicalNameWareGroup, price, numberVAT, valueVAT
    PROPERTIES(w) NEWSESSION NEW, EDIT, deletew=DELETE FORCE PANEL TOOLBAR
    FILTERS isParent(tg, w)

    LIST Ware OBJECT w
;

DESIGN wares {

    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE treeGroups.tree.box {
            caption = 'Группы посуды';
        }
        MOVE w.box {
            fill = 3;
            w.grid {
                defaultComponent = TRUE;
            }
        }
    }
    MOVE functions.box;
}

@extendFormEditable(wares);

NAVIGATOR {
    skuNavigator {
        ADD wareGroups AFTER UOMs;
        ADD wares AFTER wareGroups;
    }
}
// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeWare(CustomGroupType, Ware);
customGroup = DATA CustomGroup (CustomGroupType, Ware);
customGroup(CustomGroupType type, Ware item) += customGroup(type, item);

nameCustomGroup 'Имя' (CustomGroupType type, Ware ware) = name(customGroup(type, ware));
canonicalNameCustomGroup'Каноническое имя' (CustomGroupType type, Ware ware) = canonicalName(customGroup(type, ware));
idCustomGroup'Код' (CustomGroupType type, Ware ware) = id(customGroup(type, ware));

CONSTRAINT customGroupType(customGroup(CustomGroupType type, Ware ware)) != type
           CHECKED BY customGroup[CustomGroupType,Ware]
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';
           
TABLE customGroupTypeWareGroup(CustomGroupType, WareGroup);
dataCustomGroup 'Дополнительная группа (по умолчанию)' = DATA CustomGroup (CustomGroupType, WareGroup);
dataNameCustomGroupCustomGroup 'Дополнительная группа (по умолчанию)' (CustomGroupType customGroupType, WareGroup wareGroup) = name(dataCustomGroup(customGroupType, wareGroup));

levelParentCustomGroup (customGroupType, wareGroup) = GROUP MIN level(WareGroup wareGroup, WareGroup parent) IF dataCustomGroup(CustomGroupType customGroupType, parent)
                                                              BY customGroupType, wareGroup PERSISTENT;    
nearestParentCustomGroup (CustomGroupType customGroupType, WareGroup wareGroup) = wareGroup(wareGroup, levelParentCustomGroup(customGroupType, wareGroup));
nearestCustomGroup (CustomGroupType customGroupType, WareGroup wareGroup) = dataCustomGroup(customGroupType, nearestParentCustomGroup (customGroupType, wareGroup));

customGroup (CustomGroupType customGroupType, WareGroup wareGroup) =
    OVERRIDE nearestCustomGroup (customGroupType, wareGroup), 
             dataCustomGroup(customGroupType, wareGroup) PERSISTENT;    

nameCustomGroup 'Дополнительная группа (по умолчанию)' (CustomGroupType customGroupType, WareGroup wareGroup) = name(customGroup(customGroupType, wareGroup));

EXTEND FORM ware
    OBJECTS cgt = CustomGroupType
    PROPERTIES name(cgt) READONLY, canonicalNameCustomGroup(cgt, w)
;
DESIGN ware {
    tabContainer{
        fill =1;
        type = TABBED;
        MOVE cgt.box;
    }
    
}

EXTEND FORM wareGroup
    OBJECTS dc=CustomGroupType 
    PROPERTIES(dc)   READONLY name, id
    PROPERTIES(dc, g) nameCustomGroup    
;    
DESIGN wareGroup {
    MOVE dc.box BEFORE functions.box;
}

WHEN SESSION CHANGED(wareGroup(Ware w)) AND CustomGroupType dc IS CustomGroupType AND NOT customGroup(dc, w) DO
    customGroup(dc, w) <- customGroup(dc, wareGroup(w));