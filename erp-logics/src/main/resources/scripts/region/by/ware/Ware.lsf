MODULE Ware;

REQUIRE System, Historizable, Tax, Sku;

// ------------------------------------------ Глобальные настройки --------------------------------- //
showWare 'Показывать стеклопосуду' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() showWare
;
DESIGN options {
    commons {
        ADD PROPERTY(showWare());
    }
}

// ----------------------------------------- Группа посуды ----------------------------- //
CLASS WareGroup 'Группа посуды' : SkuGroup;
TABLE wareGroup (WareGroup);

nameWareGroup 'Наименование' = DATA VARISTRING[100](WareGroup);

nameSkuGroup(group) += nameWareGroup(group) IF group IS WareGroup;

TABLE wareGroupWareGroup(WareGroup, WareGroup);
@defineHierarchy(wareGroup);

parentSkuGroup (wareGroup) += parentWareGroup(wareGroup);

// ------------------------------------------ Посуда ----------------------------------------------- //
CLASS Ware 'Посуда' : Sku;
TABLE ware(Ware);

@defineExternalizable(ware, VARSTRING[100]);

nameWare 'Наименование' = DATA VARISTRING[100](Ware);
wareName = GROUP AGGR ware BY nameWare(ware); 

wareGroupWare = DATA WareGroup(Ware) AUTOSET;
skuGroupSku(ware) += wareGroupWare(ware);

nameSku(ware) += nameWare(ware) IF ware IS Ware;

nameWareGroupWare 'Группа посуды' (ware) = nameWareGroup(wareGroupWare(ware));
canonicalNameWareGroupWare 'Группа посуды' (ware) = canonicalNameWareGroup(wareGroupWare(ware)) IN base;

// Товар
skuTypeSku (sku) += SkuType.skuTypeItem IF sku IS Ware;

TABLE wareGroupWare (WareGroup, Ware);

isParentWareGroupWare (wareGroup, ware) = isParentWareGroupWareGroup(wareGroupWare(ware), wareGroup);   //PERSISTENT

TABLE wareDate(Ware, DATE);

@defineHistorizable(, price, 'Цена', NUMERIC[14,2], ware, nameWare, base);

@defineHistorizableCustom(range, 'НДС', Range, number, range, ware, nameWare, base);

CONSTRAINT taxRange(dataRangeWareDate(ware, date)) != Tax.taxVAT CHECKED BY dataRangeWareDate MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС';

dataValueRangeWareDate 'НДС, %' (ware, date) = valueRateRangeDate(dataRangeWareDate(ware, date), date) IN base;
valueCurrentRateRangeWare 'НДС, %' (ware) = valueCurrentRateRange(rangeWare(ware)) IN base;

EXTEND FORM addRangeWare
    PROPERTIES READONLY dataValueRangeWareDate(a, d)
;
EXTEND FORM dialogRangeWare
    PROPERTIES dataValueRangeWareDate(a, d)
;

// ------------------ Формы  --------------------- //

FORM wareGroup 'Группа посуды'
    OBJECTS g=WareGroup FIXED PANEL
    PROPERTIES(g) nameWareGroup, nameParentWareGroup
    EDIT WareGroup OBJECT g
;

FORM wareGroups 'Группы посуды'
    TREE treeGroups tg=WareGroup PARENT parentWareGroup
    PROPERTIES READONLY nameWareGroup(tg)
    ORDER BY nameWareGroup(tg)

    OBJECTS g=WareGroup
    PROPERTIES(g) READONLY nameWareGroup, canonicalNameWareGroup
    PROPERTIES(g) DELETE FORCE PANEL TOOLBAR, ADDFORM, EDITFORM
    ORDER BY canonicalNameWareGroup(g)

    FILTERS isParentWareGroupWareGroup(g, tg)

    DIALOG WareGroup OBJECT g
;

DESIGN wareGroups {
    main{
        preferredSize = (1024, 768);
        NEW rootContainer BEFORE functions.box{
            fill = 1;
            type = SPLITH;

            ADD treeGroups.tree.box;
            ADD g.box {
                fill = 4;
            }
        }
    }
}


FORM ware 'Посуда'
    OBJECTS w=Ware FIXED PANEL
    PROPERTIES(w) nameWare, idWare SHOWIF showIDs(), canonicalNameWareGroupWare, warePrice
    PROPERTIES(w) numberRangeRangeWare, valueCurrentRateRangeWare

    EDIT Ware OBJECT w
;

FORM wares 'Посуда'

    TREE treeGroups tg=WareGroup PARENT parentWareGroup
    PROPERTIES READONLY nameWareGroup(tg)
    ORDER BY nameWareGroup(tg)

    OBJECTS w=Ware
    PROPERTIES(w) READONLY nameWare, idWare SHOWIF showIDs(), canonicalNameWareGroupWare, warePrice, numberRangeRangeWare, valueCurrentRateRangeWare
    PROPERTIES(w) ADDFORM, EDITFORM, deletew=DELETE FORCE PANEL TOOLBAR
    FILTERS isParentWareGroupWare(tg, w)

    DIALOG Ware OBJECT w
;

DESIGN wares {

    NEW pane {
        fill = 1;
        type = SPLITH;
        ADD treeGroups.tree.box {
            caption = 'Группы посуды';
        }
        ADD w.box {
            fill = 3;
            w.grid {
                defaultComponent = TRUE;
            }
        }
    }
    ADD functions.box;
}

@extendFormEditable(wares);

NAVIGATOR {
    skuNavigator {
        ADD wareGroups AFTER UOMs;
        ADD wares AFTER wareGroups;
    }
}
// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeWare(CustomGroupType, Ware);
customGroupCustomGroupTypeWare = DATA CustomGroup (CustomGroupType, Ware);
customGroupCustomGroupTypeSku(type, item) += customGroupCustomGroupTypeWare(type, item);

nameCustomGroupCustomGroupTypeWare 'Имя' (type, ware) = nameCustomGroup(customGroupCustomGroupTypeWare(type, ware));
canonicalNameCustomGroupCustomGroupTypeWare'Каноническое имя' (type, ware) = canonicalNameCustomGroup(customGroupCustomGroupTypeWare(type, ware));
idCustomGroupCustomGroupTypeWare'Код' (type, ware) = idCustomGroup(customGroupCustomGroupTypeWare(type, ware));

CONSTRAINT customGroupTypeCustomGroup(customGroupCustomGroupTypeWare(type, ware)) != type
           CHECKED BY customGroupCustomGroupTypeWare
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';
           
TABLE customGroupTypeWareGroup(CustomGroupType, WareGroup);
dataCustomGroupCustomGroupTypeWareGroup 'Дополнительная группа (по умолчанию)' = DATA CustomGroup (CustomGroupType, WareGroup);
dataNameCustomGroupCustomGroupCustomGroupTypeWareGroup 'Дополнительная группа (по умолчанию)' (customGroupType, wareGroup) = nameCustomGroup(dataCustomGroupCustomGroupTypeWareGroup(customGroupType, wareGroup));

levelParentCustomGroupCustomGroupTypeWareGroup (customGroupType, wareGroup) = GROUP MIN levelWareGroupWareGroup(wareGroup, parent) IF dataCustomGroupCustomGroupTypeWareGroup(customGroupType, parent)
                                                              BY customGroupType, wareGroup PERSISTENT;    
nearestParentCustomGroupCustomGroupTypeWareGroup (customGroupType, wareGroup) = wareGroupWareGroupLevel(wareGroup, levelParentCustomGroupCustomGroupTypeWareGroup(customGroupType, wareGroup));
nearestCustomGroupCustomGroupTypeWareGroup (customGroupType, wareGroup) = dataCustomGroupCustomGroupTypeWareGroup(customGroupType, nearestParentCustomGroupCustomGroupTypeWareGroup (customGroupType, wareGroup));

customGroupCustomGroupTypeWareGroup (customGroupType, wareGroup) =
    OVERRIDE nearestCustomGroupCustomGroupTypeWareGroup (customGroupType, wareGroup), 
             dataCustomGroupCustomGroupTypeWareGroup(customGroupType, wareGroup) PERSISTENT;    

nameCustomGroupCustomGroupTypeWareGroup 'Дополнительная группа (по умолчанию)' (customGroupType, wareGroup) = nameCustomGroup(customGroupCustomGroupTypeWareGroup(customGroupType, wareGroup));

EXTEND FORM ware
    OBJECTS cgt = CustomGroupType
    PROPERTIES nameCustomGroupType(cgt) READONLY, canonicalNameCustomGroupCustomGroupTypeWare(cgt, w)
;
DESIGN ware {
    ADD cgt.box BEFORE functions.box;
}

EXTEND FORM wareGroup
    OBJECTS dc=CustomGroupType 
    PROPERTIES(dc)   READONLY nameCustomGroupType, idCustomGroupType
    PROPERTIES(dc, g) nameCustomGroupCustomGroupTypeWareGroup    
;    
DESIGN wareGroup {
    ADD dc.box BEFORE functions.box;
}

WHEN SESSION CHANGED(wareGroupWare(w)) AND dc IS CustomGroupType AND NOT customGroupCustomGroupTypeWare(dc, w) DO
    customGroupCustomGroupTypeWare(dc, w) <- customGroupCustomGroupTypeWareGroup(dc, wareGroupWare(w));