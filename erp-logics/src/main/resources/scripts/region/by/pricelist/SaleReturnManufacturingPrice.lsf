MODULE SaleReturnManufacturingPrice;

REQUIRE SaleReturnInvoice, SaleManufacturingPrice;

NAMESPACE SaleReturn;

@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVAT(UserInvoiceDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

WHEN LOCAL (CHANGED(sku(UserInvoiceDetail detail)) OR
            CHANGED(supplierStock(detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            CHANGED(batch(detail)) OR
            CHANGED(invoiceDetail(detail))) DO {
            
    manufacturingPrice (detail)  <- round2(IF invoiceDetail(detail) THEN manufacturingPrice(invoiceDetail(detail)) ELSE 
                                                (IF batch(detail)
    
                                                    THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                                   batch(detail),
                                                                                                   supplierStock(detail),
                                                                                                   dateTime(detail))
                                                    ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                                 sku(detail),
                                                                                                 supplierStock(detail),
                                                                                                 dateTime(detail))));
}

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i)  showManufacturingPrice
    PROPERTIES(d)  SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d)  
                   manufacturingPrice, includeVAT, manufacturingSum 

;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d) 
                  manufacturingPrice, includeVAT, manufacturingSum 
;

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, is);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, is);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showManufacturingPrice);