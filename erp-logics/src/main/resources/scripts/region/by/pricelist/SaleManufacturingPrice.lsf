MODULE SaleManufacturingPrice;

REQUIRE SaleInvoice, PriceListLedger, OrderManufacturingPrice, PurchaseManufacturingPrice;

NAMESPACE Sale;

//заказ
@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', showContainer);
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(orderDetail, manufacturing, ' изготовителя');
Order.manufacturingPriceOrderDetail(d) += manufacturingPriceOrderDetail(d);
@defineDocumentInterfaceDetailInclVATCustomPrefix (orderDetail);
includeVATUserOrderDetail(detail) <-  fixedPriceSku(skuUserOrderDetail(detail)) WHEN CHANGED (skuUserOrderDetail(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (orderDetail, manufacturing, );

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userOrder, manufacturingPriceStockPriceListType, manufacturing, sku, supplierStock);

wholesaleMarkupOrderDetail 'Оптовая надбавка (от цены изг.)' (detail) = round2([= ((X*100.0)/Y-100.0)](priceOrderDetail(detail),manufacturingMVATPriceOrderDetail(detail) IF manufacturingMVATPriceOrderDetail(detail) != 0.0));
wholesaleMarkupUserOrderDetail 'Оптовая надбавка (от цены изг.)' (detail) = round2([= ((X*100.0)/Y-100.0)](priceUserOrderDetail(detail),manufacturingMVATPriceUserOrderDetail(detail) IF manufacturingMVATPriceUserOrderDetail(detail) != 0.0 ));
Order.wholesaleMarkupOrderDetail(d) += wholesaleMarkupOrderDetail(d);

@defineDocumentInterfaceDetailDataSumPrefix (order, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userOrder, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (order, manufacturing, manufacturing);

overChangeManufacturingPriceUserOrderDetail = ABSTRACT ACTION LIST (OrderDetail);
changeManufacturingPriceUserOrderDetail (detail) = ACTION (detail) {
  REQUEST NUMERIC[14,2] INPUT;
  IF requestedNumeric() THEN {
      ASSIGN manufacturingPriceUserOrderDetail(detail) <- requestedNumeric();   
      overChangeManufacturingPriceUserOrderDetail(detail);
  }
};

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPriceUserOrder
    PROPERTIES(d)  SHOWIF showManufacturingPriceUserOrder(o) AFTER invoiceSumUserOrderDetail(d)  
                   manufacturingPriceUserOrderDetail ON CHANGE changeManufacturingPriceUserOrderDetail(d), wholesaleMarkupUserOrderDetail READONLY,
                   includeVATUserOrderDetail, manufacturingSumUserOrderDetail

;
EXTEND DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserOrder(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPriceOrder(o) AFTER invoiceSumOrderDetail(d) 
                  manufacturingPriceOrderDetail, wholesaleMarkupOrderDetail, includeVATOrderDetail, manufacturingSumOrderDetail
;

//накладная
@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVATUserInvoiceDetail(detail) <-  fixedPriceSku(skuUserInvoiceDetail(detail)) WHEN CHANGED (skuUserInvoiceDetail(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

// Устанавливаем цену изготовителя из регистра
updateManufacturingPriceUserInvoice 'Изменить цену изготовителя' = DATA BOOLEAN (UserInvoice);
updateManufacturingPriceUserInvoiceDetail = updateManufacturingPriceUserInvoice(userInvoiceUserInvoiceDetail(d));

manufacturingPriceUserInvoiceDetail (detail)  <-
                                        IF updateManufacturingPriceUserInvoiceDetail(detail) THEN
                                            priceUserInvoiceDetail(detail)
                                        ELSE
                                            IF batchUserInvoiceDetail(detail) THEN 
                                                prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                          batchUserInvoiceDetail(detail),
                                                                                          supplierStockUserInvoiceDetail(detail),
                                                                                          dateTimeUserInvoiceDetail(detail))
                                            ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                          skuUserInvoiceDetail(detail),
                                                                                          supplierStockUserInvoiceDetail(detail),
                                                                                          dateTimeUserInvoiceDetail(detail))
                                            WHEN CHANGED(skuUserInvoiceDetail(detail)) OR
                                                CHANGED(supplierStockUserInvoiceDetail(detail)) OR
                                                CHANGED(dateTimeUserInvoiceDetail(detail)) OR
                                                CHANGED(batchUserInvoiceDetail(detail)) OR
                                                CHANGED(updateManufacturingPriceUserInvoiceDetail(detail));

@defineOperationProperty(updateManufacturingPrice, 'Изменять цену изготовителя', showContainer);
@deriveDocumentOperationProperty(UserInvoice, updateManufacturingPrice);


wholesaleMarkupInvoiceDetail 'Оптовая надбавка (от цены изг.)' (detail) = round2([= (X/Y-1)*100](priceInvoiceDetail(detail),manufacturingMVATPriceInvoiceDetail(detail) IF manufacturingMVATPriceInvoiceDetail(detail)!= 0.0));
wholesaleMarkupUserInvoiceDetail 'Оптовая надбавка (от цены изг.)' (detail) = round2([= (X/Y-1)*100](priceUserInvoiceDetail(detail),manufacturingMVATPriceUserInvoiceDetail(detail) IF manufacturingMVATPriceUserInvoiceDetail(detail)!= 0.0));

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i)  showManufacturingPriceUserInvoice, updateManufacturingPriceUserInvoice
    PROPERTIES(d)  SHOWIF showManufacturingPriceUserInvoice(i) AFTER invoiceSumUserInvoiceDetail(d)  
                   manufacturingPriceUserInvoiceDetail, wholesaleMarkupUserInvoiceDetail READONLY, includeVATUserInvoiceDetail, manufacturingSumUserInvoiceDetail

;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserInvoice(i));
            ADD PROPERTY(updateManufacturingPriceUserInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPriceInvoice(i) AFTER invoiceSumInvoiceDetail(d) 
                  manufacturingPriceInvoiceDetail, wholesaleMarkupInvoiceDetail, includeVATInvoiceDetail, manufacturingSumInvoiceDetail
;

//overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//
//manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, showManufacturingPrice);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, showManufacturingPrice);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showManufacturingPrice);