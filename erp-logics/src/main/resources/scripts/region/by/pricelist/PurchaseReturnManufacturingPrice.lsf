MODULE PurchaseReturnManufacturingPrice;

REQUIRE PurchaseReturnInvoice, PurchaseManufacturingPrice, OrderManufacturingPrice;

NAMESPACE PurchaseReturn;

//---------------------------------Цена изготовителя ----------------------------------//

//----------------------------- Накладная -------------------------//

@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(orderDetail, manufacturing, ' изготовителя');
Order.manufacturingPriceOrderDetail(d) += manufacturingPriceOrderDetail(d);
@defineDocumentInterfaceDetailInclVATCustomPrefix (orderDetail);
includeVATUserOrderDetail(detail) <-  fixedPriceSku(skuUserOrderDetail(detail)) WHEN CHANGED (skuUserOrderDetail(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (orderDetail, manufacturing, );

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userOrder, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

wholesaleMarkupOrderDetail 'Оптовая надбавка (от цены изг.)' (detail) = round2([= ((X*100.0)/Y-100.0)](priceOrderDetail(detail),manufacturingMVATPriceOrderDetail(detail) IF manufacturingMVATPriceOrderDetail(detail) != 0.0));
wholesaleMarkupUserOrderDetail 'Оптовая надбавка (от цены изг.)' (detail) = round2([= ((X*100.0)/Y-100.0)](priceUserOrderDetail(detail),manufacturingMVATPriceUserOrderDetail(detail) IF manufacturingMVATPriceUserOrderDetail(detail) != 0.0 ));
Order.wholesaleMarkupOrderDetail(d) += wholesaleMarkupOrderDetail(d);

@defineDocumentInterfaceDetailDataSumPrefix (order, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userOrder, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (order, manufacturing, manufacturing);

//overChangeManufacturingPriceUserOrderDetail = ABSTRACT ACTION LIST (OrderDetail);
//changeManufacturingPriceUserOrderDetail (detail) = ACTION (detail) {
//  REQUEST NUMERIC[14,2] INPUT;
//  IF requestedNumeric() THEN {
//      ASSIGN manufacturingPriceUserOrderDetail(detail) <- requestedNumeric();   
//      overChangeManufacturingPriceUserOrderDetail(detail);
//  }
//}

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPriceUserOrder
    PROPERTIES(d)  SHOWIF showManufacturingPriceUserOrder(o) AFTER invoiceSumUserOrderDetail(d)  
                   manufacturingPriceUserOrderDetail, // ON CHANGE changeManufacturingPriceUserOrderDetail(d)
                   wholesaleMarkupUserOrderDetail READONLY, 
                   includeVATUserOrderDetail, manufacturingSumUserOrderDetail

;
EXTEND DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserOrder(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPriceOrder(o) AFTER invoiceSumOrderDetail(d) 
                  manufacturingPriceOrderDetail, wholesaleMarkupOrderDetail, includeVATOrderDetail, manufacturingSumOrderDetail
;

//----------------------------- Накладная -------------------------//
@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVATUserInvoiceDetail(detail) <-  fixedPriceSku(skuUserInvoiceDetail(detail)) WHEN CHANGED (skuUserInvoiceDetail(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

overRecalculatedPriceUserInvoiceDetail(detail) += ACTION (detail) {
    ASSIGN PurchaseReturn.manufacturingPriceUserInvoiceDetail(detail) <- Purchase.manufacturingPriceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
}

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

calcDiscountSumUserInvoiceDetail (detail) = manufacturingSumUserInvoiceDetail(detail) - sumUserInvoiceDetail(detail);
discountSumUserInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumUserInvoiceDetail(detail) IF calcDiscountSumUserInvoiceDetail(detail) > 0.0;

calcDiscountSumInvoiceDetail (detail) = manufacturingSumInvoiceDetail(detail) - sumInvoiceDetail(detail);
discountSumInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumInvoiceDetail(detail) IF calcDiscountSumInvoiceDetail(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discount, discount);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPriceUserInvoice
    PROPERTIES(d) SHOWIF showManufacturingPriceUserInvoice(i) AFTER invoiceSumUserInvoiceDetail(d) 
                  manufacturingPriceUserInvoiceDetail, includeVATUserInvoiceDetail, manufacturingSumUserInvoiceDetail 
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showManufacturingPriceInvoice(i) AFTER invoiceSumInvoiceDetail(d) 
                  manufacturingPriceInvoiceDetail, includeVATInvoiceDetail, manufacturingSumInvoiceDetail 
;

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userOrder, o, is);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userOrder, o, is);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);

