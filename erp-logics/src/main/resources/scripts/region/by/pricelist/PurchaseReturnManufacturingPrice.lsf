MODULE PurchaseReturnManufacturingPrice;

REQUIRE PurchaseReturnInvoice, PurchaseManufacturingPrice, OrderManufacturingPrice;

NAMESPACE PurchaseReturn;

//---------------------------------Цена изготовителя ----------------------------------//

//----------------------------- Накладная -------------------------//

@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(orderDetail, manufacturing, ' изготовителя');
manufacturingPrice[Order.OrderDetail](OrderDetail d) += manufacturingPrice(d);
@defineDocumentInterfaceDetailInclVATCustomPrefix (orderDetail);
includeVAT(UserOrderDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (orderDetail, manufacturing, );

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra(userOrder, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (OrderDetail detail) = NUMERIC[17,5](round2([= ((X*100.0)/Y-100.0)](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail) != 0.0)));
wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (UserOrderDetail detail) = round2([= ((X*100.0)/Y-100.0)](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail) != 0.0 ));
wholesaleMarkup(OrderDetail d) += wholesaleMarkup(d);

@defineDocumentInterfaceDetailDataSumPrefix (order, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userOrder, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (order, manufacturing, manufacturing);

//overChangeManufacturingPriceUserOrderDetail = ABSTRACT ACTION LIST (OrderDetail);
//changeManufacturingPriceUserOrderDetail (detail) = ACTION (detail) {
//  REQUEST NUMERIC[14,2] INPUT;
//  IF requestedNumeric() THEN {
//      ASSIGN manufacturingPriceUserOrderDetail(detail) <- requestedNumeric();   
//      overChangeManufacturingPriceUserOrderDetail(detail);
//  }
//}

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPrice
    PROPERTIES(d)  SHOWIF showManufacturingPrice(o) AFTER invoiceSum(d)  
                   manufacturingPrice, // ON CHANGE changeManufacturingPriceUserOrderDetail(d)
                   wholesaleMarkup READONLY, 
                   includeVAT, manufacturingSum

;
DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPrice(o) AFTER invoiceSum(d) 
                  manufacturingPrice, wholesaleMarkup, includeVAT, manufacturingSum
;

//----------------------------- Накладная -------------------------//
@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVAT(UserInvoiceDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );
                                                         
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

overRecalculatedPrice(UserInvoiceDetail detail) += ACTION (detail) {
    manufacturingPrice(detail) <- manufacturingPrice(invoiceDetail(detail));
}

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

calcDiscountSum (UserInvoiceDetail detail) = manufacturingSum(detail) - sum(detail);
discountSum 'Скидка от цены изг. (сумма)' (UserInvoiceDetail detail) = calcDiscountSum(detail) IF calcDiscountSum(detail) > 0.0;

calcDiscountSum (InvoiceDetail detail) = manufacturingSum(detail) - sum(detail);
discountSum 'Скидка от цены изг. (сумма)' (InvoiceDetail detail) = calcDiscountSum(detail) IF calcDiscountSum(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discount, discount);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPrice
    PROPERTIES(d) SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d) 
                  manufacturingPrice, includeVAT, manufacturingSum 
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d) 
                  manufacturingPrice, includeVAT, manufacturingSum 
;

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userOrder, o, is);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userOrder, o, is);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);

