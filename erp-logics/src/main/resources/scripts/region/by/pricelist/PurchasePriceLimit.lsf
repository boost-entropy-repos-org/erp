MODULE PurchasePriceLimit;

REQUIRE PricingPriceLimit, PricingPurchase;

NAMESPACE Purchase;

//------------------ Предельные надбавки ----------------------//

@defineDocumentInterfaceProperty (invoice, showLimitPrice, 'Предельная надбавка');
@defineDocumentInterfaceDetailMarkupPrefix (invoice, limit, ' предельная');

WHEN SESSION FORMS userInvoice 
             (CHANGED(customerStock(UserInvoiceDetail detail)) OR
              CHANGED(sku(detail)) OR 
              SET(showLimitPrice(detail)))
             AND showLimitPrice(detail) DO {
    limitMarkup(detail) <- markup(priceLimitPriceListType(customerStock(detail)), sku(detail));
}

//----------------------------------------------- Операции -----------------------------------------------------//

// Записываем необходимо ли показывать предельную надбавку по умолчанию из операции расценки, заданной для операции закупка
showLimitPrice (UserInvoice invoice) <- showLimitPrice(pricingOperation(operation(invoice)))
    WHEN CHANGED(operation(invoice));

showIfLimitPrice = showLimitPrice (UserInvoice invoice) AND createPricing(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) showLimitPrice SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
    PROPERTIES(pd) SHOWIF showIfLimitPrice(i) BEFORE retailMarkup(pd) limitMarkup BACKGROUND backgroundRetail(i)
;
DESIGN userInvoice{
    headerCreatePricing {
        MOVE PROPERTY (showLimitPrice(i));

    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showLimitPrice(i) BEFORE retailMarkup(d) limitMarkup BACKGROUND backgroundRetail(i)
;

// Имплементим для расчета оптимальной розничной цены

overLimitBasePrice = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail);
limitBasePrice(UserInvoiceDetail d) = OVERRIDE price(d), overLimitBasePrice(d);
 
limitPrice (UserInvoiceDetail detail) =
                                       IF limitMarkup(detail) > 3000 THEN
                                           limitMarkup(detail)
                                       ELSE
                                           round(
                                           IF limitMarkup(detail) > 100 THEN
                                                [= (X+Y)*(Z+100)/100](
                                                    limitBasePrice(detail),
                                                    limitMarkup(detail),
                                                    valueRetailVAT(detail))
                                           ELSE [= X*(Y+100)*(Z+100)/10000](
                                                    limitBasePrice(detail),
                                                    limitMarkup(detail),
                                                    valueRetailVAT(detail)), roundCondition(priceLimitPriceListType(customerStock(detail)), sku(detail)));

WHEN SESSION FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
            (SETCHANGED(retailPrice(UserInvoiceDetail d)) OR CHANGED(limitBasePrice(d)) OR CHANGED(limitMarkup(d))) AND //  вообще в событии должно быть это условие, но тогда не всегда срабатывает (см. skype с Vitalur за 10.07) 
             showLimitPrice(d) AND limitPrice(d) < retailPrice(d) DO {
    retailPrice(d) <- limitPrice(d);
     
    retailMarkup(d) <- [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                       retailPrice(d),
                                                       pricingPrice(d) IF pricingPrice(d)!= 0.0,
                                                       valueRetailVAT(d));
}

showLimitPrice(InvoicePricing pricing) += showLimitPrice(invoice(pricing));
limitMarkup(InvoicePricingDetail detail) += limitMarkup(invoiceDetail(detail));

