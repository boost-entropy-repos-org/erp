MODULE PurchaseManufacturingPrice;

REQUIRE PurchaseInvoice, PriceListLedger, PriceListCalc;

NAMESPACE Purchase;

//заказ
@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', priceContainer);
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPriceUserOrder

;
DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserOrder(o));
        }
    }
}

//накладная
dateManufacturingRateExchangeInvoice 'Дата калькуляции' = ABSTRACT DATE(Invoice);
dateManufacturingRateExchangeUserInvoice 'Дата калькуляции' = DATA DATE(UserInvoice);
dateManufacturingRateExchangeInvoice(i) += dateManufacturingRateExchangeUserInvoice(i);

dateManufacturingRateExchangeUserInvoice(i) <- dateInvoice(i) WHEN CHANGED (dateInvoice(i));

rateManufacturingExchangeInvoice 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) PERSISTENT;
rateManufacturingExchangeUserInvoice 'Курс' = DATA NUMERIC[14,6](UserInvoice);
rateManufacturingExchangeInvoice(i) += rateManufacturingExchangeUserInvoice(i);

rateManufacturingExchangeInvoiceDetail 'Курс' = ABSTRACT NUMERIC[14,6](InvoiceDetail) PERSISTENT;

dataRateManufacturingExchangeUserInvoiceDetail 'Курс' = DATA NUMERIC[14,6](UserInvoiceDetail);
rateManufacturingExchangeUserInvoiceDetail 'Курс' (d) = OVERRIDE rateManufacturingExchangeUserInvoice(userInvoiceUserInvoiceDetail(d)),  dataRateManufacturingExchangeUserInvoiceDetail(d);
rateManufacturingExchangeInvoiceDetail(d) += rateManufacturingExchangeUserInvoiceDetail(d);


WHEN SESSION FORMS userInvoice CHANGED (dateManufacturingRateExchangeUserInvoice(i)) OR
                               CHANGED (typeExchangeUserInvoice(i)) OR
                               CHANGED (currencyUserInvoice(i)) DO {
    rateManufacturingExchangeUserInvoice(i) <- rateOnTypeExchangeCurrencyDate(typeExchangeUserInvoice(i),
                                                               currencyUserInvoice(i),
                                                               dateManufacturingRateExchangeUserInvoice(i));
}

homeManufacturingPriceInvoiceDetail 'Цена (конв.)' (detail) =
    roundPriceCurrency(priceInvoiceDetail(detail) *
                       rateManufacturingExchangeInvoiceDetail(detail),
                       homeCurrencyInvoice(invoiceInvoiceDetail(detail)));

homeManufacturingPriceUserInvoiceDetail 'Цена (конв.)' (detail) =
    roundPriceCurrency(priceUserInvoiceDetail(detail) *
                       rateManufacturingExchangeUserInvoiceDetail(detail),
                       homeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(detail)));

incomeManufacturingPriceInvoiceDetail (detail) = IF isHomeCurrencyInvoice(invoiceInvoiceDetail(detail)) THEN
                                                    homeManufacturingPriceInvoiceDetail(detail)
                                                    ELSE priceInvoiceDetail(detail);
incomeManufacturingSumInvoice(invoice) = GROUP SUM incomeManufacturingPriceInvoiceDetail(detail) * quantityInvoiceDetail(detail) BY invoiceInvoiceDetail(detail);

incomeManufacturingPriceUserInvoiceDetail (detail) = IF isHomeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(detail)) THEN
                                                        homeManufacturingPriceUserInvoiceDetail(detail)
                                                        ELSE priceUserInvoiceDetail(detail);
incomeManufacturingSumUserInvoice(invoice) = GROUP SUM incomeManufacturingPriceUserInvoiceDetail(detail) * quantityUserInvoiceDetail(detail) BY userInvoiceUserInvoiceDetail(detail);

costManufacturingPriceInvoiceDetail(detail) = NUMERIC[14,2] (incomeManufacturingPriceInvoiceDetail(detail) (+) extraCostPriceInvoiceDetail(detail) (+)
                                                            customCostPriceInvoiceDetail(detail) (+) certificateCostPriceInvoiceDetail(detail));

costManufacturingPriceUserInvoiceDetail(detail) = NUMERIC[14,2] (incomeManufacturingPriceUserInvoiceDetail(detail) (+) extraCostPriceUserInvoiceDetail(detail) (+)
                                                                customCostPriceUserInvoiceDetail(detail) (+) certificateCostPriceUserInvoiceDetail(detail));

@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');
@defineDocumentInterfaceProperty (invoice, reverseManufacturingPrice, 'Обратный расчет цены изг.');
@defineOperationProperty(reverseManufacturingPrice, 'Обратный расчет цены изг.', priceContainer);

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);
@deriveDocumentOperationProperty(UserInvoice, reverseManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVATUserInvoiceDetail(detail) <-  fixedPriceSku(skuUserInvoiceDetail(detail)) WHEN CHANGED (skuUserInvoiceDetail(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

EXTEND CLASS SystemLedgerPriceListType { manufacturingPriceStockPriceListType 'Изготовителя (последняя по складу)' }
batchLedgerPriceListTypeStock (type, stock) += WHEN type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType AND isCompanyStock(stock)
                                               THEN explicitBatchLedgerStock(stock);
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN showManufacturingPriceInvoiceDetail(ledger) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN showManufacturingPriceInvoiceDetail(ledger) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN manufacturingPriceInvoiceDetail(ledger);

addCostPriceToManufacturingPriceOperation 'Учитывать в цене изготовителя доп. расходы' = DATA BOOLEAN (Purchase.Operation);

// -- Операция
manufacturingCalcPriceListTypeOperation = DATA CalcPriceListType (Purchase.Operation);
nameManufacturingCalcPriceListTypeOperation 'Вид цен (надбавка к цене изготовителя)' (operation) = nameCalcPriceListType(manufacturingCalcPriceListTypeOperation(operation));

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');

@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, manufacturing, ' (к цене изготовителя)');

manufacturingCalcPriceListTypeUserInvoice (invoice) <- manufacturingCalcPriceListTypeOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

manufacturingMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypeSku(manufacturingCalcPriceListTypeUserInvoiceDetail(detail), skuUserInvoiceDetail(detail))
    WHEN CHANGED(manufacturingCalcPriceListTypeUserInvoiceDetail(detail)) OR
         CHANGED(skuUserInvoiceDetail(detail));

EXTEND FORM Purchase.operation
    PROPERTIES(o) addCostPriceToManufacturingPriceOperation, nameManufacturingCalcPriceListTypeOperation
;

DESIGN Purchase.operation{
    priceContainer{
        NEW manufacturingPriceContainer{
            caption = 'Цена изготовителя';
            type = COLUMNS;
            columns = 1;
            ADD PROPERTY(showManufacturingPriceOperation(o));
            ADD PROPERTY(addCostPriceToManufacturingPriceOperation(o));
            ADD PROPERTY(nameManufacturingCalcPriceListTypeOperation(o));
            ADD PROPERTY(reverseManufacturingPriceOperation(o));
        }
    }
}

addCostPriceToManufacturingPriceUserInvoice 'Учитывать доп. расходы' (invoice) = DATA BOOLEAN (UserInvoice) IN documentPrm;
addCostPriceToManufacturingPriceUserInvoice(invoice) <- addCostPriceToManufacturingPriceOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

calcBaseManufacturingPriceUserInvoiceDetail (detail) = IF addCostPriceToManufacturingPriceUserInvoice(userInvoiceUserInvoiceDetail(detail)) THEN costManufacturingPriceUserInvoiceDetail(detail)
                                        ELSE incomeManufacturingPriceUserInvoiceDetail(detail);

baseManufacturingPriceUserInvoiceDetail (detail) = calcBaseManufacturingPriceUserInvoiceDetail (detail) * (100.0 (+) manufacturingMarkupUserInvoiceDetail(detail))/100;
baseReverseManufacturingPriceUserInvoiceDetail (detail) = calcBaseManufacturingPriceUserInvoiceDetail (detail) / (100.0 (+) manufacturingMarkupUserInvoiceDetail(detail))*100;

skipChangeManufacturingPriceUserInvoiceDetail 'Пропустить' = ABSTRACT BOOLEAN (UserInvoiceDetail);
calcReversePriceUserInvoiceDetail(d) =     
    NUMERIC[14,2](manufacturingPriceUserInvoiceDetail (d) * (100.0 (+) manufacturingMarkupUserInvoiceDetail(d))/100);  

updateManufacturingPriceUserInvoiceDetail = ACTION (d) {
    IF reverseManufacturingPriceUserInvoiceDetail(d) THEN {
        priceUserInvoiceDetail(d) <- calcReversePriceUserInvoiceDetail(d);
    } ELSE {
        manufacturingPriceUserInvoiceDetail(d) <- 
            IF roundConditionPriceListType(manufacturingCalcPriceListTypeInvoiceDetail(d)) THEN
                round(baseManufacturingPriceUserInvoiceDetail(d), priceRoundRoundCondition(roundConditionPriceListType(manufacturingCalcPriceListTypeInvoiceDetail(d))))
            ELSE
                baseManufacturingPriceUserInvoiceDetail(d);    
    }
}
overChangePriceUserInvoiceDetail (d) += ACTION (d) {
    IF reverseManufacturingPriceUserInvoiceDetail(d) THEN {
        manufacturingPriceUserInvoiceDetail(d)<- baseReverseManufacturingPriceUserInvoiceDetail(d);    
    }
}

ON SESSION FORMS userInvoice {
    FOR ((CHANGED(calcBaseManufacturingPriceUserInvoiceDetail(d)) AND NOT reverseManufacturingPriceUserInvoiceDetail(d)) OR CHANGED(manufacturingMarkupUserInvoiceDetail(d)) OR CHANGED(roundConditionPriceListType(manufacturingCalcPriceListTypeInvoiceDetail(d)))) 
        AND NOT CHANGED(manufacturingPriceUserInvoiceDetail(d)) AND NOT skipChangeManufacturingPriceUserInvoiceDetail(d) DO {
        
        updateManufacturingPriceUserInvoiceDetail(d);
    }   
}    
 
calcManufacturingMarkupUserInvoiceDetail(d) =     
    NUMERIC[8,3]((manufacturingPriceUserInvoiceDetail(d) * 100.0 / calcBaseManufacturingPriceUserInvoiceDetail(d)) - 100.0);

changeManufacturingPriceUserInvoiceDetail = ACTION (d) {
    REQUEST NUMERIC[14,2] INPUT;

    IF requestedNumeric() THEN {
        manufacturingPriceUserInvoiceDetail(d) <- requestedNumeric();      
        IF reverseManufacturingPriceUserInvoiceDetail(d) THEN {
            priceUserInvoiceDetail(d) <- calcReversePriceUserInvoiceDetail(d);  // пока не учитываем доп. расходы
        } ELSE {
            manufacturingMarkupUserInvoiceDetail(d) <- calcManufacturingMarkupUserInvoiceDetail(d);        
        } 
    } ELSE {
        manufacturingPriceUserInvoiceDetail(d) <- NULL;
        IF reverseManufacturingPriceUserInvoiceDetail(d) THEN {
            priceUserInvoiceDetail(d) <- calcReversePriceUserInvoiceDetail(d); // пока не учитываем доп. расходы
        } ELSE {
            manufacturingMarkupUserInvoiceDetail(d) <- calcManufacturingMarkupUserInvoiceDetail(d);     
        }
    }
}

toFillMarkupUserInvoiceDetail 'Проставить надбавку из вида цен' = ACTION (detail) {
    manufacturingMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypeSku(manufacturingCalcPriceListTypeUserInvoiceDetail(detail), skuUserInvoiceDetail(detail));
        EXEC updateManufacturingPriceUserInvoiceDetail(detail);
} SHORTCUT manufacturingMarkupUserInvoiceDetail;

toFillMarkupUserInvoiceDetails 'Проставить надбавку из вида цен для всех' = ACTION (detail) {
    FOR [= FILTER userInvoice.d](det) AND detail IS UserInvoiceDetail DO {
        EXEC toFillMarkupUserInvoiceDetail(det);
    }
} SHORTCUT manufacturingMarkupUserInvoiceDetail;

baseManufacturingMarkupSumUserInvoiceDetail 'Сумма (надбавка)' (detail) = calcBaseManufacturingPriceUserInvoiceDetail (detail) * quantityUserInvoiceDetail(detail) * manufacturingMarkupUserInvoiceDetail(detail)/100;
@defineDocumentHeaderSumCustomPrefix(userInvoice, userInvoiceDetail, baseManufacturingMarkup, ' (надбавка) всего');

//overAdditionalValuation(rd, detail) += ACTION (rd, detail) {
//    ASSIGN curManufacturingPriceUserRepricingDetail(rd) <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.manufacturingPriceStockPriceListType, skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), dateTimeInvoiceDetail(detail));
//    ASSIGN manufacturingPriceUserRepricingDetail(rd) <- manufacturingPriceInvoiceDetail(detail);
//}

//@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, curManufacturing, ' изготовителя до');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, curManufacturing, sku, customerStock);
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, curManufacturing, );

//@changeDocumentDetailPricePrefix(userInvoiceDetail, manufacturing, manRetail, retail, manufacturingMVAT, retail, retail);
//@changeDocumentDetailPricePrefix(userInvoiceDetail, curManufacturing, newManRetail, cur, curManufacturingMVAT, cur, curRetail);

//toShowRepricingPriceInvoice (invoice) = createRepricingInvoice(invoice) AND showManufacturingPriceInvoice(invoice);

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, manufacturing, ' (изготовителя) всего');

calcDiscountSumUserInvoiceDetail (detail) = manufacturingSumUserInvoiceDetail(detail) - sumUserInvoiceDetail(detail);
discountSumUserInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumUserInvoiceDetail(detail) IF calcDiscountSumUserInvoiceDetail(detail) > 0.0;

calcDiscountSumInvoiceDetail (detail) = manufacturingSumInvoiceDetail(detail) - sumInvoiceDetail(detail);
discountSumInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumInvoiceDetail(detail) IF calcDiscountSumInvoiceDetail(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discount, discount);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);


showManufacturingPriceHomeCurrencyUserInvoice(invoice) = showManufacturingPriceUserInvoice(invoice) AND isHomeCurrencyUserInvoice(invoice);

backgroundManufacturingInvoice 'Цвет' (invoice) = RGB(240, 240, 224) IF invoice IS Invoice;
overBackgroundManufacturingInvoiceDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (InvoiceDetail);
backgroundManufacturingInvoiceDetail (d) = OVERRIDE backgroundManufacturingInvoice(invoiceInvoiceDetail(d)), overBackgroundManufacturingInvoiceDetail(d);

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPriceUserInvoice BACKGROUND backgroundManufacturingInvoice(i)
    PROPERTIES(i) SHOWIF showManufacturingPriceUserInvoice(i) BACKGROUND backgroundManufacturingInvoice(i) addCostPriceToManufacturingPriceUserInvoice,
                  nameManufacturingCalcPriceListTypeUserInvoice, reverseManufacturingPriceUserInvoice
    PROPERTIES(i) SHOWIF showManufacturingPriceHomeCurrencyUserInvoice(i) BACKGROUND backgroundManufacturingInvoice(i) dateManufacturingRateExchangeUserInvoice, rateManufacturingExchangeUserInvoice
    PROPERTIES(d) SHOWIF showManufacturingPriceUserInvoice(i) BACKGROUND backgroundManufacturingInvoiceDetail(d) AFTER invoiceSumUserInvoiceDetail(d) 
                  manufacturingMarkupUserInvoiceDetail,
                  manufacturingPriceUserInvoiceDetail ON CHANGE changeManufacturingPriceUserInvoiceDetail(d), includeVATUserInvoiceDetail, 
                  manufacturingSumUserInvoiceDetail
    PROPERTIES(d) SHOWIF showManufacturingPriceHomeCurrencyUserInvoice(i) BACKGROUND backgroundManufacturingInvoiceDetail(d)
                  rateManufacturingExchangeUserInvoiceDetail BEFORE manufacturingMarkupUserInvoiceDetail(d)
             
                  
//    PROPERTIES(d) BACKGROUND backgroundCurInvoice(i) SHOWIF toShowRepricingPriceInvoice(i) BEFORE curPriceUserInvoiceDetail
//                  curManufacturingPriceUserInvoiceDetail ON CHANGE changeCurManufacturingPriceUserInvoiceDetail(d)
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            type = COLUMNS;
            columns = 2;
            ADD PROPERTY(showManufacturingPriceUserInvoice(i));
            ADD PROPERTY(addCostPriceToManufacturingPriceUserInvoice(i));
            ADD PROPERTY(nameManufacturingCalcPriceListTypeUserInvoice(i));
            ADD PROPERTY(reverseManufacturingPriceUserInvoice(i));
            ADD PROPERTY(dateManufacturingRateExchangeUserInvoice(i));
            ADD PROPERTY(rateManufacturingExchangeUserInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundManufacturingInvoice(i) SHOWIF showManufacturingPriceInvoice(i) AFTER invoiceSumInvoiceDetail(d)
                  manufacturingMarkupInvoiceDetail, manufacturingPriceInvoiceDetail, includeVATInvoiceDetail, manufacturingSumInvoiceDetail
                  
    PROPERTIES(d) SHOWIF showManufacturingPriceHomeCurrencyUserInvoice(i) BACKGROUND backgroundManufacturingInvoice(i)
                      rateManufacturingExchangeInvoiceDetail BEFORE manufacturingMarkupInvoiceDetail(d)                  
                  
;
//--
//overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//
//manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
////--
//overRepricingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//overRepricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//manufacturingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//
//overCurRepricingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//overCurRepricingPriceUserInvoiceDetail(detail) += curManufacturingPriceUserInvoiceDetail(detail);
//curManufacturingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userOrder, o, showManufacturingPrice);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType,  customerStock, ' изготовителя', userOrder, o, showManufacturingPrice);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
