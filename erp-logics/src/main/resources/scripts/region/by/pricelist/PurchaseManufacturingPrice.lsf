MODULE PurchaseManufacturingPrice;

REQUIRE PurchaseInvoice, PricingPurchase, PricingManufacturingPrice, RepricingManufacturingPrice, PriceListLedger;

NAMESPACE Purchase;

@defineDocumentInterfaceCreate (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVATUserInvoiceDetail(detail) <-  fixedPriceSku(skuUserInvoiceDetail(detail)) WHEN CHANGED (skuUserInvoiceDetail(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

EXTEND CLASS SystemLedgerPriceListType { manufacturingPriceStockPriceListType 'Изготовителя (последняя по складу)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType. manufacturingPriceStockPriceListType;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(manufacturingPriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += manufacturingPriceInvoiceDetail(ledger) WHEN CLASS(manufacturingPriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType;

EXTEND CLASS SystemLedgerPriceListType { manufacturingPricePriceListType 'Изготовителя (последняя по ценовой группе)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.manufacturingPricePriceListType;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.manufacturingPricePriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger)) WHEN CLASS(manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.manufacturingPricePriceListType;

// Записываем по умолчанию цену себестоимости в цену изготовителя (а не последнюю)
manufacturingRoundConditionUserInvoice = DATA RoundCondition(UserInvoice);
nameManufacturingRoundConditionUserInvoice 'Округление' (userInvoice) = nameRoundCondition(manufacturingRoundConditionUserInvoice(userInvoice));

addCostPriceToManufacturingPriceOperation 'Учитывать в цене изготовителя доп. расходы' = DATA BOOLEAN (Purchase.Operation);

EXTEND FORM Purchase.operation
    PROPERTIES(o) addCostPriceToManufacturingPriceOperation
;

EXTEND DESIGN Purchase.operation{
    tabContainer{
        showContainer{
            ADD PROPERTY(addCostPriceToManufacturingPriceOperation);
        }
    }
}

addCostPriceToManufacturingPriceUserInvoice(invoice) <- addCostPriceToManufacturingPriceOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

baseManufacturingPriceUserInvoiceDetail = IF addCostPriceToManufacturingPriceUserInvoice(invoiceInvoiceDetail(detail)) THEN costPriceUserInvoiceDetail(detail)
                                        ELSE incomePriceUserInvoiceDetail(detail);

WHEN SESSION FORMS userInvoice
    CHANGED(costPriceUserInvoiceDetail(d)) OR CHANGED(manufacturingRoundConditionUserInvoice(invoiceInvoiceDetail(d))) DO {
    IF manufacturingRoundConditionUserInvoice(invoiceInvoiceDetail(d)) THEN
        manufacturingPriceUserInvoiceDetail(d) <- roundPriceRoundCondition(baseManufacturingPriceUserInvoiceDetail(d), manufacturingRoundConditionUserInvoice(invoiceInvoiceDetail(d)))
    ELSE
        manufacturingPriceUserInvoiceDetail(d) <- baseManufacturingPriceUserInvoiceDetail(d);
}
//@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, curManufacturing, ' изготовителя до');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, curManufacturing, sku, customerStock);
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, curManufacturing, );

@changeDocumentDetailPricePrefix(userInvoiceDetail, manufacturing, manRetail, retail, manufacturingMVAT, retail, retail);
@changeDocumentDetailPricePrefix(userInvoiceDetail, curManufacturing, newManRetail, cur, curManufacturingMVAT, cur, curRetail);

toShowRepricingPriceInvoice (invoice) = createRepricingInvoice(invoice) AND showManufacturingPriceInvoice(invoice);

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

calcDiscountSumUserInvoiceDetail (detail) = manufacturingSumUserInvoiceDetail(detail) - sumUserInvoiceDetail(detail);
discountSumUserInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumUserInvoiceDetail(detail) IF calcDiscountSumUserInvoiceDetail(detail) > 0.0;

calcDiscountSumInvoiceDetail (detail) = manufacturingSumInvoiceDetail(detail) - sumInvoiceDetail(detail);
discountSumInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumInvoiceDetail(detail) IF calcDiscountSumInvoiceDetail(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discount, discount);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPriceUserInvoice
    PROPERTIES(i) nameManufacturingRoundConditionUserInvoice SHOWIF showManufacturingPriceUserInvoice(i)
    PROPERTIES(d) SHOWIF showManufacturingPriceUserInvoice(i) AFTER invoiceSumUserInvoiceDetail manufacturingSumUserInvoiceDetail,
                  includeVATUserInvoiceDetail, manufacturingPriceUserInvoiceDetail ON CHANGE changeManufacturingPriceUserInvoiceDetail(d)
    PROPERTIES(d) BACKGROUND backgroundCurInvoice(i) SHOWIF toShowRepricingPriceInvoice(i) BEFORE curPriceUserInvoiceDetail
                  curManufacturingPriceUserInvoiceDetail ON CHANGE changeCurManufacturingPriceUserInvoiceDetail(d)
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            title = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserInvoice);
            ADD PROPERTY(nameManufacturingRoundConditionUserInvoice);
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY showManufacturingPriceInvoice
    PROPERTIES(d) READONLY SHOWIF showManufacturingPriceInvoice(i) AFTER invoiceSumInvoiceDetail
                  manufacturingSumInvoiceDetail, includeVATInvoiceDetail, manufacturingPriceInvoiceDetail
;
//--
overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);

manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//--
overRepricingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
overRepricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
manufacturingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));

overCurRepricingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
overCurRepricingPriceUserInvoiceDetail(detail) += curManufacturingPriceUserInvoiceDetail(detail);
curManufacturingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
