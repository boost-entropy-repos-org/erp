MODULE PurchaseManufacturingPrice;

REQUIRE PurchaseInvoice, PurchaseDeclaration, PriceListLedger, PriceListCalc;

NAMESPACE Purchase;

dateManufacturingRateExchangeInvoice 'Дата калькуляции' = ABSTRACT DATE(Invoice);
dateManufacturingRateExchangeUserInvoice 'Дата калькуляции' = DATA DATE(UserInvoice);
dateManufacturingRateExchangeInvoice(i) += dateManufacturingRateExchangeUserInvoice(i);

dateManufacturingRateExchangeUserInvoice(i) <- dateInvoice(i) WHEN CHANGED (dateInvoice(i));

rateManufacturingExchangeInvoice 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) PERSISTENT;
rateManufacturingExchangeUserInvoice 'Курс' = DATA NUMERIC[14,6](UserInvoice);
rateManufacturingExchangeInvoice(i) += rateManufacturingExchangeUserInvoice(i);

WHEN SESSION FORMS userInvoice CHANGED (dateManufacturingRateExchangeUserInvoice(i)) OR
                               CHANGED (typeExchangeUserInvoice(i)) OR
                               CHANGED (currencyUserInvoice(i)) DO {
    rateManufacturingExchangeUserInvoice(i) <- rateTypeExchangeCurrencyDate(typeExchangeUserInvoice(i),
                                                               currencyUserInvoice(i),
                                                               dateManufacturingRateExchangeUserInvoice(i));
}

homeManufacturingPriceInvoiceDetail 'Цена (пост.)' (detail) =
    roundPriceCurrency(priceInvoiceDetail(detail) *
                       rateManufacturingExchangeInvoice(invoiceInvoiceDetail(detail)),
                       homeCurrencyInvoice(invoiceInvoiceDetail(detail)));

homeManufacturingPriceUserInvoiceDetail 'Цена (пост.)' (detail) =
    roundPriceCurrency(priceUserInvoiceDetail(detail) *
                       rateManufacturingExchangeUserInvoice(userInvoiceUserInvoiceDetail(detail)),
                       homeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(detail)));

incomeManufacturingPriceInvoiceDetail (detail) = IF isHomeCurrencyInvoice(invoiceInvoiceDetail(detail)) THEN
                                                    homeManufacturingPriceInvoiceDetail(detail)
                                                    ELSE priceInvoiceDetail(detail);
incomeManufacturingSumInvoice(invoice) = GROUP SUM incomeManufacturingPriceInvoiceDetail(detail) * quantityInvoiceDetail(detail) BY invoiceInvoiceDetail(detail);

incomeManufacturingPriceUserInvoiceDetail (detail) = IF isHomeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(detail)) THEN
                                                        homeManufacturingPriceUserInvoiceDetail(detail)
                                                        ELSE priceUserInvoiceDetail(detail);
incomeManufacturingSumUserInvoice(invoice) = GROUP SUM incomeManufacturingPriceUserInvoiceDetail(detail) * quantityUserInvoiceDetail(detail) BY userInvoiceUserInvoiceDetail(detail);

costManufacturingPriceInvoiceDetail(detail) = NUMERIC[14,2] (incomeManufacturingPriceInvoiceDetail(detail) (+) extraCostPriceInvoiceDetail(detail) (+)
                                                            customCostPriceInvoiceDetail(detail) (+) certificateCostPriceInvoiceDetail(detail));

costManufacturingPriceUserInvoiceDetail(detail) = NUMERIC[14,2] (incomeManufacturingPriceUserInvoiceDetail(detail) (+) extraCostPriceUserInvoiceDetail(detail) (+)
                                                                customCostPriceUserInvoiceDetail(detail) (+) certificateCostPriceUserInvoiceDetail(detail));

@defineDocumentInterfaceCreate (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVATUserInvoiceDetail(detail) <-  fixedPriceSku(skuUserInvoiceDetail(detail)) WHEN CHANGED (skuUserInvoiceDetail(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

EXTEND CLASS SystemLedgerPriceListType { manufacturingPriceStockPriceListType 'Изготовителя (последняя по складу)' }
batchLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType. manufacturingPriceStockPriceListType THEN TRUE;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN manufacturingPriceInvoiceDetail(ledger);

EXTEND CLASS SystemLedgerPriceListType { manufacturingPricePriceListType 'Изготовителя (последняя по ценовой группе)' }
batchLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType.manufacturingPricePriceListType THEN TRUE;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.manufacturingPricePriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.manufacturingPricePriceListType THEN manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

addCostPriceToManufacturingPriceOperation 'Учитывать в цене изготовителя доп. расходы' = DATA BOOLEAN (Purchase.Operation);

// -- Операция
manufacturingCalcPriceListTypeOperation = DATA CalcPriceListType (Purchase.Operation);
nameManufacturingCalcPriceListTypeOperation 'Вид цен (надбавка к цене изготовителя)' (operation) = nameCalcPriceListType(manufacturingCalcPriceListTypeOperation(operation));

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');

@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, manufacturing, ' (к цене изготовителя)');

manufacturingCalcPriceListTypeUserInvoice (invoice) <- manufacturingCalcPriceListTypeOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

manufacturingMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypeSku(manufacturingCalcPriceListTypeUserInvoiceDetail(detail), skuUserInvoiceDetail(detail))
    WHEN CHANGED(manufacturingCalcPriceListTypeUserInvoiceDetail(detail)) OR
         CHANGED(skuUserInvoiceDetail(detail));

EXTEND FORM Purchase.operation
    PROPERTIES(o) addCostPriceToManufacturingPriceOperation, nameManufacturingCalcPriceListTypeOperation
;

EXTEND DESIGN Purchase.operation{
    tabContainer{
        showContainer{
            ADD PROPERTY(addCostPriceToManufacturingPriceOperation);
            ADD PROPERTY(nameManufacturingCalcPriceListTypeOperation);
        }
    }
}

addCostPriceToManufacturingPriceUserInvoice 'Учитывать доп. расходы' (invoice) = DATA BOOLEAN (UserInvoice) IN documentPrmGroup;
addCostPriceToManufacturingPriceUserInvoice(invoice) <- addCostPriceToManufacturingPriceOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

calcBaseManufacturingPriceUserInvoiceDetail (detail) = IF addCostPriceToManufacturingPriceUserInvoice(invoiceInvoiceDetail(detail)) THEN costManufacturingPriceUserInvoiceDetail(detail)
                                        ELSE incomeManufacturingPriceUserInvoiceDetail(detail);

baseManufacturingPriceUserInvoiceDetail (detail) = calcBaseManufacturingPriceUserInvoiceDetail (detail) * (100.0 (+) manufacturingMarkupUserInvoiceDetail(detail))/100;

WHEN SESSION FORMS userInvoice, declaration
    CHANGED(baseManufacturingPriceUserInvoiceDetail(d)) OR CHANGED(roundConditionPriceListType(manufacturingCalcPriceListTypeInvoiceDetail(d))) DO {
    IF roundConditionPriceListType(manufacturingCalcPriceListTypeInvoiceDetail(d)) THEN
        manufacturingPriceUserInvoiceDetail(d) <- roundPriceRoundCondition(baseManufacturingPriceUserInvoiceDetail(d), roundConditionPriceListType(manufacturingCalcPriceListTypeInvoiceDetail(d)))
    ELSE
        manufacturingPriceUserInvoiceDetail(d) <- baseManufacturingPriceUserInvoiceDetail(d);
}

//overAdditionalValuation(rd, detail) += ACTION (rd, detail) {
//    ASSIGN curManufacturingPriceUserRepricingDetail(rd) <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.manufacturingPriceStockPriceListType, skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), dateTimeInvoiceDetail(detail));
//    ASSIGN manufacturingPriceUserRepricingDetail(rd) <- manufacturingPriceInvoiceDetail(detail);
//}

//@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, curManufacturing, ' изготовителя до');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, curManufacturing, sku, customerStock);
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, curManufacturing, );

//@changeDocumentDetailPricePrefix(userInvoiceDetail, manufacturing, manRetail, retail, manufacturingMVAT, retail, retail);
//@changeDocumentDetailPricePrefix(userInvoiceDetail, curManufacturing, newManRetail, cur, curManufacturingMVAT, cur, curRetail);

//toShowRepricingPriceInvoice (invoice) = createRepricingInvoice(invoice) AND showManufacturingPriceInvoice(invoice);

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

calcDiscountSumUserInvoiceDetail (detail) = manufacturingSumUserInvoiceDetail(detail) - sumUserInvoiceDetail(detail);
discountSumUserInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumUserInvoiceDetail(detail) IF calcDiscountSumUserInvoiceDetail(detail) > 0.0;

calcDiscountSumInvoiceDetail (detail) = manufacturingSumInvoiceDetail(detail) - sumInvoiceDetail(detail);
discountSumInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumInvoiceDetail(detail) IF calcDiscountSumInvoiceDetail(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discount, discount);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

showManufacturingPriceHomeCurrencyUserInvoice(invoice) = showManufacturingPriceUserInvoice(invoice) AND isHomeCurrencyUserInvoice(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPriceUserInvoice
    PROPERTIES(i) SHOWIF showManufacturingPriceUserInvoice(i) addCostPriceToManufacturingPriceUserInvoice,
                  nameManufacturingCalcPriceListTypeUserInvoice
    PROPERTIES(i) SHOWIF showManufacturingPriceHomeCurrencyUserInvoice(i) dateManufacturingRateExchangeUserInvoice, rateManufacturingExchangeUserInvoice
    PROPERTIES(d) SHOWIF showManufacturingPriceUserInvoice(i) AFTER invoiceSumUserInvoiceDetail manufacturingSumUserInvoiceDetail,
                  includeVATUserInvoiceDetail, manufacturingPriceUserInvoiceDetail, //ON CHANGE changeManufacturingPriceUserInvoiceDetail(d),
                  manufacturingMarkupUserInvoiceDetail
//    PROPERTIES(d) BACKGROUND backgroundCurInvoice(i) SHOWIF toShowRepricingPriceInvoice(i) BEFORE curPriceUserInvoiceDetail
//                  curManufacturingPriceUserInvoiceDetail ON CHANGE changeCurManufacturingPriceUserInvoiceDetail(d)
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            type = CONTAINERV;
            NEW headerManufacturingRow1 {
                type = CONTAINERH;
                ADD PROPERTY(showManufacturingPriceUserInvoice);
                ADD PROPERTY(addCostPriceToManufacturingPriceUserInvoice);
                ADD PROPERTY(nameManufacturingCalcPriceListTypeUserInvoice);
            }
            NEW headerManufacturingRow2 {
                type = CONTAINERH;
                ADD PROPERTY(dateManufacturingRateExchangeUserInvoice);
                ADD PROPERTY(rateManufacturingExchangeUserInvoice);
            }
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLYIF isReadonly() showManufacturingPriceInvoice
    PROPERTIES(d) READONLY SHOWIF showManufacturingPriceInvoice(i) AFTER invoiceSumInvoiceDetail
                  manufacturingSumInvoiceDetail, includeVATInvoiceDetail, manufacturingPriceInvoiceDetail,
                  manufacturingMarkupInvoiceDetail
;
//--
//overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//
//manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
////--
//overRepricingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//overRepricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//manufacturingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//
//overCurRepricingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//overCurRepricingPriceUserInvoiceDetail(detail) += curManufacturingPriceUserInvoiceDetail(detail);
//curManufacturingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
