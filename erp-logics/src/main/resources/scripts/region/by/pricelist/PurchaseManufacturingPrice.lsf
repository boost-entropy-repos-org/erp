MODULE PurchaseManufacturingPrice;

REQUIRE PurchaseInvoice, PricingPurchase, PurchaseDeclaration, PricingManufacturingPrice, RepricingManufacturingPrice, PriceListLedger;

NAMESPACE Purchase;

@defineDocumentInterfaceCreate (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVATUserInvoiceDetail(detail) <-  fixedPriceSku(skuUserInvoiceDetail(detail)) WHEN CHANGED (skuUserInvoiceDetail(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

EXTEND CLASS SystemLedgerPriceListType { manufacturingPriceStockPriceListType 'Изготовителя (последняя по складу)' }
batchLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType. manufacturingPriceStockPriceListType THEN TRUE;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN manufacturingPriceInvoiceDetail(ledger);

EXTEND CLASS SystemLedgerPriceListType { manufacturingPricePriceListType 'Изготовителя (последняя по ценовой группе)' }
batchLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType.manufacturingPricePriceListType THEN TRUE;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.manufacturingPricePriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.manufacturingPricePriceListType THEN manufacturingPriceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

// Записываем по умолчанию цену себестоимости в цену изготовителя (а не последнюю)
manufacturingRoundConditionUserInvoice = DATA RoundCondition(UserInvoice);
nameManufacturingRoundConditionUserInvoice 'Округление' (userInvoice) = nameRoundCondition(manufacturingRoundConditionUserInvoice(userInvoice));

addCostPriceToManufacturingPriceOperation 'Учитывать в цене изготовителя доп. расходы' = DATA BOOLEAN (Purchase.Operation);

// -- Операция
manufacturingCalcPriceListTypeOperation = DATA CalcPriceListType (Purchase.Operation);
nameManufacturingCalcPriceListTypeOperation 'Вид цен (надбавка к цене изготовителя)' (operation) = nameCalcPriceListType(manufacturingCalcPriceListTypeOperation(operation));

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');

@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, manufacturing, ' (к цене изготовителя)');

manufacturingCalcPriceListTypeUserInvoice (invoice) <- manufacturingCalcPriceListTypeOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

manufacturingMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypeSku(manufacturingCalcPriceListTypeUserInvoiceDetail(detail), skuUserInvoiceDetail(detail))
    WHEN CHANGED(manufacturingCalcPriceListTypeUserInvoiceDetail(detail)) OR
         CHANGED(skuUserInvoiceDetail(detail));

EXTEND FORM Purchase.operation
    PROPERTIES(o) addCostPriceToManufacturingPriceOperation, nameManufacturingCalcPriceListTypeOperation
;

EXTEND DESIGN Purchase.operation{
    tabContainer{
        showContainer{
            ADD PROPERTY(addCostPriceToManufacturingPriceOperation);
            ADD PROPERTY(nameManufacturingCalcPriceListTypeOperation);
        }
    }
}

addCostPriceToManufacturingPriceUserInvoice 'Учитывать в цене изготовителя доп.расходы' (invoice) = DATA BOOLEAN (UserInvoice) IN documentPrmGroup;
addCostPriceToManufacturingPriceUserInvoice(invoice) <- addCostPriceToManufacturingPriceOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

calcBaseManufacturingPriceUserInvoiceDetail (detail) = IF addCostPriceToManufacturingPriceUserInvoice(invoiceInvoiceDetail(detail)) THEN costPriceUserInvoiceDetail(detail)
                                        ELSE incomePriceUserInvoiceDetail(detail);

baseManufacturingPriceUserInvoiceDetail (detail) = calcBaseManufacturingPriceUserInvoiceDetail (detail) * (100.0 (+) manufacturingMarkupUserInvoiceDetail(detail))/100;

WHEN SESSION FORMS userInvoice, declaration
    CHANGED(baseManufacturingPriceUserInvoiceDetail(d)) OR CHANGED(manufacturingRoundConditionUserInvoice(invoiceInvoiceDetail(d))) DO {
    IF manufacturingRoundConditionUserInvoice(invoiceInvoiceDetail(d)) THEN
        manufacturingPriceUserInvoiceDetail(d) <- roundPriceRoundCondition(baseManufacturingPriceUserInvoiceDetail(d), manufacturingRoundConditionUserInvoice(invoiceInvoiceDetail(d)))
    ELSE
        manufacturingPriceUserInvoiceDetail(d) <- baseManufacturingPriceUserInvoiceDetail(d);
}

overAdditionalValuation(rd, detail) += ACTION (rd, detail) {
    ASSIGN curManufacturingPriceUserRepricingDetail(rd) <- prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.manufacturingPriceStockPriceListType, skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), dateTimeInvoiceDetail(detail));
    ASSIGN manufacturingPriceUserRepricingDetail(rd) <- manufacturingPriceInvoiceDetail(detail);
}

//@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, curManufacturing, ' изготовителя до');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, curManufacturing, sku, customerStock);
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, curManufacturing, );

@changeDocumentDetailPricePrefix(userInvoiceDetail, manufacturing, manRetail, retail, manufacturingMVAT, retail, retail);
@changeDocumentDetailPricePrefix(userInvoiceDetail, curManufacturing, newManRetail, cur, curManufacturingMVAT, cur, curRetail);

toShowRepricingPriceInvoice (invoice) = createRepricingInvoice(invoice) AND showManufacturingPriceInvoice(invoice);

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

calcDiscountSumUserInvoiceDetail (detail) = manufacturingSumUserInvoiceDetail(detail) - sumUserInvoiceDetail(detail);
discountSumUserInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumUserInvoiceDetail(detail) IF calcDiscountSumUserInvoiceDetail(detail) > 0.0;

calcDiscountSumInvoiceDetail (detail) = manufacturingSumInvoiceDetail(detail) - sumInvoiceDetail(detail);
discountSumInvoiceDetail 'Скидка от цены изг. (сумма)' (detail) = calcDiscountSumInvoiceDetail(detail) IF calcDiscountSumInvoiceDetail(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discount, discount);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPriceUserInvoice
    PROPERTIES(i) SHOWIF showManufacturingPriceUserInvoice(i) nameManufacturingRoundConditionUserInvoice, addCostPriceToManufacturingPriceUserInvoice,
                  nameManufacturingCalcPriceListTypeUserInvoice
    PROPERTIES(d) SHOWIF showManufacturingPriceUserInvoice(i) AFTER invoiceSumUserInvoiceDetail manufacturingSumUserInvoiceDetail,
                  includeVATUserInvoiceDetail, manufacturingPriceUserInvoiceDetail ON CHANGE changeManufacturingPriceUserInvoiceDetail(d),
                  manufacturingMarkupUserInvoiceDetail
    PROPERTIES(d) BACKGROUND backgroundCurInvoice(i) SHOWIF toShowRepricingPriceInvoice(i) BEFORE curPriceUserInvoiceDetail
                  curManufacturingPriceUserInvoiceDetail ON CHANGE changeCurManufacturingPriceUserInvoiceDetail(d)
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            ADD PROPERTY(showManufacturingPriceUserInvoice);
            ADD PROPERTY(nameManufacturingRoundConditionUserInvoice);
            ADD PROPERTY(addCostPriceToManufacturingPriceUserInvoice);
            ADD PROPERTY(nameManufacturingCalcPriceListTypeUserInvoice);
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLYIF isReadonly() showManufacturingPriceInvoice
    PROPERTIES(d) READONLY SHOWIF showManufacturingPriceInvoice(i) AFTER invoiceSumInvoiceDetail
                  manufacturingSumInvoiceDetail, includeVATInvoiceDetail, manufacturingPriceInvoiceDetail,
                  manufacturingMarkupInvoiceDetail
;
//--
overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);

manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//--
overRepricingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
overRepricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
manufacturingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));

overCurRepricingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
overCurRepricingPriceUserInvoiceDetail(detail) += curManufacturingPriceUserInvoiceDetail(detail);
curManufacturingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
