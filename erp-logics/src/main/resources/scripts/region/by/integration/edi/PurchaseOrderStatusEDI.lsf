MODULE PurchaseOrderStatusEDI;

REQUIRE PurchaseOrderStatus, PurchaseOrderEDI;

NAMESPACE EDI;


backgroundQuantityResponseEDI(Purchase.OrderDetail d) += RGB(255,0,0) IF responseDetail(d AS Purchase.OrderDetail) AND NOT quantityResponseEDI(d) == originalQuantity(d);
  
logSendDocumentOrder(Purchase.Order o) = {
	NEW d = DocumentLog {
	    document(d) <- o;
	    typeDocument(d) <- objectClassName(o);
	    numberDocument(d) <- number(o);  
	    seriesDocument(d) <- series(o); 
	    dateDocument(d) <- date(o);
	    typeChange(d) <- TypeChange.email;
	    note(d) <- 'edi';      
	    session(d) <- currentSession();  
	    hostnameComputer(d) <- hostnameCurrentComputer();
	    userLogin(d) <- login(currentUser()); 
	    nameContact(d) <- VARSTRING[100](name[Contact](currentUser()));
	    dateTimeSession(d) <- currentDateTime();  
	    supplierStock(d) <- supplierStock(o);
	    customerStock(d) <- customerStock(o);
	}
}

overEmailCustomer(Order.Order order) += {
    IF NOT consumedEmailCustomer(order ) AND isEOrder[UserOrder](order AS Order.Order) AND NOT skipSend(order) THEN {
        
        consumedEmailCustomer(order) <- TRUE;
        
        IF NOT countOrderDetail(order) THEN {
            MESSAGE 'В заказе нет строк. Отправка отменена.';
            RETURN;
        }
        
        IF shipmentDateTime(order) < sumMinutes(currentDateTime(), 60) THEN { //конкретно у СТТ текущего + час, поэтому пока для всех такое
            MESSAGE 'Дата/время поставки не может быть меньше текущего. Отправка отменена.';
            RETURN;
        }
        
        send[EOrder](order);
        IF NOT sentDateTime[UserOrder](order) THEN logSendDocumentOrder(order);
        sentDateTime[UserOrder](order) <- currentDateTime() WHERE NOT sentDateTime[UserOrder](order);
    }
}

provider(Purchase.Order o) += WHEN isEOrder(o) THEN VARSTRING[20]('EDI:' + nameEDIProvider(supplier(o)));

cancel 'Отменить заказ'(Order.Order order) = {
    IF isEOrder[UserOrder](order AS Order.Order) AND NOT skipSend(order) THEN {
        isRejected[UserOrder](order) <- TRUE;
        cancel[EOrder](order);        
        apply();
    }
}

EXTEND FORM orders 
    PROPERTIES (o)  cancel SHOWIF isEOrder(o);

DESIGN orders {
    emailContainer{
        MOVE PROPERTY (cancel(o));
    }
}

WHEN SET (code(EOrderMessage m)) AND good(m) DO {
    isSent(Purchase.UserOrder o) <- TRUE WHERE o == eOrder(m);
}

WHEN SET (UserOrder o == eOrder(EOrderResponse od)) DO {
    IF responseType(od) == EOrderResponseType.cancelled OR NOT quantityResponseEDI(o) > 0.0 THEN { //ответ с 0 во всех строках считается отказом
        isRejected(o) <- TRUE;
    } ELSE {
        isConfirmed(o) <- TRUE;
    }
}

orderConfirmation(UserOrder o) += isEOrder(o);

skipPostConfirmed(Purchase.UserOrder o) += isEOrder(o AS UserOrder) AND NOT quantityResponseEDI(o) == quantityOrderDetail(o);

status(Purchase.Order o) += WHEN isEOrder(o AS UserOrder) AND isConfirmed(o) AND NOT quantityResponseEDI(o) == quantityOrderDetail(o) AND NOT isRejected(o) AND NOT isPosted(o) AND NOT isClosed(o)
                                THEN 'С изменениями';
backgroundStatus(Purchase.Order o) += WHEN isEOrder(o AS UserOrder) AND isConfirmed(o) AND NOT quantityResponseEDI(o) == quantityOrderDetail(o) THEN RGB(255,255,128);
backgroundStatus(Purchase.Order o) += WHEN isConfirmed(o) THEN RGB(212,255,212);

currentOrderMessage = GROUP LAST EOrderMessage m BY eOrder(m) ORDER dateTime(m), m;
statusDescription 'Статус отправки EDI'(EOrder o) = CONCAT ' ', code(currentOrderMessage(o)), description(currentOrderMessage(o)) MINCHARWIDTH 15 PREFCHARWIDTH 45;

backgroundStatusEDI(Purchase.Order o) = IF currentOrderMessage(o) THEN IF good(currentOrderMessage(o)) THEN RGB(212,255,212) ELSE RGB (255,128,128);

EXTEND FORM Purchase.orders 
    PROPERTIES (o) statusDescription BEFORE isConfirmed(o) BACKGROUND backgroundStatusEDI(o);