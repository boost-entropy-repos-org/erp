MODULE ItemPharmacyBy;

REQUIRE ItemPharmacy, PriceListType;

NAMESPACE Item;

CLASS PharmacyPriceGroup 'Тип лекарственного средства';
TABLE pharmacyPriceGroup(PharmacyPriceGroup);

namePharmacyPriceGroup 'Наименование' = DATA VARISTRING[50](PharmacyPriceGroup);
@defineExternalizable(pharmacyPriceGroup, VARSTRING[100]);

pharmacyPriceGroupSku= ABSTRACT PharmacyPriceGroup (Sku);
namePharmacyPriceGroupSku 'Тип лекарственного средства' (sku) = namePharmacyPriceGroup(pharmacyPriceGroupSku(sku));

@defineObjectItemAttribute(pharmacyPriceGroup, PharmacyPriceGroup, namePharmacyPriceGroup, 'Тип лекарственного средства', itemPharmacyGroup);
@defineObjectItemAttributeBatch (pharmacyPriceGroup, namePharmacyPriceGroup, 'Тип лекарственного средства');
pharmacyPriceGroupSku(sku) += pharmacyPriceGroupItem(sku);

CLASS PharmacyPriceInterval 'Интервал цен лекарственного средства';
TABLE pharmacyPriceInterval(PharmacyPriceInterval);

pharmacyGroupPharmacyInterval= DATA PharmacyPriceGroup (PharmacyPriceInterval);
namePharmacyGroupPharmacyInterval 'Тип лекарственного средства' (interval) = namePharmacyPriceGroup(pharmacyGroupPharmacyInterval(interval));

pharmacyTypeExchange = DATA TypeExchange ();
namePharmacyTypeExchange 'Тип обмена для Лекарственных средств' ()= nameTypeExchange(pharmacyTypeExchange());

EXTEND FORM options
    PROPERTIES() namePharmacyTypeExchange
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(namePharmacyTypeExchange);
    }
}

pricePharmacyInterval 'Цена от' = DATA NUMERIC[14,2] (PharmacyPriceInterval);

fromDatePharmacyInterval 'Дата действия с' = DATA DATE (PharmacyPriceInterval);
toDatePharmacyInterval 'Дата действия по' = DATA DATE (PharmacyPriceInterval);

TABLE pharmacyPriceGroupPharmacyPriceInterval(PharmacyPriceGroup, PharmacyPriceInterval);
wholesaleMarkupPharmacyGroupInterval 'Оптовая надбавка' = DATA NUMERIC[8,3] (PharmacyPriceGroup, PharmacyPriceInterval);
retailMarkupPharmacyGroupInterval 'Розничная надбавка' = DATA NUMERIC[8,3] (PharmacyPriceGroup, PharmacyPriceInterval);

pharmacyExchangePriceDate  (price, date)= price / rateTypeExchangeCurrencyDate(pharmacyTypeExchange(), currencyShortName('USD'), date);

orderIntervalGroupPriceDate (group, price, date) = GROUP MAX STRUCT(pricePharmacyInterval(interval), fromDatePharmacyInterval(interval), interval)
    IF pharmacyExchangePriceDate(price AS NUMERIC[14,2], date) > pricePharmacyInterval(interval)
    IF date >= fromDatePharmacyInterval(interval)
    IF NOT date > toDatePharmacyInterval(interval)
        BY pharmacyGroupPharmacyInterval(interval), price, date;

pharmacyIntervalPharmacyGroupPriceDate (group, price, date) = orderIntervalGroupPriceDate(group, price, date)[3];

wholesaleMarkupPharmacyGroupPriceDate 'Оптовая надбавка' (priceGroup, price, date) = wholesaleMarkupPharmacyGroupInterval(priceGroup, pharmacyIntervalPharmacyGroupPriceDate(priceGroup, price, date));
wholesaleMarkupPharmacySkuPriceDate 'Оптовая надбавка' (sku, price, date) =  wholesaleMarkupPharmacyGroupPriceDate(pharmacyPriceGroupSku(sku), price, date);
wholesaleMarkupPharmacyBatchPriceDate 'Оптовая надбавка' (batch, price, date) =  wholesaleMarkupPharmacySkuPriceDate(skuBatch(batch), price, date);

retailMarkupPharmacyGroupPriceDate 'Розничная надбавка' (priceGroup, price, date) = retailMarkupPharmacyGroupInterval(priceGroup, pharmacyIntervalPharmacyGroupPriceDate(priceGroup, price, date));
retailMarkupPharmacySkuPriceDate 'Розничная надбавка' (sku, price, date) =  retailMarkupPharmacyGroupPriceDate(pharmacyPriceGroupSku(sku), price, date);
retailMarkupPharmacyBatchPriceDate 'Розничная надбавка' (batch, price, date) =  retailMarkupPharmacySkuPriceDate(skuBatch(batch), price, date);

FORM pharmacyMarkups 'Типы лекарственных средств'

    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) namePharmacyPriceGroup, idPharmacyPriceGroup SHOWIF showIDs()
    PROPERTIES (g) ADDOBJ, DELETESESSION
    ORDER BY idPharmacyPriceGroup

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES fromDatePharmacyInterval(i), toDatePharmacyInterval(i), pricePharmacyInterval(i),
               wholesaleMarkupPharmacyGroupInterval(g,i), retailMarkupPharmacyGroupInterval(g,i)
    PROPERTIES(i) ADDOBJ, DELETESESSION
    FILTERS    pharmacyGroupPharmacyInterval(i)==g
    ORDER BY pricePharmacyInterval

    OBJECTS nu=NUMERIC[14,3] FIXED PANEL
    PROPERTIES val = OBJVALUE(nu)

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES value = OBJVALUE(t)
    PROPERTIES(g, nu, t) READONLY wholesaleMarkupPharmacyGroupPriceDate,retailMarkupPharmacyGroupPriceDate

;

DESIGN pharmacyMarkups FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        ADD g.box;
        ADD i.box;
        NEW test {
            caption = 'Тестовая форма';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (value) {
                caption = 'Выберите дату';
                panelLabelAbove = TRUE;
                font = 'Tahoma bold 24';
            }
            ADD PROPERTY (val) {
                caption = 'Введите цену в рублях';
                panelLabelAbove = TRUE;
                font = 'Tahoma bold 24';
            }

            ADD PROPERTY (wholesaleMarkupPharmacyGroupPriceDate(g, nu, t)) {
                caption = 'Результат (оптовая надбавка)';
                panelLabelAbove = TRUE;
                font = 'Tahoma bold 24';
            }
            ADD PROPERTY (retailMarkupPharmacyGroupPriceDate(g, nu, t)) {
                caption = 'Результат (розничная надбавка)';
                panelLabelAbove = TRUE;
                font = 'Tahoma bold 24';
            }
        }
        ADD functions.box;
    }
}
FORM pharmacyPriceGroups 'Типы лекарственных средств'
    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) READONLY namePharmacyPriceGroup, idPharmacyPriceGroup SHOWIF showIDs()
    ORDER BY idPharmacyPriceGroup

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES READONLY fromDatePharmacyInterval(i), toDatePharmacyInterval(i), pricePharmacyInterval(i),
               wholesaleMarkupPharmacyGroupInterval(g,i), retailMarkupPharmacyGroupInterval(g,i)
    FILTERS    pharmacyGroupPharmacyInterval(i)==g
    ORDER BY pricePharmacyInterval

    DIALOG PharmacyPriceGroup OBJECT g
;

DESIGN pharmacyPriceGroups FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
}

NAVIGATOR {
    skuNavigator {
        ADD pharmacyMarkups;
    }
}

//---------------- специальный тип цены (опт)-----------------//

CLASS WholesalePharmacyPriceListType 'Оптовая цена на медтовары' : PriceListType;

nameWholesalePharmacyPriceListType 'Наименование' = DATA VARISTRING[50](WholesalePharmacyPriceListType);
namePriceListType(type) += nameWholesalePharmacyPriceListType(type) IF type IS WholesalePharmacyPriceListType;

basePriceListTypeWholesalePharmacyPriceListType(type) = DATA LedgerPriceListType (WholesalePharmacyPriceListType);
nameBasePriceListTypeWholesalePharmacyPriceListType 'Базовый вид цены' (type) = nameBasePriceListType(basePriceListTypeWholesalePharmacyPriceListType(type));

ledgerPriceListTypePriceListType(type) += basePriceListTypeWholesalePharmacyPriceListType(type) AS LedgerPriceListType;

calcPriceListTypeWholesalePharmacyPriceListType = DATA CalcPriceListType (WholesalePharmacyPriceListType);
nameCalcPriceListTypeWholesalePharmacyPriceListType 'Вид цены с основной наценкой' (type) = namePriceListType(calcPriceListTypeWholesalePharmacyPriceListType(type));

@defineDocumentHeaderCurrency(wholesalePharmacyPriceListType);
currencyPriceListType(pharmacyPriceListType) += currencyWholesalePharmacyPriceListType(pharmacyPriceListType);

//---цена товара
markupWholesalePharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
 wholesaleMarkupPharmacySkuPriceDate(sku AS Sku,
 priceBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime), toDate(dateTime) AS DATE);

maxPriceWholesalePharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
 round((100 + markupWholesalePharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime))*
           priceBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);

priceWholesalePharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
 NUMERIC[14,2] (MIN priceCalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
                    maxPriceWholesalePharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)
 IF type IS WholesalePharmacyPriceListType AND stock IS Stock) COMPLEX;

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceWholesalePharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

//---цена партии
markupWholesalePharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
 wholesaleMarkupPharmacyBatchPriceDate(batch AS Batch,
     priceBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime), toDate(dateTime) AS DATE);

maxPriceWholesalePharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
 round((100 + markupWholesalePharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
           priceBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);

priceWholesalePharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
 NUMERIC[14,2] (MIN priceCalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
                    maxPriceWholesalePharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)
 IF type IS WholesalePharmacyPriceListType AND stock IS Stock);

pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceWholesalePharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

FORM wholesalePharmacyPriceListType 'Оптовая цена на медтовары'
 OBJECTS p = WholesalePharmacyPriceListType FIXED PANEL
 PROPERTIES(p) nameWholesalePharmacyPriceListType, nameCurrencyWholesalePharmacyPriceListType,
               nameBasePriceListTypeWholesalePharmacyPriceListType, nameCalcPriceListTypeWholesalePharmacyPriceListType

 EDIT WholesalePharmacyPriceListType OBJECT p
;

DESIGN wholesalePharmacyPriceListType FROM DEFAULT {
 p.box{
     ADD PROPERTY(nameWholesalePharmacyPriceListType);
     ADD PROPERTY(nameCurrencyWholesalePharmacyPriceListType);
     ADD PROPERTY(nameBasePriceListTypeWholesalePharmacyPriceListType);
     ADD PROPERTY(nameCalcPriceListTypeWholesalePharmacyPriceListType);
 }
}

addWholesalePharmacyPriceListType 'Добавить опт.цену на медтовары' = ACTION ADDFORM WholesalePharmacyPriceListType;
editWholesalePharmacyPriceListType 'Редактировать' = ACTION EDITFORM WholesalePharmacyPriceListType;
editPriceListType(priceListType) += editWholesalePharmacyPriceListType(priceListType);

EXTEND FORM priceListTypes
 PROPERTIES() addWholesalePharmacyPriceListType TODRAW pt FORCE PANEL

;
//---------------- специальный тип цены (розница)-----------------//

CLASS RetailPharmacyPriceListType 'Розничная цена на медтовары' : PriceListType;

nameRetailPharmacyPriceListType 'Наименование' = DATA VARISTRING[50](RetailPharmacyPriceListType);
namePriceListType(type) += nameRetailPharmacyPriceListType(type) IF type IS RetailPharmacyPriceListType;

basePriceListTypeRetailPharmacyPriceListType(type) = DATA LedgerPriceListType (RetailPharmacyPriceListType);
nameBasePriceListTypeRetailPharmacyPriceListType 'Базовый вид цены' (type) = nameBasePriceListType(basePriceListTypeRetailPharmacyPriceListType(type));

ledgerPriceListTypePriceListType(type) += basePriceListTypeRetailPharmacyPriceListType(type) AS LedgerPriceListType;

calcPriceListTypeRetailPharmacyPriceListType = DATA CalcPriceListType (RetailPharmacyPriceListType);
nameCalcPriceListTypeRetailPharmacyPriceListType 'Вид цены с основной наценкой' (type) = namePriceListType(calcPriceListTypeRetailPharmacyPriceListType(type));

@defineDocumentHeaderCurrency(retailPharmacyPriceListType);
currencyPriceListType(pharmacyPriceListType) += currencyRetailPharmacyPriceListType(pharmacyPriceListType);

//---цена товара
markupRetailPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
  retailMarkupPharmacySkuPriceDate(sku AS Sku,
  priceBasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime), toDate(dateTime) AS DATE);

maxPriceRetailPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
  round((100 + markupRetailPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime))*
            priceBasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime)/100, 0);

priceRetailPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
  NUMERIC[14,2] (MIN priceCalcPriceListTypeSkuStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
                     maxPriceRetailPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)
  IF type IS RetailPharmacyPriceListType AND stock IS Stock) COMPLEX;

pricePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceRetailPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

//---цена партии
markupRetailPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
  retailMarkupPharmacyBatchPriceDate (batch AS Batch,
      priceBasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime), toDate(dateTime) AS DATE);

maxPriceRetailPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
  round((100 + markupRetailPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
            priceBasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime)/100, 0);

priceRetailPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
  NUMERIC[14,2] (MIN priceCalcPriceListTypeBatchStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
                     maxPriceRetailPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)
  IF type IS RetailPharmacyPriceListType AND stock IS Stock);

pricePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceRetailPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

FORM retailPharmacyPriceListType 'Розничная цена на медтовары'
  OBJECTS p = RetailPharmacyPriceListType FIXED PANEL
  PROPERTIES(p) nameRetailPharmacyPriceListType, nameCurrencyRetailPharmacyPriceListType,
                nameBasePriceListTypeRetailPharmacyPriceListType, nameCalcPriceListTypeRetailPharmacyPriceListType

  EDIT RetailPharmacyPriceListType OBJECT p
;

DESIGN retailPharmacyPriceListType FROM DEFAULT {
  p.box{
      ADD PROPERTY(nameRetailPharmacyPriceListType);
      ADD PROPERTY(nameCurrencyRetailPharmacyPriceListType);
      ADD PROPERTY(nameBasePriceListTypeRetailPharmacyPriceListType);
      ADD PROPERTY(nameCalcPriceListTypeRetailPharmacyPriceListType);
  }
}

addRetailPharmacyPriceListType 'Добавить розн.цену на медтовары' = ACTION ADDFORM RetailPharmacyPriceListType;
editRetailPharmacyPriceListType 'Редактировать' = ACTION EDITFORM RetailPharmacyPriceListType;
editPriceListType(priceListType) += editRetailPharmacyPriceListType(priceListType);

EXTEND FORM priceListTypes
  PROPERTIES() addRetailPharmacyPriceListType TODRAW pt FORCE PANEL

;
// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultPharmacyPriceGroup 'Добавить Типы лекарственных средств' = ACTION (iname, isid) {
    FOR ADDOBJ g = PharmacyPriceGroup DO {
         ASSIGN namePharmacyPriceGroup(g) <- iname;
         ASSIGN idPharmacyPriceGroup(g) <- isid;
    }
}

loadDefaultPharmacyPriceInterval 'Добавить интервал цен лекарственного средства (by)' = ACTION (sidGroup, priceFrom, wMarkup, rMarkup) {
    FOR ADDOBJ i = PharmacyPriceInterval DO {
         ASSIGN pharmacyGroupPharmacyInterval(i) <- pharmacyPriceGroupId(sidGroup);
         ASSIGN pricePharmacyInterval(i) <- priceFrom;
         ASSIGN fromDatePharmacyInterval(i) <- 2013_01_01;
         ASSIGN wholesaleMarkupPharmacyGroupInterval(g,i) <- wMarkup WHERE g == pharmacyPriceGroupId(sidGroup);
         ASSIGN retailMarkupPharmacyGroupInterval(g,i) <- rMarkup WHERE g == pharmacyPriceGroupId(sidGroup);
    }
}


loadDefaultPharmacyPriceGroups 'Загрузить стандарные типы лек. ср-в и надбавки для них' () = ACTION () {
    EXEC loadDefaultPharmacyPriceGroup('Лекарственные средства', 'by_1');
        EXEC loadDefaultPharmacyPriceInterval('by_1', 0.00, 11.00, 30.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 5.00, 10.00, 25.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 10.00, 9.00, 21.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 15.00, 8.00, 17.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 30.00, 7.00, 13.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 50.00, 4.00, 6.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 100.00, 2.00, 2.00);

    EXEC loadDefaultPharmacyPriceGroup('Изделия медицинского назначения', 'by_2');
        EXEC loadDefaultPharmacyPriceInterval('by_2', 0.00, 13.00, 31.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 5.00, 10.00, 29.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 10.00, 9.00, 25.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 15.00, 8.00, 19.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 50.00, 5.00, 9.00);

    EXEC loadDefaultPharmacyPriceGroup('Медицинская техника', 'by_3');
        EXEC loadDefaultPharmacyPriceInterval('by_3', 0.00, 22.00, 23.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 3000.00, 20.00, 20.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 10000.00, 10.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 50000.00, 8.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 500000.00, 5.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 1000000.00, 3.00, 0.00);

}IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultPharmacyPriceGroups);

