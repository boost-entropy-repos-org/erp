MODULE ItemPharmacyBy;

REQUIRE ItemPharmacy, PriceListType;

NAMESPACE Item;

CLASS PharmacyPriceGroup 'Тип лекарственного средства': Group;
TABLE pharmacyPriceGroup(PharmacyPriceGroup);

namePharmacyPriceGroup 'Наименование' = DATA VARISTRING[50](PharmacyPriceGroup);
@defineExternalizable(pharmacyPriceGroup, VARSTRING[100]);
nameGroup(group) += namePharmacyPriceGroup(group);

CLASS PharmacyGroupType 'Классификатор групп лекарственного средства': GroupType;
TABLE pharmacyGroupType (PharmacyGroupType);

namePharmacyGroupType 'Наименование' = DATA VARISTRING[100](PharmacyGroupType) IN recognize MINCHARWIDTH 25 PREFCHARWIDTH 25;
nameGroupType(group)+=namePharmacyGroupType(group);

pharmacyTypeGroupPharmacyPriceGroup = DATA PharmacyGroupType(PharmacyPriceGroup);
namePharmacyTypeGroupPharmacyPriceGroup 'Наименование классификатора' = namePharmacyGroupType(pharmacyTypeGroupPharmacyPriceGroup(group));

groupTypeGroup(group) += pharmacyTypeGroupPharmacyPriceGroup(group);

pharmacyPriceGroupSku = ABSTRACT PharmacyPriceGroup (Sku) PERSISTENT;
namePharmacyPriceGroupSku 'Тип лекарственного средства' (sku) = namePharmacyPriceGroup(pharmacyPriceGroupSku(sku));

groupGroupTypeSku(type, sku) += WHEN type IS PharmacyGroupType THEN pharmacyPriceGroupSku(sku);

@defineObjectItemAttribute(pharmacyPriceGroup, PharmacyPriceGroup, namePharmacyPriceGroup, 'Тип лекарственного средства', itemPharmacy);
@defineObjectItemAttributeBatch (pharmacyPriceGroup, namePharmacyPriceGroup, 'Тип лекарственного средства', sku);
pharmacyPriceGroupSku(sku) += pharmacyPriceGroupItem(sku);

CLASS PharmacyPriceInterval 'Интервал цен лекарственного средства';
TABLE pharmacyPriceInterval(PharmacyPriceInterval);

pharmacyGroupPharmacyInterval= DATA PharmacyPriceGroup (PharmacyPriceInterval);
namePharmacyGroupPharmacyInterval 'Тип лекарственного средства' (interval) = namePharmacyPriceGroup(pharmacyGroupPharmacyInterval(interval));

pharmacyTypeExchange = DATA TypeExchange ();
namePharmacyTypeExchange 'Тип обмена для Лекарственных средств' ()= nameTypeExchange(pharmacyTypeExchange());

EXTEND FORM options
    PROPERTIES() namePharmacyTypeExchange
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(namePharmacyTypeExchange());
    }
}

pricePharmacyInterval 'Цена от' = DATA NUMERIC[14,2] (PharmacyPriceInterval);

fromDatePharmacyInterval 'Дата действия с' = DATA DATE (PharmacyPriceInterval);
toDatePharmacyInterval 'Дата действия по' = DATA DATE (PharmacyPriceInterval);

TABLE pharmacyPriceGroupPharmacyPriceInterval(PharmacyPriceGroup, PharmacyPriceInterval);

wholesaleMarkupPharmacyPriceInterval 'Оптовая надбавка' = DATA NUMERIC[8,3] (PharmacyPriceInterval);
retailMarkupPharmacyPriceInterval 'Розничная надбавка' = DATA NUMERIC[8,3] (PharmacyPriceInterval);
eurCurrency = currencyShortName('EUR') PERSISTENT;
usdCurrency = currencyShortName('USD') PERSISTENT;
pharmacyExchangePriceDate (price, date) = price / rateOnTypeExchangeCurrencyDate(pharmacyTypeExchange(), usdCurrency(), date);

wholesaleMarkupPharmacyGroupPriceDate 'Оптовая надбавка' (priceGroup, price, date) =
    GROUP LAST wholesaleMarkupPharmacyPriceInterval(interval)
          BY pharmacyGroupPharmacyInterval(interval), price, date
          ORDER pricePharmacyInterval(interval)
          WHERE pharmacyExchangePriceDate(price AS NUMERIC[14,2], date) > pricePharmacyInterval(interval) AND
                date >= fromDatePharmacyInterval(interval) AND NOT date > toDatePharmacyInterval(interval) COMPLEX;

retailMarkupPharmacyGroupPriceDate 'Оптовая надбавка' (priceGroup, price, date) =
    GROUP LAST retailMarkupPharmacyPriceInterval(interval)
          BY pharmacyGroupPharmacyInterval(interval), price, date
          ORDER pricePharmacyInterval(interval)
          WHERE pharmacyExchangePriceDate(price AS NUMERIC[14,2], date) > pricePharmacyInterval(interval) AND
                date >= fromDatePharmacyInterval(interval) AND NOT date > toDatePharmacyInterval(interval) COMPLEX;

wholesaleMarkupPharmacySkuPriceDate 'Оптовая надбавка' (sku, price, date) =  wholesaleMarkupPharmacyGroupPriceDate(pharmacyPriceGroupSku(sku), price, date) COMPLEX;
wholesaleMarkupPharmacyBatchPriceDate 'Оптовая надбавка' (batch, price, date) =  wholesaleMarkupPharmacySkuPriceDate(skuBatch(batch), price, date);

retailMarkupPharmacySkuPriceDate 'Розничная надбавка' (sku, price, date) =  retailMarkupPharmacyGroupPriceDate(pharmacyPriceGroupSku(sku), price, date);
retailMarkupPharmacyBatchPriceDate 'Розничная надбавка' (batch, price, date) =  retailMarkupPharmacySkuPriceDate(skuBatch(batch), price, date);

FORM pharmacyMarkups 'Типы лекарственных средств'

    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) namePharmacyPriceGroup, idPharmacyPriceGroup SHOWIF showIDs(), namePharmacyTypeGroupPharmacyPriceGroup
    PROPERTIES (g) ADDOBJ, DELETESESSION
    ORDER BY idPharmacyPriceGroup(g)

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES fromDatePharmacyInterval(i), toDatePharmacyInterval(i), pricePharmacyInterval(i),
               wholesaleMarkupPharmacyPriceInterval(i), retailMarkupPharmacyPriceInterval(i)
    PROPERTIES(i) ADDOBJ, DELETESESSION
    FILTERS    pharmacyGroupPharmacyInterval(i)==g
    ORDER BY pricePharmacyInterval(i)

    OBJECTS nu=NUMERIC[14,3] FIXED PANEL
    PROPERTIES val = OBJVALUE(nu)

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES value = OBJVALUE(t)
    PROPERTIES(g, nu, t) READONLY wholesaleMarkupPharmacyGroupPriceDate,retailMarkupPharmacyGroupPriceDate

;

DESIGN pharmacyMarkups FROM DEFAULT {
    main {
        type = CONTAINERV;
        ADD g.box;
        ADD i.box;
        NEW test {
            caption = 'Тестовая форма';
            type = CONTAINERH;
            ADD PROPERTY (value) {
                caption = 'Выберите дату';
                panelLabelAbove = TRUE;
                font = 'bold 24';
            }
            ADD PROPERTY (val) {
                caption = 'Введите цену в рублях';
                panelLabelAbove = TRUE;
                font = 'bold 24';
            }

            ADD PROPERTY (wholesaleMarkupPharmacyGroupPriceDate(g, nu, t)) {
                caption = 'Результат (оптовая надбавка)';
                panelLabelAbove = TRUE;
                font = 'bold 24';
            }
            ADD PROPERTY (retailMarkupPharmacyGroupPriceDate(g, nu, t)) {
                caption = 'Результат (розничная надбавка)';
                panelLabelAbove = TRUE;
                font = 'bold 24';
            }
        }
        ADD functions.box;
    }
}
FORM pharmacyPriceGroups 'Типы лекарственных средств'
    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) READONLY namePharmacyPriceGroup, idPharmacyPriceGroup SHOWIF showIDs()
    ORDER BY idPharmacyPriceGroup(g)

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES READONLY fromDatePharmacyInterval(i), toDatePharmacyInterval(i), pricePharmacyInterval(i),
               wholesaleMarkupPharmacyPriceInterval(i), retailMarkupPharmacyPriceInterval(i)
    FILTERS    pharmacyGroupPharmacyInterval(i)==g
    ORDER BY pricePharmacyInterval(i)

    DIALOG PharmacyPriceGroup OBJECT g
;

DESIGN pharmacyPriceGroups FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
}

NAVIGATOR {
    skuNavigator {
        ADD pharmacyMarkups;
    }
}

//---------------- специальный тип цены (опт)-----------------//

CLASS WholesalePharmacyPriceListType 'Оптовая цена на медтовары' : PriceListType;

nameWholesalePharmacyPriceListType 'Наименование' = DATA VARISTRING[50](WholesalePharmacyPriceListType);
namePriceListType(type) += nameWholesalePharmacyPriceListType(type) IF type IS WholesalePharmacyPriceListType;

calcPriceListTypeWholesalePharmacyPriceListType = DATA CalcPriceListType (WholesalePharmacyPriceListType);
nameCalcPriceListTypeWholesalePharmacyPriceListType 'Вид цены с основной наценкой' (type) = namePriceListType(calcPriceListTypeWholesalePharmacyPriceListType(type));

ledgerPriceListTypeWholesalePharmacyPriceListType(type) = basePriceListTypeCalcPriceListType(calcPriceListTypeWholesalePharmacyPriceListType(type)) AS LedgerPriceListType PERSISTENT INDEXED; //DATA LedgerPriceListType (WholesalePharmacyPriceListType);

ledgerPriceListTypePriceListType(type) += ledgerPriceListTypeWholesalePharmacyPriceListType(type);

@defineDocumentHeaderCurrency(wholesalePharmacyPriceListType);
currencyPriceListType(pharmacyPriceListType) += currencyWholesalePharmacyPriceListType(pharmacyPriceListType);

// -------------------- Старый механизм расчета --------------------- //
//---цена товара
//markupWholesaleBPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    wholesaleMarkupPharmacySkuPriceDate(sku,
//                                        priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                                        DATE(dateTime));
//maxPriceWholesaleBPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//           priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//priceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceBCalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//
//
//markupWholesaleAPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    wholesaleMarkupPharmacySkuPriceDate(sku,
//                                        priceABasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                                        DATE(dateTime));
//maxPriceWholesaleAPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//           priceABasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//priceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceACalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;

//---цена партии
//markupWholesaleBPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    wholesaleMarkupPharmacyBatchPriceDate(batch,
//                                          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                                          DATE(dateTime));
//markupWholesaleAPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    wholesaleMarkupPharmacyBatchPriceDate(batch,
//                                          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                                          DATE(dateTime));
//
//maxPriceWholesaleBPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);
//maxPriceWholesaleAPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);
//
//priceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceBCalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)) COMPLEX;
//priceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceACalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)) COMPLEX;

// -------------------- Новый механизм расчета --------------------- //

limitMarkupPriceCalcPriceListTypeSkuDate(price, type, sku, date) =
    MIN markupCalcPriceListTypeSku(type, sku),
        wholesaleMarkupPharmacySkuPriceDate(sku, price, date);

limitPricePriceCalcPriceListTypeSkuDate(price, type, sku, date) =
    NUMERIC[14,2](floor (price * (100 + limitMarkupPriceCalcPriceListTypeSkuDate(price, type, sku, date)) / 100.0)) COMPLEX;

//---цена товара
priceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    limitPricePriceCalcPriceListTypeSkuDate(
        priceBLedgerPriceListTypeSkuStockDateTime(ledgerPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
        calcPriceListTypeWholesalePharmacyPriceListType(type),
        sku,
        DATE(dateTime));

priceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    limitPricePriceCalcPriceListTypeSkuDate(
        priceALedgerPriceListTypeSkuStockDateTime(ledgerPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
        calcPriceListTypeWholesalePharmacyPriceListType(type),
        sku,
        DATE(dateTime));

priceBPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceAPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

//---цена партии
priceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    limitPricePriceCalcPriceListTypeSkuDate(
        priceBLedgerPriceListTypeBatchStockDateTime(ledgerPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
        calcPriceListTypeWholesalePharmacyPriceListType(type),
        skuBatch(batch),
        DATE(dateTime));

priceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    limitPricePriceCalcPriceListTypeSkuDate(
        priceALedgerPriceListTypeBatchStockDateTime(ledgerPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
        calcPriceListTypeWholesalePharmacyPriceListType(type),
        skuBatch(batch),
        DATE(dateTime));

priceBPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
priceAPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

FORM wholesalePharmacyPriceListType 'Оптовая цена на медтовары'
    OBJECTS p = WholesalePharmacyPriceListType FIXED PANEL
    PROPERTIES(p) nameWholesalePharmacyPriceListType, nameCurrencyWholesalePharmacyPriceListType,
                  nameCalcPriceListTypeWholesalePharmacyPriceListType

    EDIT WholesalePharmacyPriceListType OBJECT p
;

DESIGN wholesalePharmacyPriceListType FROM DEFAULT {
    p.box{
        ADD PROPERTY(nameWholesalePharmacyPriceListType(p));
        ADD PROPERTY(nameCurrencyWholesalePharmacyPriceListType(p));
        ADD PROPERTY(nameCalcPriceListTypeWholesalePharmacyPriceListType(p));
    }
}

addWholesalePharmacyPriceListType 'Добавить опт.цену на медтовары' = ACTION ADDFORM WholesalePharmacyPriceListType;
editWholesalePharmacyPriceListType 'Редактировать' = ACTION EDITFORM WholesalePharmacyPriceListType;
editPriceListType(priceListType) += editWholesalePharmacyPriceListType(priceListType);

EXTEND FORM priceListTypes
    PROPERTIES() addWholesalePharmacyPriceListType TODRAW pt FORCE PANEL
;

////---------------- специальный тип цены (розница)-----------------//
//
//CLASS RetailPharmacyPriceListType 'Розничная цена на медтовары' : PriceListType;
//
//nameRetailPharmacyPriceListType 'Наименование' = DATA VARISTRING[50](RetailPharmacyPriceListType);
//namePriceListType(type) += nameRetailPharmacyPriceListType(type) IF type IS RetailPharmacyPriceListType;
//
//basePriceListTypeRetailPharmacyPriceListType(type) = DATA LedgerPriceListType (RetailPharmacyPriceListType);
//nameBasePriceListTypeRetailPharmacyPriceListType 'Базовый вид цены' (type) = nameBasePriceListType(basePriceListTypeRetailPharmacyPriceListType(type));
//
//ledgerPriceListTypePriceListType(type) += basePriceListTypeRetailPharmacyPriceListType(type) AS LedgerPriceListType;
//
//calcPriceListTypeRetailPharmacyPriceListType = DATA CalcPriceListType (RetailPharmacyPriceListType);
//nameCalcPriceListTypeRetailPharmacyPriceListType 'Вид цены с основной наценкой' (type) = namePriceListType(calcPriceListTypeRetailPharmacyPriceListType(type));
//
//@defineDocumentHeaderCurrency(retailPharmacyPriceListType);
//currencyPriceListType(pharmacyPriceListType) += currencyRetailPharmacyPriceListType(pharmacyPriceListType);
//
////---цена товара
//markupRetailBPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    retailMarkupPharmacySkuPriceDate(sku,
//                                     priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                                     DATE(dateTime));
//markupRetailAPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    retailMarkupPharmacySkuPriceDate(sku,
//                                     priceABasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                                     DATE(dateTime));
//
//maxPriceRetailBPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//          priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//maxPriceRetailAPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//          priceABasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//
//priceRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceBCalcPriceListTypeSkuStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//priceRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceACalcPriceListTypeSkuStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//
//priceBPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
//priceAPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
//
////---цена партии
//markupRetailBPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    retailMarkupPharmacyBatchPriceDate(batch,
//                                       priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                                       DATE(dateTime));
//markupRetailAPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    retailMarkupPharmacyBatchPriceDate(batch,
//                                       priceABasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                                       DATE(dateTime));
//
//maxPriceRetailBPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime) / 100, 0);
//maxPriceRetailAPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime) / 100, 0);
//
//priceRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceBCalcPriceListTypeBatchStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));
//priceRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[14,2] (MIN priceACalcPriceListTypeBatchStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));
//
//priceBPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
//priceAPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
//
//FORM retailPharmacyPriceListType 'Розничная цена на медтовары'
//    OBJECTS p = RetailPharmacyPriceListType FIXED PANEL
//    PROPERTIES(p) nameRetailPharmacyPriceListType, nameCurrencyRetailPharmacyPriceListType,
//                  nameBasePriceListTypeRetailPharmacyPriceListType, nameCalcPriceListTypeRetailPharmacyPriceListType
//
//    EDIT RetailPharmacyPriceListType OBJECT p
//;
//
//DESIGN retailPharmacyPriceListType FROM DEFAULT {
//    p.box {
//        ADD PROPERTY(nameRetailPharmacyPriceListType);
//        ADD PROPERTY(nameCurrencyRetailPharmacyPriceListType);
//        ADD PROPERTY(nameBasePriceListTypeRetailPharmacyPriceListType);
//        ADD PROPERTY(nameCalcPriceListTypeRetailPharmacyPriceListType);
//    }
//}
//
//addRetailPharmacyPriceListType 'Добавить розн.цену на медтовары' = ACTION ADDFORM RetailPharmacyPriceListType;
//editRetailPharmacyPriceListType 'Редактировать' = ACTION EDITFORM RetailPharmacyPriceListType;
//editPriceListType(priceListType) += editRetailPharmacyPriceListType(priceListType);
//
//EXTEND FORM priceListTypes
//    PROPERTIES() addRetailPharmacyPriceListType TODRAW pt FORCE PANEL
//;
// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultPharmacyPriceGroup 'Добавить Типы лекарственных средств' = ACTION (iname, isid) {
    FOR ADDOBJ g = PharmacyPriceGroup DO {
         ASSIGN namePharmacyPriceGroup(g) <- iname;
         ASSIGN idPharmacyPriceGroup(g) <- isid;
    }
}

loadDefaultPharmacyPriceInterval 'Добавить интервал цен лекарственного средства (by)' = ACTION (sidGroup, priceFrom, wMarkup, rMarkup) {
    FOR ADDOBJ i = PharmacyPriceInterval DO {
         ASSIGN pharmacyGroupPharmacyInterval(i) <- pharmacyPriceGroupId(sidGroup);
         ASSIGN pricePharmacyInterval(i) <- priceFrom;
         ASSIGN fromDatePharmacyInterval(i) <- 2013_01_01;
         ASSIGN wholesaleMarkupPharmacyPriceInterval(i) <- wMarkup;
         ASSIGN retailMarkupPharmacyPriceInterval(i) <- rMarkup;
    }
}


loadDefaultPharmacyPriceGroups 'Загрузить стандарные типы лек. ср-в и надбавки для них' () = ACTION () {
    EXEC loadDefaultPharmacyPriceGroup('Лекарственные средства', 'by_1');
        EXEC loadDefaultPharmacyPriceInterval('by_1', 0.00, 11.00, 30.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 5.00, 10.00, 25.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 10.00, 9.00, 21.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 15.00, 8.00, 17.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 30.00, 7.00, 13.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 50.00, 4.00, 6.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 100.00, 2.00, 2.00);

    EXEC loadDefaultPharmacyPriceGroup('Изделия медицинского назначения', 'by_2');
        EXEC loadDefaultPharmacyPriceInterval('by_2', 0.00, 13.00, 31.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 5.00, 10.00, 29.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 10.00, 9.00, 25.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 15.00, 8.00, 19.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 50.00, 5.00, 9.00);

    EXEC loadDefaultPharmacyPriceGroup('Медицинская техника', 'by_3');
        EXEC loadDefaultPharmacyPriceInterval('by_3', 0.00, 22.00, 23.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 3000.00, 20.00, 20.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 10000.00, 10.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 50000.00, 8.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 500000.00, 5.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 1000000.00, 3.00, 0.00);

}IN loadDefault;

@implementLoadDefaultData(loadDefaultPharmacyPriceGroups);

