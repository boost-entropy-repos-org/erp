MODULE ItemPharmacyBy;

REQUIRE ItemPharmacy, PriceListType, StockPharmacy;

NAMESPACE Item;

CLASS PharmacyPriceGroup 'Тип лекарственного средства': Group;
TABLE pharmacyPriceGroup(PharmacyPriceGroup);

name 'Наименование' = DATA VARISTRING[50](PharmacyPriceGroup);
@defineExternalizable(pharmacyPriceGroup, VARSTRING[100]);
name(PharmacyPriceGroup group) += name(group);

CLASS PharmacyGroupType 'Классификатор групп лекарственного средства': GroupType;
TABLE pharmacyGroupType (PharmacyGroupType);

name 'Наименование' = DATA VARISTRING[100](PharmacyGroupType) IN recognize MINCHARWIDTH 25 PREFCHARWIDTH 25;
name(PharmacyGroupType group)+=name(group);

pharmacyTypeGroup = DATA PharmacyGroupType(PharmacyPriceGroup);
namePharmacyTypeGroup 'Наименование классификатора' = name(pharmacyTypeGroup(PharmacyPriceGroup group));

groupType(PharmacyPriceGroup group) += pharmacyTypeGroup(group);

pharmacyPriceGroup = ABSTRACT PharmacyPriceGroup (Sku) PERSISTENT;
namePharmacyPriceGroup 'Тип лекарственного средства' (Sku sku) = name(pharmacyPriceGroup(sku));

group(PharmacyGroupType type, Sku sku) += WHEN type IS PharmacyGroupType AND sku IS Sku THEN pharmacyPriceGroup(sku);

@defineObjectItemAttribute(pharmacyPriceGroup, PharmacyPriceGroup, name, 'Тип лекарственного средства', itemPharmacy);

EXTEND FORM item 
    PROPERTIES (i) namePharmacyPriceGroup SHOWIF showPharmacyPriceGroup(i)
;

EXTEND FORM items 
    PROPERTIES (i) namePharmacyPriceGroup AFTER nameSubstance(i) SHOWIF showPharmacyPriceGroup(i) READONLYIF isReadonly()
;

@defineObjectItemAttributeBatch (pharmacyPriceGroup, namePharmacyPriceGroup, 'Тип лекарственного средства', sku);
pharmacyPriceGroup(Item sku) += pharmacyPriceGroup(sku);

CLASS PharmacyPriceInterval 'Интервал цен лекарственного средства';
TABLE pharmacyPriceInterval(PharmacyPriceInterval);

pharmacyGroupPharmacy= DATA PharmacyPriceGroup (PharmacyPriceInterval);
namePharmacyGroupPharmacy 'Тип лекарственного средства' (PharmacyPriceInterval interval) = name(pharmacyGroupPharmacy(interval));

pharmacyTypeExchange = DATA TypeExchange ();
namePharmacyTypeExchange 'Тип обмена для Лекарственных средств' ()= name(pharmacyTypeExchange());

EXTEND FORM options
    PROPERTIES() namePharmacyTypeExchange
;
DESIGN options {
    pharmacy {
        MOVE PROPERTY(namePharmacyTypeExchange());
    }
}

pricePharmacy 'Цена от' = DATA NUMERIC[16,4] (PharmacyPriceInterval);

fromDatePharmacy 'Дата действия с' = DATA DATE (PharmacyPriceInterval);
toDatePharmacy 'Дата действия по' = DATA DATE (PharmacyPriceInterval);

TABLE pharmacyPriceGroupPharmacyPriceInterval(PharmacyPriceGroup, PharmacyPriceInterval);

wholesaleMarkup 'Оптовая надбавка' = DATA NUMERIC[8,3] (PharmacyPriceInterval);
retailMarkup 'Розничная надбавка' = DATA NUMERIC[8,3] (PharmacyPriceInterval);
eurCurrency = currencyShortName('EUR') PERSISTENT;
usdCurrency = currencyShortName('USD') PERSISTENT;
blrCurrency = currencyShortName('BLR') PERSISTENT;
pharmacyExchange (price, DATE date) = price / rateOn(pharmacyTypeExchange(), usdCurrency(), date);

wholesaleMarkupPharmacy 'Оптовая надбавка' (priceGroup, price, date) =
    GROUP LAST wholesaleMarkup(PharmacyPriceInterval interval)
          BY pharmacyGroupPharmacy(interval), NUMERIC[16,4] price, DATE date
          ORDER pricePharmacy(interval), interval
          WHERE pharmacyExchange(price AS NUMERIC[16,4], date) > pricePharmacy(interval) AND
                date >= fromDatePharmacy(interval) AND NOT date > toDatePharmacy(interval) COMPLEX;
prevWholesaleMarkupPharmacy 'Оптовая надбавка (пред.)' (PharmacyPriceGroup priceGroup, NUMERIC[16,4] price, DATE date) = PREV(wholesaleMarkupPharmacy(priceGroup, price, date)) COMPLEX;

retailMarkupPharmacy 'Оптовая надбавка' (priceGroup, price, date) =
    GROUP LAST retailMarkup(PharmacyPriceInterval interval)
          BY pharmacyGroupPharmacy(interval), NUMERIC[16,4] price, DATE date
          ORDER pricePharmacy(interval), interval
          WHERE pharmacyExchange(price AS NUMERIC[16,4], date) > pricePharmacy(interval) AND
                date >= fromDatePharmacy(interval) AND NOT date > toDatePharmacy(interval) COMPLEX;

wholesaleMarkupPharmacy 'Оптовая надбавка' (Sku sku, NUMERIC[16,4] price, DATE date) =  wholesaleMarkupPharmacy(pharmacyPriceGroup(sku), price, date) COMPLEX;
prevWholesaleMarkupPharmacy 'Оптовая надбавка (пред.)' (Sku sku, NUMERIC[16,4] price, DATE date) =  prevWholesaleMarkupPharmacy(pharmacyPriceGroup(sku), price, date);
wholesaleMarkupPharmacy 'Оптовая надбавка' (Batch batch, NUMERIC[16,4] price, DATE date) =  wholesaleMarkupPharmacy(sku(batch), price, date);

retailMarkupPharmacy 'Розничная надбавка' (Sku sku, NUMERIC[16,4] price, DATE date) =  retailMarkupPharmacy(pharmacyPriceGroup(sku), price, date);
retailMarkupPharmacy 'Розничная надбавка' (Batch batch, NUMERIC[16,4] price, DATE date) =  retailMarkupPharmacy(sku(batch), price, date);

isActive 'Действующий' (PharmacyPriceInterval interval) = 
    (toDatePharmacy(interval) >= currentDate() OR NOT toDatePharmacy(interval)) AND fromDatePharmacy(interval) <= currentDate();

FORM pharmacyMarkups 'Типы лекарственных средств'

    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) name, id SHOWIF showIDs(), namePharmacyTypeGroup
    PROPERTIES (g) ADDOBJ, DELETESESSION
    ORDER BY id(g)

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES fromDatePharmacy(i), toDatePharmacy(i), pricePharmacy(i),
               wholesaleMarkup(i), retailMarkup(i)
    PROPERTIES(i) ADDOBJ, DELETESESSION
    FILTERS    pharmacyGroupPharmacy(i)==g
    FILTERGROUP isActive
        FILTER 'Действующие' isActive(i) DEFAULT
    ORDER BY pricePharmacy(i)

    OBJECTS nu=NUMERIC[14,3] FIXED PANEL
    PROPERTIES val = OBJVALUE(nu)

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES value = OBJVALUE(t)
    PROPERTIES(g, nu, t) READONLY wholesaleMarkupPharmacy,retailMarkupPharmacy

;

DESIGN pharmacyMarkups {
    main {
        type = CONTAINERV;
        MOVE g.box;
        MOVE i.box;
        NEW test {
            caption = 'Тестовая форма';
            type = CONTAINERH;
            MOVE PROPERTY (value) {
                caption = 'Выберите дату';
                panelCaptionAbove = TRUE;
                font = 'bold 24';
            }
            MOVE PROPERTY (val) {
                caption = 'Введите цену в рублях';
                panelCaptionAbove = TRUE;
                font = 'bold 24';
            }

            MOVE PROPERTY (wholesaleMarkupPharmacy(g, nu, t)) {
                caption = 'Результат (оптовая надбавка)';
                panelCaptionAbove = TRUE;
                font = 'bold 24';
            }
            MOVE PROPERTY (retailMarkupPharmacy(g, nu, t)) {
                caption = 'Результат (розничная надбавка)';
                panelCaptionAbove = TRUE;
                font = 'bold 24';
            }
        }
        MOVE functions.box;
    }
}
FORM pharmacyPriceGroups 'Типы лекарственных средств'
    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) READONLY name, id SHOWIF showIDs()
    ORDER BY id(g)

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES READONLY fromDatePharmacy(i), toDatePharmacy(i), pricePharmacy(i),
               wholesaleMarkup(i), retailMarkup(i)
    FILTERS    pharmacyGroupPharmacy(i)==g
    ORDER BY pricePharmacy(i)

    DIALOG PharmacyPriceGroup OBJECT g
;

DESIGN pharmacyPriceGroups {
    main {
        preferredSize = (1024, 768);
    }
}

NAVIGATOR {
    skuNavigator {
        ADD pharmacyMarkups;
    }
}

@defineUniteAttributeItemWithoutExtendForm(pharmacyPriceGroup, namePharmacyPriceGroup, 'тип лекарственного средства', 'типы лекарственных средств', item);
EXTEND FORM attributesItem
    OBJECTS pharmacyPriceGroup=PharmacyPriceGroup
    PROPERTIES in(pharmacyPriceGroup)       
    PROPERTIES (pharmacyPriceGroup) name, id SHOWIF showIDs(), namePharmacyTypeGroup
    PROPERTIES(pharmacyPriceGroup) ADDOBJ, DELETESESSION FORCE PANEL TOOLBAR        
    PROPERTIES replace(pharmacyPriceGroup) TODRAW pharmacyPriceGroup FORCE PANEL TOOLBAR        
    ORDER BY id(pharmacyPriceGroup)

    OBJECTS pharmacyPriceInterval=PharmacyPriceInterval
    PROPERTIES (pharmacyPriceInterval) fromDatePharmacy, toDatePharmacy, pricePharmacy,
                                       wholesaleMarkup, retailMarkup
    PROPERTIES(pharmacyPriceInterval) ADDOBJ, DELETESESSION
    FILTERS    pharmacyGroupPharmacy(pharmacyPriceInterval)==pharmacyPriceGroup
    ORDER BY pricePharmacy(pharmacyPriceInterval)

    OBJECTS numeric=NUMERIC[14,3] FIXED PANEL
    PROPERTIES val = OBJVALUE(numeric)

    OBJECTS date=DATE FIXED PANEL
    PROPERTIES value = OBJVALUE(date)
    PROPERTIES(pharmacyPriceGroup, numeric, date) READONLY wholesaleMarkupPharmacy,retailMarkupPharmacy
;

DESIGN attributesItem{
    tabContainer{
        NEW pharmacyPriceGroupContainer{
            caption = 'Типы лекарственных средств';
            MOVE pharmacyPriceGroup.box;
            MOVE pharmacyPriceInterval.box;
            NEW test {
                caption = 'Тестовая форма';
                type = CONTAINERH;
                MOVE PROPERTY (value) {
                    caption = 'Выберите дату';
                    panelCaptionAbove = TRUE;
                    font = 'bold 24';
                }
                MOVE PROPERTY (val) {
                    caption = 'Введите цену в рублях';
                    panelCaptionAbove = TRUE;
                    font = 'bold 24';
                }
    
                MOVE PROPERTY (wholesaleMarkupPharmacy(pharmacyPriceGroup, numeric, date)) {
                    caption = 'Результат (оптовая надбавка)';
                    panelCaptionAbove = TRUE;
                    font = 'bold 24';
                }
                MOVE PROPERTY (retailMarkupPharmacy(pharmacyPriceGroup, numeric, date)) {
                    caption = 'Результат (розничная надбавка)';
                    panelCaptionAbove = TRUE;
                    font = 'bold 24';
                }
            }
        }
    }
}

//---------------- специальный тип цены (опт)-----------------//

CLASS WholesalePharmacyPriceListType 'Оптовая цена на медтовары' : PriceListType;

name 'Наименование' = DATA VARISTRING[50](WholesalePharmacyPriceListType);
name(WholesalePharmacyPriceListType type) += name(type) IF type IS WholesalePharmacyPriceListType;

calcPriceListType = DATA CalcPriceListType (WholesalePharmacyPriceListType);
nameCalcPriceListType 'Вид цены с основной наценкой' (WholesalePharmacyPriceListType type) = name[PriceListType](calcPriceListType(type));

ledgerPriceListType(WholesalePharmacyPriceListType type) = basePriceListType(calcPriceListType(type)) AS LedgerPriceListType PERSISTENT INDEXED; //DATA LedgerPriceListType (WholesalePharmacyPriceListType);

ledgerPriceListType(WholesalePharmacyPriceListType type) += ledgerPriceListType(type);

@defineDocumentHeaderCurrency(wholesalePharmacyPriceListType);
currency(WholesalePharmacyPriceListType pharmacyPriceListType) += currency(pharmacyPriceListType);

// -------------------- Старый механизм расчета --------------------- //
//---цена товара
//markupWholesaleBPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    wholesaleMarkupPharmacySkuPriceDate(sku,
//                                        priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                                        DATE(dateTime));
//maxPriceWholesaleBPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//           priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//priceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceBCalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//
//
//markupWholesaleAPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    wholesaleMarkupPharmacySkuPriceDate(sku,
//                                        priceABasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                                        DATE(dateTime));
//maxPriceWholesaleAPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//           priceABasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//priceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceACalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;

//---цена партии
//markupWholesaleBPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    wholesaleMarkupPharmacyBatchPriceDate(batch,
//                                          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                                          DATE(dateTime));
//markupWholesaleAPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    wholesaleMarkupPharmacyBatchPriceDate(batch,
//                                          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                                          DATE(dateTime));
//
//maxPriceWholesaleBPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);
//maxPriceWholesaleAPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);
//
//priceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceBCalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)) COMPLEX;
//priceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceACalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)) COMPLEX;

// -------------------- Новый механизм расчета --------------------- //

limitMarkup(NUMERIC[16,4] price, CalcPriceListType type, Sku sku, DATE date) =
    MIN markup(type, sku),
        wholesaleMarkupPharmacy(sku, price, date);

limitPrice(NUMERIC[16,4] price, CalcPriceListType type, Sku sku, DATE date) =
    NUMERIC[16,4](trunc (round2(price) * (100 + limitMarkup(price, type, sku, date)) / 100.0, 2)) COMPLEX;

//---цена товара
priceWholesaleB(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceB(ledgerPriceListType(type), sku, stock, dateTime),
        calcPriceListType(type),
        sku,
        DATE(dateTime));

priceWholesaleA(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceA(ledgerPriceListType(type), sku, stock, dateTime),
        calcPriceListType(type),
        sku,
        DATE(dateTime));

priceB(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceWholesaleB(type, sku, stock, dateTime);
priceA(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceWholesaleA(type, sku, stock, dateTime);

//---цена партии
priceWholesaleB(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceB(ledgerPriceListType(type), batch, stock, dateTime),
        calcPriceListType(type),
        sku(batch),
        DATE(dateTime));

priceWholesaleA(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceA(ledgerPriceListType(type), batch, stock, dateTime),
        calcPriceListType(type),
        sku(batch),
        DATE(dateTime));

priceB(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceWholesaleB(type, batch, stock, dateTime);
priceA(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceWholesaleA(type, batch, stock, dateTime);

FORM wholesalePharmacyPriceListType 'Оптовая цена на медтовары'
    OBJECTS p = WholesalePharmacyPriceListType FIXED PANEL
    PROPERTIES(p) name, nameCurrency,
                  nameCalcPriceListType

    EDIT WholesalePharmacyPriceListType OBJECT p
;

DESIGN wholesalePharmacyPriceListType {
    p.box{
        MOVE PROPERTY(name(p));
        MOVE PROPERTY(nameCurrency(p));
        MOVE PROPERTY(nameCalcPriceListType(p));
    }
}

addWholesalePharmacyPriceListType 'Добавить опт.цену на медтовары' = ACTION ADDFORM WholesalePharmacyPriceListType;
edit 'Редактировать' = ACTION EDITFORM WholesalePharmacyPriceListType;
edit(WholesalePharmacyPriceListType priceListType) += ACTION edit(priceListType);

EXTEND FORM priceListTypes
    PROPERTIES() addWholesalePharmacyPriceListType TODRAW pt FORCE PANEL
;

////---------------- специальный тип цены (розница)-----------------//
//
//CLASS RetailPharmacyPriceListType 'Розничная цена на медтовары' : PriceListType;
//
//nameRetailPharmacyPriceListType 'Наименование' = DATA VARISTRING[50](RetailPharmacyPriceListType);
//namePriceListType(type) += nameRetailPharmacyPriceListType(type) IF type IS RetailPharmacyPriceListType;
//
//basePriceListTypeRetailPharmacyPriceListType(type) = DATA LedgerPriceListType (RetailPharmacyPriceListType);
//nameBasePriceListTypeRetailPharmacyPriceListType 'Базовый вид цены' (type) = nameBasePriceListType(basePriceListTypeRetailPharmacyPriceListType(type));
//
//ledgerPriceListTypePriceListType(type) += basePriceListTypeRetailPharmacyPriceListType(type) AS LedgerPriceListType;
//
//calcPriceListTypeRetailPharmacyPriceListType = DATA CalcPriceListType (RetailPharmacyPriceListType);
//nameCalcPriceListTypeRetailPharmacyPriceListType 'Вид цены с основной наценкой' (type) = namePriceListType(calcPriceListTypeRetailPharmacyPriceListType(type));
//
//@defineDocumentHeaderCurrency(retailPharmacyPriceListType);
//currencyPriceListType(pharmacyPriceListType) += currencyRetailPharmacyPriceListType(pharmacyPriceListType);
//
////---цена товара
//markupRetailBPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    retailMarkupPharmacySkuPriceDate(sku,
//                                     priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                                     DATE(dateTime));
//markupRetailAPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    retailMarkupPharmacySkuPriceDate(sku,
//                                     priceABasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                                     DATE(dateTime));
//
//maxPriceRetailBPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//          priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//maxPriceRetailAPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//          priceABasePriceListTypeSkuStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//
//priceRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceBCalcPriceListTypeSkuStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//priceRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceACalcPriceListTypeSkuStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//
//priceBPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceRetailBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
//priceAPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceRetailAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
//
////---цена партии
//markupRetailBPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    retailMarkupPharmacyBatchPriceDate(batch,
//                                       priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                                       DATE(dateTime));
//markupRetailAPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    retailMarkupPharmacyBatchPriceDate(batch,
//                                       priceABasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                                       DATE(dateTime));
//
//maxPriceRetailBPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime) / 100, 0);
//maxPriceRetailAPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime) / 100, 0);
//
//priceRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceBCalcPriceListTypeBatchStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));
//priceRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceACalcPriceListTypeBatchStockDateTime(calcPriceListTypeRetailPharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));
//
//priceBPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceRetailBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
//priceAPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceRetailAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
//
//FORM retailPharmacyPriceListType 'Розничная цена на медтовары'
//    OBJECTS p = RetailPharmacyPriceListType FIXED PANEL
//    PROPERTIES(p) nameRetailPharmacyPriceListType, nameCurrencyRetailPharmacyPriceListType,
//                  nameBasePriceListTypeRetailPharmacyPriceListType, nameCalcPriceListTypeRetailPharmacyPriceListType
//
//    EDIT RetailPharmacyPriceListType OBJECT p
//;
//
//DESIGN retailPharmacyPriceListType {
//    p.box {
//        ADD PROPERTY(nameRetailPharmacyPriceListType);
//        ADD PROPERTY(nameCurrencyRetailPharmacyPriceListType);
//        ADD PROPERTY(nameBasePriceListTypeRetailPharmacyPriceListType);
//        ADD PROPERTY(nameCalcPriceListTypeRetailPharmacyPriceListType);
//    }
//}
//
//addRetailPharmacyPriceListType 'Добавить розн.цену на медтовары' = ACTION ADDFORM RetailPharmacyPriceListType;
//editRetailPharmacyPriceListType 'Редактировать' = ACTION EDITFORM RetailPharmacyPriceListType;
//editPriceListType(priceListType) += ACTION editRetailPharmacyPriceListType(priceListType);
//
//EXTEND FORM priceListTypes
//    PROPERTIES() addRetailPharmacyPriceListType TODRAW pt FORCE PANEL
//;
// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultPharmacyPriceGroup 'Добавить Типы лекарственных средств'(VARISTRING[50] iname, VARSTRING[100] isid) = ACTION {
    FOR ADDOBJ g = PharmacyPriceGroup DO {
         ASSIGN name(g) <- iname;
         ASSIGN id(g) <- isid;
    }
}

loadDefaultPharmacyPriceInterval 'Добавить интервал цен лекарственного средства (by)'(VARSTRING[100] sidGroup, NUMERIC[16,4] priceFrom, NUMERIC[8,3] wMarkup, NUMERIC[8,3] rMarkup) = ACTION {
    FOR ADDOBJ i = PharmacyPriceInterval DO {
         ASSIGN pharmacyGroupPharmacy(i) <- pharmacyPriceGroup(sidGroup);
         ASSIGN pricePharmacy(i) <- priceFrom;
         ASSIGN fromDatePharmacy(i) <- 2013_01_01;
         ASSIGN wholesaleMarkup(i) <- wMarkup;
         ASSIGN retailMarkup(i) <- rMarkup;
    }
}


loadDefaultPharmacyPriceGroups 'Загрузить стандартные типы лек. ср-в и надбавки для них' () = ACTION {
    EXEC loadDefaultPharmacyPriceGroup('Лекарственные средства', 'by_1');
        EXEC loadDefaultPharmacyPriceInterval('by_1', 0.00, 11.00, 30.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 5.00, 10.00, 25.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 10.00, 9.00, 21.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 15.00, 8.00, 17.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 30.00, 7.00, 13.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 50.00, 4.00, 6.00);
        EXEC loadDefaultPharmacyPriceInterval('by_1', 100.00, 2.00, 2.00);

    EXEC loadDefaultPharmacyPriceGroup('Изделия медицинского назначения', 'by_2');
        EXEC loadDefaultPharmacyPriceInterval('by_2', 0.00, 13.00, 31.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 5.00, 10.00, 29.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 10.00, 9.00, 25.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 15.00, 8.00, 19.00);
        EXEC loadDefaultPharmacyPriceInterval('by_2', 50.00, 5.00, 9.00);

    EXEC loadDefaultPharmacyPriceGroup('Медицинская техника', 'by_3');
        EXEC loadDefaultPharmacyPriceInterval('by_3', 0.00, 22.00, 23.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 3000.00, 20.00, 20.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 10000.00, 10.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 50000.00, 8.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 500000.00, 5.00, 0.00);
        EXEC loadDefaultPharmacyPriceInterval('by_3', 1000000.00, 3.00, 0.00);

}IN loadDefault;

@implementLoadDefaultData(loadDefaultPharmacyPriceGroups);

