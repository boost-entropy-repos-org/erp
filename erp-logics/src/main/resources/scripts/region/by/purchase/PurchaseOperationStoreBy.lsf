MODULE PurchaseOperationStoreBy;

REQUIRE PricingOperation, PurchaseOperation, PurchaseShipment, PricingPurchase, PurchaseManufacturingPrice, 
        PurchaseCreditNote, PricingOperationBy, OperationBy;

NAMESPACE Purchase;

loadDefaultPurchaseOperation 'Добавить операция (закупка)'(VARISTRING[100] iname, VARISTRING[100] isid) = {
    NEW o = Operation {
        name(o) <- iname;
        id (o) <- isid;
        allRoles(o) <- TRUE;
    }
}

loadDefaultOPurchaseOperations 'Загрузить стандартные операции (закупка)' () = {  
                
    // 
    loadDefaultPurchaseOperation('Ввод начальных остатков','firstinput'); 
    FOR operation('firstinput') ==  Operation o DO {
        dataInSupplier(LegalEntityGroup g, o) <- TRUE WHERE  childNumber(g) AND NOT parent(g);  
        dataInCustomer(LegalEntityGroup g, o) <- TRUE WHERE  childNumber(g) AND NOT parent(g);  
        
        allSupplierStocks(o) <- TRUE;
        allCustomerStocks(o) <- TRUE;    
        
        createShipment(o) <- TRUE;    
        createPricing(o) <- TRUE;    
        pricingOperation(o) <- Pricing.operation('firstinput'); 
        
        showManufacturingPrice(o) <- TRUE;       
    
    }
    //
    loadDefaultPurchaseOperation('Поступление в магазин от поставщика','by_default_purchase_invoice');
    FOR operation('by_default_purchase_invoice') ==  Operation o DO {
        nameReturn(o) <- 'Возврат с магазина поставщику';
        needSupplier(o) <- TRUE;
        needCustomer(o) <- TRUE;
        needSupplierStock(o) <- TRUE;
        needCustomerStock(o) <- TRUE;        
        
        dataInSupplier(LegalEntityGroup g, o) <- TRUE WHERE  legalEntityGroup('Поставщики') == g;  
        dataInCustomer(LegalEntityGroup g, o) <- TRUE WHERE  legalEntityGroup('Компании') == g;  
               
        allSupplierStocks(o) <- TRUE;
        allCustomerStocks(o) <- TRUE; 
           
        createShipment(o) <- TRUE;    
        createPricing(o) <- TRUE;            
        pricingOperation(o) <- Pricing.operation('by_default_pricing_purchase');         
        createCreditNote(o) <- TRUE;
        
        isPurchaseValueVAT(o) <- TRUE;
        showManufacturingPrice(o) <- TRUE;
        showPack(o) <- TRUE;
        isPrice(o) <- TRUE;
        isShipmentPrice(o) <- TRUE;
        banNegativeQuantityInvoice(o) <- TRUE;
        isCharLength(o) <- TRUE;        
        
        in(PriceListType t, o)<- TRUE WHERE t == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
        in(PriceListType t, o)<- TRUE WHERE t == dataPriceListType('supplier');
        defaultPriceListType(o) <- dataPriceListType('supplier');
        defaultReturnPriceListType(o) <- SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
    }  
    //  
    loadDefaultPurchaseOperation('Поступление на магазин от склада','warehouse');  
    FOR operation('warehouse') ==  Operation o DO {
        nameReturn(o) <- 'Возврат с магазина на склад';
        needSupplier(o) <- TRUE;
        needCustomer(o) <- TRUE;
        needSupplierStock(o) <- TRUE;
        needCustomerStock(o) <- TRUE;        
        
        dataInSupplier(LegalEntityGroup g, o) <- TRUE WHERE  legalEntityGroup('Компании') == g;  
        dataInCustomer(LegalEntityGroup g, o) <- TRUE WHERE  legalEntityGroup('Компании') == g;  
               
        allSupplierStocks(o) <- TRUE;
        allCustomerStocks(o) <- TRUE; 
           
        createShipment(o) <- TRUE;    
        createPricing(o) <- TRUE;            
        pricingOperation(o) <- Pricing.operation('by_default_pricing_purchase'); 
        showManufacturingPrice(o) <- TRUE;
        createCreditNote(o) <- TRUE;
        isPurchaseValueVAT(o) <- TRUE;
        
        in(PriceListType t, o)<- TRUE WHERE t == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
        in(PriceListType t, o)<- TRUE WHERE t == dataPriceListType('supplier');
        defaultPriceListType(o) <- dataPriceListType('supplier');
        defaultReturnPriceListType(o) <- SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
    }
    
} IN loadDefault;
    
loadDefaultOperations () += { loadDefaultOPurchaseOperations(); }
