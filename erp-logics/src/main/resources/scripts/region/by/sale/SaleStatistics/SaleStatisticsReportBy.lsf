MODULE SaleStatisticsReportBy;

REQUIRE SaleStatistics;

NAMESPACE Sale;


////////////////////// Тип отчета ////////////////////////////

CLASS StatisticReportType 'Тип статистического отчета';
CLASS StatisticReportTypeDetail 'Строка типа статистического отчета';

name 'Наименование' = DATA VARISTRING[255] (StatisticReportType) MINCHARWIDTH 20 PREFCHARWIDTH 30 IN documentPrm;
@defineDocument(statisticReportType);
@deriveDocumentHeaderTimePrefix(StatisticReportType, );


@deriveDocumentHeaderTimePrefix(StatisticReportType, );

statisticGroupType = DATA StatisticGroupType (StatisticReportType) AUTOSET NOT NULL DELETE;
nameStatisticGroupType 'Тип классификатора' = name(statisticGroupType(StatisticReportType r)) IN documentPrm;

isSumReport 'Сумовой отчет' = DATA BOOLEAN (StatisticReportType) IN documentPrm;
notSumReport = StatisticReportType r IS StatisticReportType AND NOT isSumReport(r);
rate 'Кратность для отчета'  = DATA NUMERIC[15,4] (StatisticReportType) IN documentPrm;

//------------------------------ Строки -------------------------------//

name 'Наименование' = DATA VARISTRING[255] (StatisticReportTypeDetail);
nameUOM 'Ед. изм.' = DATA VARISTRING[100] (StatisticReportTypeDetail);
isInteger 'Целое' = DATA BOOLEAN (StatisticReportTypeDetail);

statisticGroup  = DATA StatisticGroup (StatisticReportTypeDetail);
nameStatisticGroup 'Наименование группы' = name(statisticGroup(StatisticReportTypeDetail d));
sidStatisticGroup 'Код группы' = sid(statisticGroup(StatisticReportTypeDetail d));

CONSTRAINT statisticGroup(StatisticReportTypeDetail d) AND statisticGroupType(statisticReportType(d)) 
    AND NOT groupType(statisticGroup(d)) == statisticGroupType(statisticReportType(d))
    CHECKED BY statisticGroup[StatisticReportTypeDetail]
    MESSAGE 'Для строки типа статистического отчета выбрана группа, которая не соответствует выбранному классификатору.';

number 'Код строки' = DATA STRING[10] (StatisticReportTypeDetail);    

FORM statisticReportType 'Тип статистического отчета'

    OBJECTS r = StatisticReportType FIXED PANEL
    PROPERTIES (r) name, note,  nameStatisticGroupType, isSumReport, rate SHOWIF isSumReport(r)
                
    PROPERTIES (r) countStatisticReportTypeDetail

    OBJECTS d = StatisticReportTypeDetail
    PROPERTIES (d) index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, isInteger
                
    PROPERTIES (d) ADDOBJ, deleteid=DELETESESSION    
    
    ORDER BY index(d)

    PROPERTIES(r) TODRAW d deleteStatisticReportTypeDetail
    
    FILTERS statisticReportType(d) == r

    EDIT StatisticReportType OBJECT r
;

DESIGN statisticReportType {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;

            MOVE r.documentPrm {
               columns = 2;
            }
            MOVE r.documentSum {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }
        MOVE functions.box;
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}

FORM statisticReportTypes 'Типы статистических отчетов'

    OBJECTS r = StatisticReportType 
    PROPERTIES (r) READONLY name, nameStatisticGroupType, note, isSumReport
                
    PROPERTIES (r) READONLY countStatisticReportTypeDetail
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
    PROPERTIES (r) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer 
        
    OBJECTS d = StatisticReportTypeDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, isInteger 
    ORDER BY index(d)

    FILTERS statisticReportType(d) == r
                
    DIALOG StatisticReportType OBJECT r
;
DESIGN statisticReportTypes {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deleter) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            fill = 1;

            type = SPLITV;
            MOVE r.box;    

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE r.created;                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}



//////////////////////Отчет ////////////////////////////

CLASS StatisticReport 'Статистический отчет';
CLASS StatisticReportDetail 'Строка статистического отчета';

name 'Наименование' = DATA VARISTRING[255] (StatisticReport) MINCHARWIDTH 20 PREFCHARWIDTH 30;
@defineDocument(statisticReport);
@deriveDocumentHeaderTimePrefix(StatisticReport, );


@deriveDocumentHeaderTimePrefix(StatisticReport, );
@defineDocumentHeaderNumber(StatisticReport);
@defineNumeratedDefault(StatisticReport, 'Статистический отчет', 'СО');
@defineDocumentHeaderDescription (StatisticReport, 'Статистический отчет');

fromDate 'Дата с' = DATA DATE (StatisticReport) IN documentHeader;
toDate 'Дата по' = DATA DATE (StatisticReport) IN documentHeader;

fromDate 'Дата с' = fromDate(statisticReport(StatisticReportDetail d));
toDate 'Дата по' = toDate(statisticReport(StatisticReportDetail d));

startTime 'Время начала формирования' = DATA DATETIME (StatisticReport) IN created;
finishTime 'Время окончания формирования' = DATA DATETIME (StatisticReport) IN created;

WHEN SESSION SET(StatisticReport o IS StatisticReport) DO {
    IF o IS StatisticReport AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS StatisticReport AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

statisticGroupType = DATA StatisticGroupType (StatisticReport) AUTOSET NOT NULL DELETE;
nameStatisticGroupType 'Тип классификатора' = name(statisticGroupType(StatisticReport r)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 30;

statisticReportType = DATA StatisticReportType (StatisticReport);
nameStatisticReportType 'Тип отчета' = name(statisticReportType(StatisticReport r));

@defineDocumentDataStock(statisticReport, stock, 'Склад', );
@defineDocumentDialogStocks(statisticReport, stock, company, , );

@defineDocumentLegalEntity(statisticReport, company, 'Организация');
@defineDocumentDialogLegalEntity(statisticReport, company, company);

CLASS ReportKind 'Вид отчета' {
    stock 'Отчет по складу',
    region 'Отчет по региону',
    consolidate 'Объединенный'
}

FORM reportKinds 'Виды отчета'
    OBJECTS k = ReportKind
    PROPERTIES(k) READONLY staticCaption
    FILTERS k != ReportKind.consolidate
    DIALOG ReportKind OBJECT k
;

DESIGN reportKinds {
    PROPERTY(staticCaption(k)) { caption = 'Наименование'; } 
}

rate 'Кратность для отчета' (StatisticReport r) = rate(statisticReportType(r));

isThing(StatisticReport r) = notSumReport(statisticReportType(r));
isSum(StatisticReport r) = isSumReport(statisticReportType(r));

reportKind = DATA ReportKind (StatisticReport);
nameReportKind 'Вид отчета'(StatisticReport r) = staticCaption(reportKind(r));

isStock(StatisticReport r) = reportKind(r) == ReportKind.stock;
isStockThing(StatisticReport r) = isStock(r) AND notSumReport(statisticReportType(r));
isStockSum(StatisticReport r) = isStock(r) AND isSumReport(statisticReportType(r));

isRegion(StatisticReport r) = reportKind(r) == ReportKind.region;
isRegionThing(StatisticReport r) = isRegion(r) AND notSumReport(statisticReportType(r));
isRegionSum(StatisticReport r) = isRegion(r) AND isSumReport(statisticReportType(r));

isConsolidate(StatisticReport r) = reportKind(r) == ReportKind.consolidate;
notConsolidate(StatisticReport r) = reportKind(r) != ReportKind.consolidate;

WHEN SESSION SET ( StatisticReport r IS StatisticReport) AND NOT reportKind(r) DO {
    reportKind(r) <- ReportKind.stock;
}

WHEN SESSION SETCHANGED ( reportKind(StatisticReport r)) AND NOT company(r) AND isRegion(r) DO {
    company(r) <- defaultCompany();
}

region = DATA Region (StatisticReport);
nameRegion 'Регион' (StatisticReport r) = name(region(r));
consolidateStocks 'Склады/Регионы' = DATA VARSTRING[255](StatisticReport);

nameStockRegion 'Склад/Регион' (StatisticReport r) = CASE 
    WHEN isStock(r) THEN nameStock(r) 
    WHEN isRegion(r) THEN nameRegion(r)
    WHEN isConsolidate(r) THEN consolidateStocks(r);
//------------------------------ Строки -------------------------------//

name 'Наименование' = DATA VARISTRING[255] (StatisticReportDetail);
nameUOM 'Ед. изм.' = DATA VARISTRING[100] (StatisticReportDetail);
isInteger 'Целое' = DATA BOOLEAN (StatisticReportDetail);
number 'Код строки' = DATA STRING[10] (StatisticReportDetail);

statisticGroup  = DATA StatisticGroup (StatisticReportDetail);
nameStatisticGroup 'Наименование группы' = name(statisticGroup(StatisticReportDetail d));
sidStatisticGroup 'Код группы' = sid(statisticGroup(StatisticReportDetail d));

CONSTRAINT statisticGroup(StatisticReportDetail d) AND statisticGroupType(statisticReport(d)) 
    AND NOT groupType(statisticGroup(d)) == statisticGroupType(statisticReport(d))
    CHECKED BY statisticGroup[StatisticReportDetail]
    MESSAGE 'Для строки статистического отчета выбрана группа, которая не соответствует выбранному классификатору.';
    
sold 'Продано всего' = DATA NUMERIC[16,2] (StatisticReportDetail);
soldResident 'Продано отечественного' = DATA NUMERIC[16,2] (StatisticReportDetail);
balance 'Запас всего' = DATA NUMERIC[16,2] (StatisticReportDetail);
balanceResident 'Запас отечественного' = DATA NUMERIC[16,2] (StatisticReportDetail);

soldSum 'Продано всего' = DATA NUMERIC[16,2] (StatisticReportDetail);
soldSumResident 'Продано отечественного' = DATA NUMERIC[16,2] (StatisticReportDetail);
balanceSum 'Запас всего' = DATA NUMERIC[16,2] (StatisticReportDetail);

fillData 'Заполнить данные'(StatisticReport report) = ACTION {
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        Stock st == stock(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) NOINLINE DO { 
    
        sold(d) <- NUMERIC[16,2](valueBy(s, st, dFrom, dTo));
        soldResident(d) <- NUMERIC[16,2](valueResidentBy(s, st, dFrom, dTo));
        balance(d) <- NUMERIC[16,2](valueByTo(s, st, dTo));
        balanceResident(d) <- NUMERIC[16,2](valueResidentByTo(s, st, dTo));
    }                                                                                                                                                  
    
    sold(StatisticReportDetail d) <- INTEGER(sold(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- INTEGER(soldResident(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- INTEGER(balance(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- INTEGER(balanceResident(d)) WHERE isInteger(d) AND statisticReport(d) == report;
}

fillRegionData 'Заполнить данные'(StatisticReport report) = ACTION {
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        LegalEntity c == company(report) AND Region r == region(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) 
        NOINLINE DO {
    
        sold(d) <- NUMERIC[16,2](valueBy(s, c, r, dFrom, dTo));
        soldResident(d) <- NUMERIC[16,2](valueResidentBy(s, c, r, dFrom, dTo));
        balance(d) <- NUMERIC[16,2](valueByTo(s, c, r, dTo));
        balanceResident(d) <- NUMERIC[16,2](valueResidentByTo(s, c, r, dTo));

    }
                                                                                                                                                      
    sold(StatisticReportDetail d) <- INTEGER(sold(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- INTEGER(soldResident(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- INTEGER(balance(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- INTEGER(balanceResident(d)) WHERE isInteger(d) AND statisticReport(d) == report;
}
//суммы
fillSumData 'Заполнить данные'(StatisticReport report) = ACTION {
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        Stock st == stock(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) NOINLINE DO { 
    
        soldSum(d) <- NUMERIC[16,2](totalSumSoldBy(s, st, dFrom, dTo));
        soldSumResident(d) <- NUMERIC[16,2](totalSumResidentSoldBy(s, st, dFrom, dTo));
        balanceSum(d) <- NUMERIC[16,2](sumBalanceABy(s, st, dTo));
    }                                                                                                                  
    
    soldSum(StatisticReportDetail d) <- NUMERIC[16,2](soldSum(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NUMERIC[16,2](soldSumResident(d)/ rate(report)) WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NUMERIC[16,2](balanceSum(d)/ rate(report)) WHERE statisticReport(d) == report;                           
    
    soldSum(StatisticReportDetail d) <- INTEGER(soldSum(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- INTEGER(soldSumResident(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- INTEGER(balanceSum(d)) WHERE isInteger(d) AND statisticReport(d) == report;
}

fillSumRegionData 'Заполнить данные'(StatisticReport report) = ACTION {
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        LegalEntity c == company(report) AND Region r == region(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) 
        NOINLINE DO {
    
        soldSum(d) <- NUMERIC[16,2](totalSumSoldBy(s, c, r, dFrom, dTo));
        soldSumResident(d) <- NUMERIC[16,2](totalSumResidentSoldBy(s, c, r, dFrom, dTo));
        balanceSum(d) <- NUMERIC[16,2](sumBalanceABy(s, c, r, dTo));
    }

    soldSum(StatisticReportDetail d) <- NUMERIC[16,2](soldSum(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NUMERIC[16,2](soldSumResident(d)/ rate(report)) WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NUMERIC[16,2](balanceSum(d)/ rate(report)) WHERE statisticReport(d) == report;                                                                                                         
   
    soldSum(StatisticReportDetail d) <- INTEGER(soldSum(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- INTEGER(soldSumResident(d)) WHERE isInteger(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- INTEGER(balanceSum(d)) WHERE isInteger(d) AND statisticReport(d) == report;
}


changeStatisticReportType (StatisticReport r) = ACTION {
    FORM statisticReportTypes DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN { 
        statisticReportType(r) <- chosenObject('r');
        name(r) <- name(statisticReportType(r));
        statisticGroupType(r) <- statisticGroupType(statisticReportType(r));     
        DELETE StatisticReportDetail d WHERE statisticReport(d) ==r;
        
        FOR statisticReportType(r) == statisticReportType(StatisticReportTypeDetail detail) ADDOBJ d = StatisticReportDetail DO {
            statisticReport(d) <-r;
            index(d) <- index(detail);
            number(d) <-number(detail);
            name(d) <- name(detail);
            statisticGroup(d) <- statisticGroup(detail);
            nameUOM(d) <- nameUOM(detail);
            isInteger(d) <- isInteger(detail);            
        }               
    }
}

FORM statisticReport 'Статистический отчет'

    OBJECTS r = StatisticReport FIXED PANEL
    PROPERTIES (r) name, nameReportKind READONLYIF isConsolidate(r), 
                nameStock SHOWIF isStock(r) ON CHANGE changeStockCompany(r),  
                nameCompany SHOWIF isRegion(r),
                nameRegion SHOWIF isRegion(r), 
                consolidateStocks SHOWIF isConsolidate(r) READONLY,
                nameStatisticReportType ON CHANGE changeStatisticReportType(r) READONLYIF isConsolidate(r),
                nameNumerator, number, series, date, time,
                note, fromDate, toDate, nameStatisticGroupType               
                
    PROPERTIES (r) countStatisticReportDetail

    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, isInteger
    PROPERTIES (d) SHOWIF isThing(r) sold, soldResident, balance, balanceResident  
    PROPERTIES (d) SHOWIF isSum(r) soldSum, soldSumResident, balanceSum
                
    PROPERTIES (d) ADDOBJ, deleteid=DELETESESSION
    
    PROPERTIES(r) fillData FORCE PANEL TOOLBAR TODRAW d SHOWIF isStockThing(r) ,
                fillRegionData FORCE PANEL TOOLBAR TODRAW d SHOWIF isRegionThing(r),
                fillSumData FORCE PANEL TOOLBAR TODRAW d SHOWIF isStockSum(r) ,
                fillSumRegionData FORCE PANEL TOOLBAR TODRAW d SHOWIF isRegionSum(r)
    
    ORDER BY index(d)

    PROPERTIES(r) TODRAW d deleteStatisticReportDetail
    
    FILTERS statisticReport(d) == r

    EDIT StatisticReport OBJECT r
;

DESIGN statisticReport {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;
            PROPERTY (index(d)) {caption ='Порядок';}
            NEW headerParams {
                fill = 1;
                type = CONTAINERV;
                MOVE r.documentHeader {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(nameStatisticReportType(r));
                        MOVE PROPERTY(nameReportKind(r));
                        MOVE PROPERTY(nameCompany(r));
                        MOVE PROPERTY(nameStock(r));
                        MOVE PROPERTY(nameRegion(r));
                        MOVE PROPERTY(consolidateStocks(r));
                        MOVE PROPERTY(fromDate(r));
                        MOVE PROPERTY(toDate(r));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(name(r));
                        MOVE PROPERTY(nameNumerator(r));
                        MOVE PROPERTY(number(r));
                        MOVE PROPERTY(series(r));
                        MOVE PROPERTY(date(r));
                        MOVE PROPERTY(time(r));
                    }   

                                                                                                                   
                }
                MOVE r.documentPrm;
            }
            MOVE r.documentSum {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }
        MOVE functions.box;

    }
}

fromMonth = extractMonthName(fromDate(StatisticReport r));
toMonth = extractMonthName(toDate(StatisticReport r));

FORM statisticReportPrint '4-торг (продажа)'

    OBJECTS r = StatisticReport FIXED PANEL 
    PROPERTIES (r) READONLY name, nameStock,  fullNameLegalEntityStock, 
                   addressLegalEntityStock, addressStock,
                   note, fromDate, toDate,   
                   fromMonth, toMonth
                
    PROPERTIES (r) READONLY countStatisticReportDetail
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
    PROPERTIES (r) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer 
        
    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, isInteger, 
                   sold, soldResident, balance, balanceResident 
    ORDER BY index(d)

    FILTERS statisticReport(d) == r
;
statisticPrint '4-торг (продажа)' (StatisticReport r) = ACTION FORM statisticReportPrint OBJECTS r =r PRINT  IMAGE 'print.png' IN print;   
excelPrint '4-торг (продажа) (xls)' (StatisticReport r) = ACTION FORM statisticReportPrint OBJECTS r =r PRINT XLSX  IMAGE 'print.png' IN print;   

in 'Отм' = DATA LOCAL NESTED BOOLEAN (StatisticReport);

balance = GROUP LAST balance(StatisticReportDetail d) 
    BY stock(d), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
balance  = GROUP LAST balance(StatisticReportDetail d) 
    BY region(statisticReport(d)), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
    
balanceResident = GROUP LAST balanceResident(StatisticReportDetail d) 
    BY stock(d), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
balanceResident  = GROUP LAST balanceResident(StatisticReportDetail d) 
    BY region(statisticReport(d)), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;


createSumReport 'Создать суммарный отчет'()= ACTION NEWSESSION {
    IF [=GROUP SUM 1 IF [=GROUP SUM 1 IF in(StatisticReport r) BY statisticReportType(r) ](StatisticReportType str)]() > 1 THEN {
        MESSAGE 'Выбраны отчеты разных типов';
        RETURN;
    }
    IF [=GROUP SUM 1 IF [=GROUP SUM 1 IF in(StatisticReport r) BY reportKind(r) ](ReportKind str)]() > 1 THEN {
        MESSAGE 'Выбраны отчеты разных видов';
        RETURN;
    }
    IF NOT [=GROUP SUM 1 IF in(StatisticReport r)]() THEN {
        MESSAGE 'Не выбраны отчеты для объединения';
        RETURN;
    }
    FOR ADDOBJ s = StatisticReport DO {
        statisticReportType(s) <- [=GROUP MAX statisticReportType(StatisticReport r) IF in(r) ]();
        reportKind(s) <- ReportKind.consolidate;
        consolidateStocks(s) <- OVERRIDE [=GROUP CONCAT [=GROUP MAX nameStockRegion(StatisticReport r) IF in(r) BY nameStockRegion(r) ](VARISTRING[255] str), ',']();
        fromDate(s) <- [= GROUP MIN fromDate(StatisticReport r) IF in(r)]();
        toDate(s) <- [= GROUP MAX toDate(StatisticReport r) IF in(r)]();
        name(s) <- 'Суммарный отчет ' + name(statisticReportType(s));
        statisticGroupType(s) <- statisticGroupType(statisticReportType(s));     
        
        FOR statisticReportType(s) == statisticReportType(StatisticReportTypeDetail detail) ADDOBJ d = StatisticReportDetail DO {
            statisticReport(d) <-s;
            index(d) <- index(detail);
            number(d) <-number(detail);
            name(d) <- name(detail);
            statisticGroup(d) <- statisticGroup(detail);
            nameUOM(d) <- nameUOM(detail);
            isInteger(d) <- isInteger(detail);
            
            sold(d) <- [=GROUP SUM sold(StatisticReportDetail d) IF in(statisticReport(d)) BY statisticGroup(d)](statisticGroup(d));
            soldResident(d) <- [=GROUP SUM soldResident(StatisticReportDetail d) IF in(statisticReport(d)) BY statisticGroup(d)](statisticGroup(d));
            balance(d) <- IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.stock THEN [= GROUP SUM balance(Stock s,StatisticGroup sg) BY sg](statisticGroup(d))
                ELSE IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.region THEN [= GROUP SUM balance(Region s,StatisticGroup sg) BY sg](statisticGroup(d));
            balanceResident(d) <- IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.stock THEN [= GROUP SUM balanceResident(Stock s,StatisticGroup sg) BY sg](statisticGroup(d))
                ELSE IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.region THEN [= GROUP SUM balanceResident(Region s,StatisticGroup sg) BY sg](statisticGroup(d));
        }
        FORM statisticReport OBJECTS r = s MANAGESESSION DOCKEDMODAL;
    }
    in(StatisticReport r) <- NULL;
}

FORM statisticReports 'Статистические отчеты'

    OBJECTS r = StatisticReport 
    PROPERTIES (r) in
    PROPERTIES (r) READONLY name, nameStockRegion, 
                   number, series, date, time,
                   note, fromDate, toDate, nameStatisticGroupType   

    PROPERTIES (r) READONLY countStatisticReportDetail
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
    PROPERTIES (r) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer 
    PROPERTIES createSumReport()
        
    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, isInteger, 
                   sold, soldResident, balance, balanceResident 
    ORDER BY index(d)
    PROPERTIES FORCE PANEL statisticPrint(r), excelPrint(r) 
    FILTERS statisticReport(d) == r
                
    DIALOG StatisticReport OBJECT r
;
DESIGN statisticReports {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deleter) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            fill = 1;

            type = SPLITV;
            MOVE r.box;    

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE r.created;                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                        MOVE r.print;
                    }
                }
                NEW action {
                    caption = 'Действия';
                    MOVE PROPERTY (createSumReport());
                }
            }
        }
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}

NAVIGATOR {
    statisticsNavigator {
        NEW statisticsReports 'Отчеты' {
            ADD statisticReportTypes;
            ADD statisticReports;        
        }

    }    
}

