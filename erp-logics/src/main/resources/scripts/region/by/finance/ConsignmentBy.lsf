MODULE ConsignmentBy;

REQUIRE System,
        LegalEntityBy,
        Stock,
        Sku,
        Employee,
        Utils,
        Transport,
        Numerator,
        StockContract,
        SkuLedger; // вот эту зависимость нужно будет убрать

NAMESPACE Consignment;

CLASS WayOfLoading 'Способ ПРР';
TABLE wayOfLoading (WayOfLoading);

name 'Наименование' = DATA VARISTRING[50](WayOfLoading) IN base;

FORM wayOfLoading 'Способ ПРР'
    OBJECTS w = WayOfLoading FIXED PANEL 
    PROPERTIES(w) name
    EDIT WayOfLoading OBJECT w
;

FORM dialogWayOfLoading 'Способ ПРР'
    OBJECTS w = WayOfLoading
    PROPERTIES(w) name READONLY, DELETESESSION
    PROPERTIES(w) ADDFORM, EDITFORM
    DIALOG WayOfLoading OBJECT w
;

GROUP sumConsignment 'Суммы' : base;

CLASS ABSTRACT Consignment 'Накладная';
TABLE consignment(Consignment);

CLASS ABSTRACT ConsignmentDetail 'Строка накладной';

dataDate 'Дата' (consignment) = ABSTRACT DATE (Consignment);
overDate 'Дата' (consignment) = ABSTRACT DATE (Consignment);
date 'Дата' (Consignment consignment) = OVERRIDE dataDate(consignment), overDate(consignment);


number 'Номер' = ABSTRACT VARSTRING[28] (Consignment) IN numbered MINCHARWIDTH 7;
series 'Серия' = ABSTRACT STRING[2] (Consignment) IN numbered FIXEDCHARWIDTH 3; 

overSeriesNumber 'Серия/Номер' (consignment) = ABSTRACT STRING[31] (Consignment);

seriesNumber 'Серия/Номер' (Consignment o) = OVERRIDE 
    (CONCAT '', series(o), number(o)),
    overSeriesNumber(o)  MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20;


// ------------- Типы накладной ------------------ //
CLASS ConsignmentType 'Тип накладной' {
    ttn1 'ТТН-1',
    tn2 'ТН-2'
}


FORM consignmentTypes 'Типы накладной'
    OBJECTS t = ConsignmentType
    PROPERTIES(t) READONLY staticCaption
    DIALOG ConsignmentType OBJECT t
;

DESIGN consignmentTypes {
    PROPERTY(staticCaption(t)) { caption = 'Тип накладной'; } 
}

TABLE consignmentType (ConsignmentType);

consignmentType 'Тип накладной' = ABSTRACT ConsignmentType (Consignment);
showTTN1 (Consignment c) = consignmentType(c) == ConsignmentType.ttn1 OR NOT consignmentType(c);   
showTN2 (Consignment c) = consignmentType(c) == ConsignmentType.tn2 OR NOT consignmentType(c);   

isTTN1 (Consignment c) = consignmentType(c) == ConsignmentType.ttn1;   
isTN2 (Consignment c) = consignmentType(c) == ConsignmentType.tn2;   

banPrint 'Запрет печати' = ABSTRACT CASE BOOLEAN (Consignment);

// ---------------------------------- Юридические лица ---------------------- //

countRowsSimpleVertical 'Макс. кол-во строк в бланке (ТН-2 вер.)' = DATA INTEGER ();
countRowsSimpleHorizontal 'Макс. кол-во строк в бланке (ТН-2 гор.)' = DATA INTEGER ();
countRowsVerticalA 'Макс. кол-во строк в бланке (ТТН-1 вер.А)' = DATA INTEGER ();
countRowsVerticalAB 'Макс. кол-во строк в бланке (ТТН-1 вер.А/Б)' = DATA INTEGER ();
countRowsHorizontal 'Макс. кол-во строк в бланке (ТТН-1 гор.А)' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES() countRowsSimpleVertical, countRowsSimpleHorizontal, countRowsVerticalA, countRowsVerticalAB, countRowsHorizontal

;

DESIGN options {
    pane {
        NEW consignment  {
            type = CONTAINERV;
            caption = 'Оформление ТТН';
            MOVE PROPERTY(countRowsSimpleVertical());
            MOVE PROPERTY(countRowsSimpleHorizontal());
            MOVE PROPERTY(countRowsVerticalA());
            MOVE PROPERTY(countRowsVerticalAB());
            MOVE PROPERTY(countRowsHorizontal());
        }

    }
}

// ---------------------------------- Юридические лица ---------------------- //
dataSupplier = ABSTRACT LegalEntity (Consignment);
overSupplier = ABSTRACT LegalEntity (Consignment);
supplier (Consignment consignment)= OVERRIDE dataSupplier(consignment), overSupplier(consignment);

UNPSupplier 'УНП отправителя' (Consignment consignment) = UNP(supplier(consignment));
overAddressSupplier = ABSTRACT VARISTRING[150] (Consignment);
addressSupplier 'Юр. адрес отправителя' (Consignment consignment) =
    OVERRIDE address(supplier(consignment), date(consignment)), overAddressSupplier(consignment) MINCHARWIDTH 30 PREFCHARWIDTH 50;
overFullNameSupplier = ABSTRACT VARISTRING[200] (Consignment);  
fullNameSupplier 'Наим-ие отправителя' (Consignment consignment) = 
    OVERRIDE fullName(supplier(consignment)), overFullNameSupplier(consignment) MINCHARWIDTH 30 PREFCHARWIDTH 50;    
extraDescriptionSupplier = ABSTRACT VARISTRING[255] (Consignment);  

dataCustomer = ABSTRACT LegalEntity (Consignment);
overCustomer = ABSTRACT LegalEntity (Consignment);
customer (Consignment consignment)= OVERRIDE dataCustomer(consignment), overCustomer(consignment);

UNPCustomer 'УНП получателя' (Consignment consignment) = UNP(customer(consignment));
overAddressCustomer = ABSTRACT VARISTRING[150] (Consignment);
addressCustomer 'Юр. адрес получателя' (Consignment consignment) =
    OVERRIDE address(customer(consignment), date(consignment)), overAddressCustomer(consignment) MINCHARWIDTH 30 PREFCHARWIDTH 50;
nameCustomer 'Наим-ие получателя' (Consignment consignment) = name(customer(consignment)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
overFullNameCustomer = ABSTRACT VARISTRING[200] (Consignment);  
fullNameCustomer 'Наим-ие получателя' (Consignment consignment) = 
    OVERRIDE fullName(customer(consignment)), overFullNameCustomer(consignment) MINCHARWIDTH 30 PREFCHARWIDTH 50;
extraDescriptionCustomer = ABSTRACT VARISTRING[255] (Consignment);  

payer = ABSTRACT LegalEntity (Consignment);
UNPPayer 'УНП заказчика' (Consignment consignment) = UNP(payer(consignment));
addressPayer 'Юр. адрес заказчика' (Consignment consignment) =
    address(payer(consignment), date(consignment));
fullNamePayer 'Наим-ие заказчика' (Consignment consignment) =
    fullName(payer(consignment)) ;

// ------------------------------------- Атрибуты --------------------------------- //

GROUP carConsignment 'Автомобиль' : base;

defaultTruck = ABSTRACT CASE OVERRIDE FIRST Truck (Consignment);
dataTruck = ABSTRACT Truck(Consignment);
truck(Consignment consignment) = OVERRIDE defaultTruck(consignment), dataTruck(consignment);  

dataNameTruck = DATA VARSTRING[70](Consignment);
nameTruck 'Автомобиль' (Consignment consignment) = OVERRIDE name(truck(consignment)), dataNameTruck(consignment) IN carConsignment;
skipTruck 'Пропустить проверку автомобиля' = ABSTRACT CASE BOOLEAN (Consignment);

notUseDriverTruck = ABSTRACT BOOLEAN(Consignment);

changeTruck(Consignment consignment) = ACTION {
    
    IF notUseDriverTruck(consignment) THEN {
        REQUEST VARSTRING[70] INPUT;
        dataNameTruck(consignment) <- requestedString();
    } ELSE {
        REQUEST OBJECT t FORM trucks DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            dataTruck(consignment) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            dataTruck(consignment) <- NULL;
        }
    }        
}

CLASS OwnerTrackType 'Владелец автомобиля' {
    supplier 'Грузоотправитель',
    customer 'Грузополучатель'
}

FORM ownerTrackTypes 'Типы владельца автомобиля'
    OBJECTS t = OwnerTrackType
    PROPERTIES(t) READONLY staticCaption
    DIALOG OwnerTrackType OBJECT t
;

DESIGN ownerTrackTypes {
    PROPERTY(staticCaption(t)) { caption = 'Владелец автомобиля'; } 
}

TABLE ownerTrackType (OwnerTrackType);

ownerTrackType 'Владелец автомобиля' = ABSTRACT OwnerTrackType (Consignment);

dataOwnerTruck 'Владелец автомобиля' = DATA VARISTRING[200] (Consignment);

ownerTruck 'Владелец автомобиля' (Consignment consignment) = OVERRIDE  (CASE 
    WHEN supplier(consignment) == legalEntity(truck(consignment)) OR ownerTrackType(consignment) == OwnerTrackType.supplier THEN 'Грузоотправитель'
    WHEN customer(consignment) == legalEntity(truck(consignment)) OR ownerTrackType(consignment) == OwnerTrackType.customer THEN 'Грузополучатель'
    ELSE 
    OVERRIDE nameLegalEntity(truck(consignment)), owner(truck(consignment))), dataOwnerTruck(consignment)  IN carConsignment MINCHARWIDTH 15 PREFCHARWIDTH 30;

dataTrailer = ABSTRACT VARSTRING[100] (Consignment);
trailer 'Прицеп' (Consignment consignment) = OVERRIDE trailer(truck(consignment)),
                                                     dataTrailer(consignment) IN carConsignment;

driver = ABSTRACT CASE OVERRIDE FIRST Employee(Consignment);
dataEmployee = ABSTRACT Employee(Consignment);

dataNameDriver = DATA VARSTRING[30] (Consignment);
nameDriver 'Водитель' (Consignment consignment) = OVERRIDE shortName(driver(consignment)),
                                                          shortName(dataEmployee(consignment)), dataNameDriver(consignment) IN carConsignment;
skipDriver 'Пропустить проверку водителя' = ABSTRACT CASE BOOLEAN (Consignment);
                                                          
changeDriver(Consignment consignment) = ACTION {
    
    IF notUseDriverTruck(consignment) THEN {
        REQUEST VARSTRING[70] INPUT;
        dataNameDriver(consignment) <- requestedString();
    } ELSE {
        REQUEST OBJECT e FORM employees DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            dataEmployee(consignment) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            dataEmployee(consignment) <- NULL;
        }
    }
        
}

dataWaybill 'Путевой лист' (consignment) = ABSTRACT VARSTRING[20] (Consignment) IN carConsignment;

waybill 'Путевой лист' (consignment) = ABSTRACT STRING[30] (Consignment);

overWaybill 'Путевой лист' (Consignment consignment) = OVERRIDE waybill(consignment), dataWaybill(consignment) IN carConsignment;
skipWaybill 'Пропустить проверку путевого листа' = ABSTRACT CASE BOOLEAN (Consignment);

// Склад погрузки
supplierStock (consignment) = ABSTRACT Stock (Consignment);
nameSupplierStock 'Склад погрузки' (Consignment consignment) = name(supplierStock(consignment)) MINCHARWIDTH 30 PREFCHARWIDTH 30;

dataAddressSupplierStock 'Пункт погрузки' (consignment) = ABSTRACT VARSTRING[150] (Consignment);
addressSupplierStock 'Пункт погрузки' (Consignment consignment) = OVERRIDE address(supplierStock(consignment)),
                                                                          dataAddressSupplierStock (consignment) IN carConsignment;

// Склад разгрузки
customerStock (consignment) = ABSTRACT Stock (Consignment);
nameCustomerStock 'Склад разгрузки' (Consignment consignment) = name(customerStock(consignment)) MINCHARWIDTH 30 PREFCHARWIDTH 30;

dataAddressCustomerStock 'Пункт разгрузки' (consignment) = ABSTRACT VARSTRING[150] (Consignment) IN carConsignment;
addressCustomerStock 'Пункт разгрузки' (Consignment consignment) = OVERRIDE address(customerStock(consignment)),
                                                                           dataAddressCustomerStock (consignment) IN carConsignment;

readdressing 'Переадресовка' (consignment) = ABSTRACT VARSTRING[50] (Consignment) IN carConsignment;

// ------------------------------------- Отпуск товара --------------------------------- //

GROUP issuanceConsignment 'Отпуск' : base;

contract = ABSTRACT Contract (Consignment);
overDescription 'Описание' (Contract contract) = 'дог. '+ description(contract);

descriptionContract = overDescription(contract(Consignment consignment));

dataShipmentBase 'Основание отпуска' (consignment) = ABSTRACT VARSTRING[100] (Consignment);
overShipmentBase 'Основание отпуска' (consignment) = ABSTRACT VARSTRING[100] (Consignment);
shipmentBase 'Основание отпуска' (Consignment consignment) = OVERRIDE  VARSTRING[100](descriptionContract(consignment)),
                                                                      dataShipmentBase(consignment),
                                                                      overShipmentBase(consignment) IN issuanceConsignment MINCHARWIDTH 20 PREFCHARWIDTH 20;
notUseIssuanceAllowed 'Не использовать справочник сотрудников' = ABSTRACT BOOLEAN (Consignment);
dataIssuanceAllowed = DATA VARSTRING[100](Consignment);
overIssuanceAllowed (consignment) = DATA Employee (Consignment);
issuanceAllowed (consignment) = ABSTRACT Employee (Consignment);
nameIssuanceAllowed 'Отпуск разрешил' (Consignment consignment) = OVERRIDE positionShortName(overIssuanceAllowed(consignment)), // для агрегированных объектов (накладная на основании накладной)
                                                                                              positionShortName(issuanceAllowed(consignment)),
                                                                                              dataIssuanceAllowed(consignment) IN issuanceConsignment MINCHARWIDTH 20 PREFCHARWIDTH 20;
changeIssuanceAllowed(Consignment consignment) = ACTION {    
    IF notUseIssuanceAllowed(consignment) THEN {
        REQUEST VARSTRING[100] INPUT;
        dataIssuanceAllowed(consignment) <- requestedString();         
    } ELSE {
        REQUEST OBJECT e FORM employees DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            issuanceAllowed(consignment) <- requestedObject();
            IF NOT issuanceAllowed(consignment) THEN {
                overIssuanceAllowed(consignment) <- requestedObject();
            }
        } ELSE IF formResult() == FormResult.drop THEN {
            issuanceAllowed(consignment) <- NULL;
            overIssuanceAllowed(consignment) <- NULL;
        }
    }        
}
notUseIssuanceExecuted 'Не использовать справочник сотрудников' = ABSTRACT BOOLEAN (Consignment);
dataIssuanceExecuted = DATA VARSTRING[100](Consignment);
overIssuanceExecuted (consignment) = DATA Employee(Consignment);
issuanceExecuted (consignment) = ABSTRACT Employee(Consignment);
nameIssuanceExecuted 'Отпуск произвел' (Consignment consignment) = OVERRIDE  positionShortName(overIssuanceExecuted(consignment)),
                                                                                                positionShortName(issuanceExecuted(consignment)),
                                                                                                dataIssuanceExecuted(consignment) IN issuanceConsignment MINCHARWIDTH 20 PREFCHARWIDTH 20;
changeIssuanceExecuted(Consignment consignment) = ACTION {    
    IF notUseIssuanceExecuted(consignment) THEN {
        REQUEST VARSTRING[100] INPUT;
        dataIssuanceExecuted(consignment) <- requestedString();
    } ELSE {
        REQUEST OBJECT e FORM employees DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            issuanceExecuted(consignment) <- requestedObject();
            IF NOT issuanceExecuted(consignment) THEN {
                overIssuanceExecuted(consignment) <- requestedObject();
            }
        } ELSE IF formResult() == FormResult.drop THEN {
            issuanceExecuted(consignment) <- NULL;
            overIssuanceExecuted(consignment) <- NULL;
        }
    }        
}

//forwarderConsignment 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (consignment) = ABSTRACT VARSTRING[40] (Consignment) IN issuanceConsignment;
dataForwarder  = ABSTRACT Employee (Consignment);

dataNameForwarder = DATA VARSTRING[100](Consignment);
forwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (Consignment consignment) = OVERRIDE  
    positionShortName(dataForwarder(consignment)), 
    dataNameForwarder(consignment) IN issuanceConsignment MINCHARWIDTH 30 PREFCHARWIDTH 30;

changeForwarder(Consignment consignment) = ACTION {
    
    IF notUseDriverTruck(consignment) THEN {
        REQUEST VARSTRING[70] INPUT;
        dataNameForwarder(consignment) <- requestedString();
    } ELSE {
        REQUEST OBJECT e FORM employees DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            dataForwarder(consignment) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            dataForwarder(consignment) <- NULL;
        }
    }
        
}

warrant 'По доверенности (номер, дата)' (consignment) = ABSTRACT VARSTRING[30] (Consignment) IN issuanceConsignment MINCHARWIDTH 15 PREFCHARWIDTH 30;
warrantHolder 'По доверенности выданной ' (consignment) = ABSTRACT VARSTRING[200] (Consignment) IN issuanceConsignment MINCHARWIDTH 15 PREFCHARWIDTH 30;

useGoodsAccepted 'Использовать справочник сотрудников' = ABSTRACT BOOLEAN (Consignment);

dataGoodsAccepted = DATA Employee(Consignment);
goodsAccepted 'Принял грузополучатель' (consignment) = ABSTRACT VARSTRING[150] (Consignment) IN issuanceConsignment;
overGoodsAccepted 'Принял грузополучатель'  = OVERRIDE 
    positionShortName(dataGoodsAccepted(Consignment consignment)), 
    goodsAccepted(consignment) IN issuanceConsignment MINCHARWIDTH 20 PREFCHARWIDTH 40;
    
changeGoodsAccepted(Consignment consignment) = ACTION {    
    IF useGoodsAccepted(consignment) THEN {
        REQUEST OBJECT e FORM employees DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            dataGoodsAccepted(consignment) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            dataGoodsAccepted(consignment) <- NULL;
        }
    } ELSE {
        REQUEST VARSTRING[150] INPUT;
        goodsAccepted(consignment) <- requestedString();           
    }        
}   

sealNumberSupplier 'Номер пломбы грузоотправителя' = ABSTRACT VARSTRING[50] (Consignment) IN issuanceConsignment MINCHARWIDTH 15 PREFCHARWIDTH 30;
sealNumberCustomer 'Номер пломбы грузополучателя' = ABSTRACT VARSTRING[50] (Consignment) IN issuanceConsignment MINCHARWIDTH 15 PREFCHARWIDTH 30;

// ------------------------------------- Погрузочно-разгрузочные работы --------------------------------- //

GROUP loadingConsignment 'ПРР' : base;

loadingExecuter (consignment) = ABSTRACT LegalEntity(Consignment);
nameLoadingExecuter 'Исполнитель погрузки' (Consignment consignment) = name(loadingExecuter(consignment));
overNameLoadingExecuter 'Исполнитель погрузки' (Consignment consignment)= OVERRIDE 'Грузоотправитель' IF consignment IS Consignment, nameLoadingExecuter(consignment) IN loadingConsignment;

wayOfLoading (consignment) = ABSTRACT WayOfLoading(Consignment);
nameWayOfLoading 'Способ погрузки' (Consignment consignment) = name(wayOfLoading(consignment)) IN loadingConsignment;

unloadingExecuter (consignment) = ABSTRACT LegalEntity(Consignment);
nameUnloadingExecuter 'Исполнитель разгрузки' (Consignment consignment) = name(unloadingExecuter(consignment));
overNameUnloadingExecuter 'Исполнитель разгрузки' (Consignment consignment)= OVERRIDE 'Грузополучатель' IF consignment IS Consignment, nameUnloadingExecuter(consignment) IN loadingConsignment;

wayOfUnloading (consignment) = ABSTRACT WayOfLoading(Consignment);
nameWayOfUnloading 'Способ разгрузки' (Consignment consignment) = name(wayOfUnloading(consignment)) IN loadingConsignment;

codeLoading 'Код ПРР' (consignment) = ABSTRACT STRING[3] (Consignment)IN loadingConsignment;

notArrivalTimeConsignment 'Не печатать текущее время прибытия в накладной' () = DATA BOOLEAN ();
isArrivalTime 'Печатать текущее время прибытия в накладной' = ABSTRACT BOOLEAN (Consignment);

dataArrivalTime 'Время прибытия' (consignment) = ABSTRACT DATETIME(Consignment);
arrivalTime 'Время прибытия' (Consignment consignment) = OVERRIDE currentDateTime() IF  isArrivalTime(consignment),
                                                        currentDateTime() IF consignment IS Consignment AND NOT notArrivalTimeConsignment(),
                                                        dataArrivalTime(consignment) IN carConsignment;

dataDowntime 'Время простоя (мин.)' = DATA  INTEGER ();

EXTEND FORM options
    PROPERTIES() dataDowntime, notArrivalTimeConsignment
;

DESIGN options {
    consignment  {
        MOVE PROPERTY(dataDowntime());
        MOVE PROPERTY(notArrivalTimeConsignment());
    }
}

dataDowntime 'Время простоя' (consignment) = ABSTRACT INTEGER (Consignment);
downtime 'Время простоя' (Consignment consignment) = OVERRIDE dataDowntime() IF isArrivalTime(consignment), 
                                                             dataDowntime() IF consignment IS Consignment AND NOT notArrivalTimeConsignment(), 
                                                             dataDowntime(consignment) IN carConsignment;

departureTime 'Время убытия' (Consignment consignment) = sumMinutes(arrivalTime(consignment), LONG(downtime(consignment))) IN carConsignment;                                                                

raceQuantity 'Количество ездок' (consignment) = ABSTRACT INTEGER (Consignment) IN carConsignment;

countPages 'Кол-во листов в приложении' (consignment) = ABSTRACT INTEGER (Consignment);

dataNote 'Примечание' (consignment) = ABSTRACT VARSTRING[500] (Consignment);
overNote 'Примечание' (consignment) = DATA VARSTRING[500] (Consignment) ;
note 'Примечание' (Consignment consignment) = OVERRIDE dataNote(consignment), overNote(consignment) MINCHARWIDTH 30 PREFCHARWIDTH 80;

namePayer 'Заказчик перевозки ' (Consignment consignment) =
    name(payer(consignment)) + ' , ' + UNP(payer(consignment)) IN carConsignment;
    
order 'Порядок сортировки' = ABSTRACT VARISTRING[255] (ConsignmentDetail); 
index 'Номер строки' = ABSTRACT INTEGER (ConsignmentDetail); 
skip = ABSTRACT BOOLEAN (ConsignmentDetail); 

batch = ABSTRACT Batch (ConsignmentDetail);
descriptionBatch 'Партия' (ConsignmentDetail d) = description(batch(d)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
nameBatch 'Партия' (ConsignmentDetail d) = name(batch(d)) MINCHARWIDTH 20 PREFCHARWIDTH 40;

dataSku (d) = ABSTRACT Sku (ConsignmentDetail);
overSku (d) = ABSTRACT Sku (ConsignmentDetail);
sku (ConsignmentDetail d) = OVERRIDE dataSku(d), overSku(d);

overNameSku = ABSTRACT VARISTRING[255](ConsignmentDetail); // дополнительные характеристики
dataNameSku = ABSTRACT VARISTRING[255](ConsignmentDetail);

nameSku 'Наименование товара' (ConsignmentDetail d) = CONCAT ' ',
    (OVERRIDE name(sku(d)), dataNameSku(d), overDocumentNameSku(batch(d))),
    overNameSku(d);
    
shortNameUOM 'Единица измерения' (ConsignmentDetail d) = shortNameUOM(sku(d));

consignment (d) = ABSTRACT Consignment (ConsignmentDetail);

dataQuantity 'Количество' (d) = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
overQuantity 'Количество' (d) = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
quantity 'Количество' (ConsignmentDetail d) = OVERRIDE dataQuantity(d), overQuantity(d);

invoicePrice 'Цена с НДС' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
isInvoicePrice 'Печатать в качестве цены цену с НДС' (d) = ABSTRACT BOOLEAN (ConsignmentDetail);

dataPrice 'Цена' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
overPrice 'Цена' (d) = ABSTRACT CASE NUMERIC[16,4] (ConsignmentDetail);
price 'Цена' (ConsignmentDetail d) = IF NOT isInvoicePrice(d) 
                                                        THEN (OVERRIDE dataPrice(d), overPrice(d))
                                                        ELSE invoicePrice(d);

shipmentPrice 'Цена поставщика' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
purchaseRetailPrice 'Цена розничная' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);

retailMarkup 'Надбавка розн.' (d) = ABSTRACT NUMERIC[14,3] (ConsignmentDetail);
wholesaleMarkup 'Надбавка опт.' (d) = ABSTRACT NUMERIC[16,3] (ConsignmentDetail);


invoiceSum 'Сумма с НДС' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
dataSum 'Стоимость' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
overSum 'Стоимость' (d) = ABSTRACT CASE NUMERIC[18,4] (ConsignmentDetail);
sum 'Стоимость' (ConsignmentDetail d) = IF NOT isInvoicePrice(d)  
                                                            THEN (OVERRIDE dataSum(d), overSum(d))
                                                            ELSE invoiceSum(d);

notVat 'Не надо проставлять ставку' (d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);  
useEmptyVAT 'Печатать пустой строку с НДС' (d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);     
                                                                                                                       
useEmptyVATConsignmentDetail = GROUP SUM 1 IF useEmptyVAT(ConsignmentDetail d) BY consignment(d);                                                                                                                       
                                                              
dataVat 'НДС, %' (d) = ABSTRACT NUMERIC[10,5] (ConsignmentDetail);
overVat 'НДС, %' (d) = ABSTRACT CASE NUMERIC[10,5] (ConsignmentDetail);
vat 'НДС, %' (ConsignmentDetail d) = (OVERRIDE dataVat(d),
                                                             overVat(d)) IF NOT notVat(d);

dataSumVAT 'Сумма НДС' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
overSumVAT 'Сумма НДС' (d) = ABSTRACT CASE NUMERIC[18,4] (ConsignmentDetail);
sumVAT 'Сумма НДС' (ConsignmentDetail d) = OVERRIDE dataSumVAT(d),
                                                                   overSumVAT(d);

dataSumInvoice 'Сумма с НДС' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
overSumInvoice 'Сумма с НДС' (d) = ABSTRACT CASE NUMERIC[18,4] (ConsignmentDetail);
over2SumInvoice 'Сумма с НДС' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
sumInvoice 'Сумма с НДС' (ConsignmentDetail d) = OVERRIDE dataSumInvoice(d),
                                                                        overSumInvoice(d),
                                                                        over2SumInvoice(d);
                                                                         
sumShipment 'Сумма учётная' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);

sumShipmentContainer 'Сумма тары' (consignment) = ABSTRACT NUMERIC[18,4] (Consignment);
sumShipmentItem 'Сумма товаров' (consignment) = ABSTRACT NUMERIC[18,4] (Consignment);

sumRetailVAT 'Сумма НДС' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);

sumRetailContainer 'Сумма тары' (consignment) = ABSTRACT NUMERIC[18,4] (Consignment);
sumRetailItem 'Сумма товаров' (consignment) = ABSTRACT NUMERIC[18,4] (Consignment);

sumWholesaleMarkup 'Надбавка' (consignment) = ABSTRACT NUMERIC[18,4] (Consignment);

sumRetail 'Сумма розничная' (d) = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);

dataPackQuantity 'Количество грузовых мест' (d) = ABSTRACT NUMERIC[21,6] (ConsignmentDetail);
overPackQuantity 'Количество грузовых мест' (d) = ABSTRACT CASE NUMERIC[21,6] (ConsignmentDetail);
roundPack 'Количество знаков после запятой для грузовых мест' = ABSTRACT INTEGER (ConsignmentDetail);
packQuantity 'Количество грузовых мест' (ConsignmentDetail d) = OVERRIDE dataPackQuantity(d), 
                                                                                        overPackQuantity(d);
notPrintGr 'Не писать прописью граммы в ТТН' = ABSTRACT BOOLEAN (Consignment);
dataGrossWeight 'Масса груза, кг.' (d) = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
overGrossWeight 'Масса груза, кг.' (d) = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
grossWeight 'Масса груза, кг.' (ConsignmentDetail d) = OVERRIDE dataGrossWeight(d),
                                                                               overGrossWeight(d);

grossWeightTon 'Масса груза, т.' (ConsignmentDetail d) = round6(NUMERIC[17,6](grossWeight(d)) / 1000);

dataNote 'Примечание' = ABSTRACT OVERRIDE VARSTRING[150] (ConsignmentDetail);
overNote 'Примечание' = DATA VARSTRING[150] (ConsignmentDetail) ;
note 'Примечание' (ConsignmentDetail consignment) = OVERRIDE dataNote(consignment), overNote(consignment) MINCHARWIDTH 30 PREFCHARWIDTH 80;

extraDescription 'Доп. наименование' (d) = ABSTRACT VARSTRING[1500] (ConsignmentDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

countConsignmentDetail 'Количество строк' (consignment) = GROUP SUM 1 IF ConsignmentDetail d IS ConsignmentDetail AND NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

quantityConsignmentDetail 'Количество (всего)' (consignment) = GROUP SUM quantity(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

packQuantityConsignmentDetail 'Общее количество грузовых мест' (consignment) = GROUP SUM packQuantity(ConsignmentDetail d) IF quantity(d) AND NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

packQuantity 'Общее количество грузовых мест' = ABSTRACT CASE NUMERIC[8,2] (Consignment);
overPackQuantityConsignmentDetail 'Общее количество грузовых мест' (Consignment consignment) = OVERRIDE packQuantityConsignmentDetail(consignment),
                                                                                                       packQuantity(consignment);

grossWeightTonConsignmentDetail 'Общая масса груза, т.' (consignment) = GROUP SUM grossWeightTon(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

grossWeightConsignmentDetail 'Общая масса груза, кг.'(consignment) = GROUP SUM grossWeight(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

grossWeight 'Общая масса груза, кг' = ABSTRACT CASE NUMERIC[8,2] (Consignment);
overGrossWeightConsignmentDetail 'Общая масса груза, кг' = OVERRIDE grossWeightConsignmentDetail(Consignment consignment),
                                                                               grossWeight(consignment);

isCustomsFlow 'Расход с СВХ' (consignment) = ABSTRACT BOOLEAN (Consignment);
printDetailCustomsFlow 'Печатать строки' (consignment) = ABSTRACT BOOLEAN (Consignment);

dataCurrency 'Валюта (ИД)' (consignment) = ABSTRACT Currency (Consignment);
overCurrency 'Валюта (ИД)' (consignment) = ABSTRACT CASE Currency (Consignment);
currency 'Валюта (ИД)' (Consignment consignment) = OVERRIDE dataCurrency(consignment), overCurrency(consignment);
shortNameCurrency 'Валюта' (Consignment consignment) = shortName(currency(consignment));
documentNameCurrency 'Валюта (сокр.)' (Consignment consignment) = documentName(currency(consignment));
isCurrency 'Выбрана валюта' (Consignment consignment) = TRUE IF currency(consignment);

//// Посуда на возврате
isWare 'Возврат поставщику' (consignment) = ABSTRACT BOOLEAN (Consignment);
//wareSumConsignmentDetailConsignment 'Сумма посуды с НДС' (consignment) = ABSTRACT NUMERIC[16,4] (Consignment);
supplierSumConsignmentDetail 'Сумма поставщика без НДС' (consignment) = ABSTRACT NUMERIC[16,4] (Consignment);
//
//wareConsignmentDetail (d) = ABSTRACT Ware (ConsignmentDetail);
//nameWareConsignmentDetail 'Посуда' (d) = nameWare(wareConsignmentDetail(d));
//warePriceConsignmentDetail 'Цена посуды с НДС' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
//wareSumConsignmentDetail 'Сумма посуды с НДС' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
//valueWareRangeConsignmentDetail 'НДС посуды, %' (d) = ABSTRACT NUMERIC[6,2] (ConsignmentDetail);
//wareVATSumConsignmentDetail 'Сумма НДС по посуде' (d) = ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
//wareSupplierPriceConsignmentDetail 'Цена посуды без НДС' (d) =  ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
//wareSupplierSumConsignmentDetail 'Сумма посуды без НДС' (d) =  ABSTRACT NUMERIC[16,4] (ConsignmentDetail);
//
//sumIaWConsignmentDetail 'Сумма с посудой без НДС' (d) = sumConsignmentDetail(d) (+) wareSupplierSumConsignmentDetail(d);
overSumIaW = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
sumIaW (ConsignmentDetail detail) = OVERRIDE sum(detail), overSumIaW(detail);

sumConsignmentDetail 'Сумма с посудой без НДС (всего)' (consignment) = GROUP SUM sumIaW(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;
//
//sumVATIaWConsignmentDetail 'Сумма НДС' (d) = sumVATConsignmentDetail(d) (+) wareVATSumConsignmentDetail(d);
overSumVATIaW = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
sumVATIaW (ConsignmentDetail detail) = OVERRIDE sumVAT(detail), overSumVATIaW(detail);

sumVATConsignmentDetail 'Сумма НДС (всего)' (consignment) = GROUP SUM sumVATIaW(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;
//
//sumInvoiceIaWConsignmentDetail 'Сумма с НДС' (d) = sumInvoiceConsignmentDetail(d) (+) wareSumConsignmentDetail(d);
overSumInvoiceIaW = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
sumInvoiceIaW (ConsignmentDetail detail) = OVERRIDE sumInvoice(detail), overSumInvoiceIaW(detail);

sumInvoiceConsignmentDetail 'Сумма c НДС (всего)' (consignment) = GROUP SUM sumInvoiceIaW(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

sumShipmentConsignmentDetail 'Сумма учётная' (consignment) = GROUP SUM sumShipment(ConsignmentDetail d) IF NOT skip(d)
                                                                               BY consignment(d) IN sumConsignment;

sumRetailVATConsignmentDetail 'Сумма НДС' (consignment) = GROUP SUM sumRetailVAT(ConsignmentDetail d) IF NOT skip(d)
                                                                            BY consignment(d) IN sumConsignment;

sumRetailConsignmentDetail 'Сумма c НДС (всего)' (consignment) = GROUP SUM sumRetail(ConsignmentDetail d) IF NOT skip(d)
                                                                                   BY consignment(d) IN sumConsignment;

//----------проверка на заполнение атрибутов ---------

stopPrintConsignment = DATA LOCAL BOOLEAN ();

checkMandatoryAttribute = ACTION ABSTRACT LIST (Consignment);

META checkConsignmentAttribute(type, attrib, msg, skipProp)

checkMandatoryAttribute(Consignment c) += ACTION {
    IF is##type(c) AND NOT attrib(c) AND NOT skipProp(c) THEN {
        stopPrintConsignment() <- TRUE;
        MESSAGE NO WAIT msg;
    }
}
END

@checkConsignmentAttribute(TTN1, nameDriver, 'Для накладной должен быть заполнен водитель', skipDriver);
@checkConsignmentAttribute(TTN1, nameTruck, 'Для накладной должен быть заполнен автомобиль', skipTruck);
@checkConsignmentAttribute(TTN1, overWaybill, 'Для накладной должен быть заполнен путевой лист', skipWaybill);

// ---------------------------- Формы для накладных --------------------------------- //

META defineConsignmentFormSimple(form, caption)

    FORM consignmentSimple###form caption
        OBJECTS c=Consignment FIXED PANEL

        PROPERTIES (c) date, shipmentBase, nameIssuanceAllowed, nameIssuanceExecuted,
                       forwarder, warrant, warrantHolder, overGoodsAccepted,
                       quantityConsignmentDetail, sumConsignmentDetail, sumVATConsignmentDetail,
                       sumInvoiceConsignmentDetail,
                       UNPCustomer, UNPSupplier, addressSupplier, addressCustomer,
                       fullNameSupplier, fullNameCustomer, extraDescriptionSupplier, extraDescriptionCustomer, number, series, seriesNumber, countConsignmentDetail,
                       isWare, isCustomsFlow, printDetailCustomsFlow, isCurrency, shortNameCurrency,
                       note, documentNameCurrency, countPages, useEmptyVATConsignmentDetail
        PROPERTIES()   TODRAW c countRowsSimpleVertical, countRowsSimpleHorizontal
        OBJECTS d=ConsignmentDetail

        PROPERTIES(d) order, index, nameSku, shortNameUOM, quantity, price,
                      sum, vat, useEmptyVAT, sumVAT, sumInvoice,
                      note, extraDescription
        ORDER BY order(d), index(d)
        FILTERS consignment(d) == c,
                quantity(d),
                NOT skip(d)
    ;
    printSimple###form caption (Consignment consignment) = ACTION FORM consignmentSimple###form OBJECTS c = consignment PRINT IMAGE 'print.png' IN print;
    printSimple###form##Auto caption (Consignment consignment) = ACTION FORM consignmentSimple###form OBJECTS c = consignment PRINT AUTO IMAGE 'print.png' IN print;
END


META defineConsignmentFormSimpleExtra(form, caption)

    FORM consignmentSimple###form caption
        OBJECTS c=Consignment FIXED PANEL

        PROPERTIES (c) date, shipmentBase, nameIssuanceAllowed, nameIssuanceExecuted,
                       forwarder, warrant, warrantHolder, overGoodsAccepted,
                       quantityConsignmentDetail, sumConsignmentDetail, sumVATConsignmentDetail,
                       sumInvoiceConsignmentDetail,
                       UNPCustomer, UNPSupplier, addressSupplier, addressCustomer,
                       fullNameSupplier, fullNameCustomer, extraDescriptionSupplier, extraDescriptionCustomer, number, series, seriesNumber, countConsignmentDetail,
                       isWare, isCustomsFlow, isCurrency, shortNameCurrency,
                       note, documentNameCurrency, countPages, useEmptyVATConsignmentDetail
        PROPERTIES()   TODRAW c countRowsSimpleVertical, countRowsSimpleHorizontal
        OBJECTS d=ConsignmentDetail

        PROPERTIES(d) order, index, nameSku, shortNameUOM, quantity, price,
                      sum, vat, useEmptyVAT, sumVAT, sumInvoice,
                      note, extraDescription
        ORDER BY order(d), index(d)
        FILTERS consignment(d) == c,
                quantity(d),
                NOT skip(d)
    ;
    printSimple###form caption (Consignment consignment) = ACTION NEWSESSION {        
        FORM consignmentSimple###form OBJECTS c = consignment PRINT;
        countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
        apply();
        
    } IMAGE 'print.png' IN print;
    
    printSimple###form##Auto caption (Consignment consignment) = ACTION FORM consignmentSimple###form OBJECTS c = consignment PRINT AUTO IMAGE 'print.png' IN print;        
END

@defineConsignmentFormSimple(vertical, 'ТН-2, вертикальная');
@defineConsignmentFormSimple(horizontal, 'ТН-2, горизонтальная');
@defineConsignmentFormSimpleExtra(attach, 'Приложение к ТН-2');
printSimpleVerticalAttach 'ТН-2, вертикальная с приложением' (Consignment consignment) = ACTION NEWSESSION {        
    FORM consignmentSimpleAttach OBJECTS c = consignment PRINT;
    countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);      
    printSimpleVertical(consignment);
    apply();      
    
} IMAGE 'print.png' IN print;
printSimpleHorizontalAttach 'ТН-2, горизонтальная с приложением' (Consignment consignment) = ACTION NEWSESSION {        
    FORM consignmentSimpleAttach OBJECTS c = consignment PRINT;
    countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);      
    printSimpleHorizontal(consignment);
    apply();      
    
} IMAGE 'print.png' IN print;

META defineConsignmentForm(form, caption)  // объявляем форму
    FORM form caption
    ;
END
META defineConsignment(form, prefix)  // добавляем объет на форму (по сторонам)
    EXTEND FORM form 
        OBJECTS prefix=Consignment FIXED PANEL
    ;
END
META defineConsignmentAll(form, prefix, report) // добавляем объет на форму (сквозная)
    EXTEND FORM form 
        OBJECTS prefix=Consignment FIXED PANEL
        REPORTFILES prefix report()
    ;
END

META defineExtendConsignmentForm(form, prefix) // добавляем свойства (по сторонам / сквозная)
    EXTEND FORM form 
        PROPERTIES (prefix) prefix##dateConsignment=date, prefix##UNPCustomerConsignment=UNPCustomer, 
                       prefix##UNPSupplierConsignment=UNPSupplier, prefix##addressSupplierConsignment=addressSupplier, 
                       prefix##addressCustomerConsignment=addressCustomer, prefix##fullNameSupplierConsignment=fullNameSupplier,
                       prefix##fullNameCustomerConsignment=fullNameCustomer, prefix##nameTruckConsignment=nameTruck, 
                       prefix##extraDescriptionSupplier=extraDescriptionSupplier, prefix##extraDescriptionCustomer=extraDescriptionCustomer,
                       prefix##ownerTruckConsignment=ownerTruck, prefix##trailerConsignment=trailer, 
                       prefix##nameDriverConsignment=nameDriver, prefix##overWaybillConsignment=overWaybill,
                       prefix##fullNamePayerConsignment=fullNamePayer, prefix##UNPPayerConsignment=UNPPayer, 
                       prefix##addressPayerConsignment=addressPayer, 
                       prefix##shipmentBaseConsignment=shipmentBase, prefix##addressSupplierStockConsignment=addressSupplierStock, 
                       prefix##addressCustomerStockConsignment=addressCustomerStock,
                       prefix##readdressingConsignment=readdressing, prefix##nameIssuanceAllowedConsignment=nameIssuanceAllowed, 
                       prefix##nameIssuanceExecutedConsignment=nameIssuanceExecuted,
                       prefix##forwarderConsignment=forwarder, prefix##warrantConsignment=warrant, 
                       prefix##warrantHolderConsignment=warrantHolder, prefix##goodsAcceptedConsignment=overGoodsAccepted,
                       prefix##sealNumberSupplier= sealNumberSupplier, prefix##sealNumberCustomer= sealNumberCustomer,  
                       prefix##overNameLoadingExecuterConsignment=overNameLoadingExecuter, prefix##nameWayOfLoadingConsignment=nameWayOfLoading, 
                       prefix##overNameUnloadingExecuterConsignment=overNameUnloadingExecuter, prefix##nameWayOfUnloadingConsignment=nameWayOfUnloading, 
                       prefix##codeLoadingConsignment=codeLoading,
                       prefix##arrivalTimeConsignment=arrivalTime, prefix##departureTimeConsignment=departureTime, 
                       prefix##downtimeConsignment=downtime, prefix##raceQuantityConsignment=raceQuantity,
                       prefix##quantityConsignmentDetailConsignment=quantityConsignmentDetail, 
                       prefix##overPackQuantityConsignmentDetailConsignment=overPackQuantityConsignmentDetail, 
                       prefix##grossWeightTonConsignmentDetailConsignment=grossWeightTonConsignmentDetail, 
                       prefix##grossWeightConsignmentDetailConsignment=grossWeightConsignmentDetail,
                       prefix##sumConsignmentDetailConsignment=sumConsignmentDetail, 
                       prefix##sumVATConsignmentDetailConsignment=sumVATConsignmentDetail, 
                       prefix##sumInvoiceConsignmentDetailConsignment=sumInvoiceConsignmentDetail,
                       prefix##countConsignmentDetailConsignment=countConsignmentDetail, 
                       prefix##supplierSumConsignmentDetailConsignment=supplierSumConsignmentDetail,
                       prefix##seriesConsignment=series, prefix##numberConsignment=number, prefix##seriesNumberConsignment=seriesNumber, 
                       prefix##isCustomsFlowConsignment=isCustomsFlow, 
                       prefix##isCurrencyConsignment=isCurrency, prefix##shortNameCurrencyConsignment=shortNameCurrency,
                       prefix##noteConsignment=note, prefix##documentNameCurrencyConsignment=documentNameCurrency,    
                       prefix##countPagesConsignment=countPages, prefix##useEmptyVATConsignmentDetailConsignment = useEmptyVATConsignmentDetail,
                       prefix##notPrintGr=notPrintGr
                        
        PROPERTIES()   TODRAW prefix prefix##countRowsVerticalA=countRowsVerticalA, prefix##countRowsVerticalAB=countRowsVerticalAB, 
                       prefix##countRowsHorizontal=countRowsHorizontal
 
 
        OBJECTS prefix##d=ConsignmentDetail

        PROPERTIES(prefix##d) prefix##orderConsignmentDetail= order, prefix##indexConsignmentDetail=index, prefix##nameSkuConsignmentDetail=nameSku, prefix##shortNameUOMConsignmentDetail=shortNameUOM, 
                      prefix##quantityConsignmentDetail=quantity, prefix##priceConsignmentDetail=price,
                      prefix##sumConsignmentDetail=sum, prefix##vatConsignmentDetail=vat, prefix##useEmptyVATConsignmentDetail=useEmptyVAT,
                      prefix##sumVATConsignmentDetail=sumVAT, prefix##sumInvoiceConsignmentDetail=sumInvoice,
                      prefix##packQuantityConsignmentDetail=packQuantity, prefix##grossWeightTonConsignmentDetail=grossWeightTon,
                      prefix##grossWeightConsignmentDetail=grossWeight,prefix##noteConsignmentDetail=note, 
                      prefix##extraDescriptionConsignmentDetail=extraDescription
        ORDER BY prefix##orderConsignmentDetail, prefix##indexConsignmentDetail
        FILTERS consignment(prefix##d) == prefix,
                quantity(prefix##d),
                NOT skip(prefix##d)
    ;        
          
END 
META definePrintConsignmentForm(form, caption, prefix)  //печать накладной по сторонам
        print###form caption (Consignment consignment) = ACTION {
            stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN FORM consignment###form OBJECTS prefix = consignment PRINT;
        } IMAGE 'print.png' IN print;
        print###form##Auto caption (Consignment consignment) = ACTION {
            stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN FORM consignment###form OBJECTS prefix = consignment PRINT AUTO;
        } IMAGE 'print.png' IN print; 
END 
META definePrintConsignmentFormExtra(form, caption, prefix)  //печать накладной по сторонам
        print###form caption (Consignment consignment) = ACTION NEWSESSION {
            //stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN {
                FORM consignment###form OBJECTS prefix = consignment PRINT;
                countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
                apply();                
                
            }
        } IMAGE 'print.png' IN print;
        print###form##Auto caption (Consignment consignment) = ACTION {
            stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN FORM consignment###form OBJECTS prefix = consignment PRINT AUTO;
        } IMAGE 'print.png' IN print; 
END 
  
META defineExtendPrintConsignmentFormAll(form, caption, prefixA, prefixB)       //печать накладной сквозная
        print###form caption (Consignment consignment) = ACTION {
            stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN FORM consignment###form OBJECTS prefixA = consignment, prefixB = consignment PRINT;            
        } IMAGE 'print.png' IN print;
        print###form###attach caption###' с приложением' (Consignment consignment) = ACTION NEWSESSION {
///            stopPrintConsignment() <- NULL;
            checkM##prefixA##nd##prefixA##tory###prefixA##ttri##prefixB##ute(consignment);
            IF NOT stopPrintConsignment() THEN {
                FORM consignment###attach OBJECTS c = consignment PRINT;
                countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
                FORM consignment###form OBJECTS prefixA = consignment, prefixB = consignment PRINT;
                apply();
            }            
        } IMAGE 'print.png' IN print;        
        
        
        
        print###form###prefixA##uto caption (Consignment consignment) = ACTION {
            stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            FORM consignment###form OBJECTS prefixA = consignment, prefixB = consignment PRINT AUTO;
        } IMAGE 'print.png' IN print; 
END   

//-------------------  Создание накладной по сторонам ----------------------//

@defineConsignmentForm(consignmentVerticalA, 'ТТН-1, вертикальная (сторона А)');
@defineConsignmentForm(consignmentHorizontalA, 'ТТН-1, горизонтальная (сторона А)');
@defineConsignmentForm(consignmentVerticalB, 'ТТН-1, вертикальная (сторона Б)');
@defineConsignmentForm(consignmentHorizontalB, 'ТТН-1, горизонтальная (сторона Б)');
@defineConsignmentForm(consignmentAttach, 'Приложение к ТТН-1');
@defineConsignmentForm(consignmentAttachHorizontal, 'Приложение к ТТН-1 (гор.)');
@defineConsignmentForm(consignmentVerticalAB, 'ТТН-1, вертикальная (сторона А/Б)');
@defineConsignmentForm(consignmentHorizontalAB, 'ТТН-1, горизонтальная (сторона А/Б)');

@defineConsignment(consignmentVerticalA, a);
@defineConsignment(consignmentHorizontalA, a);
@defineConsignment(consignmentVerticalB, b);
@defineConsignment(consignmentHorizontalB, b);
@defineConsignment(consignmentAttach, c);
@defineConsignment(consignmentAttachHorizontal, c);
@defineConsignment(consignmentVerticalAB, a);
@defineConsignment(consignmentHorizontalAB, a);

@defineExtendConsignmentForm(consignmentVerticalA, a);
@defineExtendConsignmentForm(consignmentHorizontalA, a);
@defineExtendConsignmentForm(consignmentVerticalB, b);
@defineExtendConsignmentForm(consignmentHorizontalB, b);
@defineExtendConsignmentForm(consignmentAttach, c);
@defineExtendConsignmentForm(consignmentAttachHorizontal, c);
@defineExtendConsignmentForm(consignmentVerticalAB, a);
@defineExtendConsignmentForm(consignmentHorizontalAB, a);

@definePrintConsignmentForm(verticalA, 'ТТН-1, вертикальная (сторона А)', a);
@definePrintConsignmentForm(horizontalA, 'ТТН-1, горизонтальная (сторона А)', a);
@definePrintConsignmentForm(verticalB, 'ТТН-1, вертикальная (сторона Б)', b);
@definePrintConsignmentForm(horizontalB, 'ТТН-1, горизонтальная (сторона Б)', b);
@definePrintConsignmentFormExtra(attach, 'Приложение к ТТН-1', c);
@definePrintConsignmentFormExtra(attachHorizontal, 'Приложение к ТТН-1 (гор.)', c);

printVerticalABAttach 'ТТН-1 вертикальная (А/Б) с приложением' (Consignment consignment) = ACTION NEWSESSION {
    checkMandatoryAttribute(consignment);
    IF NOT stopPrintConsignment() THEN {
        FORM consignmentAttach OBJECTS c = consignment PRINT;
        countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);                      
        FORM consignmentVerticalAB OBJECTS a = consignment PRINT;
        apply(); 
        
    }
} IMAGE 'print.png' IN print;
printHorizontalABAttach 'ТТН-1 горизонтальная (А/Б) с приложением' (Consignment consignment) = ACTION NEWSESSION {
    checkMandatoryAttribute(consignment);
    IF NOT stopPrintConsignment() THEN {
        FORM consignmentAttach OBJECTS c = consignment PRINT;
        countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);                      
        FORM consignmentHorizontalAB OBJECTS a = consignment PRINT;
        apply(); 
        
    }
} IMAGE 'print.png' IN print;

printAttachXLS 'Приложение к ТТН-1 (xls)' (Consignment consignment) = ACTION FORM consignmentAttach OBJECTS c = consignment PRINT XLSX IN print;
printSimpleAttachXLS 'Приложение к ТН-2 (xls)' (Consignment consignment) = ACTION FORM consignmentSimpleAttach OBJECTS c = consignment PRINT XLSX IN print;
@definePrintConsignmentForm(verticalAB, 'ТТН-1, вертикальная (сторона А/Б)', a);
@definePrintConsignmentForm(horizontalAB, 'ТТН-1, горизонтальная (сторона А/Б)', a);

//-------------------  Создание сквозной накладной  ----------------------//

@defineConsignmentForm(consignmentVertical, 'ТТН-1, вертикальная');
reportFilePrintConsignmentVerticalA () = 'Consignment_consignmentVerticalA_a.jrxml';
@defineConsignmentAll(consignmentVertical, a, reportFilePrintConsignmentVerticalA);
reportFilePrintConsignmentVerticalB () = 'Consignment_consignmentVerticalB_b.jrxml';
@defineConsignmentAll(consignmentVertical, b, reportFilePrintConsignmentVerticalB);
@defineExtendConsignmentForm(consignmentVertical, a);
@defineExtendConsignmentForm(consignmentVertical, b);
@defineExtendPrintConsignmentFormAll(vertical, 'ТТН-1, вертикальная', a, b);


@defineConsignmentForm(consignmentHorizontal, 'ТТН-1, горизонтальная');
reportFilePrintConsignmentHorizontalA () = 'Consignment_consignmentHorizontalA_a.jrxml';
@defineConsignmentAll(consignmentHorizontal, a, reportFilePrintConsignmentHorizontalA);
reportFilePrintConsignmentHorizontalB () = 'Consignment_consignmentHorizontalB_b.jrxml';
@defineConsignmentAll(consignmentHorizontal, b, reportFilePrintConsignmentHorizontalB);
@defineExtendConsignmentForm(consignmentHorizontal, a);
@defineExtendConsignmentForm(consignmentHorizontal, b);
@defineExtendPrintConsignmentFormAll(horizontal, 'ТТН-1, горизонтальная', a, b);

hidePayerConsignmnet = ABSTRACT BOOLEAN (Consignment);
showPayer(Consignment consignment) = showTTN1(consignment) AND NOT hidePayerConsignmnet(consignment);
banSeries = ABSTRACT BOOLEAN (Consignment);
toShowSeries = Consignment c IS Consignment AND NOT banSeries(c);

META changeConsignment(property, classType, request)
    change###property(Consignment c) = ACTION {
        REQUEST classType INPUT;
            IF request() THEN {
                data###property(c) <- request();
            }ELSE {
                data###property(c) <- NULL;
            }
    }
END

@changeConsignment(ownerTruck,VARISTRING[200],requestedString);
@changeConsignment(trailer,VARSTRING[100],requestedString);
@changeConsignment(waybill,VARSTRING[20],requestedString);
@changeConsignment(addressSupplierStock,VARSTRING[150],requestedString);
@changeConsignment(addressCustomerStock,VARSTRING[150],requestedString);

FORM consignment 'Атрибуты накладной'
    OBJECTS c=Consignment FIXED PANEL

    PROPERTIES(c) READONLY nameSupplierStock
    PROPERTIES(c)  number, series SHOWIF toShowSeries(c), date, UNPCustomer READONLY, UNPSupplier READONLY, 
                   addressSupplier READONLY, addressCustomer READONLY, fullNameSupplier READONLY, fullNameCustomer READONLY 
                   
    PROPERTIES(c)  shipmentBase,
                   nameIssuanceAllowed ON CHANGE changeIssuanceAllowed(c), nameIssuanceExecuted ON CHANGE changeIssuanceExecuted(c),
                   forwarder ON CHANGE changeForwarder(c), overGoodsAccepted ON CHANGE changeGoodsAccepted(c),
                   sealNumberSupplier, sealNumberCustomer  

    PROPERTIES(c) SHOWIF showTTN1(c)
                   nameTruck ON CHANGE changeTruck(c), ownerTruck ON CHANGE changeOwnerTruck(c), trailer ON CHANGE changeTrailer(c), 
                   nameDriver ON CHANGE changeDriver(c), overWaybill ON CHANGE changeWaybill(c),
                   addressSupplierStock ON CHANGE changeAddressSupplierStock(c), addressCustomerStock ON CHANGE changeAddressCustomerStock(c), readdressing,
                   warrant, warrantHolder, overNameLoadingExecuter, nameWayOfLoading, codeLoading,
                   overNameUnloadingExecuter, nameWayOfUnloading,
                   arrivalTime, downtime, departureTime READONLY, raceQuantity
    PROPERTIES(c)  quantityConsignmentDetail, overPackQuantityConsignmentDetail, grossWeightConsignmentDetail,
                   sumConsignmentDetail, sumVATConsignmentDetail, sumInvoiceConsignmentDetail,
                   countConsignmentDetail, note, shortNameCurrency, countPages
    PROPERTIES(c) SHOWIF showPayer(c) fullNamePayer, UNPPayer, addressPayer                 


    OBJECTS d=ConsignmentDetail

    PROPERTIES(d) order, index, nameSku READONLY, shortNameUOM READONLY, quantity, price,
                  sum, vat, sumVAT, sumInvoice,
                  packQuantity, grossWeight, note, extraDescription READONLY
    ORDER BY order(d), index(d)  

    FILTERS consignment(d) == c,
            NOT skip(d)
;

DESIGN consignment {
    main {
        preferredSize = (1024, 768);

        NEW header {
            caption = 'Шапка документа';
            type = CONTAINERH;
            MOVE PROPERTY(nameSupplierStock(c));
            MOVE PROPERTY(number(c));
            MOVE PROPERTY(series(c));
            MOVE PROPERTY(date(c));
        }

        NEW supplier {
            caption = 'Грузоотправитель';
            type = CONTAINERH;
            MOVE PROPERTY(fullNameSupplier(c));
            MOVE PROPERTY(UNPSupplier(c));
            MOVE PROPERTY(addressSupplier(c));
        }

        NEW customer {
            caption = 'Грузополучатель';
            type = CONTAINERH;
            MOVE PROPERTY(fullNameCustomer(c));
            MOVE PROPERTY(UNPCustomer(c));
            MOVE PROPERTY(addressCustomer(c));
        }

        NEW payer {
            caption = 'Заказчик ';
            type = CONTAINERH;
            MOVE PROPERTY(fullNamePayer(c));
            MOVE PROPERTY(UNPPayer(c));
            MOVE PROPERTY(addressPayer(c));
        }
        MOVE c.carConsignment {
            columns = 3;
        }
        MOVE c.issuanceConsignment {
            columns = 2;
        }
        MOVE c.loadingConsignment {
            columns = 3;
        }
        NEW sum {
            type = CONTAINERH;
            MOVE c.sumConsignment {
                columns = 4;
                MOVE PROPERTY(countConsignmentDetail(c));
                MOVE PROPERTY(quantityConsignmentDetail(c));
                MOVE PROPERTY(overPackQuantityConsignmentDetail(c));
                MOVE PROPERTY(grossWeightConsignmentDetail(c));
                MOVE PROPERTY(sumConsignmentDetail(c));
                MOVE PROPERTY(sumVATConsignmentDetail(c));
                MOVE PROPERTY(sumInvoiceConsignmentDetail(c));
            }
            NEW columnReight{
                caption = 'Приложение';
                MOVE PROPERTY(countPages(c));
            }
        }
        NEW misc {
            caption = 'Дополнительно';
            
            type = CONTAINERH;
            MOVE PROPERTY (note(c));
            MOVE PROPERTY (shortNameCurrency(c));
        }
    }
        
    MOVE d.box {
        PROPERTY(order(d)) {
            preferredCharWidth = 30;
            minimumCharWidth = 10;
        }
    };
    MOVE functions.box;
}

editAttributes 'Заполнить атрибуты накладной' (Consignment consignment) = ACTION NEWSESSION {
    IF NOT isArrivalTime(consignment) AND NOT dataArrivalTime(consignment) THEN {
//        dataArrivalTime(consignment) <- currentDateTime();
        IF NOT notArrivalTimeConsignment() THEN {
            IF date(consignment) <= currentDate() THEN {
                dataArrivalTime(consignment) <- currentDateTime();
            } ELSE {
                dataArrivalTime(consignment) <- dateTimeToDateTime(date(consignment), currentTime());
            }        
        }
    }    
    FORM consignment OBJECTS c = consignment MANAGESESSION DOCKEDMODAL; 
} IMAGE 'edit.png';

FORM printConsignment 'Печать накладных'
    OBJECTS c=Consignment FIXED PANEL

    PROPERTIES (c)  READONLYIF banPrint(c) printSimpleVertical, printSimpleHorizontal, printSimpleAttach,
                    printVerticalA, printVerticalAB, printHorizontalA, printHorizontalAB, printVerticalB,
                    printHorizontalB, printAttach, editAttributes,
                    printVertical, printHorizontal, printAttachXLS, printSimpleAttachXLS
;

DESIGN printConsignment {

    c.box {

        type = CONTAINERV;

        NEW case55{
            type = CONTAINERV;

            NEW contOne {
                caption = 'Накладная';
                MOVE PROPERTY(editAttributes(c));
            }
            NEW tn{
                type = CONTAINERH;
                caption = 'ТН-2';
                MOVE PROPERTY(printSimpleVertical(c));
                MOVE PROPERTY(printSimpleHorizontal(c));
                MOVE PROPERTY(printSimpleAttach(c));
            }
        }
        NEW ttn1{
            type = CONTAINERH;
            caption = 'ТТН-1';
            NEW ttn1V {
                type = CONTAINERV;
                MOVE PROPERTY(printVerticalA(c));
                MOVE PROPERTY(printVerticalB(c));
                MOVE PROPERTY(printVerticalAB(c));
                MOVE PROPERTY(printVertical(c));
                MOVE PROPERTY(printHorizontal(c));
            }
            NEW ttn1H {
                type = CONTAINERV;
                MOVE PROPERTY(printHorizontalA(c));
                MOVE PROPERTY(printHorizontalB(c));
                MOVE PROPERTY(printHorizontalAB(c));
            }
            NEW ttn1A {
                MOVE PROPERTY(printAttach(c));
            }
        }
        NEW export {
            type = CONTAINERH;
            caption = 'Экспорт';  
            MOVE PROPERTY(printAttachXLS(c));
            MOVE PROPERTY(printSimpleAttachXLS(c));
        }
    }
}

print 'Печать' (Consignment consignment) = ACTION FORM printConsignment OBJECTS c = consignment MODAL IMAGE 'print.png';


// ------------------------------------- Метакод по объявлению и имплементации накладных ------------------ //

// ----------------- Объявление заголовка накладной --------------- //

META defineConsignmentHeader (object)
    @defineConsignmentHeaderInner (object, ###object);
END

META defineConsignmentHeaderInner (object, class)
    payer (object) = DATA LegalEntity (class) IN carConsignment;

    dataTruck (object) = DATA Truck (class);
    nameDataTruck 'Автомобиль' (class object) = name(dataTruck(object)) IN carConsignment;
    dataTrailer 'Прицеп' (object) = DATA VARSTRING[50] (class) IN carConsignment;
    dataEmployee (object) = DATA Employee (class);
    nameDataEmployee 'Водитель' (class object) = name[Contact](dataEmployee(object)) IN carConsignment;
    waybill 'Путевой лист' (object) = DATA VARSTRING[20] (class) IN carConsignment;

    dataAddressSupplierStock 'Пункт погрузки' (object) = DATA VARSTRING[150] (class);
    dataAddressCustomerStock 'Пункт разгрузки' (object) = DATA VARSTRING[150] (class);

    readdressing 'Переадресовка' (object) = DATA VARSTRING[50] (class) IN carConsignment;

    overShipmentBase 'Основание отпуска' (object) = DATA VARSTRING[100] (class) IN issuanceConsignment;

    issuanceAllowed (object) = DATA Employee(class);

    issuanceExecuted (object) = DATA Employee(class);

    dataForwarder (object) = DATA Employee (class) IN issuanceConsignment;
    forwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (class object)= name[Contact](dataForwarder(object));
    
    warrant 'По доверенности (номер, дата)' (object) = DATA VARSTRING[30] (class) IN issuanceConsignment;
    warrantHolder 'По доверенности выданной (наименование орг-ии)' (object) = DATA VARSTRING[200] (class) IN issuanceConsignment;

    goodsAccepted 'Принял грузополучатель' (object) = DATA VARSTRING[150] (class) IN issuanceConsignment;    
    sealNumberSupplier (object) = DATA VARSTRING[50] (class) IN issuanceConsignment;
    sealNumberCustomer (object) = DATA VARSTRING[50] (class)IN issuanceConsignment;

    loadingExecuter (object) = DATA LegalEntity(class);
    wayOfLoading (object) = DATA WayOfLoading(class);

    unloadingExecuter (object) = DATA LegalEntity(class);
    wayOfUnloading (object) = DATA WayOfLoading(class);

    codeLoading 'Код ПРР' (object) = DATA STRING[3] (class) IN loadingConsignment;

    arrivalTime 'Время прибытия' (object) = DATA DATETIME(class) IN carConsignment;
    downtime 'Время простоя' (object) = DATA INTEGER (class) IN carConsignment;
    raceQuantity 'Количество ездок' (object) = DATA INTEGER (class) IN carConsignment;
    raceQuantity(class o) <- 1 WHEN SET(o IS class);

    countPages 'Кол-во страниц в приложении' (object) = DATA INTEGER (class);
END

META defineConsignmentAbstractHeader(object)
    @defineConsignmentAbstractHeaderInner(object, ###object);
END

META defineConsignmentAbstractHeaderInner(object, class)

    payer 'Заказчик перевозки (ИД)' (object) = ABSTRACT LegalEntity (class) IN carConsignment;

    dataTruck 'Автомобиль' (object) = ABSTRACT Truck (class);
    nameDataTruck 'Автомобиль' (class object) = name(dataTruck(object)) IN carConsignment;
    
    dataTrailer 'Прицеп' (object) = ABSTRACT VARSTRING[100] (class) IN carConsignment;
    dataEmployee (object) = ABSTRACT Employee (class);
    nameDataEmployee 'Водитель' (class object) = name[Contact](dataEmployee(object)) IN carConsignment;
    waybill 'Путевой лист' (object) = ABSTRACT VARSTRING[20] (class) IN carConsignment;

    dataAddressSupplierStock 'Пункт погрузки' (object) = ABSTRACT VARSTRING[150] (class);
    dataAddressCustomerStock 'Пункт разгрузки' (object) = ABSTRACT VARSTRING[150] (class);

    readdressing 'Переадресовка' (object) = ABSTRACT VARSTRING[50] (class) IN carConsignment;

    overShipmentBase 'Основание отпуска' (object) = ABSTRACT VARSTRING[100] (class) IN issuanceConsignment;

    issuanceAllowed (object) = ABSTRACT Employee(class);

    issuanceExecuted (object) = ABSTRACT Employee(class);

    dataForwarder (object) = ABSTRACT Employee (class) IN issuanceConsignment;
    forwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (class object)= name[Contact](dataForwarder(object));

    warrant 'По доверенности (номер, дата)' (object) = ABSTRACT VARSTRING[30] (class) IN issuanceConsignment;
    warrantHolder 'По доверенности выданной (наименование орг-ии)' (object) = ABSTRACT VARSTRING[200] (class) IN issuanceConsignment;

    goodsAccepted 'Принял грузополучатель' (object) = ABSTRACT VARSTRING[150] (class) IN issuanceConsignment;
    sealNumberSupplier (object) = ABSTRACT VARSTRING[50] (class) IN issuanceConsignment;
    sealNumberCustomer (object) = ABSTRACT VARSTRING[50] (class)IN issuanceConsignment;

    loadingExecuter (object) = ABSTRACT LegalEntity(class);
    wayOfLoading (object) = ABSTRACT WayOfLoading(class);

    unloadingExecuter (object) = ABSTRACT LegalEntity(class);
    wayOfUnloading (object) = ABSTRACT WayOfLoading(class);

    codeLoading 'Код ПРР' (object) = ABSTRACT STRING[3] (class) IN loadingConsignment;

    defaultArrivalTime = ABSTRACT DATETIME(class);
    arrivalTime 'Время прибытия' (object) = ABSTRACT DATETIME(class) IN carConsignment;

    defaultDowntime (object) = ABSTRACT INTEGER (class) IN carConsignment;
    downtime 'Время простоя' (object) = ABSTRACT INTEGER (class) IN carConsignment;
         
    raceQuantity 'Количество ездок' (object) = ABSTRACT INTEGER (class) IN carConsignment;

    countPages 'Кол-во листов в приложении' (object) = ABSTRACT INTEGER (class); 
END

META defineConsignmentInterfaceHeader(object, stockProp)
    @defineConsignmentAbstractHeader (object);
    @defineConsignmentHeader (user###object);
END

META defineConsignmentInterfaceHeader(object)
    @defineConsignmentInterfaceHeader(object, stock);
END

// ----------------- Implement заголовка накладной --------------- //

META implementConsignmentHeader (concrete)
    EXTEND CLASS concrete : Consignment;

    dataDate[Consignment] (concrete consignment) += date(consignment);
    number[Consignment] (concrete consignment) += number(consignment);
    series[Consignment] (concrete consignment) += series(consignment);

    payer[Consignment] (concrete consignment) += payer (consignment);

    dataTruck[Consignment] (concrete consignment) += dataTruck (consignment);
    dataTrailer[Consignment] (concrete consignment) += dataTrailer (consignment);
    dataEmployee[Consignment] (concrete consignment) += dataEmployee (consignment);
    dataWaybill[Consignment] (concrete consignment) += waybill (consignment);

    dataAddressSupplierStock[Consignment] (concrete consignment) += dataAddressSupplierStock (consignment);
    dataAddressCustomerStock[Consignment] (concrete consignment) += dataAddressCustomerStock (consignment);

    readdressing[Consignment] (concrete consignment) += readdressing (consignment);
    
    countPages[Consignment] (concrete consignment) += countPages (consignment);
    
    contract[Consignment](concrete consignment) += contractSku (consignment);
    overShipmentBase[Consignment] (concrete consignment) += overShipmentBase (consignment);

    issuanceAllowed[Consignment] (concrete consignment) += issuanceAllowed (consignment);

    issuanceExecuted[Consignment] (concrete consignment) += issuanceExecuted (consignment);

    dataForwarder[Consignment] (concrete consignment) += dataForwarder (consignment);

    warrant[Consignment] (concrete consignment) += warrant (consignment);
    warrantHolder[Consignment] (concrete consignment) += warrantHolder (consignment);

    goodsAccepted[Consignment] (concrete consignment) += goodsAccepted (consignment);
    sealNumberSupplier [Consignment] (concrete consignment) += sealNumberSupplier(consignment);
    sealNumberCustomer [Consignment] (concrete consignment) += sealNumberCustomer(consignment);

    loadingExecuter[Consignment] (concrete consignment) += loadingExecuter (consignment);
    wayOfLoading[Consignment] (concrete consignment) += wayOfLoading (consignment);

    unloadingExecuter[Consignment] (concrete consignment) += unloadingExecuter (consignment);
    wayOfUnloading[Consignment] (concrete consignment) += wayOfUnloading (consignment);

    codeLoading[Consignment] (concrete consignment) += codeLoading (consignment);

    dataArrivalTime[Consignment] (concrete consignment) += OVERRIDE defaultArrivalTime(consignment), arrivalTime(consignment);
    dataDowntime[Consignment] (concrete consignment) += OVERRIDE defaultDowntime(consignment), downtime(consignment);   
     
    raceQuantity[Consignment] (concrete consignment) += raceQuantity (consignment);
END
                                                                
META implementConsignmentHeaderData (concrete) // без OVERRIDE для dataArrivalTimeConsignment, dataDowntimeConsignment
    EXTEND CLASS concrete : Consignment;

    dataDate[Consignment] (concrete consignment) += date(consignment);
    number[Consignment] (concrete consignment) += number(consignment);
    series[Consignment] (concrete consignment) += series(consignment);

    payer[Consignment] (concrete consignment) += payer (consignment);

    dataTruck[Consignment] (concrete consignment) += dataTruck (consignment);
    dataTrailer[Consignment] (concrete consignment) += dataTrailer (consignment);
    dataEmployee[Consignment] (concrete consignment) += dataEmployee (consignment);
    dataWaybill[Consignment] (concrete consignment) += waybill (consignment);

    dataAddressSupplierStock[Consignment] (concrete consignment) += dataAddressSupplierStock (consignment);
    dataAddressCustomerStock[Consignment] (concrete consignment) += dataAddressCustomerStock (consignment);

    readdressing[Consignment] (concrete consignment) += readdressing (consignment);
    
    countPages[Consignment] (concrete consignment) += countPages (consignment);

    over##concrete##Base[Consignment] (concrete consignment) += over##concrete##Base (consignment);

    issuanceAllowed[Consignment] (concrete consignment) += issuanceAllowed (consignment);

    issuanceExecuted[Consignment] (concrete consignment) += issuanceExecuted (consignment);

    dataForwarder[Consignment] (concrete consignment) += dataForwarder (consignment);

    warrant[Consignment] (concrete consignment) += warrant (consignment);
    warrantHolder[Consignment] (concrete consignment) += warrantHolder (consignment);

    goodsAccepted[Consignment] (concrete consignment) += goodsAccepted (consignment);
    sealNumberSupplier [Consignment] (concrete consignment) += sealNumberSupplier(consignment);
    sealNumberCustomer [Consignment] (concrete consignment) += sealNumberCustomer(consignment);

    loadingExecuter[Consignment] (concrete consignment) += loadingExecuter (consignment);
    wayOfLoading[Consignment] (concrete consignment) += wayOfLoading (consignment);

    unloadingExecuter[Consignment] (concrete consignment) += unloadingExecuter (consignment);
    wayOfUnloading[Consignment] (concrete consignment) += wayOfUnloading (consignment);

    codeLoading[Consignment] (concrete consignment) += codeLoading (consignment);

    dataArrivalTime[Consignment] (concrete consignment) += arrivalTime(consignment);
    dataDowntime[Consignment] (concrete consignment) += downtime(consignment);   
     
    raceQuantity[Consignment] (concrete consignment) += raceQuantity (consignment);
END

META implementConsignmentDocumentHeader (concrete, object, prefix)

    payer (###object concrete) += payer (concrete);
                                                                                  
    dataTruck (###object concrete) += dataTruck (concrete);
    dataTrailer (###object concrete) += dataTrailer (concrete);
    dataEmployee (###object concrete) += dataEmployee (concrete);
    waybill (###object concrete) += waybill (concrete);

    dataAddressSupplierStock (###object concrete) += dataAddressSupplierStock (concrete);
    dataAddressCustomerStock (###object concrete) += dataAddressCustomerStock (concrete);

    readdressing (###object concrete) += readdressing (concrete);

    countPages (###object concrete) += countPages (concrete);

    overShipmentBase (###object concrete) += overShipmentBase (concrete);

    issuanceAllowed (###object concrete) += issuanceAllowed (concrete);

    issuanceExecuted (###object concrete) += issuanceExecuted (concrete);

    dataForwarder (###object concrete) += dataForwarder (concrete);

    warrant (###object concrete) += warrant (concrete);
    warrantHolder (###object concrete) += warrantHolder (concrete);

    goodsAccepted (###object concrete) += goodsAccepted (concrete);
    sealNumberSupplier (###object concrete) += sealNumberSupplier(concrete);
    sealNumberCustomer (###object concrete) += sealNumberCustomer(concrete);

    loadingExecuter (###object concrete) += loadingExecuter (concrete);
    wayOfLoading (###object concrete) += wayOfLoading (concrete);

    unloadingExecuter (###object concrete) += unloadingExecuter (concrete);
    wayOfUnloading (###object concrete) += wayOfUnloading (concrete);

    codeLoading (###object concrete) += codeLoading (concrete);

    arrivalTime (###object concrete) += arrivalTime (concrete);
    downtime (###object concrete) += downtime (concrete);
        
    raceQuantity (###object concrete) += raceQuantity (concrete);

END

META implementConsignmentInterfaceHeader(object)
    @implementConsignmentDocumentHeader(object, user###object, );
    @implementConsignmentHeader (object);
END
//--

META implementConsignmentDocumentHeaderPrefix (concrete, object, NS)

    payer[NS.NS] (NS concrete) += payer (concrete);

    dataTruck[NS.NS] (NS concrete) += dataTruck (concrete);
    dataTrailer[NS.NS] (NS concrete) += dataTrailer (concrete);
    dataEmployee[NS.NS] (NS concrete) += dataEmployee (concrete);
    waybill[NS.NS] (NS concrete) += waybill (concrete);

    dataAddressSupplierStock[NS.NS] (NS concrete) += dataAddressSupplierStock (concrete);
    dataAddressCustomerStock[NS.NS] (NS concrete) += dataAddressCustomerStock (concrete);

    readdressing[NS.NS] (NS concrete) += readdressing (concrete);

    overShipmentBase[NS.NS] (NS concrete) += overShipmentBase (concrete);

    issuanceAllowed[NS.NS] (NS concrete) += issuanceAllowed (concrete);

    issuanceExecuted[NS.NS] (NS concrete) += issuanceExecuted (concrete);

    dataForwarder[NS.NS] (NS concrete) += dataForwarder (concrete);

    warrant[NS.NS] (NS concrete) += warrant (concrete);
    warrantHolder[NS.NS] (NS concrete) += warrantHolder (concrete);

    goodsAccepted[NS.NS] (NS concrete) += goodsAccepted (concrete);
    sealNumberSupplier [NS.NS] (NS concrete) += sealNumberSupplier(concrete);
    sealNumberCustomer [NS.NS] (NS concrete) += sealNumberCustomer(concrete);

    loadingExecuter[NS.NS] (NS concrete) += loadingExecuter (concrete);
    wayOfLoading[NS.NS] (NS concrete) += wayOfLoading (concrete);

    unloadingExecuter[NS.NS] (NS concrete) += unloadingExecuter (concrete);
    wayOfUnloading[NS.NS] (NS concrete) += wayOfUnloading (concrete);

    codeLoading[NS.NS] (NS concrete) += codeLoading (concrete);
    
    defaultArrivalTime[NS.NS] (NS concrete) += defaultArrivalTime (concrete);        
    arrivalTime[NS.NS] (NS concrete) += arrivalTime (concrete);
    
    defaultDowntime[NS.NS] (NS concrete) += defaultDowntime (concrete);          
    downtime[NS.NS] (NS concrete) += downtime (concrete);

    raceQuantity[NS.NS] (NS concrete) += raceQuantity (concrete);

    countPages[NS.NS] (NS concrete) += countPages (concrete);
END

// -------------------------- Implement строк накладной -------------------- //

META implementConsignmentDetail (concrete, skuProp, batchProp)
    @implementConsignmentDetailInner (concrete, ###concrete, skuProp, batchProp);
END

META implementConsignmentDetailInner (concrete, concreteClass, skuProp, batchProp)
    EXTEND CLASS concreteClass##Detail : ConsignmentDetail;
    
    index[ConsignmentDetail] (###concrete##Detail d) += index (d);
    consignment (###concrete##Detail d) += concrete (d);
    skip (###concrete##Detail d) += skipConsignment (d);
    skuProp[ConsignmentDetail] (###concrete##Detail d) += skuProp (d);
    batchProp[ConsignmentDetail] (###concrete##Detail d) += batchProp (d);    
    quantity[ConsignmentDetail] (###concrete##Detail d) += quantity (d);

    dataPackQuantity (###concrete##Detail d) += packQuantity (d);
    dataGrossWeight (###concrete##Detail d) += sumGrossWeight (d);
END
META implementConsignmentDetail (concrete)
    @implementConsignmentDetail (concrete, sku, batch);
END

// -------------------------- Implement всей накладной -------------------- //

META implementConsignment(concrete, skuProp)
    @implementConsignmentHeader(concrete);
    @implementConsignmentDetail(concrete, skuProp, batchProp);
END

// ------------------------------------- Отпуск товара --------------------------------- //

GROUP invoiceConsignment 'Накладная' : base;

truck= DATA Truck (LegalEntity);
nameTruck 'Автомобиль' (LegalEntity l) =name(truck(l)); 

driver= DATA Employee (LegalEntity);
nameDriver 'Водитель' (LegalEntity l) =shortName(driver(l)); 

EXTEND FORM legalEntity 
    PROPERTIES(l) nameTruck, nameDriver
;
DESIGN legalEntity {
    extendContainer {
        NEW consignment {
            caption = 'Оформление накладных';
            MOVE PROPERTY (nameTruck(l));
            MOVE PROPERTY (nameDriver(l)); 
        }
    }
}

nameConsigmentLegalEntity 'Наименование юр. лица' = DATA VARSTRING[200] (Stock) IN invoiceConsignment PREFCHARWIDTH 30;
overFullNameSupplier(Consignment consignment) += nameConsigmentLegalEntity(supplierStock(consignment));
overFullNameCustomer(Consignment consignment) += nameConsigmentLegalEntity(customerStock(consignment));

addressConsigmentLegalEntity 'Юр. адрес отправителя' = DATA VARISTRING[150] (Stock) IN invoiceConsignment PREFCHARWIDTH 30;
overAddressSupplier(Consignment consignment) += addressConsigmentLegalEntity(supplierStock(consignment));
overAddressCustomer(Consignment consignment) += addressConsigmentLegalEntity(customerStock(consignment));

issuanceAllowed = DATA Employee (Stock);
nameIssuanceAllowed 'Отпуск разрешил' (Stock stock) = name[Contact](issuanceAllowed(stock)) IN invoiceConsignment;

issuanceExecuted  = DATA Employee(Stock);
nameIssuanceExecuted 'Отпуск произвел' (Stock stock) = name[Contact](issuanceExecuted(stock)) IN invoiceConsignment;

loadingExecuter = DATA LegalEntity(Stock);
nameLoadingExecuter 'Исполнитель погрузки' (Stock stock) = name(loadingExecuter(stock)) IN invoiceConsignment;

wayOfLoading = DATA WayOfLoading(Stock);
nameWayOfLoading 'Способ погрузки' (Stock stock) = name(wayOfLoading(stock)) IN invoiceConsignment;

unloadingExecuter = DATA LegalEntity(Stock);
nameUnloadingExecuter 'Исполнитель разгрузки' (Stock stock) = name(unloadingExecuter(stock)) IN invoiceConsignment;

wayOfUnloading = DATA WayOfLoading(Stock);
nameWayOfUnloading 'Способ разгрузки' (Stock stock) = name(wayOfUnloading(stock)) IN invoiceConsignment;

codeLoading 'Код ПРР' = DATA STRING[3] (Stock)IN invoiceConsignment;

META deriveConsignmentProperty(objectClass, property, stockProp)
    property (###objectClass o) <- property(stockProp(o))
        WHEN CHANGED(stockProp(o));
END
META deriveConsignmentPropertyALL(stockProp)
    @deriveConsignmentProperty(userInvoice, issuanceAllowed, stockProp);
    @deriveConsignmentProperty(userInvoice, issuanceExecuted, stockProp);
    @deriveConsignmentProperty(userInvoice, loadingExecuter, stockProp);
    @deriveConsignmentProperty(userInvoice, unloadingExecuter, stockProp);
    @deriveConsignmentProperty(userInvoice, wayOfLoading, stockProp);
    @deriveConsignmentProperty(userInvoice, wayOfUnloading, stockProp);
    @deriveConsignmentProperty(userInvoice, codeLoading, stockProp);          
END

META deriveConsignmentPropertyALL(object, stockProp)
    @deriveConsignmentProperty(object, issuanceAllowed, stockProp);
    @deriveConsignmentProperty(object, issuanceExecuted, stockProp);
    @deriveConsignmentProperty(object, loadingExecuter, stockProp);
    @deriveConsignmentProperty(object, unloadingExecuter, stockProp);
    @deriveConsignmentProperty(object, wayOfLoading, stockProp);
    @deriveConsignmentProperty(object, wayOfUnloading, stockProp);
    @deriveConsignmentProperty(object, codeLoading, stockProp);          
END

