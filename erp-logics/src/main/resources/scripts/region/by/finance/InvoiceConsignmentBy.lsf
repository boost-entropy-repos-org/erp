MODULE InvoiceConsignmentBy;

REQUIRE Invoice,
        ConsignmentBy;

NAMESPACE Invoice;

@defineConsignmentAbstractHeader(invoice);
@implementConsignmentHeader (Invoice);
//@implementConsignmentDetail (invoice){
//    @implementConsignmentDetail (invoice, sku, batch){
//    @implementConsignmentDetailInner (invoice, Invoice, sku, batch){
//    EXTEND CLASS InvoiceDetail : ConsignmentDetail;
//    
//    index[ConsignmentDetail] (InvoiceDetail d) += index (d);
//    consignment (InvoiceDetail d) += invoice (d);
//    skip (InvoiceDetail d) += skipConsignment (d);
//    sku[ConsignmentDetail] (InvoiceDetail d) += sku (d);
//    batch[ConsignmentDetail] (InvoiceDetail d) += batch (d);    
//    quantity[ConsignmentDetail] (InvoiceDetail d) += quantity (d);
//
//    dataPackQuantity (InvoiceDetail d) += packQuantity (d);
//    dataGrossWeight (InvoiceDetail d) += sumGrossWeight (d);
//};
//};
//};

EXTEND CLASS InvoiceDetail : ConsignmentDetail;

index[ConsignmentDetail] (InvoiceDetail d) += index (d);
consignment (InvoiceDetail d) += invoice (d);
skip (InvoiceDetail d) += skipConsignment (d);
dataSku[ConsignmentDetail] (InvoiceDetail d) += sku (d);
batch[ConsignmentDetail] (InvoiceDetail d) += batch (d);    
dataQuantity[ConsignmentDetail] (InvoiceDetail d) += quantity (d);

dataPackQuantity (InvoiceDetail d) += packQuantity (d);
dataGrossWeight (InvoiceDetail d) += sumGrossWeight (d);

dataSupplier (Invoice consignment) += from(consignment);
supplierStock[Consignment] (Invoice consignment) += fromStock(consignment);

dataCustomer (Invoice consignment) += to(consignment);
customerStock[Consignment] (Invoice consignment) += toStock(consignment);

dataCurrency (Invoice consignment) += currency(consignment);

dataPrice (InvoiceDetail detail) += price(detail);
invoicePrice[ConsignmentDetail](InvoiceDetail detail) += invoicePrice(detail);
invoiceSum[ConsignmentDetail](InvoiceDetail detail) += invoiceSum(detail);

dataSum (InvoiceDetail detail) += sum(detail);
dataVat (InvoiceDetail detail) += valueVAT(detail);

dataSumVAT (InvoiceDetail detail) += VATSum(detail);
dataSumInvoice (InvoiceDetail detail) += invoiceSum(detail);
dataNote[ConsignmentDetail] (InvoiceDetail detail) += note(detail);
extraDescription[ConsignmentDetail] (InvoiceDetail detail) += extraDescription(detail);

DESIGN options { consignment { MOVE PROPERTY(notNullInvoiceVAT()); } }

META defineInvoiceConsignment(contactA, contactB)

    @defineConsignmentInterfaceHeader(invoice);
    @implementConsignmentDocumentHeader(invoice, userInvoice, );

    EXTEND FORM  invoices
        PROPERTIES(i) FORCE PANEL editAttributes
        PROPERTIES(i) FORCE PANEL SHOWIF showTTN1(i) READONLYIF banPrint(i)
                         printVerticalA, printVerticalAB, printHorizontalA,
                         printVerticalB, printHorizontalB, printAttach, printVerticalABAttach,
                         printVertical, printHorizontal, printHorizontalAB, printAttachXLS, printSimpleAttachXLS, 
                         printVerticalAttach, printHorizontalAttach 
        PROPERTIES(i) FORCE PANEL SHOWIF showTN2(i) READONLYIF banPrint(i)
                         printSimpleHorizontal, printSimpleVertical, printSimpleAttach, printSimpleVerticalAttach, printSimpleHorizontalAttach
    ;

    DESIGN invoices {
        printTab {
            NEW consignmentRow1 {
                align = LEADING;
                type = CONTAINERH;

                NEW contOne {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    caption = 'Накладная';
                    MOVE PROPERTY(editAttributes(i)) {
                        alignment = STRETCH;
                    }
                }
                NEW tn2 {
                    alignment = STRETCH;
                    type = COLUMNS;
                    columns = 3;
                    caption = 'ТН-2';
                    MOVE PROPERTY(printSimpleVertical(i));
                    MOVE PROPERTY(printSimpleHorizontal(i));
                    MOVE PROPERTY(printSimpleAttach(i));
                    MOVE PROPERTY(printSimpleVerticalAttach(i));
                    MOVE PROPERTY(printSimpleHorizontalAttach(i));
                }
            }
            NEW consignmentRow2 {
                align = LEADING;
                type = COLUMNS;
                columns = 3;
                caption = 'ТТН-1';
                MOVE PROPERTY(printVerticalA(i));
                MOVE PROPERTY(printVerticalAB(i));
                MOVE PROPERTY(printHorizontalA(i));
                MOVE PROPERTY(printVerticalB(i));
                MOVE PROPERTY(printHorizontalB(i));                
                MOVE PROPERTY(printAttach(i));      
                MOVE PROPERTY(printVertical(i));  
                MOVE PROPERTY(printHorizontal(i));
                MOVE PROPERTY(printHorizontalAB(i));
                MOVE PROPERTY(printVerticalAttach(i));                
                MOVE PROPERTY(printVerticalABAttach(i)); 
                MOVE PROPERTY(printHorizontalAttach(i));                
            }
            NEW consignmentRow3 {
                type = CONTAINERH;            
                NEW export {
                    type = CONTAINERH;
                    caption = 'Экспорт';  
                    MOVE PROPERTY(printAttachXLS(i));  
                    MOVE PROPERTY(printSimpleAttachXLS(i));                                                 
                }
            }    
        }
    }
END

seriesCharToNum = FORMULA 'lpad(CAST(CASE WHEN ASCII($1) < 1049 THEN ASCII($1) - 1039 ELSE ASCII($1) - 1041 END as char(2)), 2, \'0\')';
TTN1series (s) = '861' + seriesCharToNum(left(s,1)) + seriesCharToNum(right(s,1));

ttn1SeriesNumber(Invoice i) = TTN1series(series(i)) + number(i); 
