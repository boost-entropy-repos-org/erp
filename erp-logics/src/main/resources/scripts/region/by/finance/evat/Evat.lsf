MODULE EVAT;

REQUIRE System, Finance, LegalEntityBy, Item, Warehouse;

// Атрибуты для счет-фактуры

CLASS ABSTRACT EVATDocument 'Регистр-основание';
TABLE EVATDocument(EVATDocument);

needCreateEVAT 'Необходимо создавать' = ABSTRACT CASE BOOLEAN (EVATDocument);
isPosted 'Проведен' = ABSTRACT BOOLEAN (EVATDocument);
overNeedCreateEVAT (EVATDocument d) = needCreateEVAT(d) AND isPosted(d);

name 'Регистр-основание' = ABSTRACT VARSTRING[200] (EVATDocument) ;
number 'Номер' = ABSTRACT VARSTRING[100] (EVATDocument) IN numbered MINCHARWIDTH 7;
series 'Серия' = ABSTRACT STRING[2] (EVATDocument) IN numbered FIXEDCHARWIDTH 3;
seriesNumber 'Серия/Номер' (EVATDocument d) = CONCAT '', series(d), number(d) MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20;

VATSum 'Сумма НДС' = ABSTRACT NUMERIC[18,4] (EVATDocument) MINCHARWIDTH 10 PREFCHARWIDTH 15;

dateTime 'Дата/время' = ABSTRACT DATETIME (EVATDocument);
date 'Дата' (EVATDocument document) = toDate(dateTime(document));
time 'Время' (EVATDocument document) = toTime(dateTime(document));

GROUP consignor 'Реквизиты грузоотправителя' : base;
GROUP consignee 'Реквизиты грузополучателя' : base;
GROUP register 'Основание' : base;

branchCode 'Код подразделения (для ЭСЧФ)' = DATA INTEGER (Warehouse);
EXTEND FORM warehouse
    PROPERTIES(w) branchCode
;

CLASS EVATType 'Тип счет-фактуры';
TABLE EVATType(EVATType);
name 'Тип' (EVATType t) = staticCaption(t) IF t IS EVATType;

FORM EVATTypes 'Типы счет-фактур'
    OBJECTS t = EVATType FIXED GRID
    PROPERTIES(t) READONLY name
    
    DIALOG EVATType OBJECT t
;

type = ABSTRACT EVATType (EVATDocument);
nameType 'Тип' (EVATDocument d) = name(type(d));

CLASS EVAT 'Электронный счёт-фактура';
TABLE evat(EVAT);

CLASS EVATStatus 'Статус' {
    original 'Исходный',
    fixed 'Исправленный',
    additional 'Дополнительный',
    additionalNoRef 'Дополнительный без ссылки',
    cancelled 'Отменённый'
}

FORM evatStatuses
    OBJECTS e = EVATStatus
    PROPERTIES(e) READONLY staticCaption
    DIALOG EVATStatus OBJECT e
;

CLASS EVATServerStatus 'Статус на сервере' {
    notFound 'NOT_FOUND',
    denied 'DENIED',
    completed 'COMPLETED',
    completedSigned 'COMPLETED_SIGNED',
    inProgress 'IN_PROGRESS',
    cancelled 'CANCELLED',
    onAgreementCancel 'ON_AGREEMENT_CANCEL',
    error 'ERROR'
}

FORM evatServerStatuses
    OBJECTS e = EVATServerStatus
    PROPERTIES(e) READONLY staticCaption
    DIALOG EVATServerStatus OBJECT e
;


CLASS LegalEntityStatus 'Статус' {
    seller 'Продавец',
    consignor 'Комитент',
    commissionaire 'Комиссионер',
    taxDeductionPayer 'Плательщик, передающий налоговые вычеты',
    trustee 'Доверительный управляющий',
    foreignOrganization 'Иностранная организация',
    agent 'Посредник',
    developer 'Заказчик (застройщик)',
    tornoversOnSalePayer 'Плательщик, передающий обороты по реализации',
    customer 'Покупатель',
    consumer 'Потребитель',
    taxDeductionRecipient 'Покупатель, получающий налоговые вычеты',
    foreignOrganizationBuyer 'Покупатель объектов у иностранной организации',
    turnoversOnSaleRecipient 'Покупатель, получающий обороты по реализации'    
}

FORM legalEntityStatuses
    OBJECTS p = LegalEntityStatus
    PROPERTIES(p) READONLY staticCaption
    DIALOG LegalEntityStatus OBJECT p
;

serviceUrlEVAT 'Адрес  WSDL (EVAT)' = DATA VARSTRING[100] (Computer);
serviceUrlEVAT 'Адрес WSDL (EVAT)' () = serviceUrlEVAT(currentComputer()); 
pathEVAT 'Путь к jar и xsd (EVAT)' = DATA VARSTRING[100] (Computer);
pathEVAT 'Путь к jar и xsd (EVAT)' () = pathEVAT(currentComputer()); 
exportPathEVAT 'Путь для xml-файлов(EVAT)' = DATA VARSTRING[100] (Computer);
exportPathEVAT 'Путь для xml-файлов(EVAT)' () = exportPathEVAT(currentComputer()); 
passwordEVAT 'Пароль (EVAT)' = DATA VARSTRING[100] (Computer) ECHO;
passwordEVAT 'Пароль (EVAT)' () = passwordEVAT(currentComputer());
certIndexEVAT 'Номер сертификата (EVAT)' = DATA INTEGER (Computer);
certIndexEVAT 'Номер сертификата (EVAT)' () = certIndexEVAT(currentComputer()); 
useActiveXEVAT 'Работать через COM-объект (EVAT)' = DATA BOOLEAN (); 

EXTEND FORM computer PROPERTIES(c) serviceUrlEVAT, pathEVAT, exportPathEVAT, passwordEVAT, certIndexEVAT;
EXTEND FORM computers PROPERTIES(c) READONLY serviceUrlEVAT, pathEVAT, exportPathEVAT, passwordEVAT, certIndexEVAT;

EXTEND FORM options PROPERTIES() useActiveXEVAT;
DESIGN options {
    pane {
        NEW EVAT {
            caption = 'ЭСЧФ';
            MOVE PROPERTY(useActiveXEVAT());
        }
    }
}

generateXMLAction 'Сгенерировать XML' = ACTION CUSTOM 'lsfusion.erp.region.by.finance.evat.GenerateXMLEVATActionProperty'(EVAT); 
evatAction = ACTION CUSTOM 'lsfusion.erp.region.by.finance.evat.EVATActionProperty'(INTEGER); 
signAndSend 'Сгенерировать, подписать и отправить' (EVAT evat) = ACTION { evatAction(0); }
getStatus 'Получить статус ЭСЧФ' () = ACTION { evatAction(1); }

formExportFile() = DATA LOCAL CUSTOMFILE ();

type = DATA EVATType (EVAT);
nameType 'Тип' (EVAT evat) = name(type(evat));

status = DATA EVATStatus (EVAT);
nameStatus 'Статус' (EVAT evat) = staticName(status(evat));
captionStatus 'Статус' (EVAT evat) = staticCaption(status(evat));

@defineNumbered(EVAT);
@defineNumeratedDefault(EVAT, 'ЭСЧФ', 'ЭС');

exported 'Выгружен' = DATA BOOLEAN (EVAT);
result 'Ответ сервера' = DATA TEXT (EVAT);

CONSTRAINT DROPPED (EVAT e IS EVAT) AND PREV (exported(e)) MESSAGE 'Запрещено удалять Выгруженные счета-фактуры';

//rename to serverStatus
statusServerStatus = DATA EVATServerStatus (EVAT);
nameServerStatus 'Статус на сервере'(EVAT e) = staticName(statusServerStatus(e));  
captionServerStatus 'Статус на сервере'(EVAT e) = staticCaption(statusServerStatus(e));  

EVATDocument 'Регистр' = DATA EVATDocument (EVAT);
EVAT 'ЭСЧФ' (EVATDocument d) = GROUP MAX EVAT e BY EVATDocument(e);

@defineOption(notNullEVATDocument, 'Запрет на отсутствие исходного документа для ЭСЧФ', EVAT);


CONSTRAINT notNullEVATDocument() AND EVAT e IS EVAT AND NOT EVATDocument(e)
    MESSAGE 'У ЭСЧФ должна быть задана ссылка на исходный документ';

seriesNumberEVATDocument 'Регистр (серия/номер)' (EVAT e) = seriesNumber(EVATDocument(e)) MINCHARWIDTH 7 PREFCHARWIDTH 15 MAXCHARWIDTH 20 IN register; 
dateEVATDocument 'Регистр (дата)' (EVAT e) = date(EVATDocument(e)) IN register; 

in 'Вкл.' = DATA LOCAL BOOLEAN (EVAT);
invoice 'К ЭСЧФ' = DATA VARSTRING[100] (EVAT);
date 'Дата совершения операции' = DATA DATE (EVAT);
dateCancelled 'Дата аннулирования' = DATA DATE (EVAT);
sendToRecipient 'Отобразить получателю' = DATA BOOLEAN (EVAT);
numberInvoicePrincipal 'Номер ЭСЧФ комитента' = DATA VARSTRING[100] (EVAT);
dateInvoicePrincipal 'Дата ЭСЧФ комитента' = DATA DATE (EVAT);
numberInvoiceVendor 'Номер ЭСЧФ продавца' = DATA VARSTRING[100] (EVAT);
dateInvoiceVendor 'Дата ЭСЧФ продавца' = DATA DATE (EVAT);

declarationSupplier 'Регистрационный номер выпуска товаров поставщика' = DATA VARSTRING[100] (EVAT);
dateReleaseSupplier 'Дата выпуска товаров поставщика' = DATA DATE (EVAT);
dateActualExportSupplier 'Дата разрешения на убытие товаров поставщика' = DATA DATE (EVAT);
numberTaxesSupplier 'Номер заявления о ввозе товаров и уплате косвенных налогов поставщика' = DATA VARSTRING[100] (EVAT);
dateTaxesSupplier 'Дата заявления поставщика о ввозе товаров и уплате косвенных налогов поставщика' = DATA DATE (EVAT);

declarationCustomer 'Регистрационный номер выпуска товаров получателя' = DATA VARSTRING[100] (EVAT);
numberTaxesCustomer 'Номер заявления о ввозе товаров и уплате косвенных налогов получателя' = DATA VARSTRING[100] (EVAT);
dateTaxesCustomer 'Дата заявления получателя о ввозе товаров и уплате косвенных налогов получателя' = DATA DATE (EVAT);
dateImportCustomer 'Дата ввоза товаров получателя' = DATA DATE (EVAT);

skipDeliveryCondition 'Пропустить блоки SenderReceiver и DeliveryCondition' = DATA BOOLEAN (EVAT);
numberContract 'Номер договора на поставку товара' = DATA VARSTRING[100] (EVAT);
dateContract 'Дата договора на поставку товара' = DATA DATE (EVAT);
codeDocType 'Код вида документа' = DATA INTEGER (EVAT);
valueDocType 'Название вида документа' = DATA VARSTRING[100] (EVAT);
blankCodeDoc 'Код типа бланка' = DATA VARSTRING[100] (EVAT);
dataDateDoc 'Дата' = DATA DATE (EVAT);
dateDoc 'Дата' (EVAT e)= OVERRIDE date(e), dataDateDoc(e);
seriesDoc 'Серия' = DATA VARSTRING[100] (EVAT);
numberDoc 'Номер' = DATA VARSTRING[100] (EVAT);
descriptionDoc 'Дополнительные сведения' = DATA VARSTRING[100] (EVAT);
unpSender 'Субъект хозяйствования, составляющий ЭСЧФ' = DATA VARSTRING[100](EVAT);
exportYear 'Год для экспорта' = DATA INTEGER (EVAT);
exportNumber 'Номер для экспорта' (EVAT e) = unpSender(e) + '-' + (OVERRIDE Time.extractYear(currentDate()) IF e IS EVAT, exportYear(e) ) + '-' + VARSTRING[100](lpad(number(e), 10, '0'));

WHEN SET(exported(EVAT e)) 
     DO exportYear(e) <- Time.extractYear(currentDate());


UNPForeign 'УНП (иностр.)' = DATA VARSTRING[50] (LegalEntity) IN doc MINCHARWIDTH 15 PREFCHARWIDTH 20;
CONSTRAINT sid(country(LegalEntity l)) != '112' AND NOT toShowIndividual(l) AND NOT UNPForeign(l) MESSAGE 'Для организации должен быть задан УНП';

toShowForeign(LegalEntity l) += l IS LegalEntity AND country('112') != country(l) AND NOT toShowIndividual(l);
EXTEND FORM legalEntity
    PROPERTIES (l) SHOWIF toShowForeign(l) UNPForeign
;
EXTEND FORM legalEntities
    PROPERTIES (l) READONLY UNPForeign
;


//Поставщик
supplier 'Поставщик' = DATA LegalEntity(EVAT);
nameSupplier 'Поставщик' (EVAT evat) = OVERRIDE name(supplier(evat)), fullName(supplier(evat));
branchCodeSupplier 'Код филиала поставщика' = DATA INTEGER (EVAT);
addressSupplier 'Адрес поставщика' (EVAT evat) = address(supplier(evat));
dependentPersonSupplier 'Взаимозависимое лицо' = DATA BOOLEAN (EVAT);
residentsOfOffshoreSupplier ' Сделка с резидентом оффшорной зоны ' = DATA BOOLEAN (EVAT);
specialDealGoodsSupplier 'Спец. сделка' = DATA BOOLEAN (EVAT);
bigCompanySupplier 'Крупный плательщик (поставщик)' = DATA BOOLEAN (EVAT);
//countryConsignor = DATA Country(EVAT);// страна ввоза
//countryCodeSupplier 'Код страны грузоотправителя' (EVAT evat) = sid(OVERRIDE country(supplier(evat)), countryConsignor(evat));
countryCodeSupplier 'Код страны поставщика' (EVAT evat) = sid(country(supplier(evat)));
unpSupplier 'УНП поставщика' (EVAT evat) = OVERRIDE UNP(supplier(evat)), UNPForeign(supplier(evat));
legalEntityStatusSupplier 'Статус поставщика' = DATA LegalEntityStatus (EVAT);
nameLegalEntityStatusSupplier 'Статус поставщика' (EVAT evat) = staticName(legalEntityStatusSupplier(evat));
captionLegalEntityStatusSupplier 'Статус поставщика' (EVAT evat) = staticCaption(legalEntityStatusSupplier(evat));


//Получатель.
noCustomer 'Без покупателя' = DATA BOOLEAN (EVAT);

customer 'Получатель' = DATA LegalEntity(EVAT);
nameCustomer 'Получатель' (EVAT evat) = OVERRIDE name(customer(evat)), fullName(customer(evat));
branchCodeCustomer 'Код филиала получателя' = DATA INTEGER (EVAT);
addressCustomer 'Адрес получателя' (EVAT evat) = address(customer(evat));
dependentPersonCustomer 'Взаимозависимое лицо' = DATA BOOLEAN (EVAT);
residentsOfOffshoreCustomer 'Сделка с резидентом оффшорной зоны ' = DATA BOOLEAN (EVAT);
specialDealGoodsCustomer 'Спец. сделка' = DATA BOOLEAN (EVAT);
bigCompanyCustomer 'Крупный плательщик (получатель)' = DATA BOOLEAN (EVAT);
countryCodeCustomer 'Код страны получателя' (EVAT evat) = sid(country(customer(evat)));
unpCustomer 'УНП получателя' (EVAT evat) = UNP(customer(evat));
legalEntityStatusCustomer 'Статус получателя' = DATA LegalEntityStatus (EVAT);
nameLegalEntityStatusCustomer 'Статус получателя' (EVAT evat) = staticName(legalEntityStatusCustomer(evat));
captionLegalEntityStatusCustomer 'Статус получателя' (EVAT evat) = staticCaption(legalEntityStatusCustomer(evat));

//-- Грузоотправитель
consignor 'Грузоотправитель'  = DATA VARISTRING[200](EVAT) IN consignor;
countryCodeConsignor 'Код страны грузоотправителя' = DATA VARSTRING[50] (EVAT) IN consignor;
unpConsignor 'УНП грузоотправителя'  = DATA VARSTRING[50] (EVAT) IN consignor;
shippingAddressConsignor 'Адрес отправки' = DATA VARSTRING[150] (EVAT) IN consignor;

//-- 
consignee 'Грузополучатель' = DATA VARISTRING[200](EVAT) IN consignee;
countryCodeConsignee 'Код страны грузополучателя' = DATA VARSTRING[50] (EVAT) IN consignee;
unpConsignee 'УНП грузополучателя'  = DATA VARSTRING[50] (EVAT) IN consignee;
shippingAddressConsignee 'Адрес доставки' = DATA VARSTRING[150] (EVAT) IN consignee;

//Товар
CLASS EVATDetail 'Строка электронного счёта-фактуры';
TABLE evatDetail(EVATDetail);

evat = DATA EVAT (EVATDetail) NOT NULL DELETE;
objValue (EVATDetail d) = INTEGER(d AS EVATDetail);
name 'Наименование' = DATA VARSTRING[255] (EVATDetail);
code 'Код ТНВЭД' = DATA VARSTRING[10] (EVATDetail);
shortNameUOM 'Ед. изм.' (EVATDetail evatDetail) = DATA VARISTRING[100] (EVATDetail);
codeOced 'Код видов деятельности (ОКЭД)' = DATA VARSTRING[100] (EVATDetail);
quantity 'Количество' = DATA NUMERIC[16,5] (EVATDetail); 
price 'Цена' = DATA NUMERIC[16,5] (EVATDetail);
sum 'Сумма' = DATA NUMERIC[16,5] (EVATDetail);
exciseSum 'Сумма акциза' = DATA NUMERIC[16,5] (EVATDetail);
vatRate 'Ставка НДС' = DATA NUMERIC[16,5] (EVATDetail);
vatSum 'Сумма НДС' = DATA NUMERIC[16,5] (EVATDetail);
sumWithVAT 'Сумма с НДС' = DATA NUMERIC[16,5] (EVATDetail);

CLASS DescriptionType 'Описание' {
    deductionInFull 'Вычет в полном объеме',
    vatExcemption 'Освобождение от НДС',
    outsideRB 'Реализация за пределами Республики Беларусь',
    importVAT 'Ввозной НДС'
}

FORM descriptionTypes
    OBJECTS d = DescriptionType
    PROPERTIES(d) READONLY staticCaption
    DIALOG DescriptionType OBJECT d
;

descriptionType = DATA DescriptionType(EVATDetail);
nameDescriptionType (EVATDetail evatDetail) = staticName(descriptionType(evatDetail));
captionDescriptionType 'Описание' (EVATDetail evatDetail)= staticCaption(descriptionType(evatDetail));

totalSum 'Сумма (всего)'(EVAT evat) = GROUP SUM sum(EVATDetail evatDetail) IF evat(evatDetail) == EVAT evat BY evat;  
totalExciseSum 'Сумма акциза (всего)' (EVAT evat) = GROUP SUM exciseSum(EVATDetail evatDetail)  IF evat(evatDetail) == EVAT evat BY evat;
totalVATSum 'Сумма НДС (всего)' (EVAT evat) = GROUP SUM vatSum(EVATDetail evatDetail)  IF evat(evatDetail) == EVAT evat BY evat;
totalSumWithVAT 'Сумма с НДС (всего)' (EVAT evat) = GROUP SUM sumWithVAT(EVATDetail evatDetail)  IF evat(evatDetail) == EVAT evat BY evat;

FORM evat 'Электронная счёт-фактура'
    OBJECTS e=EVAT FIXED PANEL
    PROPERTIES(e) nameType, captionStatus, unpSender, number, exportYear, exportNumber, invoice, date, dateCancelled, sendToRecipient, exported, result, captionServerStatus,
                  captionLegalEntityStatusSupplier, consignor, unpConsignor, countryCodeConsignor, shippingAddressConsignor,
                  consignee, unpConsignee, countryCodeConsignee, shippingAddressConsignee,  
                  bigCompanySupplier, dependentPersonSupplier, residentsOfOffshoreSupplier, specialDealGoodsSupplier,
                  captionLegalEntityStatusCustomer, bigCompanyCustomer, dependentPersonCustomer, residentsOfOffshoreCustomer, specialDealGoodsCustomer,
                  numberInvoicePrincipal, dateInvoicePrincipal, numberInvoiceVendor,
                  dateInvoiceVendor, dateEVATDocument, seriesNumberEVATDocument,  
                  nameSupplier, unpSupplier, countryCodeSupplier, addressSupplier, 
                  nameCustomer, unpCustomer, countryCodeCustomer, addressCustomer, 
                  branchCodeSupplier, declarationSupplier, dateReleaseSupplier, dateActualExportSupplier,
                  numberTaxesSupplier, dateTaxesSupplier, branchCodeCustomer, declarationCustomer, numberTaxesCustomer, dateTaxesCustomer, dateImportCustomer,
                  skipDeliveryCondition, numberContract, dateContract, codeDocType, valueDocType, blankCodeDoc, dateDoc, seriesDoc, numberDoc, descriptionDoc, 
                  totalSum, totalExciseSum, totalVATSum, totalSumWithVAT

    OBJECTS d = EVATDetail
    PROPERTIES(d) name, shortNameUOM, code, quantity, price, sum, exciseSum, vatRate, vatSum, sumWithVAT, captionDescriptionType, ADDOBJ
    FILTERS evat(d) == e
    EDIT EVAT OBJECT e
;

DESIGN evat {
    MOVE PROPERTY(nameType(e));
    MOVE PROPERTY(captionStatus(e));
    NEW top {
        type = TABBED;
        fill = 1;
        NEW general {
            caption = 'Общие';
            fill = 1;
            MOVE PROPERTY(unpSender(e));
            MOVE PROPERTY(number(e));
            MOVE PROPERTY(exportYear(e));
            MOVE PROPERTY(exportNumber(e));
            MOVE PROPERTY(date(e));
            MOVE PROPERTY(invoice(e));
            MOVE PROPERTY(dateCancelled(e));
            MOVE PROPERTY(sendToRecipient(e));
            MOVE PROPERTY(result(e));
            MOVE PROPERTY(captionServerStatus(e));
            MOVE PROPERTY(exported(e));
            MOVE e.register;
        }
        NEW supplier{
            caption = 'Поставщик';
            fill = 1;
            MOVE PROPERTY(nameSupplier(e));
            MOVE PROPERTY(unpSupplier(e));
            MOVE PROPERTY(countryCodeSupplier(e));
            MOVE PROPERTY(addressSupplier(e));            
            MOVE PROPERTY(captionLegalEntityStatusSupplier(e));
            MOVE PROPERTY(bigCompanySupplier(e));
            MOVE PROPERTY(dependentPersonSupplier(e));
            MOVE PROPERTY(residentsOfOffshoreSupplier(e));
            MOVE PROPERTY(specialDealGoodsSupplier(e));
            MOVE PROPERTY(numberInvoicePrincipal(e));
            MOVE PROPERTY(dateInvoicePrincipal(e));
            MOVE PROPERTY(numberInvoiceVendor(e));
            MOVE PROPERTY(dateInvoiceVendor(e));
            MOVE PROPERTY(branchCodeSupplier(e));
            MOVE PROPERTY(declarationSupplier(e));
            MOVE PROPERTY(dateReleaseSupplier(e));
            MOVE PROPERTY(dateActualExportSupplier(e));
            MOVE PROPERTY(numberTaxesSupplier(e));
            MOVE PROPERTY(dateTaxesSupplier(e));
            MOVE e.consignor { type = CONTAINERV;}
        }
        NEW customer{
            caption = 'Получатель';
            fill = 1;
            MOVE PROPERTY(nameCustomer(e));
            MOVE PROPERTY(unpCustomer(e));
            MOVE PROPERTY(countryCodeCustomer(e));
            MOVE PROPERTY(addressCustomer(e));  
            MOVE PROPERTY(captionLegalEntityStatusCustomer(e));
            MOVE PROPERTY(bigCompanyCustomer(e));
            MOVE PROPERTY(dependentPersonCustomer(e));
            MOVE PROPERTY(residentsOfOffshoreCustomer(e));
            MOVE PROPERTY(specialDealGoodsCustomer(e));
            MOVE PROPERTY(branchCodeCustomer(e));
            MOVE PROPERTY(declarationCustomer(e));
            MOVE PROPERTY(numberTaxesCustomer(e));
            MOVE PROPERTY(dateTaxesCustomer(e));
            MOVE PROPERTY(dateImportCustomer(e));
            MOVE e.consignee { type = CONTAINERV;}
        }           
        NEW deliveryCondition {
            caption = 'Условия поставки';
            fill = 1;
            MOVE PROPERTY(skipDeliveryCondition(e));
            MOVE PROPERTY(numberContract(e));
            MOVE PROPERTY(dateContract(e));
            MOVE PROPERTY(codeDocType(e));
            MOVE PROPERTY(valueDocType(e));
            MOVE PROPERTY(blankCodeDoc(e));
            MOVE PROPERTY(dateDoc(e));
            MOVE PROPERTY(seriesDoc(e));
            MOVE PROPERTY(numberDoc(e));
            MOVE PROPERTY(descriptionDoc(e));
        }
        NEW roster {
            caption = 'Данные по товарам';
            fill = 1;
            MOVE PROPERTY(totalSum(e));
            MOVE PROPERTY(totalExciseSum(e));
            MOVE PROPERTY(totalVATSum(e));
            MOVE PROPERTY(totalSumWithVAT(e));            
            MOVE d.box;
        }
    }

    MOVE functions.box;
}

blankCodeDoc 'Номер бланка' = DATA VARSTRING[100] ();

filterType = DATA LOCAL EVATType ();
nameFilterType 'Тип' = name(filterType());

FORM evats 'Электронные счета-фактуры'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES dFrom = OBJVALUE(dFrom), dTo = OBJVALUE(dTo)
    PROPERTIES() nameFilterType

    OBJECTS e = EVAT
    PROPERTIES(e) in
    PROPERTIES(e) READONLYIF isReadonly() exported, captionStatus, captionServerStatus, dateEVATDocument, seriesNumberEVATDocument, unpSender, number, exportYear, exportNumber, invoice, date, dateDoc, numberDoc, seriesDoc, dateCancelled, sendToRecipient, numberInvoicePrincipal,
                  dateInvoicePrincipal, numberInvoiceVendor, dateInvoiceVendor, nameSupplier, declarationSupplier, dateReleaseSupplier, dateActualExportSupplier,
                  numberTaxesSupplier, dateTaxesSupplier, nameCustomer, declarationCustomer, numberTaxesCustomer, dateTaxesCustomer, dateImportCustomer, totalSum,
                  totalExciseSum, totalVATSum, totalSumWithVAT
    PROPERTIES(e) TOOLBAR generateXMLAction, signAndSend
    PROPERTIES() TOOLBAR TODRAW e getStatus
    PROPERTIES(e) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(e) DELETESESSION
    FILTERS date(e) >= dFrom, date(e) <= dTo,
            type(e) == filterType() OR NOT filterType()
    
     
    OBJECTS d = EVATDetail
    PROPERTIES(d) READONLYIF isReadonly() name, shortNameUOM, code, quantity, price, sum, exciseSum, vatRate, vatSum, sumWithVAT, captionDescriptionType
    FILTERS evat(d) == e
    DIALOG EVAT OBJECT e

    OBJECTS l = LegalEntity FIXED PANEL
    PROPERTIES(l) name SELECTOR
    FILTERS isCompany(l)
    
    PROPERTIES() blankCodeDoc
;

DESIGN evats {
    NEW filters BEFORE e.box {
        MOVE dates.box {
            dates.panel.props {
                type = CONTAINERH;
                PROPERTY(dFrom) {
                    caption = 'Дата с';
                }
                PROPERTY(dTo) {
                    caption = 'Дата по';
                }
                MOVE PROPERTY(nameFilterType());
            }
        }
    }
    NEW pane AFTER e.box{
        type = TABBED;
        fill = 1;
        
        MOVE d.box;
        NEW actions {
            caption = 'Действия';
            MOVE l.box;
            NEW generate {
                caption = 'Генерация ЭСЧФ';
                MOVE PROPERTY(blankCodeDoc());
            }
        }
        
    }
}
@extendFormEditable(evats);

NAVIGATOR {
    financeNavigator {
        ADD evats;
    }
}