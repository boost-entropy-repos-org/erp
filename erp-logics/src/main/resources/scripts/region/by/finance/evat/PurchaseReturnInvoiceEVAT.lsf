MODULE PurchaseReturnInvoiceEVAT;

REQUIRE PurchaseReturnInvoice, EVAT, CustomsGroup, PurchaseReturnBlankCodeEVAT;

NAMESPACE PurchaseReturn;


EXTEND CLASS PurchaseReturn.Invoice : EVATDocument;
name(PurchaseReturn.Invoice document) += description(document);
isPosted[EVATDocument](Invoice document) += isPosted(document);
number[EVATDocument](PurchaseReturn.Invoice document) += VARSTRING[100](number(document));
series[EVATDocument](PurchaseReturn.Invoice document) += VARSTRING[2](series(document));
dateTime[EVATDocument](PurchaseReturn.Invoice document) += dateTime(document);

includeEVAT = ABSTRACT CASE BOOLEAN (Invoice);

EXTEND CLASS EVATType { purchaseReturn 'Закупка-возврат' }
type[EVATDocument](PurchaseReturn.Invoice i) += EVATType.purchaseReturn IF i IS PurchaseReturn.Invoice;

needCreateEVAT[EVATDocument](Invoice i) += WHEN includeEVAT(i)  THEN TRUE;
VATSum[EVATDocument] (PurchaseReturn.Invoice i) += NUMERIC[18,4](VATSumInvoiceDetail(i));

overCreateEVATPurchaseReturnInvoice = ACTION ABSTRACT LIST (EVAT, PurchaseReturn.Invoice);

createEVATPurchaseReturnInvoice 'Накладные (закупка-возврат)' (DATE dFrom, DATE dTo) = ACTION {
    IF dFrom IS DATE AND dTo IS DATE THEN {
        FOR includeEVAT(Invoice i) AND isPosted(i) AND NOT [= GROUP SUM 1 BY (CONCAT '', seriesDoc(EVAT e), numberDoc(e)), date(e)](seriesNumber(i), date(i)) AND date(i) >= dFrom AND date(i) <= dTo ADDOBJ e = EVAT DO {
            EVATDocument(e) <- i;            
            status(e) <- EVATStatus.original;
            type(e) <- EVATType.purchaseReturn;
                    
            date(e) <- date(i);
            
            numberContract (e) <- number(contractSku(i));
            dateContract (e) <- dateFrom(contractSku(i));
            codeDocType (e) <- 603;
            blankCodeDoc (e) <- OVERRIDE '402861' IF i IS Invoice, blankCodeDoc() IF i IS Invoice, idBlankCode(i);
            seriesDoc(e) <- series(i);
            numberDoc(e) <- number(i);
            unpSender(e) <- UNP(customer(i));
            
            //Поставщик
            supplier(e) <- customer(i);
            branchCodeSupplier(e) <- branchCode(customerStock(i));
            
            //Получатель
            customer(e) <- supplier(i);
            branchCodeCustomer(e) <- branchCode(supplierStock(i));            
            
            //Грузоотправитель
            consignor(e) <- VARISTRING[200](OVERRIDE name(customer(i)), fullName(customer(i)));
            countryCodeConsignor (e) <- sid(country(customer(i)));
            unpConsignor (e) <- OVERRIDE UNP(customer(i)), UNPForeign(customer(i)); 
            shippingAddressConsignor(e) <- OVERRIDE address(customerStock(i)), dataAddressCustomerStock (i);
    
            //Грузополучатель
            consignee(e) <- VARISTRING[200](OVERRIDE name(supplier(i)), fullName(supplier(i)));
            countryCodeConsignee (e) <- sid(country(supplier(i)));
            unpConsignee (e) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i)); 
            shippingAddressConsignee(e) <- OVERRIDE address(supplierStock(i)), dataAddressSupplierStock (i);
            
            
            noCustomer(e) <- NOT VATSumInvoiceDetail(i);
            
            overCreateEVATPurchaseReturnInvoice(e,i);
    
            FOR invoice(InvoiceDetail id) == i AND quantity(id) > 0 ADDOBJ ed = EVATDetail DO {
            evat(ed) <- e;

            name(ed) <- nameSku(id);
            sku(ed) <- sku(id);
            code(ed) <- codeCustomsGroup(defaultCountry(), sku(id));
            shortNameUOM(ed) <- shortNameUOM(sku(id));
            quantity(ed) <- quantity(id); 
            price(ed) <- price(id);
            sum(ed) <- sum(id);
            exciseSum(ed) <- 0;
            vatRate(ed) <- valueVAT(id);
            vatSum(ed) <- VATSum(id);
            sumWithVAT(ed) <- invoiceSum(id);
            
            IF valueVAT(id) == 0 THEN
                descriptionType(ed) <- DescriptionType.vatExcemption
            ELSE
                descriptionType(ed) <- DescriptionType.deductionInFull;
            }
        }
        APPLY {};    
    }
};

EXTEND FORM evats
    PROPERTIES createEVATPurchaseReturnInvoice(dFrom, dTo)
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATPurchaseReturnInvoice(dFrom, dTo));
    }
}