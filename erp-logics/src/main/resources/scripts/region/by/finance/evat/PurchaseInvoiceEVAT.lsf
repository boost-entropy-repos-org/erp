MODULE PurchaseInvoiceEVAT;

REQUIRE PurchaseInvoice, EVAT, CustomsGroup, PurchaseDeclaration, InvoiceConsignmentBy;

NAMESPACE Purchase;

@defineOperationProperty(eVAT, 'Создавать ЭСЧФ', createContainer);

overCreateEVATPurchaseInvoice = ACTION ABSTRACT LIST (EVATDetail, InvoiceDetail);
overCreateEVATPurchaseInvoice = ACTION ABSTRACT LIST (EVAT, Invoice);
overCreateEVATPurchaseInvoice = ACTION ABSTRACT LIST (DATE, DATE);//-- для возвратов
skipEVAT = ABSTRACT CASE BOOLEAN (Invoice);

EXTEND CLASS EVATType { purchase 'Закупка' }

createEVATPurchaseInvoice 'Накладные (закупка)' (DATE dFrom, DATE dTo) = ACTION {
    FOR eVAT(operation(Invoice i)) AND date(i) >= dFrom AND date(i) <= dTo AND quantityInvoiceDetail(i) AND NOT skipEVAT(i) ADDOBJ e = EVAT DO {
        type(e) <- EVATType.purchase;
        status(e) <- EVATStatus.original;
        legalEntityStatusSupplier(e) <- LegalEntityStatus.foreignOrganization;
        legalEntityStatusCustomer(e) <- LegalEntityStatus.customer;
        declarationCustomer(e) <- VARSTRING[100](number(declaration(i)));
               
        date(e) <- date(i);
        
        numberContract (e) <- number(contractSku(i));
        dateContract (e) <- dateFrom(contractSku(i));
        codeDocType (e) <- 609;
        valueDocType(e) <- VARSTRING[100] ('invoice');
//        blankCodeDoc (e) <- OVERRIDE '402861', blankCodeDoc();
        seriesDoc(e) <- series(i);
        numberDoc(e) <- number(i);
        unpSender(e) <- UNP(customer(i));
        
        //Поставщик
        supplier(e) <- supplier(i);
        branchCodeSupplier(e) <- branchCode(supplierStock(i));
        
        //Получатель
        customer(e) <- customer(i);
        branchCodeCustomer(e) <- branchCode(customerStock(i));
        
        //Грузоотправитель
        consignor(e) <- VARISTRING[200](OVERRIDE name(supplier(i)), fullName(supplier(i)));
        countryCodeConsignor (e) <- sid(country(supplier(i)));
        unpConsignor (e) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i)); 
        shippingAddressConsignor(e) <- OVERRIDE address(supplierStock(i)), dataAddressSupplierStock (i);
        
        //Грузополучатель
        consignee(e) <- VARISTRING[200](OVERRIDE name(customer(i)), fullName(customer(i)));
        countryCodeConsignee (e) <- sid(country(customer(i)));
        unpConsignee (e) <- OVERRIDE UNP(customer(i)), UNPForeign(customer(i)); 
        shippingAddressConsignee(e) <- OVERRIDE address(customerStock(i)), dataAddressCustomerStock (i);
                
        overCreateEVATPurchaseInvoice(e,i);
        FOR invoice(InvoiceDetail id) == i AND quantity(id) > 0 ADDOBJ ed = EVATDetail DO {
            evat(ed) <- e;

            name(ed) <- VARSTRING[255](OVERRIDE nameSku(id), documentNameSku(id));
            code(ed) <- codeCustomsGroup(defaultCountry(), sku(id));
            shortNameUOM(ed) <- shortNameUOM(sku(id));
            quantity(ed) <- quantity(id); 
//            price(ed) <- price(id);
            sum(ed) <- homeSum(id);
            exciseSum(ed) <- 0;
            vatRate(ed) <- valueVAT(sku(id), date(i));
//            vatSum(ed) <- declarationVATSum(id);
            
            overCreateEVATPurchaseInvoice(ed,id);
            
//            sumWithVAT(ed) <- sum(ed) (+) vatSum(ed);
//            
//            IF valueVAT(id) == 0 THEN
//                descriptionType(ed) <- DescriptionType.vatExcemption
//            ELSE
            descriptionType(ed) <- DescriptionType.importVAT;
        } 
    } 
    APPLY {};
    overCreateEVATPurchaseInvoice(dFrom,dTo);
} CONFIRM;

EXTEND FORM evats
    PROPERTIES createEVATPurchaseInvoice(dFrom, dTo) TOOLBAR TODRAW e
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATPurchaseInvoice(dFrom, dTo));
    }
}