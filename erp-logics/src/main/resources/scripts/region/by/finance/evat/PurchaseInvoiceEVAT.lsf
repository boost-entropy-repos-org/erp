MODULE PurchaseInvoiceEVAT;

REQUIRE PurchaseInvoice, EVAT, CustomsGroup, PurchaseDeclaration, InvoiceConsignmentBy, PurchaseDeclarationDetail;

NAMESPACE Purchase;

EXTEND CLASS Invoice : EVATDocument;
name(Invoice document) += description(document);
isPosted[EVATDocument](Invoice document) += isPosted(document);
number[EVATDocument](Invoice document) += VARSTRING[100](number(document));
series[EVATDocument](Invoice document) += VARSTRING[2](series(document));
dateTime[EVATDocument](Invoice document) += dateTime(document);

@defineOperationProperty(eVAT, 'Создавать ЭСЧФ', createContainer);

overCreateEVATPurchaseInvoice = ACTION ABSTRACT LIST (EVATDetail, InvoiceDetail);
overCreateEVATPurchaseInvoice = ACTION ABSTRACT LIST (EVAT, Invoice);
overCreateEVATPurchaseInvoice 'Накладные (закупка-возврат)' = ACTION ABSTRACT LIST (DATE, DATE);//-- для возвратов
skipEVAT = ABSTRACT CASE BOOLEAN (Invoice);

EXTEND CLASS EVATType { purchase 'Закупка' }
type[EVATDocument](Invoice i) += EVATType.purchase IF i IS Invoice;

createEVATPurchaseInvoice (EVAT e, Invoice i) = ACTION {
    EVATDocument(e) <- i;
    type(e) <- EVATType.purchase;
    status(e) <- EVATStatus.original;
    legalEntityStatusSupplier(e) <- LegalEntityStatus.foreignOrganization;
    legalEntityStatusCustomer(e) <- LegalEntityStatus.customer;
    declarationCustomer(e) <- VARSTRING[100](number(declaration(i)));
           
    date(e) <- date(i);
    
    numberContract (e) <- number(contractSku(i));
    dateContract (e) <- dateFrom(contractSku(i));
    codeDocType (e) <- 609;
    valueDocType(e) <- VARSTRING[100] ('invoice');
//        blankCodeDoc (e) <- OVERRIDE '402861', blankCodeDoc();
    seriesDoc(e) <- series(i);
    numberDoc(e) <- number(i);
    unpSender(e) <- UNP(customer(i));
    
    //Поставщик
    supplier(e) <- supplier(i);
    branchCodeSupplier(e) <- branchCode(supplierStock(i));
    
    //Получатель
    customer(e) <- customer(i);
    branchCodeCustomer(e) <- branchCode(customerStock(i));
    
    //Грузоотправитель
    consignor(e) <- VARISTRING[200](OVERRIDE name(supplier(i)), fullName(supplier(i)));
    countryCodeConsignor (e) <- sid(country(supplier(i)));
    unpConsignor (e) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i)); 
    shippingAddressConsignor(e) <- OVERRIDE address(supplierStock(i)), dataAddressSupplierStock (i);
    
    //Грузополучатель
    consignee(e) <- VARISTRING[200](OVERRIDE name(customer(i)), fullName(customer(i)));
    countryCodeConsignee (e) <- sid(country(customer(i)));
    unpConsignee (e) <- OVERRIDE UNP(customer(i)), UNPForeign(customer(i)); 
    shippingAddressConsignee(e) <- OVERRIDE address(customerStock(i)), dataAddressCustomerStock (i);
            
    overCreateEVATPurchaseInvoice(e,i);
} 

createEVATPurchaseInvoice (EVAT e, InvoiceDetail id, EVATDetail ed) = ACTION {
    evat(ed) <- e;
    
    name(ed) <- VARSTRING[255](OVERRIDE nameSku(id), documentNameSku(id));
    sku(ed) <- sku(id);
    code(ed) <- OVERRIDE codeCustomsGroup(defaultCountry(), sku(id)), codeCustomsGroup(id);
    shortNameUOM(ed) <- shortNameUOM(sku(id));
    quantity(ed) <- quantity(id); 
    //            price(ed) <- price(id);
    sum(ed) <- homeSum(id);
    exciseSum(ed) <- 0;
    vatRate(ed) <- valueVAT(sku(id), date(id));
    vatSum(ed) <- 0;
    sumWithVAT(ed) <- 0;
    overCreateEVATPurchaseInvoice(ed,id);
    
    descriptionType(ed) <- DescriptionType.importVAT;

}

needCreateEVAT[EVATDocument](Invoice i) += WHEN eVAT(operation(i)) AND quantityInvoiceDetail(i) AND NOT skipEVAT(i) THEN TRUE;

VATSum= ABSTRACT CASE OVERRIDE FIRST NUMERIC[18,4](Purchase.Invoice);
VATSum (Purchase.Invoice i) += WHEN i IS Purchase.Invoice THEN NUMERIC[18,4](customsVATSumInvoiceDetail(i));
VATSum[EVATDocument] (Purchase.Invoice i) += NUMERIC[18,4](VATSum(i));

//priceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

createEVATPurchaseInvoice 'Накладные (закупка)' (DATE dFrom, DATE dTo) = ACTION {
    FOR eVAT(operation(Invoice i)) AND isPosted(i) AND 
        NOT EVAT(i)
        AND date(i) >= dFrom AND date(i) <= dTo AND quantityInvoiceDetail(i) AND NOT skipEVAT(i) ADDOBJ e = EVAT DO {
        createEVATPurchaseInvoice(e,i);
        
        FOR invoice(InvoiceDetail id) == i AND quantity(id) > 0 ADDOBJ ed = EVATDetail DO {
            createEVATPurchaseInvoice(e,id,ed);
        }
        FOR NUMERIC[16,5] vatSum == [= GROUP SUM customsVATSum(InvoiceDetail id) BY invoice(id),valueVAT(sku(id), date(id))](i, NUMERIC[10,5] vat) ADDOBJ ed = EVATDetail DO {
            evat(ed) <- e;
            name(ed) <- 'Сумма НДС, уплаченная при ввозе';
            code(ed) <- [= GROUP MAX codeCustomsGroup(InvoiceDetail id) BY invoice(id), valueVAT(sku(id), date(id))](i, vat);
            sum(ed) <- 0;
            exciseSum(ed) <- 0;
            vatRate(ed) <- vat;
            vatSum(ed) <- vatSum;
            sumWithVAT(ed) <- 0;
            
            descriptionType(ed) <- DescriptionType.importVAT;
        }
    } 
    APPLY {};
//    overCreateEVATPurchaseInvoice(dFrom,dTo);
} CONFIRM;

EXTEND FORM evats
    PROPERTIES createEVATPurchaseInvoice(dFrom, dTo) TOOLBAR TODRAW e
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATPurchaseInvoice(dFrom, dTo));
    }
}