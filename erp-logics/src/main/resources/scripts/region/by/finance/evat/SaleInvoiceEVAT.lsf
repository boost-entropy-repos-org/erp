MODULE SaleInvoiceEvat;

REQUIRE SaleInvoiceConsignmentBy, SaleReturnInvoice, EVAT, CustomsGroup, SaleBlankCodeEVAT, SaleReturnBlankCodeEVAT;

NAMESPACE Sale;

EXTEND CLASS Sale.Invoice : EVATDocument;
name(Sale.Invoice document) += description(document);
isPosted[EVATDocument](Invoice document) += isPosted(document);
number[EVATDocument](Invoice document) += VARSTRING[100](number(document));
series[EVATDocument](Invoice document) += VARSTRING[2](series(document));
dateTime[EVATDocument](Invoice document) += dateTime(document);

EXTEND CLASS SaleReturn.Invoice : EVATDocument;
name(SaleReturn.Invoice document) += description(document);
isPosted[EVATDocument](SaleReturn.Invoice document) += isPosted(document);
number[EVATDocument](SaleReturn.Invoice document) += VARSTRING[28](number(document));
series[EVATDocument](SaleReturn.Invoice document) += VARSTRING[2](series(document));
dateTime[EVATDocument](SaleReturn.Invoice document) += dateTime(document);


@defineOperationProperty(eVAT, 'Создавать ЭСЧФ', createContainer);

skipCreateEVAT = ABSTRACT BOOLEAN (Invoice);
skipCreateEVAT = ABSTRACT BOOLEAN (SaleReturn.Invoice);

EXTEND CLASS EVATType { sale 'Продажа',
                        saleReturn 'Продажа-возврат'}
                        
type[EVATDocument](Sale.Invoice i) += EVATType.sale IF i IS Sale.Invoice;                        
type[EVATDocument](SaleReturn.Invoice i) += EVATType.saleReturn IF i IS SaleReturn.Invoice;

overCreateEVATSaleReturnInvoice = ACTION ABSTRACT LIST (EVAT, SaleReturn.Invoice);

needCreateEVAT[EVATDocument](Sale.Invoice i) += WHEN eVAT(operation(i)) AND quantityInvoiceDetail(i) AND NOT skipCreateEVAT(i) THEN TRUE;

needCreateEVAT[EVATDocument](SaleReturn.Invoice i) += WHEN eVAT(operation(i)) AND quantityInvoiceDetail(i) AND NOT skipCreateEVAT(i) THEN TRUE;

VATSum[EVATDocument] (Sale.Invoice i) += NUMERIC[18,4](VATSumInvoiceDetail(i));
VATSum[EVATDocument] (SaleReturn.Invoice i) += NUMERIC[18,4](-VATSumInvoiceDetail(i));

createEVATSaleInvoice 'Накладные (продажа)' (DATE dFrom, DATE dTo) = ACTION {
    FOR eVAT(operation(Invoice i)) AND isPosted(i) AND NOT skipCreateEVAT(i) AND 
        NOT [= GROUP SUM 1 BY (CONCAT '', seriesDoc(EVAT e), numberDoc(e)), date(e)](seriesNumber(i), date(i)) AND
        NOT EVAT(i)
        AND date(i) >= dFrom AND date(i) <= dTo AND 
        quantityInvoiceDetail(i) ADDOBJ e = EVAT DO {
        EVATDocument(e) <- i;        
        type(e) <- EVATType.sale;
        status(e) <- EVATStatus.original;
        
        date(e) <- date(i);
        
        numberContract (e) <- number(contractSku(i));
        dateContract (e) <- dateFrom(contractSku(i));
        codeDocType (e) <- 603;
        blankCodeDoc (e) <- OVERRIDE '402861' IF i IS Invoice, blankCodeDoc() IF i IS Invoice, idBlankCode(i);
        seriesDoc(e) <- series(i);
        numberDoc(e) <- number(i);
        unpSender(e) <- UNP(supplier(i));
        
        //Поставщик
        supplier(e) <- supplier(i);
        branchCodeSupplier(e) <- branchCode(supplierStock(i));        
        
        //Получатель
        customer(e) <- customer(i);   
        branchCodeCustomer(e) <- branchCode(customerStock(i));        
        
        //Грузоотправитель
        consignor(e) <- VARISTRING[200](OVERRIDE name(supplier(i)), fullName(supplier(i)));
        countryCodeConsignor (e) <- sid(country(supplier(i)));
        unpConsignor (e) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i)); 
        shippingAddressConsignor(e) <- OVERRIDE address(supplierStock(i)), dataAddressSupplierStock (i);
        
        //Грузополучатель
        consignee(e) <- VARISTRING[200](OVERRIDE name(customer(i)), fullName(customer(i)));
        countryCodeConsignee (e) <- sid(country(customer(i)));
        unpConsignee (e) <- OVERRIDE UNP(customer(i)), UNPForeign(customer(i)); 
        shippingAddressConsignee(e) <- OVERRIDE address(customerStock(i)), dataAddressCustomerStock (i);
        
        noCustomer(e) <- NOT VATSumInvoiceDetail(i);
        
        FOR invoice(InvoiceDetail id) == i AND quantity(id) > 0 ADDOBJ ed = EVATDetail DO {
            evat(ed) <- e;

            name(ed) <- nameSku(id);
            sku(ed) <- sku(id);
            code(ed) <- codeCustomsGroup(defaultCountry(), sku(id));
            shortNameUOM(ed) <- shortNameUOM(sku(id));
            quantity(ed) <- quantity(id); 
            price(ed) <- price(id);
            sum(ed) <- sum(id);
            exciseSum(ed) <- 0;
            vatRate(ed) <- valueVAT(id);
            vatSum(ed) <- VATSum(id);
            sumWithVAT(ed) <- invoiceSum(id);
            
            IF valueVAT(id) == 0 THEN
                descriptionType(ed) <- DescriptionType.vatExcemption
            ELSE
                descriptionType(ed) <- DescriptionType.deductionInFull;
        } 
    } 
    APPLY {};

    FOR eVAT(operation(SaleReturn.Invoice i)) AND isPosted(i) AND NOT skipCreateEVAT(i) AND NOT [= GROUP SUM 1 BY (CONCAT '', seriesDoc(EVAT e), numberDoc(e)), date(e)](seriesNumber(i), date(i)) AND date(i) >= dFrom AND date(i) <= dTo ADDOBJ e = EVAT DO {
        EVATDocument(e) <- i;        
        type(e) <- EVATType.saleReturn;
        status(e) <- EVATStatus.additionalNoRef;
        
        date(e) <- date(i);
        
        numberContract (e) <- number(contractSku(i));
        dateContract (e) <- dateFrom(contractSku(i));
        codeDocType (e) <- 603;
        blankCodeDoc (e) <- OVERRIDE '402861' IF i IS SaleReturn.Invoice,idBlankCode(i);
        seriesDoc(e) <- series(i);
        numberDoc(e) <- number(i);
        unpSender(e) <- UNP(supplier(i));
        
        //Поставщик
        supplier(e) <- supplier(i);
        branchCodeSupplier(e) <- branchCode(supplierStock(i));
        
        //Получатель
        customer(e) <- customer(i);
        branchCodeCustomer(e) <- branchCode(customerStock(i));
        
        //Грузоотправитель
        consignor(e) <- VARISTRING[200](OVERRIDE name(customer(i)), fullName(customer(i)));
        countryCodeConsignor (e) <- sid(country(customer(i)));
        unpConsignor (e) <- OVERRIDE UNP(customer(i)), UNPForeign(customer(i)); 
        shippingAddressConsignor(e) <- OVERRIDE address(customerStock(i)), dataAddressCustomerStock (i);

        //Грузополучатель
        consignee(e) <- VARISTRING[200](OVERRIDE name(supplier(i)), fullName(supplier(i)));
        countryCodeConsignee (e) <- sid(country(supplier(i)));
        unpConsignee (e) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i)); 
        shippingAddressConsignee(e) <- OVERRIDE address(supplierStock(i)), dataAddressSupplierStock (i);
        
        noCustomer(e) <- NOT VATSumInvoiceDetail(i);
        
        overCreateEVATSaleReturnInvoice(e,i);
        
        FOR invoice(SaleReturn.InvoiceDetail id) == i AND quantity(id) > 0 ADDOBJ ed = EVATDetail DO {
            evat(ed) <- e;

            name(ed) <- nameSku(id);
            sku(ed) <- sku(id);
            code(ed) <- codeCustomsGroup(defaultCountry(), sku(id));
            shortNameUOM(ed) <- shortNameUOM(sku(id));
            quantity(ed) <- -quantity(id); 
            price(ed) <- price(id);
            sum(ed) <- -sum(id);
            exciseSum(ed) <- 0;
            vatRate(ed) <- valueVAT(id);
            vatSum(ed) <- -VATSum(id);
            sumWithVAT(ed) <- -invoiceSum(id);
            
            IF valueVAT(id) == 0 THEN
                descriptionType(ed) <- DescriptionType.vatExcemption
            ELSE
                descriptionType(ed) <- DescriptionType.deductionInFull;
        } 
    }
    APPLY {}
} CONFIRM;

EXTEND FORM evats
    PROPERTIES createEVATSaleInvoice(dFrom, dTo)
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATSaleInvoice(dFrom, dTo));
    }
}