MODULE PurchaseDeclarationEVAT;

REQUIRE PurchaseDeclarationDetail, EVAT;

NAMESPACE Purchase;

EXTEND CLASS Declaration : EVATDocument;
name(Declaration document) += description(document);
isPosted(Declaration document) += isPosted(document);
needCreateEVAT(Declaration document) += WHEN document IS Declaration THEN TRUE;
number[EVATDocument](Declaration document) += VARSTRING[100](number(document));
series[EVATDocument](Declaration document) += VARSTRING[2](series(document));
dateTime[EVATDocument](Declaration document) += dateTime(document);

EXTEND CLASS EVATType { declaration 'Декларация' }

type[EVATDocument](Declaration d) += EVATType.declaration IF d IS Declaration;

useHomeSum 'Записывать в сумму декларации сумму из инвойса' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() useHomeSum;
DESIGN options {
    commons {
        MOVE PROPERTY(useHomeSum());
    } 
}

VATSum[EVATDocument] (Declaration i) += NUMERIC[18,4]([= GROUP SUM adjustVATSum(DeclarationDetail id) BY declaration(id)](i));
createEVATDeclaration 'Таможенные декларации' (LegalEntity l, DATE dFrom, DATE dTo) = {
    FOR date(Declaration d) >= dFrom AND
        NOT EVAT(d) AND
        date(d) <= dTo AND isPosted(d) NEW e = EVAT DO {
        EVATDocument(e) <- d;
        type(e) <- EVATType.declaration;
        status(e) <- EVATStatus.original;
        
        date(e) <- date(d);
        
        numberContract (e) <- number([= GROUP MIN contractSku(InvoiceDetail d) IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
        dateContract (e) <- dateFrom([= GROUP MIN contractSku(InvoiceDetail d) IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
        
        legalEntityStatusSupplier(e) <- LegalEntityStatus.foreignOrganization;
        legalEntityStatusCustomer(e) <- LegalEntityStatus.foreignOrganizationBuyer;
        codeDocType (e) <- 609;
        dateDoc(e) <- date([= GROUP MIN InvoiceDetail d IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
        seriesDoc(e) <- series([= GROUP MIN InvoiceDetail d IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
        numberDoc(e) <- number([= GROUP MIN InvoiceDetail d IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
        unpSender(e) <- UNP(l);
        
        //Поставщик
        supplier(e) <- [= GROUP MIN supplier(InvoiceDetail d) IF currency(d) == currency(declaration(d)) BY declaration(d)](d);
//        branchCodeSupplier(e) <- branchCode(supplierStock(i));
        
        declarationSupplier(e) <- OVERRIDE number(d), 'не задан';
                
        //Получатель
        customer(e) <- l;
        
        declarationCustomer(e) <- OVERRIDE number(d), 'не задан';
        
        //Грузоотправитель
        consignor(e) <- VARISTRING[200](OVERRIDE fullName(supplier(e)), name(supplier(e)));
        unpConsignor (e) <- OVERRIDE UNPForeign(supplier(e)), UNP(supplier(e)); 
        countryCodeConsignor (e) <- sid(country(supplier(e)));
        shippingAddressConsignor(e) <- address([= GROUP MIN supplierStock(InvoiceDetail d) IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
        
        //Грузополучатель
        consignee(e) <- VARISTRING[200](OVERRIDE fullName(customer(e)), name(customer(e)));
        countryCodeConsignee (e) <- sid(country(customer(e)));
        unpConsignee (e) <- UNP(customer(e)); 
        shippingAddressConsignee(e) <- address([= GROUP MIN customerStock(InvoiceDetail d) IF currency(d) == currency(declaration(d)) BY declaration(d)](d));
                
        FOR declaration(DeclarationDetail id) == d NEW ed = EVATDetail DO {
            evat(ed) <- e;

            name(ed) <- nameCustoms(id);
            sku(ed) <- [= GROUP MAX sku(InvoiceDetail d) IF in(DeclarationDetail dd, d) BY dd](id);
            code(ed) <- codeCustomsGroup(id);
            quantity(ed) <- quantity(id); 
            UOM(ed) <- [= GROUP MAX UOM(sku(InvoiceDetail d)) IF in(DeclarationDetail dd, d) BY dd](id);
            price(ed) <- IF useHomeSum() THEN [= GROUP SUM homeSum(InvoiceDetail d) IF in(DeclarationDetail dd, d) BY dd](id) / quantity(id) ELSE round2(price(id) * rateExchange(declaration(id)));
            sum(ed) <- IF useHomeSum() THEN [= GROUP SUM homeSum(InvoiceDetail d) IF in(DeclarationDetail dd, d) BY dd](id) ELSE round2(sum(id) * rateExchange(declaration(id))); //homeSum(id) (+) dutySum(id);
            exciseSum(ed) <- 0;
            vatRate(ed) <- percentVAT(id);
            vatSum(ed) <- 0; // VATSum(id);
            sumWithVAT(ed) <- 0; // homeSum(id) (+) VATSum(id);
            
            descriptionType(ed) <- DescriptionType.importVAT;
        }
        FOR NUMERIC[16,5] vatSum == [= GROUP SUM adjustVATSum(DeclarationDetail id) BY declaration(id), percentVAT(id)](d, NUMERIC[10,5] vat) NEW ed = EVATDetail DO {
            evat(ed) <- e;
            name(ed) <- 'Сумма НДС, уплаченная при ввозе';
            code(ed) <- [= GROUP MAX codeCustomsGroup(DeclarationDetail id) BY declaration(id), percentVAT(id)](d, vat);
            sum(ed) <- 0;
            exciseSum(ed) <- 0;
            vatRate(ed) <- vat;
            vatSum(ed) <- vatSum;
            sumWithVAT(ed) <- 0;
            
            descriptionType(ed) <- DescriptionType.importVAT;
        }
    } 
    APPLY;
} CONFIRM;

EXTEND FORM evats
    PROPERTIES createEVATDeclaration(l, dFrom, dTo) TOOLBAR TODRAW e
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATDeclaration(l, dFrom, dTo));
    }
}