MODULE TripInvoiceConsignmentBy;

REQUIRE Shipment, Invoice, TripInvoiceBy, InvoiceConsignmentBy;

defaultTruck(Invoice invoice) += WHEN truck(trip(invoice)) THEN truck(trip(invoice));
driver(Invoice invoice) += WHEN driver(trip(invoice)) THEN driver(trip(invoice));
waybill(Invoice invoice) += seriesNumber(trip(invoice));

META setTripPropTrip(prop)
    setTrip###prop##Trip(Invoice invoice) = {
        ASSIGN prop(invoice) <- prop(trip(invoice));
    }
    WHEN CHANGED(prop(trip(Invoice invoice))) DO EXEC setTrip###prop##Trip(invoice);
END

issuanceAllowed = DATA Employee(Trip);
nameIssuanceAllowed 'Отпуск разрешил' (Trip trip) = name[Contact](issuanceAllowed(trip));
@setTripPropTrip(issuanceAllowed);

issuanceExecuted = DATA Employee(Trip);
nameIssuanceExecuted 'Отпуск произвел' (Trip trip) = name[Contact](issuanceExecuted(trip));
@setTripPropTrip(issuanceExecuted);

dataForwarder = DATA Employee(Trip);
nameForwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (Trip t)= name[Contact](OVERRIDE dataForwarder(t), driver(t));

overForwarder= OVERRIDE  dataForwarder(t), driver(Trip t);

setTripForwarderTrip(Invoice invoice) = {
    ASSIGN dataForwarder(invoice) <- overForwarder(trip(invoice));
}
WHEN CHANGED(overForwarder(trip(Invoice invoice))) DO EXEC setTripForwarderTrip(invoice);

loadingExecuter = DATA LegalEntity(Trip);
nameLoadingExecuter 'Исполнитель погрузки' (Trip trip) = name(loadingExecuter(trip));
@setTripPropTrip(loadingExecuter);

unloadingExecuter = DATA LegalEntity(Trip);
nameUnloadingExecuter 'Исполнитель разгрузки' (Trip trip) = name(unloadingExecuter(trip));
@setTripPropTrip(unloadingExecuter);

wayOfLoading = DATA WayOfLoading(Trip);
nameWayOfLoading 'Способ погрузки' (Trip trip) = name(wayOfLoading(trip));
@setTripPropTrip(wayOfLoading);

wayOfUnloading = DATA WayOfLoading(Trip);
nameWayOfUnloading 'Способ разгрузки' (Trip trip) = name(wayOfUnloading(trip));
@setTripPropTrip(wayOfUnloading);

codeLoading 'Код ПРР' = DATA STRING[3] (Trip);
@setTripPropTrip(codeLoading);

currency 'Валюта (ИД)' = DATA Currency(Trip);
shortNameCurrency 'Валюта' (Trip trip) = shortName(currency(trip));
documentNameCurrency 'Валюта в накладной сокр.' (Trip trip) = documentName(currency(trip));
@setTripPropTrip(currency);

//Время прибытия                              
timeOfArrival 'Время прибытия' = DATA TIME (Trip);
setTripDateTimeTrip(Invoice invoice) = {
    ASSIGN arrivalTime(invoice) <- dateTimeToDateTime(date(invoice), timeOfArrival(trip(invoice)));
}
WHEN CHANGED(dateTime(trip(Invoice invoice))) DO EXEC setTripDateTimeTrip(invoice);

downtime 'Время простоя (мин.)' = DATA  INTEGER (Trip);
setTripDowntimeTrip(Invoice invoice) = {
    ASSIGN downtime(invoice) <- downtime(trip(invoice));
}
WHEN CHANGED(downtime(trip(Invoice invoice))) DO EXEC setTripDowntimeTrip(invoice);

overCopy(Trip t, Trip trip) += {
    ASSIGN issuanceAllowed(t) <- issuanceAllowed(trip);         
    ASSIGN issuanceExecuted(t) <- issuanceExecuted(trip);        
    ASSIGN dataForwarder(t) <- dataForwarder(trip);        
    ASSIGN loadingExecuter(t) <- loadingExecuter(trip);        
    ASSIGN unloadingExecuter(t) <- unloadingExecuter(trip);
    ASSIGN wayOfLoading(t) <- wayOfLoading(trip);
    ASSIGN wayOfUnloading(t) <- wayOfUnloading(trip);
    ASSIGN codeLoading(t) <- codeLoading(trip);
    ASSIGN currency(t) <- currency(trip);
    ASSIGN timeOfArrival(t) <- timeOfArrival(trip);
    ASSIGN downtime(t) <- downtime(trip);
}

printHorizontalConsignment 'Печать ТТН-1 (гор.)' (Trip trip) = {
    FOR in(trip, Invoice invoice) DO {
        EXEC printHorizontalA(invoice);
        EXEC printHorizontalB(invoice);
        EXEC printAttach(invoice);
    };
} TOOLBAR;

printVerticalConsignment 'Печать ТТН-1 (верт.)' (Trip trip) = {
    FOR in(trip, Invoice invoice) DO {
        EXEC printVerticalA(invoice);
        EXEC printVerticalB(invoice);
        EXEC printAttach(invoice);
    };
} TOOLBAR;

EXTEND FORM trip
    PROPERTIES (t) nameIssuanceAllowed, nameIssuanceExecuted, nameForwarder, nameLoadingExecuter, 
                   nameWayOfLoading, nameUnloadingExecuter, nameWayOfUnloading, codeLoading, documentNameCurrency,
                   timeOfArrival, downtime
    PROPERTIES printHorizontalConsignment(t) TODRAW i
    PROPERTIES printVerticalConsignment(t) TODRAW i

;

DESIGN trip {

    pane {
        NEW consignment AFTER invoices {
            caption = 'Атрибуты накладных';
            NEW issuanceContainer {
                caption = 'Отпуск';
                MOVE PROPERTY(nameIssuanceAllowed(t));
                MOVE PROPERTY(nameIssuanceExecuted(t));
                MOVE PROPERTY(nameForwarder(t));
            }
            NEW loadingContainer {
                caption = 'ППР';
                MOVE PROPERTY(nameLoadingExecuter(t));
                MOVE PROPERTY(nameWayOfLoading(t));
                MOVE PROPERTY(nameUnloadingExecuter(t));
                MOVE PROPERTY(nameWayOfUnloading(t));
                MOVE PROPERTY(codeLoading(t));
                MOVE PROPERTY(timeOfArrival(t));
                MOVE PROPERTY(downtime(t));
            }
            NEW dopContainer {
                caption = 'Дополнительно';
                MOVE PROPERTY(documentNameCurrency(t));
            }

        }
    }
}
