MODULE InventoryPharmacy;

REQUIRE Inventory, POSPharmacy;

NAMESPACE Inventory;

@defineOperationProperty(isRetailPharmacy, 'По аптекам', commonContainer);

isRetailPharmacy (Inventory inventory) = isRetailPharmacy(operation(inventory));

pageInventoryDetail =  GROUP MAX (PageInventoryDetail detail)
    BY batch(detail), pageInventory(detail);
      
pageInventory = GROUP MAX (PageInventory page) BY inventory(listInventory(page)) MATERIALIZED;

CONSTRAINT isRetailPharmacy(inventory(ListInventory li)) AND countPageInventory(li)>1.0
    MESSAGE 'В инвентаризации по аптеке должна быть только 1 страница описи';
    
CONSTRAINT isRetailPharmacy(Inventory li) AND countListInventory(li)>1.0
    MESSAGE 'В инвентаризации по аптеке должна быть только 1 опись';
    
currentPrice 'Розничная цена' (Batch batch, PageInventory li) = prevPriceB(SystemLedgerPriceListType.accountPriceListType, batch, stock(listInventory(li)), dateTime(listInventory(li)));

changeQuantityValue (Batch batch, PageInventory li, NUMERIC[16,5] n) =  {
    IF pageInventoryDetail(batch, li) THEN {
        IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                quantity(PageInventoryDetail detail) <- n WHERE detail == pageInventoryDetail(batch, li);
        } ELSE {
            FOR pageInventoryDetail(batch, li) == PageInventoryDetail d DO
                DELETE d;
        }
        APPLY {};
    } ELSE {
        IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
            NEW d = PageInventoryDetail {
                pageInventory(d) <- li;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                quantity(d) <- n;
                price (d)  <- prevPriceB(SystemLedgerPriceListType.accountPriceListType, batch(d), stock(d), dateTime(d));
            }
            APPLY {};
        }
    }
}
        
changeQuantity(Batch batch, PageInventory li) = {
    INPUT n = NUMERIC[16,5] DO
        changeQuantityValue(batch, li, n);
}

//блистеры
quantity 'Кол-во в описи' = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY pageInventory(pageInventoryDetail), batch(pageInventoryDetail);
    
blisterQuantity 'Кол-во блистеров' (Batch batch, PageInventory li) = round0(quantity(li, batch)*blisterAmount(batch));

readOnlyBlisterQuantity (Batch batch, PageInventory li) = li IS PageInventory AND NOT blisterAmount(batch);

backgroundBlisterQuantity 'Цвет' (Batch batch, PageInventory li)  = RGB(250, 236, 199) IF li IS PageInventory AND blisterAmount(batch);

changeBlisterQuantity(Batch batch, PageInventory li) = {
    INPUT i = INTEGER DO
        IF pageInventoryDetail(batch, li) THEN {
            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
                    quantity(PageInventoryDetail detail) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), 5)) WHERE detail == pageInventoryDetail(batch, li);;
            } ELSE {
                FOR pageInventoryDetail(batch, li) == PageInventoryDetail d DO
                    DELETE d;
            }
            APPLY {};
        } ELSE {
            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
                NEW d = PageInventoryDetail {
                    pageInventory(d) <- li;
                    sku(d) <- sku(batch);
                    batch(d) <- batch;
                    quantity(d) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), 5));
                    price (d)  <- prevPriceB(SystemLedgerPriceListType.accountPriceListType, batch(d), stock(d), dateTime(d));
                }
                APPLY {};
            }
    }
}

//фильтр по цене
filterPrice 'Поиск по цене' = DATA LOCAL NUMERIC[16,4]();
filterPrice 'Ввести цену' (Batch bt, PageInventory li) = (filterPrice() AND currentPrice(bt, li)==filterPrice()) OR NOT filterPrice();

filterBarcode 'Поиск по штрих коду' = DATA LOCAL VARISTRING[15]();
filterBarcode 'Ввести штрих код' (Batch bt) = (filterBarcode() AND sku(barcode(filterBarcode()))==sku(bt)) OR NOT filterBarcode();

prevBalanceB 'Тек. остаток' (Batch batch, PageInventory li) = prevBalanceB(batch, stock(listInventory(li)), dateTime(listInventory(li)));

countLedger (Batch bt, PageInventory li) = countLedger(bt, stock(listInventory(li)));

//логика работы с текущей инвентаризацией
currentPharmacyListInventory 'Текущая инвентаризация' = DATA LOCAL NESTED PageInventory ();
showCurrenct (Batch batch) = batch IS Batch AND currentPharmacyListInventory();

number 'Номер инвентаризации' (PageInventory page) = number(inventory(listInventory(page)));
date 'Дата инвентаризации' (PageInventory page)= date(listInventory(page));
nameStock 'Склад' (PageInventory page) = nameStock(listInventory(page));

balanceB 'Остаток' (Batch batch, PageInventory li) = balanceB(batch, stock(listInventory(li)), dateTime(listInventory(li)))  ;
currentPharmacyListInventoryBalanceB() = currentPharmacyListInventory() AND showBalanceB();

setCurrentPharmacyListInventory 'Открыть' (Inventory inventory) = {
    currentPharmacyListInventory() <- pageInventory(inventory);
} TOOLBAR CONFIRM IMAGE 'edit.png';

skipCurrentPharmacyListInventory 'Закрыть' () = {
    currentPharmacyListInventory() <- NULL;
} TOOLBAR CONFIRM; 

//создание ивентаризации для аптеки
defaultRetailPharmacyInventoryOperation 'Операция инвентаризации о аптекам' = DATA Operation();
nameDefaultRetailPharmacyInventoryOperation 'Операция инвентаризации о аптекам' = name(defaultRetailPharmacyInventoryOperation());

EXTEND FORM options
    PROPERTIES () nameDefaultRetailPharmacyInventoryOperation
;

DESIGN options {
    pharmacy {
        MOVE PROPERTY(nameDefaultRetailPharmacyInventoryOperation());   
    }
}

createRetailPharmacyInventory 'Создать инвентаризацию' () = {
    DIALOG departmentStores OBJECTS d INPUT DO {
        NEW in = Inventory {
            include(d, in) <- TRUE;
            date(in) <- currentDate();
            operation(in) <- defaultRetailPharmacyInventoryOperation();
            NEW li = ListInventory {
                stock(li) <- d;
                inventory(li) <- in;
                NEW pi = PageInventory {
                    listInventory(pi) <- li;    
                }
	        }
        }
        APPLY {};   
    }
} TOOLBAR IMAGE 'add.png'; 

skipInventoryFilters 'Обнулить поиск' () = {
    filterPrice() <- NULL;
    filterNameSku() <- NULL;
    filterBarcode() <- NULL;
} EDITKEY 'ESCAPE';

FORM inventoryPharmacyDashboard 'Инвентаризационные описи'
    OBJECTS in=Inventory LAST
    PROPERTIES(in) READONLY SHOWIF NOT currentPharmacyListInventory() isPosted , number, series, date, time, nameStock, name, note, quantityShortage, sumShortage
    PROPERTIES (in) SHOWIF NOT currentPharmacyListInventory() setCurrentPharmacyListInventory
    PROPERTIES () SHOWIF NOT currentPharmacyListInventory() createRetailPharmacyInventory TODRAW in
    FILTERS isOpened(in), isDraft(in), isRetailPharmacy(in)
    FILTERS accessCompanyStockCurrentUser(in) OR NOT countStocks(in)
    
    PROPERTIES () SHOWIF currentPharmacyListInventory() filterPrice, filterNameSku, filterBarcode, skipInventoryFilters
    OBJECTS li = PageInventory PANEL
    PROPERTIES (li) SELECTOR SHOWIF currentPharmacyListInventory() number, date, nameStock, note
    FILTERS currentPharmacyListInventory()==li
    
    OBJECTS bt = Batch GRID
    PROPERTIES (bt) READONLY SHOWIF currentPharmacyListInventory() prevNameSku
    PROPERTIES (bt, li) READONLY SHOWIF currentPharmacyListInventoryBalanceB() balanceB
    PROPERTIES (li, bt) SHOWIF currentPharmacyListInventory() quantity ON CHANGE changeQuantity(bt, li) QUICKFILTER prevNameSku(bt)
    PROPERTIES (bt, li) READONLY SHOWIF currentPharmacyListInventory() currentPrice
    PROPERTIES (bt, li) SHOWIF currentPharmacyListInventory() blisterQuantity ON CHANGE changeBlisterQuantity(bt, li) READONLYIF readOnlyBlisterQuantity(bt, li) BACKGROUND backgroundBlisterQuantity(bt, li)
    PROPERTIES (bt) READONLY SHOWIF currentPharmacyListInventory() expiryDate, seriesPharmacy, nameManufacturer, nameCountry
    ORDER BY prevNameSku(bt)
    FILTERS filterPrice(bt, li), filterNameSku(bt), filterBarcode(bt)
    FILTERGROUP balances
        FILTER 'С остатком в аптеке' prevBalanceB(bt, li)
        FILTER 'С движением в аптеке' countLedger(bt, li) AND currentPrice(bt, li) DEFAULT
    PROPERTIES () SHOWIF currentPharmacyListInventory() skipCurrentPharmacyListInventory TOOLBAR TODRAW li
     
    OBJECTS          dp=PageInventoryDetail GRID
    PROPERTIES (dp)  READONLY SHOWIF currentPharmacyListInventory() index, nameSkuTypeSku, idBarcodeSku, nameSku, nameBatch,
                              quantity, price, sum
    FILTERS pageInventory(dp)==li
;

DESIGN inventoryPharmacyDashboard {
    NEW inventories {
        type = CONTAINERH; 
        fill = 1;
        MOVE in.box;
    }
    NEW inventory {
        type = CONTAINERH;
        MOVE PROPERTY(date(li)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;};
        MOVE PROPERTY(number(li)) { focusable = TRUE; font = '18'; minimumCharWidth = 8; preferredCharWidth = 8;};
        MOVE PROPERTY(nameStock(li)) { focusable = FALSE; font = '18'; minimumCharWidth = 12; preferredCharWidth = 15;};
        MOVE PROPERTY(note(li)) { focusable = FALSE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 25;};
        MOVE PROPERTY(skipCurrentPharmacyListInventory()) { focusable = TRUE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 25;}; 
    }
    NEW header {
        type = CONTAINERH;
        MOVE PROPERTY(filterPrice()){ caption = 'Ввести цену'; panelCaptionAbove = TRUE; font = 'bold 22'; editKey = 'F5'; }
        MOVE PROPERTY(filterNameSku()){ caption = 'Ввести наименование'; panelCaptionAbove = TRUE; font = 'bold 22'; editKey = 'F3'; }
        MOVE PROPERTY(filterBarcode()){ caption = 'Ввести штрих код'; panelCaptionAbove = TRUE; font = 'bold 22'; editKey = 'F4'; }
        MOVE PROPERTY(skipInventoryFilters()){ panelCaptionAbove = TRUE; fontSize = 14; }
    }
    NEW tabbed {
        type = TABBED;
        fill = 1;
        MOVE bt.box {
            PROPERTY(prevNameSku(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 45; preferredCharWidth = 60;}
            PROPERTY(balanceB(bt, li)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(quantity(li, bt)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4;}
            PROPERTY(blisterQuantity(bt, li)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPrice(bt, li)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(expiryDate(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(seriesPharmacy(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 5; preferredCharWidth = 8;}
            PROPERTY(nameManufacturer(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 30;}
            PROPERTY(nameCountry(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 8; preferredCharWidth = 12;}
        }
        MOVE dp.box; 
    }
    MOVE functions.box;    
}

@extendFormFilterRoleAccess(inventory, in, inventoryPharmacyDashboard);

NAVIGATOR {
    retailDashboardNavigator {
        ADD inventoryPharmacyDashboard;
    }
}