MODULE POSPharmacy;

REQUIRE POS, StockPharmacy, ItemPharmacy, Bin;

NAMESPACE POS;

quantity 'Кол-во расход' = GROUP SUM quantity(ReceiptSaleDetail receiptDetail)
        BY batch(receiptDetail), receipt(receiptDetail);

receiptDetail =  GROUP MAX (ReceiptSaleDetail receiptDetail)
    BY batch(receiptDetail), receipt(receiptDetail);
        
changeQuantityValue (Batch batch, Receipt receipt) =  ACTION {
    IF receiptDetail(batch, receipt) THEN {
        IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
            quantity(ReceiptSaleDetail receiptDetail) <- requestedNumeric() WHERE receiptDetail == receiptDetail(batch, receipt);
        } ELSE {
            FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
                DELETE d;
        }
    } ELSE {
        IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
            FOR ADDOBJ d = ReceiptSaleDetail DO {
                receipt(d) <- receipt;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                quantity (d) <- requestedNumeric();
                price(d) <- currentPOSPrice(batch, receipt);
            }
        }
    }
}     
        
changeQuantity(Batch batch, Receipt receipt) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    changeQuantityValue(batch, receipt);
}

backgroundQuantity (Batch batch, Receipt receipt) = IF quantity(batch, receipt) > prevCurrentBalance(batch, receipt)
    THEN RGB(255,128,128);

//продажа блистеров
blisterAmount 'Кол-во блистеров' (Batch batch) = blisterAmount(sku(batch));

blisterQuantity 'Кол-во блистеров' (Batch batch, Receipt receipt) = round0(quantity(batch, receipt)*blisterAmount(batch));

readOnlyBlisterQuantity (Batch batch, Receipt receipt) = receipt IS Receipt AND NOT blisterAmount(batch);

backgroundBlisterQuantity 'Цвет' (Batch batch, Receipt receipt)  = RGB(250, 236, 199) IF receipt IS Receipt AND blisterAmount(batch);

changeBlisterQuantity(Batch batch, Receipt receipt) = ACTION {
    REQUEST INTEGER INPUT;
    IF receiptDetail(batch, receipt) THEN {
        IF (requestedInteger() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedInteger() != 0) THEN {
            quantity(ReceiptSaleDetail receiptDetail) <- NUMERIC[16,5](round(NUMERIC[16,5](requestedInteger())/blisterAmount(batch), 5)) WHERE receiptDetail == receiptDetail(batch, receipt);
//            sum(ReceiptSaleDetail receiptDetail) <-round2((price(receiptDetail)/blisterAmount(batch))*requestedInteger()) WHERE receiptDetail == receiptDetail(batch, receipt);
        } ELSE {
            FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
                DELETE d;
        }
    } ELSE {
        IF (requestedInteger() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedInteger() != 0) THEN {
            FOR ADDOBJ d = ReceiptSaleDetail DO {
                receipt(d) <- receipt;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                quantity (d) <- NUMERIC[16,5](round(NUMERIC[16,5](requestedInteger())/blisterAmount(batch), 5));
                price(d) <- currentPOSPrice(batch, receipt);
//                sum(d) <-round((price(d)/blisterAmount(batch))*requestedInteger(), roundCondition(departmentStore(d)));
            }
        }
    }
}

needPrescription 'Рецепт' (Batch batch) = needPrescription(sku(batch));    
prescriptionMessage (Batch batch) = IF needPrescription(batch) THEN 'Требуется рецепт';

backgroundExpiryDate = ABSTRACT COLOR (Batch, Receipt);           

nameBin 'Ячейка' (Batch batch, Receipt receipt) = nameBin(departmentStore(zReport(receipt)), sku(batch));  
currentPOSBlisterPrice 'Цена блистера' (Batch batch, Receipt receipt) = currentPOSPrice(batch, receipt)/blisterAmount(batch) IF currentPOSPrice(batch, receipt); 

pharmacyDescription 'Партия' (Batch batch) = CONCAT '', nameSku(batch), '/ ' + nameManufacturer(batch), '/ ' + nameCountry(batch);             
           
EXTEND FORM POS
    OBJECTS bt = Batch FIXED GRID
    PROPERTIES (bt) READONLY pharmacyDescription FORCE PANEL
    PROPERTIES (bt) READONLY prevNameSku, needPrescription, prescriptionMessage TODRAW d FORCE PANEL SHOWIF needPrescription(bt)
    PROPERTIES (bt, r) nameBin READONLY, quantityReceiptGrid = quantity ON CHANGE changeQuantity(bt, r) BACKGROUND backgroundQuantity(bt, r) QUICKFILTER prevNameSku(bt)
    PROPERTIES (bt, r) blisterQuantity ON CHANGE changeBlisterQuantity(bt, r) READONLYIF readOnlyBlisterQuantity(bt, r) BACKGROUND backgroundBlisterQuantity(bt, r)
    PROPERTIES (bt, r) READONLY prevCurrentBalance, currentPOSPrice, currentPOSBlisterPrice BACKGROUND backgroundBlisterQuantity(bt, r)
    PROPERTIES (bt) READONLY expiryDate BACKGROUND backgroundExpiryDate(bt, r), seriesPharmacy, nameManufacturer, nameCountry, nameSubstance
    ORDER BY prevNameSku(bt)
    FILTERS prevCurrentBalance(bt, r)
    FILTERGROUP balance
        FILTER 'В чеке' quantity(bt, r)   
;

changeAnalogueBlisterQuantity(Batch batch, Receipt receipt) = ACTION {
    REQUEST INTEGER INPUT;
    changeBlisterQuantity(batch, receipt);
    FOCUS POS.quantityReceiptGrid;
    SEEK POS.bt = batch;
}

changeAnalogueQuantity(Batch batch, Receipt receipt) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    changeQuantityValue(batch, receipt);
    FOCUS POS.quantityReceiptGrid;
    SEEK POS.bt = batch;
}

EXTEND FORM POS
    OBJECTS bt1 = Batch FIXED GRID
    PROPERTIES (bt1) READONLY prevNameSku
    PROPERTIES (bt1, r) nameBin READONLY, quantity ON CHANGE changeAnalogueQuantity(bt1, r) BACKGROUND backgroundQuantity(bt1, r)
    PROPERTIES (bt1, r) blisterQuantity ON CHANGE changeAnalogueBlisterQuantity(bt1, r) READONLYIF readOnlyBlisterQuantity(bt1, r) BACKGROUND backgroundBlisterQuantity(bt1, r)
    PROPERTIES (bt1, r) READONLY prevCurrentBalance, currentPOSPrice, currentPOSBlisterPrice  BACKGROUND backgroundBlisterQuantity(bt1, r)
    PROPERTIES (bt1) READONLY expiryDate BACKGROUND backgroundExpiryDate(bt, r), seriesPharmacy, nameManufacturer, nameCountry
    FILTERS prevCurrentBalance(bt1, r), substance(bt)==substance(bt1) AND NOT sku(bt)==sku(bt1)
    ORDER BY prevNameSku(bt1)        
;
    
DESIGN POS {
    NEW tabbed BEFORE center {
        type = TABBED;
        fill = 1;
        MOVE bt.box{
            bt.grid {
                quickSearch = TRUE;
            }
            caption = 'Остатки';
            PROPERTY(prevNameSku(bt)) { focusable = TRUE; font = '18'; minimumCharWidth = 40; preferredCharWidth = 50;}
            PROPERTY(nameBin(bt, r)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(quantityReceiptGrid) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4; pattern = '#,##0.###';}
            PROPERTY(blisterQuantity(bt, r)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(prevCurrentBalance(bt, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; minimumCharWidth = 3; preferredCharWidth = 5; pattern = '#,##0.###';}
            PROPERTY(currentPOSPrice(bt, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(currentPOSBlisterPrice(bt, r)) { focusable = FALSE; font = '18'; pattern = '#,##0.00';caption = 'Цена блистера';;minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(expiryDate(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(seriesPharmacy(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 5; preferredCharWidth = 8;}
            PROPERTY(nameManufacturer(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 30;}
            PROPERTY(nameCountry(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 8; preferredCharWidth = 15;}
            PROPERTY(nameSubstance(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 10; preferredCharWidth = 20;}
            REMOVE bt.toolbar;
        }
        MOVE d.box {
            PROPERTY(quantityGrid){pattern = '#,##0.###';}
        }
    }
    NEW pharmacyDescription BEFORE center {
        alignment = STRETCH;
        type = CONTAINERH;
        MOVE PROPERTY(pharmacyDescription(bt)) { font = '22 bold';minimumCharWidth = 120; preferredCharWidth = 120; focusable = FALSE; panelCaptionAbove = TRUE; alignment = STRETCH;}
    }
    pane {
        MOVE bt1.box BEFORE pc.box {
            caption = 'Аналоги';
            REMOVE bt1.toolbar;
            PROPERTY(prevNameSku(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 30; preferredCharWidth = 40;}
            PROPERTY(nameBin(bt1, r)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(quantity(bt1, r)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4; pattern = '#,##0.###';}
            PROPERTY(blisterQuantity(bt1, r)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4; pattern = '#,##0.###';}
            PROPERTY(prevCurrentBalance(bt1, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; minimumCharWidth = 3; preferredCharWidth = 5; pattern = '#,##0.###';}
            PROPERTY(currentPOSPrice(bt1, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';}
            PROPERTY(currentPOSBlisterPrice(bt1, r)) { focusable = FALSE; font = '18'; pattern = '#,##0.00';caption = 'Цена блистера';}
            PROPERTY(expiryDate(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(seriesPharmacy(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 5; preferredCharWidth = 8;}
            PROPERTY(nameManufacturer(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 30;}
            PROPERTY(nameCountry(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 8; preferredCharWidth = 15;}
        } 
    }
    north {
        NEW prescription AFTER r.receiptReturnAction {
            caption = 'Рецепт';
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY(prescriptionMessage(bt)) {
                caption = ''; focusable = FALSE; font = 'bold 24'; foreground = #952828;           
            }
        }
    }
    s.box {
        caption = 'Остатки на других аптеках';
    }
    REMOVE PROPERTY(searchBatchSale(r));
    REMOVE PROPERTY(nameBatchPanel);
    REMOVE PROPERTY(nameSkuPanel);
    REMOVE PROPERTY(idBarcodePanel);
    REMOVE PROPERTY(quantityPanel);
    REMOVE PROPERTY(shortNameUOMSkuPanel);
    REMOVE PROPERTY(pricePanel);
    REMOVE PROPERTY(sumPanel);
}

overChangeBatch(ReceiptDetail d) += ACTION {
    FOCUS POS.quantityReceiptGrid;
    SEEK POS.bt = batch(d);
};

EXTEND FORM chooseBatchReceipt
    PROPERTIES (bt) READONLY pharmacyDescription BEFORE documentNameSku(bt), expiryDate BEFORE name(bt)
;

DESIGN chooseBatchReceipt {
    PROPERTY(documentNameSku(bt)) {
        hide = TRUE;
    }
    PROPERTY(name(bt)){
        hide = TRUE;
    }
    PROPERTY(dateTime(bt)){
        hide = TRUE;
    }
    PROPERTY(pharmacyDescription(bt)) { font = '18'; minimumCharWidth = 50; preferredCharWidth = 70;}
    PROPERTY(prevCurrentBalance(bt, st)) { font = '18'; fontStyle = 'bold'; minimumCharWidth = 3; preferredCharWidth = 5; pattern = '#,##0.###';}
    PROPERTY(currentPOSPrice(bt, d)) { font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';}
    PROPERTY(expiryDate(bt)) { font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
}

