MODULE POSPharmacy;

REQUIRE POS, StockPharmacy, ItemPharmacy, Bin;

NAMESPACE POS;

quantity 'Кол-во расход' = GROUP SUM quantity(ReceiptSaleDetail receiptDetail)
        BY batch(receiptDetail), receipt(receiptDetail);

receiptDetail =  GROUP MAX (ReceiptSaleDetail receiptDetail)
    BY batch(receiptDetail), receipt(receiptDetail);
    
minDelta 'Отклонение по количеству в чеке' = DATA NUMERIC[16,5]();

EXTEND FORM options
    PROPERTIES () minDelta
;

DESIGN options {
    pharmacy {
        MOVE PROPERTY(minDelta());
    }
}
        
changeQuantityValue (Batch batch, Receipt receipt, NUMERIC[16,5] n) =  {
    IF receiptDetail(batch, receipt) THEN {
        IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
            IF minDelta() AND delta(prevCurrentBalance(batch, receipt), n) < minDelta() THEN {
                quantity(ReceiptSaleDetail receiptDetail) <- prevCurrentBalance(batch, receipt) WHERE receiptDetail == receiptDetail(batch, receipt);    
            } ELSE {
                quantity(ReceiptSaleDetail receiptDetail) <- n WHERE receiptDetail == receiptDetail(batch, receipt);
            }
        } ELSE {
            FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
                DELETE d;
        }
    } ELSE {
        IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
            NEW d = ReceiptSaleDetail {
                receipt(d) <- receipt;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                IF minDelta() AND delta(prevCurrentBalance(batch, receipt), n) < minDelta() THEN {
                    quantity(ReceiptSaleDetail receiptDetail) <- prevCurrentBalance(batch, receipt) WHERE receiptDetail == receiptDetail(batch, receipt);    
                } ELSE {
                    quantity(ReceiptSaleDetail receiptDetail) <- n WHERE receiptDetail == receiptDetail(batch, receipt);
                }
                price(d) <- currentPOSPrice(batch, receipt);
            }
        }
    }
}     
        
changeQuantity(Batch batch, Receipt receipt) = {
    INPUT n = NUMERIC[16,5] DO
        changeQuantityValue(batch, receipt, n);
}

backgroundQuantity (Batch batch, Receipt receipt) = IF quantity(batch, receipt) > prevCurrentBalance(batch, receipt)
    THEN RGB(255,128,128);

//продажа блистеров
blisterAmount 'Кол-во блистеров' (Batch batch) = blisterAmount(sku(batch));

blisterQuantity 'Кол-во блистеров' (Batch batch, Receipt receipt) = round0(quantity(batch, receipt)*blisterAmount(batch));

readOnlyBlisterQuantity (Batch batch, Receipt receipt) = receipt IS Receipt AND NOT blisterAmount(batch);

backgroundBlisterQuantity 'Цвет' (Batch batch, Receipt receipt)  = RGB(250, 236, 199) IF receipt IS Receipt AND blisterAmount(batch);

changeBlisterQuantity(Batch batch, Receipt receipt) = {
    INPUT i = INTEGER DO
        IF receiptDetail(batch, receipt) THEN {
            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
                IF minDelta() AND delta(prevCurrentBalance(batch, receipt), round(NUMERIC[16,5](i)/blisterAmount(batch), 3)) < minDelta() THEN {
                    quantity (ReceiptSaleDetail receiptDetail) <- prevCurrentBalance(batch, receipt) WHERE receiptDetail == receiptDetail(batch, receipt);
                } ELSE {
                    quantity(ReceiptSaleDetail receiptDetail) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), 3)) WHERE receiptDetail == receiptDetail(batch, receipt);
                }
    //            sum(ReceiptSaleDetail receiptDetail) <-round2((price(receiptDetail)/blisterAmount(batch))*requestedInteger()) WHERE receiptDetail == receiptDetail(batch, receipt);
            } ELSE {
                FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
                NEW d = ReceiptSaleDetail {
                    receipt(d) <- receipt;
                    sku(d) <- sku(batch);
                    batch(d) <- batch;
                    IF minDelta() AND delta(prevCurrentBalance(batch, receipt), round(NUMERIC[16,5](i)/blisterAmount(batch), 3)) < minDelta() THEN {
                        quantity (d) <- prevCurrentBalance(batch, receipt);
                    } ELSE {
                        quantity (d) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), 3));
                    }
                    price(d) <- currentPOSPrice(batch, receipt);
    //                sum(d) <-round((price(d)/blisterAmount(batch))*requestedInteger(), roundCondition(departmentStore(d)));
                }
            }
        }
}

needPrescription 'Рецепт' (Batch batch) = needPrescription(sku(batch));    
prescriptionMessage 'Рецепт' (Batch batch) = IF needPrescription(batch) THEN 'Требуется рецепт';

backgroundExpiryDate = ABSTRACT COLOR (Batch, Receipt);           

nameBin 'Ячейка' (Batch batch, Receipt receipt) = nameBin(departmentStore(zReport(receipt)), sku(batch));  
currentPOSBlisterPrice 'Цена блистера' (Batch batch, Receipt receipt) = currentPOSPrice(batch, receipt)/blisterAmount(batch) IF currentPOSPrice(batch, receipt); 

pharmacyDescription 'Партия' (Batch batch) = CONCAT '', nameSku(batch), '/ ' + nameManufacturer(batch), '/ ' + nameCountry(batch);             

filterBarcode 'Поиск по штрих коду' = DATA LOCAL VARISTRING[15]();
filterBarcode 'Ввести штрих код' (Batch bt) = (filterBarcode() AND sku(barcode(filterBarcode()))==sku(bt)) OR NOT filterBarcode();

//фильтр по цене
filterPrice 'Поиск по цене' = DATA LOCAL NUMERIC[16,4]();
filterPrice 'Ввести цену' (Batch bt, Receipt r) = (filterPrice() AND currentPOSPrice(bt, r)==filterPrice()) OR NOT filterPrice();

//фильтр по цене
filterNameSku 'Поиск по наименованию' = DATA LOCAL VARISTRING[20]();
filterNameSku 'Ввести наименование' (Batch bt) = (filterNameSku() AND isISubstring(prevNameSku(bt), filterNameSku())) OR NOT filterNameSku();
filterNameSku 'Ввести наименование' (Sku sku) = (filterNameSku() AND isISubstring(name(sku), filterNameSku())) OR NOT filterNameSku();

skipFilters 'Обнулить поиск' () = {
    filterBarcode() <- NULL;
    filterPrice() <- NULL;
    filterNameSku() <- NULL; 
} EDITKEY 'ESCAPE';
           
EXTEND FORM POS
    PROPERTIES () SHOWIF currentZReport() filterBarcode EVENTID 'SCANNER', filterPrice, filterNameSku
    OBJECTS bt = Batch GRID
    PROPERTIES (bt) SHOWIF currentZReport() READONLY pharmacyDescription PANEL
    PROPERTIES (bt) SHOWIF currentZReport() READONLY prevNameSku, needPrescription, prescriptionMessage TODRAW d PANEL SHOWIF needPrescription(bt)
    PROPERTIES (bt, r) SHOWIF currentZReport() nameBin READONLY, quantityReceiptGrid = quantity ON CHANGE changeQuantity(bt, r) BACKGROUND backgroundQuantity(bt, r) QUICKFILTER prevNameSku(bt)
    PROPERTIES (bt, r) SHOWIF currentZReport() blisterQuantity ON CHANGE changeBlisterQuantity(bt, r) READONLYIF readOnlyBlisterQuantity(bt, r) BACKGROUND backgroundBlisterQuantity(bt, r)
    PROPERTIES (bt, r) SHOWIF currentZReport() READONLY prevCurrentBalance, currentPOSPrice, currentPOSBlisterPrice BACKGROUND backgroundBlisterQuantity(bt, r)
    PROPERTIES (bt) SHOWIF currentZReport() READONLY expiryDate BACKGROUND backgroundExpiryDate(bt, r), seriesPharmacy, nameManufacturer, nameCountry, nameSubstance
    ORDER BY prevNameSku(bt)
    FILTERS filterPrice(bt, r), filterNameSku(bt), filterBarcode(bt)  
    FILTERS prevCurrentBalance(bt, r)
//    FILTERGROUP balance
//        FILTER 'В чеке' quantity(bt, r)
         
    PROPERTIES () skipFilters TOOLBAR TODRAW bt         
;

changeAnalogueBlisterQuantity(Batch batch, Receipt receipt) = {
    changeBlisterQuantity(batch, receipt);
    FOCUS POS.quantityReceiptGrid;
    SEEK POS.bt = batch;
}

changeAnalogueQuantity(Batch batch, Receipt receipt) = {
    INPUT n = NUMERIC[16,5] DO {
        changeQuantityValue(batch, receipt, n);
        FOCUS POS.quantityReceiptGrid;
        SEEK POS.bt = batch;
    }
}

EXTEND FORM POS
    OBJECTS bt1 = Batch GRID
    PROPERTIES (bt1) SHOWIF currentZReport() READONLY prevNameSku
    PROPERTIES (bt1, r) SHOWIF currentZReport() nameBin READONLY, quantity ON CHANGE changeAnalogueQuantity(bt1, r) BACKGROUND backgroundQuantity(bt1, r)
    PROPERTIES (bt1, r) SHOWIF currentZReport() blisterQuantity ON CHANGE changeAnalogueBlisterQuantity(bt1, r) READONLYIF readOnlyBlisterQuantity(bt1, r) BACKGROUND backgroundBlisterQuantity(bt1, r)
    PROPERTIES (bt1, r) SHOWIF currentZReport() READONLY prevCurrentBalance, currentPOSPrice, currentPOSBlisterPrice  BACKGROUND backgroundBlisterQuantity(bt1, r)
    PROPERTIES (bt1) SHOWIF currentZReport() READONLY expiryDate BACKGROUND backgroundExpiryDate(bt, r), seriesPharmacy, nameManufacturer, nameCountry
    FILTERS prevCurrentBalance(bt1, r), substance(bt)==substance(bt1) AND NOT sku(bt)==sku(bt1)
    ORDER BY prevNameSku(bt1)        
;
    
DESIGN POS {
    r.receiptSaleAction {
        MOVE PROPERTY(filterBarcode()){ caption = 'Ввести штріх код'; panelCaptionAbove = TRUE; font = 'bold 22'; editKey = 'F4'; }
        MOVE PROPERTY(filterPrice()){ caption = 'Ввести цену'; panelCaptionAbove = TRUE; font = 'bold 22'; editKey = 'F5'; }
        MOVE PROPERTY(filterNameSku()){ caption = 'Ввести наименование'; panelCaptionAbove = TRUE; font = 'bold 22'; editKey = 'F3'; }
        //EVENTID 'SCANNER'
        REMOVE PROPERTY(barcodeSale);
    }
    NEW tabbed BEFORE center {
        type = TABBED;
        fill = 1;
        MOVE bt.box{
            bt.grid {
                quickSearch = TRUE;
            }
            caption = 'Остатки';
            PROPERTY(prevNameSku(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 40; preferredCharWidth = 50;}
            PROPERTY(needPrescription(bt)) {focusable = FALSE;}
            PROPERTY(nameBin(bt, r)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(quantityReceiptGrid) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4;}
            PROPERTY(blisterQuantity(bt, r)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(prevCurrentBalance(bt, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; minimumCharWidth = 3; preferredCharWidth = 5; pattern = '#,##0.###';}
            PROPERTY(currentPOSPrice(bt, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(currentPOSBlisterPrice(bt, r)) { focusable = FALSE; font = '18'; pattern = '#,##0.00';caption = 'Цена блистера';;minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(expiryDate(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(seriesPharmacy(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 5; preferredCharWidth = 8;}
            PROPERTY(nameManufacturer(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 30;}
            PROPERTY(nameCountry(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 8; preferredCharWidth = 15;}
            PROPERTY(nameSubstance(bt)) { focusable = FALSE; font = '18'; minimumCharWidth = 10; preferredCharWidth = 20;}
            REMOVE bt.toolbar;
        }
    }
    NEW pharmacyDescription BEFORE center {
        alignment = STRETCH;
        type = CONTAINERH;
        MOVE PROPERTY(pharmacyDescription(bt)) { font = '22 bold';minimumCharWidth = 120; preferredCharWidth = 120; focusable = FALSE; panelCaptionAbove = TRUE; alignment = STRETCH;}
        MOVE PROPERTY(skipFilters()) {caption = ''; showEditKey = FALSE;}; 
    }
    pane {
        MOVE d.box BEFORE pc.box;
        MOVE bt1.box BEFORE pc.box {
            caption = 'Аналоги';
            REMOVE bt1.toolbar;
            PROPERTY(prevNameSku(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 30; preferredCharWidth = 40;}
            PROPERTY(nameBin(bt1, r)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(quantity(bt1, r)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4;}
            PROPERTY(blisterQuantity(bt1, r)) { focusable = TRUE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5; background = #D4FFD4; pattern = '#,##0.###';}
            PROPERTY(prevCurrentBalance(bt1, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; minimumCharWidth = 3; preferredCharWidth = 5; pattern = '#,##0.###';}
            PROPERTY(currentPOSPrice(bt1, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';}
            PROPERTY(currentPOSBlisterPrice(bt1, r)) { focusable = FALSE; font = '18'; pattern = '#,##0.00';caption = 'Цена блистера';}
            PROPERTY(expiryDate(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
            PROPERTY(seriesPharmacy(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 5; preferredCharWidth = 8;}
            PROPERTY(nameManufacturer(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 15; preferredCharWidth = 30;}
            PROPERTY(nameCountry(bt1)) { focusable = FALSE; font = '18'; minimumCharWidth = 8; preferredCharWidth = 15;}
        }
        MOVE r.receiptReturnAction {
            caption = 'Возврат';
        }
    }
    north {
        NEW prescription {
            caption = 'Рецепт';
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY(prescriptionMessage(bt)) {
                focusable = FALSE; font = 'bold 24'; foreground = #952828; panelCaptionAbove = TRUE;           
            }
        }
    }
    s.box {
        caption = 'Остатки на других аптеках';
    }
    REMOVE PROPERTY(searchBatchSale(r));
    REMOVE PROPERTY(nameBatchPanel);
    REMOVE PROPERTY(nameSkuPanel);
    REMOVE PROPERTY(idBarcodePanel);
    REMOVE PROPERTY(quantityPanel);
    REMOVE PROPERTY(shortNameUOMSkuPanel);
    REMOVE PROPERTY(pricePanel);
    REMOVE PROPERTY(sumPanel);
}

overChangeBatch(ReceiptDetail d) += {
    FOCUS POS.quantityReceiptGrid;
    SEEK POS.bt = batch(d);
};

EXTEND FORM chooseBatchReceipt
    PROPERTIES (bt) READONLY pharmacyDescription BEFORE documentNameSku(bt), expiryDate BEFORE name(bt)
;

DESIGN chooseBatchReceipt {
    PROPERTY(documentNameSku(bt)) {
        hide = TRUE;
    }
    PROPERTY(name(bt)){
        hide = TRUE;
    }
    PROPERTY(dateTime(bt)){
        hide = TRUE;
    }
    PROPERTY(pharmacyDescription(bt)) { font = '18'; minimumCharWidth = 50; preferredCharWidth = 70;}
    PROPERTY(prevCurrentBalance(bt, st)) { font = '18'; fontStyle = 'bold'; minimumCharWidth = 3; preferredCharWidth = 5; pattern = '#,##0.###';}
    PROPERTY(currentPOSPrice(bt, d)) { font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';}
    PROPERTY(expiryDate(bt)) { font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
}

