MODULE POSPharmacy;

REQUIRE POS, StockPharmacy, ItemPharmacy, Bin, PurchaseInvoicePharmacy;

NAMESPACE POS;

quantity 'Кол-во расход' = GROUP SUM quantity(ReceiptSaleDetail receiptDetail)
        BY batch(receiptDetail), receipt(receiptDetail);

receiptDetail =  GROUP MAX (ReceiptSaleDetail receiptDetail)
    BY batch(receiptDetail), receipt(receiptDetail);
    
minDelta 'Отклонение по количеству в чеке' = DATA NUMERIC[16,5]();

checkBlisterAmount 'Запрет на продажу блистеров, если в карточке не указано количество' = DATA BOOLEAN ();

useBlisterInFiscalPrint 'Использовать блистеры при печати чека' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () minDelta, checkBlisterAmount, useBlisterInFiscalPrint
;

DESIGN options {
    pharmacy {
        MOVE PROPERTY(minDelta());
    }
    pos {
        MOVE PROPERTY(checkBlisterAmount());
        MOVE PROPERTY(useBlisterInFiscalPrint());
    }
}

//blisterAmount 'Кол-во блистеров' (Batch batch) = blisterAmount(sku(batch));
        
//changeQuantityValue (Batch batch, Receipt receipt, NUMERIC[16,5] n) =  {
//    IF receipt IS Receipt AND blisterAmount(sku(batch)) AND n AND NOT trunc(n*blisterAmount(sku(batch)),0) == n*blisterAmount(sku(batch)) AND checkBlisterAmount() THEN {
//        MESSAGE 'Количество блистеров должно быть целым';
//    } ELSE 
//    IF batch IS Batch AND receipt IS Receipt AND n AND NOT  blisterAmount(sku(batch)) AND NOT trunc(n,0) == n AND checkBlisterAmount() THEN {
//        MESSAGE 'Нельзя продавать блистеры, т.к в карточке не указано количество';
//    } ELSE {
//        IF receiptDetail(batch, receipt) THEN {
//            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
//                IF minDelta() AND delta(prevCurrentBalance(batch, receipt), n) < minDelta() THEN {
//                    quantity(ReceiptSaleDetail receiptDetail) <- prevCurrentBalance(batch, receipt) WHERE receiptDetail == receiptDetail(batch, receipt);    
//                } ELSE {
//                    quantity(ReceiptSaleDetail receiptDetail) <- n WHERE receiptDetail == receiptDetail(batch, receipt);
//                }
//            } ELSE {
//                FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
//                    DELETE d;
//            }
//        } ELSE {
//            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
//                NEW d = ReceiptSaleDetail {
//                    receipt(d) <- receipt;
//                    sku(d) <- sku(batch);
//                    batch(d) <- batch;
//                    IF minDelta() AND delta(prevCurrentBalance(batch, receipt), n) < minDelta() THEN {
//                        quantity(ReceiptSaleDetail receiptDetail) <- prevCurrentBalance(batch, receipt) WHERE receiptDetail == receiptDetail(batch, receipt);    
//                    } ELSE {
//                        quantity(ReceiptSaleDetail receiptDetail) <- n WHERE receiptDetail == receiptDetail(batch, receipt);
//                    }
//                    price(d) <- currentPOSPrice(batch, receipt);
//                }
//            }
//        }
//    }
//}  

changeQuantityValue (Batch batch, Receipt receipt, NUMERIC[16,5] n) =  {
    IF receipt IS Receipt AND blisterAmount(batch) AND n AND NOT trunc(n*blisterAmount(batch),0) == n*blisterAmount(batch) AND checkBlisterAmount() THEN {
        MESSAGE 'Количество блистеров должно быть целым';
    } ELSE 
    IF batch IS Batch AND receipt IS Receipt AND n AND NOT  blisterAmount(batch) AND NOT trunc(n,0) == n AND checkBlisterAmount() THEN {
        MESSAGE 'Нельзя продавать блистеры, т.к в карточке не указано количество';
    } ELSE {
        IF receiptDetail(batch, receipt) THEN {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                quantity(ReceiptSaleDetail receiptDetail) <- n WHERE receiptDetail == receiptDetail(batch, receipt);
            } ELSE {
                FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                NEW d = ReceiptSaleDetail {
                    receipt(d) <- receipt;
                    sku(d) <- sku(batch);
                    idBarcode(d) <- idBarcodeSku(batch);
                    batch(d) <- batch;
                    quantity(ReceiptSaleDetail receiptDetail) <- n WHERE receiptDetail == receiptDetail(batch, receipt);
                    price(d) <- currentPOSPrice(batch, receipt);
                }
            }
        }
    }
}    
        
changeQuantity(Batch batch, Receipt receipt) = {
    INPUT n = NUMERIC[16,5] DO
        changeQuantityValue(batch, receipt, n);
}

backgroundQuantity (Batch batch, Receipt receipt) = IF quantity(batch, receipt) > prevCurrentBalance(batch, receipt)
    THEN RGB(255,128,128);

//продажа блистеров
qauntityPOSRoundCondition 'Кол-во знаков после запятой в кол-ве строки чека' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES qauntityPOSRoundCondition()
;

DESIGN options {
    pos{
        MOVE PROPERTY(qauntityPOSRoundCondition());
    }
}

blisterQuantity 'Кол-во блистеров' (Batch batch, Receipt receipt) = round0(quantity(batch, receipt)*blisterAmount(batch));

readOnlyBlisterQuantity (Batch batch, Receipt receipt) = receipt IS Receipt AND NOT blisterAmount(batch);

backgroundBlisterQuantity 'Цвет' (Batch batch, Receipt receipt)  = RGB(250, 236, 199) IF receipt IS Receipt AND blisterAmount(batch);

//changeBlisterQuantity(Batch batch, Receipt receipt) = {
//    INPUT i = INTEGER DO
//        IF receiptDetail(batch, receipt) THEN {
//            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
//                IF minDelta() AND delta(prevCurrentBalance(batch, receipt), round(NUMERIC[16,5](i)/blisterAmount(batch), qauntityPOSRoundCondition())) < minDelta() THEN {
//                    quantity (ReceiptSaleDetail receiptDetail) <- prevCurrentBalance(batch, receipt) WHERE receiptDetail == receiptDetail(batch, receipt);
//                } ELSE {
//                    quantity(ReceiptSaleDetail receiptDetail) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), qauntityPOSRoundCondition())) WHERE receiptDetail == receiptDetail(batch, receipt);
//                }
//    //            sum(ReceiptSaleDetail receiptDetail) <-round2((price(receiptDetail)/blisterAmount(batch))*requestedInteger()) WHERE receiptDetail == receiptDetail(batch, receipt);
//            } ELSE {
//                FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
//                    DELETE d;
//            }
//        } ELSE {
//            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
//                NEW d = ReceiptSaleDetail {
//                    receipt(d) <- receipt;
//                    sku(d) <- sku(batch);
//                    batch(d) <- batch;
//                    IF minDelta() AND delta(prevCurrentBalance(batch, receipt), round(NUMERIC[16,5](i)/blisterAmount(batch), qauntityPOSRoundCondition())) < minDelta() THEN {
//                        quantity (d) <- prevCurrentBalance(batch, receipt);
//                    } ELSE {
//                        quantity (d) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), qauntityPOSRoundCondition()));
//                    }
//                    price(d) <- currentPOSPrice(batch, receipt);
//    //                sum(d) <-round((price(d)/blisterAmount(batch))*requestedInteger(), roundCondition(departmentStore(d)));
//                }
//            }
//        }
//}

changeBlisterQuantity(Batch batch, Receipt receipt) = {
    INPUT i = INTEGER DO {
        IF receiptDetail(batch, receipt) THEN {
            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
                IF prevCurrentBalance(batch, receipt) != trunc(prevCurrentBalance(batch, receipt), 0) AND blisterAmount(batch) AND
                    NOT (NUMERIC[16,5](i)/blisterAmount(batch)) == trunc(NUMERIC[16,5](i)/blisterAmount(batch), 0) THEN {
                    quantity(ReceiptSaleDetail receiptDetail) <- 
                        prevCurrentBalance(batch, receipt) (-) round((round0(prevCurrentBalance(batch, receipt) * blisterAmount(batch)) (-) i) / blisterAmount(batch), qauntityPOSRoundCondition())
                            WHERE receiptDetail == receiptDetail(batch, receipt);     
                } ELSE {
                    quantity(ReceiptSaleDetail receiptDetail) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), qauntityPOSRoundCondition())) WHERE receiptDetail == receiptDetail(batch, receipt);
                }
            } ELSE {
                FOR receiptDetail(batch, receipt) == ReceiptDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
                NEW d = ReceiptSaleDetail {
                    receipt(d) <- receipt;
                    sku(d) <- sku(batch);
                    idBarcode(d) <- idBarcodeSku(batch);
                    batch(d) <- batch;
                    IF prevCurrentBalance(batch, receipt) != trunc(prevCurrentBalance(batch, receipt), 0) AND blisterAmount(batch) AND
                        NOT (NUMERIC[16,5](i)/blisterAmount(batch)) == trunc(NUMERIC[16,5](i)/blisterAmount(batch), 0) THEN {
                        quantity(ReceiptSaleDetail receiptDetail) <- 
                            prevCurrentBalance(batch, receipt) (-) round((round0(prevCurrentBalance(batch, receipt) * blisterAmount(batch)) (-) i) / blisterAmount(batch), qauntityPOSRoundCondition())
                                WHERE receiptDetail == receiptDetail(batch, receipt);     
                    } ELSE {
                        quantity (d) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), qauntityPOSRoundCondition()));
                    }
                    price(d) <- currentPOSPrice(batch, receipt);
                }
            }
        }
    }    
}

needPrescription 'Рецепт' (Batch batch) = needPrescription(sku(batch));    
prescriptionMessage 'Рецепт' (Batch batch) = IF needPrescription(batch) THEN 'Требуется рецепт';

backgroundExpiryDate = ABSTRACT COLOR (Batch, Receipt);           

nameBin 'Ячейка' (Batch batch, Receipt receipt) = nameBin(departmentStore(zReport(receipt)), sku(batch));  
currentPOSBlisterPrice 'Цена блистера' (Batch batch, Receipt receipt) = currentPOSPrice(batch, receipt)/blisterAmount(batch); 

pharmacyDescription 'Партия' (Batch batch) = CONCAT '', nameSku(batch), '/ ' + nameManufacturer(batch), '/ ' + nameCountry(batch);             

filterBarcode 'Поиск по штрих коду' = DATA LOCAL NESTED VARISTRING[15]();
filterBarcode 'Ввести штрих код' (Batch bt) = sku(barcode(filterBarcode()))==sku(bt) OR NOT filterBarcode();

//фильтр по цене
filterPrice 'Поиск по цене' = DATA LOCAL NESTED NUMERIC[16,4]();
filterPrice 'Ввести цену' (Batch bt, Receipt r) = currentPOSPrice(bt, r)==filterPrice() OR NOT filterPrice();

//фильтр по цене
filterNameSku 'Поиск по наименованию' = DATA LOCAL NESTED VARISTRING[20]();
filterNameSku 'Ввести наименование' (Batch bt) = isISubstring(prevNameSku(bt), filterNameSku()) OR NOT filterNameSku();
filterNameSku 'Ввести наименование' (Sku sku) = isISubstring(name(sku), filterNameSku()) OR NOT filterNameSku();

skipFilters 'Обнулить поиск' () = {
    filterBarcode() <- NULL;
    filterPrice() <- NULL;
    filterNameSku() <- NULL; 
} CHANGEKEY 'ESCAPE';

backgroundQuantity(ReceiptDetail detail) += IF detail IS ReceiptDetail THEN #D4FFD4;

changeQuantity(ReceiptDetail detail) += WHEN detail IS ReceiptDetail THEN {
    INPUT n = NUMERIC[16,5] DO {
        IF n THEN {
            IF detail IS ReceiptDetail AND blisterAmount(batch(detail)) AND n AND NOT trunc(n*blisterAmount(batch(detail)),0) == n*blisterAmount(batch(detail)) AND checkBlisterAmount() THEN {
                MESSAGE 'Количество блистеров должно быть целым';
            } ELSE 
            IF detail IS ReceiptDetail AND batch(detail) AND n AND NOT  blisterAmount(batch(detail)) AND NOT trunc(n,0) == n AND checkBlisterAmount() THEN {
                MESSAGE 'Нельзя продавать блистеры, т.к в карточке не указано количество';
            } ELSE {
                quantity(detail) <- n;
            }          
        }
        ELSE
            DELETE detail;   
    }
}

blisterQuantity 'Кол-во блистеров' (ReceiptDetail detail) = round0(quantity(detail)*blisterAmount(batch(detail)));

backgroundBlisterQuantity 'Цвет' (ReceiptDetail detail)  = IF detail IS ReceiptDetail AND blisterAmount(batch(detail)) THEN RGB(250, 236, 199);

readOnlyBlisterQuantity (ReceiptDetail detail) = detail IS ReceiptDetail AND NOT blisterAmount(batch(detail));

returnQuantity(ReceiptReturnDetail detail) += IF quantity(receiptSaleDetail(detail)) < 1.0 THEN quantity(receiptSaleDetail(detail));                                                         

changeBlisterQuantity(ReceiptDetail detail) = {
    INPUT i = INTEGER DO {
        IF (i AND NOT deleteNullDetail()) OR (deleteNullDetail() AND i != 0) THEN {
            IF prevCurrentBalance(batch(detail), departmentStore(detail)) != trunc(prevCurrentBalance(batch(detail), departmentStore(detail)), 0) AND blisterAmount(batch(detail)) AND
                NOT (NUMERIC[16,5](i)/blisterAmount(batch(detail))) == trunc(NUMERIC[16,5](i)/blisterAmount(batch(detail)), 0) THEN {
                    IF detail IS ReceiptReturnDetail THEN {
                        quantity(detail) <- quantity(receiptSaleDetail(detail));
                    } ELSE {
                        quantity(detail) <- 
                            prevCurrentBalance(batch(detail), departmentStore(detail)) (-) 
                            round((round0(prevCurrentBalance(batch(detail), departmentStore(detail)) * blisterAmount(batch(detail))) (-) i) / blisterAmount(batch(detail)), qauntityPOSRoundCondition());
                    }          
            } ELSE {
                quantity(detail) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch(detail)), qauntityPOSRoundCondition()));
            }
        } ELSE {
            DELETE detail;
        }
    }    
}

//сумма строки чека
priceSumBlister 'Сумма без скидки' = round2(blisterQuantity(ReceiptSaleDetail detail) * (price(detail) / blisterAmount(batch(detail))));
sum (ReceiptSaleDetail detail) <- IF blisterAmount(batch(detail))
    THEN (priceSumBlister(detail) (-) discountSum(detail) (-) extraDiscountSum(detail)) 
    ELSE calcSum(detail)
    WHEN CHANGED (quantity(detail)) OR
         CHANGED (price(detail)) OR
         CHANGED (discountPercent(detail)) OR
         CHANGED (discountSum(detail)) OR
         CHANGED (extraDiscountSum(detail)) OR
         CHANGED (departmentStore(detail));

prevAvailableQuantity 'Доступное к-во (всего)' (Batch batch, Receipt receipt) = prevAvailableQuantity(batch, departmentStore(receipt));
prevAvailableQuantity 'Доступное к-во (всего)' (ReceiptDetail receiptDetail) = prevAvailableQuantity(batch(receiptDetail), receipt(receiptDetail));

blisterPrice 'Цена за блистер' (ReceiptDetail receiptDetail) = price(receiptDetail) / blisterAmount(batch(receiptDetail));
           
EXTEND FORM POS
    PROPERTIES () SHOWIF currentZReport() filterBarcode EVENTID 'SCANNER', filterPrice, filterNameSku
    OBJECTS bt = Batch GRID
    PROPERTIES (bt) SHOWIF currentZReport() READONLY pharmacyDescription PANEL
    PROPERTIES (bt) SHOWIF currentZReport() READONLY prevNameSku, needPrescription, prescriptionMessage TODRAW d PANEL SHOWIF needPrescription(bt)
    PROPERTIES (bt, r) SHOWIF currentZReport() nameBin READONLY, quantityReceiptGrid = quantity ON CHANGE changeQuantity(bt, r) BACKGROUND backgroundQuantity(bt, r) QUICKFILTER prevNameSku(bt)
    PROPERTIES (bt, r) SHOWIF currentZReport() blisterQuantity ON CHANGE changeBlisterQuantity(bt, r) READONLYIF readOnlyBlisterQuantity(bt, r) BACKGROUND backgroundBlisterQuantity(bt, r) QUICKFILTER prevNameSku(bt)
    PROPERTIES (bt, r) SHOWIF currentZReport() READONLY prevCurrentBalance, currentPOSPrice, currentPOSBlisterPrice BACKGROUND backgroundBlisterQuantity(bt, r)
    PROPERTIES (bt) SHOWIF currentZReport() READONLY expiryDate BACKGROUND backgroundExpiryDate(bt, r), seriesPharmacy, nameManufacturer, nameCountry, nameSubstance
    PROPERTIES (d) SHOWIF currentZReport() blisterQuantity ON CHANGE changeBlisterQuantity(d) READONLYIF readOnlyBlisterQuantity(d) BACKGROUND backgroundBlisterQuantity(d) AFTER quantityGrid
    PROPERTIES (d) READONLY SHOWIF currentZReport() blisterPrice BACKGROUND backgroundBlisterQuantity(d) AFTER priceGrid
    ORDER prevNameSku(bt)
    FILTERS filterPrice(bt, r), filterNameSku(bt), filterBarcode(bt)  
    FILTERS prevCurrentBalance(bt, r),
            prevAvailableQuantity(bt, r)
//    FILTERGROUP balance
//        FILTER 'В чеке' quantity(bt, r)
         
    PROPERTIES () SHOWIF currentZReport() skipFilters TOOLBAR TODRAW bt         
;

DESIGN POS {
    PROPERTY(quantityGrid) {charWidth = 5;}
    PROPERTY(blisterQuantity(d)) {font = '18'; charWidth = 5;}
    PROPERTY(blisterPrice(d)) {font = '18';}
}

changeAnalogueBlisterQuantity(Batch batch, Receipt receipt) = {
    changeBlisterQuantity(batch, receipt);
    ACTIVATE PROPERTY POS.quantityReceiptGrid;
    SEEK POS.bt = batch;
}

changeAnalogueQuantity(Batch batch, Receipt receipt) = {
    INPUT n = NUMERIC[16,5] DO {
        changeQuantityValue(batch, receipt, n);
        ACTIVATE PROPERTY POS.quantityReceiptGrid;
        SEEK POS.bt = batch;
    }
}

EXTEND FORM POS
    OBJECTS bt1 = Batch GRID
    PROPERTIES (bt1) SHOWIF currentZReport() READONLY prevNameSku
    PROPERTIES (bt1, r) SHOWIF currentZReport() nameBin READONLY, quantity ON CHANGE changeAnalogueQuantity(bt1, r) BACKGROUND backgroundQuantity(bt1, r)
    PROPERTIES (bt1, r) SHOWIF currentZReport() blisterQuantity ON CHANGE changeAnalogueBlisterQuantity(bt1, r) READONLYIF readOnlyBlisterQuantity(bt1, r) BACKGROUND backgroundBlisterQuantity(bt1, r)
    PROPERTIES (bt1, r) SHOWIF currentZReport() READONLY prevCurrentBalance, currentPOSPrice, currentPOSBlisterPrice  BACKGROUND backgroundBlisterQuantity(bt1, r)
    PROPERTIES (bt1) SHOWIF currentZReport() READONLY expiryDate BACKGROUND backgroundExpiryDate(bt, r), seriesPharmacy, nameManufacturer, nameCountry
    FILTERS prevCurrentBalance(bt1, r), substance(bt)==substance(bt1) AND NOT sku(bt)==sku(bt1)
    ORDER prevNameSku(bt1)        
;
    
DESIGN POS {
    GROUP(receiptSaleAction,r) {
        MOVE PROPERTY(filterBarcode()){ caption = 'Ввести штрих код'; panelCaptionAbove = TRUE; font = 'bold 22'; changeKey = 'F4'; }
        MOVE PROPERTY(filterPrice()){ caption = 'Ввести цену'; panelCaptionAbove = TRUE; font = 'bold 22'; changeKey = 'F5'; }
        MOVE PROPERTY(filterNameSku()){ caption = 'Ввести наименование'; panelCaptionAbove = TRUE; font = 'bold 22'; changeKey = 'F3'; }
        //EVENTID 'SCANNER'
        REMOVE PROPERTY(barcodeSale);
    }
    NEW tabbed BEFORE center {
        type = TABBED;
        fill = 1;
        MOVE BOX(bt){
//            GRID(bt) {
//                quickSearch = TRUE;
//            }
            caption = 'Остатки';
            PROPERTY(prevNameSku(bt)) { focusable = FALSE; font = '18'; charWidth = 40;}
            PROPERTY(needPrescription(bt)) {focusable = FALSE;}
            PROPERTY(nameBin(bt, r)) { focusable = FALSE; font = '18'; charWidth = 3;}
            PROPERTY(quantityReceiptGrid) { focusable = TRUE; font = '18'; charWidth = 3; background = #D4FFD4;}
            PROPERTY(blisterQuantity(bt, r)) { focusable = TRUE; font = '18'; charWidth = 3;}
            PROPERTY(prevCurrentBalance(bt, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; charWidth = 3; pattern = '#,##0.###';}
            PROPERTY(currentPOSPrice(bt, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';charWidth = 7;}
            PROPERTY(currentPOSBlisterPrice(bt, r)) { focusable = FALSE; font = '18'; pattern = '#,##0.00';caption = 'Цена блистера';;charWidth = 7;}
            PROPERTY(expiryDate(bt)) { focusable = FALSE; font = '18'; charWidth = 7;}
            PROPERTY(seriesPharmacy(bt)) { focusable = FALSE; font = '18'; charWidth = 5;}
            PROPERTY(nameManufacturer(bt)) { focusable = FALSE; font = '18'; charWidth = 15;}
            PROPERTY(nameCountry(bt)) { focusable = FALSE; font = '18'; charWidth = 8;}
            PROPERTY(nameSubstance(bt)) { focusable = FALSE; font = '18'; charWidth = 10;}
            REMOVE TOOLBARLEFT(bt);
        }
    }
    NEW pharmacyDescription BEFORE center {
        alignment = STRETCH;
        type = CONTAINERH;
        MOVE PROPERTY(pharmacyDescription(bt)) { font = '22 bold';charWidth = 120; focusable = FALSE; panelCaptionAbove = TRUE; alignment = STRETCH;}
        MOVE PROPERTY(skipFilters()) {caption = ''; showChangeKey = FALSE;}; 
    }
    pane {
        MOVE BOX(d) BEFORE BOX(pc);
        MOVE BOX(bt1) BEFORE BOX(pc) {
            caption = 'Аналоги';
            REMOVE TOOLBARLEFT(bt1);
            PROPERTY(prevNameSku(bt1)) { focusable = FALSE; font = '18'; charWidth = 30;}
            PROPERTY(nameBin(bt1, r)) { focusable = FALSE; font = '18'; charWidth = 3;}
            PROPERTY(quantity(bt1, r)) { focusable = TRUE; font = '18'; charWidth = 3; background = #D4FFD4;}
            PROPERTY(blisterQuantity(bt1, r)) { focusable = TRUE; font = '18'; charWidth = 3; background = #D4FFD4; pattern = '#,##0.###';}
            PROPERTY(prevCurrentBalance(bt1, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; charWidth = 3; pattern = '#,##0.###';}
            PROPERTY(currentPOSPrice(bt1, r)) { focusable = FALSE; font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';}
            PROPERTY(currentPOSBlisterPrice(bt1, r)) { focusable = FALSE; font = '18'; pattern = '#,##0.00';caption = 'Цена блистера';}
            PROPERTY(expiryDate(bt1)) { focusable = FALSE; font = '18'; charWidth = 7;}
            PROPERTY(seriesPharmacy(bt1)) { focusable = FALSE; font = '18'; charWidth = 5;}
            PROPERTY(nameManufacturer(bt1)) { focusable = FALSE; font = '18'; charWidth = 15;}
            PROPERTY(nameCountry(bt1)) { focusable = FALSE; font = '18'; charWidth = 8;}
        }
        MOVE GROUP(receiptReturnAction,r) {
            caption = 'Возврат';
        }
    }
    north {
        NEW prescription {
            caption = 'Рецепт';
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY(prescriptionMessage(bt)) {
                focusable = FALSE; font = 'bold 22'; foreground = #952828; panelCaptionAbove = TRUE;           
            }
        }
    }
    BOX(s) {
        caption = 'Остатки на других аптеках';
    }
    REMOVE PROPERTY(searchBatchSale(r));
    REMOVE PROPERTY(nameBatchPanel);
    REMOVE PROPERTY(nameSkuPanel);
    REMOVE PROPERTY(idBarcodePanel);
    REMOVE PROPERTY(quantityPanel);
    REMOVE PROPERTY(shortNameUOMSkuPanel);
    REMOVE PROPERTY(pricePanel);
    REMOVE PROPERTY(sumPanel);
}

overChangeBatch(ReceiptDetail d) += {
    ACTIVATE PROPERTY POS.quantityReceiptGrid;
    SEEK POS.bt = batch(d);
};

EXTEND FORM chooseBatchReceipt
    PROPERTIES (bt) READONLY pharmacyDescription BEFORE documentNameSku(bt), expiryDate BEFORE name(bt)
;

DESIGN chooseBatchReceipt {
    PROPERTY(documentNameSku(bt)) {
        hide = TRUE;
    }
    PROPERTY(name(bt)){
        hide = TRUE;
    }
    PROPERTY(dateTime(bt)){
        hide = TRUE;
    }
    PROPERTY(pharmacyDescription(bt)) { font = '18'; charWidth = 50;}
    PROPERTY(prevCurrentBalance(bt, st)) { font = '18'; fontStyle = 'bold'; charWidth = 3; pattern = '#,##0.###';}
    PROPERTY(currentPOSPrice(bt, d)) { font = '18'; fontStyle = 'bold'; pattern = '#,##0.00';caption = 'Цена';}
    PROPERTY(expiryDate(bt)) { font = '18'; charWidth = 7;}
}

