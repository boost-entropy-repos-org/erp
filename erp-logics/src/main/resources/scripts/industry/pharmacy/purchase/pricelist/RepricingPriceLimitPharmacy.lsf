MODULE RepricingPriceLimitPharmacy;

REQUIRE RepricingManufacturingPrice, PricingPharmacy, RepricingPharmacy, RepricingPriceDivider;

NAMESPACE Repricing;

//------------------ Предельные надбавки ----------------------//

@defineDocumentInterfaceProperty (repricing, showLimitPharmacyPrice, 'Предельная надбавка');
@defineDocumentInterfaceDetailMarkupPrefix (repricing, limitPharmacy, ' предельная');

//WHEN LOCAL FORMS userRepricing 
//             (CHANGED(manufacturingPrice(UserRepricingDetail detail)) OR
//              CHANGED(sku(detail)) OR CHANGED(date(detail)) OR
//              SET(showLimitPharmacyPrice(detail)))
//             AND showLimitPharmacyPrice(detail) DO {
//    limitPharmacyMarkup[RepricingDetail](detail) <- retailMarkupPharmacy(sku(detail), NUMERIC[16,4](manufacturingPrice(detail)), date(detail));
//}

//----------------------------------------------- Операции -----------------------------------------------------//

// Вид цены для расценки для операции
@defineDocumentHeaderProperty (operation, showLimitPharmacyPrice, 'Предельная надбавка');

EXTEND FORM operation
    PROPERTIES(o) showLimitPharmacyPrice
;

DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(showLimitPharmacyPrice(o));
    }
}

// Записываем необходимо ли показывать предельную надбавку по умолчанию из операции расценки, заданной для операции закупка
showLimitPharmacyPrice (UserRepricing invoice) <- showLimitPharmacyPrice(operation(invoice))
    WHEN CHANGED(operation(invoice));

EXTEND FORM userRepricing
    PROPERTIES(p) showLimitPharmacyPrice
    PROPERTIES(d) SHOWIF showLimitPharmacyPrice(p) BEFORE markup(d) limitPharmacyMarkup
;
DESIGN userRepricing{
    GROUP(documentPrm,p) {
        MOVE PROPERTY (showLimitPharmacyPrice(p));
    }
}

EXTEND FORM repricings
    PROPERTIES(d) READONLY SHOWIF showLimitPharmacyPrice(p) BEFORE markup(d) limitPharmacyMarkup
;

maxOverPrice (UserRepricingDetail detail) = MIN price(detail), manufacturingPrice(detail) * (100 (+) wholesaleMarkupPharmacy(sku(detail), manufacturingPrice(detail), date(detail)))/100;

calcLimitPharmacyPrice (UserRepricingDetail detail) =
                                       round(
                                           [= (A + B*C/100.0)*(100.0 + D)/100.0](
                                                    maxOverPrice(detail),
                                                    manufacturingPrice(detail),
                                                    limitPharmacyMarkup(detail),
                                                    valueVAT(detail)), limitRetailMarkupPharmacyCondition());
                                                                                                   
limitPharmacyPrice (UserRepricingDetail detail) = IF blisterAmount(detail) 
    THEN round(calcLimitPharmacyPrice(detail)/blisterAmount(detail), limitRetailMarkupPharmacyCondition())*blisterAmount(detail)
    ELSE calcLimitPharmacyPrice(detail);                                                                                                       

WHEN LOCAL FORMS userRepricing GOAFTER retailPrice[UserRepricingDetail] 
            (CHANGED(retailPrice(UserRepricingDetail d)) OR CHANGED(manufacturingPrice(d)) OR
             CHANGED(sku(d)) OR CHANGED(date(d)) OR SET(showLimitPharmacyPrice(d))) AND //  вообще в событии должно быть это условие, но тогда не всегда срабатывает (см. skype с Vitalur за 10.07) 
             showLimitPharmacyPrice(d) DO {
    limitPharmacyMarkup[RepricingDetail](d) <- retailMarkupPharmacy(sku(d), NUMERIC[16,4](manufacturingPrice(d)), date(d));         
    IF limitPharmacyPrice(d) < retailPrice(d) THEN {
        retailPrice(d) <- limitPharmacyPrice(d);
        retailPrice(d) <- CASE WHEN round2(retailPrice(d)/priceDivider(d))*priceDivider(d) < retailPrice(d) AND 
                                    round2(retailPrice(d)/priceDivider(d))*priceDivider(d) > price(d) 
                               THEN round2(retailPrice(d)/priceDivider(d))*priceDivider(d)
                               WHEN floor(retailPrice(d)/priceDivider(d)*100)*priceDivider(d)/100 <= price(d)                             
                               THEN ceil(retailPrice(d)/priceDivider(d)*100)*priceDivider(d)/100
                               ELSE floor(retailPrice(d)/priceDivider(d)*100)*priceDivider(d)/100 WHERE round2(retailPrice(d)/priceDivider(d))*priceDivider(d) != retailPrice(d);             
        markup(d) <- NUMERIC[8,3]([= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                           retailPrice(d),
                                                           repricingPrice(d),
                                                           valueVAT(d)));
    }
}