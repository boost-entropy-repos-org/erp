MODULE ArticleStickerDashboard;

REQUIRE ItemSizeMapping, ArticleTranslateDashboard, Label;

NAMESPACE Item;

// Обработка статуса

completedSticker 'Обработан' = DATA BOOLEAN (Item);
notCompletedSticker 'Не обработан' (article) = GROUP SUM 1 IF Item i IS Item AND NOT completedSticker(i) BY article(i);
completedSticker 'Обработан' = Article a IS Article AND NOT notCompletedSticker(a);

changeCompletedSticker (Article article) = ACTION  {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        FOR article(Item item) == article DO {
            completedSticker(item) <- TRUE;
        }
    } ELSE {
        FOR article(Item item) == article DO {
            completedSticker(item) <- NULL;
        }                
    }        
}

// Подсчет артикулов с незаполненными стикерами для групп
countNotStickerArticles 'Не обработано (к-во)' (group) = GROUP SUM 1 IF completedTranslate(Article article) AND NOT completedSticker(article) AND ((inPurchaseInvoices(currentUser()) AND quantityInvoiceDetail(article, currentUser())) OR NOT inPurchaseInvoices(currentUser())) BY itemGroup(article);
recCountNotStickerArticles 'Не обработано (к-во)' (parent) = GROUP SUM countNotStickerArticles(ItemGroup child) IF isParent(child, ItemGroup parent) BY parent;

// ----------------- Типы ценников ----------------- //

defaultLabelType (sku) = GROUP MAX LabelType type IF dataIn(type, Sku sku) BY sku;
nameLabelType 'Тип ценника' (Sku sku)= name(defaultLabelType(sku)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

defaultLabelType (article) = GROUP MAX LabelType type IF dataIn(type, Item sku) BY article(sku);
nameLabelType 'Тип ценника' (Article article)= name(defaultLabelType(article)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

changeDefaultLabelType(Article article) = ACTION  {
    REQUEST OBJECT l
    FORM labelTypes  DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        FOR article(Item sku) == article DO {
            dataIn(LabelType type, sku) <- NULL WHERE type IS LabelType;
            dataIn(LabelType t, sku) <- TRUE WHERE t == requestedObject();
        }              
    }
}

changeDefaultLabelType(Sku sku) = ACTION  {
    REQUEST OBJECT l
    FORM labelTypes  DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        dataIn(LabelType type, sku) <- NULL WHERE type IS LabelType;
        dataIn(LabelType t, sku) <- TRUE WHERE t == requestedObject();             
    }
}

// Не заполнены атрибуты
nullSticker 'Без атрибутов' (Item item) =  item IS Item AND NOT defaultLabelType(item) AND NOT completedSticker(item);
nullSticker 'Без атрибутов' (article) = GROUP SUM 1 IF Item item IS Item AND NOT defaultLabelType(item) AND NOT completedSticker(item) BY article(item);

filterStickerInvoice= DATA LOCAL Purchase.Invoice ();
descriptionFilterStickerInvoice 'Накладная' = description(filterStickerInvoice());

// отм. для групп товаров
TABLE userItemGroup(User, ItemGroup);
dataIn 'Отм' = DATA BOOLEAN (User, ItemGroup);

levelParent (user, itemGroup) = GROUP MIN level(ItemGroup itemGroup, ItemGroup parent) IF dataIn(User user, parent)
                                                               BY user, itemGroup PERSISTENT;

inParent (User user, ItemGroup itemGroup) = TRUE IF levelParent (user, itemGroup) PERSISTENT;

in 'Отм' (User user, ItemGroup itemGroup) = OVERRIDE
    inParent (user, itemGroup),
    dataIn(user, itemGroup);

in 'Отм' (User user, Article article) = inParent(user, itemGroup(article));

itemGroups (user) = GROUP SUM 1 IF in(User user, ItemGroup itemGroup) BY user;
    
//currentUser
inCurrentUser 'Отм.' (ItemGroup itemGroup) = in(currentUser(), itemGroup);
inCurrentUser 'Отм.' (Article article) = in(currentUser(), article); 
itemGroupsCurrentUser () = itemGroups(currentUser());

checkInCurrentUser(ItemGroup itemGroup) = ACTION  {
    REQUEST BOOLEAN INPUT;   
    dataIn(User user, itemGroup) <- requestedLogical() WHERE user == currentUser();    
}

FORM articleStickerDashboard 'Стикеровка'
    OBJECTS u = User FIXED PANEL 
    FILTERS u == currentUser()
    
    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser()
    
    TREE groupTree g=ItemGroup PARENT parent
    PROPERTIES READONLY order(g), name(g), recCountNotStickerArticles(g)
    PROPERTIES(u, g) in      
    ORDER BY order(g), name(g)
    FILTERS active(g)
    FILTERGROUP notCustomsFilters
        FILTER 'Не обработан' recCountNotStickerArticles(g) 'F6'          
    
    OBJECTS dep=DepartmentStore FIXED PANEL     
    PROPERTIES(dep)  SELECTOR name
                  
    OBJECTS a=Article   
    PROPERTIES(a) READONLY nameBrand, id, canonicalNameItemGroup FORCE PANEL, caption, 
                   composition, nameUOM
    PROPERTIES(a) BACKGROUND hintEditableBackground() nameCollection, nameManufacturer, nameLabelType ON CHANGE changeDefaultLabelType(a), compositionSticker, 
                   servicePeriod, guaranteePeriod, additionalDescription, manual,
                   extraInformation, safetyInformation, warningInformation, notRefundable, washingRequired, isEAC
                   
    PROPERTIES(a) completedSticker ON CHANGE changeCompletedSticker(a)
    PROPERTIES(a) EDITFORM

    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullSticker(a) 'F7'
        FILTER 'С атрибутами' NOT nullSticker(a) 'F6'
             
    FILTERGROUP groupFilters
        FILTER 'Переведены' completedTranslate(a) 'F10' DEFAULT

    FILTERS isParent(g, a) AND NOT itemGroupsCurrentUser() OR
            inCurrentUser(a) AND itemGroupsCurrentUser()    
//    FILTERGROUP groupFilters
//        FILTER 'По группам' 'F11' isParentGroupArticle(g, a) DEFAULT
//        FILTER 'Без групп' 'ctrl F11' captionArticle(a) IF NOT itemGroupArticle(a)    

    FILTERGROUP translateFilters
        FILTER 'Не обработан' notCompletedSticker(a) 'F9' DEFAULT
        FILTER 'Обработан' completedSticker(a) 'F8'

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoice, idBarcode, id, 
                           originalCaption, originalComposition, 
                           caption, composition, nameUOM, nameSize,
                           image FORCE PANEL

    PROPERTIES(i) BACKGROUND hintEditableBackground() originalSize, nameLabelType ON CHANGE changeDefaultLabelType(i), compositionSticker, 
                   sizeHeight, sizeChest, sizeUnderChest, sizeCupBra,
                   sizeHips, sizeWaist, sizeNeck, sizeHead, sizeHand, footLength
    ORDER BY id(i)
                   
    PROPERTIES completedSticker(i)
    PROPERTIES(i) EDITFORM SHOWIF enableEditing(i)
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' nullSticker(i) 'F7'
        FILTER 'С атрибутами' NOT nullSticker(i) 'F6'
             
    FILTERGROUP itemFilters
        FILTER 'По артикулам' article(i) == a 'F4' DEFAULT
        FILTER 'По группам (не обработан)' isParent(g,i) AND completedTranslate(i) AND NOT completedSticker(i) 'shift F4'
        FILTER 'По группам ' isParent(g,i) 'ctrl F4' 
        
    FILTERS quantityInvoiceDetail(a, currentUser()) OR (a IS Article AND NOT countInvoices(currentUser()))        
;

DESIGN articleStickerDashboard {
    REMOVE u.box;
    NEW top {      
        type = CONTAINERH;
        NEW filter {
            caption = 'Фильтр';
            type = CONTAINERH;
            MOVE PROPERTY(seriesNumberDateInvoicesCurrentUser());
            MOVE PROPERTY(selectPurchaseInvoicesCurrentUser());
        }
        MOVE dep.box { caption = 'Отдел магазина для проверки ценников'; }
    }
    NEW pane {
        type = SPLITH;
        fill = 1;
        NEW tree3{
            type = SPLITV;
            fill = 1;
            MOVE groupTree.tree.box {fill = 2;}
            NEW imageBox3 {
                fill = 3;
                caption = 'Изображение';                     
                MOVE PROPERTY(image(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW row411 {
            fill = 3;
            type = SPLITV;
            NEW row4111 {
                fill = 2;                      
                MOVE a.box {
                    defaultComponent = TRUE;                                      
                }
            }    
            MOVE i.box;
        }
    }

    PROPERTY(id(a)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(servicePeriod(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(guaranteePeriod(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(additionalDescription(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(manual(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(extraInformation(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(safetyInformation(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(warningInformation(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}            
    PROPERTY(compositionSticker(a)) {minimumCharWidth = 30; preferredCharWidth = 40;}

    PROPERTY(compositionSticker(i)) {minimumCharWidth = 30; preferredCharWidth = 40;}
    
    PROPERTY(id(i)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(originalCaption(i)) { minimumCharWidth = 30; preferredCharWidth = 40;}
    PROPERTY(caption(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(originalCaption(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(nameSize(i)) { minimumCharWidth = 10; preferredCharWidth = 15;}

    MOVE functions.box;
}

// ----- Подтверждение всех артикулов --------- //

completeArticleStickerDashboard 'Подтвердить все'() = ACTION  {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [= FILTER articleStickerDashboard.a](Article article) AND nullSticker(article) DO{   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задан тип ценника ('+k()+' шт.)';
    } ELSE {
        FOR [= FILTER articleStickerDashboard.a](Article article) DO {
            completedSticker(Item item) <- TRUE WHERE article(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM  articleStickerDashboard
    PROPERTIES() TODRAW a completeArticleStickerDashboard FORCE PANEL
;

// --------- Заполнение по матрице соответствия      

mapAllSizeHeightStickerItem 'Заполнить рост для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeHeight(i) DO
       mapSizeHeight(i);
} SHORTCUT sizeHeight[Item];

mapAllSizeChestStickerItem 'Заполнить обхват груди для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeChest(i) DO
       mapSizeChest(i);
} SHORTCUT sizeChest[Item];

mapAllSizeUnderChestStickerItem 'Заполнить обхват под грудью для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeUnderChest(i) DO
       mapSizeUnderChest(i);
} SHORTCUT sizeUnderChest[Item];

mapAllSizeCupBraStickerItem 'Заполнить размер чашечки для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeCupBra(i) DO
       mapSizeCupBra(i);
} SHORTCUT sizeCupBra[Item];

mapAllSizeHipsStickerItem 'Заполнить обхват бедер для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeHips(i) DO
       mapSizeHips(i);
} SHORTCUT sizeHips[Item];     

mapAllSizeWaistStickerItem 'Заполнить обхват талии для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeWaist(i) DO
       mapSizeWaist(i);
} SHORTCUT sizeWaist[Item];  
  
mapAllSizeNeckStickerItem 'Заполнить обхват шеи для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeNeck(i) DO
       mapSizeNeck(i);
} SHORTCUT sizeNeck[Item];      

mapAllSizeHeadStickerItem 'Заполнить обхват головы для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeHead(i) DO
       mapSizeHead(i);
} SHORTCUT sizeHead[Item];  

mapAllSizeHandStickerItem 'Заполнить обхват кисти для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT sizeHand(i) DO
       mapSizeHand(i);
} SHORTCUT sizeHand[Item];  
                            
mapAllFootLengthStickerItem 'Заполнить длину стопы для всех по соответствию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.i](Item i)  AND NOT footLength(i) DO
       mapFootLength(i);
} SHORTCUT footLength[Item];  

mapAllIsEACArticle 'Заполнить "EAC" для всех по наименованию'() = ACTION  {
   FOR [= FILTER articleStickerDashboard.a](Article a)  DO 
       mapIsEAC(a);
} SHORTCUT isEAC[Article]; 
                            
NAVIGATOR {
    customsDashboardNavigator {
        ADD articleStickerDashboard;
    }
}

// ------------------------------------- Печать примера ценника --------------------------- //
     
inLabel 'Отм.' = DATA LOCAL BOOLEAN (Article); 
EXTEND FORM articleStickerDashboard
    PROPERTIES(a) inLabel BEFORE id(a)
;

countInLabelArticles 'Кол-во отм.' = GROUP SUM 1 IF inLabel(Article a);
countLabelTypeArticles  = GROUP SUM 1 IF [= GROUP SUM 1 IF inLabel(Article a) BY defaultLabelType(a)](LabelType type);

dataLastBatch = ABSTRACT Batch (Sku);

createSnapshotPricing 'Пример ценника'(Article article, DepartmentStore department) = ACTION  {
    IF countInLabelArticles() THEN {
        IF countLabelTypeArticles() == 1 THEN {
            FOR ADDOBJ t = LabelTransaction DO {          
                departmentStore(t) <- department;
                labelType(t) <-  [=GROUP MAX defaultLabelType(Article a) IF inLabel(a)]();
                FOR article (Item item) == Article a AND inLabel(a)  ADDOBJ d = LabelTransactionDetail DO {
                        labelTransaction(d) <- t;
                        sku(d) <- item;
                        batch(d) <- OVERRIDE lastBatch(item), dataLastBatch(item);
        
                        name(d) <- name(item);
                        documentQuantity(d) <- 1.0; 
                        createAttribute(d);
                }
                FORM customLabelTransaction OBJECTS l = t MODAL;
                IF formResult() == FormResult.ok THEN {
                    print(t);
                }
                DELETE t;                
            }
        } ELSE {
            MESSAGE 'Отмечены артикулы с разными типами ценников';
        }
    } ELSE {
        FOR ADDOBJ t = LabelTransaction DO {          // [=GROUP MAX supplierUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d)](chosenObject('d'))
            departmentStore(t) <- department;
            labelType(t) <- defaultLabelType(article);
            FOR article (Item item) ==article  ADDOBJ d = LabelTransactionDetail DO {
                    labelTransaction(d) <- t;
                    sku(d) <- item;
                    batch(d) <- OVERRIDE lastBatch(item), dataLastBatch(item);
        
                    name(d) <- name(item);
                    documentQuantity(d) <- 1.0; 
                    createAttribute(d);
            }
            FORM customLabelTransaction OBJECTS l = t MODAL;
            IF formResult() == FormResult.ok THEN {
                print(t);
            }
            DELETE t;            
        }  
    }
} TOOLBAR;

EXTEND FORM articleStickerDashboard
    PROPERTIES(a, dep) createSnapshotPricing FORCE PANEL TOOLBAR
    PROPERTIES(a) READONLY AFTER id(a) idItemGroup
    PROPERTIES(i) READONLY AFTER id(i) idItemGroup
;