MODULE ArticleStickerDashboard;

REQUIRE ItemSizeMapping, ArticleTranslateDashboard, Label;

NAMESPACE Item;

// Обработка статуса

completedStickerItem 'Обработан' = DATA BOOLEAN (Item);
notCompletedStickerArticle 'Не обработан' (article) = GROUP SUM 1 IF i IS Item AND NOT completedStickerItem(i) BY articleItem(i);
completedStickerArticle 'Обработан' = a IS Article AND NOT notCompletedStickerArticle(a);

changeCompletedStickerArticle (article) = ACTION (article) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        FOR articleItem(item) == article DO {
            completedStickerItem(item) <- TRUE;
        }
    } ELSE {
        FOR articleItem(item) == article DO {
            completedStickerItem(item) <- NULL;
        }                
    }        
}

// Подсчет артикулов с незаполненными стикерами для групп
countNotStickerArticlesItemGroup 'Не обработано (к-во)' (group) = GROUP SUM 1 IF completedTranslateArticle(article) AND NOT completedStickerArticle(article) AND ((inPurchaseInvoicesUser(currentUser()) AND quantityInvoiceDetailArticleUser(article, currentUser())) OR NOT inPurchaseInvoicesUser(currentUser())) BY itemGroupArticle(article);
recCountNotStickerArticlesItemGroup 'Не обработано (к-во)' (parent) = GROUP SUM countNotStickerArticlesItemGroup(child) IF isParentItemGroupItemGroup(child, parent) BY parent;

// ----------------- Типы ценников ----------------- //

defaultLabelTypeSku (sku) = GROUP MAX type IF dataInLabelTypeSku(type, sku) BY sku;
nameLabelTypeSku 'Тип ценника' (sku)= nameLabelType(defaultLabelTypeSku(sku)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

defaultLabelTypeArticle (article) = GROUP MAX type IF dataInLabelTypeSku(type, sku) BY articleItem(sku);
nameLabelTypeArticle 'Тип ценника' (article)= nameLabelType(defaultLabelTypeArticle(article)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

changeDefaultLabelTypeArticle = ACTION (article) {
    REQUEST OBJECT l
    FORM labelTypes  DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        FOR articleItem(sku) == article DO {
            dataInLabelTypeSku(type, sku) <- NULL WHERE type IS LabelType;
            dataInLabelTypeSku(t, sku) <- TRUE WHERE t == requestedObject();
        }              
    }
}

changeDefaultLabelTypeSku = ACTION (sku) {
    REQUEST OBJECT l
    FORM labelTypes  DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        dataInLabelTypeSku(type, sku) <- NULL WHERE type IS LabelType;
        dataInLabelTypeSku(t, sku) <- TRUE WHERE t == requestedObject();             
    }
}

// Не заполнены атрибуты
nullStickerItem 'Без атрибутов' (item) =  item IS Item AND NOT defaultLabelTypeSku(item) AND NOT completedStickerItem(item);
nullStickerArticle 'Без атрибутов' (article) = GROUP SUM 1 IF item IS Item AND NOT defaultLabelTypeSku(item) AND NOT completedStickerItem(item) BY articleItem(item);

filterStickerInvoice= DATA SESSION Purchase.Invoice ();
descriptionFilterStickerInvoice 'Накладная' = Purchase.descriptionInvoice(filterStickerInvoice());

// отм. для групп товаров
TABLE userItemGroup(User, ItemGroup);
dataInUserItemGroup 'Отм' = DATA BOOLEAN (User, ItemGroup);

levelParentUserItemGroup (user, itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF dataInUserItemGroup(user, parent)
                                                               BY user, itemGroup PERSISTENT;

inParentUserItemGroup (user, itemGroup) = TRUE IF levelParentUserItemGroup (user, itemGroup) PERSISTENT;

inUserItemGroup 'Отм' (user, itemGroup) = OVERRIDE
    inParentUserItemGroup (user, itemGroup),
    dataInUserItemGroup(user, itemGroup);

inUserArticle 'Отм' (user, article) = inParentUserItemGroup(user, itemGroupArticle(article));

itemGroupsUser (user) = GROUP SUM 1 IF inUserItemGroup(user, itemGroup) BY user;
    
//currentUser
inCurrentUserItemGroup 'Отм.' (itemGroup) = inUserItemGroup(currentUser(), itemGroup);
inCurrentUserArticle 'Отм.' (article) = inUserArticle(currentUser(), article); 
itemGroupsCurrentUser () = itemGroupsUser(currentUser());

checkInCurrentUserItemGroup = ACTION (itemGroup) {
    REQUEST BOOLEAN INPUT;   
    dataInUserItemGroup(user, itemGroup) <- requestedLogical() WHERE user == currentUser();    
}

FORM articleStickerDashboard 'Стикеровка'
    OBJECTS u = User FIXED PANEL 
    FILTERS u == currentUser()
    
    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser()
    
    TREE groupTree g=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY orderItemGroup(g), nameItemGroup(g), recCountNotStickerArticlesItemGroup(g)
    PROPERTIES(u, g) inUserItemGroup      
    ORDER BY orderItemGroup(g), nameItemGroup(g)
    FILTERS activeItemGroup(g)
    FILTERGROUP notCustomsFilters
        FILTER 'Не обработан' 'F6' recCountNotStickerArticlesItemGroup(g)          
    
    OBJECTS dep=DepartmentStore FIXED PANEL     
    PROPERTIES(dep)  SELECTOR nameDepartmentStore
                  
    OBJECTS a=Article   
    PROPERTIES(a) READONLY nameBrandArticle, idArticle, canonicalNameItemGroupArticle FORCE PANEL, captionArticle, 
                   compositionArticle, nameUOMArticle
    PROPERTIES(a) BACKGROUND hintEditableBackground() nameCollectionArticle, nameManufacturerArticle, nameLabelTypeArticle ON CHANGE changeDefaultLabelTypeArticle(a), compositionStickerArticle, 
                   servicePeriodArticle, guaranteePeriodArticle, additionalDescriptionArticle, manualArticle,
                   extraInformationArticle, safetyInformationArticle, warningInformationArticle, notRefundableArticle, washingRequiredArticle, isEACArticle
                   
    PROPERTIES(a) completedStickerArticle ON CHANGE changeCompletedStickerArticle(a)
    PROPERTIES(a) EDITFORM

    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' 'F7' nullStickerArticle(a)
        FILTER 'С атрибутами' 'F6' NOT nullStickerArticle(a)
             
    FILTERGROUP groupFilters
        FILTER 'Переведены' 'F10' completedTranslateArticle(a) DEFAULT

    FILTERS isParentGroupArticle(g, a) AND NOT itemGroupsCurrentUser() OR
            inCurrentUserArticle(a) AND itemGroupsCurrentUser()    
//    FILTERGROUP groupFilters
//        FILTER 'По группам' 'F11' isParentGroupArticle(g, a) DEFAULT
//        FILTER 'Без групп' 'ctrl F11' captionArticle(a) IF NOT itemGroupArticle(a)    

    FILTERGROUP translateFilters
        FILTER 'Не обработан' 'F9' notCompletedStickerArticle(a) DEFAULT
        FILTER 'Обработан' 'F8' completedStickerArticle(a)

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoiceSku, idBarcodeSku, idItem, 
                           originalCaptionItem, originalCompositionItem, 
                           captionItem, compositionItem, nameUOMItem, nameSizeItem,
                           imageItem FORCE PANEL

    PROPERTIES(i) BACKGROUND hintEditableBackground() originalSizeItem, nameLabelTypeSku ON CHANGE changeDefaultLabelTypeSku(i), compositionStickerItem, 
                   sizeHeightItem, sizeChestItem, sizeUnderChestItem, sizeCupBraItem,
                   sizeHipsItem, sizeWaistItem, sizeNeckItem, sizeHeadItem, sizeHandItem, footLengthItem
    ORDER BY idItem(i)
                   
    PROPERTIES completedStickerItem(i)
    PROPERTIES(i) EDITFORM
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' 'F7' nullStickerItem(i)
        FILTER 'С атрибутами' 'F6' NOT nullStickerItem(i)
             
    FILTERGROUP itemFilters
        FILTER 'По артикулам' 'F4' articleItem(i) == a DEFAULT
        FILTER 'По группам (не обработан)' 'shift F4' isParentItemGroupItem(g,i) AND completedTranslateItem(i) AND NOT completedStickerItem(i)
        FILTER 'По группам ' 'ctrl F4' isParentItemGroupItem(g,i) 
        
    FILTERS quantityInvoiceDetailArticleUser(a, currentUser()) OR (a IS Article AND NOT countInvoicesUser(currentUser()))        
;

DESIGN articleStickerDashboard FROM DEFAULT {
    REMOVE u.box;
    NEW top {      
        type = CONTAINERH;
        NEW filter {
            caption = 'Фильтр';
            type = CONTAINERH;
            ADD PROPERTY(seriesNumberDateInvoicesCurrentUser());
            ADD PROPERTY(selectPurchaseInvoicesCurrentUser());
        }
        ADD dep.box { caption = 'Отдел магазина для проверки ценников'; }
    }
    NEW pane {
        type = SPLITH;
        fill = 1;
        NEW tree3{
            type = SPLITV;
            fill = 1;
            ADD groupTree.tree.box {fill = 2;}
            NEW imageBox3 {
                fill = 3;
                caption = 'Изображение';                     
                ADD PROPERTY(imageItem(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW row411 {
            fill = 3;
            type = SPLITV;
            NEW row4111 {
                fill = 2;                      
                ADD a.box {
                    defaultComponent = TRUE;                                      
                }
            }    
            ADD i.box;
        }
    }

    PROPERTY(idArticle(a)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(servicePeriodArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(guaranteePeriodArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(additionalDescriptionArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(manualArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(extraInformationArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(safetyInformationArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}
    PROPERTY(warningInformationArticle(a)) { minimumSize = ( 150, 40); preferredSize = ( 250, 40); maximumSize = ( 400, 40);}            
    PROPERTY(compositionStickerArticle(a)) {minimumCharWidth = 30; preferredCharWidth = 40;}

    PROPERTY(compositionStickerItem(i)) {minimumCharWidth = 30; preferredCharWidth = 40;}
    
    PROPERTY(idItem(i)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(originalCaptionItem(i)) { minimumCharWidth = 30; preferredCharWidth = 40;}
    PROPERTY(captionItem(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(originalCaptionItem(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(nameSizeItem(i)) { minimumCharWidth = 10; preferredCharWidth = 15;}

    ADD functions.box;
}

// ----- Подтверждение всех артикулов --------- //

completeArticleStickerDashboard 'Подтвердить все' = ACTION () {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [= FILTER articleStickerDashboard.a](article) AND nullStickerArticle(article) DO{   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задан тип ценника ('+k()+' шт.)';
    } ELSE {
        FOR [= FILTER articleStickerDashboard.a](article) DO {
            completedStickerItem(item) <- TRUE WHERE articleItem(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM  articleStickerDashboard
    PROPERTIES() TODRAW a completeArticleStickerDashboard FORCE PANEL
;

// --------- Заполнение по матрице соответствия      

mapAllSizeHeightStickerItem 'Заполнить рост для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeHeightItem(i) DO
       mapSizeHeightItem(i);
} SHORTCUT sizeHeightItem;

mapAllSizeChestStickerItem 'Заполнить обхват груди для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeChestItem(i) DO
       mapSizeChestItem(i);
} SHORTCUT sizeChestItem;

mapAllSizeUnderChestStickerItem 'Заполнить обхват под грудью для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeUnderChestItem(i) DO
       mapSizeUnderChestItem(i);
} SHORTCUT sizeUnderChestItem;

mapAllSizeCupBraStickerItem 'Заполнить размер чашечки для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeCupBraItem(i) DO
       mapSizeCupBraItem(i);
} SHORTCUT sizeCupBraItem;

mapAllSizeHipsStickerItem 'Заполнить обхват бедер для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeHipsItem(i) DO
       mapSizeHipsItem(i);
} SHORTCUT sizeHipsItem;     

mapAllSizeWaistStickerItem 'Заполнить обхват талии для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeWaistItem(i) DO
       mapSizeWaistItem(i);
} SHORTCUT sizeWaistItem;  
  
mapAllSizeNeckStickerItem 'Заполнить обхват шеи для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeNeckItem(i) DO
       mapSizeNeckItem(i);
} SHORTCUT sizeNeckItem;      

mapAllSizeHeadStickerItem 'Заполнить обхват головы для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeHeadItem(i) DO
       mapSizeHeadItem(i);
} SHORTCUT sizeHeadItem;  

mapAllSizeHandStickerItem 'Заполнить обхват кисти для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT sizeHandItem(i) DO
       mapSizeHandItem(i);
} SHORTCUT sizeHandItem;  
                            
mapAllFootLengthStickerItem 'Заполнить длину стопы для всех по соответствию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.i](i)  AND NOT footLengthItem(i) DO
       mapFootLengthItem(i);
} SHORTCUT footLengthItem;  

mapAllIsEACArticle 'Заполнить "EAC" для всех по наименованию' = ACTION () {
   FOR [= FILTER articleStickerDashboard.a](a)  DO 
       mapIsEACArticle(a);
} SHORTCUT isEACArticle; 
                            
NAVIGATOR {
    customsDashboardNavigator {
        ADD articleStickerDashboard;
    }
}

// ------------------------------------- Печать примера ценника --------------------------- //
     
inLabelArticle 'Отм.' = DATA SESSION BOOLEAN (Article); 
EXTEND FORM articleStickerDashboard
    PROPERTIES(a) inLabelArticle BEFORE idArticle(a)
;

countInLabelArticles 'Кол-во отм.' = GROUP SUM 1 IF inLabelArticle(a);
countLabelTypeArticles  = GROUP SUM 1 IF [= GROUP SUM 1 IF inLabelArticle(a) BY defaultLabelTypeArticle(a)](type);

createSnapshotPricingArticleDepartment 'Пример ценника' = ACTION (article, department) {
    IF countInLabelArticles() THEN {
        IF countLabelTypeArticles() == 1 THEN {
  
            FOR ADDOBJ t = LabelTransaction DO {          
                departmentStoreLabelTransaction(t) <- department;
                labelTypeLabelTransaction(t) <-  [=GROUP MAX defaultLabelTypeArticle(a) IF inLabelArticle(a)]();
                FOR articleItem (item) == a AND inLabelArticle(a)  ADDOBJ d = LabelTransactionDetail DO {
                        labelTransactionLabelTransactionDetail(d) <- t;
                        skuLabelTransactionDetail(d) <- item;
                        batchLabelTransactionDetail(d) <- lastBatchSku(item);
        
                        nameLabelTransactionDetail(d) <- nameSku(item);
                        documentQuantityLabelTransactionDetail(d) <- 1.0; 
                        createAttributeLabelTransactionDetail(d);
                }
                FORM customLabelTransaction OBJECTS l = t MODAL;
                IF formResult() == FormResult.ok THEN {
                    IF orientationLabelType(labelTypeLabelTransaction(t))== PrintOrientation.portrait THEN {
                        FORM printLabelTransactionP OBJECTS l = t PRINT;
                    } ELSE {
                        FORM printLabelTransaction OBJECTS l = t PRINT;
                    }
                }
                DELETE t;                
            }
        } ELSE {
            MESSAGE 'Отмечены артикулы с разными типами ценников';
        }
    } ELSE {
        FOR ADDOBJ t = LabelTransaction DO {          // [=GROUP MAX supplierUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d)](chosenObject('d'))
            departmentStoreLabelTransaction(t) <- department;
            labelTypeLabelTransaction(t) <- defaultLabelTypeArticle(article);
            FOR articleItem (item) ==article  ADDOBJ d = LabelTransactionDetail DO {
                    labelTransactionLabelTransactionDetail(d) <- t;
                    skuLabelTransactionDetail(d) <- item;
                    batchLabelTransactionDetail(d) <- lastBatchSku(item);
        
                    nameLabelTransactionDetail(d) <- nameSku(item);
                    documentQuantityLabelTransactionDetail(d) <- 1.0; 
                    createAttributeLabelTransactionDetail(d);
            }
            FORM customLabelTransaction OBJECTS l = t MODAL;
            IF formResult() == FormResult.ok THEN {
                IF orientationLabelType(labelTypeLabelTransaction(t))== PrintOrientation.portrait THEN {
                    FORM printLabelTransactionP OBJECTS l = t PRINT;
                } ELSE {
                    FORM printLabelTransaction OBJECTS l = t PRINT;
                }
            }
            DELETE t;            
        }  
    }
} TOOLBAR;

EXTEND FORM articleStickerDashboard
    PROPERTIES(a, dep) createSnapshotPricingArticleDepartment FORCE PANEL TOOLBAR
    PROPERTIES(a) READONLY AFTER idArticle(a) idItemGroupArticle
    PROPERTIES(i) READONLY AFTER idItem(i) idItemGroupItem
;