MODULE ItemFashionSticker;

REQUIRE ItemArticle, ItemFashion;

NAMESPACE Item;

GROUP itemSticker 'Стикер' : base;

servicePeriod 'Срок службы'  = DATA TEXT (Article) IN itemSticker;
servicePeriod 'Срок службы' (Item item) = servicePeriod(article(item));

guaranteePeriod 'Гарантийный срок'  = DATA TEXT (Article) IN itemSticker;
guaranteePeriod 'Гарантийный срок' (Item item) = guaranteePeriod(article(item));

additionalDescription 'Дополнение к описанию'  = DATA TEXT (Article) IN itemSticker;
additionalDescription 'Дополнение к описанию' (Item item) = additionalDescription(article(item));

manual 'Инструкция по использованию'  = DATA TEXT (Article) IN itemSticker;
manual 'Инструкция по использованию' (Item item) = manual(article(item));

extraInformation 'Доп. информация'  = DATA TEXT (Article) IN itemSticker;
extraInformation 'Доп. информация' (Item item) = extraInformation(article(item));

safetyInformation 'Сведения по безопасности'  = DATA TEXT (Article) IN itemSticker;
safetyInformation 'Сведения по безопасности' (Item item) = safetyInformation(article(item));

warningInformation 'Предупредительная надпись'  = DATA TEXT (Article) IN itemSticker;
warningInformation 'Предупредительная надпись' (Item item) = warningInformation(article(item));

notRefundable 'Не подлежит возврату' = DATA BOOLEAN (Article) IN itemSticker;
notRefundable 'Не подлежит возврату' (Item item) = notRefundable(article(item));

washingRequired 'Предварительная стирка обязательна' = DATA BOOLEAN (Article) IN itemSticker;
washingRequired 'Предварительная стирка обязательна' (Item item) = washingRequired(article(item));

isEAC 'EAC' = DATA BOOLEAN (Article) IN itemSticker;

dataIsEAC 'EAC' (item) = DATA BOOLEAN (Item) IN itemSticker;
isEAC 'EAC' (Item item) = OVERRIDE isEAC(article(item)), dataIsEAC(item) IN itemSticker;

EXTEND FORM article
    PROPERTIES(a) servicePeriod, guaranteePeriod,
                  additionalDescription,manual, extraInformation, safetyInformation,
                  warningInformation, notRefundable, washingRequired, isEAC;
;

DESIGN article {
    articlePrimary {
        MOVE a.itemSticker;            
    }
}

EXTEND FORM item
    PROPERTIES(i) isEAC
;  

// ----------------------------------- Отдельный состав для стикера ------------------------------------ //

compositionSticker 'Состав (стикер)' = DATA VARSTRING[255] (Article) IN itemSticker MINCHARWIDTH 30 PREFCHARWIDTH 40;

@defineStringItemAttribute(compositionSticker, VARSTRING[255], 'Состав (стикер)', itemSticker);
@defineItemAttributeBatch (compositionSticker, 'Состав (стикер)');
DESIGN item {
    itemPrimaryColumn1 {
        MOVE i.itemSticker { columns = 3;}
    }
}

DESIGN itemGroup {
    itemGroupDetail {
        MOVE g.itemSticker {
//            columns = 6;
        }
    }
}
EXTEND FORM article PROPERTIES(a) compositionSticker;
DESIGN article { articlePrimary { MOVE a.itemSticker; } }
EXTEND FORM articles PROPERTIES(a) READONLYIF isReadonly() BEFORE deletea compositionSticker;

overCopy(Item s, Item d) += ACTION {
    compositionSticker(d) <- compositionSticker(s);
}                 

// Автоматическое проставление состава для товара из артикула
@defineEventChangedArticle(compositionSticker);

// Автоматическое проставление состава из основного состава в переводе
WHEN CHANGED(composition(Article article)) AND NOT CHANGED(compositionSticker(article)) DO {
    compositionSticker (article) <- composition(article);
}

WHEN CHANGED(composition(Item item)) AND NOT CHANGED(compositionSticker(item)) DO {
    compositionSticker (item) <- composition(item);
}
