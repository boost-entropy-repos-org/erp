MODULE ItemArticle;

REQUIRE System, Item;

NAMESPACE Item;

GROUP itemArticleGroup 'Артикул' : public;
GROUP articleBaseGroup 'Базовые свойства' : base;
GROUP articleSupplierGroup 'Информащия от поставщика' : base;
GROUP articleDescriptionGroup 'Описание' : base;

// Артикул
CLASS Article 'Артикул';
TABLE article(Article);

@defineExternalizable(article, VARSTRING[100]);
captionArticle 'Название' = DATA VARISTRING[100](Article) IN articleBaseGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

itemGroupArticle  = DATA ItemGroup(Article);
nameItemGroupArticle 'Товарная группа' (Article) = nameItemGroup(itemGroupArticle(Article));

TABLE itemGroupArticle(ItemGroup, Article);
isParentGroupArticle(group, article) = isParentItemGroupItemGroup(itemGroupArticle(article), group) PERSISTENT INDEXED;
canonicalNameItemGroupArticle 'Каноническое имя' (article) = canonicalNameGroup(itemGroupArticle(article)) MINCHARWIDTH 40 PREFCHARWIDTH 80;

FORM article 'Артикул'
    OBJECTS a=Article FIXED PANEL
    PROPERTIES(a) captionArticle, idArticle SHOWIF showIDs(), nameItemGroupArticle
    EDIT Article OBJECT a
;
DESIGN article FROM DEFAULT {
    main {
        NEW rootContainer {
            childConstraints = TO THE BOTTOM;
            NEW header {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(idArticle);
                ADD PROPERTY(nameItemGroupArticle);
            }
            ADD a.articleBaseGroup {childConstraints = TO THE RIGHT;}
        }
        ADD functions.box;
    }
}


FORM articles 'Артикулы'

    TREE groupTree g=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY nameItemGroup(g)
    ORDER BY nameItemGroup(g)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeItemGroup(g) DEFAULT

    OBJECTS a=Article
    PROPERTIES(a) READONLYIF isReadonly() captionArticle, idArticle SHOWIF showIDs(), canonicalNameItemGroupArticle
    PROPERTIES(a) ADDFORM, EDITFORM, deletea=DELETE
    ORDER BY captionArticle

    FILTERGROUP groupFilters
        FILTER 'С группами' 'F9' isParentGroupArticle(g, a) DEFAULT
        FILTER 'Без групп' 'F8' captionArticle(a) IF NOT itemGroupArticle(a)

    DIALOG Article OBJECT a
;

DESIGN articles FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW rootContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD groupTree.tree.box;
            ADD a.box {
                defaultComponent = TRUE;
                fillHorizontal = 4;
            }
        }
        ADD functions.box;
    }
}
@extendFormEditable(articles);

@defineObjectItemAttribute(article, Article, idArticle, 'Артикул', itemArticleGroup);
@defineObjectItemAttributeBatch (article, idArticle, 'Артикул');
@implementItemAttribute(idArticleItem, 'Артикул', String, itemArticle);

// Цвет
CLASS Color 'Цвет товара';
TABLE color (Color);

@defineExternalizable(color, VARSTRING[100]);
nameColor 'Наименование' = DATA VARISTRING[50](Color);

FORM color 'Цвет товара'
    OBJECTS t=Color FIXED PANEL
    PROPERTIES(t) nameColor, idColor SHOWIF showIDs()
    EDIT Color OBJECT t
;

FORM colors 'Цвета товара'
    OBJECTS t=Color
    PROPERTIES(t) nameColor READONLY, idColor SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameColor
    DIALOG Color OBJECT t
;
DESIGN colors FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(color, Color, nameColor, 'Цвет', itemArticleGroup);
@defineObjectItemAttributeBatch (color, nameColor, 'Цвет');
@implementItemAttribute(nameColorItem, 'Цвет', String, itemColor);

TABLE colorArticle(Color, Article);
countColorArticle 'Кол-во цветов для артикля' (color,article) = GROUP SUM 1 BY colorItem(item), articleItem(item) PERSISTENT;

colorArticle  = DATA Color(Article);
nameColorArticle 'Цвет' (Article) = nameColor(colorArticle(Article)) IN articleDescriptionGroup;

EXTEND FORM article PROPERTIES(a) nameColorArticle;
EXTEND DESIGN article  {
    rootContainer {
        ADD a.articleDescriptionGroup {childConstraints = TO THE RIGHT;}
    }
}
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() nameColorArticle;

//  Ед. изм.
UOMArticle  = DATA UOM (Article);
nameUOMArticle 'Единица измерения' (article) = nameUOM(UOMArticle(article)) IN articleBaseGroup MINCHARWIDTH 10 PREFCHARWIDTH 10;

//  Состав
compositionArticle 'Состав' = DATA VARSTRING[255] (Article) IN articleBaseGroup MINCHARWIDTH 30 PREFCHARWIDTH 40;

EXTEND FORM article PROPERTIES(a) compositionArticle, nameUOMArticle;
EXTEND FORM articles PROPERTIES(a) BEFORE nameColorArticle(a) READONLYIF isReadonly() nameUOMArticle, compositionArticle;

// Коллекция
CLASS Collection 'Коллекция';
TABLE collection (Collection);

@defineExternalizable(collection, VARSTRING[100]);
nameCollection 'Наименование' = DATA VARISTRING[100](Collection);

FORM collection 'Цвет товара'
    OBJECTS t=Collection FIXED PANEL
    PROPERTIES(t) nameCollection, idCollection SHOWIF showIDs()
    EDIT Collection OBJECT t
;

FORM collections 'Цвета товара'
    OBJECTS t=Collection
    PROPERTIES(t) nameCollection READONLY, idCollection SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameCollection
    DIALOG Collection OBJECT t
;
DESIGN collections FROM DEFAULT { main{ preferredSize = (600, 400); } }

collectionArticle  = DATA Collection(Article);
nameCollectionArticle 'Коллекция' (Article) = nameCollection(collectionArticle(Article)) IN articleDescriptionGroup MINCHARWIDTH 20 PREFCHARWIDTH 30;

EXTEND FORM article PROPERTIES(a)  nameCollectionArticle;
EXTEND FORM articles PROPERTIES(a)  BEFORE deletea READONLYIF isReadonly() nameCollectionArticle;

// Размер
CLASS Size 'Размер товара';
TABLE size(Size);

@defineExternalizable(size, VARSTRING[100]);

nameSize 'Наименование' = DATA VARISTRING[50](Size);
shortNameSize 'Краткое наименование' = DATA ISTRING[10](Size);

FORM size 'Размер товара'
    OBJECTS t=Size FIXED PANEL
    PROPERTIES(t) nameSize, idSize SHOWIF showIDs(), shortNameSize
    EDIT Size OBJECT t
;

FORM sizes 'Размеры товара'
    OBJECTS t=Size
    PROPERTIES(t) nameSize READONLY, idSize SHOWIF showIDs() READONLY, shortNameSize READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSize
    DIALOG Size OBJECT t
;
DESIGN sizes FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(size, Size, nameSize, 'Размер', itemArticleGroup);
@defineObjectItemAttributeBatch (size, nameSize, 'Размер');
@implementItemAttribute(nameSizeItem, 'Размер', String, itemSize);

TABLE sizeArticle(Size, Article);
countSizeArticle 'Кол-во размеров для артикля' (size,article) = GROUP SUM 1 BY sizeItem(item), articleItem(item) PERSISTENT;

// Рост
CLASS SizeHeight 'Рост товара';
TABLE sizeHeight (SizeHeight);
@defineExternalizable(sizeHeight, VARSTRING[100]);

nameSizeHeight 'Рост' = DATA VARISTRING[50](SizeHeight);

FORM sizeHeight 'Рост товара'
    OBJECTS t=SizeHeight FIXED PANEL
    PROPERTIES(t) nameSizeHeight, idSizeHeight SHOWIF showIDs()
    EDIT SizeHeight OBJECT t
;

FORM sizeHeights 'Роста товара'
    OBJECTS t=SizeHeight
    PROPERTIES(t) nameSizeHeight READONLY, idSizeHeight SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSizeHeight
    DIALOG SizeHeight OBJECT t
;
DESIGN sizeHeights FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(sizeHeight, SizeHeight, nameSizeHeight, 'Рост', itemBaseGroup);
@defineObjectItemAttributeBatch (sizeHeight, nameSizeHeight, 'Рост');
@implementItemAttribute(nameSizeHeightItem, 'Рост', String, itemSizeHeight);

overCopyItem(s, d) += ACTION (s, d) {
    ASSIGN articleItem(d) <- articleItem(s);
    ASSIGN colorItem(d) <- colorItem(s);
    ASSIGN sizeItem(d) <- sizeItem(s);
    ASSIGN sizeHeightItem(d) <- sizeHeightItem(s);
}

EXTEND DESIGN item { itemPrimaryColumn2 { ADD i.itemArticleGroup; } }


EXTEND DESIGN itemGroup {
    main {
        itemGroupDetail {
            ADD g.itemArticleGroup {
                childConstraints = TO THE RIGHT;
            };
        }
    }
}


NAVIGATOR {
    skuNavigator {
        ADD articles AFTER itemGroups;
    }
}
