MODULE ItemArticle;

REQUIRE System, Item, ComplianceGroup, ComplianceGroupItem, CustomsGroupItem, CustomsGroupItem, Tax;

NAMESPACE Item;

GROUP itemArticle 'Артикул' : public;
GROUP articleBase 'Базовые свойства' : base;
GROUP articleSupplier 'Информащия от поставщика' : base;
GROUP articleDescription 'Описание' : base;
GROUP articleSeason 'Сезон' : base;

// Артикул
CLASS Article 'Артикул';
TABLE article(Article);

@defineExternalizable(article, VARSTRING[100]);
captionArticle 'Название' = DATA VARISTRING[100](Article) IN articleBase MINCHARWIDTH 20 PREFCHARWIDTH 40;

itemGroupArticle  = DATA ItemGroup(Article);
nameItemGroupArticle 'Товарная группа' (Article) = nameItemGroup(itemGroupArticle(Article));

TABLE itemGroupArticle(ItemGroup, Article);
isParentGroupArticle(group, article) = isParentItemGroupItemGroup(itemGroupArticle(article), group) PERSISTENT INDEXED;
canonicalNameItemGroupArticle 'Группа товара' (article) = canonicalNameGroup(itemGroupArticle(article)) MINCHARWIDTH 40 PREFCHARWIDTH 80;

// Изображение артикула
imageArticle 'Изображение' = DATA IMAGEFILE (Article);

FORM article 'Артикул'
    OBJECTS a=Article FIXED PANEL
    PROPERTIES(a) captionArticle, idArticle SHOWIF showIDs(), canonicalNameItemGroupArticle, imageArticle

    OBJECTS c = Country
    PROPERTIES (c) READONLY nameCountry

    EDIT Article OBJECT a
;
DESIGN article FROM DEFAULT {
    main {
        NEW articleHeader BEFORE functions.box {
            type = CONTAINERV;
            ADD PROPERTY(canonicalNameItemGroupArticle);
            ADD PROPERTY(idArticle);
        }
        NEW articleDetail BEFORE functions.box {
            fill = 1;
            type = TABBED;
            NEW articlePrimary {
                type = CONTAINERV;
                type = CONTAINERV;
                caption = 'Основные данные';
                ADD a.articleBase {
                    type = CONTAINERH;
                }
            }
            NEW regionalPrm {
                caption = 'Региональные параметры';
                ADD c.box;
            }
            NEW imageBox {
                caption = 'Изображение';
                ADD PROPERTY(imageArticle) {
                    fill = 1;
                    caption = '';
                }
            }
        }
    }
}


FORM articles 'Артикулы'

    TREE groupTree g=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY nameItemGroup(g)
    ORDER BY nameItemGroup(g)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeItemGroup(g) DEFAULT

    OBJECTS a=Article
    PROPERTIES(a) READONLYIF isReadonly() captionArticle, idArticle SHOWIF showIDs(), canonicalNameItemGroupArticle
    PROPERTIES(a) ADDFORM, EDITFORM, deletea=DELETE
    ORDER BY captionArticle

    FILTERGROUP groupFilters
        FILTER 'С группами' 'F9' isParentGroupArticle(g, a) DEFAULT
        FILTER 'Без групп' 'F8' captionArticle(a) IF NOT itemGroupArticle(a)

    DIALOG Article OBJECT a
;

DESIGN articles FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW rootContainer {
            fill = 1;
            type = SPLITH;

            ADD groupTree.tree.box;
            NEW articleItemBox {
                fill = 3;
                ADD a.box {
                    fill = 2;
                    defaultComponent = TRUE;
                }
            }    
        }
        ADD functions.box;
    }
}
@extendFormEditable(articles);

@defineObjectItemAttribute(article, Article, idArticle, 'Артикул', itemArticle);
@defineObjectItemAttributeBatch (article, idArticle, 'Артикул');
@implementItemAttribute(idArticleItem, 'Артикул', String, itemArticle);
captionArticleItem 'Название артикула' (item) = captionArticle(articleItem(item));

// Цвет
CLASS Color 'Цвет товара';
TABLE color (Color);

@defineExternalizable(color, VARSTRING[100]);
nameColor 'Наименование' = DATA VARISTRING[50](Color);

FORM color 'Цвет товара'
    OBJECTS t=Color FIXED PANEL
    PROPERTIES(t) nameColor, idColor SHOWIF showIDs()
    EDIT Color OBJECT t
;

FORM colors 'Цвета товара'
    OBJECTS t=Color
    PROPERTIES(t) nameColor READONLY, idColor SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameColor
    DIALOG Color OBJECT t
;
DESIGN colors FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(color, Color, nameColor, 'Цвет', itemArticle);
@defineObjectItemAttributeBatch (color, nameColor, 'Цвет');
@implementItemAttribute(nameColorItem, 'Цвет', String, itemColor);

TABLE colorArticle(Color, Article);
countColorArticle 'Кол-во цветов для артикля' (color,article) = GROUP SUM 1 BY colorItem(item), articleItem(item) PERSISTENT;

colorArticle  = DATA Color(Article);
nameColorArticle 'Цвет' (Article) = nameColor(colorArticle(Article)) IN articleDescription;

EXTEND FORM article PROPERTIES(a) nameColorArticle;
EXTEND DESIGN article  {
    articlePrimary {
        ADD a.articleDescription {type = CONTAINERH;}
    }
}
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() nameColorArticle;

//  Ед. изм.
UOMArticle  = DATA UOM (Article);
nameUOMArticle 'Единица измерения' (article) = nameUOM(UOMArticle(article)) IN articleBase MINCHARWIDTH 10 PREFCHARWIDTH 10;

//  Состав
compositionArticle 'Состав' = DATA VARSTRING[255] (Article) IN articleBase MINCHARWIDTH 30 PREFCHARWIDTH 40;

EXTEND FORM article PROPERTIES(a) compositionArticle, nameUOMArticle;
EXTEND FORM articles PROPERTIES(a) BEFORE nameColorArticle(a) READONLYIF isReadonly() nameUOMArticle, compositionArticle;

// Коллекция
CLASS Collection 'Коллекция';
TABLE collection (Collection);

@defineExternalizable(collection, VARSTRING[100]);
nameCollection 'Наименование' = DATA VARISTRING[100](Collection);

FORM collection 'Цвет товара'
    OBJECTS t=Collection FIXED PANEL
    PROPERTIES(t) nameCollection, idCollection SHOWIF showIDs()
    EDIT Collection OBJECT t
;

FORM collections 'Цвета товара'
    OBJECTS t=Collection
    PROPERTIES(t) nameCollection READONLY, idCollection SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameCollection
    DIALOG Collection OBJECT t
;
DESIGN collections FROM DEFAULT { main{ preferredSize = (600, 400); } }

collectionArticle  = DATA Collection(Article);
nameCollectionArticle 'Коллекция' (Article) = nameCollection(collectionArticle(Article)) IN articleDescription MINCHARWIDTH 20 PREFCHARWIDTH 30;

EXTEND FORM article PROPERTIES(a)  nameCollectionArticle;
EXTEND FORM articles PROPERTIES(a)  BEFORE deletea READONLYIF isReadonly() nameCollectionArticle;

//-- ТН ВЭД
TABLE countryArticle(Country, Article);
customsGroupCountryArticle = DATA CustomsGroup(Country, Article);
codeCustomsGroupCountryArticle 'ТН ВЭД' (country, article) = codeCustomsGroup(customsGroupCountryArticle(country, article)) IN articleSupplier MINCHARWIDTH 10 PREFCHARWIDTH 15;
nameCustomsGroupCountryArticle 'Позиция ТН ВЭД' (country, article) = nameCustomsGroup(customsGroupCountryArticle(country, article)) IN articleSupplier MINCHARWIDTH 30 PREFCHARWIDTH 40;
codeCustomsGroupDefaultCountryArticle 'ТН ВЭД' (article) = codeCustomsGroup(customsGroupCountryArticle(defaultCountry(), article)) IN articleSupplier MINCHARWIDTH 10 PREFCHARWIDTH 15;

changeCustomsGroupDefaultCountryArticle = ACTION (article) {
    REQUEST OBJECT cg
    FORM customsGroups OBJECTS cz = customsZoneDefaultCountry() MODAL SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        customsGroupCountryArticle(country, article) <- requestedObject() WHERE country == defaultCountry();

    } ELSE IF formResult() == FormResult.drop THEN {
        customsGroupCountryArticle(country, article) <- NULL WHERE country == defaultCountry();
    }
}

CONSTRAINT customsZoneCustomsGroup(customsGroupCountryArticle(country, article)) != customsZoneCountry(country) CHECKED BY customsGroupCountryArticle
    MESSAGE 'Таможенная зона должна соответствовать стране';

//-- Группа сертификации
complianceGroupCountryArticle = DATA ComplianceGroup(Country, Article);
nameComplianceGroupCountryArticle 'Группа сертификации' (country, article) = nameComplianceGroup(complianceGroupCountryArticle(country, article)) IN articleSupplier MINCHARWIDTH 30 PREFCHARWIDTH 40;
nameComplianceGroupDefaultCountryArticle 'Группа сертификации' (article) = nameComplianceGroup(complianceGroupCountryArticle(defaultCountry(), article)) IN articleSupplier MINCHARWIDTH 10 PREFCHARWIDTH 15;

changeComplianceGroupDefaultCountryArticle = ACTION (article) {
    REQUEST OBJECT cg
    FORM complianceGroups MODAL SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        complianceGroupCountryArticle(country, article) <- requestedObject() WHERE country == defaultCountry();

    } ELSE IF formResult() == FormResult.drop THEN {
        complianceGroupCountryArticle(country, article) <- NULL WHERE country == defaultCountry();
    }
}



EXTEND FORM article
    PROPERTIES(a)  codeCustomsGroupDefaultCountryArticle  ON CHANGE changeCustomsGroupDefaultCountryArticle(a),
    nameComplianceGroupDefaultCountryArticle  ON CHANGE changeComplianceGroupDefaultCountryArticle(a)

    PROPERTIES(c,a) codeCustomsGroupCountryArticle, nameComplianceGroupCountryArticle
    FILTERGROUP filters1
            FILTER 'Страны, у которых есть НДС' 'F11' countRangeTaxCountry (Tax.taxVAT, c) DEFAULT

;
EXTEND DESIGN article  {
    articlePrimary {
        NEW regionPrm AFTER a.articleBase{
            caption = 'Региональные свойства';
            type = CONTAINERH;
            ADD PROPERTY(codeCustomsGroupDefaultCountryArticle);
            ADD PROPERTY(nameComplianceGroupDefaultCountryArticle);
        }
    }
}

EXTEND FORM articles
    PROPERTIES(a)  READONLYIF isReadonly() BEFORE deletea  codeCustomsGroupDefaultCountryArticle, nameComplianceGroupDefaultCountryArticle
;
// Размер
CLASS Size 'Размер товара';
TABLE size(Size);

@defineExternalizable(size, VARSTRING[100]);

nameSize 'Наименование' = DATA VARISTRING[50](Size);
shortNameSize 'Краткое наименование' = DATA ISTRING[10](Size);

FORM size 'Размер товара'
    OBJECTS t=Size FIXED PANEL
    PROPERTIES(t) nameSize, idSize SHOWIF showIDs(), shortNameSize
    EDIT Size OBJECT t
;

FORM sizes 'Размеры товара'
    OBJECTS t=Size
    PROPERTIES(t) nameSize READONLY, idSize SHOWIF showIDs() READONLY, shortNameSize READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSize
    DIALOG Size OBJECT t
;
DESIGN sizes FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(size, Size, nameSize, 'Размер', itemArticle);
@defineObjectItemAttributeBatch (size, nameSize, 'Размер');
@implementItemAttribute(nameSizeItem, 'Размер', String, itemSize);

TABLE sizeArticle(Size, Article);
countSizeArticle 'Кол-во размеров для артикля' (size,article) = GROUP SUM 1 BY sizeItem(item), articleItem(item) PERSISTENT;

// Рост
CLASS SizeHeight 'Рост товара';
TABLE sizeHeight (SizeHeight);
@defineExternalizable(sizeHeight, VARSTRING[100]);

nameSizeHeight 'Рост' = DATA VARISTRING[50](SizeHeight);

FORM sizeHeight 'Рост товара'
    OBJECTS t=SizeHeight FIXED PANEL
    PROPERTIES(t) nameSizeHeight, idSizeHeight SHOWIF showIDs()
    EDIT SizeHeight OBJECT t
;

FORM sizeHeights 'Роста товара'
    OBJECTS t=SizeHeight
    PROPERTIES(t) nameSizeHeight READONLY, idSizeHeight SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSizeHeight
    DIALOG SizeHeight OBJECT t
;
DESIGN sizeHeights FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(sizeHeight, SizeHeight, nameSizeHeight, 'Рост', itemArticle);
@defineObjectItemAttributeBatch (sizeHeight, nameSizeHeight, 'Рост');
@implementItemAttribute(nameSizeHeightItem, 'Рост', String, itemSizeHeight);

// Сезон
CLASS Season 'Сезон';
TABLE season (Season);
@defineExternalizable(season, VARSTRING[100]);

nameSeason 'Сезон' = DATA VARISTRING[50](Season);

FORM season 'Сезон'
    OBJECTS t=Season FIXED PANEL
    PROPERTIES(t) nameSeason, idSeason SHOWIF showIDs()
    EDIT Season OBJECT t
;

FORM seasons 'Сезоны'
    OBJECTS t=Season
    PROPERTIES(t) nameSeason READONLY, idSeason SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSeason
    DIALOG Season OBJECT t
;
DESIGN seasons FROM DEFAULT { main{ preferredSize = (600, 400); } }

// Год
CLASS SeasonYear 'Год';
TABLE seasonYear (SeasonYear);
@defineExternalizable(seasonYear, VARSTRING[100]);

nameSeasonYear 'Год' = DATA VARISTRING[50](SeasonYear);

FORM seasonYear 'Год'
    OBJECTS t=SeasonYear FIXED PANEL
    PROPERTIES(t) nameSeasonYear, idSeasonYear SHOWIF showIDs()
    EDIT SeasonYear OBJECT t
;

FORM seasonYears 'Годы'
    OBJECTS t=SeasonYear
    PROPERTIES(t) nameSeasonYear READONLY, idSeasonYear SHOWIF showIDs() READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSeasonYear
    DIALOG SeasonYear OBJECT t
;
DESIGN seasonYears FROM DEFAULT { main{ preferredSize = (600, 400); } }

seasonArticle= DATA Season (Article);
nameSeasonArticle 'Сезон' (a)= nameSeason(seasonArticle(a)) IN articleSeason MINCHARWIDTH 20 PREFCHARWIDTH 30;
seasonYearArticle= DATA SeasonYear (Article);
nameSeasonYearArticle 'Год' (a)= nameSeasonYear(seasonYearArticle(a)) IN articleSeason MINCHARWIDTH 10 PREFCHARWIDTH 15;

seasonItem (item)= seasonArticle(articleItem(item));
nameSeasonItem 'Сезон' (i)= nameSeason(seasonItem(i)) IN itemArticle MINCHARWIDTH 20 PREFCHARWIDTH 30;
 
seasonYearItem (item)= seasonYearArticle(articleItem(item));
nameSeasonYearItem 'Год' (i)= nameSeasonYear(seasonYearItem(i)) IN itemArticle MINCHARWIDTH 10 PREFCHARWIDTH 15;

EXTEND FORM item
    PROPERTIES(i)  nameSeasonYearItem, nameSeasonItem
;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() AFTER nameSizeHeightItem(i) nameSeasonYearItem, nameSeasonItem;

EXTEND FORM article
    PROPERTIES(a)  nameSeasonYearArticle, nameSeasonArticle
;
EXTEND DESIGN article  {
    articlePrimary {
        ADD a.articleSeason AFTER a.articleDescription{                     
            type = CONTAINERH;
        }
    }
}

EXTEND FORM articles
    PROPERTIES(a)  READONLYIF isReadonly() BEFORE deletea  nameSeasonYearArticle, nameSeasonArticle
;

EXTEND FORM article

    OBJECTS i = Item
    PROPERTIES (i) captionItem, canonicalNameItemGroupItem, compositionItem, nameUOMItem, nameColorItem,                        
                   codeCustomsGroupDefaultCountryItem ON CHANGE changeCustomsGroupDefaultCountryItem(i), 
                   nameComplianceGroupDefaultCountryItem ON CHANGE changeComplianceGroupCountryItem(i),
                   nameSizeItem, nameSizeHeightItem     
    PROPERTIES (i) ADDOBJ, DELETESESSION   
                                                                    
    FILTERS articleItem(i) == a      
    
;
EXTEND DESIGN article {
    articleDetail{
        ADD i.box;
    }
} 

EXTEND FORM articles

    OBJECTS i = Item
    PROPERTIES (i) READONLY captionItem, compositionItem, nameUOMItem, nameColorItem, 
                   nameSizeItem, nameSizeHeightItem       
    
    FILTERS articleItem(i) == a      
    
;

EXTEND DESIGN articles {
    articleItemBox{
        ADD i.box;
    }
} 

WHEN SESSION FORMS article CHANGED(captionArticle(article)) DO         
    captionItem(i) <- captionArticle(article) WHERE articleItem(i)==article;
    
WHEN SESSION FORMS article CHANGED(itemGroupArticle(article)) DO         
    itemGroupItem(i) <- itemGroupArticle(article) WHERE articleItem(i)==article;
        
WHEN SESSION FORMS article CHANGED(compositionArticle(article)) DO         
    compositionItem(i) <- compositionArticle(article) WHERE articleItem(i)==article;   

WHEN SESSION FORMS article CHANGED(UOMArticle(article)) DO         
    UOMItem(i) <- UOMArticle(article) WHERE articleItem(i)==article;  
    
WHEN SESSION FORMS article CHANGED(colorArticle(article)) DO         
    colorItem(i) <- colorArticle(article) WHERE articleItem(i)==article;
        
WHEN SESSION FORMS article CHANGED(customsGroupCountryArticle(country, article)) DO         
    customsGroupCountryItem(country, i) <- customsGroupCountryArticle(country, article) WHERE articleItem(i)==article;      

WHEN SESSION FORMS article CHANGED(complianceGroupCountryArticle(country, article)) DO         
    complianceGroupCountryItem(country, i) <- complianceGroupCountryArticle(country, article) WHERE articleItem(i)==article; 
        
        
WHEN SESSION FORMS article
    SET(i IS Item) AND articleItem(i)==article DO { 
        ASSIGN captionItem(i) <- captionArticle(article);
        ASSIGN itemGroupItem(i) <- itemGroupArticle(article) WHERE articleItem(i)==article;
        ASSIGN compositionItem(i) <- compositionArticle(article);  
        ASSIGN UOMItem(i) <- UOMArticle(article);  
        ASSIGN colorItem(i) <- colorArticle(article);
        ASSIGN customsGroupCountryItem(country, i) <- customsGroupCountryArticle(country, article);      
        ASSIGN complianceGroupCountryItem(country, i) <- complianceGroupCountryArticle(country, article); 
    }    



overCopyItem(s, d) += ACTION (s, d) {
    ASSIGN articleItem(d) <- articleItem(s);
    ASSIGN colorItem(d) <- colorItem(s);
    ASSIGN sizeItem(d) <- sizeItem(s);
    ASSIGN sizeHeightItem(d) <- sizeHeightItem(s);
}

EXTEND DESIGN item {
    itemPrimaryColumn2 {
        ADD i.itemArticle {
            columns = 2;
        }
    }
}


EXTEND DESIGN itemGroup {
    itemGroupDetail {
        ADD g.itemArticle {
            columns = 6;
        }
    }
}


NAVIGATOR {
    skuNavigator {
        ADD articles AFTER itemGroups;
    }
}
