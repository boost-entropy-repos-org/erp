MODULE  BOM;

REQUIRE EmployeeStock,
        Numerator,
        Barcode,
        Document,
        Sku,
        Utils,
        Time,
        Manufacturing,
        Integration;



dataComponentSkuGroup 'Сырье' = DATA BOOLEAN (SkuGroup);
countDataComponentSkuGroup () = GROUP SUM 1 IF dataComponentSkuGroup(g);

levelParentComponentSkuGroup (skuGroup) = GROUP MIN levelSkuGroupSkuGroup(skuGroup, parent) IF dataComponentSkuGroup(parent)
                                                              BY skuGroup PERSISTENT;    
nearestParentComponentSkuGroup (skuGroup) = skuGroupSkuGroupLevel(skuGroup, levelParentComponentSkuGroup(skuGroup));
nearestComponentSkuGroup (skuGroup) = dataComponentSkuGroup( nearestParentComponentSkuGroup (skuGroup));
componentSkuGroup 'Сырье' (skuGroup) =
    OVERRIDE nearestComponentSkuGroup (skuGroup), 
             dataComponentSkuGroup(skuGroup) PERSISTENT;    
filterComponentSkuGroup = GROUP SUM 1 IF componentSkuGroup(group) AND isParentSkuGroupSkuGroup(group, parent) BY parent;
             
//--

dataProductSkuGroup 'Готовые изделия' = DATA BOOLEAN (SkuGroup);
countDataProductSkuGroup () = GROUP SUM 1 IF dataProductSkuGroup(g);

levelParentProductSkuGroup (skuGroup) = GROUP MIN levelSkuGroupSkuGroup(skuGroup, parent) IF dataProductSkuGroup(parent)
                                                              BY skuGroup PERSISTENT;    
nearestParentProductSkuGroup (skuGroup) = skuGroupSkuGroupLevel(skuGroup, levelParentProductSkuGroup(skuGroup));
nearestProductSkuGroup (skuGroup) = dataProductSkuGroup( nearestParentProductSkuGroup (skuGroup));
productSkuGroup 'Готовые изделия' (skuGroup) =
    OVERRIDE nearestProductSkuGroup (skuGroup), 
             dataProductSkuGroup(skuGroup) PERSISTENT; 

filterProductSkuGroup = GROUP SUM 1 IF productSkuGroup(group) AND isParentSkuGroupSkuGroup(group, parent) BY parent;

EXTEND FORM options 
    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES(sk) READONLY orderSkuGroup, nameSkuGroup
    PROPERTIES(sk) componentSkuGroup, productSkuGroup
    ORDER BY orderSkuGroup(sk), nameSkuGroup(sk)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sk) 'F5' DEFAULT    
;
DESIGN options {
    pane {
        NEW manufacturing {
            caption = 'Производство';
            MOVE skuTree.tree.box;
        }
    }
}

isComponentGroupSku 'Фильтр сырье (группа)' (sku) = componentSkuGroup(skuGroupSku(sku)) OR (sku IS Sku AND NOT countDataComponentSkuGroup ());
isProductGroupSku 'Фильтр готовые изделия (группа)' (sku) = productSkuGroup(skuGroupSku(sku))  OR (sku IS Sku AND NOT countDataProductSkuGroup ());

// ---------------- Материалы ------------------- //
CLASS ABSTRACT Material 'Материал';
TABLE material(Material);

idMaterial 'Код' = ABSTRACT VARSTRING[100] (Material) PERSISTENT INDEXED MINCHARWIDTH 10 PREFCHARWIDTH 15;

nameMaterial 'Наименование' (material) = ABSTRACT VARISTRING[255] (Material) PERSISTENT INDEXED MINCHARWIDTH 40 PREFCHARWIDTH 80;

UOMMaterial (material) = ABSTRACT UOM (Material) PERSISTENT;
shortNameUOMMaterial 'Ед. изм.' (material) = shortNameUOM(UOMMaterial(material)) IN base;

countryMaterial (material) = ABSTRACT Country (Material) PERSISTENT;
nameCountryMaterial 'Страна' (material) = nameCountry(countryMaterial(material)) IN base;

editMaterial 'Редактировать' = ABSTRACT ACTION LIST (Material) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
addMaterial 'Добавить' = ABSTRACT ACTION LIST () IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

copyMaterial 'Копировать' = ABSTRACT ACTION LIST (Material) EDITKEY 'F5' TOOLBAR;

skuMaterial (material) = ABSTRACT Sku (Material) PERSISTENT;

skuGroupMaterial (material) = skuGroupSku(skuMaterial(material)) PERSISTENT;
isParentSkuGroupMaterial (skuGroup, material) = isParentSkuGroupSkuGroup(skuGroupMaterial(material), skuGroup);

FORM materials 'Материалы'

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg)
    
    OBJECTS m = Material
    PROPERTIES(m) READONLY idMaterial SHOWIF showIDs(), nameMaterial, shortNameUOMMaterial, objectClassName    
    PROPERTIES() addMaterial TODRAW m
    PROPERTIES(m) editMaterial, copyMaterial
    FILTERS isParentSkuGroupMaterial(sg, m)
    ORDER BY nameMaterial(m)

    DIALOG Material OBJECT m
;

DESIGN materials {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE skuTree.tree.box {
                caption = 'Группы Материалов';
            }

            MOVE m.box {
                fill = 2;
                m.grid {
                    defaultComponent = TRUE;
                }
                PROPERTY(copyMaterial(m)) { focusable = TRUE; }
            }
        }

        MOVE functions.box;
    }
}


// --------------- Товары ----------------- //
EXTEND CLASS Sku : Material;

nameMaterial(material) += nameSku(material);
UOMMaterial(material) += UOMSku(material);
countryMaterial(material) += countrySku(material);

editMaterial(sku) += ACTION editSku(sku);
addMaterial () += ACTION addSku();
copyMaterial(sku) += ACTION copySku(sku);

skuMaterial(material) += material AS Sku;

idMaterial(sku) += idSku(sku);

// -----------  Технологии -------------- //
CLASS Technology 'Технология';
TABLE technology (Technology);

nameTechnology 'Наименование' = DATA VARISTRING[50](Technology);

TABLE technologyMaterialDate (Technology, Material, DATE);
@defineHistorizable(wastage, '% потерь', NUMERIC[8,3], technology, nameTechnology, material, nameMaterial, base);

FORM technology 'Технология'

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES valDt = OBJVALUE(dt) BACKGROUND dateDiffersCurrent(dt)

    OBJECTS t=Technology FIXED PANEL
    PROPERTIES(t) nameTechnology

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg), skuGroupName
    
    OBJECTS m = Material
    PROPERTIES(m) READONLY nameMaterial, shortNameUOMMaterial
    PROPERTIES overWastageTechnologyMaterialDate(t,m,dt)
    
    FILTERS isComponentGroupSku(m)

    FILTERS isParentSkuGroupMaterial(sg, m)
    ORDER BY nameMaterial(m)

    FILTERGROUP filters
        FILTER 'С % потерь' wastageTechnologyMaterialDate(t,m,dt) 'F9'

    OBJECTS d=DATE
    PROPERTIES  READONLY OBJVALUE(d), dataWastageTechnologyMaterialDate(t,m,d)
    FILTERS dataWastageTechnologyMaterialDate(t,m,d)

    EDIT Technology OBJECT t
;

DESIGN technology {
    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box {caption = 'Группа материалов'; fill = 1; }
            NEW row {
                fill = 1;
                type = SPLITV;
                MOVE m.box {
                    fill = 3;
                    caption = 'Материал';
                }
                MOVE d.box {
                    fill = 1;
                    caption = 'История изменений';
                }
            }
        }
        NEW headerBox BEFORE specification.box {
            type = CONTAINERH;
            MOVE t.box { type = CONTAINERH;}
            MOVE dt.box {type = CONTAINERH;}
        }
    }
}

FORM yearFromTo 'Год'

    OBJECTS y = INTEGER FIXED PANEL
    PROPERTIES valY = OBJVALUE(y)
;

DESIGN yearFromTo {
    main {
        NEW year{
            MOVE PROPERTY (valY) { caption = 'Укажите на какой год скопировать значения (4 цифры)'; panelCaptionAbove = TRUE; font = 'bold 72'; minimumCharWidth = 4; preferredCharWidth = 4; maximumCharWidth = 4; }
        }
        MOVE functions.box;
    }
}


fillWastageTechnology 'Заполнить технологии на другой год' = ACTION (technology) {

    FORM yearFromTo MODAL;
    IF formResult() == FormResult.ok THEN {

        LOCAL newYear = INTEGER();
        ASSIGN newYear() <- chosenInteger('y');

        FOR dataWastageTechnologyMaterialDate(technology, material, dateFrom) DO {

            IF 1 == 2 THEN
                BREAK;

            IF extractYear(dateFrom) == (newYear() - 1) THEN {
                ASSIGN dataWastageTechnologyMaterialDate(technology, material, dateTo) <- dataWastageTechnologyMaterialDate(technology, material, dateFrom) WHERE dateTo == sumDateYear(dateFrom, 1);
            }

        }
        EXEC apply();
    }
} TOOLBAR;

FORM technologies 'Технологии'

    OBJECTS t=Technology
    PROPERTIES(t)  READONLY nameTechnology

    PROPERTIES (t) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    PROPERTIES (t) fillWastageTechnology

    OBJECTS m=Material
    PROPERTIES     READONLY nameMaterial(m), shortNameUOMMaterial(m), wastageTechnologyMaterial(t,m)
    ORDER BY nameMaterial(m)

    FILTERS        wastageTechnologyMaterial(t,m)

    DIALOG Technology OBJECT t
;

DESIGN technologies {
    main {
        MOVE t.box;
        MOVE m.box { 
            caption = 'Материалы с % потерь на текущую дату';
            m.grid { defaultComponent = TRUE; }
        }
        MOVE functions.box;
    }
}

// ---------------------- BOM'ы ----------------------

CLASS BOM 'Спецификация';
TABLE BOM (BOM);

@defineExternalizable(BOM, VARSTRING[100]);

@defineDocumentHeaderTimePrefix(BOM, , ' документа');
@deriveDocumentHeaderTimePrefix(BOM, );

nameBOM 'Наименование' = DATA VARISTRING[100](BOM);

@defineDocumentHeaderCreated(BOM);
@defineDocumentHeaderNote(BOM);

@defineNumbered(BOM);
@defineNumeratedDefault(BOM, 'Спецификации', 'СП');
  
descriptionBOM 'Название спецификации' (BOM) = VARSTRING[200](CONCAT ' ', nameBOM(BOM), 
                                                                          '№'+seriesNumberBOM(BOM)) MINCHARWIDTH 30 PREFCHARWIDTH 50; 
    

fromDateBOM 'Дата с' = DATA DATE (BOM) IN documentPrm;
toDateBOM 'Дата по' = DATA DATE (BOM) IN documentPrm;

inactiveBOM 'Неактивная' = DATA BOOLEAN (BOM) IN documentPrm;
activeBOM 'Активная' = b IS BOM AND NOT inactiveBOM(b);

// ------------- Изделия ----------- //
CLASS Product 'Изделие' : Material;
TABLE product (Product);

@defineExternalizable(product, VARSTRING[100], ext);

EXTEND FORM materials

    FILTERGROUP filters
        FILTER 'Изделие' m IS Product 'F11'
        FILTER 'Sku' m IS Sku 'F10'
;

EXTEND FORM technology

    FILTERGROUP filters2
        FILTER 'Изделие' m IS Product 'F11'
        FILTER 'Sku' m IS Sku 'F10'
;

skuProduct = DATA Sku (Product);
nameSkuProduct 'SKU' (product) = nameSku(skuProduct(product)) IN recognize;
idBarcodeSkuProduct 'Штрихкод' (product)= idBarcodeSku(skuProduct(product));
idSkuProduct 'Код' (product)= idSku(skuProduct(product));

idProduct 'Код изделия' (product) = idSku(skuProduct(product))IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 15;
idMaterial(p) += idProduct(p);

editSkuProduct 'Редактировать SKU' (p) = ACTION editSku(skuProduct(p));

UOMProduct = DATA UOM (Product);
shortNameUOMProduct 'Ед.изм.' (product) = shortNameUOM(UOMProduct(product)) IN recognize;
UOMProduct(product) <- UOMSku(skuProduct(product)) WHEN CHANGED (skuProduct(product));


@defineDocumentRelation (BOM, Product, ' (изделие)');
@defineDocumentDetailTimePrefix(BOM, Product, , ' документа');

inactiveProduct 'Неактивный' (product) = inactiveBOM(BOMProduct(product));
descriptionProduct 'Название документа' (product) = descriptionBOM(BOMProduct(product));

@defineDocumentDetailIndexPersistent (BOM, Product);
@defineDocumentDetailActionsCustom (BOM, Product);

productsBOM 'Изделия' (BOM) = GROUP CONCAT VARSTRING[255](CONCAT '', nameSkuProduct(p), ' ('+idSkuProduct(p)+')'), ', '
                                       BY BOMProduct(p)
                                       ORDER indexProduct(p) MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

idProductsBOM 'Коды' (BOM) = GROUP CONCAT VARSTRING[255](idSkuProduct(p)), ', '
                                      BY BOMProduct(p)
                                      ORDER indexProduct(p) MINCHARWIDTH 13 PREFCHARWIDTH 13 PERSISTENT; 
                                                                              
fullNameBOM 'Полное название' (BOM) = VARISTRING[255] (CONCAT '/',
                                                              productsBOM(BOM),                                                                  
                                                              nameBOM(BOM));
                                       
@defineDocumentDetailQuantityCustomPrefix (product, , );

@defineDocumentHeaderQuantityCustomPrefix (BOM, product, , ' (изделие)');

pricePercentProduct 'Удельный вес цены,%' = DATA NUMERIC[10,5] (Product);
pricePercentProduct(product) <- 100.000 WHEN SET (product IS Product);
priceCoeffProduct (product) = pricePercentProduct(product) / 100 PERSISTENT;

pricePercentBOM 'Удельный вес цен, %' = GROUP SUM pricePercentProduct(product) BY BOMProduct(product) PERSISTENT IN documentSum;

nameMaterial(material) += VARISTRING[255] (CONCAT '/',
                                              nameSkuProduct(material),                                                                  
                                              nameBOM(BOMProduct(material)));

UOMMaterial(material) += UOMSku(skuProduct(material));
countryMaterial(material) += countrySku(skuProduct(material));
skuMaterial (material) += skuProduct(material);

calcPriceCoeffProduct 'Коэффициент цены' (product) = quantityProductBOM(BOMProduct(product)) * pricePercentProduct(product) 
    / ((quantityProduct(product) IF quantityProduct(product)!=0)*100);  

calcPricePercentProductNumeric '%' (product, num) = (num AS NUMERIC[8,5]) * quantityProduct(product)*100 
    /(quantityProductBOM(BOMProduct(product)) IF quantityProductBOM(BOMProduct(product))!= 0); 
    
changePriceCoeffProduct = ACTION (product) {
    REQUEST NUMERIC[8,5] INPUT;
    IF requestedNumeric() THEN {        
        pricePercentProduct(product) <- NUMERIC[16,5](calcPricePercentProductNumeric(product, requestedNumeric()));

    }
}

FORM products 'Изделия'
    OBJECTS p=Product
    PROPERTIES(p) idProduct SHOWIF showIDs()
    PROPERTIES(p) READONLY inactiveProduct, descriptionProduct, indexProduct, nameSkuProduct, shortNameUOMProduct, quantityProduct
//    PROPERTIES (p) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    FILTERGROUP active
        FILTER 'Активные' NOT inactiveProduct(p) DEFAULT

    DIALOG Product OBJECT p
;


// ------------- Компоненты ----------- //
CLASS Component 'Компонент';
TABLE component (Component);

//nameComponent 'Наименование' = DATA VARISTRING[100](Component);

@defineExternalizable(component, VARSTRING[100], ext);

@defineDocumentRelation (BOM, Component, ' (компонент)');
@defineDocumentDetailTimePrefix(BOM, Component, , ' документа');

descriptionComponent 'Спецификация' (component)= descriptionBOM(BOMComponent(component));
productsBOMComponent 'Название' = productsBOM(BOMComponent(component));

@defineDocumentDetailIndexPersistent (BOM, Component);
@defineDocumentDetailActionsCustom (BOM, Component);

materialComponent = DATA Material (Component);
nameMaterialComponent 'Материал' (component) = nameMaterial(materialComponent(component));
idBarcodeSkuComponent 'Штрихкод' (component)= idBarcodeSku(materialComponent(component));
idComponent 'Код компонента' (component)= idMaterial(materialComponent(component));
skuComponent 'Sku' (c) = skuMaterial(materialComponent(c)) PERSISTENT;


componentsBOM 'Компоненты' (BOM) = GROUP CONCAT VARSTRING[2550](CONCAT '', nameMaterialComponent(component), ' ('+idComponent(component)+')'), ', '
                                       BY BOMComponent(component)
                                       ORDER indexComponent(component) MINCHARWIDTH 20 PREFCHARWIDTH 50 PERSISTENT;
idComponentsBOM 'Коды' (BOM) = GROUP CONCAT VARSTRING[255](idComponent(component)), ', '
                                       BY BOMComponent(component)
                                       ORDER indexComponent(component) MINCHARWIDTH 20 PREFCHARWIDTH 50 PERSISTENT;                                       
                                     
nameComponent 'Компонент' (component) = VARSTRING[255](CONCAT '/', nameBOM(BOMComponent(component)), 
                                                     nameMaterialComponent(component)) PERSISTENT;
                                      

UOMComponent = DATA UOM (Component);
shortNameUOMComponent 'Ед. изм.' (component) = shortNameUOM(UOMComponent(component));
UOMComponent(component) <- UOMMaterial(materialComponent(component)) WHEN CHANGED (materialComponent(component));

// Кол-во нетто
@defineDocumentDetailQuantityCustomPrefix (component, netto, ' (нетто)');
@defineDocumentHeaderQuantityCustomPrefix (BOM, component, netto, ' (нетто компонент)');

// Технология
TABLE  technologyComponent (Technology, Component);

inTechnologyComponent 'Вкл.' = DATA BOOLEAN (Technology, Component);
countTechnologiesComponent = GROUP SUM 1 IF inTechnologyComponent(technology, component) BY component PERSISTENT;

technologiesInvoice 'Технологии' (component) = GROUP CONCAT VARSTRING[255](nameTechnology(technology)) IF inTechnologyComponent(technology, component) , ', '
                                         BY component
                                         ORDER technology
                                         MINCHARWIDTH 30 PREFCHARWIDTH 50;
                                         
inTechnologyMaterial 'Связь' (technology, material) = GROUP SUM 1 IF dataWastageTechnologyMaterialDate(technology, material, date) BY technology, material;

CONSTRAINT inTechnologyComponent(technology, component) AND NOT inTechnologyMaterial(technology, materialComponent(component))
    MESSAGE 'Для компонента выбрана технология, у которой нет значения % потерь для SKU';

CONSTRAINT countTechnologiesComponent(component) > 2 MESSAGE 'Для компонента выбраны более двух технологий';

wastageTechnologyComponent '% потерь' (t,c) = wastageTechnologyMaterial(t,materialComponent(c));     
                                         
FORM componentTechnologies 'Технологии'

    OBJECTS c=Component FIXED  PANEL 
//    PROPERTIES(c)  READONLY nameComponent

    OBJECTS t=Technology
    PROPERTIES(t)  READONLY nameTechnology
    PROPERTIES(t,c) inTechnologyComponent, wastageTechnologyComponent

    FILTERS        inTechnologyMaterial(t, materialComponent(c))
                   //,materialComponent(c) == m    
;  
DESIGN componentTechnologies {
    main {
        preferredSize = (1024, 768);
    }
}                                                                                                                                                                                                                                    

// % Потерь
wastageComponent '% потерь'= DATA NUMERIC[8,3] (Component);
backgroundWastageComponent 'Цвет' (component) = RGB(229,229,229) IF countTechnologiesComponent(component);


// todo: пока считаем, что более двух технологий для компонента не будет включено
minTechnologyComponent (c) = GROUP MIN t IF inTechnologyComponent(t,c) BY c PERSISTENT;
maxTechnologyComponent (c) = GROUP MAX t IF inTechnologyComponent(t,c) BY c;
equalsMaxMinTechnologyComponent (c) = minTechnologyComponent (c) == maxTechnologyComponent (c) PERSISTENT;

calcMinMaxWastageTechnologyMaterialDate (c,date)= [= (1-((100-X)*(100-Y)/10000))*100](
    (OVERRIDE 0 IF c IS Component, wastageTechnologyMaterialDate(minTechnologyComponent(c),materialComponent(c), date)),
     (OVERRIDE 0 IF c IS Component, wastageTechnologyMaterialDate(maxTechnologyComponent(c),materialComponent(c), date)));
    
minMaxWastageTechnologyMaterialDate (c, date)= IF equalsMaxMinTechnologyComponent (c) THEN wastageTechnologyMaterialDate(minTechnologyComponent(c),materialComponent(c), date)
    ELSE calcMinMaxWastageTechnologyMaterialDate(c,date);

//wastageComponentDate '% потерь' (component, date) = IF countTechnologiesComponent(component) THEN minMaxWastageTechnologyMaterialDate(component, date)
//                                                    ELSE (OVERRIDE 0 IF component IS Component AND date IS DATE, wastageComponent(component) IF date IS DATE);
                                                    
wastageTechnologiesComponentDate '% потерь (технология)' (component, date) = IF countTechnologiesComponent(component) THEN minMaxWastageTechnologyMaterialDate(component, date)
                                                    ELSE (0 IF component IS Component AND date IS DATE);   
wastageTechnologiesComponent '% потерь (технология)' (component) = wastageTechnologiesComponentDate(component, currentDate());                                                                                                     
                                                                                                     
wastageComponentDate '% потерь' (component, date) = [= (1-((100-X)*(100-Y)/10000))*100](
    wastageTechnologiesComponentDate(component, date),
    (OVERRIDE 0 IF component IS Component,  wastageComponent(component)));
//wastageTechnologiesComponentDate(component, date) (+) wastageComponent(component);                                                 

overCurWastageComponent '% потерь' (component) = wastageComponentDate(component, currentDate());

// Кол-во брутто

@defineDocumentDetailQuantityCustomPrefix (component, brutto, ' (брутто)');
@defineDocumentHeaderQuantityCustomPrefix (BOM, component, brutto, ' (брутто компонент)'); 
            
selectTechnologiesComponent = ACTION (component) {
    FORM componentTechnologies OBJECTS c = component MODAL;
}  
       
changeNettoQuantityComponent = ACTION (component) {
    REQUEST NUMERIC[16,5] INPUT;
    IF requestedNumeric() THEN {
        nettoQuantityComponent(component) <- requestedNumeric();
        bruttoQuantityComponent(component) <- NUMERIC[16,5](nettoQuantityComponent(component)/(1 - (OVERRIDE 0 IF component IS Component,wastageComponent(component)/100))); 
    } ELSE {
        nettoQuantityComponent(component) <- NULL;
    }                
}   
                                                                                                                                                                                                                                                                                                                                                      
changeWastageComponent = ACTION (component) {
    REQUEST NUMERIC[8,3] INPUT;
    IF requestedNumeric() THEN {
        wastageComponent(component) <- requestedNumeric();   
        bruttoQuantityComponent(component) <- NUMERIC[16,5](nettoQuantityComponent(component)/(1 - (OVERRIDE 0 IF component IS Component,wastageComponent(component)/100))); 
    } ELSE {
        wastageComponent(component) <- NULL;
        bruttoQuantityComponent(component) <- NUMERIC[16,5](nettoQuantityComponent(component)/(1 - (OVERRIDE 0 IF component IS Component,wastageComponent(component)/100))); 
    }
}                                                                                                                                                                                                                                                                                                                                                      
    
//calcWastageComponentDate (component, date) = NUMERIC[9,3]([= 100-(100*(100-X)/(100-Y))](
//    ((1-(nettoQuantityComponent(component)/(bruttoQuantityComponent(component) IF bruttoQuantityComponent(component)!=0)))*100),
//    wastageTechnologiesComponentDate(component, date)));       
                                                                                                                                                                                                                                                                                                                                                      
calcWastageComponentDate (component, date) = NUMERIC[9,3]([= 100-(X/Y/(100-Z))*10000](
    nettoQuantityComponent(component),
    (bruttoQuantityComponent(component) IF bruttoQuantityComponent(component)!=0),
    wastageTechnologiesComponentDate(component, date)));                                                                                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                                                                                         
changeBruttoQuantityComponent = ACTION (component) {
    REQUEST NUMERIC[16,5] INPUT;
    IF requestedNumeric() THEN {    
        bruttoQuantityComponent(component) <- requestedNumeric();
        wastageComponent(component) <- NUMERIC[8,3]((1-(nettoQuantityComponent(component)/(bruttoQuantityComponent(component) IF bruttoQuantityComponent(component)!=0)))*100); 
               
    } ELSE {
        bruttoQuantityComponent(component) <- NULL;
        wastageComponent(component) <- NUMERIC[8,3]((1-(nettoQuantityComponent(component)/(bruttoQuantityComponent(component) IF bruttoQuantityComponent(component)!=0)))*100);          
    }                
}
backgroundBruttoQuantityComponent 'Цвет' (component) = RGB(229,229,229) IF countTechnologiesComponent(component);
backgroundBruttoQuantityBOM 'Цвет' (b) = RGB(229,229,229) IF b IS BOM;

bruttoQuantityComponentDate 'Кол-во (брутто) с учетом технологий' (component, date) = NUMERIC[16,5](bruttoQuantityComponent(component)/(1.0 - (wastageTechnologiesComponentDate(component, date)/100.0))) COMPLEX;
                                                                                
overCurBruttoQuantityComponent 'Кол-во (брутто) с уч. тех-ий' (component) = bruttoQuantityComponentDate(component, currentDate());

FORM components 'Компоненты'
    OBJECTS c=Component
    PROPERTIES(c) READONLY descriptionComponent, idComponent SHOWIF showIDs(), nameMaterialComponent, shortNameUOMComponent, nettoQuantityComponent
//    PROPERTIES (c) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    DIALOG Component OBJECT c
;

CONSTRAINT materialComponent(c) IS Sku AND NOT isComponentGroupSku(materialComponent(c)) CHECKED  BY materialComponent
    MESSAGE 'В качестве компонента выбран товар, который не входит в группу: Сырье';
CONSTRAINT skuProduct(p) AND NOT isProductGroupSku(skuProduct(p)) CHECKED  BY skuProduct
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';      
    
overSkuComponent (c) = IF materialComponent(c) IS Product THEN skuProduct(materialComponent(c)) ELSE materialComponent(c);
    
overNetWeightComponent = OVERRIDE netWeightSku(overSkuComponent(c)); 
overNettoNetWeightComponent 'Вес (нетто)' (c) = nettoQuantityComponent(c) * (OVERRIDE 1.0 IF c IS Component, overNetWeightComponent(c));
overBruttoNetWeightComponent 'Вес (брутто)' (c) = bruttoQuantityComponent(c) * (OVERRIDE 1.0 IF c IS Component, overNetWeightComponent(c));

overNettoNetWeightProduct 'Вес (нетто)' (p) = quantityProduct(p) * (OVERRIDE 1.0 IF p IS Product, netWeightSku(skuProduct(p)));

overNettoNetWeightProductBOM 'Вес нетто изд. (всего)' (BOM) = GROUP SUM overNettoNetWeightProduct(idetail) BY BOMProduct(idetail) IN documentSum PERSISTENT;
overNettoNetWeightComponentBOM 'Вес нетто ком. (всего)' (BOM) = GROUP SUM overNettoNetWeightComponent(idetail) BY BOMComponent(idetail) IN documentSum PERSISTENT;            
overBruttoNetWeightyComponentBOM 'Вес брутто ком. (всего)' (c)= GROUP SUM overBruttoNetWeightComponent(c) BY BOMComponent(c) IN documentSum PERSISTENT;


overCurBruttoNetWeightComponent 'Вес (брутто) с уч. тех-ий' (c) = overCurBruttoQuantityComponent(c) * (OVERRIDE 1.0 IF c IS Component, overNetWeightComponent(c));
overCurBruttoNetWeightyComponentBOM 'Вес брутто комп. (всего) с уч. тех-ий' (BOM)= GROUP SUM overCurBruttoNetWeightComponent(c) BY BOMComponent(c) IN documentSum;      
        
//CONSTRAINT overNettoNetWeightProductBOM(b) AND overNettoNetWeightComponentBOM(b) AND NOT (overNettoNetWeightProductBOM(b) == overNettoNetWeightComponentBOM(b))
//    MESSAGE 'Вес нетто изделия не равен весу нетто компонентов в спецификации';   
                           
//------------------------------- Формы -------------------------------------//
backgroundComponent 'Цвет' (component) = RGB(255,255,229) IF materialComponent(component) IS Product;

TABLE stockBOM (Stock, BOM);
TABLE stockGroupBOM (StockGroup, BOM);

dataInBOM 'Доступ разрешен (компания)' = DATA BOOLEAN (BOM);
dataInStockBOM 'Доступ разрешен (компания)' = DATA BOOLEAN (Stock, BOM);
dataInStockGroupBOM 'Доступ разрешен (компания)' = DATA BOOLEAN (StockGroup, BOM);

levelParentCompanyBOMStockGroup (BOM, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataInStockGroupBOM(parent, BOM)
                                                               BY BOM, stockGroup PERSISTENT;
nearestParentCompanyBOMStockGroup (BOM, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentCompanyBOMStockGroup(BOM, stockGroup));
nearestInCompanyBOMStockGroup (BOM, stockGroup) =
    dataInStockGroupBOM(nearestParentCompanyBOMStockGroup (BOM, stockGroup), BOM) PERSISTENT;

inBOMStockGroup 'Вкл.' (BOM, stockGroup) = OVERRIDE
    nearestInCompanyBOMStockGroup(BOM, stockGroup),
    dataInStockGroupBOM(stockGroup, BOM);

inBOMStock 'Вкл.' (BOM, stock) = OVERRIDE
    nearestInCompanyBOMStockGroup(BOM, stockGroupStock(stock)),
    dataInStockBOM(stock, BOM);
    
    
countStocksBOM = GROUP SUM 1 IF inBOMStock(BOM, stock) BY BOM PERSISTENT;
    
quantityChildWithStockGroupBOM (stockGroup, BOM) = GROUP SUM 1 IF dataInStockGroupBOM(childstockGroup, BOM) AND isParentStockGroupStockGroup(childstockGroup, stockGroup) BY stockGroup, BOM PERSISTENT;
quantityParentWithStockGroupBOM (stockGroup, BOM) = GROUP SUM 1 IF dataInStockGroupBOM(parentstockGroup, BOM) AND isParentStockGroupStockGroup(stockGroup, parentstockGroup) BY stockGroup, BOM PERSISTENT;     
    
backgroundInBOMStockGroup 'Цвет' (BOM, stockGroup) = CASE 
    WHEN dataInStockGroupBOM(stockGroup, BOM) THEN RGB(0,0,0)
    WHEN nearestInCompanyBOMStockGroup(stockGroup, BOM) THEN RGB(230,248,250) 
    WHEN quantityChildWithStockGroupBOM (stockGroup, BOM) != descendantNumberStockGroup(stockGroup) AND NOT quantityParentWithStockGroupBOM (stockGroup, BOM) THEN RGB(203,203,203);    

editMaterialComponent 'Редактировать компонент' (d) = ACTION editMaterial(materialComponent(d));

stocksBOM 'Склады' (BOM) = GROUP CONCAT nameStock(stock) IF inBOMStock(BOM, stock) , ', '
                                                 BY BOM
                                                 ORDER stock MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;
stocksIDBOM 'Склады' (BOM) = GROUP CONCAT idStock(stock) IF inBOMStock(BOM, stock) , ', '
                                                 BY BOM
                                                 ORDER stock MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;                                                 
FORM BOM 'Спецификация'

    OBJECTS b=BOM FIXED PANEL

    PROPERTIES(b) inactiveBOM, nameBOM, nameNumeratorBOM, numberBOM, seriesBOM, dateBOM, timeBOM, noteBOM, fromDateBOM, toDateBOM 
    PROPERTIES(b) READONLY overNettoNetWeightProductBOM, overNettoNetWeightComponentBOM, overBruttoNetWeightyComponentBOM, 
                  overCurBruttoNetWeightyComponentBOM BACKGROUND backgroundBruttoQuantityBOM(b), pricePercentBOM
    OBJECTS p = Product
    PROPERTIES(p) indexProduct 
    PROPERTIES(p) ON EDIT editSkuProduct(p) idBarcodeSkuProduct, idProduct SHOWIF showIDs(), nameSkuProduct, shortNameUOMProduct     
    
    PROPERTIES(p) quantityProduct, overNettoNetWeightProduct READONLY, pricePercentProduct, calcPriceCoeffProduct ON CHANGE changePriceCoeffProduct(p)

    PROPERTIES(p) ADDOBJ, deletep=DELETESESSION
    PROPERTIES(b) TODRAW p deleteProductBOM
    FILTERS       BOMProduct(p) == b

    OBJECTS c = Component
    PROPERTIES(c) BACKGROUND backgroundComponent(c) indexComponent 
    PROPERTIES(c) BACKGROUND backgroundComponent(c) ON EDIT editMaterialComponent(c) idBarcodeSkuComponent, idComponent SHOWIF showIDs(), nameMaterialComponent, shortNameUOMComponent 
    PROPERTIES(c) BACKGROUND backgroundComponent(c) 
                  nettoQuantityComponent ON CHANGE changeNettoQuantityComponent(c), overNettoNetWeightComponent READONLY,
                  wastageComponent ON CHANGE changeWastageComponent(c),
                  bruttoQuantityComponent ON CHANGE changeBruttoQuantityComponent(c), overBruttoNetWeightComponent READONLY,
                  technologiesInvoice ON CHANGE selectTechnologiesComponent(c)   BACKGROUND backgroundBruttoQuantityComponent(c),
                  wastageTechnologiesComponent READONLY BACKGROUND backgroundBruttoQuantityComponent(c),                   
                  overCurBruttoQuantityComponent READONLY BACKGROUND backgroundBruttoQuantityComponent(c),
                  overCurBruttoNetWeightComponent READONLY BACKGROUND backgroundBruttoQuantityComponent(c)
    ORDER BY indexComponent(c)
    PROPERTIES(c) ADDOBJ, deletec=DELETESESSION
    PROPERTIES(b) TODRAW c deleteComponentBOM
    FILTERS       BOMComponent(c) == b
    
    TREE stockTree sg = StockGroup PARENT parentStockGroup
    PROPERTIES    nameStockGroup(sg) READONLY, inBOMStockGroup(b,sg) BACKGROUND backgroundInBOMStockGroup(b,sg)
    ORDER BY      nameStockGroup(sg)
    
    OBJECTS ts=Stock
    PROPERTIES    nameStock(ts) READONLY, idStock(ts) READONLY SHOWIF showIDs(), inBOMStock(b,ts)

    FILTERGROUP inactiveStock FILTER 'Активный' activeStock(ts) 'ctrl F10' DEFAULT
    FILTERS isParentStockGroupStock(sg, ts)
    ORDER BY nameStock(ts)
    
    FILTERGROUP BOM FILTER 'Отм.' inBOMStock(b,ts) 'ctrl F9'

    EDIT BOM OBJECT b
;

DESIGN BOM {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            fill = 1;
            MOVE p.box {
                caption = 'Изделие';
                PROPERTY (idProduct(p)) { caption = 'Код изделия';}
            }
            MOVE c.box {caption = 'Компонент';}
            NEW inBOM {
                caption = 'Склады';
                type = SPLITH;
                fill = 1;
                MOVE stockTree.tree.box;
                MOVE ts.box;
            }
        }

        MOVE b.box BEFORE specification.box {
            type = CONTAINERH;
            NEW headerRow1 {
                type = CONTAINERV;

                NEW headerRow11 {
                    caption = 'Шапка';
                    type = CONTAINERH;
                    MOVE PROPERTY(inactiveBOM(b));
                    MOVE PROPERTY(nameBOM(b)) { preferredCharWidth = 20; }
                    MOVE PROPERTY(nameNumeratorBOM(b));
                    MOVE PROPERTY(numberBOM(b));
                    MOVE PROPERTY(seriesBOM(b));
                    MOVE PROPERTY(dateBOM(b));
                    MOVE PROPERTY(timeBOM(b));                    
                    
                }
                MOVE b.documentPrm {
                    type = CONTAINERH;
                }
                NEW kitchen {
                    caption = 'Кухня';
                    type = CONTAINERH;
                }

            }
            MOVE b.documentSum {
                columns = 1;
            }
        }
    }
}

WHEN SESSION FORMS BOM SET(BOM IS BOM) DO {
    dataInStockBOM(stock, BOM) <- TRUE WHERE dataAccessCompanyStockEmployee(stock, currentUser());
    dataInStockGroupBOM(group, BOM) <- TRUE WHERE dataAccessCompanyStockGroupEmployee(group, currentUser());
    dataInBOM(BOM) <- dataAccessCompanyEmployee(currentUser());
};

overCopyBOM = ABSTRACT ACTION LIST (BOM, BOM);

copyBOM 'Копировать' = ACTION (BOM) NEWSESSION {
    FOR ADDOBJ b = BOM DO {

        ASSIGN noteBOM(b) <- noteBOM(BOM);
        FOR BOMProduct(product) == BOM ADDOBJ p=Product DO {
            ASSIGN BOMProduct(p) <- b;
            ASSIGN skuProduct(p) <- skuProduct(product);
            ASSIGN quantityProduct(p) <- quantityProduct(product);
            ASSIGN pricePercentProduct(p) <- pricePercentProduct(product);
        }

        FOR BOMComponent(component) == BOM ADDOBJ c=Component DO {
            ASSIGN BOMComponent(c) <- b;
            ASSIGN materialComponent(c) <- materialComponent(component);
            ASSIGN nettoQuantityComponent(c) <- nettoQuantityComponent(component);
            
            ASSIGN inTechnologyComponent(t,c) <- inTechnologyComponent(t,component) WHERE inTechnologyComponent(t,component);            
            
            ASSIGN bruttoQuantityComponent(c) <- bruttoQuantityComponent(component);
            ASSIGN wastageComponent(c) <- wastageComponent(component);
        }

        dataInBOM(b) <- dataInBOM(BOM);
        dataInStockBOM(s, b) <- dataInStockBOM(s, BOM); 
        dataInStockGroupBOM(g, b) <- dataInStockGroupBOM(g, BOM);

        EXEC overCopyBOM(BOM, b);
        
        FORM BOM OBJECTS b = b MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

editMaterial(p) += ACTION [= ACTION EDITFORM BOM](BOMProduct(p));

relationProductsSkuBOM (sku,BOM)= GROUP SUM 1 BY skuProduct(p), BOMProduct(p);
relationComponentsSkuBOM (sku,BOM)= GROUP SUM 1 BY materialComponent(c), BOMComponent(c);

isActiveBOMDate(BOM, date) = BOM IS BOM AND date IS DATE
                                        AND NOT inactiveBOM(BOM)
                                        AND NOT fromDateBOM(BOM) > date
                                        AND NOT toDateBOM(BOM) < date;
isActiveBOM(BOM) = isActiveBOMDate(BOM, currentDate());

backgroundBOM 'Цвет' (BOM) = CASE WHEN fromDateBOM(BOM) > currentDate() THEN RGB(224,255,224)
                                  WHEN toDateBOM(BOM) < currentDate() THEN RGB(255,224,224);     

addBOMSku 'Добавить' = ACTION (sku) NEWSESSION {
    FOR ADDOBJ b = BOM DO {
    
        FOR ADDOBJ p = Product DO {   
            BOMProduct(p) <- b;
            skuProduct(p) <- sku;
        } 
        FORM BOM OBJECTS  b = b MANAGESESSION  DOCKEDMODAL;
    }
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM BOMs 'Спецификации'

    OBJECTS b=BOM

    PROPERTIES(b)  READONLY BACKGROUND backgroundBOM(b) inactiveBOM, productsBOM, nameBOM, numberBOM, seriesBOM,  dateBOM, timeBOM, fromDateBOM, toDateBOM, componentsBOM,  
                   overNettoNetWeightProductBOM, overNettoNetWeightComponentBOM, overBruttoNetWeightyComponentBOM, pricePercentBOM, noteBOM, stocksBOM
    PROPERTIES (b) ADDFORM, EDITFORM, copyBOM, deleteb=DELETE FORCE PANEL TOOLBAR
    PROPERTIES (b) READONLY FORCE PANEL createdNameUserBOM, createdTimeBOM, createdHostnameComputerBOM
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActiveBOM(b) 'F11'            
        FILTER 'Активные' isActiveBOM(b) OR (fromDateBOM(b) > currentDate()) 'F10' DEFAULT
        
    OBJECTS p = Product
    PROPERTIES(p) READONLY indexProduct, idBarcodeSkuProduct, idProduct SHOWIF showIDs(), nameSkuProduct, shortNameUOMProduct,
                  quantityProduct, overNettoNetWeightProduct, pricePercentProduct
    FILTERS       BOMProduct(p) == b

    OBJECTS c = Component
    PROPERTIES(c) BACKGROUND  backgroundComponent(c) READONLY indexComponent, idBarcodeSkuComponent, idComponent SHOWIF showIDs(), nameMaterialComponent, 
                  shortNameUOMComponent, nettoQuantityComponent, overNettoNetWeightComponent, wastageComponent, bruttoQuantityComponent, overBruttoNetWeightComponent,
                  technologiesInvoice, wastageTechnologiesComponent, overCurBruttoQuantityComponent, overCurBruttoNetWeightComponent                                                                                                                                                                    
                                                                                   
    FILTERS       BOMComponent(c) == b
    
    OBJECTS p1 = Sku
    PROPERTIES(p1) READONLY idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
    PROPERTIES     TODRAW p1 addSku(), editSku(p1), DELETE(p1) FORCE PANEL TOOLBAR 
    FILTERS        isProductGroupSku(p1)
    
    OBJECTS b1=BOM    
    PROPERTIES(b1) READONLY inactiveBOM, productsBOM, nameBOM, numberBOM, seriesBOM, componentsBOM, overNettoNetWeightProductBOM, overNettoNetWeightComponentBOM, 
                   overBruttoNetWeightyComponentBOM, pricePercentBOM, noteBOM, stocksBOM
    PROPERTIES(b1) EDITFORM
    PROPERTIES     addBOMSku(p1) TODRAW b1
    FILTERS        relationProductsSkuBOM(p1,b1)
          
    OBJECTS c1 = Component
    PROPERTIES(c1) BACKGROUND  backgroundComponent(c) READONLY indexComponent, idBarcodeSkuComponent, idComponent SHOWIF showIDs(), 
                   nameMaterialComponent, shortNameUOMComponent, nettoQuantityComponent, overNettoNetWeightComponent, wastageComponent, bruttoQuantityComponent, overBruttoNetWeightComponent,
                   technologiesInvoice, wastageTechnologiesComponent, overCurBruttoQuantityComponent, overCurBruttoNetWeightComponent 
    FILTERS        BOMComponent(c1) == b1   
    

    OBJECTS c2 = Sku
    PROPERTIES(c2) READONLY idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
    PROPERTIES     TODRAW c2 addSku(), editSku(c2), DELETE(c2) FORCE PANEL TOOLBAR  
    FILTERS        isComponentGroupSku(c2)                   
    OBJECTS b2=BOM    
    PROPERTIES(b2) READONLY inactiveBOM, productsBOM, nameBOM, numberBOM, seriesBOM, componentsBOM, overNettoNetWeightProductBOM, overNettoNetWeightComponentBOM, 
                   overBruttoNetWeightyComponentBOM, pricePercentBOM, noteBOM, stocksBOM
    PROPERTIES(b2) EDITFORM                
    FILTERS        relationComponentsSkuBOM(c2,b2)           
    
    OBJECTS p2 = Product
    PROPERTIES(p2) READONLY indexProduct, idBarcodeSkuProduct, idProduct SHOWIF showIDs(), nameSkuProduct, shortNameUOMProduct, 
                   quantityProduct, overNettoNetWeightProduct, pricePercentProduct
    FILTERS        BOMProduct(p2) == b2    
    
;

DESIGN BOMs {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deleteb) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = TABBED ;
            fill = 1;
            NEW bom {
                type = SPLITV;
                caption = 'Спецификация';
                
                MOVE b.box;
                NEW documentDetail {
                    type = TABBED;
                    fill = 1;
    
                    MOVE p.box {
                        caption = 'Изделие';
                        PROPERTY (idProduct(p)) { caption = 'Код изделия';}
                    }
                    MOVE c.box {
                        caption = 'Компонент';
                    }
    
                    NEW documentHistory {
                        caption = 'История';
    
                        MOVE b.created;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }                
            }                                 
            NEW product {
                fill =1;
                caption = 'Изделие';
                type = SPLITV;
                MOVE p1.box;
                NEW product1 {
                    fill = 1;
                    type = SPLITH;
                    MOVE b1.box;
                    MOVE c1.box;                    
                } 
            }  
            NEW component {
                fill =1;
                caption = 'Компонент';
                type = SPLITV;
                MOVE c2.box;
                NEW component1 {
                    fill = 1;
                    type = SPLITH;
                    MOVE b2.box;
                    MOVE p2.box {
                        PROPERTY (idProduct(p2)) { caption = 'Код изделия';}
                    };                    
                } 
            }                      
        }
        PROPERTY (idSku(p1)) { caption = 'Код изделия';}
        PROPERTY (idSku(c2)) { caption = 'Код компонента';}
    }
}

countAccessEmployeeStockBOM = GROUP SUM 1 IF accessCompanyEmployeeStock(employee, stock) AND inBOMStock(BOM, stock) BY employee, BOM PERSISTENT;

EXTEND FORM BOMs FILTERS countAccessEmployeeStockBOM(currentUser(), b);

copyBOMProductSku 'Копировать' = ACTION (sku) {
    copySku(sku);
    IF addedSku() THEN
        SEEK BOMs.p1 addedSku(); 
} EDITKEY 'F5' TOOLBAR;

EXTEND FORM BOMs PROPERTIES(p1) copyBOMProductSku;

copyBOMComponentSku 'Копировать' = ACTION (sku) {
    copySku(sku);
    IF addedSku() THEN
        SEEK BOMs.c2 addedSku(); 
} EDITKEY 'F5' TOOLBAR;

EXTEND FORM BOMs PROPERTIES(c2) copyBOMComponentSku;

FORM BOMsDialog 'Спецификации'

    OBJECTS b=BOM
    PROPERTIES(b)  READONLY BACKGROUND backgroundBOM(b) productsBOM, nameBOM, numberBOM, seriesBOM, dateBOM, timeBOM, fromDateBOM, toDateBOM, componentsBOM, 
                   overNettoNetWeightProductBOM, overNettoNetWeightComponentBOM, overBruttoNetWeightyComponentBOM, pricePercentBOM, noteBOM
    PROPERTIES (b) READONLY FORCE PANEL createdNameUserBOM, createdTimeBOM, createdHostnameComputerBOM
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActiveBOM(b) 'F11'            
        FILTER 'Активные' isActiveBOM(b) OR (fromDateBOM(b) > currentDate()) 'F10' DEFAULT
        
    OBJECTS p = Product
    PROPERTIES(p) READONLY indexProduct, idBarcodeSkuProduct, idProduct SHOWIF showIDs(), nameSkuProduct, shortNameUOMProduct, 
                  quantityProduct, overNettoNetWeightProduct, pricePercentProduct
    FILTERS       BOMProduct(p) == b

    OBJECTS c = Component                 
    PROPERTIES(c) BACKGROUND  backgroundComponent(c) READONLY indexComponent, idBarcodeSkuComponent, idComponent SHOWIF showIDs(), 
                   nameMaterialComponent, shortNameUOMComponent, nettoQuantityComponent, overNettoNetWeightComponent, wastageComponent, bruttoQuantityComponent, overBruttoNetWeightComponent,
                   technologiesInvoice, wastageTechnologiesComponent, overCurBruttoQuantityComponent, overCurBruttoNetWeightComponent                                                      
                  
    FILTERS       BOMComponent(c) == b
      
    DIALOG BOM OBJECT b
;

DESIGN BOMsDialog {
    main {
        preferredSize = (1024, 768);
        NEW bom BEFORE functions.box {
            fill = 1;
            type = SPLITV;
            
            MOVE b.box;
            NEW documentDetail {
                type = TABBED;
                fill = 1;

                MOVE p.box {
                    caption = 'Изделие';
                    PROPERTY (idProduct(p)) { caption = 'Код изделия';}
                }
                MOVE c.box {
                    caption = 'Компонент';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE b.created;
                }                
            }                
        }                                                              
    }
}

accessCurrentUserBOM = [ =GROUP SUM 1 IF accessCompanyEmployeeStock(currentUser(), s) AND inBOMStock(BOM,s) BY BOM](BOM) OR (BOM IS BOM AND NOT countStocksBOM(BOM)); 

EXTEND FORM BOMs 
    FILTERS accessCurrentUserBOM(b)
;
EXTEND FORM BOMsDialog 
    FILTERS accessCurrentUserBOM(b)
;

EXTEND FORM products 
    FILTERS accessCurrentUserBOM(BOMProduct(p))
;

EXTEND FORM components 
    FILTERS accessCurrentUserBOM(BOMComponent(c))

    FILTERGROUP active
        FILTER 'Активные' isActiveBOM(BOMComponent(c)) DEFAULT 
;
//-------------------------------- Комиссия для акта контрольной проработки ----------------------------------//
CLASS ManufacturingCommittee 'Комиссия производство' : Committee;

nameManufacturingCommittee 'Наименование' = DATA VARISTRING[150](ManufacturingCommittee);

nameCommittee(committee) += nameManufacturingCommittee(committee) IF committee IS ManufacturingCommittee;

FORM manufacturingCommittee 'Комиссия производство'
    OBJECTS c=ManufacturingCommittee FIXED PANEL
    PROPERTIES(c)      nameManufacturingCommittee

    TREE stockTree sg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = nameStockGroup(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = nameStock(ts)
    PROPERTIES(c, ts) inCommitteeStock FORCE GRID
    FILTERGROUP inactiveStock FILTER 'Активный' activeStock(ts) 'ctrl F10' DEFAULT
    FILTERS isParentStockGroupStock(sg, ts)
    ORDER BY tsTreeName


    OBJECTS e=Employee
    PROPERTIES(e)      READONLY nameContact, firstNameContact, lastNameContact, namePositionEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            countStockEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' inCommitteeEmployee(c, e) 'F10'
    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' inCommitteeStock(c, ts) 'F9'

    EDIT ManufacturingCommittee OBJECT c
;

DESIGN manufacturingCommittee {
    main {
        preferredSize = (1024, 768);

        NEW caseOne BEFORE e.box {
            type = SPLITH;
            fill = 1;
            caption = 'Отделы, для которых действуют комиссии';

            MOVE stockTree.tree.box {
                fill = 1;
            }
            MOVE ts.box {
                fill = 2;
            }
        }
    }
}

FORM manufacturingCommitteeDialog 'Комиссии производство'
    OBJECTS a=ManufacturingCommittee
    PROPERTIES(a)      READONLY nameManufacturingCommittee, nameEmployeeCommittee
    PROPERTIES(a)      ADDFORM, EDITFORM

    DIALOG ManufacturingCommittee OBJECT a
;

// ----------------- Акт контрольной проработки-------------------- //

actStudyOfCulinaryCommitteeBOM (BOM) = DATA ManufacturingCommittee(BOM);
nameActStudyOfCulinaryCommitteeBOM 'Комиссия для акта' (BOM) = nameManufacturingCommittee(actStudyOfCulinaryCommitteeBOM (BOM)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 40;
nameEmployeeCommitteeBOM 'Члены комиссии' (BOM)= nameEmployeeCommittee(actStudyOfCulinaryCommitteeBOM(BOM));

inCommitteeBOMEmployee (BOM, employee) = inCommitteeEmployee(actStudyOfCulinaryCommitteeBOM (BOM), employee);
commonNameEmployeeCommitteeBOM 'Члены комиссии' (BOM) = namePositionEmployeeCommittee(actStudyOfCulinaryCommitteeBOM (BOM));

companyBOM (BOM) = DATA LegalEntity(BOM);
nameCompanyBOM 'Компания' (BOM) = nameLegalEntity(companyBOM(BOM)) IN documentPrm;

actQuantityBOM 'Кол-во для акта' = DATA NUMERIC[16,5] (BOM);
actStockBOM  = DATA Stock (BOM);
nameActStockBOM 'Склад для акта' (b) = nameStock(actStockBOM(b));


CONSTRAINT  companyBOM(BOM) AND NOT isCompanyLegalEntity(companyBOM(BOM)) CHECKED BY companyBOM
    MESSAGE 'Для спецификации выбрана организация, которая не является компанией';
CONSTRAINT  actStockBOM(BOM) AND NOT isCompanyStock(actStockBOM(BOM)) CHECKED BY actStockBOM
    MESSAGE 'Для спецификации выбран склад, который не является складом компании';        
     

EXTEND FORM BOM
    PROPERTIES(b) actQuantityBOM, nameActStockBOM, nameActStudyOfCulinaryCommitteeBOM, nameCompanyBOM

    OBJECTS e=Employee
    PROPERTIES(e) READONLY nameContact, namePositionEmployee
    FILTERS       inCommitteeBOMEmployee(b,e)
;
DESIGN BOM {

    specification.box {
        NEW row {
            type = CONTAINERV;
            caption = 'Акт контрольной проработки';
            NEW row1{
                caption = 'Акт';
                type = CONTAINERH;
                MOVE PROPERTY(actQuantityBOM(b));
                MOVE PROPERTY(nameActStockBOM(b));
                MOVE PROPERTY(nameActStudyOfCulinaryCommitteeBOM(b));
            }
            MOVE e.box {caption = 'Сотрудники комиссии';}
        }
    }
}

// ----- Рекурсивный расчет потребностей брутто ---------- //

// кол-во требуемых материалов материалов
// без учета технологий
bruttoQuantityBOMMaterial(BOM, material) = GROUP SUM bruttoQuantityComponent(component) BY BOMComponent(component), materialComponent(component);
// с учетом технологий
bruttoQuantityBOMMaterialDate (BOM, material, date) = GROUP SUM bruttoQuantityComponentDate(component, date) BY BOMComponent(component), materialComponent(component), date;

bruttoQuantityBOMSkuDate(BOM, sku, date) = bruttoQuantityBOMMaterialDate(BOM, sku, date) IF sku IS Sku;

bruttoQuantityBOMBOM (parent, child) = GROUP MAX bruttoQuantityBOMMaterial(BOM, material) / quantityProduct(material) BY BOM, BOMProduct(material);

TABLE BOMBOM(BOM, BOM);
recBruttoQuantityBOMBOMResult (parent, child, q) = RECURSION NUMERIC[20,11](1.0) IF q == NUMERIC[20,11](1.0) AND child == (parent AS BOM) STEP NUMERIC[20,11](1.0) IF q == $q * bruttoQuantityBOMBOM($child, child) CYCLES YES;
recBruttoQuantityBOMBOM (parent, child) = GROUP SUM recBruttoQuantityBOMBOMResult(parent, child, q) * q BY parent, child PERSISTENT;
//recBruttoQuantityBOMBOMDate (parent, child, date) = 1.0 IF (parent AS BOM) == (child AS BOM) AND date IS DATE;

recBruttoQuantityBOMSkuDate (BOM, sku, date) = GROUP SUM recBruttoQuantityBOMBOM(BOM, childBOM) * bruttoQuantityBOMSkuDate(childBOM, sku, date) BY BOM, sku, date; //](BOM, sku);

recBruttoQuantityBOMComponentDate (BOM, sku, date) = GROUP SUM recBruttoQuantityBOMBOM(BOM, BOMComponent(component)) * bruttoQuantityComponentDate(component, date) BY BOM, component, date; //](BOM, sku);

recBruttoNodeQuantityBOMSkuDate (BOM, sku, date) = GROUP SUM recBruttoQuantityBOMBOM(BOM, childBOM) * bruttoQuantityBOMMaterialDate(childBOM, material, date) BY BOM, skuMaterial(material), date; //](BOM, sku);

// Расчет цены
priceCoeffBOMBOM(parent, child) = GROUP SUM bruttoQuantityBOMMaterial(BOM, material) * priceCoeffProduct(material) / quantityProduct(material) BY BOM, BOMProduct(material);

recPriceCoeffBOMBOMResult (parent, child, q) = RECURSION NUMERIC[20,11](1.0) IF q == NUMERIC[20,11](1.0) AND child == (parent AS BOM) STEP NUMERIC[20,11](1.0) IF q == $q * priceCoeffBOMBOM($child, child) CYCLES YES;
recPriceCoeffBOMBOM (parent, child) = GROUP SUM recPriceCoeffBOMBOMResult(parent, child, q) * q BY parent, child PERSISTENT;
//recPriceCoeffBOMBOMDate (parent, child, date) = 1.0 IF (parent AS BOM) == (child AS BOM) AND date IS DATE;

//
recPriceCoeffBOMSkuDate (BOM, sku, date) = GROUP SUM recPriceCoeffBOMBOM(BOM, childBOM) * bruttoQuantityBOMMaterialDate(childBOM, material, date) BY BOM, skuMaterial(material), date;
//recPricePercentProductSkuDate (product, sku, date) = recPriceCoeffBOMSkuDate (BOMProduct(product), sku, date) * pricePercentProduct(product);

// ----- Рекурсивный расчет потребностей нетто ---------- //

nettoQuantityBOMMaterial 'Кол-во нетто компонентов в документе' (BOM, material) = GROUP SUM nettoQuantityComponent(component) BY BOMComponent(component), materialComponent(component);
nettoQuantityBOMSku(BOM, sku) = nettoQuantityBOMMaterial(BOM, sku) IF sku IS Sku;

nettoQuantityBOMBOM (parent, child) = GROUP MAX nettoQuantityBOMMaterial(BOM, material) / quantityProduct(material) BY BOM, BOMProduct(material);

recNettoQuantityBOMBOMResult (parent, child, q) = RECURSION NUMERIC[20,11](1.0) IF q == NUMERIC[20,11](1.0) AND child == (parent AS BOM) STEP NUMERIC[20,11](1.0) IF q == $q * nettoQuantityBOMBOM($child, child) CYCLES YES;
recNettoQuantityBOMBOM (parent, child) = GROUP SUM recNettoQuantityBOMBOMResult(parent, child, q) * q BY parent, child PERSISTENT;

recNettoQuantityBOMSku (BOM, sku) = GROUP SUM recNettoQuantityBOMBOM(BOM, childBOM) * nettoQuantityBOMSku(childBOM, sku) BY BOM, sku; //](BOM, sku);

recNettoNodeQuantityBOMSku (BOM, sku) = GROUP SUM recNettoQuantityBOMBOM(BOM, childBOM) * nettoQuantityBOMMaterial(childBOM, material) BY BOM, skuMaterial(material); //](BOM, sku);

//recNettoNodeQuantityBOMSku (BOM, sku) =  DATA NUMERIC[16,5] (BOM, Sku);   // пока сделал так, потому что очень тормозит.

//-------------------- Подбор компонентов -----------------//
componentBOMMaterial (BOM,material) =  GROUP MAX component
    BY BOMComponent(component), materialComponent(component);
   
changeQuantityBOMMaterial = ACTION (BOM,material) {
    REQUEST NUMERIC[14,3] INPUT;
    IF componentBOMMaterial(BOM,material) THEN {
        IF requestedNumeric() THEN {
            nettoQuantityComponent(detail) <- requestedNumeric() WHERE detail == componentBOMMaterial(BOM,material);
            bruttoQuantityComponent(detail) <- requestedNumeric() WHERE detail == componentBOMMaterial(BOM,material);
        } ELSE {
            DELETE detail WHERE detail == componentBOMMaterial(BOM,material);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = Component DO {
                BOMComponent(d) <- BOM;
                materialComponent(d) <- material;
                nettoQuantityComponent (d) <- requestedNumeric();
                bruttoQuantityComponent (d) <- requestedNumeric();
            }
        }
    }
}
componentsStockBOM = DATA LOCAL Stock(BOM);
nameComponentsStockBOM 'Склад' = nameStock(componentsStockBOM(BOM));
prevCurrentBalanceBOMMaterial 'Остаток' (BOM,material) = prevCurrentBalanceSkuStock(material, componentsStockBOM(BOM));

CONSTRAINT componentsStockBOM(b) AND NOT isCompanyStock(componentsStockBOM(b))
    CHECKED BY componentsStockBOM MESSAGE 'Выбран склад для Спецификации, которые не принадлежит компании';

EXTEND FORM BOM

    PROPERTIES nameComponentsStockBOM(b)

    TREE skuTree g = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(g), nameSkuGroup(g)
    ORDER BY nameSkuGroup(g)
    FILTERGROUP inactive1 FILTER 'Активные' activeSkuGroup(g) 'F5' DEFAULT
    ORDER BY orderSkuGroup(g)
    
    OBJECTS m = Material
    PROPERTIES(m) READONLY idMaterial SHOWIF showIDs(), nameMaterial, shortNameUOMMaterial 
    PROPERTIES nettoQuantityBOMMaterial(b,m) ON CHANGE changeQuantityBOMMaterial(b,m)
    
    PROPERTIES(b,m) READONLY FORCE GRID prevCurrentBalanceBOMMaterial     

    FILTERS isParentSkuGroupMaterial(g, m)
    ORDER BY nameMaterial(m)    
  
    FILTERGROUP filters
        FILTER 'Изделие' m IS Product 'F11'
        FILTER 'Sku' m IS Sku 'F10'
                    
    FILTERGROUP filter
        FILTER 'С остатком (склад)' prevCurrentBalanceBOMMaterial(b,m) 'F10' DEFAULT 
        FILTER 'В документе (нетто)' nettoQuantityBOMMaterial(b,m) 'F9'
;

DESIGN BOM{
   
    specification.box {
        NEW tabContainerComponent AFTER p.box {
            caption = 'Компонент';
            type = TABBED;
            MOVE c.box {caption = 'Компонент';}
            NEW selectPane {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                
                MOVE skuTree.tree.box { caption = 'Группы'; fill = 1;}                
                NEW selectPane21 {
                    fill = 2;
                    type = CONTAINERV;
                    NEW selectPane1 {
                        caption = 'Выбор склада для отображения остатков';
                        MOVE PROPERTY (nameComponentsStockBOM(b));
                    }
                    MOVE m.box;
                }
                        
            }            
        }        
    }
}


NAVIGATOR {
    manufacturingMasterData {
        ADD BOMs;
        ADD technologies;
        ADD manufacturingCommitteeDialog;
    }
}