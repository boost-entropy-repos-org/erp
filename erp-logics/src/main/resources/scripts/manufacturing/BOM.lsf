MODULE  BOM;

REQUIRE EmployeeStock,
        Numerator,
        Barcode,
        Document,
        Utils,
        Manufacturing,
        Integration;


// ---------------- Материалы ------------------- //
CLASS ABSTRACT Material 'Материал';
TABLE material(Material);

nameMaterial 'Наименование' (material) = ABSTRACT VARISTRING[255] (Material) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80;

UOMMaterial (material) = ABSTRACT UOM (Material) PERSISTENT;
shortNameUOMMaterial 'Ед. изм.' (material) = shortNameUOM(UOMMaterial(material)) IN base;

editMaterial 'Редактировать' = ABSTRACT ACTION LIST (Material) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
addMaterial 'Добавить' = ABSTRACT ACTION LIST () IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

skuMaterial (material) = ABSTRACT Sku (Material) PERSISTENT;

skuGroupMaterial (material) = skuGroupSku(skuMaterial(material)) PERSISTENT;
isParentSkuGroupMaterial (skuGroup, material) = isParentSkuGroupSkuGroup(skuGroupMaterial(material), skuGroup);

FORM materials 'Материалы'

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sg) DEFAULT

    OBJECTS m = Material
    PROPERTIES(m) READONLY nameMaterial, shortNameUOMMaterial, objectClassName
    PROPERTIES() addMaterial TODRAW m
    PROPERTIES(m) editMaterial
    FILTERS isParentSkuGroupMaterial(sg, m)
    ORDER BY nameMaterial

    DIALOG Material OBJECT m
;

DESIGN materials FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            ADD skuTree.tree.box {
                caption = 'Группы Материалов';
            }

            ADD m.box {
                fill = 2;
            }
        }

        ADD functions.box;
    }
}


// --------------- Товары ----------------- //
EXTEND CLASS Sku : Material;

nameMaterial(material) += nameSku(material);
UOMMaterial(material) += UOMSku(material);

editMaterial(sku) += editSku(sku);
addMaterial () += addSku();

skuMaterial(material) += material AS Sku;

// -----------  Технологии -------------- //
CLASS Technology 'Технология';
TABLE technology (Technology);

nameTechnology 'Наименование' = DATA VARISTRING[50](Technology);

TABLE technologyMaterialDate (Technology, Material, DATE);
@defineHistorizable(wastageTechnologyMaterial, '% потерь', NUMERIC[8,3], technology, nameTechnology, material, nameMaterial, base);

FORM technology 'Технология'

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES valDt = OBJVALUE(dt) BACKGROUND dateDiffersCurrent(dt)

    OBJECTS t=Technology FIXED PANEL
    PROPERTIES(t) nameTechnology

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sg) DEFAULT

    OBJECTS m = Material
    PROPERTIES(m) nameMaterial, shortNameUOMMaterial
    PROPERTIES overWastageTechnologyMaterialDate(t,m,dt)

    FILTERS isParentSkuGroupMaterial(sg, m)
    ORDER BY nameMaterial

    FILTERGROUP filters
        FILTER 'С % потерь' 'F9' wastageTechnologyMaterialDate(t,m,dt)

    OBJECTS d=DATE
    PROPERTIES  READONLY OBJVALUE(d), dataWastageTechnologyMaterialDate(t,m,d)
    FILTERS dataWastageTechnologyMaterialDate(t,m,d)

    EDIT Technology OBJECT t
;

DESIGN technology FROM DEFAULT{
    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            ADD skuTree.tree.box {caption = 'Группа материалов'; fill = 1; }
            NEW row {
                fill = 1;
                type = SPLITV;
                ADD m.box {
                    fill = 3;
                    caption = 'Материал';
                }
                ADD d.box {
                    fill = 1;
                    caption = 'История изменений';
                }
            }
        }
        NEW headerBox BEFORE specification.box {
            type = CONTAINERH;
            ADD t.box { type = CONTAINERH;}
            ADD dt.box {type = CONTAINERH;}
        }
    }
}

FORM yearFromTo 'Год'

    OBJECTS y = INTEGER FIXED PANEL
    PROPERTIES valY = OBJVALUE(y)
;

DESIGN yearFromTo FROM DEFAULT{
    main {
        NEW year{
            ADD PROPERTY (valY) { caption = 'Укажите на какой год скопировать значения (4 цифры)'; panelLabelAbove = TRUE; font = 'bold 72'; minimumCharWidth = 4; preferredCharWidth = 4; maximumCharWidth = 4; }
        }
        ADD functions.box;
    }
}


fillWastageTechnology 'Заполнить технологии на другой год' = ACTION (technology) {

    FORM yearFromTo MODAL;
    IF formResult() == FormResult.ok THEN {

        LOCAL newYear = INTEGER();
        ASSIGN newYear() <- chosenInteger('y');

        FOR dataWastageTechnologyMaterialDate(technology, material, dateFrom) DO {

            IF 1 == 2 THEN
                BREAK;

            IF yearInDate(dateFrom) == (newYear() - 1) THEN {
                ASSIGN dataWastageTechnologyMaterialDate(technology, material, dateTo) <- dataWastageTechnologyMaterialDate(technology, material, dateFrom) WHERE dateTo == incrementYearDate(dateFrom);
            }

        }
        EXEC apply();
    }
} TOOLBAR;

FORM technologies 'Технологии'

    OBJECTS t=Technology
    PROPERTIES(t)  READONLY nameTechnology

    PROPERTIES (t) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    PROPERTIES (t) fillWastageTechnology

    OBJECTS m=Material
    PROPERTIES     READONLY nameMaterial(m), shortNameUOMMaterial(m), wastageTechnologyMaterial(t,m)
    ORDER BY nameMaterial

    FILTERS        wastageTechnologyMaterial(t,m)

    DIALOG Technology OBJECT t
;

DESIGN technologies FROM DEFAULT{
    main {
        ADD t.box;
        ADD m.box { caption = 'Материалы с % потерь на текущую дату';}
        ADD functions.box;
    }
}

// ---------------------- BOM'ы ----------------------

CLASS BOM 'Спецификация';
TABLE BOM (BOM);

nameBOM 'Наименование' = DATA VARISTRING[100](BOM);

@defineDocumentHeaderCreated(BOM);
@defineDocumentHeaderNote(BOM);

@defineNumbered(BOM);
@defineNumeratedDefault(BOM, 'Спецификации', 'СП');

descriptionBOM 'Название спецификации' (BOM) =
    [FORMULA VARSTRING[200]  ' CAST($1 AS TEXT) || \' / \' || CAST($2 AS TEXT) || \' № \' || CAST($3 AS TEXT)'](
    'Спецификация', nameBOM(BOM), seriesNumberBOM(BOM)) IF BOM IS BOM MINCHARWIDTH 30 PREFCHARWIDTH 50;

// ------------- Изделия ----------- //
CLASS Product 'Изделие' : Material;
TABLE product (Product);

EXTEND FORM materials

    FILTERGROUP filters
        FILTER 'Изделие' 'F11' m IS Product
        FILTER 'Sku' 'F10' m IS Sku
;

EXTEND FORM technology

    FILTERGROUP filters
        FILTER 'Изделие' 'F11' m IS Product
        FILTER 'Sku' 'F10' m IS Sku
;

skuProduct = DATA Sku (Product);
nameSkuProduct 'SKU' (product) = nameSku(skuProduct(product)) IN recognize;
idBarcodeSkuProduct 'Штрих-код' (product)= idBarcodeSku(skuProduct(product));

UOMProduct = DATA UOM (Product);
shortNameUOMProduct 'Ед.изм.' (product) = shortNameUOM(UOMProduct(product)) IN recognize;
UOMProduct(product) <- UOMSku(skuProduct(product)) WHEN CHANGED (skuProduct(product));


@defineDocumentRelation (BOM, Product, ' (изделие)');
descriptionProduct 'Название документа' (product) = descriptionBOM(BOMProduct(product));

@defineDocumentDetailIndex (BOM, Product);
@defineDocumentDetailActionsCustom (BOM, Product);

@defineDocumentDetailQuantityCustomPrefix (product, , );

@defineDocumentHeaderQuantityCustomPrefix (BOM, product, , ' (изделие)');

pricePercentProduct 'Удельный вес цены,%' = DATA NUMERIC[8,3] (Product);
pricePercentProduct(product) <- 100.000 WHEN SET (product IS Product);
priceCoeffProduct (product) = pricePercentProduct(product) / 100 PERSISTENT;

pricePercentBOM 'Удельный вес цен, %' = GROUP SUM pricePercentProduct(product) BY BOMProduct(product) PERSISTENT IN documentSumGroup;

nameMaterial(material) += [FORMULA VARSTRING[255]  ' CAST($1 AS TEXT) || \' / \' ||  CAST($2 AS TEXT)'](
                                      nameBOM(BOMProduct(material)),
                                      nameSkuProduct(material));

UOMMaterial(material) += UOMSku(skuProduct(material));
skuMaterial (material) += skuProduct(material);

FORM products 'Изделия'
    OBJECTS p=Product
    PROPERTIES(p) READONLY descriptionProduct, indexProduct, nameSkuProduct, shortNameUOMProduct, quantityProduct
    PROPERTIES (p) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    DIALOG Product OBJECT p
;


// ------------- Компоненты ----------- //
CLASS Component 'Компонент';
TABLE component (Component);

//nameComponent 'Наименование' = DATA VARISTRING[100](Component);

@defineDocumentRelation (BOM, Component, ' (компонент)');
descriptionComponent 'Название документа' (component)= descriptionBOM(BOMComponent(component));

@defineDocumentDetailIndex (BOM, Component);
@defineDocumentDetailActionsCustom (BOM, Component);

materialComponent = DATA Material (Component);
nameMaterialComponent 'Материал' (component) = nameMaterial(materialComponent(component));
idBarcodeSkuComponent 'Штрих-код' (component)= idBarcodeSku(materialComponent(component));

componentsBOM 'Компоненты' (BOM) = GROUP CONCAT VARSTRING[255](nameMaterialComponent(component)), ', '
                                       BY BOMComponent(component)
                                       ORDER indexComponent(component) MINCHARWIDTH 100 PERSISTENT;

nameComponent 'Компонент' (component) = [FORMULA VARSTRING[255]  ' CAST($1 AS TEXT) || \' / \' ||  CAST($2 AS TEXT)'](
                                      nameBOM(BOMComponent(component)),
                                      nameMaterialComponent(component)) PERSISTENT;

UOMComponent = DATA UOM (Component);
shortNameUOMComponent 'Ед. изм.' (component) = shortNameUOM(UOMComponent(component));
UOMComponent(component) <- UOMMaterial(materialComponent(component)) WHEN CHANGED (materialComponent(component));

// Кол-во нетто
@defineDocumentDetailQuantityCustomPrefix (component, netto, ' (нетто)');
@defineDocumentHeaderQuantityCustomPrefix (BOM, component, netto, ' (нетто компонент)');

// Технология
technologyComponent = DATA Technology (Component);
nameTechnologyComponent 'Технология' (component) = nameTechnology(technologyComponent(component));

inTechnologyMaterial 'Связь' (technology, material) = GROUP SUM 1 IF dataWastageTechnologyMaterialDate(technology, material, date) BY technology, material;

CONSTRAINT technologyComponent(component) AND NOT inTechnologyMaterial(technologyComponent(component), materialComponent(component))
    CHECKED BY technologyComponent MESSAGE 'Для компонента выбрана технология, у которой нет значения % потерь для SKU';

// % Потерь
wastageComponent '% потерь'= DATA NUMERIC[8,3] (Component);
changeWastageComponent = ACTION (component) {
    REQUEST NUMERIC[8,3] INPUT;

    IF requestedNumeric() IF NOT technologyComponent(component) THEN {
        ASSIGN wastageComponent(component) <- requestedNumeric();
    } ELSE {
        ASSIGN wastageComponent(component) <- NULL;
    }
}
backgroundWastageComponent 'Цвет' (component) = RGB(229,229,229) IF technologyComponent(component);

wastageComponentDate '% потерь' (component, date) = IF technologyComponent(component) THEN wastageTechnologyMaterialDate(technologyComponent(component),materialComponent(component), date)
                                                    ELSE wastageComponent(component) IF date IS DATE;

curWastageComponent '% потерь' (component) =  wastageComponentDate(component, currentDate());

overCurWastageComponent '% потерь' (component) =  OVERRIDE wastageTechnologyMaterialDate(technologyComponent(component),materialComponent(component), currentDate()),
                                                           wastageComponent(component);

// Кол-во брутто

@defineDocumentDetailQuantityCustomPrefix (component, brutto, ' (брутто)');
@defineDocumentHeaderQuantityCustomPrefix (BOM, component, brutto, ' (брутто компонент)');

bruttoQuantityComponent(component) <- nettoQuantityComponent(component)/(1 - (wastageComponent(component)/100)) WHEN CHANGED (wastageComponent(component)) OR
                                                                                                                     CHANGED (nettoQuantityComponent(component));
changeBruttoQuantityComponent = ACTION (component) {
    REQUEST NUMERIC[14,3] INPUT;

    IF requestedNumeric() IF NOT technologyComponent(component) THEN {
        ASSIGN bruttoQuantityComponent(component) <- requestedNumeric();
    } ELSE {
        ASSIGN bruttoQuantityComponent(component) <- NULL;
    }
}
backgroundBruttoQuantityComponent 'Цвет' (component) = RGB(229,229,229) IF technologyComponent(component);

bruttoQuantityComponentDate(component, date) = IF technologyComponent(component) THEN (nettoQuantityComponent(component)/(1 - (wastageTechnologyMaterialDate(technologyComponent(component), materialComponent(component), date)/100)))
                                                                                 ELSE bruttoQuantityComponent(component) IF date IS DATE;

curBruttoQuantityComponent 'Кол-во (брутто)' (component) =  bruttoQuantityComponentDate(component, currentDate());

overCurBruttoQuantityComponent 'Кол-во (брутто)' (component) =
    OVERRIDE (nettoQuantityComponent(component)/(1 - (wastageTechnologyMaterialDate(technologyComponent(component),materialComponent(component), currentDate())/100))),
             bruttoQuantityComponent(component);

FORM components 'Компоненты'
    OBJECTS c=Component
    PROPERTIES(c) READONLY descriptionComponent, indexComponent, nameMaterialComponent, shortNameUOMComponent, nettoQuantityComponent
    PROPERTIES (c) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    DIALOG Component OBJECT c
;

//------------------------------- Формы -------------------------------------//
FORM BOM 'Спецификация'

    OBJECTS b=BOM FIXED PANEL
//    OBJECTS dt = DATE FIXED PANEL

    PROPERTIES(b) nameBOM, nameNumeratorBOM, numberBOM, seriesBOM, noteBOM, objectClassName
    PROPERTIES(b) READONLY quantityProductBOM, nettoQuantityComponentBOM, pricePercentBOM//, bruttoQuantityComponentBOM
    OBJECTS p = Product
    PROPERTIES(p) indexProduct, idBarcodeSkuProduct,nameSkuProduct, shortNameUOMProduct, quantityProduct, pricePercentProduct

    PROPERTIES(p) ADDOBJ, deletep=DELETESESSION
    PROPERTIES(b) TODRAW p deleteProductBOM
    FILTERS       BOMProduct(p) == b

    OBJECTS c = Component
    PROPERTIES(c) indexComponent, idBarcodeSkuComponent, nameMaterialComponent, shortNameUOMComponent, nameTechnologyComponent, nettoQuantityComponent,
                  overCurWastageComponent ON CHANGE changeWastageComponent(c) BACKGROUND backgroundWastageComponent(c) READONLYIF technologyComponent(c),
                  overCurBruttoQuantityComponent ON CHANGE changeBruttoQuantityComponent(c) BACKGROUND backgroundBruttoQuantityComponent(c) READONLYIF technologyComponent(c)

    PROPERTIES(c) ADDOBJ, deletec=DELETESESSION
    PROPERTIES(b) TODRAW c deleteComponentBOM
    FILTERS       BOMComponent(c) == BOMProduct(p)//b

    EDIT BOM OBJECT b
;

DESIGN BOM FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            fill = 1;
            ADD p.box {caption = 'Изделие';}
            ADD c.box {caption = 'Компонент';}
        }

        ADD b.box BEFORE specification.box {
            type = CONTAINERH;
            NEW headerRow1 {
                type = CONTAINERV;

                NEW headerRow11 {
                    caption = 'Шапка';
                    type = CONTAINERH;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameBOM) { preferredCharWidth = 20; }
                    ADD PROPERTY(nameNumeratorBOM);
                    ADD PROPERTY(numberBOM);
                    ADD PROPERTY(seriesBOM);
                }
                ADD b.documentPrmGroup {
                    type = CONTAINERH;
                }
                NEW kitchen {
                    caption = 'Кухня';
                    type = CONTAINERH;
                }

            }
            ADD b.documentSumGroup {
                columns = 1;
            }
        }
    }
}
copyBOM 'Копировать' = ACTION (BOM) NEWSESSION {
    FOR ADDOBJ b = BOM DO {

        ASSIGN noteBOM(b) <- noteBOM(BOM);
        FOR BOMProduct(product) == BOM ADDOBJ p=Product DO {
            ASSIGN BOMProduct(p) <- b;
            ASSIGN skuProduct(p) <- skuProduct(product);
            ASSIGN quantityProduct(p) <- quantityProduct(product);
            ASSIGN pricePercentProduct(p) <- pricePercentProduct(product);
        }

        FOR BOMComponent(component) == BOM ADDOBJ c=Component DO {
            ASSIGN BOMComponent(c) <- b;
            ASSIGN materialComponent(c) <- materialComponent(component);
            ASSIGN nettoQuantityComponent(c) <- nettoQuantityComponent(component);
            ASSIGN technologyComponent(c) <- technologyComponent(component);
            ASSIGN bruttoQuantityComponent(c) <- bruttoQuantityComponent(component);
            ASSIGN wastageComponent(c) <- wastageComponent(component);
        }

        FORM BOM OBJECTS b = b MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

FORM BOMs 'Спецификации'

    OBJECTS b=BOM

    PROPERTIES(b) READONLY nameBOM, numberBOM, seriesBOM, quantityProductBOM, nettoQuantityComponentBOM, pricePercentBOM, noteBOM, objectClassName
    PROPERTIES (b) ADDFORM, EDITFORM, copyBOM, deleteb=DELETE FORCE PANEL TOOLBAR
    PROPERTIES (b) READONLY FORCE PANEL createdNameUserBOM, createdTimeBOM, createdHostnameComputerBOM

    OBJECTS p = Product
    PROPERTIES(p) READONLY indexProduct, idBarcodeSkuProduct, nameSkuProduct, shortNameUOMProduct, quantityProduct, pricePercentProduct
    FILTERS       BOMProduct(p) == b

    OBJECTS c = Component
    PROPERTIES(c) READONLY indexComponent, idBarcodeSkuComponent, nameMaterialComponent, shortNameUOMComponent, nameTechnologyComponent, nettoQuantityComponent,
                  overCurWastageComponent, overCurBruttoQuantityComponent
    FILTERS       BOMComponent(c) == b
;

DESIGN BOMs FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deleteb) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            fill = 1;

            ADD b.box;

            NEW documentDetail {
                type = TABBED;
                fill = 1;

                ADD p.box {
                    caption = 'Изделие';
                }
                ADD c.box {
                    caption = 'Компонент';
                }

                NEW documentHistory {
                    caption = 'История';

                    ADD b.createdGroup;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
}

//-------------------------------- Комиссия для акта контрольной проработки ----------------------------------//
CLASS ActStudyOfCulinaryCommittee 'Комиссия для акта контрольной проработки продукции' : Committee;

nameActStudyOfCulinaryCommittee 'Наименование' = DATA VARISTRING[150](ActStudyOfCulinaryCommittee);

nameCommittee(committee) += nameActStudyOfCulinaryCommittee(committee) IF committee IS ActStudyOfCulinaryCommittee;

FORM actStudyOfCulinaryCommittee 'Комиссия для акта контрольной проработки продукции'
    OBJECTS c=ActStudyOfCulinaryCommittee FIXED PANEL
    PROPERTIES(c)      nameActStudyOfCulinaryCommittee

    TREE stockTree sg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = nameStockGroup(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = nameStock(ts)
    PROPERTIES(c, ts) inCommitteeStock FORCE GRID

    FILTERS isParentStockGroupStock(sg, ts)
    ORDER BY tsTreeName


    OBJECTS e=Employee
    PROPERTIES(e)      READONLY nameContact, firstNameContact, lastNameContact, namePositionEmployee
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    PROPERTIES(c, e)   inCommitteeEmployee
    FILTERS            countStockEmployeeCommittee (e, c)
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' 'F10' inCommitteeEmployee(c, e)
    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeStock(c, ts)

    EDIT ActStudyOfCulinaryCommittee OBJECT c
;

DESIGN actStudyOfCulinaryCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW caseOne BEFORE e.box {
            type = SPLITH;
            fill = 1;
            caption = 'Отделы, для которых действуют комиссии';

            ADD stockTree.tree.box {
                fill = 1;
            }
            ADD ts.box {
                fill = 2;
            }
        }
    }
}

FORM actStudyOfCulinaryCommittees 'Комиссии для акта контрольной проработки продукции'
    OBJECTS a=ActStudyOfCulinaryCommittee
    PROPERTIES(a)      READONLY nameActStudyOfCulinaryCommittee, nameEmployeeCommittee
    PROPERTIES(a)      ADDFORM, EDITFORM

    DIALOG ActStudyOfCulinaryCommittee OBJECT a
;

// ----------------- Акт контрольной проработки-------------------- //

actStudyOfCulinaryCommitteeBOM (BOM) = DATA ActStudyOfCulinaryCommittee(BOM);
nameActStudyOfCulinaryCommitteeBOM 'Комиссия для акта контрольной проработки продукции' (BOM) = nameActStudyOfCulinaryCommittee(actStudyOfCulinaryCommitteeBOM (BOM)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
nameEmployeeCommitteeBOM 'Члены комиссии' (BOM)= nameEmployeeCommittee(actStudyOfCulinaryCommitteeBOM(BOM));

inCommitteeBOMEmployee (BOM, employee) = inCommitteeEmployee(actStudyOfCulinaryCommitteeBOM (BOM), employee);
commonNameEmployeeCommitteeBOM 'Члены комиссии' (BOM) = namePositionEmployeeCommittee(actStudyOfCulinaryCommitteeBOM (BOM));

companyBOM (BOM) = DATA LegalEntity(BOM);
nameCompanyBOM 'Компания' (BOM) = nameLegalEntity(companyBOM(BOM));

CONSTRAINT  companyBOM(BOM) AND NOT isCompanyLegalEntity(companyBOM (BOM)) CHECKED BY companyBOM
    MESSAGE 'Для спецификации выбрано организация, которая не является компанией';

EXTEND FORM BOM
    PROPERTIES(b) nameActStudyOfCulinaryCommitteeBOM, nameCompanyBOM

    OBJECTS e=Employee
    PROPERTIES(e) READONLY nameContact, namePositionEmployee
    FILTERS       inCommitteeBOMEmployee(b,e)
;
EXTEND DESIGN BOM {

    specification.box {
        NEW row {
            type = CONTAINERV;
            caption = 'Акт контрольной проработки';
            NEW row1{
                caption = 'Акт';
                type = CONTAINERH;
                ADD PROPERTY(nameCompanyBOM);
                ADD PROPERTY(nameActStudyOfCulinaryCommitteeBOM);
            }
            ADD e.box {caption = 'Сотрудники комиссии';}
        }
    }
}

// ----- Рекурсивный расчет потребностей брутто ---------- //

// кол-во требуемых материалов материалов
bruttoQuantityBOMMaterialDate (BOM, material, date) = GROUP SUM bruttoQuantityComponentDate(component, date) BY BOMComponent(component), materialComponent(component), date;
bruttoQuantityBOMSkuDate(BOM, sku, date) = bruttoQuantityBOMMaterialDate(BOM, sku, date) IF sku IS Sku;

bruttoQuantityBOMBOMDate (parent, child, date) = GROUP MAX bruttoQuantityBOMMaterialDate(BOM, material, date) / quantityProduct(material) BY BOM, BOMProduct(material), date;

recBruttoQuantityBOMBOMDateResult (parent, child, date, q) = RECURSION 1.00000000000 IF q == 1.00000000000 AND child == (parent AS BOM) AND date IS DATE STEP 1.00000000000 IF q == $q * bruttoQuantityBOMBOMDate($child, child, date) CYCLES YES;
recBruttoQuantityBOMBOMDate (parent, child, date) = GROUP SUM recBruttoQuantityBOMBOMDateResult(parent, child, date, q) * q BY parent, child, date;
//recBruttoQuantityBOMBOMDate (parent, child, date) = 1.0 IF (parent AS BOM) == (child AS BOM) AND date IS DATE;

recBruttoQuantityBOMSkuDate (BOM, sku, date) = GROUP SUM recBruttoQuantityBOMBOMDate(BOM, childBOM, date) * bruttoQuantityBOMSkuDate(childBOM, sku, date) BY BOM, sku, date; //](BOM, sku);

recBruttoNodeQuantityBOMSkuDate (BOM, sku, date) = GROUP SUM recBruttoQuantityBOMBOMDate(BOM, childBOM, date) * bruttoQuantityBOMMaterialDate(childBOM, material, date) BY BOM, skuMaterial(material), date; //](BOM, sku);

// Расчет цены
priceCoeffBOMBOMDate(parent, child, date) = GROUP SUM bruttoQuantityBOMMaterialDate(BOM, material, date) * priceCoeffProduct(material) / quantityProduct(material) BY BOM, BOMProduct(material), date;

recPriceCoeffBOMBOMDateResult (parent, child, date, q) = RECURSION 1.00000000000 IF q == 1.00000000000 AND child == (parent AS BOM) AND date IS DATE STEP 1.00000000000 IF q == $q * priceCoeffBOMBOMDate($child, child, date) CYCLES YES;
recPriceCoeffBOMBOMDate (parent, child, date) = GROUP SUM recPriceCoeffBOMBOMDateResult(parent, child, date, q) * q BY parent, child, date;
//recPriceCoeffBOMBOMDate (parent, child, date) = 1.0 IF (parent AS BOM) == (child AS BOM) AND date IS DATE;

//
recPriceCoeffBOMSkuDate (BOM, sku, date) = GROUP SUM recPriceCoeffBOMBOMDate(BOM, childBOM, date) * bruttoQuantityBOMMaterialDate(childBOM, material, date) BY BOM, skuMaterial(material), date;
recPricePercentProductSkuDate (product, sku, date) = recPriceCoeffBOMSkuDate (BOMProduct(product), sku, date) * pricePercentProduct(product);

// ----- Рекурсивный расчет потребностей нетто ---------- //

nettoQuantityBOMMaterial (BOM, material) = GROUP SUM nettoQuantityComponent(component) BY BOMComponent(component), materialComponent(component);
nettoQuantityBOMSku(BOM, sku) = nettoQuantityBOMMaterial(BOM, sku) IF sku IS Sku;

nettoQuantityBOMBOM (parent, child) = GROUP MAX nettoQuantityBOMMaterial(BOM, material) / quantityProduct(material) BY BOM, BOMProduct(material);

recNettoQuantityBOMBOMResult (parent, child, q) = RECURSION 1.00000000000 IF q == 1.00000000000 AND child == (parent AS BOM)  STEP 1.00000000000 IF q == $q * nettoQuantityBOMBOM($child, child) CYCLES YES;
recNettoQuantityBOMBOM (parent, child) = GROUP SUM recNettoQuantityBOMBOMResult(parent, child, q) * q BY parent, child;

recNettoQuantityBOMSku (BOM, sku) = GROUP SUM recNettoQuantityBOMBOM(BOM, childBOM) * nettoQuantityBOMSku(childBOM, sku) BY BOM, sku; //](BOM, sku);

recNettoNodeQuantityBOMSku (BOM, sku) = GROUP SUM recNettoQuantityBOMBOM(BOM, childBOM) * nettoQuantityBOMMaterial(childBOM, material) BY BOM, skuMaterial(material); //](BOM, sku);

//recNettoNodeQuantityBOMSku (BOM, sku) =  DATA NUMERIC[14,3] (BOM, Sku);   // пока сделал так, потому что очень тормозит.

NAVIGATOR {
    manufacturingMasterData {
        ADD BOMs;
        ADD technologies;
        ADD actStudyOfCulinaryCommittees;
    }
}