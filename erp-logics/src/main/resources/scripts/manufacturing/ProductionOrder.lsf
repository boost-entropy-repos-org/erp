MODULE ProductionOrder;

REQUIRE Substitute, PriceListType, PriceListCalc, StockTax, ProductionOperation, SkuLedgerTax, StockMovement;

NAMESPACE Production;

// ----------------  Заказ ------------------- //
CLASS Order 'Производственный заказ';
TABLE order(Order);

@defineExternalizable(order, VARSTRING[100]);
@defineDocumentHeaderTime(Order);
@deriveDocumentHeaderTimePrefix(Order, );

isOrder (o) = o IS Order;
    
@defineDocumentHeaderNote(Order);

@defineDocumentHeaderNumber(Order);

@defineNumeratedDefault(Order, 'Производственные заказы', 'ПЗ');

@defineDocumentHeaderCreated(Order);
@defineDocumentHeaderPosted(Order);
@defineDocumentHeaderClosed(Order);

@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');

@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка-изделие)');
@defineDocumentHeaderPriceListType (order, priceListType, products, ' (изделие)');

VATComponentOrder 'Включает НДС' = DATA BOOLEAN (Order);
VATComponentOrder(order) <- includeVATPriceListType(priceListTypeOrder(order)) WHEN CHANGED(priceListTypeOrder(order));

VATProductOrder 'Включает НДС' = DATA BOOLEAN (Order);
VATProductOrder(order) <- includeVATPriceListType(calcPriceListTypeOrder(order)) OR includeVATPriceListType(productsPriceListTypeOrder(order)) 
    WHEN CHANGED(calcPriceListTypeOrder(order)) OR CHANGED(productsPriceListTypeOrder(order));

backgroundVATOrder 'Цвет' (order) = RGB(255, 255, 224) IF order IS Order;
VATOrder (o) = VATProductOrder(o) OR VATComponentOrder(o);

@defineDocumentHeaderLegalEntity(order, company, 'Компания');

@defineDocumentHeaderStock (order, stock, 'Склад компонент', components);
@defineDocumentHeaderStock (order, stock, 'Склад изделий', products);

@defineDocumentHeaderDatePrefix (Order, from, ' действия с');
@defineDocumentHeaderDatePrefix (Order, to, ' действия по');

@defineDocumentHeaderDescription(Order, 'Производственный заказ');

CONSTRAINT companyOrder(order) AND productsStockOrder(order) AND NOT
inLegalEntityStock(companyOrder(order), productsStockOrder(order))
    CHECKED BY productsStockOrder
        MESSAGE 'Организация и склад изделий для производственного заказа не имеют связи';
        
CONSTRAINT companyOrder(order) AND componentsStockOrder(order) AND NOT
inLegalEntityStock(companyOrder(order), componentsStockOrder(order))
    CHECKED BY componentsStockOrder
        MESSAGE 'Организация и склад компонент для производственного заказа не имеют связи';

//
calcBOMPriceOrder 'Расчет цен от коэффициента' = DATA BOOLEAN (Order);
calcBOMPriceOperation 'Расчет цен от коэффициента' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) calcBOMPriceOperation 
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(calcBOMPriceOperation(o));
    }
}

// ---------------- Изделия ------------------- //

CLASS ProductDetail 'Строка изделия';
TABLE productDetail (ProductDetail);
TABLE sessionProductDetail (Session, ProductDetail);

@defineExternalizable(productDetail, VARSTRING[100]);
@defineDocumentRelation (order, ProductDetail, );
@defineDocumentDetailIndex (order, ProductDetail);
@defineDocumentDetailActionsCustom (order, ProductDetail);
@defineDocumentDetailPosted (order, ProductDetail);
@defineDocumentDetailClosed (order, ProductDetail);
@defineDocumentClosedConstraint(Order);

@defineDocumentDetailTime (order, ProductDetail);
@defineDocumentDetailDatePrefix (order, ProductDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ProductDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ProductDetail);

currencyProductOrder (o) = currencyStock(productsStockOrder(o)) PERSISTENT;
currencyProductDetail (productDetail) = currencyProductOrder(orderProductDetail(productDetail));

@defineDocumentDetailStock (order, productDetail, stock, componentsStock, 'Склад компонент');
@defineDocumentDetailStock (order, productDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustom (productDetail, sku);

CONSTRAINT skuProductDetail(d) AND NOT isProductGroupSku(skuProductDetail(d)) CHECKED  BY skuProductDetail
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';

productProductDetail 'Изделие' = DATA Product (ProductDetail) NOT NULL;
nameProductProductDetail 'Изделие' (productDetail) = nameMaterial(productProductDetail(productDetail)) IN recognize;
idProductProductDetail 'Код изделия' (d) = idProduct(productProductDetail(d));
BOMProductDetail 'Спецификация' (d) = BOMProduct(productProductDetail(d));

CONSTRAINT BOMProductDetail(d) AND componentsStockProductDetail(d) AND countStocksBOM(BOMProductDetail(d)) AND NOT inBOMStock(BOMProductDetail(d), componentsStockProductDetail(d))
    CHECKED BY productProductDetail
    MESSAGE 'Для строки изделия в производственном заказе выбрана спецификация, которая не действует для склада компонента.';


UOMProductDetail = UOMProduct(productProductDetail(productDetail));
shortNameUOMProductDetail 'Ед.изм.' (productDetail) = shortNameUOM(UOMProductDetail(productDetail)) IN recognize;

CONSTRAINT skuProductDetail(productDetail) != skuProduct(productProductDetail(productDetail)) CHECKED BY productProductDetail
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';
    
expiryDateProductDetail 'Годен до' = DATA DATE (ProductDetail);
overManufactureDateProductDetail = ABSTRACT DATE (ProductDetail);
calcManufactureDateProductDetail (d) = OVERRIDE 
    (IF expiryMonthSku(skuProductDetail(d)) 
        THEN sumDateMonth(expiryDateProductDetail(d), -expiryMonthSku(skuProductDetail(d)))
        ELSE sumDate(expiryDateProductDetail(d), -expiryDaysSku(skuProductDetail(d)))),
    overManufactureDateProductDetail(d);  
     
manufactureDateProductDetail 'Дата изготовления' = DATA DATE (ProductDetail);    
overExpiryDateProductDetail = ABSTRACT DATE (ProductDetail);      
calcExpiryDateProductDetail (d) = OVERRIDE 
    (IF expiryMonthSku(skuProductDetail(d)) 
        THEN sumDateMonth(manufactureDateProductDetail(d), expiryMonthSku(skuProductDetail(d)))
        ELSE sumDate(manufactureDateProductDetail(d), expiryDaysSku(skuProductDetail(d)))),
    overExpiryDateProductDetail(d);
    
denyRepeatSkuOrder 'Запретить повтор изделий в производственном заказе' = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES denyRepeatSkuOrder();

DESIGN options {
    manufacturing{
        MOVE PROPERTY (denyRepeatSkuOrder());
    }
}

CONSTRAINT denyRepeatSkuOrder() AND [= GROUP SUM 1 BY skuProductDetail(d), orderProductDetail(d)](s, o) > 1 MESSAGE 'Изделие может быть включено в заказ только один раз';

// Кол-во
@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

calcBOMPriceProductDetail = calcBOMPriceOrder(orderProductDetail(d)) PERSISTENT;

quantityBOMProductDetail 'Кол-во в спецификации' = quantityProduct(productProductDetail(d)) PERSISTENT;
quantityPriceProductDetail 'Кол-во для расчета цены' = IF calcBOMPriceProductDetail(d) THEN
                                                            quantityBOMProductDetail(d) ELSE
                                                            quantityProductDetail(d) PERSISTENT;

quantityProductDetailSkuOrder 'Кол-во изделий в документе' (sku, order) =  GROUP SUM quantityProductDetail(productDetail)
    BY skuProductDetail(productDetail), orderProductDetail(productDetail); 
countProductDetailSkuOrder 'Кол-во строк изделий в документе' (sku, order) = 
    GROUP SUM 1 BY  skuProductDetail(idetail), orderProductDetail(idetail);  
    
//Процент и коэффициент цены
pricePercentProductDetail 'Удельный вес цены,%' = DATA NUMERIC[16,5] (ProductDetail);

isPricePercentOrder 'Удельный вес цены,%' = DATA BOOLEAN (Order);
isPriceCoeffOrder 'Коэффициент цены' = DATA BOOLEAN (Order);

isPricePercentOperation 'Удельный вес цены,%' = DATA BOOLEAN (Operation);
isPriceCoeffOperation 'Коэффициент цены' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) isPricePercentOperation, isPriceCoeffOperation 
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(isPricePercentOperation(o));
        MOVE PROPERTY(isPriceCoeffOperation(o));
    }
}

// Цены компонент
@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

VATComponentProductDetail (d) = VATComponentOrder(orderProductDetail(d));
VATProductProductDetail 'Включает НДС' (d) = VATProductOrder(orderProductDetail(d));
addVATProductDetail (d) = VATComponentProductDetail(d) AND NOT VATProductProductDetail(d) PERSISTENT;  

calcPriceListTypeProductDetail (productDetail) = calcPriceListTypeOrder(orderProductDetail(productDetail)) PERSISTENT;
productsPriceListTypeProductDetail (productDetail) = productsPriceListTypeOrder(orderProductDetail(productDetail)) PERSISTENT;
markupProductDetail 'Надбавка, %' = DATA NUMERIC[10,4] (ProductDetail);
valueVATProductDetail 'НДС, %' = DATA NUMERIC[10,5] (ProductDetail);

// коэффициент с надбавкой и НДС
multiplierCalcProductDetail (d) = 
    ((100.00 (+) markupProductDetail(d)) *
    (100.00 (+) (valueVATProductDetail(d) IF addVATProductDetail(d))) 
    / 10000) IF d IS ProductDetail PERSISTENT;


// Цены изделий
@defineDocumentDetailPriceCustomPrefix (productDetail, , ' изделия');
costPriceProductDetail 'Себестоимость изделия' = DATA NUMERIC[14,2] (ProductDetail);


sumProductDetail 'Сумма изделия' = DATA NUMERIC[16,2] (ProductDetail);
sumProductDetail(productDetail) <-
    NUMERIC[16,2](roundPriceCurrency((quantityProductDetail(productDetail) * priceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (quantityProductDetail(productDetail)) OR
         CHANGED (priceProductDetail(productDetail)) OR
         CHANGED (currencyProductDetail(productDetail));

sumProductDetailOrder 'Сумма заказанных изделий' (order) = GROUP SUM sumProductDetail(idetail) BY orderProductDetail(idetail) IN documentSum;

// ------------- Компоненты ----------- //
CLASS ComponentDetail 'Строка компонента';
TABLE componentDetail (ComponentDetail);
TABLE sessionComponentDetail (Session, ComponentDetail);

@defineDocumentRelation (order, ComponentDetail, );
@defineDocumentDetailIndex (order, ComponentDetail);
@defineDocumentDetailActionsCustom (order, ComponentDetail);
@defineDocumentDetailPosted (order, ComponentDetail);
@defineDocumentDetailClosed (order, ComponentDetail);

@defineDocumentDetailNumber(order, ComponentDetail);

@defineDocumentDetailTime (order, ComponentDetail);
@defineDocumentDetailDatePrefix (order, ComponentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ComponentDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ComponentDetail);

currencyComponentOrder (o) = currencyStock(componentsStockOrder(o)) PERSISTENT;
currencyComponentDetail (componentDetail) = currencyComponentOrder(orderComponentDetail(componentDetail));

@defineDocumentDetailStock (order, componentDetail, stock, componentsStock, 'Склад компонент') ;
@defineDocumentDetailStock (order, componentDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, brutto, ' (брутто)');
VATComponentDetail(componentDetail) = VATComponentOrder(orderComponentDetail(componentDetail)) PERSISTENT;

componentComponentDetail = DATA Component (ComponentDetail);
nameComponentComponentDetail 'Компонент' (componentDetail) = nameComponent(componentComponentDetail(componentDetail));
idComponentComponentDetail 'Код компонента' (componentDetail) = idComponent(componentComponentDetail(componentDetail));

CONSTRAINT bruttoSkuComponentDetail(d) AND NOT isComponentGroupSku(bruttoSkuComponentDetail(d)) CHECKED  BY bruttoSkuComponentDetail
    MESSAGE 'В качестве компонента выбран товар, который не входит в группу: Сырье';
    
UOMComponentDetail = UOMComponent(componentComponentDetail(componentDetail));
shortNameUOMComponentDetail 'Ед. изм.' (componentDetail) = shortNameUOM(UOMComponentDetail(componentDetail));

CONSTRAINT componentComponentDetail(componentDetail) AND bruttoSkuComponentDetail(componentDetail) AND NOT bruttoSkuComponentDetail(componentDetail) == skuComponent(componentComponentDetail(componentDetail))
    CHECKED BY componentComponentDetail MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

productComponentDetail = DATA Product (ComponentDetail);
nameMaterialComponentDetail 'Изделие' (componentDetail) = nameMaterial(productComponentDetail(componentDetail));

CONSTRAINT productComponentDetail(componentDetail) AND bruttoSkuComponentDetail(componentDetail) AND NOT bruttoSkuComponentDetail(componentDetail) == skuProduct(productComponentDetail(componentDetail))
    CHECKED BY productComponentDetail MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

// Кол-во
@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');

@defineDocumentDetailPriceCustomPrefix (componentDetail, , );
costComponentDetail 'Себестоимость' = DATA NUMERIC[14,2] (ComponentDetail);

// Замены
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, substitute, ' (замена)');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, substitute, ' (замена)');

bruttoQuantityBOMComponentDetail 'Кол-во в спецификации' = bruttoQuantityComponentDate(componentComponentDetail(d), dateComponentDetail(d));

// Параметры компонент с учетом замен

skuComponentDetail (componentDetail) = OVERRIDE bruttoSkuComponentDetail(componentDetail), substituteSkuComponentDetail(componentDetail) PERSISTENT;
INDEX skuComponentDetail, orderComponentDetail;
nameSkuComponentDetail 'SKU' (componentDetail) = nameSku(skuComponentDetail(componentDetail));
idSkuComponentDetail 'Код ' (componentDetail) = idSku(skuComponentDetail(componentDetail));
idBarcodeSkuComponentDetail 'Штрихкод' (componentDetail) = idBarcodeSku(skuComponentDetail(componentDetail));
shortNameUOMSkuComponentDetail 'Ед.изм.' (componentDetail) = shortNameUOMSku(skuComponentDetail(componentDetail));

quantityComponentDetail 'Кол-во' (componentDetail) = OVERRIDE bruttoQuantityComponentDetail(componentDetail), substituteQuantityComponentDetail(componentDetail) PERSISTENT;

calcBOMPriceComponentDetail (d) = calcBOMPriceOrder(orderComponentDetail(d));

quantityPriceComponentDetail 'Кол-во для расчета цены' (d) = IF calcBOMPriceComponentDetail(d) THEN
                                                                bruttoQuantityBOMComponentDetail(d) ELSE
                                                                quantityComponentDetail(d);

// Сумма
@defineDocumentDetailDataSum (component);
@deriveDocumentDetailSum(component, quantity);

sumComponentDetailOrder 'Сумма заказанных компонент' (order) = GROUP SUM sumComponentDetail(idetail) BY orderComponentDetail(idetail) IN documentSum;

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, , ' (компонент)');
quantityComponentDetailSkuOrder 'Кол-во (всего) (компонент)' (sku, order) = GROUP SUM quantityComponentDetail(idetail) BY skuComponentDetail(idetail), orderComponentDetail(idetail) IN documentSum PERSISTENT;

//-- Партия для строки компонента

hideBatchComponentDetail = ABSTRACT OVERRIDE BOOLEAN (ComponentDetail);
showBatchComponentDetail(d) = d IS ComponentDetail AND NOT hideBatchComponentDetail(d);
 
batchComponentDetail = DATA Batch (ComponentDetail);
nameBatchComponentDetail 'Партия' (d) = nameBatch(batchComponentDetail(d)) MINCHARWIDTH 20 PREFCHARWIDTH 40;

FORM dialogBatchStockOrder 'Партии'
    OBJECTS st = Stock FIXED PANEL
    OBJECTS t = DATETIME FIXED PANEL
    OBJECTS sk = Sku FIXED PANEL
    PROPERTIES(sk) READONLY nameSku
    
    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY numberBatch, seriesBatch, dateTimeBatch, nameSupplierBatch, idBarcodeSkuBatch, idBatch SHOWIF showIDs(), shippedQuantityBatch, costBatch, expiryDateBatch
    PROPERTIES  READONLY balanceBBatchStockDateTime(bt, st, t)
    PROPERTIES  READONLY currentBalanceBatchStock(bt, st)
    PROPERTIES(bt, st, t) READONLY accountPriceABatchStockDateTime
    
    FILTERS skuBatch(bt) == sk, countLedgerBatchStock(bt, st)
    ORDER BY dateTimeBatch(bt)
    
    FILTERGROUP batch
        FILTER 'Партии с остатком до операции' balanceBBatchStockDateTime(bt, st, t) 'F11'
        FILTER 'Партии с текущим остатком' currentBalanceBatchStock(bt, st) 'F9' DEFAULT
;


changeBatchComponentDetail = ACTION (d) {
    IF batchComponentDetail(d) THEN {
        FORM dialogBatchStockOrder OBJECTS st = componentsStockComponentDetail(d),
                                 t = dateTimeComponentDetail(d),
                                 sk = skuComponentDetail(d),
                                 bt = batchComponentDetail(d) DIALOG SHOWDROP;    
    } ELSE {
        FORM dialogBatchStockOrder OBJECTS st = componentsStockComponentDetail(d),
                                 t = dateTimeComponentDetail(d),
                                 sk = skuComponentDetail(d) DIALOG SHOWDROP;    
    }


    IF formResult() == FormResult.ok THEN {
        batchComponentDetail(d) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batchComponentDetail(d) <- NULL;
    }
}


CONSTRAINT skuBatch(batchComponentDetail(cd)) != skuComponentDetail(cd) CHECKED BY batchComponentDetail
    MESSAGE 'Товар партии строки компонента должен соответствовать SKU строки строки компонента для производственного заказа';  

// ------------- Заполнение компонентов из спецификаций --------------- //

TABLE productOrder(Product, Order);
quantityProductOrder 'Кол-во изделий в заказе' (product, order) = GROUP SUM quantityProductDetail(productDetail)
    BY productProductDetail(productDetail), orderProductDetail(productDetail) PERSISTENT;

TABLE BOMOrder(BOM, Order);
quantityProductsBOMOrder 'Кол-во спецификаций' (BOM, order) = [= GROUP MAX NUMERIC[19,8](quantityProductOrder(product, order)) / quantityProduct(product)
    BY BOMProduct(product), order](BOM, order) PERSISTENT;
    
BOMComponentDetail= DATA BOM (ComponentDetail);
INDEX BOMComponentDetail, orderComponentDetail;
nameBOMComponentDetail 'Спецификация' = nameBOM(BOMComponentDetail(d));    
fullNameBOMComponentDetail 'Спецификация (полное название)' = fullNameBOM(BOMComponentDetail(d));    

CONSTRAINT BOMComponentDetail(d) AND componentsStockComponentDetail(d) AND countStocksBOM(BOMComponentDetail(d)) AND NOT inBOMStock(BOMComponentDetail(d), componentsStockComponentDetail(d))
    CHECKED BY BOMComponentDetail
    MESSAGE 'Для строки компонента в производственном заказе выбрана спецификация, которая не действует для склада компонента.';

CONSTRAINT componentComponentDetail(d) AND componentsStockComponentDetail(d) AND countStocksBOM(BOMComponent(componentComponentDetail(d))) AND NOT inBOMStock(BOMComponent(componentComponentDetail(d)), componentsStockComponentDetail(d))
    CHECKED BY BOMComponentDetail
    MESSAGE 'Для строки компонента в производственном заказе выбрана компонента, которая не действует для склада компонента.';

createComponentsOrder 'Заполнить компоненты из спецификации' = ACTION (order) {

    FOR quantityProductsBOMOrder(BOM, order) DO {

        FOR BOMComponent(component) == BOM DO {
            FOR ADDOBJ d=ComponentDetail DO {
                orderComponentDetail(d) <- order;
                componentComponentDetail(d) <- component;
                bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order)) * quantityProductsBOMOrder(BOM,order);
                BOMComponentDetail(d) <- BOM; 
                
                IF materialComponent(component) IS Sku THEN {
                    bruttoSkuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) IS Product THEN {
                        productComponentDetail(d) <- materialComponent(component);
                        bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }

} TOOLBAR;

recBruttoQuantityBOMOrderSku 'Рекур.кол-во' (BOM, order, sku) = GROUP SUM quantityProductsBOMOrder(BOM, order) * recBruttoQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY BOM, order, sku;

productionCoeffComponentDetail = ABSTRACT NUMERIC[20,9] (ComponentDetail);
quantityCoeffComponentDetail(d) = OVERRIDE 1.0 IF d IS ComponentDetail, productionCoeffComponentDetail(d) PERSISTENT; 
createRecComponentsOrder 'Заполнить из спецификации (рекурсивно)' = ACTION (order)  {

    FOR q == recBruttoQuantityBOMOrderSku(BOM, order, sku) ORDER BOM ADDOBJ d = ComponentDetail DO {
        orderComponentDetail(d) <- order;
        BOMComponentDetail(d) <- BOM;
        bruttoSkuComponentDetail(d) <- sku;
        bruttoQuantityComponentDetail(d) <- q;
    }
} TOOLBAR;

calcBruttoQuantityComponentDetail (d) = recBruttoQuantityBOMOrderSku(BOMComponentDetail(d), orderComponentDetail(d), skuComponentDetail(d)) * quantityCoeffComponentDetail(d);
updateComponentsOrder 'Пересчитать кол-во для всех' = ACTION (order) {
    bruttoQuantityComponentDetail(d) <- calcBruttoQuantityComponentDetail (d);
} TOOLBAR;

// ------------- Заполнение изделий из спецификаций --------------- //

quantityComponentsBOMOrder 'Кол-во спецификаций' (BOM, order) =
    [= GROUP MAX NUMERIC[19,8](bruttoQuantityComponentDetail(componentDetail)) / bruttoQuantityComponentDate(componentComponentDetail(componentDetail), dateComponentDetail(componentDetail))
    BY BOMComponent(componentComponentDetail(componentDetail)), orderComponentDetail(componentDetail)](BOM, order);

createProductsOrder 'Заполнить изделия из спецификации ' = ACTION (order)  {

    FOR q == quantityComponentsBOMOrder(BOMProduct(product), order) ADDOBJ d = ProductDetail DO {
        orderProductDetail(d) <- order;
        skuProductDetail(d) <- skuProduct(product);
        productProductDetail(d) <- product;
        quantityProductDetail(d) <- round3(quantityProduct(product) * q);
    }

} TOOLBAR;

expandComponentDetail 'Развернуть изделие' = ACTION (componentDetail)  {

    FOR  BOMComponent(component) == BOMProduct(productComponentDetail(componentDetail))  DO {
        FOR ADDOBJ d=ComponentDetail DO {
            orderComponentDetail(d) <- orderComponentDetail(componentDetail);
            componentComponentDetail(d) <- component;
            bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(orderComponentDetail(componentDetail))) *
                bruttoQuantityComponentDetail(componentDetail) / quantityProduct(productComponentDetail(componentDetail));    //ceil
            BOMComponentDetail(d) <- BOMComponentDetail(componentDetail);     

            IF materialComponent(component) IS Sku THEN {
                bruttoSkuComponentDetail(d) <- materialComponent(component);
            } ELSE {
                IF materialComponent(component) IS Product THEN {
                    productComponentDetail(d) <- materialComponent(component);
                    bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                }
            }
        }
    }
    DELETE componentDetail;
} TOOLBAR;

backgroundComponentDetail 'Цвет' (componentDetail) = RGB(255,255,229) IF productComponentDetail(componentDetail);

recBruttoQuantityBOMOrderComponent 'Рекур.кол-во' (BOM, order, component) = GROUP SUM quantityProductsBOMOrder(BOM, order) * recBruttoQuantityBOMComponentDate(BOM, component, dateOrder(order)) BY BOM, order, component;

createForRecComponentsOrder 'Заполнить из спецификации (рекурсивно по компонентам)' = ACTION (order)  {

    FOR q == recBruttoQuantityBOMOrderComponent(BOM, order, component) IF materialComponent(component) IS Sku ORDER BOM ADDOBJ d = ComponentDetail DO {
        orderComponentDetail(d) <- order;
        BOMComponentDetail(d) <- BOM;
        bruttoSkuComponentDetail(d) <- materialComponent(component);
        componentComponentDetail(d) <- component;
        bruttoQuantityComponentDetail(d) <- q;
    }
} TOOLBAR;

// ---------------- Подбор цен и замен для sku --------------------------- //

TABLE skuOrder(Sku, Order);

// --- Основной компонент --- //
bruttoQuantitySkuOrder 'Количество брутто' (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail)
                                                                BY bruttoSkuComponentDetail(componentDetail),
                                                                   orderComponentDetail(componentDetail) PERSISTENT;
             
bruttoNotSubstituteQuantitySkuOrder 'Количество без замены' (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail) 
    IF NOT substituteQuantityComponentDetail(componentDetail)
    BY bruttoSkuComponentDetail(componentDetail),
       orderComponentDetail(componentDetail) PERSISTENT;                                                                     
                                                                   
bruttoSubstituteQuantitySkuOrder (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail) 
    IF substituteQuantityComponentDetail(componentDetail)
    BY bruttoSkuComponentDetail(componentDetail),
       orderComponentDetail(componentDetail) PERSISTENT;                                                                                                                                   
                                                                                                                                 
// цены по товару
dataBruttoPriceSkuOrder 'Цена' = DATA NUMERIC[14,2] (Sku, Order);
costSkuOrder 'Себестоимость' = DATA NUMERIC[14,2] (Sku, Order);

dataBruttoPriceSkuOrder (sku, order) <- prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                                sku,
                                                                                componentsStockOrder(order),
                                                                                dateTimeOrder(order)) IF quantityComponentDetailSkuOrder(sku, order)
    WHEN CHANGED(priceListTypeOrder(order)) OR CHANGED(componentsStockOrder(order)) OR CHANGED(dateTimeOrder(order)) OR CHANGED(quantityComponentDetailSkuOrder(sku, order));

calcCostSkuStock 'Себестоимость' (sku, stock) = [= GROUP SUM costBatch(b) * currentBalanceBatchStock(b,stock) BY skuBatch(b), stock](sku, stock) /
    (currentBalanceSkuStock(sku, stock) IF currentBalanceSkuStock(sku, stock) != 0);   

costSkuOrder (sku, order) <- calcCostSkuStock(sku, componentsStockOrder(order)) IF quantityComponentDetailSkuOrder(sku, order)
    WHEN CHANGED (quantityComponentDetailSkuOrder(sku, order)) OR CHANGED (componentsStockOrder(order)); 
    
// --- Замена --- //
substituteSkuOrder = DATA Sku (Sku, Order);
nameSubstituteSkuOrder 'Замена' (sku, order) = nameSku(substituteSkuOrder(sku, order));

substituteQuantitySkuOrder 'Кол-во замены' = DATA NUMERIC[14,3] (Sku, Order);
overSubstituteQuantitySkuOrder 'Кол-во' = OVERRIDE bruttoQuantitySkuOrder(sku, order), substituteQuantitySkuOrder(sku, order);
multiplierSkuOrder 'Коэффициент замены' = DATA NUMERIC[8,3] (Sku, Order);

//--
stockSubstitutesSku = DATA LOCAL Stock ();
nameStockSubstitutesSku 'Склад' = nameStock(stockSubstitutesSku());

BOMSubstitutesSku = DATA LOCAL BOM ();
productsBOMSubstitutesSku 'Спецификация' = productsBOM(BOMSubstitutesSku());

multiplierSubstitutesSku 'Коэффициент' = DATA LOCAL NUMERIC[8,3] (Sku);

currentBalanceSkuSubstitutesSku 'Текущий остаток' (sku) =  currentBalanceSkuStock(sku, stockSubstitutesSku());

substitutesPriceSkuOrder 'Цена' (sku,order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), sku, stockSubstitutesSku(), dateTimeOrder(order));
showPriceSubstitutesOrder (order) = stockSubstitutesSku() AND priceListTypeOrder(order);

multiplierSubstituteFromToSku 'Коэффициент' (fromSku ,toSku) =  multiplierSubstitute(uniqueSubstituteFromToSku(fromSku ,toSku));
changeMultiplierSubstituteSkuFromTo = ACTION (fromSku, toSku) {
    REQUEST NUMERIC[8,3] INPUT;
    IF requestedNumeric() THEN {         
        IF uniqueSubstituteFromToSku(fromSku, toSku) THEN {
            multiplierSubstitute(substitut) <- requestedNumeric() WHERE uniqueSubstituteFromToSku(fromSku, toSku) == substitut;
        } ELSE {
            FOR  ADDOBJ sub = Substitute DO{
                fromSkuSubstitute(sub) <- fromSku;
                toSkuSubstitute(sub) <- toSku;
                multiplierSubstitute(sub) <- requestedNumeric();
            }        
        }
    } ELSE {
        IF uniqueSubstituteFromToSku(fromSku, toSku) THEN {
            DELETE substitut  WHERE uniqueSubstituteFromToSku(fromSku, toSku) == substitut;
        }    
    }        
}
backgroundSubstitutesOrder 'Цвет' (order) = RGB(255,224,255) IF order IS Order;

filterubstituteFromToSku (s,sk) =  IF BOMSubstitutesSku() 
    THEN useSubstituteBOM(uniqueSubstituteFromToSku(s,sk),BOMSubstitutesSku())
    ELSE TRUE IF uniqueSubstituteFromToSku(s,sk);


FORM substitutesSku 'Замены'
    PROPERTIES() nameStockSubstitutesSku, productsBOMSubstitutesSku
    OBJECTS o = Order FIXED PANEL
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) nameSku
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES     READONLY SHOWIF stockSubstitutesSku() currentBalanceSkuSubstitutesSku(sk)
    PROPERTIES     READONLY SHOWIF showPriceSubstitutesOrder(o) substitutesPriceSkuOrder(sk,o)

    PROPERTIES(s,sk) multiplierSubstituteFromToSku ON CHANGE changeMultiplierSubstituteSkuFromTo(s,sk) BACKGROUND  backgroundSubstitutesOrder(o)
    PROPERTIES() addSku TODRAW sk
    PROPERTIES(sk) editSku, copySku
    FILTERS isParentSkuGroupSku(sg, sk)
    ORDER BY nameSku(sk)

    FILTERGROUP filter1
        FILTER 'Товары с остатком' currentBalanceSkuSubstitutesSku(sk) AND stockSubstitutesSku() 'F10'
    FILTERGROUP filter2
        FILTER 'Доступные замены' filterubstituteFromToSku (s,sk) 'F9'   
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroupSku(sk) 'F8' DEFAULT                         
;

DESIGN substitutesSku {
    main{
        preferredSize = (1200, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE skuTree.tree.box {
                caption = 'Группы SKU';
            }

            MOVE sk.box {
                fill = 3;
            }
        }
        NEW headerContainer BEFORE topContainer {
            type = CONTAINERH ;
            NEW stockContainer {
                caption = 'Склад';
                MOVE PROPERTY (nameStockSubstitutesSku());
            }
            MOVE s.box {
                caption = 'Заменяемый товар';
                MOVE PROPERTY (nameSku(s));                
            };
            NEW BOMContainer {
                caption = 'Спецификация';
                MOVE PROPERTY (productsBOMSubstitutesSku());
            }            
        }
        REMOVE o.box;        
        MOVE functions.box;
    }
}

chooseSubstituteSkuOrder 'Выбрать замену' =  ACTION (fromSku, order) {
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku() <- NULL;
    stockSubstitutesSku() <- componentsStockOrder(order) WHERE componentsStockOrder(order);

    FORM substitutesSku OBJECTS o= order, s=fromSku DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSkuOrder(fromSku, order) <- chosenObject('sk');
        multiplierSkuOrder(fromSku, order) <- multiplierSubstituteFromToSku(fromSku,chosenObject('sk'));
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSkuOrder(fromSku, order) <- NULL;
            multiplierSkuOrder(fromSku, order) <- NULL;         
        }   
    }
}


currentBalanceSubstituteOrder'Текущий остаток' (substitute, order) = currentBalanceSkuStock(toSkuSubstitute(substitute), componentsStockOrder(order));
substitutesPriceSubstituteOrder 'Цена' (substitute, order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), toSkuSubstitute(substitute), componentsStockOrder(order), dateTimeOrder(order));

// Действие по заполнении замены через галочку
isSubstituteSkuOrder 'Использовать замену' (substitute, sku, order) = substituteSkuOrder(sku, order) == toSkuSubstitute(substitute);
changeSubstituteSkuOrder = ACTION (substitute, sku, order) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        substituteSkuOrder(sku, order) <- toSkuSubstitute(substitute);
        multiplierSkuOrder(sku, order) <- multiplierSubstitute(substitute);

    } ELSE {
        substituteSkuOrder(sku, order) <- NULL;
        multiplierSkuOrder(sku, order) <- NULL;
    }
}

// коэффициенты цен
calcQuantityComponentsProductDetailProduct 'Кол-во компонентов' = GROUP SUM quantityPriceProductDetail(d) BY BOMProductDetail(d), orderProductDetail(d);
calcQuantityComponentsProductDetail 'Кол-во компонентов' = calcQuantityComponentsProductDetailProduct(BOMProductDetail(detail), orderProductDetail(detail));
            
calcPriceCoeffProductDetail 'Коэффициент цены' (productDetail) = calcQuantityComponentsProductDetail(productDetail) * pricePercentProductDetail(productDetail) 
    / (quantityPriceProductDetail(productDetail) * 100.0);  
     
calcPricePercentProductDetailNumeric '%' (productDetail, num) = (num AS NUMERIC[8,5]) * quantityPriceProductDetail(productDetail) * 100.0 
    / calcQuantityComponentsProductDetail(productDetail);     
    
// Sku с учетом замены
skuSkuOrder (sku, order) = OVERRIDE sku IF bruttoQuantitySkuOrder(sku, order), substituteSkuOrder(sku,order) PERSISTENT;

nameSkuSkuOrder 'Итоговый sku' (sku,order)= nameSku(skuSkuOrder (sku,order));
idBarcodeSkuSkuOrder 'Штрихкод' (sku,order) = idBarcodeSku(skuSkuOrder (sku, order));
shortNameUOMSkuSkuOrder 'Ед.изм.' (sku,order) = shortNameUOMSku(skuSkuOrder (sku, order));

sumComponentDetailBOMSkuOrder 'Сумма' (BOM, sku, order) = GROUP SUM sumComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);

sumComponentDetailBOMOrder = GROUP SUM sumComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);
quantityComponentDetailBOMOrder = GROUP SUM quantityComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);

priceComponentsBOMOrder (b, o) = sumComponentDetailBOMOrder(b, o) / quantityComponentDetailBOMOrder(b, o);  

priceComponentsProductDetail (d) = sumComponentDetailBOMOrder(BOMProductDetail(d), orderProductDetail(d)) / quantityProductDetail(d);

calcPricePercentProductDetail(d) =  IF calcBOMPriceProductDetail(d) THEN
                                                        NUMERIC[16,5](calcPricePercentProductDetailNumeric(d, priceProductDetail(d) /
                                                                      priceComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d))))
                                                     ELSE
                                                        100 * priceProductDetail(d) / priceComponentsProductDetail(d);


calcComponentsPriceProductDetail 'Цена расчетная с/с' (d) = IF calcBOMPriceProductDetail(d) THEN // считаем цены от цены спецификации * коэффициент (чтобы избежать проблем с округлением)
                                                                                    priceComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d)) * 
                                                                                    calcPriceCoeffProductDetail(d)
                                                                             ELSE
                                                                                    priceComponentsProductDetail (d) // Цена компонентов за единицу 
                                                                                    * pricePercentProductDetail(d) / 100.0; // удельная цена
                    
costSumComponentsBOMOrder =  GROUP SUM quantityComponentDetail(d) * costComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);
costComponentsBOMOrder (b, o) = costSumComponentsBOMOrder(b, o) / quantityComponentDetailBOMOrder(b, o);

calcCostProductDetail 'Себестоимость расчетная' (d)= IF calcBOMPriceProductDetail(d) THEN // считаем цены от цены спецификации * коэффициент (чтобы избежать проблем с округлением)
                                                                            costSumComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d)) /
                                                                            quantityComponentDetailBOMOrder(BOMProductDetail(d), orderProductDetail(d)) *
                                                                            calcPriceCoeffProductDetail(d)
                                                                      ELSE
                                                                            costSumComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d)) // Цена компонентов за единицу 
                                                                            / quantityProductDetail(d)
                                                                            * pricePercentProductDetail(d) / 100.0; // удельная цена

//calcCostProductDetail 'Себестоимость расчетная' (d)= bruttoCostSumComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d)) 
//                                                                      * pricePercentProductDetail(d) / 100.0 // удельная цена
//                                                                      / quantityProductDetail(d); // за единицу

//-- Подсчет цены изделия с учетом замен
//recPricePercentProductSkuOrder (product, sku, order) = recPricePercentProductSkuDate (product, sku, dateOrder(order));

calcPremiumPriceProductDetail 'Цена расчетная (с надбавками)' (productDetail) =
    IF roundConditionCalcPriceListTypeSku(calcPriceListTypeProductDetail(productDetail), skuProductDetail(productDetail)) THEN
        NUMERIC[14,2](roundPriceRoundCondition(componentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail),
                                               roundConditionCalcPriceListTypeSku(calcPriceListTypeProductDetail(productDetail), skuProductDetail(productDetail))))
    ELSE
        NUMERIC[14,2](roundPriceCurrency(componentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail),
                                         currencyProductDetail(productDetail)));
                                         
// Изменение надбавок при вводе пользователем процента

changeValueMarkupProductDetail (detail) = ACTION (detail) {
    IF calcPremiumPriceProductDetail(detail) THEN {
        priceProductDetail(detail) <- calcPremiumPriceProductDetail(detail);
    }
}

changeComponentsPriceProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        componentsPriceProductDetail (detail) <- requestedNumeric();
        changeValueMarkupProductDetail(detail);
    } ELSE
        componentsPriceProductDetail (detail) <- NULL;
}

// Изменение коэффициентов и цен
overChangePriceCoeffProductDetail = ABSTRACT ACTION LIST (ProductDetail);
changePriceCoeffProductDetail = ACTION (detail) {
    REQUEST NUMERIC[8,5] INPUT;
    IF requestedNumeric() THEN {        
        pricePercentProductDetail(detail) <- NUMERIC[16,5](calcPricePercentProductDetailNumeric(detail, requestedNumeric()));
        componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
        costPriceProductDetail(detail) <- calcCostProductDetail(detail);
        changeValueMarkupProductDetail(detail);
        overChangePriceCoeffProductDetail(detail);
    }
}
overChangePricePercentProductDetail = ABSTRACT ACTION LIST (ProductDetail);
changePricePercentProductDetail = ACTION (detail) {
    REQUEST NUMERIC[16,5] INPUT;
    IF requestedNumeric() THEN {
        pricePercentProductDetail(detail) <- requestedNumeric(); 
        componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
        costPriceProductDetail(detail) <- calcCostProductDetail(detail);
        changeValueMarkupProductDetail(detail);
        overChangePricePercentProductDetail(detail);
    }
}   


changeMarkupProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[10,4] INPUT;
    IF requestedNumeric() THEN {
        markupProductDetail (detail) <- requestedNumeric();
        changeValueMarkupProductDetail(detail);
    } ELSE
        markupProductDetail(detail) <- NULL;
}

calcMarkupIsVATProductDetail(d)  = [= round2(((X/Z*100/(100+Y))-1)*100)](
    priceProductDetail(d),
    calcComponentsPriceProductDetail(d) IF calcComponentsPriceProductDetail(d) != 0.0,
    valueVATProductDetail(d));
calcMarkupProductDetail(d)  = [= round2((X/Y-1)*100)](
    priceProductDetail(d),
    calcComponentsPriceProductDetail(d) IF calcComponentsPriceProductDetail(d) != 0.0);    

notRecalculateMarkupOrder = ABSTRACT BOOLEAN (Order);
notRecalculateMarkupOrderProductDetail(detail) = notRecalculateMarkupOrder(orderProductDetail(detail)); 

changeValueProductsPriceProductDetail (detail) = ACTION (detail) {
    IF addVATProductDetail(detail) THEN {
        markupProductDetail(detail) <- calcMarkupIsVATProductDetail(detail);
        IF notRecalculateMarkupOrderProductDetail(detail) THEN {
            pricePercentProductDetail(detail) <- calcPricePercentProductDetail(detail);
        }
    } ELSE {
        markupProductDetail(detail) <- calcMarkupProductDetail(detail);
        IF notRecalculateMarkupOrderProductDetail(detail) THEN {
            pricePercentProductDetail(detail) <- calcPricePercentProductDetail(detail);
        }
    }
}

//пересчет цены изделия
                                                                                             
overChangeProductsPriceProductDetail = ABSTRACT ACTION LIST (ProductDetail);
changeProductsPriceProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        priceProductDetail (detail) <- requestedNumeric();
        IF notRecalculateMarkupOrderProductDetail(detail) THEN {
            pricePercentProductDetail(detail) <- calcPricePercentProductDetail(detail);
            componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
            costPriceProductDetail(detail) <- calcCostProductDetail(detail); 
            overChangeProductsPriceProductDetail(detail);               
        } ELSE {
            changeValueProductsPriceProductDetail(detail);    
        }   
    }
}

recordMarkupProductDetail(detail) = ACTION (detail) {
    IF calcPriceListTypeProductDetail(detail) THEN {
        markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
        changeValueMarkupProductDetail(detail);
    }
}

// расчет НДС
valueVATSkuOrder 'НДС, %' = DATA NUMERIC[10,5] (Sku, Order);

WHEN SESSION (CHANGED(componentsCountryOrder(order)) OR
              CHANGED(dateOrder(order)) OR 
              CHANGED(VATOrder(order)) OR 
              SET(quantityComponentDetailSkuOrder(sku, order)))
                 AND quantityComponentDetailSkuOrder(sku, order)
                 AND VATOrder(order) DO {                                      
    valueVATSkuOrder(sku, order) <- valueVATSkuCountryDate(sku, componentsCountryOrder(order), dateOrder(order));
}
     
//calcPriceVATProductDetail 'Цена НДС' (d) = [= GROUP SUM bruttoSumComponentsBOMSkuOrder(b, s, o) * valueVATSkuOrder(s, o) / (100.0 + valueVATSkuOrder(s, o)) BY b, o] (BOMProductDetail(d), orderProductDetail(d)) 
//                                                            * (pricePercentProductDetail(d) / 100.0) // удельная цена
//                                                            / quantityProductDetail(d) // за единицу
//                                                            / coeffPercentProductDetail(d); 
//              
//calcValueVATProductDetail 'НДС, %' (productDetail)= [= 100*X/(Y-X)](
//    calcPriceVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail));
//    
////--  если стоит галочка isVATOrder    
//calcPriceIsVATProductDetail 'Цена НДС' (d) = [= GROUP SUM bruttoSumComponentsBOMSkuOrder(b, s, o) * valueVATSkuOrder(s, o) / 100.0 BY b, o] (BOMProductDetail(d), orderProductDetail(d)) 
//                                                         * (pricePercentProductDetail(d) / 100.0) // удельная цена
//                                                         / quantityProductDetail(d) // за единицу
//                                                         / coeffPercentProductDetail(d);       
//   
//calcValueIsVATProductDetail 'НДС, %' (productDetail)= [= 100*X/Y](
//    calcPriceIsVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail) IF calcComponentsPriceProductDetail(productDetail)!= 0);    
//

// todo : надо поддержать галочку Включает НДС (проблема в том, что для учетной цены определить включает она НДС или нет тяжело)

skipComponentDetail(d) = ABSTRACT BOOLEAN (ComponentDetail);

valueVATComponentDetail(d) = OVERRIDE valueVATSkuOrder(skuComponentDetail(d), orderComponentDetail(d)), valueVATBatch(batchComponentDetail(d)) PERSISTENT;
sumVATComponentDetail (d) = sumComponentDetail(d) * valueVATComponentDetail(d) / (100.0 + valueVATComponentDetail(d));
sumVATComponentsProductDetail (d) = [= GROUP SUM sumVATComponentDetail(d) IF NOT skipComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d)](BOMProductDetail(d), orderProductDetail(d)); 
sumVATComponentDetailBOMOrder = GROUP SUM sumComponentDetail(d) IF NOT skipComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);
calcValueVATProductDetail 'НДС, %' = OVERRIDE 0.0, (sumVATComponentsProductDetail(d) * 100.0 /
                                                                     (sumVATComponentDetailBOMOrder(BOMProductDetail(d), orderProductDetail(d)) - sumVATComponentsProductDetail(d)));
// Расчет цен для изделий
overFillPriceProductDetail = ABSTRACT ACTION LIST (ProductDetail);
fillPriceProductDetail 'Заполнить цены для изделий' = ACTION (detail)  {
    valueVATProductDetail(detail) <- calcValueVATProductDetail(detail);
    componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
    costPriceProductDetail(detail) <- calcCostProductDetail(detail);
    overFillPriceProductDetail(detail);
    IF productsPriceListTypeProductDetail(detail) AND prevPriceBPriceListTypeSkuStockDateTime(productsPriceListTypeProductDetail(detail),
                                                                                              skuProductDetail(detail),
                                                                                              productsStockProductDetail(detail),
                                                                                              dateTimeProductDetail(detail))    THEN {
                                                                                              
        priceProductDetail(detail) <- prevPriceBPriceListTypeSkuStockDateTime(productsPriceListTypeProductDetail(detail),
                                                                                        skuProductDetail(detail),
                                                                                        productsStockProductDetail(detail),
                                                                                        dateTimeProductDetail(detail));  
        changeValueProductsPriceProductDetail(detail);                                                                                
                                                                                         
    } ELSE {
        IF calcPriceListTypeProductDetail(detail) AND markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail)) THEN {
            markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
            changeValueMarkupProductDetail(detail);
        }
    }                                                   

} TOOLBAR;



fillPriceProductsOrder 'Заполнить цены для изделий' = ACTION (order)  {
    FOR orderProductDetail(detail) == order DO {
        fillPriceProductDetail(detail);                                                    
    }
} TOOLBAR;

//-- Замены для компонентов

chooseSubstituteComponentDetail 'Выбрать замену' =  ACTION (detail){
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku()<- NULL;
    
    stockSubstitutesSku() <- componentsStockComponentDetail(detail) WHERE componentsStockComponentDetail(detail);
    BOMSubstitutesSku() <- BOMComponentDetail(detail) WHERE BOMComponentDetail(detail);

    FORM substitutesSku OBJECTS o= orderComponentDetail(detail), s = bruttoSkuComponentDetail(detail) DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSkuComponentDetail(detail) <- chosenObject('sk'); 
        substituteQuantityComponentDetail(detail) <- NUMERIC[14,3](multiplierSubstituteFromToSku(bruttoSkuComponentDetail(detail), substituteSkuComponentDetail(detail))* bruttoQuantityComponentDetail(detail));           
        
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSkuComponentDetail(detail) <- NULL;  
            substituteQuantityComponentDetail(detail) <- NULL;  
        }    
    }    
}

// ------------- Формы ----------- //

backgroundSubstitutesSkuOrder 'Цвет' (sku, order) = RGB(255,224,255) IF substituteQuantitySkuOrder(sku, order);


resetSubstituteOrder 'Сбросить все замены' = ACTION (order) {
    FOR substituteSkuOrder(sku, order) OR multiplierSkuOrder(sku, order) DO {
        substituteSkuOrder(sku, order) <- NULL;
        multiplierSkuOrder(sku, order) <- NULL;
        valueVATSkuOrder(sku, order) <- NULL;
        substituteQuantitySkuOrder(sku, order) <- NULL;
    }
} TOOLBAR;

deleteComponentsOrder 'Очистить' =  ACTION (order) {
    deleteComponentDetailOrder(order);
    resetSubstituteOrder(order);
} TOOLBAR;

priceStockOrder = DATA Stock(Order);
namePriceStockOrder 'Склад' = nameStock(priceStockOrder(order));

calcCostSkuOrder 'Себестоимость' = calcCostSkuStock(sku, priceStockOrder(order));

CONSTRAINT  priceStockOrder(o) AND NOT isCompanyStock(priceStockOrder(o)) CHECKED BY priceStockOrder    
        MESSAGE 'Склад для цен не является складом компании';
priceStockSkuOrder 'Цена' (sku, order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), sku, priceStockOrder(order), dateTimeOrder(order));                                                                                                                                                               

priceStockOrder (order) <- componentsStockOrder(order)
    WHEN CHANGED(componentsStockOrder(order));
    
FORM multiplier 'Коэффициент'    
    OBJECTS nu = NUMERIC[8,3] FIXED PANEL
    PROPERTIES  val= OBJVALUE (nu)
;
DESIGN multiplier {
    nu.box {
        caption = '';
        PROPERTY(val) { caption = 'Введите коэффициент цены' ; font = 'bold 36'; } 
    }
} 

fillSubstitutePriceOrderSkuFromTo 'Использовать цену' = ACTION (order, sku, skuSubstitute) {
    IF multiplierSubstituteFromToSku(sku, skuSubstitute) THEN {
        dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order));
        costSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, skuSubstitute)*calcCostSkuStock(skuSubstitute,priceStockOrder(order)));
    } ELSE {
        FORM multiplier MODAL; 
        IF formResult() == FormResult.ok THEN {
            dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*priceStockSkuOrder(skuSubstitute,order));
            costSkuOrder(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*calcCostSkuStock(skuSubstitute,priceStockOrder(order)));
        }
    }        
} TOOLBAR;  

currentBalanceSkuPriceStockOrder 'Текущий остаток' = currentBalanceSkuStock(sku, priceStockOrder(order)); 
currentBalanceSkuPriceStockOrderSkuFromTo 'Остаток с уч. коэфф.'  (order, fromSku, toSku) = currentBalanceSkuPriceStockOrder(toSku, order) / multiplierSubstituteFromToSku(fromSku ,toSku);

//maxSubstitutePriceSkuOrder = GROUP MAX multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order; 
//minSubstitutePriceSkuOrder = GROUP MIN multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order;    
maxSubstituteSkuPriceSkuOrder = GROUP LAST skuSubstitute 
    BY sku, order
    ORDER multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order), skuSubstitute     
    WHERE currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND multiplierSubstituteFromToSku(sku, skuSubstitute) AND priceStockSkuOrder(skuSubstitute,order) 
;    
minSubstituteSkuPriceSkuOrder = GROUP LAST skuSubstitute 
    BY sku, order
    ORDER DESC multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order), skuSubstitute
    WHERE currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND multiplierSubstituteFromToSku(sku, skuSubstitute) AND priceStockSkuOrder(skuSubstitute,order) 
;          
         
fillSubstitutePriceMaxOrderSkuFrom 'Исп. max цену' = ACTION (order, sku) {
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- maxSubstituteSkuPriceSkuOrder(sku, order);
    
    dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, sku())*priceStockSkuOrder(sku(),order)) WHERE sku();     
    costSkuOrder(sku, order) <- NUMERIC[14,2](calcCostSkuStock(sku(),priceStockOrder(order))) WHERE sku();   
};  
fillSubstitutePriceMinOrderSkuFrom 'Исп. min цену' = ACTION (order, sku) {
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- minSubstituteSkuPriceSkuOrder(sku, order);

    dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, sku())*priceStockSkuOrder(sku(),order)) WHERE sku();      
    costSkuOrder(sku, order) <- NUMERIC[14,2](calcCostSkuStock(sku(),priceStockOrder(order))) WHERE sku();   
       
};   

fillSubstitutePriceMaxOrder 'Исп. max цену' = ACTION (order) {
    FOR quantityComponentDetailSkuOrder(sku,order) DO {
        fillSubstitutePriceMaxOrderSkuFrom(order,sku);
    }   
        
} TOOLBAR;  
fillSubstitutePriceMinOrder 'Исп. min цену' = ACTION (order) {
    FOR quantityComponentDetailSkuOrder(sku,order) DO {
        fillSubstitutePriceMinOrderSkuFrom(order,sku);
    }       
} TOOLBAR;   
//--
maxSkuBalanceSubstituteSkuOrder (sku, order) =
    GROUP LAST skuSubstitute
          BY   sku, order
          ORDER (currentBalanceSkuPriceStockOrder(skuSubstitute,order) /(multiplierSubstituteFromToSku(sku, skuSubstitute) IF multiplierSubstituteFromToSku(sku, skuSubstitute)!=0)), skuSubstitute
          WHERE priceStockSkuOrder(skuSubstitute,order) AND currentBalanceSkuPriceStockOrder(skuSubstitute,order) AND multiplierSubstituteFromToSku(sku, skuSubstitute);

fillSubstitutePriceMaxBalanceOrderSkuFrom 'Исп. цену большего остатка' = ACTION (order, sku) {
    LOCAL sku = Sku();
    sku() <- NULL;
    sku() <- maxSkuBalanceSubstituteSkuOrder (sku, order);
    dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](priceStockSkuOrder(sku(),order)*multiplierSubstituteFromToSku(sku, sku())) WHERE sku();     
    costSkuOrder(sku, order) <- NUMERIC[14,2](calcCostSkuStock(sku(),priceStockOrder(order))) WHERE sku();   
     
}; 
fillSubstitutePriceMaxBalanceOrder 'Исп. цену большего остатка' = ACTION (order) {
    FOR quantityComponentDetailSkuOrder(sku,order) DO {
        fillSubstitutePriceMaxBalanceOrderSkuFrom(order,sku);
    }        
} TOOLBAR; 
    
backgroundMarkupProductDetail = ABSTRACT CASE COLOR (ProductDetail);  

  
  //toSkuSubstitute(substitute)
bruttoBalanceSkuOrder 'Текущий остаток с учетом замен' (sku,order) = currentBalanceSkuStock(sku, componentsStockOrder(order)) (+) 
    [ = GROUP SUM NUMERIC[19,8](currentBalanceSubstituteOrder(substitute, order)) / (multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0) 
        BY fromSkuSubstitute(substitute), order](sku,order);  
 
bruttoBalanceToSkuSubstituteOrder 'Текущий остаток с учетом замен' (su, order)= bruttoBalanceSkuOrder(toSkuSubstitute(su), order); 

@defineDocumentDialogStock(order, company,  components, company, );

@defineDocumentDialogStock(order, company,  products, company, );

backgroundBalanceSkuPriceStockOrder(s,o) = RGB (255,156,156) IF quantityComponentDetailSkuOrder(s,o) > currentBalanceSkuPriceStockOrder(s,o);  
editSkuProductDetail 'Редактировать SKU' (d) = ACTION editSku(skuProductDetail(d));
editBruttoSkuComponentDetail 'Редактировать SKU' (d) = ACTION editSku(bruttoSkuComponentDetail(d));





FORM order 'Производственный заказ'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) isPostedOrder, nameCompanyOrder, nameComponentsStockOrder ON CHANGE changeComponentsStockCompanyOrder(o), 
                  nameProductsStockOrder ON CHANGE changeProductsStockCompanyOrder(o), nameNumeratorOrder, numberOrder, seriesOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, sumProductDetailOrder, 
                  quantityComponentDetailOrder, sumComponentDetailOrder, calcBOMPriceOrder, isPricePercentOrder, isPriceCoeffOrder 
    PROPERTIES(o)  FORCE PANEL nameCalcPriceListTypeOrder, nameProductsPriceListTypeOrder, VATProductOrder
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) indexProductDetail, nameSkuProductDetail ON EDIT editSkuProductDetail(pd), idProductProductDetail SHOWIF showIDs(), nameProductProductDetail, 
                   shortNameUOMProductDetail, expiryDateProductDetail, manufactureDateProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail READONLY, componentsPriceProductDetail ON CHANGE changeComponentsPriceProductDetail(pd),
                   costPriceProductDetail
    PROPERTIES(pd) markupProductDetail ON CHANGE changeMarkupProductDetail(pd) BACKGROUND backgroundMarkupProductDetail(pd),
                   pricePercentProductDetail SHOWIF isPricePercentOrder(o) ON CHANGE changePricePercentProductDetail(pd), 
                   calcPriceCoeffProductDetail SHOWIF isPriceCoeffOrder(o) ON CHANGE changePriceCoeffProductDetail(pd),                   
                   priceProductDetail ON CHANGE changeProductsPriceProductDetail(pd), sumProductDetail
    PROPERTIES(pd) BACKGROUND backgroundVATOrder(o) SHOWIF VATProductOrder(o) valueVATProductDetail
    PROPERTIES(pd) ADDOBJ, deletepd=DELETESESSION
    PROPERTIES(o) TODRAW pd createProductsOrder, fillPriceProductsOrder, deleteProductDetailOrder

    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, bruttoNameSkuComponentDetail ON EDIT editBruttoSkuComponentDetail(cd), nameBatchComponentDetail ON CHANGE changeBatchComponentDetail(cd) SHOWIF showBatchComponentDetail(cd),
                   nameMaterialComponentDetail, 
                   idComponentComponentDetail SHOWIF showIDs(), nameComponentComponentDetail,    
                   fullNameBOMComponentDetail, shortNameUOMComponentDetail READONLY, bruttoQuantityComponentDetail ON SHORTCUT updateComponentsOrder(o)
    PROPERTIES(cd) BACKGROUND backgroundSubstitutesOrder(o) substituteNameSkuComponentDetail ON CHANGE chooseSubstituteComponentDetail(cd), substituteQuantityComponentDetail
    PROPERTIES(cd) costComponentDetail, priceComponentDetail
    PROPERTIES(cd) sumComponentDetail

    PROPERTIES(o) TODRAW cd createComponentsOrder, createRecComponentsOrder, createForRecComponentsOrder
    PROPERTIES(cd) TODRAW cd expandComponentDetail SHOWIF productComponentDetail(cd)
    PROPERTIES(cd) ADDOBJ, deletecd=DELETESESSION
    PROPERTIES(o) TODRAW cd deleteComponentsOrder

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder, bruttoBalanceSkuOrder

    PROPERTIES(s,o) BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder ON CHANGE chooseSubstituteSkuOrder(s,o), 
                    multiplierSkuOrder, substituteQuantitySkuOrder 
    PROPERTIES(s,o) READONLY bruttoNotSubstituteQuantitySkuOrder
    FILTERS bruttoQuantitySkuOrder(s,o)

    PROPERTIES(o) FORCE PANEL namePriceListTypeOrder, VATComponentOrder  BACKGROUND backgroundVATOrder(o)//, nameComponentsCalcPriceListTypeOrder

    OBJECTS su = Substitute
    PROPERTIES(su) READONLY nameToSkuSubstitute, multiplierSubstitute
    PROPERTIES(su,s,o) isSubstituteSkuOrder ON CHANGE changeSubstituteSkuOrder(su,s,o)
    PROPERTIES     READONLY currentBalanceSubstituteOrder(su,o), bruttoBalanceToSkuSubstituteOrder(su,o)
    FILTERS fromSkuSubstitute(su) == s
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroupSku(toSkuSubstitute(su)) 'F10' DEFAULT 
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) quantityComponentDetailSkuOrder, currentBalanceSkuPriceStockOrder BACKGROUND backgroundBalanceSkuPriceStockOrder(sk,o), costSkuOrder, dataBruttoPriceSkuOrder,  
                    valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF VATOrder(o)
    FILTERS quantityComponentDetailSkuOrder(sk,o)    
        
    PROPERTIES namePriceStockOrder(o)    
           
    OBJECTS sku = Sku
    PROPERTIES(sku) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(sku,o) READONLY currentBalanceSkuPriceStockOrder, calcCostSkuOrder, priceStockSkuOrder
    PROPERTIES(sk,sku) READONLY multiplierSubstituteFromToSku FORCE GRID 
    PROPERTIES READONLY currentBalanceSkuPriceStockOrderSkuFromTo(o,sk,sku)
    
    PROPERTIES fillSubstitutePriceOrderSkuFromTo(o,sk,sku), fillSubstitutePriceMaxOrder(o) FORCE PANEL TODRAW sk, fillSubstitutePriceMinOrder(o) FORCE PANEL TODRAW sk,
               fillSubstitutePriceMaxBalanceOrder(o) FORCE PANEL TODRAW sk
        
    FILTERGROUP filter1
        FILTER 'Доступные замены' uniqueSubstituteFromToSku(sk,sku) 'F9'     
    FILTERGROUP filter2
        FILTER 'С остатком' currentBalanceSkuPriceStockOrder(sku,o) 'F8' DEFAULT                                                          

    EVENTS
        ON OK prePostOrder(o)
    EDIT Order OBJECT o
;

DESIGN order {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            type = TABBED;
            NEW row1 {
                caption = 'Изделия';
                NEW row111{
                    caption = 'Цена изделий';
                    type = CONTAINERH;
                    MOVE PROPERTY(nameCalcPriceListTypeOrder(o));
                    MOVE PROPERTY(nameProductsPriceListTypeOrder(o));
                    MOVE PROPERTY(VATProductOrder(o));
                }
                MOVE pd.box;
            }
            MOVE cd.box { caption = 'Компоненты';}
            NEW row2 {
                caption = 'Замена';
                type = SPLITH;                    
                MOVE s.box {fill = 2;}
                MOVE su.box;
            }
            NEW price {
                caption = 'Цены';
                type = SPLITH ;
                NEW price1 {
                    fill = 1;
                    type = CONTAINERV;
                    NEW price11{
                        caption = 'Цена компонент';
                        type = CONTAINERH;
                        MOVE PROPERTY(namePriceListTypeOrder(o));
                        MOVE PROPERTY(VATComponentOrder(o));
                    }
                    MOVE sk.box;  
                }                
                       
                NEW price2 {
                    fill = 1;
                    type = CONTAINERV;
                    NEW price2a { 
                        fill = 1;
                        type = CONTAINERV;
                        NEW price2a1{
                            caption = 'Фильтр складов для цен';
                            MOVE PROPERTY(namePriceStockOrder(o)); 
                        }
                        MOVE sku.box;  
                    }
                    NEW price2b {
                        type = CONTAINERV;
                        fill = 1;
                    }
                }  
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                MOVE o.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPostedOrder(o)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameNumeratorOrder(o));
                    MOVE PROPERTY(numberOrder(o));
                    MOVE PROPERTY(seriesOrder(o));
                    MOVE PROPERTY(dateOrder(o));
                    MOVE PROPERTY(timeOrder(o));
                }
                NEW headerRow11 {
                    type = CONTAINERH;
                    NEW headerRowC {
                        caption = 'Организация';
                        MOVE PROPERTY(nameCompanyOrder(o));
                    }
                    NEW headerRow111 {
                        caption = 'Склады';
                        type = CONTAINERH;
                        MOVE PROPERTY(nameComponentsStockOrder(o));
                        MOVE PROPERTY(nameProductsStockOrder(o));
                    }
                    NEW headerRow112 {
                        type = CONTAINERH;
                    }
                }
                NEW headerRow12 {
                    type = CONTAINERH;
                    MOVE o.documentPrm {
                        type = CONTAINERH;
                    }
                    NEW timeRow {
                        caption = 'Срок действия';
                        type = CONTAINERH;
                        MOVE PROPERTY(fromDateOrder(o));
                        MOVE PROPERTY(toDateOrder(o));
                    }
                }
                NEW headerExtraParams {
                    caption = 'Дополнительные параметры';
                    type = CONTAINERH;
                    MOVE PROPERTY (calcBOMPriceOrder(o));
                    MOVE PROPERTY (isPricePercentOrder(o));
                    MOVE PROPERTY (isPriceCoeffOrder(o));
                } 
            }

            MOVE o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumProductDetailOrder(o)) { preferredCharWidth = 13;}
    }
}
editOrder 'Редактировать' (order) = ACTION EDITFORM Order;

//WHEN SESSION FORMS order CHANGED(bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order)) DO                                              
//    substituteQuantitySkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);                              
//                   
//WHEN SESSION FORMS order CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO
//    substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail));                    
//                    
//WHEN SESSION FORMS order CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
//    CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO 
//        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));

useSubstituteComponentDetail 'Можно использовать замену' (detail) = useSubstituteBOM(
    uniqueSubstituteFromToSku(bruttoSkuComponentDetail(detail), substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))), 
    BOMComponentDetail(detail));    
                
usePrevSubstituteComponentDetail 'Можно использовать замену' (detail) = useSubstituteBOM(
    uniqueSubstituteFromToSku(bruttoSkuComponentDetail(detail), PREV(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail)))), 
    BOMComponentDetail(detail));                  

WHEN SESSION FORMS order CHANGED(componentsStockOrder(order)) DO {                                              
    priceStockOrder (order) <- componentsStockOrder(order);
}

WHEN SESSION FORMS order CHANGED(bruttoSubstituteQuantitySkuOrder(sku,order)) 
    OR CHANGED(multiplierSkuOrder(sku, order)) DO {                                              
        substituteQuantitySkuOrder(sku, order) <- bruttoSubstituteQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);                              
    }      
                   
WHEN SESSION FORMS order 
    CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) AND useSubstituteComponentDetail(detail) DO {
        substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail)); 
    }                       
                    
WHEN SESSION FORMS order 
    (CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
     CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail)))) AND useSubstituteComponentDetail(detail) DO { 
        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));
    } 
WHEN SESSION FORMS order DROPPED (multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO {
        substituteSkuComponentDetail (detail) <- NULL WHERE usePrevSubstituteComponentDetail(detail); 
        substituteQuantityComponentDetail (detail) <- NULL WHERE usePrevSubstituteComponentDetail(detail);    
    }   
 
calcPriceComponentDetail(pt, detail) =  OVERRIDE dataBruttoPriceSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail)), 
                                                              prevPriceBPriceListTypeBatchStockDateTime(pt,
                                                                                                        batchComponentDetail(detail),
                                                                                                        componentsStockOrder(orderComponentDetail(detail)),
                                                                                                        dateTimeOrder(orderComponentDetail(detail)));
WHEN SESSION FORMS order (CHANGED(dataBruttoPriceSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail))) OR 
                          CHANGED(batchComponentDetail(detail)) OR 
                          CHANGED(componentsStockOrder(orderComponentDetail(detail))) OR 
                          CHANGED(dateTimeOrder(orderComponentDetail(detail)))) AND
                          pt == priceListTypeOrder(orderComponentDetail(detail)) NOINLINE (pt) DO
    priceComponentDetail (detail) <- calcPriceComponentDetail(pt, detail); 
         
calcCostComponentDetail = OVERRIDE costSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail)), costBatch(batchComponentDetail(detail));    
WHEN SESSION FORMS order CHANGED(costSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail))) OR CHANGED(batchComponentDetail(detail)) DO
    costComponentDetail (detail) <- calcCostComponentDetail(detail);           
       
WHEN SESSION FORMS order CHANGED(productProductDetail(detail)) DO
    skuProductDetail(detail) <- skuProduct(productProductDetail(detail));                 
              
countProductsSku (sku) = GROUP SUM 1 BY skuProduct(p) PERSISTENT ;
//defaultProductSku (sku)= GROUP MIN product BY skuProduct(product);

countProductsSkuStockDate (sku, stock, date) = GROUP SUM 1 IF isActiveBOMDate(BOMProduct(p), date) AND inBOMStock(BOMProduct(p), stock) BY skuProduct(p), stock, date;
defaultProductSkuStockDate (sku, stock, date)= GROUP MIN p IF isActiveBOMDate(BOMProduct(p), date) AND inBOMStock(BOMProduct(p), stock) BY skuProduct(p), stock, date;

WHEN SESSION FORMS order CHANGED(skuProductDetail(d)) NOINLINE DO {
    productProductDetail(d) <- defaultProductSkuStockDate(skuProductDetail(d), componentsStockProductDetail(d), dateProductDetail(d))
        WHERE countProductsSkuStockDate(skuProductDetail(d), componentsStockProductDetail(d), dateProductDetail(d)) == 1;
}     
                                                                     
countBOMsMaterialSku (material) = GROUP SUM 1 IF materialComponent(c) AS Sku BY materialComponent(c) PERSISTENT;

EXTEND FORM BOMs
    FILTERGROUP prod FILTER 'Есть спецификации' countProductsSku(p1) 'F8' DEFAULT   
    FILTERGROUP comp FILTER 'Есть спецификации' countBOMsMaterialSku(c2) 'F7' DEFAULT                                                          
                                                  
;                                                               
countComponentsSkuStockDate (material, stock, date) = GROUP SUM 1 IF isActiveBOMDate(BOMComponent(c), date) AND inBOMStock(BOMComponent(c),stock) BY materialComponent(c) AS Sku, stock, date;
defaultComponentsSkuStockDate (material, stock, date)= GROUP MIN c IF isActiveBOMDate(BOMComponent(c), date) AND inBOMStock(BOMComponent(c),stock) BY materialComponent(c) AS Sku, stock, date;                                                                  
                                                                     
//WHEN SESSION FORMS order CHANGED(bruttoSkuComponentDetail(d)) NOINLINE DO {
//    componentComponentDetail(d) <- defaultComponentsSku(bruttoSkuComponentDetail(d))
//        WHERE countComponentsSku(bruttoSkuComponentDetail(d)) == 1;
//}  todo: переделано, потому что не срабатывает событие по CHANGED(componentComponentDetail(d)), которое следует за ним.

WHEN SESSION FORMS order CHANGED(bruttoSkuComponentDetail(d)) AND NOT CHANGED(componentComponentDetail(d)) AND NOT CHANGED(BOMComponentDetail(d)) AND countComponentsSkuStockDate(bruttoSkuComponentDetail(d), componentsStockComponentDetail(d), dateComponentDetail(d)) == 1 NOINLINE DO {
    componentComponentDetail(d) <- defaultComponentsSkuStockDate(bruttoSkuComponentDetail(d), componentsStockComponentDetail(d), dateComponentDetail(d));
    BOMComponentDetail(d) <- BOMComponent(componentComponentDetail(d));              
}
WHEN SESSION FORMS order CHANGED(componentComponentDetail(d)) AND NOT CHANGED(BOMComponentDetail(d)) NOINLINE DO {
    BOMComponentDetail(d) <- BOMComponent(componentComponentDetail(d));    
    bruttoSkuComponentDetail(d) <- skuMaterial(materialComponent(componentComponentDetail(d)));       
}
 
WHEN SESSION FORMS order CHANGED(productProductDetail(d)) NOINLINE DO {
    pricePercentProductDetail(d) <- pricePercentProduct(productProductDetail(d))
        WHERE pricePercentProduct(productProductDetail(d));
} 


WHEN SESSION FORMS order (CHANGED(expiryDateProductDetail(d)) OR CHANGED(skuProductDetail(d))) AND expiryDateProductDetail(d) DO {
    manufactureDateProductDetail(d) <- calcManufactureDateProductDetail(d);            
} 
WHEN SESSION FORMS order (CHANGED(manufactureDateProductDetail(d)) OR CHANGED(skuProductDetail(d))) AND manufactureDateProductDetail(d) DO {
    expiryDateProductDetail(d) <- calcExpiryDateProductDetail(d);            
}  

overShowEditOrder = ABSTRACT BOOLEAN (Order);
overShowDeleteOrder = ABSTRACT BOOLEAN (Order);

FORM orders 'Производственные заказы'

    OBJECTS o = Order
    PROPERTIES(o) READONLYIF isReadonly() isClosedOrder, isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder, nameCompanyOrder,
                  nameComponentsStockOrder, nameProductsStockOrder,
                  fromDateOrder, toDateOrder
    PROPERTIES(o) READONLY quantityProductDetailOrder, sumProductDetailOrder, quantityComponentDetailOrder, sumComponentDetailOrder
    PROPERTIES(o) READONLYIF isReadonly() nameCalcPriceListTypeOrder, namePriceListTypeOrder, noteOrder

    PROPERTIES(o) addo=ADDFORM, EDITFORM SHOWIF overShowEditOrder(o)
    PROPERTIES(o) closeOrder SHOWIF isOpenedOrder(o), openOrder SHOWIF isClosedOrder(o)      
    PROPERTIES(o) deleteo=DELETE FORCE PANEL TOOLBAR SHOWIF overShowDeleteOrder(o)
    PROPERTIES (o) READONLY FORCE PANEL createdNameUserOrder, createdTimeOrder, createdHostnameComputerOrder, 
                                        postedNameUserOrder, postedTimeOrder, postedHostnameComputerOrder

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, idProductProductDetail SHOWIF showIDs(), nameProductProductDetail, 
                   shortNameUOMProductDetail, expiryDateProductDetail, manufactureDateProductDetail, quantityProductDetail, 
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, 
                   costPriceProductDetail, markupProductDetail, pricePercentProductDetail SHOWIF isPricePercentOrder(o), calcPriceCoeffProductDetail SHOWIF isPriceCoeffOrder(o),
                   priceProductDetail, sumProductDetail 
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, bruttoNameSkuComponentDetail, nameBatchComponentDetail SHOWIF showBatchComponentDetail(cd), 
                   idComponentComponentDetail SHOWIF showIDs(), nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail//, overCalcPriceComponentDetail 
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) substituteNameSkuComponentDetail, substituteQuantityComponentDetail
    PROPERTIES(cd) READONLY costComponentDetail, priceComponentDetail
    PROPERTIES(cd) READONLY sumComponentDetail

    FILTERS orderComponentDetail(cd)==o

    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder ON CHANGE chooseSubstituteSkuOrder(s,o), multiplierSkuOrder, substituteQuantitySkuOrder 
    FILTERS bruttoQuantitySkuOrder(s,o)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) READONLY quantityComponentDetailSkuOrder, costSkuOrder, dataBruttoPriceSkuOrder, 
                    valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF VATOrder(o)
    FILTERS quantityComponentDetailSkuOrder(sk,o)                

;
DESIGN orders {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        MOVE o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1;
            MOVE pd.box {
                caption = 'Изделия';
            }
            MOVE cd.box {
                caption = 'Компоненты';
            }
            MOVE s.box {
                caption = 'Замены';
            }
            MOVE sk.box {
                caption = 'Цены';
            }            
            NEW documentHistory {
                caption = 'История';

                MOVE o.created;
                MOVE o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    type = CONTAINERV;
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(orders);
@defineFilterIsOpened (order, orders, o);
@extendFormFilterAccessStock(Order, o, orders, Production.productsStock, company);
NAVIGATOR {
    manufacturingDocuments {
        ADD orders;
    }
    manufacturingMasterData {
        ADD operations;
    }
}
FORM componentDetails 'Строка компонента'
    OBJECTS d = ComponentDetail
    PROPERTIES(d) READONLY indexComponentDetail, nameSkuComponentDetail, shortNameUOMComponentDetail,
                           descriptionComponentDetail, quantityComponentDetail

    DIALOG ComponentDetail OBJECT d
;

FORM productDetails 'Строка изделия'
    OBJECTS d = ProductDetail
    PROPERTIES(d) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, 
                  expiryDateProductDetail, manufactureDateProductDetail, descriptionProductDetail,
                  quantityProductDetail, priceProductDetail, sumProductDetail

    DIALOG ProductDetail OBJECT d
;

// ---------- Требование на сырье -------- //

FORM requestSkusProductOrder 'Требование на сырье по изделиям'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStockOrder, nameComponentsStockOrder, nameProductsStockOrder, numberOrder, seriesOrder, seriesNumberOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder
                  
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, idProductProductDetail, nameProductProductDetail, 
                   shortNameUOMProductDetail, quantityProductDetail, calcComponentsPriceProductDetail, componentsPriceProductDetail, 
                   costPriceProductDetail, markupProductDetail, pricePercentProductDetail, calcPriceCoeffProductDetail,
                   priceProductDetail, sumProductDetail
    FILTERS orderProductDetail(pd)==o                  
                  
    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail, shortNameUOMSkuComponentDetail,
                   idBarcodeSkuComponentDetail, quantityComponentDetail

    FILTERS orderComponentDetail(cd)==o,
            BOMComponentDetail(cd) == BOMProductDetail(pd)
;
printRequestSkusProductOrder'Требование на сырье по изделиям' (order) = ACTION FORM requestSkusProductOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;

currentBalanceSkuComponentsStockOrder 'Текущий остаток' = currentBalanceSkuStock(sku, componentsStockOrder(order));
FORM requestSkusOrder 'Требование на сырье'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStockOrder, nameComponentsStockOrder, nameProductsStockOrder, numberOrder, seriesOrder, seriesNumberOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder
                  
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) READONLY quantityComponentDetailSkuOrder, bruttoBalanceSkuOrder
    FILTERS quantityComponentDetailSkuOrder(sk,o)    
;
printRequestSkusOrder 'Требование на сырье' (order) = ACTION FORM requestSkusOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;
EXTEND FORM orders
    PROPERTIES(o) FORCE PANEL printRequestSkusOrder, printRequestSkusProductOrder
;
DESIGN orders {printTab { MOVE o.print {align = LEADING;}}}
//------------------------------------------ Опеределение операции для order ------------------------------------//

operationOrder = DATA Operation (Order) PERSISTENT;
nameOperationOrder 'Операция' = nameOperation(operationOrder(order));

operationProductDetail (d) = operationOrder(orderProductDetail(d));
nameOperationProductDetail 'Операция' (d)= nameOperation(operationProductDetail (d));

operationComponentDetail (d) = operationOrder(orderComponentDetail(d));
nameOperationComponentDetail 'Операция' (d)= nameOperation(operationComponentDetail (d));

//-- Партия для строки компонента
hideBatchComponentOperation 'Не показывать партии' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) hideBatchComponentOperation
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(hideBatchComponentOperation(o));
    }
}

hideBatchComponentOrder = hideBatchComponentOperation(operationOrder(o));
showBatchComponentOrder(o) = o IS Order AND NOT hideBatchComponentOrder(o); 
hideBatchComponentDetail (d) += hideBatchComponentOperation(operationComponentDetail(d));

DESIGN options {
    pane {        
        NEW productionOrders {
            caption = 'Производственный заказ';
        }
    }
}

@defineDocumentOperationConstraint(order, productionOrders, 'производственный заказ', Production);
@extendFormFilterRoleAccess(order, o, orders);


@defineDocumentOperationLegalEntity(order, company, 'Организация');
@deriveDocumentOperationLegalEntity(order, company, order);
CONSTRAINT companyOrder(order) AND NOT isCompanyLegalEntity(companyOrder(order))
    CHECKED BY companyOrder MESSAGE 'Для производственного заказа выбрана организация, не являющаяся компанией';

copyOrder 'Копировать' = ACTION (order) NEWSESSION {
    FOR ADDOBJ o = Order DO {
        companyOrder(o) <- companyOrder(order);
        componentsStockOrder(o) <- componentsStockOrder(order);
        productsStockOrder(o) <- productsStockOrder(order);
        fromDateOrder(o) <- fromDateOrder(order);
        toDateOrder(o) <- toDateOrder(order);
        productsPriceListTypeOrder(o) <- productsPriceListTypeOrder(order);
        priceListTypeOrder(o) <- priceListTypeOrder(order);
        VATProductOrder(o) <- VATProductOrder(order);
        VATComponentOrder(o) <- VATComponentOrder(order);
        noteOrder(o) <- noteOrder(order);
        operationOrder(o) <- operationOrder(order);
        
        FOR orderProductDetail(productDetail) == order ADDOBJ p=ProductDetail DO {
            orderProductDetail(p) <- o;
            skuProductDetail(p) <- skuProductDetail(productDetail);
            productProductDetail(p) <- productProductDetail(productDetail);
            quantityProductDetail(p) <- quantityProductDetail(productDetail);
            markupProductDetail(p) <- markupProductDetail(productDetail);
            pricePercentProductDetail(p) <- pricePercentProductDetail(productDetail);
        }
        FOR orderComponentDetail(componentDetail) == order ADDOBJ c=ComponentDetail DO {
            orderComponentDetail(c) <- o;
            bruttoSkuComponentDetail(c) <- bruttoSkuComponentDetail(componentDetail);
            productComponentDetail(c) <- productComponentDetail(componentDetail);
            componentComponentDetail(c) <- componentComponentDetail(componentDetail);
            bruttoQuantityComponentDetail(c) <- bruttoQuantityComponentDetail(componentDetail);
            BOMComponentDetail(c) <- BOMComponentDetail(componentDetail);

        }
        FOR bruttoQuantitySkuOrder(sku,order) DO {
            dataBruttoPriceSkuOrder(sku,o) <- dataBruttoPriceSkuOrder(sku,order);
            costSkuOrder(sku,o) <- costSkuOrder(sku,order);
            substituteSkuOrder(sku,o) <- substituteSkuOrder(sku,order);
            multiplierSkuOrder(sku,o) <- multiplierSkuOrder(sku,order);
        }
    
    FORM order OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM order
    PROPERTIES(o) nameOperationOrder
;

DESIGN order{
    o.documentHeader{
        NEW header1 {
            type = CONTAINERH; 
            MOVE PROPERTY(isPostedOrder(o));
            MOVE PROPERTY(nameOperationOrder(o));
        }
        NEW header2 {
            type = CONTAINERH; 
            MOVE PROPERTY(nameNumeratorOrder(o));   
            MOVE PROPERTY(numberOrder(o));  
            MOVE PROPERTY(seriesOrder(o));  
            MOVE PROPERTY(dateOrder(o));  
            MOVE PROPERTY(timeOrder(o));  
        }        
    }
}
EXTEND FORM orders
    PROPERTIES(o) nameOperationOrder AFTER nameProductsStockOrder(o) READONLY, copyOrder
;

@defineDocumentOperationStock(order, components, 'Склад компонент');
@deriveDocumentOperationStock(order, components, order);
@defineDocumentOperationStock(order, products, 'Склад изделий');
@deriveDocumentOperationStock(order, products, order);

@defineDocumentOperationRole(order);

@defineDocumentHeaderPriceListType (operation, calcPriceListType, , ' (надбавка-изделие)');
@deriveDocumentOperationProperty(Order, calcPriceListType);

@defineDocumentHeaderPriceListType (operation, priceListType, products, ' (изделие)');
@deriveDocumentOperationProperty(Order, productsPriceListType);
@defineDocumentHeaderPriceListType (operation, priceListType, , ' (потребность)');
@deriveDocumentOperationProperty(Order, priceListType);

notRecalculateMarkupOperation 'Не пересчитывать наценку' = DATA BOOLEAN (Operation);
notRecalculateMarkupOrder(order) += notRecalculateMarkupOperation(operationOrder(order));

EXTEND FORM operation
     PROPERTIES(o) nameCalcPriceListTypeOperation, nameProductsPriceListTypeOperation, namePriceListTypeOperation, notRecalculateMarkupOperation

 ;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(nameCalcPriceListTypeOperation(o));
        MOVE PROPERTY(nameProductsPriceListTypeOperation(o));
        MOVE PROPERTY(namePriceListTypeOperation(o));
        MOVE PROPERTY(notRecalculateMarkupOperation(o));
    }
}

@deriveDocumentOperationProperty(order, isPricePercent);
@deriveDocumentOperationProperty(order, isPriceCoeff);

@deriveDocumentOperationProperty(order, calcBOMPrice);

//-------------------- Подбор изделий -----------------//
productDetailOrderProduct (order,product) =  GROUP MAX productDetail
    BY orderProductDetail(productDetail), productProductDetail(productDetail);

quantityOrderProduct 'Кол-во изделий в документе' (order,product) =  GROUP SUM quantityProductDetail(productDetail)
    BY orderProductDetail(productDetail), productProductDetail(productDetail);    
    
changeQuantityProductOrder = ACTION (product, order) {
    REQUEST NUMERIC[16,5] INPUT;
    IF productDetailOrderProduct(order,product) THEN {
        IF requestedNumeric() THEN {
            quantityProductDetail(detail) <- requestedNumeric() WHERE detail == productDetailOrderProduct(order,product);
        } ELSE {
            DELETE detail WHERE detail == productDetailOrderProduct(order,product);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = ProductDetail DO {
                orderProductDetail(d) <- order;
                productProductDetail(d) <- product;
                quantityProductDetail (d) <- requestedNumeric();
            }
        }
    }
}


EXTEND FORM order

    TREE skuTree g = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(g), nameSkuGroup(g)
    ORDER BY orderSkuGroup(g), nameSkuGroup(g)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(g) 'F5' DEFAULT
    FILTERGROUP product FILTER 'Готовые изделия' filterProductSkuGroup(g) 'shift F5' DEFAULT
    
    OBJECTS p=Product
    PROPERTIES(p) READONLY idProduct SHOWIF showIDs()
    PROPERTIES(p) READONLY descriptionProduct, nameSkuProduct, shortNameUOMProduct
    PROPERTIES(o,p) quantityOrderProduct ON CHANGE changeQuantityProductOrder(p,o)
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActiveBOM(BOMProduct(p)) 'F7'            
        FILTER 'Активные' isActiveBOM(BOMProduct(p)) OR (fromDateBOM(BOMProduct(p)) > currentDate()) 'F8' DEFAULT
        
    ORDER BY nameSkuProduct(p)
    
    FILTERS                isParentSkuGroupSku(g, skuProduct(p)),
                           activeSku(skuProduct(p)),
                           (inBOMStock(BOMProduct(p), componentsStockOrder(o)) AND countStocksBOM(BOMProduct(p))) OR NOT countStocksBOM(BOMProduct(p))
;

DESIGN order{
    row1 {
        NEW tabContainer AFTER row111 {
            fill = 1;
            type = TABBED;
            MOVE pd.box;
            NEW selectPane {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                MOVE skuTree.tree.box { caption = 'Группы'; }                
                MOVE p.box;
            }
        
        }
    }
}

editProductDetail 'Редактировать' (d) = ACTION (d) NEWSESSION {
    FORM order OBJECTS o = orderProductDetail(d), pd = d MANAGESESSION DOCKEDMODAL;
}

//-------------------- Подбор компонентов -----------------//
componentDetailOrderBruttoSku (order,bruttoSku) =  GROUP MAX componentDetail
    BY orderComponentDetail(componentDetail), bruttoSkuComponentDetail(componentDetail);

bruttoQuantityOrderBruttoSku 'Кол-во брутто компонентов в документе' (order,bruttoSku) =  GROUP SUM bruttoQuantityComponentDetail(componentDetail)
    BY orderComponentDetail(componentDetail), bruttoSkuComponentDetail(componentDetail);    
    
changeBruttoQuantityBruttoSkuOrder = ACTION (bruttoSku, order) {
    REQUEST NUMERIC[16,5] INPUT;
    IF componentDetailOrderBruttoSku(order,bruttoSku) THEN {
        IF requestedNumeric() THEN {
            bruttoQuantityComponentDetail(detail) <- requestedNumeric() WHERE detail == componentDetailOrderBruttoSku(order,bruttoSku);
        } ELSE {
            DELETE detail WHERE detail == componentDetailOrderBruttoSku(order,bruttoSku);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = ComponentDetail DO {
                orderComponentDetail(d) <- order;
                bruttoSkuComponentDetail(d) <- bruttoSku;
                bruttoQuantityComponentDetail (d) <- requestedNumeric();
            }
        }
    }
}

prevCurrentBalanceSkuOrder 'Остаток' (sku, o) = prevCurrentBalanceSkuStock(sku, componentsStockOrder(o));


EXTEND FORM order

    TREE skuTree1 g1 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(g1), nameSkuGroup(g1)
    ORDER BY orderSkuGroup(g1), nameSkuGroup(g1)
    FILTERGROUP inactive1 FILTER 'Активные' activeSkuGroup(g1) 'F5' DEFAULT
    FILTERGROUP component FILTER 'Сырье' filterComponentSkuGroup(g1) 'shift F5' DEFAULT

    
    OBJECTS p1=Sku
    PROPERTIES(p1) READONLY idSku SHOWIF showIDs()
    PROPERTIES(p1) READONLY nameSku, shortNameUOMSku
    PROPERTIES(o,p1) bruttoQuantityOrderBruttoSku ON CHANGE changeBruttoQuantityBruttoSkuOrder(p1,o)
    PROPERTIES(p1, o) prevCurrentBalanceSkuOrder 

    ORDER BY nameSku(p1)
    
    FILTERS isParentSkuGroupSku(g1, p1),
            activeSku(p1)    
            
    FILTERGROUP filter
        FILTER 'С остатком (скл. комп.)' prevCurrentBalanceSkuOrder(p1, o) 'F10' DEFAULT
        FILTER 'В документе (брутто)' bruttoQuantityOrderBruttoSku(o, p1) 'F9'            
            
;

DESIGN order{
    specification.box {
        NEW tabContainerComponent BEFORE row2 {
            fill = 1;
            type = TABBED;
            caption = 'Компоненты';
            MOVE cd.box;
            NEW selectPane1 {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                MOVE skuTree1.tree.box { caption = 'Группы'; }                
                MOVE p1.box;
            }    
        }    
    }
}
balanceBProductDetail 'Остаток (до)' (d) = prevBalanceBSkuStockDateTime(skuProductDetail(d), productsStockProductDetail(d), dateTimeProductDetail(d));
    
EXTEND FORM order
    PROPERTIES (pd) READONLY BEFORE deletepd balanceBProductDetail
;

@defineMovementSku(productDetail, productsStock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(productDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(componentDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(productDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(componentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

@defineMovementPriceSku(productDetail, productsStock); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши  изменение цены товара

showMovementBruttoSkuStockComponentDetail 'Показать движение товара по складу' (componentDetail) = ACTION FORM movementSkuStock OBJECTS s = skuComponentDetail(componentDetail), st = componentsStockComponentDetail(componentDetail) MODAL SHORTCUT bruttoNameSkuComponentDetail;
showMovementBruttoSkuComponentDetail 'Показать движение товара' (componentDetail) = ACTION FORM movementSku OBJECTS s = skuComponentDetail(componentDetail) MODAL SHORTCUT bruttoNameSkuComponentDetail;
showBalancesBruttoSkuStockComponentDetail 'Показать остатки товара' (componentDetail) = ACTION FORM balancesSkuStock OBJECTS s = skuComponentDetail(componentDetail) MODAL SHORTCUT bruttoNameSkuComponentDetail;
showMovementPriceBruttoSkuStockComponentDetail 'Показать изменение цены товара по складу' (componentDetail) = ACTION FORM movementPriceSkuStock OBJECTS s = skuComponentDetail(componentDetail), st = componentsStockComponentDetail(componentDetail) MODAL SHORTCUT bruttoNameSkuComponentDetail;
showMovementPriceBruttoSkuStocksComponentDetail 'Показать изменение цены товара' (componentDetail) = ACTION FORM movementPriceSkuStocks OBJECTS s = skuComponentDetail(componentDetail) MODAL SHORTCUT bruttoNameSkuComponentDetail;

showMovementSubstituteSkuStockComponentDetail 'Показать движение товара по складу' (componentDetail) = ACTION FORM movementSkuStock OBJECTS s = skuComponentDetail(componentDetail), st = componentsStockComponentDetail(componentDetail) MODAL SHORTCUT substituteNameSkuComponentDetail;
showMovementSubstituteSkuComponentDetail 'Показать движение товара' (componentDetail) = ACTION FORM movementSku OBJECTS s = skuComponentDetail(componentDetail) MODAL SHORTCUT substituteNameSkuComponentDetail;
showBalancesSubstituteSkuStockComponentDetail 'Показать остатки товара' (componentDetail) = ACTION FORM balancesSkuStock OBJECTS s = skuComponentDetail(componentDetail) MODAL SHORTCUT substituteNameSkuComponentDetail;
showMovementPriceSubstituteSkuStockComponentDetail 'Показать изменение цены товара по складу' (componentDetail) = ACTION FORM movementPriceSkuStock OBJECTS s = skuComponentDetail(componentDetail), st = componentsStockComponentDetail(componentDetail) MODAL SHORTCUT substituteNameSkuComponentDetail;
showMovementPriceSubstituteSkuStocksComponentDetail 'Показать изменение цены товара' (componentDetail) = ACTION FORM movementPriceSkuStocks OBJECTS s = skuComponentDetail(componentDetail) MODAL SHORTCUT substituteNameSkuComponentDetail;

@defineBalancesBatch(componentDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши движение по партии

showBOMProductDetail'Показать спецификацию' (d) = ACTION FORM BOM OBJECTS b = BOMProductDetail(d), p = productProductDetail(d)  MODAL SHORTCUT nameProductProductDetail;
showBOMComponentDetail'Показать спецификацию' (d) = ACTION FORM BOM OBJECTS b = BOMComponentDetail(d), c = componentComponentDetail(d)  MODAL SHORTCUT nameComponentComponentDetail;
showBOMNameComponentDetail'Показать спецификацию' (d) = ACTION FORM BOM OBJECTS b = BOMComponentDetail(d)  MODAL SHORTCUT fullNameBOMComponentDetail;


@defineOperationChangesDocument(order, Order, preventChangesDocument, createdUser);

overShowEditOrder (i) += showEditDeleteUserOrder(i) AND isOpenedOrder(i);
overShowDeleteOrder (i) += showEditDeleteUserOrder(i) AND isOpenedOrder(i); 