MODULE ProductionOrder;

REQUIRE Substitute, PriceListType, PriceListCalc, StockTax, ProductionOperation;

NAMESPACE Production;

// ----------------  Заказ ------------------- //
CLASS Order 'Производственный заказ';
TABLE order(Order);

@defineExternalizable(order, VARSTRING[100]);
@defineDocumentHeaderTime(Order);
@deriveDocumentHeaderTimePrefix(Order, );

isOrder (o) = o IS Order;
    
@defineDocumentHeaderNote(Order);

@defineDocumentHeaderNumber(Order);

@defineNumeratedDefault(Order, 'Производственные заказы', 'ПЗ');

@defineDocumentHeaderCreated(Order);
@defineDocumentHeaderPosted(Order);
@defineDocumentHeaderClosed(Order);

@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');

@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка-изделие)');
@defineDocumentHeaderPriceListType (order, priceListType, products, ' (изделие)');

VATComponentOrder 'Включает НДС' = DATA BOOLEAN (Order);
VATComponentOrder(order) <- includeVATPriceListType(priceListTypeOrder(order)) WHEN CHANGED(priceListTypeOrder(order));

VATProductOrder 'Включает НДС' = DATA BOOLEAN (Order);
VATProductOrder(order) <- includeVATPriceListType(calcPriceListTypeOrder(order)) OR includeVATPriceListType(productsPriceListTypeOrder(order)) 
    WHEN CHANGED(calcPriceListTypeOrder(order)) OR CHANGED(productsPriceListTypeOrder(order));

backgroundVATOrder 'Цвет' (order) = RGB(255, 255, 224) IF order IS Order;
VATOrder (o) = VATProductOrder(o) OR VATComponentOrder(o);

@defineDocumentHeaderStock (order, stock, 'Склад компонент', components);
@defineDocumentHeaderStock (order, stock, 'Склад изделий', products);

@defineDocumentHeaderDatePrefix (Order, from, ' действия с');
@defineDocumentHeaderDatePrefix (Order, to, ' действия по');

@defineDocumentHeaderDescription(Order, 'Производственный заказ');

// ---------------- Изделия ------------------- //

CLASS ProductDetail 'Строка изделия';
TABLE productDetail (ProductDetail);

@defineExternalizable(productDetail, VARSTRING[100]);
@defineDocumentRelation (order, ProductDetail, );
@defineDocumentDetailIndex (order, ProductDetail);
@defineDocumentDetailActionsCustom (order, ProductDetail);
@defineDocumentDetailPosted (order, ProductDetail);
@defineDocumentDetailClosed (order, ProductDetail);

@defineDocumentDetailTime (order, ProductDetail);
@defineDocumentDetailDatePrefix (order, ProductDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ProductDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ProductDetail);

currencyProductOrder (o) = currencyStock(productsStockOrder(o)) PERSISTENT;
currencyProductDetail (productDetail) = currencyProductOrder(orderProductDetail(productDetail));

@defineDocumentDetailStock (order, productDetail, stock, componentsStock, 'Склад компонент');
@defineDocumentDetailStock (order, productDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustom (productDetail, sku);

CONSTRAINT skuProductDetail(d) AND NOT isProductGroupSku(skuProductDetail(d)) CHECKED  BY skuProductDetail
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';

productProductDetail = DATA Product (ProductDetail);
nameProductProductDetail 'Изделие' (productDetail) = nameMaterial(productProductDetail(productDetail)) IN recognize;
idProductProductDetail 'Код изделия' (d) = idProduct(productProductDetail(d));

UOMProductDetail = UOMProduct(productProductDetail(productDetail));
shortNameUOMProductDetail 'Ед.изм.' (productDetail) = shortNameUOM(UOMProductDetail(productDetail)) IN recognize;

CONSTRAINT skuProductDetail(productDetail) != skuProduct(productProductDetail(productDetail)) CHECKED BY productProductDetail
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';
    
expiryDateProductDetail 'Годен до' = DATA DATE (ProductDetail);
manufactureDateProductDetail 'Дата изготовления' = DATA DATE (ProductDetail);

calcManufactureDateProductDetail (d) = IF expiryMonthSku(skuProductDetail(d)) 
    THEN sumDateMonth(expiryDateProductDetail(d), -expiryMonthSku(skuProductDetail(d)))
    ELSE sumDate(expiryDateProductDetail(d), -expiryDaysSku(skuProductDetail(d)));   
      
calcExpiryDateProductDetail (d) = IF expiryMonthSku(skuProductDetail(d)) 
    THEN sumDateMonth(manufactureDateProductDetail(d), expiryMonthSku(skuProductDetail(d)))
    ELSE sumDate(manufactureDateProductDetail(d), expiryDaysSku(skuProductDetail(d)));      

// Кол-во
@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

quantityProductDetailSkuOrder 'Кол-во изделий в документе' (sku, order) =  GROUP SUM quantityProductDetail(productDetail)
    BY skuProductDetail(productDetail), orderProductDetail(productDetail); 
countProductDetailSkuOrder 'Кол-во строк изделий в документе' (sku, order) = 
    GROUP SUM 1 BY  skuProductDetail(idetail), orderProductDetail(idetail);  
    
//Процент и коэффициент цены
pricePercentProductDetail 'Удельный вес цены,%' = DATA NUMERIC[14,3] (ProductDetail);

isPricePercentOrder 'Удельный вес цены,%' = DATA BOOLEAN (Order);
isPriceCoeffOrder 'Коэффициент цены' = DATA BOOLEAN (Order);

isPricePercentOperation 'Удельный вес цены,%' = DATA BOOLEAN (Operation);
isPriceCoeffOperation 'Коэффициент цены' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) isPricePercentOperation, isPriceCoeffOperation 
;
EXTEND DESIGN operation {
    showContainer {
        ADD PROPERTY(isPricePercentOperation(o));
        ADD PROPERTY(isPriceCoeffOperation(o));
    }
}

// Цены компонент
@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

VATComponentProductDetail (d) = VATComponentOrder(orderProductDetail(d));
VATProductProductDetail 'Включает НДС' (d) = VATProductOrder(orderProductDetail(d));
addVATProductDetail (d) = VATComponentProductDetail(d) AND NOT VATProductProductDetail(d) PERSISTENT;  

calcPriceListTypeProductDetail (productDetail) = calcPriceListTypeOrder(orderProductDetail(productDetail)) PERSISTENT;
productsPriceListTypeProductDetail (productDetail) = productsPriceListTypeOrder(orderProductDetail(productDetail)) PERSISTENT;
markupProductDetail 'Надбавка, %' = DATA NUMERIC[10,4] (ProductDetail);
valueVATProductDetail 'НДС, %' = DATA NUMERIC[10,5] (ProductDetail);

// коэффициент с надбавкой и НДС
multiplierCalcProductDetail (d) = 
    ((100.00 (+) markupProductDetail(d)) *
    (100.00 (+) (valueVATProductDetail(d) IF addVATProductDetail(d))) 
    / 10000) IF d IS ProductDetail PERSISTENT;


// Цены изделий
@defineDocumentDetailPriceCustomPrefix (productDetail, , ' изделия');
costPriceProductDetail 'Себестоимость изделия' = DATA NUMERIC[14,2] (ProductDetail);


sumProductDetail 'Сумма изделия' = DATA NUMERIC[16,2] (ProductDetail);
sumProductDetail(productDetail) <-
    NUMERIC[16,2](roundPriceCurrency((quantityProductDetail(productDetail) * priceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (quantityProductDetail(productDetail)) OR
         CHANGED (priceProductDetail(productDetail)) OR
         CHANGED (currencyProductDetail(productDetail));

sumProductDetailOrder 'Сумма заказанных изделий' (order) = GROUP SUM sumProductDetail(idetail) BY orderProductDetail(idetail) IN documentSum;

// ------------- Компоненты ----------- //
CLASS ComponentDetail 'Строка компонента';
TABLE componentDetail (ComponentDetail);

@defineDocumentRelation (order, ComponentDetail, );
@defineDocumentDetailIndex (order, ComponentDetail);
@defineDocumentDetailActionsCustom (order, ComponentDetail);
@defineDocumentDetailPosted (order, ComponentDetail);
@defineDocumentDetailClosed (order, ComponentDetail);

@defineDocumentDetailTime (order, ComponentDetail);
@defineDocumentDetailDatePrefix (order, ComponentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ComponentDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ComponentDetail);

currencyComponentOrder (o) = currencyStock(componentsStockOrder(o)) PERSISTENT;
currencyComponentDetail (componentDetail) = currencyComponentOrder(orderComponentDetail(componentDetail));

@defineDocumentDetailStock (order, componentDetail, stock, componentsStock, 'Склад компонент') ;
@defineDocumentDetailStock (order, componentDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, brutto, ' (брутто)');
VATComponentDetail(componentDetail) = VATComponentOrder(orderComponentDetail(componentDetail)) PERSISTENT;

componentComponentDetail = DATA Component (ComponentDetail);
nameComponentComponentDetail 'Компонент' (componentDetail) = nameComponent(componentComponentDetail(componentDetail));
idComponentComponentDetail 'Код компонента' (componentDetail) = idComponent(componentComponentDetail(componentDetail));

CONSTRAINT bruttoSkuComponentDetail(d) AND NOT isComponentGroupSku(bruttoSkuComponentDetail(d)) CHECKED  BY bruttoSkuComponentDetail
    MESSAGE 'В качестве компонента выбран товар, который не входит в группу: Сырье';
    
UOMComponentDetail = UOMComponent(componentComponentDetail(componentDetail));
shortNameUOMComponentDetail 'Ед. изм.' (componentDetail) = shortNameUOM(UOMComponentDetail(componentDetail));

CONSTRAINT bruttoSkuComponentDetail(componentDetail) != skuMaterial(materialComponent(componentComponentDetail(componentDetail)))
    CHECKED BY componentComponentDetail MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

productComponentDetail = DATA Product (ComponentDetail);
nameMaterialComponentDetail 'Изделие' (componentDetail) = nameMaterial(productComponentDetail(componentDetail));

CONSTRAINT bruttoSkuComponentDetail(componentDetail) != skuProduct(productComponentDetail(componentDetail))
    CHECKED BY productComponentDetail MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

// Кол-во
@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');

@defineDocumentDetailPriceCustomPrefix (componentDetail, , );
costComponentDetail 'Себестоимость' = DATA NUMERIC[14,2] (ComponentDetail);

// Замены
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, substitute, ' (замена)');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, substitute, ' (замена)');

// Параметры компонент с учетом замен

skuComponentDetail (componentDetail) = OVERRIDE bruttoSkuComponentDetail(componentDetail), substituteSkuComponentDetail(componentDetail) PERSISTENT;
nameSkuComponentDetail 'SKU' (componentDetail) = nameSku(skuComponentDetail(componentDetail));
idBarcodeSkuComponentDetail 'Штрихкод' (componentDetail) = idBarcodeSku(skuComponentDetail(componentDetail));
shortNameUOMSkuComponentDetail 'Ед.изм.' (componentDetail) = shortNameUOMSku(skuComponentDetail(componentDetail));

quantityComponentDetail 'Кол-во' (componentDetail) = OVERRIDE bruttoQuantityComponentDetail(componentDetail), substituteQuantityComponentDetail(componentDetail) PERSISTENT;

// Сумма
@defineDocumentDetailDataSum (component);
@deriveDocumentDetailSum(component, quantity);

sumComponentDetailOrder 'Сумма заказанных компонент' (order) = GROUP SUM sumComponentDetail(idetail) BY orderComponentDetail(idetail) IN documentSum;

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, , ' (компонент)');
quantityComponentDetailSkuOrder 'Кол-во (всего) (компонент)' (sku, order) = GROUP SUM quantityComponentDetail(idetail) BY skuComponentDetail(idetail), orderComponentDetail(idetail) IN documentSum PERSISTENT;

// ------------- Заполнение компонентов из спецификаций --------------- //

TABLE productOrder(Product, Order);
quantityProductOrder 'Кол-во изделий в заказе' (product, order) = GROUP SUM quantityProductDetail(productDetail)
    BY productProductDetail(productDetail), orderProductDetail(productDetail) PERSISTENT;

TABLE BOMOrder(BOM, Order);
quantityProductsBOMOrder 'Кол-во спецификаций' (BOM, order) = [= GROUP MAX quantityProductOrder(product, order)/ quantityProduct(product)
    BY BOMProduct(product), order](BOM, order) PERSISTENT;
    
BOMComponentDetail= DATA BOM (ComponentDetail); 
nameBOMComponentDetail 'Спецификация' = nameBOM(BOMComponentDetail(d));    
fullNameBOMComponentDetail 'Спецификация (полное название)' = fullNameBOM(BOMComponentDetail(d));    

createComponentsOrder 'Заполнить компоненты из спецификации' = ACTION (order) {

    FOR quantityProductsBOMOrder(BOM, order) DO {

        FOR BOMComponent(component) == BOM DO {
            FOR ADDOBJ d=ComponentDetail DO {
                orderComponentDetail(d) <- order;
                componentComponentDetail(d) <- component;
                bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order))*quantityProductsBOMOrder(BOM,order);
                BOMComponentDetail(d) <- BOM; 
                
                IF materialComponent(component) IS Sku THEN {
                    bruttoSkuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) IS Product THEN {
                        productComponentDetail(d) <- materialComponent(component);
                        bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }

} TOOLBAR;

recBruttoQuantityBOMOrderSku 'Рекур.кол-во' (BOM, order, sku) = GROUP SUM quantityProductsBOMOrder(BOM, order) * recBruttoQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY BOM, order, sku;
createRecComponentsOrder 'Заполнить из спецификации (рекурсивно)' = ACTION (order)  {

    FOR q == recBruttoQuantityBOMOrderSku(BOM, order, sku) ORDER BOM ADDOBJ d = ComponentDetail DO {
        orderComponentDetail(d) <- order;
        BOMComponentDetail(d) <- BOM;
        bruttoSkuComponentDetail(d) <- sku;
        bruttoQuantityComponentDetail(d) <- q;
    }
} TOOLBAR;

countBOMBruttoSkuOrder 'Кол-во строк' (BOM, sku, order) = GROUP SUM 1 BY BOMComponentDetail(d), bruttoSkuComponentDetail(d), orderComponentDetail(d);
countBOMsOrder (order) = GROUP SUM 1 IF countBOMBruttoSkuOrder (BOM, sku, order) >1 BY order;


updateComponentsOrder 'Пересчитать кол-во для всех' = ACTION (order) {
    IF NOT countBOMsOrder(order) THEN {
        FOR q == recBruttoQuantityBOMOrderSku(BOM, order, sku) DO {    
            bruttoQuantityComponentDetail(d) <- q WHERE BOMComponentDetail(d)==BOM AND orderComponentDetail(d)==order AND bruttoSkuComponentDetail(d) == sku;
        }        
    } ELSE {
        MESSAGE 'Изменить количество нет возможности. Попробуйте заново содтать строки компонента, предварительно удалив старые.';
    }
} TOOLBAR;

// ------------- Заполнение изделий из спецификаций --------------- //

quantityComponentsBOMOrder 'Кол-во спецификаций' (BOM, order) =
    [= GROUP MAX bruttoQuantityComponentDetail(componentDetail) / bruttoQuantityComponentDate(componentComponentDetail(componentDetail), dateComponentDetail(componentDetail))
    BY BOMComponent(componentComponentDetail(componentDetail)), orderComponentDetail(componentDetail)](BOM, order);

createProductsOrder 'Заполнить изделия из спецификации ' = ACTION (order)  {

    FOR quantityComponentsBOMOrder(BOM, order) DO {

        FOR  BOM == BOMProduct(product)  DO {
            FOR ADDOBJ d=ProductDetail DO {
                orderProductDetail(d) <- order;
                skuProductDetail(d) <- skuProduct(product);
                productProductDetail(d) <- product;
                quantityProductDetail(d) <- quantityProduct(product)*quantityComponentsBOMOrder(BOM,order);
            }
        }
    }

} TOOLBAR;

expandComponentDetail 'Развернуть изделие' = ACTION (componentDetail)  {

    FOR  BOMComponent(component) == BOMProduct(productComponentDetail(componentDetail))  DO {
        FOR ADDOBJ d=ComponentDetail DO {
            orderComponentDetail(d) <- orderComponentDetail(componentDetail);
            componentComponentDetail(d) <- component;
            bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(orderComponentDetail(componentDetail)))*
                bruttoQuantityComponentDetail(componentDetail)/quantityProduct(productComponentDetail(componentDetail));    //ceil
            BOMComponentDetail(d) <- BOMComponentDetail(componentDetail);     

            IF materialComponent(component) IS Sku THEN {
                bruttoSkuComponentDetail(d) <- materialComponent(component);
            } ELSE {
                IF materialComponent(component) IS Product THEN {
                    productComponentDetail(d) <- materialComponent(component);
                    bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                }
            }
        }
    }
    DELETE componentDetail;
} TOOLBAR;

backgroundComponentDetail 'Цвет' (componentDetail) = RGB(255,255,229) IF productComponentDetail(componentDetail);

createForRecComponentsOrder 'Заполнить из спец. (рекурсивно по компонентам)' = ACTION (order) {

    FOR quantityProductsBOMOrder(BOM, order) DO {

        FOR BOMComponent(component) == BOM DO {
            FOR ADDOBJ d=ComponentDetail DO {
                orderComponentDetail(d) <- order;
                componentComponentDetail(d) <- component;
                bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order))*quantityProductsBOMOrder(BOM,order);
                BOMComponentDetail(d) <- BOM; 
                
                IF materialComponent(component) IS Sku THEN {
                    bruttoSkuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) IS Product THEN {
                        productComponentDetail(d) <- materialComponent(component);
                        bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }
    WHILE productComponentDetail(detail) AND orderComponentDetail(detail) == order DO {
        expandComponentDetail(detail);
    }
} TOOLBAR;


// ---------------- Подбор цен и замен для sku --------------------------- //

TABLE skuOrder(Sku, Order);

// --- Основной компонент --- //
bruttoQuantitySkuOrder 'Количество брутто' (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail)
                                                                BY bruttoSkuComponentDetail(componentDetail),
                                                                   orderComponentDetail(componentDetail) PERSISTENT;
             
bruttoNotSubstituteQuantitySkuOrder 'Количество без замены' (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail) 
    IF NOT substituteQuantityComponentDetail(componentDetail)
    BY bruttoSkuComponentDetail(componentDetail),
       orderComponentDetail(componentDetail) PERSISTENT;                                                                     
                                                                   
bruttoSubstituteQuantitySkuOrder (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail) 
    IF substituteQuantityComponentDetail(componentDetail)
    BY bruttoSkuComponentDetail(componentDetail),
       orderComponentDetail(componentDetail) PERSISTENT;                                                                                                                                   
                                                                                                                                 
// цены по товару
dataBruttoPriceSkuOrder 'Цена' = DATA NUMERIC[14,2] (Sku, Order);
costSkuOrder 'Себестоимость' = DATA NUMERIC[14,2] (Sku, Order);

dataBruttoPriceSkuOrder (sku, order) <- prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                                sku,
                                                                                componentsStockOrder(order),
                                                                                dateTimeOrder(order)) IF quantityComponentDetailSkuOrder(sku, order)
    WHEN CHANGED(priceListTypeOrder(order)) OR CHANGED(componentsStockOrder(order)) OR CHANGED(dateTimeOrder(order)) OR CHANGED(quantityComponentDetailSkuOrder(sku, order));

calcCostSkuStock 'Себестоимость' (sku, stock) = [= GROUP SUM costBatch(b)*currentBalanceBatchStock(b,stock) BY skuBatch(b), stock](sku, stock)/
    (currentBalanceSkuStock(sku, stock) IF currentBalanceSkuStock(sku, stock) != 0);   

costSkuOrder (sku, order) <- calcCostSkuStock(sku, componentsStockOrder(order)) IF quantityComponentDetailSkuOrder(sku, order)
    WHEN CHANGED (quantityComponentDetailSkuOrder(sku, order)) OR CHANGED (componentsStockOrder(order)); 
    
// --- Замена --- //
substituteSkuOrder = DATA Sku (Sku, Order);
nameSubstituteSkuOrder 'Замена' (sku, order) = nameSku(substituteSkuOrder(sku, order));

substituteQuantitySkuOrder 'Кол-во замены' = DATA NUMERIC[14,3] (Sku, Order);
overSubstituteQuantitySkuOrder 'Кол-во' = OVERRIDE bruttoQuantitySkuOrder(sku, order), substituteQuantitySkuOrder(sku, order);
multiplierSkuOrder 'Коэффициент замены' = DATA NUMERIC[8,3] (Sku, Order);

//--
stockSubstitutesSku = DATA SESSION Stock ();
nameStockSubstitutesSku 'Склад' = nameStock(stockSubstitutesSku());

BOMSubstitutesSku = DATA SESSION BOM ();
productsBOMSubstitutesSku 'Спецификация' = productsBOM(BOMSubstitutesSku());

multiplierSubstitutesSku 'Коэффициент' = DATA SESSION NUMERIC[8,3] (Sku);

currentBalanceSkuSubstitutesSku 'Текущий остаток' (sku) =  currentBalanceSkuStock(sku, stockSubstitutesSku());

substitutesPriceSkuOrder 'Цена' (sku,order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), sku, stockSubstitutesSku(), dateTimeOrder(order));
showPriceSubstitutesOrder (order) = stockSubstitutesSku() AND priceListTypeOrder(order);

multiplierSubstituteFromToSku 'Коэффициент' (fromSku ,toSku) =  multiplierSubstitute(uniqueSubstituteFromToSku(fromSku ,toSku));
changeMultiplierSubstituteSkuFromTo = ACTION (fromSku, toSku) {
    REQUEST NUMERIC[8,3] INPUT;
    IF requestedNumeric() THEN {         
        IF uniqueSubstituteFromToSku(fromSku, toSku) THEN {
            multiplierSubstitute(substitut) <- requestedNumeric() WHERE uniqueSubstituteFromToSku(fromSku, toSku) == substitut;
        } ELSE {
            FOR  ADDOBJ sub = Substitute DO{
                fromSkuSubstitute(sub) <- fromSku;
                toSkuSubstitute(sub) <- toSku;
                multiplierSubstitute(sub) <- requestedNumeric();
            }        
        }
    } ELSE {
        IF uniqueSubstituteFromToSku(fromSku, toSku) THEN {
            DELETE substitut  WHERE uniqueSubstituteFromToSku(fromSku, toSku) == substitut;
        }    
    }        
}
backgroundSubstitutesOrder 'Цвет' (order) = RGB(255,224,255) IF order IS Order;

filterubstituteFromToSku (s,sk) =  IF BOMSubstitutesSku() 
    THEN useSubstituteBOM(uniqueSubstituteFromToSku(s,sk),BOMSubstitutesSku())
    ELSE TRUE IF uniqueSubstituteFromToSku(s,sk);


FORM substitutesSku 'Замены'
    PROPERTIES() nameStockSubstitutesSku, productsBOMSubstitutesSku
    OBJECTS o = Order FIXED PANEL
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) nameSku
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES     READONLY SHOWIF stockSubstitutesSku() currentBalanceSkuSubstitutesSku(sk)
    PROPERTIES     READONLY SHOWIF showPriceSubstitutesOrder(o) substitutesPriceSkuOrder(sk,o)

    PROPERTIES(s,sk) multiplierSubstituteFromToSku ON CHANGE changeMultiplierSubstituteSkuFromTo(s,sk) BACKGROUND  backgroundSubstitutesOrder(o)
    PROPERTIES() addSku TODRAW sk
    PROPERTIES(sk) editSku, copySku
    FILTERS isParentSkuGroupSku(sg, sk)
    ORDER BY nameSku(sk)

    FILTERGROUP filter1
        FILTER 'Товары с остатком' currentBalanceSkuSubstitutesSku(sk) AND stockSubstitutesSku() 'F10'
    FILTERGROUP filter2
        FILTER 'Доступные замены' filterubstituteFromToSku (s,sk) 'F9'   
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroupSku(sk) 'F8' DEFAULT                         
;

DESIGN substitutesSku FROM DEFAULT {
    main{
        preferredSize = (1200, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            ADD skuTree.tree.box {
                caption = 'Группы SKU';
            }

            ADD sk.box {
                fill = 3;
            }
        }
        NEW headerContainer BEFORE topContainer {
            type = CONTAINERH ;
            NEW stockContainer {
                caption = 'Склад';
                ADD PROPERTY (nameStockSubstitutesSku());
            }
            ADD s.box {
                caption = 'Заменяемый товар';
                ADD PROPERTY (nameSku(s));                
            };
            NEW BOMContainer {
                caption = 'Спецификация';
                ADD PROPERTY (productsBOMSubstitutesSku());
            }            
        }
        REMOVE o.box;        
        ADD functions.box;
    }
}

chooseSubstituteSkuOrder 'Выбрать замену' =  ACTION (fromSku, order) {
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku() <- NULL;
    stockSubstitutesSku() <- componentsStockOrder(order) WHERE componentsStockOrder(order);

    FORM substitutesSku OBJECTS o= order, s=fromSku DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSkuOrder(fromSku, order) <- chosenObject('sk');
        multiplierSkuOrder(fromSku, order) <- multiplierSubstituteFromToSku(fromSku,chosenObject('sk'));
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSkuOrder(fromSku, order) <- NULL;
            multiplierSkuOrder(fromSku, order) <- NULL;         
        }   
    }
}


currentBalanceSubstituteOrder'Текущий остаток' (substitute, order) = currentBalanceSkuStock(toSkuSubstitute(substitute), componentsStockOrder(order));
substitutesPriceSubstituteOrder 'Цена' (substitute, order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), toSkuSubstitute(substitute), componentsStockOrder(order), dateTimeOrder(order));

// Действие по заполнении замены через галочку
isSubstituteSkuOrder 'Использовать замену' (substitute, sku, order) = substituteSkuOrder(sku, order) == toSkuSubstitute(substitute);
changeSubstituteSkuOrder = ACTION (substitute, sku, order) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        substituteSkuOrder(sku, order) <- toSkuSubstitute(substitute);
        multiplierSkuOrder(sku, order) <- multiplierSubstitute(substitute);

    } ELSE {
        substituteSkuOrder(sku, order) <- NULL;
        multiplierSkuOrder(sku, order) <- NULL;
    }
}

// Sku с учетом замены
skuSkuOrder (sku, order) = OVERRIDE sku IF bruttoQuantitySkuOrder(sku, order), substituteSkuOrder(sku,order) PERSISTENT;

nameSkuSkuOrder 'Итоговый sku' (sku,order)= nameSku(skuSkuOrder (sku,order));
idBarcodeSkuSkuOrder 'Штрихкод' (sku,order) = idBarcodeSku(skuSkuOrder (sku, order));
shortNameUOMSkuSkuOrder 'Ед.изм.' (sku,order) = shortNameUOMSku(skuSkuOrder (sku, order));

quantityComponentsBOMSkuOrder 'Кол-во' (BOM, sku, order) = GROUP SUM quantityComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);
//quantityComponentsBOMOrder 'Кол-во' (BOM, order) = GROUP SUM quantityComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);

bruttoSumComponentsBOMSkuOrder 'Сумма' (BOM, sku, order) = GROUP SUM quantityComponentDetail(d) * priceComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);
bruttoSumComponentsBOMOrder =  GROUP SUM bruttoSumComponentsBOMSkuOrder(BOM, sku, order) BY BOM, order;
//premiumSumComponentsBOMSkuOrder 'Сума с надбавкой' (BOM, sku, order) = GROUP SUM quantityComponentDetail(d) * premiumPriceComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);

calcComponentsPriceProductDetail'Цена расчетная с/с' (productDetail)= [ = GROUP SUM (bruttoSumComponentsBOMSkuOrder(BOMProduct(product), sku, order)/ 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail))* pricePercentProductDetail(productDetail);
                    
bruttoCostSumComponentsBOMSkuOrder 'Сумма' (BOM, sku, order) = GROUP SUM quantityComponentDetail(d) * costComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);

calcCostProductDetail 'Себестоимость расчетная' (productDetail)= [ = GROUP SUM (bruttoCostSumComponentsBOMSkuOrder(BOMProduct(product), sku, order) / 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail))* pricePercentProductDetail(productDetail);
        
//-- Подсчет цены изделия с учетом замен
//recPricePercentProductSkuOrder (product, sku, order) = recPricePercentProductSkuDate (product, sku, dateOrder(order));

calcPremiumPriceProductDetail 'Цена расчетная (с надбавками)' (productDetail) =
    IF roundConditionCalcPriceListTypeSku(calcPriceListTypeProductDetail(productDetail), skuProductDetail(productDetail)) THEN
        NUMERIC[14,2](roundPriceRoundCondition(componentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail),
                                               roundConditionCalcPriceListTypeSku(calcPriceListTypeProductDetail(productDetail), skuProductDetail(productDetail))))
    ELSE
        NUMERIC[14,2](roundPriceCurrency(componentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail),
                                         currencyProductDetail(productDetail)));

// Изменение надбавок при вводе пользователем процента

changeValueMarkupProductDetail (detail) = ACTION (detail) {
    IF calcPremiumPriceProductDetail(detail) THEN {
        priceProductDetail(detail) <- calcPremiumPriceProductDetail(detail);
    }
}

changeComponentsPriceProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        componentsPriceProductDetail (detail) <- requestedNumeric();
        changeValueMarkupProductDetail(detail);
    } ELSE
        componentsPriceProductDetail (detail) <- NULL;
}


changeMarkupProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[10,4] INPUT;
    IF requestedNumeric() THEN {
        markupProductDetail (detail) <- requestedNumeric();
        changeValueMarkupProductDetail(detail);
    } ELSE
        markupProductDetail(detail) <- NULL;
}

calcMarkupIsVATProductDetail(d)  = [= round2(((X/Z*100/(100+Y))-1)*100)](
    priceProductDetail(d),
    calcComponentsPriceProductDetail(d) IF calcComponentsPriceProductDetail(d) != 0.0,
    valueVATProductDetail(d));
calcMarkupProductDetail(d)  = [= round2((X/Y-1)*100)](
    priceProductDetail(d),
    calcComponentsPriceProductDetail(d) IF calcComponentsPriceProductDetail(d) != 0.0);    

changeValueProductsPriceProductDetail (detail) = ACTION (detail) {
    IF addVATProductDetail(detail) THEN {
        markupProductDetail(detail) <- calcMarkupIsVATProductDetail(detail);
        pricePercentProductDetail(detail) <- 
                100*priceProductDetail(detail)*quantityProductDetail(detail)/bruttoSumComponentsBOMOrder(BOMProduct(productProductDetail(detail)),orderProductDetail(detail));
    } ELSE {
        markupProductDetail(detail) <- calcMarkupProductDetail(detail);
        pricePercentProductDetail(detail) <- 
                100*priceProductDetail(detail)*quantityProductDetail(detail)/bruttoSumComponentsBOMOrder(BOMProduct(productProductDetail(detail)),orderProductDetail(detail));
    }
}

//пересчет цены изделия
overCalcPriceComponentDetail = ABSTRACT NUMERIC[14,2](ComponentDetail); 
overSetPriceComponentDetail (detail) = OVERRIDE dataBruttoPriceSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail)),
                                                overCalcPriceComponentDetail(detail);

overCalcCostComponentDetail = ABSTRACT NUMERIC[14,2](ComponentDetail); 
overSetCostComponentDetail (detail) = OVERRIDE costSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail)),
                                                overCalcCostComponentDetail(detail);    
                                                                                                
notRecalculateMarkupOrder = ABSTRACT BOOLEAN (Order);

changeProductsPriceProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        priceProductDetail (detail) <- requestedNumeric();
        IF notRecalculateMarkupOrder(orderProductDetail(detail)) THEN {
            pricePercentProductDetail(detail) <- 
                            100*priceProductDetail(detail)*quantityProductDetail(detail)/bruttoSumComponentsBOMOrder(BOMProduct(productProductDetail(detail)),orderProductDetail(detail));
            componentsPriceProductDetail(d) <- calcComponentsPriceProductDetail(d);
            costPriceProductDetail(d) <- calcCostProductDetail(d);                
        } ELSE {
            changeValueProductsPriceProductDetail(detail);    
        }   
    }
}

recordMarkupProductDetail(detail) = ACTION (detail) {
    IF calcPriceListTypeProductDetail(detail) THEN {
        markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
        changeValueMarkupProductDetail(detail);
    }
}

// расчет НДС
valueVATSkuOrder 'НДС, %' = DATA NUMERIC[10,5] (Sku, Order);

WHEN SESSION (CHANGED(componentsCountryOrder(order)) OR
              CHANGED(dateOrder(order)) OR 
              CHANGED(VATOrder(order)) OR 
              SET(quantityComponentDetailSkuOrder(sku, order)))
                 AND quantityComponentDetailSkuOrder(sku, order)
                 AND VATOrder(order) DO {                                      
    valueVATSkuOrder(sku, order) <- valueVATSkuCountryDate(sku, componentsCountryOrder(order), dateOrder(order));
}
     
calcPriceVATProductDetail 'Цена НДС' (productDetail)= [ = GROUP SUM (bruttoSumComponentsBOMSkuOrder(BOMProduct(product), sku, order) *(valueVATSkuOrder(sku, order)/(100+valueVATSkuOrder(sku, order)))/ 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail))* pricePercentProductDetail(productDetail);   
              
calcValueVATProductDetail 'НДС, %' (productDetail)= [= 100*X/(Y-X)](
    calcPriceVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail));
    
//--  если стоит галочка isVATOrder    
calcPriceIsVATProductDetail 'Цена НДС' (productDetail) = [ = GROUP SUM (bruttoSumComponentsBOMSkuOrder(BOMProduct(product), sku, order) *(valueVATSkuOrder(sku, order)/100)/ 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail))* pricePercentProductDetail(productDetail);       
   
calcValueIsVATProductDetail 'НДС, %' (productDetail)= [= 100*X/Y](
    calcPriceIsVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail) IF calcComponentsPriceProductDetail(productDetail)!= 0);    

// Расчет цен для изделий

fillPriceProductDetail 'Заполнить цены для изделий' = ACTION (detail)  {
    valueVATProductDetail(detail) <- IF VATProductProductDetail(detail) THEN calcValueIsVATProductDetail(detail) ELSE calcValueVATProductDetail(detail);
    componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
    costPriceProductDetail(detail) <- calcCostProductDetail(detail);
    IF productsPriceListTypeProductDetail(detail) AND prevPriceBPriceListTypeSkuStockDateTime(productsPriceListTypeProductDetail(detail),
                                                                                              skuProductDetail(detail),
                                                                                              productsStockProductDetail(detail),
                                                                                              dateTimeProductDetail(detail))    THEN {
                                                                                              
        priceProductDetail(detail) <- prevPriceBPriceListTypeSkuStockDateTime(productsPriceListTypeProductDetail(detail),
                                                                                        skuProductDetail(detail),
                                                                                        productsStockProductDetail(detail),
                                                                                        dateTimeProductDetail(detail));  
        changeValueProductsPriceProductDetail(detail);                                                                                
                                                                                         
    } ELSE {
        IF calcPriceListTypeProductDetail(detail) AND markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail)) THEN {
            markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
            changeValueMarkupProductDetail(detail);
        }
    }                                                   

} TOOLBAR;



fillPriceProductsOrder 'Заполнить цены для изделий' = ACTION (order)  {
    FOR orderProductDetail(detail) == order DO {
        fillPriceProductDetail(detail);                                                    
    }
} TOOLBAR;

calcQuantutyComponentsProductDetail 'Кол-во компонентов' (productDetail) = [ = GROUP SUM quantityComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d)](BOMProduct(productProductDetail(productDetail)), orderProductDetail(productDetail));
            
calcPriceCoeffProductDetail 'Коэффициент цены' (productDetail) = calcQuantutyComponentsProductDetail(productDetail) * pricePercentProductDetail(productDetail) 
    / ((quantityProductDetail(productDetail) IF quantityProductDetail(productDetail)!=0)*100);  
     
calcPricePercentProductDetailNumeric '%' (productDetail, num) = (num AS NUMERIC[8,5]) * quantityProductDetail(productDetail)*100 
    /(calcQuantutyComponentsProductDetail(productDetail) IF calcQuantutyComponentsProductDetail(productDetail)!= 0);     
    
changePriceCoeffProductDetail = ACTION (detail) {
    REQUEST NUMERIC[8,5] INPUT;
    IF requestedNumeric() THEN {        
        pricePercentProductDetail(detail) <- NUMERIC[14,3](calcPricePercentProductDetailNumeric(detail, requestedNumeric()));
        componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
        costPriceProductDetail(detail) <- calcCostProductDetail(detail);
        changeValueMarkupProductDetail(detail);
    }
}
changePricePercentProductDetail = ACTION (detail) {
    REQUEST NUMERIC[14,3] INPUT;
    IF requestedNumeric() THEN {
        pricePercentProductDetail(detail) <- requestedNumeric(); 
        componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
        costPriceProductDetail(detail) <- calcCostProductDetail(detail);
        changeValueMarkupProductDetail(detail);
    }
}   
//-- Замены для компонентов

chooseSubstituteComponentDetail 'Выбрать замену' =  ACTION (detail){
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku()<- NULL;
    
    stockSubstitutesSku() <- componentsStockComponentDetail(detail) WHERE componentsStockComponentDetail(detail);
    BOMSubstitutesSku() <- BOMComponentDetail(detail) WHERE BOMComponentDetail(detail);

    FORM substitutesSku OBJECTS o= orderComponentDetail(detail), s = bruttoSkuComponentDetail(detail) DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSkuComponentDetail(detail) <- chosenObject('sk'); 
        substituteQuantityComponentDetail(detail) <- NUMERIC[14,3](multiplierSubstituteFromToSku(bruttoSkuComponentDetail(detail), substituteSkuComponentDetail(detail))* bruttoQuantityComponentDetail(detail));           
        
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSkuComponentDetail(detail) <- NULL;  
            substituteQuantityComponentDetail(detail) <- NULL;  
        }    
    }    
}

// ------------- Формы ----------- //

backgroundSubstitutesSkuOrder 'Цвет' (sku, order) = RGB(255,224,255) IF substituteQuantitySkuOrder(sku, order);


resetSubstituteOrder 'Сбросить все замены' = ACTION (order) {
    FOR substituteSkuOrder(sku, order) OR multiplierSkuOrder(sku, order) DO {
        substituteSkuOrder(sku, order) <- NULL;
        multiplierSkuOrder(sku, order) <- NULL;
        valueVATSkuOrder(sku, order) <- NULL;
        substituteQuantitySkuOrder(sku, order) <- NULL;
    }
} TOOLBAR;

deleteComponentsOrder 'Очистить' =  ACTION (order) {
    deleteComponentDetailOrder(order);
    resetSubstituteOrder(order);
} TOOLBAR;

priceStockOrder = DATA Stock(Order);
namePriceStockOrder 'Склад' = nameStock(priceStockOrder(order));

calcCostSkuOrder 'Себестоимость' = calcCostSkuStock(sku, priceStockOrder(order));

CONSTRAINT  priceStockOrder(o) AND NOT isCompanyStock(priceStockOrder(o)) CHECKED BY priceStockOrder    
        MESSAGE 'Склад для цен не является складом компании';
priceStockSkuOrder 'Цена' (sku, order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), sku, priceStockOrder(order), dateTimeOrder(order));                                                                                                                                                               

priceStockOrder (order) <- componentsStockOrder(order)
    WHEN CHANGED(componentsStockOrder(order));
    
FORM multiplier 'Коэффициент'    
    OBJECTS nu = NUMERIC[8,3] FIXED PANEL
    PROPERTIES  val= OBJVALUE (nu)
;
DESIGN multiplier FROM DEFAULT{
    nu.box {
        caption = '';
        PROPERTY(val) { caption = 'Введите коэффициент цены' ; font = 'bold 36'; } 
    }
} 

fillSubstitutePriceOrderSkuFromTo 'Использовать цену' = ACTION (order, sku, skuSubstitute) {
    IF multiplierSubstituteFromToSku(sku, skuSubstitute) THEN {
        dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order));
        costSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, skuSubstitute)*calcCostSkuStock(skuSubstitute,priceStockOrder(order)));
    } ELSE {
        FORM multiplier MODAL; 
        IF formResult() == FormResult.ok THEN {
            dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*priceStockSkuOrder(skuSubstitute,order));
            costSkuOrder(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*calcCostSkuStock(skuSubstitute,priceStockOrder(order)));
        }
    }        
} TOOLBAR;  

currentBalanceSkuPriceStockOrder 'Текущий остаток' = currentBalanceSkuStock(sku, priceStockOrder(order)); 
currentBalanceSkuPriceStockOrderSkuFromTo 'Остаток с уч. коэфф.'  (order, fromSku, toSku) = currentBalanceSkuPriceStockOrder(toSku, order) / multiplierSubstituteFromToSku(fromSku ,toSku);

//maxSubstitutePriceSkuOrder = GROUP MAX multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order; 
//minSubstitutePriceSkuOrder = GROUP MIN multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order;    
maxSubstituteSkuPriceSkuOrder = GROUP LAST skuSubstitute 
    BY sku, order
    ORDER multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)     
    WHERE currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND multiplierSubstituteFromToSku(sku, skuSubstitute) AND priceStockSkuOrder(skuSubstitute,order) 
;    
minSubstituteSkuPriceSkuOrder = GROUP LAST skuSubstitute 
    BY sku, order
    ORDER DESC multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)  
    WHERE currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND multiplierSubstituteFromToSku(sku, skuSubstitute) AND priceStockSkuOrder(skuSubstitute,order) 
;          
         
fillSubstitutePriceMaxOrderSkuFrom 'Исп. max цену' = ACTION (order, sku) {
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- maxSubstituteSkuPriceSkuOrder(sku, order);
    
    dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, sku())*priceStockSkuOrder(sku(),order)) WHERE sku();     
    costSkuOrder(sku, order) <- NUMERIC[14,2](calcCostSkuStock(sku(),priceStockOrder(order))) WHERE sku();   
};  
fillSubstitutePriceMinOrderSkuFrom 'Исп. min цену' = ACTION (order, sku) {
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- minSubstituteSkuPriceSkuOrder(sku, order);

    dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, sku())*priceStockSkuOrder(sku(),order)) WHERE sku();      
    costSkuOrder(sku, order) <- NUMERIC[14,2](calcCostSkuStock(sku(),priceStockOrder(order))) WHERE sku();   
       
};   

fillSubstitutePriceMaxOrder 'Исп. max цену' = ACTION (order) {
    FOR quantityComponentDetailSkuOrder(sku,order) DO {
        fillSubstitutePriceMaxOrderSkuFrom(order,sku);
    }   
        
} TOOLBAR;  
fillSubstitutePriceMinOrder 'Исп. min цену' = ACTION (order) {
    FOR quantityComponentDetailSkuOrder(sku,order) DO {
        fillSubstitutePriceMinOrderSkuFrom(order,sku);
    }       
} TOOLBAR;   
//--
maxSkuBalanceSubstituteSkuOrder (sku, order) =
    GROUP LAST skuSubstitute
          BY   sku, order
          ORDER (currentBalanceSkuPriceStockOrder(skuSubstitute,order) /(multiplierSubstituteFromToSku(sku, skuSubstitute) IF multiplierSubstituteFromToSku(sku, skuSubstitute)!=0))
          WHERE priceStockSkuOrder(skuSubstitute,order) AND currentBalanceSkuPriceStockOrder(skuSubstitute,order) AND multiplierSubstituteFromToSku(sku, skuSubstitute);

fillSubstitutePriceMaxBalanceOrderSkuFrom 'Исп. цену большего остатка' = ACTION (order, sku) {
    LOCAL sku = Sku();
    sku() <- NULL;
    sku() <- maxSkuBalanceSubstituteSkuOrder (sku, order);
    dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](priceStockSkuOrder(sku(),order)*multiplierSubstituteFromToSku(sku, sku())) WHERE sku();     
    costSkuOrder(sku, order) <- NUMERIC[14,2](calcCostSkuStock(sku(),priceStockOrder(order))) WHERE sku();   
     
}; 
fillSubstitutePriceMaxBalanceOrder 'Исп. цену большего остатка' = ACTION (order) {
    FOR quantityComponentDetailSkuOrder(sku,order) DO {
        fillSubstitutePriceMaxBalanceOrderSkuFrom(order,sku);
    }        
} TOOLBAR; 
    
backgroundMarkupProductDetail = ABSTRACT CASE COLOR (ProductDetail);  

  
  //toSkuSubstitute(substitute)
bruttoBalanceSkuOrder 'Текущий остаток с учетом замен' (sku,order) = currentBalanceSkuStock(sku, componentsStockOrder(order)) (+) 
    [ = GROUP SUM currentBalanceSubstituteOrder(substitute, order) / (multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0) 
        BY fromSkuSubstitute(substitute), order](sku,order);  
 
bruttoBalanceToSkuSubstituteOrder 'Текущий остаток с учетом замен' (su, order)= bruttoBalanceSkuOrder(toSkuSubstitute(su), order); 
  
FORM order 'Производственный заказ'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) isPostedOrder, nameComponentsStockOrder, nameProductsStockOrder, nameNumeratorOrder, numberOrder, seriesOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, sumProductDetailOrder, 
                  quantityComponentDetailOrder, sumComponentDetailOrder, isPricePercentOrder, isPriceCoeffOrder 
    PROPERTIES(o)  FORCE PANEL nameCalcPriceListTypeOrder, nameProductsPriceListTypeOrder, VATProductOrder
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) indexProductDetail, nameSkuProductDetail,  idProductProductDetail SHOWIF showIDs(), nameProductProductDetail, 
                   shortNameUOMProductDetail, expiryDateProductDetail, manufactureDateProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail READONLY, componentsPriceProductDetail ON CHANGE changeComponentsPriceProductDetail(pd),
                   costPriceProductDetail
    PROPERTIES(pd) markupProductDetail ON CHANGE changeMarkupProductDetail(pd) BACKGROUND backgroundMarkupProductDetail(pd),
                   pricePercentProductDetail SHOWIF isPricePercentOrder(o) ON CHANGE changePricePercentProductDetail(pd), 
                   calcPriceCoeffProductDetail SHOWIF isPriceCoeffOrder(o) ON CHANGE changePriceCoeffProductDetail(pd),                   
                   priceProductDetail ON CHANGE changeProductsPriceProductDetail(pd), sumProductDetail
    PROPERTIES(pd) BACKGROUND backgroundVATOrder(o) SHOWIF VATProductOrder(o) valueVATProductDetail
    PROPERTIES(pd) ADDOBJ, deletepd=DELETESESSION
    PROPERTIES(o) TODRAW pd createProductsOrder, fillPriceProductsOrder, deleteProductDetailOrder

    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, bruttoNameSkuComponentDetail, nameMaterialComponentDetail, 
                   idComponentComponentDetail SHOWIF showIDs(), nameComponentComponentDetail,    
                   fullNameBOMComponentDetail, shortNameUOMComponentDetail, bruttoQuantityComponentDetail ON SHORTCUT updateComponentsOrder(o)
    PROPERTIES(cd) BACKGROUND backgroundSubstitutesOrder(o) substituteNameSkuComponentDetail ON CHANGE chooseSubstituteComponentDetail(cd), substituteQuantityComponentDetail
    PROPERTIES(cd) costComponentDetail, priceComponentDetail
    PROPERTIES(cd) sumComponentDetail

    PROPERTIES(o) TODRAW cd createComponentsOrder, createRecComponentsOrder, createForRecComponentsOrder
    PROPERTIES(cd) TODRAW cd expandComponentDetail SHOWIF productComponentDetail(cd)
    PROPERTIES(cd) ADDOBJ, deletecd=DELETESESSION
    PROPERTIES(o) TODRAW cd deleteComponentsOrder

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder, bruttoBalanceSkuOrder

    PROPERTIES(s,o) BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder ON CHANGE chooseSubstituteSkuOrder(s,o), 
                    multiplierSkuOrder, substituteQuantitySkuOrder 
    PROPERTIES(s,o) READONLY bruttoNotSubstituteQuantitySkuOrder
    FILTERS bruttoQuantitySkuOrder(s,o)

    PROPERTIES(o) FORCE PANEL namePriceListTypeOrder, VATComponentOrder  BACKGROUND backgroundVATOrder(o)//, nameComponentsCalcPriceListTypeOrder

    OBJECTS su = Substitute
    PROPERTIES(su) READONLY nameToSkuSubstitute, multiplierSubstitute
    PROPERTIES(su,s,o) isSubstituteSkuOrder ON CHANGE changeSubstituteSkuOrder(su,s,o)
    PROPERTIES     READONLY currentBalanceSubstituteOrder(su,o), bruttoBalanceToSkuSubstituteOrder(su,o)
    FILTERS fromSkuSubstitute(su) == s
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroupSku(toSkuSubstitute(su)) 'F10' DEFAULT 
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) quantityComponentDetailSkuOrder, costSkuOrder, dataBruttoPriceSkuOrder,  
                    valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF VATOrder(o)
    FILTERS quantityComponentDetailSkuOrder(sk,o)    
        
    PROPERTIES namePriceStockOrder(o)    
           
    OBJECTS sku = Sku
    PROPERTIES(sku) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(sku,o) READONLY currentBalanceSkuPriceStockOrder, calcCostSkuOrder, priceStockSkuOrder
    PROPERTIES(sk,sku) READONLY multiplierSubstituteFromToSku FORCE GRID 
    PROPERTIES READONLY currentBalanceSkuPriceStockOrderSkuFromTo(o,sk,sku)
    
    PROPERTIES fillSubstitutePriceOrderSkuFromTo(o,sk,sku), fillSubstitutePriceMaxOrder(o) FORCE PANEL TODRAW sk, fillSubstitutePriceMinOrder(o) FORCE PANEL TODRAW sk,
               fillSubstitutePriceMaxBalanceOrder(o) FORCE PANEL TODRAW sk
        
    FILTERGROUP filter1
        FILTER 'Доступные замены' uniqueSubstituteFromToSku(sk,sku) 'F9'     
    FILTERGROUP filter2
        FILTER 'С остатком' currentBalanceSkuPriceStockOrder(sku,o) 'F8' DEFAULT                                                          

    EVENTS
        ON OK prePostOrder(o)
    EDIT Order OBJECT o
;

DESIGN order FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            type = TABBED;
            NEW row1 {
                caption = 'Изделия';
                NEW row111{
                    caption = 'Цена изделий';
                    type = CONTAINERH;
                    ADD PROPERTY(nameCalcPriceListTypeOrder(o));
                    ADD PROPERTY(nameProductsPriceListTypeOrder(o));
                    ADD PROPERTY(VATProductOrder(o));
                }
                ADD pd.box;
            }
            ADD cd.box { caption = 'Компоненты';}
            NEW row2 {
                caption = 'Замена';
                type = SPLITH;                    
                ADD s.box {fill = 2;}
                ADD su.box;
            }
            NEW price {
                caption = 'Цены';
                type = SPLITH ;
                NEW price1 {
                    fill = 1;
                    type = CONTAINERV;
                    NEW price11{
                        caption = 'Цена компонент';
                        type = CONTAINERH;
                        ADD PROPERTY(namePriceListTypeOrder(o));
                        ADD PROPERTY(VATComponentOrder(o));
                    }
                    ADD sk.box;  
                }                
                       
                NEW price2 {
                    fill = 1;
                    type = CONTAINERV;
                    NEW price21{
                        caption = 'Фильтр складов для цен';
                        ADD PROPERTY(namePriceStockOrder(o)); 
                    }
                    ADD sku.box;                  
                }  
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                ADD o.documentHeader {
                    type = CONTAINERH;
                    ADD PROPERTY(isPostedOrder(o)) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameNumeratorOrder(o));
                    ADD PROPERTY(numberOrder(o));
                    ADD PROPERTY(seriesOrder(o));
                    ADD PROPERTY(dateOrder(o));
                    ADD PROPERTY(timeOrder(o));
                }
                NEW headerRow11 {
                    type = CONTAINERH;
                    NEW headerRow111 {
                        caption = 'Склады';
                        type = CONTAINERH;
                        ADD PROPERTY(nameComponentsStockOrder(o));
                        ADD PROPERTY(nameProductsStockOrder(o));
                    }
                    NEW headerRow112 {
                        type = CONTAINERH;
                    }
                }
                NEW headerRow12 {
                    type = CONTAINERH;
                    ADD o.documentPrm {
                        type = CONTAINERH;
                    }
                    NEW timeRow {
                        caption = 'Срок действия';
                        type = CONTAINERH;
                        ADD PROPERTY(fromDateOrder(o));
                        ADD PROPERTY(toDateOrder(o));
                    }
                    NEW headerExtraParams {
                        caption = 'Дополнительные параметры';
                        type = CONTAINERH;
                        ADD PROPERTY (isPricePercentOrder(o));
                        ADD PROPERTY (isPriceCoeffOrder(o));
                    } 
                }
            }

            ADD o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumProductDetailOrder(o)) { preferredCharWidth = 13;}
    }
}
editOrder 'Редактировать' (order) = ACTION EDITFORM Order;

//WHEN SESSION FORMS order CHANGED(bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order)) DO                                              
//    substituteQuantitySkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);                              
//                   
//WHEN SESSION FORMS order CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO
//    substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail));                    
//                    
//WHEN SESSION FORMS order CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
//    CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO 
//        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));

useSubstituteComponentDetail 'Можно использовать замену' (detail) = useSubstituteBOM(
    uniqueSubstituteFromToSku(bruttoSkuComponentDetail(detail), substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))), 
    BOMComponentDetail(detail));    
                
usePrevSubstituteComponentDetail 'Можно использовать замену' (detail) = useSubstituteBOM(
    uniqueSubstituteFromToSku(bruttoSkuComponentDetail(detail), PREV(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail)))), 
    BOMComponentDetail(detail));                  

WHEN SESSION FORMS order CHANGED(bruttoSubstituteQuantitySkuOrder(sku,order)) 
    OR CHANGED(multiplierSkuOrder(sku, order)) DO {                                              
        substituteQuantitySkuOrder(sku, order) <- bruttoSubstituteQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);                              
    }      
                   
WHEN SESSION FORMS order 
    CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) AND useSubstituteComponentDetail(detail) DO {
        substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail)); 
    }                       
                    
WHEN SESSION FORMS order 
    (CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
     CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail)))) AND useSubstituteComponentDetail(detail) DO { 
        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));
    } 
WHEN SESSION FORMS order DROPPED (multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO {
        substituteSkuComponentDetail (detail) <- NULL WHERE usePrevSubstituteComponentDetail(detail); 
        substituteQuantityComponentDetail (detail) <- NULL WHERE usePrevSubstituteComponentDetail(detail);    
    }   
 
WHEN SESSION FORMS order CHANGED(overSetPriceComponentDetail(detail)) OR CHANGED(overCalcPriceComponentDetail(detail)) DO
    priceComponentDetail (detail) <- overSetPriceComponentDetail(detail); 
         
WHEN SESSION FORMS order CHANGED(overSetCostComponentDetail(detail)) DO
    costComponentDetail (detail) <- overSetCostComponentDetail(detail);           
       
WHEN SESSION FORMS order CHANGED(productProductDetail(detail)) DO
    skuProductDetail(detail) <-  skuProduct(productProductDetail(detail));                 
              
countProductsSku (sku) = GROUP SUM 1 BY skuProduct(p);
defaultProductSku (sku)= GROUP MIN product BY skuProduct(product);

WHEN SESSION FORMS order CHANGED(skuProductDetail(d)) NOINLINE DO {
    productProductDetail(d) <- defaultProductSku(skuProductDetail(d))
        WHERE countProductsSku(skuProductDetail(d)) == 1;
}     
                                                                     
countComponentsSku (material) = GROUP SUM 1 BY materialComponent(c) AS Sku;
defaultComponentsSku (material)= GROUP MIN component BY materialComponent(component) AS Sku;                                                                     
                                                                     
//WHEN SESSION FORMS order CHANGED(bruttoSkuComponentDetail(d)) NOINLINE DO {
//    componentComponentDetail(d) <- defaultComponentsSku(bruttoSkuComponentDetail(d))
//        WHERE countComponentsSku(bruttoSkuComponentDetail(d)) == 1;
//}  todo: переделано, потому что не срабатывает событие по CHANGED(componentComponentDetail(d)), которое следует за ним.

WHEN SESSION FORMS order CHANGED(bruttoSkuComponentDetail(d)) AND NOT CHANGED(componentComponentDetail(d)) AND NOT CHANGED(BOMComponentDetail(d)) AND countComponentsSku(bruttoSkuComponentDetail(d)) == 1 NOINLINE DO {
    componentComponentDetail(d) <- defaultComponentsSku(bruttoSkuComponentDetail(d));
    BOMComponentDetail(d) <- BOMComponent(componentComponentDetail(d));              
}
WHEN SESSION FORMS order CHANGED(componentComponentDetail(d)) NOINLINE DO {
    BOMComponentDetail(d) <- BOMComponent(componentComponentDetail(d));    
    bruttoSkuComponentDetail(d) <- skuMaterial(materialComponent(componentComponentDetail(d)));       
}
 
WHEN SESSION FORMS order CHANGED(productProductDetail(d)) NOINLINE DO {
    pricePercentProductDetail(d) <- pricePercentProduct(productProductDetail(d))
        WHERE pricePercentProduct(productProductDetail(d));
} 

FORM orders 'Производственные заказы'

    OBJECTS o = Order
    PROPERTIES(o) READONLYIF isReadonly() isClosedOrder, isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder, nameComponentsStockOrder, nameProductsStockOrder,
                  fromDateOrder, toDateOrder
    PROPERTIES(o) READONLY quantityProductDetailOrder, sumProductDetailOrder, quantityComponentDetailOrder, sumComponentDetailOrder
    PROPERTIES(o) READONLYIF isReadonly() nameCalcPriceListTypeOrder, namePriceListTypeOrder, noteOrder

    PROPERTIES(o) addo=ADDFORM, EDITFORM SHOWIF isOpenedOrder(o)
    PROPERTIES(o) closeOrder SHOWIF isOpenedOrder(o), openOrder SHOWIF isClosedOrder(o)      
    PROPERTIES(o) deleteo=DELETE FORCE PANEL TOOLBAR SHOWIF isOpenedOrder(o)
    PROPERTIES (o) READONLY FORCE PANEL createdNameUserOrder, createdTimeOrder, createdHostnameComputerOrder, 
                                        postedNameUserOrder, postedTimeOrder, postedHostnameComputerOrder

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, idProductProductDetail SHOWIF showIDs(), nameProductProductDetail, 
                   shortNameUOMProductDetail, expiryDateProductDetail, manufactureDateProductDetail, quantityProductDetail, 
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, 
                   costPriceProductDetail, markupProductDetail, pricePercentProductDetail SHOWIF isPricePercentOrder(o), calcPriceCoeffProductDetail SHOWIF isPriceCoeffOrder(o),
                   priceProductDetail, sumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, bruttoNameSkuComponentDetail, idComponentComponentDetail SHOWIF showIDs(), nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail, overCalcPriceComponentDetail 
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) substituteNameSkuComponentDetail, substituteQuantityComponentDetail
    PROPERTIES(cd) READONLY costComponentDetail, priceComponentDetail
    PROPERTIES(cd) READONLY sumComponentDetail

    FILTERS orderComponentDetail(cd)==o

    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder ON CHANGE chooseSubstituteSkuOrder(s,o), multiplierSkuOrder, substituteQuantitySkuOrder 
    FILTERS bruttoQuantitySkuOrder(s,o)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) READONLY quantityComponentDetailSkuOrder, costSkuOrder, dataBruttoPriceSkuOrder, 
                    valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF VATOrder(o)
    FILTERS quantityComponentDetailSkuOrder(sk,o)                

;
DESIGN orders FROM DEFAULT {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        ADD o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1;
            ADD pd.box {
                caption = 'Изделия';
            }
            ADD cd.box {
                caption = 'Компоненты';
            }
            ADD s.box {
                caption = 'Замены';
            }
            ADD sk.box {
                caption = 'Цены';
            }            
            NEW documentHistory {
                caption = 'История';

                ADD o.created;
                ADD o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    type = CONTAINERV;
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(orders);
@defineFilterIsOpened (order, orders, o);

NAVIGATOR {
    manufacturingDocuments {
        ADD orders;
    }
    manufacturingMasterData {
        ADD operations;
    }
}
FORM componentDetails 'Строка компонента'
    OBJECTS d = ComponentDetail
    PROPERTIES(d) READONLY indexComponentDetail, nameSkuComponentDetail, shortNameUOMComponentDetail,
                           descriptionComponentDetail, quantityComponentDetail

    DIALOG ComponentDetail OBJECT d
;

FORM productDetails 'Строка изделия'
    OBJECTS d = ProductDetail
    PROPERTIES(d) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, 
                  expiryDateProductDetail, manufactureDateProductDetail, descriptionProductDetail,
                  quantityProductDetail, priceProductDetail, sumProductDetail

    DIALOG ProductDetail OBJECT d
;

// ---------- Требование на сырье -------- //

FORM requestSkusProductOrder 'Требование на сырье по изделиям'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStockOrder, nameComponentsStockOrder, nameProductsStockOrder, numberOrder, seriesOrder, seriesNumberOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder
                  
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, idProductProductDetail, nameProductProductDetail, 
                   shortNameUOMProductDetail, quantityProductDetail, calcComponentsPriceProductDetail, componentsPriceProductDetail, 
                   costPriceProductDetail, markupProductDetail, pricePercentProductDetail, calcPriceCoeffProductDetail,
                   priceProductDetail, sumProductDetail
    FILTERS orderProductDetail(pd)==o                  
                  
    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail, shortNameUOMSkuComponentDetail,
                   idBarcodeSkuComponentDetail, quantityComponentDetail

    FILTERS orderComponentDetail(cd)==o,
            BOMComponentDetail(cd) == BOMProduct(productProductDetail(pd))
;
printRequestSkusProductOrder'Требование на сырье по изделиям' (order) = ACTION FORM requestSkusProductOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;

currentBalanceSkuComponentsStockOrder 'Текущий остаток' = currentBalanceSkuStock(sku, componentsStockOrder(order));
FORM requestSkusOrder 'Требование на сырье'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStockOrder, nameComponentsStockOrder, nameProductsStockOrder, numberOrder, seriesOrder, seriesNumberOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder
                  
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) READONLY quantityComponentDetailSkuOrder, bruttoBalanceSkuOrder
    FILTERS quantityComponentDetailSkuOrder(sk,o)    
;
printRequestSkusOrder 'Требование на сырье' (order) = ACTION FORM requestSkusOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;
EXTEND FORM orders
    PROPERTIES(o) FORCE PANEL printRequestSkusOrder, printRequestSkusProductOrder
;
EXTEND DESIGN orders {printTab { ADD o.print {align = LEADING;}}}
//------------------------------------------ Опеределение операции для order ------------------------------------//

operationOrder = DATA Operation (Order) PERSISTENT;
nameOperationOrder 'Операция' = nameOperation(operationOrder(order));

operationProductDetail (d) = operationOrder(orderProductDetail(d));
nameOperationProductDetail 'Операция' (d)= nameOperation(operationProductDetail (d));

operationComponentDetail (d) = operationOrder(orderComponentDetail(d));
nameOperationComponentDetail 'Операция' (d)= nameOperation(operationComponentDetail (d));

copyOrder 'Копировать' = ACTION (order) NEWSESSION {
    FOR ADDOBJ o = Order DO {
        componentsStockOrder(o) <- componentsStockOrder(order);
        productsStockOrder(o) <- productsStockOrder(order);
        fromDateOrder(o) <- fromDateOrder(order);
        toDateOrder(o) <- toDateOrder(order);
        productsPriceListTypeOrder(o) <- productsPriceListTypeOrder(order);
        priceListTypeOrder(o) <- priceListTypeOrder(order);
        VATProductOrder(o) <- VATProductOrder(order);
        VATComponentOrder(o) <- VATComponentOrder(order);
        noteOrder(o) <- noteOrder(order);
        operationOrder(o) <- operationOrder(order);
        
        FOR orderProductDetail(productDetail) == order ADDOBJ p=ProductDetail DO {
            orderProductDetail(p) <- o;
            skuProductDetail(p) <- skuProductDetail(productDetail);
            productProductDetail(p) <- productProductDetail(productDetail);
            quantityProductDetail(p) <- quantityProductDetail(productDetail);
            markupProductDetail(p) <- markupProductDetail(productDetail);
            pricePercentProductDetail(p) <- pricePercentProductDetail(productDetail);
        }
        FOR orderComponentDetail(componentDetail) == order ADDOBJ c=ComponentDetail DO {
            orderComponentDetail(c) <- o;
            bruttoSkuComponentDetail(c) <- bruttoSkuComponentDetail(componentDetail);
            productComponentDetail(c) <- productComponentDetail(componentDetail);
            componentComponentDetail(c) <- componentComponentDetail(componentDetail);
            bruttoQuantityComponentDetail(c) <- bruttoQuantityComponentDetail(componentDetail);
            BOMComponentDetail(c) <- BOMComponentDetail(componentDetail);

        }
        FOR bruttoQuantitySkuOrder(sku,order) DO {
            dataBruttoPriceSkuOrder(sku,o) <- dataBruttoPriceSkuOrder(sku,order);
            costSkuOrder(sku,o) <- costSkuOrder(sku,order);
            substituteSkuOrder(sku,o) <- substituteSkuOrder(sku,order);
            multiplierSkuOrder(sku,o) <- multiplierSkuOrder(sku,order);
        }
    
    FORM order OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM order
    PROPERTIES(o) nameOperationOrder
;

EXTEND DESIGN order{
    o.documentHeader{
        NEW header1 {
            type = CONTAINERH; 
            ADD PROPERTY(isPostedOrder(o));
            ADD PROPERTY(nameOperationOrder(o));
        }
        NEW header2 {
            type = CONTAINERH; 
            ADD PROPERTY(nameNumeratorOrder(o));   
            ADD PROPERTY(numberOrder(o));  
            ADD PROPERTY(seriesOrder(o));  
            ADD PROPERTY(dateOrder(o));  
            ADD PROPERTY(timeOrder(o));  
        }        
    }
}
EXTEND FORM orders
    PROPERTIES(o) nameOperationOrder AFTER nameProductsStockOrder(o) READONLY, copyOrder
;

@defineDocumentOperationStock(order, components, 'Склад компонент');
@deriveDocumentOperationStock(order, components, order);
@defineDocumentOperationStock(order, products, 'Склад изделий');
@deriveDocumentOperationStock(order, products, order);

@defineDocumentOperationRole(order);

@defineDocumentHeaderPriceListType (operation, calcPriceListType, , ' (надбавка-изделие)');
@deriveDocumentOperationProperty(Order, calcPriceListType);

@defineDocumentHeaderPriceListType (operation, priceListType, products, ' (изделие)');
@deriveDocumentOperationProperty(Order, productsPriceListType);
@defineDocumentHeaderPriceListType (operation, priceListType, , ' (потребность)');
@deriveDocumentOperationProperty(Order, priceListType);

notRecalculateMarkupOperation 'Не пересчитывать наценку' = DATA BOOLEAN (Operation);
notRecalculateMarkupOrder(order) += notRecalculateMarkupOperation(operationOrder(order));

EXTEND FORM operation
     PROPERTIES(o) nameCalcPriceListTypeOperation, nameProductsPriceListTypeOperation, namePriceListTypeOperation, notRecalculateMarkupOperation

 ;
EXTEND DESIGN operation {
    showContainer {
        ADD PROPERTY(nameCalcPriceListTypeOperation(o));
        ADD PROPERTY(nameProductsPriceListTypeOperation(o));
        ADD PROPERTY(namePriceListTypeOperation(o));
        ADD PROPERTY(notRecalculateMarkupOperation(o));
    }
}

@deriveDocumentOperationProperty(order, isPricePercent);
@deriveDocumentOperationProperty(order, isPriceCoeff);
//-------------------- Подбор изделий -----------------//
productDetailOrderProduct (order,product) =  GROUP MAX productDetail
    BY orderProductDetail(productDetail), productProductDetail(productDetail);

quantityOrderProduct 'Кол-во изделий в документе' (order,product) =  GROUP SUM quantityProductDetail(productDetail)
    BY orderProductDetail(productDetail), productProductDetail(productDetail);    
    
changeQuantityProductOrder = ACTION (product, order) {
    REQUEST NUMERIC[14,3] INPUT;
    IF productDetailOrderProduct(order,product) THEN {
        IF requestedNumeric() THEN {
            quantityProductDetail(detail) <- requestedNumeric() WHERE detail == productDetailOrderProduct(order,product);
        } ELSE {
            DELETE detail WHERE detail == productDetailOrderProduct(order,product);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = ProductDetail DO {
                orderProductDetail(d) <- order;
                productProductDetail(d) <- product;
                quantityProductDetail (d) <- requestedNumeric();
            }
        }
    }
}

EXTEND FORM order

    TREE skuTree g = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(g), nameSkuGroup(g)
    ORDER BY nameSkuGroup(g)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(g) 'F5' DEFAULT
    ORDER BY orderSkuGroup(g)
    
    OBJECTS p=Product
    PROPERTIES(p) idProduct SHOWIF showIDs()
    PROPERTIES(p) READONLY descriptionProduct, nameSkuProduct, shortNameUOMProduct
    PROPERTIES(o,p) quantityOrderProduct ON CHANGE changeQuantityProductOrder(p,o)

    ORDER BY nameSkuProduct(p)
    
    FILTERS                isParentSkuGroupSku(g, skuProduct(p)),
                           activeSku(skuProduct(p))    
;

EXTEND DESIGN order{
    row1 {
        NEW tabContainer AFTER row111 {
            fill = 1;
            type = TABBED;
            ADD pd.box;
            NEW selectPane {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                ADD skuTree.tree.box { caption = 'Группы'; }                
                ADD p.box;
            }
        
        }
    }
}

