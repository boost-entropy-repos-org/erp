MODULE ProductionOrder;

REQUIRE Substitute, PriceListType, PriceListCalc, StockTax, ProductionOperation, SkuLedgerTax, StockMovement;

NAMESPACE Production;

// ----------------  Заказ ------------------- //
CLASS Order 'Производственный заказ';
TABLE order(Order);

@defineExternalizable(order, VARSTRING[100]);
@defineDocumentHeaderTime(Order);
@deriveDocumentHeaderTimePrefix(Order, );

is (Order o) = o IS Order;
    
@defineDocumentHeaderNote(Order);

@defineDocumentHeaderNumber(Order);

@defineNumeratedDefault(Order, 'Производственные заказы', 'ПЗ');

@defineDocumentHeaderCreated(Order);
@defineDocumentHeaderPosted(Order);
@defineDocumentHeaderClosed(Order);

@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');

@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка-изделие)');
@defineDocumentHeaderPriceListType (order, priceListType, LedgerPriceListType, products, ' (изделие)');

VATComponent 'Включает НДС' = DATA BOOLEAN (Order);
VATComponent(Order order) <- includeVAT(priceListType(order)) WHEN CHANGED(priceListType(order));

VATProduct 'Включает НДС' = DATA BOOLEAN (Order);
VATProduct(Order order) <- includeVAT[PriceListType](calcPriceListType(order)) OR includeVAT(productsPriceListType(order)) 
    WHEN CHANGED(calcPriceListType(order)) OR CHANGED(productsPriceListType(order));

backgroundVAT 'Цвет' (Order order) = RGB(255, 255, 224) IF order IS Order;
VAT (Order o) = VATProduct(o) OR VATComponent(o);

@defineDocumentHeaderLegalEntity(order, company, 'Компания');

@defineDocumentHeaderStock (order, stock, 'Склад компонент', components);
@defineDocumentHeaderStock (order, stock, 'Склад изделий', products);

@defineDocumentHeaderDatePrefix (Order, from, ' действия с');
@defineDocumentHeaderDatePrefix (Order, to, ' действия по');

@defineDocumentHeaderDescription(Order, 'Производственный заказ');

CONSTRAINT company(Order order) AND productsStock(order) AND NOT
in(company(order), productsStock(order))
    CHECKED BY productsStock[Order]
        MESSAGE 'Организация и склад изделий для производственного заказа не имеют связи';
        
CONSTRAINT company(Order order) AND componentsStock(order) AND NOT
in(company(order), componentsStock(order))
    CHECKED BY componentsStock[Order]
        MESSAGE 'Организация и склад компонент для производственного заказа не имеют связи';

//
calcBOMPrice 'Расчет цен от коэффициента' = DATA BOOLEAN (Order);
calcBOMPrice 'Расчет цен от коэффициента' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) calcBOMPrice 
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(calcBOMPrice(o));
    }
}

// ---------------- Изделия ------------------- //

CLASS ProductDetail 'Строка изделия';
TABLE productDetail (ProductDetail);
TABLE sessionProductDetail (Session, ProductDetail);

@defineExternalizable(productDetail, VARSTRING[100]);
@defineDocumentRelation (order, ProductDetail, );
@defineDocumentDetailIndex (order, ProductDetail);
@defineDocumentDetailActionsCustom (order, ProductDetail);
@defineDocumentDetailPosted (order, ProductDetail);
@defineDocumentDetailClosed (order, ProductDetail);
@defineDocumentClosedConstraint(Order);

@defineDocumentDetailTime (order, ProductDetail);
@defineDocumentDetailDatePrefix (order, ProductDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ProductDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ProductDetail);

seriesNumber 'Серия/Номер' = seriesNumber(order(ProductDetail d)) IN recognize;
series 'Серия' = series(order(ProductDetail d));
number 'Номер' = number(order(ProductDetail d));

currencyProduct (Order o) = currency(productsStock(o)) PERSISTENT;
currency (ProductDetail productDetail) = currencyProduct(order(productDetail));

@defineDocumentDetailStock (order, productDetail, stock, componentsStock, 'Склад компонент');
//@defineDocumentDetailStock (order, productDetail, stock, productsStock, 'Склад изделий');
    productsStock (ProductDetail idetail) = productsStock(order(idetail)) PERSISTENT;
    nameProductsStock 'Склад изделий' (ProductDetail idetail) = name(productsStock(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;
    fullNameProductsStock 'Склад изделий' (ProductDetail idetail) = fullName(productsStock(idetail)) MINCHARWIDTH 10 PREFCHARWIDTH 20;    
    countryProductsStock (ProductDetail idetail) = country(productsStock(idetail));
    legalEntityProductsStock (ProductDetail idetail) = legalEntity(productsStock(idetail));
    nameLegalEntityProductsStock 'Компания (Склад изделий)' (ProductDetail idetail) = name(legalEntityProductsStock (idetail));
    fullNameLegalEntityProductsStock 'Компания (Склад изделий) полное наим-ие' (ProductDetail idetail) = fullName(legalEntityProductsStock (idetail));
// Sku
@defineDocumentDetailSkuCustom (productDetail, sku);

CONSTRAINT sku(ProductDetail d) AND NOT isProductGroup(sku(d)) CHECKED  BY sku[ProductDetail]
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';

product 'Изделие' = DATA Product (ProductDetail) NOT NULL;
nameProduct 'Изделие' (ProductDetail productDetail) = name(product(productDetail)) IN recognize;
idProduct 'Код изделия' (ProductDetail d) = id(product(d));
BOM 'Спецификация' (ProductDetail d) = BOM(product(d));

CONSTRAINT BOM(ProductDetail d) AND componentsStock(d) AND countStocks(BOM(d)) AND NOT in(BOM(d), componentsStock(d))
    CHECKED BY product[ProductDetail]
    MESSAGE 'Для строки изделия в производственном заказе выбрана спецификация, которая не действует для склада компонента.';


UOM = UOM(product(ProductDetail productDetail));
shortNameUOM 'Ед.изм.' (ProductDetail productDetail) = shortName(UOM(productDetail)) IN recognize;

CONSTRAINT sku(ProductDetail productDetail) != sku(product(productDetail)) CHECKED BY product[ProductDetail]
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';
    
expiryDate 'Годен до' = DATA DATE (ProductDetail);
overManufactureDate = ABSTRACT DATE (ProductDetail);
calcManufactureDate (ProductDetail d) = OVERRIDE 
    (IF expiryMonth(sku(d)) 
        THEN sumMonth(expiryDate(d), -expiryMonth(sku(d)))
        ELSE sum(expiryDate(d), -expiryDays(sku(d)))),
    overManufactureDate(d);  
     
manufactureDate 'Дата изготовления' = DATA DATE (ProductDetail);    
overExpiryDate = ABSTRACT DATE (ProductDetail);      
calcExpiryDate (ProductDetail d) = OVERRIDE 
    (IF expiryMonth(sku(d)) 
        THEN sumMonth(manufactureDate(d), expiryMonth(sku(d)))
        ELSE sum(manufactureDate(d), expiryDays(sku(d)))),
    overExpiryDate(d);
    
denyRepeatSkuOrder 'Запретить повтор изделий в производственном заказе' = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES denyRepeatSkuOrder();

DESIGN options {
    manufacturing{
        MOVE PROPERTY (denyRepeatSkuOrder());
    }
}

CONSTRAINT denyRepeatSkuOrder() AND [= GROUP SUM 1 BY sku(ProductDetail d), order(d)](Sku s, Order o) > 1 MESSAGE 'Изделие может быть включено в заказ только один раз';

// Кол-во
@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

calcBOMPrice = calcBOMPrice(order(ProductDetail d)) PERSISTENT;

@defineDocumentDetailQuantityCustomPrefix(productDetail, BOM, ' в спецификации'); //-- первичное свойство

BOMQuantity(ProductDetail d) <- quantity(product(d))
    WHEN CHANGED (product(d));

quantityBOM 'Кол-во в спецификации' = quantity(product(ProductDetail d)) PERSISTENT;
quantityPrice 'Кол-во для расчета цены' = IF calcBOMPrice(ProductDetail d) THEN
                                                            quantityBOM(d) ELSE
                                                            quantity(d) PERSISTENT;

quantityProductDetail 'Кол-во изделий в документе' (sku, order) =  GROUP SUM quantity(ProductDetail productDetail)
    BY sku(productDetail), order(productDetail); 
countProductDetail 'Кол-во строк изделий в документе' (sku, order) = 
    GROUP SUM 1 BY  sku(ProductDetail idetail), order(idetail);  
    
//Процент и коэффициент цены
pricePercent 'Удельный вес цены,%' = DATA NUMERIC[15,10] (ProductDetail);

isPricePercent 'Удельный вес цены,%' = DATA BOOLEAN (Order);
isPriceCoeff 'Коэффициент цены' = DATA BOOLEAN (Order);

isPricePercent 'Удельный вес цены,%' = DATA BOOLEAN (Operation);
isPriceCoeff 'Коэффициент цены' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) isPricePercent, isPriceCoeff 
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(isPricePercent(o));
        MOVE PROPERTY(isPriceCoeff(o));
    }
}

// Цены компонент
@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

VATComponent (ProductDetail d) = VATComponent(order(d));
VATProduct 'Включает НДС' (ProductDetail d) = VATProduct(order(d));
addVAT (ProductDetail d) = VATComponent(d) AND NOT VATProduct(d) PERSISTENT;  

calcPriceListType (ProductDetail productDetail) = calcPriceListType(order(productDetail)) PERSISTENT;
productsPriceListType (ProductDetail productDetail) = productsPriceListType(order(productDetail)) PERSISTENT;
markup 'Надбавка, %' = DATA NUMERIC[10,4] (ProductDetail);
valueVAT 'НДС, %' = DATA NUMERIC[10,5] (ProductDetail);

// коэффициент с надбавкой и НДС
multiplierCalc (ProductDetail d) = 
    ((100.00 (+) markup(d)) *
    (100.00 (+) (valueVAT(d) IF addVAT(d))) 
    / 10000) IF d IS ProductDetail PERSISTENT;


// Цены изделий
@defineDocumentDetailPriceCustomPrefix (productDetail, , ' изделия');
costPrice 'Себестоимость изделия' = DATA NUMERIC[14,2] (ProductDetail);


sum 'Сумма изделия' = DATA NUMERIC[16,2] (ProductDetail) @@denomination;
sum(ProductDetail productDetail) <-
    NUMERIC[16,2](round((quantity(productDetail) * price(productDetail)), currency(productDetail)))
    WHEN CHANGED (quantity(productDetail)) OR
         CHANGED (price(productDetail)) OR
         CHANGED (currency(productDetail));

sumProductDetail 'Сумма заказанных изделий' (order) = GROUP SUM sum(ProductDetail idetail) BY order(idetail) IN documentSum;

// ------------- Компоненты ----------- //
CLASS ComponentDetail 'Строка компонента';
TABLE componentDetail (ComponentDetail);
TABLE sessionComponentDetail (Session, ComponentDetail);

@defineDocumentRelation (order, ComponentDetail, );
@defineDocumentDetailIndex (order, ComponentDetail);
@defineDocumentDetailActionsCustom (order, ComponentDetail);
@defineDocumentDetailPosted (order, ComponentDetail);
@defineDocumentDetailClosed (order, ComponentDetail);

@defineDocumentDetailNumber(order, ComponentDetail);

@defineDocumentDetailTime (order, ComponentDetail);
@defineDocumentDetailDatePrefix (order, ComponentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ComponentDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ComponentDetail);

currencyComponent (Order o) = currency(componentsStock(o)) PERSISTENT;
currency (ComponentDetail componentDetail) = currencyComponent(order(componentDetail));

@defineDocumentDetailStock (order, componentDetail, stock, componentsStock, 'Склад компонент') ;
@defineDocumentDetailStock (order, componentDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, brutto, ' (брутто)');
VAT(ComponentDetail componentDetail) = VATComponent(order(componentDetail)) PERSISTENT;

component = DATA Component (ComponentDetail);
nameComponent 'Компонент' (ComponentDetail componentDetail) = name(component(componentDetail));
idComponent 'Код компонента' (ComponentDetail componentDetail) = id(component(componentDetail));

CONSTRAINT bruttoSku(ComponentDetail d) AND NOT isComponentGroup(bruttoSku(d)) CHECKED  BY bruttoSku[ComponentDetail]
    MESSAGE 'В качестве компонента выбран товар, который не входит в группу: Сырье';
    
UOM = UOM(component(ComponentDetail componentDetail));
shortNameUOM 'Ед. изм.' (ComponentDetail componentDetail) = shortName(UOM(componentDetail));

CONSTRAINT component(ComponentDetail componentDetail) AND bruttoSku(componentDetail) AND NOT bruttoSku(componentDetail) == sku(component(componentDetail))
    CHECKED BY component[ComponentDetail] MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

product = DATA Product (ComponentDetail);
nameMaterial 'Изделие' (ComponentDetail componentDetail) = name(product(componentDetail));

CONSTRAINT product(ComponentDetail componentDetail) AND bruttoSku(componentDetail) AND NOT bruttoSku(componentDetail) == sku(product(componentDetail))
    CHECKED BY product[ComponentDetail] MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

// Кол-во
@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');
@defineDocumentDetailQuantityCustomPrefix(componentDetail, BOM, ' в спецификации'); //-- первичное свойство

@defineDocumentDetailPriceCustomPrefix (componentDetail, , );
cost 'Себестоимость' = DATA NUMERIC[14,2] (ComponentDetail) @@denomination;

// Замены
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, substitute, ' (замена)');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, substitute, ' (замена)');

bruttoQuantityBOM 'Кол-во в спецификации' = bruttoQuantity(component(ComponentDetail d), date(d));

// Параметры компонент с учетом замен

sku (ComponentDetail componentDetail) = OVERRIDE bruttoSku(componentDetail), substituteSku(componentDetail) PERSISTENT;
INDEX sku(ComponentDetail cd), order(cd);
nameSku 'SKU' (ComponentDetail componentDetail) = name(sku(componentDetail));
idSku 'Код ' (ComponentDetail componentDetail) = id(sku(componentDetail));
idBarcodeSku 'Штрихкод' (ComponentDetail componentDetail) = idBarcode(sku(componentDetail));
shortNameUOMSku 'Ед.изм.' (ComponentDetail componentDetail) = shortNameUOM(sku(componentDetail));

quantity 'Кол-во' (ComponentDetail componentDetail) = OVERRIDE bruttoQuantity(componentDetail), substituteQuantity(componentDetail) PERSISTENT;

calcBOMPrice (ComponentDetail d) = calcBOMPrice(order(d));

quantityPrice 'Кол-во для расчета цены' (ComponentDetail d) = IF calcBOMPrice(d) THEN
                                                                bruttoQuantityBOM(d) ELSE
                                                                quantity(d);

// Сумма
@defineDocumentDetailDataSum (component);
@deriveDocumentDetailSum(component, quantity);

sumComponentDetail 'Сумма заказанных компонент' (order) = GROUP SUM sum(ComponentDetail idetail) BY order(idetail) IN documentSum;

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, , ' (компонент)');
quantityComponentDetail 'Кол-во (всего) (компонент)' (sku, order) = GROUP SUM quantity(ComponentDetail idetail) BY sku(idetail), order(idetail) IN documentSum PERSISTENT;

//-- Партия для строки компонента

hideBatch = ABSTRACT OVERRIDE BOOLEAN (ComponentDetail);
showBatch(ComponentDetail d) = d IS ComponentDetail AND NOT hideBatch(d);
 
batch = DATA Batch (ComponentDetail) INDEXED;
nameBatch 'Партия' (ComponentDetail d) = name(batch(d)) MINCHARWIDTH 20 PREFCHARWIDTH 40;

FORM dialogBatchStockOrder 'Партии'
    OBJECTS st = Stock FIXED PANEL
    OBJECTS t = DATETIME FIXED PANEL
    OBJECTS sk = Sku FIXED PANEL
    PROPERTIES(sk) READONLY name
    
    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY number, series, dateTime, nameSupplier, idBarcodeSku, id SHOWIF showIDs(), shippedQuantity, cost, expiryDate
    PROPERTIES  READONLY balanceB(bt, st, t)
    PROPERTIES  READONLY currentBalance(bt, st)
    PROPERTIES(bt, st, t) READONLY accountPriceA
    
    FILTERS skuLedger(bt, st) == sk
    ORDER BY dateTime(bt)
    
    FILTERGROUP batch
        FILTER 'Партии с остатком до операции' balanceB(bt, st, t) > 0 'F11'
        FILTER 'Партии с текущим остатком' currentBalance(bt, st) > 0 'F9' DEFAULT
        FILTER 'Партии с остатком' currentBalance(bt, st) 'F8'
;


changeBatch(ComponentDetail d) = ACTION {
    IF batch(d) THEN {
        FORM dialogBatchStockOrder OBJECTS st = componentsStock(d),
                                 t = dateTime(d),
                                 sk = sku(d),
                                 bt = batch(d) DIALOG SHOWDROP;    
    } ELSE {
        FORM dialogBatchStockOrder OBJECTS st = componentsStock(d),
                                 t = dateTime(d),
                                 sk = sku(d) DIALOG SHOWDROP;    
    }


    IF formResult() == FormResult.ok THEN {
        batch(d) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batch(d) <- NULL;
    }
}


CONSTRAINT sku(batch(ComponentDetail cd)) != sku(cd) CHECKED BY batch[ComponentDetail]
    MESSAGE 'Товар партии строки компонента должен соответствовать SKU строки строки компонента для производственного заказа';  

// ------------- Заполнение компонентов из спецификаций --------------- //

TABLE productOrder(Product, Order);
quantity 'Кол-во изделий в заказе' (product, order) = GROUP SUM quantity(ProductDetail productDetail)
    BY product(productDetail), order(productDetail) PERSISTENT;

TABLE BOMOrder(BOM, Order);
quantityProducts 'Кол-во спецификаций' (BOM BOM, Order order) = [= GROUP MAX NUMERIC[19,8](quantity(Product product, Order order)) / quantity(product)
    BY BOM(product), order](BOM, order) PERSISTENT;
    
BOM= DATA BOM (ComponentDetail);
INDEX BOM(ComponentDetail cd), order(cd);
nameBOM 'Спецификация' = name(BOM(ComponentDetail d));    
fullNameBOM 'Спецификация (полное название)' = fullName(BOM(ComponentDetail d));    

CONSTRAINT BOM(ComponentDetail d) AND componentsStock(d) AND countStocks(BOM(d)) AND NOT in(BOM(d), componentsStock(d))
    CHECKED BY BOM[ComponentDetail]
    MESSAGE 'Для строки компонента в производственном заказе выбрана спецификация, которая не действует для склада компонента.';

CONSTRAINT component(ComponentDetail d) AND componentsStock(d) AND countStocks(BOM(component(d))) AND NOT in(BOM(component(d)), componentsStock(d))
    CHECKED BY BOM[ComponentDetail]
    MESSAGE 'Для строки компонента в производственном заказе выбрана компонента, которая не действует для склада компонента.';

createComponents 'Заполнить компоненты из спецификации'(Order order) = ACTION {

    FOR quantityProducts(BOM BOM, order) DO {

        FOR BOM(Component component) == BOM DO {
            FOR ADDOBJ d=ComponentDetail DO {
                order(d) <- order;
                component(d) <- component;
                bruttoQuantity(d) <- bruttoQuantity(component, date(order)) * quantityProducts(BOM,order);
                BOMQuantity(d) <- bruttoQuantity(component, date(order)); 
                
                BOM(d) <- BOM; 
                
                IF material(component) IS Sku THEN {
                    bruttoSku(d) <- material(component);
                } ELSE {
                    IF material(component) IS Product THEN {
                        product(d) <- material(component);
                        bruttoSku(d) <- sku[Product](material(component));
                    }
                }
            }
        }
    }

} TOOLBAR;

recBruttoQuantity 'Рекур.кол-во' (BOM, order, sku) = GROUP SUM quantityProducts(BOM BOM, Order order) * recBruttoQuantity(BOM, Sku sku, date(order)) BY BOM, order, sku;
recBOMQuantity 'Рекур.кол-во' (BOM, order, sku) = GROUP SUM recBruttoQuantity(BOM BOM, Sku sku, date(Order order)) BY BOM, order, sku;

productionCoeff = ABSTRACT NUMERIC[20,9] (ComponentDetail);
quantityCoeff(ComponentDetail d) = OVERRIDE 1.0 IF d IS ComponentDetail, productionCoeff(d) PERSISTENT; 
createRecComponents 'Заполнить из спецификации (рекурсивно)'(Order order) = ACTION  {

    FOR NUMERIC[91,46] q == recBruttoQuantity(BOM BOM, order, Sku sku) ORDER BOM ADDOBJ d = ComponentDetail DO {
        order(d) <- order;
        BOM(d) <- BOM;
        bruttoSku(d) <- sku;
        bruttoQuantity(d) <- q;
        BOMQuantity(d)  <- recBOMQuantity(BOM, order, sku);
    }
} TOOLBAR;

calcSkuBruttoQuantity (ComponentDetail d) = recBruttoQuantity(BOM(d), order(d), sku(d)) * quantityCoeff(d);
calcSkuBOMQuantity (ComponentDetail d) = recBOMQuantity(BOM(d), order(d), sku(d)) * quantityCoeff(d);

updateComponentsOrder 'Пересчитать кол-во для всех'(order) = ACTION {
    bruttoQuantity(ComponentDetail d) <- calcSkuBruttoQuantity (d);
    BOMQuantity(ComponentDetail d)  <- calcSkuBOMQuantity(d);
} TOOLBAR;

// ------------- Заполнение изделий из спецификаций --------------- //

quantityComponents 'Кол-во спецификаций' (BOM BOM, Order order) =
    [= GROUP MAX NUMERIC[19,8](bruttoQuantity(ComponentDetail componentDetail)) / bruttoQuantity(component(componentDetail), date(componentDetail))
    BY BOM(component(componentDetail)), order(componentDetail)](BOM, order);

overCreateProducts = ACTION ABSTRACT LIST (Order);
createProducts 'Заполнить изделия из спецификации '(Order order) = ACTION  {

    FOR NUMERIC[35,19] q == quantityComponents(BOM(Product product), order) ADDOBJ d = ProductDetail DO {
        order(d) <- order;
        sku(d) <- sku(product);
        product(d) <- product;
        quantity(d) <- round3(quantity(product) * q);
        BOMQuantity(d) <- quantity(product);
    }
    overCreateProducts(order);
} TOOLBAR;

expand 'Развернуть изделие'(ComponentDetail componentDetail) = ACTION  {

    FOR  BOM(Component component) == BOM(product(componentDetail))  DO {
        FOR ADDOBJ d=ComponentDetail DO {
            order(d) <- order(componentDetail);
            component(d) <- component;
            bruttoQuantity(d) <- bruttoQuantity(component, date(order(componentDetail))) *
                bruttoQuantity(componentDetail) / quantity(product(componentDetail));    //ceil
            BOMQuantity(d) <- bruttoQuantity(component, date(order(componentDetail))) *
                BOMQuantity(componentDetail) / quantity(product(componentDetail));    //ceil
                                
            BOM(d) <- BOM(componentDetail);     

            IF material(component) IS Sku THEN {
                bruttoSku(d) <- material(component);
            } ELSE {
                IF material(component) IS Product THEN {
                    product(d) <- material(component);
                    bruttoSku(d) <- sku[Product](material(component));
                }
            }
        }
    }
    DELETE componentDetail;
} TOOLBAR;

background 'Цвет'  = ABSTRACT CASE OVERRIDE FIRST COLOR (ComponentDetail);
background (ComponentDetail cd) += WHEN product(cd) THEN  RGB(255,255,229);

recBruttoQuantity 'Рекур.кол-во' (BOM, order, component) = GROUP SUM quantityProducts(BOM BOM, Order order) * recBruttoQuantity(BOM, Component component, date(order)) BY BOM, order, component;
recBOMQuantity 'Рекур.кол-во' (BOM, order, component) = GROUP SUM recBruttoQuantity(BOM BOM, Component component, date(Order order)) BY BOM, order, component;

calcComponentBruttoQuantity (ComponentDetail d) = recBruttoQuantity(BOM(d), order(d), component(d)) * quantityCoeff(d);
calcComponentBOMQuantity (ComponentDetail d) = recBOMQuantity(BOM(d), order(d), component(d)) * quantityCoeff(d);

createForRecComponents 'Заполнить из спецификации (рекурсивно по компонентам)'(Order order) = ACTION  {

    FOR NUMERIC[91,46] q == recBruttoQuantity(BOM BOM, order, Component component) IF material(component) IS Sku ORDER BOM ADDOBJ d = ComponentDetail DO {
        order(d) <- order;
        BOM(d) <- BOM;
        bruttoSku(d) <- material(component);
        component(d) <- component;
        bruttoQuantity(d) <- q;
        BOMQuantity(d) <- recBOMQuantity(BOM, order, component);
    }
} TOOLBAR;

// ---------------- Подбор цен и замен для sku --------------------------- //

TABLE skuOrder(Sku, Order);

// --- Основной компонент --- //
bruttoQuantity 'Количество брутто' (sku, order) = GROUP SUM bruttoQuantity(ComponentDetail componentDetail)
                                                                BY bruttoSku(componentDetail),
                                                                   order(componentDetail) PERSISTENT;
             
bruttoNotSubstituteQuantity 'Количество без замены' (sku, order) = GROUP SUM bruttoQuantity(ComponentDetail componentDetail) 
    IF NOT substituteQuantity(componentDetail)
    BY bruttoSku(componentDetail),
       order(componentDetail) PERSISTENT;                                                                     
                                                                   
bruttoSubstituteQuantity (sku, order) = GROUP SUM bruttoQuantity(ComponentDetail componentDetail) 
    IF substituteQuantity(componentDetail)
    BY bruttoSku(componentDetail),
       order(componentDetail) PERSISTENT;                                                                                                                                   
                                                                                                                                 
// цены по товару
dataBruttoPrice 'Цена' = DATA NUMERIC[14,2] (Sku, Order) @@denomination;
cost 'Себестоимость' = DATA NUMERIC[14,2] (Sku, Order) @@denomination;

WHEN SESSION (CHANGED(priceListType(Order order)) OR CHANGED(componentsStock(order)) OR CHANGED(dateTime(order)) OR SET(quantityComponentDetail(Sku sku, order)))
             AND quantityComponentDetail(sku, order) AND NOT CHANGED(dataBruttoPrice(sku, order)) AND PriceListType pt == priceListType(order) NOINLINE (pt) DO
    dataBruttoPrice (sku, order) <- prevPriceB(pt,
                                                                                    sku,
                                                                                    componentsStock(order),
                                                                                    dateTime(order));

calcCost 'Себестоимость' (Sku sku, Stock stock) = [= GROUP SUM cost(Batch b) * currentBalance(b,Stock stock) BY sku(b), stock](sku, stock) /
    (currentBalance(sku, stock) IF currentBalance(sku, stock) != 0);   

WHEN SESSION (CHANGED(quantityComponentDetail(Sku sku, Order order)) OR CHANGED(componentsStock(order)))
             AND quantityComponentDetail(sku, order) AND NOT CHANGED(cost(sku, order)) DO
    cost (sku, order) <- calcCost(sku, componentsStock(order));
    
// --- Замена --- //
substitute = DATA Sku (Sku, Order);
nameSubstitute 'Замена' (Sku sku, Order order) = name(substitute(sku, order));

substituteQuantity 'Кол-во замены' = DATA NUMERIC[14,3] (Sku, Order);
overSubstituteQuantity 'Кол-во' = OVERRIDE bruttoQuantity(Sku sku, Order order), substituteQuantity(sku, order);
multiplier 'Коэффициент замены' = DATA NUMERIC[8,3] (Sku, Order);

//--
stockSubstitutesSku = DATA LOCAL Stock ();
nameStockSubstitutesSku 'Склад' = name(stockSubstitutesSku());

BOMSubstitutesSku = DATA LOCAL BOM ();
productsBOMSubstitutesSku 'Спецификация' = products(BOMSubstitutesSku());

multiplierSubstitutes 'Коэффициент' = DATA LOCAL NUMERIC[8,3] (Sku);

currentBalanceSkuSubstitutes 'Текущий остаток' (Sku sku) =  currentBalance(sku, stockSubstitutesSku());

substitutesPrice 'Цена' (Sku sku,Order order)= prevPriceB(priceListType(order), sku, stockSubstitutesSku(), dateTime(order));
showPriceSubstitutes (Order order) = stockSubstitutesSku() AND priceListType(order);

multiplierSubstituteTo 'Коэффициент' (Sku fromSku ,Sku toSku) =  multiplier(uniqueSubstituteFromTo(fromSku ,toSku));
changeMultiplierSubstituteFromTo(Sku fromSku, Sku toSku) = ACTION {
    REQUEST NUMERIC[8,3] INPUT;
    IF requestedNumeric() THEN {         
        IF uniqueSubstituteFromTo(fromSku, toSku) THEN {
            multiplier(Substitute substitut) <- requestedNumeric() WHERE uniqueSubstituteFromTo(fromSku, toSku) == substitut;
        } ELSE {
            FOR  ADDOBJ sub = Substitute DO{
                fromSku(sub) <- fromSku;
                toSku(sub) <- toSku;
                multiplier(sub) <- requestedNumeric();
            }        
        }
    } ELSE {
        IF uniqueSubstituteFromTo(fromSku, toSku) THEN {
            DELETE Substitute substitut  WHERE uniqueSubstituteFromTo(fromSku, toSku) == substitut;
        }    
    }        
}
backgroundSubstitutes 'Цвет' (Order order) = RGB(255,224,255) IF order IS Order;

filterubstituteFromTo (Sku s,Sku sk) =  IF BOMSubstitutesSku() 
    THEN use(uniqueSubstituteFromTo(s,sk),BOMSubstitutesSku())
    ELSE TRUE IF uniqueSubstituteFromTo(s,sk);


FORM substitutesSku 'Замены'
    PROPERTIES() nameStockSubstitutesSku, productsBOMSubstitutesSku
    OBJECTS o = Order FIXED PANEL
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) name
    
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER BY order(sg)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
    PROPERTIES     READONLY SHOWIF stockSubstitutesSku() currentBalanceSkuSubstitutes(sk)
    PROPERTIES     READONLY SHOWIF showPriceSubstitutes(o) substitutesPrice(sk,o)

    PROPERTIES(s,sk) multiplierSubstituteTo ON CHANGE changeMultiplierSubstituteFromTo(s,sk) BACKGROUND  backgroundSubstitutes(o)
    PROPERTIES() addSku TODRAW sk
    PROPERTIES(sk) edit, copy
    FILTERS isParent(sg, sk)
    ORDER BY name(sk)

    FILTERGROUP filter1
        FILTER 'Товары с остатком' currentBalanceSkuSubstitutes(sk) AND stockSubstitutesSku() 'F10' DEFAULT
    FILTERGROUP filter2
        FILTER 'Доступные замены' filterubstituteFromTo (s,sk) 'F9' DEFAULT
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroup(sk) 'F8' DEFAULT                         
;

DESIGN substitutesSku {
    main{
        preferredSize = (1200, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE skuTree.tree.box {
                caption = 'Группы SKU';
            }

            MOVE sk.box {
                fill = 3;
            }
        }
        NEW headerContainer BEFORE topContainer {
            type = CONTAINERH ;
            NEW stockContainer {
                caption = 'Склад';
                MOVE PROPERTY (nameStockSubstitutesSku());
            }
            MOVE s.box {
                caption = 'Заменяемый товар';
                MOVE PROPERTY (name(s));                
            };
            NEW BOMContainer {
                caption = 'Спецификация';
                MOVE PROPERTY (productsBOMSubstitutesSku());
            }            
        }
        REMOVE o.box;        
        MOVE functions.box;
    }
}

chooseSubstitute 'Выбрать замену'(Sku fromSku, Order order) =  ACTION {
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku() <- NULL;
    stockSubstitutesSku() <- componentsStock(order) WHERE componentsStock(order);

    FORM substitutesSku OBJECTS o= order, s=fromSku DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substitute(fromSku, order) <- chosenObject('sk');
        multiplier(fromSku, order) <- multiplierSubstituteTo(fromSku,chosenObject('sk'));
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substitute(fromSku, order) <- NULL;
            multiplier(fromSku, order) <- NULL;         
        }   
    }
}


currentBalance'Текущий остаток' (Substitute substitute, Order order) = currentBalance(toSku(substitute), componentsStock(order));
substitutesPrice 'Цена' (Substitute substitute, Order order)= prevPriceB(priceListType(order), toSku(substitute), componentsStock(order), dateTime(order));

// Действие по заполнении замены через галочку
is 'Использовать замену' (Substitute substitute, Sku sku, Order order) = substitute(sku, order) == toSku(substitute);
change(Substitute substitute, Sku sku, Order order) = ACTION {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        substitute(sku, order) <- toSku(substitute);
        multiplier(sku, order) <- multiplier(substitute);

    } ELSE {
        substitute(sku, order) <- NULL;
        multiplier(sku, order) <- NULL;
    }
}

// коэффициенты цен
calcQuantityComponentsProductDetailProduct 'Кол-во компонентов' = GROUP SUM quantityPrice(ProductDetail d) BY BOM(d), order(d) PERSISTENT;
calcQuantityComponents 'Кол-во компонентов' = calcQuantityComponentsProductDetailProduct(BOM(ProductDetail detail), order(detail));
            
calcPriceCoeff 'Коэффициент цены' (ProductDetail productDetail) = NUMERIC[20,5](calcQuantityComponents(productDetail) * pricePercent(productDetail) 
    / (quantityPrice(productDetail) * 100.0));  
     
calcPricePercentNumeric '%' (ProductDetail productDetail, NUMERIC[8,5] num) = (num AS NUMERIC[8,5]) * quantityPrice(productDetail) * 100.0 
    / calcQuantityComponents(productDetail);     
    
// Sku с учетом замены
sku (Sku sku, Order order) = OVERRIDE sku IF bruttoQuantity(sku, order), substitute(sku,order) PERSISTENT;

nameSku 'Итоговый sku' (Sku sku,Order order)= name(sku (sku,order));
idBarcodeSku 'Штрихкод' (Sku sku,Order order) = idBarcode(sku (sku, order));
shortNameUOMSku 'Ед.изм.' (Sku sku,Order order) = shortNameUOM(sku (sku, order));

sumComponentDetail 'Сумма' (BOM, sku, order) = GROUP SUM sum(ComponentDetail d) BY BOM(d), sku(d), order(d);

sumComponentDetail = GROUP SUM sum(ComponentDetail d) BY BOM(d), order(d);
quantityComponentDetail = GROUP SUM quantity(ComponentDetail d) BY BOM(d), order(d);
BOMQuantityComponentDetail = GROUP SUM BOMQuantity(ComponentDetail d) BY BOM(d), order(d);

priceComponents (BOM b, Order o) = sumComponentDetail(b, o) / quantityComponentDetail(b, o);  

priceComponents (ProductDetail d) = sumComponentDetail(BOM(d), order(d)) / quantity(d);

calcPricePercent(ProductDetail d) =  IF calcBOMPrice(d) THEN
                                                        NUMERIC[16,5](calcPricePercentNumeric(d, price(d) /
                                                                      priceComponents(BOM(d), order(d))))
                                                     ELSE
                                                        100 * price(d) / priceComponents(d);


calcComponentsPrice 'Цена расчетная с/с' (ProductDetail d) = IF calcBOMPrice(d) THEN // считаем цены от цены спецификации * коэффициент (чтобы избежать проблем с округлением)
                                                                                    priceComponents(BOM(d), order(d)) * 
                                                                                    calcPriceCoeff(d)
                                                                             ELSE
                                                                                    priceComponents (d) // Цена компонентов за единицу 
                                                                                    * pricePercent(d) / 100.0; // удельная цена
                    
costSumComponents =  GROUP SUM quantity(ComponentDetail d) * cost(d) BY BOM(d), order(d);
costComponents (BOM b, Order o) = costSumComponents(b, o) / quantityComponentDetail(b, o);

calcCost 'Себестоимость расчетная' (ProductDetail d)= IF calcBOMPrice(d) THEN // считаем цены от цены спецификации * коэффициент (чтобы избежать проблем с округлением)
                                                                            costSumComponents(BOM(d), order(d)) /
                                                                            quantityComponentDetail(BOM(d), order(d)) *
                                                                            calcPriceCoeff(d)
                                                                      ELSE
                                                                            costSumComponents(BOM(d), order(d)) // Цена компонентов за единицу 
                                                                            / quantity(d)
                                                                            * pricePercent(d) / 100.0; // удельная цена

//calcCostProductDetail 'Себестоимость расчетная' (d)= bruttoCostSumComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d)) 
//                                                                      * pricePercentProductDetail(d) / 100.0 // удельная цена
//                                                                      / quantityProductDetail(d); // за единицу

//-- Подсчет цены изделия с учетом замен
//recPricePercentProductSkuOrder (product, sku, order) = recPricePercentProductSkuDate (product, sku, dateOrder(order));

calcPremiumPrice 'Цена расчетная (с надбавками)' (ProductDetail productDetail) =
    IF roundCondition(calcPriceListType(productDetail), sku(productDetail)) THEN
        NUMERIC[14,2](round(componentsPrice(productDetail) * multiplierCalc(productDetail),
                                               roundCondition(calcPriceListType(productDetail), sku(productDetail))))
    ELSE
        NUMERIC[14,2](round(componentsPrice(productDetail) * multiplierCalc(productDetail),
                                         currency(productDetail)));
                                         
// Изменение надбавок при вводе пользователем процента

changeValueMarkup (ProductDetail detail) = ACTION {
    IF calcPremiumPrice(detail) THEN {
        price(detail) <- calcPremiumPrice(detail);
    }
}

changeComponentsPrice (ProductDetail detail) = ACTION {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        componentsPrice (detail) <- requestedNumeric();
        changeValueMarkup(detail);
    } ELSE
        componentsPrice (detail) <- NULL;
}

// Изменение коэффициентов и цен
overChangePriceCoeff = ACTION ABSTRACT LIST (ProductDetail);
changePriceCoeff(ProductDetail detail) = ACTION {
    REQUEST NUMERIC[8,5] INPUT;
    IF requestedNumeric() THEN {        
        pricePercent(detail) <- NUMERIC[16,5](calcPricePercentNumeric(detail, requestedNumeric()));
        componentsPrice(detail) <- calcComponentsPrice(detail);
        costPrice(detail) <- calcCost(detail);
        changeValueMarkup(detail);
        overChangePriceCoeff(detail);
    }
}
overChangePricePercent = ACTION ABSTRACT LIST (ProductDetail);
changePricePercent(ProductDetail detail) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    IF requestedNumeric() THEN {
        pricePercent(detail) <- requestedNumeric(); 
        componentsPrice(detail) <- calcComponentsPrice(detail);
        costPrice(detail) <- calcCost(detail);
        changeValueMarkup(detail);
        overChangePricePercent(detail);
    }
}   


changeMarkup (ProductDetail detail) = ACTION {
    REQUEST NUMERIC[10,4] INPUT;
    IF requestedNumeric() THEN {
        markup (detail) <- requestedNumeric();
        changeValueMarkup(detail);
    } ELSE
        markup(detail) <- NULL;
}

calcMarkupIsVAT(ProductDetail d)  = [= round2(((X/Z*100/(100+Y))-1)*100)](
    price(d),
    calcComponentsPrice(d) IF calcComponentsPrice(d) != 0.0,
    valueVAT(d));
calcMarkup(ProductDetail d)  = [= round2((X/Y-1)*100)](
    price(d),
    calcComponentsPrice(d) IF calcComponentsPrice(d) != 0.0);    

notRecalculateMarkup = ABSTRACT BOOLEAN (Order);
notRecalculateMarkupOrder(ProductDetail detail) = notRecalculateMarkup(order(detail)); 

changeValueProductsPrice (ProductDetail detail) = ACTION {
    IF addVAT(detail) THEN {
        markup(detail) <- calcMarkupIsVAT(detail);
        IF notRecalculateMarkupOrder(detail) THEN {
            pricePercent(detail) <- calcPricePercent(detail);
        }
    }
    IF NOT addVAT(detail) THEN {
        markup(detail) <- calcMarkup(detail);
        IF notRecalculateMarkupOrder(detail) THEN {
            pricePercent(detail) <- calcPricePercent(detail);
        }
    }
}

//пересчет цены изделия
                                                                                             
overChangeProductsPrice = ACTION ABSTRACT LIST (ProductDetail);
changeProductsPrice (ProductDetail detail) = ACTION {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        price (detail) <- requestedNumeric();
        IF notRecalculateMarkupOrder(detail) THEN {
            pricePercent(detail) <- calcPricePercent(detail);
            componentsPrice(detail) <- calcComponentsPrice(detail);
            costPrice(detail) <- calcCost(detail); 
            overChangeProductsPrice(detail);               
        } ELSE {
            changeValueProductsPrice(detail);    
        }   
    }
}

recordMarkup(ProductDetail detail) = ACTION {
    IF calcPriceListType(detail) THEN {
        markup(detail) <- markup(calcPriceListType(detail), sku(detail));
        changeValueMarkup(detail);
    }
}

// расчет НДС
valueVAT 'НДС, %' = DATA NUMERIC[10,5] (Sku, Order);

WHEN SESSION (CHANGED(componentsCountry(Order order)) OR
              CHANGED(date(order)) OR 
              CHANGED(VAT(order)) OR 
              SET(quantityComponentDetail(Sku sku, order)))
                 AND quantityComponentDetail(sku, order)
                 AND VAT(order) DO {                                      
    valueVAT(sku, order) <- valueVAT(sku, componentsCountry(order), date(order));
}
     
//calcPriceVATProductDetail 'Цена НДС' (d) = [= GROUP SUM bruttoSumComponentsBOMSkuOrder(b, s, o) * valueVATSkuOrder(s, o) / (100.0 + valueVATSkuOrder(s, o)) BY b, o] (BOMProductDetail(d), orderProductDetail(d)) 
//                                                            * (pricePercentProductDetail(d) / 100.0) // удельная цена
//                                                            / quantityProductDetail(d) // за единицу
//                                                            / coeffPercentProductDetail(d); 
//              
//calcValueVATProductDetail 'НДС, %' (productDetail)= [= 100*X/(Y-X)](
//    calcPriceVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail));
//    
////--  если стоит галочка isVATOrder    
//calcPriceIsVATProductDetail 'Цена НДС' (d) = [= GROUP SUM bruttoSumComponentsBOMSkuOrder(b, s, o) * valueVATSkuOrder(s, o) / 100.0 BY b, o] (BOMProductDetail(d), orderProductDetail(d)) 
//                                                         * (pricePercentProductDetail(d) / 100.0) // удельная цена
//                                                         / quantityProductDetail(d) // за единицу
//                                                         / coeffPercentProductDetail(d);       
//   
//calcValueIsVATProductDetail 'НДС, %' (productDetail)= [= 100*X/Y](
//    calcPriceIsVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail) IF calcComponentsPriceProductDetail(productDetail)!= 0);    
//

// todo : надо поддержать галочку Включает НДС (проблема в том, что для учетной цены определить включает она НДС или нет тяжело)

skip(d) = ABSTRACT BOOLEAN (ComponentDetail);

valueVAT(ComponentDetail d) = OVERRIDE valueVAT(sku(d), order(d)), valueVAT(batch(d)) PERSISTENT;
sumVAT (ComponentDetail d) = sum(d) * valueVAT(d) / (100.0 + valueVAT(d));
sumVATComponents (ProductDetail d) = [= GROUP SUM sumVAT(ComponentDetail d) IF NOT skip(d) BY BOM(d), order(d)](BOM(d), order(d)); 
sumVATComponentDetail = GROUP SUM sum(ComponentDetail d) IF NOT skip(d) BY BOM(d), order(d);
calcValueVAT 'НДС, %' = OVERRIDE 0.0, (sumVATComponents(ProductDetail d) * 100.0 /
                                                                     (sumVATComponentDetail(BOM(d), order(d)) - sumVATComponents(d)));
// Расчет цен для изделий
overFillPrice = ACTION ABSTRACT LIST (ProductDetail);
fillPrice 'Заполнить цены для изделий'(ProductDetail detail) = ACTION  {
    valueVAT(detail) <- calcValueVAT(detail);
    componentsPrice(detail) <- calcComponentsPrice(detail);
    costPrice(detail) <- calcCost(detail);
    overFillPrice(detail);
    IF productsPriceListType(detail) AND prevPriceB(productsPriceListType(detail),sku(detail),productsStock(detail),dateTime(detail))    THEN {
                                                                                              
        price(detail) <- prevPriceB(productsPriceListType(detail),sku(detail),productsStock(detail),dateTime(detail));  
        changeValueProductsPrice(detail);                                                                                
                                                                                         
    }
    IF calcPriceListType(detail) AND markup(calcPriceListType(detail), sku(detail)) AND NOT 
        (productsPriceListType(detail) AND prevPriceB(productsPriceListType(detail),sku(detail),productsStock(detail),dateTime(detail))) THEN {
        markup(detail) <- markup(calcPriceListType(detail), sku(detail));
        changeValueMarkup(detail);
    }

} TOOLBAR;



fillPriceProducts 'Заполнить цены для изделий'(Order order) = ACTION  {
    FOR order(ProductDetail detail) == order INLINE DO {
        fillPrice(detail);                                                    
    }
} TOOLBAR;

//-- Замены для компонентов

chooseSubstitute 'Выбрать замену'(ComponentDetail detail) =  ACTION {
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku()<- NULL;
    
    stockSubstitutesSku() <- componentsStock(detail) WHERE componentsStock(detail);
    BOMSubstitutesSku() <- BOM(detail) WHERE BOM(detail);

    FORM substitutesSku OBJECTS o= order(detail), s = bruttoSku(detail) DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSku(detail) <- chosenObject('sk'); 
        substituteQuantity(detail) <- NUMERIC[14,3](multiplierSubstituteTo(bruttoSku(detail), substituteSku(detail))* bruttoQuantity(detail));           
        
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSku(detail) <- NULL;  
            substituteQuantity(detail) <- NULL;  
        }    
    }    
}

// ------------- Формы ----------- //

backgroundSubstitutes 'Цвет' (Sku sku, Order order) = RGB(255,224,255) IF substituteQuantity(sku, order);


resetSubstitute 'Сбросить все замены'(Order order) = ACTION {
    FOR substitute(Sku sku, order) OR multiplier(sku, order) DO {
        substitute(sku, order) <- NULL;
        multiplier(sku, order) <- NULL;
        valueVAT(sku, order) <- NULL;
        substituteQuantity(sku, order) <- NULL;
    }
} TOOLBAR;

deleteComponents 'Очистить'(Order order) =  ACTION {
    deleteComponentDetail(order);
    resetSubstitute(order);
} TOOLBAR;

priceStock = DATA Stock(Order);
namePriceStock 'Склад' = name(priceStock(Order order));

calcCost 'Себестоимость' = calcCost(Sku sku, priceStock(Order order));

CONSTRAINT  priceStock(Order o) AND NOT isCompany(priceStock(o)) CHECKED BY priceStock[Order]    
        MESSAGE 'Склад для цен не является складом компании';
priceStock 'Цена' (Sku sku, Order order)= prevPriceB(priceListType(order), sku, priceStock(order), dateTime(order));                                                                                                                                                               

priceStock (Order order) <- componentsStock(order)
    WHEN CHANGED(componentsStock(order));
    
FORM multiplier 'Коэффициент'    
    OBJECTS nu = NUMERIC[8,3] FIXED PANEL
    PROPERTIES  val= OBJVALUE (nu)
;
DESIGN multiplier {
    nu.box {
        caption = '';
        PROPERTY(val) { caption = 'Введите коэффициент цены' ; font = 'bold 36'; } 
    }
} 

fillSubstitutePriceFromTo 'Использовать цену'(Order order, Sku sku, Sku skuSubstitute) = ACTION {
    IF multiplierSubstituteTo(sku, skuSubstitute) THEN {
        dataBruttoPrice(sku, order) <- NUMERIC[14,2](multiplierSubstituteTo(sku, skuSubstitute)*priceStock(skuSubstitute,order));
        cost(sku, order) <- NUMERIC[14,2](multiplierSubstituteTo(sku, skuSubstitute)*calcCost(skuSubstitute,priceStock(order)));
    } ELSE {
        FORM multiplier MODAL; 
        IF formResult() == FormResult.ok THEN {
            dataBruttoPrice(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*priceStock(skuSubstitute,order));
            cost(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*calcCost(skuSubstitute,priceStock(order)));
        }
    }        
} TOOLBAR;  

currentBalancePriceStock 'Текущий остаток' = currentBalance(Sku sku, priceStock(Order order)); 
currentBalanceSkuPriceStockSku 'Остаток с уч. коэфф.'  (Order order, Sku fromSku, Sku toSku) = currentBalancePriceStock(toSku, order) / multiplierSubstituteTo(fromSku ,toSku);

//maxSubstitutePriceSkuOrder = GROUP MAX multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order; 
//minSubstitutePriceSkuOrder = GROUP MIN multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order;    
maxSubstituteSkuPrice = GROUP LAST Sku skuSubstitute 
    BY Sku sku, Order order
    ORDER multiplierSubstituteTo(sku, skuSubstitute)*priceStock(skuSubstitute,order), skuSubstitute     
    WHERE currentBalancePriceStock(skuSubstitute,order) >0 AND multiplierSubstituteTo(sku, skuSubstitute) AND priceStock(skuSubstitute,order) 
;    
minSubstituteSkuPrice = GROUP LAST Sku skuSubstitute 
    BY Sku sku, Order order
    ORDER DESC multiplierSubstituteTo(sku, skuSubstitute)*priceStock(skuSubstitute,order), skuSubstitute
    WHERE currentBalancePriceStock(skuSubstitute,order) >0 AND multiplierSubstituteTo(sku, skuSubstitute) AND priceStock(skuSubstitute,order) 
;          
         
fillSubstitutePriceMaxFrom 'Исп. max цену'(Order order, Sku sku) = ACTION {
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- maxSubstituteSkuPrice(sku, order);
    
    dataBruttoPrice(sku, order) <- NUMERIC[14,2](multiplierSubstituteTo(sku, sku())*priceStock(sku(),order)) WHERE sku();     
    cost(sku, order) <- NUMERIC[14,2](calcCost(sku(),priceStock(order))) WHERE sku();   
};  
fillSubstitutePriceMinFrom 'Исп. min цену'(Order order, Sku sku) = ACTION {
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- minSubstituteSkuPrice(sku, order);

    dataBruttoPrice(sku, order) <- NUMERIC[14,2](multiplierSubstituteTo(sku, sku())*priceStock(sku(),order)) WHERE sku();      
    cost(sku, order) <- NUMERIC[14,2](calcCost(sku(),priceStock(order))) WHERE sku();   
       
};   

fillSubstitutePriceMax 'Исп. max цену'(Order order) = ACTION {
    FOR quantityComponentDetail(Sku sku,order) DO {
        fillSubstitutePriceMaxFrom(order,sku);
    }   
        
} TOOLBAR;  
fillSubstitutePriceMin 'Исп. min цену'(Order order) = ACTION {
    FOR quantityComponentDetail(Sku sku,order) DO {
        fillSubstitutePriceMinFrom(order,sku);
    }       
} TOOLBAR;   
//--
maxSkuBalanceSubstitute (sku, order) =
    GROUP LAST Sku skuSubstitute
          BY   Sku sku, Order order
          ORDER (currentBalancePriceStock(skuSubstitute,order) /(multiplierSubstituteTo(sku, skuSubstitute) IF multiplierSubstituteTo(sku, skuSubstitute)!=0)), skuSubstitute
          WHERE priceStock(skuSubstitute,order) AND currentBalancePriceStock(skuSubstitute,order) AND multiplierSubstituteTo(sku, skuSubstitute);

fillSubstitutePriceMaxBalanceFrom 'Исп. цену большего остатка'(Order order, Sku sku) = ACTION {
    LOCAL sku = Sku();
    sku() <- NULL;
    sku() <- maxSkuBalanceSubstitute (sku, order);
    dataBruttoPrice(sku, order) <- NUMERIC[14,2](priceStock(sku(),order)*multiplierSubstituteTo(sku, sku())) WHERE sku();     
    cost(sku, order) <- NUMERIC[14,2](calcCost(sku(),priceStock(order))) WHERE sku();   
     
}; 
fillSubstitutePriceMaxBalance 'Исп. цену большего остатка'(Order order) = ACTION {
    FOR quantityComponentDetail(Sku sku,order) DO {
        fillSubstitutePriceMaxBalanceFrom(order,sku);
    }        
} TOOLBAR; 
    
backgroundMarkup = ABSTRACT CASE COLOR (ProductDetail);  

  
  //toSkuSubstitute(substitute)
bruttoBalance 'Текущий остаток с учетом замен' (Sku sku,Order order) = currentBalance(sku, componentsStock(order)) (+) 
    [ = GROUP SUM NUMERIC[19,8](currentBalance(Substitute substitute, Order order)) / (multiplier(substitute) IF multiplier(substitute) != 0) 
        BY fromSku(substitute), order](sku,order);  
 
bruttoBalanceToSku 'Текущий остаток с учетом замен' (Substitute su, Order order)= bruttoBalance(toSku(su), order); 

@defineDocumentDialogStock(order, company,  components, company, );

@defineDocumentDialogStock(order, company,  products, company, );

backgroundBalancePriceStock(Sku s,Order o) = RGB (255,156,156) IF quantityComponentDetail(s,o) > currentBalancePriceStock(s,o);  
editSku 'Редактировать SKU' (ProductDetail d) = ACTION edit(sku(d));
editBruttoSku 'Редактировать SKU' (ComponentDetail d) = ACTION edit(bruttoSku(d));

showBOMQuantity 'Показывать количество в спецификации' = DATA BOOLEAN (Order);
showBOMQuantity= showBOMQuantity(order(ProductDetail pd));
showBOMQuantity= showBOMQuantity(order(ComponentDetail pd));

background = ABSTRACT CASE COLOR (ProductDetail);

FORM order 'Производственный заказ'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) isPosted, nameCompany, nameComponentsStock ON CHANGE changeComponentsStockCompany(o), 
                  nameProductsStock ON CHANGE changeProductsStockCompany(o), nameNumerator, number, series,
                  date, time, fromDate, toDate, note, quantityProductDetail, sumProductDetail, 
                  quantityComponentDetail, sumComponentDetail, calcBOMPrice, isPricePercent, isPriceCoeff 
    PROPERTIES(o)  FORCE PANEL nameCalcPriceListType, nameProductsPriceListType, VATProduct, showBOMQuantity
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) BACKGROUND background(pd) index, nameSku ON EDIT editSku(pd), idProduct SHOWIF showIDs(), nameProduct, shortNameUOM
    PROPERTIES(pd) expiryDate, manufactureDate, BOMQuantity READONLY SHOWIF showBOMQuantity(o), quantity,
                   calcComponentsPrice READONLY, componentsPrice ON CHANGE changeComponentsPrice(pd),
                   costPrice
    PROPERTIES(pd) markup ON CHANGE changeMarkup(pd) BACKGROUND backgroundMarkup(pd),
                   pricePercent SHOWIF isPricePercent(o) ON CHANGE changePricePercent(pd), 
                   calcPriceCoeff SHOWIF isPriceCoeff(o) ON CHANGE changePriceCoeff(pd),                   
                   price ON CHANGE changeProductsPrice(pd), sum
    PROPERTIES(pd) BACKGROUND backgroundVAT(o) SHOWIF VATProduct(o) valueVAT
    PROPERTIES(pd) ADDOBJ, deletepd=DELETESESSION
    PROPERTIES(o) TODRAW pd createProducts, fillPriceProducts, deleteProductDetail

    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) BACKGROUND background(cd) index, bruttoNameSku ON EDIT editBruttoSku(cd), nameBatch ON CHANGE changeBatch(cd) SHOWIF showBatch(cd),
                   nameMaterial, 
                   idComponent SHOWIF showIDs(), nameComponent,    
                   fullNameBOM, shortNameUOM READONLY,  BOMQuantity READONLY SHOWIF showBOMQuantity(o),bruttoQuantity ON SHORTCUT updateComponentsOrder(o)
    PROPERTIES(cd) BACKGROUND backgroundSubstitutes(o) substituteNameSku ON CHANGE chooseSubstitute(cd), substituteQuantity
    PROPERTIES(cd) cost, price
    PROPERTIES(cd) sum

    PROPERTIES(o) TODRAW cd createComponents, createRecComponents, createForRecComponents
    PROPERTIES(cd) TODRAW cd expand SHOWIF product(cd)
    PROPERTIES(cd) ADDOBJ, deletecd=DELETESESSION
    PROPERTIES(o) TODRAW cd deleteComponents

    FILTERS order(cd)==o

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(s,o) READONLY bruttoQuantity, bruttoBalance

    PROPERTIES(s,o) BACKGROUND backgroundSubstitutes(o) nameSubstitute ON CHANGE chooseSubstitute(s,o), 
                    multiplier, substituteQuantity 
    PROPERTIES(s,o) READONLY bruttoNotSubstituteQuantity
    FILTERS bruttoQuantity(s,o)

    PROPERTIES(o) FORCE PANEL namePriceListType, VATComponent  BACKGROUND backgroundVAT(o)//, nameComponentsCalcPriceListTypeOrder

    OBJECTS su = Substitute
    PROPERTIES(su) READONLY nameToSku, multiplier
    PROPERTIES(su,s,o) is ON CHANGE change(su,s,o)
    PROPERTIES     READONLY currentBalance(su,o), bruttoBalanceToSku(su,o)
    FILTERS fromSku(su) == s
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroup(toSku(su)) 'F10' DEFAULT 
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
    PROPERTIES(sk,o) quantityComponentDetail, currentBalancePriceStock BACKGROUND backgroundBalancePriceStock(sk,o), cost, dataBruttoPrice,  
                    valueVAT BACKGROUND backgroundVAT(o) SHOWIF VAT(o)
    FILTERS quantityComponentDetail(sk,o)    
        
    PROPERTIES namePriceStock(o)    
           
    OBJECTS sku = Sku
    PROPERTIES(sku) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(sku,o) READONLY currentBalancePriceStock, calcCost, priceStock
    PROPERTIES(sk,sku) READONLY multiplierSubstituteTo FORCE GRID 
    PROPERTIES READONLY currentBalanceSkuPriceStockSku(o,sk,sku)
    
    PROPERTIES fillSubstitutePriceFromTo(o,sk,sku), fillSubstitutePriceMax(o) FORCE PANEL TODRAW sk, fillSubstitutePriceMin(o) FORCE PANEL TODRAW sk,
               fillSubstitutePriceMaxBalance(o) FORCE PANEL TODRAW sk
        
    FILTERGROUP filter1
        FILTER 'Доступные замены' uniqueSubstituteFromTo(sk,sku) 'F9'     
    FILTERGROUP filter2
        FILTER 'С остатком' currentBalancePriceStock(sku,o) 'F8' DEFAULT                                                          

    EVENTS
        ON OK prePost(o)
    EDIT Order OBJECT o
;

DESIGN order {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            type = TABBED;
            NEW row1 {
                caption = 'Изделия';
                NEW row111{
                    caption = 'Цена изделий';
                    type = CONTAINERH;
                    MOVE PROPERTY(nameCalcPriceListType(o));
                    MOVE PROPERTY(nameProductsPriceListType(o));
                    MOVE PROPERTY(VATProduct(o));
                }
                MOVE pd.box;
            }
            MOVE cd.box { caption = 'Компоненты';}
            NEW row2 {
                caption = 'Замена';
                type = SPLITH;                    
                MOVE s.box {fill = 2;}
                MOVE su.box;
            }
            NEW price {
                caption = 'Цены';
                type = SPLITH ;
                NEW price1 {
                    fill = 1;
                    type = CONTAINERV;
                    NEW price11{
                        caption = 'Цена компонент';
                        type = CONTAINERH;
                        MOVE PROPERTY(namePriceListType(o));
                        MOVE PROPERTY(VATComponent(o));
                    }
                    MOVE sk.box;  
                }                
                       
                NEW price2 {
                    fill = 1;
                    type = CONTAINERV;
                    NEW price2a { 
                        fill = 1;
                        type = CONTAINERV;
                        NEW price2a1{
                            caption = 'Фильтр складов для цен';
                            MOVE PROPERTY(namePriceStock(o)); 
                        }
                        MOVE sku.box;  
                    }
                    NEW price2b {
                        type = CONTAINERV;
                        fill = 1;
                    }
                }  
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                MOVE o.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPosted(o)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameNumerator(o));
                    MOVE PROPERTY(number(o));
                    MOVE PROPERTY(series(o));
                    MOVE PROPERTY(date(o));
                    MOVE PROPERTY(time(o));
                }
                NEW headerRow11 {
                    type = CONTAINERH;
                    NEW headerRowC {
                        caption = 'Организация';
                        MOVE PROPERTY(nameCompany(o));
                    }
                    NEW headerRow111 {
                        caption = 'Склады';
                        type = CONTAINERH;
                        MOVE PROPERTY(nameComponentsStock(o));
                        MOVE PROPERTY(nameProductsStock(o));
                    }
                    NEW headerRow112 {
                        type = CONTAINERH;
                    }
                }
                NEW headerRow12 {
                    type = CONTAINERH;
                    MOVE o.documentPrm {
                        type = CONTAINERH;
                    }
                    NEW timeRow {
                        caption = 'Срок действия';
                        type = CONTAINERH;
                        MOVE PROPERTY(fromDate(o));
                        MOVE PROPERTY(toDate(o));
                    }
                }
                NEW headerExtraParams {
                    caption = 'Дополнительные параметры';
                    type = CONTAINERH;
                    MOVE PROPERTY (calcBOMPrice(o));
                    MOVE PROPERTY (isPricePercent(o));
                    MOVE PROPERTY (isPriceCoeff(o));
                    MOVE PROPERTY (showBOMQuantity(o)); 
                } 
            }

            MOVE o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumProductDetail(o)) { preferredCharWidth = 13;}
    }
}
edit 'Редактировать' (order) = ACTION EDITFORM Order;

@addEventGenerateNumberOnForm(order, o, order);

//WHEN SESSION FORMS order CHANGED(bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order)) DO                                              
//    substituteQuantitySkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);                              
//                   
//WHEN SESSION FORMS order CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO
//    substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail));                    
//                    
//WHEN SESSION FORMS order CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
//    CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO 
//        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));

useSubstitute 'Можно использовать замену' (ComponentDetail detail) = use(
    uniqueSubstituteFromTo(bruttoSku(detail), substitute(bruttoSku(detail), order(detail))), 
    BOM(detail));    
                
usePrevSubstitute 'Можно использовать замену' (ComponentDetail detail) = use(
    uniqueSubstituteFromTo(bruttoSku(detail), PREV(substitute(bruttoSku(detail), order(detail)))), 
    BOM(detail));                  

WHEN SESSION FORMS order CHANGED(componentsStock(Order order)) DO {                                              
    priceStock (order) <- componentsStock(order);
}

WHEN SESSION FORMS order CHANGED(bruttoSubstituteQuantity(Sku sku,Order order)) 
    OR CHANGED(multiplier(sku, order)) DO {                                              
        substituteQuantity(sku, order) <- bruttoSubstituteQuantity(sku,order) * multiplier(sku, order);                              
    }      
                   
WHEN SESSION FORMS order 
    CHANGED(substitute(bruttoSku(ComponentDetail detail), order(detail))) AND useSubstitute(detail) DO {
        substituteSku (detail) <- substitute(bruttoSku(detail), order(detail)); 
    }                       
                    
WHEN SESSION FORMS order 
    (CHANGED(substituteQuantity(bruttoSku(ComponentDetail detail), order(detail))) OR 
     CHANGED(multiplier(bruttoSku(detail), order(detail)))) AND useSubstitute(detail) DO { 
        substituteQuantity (detail) <- NUMERIC[14,3](multiplier(bruttoSku(detail), order(detail))* bruttoQuantity(detail));
    } 
WHEN SESSION FORMS order DROPPED (multiplier(bruttoSku(ComponentDetail detail), order(detail))) DO {
        substituteSku (detail) <- NULL WHERE usePrevSubstitute(detail); 
        substituteQuantity (detail) <- NULL WHERE usePrevSubstitute(detail);    
    }   
 
calc(PriceListType pt, ComponentDetail detail) =  OVERRIDE dataBruttoPrice(sku(detail), order(detail)), 
                                                              prevPriceB(pt,batch(detail),componentsStock(order(detail)),dateTime(order(detail)));

calcPrice = ABSTRACT OVERRIDE FIRST NUMERIC[14,2] (PriceListType, ComponentDetail);
calcPrice(PriceListType pt, ComponentDetail d) += NUMERIC[14,2](calc(pt,d)); 

WHEN SESSION FORMS order (CHANGED(dataBruttoPrice(sku(ComponentDetail detail), order(detail))) OR 
                          CHANGED(batch(detail)) OR 
                          CHANGED(componentsStock(order(detail))) OR 
                          CHANGED(dateTime(order(detail)))) AND
                          PriceListType pt == priceListType(order(detail)) NOINLINE (pt) DO
    price (detail) <- calcPrice(pt, detail); 
         
calcCost = OVERRIDE cost(sku(ComponentDetail detail), order(detail)), cost(batch(detail));    
WHEN SESSION FORMS order CHANGED(cost(sku(ComponentDetail detail), order(detail))) OR CHANGED(batch(detail)) DO
    cost (detail) <- calcCost(detail);           
       
WHEN SESSION FORMS order CHANGED(product(ProductDetail detail)) DO
    sku(detail) <- sku(product(detail));                 
              
countProducts (sku) = GROUP SUM 1 BY sku(Product p) PERSISTENT ;
isActiveBOM (sku) = GROUP SUM 1 IF isActive(BOM(Product p)) BY sku(p);
//defaultProductSku (sku)= GROUP MIN product BY skuProduct(product);

countProducts (sku, stock, date) = GROUP SUM 1 IF isActive(BOM(Product p), DATE date) AND in(BOM(p), Stock stock) BY sku(p), stock, date;
defaultProduct (sku, stock, date)= GROUP MIN Product p IF isActive(BOM(p), DATE date) AND in(BOM(p), Stock stock) BY sku(p), stock, date;

WHEN SESSION FORMS order CHANGED(sku(ProductDetail d)) AND NOT CHANGED(product(d)) AND countProducts(sku(d), componentsStock(d), date(d)) == 1 NOINLINE DO {
    product(d) <- defaultProduct(sku(d), componentsStock(d), date(d));
}     
                                                                     
countBOMsSku (material) = GROUP SUM 1 IF material(Component c) AS Sku BY material(c) PERSISTENT;
isActiveBOMSku (material) = GROUP SUM 1 IF isActive(BOM(Component c)) AND material(c) AS Sku BY material(c);

EXTEND FORM BOMs
    FILTERGROUP prod 
        FILTER 'Активные' isActiveBOM(p1) 'F7' DEFAULT 
        FILTER 'Есть спецификации' countProducts(p1) 'F8'     
    
    FILTERGROUP comp 
        FILTER 'Активные' isActiveBOMSku(c2) 'F7' DEFAULT   
        FILTER 'Есть спецификации' countBOMsSku(c2) 'F8'                                                              
                                                  
    FILTERGROUP bom1 FILTER 'Активные' isActive(b1) 'F7' DEFAULT                                                     
    FILTERGROUP bom2 FILTER 'Активные' isActive(b2) 'F7' DEFAULT                                                     
;                                                               
countComponents (material, stock, date) = GROUP SUM 1 IF isActive(BOM(Component c), DATE date) AND in(BOM(c),Stock stock) BY material(c) AS Sku, stock, date;
defaultComponents (material, stock, date)= GROUP MIN Component c IF isActive(BOM(c), DATE date) AND in(BOM(c),Stock stock) BY material(c) AS Sku, stock, date;                                                                  
                                                                     
//WHEN SESSION FORMS order CHANGED(bruttoSkuComponentDetail(d)) NOINLINE DO {
//    componentComponentDetail(d) <- defaultComponentsSku(bruttoSkuComponentDetail(d))
//        WHERE countComponentsSku(bruttoSkuComponentDetail(d)) == 1;
//}  todo: переделано, потому что не срабатывает событие по CHANGED(componentComponentDetail(d)), которое следует за ним.

WHEN SESSION FORMS order CHANGED(bruttoSku(ComponentDetail d)) AND NOT CHANGED(component(d)) AND NOT CHANGED(BOM(d)) AND countComponents(bruttoSku(d), componentsStock(d), date(d)) == 1 NOINLINE DO {
    component(d) <- defaultComponents(bruttoSku(d), componentsStock(d), date(d));
    BOM(d) <- BOM(component(d));              
}
WHEN SESSION FORMS order CHANGED(component(ComponentDetail d)) AND NOT CHANGED(BOM(d)) NOINLINE DO {
    BOM(d) <- BOM(component(d));    
    bruttoSku(d) <- sku(material(component(d)));       
}
 
WHEN SESSION FORMS order CHANGED(product(ProductDetail d)) NOINLINE DO {
    pricePercent(d) <- pricePercent(product(d))
        WHERE pricePercent(product(d));
} 


WHEN SESSION FORMS order (CHANGED(expiryDate(ProductDetail d)) OR CHANGED(sku(d))) AND expiryDate(d) DO {
    manufactureDate(d) <- calcManufactureDate(d);            
} 
WHEN SESSION FORMS order (CHANGED(manufactureDate(ProductDetail d)) OR CHANGED(sku(d))) AND manufactureDate(d) DO {
    expiryDate(d) <- calcExpiryDate(d);            
}  

overShowEdit = ABSTRACT BOOLEAN (Order);
overShowDelete = ABSTRACT BOOLEAN (Order);

filterOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (Order i) = date(i) >= filterOrderDateFrom() OR (i IS Order AND NOT filterOrderDateFrom());      

filterOrderDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (Order i) = date(i) <= filterOrderDateTo() OR (i IS Order AND NOT filterOrderDateTo());      
 
filterOrderComponentsStock  = DATA LOCAL Stock ();
nameFilterOrderComponentsStock 'Склад компонент' = name(filterOrderComponentsStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterComponentsStock (Order i) = componentsStock(i) == filterOrderComponentsStock() OR (i IS Order AND NOT filterOrderComponentsStock());    

filterOrderProductsStock  = DATA LOCAL Stock ();
nameFilterOrderProductsStock 'Склад изделий' = name(filterOrderProductsStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterProductsStock (Order i) = productsStock(i) == filterOrderProductsStock() OR (i IS Order AND NOT filterOrderProductsStock());      

filterOrderCustomUser  = DATA LOCAL CustomUser ();
nameFilterOrderCustomUser 'Создан пользователем' = name[Contact](filterOrderCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterCustomUser (Order i) = createdUser(i) == filterOrderCustomUser() OR (i IS Order AND NOT filterOrderCustomUser());  

filterOrderComputer = DATA LOCAL Computer ();
nameFilterOrderComputer 'Создан на компьютере' = hostname(filterOrderComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterComputer (Order i) = createdComputer(i) == filterOrderComputer() OR (i IS Order AND NOT filterOrderComputer());

CONSTRAINT filterOrderProductsStock() AND NOT isCompany(filterOrderProductsStock())
    CHECKED BY filterOrderProductsStock[] MESSAGE 'Склад изделий в фильтре для производственного заказа не является складом компании';
CONSTRAINT filterOrderComponentsStock() AND NOT isCompany(filterOrderComponentsStock())
    CHECKED BY filterOrderComponentsStock[] MESSAGE 'Склад компонент в фильтре для производственного заказа не является складом компании';

FORM orders 'Производственные заказы'

        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderComponentsStock, nameFilterOrderProductsStock, 
                     nameFilterOrderCustomUser, nameFilterOrderComputer

    OBJECTS o = Order
    PROPERTIES(o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, nameCompany,
                  nameComponentsStock, nameProductsStock,
                  fromDate, toDate
    PROPERTIES(o) READONLY quantityProductDetail, sumProductDetail, quantityComponentDetail, sumComponentDetail
    PROPERTIES(o) READONLYIF isReadonly() nameCalcPriceListType, namePriceListType, note

    PROPERTIES(o) addo=ADDFORM, EDITFORM SHOWIF overShowEdit(o)
    PROPERTIES(o) close SHOWIF isOpened(o), open SHOWIF isClosed(o)      
    PROPERTIES(o) deleteo=DELETE FORCE PANEL TOOLBAR SHOWIF overShowDelete(o)
    PROPERTIES (o) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, idProduct SHOWIF showIDs(), nameProduct, 
                   shortNameUOM, expiryDate, manufactureDate, BOMQuantity SHOWIF showBOMQuantity(o), quantity, 
                   calcComponentsPrice, componentsPrice, 
                   costPrice, markup, pricePercent SHOWIF isPricePercent(o), calcPriceCoeff SHOWIF isPriceCoeff(o),
                   price, sum 
    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND background(cd) index, bruttoNameSku, nameBatch SHOWIF showBatch(cd), 
                   idComponent SHOWIF showIDs(), nameComponent,
                   shortNameUOM, BOMQuantity SHOWIF showBOMQuantity(o), bruttoQuantity//, overCalcPriceComponentDetail 
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutes(o) substituteNameSku, substituteQuantity
    PROPERTIES(cd) READONLY cost, price
    PROPERTIES(cd) READONLY sum

    FILTERS order(cd)==o
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(s,o) READONLY bruttoQuantity
    PROPERTIES(s,o) READONLY BACKGROUND backgroundSubstitutes(o) nameSubstitute ON CHANGE chooseSubstitute(s,o), multiplier, substituteQuantity 
    FILTERS bruttoQuantity(s,o)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
    PROPERTIES(sk,o) READONLY quantityComponentDetail, cost, dataBruttoPrice, 
                    valueVAT BACKGROUND backgroundVAT(o) SHOWIF VAT(o)
    FILTERS quantityComponentDetail(sk,o)                
    FILTERS filterDateFrom(o), 
            filterDateTo(o),
            filterComponentsStock(o),
            filterProductsStock(o),
            filterCustomUser(o),
            filterComputer(o)
    DIALOG Order OBJECT o 
;
DESIGN orders {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        NEW filtersBox {                       
            fill = 1;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERV; 
                NEW topFilters1 {
                    type = CONTAINERH; 
                    MOVE PROPERTY(filterOrderDateFrom());
                    MOVE PROPERTY(filterOrderDateTo());                            
                    MOVE PROPERTY(nameFilterOrderComponentsStock());   
                    MOVE PROPERTY(nameFilterOrderProductsStock());    
                    MOVE PROPERTY(nameFilterOrderCustomUser());
                    MOVE PROPERTY(nameFilterOrderComputer());                                                                                
                }
//                NEW topFilters2 {
//                    type = CONTAINERH; 
//                    MOVE PROPERTY(nameFilterOrderCustomUser());
//                    MOVE PROPERTY(nameFilterOrderComputer());                            
//                }                                                                                         
            }
            MOVE o.box {
                fill = 1;
            }
        }

        NEW documentDetail {
            type = TABBED;
            fill = 1;
            MOVE pd.box {
                caption = 'Изделия';
            }
            MOVE cd.box {
                caption = 'Компоненты';
            }
            MOVE s.box {
                caption = 'Замены';
            }
            MOVE sk.box {
                caption = 'Цены';
            }            
            NEW documentHistory {
                caption = 'История';

                MOVE o.created;
                MOVE o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    type = CONTAINERV;
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(orders);
@defineFilterIsOpened (order, orders, o);
@extendFormFilterAccessStock(Order, o, orders, productsStock, company);
NAVIGATOR {
    manufacturingDocuments {
        ADD orders;
    }
    manufacturingMasterData {
        ADD operations;
    }
}
FORM componentDetails 'Строка компонента'
    OBJECTS d = ComponentDetail
    PROPERTIES(d) READONLY index, nameSku, shortNameUOM,
                           description, quantity

    DIALOG ComponentDetail OBJECT d
;

FORM productDetails 'Строка изделия'
    OBJECTS d = ProductDetail
    PROPERTIES(d) READONLY index, nameSku, nameProduct, shortNameUOM, 
                  expiryDate, manufactureDate, description,
                  quantity, price, sum

    DIALOG ProductDetail OBJECT d
;

// ---------- Требование на сырье -------- //

FORM requestSkusProductOrder 'Требование на сырье по изделиям'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStock, nameComponentsStock, nameProductsStock, number, series, seriesNumber,
                  date, time, fromDate, toDate
                  
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, idProduct, nameProduct, 
                   shortNameUOM, quantity, calcComponentsPrice, componentsPrice, 
                   costPrice, markup, pricePercent, calcPriceCoeff,
                   price, sum
    FILTERS order(pd)==o                  
                  
    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY index, nameSku, nameComponent, shortNameUOMSku,
                   idBarcodeSku, quantity

    FILTERS order(cd)==o,
            BOM(cd) == BOM(pd)
;
printRequestSkusProduct'Требование на сырье по изделиям' (Order order) = ACTION FORM requestSkusProductOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;

currentBalanceComponentsStock 'Текущий остаток' = currentBalance(Sku sku, componentsStock(Order order));
FORM requestSkusOrder 'Требование на сырье'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStock, nameComponentsStock, nameProductsStock, number, series, seriesNumber,
                  date, time, fromDate, toDate
                  
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
    PROPERTIES(sk,o) READONLY quantityComponentDetail, bruttoBalance
    FILTERS quantityComponentDetail(sk,o)    
;
printRequestSkus 'Требование на сырье' (Order order) = ACTION FORM requestSkusOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;
EXTEND FORM orders
    PROPERTIES(o) FORCE PANEL printRequestSkus, printRequestSkusProduct
;
DESIGN orders {printTab { MOVE o.print {align = LEADING;}}}
//------------------------------------------ Опеределение операции для order ------------------------------------//

operation = DATA Operation (Order) PERSISTENT;
nameOperation 'Операция' = name(operation(Order order));

operation (ProductDetail d) = operation(order(d));
nameOperation 'Операция' (ProductDetail d)= name(operation (d));

operation (ComponentDetail d) = operation(order(d));
nameOperation 'Операция' (ComponentDetail d)= name(operation (d));

@deriveDocumentOperationProperty(Order, showBOMQuantity);
//-- Партия для строки компонента
hideBatchComponent 'Не показывать партии' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) hideBatchComponent
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(hideBatchComponent(o));
    }
}

filterOrderOperation = DATA LOCAL Operation ();
nameFilterOrderOperation 'Операция' = name(filterOrderOperation()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterOperation (Order i) = operation(i) == filterOrderOperation() OR (i IS Order AND NOT filterOrderOperation());

EXTEND FORM orders
    PROPERTIES () nameFilterOrderOperation
    FILTERS filterOperation(o)
;
DESIGN orders {
    topFilters1 {
        type = CONTAINERH; 
        MOVE PROPERTY(nameFilterOrderOperation()) AFTER PROPERTY(filterOrderDateTo());                                                                           
    }
}


hideBatchComponent = hideBatchComponent(operation(Order o));
showBatchComponent(Order o) = o IS Order AND NOT hideBatchComponent(o); 
hideBatch (ComponentDetail d) += hideBatchComponent(operation(d));

DESIGN options {
    pane {        
        NEW productionOrders {
            caption = 'Производственный заказ';
        }
    }
}

@defineDocumentOperationConstraint(order, 'производственный заказ', Production);
@extendFormFilterRoleAccess(order, o, orders);


@defineDocumentOperationLegalEntity(order, company, 'Организация');
@deriveDocumentOperationLegalEntity(order, company, order);
CONSTRAINT company(Order order) AND NOT isCompany(company(order))
    CHECKED BY company[Order] MESSAGE 'Для производственного заказа выбрана организация, не являющаяся компанией';

overCopy = ACTION ABSTRACT LIST (Order, Order);
copy 'Копировать'(Order order) = ACTION NEWSESSION {
    FOR ADDOBJ o = Order DO {
        company(o) <- company(order);
        componentsStock(o) <- componentsStock(order);
        productsStock(o) <- productsStock(order);
        fromDate(o) <- fromDate(order);
        toDate(o) <- toDate(order);
        productsPriceListType(o) <- productsPriceListType(order);
        priceListType(o) <- priceListType(order);
        VATProduct(o) <- VATProduct(order);
        VATComponent(o) <- VATComponent(order);
        note(o) <- note(order);
        operation(o) <- operation(order);
        
        FOR order(ProductDetail productDetail) == order ADDOBJ p=ProductDetail DO {
            order(p) <- o;
            sku(p) <- sku(productDetail);
            product(p) <- product(productDetail);
            quantity(p) <- quantity(productDetail);
            BOMQuantity(p) <- BOMQuantity(productDetail);
            markup(p) <- markup(productDetail);
            pricePercent(p) <- pricePercent(productDetail);
        }
        FOR order(ComponentDetail componentDetail) == order ADDOBJ c=ComponentDetail DO {
            order(c) <- o;
            bruttoSku(c) <- bruttoSku(componentDetail);
            substituteSku(c) <- substituteSku(componentDetail);
            substituteQuantity(c) <- substituteQuantity(componentDetail);
            product(c) <- product(componentDetail);
            component(c) <- component(componentDetail);
            bruttoQuantity(c) <- bruttoQuantity(componentDetail);
//            BOMQuantityComponentDetail(c) <- BOMQuantityComponentDetail(componentDetail);
            BOM(c) <- BOM(componentDetail);

        }
        FOR bruttoQuantity(Sku sku,order) DO {
            dataBruttoPrice(sku,o) <- dataBruttoPrice(sku,order);
            cost(sku,o) <- cost(sku,order);
            substitute(sku,o) <- substitute(sku,order);
            multiplier(sku,o) <- multiplier(sku,order);
        }
        overCopy(o,order);
        FORM order OBJECTS o = o MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
} TOOLBAR;

EXTEND FORM order
    PROPERTIES(o) nameOperation
;

DESIGN order{
    o.documentHeader{
        NEW header1 {
            type = CONTAINERH; 
            MOVE PROPERTY(isPosted(o));
            MOVE PROPERTY(nameOperation(o));
        }
        NEW header2 {
            type = CONTAINERH; 
            MOVE PROPERTY(nameNumerator(o));   
            MOVE PROPERTY(number(o));  
            MOVE PROPERTY(series(o));  
            MOVE PROPERTY(date(o));  
            MOVE PROPERTY(time(o));  
        }        
    }
}
EXTEND FORM orders
    PROPERTIES(o) nameOperation AFTER nameProductsStock(o) READONLY, copy
;

@defineDocumentOperationStock(order, components, 'Склад компонент');
@deriveDocumentOperationStock(order, components, order);
@defineDocumentOperationStock(order, products, 'Склад изделий');
@deriveDocumentOperationStock(order, products, order);

@defineDocumentOperationRole(order);

@defineDocumentHeaderPriceListType (operation, calcPriceListType, , ' (надбавка-изделие)');
@deriveDocumentOperationProperty(Order, calcPriceListType);

@defineDocumentHeaderPriceListType (operation, priceListType, products, ' (изделие)');
@deriveDocumentOperationProperty(Order, productsPriceListType);
@defineDocumentHeaderPriceListType (operation, priceListType, , ' (потребность)');
@deriveDocumentOperationProperty(Order, priceListType);

notRecalculateMarkup 'Не пересчитывать наценку' = DATA BOOLEAN (Operation);
notRecalculateMarkup(Order order) += notRecalculateMarkup(operation(order));

EXTEND FORM operation
     PROPERTIES(o) nameCalcPriceListType, nameProductsPriceListType, namePriceListType, notRecalculateMarkup

 ;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(nameCalcPriceListType(o));
        MOVE PROPERTY(nameProductsPriceListType(o));
        MOVE PROPERTY(namePriceListType(o));
        MOVE PROPERTY(notRecalculateMarkup(o));
    }
}

@deriveDocumentOperationProperty(order, isPricePercent);
@deriveDocumentOperationProperty(order, isPriceCoeff);

@deriveDocumentOperationProperty(order, calcBOMPrice);

CONSTRAINT isPosted(ComponentDetail d) AND isBatch(operation(d)) AND sku(d) AND NOT batch(d) 
    MESSAGE 'Для строки компонента в производственном заказе должна быть задана партия';

//-------------------- Подбор изделий -----------------//
productDetail (order,product) =  GROUP MAX ProductDetail productDetail
    BY order(productDetail), product(productDetail);

quantity 'Кол-во изделий в документе' (order,product) =  GROUP SUM quantity(ProductDetail productDetail)
    BY order(productDetail), product(productDetail);    
    
changeQuantity(Product product, Order order) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    IF productDetail(order,product) THEN {
        IF requestedNumeric() THEN {
            quantity(ProductDetail detail) <- requestedNumeric() WHERE detail == productDetail(order,product);
        } ELSE {
            DELETE ProductDetail detail WHERE detail == productDetail(order,product);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = ProductDetail DO {
                order(d) <- order;
                product(d) <- product;
                quantity (d) <- requestedNumeric();
            }
        }
    }
}

background = ABSTRACT CASE COLOR (Order, Product);  

EXTEND FORM order

    TREE skuTree g = SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    FILTERGROUP product FILTER 'Готовые изделия' filterProduct(g) 'shift F5' DEFAULT
    
    OBJECTS p=Product
    PROPERTIES(p) READONLY id SHOWIF showIDs()
    PROPERTIES(p) BACKGROUND background(o,p)  READONLY description, nameSku, shortNameUOM
    PROPERTIES(o,p) quantity ON CHANGE changeQuantity(p,o)
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActive(BOM(p)) 'F7'            
        FILTER 'Активные' isActive(BOM(p)) OR (fromDate(BOM(p)) > currentDate()) 'F8' DEFAULT
        
    ORDER BY nameSku(p)
    
    FILTERS                isParent(g, sku(p)),
                           active(sku(p)),
                           (in(BOM(p), componentsStock(o)) AND countStocks(BOM(p))) OR NOT countStocks(BOM(p))
;

DESIGN order{
    row1 {
        NEW tabContainer AFTER row111 {
            fill = 1;
            type = TABBED;
            MOVE pd.box;
            NEW selectPane {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                MOVE skuTree.tree.box { caption = 'Группы'; }                
                MOVE p.box;
            }
        
        }
    }
}

edit 'Редактировать' (ProductDetail d) = ACTION NEWSESSION {
    FORM order OBJECTS o = order(d), pd = d MANAGESESSION DOCKEDMODAL;
}
show 'Просмотреть' (ProductDetail d) = ACTION NEWSESSION {
    FORM order OBJECTS o = order(d), pd = d DOCKEDMODAL READONLY ;
}
//-------------------- Подбор компонентов -----------------//
componentDetailBrutto (order,bruttoSku) =  GROUP MAX ComponentDetail componentDetail
    BY order(componentDetail), bruttoSku(componentDetail);

bruttoQuantityBrutto 'Кол-во брутто компонентов в документе' (order,bruttoSku) =  GROUP SUM bruttoQuantity(ComponentDetail componentDetail)
    BY order(componentDetail), bruttoSku(componentDetail);    
    
changeBruttoQuantityBrutto(Sku bruttoSku, Order order) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    IF componentDetailBrutto(order,bruttoSku) THEN {
        IF requestedNumeric() THEN {
            bruttoQuantity(ComponentDetail detail) <- requestedNumeric() WHERE detail == componentDetailBrutto(order,bruttoSku);
        } ELSE {
            DELETE ComponentDetail detail WHERE detail == componentDetailBrutto(order,bruttoSku);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = ComponentDetail DO {
                order(d) <- order;
                bruttoSku(d) <- bruttoSku;
                bruttoQuantity (d) <- requestedNumeric();
            }
        }
    }
}

prevCurrentBalance 'Остаток' (Sku sku, Order o) = prevCurrentBalance(sku, componentsStock(o));

background = ABSTRACT CASE COLOR (Order, Sku); 

EXTEND FORM order

    TREE skuTree1 g1 = SkuGroup PARENT parent
    PROPERTIES READONLY order(g1), name(g1)
    ORDER BY order(g1), name(g1)
    FILTERGROUP inactive1 FILTER 'Активные' active(g1) 'F5' DEFAULT
    FILTERGROUP component FILTER 'Сырье' filterComponent(g1) 'shift F5' DEFAULT

    
    OBJECTS p1=Sku
    PROPERTIES(p1) BACKGROUND background(o,p1) READONLY id SHOWIF showIDs()
    PROPERTIES(p1) BACKGROUND background(o,p1) READONLY name, shortNameUOM
    PROPERTIES(o,p1) bruttoQuantityBrutto ON CHANGE changeBruttoQuantityBrutto(p1,o)
    PROPERTIES(p1, o) prevCurrentBalance 

    ORDER BY name(p1)
    
    FILTERS isParent(g1, p1),
            active(p1)    
            
    FILTERGROUP filter
        FILTER 'С остатком (скл. комп.)' prevCurrentBalance(p1, o) 'F10' DEFAULT
        FILTER 'В документе (брутто)' bruttoQuantityBrutto(o, p1) 'F9'            
            
;

DESIGN order{
    specification.box {
        NEW tabContainerComponent BEFORE row2 {
            fill = 1;
            type = TABBED;
            caption = 'Компоненты';
            MOVE cd.box;
            NEW selectPane1 {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                MOVE skuTree1.tree.box { caption = 'Группы'; }                
                MOVE p1.box;
            }    
        }    
    }
}
balanceB 'Остаток (до)' (ProductDetail d) = prevBalanceB(sku(d), productsStock(d), dateTime(d));
    
EXTEND FORM order
    PROPERTIES (pd) READONLY BEFORE deletepd balanceB
;

@defineMovementSku(productDetail, productsStock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(productDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(componentDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(productDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(componentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

@defineMovementPriceSku(productDetail, productsStock); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши  изменение цены товара

showMovementBruttoSkuStock 'Показать движение товара по складу' (ComponentDetail componentDetail) = ACTION FORM movementSkuStock OBJECTS s = sku(componentDetail), st = componentsStock(componentDetail) NEWSESSION MODAL SHORTCUT bruttoNameSku[ComponentDetail];
showMovementBruttoSku 'Показать движение товара' (ComponentDetail componentDetail) = ACTION FORM movementSku OBJECTS s = sku(componentDetail) NEWSESSION MODAL SHORTCUT bruttoNameSku[ComponentDetail];
showBalancesBruttoSkuStock 'Показать остатки товара' (ComponentDetail componentDetail) = ACTION FORM balancesSkuStock OBJECTS s = sku(componentDetail) NEWSESSION MODAL SHORTCUT bruttoNameSku[ComponentDetail];
showMovementPriceBruttoSkuStock 'Показать изменение цены товара по складу' (ComponentDetail componentDetail) = ACTION FORM movementPriceSkuStock OBJECTS s = sku(componentDetail), st = componentsStock(componentDetail) NEWSESSION MODAL SHORTCUT bruttoNameSku[ComponentDetail];
showMovementPriceBruttoSkuStocks 'Показать изменение цены товара' (ComponentDetail componentDetail) = ACTION FORM movementPriceSkuStocks OBJECTS s = sku(componentDetail) NEWSESSION MODAL SHORTCUT bruttoNameSku[ComponentDetail];

showMovementSubstituteSkuStock 'Показать движение товара по складу' (ComponentDetail componentDetail) = ACTION FORM movementSkuStock OBJECTS s = sku(componentDetail), st = componentsStock(componentDetail) NEWSESSION MODAL SHORTCUT substituteNameSku[ComponentDetail];
showMovementSubstituteSku 'Показать движение товара' (ComponentDetail componentDetail) = ACTION FORM movementSku OBJECTS s = sku(componentDetail) NEWSESSION MODAL SHORTCUT substituteNameSku[ComponentDetail];
showBalancesSubstituteSkuStock 'Показать остатки товара' (ComponentDetail componentDetail) = ACTION FORM balancesSkuStock OBJECTS s = sku(componentDetail) NEWSESSION MODAL SHORTCUT substituteNameSku[ComponentDetail];
showMovementPriceSubstituteSkuStock 'Показать изменение цены товара по складу' (ComponentDetail componentDetail) = ACTION FORM movementPriceSkuStock OBJECTS s = sku(componentDetail), st = componentsStock(componentDetail) NEWSESSION MODAL SHORTCUT substituteNameSku[ComponentDetail];
showMovementPriceSubstituteSkuStocks 'Показать изменение цены товара' (ComponentDetail componentDetail) = ACTION FORM movementPriceSkuStocks OBJECTS s = sku(componentDetail) NEWSESSION MODAL SHORTCUT substituteNameSku[ComponentDetail];

@defineBalancesBatch(componentDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши движение по партии

showBOM'Показать спецификацию' (ProductDetail d) = ACTION FORM BOM OBJECTS b = BOM(d), p = product(d) NEWSESSION MODAL SHORTCUT nameProduct[ProductDetail];
showBOM'Показать спецификацию' (ComponentDetail d) = ACTION FORM BOM OBJECTS b = BOM(d), c = component(d) NEWSESSION MODAL SHORTCUT nameComponent[ComponentDetail];
showBOMName'Показать спецификацию' (ComponentDetail d) = ACTION FORM BOM OBJECTS b = BOM(d) NEWSESSION MODAL SHORTCUT fullNameBOM[ComponentDetail];

@defineOperationChangesDocument(order, Order, preventChangesDocument, createdUser);

overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i);
overShowDelete (Order i) += showEditDeleteUser(i) AND isOpened(i); 

//-- Допустимый процент отклонения учетной цены от цены изделия
fromComponentsPrice(ProductDetail pd) = componentsPrice(pd)*( 100.0 - percPrice(operation(pd)))/100.0;
toComponentsPrice(ProductDetail pd) = componentsPrice(pd)*( 100.0 + percPrice(operation(pd)))/100.0;

CONSTRAINT percPrice(operation(ProductDetail pd)) AND isPosted(pd) AND price(pd) AND componentsPrice(pd)
    AND NOT (price(pd) >= fromComponentsPrice(pd) AND price(pd) <= toComponentsPrice(pd))
        MESSAGE 'Внимание!!! Отклонение между ценой компонентов и ценой изделия не попадает в допустимый процент по цене.';
