MODULE ProductionOrder;

REQUIRE Substitute, PriceListType, PriceListCalc, StockTax, ProductionOperation;
NAMESPACE Production;

// ----------------  Заказ ------------------- //
CLASS Order 'Производственный заказ';
TABLE order(Order);

@defineDocumentHeaderTime(Order);
@deriveDocumentHeaderTimePrefix(Order, );
    
@defineDocumentHeaderNote(Order);

@defineDocumentHeaderNumber(Order);

@defineNumeratedDefault(Order, 'Производственные заказы', 'ПЗ');

@defineDocumentHeaderCreated(Order);
@defineDocumentHeaderPosted(Order);
@defineDocumentHeaderClosed(Order);

@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');
includeVATOrder 'Цена с НДС' = DATA BOOLEAN (Order);
includeVATOrder(order) <- includeVATPriceListType(priceListTypeOrder(order)) WHEN CHANGED(priceListTypeOrder(order));
backgroundVATOrder 'Цвет' (order) = RGB(255, 255, 224) IF order IS Order;

@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка-изделие)');
@defineDocumentHeaderPriceListType (order, priceListType, products, ' (изделие)');

isVATOrder 'С НДС' = DATA BOOLEAN (Order);

@defineDocumentHeaderStock (order, stock, 'Склад компонент', components);
@defineDocumentHeaderStock (order, stock, 'Склад изделий', products);

@defineDocumentHeaderDatePrefix (Order, from, ' действия с');
@defineDocumentHeaderDatePrefix (Order, to, ' действия по');

@defineDocumentHeaderDescription(Order, 'Производственный заказ');
@defineDocumentHeaderCurrency (order);
@deriveDocumentCurrency (order, componentsStock, currencyStock);

// ---------------- Изделия ------------------- //
CLASS ProductDetail 'Строка изделия';
TABLE productDetail (ProductDetail);

@defineDocumentRelation (order, ProductDetail, );
@defineDocumentDetailIndex (order, ProductDetail);
@defineDocumentDetailActionsCustom (order, ProductDetail);
@defineDocumentDetailPosted (order, ProductDetail);
@defineDocumentDetailClosed (order, ProductDetail);

@defineDocumentDetailTime (order, ProductDetail);
@defineDocumentDetailDatePrefix (order, ProductDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ProductDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ProductDetail);

currencyProductDetail (productDetail) = currencyOrder(orderProductDetail(productDetail));

@defineDocumentDetailStock (order, productDetail, stock, componentsStock, 'Склад компонент');
@defineDocumentDetailStock (order, productDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustom (productDetail, sku);

productProductDetail = DATA Product (ProductDetail);
nameProductProductDetail 'Изделие' (productDetail) = nameMaterial(productProductDetail(productDetail)) IN recognize;

UOMProductDetail = DATA UOM (ProductDetail);
shortNameUOMProductDetail 'Ед.изм.' (productDetail) = shortNameUOM(UOMProductDetail(productDetail)) IN recognize;
UOMProductDetail(productDetail) <- UOMProduct(productProductDetail(productDetail)) WHEN CHANGED (productProductDetail(productDetail));

CONSTRAINT skuProductDetail(productDetail) != skuProduct(productProductDetail(productDetail)) CHECKED BY productProductDetail
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';

// Кол-во
@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

// Цены компонент
@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

isVATProductDetail (productDetail) = isVATOrder(orderProductDetail(productDetail)) PERSISTENT;
calcPriceListTypeProductDetail (productDetail) = calcPriceListTypeOrder(orderProductDetail(productDetail)) PERSISTENT;
productsPriceListTypeProductDetail (productDetail) = productsPriceListTypeOrder(orderProductDetail(productDetail)) PERSISTENT;
markupProductDetail 'Надбавка, %' = DATA NUMERIC[8,2] (ProductDetail);
valueVATProductDetail 'НДС, %' = DATA NUMERIC[10,5] (ProductDetail);

// коэффициент с надбавкой и НДС
multiplierCalcProductDetail (productDetail) = ((100.00 IF productDetail IS ProductDetail) (+) markupProductDetail(productDetail)) *
    ((100.00 IF productDetail IS ProductDetail) (+) (IF isVATProductDetail(productDetail) THEN  valueVATProductDetail(productDetail) ELSE 0.0 IF productDetail IS ProductDetail)) / 10000 PERSISTENT;


// Цены изделий
@defineDocumentDetailPriceCustomPrefix (productDetail, products, ' изделия');

productsSumProductDetail 'Сумма изделия' = DATA NUMERIC[16,2] (ProductDetail);
productsSumProductDetail(productDetail) <-
    NUMERIC[16,2](roundPriceCurrency((quantityProductDetail(productDetail) * productsPriceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (quantityProductDetail(productDetail)) OR
         CHANGED (productsPriceProductDetail(productDetail)) OR
         CHANGED (currencyProductDetail(productDetail));

@defineDocumentHeaderSumCustomPrefix (order, productDetail, products, ' (изделие)');

// ------------- Компоненты ----------- //
CLASS ComponentDetail 'Строка компонента';
TABLE componentDetail (ComponentDetail);

@defineDocumentRelation (order, ComponentDetail, );
@defineDocumentDetailIndex (order, ComponentDetail);
@defineDocumentDetailActionsCustom (order, ComponentDetail);
@defineDocumentDetailPosted (order, ComponentDetail);
@defineDocumentDetailClosed (order, ComponentDetail);

@defineDocumentDetailTime (order, ComponentDetail);
@defineDocumentDetailDatePrefix (order, ComponentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ComponentDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ComponentDetail);

currencyComponentDetail (componentDetail) = currencyOrder(orderComponentDetail(componentDetail));

@defineDocumentDetailStock (order, componentDetail, stock, componentsStock, 'Склад компонент');
@defineDocumentDetailStock (order, componentDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, brutto, ' (брутто)');
isVATComponentDetail(componentDetail) = isVATOrder(orderComponentDetail(componentDetail)) PERSISTENT;

componentComponentDetail = DATA Component (ComponentDetail);
nameComponentComponentDetail 'Компонент' (componentDetail) = nameComponent(componentComponentDetail(componentDetail));

UOMComponentDetail = DATA UOM (ComponentDetail);
shortNameUOMComponentDetail 'Ед. изм.' (componentDetail) = shortNameUOM(UOMComponentDetail(componentDetail));
UOMComponentDetail(componentDetail) <- UOMComponent(componentComponentDetail(componentDetail)) WHEN CHANGED (componentComponentDetail(componentDetail));

CONSTRAINT bruttoSkuComponentDetail(componentDetail) != skuMaterial(materialComponent(componentComponentDetail(componentDetail)))
    CHECKED BY componentComponentDetail MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

productComponentDetail = DATA Product (ComponentDetail);
nameMaterialComponentDetail 'Изделие' (componentDetail) = nameMaterial(productComponentDetail(componentDetail));

CONSTRAINT bruttoSkuComponentDetail(componentDetail) != skuProduct(productComponentDetail(componentDetail))
    CHECKED BY productComponentDetail MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

// Кол-во
@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');

@defineDocumentDetailPriceCustomPrefix (componentDetail, , );

// Замены
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, substitute, ' (замена)');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, substitute, ' (замена)');

// Параметры компонент с учетом замен

skuComponentDetail (componentDetail) = OVERRIDE bruttoSkuComponentDetail(componentDetail), substituteSkuComponentDetail(componentDetail) PERSISTENT;
nameSkuComponentDetail 'SKU' (componentDetail) = nameSku(skuComponentDetail(componentDetail));
idBarcodeSkuComponentDetail 'Штрих-код' (componentDetail) = idBarcodeSku(skuComponentDetail(componentDetail));
shortNameUOMSkuComponentDetail 'Ед.изм.' (componentDetail) = shortNameUOMSku(skuComponentDetail(componentDetail));

quantityComponentDetail 'Кол-во' (componentDetail) = OVERRIDE bruttoQuantityComponentDetail(componentDetail), substituteQuantityComponentDetail(componentDetail) PERSISTENT;

// Сумма
@defineDocumentDetailDataSum (component);
@deriveDocumentDetailSum(component, quantity);

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, , ' (компонент)');
quantityComponentDetailSkuOrder 'Кол-во (всего) (компонент)' (sku, order) = GROUP SUM quantityComponentDetail(idetail) BY skuComponentDetail(idetail), orderComponentDetail(idetail) IN documentSum PERSISTENT;

// ------------- Заполнение компонентов из спецификаций --------------- //

TABLE productOrder(Product, Order);
quantityProductOrder 'Кол-во изделий в заказе' (product, order) = GROUP SUM quantityProductDetail(productDetail)
    BY productProductDetail(productDetail), orderProductDetail(productDetail) PERSISTENT;

TABLE BOMOrder(BOM, Order);
quantityProductsBOMOrder 'Кол-во спецификаций' (BOM, order) = [= GROUP MAX quantityProductOrder(product, order)/ quantityProduct(product)
    BY BOMProduct(product), order](BOM, order) PERSISTENT;
    
BOMComponentDetail= DATA BOM (ComponentDetail); 
nameBOMComponentDetail 'Спецификация' = nameBOM(BOMComponentDetail(d));    

createComponentsOrder 'Заполнить компоненты из спецификации' = ACTION (order) {

    FOR quantityProductsBOMOrder(BOM, order) DO {

        FOR BOMComponent(component) == BOM DO {
            FOR ADDOBJ d=ComponentDetail DO {
                orderComponentDetail(d) <- order;
                componentComponentDetail(d) <- component;
                bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order))*quantityProductsBOMOrder(BOM,order);
                BOMComponentDetail(d) <- BOM; 
                
                IF materialComponent(component) IS Sku THEN {
                    bruttoSkuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) IS Product THEN {
                        productComponentDetail(d) <- materialComponent(component);
                        bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }

} TOOLBAR;

recBruttoQuantityBOMOrderSku 'Рекур.кол-во' (BOM, order, sku) = GROUP SUM quantityProductsBOMOrder(BOM, order) * recBruttoQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY BOM, order, sku;
createRecComponentsOrder 'Заполнить из спецификации (рекурсивно)' = ACTION (order)  {

    FOR q == recBruttoQuantityBOMOrderSku(BOM, order, sku) ADDOBJ d = ComponentDetail DO {
        orderComponentDetail(d) <- order;
        BOMComponentDetail(d) <- BOM;
        bruttoSkuComponentDetail(d) <- sku;
        bruttoQuantityComponentDetail(d) <- q;
    }
} TOOLBAR;

// ------------- Заполнение изделий из спецификаций --------------- //

quantityComponentsBOMOrder 'Кол-во спецификаций' (BOM, order) =
    [= GROUP MAX bruttoQuantityComponentDetail(componentDetail) / bruttoQuantityComponentDate(componentComponentDetail(componentDetail), dateComponentDetail(componentDetail))
    BY BOMComponent(componentComponentDetail(componentDetail)), orderComponentDetail(componentDetail)](BOM, order);

createProductsOrder 'Заполнить изделия из спецификации ' = ACTION (order)  {

    FOR quantityComponentsBOMOrder(BOM, order) DO {

        FOR  BOM == BOMProduct(product)  DO {
            FOR ADDOBJ d=ProductDetail DO {
                orderProductDetail(d) <- order;
                skuProductDetail(d) <- skuProduct(product);
                productProductDetail(d) <- product;
                quantityProductDetail(d) <- quantityProduct(product)*quantityComponentsBOMOrder(BOM,order);
            }
        }
    }

} TOOLBAR;

expandComponentDetail 'Развернуть изделие' = ACTION (componentDetail)  {

    FOR  BOMComponent(component) == BOMProduct(productComponentDetail(componentDetail))  DO {
        FOR ADDOBJ d=ComponentDetail DO {
            orderComponentDetail(d) <- orderComponentDetail(componentDetail);
            componentComponentDetail(d) <- component;
            bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(orderComponentDetail(componentDetail)))*
                bruttoQuantityComponentDetail(componentDetail)/quantityProduct(productComponentDetail(componentDetail));    //ceil
            BOMComponentDetail(d) <- BOMComponentDetail(componentDetail);     

            IF materialComponent(component) IS Sku THEN {
                bruttoSkuComponentDetail(d) <- materialComponent(component);
            } ELSE {
                IF materialComponent(component) IS Product THEN {
                    productComponentDetail(d) <- materialComponent(component);
                    bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                }
            }
        }
    }
    DELETE componentDetail;
} TOOLBAR;

backgroundComponentDetail 'Цвет' (componentDetail) = RGB(255,255,229) IF productComponentDetail(componentDetail);

aaa 'Заполнить из спецификации (рекурсивно)+++++++' = ACTION (order) {

    FOR quantityProductsBOMOrder(BOM, order) DO {

        FOR BOMComponent(component) == BOM DO {
            FOR ADDOBJ d=ComponentDetail DO {
                orderComponentDetail(d) <- order;
                componentComponentDetail(d) <- component;
                bruttoQuantityComponentDetail(d) <- bruttoQuantityComponentDate(component, dateOrder(order))*quantityProductsBOMOrder(BOM,order);
                BOMComponentDetail(d) <- BOM; 
                
                IF materialComponent(component) IS Sku THEN {
                    bruttoSkuComponentDetail(d) <- materialComponent(component);
                } ELSE {
                    IF materialComponent(component) IS Product THEN {
                        productComponentDetail(d) <- materialComponent(component);
                        bruttoSkuComponentDetail(d) <- skuProduct(materialComponent(component));
                    }
                }
            }
        }
    }
    WHILE productComponentDetail(detail) AND orderComponentDetail(detail) == order DO {
        expandComponentDetail(detail);
    }
} TOOLBAR;


// ---------------- Подбор цен и замен для sku --------------------------- //

TABLE skuOrder(Sku, Order);

// --- Основной компонент --- //
bruttoQuantitySkuOrder 'Количество брутто' (sku, order) = GROUP SUM bruttoQuantityComponentDetail(componentDetail)
                                                                BY bruttoSkuComponentDetail(componentDetail),
                                                                   orderComponentDetail(componentDetail) PERSISTENT;

dataBruttoPriceSkuOrder 'Цена' = DATA NUMERIC[14,2] (Sku, Order);

dataBruttoPriceSkuOrder (sku, order) <- prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order),
                                                                                sku,
                                                                                componentsStockOrder(order),
                                                                                dateTimeOrder(order))
    WHEN CHANGED(priceListTypeOrder(order)) OR CHANGED(componentsStockOrder(order)) OR CHANGED(dateTimeOrder(order)) ;


// --- Замена --- //
substituteSkuOrder = DATA Sku (Sku, Order);
nameSubstituteSkuOrder 'Замена' (sku, order) = nameSku(substituteSkuOrder(sku, order));

substituteQuantitySkuOrder 'Кол-во замены' = DATA NUMERIC[14,3] (Sku, Order);
overSubstituteQuantitySkuOrder 'Кол-во' = OVERRIDE bruttoQuantitySkuOrder(sku, order), substituteQuantitySkuOrder(sku, order);
multiplierSkuOrder 'Коэффициент замены' = DATA NUMERIC[8,3] (Sku, Order);

//--
stockSubstitutesSku = DATA SESSION Stock ();
nameStockSubstitutesSku 'Склад' = nameStock(stockSubstitutesSku());

multiplierSubstitutesSku 'Коэффициент' = DATA SESSION NUMERIC[8,3] (Sku);

currentBalanceSkuSubstitutesSku 'Текущий остаток' (sku) =  currentBalanceSkuStock(sku, stockSubstitutesSku());

substitutesPriceSkuOrder 'Цена' (sku,order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), sku, stockSubstitutesSku(), dateTimeOrder(order));
showPriceSubstitutesOrder (order) = stockSubstitutesSku() AND priceListTypeOrder(order);

multiplierSubstituteFromToSku 'Коэффициент' (fromSku ,toSku) =  multiplierSubstitute(uniqueSubstituteFromToSku(fromSku ,toSku));
changeMultiplierSubstituteSkuFromTo = ACTION (fromSku, toSku) {
    REQUEST NUMERIC[8,3] INPUT;
    IF requestedNumeric() THEN {         
        IF uniqueSubstituteFromToSku(fromSku, toSku) THEN {
            multiplierSubstitute(substitut) <- requestedNumeric() WHERE uniqueSubstituteFromToSku(fromSku, toSku) == substitut;
        } ELSE {
            FOR  ADDOBJ sub = Substitute DO{
                fromSkuSubstitute(sub) <- fromSku;
                toSkuSubstitute(sub) <- toSku;
                multiplierSubstitute(sub) <- requestedNumeric();
            }        
        }
    } ELSE {
        IF uniqueSubstituteFromToSku(fromSku, toSku) THEN {
            DELETE substitut  WHERE uniqueSubstituteFromToSku(fromSku, toSku) == substitut;
        }    
    }        
}
backgroundSubstitutesOrder 'Цвет' (order) = RGB(255,224,255) IF order IS Order;

FORM substitutesSku 'Sku'
    PROPERTIES() nameStockSubstitutesSku
    OBJECTS o = Order FIXED PANEL
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) nameSku
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sg) DEFAULT

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES     READONLY SHOWIF stockSubstitutesSku() currentBalanceSkuSubstitutesSku(sk)
    PROPERTIES     READONLY SHOWIF showPriceSubstitutesOrder(o) substitutesPriceSkuOrder(sk,o)

    PROPERTIES(s,sk) multiplierSubstituteFromToSku ON CHANGE changeMultiplierSubstituteSkuFromTo(s,sk) BACKGROUND  backgroundSubstitutesOrder(o)
    PROPERTIES() addSku TODRAW sk
    PROPERTIES(sk) editSku, copySku
    FILTERS isParentSkuGroupSku(sg, sk)
    ORDER BY nameSku(sk)

    FILTERGROUP filter1
        FILTER 'Товары с остатком' 'F10' currentBalanceSkuSubstitutesSku(sk) AND stockSubstitutesSku() DEFAULT
    FILTERGROUP filter2
        FILTER 'Доступные замены' 'F9' uniqueSubstituteFromToSku(s,sk) DEFAULT       
;

DESIGN substitutesSku FROM DEFAULT {
    main{
        preferredSize = (1200, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            ADD skuTree.tree.box {
                caption = 'Группы SKU';
            }

            ADD sk.box {
                fill = 3;
            }
        }
        NEW headerContainer BEFORE topContainer {
            type = CONTAINERH ;
            NEW stockContainer {
                caption = 'Склад';
                ADD PROPERTY (nameStockSubstitutesSku());
            }
            ADD s.box {
                caption = 'Заменяемый товар';
                ADD PROPERTY (nameSku(s));                
            };
        }
        REMOVE o.box;        
        ADD functions.box;
    }
}

chooseSubstituteSkuOrder 'Выбрать замену' =  ACTION (fromSku, order) {
    stockSubstitutesSku() <- NULL;
    stockSubstitutesSku() <- componentsStockOrder(order) WHERE componentsStockOrder(order);

    FORM substitutesSku OBJECTS o= order, s=fromSku MODAL SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSkuOrder(fromSku, order) <- chosenObject('sk');
        multiplierSkuOrder(fromSku, order) <- multiplierSubstituteFromToSku(fromSku,chosenObject('sk'));
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSkuOrder(fromSku, order) <- NULL;
            multiplierSkuOrder(fromSku, order) <- NULL;         
        }   
    }
}


currentBalanceSubstituteOrder'Текущий остаток' (substitute, order) = currentBalanceSkuStock(toSkuSubstitute(substitute), componentsStockOrder(order));
substitutesPriceSubstituteOrder 'Цена' (substitute, order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), toSkuSubstitute(substitute), componentsStockOrder(order), dateTimeOrder(order));

// Действие по заполнении замены через галочку
isSubstituteSkuOrder 'Использовать замену' (substitute, sku, order) = substituteSkuOrder(sku, order) == toSkuSubstitute(substitute);
changeSubstituteSkuOrder = ACTION (substitute, sku, order) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        substituteSkuOrder(sku, order) <- toSkuSubstitute(substitute);
        multiplierSkuOrder(sku, order) <- multiplierSubstitute(substitute);

    } ELSE {
        substituteSkuOrder(sku, order) <- NULL;
        multiplierSkuOrder(sku, order) <- NULL;
    }
}

// Sku с учетом замены
skuSkuOrder (sku, order) = OVERRIDE sku IF bruttoQuantitySkuOrder(sku, order), substituteSkuOrder(sku,order) PERSISTENT;

nameSkuSkuOrder 'Итоговый sku' (sku,order)= nameSku(skuSkuOrder (sku,order));
idBarcodeSkuSkuOrder 'Штрих-код' (sku,order) = idBarcodeSku(skuSkuOrder (sku, order));
shortNameUOMSkuSkuOrder 'Ед.изм.' (sku,order) = shortNameUOMSku(skuSkuOrder (sku, order));

quantityComponentsBOMSkuOrder 'Кол-во' = GROUP SUM quantityComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);

bruttoSumComponentsBOMSkuOrder 'Сума' (BOM, sku, order) = GROUP SUM quantityComponentDetail(d) * priceComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);
//premiumSumComponentsBOMSkuOrder 'Сума с надбавкой' (BOM, sku, order) = GROUP SUM quantityComponentDetail(d) * premiumPriceComponentDetail(d) BY BOMComponentDetail(d), skuComponentDetail(d), orderComponentDetail(d);

calcComponentsPriceProductDetail'Цена расчетная с/с' (productDetail)= [ = GROUP SUM (bruttoSumComponentsBOMSkuOrder(BOMProduct(product), sku, order) * pricePercentProduct(product)/ 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail));

//-- Подсчет цены изделия с учетом замен
recPricePercentProductSkuOrder (product, sku, order) = recPricePercentProductSkuDate (product, sku, dateOrder(order));

calcPremiumPriceProductDetail 'Цена расчетная (с надбавками)' (productDetail) =
    IF roundConditionPriceListType(calcPriceListTypeProductDetail(productDetail)) THEN
        NUMERIC[14,2](roundPriceRoundCondition(calcComponentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail),
                                               roundConditionPriceListType(calcPriceListTypeProductDetail(productDetail))))
    ELSE
        NUMERIC[14,2](roundPriceCurrency(calcComponentsPriceProductDetail(productDetail) * multiplierCalcProductDetail(productDetail),
                                         currencyProductDetail(productDetail)));

// Изменение надбавок при вводе пользователем процента

changeValueMarkupProductDetail (detail) = ACTION (detail) {
    IF calcPremiumPriceProductDetail(detail) THEN {
        productsPriceProductDetail(detail) <- calcPremiumPriceProductDetail(detail);
    }
}
changeMarkupProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[8,2] INPUT;
    IF requestedNumeric() THEN {
        markupProductDetail (detail) <- requestedNumeric();
        changeValueMarkupProductDetail(detail);
    }
}

calcMarkupIsVATProductDetail(d)  = [= round2(((X/Z*100/(100+Y))-1)*100)](
    productsPriceProductDetail(d),
    calcComponentsPriceProductDetail(d) IF calcComponentsPriceProductDetail(d) != 0.0,
    valueVATProductDetail(d));
calcMarkupProductDetail(d)  = [= round2((X/Y-1)*100)](
    productsPriceProductDetail(d),
    calcComponentsPriceProductDetail(d) IF calcComponentsPriceProductDetail(d) != 0.0);    

changeValueProductsPriceProductDetail (detail) = ACTION (detail) {
    IF isVATProductDetail(detail) THEN {
        markupProductDetail(detail) <- calcMarkupIsVATProductDetail(detail);
    } ELSE {
        markupProductDetail(detail) <- calcMarkupProductDetail(detail);
    }
}
changeProductsPriceProductDetail (detail) = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        productsPriceProductDetail (detail) <- requestedNumeric();
        changeValueProductsPriceProductDetail(detail);
    }
}

recordMarkupProductDetail(detail) = ACTION (detail) {
    IF calcPriceListTypeProductDetail(detail) THEN {
        markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
        changeValueMarkupProductDetail(detail);
    }
}

// расчет НДС
valueVATSkuOrder 'НДС, %' = DATA NUMERIC[10,5] (Sku, Order);

valueVATSkuOrder(sku, order) <- valueVATSkuCountryDate(sku, componentsCountryOrder(order), dateOrder(order)) 
        WHEN (CHANGED(componentsCountryOrder(order) IF sku IS Sku) OR
             CHANGED(dateOrder(order) IF sku IS Sku)) 
             AND quantityComponentDetailSkuOrder(sku, order)
             AND (includeVATOrder(order) OR isVATOrder(order));                                      

calcPriceVATProductDetail 'Цена НДС' (productDetail)= [ = GROUP SUM (bruttoSumComponentsBOMSkuOrder(BOMProduct(product), sku, order) * pricePercentProduct(product)*(valueVATSkuOrder(sku, order)/(100+valueVATSkuOrder(sku, order)))/ 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail));          
          
calcValueVATProductDetail 'НДС, %' (productDetail)= [= 100*X/(Y-X)](
    calcPriceVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail));
    
//--  если стоит галочка isVATOrder    
calcPriceIsVATProductDetail 'Цена НДС' (productDetail) = [ = GROUP SUM (bruttoSumComponentsBOMSkuOrder(BOMProduct(product), sku, order) * pricePercentProduct(product)*(valueVATSkuOrder(sku, order)/100)/ 
    (100* quantityProductsBOMOrder(BOMProduct(product), order) IF quantityProductsBOMOrder(BOMProduct(product), order)!= 0)/
    quantityProduct(product) IF quantityProduct(product)!= 0)  
    BY product, order](productProductDetail(productDetail), orderProductDetail(productDetail));    
   
calcValueIsVATProductDetail 'НДС, %' (productDetail)= [= 100*X/Y](
    calcPriceIsVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail) IF calcComponentsPriceProductDetail(productDetail)!= 0);    

// Расчет цен для изделий
fillPriceProductsOrder 'Заполнить цены для изделий' = ACTION (order)  {
    FOR orderProductDetail(detail) == order DO {
        valueVATProductDetail(detail) <- IF isVATProductDetail(detail) THEN calcValueIsVATProductDetail(detail) ELSE calcValueVATProductDetail(detail);
        componentsPriceProductDetail(detail) <- calcComponentsPriceProductDetail(detail);
        IF productsPriceListTypeProductDetail(detail) AND prevPriceBPriceListTypeSkuStockDateTime(productsPriceListTypeProductDetail(detail),
                                                                                                  skuProductDetail(detail),
                                                                                                  productsStockProductDetail(detail),
                                                                                                  dateTimeProductDetail(detail))    THEN {
                                                                                                  
            productsPriceProductDetail(detail) <- prevPriceBPriceListTypeSkuStockDateTime(productsPriceListTypeProductDetail(detail),
                                                                                            skuProductDetail(detail),
                                                                                            productsStockProductDetail(detail),
                                                                                            dateTimeProductDetail(detail));  
            changeValueProductsPriceProductDetail(detail);                                                                                
                                                                                             
        } ELSE {
            IF calcPriceListTypeProductDetail(detail) AND markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail)) THEN {
                markupProductDetail(detail) <- markupCalcPriceListTypeSku(calcPriceListTypeProductDetail(detail), skuProductDetail(detail));
                changeValueMarkupProductDetail(detail);
            }
        }                                                   
    }
} TOOLBAR;

   
//-- Замены для компонентов

chooseSubstituteComponentDetail 'Выбрать замену' =  ACTION (detail){
    stockSubstitutesSku() <- NULL;
    stockSubstitutesSku() <- componentsStockComponentDetail(detail) WHERE componentsStockComponentDetail(detail);

    FORM substitutesSku OBJECTS o= orderComponentDetail(detail), s = bruttoSkuComponentDetail(detail) MODAL SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        substituteSkuComponentDetail(detail) <- chosenObject('sk'); 
        substituteQuantityComponentDetail(detail) <- NUMERIC[14,3](multiplierSubstituteFromToSku(bruttoSkuComponentDetail(detail), substituteSkuComponentDetail(detail))* bruttoQuantityComponentDetail(detail));           
        
    } ELSE {
        IF formResult() == FormResult.drop THEN {
            substituteSkuComponentDetail(detail) <- NULL;  
            substituteQuantityComponentDetail(detail) <- NULL;  
        }    
    }    
}

// ------------- Формы ----------- //

showVATOrder (o) = includeVATOrder(o) OR isVATOrder(o);

backgroundSubstitutesSkuOrder 'Цвет' (sku, order) = RGB(255,224,255) IF substituteQuantitySkuOrder(sku, order);


resetSubstituteOrder 'Сбросить все замены' = ACTION (order) {
    FOR substituteSkuOrder(sku, order) OR multiplierSkuOrder(sku, order) DO {
        substituteSkuOrder(sku, order) <- NULL;
        multiplierSkuOrder(sku, order) <- NULL;
        valueVATSkuOrder(sku, order) <- NULL;
        substituteQuantitySkuOrder(sku, order) <- NULL;
    }
} TOOLBAR;

deleteComponentsOrder 'Очистить' =  ACTION (order) {
    deleteComponentDetailOrder(order);
    resetSubstituteOrder(order);
} TOOLBAR;

priceStockOrder = DATA Stock(Order);
namePriceStockOrder 'Склад' = nameStock(priceStockOrder(order));

CONSTRAINT  priceStockOrder(o) AND NOT isCompanyStock(priceStockOrder(o)) CHECKED BY priceStockOrder    
        MESSAGE 'Склад для цен не является складом компании';
priceStockSkuOrder 'Цена' (sku, order)= prevPriceBPriceListTypeSkuStockDateTime(priceListTypeOrder(order), sku, componentsStockOrder(order), dateTimeOrder(order));                                                                                                                                                               

priceStockOrder (order) <- componentsStockOrder(order)
    WHEN CHANGED(componentsStockOrder(order));
    
FORM multiplier 'Коэффициент'    
    OBJECTS nu = NUMERIC[8,3] FIXED PANEL
    PROPERTIES  val= OBJVALUE (nu)
;
DESIGN multiplier FROM DEFAULT{
    nu.box {
        caption = '';
        PROPERTY(val) { caption = 'Введите коэффициент цены' ; font = 'bold 36'; } 
    }
} 

fillSubstitutePriceOrderSkuFromTo 'Выполнить' = ACTION (order, sku, skuSubstitute) {
    IF multiplierSubstituteFromToSku(sku, skuSubstitute) THEN {
        dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order));
    } ELSE {
        FORM multiplier MODAL; 
        IF formResult() == FormResult.ok THEN {
            dataBruttoPriceSkuOrder(sku, order) <- NUMERIC[14,2](chosenNumeric('nu')*priceStockSkuOrder(skuSubstitute,order));
        }
    }        
} TOOLBAR;  

currentBalanceSkuPriceStockOrder 'Текущий остаток' = currentBalanceSkuStock(sku, priceStockOrder(order)); 
      
FORM order 'Производственный заказ'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) isPostedOrder, nameComponentsStockOrder, nameProductsStockOrder, nameNumeratorOrder, numberOrder, seriesOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder, noteOrder, quantityProductDetailOrder, productsSumProductDetailOrder, quantityComponentDetailOrder
    PROPERTIES(o)  FORCE PANEL nameCalcPriceListTypeOrder, nameProductsPriceListTypeOrder, isVATOrder
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) indexProductDetail, nameSkuProductDetail,  nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail READONLY , componentsPriceProductDetail
    PROPERTIES(pd) markupProductDetail ON CHANGE changeMarkupProductDetail(pd),
                   productsPriceProductDetail ON CHANGE changeProductsPriceProductDetail(pd), productsSumProductDetail
    PROPERTIES(pd) BACKGROUND backgroundVATOrder(o) SHOWIF showVATOrder(o) valueVATProductDetail
    PROPERTIES(pd) ADDOBJ, deletepd=DELETESESSION
    PROPERTIES(o) TODRAW pd createProductsOrder, fillPriceProductsOrder, deleteProductDetailOrder

    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, bruttoNameSkuComponentDetail, nameMaterialComponentDetail, nameComponentComponentDetail,    
                   nameBOMComponentDetail, shortNameUOMComponentDetail, bruttoQuantityComponentDetail 
    PROPERTIES(cd) BACKGROUND backgroundSubstitutesOrder(o) substituteNameSkuComponentDetail ON CHANGE chooseSubstituteComponentDetail(cd), substituteQuantityComponentDetail
    PROPERTIES(cd) priceComponentDetail
    PROPERTIES(cd) sumComponentDetail

    PROPERTIES(o) TODRAW cd createComponentsOrder, createRecComponentsOrder, aaa
    PROPERTIES(cd) TODRAW cd expandComponentDetail SHOWIF productComponentDetail(cd)
    PROPERTIES(cd) ADDOBJ, deletecd=DELETESESSION
    PROPERTIES(o) TODRAW cd deleteComponentsOrder

    FILTERS orderComponentDetail(cd)==o

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder

    PROPERTIES(s,o) BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder ON CHANGE chooseSubstituteSkuOrder(s,o), multiplierSkuOrder, substituteQuantitySkuOrder 
    FILTERS bruttoQuantitySkuOrder(s,o)

    PROPERTIES(o) FORCE PANEL namePriceListTypeOrder, includeVATOrder  BACKGROUND backgroundVATOrder(o)//, nameComponentsCalcPriceListTypeOrder

    OBJECTS su = Substitute
    PROPERTIES(su) READONLY nameToSkuSubstitute, multiplierSubstitute
    PROPERTIES(su,s,o) isSubstituteSkuOrder ON CHANGE changeSubstituteSkuOrder(su,s,o)
    PROPERTIES     READONLY currentBalanceSubstituteOrder(su,o)
    FILTERS fromSkuSubstitute(su) == s
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) quantityComponentDetailSkuOrder, dataBruttoPriceSkuOrder, 
                    valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF showVATOrder(o)
    FILTERS quantityComponentDetailSkuOrder(sk,o)    
        
    PROPERTIES namePriceStockOrder(o)           
    OBJECTS sku = Sku
    PROPERTIES(sku) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(sku,o) READONLY currentBalanceSkuPriceStockOrder, priceStockSkuOrder
    PROPERTIES(sk,sku) READONLY multiplierSubstituteFromToSku FORCE GRID  
    
    PROPERTIES fillSubstitutePriceOrderSkuFromTo(o,sk,sku)
        
    FILTERGROUP filter1
        FILTER 'Доступные замены' 'F9' uniqueSubstituteFromToSku(sk,sku) DEFAULT     
    FILTERGROUP filter1
        FILTER 'С остатком' 'F8' currentBalanceSkuPriceStockOrder(sku,o) DEFAULT                                                          

    EVENTS
        ON OK prePostOrder(o)
    EDIT Order OBJECT o
;

DESIGN order FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            type = TABBED;
            NEW row1 {
                caption = 'Изделия';
                NEW row111{
                    caption = 'Цена изделий';
                    type = CONTAINERH;
                    ADD PROPERTY(nameCalcPriceListTypeOrder(o));
                    ADD PROPERTY(nameProductsPriceListTypeOrder(o));
                    ADD PROPERTY(isVATOrder(o));
                }
                ADD pd.box;
            }
            ADD cd.box { caption = 'Компоненты';}
            NEW row2 {
                caption = 'Замена';
                type = SPLITV;                    
                ADD s.box {fill = 2;}
                ADD su.box;
            }
            NEW price {
                caption = 'Цены';
                type = SPLITH ;
                NEW price1 {
                    type = CONTAINERV;
                    NEW price11{
                        caption = 'Цена материалов';
                        type = CONTAINERH;
                        ADD PROPERTY(namePriceListTypeOrder(o));
                        ADD PROPERTY(includeVATOrder(o));
                    }
                    ADD sk.box;  
                }                
                       
                NEW price2 {
                    type = CONTAINERV;
                    NEW price21{
                        caption = 'Фильтр складов для цен';
                        ADD PROPERTY(namePriceStockOrder(o)); 
                    }
                    ADD sku.box;                  
                }  
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                ADD o.documentHeader {
                    type = CONTAINERH;
                    ADD PROPERTY(isPostedOrder(o)) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameNumeratorOrder(o));
                    ADD PROPERTY(numberOrder(o));
                    ADD PROPERTY(seriesOrder(o));
                    ADD PROPERTY(dateOrder(o));
                    ADD PROPERTY(timeOrder(o));
                }
                NEW headerRow11 {
                    type = CONTAINERH;
                    NEW headerRow111 {
                        caption = 'Склады';
                        type = CONTAINERH;
                        ADD PROPERTY(nameComponentsStockOrder(o));
                        ADD PROPERTY(nameProductsStockOrder(o));
                    }
                    NEW headerRow112 {
                        type = CONTAINERH;
                    }
                }
                NEW headerRow12 {
                    type = CONTAINERH;
                    ADD o.documentPrm {
                        type = CONTAINERH;
                    }
                    NEW timeRow {
                        caption = 'Срок действия';
                        type = CONTAINERH;
                        ADD PROPERTY(fromDateOrder(o));
                        ADD PROPERTY(toDateOrder(o));
                    }
                }
            }

            ADD o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(productsSumProductDetailOrder(o)) { preferredCharWidth = 13;}
    }
}
editOrder 'Редактировать' (order) = ACTION EDITFORM Order;

copyOrder 'Копировать' = ACTION (order) NEWSESSION {
    FOR ADDOBJ o = Order DO {
        componentsStockOrder(o) <- componentsStockOrder(order);
        productsStockOrder(o) <- productsStockOrder(order);
        fromDateOrder(o) <- fromDateOrder(order);
        toDateOrder(o) <- toDateOrder(order);
        productsPriceListTypeOrder(o) <- productsPriceListTypeOrder(order);
        priceListTypeOrder(o) <- priceListTypeOrder(order);
        includeVATOrder(o) <- includeVATOrder(order);
        isVATOrder(o) <- isVATOrder(order);
        noteOrder(o) <- noteOrder(order);

        FOR orderProductDetail(productDetail) == order ADDOBJ p=ProductDetail DO {
            orderProductDetail(p) <- o;
            skuProductDetail(p) <- skuProductDetail(productDetail);
            productProductDetail(p) <- productProductDetail(productDetail);
            quantityProductDetail(p) <- quantityProductDetail(productDetail);
            markupProductDetail(p) <- markupProductDetail(productDetail);
        }
        FOR orderComponentDetail(componentDetail) == order ADDOBJ c=ComponentDetail DO {
            orderComponentDetail(c) <- o;
            bruttoSkuComponentDetail(c) <- bruttoSkuComponentDetail(componentDetail);
            productComponentDetail(c) <- productComponentDetail(componentDetail);
            componentComponentDetail(c) <- componentComponentDetail(componentDetail);
            bruttoQuantityComponentDetail(c) <- bruttoQuantityComponentDetail(componentDetail);
        }
        FOR bruttoQuantitySkuOrder(sku,order) DO {
            dataBruttoPriceSkuOrder(sku,o) <- dataBruttoPriceSkuOrder(sku,order);
            substituteSkuOrder(sku,o) <- substituteSkuOrder(sku,order);
            multiplierSkuOrder(sku,o) <- multiplierSkuOrder(sku,order);
        }

        FORM order OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;


WHEN SESSION FORMS order CHANGED(bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order)) DO                                              
    substituteQuantitySkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);
                                
WHEN SESSION FORMS order CHANGED(productProductDetail(detail)) DO
    skuProductDetail(detail) <-  skuProduct(productProductDetail(detail));   

WHEN SESSION FORMS order CHANGED(dataBruttoPriceSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail))) DO
    priceComponentDetail (detail) <- dataBruttoPriceSkuOrder(skuComponentDetail(detail), orderComponentDetail(detail));
                    
WHEN SESSION FORMS order CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO
    substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail));                    
                    
WHEN SESSION FORMS order CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
    CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO 
        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));
                                                                         
FORM orders 'Производственные заказы'

    OBJECTS o = Order
    PROPERTIES(o) READONLYIF isReadonly() isClosedOrder, isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder, nameComponentsStockOrder, nameProductsStockOrder,
                  fromDateOrder, toDateOrder
    PROPERTIES(o) READONLY quantityProductDetailOrder, productsSumProductDetailOrder, quantityComponentDetailOrder
    PROPERTIES(o) READONLYIF isReadonly() nameCalcPriceListTypeOrder, namePriceListTypeOrder, noteOrder

    PROPERTIES(o) addo=ADDFORM, EDITFORM SHOWIF isOpenedOrder(o), copyOrder
    PROPERTIES(o) closeOrder SHOWIF isOpenedOrder(o), openOrder SHOWIF isClosedOrder(o)      
    PROPERTIES(o) deleteo=DELETE FORCE PANEL TOOLBAR SHOWIF isOpenedOrder(o)
    PROPERTIES (o) READONLY FORCE PANEL createdNameUserOrder, createdTimeOrder, createdHostnameComputerOrder, 
                                        postedNameUserOrder, postedTimeOrder, postedHostnameComputerOrder

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, markupProductDetail, productsPriceProductDetail, productsSumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND backgroundComponentDetail(cd) indexComponentDetail, bruttoNameSkuComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, bruttoQuantityComponentDetail 
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutesOrder(o) substituteNameSkuComponentDetail, substituteQuantityComponentDetail
    PROPERTIES(cd) READONLY priceComponentDetail
    PROPERTIES(cd) READONLY sumComponentDetail

    FILTERS orderComponentDetail(cd)==o

    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES(s,o) READONLY bruttoQuantitySkuOrder
    PROPERTIES(s,o) READONLY BACKGROUND backgroundSubstitutesOrder(o) nameSubstituteSkuOrder ON CHANGE chooseSubstituteSkuOrder(s,o), multiplierSkuOrder, substituteQuantitySkuOrder 
    FILTERS bruttoQuantitySkuOrder(s,o)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
    PROPERTIES(sk,o) READONLY quantityComponentDetailSkuOrder, dataBruttoPriceSkuOrder, 
                    valueVATSkuOrder BACKGROUND backgroundVATOrder(o) SHOWIF showVATOrder(o)
    FILTERS quantityComponentDetailSkuOrder(sk,o)                

;
DESIGN orders FROM DEFAULT {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        ADD o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1;
            ADD pd.box {
                caption = 'Изделия';
            }
            ADD cd.box {
                caption = 'Компоненты';
            }
            ADD s.box {
                caption = 'Замены';
            }
            ADD sk.box {
                caption = 'Цены';
            }            
            NEW documentHistory {
                caption = 'История';

                ADD o.created;
                ADD o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(orders);
@defineFilterIsOpened (order, orders, o);

NAVIGATOR {
    manufacturingDocuments {
        ADD orders;
    }
    manufacturingMasterData {
        ADD operations;
    }
}
FORM componentDetails 'Строка компонента'
    OBJECTS d = ComponentDetail
    PROPERTIES(d) READONLY indexComponentDetail, nameSkuComponentDetail, shortNameUOMComponentDetail,
                           descriptionComponentDetail, quantityComponentDetail

    DIALOG ComponentDetail OBJECT d
;

FORM productDetails 'Строка изделия'
    OBJECTS d = ProductDetail
    PROPERTIES(d) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, descriptionProductDetail,
                  quantityProductDetail, productsPriceProductDetail, productsSumProductDetail

    DIALOG ProductDetail OBJECT d
;

// ---------- Требование на сырье -------- //

FORM requestForMaterialsOrder 'Требование на сырье'

    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) nameProductsLegalEntityStockOrder, nameComponentsStockOrder, nameProductsStockOrder, numberOrder, seriesOrder, seriesNumberOrder,
                  dateOrder, timeOrder, fromDateOrder, toDateOrder

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail, shortNameUOMSkuComponentDetail,
                   idBarcodeSkuComponentDetail, quantityComponentDetail

    FILTERS orderComponentDetail(cd)==o

;
printRequestForMaterialsOrder 'Требование на сырье' (order) = ACTION FORM requestForMaterialsOrder OBJECTS o = order PRINT IMAGE 'print.png' IN print;
EXTEND FORM orders
    PROPERTIES(o) FORCE PANEL printRequestForMaterialsOrder
;
EXTEND DESIGN orders {printTab { ADD o.print {align = LEADING;}}}

//------------------------------------------ Опеределение операции для order ------------------------------------//

operationOrder = DATA Operation (Order) PERSISTENT;
nameOperationOrder 'Операция' = nameOperation(operationOrder(order));

operationProductDetail (d) = operationOrder(orderProductDetail(d));
nameOperationProductDetail 'Операция' (d)= nameOperation(operationProductDetail (d));

operationComponentDetail (d) = operationOrder(orderComponentDetail(d));
nameOperationComponentDetail 'Операция' (d)= nameOperation(operationComponentDetail (d));

EXTEND FORM order
    PROPERTIES(o) nameOperationOrder
;

EXTEND DESIGN order{
    o.documentHeader{
        NEW header1 {
            type = CONTAINERH; 
            ADD PROPERTY(isPostedOrder(o));
            ADD PROPERTY(nameOperationOrder(o));
        }
        NEW header2 {
            type = CONTAINERH; 
            ADD PROPERTY(nameNumeratorOrder(o));   
            ADD PROPERTY(numberOrder(o));  
            ADD PROPERTY(seriesOrder(o));  
            ADD PROPERTY(dateOrder(o));  
            ADD PROPERTY(timeOrder(o));  
        }        
    }
}
EXTEND FORM orders
    PROPERTIES(o) READONLY nameOperationOrder AFTER nameProductsStockOrder(o)
;

@defineDocumentOperationStock(order, components, 'Склад компонент');
@deriveDocumentOperationStock(order, components, order);
@defineDocumentOperationStock(order, products, 'Склад изделий');
@deriveDocumentOperationStock(order, products, order);

@defineDocumentOperationRole(order);

@defineDocumentHeaderPriceListType (operation, calcPriceListType, , ' (надбавка-изделие)');
@deriveDocumentOperationProperty(Order, calcPriceListType);

@defineDocumentHeaderPriceListType (operation, priceListType, products, ' (изделие)');
@deriveDocumentOperationProperty(Order, productsPriceListType);
@defineDocumentHeaderPriceListType (operation, priceListType, , ' (потребность)');
@deriveDocumentOperationProperty(Order, priceListType);

isVATOperation 'С НДС' = DATA BOOLEAN (Operation);
@deriveDocumentOperationProperty(Order, isVAT);
EXTEND FORM operation
     PROPERTIES(o) nameCalcPriceListTypeOperation, nameProductsPriceListTypeOperation, isVATOperation, namePriceListTypeOperation

 ;
EXTEND DESIGN operation {
    showContainer {
        ADD PROPERTY(nameCalcPriceListTypeOperation(o));
        ADD PROPERTY(nameProductsPriceListTypeOperation(o));
        ADD PROPERTY(isVATOperation(o));
        ADD PROPERTY(namePriceListTypeOperation(o));
    }
}