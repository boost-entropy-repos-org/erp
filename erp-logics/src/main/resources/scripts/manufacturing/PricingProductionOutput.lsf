MODULE  PricingProductionOutput;

REQUIRE ProductionOutput, Pricing;

NAMESPACE Production;
// ----------------  Расценка ------------------- //

@defineDocumentInterfaceHeaderPricingCommittee (output, stock);
@defineDocumentInterfaceProperty (output, createPricing, 'Создать акт расценки');

// Операция расценки
@defineDocumentInterfaceOperationPrefix (output, pricing, Pricing, ' (расценка)');

@defineDocumentInterfaceDetailPricePrefix(output, supplier, ' входная');
supplierPriceUserOutputDetail(detail) <- componentsPriceProductDetail(productDetailUserOutputDetail(detail))
    WHEN CHANGED(productDetailUserOutputDetail(detail));

@defineDocumentInterfaceDetailDataSumPrefix (output, supplier, ' входная');

@deriveDocumentDetailSumPrefix(userOutput, supplier, currency, quantity);

@defineDocumentHeaderSumCustomPrefix (output, outputDetail, supplier,' входная');

@defineDocumentInterfaceDetailPricePrefix(output, retail, ' выходная');
retailPriceUserOutputDetail(detail) <- priceProductDetail(productDetailUserOutputDetail(detail))
                  WHEN CHANGED(productDetailUserOutputDetail(detail));
@defineDocumentInterfaceDetailVAT(output, countryStock, retail, );
valueRetailVATUserOutputDetail(detail) <- valueVATProductDetail(productDetailUserOutputDetail(detail))
                  WHEN CHANGED(productDetailUserOutputDetail(detail));


@defineDocumentInterfaceDetailMarkupPrefix (output, retail, );
@defineDocumentInterfaceDetailDataSumPrefix (output, retail, ' выходная');
@deriveDocumentDetailSumPrefix(userOutput, retail, currency, quantity);

@defineDocumentInterfaceHeaderSumPrefix (output, retail, ' выходная');

@defineDocumentInterfaceDetailVATDataSumPrefix (output, retail, ' розничная');
@defineDocumentInterfaceDetailMarkupSumPrefix (output, retail);

VATMarkupSumUserOutputDetail 'НДС и надбавка' (userOutputDetail) =  retailSumUserOutputDetail(userOutputDetail) (-) supplierSumUserOutputDetail(userOutputDetail);

retailVATSumUserOutputDetail(userOutputDetail) <- roundPriceCurrency([= X*Y/(100+Y)](VATMarkupSumUserOutputDetail(userOutputDetail), valueRetailVATUserOutputDetail(userOutputDetail)), currencyUserOutputDetail(userOutputDetail))
        WHEN CHANGED(VATMarkupSumUserOutputDetail(userOutputDetail)) OR
             CHANGED(valueRetailVATUserOutputDetail(userOutputDetail)) OR
             CHANGED(currencyUserOutputDetail(userOutputDetail));

retailMarkupSumUserOutputDetail (userOutputDetail) <- VATMarkupSumUserOutputDetail(userOutputDetail) (-) retailVATSumUserOutputDetail(userOutputDetail)
        WHEN CHANGED(VATMarkupSumUserOutputDetail(userOutputDetail)) OR
             CHANGED(retailVATSumUserOutputDetail(userOutputDetail));

retailMarkupUserOutputDetail(userOutputDetail) <-[= round2(X*100/Y)](retailMarkupSumUserOutputDetail(userOutputDetail),supplierSumUserOutputDetail(userOutputDetail))
        WHEN CHANGED(retailMarkupSumUserOutputDetail(userOutputDetail)) OR
             CHANGED(supplierSumUserOutputDetail(userOutputDetail));

@defineDocumentInterfaceHeaderSumPrefix (output, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (output, retailVAT, ' НДС');

//-- агр.расценка на основе заказа
@defineDocumentHeaderProperty (order, createPricing, 'Создать акт расценки');
@defineDocumentOperationHeaderPrefix(order, pricing, Pricing, ' (расценка)');
@defineDocumentOperationDetailPrefix(order, productDetail, pricing, Pricing, ' (расценка)');
@defineDocumentOperationDetailPrefix(order, componentDetail, pricing, Pricing, ' (расценка)');

@defineOperationProperty(createPricing, 'Создать акт расценки', createContainer);
@deriveDocumentOperationProperty(Order, createPricing);
@defineDocumentOperationHeaderPrefix(operation, pricing, Pricing, ' (расценка)');
EXTEND FORM operation
    PROPERTIES(o)namePricingOperationOperation AFTER createPricingOperation(o)
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(namePricingOperationOperation(o));
    }
}

backgroundRetailOrder 'Цвет' (order) = RGB(224, 255, 255) IF order IS Order;

@defineDocumentHeaderPricingCommittee(order, productsStock, );

//-- Свойства для агрегированных производств/расценок

componentsSumProductDetail 'Сумма компонентов произведенного изделия' (productDetail) = NUMERIC[16,2](roundPriceCurrency((componentsPriceProductDetail(productDetail)*outputQuantityProductDetail(productDetail)),currencyProductDetail(productDetail)));
costSumProductDetail 'Сумма себестоимости произведенного изделия' (productDetail) = NUMERIC[16,2](roundPriceCurrency((costPriceProductDetail(productDetail)*outputQuantityProductDetail(productDetail)),currencyProductDetail(productDetail)));
VATMarkupSumProductDetail 'НДС и надбавка' (productDetail) =  NUMERIC[16,2](outputProductsSumProductDetail(productDetail) (-) componentsSumProductDetail(productDetail));
retailVATSumProductDetail 'Сумма НДС' (productDetail) = NUMERIC[16,2](roundPriceCurrency([= X*Y/(100+Y)](VATMarkupSumProductDetail(productDetail), valueVATProductDetail(productDetail)), currencyProductDetail(productDetail)));
retailMarkupSumProductDetail 'Сумма надбавки' (productDetail) = NUMERIC[16,2](VATMarkupSumProductDetail(productDetail) (-) retailVATSumProductDetail(productDetail));
retailMarkupProductDetail 'Надбавка, %'(productDetail) = NUMERIC[8,3]([= round2(X*100/Y)](retailMarkupSumProductDetail(productDetail), componentsSumProductDetail(productDetail)));

//--  если стоит галочка isVATOrder
retVATSumProductDetail 'Сумма НДС' (productDetail) = NUMERIC[16,2](roundPriceCurrency([= X*Y/(100+Y)](outputProductsSumProductDetail(productDetail), valueVATProductDetail(productDetail)), currencyProductDetail(productDetail)));
retMarkupSumProductDetail 'Сумма надбавки' (productDetail) = NUMERIC[16,2](roundPriceCurrency(outputProductsSumProductDetail(productDetail) (-) retVATSumProductDetail(productDetail) (-) componentsSumProductDetail(productDetail), currencyProductDetail(productDetail)));
retMarkupProductDetail 'Надбавка, %'(productDetail) = NUMERIC[8,3]([= round2(X*100/Y)](retMarkupSumProductDetail(productDetail), componentsSumProductDetail(productDetail)));

overVATSumProductDetail 'Сумма НДС' (d) = IF addVATProductDetail(d) THEN retVATSumProductDetail(d) ELSE retailVATSumProductDetail(d);
overMarkupSumProductDetail 'Сумма надбавки' (d) = IF addVATProductDetail(d) THEN retMarkupSumProductDetail(d) ELSE retailMarkupSumProductDetail(d);
overMarkupProductDetail 'Надбавка, %' (d) = IF addVATProductDetail(d) THEN retMarkupProductDetail(d) ELSE retailMarkupProductDetail(d);

pricingCommitteeOutput(output) += pricingCommitteeOrder(orderOrderOutput(output));
createPricingOutput(output) += createPricingOrder(orderOrderOutput(output));
pricingOperationOutput(output) += pricingOperationOrder(orderOrderOutput(output));


//переопределение цены поставщика по производственному заказу
@defineOperationProperty(componentsPriceSupplierPriceLedger, 'Цена пост. из цены компонентов' , showContainer);

componentsPriceSupplierPriceLedgerOrder 'Цена пост. из цены компонентов' = DATA BOOLEAN (Order);
componentsPriceSupplierPriceLedgerOutputDetail = componentsPriceSupplierPriceLedgerOrder(orderProductDetail(productDetailOrderOutputDetail(outputDetail)));

@deriveDocumentOperationProperty(order, componentsPriceSupplierPriceLedger);

EXTEND FORM order
    PROPERTIES (o) componentsPriceSupplierPriceLedgerOrder
;    

DESIGN order {
    headerExtraParams {
        MOVE PROPERTY(componentsPriceSupplierPriceLedgerOrder(o));
    }    
}

supplierPriceOutputDetail(outputDetail) += 
    IF componentsPriceSupplierPriceLedgerOutputDetail(outputDetail) 
        THEN componentsPriceProductDetail(productDetailOrderOutputDetail(outputDetail))
        ELSE costPriceProductDetail(productDetailOrderOutputDetail(outputDetail));
        
supplierSumOutputDetail(outputDetail) += 
    IF componentsPriceSupplierPriceLedgerOutputDetail(outputDetail) 
        THEN componentsSumProductDetail(productDetailOrderOutputDetail(outputDetail))
        ELSE costSumProductDetail(productDetailOrderOutputDetail(outputDetail));

valueRetailVATOutputDetail(outputDetail) += valueVATProductDetail(productDetailOrderOutputDetail(outputDetail));
retailMarkupOutputDetail(outputDetail) += overMarkupProductDetail(productDetailOrderOutputDetail(outputDetail));
retailVATSumOutputDetail(outputDetail)+= overVATSumProductDetail(productDetailOrderOutputDetail(outputDetail));
retailMarkupSumOutputDetail(outputDetail) += overMarkupSumProductDetail(productDetailOrderOutputDetail(outputDetail));
retailPriceOutputDetail(outputDetail) += priceProductDetail(productDetailOrderOutputDetail(outputDetail));
retailSumOutputDetail(outputDetail) += outputProductsSumProductDetail(productDetailOrderOutputDetail(outputDetail));

EXTEND FORM order
    PROPERTIES(o)  BACKGROUND backgroundRetailOrder(o) createPricingOrder, namePricingOperationOrder SHOWIF createPricingOrder(o),
                   namePricingCommitteeOrder SHOWIF createPricingOrder(o)
    PROPERTIES(pd) BACKGROUND backgroundRetailOrder(o) SHOWIF createPricingOrder(o) READONLY BEFORE outputProductsSumProductDetail(pd)
                   componentsSumProductDetail, overMarkupProductDetail, overMarkupSumProductDetail, overVATSumProductDetail
;
DESIGN order {
    headerRow1 {
        NEW headerRow13 BEFORE headerRow12 {
            caption = 'Расценка';
            type = CONTAINERH;
            MOVE PROPERTY(createPricingOrder(o));
            MOVE PROPERTY(namePricingOperationOrder(o));
            MOVE PROPERTY(namePricingCommitteeOrder(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(pd) BACKGROUND backgroundRetailOrder(o) SHOWIF createPricingOrder(o) READONLY BEFORE outputProductsSumProductDetail(pd)
                   componentsSumProductDetail, overMarkupProductDetail, overMarkupSumProductDetail, overVATSumProductDetail
;


//-- агр.расценка на основе производства

backgroundRetailOutput 'Цвет' (output) = RGB(224, 255, 255) IF output IS Output;

EXTEND FORM userOutput
    PROPERTIES(o)  BACKGROUND backgroundRetailOutput(o) createPricingUserOutput, namePricingOperationUserOutput SHOWIF createPricingUserOutput(o),
                   namePricingCommitteeUserOutput SHOWIF createPricingUserOutput(o)

    PROPERTIES (d) BEFORE deleted SHOWIF createPricingUserOutput(o) BACKGROUND backgroundRetailOutput(o)
                   supplierPriceUserOutputDetail, supplierSumUserOutputDetail, retailMarkupUserOutputDetail, retailMarkupSumUserOutputDetail,
                   valueRetailVATUserOutputDetail, retailVATSumUserOutputDetail, retailPriceUserOutputDetail, retailSumUserOutputDetail
;
DESIGN userOutput {
    headerRow12 {
        NEW headerRow121 BEFORE headerRow122 {
            caption = 'Расценка';
            type = CONTAINERH;
            MOVE PROPERTY(createPricingUserOutput(o));
            MOVE PROPERTY(namePricingOperationUserOutput(o));
            MOVE PROPERTY(namePricingCommitteeUserOutput(o));
        }
    }
}

EXTEND FORM outputs
    PROPERTIES(d) READONLY SHOWIF createPricingOutput(o) BACKGROUND backgroundRetailOutput(o) supplierPriceOutputDetail, supplierSumOutputDetail, retailMarkupOutputDetail, retailMarkupSumOutputDetail,
                  valueRetailVATOutputDetail, retailVATSumOutputDetail, retailPriceOutputDetail, retailSumOutputDetail
;

CLASS OutputPricing 'Акт расценки на основе производства' : Pricing;
CLASS OutputPricingDetail 'Строка акта расценки на основе производства' : PricingDetail;

@defineDocumentTables(outputPricing);

@defineDocumentAggregation(output, outputPricing, createPricing);

printPricingOutput 'Акт расценки' (output) = ACTION printPricing(outputPricingOutput(output)) IMAGE 'print.png' IN print;
EXTEND FORM outputs
    PROPERTIES(o) FORCE PANEL printPricingOutput SHOWIF createPricingOutput(o)
;
DESIGN outputs {printTab { MOVE o.print {align = LEADING;}}}

pricingPricingDetail(detail) += outputPricingOutputPricingDetail(detail);

indexPricingDetail(detail) += indexOutputPricingDetail(detail);

datePricing(pricing) += dateOutputPricing(pricing);
timePricing(pricing) += timeOutputPricing(pricing);


departmentStorePricing(pricing) += stockOutput(outputOutputPricing(pricing)) AS DepartmentStore;
dataDepartmentStorePricingDetail(pricingDetail) += stockOutput(outputOutputPricing(outputPricingOutputPricingDetail(pricingDetail))) AS DepartmentStore;

supplierPricing(pricing) += legalEntityStockOutput(outputOutputPricing(pricing));

@defineDocumentAggregationPosted(output, outputPricing);
isPostedPricing(pricing) += isPostedOutputPricing(pricing);

@defineDocumentAggregationClosed(output, outputPricing);
isClosedPricing(pricing) += isClosedOutputPricing(pricing);

numberOutputPricing 'Номер документа' (outputPricing) = numberOutput(outputOutputPricing(outputPricing));
numberPricing(pricing) += numberOutputPricing(pricing);
seriesOutputPricing 'Серия документа' (outputPricing) = seriesOutput(outputOutputPricing(outputPricing));
seriesPricing(pricing) += seriesOutputPricing(pricing);
seriesNumberOutputPricing 'Серия/номер документа' (outputPricing) = seriesNumberOutput(outputOutputPricing(outputPricing));


notePricing(pricing) += noteOutput(outputOutputPricing(pricing));
currencyPricing (pricing) += currencyOutput(outputOutputPricing(pricing));
pricingCommitteePricing(pricing) += pricingCommitteeOutput(outputOutputPricing(pricing));
operationPricing(pricing) += pricingOperationOutput(outputOutputPricing(pricing));

@defineDocumentDescription(outputPricing, OutputPricingDetail, 'Акт расценки на основе производства');
descriptionPricing (pricing) += descriptionOutputPricing(pricing);

skuPricingDetail(pricingDetail) += skuOutputDetail(outputDetailOutputPricingDetail(pricingDetail));
batchPricingDetail(pricingDetail) += outputDetailOutputPricingDetail(pricingDetail);
quantityPricingDetail(pricingDetail) += quantityOutputDetail(outputDetailOutputPricingDetail(pricingDetail));

//-------------------------- Ценовые характеристики------------------------------------------
@defineDocumentAggregationDetailProperty (output, outputPricing, supplierPrice, 'Цена входная');
pricePricingDetail(pricingDetail) += supplierPriceOutputPricingDetail(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, supplierSum, 'Сумма входная');
sumPricingDetail(pricingDetail) += supplierSumOutputPricingDetail(pricingDetail);

@defineDocumentAggregationDetailProperty (output, outputPricing, retailPrice, 'Цена выходная');
retailPricePricingDetail(pricingDetail) += retailPriceOutputPricingDetail(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, retailSum, 'Сумма выходная');
retailSumPricingDetail(pricingDetail) += retailSumOutputPricingDetail(pricingDetail);

@defineDocumentAggregationDetailProperty (output, outputPricing, retailMarkup, 'Надбавка');
retailMarkupPricingDetail(pricingDetail) += retailMarkupOutputPricingDetail(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, retailMarkupSum, 'Сумма надбавки');
retailMarkupSumPricingDetail(pricingDetail) += retailMarkupSumOutputPricingDetail(pricingDetail);

@defineDocumentAggregationDetailProperty (output, outputPricing, valueRetailVAT, 'НДС,%');      // пока только значение ставки, без самой шкалы.!!!!!
valueRetailVATPricingDetail(pricingDetail) += valueRetailVATOutputPricingDetail(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, retailVATSum, 'Сумма НДС');
retailVATSumPricingDetail(pricingDetail) += retailVATSumOutputPricingDetail(pricingDetail);

editPricingDetail (d)+= ACTION editOutputDetail(outputDetailOutputPricingDetail(d));

editPricing (p)+= ACTION editOutput(outputOutputPricing(p));
//--
quantityOutputOutputPricing (output, outputPricing) = GROUP SUM quantityOutputDetail(outputDetailOutputPricingDetail(detail)) BY outputOutputDetail(outputDetailOutputPricingDetail(detail)), outputPricingOutputPricingDetail(detail);

outputsOutputPricing 'Документы производства' (outputPricing) = GROUP CONCAT VARSTRING[255](descriptionOutput(output)) IF quantityOutputOutputPricing (output, outputPricing) , ', '
                                                BY outputPricing
                                                ORDER output MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;
//descriptionDocumentPricing(pricing) += outputsOutputPricing(pricing);
//EXTEND FORM pricings
//    PROPERTIES(p)  outputsOutputPricing
//;

printPricingOrder 'Акт расценки' (order) = ACTION printPricingOutput(orderOutputOrder(order)) IMAGE 'print.png' IN print;

EXTEND FORM orders
    PROPERTIES(o) FORCE PANEL printPricingOrder SHOWIF createPricingOrder(o)
;
DESIGN orders {printTab { MOVE o.print {align = LEADING;}}}



