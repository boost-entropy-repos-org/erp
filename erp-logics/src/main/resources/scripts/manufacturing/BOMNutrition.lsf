MODULE BOMNutrition;

REQUIRE BOM, ItemNutrition;


// ------------------------------------------------------------------- //
GROUP nutrition 'Энергетическая ценность' : base;

showNutritionBOM 'Отображать энергетическую ценность' = DATA BOOLEAN(BOM) IN documentPrmGroup;

recipesBOM 'Номер по сборнику рецептов' = DATA VARSTRING[100] (BOM) IN documentPrmGroup;
recipesProduct 'Номер по сборнику рецептов' (product) = recipesBOM(BOMProduct(product));

// Энергетическая ценность компонент

fatsComponent 'Жиры' = DATA NUMERIC[8,2] (Component);
carbohydratesComponent 'Углеводы' = DATA NUMERIC[8,2] (Component);
proteinsComponent 'Белки' = DATA NUMERIC[8,2] (Component);
energyComponent 'Энерг.ценность' = DATA NUMERIC[8,2] (Component);

fatsComponent(component) <- fatsItem(materialComponent(component))*10*netWeightItem(materialComponent(component))*nettoQuantityComponent(component)
        WHEN CHANGED (materialComponent(component)) OR
             CHANGED (nettoQuantityComponent(component));
carbohydratesComponent(component) <- carbohydratesItem(materialComponent(component))*10*netWeightItem(materialComponent(component))*nettoQuantityComponent(component)
        WHEN CHANGED (materialComponent(component)) OR
             CHANGED (nettoQuantityComponent(component));
proteinsComponent(component) <- proteinsItem(materialComponent(component))*10*netWeightItem(materialComponent(component))*nettoQuantityComponent(component)
        WHEN CHANGED (materialComponent(component)) OR
             CHANGED (nettoQuantityComponent(component));
energyComponent(component) <- energyItem(materialComponent(component))*10*netWeightItem(materialComponent(component))*nettoQuantityComponent(component)
        WHEN CHANGED (materialComponent(component)) OR
             CHANGED (nettoQuantityComponent(component));

// Энергетическая ценность спецификации

fatsBOM 'Жиры'(BOM) = GROUP SUM fatsComponent(component) BY BOMComponent(component) IN nutrition;
carbohydratesBOM 'Углеводы'(BOM) = GROUP SUM carbohydratesComponent(component) BY BOMComponent(component) IN nutrition;
proteinsBOM 'Белки'(BOM) = GROUP SUM proteinsComponent(component) BY BOMComponent(component) IN nutrition;
energyBOM 'Энерг.ценность'(BOM) = GROUP SUM energyComponent(component) BY BOMComponent(component) IN nutrition;

// Энергетическая ценность изделий

fastProduct 'Жиры (ед.)' = DATA NUMERIC[8,2] (Product);
carbohydratesProduct 'Углеводы (ед.)' = DATA NUMERIC[8,2] (Product);
proteinsProduct 'Белки (ед.)' = DATA NUMERIC[8,2] (Product);
energyProduct 'Энерг.ценность (ед.)' = DATA NUMERIC[8,2] (Product);
productYieldProduct 'Выход' = DATA VARSTRING[100] (Product) MINCHARWIDTH 20 PREFCHARWIDTH 20;

fastProduct(product) <- fatsBOM(BOMProduct(product)) / (quantityProduct(product)*10*netWeightItem(skuProduct(product)))
        WHEN CHANGED (fatsBOM(BOMProduct(product))) OR
             CHANGED (quantityProduct(product)) OR
             CHANGED (skuProduct(product));
carbohydratesProduct(product) <- carbohydratesBOM(BOMProduct(product)) / (quantityProduct(product)*10*netWeightItem(skuProduct(product)))
        WHEN CHANGED (carbohydratesBOM(BOMProduct(product))) OR
             CHANGED (quantityProduct(product)) OR
             CHANGED (skuProduct(product));
proteinsProduct(product) <- proteinsBOM(BOMProduct(product)) / (quantityProduct(product)*10*netWeightItem(skuProduct(product)))
        WHEN CHANGED (proteinsBOM(BOMProduct(product))) OR
             CHANGED (quantityProduct(product)) OR
             CHANGED (skuProduct(product));
energyProduct(product) <- energyBOM(BOMProduct(product)) / (quantityProduct(product)*10*netWeightItem(skuProduct(product)))
        WHEN CHANGED (energyBOM(BOMProduct(product))) OR
             CHANGED (quantityProduct(product)) OR
             CHANGED (skuProduct(product));

compositionProduct 'Состав' = DATA VARSTRING[255] (Product) MINCHARWIDTH 30 PREFCHARWIDTH 50;
componentsProduct 'Компоненты' (product)= componentsBOM(BOMProduct(product));
compositionProduct(product) <- componentsProduct(product) WHEN CHANGED(componentsProduct(product));

changeCompositionProduct 'Записать в товар' = ACTION (product) {
    FOR skuProduct(product) == item DO {
        ASSIGN compositionItem(item) <- compositionProduct(product);
    }
} SHORTCUT compositionProduct;


// Расширяем формы
EXTEND FORM BOM
    PROPERTIES(b) showNutritionBOM
    PROPERTIES(b) SHOWIF showNutritionBOM(b) READONLY fatsBOM, carbohydratesBOM, proteinsBOM, energyBOM
    PROPERTIES(b) SHOWIF showNutritionBOM(b) recipesBOM
    PROPERTIES(p) SHOWIF showNutritionBOM(b) BEFORE deletep fastProduct, carbohydratesProduct, proteinsProduct, energyProduct, compositionProduct, changeCompositionProduct, productYieldProduct
    PROPERTIES(c) SHOWIF showNutritionBOM(b) BEFORE deletec fatsComponent, carbohydratesComponent, proteinsComponent, energyComponent
;

EXTEND DESIGN BOM {
    b.box {
        ADD b.nutrition;
    }
    kitchen {
        ADD PROPERTY(showNutritionBOM);
        ADD PROPERTY(recipesBOM);
    }
}
EXTEND FORM BOMs
    PROPERTIES(b) showNutritionBOM
    PROPERTIES(b) SHOWIF showNutritionBOM(b) READONLY fatsBOM, carbohydratesBOM, proteinsBOM, energyBOM, recipesBOM
    PROPERTIES(p) SHOWIF showNutritionBOM(b) READONLY fastProduct, carbohydratesProduct, proteinsProduct, energyProduct, compositionProduct, productYieldProduct
    PROPERTIES(c) SHOWIF showNutritionBOM(b) READONLY fatsComponent, carbohydratesComponent, proteinsComponent, energyComponent
;

