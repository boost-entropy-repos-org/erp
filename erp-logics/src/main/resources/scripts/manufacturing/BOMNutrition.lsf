MODULE BOMNutrition;

REQUIRE BOM, ItemNutrition;


// ------------------------------------------------------------------- //
GROUP nutrition 'Энергетическая ценность' : base;

showNutrition 'Отображать энергетическую ценность' = DATA BOOLEAN(BOM) IN documentPrm;

recipes 'Номер по сборнику рецептов' = DATA VARSTRING[100] (BOM) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 20;
recipes 'Номер по сборнику рецептов' (Product product) = recipes(BOM(product));

// Энергетическая ценность компонент

META changeNutrition(object, skuProp, property)
    change###property(###object object)  = ACTION {
        REQUEST  NUMERIC[8,2] INPUT ;
        IF requestedNumeric() THEN {
            property(Item item) <- requestedNumeric() WHERE item == skuProp(object);
        } ELSE {
            property(Item item) <- NULL WHERE item == skuProp(object);
        }    
    };
END

fats 'Жиры на 100г, г' = fats[Item](overSku(Component c));
carbohydrates 'Углеводы 100г, г' = carbohydrates[Item](overSku(Component c));
proteins 'Белки 100г, г' = proteins[Item](overSku(Component c));
energy 'Энерг.ценность на 100г, ккал' = energy[Item](overSku(Component c));

@changeNutrition(component, overSku, fats);
@changeNutrition(component, overSku, carbohydrates);
@changeNutrition(component, overSku, proteins);
@changeNutrition(component, overSku, energy);

// Энергетическая ценность спецификации

fats 'Жиры'(BOM) = GROUP SUM fats(Component component) BY BOM(component) IN nutrition;
carbohydrates 'Углеводы'(BOM) = GROUP SUM carbohydrates(Component component) BY BOM(component) IN nutrition;
proteins 'Белки'(BOM) = GROUP SUM proteins(Component component) BY BOM(component) IN nutrition;
energy 'Энерг.ценность'(BOM) = GROUP SUM energy(Component component) BY BOM(component) IN nutrition;

// Энергетическая ценность изделий

fats 'Жиры 100г, г' =  DATA NUMERIC[8,2](Product);
carbohydrates 'Углеводы 100г, г' = DATA NUMERIC[8,2](Product);
proteins 'Белки 100г, г' = DATA NUMERIC[8,2](Product);
energy 'Энерг.ценность на 100г, ккал' = DATA NUMERIC[8,2](Product);
productYield 'Выход' = DATA VARSTRING[100] (Product) MINCHARWIDTH 20 PREFCHARWIDTH 20;

//@changeNutrition(product, sku, fats){
//    changeFatsProduct  = ACTION (product) {
//        REQUEST  NUMERIC[8,2] INPUT ;
//        IF requestedNumeric() THEN {
//            fatsItem(item) <- requestedNumeric() WHERE item == skuProduct(product);
//        } ELSE {
//            fatsItem(item) <- NULL WHERE item == skuProduct(product);
//        }    
//    };
//};
//@changeNutrition(product, sku, carbohydrates){
//    changeCarbohydratesProduct  = ACTION (product) {
//        REQUEST  NUMERIC[8,2] INPUT ;
//        IF requestedNumeric() THEN {
//            carbohydratesItem(item) <- requestedNumeric() WHERE item == skuProduct(product);
//        } ELSE {
//            carbohydratesItem(item) <- NULL WHERE item == skuProduct(product);
//        }    
//    };
//};
//@changeNutrition(product, sku, proteins){
//    changeProteinsProduct  = ACTION (product) {
//        REQUEST  NUMERIC[8,2] INPUT ;
//        IF requestedNumeric() THEN {
//            proteinsItem(item) <- requestedNumeric() WHERE item == skuProduct(product);
//        } ELSE {
//            proteinsItem(item) <- NULL WHERE item == skuProduct(product);
//        }    
//    };
//};
//@changeNutrition(product, sku, energy){
//    changeEnergyProduct  = ACTION (product) {
//        REQUEST  NUMERIC[8,2] INPUT ;
//        IF requestedNumeric() THEN {
//            energyItem(item) <- requestedNumeric() WHERE item == skuProduct(product);
//        } ELSE {
//            energyItem(item) <- NULL WHERE item == skuProduct(product);
//        }    
//    };
//};

composition 'Состав' = DATA VARSTRING[2550] (Product) MINCHARWIDTH 30 PREFCHARWIDTH 50;
components 'Компоненты' (Product product)= components(BOM(product));
composition(Product product) <- components(product) WHEN CHANGED(components(product));

changeComposition 'Записать в товар'(Product product) = ACTION {
    FOR sku(product) == Sku item DO {
        ASSIGN composition[Item](item) <- composition(product);
    }
} SHORTCUT composition[Product];

//------------------------------- СТБ -------------------------------------//
CLASS StateStandart 'СТБ';
TABLE stateStandart (StateStandart);
  
name 'Наименование' = DATA VARISTRING[100](StateStandart);
number 'Номер' = DATA STRING[50](StateStandart);   
note 'Примечание' = DATA STRING[250](StateStandart);  
@defineExternalizable(stateStandart, VARSTRING[100]); 
 
FORM stateStandart 'СТБ'
    OBJECTS s=StateStandart FIXED PANEL
    PROPERTIES(s) id SHOWIF  showIDs(), name, number, note 
    EDIT StateStandart OBJECT s
;

DESIGN stateStandart {
    main{
        PROPERTY(name(s)){
            preferredCharWidth = 50;    
        }
    }       
}

FORM stateStandarts 'СТБ'
    OBJECTS s=StateStandart
    PROPERTIES(s) id READONLY SHOWIF showIDs(), name READONLY, number READONLY , note, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(s) ADDFORM, EDITFORM
    ORDER BY number(s)
    DIALOG StateStandart OBJECT s
;
DESIGN stateStandarts { main{ preferredSize = (600, 400); } } 

stateStandart= DATA StateStandart (BOM);
numberStateStandart 'СТБ' (BOM BOM) = number(stateStandart(BOM));
numberStateStandart 'СТБ' (Product p) = numberStateStandart(BOM(p));

// Расширяем формы
EXTEND FORM BOM
    PROPERTIES(b) showNutrition
    PROPERTIES(b) recipes, numberStateStandart //SHOWIF showNutritionBOM(b)
    PROPERTIES(p) SHOWIF showNutrition(b) BEFORE deletep 
                  fats,// ON CHANGE changeFatsProduct(p), 
                  carbohydrates,// ON CHANGE changeCarbohydratesProduct(p), 
                  proteins,// ON CHANGE changeProteinsProduct(p), 
                  energy,// ON CHANGE changeEnergyProduct(p), 
                  composition, productYield
    PROPERTIES(c) BACKGROUND background(c)SHOWIF showNutrition(b) BEFORE deletec fats ON CHANGE changeFats(c), carbohydrates ON CHANGE changeCarbohydrates(c), 
                  proteins ON CHANGE changeProteins(c), energy ON CHANGE changeEnergy(c)
;

DESIGN BOM {
//    b.box {
//        ADD b.nutrition {type = CONTAINERV;}
//    }
    kitchen {
        MOVE PROPERTY(showNutrition(b));
        MOVE PROPERTY(recipes(b));
        MOVE PROPERTY(numberStateStandart(b)); 
    }
}
EXTEND FORM BOMs
    PROPERTIES(b) READONLY BACKGROUND background(b) showNutrition
    PROPERTIES(p) SHOWIF showNutrition(b) READONLY fats, carbohydrates, proteins, energy, composition, productYield
    PROPERTIES(c) SHOWIF showNutrition(b) BACKGROUND background(c) READONLY fats, carbohydrates, proteins, energy
    
    PROPERTIES(p1) FORCE GRID fats, carbohydrates, proteins, energy
    PROPERTIES(c2) FORCE GRID fats, carbohydrates, proteins, energy
;
EXTEND FORM BOMsDialog
    PROPERTIES(b) READONLY BACKGROUND background(b) showNutrition
    PROPERTIES(p) SHOWIF showNutrition(b) READONLY fats, carbohydrates, proteins, energy, composition, productYield
    PROPERTIES(c) SHOWIF showNutrition(b) BACKGROUND background(c) READONLY fats, carbohydrates, proteins, energy
    
;

