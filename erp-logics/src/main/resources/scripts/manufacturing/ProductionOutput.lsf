MODULE  ProductionOutput;

REQUIRE ProductionOrder, StockDocumentSkuLedger;

NAMESPACE Production;

// ---------------- Производство ------------------- //

CLASS ABSTRACT Output 'Производство' : Document;
CLASS ABSTRACT OutputDetail 'Строка производства' : DocumentDetail;

CLASS UserOutput 'Производство (польз.)': Output;
CLASS UserOutputDetail 'Строка производства (польз.)' : OutputDetail;

@defineDocumentInterface(output);
@deriveDocumentHeaderTimePrefix(UserOutput, );

@defineDocumentInterfaceNumber(output);
@defineNumeratedDefault(UserOutput, 'Производство', 'НП');

@defineDocumentInterfaceStock(output, stock, 'Склад', );
@defineDocumentDialogStocks(userOutput, stock, company, , );
@defineDocumentInterfacePosted(output);
@defineDocumentInterfaceClosed(output);
@defineDocumentClosedConstraint(UserOutput);
@defineDocumentInterfaceDescription(output, 'Производство');

@defineDocumentInterfaceCurrency(output);
@deriveDocumentCurrency(userOutput, stock);

@defineDocumentInterfacePriceListType(output); // объявляем вид цены
priceListTypeUserOutputDetail(detail) <- priceListTypeUserOutput(userOutputUserOutputDetail(detail))
        WHEN CHANGED(priceListTypeUserOutput(userOutputUserOutputDetail(detail)));

@defineDocumentInterfaceDetailSku(output, sku);

CONSTRAINT skuUserOutputDetail(d) AND NOT isProductGroupSku(skuUserOutputDetail(d)) CHECKED  BY skuUserOutputDetail
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';

@defineDocumentInterfaceDetailQuantity(output);

@defineDocumentInterfaceDetailPrice(output); // объявляем цену. Записываем цену: см ниже.

// суммма
@defineDocumentInterfaceDetailDataSum(output);
@deriveDocumentDetailSum(userOutput, quantity);

// сроки годности
expiryDateOutputDetail 'Годен до'= ABSTRACT DATE (OutputDetail);
expiryDateUserOutputDetail 'Годен до'= DATA DATE (UserOutputDetail);
expiryDateOutputDetail(outputDetail) += expiryDateUserOutputDetail (outputDetail);

// кол-во в шапке документа
@defineDocumentInterfaceHeaderQuantity(output);
@defineDocumentHeaderSkuQuantity(output, sku);

@defineDocumentHeaderSkuQuantity(userOutput, sku);
@defineDocumentInterfaceHeaderSum(output);

@defineDocumentHeaderItemSum(output, , );
@defineDocumentHeaderItemSum(userOutput, , );

@defineAddDetailDialogSkuStock(userOutput, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userOutput, sku);

editOutput 'Редактировать' = ABSTRACT ACTION LIST (Output) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

// Подбор документа
@implementDocument(output);
supplierStockDocument(output) += stockOutput(output);
editStockDocumentLedger(l) += ACTION editOutput(l);

//--  Связь заказа и акта производства

GROUP order 'Информация о заказе' : public;

productDetailOutputDetail = ABSTRACT ProductDetail (OutputDetail) PERSISTENT;
productDetailUserOutputDetail = DATA ProductDetail (UserOutputDetail);
productDetailOutputDetail(outputDetail) += productDetailUserOutputDetail(outputDetail);

CONSTRAINT stockOutputDetail(detail) != productsStockProductDetail(productDetailUserOutputDetail(detail)) OR
           skuOutputDetail(detail) != skuProductDetail(productDetailUserOutputDetail(detail))
    CHECKED BY productDetailUserOutputDetail
        MESSAGE 'Склад ГП и товар в производстве и производственном заказе должны соответствовать друг другу';


descriptionIndexProductDetailOutputDetail 'Строка изделия' (detail) = descriptionIndexProductDetail(productDetailOutputDetail(detail));
descriptionIndexProductDetailUserOutputDetail 'Строка изделия' (detail) = descriptionIndexProductDetail(productDetailUserOutputDetail(detail));

quantityOutputDetailOrderOutput (order, output) = GROUP SUM quantityOutputDetail(outputDetail) BY orderProductDetail(productDetailOutputDetail(outputDetail)), outputOutputDetail(outputDetail);

ordersOutput 'Заказы' (output) = GROUP CONCAT VARSTRING[255](descriptionOrder(order)) IF quantityOutputDetailOrderOutput(order, output) , ', '
                                                BY output
                                                ORDER order IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

outputProductDetail 'Кол-во (произведено)' (productDetail) = GROUP SUM quantityOutputDetail(outputDetail) IF isPostedOutputDetail(outputDetail)
                                                                   BY productDetailOutputDetail(outputDetail) PERSISTENT;

toOutputProductDetail 'Не произведено' (productDetail) = quantityProductDetail (productDetail) (-) outputProductDetail(productDetail);

toOutputProductDetailOrder 'Не прозиведено по заказу' (order) =
    GROUP SUM toOutputProductDetail(productDetail) IF toOutputProductDetail(productDetail) > 0
          BY orderProductDetail(productDetail);

EXTEND FORM productDetails
    PROPERTIES(d) READONLY toOutputProductDetail
;
DESIGN productDetails {
    main {
        PROPERTY(toOutputProductDetail(d)) { background = #FFFFCC; }
    }
}

priceUserOutputDetail(detail) <- IF priceListTypeUserOutputDetail(detail) THEN
                                    prevPriceBPriceListTypeSkuStockDateTime(priceListTypeUserOutputDetail(detail),
                                                                            skuUserOutputDetail(detail),
                                                                            stockUserOutputDetail(detail),
                                                                            dateTimeUserOutputDetail(detail))
                                    ELSE priceProductDetail(productDetailUserOutputDetail(detail))
    WHEN CHANGED(priceListTypeUserOutputDetail(detail)) OR
         CHANGED(skuUserOutputDetail(detail)) OR
         CHANGED(stockUserOutputDetail(detail)) OR
         CHANGED(dateTimeUserOutputDetail(detail)) OR
         CHANGED(productDetailUserOutputDetail(detail));

// -- Заполнение на основе производственных заказов ---- //

FORM outputOrders 'Производственные заказы'

    OBJECTS s = Stock FIXED PANEL

    OBJECTS o = Order
    PROPERTIES(o) READONLY isPostedOrder FORCE GRID, numberOrder, seriesOrder, dateOrder, timeOrder,
                  nameComponentsStockOrder, nameProductsStockOrder, fromDateOrder, toDateOrder, quantityProductDetailOrder,
                  sumProductDetailOrder,
                  nameCalcPriceListTypeOrder, namePriceListTypeOrder, noteOrder
    FILTERS isPostedOrder(o),
            componentsStockOrder(o) == s,
            toOutputProductDetailOrder(o)

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, markupProductDetail, priceProductDetail, sumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, quantityComponentDetail
    FILTERS orderComponentDetail(cd)==o
;

DESIGN outputOrders {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            MOVE o.box;
            NEW documentDetail {
                fill = 1;
                type = TABBED;
                MOVE pd.box {
                    caption = 'Изделия';
                }
                MOVE cd.box {
                    caption = 'Компоненты';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
}

fillOrderUserOutput 'Заполнить на основе производственного заказа' =  ACTION (userOutput) {
    FORM outputOrders OBJECTS s = stockUserOutput(userOutput) MODAL;

    IF formResult() == FormResult.ok THEN {
        LOCAL productionOrder = Order();
        ASSIGN productionOrder() <- chosenObject('o');

        FOR orderProductDetail(productDetail) == productionOrder() ADDOBJ d = UserOutputDetail DO {
            ASSIGN userOutputUserOutputDetail(d) <- userOutput;
            ASSIGN productDetailUserOutputDetail(d) <- productDetail;
            ASSIGN skuUserOutputDetail(d) <- skuProductDetail(productDetail);
            ASSIGN quantityUserOutputDetail (d) <- toOutputProductDetail(productDetail);              // возможно надо quantityProductDetail   ?
        }
    }
} IN order;

// Товарный отчет
@implementStockDocumentLedgerInc(Output, stock);
typeStockDocumentLedger(l) += 'Производство' IF l IS Output;
sumItemIncStockDocumentLedger (ledger) += sumItemOutputDetailOutput(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerOutputDetailOutput(ledger);

// Проводим по регистру
overCostPriceOutputDetail = ABSTRACT NUMERIC[14,2] (OutputDetail);
costPriceOutputDetail(d) = OVERRIDE priceOutputDetail(d), overCostPriceOutputDetail(d);

@implementBatch(OutputDetail, sku, stock, costPrice);
quantityBatch (ledger) += quantityOutputDetail(ledger);
expiryDateBatch (ledger) += OVERRIDE expiryDateProductDetail(productDetailOutputDetail(ledger)), expiryDateOutputDetail(ledger);
manufactureDateBatch (ledger) += manufactureDateProductDetail(productDetailOutputDetail(ledger));
sumInSkuLedger (ledger) += sumOutputDetail(ledger);
seriesBatch (ledger) += seriesOutput(outputOutputDetail(ledger));
numberBatch (ledger) += numberOutput(outputOutputDetail(ledger));
supplierBatch (ledger) += legalEntityStock(stockOutputDetail(ledger));
supplierStockBatch (ledger) += stockOutputDetail(ledger);

stockDocumentLedgerSkuLedger(ledger) += outputOutputDetail(ledger);

nameBatch(batch) += VARISTRING[200](CONCAT '', STRING[10](dateOutputDetail(batch)), '/ ' + seriesNumberOutputDetail(batch), '/ ' + fullNameLegalEntityStockOutputDetail(batch));

// Создание агрегированного производства

@defineDocumentHeaderProperty (order, createOutput, 'Создать документ производства');
@defineDocumentDetailProperty (order, productDetail, createOutput, 'Создать документ производства');

@defineOperationProperty(createOutput, 'Создать документ производства', createContainer);
@deriveDocumentOperationProperty(Order, createOutput);

@defineDocumentDetailQuantityCustomPrefix (productDetail, output, '(произведено)');
outputQuantityProductDetail(detail) <- quantityProductDetail(detail) WHEN CHANGED(quantityProductDetail(detail));

outputProductsSumProductDetail 'Сумма произведенного изделия' = DATA NUMERIC[16,2] (ProductDetail);
outputProductsSumProductDetail(productDetail) <-
    NUMERIC[16,2](roundPriceCurrency((outputQuantityProductDetail(productDetail) * priceProductDetail(productDetail)), currencyProductDetail(productDetail)))
    WHEN CHANGED (outputQuantityProductDetail(productDetail)) OR
         CHANGED (priceProductDetail(productDetail)) OR
         CHANGED(currencyProductDetail(productDetail));
         
fillOutputQuantityProductDetailOrder 'Заполнить кол-во (произведено) из остатков' (order)= ACTION (order) {
    createOutputOrder(order) <- TRUE;

    outputQuantityProductDetail(d) <- (- balanceASkuStockDate(skuProductDetail(d), productsStockProductDetail(d), dateProductDetail(d))) 
        WHERE balanceASkuStockDate(skuProductDetail(d), productsStockProductDetail(d), dateProductDetail(d)) < 0 AND orderProductDetail(d) == order;    
} TOOLBAR;        

outputProductsSumProductDetailOrder 'Сумма произведенных изделий' (order) = GROUP SUM outputProductsSumProductDetail(detail) BY orderProductDetail(detail) IN documentSum;

backgroundOutputOrder 'Цвет' (order) = RGB(255, 224, 255) IF order IS Order;
showOutputOrder (order) =  order IS Order AND NOT createOutputOrder(order);

EXTEND FORM order
    PROPERTIES(o) BACKGROUND backgroundOutputOrder(o) createOutputOrder
    PROPERTIES(o) READONLY BACKGROUND backgroundOutputOrder(o) SHOWIF createOutputOrder(o) outputProductsSumProductDetailOrder
    PROPERTIES(o) fillOutputQuantityProductDetailOrder TODRAW pd    

    PROPERTIES(pd) BEFORE deletepd SHOWIF createOutputOrder(o) BACKGROUND backgroundOutputOrder(o) outputProductsSumProductDetail

    PROPERTIES(pd) READONLY outputProductDetail AFTER quantityProductDetail(pd) SHOWIF showOutputOrder(o) BACKGROUND backgroundOutputOrder(o)
    PROPERTIES(pd) outputQuantityProductDetail AFTER quantityProductDetail(pd) SHOWIF createOutputOrder(o) BACKGROUND backgroundOutputOrder(o)
;
DESIGN order {
    headerRow112 {
        NEW headerRow1122 {
            caption = 'Производство';
            MOVE PROPERTY(createOutputOrder(o));
        }
    }
    
    o.documentSum {
        MOVE PROPERTY(outputProductsSumProductDetailOrder(o)) AFTER PROPERTY(sumProductDetailOrder(o)) { preferredCharWidth = 13;}
    }
}

EXTEND FORM orders
    PROPERTIES(o)  READONLY BACKGROUND backgroundOutputOrder(o) outputProductsSumProductDetailOrder AFTER sumProductDetailOrder(o)

    PROPERTIES(pd) READONLY SHOWIF createOutputOrder(o) BACKGROUND backgroundOutputOrder(o) outputProductsSumProductDetail
    PROPERTIES(pd) READONLY outputProductDetail AFTER quantityProductDetail(pd) SHOWIF showOutputOrder(o) BACKGROUND backgroundOutputOrder(o)
    PROPERTIES(pd) READONLY outputQuantityProductDetail AFTER quantityProductDetail(pd) SHOWIF createOutputOrder(o) BACKGROUND backgroundOutputOrder(o)
;

// Создание агрегированного документа

CLASS OrderOutput 'Производство на основе заказа' : Output;
CLASS OrderOutputDetail 'Строка производства на основе заказа' : OutputDetail;

@defineDocumentTables(orderOutput);

@defineDocumentAggregationHeader(order, orderOutput, createOutput);
@defineAggregation(productDetail, orderOutputDetail, createOutput);
overCostPriceOutputDetail(d) += costPriceProductDetail(productDetailOrderOutputDetail(d));

orderOutputOrderOutputDetail (detail) = orderOutputOrder(orderProductDetail(productDetailOrderOutputDetail(detail)));
outputOutputDetail(detail) += orderOutputOrderOutputDetail(detail);
@defineDocumentDetailIndex(orderOutput);

dateOrderOutputDetail 'Дата' (orderOutputDetail) = dateProductDetail(productDetailOrderOutputDetail(orderOutputDetail));
timeOrderOutputDetail 'Время' (orderOutputDetail) = timeProductDetail(productDetailOrderOutputDetail(orderOutputDetail));
dateTimeOrderOutputDetail 'Дата/время' (orderOutputDetail) = dateProductDetail(productDetailOrderOutputDetail(orderOutputDetail));

dateOutput(output) += dateOrderOutput(output);
timeOutput(output) += timeOrderOutput(output);

stockOutput(output) += productsStockOrder(orderOrderOutput(output));
isPostedOutput(output) += isPostedOrder(orderOrderOutput(output));
isClosedOutput(output) += isClosedOrder(orderOrderOutput(output));

numberOrderOutput 'Номер документа' (orderOutput) = numberOrder(orderOrderOutput(orderOutput));
numberOutput(output) += numberOrderOutput(output);

seriesOrderOutput 'Серия документа' (orderOutput) = seriesOrder(orderOrderOutput(orderOutput));
seriesOutput(output) += seriesOrderOutput(output);

seriesNumberOrderOutput 'Серия/номер документа' (orderOutput) = seriesNumberOrder(orderOrderOutput(orderOutput));

noteOutput(output) += noteOrder(orderOrderOutput(output));
currencyOutput (output) += currencyProductOrder(orderOrderOutput(output));

priceListTypeOutput(output) += productsPriceListTypeOrder(orderOrderOutput(output));

@defineDocumentDescription(orderOutput, OrderOutputDetail, 'Производство на основе заказа');
descriptionOutput (output) += descriptionOrderOutput(output);


productDetailOutputDetail (outputDetail) += productDetailOrderOutputDetail(outputDetail);
skuOutputDetail(outputDetail) +=  skuProductDetail(productDetailOrderOutputDetail(outputDetail));
quantityOutputDetail(outputDetail) += outputQuantityProductDetail(productDetailOrderOutputDetail(outputDetail));

priceListTypeOutputDetail(outputDetail) += calcPriceListTypeProductDetail(productDetailOrderOutputDetail(outputDetail));

priceOutputDetail(outputDetail) += priceProductDetail(productDetailOrderOutputDetail(outputDetail));
sumOutputDetail(outputDetail) += outputProductsSumProductDetail(productDetailOrderOutputDetail(outputDetail));

editOutput(output) += ACTION EXEC editOrder(orderOrderOutput(output));

// --------------------------- Формы Списания ---------------------------------

FORM userOutput 'Производство'
    OBJECTS o = UserOutput FIXED PANEL
    PROPERTIES (o) isPostedUserOutput, nameStockUserOutput ON CHANGE changeStockCompanyUserOutput(o), nameNumeratorUserOutput, numberUserOutput, seriesUserOutput, dateUserOutput, timeUserOutput,
                   nameCurrencyUserOutput, namePriceListTypeUserOutput, noteUserOutput,
                   countUserOutputDetailUserOutput, quantityUserOutputDetailUserOutput, sumUserOutputDetailUserOutput,
                   fillOrderUserOutput, ordersOutput READONLY

    OBJECTS d = UserOutputDetail
    PROPERTIES (d) indexUserOutputDetail, idBarcodeSkuUserOutputDetail, nameSkuUserOutputDetail, shortNameUOMSkuUserOutputDetail,
                   namePriceListTypeUserOutputDetail, expiryDateUserOutputDetail, quantityUserOutputDetail, priceUserOutputDetail, sumUserOutputDetail,
                   descriptionIndexProductDetailUserOutputDetail, ADDOBJ, deleted=DELETESESSION

    PROPERTIES(o) TODRAW d fillDocumentOutput, addDetailDialogSkuStockUserOutputDetailUserOutput,
                           addDetailInputBarcodeUserOutputDetailUserOutput, deleteUserOutputDetailUserOutput
    FILTERS userOutputUserOutputDetail(d) == o

    EVENTS
        ON OK prePostUserOutput(o)

    HINTTABLE LIST dateTimeUserOutputDetail, skuUserOutputDetail, stockUserOutputDetail,
                   priceListTypeUserOutputDetail, currencyUserOutputDetail, priceUserOutputDetail

    EDIT UserOutput OBJECT o
;

DESIGN userOutput {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                type = CONTAINERV;

                MOVE o.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPostedUserOutput(o)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameStockUserOutput(o));
                    MOVE PROPERTY(nameNumeratorUserOutput(o));
                    MOVE PROPERTY(numberUserOutput(o));
                    MOVE PROPERTY(seriesUserOutput(o));
                    MOVE PROPERTY(dateUserOutput(o));
                    MOVE PROPERTY(timeUserOutput(o));
                }
                NEW headerRow12 {
                    type = CONTAINERV;
                    NEW headerRow122 {
                        type = CONTAINERV;
                        MOVE o.documentPrm {
                            type = CONTAINERH;
                        }
                        MOVE o.order{
                            type = CONTAINERH;
                        }
                    }
                }
            }

            MOVE o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserOutputDetailUserOutput(o)) { preferredCharWidth = 13;}
    }
}

// Проводим по регистру учетных цен
@implementSystemLedgerPriceListTypeBatch(account, OutputDetail, legalEntityStock, stock);

editOutputDetail 'Редактировать' = ABSTRACT ACTION LIST  (OutputDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserOutputDetail(d) = ACTION (d) NEWSESSION {
    FORM userOutput OBJECTS o = userOutputUserOutputDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}
editOutputDetail(d) += ACTION editUserOutputDetail(d);
editPriceListLedger(d) += ACTION editOutputDetail(d);

editSkuLedger(batch) += ACTION editOutputDetail(batch);
                       
//editProductDetail(d) = ACTION (d) NEWSESSION {
//    FORM order OBJECTS o = orderProductDetail(d), pd = d MANAGESESSION DOCKEDMODAL;
//}
//
editOutputDetail(d) += ACTION editProductDetail(productDetailOrderOutputDetail(d));

//-- SKU

addUserOutput 'Добавить' = ACTION ADDFORM UserOutput;
editUserOutput 'Редактировать' (userOutput) = ACTION EDITFORM UserOutput;
editOutput(output) += ACTION editUserOutput(output);

copyOutput 'Копировать' = ACTION (userOutput) NEWSESSION {
    FOR ADDOBJ o = UserOutput DO {
        ASSIGN stockUserOutput(o) <- stockUserOutput(userOutput);
        ASSIGN currencyUserOutput(o) <- currencyUserOutput(userOutput);
        ASSIGN priceListTypeUserOutput(o) <- priceListTypeUserOutput(userOutput);
        ASSIGN noteUserOutput(o) <- noteUserOutput(userOutput);

        FOR userOutputUserOutputDetail(userOutputDetail) == userOutput DO {
            FOR ADDOBJ d=UserOutputDetail DO {
                ASSIGN userOutputUserOutputDetail(d) <- o;
                ASSIGN skuUserOutputDetail(d) <- skuUserOutputDetail(userOutputDetail);
                ASSIGN quantityUserOutputDetail(d) <- quantityUserOutputDetail(userOutputDetail);
                ASSIGN priceListTypeUserOutputDetail(d) <- priceListTypeUserOutputDetail(userOutputDetail);
                ASSIGN productDetailUserOutputDetail(d) <- productDetailUserOutputDetail(userOutputDetail);
            }
        }
        FORM userOutput OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

isUserOpenedOutput(o)=  isOpenedOutput(o) AND isUserOutput(o);
FORM outputs 'Производство'
    OBJECTS o = Output
    PROPERTIES (o) READONLYIF isReadonly() isClosedOutput, isPostedOutput, numberOutput, seriesOutput, dateOutput, timeOutput,
                            nameStockOutput, nameCurrencyOutput, namePriceListTypeOutput 
    PROPERTIES (o) READONLY countOutputDetailOutput, quantityOutputDetailOutput, sumOutputDetailOutput
    PROPERTIES (o) READONLYIF isReadonly() noteOutput

    PROPERTIES (o) READONLY FORCE PANEL createdNameUserUserOutput, createdTimeUserOutput, createdHostnameComputerUserOutput, 
                                        postedNameUserUserOutput, postedTimeUserOutput, postedHostnameComputerUserOutput

    PROPERTIES ()  addUserOutput TODRAW o
    PROPERTIES (o) editOutput SHOWIF isOpenedOutput(o), copyOutput
    PROPERTIES(o)  closeUserOutput SHOWIF isOpenedUserOutput(o), openUserOutput SHOWIF isClosedUserOutput(o)     
    PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserOpenedOutput(o)

    OBJECTS d=OutputDetail
    PROPERTIES (d) READONLY indexOutputDetail, idBarcodeSkuOutputDetail, nameSkuOutputDetail, shortNameUOMSkuOutputDetail
    PROPERTIES (d) READONLY namePriceListTypeOutputDetail, expiryDateOutputDetail, quantityOutputDetail, priceOutputDetail,
                   sumOutputDetail, descriptionIndexProductDetailOutputDetail

    FILTERS outputOutputDetail(d) == o
    DIALOG Output OBJECT o
;
@extendFormFilterAccessStock(Output, o, outputs, stock, company);

DESIGN outputs {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        MOVE o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE o.created;
                MOVE o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(outputs);
@defineFilterIsOpened (output, outputs, o);
@defineDocumentLogForm(outputs, o);
NAVIGATOR {
    manufacturingDocuments {
        ADD outputs;
    }
}