MODULE ProductionOperation;

REQUIRE Operation, PriceListType;

NAMESPACE Production;

@defineOperation(' (производственный заказ)');

@defineOperationRole();
@extendFormFilterRole(o, dialogOperations);
//@extendFormFilterRole(o, operations);     //-- пока не нужен

TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);

@defineOperationLegalEntity(company, , c, 'Организация');
@defineCountLegalEntityOperation(company, company);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);

@defineOperationStock(components, stc, 'Склад компонент');
// Подсчет складов по-умолчанию            
countComponentsStockOperation (operation) = GROUP SUM 1 IF inComponentsStockOperation(stock,operation) AND isCompanyStock(stock) 
    BY operation;
defaultComponentsStockOperation (operation) = GROUP MIN stock IF inComponentsStockOperation(stock,operation) AND isCompanyStock(stock) 
    BY operation;  

@defineOperationStock(products, stp, 'Склад изделий');
// Подсчет складов по-умолчанию   
countProductsStockOperation (operation) = GROUP SUM 1 IF inProductsStockOperation(stock,operation) AND isCompanyStock(stock) 
    BY operation;
defaultProductsStockOperation (operation) = GROUP MIN stock IF inProductsStockOperation(stock,operation) AND isCompanyStock(stock) 
    BY operation;  

EXTEND FORM operation
    FILTERS countCompanyStockStockGroup(stcg),
            isCompanyStock(stc),
            countCompanyStockStockGroup(stpg),
            inCompanyOperation(legalEntityStock(stp), o),
            inCompanyOperation(legalEntityStock(stc), o),                                      
            isCompanyStock(stp),
            isCompanyLegalEntity(c)
;
//countOperationSupplierCustomerSupplierStockCustomerStockUser 'Кол-во операций' (s, c, ss, cs, u) = 
//    GROUP SUM 1 IF inSupplierOperation(s, o) AND inSupplierStockOperation(ss, o)
//               AND inCustomerOperation(c, o) AND inCustomerStockOperation(cs, o) 
//               AND inUserOperation(u, o) BY s, c, ss, cs, u COMPLEX;   
//
//defaultOperationSupplierCustomerSupplierStockCustomerStockUser 'Операция по умолчанию' (s, c, ss, cs, u) = 
//    GROUP MAX o IF inSupplierOperation(s, o) AND inSupplierStockOperation(ss, o)
//               AND inCustomerOperation(c, o) AND inCustomerStockOperation(cs, o) 
//               AND inUserOperation(u, o) BY s, c, ss, cs, u COMPLEX;   


DESIGN operation{
    tabContainer {
        NEW createContainer {
            caption = 'Производные документы';
        }
        NEW showContainer {
            caption = 'Отображение свойств';     
//            NEW commonContainer{
//                type = CONTAINERV;
//            }
//            NEW priceContainer{
//                type = CONTAINERV;
//            }      
        }
    }
}

@defineOperationProperty(preventChangesDocument, 'Запрет на изменение документа другим пользователем', showContainer);
@defineOperationProperty(isBatch, 'Запретить оприходование производственных заказов без партий', BOOLEAN, showContainer);
@defineOperationProperty(banNegativeCuttingComponent, 'Запретить отрицательные остатки по компонентам', BOOLEAN, showContainer);

@defineOperationProperty(percQuantity, 'Допустимый процент отклонения по количеству', NUMERIC[8,3], showContainer);
@defineOperationProperty(percSum, 'Допустимый процент отклонения по сумме', NUMERIC[8,3], showContainer);
@defineOperationProperty(percPrice, 'Допустимый процент отклонения учетной цены от цены изделия', NUMERIC[8,3], showContainer);
@defineOperationProperty(showBOMQuantity, 'Показывать количество в спецификации', BOOLEAN, showContainer);