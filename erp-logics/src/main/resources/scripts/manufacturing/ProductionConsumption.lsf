MODULE  ProductionConsumption;

REQUIRE ProductionOrder, ProductionOutput, StockDocumentSkuLedger, StockMovement;

NAMESPACE Production;

// ---------------- Списание матириалов, производство ------------------- //

CLASS ABSTRACT Consumption 'Списание сырья' : Document;
CLASS ABSTRACT ConsumptionDetail 'Строка списания сырья' : DocumentDetail;

CLASS UserConsumption 'Списание сырья (польз.)': Consumption;
CLASS UserConsumptionDetail 'Строка списания сырья (польз.)' : ConsumptionDetail;

@defineDocumentInterface(consumption);
@deriveDocumentHeaderTimePrefix(UserConsumption, );

@defineDocumentInterfaceNumber(consumption);
@defineNumeratedDefault(UserConsumption, 'Списание сырья', 'СС');

@defineDocumentInterfaceDataStock(consumption, stock, 'Склад', );
@defineDocumentDialogStocks(userConsumption, stock, company, , );

CONSTRAINT stock(UserConsumption o) AND NOT  isCompany(stock(o))
    CHECKED BY stock[UserConsumption]
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfacePosted(consumption);
@defineDocumentInterfaceClosed(consumption);
@defineDocumentClosedConstraint(UserConsumption);

@defineDocumentInterfaceDescription(consumption, 'Списание сырья');

@defineDocumentInterfaceCurrency(consumption);
@deriveDocumentCurrency(userConsumption, stock);
@defineDocumentInterfacePriceListType(consumption); // объявляем вид цены

@defineDocumentInterfaceDetailSku(consumption, sku);
// Для инвентаризации по партиям

@showDocumentInterfaceDetailBatch(consumption);
@defineDocumentInterfaceDetailBatch(consumption, batch);
changeBatch(UserConsumptionDetail detail) = ACTION  {

    FORM dialogBatchStockOut OBJECTS st = stock(detail),
                             t = dateTime(detail),
                             sk = sku(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        batch(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batch(detail) <- NULL;
    }
}
replace(Sku s, Batch b) += ACTION { sku(UserConsumptionDetail detail) <- s WHERE batch(detail) == b;}


    
@defineDocumentInterfaceDetailQuantity(consumption);

@defineDocumentInterfaceDetailPrice(consumption); // объявляем цену
priceListType(UserConsumptionDetail detail) <- priceListType(userConsumption(detail))
        WHEN CHANGED(priceListType(userConsumption(detail)));

@deriveDocumentDetailPriceBatchPriceListTypeCustom (userConsumptionDetail, stock);

// суммма
@defineDocumentInterfaceDetailDataSum(consumption);
@deriveDocumentDetailSum(userConsumption, quantity);

// кол-во в шапке документа
@defineDocumentInterfaceHeaderQuantity(consumption);
@defineDocumentHeaderSkuQuantity(consumption, sku);

@defineDocumentHeaderSkuQuantity(userConsumption, sku);
@defineDocumentInterfaceHeaderSum(consumption);

//@defineDocumentHeaderItemSum(userConsumption, , ) // так как PERSISTENT надо пока
sumItemConsumptionDetail 'Сумма, товар' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isItem(sku(idetail))
        BY consumption(idetail) IN documentSum PERSISTENT;
sumContainerConsumptionDetail 'Сумма, тара' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isContainer(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumChargeConsumptionDetail 'Сумма услуг' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isCharge(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumNotChargeConsumptionDetail 'Сумма кроме услуг' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isNotCharge(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumNotItemConsumptionDetail 'Сумма кроме товара' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isNotItem(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumNotContainerConsumptionDetail 'Сумма кроме тары' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isNotContainer(sku(idetail))
        BY consumption(idetail) IN documentSum;

@defineDocumentHeaderItemSum(userConsumption, , );

@defineAddDetailDialogSkuStock(userConsumption, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userConsumption, sku);

edit 'Редактировать' = ACTION ABSTRACT LIST (Consumption) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

@implementDocument(consumption);
@implementDocumentBatch(consumption);
supplierStock(Consumption consumption) += stock(consumption);

//--  Связь накладной и поставки

//GROUP order 'Информация о заказе' : public;

componentDetail = ABSTRACT ComponentDetail (ConsumptionDetail) PERSISTENT;
componentDetail = DATA ComponentDetail (UserConsumptionDetail);
componentDetail(UserConsumptionDetail consumptionDetail) += componentDetail(consumptionDetail);

CONSTRAINT stock[ConsumptionDetail](UserConsumptionDetail detail) != componentsStock(componentDetail(detail)) OR
           sku[ConsumptionDetail](detail) != sku(componentDetail(detail))
    CHECKED BY componentDetail[UserConsumptionDetail]
        MESSAGE 'Склад сырья и товар в списании сырья и производственном заказе должны соответствовать друг другу';


descriptionIndexComponentDetail 'Строка компонента' (ConsumptionDetail detail) = descriptionIndex(componentDetail(detail));
descriptionIndexComponentDetail 'Строка компонента' (UserConsumptionDetail detail) = descriptionIndex(componentDetail(detail));

quantityConsumptionDetail (order, consumption) = GROUP SUM quantity(ConsumptionDetail consumptionDetail) BY order(componentDetail(consumptionDetail)), consumption(consumptionDetail);

orders 'Заказы' (consumption) = GROUP CONCAT VARSTRING[255](description(Order order)) IF quantityConsumptionDetail(order, Consumption consumption) , ', '
                                                BY consumption
                                                ORDER order IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

consumed 'Кол-во (списано)' (componentDetail) = GROUP SUM quantity(ConsumptionDetail consumptionDetail) IF isPosted(consumptionDetail)
                                                                   BY componentDetail(consumptionDetail) PERSISTENT;

toConsume 'Не списано' (ComponentDetail componentDetail) = quantity (componentDetail) (-) consumed(componentDetail);

toConsumeComponentDetail 'Не списано по заказу' (order) =
    GROUP SUM toConsume(ComponentDetail componentDetail) IF toConsume(componentDetail) > 0
          BY order(componentDetail);

@defineDocumentDetailQuantityCustomPrefix (componentDetail, consumed, ' (списано)');
@defineDocumentDetailDataSumCustomPrefix (componentDetail, consumed, ' (списано)');

consumedQuantity(ComponentDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

calcConsumedSum = ABSTRACT OVERRIDE FIRST NUMERIC[16,2] (ComponentDetail);
calcConsumedSum(ComponentDetail componentDetail) += NUMERIC[16,2](round(consumedQuantity(componentDetail) * price(componentDetail), currency(componentDetail))); 
consumedSum (ComponentDetail componentDetail) <- calcConsumedSum(componentDetail)
                WHEN DO CHANGED(consumedQuantity(componentDetail)) OR CHANGED (price(componentDetail)) OR CHANGED(currency(componentDetail));

consumedSumComponentDetail 'Сумма списанных компонент' (order) = GROUP SUM consumedSum(ComponentDetail detail) BY order(detail) IN documentSum;
consumedQuantityComponentDetail 'Кол-во списанных компонент' (order) = GROUP SUM consumedQuantity(ComponentDetail detail) BY order(detail) IN documentSum;

// Расчет количеств компонент для произведенных изделий
quantityOutput 'Кол-во изделий в заказе (произведенных)' (product, order) = GROUP SUM outputQuantity(ProductDetail productDetail)
    BY product(productDetail), order(productDetail);

quantityOutput 'Кол-во спецификаций (произведенных)' (BOM BOM, Order order) = [= GROUP MAX quantityOutput(Product product, Order order)/ quantity(product)
    BY BOM(product), order](BOM, order) PERSISTENT;

recBruttoQuantityOutput 'Кол-во для произ-го' (BOM, order, sku) = GROUP SUM quantityOutput(BOM BOM, Order order) * recBruttoQuantity(BOM, Sku sku, date(order)) BY BOM, order, sku;
recBruttoQuantityOutput 'Рекур.кол-во' (BOM, order, component) = GROUP SUM quantityOutput(BOM BOM, Order order) * recBruttoQuantity(BOM, Component component, date(order)) BY BOM, order, component;

calcComponentConsumedQuantity (ComponentDetail d) = recBruttoQuantityOutput(BOM(d), order(d), component(d)) * quantityCoeff(d) * OVERRIDE 1.0, multiplierSubstituteTo(bruttoSku(d), substituteSku(d));
calcSkuConsumedQuantity (ComponentDetail d) = recBruttoQuantityOutput(BOM(d), order(d), bruttoSku(d)) * quantityCoeff(d) * OVERRIDE 1.0, multiplierSubstituteTo(bruttoSku(d), substituteSku(d));
createOutputComponent 'Заполнить списание'(Order order) = ACTION   {
    consumedQuantity(ComponentDetail d) <- calcComponentConsumedQuantity(d) WHERE order(d) == order AND component(d);
    consumedQuantity(ComponentDetail d) <- calcSkuConsumedQuantity(d) WHERE order(d) == order AND NOT component(d);
} TOOLBAR;

WHEN SESSION FORMS order (CHANGED(substituteSku(ComponentDetail d)) OR CHANGED(quantityOutput(BOM(d), order(d)))) AND countProduct(BOM(d)) == 1 AND NOT CHANGED(consumedQuantity(d)) AND component(d)  DO {
    consumedQuantity(d) <- calcComponentConsumedQuantity (d);
}

WHEN SESSION FORMS order (CHANGED(substituteSku(ComponentDetail d)) OR CHANGED(quantityOutput(BOM(d), order(d)))) AND countProduct(BOM(d)) == 1 AND NOT CHANGED(consumedQuantity(d)) AND NOT component(d) DO {
    consumedQuantity(d) <- calcSkuConsumedQuantity (d);
}

backgroundConsumption 'Цвет' (Order order) = RGB(212, 255, 212) IF order IS Order;

EXTEND FORM componentDetails
    PROPERTIES(d) READONLY toConsume
;
DESIGN componentDetails {
    main {
        PROPERTY(toConsume(d)) { background = #FFFFCC; }
    }
}

// --- Создание списания на основе заказа ---------------- //

FORM consumptionOrders 'Производственные заказы'

    OBJECTS s = Stock FIXED PANEL
//    PROPERTIES (s) READONLY name

    OBJECTS o = Order
    PROPERTIES(o) READONLY isPosted, number, series, date, time, nameComponentsStock, nameProductsStock,
                  fromDate, toDate, quantityProductDetail, sumProductDetail, quantityComponentDetail,
                  nameCalcPriceListType, namePriceListType, note
    FILTERS isPosted(o),
            componentsStock(o) == s,
            toConsumeComponentDetail(o)

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, nameProduct, shortNameUOM, quantity,
                   calcComponentsPrice, componentsPrice, markup, price, sum
    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY index, nameSku, nameComponent,
                   shortNameUOM, quantity

    PROPERTIES(cd) READONLY toConsume

    FILTERS order(cd)==o

;

DESIGN consumptionOrders {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = CONTAINERV;
            MOVE o.box;
            NEW documentDetail {
                fill = 1;
                type = TABBED;
                MOVE cd.box {
                    caption = 'Компоненты';
                }
                MOVE pd.box {
                    caption = 'Изделия';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        PROPERTY(toConsume(cd)) { background = #FFFFCC; }
    }
}

fillOrder 'Заполнить на основе производственного заказа'(UserConsumption userConsumption) =  ACTION  {
    FORM consumptionOrders OBJECTS s = stock(userConsumption) MODAL;

    IF formResult() == FormResult.ok THEN {
        LOCAL productionOrder = Order();
        ASSIGN productionOrder() <- chosenObject('o');

        FOR order(ComponentDetail componentDetail) == productionOrder() ADDOBJ d = UserConsumptionDetail DO {
            ASSIGN userConsumption(d) <- userConsumption;
            ASSIGN componentDetail(d) <- componentDetail;
            ASSIGN sku(d) <- sku(componentDetail);
            ASSIGN quantity (d) <- toConsume(componentDetail);              // возможно надо quantityComponentDetail   ?
        }
    }
} IN order;

// Товарный отчет
@implementStockDocumentLedgerOutOver(Consumption, stock);

typeStockDocumentLedger 'Тип процесса' (ledger) = ABSTRACT VARSTRING[50] (Consumption) PERSISTENT;
sumItemOutStockDocumentLedger 'Сумма расхода, товар' (ledger) = ABSTRACT NUMERIC[16,2] (Consumption) PERSISTENT;

//EXTEND CLASS Consumption : OutStockDocumentLedger;
//numberStockDocumentLedgerConsumption = ABSTRACT STRING[18] (Consumption) PERSISTENT;
//seriesStockDocumentLedgerConsumption = ABSTRACT STRING[2] (Consumption) PERSISTENT;
//seriesStockDocumentLedger (ledger) += OVERRIDE seriesConsumption(ledger), seriesStockDocumentLedgerConsumption(ledger);
//numberStockDocumentLedger (ledger) += OVERRIDE numberConsumption(ledger), numberStockDocumentLedgerConsumption(ledger);
//dateTimeStockDocumentLedger (ledger) += dateTimeConsumption(ledger);
//isPostedStockDocumentLedger (ledger) += isPostedConsumption(ledger);
//isClosedStockDocumentLedger (ledger) += isClosedConsumption(ledger);
//stockStockDocumentLedger (ledger) += stockConsumption(ledger);
//descriptionStockDocumentLedger (ledger) += descriptionConsumption(ledger);

type(Consumption l) += OVERRIDE 'Списание сырья (пр-во)' IF l IS Consumption, typeStockDocumentLedger(l);
sumItem (Consumption ledger) += OVERRIDE sumItemConsumptionDetail(ledger), sumItemOutStockDocumentLedger(ledger);
sumContainer (Consumption ledger) += sumContainerConsumptionDetail(ledger);
edit[StockDocumentLedger](Consumption l) += ACTION edit(l);
close[StockDocumentLedger](Consumption l) += ACTION close(l);

// Проводим по регистру
@implementSkuLedgerOutFIFO(ConsumptionDetail, sku, stock);
quantity[OutFIFOSkuLedger] (ConsumptionDetail ledger) += quantity(ledger);
batch[SkuLedger](ConsumptionDetail ledger) += batch(ledger);
@implementSkuLedgerOutFIFOBatchBalance(ConsumptionDetail, stock);
sum[OutSkuLedger] (ConsumptionDetail ledger) += sum(ledger);
stockDocumentLedger(ConsumptionDetail ledger) += consumption(ledger); 

// Создание агрегированного списания

@defineDocumentHeaderProperty (order, createConsumption, 'Создать документ списания сырья');
@defineDocumentDetailProperty (order, componentDetail, createConsumption, 'Создать документ списания сырья');

@defineOperationProperty(createConsumption, 'Создать документ списания сырья', createContainer);
@deriveDocumentOperationProperty(Order, createConsumption);

EXTEND FORM order
    PROPERTIES(o)  BACKGROUND backgroundConsumption(o) createConsumption
    PROPERTIES(o)  READONLY BACKGROUND backgroundConsumption(o) SHOWIF createConsumption(o) consumedSumComponentDetail
    PROPERTIES(cd) BEFORE deletecd BACKGROUND backgroundConsumption(o) SHOWIF createConsumption(o) consumedQuantity, consumedSum
    PROPERTIES(o)  TODRAW cd createOutputComponent SHOWIF createConsumption(o)
;
DESIGN order {
    headerRow112 {
        NEW headerRow1121 {
            caption = 'Списание';
            MOVE PROPERTY(createConsumption(o));
        }
    }

    o.documentSum {
        MOVE PROPERTY(consumedSumComponentDetail(o)) AFTER PROPERTY(sumComponentDetail(o)) { preferredCharWidth = 13;}
    }
}

EXTEND FORM orders
            PROPERTIES(cd) BACKGROUND backgroundConsumption(o) SHOWIF createConsumption(o) READONLY consumedQuantity,
                           consumedSum
;

CLASS OrderConsumption 'Списание сырья на основе заказа' : Consumption;
CLASS OrderConsumptionDetail 'Строка списания сырья на основе заказа' : ConsumptionDetail;

@defineDocumentTables(orderConsumption);

@defineDocumentAggregationHeader(order, orderConsumption, createConsumption);
needToConsumptionDetail (ComponentDetail d) = createConsumption(d) AND consumedQuantity(d) >0;
@defineAggregation(componentDetail, orderConsumptionDetail, needToConsumptionDetail);

orderConsumption (OrderConsumptionDetail detail) = orderConsumption(order(componentDetail(detail)));
consumption(OrderConsumptionDetail detail) += orderConsumption(detail);
@defineDocumentDetailIndex(orderConsumption);

date 'Дата' (OrderConsumptionDetail orderConsumptionDetail) = date(componentDetail(orderConsumptionDetail));
time 'Время' (OrderConsumptionDetail orderConsumptionDetail) = time(componentDetail(orderConsumptionDetail));
dateTime 'Дата/время' (OrderConsumptionDetail orderConsumptionDetail) = date(componentDetail(orderConsumptionDetail));

date(OrderConsumption consumption) += date(consumption);
time(OrderConsumption consumption) += time(consumption);

stock(OrderConsumption consumption) += componentsStock(order(consumption));
isPosted(OrderConsumption consumption) += isPosted(order(consumption));
isClosed(OrderConsumption consumption) += isClosed(order(consumption));

number 'Номер документа' (OrderConsumption orderConsumption) = number(order(orderConsumption));
number(OrderConsumption consumption) += number(consumption);

series 'Серия документа' (OrderConsumption orderConsumption) = series(order(orderConsumption));
series(OrderConsumption consumption) += series(consumption);

seriesNumber 'Серия/номер документа' (OrderConsumption orderConsumption) = seriesNumber(order(orderConsumption));

note(OrderConsumption consumption) += note(order(consumption));
currency (OrderConsumption consumption) += currencyComponent(order(consumption));

priceListType(OrderConsumption consumption) += priceListType(order(consumption));

@defineDocumentDescription(orderConsumption, OrderConsumptionDetail, 'Списание сырья на основе заказа');
description (OrderConsumption consumption) += description(consumption);


componentDetail (OrderConsumptionDetail consumptionDetail) += componentDetail(consumptionDetail);
sku(OrderConsumptionDetail consumptionDetail) +=  sku(componentDetail(consumptionDetail));
batch(OrderConsumptionDetail consumptionDetail) +=  batch(componentDetail(consumptionDetail));
quantity(OrderConsumptionDetail consumptionDetail) += consumedQuantity(componentDetail(consumptionDetail));

price(OrderConsumptionDetail consumptionDetail) += price(componentDetail(consumptionDetail));
sum(OrderConsumptionDetail consumptionDetail) += consumedSum(componentDetail(consumptionDetail));

edit(OrderConsumption consumption) += ACTION EXEC edit(order(consumption));
close(OrderConsumption consumption) += ACTION EXEC close(order(consumption));
// --------------------------- Формы Списания ---------------------------------

FORM userConsumption 'Списание сырья'
    OBJECTS o = UserConsumption FIXED PANEL
    PROPERTIES (o) isPosted, nameStock ON CHANGE changeStockCompany(o), nameNumerator, number, series, date, time,
                   nameCurrency, namePriceListType, note,
                   countUserConsumptionDetail, quantityUserConsumptionDetail, sumUserConsumptionDetail,
                   fillOrder, orders READONLY

    OBJECTS d = UserConsumptionDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE changeBatch(d), namePriceListType, 
                   quantity, price, sum,
                   descriptionIndexComponentDetail, ADDOBJ, deleted = DELETESESSION

    PROPERTIES(o) TODRAW d fillDocument, addDetailDialogSkuStockUserConsumptionDetail,
                           addDetailInputBarcodeUserConsumptionDetail, deleteUserConsumptionDetail
    FILTERS userConsumption(d) == o

    EVENTS
        ON OK prePost(o)

    HINTTABLE LIST dateTime[UserConsumptionDetail], sku[UserConsumptionDetail], stock[UserConsumptionDetail],
                   priceListType[UserConsumptionDetail], currency[UserConsumptionDetail], price[UserConsumptionDetail]

    EDIT UserConsumption OBJECT o
;

DESIGN userConsumption {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                type = CONTAINERV;

                MOVE o.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPosted(o)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameStock(o));
                    MOVE PROPERTY(nameNumerator(o));
                    MOVE PROPERTY(number(o));
                    MOVE PROPERTY(series(o));
                    MOVE PROPERTY(date(o));
                    MOVE PROPERTY(time(o));
                }
                NEW headerRow12 {
                    type = CONTAINERV;
                    MOVE o.documentPrm {
                        type = CONTAINERH;
                    }
                    MOVE o.order{
                        type = CONTAINERH;
                    }
                }
            }

            MOVE o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserConsumptionDetail(o)) { preferredCharWidth = 13;}
    }
}
WHEN SESSION FORMS userConsumption CHANGED(batch(UserConsumptionDetail detail)) DO {
    sku (detail)  <- sku(batch(detail)) WHERE batch(detail);
}
//WHEN SESSION FORMS userConsumption 
//    CHANGED(skuUserConsumptionDetail(detail)) OR CHANGED(batchUserConsumptionDetail(detail)) OR CHANGED(stockUserConsumptionDetail(detail)) OR CHANGED (dateTimeUserConsumptionDetail(detail)) DO
//    priceUserConsumptionDetail (detail)  <- IF batchUserConsumptionDetail(detail)
//                    THEN priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batchUserConsumptionDetail(detail), stockUserConsumptionDetail(detail), dateTimeUserConsumptionDetail(detail))
//                    ELSE priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, skuUserConsumptionDetail(detail), stockUserConsumptionDetail(detail), dateTimeUserConsumptionDetail(detail));
                    
edit 'Редактировать' = ACTION ABSTRACT LIST  (ConsumptionDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserConsumptionDetail d) = ACTION  NEWSESSION {
    FORM userConsumption OBJECTS o = userConsumption(d), d = d MANAGESESSION DOCKEDMODAL;
}

edit(UserConsumptionDetail d) += ACTION edit(d);
edit[SkuLedger](ConsumptionDetail batch) += ACTION edit(batch);
                       
edit(ComponentDetail d) = ACTION  NEWSESSION {
    FORM order OBJECTS o = order(d), cd = d MANAGESESSION DOCKEDMODAL;
}

edit(OrderConsumptionDetail d) += ACTION edit(componentDetail(d));

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userConsumption, accountPriceListType, );
@extendFormDocumentSkuStock(userConsumption, userConsumption, o, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userConsumption, accountPriceListType, );
@extendFormDocumentBatchStock(userConsumption, userConsumption, o, legalEntityStock, );

@defineMovementSku(consumptionDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userConsumptionDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(consumptionDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(consumptionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

// История по правой кнопке
@defineBalancesBatch(consumptionDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userConsumptionDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(consumptionDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userConsumptionDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

addUserConsumption 'Добавить' = ACTION ADDFORM UserConsumption;
edit 'Редактировать' (userConsumption) = ACTION EDITFORM UserConsumption;
edit(UserConsumption consumption) += ACTION edit(consumption);

copy 'Копировать'(UserConsumption userConsumption) = ACTION  NEWSESSION {
    FOR ADDOBJ o = UserConsumption DO {
        ASSIGN stock(o) <- stock(userConsumption);
        ASSIGN currency(o) <- currency(userConsumption);
        ASSIGN priceListType(o) <- priceListType(userConsumption);
        ASSIGN note(o) <- note(userConsumption);

        FOR userConsumption(UserConsumptionDetail userConsumptionDetail) == userConsumption DO {
            FOR ADDOBJ d=UserConsumptionDetail DO {
                ASSIGN userConsumption(d) <- o;
                ASSIGN sku(d) <- sku(userConsumptionDetail);
                ASSIGN quantity(d) <- quantity(userConsumptionDetail);
                ASSIGN priceListType(d) <- priceListType(userConsumptionDetail);
//                ASSIGN priceUserConsumptionDetail(d) <- priceUserConsumptionDetail(userConsumptionDetail);
                ASSIGN componentDetail(d) <- componentDetail(userConsumptionDetail);
            }
        }
        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM userConsumption

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, o, st) 'F9'
;

EXTEND FORM userConsumption

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantity(b, o, sto) 'F9'
;


isUserOpened(UserConsumption o)=  isOpened[Consumption](o) AND is(o);
FORM consumptions 'Списания сырья'
    OBJECTS o = Consumption
    PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                            nameStock, nameCurrency, namePriceListType
    PROPERTIES (o) READONLY countConsumptionDetail, quantityConsumptionDetail, sumConsumptionDetail, orders
    PROPERTIES (o) READONLYIF isReadonly() note

    PROPERTIES (o) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES ()  addUserConsumption TODRAW o
    PROPERTIES (o) edit SHOWIF isOpened(o), copy
    PROPERTIES (o) close[UserConsumption] SHOWIF isOpened[UserConsumption](o), open SHOWIF isClosed[UserConsumption](o)       
    PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserOpened(o)

    OBJECTS d=ConsumptionDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameBatch
    PROPERTIES (d) READONLY namePriceListType, quantity, price, sum,
                   descriptionIndexComponentDetail

    FILTERS consumption(d) == o
    DIALOG Consumption OBJECT o
;
@extendFormFilterAccessStock(Consumption, o, consumptions, stock, company);

DESIGN consumptions {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        MOVE o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1 ;
            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE o.created;
                MOVE o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(consumptions);
@defineFilterIsOpened (consumption, consumptions, o);
@defineDocumentLogForm(consumptions, o);
NAVIGATOR {
    manufacturingDocuments {
        ADD consumptions;
    }
}

////////////-----------Создание док-та списания сырья на основе производственного заказа-----------------//////////////

requiredQuantitySubstitute 'Кол-во (всего) (компонент)' (order, sku) = GROUP SUM quantity(ComponentDetail idetail) BY order(idetail), sku(idetail);

balance = DATA LOCAL NUMERIC[16,3] (Sku);
left = DATA LOCAL NUMERIC[16,3] (Sku);

addUserConsumptionProduction 'Списание сырья'(Order order) =  ACTION  NEWSESSION {
    balance(Sku sku) <-  NUMERIC[16,3](balanceB(sku, componentsStock(order), dateTime(order)));
    left(Sku sku) <-  NUMERIC[16,3](requiredQuantitySubstitute(order, sku));

    FOR ADDOBJ o = UserConsumption DO {
        stock(o) <- componentsStock(order);
        priceListType(o) <- priceListType(order);
        note(o) <- note(order);
        
        FOR left(Sku sku) > 0 DO {
                
            FOR balance(sku) > 0 ADDOBJ d = UserConsumptionDetail DO {
                userConsumption(d) <- o;
                sku(d) <- sku;
                quantity(d) <- IF balance(sku) >= left(sku) THEN left(sku) ELSE balance(sku);
                left(sku) <- left(sku) (-) quantity(d);
                balance(sku) <- balance(sku) (-) quantity(d);  
            }
             
            IF left(sku) > 0 THEN {
                FOR fromSku(Substitute substitute) == sku AND toSku(substitute) == Sku s AND balance(s) > 0 ORDER balance(toSku(substitute))
                    ADDOBJ d = UserConsumptionDetail DO {
                    userConsumption(d) <- o;
                    sku(d) <- s;
                                               
                    quantity(d) <- IF (balance(s)) >= (left(sku) * multiplier(substitute)) 
                                                            THEN (left(sku) * multiplier(substitute)) ELSE balance(s);                        
                    
                    left(sku) <- left(sku) (-) (quantity(d) / multiplier(substitute) IF multiplier(substitute) != 0);                            
                    
                    balance(s) <- balance(s) (-) quantity(d);
                    
                    IF NOT (left(sku) > 0) THEN
                        BREAK;
                }                                              
            }                                    
        }

        IF [= GROUP SUM 1 IF left(Sku sku) > 0]() THEN {
            MESSAGE 'Внимание !!! Не хватает остатка для компонент : \n' + [= GROUP CONCAT name(Sku sku) IF left(sku) > 0, '\n' ORDER name(sku)]();
        }
        
        FOR left(Sku sku) ADDOBJ d = UserConsumptionDetail DO {
            userConsumption(d) <- o;
            sku(d) <- sku;
            quantity(d) <- left(sku);
        }
        

        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

//bruttoQuantityUserConsumptionDetail 'Кол-во' = DATA NUMERIC[16,3] (UserConsumptionDetail); // по строке компонента
//
//addUserConsumptionProductionOrder 'Списание сырья' =  ACTION (order) NEWSESSION{
//    balanceSessionSku(sku) <-  NULL;
//    
//    FOR ADDOBJ o = UserConsumption DO {
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        stockUserConsumption(o) <- componentsStockOrder(order);
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        noteUserConsumption(o) <- noteOrder(order);
//        
//        balanceSessionSku(sku) <-  NUMERIC[16,3](balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order))) WHERE balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order));
//        
//        
//        
//        FOR orderComponentDetail(detail) == order DO {
//            LOCAL required = NUMERIC[16,3] ();
//            required() <- NULL;
//            required() <- bruttoQuantityComponentDetail(detail);
//        
//            IF required() > 0 THEN {                    
//                IF balanceSessionSku(skuComponentDetail(detail)) AND required() > 0 THEN { //
//                        FOR ADDOBJ d = UserConsumptionDetail DO {                                 
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                            
//                            skuUserConsumptionDetail(d) <- skuComponentDetail(detail);
//                            quantityUserConsumptionDetail(d) <- IF balanceSessionSku(skuComponentDetail(detail)) >= required()  THEN required() ELSE balanceSessionSku(skuComponentDetail(detail));
//                            required() <- required() (-) quantityUserConsumptionDetail(d);
//                            balanceSessionSku(sk) <- balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d) WHERE sk == skuComponentDetail(detail);  
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- quantityUserConsumptionDetail(d);
//                        }              
//                } 
//                FOR fromSkuSubstitute(substitute) == skuComponentDetail(detail) AND balanceSessionSku(toSkuSubstitute(substitute)) > 0  ORDER balanceSessionSku(toSkuSubstitute(substitute)) DO {
//                    IF required() >0 THEN {
//                        FOR ADDOBJ d = UserConsumptionDetail DO {                    
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            skuUserConsumptionDetail(d) <- toSkuSubstitute(substitute);
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                                                       
//                            quantityUserConsumptionDetail(d) <- IF (balanceSessionSku(toSkuSubstitute(substitute))) >= (required()* multiplierSubstitute(substitute)) 
//                                                                THEN (required()* multiplierSubstitute(substitute)) ELSE balanceSessionSku(toSkuSubstitute(substitute)) ;                        
//                            
//                            required() <- required() (-) (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);                            
//                            
//                            balanceSessionSku(sk) <- (balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d)) WHERE  sk == toSkuSubstitute(substitute);   
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);
//                        }    
//                    }                                              
//                }                                    
//            }
//        }   
//        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
//    }
//} TOOLBAR;
//
//EXTEND FORM consumptions
//    PROPERTIES(d) FORCE GRID READONLY  bruttoQuantityUserConsumptionDetail
//;
//EXTEND FORM userConsumption
//    PROPERTIES(d) FORCE GRID bruttoQuantityUserConsumptionDetail
//;

EXTEND FORM orders
    PROPERTIES(o) addUserConsumptionProduction
;
DESIGN orders {
    createdContainer {
        MOVE PROPERTY(addUserConsumptionProduction(o));
    }
}

//------------- Ограничение на равенство суммы компонентов по изделию ------------------//
equalRestriction 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Operation);

showEqualRestriction (Operation o) = createConsumption(o) AND createOutput(o);
EXTEND FORM operation
    PROPERTIES(o) equalRestriction SHOWIF showEqualRestriction(o)
;

DESIGN operation {
    showContainer {
        MOVE PROPERTY(equalRestriction(o));
    }
}

equalRestriction 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Order);

@deriveDocumentOperationProperty(Order, equalRestriction);

showEqualRestriction (Order order) = createConsumption(order) AND createOutput(order);

EXTEND FORM order
    PROPERTIES(o) equalRestriction SHOWIF showEqualRestriction(o)
;   
DESIGN order {
    headerRow12 {
        NEW constraintContainer AFTER timeRow {
            caption = 'Ограничения';
            MOVE PROPERTY(equalRestriction(o));
        }
    }
}

consumedQuantityComponentDetail= GROUP SUM consumedQuantity(ComponentDetail cd) BY BOM(cd), order(cd);
outputQuantityProductDetail= GROUP SUM outputQuantity(ProductDetail pd) BY BOM(pd), order(pd);

outputProductsSumProductDetail 'Сумма изделий' (BOM, order) = GROUP SUM outputProductsSum(ProductDetail d) BY BOM(product(d)), order(d);
consumedSumComponentDetail 'Сумма компонентов' (BOM, order) = GROUP SUM consumedSum(ComponentDetail d) BY BOM(d), order(d);

CONSTRAINT  createConsumption(Order order) AND createOutput(order) AND equalRestriction(order) 
    AND (outputProductsSumProductDetail(BOM BOM, order) != consumedSumComponentDetail(BOM, order))
    MESSAGE 'Сумма списания компонентов для изделия должна быть равной сумме произведенного изделия в производственном заказе'; 

banChangeBOMs 'Запретить изменения в спецификациях, по которым было производство' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES ()banChangeBOMs
;
DESIGN options {
    manufacturing {
        MOVE PROPERTY (banChangeBOMs());
    }
}

isProducts 'Было производство' (BOM)  = GROUP SUM 1 IF consumedQuantity(ComponentDetail cd) >0 AND isPosted(cd) BY BOM(cd);
                                                 
CONSTRAINT SET(Component c IS Component) AND isProducts(BOM(c)) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';
    
CONSTRAINT SET(Product p IS Product) AND isProducts(BOM(p)) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';   
     
CONSTRAINT DROPPED(Component c IS Component) AND PREV(isProducts(BOM(c))) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';
    
CONSTRAINT DROPPED(Product p IS Product) AND PREV(isProducts(BOM(p))) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';   
    
CONSTRAINT (CHANGED(material(Component c)) OR CHANGED(bruttoQuantity(c)) OR CHANGED(wastage(c))) 
    AND isProducts(BOM(c)) AND banChangeBOMs()
     MESSAGE 'Запрещено изменять спецификацию, по которой было производство';
    
CONSTRAINT (CHANGED(sku(Product p)) OR CHANGED(quantity(p)) OR CHANGED(pricePercent(p))) AND isProducts(BOM(p)) AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';   
               
//-- Допустимые отклонения по цене и сумме для разруба

fromOutputQuantity(Order order) = consumedQuantityComponentDetail(order)*( 100.0 - percQuantity(operation(order)))/100.0;
toOutputQuantity(Order order) = consumedQuantityComponentDetail(order)*( 100.0 + percQuantity(operation(order)))/100.0;

CONSTRAINT percQuantity(operation(Order o)) AND isPosted(o) AND outputQuantityProductDetail(o) AND consumedQuantityComponentDetail(o)
    AND NOT (outputQuantityProductDetail(o) >=fromOutputQuantity(o) AND outputQuantityProductDetail(o) <=toOutputQuantity(o))
        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по количеству.';

fromOutputProductsSum(Order order) = consumedSumComponentDetail(order)*( 100.0 - percSum(operation(order)))/100.0;
toOutputProductsSum(Order order) = consumedSumComponentDetail(order)*( 100.0 + percSum(operation(order)))/100.0;
        
CONSTRAINT percSum(operation(Order o)) AND isPosted(o) AND consumedSumComponentDetail(o) AND outputProductsSumProductDetail(o)
    AND NOT (outputProductsSumProductDetail(o) >= fromOutputProductsSum(o) AND outputProductsSumProductDetail(o) <= toOutputProductsSum(o))
        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по сумме.';
