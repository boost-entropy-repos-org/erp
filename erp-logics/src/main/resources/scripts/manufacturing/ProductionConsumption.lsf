MODULE  ProductionConsumption;

REQUIRE ProductionOrder, ProductionOutput, StockDocumentSkuLedger, StockMovement;

NAMESPACE Production;

// ---------------- Списание матириалов, производство ------------------- //

CLASS ABSTRACT Consumption 'Списание сырья' : Document;
CLASS ABSTRACT ConsumptionDetail 'Строка списания сырья' : DocumentDetail;

CLASS UserConsumption 'Списание сырья (польз.)': Consumption;
CLASS UserConsumptionDetail 'Строка списания сырья (польз.)' : ConsumptionDetail;

@defineDocumentInterface(consumption);
@deriveDocumentHeaderTimePrefix(UserConsumption, );

@defineDocumentInterfaceNumber(consumption);
@defineNumeratedDefault(UserConsumption, 'Списание сырья', 'СС');

@defineDocumentInterfaceDataStock(consumption, stock, 'Склад', );
@defineDocumentDialogStocks(userConsumption, stock, company, , );

CONSTRAINT stockUserConsumption(o) AND NOT  isCompanyStock(stockUserConsumption(o))
    CHECKED BY stockUserConsumption
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfacePosted(consumption);
@defineDocumentInterfaceClosed(consumption);
@defineDocumentClosedConstraint(UserConsumption);

@defineDocumentInterfaceDescription(consumption, 'Списание сырья');

@defineDocumentInterfaceCurrency(consumption);
@deriveDocumentCurrency(userConsumption, stock);
@defineDocumentInterfacePriceListType(consumption); // объявляем вид цены

@defineDocumentInterfaceDetailSku(consumption, sku);
// Для инвентаризации по партиям

@showDocumentInterfaceDetailBatch(consumption);
@defineDocumentInterfaceDetailBatch(consumption, batch);
changeBatchUserConsumptionDetail = ACTION (detail) {

    FORM dialogBatchStock OBJECTS st = stockUserConsumptionDetail(detail),
                             t = dateTimeUserConsumptionDetail(detail),
                             sk = skuUserConsumptionDetail(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        batchUserConsumptionDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batchUserConsumptionDetail(detail) <- NULL;
    }
}
replaceSkuBatch(s, b) += ACTION (s, b){ skuUserConsumptionDetail(detail) <- s WHERE batchUserConsumptionDetail(detail) == b;}


    
@defineDocumentInterfaceDetailQuantity(consumption);

@defineDocumentInterfaceDetailPrice(consumption); // объявляем цену
priceListTypeUserConsumptionDetail(detail) <- priceListTypeUserConsumption(userConsumptionUserConsumptionDetail(detail))
        WHEN CHANGED(priceListTypeUserConsumption(userConsumptionUserConsumptionDetail(detail)));

@deriveDocumentDetailPriceBatchPriceListTypeCustom (userConsumptionDetail, stock);

// суммма
@defineDocumentInterfaceDetailDataSum(consumption);
@deriveDocumentDetailSum(userConsumption, quantity);

// кол-во в шапке документа
@defineDocumentInterfaceHeaderQuantity(consumption);
@defineDocumentHeaderSkuQuantity(consumption, sku);

@defineDocumentHeaderSkuQuantity(userConsumption, sku);
@defineDocumentInterfaceHeaderSum(consumption);

//@defineDocumentHeaderItemSum(userConsumption, , ) // так как PERSISTENT надо пока
sumItemConsumptionDetailConsumption 'Сумма, товар' (consumption) =
    GROUP SUM sumConsumptionDetail(idetail) IF isItemSku(skuConsumptionDetail(idetail))
        BY consumptionConsumptionDetail(idetail) IN documentSum PERSISTENT;
sumContainerConsumptionDetailConsumption 'Сумма, тара' (consumption) =
    GROUP SUM sumConsumptionDetail(idetail) IF isContainerSku(skuConsumptionDetail(idetail))
        BY consumptionConsumptionDetail(idetail) IN documentSum;
sumChargeConsumptionDetailConsumption 'Сумма услуг' (consumption) =
    GROUP SUM sumConsumptionDetail(idetail) IF isChargeSku(skuConsumptionDetail(idetail))
        BY consumptionConsumptionDetail(idetail) IN documentSum;
sumNotChargeConsumptionDetailConsumption 'Сумма кроме услуг' (consumption) =
    GROUP SUM sumConsumptionDetail(idetail) IF isNotChargeSku(skuConsumptionDetail(idetail))
        BY consumptionConsumptionDetail(idetail) IN documentSum;
sumNotItemConsumptionDetailConsumption 'Сумма кроме товара' (consumption) =
    GROUP SUM sumConsumptionDetail(idetail) IF isNotItemSku(skuConsumptionDetail(idetail))
        BY consumptionConsumptionDetail(idetail) IN documentSum;
sumNotContainerConsumptionDetailConsumption 'Сумма кроме тары' (consumption) =
    GROUP SUM sumConsumptionDetail(idetail) IF isNotContainerSku(skuConsumptionDetail(idetail))
        BY consumptionConsumptionDetail(idetail) IN documentSum;

@defineDocumentHeaderItemSum(userConsumption, , );

@defineAddDetailDialogSkuStock(userConsumption, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userConsumption, sku);

editConsumption 'Редактировать' = ABSTRACT ACTION LIST (Consumption) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

@implementDocument(consumption);
@implementDocumentBatch(consumption);
supplierStockDocument(consumption) += stockConsumption(consumption);

//--  Связь накладной и поставки

//GROUP order 'Информация о заказе' : public;

componentDetailConsumptionDetail = ABSTRACT ComponentDetail (ConsumptionDetail) PERSISTENT;
componentDetailUserConsumptionDetail = DATA ComponentDetail (UserConsumptionDetail);
componentDetailConsumptionDetail(consumptionDetail) += componentDetailUserConsumptionDetail(consumptionDetail);

CONSTRAINT stockConsumptionDetail(detail) != componentsStockComponentDetail(componentDetailUserConsumptionDetail(detail)) OR
           skuConsumptionDetail(detail) != skuComponentDetail(componentDetailUserConsumptionDetail(detail))
    CHECKED BY componentDetailUserConsumptionDetail
        MESSAGE 'Склад сырья и товар в списании сырья и производственном заказе должны соответствовать друг другу';


descriptionIndexComponentDetailConsumptionDetail 'Строка компонента' (detail) = descriptionIndexComponentDetail(componentDetailConsumptionDetail(detail));
descriptionIndexComponentDetailUserConsumptionDetail 'Строка компонента' (detail) = descriptionIndexComponentDetail(componentDetailUserConsumptionDetail(detail));

quantityConsumptionDetailOrderConsumption (order, consumption) = GROUP SUM quantityConsumptionDetail(consumptionDetail) BY orderComponentDetail(componentDetailConsumptionDetail(consumptionDetail)), consumptionConsumptionDetail(consumptionDetail);

ordersConsumption 'Заказы' (consumption) = GROUP CONCAT VARSTRING[255](descriptionOrder(order)) IF quantityConsumptionDetailOrderConsumption(order, consumption) , ', '
                                                BY consumption
                                                ORDER order IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

consumedComponentDetail 'Кол-во (списано)' (componentDetail) = GROUP SUM quantityConsumptionDetail(consumptionDetail) IF isPostedConsumptionDetail(consumptionDetail)
                                                                   BY componentDetailConsumptionDetail(consumptionDetail) PERSISTENT;

toConsumeComponentDetail 'Не списано' (componentDetail) = quantityComponentDetail (componentDetail) (-) consumedComponentDetail(componentDetail);

toConsumeComponentDetailOrder 'Не списано по заказу' (order) =
    GROUP SUM toConsumeComponentDetail(componentDetail) IF toConsumeComponentDetail(componentDetail) > 0
          BY orderComponentDetail(componentDetail);

@defineDocumentDetailQuantityCustomPrefix (componentDetail, consumed, ' (списано)');
@defineDocumentDetailDataSumCustomPrefix (componentDetail, consumed, ' (списано)');

consumedQuantityComponentDetail(detail) <- quantityComponentDetail(detail) WHEN CHANGED(quantityComponentDetail(detail));

consumedSumComponentDetail (detail) <- NUMERIC[16,2](roundPriceCurrency((priceComponentDetail(detail)* consumedQuantityComponentDetail(detail)), currencyComponentDetail(detail)))
        WHEN CHANGED(priceComponentDetail(detail)) OR
             CHANGED(consumedQuantityComponentDetail(detail)) OR
             CHANGED(currencyComponentDetail(detail));

consumedSumComponentDetailOrder 'Сумма списанных компонент' (order) = GROUP SUM consumedSumComponentDetail(detail) BY orderComponentDetail(detail) IN documentSum;

// Расчет количеств компонент для произведенных изделий
quantityOutputProductOrder 'Кол-во изделий в заказе (произведенных)' (product, order) = GROUP SUM outputQuantityProductDetail(productDetail)
    BY productProductDetail(productDetail), orderProductDetail(productDetail);

quantityOutputBOMOrder 'Кол-во спецификаций (произведенных)' (BOM, order) = [= GROUP MAX quantityOutputProductOrder(product, order)/ quantityProduct(product)
    BY BOMProduct(product), order](BOM, order) PERSISTENT;

recBruttoQuantityOutputBOMOrderSku 'Кол-во для произ-го' (BOM, order, sku) = GROUP SUM quantityOutputBOMOrder(BOM, order) * recBruttoQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY BOM, order, sku;
recBruttoQuantityOutputBOMOrderComponent 'Рекур.кол-во' (BOM, order, component) = GROUP SUM quantityOutputBOMOrder(BOM, order) * recBruttoQuantityBOMComponentDate(BOM, component, dateOrder(order)) BY BOM, order, component;

calcComponentConsumedQuantityComponentDetail (d) = recBruttoQuantityOutputBOMOrderComponent(BOMComponentDetail(d), orderComponentDetail(d), componentComponentDetail(d)) * quantityCoeffComponentDetail(d);
calcSkuConsumedQuantityComponentDetail (d) = recBruttoQuantityOutputBOMOrderSku(BOMComponentDetail(d), orderComponentDetail(d), bruttoSkuComponentDetail(d)) * quantityCoeffComponentDetail(d);
createOutputComponentOrder 'Заполнить списание' = ACTION (order)  {
    consumedQuantityComponentDetail(d) <- calcComponentConsumedQuantityComponentDetail(d) WHERE orderComponentDetail(d) == order AND componentComponentDetail(d);
    consumedQuantityComponentDetail(d) <- calcSkuConsumedQuantityComponentDetail(d) WHERE orderComponentDetail(d) == order AND NOT componentComponentDetail(d);
} TOOLBAR;

backgroundConsumptionOrder 'Цвет' (order) = RGB(212, 255, 212) IF order IS Order;

EXTEND FORM componentDetails
    PROPERTIES(d) READONLY toConsumeComponentDetail
;
DESIGN componentDetails {
    main {
        PROPERTY(toConsumeComponentDetail(d)) { background = #FFFFCC; }
    }
}

// --- Создание списания на основе заказа ---------------- //

FORM consumptionOrders 'Производственные заказы'

    OBJECTS s = Stock FIXED PANEL
//    PROPERTIES (s) READONLY name

    OBJECTS o = Order
    PROPERTIES(o) READONLY isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder, nameComponentsStockOrder, nameProductsStockOrder,
                  fromDateOrder, toDateOrder, quantityProductDetailOrder, sumProductDetailOrder, quantityComponentDetailOrder,
                  nameCalcPriceListTypeOrder, namePriceListTypeOrder, noteOrder
    FILTERS isPostedOrder(o),
            componentsStockOrder(o) == s,
            toConsumeComponentDetailOrder(o)

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, markupProductDetail, priceProductDetail, sumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, quantityComponentDetail

    PROPERTIES(cd) READONLY toConsumeComponentDetail

    FILTERS orderComponentDetail(cd)==o

;

DESIGN consumptionOrders {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = CONTAINERV;
            MOVE o.box;
            NEW documentDetail {
                fill = 1;
                type = TABBED;
                MOVE cd.box {
                    caption = 'Компоненты';
                }
                MOVE pd.box {
                    caption = 'Изделия';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        PROPERTY(toConsumeComponentDetail(cd)) { background = #FFFFCC; }
    }
}

fillOrderUserConsumption 'Заполнить на основе производственного заказа' =  ACTION (userConsumption) {
    FORM consumptionOrders OBJECTS s = stockUserConsumption(userConsumption) MODAL;

    IF formResult() == FormResult.ok THEN {
        LOCAL productionOrder = Order();
        ASSIGN productionOrder() <- chosenObject('o');

        FOR orderComponentDetail(componentDetail) == productionOrder() ADDOBJ d = UserConsumptionDetail DO {
            ASSIGN userConsumptionUserConsumptionDetail(d) <- userConsumption;
            ASSIGN componentDetailUserConsumptionDetail(d) <- componentDetail;
            ASSIGN skuUserConsumptionDetail(d) <- skuComponentDetail(componentDetail);
            ASSIGN quantityUserConsumptionDetail (d) <- toConsumeComponentDetail(componentDetail);              // возможно надо quantityComponentDetail   ?
        }
    }
} IN order;

// Товарный отчет
@implementStockDocumentLedgerOutOver(Consumption, stock);

typeStockDocumentLedgerConsumption 'Тип процесса' (ledger) = ABSTRACT VARSTRING[50] (Consumption) PERSISTENT;
sumItemOutStockDocumentLedgerConsumption 'Сумма расхода, товар' (ledger) = ABSTRACT NUMERIC[16,2] (Consumption) PERSISTENT;

//EXTEND CLASS Consumption : OutStockDocumentLedger;
//numberStockDocumentLedgerConsumption = ABSTRACT STRING[18] (Consumption) PERSISTENT;
//seriesStockDocumentLedgerConsumption = ABSTRACT STRING[2] (Consumption) PERSISTENT;
//seriesStockDocumentLedger (ledger) += OVERRIDE seriesConsumption(ledger), seriesStockDocumentLedgerConsumption(ledger);
//numberStockDocumentLedger (ledger) += OVERRIDE numberConsumption(ledger), numberStockDocumentLedgerConsumption(ledger);
//dateTimeStockDocumentLedger (ledger) += dateTimeConsumption(ledger);
//isPostedStockDocumentLedger (ledger) += isPostedConsumption(ledger);
//isClosedStockDocumentLedger (ledger) += isClosedConsumption(ledger);
//stockStockDocumentLedger (ledger) += stockConsumption(ledger);
//descriptionStockDocumentLedger (ledger) += descriptionConsumption(ledger);

typeStockDocumentLedger(l) += OVERRIDE 'Списание сырья (пр-во)' IF l IS Consumption, typeStockDocumentLedgerConsumption(l);
sumItemOutStockDocumentLedger (ledger) += OVERRIDE sumItemConsumptionDetailConsumption(ledger), sumItemOutStockDocumentLedgerConsumption(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerConsumptionDetailConsumption(ledger);
editStockDocumentLedger(l) += ACTION editConsumption(l);
closeStockDocumentLedger(l) += ACTION closeConsumption(l);

// Проводим по регистру
@implementSkuLedgerOutFIFO(ConsumptionDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityConsumptionDetail(ledger);
batchSkuLedger(ledger) += batchConsumptionDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(ConsumptionDetail, stock);
sumOutSkuLedger (ledger) += sumConsumptionDetail(ledger);
stockDocumentLedgerSkuLedger(ledger) += consumptionConsumptionDetail(ledger); 

// Создание агрегированного списания

@defineDocumentHeaderProperty (order, createConsumption, 'Создать документ списания сырья');
@defineDocumentDetailProperty (order, componentDetail, createConsumption, 'Создать документ списания сырья');

@defineOperationProperty(createConsumption, 'Создать документ списания сырья', createContainer);
@deriveDocumentOperationProperty(Order, createConsumption);

EXTEND FORM order
    PROPERTIES(o)  BACKGROUND backgroundConsumptionOrder(o) createConsumptionOrder
    PROPERTIES(o)  READONLY BACKGROUND backgroundConsumptionOrder(o) SHOWIF createConsumptionOrder(o) consumedSumComponentDetailOrder
    PROPERTIES(cd) BEFORE deletecd BACKGROUND backgroundConsumptionOrder(o) SHOWIF createConsumptionOrder(o) consumedQuantityComponentDetail, consumedSumComponentDetail
    PROPERTIES(o)  TODRAW cd createOutputComponentOrder SHOWIF createConsumptionOrder(o)
;
DESIGN order {
    headerRow112 {
        NEW headerRow1121 {
            caption = 'Списание';
            MOVE PROPERTY(createConsumptionOrder(o));
        }
    }

    o.documentSum {
        MOVE PROPERTY(consumedSumComponentDetailOrder(o)) AFTER PROPERTY(sumComponentDetailOrder(o)) { preferredCharWidth = 13;}
    }
}

EXTEND FORM orders
            PROPERTIES(cd) BACKGROUND backgroundConsumptionOrder(o) SHOWIF createConsumptionOrder(o) READONLY consumedQuantityComponentDetail,
                           consumedSumComponentDetail
;

CLASS OrderConsumption 'Списание сырья на основе заказа' : Consumption;
CLASS OrderConsumptionDetail 'Строка списания сырья на основе заказа' : ConsumptionDetail;

@defineDocumentTables(orderConsumption);

@defineDocumentAggregationHeader(order, orderConsumption, createConsumption);
needToConsumptionDetailComponentDetail (d) = createConsumptionComponentDetail(d) AND consumedQuantityComponentDetail(d) >0;
@defineAggregation(componentDetail, orderConsumptionDetail, needToConsumptionDetail);

orderConsumptionOrderConsumptionDetail (detail) = orderConsumptionOrder(orderComponentDetail(componentDetailOrderConsumptionDetail(detail)));
consumptionConsumptionDetail(detail) += orderConsumptionOrderConsumptionDetail(detail);
@defineDocumentDetailIndex(orderConsumption);

dateOrderConsumptionDetail 'Дата' (orderConsumptionDetail) = dateComponentDetail(componentDetailOrderConsumptionDetail(orderConsumptionDetail));
timeOrderConsumptionDetail 'Время' (orderConsumptionDetail) = timeComponentDetail(componentDetailOrderConsumptionDetail(orderConsumptionDetail));
dateTimeOrderConsumptionDetail 'Дата/время' (orderConsumptionDetail) = dateComponentDetail(componentDetailOrderConsumptionDetail(orderConsumptionDetail));

dateConsumption(consumption) += dateOrderConsumption(consumption);
timeConsumption(consumption) += timeOrderConsumption(consumption);

stockConsumption(consumption) += componentsStockOrder(orderOrderConsumption(consumption));
isPostedConsumption(consumption) += isPostedOrder(orderOrderConsumption(consumption));
isClosedConsumption(consumption) += isClosedOrder(orderOrderConsumption(consumption));

numberOrderConsumption 'Номер документа' (orderConsumption) = numberOrder(orderOrderConsumption(orderConsumption));
numberConsumption(consumption) += numberOrderConsumption(consumption);

seriesOrderConsumption 'Серия документа' (orderConsumption) = seriesOrder(orderOrderConsumption(orderConsumption));
seriesConsumption(consumption) += seriesOrderConsumption(consumption);

seriesNumberOrderConsumption 'Серия/номер документа' (orderConsumption) = seriesNumberOrder(orderOrderConsumption(orderConsumption));

noteConsumption(consumption) += noteOrder(orderOrderConsumption(consumption));
currencyConsumption (consumption) += currencyComponentOrder(orderOrderConsumption(consumption));

priceListTypeConsumption(consumption) += priceListTypeOrder(orderOrderConsumption(consumption));

@defineDocumentDescription(orderConsumption, OrderConsumptionDetail, 'Списание сырья на основе заказа');
descriptionConsumption (consumption) += descriptionOrderConsumption(consumption);


componentDetailConsumptionDetail (consumptionDetail) += componentDetailOrderConsumptionDetail(consumptionDetail);
skuConsumptionDetail(consumptionDetail) +=  skuComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));
batchConsumptionDetail(consumptionDetail) +=  batchComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));
quantityConsumptionDetail(consumptionDetail) += consumedQuantityComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));

priceConsumptionDetail(consumptionDetail) += priceComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));
sumConsumptionDetail(consumptionDetail) += consumedSumComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));

editConsumption(consumption) += ACTION EXEC editOrder(orderOrderConsumption(consumption));
closeConsumption(consumption) += ACTION EXEC closeOrder(orderOrderConsumption(consumption));
// --------------------------- Формы Списания ---------------------------------

FORM userConsumption 'Списание сырья'
    OBJECTS o = UserConsumption FIXED PANEL
    PROPERTIES (o) isPostedUserConsumption, nameStockUserConsumption ON CHANGE changeStockCompanyUserConsumption(o), nameNumeratorUserConsumption, numberUserConsumption, seriesUserConsumption, dateUserConsumption, timeUserConsumption,
                   nameCurrencyUserConsumption, namePriceListTypeUserConsumption, noteUserConsumption,
                   countUserConsumptionDetailUserConsumption, quantityUserConsumptionDetailUserConsumption, sumUserConsumptionDetailUserConsumption,
                   fillOrderUserConsumption, ordersConsumption READONLY

    OBJECTS d = UserConsumptionDetail
    PROPERTIES (d) indexUserConsumptionDetail, idBarcodeSkuUserConsumptionDetail, nameSkuUserConsumptionDetail, shortNameUOMSkuUserConsumptionDetail,
                   nameBatchUserConsumptionDetail ON CHANGE changeBatchUserConsumptionDetail(d), namePriceListTypeUserConsumptionDetail, 
                   quantityUserConsumptionDetail, priceUserConsumptionDetail, sumUserConsumptionDetail,
                   descriptionIndexComponentDetailUserConsumptionDetail, ADDOBJ, deleted = DELETESESSION

    PROPERTIES(o) TODRAW d fillDocumentConsumption, addDetailDialogSkuStockUserConsumptionDetailUserConsumption,
                           addDetailInputBarcodeUserConsumptionDetailUserConsumption, deleteUserConsumptionDetailUserConsumption
    FILTERS userConsumptionUserConsumptionDetail(d) == o

    EVENTS
        ON OK prePostUserConsumption(o)

    HINTTABLE LIST dateTimeUserConsumptionDetail, skuUserConsumptionDetail, stockUserConsumptionDetail,
                   priceListTypeUserConsumptionDetail, currencyUserConsumptionDetail, priceUserConsumptionDetail

    EDIT UserConsumption OBJECT o
;

DESIGN userConsumption {

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                type = CONTAINERV;

                MOVE o.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPostedUserConsumption(o)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameStockUserConsumption(o));
                    MOVE PROPERTY(nameNumeratorUserConsumption(o));
                    MOVE PROPERTY(numberUserConsumption(o));
                    MOVE PROPERTY(seriesUserConsumption(o));
                    MOVE PROPERTY(dateUserConsumption(o));
                    MOVE PROPERTY(timeUserConsumption(o));
                }
                NEW headerRow12 {
                    type = CONTAINERV;
                    MOVE o.documentPrm {
                        type = CONTAINERH;
                    }
                    MOVE o.order{
                        type = CONTAINERH;
                    }
                }
            }

            MOVE o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserConsumptionDetailUserConsumption(o)) { preferredCharWidth = 13;}
    }
}
WHEN SESSION FORMS userConsumption CHANGED(batchUserConsumptionDetail(detail)) DO {
    skuUserConsumptionDetail (detail)  <- skuBatch(batchUserConsumptionDetail(detail)) WHERE batchUserConsumptionDetail(detail);
}
//WHEN SESSION FORMS userConsumption 
//    CHANGED(skuUserConsumptionDetail(detail)) OR CHANGED(batchUserConsumptionDetail(detail)) OR CHANGED(stockUserConsumptionDetail(detail)) OR CHANGED (dateTimeUserConsumptionDetail(detail)) DO
//    priceUserConsumptionDetail (detail)  <- IF batchUserConsumptionDetail(detail)
//                    THEN priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batchUserConsumptionDetail(detail), stockUserConsumptionDetail(detail), dateTimeUserConsumptionDetail(detail))
//                    ELSE priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, skuUserConsumptionDetail(detail), stockUserConsumptionDetail(detail), dateTimeUserConsumptionDetail(detail));
                    
editConsumptionDetail 'Редактировать' = ABSTRACT ACTION LIST  (ConsumptionDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserConsumptionDetail(d) = ACTION (d) NEWSESSION {
    FORM userConsumption OBJECTS o = userConsumptionUserConsumptionDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}

editConsumptionDetail(d) += ACTION editUserConsumptionDetail(d);
editSkuLedger(batch) += ACTION editConsumptionDetail(batch);
                       
editComponentDetail(d) = ACTION (d) NEWSESSION {
    FORM order OBJECTS o = orderComponentDetail(d), cd = d MANAGESESSION DOCKEDMODAL;
}

editConsumptionDetail(d) += ACTION editComponentDetail(componentDetailOrderConsumptionDetail(d));

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userConsumption, accountPriceListType, );
@extendFormDocumentSkuStock(userConsumption, userConsumption, o, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userConsumption, accountPriceListType, );
@extendFormDocumentBatchStock(userConsumption, userConsumption, o, legalEntityStock, );

@defineMovementSku(consumptionDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userConsumptionDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(consumptionDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(consumptionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

// История по правой кнопке
@defineBalancesBatch(consumptionDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userConsumptionDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(consumptionDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userConsumptionDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

addUserConsumption 'Добавить' = ACTION ADDFORM UserConsumption;
editUserConsumption 'Редактировать' (userConsumption) = ACTION EDITFORM UserConsumption;
editConsumption(consumption) += ACTION editUserConsumption(consumption);

copyConsumption 'Копировать' = ACTION (userConsumption) NEWSESSION {
    FOR ADDOBJ o = UserConsumption DO {
        ASSIGN stockUserConsumption(o) <- stockUserConsumption(userConsumption);
        ASSIGN currencyUserConsumption(o) <- currencyUserConsumption(userConsumption);
        ASSIGN priceListTypeUserConsumption(o) <- priceListTypeUserConsumption(userConsumption);
        ASSIGN noteUserConsumption(o) <- noteUserConsumption(userConsumption);

        FOR userConsumptionUserConsumptionDetail(userConsumptionDetail) == userConsumption DO {
            FOR ADDOBJ d=UserConsumptionDetail DO {
                ASSIGN userConsumptionUserConsumptionDetail(d) <- o;
                ASSIGN skuUserConsumptionDetail(d) <- skuUserConsumptionDetail(userConsumptionDetail);
                ASSIGN quantityUserConsumptionDetail(d) <- quantityUserConsumptionDetail(userConsumptionDetail);
                ASSIGN priceListTypeUserConsumptionDetail(d) <- priceListTypeUserConsumptionDetail(userConsumptionDetail);
//                ASSIGN priceUserConsumptionDetail(d) <- priceUserConsumptionDetail(userConsumptionDetail);
                ASSIGN componentDetailUserConsumptionDetail(d) <- componentDetailUserConsumptionDetail(userConsumptionDetail);
            }
        }
        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM userConsumption

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuStock(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySkuUserConsumptionStock(ks, o, st) 'F9'
;

EXTEND FORM userConsumption

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchStock(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityBatchUserConsumptionStock(b, o, sto) 'F9'
;


isUserOpenedConsumption(o)=  isOpenedConsumption(o) AND isUserConsumption(o);
FORM consumptions 'Списания сырья'
    OBJECTS o = Consumption
    PROPERTIES (o) READONLYIF isReadonly() isClosedConsumption, isPostedConsumption, numberConsumption, seriesConsumption, dateConsumption, timeConsumption,
                            nameStockConsumption, nameCurrencyConsumption, namePriceListTypeConsumption
    PROPERTIES (o) READONLY countConsumptionDetailConsumption, quantityConsumptionDetailConsumption, sumConsumptionDetailConsumption, ordersConsumption
    PROPERTIES (o) READONLYIF isReadonly() noteConsumption

    PROPERTIES (o) READONLY FORCE PANEL createdNameUserUserConsumption, createdTimeUserConsumption, createdHostnameComputerUserConsumption, 
                                        postedNameUserUserConsumption, postedTimeUserConsumption, postedHostnameComputerUserConsumption

    PROPERTIES ()  addUserConsumption TODRAW o
    PROPERTIES (o) editConsumption SHOWIF isOpenedConsumption(o), copyConsumption
    PROPERTIES (o) closeUserConsumption SHOWIF isOpenedUserConsumption(o), openUserConsumption SHOWIF isClosedUserConsumption(o)       
    PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserOpenedConsumption(o)

    OBJECTS d=ConsumptionDetail
    PROPERTIES (d) READONLY indexConsumptionDetail, idBarcodeSkuConsumptionDetail, nameSkuConsumptionDetail, shortNameUOMSkuConsumptionDetail, nameBatchConsumptionDetail
    PROPERTIES (d) READONLY namePriceListTypeConsumptionDetail, quantityConsumptionDetail, priceConsumptionDetail, sumConsumptionDetail,
                   descriptionIndexComponentDetailConsumptionDetail

    FILTERS consumptionConsumptionDetail(d) == o
    DIALOG Consumption OBJECT o
;
@extendFormFilterAccessStock(Consumption, o, consumptions, Production.stock, company);

DESIGN consumptions {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        MOVE o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1 ;
            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE o.created;
                MOVE o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(consumptions);
@defineFilterIsOpened (consumption, consumptions, o);
@defineDocumentLogForm(consumptions, o);
NAVIGATOR {
    manufacturingDocuments {
        ADD consumptions;
    }
}

////////////-----------Создание док-та списания сырья на основе производственного заказа-----------------//////////////

requiredQuantitySubstituteOrderSku 'Кол-во (всего) (компонент)' (order, sku) = GROUP SUM quantityComponentDetail(idetail) BY orderComponentDetail(idetail), skuComponentDetail(idetail);

balance = DATA LOCAL NUMERIC[16,3] (Sku);
left = DATA LOCAL NUMERIC[16,3] (Sku);

addUserConsumptionProductionOrder 'Списание сырья' =  ACTION (order) NEWSESSION {
    balance(sku) <-  NUMERIC[16,3](balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order)));
    left(sku) <-  NUMERIC[16,3](requiredQuantitySubstituteOrderSku(order, sku));

    FOR ADDOBJ o = UserConsumption DO {
        stockUserConsumption(o) <- componentsStockOrder(order);
        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
        noteUserConsumption(o) <- noteOrder(order);
        
        FOR left(sku) > 0 DO {
                
            FOR balance(sku) > 0 ADDOBJ d = UserConsumptionDetail DO {
                userConsumptionUserConsumptionDetail(d) <- o;
                skuUserConsumptionDetail(d) <- sku;
                quantityUserConsumptionDetail(d) <- IF balance(sku) >= left(sku) THEN left(sku) ELSE balance(sku);
                left(sku) <- left(sku) (-) quantityUserConsumptionDetail(d);
                balance(sku) <- balance(sku) (-) quantityUserConsumptionDetail(d);  
            }
             
            IF left(sku) > 0 THEN {
                FOR fromSkuSubstitute(substitute) == sku AND toSkuSubstitute(substitute) == s AND balance(s) > 0 ORDER balance(toSkuSubstitute(substitute))
                    ADDOBJ d = UserConsumptionDetail DO {
                    userConsumptionUserConsumptionDetail(d) <- o;
                    skuUserConsumptionDetail(d) <- s;
                                               
                    quantityUserConsumptionDetail(d) <- IF (balance(s)) >= (left(sku) * multiplierSubstitute(substitute)) 
                                                            THEN (left(sku) * multiplierSubstitute(substitute)) ELSE balance(s);                        
                    
                    left(sku) <- left(sku) (-) (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);                            
                    
                    balance(s) <- balance(s) (-) quantityUserConsumptionDetail(d);
                    
                    IF NOT (left(sku) > 0) THEN
                        BREAK;
                }                                              
            }                                    
        }

        IF [= GROUP SUM 1 IF left(sku) > 0]() THEN {
            MESSAGE 'Внимание !!! Не хватает остатка для компонент : \n' + [= GROUP CONCAT nameSku(sku) IF left(sku) > 0, '\n' ORDER nameSku(sku)]();
        }
        
        FOR left(sku) ADDOBJ d = UserConsumptionDetail DO {
            userConsumptionUserConsumptionDetail(d) <- o;
            skuUserConsumptionDetail(d) <- sku;
            quantityUserConsumptionDetail(d) <- left(sku);
        }
        

        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

//bruttoQuantityUserConsumptionDetail 'Кол-во' = DATA NUMERIC[16,3] (UserConsumptionDetail); // по строке компонента
//
//addUserConsumptionProductionOrder 'Списание сырья' =  ACTION (order) NEWSESSION{
//    balanceSessionSku(sku) <-  NULL;
//    
//    FOR ADDOBJ o = UserConsumption DO {
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        stockUserConsumption(o) <- componentsStockOrder(order);
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        noteUserConsumption(o) <- noteOrder(order);
//        
//        balanceSessionSku(sku) <-  NUMERIC[16,3](balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order))) WHERE balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order));
//        
//        
//        
//        FOR orderComponentDetail(detail) == order DO {
//            LOCAL required = NUMERIC[16,3] ();
//            required() <- NULL;
//            required() <- bruttoQuantityComponentDetail(detail);
//        
//            IF required() > 0 THEN {                    
//                IF balanceSessionSku(skuComponentDetail(detail)) AND required() > 0 THEN { //
//                        FOR ADDOBJ d = UserConsumptionDetail DO {                                 
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                            
//                            skuUserConsumptionDetail(d) <- skuComponentDetail(detail);
//                            quantityUserConsumptionDetail(d) <- IF balanceSessionSku(skuComponentDetail(detail)) >= required()  THEN required() ELSE balanceSessionSku(skuComponentDetail(detail));
//                            required() <- required() (-) quantityUserConsumptionDetail(d);
//                            balanceSessionSku(sk) <- balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d) WHERE sk == skuComponentDetail(detail);  
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- quantityUserConsumptionDetail(d);
//                        }              
//                } 
//                FOR fromSkuSubstitute(substitute) == skuComponentDetail(detail) AND balanceSessionSku(toSkuSubstitute(substitute)) > 0  ORDER balanceSessionSku(toSkuSubstitute(substitute)) DO {
//                    IF required() >0 THEN {
//                        FOR ADDOBJ d = UserConsumptionDetail DO {                    
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            skuUserConsumptionDetail(d) <- toSkuSubstitute(substitute);
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                                                       
//                            quantityUserConsumptionDetail(d) <- IF (balanceSessionSku(toSkuSubstitute(substitute))) >= (required()* multiplierSubstitute(substitute)) 
//                                                                THEN (required()* multiplierSubstitute(substitute)) ELSE balanceSessionSku(toSkuSubstitute(substitute)) ;                        
//                            
//                            required() <- required() (-) (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);                            
//                            
//                            balanceSessionSku(sk) <- (balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d)) WHERE  sk == toSkuSubstitute(substitute);   
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);
//                        }    
//                    }                                              
//                }                                    
//            }
//        }   
//        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
//    }
//} TOOLBAR;
//
//EXTEND FORM consumptions
//    PROPERTIES(d) FORCE GRID READONLY  bruttoQuantityUserConsumptionDetail
//;
//EXTEND FORM userConsumption
//    PROPERTIES(d) FORCE GRID bruttoQuantityUserConsumptionDetail
//;

EXTEND FORM orders
    PROPERTIES(o) addUserConsumptionProductionOrder
;
DESIGN orders {
    createdContainer {
        MOVE PROPERTY(addUserConsumptionProductionOrder(o));
    }
}

//------------- Ограничение на равенство суммы компонентов по изделию ------------------//
equalRestrictionOperation 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Operation);

showEqualRestrictionOperation (o) = createConsumptionOperation(o) AND createOutputOperation(o);
EXTEND FORM operation
    PROPERTIES(o) equalRestrictionOperation SHOWIF showEqualRestrictionOperation(o)
;

DESIGN operation {
    showContainer {
        MOVE PROPERTY(equalRestrictionOperation(o));
    }
}

equalRestrictionOrder 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Order);

@deriveDocumentOperationProperty(Order, equalRestriction);

showEqualRestrictionOrder (order) = createConsumptionOrder(order) AND createOutputOrder(order);

EXTEND FORM order
    PROPERTIES(o) equalRestrictionOrder SHOWIF showEqualRestrictionOrder(o)
;   
DESIGN order {
    headerRow12 {
        NEW constraintContainer AFTER timeRow {
            caption = 'Ограничения';
            MOVE PROPERTY(equalRestrictionOrder(o));
        }
    }
}

outputProductsSumProductDetailBOMOrder 'Сумма изделий' (BOM, order) = GROUP SUM outputProductsSumProductDetail(d) BY BOMProduct(productProductDetail(d)), orderProductDetail(d);
consumedSumComponentDetailBOMOrder 'Сумма компонентов' (BOM, order) = GROUP SUM consumedSumComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);

CONSTRAINT  createConsumptionOrder(order) AND createOutputOrder(order) AND equalRestrictionOrder(order) 
    AND (outputProductsSumProductDetailBOMOrder(BOM, order) != consumedSumComponentDetailBOMOrder(BOM, order))
    MESSAGE 'Сумма списания компонентов для изделия должна быть равной сумме произведенного изделия в производственном заказе'; 
