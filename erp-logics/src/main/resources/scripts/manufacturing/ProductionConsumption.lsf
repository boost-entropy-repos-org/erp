MODULE  ProductionConsumption;

REQUIRE ProductionOrder, ProductionOutput, StockDocumentSkuLedger;
NAMESPACE Production;

// ---------------- Списание матириалов, производство ------------------- //

CLASS ABSTRACT Consumption 'Списание сырья' : Document;
CLASS ABSTRACT ConsumptionDetail 'Строка списания сырья' : DocumentDetail;

CLASS UserConsumption 'Списание сырья (польз.)': Consumption;
CLASS UserConsumptionDetail 'Строка списания сырья (польз.)' : ConsumptionDetail;

@defineDocumentInterface(consumption);
@deriveDocumentHeaderTimePrefix(UserConsumption, );

@defineDocumentInterfaceNumber(consumption);
@defineNumeratedDefault(UserConsumption, 'Списание сырья', 'СС');

@defineDocumentInterfaceStock(consumption, stock, 'Склад', );
@defineDocumentInterfacePosted(consumption);
@defineDocumentInterfaceClosed(consumption);

@defineDocumentInterfaceDescription(consumption, 'Списание сырья');

@defineDocumentInterfaceCurrency(consumption);
@deriveDocumentCurrency(userConsumption, stock);
@defineDocumentInterfacePriceListType(consumption); // объявляем вид цены

@defineDocumentInterfaceDetailSku(consumption, sku);
    
@defineDocumentInterfaceDetailQuantity(consumption);

@defineDocumentInterfaceDetailPrice(consumption); // объявляем цену
priceListTypeUserConsumptionDetail(detail) <- priceListTypeUserConsumption(userConsumptionUserConsumptionDetail(detail))
        WHEN CHANGED(priceListTypeUserConsumption(userConsumptionUserConsumptionDetail(detail)));

@deriveDocumentDetailPricePriceListType (userConsumption, stock); // записываем цену

// суммма
@defineDocumentInterfaceDetailDataSum(consumption);
@deriveDocumentDetailSum(userConsumption, quantity);

// кол-во в шапке документа
@defineDocumentInterfaceHeaderQuantity(consumption);
@defineDocumentHeaderSkuQuantity(consumption, sku);

@defineDocumentHeaderSkuQuantity(userConsumption, sku);
@defineDocumentInterfaceHeaderSum(consumption);

@defineDocumentHeaderItemSum(consumption, , );
@defineDocumentHeaderItemSum(userConsumption, , );

@defineAddDetailDialogSkuStock(userConsumption, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userConsumption, sku);

editConsumption 'Редактировать' = ABSTRACT ACTION LIST (Consumption) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

@implementDocument(consumption);
supplierStockDocument(consumption) += stockConsumption(consumption);

//--  Связь накладной и поставки

//GROUP order 'Информация о заказе' : public;

componentDetailConsumptionDetail = ABSTRACT ComponentDetail (ConsumptionDetail) PERSISTENT;
componentDetailUserConsumptionDetail = DATA ComponentDetail (UserConsumptionDetail);
componentDetailConsumptionDetail(consumptionDetail) += componentDetailUserConsumptionDetail(consumptionDetail);

CONSTRAINT stockConsumptionDetail(detail) != componentsStockComponentDetail(componentDetailUserConsumptionDetail(detail)) OR
           skuConsumptionDetail(detail) != skuComponentDetail(componentDetailUserConsumptionDetail(detail))
    CHECKED BY componentDetailUserConsumptionDetail
        MESSAGE 'Склад сырья и товар в списании сырья и производственном заказе должны соответствовать друг другу';


descriptionIndexComponentDetailConsumptionDetail 'Строка компонента' (detail) = descriptionIndexComponentDetail(componentDetailConsumptionDetail(detail));
descriptionIndexComponentDetailUserConsumptionDetail 'Строка компонента' (detail) = descriptionIndexComponentDetail(componentDetailUserConsumptionDetail(detail));

quantityConsumptionDetailOrderConsumption (order, consumption) = GROUP SUM quantityConsumptionDetail(consumptionDetail) BY orderComponentDetail(componentDetailConsumptionDetail(consumptionDetail)), consumptionConsumptionDetail(consumptionDetail);

ordersConsumption 'Заказы' (consumption) = GROUP CONCAT VARSTRING[255](descriptionOrder(order)) IF quantityConsumptionDetailOrderConsumption(order, consumption) , ', '
                                                BY consumption
                                                ORDER order IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

consumedComponentDetail 'Кол-во (списано)' (componentDetail) = GROUP SUM quantityConsumptionDetail(consumptionDetail) IF isPostedConsumptionDetail(consumptionDetail)
                                                                   BY componentDetailConsumptionDetail(consumptionDetail) PERSISTENT;

toConsumeComponentDetail 'Не списано' (componentDetail) = quantityComponentDetail (componentDetail) (-) consumedComponentDetail(componentDetail);

toConsumeComponentDetailOrder 'Не списано по заказу' (order) =
    GROUP SUM toConsumeComponentDetail(componentDetail) IF toConsumeComponentDetail(componentDetail) > 0
          BY orderComponentDetail(componentDetail);

@defineDocumentDetailQuantityCustomPrefix (componentDetail, consumed, ' (списано)');
@defineDocumentDetailDataSumCustomPrefix (componentDetail, consumed, ' (списано)');

consumedQuantityComponentDetail(detail) <- quantityComponentDetail(detail) WHEN CHANGED(quantityComponentDetail(detail));

consumedSumComponentDetail (detail) <- NUMERIC[16,2](roundPriceCurrency((priceComponentDetail(detail)* consumedQuantityComponentDetail(detail)), currencyComponentDetail(detail)))
        WHEN CHANGED(priceComponentDetail(detail)) OR
             CHANGED(consumedQuantityComponentDetail(detail)) OR
             CHANGED(currencyComponentDetail(detail));

consumedSumComponentDetailOrder 'Сумма списанных компонент' (order) = GROUP SUM consumedSumComponentDetail(detail) BY orderComponentDetail(detail) IN documentSum;

// Расчет количеств компонент для произведенных изделий
quantityOutputProductOrder 'Кол-во изделий в заказе (произведенных)' (product, order) = GROUP SUM outputQuantityProductDetail(productDetail)
    BY productProductDetail(productDetail), orderProductDetail(productDetail);

quantityOutputBOMOrder 'Кол-во спецификаций (произведенных)' (BOM, order) = [= GROUP MAX quantityOutputProductOrder(product, order)/ quantityProduct(product)
    BY BOMProduct(product), order](BOM, order);

recBruttoQuantityOutputOrderSku 'Кол-во для произ-го' (order, sku) = [= GROUP SUM quantityOutputBOMOrder(BOM, order) * recBruttoNodeQuantityBOMSkuDate(BOM, sku, dateOrder(order)) BY order, sku](
    order, sku) IF bruttoQuantitySkuOrder(sku, order);

createOutputComponentOrder 'Заполнить кол-во компонентов для произведенных изделий' = ACTION (order)  {
    FOR recBruttoQuantityOutputOrderSku(order, bruttoSkuComponentDetail(componentDetail)) == q DO {
        ASSIGN consumedQuantityComponentDetail(componentDetail) <- q;
    }
} TOOLBAR;

backgroundConsumptionOrder 'Цвет' (order) = RGB(212, 255, 212) IF order IS Order;

EXTEND FORM componentDetails
    PROPERTIES(d) READONLY toConsumeComponentDetail
;
EXTEND DESIGN componentDetails {
    main {
        PROPERTY(toConsumeComponentDetail(d)) { background = #FFFFCC; }
    }
}

// --- Создание списания на основе заказа ---------------- //

FORM consumptionOrders 'Производственные заказы'

    OBJECTS s = Stock FIXED PANEL
//    PROPERTIES (s) READONLY name

    OBJECTS o = Order
    PROPERTIES(o) READONLY isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder, nameComponentsStockOrder, nameProductsStockOrder,
                  fromDateOrder, toDateOrder, quantityProductDetailOrder, sumProductDetailOrder, quantityComponentDetailOrder,
                  nameCalcPriceListTypeOrder, namePriceListTypeOrder, noteOrder
    FILTERS isPostedOrder(o),
            componentsStockOrder(o) == s,
            toConsumeComponentDetailOrder(o)

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY indexProductDetail, nameSkuProductDetail, nameProductProductDetail, shortNameUOMProductDetail, quantityProductDetail,
                   calcComponentsPriceProductDetail, componentsPriceProductDetail, markupProductDetail, priceProductDetail, sumProductDetail
    FILTERS orderProductDetail(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY indexComponentDetail, nameSkuComponentDetail, nameComponentComponentDetail,
                   shortNameUOMComponentDetail, quantityComponentDetail

    PROPERTIES(cd) READONLY toConsumeComponentDetail

    FILTERS orderComponentDetail(cd)==o

;

DESIGN consumptionOrders FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = CONTAINERV;
            ADD o.box;
            NEW documentDetail {
                fill = 1;
                type = TABBED;
                ADD cd.box {
                    caption = 'Компоненты';
                }
                ADD pd.box {
                    caption = 'Изделия';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        PROPERTY(toConsumeComponentDetail(cd)) { background = #FFFFCC; }
    }
}

fillOrderUserConsumption 'Заполнить на основе производственного заказа' =  ACTION (userConsumption) {
    FORM consumptionOrders OBJECTS s = stockUserConsumption(userConsumption) MODAL;

    IF formResult() == FormResult.ok THEN {
        LOCAL productionOrder = Order();
        ASSIGN productionOrder() <- chosenObject('o');

        FOR orderComponentDetail(componentDetail) == productionOrder() ADDOBJ d = UserConsumptionDetail DO {
            ASSIGN userConsumptionUserConsumptionDetail(d) <- userConsumption;
            ASSIGN componentDetailUserConsumptionDetail(d) <- componentDetail;
            ASSIGN skuUserConsumptionDetail(d) <- skuComponentDetail(componentDetail);
            ASSIGN quantityUserConsumptionDetail (d) <- toConsumeComponentDetail(componentDetail);              // возможно надо quantityComponentDetail   ?
        }
    }
} IN order;

// Товарный отчет
@implementStockDocumentLedgerOut(Consumption, stock);
sumOutStockDocumentLedger (ledger) += sumConsumptionDetailConsumption(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemConsumptionDetailConsumption(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerConsumptionDetailConsumption(ledger);

// Проводим по регистру
@implementSkuLedgerOutFIFO(ConsumptionDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityConsumptionDetail(ledger);
@implementSkuLedgerOutFIFOBalance (consumptionDetail, stock);
sumOutSkuLedger (ledger) += sumConsumptionDetail(ledger);
stockDocumentLedgerSkuLedger(ledger) += consumptionConsumptionDetail(ledger); 

// Создание агрегированного списания

@defineDocumentHeaderProperty (order, createConsumption, 'Создать документ списания сырья');
@defineDocumentDetailProperty (order, componentDetail, createConsumption, 'Создать документ списания сырья');

@defineOperationProperty(createConsumption, 'Создать документ списания сырья', createContainer);
@deriveDocumentOperationProperty(Order, createConsumption);

EXTEND FORM order
    PROPERTIES(o)  BACKGROUND backgroundConsumptionOrder(o) createConsumptionOrder
    PROPERTIES(o)  READONLY BACKGROUND backgroundConsumptionOrder(o) SHOWIF createConsumptionOrder(o) consumedSumComponentDetailOrder
    PROPERTIES(cd) BEFORE deletecd BACKGROUND backgroundConsumptionOrder(o) SHOWIF createConsumptionOrder(o) consumedQuantityComponentDetail, consumedSumComponentDetail
    PROPERTIES(o)  TODRAW cd createOutputComponentOrder SHOWIF createConsumptionOrder(o)
;
EXTEND DESIGN order {
    headerRow112 {
        NEW headerRow1121 {
            caption = 'Списание';
            ADD PROPERTY(createConsumptionOrder(o));
        }
    }

    o.documentSum {
        ADD PROPERTY(consumedSumComponentDetailOrder(o)) AFTER PROPERTY(sumComponentDetailOrder(o)) { preferredCharWidth = 13;}
    }
}

EXTEND FORM orders
            PROPERTIES(cd) BACKGROUND backgroundConsumptionOrder(o) SHOWIF createConsumptionOrder(o) READONLY consumedQuantityComponentDetail,
                           consumedSumComponentDetail
;

CLASS OrderConsumption 'Списание сырья на основе заказа' : Consumption;
CLASS OrderConsumptionDetail 'Строка списания сырья на основе заказа' : ConsumptionDetail;

@defineDocumentTables(orderConsumption);

@defineDocumentAggregationHeader(order, orderConsumption, createConsumption);
@defineAggregation(componentDetail, orderConsumptionDetail, createConsumption);

orderConsumptionOrderConsumptionDetail (detail) = orderConsumptionOrder(orderComponentDetail(componentDetailOrderConsumptionDetail(detail)));
consumptionConsumptionDetail(detail) += orderConsumptionOrderConsumptionDetail(detail);
@defineDocumentDetailIndex(orderConsumption);

dateOrderConsumptionDetail 'Дата' (orderConsumptionDetail) = dateComponentDetail(componentDetailOrderConsumptionDetail(orderConsumptionDetail));
timeOrderConsumptionDetail 'Время' (orderConsumptionDetail) = timeComponentDetail(componentDetailOrderConsumptionDetail(orderConsumptionDetail));
dateTimeOrderConsumptionDetail 'Дата/время' (orderConsumptionDetail) = dateComponentDetail(componentDetailOrderConsumptionDetail(orderConsumptionDetail));

dateConsumption(consumption) += dateOrderConsumption(consumption);
timeConsumption(consumption) += timeOrderConsumption(consumption);

stockConsumption(consumption) += componentsStockOrder(orderOrderConsumption(consumption));
isPostedConsumption(consumption) += isPostedOrder(orderOrderConsumption(consumption));
isClosedConsumption(consumption) += isClosedOrder(orderOrderConsumption(consumption));

numberOrderConsumption 'Номер документа' (orderConsumption) = numberOrder(orderOrderConsumption(orderConsumption));
numberConsumption(consumption) += numberOrderConsumption(consumption);

seriesOrderConsumption 'Серия документа' (orderConsumption) = seriesOrder(orderOrderConsumption(orderConsumption));
seriesConsumption(consumption) += seriesOrderConsumption(consumption);

seriesNumberOrderConsumption 'Серия/номер документа' (orderConsumption) = seriesNumberOrder(orderOrderConsumption(orderConsumption));

noteConsumption(consumption) += noteOrder(orderOrderConsumption(consumption));
currencyConsumption (consumption) += currencyOrder(orderOrderConsumption(consumption));

priceListTypeConsumption(consumption) += priceListTypeOrder(orderOrderConsumption(consumption));

@defineDocumentDescription(orderConsumption, OrderConsumptionDetail, 'Списание сырья на основе заказа');
descriptionConsumption (consumption) += descriptionOrderConsumption(consumption);


componentDetailConsumptionDetail (consumptionDetail) += componentDetailOrderConsumptionDetail(consumptionDetail);
skuConsumptionDetail(consumptionDetail) +=  skuComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));
quantityConsumptionDetail(consumptionDetail) += consumedQuantityComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));

priceConsumptionDetail(consumptionDetail) += priceComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));
sumConsumptionDetail(consumptionDetail) += consumedSumComponentDetail(componentDetailOrderConsumptionDetail(consumptionDetail));

editConsumption(consumption) += ACTION EXEC editOrder(orderOrderConsumption(consumption));

// --------------------------- Формы Списания ---------------------------------

FORM userConsumption 'Списание сырья'
    OBJECTS o = UserConsumption FIXED PANEL
    PROPERTIES (o) isPostedUserConsumption, nameStockUserConsumption, nameNumeratorUserConsumption, numberUserConsumption, seriesUserConsumption, dateUserConsumption, timeUserConsumption,
                   nameCurrencyUserConsumption, namePriceListTypeUserConsumption, noteUserConsumption,
                   countUserConsumptionDetailUserConsumption, quantityUserConsumptionDetailUserConsumption, sumUserConsumptionDetailUserConsumption,
                   fillOrderUserConsumption, ordersConsumption READONLY

    OBJECTS d = UserConsumptionDetail
    PROPERTIES (d) indexUserConsumptionDetail, idBarcodeSkuUserConsumptionDetail, nameSkuUserConsumptionDetail, shortNameUOMSkuUserConsumptionDetail,
                   namePriceListTypeUserConsumptionDetail, quantityUserConsumptionDetail, priceUserConsumptionDetail, sumUserConsumptionDetail,
                   descriptionIndexComponentDetailUserConsumptionDetail, ADDOBJ, DELETESESSION

    PROPERTIES(o) TODRAW d fillDocumentConsumption, addDetailDialogSkuStockUserConsumptionDetailUserConsumption,
                           addDetailInputBarcodeUserConsumptionDetailUserConsumption, deleteUserConsumptionDetailUserConsumption
    FILTERS userConsumptionUserConsumptionDetail(d) == o

    EVENTS
        ON OK prePostUserConsumption(o)

    HINTTABLE LIST dateTimeUserConsumptionDetail, skuUserConsumptionDetail, stockUserConsumptionDetail,
                   priceListTypeUserConsumptionDetail, currencyUserConsumptionDetail, priceUserConsumptionDetail

    EDIT UserConsumption OBJECT o
;

DESIGN userConsumption FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            ADD d.box {
                caption = 'Спецификация';
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                type = CONTAINERV;

                ADD o.documentHeader {
                    type = CONTAINERH;
                    ADD PROPERTY(isPostedUserConsumption(o)) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameStockUserConsumption(o));
                    ADD PROPERTY(nameNumeratorUserConsumption(o));
                    ADD PROPERTY(numberUserConsumption(o));
                    ADD PROPERTY(seriesUserConsumption(o));
                    ADD PROPERTY(dateUserConsumption(o));
                    ADD PROPERTY(timeUserConsumption(o));
                }
                NEW headerRow12 {
                    type = CONTAINERV;
                    ADD o.documentPrm {
                        type = CONTAINERH;
                    }
                    ADD o.order{
                        type = CONTAINERH;
                    }
                }
            }

            ADD o.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserConsumptionDetailUserConsumption(o)) { preferredCharWidth = 13;}
    }
}

editConsumptionDetail 'Редактировать' = ABSTRACT ACTION LIST  (ConsumptionDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserConsumptionDetail(d) = ACTION (d) NEWSESSION {
    FORM userConsumption OBJECTS o = userConsumptionUserConsumptionDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}

editConsumptionDetail(d) += ACTION editUserConsumptionDetail(d);
editSkuLedger(batch) += ACTION editConsumptionDetail(batch);
                       
editComponentDetail(d) = ACTION (d) NEWSESSION {
    FORM order OBJECTS o = orderComponentDetail(d), cd = d MANAGESESSION DOCKEDMODAL;
}

editConsumptionDetail(d) += ACTION editComponentDetail(componentDetailOrderConsumptionDetail(d));


//-- SKU

addUserConsumption 'Добавить' = ACTION ADDFORM UserConsumption;
editUserConsumption 'Редактировать' (userConsumption) = ACTION EDITFORM UserConsumption;
editConsumption(consumption) += ACTION editUserConsumption(consumption);

copyConsumption 'Копировать' = ACTION (userConsumption) NEWSESSION {
    FOR ADDOBJ o = UserConsumption DO {
        ASSIGN stockUserConsumption(o) <- stockUserConsumption(userConsumption);
        ASSIGN currencyUserConsumption(o) <- currencyUserConsumption(userConsumption);
        ASSIGN priceListTypeUserConsumption(o) <- priceListTypeUserConsumption(userConsumption);
        ASSIGN noteUserConsumption(o) <- noteUserConsumption(userConsumption);

        FOR userConsumptionUserConsumptionDetail(userConsumptionDetail) == userConsumption DO {
            FOR ADDOBJ d=UserConsumptionDetail DO {
                ASSIGN userConsumptionUserConsumptionDetail(d) <- o;
                ASSIGN skuUserConsumptionDetail(d) <- skuUserConsumptionDetail(userConsumptionDetail);
                ASSIGN quantityUserConsumptionDetail(d) <- quantityUserConsumptionDetail(userConsumptionDetail);
                ASSIGN priceListTypeUserConsumptionDetail(d) <- priceListTypeUserConsumptionDetail(userConsumptionDetail);
//                ASSIGN priceUserConsumptionDetail(d) <- priceUserConsumptionDetail(userConsumptionDetail);
                ASSIGN componentDetailUserConsumptionDetail(d) <- componentDetailUserConsumptionDetail(userConsumptionDetail);
            }
        }
        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;


createShipmentConsumption 'Создать поставку для Сырья' = ACTION (consumption)  {

    FOR ADDOBJ sh = Sale.UserShipment DO {
        ASSIGN Sale.supplierUserShipment(sh) <- legalEntityStockConsumption(consumption);
        ASSIGN Sale.customerUserShipment(sh) <- legalEntityStockConsumption(consumption);
        ASSIGN Sale.customerStockUserShipment(sh) <- stockConsumption(consumption);
        ASSIGN createPurchaseUserShipment(sh) <- TRUE;
        ASSIGN Sale.noteUserShipment(sh) <- VARSTRING[100](descriptionConsumption(consumption));

        FOR consumptionConsumptionDetail(consumptionDetail)== consumption ADDOBJ d = Sale.UserShipmentDetail DO {
            ASSIGN Sale.userShipmentUserShipmentDetail(d) <- sh;
            ASSIGN Sale.skuUserShipmentDetail(d) <- skuConsumptionDetail(consumptionDetail);
            ASSIGN Sale.quantityUserShipmentDetail(d) <- quantityConsumptionDetail(consumptionDetail);
            ASSIGN Sale.priceUserShipmentDetail(d) <- priceConsumptionDetail(consumptionDetail);
        }

    FORM Sale.userShipment OBJECTS s=sh MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC apply();
        }
    }
} TOOLBAR;


isUserOpenedConsumption(o)=  isOpenedConsumption(o) AND isUserConsumption(o);
FORM consumptions 'Списания сырья'
    OBJECTS o = Consumption
    PROPERTIES (o) READONLYIF isReadonly() isClosedConsumption, isPostedConsumption, numberConsumption, seriesConsumption, dateConsumption, timeConsumption,
                            nameStockConsumption, nameCurrencyConsumption, namePriceListTypeConsumption
    PROPERTIES (o) READONLY countConsumptionDetailConsumption, quantityConsumptionDetailConsumption, sumConsumptionDetailConsumption, ordersConsumption
    PROPERTIES (o) READONLYIF isReadonly() noteConsumption
    PROPERTIES (o) createShipmentConsumption

    PROPERTIES (o) READONLY FORCE PANEL createdNameUserUserConsumption, createdTimeUserConsumption, createdHostnameComputerUserConsumption, 
                                        postedNameUserUserConsumption, postedTimeUserConsumption, postedHostnameComputerUserConsumption

    PROPERTIES ()  addUserConsumption TODRAW o
    PROPERTIES (o) editConsumption SHOWIF isOpenedConsumption(o), copyConsumption
    PROPERTIES (o) closeUserConsumption SHOWIF isOpenedUserConsumption(o), openUserConsumption SHOWIF isClosedUserConsumption(o)       
    PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserOpenedConsumption(o)

    OBJECTS d=ConsumptionDetail
    PROPERTIES (d) READONLY indexConsumptionDetail, idBarcodeSkuConsumptionDetail, nameSkuConsumptionDetail, shortNameUOMSkuConsumptionDetail
    PROPERTIES (d) READONLY namePriceListTypeConsumptionDetail, quantityConsumptionDetail, priceConsumptionDetail, sumConsumptionDetail,
                   descriptionIndexComponentDetailConsumptionDetail

    FILTERS consumptionConsumptionDetail(d) == o
    DIALOG Consumption OBJECT o
;
@extendFormFilterAccessStock(Consumption, o, consumptions, stock, company);

DESIGN consumptions FROM DEFAULT {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        ADD o.box;

        NEW documentDetail {
            type = TABBED;
            fill = 1 ;
            ADD d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                ADD o.created;
                ADD o.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(consumptions);
@defineFilterIsOpened (consumption, consumptions, o);
@defineDocumentLogForm(consumptions, o);
NAVIGATOR {
    manufacturingDocuments {
        ADD consumptions;
    }
}

////////////-----------Создание док-та списания сырья на основе производственного заказа-----------------//////////////

requiredQuantitySubstituteOrderSku 'Кол-во (всего) (компонент)' (order, sku) = GROUP SUM quantityComponentDetail(idetail) BY orderComponentDetail(idetail), skuComponentDetail(idetail);

balance = DATA SESSION NUMERIC[16,3] (Sku);
left = DATA SESSION NUMERIC[16,3] (Sku);

addUserConsumptionProductionOrder 'Списание сырья' =  ACTION (order) NEWSESSION {
    balance(sku) <-  NUMERIC[16,3](balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order)));
    left(sku) <-  NUMERIC[16,3](requiredQuantitySubstituteOrderSku(order, sku));

    FOR ADDOBJ o = UserConsumption DO {
        stockUserConsumption(o) <- componentsStockOrder(order);
        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
        noteUserConsumption(o) <- noteOrder(order);
        
        FOR left(sku) > 0 DO {
                
            FOR balance(sku) > 0 ADDOBJ d = UserConsumptionDetail DO {
                userConsumptionUserConsumptionDetail(d) <- o;
                skuUserConsumptionDetail(d) <- sku;
                quantityUserConsumptionDetail(d) <- IF balance(sku) >= left(sku) THEN left(sku) ELSE balance(sku);
                left(sku) <- left(sku) (-) quantityUserConsumptionDetail(d);
                balance(sku) <- balance(sku) (-) quantityUserConsumptionDetail(d);  
            }
             
            IF left(sku) > 0 THEN {
                FOR fromSkuSubstitute(substitute) == sku AND toSkuSubstitute(substitute) == s AND balance(s) > 0 ORDER balance(toSkuSubstitute(substitute)) 
                    ADDOBJ d = UserConsumptionDetail DO {
                    userConsumptionUserConsumptionDetail(d) <- o;
                    skuUserConsumptionDetail(d) <- s;
                                               
                    quantityUserConsumptionDetail(d) <- IF (balance(s)) >= (left(sku) * multiplierSubstitute(substitute)) 
                                                            THEN (left(sku) * multiplierSubstitute(substitute)) ELSE balance(s);                        
                    
                    left(sku) <- left(sku) (-) (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);                            
                    
                    balance(s) <- balance(s) (-) quantityUserConsumptionDetail(d);
                    
                    IF NOT (left(sku) > 0) THEN
                        BREAK;
                }                                              
            }                                    
        }

        IF [= GROUP SUM 1 IF left(sku) > 0]() THEN {
            MESSAGE 'Внимание !!! Не хватает остатка для компонент : \n' + [= GROUP CONCAT nameSku(sku) IF left(sku) > 0, '\n' ORDER nameSku(sku)]();
        }
        
        FOR left(sku) ADDOBJ d = UserConsumptionDetail DO {
            userConsumptionUserConsumptionDetail(d) <- o;
            skuUserConsumptionDetail(d) <- sku;
            quantityUserConsumptionDetail(d) <- left(sku);
        }
        

        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

//bruttoQuantityUserConsumptionDetail 'Кол-во' = DATA NUMERIC[16,3] (UserConsumptionDetail); // по строке компонента
//
//addUserConsumptionProductionOrder 'Списание сырья' =  ACTION (order) NEWSESSION{
//    balanceSessionSku(sku) <-  NULL;
//    
//    FOR ADDOBJ o = UserConsumption DO {
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        stockUserConsumption(o) <- componentsStockOrder(order);
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        noteUserConsumption(o) <- noteOrder(order);
//        
//        balanceSessionSku(sku) <-  NUMERIC[16,3](balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order))) WHERE balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order));
//        
//        
//        
//        FOR orderComponentDetail(detail) == order DO {
//            LOCAL required = NUMERIC[16,3] ();
//            required() <- NULL;
//            required() <- bruttoQuantityComponentDetail(detail);
//        
//            IF required() > 0 THEN {                    
//                IF balanceSessionSku(skuComponentDetail(detail)) AND required() > 0 THEN { //
//                        FOR ADDOBJ d = UserConsumptionDetail DO {                                 
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                            
//                            skuUserConsumptionDetail(d) <- skuComponentDetail(detail);
//                            quantityUserConsumptionDetail(d) <- IF balanceSessionSku(skuComponentDetail(detail)) >= required()  THEN required() ELSE balanceSessionSku(skuComponentDetail(detail));
//                            required() <- required() (-) quantityUserConsumptionDetail(d);
//                            balanceSessionSku(sk) <- balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d) WHERE sk == skuComponentDetail(detail);  
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- quantityUserConsumptionDetail(d);
//                        }              
//                } 
//                FOR fromSkuSubstitute(substitute) == skuComponentDetail(detail) AND balanceSessionSku(toSkuSubstitute(substitute)) > 0  ORDER balanceSessionSku(toSkuSubstitute(substitute)) DO {
//                    IF required() >0 THEN {
//                        FOR ADDOBJ d = UserConsumptionDetail DO {                    
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            skuUserConsumptionDetail(d) <- toSkuSubstitute(substitute);
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                                                       
//                            quantityUserConsumptionDetail(d) <- IF (balanceSessionSku(toSkuSubstitute(substitute))) >= (required()* multiplierSubstitute(substitute)) 
//                                                                THEN (required()* multiplierSubstitute(substitute)) ELSE balanceSessionSku(toSkuSubstitute(substitute)) ;                        
//                            
//                            required() <- required() (-) (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);                            
//                            
//                            balanceSessionSku(sk) <- (balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d)) WHERE  sk == toSkuSubstitute(substitute);   
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);
//                        }    
//                    }                                              
//                }                                    
//            }
//        }   
//        FORM userConsumption OBJECTS o = o MANAGESESSION DOCKEDMODAL;
//    }
//} TOOLBAR;
//
//EXTEND FORM consumptions
//    PROPERTIES(d) FORCE GRID READONLY  bruttoQuantityUserConsumptionDetail
//;
//EXTEND FORM userConsumption
//    PROPERTIES(d) FORCE GRID bruttoQuantityUserConsumptionDetail
//;

EXTEND FORM orders
    PROPERTIES(o) addUserConsumptionProductionOrder
;
EXTEND DESIGN orders {
    documentDetail{
        NEW actionContainer {
            caption = 'Действия';
            type = CONTAINERH;
            NEW createdContainer {
                caption = 'Создание на основе';
                type = CONTAINERV;
    
                ADD PROPERTY(addUserConsumptionProductionOrder(o));
            }
            NEW machineryContainer {
                caption = 'Загрузка';
                type = CONTAINERV;
            }
        }

    }
}

//------------- Ограничение на равенство суммы компонентов по изделию ------------------//
equalRestrictionOperation 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Operation);

showEqualRestrictionOperation (o) = createConsumptionOperation(o) AND createOutputOperation(o);
EXTEND FORM operation
    PROPERTIES(o) equalRestrictionOperation SHOWIF showEqualRestrictionOperation(o)
;

EXTEND DESIGN operation {
    showContainer {
        ADD PROPERTY(equalRestrictionOperation(o));
    }
}

equalRestrictionOrder 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Order);

@deriveDocumentOperationProperty(Order, equalRestriction);

showEqualRestrictionOrder (order) = createConsumptionOrder(order) AND createOutputOrder(order);

EXTEND FORM order
    PROPERTIES(o) equalRestrictionOrder SHOWIF showEqualRestrictionOrder(o)
;   
EXTEND DESIGN order {
    headerRow12 {
        NEW constraintContainer AFTER timeRow {
            caption = 'Ограничения';
            ADD PROPERTY(equalRestrictionOrder(o));
        }
    }
}

outputProductsSumProductDetailBOMOrder 'Сумма изделий' (BOM, order) = GROUP SUM outputProductsSumProductDetail(d) BY BOMProduct(productProductDetail(d)), orderProductDetail(d);
consumedSumComponentDetailBOMOrder 'Сумма компонентов' (BOM, order) = GROUP SUM consumedSumComponentDetail(d) BY BOMComponentDetail(d), orderComponentDetail(d);

CONSTRAINT  createConsumptionOrder(order) AND createOutputOrder(order) AND equalRestrictionOrder(order) 
    AND (outputProductsSumProductDetailBOMOrder(BOM, order) != consumedSumComponentDetailBOMOrder(BOM, order))
    MESSAGE 'Сумма списания компонентов для изделия должна быть равной сумме произведенного изделия в производственном заказе'; 
