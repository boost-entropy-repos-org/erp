MODULE  Menu;

REQUIRE Stock,
        Numerator,
        Barcode,
        Document,
        PriceListType,
        Manufacturing,
        MenuOperation,
        Utils;

NAMESPACE Menu;
        
//------------------------------Меню--------------------------------//        

CLASS ABSTRACT Menu 'Меню';
CLASS ABSTRACT MenuDetail 'Строка меню';

//nameMenu 'Наименование' = DATA ISTRING[50](Menu);

CLASS UserMenu 'Меню (польз.)' : Menu, Historizable, NumeratedObject;
CLASS UserMenuDetail 'Строка меню (польз.)' : MenuDetail;
CLASS UserMenuPosted 'Проведенное меню (польз.)' : UserMenu, PostedObject;

@defineDocumentInterface(menu);
@defineDocumentInterfaceNumber(menu);
@defineNumeratedObjectDefault(UserMenu, 'Нумератор для меню', 'МЮ');

@defineDocumentInterfaceDataStock(menu, stock, 'Склад', );

@defineDocumentInterfacePosted(menu);

@defineDocumentClosed (menu);

@defineDocumentInterfaceDescription(menu, 'Меню');

@defineDocumentInterfaceCurrency(menu);
@deriveDocumentCurrency(userMenu, stock);

@defineDocumentInterfaceDetailSku(menu, sku);

@defineDocumentInterfaceDetailPrice(menu); // объявляем цену

@defineDocumentInterfacePriceListType(menu); // объявляем вид цены
priceListTypeUserMenuDetail(detail) <- priceListTypeUserMenu(userMenuUserMenuDetail(detail)) WHEN CHANGED(priceListTypeUserMenu(userMenuUserMenuDetail(detail)));
@deriveDocumentDetailPricePriceListTypeCustom (userMenuDetail, stock); // записываем цену

compositionMenuDetail 'Состав' = ABSTRACT STRING[255] (MenuDetail) MINCHARWIDTH 30 PREFCHARWIDTH 50;
compositionUserMenuDetail 'Состав' = DATA STRING[255] (UserMenuDetail) MINCHARWIDTH 30 PREFCHARWIDTH 50;
compositionMenuDetail(detail)+= compositionUserMenuDetail(detail);
compositionUserMenuDetail(detail) <-  compositionSku(skuUserMenuDetail(detail)) WHEN CHANGED(skuUserMenuDetail(detail));

groupTypeMenu = ABSTRACT GroupType (Menu);
nameGroupTypeMenu 'Тип классификатора' (menu) = nameGroupType(groupTypeMenu(menu));

groupTypeUserMenu = DATA GroupType (UserMenu);
nameGroupTypeUserMenu 'Тип классификатора' (userMenu) = nameGroupType(groupTypeUserMenu(userMenu));
groupTypeMenu(menu) += groupTypeUserMenu(menu);

productYieldMenuDetail 'Выход' = ABSTRACT STRING[100] (MenuDetail) MINCHARWIDTH 20 PREFCHARWIDTH 20;
productYieldUserMenuDetail 'Выход' = DATA STRING[100] (UserMenuDetail) MINCHARWIDTH 20 PREFCHARWIDTH 20;
productYieldMenuDetail(detail)+= productYieldUserMenuDetail(detail);

// --------------------------- Формы Меню ---------------------------------
editMenu 'Редактировать' = ABSTRACT ACTION LIST (Menu) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

countUserMenuGroup 'Количество позиций в группе' (userMenu,group)= GROUP SUM 1
    BY userMenuUserMenuDetail(detail), groupGroupTypeSku(groupTypeUserMenu(userMenuUserMenuDetail(detail)), skuUserMenuDetail(detail));
countMenuGroup 'Количество позиций в группе' (menu,group)= GROUP SUM 1
    BY menuMenuDetail(detail), groupGroupTypeSku(groupTypeMenu(menuMenuDetail(detail)), skuMenuDetail(detail));

hasParentUserMenuGroup 'Количество позиций в группе' (userMenu, group)=  GROUP SUM countUserMenuGroup(userMenu,child)
    IF isParentGroupGroup(child, group) BY userMenu, group;
hasParentMenuGroup 'Количество позиций в группе' (menu, group)=  GROUP SUM countMenuGroup(menu,child)
    IF isParentGroupGroup(child, group) BY menu, group;

isUserMenuDetailGroup (detail, group)= groupGroupTypeSku(groupTypeUserMenu(userMenuUserMenuDetail(detail)), skuUserMenuDetail(detail))==group;
isMenuDetailGroup (detail, group)= groupGroupTypeSku(groupTypeMenu(menuMenuDetail(detail)), skuMenuDetail(detail))==group;

TABLE menuDetailGroup(MenuDetail, Group);
positionNumberMenuDetailGroup 'Порядок' = ABSTRACT INTEGER (MenuDetail, Group);
positionNumberUserMenuDetailGroup 'Порядок' = DATA INTEGER (UserMenuDetail, Group);
positionNumberMenuDetailGroup(detail, group) += positionNumberUserMenuDetailGroup(detail, group);

TABLE menuGroup(Menu, Group);
positionNumberMenuGroup 'Порядок' = ABSTRACT INTEGER (Menu, Group);
positionNumberUserMenuGroup 'Порядок' = DATA INTEGER (UserMenu, Group);
positionNumberMenuGroup(menu, group) += positionNumberUserMenuGroup(menu, group);
//--
hasParentUserChildGroup 'Количество позиций в группе' (child, group)=  GROUP SUM countUserMenuGroup(userMenu,child)
    IF isParentGroupGroup(child, group) BY child, group;
hasParentChildGroup 'Количество позиций в группе' (child, group)=  GROUP SUM countMenuGroup(menu,child)
    IF isParentGroupGroup(child, group) BY child, group;

hasParentUserDetailGroup (detail,group)= hasParentUserChildGroup(groupGroupTypeSku(groupTypeUserMenu(userMenuUserMenuDetail(detail)), skuUserMenuDetail(detail)), group);
hasParentDetailGroup (detail,group)= hasParentChildGroup(groupGroupTypeSku(groupTypeMenu(menuMenuDetail(detail)), skuMenuDetail(detail)), group);

//---------------------------Формы----------------------------//

FORM userMenu 'Меню'
    OBJECTS m = UserMenu FIXED PANEL
    PROPERTIES (m) objectClassName, nameStockUserMenu, nameNumeratorObject, numberObject, seriesObject, dateUserMenu, timeUserMenu,
                   nameCurrencyUserMenu, namePriceListTypeUserMenu, noteUserMenu, countUserMenuDetailUserMenu,
                   nameGroupTypeUserMenu

    OBJECTS d = UserMenuDetail
    PROPERTIES (d) indexUserMenuDetail, idBarcodeSkuUserMenuDetail, nameSkuUserMenuDetail, shortNameUOMSkuUserMenuDetail, namePriceListTypeUserMenuDetail,
                   priceUserMenuDetail, compositionUserMenuDetail, productYieldUserMenuDetail, ADDOBJ, DELETESESSION

    PROPERTIES(m) TODRAW d deleteUserMenuDetailUserMenu

    FILTERS userMenuUserMenuDetail(d) == m


    TREE treeGroup g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    PROPERTIES(m,g) hasParentUserMenuGroup, positionNumberUserMenuGroup
    FILTERS groupTypeGroup(g) == groupTypeUserMenu(m),
            hasParentUserMenuGroup(m,g)
    ORDER BY positionNumberUserMenuGroup(m,g)

    OBJECTS dd = UserMenuDetail
    PROPERTIES (dd) idBarcodeSkuUserMenuDetail, nameSkuUserMenuDetail, priceUserMenuDetail, compositionUserMenuDetail,
                    productYieldUserMenuDetail

    PROPERTIES (dd,g) positionNumberUserMenuDetailGroup
    FILTERS  isUserMenuDetailGroup(dd,g),
             userMenuUserMenuDetail(dd) == m
    ORDER BY positionNumberUserMenuDetailGroup(dd,g)


    EVENTS
        ON OK prePostUserMenu(m)

    HINTTABLE LIST dateTimeUserMenuDetail, skuUserMenuDetail,stockUserMenuDetail,
                   priceListTypeUserMenuDetail, currencyUserMenuDetail, priceUserMenuDetail

    EDIT UserMenu OBJECT m
;

DESIGN userMenu FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            type = TABBED;
            ADD d.box {
                caption = 'Спецификация';
                d.panel {
                    childConstraints = TO THE BOTTOM;
                }
            }
            NEW treeContainer{
                caption = 'Группировка';
                type = SPLITH;
                childConstraints = TO THE RIGHT;
                ADD treeGroup.tree.box { fillHorizontal = 1.0; }
                ADD dd.box {fillHorizontal = 2.0; }
            }
        }

        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD m.documentHeaderGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserMenu);
                    ADD PROPERTY(timeUserMenu);
                    ADD PROPERTY(nameStockUserMenu);
                }
                NEW row1 {
                    childConstraints = TO THE RIGHTBOTTOM;
                    NEW row11 {
                        caption = 'Классификатор';
                        ADD PROPERTY(nameGroupTypeUserMenu);
                    }
                    ADD m.documentPrmGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                    }
                }
            }
            ADD m.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

@defineDocumentInSkuStock(userMenu, sku, stock);
@extendFormDocumentInSkuStock(UserMenu, userMenu, m, treeContainer);

addUserMenu 'Добавить' = ACTION ADDFORM UserMenu;
editUserMenu 'Редактировать' (userMenu) = ACTION EDITFORM UserMenu;
editMenu(menu) += editUserMenu(menu);

copyMenu 'Копировать' = ACTION (userMenu) NEWSESSION {
    FOR ADDOBJ m = UserMenu DO {
        ASSIGN stockUserMenu(m) <- stockUserMenu(userMenu);
        ASSIGN currencyUserMenu(m) <- currencyUserMenu(userMenu);
        ASSIGN priceListTypeUserMenu(m) <- priceListTypeUserMenu(userMenu);
        ASSIGN noteUserMenu(m) <- noteUserMenu(userMenu);
        ASSIGN groupTypeUserMenu(m) <- groupTypeUserMenu(userMenu);
        FOR positionNumberUserMenuGroup(userMenu,group) DO {
            ASSIGN positionNumberUserMenuGroup(m,group) <- positionNumberUserMenuGroup(userMenu,group);
        }
        FOR userMenuUserMenuDetail(userMenuDetail) == userMenu DO {
            FOR ADDOBJ d=UserMenuDetail DO {
                ASSIGN userMenuUserMenuDetail(d) <- m;
                ASSIGN skuUserMenuDetail(d) <- skuUserMenuDetail(userMenuDetail);
                ASSIGN dataStockUserMenuDetail(d) <- dataStockUserMenuDetail(userMenuDetail);
                ASSIGN compositionUserMenuDetail(d) <- compositionUserMenuDetail(userMenuDetail);
                ASSIGN productYieldUserMenuDetail(d) <- productYieldUserMenuDetail(userMenuDetail);
                FOR positionNumberUserMenuDetailGroup(userMenuDetail,group) DO {
                    ASSIGN positionNumberUserMenuDetailGroup(d,group) <- positionNumberUserMenuDetailGroup(userMenuDetail,group);
                }
            }

        }


        FORM userMenu OBJECTS m = m MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;




FORM menus 'Меню'
    OBJECTS m = Menu
    PROPERTIES (m) READONLY isPostedMenu FORCE GRID, numberMenu, seriesMenu, dateMenu, timeMenu,
                            nameStockMenu, nameCurrencyMenu, namePriceListTypeMenu, countMenuDetailMenu,
                            noteMenu, objectClassName

    PROPERTIES (m) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserMenu TODRAW m
    PROPERTIES (m) editMenu, copyMenu
    PROPERTIES     deletem=DELETE(m) FORCE PANEL TOOLBAR  SHOWIF isUserMenu(m)
    OBJECTS d=MenuDetail
    PROPERTIES (d) READONLY indexMenuDetail, idBarcodeSkuMenuDetail, nameSkuMenuDetail, shortNameUOMSkuMenuDetail
    PROPERTIES (d) READONLY namePriceListTypeMenuDetail, priceMenuDetail, compositionMenuDetail, productYieldMenuDetail

    FILTERS menuMenuDetail(d) == m

    DIALOG Menu OBJECT m
;
@extendFormFilterAccess(Menu, m, menus, stock);

DESIGN menus FROM DEFAULT {
    PROPERTY (deletem) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD m.box;

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                ADD m.historyGroup;
                ADD m.postedGroup;
            }
            NEW printTab {
                caption = 'Печать';
                childConstraints = TO THE BOTTOM;
                fillVertical = 1.0;
                fillHorizontal = 1.0;

            }
        }
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(menu, m);
@defineDocumentOperationPriceListType(userMenu, ' меню');
@defineDocumentOperationRole(userMenu);
@deriveDocumentOperationProperty(userMenu, groupType);

NAVIGATOR {
    manufacturingDocuments 'Документы' {
        ADD menus;
    }
    manufacturingMasterData {
        ADD operations;
    }
}



