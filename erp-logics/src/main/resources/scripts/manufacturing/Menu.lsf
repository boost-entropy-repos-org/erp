MODULE  Menu;

REQUIRE Stock,
        Sku,
        StockSkuDocument,
        Numerator,
        Barcode,
        Document,
        PriceListType,
        Manufacturing,
        MenuOperation,
        Utils;

NAMESPACE Menu;
        
//------------------------------Меню--------------------------------//        

CLASS ABSTRACT Menu 'Меню';
CLASS ABSTRACT MenuDetail 'Строка меню';

//nameMenu 'Наименование' = DATA VARISTRING[50](Menu);

CLASS UserMenu 'Меню (польз.)' : Menu;
CLASS UserMenuDetail 'Строка меню (польз.)' : MenuDetail;

@defineDocumentInterface(menu);
@deriveDocumentHeaderTimePrefix(UserMenu, );

@defineDocumentInterfaceNumber(menu);
@defineNumeratedDefault(UserMenu, 'Меню', 'МЮ');

@defineDocumentInterfaceDataStock(menu, stock, 'Склад', );

@defineDocumentInterfacePosted(menu);
@defineDocumentInterfaceClosed(menu);

//@defineDocumentClosed (menu);

@defineDocumentInterfaceDescription(menu, 'Меню');

@defineDocumentInterfaceCurrency(menu);
@deriveDocumentCurrency(userMenu, stock);

@defineDocumentInterfaceDetailSku(menu, sku);

@defineDocumentInterfaceDetailPrice(menu); // объявляем цену

@defineDocumentInterfacePriceListType(menu); // объявляем вид цены
priceListTypeUserMenuDetail(detail) <- priceListTypeUserMenu(userMenuUserMenuDetail(detail)) WHEN CHANGED(priceListTypeUserMenu(userMenuUserMenuDetail(detail)));
@deriveDocumentDetailPricePriceListTypeCustom (userMenuDetail, stock); // записываем цену

compositionMenuDetail 'Состав' = ABSTRACT VARSTRING[255] (MenuDetail) MINCHARWIDTH 30 PREFCHARWIDTH 50;
compositionUserMenuDetail 'Состав' = DATA VARSTRING[255] (UserMenuDetail) MINCHARWIDTH 30 PREFCHARWIDTH 50;
compositionMenuDetail(detail)+= compositionUserMenuDetail(detail);
compositionUserMenuDetail(detail) <-  compositionSku(skuUserMenuDetail(detail)) WHEN CHANGED(skuUserMenuDetail(detail));

groupTypeMenu = ABSTRACT GroupType (Menu);
nameGroupTypeMenu 'Тип классификатора' (menu) = nameGroupType(groupTypeMenu(menu));

groupTypeUserMenu = DATA GroupType (UserMenu);
nameGroupTypeUserMenu 'Тип классификатора' (userMenu) = nameGroupType(groupTypeUserMenu(userMenu)) IN documentPrm;
groupTypeMenu(menu) += groupTypeUserMenu(menu);

productYieldMenuDetail 'Выход' = ABSTRACT VARSTRING[100] (MenuDetail) MINCHARWIDTH 20 PREFCHARWIDTH 20;
productYieldUserMenuDetail 'Выход' = DATA VARSTRING[100] (UserMenuDetail) MINCHARWIDTH 20 PREFCHARWIDTH 20;
productYieldMenuDetail(detail)+= productYieldUserMenuDetail(detail);

// --------------------------- Формы Меню ---------------------------------
editMenu 'Редактировать' = ABSTRACT ACTION LIST (Menu) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

countUserMenuGroup 'Количество позиций в группе' (userMenu,group)= GROUP SUM 1
    BY userMenuUserMenuDetail(detail), groupGroupTypeSku(groupTypeUserMenu(userMenuUserMenuDetail(detail)), skuUserMenuDetail(detail));
countMenuGroup 'Количество позиций в группе' (menu,group)= GROUP SUM 1
    BY menuMenuDetail(detail), groupGroupTypeSku(groupTypeMenu(menuMenuDetail(detail)), skuMenuDetail(detail));

hasParentUserMenuGroup 'Количество позиций в группе' (userMenu, group)=  GROUP SUM countUserMenuGroup(userMenu,child)
    IF isParentGroupGroup(child, group) BY userMenu, group;
hasParentMenuGroup 'Количество позиций в группе' (menu, group)=  GROUP SUM countMenuGroup(menu,child)
    IF isParentGroupGroup(child, group) BY menu, group;

isUserMenuDetailGroup (detail, group)= groupGroupTypeSku(groupTypeUserMenu(userMenuUserMenuDetail(detail)), skuUserMenuDetail(detail))==group;
isMenuDetailGroup (detail, group)= groupGroupTypeSku(groupTypeMenu(menuMenuDetail(detail)), skuMenuDetail(detail))==group;

TABLE menuDetailGroup(MenuDetail, Group);
positionNumberMenuDetailGroup 'Порядок' = ABSTRACT INTEGER (MenuDetail, Group);
positionNumberUserMenuDetailGroup 'Порядок' = DATA INTEGER (UserMenuDetail, Group);
positionNumberMenuDetailGroup(detail, group) += positionNumberUserMenuDetailGroup(detail, group);

TABLE menuGroup(Menu, Group);
positionNumberMenuGroup 'Порядок' = ABSTRACT INTEGER (Menu, Group);
positionNumberUserMenuGroup 'Порядок' = DATA INTEGER (UserMenu, Group);
positionNumberMenuGroup(menu, group) += positionNumberUserMenuGroup(menu, group);
//--
hasParentUserChildGroup 'Количество позиций в группе' (child, group)=  GROUP SUM countUserMenuGroup(userMenu,child)
    IF isParentGroupGroup(child, group) BY child, group;
hasParentChildGroup 'Количество позиций в группе' (child, group)=  GROUP SUM countMenuGroup(menu,child)
    IF isParentGroupGroup(child, group) BY child, group;

hasParentUserDetailGroup (detail,group)= hasParentUserChildGroup(groupGroupTypeSku(groupTypeUserMenu(userMenuUserMenuDetail(detail)), skuUserMenuDetail(detail)), group);
hasParentDetailGroup (detail,group)= hasParentChildGroup(groupGroupTypeSku(groupTypeMenu(menuMenuDetail(detail)), skuMenuDetail(detail)), group);

//---------------------------Формы----------------------------//

FORM userMenu 'Меню'
    OBJECTS m = UserMenu FIXED PANEL
    PROPERTIES (m) isPostedUserMenu, nameGroupTypeUserMenu, nameStockUserMenu, nameNumeratorUserMenu, numberUserMenu, seriesUserMenu, dateUserMenu, timeUserMenu,
                   nameCurrencyUserMenu, namePriceListTypeUserMenu, noteUserMenu, countUserMenuDetailUserMenu


    OBJECTS d = UserMenuDetail
    PROPERTIES (d) indexUserMenuDetail, idBarcodeSkuUserMenuDetail, nameSkuUserMenuDetail, shortNameUOMSkuUserMenuDetail, namePriceListTypeUserMenuDetail,
                   priceUserMenuDetail, compositionUserMenuDetail, productYieldUserMenuDetail, ADDOBJ, DELETESESSION

    PROPERTIES(m) TODRAW d deleteUserMenuDetailUserMenu

    FILTERS userMenuUserMenuDetail(d) == m


    TREE treeGroup g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    PROPERTIES(m,g) hasParentUserMenuGroup, positionNumberUserMenuGroup
    FILTERS groupTypeGroup(g) == groupTypeUserMenu(m),
            hasParentUserMenuGroup(m,g)
    ORDER BY positionNumberUserMenuGroup(m,g)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeGroup(g) DEFAULT

    OBJECTS dd = UserMenuDetail
    PROPERTIES (dd) idBarcodeSkuUserMenuDetail, nameSkuUserMenuDetail, priceUserMenuDetail, compositionUserMenuDetail,
                    productYieldUserMenuDetail

    PROPERTIES (dd,g) positionNumberUserMenuDetailGroup
    FILTERS  isUserMenuDetailGroup(dd,g),
             userMenuUserMenuDetail(dd) == m
    ORDER BY positionNumberUserMenuDetailGroup(dd,g)


    EVENTS
        ON OK prePostUserMenu(m)

    HINTTABLE LIST dateTimeUserMenuDetail, skuUserMenuDetail,stockUserMenuDetail,
                   priceListTypeUserMenuDetail, currencyUserMenuDetail, priceUserMenuDetail

    EDIT UserMenu OBJECT m
;

DESIGN userMenu FROM DEFAULT{

    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{
            fill = 1;
            type = TABBED;
            ADD d.box {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW treeContainer{
                caption = 'Группировка';
                type = SPLITH;

                ADD treeGroup.tree.box;
                ADD dd.box {
                    fill = 2;
                }
            }
        }

        NEW header.box BEFORE specification.box {
            type = CONTAINERH;

            NEW headerRow1 {
                ADD m.documentHeader {                                       
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        ADD PROPERTY(isPostedUserMenu) { preferredCharWidth = 30; }
                        ADD PROPERTY(nameStockUserMenu);
                    }
                    NEW second { 
                        type = CONTAINERH;
                        ADD PROPERTY(nameNumeratorUserMenu);
                        ADD PROPERTY(numberUserMenu);
                        ADD PROPERTY(seriesUserMenu);
                        ADD PROPERTY(dateUserMenu);
                        ADD PROPERTY(timeUserMenu);
                    }                                                               
                }
                ADD m.documentPrm {
                    columns = 3;
                }

            }
            ADD m.documentSum {
                columns = 1;
            }
        }

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

@defineDocumentSkuStockIn(userMenu, sku, stock);
@extendFormDocumentSkuStockIn(UserMenu, userMenu, m, treeContainer);

addUserMenu 'Добавить' = ACTION ADDFORM UserMenu;
editUserMenu 'Редактировать' (userMenu) = ACTION EDITFORM UserMenu;
editMenu(menu) += editUserMenu(menu);

isUserOpenedMenu(m)=  isOpenedMenu(m) AND isUserMenu(m);

copyMenu 'Копировать' = ACTION (userMenu) NEWSESSION {
    FOR ADDOBJ m = UserMenu DO {
        ASSIGN stockUserMenu(m) <- stockUserMenu(userMenu);
        ASSIGN currencyUserMenu(m) <- currencyUserMenu(userMenu);
        ASSIGN priceListTypeUserMenu(m) <- priceListTypeUserMenu(userMenu);
        ASSIGN noteUserMenu(m) <- noteUserMenu(userMenu);
        ASSIGN groupTypeUserMenu(m) <- groupTypeUserMenu(userMenu);
        FOR positionNumberUserMenuGroup(userMenu,group) DO {
            ASSIGN positionNumberUserMenuGroup(m,group) <- positionNumberUserMenuGroup(userMenu,group);
        }
        FOR userMenuUserMenuDetail(userMenuDetail) == userMenu DO {
            FOR ADDOBJ d=UserMenuDetail DO {
                ASSIGN userMenuUserMenuDetail(d) <- m;
                ASSIGN skuUserMenuDetail(d) <- skuUserMenuDetail(userMenuDetail);
                ASSIGN dataStockUserMenuDetail(d) <- dataStockUserMenuDetail(userMenuDetail);
                ASSIGN compositionUserMenuDetail(d) <- compositionUserMenuDetail(userMenuDetail);
                ASSIGN productYieldUserMenuDetail(d) <- productYieldUserMenuDetail(userMenuDetail);
                FOR positionNumberUserMenuDetailGroup(userMenuDetail,group) DO {
                    ASSIGN positionNumberUserMenuDetailGroup(d,group) <- positionNumberUserMenuDetailGroup(userMenuDetail,group);
                }
            }

        }


        FORM userMenu OBJECTS m = m MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;




FORM menus 'Меню'
    OBJECTS m = Menu
    PROPERTIES (m) READONLYIF isReadonly() isClosedMenu, isPostedMenu, numberMenu, seriesMenu, dateMenu, timeMenu,
                   nameStockMenu, nameCurrencyMenu, namePriceListTypeMenu
    PROPERTIES (m) READONLY countMenuDetailMenu
    PROPERTIES (m) READONLYIF isReadonly() noteMenu

    PROPERTIES (m) READONLY FORCE PANEL createdNameUserUserMenu, createdTimeUserMenu, createdHostnameComputerUserMenu, 
                                        postedNameUserUserMenu, postedTimeUserMenu, postedHostnameComputerUserMenu

    PROPERTIES ()  addUserMenu TODRAW m
    PROPERTIES (m) editMenu SHOWIF isOpenedMenu(m), copyMenu
    PROPERTIES (m) closeUserMenu SHOWIF isOpenedUserMenu(m), openUserMenu SHOWIF isClosedUserMenu(m)    
    PROPERTIES     deletem=DELETE(m) FORCE PANEL TOOLBAR  SHOWIF isUserOpenedMenu(m)
    OBJECTS d=MenuDetail
    PROPERTIES (d) READONLY indexMenuDetail, idBarcodeSkuMenuDetail, nameSkuMenuDetail, shortNameUOMSkuMenuDetail
    PROPERTIES (d) READONLY namePriceListTypeMenuDetail, priceMenuDetail, compositionMenuDetail, productYieldMenuDetail

    FILTERS menuMenuDetail(d) == m

    DIALOG Menu OBJECT m
;
@extendFormFilterAccessStock(Menu, m, menus, stock, company);

DESIGN menus FROM DEFAULT {
    PROPERTY (deletem) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        fill = 1;

        ADD m.box {
            fill = 1;
        }

        NEW documentDetail {
            type = TABBED;
            fill = 1;

            ADD d.box {
                fill = 1;
                caption = 'Спецификация';

            }
            NEW documentHistory {
                caption = 'История';

                ADD m.created;
                ADD m.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                type = CONTAINERV;
            }
        }
    }
}
@extendFormEditable(menus);
//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(menu, m);
@defineDocumentOperationPriceListType(userMenu, ' меню');
@defineDocumentOperationRole(userMenu);
@deriveDocumentOperationProperty(userMenu, groupType);


NAVIGATOR {
    manufacturingDocuments 'Документы' {
        ADD menus;
    }
    manufacturingMasterData {
        ADD operations;
    }
}



