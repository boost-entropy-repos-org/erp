MODULE SaleLedger;

REQUIRE System, Stock, Tax, EmployeeStock, Sale, PriceRound, StockSkuDocument, SaleOperation;

CLASS ABSTRACT SaleLedger 'Продажа товара';
TABLE saleLedger(SaleLedger);

dateTimeSaleLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (SaleLedger) PERSISTENT INDEXED;
hourSaleLedger 'Час' (ledger) = extractHour(dateTimeSaleLedger(ledger));  
dateSaleLedger 'Дата' (ledger) = toDate(dateTimeSaleLedger(ledger)) PERSISTENT INDEXED;
nameDOWSaleLedger 'День недели' (ledger) = extractDOWName(dateSaleLedger(ledger));
nameMonthSaleLedger 'Месяц' (ledger) = extractMonthName(dateSaleLedger(ledger));

isPostedSaleLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (SaleLedger) PERSISTENT;

skipSaleLedger 'Не проводить' (ledger) = ABSTRACT BOOLEAN (SaleLedger) PERSISTENT; 

activeSaleLedger (ledger) = isPostedSaleLedger(ledger) AND NOT skipSaleLedger(ledger);

skuSaleLedger (ledger) = ABSTRACT Sku (SaleLedger) PERSISTENT INDEXED;
nameSkuSaleLedger 'SKU' (ledger) = nameSku(skuSaleLedger(ledger));

canonicalNameSkuGroupSaleLedger 'Группа (полная)' (ledger) = canonicalNameGroup(skuGroupSku(skuSaleLedger(ledger)));
nameSkuGroup1SkuSaleLedger 'Категория' = nameSkuGroup1Sku(skuSaleLedger(ledger));
nameSkuGroup2SkuSaleLedger 'Направление' = nameSkuGroup2Sku(skuSaleLedger(ledger));
nameSkuGroup3SkuSaleLedger 'Группа' = nameSkuGroup3Sku(skuSaleLedger(ledger));
nameSkuGroup4SkuSaleLedger 'Подгруппа' = nameSkuGroup4Sku(skuSaleLedger(ledger));
nameSkuGroup5SkuSaleLedger 'Субгруппа' = nameSkuGroup5Sku(skuSaleLedger(ledger));

stockSaleLedger (ledger) = ABSTRACT Stock (SaleLedger) PERSISTENT INDEXED;
nameStockSaleLedger 'Склад' (ledger) = nameStock(stockSaleLedger(ledger));

operationSaleLedger  (ledger) = ABSTRACT Sale.Operation (SaleLedger) PERSISTENT;
nameOperationSaleLedger 'Операция' (ledger) = nameOperation(operationSaleLedger (ledger));

descriptionSaleLedger 'Название документа' (ledger) = ABSTRACT VARSTRING[200] (SaleLedger) PERSISTENT;
numberDocumentSaleLedger 'Номер документа' (ledger) = ABSTRACT STRING[18] (SaleLedger) PERSISTENT;

quantitySaleLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (SaleLedger) PERSISTENT;

sumSaleLedger 'Сумма продажи' (ledger) = ABSTRACT NUMERIC[16,2] (SaleLedger) PERSISTENT;

costSumSaleLedger 'Себестоимость продажи' (ledger) = ABSTRACT NUMERIC[16,3] (SaleLedger) PERSISTENT;

customerSaleLedger (ledger) = ABSTRACT LegalEntity (SaleLedger) PERSISTENT INDEXED;
nameCustomerSaleLedger 'Покупатель' (ledger) = nameLegalEntity(customerSaleLedger(ledger));

inCustomerSku 'Кол-во продано' (legalEntity, sku)= GROUP SUM quantitySaleLedger(ledger) IF activeSaleLedger(ledger)
    BY customerSaleLedger(ledger), skuSaleLedger(ledger) PERSISTENT;
prevInCustomerSku 'Были продажи (пред.)' (legalEntity, sku) = PREV(inCustomerSku(legalEntity, sku));

sumSoldTypeExchangeSaleLedger 'Сумма продажи валюта' (typeExchange, saleLedger)= roundPriceCurrency((sumSaleLedger (saleLedger)*
    rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stockSaleLedger(saleLedger)), dateSaleLedger(saleLedger))), currencyTypeExchange(typeExchange));

CONSTRAINT quantitySaleLedger(l) == 0 AND activeSaleLedger(l) MESSAGE 'ошибка: Количество продажи не должно быть равно нулю';

averagePriceSaleLedger 'Цена продажи (средняя)' (saleLedger) = sumSaleLedger(saleLedger)/quantitySaleLedger(saleLedger);

VATSaleLedger (ledger) = ABSTRACT Range (SaleLedger) PERSISTENT;
valueVATSaleLedger 'НДС, %' (ledger) = valueRateRangeDate(VATSaleLedger(ledger), dateSaleLedger(ledger));

sumVATSaleLedger 'Сумма НДС' (ledger) = NUMERIC[16,2]([= X*Y/(100+Y)](
        sumSaleLedger(ledger), valueVATSaleLedger(ledger)));

markupSumSaleLedger 'Надбавка' (ledger) = sumSaleLedger(ledger) (-) sumVATSaleLedger(ledger) (-) costSumSaleLedger(ledger);

//по складу и SKU
quantitySoldSkuStockDate (sku, stock, date) = GROUP SUM quantitySaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

costSumSoldSkuStockDate (sku, stock, date) = GROUP SUM costSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

markupSumSoldSkuStockDate (sku, stock, date) = GROUP SUM markupSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumVATSoldSkuStockDate (sku, stock, date) = GROUP SUM sumVATSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumSoldSkuStockDate (sku, stock, date) = GROUP SUM sumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

//по складу, покупателю и SKU
quantitySoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM quantitySaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

costSumSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM costSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

markupSumSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM markupSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

sumVATSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM sumVATSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

sumSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM sumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

quantitySoldSkuStockWeekDateFromTo 'Продано за неделю (кол-во)' (sku, stock, week, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, extractWeek(date), dateFrom, dateTo;

sumSoldSkuStockWeekDateFromTo 'Продано за неделю (сумма)' (sku, stock, week, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, extractWeek(date), dateFrom, dateTo;

averagePriceSoldSkuStockWeekDateFromTo 'Средняя цена за неделю' (sku, stock, week, dateFrom, dateTo)=  round2(sumSoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) /
        quantitySoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo));

averageSoldSkuStockWeekDateFromTo 'Продано за неделю кол-во/цена' (sku, stock, week, dateFrom, dateTo)= [= FORMULA VARSTRING[30] 'CAST($1 AS TEXT) || \'(\' || CAST($2 AS TEXT) || \')\'']
        (quantitySoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo), averagePriceSoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

quantitySkuSoldWeekDateFromTo 'Продано за неделю (кол-во)' (week, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) BY  week, dateFrom, dateTo;

sumSoldWeekDateFromTo 'Продано за неделю (сумма)' (week, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockWeekDateFromTo(sku, stock, week, dateFrom, dateTo) BY  week, dateFrom, dateTo;

//по складу и SKU
quantitySoldSkuStockDateFromTo 'Продано за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

costSumSoldSkuStockDateFromTo 'Себестоимость проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        costSumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

markupSumSoldSkuStockDateFromTo 'Надбавка проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        markupSumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

sumVATSoldSkuStockDateFromTo 'Сумма НДС проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumVATSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

sumSoldSkuStockDateFromTo 'Продано за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

//по складу, покупателю и SKU
quantitySoldSkuStockCustomerDateFromTo 'Продано за интервал (кол-во)' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

costSumSoldSkuStockCustomerDateFromTo 'Себестоимость проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        costSumSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

markupSumSoldSkuStockCustomerDateFromTo 'Надбавка проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        markupSumSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

sumVATSoldSkuStockCustomerDateFromTo 'Сумма НДС проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        sumVATSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

sumSoldSkuStockCustomerDateFromTo 'Продано за интервал (сумма)' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

//по SKU
quantitySoldSkuDateFromTo 'Продано за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, dateFrom, dateTo;

sumSoldSkuDateFromTo 'Продано за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, dateFrom, dateTo;

quantityDaysDateToFrom 'Кол-во дней' (dateTo, dateFrom) = subtractInteger(dateTo, dateFrom) + 1;
averageSoldInDaySkuStockDateFromTo 'Продаж в день' (sku, stock, dateFrom, dateTo) =  quantitySoldSkuStockDateFromTo(sku, stock, dateFrom, dateTo) / quantityDaysDateToFrom(dateTo, dateFrom);

//------------------------------ Партии --------------------------------//

TABLE saleLedgerBatch (SaleLedger, Batch);

costSaleLedgerBatch 'Расписано из партии' = ABSTRACT NUMERIC[14,3] (SaleLedger, Batch) PERSISTENT;

coeffSaleLedgerBatch 'Удельный вес' (ledger, batch) =
    NUMERIC[22,8](costSaleLedgerBatch(ledger, batch)/quantitySaleLedger(ledger));
    
//по складу и Batch на дату
quantitySoldBatchStockDate (batch, stock, date) = GROUP SUM costSaleLedgerBatch(ledger, batch) IF activeSaleLedger(ledger)
    BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

costSumSoldBatchStockDate (batch, stock, date) = GROUP SUM costSumSaleLedger(ledger) * coeffSaleLedgerBatch(ledger, batch) 
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

markupSumSoldBatchStockDate (batch, stock, date) = GROUP SUM markupSumSaleLedger(ledger) * coeffSaleLedgerBatch(ledger, batch) 
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumVATSoldBatchStockDate (batch, stock, date) = GROUP SUM sumVATSaleLedger(ledger) * coeffSaleLedgerBatch(ledger, batch)  
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumSoldBatchStockDate (batch, stock, date) = GROUP SUM sumSaleLedger(ledger) * coeffSaleLedgerBatch(ledger, batch)  
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;       
    
//по складу и Batch за интервал
    
quantitySoldBatchStockDateFromTo 'Продано за интервал (кол-во)' (batch, stock, dateFrom, dateTo)= GROUP SUM quantitySoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo; 
    
costSumSoldBatchStockDateFromTo 'Себестоимость проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  costSumSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;   
        
markupSumSoldBatchStockDateFromTo 'Надбавка проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  markupSumSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;  
     
sumVATSoldBatchStockDateFromTo 'Сумма НДС проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  sumVATSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;   
                       
sumSoldBatchStockDateFromTo 'Продано за интервал (сумма)' (batch, stock, dateFrom, dateTo)= GROUP SUM  sumSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;    


averagePriceSoldBatchStockDateFromTo 'Цена за интервал' (batch, stock, dateFrom, dateTo) = sumSoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo)/
    quantitySoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo);
averageMarkupSoldBatchStockDateFromTo 'Средний процент надбавки' (batch, stock, dateFrom, dateTo) = markupSumSoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo)/
    costSumSoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo)*100.0;    
    
//---------------------------------Тип обмена---------------------------------------//

sumSoldTypeExchangeSkuStockDate (typeExchange, sku, stock, date)= roundPriceCurrency((sumSoldSkuStockDate (sku, stock, date)/ rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stock), date)), currencyTypeExchange(typeExchange));

sumSoldTypeExchangeSkuStockDateFromTo 'Продано за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSoldTypeExchangeSkuStockDate (typeExchange, sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY typeExchange, sku, stock, dateFrom, dateTo;

sumSoldTypeExchangeSkuDateFromTo 'Продано за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP SUM
        sumSoldTypeExchangeSkuStockDateFromTo(typeExchange, sku, stock, dateFrom, dateTo) BY typeExchange, sku, dateFrom, dateTo;


skuStockAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSoldSkuStock 'Продаж в день' = DATA NUMERIC[14,3] (Sku, Stock);

calcQuantitySoldInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (Sku, Stock);
    LOCAL days = INTEGER (Sku, Stock);
    LOCAL dateCur = DATE();

    ASSIGN dateCur() <- dateFrom;
    ASSIGN balance(sku, stock) <- balanceBSkuStockDate(sku, stock, dateFrom);

    WHILE dateCur() <= dateTo DO {
        ASSIGN days(sku, stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantitySkuStockDate(sku, stock, dateCur()) > 0)));
        ASSIGN balance(sku, stock) <- balance(sku, stock) (+)
                   signedQuantitySkuStockDate(sku, stock, dateCur());
        ASSIGN dateCur() <- sumDate(dateCur(), 1);
    }

    ASSIGN averageSoldSkuStock(sku, stock) <- quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи' = ACTION () NEWSESSION AUTOAPPLY {
    EXEC calcQuantitySoldInterval(subtractDate(currentDate(), skuStockAverageInterval()), subtractDate(currentDate(), 1));
}

EXTEND FORM options
    PROPERTIES() skuStockAverageInterval, calcCurrentQuantitySoldInterval
;
EXTEND DESIGN options {
    sale {
        ADD PROPERTY(skuStockAverageInterval());
        ADD PROPERTY(calcCurrentQuantitySoldInterval());
    }
}

//---------------------------------------------- Формы продаж -------------------------------------//
saleOperation 'Операция' = DATA SESSION Sale.Operation ();
nameSaleOperation 'Операция' = nameOperation(saleOperation());

filterSaleOperationSaleLedger = operationSaleLedger(ledger)==saleOperation() OR (ledger IS SaleLedger AND NOT saleOperation());

saleCustomer 'Покупатель' = DATA SESSION LegalEntity ();
nameSaleCustomer 'Покупатель' = nameLegalEntity(saleCustomer());

filterSaleCustomerSaleLedger = customerSaleLedger(ledger)==saleCustomer() OR (ledger IS SaleLedger AND NOT saleCustomer());

FORM saleLedger 'Регистр продаж'
    PROPERTIES() nameSaleOperation, nameSaleCustomer

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = TypeExchange FIXED PANEL
    PROPERTIES nameType = nameTypeExchange(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY nameMonthSaleLedger, nameDOWSaleLedger, dateSaleLedger, hourSaleLedger, dateTimeSaleLedger, 
                           nameStockSaleLedger, nameCustomerSaleLedger, nameOperationSaleLedger,
                           nameSkuGroup1SkuSaleLedger, nameSkuGroup2SkuSaleLedger, nameSkuGroup3SkuSaleLedger, nameSkuGroup4SkuSaleLedger, nameSkuGroup5SkuSaleLedger, 
                           canonicalNameSkuGroupSaleLedger, nameSkuSaleLedger, descriptionSaleLedger, numberDocumentSaleLedger,
                           quantitySaleLedger, costSumSaleLedger, markupSumSaleLedger, valueVATSaleLedger,
                           sumVATSaleLedger, sumSaleLedger, averagePriceSaleLedger
    PROPERTIES    READONLY sumSoldTypeExchangeSaleLedger (te, s)
    FILTERS activeSaleLedger(s), filterSaleOperationSaleLedger(s), filterSaleCustomerSaleLedger(s)
    FILTERS dateSaleLedger(s) >= dFrom, dateSaleLedger(s) <= dTo
;
@extendFormFilterAccessStock(SaleLedger, s, saleLedger, stock, company);
@extendFormFilterAccessLegalEntity(SaleLedger, s, saleLedger, customer, customer);

DESIGN saleLedger FROM DEFAULT {
    NEW top {
        type = CONTAINERH;
        ADD dates.box {
            type = CONTAINERH;
        }
        NEW operationContainer{
            type = COLUMNS;
            columns = 3;
            caption = 'Фильтры';
            ADD PROPERTY(nameSaleOperation());
            ADD PROPERTY(nameSaleCustomer());
        }            
        ADD te.box {
            type = CONTAINERH;
            PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
        }
    }
    ADD s.box;
    ADD functions.box;
}

toString4 = FORMULA STRING[4] 'CAST($1 AS character(4))' FIXEDCHARWIDTH 4;

FORM saleSkuStock 'Продажи по неделям'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = TypeExchange FIXED PANEL
    PROPERTIES nameType = nameTypeExchange(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS w = INTEGER FIXED GRID
    FILTERS quantitySkuSoldWeekDateFromTo(w, dFrom, dTo)

    TREE stockTree sg = StockGroup PARENT parentStockGroup, ts = Stock
    PROPERTIES READONLY sgTreeName = nameStockGroup(sg), tsTreeName = nameStock(ts)
    FILTERS stockGroupStock(ts) == sg
    FILTERGROUP inactiveStock FILTER 'Активный' 'ctrl F10' activeStock(ts) DEFAULT
    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroup(sk)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT

    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY nameSku(s), stockName = nameStock(st)

    FILTERS           isParentSkuGroupSku(sk, s),
                      (st == ts AND sg IS StockGroup) OR (isParentStockGroupStock(sg, st) AND NOT ts)
    FILTERGROUP inactiveStock FILTER 'Активный' 'ctrl F10' activeStock(st) DEFAULT
    ORDER BY          nameSku(s)

    PROPERTIES        balanceBSkuStockDate(s, st, dFrom), quantitySoldSkuStockWeekDateFromTo(s, st, w, dFrom, dTo)  COLUMNS (w) HEADER toString4 (w),
                      quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo),
                      balanceASkuStockDate(s, st, dTo), sumSoldSkuStockDateFromTo (s, st, dFrom, dTo),  sumSoldTypeExchangeSkuStockDateFromTo(te,s, st, dFrom, dTo)

    FILTERGROUP filtersSold
        FILTER 'Показывать проданные за интервал' 'F11' quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo)

    FILTERGROUP filtersSold
        FILTER 'Показывать с остатками' 'F10' balanceASkuStockDate(s, st, dTo)

;
@extendFormFilterStockAccess(Stock, st, saleSkuStock);
@extendFormFilterStockAccess(Stock, ts, saleSkuStock);
@extendFormFilterStockGroupAccess(StockGroup, sg, saleSkuStock);

DESIGN saleSkuStock FROM DEFAULT {

    NEW topContainer {
        fill = 1;
        type = SPLITH;

        NEW firstCase {
            fill = 1;
            type = SPLITV;

            ADD stockTree.tree.box {caption = 'Магазины'; }
            ADD skuTree.tree.box { caption = 'Товарные группы'; }
        }

        NEW secondCase {
            fill = 3;

            NEW params {
                type = CONTAINERH;
                ADD dates.box {
                    type = CONTAINERH;
                }
                ADD te.box {
                    type = CONTAINERH;
                    PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
                    PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
                }
            }

            ADD sts.box;
        }
    }
    ADD functions.box;
}

NAVIGATOR {

    saleNavigator {
        NEW salesReports 'Отчеты' {
            ADD saleLedger;
            ADD saleSkuStock;
        }
    }
}

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineCustomerDialogStockSku (form)

    form###customer = DATA SESSION LegalEntity ();
    form###nameCustomer 'Покупатель' () = nameLegalEntity(form###customer()) PREFCHARWIDTH 30;
    form###customersFilter (sku) =  inCustomerSku(form###customer(), sku) OR (sku IS Sku AND NOT form###customer());

    EXTEND FORM form
        PROPERTIES() form###nameCustomer
        FILTERS form###customersFilter(s)
    ;

    EXTEND DESIGN form {
        filterContainer {
            ADD PROPERTY(form###nameCustomer());
        }
    }
END
@defineCustomerDialogStockSku(dialogSku);

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSaleLedgerCustom(concrete, skuProp, stockProp)
    dateTimeSaleLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedSaleLedger (ledger) += isPosted###concrete##Detail(ledger);
    skuSaleLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockSaleLedger (ledger) += stockProp###concrete##Detail(ledger);
    descriptionSaleLedger (ledger) += description###concrete##Detail(ledger);
END
META implementSaleLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : SaleLedger;
    @implementSaleLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averageSoldSkuStock READONLY;
EXTEND FORM balanceSkuStock PROPERTIES(s, st) averageSoldSkuStock READONLY;