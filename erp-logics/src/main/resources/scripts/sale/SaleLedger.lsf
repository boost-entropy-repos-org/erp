MODULE SaleLedger;

REQUIRE System, Stock, SkuLedgerTax, EmployeeStock, Sale, PriceRound, StockSkuDocument, SaleOperation;

CLASS ABSTRACT SaleLedger 'Продажа товара';
TABLE saleLedger(SaleLedger) FULL;

dateTimeSaleLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (SaleLedger) PERSISTENT INDEXED;
hourSaleLedger 'Час' (ledger) = extractHour(dateTimeSaleLedger(ledger));  
dateSaleLedger 'Дата' (ledger) = toDate(dateTimeSaleLedger(ledger)) PERSISTENT INDEXED;
nameDOWSaleLedger 'День недели' (ledger) = extractDOWName(dateSaleLedger(ledger));
nameMonthSaleLedger 'Месяц' (ledger) = extractMonthName(dateSaleLedger(ledger));

isPostedSaleLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (SaleLedger) PERSISTENT;

isClosedSaleLedger 'Закрыт' (ledger) = ABSTRACT BOOLEAN (SaleLedger);
allowedEditSaleLedger (d) = NOT isClosedSaleLedger(d) OR allowedEditClosedDocumentsCustomUser(currentUser());

skipSaleLedger 'Не проводить' (ledger) = ABSTRACT BOOLEAN (SaleLedger) PERSISTENT; 

activeSaleLedger (ledger) = isPostedSaleLedger(ledger) AND NOT skipSaleLedger(ledger);

skuSaleLedger (ledger) = ABSTRACT Sku (SaleLedger) PERSISTENT INDEXED;
idSkuSaleLedger 'Код SKU' (s) = idSku(skuSaleLedger(s));
nameSkuSaleLedger 'SKU' (ledger) = nameSku(skuSaleLedger(ledger));

canonicalNameSkuGroupSaleLedger 'Группа (полная)' (ledger) = canonicalNameGroup(skuGroupSku(skuSaleLedger(ledger)));
idSkuGroupSkuSaleLedger 'Группа' = idSkuGroupSku(skuSaleLedger(ledger));
nameSkuGroup1SkuSaleLedger 'Категория' = nameSkuGroup1Sku(skuSaleLedger(ledger));
nameSkuGroup2SkuSaleLedger 'Направление' = nameSkuGroup2Sku(skuSaleLedger(ledger));
nameSkuGroup3SkuSaleLedger 'Группа' = nameSkuGroup3Sku(skuSaleLedger(ledger));
nameSkuGroup4SkuSaleLedger 'Подгруппа' = nameSkuGroup4Sku(skuSaleLedger(ledger));
nameSkuGroup5SkuSaleLedger 'Субгруппа' = nameSkuGroup5Sku(skuSaleLedger(ledger));

stockSaleLedger (ledger) = ABSTRACT Stock (SaleLedger) PERSISTENT INDEXED;
idStockSaleLedger 'Склад' (ledger) = idStock(stockSaleLedger(ledger));
nameStockSaleLedger 'Склад' (ledger) = nameStock(stockSaleLedger(ledger));

operationSaleLedger  (ledger) = ABSTRACT Sale.Operation (SaleLedger) PERSISTENT;
nameOperationSaleLedger 'Операция' (ledger) = nameOperation(operationSaleLedger (ledger));

descriptionSaleLedger 'Название документа' (ledger) = ABSTRACT VARSTRING[200] (SaleLedger) PERSISTENT;
numberDocumentSaleLedger 'Номер документа' (ledger) = ABSTRACT STRING[18] (SaleLedger) PERSISTENT;

quantitySaleLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (SaleLedger) PERSISTENT;

priceSaleLedger 'Цена продажи' (ledger) = ABSTRACT NUMERIC[14,2] (SaleLedger);// todo: PERSISTENT;
sumSaleLedger 'Сумма продажи' (ledger) = ABSTRACT NUMERIC[16,2] (SaleLedger) PERSISTENT;

discountSumSaleLedger 'Сумма скидки' (d) = ABSTRACT NUMERIC[16,2] (SaleLedger) PERSISTENT;

costSumSaleLedger 'Себестоимость продажи' (ledger) = ABSTRACT NUMERIC[16,3] (SaleLedger) PERSISTENT;

customerSaleLedger (ledger) = ABSTRACT LegalEntity (SaleLedger) PERSISTENT INDEXED;
nameCustomerSaleLedger 'Покупатель' (ledger) = nameLegalEntity(customerSaleLedger(ledger));

customerStockSaleLedger (ledger) = ABSTRACT Stock (SaleLedger) PERSISTENT INDEXED;
nameCustomerStockSaleLedger 'Склад покупателя' (ledger) = nameStock(customerStockSaleLedger(ledger));

inCustomerSku 'Кол-во продано' (legalEntity, sku)= GROUP SUM quantitySaleLedger(ledger) IF activeSaleLedger(ledger)
    BY customerSaleLedger(ledger), skuSaleLedger(ledger) PERSISTENT;
prevInCustomerSku 'Были продажи (пред.)' (legalEntity, sku) = PREV(inCustomerSku(legalEntity, sku));

sumSoldTypeExchangeSaleLedger 'Сумма продажи валюта' (typeExchange, saleLedger) = sumSaleLedger(saleLedger)*
    rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stockSaleLedger(saleLedger)), dateSaleLedger(saleLedger));

CONSTRAINT quantitySaleLedger(l) == 0 AND activeSaleLedger(l) MESSAGE 'ошибка: Количество продажи не должно быть равно нулю';

averagePriceSaleLedger 'Цена продажи (средняя)' (saleLedger) = sumSaleLedger(saleLedger)/quantitySaleLedger(saleLedger);
averageDiscountPriceSaleLedger 'Цена продажи (средняя) полная' (saleLedger) = (sumSaleLedger(saleLedger) (+) discountSumSaleLedger(saleLedger))/quantitySaleLedger(saleLedger);

averagePriceSoldTypeExchangeSaleLedger 'Цена продажи (валюта)' (typeExchange, saleLedger)= averagePriceSaleLedger (saleLedger)*
    rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stockSaleLedger(saleLedger)), dateSaleLedger(saleLedger));

VATSaleLedger (ledger) = ABSTRACT Range (SaleLedger) PERSISTENT;
valueVATSaleLedger 'НДС, %' (ledger) = valueRateRangeDate(VATSaleLedger(ledger), dateSaleLedger(ledger)) PERSISTENT;

sumVATSaleLedger 'Сумма НДС' (ledger) = NUMERIC[16,2]([= X*Y/(100+Y)](
        sumSaleLedger(ledger), valueVATSaleLedger(ledger)));

markupSumSaleLedger 'Надбавка' (ledger) = sumSaleLedger(ledger) (-) sumVATSaleLedger(ledger) (-) costSumSaleLedger(ledger);

editSaleLedger 'Редактировать' = ABSTRACT ACTION LIST (SaleLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

TABLE soldSkuStockDate(Sku, Stock, DATE);

//по складу и SKU
quantitySoldSkuStockDate (sku, stock, date) = GROUP SUM quantitySaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT TABLE soldSkuStockDate;

costSumSoldSkuStockDate (sku, stock, date) = GROUP SUM costSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT TABLE soldSkuStockDate;

markupSumSoldSkuStockDate (sku, stock, date) = GROUP SUM markupSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT TABLE soldSkuStockDate;

sumVATSoldSkuStockDate (sku, stock, date) = GROUP SUM sumVATSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT TABLE soldSkuStockDate;

sumSoldSkuStockDate (sku, stock, date) = GROUP SUM sumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT TABLE soldSkuStockDate;

//по складу, покупателю и SKU
quantitySoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM quantitySaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

costSumSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM costSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

markupSumSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM markupSumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

sumVATSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM sumVATSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

sumSoldSkuStockCustomerDate (sku, stock, customer, date) = GROUP SUM sumSaleLedger(ledger) IF activeSaleLedger(ledger)
    BY skuSaleLedger(ledger), stockSaleLedger(ledger), customerSaleLedger(ledger), dateSaleLedger(ledger);// PERSISTENT;

//по складу и SKU
quantitySoldSkuStockDateFromTo 'Продано за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

costSumSoldSkuStockDateFromTo 'Себестоимость проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        costSumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

markupSumSoldSkuStockDateFromTo 'Надбавка проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        markupSumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

sumVATSoldSkuStockDateFromTo 'Сумма НДС проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumVATSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

sumSoldSkuStockDateFromTo 'Продано за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

//по складу, покупателю и SKU
quantitySoldSkuStockCustomerDateFromTo 'Продано за интервал (кол-во)' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

costSumSoldSkuStockCustomerDateFromTo 'Себестоимость проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        costSumSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

markupSumSoldSkuStockCustomerDateFromTo 'Надбавка проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        markupSumSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

sumVATSoldSkuStockCustomerDateFromTo 'Сумма НДС проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        sumVATSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

sumSoldSkuStockCustomerDateFromTo 'Продано за интервал (сумма)' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockCustomerDate(sku, stock, customer, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, customer, dateFrom, dateTo;

//по SKU
quantitySoldSkuDateFromTo 'Продано за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, dateFrom, dateTo;

sumSoldSkuDateFromTo 'Продано за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, dateFrom, dateTo;

quantityDaysDateToFrom 'Кол-во дней' (dateTo, dateFrom) = subtractInteger(dateTo, dateFrom) + 1;
averageSoldInDaySkuStockDateFromTo 'Продаж в день' (sku, stock, dateFrom, dateTo) =  quantitySoldSkuStockDateFromTo(sku, stock, dateFrom, dateTo) / quantityDaysDateToFrom(dateTo, dateFrom);

//------------------------------ Партии --------------------------------//

TABLE saleLedgerBatch (SaleLedger, Batch);

costSaleLedgerBatch 'Расписано из партии' = ABSTRACT NUMERIC[16,5] (SaleLedger, Batch) PERSISTENT;

coeffSaleLedgerBatch 'Удельный вес' (ledger, batch) =
    NUMERIC[22,8](costSaleLedgerBatch(ledger, batch) / quantitySaleLedger(ledger));

sumSaleLedgerBatch 'Сумма продажи' (ledger, batch) = NUMERIC[16,2](sumSaleLedger(ledger) * coeffSaleLedgerBatch(ledger, batch));
costSumSaleLedgerBatch 'Себестоимость' (ledger, batch) = NUMERIC[16,2](costSaleLedgerBatch(ledger, batch) * costBatch(batch));
sumVATSaleLedgerBatch 'Сумма НДС' (s,b) = NUMERIC[16,2](sumSaleLedgerBatch(s,b) * valueVATBatch(b) / (100 + valueVATBatch(b)));
markupSumSaleLedgerBatch 'Надбавка' (ledger, batch) = NUMERIC[16,2](sumSaleLedgerBatch(ledger, batch) - sumVATSaleLedgerBatch(ledger, batch) - costSumSaleLedgerBatch(ledger, batch));

//по складу и Batch на дату
quantitySoldBatchStockDate (batch, stock, date) = GROUP SUM costSaleLedgerBatch(ledger, batch) IF activeSaleLedger(ledger)
    BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

costSumSoldBatchStockDate (batch, stock, date) = GROUP SUM costSumSaleLedgerBatch(ledger, batch) 
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

markupSumSoldBatchStockDate (batch, stock, date) = GROUP SUM markupSumSaleLedgerBatch(ledger, batch) 
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumVATSoldBatchStockDate (batch, stock, date) = GROUP SUM sumVATSaleLedgerBatch(ledger, batch)  
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;

sumSoldBatchStockDate (batch, stock, date) = GROUP SUM sumSaleLedgerBatch(ledger, batch)  
    IF activeSaleLedger(ledger) BY batch, stockSaleLedger(ledger), dateSaleLedger(ledger) PERSISTENT;       
    
//по складу и Batch за интервал
    
quantitySoldBatchStockDateFromTo 'Продано за интервал (кол-во)' (batch, stock, dateFrom, dateTo)= GROUP SUM quantitySoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo; 
    
costSumSoldBatchStockDateFromTo 'Себестоимость проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  costSumSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;   
        
markupSumSoldBatchStockDateFromTo 'Надбавка проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  markupSumSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;  
     
sumVATSoldBatchStockDateFromTo 'Сумма НДС проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  sumVATSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;   
                       
sumSoldBatchStockDateFromTo 'Продано за интервал (сумма)' (batch, stock, dateFrom, dateTo)= GROUP SUM  sumSoldBatchStockDate(batch, stock, date) 
    IF date >= dateFrom AND date <= dateTo BY batch, stock, dateFrom, dateTo;    


averagePriceSoldBatchStockDateFromTo 'Цена за интервал' (batch, stock, dateFrom, dateTo) = sumSoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo)/
    quantitySoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo);
averageMarkupSoldBatchStockDateFromTo 'Средний процент надбавки' (batch, stock, dateFrom, dateTo) = markupSumSoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo)/
    costSumSoldBatchStockDateFromTo(batch, stock, dateFrom, dateTo)*100.0;    
    
//---------------------------------Тип обмена---------------------------------------//

sumSoldTypeExchangeSkuStockDate (typeExchange, sku, stock, date)= roundPriceCurrency((sumSoldSkuStockDate (sku, stock, date)/ rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stock), date)), currencyTypeExchange(typeExchange));

sumSoldTypeExchangeSkuStockDateFromTo 'Продано за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSoldTypeExchangeSkuStockDate (typeExchange, sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY typeExchange, sku, stock, dateFrom, dateTo;

sumSoldTypeExchangeSkuDateFromTo 'Продано за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP SUM
        sumSoldTypeExchangeSkuStockDateFromTo(typeExchange, sku, stock, dateFrom, dateTo) BY typeExchange, sku, dateFrom, dateTo;


skuStockAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSoldSkuStock 'Продаж в день' = DATA NUMERIC[14,3] (Sku, Stock);

calcQuantitySoldInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (Sku, Stock);
    LOCAL days = INTEGER (Sku, Stock);
    LOCAL dateCur = DATE();

    ASSIGN dateCur() <- dateFrom;
    ASSIGN balance(sku, stock) <- balanceBSkuStockDate(sku, stock, dateFrom);

    WHILE dateCur() <= dateTo DO {
        ASSIGN days(sku, stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantitySkuStockDate(sku, stock, dateCur()) > 0) OR (quantitySoldSkuStockDate(sku, stock, dateCur()) > 0)));
        ASSIGN balance(sku, stock) <- balance(sku, stock) (+)
                   signedQuantitySkuStockDate(sku, stock, dateCur());
        ASSIGN dateCur() <- sumDate(dateCur(), 1);
    }

    ASSIGN averageSoldSkuStock(sku, stock) <- quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи' = ACTION () NEWSESSION {
    EXEC calcQuantitySoldInterval(subtractDate(currentDate(), skuStockAverageInterval()), subtractDate(currentDate(), 1));
    apply();
}

EXTEND FORM options
    PROPERTIES() skuStockAverageInterval, calcCurrentQuantitySoldInterval
;
DESIGN options {
    sale {
        MOVE PROPERTY(skuStockAverageInterval());
        MOVE PROPERTY(calcCurrentQuantitySoldInterval());
    }
}

//---------------------------------------------- Формы продаж -------------------------------------//
saleOperation 'Операция' = DATA LOCAL Sale.Operation ();
nameSaleOperation 'Операция' = nameOperation(saleOperation());

filterSaleOperationSaleLedger = operationSaleLedger(ledger)==saleOperation() OR (ledger IS SaleLedger AND NOT saleOperation());

saleCustomer = DATA LOCAL LegalEntity ();
nameSaleCustomer 'Покупатель' = nameLegalEntity(saleCustomer());
filterSaleCustomerSaleLedger = customerSaleLedger(ledger)==saleCustomer() OR (ledger IS SaleLedger AND NOT saleCustomer());

saleCustomerStock  = DATA LOCAL Stock ();
nameSaleCustomerStock 'Склад покупателя' = nameStock(saleCustomerStock());
filterSaleCustomerStockSaleLedger = customerStockSaleLedger(ledger)==saleCustomerStock() OR (ledger IS SaleLedger AND NOT saleCustomerStock());

CONSTRAINT saleCustomer() AND saleCustomerStock() AND NOT inLegalEntityStock(saleCustomer(), saleCustomerStock())
    CHECKED BY saleCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для регистра продаж не имеют связи';     

saleStock  = DATA LOCAL Stock ();
nameSaleStock 'Склад' = nameStock(saleStock());
filterSaleStockSaleLedger = stockSaleLedger(ledger)==saleStock() OR (ledger IS SaleLedger AND NOT saleStock());

idBarcodeSkuSaleLedger 'Штрихкод' (l) = idBarcodeSku(skuSaleLedger(l));

dataInSessionSkuGroup 'Отм.' = DATA LOCAL BOOLEAN (SkuGroup);

levelParentSkuGroup (group) = GROUP MIN levelSkuGroupSkuGroup(group, parent) IF dataInSessionSkuGroup(parent)
    BY group;

inParentSkuGroup (group) = TRUE IF levelParentSkuGroup(group);

inSessionSkuGroup 'Отм.' (group) = OVERRIDE
    inParentSkuGroup(group),
    dataInSessionSkuGroup(group);

sessionConcatSkuGroups 'Группы' () =
    GROUP CONCAT nameSkuGroup(group) IF inSessionSkuGroup(group) AND NOT inSessionSkuGroup(parentSkuGroup(group)),'; ' PREFCHARWIDTH 30;
    
    
countInSessionSkuGroups  = GROUP SUM 1 IF dataInSessionSkuGroup(g);
resetSelectedGroups  'Сбросить отмеченные' = ACTION () {
    dataInSessionSkuGroup(g) <- NULL WHERE g IS SkuGroup ;    
}  
  
FORM filterGroupType 'Фильтр по группам'    
     
     TREE treeGroup g=SkuGroup PARENT parentSkuGroup
     PROPERTIES READONLY orderSkuGroup(g), idSkuGroup(g) SHOWIF showIDs(), nameSkuGroup(g)
     PROPERTIES inSessionSkuGroup(g) ON SHORTCUT resetSelectedGroups()    

     ORDER BY orderSkuGroup(g), nameSkuGroup(g)
     FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(g) 'F5' DEFAULT        
     PROPERTIES resetSelectedGroups() TOOLBAR FORCE PANEL TODRAW g
;   
selectSkuGroups 'Выбор групп' = ACTION () {
    FORM filterGroupType MODAL;
} 

FORM saleLedger 'Регистр продаж'
    PROPERTIES() nameSaleStock, nameSaleOperation, nameSaleCustomer, nameSaleCustomerStock, sessionConcatSkuGroups ON CHANGE selectSkuGroups()

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = TypeExchange FIXED PANEL
    PROPERTIES nameType = nameTypeExchange(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY nameMonthSaleLedger, nameDOWSaleLedger, dateSaleLedger, hourSaleLedger, dateTimeSaleLedger, 
                           nameStockSaleLedger, nameCustomerSaleLedger, nameCustomerStockSaleLedger, nameOperationSaleLedger,
                           nameSkuGroup1SkuSaleLedger, nameSkuGroup2SkuSaleLedger, nameSkuGroup3SkuSaleLedger, nameSkuGroup4SkuSaleLedger, nameSkuGroup5SkuSaleLedger, 
                           canonicalNameSkuGroupSaleLedger, idSkuSaleLedger, nameSkuSaleLedger, idBarcodeSkuSaleLedger, descriptionSaleLedger, numberDocumentSaleLedger,
                           quantitySaleLedger, costSumSaleLedger, markupSumSaleLedger, valueVATSaleLedger,
                           sumVATSaleLedger, sumSaleLedger, discountSumSaleLedger, averagePriceSaleLedger, averageDiscountPriceSaleLedger
    PROPERTIES    READONLY sumSoldTypeExchangeSaleLedger (te, s)    
    PROPERTIES(s) editSaleLedger SHOWIF allowedEditSaleLedger(s)
    
    FILTERS activeSaleLedger(s), filterSaleStockSaleLedger(s), filterSaleOperationSaleLedger(s), filterSaleCustomerSaleLedger(s), filterSaleCustomerStockSaleLedger(s)
    FILTERS dateSaleLedger(s) >= dFrom, dateSaleLedger(s) <= dTo
    
    FILTERS inSessionSkuGroup(skuGroupSku(skuSaleLedger(s))) OR (s IS SaleLedger AND NOT countInSessionSkuGroups())
;
@extendFormFilterAccessStock(SaleLedger, s, saleLedger, stock, company);
@extendFormFilterAccessLegalEntity(SaleLedger, s, saleLedger, customer, customer);

DESIGN saleLedger {
    NEW top {
        type = CONTAINERH;
        MOVE dates.box {
            type = CONTAINERH;
        }            
        MOVE te.box {
            type = CONTAINERH;
            PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
        }
    }
    NEW operationContainer{
        type = CONTAINERH;
        caption = 'Фильтры';
        MOVE PROPERTY(nameSaleStock());
        MOVE PROPERTY(nameSaleOperation());
        MOVE PROPERTY(nameSaleCustomer());
        MOVE PROPERTY(nameSaleCustomerStock()); 
        MOVE PROPERTY(sessionConcatSkuGroups());
    }
    MOVE s.box;
    MOVE functions.box;
}

NAVIGATOR {

    saleNavigator {
        NEW salesReports 'Отчеты' {
            ADD saleLedger;
        }
    }
}

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineCustomerDialogStockSku (form)

    form###customer = DATA LOCAL LegalEntity ();
    form###nameCustomer 'Покупатель' () = nameLegalEntity(form###customer()) PREFCHARWIDTH 30;
    form###customersFilter (sku) =  inCustomerSku(form###customer(), sku) OR (sku IS Sku AND NOT form###customer());

    EXTEND FORM form
        PROPERTIES() form###nameCustomer
        FILTERS form###customersFilter(s)
    ;

    DESIGN form {
        filterContainer {
            MOVE PROPERTY(form###nameCustomer());
        }
    }
END
@defineCustomerDialogStockSku(dialogSku);

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSaleLedgerCustom(concrete, skuProp, stockProp)
    dateTimeSaleLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedSaleLedger (ledger) += isPosted###concrete##Detail(ledger);
    isClosedSaleLedger (ledger) += isClosed###concrete##Detail(ledger);
    skuSaleLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockSaleLedger (ledger) += stockProp###concrete##Detail(ledger);
    descriptionSaleLedger (ledger) += description###concrete##Detail(ledger);
END
META implementSaleLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : SaleLedger;
    @implementSaleLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averageSoldSkuStock READONLY;
EXTEND FORM balanceSkuStock PROPERTIES(s, st) averageSoldSkuStock READONLY;