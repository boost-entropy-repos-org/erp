MODULE SaleLedger;

REQUIRE System, Stock, SkuLedgerTax, EmployeeStock, Sale, PriceRound, StockSkuDocument, SaleOperation;

CLASS ABSTRACT SaleLedger 'Продажа товара';
TABLE saleLedger(SaleLedger) FULL;

dateTime 'Дата/время' (ledger) = ABSTRACT DATETIME (SaleLedger) PERSISTENT INDEXED;
hour 'Час' (SaleLedger ledger) = extractHour(dateTime(ledger));  
date 'Дата' (SaleLedger ledger) = toDate(dateTime(ledger)) PERSISTENT;
nameDOW 'День недели' (SaleLedger ledger) = extractDOWName(date(ledger));
nameMonth 'Месяц' (SaleLedger ledger) = extractMonthName(date(ledger));

isPosted 'Проведен' (ledger) = ABSTRACT BOOLEAN (SaleLedger) PERSISTENT;

isClosed 'Закрыт' (ledger) = ABSTRACT BOOLEAN (SaleLedger);
allowedEdit (SaleLedger d) = NOT isClosed(d) OR allowedEditClosedDocuments(currentUser());

skip 'Не проводить' (ledger) = ABSTRACT CASE OVERRIDE FIRST BOOLEAN (SaleLedger) PERSISTENT; 

active (SaleLedger ledger) = isPosted(ledger) AND NOT skip(ledger);

sku (ledger) = ABSTRACT Sku (SaleLedger) PERSISTENT;
INDEX sku(SaleLedger ledger), date(ledger);
idSku 'Код SKU' (SaleLedger s) = id(sku(s));
nameSku 'SKU' (SaleLedger ledger) = name(sku(ledger));

canonicalNameSkuGroup 'Группа (полная)' (SaleLedger ledger) = canonicalName[Group](skuGroup(sku(ledger)));
idSkuGroupSku 'Группа' = idSkuGroup(sku(SaleLedger ledger));
nameSkuGroup1Sku 'Категория' = nameSkuGroup1(sku(SaleLedger ledger));
nameSkuGroup2Sku 'Направление' = nameSkuGroup2(sku(SaleLedger ledger));
nameSkuGroup3Sku 'Группа' = nameSkuGroup3(sku(SaleLedger ledger));
nameSkuGroup4Sku 'Подгруппа' = nameSkuGroup4(sku(SaleLedger ledger));
nameSkuGroup5Sku 'Субгруппа' = nameSkuGroup5(sku(SaleLedger ledger));

stock (ledger) = ABSTRACT Stock (SaleLedger) PERSISTENT;
INDEX stock(SaleLedger ledger), sku(ledger), date(ledger);
idStock 'Склад' (SaleLedger ledger) = id(stock(ledger));
nameStock 'Склад' (SaleLedger ledger) = name(stock(ledger));

operation  (ledger) = ABSTRACT Sale.Operation (SaleLedger) PERSISTENT;
overNameOperation= ABSTRACT VARISTRING[100] (SaleLedger);
nameOperation 'Операция' (SaleLedger ledger) = OVERRIDE name(operation(ledger)), overNameOperation(ledger);

description 'Название документа' (ledger) = ABSTRACT VARSTRING[200] (SaleLedger) PERSISTENT;
numberDocument 'Номер документа' (ledger) = ABSTRACT VARSTRING[28] (SaleLedger) PERSISTENT;

quantity 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (SaleLedger) PERSISTENT;

price 'Цена продажи' (ledger) = ABSTRACT NUMERIC[16,4] (SaleLedger);// todo: PERSISTENT;
sum 'Сумма продажи' (ledger) = ABSTRACT NUMERIC[18,4] (SaleLedger) PERSISTENT;

discountSum 'Сумма скидки' (d) = ABSTRACT NUMERIC[18,4] (SaleLedger) PERSISTENT;

costSum 'Себестоимость продажи' (ledger) = ABSTRACT CASE OVERRIDE FIRST NUMERIC[16,3] (SaleLedger) PERSISTENT;

customer (ledger) = ABSTRACT LegalEntity (SaleLedger) PERSISTENT INDEXED;
nameCustomer 'Покупатель' (SaleLedger ledger) = name(customer(ledger));

INDEX date(SaleLedger s), stock(s), customer(s);

customerStock (ledger) = ABSTRACT Stock (SaleLedger) PERSISTENT INDEXED;
nameCustomerStock 'Склад покупателя' (SaleLedger ledger) = name(customerStock(ledger));

inCustomer 'Кол-во продано' (legalEntity, sku)= GROUP SUM quantity(SaleLedger ledger) IF active(ledger)
    BY customer(ledger), sku(ledger) PERSISTENT;
prevInCustomer 'Были продажи (пред.)' (LegalEntity legalEntity, Sku sku) = PREV(inCustomer(legalEntity, sku));

sumSold 'Сумма продажи валюта' (TypeExchange typeExchange, SaleLedger saleLedger) = sum(saleLedger)*
    rateOn(typeExchange, currency(stock(saleLedger)), date(saleLedger));

CONSTRAINT quantity(SaleLedger l) == 0 AND active(l) MESSAGE 'ошибка: Количество продажи не должно быть равно нулю';

averagePrice 'Цена продажи (средняя)' (SaleLedger saleLedger) = NUMERIC[16,4](sum(saleLedger) / quantity(saleLedger));
averageDiscountPrice 'Цена продажи (средняя) полная' (SaleLedger saleLedger) = NUMERIC[16,4]((sum(saleLedger) (+) discountSum(saleLedger))/quantity(saleLedger));

averagePriceSold 'Цена продажи (валюта)' (TypeExchange typeExchange, SaleLedger saleLedger)= averagePrice (saleLedger)*
    rateOn(typeExchange, currency(stock(saleLedger)), date(saleLedger));

VAT (ledger) = ABSTRACT Range (SaleLedger) PERSISTENT;
valueVAT 'НДС, %' (SaleLedger ledger) = valueRate(VAT(ledger), date(ledger)) PERSISTENT;

sumVAT 'Сумма НДС' (SaleLedger ledger) = NUMERIC[18,4]([= X*Y/(100+Y)](
        sum(ledger), valueVAT(ledger)));

markupSum 'Надбавка' (SaleLedger ledger) = sum(ledger) (-) sumVAT(ledger) (-) costSum(ledger);

edit 'Редактировать' = ACTION ABSTRACT LIST (SaleLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

TABLE soldSkuStockDate(Sku, Stock, DATE);

//по складу и SKU
quantitySold (sku, stock, date) = GROUP SUM quantity(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) PERSISTENT TABLE soldSkuStockDate;

costSumSold (sku, stock, date) = GROUP SUM costSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) PERSISTENT TABLE soldSkuStockDate;

markupSumSold (sku, stock, date) = GROUP SUM markupSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) PERSISTENT TABLE soldSkuStockDate;

sumVATSold (sku, stock, date) = GROUP SUM sumVAT(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) PERSISTENT TABLE soldSkuStockDate;

sumSold (sku, stock, date) = GROUP SUM sum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) PERSISTENT TABLE soldSkuStockDate;

//по складу, покупателю и SKU
quantitySold (sku, stock, customer, date) = GROUP SUM quantity(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// PERSISTENT;

costSumSold (sku, stock, customer, date) = GROUP SUM costSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// PERSISTENT;

markupSumSold (sku, stock, customer, date) = GROUP SUM markupSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// PERSISTENT;
    
discountSumSold (sku, stock, customer, date) = GROUP SUM discountSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);    

sumVATSold (sku, stock, customer, date) = GROUP SUM sumVAT(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// PERSISTENT;

sumSold (sku, stock, customer, date) = GROUP SUM sum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// PERSISTENT;

//по складу и SKU
quantitySold 'Продано за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, dateFrom, dateTo;

costSumSold 'Себестоимость проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        costSumSold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, dateFrom, dateTo;

markupSumSold 'Надбавка проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        markupSumSold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, dateFrom, dateTo;

sumVATSold 'Сумма НДС проданного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumVATSold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, dateFrom, dateTo;

sumSold 'Продано за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, dateFrom, dateTo;

//по складу, покупателю и SKU
quantitySold 'Продано за интервал (кол-во)' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, Stock stock, LegalEntity customer, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, customer, dateFrom, dateTo;

costSumSold 'Себестоимость проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        costSumSold(Sku sku, Stock stock, LegalEntity customer, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, customer, dateFrom, dateTo;

markupSumSold 'Надбавка проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        markupSumSold(Sku sku, Stock stock, LegalEntity customer, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, customer, dateFrom, dateTo;

sumVATSold 'Сумма НДС проданного за интервал' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        sumVATSold(Sku sku, Stock stock, LegalEntity customer, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, customer, dateFrom, dateTo;

sumSold 'Продано за интервал (сумма)' (sku, stock, customer, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, Stock stock, LegalEntity customer, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, stock, customer, dateFrom, dateTo;

//по SKU
quantitySold 'Продано за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, dateFrom, dateTo;

sumSold 'Продано за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY sku, dateFrom, dateTo;

quantityDays 'Кол-во дней' (DATE dateTo, DATE dateFrom) = daysBetweenDates(dateTo, dateFrom) + 1;
averageSold 'Продаж в день' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =  quantitySold(sku, stock, dateFrom, dateTo) / quantityDays(dateTo, dateFrom);

//------------------------------ Партии --------------------------------//

TABLE saleLedgerBatch (SaleLedger, Batch);

cost 'Расписано из партии' = ABSTRACT NUMERIC[16,5] (SaleLedger, Batch) PERSISTENT;

coeff 'Удельный вес' (SaleLedger ledger, Batch batch) =
    NUMERIC[22,8](cost(ledger, batch) / quantity(ledger));

sum 'Сумма продажи' (SaleLedger ledger, Batch batch) = NUMERIC[18,4](sum(ledger) * coeff(ledger, batch));
costSum 'Себестоимость' (SaleLedger ledger, Batch batch) = NUMERIC[18,4](cost(ledger, batch) * cost(batch));
sumVAT 'Сумма НДС' (SaleLedger s, Batch b) = NUMERIC[18,4](sum(s,b) * valueVAT(s) / (100 + valueVAT(s)));
markupSum 'Надбавка' (SaleLedger ledger, Batch batch) = NUMERIC[18,4](sum(ledger, batch) - sumVAT(ledger, batch) - costSum(ledger, batch));

//по складу и Batch на дату
quantitySold (batch, stock, date) = GROUP SUM cost(SaleLedger ledger, Batch batch) IF active(ledger)
    BY batch, stock(ledger), date(ledger) PERSISTENT;

costSumSold (batch, stock, date) = GROUP SUM costSum(SaleLedger ledger, Batch batch) 
    IF active(ledger) BY batch, stock(ledger), date(ledger) PERSISTENT;

markupSumSold (batch, stock, date) = GROUP SUM markupSum(SaleLedger ledger, Batch batch) 
    IF active(ledger) BY batch, stock(ledger), date(ledger) PERSISTENT;

sumVATSold (batch, stock, date) = GROUP SUM sumVAT(SaleLedger ledger, Batch batch)  
    IF active(ledger) BY batch, stock(ledger), date(ledger) PERSISTENT;

sumSold (batch, stock, date) = GROUP SUM sum(SaleLedger ledger, Batch batch)  
    IF active(ledger) BY batch, stock(ledger), date(ledger) PERSISTENT;       
    
//по складу и Batch за интервал
    
quantitySold 'Продано за интервал (кол-во)' (batch, stock, dateFrom, dateTo)= GROUP SUM quantitySold(Batch batch, Stock stock, DATE date) 
    IF date >= DATE dateFrom AND date <= DATE dateTo BY batch, stock, dateFrom, dateTo; 
    
costSumSold 'Себестоимость проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  costSumSold(Batch batch, Stock stock, DATE date) 
    IF date >= DATE dateFrom AND date <= DATE dateTo BY batch, stock, dateFrom, dateTo;   
        
markupSumSold 'Надбавка проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  markupSumSold(Batch batch, Stock stock, DATE date) 
    IF date >= DATE dateFrom AND date <= DATE dateTo BY batch, stock, dateFrom, dateTo;  
     
sumVATSold 'Сумма НДС проданного за интервал' (batch, stock, dateFrom, dateTo)= GROUP SUM  sumVATSold(Batch batch, Stock stock, DATE date) 
    IF date >= DATE dateFrom AND date <= DATE dateTo BY batch, stock, dateFrom, dateTo;   
                       
sumSold 'Продано за интервал (сумма)' (batch, stock, dateFrom, dateTo)= GROUP SUM  sumSold(Batch batch, Stock stock, DATE date) 
    IF date >= DATE dateFrom AND date <= DATE dateTo BY batch, stock, dateFrom, dateTo;    


averagePriceSold 'Цена за интервал' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) = sumSold(batch, stock, dateFrom, dateTo)/
    quantitySold(batch, stock, dateFrom, dateTo);
averageMarkupSold 'Средний процент надбавки' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) = markupSumSold(batch, stock, dateFrom, dateTo)/
    costSumSold(batch, stock, dateFrom, dateTo)*100.0;    
    
//---------------------------------Тип обмена---------------------------------------//

sumSold (TypeExchange typeExchange, Sku sku, Stock stock, DATE date)= round((sumSold (sku, stock, date)/ rateOn(typeExchange, currency(stock), date)), currency(typeExchange));

sumSold 'Продано за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP SUM
        sumSold (TypeExchange typeExchange, Sku sku, Stock stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY typeExchange, sku, stock, dateFrom, dateTo;

sumSold 'Продано за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP SUM
        sumSold(TypeExchange typeExchange, Sku sku, Stock stock, DATE dateFrom, DATE dateTo) BY typeExchange, sku, dateFrom, dateTo;


skuStockAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSold 'Продаж в день' = DATA NUMERIC[14,3] (Sku, Stock);

calcQuantitySoldInterval(DATE dateFrom, DATE dateTo) = ACTION {
    LOCAL balance = NUMERIC[14,3] (Sku, Stock);
    LOCAL days = INTEGER (Sku, Stock);
    LOCAL dateCur = DATE();

    ASSIGN dateCur() <- dateFrom;
    ASSIGN balance(Sku sku, Stock stock) <- balanceB(sku, stock, dateFrom);

    WHILE dateCur() <= dateTo DO {
        ASSIGN days(Sku sku, Stock stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantity(sku, stock, dateCur()) > 0) OR (quantitySold(sku, stock, dateCur()) > 0)));
        ASSIGN balance(Sku sku, Stock stock) <- balance(sku, stock) (+)
                   signedQuantity(sku, stock, dateCur());
        ASSIGN dateCur() <- sum(dateCur(), 1);
    }

    ASSIGN averageSold(Sku sku, Stock stock) <- quantitySold (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи'() = ACTION NEWSESSION {
    EXEC calcQuantitySoldInterval(subtract(currentDate(), skuStockAverageInterval()), subtract(currentDate(), 1));
    apply();
}

EXTEND FORM options
    PROPERTIES() skuStockAverageInterval, calcCurrentQuantitySoldInterval
;
DESIGN options {
    sale {
        MOVE PROPERTY(skuStockAverageInterval());
        MOVE PROPERTY(calcCurrentQuantitySoldInterval());
    }
}

//---------------------------------------------- Формы продаж -------------------------------------//
saleOperation 'Операция' = DATA LOCAL Sale.Operation ();
nameSaleOperation 'Операция' = name(saleOperation());

filterSaleOperation = operation(SaleLedger ledger)==saleOperation() OR (ledger IS SaleLedger AND NOT saleOperation());

saleCustomer = DATA LOCAL LegalEntity ();
nameSaleCustomer 'Покупатель' = name(saleCustomer());
filterSaleCustomer = customer(SaleLedger ledger)==saleCustomer() OR (ledger IS SaleLedger AND NOT saleCustomer());

saleCustomerStock  = DATA LOCAL Stock ();
nameSaleCustomerStock 'Склад покупателя' = name(saleCustomerStock());
filterSaleCustomerStock = customerStock(SaleLedger ledger)==saleCustomerStock() OR (ledger IS SaleLedger AND NOT saleCustomerStock());

CONSTRAINT saleCustomer() AND saleCustomerStock() AND NOT in(saleCustomer(), saleCustomerStock())
    CHECKED BY saleCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для регистра продаж не имеют связи';     

saleStock  = DATA LOCAL Stock ();
nameSaleStock 'Склад' = name(saleStock());
filterSaleStock = stock(SaleLedger ledger)==saleStock() OR (ledger IS SaleLedger AND NOT saleStock());

idBarcodeSku 'Штрихкод' (SaleLedger l) = idBarcode(sku(l));

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (SkuGroup);

levelParent (group) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF dataInSession(parent)
    BY group;

inParent (SkuGroup group) = TRUE IF levelParent(group);

inSession 'Отм.' (SkuGroup group) = OVERRIDE
    inParent(group),
    dataInSession(group);

sessionConcatSkuGroups 'Группы' () =
    GROUP CONCAT name(SkuGroup group) IF inSession(group) AND NOT inSession(parent(group)),'; ' PREFCHARWIDTH 30;
    
    
countInSessionSkuGroups  = GROUP SUM 1 IF dataInSession(SkuGroup g);
resetSelectedGroups  'Сбросить отмеченные'() = ACTION {
    dataInSession(SkuGroup g) <- NULL WHERE g IS SkuGroup ;    
}  
  
FORM filterGroupType 'Фильтр по группам'    
     
     TREE treeGroup g=SkuGroup PARENT parent
     PROPERTIES READONLY order(g), id(g) SHOWIF showIDs(), name(g)
     PROPERTIES inSession(g) ON SHORTCUT resetSelectedGroups()    

     ORDER BY order(g), name(g)
     FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT        
     PROPERTIES resetSelectedGroups() TOOLBAR FORCE PANEL TODRAW g
;   
selectSkuGroups 'Выбор групп'() = ACTION {
    FORM filterGroupType MODAL;
} 

FORM saleLedger 'Регистр продаж'
    PROPERTIES() nameSaleStock, nameSaleOperation, nameSaleCustomer, nameSaleCustomerStock, sessionConcatSkuGroups ON CHANGE selectSkuGroups()

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = TypeExchange FIXED PANEL
    PROPERTIES nameType = name(te) SELECTOR, nameCurrency(te) READONLY

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY nameMonth, nameDOW, date, hour, dateTime, 
                           nameStock, nameCustomer, nameCustomerStock, nameOperation,
                           nameSkuGroup1Sku, nameSkuGroup2Sku, nameSkuGroup3Sku, nameSkuGroup4Sku, nameSkuGroup5Sku, 
                           canonicalNameSkuGroup, idSku, nameSku, idBarcodeSku, description, numberDocument,
                           quantity, costSum, markupSum, valueVAT,
                           sumVAT, sum, discountSum, averagePrice, averageDiscountPrice
    PROPERTIES    READONLY sumSold (te, s)    
    PROPERTIES(s) edit SHOWIF allowedEdit(s)
    ORDER BY date(s)
    
    FILTERS active(s), filterSaleStock(s), filterSaleOperation(s), filterSaleCustomer(s), filterSaleCustomerStock(s)
    FILTERS date(s) >= dFrom, date(s) <= dTo
    
    FILTERS inSession(skuGroup(sku(s))) OR (s IS SaleLedger AND NOT countInSessionSkuGroups())
;
@extendFormFilterAccessStock(SaleLedger, s, saleLedger, stock, company);

DESIGN saleLedger {
    NEW top {
        type = CONTAINERH;
        MOVE dates.box {
            type = CONTAINERH;
        }            
        MOVE te.box {
            type = CONTAINERH;
            PROPERTY(nameCurrency(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
        }
    }
    NEW operationContainer{
        type = CONTAINERH;
        caption = 'Фильтры';
        MOVE PROPERTY(nameSaleStock());
        MOVE PROPERTY(nameSaleOperation());
        MOVE PROPERTY(nameSaleCustomer());
        MOVE PROPERTY(nameSaleCustomerStock()); 
        MOVE PROPERTY(sessionConcatSkuGroups());
    }
    MOVE s.box;
    MOVE functions.box;
}

NAVIGATOR {

    saleNavigator {
        NEW salesReports 'Отчеты' {
            ADD saleLedger;
        }
    }
}

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineCustomerDialogStockSku (form)

    form##Customer = DATA LOCAL LegalEntity ();
    form##NameCustomer 'Покупатель' () = name(form##Customer()) PREFCHARWIDTH 30;
    dialogCustomersFilter (Sku sku) =  inCustomer(form##Customer(), sku) OR (sku IS Sku AND NOT form##Customer());

    EXTEND FORM form
        PROPERTIES() form##NameCustomer
        FILTERS dialogCustomersFilter(s)
    ;

    DESIGN form {
        filterContainer {
            MOVE PROPERTY(form##NameCustomer());
        }
    }
END
@defineCustomerDialogStockSku(dialogSku);

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSaleLedgerCustom(concrete, skuProp, stockProp)
    dateTime[SaleLedger] (concrete##Detail ledger) += dateTime(ledger);
    isPosted[SaleLedger] (concrete##Detail ledger) += isPosted(ledger);
    isClosed[SaleLedger] (concrete##Detail ledger) += isClosed(ledger);
    skuProp[SaleLedger] (concrete##Detail ledger) += skuProp(ledger);
    stock[SaleLedger] (concrete##Detail ledger) += stockProp(ledger);
    description[SaleLedger] (concrete##Detail ledger) += description(ledger);
END
META implementSaleLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : SaleLedger;
    @implementSaleLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averageSold READONLY;
EXTEND FORM balanceSkuStock PROPERTIES(s, st) averageSold READONLY;