MODULE SaleBlanketOrder;

REQUIRE SaleOrder, BlanketOrder, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Множественный Заказ ---------------------------------------------------//
@defineBlanketOrder(' (продажа)', company, customer, Sale);
@extendFormFilterAccessStock(BlanketOrder, o, blanketOrders, supplierStock, company);

@showDocumentDetailBatch(blanketOrder);
@defineBlanketOrderBatch(supplier, supplierStock, customerStock);
@defineBlanketOrderBatchDialogStock(supplierStock);

@defineOrderBlanketOrder(' (продажа)');
    
index(BlanketOrderOrderDetail d) += index(d);     
     
edit(BlanketOrderOrderDetail ledger) += { EXEC edit(blanketOrderDetail(ledger)); }

description 'Название документа' (BlanketOrderOrder o) =
    'Заказ на основе множественного (продажа)' + ' № ' + seriesNumber(blanketOrder(o)) + ' от ' + date(blanketOrder(o)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
description (BlanketOrderOrder order) += description(order);

numerator(BlanketOrder order, Stock stock) <- defaultNumeratorUserOrder() WHEN SET(in(order, stock));
    
batch(BlanketOrderOrderDetail detail)+= batch(blanketOrderDetail(detail));
//----------------------------------------------- Операции -----------------------------------------------------//

operation = DATA Operation (BlanketOrder);
nameOperation 'Операция' = name(operation(BlanketOrder blanketOrder));

overCopy(BlanketOrder o, BlanketOrder order) += {
    operation(o) <- operation(order);
}

dataOperation = DATA Operation (BlanketOrder, Stock);
operation (BlanketOrder blanketOrder, Stock stock) = OVERRIDE dataOperation(blanketOrder, stock), (operation(blanketOrder) IF stock IS Stock);
nameOperation 'Операция' (BlanketOrder blanketOrder, Stock stock)= name(operation (blanketOrder, stock));

WHEN SESSION FORMS blanketOrder
    CHANGED(operation(BlanketOrder order, Stock stock)) DO {
        priceListType(order, stock) <- defaultPriceListType(operation(order, stock));
    }  

overCopy(BlanketOrder o, BlanketOrder order) += {
    dataOperation(o,Stock stock) <- dataOperation(order,stock) WHERE stock IS Stock;
}
operation 'Операция' (BlanketOrderDetail detail) = operation(blanketOrder(detail), customerStock(detail));

operation(BlanketOrderOrder order) += operation(blanketOrder(order), stock(order));

CONSTRAINT operation(BlanketOrderDetail blanketOrderDetail) AND priceListType(blanketOrderDetail)
           AND NOT in(priceListType(blanketOrderDetail), operation(blanketOrderDetail))
    CHECKED BY priceListType[BlanketOrderDetail]
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT operation(BlanketOrder blanketOrder) AND priceListType(blanketOrder, Stock stock)
           AND NOT in(priceListType(blanketOrder, stock), operation(blanketOrder))
    CHECKED BY priceListType[BlanketOrder,Stock]
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT dataOperation(BlanketOrder blanketOrder, Stock stock) AND priceListType(blanketOrder, stock)
           AND NOT in(priceListType(blanketOrder, stock), dataOperation(blanketOrder, stock))
    CHECKED BY priceListType[BlanketOrder,Stock]
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT operation(BlanketOrder blanketOrder)
           AND NOT inSupplier(supplier(blanketOrder), operation(blanketOrder))
    CHECKED BY supplier[BlanketOrder]
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции';

CONSTRAINT operation(BlanketOrder blanketOrder)
           AND NOT inCustomer(customer(blanketOrder), operation(blanketOrder))
    CHECKED BY customer[BlanketOrder]
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции';

//--
CONSTRAINT dataOperation(BlanketOrder order,Stock stock)
           AND NOT inSupplier(supplier(order), dataOperation(order,stock))
    CHECKED BY dataOperation[BlanketOrder,Stock]       
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции (для склада)';

CONSTRAINT dataOperation(BlanketOrder order,Stock stock)
           AND NOT inCustomer(customer(order), dataOperation(order,stock))
    CHECKED BY dataOperation[BlanketOrder,Stock]
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции (для склада)';
    
CONSTRAINT dataOperation(BlanketOrder order,Stock stock)
           AND NOT inSupplier(supplierStock(order), dataOperation(order,stock))
    CHECKED BY dataOperation[BlanketOrder,Stock]
    MESSAGE 'Склад поставщика должен совпадать с отмеченными в операции для склада';
CONSTRAINT dataOperation(BlanketOrder order,Stock stock)
           AND NOT inCustomer(stock, dataOperation(order,stock))
    CHECKED BY dataOperation[BlanketOrder,Stock]
    MESSAGE 'Склад покупателя должен совпадать с отмеченными в операции для склада';
    
EXTEND FORM blanketOrder
    PROPERTIES(o) nameOperation
    PROPERTIES(o,c) nameOperation BEFORE namePriceListType(o,c)
;

DESIGN blanketOrder{
    o.documentPrm{
        MOVE PROPERTY(nameOperation(o)) BEFORE PROPERTY(nameCurrency(o));
    }
}

@defineDocumentOperationRole(blanketOrder);
@deriveDocumentOperationLegalEntity(blanketOrder, customer, blanketOrder);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(BlanketOrder blanketOrder) AND NOT isCompany(supplier(blanketOrder))
    CHECKED BY supplier[BlanketOrder] MESSAGE 'Для множественного заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(BlanketOrder blanketOrder) AND NOT isCustomer(customer(blanketOrder))
    CHECKED BY customer[BlanketOrder] MESSAGE 'Для множественного заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentLegalEntityStockAccess(BlanketOrder, supplier, company, blanketOrder);
@deriveDocumentOperationStock(blanketOrder, supplier, blanketOrder);

//------------------------------ Расширение формы -----------------------------//
// Резервы
@extendFormDocumentSkuStockOrderLedgerOver(blanketOrder, blanketOrder, o, supplierStock);
@extendFormDocumentBatchStockOrderLedger(blanketOrder, blanketOrder, o);
// Фильтр в подборе (поставщик)
@defineDocumentBatchStockSupplier(blanketOrder, blanketOrder, o);

NAVIGATOR {
    saleSaleNavigator {
        ADD blanketOrders BEFORE orders;
    }
}
