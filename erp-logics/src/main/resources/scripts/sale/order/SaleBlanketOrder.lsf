MODULE SaleBlanketOrder;

REQUIRE SaleOrder, BlanketOrder, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Множественный Заказ ---------------------------------------------------//
@defineBlanketOrder(' (продажа)', company, customer);
@extendFormFilterAccessStock(BlanketOrder, o, blanketOrders, supplierStock, company);
@extendFormFilterStockAccess(c, blanketOrder, customer);
@extendFormFilterAccessLegalEntity(BlanketOrder, o, blanketOrders, supplier, company);
@extendFormFilterAccessLegalEntity(BlanketOrder, o, blanketOrders, customer, customer);

@defineBlanketOrderBatch(supplier, supplierStock, customerStock);
@defineBlanketOrderBatchDialogStock(supplierStock);

@defineOrderBlanketOrder(' (продажа)');
    
indexOrderDetail(d) += indexBlanketOrderOrderDetail(d);     
     
editOrderDetail(ledger) += ACTION EXEC editBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(ledger));

descriptionBlanketOrderOrder 'Название документа' (o) =
    'Заказ на основе множественного (продажа)' + ' № ' + seriesNumberBlanketOrder(blanketOrderBlanketOrderOrder(o)) + ' от ' + dateBlanketOrder(blanketOrderBlanketOrderOrder(o)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
descriptionOrder (order) += descriptionBlanketOrderOrder(order);

numeratorBlanketOrderStock(order, stock) <- defaultNumeratorUserOrder() WHEN SET(inBlanketOrderStock(order, stock));
    
batchOrderDetail(detail)+= batchBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
//----------------------------------------------- Операции -----------------------------------------------------//

operationBlanketOrder = DATA Operation (BlanketOrder);
nameOperationBlanketOrder 'Операция' = nameOperation(operationBlanketOrder(blanketOrder));

overCopyBlanketOrder(o, order) += ACTION(o, order) {
    operationBlanketOrder(o) <- operationBlanketOrder(order);
}

dataOperationBlanketOrderStock = DATA Operation (BlanketOrder, Stock);
operationBlanketOrderStock (blanketOrder, stock) = OVERRIDE (operationBlanketOrder(blanketOrder) IF stock IS Stock), dataOperationBlanketOrderStock(blanketOrder, stock);
nameOperationBlanketOrderStock 'Операция' (blanketOrder, stock)= nameOperation(operationBlanketOrderStock (blanketOrder, stock));

overCopyBlanketOrder(o, order) += ACTION(o, order) {
    dataOperationBlanketOrderStock(o,stock) <- dataOperationBlanketOrderStock(order,stock) WHERE stock IS Stock;
}
operationBlanketOrderDetail 'Операция' (detail) = operationBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail));

operationOrder(order) += operationBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));

CONSTRAINT operationBlanketOrderDetail(blanketOrderDetail) AND priceListTypeBlanketOrderDetail(blanketOrderDetail)
           AND NOT inPriceListTypeOperation(priceListTypeBlanketOrderDetail(blanketOrderDetail), operationBlanketOrderDetail(blanketOrderDetail))
    CHECKED BY priceListTypeBlanketOrderDetail
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT operationBlanketOrder(blanketOrder) AND priceListTypeBlanketOrderStock(blanketOrder, stock)
           AND NOT inPriceListTypeOperation(priceListTypeBlanketOrderStock(blanketOrder, stock), operationBlanketOrder(blanketOrder))
    CHECKED BY priceListTypeBlanketOrderStock
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT dataOperationBlanketOrderStock(blanketOrder, stock) AND priceListTypeBlanketOrderStock(blanketOrder, stock)
           AND NOT inPriceListTypeOperation(priceListTypeBlanketOrderStock(blanketOrder, stock), dataOperationBlanketOrderStock(blanketOrder, stock))
    CHECKED BY priceListTypeBlanketOrderStock
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT operationBlanketOrder(blanketOrder)
           AND NOT inSupplierOperation(supplierBlanketOrder(blanketOrder), operationBlanketOrder(blanketOrder))
    CHECKED BY supplierBlanketOrder
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции';

CONSTRAINT operationBlanketOrder(blanketOrder)
           AND NOT inCustomerOperation(customerBlanketOrder(blanketOrder), operationBlanketOrder(blanketOrder))
    CHECKED BY customerBlanketOrder
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции';

//--
CONSTRAINT dataOperationBlanketOrderStock(order,stock)
           AND NOT inSupplierOperation(supplierBlanketOrder(order), dataOperationBlanketOrderStock(order,stock))
    CHECKED BY dataOperationBlanketOrderStock       
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции (для склада)';

CONSTRAINT dataOperationBlanketOrderStock(order,stock)
           AND NOT inCustomerOperation(customerBlanketOrder(order), dataOperationBlanketOrderStock(order,stock))
    CHECKED BY dataOperationBlanketOrderStock
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции (для склада)';
    
CONSTRAINT dataOperationBlanketOrderStock(order,stock)
           AND NOT inSupplierStockOperation(supplierStockBlanketOrder(order), dataOperationBlanketOrderStock(order,stock))
    CHECKED BY dataOperationBlanketOrderStock
    MESSAGE 'Склад поставщика должен совпадать с отмеченными в операции для склада';
CONSTRAINT dataOperationBlanketOrderStock(order,stock)
           AND NOT inCustomerStockOperation(stock, dataOperationBlanketOrderStock(order,stock))
    CHECKED BY dataOperationBlanketOrderStock
    MESSAGE 'Склад покупателя должен совпадать с отмеченными в операции для склада';
    
EXTEND FORM blanketOrder
    PROPERTIES(o) nameOperationBlanketOrder
    PROPERTIES(o,c) nameOperationBlanketOrderStock BEFORE namePriceListTypeBlanketOrderStock(o,c)
;

DESIGN blanketOrder{
    o.documentPrm{
        ADD PROPERTY(nameOperationBlanketOrder(o)) BEFORE PROPERTY(nameCurrencyBlanketOrder(o));
    }
}

@defineDocumentOperationRole(blanketOrder);
@deriveDocumentOperationLegalEntity(blanketOrder, customer, blanketOrder);
@defineDocumentLegalEntityAccess(BlanketOrder, customer, customer);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierBlanketOrder(blanketOrder) AND NOT isCompanyLegalEntity(supplierBlanketOrder(blanketOrder))
    CHECKED BY supplierBlanketOrder MESSAGE 'Для множественного заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerBlanketOrder(blanketOrder) AND NOT isCustomerLegalEntity(customerBlanketOrder(blanketOrder))
    CHECKED BY customerBlanketOrder MESSAGE 'Для множественного заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentLegalEntityStockAccess(BlanketOrder, supplier, company, blanketOrder);
@deriveDocumentOperationStock(blanketOrder, supplier, blanketOrder);

//------------------------------ Расширение формы -----------------------------//
// Резервы
@extendFormDocumentSkuStockOrderLedger(blanketOrder, blanketOrder, o);
@extendFormDocumentBatchStockOrderLedger(blanketOrder, blanketOrder, o);
// Фильтр в подборе (поставщик)
@defineDocumentBatchStockSupplier(blanketOrder, blanketOrder, o);

NAVIGATOR {
    saleSaleNavigator {
        ADD blanketOrders BEFORE orders;
    }
}
