MODULE SaleInvoiceOrderPayment;

REQUIRE SaleInvoiceOrderAggregation, SaleInvoicePayment;

NAMESPACE Sale;
  
@defineOperationProperty(showPayment, 'Показывать платежи', showContainer);  
  
showPayment (UserOrder o) = showPayment(operation(o));
  
cost 'Оплачено из документа' = cost(OutContractLedger payment, orderInvoice(Order order));

addPayment 'Оплатить'(Order order) = ACTION {
    IF orderInvoice(order) THEN {
        currentInContractLedger() <- orderInvoice(order);
        FOR NEW p = Payment DO {
            operation(p) <- defaultPaymentOperation();        
            contract(p) <- contractSku(orderInvoice(order));
            date(p) <- currentDate();
            time(p) <- currentTime();
            payer(p) <- customer[Invoice](orderInvoice(order));
            beneficiary(p) <- supplier[Invoice](orderInvoice(order));
            sum(p) <- invoiceSumInvoiceDetail(orderInvoice(order));
            cost(p, InContractLedger invoice) <- sumContract(p) WHERE invoice == currentInContractLedger();
            SHOW payment OBJECTS p=p ;
            IF NOT formResult() == FormResult.ok THEN {
                DELETE p;
            }
        }    
    } ELSE {
        FOR NEW p = Payment DO {
            operation(p) <- defaultPaymentOperation();        
            contract(p) <- contractSku(order);
            date(p) <- currentDate();
            time(p) <- currentTime();
            payer(p) <- customer(order);
            beneficiary(p) <- supplier(order);
            sum(p) <- invoiceSumOrderDetail(order);
            SHOW payment OBJECTS p=p ;
            IF NOT formResult() == FormResult.ok THEN {
                DELETE p;
            }
        }    
    }
}

edit 'Редактировать'(Payment payment, Order order) = ACTION {
    IF orderInvoice(order) THEN {
        currentInContractLedger() <- orderInvoice(order);
        SHOW payment OBJECTS p=payment ;    
    } ELSE {        
        SHOW payment OBJECTS p=payment ;    
    }
} IMAGE 'edit.png';
    
showPaymentInvoice (UserOrder o) = showPayment(o) AND createInvoice(o);    
filterPaymentInvoice 'Платежи по накладной' = DATA LOCAL BOOLEAN (UserOrder);


EXTEND FORM userOrder
    OBJECTS pm = Payment FIXED GRID
    PROPERTIES(pm) READONLY SHOWIF showPayment(o) isPosted, seriesNumber, dateTime, namePayer, nameBeneficiary, note, sum
    ORDER BY dateTime(pm)
    PROPERTIES(pm, o) SHOWIF showPaymentInvoice(o)  cost
    PROPERTIES SHOWIF showPayment(o) TODRAW pm FORCE PANEL TOOLBAR addPayment(o), edit(pm, o) 
    PROPERTIES(pm)  DELETE SHOWIF showPayment(o)
    PROPERTIES SHOWIF showPaymentInvoice(o) filterPaymentInvoice(o)
    FILTERS (cost(pm, o) IF filterPaymentInvoice(o)) OR (pm IS Payment AND NOT filterPaymentInvoice(o)) 
//    FILTERGROUP filters
//        FILTER 'Платежи по накладной' cost(pm, o) 'F10' DEFAULT
    FILTERS contract(pm) == contractSku(o)
;

DESIGN userOrder{
    specification.box{
        NEW paymentContainer{
            caption = 'Платежи';
            MOVE pm.box;
            pm.filters {
                MOVE PROPERTY (filterPaymentInvoice(o));
            }
        }
    }
}
