MODULE SaleReturnOrder;

REQUIRE Order, SaleShipment, SaleOperation, SalePack;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

@defineOrder(' (продажа-возврат)', supplier, supplierStock, company, customer, company);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, company);
@extendFormFilterAccessStock(Order, o, orders, customerStock, customer);
@extendFormFilterAccessLegalEntity(Order, o, orders, supplier, company);
@extendFormFilterAccessLegalEntity(Order, o, orders, customer, customer);

@defineOrderStockDestination(customerStock, supplierStock);

@defineNumeratedObjectDefaultPrefix(UserOrder, 'Нумератор для заказов (продажа-возврат)', 'ВП', saleReturn);

@defineDocumentSkuStockSupplier (userOrder, userOrder, o, sts.box);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(order, o);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (продажа-возврат)');
@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@defineDocumentOperationRole(userOrder);

// --------------------- НДС суммы ----------------------- //

@deriveDocumentDetailVAT (userOrder, , date,  sku, supplierStock); // записываем ставку НДС из товара
@deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
@deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isCompanyLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCustomerLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, company, customer, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
Order.packQuantityOrderDetail(detail) += packQuantityOrderDetail(detail);
EXTEND DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserOrder);
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, supplierStock);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, supplierStock);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserOrderSku (userOrder, sku) = inCustomerSku(customerUserOrder(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(ks, st)
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderSupplierStock(ks, o, st)

    FILTERGROUP filter1
        FILTER 'С продажей' 'F8' inUserOrderSku(o, ks)
        FILTER'В ассортименте' 'F7' priceSkuStockUserOrder(ks, st, o) DEFAULT

;

// Резервы
@extendFormDocumentOrderLedgerStock(userOrder, userOrder, o);
@extendFormDocumentOrderLedgerStockAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementSaleOrderLedger(Order, sku, shipmentDateTime, supplierStock, customer);


NAVIGATOR {
    saleReturnNavigator {
        ADD orders;
    }
}
