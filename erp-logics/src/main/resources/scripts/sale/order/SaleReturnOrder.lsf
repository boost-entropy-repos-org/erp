MODULE SaleReturnOrder;

REQUIRE Order, SaleShipment, SaleOperation, SalePack;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

@defineOrder(' (продажа-возврат)', supplier, supplier, company, customer, company);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, company);
@extendFormFilterAccessStock(Order, o, orders, customerStock, customer);
@extendFormFilterAccessLegalEntity(Order, o, orders, supplier, company);
@extendFormFilterAccessLegalEntity(Order, o, orders, customer, customer);

Order.inOrder(o) += o IS Order;
Order.isReturnOrder(o) += TRUE IF o IS SaleReturn.Order;

@defineOrderBatch(supplier, supplier);
@defineOrderBatchDialog();

@implementOrderDestination(customer, supplier);

@defineDocumentSkuStockSupplier (userOrder, userOrder, o);
@defineDocumentBatchStockSupplier(userOrder, userOrder, o);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (продажа-возврат)');

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);

@defineDocumentOperationRole(userOrder);

overCopyOrder(s, d) += ACTION(s, d) {
    ASSIGN operationUserOrder(d) <- operationOrder(s);
}
@defineOperationFilterProperty(order, o, orders, nameFilterOrderSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isCompanyLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCustomerLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterOrderSupplier() AND NOT isCompanyLegalEntity(filterOrderSupplier())
    CHECKED BY filterOrderSupplier MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterOrderCustomer() AND NOT isCustomerLegalEntity(filterOrderCustomer())
    CHECKED BY filterOrderCustomer MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся покупателем';       

CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT inLegalEntityStock(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT inLegalEntityStock(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, company, customer, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
Order.packQuantityOrderDetail(detail) += packQuantityOrderDetail(detail);
EXTEND DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserOrder(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, supplier);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, supplier);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserOrderSku (userOrder, sku) = inCustomerSku(customerUserOrder(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(ks, st)
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderSupplierStock(ks, o, st)

    FILTERGROUP filter1
        FILTER 'С продажей' 'F8' inUserOrderSku(o, ks)
        FILTER'В ассортименте' 'F7' priceSkuStockUserOrder(ks, st, o)

;

inUserOrderBatch (userOrder, batch)= inCustomerSku(customerUserOrder(userOrder), skuBatch(batch));
EXTEND FORM userOrder

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchStock(b, st) DEFAULT
        FILTER 'В документе ' 'F9' quantityBatchUserOrderSupplierStock(b, o, st)
    FILTERGROUP filter4
        FILTER 'С продажей ' 'F8' inUserOrderBatch(o,b)
        FILTER 'В ассортименте' 'F7' ledgerPriceBatchStockUserOrder(b, st, o)
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(Order, sku, shipmentDateTime, supplierStock, customer);


NAVIGATOR {
    saleReturnNavigator {
        ADD orders;
    }
}
