MODULE SaleOrder;

REQUIRE Order, Store, SaleOperation, SalePack;

NAMESPACE Sale;

@defineOrder(' (продажа)', supplier, supplierStock, company, customer, company);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, company);
@extendFormFilterAccessStock(Order, o, orders, customerStock, customer);
@extendFormFilterAccessLegalEntity(Order, o, orders, supplier, company);
@extendFormFilterAccessLegalEntity(Order, o, orders, customer, customer);

@defineOrderStockDestination(supplierStock, customerStock);

@defineNumeratedObjectDefaultPrefix(UserOrder, 'Нумератор для заказов (продажа)', 'ЗП', sale);

@defineDocumentSkuStockSupplier (userOrder, userOrder, o, sts.box);

@defineOrderBatch(supplierStock);

@defineDocumentBatchPriceListType(userOrder, supplierStock);
@extendFormDocumentBatch(userOrder, userOrder, o);
@extendFormDocumentBatchAll(userOrder, userOrder, o);


//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(order, o);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (продажа)');
@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@defineDocumentOperationStock(userOrder, supplierStock, 'Склад поставщика');
@defineDocumentOperationStock(userOrder, customerStock, 'Склад покупателя');
@defineDocumentOperationRole(userOrder);

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(order, VAT, 'НДС расч.');

CONSTRAINT taxRange(VATUserOrder(userOrder)) != Tax.taxVAT OR
           countryRange(VATUserOrder(userOrder)) != countryStock(supplierStockOrder(userOrder)) OR
           rangeTypeRange(VATUserOrder(userOrder)) != RangeType.units
           CHECKED BY VATUserOrder
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: продажа';

VATUserOrder (userOrder) <- rangeTaxTaxUnit(Tax.taxVAT, storeDepartmentStore(supplierStockUserOrder(userOrder)))
        WHEN CHANGED(supplierStockUserOrder(userOrder));

@deriveDocumentDetailVATHeader(userOrder, VAT, supplierStock);

isDepartmentStoreSupplierStockOrder (order) = supplierStockOrder(order) IS DepartmentStore;

EXTEND FORM userOrder
    PROPERTIES(o) numberVATUserOrder SHOWIF isDepartmentStoreSupplierStockOrder(o), valueVATUserOrder SHOWIF isDepartmentStoreSupplierStockOrder(o);
;

// --------------------- НДС суммы ----------------------- //

@deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
@deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

// ----------------------------- Автоматическая отсылка почты ---------------------------------- //

FORM emailOrder 'Заказ' PRINT
    OBJECTS o = Order FIXED PANEL
    PROPERTIES (o) numberOrder, seriesOrder, nameSupplierOrder, nameCustomerOrder, nameSupplierStockOrder, nameCustomerStockOrder,
                   numberObject, seriesObject, dateOrder, timeOrder, nameCurrencyOrder, noteOrder,
                   countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                   VATSumOrderDetailOrder, invoiceSumOrderDetailOrder, shipmentDateOrder

    OBJECTS d = OrderDetail
    PROPERTIES (d) indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail,
                   quantityOrderDetail, priceOrderDetail,  sumOrderDetail, valueVATOrderDetail,
                   VATSumOrderDetail, invoiceSumOrderDetail

    FILTERS orderOrderDetail(d) == o
;

emailCustomerOrder 'Выслать подтвержденный заказ покупателю' (order) = ACTION EMAIL
    FROM emailLegalEntity(supplierOrder(order))
    SUBJECT [FORMULA VARSTRING[60] '\'Подтверждение заказа №\' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)'](seriesNumberOrder(order), dateOrder(order))
    TO emailLegalEntity(customerOrder(order))
    INLINE emailOrder OBJECTS o=order
    ATTACH PDF
           NAME [FORMULA VARSTRING[60] '\'Заказ №\' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT)'](seriesNumberOrder(order), dateOrder(order))
           emailOrder OBJECTS o=order
;

WHEN isPostedOrder(order) AND emailLegalEntity(customerOrder(order)) DO EXEC emailCustomerOrder(order);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isCompanyLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCustomerLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, company, customer, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
Order.packQuantityOrderDetail(detail) += packQuantityOrderDetail(detail);
EXTEND DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserOrder);
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, supplierStock);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, supplierStock);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserOrderSku (userOrder, sku)= inCustomerSku(customerUserOrder(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(ks, st) DEFAULT
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderSupplierStock(ks, o, st)

    FILTERGROUP filter1
        FILTER 'С продажей' 'F8' inUserOrderSku(o, ks)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuStockUserOrder(ks, st, o) DEFAULT
;

inUserOrderBatch (userOrder, batch)= inCustomerSku(customerUserOrder(userOrder), skuBatch(batch));
EXTEND FORM userOrder

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserOrder(b,o) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserOrderDetailBatchUserOrder(b,o)

    FILTERGROUP filter4
        FILTER 'С продажей ' 'F8' inUserOrderBatch(o,b)
        FILTER 'В ассортименте' 'F7' ledgerPriceBatchUserOrder(b, o)

;

// Резервы
@extendFormDocumentOrderLedgerStock(userOrder, userOrder, o);
@extendFormDocumentOrderLedgerStockAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementSaleOrderLedger(Order, sku, shipmentDateTime, supplierStock, customer);


NAVIGATOR {
    saleSaleNavigator {
        ADD orders;
    }
}