MODULE StoreSaleOrder;

REQUIRE Store, SaleOrder, PriceRoundStore;

NAMESPACE Sale;

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(order, VAT, 'НДС расч.');

CONSTRAINT taxRange(VATUserOrder(userOrder)) != Tax.taxVAT OR
           countryRange(VATUserOrder(userOrder)) != countryStock(supplierStockOrder(userOrder)) OR
           rangeTypeRange(VATUserOrder(userOrder)) != RangeType.units
           CHECKED BY VATUserOrder
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: продажа';

useCountVATOperationUserOrder = useCountVATOperation(operationUserOrder(order));

VATUserOrder (userOrder) <- rangeTaxTaxUnit(Tax.taxVAT, storeDepartmentStore(supplierStockUserOrder(userOrder)))
        IF useCountVATOperationUserOrder(userOrder)
        WHEN DO CHANGED(supplierStockUserOrder(userOrder));

//@deriveDocumentDetailVATHeader(userOrder, VAT, supplierStock);

overVATUserOrderDetail (d) += VATUserOrder(userOrderUserOrderDetail(d));
WHEN SESSION FORMS userOrder CHANGED(VATUserOrder(userOrderUserOrderDetail(d))) DO {
    VATUserOrderDetail(d) <- overVATUserOrderDetail(d);
}


EXTEND FORM userOrder
    PROPERTIES(o) numberVATUserOrder SHOWIF useCountVATOperationUserOrder(o), valueVATUserOrder SHOWIF useCountVATOperationUserOrder(o);
;

WHEN SESSION FORMS userOrder (CHANGED(quantityUserOrderDetail(d)) OR CHANGED(invoicePriceUserOrderDetail(d)) OR CHANGED(valueVATUserOrderDetail(d))) 
                               AND VATUserOrder(userOrderUserOrderDetail(d)) AND includeVATPriceListType(priceListTypeUserOrderDetail(d)) DO {
    invoiceSumUserOrderDetail(d) <- IF individualLegalEntitySaleOperation(operationUserOrderDetail(d)) THEN
            roundPriceRoundCondition(quantityUserOrderDetail(d) * invoicePriceUserOrderDetail(d), roundConditionDepartmentStore(supplierStockUserOrderDetail(d)))
        ELSE roundPriceCurrency(quantityUserOrderDetail(d) * invoicePriceUserOrderDetail(d), currencyUserOrderDetail(d));
    VATSumUserOrderDetail(d) <- roundPriceCurrency(invoiceSumUserOrderDetail(d) * calcValueVATUserOrderDetail(d) / (100.0 + calcValueVATUserOrderDetail(d)), currencyUserOrderDetail(d));
    sumUserOrderDetail(d) <- invoiceSumUserOrderDetail(d) (-) VATSumUserOrderDetail(d); 
}