MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice, SaleOperation;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplierStock, company, customer);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, customer);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, customer);

@defineOrderInvoice(' (продажа-возврат)', supplierStock);
@defineOrderInvoiceAction (' (продажа-возврат)');

// Добавляем партии
@defineInvoiceBatch(supplierStock);
@defineInvoiceBatchDialog();

@defineInvoiceReturn(Sale, SaleReturn, supplierStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(invoice, i);
@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа-возврат)');

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplierStock, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplierStock, userInvoice);
@defineDocumentOperationStock(userInvoice, customerStock, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customerStock, userInvoice);

@defineDocumentOperationRole(userInvoice);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией: возврат';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем: возврат';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserInvoice);
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}
overChangeQuantityValueBatchUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserInvoiceDetail(detail))) THEN {
        packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserInvoice(ks, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(ks, i)

    FILTERGROUP filter2
        FILTER 'С продажей ' 'F8' inUserInvoiceSku(i, ks)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuUserInvoice(ks, i)
;
inUserInvoiceBatch (userInvoice, batch)= inCustomerSku(customerUserInvoice(userInvoice), skuBatch(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserInvoice(b,i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailBatchUserInvoice(b,i)

    FILTERGROUP filter4
        FILTER 'С продажей ' 'F8' inUserInvoiceBatch(i,b)
        FILTER 'В ассортименте' 'F7' ledgerPriceBatchUserInvoice(b, i)

;

// Резервы
@extendFormDocumentSkuOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

NAVIGATOR {
    saleReturnNavigator {
        ADD invoices;
    }
}