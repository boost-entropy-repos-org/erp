MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice, SaleOperation;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplier, company, customer, return, SaleReturn){

    CLASS ABSTRACT Invoice 'Накладная (продажа-возврат)' : Invoice.Invoice;
    CLASS ABSTRACT InvoiceDetail 'Строка накладной (продажа-возврат)' : Invoice.InvoiceDetail;

    CLASS UserInvoice 'Накладная (польз.) (продажа-возврат)' : Invoice;
    CLASS UserInvoiceDetail 'Строка накладной (польз.) (продажа-возврат)' : InvoiceDetail;

    GROUP invoice 'Информация о накладной' : base;

    @defineDocumentInterface(invoice);
    note[Invoice.Invoice](Invoice i)+=note(i);
    
    TABLE sessionInvoiceDetail(Session, InvoiceDetail);
    
    @deriveDocumentHeaderTimePrefix(UserInvoice, );
    index[Invoice.InvoiceDetail](InvoiceDetail d)+=index(d);
    
    createdUser = ABSTRACT CustomUser (Invoice);
    createdNameUser 'Создан пользователем' (Invoice invoice) = name[Contact](createdUser(invoice)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
    createdUser(UserInvoice invoice) += createdUser(invoice) IF invoice IS UserInvoice;
    
    createdTime (UserInvoice invoice) += createdTime(invoice) IF invoice IS UserInvoice;
    createdUser[Invoice.Invoice] (Invoice invoice) += createdUser(invoice);    
    
    @defineExternalizable(userInvoice, VARSTRING[100]);
    @defineExternalizable(userInvoiceDetail, VARSTRING[100]);
                                                               
    invoice[Invoice.InvoiceDetail] (InvoiceDetail detail) += invoice(detail);
    date[Invoice.Invoice] (Invoice invoice) += date(invoice);
    time[Invoice.Invoice] (Invoice invoice) += time(invoice);

    @defineDocumentInterfaceTimePrefix(invoice, before, ' документа (до)');
    @deriveDocumentHeaderTimePrefix(UserInvoice, before);

    @defineDocumentInterfaceNumber(invoice);
    number[Invoice.Invoice] (Invoice invoice) += number(invoice);
    series[Invoice.Invoice] (Invoice invoice) += series(invoice);
    invoice (number) = GROUP MAX Invoice.Invoice invoice BY number(invoice);

    @defineNumeratedDefault(UserInvoice, 'Накладные (продажа-возврат)', 'ПС');

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    supplier[Invoice.Invoice](Invoice invoice) += supplier(invoice);
    customer[Invoice.Invoice](Invoice invoice) += customer(invoice);

    isCompanySupplier 'Приход от компании' (InvoiceDetail d) = isCompany(supplier(d)); 

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    supplierStock[Invoice.Invoice](Invoice invoice) += supplierStock(invoice);
    customerStock[Invoice.Invoice](Invoice invoice) += customerStock(invoice);
    dataSupplierStock[Invoice.InvoiceDetail](InvoiceDetail detail) += dataSupplierStock(detail);
    dataCustomerStock[Invoice.InvoiceDetail](InvoiceDetail detail) += dataCustomerStock(detail);
    stock[Invoice.InvoiceDetail](InvoiceDetail detail) += supplierStock(detail);
    CONSTRAINT supplier(UserInvoice userInvoice) AND supplierStock(userInvoice) AND NOT
    in(supplier(userInvoice), supplierStock(userInvoice))
        CHECKED BY supplierStock[UserInvoice]
            MESSAGE 'Поставщик и склад поставщика для накладной не имеют связи';
    CONSTRAINT customer(UserInvoice userInvoice) AND customerStock(userInvoice) AND NOT
    in(customer(userInvoice), customerStock(userInvoice))
        CHECKED BY customerStock[UserInvoice]
            MESSAGE 'Покупатель и склад покупателя для накладной не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    isPosted[Invoice.Invoice] (Invoice invoice) += isPosted(invoice);
    
    isStockInvoices 'Разрешить ввод накладной (продажа-возврат) без склада' = DATA BOOLEAN ();    
    equalsSeriesNumberInvoices 'Запретить ввод накладных (продажа-возврат) с одинаковым "Серия/номер"' = DATA BOOLEAN (); 
    skipEqualsSeriesNumber = ABSTRACT BOOLEAN (Invoice);
    
    EXTEND FORM options
        PROPERTIES() SaleReturnIsStockInvoices = isStockInvoices, SaleReturnEqualsSeriesNumberInvoices = equalsSeriesNumberInvoices
    ;
    
    DESIGN options {
        document {
            NEW invoiceSaleReturn {
                caption = 'Накладная (продажа-возврат)';
                MOVE PROPERTY(SaleReturnIsStockInvoices);
                MOVE PROPERTY(SaleReturnEqualsSeriesNumberInvoices);
            } 
        }
    }

    CONSTRAINT isPosted(UserInvoice i) AND NOT isStockInvoices() AND NOT supplierStock(i) 
        MESSAGE 'Для накладной (продажа-возврат) должен быть задан склад';   
    CONSTRAINT  equalsSeriesNumberInvoices() AND [ = GROUP SUM 1 IF isPosted(Invoice i) AND NOT skipEqualsSeriesNumber(i) BY seriesNumber(i)](STRING[18] series) >1
        MESSAGE 'Запрещено вводить накладные (продажа-возврат) с одинаковым "Серия/номер"';                 
    
    @defineDocumentInterfaceClosed(invoice);
    @defineDocumentClosedConstraint(UserInvoice);
    isClosed[Invoice.Invoice] (Invoice invoice) += isClosed(invoice);    

    @defineDocumentInterfaceDescription(invoice, 'Накладная (продажа-возврат)');
    description[Invoice.Invoice](Invoice invoice) += description(invoice);    

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    currency[Invoice.Invoice](Invoice invoice) += currency(invoice);

    @defineDocumentInterfaceContract(Invoice, contractSku, supplier, customer,
                                     'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной',
                                     'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной',
                                     'накладная (продажа-возврат)', SaleReturn);
    contractSku[Invoice.Invoice](Invoice invoice) += contractSku(invoice);
    isCommission[Invoice.Invoice](Invoice invoice) += isCommission(invoice);
    
    
    contractSku(UserInvoiceDetail detail) = contractSku(userInvoice(detail));
    
    @defineDocumentInterfaceAgreement(invoice);
    agreement[Invoice.Invoice](Invoice invoice) += agreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplier, customer, 'накладная (продажа-возврат)', SaleReturn);
    noAgreement (UserInvoice invoice) = invoice IS UserInvoice AND NOT agreement(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    sku[Invoice.InvoiceDetail](InvoiceDetail detail) += sku(detail);
    
    countInSku (invoice) = GROUP SUM 1 IF in(Agreement agreement,sku(UserInvoiceDetail d)) 
        AND fromDateTime(agreement) <= dateTime(d) AND NOT (toDateTime(agreement) < dateTime(d))
        AND inSupplier(agreement, supplier(d)) AND inCustomer(agreement, customer(d))
        AND currency(d) == currency(agreement)
            BY userInvoice(d);
            
    maxAgreementInSku (invoice) = GROUP MAX Agreement agreement IF in(agreement,sku(UserInvoiceDetail d)) 
        AND fromDateTime(agreement) <= dateTime(d) AND NOT (toDateTime(agreement) < dateTime(d))
        AND inSupplier(agreement, supplier(d)) AND inCustomer(agreement, customer(d))
            BY userInvoice(d);
                        
    isStockSku (InvoiceDetail invoiceDetail) = isStock(sku(invoiceDetail));
    isStockSku (UserInvoiceDetail userInvoiceDetail) = isStock(sku(userInvoiceDetail));

    isChargeSku (InvoiceDetail invoiceDetail) = isCharge(sku(invoiceDetail));
    isChargeSku (UserInvoiceDetail userInvoiceDetail) = isCharge(sku(userInvoiceDetail));

    @defineDocumentInterfaceDetailQuantity(invoice);
    quantity[Invoice.InvoiceDetail](InvoiceDetail detail) += quantity(detail);
    CONSTRAINT negativeValueInvoices() AND InvoiceDetail detail IS InvoiceDetail AND quantity(detail) < 0
        MESSAGE 'Количество в строке накладной должно быть не отрицательным';

//    @defineDocumentDetailGrossWeight(invoice, sku);

    @defineDocumentInterfaceDetailPrice(invoice); // объявляем цену без НДС
    price[Invoice.InvoiceDetail](InvoiceDetail detail) += price(detail);

    @defineDocumentInterfaceDetailVAT(invoice, countrySupplierStock, , ); // объявляем шкалу
    
    // запись задана после объявления формы
    @deriveDocumentDetailValueVAT(userInvoice); // записываем значение ставки
       
    equalSkuVATInvoices 'Запрет на различный НДС в накладных  (продажа-возврат) и SKU' = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() SaleReturnEqualSkuVATInvoices = equalSkuVATInvoices
    ;
    
    DESIGN options {        
        invoiceSaleReturn {
            MOVE PROPERTY(SaleReturnEqualSkuVATInvoices);
        }
    }
//    CONSTRAINT equalSkuVATInvoices() AND VATUserInvoiceDetail(d) AND isPostedUserInvoiceDetail(d) AND NOT VATSkuCountry(skuUserInvoiceDetail(d), countryStock(customerStockUserInvoiceDetail(d))) == VATUserInvoiceDetail(d)
//        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';
        
        
    blankLineInvoices 'Разрешить строки без SKU в накладных  (продажа-возврат)' = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() SaleReturnBlankLineInvoices = blankLineInvoices
    ;
    
    DESIGN options {
        invoiceSaleReturn {
            MOVE PROPERTY(SaleReturnBlankLineInvoices);    
        }
    }

    CONSTRAINT isPosted(UserInvoiceDetail d) AND NOT sku(d) AND NOT blankLineInvoices()
        MESSAGE 'Для строки накладной  (продажа-возврат) должен быть задан SKU';               

    VAT[Invoice.InvoiceDetail](InvoiceDetail detail) += VAT(detail);
    valueVAT[Invoice.InvoiceDetail](InvoiceDetail detail) += valueVAT(detail);

    @defineDocumentInterfaceDetailPricePrefix (invoice, invoice, ' с НДС'); // объявляем цену с НДС
    invoicePrice[Invoice.InvoiceDetail](InvoiceDetail detail) += invoicePrice(detail);
    
    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(userInvoice);
    @defineDocumentDetailNumberVATOnChange(userInvoice, supplierStock);
    @defineDocumentDetailValueVATOnChange(userInvoice);
    @defineDocumentDetailInvoicePriceVATOnChange(userInvoice);
    
    priceRound = ABSTRACT CASE OVERRIDE FIRST INTEGER (InvoiceDetail);
    priceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

    homePriceRound = ABSTRACT CASE OVERRIDE FIRST INTEGER (InvoiceDetail);
    homePriceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

    @defineDocumentInterfacePriceListType(invoice); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userInvoice, return); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentInterfaceDetailDataSum(invoice); // объявляем сумму без НДС
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, , currency, quantity, priceRound);
    sum[Invoice.InvoiceDetail](InvoiceDetail detail) += sum(detail);

    @defineDocumentInterfaceDetailVATDataSum (invoice, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userInvoice); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum(userInvoice, invoice); // записываем сумму с НДС

    VATSum[Invoice.InvoiceDetail](InvoiceDetail detail) += VATSum(detail);
    invoiceSum[Invoice.InvoiceDetail](InvoiceDetail detail) += invoiceSum(detail);

    @defineDocumentInterfaceHeaderVATSum(invoice, invoice);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentInterfaceHeaderItemQuantity(invoice);
    @defineDocumentInterfaceHeaderItemCount(invoice);    
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);

    @defineDocumentInterfaceHeaderItemSum (invoice, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (invoice, , ); //-- сумма поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum(invoice, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)

    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале
    @defineAddDetailDialogSkuStock(userInvoice, sku, supplierStock, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);
    //-- вес
    sumNetWeight 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
    sumNetWeight 'Вес нетто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumNetWeight(UserInvoiceDetail d) += sumNetWeight(d);
    sumNetWeight[Invoice.InvoiceDetail](InvoiceDetail d) += sumNetWeight(d);
    
    sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);        
    sumGrossWeight 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumGrossWeight(UserInvoiceDetail d) += sumGrossWeight(d);
    sumGrossWeight[Invoice.InvoiceDetail](InvoiceDetail d) += sumGrossWeight(d);
       
    sumNetWeight(UserInvoiceDetail d) <- netWeight(sku(d)) * quantity(d)
        WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
    sumGrossWeight(UserInvoiceDetail d) <- grossWeight(sku(d)) * quantity(d)
        WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
                  
    @defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');       
    @defineDocumentHeaderNetWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг');  
    @defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');
    @defineDocumentHeaderGrossWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг'); 
    changeGrossWeight  = ACTION (Invoice invoice) {
        REQUEST NUMERIC[16,3] INPUT;
        IF requestedNumeric() THEN {           
            sumGrossWeight(InvoiceDetail d) <- NUMERIC[9,3](sumNetWeight(d)/(sumNetWeightInvoiceDetail(invoice) IF sumNetWeightInvoiceDetail(invoice) != 0)* requestedNumeric())
                WHERE d IS InvoiceDetail AND invoice(d) == invoice;
    
        } ELSE {
           
            sumGrossWeight(InvoiceDetail d) <- NULL WHERE d IS InvoiceDetail AND invoice(d) == invoice;    
        }        
    } 
        
    countInvoiceDetail (stock, invoice) = GROUP SUM 1 BY supplierStock(InvoiceDetail invoiceDetail), invoice(invoiceDetail);

    @implementDocumentSupplierCustomer(invoice);
    
    @defineMovementSku(invoiceDetail, supplierStock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userInvoiceDetail, supplierStock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(invoiceDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineBarcodeSku(invoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

    @defineMovementPriceSku(invoiceDetail, supplierStock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userInvoiceDetail, supplierStock); //-- показываем по нажатию правой клавиши  изменение цены товара
//    fillDocumentInvoice 'Подбор документа' = ACTION (userInvoice) {
//        FORM documents MODAL;
//        IF formResult() == FormResult.ok THEN {
//            LOCAL chosenDocument = Document();
//            ASSIGN chosenDocument() <- chosenObject('d');
//            FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = UserInvoiceDetail DO {
//                ASSIGN userInvoiceUserInvoiceDetail(i) <- userInvoice;
//                ASSIGN skuInvoiceDetail(i) <- skuDocumentDetail(documentDetail);
//                ASSIGN quantityInvoiceDetail(i) <- quantityDocumentDetail(documentDetail);
//                ASSIGN priceInvoiceDetail(i) <- priceDocumentDetail(documentDetail);
//            }
//        }
//    } TOOLBAR;
    @defineDocumentDialogSupplierCustomerStock(userInvoice, company, customer);
    @defineDocumentDialogSupplierCustomerStockDetail(userInvoiceDetail, company, customer);
    @defineDocumentDialogSupplierCustomerLegalEntity(userInvoice, company, customer);

// --------------------------- Формы ---------------------------------- //
    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundVAT 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
        
    edit 'Редактировать' = ACTION ABSTRACT LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit[Invoice.Invoice] (Invoice invoice) += ACTION edit(invoice);
    skipShowQuantity = ABSTRACT BOOLEAN (Invoice);
    showQuantity (Invoice i) = i IS Invoice AND NOT skipShowQuantity(i);
    editSku 'Редактировать SKU' (UserInvoiceDetail d) = ACTION edit(sku(d));
    
    FORM userInvoice 'Накладная (продажа-возврат)'
        OBJECTS i = UserInvoice FIXED PANEL
        PROPERTIES (i) isPosted, nameSupplier ON CHANGE changeSupplierCompany(i),
                       nameSupplierStock ON CHANGE changeSupplierStockCompany(i),
                       nameCustomer ON CHANGE changeCustomerCustomer(i),
                       nameCustomerStock ON CHANGE changeCustomerStockCustomer(i),
                       nameNumerator, number, series, date, time,
                       nameCurrency, nameAgreement, namePriceListType SHOWIF noAgreement(i), note,
                       seriesNumberContractSku, isCommission
        PROPERTIES (i) countUserInvoiceDetail, quantityUserInvoiceDetail, sumUserInvoiceDetail,
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, sumNetWeightInvoiceDetail, 
                       sumGrossWeightInvoiceDetail ON CHANGE changeGrossWeight(i) 

        OBJECTS d = UserInvoiceDetail FIXED GRID
        PROPERTIES (d) index
        PROPERTIES (d) ON EDIT editSku(d) BACKGROUND backgroundSku(d) idBarcodeSku, 
                       idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
        PROPERTIES (d) quantity SHOWIF showQuantity(i), namePriceListType,
                       price ON CHANGE changePrice(d), sum,
                       numberVAT ON CHANGE changeNumberVAT(d) BACKGROUND backgroundVAT(d),
                       valueVAT ON CHANGE changeValueVAT(d) BACKGROUND backgroundVAT(d),
                       invoicePrice ON CHANGE changeInvoicePrice(d),
                       VATSum, invoiceSum, sumNetWeight BACKGROUND backgroundSku(d), 
                       sumGrossWeight BACKGROUND backgroundSku(d), ADDOBJ, deleteid=DELETESESSION
        ORDER BY index(d)

        PROPERTIES(i) TODRAW d fillDocument, addDetailDialogSkuStockUserInvoiceDetail,
                               addDetailInputBarcodeUserInvoiceDetail, deleteUserInvoiceDetail
        FILTERS userInvoice(d) == i

        EVENTS
            ON OK prePost(i)

//        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
//                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
//                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail

        EDIT UserInvoice OBJECT i
    ;

    DESIGN userInvoice {
        main {
            preferredSize = (1024, 768);
            NEW header.box {
                type = CONTAINERH;

                NEW headerParams {
                    fill = 1;

                    MOVE i.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPosted(i));
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumerator(i));
                            MOVE PROPERTY(number(i));
                            MOVE PROPERTY(series(i));
                            MOVE PROPERTY(date(i));
                            MOVE PROPERTY(time(i));
                        }    
                    }
                    NEW headerLegalEntity {
                        type = CONTAINERH;
                        NEW headerSupplier {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplier(i));
                            MOVE PROPERTY(nameSupplierStock(i));
                        }
                        NEW headerCustomer {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomer(i));
                            MOVE PROPERTY(nameCustomerStock(i));
                        }
                    }
                    NEW headerTabbedPane {
                        alignment = STRETCH;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            NEW headerContract {
                                type = CONTAINERH;
                                caption = 'Договор';
                                MOVE PROPERTY(seriesNumberContractSku(i));
                                MOVE PROPERTY(isCommission(i));
                            }
                            MOVE i.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = COLUMNS;
                            columns = 4;
//                            minimumSize = (500, -1);
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = CONTAINERH;
                            columns = 2;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = COLUMNS;
                            columns = 2;
//                            minimumSize = (500, -1);
                        }
                        NEW import {
                            caption = 'Импорт';
                            type = CONTAINERH;
                        }
                    }
                }
                MOVE i.documentSum {
                    columns = 1;
                    NEW sumWeight {
                        caption = 'Вес';
                        MOVE PROPERTY(sumNetWeightInvoiceDetail(i)); 
                        MOVE PROPERTY(sumGrossWeightInvoiceDetail(i));                                                                                                                                                                                                                
                    }
                }
            }
            NEW specification.box {
                fill = 1;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }

            MOVE functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserInvoiceDetail(i)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserInvoiceDetail(i)) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserInvoiceDetail(i)) { preferredCharWidth = 13;}
            PROPERTY(deleteUserInvoiceDetail(i)){focusable = FALSE;}
        }
    }

    //возможность приоритетной подмены
    overVAT = ABSTRACT OVERRIDE FIRST Range (UserInvoiceDetail);
    overVAT(UserInvoiceDetail d) += VAT (sku(d), country(supplierStock(d)));
    changedVAT = ABSTRACT OVERRIDE BOOLEAN (UserInvoiceDetail); 
    
    WHEN SESSION FORMS userInvoice
        (CHANGED(sku(UserInvoiceDetail detail)) OR CHANGED (supplierStock(detail)) OR changedVAT(detail)) AND NOT CHANGED(VAT(detail)) DO {
            VAT(detail) <- overVAT(detail);
            
        } // записываем шкалу
        
    CONSTRAINT equalSkuVATInvoices() AND VAT(UserInvoiceDetail d) AND isPosted(d) AND NOT overVAT(d) == VAT(d)
        MESSAGE 'НДС в строке накладной  (продажа-возврат) не соответствует НДС для SKU';        
    // Добавляем подбор товаров / партий
    @defineDocumentSkuPriceListTypeAgreement(userInvoice, supplier, return){
    @defineDocumentSku(userInvoice, sku, stock, supplier){
    @defineDocumentSku(userInvoice, userInvoiceDetail, sku, stock, supplier){
    userInvoiceDetailSupplier (sku, userInvoice, stock) =  GROUP MAX (UserInvoiceDetail userInvoiceDetail)
        BY sku(userInvoiceDetail), userInvoice(userInvoiceDetail), supplierStock(userInvoiceDetail);
    userInvoiceDetail (Sku sku, UserInvoice userInvoice) = userInvoiceDetailSupplier(sku, userInvoice, supplierStock(userInvoice));

    currentBalance 'Остаток' (Sku sku, UserInvoice userInvoice) = currentBalance(sku, supplierStock(userInvoice));
    prevCurrentBalance 'Остаток' (Sku sku, UserInvoice userInvoice) = prevCurrentBalance(sku, supplierStock(userInvoice));
//    backgroundQuantitySku###object 'Цвет' (sku, object) = RGB(255,128,128) IF quantity###detail###skuProp###object(sku, object) AND NOT
//        (quantity###detail###skuProp###object(sku, object) <= currentBalanceSku###object(sku, object));
    backgroundQuantity 'Цвет' (sku, userInvoice) = ABSTRACT CASE COLOR (Sku, UserInvoice);  

    overChangeQuantityValueSku = ACTION ABSTRACT LIST (UserInvoiceDetail);

    changeQuantityValue = ACTION (Sku sku, UserInvoice userInvoice) {
        IF userInvoiceDetail(sku, userInvoice) THEN {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                quantity(UserInvoiceDetail userInvoiceDetail) <- requestedNumeric() WHERE userInvoiceDetail == userInvoiceDetail(sku, userInvoice);
                overChangeQuantityValueSku(userInvoiceDetail(sku, userInvoice));
            } ELSE {
                FOR userInvoiceDetail(sku, userInvoice) == UserInvoiceDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                FOR ADDOBJ d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    sku(d) <- sku;
                    quantity (d) <- requestedNumeric();
                    overChangeQuantityValueSku(d);
                }
            }
        }
    }

    changeQuantity = ACTION (Sku sku, UserInvoice userInvoice) {
        REQUEST NUMERIC[16,5] INPUT;
        EXEC changeQuantityValue(sku, userInvoice);
    }

    // Выбор всего остатка
    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, UserInvoice);
    changeAllQuantity = ACTION (Sku sku, UserInvoice userInvoice) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantity (sku,userInvoice) <- TRUE;
            requestedNumeric() <- prevCurrentBalance(sku,userInvoice);
            changeQuantityValue(sku, userInvoice);
        } ELSE {
            allQuantity (sku,userInvoice) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValue(sku, userInvoice);
        }
    }

};
};
    priceListType(UserInvoice userInvoice, Sku sku) = OVERRIDE priceListType(userInvoice) IF sku IS Sku, returnPriceListType(agreement(userInvoice), sku);

//    priceSku###object 'Цена' (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stockProp###object(object), dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Sku sku, UserInvoice userInvoice) = prevPriceB[PriceListType,Sku,Stock,DATETIME](ledgerPriceListType(priceListType(userInvoice, sku)), sku, supplierStock(userInvoice), dateTime(userInvoice));

    viewPrice 'Цена' (sku, userInvoice) = DATA LOCAL NUMERIC[14,2] (Sku, UserInvoice);

    price 'Цена' (Sku sku, UserInvoice userInvoice) = viewPrice(sku, userInvoice);

    updateViewPrice (Sku sku, UserInvoice userInvoice) = ACTION {
        FOR PriceListType pt == priceListType(userInvoice, sku) NOINLINE (pt) DO
            viewPrice(sku, userInvoice) <- prevPriceB(pt, sku, supplierStock(userInvoice), dateTime(userInvoice));
    }
};
    @extendFormDocumentSkuPriceListTypeAgreement(userInvoice, userInvoice, i, supplierStock){
    @extendFormDocumentSkuPriceListTypeAgreement(userInvoice, userInvoiceDetail, userInvoice, i, sku, supplierStock){
    @extendFormDocumentSku(userInvoice, userInvoiceDetail, userInvoice, i, sku){

    backgroundPickName 'Цвет в подборе' = ABSTRACT CASE COLOR (Sku, UserInvoice);
    hideQuantitySkuDocument = ABSTRACT BOOLEAN (UserInvoice);
    showQuantitySkuDocument = NOT hideQuantitySkuDocument(UserInvoice o); 
    
    EXTEND FORM userInvoice

        TREE skuTree sk = SkuGroup PARENT parent
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDER BY order(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

        OBJECTS ks=Sku
        PROPERTIES READONLY      inputName = name(ks) BACKGROUND backgroundPickName(ks, i)
        PROPERTIES(ks) READONLY  BACKGROUND backgroundPickName(ks, i) idBarcode, id SHOWIF showIDs(), shortNameUOM
        PROPERTIES(ks, i) quantityUserInvoiceDetail ON CHANGE changeQuantity(ks, i) 
                                    BACKGROUND backgroundQuantity(ks, i) SHOWIF showQuantitySkuDocument(i)
                                    QUICKFILTER inputName,
                                 prevCurrentBalance READONLY,
                                 allQuantity ON CHANGE changeAllQuantity(ks, i),
                                 price READONLY
        PROPERTIES               addSku() TODRAW ks, edit(ks), copy(ks)

        FILTERS                isParent(sk, ks)
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        ORDER BY inputName
    ;

    seekSkuBarcode = ACTION (UserInvoice userInvoice, STRING[15] barcode) { 
        IF skuBarcode(barcode, date(userInvoice)) THEN {
            SEEK userInvoice.ks skuBarcode(barcode, date(userInvoice));     
        } ELSE {
            MESSAGE 'Штрихкод не найден.';
        }
    }
    
    seekOverSku = ACTION (UserInvoice userInvoice) {
        REQUEST STRING[15] INPUT;
        IF requestedString() THEN {
            seekSkuBarcode(userInvoice, requestedString());
        }        
    };
    seekSku 'Поиск по штрихкоду:' (UserInvoice userInvoice) = DATA LOCAL STRING[15] (UserInvoice) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE seekOverSku(userInvoice);       
    EXTEND FORM userInvoice
        PROPERTIES(i) TODRAW ks seekSku    
    ;
    DESIGN userInvoice {
        specification.box {
            type = TABBED;
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;
                fill = 1;
                MOVE skuTree.tree.box { caption = 'Группы SKU'; }
                NEW skuMainPane {
                    fill = 3;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        NEW skuPane {
                            type = CONTAINERV;
                            caption = 'Товары';
                            fill = 1;
                            NEW skuTopPane {
                                caption = 'Поиск товара';
                                MOVE PROPERTY(seekSku(i));
                            }
                            MOVE ks.box;               
                        }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, i)) { background = #FFEEEE; }
        PROPERTY(quantityUserInvoiceDetail(ks, i)) { background = #D4FFD4; }
    }
};

    currentUserInvoiceUserInvoice() = DATA LOCAL Object ();
    setCurrentUserInvoiceUserInvoice(Object i) = ACTION currentUserInvoiceUserInvoice() <- i;

    EXTEND FORM userInvoice
        EVENTS ON CHANGE i setCurrentUserInvoiceUserInvoice(i)
    ;

    WHEN SESSION FORMS userInvoice (SET([= VIEW userInvoice.ks](Sku sku)) AND (Object i) == currentUserInvoiceUserInvoice()) OR 
                            ((CHANGED(supplierStock[UserInvoice](i)) OR 
                              CHANGED(dateTime[UserInvoice](i)) OR
                              CHANGED(priceListType[UserInvoice](i)) OR
                              CHANGED(agreement[UserInvoice](i))) AND [= VIEW userInvoice.ks](sku)) DO
        updateViewPrice(sku, i);
};
};

    addUserInvoice 'Добавить' = ACTION ADDFORM UserInvoice;
    edit 'Редактировать' (userInvoice) = ACTION EDITFORM UserInvoice;
    edit (UserInvoice invoice) += ACTION edit(invoice);

    overCopy = ACTION ABSTRACT LIST (Invoice, UserInvoice);
    overCopy = ACTION ABSTRACT LIST (UserInvoiceDetail, InvoiceDetail);
    
    copy 'Копировать' = ACTION (Invoice invoice) NEWSESSION {
        FOR ADDOBJ i = UserInvoice DO {
            ASSIGN supplier(i) <- supplier(invoice);
            ASSIGN supplierStock(i) <- supplierStock(invoice);
            ASSIGN customer(i) <- customer(invoice);
            ASSIGN customerStock(i) <- customerStock(invoice);
            ASSIGN contractSku(i) <- contractSku(invoice);
            ASSIGN isCommission(i) <- isCommission(invoice);
            ASSIGN currency(i) <- currency(invoice);
            ASSIGN agreement(i) <- agreement(invoice);
            ASSIGN priceListType(i) <- priceListType(invoice);
            ASSIGN note(i) <- note(invoice);
            //ASSIGN createShipmentUserInvoice(i) <- createShipmentUserInvoice(invoice);

            EXEC overCopy(invoice, i);

            FOR invoice(InvoiceDetail invoiceDetail) == invoice DO {
                FOR ADDOBJ d=UserInvoiceDetail DO {
                    ASSIGN userInvoice(d) <- i;
                    ASSIGN sku(d) <- sku(invoiceDetail);
                    ASSIGN quantity(d) <- quantity(invoiceDetail);
                    ASSIGN price(d) <- price(invoiceDetail);
                    ASSIGN dataSupplierStock(d) <- dataSupplierStock(invoiceDetail);
                    
                    EXEC overCopy(d, invoiceDetail);
                }
            }

            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopy = ACTION ABSTRACT LIST (UserInvoiceDetail, UserInvoiceDetail);

    copy 'Копировать' = ACTION (UserInvoiceDetail detail) {
        FOR ADDOBJ d = UserInvoiceDetail DO {          

            userInvoice(d) <- userInvoice(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            dataSupplierStock(d) <- dataSupplierStock(detail);
            priceListType(d) <- priceListType(detail);
            invoicePrice(d) <- invoicePrice(detail);
            
            overCopy(d, detail);                              
        }
    } EDITKEY 'F5' TOOLBAR;
    
    EXTEND FORM userInvoice PROPERTIES(d) copy FORCE PANEL;
    DESIGN userInvoice { PROPERTY(copy(d)) { focusable = FALSE; } }

    isUserOpened(UserInvoice i)=  isOpened[Invoice](i) AND is(i);
    
    filterInvoiceDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Invoice i) = date(i) >= filterInvoiceDateFrom() OR (i IS Invoice AND NOT filterInvoiceDateFrom());      
    
    filterInvoiceDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Invoice i) = date(i) <= filterInvoiceDateTo() OR (i IS Invoice AND NOT filterInvoiceDateTo());      
    
    filterInvoiceCustomer  = DATA LOCAL LegalEntity ();
    nameFilterInvoiceCustomer 'Покупатель' = name(filterInvoiceCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomer (Invoice i) = customer(i) == filterInvoiceCustomer() OR (i IS Invoice AND NOT filterInvoiceCustomer());    

    filterInvoiceCustomerStock  = DATA LOCAL Stock ();
    nameFilterInvoiceCustomerStock 'Склад покупателя' = name(filterInvoiceCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStock (Invoice i) = customerStock(i) == filterInvoiceCustomerStock() OR (i IS Invoice AND NOT filterInvoiceCustomerStock());  

    filterInvoiceSupplier = DATA LOCAL LegalEntity ();
    nameFilterInvoiceSupplier 'Поставщик' = name(filterInvoiceSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplier (Invoice i) = supplier(i) == filterInvoiceSupplier() OR (i IS Invoice AND NOT filterInvoiceSupplier());      

    filterInvoiceSupplierStock  = DATA LOCAL Stock ();
    nameFilterInvoiceSupplierStock 'Склад поставщика' = name(filterInvoiceSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStock (Invoice i) = supplierStock(i) == filterInvoiceSupplierStock() OR (i IS Invoice AND NOT filterInvoiceSupplierStock());      
    
    filterInvoiceCustomUser  = DATA LOCAL CustomUser ();
    nameFilterInvoiceCustomUser 'Создан пользователем' = name[Contact](filterInvoiceCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUser (Invoice i) = createdUser[UserInvoice](i) == filterInvoiceCustomUser() OR (i IS Invoice AND NOT filterInvoiceCustomUser());  

    filterInvoiceComputer = DATA LOCAL Computer ();
    nameFilterInvoiceComputer 'Создан на компьютере' = hostname(filterInvoiceComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputer (Invoice i) = createdComputer(i) == filterInvoiceComputer() OR (i IS Invoice AND NOT filterInvoiceComputer());
    
    overShowEdit = ABSTRACT BOOLEAN (Invoice);
    overShowDelete = ABSTRACT BOOLEAN (Invoice);
    skipShowEdit = ABSTRACT BOOLEAN (Invoice);
    skipShowDelete = ABSTRACT BOOLEAN (Invoice);
    
    overShowEdit[Invoice.Invoice](Invoice i) += overShowEdit(i);
    overShowDelete[Invoice.Invoice](Invoice i) += overShowDelete(i);
    
    overPreventClose = ABSTRACT BOOLEAN (UserInvoice);
    overPreventOpen = ABSTRACT BOOLEAN (UserInvoice);
    showClose (UserInvoice i) = isOpened(i) AND NOT overPreventClose(i);   
    showOpen (UserInvoice i) = isClosed(i) AND NOT overPreventOpen(i);   
    backgroundDraft 'Цвет'  (Invoice i)= RGB(212,255,212) IF isDraft(i); 
    
    FORM invoices 'Накладные' 
    
        PROPERTIES() filterInvoiceDateFrom, filterInvoiceDateTo, nameFilterInvoiceSupplier, nameFilterInvoiceSupplierStock, 
                     nameFilterInvoiceCustomer, nameFilterInvoiceCustomerStock, nameFilterInvoiceCustomUser, nameFilterInvoiceComputer
        
        OBJECTS i = Invoice LAST
        PROPERTIES (i) READONLYIF isReadonly() isClosed 
                                
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND backgroundDraft(i) isPosted,
                                number, series, date, time                                
        PROPERTIES (i) READONLYIF isReadonly() nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                                nameCurrency, nameAgreement,
                                seriesNumberContractSku, isCommission
        PROPERTIES (i) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail
        PROPERTIES (i) READONLYIF isReadonly() note
        PROPERTIES (i) READONLY FORCE PANEL createdNameUser[UserInvoice], createdTime[UserInvoice], createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer 

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) edit SHOWIF overShowEdit(i),//isOpenedInvoice(i), 
                       copy
        PROPERTIES (i) close[UserInvoice] SHOWIF showClose(i), open SHOWIF showOpen(i)
        PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF overShowDelete(i)//isUserOpenedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, namePriceListType, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum
        ORDER BY index(d)

        FILTERS invoice(d) == i
        FILTERS filterDateFrom(i), 
                filterDateTo(i),
                filterSupplier(i),
                filterSupplierStock(i),
                filterCustomer(i),
                filterCustomerStock(i),
                filterCustomUser(i),
                filterComputer(i)
                
        DIALOG Invoice OBJECT i
    ;

    DESIGN invoices 'Накладные (продажа-возврат)' {
        main {
            preferredSize = (1024, 768);
            PROPERTY (deletei) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                fill = 1;

                type = SPLITV;
                NEW filtersBox {                       
                    fill = 1;
                    NEW topFilters {
                        caption = 'Фильтры';
                        type = CONTAINERV; 
                        NEW topFilters1 {
                            type = CONTAINERH; 
                            MOVE PROPERTY(filterInvoiceDateFrom());
                            MOVE PROPERTY(filterInvoiceDateTo());                            
                            MOVE PROPERTY(nameFilterInvoiceSupplier());
                            MOVE PROPERTY(nameFilterInvoiceSupplierStock());    
                            MOVE PROPERTY(nameFilterInvoiceCustomer());
                            MOVE PROPERTY(nameFilterInvoiceCustomerStock());                                                    
                        }
                        NEW topFilters2 {
                            type = CONTAINERH; 
                            MOVE PROPERTY(nameFilterInvoiceCustomUser());
                            MOVE PROPERTY(nameFilterInvoiceComputer());                            
                        }                                                                                         
                    }
                    MOVE i.box {
                        fill = 1;
                    }
                }    

                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE d.box {
                        fill = 1;
                        caption = 'Спецификация';
                    }
                    NEW documentHistory {
                        caption = 'История';
                        type = CONTAINERV;

                        MOVE i.created;
                        MOVE i.posted;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                    NEW actionContainer {
                        caption = 'Действия';
                        type = CONTAINERH;
                        NEW createdContainer {
                            caption = 'Создание на основе';
                            type = CONTAINERV;

                            MOVE PROPERTY(copy(i)) { caption = 'Накладная (продажа-возврат)';}
                        }
                        NEW machineryContainer {
                            caption = 'Загрузка';
                            type = CONTAINERV;
                        }
                    }
                }
            }
        }
    }
    @extendFormEditable(invoices){
    EXTEND FORM invoices
        PROPERTIES() isEditable
    ;
    DESIGN invoices {
        functions.box {
            MOVE PROPERTY(isEditable()) BEFORE rightControls;
        }
    }
};
    @defineFilterIsOpened (invoice, invoices, i){   
    EXTEND FORM invoices
        FILTERGROUP invoicefilters6 FILTER 'Открыт' isOpened(i) 'F6' DEFAULT
    ;   
}; 
    @defineDocumentLogForm(invoices, i){
    EXTEND FORM invoices
        OBJECTS dLog=DocumentLog FIXED GRID
        PROPERTIES(dLog) SHOWIF enableDocumentLog() READONLY numberDocument, seriesDocument, dateDocument, nameSupplierStock, nameCustomerStock, typeDocument,
                      hostnameComputer, userLogin, nameContact, dateTimeSession, nameTypeChange,
                      note
        PROPERTIES (dLog) openFile SHOWIF showFile(dLog)
        FILTERS document(dLog) == i

        OBJECTS ddLog = DocumentDetailLog FIXED GRID
        PROPERTIES (ddLog) SHOWIF enableDocumentLog() READONLY index, idSku, nameSku, quantity,
                       price, nameUser, dateTime, note
        FILTERS document(ddLog) == i
    ;
    
    DESIGN invoices {
        documentHistory { 
            NEW historyTabs {
                 fill = 1;
                 type = TABBED;
                 NEW historyLog{
                    caption = 'По документу';
                    type = CONTAINERV;
                    MOVE dLog.box;
                 }
                 NEW detailLog{
                     caption = 'По строкам';
                     MOVE ddLog.box;
                 }
            }
        }    
    }   
};
    FORM invoiceDetails 'Продажа'
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                               description,
                               quantity, price, sum,
                               numberVAT, valueVAT, VATSum, invoiceSum,
                               nameSupplierStock

        DIALOG InvoiceDetail OBJECT d
    ;
    
    backgroundVAT(UserInvoiceDetail d) += WHEN isItem(sku(d)) AND NOT 
        ((valueVAT(d) == valueVAT(sku(d), country(customerStock(d)), date(d)))
         OR (valueVAT(d) == overSetValueVAT(d))) 
            THEN RGB(255,0,0); 
            
    edit 'Редактировать' = ACTION ABSTRACT LIST (InvoiceDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit(UserInvoiceDetail d) = ACTION (d) NEWSESSION {
        FORM userInvoice OBJECTS i = userInvoice(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    edit(UserInvoiceDetail d) += ACTION edit(d);        
};
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, customer);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, customer);

in(Invoice i) += i IS Invoice;

// Добавляем партии
@defineInvoiceBatch(supplier, return, SaleReturn, ' ((продажа-возврат)');
batch[Invoice.InvoiceDetail](InvoiceDetail d) += batch(d);
@defineInvoiceBatchDialogStock(supplierStock, In);

// Добавляем операцию
@defineDocumentOperationContainer(invoice, i, overName);
@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, 'накладная (продажа-возврат)', SaleReturn);

@defineOrderInvoice(' (продажа-возврат)', supplier);

@defineInvoiceReturn(Sale, SaleReturn, supplierStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа-возврат)', userInvoice, return);

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

operation[Invoice.Invoice](Invoice o) += operation(o);
// Добавляем в копирование инвойсов
overCopy(Invoice s, UserInvoice d) += ACTION(s, d) {
    ASSIGN operation(d) <- operation(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserInvoice userInvoice) AND NOT isCompany(supplier(userInvoice))
    CHECKED BY supplier[UserInvoice] MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся компанией: возврат';
CONSTRAINT customer(UserInvoice userInvoice) AND NOT isCustomer(customer(userInvoice))
    CHECKED BY customer[UserInvoice] MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся покупателем: возврат';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isCompany(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier[] MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterInvoiceSupplierStock() AND NOT isCompany(filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Для фильтра в накладной выбран в качестве склада поставщика склад, который не принадлежит компании';   
        
CONSTRAINT filterInvoiceCustomer() AND NOT isCustomer(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer[] MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся покупателем';  
       
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT in(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT in(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';         

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
packQuantity[Invoice.InvoiceDetail](InvoiceDetail detail) += packQuantity(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSku(UserInvoiceDetail detail) += ACTION (detail) {
    IF  packBarcode(sku(detail)) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}
overChangeQuantityValueBatch(UserInvoiceDetail detail) += ACTION (detail) {
    IF packBarcode(sku(batch(detail))) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserInvoice userInvoice, Sku sku)= inCustomer(customer(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(ks, i) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' in(i, ks) 'F8'
        FILTER 'В прайсе' ledgerPrice(ks, i) 'F7'
;

in (UserInvoice userInvoice, Batch batch)= inCustomer(customer(userInvoice), sku(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(b,i) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' in(i,b) 'F8'
        FILTER 'В прайсе' ledgerPrice(b, i) 'F7'

;

// Резервы
@extendFormDocumentSkuOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);
edit[SaleLedger] (InvoiceDetail ledger) += ACTION edit(ledger);
operation (InvoiceDetail ledger) += operation(ledger);
quantity[SaleLedger] (InvoiceDetail ledger) += -quantity(ledger);
VAT[SaleLedger] (InvoiceDetail ledger) += VAT(ledger);
sum[SaleLedger] (InvoiceDetail ledger) += -invoiceSum(ledger);
price[SaleLedger] (InvoiceDetail ledger) += invoicePrice(ledger);
customer (InvoiceDetail ledger) += customer(ledger);
customerStock (InvoiceDetail ledger) += customerStock(ledger);
skip (InvoiceDetail ledger) += WHEN ledger IS SaleReturn.InvoiceDetail THEN skipSaleLedger(operation(ledger));
numberDocument (InvoiceDetail ledger) += number(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEdit (Invoice i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserInvoice i) += showEditDeleteUser(i) AND isUserOpened(i)AND NOT skipShowDelete(i); 

overPreventClose (UserInvoice i) += preventCloseDocument(currentUser(), operation(i));

NAVIGATOR {
    saleReturnNavigator {
        ADD invoices;
    }
}

CONSTRAINT  isPosted(UserInvoice i) AND isContract(operation(i)) AND NOT contractSku[Invoice](i) 
    MESSAGE 'Для накладной (продажа-возврат) обязан быть задан договор';
    
disableShowBatch(Invoice i) += disableShowBatch(operation(i));

CONSTRAINT isPosted(UserInvoiceDetail d) AND isSaleReturnBatch(operation(d)) AND sku(d) AND NOT batch(d) 
    MESSAGE 'Для строки накладной (продажа-возврат) должна быть задана партия'; 
    
CONSTRAINT isPosted(Invoice i) AND isCharLength(operation(i)) AND NOT (charLength(number(i)) == 7 AND onlyDigits(number(i)) == 1)
    MESSAGE 'У накладной (продажа-возврат) номер должен состоять из семи цифр';