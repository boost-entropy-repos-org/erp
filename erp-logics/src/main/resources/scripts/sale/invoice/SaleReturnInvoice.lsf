MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice, SaleOperation;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplier, company, customer, SaleReturn);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, customer);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, customer);

Invoice.inInvoice(i) += i IS Invoice;

// Добавляем партии
@defineInvoiceBatch(supplier, SaleReturn, ' ((продажа-возврат)');
Invoice.batchInvoiceDetail(d) += batchInvoiceDetail(d);
@defineInvoiceBatchDialog();

// Добавляем операцию
@defineDocumentOperationContainer(invoice, i, overName);
@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, invoiceSaleReturn, 'накладная (продажа-возврат)', SaleReturn);

@defineOrderInvoice(' (продажа-возврат)', supplier);

@defineInvoiceReturn(Sale, SaleReturn, supplierStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа-возврат)', userInvoice, return);

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

Invoice.operationInvoice(o) += operationInvoice(o);
// Добавляем в копирование инвойсов
overCopyInvoice(s, d) += ACTION(s, d) {
    ASSIGN operationUserInvoice(d) <- operationInvoice(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся компанией: возврат';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся покупателем: возврат';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isCompanyLegalEntity(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterInvoiceCustomer() AND NOT isCustomerLegalEntity(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся покупателем';  
       
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT inLegalEntityStock(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT inLegalEntityStock(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';         

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPackUserInvoice(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}
overChangeQuantityValueBatchUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserInvoiceDetail(detail))) THEN {
        packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuUserInvoice(ks, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetailSkuUserInvoice(ks, i) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' inUserInvoiceSku(i, ks) 'F8'
        FILTER 'В прайсе' ledgerPriceSkuUserInvoice(ks, i) 'F7'
;

inUserInvoiceBatch (userInvoice, batch)= inCustomerSku(customerUserInvoice(userInvoice), skuBatch(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchUserInvoice(b, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetailBatchUserInvoice(b,i) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' inUserInvoiceBatch(i,b) 'F8'
        FILTER 'В прайсе' ledgerPriceBatchUserInvoice(b, i) 'F7'

;

// Резервы
@extendFormDocumentSkuOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);
editSaleLedger (ledger) += ACTION editInvoiceDetail(ledger);
operationSaleLedger (ledger) += operationInvoiceDetail(ledger);
costSaleLedgerBatch(ledger, batch) += -quantityInvoiceDetail(ledger) IF  batchInvoiceDetail(ledger)== batch;
quantitySaleLedger (ledger) += -quantityInvoiceDetail(ledger);
VATSaleLedger (ledger) += VATInvoiceDetail(ledger);
sumSaleLedger (ledger) += -invoiceSumInvoiceDetail(ledger);
customerSaleLedger (ledger) += customerInvoiceDetail(ledger);
customerStockSaleLedger (ledger) += customerStockInvoiceDetail(ledger);
skipSaleLedger (ledger) += skipSaleLedgerOperation(operationInvoiceDetail(ledger));
numberDocumentSaleLedger (ledger) += numberInvoiceDetail(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEditInvoice (i) += showEditDeleteUserInvoice(i) AND isOpenedInvoice(i) AND NOT skipShowEditInvoice(i);
overShowDeleteInvoice (i) += showEditDeleteUserInvoice(i) AND isUserOpenedInvoice(i); 

overPreventCloseUserInvoice (i) += preventCloseDocumentUserOperation(currentUser(), operationUserInvoice(i));

NAVIGATOR {
    saleReturnNavigator {
        ADD invoices;
    }
}

CONSTRAINT  isPostedUserInvoice(i) AND isContractOperation(operationUserInvoice(i)) AND NOT contractSkuInvoice(i) 
    MESSAGE 'Для накладной (продажа-возврат) обязан быть задан договор';