MODULE SaleInvoice;

REQUIRE SaleOrder, OrderInvoice, StockTax, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplier, company, customer, Sale);
@extendFormFilterAccessStock(Invoice, i, invoices, Sale.supplierStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, Sale.customerStock, customer);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, customer);

idCustomerStockInvoice(invoice) = idStock(customerStockInvoice(invoice));
idSupplierStockInvoice(invoice) = idStock(supplierStockInvoice(invoice));

// Добавляем партии
@defineInvoiceBatch(supplier, Sale, ' (продажа)');
Invoice.batchInvoiceDetail(d) += batchInvoiceDetail(d);
@defineInvoiceBatchDialogStock(supplierStock);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(invoice, i);
@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, 'накладная (продажа)', Sale);
@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа)', userInvoice);

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

Invoice.operationInvoice(o) += operationInvoice(o);

// Добавляем в копирование инвойсов
overCopyInvoice(s, d) += ACTION(s, d) {
    ASSIGN operationUserInvoice(d) <- operationInvoice(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceSupplier);
// ---------------------------------------------- Создание инвойса по заказу ---------------------------------- //

notFillPriceInvoiceOrderOperation 'Не использовать цены в накладной из заказа' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) notFillPriceInvoiceOrderOperation
;

DESIGN operation {
    createContainer {
        MOVE PROPERTY(notFillPriceInvoiceOrderOperation(o));
    }
}

@defineOrderInvoice(' (продажа)', supplier);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся компанией: продажа';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся покупателем: продажа';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isCompanyLegalEntity(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterInvoiceSupplierStock() AND NOT isCompanyStock(filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock MESSAGE 'Для фильтра в накладной выбран в качестве склада поставщика склад, который не принадлежит компании';     
    
CONSTRAINT filterInvoiceCustomer() AND NOT isCustomerLegalEntity(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся покупателем';   
        
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT inLegalEntityStock(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT inLegalEntityStock(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';      

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPackUserInvoice(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}
overChangeQuantityValueBatchUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserInvoiceDetail(detail))) THEN {
        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

// ---------------- Проставление партий в инвойсе с использование партий заказа -------- //

useExplicitBatchDetailUserInvoiceOrder (order) += order IS Sale.Order;

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuUserInvoice(ks, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetailSkuUserInvoice(ks, i) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' inUserInvoiceSku(i, ks) 'F8'
        FILTER 'В прайсе' ledgerPriceSkuUserInvoice(ks, i) 'F7'

;
inUserInvoiceBatch (userInvoice, batch)= inCustomerSku(customerUserInvoice(userInvoice), skuBatch(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchUserInvoice(b,i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetailBatchUserInvoice(b,i) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' inUserInvoiceBatch(i,b) 'F8'
        FILTER 'В прайсе' ledgerPriceBatchUserInvoice(b, i) 'F7'

;

// Резервы
@extendFormDocumentSkuOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------- Заполнение кода партии ----------------- //

idBatchInvoiceDetail 'Код партии' (d) = idBatch(batchInvoiceDetail(d)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatchUserInvoiceDetail 'Код партии' (d) = idBatch(batchUserInvoiceDetail(d)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

@defineMovementIdBatch(invoiceDetail, batch, supplierStock);
@defineBalancesIdBatch(invoiceDetail, batch);
@defineMovementIdBatch(userInvoiceDetail, batch, supplierStock);
@defineBalancesIdBatch(userInvoiceDetail, batch);

EXTEND FORM userInvoice
    PROPERTIES(d) READONLYIF batchUserInvoiceDetail(d) SHOWIF showBatchInvoice(i)
                  idBatchUserInvoiceDetail ON CHANGE changeBatchUserInvoiceDetail(d) BEFORE nameBatchUserInvoiceDetail(d)
;
EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showBatchInvoice(i)
                  idBatchInvoiceDetail AFTER nameBatchInvoiceDetail(d)
;

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);
editSaleLedger (ledger) += ACTION editInvoiceDetail(ledger);

operationSaleLedger (ledger) += operationInvoiceDetail(ledger);
quantitySaleLedger (ledger) += quantityInvoiceDetail(ledger);
VATSaleLedger (ledger) += VATInvoiceDetail(ledger);
sumSaleLedger (ledger) += invoiceSumInvoiceDetail(ledger);
customerSaleLedger (ledger) += customerInvoiceDetail(ledger);
customerStockSaleLedger (ledger) += customerStockInvoiceDetail(ledger);
skipSaleLedger (ledger) += skipSaleLedgerOperation(operationInvoiceDetail(ledger));
numberDocumentSaleLedger (ledger) += numberInvoiceDetail(ledger);


//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEditInvoice (i) += showEditDeleteUserInvoice(i) AND isOpenedInvoice(i) AND NOT skipShowEditInvoice(i);
overShowDeleteInvoice (i) += showEditDeleteUserInvoice(i) AND isUserOpenedInvoice(i)AND NOT skipShowDeleteInvoice(i); 

overPreventCloseUserInvoice (i) += preventCloseDocumentUserOperation(currentUser(), operationUserInvoice(i));

//--

orderBatchSkuStockDateTime (sku, stock, dateTime) = GROUP MIN orderBatch(batch) IF countLedgerBatchStock(batch, stock) AND balanceBBatchStockDateTime(batch, stock, dateTime)
                                                   BY skuBatch(batch), stock, dateTime;
firstOrderBatchSkuStockDateTime(sku, stock, dateTime) = orderBatchSkuStockDateTime(sku, stock, dateTime)[2];

fillBatchUserInvoiceDetail 'Проставить партию'  = ACTION (d) {    
    batchUserInvoiceDetail(d) <- firstOrderBatchSkuStockDateTime(skuUserInvoiceDetail(d), supplierStockUserInvoiceDetail(d), dateTimeUserInvoiceDetail(d)) 
        WHERE NOT batchUserInvoiceDetail(d)  AND
        balanceBBatchStockDateTime(firstOrderBatchSkuStockDateTime(skuUserInvoiceDetail(d), supplierStockUserInvoiceDetail(d), dateTimeUserInvoiceDetail(d)), supplierStockUserInvoiceDetail(d), dateTimeUserInvoiceDetail(d)) >= quantityUserInvoiceDetail(d);
} SHORTCUT nameBatchUserInvoiceDetail;

fillAllBatchUserInvoiceDetail 'Проставить партии для всех' = ACTION (detail) {
   FOR userInvoiceUserInvoiceDetail(detail) == userInvoiceUserInvoiceDetail(d) DO
       fillBatchUserInvoiceDetail(d);
} SHORTCUT nameBatchUserInvoiceDetail;

NAVIGATOR {
    saleSaleNavigator {
        ADD invoices;
    }
}

CONSTRAINT  isPostedUserInvoice(i) AND isContractOperation(operationUserInvoice(i)) AND NOT contractSkuInvoice(i) 
    MESSAGE 'Для накладной (продажа) обязан быть задан договор';  
    
disableShowBatchInvoice(i) += disableShowBatchOperation(operationInvoice(i));
notUseBatchPriceUserInvoiceDetail(d) += notUseBatchPriceOperation(operationUserInvoiceDetail(d));

CONSTRAINT  isPostedUserInvoiceDetail(d) AND isPriceOperation(operationUserInvoiceDetail(d)) AND NOT priceUserInvoiceDetail(d) 
    MESSAGE 'Для строки накладная (продажа) должна быть задана цена'; 
    
CONSTRAINT isPostedUserInvoiceDetail(d) AND isSaleBatchOperation(operationUserInvoiceDetail(d)) AND skuUserInvoiceDetail(d) AND NOT batchUserInvoiceDetail(d) 
    MESSAGE 'Для строки накладной (продажа) должна быть задана партия'; 