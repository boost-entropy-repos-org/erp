MODULE SaleInvoice;

REQUIRE SaleOrder, OrderInvoice, StockTax, Store, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplierStock, company, customer);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, customer);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, customer);

@defineInvoiceBatch(supplierStock);

@defineDocumentBatchPriceListType(userInvoice, supplierStock);
@extendFormDocumentBatch(userInvoice, userInvoice, i);
@extendFormDocumentBatchAll(userInvoice, userInvoice, i);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i, row1);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);
@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа)');
@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@defineDocumentOperationStock(userInvoice, supplierStock, 'Склад поставщика');
@defineDocumentOperationStock(userInvoice, customerStock, 'Склад покупателя');
@defineDocumentOperationRole(userInvoice);

// ---------------------------------------------- Создание инвойса по заказу ---------------------------------- //

@defineOrderInvoice(' (продажа)', supplierStock);
@defineOrderInvoiceAction (' (продажа)');

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(invoice, VAT, 'НДС расч.');

CONSTRAINT taxRange(VATUserInvoice(userInvoice)) != Tax.taxVAT OR
           countryRange(VATUserInvoice(userInvoice)) != countryStock(supplierStockInvoice(userInvoice)) OR
           rangeTypeRange(VATUserInvoice(userInvoice)) != RangeType.units
           CHECKED BY VATUserInvoice
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: продажа';

VATUserInvoice (userInvoice) <- rangeTaxTaxUnit(Tax.taxVAT, storeDepartmentStore(supplierStockUserInvoice(userInvoice)))
        WHEN CHANGED(supplierStockUserInvoice(userInvoice));

@deriveDocumentDetailVATHeader(userInvoice, VAT, supplierStock);

isDepartmentStoreSupplierStockInvoice (invoice) = supplierStockInvoice(invoice) IS DepartmentStore;

EXTEND FORM userInvoice
    PROPERTIES(i) numberVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i), valueVATUserInvoice SHOWIF isDepartmentStoreSupplierStockInvoice(i);
;

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся компанией: продажа';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCustomerLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся покупателем: продажа';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserInvoice);
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}
overChangeQuantityValueBatchUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserInvoiceDetail(detail))) THEN {
        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

// -- Операция
@defineOperationProperty(showPack, 'Упаковка', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showPack);

// ---------------- Проставление партий в инвойсе с использование партий заказа -------- //

useExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += userInvoice IS Sale.UserInvoice AND order IS Sale.Order;

toInvoiceBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP toInvoicedOrderDetail
                                                           LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) IF skuBatch(batch) == skuOrderDetail(orderDetail)
                                                           BY orderDetail
                                                           ORDER orderBatch(batch);

createExplicitBatchDetailUserInvoiceOrder (userInvoice, order) += ACTION (userInvoice, order) {
    FOR orderOrderDetail(orderDetail) == order AND toInvoiceBatchOrderDetail(batch, orderDetail)
        ADDOBJ d = UserInvoiceDetail DO {
            ASSIGN userInvoiceUserInvoiceDetail(d) <- userInvoice;
            ASSIGN orderUserInvoiceDetail(d) <- order;
            ASSIGN skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
            ASSIGN batchUserInvoiceDetail(d) <- batch;
            ASSIGN quantityUserInvoiceDetail (d) <- toInvoiceBatchOrderDetail(batch, orderDetail);
       // todo: решить какие цены задавать: из заказа или из партии
            ASSIGN barcodePackUserInvoiceDetail(d) <- barcodePackOrderDetail(orderDetail);
            ASSIGN amountPackUserInvoiceDetail(d) <- amountPackOrderDetail(orderDetail);
            ASSIGN packQuantityUserInvoiceDetail (d) <- toInvoicedOrderDetail(orderDetail)/amountPackOrderDetail(orderDetail);
            ASSIGN VATUserInvoiceDetail (d) <- VATOrderDetail(orderDetail);
            ASSIGN valueVATUserInvoiceDetail (d) <- valueVATOrderDetail(orderDetail);
            ASSIGN priceListTypeUserInvoiceDetail (d) <- priceListTypeOrderDetail(orderDetail);
            ASSIGN priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
            ASSIGN invoicePriceUserInvoiceDetail (d) <- invoicePriceOrderDetail(orderDetail);
            ASSIGN sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
            ASSIGN dataSupplierStockUserInvoiceDetail (d) <- dataSupplierStockOrderDetail(orderDetail);
        }
}

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, company, customer, userInvoice);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserInvoiceSku (userInvoice, sku)= inCustomerSku(customerUserInvoice(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserInvoice(ks, i) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(ks, i)

    FILTERGROUP filter2
        FILTER 'С продажей ' 'F8' inUserInvoiceSku(i, ks)
        FILTER 'В ассортименте' 'F7' ledgerPriceSkuUserInvoice(ks, i)

;
inUserInvoiceBatch (userInvoice, batch)= inCustomerSku(customerUserInvoice(userInvoice), skuBatch(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserInvoice(b,i) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailBatchUserInvoice(b,i)

    FILTERGROUP filter4
        FILTER 'С продажей ' 'F8' inUserInvoiceBatch(i,b)
        FILTER 'В ассортименте' 'F7' ledgerPriceBatchUserInvoice(b, i)

;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, supplierStock, i);
@extendFormDocumentOrderLedgerAll(userInvoice, userInvoice, i);

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);
quantitySaleLedger (ledger) += quantityInvoiceDetail(ledger);
VATSaleLedger (ledger) += VATInvoiceDetail(ledger);
sumSaleLedger (ledger) += invoiceSumInvoiceDetail(ledger);
customerSaleLedger (ledger) += customerInvoiceDetail(ledger);


NAVIGATOR {
    saleSaleNavigator {
        ADD invoices;
    }
}

//Платежи
@defineInvoicePayment();

