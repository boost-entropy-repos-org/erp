MODULE SalePurchaseInvoice;

REQUIRE SaleInvoice, PurchaseInvoice, SalePurchaseOperation;

PRIORITY Sale;

//----------------------------------------------------------------------------//

// Создание накладной на основе накладной //

FORM invoiceInvoices 'Накладные'
    OBJECTS s = LegalEntity FIXED PANEL
    PROPERTIES (s) READONLY nameLegalEntity
    OBJECTS c = LegalEntity FIXED PANEL
    PROPERTIES (c) READONLY nameLegalEntity

    OBJECTS ss = Stock FIXED PANEL
    PROPERTIES (ss) READONLY nameStock
    OBJECTS cs = Stock FIXED PANEL
    PROPERTIES (cs) READONLY nameStock

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS o = Invoice
    PROPERTIES (o) READONLY isPostedInvoice, numberInvoice, seriesInvoice, dateInvoice, timeInvoice, nameCurrencyInvoice,
                            countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                            noteInvoice
    FILTERS supplierInvoice(o) == s,
            customerInvoice(o) == c,
            supplierStockInvoice(o) == ss,
            customerStockInvoice(o) == cs,
            isPostedInvoice(o)

    FILTERGROUP filters1
        FILTER 'Только этой даты' dateInvoice(o) == t 'F11' DEFAULT

    OBJECTS d = InvoiceDetail

    PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
    PROPERTIES (d) READONLY SHOWIF showPackInvoice(o) idBarcodePackInvoiceDetail, shortNameUOMPackInvoiceDetail, amountPackInvoiceDetail, packQuantityInvoiceDetail
    PROPERTIES (d) READONLY quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail, numberVATInvoiceDetail, valueVATInvoiceDetail,
                            VATSumInvoiceDetail, invoiceSumInvoiceDetail, nameSupplierStockInvoiceDetail

    FILTERS invoiceInvoiceDetail(d) == o
;

DESIGN invoiceInvoices FROM DEFAULT {
    main {
        preferredSize = (1124, 768);
        fill = 1;
        NEW documentContainer BEFORE functions.box {

            type = CONTAINERV;
            fill = 1;
            NEW headerBox1 {
                type = CONTAINERH;
                NEW headerBox11 {
                    type = CONTAINERH;
                    fill =1;
                    caption = 'Поставщик';
                    ADD s.box;
                    ADD ss.box;
                }
                NEW headerBox12 {
                    type = CONTAINERH;
                    caption = 'Покупатель';
                    ADD c.box;
                    ADD cs.box;
                }
            }
            NEW headerBox2 {
                type = CONTAINERH;
                ADD t.box;
            }
            NEW specBox {
                type = SPLITV;
                fill =1;
                
                ADD o.box {
                    fill =1;
                };
                NEW documentDetail {
                    type = TABBED;
                    fill =1;
                    ADD d.box {
                        caption = 'Спецификация';
                        fill =1;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                        }
                    }
                }
            }
        }
    }
}

invoiceDetailInvoiceDetail = ABSTRACT InvoiceDetail (Purchase.InvoiceDetail) PERSISTENT INDEXED;
invoiceDetailUserInvoiceDetail = DATA InvoiceDetail (Purchase.UserInvoiceDetail);
invoiceDetailInvoiceDetail(invoiceDetail) += invoiceDetailUserInvoiceDetail(invoiceDetail);

fillInvoiceUserInvoice 'Заполнить на основе накладной' =  ACTION (userInvoice) {
    FORM invoiceInvoices OBJECTS s = Purchase.supplierUserInvoice(userInvoice), c = Purchase.customerUserInvoice(userInvoice),
                                   ss = Purchase.supplierStockUserInvoice(userInvoice), cs = Purchase.customerStockUserInvoice(userInvoice),
                                   t = Purchase.dateUserInvoice(userInvoice) MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL saleInvoice = Invoice();
        ASSIGN saleInvoice() <- chosenObject('o');

        FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() ADDOBJ d = Purchase.UserInvoiceDetail DO {
            ASSIGN Purchase.userInvoiceUserInvoiceDetail(d) <- userInvoice;
            ASSIGN invoiceDetailUserInvoiceDetail(d) <- invoiceDetail;
            ASSIGN Purchase.skuUserInvoiceDetail(d) <- skuInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.batchUserInvoiceDetail(d) <- batchInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.barcodePackUserInvoiceDetail(d) <- barcodePackInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.amountPackUserInvoiceDetail(d) <- amountPackInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.packQuantityUserInvoiceDetail(d) <- packQuantityInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.quantityUserInvoiceDetail (d) <- quantityInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.VATUserInvoiceDetail(d) <- VATInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.valueVATUserInvoiceDetail(d) <- valueVATInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.priceUserInvoiceDetail(d) <- priceInvoiceDetail(invoiceDetail);
            ASSIGN Purchase.invoicePriceUserInvoiceDetail(d) <- invoicePriceInvoiceDetail(invoiceDetail);
        }
    }
} IN Purchase.invoice;

//----------------------------------------------------------------------------//

GROUP invoice 'Информация о накладной' : base;

createPurchaseInvoiceInvoice 'Создать накладную (закупка)' = ABSTRACT BOOLEAN (Invoice) PERSISTENT;
createPurchaseInvoiceUserInvoice 'Создать накладную (закупка)' = DATA BOOLEAN (UserInvoice) PERSISTENT;
createPurchaseInvoiceInvoice(invoice) += createPurchaseInvoiceUserInvoice(invoice);

createPurchaseInvoiceInvoiceDetail 'Создать накладную (закупка)' (invoiceDetail) = createPurchaseInvoiceInvoice(invoiceInvoiceDetail(invoiceDetail))PERSISTENT;
createPurchaseInvoiceUserInvoiceDetail 'Создать накладную (закупка)' (userInvoiceDetail) = createPurchaseInvoiceUserInvoice(userInvoiceUserInvoiceDetail(userInvoiceDetail));
backgroundPurchaseInvoice 'Цвет' (invoice) = RGB(255, 255, 190) IF invoice IS Invoice;

isCompanyCustomerUserInvoice (userInvoice) =  isCompanyLegalEntity(customerUserInvoice(userInvoice));
EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchaseInvoice(i) SHOWIF isCompanyCustomerUserInvoice(i) createPurchaseInvoiceUserInvoice
;
EXTEND DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreatePurchase {
            caption = 'Накладная (закупка)';
            ADD PROPERTY(createPurchaseInvoiceUserInvoice(i));
        }
    }
}

//--  Связь поставки с поставкой

CONSTRAINT Purchase.supplierInvoiceDetail(detail) != supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.supplierStockInvoiceDetail(detail) != supplierStockInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.customerInvoiceDetail(detail) != customerInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.customerStockInvoiceDetail(detail) != customerStockInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) OR
           Purchase.skuInvoiceDetail(detail) != skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
    CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в накладной и накладной на осове накладной должны соответствовать друг другу';


descriptionIndexInvoiceDetailInvoiceDetail 'Строка накладной (продажа)' (detail) = descriptionIndexInvoiceDetail(invoiceDetailInvoiceDetail(detail));
descriptionIndexInvoiceDetailUserInvoiceDetail 'Строка накладной (продажа)' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));

quantityInvoiceDetailInvoiceInvoice (sale, purchase) = GROUP SUM Purchase.quantityInvoiceDetail(detail) BY invoiceInvoiceDetail(invoiceDetailInvoiceDetail(detail)), Purchase.invoiceInvoiceDetail(detail);

saleInvoicesInvoice 'Накладные (продажа)' (purchase) = GROUP CONCAT VARSTRING[255](descriptionInvoice(sale)) IF quantityInvoiceDetailInvoiceInvoice(sale, purchase) , ', '
                                                        BY purchase
                                                        ORDER sale IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

relationPurchaseInvoice 'Связь' (purchase) = GROUP SUM quantityInvoiceDetailInvoiceInvoice (sale, purchase) BY purchase PERSISTENT;

invoicedInvoiceDetail 'Кол-во (выписано)' (invoiceDetail) = GROUP SUM Purchase.quantityInvoiceDetail(detail) IF Purchase.isPostedInvoiceDetail(detail)
                                                                   BY invoiceDetailInvoiceDetail(detail) PERSISTENT;

toInvoicedInvoiceDetail 'Не выписано' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) invoicedInvoiceDetail(invoiceDetail);

EXTEND FORM Purchase.userInvoice
    PROPERTIES(i) fillInvoiceUserInvoice, saleInvoicesInvoice READONLY
;
EXTEND DESIGN Purchase.userInvoice { headerCreateDetail{ ADD i.invoice { type = CONTAINERV; }}}



CLASS PurchaseInvoice 'Накладная на основе накладной': Purchase.Invoice;
CLASS PurchaseInvoiceDetail 'Строка накладной на основе накладной' : Purchase.InvoiceDetail;

@defineDocumentTables(purchaseInvoice);

@defineDocumentAggregation(invoice, purchaseInvoice, createPurchaseInvoice);
Purchase.invoiceInvoiceDetail(d) += purchaseInvoicePurchaseInvoiceDetail(d);

Purchase.indexInvoiceDetail(d) += indexPurchaseInvoiceDetail(d);

Purchase.dateInvoice(invoice) += datePurchaseInvoice(invoice);
Purchase.timeInvoice(invoice) += timePurchaseInvoice(invoice);

@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, supplier, 'Склад поставщика', , );
Purchase.supplierStockInvoice(invoice) += supplierStockPurchaseInvoice(invoice);
Purchase.dataSupplierStockInvoiceDetail(invoiceDetail) += dataSupplierStockInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, customer, 'Склад покупателя', , );
Purchase.customerStockInvoice(invoice) += customerStockPurchaseInvoice(invoice);
Purchase.dataCustomerStockInvoiceDetail(invoiceDetail) += dataCustomerStockInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

@defineDocumentAggregationLegalEntityPrefix(invoice, purchaseInvoice, supplier, 'Поставщик', , );
Purchase.supplierInvoice(invoice) += supplierPurchaseInvoice(invoice);
@defineDocumentAggregationLegalEntityPrefix(invoice, purchaseInvoice, customer, 'Покупатель', , );
Purchase.customerInvoice(invoice) += customerPurchaseInvoice(invoice);

@defineDocumentAggregationPosted(invoice, purchaseInvoice);
Purchase.isPostedInvoice(invoice) += isPostedPurchaseInvoice(invoice);

@defineDocumentAggregationClosed(invoice, purchaseInvoice);
Purchase.isClosedInvoice(invoice) += isClosedPurchaseInvoice(invoice);

Purchase.numberInvoice(invoice) += numberInvoice(invoicePurchaseInvoice(invoice));
Purchase.seriesInvoice(invoice) += seriesInvoice(invoicePurchaseInvoice(invoice));
seriesNumberPurchaseInvoice 'Серия/номер документа' (purchaseInvoice) = seriesNumberInvoice(invoicePurchaseInvoice(purchaseInvoice));

noteInvoicePurchaseInvoice 'Примечание' (purchaseInvoice) = noteInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.noteInvoice(invoice) += noteInvoicePurchaseInvoice(invoice);

currencyPurchaseInvoice  (purchaseInvoice) = currencyInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.currencyInvoice (invoice) += currencyPurchaseInvoice(invoice);

agreementPurchaseInvoice  (purchaseInvoice) = agreementInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.agreementInvoice (invoice) += agreementPurchaseInvoice(invoice);

priceListTypePurchaseInvoice  (purchaseInvoice) = priceListTypeInvoice(invoicePurchaseInvoice(purchaseInvoice));
Purchase.priceListTypeInvoice (invoice) += priceListTypePurchaseInvoice(invoice);

@defineDocumentDescription(purchaseInvoice, PurchaseInvoiceDetail, 'Накладная на основе накладной');
Purchase.descriptionInvoice (invoice) += descriptionPurchaseInvoice(invoice);

Purchase.contractSkuInvoice (invoice) += contractSkuInvoice(invoicePurchaseInvoice(invoice));
Purchase.isCommissionInvoice (invoice) += isCommissionInvoice(invoicePurchaseInvoice(invoice));

@defineDocumentAggregationDetailSku(invoice, purchaseInvoice, sku);
Purchase.skuInvoiceDetail(invoiceDetail) +=  skuPurchaseInvoiceDetail(invoiceDetail);

@defineDocumentAggregationDetailBatch(invoice, purchaseInvoice);
Purchase.batchInvoiceDetail(invoiceDetail) += batchPurchaseInvoiceDetail(invoiceDetail);

Purchase.quantityInvoiceDetail(invoiceDetail) += quantityInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.priceListTypeInvoiceDetail(invoiceDetail) += priceListTypeInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

Purchase.priceInvoiceDetail(invoiceDetail) += priceInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.sumInvoiceDetail(invoiceDetail) += sumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.VATInvoiceDetail(invoiceDetail) += VATInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.valueVATInvoiceDetail(invoiceDetail) += valueVATInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.invoicePriceInvoiceDetail(invoiceDetail) += invoicePriceInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.VATSumInvoiceDetail(invoiceDetail) += VATSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.invoiceSumInvoiceDetail(invoiceDetail) += invoiceSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

Purchase.editInvoice(invoice) += ACTION EXEC editInvoice(invoicePurchaseInvoice(invoice));
Purchase.createdUserInvoice(invoice) += createdUserInvoice(invoicePurchaseInvoice(invoice));

Purchase.showPackInvoice(invoice) +=  showPackInvoice(invoicePurchaseInvoice(invoice));
Purchase.barcodePackInvoiceDetail(invoiceDetail) += barcodePackInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.amountPackInvoiceDetail(invoiceDetail) +=  amountPackInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.packQuantityInvoiceDetail(invoiceDetail) +=  packQuantityInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

invoiceDetailInvoiceDetail(invoiceDetail) += invoiceDetailPurchaseInvoiceDetail(invoiceDetail);

Purchase.editInvoiceDetail(d) += ACTION editInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(d));

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

// -- Операция
createPurchaseInvoiceOperation 'Накладная (закупка) ' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) createPurchaseInvoiceOperation
;
EXTEND DESIGN operation {
    purchaseContainer {
        ADD PROPERTY(createPurchaseInvoiceOperation(o)) BEFORE PROPERTY(namePurchaseOperationOperation(o));
    }
}

@deriveDocumentOperationProperty(UserInvoice, createPurchaseInvoice);

@defineDocumentInterfaceOperationPrefix (invoice, purchase, Purchase, ' (закупка)');

// Записываем операцию для закупки по умолчанию из операции
purchaseOperationUserInvoice (invoice) <- purchaseOperationOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

Purchase.operationInvoice(invoice) += purchaseOperationInvoice(invoicePurchaseInvoice(invoice));

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchaseInvoice(i) SHOWIF createPurchaseInvoiceUserInvoice(i) namePurchaseOperationUserInvoice

;
EXTEND DESIGN userInvoice {
    headerCreatePurchase {
        ADD PROPERTY(namePurchaseOperationUserInvoice(i)) AFTER PROPERTY(createPurchaseInvoiceUserInvoice(i));
    }
}

//-- Действие

overFillInvoiceUserInvoiceInvoice = ABSTRACT ACTION LIST (Purchase.UserInvoice, Invoice);
overFillInvoiceUserInvoiceDetailInvoiceDetail = ABSTRACT ACTION LIST (Purchase.UserInvoiceDetail, InvoiceDetail);

moveUserInvoiceInvoice 'Накладная (закупка)' =  ACTION (invoice) NEWSESSION{

    FOR ADDOBJ i = Purchase.UserInvoice DO {

        ASSIGN Purchase.agreementUserInvoice(i) <- agreementInvoice(invoice);
        ASSIGN Purchase.priceListTypeUserInvoice(i) <- priceListTypeInvoice(invoice);
        ASSIGN Purchase.supplierUserInvoice(i) <- supplierInvoice(invoice);
        ASSIGN Purchase.customerUserInvoice(i) <- customerInvoice(invoice);
        ASSIGN Purchase.supplierStockUserInvoice(i) <- supplierStockInvoice(invoice);
        ASSIGN Purchase.customerStockUserInvoice(i) <- customerStockInvoice(invoice);
        ASSIGN numberUserInvoice(i) <- numberInvoice(invoice);
        ASSIGN seriesUserInvoice(i) <- seriesInvoice(invoice);
        ASSIGN Purchase.noteUserInvoice(i) <- noteInvoice(invoice);
        ASSIGN Purchase.currencyUserInvoice(i) <- currencyInvoice(invoice);
        ASSIGN Purchase.contractSkuUserInvoice(i) <- contractSkuInvoice(invoice);
        ASSIGN Purchase.isCommissionUserInvoice(i) <- isCommissionInvoice(invoice);
        ASSIGN Purchase.showPackUserInvoice(i) <- showPackInvoice(invoice);
        ASSIGN Purchase.operationUserInvoice(i) <- operationInvoice(invoice);
        EXEC overFillInvoiceUserInvoiceInvoice(i, invoice);

        FOR invoiceInvoiceDetail(detail)==invoice ADDOBJ d = Purchase.UserInvoiceDetail DO {

            ASSIGN Purchase.userInvoiceUserInvoiceDetail(d) <- i;
            ASSIGN invoiceDetailUserInvoiceDetail(d) <- detail;

            ASSIGN Purchase.priceListTypeUserInvoiceDetail(d) <- priceListTypeInvoiceDetail(detail);
            ASSIGN Purchase.dataSupplierStockUserInvoiceDetail(d) <- dataSupplierStockInvoiceDetail(detail);
            ASSIGN Purchase.dataCustomerStockUserInvoiceDetail(d) <- dataCustomerStockInvoiceDetail(detail);

            ASSIGN Purchase.skuUserInvoiceDetail(d) <- skuInvoiceDetail(detail);
            ASSIGN Purchase.quantityUserInvoiceDetail (d) <- quantityInvoiceDetail(detail);
            ASSIGN Purchase.VATUserInvoiceDetail (d) <- VATInvoiceDetail(detail);
            ASSIGN Purchase.priceUserInvoiceDetail (d) <- priceInvoiceDetail(detail);
            ASSIGN Purchase.invoicePriceUserInvoiceDetail (d) <- invoicePriceInvoiceDetail(detail);

            ASSIGN Purchase.barcodePackUserInvoiceDetail (d) <- barcodePackInvoiceDetail(detail);
            ASSIGN Purchase.amountPackUserInvoiceDetail (d) <- amountPackInvoiceDetail(detail);
            ASSIGN Purchase.packQuantityUserInvoiceDetail (d) <- packQuantityInvoiceDetail(detail);

            ASSIGN Purchase.batchUserInvoiceDetail(d) <- batchInvoiceDetail(detail);
            EXEC overFillInvoiceUserInvoiceDetailInvoiceDetail(d,detail);
        }

    FORM Purchase.userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM invoices
    PROPERTIES(i) moveUserInvoiceInvoice
;
EXTEND DESIGN invoices {
    createdContainer{
        ADD PROPERTY(moveUserInvoiceInvoice(i));
    }
}

