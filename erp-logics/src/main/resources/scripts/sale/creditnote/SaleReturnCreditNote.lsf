MODULE SaleReturnCreditNote;

REQUIRE CreditNote, SaleReturnShipment, SaleCreditNote, SaleReturnInvoiceContract;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (продажа-возврат)', supplierStock);
@defineCreditNotePaymentCondition(' (продажа-возврат)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, supplierStock, company);
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, customer);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, supplier, company);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, customer, customer);

@defineCreditNoteBatch();

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCustomerLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserCreditNote, company, customer, userCreditNote);

// -- Операция
@defineDocumentOperation(creditNote ,c); 
@defineDocumentOperationRole(userCreditNote);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

operationCreditNote(creditNote) += operationInvoice(invoiceInvoiceCreditNote(creditNote));

// --------------------------- Проведение по регистру задолженностей ------------------------------------ //

@implementContractLedger(, CreditNote, contractSku);
sumContractLedger(contractLedger) += -invoiceSumCreditNoteDetailCreditNote(contractLedger);

@implementContractLedger(a, CreditNote, contractSku);
sumContractALedger(contractALedger) += -invoiceSumCreditNoteDetailCreditNote(contractALedger);

@implementInContractLedger(CreditNote, contractSku);
sumInContractLedger(inContractLedger) += invoiceSumCreditNoteDetailCreditNote(inContractLedger);

NAVIGATOR {
    saleReturnNavigator {
        ADD creditNotes;
    }
}
