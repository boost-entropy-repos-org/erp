MODULE SaleCreditNote;

REQUIRE CreditNote, SaleShipment;

NAMESPACE Sale;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (продажа)', supplier, supplier, company, customer);
@defineCreditNotePaymentCondition(' (продажа)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, supplierStock, company);
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, customer);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, supplier, company);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, customer, customer);
@defineCreditNoteBatch(supplier, supplier);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCustomerLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserCreditNote, company, customer, userCreditNote);

// -- Операция
@defineDocumentOperationContainer(creditNote ,c);
@defineDocumentOperationRole(userCreditNote);
@defineOperationProperty(createCreditNote, 'Акт расхождения', saleContainer);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customer, userCreditNote);

operationCreditNote(creditNote) += operationInvoice(invoiceInvoiceCreditNote(creditNote));

//------------------------------ Расширение формы -----------------------------//

// Фильтры
EXTEND FORM userCreditNote

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(ks, st) DEFAULT
        FILTER 'В документе ' 'F9' quantitySkuUserCreditNoteSupplierStock(ks, c, st)

;

EXTEND FORM userCreditNote

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchStock(b, sto) DEFAULT
        FILTER 'В документе ' 'F9' quantityBatchUserCreditNoteSupplierStock(b, c, sto)
;

NAVIGATOR {
    saleSaleNavigator {
        ADD creditNotes;
    }
}