MODULE SaleStatisticsReport;

REQUIRE SaleStatistics;

NAMESPACE Sale;


////////////////////// Тип отчета ////////////////////////////

CLASS StatisticReportType 'Тип статистического отчета';
CLASS StatisticReportTypeDetail 'Строка типа статистического отчета';

name 'Наименование' = DATA VARISTRING[255] (StatisticReportType) MINCHARWIDTH 20 PREFCHARWIDTH 30 IN documentPrm;
statisticReportType = GROUP AGGR StatisticReportType s BY name(s);

@defineDocument(statisticReportType);
@deriveDocumentHeaderTimePrefix(StatisticReportType, );


@deriveDocumentHeaderTimePrefix(StatisticReportType, );

statisticGroupType = DATA StatisticGroupType (StatisticReportType) AUTOSET NOT NULL;
nameStatisticGroupType 'Тип классификатора' = name(statisticGroupType(StatisticReportType r)) IN documentPrm;

isSumReport 'Сумовой отчет' = DATA BOOLEAN (StatisticReportType) IN documentPrm;
notSumReport = StatisticReportType r IS StatisticReportType AND NOT isSumReport(r);
rate 'Кратность для отчета'  = DATA NUMERIC[15,4] (StatisticReportType) IN documentPrm;
isPositiveReport 'Только положительные' = DATA BOOLEAN (StatisticReportType) IN documentPrm;

//------------------------------ Строки -------------------------------//

name 'Наименование' = DATA VARISTRING[255] (StatisticReportTypeDetail);
nameUOM 'Ед. изм.' = DATA VARISTRING[100] (StatisticReportTypeDetail);
round 'Точность' = DATA INTEGER (StatisticReportTypeDetail);

statisticGroup  = DATA StatisticGroup (StatisticReportTypeDetail);
nameStatisticGroup 'Наименование группы' = name(statisticGroup(StatisticReportTypeDetail d));
sidStatisticGroup 'Код группы' = sid(statisticGroup(StatisticReportTypeDetail d));

CONSTRAINT statisticGroup(StatisticReportTypeDetail d) AND statisticGroupType(statisticReportType(d)) 
    AND NOT groupType(statisticGroup(d)) == statisticGroupType(statisticReportType(d))
    CHECKED BY statisticGroup[StatisticReportTypeDetail]
    MESSAGE 'Для строки типа статистического отчета выбрана группа, которая не соответствует выбранному классификатору.';

number 'Код строки' = DATA STRING[10] (StatisticReportTypeDetail);    

//statisticReportTypeDetail = DATA StatisticReportTypeDetail (StatisticReportTypeDetail);
//in 'Вкл.' (StatisticReportTypeDetail child, StatisticReportTypeDetail parent) = statisticReportTypeDetail(child) == parent;
//count = GROUP SUM 1 BY statisticReportTypeDetail (StatisticReportTypeDetail d); 
//count = GROUP SUM 1 BY statisticReportType(statisticReportTypeDetail (StatisticReportTypeDetail d)); 


in 'Вкл.' (StatisticReportTypeDetail child, StatisticReportTypeDetail parent) = DATA BOOLEAN (StatisticReportTypeDetail, StatisticReportTypeDetail); //(child,parent)
count = GROUP SUM 1 IF in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) BY parent; 
count = GROUP SUM 1 IF in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) BY statisticReportType(parent);//BY statisticReportType(statisticReportTypeDetail (StatisticReportTypeDetail d)); 

CONSTRAINT in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) AND NOT (statisticReportType(child) == statisticReportType(child))
    MESSAGE 'Ссылка на строки другого типа статистического отчета.';
CONSTRAINT in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) AND parent == child
    MESSAGE 'У строки не может быть ссылка на саму себя.';
        
childNumbers 'Строки' (detail) =
    GROUP CONCAT number(StatisticReportTypeDetail child) IF in(child, StatisticReportTypeDetail parent),'; '
    BY parent 
    ORDER number(child), child  MINCHARWIDTH 10 PREFCHARWIDTH 15;

FORM statisticReportType 'Тип статистического отчета'

    OBJECTS r = StatisticReportType FIXED PANEL
    PROPERTIES (r) name, note,  nameStatisticGroupType, isSumReport, rate SHOWIF isSumReport(r), isPositiveReport
                
    PROPERTIES (r) countStatisticReportTypeDetail

    OBJECTS d = StatisticReportTypeDetail
    PROPERTIES (d) index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round    
    PROPERTIES READONLY childNumbers(d)                
    PROPERTIES (d) ADDOBJ, deleteid=DELETESESSION              
    ORDER BY index(d)
    PROPERTIES(r) TODRAW d deleteStatisticReportTypeDetail    
    FILTERS statisticReportType(d) == r
    
    OBJECTS dd = StatisticReportTypeDetail
    PROPERTIES (dd) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round                
    PROPERTIES (dd,d) in 
    ORDER BY index(dd) 
    FILTERS statisticReportType(dd) == r,
            dd != d    

    EDIT StatisticReportType OBJECT r
;

DESIGN statisticReportType {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;

            MOVE r.documentPrm {
               columns = 2;
            }
            MOVE r.documentSum {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            type = SPLITV;
            MOVE d.box {
                caption = 'Спецификация';
                fill = 2;
            }
            MOVE dd.box {
                caption = 'Состав';
            }
        }
        MOVE functions.box;
        PROPERTY (index(d)) {caption ='Порядок';}
        PROPERTY (index(dd)) {caption ='Порядок';}
    }
}

FORM statisticReportTypes 'Типы статистических отчетов'

    OBJECTS r = StatisticReportType 
    PROPERTIES (r) READONLY name, nameStatisticGroupType, note, isSumReport
                
    PROPERTIES (r) READONLY countStatisticReportTypeDetail
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
    PROPERTIES (r) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer 
        
    OBJECTS d = StatisticReportTypeDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round 
    ORDER BY index(d)

    FILTERS statisticReportType(d) == r
                
    DIALOG StatisticReportType OBJECT r
;
DESIGN statisticReportTypes {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deleter) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            fill = 1;

            type = SPLITV;
            MOVE r.box;    

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE r.created;                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}

//загрузка стандартных данных
loadDefaultStatisticReportType 'Добавить тип статистического отчета' (VARSTRING[255] name, VARSTRING[20] group, BOOLEAN isSum, NUMERIC[15,4] rate) = ACTION {
    FOR ADDOBJ s = StatisticReportType DO {
        name(s) <- name;
        statisticGroupType(s) <- statisticGroupTypeId(group);
        isSumReport(s) <- isSum;
        rate(s) <- rate;
    }
}

loadDefaultStatisticReportTypeDetail 'Добавить строку типа статистического отчета' (VARSTRING[255] type, INTEGER index, VARSTRING[255] name, VARSTRING[10] number, STRING[12] group, VARSTRING[100] nameUOM, INTEGER round) = ACTION {
    FOR ADDOBJ d = StatisticReportTypeDetail DO {
        statisticReportType(d) <- statisticReportType(type);
        index(d) <- index;
        name(d) <- name;
        number(d) <- number;
        statisticGroup(d) <- groupIdTypeIdGroup(id(statisticGroupType(statisticReportType(type))), group);
        nameUOM(d) <- nameUOM;
        round(d) <- round;
    }
}
//////////////////////Отчет ////////////////////////////

CLASS StatisticReport 'Статистический отчет';
CLASS StatisticReportDetail 'Строка статистического отчета';

name 'Наименование' = DATA VARISTRING[255] (StatisticReport) MINCHARWIDTH 20 PREFCHARWIDTH 30;
@defineDocument(statisticReport);
@deriveDocumentHeaderTimePrefix(StatisticReport, );


@deriveDocumentHeaderTimePrefix(StatisticReport, );
@defineDocumentHeaderNumber(StatisticReport);
@defineNumeratedDefault(StatisticReport, 'Статистический отчет', 'СО');
@defineDocumentHeaderDescription (StatisticReport, 'Статистический отчет');

fromDate 'Дата с' = DATA DATE (StatisticReport) IN documentHeader;
toDate 'Дата по' = DATA DATE (StatisticReport) IN documentHeader;

fromDate 'Дата с' = fromDate(statisticReport(StatisticReportDetail d));
toDate 'Дата по' = toDate(statisticReport(StatisticReportDetail d));

startTime 'Время начала формирования' = DATA DATETIME (StatisticReport) IN created;
finishTime 'Время окончания формирования' = DATA DATETIME (StatisticReport) IN created;

WHEN SESSION SET(StatisticReport o IS StatisticReport) DO {
    IF o IS StatisticReport AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS StatisticReport AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

statisticGroupType = DATA StatisticGroupType (StatisticReport) AUTOSET NOT NULL DELETE;
nameStatisticGroupType 'Тип классификатора' = name(statisticGroupType(StatisticReport r)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 30;

statisticReportType = DATA StatisticReportType (StatisticReport);
nameStatisticReportType 'Тип отчета' = name(statisticReportType(StatisticReport r)) MINCHARWIDTH 20 PREFCHARWIDTH 30 ;

@defineDocumentDataStock(statisticReport, stock, 'Склад', );
@defineDocumentDialogStocks(statisticReport, stock, company, , );

@defineDocumentLegalEntity(statisticReport, company, 'Организация');
@defineDocumentDialogLegalEntity(statisticReport, company, company);

CLASS ReportKind 'Вид отчета' {
    stock 'Отчет по складу',
    region 'Отчет по региону',
    consolidate 'Объединенный'
}

FORM reportKinds 'Виды отчета'
    OBJECTS k = ReportKind
    PROPERTIES(k) READONLY staticCaption
    FILTERS k != ReportKind.consolidate
    DIALOG ReportKind OBJECT k
;

DESIGN reportKinds {
    PROPERTY(staticCaption(k)) { caption = 'Наименование'; } 
}

rate 'Кратность для отчета' (StatisticReport r) = rate(statisticReportType(r));

isThing(StatisticReport r) = notSumReport(statisticReportType(r));
isSum(StatisticReport r) = isSumReport(statisticReportType(r));

isPositiveReport 'Только со знаком "+"' (StatisticReport r)= isPositiveReport(statisticReportType(r));

reportKind = DATA ReportKind (StatisticReport);
nameReportKind 'Вид отчета'(StatisticReport r) = staticCaption(reportKind(r));

isStock(StatisticReport r) = reportKind(r) == ReportKind.stock;
isStockThing(StatisticReport r) = isStock(r) AND notSumReport(statisticReportType(r));
isStockSum(StatisticReport r) = isStock(r) AND isSumReport(statisticReportType(r));

isRegion(StatisticReport r) = reportKind(r) == ReportKind.region;
isRegionThing(StatisticReport r) = isRegion(r) AND notSumReport(statisticReportType(r));
isRegionSum(StatisticReport r) = isRegion(r) AND isSumReport(statisticReportType(r));

isConsolidate(StatisticReport r) = reportKind(r) == ReportKind.consolidate;
notConsolidate(StatisticReport r) = reportKind(r) != ReportKind.consolidate;

WHEN SESSION SET ( StatisticReport r IS StatisticReport) AND NOT reportKind(r) DO {
    reportKind(r) <- ReportKind.stock;
}

WHEN SESSION SETCHANGED ( reportKind(StatisticReport r)) AND NOT company(r) AND isRegion(r) DO {
    company(r) <- defaultCompany();
}

region = DATA Region (StatisticReport);
nameRegion 'Регион' (StatisticReport r) = name(region(r));
consolidateStocks 'Склады/Регионы' = DATA VARSTRING[255](StatisticReport) MINCHARWIDTH 20 PREFCHARWIDTH 30;

nameStockRegion 'Склад/Регион' (StatisticReport r) = CASE 
    WHEN isStock(r) THEN nameStock(r) 
    WHEN isRegion(r) THEN nameRegion(r)
    WHEN isConsolidate(r) THEN consolidateStocks(r);
//------------------------------ Строки -------------------------------//

name 'Наименование' = DATA VARISTRING[255] (StatisticReportDetail);
nameUOM 'Ед. изм.' = DATA VARISTRING[100] (StatisticReportDetail);
round 'Точность' = DATA INTEGER (StatisticReportDetail);
number 'Код строки' = DATA STRING[10] (StatisticReportDetail);

statisticGroup  = DATA StatisticGroup (StatisticReportDetail);
nameStatisticGroup 'Наименование группы' = name(statisticGroup(StatisticReportDetail d));
sidStatisticGroup 'Код группы' = sid(statisticGroup(StatisticReportDetail d));

CONSTRAINT statisticGroup(StatisticReportDetail d) AND statisticGroupType(statisticReport(d)) 
    AND NOT groupType(statisticGroup(d)) == statisticGroupType(statisticReport(d))
    CHECKED BY statisticGroup[StatisticReportDetail]
    MESSAGE 'Для строки статистического отчета выбрана группа, которая не соответствует выбранному классификатору.';
    
sold 'Продано всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
soldResident 'Продано отечественного' = DATA NUMERIC[16,3] (StatisticReportDetail);
balance 'Запас всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
balanceResident 'Запас отечественного' = DATA NUMERIC[16,3] (StatisticReportDetail);

soldSum 'Продано всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
soldSumResident 'Продано отечественного' = DATA NUMERIC[16,3] (StatisticReportDetail);
balanceSum 'Запас всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
  
//statisticReportDetail = DATA StatisticReportDetail (StatisticReportDetail);
//in 'Вкл.' (StatisticReportDetail child, StatisticReportDetail parent) = statisticReportDetail(child) == parent;
//count = GROUP SUM 1  BY statisticReportDetail (StatisticReportDetail d); 

//statisticReportDetail = DATA StatisticReportDetail (StatisticReportDetail);
in 'Вкл.' = DATA BOOLEAN  (StatisticReportDetail, StatisticReportDetail );//(child,parent)
count = GROUP SUM 1 IF in(StatisticReportDetail child, StatisticReportDetail parent) BY parent; 

CONSTRAINT in(StatisticReportDetail child, StatisticReportDetail parent) AND NOT (statisticReport(parent) == statisticReport(child))
    MESSAGE 'Ссылка на строки другого статистического отчета.';
CONSTRAINT in(StatisticReportDetail child, StatisticReportDetail parent) AND parent == child
    MESSAGE 'У строки не может быть ссылка на саму себя.';
    
childNumbers 'Строки' (detail) =
    GROUP CONCAT number(StatisticReportDetail child) IF in(child, StatisticReportDetail parent),'; '
    BY parent 
    ORDER number(child), child  MINCHARWIDTH 10 PREFCHARWIDTH 15;

fillData 'Заполнить данные'(StatisticReport report) = ACTION {
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        Stock st == stock(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) NOINLINE DO { 
    
        sold(d) <- NUMERIC[16,3](valueBy(s, st, dFrom, dTo));
        soldResident(d) <- NUMERIC[16,3](valueResidentBy(s, st, dFrom, dTo));
        balance(d) <- NUMERIC[16,3](valueByTo(s, st, dTo));
        balanceResident(d) <- NUMERIC[16,3](valueResidentByTo(s, st, dTo));
    }                                                                                                                                                  
    
    sold(StatisticReportDetail d) <- round(sold(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- round(soldResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- round(balance(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- round(balanceResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    
    sold(StatisticReportDetail d) <- [ = GROUP SUM sold(StatisticReportDetail detail) IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- [ = GROUP SUM soldResident(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- [ = GROUP SUM balance(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- [ = GROUP SUM balanceResident(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    
    IF isPositiveReport(report) THEN {
        sold(StatisticReportDetail d) <- 0.0 WHERE sold(d) <0 AND statisticReport(d) == report;
        soldResident(StatisticReportDetail d) <- 0.0 WHERE soldResident(d) <0 AND statisticReport(d) == report;
        balance(StatisticReportDetail d) <- 0.0 WHERE balance(d) <0 AND statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- 0.0 WHERE balanceResident(d) <0 AND statisticReport(d) == report;   
        soldResident(StatisticReportDetail d) <- min(soldResident(d), sold(d)) WHERE statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- min(balanceResident(d), balance(d)) WHERE statisticReport(d) == report;        
    }
    
}

fillRegionData 'Заполнить данные'(StatisticReport report) = ACTION {
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        LegalEntity c == company(report) AND Region r == region(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) 
        NOINLINE DO {
    
        sold(d) <- NUMERIC[16,3](valueBy(s, c, r, dFrom, dTo));
        soldResident(d) <- NUMERIC[16,3](valueResidentBy(s, c, r, dFrom, dTo));
        balance(d) <- NUMERIC[16,3](valueByTo(s, c, r, dTo));
        balanceResident(d) <- NUMERIC[16,3](valueResidentByTo(s, c, r, dTo));

    }
                                                                                                                                                      
    sold(StatisticReportDetail d) <- round(sold(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- round(soldResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- round(balance(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- round(balanceResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    
    sold(StatisticReportDetail d) <- [ = GROUP SUM sold(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- [ = GROUP SUM soldResident(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- [ = GROUP SUM balance(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- [ = GROUP SUM balanceResident(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
        
    IF isPositiveReport(report) THEN {
        sold(StatisticReportDetail d) <- 0.0 WHERE sold(d) <0 AND statisticReport(d) == report;
        soldResident(StatisticReportDetail d) <- 0.0 WHERE soldResident(d) <0 AND statisticReport(d) == report;
        balance(StatisticReportDetail d) <- 0.0 WHERE balance(d) <0 AND statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- 0.0 WHERE balanceResident(d) <0 AND statisticReport(d) == report;           
        soldResident(StatisticReportDetail d) <- min(soldResident(d), sold(d)) WHERE statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- min(balanceResident(d), balance(d)) WHERE statisticReport(d) == report;
    }
}
//суммы
fillSumData 'Заполнить данные'(StatisticReport report) = ACTION {
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        Stock st == stock(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) NOINLINE DO { 
    
        soldSum(d) <- NUMERIC[16,3](totalSumSoldBy(s, st, dFrom, dTo));
        soldSumResident(d) <- NUMERIC[16,3](totalSumResidentSoldBy(s, st, dFrom, dTo));
        balanceSum(d) <- NUMERIC[16,3](sumBalanceABy(s, st, dTo));
    }                                                                                                                  
    
    soldSum(StatisticReportDetail d) <- NUMERIC[16,3](soldSum(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NUMERIC[16,3](soldSumResident(d)/ rate(report)) WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NUMERIC[16,3](balanceSum(d)/ rate(report)) WHERE statisticReport(d) == report;                           
    
    soldSum(StatisticReportDetail d) <- round(soldSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- round(soldSumResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- round(balanceSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    
    soldSum(StatisticReportDetail d) <- [ = GROUP SUM soldSum(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- [ = GROUP SUM soldSumResident(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- [ = GROUP SUM balanceSum(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    
    IF isPositiveReport(report) THEN {
        soldSum(StatisticReportDetail d) <- 0.0 WHERE soldSum(d) <0 AND statisticReport(d) == report;
        soldSumResident(StatisticReportDetail d) <- 0.0 WHERE soldSumResident(d) <0 AND statisticReport(d) == report;
        balanceSum(StatisticReportDetail d) <- 0.0 WHERE balanceSum(d) <0 AND statisticReport(d) == report;  
        soldSumResident(StatisticReportDetail d) <- min(soldSumResident(d), soldSum(d)) WHERE statisticReport(d) == report;
    }
}

fillSumRegionData 'Заполнить данные'(StatisticReport report) = ACTION {
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        LegalEntity c == company(report) AND Region r == region(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) 
        NOINLINE DO {
    
        soldSum(d) <- NUMERIC[16,3](totalSumSoldBy(s, c, r, dFrom, dTo));
        soldSumResident(d) <- NUMERIC[16,3](totalSumResidentSoldBy(s, c, r, dFrom, dTo));
        balanceSum(d) <- NUMERIC[16,3](sumBalanceABy(s, c, r, dTo));
    }

    soldSum(StatisticReportDetail d) <- NUMERIC[16,3](soldSum(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NUMERIC[16,3](soldSumResident(d)/ rate(report)) WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NUMERIC[16,3](balanceSum(d)/ rate(report)) WHERE statisticReport(d) == report;                                                                                                         
   
    soldSum(StatisticReportDetail d) <- round(soldSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- round(soldSumResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- round(balanceSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    
    soldSum(StatisticReportDetail d) <- [ = GROUP SUM soldSum(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- [ = GROUP SUM soldSumResident(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- [ = GROUP SUM balanceSum(StatisticReportDetail detail)  IF in(detail, StatisticReportDetail parent) BY parent](d) WHERE count(d) AND statisticReport(d) == report;    
    
    IF isPositiveReport(report) THEN {
        soldSum(StatisticReportDetail d) <- 0.0 WHERE soldSum(d) <0 AND statisticReport(d) == report;
        soldSumResident(StatisticReportDetail d) <- 0.0 WHERE soldSumResident(d) <0 AND statisticReport(d) == report;
        balanceSum(StatisticReportDetail d) <- 0.0 WHERE balanceSum(d) <0 AND statisticReport(d) == report;  
        soldSumResident(StatisticReportDetail d) <- min(soldSumResident(d), soldSum(d)) WHERE statisticReport(d) == report;
    }
}

statisticReportDetail = GROUP MAX StatisticReportDetail detail BY statisticReport(detail), number(detail);

changeStatisticReportType (StatisticReport r) = ACTION {
    FORM statisticReportTypes DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN { 
        statisticReportType(r) <- chosenObject('r');
        name(r) <- name(statisticReportType(r));
        statisticGroupType(r) <- statisticGroupType(statisticReportType(r));     
        DELETE StatisticReportDetail d WHERE statisticReport(d) ==r;
        LOCAL parent =  StatisticReportTypeDetail (StatisticReportDetail);   
        parent(StatisticReportDetail d) <- NULL;
        
        FOR statisticReportType(r) == statisticReportType(StatisticReportTypeDetail detail) ADDOBJ d = StatisticReportDetail DO {
            statisticReport(d) <-r;
            index(d) <- index(detail);
            number(d) <-number(detail);
            name(d) <- name(detail);
            statisticGroup(d) <- statisticGroup(detail);
            nameUOM(d) <- nameUOM(detail);
            round(d) <- round(detail);   
            parent(d) <- detail;       
        } 
        in(StatisticReportDetail d, StatisticReportDetail parent) <- in(parent(d), parent(parent)) WHERE statisticReport(d) == r AND statisticReport(parent) == r;         
    }
}
showDD = count(statisticReportType(StatisticReport r));
showThingDD = showDD(StatisticReport r) AND isThing(r);
showSumDD = showDD(StatisticReport r) AND isSum(r);
FORM statisticReport 'Статистический отчет'

    OBJECTS r = StatisticReport FIXED PANEL
    PROPERTIES (r) name, nameReportKind READONLYIF isConsolidate(r), 
                nameStock SHOWIF isStock(r) ON CHANGE changeStockCompany(r),  
                nameCompany SHOWIF isRegion(r),
                nameRegion SHOWIF isRegion(r), 
                consolidateStocks SHOWIF isConsolidate(r) READONLY,
                nameStatisticReportType ON CHANGE changeStatisticReportType(r) READONLYIF isConsolidate(r),
                nameNumerator, number, series, date, time,
                note, fromDate, toDate, nameStatisticGroupType               
                
    PROPERTIES (r) countStatisticReportDetail

    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round, childNumbers READONLY SHOWIF showDD(r)
    PROPERTIES (d) SHOWIF isThing(r) sold, soldResident, balance, balanceResident  
    PROPERTIES (d) SHOWIF isSum(r) soldSum, soldSumResident, balanceSum                
    PROPERTIES (d) ADDOBJ, deleteid=DELETESESSION
              
    PROPERTIES(r) fillData FORCE PANEL TOOLBAR TODRAW d SHOWIF isStockThing(r) ,
                fillRegionData FORCE PANEL TOOLBAR TODRAW d SHOWIF isRegionThing(r),
                fillSumData FORCE PANEL TOOLBAR TODRAW d SHOWIF isStockSum(r) ,
                fillSumRegionData FORCE PANEL TOOLBAR TODRAW d SHOWIF isRegionSum(r)    
    ORDER BY index(d)
    PROPERTIES(r) TODRAW d deleteStatisticReportDetail    
    FILTERS statisticReport(d) == r   
    
    OBJECTS dd = StatisticReportDetail FIXED GRID
    PROPERTIES (dd) SHOWIF showDD(r)  READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round
    PROPERTIES (dd) READONLY SHOWIF showThingDD(r) sold, soldResident, balance, balanceResident  
    PROPERTIES (dd) READONLY SHOWIF showSumDD(r) soldSum, soldSumResident, balanceSum    
                       
    ORDER BY index(dd)
    FILTERS statisticReport(dd) == r,
            dd != d
    PROPERTIES in (dd, d) SHOWIF showDD(r)
    
    FILTERGROUP select
        FILTER 'Отмеченные' in (dd, d) 'F11' DEFAULT 

    EDIT StatisticReport OBJECT r
;

DESIGN statisticReport {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;
            PROPERTY (index(d)) {caption ='Порядок';}
            NEW headerParams {
                fill = 1;
                type = CONTAINERV;
                MOVE r.documentHeader {
                    type = CONTAINERV;
                    NEW doc1 {
                        type = CONTAINERH;
                        MOVE PROPERTY(nameStatisticReportType(r));
                        MOVE PROPERTY(name(r));                        
                        MOVE PROPERTY(fromDate(r));
                        MOVE PROPERTY(toDate(r));                                                
                    }
                    NEW doc2 { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameReportKind(r));
                        MOVE PROPERTY(nameCompany(r));
                        MOVE PROPERTY(nameStock(r));
                        MOVE PROPERTY(nameRegion(r));
                        MOVE PROPERTY(consolidateStocks(r));                                                
                    } 
                    NEW doc3 { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameNumerator(r));
                        MOVE PROPERTY(number(r));
                        MOVE PROPERTY(series(r));
                        MOVE PROPERTY(date(r));
                        MOVE PROPERTY(time(r));
                    }                       
                }
                MOVE r.documentPrm;
            }
            MOVE r.documentSum {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            type = SPLITV;
            MOVE d.box {
                caption = 'Спецификация';
                fill = 2;
            }
            MOVE dd.box {
                caption = 'Состав';
            }
        }
        MOVE functions.box;
    }
}

in 'Отм' = DATA LOCAL NESTED BOOLEAN (StatisticReport);

balance = GROUP LAST balance(StatisticReportDetail d) 
    BY stock(d), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
balance  = GROUP LAST balance(StatisticReportDetail d) 
    BY region(statisticReport(d)), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
    
balanceSum = GROUP LAST balanceSum(StatisticReportDetail d) 
    BY stock(d), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
balanceSum  = GROUP LAST balanceSum(StatisticReportDetail d) 
    BY region(statisticReport(d)), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
    
balanceResident = GROUP LAST balanceResident(StatisticReportDetail d) 
    BY stock(d), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;
balanceResident  = GROUP LAST balanceResident(StatisticReportDetail d) 
    BY region(statisticReport(d)), statisticGroup(d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) ;


createSumReport 'Создать суммарный отчет'()= ACTION NEWSESSION {
    IF [=GROUP SUM 1 IF [=GROUP SUM 1 IF in(StatisticReport r) BY statisticReportType(r) ](StatisticReportType str)]() > 1 THEN {
        MESSAGE 'Выбраны отчеты разных типов';
        RETURN;
    }
    IF [=GROUP SUM 1 IF [=GROUP SUM 1 IF in(StatisticReport r) BY reportKind(r) ](ReportKind str)]() > 1 THEN {
        MESSAGE 'Выбраны отчеты разных видов';
        RETURN;
    }
    IF NOT [=GROUP SUM 1 IF in(StatisticReport r)]() THEN {
        MESSAGE 'Не выбраны отчеты для объединения';
        RETURN;
    }
    FOR ADDOBJ s = StatisticReport DO {
        statisticReportType(s) <- [=GROUP MAX statisticReportType(StatisticReport r) IF in(r) ]();
        reportKind(s) <- ReportKind.consolidate;
        consolidateStocks(s) <- OVERRIDE [=GROUP CONCAT [=GROUP MAX nameStockRegion(StatisticReport r) IF in(r) BY nameStockRegion(r) ](VARISTRING[255] str), ',']();
        fromDate(s) <- [= GROUP MIN fromDate(StatisticReport r) IF in(r)]();
        toDate(s) <- [= GROUP MAX toDate(StatisticReport r) IF in(r)]();
        name(s) <- 'Суммарный отчет ' + name(statisticReportType(s));
        statisticGroupType(s) <- statisticGroupType(statisticReportType(s));     
        
        FOR statisticReportType(s) == statisticReportType(StatisticReportTypeDetail detail) ADDOBJ d = StatisticReportDetail DO {
            statisticReport(d) <-s;
            index(d) <- index(detail);
            number(d) <-number(detail);
            name(d) <- name(detail);
            statisticGroup(d) <- statisticGroup(detail);
            nameUOM(d) <- nameUOM(detail);
            round(d) <- round(detail);
            
            sold(d) <- [=GROUP SUM sold(StatisticReportDetail d) IF in(statisticReport(d)) BY statisticGroup(d)](statisticGroup(d));
            soldResident(d) <- [=GROUP SUM soldResident(StatisticReportDetail d) IF in(statisticReport(d)) BY statisticGroup(d)](statisticGroup(d));
            balance(d) <- IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.stock THEN [= GROUP SUM balance(Stock s,StatisticGroup sg) BY sg](statisticGroup(d))
                ELSE IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.region THEN [= GROUP SUM balance(Region s,StatisticGroup sg) BY sg](statisticGroup(d));
            balanceResident(d) <- IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.stock THEN [= GROUP SUM balanceResident(Stock s,StatisticGroup sg) BY sg](statisticGroup(d))
                ELSE IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.region THEN [= GROUP SUM balanceResident(Region s,StatisticGroup sg) BY sg](statisticGroup(d));
                
            soldSum(d) <- [=GROUP SUM soldSum(StatisticReportDetail d) IF in(statisticReport(d)) BY statisticGroup(d)](statisticGroup(d));
            soldSumResident(d) <- [=GROUP SUM soldSumResident(StatisticReportDetail d) IF in(statisticReport(d)) BY statisticGroup(d)](statisticGroup(d));
            balanceSum(d) <- IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.stock THEN [= GROUP SUM balanceSum(Stock s,StatisticGroup sg) BY sg](statisticGroup(d))
                ELSE IF [=GROUP MAX reportKind(StatisticReport r) IF in(r) ]() == ReportKind.region THEN [= GROUP SUM balanceSum(Region s,StatisticGroup sg) BY sg](statisticGroup(d));
        }
        FORM statisticReport OBJECTS r = s MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
    in(StatisticReport r) <- NULL;
}

FORM statisticReports 'Статистические отчеты'

    OBJECTS r = StatisticReport 
    PROPERTIES (r) in
    PROPERTIES (r) READONLY name, nameStockRegion, 
                   number, series, date, time,
                   note, fromDate, toDate, nameStatisticGroupType   

    PROPERTIES (r) READONLY countStatisticReportDetail
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
    PROPERTIES (r) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer 
    PROPERTIES createSumReport()
        
    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round, childNumbers
   PROPERTIES (d) SHOWIF isThing(r) sold, soldResident, balance, balanceResident  
   PROPERTIES (d) SHOWIF isSum(r) soldSum, soldSumResident, balanceSum
    ORDER BY index(d)
    FILTERS statisticReport(d) == r
                
    DIALOG StatisticReport OBJECT r
;
DESIGN statisticReports {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deleter) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            fill = 1;

            type = SPLITV;
            MOVE r.box;    

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE r.created;                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW action {
                    caption = 'Действия';
                    MOVE PROPERTY (createSumReport());
                }
            }
        }
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}

NAVIGATOR {
    statisticsNavigator {
        NEW statisticsReports 'Отчеты' {
            ADD statisticReportTypes;
            ADD statisticReports;        
        }

    }    
}

