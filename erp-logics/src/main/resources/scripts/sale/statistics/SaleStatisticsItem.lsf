MODULE SaleStatisticsItem;

REQUIRE SaleStatistics, Item;

NAMESPACE Sale;

statistic 'Статистическая группа' = DATA StatisticGroup (StatisticGroupType, Item);
name 'Статистическая группа' = name(statistic(StatisticGroupType type, Item item));
sid 'Код группы' = sid(statistic(StatisticGroupType type, Item item));
canonicalName 'Каноническое имя' = canonicalName(statistic(StatisticGroupType type, Item item));

CONSTRAINT groupType(parent(StatisticGroup group)) != groupType(group)
           CHECKED BY parent[StatisticGroup] MESSAGE 'Родительский объект статистической группы имеет неправильный тип классификатора';

statistic (StatisticGroupType type, Item sku) += statistic (type, sku);

overCopy(Item s, Item d) += ACTION (s, d) {
    ASSIGN statistic(StatisticGroupType type, d) <- statistic(type, s) WHERE statistic(type, s);
}

CONSTRAINT groupType(statistic(StatisticGroupType type, Item item))!=type
    MESSAGE 'Данная группа не соответствует изменяемому типу группы';
    
EXTEND FORM item
    OBJECTS sgt = StatisticGroupType
    PROPERTIES(sgt) READONLY name, id
    FILTERS country(sgt) == c

    PROPERTIES(sgt,i) canonicalName
;
DESIGN item { regionalPrm { MOVE sgt.box;} }

TABLE statisticGroupTypeItemGroup(StatisticGroupType, ItemGroup);
@defineItemDefaultValue(statisticGroup, 'Статистическая группа (по-умолчанию)', StatisticGroup, nameStatisticGroup, statisticGroupType);
dataSidStatisticGroupStatisticGroup 'Код группы' (StatisticGroupType statisticGroupType, ItemGroup itemGroup) = sid(dataStatisticGroup(statisticGroupType, itemGroup)) IN defaultItemGroup;

sidStatisticGroup 'Код группы' (StatisticGroupType statisticGroupType, ItemGroup itemGroup) = sid(statisticGroup(statisticGroupType, itemGroup)) IN defaultItemGroup;

assignStatisticGroupItems 'Назаначить всем товарам группы' (ItemGroup group) = ACTION NEWSESSION {
    statistic(StatisticGroupType t, Item i) <- statisticGroup(t, itemGroup(i)) WHERE isParent(group, i);
    apply();
} TOOLBAR CONFIRM;

EXTEND FORM itemGroup
    OBJECTS t=StatisticGroupType 
    PROPERTIES(t)   READONLY name, id
    PROPERTIES(t, g)  sidStatisticGroup, nameStatisticGroup
    PROPERTIES(g) assignStatisticGroupItems TODRAW t
    FILTERS country(t) == defaultCountry()
;    

DESIGN itemGroup {
    detail1 {
        MOVE t.box { caption = 'Статистический классификатор';}
    }         
}

WHEN SESSION CHANGED(itemGroup(Item i)) AND StatisticGroupType t IS StatisticGroupType AND NOT statistic(t, i) DO
    statistic(t, i) <- statisticGroup(t, itemGroup(i));

changeStatisticGroupTypeItem 'Стат. группа товара и товарной группы должны быть равны' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () changeStatisticGroupTypeItem
;

DESIGN options {
    pane {        
        NEW statistics {
            caption = 'Статистика';
            MOVE PROPERTY(changeStatisticGroupTypeItem());   
        }
    }
}

WHEN SESSION CHANGED(statisticGroup(StatisticGroupType type,itemGroup(Item item)))  AND changeStatisticGroupTypeItem()
    AND NOT CHANGED(statistic(type, item)) DO {
    
        statistic(type, item) <- statisticGroup(type, itemGroup(item));
}
    


change = ACTION (StatisticGroupType type, Item item) {
    REQUEST OBJECT s
    IF statistic(type, item) THEN {
        FORM statisticGroupDialog OBJECTS c = type, s = statistic(type, item) DIALOG SHOWDROP;
    } ELSE {
        FORM statisticGroupDialog OBJECTS c = type DIALOG SHOWDROP;
    }
    
    IF formResult() == FormResult.ok THEN {
        statistic(type, item) <- requestedObject();

    } ELSE  {
        IF  formResult() == FormResult.drop THEN {
            statistic(type, item) <- NULL;
        }        
    }
}
changeData = ACTION (StatisticGroupType type, ItemGroup itemGroup) {
    REQUEST OBJECT s
    IF dataStatisticGroup(type, itemGroup) THEN {
        FORM statisticGroupDialog OBJECTS c = type, s = dataStatisticGroup(type, itemGroup) DIALOG SHOWDROP;
    } ELSE {
        FORM statisticGroupDialog OBJECTS c = type DIALOG SHOWDROP;
    }
    IF formResult() == FormResult.ok THEN {
        dataStatisticGroup(type, itemGroup) <- requestedObject();

    } ELSE  {
        IF  formResult() == FormResult.drop THEN {
            dataStatisticGroup(type, itemGroup) <- NULL;
        }         
    }
}

fill 'Заполнить стат. группу для всех товаров' = ACTION (StatisticGroupType type, ItemGroup itemGroup) {
    statistic(type, Item item) <- statisticGroup(type,itemGroup) WHERE isParent(itemGroup,item);
} TOOLBAR;

changeBackground = RGB(224, 224, 255);

EXTEND FORM statisticGroups
    TREE skuTree sk = ItemGroup PARENT parent
    PROPERTIES READONLY order(sk), name(sk)     
    PROPERTIES dataNameStatisticGroupStatisticGroup(c,sk) ON CHANGE changeData(c,sk) ON SHORTCUT fill(c,sk) BACKGROUND changeBackground()
    PROPERTIES dataSidStatisticGroupStatisticGroup(c,sk) ON CHANGE changeData(c,sk) ON SHORTCUT fill(c,sk) BACKGROUND changeBackground()
           
    PROPERTIES READONLY nameStatisticGroup(c,sk),  sidStatisticGroup(c,sk)
    ORDER BY order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
    
    OBJECTS i = Item
    PROPERTIES (i) READONLY name, idBarcode, id[Sku] SHOWIF showIDs()
    PROPERTIES name(c,i) ON CHANGE change(c,i)
    PROPERTIES sid(c,i) ON CHANGE change(c,i)
    FILTERS isParent(sk,i)
    FILTERGROUP inactive1 FILTER 'Активные' active(i) 'F5' DEFAULT
;
DESIGN statisticGroups {
    specification.box {
        NEW relation {
            fill = 1;
            caption = 'Привязка групп';
            type = SPLITV;
            MOVE skuTree.tree.box {caption = 'Товарные группы';}
            MOVE i.box; 
            PROPERTY (dataNameStatisticGroupStatisticGroup(c,sk)) {caption = 'Статистическая группа';}
            PROPERTY (nameStatisticGroup(c,sk)) {caption = 'Статистическая группа (перегруженная)';}
        }
    }
}