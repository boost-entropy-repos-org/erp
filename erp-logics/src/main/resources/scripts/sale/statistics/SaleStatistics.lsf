MODULE SaleStatistics;

REQUIRE System, Utils, Historizable, Stock, LegalEntity, SaleLedger, Sale, Integration;

NAMESPACE Sale;

// ----------------------------------- Статистический классификатор ------------------------------------------ //
CLASS StatisticGroupType 'Тип классификатора статистических групп' : GroupType;
TABLE statisticGroupType (StatisticGroupType);

countryStatisticGroupType = DATA Country (StatisticGroupType);
nameCountryStatisticGroupType 'Страна' (type)= nameCountry(countryStatisticGroupType(type)) IN base;

nameStatisticGroupType 'Наименование' = DATA ISTRING[100](StatisticGroupType);

idStatisticGroupType 'Идентификатор' = DATA STRING[20] (StatisticGroupType) MINCHARWIDTH 3 MAXCHARWIDTH 10 PREFCHARWIDTH 7;

typeIdStatisticGroupType (string1) = GROUP AGGR type
    BY idStatisticGroupType(type) WHERE type IS StatisticGroupType;

FORM statisticGroupType 'Тип классификатора статистических групп'
    OBJECTS t = StatisticGroupType FIXED PANEL
    PROPERTIES(t) nameStatisticGroupType, idStatisticGroupType, nameCountryStatisticGroupType
    EDIT StatisticGroupType OBJECT t
;

FORM dialogStatisticGroupType 'Тип классификатора статистических групп'
    OBJECTS t = StatisticGroupType
    PROPERTIES(t) READONLY nameStatisticGroupType, idStatisticGroupType, nameCountryStatisticGroupType
    DIALOG StatisticGroupType OBJECT t
;

FORM statisticGroupTypes 'Типы классификаторов статистических групп'
    OBJECTS t = StatisticGroupType
    PROPERTIES(t) READONLY nameStatisticGroupType, idStatisticGroupType, nameCountryStatisticGroupType
    PROPERTIES(t) ADDFORM, EDITFORM, DELETE
;

CLASS StatisticGroup 'Статистическая группа': Group;
TABLE statisticGroup(StatisticGroup);

nameStatisticGroup 'Наименование' = DATA ISTRING[100](StatisticGroup);

CLASS GroupStatic 'Ед. изм.' {
    statisticLiter 'Литр',
    statisticThing 'Штука',
    statisticPounds 'Килограмм',
    statisticSum 'Валюта',
    statisticLinearMeters 'Пог. м',
    statisticPair 'Пара',
    statisticConditionalPiece 'Усл. кус.',
    statisticSquareMeters 'Квадратный м',
    statisticCubicMeters 'Кубический м'
}
FORM GroupStatics
    OBJECTS g = GroupStatic
    PROPERTIES(g) staticCaption
    DIALOG GroupStatic OBJECT g
;

TABLE groupStaticUOM (GroupStatic, UOM);
factorGroupStaticUOM 'Коэффициент перевода' = DATA NUMERIC[14,3] (GroupStatic, UOM);

FORM groupStatics 'Конвертация статистических ед. изм.'
    OBJECTS g=GroupStatic FIXED PANEL
    PROPERTIES(g) SELECTOR staticCaption

    OBJECTS u=UOM
    PROPERTIES   nameUOM(u) READONLY, shortNameUOM(u) READONLY, factorGroupStaticUOM(g,u)

    FILTERGROUP batch
        FILTER 'Ед.изм. с коэфф.' 'F11' factorGroupStaticUOM(g,u)
;

TABLE statisticGroupStatisticGroup(StatisticGroup, StatisticGroup);
@defineHierarchy(statisticGroup);

groupTypeStatisticGroup = DATA StatisticGroupType (StatisticGroup) AUTOSET;
nameGroupTypeStatisticGroup 'Тип классификатора' (group) = nameStatisticGroupType(groupTypeStatisticGroup(group));

countryStatisticGroup = countryStatisticGroupType(groupTypeStatisticGroup(group));
nameCountryStatisticGroup 'Страна' (statisticGroup)= nameCountry(countryStatisticGroup(statisticGroup)) IN base;

unitMeasureStatisticGroup 'Ед. изм. ИД' (statisticGroup) = DATA GroupStatic (StatisticGroup);
nameUOMStatisticGroup 'Ед. изм.' (statisticGroup) = staticCaption(unitMeasureStatisticGroup(statisticGroup)) MINCHARWIDTH 15 MAXCHARWIDTH 15 PREFCHARWIDTH 15;

sidStatisticGroup 'Код группы' (statisticGroup) = DATA STRING[12] (StatisticGroup)  MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;
canonicalNumberStatisticGroup 'Канонический код' (statisticGroup) = toString255(
                           [GROUP CONCAT sidStatisticGroup(parent), ' / ' BY child ORDER DESC levelStatisticGroupStatisticGroup(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberNameStatisticGroup 'Канонический код-название' (statisticGroup) = [FORMULA STRING[100] '$1 || \' / \' || $2'](
    canonicalNumberStatisticGroup(statisticGroup), nameStatisticGroup(statisticGroup));

groupIdTypeIdGroup (string1, string2) = GROUP AGGR group
    BY idStatisticGroupType(groupTypeStatisticGroup(group)), sidStatisticGroup(group) WHERE group IS StatisticGroup;

sidParentStatisticGroup 'Код родительского объекта' (statisticGroup) = sidStatisticGroup(parentStatisticGroup(statisticGroup));

conversionFactorStatisticGroup 'Коэффициент перевода' (statisticGroup) = DATA NUMERIC[14,5] (StatisticGroup);

FORM statisticGroup 'Статистическая группа'
    OBJECTS g=StatisticGroup FIXED PANEL
    PROPERTIES(g)   nameGroupTypeStatisticGroup, nameStat=nameStatisticGroup, nameParentStatisticGroup, sidParentStatisticGroup,
                    sidStatisticGroup, nameUOMStatisticGroup,conversionFactorStatisticGroup

    EDIT StatisticGroup OBJECT g
;

addStatisticGroupType 'Добавить' = ACTION (group, type) NEWSESSION {
    FOR ADDOBJ g = StatisticGroup DO {
        SET parentStatisticGroup(g) <- group;
        SET groupTypeStatisticGroup(g) <- type;
        FORM statisticGroup OBJECTS g = g MODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

addStatisticGroup 'Добавить' (group)= addStatisticGroupType(group, groupTypeStatisticGroup(group)) TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

TABLE statisticGroupTypeSku (StatisticGroupType, Sku);
statisticGroupTypeSku = ABSTRACT StatisticGroup (StatisticGroupType, Sku) PERSISTENT;
nameStatisticGroupTypeSku 'Статистическая группа' = nameStatisticGroup(statisticGroupTypeSku(type, sku));

TABLE statisticGroupSku(StatisticGroup, Sku);
isParentStatisticGroupSku (group, sku) = isParentStatisticGroupStatisticGroup(statisticGroupTypeSku(groupTypeStatisticGroup(group),sku), group) PERSISTENT;
isParentLeafStatisticGroupSku (group, sku) = isParentLeafStatisticGroupStatisticGroup(statisticGroupTypeSku(groupTypeStatisticGroup(group),sku), group) PERSISTENT;
parentStatisticGroupTypeSku (type, sku) = parentStatisticGroup(statisticGroupTypeSku(type,sku)) PERSISTENT;

residentCountryCountry 'Отечественный производитель' =  DATA BOOLEAN (Country, Country);
residentStatisticGroupSku (group, sku) = residentCountryCountry(countryStatisticGroupType(groupTypeStatisticGroup(group)), countrySku(sku));

FORM statisticGroups 'Статистические группы'

    OBJECTS ss=Country FIXED PANEL
    PROPERTIES(ss) SELECTOR nameCountry

    OBJECTS c=StatisticGroupType FIXED PANEL
    PROPERTIES(c) SELECTOR nameStatisticGroupType
    FILTERS countryStatisticGroupType(c) == ss

    TREE treeGroups g=StatisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY nameStatisticGroup(g), sidStatisticGroup(g)
    PROPERTIES(g,c)       addStatisticGroupType
    PROPERTIES(g) EDITFORM, ADDFORM
    ORDER BY sidStatisticGroup

    OBJECTS cg=StatisticGroup
    PROPERTIES(cg)     READONLY canonicalNumberNameStatisticGroup, sidStatisticGroup, nameUOMStatisticGroup,
                       conversionFactorStatisticGroup
    PROPERTIES(cg)  DELETE

    FILTERS groupTypeStatisticGroup(g) == c,
            groupTypeStatisticGroup(cg) == c

    OBJECTS s = Country

    PROPERTIES(s) READONLY nameCountry, nameOriginCountry, sidCountry, sidOrigin2Country, sidOrigin3Country,
                           nameCurrencyCountry, nameLanguageCountry
    PROPERTIES(ss,s) residentCountryCountry
    FILTERGROUP filter
        FILTER 'Страны явл. отечественными' 'F11' residentCountryCountry(ss, s) DEFAULT

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafStatisticGroupStatisticGroup(cg, g) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentStatisticGroupStatisticGroup(cg, g)
        FILTER 'Только непосредственных потомков' 'F8' parentStatisticGroup(cg) == g
;

DESIGN statisticGroups FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        NEW header {
            childConstraints = TO THE RIGHT;
            ADD ss.box;
            ADD c.box;
        }
        NEW specification.box {
            type = TABBED;
            NEW topContainer{
                title = 'Статистические группы';
                childConstraints = TO THE RIGHT;
                type = SPLITH;

                ADD treeGroups.tree.box;

                ADD cg.box{
                    fillHorizontal = 4;
                }
            }
            ADD s.box {title = 'Страны являющиеся отечественными';}
        }
    }

    ADD functions.box;
}

FORM statisticGroupDialog 'Статистические группы'
    OBJECTS c=StatisticGroupType FIXED PANEL
    PROPERTIES(c) SELECTOR nameStatisticGroupType

    TREE treeGroups g=StatisticGroup PARENT parentStatisticGroup
    PROPERTIES(g) READONLY nameStatisticGroup, nameUOMStatisticGroup, sidStatisticGroup, canonicalNumberStatisticGroup
    PROPERTIES(g) ADDFORM, EDITFORM, DELETE
    FILTERS groupTypeStatisticGroup(g) == c
    ORDER BY canonicalNumberStatisticGroup

    DIALOG StatisticGroup OBJECT g
;

//---------------------------------------------- Отображение в форме товаров -------------------------------------//

parentGroup (statisticGroup) += parentStatisticGroup(statisticGroup);
nameGroup (statisticGroup) += nameStatisticGroup(statisticGroup);
nameGroupType (statisticGroupType) += nameStatisticGroupType (statisticGroupType);
groupTypeGroup (statisticGroup) += groupTypeStatisticGroup (statisticGroup);
groupGroupTypeSku (statisticGroupType, sku) += WHEN CLASS(statisticGroupTypeSku (statisticGroupType, sku)) THEN statisticGroupTypeSku (statisticGroupType, sku);

//---------------------------------------------- Формы стат. отчетов -------------------------------------//

//  12 ТОРГ ПРОДАЖИ

netWeightSoldSkuStockDateFromTo 'Вес проданного товара, кг' (sku, stock, dateFrom, dateTo) =
    quantitySoldSkuStockDateFromTo(sku, stock, dateFrom, dateTo) *
    (OVERRIDE 1 IF sku IS Sku, netWeightSku(sku) IF NOT isWeightSku(sku));
volumeSoldSkuStockDateFromTo 'Объем проданного товара, л' (sku, stock, dateFrom, dateTo) =
    quantitySoldSkuStockDateFromTo(sku, stock, dateFrom, dateTo) * volumeSku(sku);
// sumSoldSkuStockDateFromTo 'Продано, сумма' (sku, stock, dateFrom, dateTo)   - рубли
//quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)                      - шт.

                            //с коэффициентом пересчета за период//
//всего
quantitySoldByStatisticGroupDateFromTo 'Продано, шт' (group, stock, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    isParentStatisticGroupSku(group, sku) BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
netWeightSoldByStatisticGroupDateFromTo 'Продано, кг' (group, stock, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
volumeSoldByStatisticGroupDateFromTo 'Продано, л' (group, stock, dateFrom, dateTo)=
    [GROUP SUM volumeSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
retailSumSoldByStatisticGroupDateFromTo 'Продано, сум.' (group, stock, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

//отечеств. пр-ва
quantitySoldResidentByStatisticGroupDateFromTo 'Продано, шт' (group, stock, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    residentStatisticGroupSku (group, sku) IF isParentStatisticGroupSku(group, sku)
        BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
netWeightSoldResidentByStatisticGroupDateFromTo 'Продано, кг' (group, stock, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
volumeSoldResidentByStatisticGroupDateFromTo 'Продано, л' (group, stock, dateFrom, dateTo)=
    [GROUP SUM volumeSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
retailSumSoldResidentByStatisticGroupDateFromTo 'Продано, сум.' (group, stock, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

netWeightBalanceASkuLedgerDate 'Вес товара на конец , кг' (sku, stock, dateTo) =
    balanceASkuStockDate (sku, stock, dateTo) * (OVERRIDE 1 IF sku IS Sku, netWeightSku(sku) IF NOT isWeightSku(sku));
volumeBalanceASkuLedgerDate 'Объем товара на конец , л' (sku, stock, dateTo) =
    balanceASkuStockDate (sku, stock, dateTo) * volumeSku(sku);

//sumASkuStockDate (sku, stock, dateTo) -  сумма на конец

//retailSumBalanceASkuLedgerDate 'Сумма товара на конец , сум.' (sku, stock, dateTo) =
//    retailPriceASkuStockDate (sku, stock, dateTo) * balanceASkuStockDate(sku, stock, dateTo);
//balanceASkuStockDate (sku, stock, dateTo)    - шт.

                                   //с коэффициентом пересчета на конец//
// всего
balanceByStatisticGroupDateTo 'Остаток на конец' (group, stock, dateTo)=
    [GROUP SUM balanceASkuStockDate (sku, stock, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    isParentStatisticGroupSku(group, sku)
        BY group, stock, dateTo](group, stock, dateTo)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
netWeightByStatisticGroupDateTo 'Вес на конец, кг' (group, stock, dateTo)=
    [GROUP SUM netWeightBalanceASkuLedgerDate (sku, stock, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, stock, dateTo](group, stock, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
volumeByStatisticGroupDateTo 'Объем на конец, л' (group, stock, dateTo)=
    [GROUP SUM volumeBalanceASkuLedgerDate (sku, stock, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, stock, dateTo](group, stock, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
retailSumByStatisticGroupDateTo 'Сумма на конец, сум.' (group, stock, dateTo)=
    [GROUP SUM sumASkuStockDate (sku, stock, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, stock, dateTo](group, stock, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

// отечеств. пр-ва
balanceResidentByStatisticGroupDateTo 'Остаток на конец' (group, stock, dateTo)=
    [GROUP SUM balanceASkuStockDate (sku, stock, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
        BY group, stock, dateTo](group, stock, dateTo)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
netWeightResidentByStatisticGroupDateTo 'Вес на конец, кг' (group, stock, dateTo)=
    [GROUP SUM netWeightBalanceASkuLedgerDate (sku, stock, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, stock, dateTo](group, stock, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
volumeResidentByStatisticGroupDateTo 'Объем на конец, л' (group, stock, dateTo)=
    [GROUP SUM volumeBalanceASkuLedgerDate (sku, stock, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, stock, dateTo](group, stock, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
retailSumResidentByStatisticGroupDateTo 'Сумма на конец, сум.' (group, stock, dateTo)=
    [GROUP SUM sumASkuStockDate (sku, stock, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, stock, dateTo](group, stock, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

valueByStatisticGroupDateFromTo 'Продано' (group, stock, dateFrom, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightSoldByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeSoldByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumSoldByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND dateFrom IS DATE AND dateTo IS DATE
    ;
valueResidentByStatisticGroupDateFromTo 'Продано, бел. пр-ва' (group, stock, dateFrom, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentByStatisticGroupDateFromTo(group, stock, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND dateFrom IS DATE AND dateTo IS DATE
    ;

valueByStatisticGroupDateTo 'Остаток на конец' (group, stock, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN balanceByStatisticGroupDateTo(group, stock, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightByStatisticGroupDateTo(group, stock, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeByStatisticGroupDateTo(group, stock, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumByStatisticGroupDateTo(group, stock, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND dateTo IS DATE
    ;
valueResidentByStatisticGroupDateTo 'Остаток на конец, бел. пр-ва' (group, stock, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentByStatisticGroupDateTo(group, stock, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightResidentByStatisticGroupDateTo(group, stock, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeResidentByStatisticGroupDateTo(group, stock, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumResidentByStatisticGroupDateTo(group, stock, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND dateTo IS DATE
    ;

FORM statisticalReport 'Статистика (продажи) склад/группа/sku'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)
    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR nameStatisticGroupType(c)

    TREE stockTree a = STRING[3], sg = StockGroup PARENT parentStockGroup, ts = Stock
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = nameStockGroup(sg), nameStock(ts)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg

    TREE treeGroups g=StatisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = nameStatisticGroup(g),  sidStatisticGroup(g), nameUOMStatisticGroup(g)
    ORDER BY gname
    FILTERS groupTypeStatisticGroup(g) ==c

    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY nameS=nameSku(s), nameStock(st)
    FILTERS           st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts

    ORDER BY          nameS
    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafStatisticGroupSku(g, s) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentStatisticGroupSku(g, s)
        FILTER 'Только непосредственных потомков' 'F8' parentStatisticGroupTypeSku(c,s) == g

    PROPERTIES        balanceBSkuStockDate(s, st, dFrom),
                      quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo),
                      balanceASkuStockDate(s, st, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateFromTo(g, ts, dFrom, dTo), valueResidentByStatisticGroupDateFromTo(g, ts, dFrom, dTo)
    PROPERTIES  FORCE PANEL valueByStatisticGroupDateTo(g, ts, dTo), valueResidentByStatisticGroupDateTo(g, ts, dTo)
;
@extendFormFilterStockAccess(Stock, st, statisticalReport);
@extendFormFilterStockGroupAccess(Stock, ts, statisticalReport, accessEmployeeEmployeeDivision);
@extendFormFilterStockGroupAccess(StockGroup, sg, statisticalReport, countAccessEmployeeEmployeeDivisionGroup);

DESIGN statisticalReport FROM DEFAULT {

    main{

        NEW topContainer{

            type = SPLITH;
            childConstraints = TO THE RIGHT;

            NEW firstCase {

                type = SPLITV;
                childConstraints = TO THE BOTTOM;

                ADD stockTree.tree.box { title = 'Склады'; }
                ADD treeGroups.tree.box { title = 'Статистические группы'; }
            }

            NEW secondCase {

                type = SPLITV;
                fillHorizontal = 2;
                childConstraints = TO THE BOTTOM;

                NEW wor {
                    childConstraints = TO THE RIGHT;
                    ADD dates.box;
                    ADD c.box {title = 'Тип классификатора статистических групп';};
                }
                ADD sts.box {fillVertical = 2;
                    title = 'Показатели по продажам в номинальных единицах';
                }
            }
        }

        NEW row {
            title = 'Суммы';
            childConstraints = TO THE BOTTOM;
            NEW row1 {
            title = 'По отдел-группа, с учетом ед. изм. и коэфф. перевода';
            ADD PROPERTY(valueByStatisticGroupDateFromTo);
            ADD PROPERTY(valueResidentByStatisticGroupDateFromTo);
            ADD PROPERTY(valueByStatisticGroupDateTo);
            ADD PROPERTY(valueResidentByStatisticGroupDateTo);
            }
        }
    }

    ADD functions.box;
}

                ///////////////--------по регионам и компании----------/////////////////

                           //c коэффициентом пересчета за период//
// всего
quantitySoldByStatisticGroupRegionDateFromTo 'Продано, шт' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    isParentStatisticGroupSku(group, sku)
        BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
            (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

netWeightSoldByStatisticGroupRegionDateFromTo 'Продано, кг' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

volumeSoldByStatisticGroupRegionDateFromTo 'Продано, л' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

retailSumSoldByStatisticGroupRegionDateFromTo 'Продано, руб.' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

// отечест. производствава
quantitySoldResidentByStatisticGroupRegionDateFromTo 'Продано, шт' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
        BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
            (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

netWeightSoldResidentByStatisticGroupRegionDateFromTo 'Продано, кг' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM netWeightSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

volumeSoldResidentByStatisticGroupRegionDateFromTo 'Продано, л' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM volumeSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

retailSumSoldResidentByStatisticGroupRegionDateFromTo 'Продано, руб.' (group, legalEntity, region, dateFrom, dateTo)=
    [GROUP SUM sumSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

                             //с коэффициентом пересчета на коцен//
// всего
balanceByStatisticGroupRegionDateTo 'Остаток на конец' (group, legalEntity, region, dateTo)=
    [GROUP SUM balanceASkuStockDate (sku, stock, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    isParentStatisticGroupSku(group, sku)
        BY group,legalEntityStock(stock), regionStock(stock), dateTo]
            (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

netWeightByStatisticGroupRegionDateTo 'Вес на конец, кг' (group, legalEntity, region, dateTo)=
    [GROUP SUM netWeightBalanceASkuLedgerDate (sku, stock, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateTo]
        (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

volumeByStatisticGroupRegionDateTo 'Объем на конец, л' (group, legalEntity, region, dateTo)=
    [GROUP SUM volumeBalanceASkuLedgerDate (sku, stock, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateTo]
        (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

retailSumByStatisticGroupRegionDateTo 'Сумма на конец, руб' (group, legalEntity, region, dateTo)=
    [GROUP SUM sumASkuStockDate (sku, stock, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateTo]
        (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));
// белорусского производства
balanceResidentByStatisticGroupRegionDateTo 'Остаток на конец' (group, legalEntity, region, dateTo)=
    [GROUP SUM balanceASkuStockDate (sku, stock, dateTo)/
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factorGroupStaticUOM(unitMeasureStatisticGroup(group), UOMSku(sku))) IF
    residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
        BY group, legalEntityStock(stock), regionStock(stock), dateTo]
            (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

netWeightResidentByStatisticGroupRegionDateTo 'Вес на конец, кг' (group, legalEntity, region, dateTo)=
    [GROUP SUM netWeightBalanceASkuLedgerDate (sku, stock, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateTo]
        (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

volumeResidentByStatisticGroupRegionDateTo 'Объем на конец, л' (group, legalEntity, region, dateTo)=
    [GROUP SUM volumeBalanceASkuLedgerDate (sku, stock, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateTo]
        (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

retailSumResidentByStatisticGroupRegionDateTo 'Сумма на конец, руб' (group, legalEntity, region, dateTo)=
    [GROUP SUM sumASkuStockDate (sku, stock, dateTo) IF residentStatisticGroupSku (group, sku) AND isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateTo]
        (group, legalEntity, region, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactorStatisticGroup(group));

valueByStatisticGroupLegalEntityRegionDateFromTo 'Продано всего' (group, legalEntity, region, dateFrom, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightSoldByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeSoldByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumSoldByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND dateFrom IS DATE AND dateTo IS DATE
    ;

valueByStatisticGroupLegalEntityRegionDateTo 'Остаток на конец всего' (group, legalEntity, region, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN balanceByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND dateTo IS DATE
    ;

valueResidentByStatisticGroupLegalEntityRegionDateFromTo 'Продано отеч. пр-ва' (group, legalEntity, region, dateFrom, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentByStatisticGroupRegionDateFromTo(group, legalEntity, region, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND dateFrom IS DATE AND dateTo IS DATE
    ;

valueResidentByStatisticGroupLegalEntityRegionDateTo 'Остаток на конец отеч. пр-ва' (group, legalEntity, region, dateTo) =
    CASE
        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
            THEN netWeightResidentByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
            THEN volumeResidentByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
            THEN retailSumResidentByStatisticGroupRegionDateTo(group, legalEntity, region, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND dateTo IS DATE
    ;

totalRetailSumSoldByStatisticGroupRegionDateFromTo 'Итого продано, руб.' (group, legalEntity, region, dateFrom, dateTo)=
    GROUP SUM sumSoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo) IF isParentStatisticGroupSku(group, sku)
    BY group, legalEntityStock(stock), regionStock(stock), dateFrom, dateTo;

FORM torgSales 'Статистика (продажи) организация/регион/группа'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR nameStatisticGroupType(c)

    OBJECTS l=LegalEntity  FIXED PANEL
    PROPERTIES(l) SELECTOR nameLegalEntity

    OBJECTS r=Region  FIXED PANEL
    PROPERTIES(r) SELECTOR nameRegion

    TREE treeGroups g=StatisticGroup PARENT parentStatisticGroup
    PROPERTIES READONLY gname = nameStatisticGroup(g), sidStatisticGroup(g), nameUOMStatisticGroup(g)
    ORDER BY sidStatisticGroup

    FILTERS groupTypeStatisticGroup(g) == c

    PROPERTIES(g, l, r, dFrom, dTo) valueByStatisticGroupLegalEntityRegionDateFromTo, valueResidentByStatisticGroupLegalEntityRegionDateFromTo
    PROPERTIES(g, l, r, dTo) valueByStatisticGroupLegalEntityRegionDateTo, valueResidentByStatisticGroupLegalEntityRegionDateTo
    PROPERTIES(g, l, r, dFrom, dTo) totalRetailSumSoldByStatisticGroupRegionDateFromTo
;

DESIGN torgSales FROM DEFAULT {

    main{
        ADD treeGroups.tree.box  BEFORE functions.box {
            title = 'Показатели по стат. группам с учетом ед. изм. и коэфф. перевода';
        }
        NEW firstCase BEFORE treeGroups.tree.box {
            title = 'Параметры отчета';
            childConstraints = TO THE RIGHTBOTTOM;

            ADD c.box;
            NEW dateCase {
                title = 'Даты';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(objFrom) {
                    caption = 'Дата (с)';
                }
                ADD PROPERTY(objTo) {
                    caption = 'Дата (по)';
                }
            }
            ADD l.box;
            ADD r.box;
        }
        ADD functions.box;
    }
}

//---------------------------------------------- Автоматическое заполнение -----------------------------------------------------//

loadDefaultStatisticGroupType 'Добавить значение классификатора стат.групп' = ACTION (iname, isid, isidCountry) {
    FOR ADDOBJ t = StatisticGroupType DO {
        SET nameStatisticGroupType(t) <- iname;
        SET idStatisticGroupType (t) <- isid;
        SET countryStatisticGroupType(t) <- countrySID(isidCountry);
    }
}

loadDefaultStatisticGroup 'Добавить значение статистические группы' = ACTION (sidType, sidParent, iname, isid, groupStatic, value) {
    FOR ADDOBJ g = StatisticGroup DO {
        SET groupTypeStatisticGroup(g) <- typeIdStatisticGroupType(sidType);
        SET parentStatisticGroup(g) <- groupIdTypeIdGroup(sidType, sidParent);

        SET nameStatisticGroup(g) <- iname;
        SET sidStatisticGroup(g) <- isid;
        SET unitMeasureStatisticGroup(g) <- groupStatic AS GroupStatic;
        SET conversionFactorStatisticGroup(g) <- value;
    }
}

loadDefaultResidentCountry 'Добавить отеч. производ' = ACTION (idCountry, idCountry2)  {
    SET residentCountryCountry(a,b) <- TRUE WHERE a == countrySID(idCountry) AND b == countrySID(idCountry2);
}

loadDefaultStatisticGroups 'Загрузить стандартные статистические группы и классификатор' () = ABSTRACT ACTION LIST ()  IN loadDefaultGroup;
@implementLoadDefaultData(loadDefaultStatisticGroups);

NAVIGATOR {
    saleNavigator {
        NEW statisticsNavigator 'Статистика' BEFORE saleMasterData {
            ADD statisticGroupTypes;
            ADD statisticGroups;
            ADD groupStatics;
            ADD statisticalReport;
            ADD torgSales;
        }
    }
}