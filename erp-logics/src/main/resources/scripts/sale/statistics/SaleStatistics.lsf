MODULE SaleStatistics;

REQUIRE System, Utils, Historizable, Stock, LegalEntity, SaleLedger, Sale, Integration;

NAMESPACE Sale;

// ----------------------------------- Статистический классификатор ------------------------------------------ //
CLASS StatisticGroupType 'Тип классификатора статистических групп' : GroupType;
TABLE statisticGroupType (StatisticGroupType);

country = DATA Country (StatisticGroupType);
nameCountry 'Страна' (StatisticGroupType type)= name(country(type)) IN base;

name 'Наименование' = DATA VARISTRING[100](StatisticGroupType);

id 'Идентификатор' = DATA VARSTRING[20] (StatisticGroupType) MINCHARWIDTH 3 MAXCHARWIDTH 10 PREFCHARWIDTH 7;

statisticGroupTypeId (string1) = GROUP AGGR StatisticGroupType type
    BY id(type) WHERE type IS StatisticGroupType;

FORM statisticGroupType 'Тип классификатора статистических групп'
    OBJECTS t = StatisticGroupType FIXED PANEL
    PROPERTIES(t) name, id, nameCountry
    EDIT StatisticGroupType OBJECT t
;

FORM dialogStatisticGroupType 'Тип статистической группы'
    OBJECTS t = StatisticGroupType
    PROPERTIES(t) READONLY name, id, nameCountry
    DIALOG StatisticGroupType OBJECT t
;

FORM statisticGroupTypes 'Типы статистических групп'
    OBJECTS t = StatisticGroupType
    PROPERTIES(t) READONLY name, id, nameCountry
    PROPERTIES(t) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
;

CLASS StatisticGroup 'Статистическая группа': Group;
TABLE statisticGroup(StatisticGroup);

name 'Наименование' = DATA VARISTRING[250](StatisticGroup) MINCHARWIDTH 30 PREFCHARWIDTH 40;

CLASS GroupStatic 'Ед. изм.' {
    statisticLiter 'Литр',
    statisticThing 'Штука',
    statisticPounds 'Килограмм',
    statisticSum 'Валюта',
    statisticLinearMeters 'Пог. м',
    statisticPair 'Пара',
    statisticConditionalPiece 'Усл. кус.',
    statisticSquareMeters 'Квадратный м',
    statisticCubicMeters 'Кубический м'
}
FORM groupStaticsDialog 'Ед. изм. статистики'
    OBJECTS g = GroupStatic
    PROPERTIES(g) READONLY staticCaption
    DIALOG GroupStatic OBJECT g
;

TABLE groupStaticUOM (GroupStatic, UOM);
factor 'Коэффициент перевода' = DATA NUMERIC[14,3] (GroupStatic, UOM);

FORM groupStatics 'Конвертация статистических ед. изм.'
    OBJECTS g=GroupStatic FIXED PANEL
    PROPERTIES(g) SELECTOR staticCaption

    OBJECTS u=UOM
    PROPERTIES   name(u) READONLY, shortName(u) READONLY, factor(g,u)

    FILTERGROUP batch
        FILTER 'Ед.изм. с коэфф.' factor(g,u) 'F11'
;

TABLE statisticGroupStatisticGroup(StatisticGroup, StatisticGroup);
@defineHierarchy(statisticGroup);

groupType = DATA StatisticGroupType (StatisticGroup) AUTOSET NOT NULL DELETE;
nameGroupType 'Тип классификатора' (StatisticGroup group) = name(groupType(group));
countStatisticGroups 'Ко-во групп' (type) = GROUP SUM 1 BY groupType(StatisticGroup g);
country = country(groupType(StatisticGroup group));
nameCountry 'Страна' (StatisticGroup statisticGroup)= name(country(statisticGroup)) IN base;

unitMeasure 'Ед. изм. ИД' (statisticGroup) = DATA GroupStatic (StatisticGroup);
nameUOM 'Ед. изм.' (StatisticGroup statisticGroup) = staticCaption(unitMeasure(statisticGroup)) MINCHARWIDTH 15 MAXCHARWIDTH 15 PREFCHARWIDTH 15;

sid 'Код группы' (statisticGroup) = DATA STRING[12] (StatisticGroup)  MINCHARWIDTH 12 MAXCHARWIDTH 12 PREFCHARWIDTH 12;
canonicalNumber 'Канонический код' (StatisticGroup statisticGroup) = VARSTRING[255](
                           [= GROUP CONCAT sid(StatisticGroup parent), ' / ' BY StatisticGroup child ORDER DESC level(child, parent)](statisticGroup))
                           MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

canonicalNumberName 'Канонический код-название' (StatisticGroup statisticGroup) = CONCAT ' / ', canonicalNumber(statisticGroup), name(statisticGroup) MINCHARWIDTH 30 PREFCHARWIDTH 40;

groupIdTypeIdGroup (string1, string2) = GROUP AGGR StatisticGroup group
    BY id(groupType(group)), sid(group) WHERE group IS StatisticGroup;

sidParent 'Код родительского объекта' (StatisticGroup statisticGroup) = sid(parent(statisticGroup));

conversionFactor 'Коэффициент перевода' (statisticGroup) = DATA NUMERIC[14,5] (StatisticGroup);

id(StatisticGroup g) += VARSTRING[100](sid(g)) IF g IS StatisticGroup; 

sort = OVERRIDE name(StatisticGroup g), lpad(VARSTRING[250](sid(g)), 20, '0');  

orderSort 'Порядок (внутри группы)' (StatisticGroup g) = PARTITION SUM 1 BY groupType(g), parent(g) ORDER sort(g);
canonicalOrderSort 'Порядок (полный)' (StatisticGroup g) = VARSTRING[250]([ = GROUP CONCAT lpad(VARSTRING[3](orderSort(StatisticGroup parent)), 3, '0') , '.' BY StatisticGroup child ORDER DESC level(child, parent)](g));
nameLevel4 'Наименование (со сдвигом)' (StatisticGroup g) = VARSTRING[100](repeat('    ', INTEGER(level(g))-1)) + name(g);



FORM statisticGroup 'Статистическая группа'
    OBJECTS g=StatisticGroup FIXED PANEL
    PROPERTIES(g)   nameGroupType, nameStat=name, nameParent, sidParent,
                    sid, nameUOM,conversionFactor

    EDIT StatisticGroup OBJECT g
;
DESIGN statisticGroup {
        g.panel.props {
            columns = 3;
        }
    MOVE functions.box;
}

add 'Добавить' = ACTION (StatisticGroup group, StatisticGroupType type) NEWSESSION {
    FOR ADDOBJ g = StatisticGroup DO {
        ASSIGN parent(g) <- group;
        ASSIGN groupType(g) <- type;
        FORM statisticGroup OBJECTS g = g MODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

add 'Добавить' (StatisticGroup group)= ACTION add(group, groupType(group)) TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

TABLE statisticGroupTypeSku (StatisticGroupType, Sku);
statistic = ABSTRACT StatisticGroup (StatisticGroupType, Sku) PERSISTENT;
name 'Статистическая группа' = name(statistic(StatisticGroupType type, Sku sku));

TABLE statisticGroupSku(StatisticGroup, Sku);
isParent (StatisticGroup group, Sku sku) = isParent(statistic(groupType(group),sku), group) PERSISTENT;
isParentLeaf (StatisticGroup group, Sku sku) = isParentLeaf(statistic(groupType(group),sku), group) PERSISTENT;
parent (StatisticGroupType type, Sku sku) = parent(statistic(type,sku)) PERSISTENT;

resident 'Отечественный производитель' =  DATA BOOLEAN (Country, Country);
resident (StatisticGroup group, Sku sku) = resident(country(groupType(group)), country(sku)) AND isParent(group, sku) PERSISTENT;
showAdd = StatisticGroupType t IS StatisticGroupType AND NOT (countStatisticGroups(t));

FORM statisticGroups 'Статистические группы'

    OBJECTS ss=Country FIXED PANEL
    PROPERTIES(ss) SELECTOR name

    OBJECTS c=StatisticGroupType FIXED PANEL
    PROPERTIES(c) SELECTOR name
    FILTERS country(c) == ss

    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES READONLY name(g), sid(g)
    PROPERTIES(g,c)       add SHOWIF countStatisticGroups(c)
    PROPERTIES(g) EDITFORM, ADDFORM SHOWIF showAdd(c)
    ORDER BY sid(g)

    OBJECTS cg=StatisticGroup
    PROPERTIES(cg)     READONLYIF isReadonly() canonicalNumberName, sid, nameUOM,
                       conversionFactor
    PROPERTIES(cg)     DELETE FORCE PANEL TOOLBAR

    FILTERS groupType(g) == c,
            groupType(cg) == c

    OBJECTS s = Country

    PROPERTIES(s) READONLY name, nameOrigin, sid, sidOrigin2, sidOrigin3,
                           nameCurrency, nameLanguage
    PROPERTIES(ss,s) resident
    FILTERGROUP filter
        FILTER 'Страны явл. отечественными' resident(ss, s) 'F11' DEFAULT

    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(cg, g) 'F10' DEFAULT
        FILTER 'Всех потомков' isParent(cg, g) 'F9'
        FILTER 'Только непосредственных потомков' parent(cg) == g 'F8'
;

DESIGN statisticGroups {
    main {
        NEW header {
            type = CONTAINERH;
            MOVE ss.box;
            MOVE c.box;
        }
        NEW specification.box {
            type = TABBED;
            fill = 1;
            NEW topContainer{
                caption = 'Статистические группы';
                type = SPLITH;
                fill = 1;
                MOVE treeGroups.tree.box;
                MOVE cg.box{fill = 4;}
            }
            MOVE s.box {caption = 'Страны являющиеся отечественными';}
        }
    }
    MOVE functions.box;
}
@extendFormEditable(statisticGroups);
FORM statisticGroupDialog 'Статистические группы'
    OBJECTS c=StatisticGroupType FIXED PANEL
    PROPERTIES(c) SELECTOR name

    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES(g) READONLY name, nameUOM, sid, canonicalNumber
    PROPERTIES(g) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS groupType(g) == c
    ORDER BY canonicalNumber(g)
    
    OBJECTS s = StatisticGroup
    PROPERTIES(s) READONLY name, nameUOM, sid, canonicalNumber 
    PROPERTIES(s) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS isParent(s,g)
    ORDER BY canonicalNumber(s)
    
    DIALOG StatisticGroup OBJECT s
;
DESIGN statisticGroupDialog {
    main {
        preferredSize = (1024, 768);
        NEW top {
            fill = 1;
            type = SPLITH;
            MOVE treeGroups.tree.box;
            MOVE s.box{fill = 2;}
        }
        MOVE functions.box;
    }
}

//---------------------------------------------- Отображение в форме товаров -------------------------------------//

parent (StatisticGroup statisticGroup) += parent(statisticGroup);
name (StatisticGroup statisticGroup) += name(statisticGroup);
name (StatisticGroupType statisticGroupType) += name (statisticGroupType);
groupType (StatisticGroup statisticGroup) += groupType (statisticGroup);
group (StatisticGroupType statisticGroupType, Sku sku) += WHEN CLASS(statistic (statisticGroupType, sku)) THEN statistic (statisticGroupType, sku);

//---------------------------------------------- Формы стат. отчетов -------------------------------------//

//  12 ТОРГ ПРОДАЖИ

netWeightSold 'Вес проданного товара, кг' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =
    quantitySold(sku, stock, dateFrom, dateTo) * netWeight(sku);
volumeSold 'Объем проданного товара, л' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =
    quantitySold(sku, stock, dateFrom, dateTo) * volume(sku);
// sumSoldSkuStockDateFromTo 'Продано, сумма' (sku, stock, dateFrom, dateTo)   - рубли
//quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)                      - шт.

                            //с коэффициентом пересчета за период//
//всего
overFactor = ABSTRACT NUMERIC[14,3] (GroupStatic, Sku);

factor = (NUMERIC[20,8](OVERRIDE 1.0, overFactor(unitMeasure(StatisticGroup group), Sku sku)) /
    (OVERRIDE 1 IF group IS StatisticGroup AND sku IS Sku, factor(unitMeasure(group), UOM(sku)))) IF
    isParent(group, sku) PERSISTENT;

quantitySoldBy 'Продано, шт' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) * factor(StatisticGroup group, sku) 
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
netWeightSoldBy 'Продано, кг' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM netWeightSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
volumeSoldBy 'Продано, л' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM volumeSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
retailSumSoldBy 'Продано, сум.' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

//отечеств. пр-ва
quantitySoldResidentBy 'Продано, шт' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
netWeightSoldResidentBy 'Продано, кг' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM netWeightSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
volumeSoldResidentBy 'Продано, л' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM volumeSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
retailSumSoldResidentBy 'Продано, сум.' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo](group, stock, dateFrom, dateTo)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
//-- на конец
netWeightBalanceALedger 'Вес товара на конец , кг' (Sku sku, Stock stock, DATE date) =
    balanceA (sku, stock, date) * netWeight(sku);
volumeBalanceALedger 'Объем товара на конец , л' (Sku sku, Stock stock, DATE date) =
    balanceA (sku, stock, date) * volume(sku);

//-- на начало
netWeightBalanceBLedger 'Вес товара на начало , кг' (Sku sku, Stock stock, DATE date) =
    balanceB (sku, stock, date) * netWeight(sku);
volumeBalanceBLedger 'Объем товара на начало , л' (Sku sku, Stock stock, DATE date) =
    balanceB (sku, stock, date) * volume(sku);
    
//sumASkuStockDate (sku, stock, dateTo) -  сумма на конец

//retailSumBalanceASkuLedgerDate 'Сумма товара на конец , сум.' (sku, stock, dateTo) =
//    retailPriceASkuStockDate (sku, stock, dateTo) * balanceASkuStockDate(sku, stock, dateTo);
//balanceASkuStockDate (sku, stock, dateTo)    - шт.

                                   //с коэффициентом пересчета на конец//
// всего
balanceABy 'Остаток на конец' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM balanceA (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku)
        BY group, stock, date](group, stock, date)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
netWeightABy 'Вес на конец, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM netWeightBalanceALedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
volumeABy 'Объем на конец, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM volumeBalanceALedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
retailSumABy 'Сумма на конец, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
        
// отечеств. пр-ва
balanceResidentABy 'Остаток на конец' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM balanceA (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, stock, date](group, stock, date)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
netWeightResidentABy 'Вес на конец, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM netWeightBalanceALedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
volumeResidentABy 'Объем на конец, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM volumeBalanceALedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
retailSumResidentABy 'Сумма на конец, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));        
        
                                   //с коэффициентом пересчета на начало//
// всего
balanceBBy 'Остаток на начало' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM balanceB (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku)
        BY group, stock, date](group, stock, date)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));        
netWeightBBy 'Вес на начало, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM netWeightBalanceBLedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));   
volumeBBy 'Объем на начало, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM volumeBalanceBLedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));   
retailSumBBy 'Сумма на начало, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM sumB (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));                  
                  

// отечеств. пр-ва
balanceResidentBBy 'Остаток на начало' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM balanceB (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, stock, date](group, stock, date)/
            (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
netWeightResidentBBy 'Вес на начало, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM netWeightBalanceBLedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
volumeResidentBBy 'Объем на начало, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM volumeBalanceBLedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
retailSumResidentBBy 'Сумма на начало, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP SUM sumB (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, stock, date](group, stock, date)/
        (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));                                


valueBy 'Продано' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldBy(group, stock, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock
    ;
valueResidentBy 'Продано, бел. пр-ва' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentBy(group, stock, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock
    ;

valueByTo 'Остаток на конец' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumABy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;
valueResidentByTo 'Остаток на конец, бел. пр-ва' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentABy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;

quantitySoldNot 'Продано без группы, шт' (type, stock, dateFrom, dateTo)=
    GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF StatisticGroupType type IS StatisticGroupType AND NOT       
    statistic(type,sku)  BY type, stock, dateFrom, dateTo;  
    
balanceBNot 'Остаток на начало без групп, шт' (type, stock, date)=
    GROUP SUM  balanceB (Sku sku, Stock stock, DATE date) IF StatisticGroupType type IS StatisticGroupType AND NOT       
    statistic(type,sku)  BY type, stock, date;  
balanceANot 'Остаток на конец без групп, шт' (type, stock, date)=
    GROUP SUM  balanceA (Sku sku, Stock stock, DATE date) IF StatisticGroupType type IS StatisticGroupType AND NOT       
    statistic(type,sku)  BY type, stock, date; 
    
backgroundQuantityNot (StatisticGroupType type, Stock stock, DATE dateFrom, DATE dateTo) =  RGB(255,0,0) IF quantitySoldNot(type, stock, dateFrom, dateTo);
backgroundBalanceBNot (StatisticGroupType type, Stock stock, DATE date) =  RGB(255,0,0) IF balanceBNot(type, stock, date);
backgroundBalanceANot (StatisticGroupType type, Stock stock, DATE date) =  RGB(255,0,0) IF balanceANot(type, stock, date);
    
FORM statisticalReport 'Статистика (продажи) склад/группа/sku'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)
    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR name(c)

    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent, ts = Stock
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), name(ts)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT        
            
//    PROPERTIES READONLY 
//               balanceBNotStatisticGroupTypeDate(c,ts,dFrom) BACKGROUND backgroundBalanceBNotStatisticGroup(c,ts,dFrom),
//               quantitySoldNotStatisticGroupTypeDateFromTo(c,ts,dFrom,dTo) BACKGROUND backgroundQuantityNotStatisticGroup(c,ts,dFrom,dTo),
//               balanceANotStatisticGroupTypeDate(c,ts,dTo) BACKGROUND backgroundBalanceANotStatisticGroup(c,ts,dTo)
    
    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES READONLY gname = name(g),  sid(g), nameUOM(g)
    ORDER BY gname
    FILTERS groupType(g) ==c

    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY nameS=name(s), name(st)
    FILTERS           st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(st) 'ctrl F10' DEFAULT
    ORDER BY          nameS
    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(g, s) 'F10' DEFAULT
        FILTER 'Всех потомков' isParent(g, s) 'F9'
        FILTER 'Только непосредственных потомков' parent(c,s) == g 'F8'

    PROPERTIES        balanceB(s, st, dFrom),
                      quantitySold(s, st, dFrom, dTo),
                      balanceA(s, st, dTo)
    PROPERTIES  FORCE PANEL valueBy(g, ts, dFrom, dTo), valueResidentBy(g, ts, dFrom, dTo)
    PROPERTIES  FORCE PANEL valueByTo(g, ts, dTo), valueResidentByTo(g, ts, dTo)
;
@extendFormFilterStockAccess(st, statisticalReport);
@extendFormFilterStockAccess(ts, statisticalReport);
@extendFormFilterStockGroupAccess(sg, statisticalReport);

DESIGN statisticalReport {
    main{
        NEW topContainer{
            type = SPLITH;
            fill = 1;
            NEW firstCase {
                type = SPLITV;
                fill = 1;
                MOVE stockTree.tree.box { caption = 'Склады'; }
                MOVE treeGroups.tree.box { caption = 'Статистические группы'; }
            }

            NEW secondCase {
                fill = 2;
                NEW wor {
                    type = CONTAINERH;
                    MOVE dates.box;
                    MOVE c.box {caption = 'Тип классификатора статистических групп';};
                }
                MOVE sts.box {caption = 'Показатели по продажам в номинальных единицах';}
            }
        }
        NEW row {
            caption = 'Суммы';
            NEW row1 {
                type = CONTAINERH;
                caption = 'По отдел-группа, с учетом ед. изм. и коэфф. перевода';
                MOVE PROPERTY(valueBy(g,ts,dFrom,dTo));
                MOVE PROPERTY(valueResidentBy(g,ts,dFrom,dTo));
                MOVE PROPERTY(valueByTo(g,ts,dTo));
                MOVE PROPERTY(valueResidentByTo(g,ts,dTo));
            }
        }
    }
    MOVE functions.box;
}

                ///////////////--------по регионам и компании----------/////////////////

                           //c коэффициентом пересчета за период//
// всего
quantitySoldBy 'Продано, шт' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) * factor(StatisticGroup group, sku)
        BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
            (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightSoldBy 'Продано, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM netWeightSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeSoldBy 'Продано, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM volumeSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumSoldBy 'Продано, руб.' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

// отечест. производствава
quantitySoldResidentBy 'Продано, шт' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
            (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightSoldResidentBy 'Продано, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM netWeightSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeSoldResidentBy 'Продано, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM volumeSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumSoldResidentBy 'Продано, руб.' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo]
        (group, legalEntity, region, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

                             //с коэффициентом пересчета на коцен//
// всего
balanceABy 'Остаток на конец' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM balanceA (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku)
        BY group, legalEntity(stock), region(stock), date]
            (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightABy 'Вес на конец, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM netWeightBalanceALedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), date]
        (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeABy 'Объем на конец, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM volumeBalanceALedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), date]
        (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumABy 'Сумма на конец, руб' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), date]
        (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
// белорусского производства
balanceResidentABy 'Остаток на конец' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM balanceA (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, legalEntity(stock), region(stock), date]
            (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightResidentABy 'Вес на конец, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM netWeightBalanceALedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), date]
        (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeResidentABy 'Объем на конец, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM volumeBalanceALedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), date]
        (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumResidentABy 'Сумма на конец, руб' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), date]
        (group, legalEntity, region, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

valueBy 'Продано всего' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group) == GroupStatic.statisticThing OR
              unitMeasure(group) == GroupStatic.statisticLinearMeters OR
              unitMeasure(group) == GroupStatic.statisticPair OR
              unitMeasure(group) == GroupStatic.statisticConditionalPiece OR
              unitMeasure(group) == GroupStatic.statisticSquareMeters OR
              unitMeasure(group) == GroupStatic.statisticCubicMeters)
            THEN quantitySoldBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group) == GroupStatic.statisticPounds
            THEN netWeightSoldBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group) == GroupStatic.statisticLiter
            THEN volumeSoldBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group) == GroupStatic.statisticSum
            THEN retailSumSoldBy(group, legalEntity, region, dateFrom, dateTo);

valueByTo 'Остаток на конец всего' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumABy(group, legalEntity, region, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND date IS DATE
    ;

valueResidentBy 'Продано отеч. пр-ва' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region
    ;

valueResidentByTo 'Остаток на конец отеч. пр-ва' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentABy(group, legalEntity, region, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND date IS DATE
    ;

totalSumSoldBy 'Продано, руб.' (group, legalEntity, region, dateFrom, dateTo)=
    GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo;

totalSumResidentSoldBy 'В т.ч.отеч., руб.' (group, legalEntity, region, dateFrom, dateTo)=
    GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateFrom, dateTo;

// суммовые показатели

sumBalanceABy 'Сумма остатка на конец, руб.' (group, legalEntity, region, date) =
    GROUP SUM sumA (Sku sku, Stock stock, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), region(stock), dateTo;


FORM torgSales 'Статистика (продажи) организация/регион/группа'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR name(c)

    OBJECTS l=LegalEntity  FIXED PANEL
    PROPERTIES(l) SELECTOR name

    OBJECTS r=Region  FIXED PANEL
    PROPERTIES(r) SELECTOR name

    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES READONLY gname = name(g), sid(g), nameUOM(g)
    ORDER BY sid(g)

    FILTERS groupType(g) == c

    PROPERTIES(g, l, r, dFrom, dTo) valueBy, valueResidentBy
    PROPERTIES(g, l, r, dTo) valueByTo, valueResidentByTo
    PROPERTIES(g, l, r, dFrom, dTo) totalSumSoldBy
;

DESIGN torgSales {

    main{
        NEW firstCase BEFORE treeGroups.tree.box {
            caption = 'Параметры отчета';
            type = CONTAINERH;
            MOVE c.box;
            NEW dateCase {
                caption = 'Даты';
                type = CONTAINERH;
                MOVE PROPERTY(objFrom) {caption = 'Дата (с)';}
                MOVE PROPERTY(objTo) {caption = 'Дата (по)';}
            }
            MOVE l.box;
            MOVE r.box;
        }
        MOVE treeGroups.tree.box {caption = 'Показатели по стат. группам с учетом ед. изм. и коэфф. перевода';}
        MOVE functions.box;
    }
}

//---------------------------------------------- Статотчет опта в соответствии с законодательством-----------------------------------------------------//

//------------------------------------- остатки и продажи по организациям-------------------------------------//
// всего
quantitySoldBy 'Продано, шт' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) * factor(StatisticGroup group, sku)
        BY group, legalEntity(stock), dateFrom, dateTo]
            (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightSoldBy 'Продано, кг' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM netWeightSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo]
        (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeSoldBy 'Продано, л' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM volumeSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo]
        (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumSoldBy 'Продано, руб.' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo]
        (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

// отечест. производствава
quantitySoldResidentBy 'Продано, шт' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, legalEntity(stock), dateFrom, dateTo]
            (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightSoldResidentBy 'Продано, кг' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM netWeightSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo]
        (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeSoldResidentBy 'Продано, л' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM volumeSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo]
        (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumSoldResidentBy 'Продано, руб.' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo)=
    [= GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo]
        (group, legalEntity, dateFrom, dateTo) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

                             //с коэффициентом пересчета на коцен//
// всего
balanceABy 'Остаток на конец' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM balanceA (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku)
        BY group,legalEntity(stock), date]
            (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightABy 'Вес на конец, кг' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM netWeightBalanceALedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeABy 'Объем на конец, л' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM volumeBalanceALedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumABy 'Сумма на конец, руб' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
// белорусского производства
balanceResidentABy 'Остаток на конец' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM balanceA (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, legalEntity(stock), date]
            (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightResidentABy 'Вес на конец, кг' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM netWeightBalanceALedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeResidentABy 'Объем на конец, л' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM volumeBalanceALedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumResidentABy 'Сумма на конец, руб' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

                             //с коэффициентом пересчета на начало//
// всего
balanceBBy 'Остаток на начало' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM balanceB (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku)
        BY group,legalEntity(stock), date]
            (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightBBy 'Вес на начало, кг' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM netWeightBalanceBLedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeBBy 'Объем на начало, л' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM volumeBalanceBLedger (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumBBy 'Сумма на начало, руб' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM sumB (Sku sku, Stock stock, DATE date) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));
// белорусского производства
balanceResidentBBy 'Остаток на начало' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM balanceB (Sku sku, Stock stock, DATE date) * factor(StatisticGroup group, sku) IF resident (group, sku)
        BY group, legalEntity(stock), date]
            (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

netWeightResidentBBy 'Вес на начало, кг' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM netWeightBalanceBLedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

volumeResidentBBy 'Объем на начало, л' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM volumeBalanceBLedger (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

retailSumResidentBBy 'Сумма на начало, руб' (StatisticGroup group, LegalEntity legalEntity, DATE date)=
    [= GROUP SUM sumB (Sku sku, Stock stock, DATE date) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), date]
        (group, legalEntity, date) / (OVERRIDE 1 IF group IS StatisticGroup, conversionFactor(group));

valueBy 'Продано, ЕИ' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldBy(group, legalEntity, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldBy(group, legalEntity, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldBy(group, legalEntity, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldBy(group, legalEntity, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity
    ;

valueByFrom 'Остаток на начало, ЕИ' (StatisticGroup group, LegalEntity legalEntity, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceBBy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightBBy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeBBy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumBBy(group, legalEntity, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND date IS DATE
    ;

valueResidentByFrom 'В т.ч. отеч., ЕИ' (StatisticGroup group, LegalEntity legalEntity, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentBBy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentBBy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentBBy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentBBy(group, legalEntity, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND date IS DATE
    ;

valueByTo 'Остаток на конец, ЕИ' (StatisticGroup group, LegalEntity legalEntity, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceABy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightABy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeABy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumABy(group, legalEntity, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND date IS DATE
    ;

valueResidentBy 'В т.ч. отеч., ЕИ' (StatisticGroup group, LegalEntity legalEntity, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentBy(group, legalEntity, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentBy(group, legalEntity, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentBy(group, legalEntity, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentBy(group, legalEntity, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity
    ;

valueResidentByTo 'В т.ч. отеч., ЕИ' (StatisticGroup group, LegalEntity legalEntity, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentABy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentABy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentABy(group, legalEntity, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentABy(group, legalEntity, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND date IS DATE
    ;

totalSumSoldBy 'Продано, руб.' (group, legalEntity, dateFrom, dateTo)=
    GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo;

totalSumResidentSoldBy 'В т.ч.отеч., руб.' (group, legalEntity, dateFrom, dateTo)=
    GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, legalEntity(stock), dateFrom, dateTo;

// суммовые показатели
sumBalanceBBy 'Сумма остатка на начало, руб.' (group, legalEntity, date) =
    GROUP SUM sumB (Sku sku, Stock stock, DATE dateFrom) IF isParent(StatisticGroup group, sku)
    BY group,legalEntity(stock), dateFrom;

sumResidentBalanceBBy 'В т.ч.отеч., руб.' (group, legalEntity, date) =
    GROUP SUM sumB (Sku sku, Stock stock, DATE dateFrom) IF resident (StatisticGroup group, sku)
    BY group,legalEntity(stock), dateFrom;

sumBalanceABy 'Сумма остатка на конец, руб.' (group, legalEntity, date) =
    GROUP SUM sumA (Sku sku, Stock stock, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group,legalEntity(stock), dateTo;

sumResidentBalanceABy 'В т.ч.отеч., руб.' (group, legalEntity, date) =
    GROUP SUM sumA (Sku sku, Stock stock, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group,legalEntity(stock), dateTo;


//residentStatisticGroupSku (group, sku) AND

quantitySoldNot 'Продано без группы, шт' (type, legalEntity, dateFrom, dateTo)=
    GROUP SUM quantitySold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF StatisticGroupType type IS StatisticGroupType AND NOT       
    statistic(type, sku) BY type, legalEntity(stock), dateFrom, dateTo;  
    
balanceBNot 'Остаток на начало без групп, шт' (type, legalEntity, date)=
    GROUP SUM  balanceB (Sku sku, Stock stock, DATE date) IF StatisticGroupType type IS StatisticGroupType AND NOT       
    statistic(type,sku)  BY type, legalEntity(stock), date;  
balanceANot 'Остаток на конец без групп, шт' (type, legalEntity, date)=
    GROUP SUM  balanceA (Sku sku, Stock stock, DATE date) IF StatisticGroupType type IS StatisticGroupType AND NOT       
    statistic(type,sku)  BY type, legalEntity(stock), date; 
    
backgroundQuantityNot (StatisticGroupType type, LegalEntity legalEntity, DATE dateFrom, DATE dateTo) =  RGB(255,0,0) IF quantitySoldNot(type, legalEntity, dateFrom, dateTo);
backgroundBalanceBNot (StatisticGroupType type, LegalEntity legalEntity, DATE date) =  RGB(255,0,0) IF balanceBNot(type, legalEntity, date);
backgroundBalanceANot (StatisticGroupType type, LegalEntity legalEntity, DATE date) =  RGB(255,0,0) IF balanceANot(type, legalEntity, date);

FORM statisticalLegalEntityReport 'Статистический отчет по организации'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR name(c)

    OBJECTS l=LegalEntity  FIXED PANEL
    PROPERTIES(l) SELECTOR name      
    
    PROPERTIES READONLY balanceBNot(c,l,dFrom) BACKGROUND backgroundBalanceBNot(c,l,dFrom),
               quantitySoldNot(c,l,dFrom, dTo) BACKGROUND backgroundQuantityNot(c,l,dFrom, dTo),
               balanceANot(c,l,dTo) BACKGROUND backgroundBalanceANot(c,l,dTo)    
    FILTERS isCompany(l)
    
    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES READONLY gname = name(g), sid(g), nameUOM(g)
    ORDER BY sid(g)

    FILTERS groupType(g) == c

    PROPERTIES(g, l, dFrom) READONLY valueByFrom, valueResidentByFrom,
                                     sumBalanceBBy, sumResidentBalanceBBy
    PROPERTIES(g, l, dFrom, dTo) READONLY valueBy, valueResidentBy,
                                          totalSumSoldBy, totalSumResidentSoldBy
    PROPERTIES(g, l, dTo) READONLY valueByTo, valueResidentByTo,
                                   sumBalanceABy, sumResidentBalanceABy
;

DESIGN statisticalLegalEntityReport {
    main{
        NEW firstCase BEFORE treeGroups.tree.box {
            caption = 'Параметры отчета';
            type = CONTAINERV;
            NEW row {
                type = CONTAINERH;
                MOVE c.box;
                NEW dateCase {
                    caption = 'Даты';
                    type = CONTAINERH;
                    MOVE PROPERTY(objFrom) {caption = 'Дата (с)';}
                    MOVE PROPERTY(objTo) {caption = 'Дата (по)';}
                }             
            }
            MOVE l.box;
        }
        MOVE functions.box;
    }
}

//------------------------------------- остатки и продажи по складу-------------------------------------//

                             //с коэффициентом пересчета на коцен//
valueByFrom 'Остаток на начало, ЕИ' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumBBy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;

valueResidentByFrom 'В т.ч. отеч., ЕИ' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentBBy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;

//valueByStatisticGroupStockDateTo 'Остаток на конец, ЕИ' (group, stock, date) =
//    CASE
//        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
//            THEN balanceAByStatisticGroupDate(group, stock, date)
//        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
//            THEN netWeightAByStatisticGroupDate(group, stock, date)
//        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
//            THEN volumeAByStatisticGroupDate(group, stock, date)
//        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
//            THEN retailSumAByStatisticGroupDate(group, stock, date)
//        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
//    ;
//
//valueResidentByStatisticGroupStockDateTo 'В т.ч. отеч., ЕИ' (group, stock, date) =
//    CASE
//        WHEN (unitMeasureStatisticGroup(group)==GroupStatic.statisticThing OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticLinearMeters OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticPair OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticConditionalPiece OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticSquareMeters OR
//             unitMeasureStatisticGroup(group)==GroupStatic.statisticCubicMeters)
//            THEN balanceResidentAByStatisticGroupDate(group, stock, date)
//        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticPounds
//            THEN netWeightResidentAByStatisticGroupDate(group, stock, date)
//        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticLiter
//            THEN volumeResidentAByStatisticGroupDate(group, stock, date)
//        WHEN unitMeasureStatisticGroup(group)==GroupStatic.statisticSum
//            THEN retailSumResidentAByStatisticGroupDate(group, stock, date)
//        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
//    ;

totalSumSoldBy 'Продано, руб.' (group, stock, dateFrom, dateTo)=
    GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo;

totalSumResidentSoldBy 'В т.ч.отеч., руб.' (group, stock, dateFrom, dateTo)=
    GROUP SUM sumSold (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, stock, dateFrom, dateTo;

// суммовые показатели
sumBalanceBBy 'Сумма остатка на начало, руб.' (group, stock, date) =
    GROUP SUM sumB (Sku sku, Stock stock, DATE dateFrom) IF isParent(StatisticGroup group, sku)
    BY group, stock, dateFrom;

sumResidentBalanceBBy 'В т.ч.отеч., руб.' (group, stock, date) =
    GROUP SUM sumB (Sku sku, Stock stock, DATE dateFrom) IF resident (StatisticGroup group, sku)
    BY group, stock, dateFrom;

sumBalanceABy 'Сумма остатка на конец, руб.' (group, stock, date) =
    GROUP SUM sumA (Sku sku, Stock stock, DATE dateTo) IF isParent(StatisticGroup group, sku)
    BY group, stock, dateTo;

sumResidentBalanceABy 'В т.ч.отеч., руб.' (group, stock, date) =
    GROUP SUM sumA (Sku sku, Stock stock, DATE dateTo) IF resident (StatisticGroup group, sku)
    BY group, stock, dateTo;


//residentStatisticGroupSku (group, sku) AND

FORM statisticalStockReport 'Статистический отчет по складу'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR name(c)

    OBJECTS s=Stock  FIXED PANEL
    PROPERTIES(s) SELECTOR name
    FILTERS isCompany(s)
    PROPERTIES READONLY 
               balanceBNot(c,s,dFrom) BACKGROUND backgroundBalanceBNot(c,s,dFrom),
               quantitySoldNot(c,s,dFrom,dTo) BACKGROUND backgroundQuantityNot(c,s,dFrom,dTo),
               balanceANot(c,s,dTo) BACKGROUND backgroundBalanceANot(c,s,dTo)    

    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES READONLY gname = name(g), sid(g), nameUOM(g)
    ORDER BY sid(g)

    FILTERS groupType(g) == c

    PROPERTIES(g, s, dFrom) READONLY valueByFrom, valueResidentByFrom,
                                     sumBalanceBBy, sumResidentBalanceBBy
    PROPERTIES(g, s, dFrom, dTo) READONLY valueBy, valueResidentBy,
                                          totalSumSoldBy, totalSumResidentSoldBy
    PROPERTIES(g, s, dTo) READONLY valueByTo, valueResidentByTo,
                                   sumBalanceABy, sumResidentBalanceABy
                                   
                                   
OBJECTS gg=StatisticGroup                                   
    PROPERTIES READONLY nameLevel4(gg), sid(gg), nameUOM(gg)    
       
    PROPERTIES(gg, s, dFrom) READONLY valueByFrom, valueResidentByFrom,
                                     sumBalanceBBy, sumResidentBalanceBBy
    PROPERTIES(gg, s, dFrom, dTo) READONLY valueBy, valueResidentBy,
                                          totalSumSoldBy, totalSumResidentSoldBy
    PROPERTIES(gg, s, dTo) READONLY valueByTo, valueResidentByTo,
                                   sumBalanceABy, sumResidentBalanceABy  
    PROPERTIES READONLY canonicalOrderSort(gg)                                          
    ORDER BY canonicalOrderSort(gg)                                                                    
    FILTERS groupType(gg) == c                                                                   
                                  
;

DESIGN statisticalStockReport {
    main{
        NEW firstCase {
            caption = 'Параметры отчета';
            type = CONTAINERV;
            NEW top {
                type = CONTAINERH;
                MOVE c.box;
                NEW dateCase {
                    caption = 'Даты';
                    type = CONTAINERH;
                    MOVE PROPERTY(objFrom) {caption = 'Дата (с)';}
                    MOVE PROPERTY(objTo) {caption = 'Дата (по)';}
                }             
            }
            MOVE s.box;
        }
        NEW row {
            fill = 1;
            type = TABBED;
            MOVE treeGroups.tree.box;
            MOVE  gg.box {
                caption = 'Таблица';    
            }
        }
        MOVE functions.box;
    }
}

FORM statisticalStockReportPrint 'Статистический отчет по складу'
    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR name(c)
    PROPERTIES() currentDateTime
    OBJECTS s=Stock  FIXED PANEL
    PROPERTIES(s) SELECTOR name
    
    OBJECTS gg=StatisticGroup                                   
    PROPERTIES READONLY nameLevel4(gg), sid(gg), nameUOM(gg)    

    PROPERTIES(gg, s, dFrom) READONLY valueByFrom, valueResidentByFrom,
                                     sumBalanceBBy, sumResidentBalanceBBy
    PROPERTIES(gg, s, dFrom, dTo) READONLY valueBy, valueResidentBy,
                                          totalSumSoldBy, totalSumResidentSoldBy
    PROPERTIES(gg, s, dTo) READONLY valueByTo, valueResidentByTo,
                                   sumBalanceABy, sumResidentBalanceABy
    PROPERTIES READONLY canonicalOrderSort(gg), level(gg)
    ORDER BY canonicalOrderSort(gg)                                                                    
    FILTERS groupType(gg) == c                                                                   
                                  
;

printStatisticalReport 'Статистический отчет по складу' (StatisticGroupType c, Stock s, DATE dFrom, DATE dTo) = ACTION FORM statisticalStockReportPrint OBJECTS c = c , s = s, dFrom = dFrom, dTo = dTo PRINT IMAGE 'print.png' IN print;
printXLSStatisticalReport 'Статистический отчет по складу (XLS)' (StatisticGroupType c, Stock s, DATE dFrom, DATE dTo) = ACTION FORM statisticalStockReportPrint OBJECTS c = c , s = s, dFrom = dFrom, dTo = dTo PRINT XLS IMAGE 'print.png' IN print;

FORM statisticalReports 'Статистические отчеты'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS c = StatisticGroupType FIXED PANEL
    PROPERTIES SELECTOR name(c)

    OBJECTS s=Stock  FIXED PANEL
    PROPERTIES(s) SELECTOR name
    FILTERS isCompany(s)
    
    PROPERTIES printXLSStatisticalReport(c, s, dFrom, dTo), printStatisticalReport(c, s, dFrom, dTo)
;

DESIGN statisticalReports {
    NEW firstCase {
        caption = 'Параметры отчета';
        type = CONTAINERV;
            NEW top {
            type = CONTAINERV;
            MOVE c.box;
                NEW dateCase {
                caption = 'Даты';
                type = CONTAINERH;
                MOVE PROPERTY(objFrom) {caption = 'Дата (с)';}
                MOVE PROPERTY(objTo) {caption = 'Дата (по)';}
                }
            MOVE s.box;
        }
    }
    MOVE s.print;
    MOVE functions.box;
}

   
//---------------------------------------------- Автоматическое заполнение -----------------------------------------------------//

loadDefaultStatisticGroupType 'Добавить значение классификатора стат.групп' = ACTION (VARISTRING[100] iname, VARSTRING[20] isid, STRING[3] isidCountry) {
    FOR ADDOBJ t = StatisticGroupType DO {
        ASSIGN name(t) <- iname;
        ASSIGN id (t) <- isid;
        ASSIGN country(t) <- country(isidCountry);
    }
}

loadDefaultStatistic 'Добавить значение статистические группы' = ACTION (VARSTRING[20] sidType, STRING[12] sidParent, VARISTRING[250] iname, STRING[12] isid, GroupStatic groupStatic, value) {
    FOR ADDOBJ g = StatisticGroup DO {
        ASSIGN groupType(g) <- statisticGroupTypeId(sidType);
        ASSIGN parent(g) <- groupIdTypeIdGroup(sidType, sidParent);

        ASSIGN name(g) <- iname;
        ASSIGN sid(g) <- isid;
        ASSIGN unitMeasure(g) <- groupStatic;
        ASSIGN conversionFactor(g) <- NUMERIC[14,5](value);
    }
}

loadDefaultResidentCountry 'Добавить отеч. производ' = ACTION (STRING[3] idCountry, STRING[3] idCountry2)  {
    ASSIGN resident(Country a,Country b) <- TRUE WHERE a == country(idCountry) AND b == country(idCountry2);
}

loadDefaultStatisticGroups 'Загрузить стандартные статистические группы и классификатор' () = ACTION ABSTRACT LIST ()  IN loadDefault;
@implementLoadDefaultData(loadDefaultStatisticGroups);

NAVIGATOR {
    saleNavigator {
        NEW statisticsNavigator 'Статистика' BEFORE saleMasterData {
            ADD statisticGroupTypes;
            ADD statisticGroups;
            ADD groupStatics;
            //ADD statisticalReport;
            //ADD torgSales;
            ADD statisticalLegalEntityReport;
            ADD statisticalStockReport;
            ADD statisticalReports;
        }
    }
}