MODULE SaleStatistics;

REQUIRE System, Utils, Historizable, Stock, LegalEntity, SaleLedger, Sale, Integration;

NAMESPACE Sale;

// ----------------------------------- Статистический классификатор ------------------------------------------ //
CLASS StatisticGroupType 'Тип классификатора статистических групп' : GroupType;
TABLE statisticGroupType (StatisticGroupType);

country = DATA Country (StatisticGroupType);
nameCountry 'Страна' (StatisticGroupType type)= name(country(type)) IN base;

name 'Наименование' = DATA VARISTRING[100](StatisticGroupType);

id 'Идентификатор' = DATA VARSTRING[20] (StatisticGroupType) CHARWIDTH 3;

statisticGroupTypeId (string1) = GROUP
    BY id(StatisticGroupType type) AGGR type WHERE type IS StatisticGroupType;

FORM statisticGroupType 'Тип классификатора статистических групп'
    OBJECTS t = StatisticGroupType PANEL
    PROPERTIES(t) name, id, nameCountry
    EDIT StatisticGroupType OBJECT t
;

FORM dialogStatisticGroupType 'Тип статистической группы'
    OBJECTS t = StatisticGroupType
    PROPERTIES(t) READONLY name, id, nameCountry
    LIST StatisticGroupType OBJECT t
;

FORM statisticGroupTypes 'Типы статистических групп'
    OBJECTS t = StatisticGroupType
    PROPERTIES(t) READONLY name, id, nameCountry
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
;

defaultStatisticGroupType = DATA StatisticGroupType();
nameDefaultStatisticGroupType 'Тип статистического классификатора по умолчанию' () = name(defaultStatisticGroupType());
EXTEND FORM options
    PROPERTIES nameDefaultStatisticGroupType();
    
DESIGN options{
    sale{
        MOVE PROPERTY (nameDefaultStatisticGroupType());
    }
}

CLASS StatisticGroup 'Статистическая группа': Group;
TABLE statisticGroup(StatisticGroup);

name 'Наименование' = DATA VARISTRING[250](StatisticGroup) CHARWIDTH 30;

CLASS GroupStatic 'Ед. изм.' {
    statisticLiter 'Литр',
    statisticThing 'Штука',
    statisticPounds 'Килограмм',
    statisticSum 'Валюта',
    statisticLinearMeters 'Пог. м',
    statisticPair 'Пара',
    statisticConditionalPiece 'Усл. кус.',
    statisticSquareMeters 'Квадратный м',
    statisticCubicMeters 'Кубический м'
}
FORM groupStaticsDialog 'Ед. изм. статистики'
    OBJECTS g = GroupStatic
    PROPERTIES(g) READONLY staticCaption
    LIST GroupStatic OBJECT g
;

TABLE groupStaticUOM (GroupStatic, UOM);
factor 'Коэффициент перевода' = DATA NUMERIC[14,3] (GroupStatic, UOM);

FORM groupStatics 'Конвертация статистических ед. изм.'
    OBJECTS g=GroupStatic PANEL
    PROPERTIES(g) SELECTOR staticCaption

    OBJECTS u=UOM
    PROPERTIES   name(u) READONLY, shortName(u) READONLY, factor(g,u)

    FILTERGROUP batch
        FILTER 'Ед.изм. с коэфф.' factor(g,u) 'F11'
;

TABLE statisticGroupStatisticGroup(StatisticGroup, StatisticGroup);
@defineHierarchy(statisticGroup);

groupType = DATA StatisticGroupType (StatisticGroup) AUTOSET NONULL DELETE;
nameGroupType 'Тип классификатора' (StatisticGroup group) = name(groupType(group));
countStatisticGroups 'Ко-во групп' (type) = GROUP BY groupType(StatisticGroup g) SUM 1;
country = country(groupType(StatisticGroup group));
nameCountry 'Страна' (StatisticGroup statisticGroup)= name(country(statisticGroup)) IN base;

unitMeasure 'Ед. изм. ИД' (statisticGroup) = DATA GroupStatic (StatisticGroup);
nameUOM 'Ед. изм.' (StatisticGroup statisticGroup) = staticCaption(unitMeasure(statisticGroup)) FIXEDCHARWIDTH 15;

dataNameReportUOM 'Ед. изм. для отчёта' = DATA VARISTRING[100](StatisticGroup);
nameReportUOM 'Ед. изм. для отчёта' (StatisticGroup statisticGroup) = OVERRIDE dataNameReportUOM(statisticGroup), nameUOM(statisticGroup) FIXEDCHARWIDTH 15; 

sid 'Код группы' (statisticGroup) = DATA STRING[12] (StatisticGroup)  FIXEDCHARWIDTH 12;
canonicalNumber 'Канонический код' (StatisticGroup statisticGroup) = VARSTRING[255](
                           [= GROUP CONCAT sid(StatisticGroup parent), ' / ' ORDER DESC level(statisticGroup, parent)]())
                           CHARWIDTH 50 MATERIALIZED;

canonicalNumberName 'Канонический код-название' (StatisticGroup statisticGroup) = CONCAT ' / ', canonicalNumber(statisticGroup), name(statisticGroup) CHARWIDTH 30;

groupIdTypeIdGroup (string1, string2) = GROUP
    BY id(groupType(StatisticGroup group)), sid(group) AGGR group WHERE group IS StatisticGroup;

sidParent 'Код родительского объекта' (StatisticGroup statisticGroup) = sid(parent(statisticGroup));

conversionFactor 'Коэффициент перевода' (statisticGroup) = DATA NUMERIC[14,5] (StatisticGroup);

id(StatisticGroup g) += VARSTRING[100](sid(g)) IF g IS StatisticGroup; 

sort = OVERRIDE lpad(VARSTRING[250](sid(StatisticGroup g)), 20, '0'), name(g);  

orderSort 'Порядок (внутри группы)' (StatisticGroup g) = PARTITION BY groupType(g), parent(g) SUM 1 ORDER sort(g);
canonicalOrderSort 'Порядок (полный)' (StatisticGroup g) = VARSTRING[250]([ = GROUP CONCAT lpad(VARSTRING[3](orderSort(StatisticGroup parent)), 3, '0') , '.' ORDER DESC level(g, parent)]());
nameLevel4 'Наименование (со сдвигом)' (StatisticGroup g) = VARSTRING[100](repeat('    ', INTEGER(level(g))-1)) + name(g);



FORM statisticGroup 'Статистическая группа'
    OBJECTS g=StatisticGroup PANEL
    PROPERTIES(g)   nameGroupType, nameStat=name, nameParent, sidParent,
                    sid, nameUOM,conversionFactor

    EDIT StatisticGroup OBJECT g
;
DESIGN statisticGroup {
        GROUP(,g) {
            columns = 3;
        }
    MOVE TOOLBARBOX;
}

add 'Добавить'(StatisticGroup group, StatisticGroupType type) = {
	NEWSESSION {
	    NEW g = StatisticGroup {
	        parent(g) <- group;
	        groupType(g) <- type;
	        SHOW statisticGroup OBJECTS g = g DOCKED NOCANCEL;
	    }
	}
} TOOLBAR IMAGE 'add.png' CHANGEKEY 'INSERT';

add 'Добавить' (StatisticGroup group)= { add(group, groupType(group)); } TOOLBAR IMAGE 'add.png' CHANGEKEY 'INSERT';

TABLE statisticGroupTypeSku (StatisticGroupType, Sku);
statistic = ABSTRACT StatisticGroup (StatisticGroupType, Sku) MATERIALIZED;
name 'Статистическая группа' = name(statistic(StatisticGroupType type, Sku sku));

TABLE statisticGroupSku(StatisticGroup, Sku);
isParent (StatisticGroup group, Sku sku) = isParent(statistic(groupType(group),sku), group) MATERIALIZED;
isParentLeaf (StatisticGroup group, Sku sku) = isParentLeaf(statistic(groupType(group),sku), group) MATERIALIZED;
parent (StatisticGroupType type, Sku sku) = parent(statistic(type,sku)) MATERIALIZED;

resident 'Отечественный производитель' =  DATA BOOLEAN (Country, Country);
resident (StatisticGroup group, Sku sku) = resident(country(groupType(group)), country(sku)) AND isParent(group, sku) MATERIALIZED;
showAdd = StatisticGroupType t IS StatisticGroupType AND NOT (countStatisticGroups(t));

FORM statisticGroups 'Статистические группы'

    OBJECTS ss=Country PANEL
    PROPERTIES(ss) SELECTOR name

    OBJECTS c=StatisticGroupType PANEL
    PROPERTIES(c) SELECTOR name
    FILTERS country(c) == ss

    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES READONLY name(g), sid(g)
    PROPERTIES(g,c)       add SHOWIF countStatisticGroups(c)
    PROPERTIES(g) NEWSESSION EDIT, NEW SHOWIF showAdd(c)
    ORDER sid(g)

    OBJECTS cg=StatisticGroup
    PROPERTIES(cg)     READONLYIF isReadonly() canonicalNumberName, sid, nameUOM, nameReportUOM,
                       conversionFactor
    PROPERTIES(cg)     NEWSESSION DELETE 

    FILTERS groupType(g) == c,
            groupType(cg) == c

    OBJECTS s = Country

    PROPERTIES(s) READONLY name, nameOrigin, sid, sidOrigin2, sidOrigin3,
                           nameCurrency, nameLanguage
    PROPERTIES(ss,s) resident
    FILTERGROUP filter
        FILTER 'Страны явл. отечественными' resident(ss, s) 'F11' DEFAULT

    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(cg, g) 'F10' DEFAULT
        FILTER 'Всех потомков' isParent(cg, g) 'F9'
        FILTER 'Только непосредственных потомков' parent(cg) == g 'F8'
;

DESIGN statisticGroups {
    BOX {
        NEW header {
            type = CONTAINERH;
            MOVE BOX(ss);
            MOVE BOX(c);
        }
        NEW specificationBox {
            type = TABBED;
            fill = 1;
            NEW topContainer{
                caption = 'Статистические группы';
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE treeGroups);
                MOVE BOX(cg){fill = 4;}
            }
            MOVE BOX(s) {caption = 'Страны являющиеся отечественными';}
        }
    }
    MOVE TOOLBARBOX;
}
@extendFormEditable(statisticGroups);
FORM statisticGroupDialog 'Статистические группы'
    OBJECTS c=StatisticGroupType PANEL
    PROPERTIES(c) SELECTOR name

    TREE treeGroups g=StatisticGroup PARENT parent
    PROPERTIES(g) READONLY name, nameUOM, sid, canonicalNumber
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE 
    FILTERS groupType(g) == c
    ORDER canonicalNumber(g)
    
    OBJECTS s = StatisticGroup
    PROPERTIES(s) READONLY name, nameUOM, sid, canonicalNumber 
    PROPERTIES(s) NEWSESSION add = NEW, EDIT, DELETE 
    FILTERS isParent(s,g)
    ORDER canonicalNumber(s)
    
    LIST StatisticGroup OBJECT s
;
DESIGN statisticGroupDialog {
    BOX {
        size = (1024, 768);
        OBJECTS {
            NEW top {
                fill = 1;
                type = SPLITH;
                MOVE BOX(TREE treeGroups);
                MOVE BOX(s){fill = 2;}
            }
        }
    }
}

//---------------------------------------------- Отображение в форме товаров -------------------------------------//

parent (StatisticGroup statisticGroup) += parent(statisticGroup);
name (StatisticGroup statisticGroup) += name(statisticGroup);
name (StatisticGroupType statisticGroupType) += name (statisticGroupType);
groupType (StatisticGroup statisticGroup) += groupType (statisticGroup);
group (StatisticGroupType statisticGroupType, Sku sku) += WHEN CLASS(statistic (statisticGroupType, sku)) THEN statistic (statisticGroupType, sku);


skipStatistic 'Исключить из розн. статистики' = ABSTRACT VALUE BOOLEAN (SaleLedger) MATERIALIZED;

quantitySoldStatistic(sku, stock, dateFrom, dateTo) = GROUP
        BY sku(SaleLedger ledger), stock(ledger), DATE df, DATE dt SUM quantity(ledger) 
    IF active(ledger) AND NOT skipStatistic(ledger) AND date(ledger) >= df AND date(ledger) <= dt;
sumSoldStatistic(sku, stock, dateFrom, dateTo) = GROUP
        BY sku(SaleLedger ledger), stock(ledger), DATE df, DATE dt SUM sum(ledger) 
    IF active(ledger) AND NOT skipStatistic(ledger) AND date(ledger) >= df AND date(ledger) <= dt;
        
netWeightSoldStatistic 'Вес проданного товара, кг' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =
    quantitySoldStatistic(sku, stock, dateFrom, dateTo) * netWeight(sku);
volumeSoldStatistic 'Объем проданного товара, л' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =
    quantitySoldStatistic(sku, stock, dateFrom, dateTo) * volume(sku);

//---------------------------------------------- Формы стат. отчетов -------------------------------------//

//  12 ТОРГ ПРОДАЖИ

//netWeightSold 'Вес проданного товара, кг' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =
//    quantitySold(sku, stock, dateFrom, dateTo) * netWeight(sku);
//volumeSold 'Объем проданного товара, л' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =
//    quantitySold(sku, stock, dateFrom, dateTo) * volume(sku);
// sumSoldSkuStockDateFromTo 'Продано, сумма' (sku, stock, dateFrom, dateTo)   - рубли
//quantitySoldSkuStockDateFromTo (sku, stock, dateFrom, dateTo)                      - шт.

                            //с коэффициентом пересчета за период//
//всего
overFactor = ABSTRACT NUMERIC[14,3] (GroupStatic, Sku);

factor = (NUMERIC[20,8](OVERRIDE overFactor(unitMeasure(StatisticGroup group), Sku sku), 1.0) /
    (OVERRIDE factor(unitMeasure(group), UOM(sku)), 1 IF group IS StatisticGroup AND sku IS Sku)) IF
    isParent(group, sku) MATERIALIZED;

quantitySoldBy 'Продано, шт' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP 
    SUM quantitySoldStatistic (Sku sku, stock, dateFrom, dateTo) * factor(group, sku)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightSoldBy 'Продано, кг' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM netWeightSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeSoldBy 'Продано, л' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM volumeSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumSoldBy 'Продано, сум.' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

//отечеств. пр-ва
quantitySoldResidentBy 'Продано, шт' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
        SUM quantitySoldStatistic (Sku sku, stock, dateFrom, dateTo) * factor(group, sku) IF resident (group, sku)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightSoldResidentBy 'Продано, кг' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM netWeightSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeSoldResidentBy 'Продано, л' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM volumeSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumSoldResidentBy 'Продано, сум.' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
//-- на конец
netWeightBalanceALedger 'Вес товара на конец , кг' (Sku sku, Stock stock, DATE date) =
    balanceA (sku, stock, date) * netWeight(sku);
volumeBalanceALedger 'Объем товара на конец , л' (Sku sku, Stock stock, DATE date) =
    balanceA (sku, stock, date) * volume(sku);

//-- на начало
netWeightBalanceBLedger 'Вес товара на начало , кг' (Sku sku, Stock stock, DATE date) =
    balanceB (sku, stock, date) * netWeight(sku);
volumeBalanceBLedger 'Объем товара на начало , л' (Sku sku, Stock stock, DATE date) =
    balanceB (sku, stock, date) * volume(sku);
    
//sumASkuStockDate (sku, stock, dateTo) -  сумма на конец

//retailSumBalanceASkuLedgerDate 'Сумма товара на конец , сум.' (sku, stock, dateTo) =
//    retailPriceASkuStockDate (sku, stock, dateTo) * balanceASkuStockDate(sku, stock, dateTo);
//balanceASkuStockDate (sku, stock, dateTo)    - шт.

                                   //с коэффициентом пересчета на конец//
// всего
balanceABy 'Остаток на конец' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
        SUM balanceA (Sku sku, stock, date) * factor(group, sku)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightABy 'Вес на конец, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM netWeightBalanceALedger (Sku sku, stock, date) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeABy 'Объем на конец, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM volumeBalanceALedger (Sku sku, stock, date) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumABy 'Сумма на конец, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM sumA (Sku sku, stock, date) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
        
// отечеств. пр-ва
balanceResidentABy 'Остаток на конец' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
        SUM balanceA (Sku sku, stock, date) * factor(group, sku) IF resident (group, sku)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightResidentABy 'Вес на конец, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM netWeightBalanceALedger (Sku sku, stock, date) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeResidentABy 'Объем на конец, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM volumeBalanceALedger (Sku sku, stock, date) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumResidentABy 'Сумма на конец, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM sumA (Sku sku, stock, date) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);        
        
                                   //с коэффициентом пересчета на начало//
// всего
balanceBBy 'Остаток на начало' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
        SUM balanceB (Sku sku, stock, date) * factor(group, sku)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);        
netWeightBBy 'Вес на начало, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM netWeightBalanceBLedger (Sku sku, stock, date) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);   
volumeBBy 'Объем на начало, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM volumeBalanceBLedger (Sku sku, stock, date) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);   
retailSumBBy 'Сумма на начало, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM sumB (Sku sku, stock, date) IF isParent(group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);                  
                  

// отечеств. пр-ва
balanceResidentBBy 'Остаток на начало' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
        SUM balanceB (Sku sku, stock, date) * factor(group, sku) IF resident (group, sku)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightResidentBBy 'Вес на начало, кг' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM netWeightBalanceBLedger (Sku sku, stock, date) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeResidentBBy 'Объем на начало, л' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM volumeBalanceBLedger (Sku sku, stock, date) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumResidentBBy 'Сумма на начало, сум.' (StatisticGroup group, Stock stock, DATE date)=
    [= GROUP
    SUM sumB (Sku sku, stock, date) IF resident (group, sku)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);                                


valueBy 'Продано' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldBy(group, stock, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock
    ;
valueResidentBy 'Продано, бел. пр-ва' (StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentBy(group, stock, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentBy(group, stock, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock
    ;

valueByTo 'Остаток на конец' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumABy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;
valueResidentByTo 'Остаток на конец, бел. пр-ва' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentABy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentABy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;


                ///////////////--------по регионам и компании----------/////////////////

                           //c коэффициентом пересчета за период//
// всего
quantitySoldBy 'Продано, шт' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
        BY legalEntity(Stock stock), region(stock) SUM quantitySoldStatistic (Sku sku, stock, dateFrom, dateTo) * factor(group, sku)]
            (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

netWeightSoldBy 'Продано, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM netWeightSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

volumeSoldBy 'Продано, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM volumeSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

retailSumSoldBy 'Продано, руб.' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

// отечест. производствава
quantitySoldResidentBy 'Продано, шт' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
        BY legalEntity(Stock stock), region(stock) SUM quantitySoldStatistic (Sku sku, stock, dateFrom, dateTo) * factor(group, sku) IF resident (group, sku)]
            (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

netWeightSoldResidentBy 'Продано, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM netWeightSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

volumeSoldResidentBy 'Продано, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM volumeSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

retailSumSoldResidentBy 'Продано, руб.' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

                             //с коэффициентом пересчета на коцен//
// всего
balanceABy 'Остаток на конец' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
        BY legalEntity(Stock stock), region(stock) SUM balanceA (Sku sku, stock, date) * factor(group, sku)]
            (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

netWeightABy 'Вес на конец, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM netWeightBalanceALedger (Sku sku, stock, date) IF isParent(group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

volumeABy 'Объем на конец, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM volumeBalanceALedger (Sku sku, stock, date) IF isParent(group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

retailSumABy 'Сумма на конец, руб' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM sumA (Sku sku, stock, date) IF isParent(group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
// белорусского производства
balanceResidentABy 'Остаток на конец' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
        BY legalEntity(Stock stock), region(stock) SUM balanceA (Sku sku, stock, date) * factor(group, sku) IF resident (group, sku)]
            (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

netWeightResidentABy 'Вес на конец, кг' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM netWeightBalanceALedger (Sku sku, stock, date) IF resident (group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

volumeResidentABy 'Объем на конец, л' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM volumeBalanceALedger (Sku sku, stock, date) IF resident (group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

retailSumResidentABy 'Сумма на конец, руб' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date)=
    [= GROUP
    BY legalEntity(Stock stock), region(stock) SUM sumA (Sku sku, stock, date) IF resident (group, sku)]
        (legalEntity, region) / (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

valueBy 'Продано всего' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group) == GroupStatic.statisticThing OR
              unitMeasure(group) == GroupStatic.statisticLinearMeters OR
              unitMeasure(group) == GroupStatic.statisticPair OR
              unitMeasure(group) == GroupStatic.statisticConditionalPiece OR
              unitMeasure(group) == GroupStatic.statisticSquareMeters OR
              unitMeasure(group) == GroupStatic.statisticCubicMeters)
            THEN quantitySoldBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group) == GroupStatic.statisticPounds
            THEN netWeightSoldBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group) == GroupStatic.statisticLiter
            THEN volumeSoldBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group) == GroupStatic.statisticSum
            THEN retailSumSoldBy(group, legalEntity, region, dateFrom, dateTo);

valueByTo 'Остаток на конец всего' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumABy(group, legalEntity, region, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND date IS DATE
    ;

valueResidentBy 'Продано отеч. пр-ва' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentBy(group, legalEntity, region, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region
    ;

valueResidentByTo 'Остаток на конец отеч. пр-ва' (StatisticGroup group, LegalEntity legalEntity, Region region, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentABy(group, legalEntity, region, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentABy(group, legalEntity, region, date)
        ELSE 0 IF group IS StatisticGroup AND legalEntity IS LegalEntity AND region IS Region AND date IS DATE
    ;

totalSumSoldBy 'Продано, руб.' (group, legalEntity, region, dateFrom, dateTo)=
    GROUP
    BY StatisticGroup group, legalEntity(Stock stock), region(stock), DATE dateFrom, DATE dateTo SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku);

totalSumResidentSoldBy 'В т.ч.отеч., руб.' (group, legalEntity, region, dateFrom, dateTo)=
    GROUP
    BY StatisticGroup group, legalEntity(Stock stock), region(stock), DATE dateFrom, DATE dateTo SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku);

// суммовые показатели

sumBalanceABy 'Сумма остатка на конец, руб.' (group, legalEntity, region, date) =
    GROUP
    BY StatisticGroup group, legalEntity(Stock stock), region(stock), DATE dateTo SUM sumA (Sku sku, stock, dateTo) IF isParent(group, sku);


//------------------------------------- остатки и продажи по складу-------------------------------------//

                             //с коэффициентом пересчета на коцен//
valueByFrom 'Остаток на начало, ЕИ' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumBBy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;

valueResidentByFrom 'В т.ч. отеч., ЕИ' (StatisticGroup group, Stock stock, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentBBy(group, stock, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentBBy(group, stock, date)
        ELSE 0 IF group IS StatisticGroup AND stock IS Stock AND date IS DATE
    ;


totalSumSoldBy 'Продано, руб.' (group, stock, dateFrom, dateTo)=
    GROUP
    BY StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku);

totalSumResidentSoldBy 'В т.ч.отеч., руб.' (group, stock, dateFrom, dateTo)=
    GROUP
    BY StatisticGroup group, Stock stock, DATE dateFrom, DATE dateTo SUM sumSoldStatistic (Sku sku, stock, dateFrom, dateTo) IF resident (group, sku);

// суммовые показатели
sumBalanceBBy 'Сумма остатка на начало, руб.' (group, stock, date) =
    GROUP
    BY StatisticGroup group, Stock stock, DATE dateFrom SUM sumB (Sku sku, stock, dateFrom) IF isParent(group, sku);

sumResidentBalanceBBy 'В т.ч.отеч., руб.' (group, stock, date) =
    GROUP
    BY StatisticGroup group, Stock stock, DATE dateFrom SUM sumB (Sku sku, stock, dateFrom) IF resident (group, sku);

sumBalanceABy 'Сумма остатка на конец, руб.' (group, stock, date) =
    GROUP
    BY StatisticGroup group, Stock stock, DATE dateTo SUM sumA (Sku sku, stock, dateTo) IF isParent(group, sku);

sumResidentBalanceABy 'В т.ч.отеч., руб.' (group, stock, date) =
    GROUP
    BY StatisticGroup group, Stock stock, DATE dateTo SUM sumA (Sku sku, stock, dateTo) IF resident (group, sku);


skipPrint = ABSTRACT CASE BOOLEAN (Stock);
showPrint (Stock st) = st IS Stock AND NOT skipPrint(st);

 
//---------------------------------------------- Автоматическое заполнение -----------------------------------------------------//

loadDefaultStatisticGroupType 'Добавить значение классификатора стат.групп'(VARISTRING[100] iname, VARSTRING[20] isid, STRING[3] isidCountry) = {
    NEW t = StatisticGroupType {
        name(t) <- iname;
        id (t) <- isid;
        country(t) <- country(isidCountry);
    }
}

loadDefaultStatistic 'Добавить значение статистические группы'(VARSTRING[20] sidType, STRING[12] sidParent, VARISTRING[250] iname, STRING[12] isid, GroupStatic groupStatic, value) = {
    NEW g = StatisticGroup {
        groupType(g) <- statisticGroupTypeId(sidType);
        parent(g) <- groupIdTypeIdGroup(sidType, sidParent);

        name(g) <- iname;
        sid(g) <- isid;
        unitMeasure(g) <- groupStatic;
        conversionFactor(g) <- NUMERIC[14,5](value);
    }
}

loadDefaultResidentCountry 'Добавить отеч. производ'(STRING[3] idCountry, STRING[3] idCountry2) = {
    resident(Country a,Country b) <- TRUE WHERE a == country(idCountry) AND b == country(idCountry2);
}

loadDefaultStatisticGroups 'Загрузить стандартные статистические группы и классификатор' () = ABSTRACT LIST ()  IN loadDefault;
@implementLoadDefaultData(loadDefaultStatisticGroups);

statisticGroupTypeDefault = DATA LOCAL NESTED StatisticGroupType();
copy 'Копировать' (StatisticGroupType type) = {
	NEWSESSION NESTED (statisticGroupTypeDefault){
	    statisticGroupTypeDefault() <- NULL;
	       
	    NEW t = StatisticGroupType {
	        country(t) <- country(type);
	        name(t) <- VARISTRING[100](name(type) +' (копия)');         
	
	        LOCAL prev =  StatisticGroup (StatisticGroup);   
	        LOCAL new =  StatisticGroup (StatisticGroup);   
	
	        prev(StatisticGroup d) <- NULL;
	        new(StatisticGroup d) <- NULL;
	        
	        FOR groupType(StatisticGroup group) == type NEW g = StatisticGroup DO {
	            groupType(g) <- t;
	            name(g) <- name(group);  
	            sid(g) <- sid(group);     
	            unitMeasure(g) <- unitMeasure(group);
	            conversionFactor(g) <- conversionFactor(group);
	
	            prev(g) <- group;
	            new(group) <- g;
	        }
	        parent(StatisticGroup group) <- new(parent(prev(group))) WHERE groupType(group) == t; 
	        statisticGroupTypeDefault() <- t;
	    }
	    apply();
	    SHOW statisticGroups OBJECTS ss = country(statisticGroupTypeDefault()), c = statisticGroupTypeDefault();
	    statisticGroupTypeDefault() <- NULL;
	}
} TOOLBAR;

EXTEND FORM statisticGroupTypes
    PROPERTIES (t) copy
;

//---------------------------- Новый статистический отчёт с выбором складов --------------------------------------------

statisticsLegalEntity  = DATA LOCAL LegalEntity();
nameStatisticsLegalEntity  = name(statisticsLegalEntity());

// Отметка для групп
allStocks 'Отм' = DATA LOCAL BOOLEAN();

dataIn 'Отм.' = DATA LOCAL BOOLEAN (StockGroup);

levelParentStock (stockGroup) =
    GROUP BY StockGroup stockGroup MIN level(stockGroup, StockGroup parent) IF dataIn(parent) MATERIALIZED;
    
nearestParentStockGroup (StockGroup stockGroup) = stockGroup(stockGroup, levelParentStock(stockGroup));
nearestIn (StockGroup stockGroup) =
    dataIn(nearestParentStockGroup(stockGroup)) MATERIALIZED;

inStat 'Отм' (StockGroup stockGroup) =
    OVERRIDE dataIn(stockGroup), nearestIn(stockGroup), allStocks() AND stockGroup IS StockGroup;


// Отметка для складов
dataIn 'Отм.' = DATA LOCAL BOOLEAN (Stock);
inStat 'Отм' (Stock stock) =
    (OVERRIDE dataIn(stock), inStat(stockGroup(stock))) AND (legalEntity(stock) == statisticsLegalEntity() OR NOT statisticsLegalEntity()) ;


//с коэффициентом пересчета на конец//
// всего
balanceABy 'Остаток на конец' (StatisticGroup group, DATE date)=
    [= GROUP
        SUM balanceA (Sku sku, Stock stock, date) * factor(group, sku) IF inStat(stock)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightABy 'Вес на конец, кг' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM netWeightBalanceALedger (Sku sku, Stock stock, date) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeABy 'Объем на конец, л' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM volumeBalanceALedger (Sku sku, Stock stock, date) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumABy 'Сумма на конец, сум.' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM sumA (Sku sku, Stock stock, date) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
        
// отечеств. пр-ва
balanceResidentABy 'Остаток на конец' (StatisticGroup group, DATE date)=
    [= GROUP
        SUM balanceA (Sku sku, Stock stock, date) * factor(group, sku) IF resident (group, sku) AND inStat(stock)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightResidentABy 'Вес на конец, кг' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM netWeightBalanceALedger (Sku sku, Stock stock, date) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeResidentABy 'Объем на конец, л' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM volumeBalanceALedger (Sku sku, Stock stock, date) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumResidentABy 'Сумма на конец, сум.' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM sumA (Sku sku, Stock stock, date) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);        

//с коэффициентом пересчета на начало//
// всего
balanceBBy 'Остаток на начало' (StatisticGroup group, DATE date)=
    [= GROUP
        SUM balanceB (Sku sku, Stock stock, date) * factor(group, sku) IF inStat(stock)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);        
netWeightBBy 'Вес на начало, кг' (StatisticGroup group, DATE date)=
    [= GROUP 
    SUM netWeightBalanceBLedger (Sku sku, Stock stock, date) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);   
volumeBBy 'Объем на начало, л' (StatisticGroup group, DATE date)=
    [= GROUP 
    SUM volumeBalanceBLedger (Sku sku, Stock stock, date) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);   
retailSumBBy 'Сумма на начало, сум.' (StatisticGroup group, DATE date)=
    [= GROUP 
    SUM sumB (Sku sku, Stock stock, date) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);                  
                  

// отечеств. пр-ва
balanceResidentBBy 'Остаток на начало' (StatisticGroup group, DATE date)=
    [= GROUP
        SUM balanceB (Sku sku, Stock stock, date) * factor(group, sku) IF resident (group, sku) AND inStat(stock)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightResidentBBy 'Вес на начало, кг' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM netWeightBalanceBLedger (Sku sku, Stock stock, date) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeResidentBBy 'Объем на начало, л' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM volumeBalanceBLedger (Sku sku, Stock stock, date) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumResidentBBy 'Сумма на начало, сум.' (StatisticGroup group, DATE date)=
    [= GROUP
    SUM sumB (Sku sku, Stock stock, date) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);                                


//всего
quantitySoldBy 'Продано, шт' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM quantitySoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) * factor(group, sku)  IF inStat(stock)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightSoldBy 'Продано, кг' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM netWeightSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeSoldBy 'Продано, л' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM volumeSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumSoldBy 'Продано, сум.' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM sumSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF isParent(group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);

//отечеств. пр-ва
quantitySoldResidentBy 'Продано, шт' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
        SUM quantitySoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) * factor(group, sku) IF resident (group, sku) AND inStat(stock)]()/
            (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
netWeightSoldResidentBy 'Продано, кг' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM netWeightSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
volumeSoldResidentBy 'Продано, л' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM volumeSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
retailSumSoldResidentBy 'Продано, сум.' (StatisticGroup group, DATE dateFrom, DATE dateTo)=
    [= GROUP
    SUM sumSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF resident (group, sku) AND inStat(stock)]()/
        (OVERRIDE conversionFactor(group), 1 IF group IS StatisticGroup);
//-- на конец
netWeightBalanceALedger 'Вес товара на конец , кг' (Sku sku, DATE date) 
   = GROUP BY Sku sku, DATE date SUM balanceA (sku, Stock stock, date) * netWeight(sku) IF inStat(stock);   
volumeBalanceALedger 'Объем товара на конец , л' (Sku sku, DATE date) =
    GROUP BY Sku sku, DATE date SUM balanceA (sku, Stock stock, date) * volume(sku) IF inStat(stock);;

//-- на начало
netWeightBalanceBLedger 'Вес товара на начало , кг' (Sku sku, DATE date) =
    GROUP BY Sku sku, DATE date SUM balanceB (sku, Stock stock, date) * netWeight(sku) IF inStat(stock);;
volumeBalanceBLedger 'Объем товара на начало , л' (Sku sku, DATE date) =
    GROUP BY Sku sku, DATE date SUM balanceB (sku, Stock stock, date) * volume(sku) IF inStat(stock);;


valueBy 'Продано' (StatisticGroup group, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldBy(group, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldBy(group, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldBy(group, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldBy(group, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup
    ;

valueResidentBy 'Продано, бел. пр-ва' (StatisticGroup group, DATE dateFrom, DATE dateTo) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN quantitySoldResidentBy(group, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightSoldResidentBy(group, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeSoldResidentBy(group, dateFrom, dateTo)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumSoldResidentBy(group, dateFrom, dateTo)
        ELSE 0 IF group IS StatisticGroup
    ;
        
valueByTo 'Остаток на конец' (StatisticGroup group, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceABy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightABy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeABy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumABy(group, date)
        ELSE 0 IF group IS StatisticGroup AND date IS DATE
    ;
    
valueResidentByTo 'Остаток на конец, бел. пр-ва' (StatisticGroup group, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentABy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentABy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentABy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentABy(group, date)
        ELSE 0 IF group IS StatisticGroup AND date IS DATE
    ;

valueByFrom 'Остаток на начало, ЕИ' (StatisticGroup group, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceBBy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightBBy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeBBy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumBBy(group, date)
        ELSE 0 IF group IS StatisticGroup AND date IS DATE
    ;

valueResidentByFrom 'В т.ч. отеч., ЕИ' (StatisticGroup group, DATE date) =
    CASE
        WHEN (unitMeasure(group)==GroupStatic.statisticThing OR
             unitMeasure(group)==GroupStatic.statisticLinearMeters OR
             unitMeasure(group)==GroupStatic.statisticPair OR
             unitMeasure(group)==GroupStatic.statisticConditionalPiece OR
             unitMeasure(group)==GroupStatic.statisticSquareMeters OR
             unitMeasure(group)==GroupStatic.statisticCubicMeters)
            THEN balanceResidentBBy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticPounds
            THEN netWeightResidentBBy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticLiter
            THEN volumeResidentBBy(group, date)
        WHEN unitMeasure(group)==GroupStatic.statisticSum
            THEN retailSumResidentBBy(group, date)
        ELSE 0 IF group IS StatisticGroup AND date IS DATE
    ;

totalSumSoldBy 'Продано, руб.' (group, dateFrom, dateTo)=
    GROUP
    BY StatisticGroup group, DATE dateFrom, DATE dateTo SUM sumSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF isParent(group, sku)  AND inStat(stock);

totalSumResidentSoldBy 'В т.ч.отеч., руб.' (group, dateFrom, dateTo)=
    GROUP
    BY StatisticGroup group, DATE dateFrom, DATE dateTo SUM sumSoldStatistic (Sku sku, Stock stock, dateFrom, dateTo) IF resident (group, sku)  AND inStat(stock);

// суммовые показатели
sumBalanceBBy 'Сумма остатка на начало, руб.' (StatisticGroup group, DATE date) =
    GROUP
    BY StatisticGroup group, DATE dateFrom SUM sumB (Sku sku, Stock stock, dateFrom) IF isParent(group, sku)  AND inStat(stock);

sumResidentBalanceBBy 'В т.ч.отеч., руб.' (group, date) =
    GROUP
    BY StatisticGroup group, DATE dateFrom SUM sumB (Sku sku, Stock stock, dateFrom) IF resident (group, sku)  AND inStat(stock);

sumBalanceABy 'Сумма остатка на конец, руб.' (group, date) =
    GROUP
    BY StatisticGroup group, DATE dateTo SUM sumA (Sku sku, Stock stock, dateTo) IF isParent(group, sku)  AND inStat(stock);

sumResidentBalanceABy 'В т.ч.отеч., руб.' (group, date) =
    GROUP
    BY StatisticGroup group, DATE dateTo SUM sumA (Sku sku, Stock stock, dateTo) IF resident (group, sku)  AND inStat(stock);

stocks 'Склады' = GROUP CONCAT name(Stock s) IF inStat(s), ', ' ORDER s;
countInStat = GROUP SUM 1 IF inStat(Stock s);

quantityNoGroupsB 'Количество товаров без групп на начало' (StatisticGroupType type, DATE dFrom) = 
    GROUP BY StatisticGroupType type, DATE date SUM 1 IF [= GROUP BY Sku sku SUM 1 IF balanceB(sku, Stock stock, date) AND inStat(stock)](Sku sku) 
        AND type IS StatisticGroupType //AND Sku sku IS Sku AND Stock stock IS Stock AND DATE date IS DATE 
        AND NOT statistic(type, sku);

quantityNoGroupsA 'Количество товаров без групп на конец' (StatisticGroupType type, DATE dTo) = 
    GROUP BY StatisticGroupType type, DATE date SUM 1 IF [= GROUP BY Sku sku SUM 1 IF balanceA(sku, Stock stock, date) AND inStat(stock)](Sku sku)  
        AND type IS StatisticGroupType // AND Sku sku IS Sku AND Stock stock IS Stock AND DATE date IS DATE
        AND NOT statistic(type, sku);

quantityNoGroups 'Количество товаров без групп, шт' (StatisticGroupType type) = 
    GROUP BY StatisticGroupType type SUM 1 IF type IS StatisticGroupType AND Sku sku IS Sku AND
        NOT statistic(type, sku);

quantitySoldNot 'Продано без группы, шт' (type, dateFrom, dateTo)=
    GROUP BY StatisticGroupType type, DATE dateFrom, DATE dateTo SUM quantitySoldStatistic(Sku sku, Stock stock, dateFrom, dateTo) IF type IS StatisticGroupType AND NOT       
    statistic(type,sku) AND inStat(stock);  
balanceBNot 'Остаток на начало без групп, шт' (type, date)=
    GROUP BY StatisticGroupType type, DATE date SUM balanceB(Sku sku, Stock stock, date) IF type IS StatisticGroupType AND NOT       
    statistic(type,sku) AND inStat(stock);  
balanceANot 'Остаток на конец без групп, шт' (type, date)=
    GROUP BY StatisticGroupType type, DATE date SUM balanceA(Sku sku, Stock stock, date) IF type IS StatisticGroupType AND NOT       
    statistic(type,sku) AND inStat(stock);         

noThousandsInStatistics 'Статистический отчёт в рублях' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() noThousandsInStatistics
;
DESIGN options {
    sale {
        MOVE PROPERTY(noThousandsInStatistics());
    }
}

FORM statisticalReportStockSelectPrint 'Статистический отчет'
    OBJECTS params = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES objFrom = VALUE(dFrom), objTo = VALUE(dTo)
     
    PROPERTIES noThousandsInStatistics() 
     
    OBJECTS c = StatisticGroupType PANEL
    PROPERTIES SELECTOR name(c)
    PROPERTIES quantityNoGroups(c), quantityNoGroupsB(c, dFrom), quantityNoGroupsA(c, dTo)
  
    PROPERTIES quantitySoldNot(c,dFrom, dTo), balanceBNot(c, dFrom), balanceANot(c, dTo)
    PROPERTIES() stocks, currentDateTime
    
    OBJECTS g=StatisticGroup                                   

    PROPERTIES(g) READONLY nameLevel4, sid, nameUOM, nameReportUOM

    PROPERTIES(g, dFrom) READONLY valueByFrom, valueResidentByFrom,
                                     sumBalanceBBy, sumResidentBalanceBBy
    PROPERTIES(g, dFrom, dTo) READONLY valueBy, valueResidentBy,
                                          totalSumSoldBy, totalSumResidentSoldBy
    PROPERTIES(g, dTo) READONLY valueByTo, valueResidentByTo,
                                   sumBalanceABy, sumResidentBalanceABy
    PROPERTIES READONLY canonicalOrderSort(g), level(g)
    ORDER canonicalOrderSort(g)                                                                    
   
    FILTERS groupType(g) == c
                                  
;

printStatisticalReportStockSelect 'Статистический отчет по складам' (StatisticGroupType c, DATE dFrom, DATE dTo, Stock s) = {
    dataIn(s) <- TRUE WHERE NOT countInStat();
    PRINT statisticalReportStockSelectPrint OBJECTS c = c , dFrom = dFrom, dTo = dTo ;
} IMAGE 'print.png' IN print;  
printXLSStatisticalReportStockSelect 'Статистический отчет по складам (XLS)' (StatisticGroupType c, DATE dFrom, DATE dTo, Stock s) = {
    dataIn(s) <- TRUE WHERE NOT countInStat();
    PRINT statisticalReportStockSelectPrint OBJECTS c = c , dFrom = dFrom, dTo = dTo XLS;
} IMAGE 'print.png' IN print;

FORM statisticalReportStockInStatPrint 'Статистический отчет по складам'
    OBJECTS params = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES objFrom = VALUE(dFrom), objTo = VALUE(dTo)
     
    PROPERTIES noThousandsInStatistics() 
     
    OBJECTS c = StatisticGroupType PANEL
    PROPERTIES SELECTOR name(c)
    PROPERTIES quantityNoGroups(c), quantityNoGroupsB(c, dFrom), quantityNoGroupsA(c, dTo)
  
    PROPERTIES quantitySoldNot(c,dFrom, dTo), balanceBNot(c, dFrom), balanceANot(c, dTo)
    PROPERTIES() stocks, currentDateTime
    
    OBJECTS s = Stock
    PROPERTIES name(s)
    
    OBJECTS g=StatisticGroup                                   

    PROPERTIES(g) READONLY nameLevel4, sid, nameUOM, nameReportUOM

    PROPERTIES(g, s, dFrom) READONLY valueByFrom, valueResidentByFrom,
                                     sumBalanceBBy, sumResidentBalanceBBy
    PROPERTIES(g, s, dFrom, dTo) READONLY valueBy, valueResidentBy,
                                          totalSumSoldBy, totalSumResidentSoldBy
    PROPERTIES(g, s, dTo) READONLY valueByTo, valueResidentByTo,
                                   sumBalanceABy, sumResidentBalanceABy
    PROPERTIES READONLY canonicalOrderSort(g), level(g)
    ORDER canonicalOrderSort(g)                                                                    
   
    FILTERS groupType(g) == c, inStat(s)
;

printStatisticalReportStockInStat 'Статистический отчет с разбиением по складам' (StatisticGroupType c, DATE dFrom, DATE dTo, Stock s) = {
    dataIn(s) <- TRUE WHERE NOT countInStat();
    PRINT statisticalReportStockInStatPrint OBJECTS c = c, dFrom = dFrom, dTo = dTo ;
} IMAGE 'print.png' IN print;  
printStatisticalReportStockInStatXls 'Статистический отчет с разбиением по складам (XLS)' (StatisticGroupType c, DATE dFrom, DATE dTo, Stock s) = {
    dataIn(s) <- TRUE WHERE NOT countInStat();
    PRINT statisticalReportStockInStatPrint OBJECTS c = c, dFrom = dFrom, dTo = dTo XLS;
} IMAGE 'print.png' IN print; 

FORM statisticalReportStockSelect 'Статистический отчет'

    OBJECTS params = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES objFrom = VALUE(dFrom), objTo = VALUE(dTo)

    PROPERTIES nameStatisticsLegalEntity() 

    OBJECTS c = StatisticGroupType PANEL
    PROPERTIES SELECTOR name(c)

    TREE stockGroupTree sta=STRING[3], stg = StockGroup PARENT parent
    PROPERTIES READONLY VALUE(sta), stgTreeName = name(stg)
    PROPERTIES() allStocks TODRAW sta GRID
    PROPERTIES inStat(stg)
    FILTERS stringEqualsAll(sta)
 
    OBJECTS s=Stock 
    PROPERTIES(s) inStat, name READONLY, nameLegalEntity READONLY, nameRegion READONLY
    ORDER name(s)
    FILTERS s IS Stock AND NOT stg IS StockGroup OR isParent(stg, s)
 
    FILTERS countCompanyStock(stg), isCompany(s) 
    FILTERS legalEntity(s) == statisticsLegalEntity() OR NOT statisticsLegalEntity()

//    OBJECTS sk=Sku
//    PROPERTIES READONLY name(sk)
//    FILTERS NOT statistic(c,sk)

    PROPERTIES (c, dFrom, dTo, s) printXLSStatisticalReportStockSelect, printStatisticalReportStockSelect, 
                                  printStatisticalReportStockInStat, printStatisticalReportStockInStatXls
;

setDefaultStatisticGroupType() = {
    SEEK statisticalReportStockSelect.c = defaultStatisticGroupType();
}

EXTEND FORM statisticalReportStockSelect
    EVENTS 
        ON INIT setDefaultStatisticGroupType();
        

DESIGN statisticalReportStockSelect {
    NEW mainCase {
        caption = 'Параметры отчета';
        type = CONTAINERV;
        fill = 1;
            NEW top {
                type = CONTAINERH;
                MOVE BOX(c);
                NEW dateCase {
                    caption = 'Даты';
                    type = CONTAINERH;
                    MOVE PROPERTY(objFrom) {caption = 'Дата (с)';}
                    MOVE PROPERTY(objTo) {caption = 'Дата (по)';}
                    
                }
                NEW legalEntCase{
                    caption = 'Организация';
                    type = CONTAINERV;
                    MOVE PROPERTY(nameStatisticsLegalEntity()) {caption = 'Наименование';}
                }
            }
            NEW splitStockContainer{
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE stockGroupTree);
                MOVE BOX(s){
                    fill = 3;
                } 
            }            
    }
//    MOVE BOX(sk) {caption = 'Товары без групп';}
    NEW printContainer {
        type = CONTAINERH;
        MOVE GROUP(print,s);
    }
    MOVE TOOLBARBOX;    
}


NAVIGATOR {
    saleNavigator {
        NEW FOLDER statisticsNavigator 'Статистика' BEFORE saleMasterData {
            NEW statisticGroupTypes;
            NEW statisticGroups;
            NEW groupStatics;
            NEW statisticalReportStockSelect;
        }
    }
}


