MODULE SaleShipmentLedger;

REQUIRE SaleShipment, PriceRoundStore;

NAMESPACE Sale;

skip(InvoiceDetail ledger) += WHEN ledger IS Sale.InvoiceDetail AND NOT isChargeSku(ledger) THEN TRUE;

@implementSaleLedger(Shipment, sku, supplierStock);

edit[SaleLedger] (ShipmentDetail ledger) += ACTION edit(ledger);

invoiceSumShipmentDetail (ShipmentDetail detail) = IF individualLegalEntitySale(operation(detail)) THEN 
     round(NUMERIC[16,2](invoicePrice(invoiceDetail(detail)) * quantity(detail)), roundCondition(supplierStock(detail)))
     ELSE round(NUMERIC[16,2](invoicePrice(invoiceDetail(detail)) * quantity(detail)), currency(detail));

operation (ShipmentDetail ledger) += operation(ledger);
quantity[SaleLedger] (ShipmentDetail ledger) += quantity(ledger);
VAT (ShipmentDetail ledger) += VAT(invoiceDetail(ledger));
price[SaleLedger] (ShipmentDetail ledger) += invoicePrice(invoiceDetail(ledger));
sum[SaleLedger] (ShipmentDetail ledger) += invoiceSumShipmentDetail(ledger);
customer (ShipmentDetail ledger) += customer(ledger);
customerStock (ShipmentDetail ledger) += customerStock(ledger);
skip[SaleLedger] (ShipmentDetail ledger) += WHEN ledger IS Sale.ShipmentDetail THEN skipSaleLedger(operation(ledger));
numberDocument (ShipmentDetail ledger) += number(ledger);

costSum(ShipmentDetail ledger) += WHEN ledger IS Sale.ShipmentDetail THEN costSum[SkuLedger](ledger);
cost[SaleLedger, Batch](ShipmentDetail ledger, Batch batch) += cost (ledger, batch);
