MODULE SaleReturnShipment;

REQUIRE Shipment, SaleReturnInvoice, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Возвраты', ' (продажа-возврат)', supplier, company, customer, company, SaleReturn);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, company);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, customer);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, supplier, company);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, customer, customer);

@defineShipmentBatch(supplierStock);
@implementDocumentBatch(shipment);

@defineShipmentBatchDialog();

in(Shipment s) += s IS Shipment;

expiryDate(UserShipmentDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));

@defineShipmentStockDestination(customerStock, supplierStock);

@defineOrderShipment(' (продажа-возврат)', supplierStock);
@defineInvoiceShipment(' (продажа-возврат)', supplierStock, company, SaleReturn);
@defineInvoiceShipmentAction(' (продажа-возврат)');

@defineInvoiceShipmentBatch();

@defineDocumentSkuStockSupplier (userShipment, userShipment, s);
@defineDocumentBatchStockSupplier(userShipment, userShipment, s);

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperationContainer(shipment, s, overName);
operation[Shipment.Shipment](Shipment s)+=operation(s);
@extendFormFilterRoleAccess(shipment, s, shipments);
@defineDocumentOperationConstraint(shipment, 'поставка (продажа-возврат)', SaleReturn);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRole(userShipment);

@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoice(UserShipment s, Invoice i) += ACTION (s, i) {
    ASSIGN operation(s) <- operation(i);
}
operation(InvoiceShipment shipment) += operation(invoice(shipment));

// Добавляем в копирование поставок
overCopy(Shipment s, UserShipment d) += ACTION(s, d) {
    ASSIGN operation(d) <- operation(s);
}
@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserShipment userShipment) AND NOT isCompany(supplier(userShipment))
    CHECKED BY supplier[UserShipment] MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserShipment userShipment) AND NOT isCustomer(customer(userShipment))
    CHECKED BY customer[UserShipment] MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterShipmentSupplier() AND NOT isCompany(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier[] MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterShipmentSupplierStock() AND NOT isCompany(filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Для фильтра в поставке выбран в качестве склада поставщика склад, который не принадлежит компании';  
CONSTRAINT filterShipmentCustomer() AND NOT isCustomer(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer[] MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся покупателем';    

CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT in(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT in(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';      
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
packQuantity[Shipment.ShipmentDetail](ShipmentDetail detail) += packQuantity(detail);
DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(s));
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, company, customer, userShipment);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserShipment userShipment, Sku sku)= inCustomer(customer(userShipment), sku);
EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetail(ks, s) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' in(s, ks) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceSkuUserShipment(ks, s)

;
in (UserShipment userShipment, Batch batch)= inCustomer(customer(userShipment), sku(batch));
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b,s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetail(b,s) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' in(s,b) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceBatchUserShipment(b, s)

;

// Резервы
@extendFormDocumentSkuOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

shipmentPrice (UserInvoiceDetail detail)  <- IF batch(detail)

                                                THEN OVERRIDE   cost(batch(detail)),
                                                                prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                                          batch(detail),
                                                                                                          supplierStock(detail),
                                                                                                          dateTime(detail))
                                                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                             sku(detail),
                                                                                             supplierStock(detail),
                                                                                             dateTime(detail))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(supplierStock(detail)) OR
                                                     CHANGED(dateTime(detail)) OR
                                                     CHANGED(batch(detail));

price (UserShipmentDetail detail)  <- IF batch(detail)

                                                THEN OVERRIDE cost(batch(detail)),
                                                              prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                                        batch(detail),
                                                                                                        supplierStock(detail),
                                                                                                        dateTime(detail))
                                                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                             sku(detail),
                                                                                             supplierStock(detail),
                                                                                             dateTime(detail))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(supplierStock(detail)) OR
                                                     CHANGED(dateTime(detail)) OR
                                                     CHANGED(batch(detail));

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(Shipment, supplierStock);
type(Shipment l) += 'Продажа-возврат' IF l IS Shipment;
overSumItemShipmentDetail = ABSTRACT NUMERIC[16,2] (Shipment);
sumItem (Shipment ledger) += OVERRIDE sumItemShipmentDetail(ledger), overSumItemShipmentDetail(ledger);

overSumContainerShipmentDetail = ABSTRACT NUMERIC[16,2] (Shipment);
sumContainer (Shipment ledger) += OVERRIDE sumContainerShipmentDetail(ledger), overSumContainerShipmentDetail(ledger);

legalEntity(Shipment ledger) += customer(ledger);  
legalEntityStock(Shipment ledger) += customerStock(ledger);  

operation[StockDocumentLedger](Shipment ledger) += operation(ledger);
isReturn(Shipment ledger) += ledger IS Shipment;
edit[StockDocumentLedger](Shipment l) += ACTION edit(l);
close[StockDocumentLedger](Shipment l) += ACTION close(l);

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerInLIFO(ShipmentDetail, sku, supplierStock);
quantity[InLIFOSkuLedger] (ShipmentDetail ledger) += quantity(ledger);
batch[SkuLedger](ShipmentDetail ledger) += batch(ledger);
@implementSkuLedgerInLIFOBatchBalance(shipmentDetail, supplierStock);

sum[InSkuLedger](ShipmentDetail ledger) += sum(ledger);
stockDocumentLedger(ShipmentDetail ledger) += shipment(ledger);
cost(ShipmentDetail detail, Batch batch) += cost[SkuLedger,Batch](detail, batch) IF detail IS ShipmentDetail;
  
edit[SkuLedger](ShipmentDetail d) += ACTION edit(d);
// ------------------------------- Себестоимость продажи ------------------------ //
costSale (invoiceDetail) = GROUP SUM costSum(ShipmentDetail shipmentDetail) BY invoiceDetail(shipmentDetail);
costSum(InvoiceDetail ledger) += -costSale(ledger);
cost(InvoiceDetail ledger, Batch batch) += -cost (ledger, batch) ;

receiveShipment (UserInvoice invoice)+= ACTION (invoice)  {
    IF invoice IS UserInvoice THEN {
        createShipment(invoice) <- TRUE;           
    }
};

deleteCreate (InvoiceShipment shipment)+= WHEN invoice(shipment) IS UserInvoice THEN  ACTION (shipment)  {
    createShipment(Invoice invoice) <- NULL WHERE invoice == invoice(shipment);          
};

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEdit (Shipment i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserShipment i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i);  

NAVIGATOR {
    saleStockNavigator {
        ADD shipments;
    }
}

CONSTRAINT isPosted(ShipmentDetail d) AND isShipmentPrice(operation(d)) AND NOT price(d)
    MESSAGE 'Для документа (продажа-возврат) должна быть задана учетная цена';