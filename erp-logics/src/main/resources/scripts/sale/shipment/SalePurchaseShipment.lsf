MODULE SalePurchaseShipment;

REQUIRE SaleShipment, PurchaseShipment, SalePurchaseOperation;

PRIORITY Sale;

//----------------------------------------------------------------------------//

GROUP shipment 'Информация о поставке' : base;

createPurchaseShipment 'Создать поставку (закупка)' = ABSTRACT BOOLEAN (Shipment) PERSISTENT;
createPurchaseUserShipment 'Создать поставку (закупка)' = DATA BOOLEAN (UserShipment) PERSISTENT;
createPurchaseShipment(shipment) += createPurchaseUserShipment(shipment);

createPurchaseShipmentDetail 'Создать поставку (закупка)' (shipmentDetail) = createPurchaseShipment(shipmentShipmentDetail(shipmentDetail))PERSISTENT;
createPurchaseUserShipmentDetail 'Создать поставку (закупка)' (userShipmentDetail) = createPurchaseUserShipment(userShipmentUserShipmentDetail(userShipmentDetail));
backgroundPurchaseShipment 'Цвет' (shipment) = RGB(255, 224, 255) IF shipment IS Shipment;

@defineDocumentInterfaceHeaderTimePrefix(Shipment, purchaseShipment, ' поставки (закупка)');
purchaseShipmentDateUserShipment(i) <- dateUserShipment(i) WHEN CHANGED(dateUserShipment(i));
purchaseShipmentTimeUserShipment(i) <- timeUserShipment(i) WHEN CHANGED(timeUserShipment(i));

@defineDocumentInterfaceOperationPrefix (shipment, purchase, Purchase, ' (закупка)');

// Записываем операцию для закупки по умолчанию из операции
purchaseOperationUserShipment (shipment) <- purchaseOperationOperation(operationUserShipment(shipment))
    WHEN CHANGED(operationUserShipment(shipment));

EXTEND FORM userShipment
    PROPERTIES(s) BACKGROUND backgroundPurchaseShipment(s) createPurchaseUserShipment
    PROPERTIES(s) BACKGROUND backgroundPurchaseShipment(s) SHOWIF createPurchaseUserShipment(s) namePurchaseOperationUserShipment,
                  purchaseShipmentDateUserShipment, purchaseShipmentTimeUserShipment
;
DESIGN userShipment {
    headerCreateDocuments{
        NEW headerShipment{
            caption = 'Поставка';
            type = CONTAINERH;
            MOVE PROPERTY(createPurchaseUserShipment(s));
            MOVE PROPERTY(namePurchaseOperationUserShipment(s));
            MOVE PROPERTY(purchaseShipmentDateUserShipment(s));
            MOVE PROPERTY(purchaseShipmentTimeUserShipment(s));
        }
    }
}

EXTEND FORM shipments
    PROPERTIES(s) READONLYIF isReadonly() BACKGROUND backgroundPurchaseShipment(s) SHOWIF createPurchaseShipment(s) purchaseShipmentDateShipment,
                  purchaseShipmentTimeShipment
;
//--  Связь поставки с поставкой

shipmentDetailShipmentDetail = ABSTRACT ShipmentDetail (Purchase.ShipmentDetail) PERSISTENT;
shipmentDetailUserShipmentDetail = DATA ShipmentDetail (Purchase.UserShipmentDetail);
shipmentDetailShipmentDetail(shipmentDetail) += shipmentDetailUserShipmentDetail(shipmentDetail);

CONSTRAINT Purchase.supplierShipmentDetail(detail) != supplierShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.supplierStockShipmentDetail(detail) != supplierStockShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.customerShipmentDetail(detail) != customerShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.customerStockShipmentDetail(detail) != customerStockShipmentDetail(shipmentDetailUserShipmentDetail(detail)) OR
           Purchase.skuShipmentDetail(detail) != skuShipmentDetail(shipmentDetailUserShipmentDetail(detail))
    CHECKED BY shipmentDetailUserShipmentDetail
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в поставке и поставке на осове поставке должны соответствовать друг другу';


descriptionIndexShipmentDetailShipmentDetail 'Строка поставки (продажа)' (detail) = descriptionIndexShipmentDetail(shipmentDetailShipmentDetail(detail));
descriptionIndexShipmentDetailUserShipmentDetail 'Строка поставки (продажа)' (detail) = descriptionIndexShipmentDetail(shipmentDetailUserShipmentDetail(detail));

Purchase.overCopyUserShipmentDetail(d, detail) += ACTION (d, detail) {      
    shipmentDetailUserShipmentDetail(d) <- shipmentDetailUserShipmentDetail(detail);             
} 

quantityShipmentDetailShipmentShipment (sale, purchase) = GROUP SUM Purchase.quantityShipmentDetail(detail) BY shipmentShipmentDetail(shipmentDetailShipmentDetail(detail)), Purchase.shipmentShipmentDetail(detail);

saleShipmentsShipment 'Поставки (продажа)' (purchase) = GROUP CONCAT VARSTRING[255](descriptionShipment(sale)) IF quantityShipmentDetailShipmentShipment(sale, purchase) , ', '
                                                        BY purchase
                                                        ORDER sale IN shipment MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

relationPurchaseShipment 'Связь' (purchase) = GROUP SUM quantityShipmentDetailShipmentShipment (sale, purchase) BY purchase PERSISTENT;

shippedShipmentDetail 'Кол-во (поставлено)' (shipmentDetail) = GROUP SUM Purchase.quantityShipmentDetail(detail) IF Purchase.isPostedShipmentDetail(detail)
                                                                   BY shipmentDetailShipmentDetail(detail) PERSISTENT;

toShipShipmentDetail 'Не поставлено' (shipmentDetail) = quantityShipmentDetail (shipmentDetail) (-) shippedShipmentDetail(shipmentDetail);

CLASS PurchaseShipment 'Поставка на основе поставки': Purchase.Shipment;
CLASS PurchaseShipmentDetail 'Строка поставки на основе поставки' : Purchase.ShipmentDetail;

@defineDocumentTables(purchaseShipment);

@defineDocumentAggregation(shipment, purchaseShipment, createPurchase);
Purchase.shipmentShipmentDetail(detail) += purchaseShipmentPurchaseShipmentDetail(detail);

Purchase.indexShipmentDetail(detail) += indexPurchaseShipmentDetail(detail);

Purchase.dateShipment(shipment) += purchaseShipmentDateShipment(shipmentPurchaseShipment(shipment));
Purchase.timeShipment(shipment) += purchaseShipmentTimeShipment(shipmentPurchaseShipment(shipment));

@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, supplier, 'Склад поставщика', , );
Purchase.supplierStockShipment(shipment) += supplierStockPurchaseShipment(shipment);
Purchase.dataSupplierStockShipmentDetail(shipmentDetail) += dataSupplierStockShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, customer, 'Склад покупателя', , );
Purchase.customerStockShipment(shipment) += customerStockPurchaseShipment(shipment);
Purchase.dataCustomerStockShipmentDetail(shipmentDetail) += dataCustomerStockShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

@defineDocumentAggregationLegalEntityPrefix(shipment, purchaseShipment, supplier, 'Поставщик', , );
Purchase.supplierShipment(shipment) += supplierPurchaseShipment(shipment);
@defineDocumentAggregationLegalEntityPrefix(shipment, purchaseShipment, customer, 'Покупатель', , );
Purchase.customerShipment(shipment) += customerPurchaseShipment(shipment);

@defineDocumentAggregationPosted(shipment, purchaseShipment);
Purchase.isPostedShipment(shipment) += isPostedPurchaseShipment(shipment);

@defineDocumentAggregationClosed(shipment, purchaseShipment);
Purchase.isClosedShipment(shipment) += isClosedPurchaseShipment(shipment);

Purchase.numberShipment(shipment) += numberShipment(shipmentPurchaseShipment(shipment));
Purchase.seriesShipment(shipment) += seriesShipment(shipmentPurchaseShipment(shipment));
seriesNumberPurchaseShipment 'Серия/номер документа' (purchaseShipment) = seriesNumberShipment(shipmentPurchaseShipment(purchaseShipment));

noteShipmentPurchaseShipment 'Примечание' (purchaseShipment) = noteShipment(shipmentPurchaseShipment(purchaseShipment));
Purchase.noteShipment(shipment) += noteShipmentPurchaseShipment(shipment);

currencyPurchaseShipment  (purchaseShipment) = currencyShipment(shipmentPurchaseShipment(purchaseShipment));
Purchase.currencyShipment (shipment) += currencyPurchaseShipment(shipment);

@defineDocumentDescription(purchaseShipment, PurchaseShipmentDetail, 'Поставка на основе поставки ');
Purchase.descriptionShipment (shipment) += descriptionPurchaseShipment(shipment);
Purchase.operationShipment(shipment) += purchaseOperationShipment(shipmentPurchaseShipment(shipment));

@defineDocumentAggregationDetailSku(shipment, purchaseShipment, sku);
Purchase.skuShipmentDetail(shipmentDetail) +=  skuPurchaseShipmentDetail(shipmentDetail);

@defineDocumentAggregationDetailBatch(shipment, purchaseShipment);
Purchase.batchShipmentDetail(shipmentDetail) += batchPurchaseShipmentDetail(shipmentDetail);

Purchase.quantityShipmentDetail(shipmentDetail) += quantityShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
Purchase.expiryDateShipmentDetail(shipmentDetail) += expiryDateShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

Purchase.priceShipmentDetail(shipmentDetail) += priceShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

Purchase.sumShipmentDetail(shipmentDetail) += sumShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

Purchase.editShipment(shipment) += ACTION EXEC editShipment(shipmentPurchaseShipment(shipment));
Purchase.createdUserShipment(shipment) += createdUserShipment(shipmentPurchaseShipment(shipment));

Purchase.showPackShipment(shipment) +=  showPackShipment(shipmentPurchaseShipment(shipment));
Purchase.barcodePackShipmentDetail(shipmentDetail) += barcodePackShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
Purchase.amountPackShipmentDetail(shipmentDetail) +=  amountPackShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
Purchase.packQuantityShipmentDetail(shipmentDetail) +=  packQuantityShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));

shipmentDetailShipmentDetail(shipmentDetail) += shipmentDetailPurchaseShipmentDetail(shipmentDetail);

Purchase.editShipmentDetail(shipmentDetail) += ACTION editShipmentDetail(shipmentDetailPurchaseShipmentDetail(shipmentDetail));
// Создание поставки на основе поставки //

FORM shipmentShipments 'Поставки'
    OBJECTS s = LegalEntity FIXED PANEL
    PROPERTIES (s) READONLY nameLegalEntity
    OBJECTS c = LegalEntity FIXED PANEL
    PROPERTIES (c) READONLY nameLegalEntity

    OBJECTS ss = Stock FIXED PANEL
    PROPERTIES (ss) READONLY nameStock
    OBJECTS cs = Stock FIXED PANEL
    PROPERTIES (cs) READONLY nameStock

    OBJECTS o = Shipment
    PROPERTIES (o) READONLY isPostedShipment, numberShipment, seriesShipment, dateShipment, timeShipment, nameCurrencyShipment,
                            countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment,
                            noteShipment
    FILTERS supplierShipment(o) == s,
            customerShipment(o) == c,
            supplierStockShipment(o) == ss,
            customerStockShipment(o) == cs,
            isPostedShipment(o) AND NOT createPurchaseShipment(o)

    OBJECTS d = ShipmentDetail

    PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail,
                            quantityShipmentDetail
    PROPERTIES (d) READONLY SHOWIF showPackShipment(o) idBarcodePackShipmentDetail, shortNameUOMPackShipmentDetail, amountPackShipmentDetail, packQuantityShipmentDetail
    PROPERTIES (d) READONLY priceShipmentDetail, sumShipmentDetail,
                            nameSupplierStockShipmentDetail, toShipShipmentDetail BACKGROUND backgroundPurchaseShipment(o)
    FILTERS shipmentShipmentDetail(d) == o
;

DESIGN shipmentShipments {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {

            type = CONTAINERV;
            NEW headerBox {
                type = CONTAINERH;
                NEW headerBox1 {
                    type = CONTAINERH;
                    caption = 'Поставщик';
                    MOVE s.box;
                    MOVE ss.box;
                }
                NEW headerBox2 {
                    type = CONTAINERH;
                    caption = 'Покупатель';
                    MOVE c.box;
                    MOVE cs.box;
                }
            }
            MOVE o.box;
            NEW documentDetail {
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
}


fillShipmentUserShipment 'Заполнить на основе поставки' =  ACTION (userShipment) {       // подставляем все количество ???
    FORM shipmentShipments OBJECTS s = Purchase.supplierUserShipment(userShipment), c = Purchase.customerUserShipment(userShipment),
                                   ss = Purchase.supplierStockUserShipment(userShipment), cs = Purchase.customerStockUserShipment(userShipment) MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL saleShipment = Shipment();
        ASSIGN saleShipment() <- chosenObject('o');

        FOR shipmentShipmentDetail(shipmentDetail) == saleShipment() ADDOBJ d = Purchase.UserShipmentDetail DO {
            ASSIGN Purchase.userShipmentUserShipmentDetail(d) <- userShipment;
            ASSIGN shipmentDetailUserShipmentDetail(d) <- shipmentDetail;

            ASSIGN Purchase.priceUserShipmentDetail(d) <- priceShipmentDetail(shipmentDetail);

            ASSIGN Purchase.skuUserShipmentDetail(d) <- skuShipmentDetail(shipmentDetail);
            ASSIGN Purchase.batchUserShipmentDetail(d) <- batchShipmentDetail(shipmentDetail);
            ASSIGN Purchase.quantityUserShipmentDetail (d) <- quantityShipmentDetail(shipmentDetail);

            ASSIGN Purchase.barcodePackUserShipmentDetail(d) <- barcodePackShipmentDetail(shipmentDetail);
            ASSIGN Purchase.amountPackUserShipmentDetail(d) <- amountPackShipmentDetail(shipmentDetail);
            ASSIGN Purchase.packQuantityUserShipmentDetail(d) <- packQuantityShipmentDetail(shipmentDetail);
        }
    }
} IN shipment;

EXTEND FORM Purchase.userShipment
    PROPERTIES(s) fillShipmentUserShipment, saleShipmentsShipment READONLY
    PROPERTIES(d) descriptionIndexShipmentDetailUserShipmentDetail BEFORE deletesd
;
DESIGN Purchase.userShipment { headerCreateDetail{ MOVE s.shipment { type = CONTAINERV; }}}

EXTEND FORM Purchase.shipments
//    PROPERTIES(s) READONLY saleShipmentsShipment
    PROPERTIES(d) READONLY descriptionIndexShipmentDetailShipmentDetail SHOWIF relationPurchaseShipment(s)
;

//-- Действие

//overFillShipmentUserShipmentShipment = ABSTRACT ACTION LIST (userShipment, shipment);
//overFillShipmentUserShipmentDetailShipmentDetail = ABSTRACT ACTION LIST (userDetail, detail);

moveUserShipmentShipment 'Поставка (закупка)' =  ACTION (shipment) NEWSESSION{

    FOR ADDOBJ s = Purchase.UserShipment DO {



        ASSIGN Purchase.supplierUserShipment(s) <- supplierShipment(shipment);
        ASSIGN Purchase.customerUserShipment(s) <- customerShipment(shipment);
        ASSIGN Purchase.supplierStockUserShipment(s) <- supplierStockShipment(shipment);
        ASSIGN Purchase.customerStockUserShipment(s) <- customerStockShipment(shipment);
        ASSIGN numberUserShipment(s) <- numberShipment(shipment);
        ASSIGN seriesUserShipment(s) <- seriesShipment(shipment);
        ASSIGN Purchase.noteUserShipment(s) <- noteShipment(shipment);
        ASSIGN Purchase.currencyUserShipment(s) <- currencyShipment(shipment);

        ASSIGN Purchase.showPackUserShipment(s) <- showPackShipment(shipment);
        ASSIGN Purchase.operationUserShipment(s) <- operationShipment(shipment);
//        EXEC overFillShipmentUserShipmentShipment(s, shipment);

        FOR shipmentShipmentDetail(detail)==shipment ADDOBJ d = Purchase.UserShipmentDetail DO {

            ASSIGN Purchase.userShipmentUserShipmentDetail(d) <- s;
            ASSIGN shipmentDetailUserShipmentDetail(d) <- detail;
            ASSIGN Purchase.dataSupplierStockUserShipmentDetail(d) <- dataSupplierStockShipmentDetail(detail);
            ASSIGN Purchase.dataCustomerStockUserShipmentDetail(d) <- dataCustomerStockShipmentDetail(detail);

            ASSIGN Purchase.skuUserShipmentDetail(d) <- skuShipmentDetail(detail);
            ASSIGN Purchase.quantityUserShipmentDetail (d) <- quantityShipmentDetail(detail);
            ASSIGN Purchase.priceUserShipmentDetail (d) <- priceShipmentDetail(detail);

            ASSIGN Purchase.barcodePackUserShipmentDetail (d) <- barcodePackShipmentDetail(detail);
            ASSIGN Purchase.amountPackUserShipmentDetail (d) <- amountPackShipmentDetail(detail);
            ASSIGN Purchase.packQuantityUserShipmentDetail (d) <- packQuantityShipmentDetail(detail);

            ASSIGN Purchase.batchUserShipmentDetail(d) <- batchShipmentDetail(detail);
//            EXEC overFillShipmentUserShipmentDetailShipmentDetail(d,detail);
        }

    FORM Purchase.userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM shipments
    PROPERTIES(s) moveUserShipmentShipment
;
DESIGN shipments {
    createdContainer{
        MOVE PROPERTY(moveUserShipmentShipment(s));
    }
}

