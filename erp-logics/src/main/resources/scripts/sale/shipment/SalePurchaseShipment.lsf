MODULE SalePurchaseShipment;

REQUIRE SaleShipment, PurchaseShipment, SalePurchaseOperation;

PRIORITY Sale;

//----------------------------------------------------------------------------//

GROUP shipment 'Информация о поставке' : base;

createPurchase 'Создать поставку (закупка)' = ABSTRACT BOOLEAN (Shipment) PERSISTENT;
createPurchase 'Создать поставку (закупка)' = DATA BOOLEAN (UserShipment) PERSISTENT;
createPurchase(UserShipment shipment) += createPurchase(shipment);

createPurchase 'Создать поставку (закупка)' (ShipmentDetail shipmentDetail) = createPurchase(shipment(shipmentDetail))PERSISTENT;
createPurchase 'Создать поставку (закупка)' (UserShipmentDetail userShipmentDetail) = createPurchase(userShipment(userShipmentDetail));
backgroundPurchase 'Цвет' (Shipment shipment) = RGB(255, 224, 255) IF shipment IS Shipment;

@defineDocumentInterfaceHeaderTimePrefix(Shipment, purchaseShipment, ' поставки (закупка)');
purchaseShipmentDate(UserShipment i) <- date(i) WHEN CHANGED(date(i));
purchaseShipmentTime(UserShipment i) <- time(i) WHEN CHANGED(time(i));

@defineDocumentInterfaceOperationPrefix (shipment, purchase, Purchase, ' (закупка)');

// Записываем операцию для закупки по умолчанию из операции
purchaseOperation (UserShipment shipment) <- purchaseOperation(operation(shipment))
    WHEN CHANGED(operation(shipment));

EXTEND FORM userShipment
    PROPERTIES(s) BACKGROUND backgroundPurchase(s) createPurchase
    PROPERTIES(s) BACKGROUND backgroundPurchase(s) SHOWIF createPurchase(s) namePurchaseOperation,
                  purchaseShipmentDate, purchaseShipmentTime
;
DESIGN userShipment {
    headerCreateDocuments{
        NEW headerShipment{
            caption = 'Поставка';
            type = CONTAINERH;
            MOVE PROPERTY(createPurchase(s));
            MOVE PROPERTY(namePurchaseOperation(s));
            MOVE PROPERTY(purchaseShipmentDate(s));
            MOVE PROPERTY(purchaseShipmentTime(s));
        }
    }
}

EXTEND FORM shipments
    PROPERTIES(s) READONLYIF isReadonly() BACKGROUND backgroundPurchase(s) SHOWIF createPurchase(s) purchaseShipmentDate,
                  purchaseShipmentTime
;
//--  Связь поставки с поставкой

shipmentDetail = ABSTRACT ShipmentDetail (Purchase.ShipmentDetail) PERSISTENT INDEXED;
shipmentDetail = DATA ShipmentDetail (Purchase.UserShipmentDetail) INDEXED;
shipmentDetail(Purchase.UserShipmentDetail shipmentDetail) += shipmentDetail(shipmentDetail);

CONSTRAINT supplier(Purchase.UserShipmentDetail detail) != supplier(shipmentDetail(detail)) OR
           supplierStock(detail) != supplierStock(shipmentDetail(detail)) OR
           customer(detail) != customer(shipmentDetail(detail)) OR
           customerStock(detail) != customerStock(shipmentDetail(detail))
//           Purchase.skuShipmentDetail(detail) != skuShipmentDetail(shipmentDetailUserShipmentDetail(detail)) // пока отключаем, чтобы при перемещении в производстве (с изменением sku) работало
    CHECKED BY shipmentDetail[Purchase.UserShipmentDetail]
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в поставке и поставке на основе поставке должны соответствовать друг другу';


descriptionIndexShipmentDetail 'Строка поставки (продажа)' (Purchase.ShipmentDetail detail) = descriptionIndex(shipmentDetail(detail));
descriptionIndexShipmentDetail 'Строка поставки (продажа)' (Purchase.UserShipmentDetail detail) = descriptionIndex(shipmentDetail(detail));

overCopy[Purchase.UserShipmentDetail,Purchase.UserShipmentDetail](Purchase.UserShipmentDetail d, Purchase.UserShipmentDetail detail) += ACTION {      
    shipmentDetail(d) <- shipmentDetail(detail);             
} 

quantityShipmentDetail (sale, purchase) = GROUP SUM quantity(Purchase.ShipmentDetail detail) BY shipment(shipmentDetail(detail)), shipment(detail);

saleShipments 'Поставки (продажа)' (purchase) = GROUP CONCAT VARSTRING[255](description(Shipment sale)) IF quantityShipmentDetail(sale, Purchase.Shipment purchase) , ', '
                                                        BY purchase
                                                        ORDER sale IN shipment MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

relationPurchase 'Связь' (purchase) = GROUP SUM quantityShipmentDetail (Shipment sale, Purchase.Shipment purchase) BY purchase PERSISTENT INDEXED; // для NOT NULL фильтров

shipped 'Кол-во (поставлено)' (shipmentDetail) = GROUP SUM quantity(Purchase.ShipmentDetail detail) IF isPosted(detail)
                                                                   BY shipmentDetail(detail) PERSISTENT;

toShip 'Не поставлено' (ShipmentDetail shipmentDetail) = quantity (shipmentDetail) (-) shipped(shipmentDetail);

CLASS PurchaseShipment 'Поставка на основе поставки': Purchase.Shipment;
CLASS PurchaseShipmentDetail 'Строка поставки на основе поставки' : Purchase.ShipmentDetail;

@defineDocumentTables(purchaseShipment);

@defineDocumentAggregation(shipment, purchaseShipment, createPurchase);
shipment(PurchaseShipmentDetail detail) += purchaseShipment(detail);

index(PurchaseShipmentDetail detail) += index(detail);

date(PurchaseShipment shipment) += purchaseShipmentDate(shipment(shipment));
time(PurchaseShipment shipment) += purchaseShipmentTime(shipment(shipment));

@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, supplier, 'Склад поставщика', , );
supplierStock(PurchaseShipment shipment) += supplierStock(shipment);
@defineDocumentAggregationStockPrefix(shipment, purchaseShipment, customer, 'Склад покупателя', , );
customerStock(PurchaseShipment shipment) += customerStock(shipment);

@defineDocumentAggregationLegalEntityPrefix(shipment, purchaseShipment, supplier, 'Поставщик', , );
supplier(PurchaseShipment shipment) += supplier(shipment);
@defineDocumentAggregationLegalEntityPrefix(shipment, purchaseShipment, customer, 'Покупатель', , );
customer(PurchaseShipment shipment) += customer(shipment);

@defineDocumentAggregationPosted(shipment, purchaseShipment);
isPosted(PurchaseShipment shipment) += isPosted(shipment);

@defineDocumentAggregationClosed(shipment, purchaseShipment);
isClosed(PurchaseShipment shipment) += isClosed(shipment);

number(PurchaseShipment shipment) += number(shipment(shipment));
series(PurchaseShipment shipment) += series(shipment(shipment));
seriesNumber 'Серия/номер документа' (PurchaseShipment purchaseShipment) = seriesNumber(shipment(purchaseShipment));

noteShipment 'Примечание' (PurchaseShipment purchaseShipment) = note(shipment(purchaseShipment));
note(PurchaseShipment shipment) += noteShipment(shipment);

currency  (PurchaseShipment purchaseShipment) = currency(shipment(purchaseShipment));
currency (PurchaseShipment shipment) += currency(shipment);

@defineDocumentDescription(purchaseShipment, PurchaseShipmentDetail, 'Поставка на основе поставки ');
description (PurchaseShipment shipment) += description(shipment);
operation(PurchaseShipment shipment) += purchaseOperation(shipment(shipment));

@defineDocumentAggregationDetailSku(shipment, purchaseShipment, sku);
sku(PurchaseShipmentDetail shipmentDetail) +=  sku(shipmentDetail);

@defineDocumentAggregationDetailBatch(shipment, purchaseShipment);
batch(PurchaseShipmentDetail shipmentDetail) += batch(shipmentDetail);

quantity(PurchaseShipmentDetail shipmentDetail) += quantity(shipmentDetail(shipmentDetail));
expiryDate(PurchaseShipmentDetail shipmentDetail) += expiryDate(shipmentDetail(shipmentDetail));

price(PurchaseShipmentDetail shipmentDetail) += price(shipmentDetail(shipmentDetail));

sum(PurchaseShipmentDetail shipmentDetail) += sum(shipmentDetail(shipmentDetail));

edit(PurchaseShipment shipment) += ACTION EXEC edit(shipment(shipment));
close(PurchaseShipment shipment) += ACTION EXEC close(shipment(shipment));
createdUser(PurchaseShipment shipment) += createdUser(shipment(shipment));

showPack(PurchaseShipment shipment) +=  showPack(shipment(shipment));
barcodePack(PurchaseShipmentDetail shipmentDetail) += barcodePack(shipmentDetail(shipmentDetail));
amountPack(PurchaseShipmentDetail shipmentDetail) +=  amountPack(shipmentDetail(shipmentDetail));
packQuantity(PurchaseShipmentDetail shipmentDetail) +=  packQuantity(shipmentDetail(shipmentDetail));

shipmentDetail(PurchaseShipmentDetail shipmentDetail) += shipmentDetail(shipmentDetail);

edit(PurchaseShipmentDetail shipmentDetail) += ACTION edit(shipmentDetail(shipmentDetail));
show(PurchaseShipmentDetail shipmentDetail) += ACTION show(shipmentDetail(shipmentDetail));
// Создание поставки на основе поставки //

FORM shipmentShipments 'Поставки'
    OBJECTS s = LegalEntity FIXED PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity FIXED PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = Stock FIXED PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = Stock FIXED PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS o = Shipment
    PROPERTIES (o) READONLY isPosted, number, series, date, time, nameCurrency,
                            countShipmentDetail, quantityShipmentDetail, sumShipmentDetail,
                            note
    FILTERS supplier(o) == s,
            customer(o) == c,
            supplierStock(o) == ss,
            customerStock(o) == cs,
            isPosted(o) AND NOT createPurchase(o)

    OBJECTS d = ShipmentDetail

    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                            quantity
    PROPERTIES (d) READONLY SHOWIF showPack(o) idBarcodePack, shortNameUOMPack, amountPack, packQuantity
    PROPERTIES (d) READONLY price, sum,
                            nameSupplierStock, toShip BACKGROUND backgroundPurchase(o)
    FILTERS shipment(d) == o
;

DESIGN shipmentShipments {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {

            type = CONTAINERV;
            NEW headerBox {
                type = CONTAINERH;
                NEW headerBox1 {
                    type = CONTAINERH;
                    caption = 'Поставщик';
                    MOVE s.box;
                    MOVE ss.box;
                }
                NEW headerBox2 {
                    type = CONTAINERH;
                    caption = 'Покупатель';
                    MOVE c.box;
                    MOVE cs.box;
                }
            }
            MOVE o.box;
            NEW documentDetail {
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
}


fillShipment 'Заполнить на основе поставки'(Purchase.UserShipment userShipment) =  ACTION {       // подставляем все количество ???
    FORM shipmentShipments OBJECTS s = supplier(userShipment), c = customer(userShipment),
                                   ss = supplierStock(userShipment), cs = customerStock(userShipment) MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL saleShipment = Shipment();
        saleShipment() <- chosenObject('o');

        FOR shipment(ShipmentDetail shipmentDetail) == saleShipment() ADDOBJ d = Purchase.UserShipmentDetail DO {
            userShipment(d) <- userShipment;
            shipmentDetail(d) <- shipmentDetail;

            price(d) <- price(shipmentDetail);

            sku(d) <- sku(shipmentDetail);
            batch(d) <- batch(shipmentDetail);
            quantity (d) <- quantity(shipmentDetail);

            barcodePack(d) <- barcodePack(shipmentDetail);
            amountPack(d) <- amountPack(shipmentDetail);
            packQuantity(d) <- packQuantity(shipmentDetail);
        }
    }
} IN shipment;

EXTEND FORM Purchase.userShipment
    PROPERTIES(s) fillShipment, saleShipments READONLY
    PROPERTIES(d) descriptionIndexShipmentDetail BEFORE deletesd
;
DESIGN Purchase.userShipment { headerCreateDetail{ MOVE s.shipment { type = CONTAINERV; }}}

EXTEND FORM Purchase.shipments
    PROPERTIES(d) READONLY descriptionIndexShipmentDetail SHOWIF relationPurchase(s)
;

//-- Действие

moveUserShipment 'Поставка (закупка)'(Shipment shipment) =  ACTION NEWSESSION{

    FOR ADDOBJ s = Purchase.UserShipment DO {
        supplier(s) <- supplier(shipment);
        customer(s) <- customer(shipment);
        supplierStock(s) <- supplierStock(shipment);
        customerStock(s) <- customerStock(shipment);
        number(s) <- number(shipment);
        series(s) <- series(shipment);
        note(s) <- note(shipment);
        currency(s) <- currency(shipment);

        showPack(s) <- showPack(shipment);
        operation(s) <- purchaseOperation(operation(shipment));

        FOR shipment(ShipmentDetail detail)==shipment ADDOBJ d = Purchase.UserShipmentDetail DO {

            userShipment(d) <- s;
            shipmentDetail(d) <- detail;

            sku(d) <- sku(detail);
            quantity (d) <- quantity(detail);
            price (d) <- price(detail);

            barcodePack (d) <- barcodePack(detail);
            amountPack (d) <- amountPack(detail);
            packQuantity (d) <- packQuantity(detail);

            batch(d) <- batch(detail);
        }

    FORM Purchase.userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
} TOOLBAR;

EXTEND FORM shipments
    PROPERTIES(s) moveUserShipment
;
DESIGN shipments {
    createdContainer{
        MOVE PROPERTY(moveUserShipment(s));
    }
}

