MODULE SalePurchaseInvoiceShipment;

REQUIRE PurchaseShipment, SalePurchaseInvoice, SaleShipment, SalePurchaseShipment;

PRIORITY Sale;

//----------------------------------------------------------------------------//

GROUP shipment 'Информация о поставке' : base;

// Галочка по созданию акта расценки на закупке
@defineDocumentInterfaceProperty (invoice, createPurchaseShipment, 'Создать поставку (закупка)');

// -- Операция
@defineOperationProperty(createPurchaseShipment, 'Поставка (закупка)', purchaseContainer);
@deriveDocumentOperationProperty(UserInvoice, createPurchaseShipment);
createPurchaseUserShipment (o) <- createPurchaseShipmentOperation(operationUserShipment(o))
    WHEN CHANGED(operationUserShipment(o));

backgroundPurchaseShipmentInvoice 'Цвет' (invoice) = RGB(238, 250, 200) IF invoice IS Invoice;
//--
Purchase.createShipmentInvoice(invoice) += createPurchaseShipmentInvoice(invoicePurchaseInvoice(invoice));

@defineDocumentInterfaceDetailPricePrefix(invoice, purchaseShipment, ' учетная (закупка)');
@defineDocumentInterfaceDetailQuantityPrefix (invoice, purchaseShipment, ' поставлено (закупка)');
purchaseShipmentQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail) WHEN CHANGED(quantityUserInvoiceDetail(detail));

@defineDocumentInterfaceDetailExpiryDatePrefix(invoice, purchase);
purchaseExpiryDateUserInvoiceDetail(detail) <- prevExpiryDateBatch(batchUserInvoiceDetail(detail)) WHEN CHANGED (batchUserInvoiceDetail(detail));
Purchase.expiryDateInvoiceDetail(detail) += purchaseExpiryDateUserInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(detail));

@defineDocumentInterfaceDetailManufactureDatePrefix(invoice, purchase);
purchaseManufactureDateUserInvoiceDetail(detail) <- prevExpiryDateBatch(batchUserInvoiceDetail(detail)) WHEN CHANGED (batchUserInvoiceDetail(detail));
Purchase.manufactureDateInvoiceDetail(detail) += purchaseManufactureDateUserInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(detail));

@defineDocumentInterfaceHeaderTimePrefix(Invoice, purchaseShipment, ' поставки (закупка)');
WHEN SESSION (CHANGED(shipmentDateUserInvoice(i)) OR CHANGED(shipmentTimeUserInvoice(i)) AND createPurchaseShipmentUserInvoice(i)) OR  
              SET(createPurchaseShipmentUserInvoice(i)) DO {
    purchaseShipmentDateUserInvoice(i) <- shipmentDateUserInvoice(i);    
    purchaseShipmentTimeUserInvoice(i) <- shipmentTimeUserInvoice(i);    
}

@defineDocumentInterfaceDetailDataSumPrefix (invoice, purchaseShipment, ' учетная (закупка)');
@deriveDocumentDetailSumPrefix(userInvoice, purchaseShipment, currency, purchaseShipmentQuantity);

@defineDocumentInterfaceHeaderCreateShipment (invoice);
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseShipment, ' учетная (закупка)');

Purchase.shipmentDateInvoice(invoice) += purchaseShipmentDateInvoice(invoicePurchaseInvoice(invoice));
Purchase.shipmentTimeInvoice(invoice) += purchaseShipmentTimeInvoice(invoicePurchaseInvoice(invoice));

Purchase.shipmentQuantityInvoiceDetail(detail) += purchaseShipmentQuantityInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(detail));
Purchase.shipmentPriceInvoiceDetail(detail) += purchaseShipmentPriceInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(detail));
Purchase.shipmentSumInvoiceDetail (detail) += purchaseShipmentSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(detail));
Purchase.editInvoiceDetail (detail) += editInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(detail));

showPurchaseShipmentUserInvoice(i) = createPurchaseShipmentUserInvoice(i) OR createPurchaseInvoiceUserInvoice(i); 
showPurchaseShipmentUserInvoiceDetail(d) = showPurchaseShipmentUserInvoice(userInvoiceUserInvoiceDetail(d)); 

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchaseShipmentInvoice(i) SHOWIF createPurchaseInvoiceUserInvoice(i) createPurchaseShipmentUserInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchaseShipmentInvoice(i) SHOWIF createPurchaseShipmentUserInvoice(i) purchaseShipmentSumUserInvoiceDetailUserInvoice,
                  purchaseShipmentDateUserInvoice, purchaseShipmentTimeUserInvoice
    PROPERTIES(d) BEFORE deleteid SHOWIF createPurchaseShipmentInvoice(i) BACKGROUND backgroundPurchaseShipmentInvoice(i)
                  purchaseExpiryDateUserInvoiceDetail, nameCustomerStockUserInvoiceDetail, purchaseShipmentSumUserInvoiceDetail
    PROPERTIES(d) BEFORE purchaseShipmentSumUserInvoiceDetail(d) SHOWIF showPurchaseShipmentUserInvoice(i) BACKGROUND backgroundPurchaseShipmentInvoice(i)
                  purchaseShipmentPriceUserInvoiceDetail  
    PROPERTIES(d) purchaseShipmentQuantityUserInvoiceDetail AFTER quantityUserInvoiceDetail(d) SHOWIF createPurchaseShipmentInvoice(i) BACKGROUND backgroundPurchaseShipmentInvoice(i)
;
EXTEND DESIGN userInvoice {
    headerCreateDocuments{
        NEW headerCreatePurchaseShipment {
            caption = 'Поставка (закупка)';
            type = CONTAINERH;
            ADD PROPERTY(createPurchaseShipmentUserInvoice(i));
            ADD PROPERTY(purchaseShipmentDateUserInvoice(i));
            ADD PROPERTY(purchaseShipmentTimeUserInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundPurchaseShipmentInvoice(i) purchaseShipmentSumInvoiceDetailInvoice BEFORE ordersInvoice(i)
    PROPERTIES(d) READONLY SHOWIF createPurchaseShipmentInvoice(i) BACKGROUND backgroundPurchaseShipmentInvoice(i)
                  purchaseExpiryDateInvoiceDetail, nameCustomerStockInvoiceDetail, purchaseShipmentPriceInvoiceDetail, purchaseShipmentSumInvoiceDetail
    PROPERTIES(d) READONLY purchaseShipmentQuantityInvoiceDetail AFTER quantityInvoiceDetail(d) SHOWIF createPurchaseShipmentInvoice(i) BACKGROUND backgroundPurchaseShipmentInvoice(i)
;

// ------------------------------- Расчет учетной цены для поставки ------------------------ //
overPurchaseShipmentPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
calcPurchaseShipmentPriceUserInvoiceDetail (detail) = OVERRIDE priceUserInvoiceDetail(detail), overPurchaseShipmentPriceUserInvoiceDetail(detail) PERSISTENT;

extraPurchaseShipmentPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;    // на всякий случай

// Цены учетные

purchaseShipmentPriceUserInvoiceDetail(detail) <- calcPurchaseShipmentPriceUserInvoiceDetail(detail) (+) extraPurchaseShipmentPriceUserInvoiceDetail(detail) WHEN
    (CHANGED(calcPurchaseShipmentPriceUserInvoiceDetail(detail)) OR
     CHANGED(extraPurchaseShipmentPriceUserInvoiceDetail(detail)) OR
     CHANGED(showPurchaseShipmentUserInvoiceDetail(detail)))
        AND showPurchaseShipmentUserInvoiceDetail(detail);

receiveShipmentInvoice (invoice)+= ACTION (invoice)  {
    IF invoice IS PurchaseInvoice THEN {
        createPurchaseShipmentInvoice(i) <- TRUE WHERE i == invoicePurchaseInvoice(invoice);
        purchaseShipmentDateInvoice(i) <- currentDate() WHERE i == invoicePurchaseInvoice(invoice);
        purchaseShipmentTimeInvoice(i) <- currentTime() WHERE i == invoicePurchaseInvoice(invoice);
    } 
};

deleteCreateShipment (shipment)+= WHEN Purchase.invoiceInvoiceShipment(shipment) IS PurchaseInvoice THEN  ACTION (shipment)  {
    createPurchaseShipmentInvoice(invoice) <- NULL WHERE invoice == invoicePurchaseInvoice(Purchase.invoiceInvoiceShipment(shipment));          
};
