MODULE SaleShipment;

REQUIRE Shipment, SaleInvoice, SaleOperation, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger;

NAMESPACE Sale;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Поставки', ' (продажа)', supplier, company, customer, company, Sale);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, company);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, customer);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, supplier, company);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, customer, customer);

@defineShipmentBatch(supplierStock);
@implementDocumentBatch(shipment);

@defineShipmentBatchDialogStock(supplierStock);

expiryDateUserShipmentDetail(detail) <- prevExpiryDateBatch(batchUserShipmentDetail(detail)) WHEN CHANGED (batchUserShipmentDetail(detail));

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (продажа)', supplierStock);
@defineInvoiceShipment(' (продажа)', supplierStock, company, Sale);
@defineInvoiceShipmentAction(' (продажа)');

@defineInvoiceShipmentBatch();

@defineDocumentSkuStockSupplier (userShipment, userShipment, s);
@defineDocumentBatchStockSupplier(userShipment, userShipment, s);

@defineOrderShipmentExecution(); 
@defineOrderInvoiceSupplierExecution(sale, ' (продажа)');

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperationContainer(shipment, s);
Shipment.operationShipment(s)+=operationShipment(s);
@extendFormFilterRoleAccess(shipment, s, shipments);
@defineDocumentOperationConstraint(shipment, shipments, 'поставка (продажа)', Sale);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRole(userShipment);

@defineOperationProperty(createShipment, 'Поставка', saleContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    ASSIGN operationUserShipment(s) <- operationInvoice(i);
}
operationShipment(shipment) += operationInvoice(invoiceInvoiceShipment(shipment));

// Добавляем в копирование поставок
overCopyShipment(s, d) += ACTION(s, d) {
    ASSIGN operationUserShipment(d) <- operationShipment(s);
}
@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterShipmentSupplier() AND NOT isCompanyLegalEntity(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterShipmentCustomer() AND NOT isCustomerLegalEntity(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся покупателем';       

CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT inLegalEntityStock(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT inLegalEntityStock(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';  
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPackUserShipment(s));
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, company, customer, userShipment);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserShipmentSku (userShipment, sku)= inCustomerSku(customerUserShipment(userShipment), sku);
EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuUserShipment(ks, s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetailSkuUserShipment(ks, s) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' inUserShipmentSku(s, ks) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceSkuUserShipment(ks, s)

;
inUserShipmentBatch (userShipment, batch)= inCustomerSku(customerUserShipment(userShipment), skuBatch(batch));
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchUserShipment(b,s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetailBatchUserShipment(b,s) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' inUserShipmentBatch(s,b) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceBatchUserShipment(b, s)

;

// Резервы
@extendFormDocumentSkuOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

disableUpdateShipmentPriceUserInvoiceDetail = ABSTRACT BOOLEAN (UserInvoiceDetail);
WHEN SESSION (CHANGED(skuUserInvoiceDetail(detail)) OR
              CHANGED(supplierStockUserInvoiceDetail(detail)) OR
              CHANGED(dateTimeUserInvoiceDetail(detail)) OR
              CHANGED(batchUserInvoiceDetail(detail))) AND NOT CHANGED(shipmentPriceUserInvoiceDetail(detail)) AND NOT disableUpdateShipmentPriceUserInvoiceDetail(detail) DO 
    shipmentPriceUserInvoiceDetail (detail)  <- IF batchUserInvoiceDetail(detail)

                                                    THEN prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType,
                                                                                                   batchUserInvoiceDetail(detail),
                                                                                                   supplierStockUserInvoiceDetail(detail),
                                                                                                   dateTimeUserInvoiceDetail(detail))
                                                    ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType,
                                                                                                 skuUserInvoiceDetail(detail),
                                                                                                 supplierStockUserInvoiceDetail(detail),
                                                                                                 dateTimeUserInvoiceDetail(detail));

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerOut(Shipment, supplierStock);
typeStockDocumentLedger(l) += 'Продажа' IF l IS Shipment;
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

legalEntityStockDocumentLedger(ledger) += customerShipment(ledger);  
legalEntityStockStockDocumentLedger(ledger) += customerStockShipment(ledger);  

operationStockDocumentLedger(ledger) += operationShipment(ledger);

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerOutFIFO(ShipmentDetail, sku, supplierStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail (ledger);
batchSkuLedger(ledger) += batchShipmentDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, supplierStock);
sumOutSkuLedger(ledger) += sumShipmentDetail(ledger);

stockDocumentLedgerSkuLedger(ledger) += shipmentShipmentDetail(ledger); 

costShipmentDetailBatch(detail, batch) += costSkuLedgerBatch(detail, batch) IF detail IS ShipmentDetail;

editSkuLedger(d) += ACTION editShipmentDetail(d);  

// ------------------------------- Себестоимость продажи ------------------------ //
costSaleInvoiceDetail (invoiceDetail) = GROUP SUM costSumSkuLedger(shipmentDetail) BY invoiceDetailShipmentDetail(shipmentDetail);
costSumSaleLedger(ledger) += costSaleInvoiceDetail(ledger);

NAVIGATOR {
    saleStockNavigator {
        ADD shipments;
    }
}

sumWholesaleMarkupInvoiceDetail(detail) = sumInvoiceDetail(detail) - shipmentSumInvoiceDetail(detail);
sumWholesaleMarkupInvoiceDetailInvoice(invoice) = GROUP SUM sumWholesaleMarkupInvoiceDetail(detail) BY invoiceInvoiceDetail(detail);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEditShipment (i) += showEditDeleteUserShipment(i) AND isOpenedShipment(i);
overShowDeleteShipment (i) += showEditDeleteUserShipment(i) AND isUserOpenedShipment(i); 

fillShipmentPriceAll 'Переписать учетную цену в накладных (продажа)'  = ACTION () {
    FOR detail IS UserInvoiceDetail AND NOT disableUpdateShipmentPriceUserInvoiceDetail(detail) 
        AND isOpenedUserInvoice(userInvoiceUserInvoiceDetail(detail))  DO {
        shipmentPriceUserInvoiceDetail (detail)  <- IF batchUserInvoiceDetail(detail)    
                                                        THEN prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType,
                                                                                                       batchUserInvoiceDetail(detail),
                                                                                                       supplierStockUserInvoiceDetail(detail),
                                                                                                       dateTimeUserInvoiceDetail(detail))
                                                        ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType,
                                                                                                     skuUserInvoiceDetail(detail),
                                                                                                     supplierStockUserInvoiceDetail(detail),
                                                                                                     dateTimeUserInvoiceDetail(detail));    
    }
}

EXTEND FORM options
    PROPERTIES() SaleFillShipmentPriceAll = fillShipmentPriceAll
;

DESIGN options {
    invoices {
        invoiceSale {
            MOVE PROPERTY(SaleFillShipmentPriceAll);
        }            
    }
}