MODULE SaleShipment;

REQUIRE Shipment, SaleInvoice, SaleOperation, OrderShipment, InvoiceShipment, PriceListLedger;

NAMESPACE Sale;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Поставки', ' (продажа)', supplierStock, company, customer, company);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, company);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, customer);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, supplier, company);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, customer, customer);

@defineShipmentBatch(supplierStock);
@defineShipmentBatchDialogStock(supplierStock);

expiryDateUserShipmentDetail(detail) <- prevExpiryDateBatch(batchUserShipmentDetail(detail)) WHEN CHANGED (batchUserShipmentDetail(detail));

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (продажа)', supplierStock);
@defineInvoiceShipment(' (продажа)', supplierStock, company);
@defineInvoiceShipmentAction(' (продажа)');

@defineInvoiceShipmentBatch();

@defineDocumentSkuStockSupplier (userShipment, userShipment, s);
@defineDocumentBatchStockSupplier(userShipment, userShipment, s);

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperationContainer(shipment, s);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplierStock, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplierStock, userShipment);
@defineDocumentOperationStock(userShipment, customerStock, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customerStock, userShipment);

@defineDocumentOperationRole(userShipment);

@defineOperationProperty(createShipment, 'Поставка', saleContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    ASSIGN operationUserShipment(s) <- operationInvoice(i);
}
operationShipment(shipment) += operationInvoice(invoiceInvoiceShipment(shipment));

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isCompanyLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCustomerLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserShipment);
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, company, customer, userShipment);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inUserShipmentSku (userShipment, sku)= inCustomerSku(customerUserShipment(userShipment), sku);
EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserShipment(ks, s) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailSkuUserShipment(ks, s)

    FILTERGROUP filter2
        FILTER 'С продажей ' 'F8' inUserShipmentSku(s, ks)
//        FILTER 'В ассортименте' 'F7' ledgerPriceSkuUserShipment(ks, s)

;
inUserShipmentBatch (userShipment, batch)= inCustomerSku(customerUserShipment(userShipment), skuBatch(batch));
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserShipment(b,s) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailBatchUserShipment(b,s)

    FILTERGROUP filter4
        FILTER 'С продажей ' 'F8' inUserShipmentBatch(s,b)
//        FILTER 'В ассортименте' 'F7' ledgerPriceBatchUserShipment(b, s)

;

// Резервы
@extendFormDocumentSkuOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, supplierStock);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// ------------------------------- Проведение по регистру остатков ------------------------ //

@implementSkuLedgerOutFIFO(ShipmentDetail, sku, supplierStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail (ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, supplierStock);
sumOutSkuLedger(ledger) += sumShipmentDetail(ledger);
seriesDataSkuLedger (ledger) += seriesShipment(shipmentShipmentDetail(ledger));
numberDataSkuLedger (ledger) += numberShipment(shipmentShipmentDetail(ledger));
legalEntityDataSkuLedger (ledger) += customerShipment(shipmentShipmentDetail(ledger));
legalEntityStockDataSkuLedger (ledger) += customerStockShipment(shipmentShipmentDetail(ledger));

costShipmentDetailBatch(detail, batch) += costSkuLedgerBatch(detail, batch) IF detail IS ShipmentDetail;

// ------------------------------- Проведение по товарному отчету ------------------------ //

@implementStockDocumentLedgerOut(Shipment, supplierStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

// ------------------------------- Себестоимость продажи ------------------------ //
costSaleInvoiceDetail (invoiceDetail) = GROUP SUM costSumSkuLedger(shipmentDetail) BY invoiceDetailShipmentDetail(shipmentDetail);
costSumSaleLedger(ledger) += costSaleInvoiceDetail(ledger);

NAVIGATOR {
    saleStockNavigator {
        ADD shipments;
    }
}

sumWholesaleMarkupInvoiceDetail(detail) = sumInvoiceDetail(detail) - shipmentSumInvoiceDetail(detail);
sumWholesaleMarkupInvoiceDetailInvoice(invoice) = GROUP SUM sumWholesaleMarkupInvoiceDetail(detail) BY invoiceInvoiceDetail(detail);