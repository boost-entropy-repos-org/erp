MODULE SaleShipment;

REQUIRE Shipment, SaleInvoice, SaleOperation, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger;

NAMESPACE Sale;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Поставки', ' (продажа)', supplier, company, customer, company, Sale);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, company);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, customer);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, supplier, company);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, customer, customer);

@defineShipmentBatch(supplierStock);
@implementDocumentBatch(shipment);

@defineShipmentBatchDialogStock(supplierStock, Out);

expiryDate(UserShipmentDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (продажа)', supplierStock);
@defineInvoiceShipment(' (продажа)', supplierStock, company, Sale);
@defineInvoiceShipmentAction(' (продажа)');

@defineInvoiceShipmentBatch();

@defineDocumentSkuStockSupplier (userShipment, userShipment, s);
@defineDocumentBatchStockSupplier(userShipment, userShipment, s);

@defineOrderShipmentExecution(); 
@defineOrderInvoiceSupplierExecution(sale, ' (продажа)');

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperationContainer(shipment, s);
operation[Shipment.Shipment](Shipment s)+=operation(s);
@extendFormFilterRoleAccess(shipment, s, shipments);
@defineDocumentOperationConstraint(shipment, 'поставка (продажа)', Sale);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRole(userShipment);

@defineOperationProperty(createShipment, 'Поставка', saleContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoice(UserShipment s, Invoice i) += ACTION  {
    ASSIGN operation(s) <- operation(i);
}
operation(InvoiceShipment shipment) += operation(invoice(shipment));

// Добавляем в копирование поставок
overCopy(Shipment s, UserShipment d) += ACTION {
    ASSIGN operation(d) <- operation(s);
}
@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserShipment userShipment) AND NOT isCompany(supplier(userShipment))
    CHECKED BY supplier[UserShipment] MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserShipment userShipment) AND NOT isCustomer(customer(userShipment))
    CHECKED BY customer[UserShipment] MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterShipmentSupplier() AND NOT isCompany(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier[] MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterShipmentSupplierStock() AND NOT isCompany(filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Для фильтра в поставке выбран в качестве склада поставщика склад, который не принадлежит компании';              
CONSTRAINT filterShipmentCustomer() AND NOT isCustomer(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer[] MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся покупателем';       

CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT in(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT in(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';  
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
packQuantity[Shipment.ShipmentDetail](ShipmentDetail detail) += packQuantity(detail);
DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(s));
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, company, customer, userShipment);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserShipment userShipment, Sku sku)= inCustomer(customer(userShipment), sku);
EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetail(ks, s) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' in(s, ks) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceSkuUserShipment(ks, s)

;
in (UserShipment userShipment, Batch batch)= inCustomer(customer(userShipment), sku(batch));
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b,s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetail(b,s) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' in(s,b) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceBatchUserShipment(b, s)

;

// Резервы
@extendFormDocumentSkuOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

disableUpdateShipmentPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
WHEN SESSION (CHANGED(sku(UserInvoiceDetail detail)) OR
              CHANGED(supplierStock(detail)) OR
              (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
              CHANGED(batch(detail))) AND NOT CHANGED(shipmentPrice(detail)) AND NOT disableUpdateShipmentPrice(detail) DO 
    shipmentPrice (detail)  <- IF batch(detail) AND NOT notUseBatchPrice(detail)

                                                    THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                                   batch(detail),
                                                                                                   supplierStock(detail),
                                                                                                   dateTime(detail))
                                                    ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                                 sku(detail),
                                                                                                 supplierStock(detail),
                                                                                                 dateTime(detail));

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, , , sku, supplierStock);

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerOut(Shipment, supplierStock);
type(Shipment l) += 'Продажа' IF l IS Shipment;
sumItem (Shipment ledger) += sumItemShipmentDetail(ledger);
sumContainer (Shipment ledger) += sumContainerShipmentDetail(ledger);

legalEntity(Shipment ledger) += customer(ledger);  
legalEntityStock(Shipment ledger) += customerStock(ledger);  

operation[StockDocumentLedger](Shipment ledger) += operation(ledger);

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerOutFIFO(ShipmentDetail, sku, supplierStock);
quantity[OutFIFOSkuLedger] (ShipmentDetail ledger) += quantity (ledger);
batch[SkuLedger](ShipmentDetail ledger) += batch(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, supplierStock);
sum[OutSkuLedger](ShipmentDetail ledger) += sum(ledger);

stockDocumentLedger(ShipmentDetail ledger) += shipment(ledger); 

cost(ShipmentDetail detail, Batch batch) += cost[SkuLedger,Batch](detail, batch) IF detail IS ShipmentDetail;

edit[SkuLedger](ShipmentDetail d) += ACTION edit(d);  

// ------------------------------- Себестоимость продажи ------------------------ //
costSale (invoiceDetail) = GROUP SUM costSum[SkuLedger](ShipmentDetail shipmentDetail) BY invoiceDetail(shipmentDetail);
costSum(InvoiceDetail ledger) += costSale(ledger);
cost(InvoiceDetail ledger, Batch batch) += cost (ledger, batch);

skip (InvoiceDetail ledger) += WHEN userShippedQuantity(operation(ledger)) AND NOT shipped(ledger) THEN TRUE;
overQuantity(InvoiceDetail detail) += shipped(detail) IF userShippedQuantity(operation(detail));

NAVIGATOR {
    saleStockNavigator {
        ADD shipments;
    }
}

sumWholesaleMarkup(InvoiceDetail detail) = sum(detail) - shipmentSum(detail);
sumWholesaleMarkupInvoiceDetail(invoice) = GROUP SUM sumWholesaleMarkup(InvoiceDetail detail) BY invoice(detail);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEdit (Shipment i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserShipment i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i); 

fillShipmentPriceAll 'Переписать учетную цену в накладных (продажа)'()  = ACTION  {
    FOR UserInvoiceDetail detail IS UserInvoiceDetail AND NOT disableUpdateShipmentPrice(detail) 
        AND isOpened(userInvoice(detail))  DO {
        shipmentPrice (detail)  <- IF batch(detail)    
                                                        THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                                       batch(detail),
                                                                                                       supplierStock(detail),
                                                                                                       dateTime(detail))
                                                        ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType,
                                                                                                     sku(detail),
                                                                                                     supplierStock(detail),
                                                                                                     dateTime(detail));    
    }
}

EXTEND FORM options
    PROPERTIES() SaleFillShipmentPriceAll = fillShipmentPriceAll
;

DESIGN options {
    invoices {
        invoiceSale {
            MOVE PROPERTY(SaleFillShipmentPriceAll);
        }            
    }
}
CONSTRAINT isPosted(ShipmentDetail d) AND isShipmentPrice(operation(d)) AND NOT price(d)
    MESSAGE 'Для документа (продажа) должна быть задана учетная цена';