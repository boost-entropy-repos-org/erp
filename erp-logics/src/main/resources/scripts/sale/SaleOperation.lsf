MODULE SaleOperation;

REQUIRE Operation, PriceListType, Sale;

NAMESPACE Sale;

@defineOperation('(продажа)');
nameReturnOperation 'Наименование (возврат)' = DATA VARISTRING[100](Operation);
Operation.nameReturnOperation(operation) += nameReturnOperation(operation);
EXTEND FORM operation 
    PROPERTIES(o)  nameReturnOperation AFTER nameOperation(o)
;  
DESIGN operation {
    propertyContainer{
        MOVE PROPERTY(nameReturnOperation(o)) AFTER PROPERTY(nameOperation(o));
    }
} 
overNameOperation = OVERRIDE nameOperation(o), nameReturnOperation(o);
 
@defineOperationPriceListType();

TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);

@defineOperationLegalEntity(supplier, , s, 'Поставщики');
@defineCountLegalEntityOperation(supplier, company);
@defineOperationLegalEntity(customer, , c, 'Покупатели');
@defineCountLegalEntityOperation(customer, buyer);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);

@defineOperationStock(supplier, sts, 'Склады поставщика');
@defineCountStockOperation(supplier, company, seller);
@defineOperationStock(customer, stc, 'Склады покупателя');
@defineCountStockOperation(customer, customer, buyer);

// Подсчет операций для складов поставщика и покупателя по-умолчанию            
countOperationSupplierStockCustomerStock (supplierStock, customerStock) = GROUP SUM 1 
    IF inSupplierStockOperation(supplierStock,operation)
    AND isCompanyStock(supplierStock) 
    AND inSupplierOperation(legalEntityStock(supplierStock),operation)
    AND isSellerLegalEntity(legalEntityStock(supplierStock))                                                     
    AND inCustomerStockOperation(customerStock,operation)
    AND isCustomerStock(customerStock) 
    AND inCustomerOperation(legalEntityStock(customerStock),operation)
    AND isBuyerLegalEntity(legalEntityStock(customerStock))                                                                                                       
        BY supplierStock, customerStock;
                                                        
                                                        
defaultOperationSupplierStockCustomerStock (supplierStock, customerStock) = GROUP MIN operation 
    IF inSupplierStockOperation(supplierStock,operation)
    AND isCompanyStock(supplierStock) 
    AND inSupplierOperation(legalEntityStock(supplierStock),operation)
    AND isSellerLegalEntity(legalEntityStock(supplierStock))                                                     
    AND inCustomerStockOperation(customerStock,operation)
    AND isCustomerStock(customerStock) 
    AND inCustomerOperation(legalEntityStock(customerStock),operation)
    AND isBuyerLegalEntity(legalEntityStock(customerStock))                                                                                                       
        BY supplierStock, customerStock;

EXTEND FORM operation
    FILTERS countCompanyStockStockGroup(stsg),
            isCompanyStock(sts),
            countCustomerStockStockGroup(stcg),
            isCustomerStock(stc),
            inSupplierOperation(legalEntityStock(sts), o),
            inCustomerOperation(legalEntityStock(stc), o),
            isSellerLegalEntity(legalEntityStock(sts)),
            isBuyerLegalEntity(legalEntityStock(stc))
;

@defineOperationRole();
@extendFormFilterRole(o, dialogOperations);
//@extendFormFilterRole(o, operations);     //-- пока не нужен

EXTEND FORM operation
    FILTERS isCompanyLegalEntity(s),
            isBuyerLegalEntity(c)
;

countOperationSupplierCustomerSupplierStockCustomerStockUser 'Кол-во операций' (s, c, ss, cs, u) = 
    GROUP SUM 1 IF inSupplierOperation(s, o) AND inSupplierStockOperation(ss, o)
               AND inCustomerOperation(c, o) AND inCustomerStockOperation(cs, o) 
               AND inUserOperation(u, o) BY s, c, ss, cs, u COMPLEX;   

defaultOperationSupplierCustomerSupplierStockCustomerStockUser 'Операция по умолчанию' (s, c, ss, cs, u) = 
    GROUP MAX o IF inSupplierOperation(s, o) AND inSupplierStockOperation(ss, o)
               AND inCustomerOperation(c, o) AND inCustomerStockOperation(cs, o) 
               AND inUserOperation(u, o) BY s, c, ss, cs, u COMPLEX;   

DESIGN operation{
    tabContainer {
        NEW createContainer {
            caption = 'Производные документы';
            type = CONTAINERV;
            NEW saleContainer{
                type = CONTAINERV;
            }
        }
        NEW showContainer {
            caption = 'Отображение свойств';
            type = CONTAINERV;
        }
    }
}

@defineOperationProperty(showPack, 'Упаковка', showContainer);

@defineOperationProperty(skipSaleLedger, 'Не проводить по регистру продаж', showContainer);

@defineOperationProperty(individualLegalEntitySale, 'Продажа ф.л.', showContainer);

@defineOperationProperty(userShippedQuantity, 'Использовать в регистре продаж поставленное количество', showContainer);

@defineOperationProperty(preventChangesDocument, 'Запрет на изменение документа другим пользователем', showContainer);

@defineOperationProperty(useCountVAT, 'Использовать расчетную ставку НДС', showContainer);
@defineOperationProperty(disableShowBatch, 'Не показывать партии', showContainer);
@defineOperationProperty(notUseBatchPrice, 'Не использовать цены от партий', BOOLEAN, showContainer);

NAVIGATOR {
    saleMasterData {
        ADD operations;
    }
}

@defineOperationProperty(isContract, 'Должен быть задан договор', showContainer);
@defineOperationProperty(isPrice, 'Должна быть задана цена', showContainer);

@defineOperationProperty(isSaleBatch, 'Запретить оприходование накладных (продажа) без партий', BOOLEAN, showContainer);
@defineOperationProperty(isSaleReturnBatch, 'Запретить оприходование накладных (продажа-возврат) без партий', BOOLEAN, showContainer);

@defineOperationProperty(isShipmentPrice, 'Должна быть задана учетная цена', BOOLEAN, showContainer);

@defineOperationProperty(isCharLength, 'Проверять номер накладной', showContainer);