MODULE CustomsGroup;

REQUIRE Certificate, Hierarchy, Utils, Historizable, Tax, Stock;

CLASS CustomsZone 'Таможенная зона';
TABLE customsZone(CustomsZone);

nameCustomsZone 'Наименование' = DATA ISTRING[50](CustomsZone) IN recognize;

customsZoneName (name) = GROUP AGGR customsZone BY nameCustomsZone(customsZone) WHERE customsZone IS CustomsZone;

currencyCustomsZone = DATA Currency(CustomsZone);
nameCurrencyCustomsZone 'Валюта' (customsZone) = nameCurrency(currencyCustomsZone(customsZone)) IN base;

CLASS CustomsGroup 'Позиция ТН ВЭД';
TABLE customsGroup (CustomsGroup);

nameCustomsGroup 'Наименование' = DATA VARISTRING[1000](CustomsGroup);

hasCodeCustomsGroup 'Есть код' = DATA BOOLEAN (CustomsGroup) IN base;
dateFromCustomsGroup 'Дата с' = DATA DATE (CustomsGroup) IN base;
dateToCustomsGroup 'Дата по' = DATA DATE (CustomsGroup) IN base;
codeCustomsGroup 'Код' = DATA STRING[10](CustomsGroup) IN base MINCHARWIDTH 10;
customsGroupCode (code) = GROUP AGGR customsGroup BY codeCustomsGroup(customsGroup) WHERE customsGroup IS CustomsGroup;

numberCustomsGroup 'Номер строки' = DATA INTEGER(CustomsGroup) IN base;

TABLE customsGroupCustomsGroup (CustomsGroup, CustomsGroup);
@defineHierarchy(customsGroup);

customsZoneCustomsGroup = DATA CustomsZone(CustomsGroup) AUTOSET;
nameCustomsZoneCustomsGroup 'Таможенная зона' (customsGroup) = nameCustomsZone(customsZoneCustomsGroup(customsGroup)) IN base;

customsZoneCountry = DATA CustomsZone(Country);
nameCustomsZoneCountry 'Таможенная зона' (country) = nameCustomsZone(customsZoneCountry(country)) IN base;

isCompliancedDataCustomsGroup 'Необходимость сертификации' = DATA BOOLEAN (CustomsGroup) IN base;

levelParentCustomsGroup (customsGroup) = GROUP MIN levelCustomsGroupCustomsGroup(customsGroup, parent) IF isCompliancedDataCustomsGroup(parent)
                                                BY customsGroup PERSISTENT;

isCompliancedParentCustomsGroup (customsGroup) = TRUE IF levelParentCustomsGroup(customsGroup);

isCompliancedCustomsGroup 'Необходимость сертификации' (customsGroup) = OVERRIDE isCompliancedParentCustomsGroup(customsGroup), isCompliancedDataCustomsGroup(customsGroup);

TABLE customsGroupData(CustomsGroup, DATE);

//@defineHistorizableCustom(supplierVATCustomsGroup, 'НДС', Range, numberRange, customsGroup, codeCustomsGroup, base);

//dataValueSupplierVATCustomsGroupDate 'НДС, %' (customsGroup, date) = valueRateRangeDate(supplierVATCustomsGroupDate(customsGroup, date), date);
//valueCurrentRateSupplierVATCustomsGroup 'НДС, %' (customsGroup) = valueCurrentRateRange(supplierVATCustomsGroup(customsGroup));

//@defineHistorizable(percentDutyCustomsGroup, 'Пошлина (%)', NUMERIC[14,3], customsGroup, codeCustomsGroup, base);
//@defineHistorizable(weightDutyCustomsGroup, 'Пошлина (валют.)', NUMERIC[14,3], customsGroup, codeCustomsGroup, base);

//@defineHistorizable(registrationCustomsGroup, 'Таможенный сбор', NUMERIC[14,3], customsGroup, codeCustomsGroup, base);

META defineCustomsRate(class, object, caption)
    CLASS class caption;
    TABLE object(class);

    dateFrom###object 'Дата с' = DATA DATE(class) IN base;
    dateTo###object 'Дата по' = DATA DATE(class) IN base;
    customsGroup###object = DATA CustomsGroup(class) AUTOSET;
    nameCustomsGroup###object 'ТН ВЭД' (customsRate) = nameCustomsGroup(customsGroup###object(customsRate)) IN base MAXCHARWIDTH 50;

    order###object = STRUCT(dateFrom###object(object), object) PERSISTENT;

    concat###object##CustomsGroupDate (customsGroup, date) = GROUP MAX order###object(object) IF
                                                                       (dateFrom###object(object) < date AND
                                                                       dateTo###object(object) > date)
                                                                    BY customsGroup###object(object), date;

    object##CustomsGroupDate (customsGroup, date) = concat###object##CustomsGroupDate(customsGroup, date)[2];
END

@defineCustomsRate(VATCustomsRate, VATCustomsRate, 'Ставка НДС');
@defineCustomsRate(DutyCustomsRate, dutyCustomsRate, 'Ставка пошлины');
@defineCustomsRate(RegistrationCustomsRate, registrationCustomsRate, 'Ставка таможенного сбора');

@defineCustomsRate(VATCustomsException, VATCustomsException, 'Льгота НДС');
EXTEND CLASS VATCustomsException {
    none 'Отсутствует'
}

@defineExternalizable(VATCustomsRate, STRING[100]);
@defineExternalizable(dutyCustomsRate, STRING[100]);
@defineExternalizable(registrationCustomsRate, STRING[100]);
@defineExternalizable(VATCustomsException, STRING[100]);

// НДС
rangeVATCustomsRate = DATA Range(VATCustomsRate);
numberRangeVATCustomsRate 'НДС' (VATCustomsRate) = numberRange(rangeVATCustomsRate(VATCustomsRate)) IN base;

VATCustomsGroupDate 'НДС' (customsGroup, date) = rangeVATCustomsRate(VATCustomsRateCustomsGroupDate(customsGroup, date));

dataValueSupplierVATCustomsGroupDate 'НДС, %' (customsGroup, date) = valueRateRangeDate(VATCustomsGroupDate(customsGroup, date), date);
valueCurrentRateSupplierVATCustomsGroup 'НДС, %' (customsGroup) = valueRateRangeDate(VATCustomsGroupDate(customsGroup, currentDate()), currentDate());

// пошлина
percentDutyDutyCustomsRate 'Пошлина (%)' = DATA NUMERIC[14,3](DutyCustomsRate) IN base;
weightDutyDutyCustomsRate 'Пошлина (валют.)' = DATA NUMERIC[14,3](DutyCustomsRate) IN base;

percentDutyCustomsGroupDate 'Пошлина (%)' (customsGroup, date) = percentDutyDutyCustomsRate(dutyCustomsRateCustomsGroupDate(customsGroup, date));
weightDutyCustomsGroupDate 'Пошлина (валют.)' (customsGroup, date) = weightDutyDutyCustomsRate(dutyCustomsRateCustomsGroupDate(customsGroup, date));

percentDutyCustomsGroup 'Пошлина (%)' (customsGroup) = percentDutyCustomsGroupDate(customsGroup, currentDate());
weightDutyCustomsGroup 'Пошлина (валют.)' (customsGroup) = weightDutyCustomsGroupDate(customsGroup, currentDate());

//сбор
sumRegistrationCustomsRate 'Таможенный сбор' = DATA NUMERIC[14,3](RegistrationCustomsRate) IN base;

registrationCustomsGroupDate 'Таможенный сбор' (customsGroup, date) = sumRegistrationCustomsRate(registrationCustomsRateCustomsGroupDate(customsGroup, date));
registrationCustomsGroup 'Таможенный сбор' (customsGroup) = registrationCustomsGroupDate(customsGroup, currentDate());

// Льгота НДС
nameVATCustomsException 'Наименование' = DATA ISTRING[50](VATCustomsException) IN base;

rangeVATCustomsException = DATA Range(VATCustomsException);
numberRangeVATCustomsException 'Льгота НДС' (VATCustomsException) = numberRange(rangeVATCustomsException(VATCustomsException)) IN base;
dataValueVATCustomsExceptionDate 'Льгота НДС, %' (VATCustomsException, date) = valueRateRangeDate(rangeVATCustomsException(VATCustomsException), date);

valueCurrentVATCustomsException 'Льгота НДС, %' (VATCustomsException) = valueRateRangeDate(rangeVATCustomsException(VATCustomsException), currentDate()) IN base;

rangeVATCustomsExceptionCustomsGroupDate 'Льгота НДС' (customsGroup, date) = rangeVATCustomsException(VATCustomsExceptionCustomsGroupDate(customsGroup, date));
dataValueVATCustomsExceptionGroupDate 'Льгота НДС, %' (customsGroup, date) = valueRateRangeDate(rangeVATCustomsExceptionCustomsGroupDate(customsGroup, date), date);

countVATCustomsExceptionCustomsGroup 'Кол-во' (customsGroup) = GROUP SUM 1 IF VATCustomsException IS VATCustomsException BY customsGroupVATCustomsException(VATCustomsException);

//
customsGroupCountrySku = ABSTRACT CustomsGroup(Country, Sku);
codeCustomsGroupCountrySku 'ТН ВЭД' (country, sku) = codeCustomsGroup(customsGroupCountrySku(country, sku));

VATCustomsExceptionCountrySku = ABSTRACT VATCustomsException(Country, Sku);
nameVATCustomsExceptionCountrySku 'ТН ВЭД' (country, sku) = nameVATCustomsException(VATCustomsExceptionCountrySku(country, sku));

EXTEND FORM country
    PROPERTIES(c) nameCustomsZoneCountry
;

EXTEND FORM countries
    PROPERTIES(c) READONLY nameCustomsZoneCountry
;

FORM customsZone 'Таможенная зона'
    OBJECTS cz = CustomsZone FIXED PANEL
    PROPERTIES(cz) nameCustomsZone, nameCurrencyCustomsZone
    EDIT CustomsGroup OBJECT cz
;

FORM customsZones 'Таможенная зона'
    OBJECTS cz = CustomsZone
    PROPERTIES(cz) READONLY nameCustomsZone, nameCurrencyCustomsZone
    PROPERTIES(cz) ADDFORM, EDITFORM, DELETE
;

FORM VATCustomsExceptions 'Льготы НДС'
    OBJECTS cg = CustomsGroup FIXED PANEL

    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) READONLY nameVATCustomsException, dateFromVATCustomsException, dateToVATCustomsException, numberRangeVATCustomsException, valueCurrentVATCustomsException
    PROPERTIES(vce) ADDFORM, EDITFORM, DELETE
    FILTERS customsGroupVATCustomsException(vce) == cg

    //DIALOG VATCustomsException OBJECT vce
;

FORM customsGroup 'Позиция ТН ВЭД'
    OBJECTS cg = CustomsGroup FIXED PANEL
    PROPERTIES(cg) codeCustomsGroup, nameCustomsGroup, nameParentCustomsGroup, nameCustomsZoneCustomsGroup,
                   dateFromCustomsGroup, dateToCustomsGroup, isCompliancedCustomsGroup, registrationCustomsGroup,
                   valueCurrentRateSupplierVATCustomsGroup,
                   percentDutyCustomsGroup, weightDutyCustomsGroup, numberCustomsGroup

    OBJECTS vcr = VATCustomsRate
    PROPERTIES(vcr) READONLY dateFromVATCustomsRate, dateToVATCustomsRate, numberRangeVATCustomsRate
    PROPERTIES(vcr) ADDFORM, EDITFORM, DELETE
    FILTERS customsGroupVATCustomsRate(vcr) == cg

    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) READONLY nameVATCustomsException, dateFromVATCustomsException, dateToVATCustomsException, numberRangeVATCustomsException
    PROPERTIES(vce) ADDFORM, EDITFORM, DELETE
    FILTERS customsGroupVATCustomsException(vce) == cg

    OBJECTS dcr = DutyCustomsRate
    PROPERTIES(dcr) READONLY dateFromDutyCustomsRate, dateToDutyCustomsRate, percentDutyDutyCustomsRate, weightDutyDutyCustomsRate
    PROPERTIES(dcr) ADDFORM, EDITFORM, DELETE
    FILTERS customsGroupDutyCustomsRate(dcr) == cg

    OBJECTS rcr = RegistrationCustomsRate
    PROPERTIES(rcr) READONLY dateFromRegistrationCustomsRate, dateToRegistrationCustomsRate, sumRegistrationCustomsRate
    PROPERTIES(rcr) ADDFORM, EDITFORM, DELETE
    FILTERS customsGroupRegistrationCustomsRate(rcr) == cg

    EDIT CustomsGroup OBJECT cg
;

DESIGN customsGroup FROM DEFAULT{
    main {
        NEW topContainer {
            childConstraints = TO THE RIGHT;
            ADD vcr.box;
            ADD vce.box;
        }

        ADD dcr.box;
        ADD rcr.box;

        ADD functions.box;
    }
}

addCustomsGroup 'Добавить' = ACTION (customsGroup) NEWSESSION {
    FOR ADDOBJ cg = CustomsGroup DO {
        ASSIGN parentCustomsGroup(cg) <- customsGroup;
        FORM customsGroup OBJECTS cg=cg MODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    }
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM customsGroups 'Позиции ТН ВЭД'
    OBJECTS cz = CustomsZone FIXED PANEL
    PROPERTIES(cz) SELECTOR nameCustomsZone, nameCurrencyCustomsZone

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) OBJVALUE

    TREE treeGroups a=STRING[3], gcg=CustomsGroup PARENT parentCustomsGroup
    PROPERTIES READONLY OBJVALUE(a), nameCustomsGroup(gcg), codeCustomsGroup(gcg), isCompliancedDataCustomsGroup(gcg)
    PROPERTIES(gcg) addCustomsGroup, EDITFORM
    ORDER BY nameCustomsGroup

    OBJECTS cg = CustomsGroup
    PROPERTIES(cg) READONLYIF isReadonly() codeCustomsGroup, nameCustomsGroup, canonicalNameCustomsGroup,
                   dateFromCustomsGroup, dateToCustomsGroup, isCompliancedCustomsGroup, numberCustomsGroup
                   //, registrationCustomsGroup, valueCurrentRateSupplierVATCustomsGroup, percentDutyCustomsGroup, weightDutyCustomsGroup
    PROPERTIES(cg, dt) READONLY registrationCustomsGroupDate, percentDutyCustomsGroupDate, weightDutyCustomsGroupDate, dataValueSupplierVATCustomsGroupDate, dataValueVATCustomsExceptionGroupDate
    PROPERTIES(cg) ADDFORM, EDITFORM, DELETE
    ORDER BY numberCustomsGroup

    FILTERS stringEqualsAll(a), customsZoneCustomsGroup(cg) == cz
    //FILTERS (d IS EmployeeDivision AND NOT dg IS EmployeeDivisionGroup) OR isParentEmployeeDivisionGroupEmployeeDivision(dg, d)

    FILTERGROUP hasCode
        FILTER 'Только с кодом' 'F7' hasCodeCustomsGroup(gcg) DEFAULT

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafCustomsGroupCustomsGroup(cg, gcg) OR (cg IS CustomsGroup AND isLeafCustomsGroup(cg) AND NOT gcg)
        FILTER 'Всех потомков' 'F9' isParentCustomsGroupCustomsGroup(cg, gcg) OR (cg IS CustomsGroup AND NOT gcg) DEFAULT
        FILTER 'Только непосредственных потомков' 'F8' parentCustomsGroup(cg) == gcg OR (cg IS CustomsGroup AND NOT parentCustomsGroup(cg) AND NOT gcg)

    DIALOG CustomsGroup OBJECT cg
;

DESIGN customsGroups FROM DEFAULT{
    main {
        NEW split {
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            ADD treeGroups.tree.box{
                fillHorizontal = 1;
            };

            ADD cg.box {
                cg.grid {
                    fillHorizontal = 2;
                    defaultComponent = TRUE;
                }
            }

            POSITION treeGroups.tree.box TO THE LEFT cg.box;
        }

        ADD functions.box;
    }
}

@extendFormEditable(customsGroups);

NAVIGATOR {
    customsMasterData {
        ADD customsZones;
        ADD customsGroups;
    }
}