MODULE PurchaseDeclarationDetail;

REQUIRE PurchaseDeclaration, CustomsGroupItem;

NAMESPACE Purchase;

// ------------- Импортер -------------- //

legalEntityDeclaration = DATA LegalEntity(Declaration);
nameLegalEntityDeclaration 'Импортёр' (declaration) = nameLegalEntity(legalEntityDeclaration(declaration));
fullNameLegalEntityDeclaration 'Полное имя импортера' (declaration) = fullNameLegalEntity(legalEntityDeclaration(declaration));
addressLegalEntityDeclaration 'Адрес' (declaration) = addressLegalEntityDate(legalEntityDeclaration(declaration), dateDeclaration(declaration));

@defineDocumentLegalEntityAccess(Declaration, legalEntity, company);

CONSTRAINT legalEntityDeclaration(declaration) AND NOT isCompanyLegalEntity(legalEntityDeclaration(declaration))
    CHECKED BY legalEntityDeclaration MESSAGE 'Импортёр должен быть компанией';

// ------------- Таможенная зона -------------- //

customsZoneDeclaration = DATA CustomsZone(Declaration);
nameCustomsZoneDeclaration 'Таможенная зона' (declaration) = nameCustomsZone(customsZoneDeclaration(declaration));
customsZoneDeclaration(d) <- customsZoneCountry(countryLegalEntity(legalEntityDeclaration(d))) WHEN CHANGED(legalEntityDeclaration(d));

// ------- Валюты ------------ //

homeCurrencyDeclaration = DATA Currency(Declaration);
nameHomeCurrencyDeclaration 'Валюта декларации' (declaration) = nameCurrency(homeCurrencyDeclaration(declaration));
homeCurrencyDeclaration(declaration) <- currencyLegalEntity(legalEntityDeclaration(declaration)) WHEN CHANGED(legalEntityDeclaration(declaration));

currencyDeclaration = DATA Currency(Declaration);
nameCurrencyDeclaration 'Валюта накладных' (declaration) = nameCurrency(currencyDeclaration(declaration));

currencyCustomsZoneDeclaration (declaration) = currencyCustomsZone(customsZoneDeclaration(declaration));
nameCurrencyCustomsZoneDeclaration 'Валюта платежей' (declaration) = nameCurrency(currencyCustomsZoneDeclaration(declaration));

// ------- Типы обмена и курсы ------------ //

typeExchangeDeclaration = DATA TypeExchange(Declaration);
nameTypeExchangeDeclaration 'Тип обмена' (declaration) = nameTypeExchange(typeExchangeDeclaration(declaration));

typeExchangeDeclaration(d) <- defaultTypeExchangeCustomsZone(customsZoneDeclaration(d)) WHEN CHANGED(customsZoneDeclaration(d));

CONSTRAINT currencyTypeExchange(typeExchangeDeclaration(declaration)) != homeCurrencyDeclaration(declaration)
    CHECKED BY typeExchangeDeclaration MESSAGE 'Тип обмена должен соответствовать расчётной валюте';

rateExchangeDeclaration 'Курс накладных' = DATA NUMERIC[14,3](Declaration);
calcRateExchangeDeclaration 'Курс накладных' (declaration) = rateOnTypeExchangeCurrencyDate(typeExchangeDeclaration(declaration), currencyDeclaration(declaration), dateDeclaration(declaration));
rateExchangeDeclaration(declaration) <- calcRateExchangeDeclaration(declaration) WHEN CHANGED (dateDeclaration(declaration)) OR
                                                                                      CHANGED (typeExchangeDeclaration(declaration)) OR
                                                                                      CHANGED (currencyDeclaration(declaration));

rateExchangeCustomsZoneDeclaration 'Курс платежей' = DATA NUMERIC[14,3](Declaration);
calcRateExchangeCustomsZoneDeclaration 'Курс платежей' = rateOnTypeExchangeCurrencyDate(typeExchangeDeclaration(declaration), currencyCustomsZoneDeclaration(declaration), dateDeclaration(declaration));
rateExchangeCustomsZoneDeclaration(declaration) <- calcRateExchangeCustomsZoneDeclaration(declaration) WHEN CHANGED (dateDeclaration(declaration)) OR
                                                                                                            CHANGED (typeExchangeDeclaration(declaration)) OR
                                                                                                            CHANGED (customsZoneDeclaration(declaration));

// ------- Округления ------------ //
roundDeclaration 'Точность округления' = DATA INTEGER(Declaration);
roundDeclaration(d) <- defaultRoundCurrency(homeCurrencyDeclaration(d)) WHEN CHANGED(homeCurrencyDeclaration(d));

EXTEND FORM declaration
    PROPERTIES(d) nameLegalEntityDeclaration, nameCurrencyDeclaration, nameCustomsZoneDeclaration, nameHomeCurrencyDeclaration,
                  nameTypeExchangeDeclaration, roundDeclaration, rateExchangeDeclaration, nameCurrencyCustomsZoneDeclaration READONLY,
                  rateExchangeCustomsZoneDeclaration
;

EXTEND DESIGN declaration {
    NEW params {
        type = CONTAINERH;
        NEW paramsColumn1 {
            type = CONTAINERV;
            NEW documentParams {
                caption = 'Параметры документа';
                type = COLUMNS;
                columns = 2;
                ADD PROPERTY(nameLegalEntityDeclaration(d));
                ADD PROPERTY(nameCustomsZoneDeclaration(d));
            }
            NEW extraParams {
                type = CONTAINERH;
                NEW currencyParams {
                    type = CONTAINERH;
                    caption = 'Валюты и курсы';
                    NEW currencyParamsColumn1 {
                        type = COLUMNS;
                        columns = 1;
                        ADD PROPERTY(nameHomeCurrencyDeclaration(d));
                        ADD PROPERTY(nameCurrencyDeclaration(d));
                        ADD PROPERTY(nameCurrencyCustomsZoneDeclaration(d));
                    }
                    NEW currencyParamsColumn2 {
                        type = COLUMNS;
                        columns = 1;
                        ADD PROPERTY(nameTypeExchangeDeclaration(d));
                        ADD PROPERTY(rateExchangeDeclaration(d));
                        ADD PROPERTY(rateExchangeCustomsZoneDeclaration(d));
                    }
                }
            }
        }
        NEW paramsColumn2 {
            type = COLUMNS;
            columns = 1;
        }
        NEW roundParams {
            type = COLUMNS;
            columns = 1;
            caption = 'Округление';
            ADD PROPERTY(roundDeclaration(d));
        }
    }
    NEW detail {
        fill = 1;
        type = TABBED;
        NEW invoices {
            caption = 'Накладные';
        }
        NEW declarationDetails {
            caption = 'Строки декларации';
        } 
    }
    ADD functions.box;
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY nameLegalEntityDeclaration, nameHomeCurrencyDeclaration, nameCurrencyDeclaration
;

// ---------------------------------- Накладные --------------------------------------------------------//

// свойства товаров
overNameCustomsUserInvoiceDetail = ABSTRACT VARISTRING[255](UserInvoiceDetail);
nameCustomsUserInvoiceDetail 'Наименование (декл.)' (d) = OVERRIDE nameSku(skuUserInvoiceDetail(d)), overNameCustomsUserInvoiceDetail(d);

// страна производства
countrySkuInvoiceDetail = countrySku(skuInvoiceDetail(invoiceDetail));
nameCountrySkuInvoiceDetail 'Страна производства' = nameCountry(countrySku(skuInvoiceDetail(invoiceDetail))) MINCHARWIDTH 15 PREFCHARWIDTH 15;

countrySkuUserInvoiceDetail = countrySku(skuInvoiceDetail(invoiceDetail));
nameCountrySkuUserInvoiceDetail 'Страна производства' = nameCountry(countrySku(skuInvoiceDetail(invoiceDetail))) MINCHARWIDTH 15 PREFCHARWIDTH 15;

sidOrigin2CountrySkuUserInvoiceDetail 'Код страны' (d) = sidOrigin2Country(countrySkuUserInvoiceDetail(d));

UOMUserInvoiceDetail(d) = UOMSku(skuUserInvoiceDetail(d));

// ТН ВЭД
customsGroupInvoiceDetail = ABSTRACT CustomsGroup(InvoiceDetail);
customsGroupUserInvoiceDetail = DATA CustomsGroup(UserInvoiceDetail);
customsGroupInvoiceDetail(d) += customsGroupUserInvoiceDetail(d);

codeCustomsGroupInvoiceDetail 'ТН ВЭД' (d) = codeCustomsGroup(customsGroupInvoiceDetail(d));
nameCustomsGroupInvoiceDetail 'Наименование ТН ВЭД' (d) =nameCustomsGroup(customsGroupInvoiceDetail(d));
canonicalNameCustomsGroupInvoiceDetail 'Полное намиенование ТН ВЭД' (d) =canonicalNameCustomsGroup(customsGroupInvoiceDetail(d));

codeCustomsGroupUserInvoiceDetail 'ТН ВЭД' (d) = codeCustomsGroup(customsGroupUserInvoiceDetail(d));
                                                                              
originalCustomsGroupInvoiceDetail 'Код ТНВЭД (ориг.)' (d) = originalCustomsGroupItem(skuInvoiceDetail(d));
originalCustomsGroupUserInvoiceDetail 'Код ТНВЭД (ориг.)' (d) = originalCustomsGroupItem(skuUserInvoiceDetail(d));

WHEN SESSION FORMS userInvoice
    CHANGED(countryUserInvoiceDetail(d)) OR CHANGED(skuUserInvoiceDetail(d)) DO
        customsGroupUserInvoiceDetail(d) <- customsGroupCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));

// Льготы
VATCustomsExceptionInvoiceDetail = ABSTRACT VATCustomsException(InvoiceDetail);
VATCustomsExceptionUserInvoiceDetail = DATA VATCustomsException(UserInvoiceDetail);
VATCustomsExceptionInvoiceDetail(d) += VATCustomsExceptionUserInvoiceDetail(d);

nameVATCustomsExceptionInvoiceDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionInvoiceDetail(d)) MINCHARWIDTH 15;
nameVATCustomsExceptionUserInvoiceDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionUserInvoiceDetail(d)) MINCHARWIDTH 15;

WHEN SESSION FORMS userInvoice
    CHANGED(countryUserInvoiceDetail(d)) OR CHANGED(skuUserInvoiceDetail(d)) DO
        VATCustomsExceptionUserInvoiceDetail(d) <- VATCustomsExceptionCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));

CONSTRAINT customsGroupUserInvoiceDetail(d) AND VATCustomsExceptionUserInvoiceDetail(d) AND NOT customsGroupVATCustomsException(VATCustomsExceptionUserInvoiceDetail(d)) == customsGroupUserInvoiceDetail(d)
    CHECKED BY VATCustomsExceptionUserInvoiceDetail MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

setCustomsGroupUserInvoiceDetailDeclaration 'Заполнить ТН ВЭД' = ACTION (declaration) {
    FOR declarationUserInvoiceDetail(d) == declaration DO {
        customsGroupUserInvoiceDetail(d) <- customsGroupCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));
        VATCustomsExceptionUserInvoiceDetail(d) <- VATCustomsExceptionCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));
    }
}

// ------------ Таможенные платежи -----------

// Пошлина
dutyPriceInvoiceDetail 'Пошлина (ед.)' = ABSTRACT NUMERIC[20,8](InvoiceDetail);
dutyPriceUserInvoiceDetail 'Пошлина (ед.)' = DATA NUMERIC[20,8](UserInvoiceDetail);
dutyPriceInvoiceDetail(detail) += dutyPriceUserInvoiceDetail(detail);

overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
    dutyPriceUserInvoiceDetail(d) <- dutyPriceUserInvoiceDetail(detail);
}    

dutySumInvoiceDetail 'Сумма (пошлина)' (detail) = dutyPriceInvoiceDetail(detail)*quantityInvoiceDetail(detail);
dutySumUserInvoiceDetail 'Сумма (пошлина)' (detail) = dutyPriceUserInvoiceDetail(detail)*quantityUserInvoiceDetail(detail);
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, duty, ' (пошлина) всего');

// Сбор
registrationPriceInvoiceDetail 'Таможенный сбор (ед.)' = ABSTRACT NUMERIC[20,8](InvoiceDetail);
registrationPriceUserInvoiceDetail 'Таможенный сбор (ед.)' = DATA NUMERIC[20,8](UserInvoiceDetail);
registrationPriceInvoiceDetail(detail) += registrationPriceUserInvoiceDetail(detail);

overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
    registrationPriceUserInvoiceDetail(d) <- registrationPriceUserInvoiceDetail(detail);      
} 

registrationSumInvoiceDetail 'Сумма (таможенный сбор)' (detail) = registrationPriceInvoiceDetail(detail)*quantityInvoiceDetail(detail);
registrationSumUserInvoiceDetail 'Сумма (таможенный сбор)' (detail) = registrationPriceUserInvoiceDetail(detail)*quantityUserInvoiceDetail(detail);
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, registration, ' (таможенный сбор) всего');

// Проводим по инвойсу
customCostPriceUserInvoiceDetail(invoiceDetail) += registrationPriceUserInvoiceDetail(invoiceDetail) (+) dutyPriceUserInvoiceDetail(invoiceDetail);

// НДС
VATPriceInvoiceDetail 'НДС (ед.)' = ABSTRACT NUMERIC[20,8](InvoiceDetail);
VATPriceUserInvoiceDetail 'НДС (ед.)' = DATA NUMERIC[20,8](UserInvoiceDetail);
VATPriceInvoiceDetail(detail) += VATPriceUserInvoiceDetail(detail);

overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
    VATPriceUserInvoiceDetail(d) <- VATPriceUserInvoiceDetail(detail);      
} 

customsVATSumInvoiceDetail 'Сумма НДС (входной)' (detail) = VATPriceInvoiceDetail(detail)*quantityInvoiceDetail(detail);
customsVATSumUserInvoiceDetail 'Сумма НДС (входной)' (detail) = VATPriceUserInvoiceDetail(detail)*quantityUserInvoiceDetail(detail);
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, customsVAT, ' НДС (входной) всего');

// -------------------------------- Расширение накладной свойствами декларации -------------------------- //

showDeclarationInvoice 'Таможенные платежи' = ABSTRACT BOOLEAN(Invoice);
showDeclarationUserInvoice 'Таможенные платежи' = DATA BOOLEAN(UserInvoice) IN documentPrm;
showDeclarationInvoice(invoice) += showDeclarationUserInvoice(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCustoms() showDeclarationUserInvoice
    PROPERTIES(d) BACKGROUND backgroundCustoms() SHOWIF showDeclarationUserInvoice(i) BEFORE numberVATUserInvoiceDetail(d)
        codeCustomsGroupUserInvoiceDetail, nameVATCustomsExceptionUserInvoiceDetail, dutyPriceUserInvoiceDetail, 
        registrationPriceUserInvoiceDetail, VATPriceUserInvoiceDetail
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerCustoms {
            caption = 'Таможенные платежи';
            ADD PROPERTY(showDeclarationUserInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundCustoms() SHOWIF showDeclarationInvoice(i) BEFORE numberVATInvoiceDetail(d) FORCE GRID
        codeCustomsGroupInvoiceDetail, nameVATCustomsExceptionInvoiceDetail, dutyPriceInvoiceDetail, registrationPriceInvoiceDetail
;

// ------------------------------ Выбор накладных ---------------------------- //
inDeclarationUserInvoice 'Вкл.' (declaration, invoice) = declarationUserInvoice(invoice) == declaration;

inDeclarationUserInvoiceDetail 'Вкл.' (declaration, detail) = dataDeclarationUserInvoiceDetail(detail) == declaration;

FORM declarationInvoices 'Выбрать накладные'
    OBJECTS d=Declaration FIXED PANEL                           
    PROPERTIES(d) READONLY seriesNumberDeclaration, nameLegalEntityDeclaration, nameCurrencyDeclaration, dateTimeDeclaration

    OBJECTS i=UserInvoice
    PROPERTIES (d, i) inDeclarationUserInvoice
    PROPERTIES (i) READONLY numberUserInvoice, seriesUserInvoice, dateUserInvoice, timeUserInvoice, nameSupplierUserInvoice, nameCustomerUserInvoice
    FILTERS inDeclarationUserInvoice(d, i) OR d IS Declaration AND NOT declarationUserInvoice(i)

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(d, id) inDeclarationUserInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail, codeCustomsGroupUserInvoiceDetail,
                            quantityUserInvoiceDetail, priceUserInvoiceDetail
    FILTERS userInvoiceUserInvoiceDetail(id) == i,
            declarationUserInvoiceDetail(id)==d OR d IS Declaration AND NOT declarationUserInvoiceDetail(id)

    FILTERGROUP filtersCurrency
        FILTER 'Только с валютой декларации' 'F10' currencyDeclaration(d) == currencyUserInvoice(i) DEFAULT

    FILTERGROUP filtersImporter
        FILTER 'Только импортёра декларации' 'F11' legalEntityDeclaration(d) == customerUserInvoice(i) DEFAULT
;

DESIGN declarationInvoices FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW split {
            fill = 1;
            type = SPLITV;
            NEW header {
                ADD d.box;
                ADD i.box;
            }
            NEW pane {
                type = TABBED;
                ADD id.box;
            }
        }
        ADD functions.box;
    }
}

selectInvoicesDeclaration 'Выбрать накладные' = ACTION (declaration) {
    FORM declarationInvoices OBJECTS d=declaration MODAL;
} TOOLBAR;

backgroundVATCustomsExceptionUserInvoiceDetail 'Цвет' (invoiceDetail) = backgroundVATCustomsException() IF countVATCustomsExceptionCustomsGroup(customsGroupUserInvoiceDetail(invoiceDetail)) > 0;

EXTEND FORM declaration
    PROPERTIES(d) invoicesDeclaration

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, seriesNumberUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   nameCustomsUserInvoiceDetail, nameCountrySkuUserInvoiceDetail, sumNetWeightUserInvoiceDetail
    PROPERTIES(id) codeCustomsGroupUserInvoiceDetail, nameVATCustomsExceptionUserInvoiceDetail BACKGROUND backgroundVATCustomsExceptionUserInvoiceDetail(id)
    PROPERTIES(id) READONLY quantityUserInvoiceDetail, priceUserInvoiceDetail
    PROPERTIES(id) dutyPriceUserInvoiceDetail, registrationPriceUserInvoiceDetail, VATPriceUserInvoiceDetail

    PROPERTIES (d) selectInvoicesDeclaration TODRAW id FORCE PANEL TOOLBAR,
                   setCustomsGroupUserInvoiceDetailDeclaration TODRAW id FORCE PANEL TOOLBAR
    FILTERS declarationUserInvoiceDetail(id) == d
;

EXTEND DESIGN declaration {
    documentParams {
        ADD PROPERTY(invoicesDeclaration(d));
    }

    invoices {
        ADD id.box;
    }
}

//------------------------------------------ Разбиение строк инвойсов -------------------------------------------------//

CLASS DeclarationInvoiceDetail 'Позиции декларации';
TABLE declarationInvoiceDetail(DeclarationInvoiceDetail);

declarationDeclarationInvoiceDetail = DATA Declaration (DeclarationInvoiceDetail) NOT NULL DELETE;

declarationInvoiceDetailUserInvoiceDetail = DATA DeclarationInvoiceDetail (UserInvoiceDetail);

//userInvoiceDetailDeclarationInvoiceDetail = DATA UserInvoiceDetail (DeclarationInvoiceDetail) NOT NULL DELETE;
//userInvoiceDeclarationInvoiceDetail (d) = userInvoiceUserInvoiceDetail(userInvoiceDetailDeclarationInvoiceDetail(d));  

nameCustomsDeclarationInvoiceDetail 'Наименование' = DATA VARISTRING[255] (DeclarationInvoiceDetail) IN recognize;

//UOMDeclarationInvoiceDetail 'Ед. изм.' (d) = UOMUserInvoiceDetail (userInvoiceDetailDeclarationInvoiceDetail(d)) PERSISTENT;

UOMDeclarationInvoiceDetail 'Ед. изм.' (d) = DATA UOM (DeclarationInvoiceDetail) PERSISTENT;
shortNameUOMDeclarationInvoiceDetail 'Ед. изм.' (d) = shortNameUOM(UOMDeclarationInvoiceDetail(d));

//countryDeclarationInvoiceDetail 'Страна' (d) = countrySkuUserInvoiceDetail (userInvoiceDetailDeclarationInvoiceDetail(d)) PERSISTENT;
countryDeclarationInvoiceDetail 'Страна' (d) = DATA Country (DeclarationInvoiceDetail) PERSISTENT;
nameCountryDeclarationInvoiceDetail 'Страна' (d) = nameCountry(countryDeclarationInvoiceDetail(d)) IN recognize;

sumNetWeightDeclarationInvoiceDetail 'Вес нетто' (d) = DATA NUMERIC[9,3] (DeclarationInvoiceDetail); 
sumGrossWeightDeclarationInvoiceDetail 'Вес брутто' (d) = DATA NUMERIC[9,3] (DeclarationInvoiceDetail);

customsGroupDeclarationInvoiceDetail 'ТН ВЭД' (d) = DATA CustomsGroup (DeclarationInvoiceDetail);
codeCustomsGroupDeclarationInvoiceDetail 'ТН ВЭД' (d) = codeCustomsGroup(customsGroupDeclarationInvoiceDetail(d)) IN recognize;

VATCustomsExceptionDeclarationInvoiceDetail 'Льгота НДС' = DATA VATCustomsException (DeclarationInvoiceDetail);
nameVATCustomsExceptionDeclarationInvoiceDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionDeclarationInvoiceDetail(d));

CONSTRAINT customsGroupDeclarationInvoiceDetail(d) AND VATCustomsExceptionDeclarationInvoiceDetail(d) 
           AND NOT customsGroupVATCustomsException(VATCustomsExceptionDeclarationInvoiceDetail(d)) == customsGroupDeclarationInvoiceDetail(d)
    CHECKED BY VATCustomsExceptionDeclarationInvoiceDetail MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

quantityDeclarationInvoiceDetail 'Кол-во' = DATA NUMERIC[14,3](DeclarationInvoiceDetail);
priceDeclarationInvoiceDetail 'Цена' = DATA NUMERIC[14,2] (DeclarationInvoiceDetail);
sumDeclarationInvoiceDetail 'Стоимость' (d) = quantityDeclarationInvoiceDetail(d) * priceDeclarationInvoiceDetail(d);

sumDeclarationInvoiceDetailDeclaration 'Сумма (по позициям декларации)' = GROUP SUM sumDeclarationInvoiceDetail(d)
                                                                               BY declarationDeclarationInvoiceDetail(d) MINCHARWIDTH 15;

noneVATCustomsExceptionUserInvoiceDetail(d) = OVERRIDE VATCustomsException.none, VATCustomsExceptionUserInvoiceDetail(d);
quantityGroupDeclaration 'Кол-во' = GROUP SUM quantityUserInvoiceDetail(d)
                                           BY declarationUserInvoiceDetail(d),
                                              nameCustomsUserInvoiceDetail(d),
                                              UOMUserInvoiceDetail(d),
                                              customsGroupUserInvoiceDetail(d),
                                              noneVATCustomsExceptionUserInvoiceDetail(d),
                                              countrySkuUserInvoiceDetail(d),
                                              priceUserInvoiceDetail(d); //PERSISTENT;

overCreateDeclarationInvoiceDetailDeclaration = ABSTRACT ACTION LIST (Declaration);

createDeclarationInvoiceDetailDeclaration 'Создать позиции' = ACTION (declaration) {
    DELETE d WHERE declarationDeclarationInvoiceDetail(d) == declaration;

    FOR quantity == quantityGroupDeclaration(declaration, customsName, UOM, customsGroup, customsException, country, price) ADDOBJ dd=DeclarationInvoiceDetail DO {
        // Ключи
        declarationDeclarationInvoiceDetail(dd) <- declaration;
        nameCustomsDeclarationInvoiceDetail(dd) <- customsName;
        UOMDeclarationInvoiceDetail(dd) <- UOM;
        customsGroupDeclarationInvoiceDetail(dd) <- customsGroup;
        VATCustomsExceptionDeclarationInvoiceDetail(dd) <- IF customsException != VATCustomsException.none THEN customsException ELSE NULL;
        countryDeclarationInvoiceDetail(dd) <- country;
        priceDeclarationInvoiceDetail(dd) <- price;

        // Значения
        quantityDeclarationInvoiceDetail (dd) <- quantity;

        // связываем строки накладной и декларации
        declarationInvoiceDetailUserInvoiceDetail(id) <- dd WHERE
            declarationUserInvoiceDetail(id) == declaration AND
            nameCustomsUserInvoiceDetail(id) == customsName AND
            UOMUserInvoiceDetail(id) == UOM AND
            customsGroupUserInvoiceDetail(id) == customsGroup AND
            noneVATCustomsExceptionUserInvoiceDetail(id) == customsException AND
            countrySkuUserInvoiceDetail(id) == country AND
            priceUserInvoiceDetail(id) == price;
    }

    sumNetWeightDeclarationInvoiceDetail(dd) <- [= GROUP SUM sumNetWeightUserInvoiceDetail(d) BY declarationInvoiceDetailUserInvoiceDetail(d)](dd) WHERE declarationDeclarationInvoiceDetail(dd) == declaration;
    sumGrossWeightDeclarationInvoiceDetail(dd) <- [= GROUP SUM sumGrossWeightUserInvoiceDetail(d) BY declarationInvoiceDetailUserInvoiceDetail(d)](dd) WHERE declarationDeclarationInvoiceDetail(dd) == declaration;
    
    overCreateDeclarationInvoiceDetailDeclaration(declaration);
} TOOLBAR CONFIRM;

EXTEND FORM declaration
    OBJECTS di = DeclarationInvoiceDetail
    PROPERTIES(di) nameCustomsDeclarationInvoiceDetail, shortNameUOMDeclarationInvoiceDetail, nameCountryDeclarationInvoiceDetail,                       
                   codeCustomsGroupDeclarationInvoiceDetail, nameVATCustomsExceptionDeclarationInvoiceDetail,
                   quantityDeclarationInvoiceDetail, priceDeclarationInvoiceDetail, 
                   ADDOBJ, DELETESESSION 
    
    PROPERTIES(d) createDeclarationInvoiceDetailDeclaration TODRAW di FORCE PANEL TOOLBAR
    FILTERS declarationDeclarationInvoiceDetail(di) == d
;
EXTEND DESIGN declaration {
    declarationDetails {
        ADD di.box;
    }
}

//------------------------------------------ Строки декларации -------------------------------------------------------//

CLASS DeclarationDetail 'Строка декларации';
TABLE declarationDetail(DeclarationDetail);

declarationDeclarationDetail = DATA Declaration(DeclarationDetail);

@defineDocumentPosted(declaration);
@defineDocumentHeaderCount(declaration);

isExportedDeclaration 'Экспортирован' = DATA BOOLEAN (Declaration); 
isExportedDeclarationDetail 'Экспортирован' (d) = isExportedDeclaration(declarationDeclarationDetail(d));

EXTEND FORM declaration
    PROPERTIES(d) isPostedDeclaration, isExportedDeclaration
    EVENTS
        ON OK prePostDeclaration(d)
;

EXTEND DESIGN declaration {
    header {
       ADD PROPERTY(isPostedDeclaration(d)) FIRST;
       ADD PROPERTY(isExportedDeclaration(d)) AFTER PROPERTY(isPostedDeclaration(d));
    }
    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

// Свойства полученные от декларации
dateDeclarationDetail 'Дата' (d) = dateDeclaration(declarationDeclarationDetail(d));

homeCurrencyDeclarationDetail (d) = homeCurrencyDeclaration(declarationDeclarationDetail(d));

// Первичные свойства для строк деклараций
nameCustomsDeclarationDetail 'Наименование' = DATA VARISTRING[255](DeclarationDetail);
extraNameDeclarationDetail 'Дополнительная информация' = ABSTRACT VARSTRING[617] (DeclarationDetail);

UOMDeclarationDetail = DATA UOM(DeclarationDetail);
idUOMDeclarationDetail 'Код ед. изм.' (declarationDetail) = idUOM(UOMDeclarationDetail(declarationDetail));
shortNameUOMDeclarationDetail 'Ед. изм.' (declarationDetail) = shortNameUOM(UOMDeclarationDetail(declarationDetail));

customsGroupDeclarationDetail = DATA CustomsGroup(DeclarationDetail);
codeCustomsGroupDeclarationDetail 'ТН ВЭД' (declarationDetail) = codeCustomsGroup(customsGroupDeclarationDetail(declarationDetail)) MINCHARWIDTH 10 MAXCHARWIDTH 10 PREFCHARWIDTH 10;

countryDeclarationDetail = DATA Country(DeclarationDetail);
nameCountryDeclarationDetail 'Страна' (declarationDetail) = nameCountry(countryDeclarationDetail(declarationDetail));
sidCountryDeclarationDetail 'Код страны' (declarationDetail) = sidCountry(countryDeclarationDetail(declarationDetail));
sidOrigin2CountryDeclarationDetail 'Код страны' (declarationDetail) = sidOrigin2Country(countryDeclarationDetail(declarationDetail));

quantityDeclarationDetail 'Кол-во' = DATA NUMERIC[14,3](DeclarationDetail);
priceDeclarationDetail 'Цена' = DATA NUMERIC[14,2] (DeclarationDetail);
sumDeclarationDetail 'Стоимость' (d) = priceDeclarationDetail(d) * quantityDeclarationDetail(d);

sumNetWeightDeclarationDetail 'Вес нетто' = DATA NUMERIC[9,3] (DeclarationDetail);
sumGrossWeightDeclarationDetail 'Вес брутто' = DATA NUMERIC[9,3] (DeclarationDetail);

sumNetWeightDeclarationDetailDeclaration 'Вес нетто' (declaration)= GROUP SUM sumNetWeightDeclarationDetail(detail) 
    BY declarationDeclarationDetail(detail);
sumGrossWeightDeclarationDetailDeclaration 'Вес брутто' (declaration)= GROUP SUM sumGrossWeightDeclarationDetail(detail) 
    BY declarationDeclarationDetail(detail);
    
netWeightDeclarationDetail 'Вес нетто (за ед.)' (d)= sumNetWeightDeclarationDetail(d)/(quantityDeclarationDetail(d) IF quantityDeclarationDetail(d)!=0.0); 
grossWeightDeclarationDetail 'Вес нетто (за ед.)' (d) = sumGrossWeightDeclarationDetail(d)/(quantityDeclarationDetail(d) IF quantityDeclarationDetail(d)!=0.0); 

// ------ Дополнительные расходы ----- //

// Доставка
deliverySumDeclarationDetail 'Тр. расходы' = DATA NUMERIC[14,2] (DeclarationDetail);

// Услуги
chargeSumDeclarationDetail 'Услуги' = DATA NUMERIC[14,2] (DeclarationDetail);

// Суммы в национальной валюте
homeSumDeclarationDetail 'Стоимость (декл.)' = DATA NUMERIC[16,2](DeclarationDetail) MINCHARWIDTH 12;

WHEN SESSION FORMS declaration (CHANGED(sumDeclarationDetail(d)) OR CHANGED(rateExchangeDeclaration(declarationDeclarationDetail(d))) OR
                               CHANGED(deliverySumDeclarationDetail(d)) OR CHANGED(chargeSumDeclarationDetail(d))) AND NOT isExportedDeclarationDetail(d) DO
    homeSumDeclarationDetail(d) <- (sumDeclarationDetail(d) * rateExchangeDeclaration(declarationDeclarationDetail(d))) (+)
                                   deliverySumDeclarationDetail(d) (+) chargeSumDeclarationDetail(d);

// -- Платежи

// Пошлина
percentDutyDeclarationDetail 'Пошлина, %' = DATA NUMERIC[14,3] (DeclarationDetail);
weightDutyDeclarationDetail 'Пошлина, (мин.)' = DATA NUMERIC[14,3] (DeclarationDetail);

WHEN SESSION FORMS declaration (CHANGED(customsGroupDeclarationDetail(d)) OR CHANGED(dateDeclarationDetail(d))) AND NOT isExportedDeclarationDetail(d) DO {
    percentDutyDeclarationDetail(d) <- percentDutyCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));
    weightDutyDeclarationDetail(d) <- weightDutyCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));
}

dutySumDeclarationDetail 'Пошлина' = DATA NUMERIC[16,2] (DeclarationDetail) MINCHARWIDTH 12;

// НДС
VATDeclarationDetail 'НДС' = DATA Range(DeclarationDetail);
numberVATDeclarationDetail 'НДС, номер' (d) = numberRange(VATDeclarationDetail(d));
percentVATDeclarationDetail 'НДС, %' (d) = valueRateRangeDate(VATDeclarationDetail(d), dateDeclarationDetail(d));

CONSTRAINT countryLegalEntity(legalEntityDeclaration(declarationDeclarationDetail(declarationDetail))) != countryRange(VATDeclarationDetail(declarationDetail))
    CHECKED BY VATDeclarationDetail MESSAGE 'Страна шкалы налога должна соответствовать стране импортёра';

VATCustomsExceptionDeclarationDetail 'Льгота НДС' = DATA VATCustomsException(DeclarationDetail);
nameVATCustomsExceptionDeclarationDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionDeclarationDetail(d));

CONSTRAINT customsGroupDeclarationDetail(d) AND VATCustomsExceptionDeclarationDetail(d) AND NOT customsGroupVATCustomsException(VATCustomsExceptionDeclarationDetail(d)) == customsGroupDeclarationDetail(d)
    CHECKED BY VATCustomsExceptionDeclarationDetail MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

WHEN SESSION FORMS declaration (CHANGED(customsGroupDeclarationDetail(d)) OR CHANGED(VATCustomsExceptionDeclarationDetail(d)) OR CHANGED(dateDeclarationDetail(d))) AND NOT isExportedDeclarationDetail(d) DO
    VATDeclarationDetail(d) <- IF VATCustomsExceptionDeclarationDetail(d) THEN
                                   rangeVATCustomsException(VATCustomsExceptionDeclarationDetail(d))
                               ELSE
                                   VATCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));

VATSumDeclarationDetail 'НДС' = DATA NUMERIC[16,2] (DeclarationDetail) MINCHARWIDTH 12;

// Порядковый номер строки
userNumberDeclarationDetail 'Пользовательский номер' (declarationDetail) = DATA INTEGER (DeclarationDetail);

numberDefaultDeclarationDetail 'Номер' (d) =
        PARTITION SUM 1 IF d IS DeclarationDetail AND NOT userNumberDeclarationDetail(d) BY declarationDeclarationDetail(d)
        ORDER codeCustomsGroupDeclarationDetail(d), d;

numberDeclarationDetail 'Номер' (declarationDetail) = OVERRIDE numberDefaultDeclarationDetail(declarationDetail), userNumberDeclarationDetail(declarationDetail) MINCHARWIDTH 4 PREFCHARWIDTH 4;

fillExportedDeclaration (declaration) = ACTION (declaration) {
    isExportedDeclaration(declaration) <- TRUE;
    userNumberDeclarationDetail(d) <- numberDeclarationDetail(d) WHERE declarationDeclarationDetail(d)== declaration;
}

changeNumberDeclarationDetail(d) = ACTION (d) {
    REQUEST INTEGER INPUT;
    IF isExportedDeclaration(declarationDeclarationDetail(d)) THEN {
        IF requestedInteger() > userNumberDeclarationDetail(d) THEN {
            userNumberDeclarationDetail(e) <- userNumberDeclarationDetail(e) - 1 
                WHERE userNumberDeclarationDetail(e) > userNumberDeclarationDetail(d) AND 
                      userNumberDeclarationDetail(e) <= requestedInteger() AND
                      declarationDeclarationDetail(e) == declarationDeclarationDetail(d);         
        } ELSE {
            userNumberDeclarationDetail(e) <- userNumberDeclarationDetail(e) + 1 
                WHERE userNumberDeclarationDetail(e) < userNumberDeclarationDetail(d) AND 
                      userNumberDeclarationDetail(e) >= requestedInteger() AND
                      declarationDeclarationDetail(e) == declarationDeclarationDetail(d);         
        }
//        userNumberDeclarationDetail(e) <- NULL WHERE declarationDeclarationDetail(e) == declarationDeclarationDetail(d);
//        userNumberDeclarationDetail(e) <- PARTITION SUM 1 BY declarationDeclarationDetail(e) ORDER userNumberDeclarationDetail(e), e WHERE declarationDeclarationDetail(e) == declarationDeclarationDetail(d);
//        userNumberDeclarationDetail(e) <- userNumberDeclarationDetail(e) + 1 WHERE declarationDeclarationDetail(e) == declarationDeclarationDetail(d) AND userNumberDeclarationDetail(e) >= requestedInteger();
    }
    userNumberDeclarationDetail(d) <- requestedInteger();
}

    
// Делаем, чтобы номера были уникальными
declarationDetailDeclarationNumber (declaration, number) = GROUP AGGR d BY declarationDeclarationDetail(d), numberDeclarationDetail(d) WHERE d IS DeclarationDetail;

// Итоги по декларации

sumDeclarationDetailDeclaration 'Стоимость' = GROUP SUM sumDeclarationDetail(declarationDetail)
                                                BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

deliverySumDeclarationDetailDeclaration 'Транспортные расходы' = GROUP SUM deliverySumDeclarationDetail(declarationDetail)
                                                                       BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

chargeSumDeclarationDetailDeclaration 'Услуги' = GROUP SUM chargeSumDeclarationDetail(declarationDetail)
                                                       BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

homeSumDeclarationDetailDeclaration 'Стоимость (декл.)' = GROUP SUM homeSumDeclarationDetail(declarationDetail)
                                                            BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

dutySumDeclarationDetailDeclaration 'Пошлина' (declaration) = GROUP SUM dutySumDeclarationDetail(declarationDetail)
                                                                    BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

VATSumDeclarationDetailDeclaration 'НДС' (declaration) = GROUP SUM VATSumDeclarationDetail(declarationDetail)
                                                                   BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

// ---------------------------------------------------- Суммы расходов по документу -------------------------------- //

// Транспортные расходы
deliverySumDeclaration 'Транспортные расходы' = DATA NUMERIC[16,2] (Declaration) MINCHARWIDTH 15;
deliverySumRoundDeclaration 'Транспортные расходы (округление)' (d) = deliverySumDeclaration(d) (-) deliverySumDeclarationDetailDeclaration(d);

// Услуги
chargeSumDeclaration 'Услуги' = DATA NUMERIC[16,2] (Declaration) MINCHARWIDTH 15;
chargeSumRoundDeclaration 'Услуги (округление)' (d) = chargeSumDeclaration(d) (-) chargeSumDeclarationDetailDeclaration(d);

// Пошлина
dutySumUserInvoiceDetailDeclaration 'Пошлина (по накладным)' (d) =
    GROUP SUM quantityUserInvoiceDetail(d) * dutyPriceUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d) MINCHARWIDTH 15;
dutySumRoundDeclaration 'Пошлина (округление)' (d) = dutySumDeclarationDetailDeclaration(d) (-) dutySumUserInvoiceDetailDeclaration(d);

// Таможенный сбор
registrationSumDeclaration 'Таможенный сбор' = DATA NUMERIC[16,2] (Declaration) MINCHARWIDTH 15;

registrationSumUserInvoiceDetailDeclaration 'Таможенный сбор (по накладным)' (d) =
    GROUP SUM quantityUserInvoiceDetail(d) * registrationPriceUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d) MINCHARWIDTH 15;
registrationSumRoundDeclaration 'Таможенный сбор (округление)' (d) = registrationSumDeclaration(d) (-) registrationSumUserInvoiceDetailDeclaration(d);

EXTEND FORM declaration
    PROPERTIES(d)          sumDeclarationDetailDeclaration
    PROPERTIES(d)          deliverySumDeclaration, chargeSumDeclaration
    PROPERTIES(d) READONLY homeSumDeclarationDetailDeclaration, dutySumDeclarationDetailDeclaration, VATSumDeclarationDetailDeclaration
    PROPERTIES(d)          registrationSumDeclaration

    PROPERTIES(d) READONLY deliverySumRoundDeclaration, chargeSumRoundDeclaration, dutySumRoundDeclaration, registrationSumRoundDeclaration
;

EXTEND DESIGN declaration {
    paramsColumn2 {
        NEW sumParams {
            type = COLUMNS;
            columns = 1;
            caption = 'Суммы документа';
            ADD PROPERTY(sumDeclarationDetailDeclaration(d));
            ADD PROPERTY(deliverySumDeclaration(d));
            ADD PROPERTY(chargeSumDeclaration(d));
            ADD PROPERTY(homeSumDeclarationDetailDeclaration(d));
            ADD PROPERTY(dutySumDeclarationDetailDeclaration(d));
            ADD PROPERTY(VATSumDeclarationDetailDeclaration(d));
            ADD PROPERTY(registrationSumDeclaration(d));
        }
    }
    roundParams {
        ADD PROPERTY(deliverySumRoundDeclaration(d));
        ADD PROPERTY(chargeSumRoundDeclaration(d));
        ADD PROPERTY(dutySumRoundDeclaration(d));
        ADD PROPERTY(registrationSumRoundDeclaration(d));
    }
}

// ----------------------- Расчет суммы транспортных расходов -------------------------- //

coeffSumGrossWeightDeclarationDetail 'Удельный вес по весу брутто' = NUMERIC[22,8](sumGrossWeightDeclarationDetail(d)) / sumGrossWeightDeclarationDetailDeclaration(declarationDeclarationDetail(d));

calcDeliverySumDeclarationDetail = round(deliverySumDeclaration(declarationDeclarationDetail(d)) * coeffSumGrossWeightDeclarationDetail(d),
                                         roundDeclaration(declarationDeclarationDetail(d)));
WHEN SESSION FORMS declaration CHANGED(calcDeliverySumDeclarationDetail(d)) AND NOT isExportedDeclarationDetail(d) DO {
    deliverySumDeclarationDetail(d) <- calcDeliverySumDeclarationDetail(d);
}

// ----------------------- Расчет суммы услуг -------------------------- //

coeffSumDeclarationDetail 'Удельный вес по стоимости' = NUMERIC[22,8](sumDeclarationDetail(d)) / sumDeclarationDetailDeclaration(declarationDeclarationDetail(d));

calcChargeSumDeclarationDetail = round(chargeSumDeclaration(declarationDeclarationDetail(d)) * coeffSumDeclarationDetail(d),
                                       roundDeclaration(declarationDeclarationDetail(d)));
WHEN SESSION FORMS declaration CHANGED(calcChargeSumDeclarationDetail(d)) AND NOT isExportedDeclarationDetail(d) DO {
    chargeSumDeclarationDetail(d) <- calcChargeSumDeclarationDetail(d);
}

// -------------------------------- Расчет таможенных пошлин -------------------------- //

calcSumPriceDutyDeclarationDetail 'Пошлина по стоимости' (declarationDetail) =
    homeSumDeclarationDetail(declarationDetail) * percentDutyDeclarationDetail(declarationDetail) / 100.0;

calcSumWeightDutyDeclarationDetail 'Пошлина, (мин.)' (declarationDetail) = sumNetWeightDeclarationDetail(declarationDetail) *
                                                                           weightDutyDeclarationDetail(declarationDetail) *
                                                                           rateExchangeCustomsZoneDeclaration(declarationDeclarationDetail(declarationDetail));

isWeightDutyDeclarationDetail (d) = calcSumWeightDutyDeclarationDetail(d) > calcSumPriceDutyDeclarationDetail(d);  

calcDutySumDeclarationDetail 'Пошлина' (d) = roundPriceCurrency((MAX calcSumWeightDutyDeclarationDetail(d),
                                                                     calcSumPriceDutyDeclarationDetail(d)),
                                                                homeCurrencyDeclarationDetail(d)) MINCHARWIDTH 12;

WHEN SESSION FORMS declaration CHANGED(calcDutySumDeclarationDetail(d)) AND NOT isExportedDeclarationDetail(d) DO
    dutySumDeclarationDetail(d) <- calcDutySumDeclarationDetail(d);

// -------------------------------- Расчет НДС -------------------------- //

baseVATSumDeclarationDetail(d) = homeSumDeclarationDetail(d) (+) dutySumDeclarationDetail(d); 

calcVATSumDeclarationDetail 'НДС' (d) =
    roundPriceCurrency(baseVATSumDeclarationDetail(d) *
                       percentVATDeclarationDetail(d) / 100.0,
                       homeCurrencyDeclarationDetail(d)) MINCHARWIDTH 12;

WHEN SESSION FORMS declaration
    (CHANGED(homeSumDeclarationDetail(d)) OR CHANGED(dutySumDeclarationDetail(d)) OR
    CHANGED(VATDeclarationDetail(d)) OR CHANGED(homeCurrencyDeclarationDetail(d))) AND NOT isExportedDeclarationDetail(d) DO
    VATSumDeclarationDetail(d) <- calcVATSumDeclarationDetail(d);

// ------------------------------ Таможенный сбор ----------------------------- //

registrationSumDeclarationDetail 'Таможенный сбор (валют.)' (d) =
    registrationCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));

maxRegistrationSumDeclaration 'Таможенный сбор (валют.)' (d) =
    GROUP MAX registrationSumDeclarationDetail(d) BY declarationDeclarationDetail(d);

calcRegistrationSumDeclaration 'Таможенный сбор' (d) = roundPriceCurrency(maxRegistrationSumDeclaration(d) *
                                                                          rateExchangeCustomsZoneDeclaration(d),
                                                                          homeCurrencyDeclaration(d)) MINCHARWIDTH 12;

// -------------- Связь строк деклараций и строк накладных ---------------------- //

declarationInvoiceDetailDeclarationDetail = DATA DeclarationInvoiceDetail(DeclarationDetail);
inDeclarationInvoiceDetailDeclarationDetail 'Вкл.' (id, dd) = declarationInvoiceDetailDeclarationDetail(dd) == id;

countDeclarationDetailDeclarationInvoiceDetail(did) = GROUP SUM 1 BY declarationInvoiceDetailDeclarationDetail(d);
countDeclarationInvoiceDetailDeclarationDetail(dd) = countDeclarationDetailDeclarationInvoiceDetail(declarationInvoiceDetailDeclarationDetail(dd));

//declarationDetailDeclarationInvoiceDetail = DATA DeclarationDetail(DeclarationInvoiceDetail);
//inDeclarationInvoiceDetailDeclarationDetail 'Вкл.' (id, dd) = declarationDetailDeclarationInvoiceDetail(id) == dd;

inDeclarationDetailUserInvoiceDetail (d, i) = declarationInvoiceDetailDeclarationDetail(d) == declarationInvoiceDetailUserInvoiceDetail(i);
inDeclarationDetailUserInvoice (d, i) = GROUP SUM 1 IF inDeclarationDetailUserInvoiceDetail (d, i) BY d, userInvoiceUserInvoiceDetail(i);

invoicesDeclarationDetail 'Накладные' (d) =
    GROUP CONCAT seriesNumberInvoice(i) IF inDeclarationDetailUserInvoice(d, i), ','
              BY d ORDER i MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

nameSupplierDeclarationDetail 'Поставщики' = 
    GROUP CONCAT nameSupplierInvoice(i) IF inDeclarationDetailUserInvoice(d, i), ','
              BY d ORDER i MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

// --------------------------------- Ограничение на строки декларации ----------------------------------- //

sumNetWeightDeclarationDetailDeclarationInvoiceDetail (d) = GROUP SUM sumNetWeightDeclarationDetail(d) BY declarationInvoiceDetailDeclarationDetail(d); 
sumGrossWeightDeclarationDetailDeclarationInvoiceDetail (d) = GROUP SUM sumGrossWeightDeclarationDetail(d) BY declarationInvoiceDetailDeclarationDetail(d);
sumDeclarationDetailDeclarationInvoiceDetail (d) = GROUP SUM sumDeclarationDetail(d) BY declarationInvoiceDetailDeclarationDetail(d);

CONSTRAINT sumNetWeightDeclarationDetailDeclarationInvoiceDetail(d) != sumNetWeightDeclarationInvoiceDetail(d) 
    MESSAGE 'Вес нетто строк деклараций не соответствует весу нетто позиции декларации'; 
CONSTRAINT sumGrossWeightDeclarationDetailDeclarationInvoiceDetail(d) != sumGrossWeightDeclarationInvoiceDetail(d) 
    MESSAGE 'Вес брутто строк деклараций не соответствует весу брутто позиции декларации'; 
CONSTRAINT sumDeclarationDetailDeclarationInvoiceDetail(d) != sumDeclarationInvoiceDetail(d) 
    MESSAGE 'Сумма строк деклараций не соответствует сумме позиции декларации'; 
    
    
backgroundSumNetWeightDeclarationInvoiceDetail (d) =  RGB(255,128,128) IF (sumNetWeightDeclarationDetailDeclarationInvoiceDetail(d) != sumNetWeightDeclarationInvoiceDetail(d)) OR (NOT sumNetWeightDeclarationDetailDeclarationInvoiceDetail(d));  
backgroundSumGrossWeightDeclarationInvoiceDetail (d) =  RGB(255,128,128) IF (sumGrossWeightDeclarationDetailDeclarationInvoiceDetail(d) != sumGrossWeightDeclarationInvoiceDetail(d)) OR (NOT sumGrossWeightDeclarationDetailDeclarationInvoiceDetail(d));  
backgroundSumDeclarationInvoiceDetail (d) =  RGB(255,128,128) IF (sumDeclarationDetailDeclarationInvoiceDetail(d) != sumDeclarationInvoiceDetail(d)) OR (NOT sumDeclarationDetailDeclarationInvoiceDetail(d));  

EXTEND FORM declaration
    PROPERTIES(di) AFTER nameCountryDeclarationInvoiceDetail(di) 
                   sumNetWeightDeclarationInvoiceDetail BACKGROUND backgroundSumNetWeightDeclarationInvoiceDetail(di), 
                   sumGrossWeightDeclarationInvoiceDetail BACKGROUND backgroundSumGrossWeightDeclarationInvoiceDetail(di) 
    PROPERTIES(di) AFTER priceDeclarationInvoiceDetail(di) sumDeclarationInvoiceDetail BACKGROUND backgroundSumDeclarationInvoiceDetail(di)

;

// -------------------------------------- Создание строк по позициям деклараций -------------------------- //

noneVATCustomsExceptionDeclarationInvoiceDetail(d) = OVERRIDE VATCustomsException.none, VATCustomsExceptionDeclarationInvoiceDetail(d);

isSetDeclarationInvoiceDetail = ABSTRACT BOOLEAN (DeclarationInvoiceDetail);
overSetDeclarationInvoiceDetail = ABSTRACT ACTION LIST (DeclarationInvoiceDetail);

overCreateDeclarationDetailDeclarationInvoiceDetail = ABSTRACT ACTION LIST (DeclarationDetail, DeclarationInvoiceDetail);

createDeclarationDetailDeclaration 'Создать строки' = ACTION (declaration) {
    DELETE d WHERE declarationDeclarationDetail(d) == declaration;
    FOR declarationDeclarationInvoiceDetail(did) == declaration ORDER did  DO {
        IF isSetDeclarationInvoiceDetail(did) THEN {
            overSetDeclarationInvoiceDetail(did);
        } ELSE {    
            FOR declarationDeclarationInvoiceDetail(did) == declaration ORDER did ADDOBJ dd = DeclarationDetail DO {
                declarationDeclarationDetail(dd) <- declaration;
                declarationInvoiceDetailDeclarationDetail(dd) <- did;
                
                nameCustomsDeclarationDetail(dd) <- nameCustomsDeclarationInvoiceDetail(did);
                UOMDeclarationDetail(dd) <- UOMDeclarationInvoiceDetail(did); 
                countryDeclarationDetail(dd) <- countryDeclarationInvoiceDetail(did); 
                
                sumNetWeightDeclarationDetail(dd) <- sumNetWeightDeclarationInvoiceDetail (did);
                sumGrossWeightDeclarationDetail(dd) <- sumGrossWeightDeclarationInvoiceDetail (did);
                
                customsGroupDeclarationDetail(dd) <- customsGroupDeclarationInvoiceDetail (did);
                VATCustomsExceptionDeclarationDetail(dd) <- VATCustomsExceptionDeclarationInvoiceDetail(did);
                
                quantityDeclarationDetail(dd) <- quantityDeclarationInvoiceDetail(did);          
                priceDeclarationDetail(dd) <- priceDeclarationInvoiceDetail(did);
                
                overCreateDeclarationDetailDeclarationInvoiceDetail(dd, did);
            }         
        }
    }
    registrationSumDeclaration(declaration) <- calcRegistrationSumDeclaration(declaration);
} TOOLBAR CONFIRM;

WHEN SESSION FORMS declaration CHANGED(rateExchangeCustomsZoneDeclaration(d)) OR CHANGED(homeCurrencyDeclaration(d)) DO
    registrationSumDeclaration(declaration) <- calcRegistrationSumDeclaration(declaration);

//------------------------------ Копирование строк --------------------// 
overCopyDetailDeclarationDetail = ABSTRACT ACTION LIST (DeclarationDetail, DeclarationDetail);

copyDeclarationDetail 'Копировать' = ACTION (detail) {
    FOR ADDOBJ d = DeclarationDetail DO {          
    
        declarationDeclarationDetail(d) <-  declarationDeclarationDetail(detail);
        declarationInvoiceDetailDeclarationDetail(d) <- declarationInvoiceDetailDeclarationDetail(detail);
        nameCustomsDeclarationDetail(d) <- nameCustomsDeclarationDetail(detail);
        UOMDeclarationDetail(d) <- UOMDeclarationDetail(detail);
        countryDeclarationDetail(d) <- countryDeclarationDetail(detail);
        sumNetWeightDeclarationDetail(d) <-  sumNetWeightDeclarationDetail(detail);
        sumGrossWeightDeclarationDetail(d) <-  sumGrossWeightDeclarationDetail(detail);
        customsGroupDeclarationDetail(d) <- customsGroupDeclarationDetail(detail);
        VATCustomsExceptionDeclarationDetail(d) <- VATCustomsExceptionDeclarationDetail(detail);
        quantityDeclarationDetail(d) <- quantityDeclarationDetail(detail);
        priceDeclarationDetail(d) <- priceDeclarationDetail(detail);
            
        overCopyDetailDeclarationDetail(d, detail);                              
    }
} TOOLBAR;

backgroundVATCustomsExceptionDeclarationDetail 'Цвет' (declarationDetail) = backgroundVATCustomsException() IF countVATCustomsExceptionCustomsGroup(customsGroupDeclarationDetail(declarationDetail)) > 0;

EXTEND FORM declaration
    OBJECTS dd=DeclarationDetail
    PROPERTIES(di, dd) inDeclarationInvoiceDetailDeclarationDetail
    PROPERTIES(dd) numberDeclarationDetail ON CHANGE changeNumberDeclarationDetail(dd), invoicesDeclarationDetail READONLY, nameCustomsDeclarationDetail, shortNameUOMDeclarationDetail,
                   nameCountryDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                   codeCustomsGroupDeclarationDetail, nameVATCustomsExceptionDeclarationDetail BACKGROUND backgroundVATCustomsExceptionDeclarationDetail(dd),
                   quantityDeclarationDetail, priceDeclarationDetail, sumDeclarationDetail, deliverySumDeclarationDetail, chargeSumDeclarationDetail, homeSumDeclarationDetail,
                   percentDutyDeclarationDetail, weightDutyDeclarationDetail, dutySumDeclarationDetail,
                   numberVATDeclarationDetail, percentVATDeclarationDetail, VATSumDeclarationDetail,
                   ADDOBJ, deletedd = DELETESESSION , copyDeclarationDetail FORCE PANEL
    ORDER BY numberDeclarationDetail(dd)

    PROPERTIES (d) createDeclarationDetailDeclaration TODRAW dd FORCE PANEL TOOLBAR
    FILTERS declarationDeclarationDetail(dd) == d

    FILTERGROUP filters
        FILTER 'По позициям декларации' 'F4' declarationInvoiceDetailDeclarationDetail(dd) == di DEFAULT 
;

EXTEND DESIGN declaration {
    declarationDetails {
        ADD dd.box;
    }
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY isPostedDeclaration FORCE GRID BEFORE numberDeclaration(d)
    PROPERTIES(d) READONLY sumDeclarationDetailDeclaration, deliverySumDeclaration, chargeSumDeclaration,
                           homeSumDeclarationDetailDeclaration, dutySumDeclarationDetailDeclaration, VATSumDeclarationDetailDeclaration, registrationSumDeclaration

    OBJECTS dd=DeclarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, nameCustomsDeclarationDetail, nameCountryDeclarationDetail, sumNetWeightDeclarationDetail,
                   codeCustomsGroupDeclarationDetail, quantityDeclarationDetail, priceDeclarationDetail, sumDeclarationDetail,
                   deliverySumDeclarationDetail, chargeSumDeclarationDetail, homeSumDeclarationDetail,
                   percentDutyDeclarationDetail, weightDutyDeclarationDetail, dutySumDeclarationDetail,
                   numberVATDeclarationDetail, percentVATDeclarationDetail, VATSumDeclarationDetail

    FILTERS declarationDeclarationDetail(dd)==d
;

//------------------------------------ Расчет расходов за единицу -----------------------------------------------------//

// Пошлина
dutySumDeclarationInvoiceDetail(d) = GROUP SUM dutySumDeclarationDetail(dd) BY declarationInvoiceDetailDeclarationDetail(dd); 

coeffDeclarationInvoiceDetailUserInvoiceDetail 'Удельный вес по строке' (d) =
    NUMERIC[22,8](sumUserInvoiceDetail(d)) / sumDeclarationInvoiceDetail(declarationInvoiceDetailUserInvoiceDetail(d));

calcDutySumUserInvoiceDetail (d) =
    PARTITION UNGROUP dutySumDeclarationInvoiceDetail
              PROPORTION ROUND(8) coeffDeclarationInvoiceDetailUserInvoiceDetail(d)
              BY declarationInvoiceDetailUserInvoiceDetail(d)
              ORDER d;

calcDutyPriceUserInvoiceDetail 'Пошлина (ед.)' (d) = round(calcDutySumUserInvoiceDetail(d) / quantityUserInvoiceDetail(d),
                                                           roundDeclaration(declarationUserInvoiceDetail(d)));

// Таможенный сбор

coeffDeclarationUserInvoiceDetail 'Удельный вес' (d) =
    NUMERIC[22,8](sumUserInvoiceDetail(d)) / sumUserInvoiceDetailDeclaration(declarationUserInvoiceDetail(d));

calcRegistrationSumUserInvoiceDetail 'Таможенный сбор' (d) =
    PARTITION UNGROUP registrationSumDeclaration
              PROPORTION ROUND(8) coeffDeclarationUserInvoiceDetail(d)
              BY declarationUserInvoiceDetail(d)
              ORDER d;

calcRegistrationPriceUserInvoiceDetail 'Таможенный сбор (ед.)' (d) = round(calcRegistrationSumUserInvoiceDetail(d) / quantityUserInvoiceDetail(d),
                                                                                  roundDeclaration(declarationUserInvoiceDetail(d)));
// НДС
VATSumDeclarationInvoiceDetail(d) = GROUP SUM VATSumDeclarationDetail(dd) BY declarationInvoiceDetailDeclarationDetail(dd); 

calcVATSumUserInvoiceDetail (d) =
    PARTITION UNGROUP VATSumDeclarationInvoiceDetail
              PROPORTION ROUND(8) coeffDeclarationInvoiceDetailUserInvoiceDetail(d)
              BY declarationInvoiceDetailUserInvoiceDetail(d)
              ORDER d;

calcVATPriceUserInvoiceDetail 'НДС (ед.)' (d) = round(calcVATSumUserInvoiceDetail(d) / quantityUserInvoiceDetail(d),
                                                           roundDeclaration(declarationUserInvoiceDetail(d)));                                                                                                                                                                   

// Расчет расходов
recalculateDutyPriceInvoiceDeclaration 'Рассчитать пошлины (за ед.)' = ACTION (declaration) {
    dutyPriceUserInvoiceDetail(d) <- calcDutyPriceUserInvoiceDetail(d) WHERE declarationUserInvoiceDetail(d) == declaration;
} TOOLBAR;

recalculateRegistrationPriceInvoiceDeclaration 'Рассчитать сбор (за ед.)' = ACTION (declaration) {
    registrationPriceUserInvoiceDetail(d) <- calcRegistrationPriceUserInvoiceDetail(d) WHERE declarationUserInvoiceDetail(d) == declaration;
} TOOLBAR;

recalculateVATPriceInvoiceDeclaration 'Рассчитать НДС (за ед.)' = ACTION (declaration) {
    VATPriceUserInvoiceDetail(d) <- calcVATPriceUserInvoiceDetail(d) WHERE declarationUserInvoiceDetail(d) == declaration;
} TOOLBAR;

EXTEND FORM declaration
    PROPERTIES(d) recalculateDutyPriceInvoiceDeclaration TODRAW id, recalculateRegistrationPriceInvoiceDeclaration TODRAW id,
                  recalculateVATPriceInvoiceDeclaration TODRAW id
;

//-- Операция
@defineOperationProperty(showDeclaration, 'Таможенные платежи', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showDeclaration);


//-- Декларирование
createDeclarationDetailUserInvoice 'Рассчитать платежи' (userInvoice) = ACTION (userInvoice) {
    FOR inInvoiceDeclaration(userInvoice, declaration) DO {
        createDeclarationInvoiceDetailDeclaration(declaration);
        createDeclarationDetailDeclaration(declaration);
        FOR declarationDeclarationDetail(detail)== declaration DO {
            homeSumDeclarationDetail(detail) <- (sumDeclarationDetail(detail) * rateExchangeDeclaration(declarationDeclarationDetail(detail))) (+)
                                            deliverySumDeclarationDetail(detail) (+) chargeSumDeclarationDetail(detail);
            percentDutyDeclarationDetail(detail) <- percentDutyCustomsGroupDate(customsGroupDeclarationDetail(detail), dateDeclarationDetail(detail));
            weightDutyDeclarationDetail(detail) <- weightDutyCustomsGroupDate(customsGroupDeclarationDetail(detail), dateDeclarationDetail(detail));
            VATDeclarationDetail(detail) <- IF VATCustomsExceptionDeclarationDetail(detail) THEN
                                           rangeVATCustomsException(VATCustomsExceptionDeclarationDetail(detail))
                                       ELSE
                                           VATCustomsGroupDate(customsGroupDeclarationDetail(detail), dateDeclarationDetail(detail));
            deliverySumDeclarationDetail(detail) <- calcDeliverySumDeclarationDetail(detail);
            chargeSumDeclarationDetail(detail) <- calcChargeSumDeclarationDetail(detail);
            dutySumDeclarationDetail(detail) <- calcDutySumDeclarationDetail(detail);
            VATSumDeclarationDetail(detail) <- calcVATSumDeclarationDetail(detail);                                                                                                                                           
                                                                                                                               
        }
        recalculateDutyPriceInvoiceDeclaration(declaration);
        recalculateRegistrationPriceInvoiceDeclaration(declaration);
    }    
} TOOLBAR; 

EXTEND FORM userInvoice
    OBJECTS d3 = UserInvoiceDetail FIXED GRID
    PROPERTIES(d3) SHOWIF showDeclarationUserInvoice(i) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, descriptionDeclarationUserInvoiceDetail, 
                   codeCustomsGroupUserInvoiceDetail, nameVATCustomsExceptionUserInvoiceDetail, priceUserInvoiceDetail
    PROPERTIES(d3) dutyPriceUserInvoiceDetail, registrationPriceUserInvoiceDetail, VATPriceUserInvoiceDetail                
    PROPERTIES(i) createDeclarationDetailUserInvoice TODRAW d3 SHOWIF showDeclarationUserInvoice(i), descriptionDeclarationTabUserInvoice = descriptionDeclarationUserInvoice SHOWIF showDeclarationUserInvoice(i)                      
    FILTERS userInvoiceUserInvoiceDetail(d3) == i                   
                   
;

EXTEND DESIGN userInvoice{
    specification.box {
        headerExtraParams {
            headerCustoms {
                ADD PROPERTY(showDeclarationUserInvoice(i));
            }
        }
        NEW declarationContainer {
            
            caption = 'Декларирование';
            ADD PROPERTY(descriptionDeclarationTabUserInvoice);
            type = CONTAINERV;
            ADD d3.box;
        }
    }
}

// --------------------------------------------- Дополнительные документы для декларации ---------------------------- //

CLASS CustomsDocument 'Дополнительные документы декларации';
TABLE customsDocument(CustomsDocument);

orderCustomsDocument 'Порядок' = DATA INTEGER (CustomsDocument);
idCustomsDocument 'Код' = DATA VARSTRING[20] (CustomsDocument);
nameCustomsDocument 'Наименование' = DATA VARSTRING[150] (CustomsDocument);
dateCustomsDocument 'Дата' = DATA DATE (CustomsDocument);
sumCustomsDocument 'Сумма' = DATA NUMERIC[16,2] (CustomsDocument);
declarationCustomsDocument = DATA Declaration (CustomsDocument);

TABLE customsDocumentUserInvoice (CustomsDocument, UserInvoice);
inCustomsDocumentUserInvoice 'Вкл' = DATA BOOLEAN (CustomsDocument, UserInvoice);

EXTEND FORM declaration
    OBJECTS cd = CustomsDocument
    PROPERTIES(cd) orderCustomsDocument, dateCustomsDocument, idCustomsDocument, nameCustomsDocument, sumCustomsDocument
    PROPERTIES(cd) ADDOBJ, deleted = DELETESESSION
    FILTERS declarationCustomsDocument(cd) == d
    
    OBJECTS cdu = UserInvoice
    PROPERTIES inCustomsDocumentUserInvoice(cd, cdu)
    PROPERTIES(cdu) READONLY dateUserInvoice, seriesNumberUserInvoice
    FILTERS inInvoiceDeclaration(cdu, d)
;

EXTEND DESIGN declaration {
    detail {
        NEW documents {
            type = CONTAINERH;
            caption = 'Дополнительные документы';
            ADD cd.box {
                fill = 3;
            }
            ADD cdu.box;
        }
    }
}

// ---------------- Связь строки декларации и документов ---------------- //

inDeclarationDetailCustomsDocument (dd, cd) = GROUP SUM 1 IF 
    inCustomsDocumentUserInvoice(cd, ui) AND inDeclarationDetailUserInvoice(dd, ui) AND declarationCustomsDocument(cd) == declarationDeclarationDetail(dd)
    BY dd, cd;  

// -------------------------- Дополнительные платежи для декларации ---------------------------- //

CLASS Payment 'Платеж' ;
TABLE payment (Payment);

@defineDocumentRelation(declaration, Payment, );
@defineDocumentDetailIndex(declaration, Payment);
@defineDocumentDetailActions(declaration, Payment);

namePayment 'Наименование' = DATA VARISTRING[50](Payment);

currencyPayment = DATA Currency (Payment);
nameCurrencyPayment 'Валюта' = nameCurrency(currencyPayment(p)) MINCHARWIDTH 15 PREFCHARWIDTH 20;
shortNameCurrencyPayment 'Валюта' = shortNameCurrency(currencyPayment(p)) MINCHARWIDTH 7 PREFCHARWIDTH 7;

sumPayment 'Сумма' = DATA NUMERIC[16,2](Payment);

rateExchangePayment 'Курс' = DATA NUMERIC[14,3](Payment);

rateSumPayment 'Сумма (конверт.)'= sumPayment(p)*rateExchangePayment(p); 

calcRateExchangePayment 'Курс накладных' (p) = rateOnTypeExchangeCurrencyDate(typeExchangeDeclaration(declarationPayment(p)), currencyPayment(p), dateDeclaration(declarationPayment(p)));
rateExchangePayment(p) <- calcRateExchangePayment(p) WHEN CHANGED (dateDeclaration(declarationPayment(p))) OR
                                                          CHANGED (typeExchangeDeclaration(declarationPayment(p))) OR
                                                          CHANGED (currencyPayment(p));

isChargePayment 'Услуга' = DATA BOOLEAN (Payment);

sumIsCgargePaymentDeclaration 'Сумма платежей по услугам (конверт.)' (declaration) = GROUP SUM rateSumPayment(p) IF isChargePayment(p) BY declarationPayment(p);
sumNotCgargePaymentDeclaration 'Сумма платежей не по услугам (конверт.)'(declaration) = GROUP SUM rateSumPayment(p) IF NOT isChargePayment(p) BY declarationPayment(p);

WHEN SESSION FORMS declaration
    CHANGED(sumIsCgargePaymentDeclaration(d)) DO
        chargeSumDeclaration (d) <- NUMERIC[16,2](sumIsCgargePaymentDeclaration(d));

WHEN SESSION FORMS declaration
    CHANGED(sumNotCgargePaymentDeclaration(d)) DO
        deliverySumDeclaration (d) <- NUMERIC[16,2](sumNotCgargePaymentDeclaration(d));
        
EXTEND FORM declaration
    OBJECTS p = Payment
 
    PROPERTIES (p) indexPayment, namePayment, nameCurrencyPayment, sumPayment, rateExchangePayment, rateSumPayment READONLY, isChargePayment,
                   ADDOBJ, deleteid=DELETESESSION
    ORDER BY indexPayment(p)

    PROPERTIES(d) TODRAW p deletePaymentDeclaration
    FILTERS declarationPayment(p) == d        
; 

EXTEND DESIGN declaration {
    detail {
        NEW extraDocuments {
            caption = 'Дополнительные платежи';
            ADD p.box;
        }
    }
}    
 
 