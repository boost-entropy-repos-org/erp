MODULE PurchaseDeclarationDetail;

REQUIRE PurchaseDeclaration;

NAMESPACE Purchase;

// ------------- Импортер -------------- //

legalEntityDeclaration = DATA LegalEntity(Declaration);
nameLegalEntityDeclaration 'Импортёр' (declaration) = nameLegalEntity(legalEntityDeclaration(declaration));
fullNameLegalEntityDeclaration 'Полное имя импортера' (declaration) = fullNameLegalEntity(legalEntityDeclaration(declaration));
addressLegalEntityDeclaration 'Адрес' (declaration) = addressLegalEntityDate(legalEntityDeclaration(declaration), dateDeclaration(declaration));

@defineDocumentLegalEntityAccess(Declaration, legalEntity, company);

CONSTRAINT legalEntityDeclaration(declaration) AND NOT isCompanyLegalEntity(legalEntityDeclaration(declaration))
    CHECKED BY legalEntityDeclaration MESSAGE 'Импортёр должен быть компанией';

// ------------- Таможенная зона -------------- //

customsZoneDeclaration = DATA CustomsZone(Declaration);
nameCustomsZoneDeclaration 'Таможенная зона' (declaration) = nameCustomsZone(customsZoneDeclaration(declaration));
customsZoneDeclaration(d) <- customsZoneCountry(countryLegalEntity(legalEntityDeclaration(d))) WHEN CHANGED(legalEntityDeclaration(d));

// ------- Валюты ------------ //

homeCurrencyDeclaration = DATA Currency(Declaration);
nameHomeCurrencyDeclaration 'Валюта декларации' (declaration) = nameCurrency(homeCurrencyDeclaration(declaration));
homeCurrencyDeclaration(declaration) <- currencyLegalEntity(legalEntityDeclaration(declaration)) WHEN CHANGED(legalEntityDeclaration(declaration));

currencyDeclaration = DATA Currency(Declaration);
nameCurrencyDeclaration 'Валюта накладных' (declaration) = nameCurrency(currencyDeclaration(declaration));

currencyCustomsZoneDeclaration (declaration) = currencyCustomsZone(customsZoneDeclaration(declaration));
nameCurrencyCustomsZoneDeclaration 'Валюта платежей' (declaration) = nameCurrency(currencyCustomsZoneDeclaration(declaration));

// ------- Типы обмена и курсы ------------ //

typeExchangeDeclaration = DATA TypeExchange(Declaration);
nameTypeExchangeDeclaration 'Тип обмена' (declaration) = nameTypeExchange(typeExchangeDeclaration(declaration));

typeExchangeDeclaration(d) <- defaultTypeExchangeCustomsZone(customsZoneDeclaration(d)) WHEN CHANGED(customsZoneDeclaration(d));

CONSTRAINT currencyTypeExchange(typeExchangeDeclaration(declaration)) != homeCurrencyDeclaration(declaration)
    CHECKED BY typeExchangeDeclaration MESSAGE 'Тип обмена должен соответствовать расчётной валюте';

rateExchangeDeclaration 'Курс накладных' = DATA NUMERIC[14,3](Declaration);
calcRateExchangeDeclaration 'Курс накладных' (declaration) = rateTypeExchangeCurrencyDate(typeExchangeDeclaration(declaration), currencyDeclaration(declaration), dateDeclaration(declaration));
rateExchangeDeclaration(declaration) <- calcRateExchangeDeclaration(declaration) WHEN CHANGED (dateDeclaration(declaration)) OR
                                                                                      CHANGED (typeExchangeDeclaration(declaration)) OR
                                                                                      CHANGED (currencyDeclaration(declaration));

rateExchangeCustomsZoneDeclaration 'Курс платежей' = DATA NUMERIC[14,3](Declaration);
calcRateExchangeCustomsZoneDeclaration 'Курс платежей' = rateTypeExchangeCurrencyDate(typeExchangeDeclaration(declaration), currencyCustomsZoneDeclaration(declaration), dateDeclaration(declaration));
rateExchangeCustomsZoneDeclaration(declaration) <- calcRateExchangeCustomsZoneDeclaration(declaration) WHEN CHANGED (dateDeclaration(declaration)) OR
                                                                                                            CHANGED (typeExchangeDeclaration(declaration)) OR
                                                                                                            CHANGED (customsZoneDeclaration(declaration));

// ------- Округления ------------ //
roundDeclaration 'Точность округления' = DATA INTEGER(Declaration);
roundDeclaration(d) <- defaultRoundCurrency(homeCurrencyDeclaration(d)) WHEN CHANGED(homeCurrencyDeclaration(d));

EXTEND FORM declaration
    PROPERTIES(d) nameLegalEntityDeclaration, nameCurrencyDeclaration, nameCustomsZoneDeclaration, nameHomeCurrencyDeclaration,
                  nameTypeExchangeDeclaration, roundDeclaration, rateExchangeDeclaration, nameCurrencyCustomsZoneDeclaration READONLY,
                  rateExchangeCustomsZoneDeclaration
;

EXTEND DESIGN declaration {
    NEW params {
        type = CONTAINERH;
        NEW paramsColumn1 {
            type = CONTAINERV;
            NEW documentParams {
                caption = 'Параметры документа';
                type = COLUMNS;
                columns = 2;
                ADD PROPERTY(nameLegalEntityDeclaration);
                ADD PROPERTY(nameCustomsZoneDeclaration);
            }
            NEW extraParams {
                type = CONTAINERH;
                NEW currencyParams {
                    type = CONTAINERH;
                    caption = 'Валюты и курсы';
                    NEW currencyParamsColumn1 {
                        type = COLUMNS;
                        columns = 1;
                        ADD PROPERTY(nameHomeCurrencyDeclaration);
                        ADD PROPERTY(nameCurrencyDeclaration);
                        ADD PROPERTY(nameCurrencyCustomsZoneDeclaration);
                    }
                    NEW currencyParamsColumn2 {
                        type = COLUMNS;
                        columns = 1;
                        ADD PROPERTY(nameTypeExchangeDeclaration);
                        ADD PROPERTY(rateExchangeDeclaration);
                        ADD PROPERTY(rateExchangeCustomsZoneDeclaration);
                    }
                }
            }
        }
        NEW paramsColumn2 {
            type = COLUMNS;
            columns = 1;
        }
        NEW roundParams {
            type = COLUMNS;
            columns = 1;
            caption = 'Округление';
            ADD PROPERTY(roundDeclaration);
        }
    }
    NEW detail {
        fill = 1;
        type = TABBED;
        NEW invoices {
            caption = 'Накладные';
        }
        NEW declarationDetails {
            caption = 'Строки декларации';
        } 
    }
    ADD functions.box;
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY nameLegalEntityDeclaration, nameHomeCurrencyDeclaration, nameCurrencyDeclaration
;

// ---------------------------------- Накладные --------------------------------------------------------//

// свойства товаров
overNameCustomsUserInvoiceDetail = ABSTRACT VARISTRING[255](UserInvoiceDetail);
nameCustomsUserInvoiceDetail 'Наименование (декл.)' (d) = OVERRIDE nameSku(skuUserInvoiceDetail(d)), overNameCustomsUserInvoiceDetail(d);

countrySkuUserInvoiceDetail (d) = countrySku(skuUserInvoiceDetail(d));
nameCountrySkuUserInvoiceDetail 'Страна' (d) = nameCountry(countrySkuUserInvoiceDetail(d));
sidOrigin2CountrySkuUserInvoiceDetail 'Код страны' (d) = sidOrigin2Country(countrySkuUserInvoiceDetail(d));

UOMUserInvoiceDetail(d) = UOMSku(skuUserInvoiceDetail(d));

sumNetWeightUserInvoiceDetail 'Вес нетто' (d) = netWeightSku(skuUserInvoiceDetail(d)) * quantityUserInvoiceDetail(d);
sumGrossWeightUserInvoiceDetail 'Вес брутто' (d) = grossWeightSku(skuUserInvoiceDetail(d)) * quantityUserInvoiceDetail(d);

// ТН ВЭД
customsGroupInvoiceDetail = ABSTRACT CustomsGroup(InvoiceDetail);
customsGroupUserInvoiceDetail = DATA CustomsGroup(UserInvoiceDetail);
customsGroupInvoiceDetail(d) += customsGroupUserInvoiceDetail(d);

codeCustomsGroupInvoiceDetail 'ТН ВЭД' (d) = codeCustomsGroup(customsGroupInvoiceDetail(d));
codeCustomsGroupUserInvoiceDetail 'ТН ВЭД' (d) = codeCustomsGroup(customsGroupUserInvoiceDetail(d));

WHEN SESSION FORMS userInvoice
    CHANGED(countryUserInvoiceDetail(d)) OR CHANGED(skuUserInvoiceDetail(d)) DO
        customsGroupUserInvoiceDetail(d) <- customsGroupCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));

// Льготы
VATCustomsExceptionInvoiceDetail = ABSTRACT VATCustomsException(InvoiceDetail);
VATCustomsExceptionUserInvoiceDetail = DATA VATCustomsException(UserInvoiceDetail);
VATCustomsExceptionInvoiceDetail(d) += VATCustomsExceptionUserInvoiceDetail(d);

nameVATCustomsExceptionInvoiceDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionInvoiceDetail(d)) MINCHARWIDTH 15;
nameVATCustomsExceptionUserInvoiceDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionUserInvoiceDetail(d)) MINCHARWIDTH 15;

WHEN SESSION FORMS userInvoice
    CHANGED(countryUserInvoiceDetail(d)) OR CHANGED(skuUserInvoiceDetail(d)) DO
        VATCustomsExceptionUserInvoiceDetail(d) <- VATCustomsExceptionCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));

CONSTRAINT customsGroupUserInvoiceDetail(d) AND VATCustomsExceptionUserInvoiceDetail(d) AND NOT customsGroupVATCustomsException(VATCustomsExceptionUserInvoiceDetail(d)) == customsGroupUserInvoiceDetail(d)
    CHECKED BY VATCustomsExceptionUserInvoiceDetail MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

setCustomsGroupUserInvoiceDetailDeclaration 'Заполнить ТН ВЭД' = ACTION (declaration) {
    FOR declarationUserInvoiceDetail(d) == declaration DO {
        customsGroupUserInvoiceDetail(d) <- customsGroupCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));
        VATCustomsExceptionUserInvoiceDetail(d) <- VATCustomsExceptionCountrySku(countryUserInvoiceDetail(d), skuUserInvoiceDetail(d));
    }
}

// ------------ Таможенные платежи -----------

// Пошлина
dutyPriceInvoiceDetail 'Пошлина (ед.)' = ABSTRACT NUMERIC[16,4](UserInvoiceDetail);
dutyPriceUserInvoiceDetail 'Пошлина (ед.)' = DATA NUMERIC[16,4](UserInvoiceDetail);
dutyPriceInvoiceDetail(detail) += dutyPriceUserInvoiceDetail(detail);

overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
    dutyPriceUserInvoiceDetail(d) <- dutyPriceUserInvoiceDetail(detail);
}    

dutySumInvoiceDetail 'Сумма (пошлина)' (detail) = dutyPriceInvoiceDetail(detail)*quantityInvoiceDetail(detail);
dutySumUserInvoiceDetail 'Сумма (пошлина)' (detail) = dutyPriceUserInvoiceDetail(detail)*quantityUserInvoiceDetail(detail);
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, duty, ' (пошлина) всего');

// Сбор
registrationPriceInvoiceDetail 'Таможенный сбор (ед.)' = ABSTRACT NUMERIC[16,4](InvoiceDetail);
registrationPriceUserInvoiceDetail 'Таможенный сбор (ед.)' = DATA NUMERIC[16,4](UserInvoiceDetail);
registrationPriceInvoiceDetail(detail) += registrationPriceUserInvoiceDetail(detail);

overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
    registrationPriceUserInvoiceDetail(d) <- registrationPriceUserInvoiceDetail(detail);
} 

registrationSumInvoiceDetail 'Сумма (таможенный сбор)' (detail) = registrationPriceInvoiceDetail(detail)*quantityInvoiceDetail(detail);
registrationSumUserInvoiceDetail 'Сумма (таможенный сбор)' (detail) = registrationPriceUserInvoiceDetail(detail)*quantityUserInvoiceDetail(detail);
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, registration, ' (таможенный сбор) всего');

// Проводим по инвойсу
customCostPriceUserInvoiceDetail(invoiceDetail) += registrationPriceUserInvoiceDetail(invoiceDetail) (+) dutyPriceUserInvoiceDetail(invoiceDetail);

// -------------------------------- Расширение накладной свойствами декларации -------------------------- //

showDeclarationInvoice 'Таможенные платежи' = ABSTRACT BOOLEAN(Invoice);
showDeclarationUserInvoice 'Таможенные платежи' = DATA BOOLEAN(UserInvoice) IN documentPrm;
showDeclarationInvoice(invoice) += showDeclarationUserInvoice(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCustoms() showDeclarationUserInvoice
    PROPERTIES(d) BACKGROUND backgroundCustoms() SHOWIF showDeclarationUserInvoice(i) BEFORE numberVATUserInvoiceDetail
        codeCustomsGroupUserInvoiceDetail, nameVATCustomsExceptionUserInvoiceDetail, dutyPriceUserInvoiceDetail, registrationPriceUserInvoiceDetail
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerCustoms {
            caption = 'Таможенные платежи';
            ADD PROPERTY(showDeclarationUserInvoice);
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundCustoms() SHOWIF showDeclarationInvoice(i) BEFORE numberVATInvoiceDetail FORCE GRID
        codeCustomsGroupInvoiceDetail, nameVATCustomsExceptionInvoiceDetail, dutyPriceInvoiceDetail, registrationPriceInvoiceDetail
;

// ------------------------------ Выбор накладных ---------------------------- //
inDeclarationUserInvoice 'Вкл.' (declaration, invoice) = declarationUserInvoice(invoice) == declaration;

inDeclarationUserInvoiceDetail 'Вкл.' (declaration, detail) = dataDeclarationUserInvoiceDetail(detail) == declaration;

FORM declarationInvoices 'Выбрать накладные'
    OBJECTS d=Declaration FIXED PANEL                           
    PROPERTIES(d) READONLY seriesNumberDeclaration, nameLegalEntityDeclaration, nameCurrencyDeclaration, dateTimeDeclaration

    OBJECTS i=UserInvoice
    PROPERTIES (d, i) inDeclarationUserInvoice
    PROPERTIES (i) READONLY numberUserInvoice, seriesUserInvoice, dateUserInvoice, timeUserInvoice, nameSupplierUserInvoice, nameCustomerUserInvoice
    FILTERS inDeclarationUserInvoice(d, i) OR d IS Declaration AND NOT declarationUserInvoice(i)

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(d, id) inDeclarationUserInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail, codeCustomsGroupUserInvoiceDetail,
                            quantityUserInvoiceDetail, priceUserInvoiceDetail
    FILTERS userInvoiceUserInvoiceDetail(id) == i,
            declarationUserInvoiceDetail(id)==d OR d IS Declaration AND NOT declarationUserInvoiceDetail(id)

    FILTERGROUP filtersCurrency
        FILTER 'Только с валютой декларации' 'F10' currencyDeclaration(d) == currencyUserInvoice(i) DEFAULT

    FILTERGROUP filtersImporter
        FILTER 'Только импортёра декларации' 'F11' legalEntityDeclaration(d) == customerUserInvoice(i) DEFAULT
;

DESIGN declarationInvoices FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW split {
            fill = 1;
            type = SPLITV;
            NEW header {
                ADD d.box;
                ADD i.box;
            }
            NEW pane {
                type = TABBED;
                ADD id.box;
            }
        }
        ADD functions.box;
    }
}

selectInvoicesDeclaration 'Выбрать накладные' = ACTION (declaration) {
    FORM declarationInvoices OBJECTS d=declaration MODAL;
} TOOLBAR;

backgroundVATCustomsExceptionUserInvoiceDetail 'Цвет' (invoiceDetail) = backgroundVATCustomsException() IF countVATCustomsExceptionCustomsGroup(customsGroupUserInvoiceDetail(invoiceDetail)) > 0;

EXTEND FORM declaration
    PROPERTIES(d) invoicesDeclaration

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, seriesNumberUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail,
                   nameCustomsUserInvoiceDetail, nameCountrySkuUserInvoiceDetail, sumNetWeightUserInvoiceDetail
    PROPERTIES(id) codeCustomsGroupUserInvoiceDetail, nameVATCustomsExceptionUserInvoiceDetail BACKGROUND backgroundVATCustomsExceptionUserInvoiceDetail(id)
    PROPERTIES(id) READONLY quantityUserInvoiceDetail, priceUserInvoiceDetail
    PROPERTIES(id) dutyPriceUserInvoiceDetail, registrationPriceUserInvoiceDetail

    PROPERTIES (d) selectInvoicesDeclaration TODRAW id FORCE PANEL TOOLBAR,
                   setCustomsGroupUserInvoiceDetailDeclaration TODRAW id FORCE PANEL TOOLBAR
    FILTERS declarationUserInvoiceDetail(id) == d
;

EXTEND DESIGN declaration {
    documentParams {
        ADD PROPERTY(invoicesDeclaration);
    }

    invoices {
        ADD id.box;
    }
}

//------------------------------------------ Разбиение строк инвойсов -------------------------------------------------//

CLASS DeclarationInvoiceDetail 'Позиции накладной';
TABLE declarationInvoiceDetail(DeclarationInvoiceDetail);

declarationDeclarationInvoiceDetail = DATA Declaration (DeclarationInvoiceDetail) NOT NULL DELETE;

declarationInvoiceDetailUserInvoiceDetail = DATA DeclarationInvoiceDetail (UserInvoiceDetail);

//userInvoiceDetailDeclarationInvoiceDetail = DATA UserInvoiceDetail (DeclarationInvoiceDetail) NOT NULL DELETE;
//userInvoiceDeclarationInvoiceDetail (d) = userInvoiceUserInvoiceDetail(userInvoiceDetailDeclarationInvoiceDetail(d));  

nameCustomsDeclarationInvoiceDetail 'Наименование' = DATA VARISTRING[255] (DeclarationInvoiceDetail);

//UOMDeclarationInvoiceDetail 'Ед. изм.' (d) = UOMUserInvoiceDetail (userInvoiceDetailDeclarationInvoiceDetail(d)) PERSISTENT;

UOMDeclarationInvoiceDetail 'Ед. изм.' (d) = DATA UOM (DeclarationInvoiceDetail) PERSISTENT;
shortNameUOMDeclarationInvoiceDetail 'Ед. изм.' (d) = shortNameUOM(UOMDeclarationInvoiceDetail(d));

//countryDeclarationInvoiceDetail 'Страна' (d) = countrySkuUserInvoiceDetail (userInvoiceDetailDeclarationInvoiceDetail(d)) PERSISTENT;
countryDeclarationInvoiceDetail 'Страна' (d) = DATA Country (DeclarationInvoiceDetail) PERSISTENT;
nameCountryDeclarationInvoiceDetail 'Страна' (d) = nameCountry(countryDeclarationInvoiceDetail(d));

sumNetWeightDeclarationInvoiceDetail 'Вес нетто' (d) = DATA NUMERIC[9,3] (DeclarationInvoiceDetail); 
sumGrossWeightDeclarationInvoiceDetail 'Вес брутто' (d) = DATA NUMERIC[9,3] (DeclarationInvoiceDetail);

customsGroupDeclarationInvoiceDetail 'ТН ВЭД' (d) = DATA CustomsGroup (DeclarationInvoiceDetail);
codeCustomsGroupDeclarationInvoiceDetail 'ТН ВЭД' (d) = codeCustomsGroup(customsGroupDeclarationInvoiceDetail(d));

VATCustomsExceptionDeclarationInvoiceDetail 'Льгота НДС' = DATA VATCustomsException (DeclarationInvoiceDetail);
nameVATCustomsExceptionDeclarationInvoiceDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionDeclarationInvoiceDetail(d));

CONSTRAINT customsGroupDeclarationInvoiceDetail(d) AND VATCustomsExceptionDeclarationInvoiceDetail(d) 
           AND NOT customsGroupVATCustomsException(VATCustomsExceptionDeclarationInvoiceDetail(d)) == customsGroupDeclarationInvoiceDetail(d)
    CHECKED BY VATCustomsExceptionDeclarationInvoiceDetail MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

quantityDeclarationInvoiceDetail 'Кол-во' = DATA NUMERIC[14,3](DeclarationInvoiceDetail);
priceDeclarationInvoiceDetail 'Цена' = DATA NUMERIC[14,2] (DeclarationInvoiceDetail);
sumDeclarationInvoiceDetail 'Стоимость' (d) = quantityDeclarationInvoiceDetail(d) * priceDeclarationInvoiceDetail(d);

sumDeclarationInvoiceDetailDeclaration 'Сумма (по позициям накладной)' = GROUP SUM sumDeclarationInvoiceDetail(d)
                                                                               BY declarationDeclarationInvoiceDetail(d) MINCHARWIDTH 15;

noneVATCustomsExceptionUserInvoiceDetail(d) = OVERRIDE VATCustomsException.none, VATCustomsExceptionUserInvoiceDetail(d);
quantityGroupDeclaration 'Кол-во' = GROUP SUM quantityUserInvoiceDetail(d)
                                           BY declarationUserInvoiceDetail(d),
                                              nameCustomsUserInvoiceDetail(d),
                                              UOMUserInvoiceDetail(d),
                                              customsGroupUserInvoiceDetail(d),
                                              noneVATCustomsExceptionUserInvoiceDetail(d),
                                              countryUserInvoiceDetail(d),
                                              priceUserInvoiceDetail(d); //PERSISTENT;

overCreateDeclarationInvoiceDetailDeclaration = ABSTRACT ACTION LIST (Declaration);
//isSetUserInvoiceDetail = ABSTRACT BOOLEAN (UserInvoiceDetail);
//overQuantityDeclarationInvoiceDetail = ABSTRACT ACTION LIST (DeclarationInvoiceDetail, UserInvoiceDetail);

createDeclarationInvoiceDetailDeclaration 'Создать позиции' = ACTION (declaration) {
    DELETE d WHERE declarationDeclarationInvoiceDetail(d) == declaration;

    FOR quantity == quantityGroupDeclaration(declaration, customsName, UOM, customsGroup, customsException, country, price) ADDOBJ dd=DeclarationInvoiceDetail DO {
        // Ключи
        declarationDeclarationInvoiceDetail(dd) <- declaration;
        nameCustomsDeclarationInvoiceDetail(dd) <- customsName;
        UOMDeclarationInvoiceDetail(dd) <- UOM;
        customsGroupDeclarationInvoiceDetail(dd) <- customsGroup;
        VATCustomsExceptionDeclarationInvoiceDetail(dd) <- IF customsException != VATCustomsException.none THEN customsException ELSE NULL;
        countryDeclarationInvoiceDetail(dd) <- country;
        priceDeclarationInvoiceDetail(dd) <- price;

        // Значения
        quantityDeclarationInvoiceDetail (dd) <- quantity;
//        overQuantityDeclarationInvoiceDetail(dd, declaration, customsName, UOM, customsGroup, customsException, country, price);

        // связываем строки накладной и декларации
        declarationInvoiceDetailUserInvoiceDetail(id) <- dd WHERE
            declarationUserInvoiceDetail(id) == declaration AND
            nameCustomsUserInvoiceDetail(id) == customsName AND
            UOMUserInvoiceDetail(id) == UOM AND
            customsGroupUserInvoiceDetail(id) == customsGroup AND
            noneVATCustomsExceptionUserInvoiceDetail(id) == customsException AND
            countryUserInvoiceDetail(id) == country AND
            priceUserInvoiceDetail(id) == price;
    }

    sumNetWeightDeclarationInvoiceDetail(dd) <- [GROUP SUM sumNetWeightUserInvoiceDetail(d) BY declarationInvoiceDetailUserInvoiceDetail(d)](dd) WHERE declarationDeclarationInvoiceDetail(dd) == declaration;
    sumGrossWeightDeclarationInvoiceDetail(dd) <- [GROUP SUM sumGrossWeightUserInvoiceDetail(d) BY declarationInvoiceDetailUserInvoiceDetail(d)](dd) WHERE declarationDeclarationInvoiceDetail(dd) == declaration;
    
    overCreateDeclarationInvoiceDetailDeclaration(declaration);
} TOOLBAR CONFIRM;

EXTEND FORM declaration
    OBJECTS di = DeclarationInvoiceDetail
    PROPERTIES(di) nameCustomsDeclarationInvoiceDetail, shortNameUOMDeclarationInvoiceDetail, nameCountryDeclarationInvoiceDetail,
                   sumNetWeightDeclarationInvoiceDetail, sumGrossWeightDeclarationInvoiceDetail,
                   codeCustomsGroupDeclarationInvoiceDetail, nameVATCustomsExceptionDeclarationInvoiceDetail,
                   quantityDeclarationInvoiceDetail, priceDeclarationInvoiceDetail, sumDeclarationInvoiceDetail,  
                   ADDOBJ, DELETESESSION 
    
    PROPERTIES(d) createDeclarationInvoiceDetailDeclaration TODRAW di FORCE PANEL TOOLBAR
    FILTERS declarationDeclarationInvoiceDetail(di) == d
;
EXTEND DESIGN declaration {
    declarationDetails {
        ADD di.box;
    }
}

//------------------------------------------ Позиции декларации -------------------------------------------------------//

CLASS DeclarationDetail 'Позиция декларации';
TABLE declarationDetail(DeclarationDetail);

declarationDeclarationDetail = DATA Declaration(DeclarationDetail);

@defineDocumentPosted(declaration);

EXTEND FORM declaration
    PROPERTIES(d) isPostedDeclaration
    EVENTS
        ON OK prePostDeclaration(d)
;

EXTEND DESIGN declaration {
    header {
       ADD PROPERTY(isPostedDeclaration) FIRST;
    }
    PROPERTY(formOk) {
        caption = 'Провести';
    }
}

// Свойства полученные от декларации
dateDeclarationDetail 'Дата' (d) = dateDeclaration(declarationDeclarationDetail(d));

homeCurrencyDeclarationDetail (d) = homeCurrencyDeclaration(declarationDeclarationDetail(d));

// Первичные свойства для строк деклараций
nameCustomsDeclarationDetail 'Наименование' = DATA VARISTRING[255](DeclarationDetail);

UOMDeclarationDetail = DATA UOM(DeclarationDetail);
idUOMDeclarationDetail 'Код ед. изм.' (declarationDetail) = idUOM(UOMDeclarationDetail(declarationDetail));
shortNameUOMDeclarationDetail 'Ед. изм.' (declarationDetail) = shortNameUOM(UOMDeclarationDetail(declarationDetail));

customsGroupDeclarationDetail = DATA CustomsGroup(DeclarationDetail);
codeCustomsGroupDeclarationDetail 'ТН ВЭД' (declarationDetail) = codeCustomsGroup(customsGroupDeclarationDetail(declarationDetail)) MINCHARWIDTH 10 MAXCHARWIDTH 10 PREFCHARWIDTH 10;

countryDeclarationDetail = DATA Country(DeclarationDetail);
nameCountryDeclarationDetail 'Страна' (declarationDetail) = nameCountry(countryDeclarationDetail(declarationDetail));
sidCountryDeclarationDetail 'Код страны' (declarationDetail) = sidCountry(countryDeclarationDetail(declarationDetail));
sidOrigin2CountryDeclarationDetail 'Код страны' (declarationDetail) = sidOrigin2Country(countryDeclarationDetail(declarationDetail));

sumNetWeightDeclarationDetail 'Вес нетто' = DATA NUMERIC[9,3] (DeclarationDetail);
sumGrossWeightDeclarationDetail 'Вес брутто' = DATA NUMERIC[9,3] (DeclarationDetail);

sumNetWeightDeclarationDetailDeclaration 'Вес нетто' (declaration)= GROUP SUM sumNetWeightDeclarationDetail(detail) 
    BY declarationDeclarationDetail(detail);
sumGrossWeightDeclarationDetailDeclaration 'Вес брутто' (declaration)= GROUP SUM sumGrossWeightDeclarationDetail(detail) 
    BY declarationDeclarationDetail(detail);
    
quantityDeclarationDetail 'Кол-во' = DATA NUMERIC[14,3](DeclarationDetail);
priceDeclarationDetail 'Цена' = DATA NUMERIC[14,2] (DeclarationDetail);
sumDeclarationDetail 'Стоимость' (d) = priceDeclarationDetail(d) * quantityDeclarationDetail(d);

// ------ Дополнительные расходы ----- //

// Доставка
deliverySumDeclarationDetail 'Тр. расходы' = DATA NUMERIC[14,2] (DeclarationDetail);

// Услуги
chargeSumDeclarationDetail 'Услуги' = DATA NUMERIC[14,2] (DeclarationDetail);

// Суммы в национальной валюте
homeSumDeclarationDetail 'Стоимость (декл.)' = DATA NUMERIC[16,2](DeclarationDetail) MINCHARWIDTH 12;

WHEN SESSION FORMS declaration CHANGED(sumDeclarationDetail(d)) OR CHANGED(rateExchangeDeclaration(declarationDeclarationDetail(d))) OR
                               CHANGED(deliverySumDeclarationDetail(d)) OR CHANGED(chargeSumDeclarationDetail(d)) DO
    homeSumDeclarationDetail(d) <- (sumDeclarationDetail(d) * rateExchangeDeclaration(declarationDeclarationDetail(d))) (+)
                                   deliverySumDeclarationDetail(d) (+) chargeSumDeclarationDetail(d);

// -- Платежи

// Пошлина
percentDutyDeclarationDetail 'Пошлина, %' = DATA NUMERIC[14,3] (DeclarationDetail);
weightDutyDeclarationDetail 'Пошлина, (мин.)' = DATA NUMERIC[14,3] (DeclarationDetail);

WHEN SESSION FORMS declaration CHANGED(customsGroupDeclarationDetail(d)) OR CHANGED(dateDeclarationDetail(d)) DO {
    percentDutyDeclarationDetail(d) <- percentDutyCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));
    weightDutyDeclarationDetail(d) <- weightDutyCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));
}

dutySumDeclarationDetail 'Пошлина' = DATA NUMERIC[16,2] (DeclarationDetail) MINCHARWIDTH 12;

// НДС
VATDeclarationDetail 'НДС' = DATA Range(DeclarationDetail);
numberVATDeclarationDetail 'НДС, номер' (d) = numberRange(VATDeclarationDetail(d));
percentVATDeclarationDetail 'НДС, %' (d) = valueRateRangeDate(VATDeclarationDetail(d), dateDeclarationDetail(d));

CONSTRAINT countryLegalEntity(legalEntityDeclaration(declarationDeclarationDetail(declarationDetail))) != countryRange(VATDeclarationDetail(declarationDetail))
    CHECKED BY VATDeclarationDetail MESSAGE 'Страна шкалы налога должна соответствовать стране импортёра';

VATCustomsExceptionDeclarationDetail 'Льгота НДС' = DATA VATCustomsException(DeclarationDetail);
nameVATCustomsExceptionDeclarationDetail 'Льгота НДС' (d) = nameVATCustomsException(VATCustomsExceptionDeclarationDetail(d));

CONSTRAINT customsGroupDeclarationDetail(d) AND VATCustomsExceptionDeclarationDetail(d) AND NOT customsGroupVATCustomsException(VATCustomsExceptionDeclarationDetail(d)) == customsGroupDeclarationDetail(d)
    CHECKED BY VATCustomsExceptionDeclarationDetail MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

WHEN SESSION FORMS declaration CHANGED(customsGroupDeclarationDetail(d)) OR CHANGED(VATCustomsExceptionDeclarationDetail(d)) OR CHANGED(dateDeclarationDetail(d)) DO
    VATDeclarationDetail(d) <- IF VATCustomsExceptionDeclarationDetail(d) THEN
                                   rangeVATCustomsException(VATCustomsExceptionDeclarationDetail(d))
                               ELSE
                                   VATCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));

VATSumDeclarationDetail 'НДС' = DATA NUMERIC[16,2] (DeclarationDetail) MINCHARWIDTH 12;

// Порядковый номер строки
numberDefaultDeclarationDetail 'Номер' (declarationDetail) =
        PARTITION SUM 1 IF declarationDetail IS DeclarationDetail BY declarationDeclarationDetail(declarationDetail)
        ORDER declarationDetail;

userNumberDeclarationDetail 'Пользовательский номер' (declarationDetail) = DATA INTEGER (DeclarationDetail);
numberDeclarationDetail 'Номер' (declarationDetail) = OVERRIDE numberDefaultDeclarationDetail(declarationDetail), userNumberDeclarationDetail(declarationDetail) MINCHARWIDTH 4 PREFCHARWIDTH 4;

// Свойство для импорта строк деклараций
declarationDetailUserNumberNameCustoms (number, name) = GROUP AGGR declarationDetail BY
        userNumberDeclarationDetail(declarationDetail), nameCustomsDeclarationDetail(declarationDetail)
        WHERE declarationDetail IS DeclarationDetail;

// Итоги по декларации

sumDeclarationDetailDeclaration 'Стоимость' = GROUP SUM sumDeclarationDetail(declarationDetail)
                                                BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

deliverySumDeclarationDetailDeclaration 'Транспортные расходы' = GROUP SUM deliverySumDeclarationDetail(declarationDetail)
                                                                       BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

chargeSumDeclarationDetailDeclaration 'Услуги' = GROUP SUM chargeSumDeclarationDetail(declarationDetail)
                                                       BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

homeSumDeclarationDetailDeclaration 'Стоимость (декл.)' = GROUP SUM homeSumDeclarationDetail(declarationDetail)
                                                            BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

dutySumDeclarationDetailDeclaration 'Пошлина' (declaration) = GROUP SUM dutySumDeclarationDetail(declarationDetail)
                                                                    BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

VATSumDeclarationDetailDeclaration 'НДС' (declaration) = GROUP SUM VATSumDeclarationDetail(declarationDetail)
                                                                   BY declarationDeclarationDetail(declarationDetail) MINCHARWIDTH 15 PERSISTENT;

// ---------------------------------------------------- Суммы расходов по документу -------------------------------- //

// Транспортные расходы
deliverySumDeclaration 'Транспортные расходы' = DATA NUMERIC[16,2] (Declaration) MINCHARWIDTH 15;
deliverySumRoundDeclaration 'Транспортные расходы (округление)' (d) = deliverySumDeclaration(d) (-) deliverySumDeclarationDetailDeclaration(d);

// Услуги
chargeSumDeclaration 'Услуги' = DATA NUMERIC[16,2] (Declaration) MINCHARWIDTH 15;
chargeSumRoundDeclaration 'Услуги (округление)' (d) = chargeSumDeclaration(d) (-) chargeSumDeclarationDetailDeclaration(d);

// Пошлина
dutySumUserInvoiceDetailDeclaration 'Пошлина (по накладным)' (d) =
    GROUP SUM quantityUserInvoiceDetail(d) * dutyPriceUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d) MINCHARWIDTH 15;
dutySumRoundDeclaration 'Пошлина (округление)' (d) = dutySumDeclarationDetailDeclaration(d) (-) dutySumUserInvoiceDetailDeclaration(d);

// Таможенный сбор
registrationSumDeclaration 'Таможенный сбор' = DATA NUMERIC[16,2] (Declaration) MINCHARWIDTH 15;

registrationSumUserInvoiceDetailDeclaration 'Таможенный сбор (по накладным)' (d) =
    GROUP SUM quantityUserInvoiceDetail(d) * registrationPriceUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d) MINCHARWIDTH 15;
registrationSumRoundDeclaration 'Таможенный сбор (округление)' (d) = registrationSumDeclaration(d) (-) registrationSumUserInvoiceDetailDeclaration(d);

EXTEND FORM declaration
    PROPERTIES(d)          sumDeclarationDetailDeclaration
    PROPERTIES(d)          deliverySumDeclaration, chargeSumDeclaration
    PROPERTIES(d) READONLY homeSumDeclarationDetailDeclaration, dutySumDeclarationDetailDeclaration, VATSumDeclarationDetailDeclaration
    PROPERTIES(d)          registrationSumDeclaration

    PROPERTIES(d) READONLY deliverySumRoundDeclaration, chargeSumRoundDeclaration, dutySumRoundDeclaration, registrationSumRoundDeclaration
;

EXTEND DESIGN declaration {
    paramsColumn2 {
        NEW sumParams {
            type = COLUMNS;
            columns = 1;
            caption = 'Суммы документа';
            ADD PROPERTY(sumDeclarationDetailDeclaration);
            ADD PROPERTY(deliverySumDeclaration);
            ADD PROPERTY(chargeSumDeclaration);
            ADD PROPERTY(homeSumDeclarationDetailDeclaration);
            ADD PROPERTY(dutySumDeclarationDetailDeclaration);
            ADD PROPERTY(VATSumDeclarationDetailDeclaration);
            ADD PROPERTY(registrationSumDeclaration);
        }
    }
    roundParams {
        ADD PROPERTY(deliverySumRoundDeclaration);
        ADD PROPERTY(chargeSumRoundDeclaration);
        ADD PROPERTY(dutySumRoundDeclaration);
        ADD PROPERTY(registrationSumRoundDeclaration);
    }
}

// ----------------------- Расчет суммы транспортных расходов -------------------------- //

coeffSumDeclarationDetail 'Удельный вес по стоимости' = NUMERIC[22,8](sumDeclarationDetail(d)) / sumDeclarationDetailDeclaration(declarationDeclarationDetail(d));

calcDeliverySumDeclarationDetail = round(deliverySumDeclaration(declarationDeclarationDetail(d)) * coeffSumDeclarationDetail(d),
                                         roundDeclaration(declarationDeclarationDetail(d)));
WHEN SESSION FORMS declaration CHANGED(calcDeliverySumDeclarationDetail(d)) DO {
    deliverySumDeclarationDetail(d) <- calcDeliverySumDeclarationDetail(d);
}

// ----------------------- Расчет суммы услуг -------------------------- //

calcChargeSumDeclarationDetail = round(chargeSumDeclaration(declarationDeclarationDetail(d)) * coeffSumDeclarationDetail(d),
                                       roundDeclaration(declarationDeclarationDetail(d)));
WHEN SESSION FORMS declaration CHANGED(calcChargeSumDeclarationDetail(d)) DO {
    chargeSumDeclarationDetail(d) <- calcChargeSumDeclarationDetail(d);
}

// -------------------------------- Расчет таможенных пошлин -------------------------- //

calcSumPriceDutyDeclarationDetail 'Пошлина по стоимости' (declarationDetail) =
    homeSumDeclarationDetail(declarationDetail) * percentDutyDeclarationDetail(declarationDetail) / 100.0;

calcSumWeightDutyDeclarationDetail 'Пошлина, (мин.)' (declarationDetail) = sumNetWeightDeclarationDetail(declarationDetail) *
                                                                           weightDutyDeclarationDetail(declarationDetail) *
                                                                           rateExchangeCustomsZoneDeclaration(declarationDeclarationDetail(declarationDetail));

isWeightDutyDeclarationDetail (d) = calcSumWeightDutyDeclarationDetail(d) > calcSumPriceDutyDeclarationDetail(d);  

calcDutySumDeclarationDetail 'Пошлина' (d) = roundPriceCurrency((MAX calcSumWeightDutyDeclarationDetail(d),
                                                                     calcSumPriceDutyDeclarationDetail(d)),
                                                                homeCurrencyDeclarationDetail(d)) MINCHARWIDTH 12;

WHEN SESSION FORMS declaration CHANGED(calcDutySumDeclarationDetail(d)) DO
    dutySumDeclarationDetail(d) <- calcDutySumDeclarationDetail(d);

// -------------------------------- Расчет НДС -------------------------- //

baseVATSumDeclarationDetail(d) = homeSumDeclarationDetail(d) (+) dutySumDeclarationDetail(d); 

calcVATSumDeclarationDetail 'НДС' (d) =
    roundPriceCurrency(baseVATSumDeclarationDetail(d) *
                       percentVATDeclarationDetail(d) / 100.0,
                       homeCurrencyDeclarationDetail(d)) MINCHARWIDTH 12;

WHEN SESSION FORMS declaration
    CHANGED(homeSumDeclarationDetail(d)) OR CHANGED(dutySumDeclarationDetail(d)) OR
    CHANGED(VATDeclarationDetail(d)) OR CHANGED(homeCurrencyDeclarationDetail(d)) DO
    VATSumDeclarationDetail(d) <- calcVATSumDeclarationDetail(d);

// ------------------------------ Таможенный сбор ----------------------------- //

registrationSumDeclarationDetail 'Таможенный сбор (валют.)' (d) =
    registrationCustomsGroupDate(customsGroupDeclarationDetail(d), dateDeclarationDetail(d));

maxRegistrationSumDeclaration 'Таможенный сбор (валют.)' (d) =
    GROUP MAX registrationSumDeclarationDetail(d) BY declarationDeclarationDetail(d);

calcRegistrationSumDeclaration 'Таможенный сбор' (d) = roundPriceCurrency(maxRegistrationSumDeclaration(d) *
                                                                          rateExchangeCustomsZoneDeclaration(d),
                                                                          homeCurrencyDeclaration(d)) MINCHARWIDTH 12;

// -------------- Связь строк деклараций и строк накладных ---------------------- //

declarationInvoiceDetailDeclarationDetail = DATA DeclarationInvoiceDetail(DeclarationDetail);
inDeclarationInvoiceDetailDeclarationDetail 'Вкл.' (id, dd) = declarationInvoiceDetailDeclarationDetail(dd) == id;

//declarationDetailDeclarationInvoiceDetail = DATA DeclarationDetail(DeclarationInvoiceDetail);
//inDeclarationInvoiceDetailDeclarationDetail 'Вкл.' (id, dd) = declarationDetailDeclarationInvoiceDetail(id) == dd;

inDeclarationDetailUserInvoiceDetail (d, i) = declarationInvoiceDetailDeclarationDetail(d) == declarationInvoiceDetailUserInvoiceDetail(i);
inDeclarationDetailUserInvoice (d, i) = GROUP SUM 1 IF inDeclarationDetailUserInvoiceDetail (d, i) BY d, userInvoiceUserInvoiceDetail(i);

invoicesDeclarationDetail 'Накладные' (d) =
    GROUP CONCAT seriesNumberInvoice(i) IF inDeclarationDetailUserInvoice(d, i), ','
              BY d ORDER i MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

// -------------------------------------- Создание позиций по строкам накладной -------------------------- //

noneVATCustomsExceptionDeclarationInvoiceDetail(d) = OVERRIDE VATCustomsException.none, VATCustomsExceptionDeclarationInvoiceDetail(d);
//quantityGroupDeclaration 'Кол-во' = GROUP SUM quantityDeclarationInvoiceDetail(d)
//                                           BY declarationDeclarationInvoiceDetail(d),
//                                              nameCustomsDeclarationInvoiceDetail(d),
//                                              UOMDeclarationInvoiceDetail(d),
//                                              customsGroupDeclarationInvoiceDetail(d),
//                                              noneVATCustomsExceptionDeclarationInvoiceDetail(d),
//                                              countryDeclarationInvoiceDetail(d),
//                                              priceDeclarationInvoiceDetail(d); //PERSISTENT;

//overQuantityDeclarationDetail = ABSTRACT ACTION LIST (DeclarationDetail, Declaration, VARISTRING[255], UOM, CustomsGroup, VATCustomsException, Country, NUMERIC[14,2]);

overCreateDeclarationDetailDeclarationInvoiceDetail = ABSTRACT ACTION LIST (DeclarationDetail, DeclarationInvoiceDetail);
createDeclarationDetailDeclaration 'Создать позиции' = ACTION (declaration) {
    DELETE d WHERE declarationDeclarationDetail(d) == declaration;

    FOR declarationDeclarationInvoiceDetail(did) == declaration ORDER did ADDOBJ dd = DeclarationDetail DO {
        declarationDeclarationDetail(dd) <- declaration;
        declarationInvoiceDetailDeclarationDetail(dd) <- did;
        
        nameCustomsDeclarationDetail(dd) <- nameCustomsDeclarationInvoiceDetail(did);
        UOMDeclarationDetail(dd) <- UOMDeclarationInvoiceDetail(did); 
        countryDeclarationDetail(dd) <- countryDeclarationInvoiceDetail(did); 
        
        sumNetWeightDeclarationDetail(dd) <- sumNetWeightDeclarationInvoiceDetail (did);
        sumGrossWeightDeclarationDetail(dd) <- sumGrossWeightDeclarationInvoiceDetail (did);
        
        customsGroupDeclarationDetail(dd) <- customsGroupDeclarationInvoiceDetail (did);
        VATCustomsExceptionDeclarationDetail(dd) <- VATCustomsExceptionDeclarationInvoiceDetail(did);
        
        quantityDeclarationDetail(dd) <- quantityDeclarationInvoiceDetail(did);          
        priceDeclarationDetail(dd) <- priceDeclarationInvoiceDetail(did);
        
        overCreateDeclarationDetailDeclarationInvoiceDetail(dd, did);
    } 

    registrationSumDeclaration(declaration) <- calcRegistrationSumDeclaration(declaration);
} TOOLBAR CONFIRM;

overCopyDetailDeclarationDetail = ABSTRACT ACTION LIST (DeclarationDetail, DeclarationDetail);

copyDeclarationDetail 'Копировать' = ACTION (detail) {
    FOR ADDOBJ d = DeclarationDetail DO {          
    
        declarationDeclarationDetail(d) <-  declarationDeclarationDetail(detail);
        declarationInvoiceDetailDeclarationDetail(d) <- declarationInvoiceDetailDeclarationDetail(detail);
        nameCustomsDeclarationDetail(d) <- nameCustomsDeclarationDetail(detail);
        UOMDeclarationDetail(d) <- UOMDeclarationDetail(detail);
        countryDeclarationDetail(d) <- countryDeclarationDetail(detail);
        sumNetWeightDeclarationDetail(d) <-  sumNetWeightDeclarationDetail(detail);
        sumGrossWeightDeclarationDetail(d) <-  sumGrossWeightDeclarationDetail(detail);
        customsGroupDeclarationDetail(d) <- customsGroupDeclarationDetail(detail);
        VATCustomsExceptionDeclarationDetail(d) <- VATCustomsExceptionDeclarationDetail(detail);
        quantityDeclarationDetail(d) <- quantityDeclarationDetail(detail);
        priceDeclarationDetail(d) <- priceDeclarationDetail(detail);
            
        overCopyDetailDeclarationDetail(d, detail);                              
    }
} TOOLBAR;

backgroundVATCustomsExceptionDeclarationDetail 'Цвет' (declarationDetail) = backgroundVATCustomsException() IF countVATCustomsExceptionCustomsGroup(customsGroupDeclarationDetail(declarationDetail)) > 0;

EXTEND FORM declaration
    OBJECTS dd=DeclarationDetail
    PROPERTIES(di, dd) inDeclarationInvoiceDetailDeclarationDetail
    PROPERTIES(dd) numberDeclarationDetail, invoicesDeclarationDetail READONLY, nameCustomsDeclarationDetail, shortNameUOMDeclarationDetail,
                   nameCountryDeclarationDetail, sumNetWeightDeclarationDetail, sumGrossWeightDeclarationDetail,
                   codeCustomsGroupDeclarationDetail, nameVATCustomsExceptionDeclarationDetail BACKGROUND backgroundVATCustomsExceptionDeclarationDetail(dd),
                   quantityDeclarationDetail, priceDeclarationDetail, sumDeclarationDetail, deliverySumDeclarationDetail, chargeSumDeclarationDetail, homeSumDeclarationDetail,
                   percentDutyDeclarationDetail, weightDutyDeclarationDetail, dutySumDeclarationDetail,
                   numberVATDeclarationDetail, percentVATDeclarationDetail, VATSumDeclarationDetail,
                   ADDOBJ, DELETESESSION, copyDeclarationDetail FORCE PANEL

    PROPERTIES (d) createDeclarationDetailDeclaration TODRAW dd FORCE PANEL TOOLBAR
    FILTERS declarationDeclarationDetail(dd) == d

    FILTERGROUP filters
        FILTER 'По позициям накладной' 'F4' declarationInvoiceDetailDeclarationDetail(dd) == di DEFAULT 
;

EXTEND DESIGN declaration {
    declarationDetails {
        ADD dd.box;
    }
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY isPostedDeclaration FORCE GRID BEFORE numberDeclaration(d)
    PROPERTIES(d) READONLY sumDeclarationDetailDeclaration, deliverySumDeclaration, chargeSumDeclaration,
                           homeSumDeclarationDetailDeclaration, dutySumDeclarationDetailDeclaration, VATSumDeclarationDetailDeclaration, registrationSumDeclaration

    OBJECTS dd=DeclarationDetail
    PROPERTIES(dd) READONLY numberDeclarationDetail, nameCustomsDeclarationDetail, nameCountryDeclarationDetail, sumNetWeightDeclarationDetail,
                   codeCustomsGroupDeclarationDetail, quantityDeclarationDetail, priceDeclarationDetail, sumDeclarationDetail,
                   deliverySumDeclarationDetail, chargeSumDeclarationDetail, homeSumDeclarationDetail,
                   percentDutyDeclarationDetail, weightDutyDeclarationDetail, dutySumDeclarationDetail,
                   numberVATDeclarationDetail, percentVATDeclarationDetail, VATSumDeclarationDetail

    FILTERS declarationDeclarationDetail(dd)==d
;

//------------------------------------ Расчет расходов за единицу -----------------------------------------------------//

// Пошлина
dutySumDeclarationInvoiceDetail(d) = GROUP SUM dutySumDeclarationDetail(dd) BY declarationInvoiceDetailDeclarationDetail(dd); 

coeffDeclarationInvoiceDetailUserInvoiceDetail 'Удельный вес по строке' (d) =
    NUMERIC[22,8](sumUserInvoiceDetail(d)) / sumDeclarationInvoiceDetail(declarationInvoiceDetailUserInvoiceDetail(d));

calcDutySumUserInvoiceDetail (d) =
    PARTITION UNGROUP dutySumDeclarationInvoiceDetail
              PROPORTION ROUND(4) coeffDeclarationInvoiceDetailUserInvoiceDetail(d)
              BY declarationInvoiceDetailUserInvoiceDetail(d)
              ORDER d;

calcDutyPriceUserInvoiceDetail 'Пошлина (ед.)' (d) = round(calcDutySumUserInvoiceDetail(d) / quantityUserInvoiceDetail(d),
                                                           roundDeclaration(declarationUserInvoiceDetail(d)));

// Таможенный сбор

coeffDeclarationUserInvoiceDetail 'Удельный вес' (d) =
    NUMERIC[22,8](sumUserInvoiceDetail(d)) / sumUserInvoiceDetailDeclaration(declarationUserInvoiceDetail(d));

calcRegistrationSumUserInvoiceDetail 'Таможенный сбор' (d) =
    PARTITION UNGROUP registrationSumDeclaration
              PROPORTION ROUND(4) coeffDeclarationUserInvoiceDetail(d)
              BY declarationUserInvoiceDetail(d)
              ORDER d;

calcRegistrationPriceUserInvoiceDetail 'Таможенный сбор (ед.)' (d) = round(calcRegistrationSumUserInvoiceDetail(d) / quantityUserInvoiceDetail(d),
                                                                                  roundDeclaration(declarationUserInvoiceDetail(d)));

// Расчет расходов
recalculatePriceInvoiceDeclaration 'Рассчитать расходы (за ед.)' = ACTION (declaration) {
    dutyPriceUserInvoiceDetail(d) <- calcDutyPriceUserInvoiceDetail(d) WHERE declarationUserInvoiceDetail(d) == declaration;
    registrationPriceUserInvoiceDetail(d) <- calcRegistrationPriceUserInvoiceDetail(d) WHERE declarationUserInvoiceDetail(d) == declaration;
} TOOLBAR;

EXTEND FORM declaration
    PROPERTIES(d) recalculatePriceInvoiceDeclaration TODRAW id
;

//-- Операция
@defineOperationProperty(showDeclaration, 'Таможенные платежи', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showDeclaration);


//-- Декларирование
createDeclarationDetailUserInvoice 'Рассчитать платежи' (userInvoice) = ACTION (userInvoice) {
    FOR inInvoiceDeclaration(userInvoice, declaration) DO {
        createDeclarationInvoiceDetailDeclaration(declaration);
        createDeclarationDetailDeclaration(declaration);
        FOR declarationDeclarationDetail(detail)== declaration DO {
            homeSumDeclarationDetail(detail) <- (sumDeclarationDetail(detail) * rateExchangeDeclaration(declarationDeclarationDetail(detail))) (+)
                                            deliverySumDeclarationDetail(detail) (+) chargeSumDeclarationDetail(detail);
            percentDutyDeclarationDetail(detail) <- percentDutyCustomsGroupDate(customsGroupDeclarationDetail(detail), dateDeclarationDetail(detail));
            weightDutyDeclarationDetail(detail) <- weightDutyCustomsGroupDate(customsGroupDeclarationDetail(detail), dateDeclarationDetail(detail));
            VATDeclarationDetail(detail) <- IF VATCustomsExceptionDeclarationDetail(detail) THEN
                                           rangeVATCustomsException(VATCustomsExceptionDeclarationDetail(detail))
                                       ELSE
                                           VATCustomsGroupDate(customsGroupDeclarationDetail(detail), dateDeclarationDetail(detail));
            deliverySumDeclarationDetail(detail) <- calcDeliverySumDeclarationDetail(detail);
            chargeSumDeclarationDetail(detail) <- calcChargeSumDeclarationDetail(detail);
            dutySumDeclarationDetail(detail) <- calcDutySumDeclarationDetail(detail);
            VATSumDeclarationDetail(detail) <- calcVATSumDeclarationDetail(detail);                                                                                                                                           
                                                                                                                               
        }
        recalculatePriceInvoiceDeclaration(declaration);
    }    
} TOOLBAR; 

EXTEND FORM userInvoice
    OBJECTS d3 = UserInvoiceDetail FIXED GRID
    PROPERTIES(d3) SHOWIF showDeclarationUserInvoice(i) indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, descriptionDeclarationUserInvoiceDetail, 
                   codeCustomsGroupUserInvoiceDetail, nameVATCustomsExceptionUserInvoiceDetail, dutyPriceUserInvoiceDetail, registrationPriceUserInvoiceDetail
    PROPERTIES(i) createDeclarationDetailUserInvoice TODRAW d3 SHOWIF showDeclarationUserInvoice(i), descriptionDeclarationTabUserInvoice = descriptionDeclarationUserInvoice SHOWIF showDeclarationUserInvoice(i)                      
    FILTERS userInvoiceUserInvoiceDetail(d3) == i                   
                   
;

EXTEND DESIGN userInvoice{
    specification.box {
        headerExtraParams {
            headerCustoms {
                ADD PROPERTY(showDeclarationUserInvoice);
            }
        }
        NEW declarationContainer {
            
            caption = 'Декларирование';
            ADD PROPERTY(descriptionDeclarationTabUserInvoice);
            type = CONTAINERV;
            ADD d3.box;
        }
    }
}

// --------------------------------------------- Дополнительные документы для декларации ---------------------------- //

CLASS CustomsDocument 'Дополнительные документы декларации';
TABLE customsDocument(CustomsDocument);

idCustomsDocument 'Код' = DATA VARSTRING[20] (CustomsDocument);
nameCustomsDocument 'Наименование' = DATA VARSTRING[150] (CustomsDocument);
dateCustomsDocument 'Дата' = DATA DATE (CustomsDocument);
sumCustomsDocument 'Сумма' = DATA NUMERIC[16,2] (CustomsDocument);
declarationCustomsDocument = DATA Declaration (CustomsDocument);

TABLE customsDocumentUserInvoice (CustomsDocument, UserInvoice);
inCustomsDocumentUserInvoice 'Вкл' = DATA BOOLEAN (CustomsDocument, UserInvoice);

EXTEND FORM declaration
    OBJECTS cd = CustomsDocument
    PROPERTIES(cd) dateCustomsDocument, idCustomsDocument, nameCustomsDocument, sumCustomsDocument
    PROPERTIES(cd) ADDOBJ, DELETE
    FILTERS declarationCustomsDocument(cd) == d
    
    OBJECTS cdu = UserInvoice
    PROPERTIES inCustomsDocumentUserInvoice(cd, cdu)
    PROPERTIES(cdu) READONLY dateUserInvoice, seriesNumberUserInvoice
    FILTERS inInvoiceDeclaration(cdu, d)
;

EXTEND DESIGN declaration {
    detail {
        NEW documents {
            type = CONTAINERH;
            caption = 'Дополнительные документы';
            ADD cd.box;
            ADD cdu.box;
        }
    }
}

// ---------------- Связь строки декларации и документов ---------------- //

inDeclarationDetailCustomsDocument (dd, cd) = GROUP SUM 1 IF inCustomsDocumentUserInvoice(cd, ui) AND inDeclarationDetailUserInvoice(dd, ui) BY dd, cd;  
