MODULE ArticleCustomsDashboard;

REQUIRE ArticleTranslateDashboard, 
        CustomsGroupArticle, 
        ComplianceGroupArticle,
        ItemFashion;
        
NAMESPACE Item;

// Обработка статуса

completedCustoms 'Обработан' = DATA BOOLEAN (Item);
notCompletedCustoms 'Не обработан' (article) = GROUP SUM 1 IF Item i IS Item AND NOT completedCustoms(i) BY article(i);
completedCustoms 'Обработан' = Article a IS Article AND NOT notCompletedCustoms(a);

changeCompletedCustoms (Article article) = ACTION {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        FOR article(Item item) == article DO {
            completedCustoms(item) <- TRUE;
        }
    } ELSE {
        FOR article(Item item) == article DO {
            completedCustoms(item) <- NULL;
        }                
    }        
}

// Подсчет необработанных артикулов для групп
countNotCompletedCustomsArticles 'Не обработано (к-во)' (group) = GROUP SUM 1 IF completedTranslate(Article article) AND notCompletedCustoms(article) BY itemGroup(article);
recCountNotCompletedCustomsArticles 'Не обработано (к-во)' (parent) = GROUP SUM countNotCompletedCustomsArticles(ItemGroup child) IF isParent(child, ItemGroup parent) BY parent;

// Не заполнены атрибуты
nullCustoms 'Без атрибутов' (Country country, Item item) =  item IS Item AND country IS Country AND NOT customsGroup(country, item) AND NOT completedCustoms(item);
nullCustoms 'Без атрибутов' (country, article) = GROUP SUM 1 IF Item item IS Item AND Country country IS Country AND NOT customsGroup(country, item) AND NOT completedCustoms(item) BY country, article(item);

// todo : workaround, так как нельзя в сессионных событиях обращаться к форме
dateArticleCustomsDashboard 'Дата' = DATA DATE (User);
dateArticleCustomsDashboard 'Дата' () = dateArticleCustomsDashboard(currentUser());
setDateArticleCustomsDashboard() = ACTION dateArticleCustomsDashboard(User u) <- currentDate() WHERE u == currentUser();

changeDateArticleCustomsDashboard() = ACTION {
    REQUEST DATE INPUT;
    dateArticleCustomsDashboard(User u) <- requestedDate() WHERE u == currentUser();
}

filterCustomsInvoice= DATA LOCAL Purchase.Invoice ();
descriptionFilterCustomsInvoice 'Накладная' = description(filterCustomsInvoice());

FORM articleCustomsDashboard 'Заполнение ТНВЭД'

    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser()
    OBJECTS c=Country FIXED PANEL
    PROPERTIES(c) SELECTOR name

    PROPERTIES dateArticleCustomsDashboard() ON CHANGE changeDateArticleCustomsDashboard()

    TREE groupTree g=ItemGroup PARENT parent
    PROPERTIES READONLY order(g),name(g), recCountNotCompletedCustomsArticles(g)
    ORDER BY order(g), name(g)
    FILTERS active(g)
    FILTERGROUP notCustomsFilters
        FILTER 'Не обработан' recCountNotCompletedCustomsArticles(g) 'F6'

    OBJECTS a=Article
    PROPERTIES(a) READONLY nameBrand, id, canonicalNameItemGroup FORCE PANEL, 
                           originalCustomsGroup, caption, composition, nameUOM, nameCountry, netWeight, grossWeight, nameGender
    PROPERTIES(c, a) BACKGROUND hintEditableBackground() codeCustomsGroup ON CHANGE changeCodeCustomsGroup(c, a) ON CHANGEWYS changeWYSCodeCustomsGroup(c, a), nameCustomsGroup, nameComplianceGroup
    PROPERTIES                                           completedCustoms(a) ON CHANGE changeCompletedCustoms(a)
    PROPERTIES(a) EDITFORM
    
    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullCustoms(c,a) 'F7'
        FILTER 'С атрибутами' NOT nullCustoms(c,a) 'F6' 
    FILTERGROUP groupFilters
        FILTER 'Переведены' completedTranslate(a) 'F10' DEFAULT

    FILTERS isParent(g, a)
//    FILTERGROUP groupFilters
//        FILTER 'По группам' 'F11' isParentGroupArticle(g, a) DEFAULT
//        FILTER 'Без групп' 'ctrl F11' captionArticle(a) IF NOT itemGroupArticle(a)

    FILTERGROUP translateFilters
        FILTER 'Не обработан' notCompletedCustoms(a) 'F9' DEFAULT
        FILTER 'Обработан' completedCustoms(a) 'F8'

    FILTERS quantityInvoiceDetail(a, currentUser()) OR (a IS Article AND NOT countInvoices(currentUser()))        

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoice, idBarcode, idArticle, id, 
                           originalCaption, originalComposition, originalCustomsGroup, 
                           caption, composition, nameUOM, nameCountry, canonicalNameItemGroup, 
                           idItemGroup, nameColor, nameSize, nameGender, image FORCE PANEL
    PROPERTIES(i) originalSize READONLY
    ORDER BY id(i)
    PROPERTIES BACKGROUND hintEditableBackground() codeCustomsGroup(c, i) ON CHANGE changeCodeCustomsGroup(c, i), nameCustomsGroup(c, i), nameComplianceGroup(c, i)
    PROPERTIES completedCustoms(i)
    PROPERTIES(i) EDITFORM SHOWIF enableEditing(i)
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' nullCustoms(c,i) 'F7'       
        FILTER 'С атрибутами' NOT nullCustoms(c,i) 'F6'       
    FILTERGROUP itemFilters
        FILTER 'По артикулам' article(i) == a 'F4' DEFAULT
        FILTER 'По группам (не обработан)' isParent(g,i) AND completedTranslate(i) AND NOT completedCustoms(i) 'shift F4'
        FILTER 'По группам' isParent(g,i) 'ctrl F4'
        FILTER 'По артикулам/инвойсам' article(i) == a AND (quantityInvoiceDetail(i, currentUser()) OR (i IS Item AND NOT countInvoices(currentUser()))) 'shift F5'

    EVENTS 
        ON INIT setDateArticleCustomsDashboard()                
;

DESIGN articleCustomsDashboard {
    NEW header {
        type = CONTAINERH;
        NEW dataContainer {     
            caption = 'Дата';
            MOVE PROPERTY(dateArticleCustomsDashboard());
        }
        MOVE c.box;
        NEW filter {
            caption = 'Фильтр';
            type = CONTAINERH;
            MOVE PROPERTY(seriesNumberDateInvoicesCurrentUser());
            MOVE PROPERTY(selectPurchaseInvoicesCurrentUser());
        }        
    }

    NEW pane {
        type = SPLITH;
        fill = 1;
        NEW tree1{
            type = SPLITV;
            fill = 1;
            MOVE groupTree.tree.box {fill = 2;}
            NEW imageBox1 {
                fill = 3;
                caption = 'Изображение';                     
                MOVE PROPERTY(image(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW row211 {
            fill = 3;
            type = SPLITV;
            MOVE a.box {
                defaultComponent = TRUE;
                fill = 2;
            }
            MOVE i.box;
        }
    }

    PROPERTY(id(a)) { minimumCharWidth = 6; preferredCharWidth = 10;}

    PROPERTY(id(i)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(composition(i)) { minimumCharWidth = 30; preferredCharWidth = 40;}
    PROPERTY(originalCustomsGroup(i)) { minimumCharWidth = 11; preferredCharWidth = 15;}
    PROPERTY(originalComposition(i)) { minimumCharWidth = 11; preferredCharWidth = 15;}
    PROPERTY(caption(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(originalCaption(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(composition(i)) { minimumCharWidth = 30; preferredCharWidth = 40;}
    PROPERTY(nameSize(i)) { minimumCharWidth = 3; preferredCharWidth = 10;}
    
    MOVE functions.box;
}

// -- Проставляем страну по умолчанию
seekDefaultCountryArticleCustomsDashboard() = ACTION {
    IF defaultCountry() THEN {
        SEEK articleCustomsDashboard.c = defaultCountry();
    }
}
EXTEND FORM articleCustomsDashboard
    EVENTS ON INIT seekDefaultCountryArticleCustomsDashboard()
;

completeArticleCustomsDashboard 'Подтвердить все'(Country country) = ACTION {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [= FILTER articleCustomsDashboard.a](Article article) AND nullCustoms(country, article) DO {   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задан ТН ВЭД ('+k()+' шт.)';
    } ELSE {
        FOR [= FILTER articleCustomsDashboard.a](Article article) DO {
            completedCustoms(Item item) <- TRUE WHERE article(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM articleCustomsDashboard
    PROPERTIES(c) TODRAW a completeArticleCustomsDashboard FORCE PANEL
;

// ----------------------------- Заполнение атрибутов для товаров при изменении для товара ----------------- //

@defineOption(setCustomsGroupArticleCompleted, 'Изменять ТВЭД для обработанных товаров по артикулу', customs);
// ТНВЭД
WHEN SESSION FORMS articleCustomsDashboard
    CHANGED(customsGroup(Country country, Article article)) DO {
        customsGroup (country, Item item) <- customsGroup(country, article) WHERE article(item) == article AND (setCustomsGroupArticleCompleted() OR NOT completedCustoms(item));
        VATCustomsException(country, Item item) <- NULL WHERE article(item) == article  AND (setCustomsGroupArticleCompleted() OR NOT completedCustoms(item));
    }

WHEN SESSION FORMS articleCustomsDashboard
    CHANGED(customsGroup (Country country, Item item)) OR CHANGED(VATCustomsException(country, item)) DO {
        VAT(item, country) <- IF VATCustomsException(country, item) THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, dateArticleCustomsDashboard());
    }

// Группы сертификации
WHEN SESSION FORMS articleCustomsDashboard
    CHANGED(complianceGroup(Country country, Article article)) DO {
        complianceGroup (country, Item item) <- complianceGroup(country, article) WHERE article(item) == article AND NOT completedCustoms(item);
    }

// ------------------------- Автоматическое заполнение свойств --------------------------- //

// ----- ТНВЭД
count (customsGroup, country, caption, composition) = GROUP SUM 1
    BY customsGroup(Country country,Item item), country, caption(item),  composition(item);

defaultCustomsGroup (country, caption, composition) =
    GROUP LAST CustomsGroup customsGroup
        BY Country country, VARISTRING[255] caption, VARSTRING[255] composition
        ORDER count(customsGroup, country, caption, composition), customsGroup
        WHERE count(customsGroup, country, caption, composition);

count (customsGroup, country, caption, composition, gender, originalCustomsGroup) = GROUP SUM 1
    BY customsGroup(Country country,Item item), country, caption(item),  composition(item), gender(item), originalCustomsGroup(item);

defaultCustomsGroup (country, caption, composition, gender, originalCustomsGroup) =
    GROUP LAST CustomsGroup customsGroup
        BY Country country, VARISTRING[255] caption, VARSTRING[255] composition, Gender gender, STRING[10] originalCustomsGroup
        ORDER count(customsGroup, country, caption, composition, gender, originalCustomsGroup), customsGroup
        WHERE count(customsGroup, country, caption, composition, gender, originalCustomsGroup);

// Артикулы
fillDefaultCustomsGroup 'Заполнить ТН ВЭД по названию/составу'(Country country, Article article) = ACTION {
    customsGroup(country,article) <- defaultCustomsGroup(
                                                            country,
                                                            caption(article),
                                                            composition(article))
        WHERE defaultCustomsGroup(country, caption(article), composition(article));

} SHORTCUT codeCustomsGroup[Country,Article];

fillDefaultCustomsGroup 'Заполнить ТН ВЭД по названию/составу для всех'(Country country) = ACTION {
   FOR [= FILTER articleCustomsDashboard.a](Article article) DO {
       fillDefaultCustomsGroup(country,article);
   }
} SHORTCUT codeCustomsGroup[Country,Article];

fillOriginalCustomsGroup 'Заполнить ТН ВЭД по оригиналу ТНВЭД'(Country country, Article article) = ACTION {
    customsGroup(country,article) <- customsGroup(rpad(originalCustomsGroup(article), 10, '0'))
        WHERE customsGroup(rpad(originalCustomsGroup(article), 10, '0'));

} SHORTCUT codeCustomsGroup[Country,Article];

fillOriginalCustomsGroup 'Заполнить ТН ВЭД по оригиналу ТНВЭД для всех'(Country country) = ACTION {
   FOR [= FILTER articleCustomsDashboard.a](Article article) DO {
       fillOriginalCustomsGroup(country,article);
   }
} SHORTCUT codeCustomsGroup[Country,Article];


fillDefaultCustomsGroupGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД'(Country country, Article article) = ACTION {
    customsGroup(country,article) <- defaultCustomsGroup(
                                                            country,
                                                            caption(article),
                                                            composition(article),
                                                            gender(article),
                                                            originalCustomsGroup(article))                                                            
        WHERE defaultCustomsGroup(country, caption(article), composition(article), gender(article), originalCustomsGroup(article));

} SHORTCUT codeCustomsGroup[Country,Article];

fillDefaultCustomsGroupArticleGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country) = ACTION {
    FOR [= FILTER articleCustomsDashboard.a](Article article) DO {
        fillDefaultCustomsGroupGender(country,article);
    }
} SHORTCUT codeCustomsGroup[Country,Article];

fillDefaultCustomsGroupArticleGender 'Заполнить текущий ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country, Article article) = ACTION {
    FOR [= FILTER articleCustomsDashboard.a](Article a1) AND country(article)==country(a1) AND caption(article)==caption(a1)
        AND composition(article)==composition(a1) AND gender(article)==gender(a1) AND originalCustomsGroup(article)==originalCustomsGroup(a1) DO {
        customsGroup(country,a1) <- customsGroup(country, article);
    }
} SHORTCUT codeCustomsGroup[Country,Article];

// Товары
fillDefaultCustomsGroup 'Заполнить ТН ВЭД по названию/составу'(Country country, Item item) = ACTION {
    customsGroup(country,item) <- defaultCustomsGroup(
                                                            country,
                                                            caption(item),
                                                            composition(item))                                                            
        WHERE defaultCustomsGroup(country, caption(item), composition(item));

} SHORTCUT codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupItem 'Заполнить ТН ВЭД по названию/составу/ТНВЭД для всех'(Country country) = ACTION {
    FOR [= FILTER articleCustomsDashboard.i](Item item) DO {
        fillDefaultCustomsGroup(country,item);
    }
} SHORTCUT codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД'(Country country, Item item) = ACTION {
    customsGroup(country,item) <- defaultCustomsGroup(
                                                            country,
                                                            caption(item),
                                                            composition(item),
                                                            gender(item),
                                                            originalCustomsGroup(item))                                                            
        WHERE defaultCustomsGroup(country, caption(item), composition(item), gender(item), originalCustomsGroup(item));

} SHORTCUT codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupItemGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country) = ACTION {
    FOR [= FILTER articleCustomsDashboard.i](Item item) DO {
        fillDefaultCustomsGroupGender(country,item);
    }
} SHORTCUT codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupItemGender 'Заполнить текущий ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country, Item item) = ACTION {
    FOR [= FILTER articleCustomsDashboard.i](Item i1) AND country(item)==country(i1) AND caption(item)==caption(i1)
        AND composition(item)==composition(i1) AND gender(item)==gender(i1) AND originalCustomsGroup(item)==originalCustomsGroup(i1) DO {
        customsGroup(country,i1) <- customsGroup(country, item);
    }
} SHORTCUT codeCustomsGroup[Country,Item];

// ----- Группы сертификации
count (complianceGroup, country, caption, composition) = GROUP SUM 1
    BY complianceGroup(Country country,Item item), country, caption(item),  composition(item);

defaultComplianceGroup (country, caption, composition) =
    GROUP LAST ComplianceGroup complianceGroup
        BY Country country, VARISTRING[255] caption, VARSTRING[255] composition
        ORDER count(complianceGroup, country, caption, composition), complianceGroup
        WHERE count(complianceGroup, country, caption, composition);

// Артикулы
fillDefaultComplianceGroup 'Заполнить группу сертификации'(Country country, Article article) = ACTION {
    complianceGroup(country,article) <- defaultComplianceGroup(
                                                            country,
                                                            caption(article),
                                                            composition(article))
        WHERE defaultComplianceGroup(country, caption(article), composition(article));

} SHORTCUT nameComplianceGroup[Country,Article];

fillDefaultComplianceGroup 'Заполнить группу сертификации для всех'(Country country) = ACTION {
   FOR [= FILTER articleCustomsDashboard.a](Article article) DO {
       fillDefaultComplianceGroup(country,article);
   }
} SHORTCUT nameComplianceGroup[Country,Article];

// Товары
fillDefaultComplianceGroup 'Заполнить группу сертификации'(Country country, Item item) = ACTION {
    complianceGroup(country,item) <- defaultComplianceGroup(
                                                            country,
                                                            caption(item),
                                                            composition(item))
        WHERE defaultComplianceGroup(country, caption(item), composition(item));
} SHORTCUT nameComplianceGroup[Country,Item];

fillDefaultComplianceGroupItem 'Заполнить группу сертификации для всех'(Country country) = ACTION {
    FOR [= FILTER articleCustomsDashboard.i](Item item) DO {
        fillDefaultComplianceGroup(country,item);
    }
} SHORTCUT nameComplianceGroup[Country,Item];

NAVIGATOR {
    customsDashboardNavigator {
        ADD articleCustomsDashboard;
    }
}