MODULE ArticleTranslateDashboard;

REQUIRE ImageArticle, Dashboard, CustomsGroupArticle, PurchaseInvoice;

NAMESPACE Item;

// Обработка статуса

completedTranslateItem 'Обработан' = DATA BOOLEAN (Item);
notCompletedTranslateArticle 'Не обработан' (article) = GROUP SUM 1 IF i IS Item AND NOT completedTranslateItem(i) BY articleItem(i);
completedTranslateArticle 'Обработан' = a IS Article AND NOT notCompletedTranslateArticle(a);
prevCompletedTranslateArticle (article) = PREV(completedTranslateArticle(article));

changeCompletedTranslateArticle (article) = ACTION (article) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        FOR articleItem(item) == article DO {
            completedTranslateItem(item) <- TRUE;
        }
    } ELSE {
        FOR articleItem(item) == article DO {
            completedTranslateItem(item) <- NULL;
        }                
    }        
}

// Не заполнены атрибуты
nullTranslateItem 'Без атрибутов' (item) = item IS Item AND NOT (captionItem(item) AND compositionItem(item)) AND NOT completedTranslateItem(item);
nullTranslateArticle 'Без атрибутов' (article) = GROUP SUM 1 IF item IS Item AND NOT (captionItem(item) AND compositionItem(item)) AND NOT completedTranslateItem(item) BY articleItem(item);

hintEditableBackground = RGB(224, 224, 255) IF TRUE;

TABLE invoiceUser (Purchase.Invoice, User);
inPurchaseInvoiceUser 'Вкл.' = DATA BOOLEAN  (Purchase.Invoice, User);
inPurchaseInvoicesUser (user) = GROUP SUM 1 IF inPurchaseInvoiceUser(invoice, user) BY user;

seriesNumberDateInvoice 'Номер/дата накладной' (o) = 
    CONCAT '', Purchase.seriesNumberInvoice(o), 
               ' от ' +Purchase.dateInvoice(o) 
    ;  

seriesNumberDateInvoicesUser 'Накладные' =  GROUP CONCAT seriesNumberDateInvoice(invoice) IF inPurchaseInvoiceUser(invoice, user), ', ' 
    BY user 
    ORDER Purchase.dateInvoice(invoice) 
    MINCHARWIDTH 30 PREFCHARWIDTH 50;
seriesNumberDateInvoicesCurrentUser 'Накладные' = seriesNumberDateInvoicesUser(currentUser()) MINCHARWIDTH 30 PREFCHARWIDTH 50;

countInvoicesUser 'Кол-во накладных' (user)= GROUP SUM 1 IF inPurchaseInvoiceUser(invoice, user) BY user;

FORM purchaseInvoices 'Выбрать накладные'
    OBJECTS u=User FIXED PANEL                           
//    PROPERTIES(u) READONLY seriesNumberDeclaration, nameLegalEntityDeclaration, nameCurrencyDeclaration, dateTimeDeclaration

    OBJECTS i=Purchase.Invoice
    PROPERTIES (i, u) inPurchaseInvoiceUser
    PROPERTIES (i) READONLY Purchase.numberInvoice, Purchase.seriesInvoice, Purchase.dateInvoice, Purchase.timeInvoice, 
                   Purchase.nameSupplierInvoice, Purchase.nameCustomerInvoice, Purchase.countInvoiceDetailInvoice,
                   Purchase.quantityInvoiceDetailInvoice, Purchase.sumInvoiceDetailInvoice
    FILTERS Purchase.isOpenedInvoice(i)
    ORDER BY dateInvoice(i) DESC
//    FILTERS inDeclarationUserInvoice(d, i) OR d IS Declaration AND NOT declarationUserInvoice(i)

    OBJECTS id=Purchase.InvoiceDetail
    PROPERTIES(id) READONLY Purchase.indexInvoiceDetail, Purchase.idBarcodeSkuInvoiceDetail, Purchase.nameSkuInvoiceDetail, Purchase.shortNameUOMSkuInvoiceDetail, 
                            Purchase.quantityInvoiceDetail, Purchase.priceInvoiceDetail
    FILTERS invoiceInvoiceDetail(id) == i

    FILTERGROUP filtersInvoiceInclude
        FILTER 'Только включенные' inPurchaseInvoiceUser(i, u) 'F10'

;

DESIGN purchaseInvoices {
    main {
        preferredSize = (1024, 768);
        REMOVE u.box;
        NEW tabContainer{
            type = TABBED;
            fill = 1;
            NEW invoiceContainer {
                fill = 1;
                type = SPLITV;
                caption = 'Накладные';                
                NEW headerInvoiceContainer {
                    fill = 1;
                    type = SPLITV;                
                    ADD i.box;
                }
                NEW paneInvoiceContainer {
                    type = TABBED;
                    fill = 0.5;
                    ADD id.box;
                }
            }            
        }
        ADD functions.box;
    }
}

selectPurchaseInvoicesUser 'Выбрать накладные' = ACTION (user) {
    FORM purchaseInvoices OBJECTS u=user MODAL;
} TOOLBAR;
selectPurchaseInvoicesCurrentUser 'Выбрать накладные' = ACTION selectPurchaseInvoicesUser(currentUser());

quantityInvoiceDetailSkuUser 'Кол-во товара в документе' (sku, user) = 
    GROUP SUM Purchase.quantityInvoiceDetailSkuInvoice(sku, invoice) IF inPurchaseInvoiceUser(invoice, user)
        BY sku, user;

quantityInvoiceDetailArticleInvoice 'Кол-во товара в документе' (article, invoice) = 
    GROUP SUM Purchase.quantityInvoiceDetail(idetail)
          BY  articleItem(Purchase.skuInvoiceDetail(idetail)),
              Purchase.invoiceInvoiceDetail(idetail);
quantityInvoiceDetailArticleUser 'Кол-во товара в документе' (article, user) = 
    GROUP SUM quantityInvoiceDetailArticleInvoice(article, invoice) IF inPurchaseInvoiceUser(invoice, user)
        BY article, user;
        
defaultPurchaseInvoiceSku (sku) =
    GROUP LAST Purchase.invoiceInvoiceDetail(detail)
          BY Purchase.skuInvoiceDetail(detail)
          ORDER Purchase.dateInvoiceDetail(detail), detail
          WHERE Purchase.isPostedInvoiceDetail(detail) AND Purchase.quantityInvoiceDetail(detail) 
                AND inPurchaseInvoiceUser(Purchase.invoiceInvoiceDetail(detail), currentUser())
                AND NOT Purchase.isCompanySupplierInvoiceDetail(detail) COMPLEX;

descriptionDefaultPurchaseInvoiceSku 'Последний инвойс' (sku)= CONCAT ' ', Purchase.seriesNumberInvoice(defaultPurchaseInvoiceSku(sku)),
                                                                          'от ' + Purchase.dateInvoice(defaultPurchaseInvoiceSku(sku)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 30;
// Подсчет непереведенных артикулов для групп
countNotCompletedTranslateArticlesItemGroup 'Не обработано (к-во)' (group) = 
    GROUP SUM 1 IF notCompletedTranslateArticle(article)  AND ((inPurchaseInvoicesUser(currentUser()) AND quantityInvoiceDetailArticleUser(article, currentUser())) OR NOT inPurchaseInvoicesUser(currentUser())) BY itemGroupArticle(article);
recCountNotCompletedTranslateArticlesItemGroup 'Не обработано (к-во)' (parent) = GROUP SUM countNotCompletedTranslateArticlesItemGroup(child) IF isParentItemGroupItemGroup(child, parent) BY parent;
        
dictionaryComposition = DATA Dictionary ();   
nameDictionaryComposition 'Словарь для состава' = nameDictionary(dictionaryComposition());

dictionaryCaption = DATA Dictionary ();   
nameDictionaryCaption 'Словарь для наименования' = nameDictionary(dictionaryCaption());   
                 
FORM articleTranslateDashboard 'Перевод'

    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser(), nameDictionaryCaption(),
               nameDictionaryComposition()

    TREE groupTree g=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY orderItemGroup(g), nameItemGroup(g), recCountNotCompletedTranslateArticlesItemGroup(g)
    ORDER BY orderItemGroup(g), nameItemGroup(g)
    FILTERGROUP inactive FILTER 'Активные' activeItemGroup(g) 'F5' DEFAULT
    FILTERGROUP notTranslateFilters
        FILTER 'Не обработан' recCountNotCompletedTranslateArticlesItemGroup(g) 'F6'

    OBJECTS a=Article
    PROPERTIES(a) READONLY nameBrandArticle, idArticle, canonicalNameItemGroupArticle FORCE PANEL
    PROPERTIES(a) originalCaptionArticle, originalCompositionArticle, originalCustomsGroupArticle 
    PROPERTIES(a) BACKGROUND hintEditableBackground() nameUOMArticle, captionArticle, overNameGenderArticle, compositionArticle,
                                                      netWeightArticle, grossWeightArticle, nameCountryArticle
    PROPERTIES(a) completedTranslateArticle ON CHANGE changeCompletedTranslateArticle(a)
    PROPERTIES(a) EDITFORM
    PROPERTIES(a) FORCE PANEL searchImageArticle, urlImageArticle
    PROPERTIES uploadAllImagesArticle() TODRAW a FORCE PANEL        

    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullTranslateArticle(a) 'F7' 
        FILTER 'С атрибутами' NOT nullTranslateArticle(a) 'F6' 

    FILTERS isParentGroupArticle(g, a) 
//    FILTERGROUP groupFilters
//        FILTER 'По группам' 'F11' isParentGroupArticle(g, a) DEFAULT
//        FILTER 'Без групп' 'ctrl F11' captionArticle(a) IF NOT itemGroupArticle(a)

    FILTERGROUP translateFilters
        FILTER 'Не обработан' notCompletedTranslateArticle(a) 'F9' DEFAULT
        FILTER 'Обработан' completedTranslateArticle(a) 'F8'

    FILTERS quantityInvoiceDetailArticleUser(a, currentUser()) OR (a IS Article AND NOT countInvoicesUser(currentUser()))

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoiceSku, idBarcodeSku, idItem, originalCaptionGrid = originalCaptionItem, originalCustomsGroupItem
    PROPERTIES(i) BACKGROUND hintEditableBackground() nameUOMItem, captionItem, canonicalNameItemGroupItem, 
                             compositionItem, netWeightItem, grossWeightItem, nameCountryItem,
                             imageItem FORCE PANEL
    PROPERTIES(i) completedTranslateItem
    ORDER BY idItem(i)
    PROPERTIES(i) EDITFORM SHOWIF enableEditingItem(i)
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' nullTranslateItem(i) 'F7'
        FILTER 'С атрибутами' NOT nullTranslateItem(i) 'F6'
             
    FILTERGROUP itemFilters
        FILTER 'По артикулам' articleItem(i) == a 'F4' DEFAULT
        FILTER 'По группам (не обработан)' isParentItemGroupItem(g,i) AND NOT completedTranslateItem(i) 'shift F4'
        FILTER 'По группам' isParentItemGroupItem(g,i) 'ctrl F4'
        FILTER 'По артикулам/инвойсам' articleItem(i) == a AND (quantityInvoiceDetailSkuUser(i, currentUser()) OR (i IS Item AND NOT countInvoicesUser(currentUser()))) 'shift F5'
;
                                                                                                         
DESIGN articleTranslateDashboard {
    NEW top{
        type = CONTAINERH;
        NEW filter {
            caption = 'Фильтр';
            type = CONTAINERH;
            ADD PROPERTY(seriesNumberDateInvoicesCurrentUser());
            ADD PROPERTY(selectPurchaseInvoicesCurrentUser());
        }
        NEW dictionary {
            caption = 'Словари';
            type = CONTAINERH;
            ADD PROPERTY(nameDictionaryCaption());
            ADD PROPERTY(nameDictionaryComposition());        
        }
    }
    NEW pane {
        type = SPLITH;
        fill = 1;
        NEW tree {
            type = SPLITV;
            fill = 1;
            ADD groupTree.tree.box {fill = 2;}
            NEW imageBox {
                fill = 3;
                caption = 'Изображение';                     
                ADD PROPERTY(imageItem(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW row11 {
            fill = 3;
            type = SPLITV;
            ADD a.box {
                defaultComponent = TRUE;
                fill = 2;
                NEW imageContainer{
                    type = CONTAINERH;
                    ADD PROPERTY(searchImageArticle(a));
                    ADD PROPERTY(urlImageArticle(a));
                    ADD PROPERTY(uploadAllImagesArticle());
                }
            }
            ADD i.box;
        }
    }

    PROPERTY(idArticle(a)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(idItem(i)) { minimumCharWidth = 6; preferredCharWidth = 10;}
    PROPERTY(compositionItem(i)) { minimumCharWidth = 30; preferredCharWidth = 40;}
    PROPERTY(originalCustomsGroupItem(i)) { minimumCharWidth = 11; preferredCharWidth = 15;}
    PROPERTY(captionItem(i)) { minimumCharWidth = 20; preferredCharWidth = 40;}
    PROPERTY(compositionItem(i)) { minimumCharWidth = 30; preferredCharWidth = 40;}

    ADD functions.box;
}
           
completeArticleTranslateDashboard 'Подтвердить все' = ACTION () {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [= FILTER articleTranslateDashboard.a](article) AND nullTranslateArticle(article) DO{   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задано название или состав ('+k()+' шт.)';
    } ELSE {
        FOR [= FILTER articleTranslateDashboard.a](article) DO {
            completedTranslateItem(item) <- TRUE WHERE articleItem(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM  articleTranslateDashboard
    PROPERTIES() FORCE PANEL TODRAW a completeArticleTranslateDashboard
;

// ------------------------- Автоматическое заполнение свойств --------------------------- //
countArticleCaptionOriginal (string, original) = GROUP SUM 1 BY captionArticle(article), originalCaptionArticle(article);
defaultCaptionArticleOriginalCaption (composition) = GROUP LAST caption 
                                                           BY original
                                                           ORDER countArticleCaptionOriginal(caption, original), caption
                                                           WHERE countArticleCaptionOriginal(caption, original);

fillDefaultCaptionArticle 'Перевести название' = ACTION (article) {
    captionArticle(article) <- defaultCaptionArticleOriginalCaption(originalCaptionArticle(article))
        WHERE defaultCaptionArticleOriginalCaption(originalCaptionArticle(article));
} SHORTCUT captionArticle;

fillDefaultCaptionArticles 'Перевести для всех название' = ACTION () {
    FOR [= FILTER articleTranslateDashboard.a](article) DO {
        fillDefaultCaptionArticle(article);
    }
} SHORTCUT captionArticle;

  
translateCaptionArticle 'Перевести название по словарю' = ACTION (article) {
    translateDictionary(dictionaryCaption(), originalCaptionArticle(article));
    captionArticle(article) <- VARISTRING[100](translationResult());
} SHORTCUT captionArticle;  

translateCaptionArticles 'Перевести для всех название по словарю' = ACTION () {
    FOR [= FILTER articleTranslateDashboard.a](article) DO {
        translateCaptionArticle(article);
    }
} SHORTCUT captionArticle;
//--
translateCompositionArticle 'Перевести состав по словарю' = ACTION (article) {
    translateDictionary(dictionaryComposition(), originalCompositionArticle(article));
    compositionArticle(article) <- VARSTRING[255](translationResult());
} SHORTCUT compositionArticle;  

translateCompositionArticles 'Перевести для всех состав по словарю' = ACTION () {
    FOR [= FILTER articleTranslateDashboard.a](article) DO {
        translateCompositionArticle(article);
    }
} SHORTCUT compositionArticle;

//--
countArticleCompositionOriginal (string, original) = GROUP SUM 1 BY compositionArticle(article), originalCompositionArticle(article);
defaultCompositionArticleOriginalComposition (composition) = GROUP LAST composition 
                                                                   BY original
                                                                   ORDER countArticleCompositionOriginal(composition, original), composition
                                                                   WHERE countArticleCompositionOriginal(composition, original);

fillDefaultCompositionArticle 'Перевести состав' = ACTION (article) {
    compositionArticle(article) <- defaultCompositionArticleOriginalComposition(originalCompositionArticle(article))
        WHERE defaultCompositionArticleOriginalComposition(originalCompositionArticle(article));
} SHORTCUT compositionArticle;

fillDefaultCompositionArticles 'Перевести для всех состав' = ACTION () {
   FOR [= FILTER articleTranslateDashboard.a](article) DO {
        fillDefaultCompositionArticle(article);
   }
} SHORTCUT compositionArticle;

NAVIGATOR {
    customsDashboardNavigator {
        ADD articleTranslateDashboard;
    }
}