MODULE CustomsGroup;

REQUIRE Certificate, Hierarchy, Utils, Historizable, Tax, Stock;

CLASS CustomsZone 'Таможенная зона';
TABLE customsZone(CustomsZone);

name 'Наименование' = DATA VARISTRING[50](CustomsZone) IN recognize;

customsZone (name) = GROUP AGGR CustomsZone customsZone BY name(customsZone) WHERE customsZone IS CustomsZone;

currency = DATA Currency(CustomsZone);
nameCurrency 'Валюта' (CustomsZone customsZone) = name(currency(customsZone)) IN base;

defaultTypeExchange (customsZone) = DATA TypeExchange (CustomsZone);
nameDefaultTypeExchange  'Тип обмена (по умолч.)' (CustomsZone customsZone) = name(defaultTypeExchange(customsZone));

CLASS CustomsGroup 'Позиция ТН ВЭД';
TABLE customsGroup (CustomsGroup);

name 'Наименование' = DATA VARISTRING[1000](CustomsGroup) MINCHARWIDTH 30 PREFCHARWIDTH 60;

hasCode 'Есть код' = DATA BOOLEAN (CustomsGroup) IN base;
dateFrom 'Дата с' = DATA DATE (CustomsGroup) IN base;
dateTo 'Дата по' = DATA DATE (CustomsGroup) IN base;
code 'Код' = DATA STRING[10](CustomsGroup) IN base MINCHARWIDTH 10;

customsGroup (code) = GROUP AGGR CustomsGroup customsGroup BY code(customsGroup) WHERE customsGroup IS CustomsGroup;
nearestCustomsGroup (code) = GROUP MIN CustomsGroup customsGroup IF startsWith(code(customsGroup), STRING[10] code AS STRING[10]) == 1 BY code;

number 'Номер строки' = DATA INTEGER(CustomsGroup) IN base;

TABLE customsGroupCustomsGroup (CustomsGroup, CustomsGroup);
@defineHierarchy(customsGroup);

customsZone = DATA CustomsZone(CustomsGroup) AUTOSET;
nameCustomsZone 'Таможенная зона' (CustomsGroup customsGroup) = name(customsZone(customsGroup)) IN base;

customsZone = DATA CustomsZone(Country);
nameCustomsZone 'Таможенная зона' (Country country) = name(customsZone(country)) IN base;

isCompliancedData 'Необходимость сертификации' = DATA BOOLEAN (CustomsGroup) IN base;

levelParent (customsGroup) = GROUP MIN level(CustomsGroup customsGroup, CustomsGroup parent) IF isCompliancedData(parent)
                                                BY customsGroup PERSISTENT;

isCompliancedParent (CustomsGroup customsGroup) = TRUE IF levelParent(customsGroup);

isComplianced 'Необходимость сертификации' (CustomsGroup customsGroup) = OVERRIDE isCompliancedParent(customsGroup), isCompliancedData(customsGroup);

TABLE customsGroupData(CustomsGroup, DATE);

META defineCustomsRate(class, object, caption)
    CLASS class caption;
    TABLE object(class);

    dateFrom 'Дата с' = DATA DATE(class) IN base;
    dateTo 'Дата по' = DATA DATE(class) IN base;
    customsGroup = DATA CustomsGroup(class) AUTOSET;
    codeCustomsGroup 'ТН ВЭД (код)' (class customsRate) = code(customsGroup(customsRate)) IN base MAXCHARWIDTH 10;
    nameCustomsGroup 'ТН ВЭД' (class customsRate) = name(customsGroup(customsRate)) IN base MAXCHARWIDTH 50;

    order = STRUCT(dateFrom(class object), object) PERSISTENT;

    concat##class (customsGroup, date) = GROUP MAX order(class object) IF
                                                                       (dateFrom(object) < DATE date AND
                                                                       dateTo(object) > date)
                                                                    BY customsGroup(object), date;

    object (CustomsGroup customsGroup, DATE date) = concat##class(customsGroup, date)[2];
END

@defineCustomsRate(VATCustomsRate, VATCustomsRate, 'Ставка НДС');
@defineCustomsRate(DutyCustomsRate, dutyCustomsRate, 'Ставка пошлины');
@defineCustomsRate(RegistrationCustomsRate, registrationCustomsRate, 'Ставка таможенного сбора');

@defineCustomsRate(VATCustomsException, VATCustomsException, 'Льгота НДС');

EXTEND CLASS VATCustomsException {
    none 'Отсутствует'
}

@defineExternalizable(VATCustomsRate, VARSTRING[100]);
@defineExternalizable(dutyCustomsRate, VARSTRING[100]);
@defineExternalizable(registrationCustomsRate, VARSTRING[100]);
@defineExternalizable(VATCustomsException, VARSTRING[100]);

// НДС
range = DATA Range(VATCustomsRate);
numberRange 'НДС, номер' (VATCustomsRate VATCustomsRate) = number(range(VATCustomsRate)) IN base;
valueCurrent 'НДС, %' (VATCustomsRate VATCustomsRate) = valueRate(range(VATCustomsRate), currentDate()) IN base;

VAT 'НДС' (CustomsGroup customsGroup, DATE date) = range(VATCustomsRate(customsGroup, date));

dataValueSupplierVAT 'НДС, %' (CustomsGroup customsGroup, DATE date) = valueRate(VAT(customsGroup, date), date);
valueCurrentRateSupplierVAT 'НДС, %' (CustomsGroup customsGroup) = valueRate(VAT(customsGroup, currentDate()), currentDate());

// пошлина
percentDuty 'Пошлина, %' = DATA NUMERIC[14,3](DutyCustomsRate) IN base;
weightDuty 'Пошлина, (мин.)' = DATA NUMERIC[14,3](DutyCustomsRate) IN base;

percentDuty 'Пошлина, %' (CustomsGroup customsGroup, DATE date) = percentDuty(dutyCustomsRate(customsGroup, date));
weightDuty 'Пошлина, (мин.)' (CustomsGroup customsGroup, DATE date) = weightDuty(dutyCustomsRate(customsGroup, date));

percentDuty 'Пошлина, %' (CustomsGroup customsGroup) = percentDuty(customsGroup, currentDate());
weightDuty 'Пошлина, (мин.)' (CustomsGroup customsGroup) = weightDuty(customsGroup, currentDate());

//сбор
sum 'Таможенный сбор' = DATA NUMERIC[14,3](RegistrationCustomsRate) IN base;

registration 'Таможенный сбор' (CustomsGroup customsGroup, DATE date) = sum(registrationCustomsRate(customsGroup, date));
registration 'Таможенный сбор' (CustomsGroup customsGroup) = registration(customsGroup, currentDate());

// Льгота НДС
name 'Наименование' = DATA VARISTRING[150](VATCustomsException) IN base;
number 'Номер' (VATCustomsException VATCustomsException) = PARTITION SUM 1 BY customsGroup(VATCustomsException) ORDER VATCustomsException;
VATCustomsException (customsGroup, number) = GROUP AGGR VATCustomsException VATCustomsException BY code(customsGroup(VATCustomsException)), number(VATCustomsException);

range = DATA Range(VATCustomsException);
numberRange 'Льгота НДС, номер' (VATCustomsException VATCustomsException) = number(range(VATCustomsException)) IN base;
dataValue 'Льгота НДС, %' (VATCustomsException VATCustomsException, DATE date) = valueRate(range(VATCustomsException), date);

valueCurrent 'Льгота НДС, %' (VATCustomsException VATCustomsException) = valueRate(range(VATCustomsException), currentDate()) IN base;

rangeVATCustomsException 'Льгота НДС' (CustomsGroup customsGroup, DATE date) = range(VATCustomsException(customsGroup, date));
dataValueVATCustomsException 'Льгота НДС, %' (CustomsGroup customsGroup, DATE date) = valueRate(rangeVATCustomsException(customsGroup, date), date);

countVATCustomsException 'Кол-во льгот' (customsGroup) = GROUP SUM 1 IF VATCustomsException VATCustomsException IS VATCustomsException BY customsGroup(VATCustomsException) PERSISTENT;

nameVATCustomsException 'Наименование' (customsGroup) = GROUP CONCAT VARSTRING[255](name(VATCustomsException VATCustomsException))  , ', ' BY customsGroup(VATCustomsException);

//
customsGroup = ABSTRACT CustomsGroup(Country, Sku);
codeCustomsGroup 'ТН ВЭД' (Country country, Sku sku) = code(customsGroup(country, sku));

VATCustomsException = ABSTRACT VATCustomsException(Country, Sku);
nameVATCustomsException 'ТН ВЭД' (Country country, Sku sku) = name(VATCustomsException(country, sku));

EXTEND FORM country
    PROPERTIES(c) nameCustomsZone
;

EXTEND FORM countries
    PROPERTIES(c) READONLY nameCustomsZone
;

FORM customsZone 'Таможенная зона'
    OBJECTS cz = CustomsZone FIXED PANEL
    PROPERTIES(cz) name, nameCurrency, nameDefaultTypeExchange
    EDIT CustomsZone OBJECT cz
;

FORM customsZones 'Таможенная зона'
    OBJECTS cz = CustomsZone
    PROPERTIES(cz) READONLY name, nameCurrency, nameDefaultTypeExchange
    PROPERTIES(cz) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
;

FORM VATCustomsException 'Льгота НДС'
    OBJECTS v = VATCustomsException FIXED PANEL
    PROPERTIES (v)  id, name, dateFrom, dateTo, 
                    codeCustomsGroup, nameCustomsGroup, numberRange,
                    valueCurrent READONLY
                 
    EDIT VATCustomsException OBJECT v      
;

FORM VATCustomsExceptions 'Льготы НДС'
    OBJECTS cg = CustomsGroup FIXED PANEL

    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) READONLY name, dateFrom, dateTo, numberRange, valueCurrent
    PROPERTIES(vce) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS customsGroup(vce) == cg

;

FORM dialogVATCustomsExceptions 'Льготы НДС'
    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) READONLY name, dateFrom, dateTo, numberRange, valueCurrent

    DIALOG VATCustomsException OBJECT vce
;

FORM customsGroup 'Позиция ТН ВЭД'
    OBJECTS cg = CustomsGroup FIXED PANEL
    PROPERTIES(cg) code, name, nameParent, canonicalName,
                   nameCustomsZone, dateFrom, dateTo, isComplianced, number

    OBJECTS vcr = VATCustomsRate
    PROPERTIES(vcr) id SHOWIF showIDs(), dateFrom, dateTo, numberRange, 
                    valueCurrent READONLY
    PROPERTIES(vcr) ADDOBJ, DELETESESSION FORCE PANEL TOOLBAR
    FILTERS customsGroup(vcr) == cg

    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) id SHOWIF showIDs(), name, dateFrom, dateTo, 
                    numberRange, valueCurrent READONLY
    PROPERTIES(vce) ADDOBJ, deletea=DELETESESSION FORCE PANEL TOOLBAR 
    FILTERS customsGroup(vce) == cg

    OBJECTS dcr = DutyCustomsRate
    PROPERTIES(dcr) id SHOWIF showIDs(), dateFrom, dateTo, percentDuty, weightDuty
    PROPERTIES(dcr) ADDOBJ, DELETESESSION FORCE PANEL TOOLBAR
    FILTERS customsGroup(dcr) == cg

    OBJECTS rcr = RegistrationCustomsRate
    PROPERTIES(rcr) id SHOWIF showIDs(), dateFrom, dateTo, sum
    PROPERTIES(rcr) ADDOBJ, DELETESESSION FORCE PANEL TOOLBAR
    FILTERS customsGroup(rcr) == cg

    EDIT CustomsGroup OBJECT cg
;

DESIGN customsGroup {
    main {
        NEW topContainer {
            NEW genContainer {
                type = CONTAINERH;
                caption = 'Основные';
                MOVE PROPERTY(code(cg));
                MOVE PROPERTY(name(cg));
                MOVE PROPERTY(nameParent(cg));
                MOVE PROPERTY(canonicalName(cg));
            }

            NEW dateContainer {
                type = CONTAINERH;
                caption = 'Дополнительные';
                MOVE PROPERTY(nameCustomsZone(cg));
                MOVE PROPERTY(dateFrom(cg));
                MOVE PROPERTY(dateTo(cg));
                MOVE PROPERTY(isComplianced(cg));
                MOVE PROPERTY(number(cg));
            }
        }
        NEW midContainer {
            fill = 1;
            type = CONTAINERH;
            MOVE vcr.box;
            MOVE vce.box;
        }

        MOVE dcr.box;
        MOVE rcr.box;

        MOVE functions.box;
    }
}

add 'Добавить'(CustomsGroup customsGroup) = ACTION NEWSESSION {
    FOR ADDOBJ cg = CustomsGroup DO {
        ASSIGN parent(cg) <- customsGroup;
        FORM customsGroup OBJECTS cg=cg ;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    }
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';


caption 'Наименование' = DATA LOCAL VARISTRING[255]() MINCHARWIDTH 20 PREFCHARWIDTH 40;
article 'Артикул' = DATA LOCAL VARSTRING[100]() MINCHARWIDTH 10 PREFCHARWIDTH 15;
originalCustomsGroup 'ТНВЭД (ориг)' = DATA LOCAL STRING[100] () FIXEDCHARWIDTH 10;
composition 'Состав' = DATA LOCAL VARSTRING[255]() MINCHARWIDTH 40 PREFCHARWIDTH 60;
gender 'Пол' = DATA LOCAL VARSTRING[15]();

FORM customsGroups 'Позиции ТН ВЭД'
    OBJECTS cz = CustomsZone FIXED PANEL
    PROPERTIES(cz) SELECTOR name, nameCurrency

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) date = OBJVALUE

    PROPERTIES() caption, article, originalCustomsGroup, composition, gender

    TREE treeGroups a=STRING[3], gcg=CustomsGroup PARENT parent
    PROPERTIES READONLY OBJVALUE(a), name(gcg), code(gcg), isCompliancedData(gcg)
    PROPERTIES(gcg) add, EDITFORM
    ORDER BY code(gcg)

    OBJECTS cg = CustomsGroup
    PROPERTIES(cg) READONLY code, name, canonicalName,
                   dateFrom, dateTo, isComplianced, number
                   //, registrationCustomsGroup, valueCurrentRateSupplierVATCustomsGroup, percentDutyCustomsGroup, weightDutyCustomsGroup
    PROPERTIES(cg, dt) READONLY registration, percentDuty, weightDuty, dataValueSupplierVAT, dataValueVATCustomsException
    PROPERTIES(cg) ADDFORM, EDITFORM, deleteg = DELETE FORCE PANEL TOOLBAR
    ORDER BY number(cg)

    FILTERS stringEqualsAll(a), 
            customsZone(cg) == cz

    FILTERGROUP hasCode
        FILTER 'Только с кодом' hasCode(gcg) 'F7' DEFAULT

    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(cg, gcg) OR (cg IS CustomsGroup AND isLeaf(cg) AND NOT gcg) 'F10'
        FILTER 'Всех потомков' isParent(cg, gcg) OR (cg IS CustomsGroup AND NOT gcg) 'F9' DEFAULT
        FILTER 'Только непосредственных потомков' parent(cg) == gcg OR (cg IS CustomsGroup AND NOT parent(cg) AND NOT gcg) 'F8'

    DIALOG CustomsGroup OBJECT cg
;

DESIGN customsGroups {
    main {
        NEW topContainer{
            type = CONTAINERH;
            MOVE dt.box {
                PROPERTY(date) { focusable = FALSE; }            
            }
            MOVE cz.box {
                PROPERTY(name(cz)) { focusable = FALSE; }
                PROPERTY(nameCurrency(cz)) { focusable = FALSE; }
            }
        }
        NEW item {
            caption = 'Товар';
            type = CONTAINERH;
            MOVE PROPERTY(caption());
            MOVE PROPERTY(article());
            MOVE PROPERTY(originalCustomsGroup());
            MOVE PROPERTY(composition());
            MOVE PROPERTY(gender());
        }
        NEW split {
            type = CONTAINERH;
            type = SPLITH;
            fill = 1;
            MOVE treeGroups.tree.box;
            MOVE cg.box {
                fill = 2;
                cg.grid {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE functions.box;
    }
}

NAVIGATOR {
    customsMasterData {
        ADD customsZones;
        ADD customsGroups;
    }
}

// Цвета по умолчанию
backgroundCustoms 'Цвет' () = RGB(255, 224, 224);
backgroundVATCustomsException 'Цвет' () = RGB(212, 255, 212);