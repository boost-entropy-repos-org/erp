MODULE CustomsGroup;

REQUIRE Certificate, Hierarchy, Utils, Historizable, Tax, Stock;

CLASS CustomsZone 'Таможенная зона';
TABLE customsZone(CustomsZone);

nameCustomsZone 'Наименование' = DATA VARISTRING[50](CustomsZone) IN recognize;

customsZoneName (name) = GROUP AGGR customsZone BY nameCustomsZone(customsZone) WHERE customsZone IS CustomsZone;

currencyCustomsZone = DATA Currency(CustomsZone);
nameCurrencyCustomsZone 'Валюта' (customsZone) = nameCurrency(currencyCustomsZone(customsZone)) IN base;

defaultTypeExchangeCustomsZone (customsZone) = DATA TypeExchange (CustomsZone);
nameDefaultTypeExchangeCustomsZone  'Тип обмена (по умолч.)' (customsZone) = nameTypeExchange(defaultTypeExchangeCustomsZone(customsZone));

CLASS CustomsGroup 'Позиция ТН ВЭД';
TABLE customsGroup (CustomsGroup);

nameCustomsGroup 'Наименование' = DATA VARISTRING[1000](CustomsGroup) MINCHARWIDTH 30 PREFCHARWIDTH 60;

hasCodeCustomsGroup 'Есть код' = DATA BOOLEAN (CustomsGroup) IN base;
dateFromCustomsGroup 'Дата с' = DATA DATE (CustomsGroup) IN base;
dateToCustomsGroup 'Дата по' = DATA DATE (CustomsGroup) IN base;
codeCustomsGroup 'Код' = DATA STRING[10](CustomsGroup) IN base MINCHARWIDTH 10;
customsGroupCode (code) = GROUP AGGR customsGroup BY codeCustomsGroup(customsGroup) WHERE customsGroup IS CustomsGroup;

numberCustomsGroup 'Номер строки' = DATA INTEGER(CustomsGroup) IN base;

TABLE customsGroupCustomsGroup (CustomsGroup, CustomsGroup);
@defineHierarchy(customsGroup);

customsZoneCustomsGroup = DATA CustomsZone(CustomsGroup) AUTOSET;
nameCustomsZoneCustomsGroup 'Таможенная зона' (customsGroup) = nameCustomsZone(customsZoneCustomsGroup(customsGroup)) IN base;

customsZoneCountry = DATA CustomsZone(Country);
nameCustomsZoneCountry 'Таможенная зона' (country) = nameCustomsZone(customsZoneCountry(country)) IN base;

isCompliancedDataCustomsGroup 'Необходимость сертификации' = DATA BOOLEAN (CustomsGroup) IN base;

levelParentCustomsGroup (customsGroup) = GROUP MIN levelCustomsGroupCustomsGroup(customsGroup, parent) IF isCompliancedDataCustomsGroup(parent)
                                                BY customsGroup PERSISTENT;

isCompliancedParentCustomsGroup (customsGroup) = TRUE IF levelParentCustomsGroup(customsGroup);

isCompliancedCustomsGroup 'Необходимость сертификации' (customsGroup) = OVERRIDE isCompliancedParentCustomsGroup(customsGroup), isCompliancedDataCustomsGroup(customsGroup);

TABLE customsGroupData(CustomsGroup, DATE);

META defineCustomsRate(class, object, caption)
    CLASS class caption;
    TABLE object(class);

    dateFrom###object 'Дата с' = DATA DATE(class) IN base;
    dateTo###object 'Дата по' = DATA DATE(class) IN base;
    customsGroup###object = DATA CustomsGroup(class) AUTOSET;
    codeCustomsGroup###object 'ТН ВЭД (код)' (customsRate) = codeCustomsGroup(customsGroup###object(customsRate)) IN base MAXCHARWIDTH 10;
    nameCustomsGroup###object 'ТН ВЭД' (customsRate) = nameCustomsGroup(customsGroup###object(customsRate)) IN base MAXCHARWIDTH 50;

    order###object = STRUCT(dateFrom###object(object), object) PERSISTENT;

    concat###object##CustomsGroupDate (customsGroup, date) = GROUP MAX order###object(object) IF
                                                                       (dateFrom###object(object) < date AND
                                                                       dateTo###object(object) > date)
                                                                    BY customsGroup###object(object), date;

    object##CustomsGroupDate (customsGroup, date) = concat###object##CustomsGroupDate(customsGroup, date)[2];
END

@defineCustomsRate(VATCustomsRate, VATCustomsRate, 'Ставка НДС');
@defineCustomsRate(DutyCustomsRate, dutyCustomsRate, 'Ставка пошлины');
@defineCustomsRate(RegistrationCustomsRate, registrationCustomsRate, 'Ставка таможенного сбора');

@defineCustomsRate(VATCustomsException, VATCustomsException, 'Льгота НДС');

EXTEND CLASS VATCustomsException {
    none 'Отсутствует'
}

@defineExternalizable(VATCustomsRate, VARSTRING[100]);
@defineExternalizable(dutyCustomsRate, VARSTRING[100]);
@defineExternalizable(registrationCustomsRate, VARSTRING[100]);
@defineExternalizable(VATCustomsException, VARSTRING[100]);

// НДС
rangeVATCustomsRate = DATA Range(VATCustomsRate);
numberRangeVATCustomsRate 'НДС, номер' (VATCustomsRate) = numberRange(rangeVATCustomsRate(VATCustomsRate)) IN base;
valueCurrentVATCustomsRate 'НДС, %' (VATCustomsRate) = valueRateRangeDate(rangeVATCustomsRate(VATCustomsRate), currentDate()) IN base;

VATCustomsGroupDate 'НДС' (customsGroup, date) = rangeVATCustomsRate(VATCustomsRateCustomsGroupDate(customsGroup, date));

dataValueSupplierVATCustomsGroupDate 'НДС, %' (customsGroup, date) = valueRateRangeDate(VATCustomsGroupDate(customsGroup, date), date);
valueCurrentRateSupplierVATCustomsGroup 'НДС, %' (customsGroup) = valueRateRangeDate(VATCustomsGroupDate(customsGroup, currentDate()), currentDate());

// пошлина
percentDutyDutyCustomsRate 'Пошлина, %' = DATA NUMERIC[14,3](DutyCustomsRate) IN base;
weightDutyDutyCustomsRate 'Пошлина, (мин.)' = DATA NUMERIC[14,3](DutyCustomsRate) IN base;

percentDutyCustomsGroupDate 'Пошлина, %' (customsGroup, date) = percentDutyDutyCustomsRate(dutyCustomsRateCustomsGroupDate(customsGroup, date));
weightDutyCustomsGroupDate 'Пошлина, (мин.)' (customsGroup, date) = weightDutyDutyCustomsRate(dutyCustomsRateCustomsGroupDate(customsGroup, date));

percentDutyCustomsGroup 'Пошлина, %' (customsGroup) = percentDutyCustomsGroupDate(customsGroup, currentDate());
weightDutyCustomsGroup 'Пошлина, (мин.)' (customsGroup) = weightDutyCustomsGroupDate(customsGroup, currentDate());

//сбор
sumRegistrationCustomsRate 'Таможенный сбор' = DATA NUMERIC[14,3](RegistrationCustomsRate) IN base;

registrationCustomsGroupDate 'Таможенный сбор' (customsGroup, date) = sumRegistrationCustomsRate(registrationCustomsRateCustomsGroupDate(customsGroup, date));
registrationCustomsGroup 'Таможенный сбор' (customsGroup) = registrationCustomsGroupDate(customsGroup, currentDate());

// Льгота НДС
nameVATCustomsException 'Наименование' = DATA VARISTRING[150](VATCustomsException) IN base;
numberVATCustomsException 'Номер' (VATCustomsException) = PARTITION SUM 1 BY customsGroupVATCustomsException(VATCustomsException) ORDER VATCustomsException;
VATCustomsExceptionCustomsGroupNumber (customsGroup, number) = GROUP AGGR VATCustomsException BY codeCustomsGroup(customsGroupVATCustomsException(VATCustomsException)), numberVATCustomsException(VATCustomsException);

rangeVATCustomsException = DATA Range(VATCustomsException);
numberRangeVATCustomsException 'Льгота НДС, номер' (VATCustomsException) = numberRange(rangeVATCustomsException(VATCustomsException)) IN base;
dataValueVATCustomsExceptionDate 'Льгота НДС, %' (VATCustomsException, date) = valueRateRangeDate(rangeVATCustomsException(VATCustomsException), date);

valueCurrentVATCustomsException 'Льгота НДС, %' (VATCustomsException) = valueRateRangeDate(rangeVATCustomsException(VATCustomsException), currentDate()) IN base;

rangeVATCustomsExceptionCustomsGroupDate 'Льгота НДС' (customsGroup, date) = rangeVATCustomsException(VATCustomsExceptionCustomsGroupDate(customsGroup, date));
dataValueVATCustomsExceptionGroupDate 'Льгота НДС, %' (customsGroup, date) = valueRateRangeDate(rangeVATCustomsExceptionCustomsGroupDate(customsGroup, date), date);

countVATCustomsExceptionCustomsGroup 'Кол-во льгот' (customsGroup) = GROUP SUM 1 IF VATCustomsException IS VATCustomsException BY customsGroupVATCustomsException(VATCustomsException) PERSISTENT;

nameVATCustomsExceptionCustomsGroup 'Наименование' (customsGroup) = GROUP CONCAT VARSTRING[255](nameVATCustomsException(VATCustomsException))  , ', ' BY customsGroupVATCustomsException(VATCustomsException);

//
customsGroupCountrySku = ABSTRACT CustomsGroup(Country, Sku);
codeCustomsGroupCountrySku 'ТН ВЭД' (country, sku) = codeCustomsGroup(customsGroupCountrySku(country, sku));

VATCustomsExceptionCountrySku = ABSTRACT VATCustomsException(Country, Sku);
nameVATCustomsExceptionCountrySku 'ТН ВЭД' (country, sku) = nameVATCustomsException(VATCustomsExceptionCountrySku(country, sku));

EXTEND FORM country
    PROPERTIES(c) nameCustomsZoneCountry
;

EXTEND FORM countries
    PROPERTIES(c) READONLY nameCustomsZoneCountry
;

FORM customsZone 'Таможенная зона'
    OBJECTS cz = CustomsZone FIXED PANEL
    PROPERTIES(cz) nameCustomsZone, nameCurrencyCustomsZone, nameDefaultTypeExchangeCustomsZone
    EDIT CustomsZone OBJECT cz
;

FORM customsZones 'Таможенная зона'
    OBJECTS cz = CustomsZone
    PROPERTIES(cz) READONLY nameCustomsZone, nameCurrencyCustomsZone, nameDefaultTypeExchangeCustomsZone
    PROPERTIES(cz) ADDFORM, EDITFORM, DELETE
;

FORM VATCustomsException 'Льгота НДС'
    OBJECTS v = VATCustomsException FIXED PANEL
    PROPERTIES (v)  idVATCustomsException, nameVATCustomsException, dateFromVATCustomsException, dateToVATCustomsException, 
                    codeCustomsGroupVATCustomsException, nameCustomsGroupVATCustomsException, numberRangeVATCustomsException,
                    valueCurrentVATCustomsException READONLY
                 
    EDIT VATCustomsException OBJECT v      
;

FORM VATCustomsExceptions 'Льготы НДС'
    OBJECTS cg = CustomsGroup FIXED PANEL

    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) READONLY nameVATCustomsException, dateFromVATCustomsException, dateToVATCustomsException, numberRangeVATCustomsException, valueCurrentVATCustomsException
    PROPERTIES(vce) ADDFORM, EDITFORM, DELETE
    FILTERS customsGroupVATCustomsException(vce) == cg

;

FORM dialogVATCustomsExceptions 'Льготы НДС'
    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) READONLY nameVATCustomsException, dateFromVATCustomsException, dateToVATCustomsException, numberRangeVATCustomsException, valueCurrentVATCustomsException

    DIALOG VATCustomsException OBJECT vce
;

FORM customsGroup 'Позиция ТН ВЭД'
    OBJECTS cg = CustomsGroup FIXED PANEL
    PROPERTIES(cg) codeCustomsGroup, nameCustomsGroup, nameParentCustomsGroup, canonicalNameCustomsGroup,
                   nameCustomsZoneCustomsGroup, dateFromCustomsGroup, dateToCustomsGroup, isCompliancedCustomsGroup, numberCustomsGroup

    OBJECTS vcr = VATCustomsRate
    PROPERTIES(vcr) idVATCustomsRate SHOWIF showIDs(), dateFromVATCustomsRate, dateToVATCustomsRate, numberRangeVATCustomsRate, 
                    valueCurrentVATCustomsRate READONLY
    PROPERTIES(vcr) ADDOBJ, DELETE
    FILTERS customsGroupVATCustomsRate(vcr) == cg

    OBJECTS vce = VATCustomsException
    PROPERTIES(vce) idVATCustomsException SHOWIF showIDs(), nameVATCustomsException, dateFromVATCustomsException, dateToVATCustomsException, 
                    numberRangeVATCustomsException, valueCurrentVATCustomsException READONLY
    PROPERTIES(vce) ADDOBJ, deletea=DELETE 
    FILTERS customsGroupVATCustomsException(vce) == cg

    OBJECTS dcr = DutyCustomsRate
    PROPERTIES(dcr) idDutyCustomsRate SHOWIF showIDs(), dateFromDutyCustomsRate, dateToDutyCustomsRate, percentDutyDutyCustomsRate, weightDutyDutyCustomsRate
    PROPERTIES(dcr) ADDOBJ, DELETE
    FILTERS customsGroupDutyCustomsRate(dcr) == cg

    OBJECTS rcr = RegistrationCustomsRate
    PROPERTIES(rcr) idRegistrationCustomsRate SHOWIF showIDs(), dateFromRegistrationCustomsRate, dateToRegistrationCustomsRate, sumRegistrationCustomsRate
    PROPERTIES(rcr) ADDOBJ, DELETE
    FILTERS customsGroupRegistrationCustomsRate(rcr) == cg

    EDIT CustomsGroup OBJECT cg
;

DESIGN customsGroup FROM DEFAULT{
    main {
        NEW topContainer {
            NEW genContainer {
                type = CONTAINERH;
                caption = 'Основные';
                ADD PROPERTY(codeCustomsGroup);
                ADD PROPERTY(nameCustomsGroup);
                ADD PROPERTY(nameParentCustomsGroup);
                ADD PROPERTY(canonicalNameCustomsGroup);
            }

            NEW dateContainer {
                type = CONTAINERH;
                caption = 'Дополнительные';
                ADD PROPERTY(nameCustomsZoneCustomsGroup);
                ADD PROPERTY(dateFromCustomsGroup);
                ADD PROPERTY(dateToCustomsGroup);
                ADD PROPERTY(isCompliancedCustomsGroup);
                ADD PROPERTY(numberCustomsGroup);
            }
        }
        NEW midContainer {
            fill = 1;
            type = CONTAINERH;
            ADD vcr.box;
            ADD vce.box;
        }

        ADD dcr.box;
        ADD rcr.box;

        ADD functions.box;
    }
}

addCustomsGroup 'Добавить' = ACTION (customsGroup) NEWSESSION {
    FOR ADDOBJ cg = CustomsGroup DO {
        ASSIGN parentCustomsGroup(cg) <- customsGroup;
        FORM customsGroup OBJECTS cg=cg MODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    }
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

FORM customsGroups 'Позиции ТН ВЭД'
    OBJECTS cz = CustomsZone FIXED PANEL
    PROPERTIES(cz) SELECTOR nameCustomsZone, nameCurrencyCustomsZone

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) date = OBJVALUE

    TREE treeGroups a=STRING[3], gcg=CustomsGroup PARENT parentCustomsGroup
    PROPERTIES READONLY OBJVALUE(a), nameCustomsGroup(gcg), codeCustomsGroup(gcg), isCompliancedDataCustomsGroup(gcg)
    PROPERTIES(gcg) addCustomsGroup, EDITFORM
    ORDER BY nameCustomsGroup

    OBJECTS cg = CustomsGroup
    PROPERTIES(cg) READONLYIF isReadonly() codeCustomsGroup, nameCustomsGroup, canonicalNameCustomsGroup,
                   dateFromCustomsGroup, dateToCustomsGroup, isCompliancedCustomsGroup, numberCustomsGroup
                   //, registrationCustomsGroup, valueCurrentRateSupplierVATCustomsGroup, percentDutyCustomsGroup, weightDutyCustomsGroup
    PROPERTIES(cg, dt) READONLY registrationCustomsGroupDate, percentDutyCustomsGroupDate, weightDutyCustomsGroupDate, dataValueSupplierVATCustomsGroupDate, dataValueVATCustomsExceptionGroupDate
    PROPERTIES(cg) ADDFORM, EDITFORM, DELETE
    ORDER BY numberCustomsGroup

    FILTERS stringEqualsAll(a), customsZoneCustomsGroup(cg) == cz

    FILTERGROUP hasCode
        FILTER 'Только с кодом' 'F7' hasCodeCustomsGroup(gcg) DEFAULT

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafCustomsGroupCustomsGroup(cg, gcg) OR (cg IS CustomsGroup AND isLeafCustomsGroup(cg) AND NOT gcg)
        FILTER 'Всех потомков' 'F9' isParentCustomsGroupCustomsGroup(cg, gcg) OR (cg IS CustomsGroup AND NOT gcg) DEFAULT
        FILTER 'Только непосредственных потомков' 'F8' parentCustomsGroup(cg) == gcg OR (cg IS CustomsGroup AND NOT parentCustomsGroup(cg) AND NOT gcg)

    DIALOG CustomsGroup OBJECT cg
;

DESIGN customsGroups FROM DEFAULT{
    main {
        NEW topContainer{
            type = CONTAINERH;
            ADD dt.box {
                PROPERTY(date) { focusable = FALSE; }            
            }
            ADD cz.box {
                PROPERTY(nameCustomsZone) { focusable = FALSE; }
                PROPERTY(nameCurrencyCustomsZone) { focusable = FALSE; }
            }
        }
        NEW split {
            type = CONTAINERH;
            type = SPLITH;
            fill = 1;
            ADD treeGroups.tree.box;
            ADD cg.box {
                fill = 2;
                cg.grid {
                    defaultComponent = TRUE;
                }
            }
        }
        ADD functions.box;
    }
}

@extendFormEditable(customsGroups);

NAVIGATOR {
    customsMasterData {
        ADD customsZones;
        ADD customsGroups;
    }
}

// Цвета по умолчанию
backgroundCustoms 'Цвет' () = RGB(255, 224, 224);
backgroundVATCustomsException 'Цвет' () = RGB(212, 255, 212);