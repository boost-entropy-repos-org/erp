MODULE CustomsGroupItem;

REQUIRE CustomsGroup, Item, TaxItem; ///

NAMESPACE CustomsGroup;

customsGroup = DATA CustomsGroup(Country, Item);
codeCustomsGroup 'ТН ВЭД' (Country country, Item item) = code(customsGroup(country, item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
nameCustomsGroup 'Позиция ТН ВЭД' (Country country, Item item) = name(customsGroup(country, item)) MINCHARWIDTH 30 PREFCHARWIDTH 40;
codeCustomsGroupDefaultCountry 'ТН ВЭД' (Item item) = code(customsGroup(defaultCountry(), item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
nameCustomsGroupDefaultCountry 'Позиция ТН ВЭД' (Item item) = name(customsGroup(defaultCountry(), item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
canonicalNameCustomsGroupDefaultCountry 'Позиция ТН ВЭД' (Item item) = canonicalName(customsGroup(defaultCountry(), item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

@defineStringItemAttribute(originalCustomsGroup, STRING[10], 'Код ТНВЭД (ориг.)', itemOriginal);
@defineItemAttributeBatch (originalCustomsGroup, 'Код ТНВЭД (ориг.)');

VAT(Country country, Item item, DATE date) = VAT(customsGroup(country, item), date);

dataValueVAT 'НДС, %' (Country country, Item item, DATE date) = valueRate(VAT(country, item, date), date);

customsZoneDefaultCountry = customsZone(defaultCountry());

requestInputChangeCustomsCode 'Возможность ввода ТНВЭД по коду' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() requestInputChangeCustomsCode;
DESIGN options { customs { MOVE PROPERTY(requestInputChangeCustomsCode()); } }

// Действие по изменению кода ТНВЭД через ручной ввод
changeCodeCustomsGroup(Country country, Item item) = ACTION {
    IF requestInputChangeCustomsCode() THEN {
        REQUEST STRING[10] INPUT;
        IF requestedString() THEN {
            IF customsGroup(rpad(requestedString(),10,'0')) THEN {
                customsGroup(country, item) <- customsGroup(rpad(requestedString(),10,'0')); 
            } ELSE {
                caption() <- caption(item);
                article() <- id(item);
                originalCustomsGroup() <- originalCustomsGroup(item);
                composition() <- composition(item);
                DIALOG customsGroups OBJECTS cz = customsZoneDefaultCountry(), cg = nearestCustomsGroup(requestedString()) NULL INPUT NULL DO
                    customsGroup(country, item) <- cg;
            }
        } ELSE
            customsGroup(country, item) <- NULL;
    } ELSE {
        DIALOG customsGroups OBJECTS cz = customsZone(country), cg = customsGroup(country, item) NULL INPUT NULL CONSTRAINTFILTER DO
            customsGroup(country, item) <- cg;
    }
}

changeCustomsGroupDefaultCountry(Item item) = ACTION {
    DIALOG customsGroups OBJECTS cz = customsZoneDefaultCountry(), cg = customsGroup(defaultCountry(), item) NULL INPUT NULL DO 
        customsGroup(Country country, item) <- cg WHERE country == defaultCountry();
}

customsGroup(Country country, Item sku) += customsGroup(country, sku);

CONSTRAINT customsZone(customsGroup(Country country, Item item)) != customsZone(country) CHECKED BY customsGroup[Country,Item]
    MESSAGE 'Таможенная зона должна соответствовать стране';

VATCustomsException = DATA VATCustomsException(Country, Item);
nameVATCustomsException 'Льгота НДС' (Country country, Item item) = name(VATCustomsException(country, item)) MINCHARWIDTH 30 PREFCHARWIDTH 40;
nameVATCustomsExceptionDefaultCountry 'Льгота НДС' (Item item) = name(VATCustomsException(defaultCountry(), item)) MINCHARWIDTH 30 PREFCHARWIDTH 40;
dataValueVATCustomsException 'Льгота НДС, %' (Country country, Item item, DATE date) = dataValue(VATCustomsException(country, item), date) MINCHARWIDTH 6 PREFCHARWIDTH 10;

rangeVATCustomsException(Country country, Item item) = range(VATCustomsException(country, item));

changeCustomsExceptionDefaultCountry(Item item) = ACTION {
    DIALOG VATCustomsExceptions OBJECTS vce = VATCustomsException(defaultCountry(), item) NULL INPUT NULL DO
        VATCustomsException(Country country, item) <- vce WHERE country == defaultCountry();
}

VATCustomsException(Country country, Item sku) += VATCustomsException(country, sku);

CONSTRAINT customsGroup(Country country, Item item) AND VATCustomsException(country, item) AND NOT customsGroup(VATCustomsException(country, item)) == customsGroup(country, item)
    CHECKED BY VATCustomsException[Country,Item] MESSAGE 'Льгота должна соответствовать ТН ВЭД';

background 'Цвет' (Country country, Sku sku) = RGB(212, 255, 212) IF countVATCustomsException(customsGroup(country, sku)) > 0;

changeCustomsGroup(Country country, Item item, DATE date) = ACTION {
    DIALOG customsGroups OBJECTS cg = customsGroup(country, item) NULL INPUT NULL DO {
        customsGroup(country, item) <- cg;
        IF NOT customsGroup(VATCustomsException(country, item)) == cg THEN
            VATCustomsException(country, item) <- NULL;
            
        VAT(item, country) <- IF VATCustomsException(country, item) THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, date);
    } 
}

changeVATCustomsException(Country country, Item item, DATE date) = ACTION {
    REQUEST OBJECT vce
    DIALOG VATCustomsExceptions OBJECTS cg = customsGroup(country, item), vce = VATCustomsException(country, item) NULL INPUT NULL DO {
        VATCustomsException(country, item) <- vce;
        VAT(item, country) <- IF vce IS VATCustomsException THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, date);
    }
}


EXTEND FORM item
    PROPERTIES(c, i) codeCustomsGroup BEFORE numberVAT(i, c) ON CHANGE changeCustomsGroup(c, i, dtr),
                     nameVATCustomsException BEFORE numberVAT(i, c) ON CHANGE changeVATCustomsException(c, i, dtr) BACKGROUND background(c, i)
    PROPERTIES(i) codeCustomsGroupDefaultCountry ON CHANGE changeCustomsGroupDefaultCountry(i),
                  nameVATCustomsExceptionDefaultCountry ON CHANGE changeCustomsExceptionDefaultCountry(i)
;

DESIGN item {
    regionPrm {
//        ADD PROPERTY(originalCustomsGroupItem(i));
        MOVE PROPERTY(codeCustomsGroupDefaultCountry(i));
        MOVE PROPERTY(nameVATCustomsExceptionDefaultCountry(i));
    }
}

overCopy(Item s, Item d) += ACTION {
    customsGroup(Country c,d) <- customsGroup(c,s) WHERE customsGroup(c,s);
    originalCustomsGroup(d) <- originalCustomsGroup(s); 
}



