MODULE CustomsGroupItem;

REQUIRE CustomsGroup, Item, TaxItem; ///

NAMESPACE CustomsGroup;

customsGroupCountryItem = DATA CustomsGroup(Country, Item);
codeCustomsGroupCountryItem 'ТН ВЭД' (country, item) = codeCustomsGroup(customsGroupCountryItem(country, item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
nameCustomsGroupCountryItem 'Позиция ТН ВЭД' (country, item) = nameCustomsGroup(customsGroupCountryItem(country, item)) MINCHARWIDTH 30 PREFCHARWIDTH 40;
codeCustomsGroupDefaultCountryItem 'ТН ВЭД' (item) = codeCustomsGroup(customsGroupCountryItem(defaultCountry(), item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
nameCustomsGroupDefaultCountryItem 'Позиция ТН ВЭД' (item) = nameCustomsGroup(customsGroupCountryItem(defaultCountry(), item)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

@defineStringItemAttribute(originalCustomsGroup, STRING[10], 'Код ТНВЭД (ориг.)', itemOriginal);
@defineItemAttributeBatch (originalCustomsGroup, 'Код ТНВЭД (ориг.)');

VATCountryItemDate(country, item, date) = VATCustomsGroupDate(customsGroupCountryItem(country, item), date);

dataValueVATCountryItemDate 'НДС, %' (country, item, date) = valueRateRangeDate(VATCountryItemDate(country, item, date), date);

customsZoneDefaultCountry = customsZoneCountry(defaultCountry());

requestInputChangeCustomsCode 'Возможность ввода ТНВЭД по коду' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() requestInputChangeCustomsCode;
EXTEND DESIGN options { customs { ADD PROPERTY(requestInputChangeCustomsCode()); } }

// Действие по изменению кода ТНВЭД через ручной ввод
changeCodeCustomsGroupCountryItem = ACTION (country, item) {
    IF requestInputChangeCustomsCode() THEN {
        REQUEST STRING[10] INPUT;
        IF requestedString() THEN {
            IF customsGroupCode(rpad(requestedString(),10,'0')) THEN {
                customsGroupCountryItem(country, item) <- customsGroupCode(rpad(requestedString(),10,'0')); 
            } ELSE {
                REQUEST OBJECT cg
                    FORM customsGroups OBJECTS cz = customsZoneDefaultCountry(), cg = nearestCustomsGroupCode(requestedString()) MODAL;
                IF formResult() == FormResult.ok THEN {
                    customsGroupCountryItem(country, item) <- chosenObject('cg');
                }
            }
        } ELSE
            customsGroupCountryItem(country, item) <- NULL;
    } ELSE {
        REQUEST OBJECT cg
            FORM customsGroups OBJECTS cz = customsZoneCountry(country), cg = customsGroupCountryItem(country, item) CONTEXTFILTER cg = customsGroupCountryItem(country, item) DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            customsGroupCountryItem(country, item) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            customsGroupCountryItem(country, item) <- NULL;
        }
    }
}

changeCustomsGroupDefaultCountryItem = ACTION (item) {
    REQUEST OBJECT cg
    FORM customsGroups OBJECTS cz = customsZoneDefaultCountry() DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        customsGroupCountryItem(country, item) <- requestedObject() WHERE country == defaultCountry();

    } ELSE IF formResult() == FormResult.drop THEN {
        customsGroupCountryItem(country, item) <- NULL WHERE country == defaultCountry();
    }
}

customsGroupCountrySku(country, sku) += customsGroupCountryItem(country, sku);

CONSTRAINT customsZoneCustomsGroup(customsGroupCountryItem(country, item)) != customsZoneCountry(country) CHECKED BY customsGroupCountryItem
    MESSAGE 'Таможенная зона должна соответствовать стране';

VATCustomsExceptionCountryItem = DATA VATCustomsException(Country, Item);
nameVATCustomsExceptionCountryItem 'Льгота НДС' (country, item) = nameVATCustomsException(VATCustomsExceptionCountryItem(country, item)) MINCHARWIDTH 30 PREFCHARWIDTH 40;
nameVATCustomsExceptionDefaultCountryItem 'Льгота НДС' (item) = nameVATCustomsException(VATCustomsExceptionCountryItem(defaultCountry(), item)) MINCHARWIDTH 30 PREFCHARWIDTH 40;
dataValueVATCustomsExceptionCountryItemDate 'Льгота НДС, %' (country, item, date) = dataValueVATCustomsExceptionDate(VATCustomsExceptionCountryItem(country, item), date) MINCHARWIDTH 6 PREFCHARWIDTH 10;

rangeVATCustomsExceptionCountryItem(country, item) = rangeVATCustomsException(VATCustomsExceptionCountryItem(country, item));

changeCustomsExceptionDefaultCountryItem = ACTION (item) {
    REQUEST OBJECT vce
    FORM VATCustomsExceptions DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        VATCustomsExceptionCountryItem(country, item) <- requestedObject() WHERE country == defaultCountry();

    } ELSE IF formResult() == FormResult.drop THEN {
        VATCustomsExceptionCountryItem(country, item) <- NULL WHERE country == defaultCountry();
    }
}

VATCustomsExceptionCountrySku(country, sku) += VATCustomsExceptionCountryItem(country, sku);

CONSTRAINT customsGroupCountryItem(country, item) AND VATCustomsExceptionCountryItem(country, item) AND NOT customsGroupVATCustomsException(VATCustomsExceptionCountryItem(country, item)) == customsGroupCountryItem(country, item)
    CHECKED BY VATCustomsExceptionCountryItem MESSAGE 'Льгота должна соответствовать ТН ВЭД';

backgroundCountrySku 'Цвет' (country, sku) = RGB(212, 255, 212) IF countVATCustomsExceptionCustomsGroup(customsGroupCountrySku(country, sku)) > 0;

changeCustomsGroupCountryItemDate = ACTION (country, item, date) {
    REQUEST OBJECT cg
        FORM customsGroups DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        customsGroupCountryItem(country, item) <- requestedObject();
        VATItemCountry(item, country) <- IF VATCustomsExceptionCountryItem(country, item) THEN
                                            rangeVATCustomsExceptionCountryItem(country, item)
                                         ELSE
                                            VATCountryItemDate(country, item, date);
    } ELSE IF formResult() == FormResult.drop THEN {
        customsGroupCountryItem(country, item) <- NULL;
        VATCustomsExceptionCountryItem(country, item) <- NULL;
        VATItemCountry(item, country) <- NULL;
    }
}

changeVATCustomsExceptionCountryItemDate = ACTION (country, item, date) {
    REQUEST OBJECT vce
    FORM VATCustomsExceptions OBJECTS cg = customsGroupCountryItem(country, item) DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        VATCustomsExceptionCountryItem(country, item) <- requestedObject();
        VATItemCountry(item, country) <- IF VATCustomsExceptionCountryItem(country, item) THEN
                                            rangeVATCustomsExceptionCountryItem(country, item)
                                         ELSE
                                            VATCountryItemDate(country, item, date);
    } ELSE IF formResult() == FormResult.drop THEN {
        VATCustomsExceptionCountryItem(country, item) <- NULL;
        VATItemCountry(item, country) <- VATCountryItemDate(country, item, date);
    }
}


EXTEND FORM item
    PROPERTIES(c, i) codeCustomsGroupCountryItem BEFORE numberVATItemCountry(i, c) ON CHANGE changeCustomsGroupCountryItemDate(c, i, dtr),
                     nameVATCustomsExceptionCountryItem BEFORE numberVATItemCountry(i, c) ON CHANGE changeVATCustomsExceptionCountryItemDate(c, i, dtr) BACKGROUND backgroundCountrySku(c, i)
    PROPERTIES(i) codeCustomsGroupDefaultCountryItem ON CHANGE changeCustomsGroupDefaultCountryItem(i),
                  nameVATCustomsExceptionDefaultCountryItem ON CHANGE changeCustomsExceptionDefaultCountryItem(i)
;

EXTEND DESIGN item {
    regionPrm {
        ADD PROPERTY(originalCustomsGroupItem(i));
        ADD PROPERTY(codeCustomsGroupDefaultCountryItem(i));
        ADD PROPERTY(nameVATCustomsExceptionDefaultCountryItem(i));
    }
}

overCopyItem(s, d) += ACTION (s, d) {
    customsGroupCountryItem(c,d) <- customsGroupCountryItem(c,s) WHERE customsGroupCountryItem(c,s);
    originalCustomsGroupItem(d) <- originalCustomsGroupItem(s); 
}



