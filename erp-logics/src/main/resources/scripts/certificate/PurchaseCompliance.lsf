MODULE PurchaseCompliance;

REQUIRE Compliance, PurchaseCertificate;

NAMESPACE Purchase;

@defineDocumentCertificateObject(compliance, invoice, i, 'Сертификат соответствия');
@deriveDocumentCertificate(compliance, invoice, customerStock, data);
@defineDocumentCertificateObject(compliance, shipment, s, 'Сертификат соответствия');
@deriveDocumentCertificate(compliance, shipment, customerStock, data);

complianceShipmentDetail(detail) += complianceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

overFillInvoiceUserShipmentDetailInvoiceDetail(s, i) += ACTION (s, i) {
    ASSIGN dataComplianceUserShipmentDetail(s) <- complianceInvoiceDetail(i);
}

complianceBatch (batch) += complianceShipmentDetail(shipmentDetailShipmentBatch(batch));

//---------------------------------- накладные для сертификата --------------------------------------------------------//
inComplianceInvoice 'Вкл.' (compliance, invoice) = complianceUserInvoice(invoice)==compliance;

inComplianceInvoiceDetail 'Вкл.' (compliance, invoiceDetail) = dataComplianceUserInvoiceDetail(invoiceDetail)==compliance;

invoicesCompliance 'Накладные' (compliance) =
    GROUP CONCAT shortDescriptionInvoice(invoice) IF inComplianceInvoice (compliance, invoice), ','
              BY compliance ORDER invoice PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 MAXCHARWIDTH 120;

backgroundCompliancedInvoice 'Цвет' (invoice) = RGB(224, 224, 255) IF invoice IS Invoice;

nameComplianceSku 'Наименование (декл.)' = ABSTRACT VARISTRING[255](Sku);
nameComplianceSku(sku) += nameSku(sku);

nameComplianceUserInvoiceDetail 'Наименование (декл.)' (userInvoiceDetail) = nameComplianceSku(skuUserInvoiceDetail(userInvoiceDetail));

showComplianceInvoice 'Сертификация' = ABSTRACT BOOLEAN(Invoice);
showComplianceUserInvoice 'Сертификация' = DATA BOOLEAN(UserInvoice) IN documentPrmGroup;
showComplianceInvoice(invoice) += showComplianceUserInvoice(invoice);

//isComplianceInvoiceDetail 'Необходимость сертификации' = ABSTRACT BOOLEAN(InvoiceDetail);
//isComplianceUserInvoiceDetail 'Необходимость сертификации' = DATA BOOLEAN(UserInvoiceDetail);
//isComplianceInvoiceDetail(invoiceDetail) += isComplianceUserInvoiceDetail(invoiceDetail);
//
//quantityCompliancedInvoice 'Кол-во для сертификации' (invoice) = GROUP SUM 1 IF isComplianceInvoiceDetail(invoiceDetail) BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;
//
//isComplianceItemUserInvoiceDetail (userInvoiceDetail) = isCompliancedCountrySku(countryInvoiceDetail(userInvoiceDetail), skuUserInvoiceDetail(userInvoiceDetail));
//isComplianceUserInvoiceDetail(userInvoiceDetail) <- isComplianceItemUserInvoiceDetail(userInvoiceDetail) WHEN CHANGED (countryInvoiceDetail(userInvoiceDetail)) OR
//                                                                                                              CHANGED (skuUserInvoiceDetail(userInvoiceDetail));

// группы сертификации
complianceGroupInvoiceDetail = ABSTRACT ComplianceGroup(InvoiceDetail);
nameComplianceGroupInvoiceDetail 'Группа сертификации' (invoiceDetail) = nameComplianceGroup(complianceGroupInvoiceDetail(invoiceDetail));

complianceGroupUserInvoiceDetail = DATA ComplianceGroup(UserInvoiceDetail);
nameComplianceGroupUserInvoiceDetail 'Группа сертификации' (userInvoiceDetail) = nameComplianceGroup(complianceGroupUserInvoiceDetail(userInvoiceDetail));

complianceGroupInvoiceDetail(invoiceDetail) += complianceGroupUserInvoiceDetail(invoiceDetail);

complianceGroupCountrySkuUserInvoiceDetail 'Группа' (userInvoiceDetail) = complianceGroupCountrySku(countryInvoiceDetail(userInvoiceDetail), skuUserInvoiceDetail(userInvoiceDetail));
complianceGroupUserInvoiceDetail(userInvoiceDetail) <- complianceGroupCountrySkuUserInvoiceDetail(userInvoiceDetail) WHEN CHANGED (countryInvoiceDetail(userInvoiceDetail)) OR
                                                                                                                          CHANGED (skuUserInvoiceDetail(userInvoiceDetail));

setComplianceGroupInvoice 'Задать группы сертификации' = ACTION (invoice) {
   FOR userInvoiceUserInvoiceDetail(invoiceDetail) == invoice DO {
      ASSIGN complianceGroupUserInvoiceDetail(invoiceDetail) <- complianceGroupCountrySku(countryInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail));
   };
} TOOLBAR;

CONSTRAINT complianceGroupUserInvoiceDetail(detail) AND complianceUserInvoiceDetail(detail) AND countComplianceGroupCompliance(complianceUserInvoiceDetail(detail))
           AND NOT inComplianceGroupCompliance(complianceGroupUserInvoiceDetail(detail), complianceUserInvoiceDetail(detail))
    CHECKED BY dataComplianceUserInvoiceDetail MESSAGE 'Сертификат должен соответствовать группе сертификации';

// сертификаты для сертификационных групп
countUserInvoiceComplianceGroup 'Кол-во' (invoice, complianceGroup) = GROUP SUM 1 IF detail IS UserInvoiceDetail BY userInvoiceUserInvoiceDetail(detail), complianceGroupUserInvoiceDetail(detail);

complianceUserInvoiceComplianceGroup = DATA Compliance(UserInvoice, ComplianceGroup);
descriptionComplianceComplianceGroup 'Сертификат' (invoice, complianceGroup) = descriptionCompliance(complianceUserInvoiceComplianceGroup(invoice, complianceGroup));

dataComplianceUserInvoiceDetail(detail) <- complianceUserInvoiceComplianceGroup(userInvoiceUserInvoiceDetail(detail), complianceGroupUserInvoiceDetail(detail))
        WHEN CHANGED(complianceUserInvoiceComplianceGroup(userInvoiceUserInvoiceDetail(detail), complianceGroupUserInvoiceDetail(detail)));

CONSTRAINT complianceUserInvoiceComplianceGroup(invoice, group) AND countComplianceGroupCompliance(complianceUserInvoiceComplianceGroup(invoice, group))
           AND NOT inComplianceGroupCompliance(group, complianceUserInvoiceComplianceGroup(invoice, group))
    CHECKED BY complianceUserInvoiceComplianceGroup MESSAGE 'Сертификат должен соответствовать группе сертификации';


FORM complianceInvoices 'Накладные сертификации'
    OBJECTS c=Compliance FIXED PANEL
    PROPERTIES(c) seriesNumberObject, nameLegalEntityCompliance, dateTimeCompliance

    OBJECTS i=UserInvoice
    PROPERTIES (c, i) inComplianceInvoice
    PROPERTIES (i) READONLY numberObject, seriesObject, dateUserInvoice, timeUserInvoice, nameSupplierUserInvoice, nameCustomerUserInvoice
    FILTERS inComplianceInvoice(c, i) OR c IS Compliance AND NOT complianceUserInvoice(i)

    FILTERGROUP filtersImporter
        FILTER 'Только получателя' 'F11' legalEntityCompliance(c)==customerUserInvoice(i) DEFAULT

//    FILTERGROUP filtersComplianced
//        FILTER 'Требующие сертифицирования' 'F10' quantityCompliancedInvoice(i) DEFAULT

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(c, id) inComplianceInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, //isComplianceUserInvoiceDetail,
                   shortNameUOMSkuUserInvoiceDetail, quantityUserInvoiceDetail, priceUserInvoiceDetail
    FILTERS invoiceInvoiceDetail(id)==i

//    FILTERGROUP filtersDetail
//        FILTER 'Требующие сертифицирования' 'F9' isComplianceUserInvoiceDetail(id) DEFAULT
;

showFormComplianceInvoices 'Накладные сертификации' = ACTION (compliance) {
    FORM complianceInvoices OBJECTS c=compliance MODAL;
    EXEC apply();
} TOOLBAR;

EXTEND FORM compliance
    PROPERTIES(c) invoicesCompliance

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY seriesNumberInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, nameComplianceGroupUserInvoiceDetail,
                   quantityUserInvoiceDetail, priceUserInvoiceDetail, homePriceInvoiceDetail, sumHomeInvoiceDetail

    PROPERTIES (c) showFormComplianceInvoices TODRAW id FORCE PANEL TOOLBAR
    FILTERS complianceUserInvoiceDetail(id) == c
;

EXTEND DESIGN compliance {
    main {
        propContainer {
            ADD PROPERTY(invoicesCompliance);
        }

        ADD id.box {
            fillVertical = 2;
        }
    }
    ADD functions.box;
}

//------------------------------------------ позиции сертификата -------------------------------------------------------//

quantityCertificatedUserInvoiceDetail 'Кол-во на экспертизу' = DATA NUMERIC[14,3](UserInvoiceDetail);

quantityGroupCompliance 'Кол-во' = GROUP SUM quantityUserInvoiceDetail(userInvoiceDetail)
                                          BY complianceUserInvoiceDetail(userInvoiceDetail),
                                             nameComplianceUserInvoiceDetail(userInvoiceDetail);

CLASS ComplianceDetail 'Позиция сертификата';
TABLE complianceDetail(ComplianceDetail);

complianceComplianceDetail = DATA Compliance(ComplianceDetail);

nameComplianceComplianceDetail 'Наименование' = DATA VARSTRING[200](ComplianceDetail);

skuComplianceDetail = DATA Sku(ComplianceDetail);
nameSkuComplianceDetail 'Товар на экспертизу' (complianceDetail) = nameSku(skuComplianceDetail(complianceDetail));

@defineDocumentPosted(compliance);
@defineDocumentDetailBatchCustom(complianceDetail, batch);

numberDefaultComplianceDetail 'Номер' (complianceDetail) =
        PARTITION SUM 1 IF complianceDetail IS ComplianceDetail BY complianceComplianceDetail(complianceDetail)
        ORDER complianceDetail;

userNumberComplianceDetail 'Пользовательский номер' (complianceDetail) = DATA INTEGER (ComplianceDetail);
numberComplianceDetail 'Номер' (complianceDetail) = OVERRIDE numberDefaultComplianceDetail(complianceDetail), userNumberComplianceDetail(complianceDetail);

dateTimeComplianceDetail (complianceDetail) = dateTimeCompliance(complianceComplianceDetail(complianceDetail));
stockComplianceDetail (complianceDetail) = stockCompliance(complianceComplianceDetail(complianceDetail));
descriptionComplianceDetail (complianceDetail) = descriptionCompliance(complianceComplianceDetail(complianceDetail));

// привязка строк накладных
complianceDetailInvoiceDetail(invoiceDetail) = DATA ComplianceDetail(InvoiceDetail);
inInvoiceDetailComplianceDetail 'Вкл.' (invoiceDetail, complianceDetail) = complianceDetailInvoiceDetail(invoiceDetail)==complianceDetail;

quantityComplianceDetail 'Кол-во' (complianceDetail) = GROUP SUM quantityUserInvoiceDetail(invoiceDetail) BY complianceDetailInvoiceDetail(invoiceDetail) PERSISTENT;

sumHomeComplianceDetail 'Стоимость' (complianceDetail) = GROUP SUM sumHomeInvoiceDetail(invoiceDetail) BY complianceDetailInvoiceDetail(invoiceDetail);

//sumHomeCompliance 'Стоимость' (compliance) = GROUP SUM sumHomeInvoiceDetail(invoiceDetail) BY complianceInvoiceDetail(invoiceDetail);

inComplianceDetailInvoice = GROUP SUM 1 BY complianceDetailInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

invoicesComplianceDetail 'Накладные' (complianceDetail) =
    GROUP CONCAT seriesNumberObject(invoice) IF inComplianceDetailInvoice(complianceDetail, invoice) , ','
              BY complianceDetail ORDER invoice PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

quantitySkuComplianceDetail 'Кол-во' (sku, complianceDetail) = GROUP SUM quantityUserInvoiceDetail(userInvoiceDetail)
                                                                      BY skuUserInvoiceDetail(userInvoiceDetail), complianceDetailInvoiceDetail(userInvoiceDetail);

CONSTRAINT skuComplianceDetail(complianceDetail) IF NOT quantitySkuComplianceDetail(skuComplianceDetail(complianceDetail), complianceDetail) CHECKED BY skuComplianceDetail MESSAGE 'Несоответствующий товар для экспертизы'; //

// экспертиза
priceCertificatedComplianceDetail 'Цена для экспертизы' (complianceDetail) = GROUP MIN homePriceInvoiceDetail(userInvoiceDetail) BY complianceDetailInvoiceDetail(userInvoiceDetail);

quantityCertificatedComplianceDetail 'Кол-во на экспертизу' = DATA NUMERIC[14,3](ComplianceDetail);

sumCertificatedComplianceDetail 'Стоимость экспертизы (расч.)' (complianceDetail) = quantityCertificatedComplianceDetail(complianceDetail) * priceCertificatedComplianceDetail(complianceDetail);

sumDataCertificatedComplianceDetail 'Стоимость для экспертизы' (complianceDetail) = DATA NUMERIC[14,2](ComplianceDetail);

// Проводим по регистру
@implementSkuLedgerOutFIFO(ComplianceDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityCertificatedComplianceDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(complianceDetail, stock);
sumOutSkuLedger (ledger) += sumDataCertificatedComplianceDetail(ledger);
seriesDataSkuLedger (ledger) += seriesObject(complianceComplianceDetail(ledger));
numberDataSkuLedger (ledger) += numberObject(complianceComplianceDetail(ledger));

setSumComplianceDetail 'Рассчитать стоимость' = ACTION (compliance) {
   FOR complianceComplianceDetail(complianceDetail) == compliance DO {
      ASSIGN sumDataCertificatedComplianceDetail (complianceDetail) <- sumCertificatedComplianceDetail(complianceDetail);
   };
};

toCreateComplianceDetails 'Создать позиции' = ACTION (compliance) {
    FOR quantityGroupCompliance(compliance, complianceName)>0 ADDOBJ cd=ComplianceDetail DO {
        ASSIGN complianceComplianceDetail(cd) <- compliance;
        ASSIGN nameComplianceComplianceDetail(cd) <- complianceName;

        ASSIGN complianceDetailInvoiceDetail(invoiceDetail) <- cd WHERE complianceUserInvoiceDetail(invoiceDetail) == compliance AND
            nameComplianceUserInvoiceDetail(invoiceDetail) == complianceName ;
    };

    EXEC setSumComplianceDetail(compliance);

} TOOLBAR;

EXTEND FORM compliance

//    OBJECTS cd=ComplianceDetail
//    PROPERTIES(id, cd) inInvoiceDetailComplianceDetail
//    PROPERTIES(cd) numberComplianceDetail
//    PROPERTIES(cd) READONLY invoicesComplianceDetail, nameComplianceComplianceDetail, quantityComplianceDetail
//    PROPERTIES(cd) nameSkuComplianceDetail, quantityCertificatedComplianceDetail, priceCertificatedComplianceDetail, sumDataCertificatedComplianceDetail, DELETESESSION
//
//    PROPERTIES (c) toCreateComplianceDetails TODRAW cd FORCE PANEL TOOLBAR
//    PROPERTIES (c) setSumComplianceDetail TODRAW cd FORCE PANEL TOOLBAR
//    FILTERS complianceComplianceDetail(cd) == c

    EVENTS
        ON OK prePostCompliance(c)
;

EXTEND DESIGN compliance {
    main {
//        ADD cd.box {
//            fillVertical = 2;
//        }
    }
    PROPERTY(formOk) {
        caption = 'Провести';
    }
    ADD functions.box;
}

EXTEND FORM compliances

    PROPERTIES(c) FORCE GRID isPostedCompliance BEFORE numberObject(c)

//    OBJECTS cd=ComplianceDetail
//    PROPERTIES(cd) READONLY numberComplianceDetail, invoicesComplianceDetail, nameComplianceComplianceDetail, quantityComplianceDetail,
//                   nameSkuComplianceDetail, quantityCertificatedComplianceDetail, priceCertificatedComplianceDetail, sumDataCertificatedComplianceDetail
//    FILTERS complianceComplianceDetail(cd)==c
;
EXTEND FORM compliancesDialog
    PROPERTIES(c) FORCE GRID isPostedCompliance BEFORE numberObject(c)
;
//--------------------------------------------- себестоимость --------------------------------------------------------//
priceComplianceInvoiceDetail 'Сертификация (ед.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail);
priceComplianceUserInvoiceDetail 'Сертификация (ед.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
priceComplianceInvoiceDetail(detail) += priceComplianceUserInvoiceDetail(detail);

coeffInvoiceDetailComplianceDetail(invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumHomeComplianceDetail(complianceDetailInvoiceDetail(invoiceDetail));

calcSumComplianceDetailInvoiceDetail 'Стоимость экспертизы' (invoiceDetail) = PARTITION UNGROUP sumDataCertificatedComplianceDetail
                                                                              PROPORTION STRICT ROUND(0) coeffInvoiceDetailComplianceDetail(invoiceDetail)
                                                                                             BY complianceDetailInvoiceDetail(invoiceDetail)
                                                                                          ORDER invoiceDetail PERSISTENT;

calcPriceComplianceDetailInvoiceDetail(invoiceDetail) = calcSumComplianceDetailInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail);

coeffInvoiceDetailCompliance(invoiceDetail) = sumInvoiceDetail(invoiceDetail)/sumCompliance(complianceInvoiceDetail(invoiceDetail)) IF sumCompliance(complianceInvoiceDetail(invoiceDetail))>0;

calcSumComplianceInvoiceDetail 'Стоимость услуг' (invoiceDetail) = PARTITION UNGROUP sumCompliance
                                                                   PROPORTION STRICT ROUND(0) coeffInvoiceDetailCompliance(invoiceDetail)
                                                                                  BY complianceInvoiceDetail(invoiceDetail)
                                                                               ORDER invoiceDetail PERSISTENT;

calcPriceComplianceInvoiceDetail(invoiceDetail) = calcSumComplianceInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail) IF quantityUserInvoiceDetail(invoiceDetail)>0;

certificateCostPriceUserInvoiceDetail(invoiceDetail) += priceComplianceUserInvoiceDetail(invoiceDetail);

setPriceComplianceInvoiceDetailes 'Рассчитать расходы (за ед.)' = ACTION (compliance) {
   FOR complianceInvoiceDetail(invoiceDetail) == compliance DO {
      ASSIGN priceComplianceUserInvoiceDetail(invoiceDetail) <- calcPriceComplianceInvoiceDetail(invoiceDetail); // (+) calcPriceComplianceDetailInvoiceDetail(invoiceDetail)
   }
} TOOLBAR;



EXTEND FORM compliance
    PROPERTIES(id) priceComplianceUserInvoiceDetail
    PROPERTIES(c) setPriceComplianceInvoiceDetailes TODRAW id
;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCompliancedInvoice(i) showComplianceUserInvoice
    PROPERTIES(d) BACKGROUND backgroundCompliancedInvoice(i) priceComplianceUserInvoiceDetail BEFORE chargePercentUserInvoiceDetail SHOWIF showComplianceUserInvoice(i)

    OBJECTS cg = ComplianceGroup FIXED GRID
    PROPERTIES(cg) SHOWIF showComplianceUserInvoice(i) nameComplianceGroup READONLY
    PROPERTIES(i, cg) descriptionComplianceComplianceGroup SHOWIF showComplianceUserInvoice(i)
    FILTERS countUserInvoiceComplianceGroup(i, cg)

    OBJECTS d2 = UserInvoiceDetail FIXED GRID
    PROPERTIES(d2) SHOWIF showComplianceUserInvoice(i) indexUserInvoiceDetail, nameSkuUserInvoiceDetail, nameBatchUserInvoiceDetail, idBatchUserInvoiceDetail,
                   nameComplianceGroupUserInvoiceDetail, descriptionComplianceUserInvoiceDetail
    FILTERS userInvoiceUserInvoiceDetail(d2) == i

    FILTERGROUP groupFilters
        FILTER 'Текущей группы' 'F10' complianceGroupUserInvoiceDetail(d2) == cg
        FILTER 'Без группы' 'F9' NOT complianceGroupUserInvoiceDetail(d2)

    PROPERTIES(i) setComplianceGroupInvoice TODRAW d2 SHOWIF showComplianceUserInvoice(i)
;

EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerCompliance {
            caption = 'Сертификация';
            ADD PROPERTY(showComplianceUserInvoice);
        }
    }

    specification.box {
        NEW complianceContainer{
            caption = 'Сертификация';
            NEW promContainer {
                ADD cg.box;
                ADD d2.box;
            }
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(i) READONLYIF isReadonly() BACKGROUND backgroundCompliancedInvoice(i) showComplianceInvoice FORCE GRID
    PROPERTIES(d) READONLY BACKGROUND backgroundCompliancedInvoice(i) nameComplianceGroupInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showComplianceInvoice(i)
    PROPERTIES(d) READONLY BACKGROUND backgroundCompliancedInvoice(i) priceComplianceInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showComplianceInvoice(i)
;

//-- Операция
@defineOperationProperty(showCompliance, 'Сертификация', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showCompliance);
