MODULE PurchaseCompliance;

REQUIRE Compliance, PurchaseCertificate;

NAMESPACE Purchase;

@defineDocumentCertificateObject(compliance, invoice, i, 'Сертификат соответствия');
@deriveDocumentCertificate(compliance, invoice, customerStock, data);
@defineDocumentCertificateObject(compliance, shipment, s, 'Сертификат соответствия');
@deriveDocumentCertificate(compliance, shipment, customerStock, data);

complianceShipmentDetail(detail) += complianceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

overFillInvoiceUserShipmentDetailInvoiceDetail(s, i) += ACTION (s, i) {
    SET dataComplianceUserShipmentDetail(s) <- complianceInvoiceDetail(i);
}

complianceBatch (batch) += complianceShipmentDetail(shipmentDetailShipmentBatch(batch));

//---------------------------------- накладные для сертификата --------------------------------------------------------//
inComplianceInvoice 'Вкл.' (compliance, invoice) = complianceUserInvoice(invoice)==compliance;

inComplianceInvoiceDetail 'Вкл.' (compliance, invoiceDetail) = dataComplianceUserInvoiceDetail(invoiceDetail)==compliance;

invoicesCompliance 'Накладные' (compliance) =
    GROUP CONCAT shortDescriptionInvoice(invoice) IF inComplianceInvoice (compliance, invoice), ','
              BY compliance ORDER invoice PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 MAXCHARWIDTH 120;

backgroundCompliancedInvoice 'Цвет' (invoice) = RGB(224, 224, 255) IF invoice IS Invoice;

nameComplianceSku 'Наименование (декл.)' = ABSTRACT ISTRING[255](Sku);
nameComplianceSku(sku) += nameSku(sku);

nameComplianceUserInvoiceDetail 'Наименование (декл.)' (userInvoiceDetail) = nameComplianceSku(skuUserInvoiceDetail(userInvoiceDetail));

showComplianceInvoice 'Сертификация' = ABSTRACT BOOLEAN(Invoice);
showComplianceUserInvoice 'Сертификация' = DATA BOOLEAN(UserInvoice) IN documentPrmGroup;
showComplianceInvoice(invoice) += showComplianceUserInvoice(invoice);

isComplianceInvoiceDetail 'Необходимость сертификации' = ABSTRACT BOOLEAN(InvoiceDetail);
isComplianceUserInvoiceDetail 'Необходимость сертификации' = DATA BOOLEAN(UserInvoiceDetail);
isComplianceInvoiceDetail(invoiceDetail) += isComplianceUserInvoiceDetail(invoiceDetail);

quantityCompliancedInvoice 'Кол-во для сертификации' (invoice) = GROUP SUM 1 IF isComplianceInvoiceDetail(invoiceDetail) BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;
//isComplianceUserInvoice(invoice) <- TRUE IF quantityCompliancedInvoice(invoice) WHEN CHANGED(quantityCompliancedInvoice(invoice));

isComplianceItemUserInvoiceDetail (userInvoiceDetail) = isCompliancedCountrySku(countryInvoiceDetail(userInvoiceDetail), skuUserInvoiceDetail(userInvoiceDetail));
isComplianceUserInvoiceDetail(userInvoiceDetail) <- isComplianceItemUserInvoiceDetail(userInvoiceDetail) WHEN CHANGED (countryInvoiceDetail(userInvoiceDetail)) OR
                                                                                                              CHANGED (skuUserInvoiceDetail(userInvoiceDetail));

FORM complianceInvoices 'Накладные сертификации'
    OBJECTS c=Compliance FIXED PANEL
    PROPERTIES(c) seriesNumberObject, nameLegalEntityCompliance, dateTimeCompliance

    OBJECTS i=UserInvoice
    PROPERTIES (c, i) inComplianceInvoice
    PROPERTIES (i) READONLY numberObject, seriesObject, dateUserInvoice, timeUserInvoice, nameSupplierUserInvoice, nameCustomerUserInvoice
    FILTERS inComplianceInvoice(c, i) OR c IS Compliance AND NOT complianceUserInvoice(i)

    FILTERGROUP filtersImporter
        FILTER 'Только получателя' 'F11' legalEntityCompliance(c)==customerUserInvoice(i) DEFAULT

    FILTERGROUP filtersComplianced
        FILTER 'Требующие сертифицирования' 'F10' quantityCompliancedInvoice(i) DEFAULT

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(c, id) inComplianceInvoiceDetail
    PROPERTIES(id) READONLY indexUserInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, isComplianceUserInvoiceDetail,
                   shortNameUOMSkuUserInvoiceDetail, quantityUserInvoiceDetail, priceUserInvoiceDetail
    FILTERS invoiceInvoiceDetail(id)==i

    FILTERGROUP filtersDetail
        FILTER 'Требующие сертифицирования' 'F9' isComplianceUserInvoiceDetail(id) DEFAULT
;

showFormComplianceInvoices 'Накладные сертификации' = ACTION (compliance) {
    FORM complianceInvoices OBJECTS c=compliance MODAL;
    EXEC apply();
} TOOLBAR;

EXTEND FORM compliance
    PROPERTIES(c) invoicesCompliance

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY seriesNumberInvoiceDetail, idBarcodeSkuUserInvoiceDetail, nameSkuUserInvoiceDetail, isComplianceUserInvoiceDetail,
                   quantityUserInvoiceDetail, priceUserInvoiceDetail, homePriceInvoiceDetail, sumHomeInvoiceDetail

    PROPERTIES (c) showFormComplianceInvoices TODRAW id FORCE PANEL TOOLBAR
    FILTERS complianceUserInvoiceDetail(id) == c
;

EXTEND DESIGN compliance {
    main {
        propContainer {
            ADD PROPERTY(invoicesCompliance);
        }

        ADD id.box {
            fillVertical = 2;
        }
    }
    ADD functions.box;
}

//------------------------------------------ позиции сертификата -------------------------------------------------------//

quantityCertificatedUserInvoiceDetail 'Кол-во на экспертизу' = DATA NUMERIC[14,3](UserInvoiceDetail);

TABLE complianceComplianceName(Compliance, STRING[200]);

quantityGroupCompliance 'Кол-во' = GROUP SUM quantityUserInvoiceDetail(userInvoiceDetail)
                                          BY complianceUserInvoiceDetail(userInvoiceDetail),
                                             nameComplianceUserInvoiceDetail(userInvoiceDetail) PERSISTENT;

CLASS ComplianceDetail 'Позиция сертификата';
TABLE complianceDetail(ComplianceDetail);

complianceComplianceDetail = DATA Compliance(ComplianceDetail);

nameComplianceComplianceDetail 'Наименование' = DATA STRING[200](ComplianceDetail);

skuComplianceDetail = DATA Sku(ComplianceDetail);
nameSkuComplianceDetail 'Товар на экспертизу' (complianceDetail) = nameSku(skuComplianceDetail(complianceDetail));

@defineDocumentPosted(compliance);
//@defineDocumentDetailPosted(compliance, complianceDetail);
@defineDocumentDetailBatchCustom(complianceDetail, batch);

numberDefaultComplianceDetail 'Номер' (complianceDetail) =
        PARTITION SUM 1 IF complianceDetail IS ComplianceDetail BY complianceComplianceDetail(complianceDetail)
        ORDER complianceDetail;

userNumberComplianceDetail 'Пользовательский номер' (complianceDetail) = DATA INTEGER (ComplianceDetail);
numberComplianceDetail 'Номер' (complianceDetail) = OVERRIDE numberDefaultComplianceDetail(complianceDetail), userNumberComplianceDetail(complianceDetail);

dateTimeComplianceDetail (complianceDetail) = dateTimeCompliance(complianceComplianceDetail(complianceDetail));
stockComplianceDetail (complianceDetail) = stockCompliance(complianceComplianceDetail(complianceDetail));
descriptionComplianceDetail (complianceDetail) = descriptionCompliance(complianceComplianceDetail(complianceDetail));

// привязка строк накладных
complianceDetailInvoiceDetail(invoiceDetail) = DATA ComplianceDetail(InvoiceDetail);
inInvoiceDetailComplianceDetail 'Вкл.' (invoiceDetail, complianceDetail) = complianceDetailInvoiceDetail(invoiceDetail)==complianceDetail;

quantityComplianceDetail 'Кол-во' (complianceDetail) = GROUP SUM quantityUserInvoiceDetail(invoiceDetail) BY complianceDetailInvoiceDetail(invoiceDetail) PERSISTENT;

sumHomeComplianceDetail 'Стоимость' (complianceDetail) = GROUP SUM sumHomeInvoiceDetail(invoiceDetail) BY complianceDetailInvoiceDetail(invoiceDetail);

inComplianceDetailInvoice = GROUP SUM 1 BY complianceDetailInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

invoicesComplianceDetail 'Накладные' (complianceDetail) =
    GROUP CONCAT seriesNumberObject(invoice) IF inComplianceDetailInvoice(complianceDetail, invoice) , ','
              BY complianceDetail ORDER invoice PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40 MAXCHARWIDTH 60;

quantitySkuComplianceDetail 'Кол-во' (sku, complianceDetail) = GROUP SUM quantityUserInvoiceDetail(userInvoiceDetail)
                                                                      BY skuUserInvoiceDetail(userInvoiceDetail), complianceDetailInvoiceDetail(userInvoiceDetail);

CONSTRAINT skuComplianceDetail(complianceDetail) IF NOT quantitySkuComplianceDetail(skuComplianceDetail(complianceDetail), complianceDetail) CHECKED BY skuComplianceDetail MESSAGE 'Несоответствующий товар для экспертизы'; //

// экспертиза
priceCertificatedComplianceDetail 'Цена для экспертизы' (complianceDetail) = GROUP MIN homePriceInvoiceDetail(userInvoiceDetail) BY complianceDetailInvoiceDetail(userInvoiceDetail);

quantityCertificatedComplianceDetail 'Кол-во на экспертизу' = DATA NUMERIC[14,3](ComplianceDetail);

sumCertificatedComplianceDetail 'Стоимость экспертизы (расч.)' (complianceDetail) = quantityCertificatedComplianceDetail(complianceDetail) * priceCertificatedComplianceDetail(complianceDetail);

sumDataCertificatedComplianceDetail 'Стоимость для экспертизы' (complianceDetail) = DATA NUMERIC[14,2](ComplianceDetail);

// Проводим по регистру
@implementSkuLedgerOutFIFO(ComplianceDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityCertificatedComplianceDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(complianceDetail, stock);
sumOutSkuLedger (ledger) += sumDataCertificatedComplianceDetail(ledger);


setSumComplianceDetail 'Рассчитать стоимость' = ACTION (compliance) {
   FOR complianceComplianceDetail(complianceDetail) == compliance DO {
      SET sumDataCertificatedComplianceDetail (complianceDetail) <- sumCertificatedComplianceDetail(complianceDetail);
   };
};

toCreateComplianceDetails 'Создать позиции' = ACTION (compliance) {
    FOR quantityGroupCompliance(compliance, complianceName)>0 ADDOBJ cd=ComplianceDetail DO {
        SET complianceComplianceDetail(cd) <- compliance;
        SET nameComplianceComplianceDetail(cd) <- complianceName;

        SET complianceDetailInvoiceDetail(invoiceDetail) <- cd WHERE complianceUserInvoiceDetail(invoiceDetail) == compliance AND
            nameComplianceUserInvoiceDetail(invoiceDetail) == complianceName ;
    };

    EXEC setSumComplianceDetail(compliance);

} TOOLBAR;

EXTEND FORM compliance

    OBJECTS cd=ComplianceDetail
    PROPERTIES(id, cd) inInvoiceDetailComplianceDetail
    PROPERTIES(cd) numberComplianceDetail
    PROPERTIES(cd) READONLY invoicesComplianceDetail, nameComplianceComplianceDetail, quantityComplianceDetail
    PROPERTIES(cd) nameSkuComplianceDetail, quantityCertificatedComplianceDetail, priceCertificatedComplianceDetail, sumDataCertificatedComplianceDetail, DELETESESSION

    PROPERTIES (c) toCreateComplianceDetails TODRAW cd FORCE PANEL TOOLBAR
    PROPERTIES (c) setSumComplianceDetail TODRAW cd FORCE PANEL TOOLBAR
    FILTERS complianceComplianceDetail(cd) == c

    EVENTS
        ON OK prePostCompliance(c)
;

EXTEND DESIGN compliance {
    main {
        ADD cd.box {
            fillVertical = 2;
        }
    }
    PROPERTY(formOk) {
        caption = 'Провести';
    }
    ADD functions.box;
}

EXTEND FORM compliances

    PROPERTIES(c) FORCE GRID isPostedCompliance BEFORE numberObject(c)

    OBJECTS cd=ComplianceDetail
    PROPERTIES(cd) READONLY numberComplianceDetail, invoicesComplianceDetail, nameComplianceComplianceDetail, quantityComplianceDetail,
                   nameSkuComplianceDetail, quantityCertificatedComplianceDetail, priceCertificatedComplianceDetail, sumDataCertificatedComplianceDetail
    FILTERS complianceComplianceDetail(cd)==c
;
EXTEND FORM compliancesDialog
    PROPERTIES(c) FORCE GRID isPostedCompliance BEFORE numberObject(c)
;
//--------------------------------------------- себестоимость --------------------------------------------------------//
priceComplianceInvoiceDetail 'Сертификация (ед.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail);
priceComplianceUserInvoiceDetail 'Сертификация (ед.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
priceComplianceInvoiceDetail(detail) += priceComplianceUserInvoiceDetail(detail);

coeffInvoiceDetailComplianceDetail(invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumHomeComplianceDetail(complianceDetailInvoiceDetail(invoiceDetail));

calcSumComplianceDetailInvoiceDetail 'Стоимость экспертизы' (invoiceDetail) = PARTITION UNGROUP sumDataCertificatedComplianceDetail
                                                                              PROPORTION STRICT ROUND(0) coeffInvoiceDetailComplianceDetail(invoiceDetail)
                                                                                             BY complianceDetailInvoiceDetail(invoiceDetail)
                                                                                          ORDER invoiceDetail PERSISTENT;

calcPriceComplianceDetailInvoiceDetail(invoiceDetail) = calcSumComplianceDetailInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail);

coeffInvoiceDetailCompliance(invoiceDetail) = sumHomeInvoiceDetail(invoiceDetail)/sumCompliance(complianceInvoiceDetail(invoiceDetail));

calcSumComplianceInvoiceDetail 'Стоимость услуг' (invoiceDetail) = PARTITION UNGROUP sumCompliance
                                                                   PROPORTION STRICT ROUND(0) coeffInvoiceDetailCompliance(invoiceDetail)
                                                                                  BY complianceInvoiceDetail(invoiceDetail)
                                                                               ORDER invoiceDetail PERSISTENT;

calcPriceComplianceInvoiceDetail(invoiceDetail) = calcSumComplianceInvoiceDetail(invoiceDetail)/quantityUserInvoiceDetail(invoiceDetail);

certificateCostPriceUserInvoiceDetail(invoiceDetail) += priceComplianceUserInvoiceDetail(invoiceDetail);

setPriceComplianceInvoiceDetailes 'Рассчитать расходы (за ед.)' = ACTION (compliance) {
   FOR complianceInvoiceDetail(invoiceDetail) == compliance DO {
      SET priceComplianceInvoiceDetail(invoiceDetail) <- calcPriceComplianceInvoiceDetail(invoiceDetail) (+) calcPriceComplianceDetailInvoiceDetail(invoiceDetail);
   }
} TOOLBAR;

EXTEND FORM compliance
    PROPERTIES(id) priceComplianceUserInvoiceDetail
    PROPERTIES(c) setPriceComplianceInvoiceDetailes TODRAW id
;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCompliancedInvoice(i) showComplianceUserInvoice
    PROPERTIES(d) BACKGROUND backgroundCompliancedInvoice(i) isComplianceUserInvoiceDetail BEFORE chargePercentUserInvoiceDetail SHOWIF showComplianceUserInvoice(i)
    PROPERTIES(d) BACKGROUND backgroundCompliancedInvoice(i) priceComplianceUserInvoiceDetail BEFORE chargePercentUserInvoiceDetail SHOWIF showComplianceUserInvoice(i)
;
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerCompliance {
            title = 'Сертификация';
            ADD PROPERTY(showComplianceUserInvoice);
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundCompliancedInvoice(i) showComplianceInvoice FORCE GRID
    PROPERTIES(d) READONLY BACKGROUND backgroundCompliancedInvoice(i) isComplianceInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showComplianceInvoice(i)
    PROPERTIES(d) READONLY BACKGROUND backgroundCompliancedInvoice(i) priceComplianceInvoiceDetail BEFORE chargePriceInvoiceDetail SHOWIF showComplianceInvoice(i)
;

//-- Операция
@defineOperationProperty(showCompliance, 'Сертификация', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showCompliance);
