MODULE PurchaseComplianceDetail;

REQUIRE PurchaseCompliance, ComplianceGroup, ComplianceType, PurchaseInvoiceCharge;

NAMESPACE Purchase;

//---------------------------------- накладные для сертификата --------------------------------------------------------//

in 'Вкл.' (Compliance compliance, UserInvoice invoice) = compliance(invoice)==compliance;

in 'Вкл.' (Compliance compliance, UserInvoiceDetail invoiceDetail) = dataCompliance(invoiceDetail)==compliance;

invoices 'Накладные' (compliance) =
    GROUP CONCAT shortDescription(UserInvoice invoice) IF in (Compliance compliance, invoice), ','
              BY compliance ORDER invoice PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 MAXCHARWIDTH 120;

// Тип сертификата
nameComplianceTypeCompliance 'Тип сертификата' (UserInvoiceDetail invoiceDetail) = nameComplianceType(compliance(invoiceDetail));

// Группы сертификации
complianceGroup = ABSTRACT ComplianceGroup(InvoiceDetail);
complianceGroup = DATA ComplianceGroup(UserInvoiceDetail);
complianceGroup(UserInvoiceDetail invoiceDetail) += complianceGroup(invoiceDetail);

nameComplianceGroup 'Группа сертификации' (InvoiceDetail invoiceDetail) = name(complianceGroup(invoiceDetail));
nameComplianceGroup 'Группа сертификации' (UserInvoiceDetail userInvoiceDetail) = name(complianceGroup(userInvoiceDetail));

complianceGroup(UserInvoiceDetail userInvoiceDetail) <-
    complianceGroup(country[InvoiceDetail](userInvoiceDetail), sku(userInvoiceDetail))
    WHEN CHANGED (country[InvoiceDetail](userInvoiceDetail)) OR
         CHANGED (sku(userInvoiceDetail));

setComplianceGroup 'Заполнить группы сертификации' = ACTION (UserInvoice invoice) {
   FOR userInvoice(UserInvoiceDetail invoiceDetail) == invoice DO {
      complianceGroup(invoiceDetail) <- complianceGroup(country[InvoiceDetail](invoiceDetail), sku[InvoiceDetail](invoiceDetail));
   }
} TOOLBAR;

CONSTRAINT complianceGroup(UserInvoiceDetail detail) AND countComplianceGroup(dataCompliance(detail))
           AND NOT in(complianceGroup(detail), dataCompliance(detail))
    CHECKED BY dataCompliance[UserInvoiceDetail] MESSAGE 'Сертификат должен соответствовать группе сертификации';

// сертификаты для групп сертификаций по всему инвойсу
TABLE userInvoiceComplianceGroup (UserInvoice, ComplianceGroup);

compliance = DATA Compliance(UserInvoice, ComplianceGroup);
descriptionCompliance 'Сертификат' (UserInvoice invoice, ComplianceGroup complianceGroup) = description(compliance(invoice, complianceGroup));
nameComplianceTypeCompliance 'Тип сертификата' (UserInvoice invoice, ComplianceGroup complianceGroup) = nameComplianceType(compliance(invoice, complianceGroup));

CONSTRAINT countComplianceGroup(compliance(UserInvoice invoice, ComplianceGroup group))
           AND NOT in(group, compliance(invoice, group))
    CHECKED BY compliance[UserInvoice,ComplianceGroup] MESSAGE 'Сертификат должен соответствовать группе сертификации';

WHEN SESSION FORMS userInvoice CHANGED(compliance(UserInvoice i, ComplianceGroup g)) DO
    dataCompliance(UserInvoiceDetail d) <- compliance(i, g)
        WHERE userInvoice(d) == i AND complianceGroup(d) == g;

WHEN SESSION FORMS userInvoice CHANGED(complianceGroup(UserInvoiceDetail d)) AND compliance(userInvoice(d), complianceGroup(d)) DO
    dataCompliance(d) <- compliance(userInvoice(d), complianceGroup(d));

count 'Кол-во' (invoice, complianceGroup) =
    GROUP SUM 1 BY userInvoice(UserInvoiceDetail detail), complianceGroup(detail) PERSISTENT;

// ------------------------------- Затраты на сертификацию ----------------------------- //

compliancePrice 'Сертификация (ед.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail);
compliancePrice 'Сертификация (ед.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
compliancePrice(UserInvoiceDetail detail) += compliancePrice(detail);

overComplianceSum 'Сертификация сумма' = ABSTRACT NUMERIC[16,2](InvoiceDetail);
overComplianceSum 'Сертификация сумма' = DATA NUMERIC[16,2](UserInvoiceDetail);
overComplianceSum(UserInvoiceDetail detail) += overComplianceSum(detail);
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, overCompliance, ' (сертификация) всего');
                                                                
complianceSum 'Сертификация' (UserInvoiceDetail d) = quantity(d) * compliancePrice(d);
complianceSum 'Сертификация' (InvoiceDetail d) = quantity(d) * compliancePrice(d);

certificateCostPrice[UserInvoiceDetail](UserInvoiceDetail invoiceDetail) += compliancePrice(invoiceDetail);
certificateCostSum[UserInvoiceDetail](UserInvoiceDetail invoiceDetail) += overComplianceSum(invoiceDetail);

complianceSumUserInvoiceDetail 'Сертификация' = GROUP SUM complianceSum(UserInvoiceDetail d)
                                                                BY compliance(d) MINCHARWIDTH 15 PERSISTENT;
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, compliance, ' (сертификация) всего');
                                                                
overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) += ACTION (d, detail) {      
    compliancePrice(d) <- compliancePrice(detail);
    overComplianceSum(d) <- overComplianceSum(detail);
}                                                                 

// ----------------------------- Расширение формы инвойсов под сертификацию ------------------------- //

showCompliance 'Сертификация' = ABSTRACT BOOLEAN(Invoice);
showCompliance 'Сертификация' = DATA BOOLEAN(UserInvoice) IN documentPrm;
showCompliance(UserInvoice invoice) += showCompliance(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCompliance() showCompliance
    PROPERTIES(d) BACKGROUND backgroundCompliance() SHOWIF showCompliance(i)
                                                    compliancePrice BEFORE chargePercent(d)

    OBJECTS cg = ComplianceGroup FIXED GRID
    PROPERTIES(cg) READONLY SHOWIF showCompliance(i)
                            name
    PROPERTIES(i, cg) SHOWIF showCompliance(i)
                            descriptionCompliance,
                            nameComplianceTypeCompliance
    FILTERS count(i, cg)

    OBJECTS d2 = UserInvoiceDetail FIXED GRID
    PROPERTIES(d2) SHOWIF showCompliance(i)
                            index, nameSku, nameBatch, idBatch,
                            nameComplianceGroup, descriptionCompliance, nameComplianceTypeCompliance
    FILTERS userInvoice(d2) == i

//    пока нельзя включить, так как не будет прятаться вкладка Сертификация
//    FILTERGROUP groupFilters
//        FILTER 'Текущей группы' 'F10' complianceGroupUserInvoiceDetail(d2) == cg
//        FILTER 'Без группы' 'F9' NOT complianceGroupUserInvoiceDetail(d2)

    PROPERTIES(i) setComplianceGroup TODRAW d2 SHOWIF showCompliance(i)
;

DESIGN userInvoice {
    headerExtraParams {
        NEW headerCompliance {
            caption = 'Сертификация';
            MOVE PROPERTY(showCompliance(i));
        }
    }

    specification.box {
        NEW complianceContainer {
            caption = 'Сертификация';
            type = CONTAINERV;
            MOVE cg.box;
            MOVE d2.box;
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundCompliance() SHOWIF showCompliance(i) BEFORE chargePrice(d)
                                                nameComplianceGroup, compliancePrice
;

// ------------------------- Расширение формы сертификатов данными из инвойсов ----------------------------- //

EXTEND FORM compliance
    PROPERTIES(c) READONLY invoices

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY seriesNumber[InvoiceDetail], idBarcodeSku, nameSku,
                            quantity, price, homePrice, homeSum
    PROPERTIES(id) BACKGROUND backgroundCompliance()
                            nameComplianceGroup, compliancePrice

    FILTERS compliance(id) == c
;

DESIGN compliance {
    documentParams{
        MOVE PROPERTY(invoices(c));
    }
    firstTab{
        MOVE id.box;        
    }
    
}

// ------------------------------------------ Выбор накладных непосредственно в форме сертификата -------------------------------------- //

FORM complianceInvoices 'Накладные сертификации'
    OBJECTS c=Compliance FIXED PANEL
    PROPERTIES(c) READONLY seriesNumber, nameLegalEntity, dateTime

    OBJECTS i=UserInvoice
    PROPERTIES(c, i)       in
    PROPERTIES(i) READONLY number, series, date, time, nameSupplier, nameCustomer
    FILTERS in(c, i) OR c IS Compliance AND NOT compliance(i)

    FILTERGROUP filtersImporter
        FILTER 'Только получателя' legalEntity(c) == customer(i) 'F11' DEFAULT

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(c, id) in
    PROPERTIES(id) READONLY index, idBarcodeSku, nameSku,
                            shortNameUOMSku, quantity, price
    FILTERS userInvoice(id)==i
;

selectInvoices 'Выбрать накладные' = ACTION (Compliance compliance) {
    FORM complianceInvoices OBJECTS c=compliance MODAL;
} TOOLBAR;

EXTEND FORM compliance
    PROPERTIES (c) selectInvoices TODRAW id FORCE PANEL TOOLBAR
;

//-------------------------------------- Расписывание затрат по сертификату ----------------------------------------------//

sum 'Стоимость' = DATA NUMERIC[16,2](Compliance);
sumRound 'Стоимость (округление)' (Compliance c) = sum(c) (-) complianceSumUserInvoiceDetail(c);

coeffCompliance 'Удельный вес' (UserInvoiceDetail d) =
    NUMERIC[22,8](sum(d)) / sumUserInvoiceDetail(compliance(d));

calcComplianceSum 'Сертификация' (UserInvoiceDetail d) =
    PARTITION UNGROUP sum
              PROPORTION ROUND(2) coeffCompliance(d)
              BY compliance(d)
              ORDER d;

calcCompliancePrice 'Сертификация (ед.)' (UserInvoiceDetail d) = Utils.round(calcComplianceSum(d) / quantity(d), 2);

recalculatePriceInvoice 'Рассчитать расходы (за ед.)' = ACTION (Compliance compliance) {
    compliancePrice(UserInvoiceDetail d) <- calcCompliancePrice(d) WHERE compliance(d) == compliance;
    overComplianceSum(UserInvoiceDetail d) <- NUMERIC[16,2](calcComplianceSum(d)) WHERE compliance(d) == compliance;
} TOOLBAR;


EXTEND FORM compliance
    PROPERTIES(c) sum, sumRound READONLY
    PROPERTIES(c) recalculatePriceInvoice TODRAW id
;

DESIGN compliance {
    documentParams {
        MOVE PROPERTY(sum(c));
        MOVE PROPERTY(sumRound(c));
    }
}

EXTEND FORM compliances
    PROPERTIES(c) READONLY sum AFTER nameComplianceType(c)
;

//-- Операция
@defineOperationProperty(showCompliance, 'Сертификация', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showCompliance);
