MODULE Declaration;

REQUIRE Certificate, Shipment, CustomsGroup;

CLASS Declaration 'Таможенная декларация' : Certificate, NumeratedObject;

TABLE declaration(Declaration);

CLASS DeclarationPosted 'Проведенная таможенная декларация' : Declaration, PostedObject;

@defineNumeratedObjectDefault(Declaration, 'Нумератор для деклараций', 'ДД');
@defineExternalizable(declaration, VARSTRING[100]);

@defineDocumentHeaderTimePrefix(Declaration, ,' документа');
@deriveDocumentHeaderTimePrefix(Declaration, );
dateCertificate(declaration) += dateDeclaration(declaration);
timeCertificate(declaration) += timeDeclaration(declaration);

seriesCertificate(declaration) += seriesObject(declaration) IF declaration IS Declaration;
numberCertificate(declaration) += numberObject(declaration) IF declaration IS Declaration;

descriptionDeclaration 'Таможенная декларация' (declaration) = CONCAT ' ', '№ ' + seriesNumberObject(declaration), 'от ' + dateDeclaration(declaration);

@defineCertificateObjectBatch(declaration, 'Таможенная декларация');

customsZoneDeclaration = DATA CustomsZone(Declaration);
nameCustomsZoneDeclaration 'Таможенная зона' (declaration) = nameCustomsZone(customsZoneDeclaration(declaration));

currencyCustomsZoneDeclaration (declaration) = currencyCustomsZone(customsZoneDeclaration(declaration));
nameCurrencyCustomsZoneDeclaration 'Валюта платежей' (declaration) = nameCurrency(currencyCustomsZoneDeclaration(declaration));

legalEntityDeclaration = DATA LegalEntity(Declaration);
nameLegalEntityDeclaration 'Импортёр' (declaration) = nameLegalEntity(legalEntityDeclaration(declaration));

@defineDocumentLegalEntityAccess(Declaration, legalEntity, company);

CONSTRAINT legalEntityDeclaration(declaration) AND NOT isCompanyLegalEntity(legalEntityDeclaration(declaration))
    CHECKED BY legalEntityDeclaration MESSAGE 'Импортёр должен быть компанией';

currencyDeclaration = DATA Currency(Declaration);
nameCurrencyDeclaration 'Валюта накладных' (declaration) = nameCurrency(currencyDeclaration(declaration));

homeCurrencyDeclaration = DATA Currency(Declaration);
nameHomeCurrencyDeclaration 'Валюта (расч.)' (declaration) = nameCurrency(homeCurrencyDeclaration(declaration));

homeCurrencyDeclaration(declaration) <- currencyLegalEntity(legalEntityDeclaration(declaration)) WHEN CHANGED(legalEntityDeclaration(declaration));

typeExchangeDeclaration = DATA TypeExchange(Declaration);
nameTypeExchangeDeclaration 'Тип обмена' (declaration) = nameTypeExchange(typeExchangeDeclaration(declaration));

CONSTRAINT currencyTypeExchange(typeExchangeDeclaration(declaration)) != homeCurrencyDeclaration(declaration)
    CHECKED BY typeExchangeDeclaration MESSAGE 'Тип обмена должен соответствовать расчётной валюте';

rateExchangeDeclaration 'Курс для накладных' = DATA NUMERIC[14,3](Declaration);
calcRateExchangeDeclaration 'Курс для накладных' (declaration) = rateTypeExchangeCurrencyDate(typeExchangeDeclaration(declaration), currencyDeclaration(declaration), dateDeclaration(declaration));
rateExchangeDeclaration(declaration) <- calcRateExchangeDeclaration(declaration) WHEN CHANGED (dateDeclaration(declaration)) OR
                                                                                      CHANGED (typeExchangeDeclaration(declaration)) OR
                                                                                      CHANGED (currencyDeclaration(declaration));

rateExchangeCustomsZoneDeclaration 'Курс платежей' = DATA NUMERIC[14,3](Declaration);
calcRateExchangeCustomsZoneDeclaration 'Курс платежей' = rateTypeExchangeCurrencyDate(typeExchangeDeclaration(declaration), currencyCustomsZoneDeclaration(declaration), dateDeclaration(declaration));
rateExchangeCustomsZoneDeclaration(declaration) <- calcRateExchangeCustomsZoneDeclaration(declaration) WHEN CHANGED (dateDeclaration(declaration)) OR
                                                                                                            CHANGED (typeExchangeDeclaration(declaration)) OR
                                                                                                            CHANGED (customsZoneDeclaration(declaration));

roundDeclaration 'Точность округления' = DATA INTEGER(Declaration);

roundCurrencyDeclaration(number, declaration) = round(number AS NUMERIC[16,4], roundDeclaration(declaration));

FORM declaration 'Таможенная декларация'
    OBJECTS d = Declaration FIXED PANEL
    PROPERTIES(d) objectClassName, nameNumeratorObject, numberObject, seriesObject, dateDeclaration, timeDeclaration,
                  nameLegalEntityDeclaration, nameCurrencyDeclaration, nameCustomsZoneDeclaration, nameHomeCurrencyDeclaration,
                  nameTypeExchangeDeclaration, roundDeclaration, rateExchangeDeclaration, nameCurrencyCustomsZoneDeclaration READONLY,
                  rateExchangeCustomsZoneDeclaration
    EDIT Declaration OBJECT d
;

DESIGN declaration FROM DEFAULT{
    main{
        NEW topContainer {
            childConstraints = TO THE BOTTOM;
            NEW headContainer {
                childConstraints = TO THE RIGHTBOTTOM;
                caption = 'Шапка документа';
                ADD PROPERTY(objectClassName);
                ADD PROPERTY(nameNumeratorObject);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(dateDeclaration);
                ADD PROPERTY(timeDeclaration);
            }

            NEW rightContainer {
                childConstraints = TO THE RIGHT;
                NEW parameterContainer {
                    caption = 'Параметры документа';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(nameLegalEntityDeclaration);
                    ADD PROPERTY(nameCustomsZoneDeclaration);
                }

                NEW currencyContainer {
                    caption = 'Валюты и курсы';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(nameHomeCurrencyDeclaration);
                    ADD PROPERTY(roundDeclaration);
                    ADD PROPERTY(nameTypeExchangeDeclaration);
                    ADD PROPERTY(nameCurrencyDeclaration);
                    ADD PROPERTY(rateExchangeDeclaration);
                    ADD PROPERTY(nameCurrencyCustomsZoneDeclaration);
                    ADD PROPERTY(rateExchangeCustomsZoneDeclaration);
                }
            }
        }
    }
    ADD functions.box;
}

FORM declarations 'Таможенные декларации'
    OBJECTS d = Declaration
    PROPERTIES(d) READONLY numberObject, seriesObject, dateDeclaration, timeDeclaration, nameLegalEntityDeclaration,
                  nameHomeCurrencyDeclaration, nameCurrencyDeclaration, rateExchangeDeclaration,
                  nameCurrencyCustomsZoneDeclaration, rateExchangeCustomsZoneDeclaration, objectClassName
    PROPERTIES(d) ADDFORM, EDITFORM, DELETE
;

FORM declarationsDialog 'Таможенные декларация'
    OBJECTS d = Declaration
    PROPERTIES(d) READONLY numberObject, seriesObject, dateDeclaration, timeDeclaration, nameLegalEntityDeclaration, nameCurrencyDeclaration,
                  nameHomeCurrencyDeclaration, nameTypeExchangeDeclaration, rateExchangeDeclaration, objectClassName

    DIALOG Declaration OBJECT d
;

NAVIGATOR {
    customsDocuments {
        ADD declarations;
    }
}