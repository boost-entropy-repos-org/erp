MODULE EmployeeLegalEntity;

REQUIRE Employee, LegalEntity;

TABLE legalEntityEmployee (LegalEntity, Employee);
TABLE legalEntityGroupEmployee(LegalEntityGroup, Employee);

//--  Компания
dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (LegalEntity, Employee);
dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (LegalEntityGroup, Employee);

levelParentCompany (employee, legalEntityGroup) = GROUP MIN level(LegalEntityGroup legalEntityGroup, LegalEntityGroup parent) IF dataAccessCompany(parent, Employee employee)
                                                               BY employee, legalEntityGroup PERSISTENT;
nearestParentCompany (Employee employee, LegalEntityGroup legalEntityGroup) = legalEntityGroup(legalEntityGroup, levelParentCompany(employee, legalEntityGroup));
nearestInCompany (Employee employee, LegalEntityGroup legalEntityGroup) =
    dataAccessCompany(nearestParentCompany (employee, legalEntityGroup), employee);

accessCompany 'Доступ разрешен (компания)' (Employee employee, LegalEntityGroup legalEntityGroup) = OVERRIDE
    employee IS Employee AND legalEntityGroup IS LegalEntityGroup AND NOT limitAccess(employee),
    nearestInCompany(employee, legalEntityGroup),
    dataAccessCompany(legalEntityGroup, employee); // PERSISTENT;

accessCompany 'Доступ разрешен (компания)' (Employee employee, LegalEntity legalEntity) = OVERRIDE
    employee IS Employee AND isCompany(legalEntity) AND NOT limitAccess(employee),
    nearestInCompany(employee, legalEntityGroup(legalEntity)) AND isCompany(legalEntity),
    dataAccessCompany(legalEntity, employee) PERSISTENT;

countAccessCompany 'Кол-во доступных подразделений (компания)' (employee, legalEntityGroup) =
    GROUP SUM 1 IF accessCompany(Employee employee, LegalEntity legalEntity)
                AND isParent(legalEntityGroup(legalEntity), LegalEntityGroup legalEntityGroup)
          BY employee, legalEntityGroup PERSISTENT;
          
// todo : Удалить потом
//-- Поставщик
dataAccessSupplier 'Доступ разрешен (поставщик)' = DATA BOOLEAN (LegalEntity, Employee);
dataAccessSupplier 'Доступ разрешен (поставщик)' = DATA BOOLEAN (LegalEntityGroup, Employee);
//--  Покупатель
dataAccessCustomer 'Доступ разрешен (покупатель)' = DATA BOOLEAN (LegalEntity, Employee);
dataAccessCustomer 'Доступ разрешен (покупатель)' = DATA BOOLEAN (LegalEntityGroup, Employee);

legalEntity = DATA LegalEntity (Employee);
nameLegalEntity 'Организация' (Employee e) = name(legalEntity(e));

overCopy(Employee e,Employee employee) += ACTION {
    legalEntity(e) <- legalEntity(employee);    
    dataAccessCompany(LegalEntity l,e) <- dataAccessCompany(l,employee) WHERE dataAccessCompany(l,employee);
    dataAccessCompany(LegalEntityGroup lg,e) <- dataAccessCompany(lg,employee) WHERE dataAccessCompany(lg,employee);
    
    dataAccessSupplier(LegalEntity l,e) <- dataAccessSupplier(l,employee) WHERE dataAccessSupplier(l,employee);
    dataAccessSupplier(LegalEntityGroup lg,e) <- dataAccessSupplier(lg,employee) WHERE dataAccessSupplier(lg,employee);
    
    dataAccessCustomer(LegalEntity l,e) <- dataAccessCustomer(l,employee) WHERE dataAccessCustomer(l,employee);
    dataAccessCustomer(LegalEntityGroup lg,e) <- dataAccessCustomer(lg,employee) WHERE dataAccessCustomer(lg,employee);
    
};
EXTEND FORM employee
    PROPERTIES(e) nameLegalEntity
    TREE legalEntityTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY  SHOWIF limitAccess(e) lgTreeName = name(lg)
    ORDER BY lgTreeName
    PROPERTIES(e,lg) SHOWIF limitAccess(e) accessCompany

    OBJECTS l = LegalEntity FIXED GRID
    PROPERTIES(l) READONLY id SHOWIF showLimitAccess(e), legalEntityName = name SHOWIF limitAccess(e)
    ORDER BY legalEntityName
    FILTERS isParent(lg, l) OR (l IS LegalEntity AND NOT lg)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    PROPERTIES(e,l) SHOWIF limitAccess(e) accessCompany
;
DESIGN employee {
    personal {
        MOVE PROPERTY(nameLegalEntity(e)) AFTER PROPERTY(firstName(e));
    }
    pane {
        NEW legalEntityContainer {
            caption = 'Организации';
            type = SPLITH;
            MOVE legalEntityTree.tree.box {
                caption = 'Группы организаций';
                PROPERTY (accessCompany(e,lg)) {minimumWidth = 100; }
            }
            MOVE l.box {
                l.grid {
                    PROPERTY (accessCompany(e,l)) {minimumWidth = 100; }
                }
            }
        }
    }
}

EXTEND FORM  legalEntity
    OBJECTS e = Employee
    PROPERTIES(e) READONLY name[Contact], objectClassName
    PROPERTIES(e) NEWEDIT, EDIT, DELETE TOOLBAR
    
    FILTERS  legalEntity(e) == l
;
DESIGN  legalEntity {
    extendContainer {
        MOVE e.box;
    }
}
// ------------------------------------ Доступные организации для пользователей -------------------------- //

countAccessCompany (employee) = GROUP SUM 1 IF isCompany(LegalEntity legalEntity) AND accessCompany(Employee employee, legalEntity)
                                              BY employee;

defaultCompany 'Компания по умолчанию' (employee)= GROUP MIN LegalEntity legalEntity IF isCompany(legalEntity) AND accessCompany(Employee employee, legalEntity)
                                                                 BY employee;

// Для документа, у которого задана организация
META extendFormFilterAccessLegalEntity(object, concrete, form, organizationProp, filter)
    EXTEND FORM form FILTERS access###filter[Employee,LegalEntity](currentUser[](),organizationProp[###object](concrete)) OR NOT organizationProp[###object](concrete);
END
// Когда организация идет объектом
META extendFormFilterLegalEntityAccess(concrete, form, filter)
    EXTEND FORM form FILTERS access###filter(currentUser(), concrete);
END
META extendFormFilterLegalEntityAccess(concrete, form) // по умолчанию для компании
    @extendFormFilterLegalEntityAccess(concrete, form, company);
END
// Для группы организаций
META extendFormFilterLegalEntityGroupAccess(concrete, form, filter)
    EXTEND FORM form FILTERS countAccess###filter(currentUser(), concrete);
END
META extendFormFilterLegalEntityGroupAccess(concrete, form) // по умолчанию для компании
    @extendFormFilterLegalEntityGroupAccess(concrete, form, company);
END

// ----------------------------- Автоматическое проставление организаций и складов --------------------------------------- //

META defineDocumentLegalEntityAccess(objectClass, prefix, filter)
    prefix(objectClass o) <- default###filter(currentUser()) IF countAccess###filter (currentUser()) == 1
                                           WHEN SET(o IS objectClass);
END

// ----------------------------- Проставляем фильтры на формы --------------------------------------- //

@extendFormFilterLegalEntityGroupAccess(lg, companyLegalEntities, company);
@extendFormFilterLegalEntityAccess(l, companyLegalEntities, company);