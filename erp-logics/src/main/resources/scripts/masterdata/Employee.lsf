MODULE Employee;

REQUIRE System, Authentication, MasterData, Security, Email, Hierarchy, Utils, Integration;

// ------------------------------------- Должности -------------------------------------- //
CLASS Position 'Должность';
TABLE position(Position);

@defineExternalizable(position, STRING[100]);

namePosition 'Наименование' = DATA ISTRING[100](Position);

positionEmployee(employee) = DATA Position (Employee);

FORM position 'Должность'
    OBJECTS of=Position FIXED PANEL
    PROPERTIES(of) namePosition
    EDIT Position OBJECT of
;

FORM positions 'Должность'
    OBJECTS of=Position
    PROPERTIES(of) READONLY namePosition, idPosition SHOWIF showIDs()
    PROPERTIES(of) ADDFORM, EDITFORM, DELETE
    DIALOG Position OBJECT of
;

// ------------------------------------- Доступ ------------------------------------------ //

CLASS ABSTRACT EmployeeDivisionGroup 'Группа подразделений';
TABLE employeeDivisionGroup (EmployeeDivisionGroup);

nameEmployeeDivisionGroup 'Наименование' = ABSTRACT ISTRING[150](EmployeeDivisionGroup);

TABLE employeeDivisionGroupEmployeeDivisionGroup(EmployeeDivisionGroup, EmployeeDivisionGroup);
@defineHierarchyAbstract(employeeDivisionGroup, EmployeeDivisionGroup);

CLASS ABSTRACT EmployeeDivision 'Подразделение';
TABLE employeeDivision(EmployeeDivision);

nameEmployeeDivision 'Наименование' = ABSTRACT ISTRING[150](EmployeeDivision);

employeeDivisionGroupEmployeeDivision = ABSTRACT EmployeeDivisionGroup (EmployeeDivision) PERSISTENT;

TABLE employeeDivisionGroupEmployeeDivision(EmployeeDivisionGroup, EmployeeDivision);
isParentEmployeeDivisionGroupEmployeeDivision (employeeDivisionGroup, employeeDivision) = isParentEmployeeDivisionGroupEmployeeDivisionGroup(employeeDivisionGroupEmployeeDivision(employeeDivision), employeeDivisionGroup) PERSISTENT;

// ------------------------------------- Сотрудники -------------------------------------- //

CLASS Employee 'Сотрудник' : CustomUser;
TABLE employee(Employee);

@defineExternalizable(employee, STRING[100]);

namePositionEmployee 'Должность сотрудника' (employee) = namePosition(positionEmployee(employee)) IN base MINCHARWIDTH 15 PREFCHARWIDTH 15;

positionNameEmployee 'Должность ФИО' (employee) = [FORMULA STRING[40] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT)']
                                                         (namePositionEmployee(employee), nameContact(employee));

limitAccessEmployee 'Ограничить доступ' = DATA BOOLEAN (Employee);

TABLE employeeDivisionEmployee (EmployeeDivision, Employee);
inEmployeeDivisionEmployee 'Сотрудник подразделения' = DATA BOOLEAN (EmployeeDivision, Employee);

dataAccessEmployeeDivisionEmployee 'Доступ разрешен' = DATA BOOLEAN (EmployeeDivision, Employee);

TABLE employeeDivisionGroupEmployee(EmployeeDivisionGroup, Employee);
dataAccessEmployeeDivisionGroupEmployee 'Доступ разрешен' = DATA BOOLEAN (EmployeeDivisionGroup, Employee);

levelParentEmployeeEmployeeDivisionGroup (employee, employeeDivisionGroup) = GROUP MIN levelEmployeeDivisionGroupEmployeeDivisionGroup(employeeDivisionGroup, parent) IF dataAccessEmployeeDivisionGroupEmployee(parent, employee)
                                                               BY employee, employeeDivisionGroup PERSISTENT;
nearestParentEmployeeDivisionGroup (employee, employeeDivisionGroup) = employeeDivisionGroupEmployeeDivisionGroupLevel(employeeDivisionGroup, levelParentEmployeeEmployeeDivisionGroup(employee, employeeDivisionGroup));
nearestInEmployeeEmployeeDivisionGroup (employee, employeeDivisionGroup) =
    dataAccessEmployeeDivisionGroupEmployee(nearestParentEmployeeDivisionGroup (employee, employeeDivisionGroup), employee);


accessEmployeeEmployeeDivisionGroup 'Доступ разрешен' (employee, employeeDivisionGroup) = OVERRIDE
    employee IS Employee AND employeeDivisionGroup IS EmployeeDivisionGroup AND NOT limitAccessEmployee(employee),
    nearestInEmployeeEmployeeDivisionGroup(employee, employeeDivisionGroup),
    dataAccessEmployeeDivisionGroupEmployee(employeeDivisionGroup, employee); // PERSISTENT;

accessEmployeeEmployeeDivision 'Доступ разрешен' (employee, employeeDivision) = OVERRIDE
    employee IS Employee AND employeeDivision IS EmployeeDivision AND NOT limitAccessEmployee(employee),
    nearestInEmployeeEmployeeDivisionGroup(employee, employeeDivisionGroupEmployeeDivision(employeeDivision)),
    dataAccessEmployeeDivisionEmployee(employeeDivision, employee); // PERSISTENT;

countAccessEmployeeEmployeeDivisionGroup 'Кол-во доступных подразделений' (employee, employeeDivisionGroup) =
    GROUP SUM 1 IF accessEmployeeEmployeeDivision(employee, employeeDivision)
                AND isParentEmployeeDivisionGroupEmployeeDivisionGroup(employeeDivisionGroupEmployeeDivision(employeeDivision), employeeDivisionGroup)
          BY employee, employeeDivisionGroup PERSISTENT;

FORM employee 'Сотрудник'
    OBJECTS e=Employee FIXED PANEL
    PROPERTIES(e)      firstNameContact, lastNameContact, idEmployee SHOWIF showIDs(), namePositionEmployee,
                       loginCustomUser, passwordCustomUser, emailContact, nameMainRoleUser, limitAccessEmployee

    TREE treeEmployeeDivision a=STRING[3], dg = EmployeeDivisionGroup PARENT parentEmployeeDivisionGroup
    PROPERTIES READONLY  OBJVALUE(a), dgTreeName = nameEmployeeDivisionGroup(dg)
    FILTERS stringEqualsAll(a)
    PROPERTIES(e, dg) accessEmployeeEmployeeDivisionGroup

    OBJECTS           d=EmployeeDivision
    PROPERTIES(d)     READONLY nameEmployeeDivision
    PROPERTIES(d, e)  inEmployeeDivisionEmployee
    PROPERTIES(e, d)  accessEmployeeEmployeeDivision

    FILTERS (d IS EmployeeDivision AND NOT dg IS EmployeeDivisionGroup) OR isParentEmployeeDivisionGroupEmployeeDivision(dg, d)

    FILTERGROUP filters
            FILTER 'Склады с доступом' 'F10' accessEmployeeEmployeeDivision(e, d)
    EDIT Employee OBJECT e
;

DESIGN employee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        childConstraints = TO THE BOTTOM;
        NEW oneCase BEFORE treeEmployeeDivision.tree.box {
            caption = 'Сотрудник';
            childConstraints = TO THE RIGHT;
            NEW twoCase {
                caption = 'Личные данные';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(firstNameContact(e));
                ADD PROPERTY(lastNameContact(e));
                ADD PROPERTY(idEmployee(e));
                ADD PROPERTY(namePositionEmployee(e));
            };
            NEW threeCase {
                caption = 'Данные пользователя';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(loginCustomUser(e));
                ADD PROPERTY(passwordCustomUser(e));
                ADD PROPERTY(emailContact(e));
                ADD PROPERTY(nameMainRoleUser(e));
            };
            NEW row {
                caption = 'Доступ';
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(limitAccessEmployee);
            }

        }
        NEW treeCase{
            childConstraints = TO THE RIGHT;
            ADD treeEmployeeDivision.tree.box;
            ADD d.box;
        }
        ADD functions.box;
    }
}

FORM employees 'Сотрудники'
    OBJECTS e=Employee
    PROPERTIES(e) READONLY firstNameContact, lastNameContact, idEmployee SHOWIF showIDs(), namePositionEmployee
    PROPERTIES(e) ADDFORM, EDITFORM, DELETE

    OBJECTS d=EmployeeDivision
    PROPERTIES READONLY nameD=nameEmployeeDivision(d)
    FILTERS inEmployeeDivisionEmployee(d, e)

    OBJECTS dd=EmployeeDivision
    PROPERTIES READONLY nameDD=nameEmployeeDivision(dd)
    FILTERS accessEmployeeEmployeeDivision(e,dd)

;

DESIGN employees FROM DEFAULT {

    NEW topContainer{
        childConstraints = TO THE BOTTOM;
        ADD e.box;
        NEW row {
            type = TABBED;
            ADD d.box { caption = 'Сотрудник отдела';};
            ADD dd.box { caption = 'Доступ';};
        }
    }
    ADD functions.box;
}

FORM employeeDialog 'Сотрудники'
    OBJECTS e=Employee
    PROPERTIES(e) READONLY firstNameContact, lastNameContact, namePositionEmployee
    PROPERTIES(e) ADDFORM, EDITFORM

    DIALOG Employee OBJECT e
;

NAVIGATOR {
    masterData {
        ADD employees BEFORE regionalData;
    }
}

// ----------------------------------- Комиссии ---------------------------------------------------------- //

META defineCommitteeEmployee (committee, prefix, caption)
    prefix##Committee = DATA Employee (###committee);
    name###prefix##Committee caption (committee) = nameContact(prefix##Committee(committee)) IN recognize;
    namePosition###prefix##Committee caption (committee) = namePositionEmployee(prefix##Committee(committee));
    CONSTRAINT prefix##Committee(committee) AND NOT countDivisionEmployeeCommittee(prefix##Committee(committee), committee)
        CHECKED BY prefix##Committee MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

META defineCommitteeEmployeePrefix (committee, prefix, caption)
    prefix###committee = DATA Employee (###committee);
    name###prefix###committee caption (committee) = nameContact(prefix###committee(committee)) IN recognize;
    namePosition###prefix###committee caption (committee) = namePositionEmployee(prefix###committee(committee));
    CONSTRAINT prefix###committee(committee) AND NOT countDivisionEmployeeCommittee(prefix###committee(committee), committee)
        CHECKED BY prefix###committee MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

CLASS ABSTRACT Committee 'Комиссия';
TABLE committee (Committee);

nameCommittee 'Наименование' = ABSTRACT ISTRING[150](Committee);

TABLE committeeEmployee (Committee, Employee);
inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (Committee, Employee);

TABLE committeeEmployeeDivision (Committee, EmployeeDivision);
inCommitteeEmployeeDivision 'Вкл.' (committee, employeeDivision) = DATA BOOLEAN (Committee, EmployeeDivision);

inEmployeeDivisionEmployeeCommittee(employeeDivision, employee, committee) = inCommitteeEmployeeDivision(committee, employeeDivision) AND inEmployeeDivisionEmployee(employeeDivision, employee);

countDivisionEmployeeCommittee (employee, committee) = GROUP SUM 1 IF inEmployeeDivisionEmployeeCommittee(employeeDivision, employee, committee) BY employee, committee;
CONSTRAINT inCommitteeEmployee(committee, employee) AND NOT countDivisionEmployeeCommittee(employee, committee)
    CHECKED MESSAGE 'Член комиссии не входит в выбранные подразделения';

@defineCommitteeEmployee(committee, chairman, 'Председатель');

namePositionEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT positionNameEmployee(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT nameContact(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeDivisionCommittee 'Подразделения' (committee) =
     GROUP CONCAT nameEmployeeDivision(employeeDivision) IF inCommitteeEmployeeDivision(committee, employeeDivision), ', '
     BY committee
     ORDER employeeDivision
     MINCHARWIDTH 50 PREFCHARWIDTH 50;
