MODULE LegalEntity;

REQUIRE System, MasterData, Historizable, Tax, Country, I18n, Employee, Numerator;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {
        NEW legalEntity {
            caption = 'Организации';
        }
    }
}

// ----------------------------------- Форма собственности ------------------------------------------ //

CLASS Ownership 'Форма собственности';
TABLE ownership (Ownership);

name 'Наименование' = DATA VARISTRING[100](Ownership);

shortName 'Cокращенное название' = DATA STRING[10] (Ownership) IN base FIXEDCHARWIDTH 6;
ownershipShortName (string) = GROUP NAGGR Ownership ownership BY shortName (ownership) WHERE ownership IS Ownership;

country = DATA Country (Ownership);
nameCountry 'Страна' (Ownership ownership) = name(country(ownership)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;

FORM ownership 'Форма собственности'
    OBJECTS o = Ownership PANEL
    PROPERTIES(o) name, shortName, nameCountry

    EDIT Ownership OBJECT o
;

FORM ownerships 'Формы собственности'
    OBJECTS o = Ownership
    PROPERTIES(o) READONLY name, shortName, nameCountry
    PROPERTIES(o)          NEWSESSION NEW, EDIT, DELETE 

    LIST Ownership OBJECT o
;

// ----------------------------------- Юридическое лицо --------------------------------- //

CLASS LegalEntity 'Организация' : TaxUnitGroup;
TABLE legalEntity (LegalEntity);
TABLE legalEntityDate (LegalEntity, DATE);

@defineExternalizable(legalEntity, VARSTRING[100]);

@defineNumeratedID(LegalEntity, 'Организации');

name 'Наименование' = DATA VARISTRING[150](LegalEntity) IN recognize INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 30;

name(LegalEntity group) += name(group) IF group IS LegalEntity;

country = DATA Country(LegalEntity);
nameCountry 'Страна' (LegalEntity legalEntity) = name(country(legalEntity)) MINCHARWIDTH 10 PREFCHARWIDTH 15 MAXCHARWIDTH 20;
country(LegalEntity l) <- defaultCountry() WHEN SET(l IS LegalEntity);

currency = DATA Currency(LegalEntity);
nameCurrency 'Базовая валюта' (LegalEntity legalEntity) = name(currency(legalEntity)) MINCHARWIDTH 10 PREFCHARWIDTH 10 MAXCHARWIDTH 15;
currency(LegalEntity legalEntity) <- currency(country(legalEntity)) WHEN CHANGED(country(legalEntity));

language = DATA Language(LegalEntity);
nameLanguage 'Язык' (LegalEntity legalEntity) = name(language(legalEntity)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 15;
language(LegalEntity legalEntity) <- language(country(legalEntity)) WHEN CHANGED(country(legalEntity));

GROUP law 'Реквизиты' : public;

ownership = DATA Ownership (LegalEntity);
nameOwnership 'Форма собственности' = name(ownership(LegalEntity legalEntity)) IN law;
shortNameOwnership 'Форма собственности (сокр.)' = shortName(ownership(LegalEntity legalEntity)) IN law;

CONSTRAINT country(ownership(LegalEntity legalEntity)) != country(legalEntity)
    CHECKED BY ownership[LegalEntity] MESSAGE 'Страна формы собственности должна совпадать со страной организации';

fullName 'Полное наименование' = DATA VARISTRING[200] (LegalEntity) IN law MINCHARWIDTH 50 PREFCHARWIDTH 50;

setFullName 'Заполнить из наименования' (LegalEntity l) = {
    fullName(l) <- CONCAT ' ', nameOwnership(l), name(l);
}

notCalcServiceStatus 'Не заполнять статус качества сервиса' = DATA BOOLEAN(LegalEntity);

@defineHistorizable(address, , 'Юридический адрес', VARSTRING[150], legalEntity, nameLegalEntity, law);
@defineHistorizable(postAddress, , 'Почтовый адрес', VARSTRING[150], legalEntity, nameLegalEntity, law);

GROUP contact 'Контактная информация' : public;

@defineHistorizable(phone, , 'Телефон/факс', VARSTRING[100], legalEntity, nameLegalEntity, contact);
email 'E-mail' = DATA VARSTRING[400] (LegalEntity) IN contact MINCHARWIDTH 50 PREFCHARWIDTH 50;
site 'Сайт' = DATA VARSTRING[100] (LegalEntity) IN contact MINCHARWIDTH 50 PREFCHARWIDTH 50;
contacts 'Контактные лица' = DATA VARSTRING[300] (LegalEntity) IN contact MINCHARWIDTH 50 PREFCHARWIDTH 50;

GROUP management 'Управление' : public;

@defineHistorizableCustom(chief, 'Руководитель', Employee, name, customUser, legalEntity, nameLegalEntity, management );

@defineHistorizableCustom(booker, 'Главный бухгалтер', Employee, name, customUser, legalEntity, nameLegalEntity, management );

// Должность ФИО
positionNameManager 'Руководитель' (LegalEntity legalEntity) = positionName(chief(legalEntity)) IN management; 
positionNameAccountant 'Главный бухгалтер' (LegalEntity legalEntity) = positionName(booker(legalEntity)) IN management;

GROUP doc 'Для договора' : public;
GROUP order 'Для заказов' : public;

// Неактивный
inactive 'Неактивная' = DATA BOOLEAN (LegalEntity);
active 'Активная' (LegalEntity l) = l IS LegalEntity AND NOT inactive(l);

// ----------------------------------- Группы юридический лиц ---------------------------- //

CLASS LegalEntityGroup 'Группа организаций' ;
TABLE legalEntityGroup(LegalEntityGroup);

@defineExternalizable(legalEntityGroup, VARSTRING[100]);
name 'Наименование' = DATA VARISTRING[100](LegalEntityGroup);
legalEntityGroup (legalEntity) = DATA LegalEntityGroup (LegalEntity) MATERIALIZED INDEXED AUTOSET;
nameLegalEntityGroup 'Группа организаций' (LegalEntity legalEntity) = name(legalEntityGroup(legalEntity));

TABLE legalEntityGroupLegalEntityGroup(LegalEntityGroup, LegalEntityGroup);
@defineHierarchy(legalEntityGroup);

FORM legalEntityGroup 'Группа организаций'

    OBJECTS l = LegalEntityGroup PANEL
    PROPERTIES(l) name, nameParent, id SHOWIF showIDs()

    EDIT LegalEntityGroup OBJECT l
;

FORM legalEntityGroups 'Группы организаций'

    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY lgTreeName = name(lg)
    ORDER lgTreeName

    LIST LegalEntityGroup OBJECT lg
;

// ----------------------------------- Лицензия ------------------------------------------ //
GROUP license 'Лицензионная информация' : base;
CLASS License 'Лицензия';
TABLE license (License);

number 'Номер лицензии' = DATA VARSTRING[100] (License) IN license;
dateFrom 'Действует с ' = DATA DATE (License) IN license;
dateTo 'Действует по ' = DATA DATE (License) IN license;

description(License license) = VARSTRING[150]( CONCAT '; ', '№ '+number(license),
                                                           'с '+ dateFrom(license),
                                                           'по '+ dateTo(license));

country = DATA Country (License);
nameCountry 'Страна' = name(country(License license));

legalEntity 'ЮЛ (ИД)' = DATA LegalEntity (License);

license 'Действующая на дату' (legalEntity, date) = GROUP MAX License license IF dateFrom(license) <= DATE date AND NOT dateTo(license) < date
                                                                         BY legalEntity(license), date;
currentLicense 'Действующая' (LegalEntity legalEntity) = license(legalEntity, currentDate());
numberCurrentLicense 'Действующая лицензия' (LegalEntity legalEntity) = number(currentLicense(legalEntity)) IN law;

CONSTRAINT country(legalEntity(License license)) != country(license)
    CHECKED BY legalEntity[License] MESSAGE 'Страна лицензии должна совпадать со страной организации';

// ------------------------------------ Собственные компании ----------------------------- //
GROUP filterEntity 'Фильтры' : public;

isSupplier 'Явл. поставщиком' = DATA BOOLEAN (LegalEntity) IN filterEntity;
isCompany 'Явл. компанией' = DATA BOOLEAN (LegalEntity) IN filterEntity;
isCustomer 'Явл. покупателем' = DATA BOOLEAN (LegalEntity) IN filterEntity;
isSeller 'Поставщик или компания' (LegalEntity legalEntity) = isSupplier(legalEntity) OR isCompany(legalEntity);
isBuyer 'Покупатель или компания' (LegalEntity legalEntity) = isCustomer(legalEntity) OR isCompany(legalEntity);

defaultCompany = GROUP MIN LegalEntity legalEntity IF isCompany(legalEntity);

differentStocksInDetails 'Разные склады в строках' = DATA BOOLEAN (LegalEntity) IN filterEntity;

needSignLegalEntity 'У организации должен быть задан обязательно минимум один из трех признаков (компания, поставщик или покупатель)' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() needSignLegalEntity
;
DESIGN options {
    legalEntity {
        MOVE PROPERTY(needSignLegalEntity());
    }
}

CONSTRAINT needSignLegalEntity() IF LegalEntity l IS LegalEntity AND NOT (isSupplier(l) OR isCompany(l) OR isCustomer(l))
    MESSAGE 'У организации должен быть задан обязательно минимум один из трех признаков (компания, поставщик или покупатель)';

// ------------------------------------ Доступные организации для пользователей -------------------------- //

toShow = ABSTRACT BOOLEAN (LegalEntity);
toShowUNP = ABSTRACT BOOLEAN (LegalEntity);

toShowIndividual = ABSTRACT BOOLEAN (LegalEntity);
toShowForeign = ABSTRACT BOOLEAN (LegalEntity);

toShow(LegalEntity legalEntity) += legalEntity IS LegalEntity AND NOT toShowIndividual(legalEntity);
toShowUNP(LegalEntity legalEntity) += legalEntity IS LegalEntity AND NOT toShowForeign(legalEntity);

isParent (LegalEntityGroup lg,LegalEntity l) = isParent(legalEntityGroup(l), lg);


// ------------------------------------ объединение организаций -------------------------- //

in 'Отм.' = DATA LOCAL BOOLEAN (LegalEntity);
countInLegalEntity = GROUP SUM 1 IF in(LegalEntity legalEntity);

FORM confirmReplaceLegalEntity 'Объединяемые организации'
    OBJECTS legalEntity = LegalEntity PANEL 

    OBJECTS l = LegalEntity  
    PROPERTIES(l) READONLY name, address, phone
    FILTERS l==legalEntity

    OBJECTS l2 = LegalEntity
    PROPERTIES(l2) in
    PROPERTIES(l2) READONLY name, address, phone
    FILTERS in(l2)
;

DESIGN confirmReplaceLegalEntity {
    REMOVE BOX(legalEntity);
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        MOVE BOX(l){
            caption = 'Основная организация';
        }
        MOVE BOX(l2){
            caption = 'Удаляемая организация';
        }           
    }
    MOVE TOOLBARBOX;
}

replace = ABSTRACT LIST (LegalEntity, LegalEntity);
preReplace = ABSTRACT LIST (LegalEntity, LegalEntity);

replace 'Объединить'(LegalEntity legalEntity) = {
    setNoEventsInTransaction();
    
    DIALOG confirmReplaceLegalEntity OBJECTS l=legalEntity DO {
        FOR in(LegalEntity l) AND legalEntity IS LegalEntity AND NOT isCompany(l) AND NOT isCompany(legalEntity)DO {
            IF l != legalEntity THEN {
                preReplace(l, legalEntity);            
                replace(l, legalEntity);
                in(l) <- NULL;
                DELETE l;            
            } ELSE {
                MESSAGE 'Выделенная организации не может совпадать с объединяемой и не должна являться собственной компанией';
            }
        }
        apply();
    }
    
    in(LegalEntity l) <- NULL;           
    
    dropNoEventsInTransaction();
} CONFIRM;

// ---------------------------------------- Формы для ввода компаний ------------------------------------- //

FORM legalEntity 'Организация'
    OBJECTS l=LegalEntity PANEL
    PROPERTIES(l)  name, nameLegalEntityGroup, nameOwnership, shortNameOwnership,
                   nameCountry, nameLanguage, nameCurrency, inactive
    PROPERTIES(l)  SHOWIF toShow(l) fullName ON CONTEXTMENU setFullName(l),
                   address, postAddress, nameCustomUserChief, nameCustomUserBooker, phone,
                   email, site, contacts
    PROPERTIES(l)  isSupplier, isCompany, isCustomer, id SHOWIF showIDs()
    PROPERTIES(l)  differentStocksInDetails SHOWIF isCompany(l)

    OBJECTS li=License GRID
    PROPERTIES(li) SHOWIF toShow(l) number, dateFrom, dateTo, NEW, DELETE GRID
    FILTERS legalEntity(li) == l
    
    EDIT LegalEntity OBJECT l
;

DESIGN legalEntity {
    BOX {
        preferredSize = (1024, 768);
        BOX(l) {
            type = CONTAINERH;
            
            NEW column1 {
                type = CONTAINERV;
                
                NEW row11 {
                    type = COLUMNS;
                    columns = 2;
                    MOVE PROPERTY(name(l));
                    MOVE PROPERTY(nameLegalEntityGroup(l));
                    MOVE PROPERTY(nameOwnership(l));
                    MOVE PROPERTY(shortNameOwnership(l));
                    MOVE PROPERTY(id(l));
                    MOVE PROPERTY(inactive(l));
                }
                NEW regionContainer {
                    type = CONTAINERH;
                    caption = 'Региональные настройки';
                    MOVE PROPERTY(nameCountry(l));
                    MOVE PROPERTY(nameCurrency(l));
                    MOVE PROPERTY(nameLanguage(l));
                }
                NEW row12 {
                    type = COLUMNS;
                    columns = 2;
                    MOVE GROUP(law,l) {
                        columns = 1;
                    }   
                    MOVE GROUP(filterEntity,l) {
                        columns = 1;
                    }
                }
            }
            
            NEW column2 {
                type = CONTAINERV;
                
                MOVE GROUP(contact,l) {
                    columns = 1;
                }
                MOVE GROUP(management,l) {
                    columns = 1;
                }
            }
        }
        
        NEW extendContainer BEFORE TOOLBARBOX {
            type = TABBED;
            fill = 1;
            MOVE BOX(li);
        }
    }
}

FORM dialogLegalEntities 'Организации'

    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY lgTreeName = name(lg)

    OBJECTS l=LegalEntity
    PROPERTIES(l) in
    PROPERTIES(l) READONLY nameL = name, id SHOWIF showIDs(), fullName, shortNameOwnership,
                                          nameLegalEntityGroup
    PROPERTIES(l) READONLY address, phone, email
    PROPERTIES(l) READONLY isSupplier, isCompany, isCustomer
    ORDER nameL
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT    
    FILTERS isParent(legalEntityGroup(l), lg) OR
            l IS LegalEntity AND NOT lg IS LegalEntityGroup OR
            l IS LegalEntity AND lg IS LegalEntityGroup AND NOT legalEntityGroup(l)

    LIST LegalEntity OBJECT l
;

DESIGN dialogLegalEntities {
    BOX {
        preferredSize = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            
            MOVE BOX(TREE legalEntityGroupTree){
                caption = 'Группы организаций';
            }
            MOVE BOX(l) {
                fill = 3;
                GRID(l) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

copy 'Копировать' (LegalEntity l) = {
    NEWSESSION {
        NEW newL = LegalEntity {
            name(newL) <- name(l);
            legalEntityGroup(newL) <- legalEntityGroup(l);
            ownership(newL) <- ownership(l);
            country(newL) <- country(l);
            language(newL) <- language(l);
            currency(newL) <- currency(l);
            inactive(newL) <- inactive(l);
            fullName(newL) <- fullName(l);
            dataAddress(newL, DATE d) <- dataAddress(l, d);
            dataPostAddress(newL, DATE d) <- dataPostAddress(l, d);
//            dataChief(newL, DATE d) <- dataChief(l, d);
//            dataBooker(newL, DATE d) <-  dataBooker(l, d);
//            dataPhone(newL, DATE d) <- dataPhone(l, d);
//            email(newL) <-  email(l);
//            site(newL) <- site(l);
//            contacts(newL) <- contacts(l);
            isSupplier(newL) <- isSupplier(l);
            isCompany(newL) <- isCompany(l);
            isCustomer(newL) <- isCustomer(l);
//            differentStocksInDetails(newL) <- differentStocksInDetails(l);

            FOR legalEntity(License ls) == l NEW newLs = License DO {
                legalEntity(newLs) <- newL;
                number(newLs) <- number(ls);
                dateFrom(newLs) <- dateFrom(ls);                
                dateTo(newLs) <- dateTo(ls);                
            }
            
            SHOW legalEntity OBJECTS l = newL DOCKED;
        }
    }
}

FORM legalEntities 'Организации'

    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY lgTreeName = name(lg)
    PROPERTIES(lg) NEWSESSION NEW, EDIT, deletelg=DELETE 

    OBJECTS l=LegalEntity
    PROPERTIES(l) in
    PROPERTIES(l) READONLYIF isReadonly() nameL = name, id SHOWIF showIDs(), fullName, shortNameOwnership,
                                          nameLegalEntityGroup
    PROPERTIES(l) READONLYIF isReadonly() address, phone, email
    PROPERTIES(l) READONLYIF isReadonly() isSupplier, isCompany, isCustomer
    PROPERTIES(l) NEWSESSION TOOLBAR NEW, EDIT, deletel=DELETE , replace , copy  
    ORDER nameL
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT    
    FILTERS isParent(legalEntityGroup(l), lg) OR
            l IS LegalEntity AND NOT lg IS LegalEntityGroup OR
            l IS LegalEntity AND lg IS LegalEntityGroup AND NOT legalEntityGroup(l)
;

DESIGN legalEntities {
    BOX {
        preferredSize = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            
            MOVE BOX(TREE legalEntityGroupTree){
                caption = 'Группы организаций';
            }
            MOVE BOX(l) {
                fill = 3;
                GRID(l) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormEditable (legalEntities);
FORM companyLegalEntities 'Организации'

    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY lgTreeName = name(lg)

    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY nameL = name, id SHOWIF showIDs(), fullName, shortNameOwnership,
                           nameLegalEntityGroup
    PROPERTIES(l) READONLY address, phone
    PROPERTIES(l) READONLY isSupplier, isCompany, isCustomer
    ORDER nameL
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    FILTERS isParent(legalEntityGroup(l), lg) OR
            l IS LegalEntity AND NOT lg IS LegalEntityGroup OR
            l IS LegalEntity AND lg IS LegalEntityGroup AND NOT legalEntityGroup(l)
    FILTERS isCompany(l)
;

DESIGN companyLegalEntities {
    BOX {
        preferredSize = (1024, 768);
        NEW topContainer{
            type = SPLITH;
            fill = 1;

            MOVE BOX(TREE legalEntityGroupTree);
            MOVE BOX(l) {
                fill = 3;
                GRID(l) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM supplierLegalEntities 'Организации'

    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY lgTreeName = name(lg)

    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLYIF isReadonly() nameL = name, id SHOWIF showIDs(), fullName, shortNameOwnership,
                                          nameLegalEntityGroup
    PROPERTIES(l) READONLY                address, phone
    PROPERTIES(l) READONLYIF isReadonly() isSupplier, isCompany, isCustomer
    ORDER nameL
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    FILTERS isParent(legalEntityGroup(l), lg) OR
            l IS LegalEntity AND NOT lg IS LegalEntityGroup OR
            l IS LegalEntity AND lg IS LegalEntityGroup AND NOT legalEntityGroup(l)
    FILTERS isSupplier(l)
;

DESIGN supplierLegalEntities {
    BOX {
        preferredSize = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE BOX(TREE legalEntityGroupTree);
            MOVE BOX(l) {
                fill = 3;
                GRID(l) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM customerLegalEntities 'Организации'

    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent
    PROPERTIES READONLY lgTreeName = name(lg)

    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLYIF isReadonly() nameL = name, id SHOWIF showIDs(), fullName, shortNameOwnership,
                                          nameLegalEntityGroup
    PROPERTIES(l) READONLY                address, phone
    PROPERTIES(l) READONLYIF isReadonly() isSupplier, isCompany, isCustomer
    ORDER nameL
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    FILTERS isParent(legalEntityGroup(l), lg) OR
            l IS LegalEntity AND NOT lg IS LegalEntityGroup OR
            l IS LegalEntity AND lg IS LegalEntityGroup AND NOT legalEntityGroup(l)
    FILTERS isCustomer(l)

;

DESIGN customerLegalEntities {
    BOX {
        preferredSize = (1024, 768);
        NEW topContainer{
            type = SPLITH;
            fill = 1;

            MOVE BOX(TREE legalEntityGroupTree);
            MOVE BOX(l) {
                fill = 3;
                GRID(l) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}
META defineDocumentDialogLegalEntity(objectClass, filter, prefix)
    change###prefix###filter(###objectClass o) = {
        DIALOG filter###legalEntities OBJECTS l = prefix(o) CHANGE;
    }
END
META defineDocumentDialogSupplierCustomerLegalEntity(objectClass, supplierFilter, customerFilter)
    @defineDocumentDialogLegalEntity(objectClass, supplierFilter, supplier);
    @defineDocumentDialogLegalEntity(objectClass, customerFilter, customer);
END

NAVIGATOR {
    masterData {
        ADD legalEntities BEFORE regionalData;
    }
}
// -------------------------------------------- Макросы --------------------------------------------- //
META defineDocumentHeaderLegalEntity (object, contact, contactCaption)
    contact (object) = DATA LegalEntity (###object);
    name###contact contactCaption (###object object)= name(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;
    fullName###contact contactCaption###' (полное наименование)' (###object object)= fullName(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;    
    address###contact contactCaption###' (адрес)' (###object object)= address(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;    
    replace(LegalEntity l, LegalEntity o) += {contact(###object object) <- o WHERE contact(object) == l;} 
END
META defineDocumentAbstractHeaderLegalEntity (object, contact, contactCaption)
    contact (object) = ABSTRACT LegalEntity (###object) MATERIALIZED;
    name###contact contactCaption (###object object)= name(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;
    fullName###contact contactCaption###' (полное наименование)' (###object object)= fullName(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;    
    address###contact contactCaption###' (адрес)' (###object object)= address(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;    
    phone###contact contactCaption###' (телефон)' (###object object)= phone(contact(object)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;    

END
META defineDocumentInterfaceHeaderLegalEntity (object, contact, contactCaption)
    @defineDocumentAbstractHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentHeaderLegalEntity(user###object, contact, contactCaption);
    contact (User###object object) += contact(object);
END

META defineDocumentDetailLegalEntity (object, detail, contact, contactCaption)
    contact (###detail idetail) = contact(object(idetail)) MATERIALIZED;
    name###contact contactCaption (###detail idetail) = name(contact(idetail));
    fullName###contact contactCaption###' (полное наименование)' (###detail idetail) = fullName(contact(idetail));    
    address###contact contactCaption###' (адрес)' (###detail idetail)= address(contact(idetail));           
END

META defineDocumentLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
END

META defineDocumentDetailDataLegalEntity (object, detail, contact, contactCaption)
    data###contact (detail) = DATA LegalEntity (###detail);
    contact (detail idetail) = OVERRIDE data###contact(idetail), contact(object(idetail)) MATERIALIZED;
    name###contact contactCaption (detail idetail) = name(contact(idetail));
    fullName###contact contactCaption###' (полное наименование)' (detail idetail) = fullName(contact(idetail));  
    address###contact contactCaption###' (адрес)' (detail idetail)= address(contact(idetail));                   
END
META defineDocumentAbstractDetailDataLegalEntity (object, detail, contact, contactCaption)
    data###contact (detail) = ABSTRACT LegalEntity (###detail);
    contact (detail idetail) = OVERRIDE data###contact(idetail), contact(object(idetail)) MATERIALIZED;
    name###contact contactCaption (detail idetail) = name(contact(idetail));
    fullName###contact contactCaption###' (полное наименование)' (detail idetail) = fullName(contact(idetail));   
    address###contact contactCaption###' (адрес)' (detail idetail)= address(contact(idetail));       
END
META defineDocumentInterfaceDetailDataLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentAbstractDetailDataLegalEntity (object, detail, contact, contactCaption);
    @defineDocumentDetailDataLegalEntity(user###object, User###detail, contact, contactCaption);
    data###contact(User##detail d) += data###contact(d);
END
META defineDocumentInterfaceDetailDataLegalEntity (object, contact, contactCaption)
    @defineDocumentInterfaceDetailDataLegalEntity(object, ###object###detail, contact, contactCaption);
END
META defineDocumentInterfaceDataLegalEntity (object, contact, contactCaption)
    @defineDocumentInterfaceHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentInterfaceDetailDataLegalEntity(object, contact, contactCaption);
END

META defineDocumentDataLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailDataLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentDataLegalEntity (object, contact, contactCaption)
    @defineDocumentDataLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentDetailLegalEntity(detail, contact, contactCaption)
    contact###detail (detail) = DATA LegalEntity (###detail);
    name###contact###detail contactCaption (detail) = nameLegalEntity(contact###detail (detail));
    fullName###contact###detail contactCaption###' (полное наименование)' (detail) = fullNameLegalEntity(contact###detail(detail));   
    address###contact###detail contactCaption###' (адрес)' (idetail)= addressLegalEntity(contact###detail(idetail));       
        
END

META defineDocumentAbstractLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentAbstractHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
END
META defineDocumentInterfaceLegalEntity (object, detail, contact, contactCaption)
    @defineDocumentInterfaceHeaderLegalEntity(object, contact, contactCaption);
    @defineDocumentDetailLegalEntity(object, detail, contact, contactCaption);
    @defineDocumentDetailLegalEntity(user###object, user###detail, contact, contactCaption);
END

META defineDocumentLegalEntity (object, contact, contactCaption)
    @defineDocumentLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentAbstractLegalEntity (object, contact, contactCaption)
    @defineDocumentAbstractLegalEntity(object, object##Detail, contact, contactCaption);
END
META defineDocumentInterfaceLegalEntity (object, contact, contactCaption)
    @defineDocumentInterfaceLegalEntity(object, object##Detail, contact, contactCaption);
END

META defineDocumentPhone(object, contact, caption)
    phone###contact 'Телефон'###caption (###object object) = phone(contact(object)) IN documentPrm;
END

// Агрегации

META defineDocumentAggregationHeaderLegalEntityPrefix (primObject, aggrObject, legalEntityProp, legalEntityCaption, prefixP, prefixA)
    legalEntityProp (###aggrObject object) = legalEntityProp(primObject(object)) MATERIALIZED;
    name###legalEntityProp legalEntityCaption (###aggrObject object) = name(legalEntityProp(object)) MINCHARWIDTH 20 PREFCHARWIDTH 40;
END
META defineDocumentAggregationHeaderLegalEntity (primObject, aggrObject, legalEntityProp, legalEntityCaption)
    @defineDocumentAggregationHeaderLegalEntityPrefix (primObject, aggrObject, legalEntityProp, legalEntityCaption, , );
END

META defineDocumentAggregationDetailLegalEntityPrefix (primObject, aggrObject, legalEntityProp, legalEntityCaption, prefixP, prefixA)
    legalEntityProp (###aggrObject##Detail detail) = legalEntityProp(primObject##Detail(detail)) MATERIALIZED;
END
META defineDocumentAggregationDetailLegalEntity (primObject, aggrObject, legalEntityProp, legalEntityCaption)
    @defineDocumentAggregationDetailLegalEntityPrefix(primObject, aggrObject, legalEntityProp, legalEntityCaption, , );
END

META defineDocumentAggregationLegalEntityPrefix (primObject, aggrObject, legalEntityProp, legalEntityCaption, prefixP, prefixA)
    @defineDocumentAggregationHeaderLegalEntityPrefix(primObject, aggrObject, legalEntityProp, legalEntityCaption, prefixP, prefixA);
    @defineDocumentAggregationDetailLegalEntityPrefix(primObject, aggrObject, legalEntityProp, legalEntityCaption, prefixP, prefixA);
END
META defineDocumentAggregationLegalEntity (primObject, aggrObject, legalEntityProp, legalEntityCaption)
    @defineDocumentAggregationLegalEntityPrefix(primObject, aggrObject, legalEntityProp, legalEntityCaption, , );
END