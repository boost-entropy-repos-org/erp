MODULE IndividualLegalEntity;

REQUIRE System, Utils, LegalEntity;

EXTEND CLASS LegalEntity: Contact;

EXTEND CLASS Ownership { individual 'Физическое лицо' }

overLoadDefaultOwnerships () += ACTION ()  {
    EXEC loadDefaultStaticOwnership('Физическое лицо', 'Ф.Л.', '112', Ownership.individual);
}

isIndividualLegalEntity 'Физ.лицо' (legalEntity) =  ownershipLegalEntity(legalEntity) == Ownership.individual;

passportNumberLegalEntity 'Номер паспорта' = DATA STRING[10] (LegalEntity);

// Уникальность
legalEntityPassportNumber =
    GROUP AGGR legalEntity
        BY passportNumberLegalEntity(legalEntity) WHERE legalEntity IS LegalEntity;

WHEN SESSION CHANGED(nameContact(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN nameLegalEntity(legalEntity) <- nameContact(legalEntity);
}

WHEN SESSION CHANGED(phoneContact(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN dataPhoneLegalEntityDate(legalEntity, date) <- phoneContact(legalEntity) WHERE date == currentDate();
}
WHEN SESSION CHANGED(phoneLegalEntity(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN phoneContact(legalEntity) <- phoneLegalEntity(legalEntity);
}

WHEN SESSION CHANGED(postAddressContact(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN dataPostAddressLegalEntityDate(legalEntity, date) <- postAddressContact(legalEntity) WHERE date == currentDate();
}
WHEN SESSION CHANGED(postAddressLegalEntity(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN postAddressContact(legalEntity) <- postAddressLegalEntity(legalEntity);
}

WHEN SESSION CHANGED(emailContact(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN emailLegalEntity(legalEntity) <- emailContact(legalEntity);
}
WHEN SESSION CHANGED(emailLegalEntity(legalEntity)) AND isIndividualLegalEntity(legalEntity) DO {
    ASSIGN emailContact(legalEntity) <- emailLegalEntity(legalEntity);
}
toShowIndividualLegalEntity(legalEntity) += isIndividualLegalEntity(legalEntity);

requireFillingAttributesContact 'Требовать заполнения контактной информации для физическиз лиц' = DATA BOOLEAN ();

CONSTRAINT requireFillingAttributesContact() AND shortNameOwnershipLegalEntity(l) == 'Ф.Л.' AND NOT passportNumberLegalEntity(l)
    MESSAGE 'Не заполнен номер паспорта';
    
CONSTRAINT requireFillingAttributesContact() AND shortNameOwnershipLegalEntity(l) == 'Ф.Л.' AND NOT phoneContact(l)
    MESSAGE 'Не заполнен номер телефона';
        
CONSTRAINT requireFillingAttributesContact() AND shortNameOwnershipLegalEntity(l) == 'Ф.Л.' AND NOT nameLegalEntity(l)
    MESSAGE 'Не заполнены ФИО';
            
CONSTRAINT requireFillingAttributesContact() AND shortNameOwnershipLegalEntity(l) == 'Ф.Л.' AND NOT postAddressContact(l)
    MESSAGE 'Не заполнен почтовый адрес';   
             
EXTEND FORM options
    PROPERTIES requireFillingAttributesContact()              
;           

DESIGN options {
    commons{
        ADD PROPERTY(requireFillingAttributesContact());
    }
}

EXTEND FORM legalEntity

    PROPERTIES(l) SHOWIF toShowIndividualLegalEntity(l)  firstNameContact, lastNameContact, passportNumberLegalEntity, 
                         pc = phoneContact, pac = postAddressContact, birthdayContact, ec = emailContact
;

DESIGN legalEntity {
    l.contact {
        ADD PROPERTY(pc);
        ADD PROPERTY(pac);
        ADD PROPERTY(ec);
    }
    column1 {
        NEW contact AFTER regionContainer{
            caption = 'Личные данные';
            type = CONTAINERH;
            ADD PROPERTY(firstNameContact(l));
            ADD PROPERTY(lastNameContact(l));
            ADD PROPERTY(birthdayContact(l));
            ADD PROPERTY(passportNumberLegalEntity(l));
        }
    }
}

EXTEND FORM legalEntities
    PROPERTIES(l) READONLYIF isReadonly() firstNameContact, lastNameContact, passportNumberLegalEntity, 
                                          phoneContact, postAddressContact, birthdayContact, emailContact 
;

