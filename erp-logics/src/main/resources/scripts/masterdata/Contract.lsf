MODULE Contract;

REQUIRE System, Historizable, LegalEntity, Numerator, Document, PaymentCondition, Stock;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT Contract 'Договор';
TABLE contract (Contract);
TABLE contractDate (Contract, DATE);

GROUP contract 'Реквизиты' : recognize;

idContract 'Код' = ABSTRACT VARSTRING[100] (Contract) IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 15 PERSISTENT ;

@defineDocumentAbstractHeaderNumber(Contract);

wordContract 'Файл договора'  = ABSTRACT WORDFILE (Contract);
saveWordContract 'Загрузить файл договора' (contract) = ACTION LOADFILE wordContract(contract);
openWordContract 'Просмотреть файл договора' (contract) = ACTION OPENFILE wordContract(contract);


//numberContract 'Номер договора' = DATA STRING[30] (Contract) IN contract;
dateFromContract 'Действует (с)' = DATA DATE (Contract) IN contract;
dateToContract 'Действует (по)' = DATA DATE (Contract) IN contract;
activeContract 'Действуюший' (contract, date) =
    dateFromContract(contract) <= date AND NOT dateToContract(contract) < date;

descriptionContract 'Описание' (contract) = CONCAT '', seriesNumberContract(contract),
                                                       ' от '+ toDateDDMMYYYY(dateFromContract(contract));

GROUP party 'Контрагенты' : recognize;

partyAContract = ABSTRACT LegalEntity (Contract) PERSISTENT INDEXED;
namePartyAContract 'Организация (поставщик)' (contract) = nameLegalEntity(partyAContract(contract)) IN party;

partyBContract = ABSTRACT LegalEntity (Contract) PERSISTENT INDEXED;
namePartyBContract 'Организация (покупатель)' (contract) = nameLegalEntity(partyBContract(contract)) IN party;

countContractPartyAPartyB 'Кол-во договоров' (partyA, partyB) =
    GROUP SUM 1 IF partyAContract(contract) == partyA AND partyBContract(contract) == partyB BY partyA, partyB;

TABLE stockContract (Stock, Contract);

inPartyAStockContract 'Вкл.'  = ABSTRACT BOOLEAN (Stock, Contract) PERSISTENT INDEXED;
inPartyBStockContract 'Вкл.' = ABSTRACT BOOLEAN (Stock, Contract) PERSISTENT INDEXED;

namePartyAStocksContract 'Склады поставщика' (contract) = GROUP CONCAT nameStock(stock) IF inPartyAStockContract(stock, contract) , ', '
                                                 BY contract
                                                 ORDER stock MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;
namePartyBStocksContract 'Склады покупателя' (contract) = GROUP CONCAT nameStock(stock) IF inPartyBStockContract(stock, contract) , ', '
                                                 BY contract
                                                 ORDER stock MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

countContractPartyAStockAPartyBStockB 'Кол-во договоров' (partyA, stockA, partyB, stockB) =
    GROUP SUM 1 IF inPartyAStockContract(stockA, contract) AND inPartyBStockContract(stockB, contract) BY partyAContract(contract), stockA, partyBContract(contract), stockB;

GROUP payment 'Оплата' : public;

//договор по умолчанию
isDefaultContract 'По умолчанию' = ABSTRACT BOOLEAN (Contract) IN party;
  
// Валюты
currencyContract = DATA Currency (Contract);
nameCurrencyContract 'Валюта взаиморасчетов' (contract) = nameCurrency(currencyContract(contract)) IN payment;
shortNameCurrencyContract 'Валюта взаиморасчетов' (contract) = shortNameCurrency(currencyContract(contract)) IN payment;
symbolCurrencyContract 'Символ' (contract) = symbolCurrency(currencyContract(contract)) IN payment;

typeExchangeContract (contract) = DATA TypeExchange (Contract);
nameTypeExchangeContract 'Тип обмена' (contract) = nameTypeExchange(typeExchangeContract(contract)) IN payment;

CONSTRAINT currencyContract(contract) != currencyTypeExchange(typeExchangeContract(contract))
    CHECKED BY typeExchangeContract MESSAGE 'Валюта типа обмена должна соответствовать валюте договора';

// Условия оплаты
paymentConditionContract 'Условия оплаты' =  DATA PaymentCondition (Contract);
typePaymentContract 'Тип оплаты' (contract) = typePaymentCondition(paymentConditionContract(contract));
descriptionPaymentConditionContract 'Условия оплаты' (contract) = descriptionPaymentCondition(paymentConditionContract(contract)) IN payment;

noteContract 'Примечание' = DATA VARSTRING[100] (Contract) MINCHARWIDTH 20 PREFCHARWIDTH 30;

editContract 'Редактировать' (contract) = ABSTRACT ACTION LIST (Contract) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM contracts 'Договоры'
    OBJECTS c = Contract
    PROPERTIES(c) READONLY namePartyAContract, namePartyAStocksContract, namePartyBContract, namePartyBStocksContract, 
                           seriesNumberContract, dateFromContract, dateToContract, isDefaultContract, nameCurrencyContract, 
                           nameTypeExchangeContract, descriptionPaymentConditionContract, noteContract
    PROPERTIES(c) editContract, DELETE FORCE PANEL TOOLBAR

    DIALOG Contract OBJECT c
;

DESIGN options {
    pane{
        NEW contract {
            caption = 'Договор';
        }
    }
}

contractSupplier= DATA LOCAL LegalEntity();
nameContractSupplier 'Поставщик' = nameLegalEntity(contractSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;

contractCustomer= DATA LOCAL LegalEntity();
nameContractCustomer 'Покупатель' = nameLegalEntity(contractCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;

FORM contractDialog 'Договоры'
    OBJECTS dt = DATE FIXED PANEL 
    PROPERTIES val = OBJVALUE (dt)
    PROPERTIES nameContractSupplier(), nameContractCustomer() 
    
    OBJECTS c = Contract
    PROPERTIES(c) READONLY namePartyAContract, namePartyAStocksContract, namePartyBContract, namePartyBStocksContract, 
                           seriesNumberContract, dateFromContract, dateToContract, isDefaultContract, nameCurrencyContract, 
                           nameTypeExchangeContract, descriptionPaymentConditionContract, noteContract
    FILTERS partyAContract(c) == contractSupplier() OR c IS Contract AND NOT contractSupplier(),
            partyBContract(c) == contractCustomer() OR c IS Contract AND NOT contractCustomer()
    FILTERGROUP active 
        FILTER 'Активные' dateFromContract(c) <= dt AND NOT dateToContract(c) < dt 'F5' DEFAULT      
;
DESIGN contractDialog {
    main {
        preferredSize = (1024, 768);
        NEW top {
            type = CONTAINERH;
            caption = 'Шапка';
            MOVE PROPERTY (val) {caption = 'Дата';}
            MOVE PROPERTY(nameContractSupplier());
            MOVE PROPERTY(nameContractCustomer());
        }
        MOVE c.box;
        MOVE functions.box;
    }
}

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //

//META defineContractDefault (contract, partyA, partyB)
//    @defineContractDefault (contract, ###partyA, ###partyB, partyA, partyB);
//END

META defineContractDefault (contract, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB)
    @defineContractDefault(contract, ###contract, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB);
END

META defineContractDefault (contract, contractClass, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB)

    isDataDefault###contract 'По умолчанию' = DATA BOOLEAN (###contract);
    isDefaultContract(contract) += isDataDefault###contract(contract);
    
    count###contract###prefixA###prefixB###date (pA, pB, dateIn)= GROUP SUM 1 
        IF dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), prefixB###contract(contract), dateIn;

    single###contract###prefixA###prefixB###Date (pA, pB, dateIn) = GROUP MAX (contract) 
        IF dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), prefixB###contract(contract), dateIn;

    default###contract###prefixA###prefixB###Date (pA, pB, dateIn) = GROUP MAX (contract) IF isDataDefault###contract(contract) 
        AND dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), prefixB###contract(contract), dateIn;
        
    default###contract###prefixA###stock###prefixB###stock###date (pA, sA, pB, sB, dateIn) = GROUP MAX (contract) 
        IF inSupplierStockContractSku(sA,contract) AND inCustomerStockContractSku(sB,contract)
        AND dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), sA, prefixB###contract(contract), sB, dateIn;
            
    default###contract###prefixA###stock###date (pA, sA, dateIn) = GROUP MAX (contract) 
        IF inSupplierStockContractSku(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), sA, dateIn;      
                  
    count###contract###prefixA###stock###date (pA, sA, dateIn) = GROUP SUM 1 
        IF inSupplierStockContractSku(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), sA, dateIn;  
                                
    default###contract###prefixA###stock###prefixB###date (pA, sA, pB, dateIn) = GROUP MAX (contract) 
        IF inSupplierStockContractSku(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), sA, prefixB###contract(contract), dateIn;      
                  
    count###contract###prefixA###stock###prefixB###date (pA, sA, pB, dateIn) = GROUP SUM 1 
        IF inSupplierStockContractSku(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFromContract(contract) <= dateIn AND NOT dateToContract(contract) < dateIn
            BY prefixA###contract(contract), sA, prefixB###contract(contract), dateIn;
            
    defaultContractSkuSupplierCustomerStockDate (pA, sB, dateIn) = GROUP MAX (contractSku) 
        IF inCustomerStockContractSku(sB,contract)
        AND dateFromContract(contractSku) <= dateIn AND NOT dateToContract(contractSku) < dateIn
            BY supplierContractSku(contractSku), sB, dateIn;    
                  
END

META defineDocumentContract (objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContract (objectClass, contractType, prefixA, prefixB, default###contractType###prefixA###prefixB, partyAMessage, partyBMessage, caption, NS);
END

META defineDocumentContract (objectClass, contractType, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContract (objectClass, contractType, ###contractType, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS);
END

META defineDocumentContract (objectClass, contractType, contractTypeClass, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    contractType##objectClass = DATA contractTypeClass (objectClass);
    number###contractType##objectClass 'Договор (номер)' (o) = numberContract(contractType##objectClass(o)) IN documentPrm;
    seriesNumber###contractType##objectClass 'Договор (серия/номер)' (o) = seriesNumberContract(contractType##objectClass(o)) IN documentPrm;
    dateFrom###contractType##objectClass 'Дата договора' (o) = dateFromContract(contractType##objectClass(o)) IN documentPrm;

    description###contractType##objectClass 'Описание договора' (o)= CONCAT ' ', seriesNumber###contractType##objectClass(o), ' от ' + dateFrom###contractType##objectClass(o);

    isCommission###objectClass 'Продажа на комиссию' = DATA BOOLEAN (objectClass) IN documentPrm;
    isCommission###objectClass(o) <- typeContractSku(contractType###objectClass(o)) == ContractSkuType.commission
        WHEN CHANGED(contractType##objectClass(o));

    skipSet###contractType##objectClass = ABSTRACT BOOLEAN (###objectClass);
    WHEN SESSION (CHANGED(prefixA##objectClass(o)) OR CHANGED(prefixB###objectClass(o)) OR CHANGED(prefixA###stock###objectClass(o))
                OR CHANGED(prefixB###stock###objectClass(o)) OR CHANGED(date###objectClass(o))) AND NOT CHANGED(contractType##objectClass(o)) AND NOT skipSet###contractType##objectClass(o) DO {
                
        contractType##objectClass(o) <- OVERRIDE single###contractType###prefixA###prefixB###date(prefixA##objectClass(o), prefixB##objectClass(o), date###objectClass(o)) IF count###contractType###prefixA###prefixB###date(prefixA##objectClass(o), prefixB##objectClass(o), date###objectClass(o)) == 1,
                                                 default###contractType###prefixA###prefixB###date(prefixA##objectClass(o), prefixB##objectClass(o), date###objectClass(o)),
                                                 default###contractType###prefixA###stock###prefixB###stock###date(prefixA##objectClass(o), prefixA###stock###objectClass(o), prefixB##objectClass(o), prefixB###stock###objectClass(o), date###objectClass(o)); 
    }

    CONSTRAINT contractType##objectClass(o) AND NOT prefixA##objectClass(o) == partyAContract(contractType##objectClass(o))
        CHECKED BY contractType##objectClass MESSAGE partyAMessage;

    CONSTRAINT contractType##objectClass(o) AND NOT prefixB##objectClass(o) == partyBContract(contractType##objectClass(o))
        CHECKED BY contractType##objectClass MESSAGE partyBMessage;
    
    dateFromConstraintContract##objectClass 'Дата начала контроля сроков договора '##caption = DATA DATE ();  
    
    EXTEND FORM options 
        PROPERTIES NS###dateFromConstraintContract##objectClass = NS.dateFromConstraintContract##objectClass()    
    ;
        
    DESIGN options {
        contract {
            MOVE PROPERTY(NS###dateFromConstraintContract##objectClass);
        }
    }      
        
    CONSTRAINT contractType##objectClass(o) AND NOT (dateFromContract(contractType##objectClass(o)) <= date###objectClass(o) 
               AND NOT (dateToContract(contractType##objectClass(o)) < date###objectClass(o))) AND NOT (dateFromConstraintContract##objectClass() > date###objectClass(o))
               CHECKED BY contractType##objectClass
               MESSAGE 'Договор просрочен или еще не действует';
                  
    CONSTRAINT contractType##objectClass(o) AND count###prefixA##sStock###contractType(contractType##objectClass(o)) AND NOT in###prefixA###stock###contractType(prefixA###stock##objectClass(o),contractType##objectClass(o))
        CHECKED BY contractType##objectClass MESSAGE 'Для документа выбран склад поставщика, который не включен в договор';        
                  
    CONSTRAINT contractType##objectClass(o) AND count###prefixB##sStock###contractType(contractType##objectClass(o)) AND NOT in###prefixB###stock###contractType(prefixB###stock##objectClass(o),contractType##objectClass(o))
        CHECKED BY contractType##objectClass MESSAGE 'Для документа выбран склад покупателя, который не включен в договор';                    
                  
END

META defineDocumentAbstractContract (objectClass, contractType)
    @defineDocumentAbstractContract(objectClass, contractType, ###contractType);
END

META defineDocumentAbstractContract (objectClass, contractType, contractTypeClass)
    contractType##objectClass = ABSTRACT contractTypeClass (objectClass) PERSISTENT;
    seriesNumber###contractType##objectClass 'Номер договора' (o) = seriesNumberContract(contractType##objectClass(o)) IN documentPrm;
    dateFrom###contractType##objectClass 'Дата договора' (o) = dateFromContract(contractType##objectClass(o)) IN documentPrm;
    
    description###contractType##objectClass 'Описание договора' (o)= CONCAT ' ', seriesNumber###contractType##objectClass(o), ' от ' + dateFrom###contractType##objectClass(o);

    isCommission##objectClass 'Продажа на комиссию' = ABSTRACT BOOLEAN (objectClass) PERSISTENT IN documentPrm;
END
META defineDocumentInterfaceContract (objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentAbstractContract(objectClass, contractType);
    @defineDocumentContract(User###objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS);
    contractType###objectClass(o) += contractType###user###objectClass(o);
    isCommission###objectClass(o) += isCommissionUser###objectClass(o);
END