MODULE ItemArticle;

REQUIRE System, Item, Tax;

NAMESPACE Item;

GROUP itemArticle 'Артикул' : base;

// Артикул
CLASS Article 'Артикул';
TABLE article(Article);

@defineExternalizable(article, VARSTRING[100]);
captionArticle 'Название' = DATA VARISTRING[255](Article) IN itemBase MINCHARWIDTH 20 PREFCHARWIDTH 40;
originalCaptionArticle 'Наименование (ориг.)' = DATA VARISTRING[100] (Article) IN itemOriginal MINCHARWIDTH 20 PREFCHARWIDTH 40;

itemGroupArticle 'Группа товара' = DATA ItemGroup(Article);
nameItemGroupArticle 'Группа товара' (Article) = nameItemGroup(itemGroupArticle(Article));
idItemGroupArticle 'Код группы' (Article) = idItemGroup(itemGroupArticle(Article));

skuGroup1Article 'Категория' (article) = skuGroup1SkuGroup(itemGroupArticle(article));
nameSkuGroup1Article 'Категория' (article) = nameSkuGroup(skuGroup1Article(article));

skuGroup2Article 'Направление' (article) = skuGroup2SkuGroup(itemGroupArticle(article));
nameSkuGroup2Article 'Направление' (article) = nameSkuGroup(skuGroup2Article(article));

skuGroup3Article 'Группа' (article) = skuGroup3SkuGroup(itemGroupArticle(article));
nameSkuGroup3Article 'Группа' (article) = nameSkuGroup(skuGroup3Article(article));

skuGroup4Article 'Подгруппа' (article) = skuGroup4SkuGroup(itemGroupArticle(article));
nameSkuGroup4Article 'Подгруппа' (article) = nameSkuGroup(skuGroup4Article(article));

skuGroup5Article 'Субгруппа' (article) = skuGroup5SkuGroup(itemGroupArticle(article));
nameSkuGroup5Article 'Субгруппа' (article) = nameSkuGroup(skuGroup5Article(article));

WHEN SESSION CHANGED(itemGroupArticle(a)) AND NOT captionArticle(a) DO
    captionArticle(a) <- captionItemGroup(itemGroupArticle(a));

TABLE itemGroupArticle(ItemGroup, Article);
isParentGroupArticle(group, article) = isParentItemGroupItemGroup(itemGroupArticle(article), group) PERSISTENT INDEXED;
canonicalNameItemGroupArticle 'Группа товара' (article) = canonicalNameGroup(itemGroupArticle(article)) MINCHARWIDTH 40 PREFCHARWIDTH 80;

// --- Дополнительные группы
TABLE customGroupTypeArticle(CustomGroupType, Article);
customGroupCustomGroupTypeArticle = DATA CustomGroup (CustomGroupType, Article);
nameCustomGroupCustomGroupTypeArticle 'Имя' (customGroupType, article) = nameCustomGroup(customGroupCustomGroupTypeArticle(customGroupType, article));
canonicalNameCustomGroupCustomGroupTypeArticle 'Каноническое имя' (customGroupType, article) = canonicalNameCustomGroup(customGroupCustomGroupTypeArticle(customGroupType, article));

// Бренд
brandArticle 'Бренд' = DATA Brand (Article);
nameBrandArticle 'Бренд' (a) = nameBrand(brandArticle(a)) IN itemBase;
idBrandArticle 'Бренд' (a) = idBrand(brandArticle(a));
siteBrandArticle 'Адрес сайта' (a) = siteBrand(brandArticle(a));

CONSTRAINT brandArticle(article) AND itemGroupArticle(article) AND countDataItemGroupBrand(brandArticle(article)) AND NOT countRecBrandItemGroup(brandArticle(article), itemGroupArticle(article))
    CHECKED BY brandArticle, itemGroupArticle  
        MESSAGE 'Бренд должен быть доступен для товарной группы (артикул)';  

// Производитель
manufacturerArticle 'Производитель' = DATA Manufacturer (Article);
nameManufacturerArticle 'Производитель' (a) = nameManufacturer(manufacturerArticle(a)) IN itemBase;

// Производитель
countryArticle = DATA Country (Article);
nameCountryArticle 'Страна' (a) = nameCountry(countryArticle(a)) IN itemBase;

// Изображение артикула
TABLE imagesArticle (Article);
imageArticle 'Изображение' = DATA IMAGEFILE (Article) TABLE imagesArticle;

FORM article 'Артикул'
    OBJECTS a=Article FIXED PANEL
    PROPERTIES(a) captionArticle, originalCaptionArticle, idArticle SHOWIF showIDs(), canonicalNameItemGroupArticle, nameBrandArticle, 
                  nameManufacturerArticle, nameCountryArticle, imageArticle

    OBJECTS c = Country
    PROPERTIES (c) READONLY nameCountry
    FILTERGROUP filters1
            FILTER 'Страны, у которых есть НДС' 'F11' countRangeTaxCountry (Tax.taxVAT, c) DEFAULT

    EDIT Article OBJECT a
;
DESIGN article FROM DEFAULT {
    main {
        NEW articleHeader BEFORE functions.box {
            type = CONTAINERV;
            ADD PROPERTY(canonicalNameItemGroupArticle(a));
            ADD PROPERTY(idArticle(a));
        }
        NEW articleDetail BEFORE functions.box {
            fill = 1;
            type = TABBED;
            NEW articlePrimary {
                type = CONTAINERV;
                caption = 'Основные данные';
                ADD a.itemBase {
                    type = CONTAINERH;
                }
                ADD a.itemOriginal {
                    type = CONTAINERH;
                }
                NEW regionPrm {
                    caption = 'Региональные свойства';
                    type = CONTAINERH;
                }
            }
            NEW regionalPrm {
                caption = 'Региональные параметры';
                ADD c.box;
            }
            NEW imageBox {
                caption = 'Изображение';
                ADD PROPERTY(imageArticle(a)) {
                    fill = 1;
                    caption = '';
                }
            }
        }
    }
}


FORM articles 'Артикулы'

    TREE groupTree g=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY nameItemGroup(g)
    ORDER BY nameItemGroup(g)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeItemGroup(g) DEFAULT

    OBJECTS a=Article
    PROPERTIES(a) READONLYIF isReadonly() captionArticle, originalCaptionArticle, idArticle SHOWIF showIDs(), canonicalNameItemGroupArticle, 
                  nameBrandArticle, nameManufacturerArticle, imageArticle FORCE PANEL 
    PROPERTIES(a) ADDFORM, EDITFORM, deletea=DELETE FORCE PANEL TOOLBAR
    ORDER BY captionArticle(a)
    FILTERGROUP groupFilters
        FILTER 'С группами' 'F9' isParentGroupArticle(g, a) DEFAULT
        FILTER 'Без групп' 'F8' captionArticle(a) IF NOT itemGroupArticle(a)   
    
    DIALOG Article OBJECT a
;

DESIGN articles FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW rootContainer {
            fill = 1;
            type = SPLITH;
            NEW articleImage {
                fill = 1;
                type = SPLITV;
                ADD groupTree.tree.box;
                ADD PROPERTY (imageArticle(a)) {
                    fill = 1; 
                    caption = ''; 
                }
            }           
            NEW articleItemBox {
                fill = 3;
                ADD a.box {
                    fill = 2;
                    defaultComponent = TRUE;
                }
            }    
        }
        ADD functions.box;
    }
}
@extendFormEditable(articles);

articleItem = DATA Article (Item) INDEXED;
idArticleItem 'Артикул' (item) = idArticle(articleItem(item)) IN itemArticle;
@defineItemAttribute(article, id, 'Артикул', itemArticle);

@defineObjectItemAttributeBatch (article, idArticle, 'Артикул');
captionArticleBatch 'Артикул' (batch) = captionArticle(articleItem(skuBatch(batch)));

@implementItemAttribute(idArticle, 'Артикул', String, itemArticle);

captionArticleItem 'Aртикула' (item) = captionArticle(articleItem(item));
imageArticleItem 'Изображение (артикул)' (item) = imageArticle(articleItem(item));
overImageItem (item) += imageArticleItem (item);

countItemArticle 'Кол-во товаров' (a) = GROUP SUM 1 BY articleItem(i); 

//nameCountryArticle 'Страна' (a) = GROUP MAX nameCountryItem(i) BY articleItem(i); 
// Цвет
CLASS Color 'Цвет товара';
TABLE color (Color);

@defineExternalizable(color, VARSTRING[100]);
nameColor 'Наименование' = DATA VARISTRING[50](Color);

FORM color 'Цвет товара'
    OBJECTS t=Color FIXED PANEL
    PROPERTIES(t) nameColor, idColor SHOWIF showIDs()
    EDIT Color OBJECT t
;

FORM colors 'Цвета товара'
    OBJECTS t=Color
    PROPERTIES(t) nameColor READONLY, idColor SHOWIF showIDs() READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameColor(t)
    DIALOG Color OBJECT t
;
DESIGN colors FROM DEFAULT { main{ preferredSize = (600, 400); } }
@extendFormEditable(colors);
@defineObjectItemAttribute(color, Color, name, 'Цвет', itemArticle);
@defineObjectItemAttributeBatch (color, nameColor, 'Цвет');
@implementItemAttribute(nameColor, 'Цвет', String, itemColor);
idColorItem (item) = idColor(colorItem(item));

TABLE colorArticle(Color, Article);
EXTEND CLASS Color  {
    none 'None'
}
calcColorItem (item)= OVERRIDE (Color.none IF item IS Item), colorItem(item);
countColorArticle 'Кол-во цветов для артикля' (color,article) = GROUP SUM 1 BY calcColorItem(item), articleItem(item) PERSISTENT;

colorArticle  = DATA Color(Article);
nameColorArticle 'Цвет' (Article) = nameColor(colorArticle(Article)) IN itemArticle;

EXTEND FORM article PROPERTIES(a) nameColorArticle;
EXTEND DESIGN article  {
    articlePrimary {
        ADD a.itemArticle { type = CONTAINERH; }
    }
}
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() nameColorArticle;

//  Ед. изм.
UOMArticle  = DATA UOM (Article);
nameUOMArticle 'Единица измерения' (article) = nameUOM(UOMArticle(article)) IN itemBase MINCHARWIDTH 10 PREFCHARWIDTH 10;
shortNameUOMArticle 'Краткое наименование' (article)=  shortNameUOM(UOMArticle(article)) IN itemBase MINCHARWIDTH 3 PREFCHARWIDTH 6;

WHEN SESSION CHANGED(itemGroupArticle(a)) AND NOT UOMArticle(a) DO
    UOMArticle(a) <- UOMItemGroup(itemGroupArticle(a));

//  Состав
compositionArticle 'Состав' = DATA VARSTRING[255] (Article) IN itemBase MINCHARWIDTH 30 PREFCHARWIDTH 40;
originalCompositionArticle 'Состав (ориг.)' = DATA VARSTRING[255] (Article) IN itemOriginal MINCHARWIDTH 30 PREFCHARWIDTH 40;

EXTEND FORM article PROPERTIES(a) compositionArticle, originalCompositionArticle, nameUOMArticle;
EXTEND FORM articles PROPERTIES(a) BEFORE nameColorArticle(a) READONLYIF isReadonly() nameUOMArticle, compositionArticle, originalCompositionArticle;

//  Габариты
netWeightArticle 'Вес нетто, кг' = DATA NUMERIC[9,3] (Article) IN itemSize;// MINCHARWIDTH 8 PREFCHARWIDTH 12;
grossWeightArticle 'Вес брутто, кг' = DATA NUMERIC[9,3] (Article) IN itemSize;// MINCHARWIDTH 8 PREFCHARWIDTH 12;

EXTEND FORM article PROPERTIES(a) netWeightArticle, grossWeightArticle;
EXTEND DESIGN article {
    articlePrimary {
        ADD a.itemSize {type = CONTAINERH;}
    }
}
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() netWeightArticle, grossWeightArticle;


// Пол
CLASS Gender 'Пол';
TABLE gender (Gender);

@defineExternalizable(gender, VARSTRING[100]);
nameGender 'Наименование' = DATA VARISTRING[50](Gender);
shortNameGender 'Краткое наименование' = DATA VARISTRING[10] (Gender);

FORM gender 'Пол'
    OBJECTS t=Gender FIXED PANEL
    PROPERTIES(t) nameGender, shortNameGender, idGender SHOWIF showIDs()
    EDIT Gender OBJECT t
;

FORM genders 'Пол'
    OBJECTS t=Gender
    PROPERTIES(t) nameGender READONLY, shortNameGender READONLY, idGender SHOWIF showIDs() READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameGender(t)
    DIALOG Gender OBJECT t
;
DESIGN genders FROM DEFAULT { main{ preferredSize = (600, 400); } }

genderBrand  = DATA Gender (Brand);
nameGenderBrand 'Пол' (b) = nameGender(genderBrand(b)) IN itemArticle;
shortNameGenderBrand 'Пол' (b) = shortNameGender(genderBrand(b)) IN itemArticle;
EXTEND FORM brand PROPERTIES(t) nameGenderBrand, shortNameGenderBrand;
EXTEND FORM brands PROPERTIES(t) BEFORE deleteb READONLYIF isReadonly() nameGenderBrand;

genderArticle  = DATA Gender (Article);
nameGenderArticle 'Пол' (a) = nameGender(genderArticle(a)) IN itemArticle;
shortNameGenderArticle 'Пол' (a) = shortNameGender(genderArticle(a)) IN itemArticle;

overGenderArticle (article) = OVERRIDE genderBrand(brandArticle(article)), genderArticle(article);
overNameGenderArticle 'Пол' (a) = nameGender(overGenderArticle(a));
overShortNameGenderArticle 'Пол' (a) = shortNameGender(overGenderArticle(a));

genderItem (i) = genderArticle(articleItem(i));
nameGenderItem 'Пол' (i) = nameGender(genderItem(i));
shortNameGenderItem 'Пол' (i) = shortNameGender(genderItem(i));

genderBatch  (batch) = genderItem(skuBatch(batch));
nameGenderBatch 'Пол' (batch) = nameGender(genderBatch(batch));
shortNameGenderBatch 'Пол' (batch) = shortNameGender(genderBatch(batch));

EXTEND FORM article PROPERTIES(a) nameGenderArticle;
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() nameGenderArticle;

// Размер
CLASS Size 'Размер товара';
TABLE size(Size);

@defineExternalizable(size, VARSTRING[100]);

nameSize 'Наименование' = DATA VARISTRING[50](Size);
shortNameSize 'Краткое наименование' = DATA ISTRING[10](Size);

nameOriginalSize 'Наименование (оригинальное)' = DATA VARISTRING[50](Size);
WHEN SESSION CHANGED(nameSize(s)) AND NOT nameOriginalSize(s) DO nameOriginalSize(s) <- nameSize(s);

FORM size 'Размер товара'
    OBJECTS t=Size FIXED PANEL
    PROPERTIES(t) nameSize, idSize SHOWIF showIDs(), shortNameSize, nameOriginalSize
    EDIT Size OBJECT t
;

FORM sizes 'Размеры товара'
    OBJECTS t=Size
    PROPERTIES(t) nameSize READONLY, idSize SHOWIF showIDs() READONLY, shortNameSize READONLY, nameOriginalSize READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameSize(t)
    DIALOG Size OBJECT t
;
DESIGN sizes FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(size, Size, name, 'Размер', itemArticle);

nameOriginalSizeItem 'Размер (оригинальный)' (item) = nameOriginalSize(sizeItem(item)) IN itemArticle;
dataOriginalSizeItem 'Размер (оригинальный)' = DATA VARISTRING[50](Item);
originalSizeItem 'Размер (оригинальный)' (i) = OVERRIDE nameOriginalSizeItem(i), dataOriginalSizeItem(i) MINCHARWIDTH 3 PREFCHARWIDTH 5;
@implementItemAttribute(originalSize, 'Размер (оригинальный)', String, itemOriginalSize);

@defineObjectItemAttributeBatch (size, nameSize, 'Размер');
@implementItemAttribute(nameSize, 'Размер', String, itemSize);

TABLE sizeArticle(Size, Article);
EXTEND CLASS Size  {
    none 'None'
}
calcSizeItem (item)= OVERRIDE (Size.none IF item IS Item), sizeItem(item);
countSizeArticle 'Кол-во размеров для артикля' (size,article) = GROUP SUM 1 BY calcSizeItem(item), articleItem(item) PERSISTENT;

maxSkuArticleColorSize (article, color, size) = GROUP MAX sku
    BY articleItem(sku), calcColorItem(sku), calcSizeItem(sku);

overCopyItem(s, d) += ACTION (s, d) {
    articleItem(d) <- articleItem(s);
    colorItem(d) <- colorItem(s);
    sizeItem(d) <- sizeItem(s);
}

EXTEND DESIGN item {
    itemPrimaryColumn2 {
        ADD i.itemArticle {
            columns = 2;
        }
    }
}


EXTEND DESIGN itemGroup {
    itemGroupDetail {
        ADD g.itemArticle {
            columns = 6;
        }
    }
}

NAVIGATOR {
    skuNavigator {
        ADD articles AFTER itemGroups;
    }
}

replaceSizeSize = ABSTRACT ACTION LIST (Size, Size);
inSize 'Отм.' = DATA SESSION BOOLEAN (Size);

replaceSize 'Объединить' = ACTION (size) {
    FOR inSize(s) DO{
        IF s != size THEN {
            sizeItem(item) <- size WHERE sizeItem(item) == s;
            
            replaceSizeSize(s,size);
            
            inSize(s) <- NULL;
            DELETE s;
        } ELSE {
            MESSAGE 'Выделенный артикул не может совпадать с объединяемым';
        }
    }
    apply();
} CONFIRM;


EXTEND FORM sizes
    PROPERTIES(t) inSize BEFORE nameSize(t), replaceSize FORCE PANEL TOOLBAR
;

//-------------------------- Размерная сетка ------------------------//
CLASS SizeGroup 'Размерная сетка';
TABLE sizeGroup(SizeGroup);
 
@defineExternalizable(sizeGroup, VARSTRING[100]);
 
nameSizeGroup 'Наименование' = DATA VARISTRING[50](SizeGroup);
shortNameSizeGroup 'Краткое наименование' = DATA ISTRING[10](SizeGroup);

TABLE sizeGroupSize(SizeGroup, Size);
inSizeGroupSize 'Вкл.' = DATA BOOLEAN (SizeGroup, Size);
orderSizeGroupSize 'Порядковый номер' = DATA INTEGER (SizeGroup, Size); 
 
FORM sizeGroup 'Размерная сетка'
    OBJECTS t=SizeGroup FIXED PANEL
    PROPERTIES(t) nameSizeGroup, idSizeGroup SHOWIF showIDs(), shortNameSizeGroup
    
    OBJECTS s=Size 
    PROPERTIES(s) READONLY nameSize, idSize SHOWIF showIDs(), shortNameSize, nameOriginalSize  
    PROPERTIES(t,s) inSizeGroupSize, orderSizeGroupSize   
    FILTERGROUP filters1
            FILTER 'Только включенные' 'F11' inSizeGroupSize(t,s)
                 
    EDIT SizeGroup OBJECT t
;

FORM sizeGroups 'Размерные сетки'
    OBJECTS t=SizeGroup 
    PROPERTIES(t) READONLY nameSizeGroup, idSizeGroup SHOWIF showIDs(), shortNameSizeGroup
    
    OBJECTS s=Size 
    PROPERTIES(s) READONLY nameSize, idSize SHOWIF showIDs(), shortNameSize, nameOriginalSize  
    PROPERTIES(t,s) READONLY inSizeGroupSize, orderSizeGroupSize
    PROPERTIES(t) ADDFORM, EDITFORM
    
    ORDER BY  nameSizeGroup(t), orderSizeGroupSize(t,s)       
    FILTERS inSizeGroupSize(t,s)
     
    DIALOG SizeGroup OBJECT t
;
DESIGN sizes FROM DEFAULT { main{ preferredSize = (600, 400); } }

sizeGroupArticle = DATA SizeGroup (Article);
nameSizeGroupArticle 'Размерная сетка' (a) = nameSizeGroup(sizeGroupArticle(a)) IN itemArticle;

EXTEND FORM article
    PROPERTIES(a) nameSizeGroupArticle
;
EXTEND FORM articles
    PROPERTIES(a) READONLYIF isReadonly() nameSizeGroupArticle 
;

// ------------------ Добавляем на форму артикулов товары в отдельную вкладку ---------------------- //
EXTEND FORM article

    OBJECTS i = Item
    PROPERTIES (i) captionItem, compositionItem, nameUOMItem, nameColorItem,                        
                   nameSizeItem     
    PROPERTIES (i) ADDOBJ, deletei = DELETESESSION   
                                                                    
    FILTERS articleItem(i) == a      
;
EXTEND DESIGN article {
    articleDetail{
        ADD i.box;
    }
} 

EXTEND FORM articles

    OBJECTS i = Item
    PROPERTIES (i) READONLY captionItem, compositionItem, nameUOMItem, nameColorItem, 
                   nameSizeItem       
    
    FILTERS articleItem(i) == a      
    
;

EXTEND DESIGN articles {
    articleItemBox{
        ADD i.box;
    }
} 

// ------------------------- Объединение артикулов ---------------------- //

replaceArticleArticle = ABSTRACT ACTION LIST (Article, Article);
inArticle 'Отм.' = DATA SESSION BOOLEAN (Article);

replaceArticle 'Объединить' = ACTION (article) {
    FOR inArticle(a) DO{
        IF a != article THEN {
            articleItem(item) <- article WHERE articleItem(item) == a;
            
            replaceArticleArticle(a,article);
            
            inArticle(a) <- NULL;
            DELETE a;
        } ELSE {
            MESSAGE 'Выделенный артикул не может совпадать с объединяемым';
        }
    }
    apply();
} CONFIRM;


EXTEND FORM articles
    PROPERTIES(a) inArticle BEFORE captionArticle(a), replaceArticle FORCE PANEL TOOLBAR
;

// ------------------------- Автоматическое проставление свойств товара для артикула ---------------------- //
META defineEventChangedArticle(property)
    WHEN SESSION CHANGED(property##Article(articleItem(i))) AND NOT CHANGED(property##Item(i)) DO         
        property##Item(i) <- property##Article(articleItem(i));
END

@defineEventChangedArticle(caption);

@defineEventChangedArticle(itemGroup);
@defineEventChangedArticle(country);
      
WHEN SESSION CHANGED(customGroupCustomGroupTypeArticle(type, articleItem(i))) AND NOT CHANGED(customGroupCustomGroupTypeItem(type, i)) DO         
    customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeArticle(type, articleItem(i));

//WHEN SESSION (CHANGED(customGroupCustomGroupTypeArticle(type, article)) OR CHANGED(articleItem(i))) AND NOT CHANGED(customGroupCustomGroupTypeItem(type, i)) DO         
//    customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeArticle(type, article) WHERE articleItem(i)==article;

@defineEventChangedArticle(brand);

@defineEventChangedArticle(manufacturer) ;

@defineEventChangedArticle(composition);

@defineEventChangedArticle(UOM);

@defineEventChangedArticle(color);

@defineEventChangedArticle(netWeight);

@defineEventChangedArticle(grossWeight);

NAVIGATOR {
    itemAttributeNavigator {
        ADD colors;
        ADD sizes;
        ADD sizeGroups;
        ADD genders;
    }
}