MODULE ItemManager;

REQUIRE Item, EmployeeManager;

NAMESPACE Item;

@defineItemGroupDefaultValue(itemManager, 'Категорийный менеджер', Employee, nameCustomUser);  
nameItemManager 'Категорийный менеджер' (ItemGroup itemGroup) = name[Contact](itemManager(itemGroup)); 

countItemGroup (employee) = GROUP SUM 1 IF dataItemManager(ItemGroup group) == Employee employee BY employee MATERIALIZED;

accessManager 'Доступ разрешен' (Employee employee, ItemGroup itemGroup) = OVERRIDE
    nearestItemManager(itemGroup) == employee,  
    employee IS Employee AND itemGroup IS ItemGroup AND NOT countItemGroup(employee) AND NOT countManagers(employee) MATERIALIZED;

countAccessManagers (employee, itemGroup) = GROUP SUM 1 IF accessManager(Employee manager, ItemGroup itemGroup) AND inManager(manager, Employee employee) BY employee, itemGroup;

access = countAccessManagers(Employee employee, ItemGroup itemGroup) OR accessManager(employee, itemGroup) MATERIALIZED;

countAccessItem 'Кол-во доступных групп' (employee, itemGroup) =
    GROUP SUM 1 IF access(Employee employee, ItemGroup child)
             AND isParent(child, SkuGroup itemGroup)
       BY employee, itemGroup MATERIALIZED;

access = access(Employee employee, itemGroup(Item item));                                     

EXTEND FORM itemGroup
    PROPERTIES(g) nameCustomUser 
;
DESIGN itemGroup {
    itemGroupDetail {
        MOVE GROUP(g,defaultItemGroup); 
    }
}

EXTEND FORM itemGroups
    PROPERTIES(g) READONLYIF  isReadonly() nameItemManager AFTER name(g) 
;

EXTEND FORM items 
    FILTERS countAccessItem(currentUser(), g) OR NOT g IS Group
    FILTERS access(currentUser(), i)
;