MODULE Item;

REQUIRE System, Stock, Sku, Hierarchy, Barcode, PriceListType, PriceListCalc;

// ------------------------------------ Классификатор товаров --------------------------- //

CLASS ItemGroup 'Товарная группа' : SkuGroup;
TABLE itemGroup (ItemGroup);

@defineExternalizable(itemGroup, VARSTRING[100]);

nameItemGroup 'Наименование' = DATA VARISTRING[100](ItemGroup) IN base;

nameSkuGroup(group) += nameItemGroup(group) IF group IS ItemGroup;

TABLE itemGroupItemGroup(ItemGroup, ItemGroup);
@defineHierarchy(itemGroup);

parentSkuGroup (itemGroup) += parentItemGroup(itemGroup);

inItemGroup 'Отм.' = DATA SESSION BOOLEAN (ItemGroup);

moveItemGroup 'Перенести отмеченные группы в текущую' = ACTION (itemGroup){

    FOR inItemGroup(i) DO{
        IF i != itemGroup THEN {
            ASSIGN parentItemGroup(i) <- itemGroup;
            ASSIGN inItemGroup(i) <- NULL;
        } ELSE {
            MESSAGE 'Выделенная товарная группа не может совпадать с объединяемой';
        }
    }
}

// ------------------ Формы  --------------------- //

FORM itemGroup 'Товарная группа'
    OBJECTS g=ItemGroup FIXED PANEL
    PROPERTIES(g) nameItemGroup, idItemGroup SHOWIF showIDs(), nameParentItemGroup    
    EDIT ItemGroup OBJECT g
;

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=ItemGroup PARENT parentItemGroup
    PROPERTIES inItemGroup(g), moveItemGroup(g) TODRAW g FORCE PANEL TOOLBAR
    PROPERTIES READONLYIF isReadonly() nameItemGroup(g), idItemGroup(g) SHOWIF showIDs(),canonicalNameItemGroup (g)
    PROPERTIES(g) ADDFORM, EDITFORM, deleteg=DELETE FORCE PANEL TOOLBAR
    ORDER BY canonicalNameItemGroup(g)
;
@extendFormEditable(itemGroups);

FORM dialogItemGroups 'Товарные группы'
    TREE treeGroups tg=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY nameItemGroup(tg)
    ORDER BY nameItemGroup(tg)

    OBJECTS g=ItemGroup
    PROPERTIES(g) nameItemGroup READONLY, canonicalNameItemGroup READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(g) ADDFORM, EDITFORM
    ORDER BY canonicalNameItemGroup(g)

    FILTERS isParentItemGroupItemGroup(g, tg)

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafItemGroupItemGroup(g, tg) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentItemGroupItemGroup(g, tg)
        FILTER 'Только непосредственных потомков' 'F8' parentItemGroup(g) == tg

    DIALOG ItemGroup OBJECT g
;

DESIGN dialogItemGroups FROM DEFAULT {
    main{
        preferredSize = (1280, 1024);
        NEW rootContainer BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            ADD treeGroups.tree.box;
            ADD g.box {
                fill = 2;
                g.grid { defaultComponent = TRUE; }
            }
        }
    }
}

NAVIGATOR {
    skuNavigator {
        ADD itemGroups BEFORE UOMs;
    }
}
// ----------------------------------- Товары ----------------------------------- //

CLASS Item 'Товар' : Sku;
TABLE item(Item);

TABLE itemDate (Item, DATE);
TABLE itemCountry (Item, Country);
TABLE itemCountryDate (Item, Country, DATE);

@defineExternalizable(item, VARSTRING[100]);

idSku(sku) += idItem(sku); 

// Связь с группой товаров
itemGroupItem 'Группа товара' = DATA ItemGroup(Item) AUTOSET;
skuGroupSku(item) += itemGroupItem(item);
//roundSkuGroupSkuSku(item) += itemGroupItem(item);
countItemItemGroup 'Кол-во товаров' (g) = GROUP SUM 1 BY itemGroupItem(i);

nameItemGroupItem 'Группа товара' (item) = nameItemGroup(itemGroupItem(item)) IN recognize;
canonicalNameItemGroupItem 'Группа товара' (item) = canonicalNameItemGroup(itemGroupItem(item)) IN base;
idItemGroupItem 'Код группы товаров' (item) = idItemGroup(itemGroupItem(item));

TABLE itemGroupItem (ItemGroup, Item);

isParentItemGroupItem (itemGroup, item) = isParentItemGroupItemGroup(itemGroupItem(item), itemGroup) PERSISTENT;

// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeItem(CustomGroupType, Item);
customGroupCustomGroupTypeItem = DATA CustomGroup (CustomGroupType, Item);
customGroupCustomGroupTypeSku(type, item) += customGroupCustomGroupTypeItem(type, item);

nameCustomGroupCustomGroupTypeItem 'Имя' (type, item) = nameCustomGroup(customGroupCustomGroupTypeItem(type, item));
canonicalNameCustomGroupCustomGroupTypeItem 'Каноническое имя' (type, item) = canonicalNameCustomGroup(customGroupCustomGroupTypeItem(type, item));

CONSTRAINT customGroupTypeCustomGroup(customGroupCustomGroupTypeItem(type, item)) != type
           CHECKED BY customGroupCustomGroupTypeItem
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';

// Атрибуты
dataImageItem 'Изображение' = DATA IMAGEFILE (Item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE dataImageItem(item);
overImageItem '' = ABSTRACT IMAGEFILE (Item);

imageItem (item) = OVERRIDE dataImageItem (item), overImageItem (item);
hasImageItem (item) = TRUE IF imageItem(item) PERSISTENT;

imageBatch 'Изображение' (batch) = imageItem(skuBatch(batch)); 

// -------------------------------- Надбавки для расчетных видов цен --------------------------------//

currentBasePricePriceListTypeSkuStock 'Базовая цена' (type, sku, stock) = priceAPriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), sku, stock, currentDateTime());

currentCalcPricePriceListTypeSkuStock 'Расчетная цена' (type, sku, stock) = priceAPriceListTypeSkuStockDateTime(type, sku, stock, currentDateTime());

// ------------------------------------ Формы -------------------------- //
backgroundCurrentCalcPricePriceListTypeSkuStock = ABSTRACT CASE COLOR (CalcPriceListType, Sku, Stock);

FORM item 'Товар'

    OBJECTS i=Item FIXED PANEL

    PROPERTIES(i) canonicalNameItemGroupItem, idBarcodeSku ON CHANGE changeBarcodeSku(i) EVENTID 'SCANNER',
                  dataImageItem, loadImageItem, idItem SHOWIF showIDs()

    OBJECTS b=Barcode
    PROPERTIES(b)       idBarcode, dateBarcode, shortNameUOMBarcode,
                        amountBarcode, activeBarcode, primaryBarcode ON CHANGE changePrimaryBarcodeSku(b,i)
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, deleteb=DELETESESSION
    FILTERS skuBarcode(b) == i

    OBJECTS cgt = CustomGroupType
    PROPERTIES nameCustomGroupType(cgt) READONLY, canonicalNameCustomGroupCustomGroupTypeItem(cgt, i)

    OBJECTS dtr = DATE FIXED PANEL
    PROPERTIES (dtr) OBJVALUE BACKGROUND dateDiffersCurrent(dtr)

    OBJECTS c = Country
    PROPERTIES (c) READONLY nameCountry

    OBJECTS st2 = Stock FIXED PANEL
    PROPERTIES(st2) SELECTOR nameStock

    OBJECTS ct = CalcPriceListType
    PROPERTIES(ct) READONLY nameCalcPriceListType, includeVATPriceListType, nameCurrencyCalcPriceListType, nameRoundConditionPriceListType,
                            nameBasePriceListTypeCalcPriceListType
    PROPERTIES(ct, i, st2) READONLY currentBasePricePriceListTypeSkuStock
    PROPERTIES(ct, i) markupCalcPriceListTypeSku
    PROPERTIES(ct, i, st2) READONLY currentCalcPricePriceListTypeSkuStock BACKGROUND  backgroundCurrentCalcPricePriceListTypeSkuStock(ct, i, st2)

    EDIT Item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        NEW itemHeader BEFORE functions.box {
            type = COLUMNS;
            columns = 2;
            ADD PROPERTY(canonicalNameItemGroupItem(i)) {
                caption = 'Полное имя группы';
            }
            ADD PROPERTY(idBarcodeSku(i));
            ADD PROPERTY(idItem(i));
        }
        NEW itemDetail BEFORE functions.box {
            type = TABBED;
            fill = 1;
            NEW itemPrimary {
                type = CONTAINERV;
                caption = 'Основные данные';

                NEW itemPrimaryRow1 {
                    type = CONTAINERH;
                    NEW itemPrimaryColumn1 {
                        type = CONTAINERV;
                    }
                    NEW itemPrimaryColumn2 {
                        type = CONTAINERV;
                    }
                }
                ADD b.box;
            }
            NEW itemGroup {
                type = CONTAINERV;
                caption = 'Классификаторы';
                ADD cgt.box;
            }
            NEW regionalPrm {
                type = CONTAINERV;
                caption = 'Региональные параметры';
                ADD dtr.box;
                ADD c.box;
            }
            NEW calcPriceListTypePrm {
                type = CONTAINERV;
                caption = 'Цены';
                type = CONTAINERV;
                ADD st2.box;
                ADD ct.box;
            }
            NEW itemImage {
                type = CONTAINERV;
                caption = 'Изображение';
                ADD PROPERTY(dataImageItem(i)) {
                    caption = '';
                    fill = 1;
                }
                ADD PROPERTY(loadImageItem(i));
            }
        }
    }
}

seekBarcode 'Штрихкод' = DATA SESSION STRING[15] ();
seekSkuBarcode = ACTION (){
    REQUEST STRING[15] INPUT;
    ASSIGN seekBarcode() <- NULL;
    ASSIGN seekBarcode() <- requestedString();
    EXEC seek(skuBarcodeIdDate(seekBarcode(), currentDate()));
    IF NOT skuBarcodeIdDate(seekBarcode(), currentDate()) THEN
        MESSAGE 'Штрихкод не найден';
    ASSIGN seekBarcode() <- NULL;
}

editSku(sku) += ACTION [= ACTION EDITFORM Item](sku);
addSku () += ACTION [= ACTION ADDFORM Item]();

FORM items 'Товары' KEEPSESSIONPROPERTIES

    OBJECTS gt=GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType

    TREE groupTree g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    FILTERS groupTypeGroup(g) == gt, g IS Group AND NOT (g IS SkuGroup AND NOT g IS ItemGroup)
    ORDER BY nameGroup(g)
    FILTERGROUP inactive1 FILTER 'Активные' 'F5' activeGroup(g) DEFAULT
    
    OBJECTS i=Item  
    PROPERTIES(i) READONLYIF isReadonly() idBarcodeSku ON CHANGE changeBarcodeSku(i), imageItem FORCE PANEL SHOWIF hasImageItem(i), idItem SHOWIF showIDs()
    PROPERTIES(i) ADDFORM, EDITFORM, deletei=DELETE FORCE PANEL TOOLBAR
    PROPERTIES seekBarcode()
    ON CHANGE seekSkuBarcode() 
    
    DIALOG Item OBJECT i  
;

seekSkuGroupType = ACTION () SEEK items.gt SystemGroupType.skuGroupType;
EXTEND FORM items
    EVENTS
        ON INIT seekSkuGroupType()
;

DESIGN items FROM DEFAULT {
    NEW rootContainer {
        type = SPLITH;
        fill = 1;
        NEW row1 {
            fill = 1;
            caption = 'Классификатор';
            type = CONTAINERV;
            ADD gt.box;
            NEW itemImage {               
                fill = 1;
                type = SPLITV;
                ADD groupTree.tree.box;               
                ADD PROPERTY (imageItem(i)) {
                    fill = 1;
                    caption = '';
                }
            }  
        }
        NEW row2 {
            fill = 3;
            type = CONTAINERV;
            NEW row21 {
                type = CONTAINERH;
                ADD PROPERTY(seekBarcode()) {
                    editKey = 'F4';
                }
            }
            ADD i.box {
                i.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }

    ADD functions.box;
}

@extendFormEditable(items);

NAVIGATOR {
    skuNavigator {
        ADD items BEFORE itemGroups;
    }
}

// ----------------------------------- Атрибуты товаров ------------------------------------------ //

CLASS ABSTRACT ItemAttribute 'Атрибут товара';
TABLE itemAttribute(ItemAttribute);
TABLE itemItemAttribute(Item, ItemAttribute);

// Отображение
META defineItemAttribute (attribute, caption, group)
    userShow###attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (ItemGroup) IN group;

    quantityChildWith###attribute##ItemGroup (itemGroup) = GROUP SUM 1 IF userShow###attribute##ItemGroup(childItemGroup) AND isParentItemGroupItemGroup(childItemGroup, itemGroup) BY itemGroup PERSISTENT;
    quantityParentWith###attribute##ItemGroup (itemGroup) = GROUP SUM 1 IF userShow###attribute##ItemGroup(parentItemGroup) AND isParentItemGroupItemGroup(itemGroup, parentItemGroup) BY itemGroup PERSISTENT;

    show###attribute##ItemGroup caption (itemGroup) = TRUE IF (quantityChildWith###attribute##ItemGroup (itemGroup) (+) quantityParentWith###attribute##ItemGroup (itemGroup)) > 0 PERSISTENT;

    show###attribute##Item caption (item) = TRUE IF quantityParentWith###attribute##ItemGroup(itemGroupItem(item));

    backgroundShow###attribute##ItemGroup (itemGroup) =
        IF userShow###attribute##ItemGroup(itemGroup) THEN
            RGB(0,0,0) IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChildWith###attribute##ItemGroup (itemGroup) != descendantNumberItemGroup(itemGroup)
                             AND NOT quantityParentWith###attribute##ItemGroup (itemGroup);

    setNullShow###attribute##ItemGroup 'Снять признак для всех потомков' = ACTION (itemGroup) {
        FOR isParentItemGroupItemGroup (childGroup, itemGroup) DO {
            ASSIGN userShow###attribute##ItemGroup(childGroup) <- NULL;
        }
    } SHORTCUT userShow###attribute##ItemGroup CONFIRM;
END

// Объявление
valueItemAttribute = ABSTRACT VARISTRING[255] (Item, ItemAttribute) PERSISTENT;

META defineItemAttribute(attribute, formProperty, caption, group)
    @defineItemAttribute(attribute, caption, group);

    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute##ItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) READONLYIF  isReadonly() show###attribute##ItemGroup BACKGROUND backgroundShow###attribute##ItemGroup(g) BEFORE deleteg;
    EXTEND FORM item PROPERTIES(i) formProperty###attribute###item SHOWIF show###attribute##Item(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei formProperty###attribute###item SHOWIF show###attribute##ItemGroup(g);
END

// Примитивный тип
META definePrimitiveItemAttribute(attribute, type, caption, group)
    attribute##Item caption = DATA type (Item) IN group;
    @defineItemAttribute(attribute, , caption, group);
END

META implementItemAttribute(property, caption, itemType, attributeClass)
    EXTEND CLASS itemType##ItemAttribute { attributeClass caption }
    value###itemType##ItemAttribute(i, a) += WHEN a == itemType##ItemAttribute.##attributeClass THEN property###item(i);
END

// Расширяем формы настройки
EXTEND FORM options
    OBJECTS ia = ItemAttribute
    PROPERTIES(ia) staticCaption
;

EXTEND DESIGN options {
    pane {
        NEW items {
            caption = 'Товары';
            ADD ia.box;
        }
    }
}

META defineItemAttributeBatch (attribute, formProperty, caption, skuClass)
    show###attribute##Batch caption (batch)= show###attribute##Item(skuBatch(batch));
    attribute##Batch caption (batch) = attribute###skuClass(skuBatch(batch));

    EXTEND FORM batches PROPERTIES(bt) READONLY FORCE GRID formProperty###Batch SHOWIF show###attribute##ItemGroup(sk);
END

META defineItemAttributeBatchClass (attribute, caption, skuClass)
    @defineItemAttributeBatch (attribute, attribute, caption, skuClass);
END

META defineItemAttributeBatch (attribute, formProperty, caption)
    @defineItemAttributeBatch(attribute, formProperty, caption, item);
END
META defineItemAttributeBatch (attribute, caption)
    @defineItemAttributeBatch (attribute, attribute, caption);
END

META defineObjectItemAttributeBatch(attribute, identity, caption)
    @defineObjectItemAttributeBatch(attribute, identity, caption, item);
END

META defineObjectItemAttributeBatch(attribute, identity, caption, skuClass)
    identity##Batch caption (batch) = identity###skuClass(skuBatch(batch));
    @defineItemAttributeBatch(attribute, identity, caption, skuClass);
END

// -------------------------------------------- Формирование наименования ----------------------------------- //

prefixInNameItemAttribute 'Префикс' = DATA VARSTRING[20] (ItemAttribute);
postfixInNameItemAttribute 'Постфикс' = DATA VARSTRING[20] (ItemAttribute);

EXTEND FORM options PROPERTIES(ia) prefixInNameItemAttribute, postfixInNameItemAttribute;

completeNameItemAttribute (item, attribute) = CONCAT '', prefixInNameItemAttribute(attribute) IF item IS Item, valueItemAttribute(item, attribute), postfixInNameItemAttribute(attribute) IF item IS Item;

META defineItemAttributeName (prefix, caption, group)
    numberInName###prefix##ItemAttribute 'Порядковый номер в наименовании'##caption = DATA INTEGER (ItemAttribute) IN base;
    EXTEND FORM options PROPERTIES(ia) numberInName###prefix##ItemAttribute;

    name###prefix##AttributeItem 'Наименование'###caption (item) = VARISTRING[255](
                    [= GROUP CONCAT completeNameItemAttribute(item, attribute)
                                  IF numberInName###prefix##ItemAttribute(attribute) AND valueItemAttribute(item, attribute), ' ' BY item ORDER numberInName###prefix##ItemAttribute(attribute)](item))
                    IN group PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;
END

// -------------------------------------- Типы атрибутов ------------------------------- //

// Строка
CLASS StringItemAttribute 'Строковый атрибут' : ItemAttribute;

valueStringItemAttribute = ABSTRACT CASE EXCLUSIVE VARISTRING[255] (Item, StringItemAttribute) PERSISTENT;
valueItemAttribute(item, attribute) += valueStringItemAttribute(item, attribute);

META defineStringItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group);
END

// Целое число
CLASS IntegerItemAttribute 'Целочисленный атрибут' : ItemAttribute;

valueIntegerItemAttribute = ABSTRACT CASE EXCLUSIVE INTEGER (Item, IntegerItemAttribute) PERSISTENT;
stringIntegerItemAttribute(item, attribute) = VARSTRING[255](valueIntegerItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringIntegerItemAttribute(item, attribute);

META defineIntegerItemAttribute(attribute, caption, group)
    @definePrimitiveItemAttribute(attribute, INTEGER, caption, group);
END

// Дробное число
CLASS DoubleItemAttribute 'Дробный атрибут' : ItemAttribute;

valueDoubleItemAttribute = ABSTRACT CASE EXCLUSIVE DOUBLE (Item, DoubleItemAttribute) PERSISTENT;
stringDoubleItemAttribute(item, attribute) = VARSTRING[255]([= FORMULA TEXT PG 'convert_numeric_to_string(CAST(($1) AS numeric))' MS 'dbo.convert_numeric_to_string(CAST(($1) AS numeric(38,19)))'](valueDoubleItemAttribute(item, attribute)));
valueItemAttribute(item, attribute) += stringDoubleItemAttribute(item, attribute);

META defineDoubleItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group);
END

META defineObjectItemAttribute(attribute, attributeClass, identity, caption, group)
    attribute##Item = DATA attributeClass (Item);
    identity###attribute##Item caption (item) = identity###attribute(attribute##Item(item)) IN group;
    @defineItemAttribute(attribute, identity, caption, group);
END

// ------------------------------- Значения для групп по умолчанию ------------------------------------- //

GROUP defaultItemGroup 'По-умолчанию' : base;

META defineItemDefaultValue(property, caption, type, typeIdentity)
    data###property##ItemGroup caption = DATA type (ItemGroup);
    data###typeIdentity###property##ItemGroup caption (itemGroup) = typeIdentity(data###property##ItemGroup(itemGroup)) IN defaultItemGroup;
    
    levelParent###property##ItemGroup (itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF data###property##ItemGroup(parent)
                                                                  BY itemGroup PERSISTENT;    
    nearestParent###property##ItemGroup (itemGroup) = itemGroupItemGroupLevel(itemGroup, levelParent###property##ItemGroup(itemGroup));
    nearest###property##ItemGroup (itemGroup) = data###property##ItemGroup(nearestParent###property##ItemGroup (itemGroup));
    property##ItemGroup (itemGroup) =
        OVERRIDE nearest###property##ItemGroup (itemGroup), 
                 data###property##ItemGroup(itemGroup) PERSISTENT;    
    
    typeIdentity##ItemGroup caption (itemGroup) = typeIdentity(property##ItemGroup(itemGroup)) IN defaultItemGroup;
    EXTEND FORM itemGroup PROPERTIES(g) typeIdentity##ItemGroup;
END   
META defineItemDefaultValue(property, caption, type)
    data###property##ItemGroup caption = DATA type (ItemGroup) IN defaultItemGroup;
    
    levelParent###property##ItemGroup (itemGroup) = GROUP MIN level##ItemGroupItemGroup(child, parent) IF data###property##ItemGroup(parent)
                                                                  BY child PERSISTENT;    
    nearestParent###property##ItemGroup (itemGroup) = itemGroupItemGroup###level(itemGroup, levelParent###property##ItemGroup(itemGroup));
    nearest###property##ItemGroup (itemGroup) = data###property##ItemGroup(nearestParent###property##ItemGroup (itemGroup));
    property##ItemGroup caption (itemGroup) =
        OVERRIDE nearest###property##ItemGroup (itemGroup), 
                 data###property##ItemGroup(itemGroup) PERSISTENT IN defaultItemGroup;    
    
    EXTEND FORM itemGroup PROPERTIES(g) property##ItemGroup; 
END
  
//-- Для двух объектов: задание значения для групы по-умолчанию (иерархия)
META defineItemDefaultValue(property, caption, type, typeIdentity, object)
    data###property###object##ItemGroup caption = DATA type (###object, ItemGroup);
    data###typeIdentity###property###object##ItemGroup caption (object, itemGroup) = typeIdentity(data###property###object##ItemGroup(object, itemGroup)) IN defaultItemGroup;
    
    levelParent###property###object##ItemGroup (object, itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF data###property###object##ItemGroup(object, parent)
                                                                  BY object, itemGroup PERSISTENT;    
    nearestParent###property###object##ItemGroup (object, itemGroup) = itemGroupItemGroupLevel(itemGroup, levelParent###property###object##ItemGroup(object, itemGroup));
    nearest###property###object##ItemGroup (object, itemGroup) = data###property###object##ItemGroup(object, nearestParent###property###object##ItemGroup (object, itemGroup));
    
    property###object##ItemGroup (object, itemGroup) =
        OVERRIDE nearest###property###object##ItemGroup (object, itemGroup), 
                 data###property###object##ItemGroup(object, itemGroup) PERSISTENT;    
    
    typeIdentity###object##ItemGroup caption (object, itemGroup) = typeIdentity(property###object##ItemGroup(object, itemGroup)) IN defaultItemGroup;
END 

// Ограничения на выбор значений справочника
META defineItemFilterValue(object, caption)
    TABLE object##ItemGroup (###object, ItemGroup);
      
    dataIn###object##ItemGroup 'Вкл' = DATA BOOLEAN (###object, ItemGroup);
    
    levelParentIn###object##ItemGroup (object, itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF dataIn###object##ItemGroup(object, parent)
                                                                  BY object, itemGroup PERSISTENT;    
    nearestParentIn###object##ItemGroup (object, itemGroup) = itemGroupItemGroup###level(itemGroup, levelParentIn###object##ItemGroup(object, itemGroup));
    nearestIn###object##ItemGroup (object, itemGroup) = dataIn###object##ItemGroup(object, nearestParentIn###object##ItemGroup (object, itemGroup));
    
    in###object##ItemGroup 'Вкл' (object, itemGroup) =
        OVERRIDE nearestIn###object##ItemGroup (object, itemGroup), 
                 dataIn###object##ItemGroup(object, itemGroup) PERSISTENT;    
 
    countRec###object##ItemGroup 'Кол-во (рек.)' (object, itemGroup)= GROUP SUM 1 IF 
        in###object##ItemGroup(object, child) AND isParent##ItemGroup##ItemGroup(child, parent) 
            BY object, parent PERSISTENT;              
    countData##ItemGroup###object 'Кол-во групп' (object) = GROUP SUM 1 IF 
        dataIn###object##ItemGroup(object, itemGroup) BY object PERSISTENT;            

    CONSTRAINT object##Item(item) AND itemGroupItem(item) AND countData##ItemGroup###object(object##Item(item)) AND NOT countRec###object##ItemGroup(object##Item(item), itemGroupItem(item))
        CHECKED BY object##Item  
            MESSAGE caption##' должен быть доступен для товарной группы (товар)';    

    EXTEND FORM object
        TREE groupTree g=ItemGroup PARENT parentItemGroup
        PROPERTIES READONLY nameItemGroup(g)
        PROPERTIES in###object##ItemGroup(t,g)
        
        ORDER BY nameItemGroup(g)
        FILTERS activeItemGroup(g)
    ;
    EXTEND DESIGN object {
        main {
            ADD groupTree.tree.box BEFORE functions.box;
        }
    }
END

// ---------------------------- Выделение атрибутов -------------------------------- //

skipExtractItemAttribute = ABSTRACT BOOLEAN (Item);

// -------------- Символьное --------------------- //
FORM extractStringAttributeItem 'Выделение атрибута'
    OBJECTS from = VARSTRING[100] FIXED PANEL
    PROPERTIES(from) from = OBJVALUE
    
    OBJECTS to = VARSTRING[100] FIXED PANEL
    PROPERTIES(to) to = OBJVALUE
;

possibleStringAttributeValue = DATA SESSION BOOLEAN (VARSTRING[100]);
changePossibleStringAttributeValue = ACTION (v) {
    SEEK extractStringAttributeItem.to v;
}
 
EXTEND FORM extractStringAttributeItem
    OBJECTS v = VARSTRING[100] FIXED GRID
    PROPERTIES(v) value = OBJVALUE ON CHANGE changePossibleStringAttributeValue(v) 
    FILTERS possibleStringAttributeValue(v)
    ORDER BY value
;

DESIGN extractStringAttributeItem FROM DEFAULT {
    PROPERTY(from) {
        caption = 'Последовательность символов, которую извлечь';
        font = '32';
        panelLabelAbove = TRUE;
    }
    PROPERTY(to) {
        caption = 'Последовательность символов, на которую заменить';
        font = '32';
        panelLabelAbove = TRUE;
    }
    v.box {
        caption = 'Возможные значения';
        PROPERTY(value) {
            caption = 'Значение';
        }
    }
}

assignStringToFrom = ACTION (from) {
    SEEK extractStringAttributeItem.to from; 
} 
EXTEND FORM extractStringAttributeItem
    EVENTS 
        ON CHANGE from assignStringToFrom(from);
;

META defineItemExtractObjectAttribute(object, objectIdentity, identityObject)
    extract###object##FromCaptionItem 'Выделить из названия' = ACTION (i) {
        IF i IS Item THEN {
            possibleStringAttributeValue(s) <- TRUE IF [= GROUP SUM 1 IF in###object##ItemGroup(object, g) BY objectIdentity(object), g](s, itemGroupItem(i));
            FORM extractStringAttributeItem MODAL;
            IF formResult() == FormResult.ok THEN {
                LOCAL object = ###object();
                object() <- identityObject(chosenString('to'));
                IF NOT object() THEN {
                    FOR ADDOBJ a = ###object DO {
                        objectIdentity(a) <- chosenString('to');
                        object() <- a;
                    }
                }
                LOCAL selected = BOOLEAN (Item);
                selected(item) <- isSubstring(captionItem(item), chosenString('from')) == 1 AND [= FILTER items.i](item) AND NOT skipExtractItemAttribute(item);
                dataIn###object##ItemGroup(a, g) <- TRUE WHERE a == object() AND [= GROUP SUM 1 IF selected(item) BY itemGroupItem(item)](g);
                object##Item(item) <- object() WHERE selected(item);
                // вырезаем двойные пробелы, а также ненужные символы в начале и конце
                captionItem(item) <- rtrim(
                                        ltrim(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(
                                                            replace(captionItem(item), chosenString('from'), ''), 
                                                            '  ', ' '),
                                                        '" "', ''),
                                                    '""', ''),
                                                '  ', ' '),
                                            ' ,.'), 
                                        ' ,.') WHERE selected(item);
            }
        }
    } SHORTCUT objectIdentity##Item;
END

META defineItemExtractPrimitiveAttribute(property, form, fromProp)
    extract###property##FromCaptionItem 'Выделить из названия' = ACTION (i) {
        IF i IS Item THEN {
            possibleStringAttributeValue(s) <- NULL;
            FORM form MODAL;
            IF formResult() == FormResult.ok THEN {
                LOCAL selected = BOOLEAN (Item);
                selected(item) <- isSubstring(captionItem(item), chosenString('from')) == 1 AND [= FILTER items.i](item) AND NOT skipExtractItemAttribute(item);
                property##Item(item) <- fromProp('to') WHERE selected(item);
                // вырезаем двойные пробелы, а также ненужные символы в начале и конце
                captionItem(item) <- rtrim(
                                        ltrim(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(
                                                            replace(captionItem(item), chosenString('from'), ''), 
                                                            '  ', ' '),
                                                        '" "', ''),
                                                    '""', ''),
                                                '  ', ' '),
                                            ' ,.'), 
                                        ' ,.') WHERE selected(item);
            }
        }
    } SHORTCUT property##Item;
END

// -------------- Символьное --------------------- //

META defineItemExtractStringAttribute(property)
    @defineItemExtractPrimitiveAttribute(property, extractStringAttributeItem, chosenString);
END

// -------------- Числовое --------------------- //
FORM extractDoubleAttributeItem 'Выделение атрибута'
    OBJECTS from = VARSTRING[100] FIXED PANEL
    PROPERTIES(from) from = OBJVALUE
    
    OBJECTS to = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(to) to = OBJVALUE
;

DESIGN extractDoubleAttributeItem FROM DEFAULT {
    PROPERTY(from) {
        caption = 'Последовательность символов, которую извлечь';
        font = '32';
        panelLabelAbove = TRUE;
    }
    PROPERTY(to) {
        caption = 'Число, которое использовать';
        font = '32';
        panelLabelAbove = TRUE;
    }
}

assignDoubleToFrom = ACTION (from) {
    SEEK extractDoubleAttributeItem.to toInteger(replace(from AS VARSTRING[100], '%', ''));
} 
EXTEND FORM extractDoubleAttributeItem
    EVENTS 
        ON CHANGE from assignDoubleToFrom(from);
;

META defineItemExtractDoubleAttribute(property)
    @defineItemExtractPrimitiveAttribute(property, extractDoubleAttributeItem, chosenNumeric);
END

// ---------------------------- Конкретные свойства -------------------------------- //

GROUP itemBase 'Базовые свойства' : base;
GROUP itemOriginal 'Оригинальные свойства' : base;

// Неактивный
inactiveItemGroup 'Неактивная' = DATA BOOLEAN (ItemGroup);
activeItemGroup 'Активный' (group) = group IS ItemGroup AND NOT inactiveItemGroup(group);
inactiveSkuGroup(group) += inactiveItemGroup(group);

EXTEND FORM itemGroup PROPERTIES(g) inactiveItemGroup;
EXTEND FORM itemGroups
    PROPERTIES(g) READONLYIF isReadonly() inactiveItemGroup BEFORE canonicalNameItemGroup(g)
    FILTERGROUP inactive FILTER 'Активные' 'F10' activeItemGroup(g) DEFAULT
;
EXTEND FORM dialogItemGroups
    FILTERGROUP inactive FILTER 'Активные' 'F10' activeItemGroup(tg) DEFAULT
    FILTERGROUP inactive1 FILTER 'Активные' 'F10' activeItemGroup(g) DEFAULT;

// Группа
@implementItemAttribute(nameItemGroup, 'Группа товаров', String, itemItemGroup);

// ------ Базовые свойства товара ------ //

// Название
@defineStringItemAttribute(caption, VARISTRING[255], 'Название', itemBase);

@defineItemDefaultValue(caption, 'Название', VARISTRING[255]);
WHEN SESSION CHANGED(itemGroupItem(i)) AND NOT captionItem(i) DO
    captionItem(i) <- captionItemGroup(itemGroupItem(i));

@defineItemAttributeBatch (caption, 'Название');
@implementItemAttribute(caption, 'Название', String, itemCaption);

extractStringCaptionItem 'Заменить в названии' = ACTION (i) {
    IF i IS Item THEN {
        possibleStringAttributeValue(s) <- NULL;
        FORM extractStringAttributeItem MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL selected = BOOLEAN (Item);
            selected(item) <- isSubstring(captionItem(item), chosenString('from')) == 1 AND [= FILTER items.i](item) AND NOT skipExtractItemAttribute(item);
            // вырезаем двойные пробелы, а также ненужные символы в начале и конце
            captionItem(item) <- rtrim(
                                    ltrim(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(captionItem(item), chosenString('from'), chosenString('to')), 
                                                        '  ', ' '),
                                                    '" "', ''),
                                                '""', ''),
                                            '  ', ' '),
                                        ' ,.'), 
                                    ' ,.') WHERE selected(item);
        }
    }
} SHORTCUT captionItem;

@defineStringItemAttribute(originalCaption, VARISTRING[100], 'Название (ориг.)', itemOriginal);
@defineItemAttributeBatch (originalCaption, 'Название (ориг.)');

// Единица измерения
@defineObjectItemAttribute(UOM, UOM, name, 'Единица измерения', itemBase);
@defineObjectItemAttributeBatch (UOM, nameUOM, 'Единица измерения', sku);

shortNameUOMItem 'Единица измерения' (item) = shortNameUOM(UOMItem(item)) IN itemBase;
UOMSku(item) += UOMItem(item);

@defineItemDefaultValue(UOM, 'Ед. изм.', UOM, nameUOM); 
WHEN SESSION CHANGED(itemGroupItem(i)) AND NOT UOMItem(i) DO
    UOMItem(i) <- UOMItemGroup(itemGroupItem(i));

//@implementObjectShortItemAttribute(UOM, 'Единица измерения (сокр.)');
@implementItemAttribute(shortNameUOM, 'Единица измерения (сокр.)', String, itemShortUOM);

// Брэнд
CLASS Brand 'Бренд';
TABLE brand(Brand);

@defineExternalizable(brand, VARSTRING[100]);

nameBrand 'Наименование' = DATA VARISTRING[50](Brand);
brandName = GROUP AGGR brand BY nameBrand(brand);

siteBrand 'Адрес сайта' = DATA VARISTRING[100](Brand);

FORM brand 'Бренд'
    OBJECTS t=Brand FIXED PANEL
    PROPERTIES(t) nameBrand, siteBrand, idBrand SHOWIF showIDs()
    EDIT Brand OBJECT t
;

FORM brands 'Бренды'
    OBJECTS t=Brand
    PROPERTIES(t) nameBrand READONLY, siteBrand READONLY, idBrand READONLY SHOWIF showIDs(), deleteb=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameBrand(t)
    DIALOG Brand OBJECT t
;
DESIGN brands FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(brand, Brand, name, 'Бренд', itemBase);
@defineObjectItemAttributeBatch (brand, nameBrand, 'Бренд');
@implementItemAttribute(nameBrand, 'Бренд', String, itemBrand);

@defineItemFilterValue(brand, 'Бренд');
@defineItemExtractObjectAttribute(brand, nameBrand, brandName);

// Страна
@defineObjectItemAttribute(country, Country, name, 'Страна', itemBase);
@defineObjectItemAttributeBatch (country, nameCountry, 'Страна', sku);
@implementItemAttribute(nameCountry, 'Страна', String, itemCountry);

residentItem 'Отечественное производство' (item) = residentCountry(countryItem(item)) IN itemBase;
countrySku(sku) += countryItem(sku);

// Производитель
CLASS Manufacturer 'Производитель товара';
TABLE manufacturer(Manufacturer);

@defineExternalizable(manufacturer, VARSTRING[100]);

nameManufacturer 'Наименование' = DATA VARISTRING[100](Manufacturer) MINCHARWIDTH 15 PREFCHARWIDTH 25;
addressManufacturer 'Адрес производителя' = DATA VARSTRING[255] (Manufacturer) MINCHARWIDTH 20 PREFCHARWIDTH 40;

FORM manufacturer 'Производитель товара'
    OBJECTS m=Manufacturer FIXED PANEL
    PROPERTIES(m) nameManufacturer, addressManufacturer, idManufacturer SHOWIF showIDs()
    EDIT Manufacturer OBJECT m
;

DESIGN manufacturer FROM DEFAULT {
    main{
        PROPERTY(nameManufacturer(m)){
            preferredCharWidth = 50;    
        }
     }       
}

FORM manufacturerDialog 'Производители товара'
    OBJECTS m=Manufacturer
    PROPERTIES(m) nameManufacturer READONLY, idManufacturer READONLY SHOWIF showIDs(), DELETE FORCE PANEL TOOLBAR
    PROPERTIES(m) ADDFORM, EDITFORM
    ORDER BY nameManufacturer(m)
    DIALOG Manufacturer OBJECT m
;
DESIGN manufacturerDialog FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(manufacturer, Manufacturer, name, 'Производитель', itemBase);
@defineObjectItemAttributeBatch (manufacturer, nameManufacturer, 'Производитель');
@implementItemAttribute(nameManufacturer, 'Производитель', String, itemManufacturer);

addressManufacturerItem 'Адрес производителя' (item) = addressManufacturer(manufacturerItem(item)); 

//  Состав
@defineStringItemAttribute(composition, VARSTRING[255], 'Состав', itemBase);
@defineItemAttributeBatchClass (composition, 'Состав', sku);
compositionSku (sku) += compositionItem(sku);

@defineStringItemAttribute(originalComposition, STRING[255], 'Состав (ориг.)', itemOriginal);

// Тара
skuTypeItem = DATA SkuType (Item);
skuTypeSku (sku) += skuTypeItem(sku);

skuTypeItem(item) <- SkuType.skuTypeItem WHEN SET(item IS Item);

nameSkuTypeItem 'Тип SKU' (item) = staticCaption(skuTypeItem(item)) IN itemBase;
EXTEND FORM item PROPERTIES(i) nameSkuTypeItem;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() nameSkuTypeItem;

// Весовой
@definePrimitiveItemAttribute(split, BOOLEAN, 'Дробный', itemBase);
splitSku(sku) += splitItem(sku);

splitItem(i) <- splitUOM(UOMItem(i)) WHEN CHANGED(UOMItem(i));

// Фиксированная цена
@definePrimitiveItemAttribute(fixedPrice, BOOLEAN, 'Товар с фиксированной ценой', itemBase);
fixedPriceSku(sku) += fixedPriceItem(sku);

// Неактивный
inactiveItem 'Неактивный' = DATA BOOLEAN (Item) IN itemBase;
prevInactiveItem (i) = PREV(inactiveItem(i));

activeItem 'Активный' (item) = item IS Item AND NOT inactiveItem(item);
prevActiveItem = i IS Item AND NOT prevInactiveItem(i);

inactiveSku(sku) += inactiveItem(sku);
EXTEND FORM item PROPERTIES(i) inactiveItem;
EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() inactiveItem
    FILTERGROUP inactive2 FILTER 'Активные' 'F10' prevActiveItem(i) DEFAULT
;

EXTEND DESIGN item {
    itemPrimaryColumn1 {
        ADD i.itemBase {
            columns = 2;
            PROPERTY(compositionItem(i)) {
                minimumCharWidth = 20;
                preferredCharWidth = 40;
            }
        }
        ADD i.itemOriginal {
            columns = 2;
        }
    }
}
EXTEND DESIGN item {
    itemPrimaryColumn1 {
        NEW regionPrm AFTER i.itemBase {
            type = COLUMNS;
            columns = 2;
            caption = 'Региональные свойства';
        }
    }
}

// ------ Габариты товара ------ //

GROUP itemSize 'Габариты товара' : public;

// Вес нетто
@defineDoubleItemAttribute(netWeight, NUMERIC[11,5], 'Вес нетто, кг', itemSize);
@defineItemAttributeBatchClass (netWeight, 'Вес нетто, кг', sku);
@implementItemAttribute(netWeight, 'Вес нетто, кг', Double, itemNetWeight);
netWeightSku(sku) += netWeightItem(sku);
netWeightItem(i) <- netWeightUOM(UOMItem(i)) WHEN CHANGED(UOMItem(i));

// Вес брутто
@defineDoubleItemAttribute(grossWeight, NUMERIC[11,5], 'Вес брутто, кг', itemSize);
@defineItemAttributeBatchClass (grossWeight, 'Вес брутто, кг', sku);
grossWeightSku(sku) += grossWeightItem(sku);

grossWeightItem(sku) <- (OVERRIDE netWeightItem(sku), grossWeightUOM(UOMItem(sku)))
    WHEN CHANGED(netWeightItem(sku)) OR CHANGED(UOMItem(sku));
// Кол-во в грузовом месте
// todo : здесь скорее всего надо будет рефакторить на более сложную логику
//@defineDoubleItemAttribute(packQuantity, NUMERIC[9,3], 'Количество в грузовом месте', itemSize);
//packQuantitySku(sku) += packQuantityItem(sku);

EXTEND DESIGN item {
    itemPrimaryColumn2 {
        ADD i.itemSize {
            columns = 2;
        }
    }
}

loadDefaultItemAttributes 'Загрузить стандартные атрибуты товаров' = ABSTRACT ACTION LIST ();
@implementLoadDefaultData(loadDefaultItemAttributes);

// ---------------------------------------------- Формирование наименований -------------------------------------- //

// Базовое наименование
@defineItemAttributeName( , , recognize);

EXTEND FORM item PROPERTIES(i) READONLY nameAttributeItem;
EXTEND DESIGN item { itemHeader {ADD PROPERTY(nameAttributeItem(i)); } }

nameSku(item) += nameAttributeItem(item);
loadDefaultItemAttributes() += ACTION {
    ASSIGN numberInNameItemAttribute(a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}

//nameAttributeGroupGroupTypeItem 'Наименование' (group, groupType, item) = nameAttributeItem(item) IF
//    hasParentGroupGroupTypeItem(group, groupType, item) PERSISTENT INDEXED;

EXTEND FORM items
    PROPERTIES READONLY AFTER idBarcodeSku(i) nameAttributeItem(i) // вообще надо использовать nameAttributeGroupGroupTypeItem(g, gt, i) для скорости, но тогда не будет работать отбор без групп
    PROPERTIES READONLYIF isReadonly() canonicalNameGroupGroupTypeSku(gt,i) AFTER nameAttributeItem(i)

    FILTERGROUP groupFilters
        FILTER 'С группами' 'F9' isParentGroupSku(g, i) DEFAULT
        FILTER 'Без групп' 'F8' nameAttributeItem(i) IF gt IS GroupType AND NOT groupGroupTypeSku(gt,i)

    ORDER BY nameAttributeItem(i)
;

EXTEND DESIGN items {
    PROPERTY(canonicalNameGroupGroupTypeSku(gt,i)) {
        caption = 'Полное имя группы';
    }
}    
// Кассы
@defineItemAttributeName(cashRegister, ' (кассы)', public);
dataTitleCashRegisterBarcode 'Наименование для касс' = DATA VARSTRING[100] (Barcode);
titleCashRegisterBarcode 'Наименование для касс' = OVERRIDE nameCashRegisterAttributeItem(skuBarcode(barcode)), dataTitleCashRegisterBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    ASSIGN numberInNameCashRegisterItemAttribute(a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}
// Весы
@defineItemAttributeName(scales, ' (весы)', public);
dataTitleScalesBarcode 'Наименование для весов' = DATA VARSTRING[100] (Barcode);
titleScalesBarcode 'Наименование для весов' = OVERRIDE nameScalesAttributeItem(skuBarcode(barcode)), dataTitleScalesBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    ASSIGN numberInNameScalesItemAttribute(a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}
EXTEND FORM item PROPERTIES(b) BEFORE deleteb titleScalesBarcode, titleCashRegisterBarcode;

// --------------------------------------- Генерация штрихкодов --------------------------------------------- //

META defineNumeratorItemGroup (prefix, caption)
    data###prefix##NumeratorItemGroup = DATA Numerator (ItemGroup);
    levelParent###prefix##NumeratorItemGroup (itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF data###prefix##NumeratorItemGroup(parent)
                                                                  BY itemGroup PERSISTENT;
    nearestParent###prefix##NumeratorItemGroup (itemGroup) = itemGroupItemGroupLevel(itemGroup, levelParent###prefix##NumeratorItemGroup(itemGroup));
    nearest###prefix##NumeratorItemGroup (itemGroup) = data###prefix##NumeratorItemGroup(nearestParent###prefix##NumeratorItemGroup(itemGroup)) PERSISTENT;

    prefix##NumeratorItemGroup (itemGroup) =
        OVERRIDE nearest###prefix##NumeratorItemGroup(itemGroup), data###prefix##NumeratorItemGroup(itemGroup) PERSISTENT;
    name###prefix##NumeratorItemGroup caption (itemGroup) = nameNumerator(prefix##NumeratorItemGroup(itemGroup)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 10;

    background###prefix##NumeratotItemGroup (itemGroup) = IF data###prefix##NumeratorItemGroup(itemGroup) THEN
                                                                      RGB(190,190,190) IF itemGroup IS ItemGroup
                                                                  ELSE
                                                                      RGB(230,230,230) IF prefix##NumeratorItemGroup (itemGroup);

    EXTEND FORM itemGroup PROPERTIES(g)  AFTER nameParentItemGroup(g) name###prefix##NumeratorItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) AFTER canonicalNameItemGroup(g) READONLYIF isReadonly() name###prefix##NumeratorItemGroup  BACKGROUND background###prefix##NumeratotItemGroup(g);
END

@defineNumeratorItemGroup (piece, 'Нумератор штрихкодов (для штучного товара)');
pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));

overNumeratorItem = ABSTRACT CASE Numerator (Item);
barcodeNumeratorSku(item) += OVERRIDE pieceNumeratorItem(item), overNumeratorItem(item);

DESIGN itemGroup FROM DEFAULT{
    main {
        NEW itemGroupHeader BEFORE functions.box {
            NEW itemGroupHeader1 {
                caption = 'Товарная группа';
                type = CONTAINERH;
                ADD PROPERTY(idItemGroup(g));
                ADD PROPERTY(nameItemGroup(g));
                ADD PROPERTY(nameParentItemGroup(g));
                ADD PROPERTY(inactiveItemGroup(g));
            }

            NEW itemGroupHeader2 {
                caption = 'Нумераторы';
                type = CONTAINERH;
                ADD PROPERTY(namePieceNumeratorItemGroup(g));
            }
        }

        NEW itemGroupDetail BEFORE functions.box {
            ADD g.itemBase {
                columns = 6;
            }
            ADD g.itemOriginal {
                columns = 6;            
            }
            ADD g.itemSize {
                columns = 6;
            }
            ADD g.defaultItemGroup {
                columns = 6;
            }
        }
    }
}

// ---------------------------------------- Копирование товара ----------------------- //
overCopyItem = ABSTRACT ACTION LIST (Item, Item);
overCopyItemBarcode = ABSTRACT ACTION LIST (Barcode, Barcode, Sku);

copyDataItem = ACTION (item, i) {
    itemGroupItem(i) <- itemGroupItem(item);
    captionItem(i) <- captionItem(item);
    originalCaptionItem(i) <- originalCaptionItem(item);
    UOMItem(i) <- UOMItem(item);
    brandItem(i) <- brandItem(item);
    manufacturerItem(i) <- manufacturerItem(item);
    compositionItem(i) <- compositionItem(item);
    originalCompositionItem(i) <- originalCompositionItem(item);
    netWeightItem(i) <- netWeightItem(item);
    grossWeightItem(i) <- grossWeightItem(item);
    countryItem(i) <- countryItem(item);
    dataImageItem(i) <- dataImageItem(item);
    skuTypeItem(i) <- skuTypeItem(item);
    splitItem(i) <- splitItem(item);
    inactiveItem(i) <- inactiveItem(item);

    FOR skuBarcode(barcode) == item DO {
        FOR ADDOBJ b = Barcode DO {
            skuBarcode(b) <- i;
            dataDateBarcode(b) <- dataDateBarcode(barcode);
            dataUOMBarcode(b) <- dataUOMBarcode(barcode);
            dataAmountBarcode(b) <- dataAmountBarcode(barcode);
            dataTitleScalesBarcode(b) <- dataTitleScalesBarcode(barcode);
            dataTitleCashRegisterBarcode(b) <- dataTitleCashRegisterBarcode(barcode);
            
            overCopyItemBarcode(b, barcode, i);
        }
    }

    customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeItem(type, item);

    EXEC overCopyItem(item, i);
}

copyItem 'Копировать' = ACTION (item) {
    IF (item IS Item) THEN {
        NEWSESSION (addedSku) {
            FOR ADDOBJ i = Item DO {
                copyDataItem(item, i);
                FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
                IF formResult() == FormResult.ok THEN {
                    addedSku() <- i;
                }
            }
        }
    }
} EDITKEY 'F5' TOOLBAR;

copyItemsItem 'Копировать' = ACTION (item) {
    copyItem(item);
    IF (addedSku()) THEN {
        SEEK items.i addedSku();
    }
} EDITKEY 'F5' TOOLBAR;

EXTEND FORM items PROPERTIES (i) copyItemsItem;
EXTEND DESIGN items { PROPERTY(copyItemsItem(i)) { focusable = FALSE; } }

copySku(sku) += ACTION copyItem(sku);

createItemBarcodeDate = ACTION (barcode, date) NEWSESSION {

    LOCAL copy = BOOLEAN();
    IF skuAddedUser(currentUser()) IS Item THEN {
        CONFIRM 'Создать товар на основе последнего созданного ?';
        ASSIGN copy() <- confirmed();
    }

    IF copy() THEN {
        FOR ADDOBJ i = Item DO {
            copyDataItem(skuAddedUser(currentUser()), i);
            idBarcode(b) <- barcode WHERE skuBarcode(b) == i AND primaryBarcode(b);
            FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } ELSE {
        FOR ADDOBJ bc = Barcode DO {
            idBarcode(bc) <- barcode;
            dataDateBarcode(bc) <- date;

            FOR ADDOBJ s = Item DO {
                skuBarcode(bc) <- s;
                FORM item OBJECTS i = s, b = bc MANAGESESSION DOCKEDMODAL;
            }
        }
    }
}

createSkuBarcodeDate(barcode, date) += ACTION createItemBarcodeDate(barcode, date);

inItem 'Отм.' = DATA SESSION BOOLEAN (Item);

countInItem = GROUP SUM 1 IF inItem(item);

checkReplaceItem = ABSTRACT ACTION (Item);

FORM confirmReplaceItem 'Объединяемые товары'
    OBJECTS item = Item FIXED PANEL 

    OBJECTS i = Item  
    PROPERTIES(i) READONLY nameAttributeItem
    FILTERS i==item

    OBJECTS i2 = Item
    PROPERTIES(i2) inItem
    PROPERTIES(i2) READONLY nameAttributeItem
    FILTERS inItem(i2)
;

DESIGN confirmReplaceItem FROM DEFAULT {
    REMOVE item.box;
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        ADD i.box{
            caption = 'Основной товар';
        }
        ADD i2.box{
            caption = 'Удаляемый товар';
        }           
    }
    ADD functions.box;
}

replaceItem 'Объединить' = ACTION (item) {
    FORM confirmReplaceItem OBJECTS i=item MODAL;
    IF formResult() == FormResult.ok THEN {
        allowReplaceItem() <- TRUE;
        checkReplaceItem(item);
        FOR inItem(i) AND allowReplaceItem() DO{
            IF i != item THEN {
                replaceSkuSku(i, item);
                inItem(i) <- NULL;
                DELETE i;            
            } ELSE {
                MESSAGE 'Выделенный товар не может совпадать с объединяемым';
            }
        }
        apply();
    } ELSE {
        inItem(i) <- NULL WHERE inItem(i);           
    }   
} CONFIRM;

changeGroupItem 'Изменить группу' = ACTION (){
    FORM dialogItemGroups MODAL;

    IF formResult() == FormResult.ok THEN {
        FOR inItem(i) DO{
            ASSIGN itemGroupItem(i) <- chosenObject('g');
        }
    }
}


EXTEND FORM items
    PROPERTIES(i) inItem BEFORE idBarcodeSku(i), replaceItem FORCE PANEL
;
EXTEND DESIGN items {
    row21 {
        ADD PROPERTY(replaceItem(i));
    }
}

// -------------------- Автоматическое проставление даты параметров ------------------ //

defaultItemDate 'Дата для региональных параметров по умолчанию' = DATA DATE();
EXTEND FORM options PROPERTIES() defaultItemDate;
EXTEND DESIGN options { 
    items { 
        ADD PROPERTY(defaultItemDate()); 
    } 
}

seekItemDate() = ACTION () {
    IF defaultItemDate() THEN {
        SEEK item.dtr defaultItemDate();
    }
}
EXTEND FORM item
    EVENTS ON INIT seekItemDate()
;
NAVIGATOR {
    skuNavigator {
        NEW itemAttributeNavigator 'Атрибуты' {
            ADD brands;
            ADD manufacturerDialog;
        }
    }
}

//----------- Задание значения по-умолчанию ----------------//
TABLE customGroupTypeItemGroup(CustomGroupType, ItemGroup);
@defineItemDefaultValue(customGroup, 'Дополнительная группа (по-умолчанию)', CustomGroup, nameCustomGroup, customGroupType);


EXTEND FORM itemGroup
    OBJECTS dc=CustomGroupType 
    PROPERTIES(dc)   READONLY nameCustomGroupType, idCustomGroupType
    PROPERTIES(dc, g) nameCustomGroupCustomGroupTypeItemGroup    
;    
EXTEND DESIGN itemGroup {

    NEW type BEFORE functions.box{
        fill = 1;
        NEW detail {
            fill = 1;
            caption = 'По-умолчанию';
            ADD g.defaultItemGroup {
                caption ='';
                columns = 6;
            }
            NEW detail1{
                fill = 1;
                type = TABBED;
                ADD dc.box { caption = 'Дополнительный классификатор';}
            }            
        }          
    }
}

WHEN SESSION CHANGED(itemGroupItem(i)) AND dc IS CustomGroupType AND NOT customGroupCustomGroupTypeItem(dc, i) DO
    customGroupCustomGroupTypeItem(dc, i) <- customGroupCustomGroupTypeItemGroup(dc, itemGroupItem(i));

// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultItemGroup 'Добавить группы товаров' = ACTION (iname, id) {
    FOR ADDOBJ g = ItemGroup DO {
        nameItemGroup(g) <- iname;
        idItemGroup(g) <- id;
        userShowCaptionItemGroup(g) <- TRUE;
        userShowUOMItemGroup(g) <- TRUE;
        userShowBrandItemGroup(g) <- TRUE;
        userShowManufacturerItemGroup(g) <- TRUE;
        userShowCountryItemGroup(g) <- TRUE;
    }
}

loadDefaultItemGroups 'Загрузить стандарные группы товаров' () = ACTION () {
    loadDefaultItemGroup('Все','Все');    

} IN loadDefault;

@implementLoadDefaultData(loadDefaultItemGroups);
