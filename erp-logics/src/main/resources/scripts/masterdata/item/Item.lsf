MODULE Item;

REQUIRE System, Stock, Hierarchy, Barcode, PriceListType, PriceListCalc;

// ------------------------------------ Классификатор товаров --------------------------- //

CLASS ItemGroup 'Товарная группа' : SkuGroup;
TABLE itemGroup (ItemGroup);

nameItemGroup 'Наименование' = DATA ISTRING[100](ItemGroup);

nameSkuGroup(group) += nameItemGroup(group) IF group IS ItemGroup;

TABLE itemGroupItemGroup(ItemGroup, ItemGroup);
@defineHierarchy(itemGroup);

parentSkuGroup (itemGroup) += parentItemGroup(itemGroup);

inItemGroup 'Отм.' = DATA SESSION BOOLEAN (ItemGroup);

moveItemGroup 'Перенести отмеченные группы в текущую' = ACTION (itemGroup){

    FOR inItemGroup(i) DO{
        IF i != itemGroup THEN {
            SET parentItemGroup(i) <- itemGroup;
            SET inItemGroup(i) <- NULL;
        } ELSE {
            MESSAGE 'Выделенный товарная группа не может совпадать с объединяемой';
        }
    }
}

// ------------------ Формы  --------------------- //

FORM itemGroup 'Товарная группа'
    OBJECTS g=ItemGroup FIXED PANEL
    PROPERTIES(g) nameItemGroup, nameParentItemGroup
    EDIT ItemGroup OBJECT g
;

FORM itemGroups 'Товарные группы'
    TREE treeGroups g=ItemGroup PARENT parentItemGroup
    PROPERTIES inItemGroup(g), moveItemGroup(g) TODRAW g FORCE PANEL TOOLBAR
    PROPERTIES READONLY nameItemGroup(g), canonicalNameItemGroup (g)
    PROPERTIES(g) ADDFORM, EDITFORM, deleteg=DELETE
    ORDER BY canonicalNameItemGroup
;

FORM dialogItemGroups 'Товарные группы'
    TREE treeGroups tg=ItemGroup PARENT parentItemGroup
    PROPERTIES READONLY nameItemGroup(tg)
    ORDER BY nameItemGroup

    OBJECTS g=ItemGroup
    PROPERTIES(g) nameItemGroup READONLY, canonicalNameItemGroup READONLY, DELETE
    PROPERTIES(g) ADDFORM, EDITFORM
    ORDER BY canonicalNameItemGroup

    FILTERS isParentItemGroupItemGroup(g, tg)

    DIALOG ItemGroup OBJECT g
;

DESIGN dialogItemGroups FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
            NEW rootContainer BEFORE functions.box{
                childConstraints = TO THE RIGHT;
                type = SPLITH;

            ADD treeGroups.tree.box {
                fillHorizontal = 2;
            }

            ADD g.box {
                fillHorizontal = 4;
            }
        }
    }
}

NAVIGATOR {
    skuNavigator {
        ADD itemGroups BEFORE UOMs;
    }
}
// ----------------------------------- Товары ----------------------------------- //

CLASS Item 'Товар' : Sku;
TABLE item(Item);

TABLE itemDate (Item, DATE);
TABLE itemCountry (Item, Country);
TABLE itemCountryDate (Item, Country, DATE);

// Связь с группой товаров
itemGroupItem = DATA ItemGroup(Item) AUTOSET;
skuGroupSku(item) += itemGroupItem(item);
//roundSkuGroupSkuSku(item) += itemGroupItem(item);

nameItemGroupItem 'Группа товара' (item) = nameItemGroup(itemGroupItem(item));
canonicalNameItemGroupItem 'Группа товара' (item) = canonicalNameItemGroup(itemGroupItem(item)) IN base;

TABLE itemGroupItem (ItemGroup, Item);

isParentItemGroupItem (itemGroup, item) = isParentItemGroupItemGroup(itemGroupItem(item), itemGroup) PERSISTENT;

// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeItem(CustomGroupType, Item);
customGroupCustomGroupTypeItem = DATA CustomGroup (CustomGroupType, Item);
customGroupCustomGroupTypeSku(type, item) += customGroupCustomGroupTypeItem(type, item);

nameCustomGroupCustomGroupTypeItem 'Имя' (type, item) = nameCustomGroup(customGroupCustomGroupTypeItem(type, item));
canonicalNameCustomGroupCustomGroupTypeItem 'Каноническое имя' (type, item) = canonicalNameCustomGroup(customGroupCustomGroupTypeItem(type, item));

CONSTRAINT customGroupTypeCustomGroup(customGroupCustomGroupTypeItem(type, item)) != type
           CHECKED BY customGroupCustomGroupTypeItem
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';

// Атрибуты
imageItem 'Изображение' = DATA IMAGEFILE (Item);
loadImageItem 'Загрузить изображение' (item) = ACTION LOADFILE imageItem(item);

// -------------------------------- Надбавки для расчетных видов цен --------------------------------//

currentBasePricePriceListTypeSkuStock 'Базовая цена' (type, sku, stock) = pricePriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), sku, stock, currentDateTime());

currentCalcPricePriceListTypeSkuStock 'Расчетная цена' (type, sku, stock) = pricePriceListTypeSkuStockDateTime(type, sku, stock, currentDateTime());

// ------------------------------------ Формы -------------------------- //
FORM item 'Товар'

    OBJECTS i=Item FIXED PANEL

    PROPERTIES(i) canonicalNameItemGroupItem, idBarcodeSku READONLY,
                  imageItem, loadImageItem

    OBJECTS b=Barcode
    PROPERTIES(b)       idBarcode, dateBarcode, shortNameUOMBarcode,
                        amountBarcode, activeBarcode, primaryBarcode ON CHANGE changePrimaryBarcodeSku(b,i)
    PROPERTIES(i)       generateBarcodeSku TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, deleteb=DELETESESSION
    FILTERS skuBarcode(b) == i

    OBJECTS cgt = CustomGroupType
    PROPERTIES nameCustomGroupType(cgt) READONLY, canonicalNameCustomGroupCustomGroupTypeItem(cgt, i)

    OBJECTS dtr = DATE FIXED PANEL
    PROPERTIES (dtr) OBJVALUE BACKGROUND dateDiffersCurrent(dtr)

    OBJECTS c = Country
    PROPERTIES (c) READONLY nameCountry

    OBJECTS st2 = Stock FIXED PANEL
    PROPERTIES(st2) SELECTOR nameStock

    OBJECTS ct = CalcPriceListType
    PROPERTIES(ct) READONLY nameCalcPriceListType, includeVATPriceListType, nameCurrencyCalcPriceListType, nameRoundConditionPriceListType,
                            nameBasePriceListTypeCalcPriceListType
    PROPERTIES(ct, i, st2) READONLY currentBasePricePriceListTypeSkuStock
    PROPERTIES(ct, i) markupCalcPriceListTypeSku
    PROPERTIES(ct, i, st2) READONLY currentCalcPricePriceListTypeSkuStock

    EDIT Item OBJECT i
;

DESIGN item FROM DEFAULT {
    main {
        NEW itemHeader BEFORE functions.box {
            childConstraints = TO THE RIGHT;
            NEW itemHeaderColumn1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(canonicalNameItemGroupItem);
                ADD PROPERTY(idBarcodeSku);
            }
            NEW itemHeaderColumn2 {
                childConstraints = TO THE BOTTOM;
            }
        }
        NEW itemDetail BEFORE functions.box {
            type = TABBED;
            NEW itemPrimary {
                childConstraints = TO THE BOTTOM;
                title = 'Основные данные';
                fillVertical = 1.0;
                fillHorizontal = 1.0;

                NEW itemPrimaryRow1 {
                    childConstraints = TO THE RIGHT;
                    NEW itemPrimaryColumn1 {
                        childConstraints = TO THE BOTTOM;
                    }
                    NEW itemPrimaryColumn2 {
                        childConstraints = TO THE BOTTOM;
                    }
                }
                ADD b.box;
            }
            NEW itemGroup {
                childConstraints = TO THE RIGHT;
                title = 'Классификаторы';
                fillVertical = 1.0;
                fillHorizontal = 1.0;
                ADD cgt.box;
            }
            NEW regionalPrm {
                caption = 'Региональные параметры';
                ADD dtr.box;
                ADD c.box;
            }
            NEW calcPriceListTypePrm {
                caption = 'Цены';
                childConstraints = TO THE BOTTOM;
                ADD st2.box;
                ADD ct.box{
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            }
            NEW itemImage {
                title = 'Изображение';
                ADD PROPERTY(imageItem);
                PROPERTY(imageItem) {
                    caption = '';
                    preferredSize = ( -1, 600);
                    fillVertical = 1.0;
                    fillHorizontal = 1.0;
                }
                ADD PROPERTY(loadImageItem);
            }
        }
    }
}

seekBarcode 'Штрих-код' = DATA SESSION STRING[15] ();
seekSkuBarcode = ACTION (){
    REQUEST STRING[15] INPUT;
    SET seekBarcode() <- NULL;
    SET seekBarcode() <- requestedString();
    EXEC seek(skuBarcodeIdDate(seekBarcode(), currentDate()));
    IF TRUE IF NOT skuBarcodeIdDate(seekBarcode(), currentDate()) THEN
        MESSAGE 'Шрих-код не найден';
    SET seekBarcode() <- NULL;
}

editSku(sku) += [ACTION EDITFORM Item](sku);
addSku () += [ACTION ADDFORM Item]();

FORM items 'Товары'

    OBJECTS gt=GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType

    TREE groupTree g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    FILTERS groupTypeGroup(g) == gt, g IS Group AND NOT (g IS SkuGroup AND NOT g IS ItemGroup)

    ORDER BY nameGroup(g)

    OBJECTS i=Item
    PROPERTIES(i) READONLY idBarcodeSku
    PROPERTIES(i) ADDFORM, EDITFORM, deletei=DELETE
    PROPERTIES seekBarcode()
    ON CHANGE seekSkuBarcode()
    DIALOG Item OBJECT i
;

DESIGN items FROM DEFAULT {

    NEW rootContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;
            NEW row1 {
                title = 'Классификатор';
                childConstraints = TO THE BOTTOM;
                ADD gt.box;
                ADD groupTree.tree.box;
            }

            NEW row2 {
                NEW row21 {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(seekBarcode);
                }
                ADD i.box {
                    defaultComponent = TRUE;
                    fillHorizontal = 4;
                    PROPERTY(seekBarcode){
                        editKey = 'F4';
                    }
                }
            }
    }
    ADD functions.box;
}

@extendFormEditable(items);

NAVIGATOR {
    skuNavigator {
        ADD items BEFORE itemGroups;
    }
}

// ----------------------------------- Атрибуты товаров ------------------------------------------ //

CLASS ABSTRACT ItemAttribute 'Атрибут товара';
TABLE itemAttribute(ItemAttribute);
TABLE itemItemAttribute(Item, ItemAttribute);

// Отображение
META defineItemAttribute (attribute, caption, group)
    userShow###attribute##ItemGroup caption (itemGroup) = DATA BOOLEAN (ItemGroup) IN group;

    quantityChildWith###attribute##ItemGroup (itemGroup) = GROUP SUM 1 IF userShow###attribute##ItemGroup(childItemGroup) AND isParentItemGroupItemGroup(childItemGroup, itemGroup) BY itemGroup PERSISTENT;
    quantityParentWith###attribute##ItemGroup (itemGroup) = GROUP SUM 1 IF userShow###attribute##ItemGroup(parentItemGroup) AND isParentItemGroupItemGroup(itemGroup, parentItemGroup) BY itemGroup PERSISTENT;

    show###attribute##ItemGroup caption (itemGroup) = TRUE IF (quantityChildWith###attribute##ItemGroup (itemGroup) (+) quantityParentWith###attribute##ItemGroup (itemGroup)) > 0 PERSISTENT;

    show###attribute##Item caption (item) = TRUE IF quantityParentWith###attribute##ItemGroup(itemGroupItem(item));

    backgroundShow###attribute##ItemGroup (itemGroup) =
        IF userShow###attribute##ItemGroup(itemGroup) THEN
            RGB(0,0,0) IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChildWith###attribute##ItemGroup (itemGroup) != descendantNumberItemGroup(itemGroup)
                             AND NOT quantityParentWith###attribute##ItemGroup (itemGroup);

    setNullShow###attribute##ItemGroup 'Снять признак для всех потомков' = ACTION (itemGroup) {
        FOR isParentItemGroupItemGroup (childGroup, itemGroup) DO {
            SET userShow###attribute##ItemGroup(childGroup) <- NULL;
        }
    } SHORTCUT userShow###attribute##ItemGroup CONFIRM;
END

// Объявление
valueItemAttribute = ABSTRACT ISTRING[255] (Item, ItemAttribute) PERSISTENT;

META implementItemAttribute(property, caption, itemType, attributeClass)
    EXTEND CLASS itemType##ItemAttribute { attributeClass caption }
    value###itemType##ItemAttribute(i, a) += property(i) WHEN a == itemType##ItemAttribute.##attributeClass;
END

META defineItemAttribute(attribute, formProperty, caption, group, itemType, attributeClass)
    @defineItemAttribute(attribute, caption, group);

    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute##ItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) READONLY show###attribute##ItemGroup BACKGROUND backgroundShow###attribute##ItemGroup(g);
    EXTEND FORM item PROPERTIES(i) formProperty SHOWIF show###attribute##Item(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei formProperty SHOWIF show###attribute##ItemGroup(g);

    @implementItemAttribute(formProperty, caption, itemType, attributeClass);
END

// Примитивный тип
META definePrimitiveItemAttribute(attribute, type, caption, group, itemType)
    attribute##Item caption = DATA type (Item) IN group;
    @defineItemAttribute(attribute, attribute##Item, caption, group, itemType, item###attribute);
END

// Расширяем формы настройки
EXTEND FORM options
    OBJECTS ia = ItemAttribute
    PROPERTIES(ia) staticCaption
;

EXTEND DESIGN options {
    pane {
        NEW itemTab {
            caption = 'Товары';
            ADD ia.box;
        }
    }
}

META defineItemAttributeBatch (attribute, formProperty, caption)
    show###attribute##Batch caption (batch)= show###attribute##Item(skuBatch(batch));
    attribute##Batch caption (batch) = attribute##Item(skuBatch(batch));

    EXTEND FORM batches PROPERTIES(bt) READONLY FORCE GRID formProperty SHOWIF show###attribute##ItemGroup(sk);
END
META defineItemAttributeBatch (attribute, caption)
    @defineItemAttributeBatch (attribute, attribute##Batch, caption);
END

META defineObjectItemAttributeBatch(attribute, identity, caption)
    identity##Batch caption (batch) = identity##Item(skuBatch(batch));
    @defineItemAttributeBatch(attribute, identity##Batch, caption);
END

// -------------------------------------------- Формирование наименования ----------------------------------- //

prefixInNameItemAttribute 'Префикс' = DATA STRING[20] (ItemAttribute);
postfixInNameItemAttribute 'Постфикс' = DATA STRING[20] (ItemAttribute);

EXTEND FORM options PROPERTIES(ia) prefixInNameItemAttribute, postfixInNameItemAttribute;

completeNameItemAttribute (item, attribute) = CONCAT '', prefixInNameItemAttribute(attribute) IF item IS Item, valueItemAttribute(item, attribute), postfixInNameItemAttribute(attribute) IF item IS Item;

META defineItemAttributeName (prefix, caption, group)
    numberInName###prefix##ItemAttribute 'Порядковый номер в наименовании'##caption = DATA INTEGER (ItemAttribute) IN base;
    EXTEND FORM options PROPERTIES(ia) numberInName###prefix##ItemAttribute;

    name###prefix##AttributeItem 'Наименование'###caption (item) = toString255(
                    [GROUP CONCAT completeNameItemAttribute(item, attribute)
                                  IF numberInName###prefix##ItemAttribute(attribute) AND valueItemAttribute(item, attribute), ' ' BY item ORDER numberInName###prefix##ItemAttribute(attribute)](item))
                    IN group PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;
    EXTEND FORM item PROPERTIES(i) READONLY name###prefix##AttributeItem;
    EXTEND DESIGN item { itemHeaderColumn2 {ADD PROPERTY(name###prefix##AttributeItem); } }
END

// -------------------------------------- Типы атрибутов ------------------------------- //

// Строка
CLASS StringItemAttribute 'Строковый атрибут' : ItemAttribute;

valueStringItemAttribute = ABSTRACT ISTRING[255] (Item, StringItemAttribute) EXCLUSIVE PERSISTENT;
valueItemAttribute(item, attribute) += valueStringItemAttribute(item, attribute);

META defineStringItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group, String);
END

// Целое число
CLASS IntegerItemAttribute 'Целочисленный атрибут' : ItemAttribute;

valueIntegerItemAttribute = ABSTRACT INTEGER (Item, IntegerItemAttribute) EXCLUSIVE PERSISTENT;
stringIntegerItemAttribute(item, attribute) = toString255(valueIntegerItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringIntegerItemAttribute(item, attribute);

META defineIntegerItemAttribute(attribute, caption, group)
    @definePrimitiveItemAttribute(attribute, INTEGER, caption, group, Integer);
END

// Дробное число
CLASS DoubleItemAttribute 'Дробный атрибут' : ItemAttribute;

valueDoubleItemAttribute = ABSTRACT DOUBLE (Item, DoubleItemAttribute) EXCLUSIVE PERSISTENT;
stringDoubleItemAttribute(item, attribute) = toString255(valueDoubleItemAttribute(item, attribute));
valueItemAttribute(item, attribute) += stringDoubleItemAttribute(item, attribute);

META defineDoubleItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group, Double);
END

META defineObjectItemAttribute(attribute, attributeClass, identity, caption, group)
    attribute##Item = DATA attributeClass (Item);
    identity##Item caption (item) = identity(attribute##Item(item)) IN group;
    @defineItemAttribute(attribute, identity##Item, caption, group, String, item###attribute);
END

// ---------------------------- Конкретные свойства -------------------------------- //

GROUP itemBaseGroup 'Базовые свойства' : base;

// Группа
@implementItemAttribute(nameItemGroupItem, 'Группа товаров', String, itemItemGroup);

// ------ Базовые свойства товара ------ //

// Название
@defineStringItemAttribute(caption, STRING[100], 'Название', itemBaseGroup);
@defineItemAttributeBatch (caption, 'Название');

// Единица измерения
@defineObjectItemAttribute(UOM, UOM, nameUOM, 'Единица измерения', itemBaseGroup);
@defineObjectItemAttributeBatch (UOM, nameUOM, 'Единица измерения');

shortNameUOMItem 'Единица измерения' (item) = shortNameUOM(UOMItem(item)) IN itemBaseGroup;
UOMSku(item) += UOMItem(item);

//@implementObjectShortItemAttribute(UOM, 'Единица измерения (сокр.)');
@implementItemAttribute(shortNameUOMItem, 'Единица измерения (сокр.)', String, itemShortUOM);

// Брэнд
CLASS Brand 'Бренд';
TABLE brand(Brand);

nameBrand 'Наименование' = DATA ISTRING[50](Brand);

FORM brand 'Бренд'
    OBJECTS t=Brand FIXED PANEL
    PROPERTIES(t) nameBrand
    EDIT Brand OBJECT t
;

FORM brands 'Бренды'
    OBJECTS t=Brand
    PROPERTIES(t) nameBrand READONLY, DELETE
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameBrand
    DIALOG Brand OBJECT t
;
DESIGN brands FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(brand, Brand, nameBrand, 'Бренд', itemBaseGroup);
@defineObjectItemAttributeBatch (brand, nameBrand, 'Бренд');

// Страна
@defineObjectItemAttribute(country, Country, nameCountry, 'Страна', itemBaseGroup);
residentItem 'Отечественное производство' (item) = residentCountry(countryItem(item)) IN itemBaseGroup;
countrySku(sku) += countryItem(sku);
@defineObjectItemAttributeBatch (country, nameCountry, 'Страна');

// Производитель
CLASS Manufacturer 'Производитель товара';
TABLE manufacturer(Manufacturer);

nameManufacturer 'Наименование' = DATA ISTRING[50](Manufacturer);

FORM manufacturer 'Производитель товара'
    OBJECTS m=Manufacturer FIXED PANEL
    PROPERTIES(m) nameManufacturer
    EDIT Manufacturer OBJECT m
;

FORM manufacturers 'Производители товара'
    OBJECTS m=Manufacturer
    PROPERTIES(m) nameManufacturer READONLY, DELETE
    PROPERTIES(m) ADDFORM, EDITFORM
    ORDER BY nameManufacturer
    DIALOG Manufacturer OBJECT m
;
DESIGN manufacturers FROM DEFAULT { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(manufacturer, Manufacturer, nameManufacturer, 'Производитель', itemBaseGroup);
@defineObjectItemAttributeBatch (manufacturer, nameManufacturer, 'Производитель');

//  Состав
@defineStringItemAttribute(composition, STRING[255], 'Состав', itemBaseGroup);
@defineItemAttributeBatch (composition, 'Состав');
compositionSku (sku) += compositionItem(sku);

// Тара
skuTypeItem = DATA SkuType (Item);
skuTypeSku (sku) += skuTypeItem(sku);

skuTypeItem(item) <- SkuType.skuTypeItem WHEN ASSIGNED(item IS Item);

nameSkuTypeItem 'Тип' (item) = staticCaption(skuTypeItem(item)) IN itemBaseGroup;
EXTEND FORM item PROPERTIES(i) nameSkuTypeItem;

// Весовой
isWeightItem 'Весовой товар' = DATA BOOLEAN (Item) IN itemBaseGroup;
isWeightSku(sku) += isWeightItem(sku);
EXTEND FORM item PROPERTIES(i) isWeightItem;

// Фиксированная цена
fixedPriceItem 'Товар с фиксированной ценой' = DATA BOOLEAN (Item) IN itemBaseGroup;
fixedPriceSku(sku) += fixedPriceItem(sku);
EXTEND FORM item PROPERTIES(i) fixedPriceItem;

// Неактивный
inactiveItem 'Неактивный' = DATA BOOLEAN (Item) IN itemBaseGroup;
activeItem 'Активный' (item) = item IS Item AND NOT inactiveItem(item);
inactiveSku(sku) += inactiveItem(sku);
EXTEND FORM item PROPERTIES(i) inactiveItem;
EXTEND FORM items FILTERGROUP inactive FILTER 'Активные' 'F10' activeItem(i) DEFAULT;

EXTEND DESIGN item { itemPrimaryColumn1 { ADD i.itemBaseGroup; } }

// ------ Габариты товара ------ //

GROUP itemSizeGroup 'Габариты товара' : public;

// Вес нетто
@defineDoubleItemAttribute(netWeight, NUMERIC[9,3], 'Вес нетто, кг', itemSizeGroup);
@defineItemAttributeBatch (netWeight, 'Вес нетто, кг');
netWeightSku(sku) += netWeightItem(sku);

// Вес брутто
@defineDoubleItemAttribute(grossWeight, NUMERIC[9,3], 'Вес брутто, кг', itemSizeGroup);
@defineItemAttributeBatch (grossWeight, 'Вес брутто, кг');
grossWeightSku(sku) += grossWeightItem(sku);

grossWeightItem(sku) <- netWeightItem(sku) WHEN CHANGED(netWeightItem(sku));
// Кол-во в грузовом месте
// todo : здесь скорее всего надо будет рефакторить на более сложную логику
//@defineDoubleItemAttribute(packQuantity, NUMERIC[9,3], 'Количество в грузовом месте', itemSizeGroup);
//packQuantitySku(sku) += packQuantityItem(sku);

EXTEND DESIGN item { itemPrimaryColumn2 { ADD i.itemSizeGroup; } }

loadDefaultItemAttributes 'Загрузить стандартные атрибуты товаров' = ABSTRACT ACTION ();
@implementLoadDefaultData(loadDefaultItemAttributes);

// ---------------------------------------------- Формирование наименований -------------------------------------- //

// Базовое наименование
@defineItemAttributeName( , , recognize);
nameSku(item) += nameAttributeItem(item);
loadDefaultItemAttributes() += ACTION {
    SET numberInNameItemAttribute(a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}

//nameAttributeGroupGroupTypeItem 'Наименование' (group, groupType, item) = nameAttributeItem(item) IF
//    hasParentGroupGroupTypeItem(group, groupType, item) PERSISTENT INDEXED;

EXTEND FORM items
    PROPERTIES READONLY AFTER idBarcodeSku(i) nameAttributeItem(i) // вообще надо использовать nameAttributeGroupGroupTypeItem(g, gt, i) для скорости, но тогда не будет работать отбор без групп
    PROPERTIES READONLYIF isReadonly() canonicalNameGroupGroupTypeSku(gt,i) AFTER nameAttributeItem(i)

    FILTERGROUP groupFilters
        FILTER 'С группами' 'F9' isParentGroupSku(g, i) DEFAULT
        FILTER 'Без групп' 'F8' nameAttributeItem(i) IF gt IS GroupType AND NOT groupGroupTypeSku(gt,i)

    ORDER BY nameAttributeItem
;

// Кассы
@defineItemAttributeName(cashRegister, ' (кассы)', public);
dataTitleCashRegisterBarcode 'Наименование для касс' = DATA STRING[100] (Barcode);
titleCashRegisterBarcode 'Наименование для касс' = OVERRIDE nameCashRegisterAttributeItem(skuBarcode(barcode)), dataTitleCashRegisterBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    SET numberInNameCashRegisterItemAttribute(a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}
// Весы
@defineItemAttributeName(scales, ' (весы)', public);
dataTitleScalesBarcode 'Наименование для весов' = DATA STRING[100] (Barcode);
titleScalesBarcode 'Наименование для весов' = OVERRIDE nameScalesAttributeItem(skuBarcode(barcode)), dataTitleScalesBarcode(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    SET numberInNameScalesItemAttribute(a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}
EXTEND FORM item PROPERTIES(b) BEFORE deleteb titleScalesBarcode, titleCashRegisterBarcode;

// --------------------------------------- Генерация штрих-кодов --------------------------------------------- //

META defineNumeratorItemGroup (prefix, caption)
    data###prefix##NumeratorItemGroup = DATA Numerator (ItemGroup);
    levelParent###prefix##NumeratorItemGroup (itemGroup) = GROUP MIN levelItemGroupItemGroup(itemGroup, parent) IF data###prefix##NumeratorItemGroup(parent)
                                                                  BY itemGroup PERSISTENT;
    nearestParent###prefix##NumeratorItemGroup (itemGroup) = itemGroupItemGroupLevel(itemGroup, levelParent###prefix##NumeratorItemGroup(itemGroup));
    nearest###prefix##NumeratorItemGroup (itemGroup) = data###prefix##NumeratorItemGroup(nearestParent###prefix##NumeratorItemGroup(itemGroup)) PERSISTENT;

    prefix##NumeratorItemGroup (itemGroup) =
        OVERRIDE nearest###prefix##NumeratorItemGroup(itemGroup), data###prefix##NumeratorItemGroup(itemGroup) PERSISTENT;
    name###prefix##NumeratorItemGroup caption (itemGroup) = nameNumerator(prefix##NumeratorItemGroup(itemGroup)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 10;

    background###prefix##NumeratotItemGroup (itemGroup) = IF data###prefix##NumeratorItemGroup(itemGroup) THEN
                                                                      RGB(190,190,190) IF itemGroup IS ItemGroup
                                                                  ELSE
                                                                      RGB(230,230,230) IF prefix##NumeratorItemGroup (itemGroup);

    EXTEND FORM itemGroup PROPERTIES(g)  AFTER nameParentItemGroup name###prefix##NumeratorItemGroup;
    EXTEND FORM itemGroups PROPERTIES(g) AFTER canonicalNameItemGroup READONLY name###prefix##NumeratorItemGroup  BACKGROUND background###prefix##NumeratotItemGroup(g);
END

@defineNumeratorItemGroup (piece, 'Нумератор штрих-кодов (для штучного товара)');
@defineNumeratorItemGroup (weight, 'Нумератор штрих-кодов (для весового товара)');

pieceNumeratorItem (item) = pieceNumeratorItemGroup(itemGroupItem(item));
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

barcodeNumeratorSku(item) += IF isWeightItem(item) THEN weightNumeratorItem(item) ELSE pieceNumeratorItem(item);

// ---------------------------------------- Копирование товара ----------------------- //
overCopyItem = ABSTRACT ACTION (Item, Item);
overCopyItemBarcode = ABSTRACT ACTION (Barcode, Barcode, Sku);

copyDataItem = ACTION (item, i) {
    SET itemGroupItem(i) <- itemGroupItem(item);
    SET captionItem(i) <- captionItem(item);
    SET UOMItem(i) <- UOMItem(item);
    SET brandItem(i) <- brandItem(item);
    SET manufacturerItem(i) <- manufacturerItem(item);
    SET compositionItem(i) <- compositionItem(item);
    SET netWeightItem(i) <- netWeightItem(item);
    SET grossWeightItem(i) <- grossWeightItem(item);
    SET countryItem(i) <- countryItem(item);
    SET imageItem(i) <- imageItem(item);
    SET skuTypeItem(i) <- skuTypeItem(item);
    SET isWeightItem(i) <- isWeightItem(item);
    SET inactiveItem(i) <- inactiveItem(item);

    FOR skuBarcode(barcode) == item DO {
        FOR ADDOBJ b = Barcode DO {
            SET skuBarcode(b) <- i;
            SET dataDateBarcode(b) <- dataDateBarcode(barcode);
            SET dataUOMBarcode(b) <- dataUOMBarcode(barcode);
            SET dataAmountBarcode(b) <- dataAmountBarcode(barcode);
            SET dataTitleScalesBarcode(b) <- dataTitleScalesBarcode(barcode);
            SET dataTitleCashRegisterBarcode(b) <- dataTitleCashRegisterBarcode(barcode);
            EXEC overCopyItemBarcode(b, barcode, i);
        }
    }

    SET customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeItem(type, item);

    EXEC overCopyItem(item, i);
}

copyItem 'Копировать' = ACTION (item) NEWSESSION {
    FOR ADDOBJ i = Item DO {
        EXEC copyDataItem(item, i);
        FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM items PROPERTIES (i) copyItem;

copySku(sku) += copyItem(sku);

createItemBarcodeDate = ACTION (barcode, date) NEWSESSION {

    LOCAL copy = BOOLEAN();
    IF skuAddedUser(currentUser()) IS Item THEN {
        CONFIRM 'Создать товар на основе последнего созданного ?';
        SET copy() <- confirmed();
    }

    IF copy() THEN {
        FOR ADDOBJ i = Item DO {
            EXEC copyDataItem(skuAddedUser(currentUser()), i);
            SET idBarcode(b) <- barcode AS STRING[15] WHERE skuBarcode(b) == i AND primaryBarcode(b);
            FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } ELSE {
        FOR ADDOBJ bc = Barcode DO {
            SET idBarcode(bc) <- (barcode AS STRING[15]);
            SET dataDateBarcode(bc) <- (date AS DATE);

            FOR ADDOBJ s = Item DO {
                SET skuBarcode(bc) <- s AS Item;
                FORM item OBJECTS i = s, b = bc MANAGESESSION DOCKEDMODAL;
            }
        }
    }
}

createSkuBarcodeDate(barcode, date) += createItemBarcodeDate(barcode, date);

inItem 'Отм.' = DATA SESSION BOOLEAN (Item);

replaceItem 'Объединить' = ACTION (item) {
    FOR inItem(i) DO{
        IF i != item THEN {
            replaceSkuSku(i, item);
            inItem(i) <- NULL;
            DELETE i;
        } ELSE {
            MESSAGE 'Выделенный товар не может совпадать с объединяемым';
        }
    }
    apply();
} CONFIRM;

changeGroupItem 'Изменить группу' = ACTION (){
    FORM dialogItemGroups MODAL;

    IF formResult() == FormResult.ok THEN {
        FOR inItem(i) DO{
            SET itemGroupItem(i) <- chosenObject('g');
        }
    }
}


EXTEND FORM items
    PROPERTIES(i) inItem BEFORE idBarcodeSku, replaceItem FORCE PANEL
;
EXTEND DESIGN items {
    row21 {
        ADD PROPERTY(replaceItem);
    }
}
