MODULE Item;

REQUIRE System, Stock, Sku, Hierarchy, Barcode, PriceListType, PriceListCalc;

// ------------------------------------ Классификатор товаров --------------------------- //

CLASS ItemGroup 'Товарная группа' : SkuGroup;
TABLE itemGroup (ItemGroup);

@defineExternalizable(itemGroup, VARSTRING[100]);
@defineNumeratedID(ItemGroup, 'Товарные группы');

extId 'Код' = DATA VARSTRING[100] (ItemGroup);
overId 'Код' (ItemGroup g) = OVERRIDE id(g), extId(g);

name 'Наименование' = DATA VARISTRING[250](ItemGroup) IN base;
order 'Порядок' = DATA INTEGER (ItemGroup) MINCHARWIDTH 2 PREFCHARWIDTH 2;

name(ItemGroup group) += name(group) IF group IS ItemGroup;
order(ItemGroup group) += order(group) IF group IS ItemGroup;
id(ItemGroup group) += id(group) IF group IS ItemGroup;

TABLE itemGroupItemGroup(ItemGroup, ItemGroup);
@defineHierarchy(itemGroup);
@defineHierarchyFilter(ItemGroup, ItemGroup, name);

idParent (ItemGroup itemGroup) = overId(parent(itemGroup));

parent (ItemGroup itemGroup) += parent(itemGroup);

in 'Отм.' = DATA LOCAL BOOLEAN (ItemGroup);

moveItemGroup 'Перенести отмеченные группы в текущую'(itemGroup) = ACTION {

    FOR in(ItemGroup i) DO{
        IF i != itemGroup THEN {
            ASSIGN parent(i) <- itemGroup;
            ASSIGN in(i) <- NULL;
        } ELSE {
            MESSAGE 'Выделенная товарная группа не может совпадать с объединяемой';
        }
    }
}

// ------------------ Формы  --------------------- //

FORM itemGroup 'Товарная группа'
    OBJECTS g=ItemGroup FIXED PANEL
    PROPERTIES(g) name, order, id SHOWIF showIDs(), nameParent    
    EDIT ItemGroup OBJECT g
;

FORM itemGroups 'Товарные группы'
    PROPERTIES filterNameItemGroup()

    TREE treeGroups g=ItemGroup PARENT parent
    PROPERTIES in(g), moveItemGroup(g) TODRAW g FORCE PANEL TOOLBAR
    PROPERTIES READONLYIF isReadonly() order(g), id(g) SHOWIF showIDs(), name(g), canonicalName (g)
    PROPERTIES(g) ADDFORM, EDITFORM, deleteg=DELETE FORCE PANEL TOOLBAR
    FILTERS inFilterName(g) OR NOT filterNameItemGroup()
    ORDER BY order(g), canonicalName(g)
;

DESIGN itemGroups {
    MOVE nogroup.panel BEFORE treeGroups.tree.box;
}

@extendFormEditable(itemGroups);

FORM dialogItemGroups 'Товарные группы'
    TREE treeGroups tg=ItemGroup PARENT parent
    PROPERTIES READONLY order(tg), id(tg) SHOWIF showIDs(), name(tg)
    ORDER BY order(tg), name(tg)

    OBJECTS g=ItemGroup
    PROPERTIES(g) order READONLY, id SHOWIF showIDs() READONLY, name READONLY, canonicalName READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(g) ADDFORM, EDITFORM
    ORDER BY order(g), canonicalName(g)

    FILTERS isParent(g, tg)

    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(g, tg) 'F10' DEFAULT
        FILTER 'Всех потомков' isParent(g, tg) 'F9'
        FILTER 'Только непосредственных потомков' parent(g) == tg 'F8'

    DIALOG ItemGroup OBJECT g
;

DESIGN dialogItemGroups {
    main{
        preferredSize = (1280, 1024);
        NEW rootContainer BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            MOVE treeGroups.tree.box;
            MOVE g.box {
                fill = 2;
                g.grid { defaultComponent = TRUE; }
            }
        }
    }
}

NAVIGATOR {
    skuNavigator {
        ADD itemGroups BEFORE UOMs;
    }
}
// ----------------------------------- Товары ----------------------------------- //

CLASS Item 'Товар' : Sku;
TABLE item(Item) FULL;
TABLE sessionItem (Session, Item);

TABLE itemDate (Item, DATE);
TABLE itemCountry (Item, Country);
TABLE itemCountryDate (Item, Country, DATE);

DESIGN options {
    pane {
        NEW items {
            caption = 'Товары';
        }
    }
};

@defineExternalizable(item, VARSTRING[100]);
@defineOption(replaceSpacesInItemId, 'Замещать пробелы в коде товара', items);
WHEN SESSION CHANGED (id(Item i)) AND replaceSpacesInItemId()  DO id(i) <- replace(id(i), ' ', '');

@defineNumeratedID(Item, 'Товары');

id(Item sku) += id(sku); 

// Связь с группой товаров
itemGroup 'Группа товара' = DATA ItemGroup(Item) AUTOSET INDEXED;
skuGroup(Item item) += itemGroup(item);
countItem 'Кол-во товаров' (g) = GROUP SUM 1 BY itemGroup(Item i);

nameItemGroup 'Группа товара' (Item item) = name(itemGroup(item)) IN recognize;
canonicalNameItemGroup 'Группа товара' (Item item) = canonicalName(itemGroup(item)) IN base;
idItemGroup 'Код группы товаров' (Item item) = id(itemGroup(item));

TABLE itemGroupItem (ItemGroup, Item);

isParent (ItemGroup itemGroup, Item item) = isParent(itemGroup(item), itemGroup) PERSISTENT;


checkIsLeafItemGroup 'Товар должен быть привязан к нижнему узлу основного классификатора' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES checkIsLeafItemGroup ()
;
DESIGN options {
    items {
        MOVE PROPERTY (checkIsLeafItemGroup ());
    }
}

CONSTRAINT CHANGED(itemGroup(Item i)) AND parent(itemGroup(i)) AND NOT isLeaf(itemGroup(i)) AND checkIsLeafItemGroup()
    CHECKED BY itemGroup[Item]
    MESSAGE 'Запрещено привязывать товар к промежуточным узлам основного классификатора';

// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeItem(CustomGroupType, Item);
TABLE sessionCustomGroupTypeItem(Session, CustomGroupType, Item);
customGroup = DATA CustomGroup (CustomGroupType, Item);
customGroup(CustomGroupType type, Item item) += customGroup(type, item);

nameCustomGroup 'Имя' (CustomGroupType type, Item item) = name(customGroup(type, item));
canonicalNameCustomGroup 'Каноническое имя' (CustomGroupType type, Item item) = canonicalName(customGroup(type, item));
idCustomGroup 'Код' (CustomGroupType type, Item item) = id(customGroup(type, item));

CONSTRAINT customGroupType(customGroup(CustomGroupType type, Item item)) != type
           CHECKED BY customGroup[CustomGroupType,Item]
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';

// Атрибуты
dataImage 'Изображение' = DATA IMAGEFILE (Item);
loadImage 'Загрузить изображение' (Item item) = ACTION LOADFILE dataImage(item);
overImage '' = ABSTRACT IMAGEFILE (Item);

image (Item item) = OVERRIDE dataImage (item), overImage (item);
openImage 'Открыть изображение' (Item item) = ACTION OPENFILE image(item);
hasImage (Item item) = TRUE IF image(item) PERSISTENT;

nullImage 'Сбросить'(Item item) = ACTION {
    image(item) <- NULL;
}

image 'Изображение' (Batch batch) = image(sku(batch)); 

// -------------------------------- Надбавки для расчетных видов цен --------------------------------//

currentBasePrice 'Базовая цена' (CalcPriceListType type, Sku sku, Stock stock) = priceA[PriceListType,Sku,Stock,DATETIME](basePriceListType(type), sku, stock, currentDateTime());

currentCalcPrice 'Расчетная цена' (PriceListType type, Sku sku, Stock stock) = priceA(type, sku, stock, currentDateTime());

// ------------------------------------ Формы -------------------------- //
backgroundCurrentCalcPrice = ABSTRACT CASE COLOR (CalcPriceListType, Sku, Stock);

FORM item 'Товар'

    OBJECTS i=Item FIXED PANEL

    PROPERTIES(i) canonicalNameItemGroup, idBarcode ON CHANGE changeBarcode(i) EVENTID 'SCANNER',
                  dataImage, loadImage, nullImage, id SHOWIF showIDs()

    OBJECTS b=Barcode
    PROPERTIES(b)       id, date, caption, shortNameUOM,
                        amount, active, primary ON CHANGE changePrimary(b,i)
    PROPERTIES(i)       generateBarcode TODRAW b FORCE PANEL
    PROPERTIES(b)       ADDOBJ, deleteb=DELETESESSION
    FILTERS sku(b) == i

    OBJECTS cgt = CustomGroupType
    PROPERTIES name(cgt) READONLY, canonicalNameCustomGroup(cgt, i)

    OBJECTS dtr = DATE FIXED PANEL
    PROPERTIES (dtr) OBJVALUE BACKGROUND dateDiffersCurrent(dtr)

    OBJECTS c = Country 
    PROPERTIES (c) READONLY name

    OBJECTS st2 = Stock FIXED PANEL
    PROPERTIES(st2) SELECTOR name
    FILTERS isCompany(st2)
    
    OBJECTS ct = CalcPriceListType
    PROPERTIES(ct) READONLY name, includeVAT[PriceListType], nameCurrency, nameRoundCondition,
                            nameBasePriceListType
    PROPERTIES(ct, i, st2) READONLY currentBasePrice
    PROPERTIES(ct, i) markup
    PROPERTIES(ct, i, st2) READONLY currentCalcPrice BACKGROUND  backgroundCurrentCalcPrice(ct, i, st2)

    EDIT Item OBJECT i
;

DESIGN item {
    main {
        NEW itemHeader BEFORE functions.box {
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY(canonicalNameItemGroup(i)) {
                caption = 'Полное имя группы';
            }
            MOVE PROPERTY(idBarcode(i));
            MOVE PROPERTY(id(i));
        }
        NEW itemDetail BEFORE functions.box {
            type = TABBED;
            fill = 1;
            NEW itemPrimary {
                type = CONTAINERV;
                caption = 'Основные данные';

                NEW itemPrimaryRow1 {
                    type = CONTAINERH;
                    NEW itemPrimaryColumn1 {
                        type = CONTAINERV;
                    }
                    NEW itemPrimaryColumn2 {
                        type = CONTAINERV;
                    }
                }
                MOVE b.box;
            }
            NEW itemGroup {
                type = CONTAINERV;
                caption = 'Классификаторы';
                MOVE cgt.box;
            }
            NEW regionalPrm {
                type = CONTAINERV;
                caption = 'Региональные параметры';
                MOVE dtr.box;
                MOVE c.box;
            }
            NEW calcPriceListTypePrm {
                type = CONTAINERV;
                caption = 'Цены';
                type = CONTAINERV;
                MOVE st2.box;
                MOVE ct.box;
            }
            NEW itemImage {
                type = CONTAINERV;
                caption = 'Изображение';
                MOVE PROPERTY(dataImage(i)) {
                    caption = '';
                    fill = 1;
                }
                MOVE PROPERTY(loadImage(i));
                MOVE PROPERTY(nullImage(i));
            }
        }
    }
}

seekBarcode 'Штрихкод' = DATA LOCAL VARSTRING[15] ();
seekSkuBarcode() = ACTION {
    REQUEST VARSTRING[15] INPUT;
    ASSIGN seekBarcode() <- NULL;
    ASSIGN seekBarcode() <- requestedString();
    EXEC seek(skuBarcode(seekBarcode(), currentDate()));
    IF NOT skuBarcode(seekBarcode(), currentDate()) THEN
        MESSAGE 'Штрихкод не найден';
    ASSIGN seekBarcode() <- NULL;
}

disallowEditing 'Запретить редактирование' = ABSTRACT BOOLEAN (Item);
enableEditing = Item s IS Item AND NOT disallowEditing(s);
disallowEditing[Sku](Item sku) += disallowEditing(sku);

edit(Item sku) += ACTION {
    IF NOT disallowEditing(sku) THEN {
        [= ACTION EDITFORM Item](sku);
    } ELSE {
        MESSAGE 'Запрещено редактировать товар после обработки.';
    } 
};
addSku () += ACTION [= ACTION ADDFORM Item]();

background = ABSTRACT CASE COLOR (Item);

FORM items 'Товары'

    OBJECTS gt=GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name

    TREE groupTree g=Group PARENT parent
    PROPERTIES READONLY order(g), id(g), name(g)
    FILTERS groupType(g) == gt, g IS Group AND NOT (g IS SkuGroup AND NOT g IS ItemGroup)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F5' DEFAULT
    
    OBJECTS i=Item  
    PROPERTIES(i) READONLYIF isReadonly() idBarcode ON CHANGE changeBarcode(i) BACKGROUND background(i), image FORCE PANEL SHOWIF hasImage(i), id SHOWIF showIDs() BACKGROUND background(i)
    PROPERTIES(i) ADDFORM, EDITFORM SHOWIF enableEditing(i), deletei=DELETE FORCE PANEL TOOLBAR
    PROPERTIES seekBarcode()
    ON CHANGE seekSkuBarcode() 
    
    DIALOG Item OBJECT i  
;

seekSkuGroupType() = ACTION SEEK items.gt SystemGroupType.skuGroupType;
EXTEND FORM items
    EVENTS
        ON INIT seekSkuGroupType()
;

DESIGN items {
    NEW root {
        type = SPLITH;
        fill = 1;
        NEW filters {
            fill = 1;
            caption = 'Классификатор';
            type = CONTAINERV;
            MOVE gt.box;
            NEW itemImage {               
                fill = 1;
                type = SPLITV;
                MOVE groupTree.tree.box { caption = 'Группы';}               
                MOVE PROPERTY (image(i)) {
                    fill = 1;
                    caption = '';
                }
            }  
        }
        NEW pane {
            fill = 3;
            type = CONTAINERV;
            MOVE i.box {
                fill = 5;
                i.grid {
                    defaultComponent = TRUE;
                }
            }
            NEW tab {
                type = TABBED;
                fill = 1;
                NEW actions {
                    caption = 'Действия';
                    type = COLUMNS;
                    columns = 4;
                    NEW seek {
                        caption = 'Поиск';
                        MOVE PROPERTY(seekBarcode()) {
                            editKey = 'F4';
                        }
                    }
                }
            }
        }
    }

    MOVE functions.box;
}

NAVIGATOR {
    skuNavigator {
        ADD items BEFORE itemGroups;
    }
}

@extendFormEditable(items);

// ----------------------------------- Атрибуты товаров ------------------------------------------ //

CLASS ABSTRACT ItemAttribute 'Атрибут товара';
TABLE itemAttribute(ItemAttribute);
TABLE itemItemAttribute(Item, ItemAttribute);

// Отображение
META defineItemAttribute (attribute, caption, group)
    userShow###attribute caption (itemGroup) = DATA BOOLEAN (ItemGroup) IN group;

    quantityChildWith###attribute (itemGroup) = GROUP SUM 1 IF userShow###attribute(ItemGroup childItemGroup) AND isParent(childItemGroup, ItemGroup itemGroup) BY itemGroup PERSISTENT;
    quantityParentWith###attribute (itemGroup) = GROUP SUM 1 IF userShow###attribute(ItemGroup parentItemGroup) AND isParent(ItemGroup itemGroup, parentItemGroup) BY itemGroup PERSISTENT;

    show###attribute caption (ItemGroup itemGroup) = TRUE IF (quantityChildWith###attribute (itemGroup) (+) quantityParentWith###attribute (itemGroup)) > 0 PERSISTENT;
    showAny###attribute caption (ItemGroup itemGroup) = show###attribute(itemGroup) OR NOT itemGroup IS ItemGroup;

    show###attribute caption (Item item) = TRUE IF quantityParentWith###attribute(itemGroup(item));

    backgroundShow###attribute (ItemGroup itemGroup) =
        IF userShow###attribute(itemGroup) THEN
            RGB(0,0,0) IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChildWith###attribute (itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParentWith###attribute (itemGroup);

    setNullShow###attribute 'Снять признак для всех потомков'(ItemGroup itemGroup) = ACTION {
        FOR isParent (ItemGroup childGroup, itemGroup) DO {
            ASSIGN userShow###attribute(childGroup) <- NULL;
        }
    } SHORTCUT userShow###attribute[ItemGroup] CONFIRM;
END

// Объявление
value = ABSTRACT VARISTRING[255] (Item, ItemAttribute) PERSISTENT;

META defineItemAttribute(attribute, formProperty, caption, group)
    @defineItemAttribute(attribute, caption, group);

    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute;
    EXTEND FORM itemGroups PROPERTIES(g) READONLYIF  isReadonly() show###attribute BACKGROUND backgroundShow###attribute(g) BEFORE deleteg;
    
    background###attribute = ABSTRACT COLOR (Item);
    EXTEND FORM item PROPERTIES(i) formProperty###attribute SHOWIF show###attribute(i) BACKGROUND background###attribute(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei formProperty###attribute SHOWIF show###attribute(g);
END

// Примитивный тип
META definePrimitiveItemAttribute(attribute, type, caption, group)
    attribute caption = DATA type (Item) IN group;
    @defineItemAttribute(attribute, , caption, group);
END

META implementItemAttribute(property, caption, itemType, attributeClass)
    EXTEND CLASS itemType##ItemAttribute { attributeClass caption }
    value[Item,itemType##ItemAttribute](Item i, itemType##ItemAttribute a) += WHEN a == itemType##ItemAttribute.##attributeClass AND i IS Item THEN property(i);
END

// Форма настройки артибутов
FORM itemOptions 'Настройка атрибутов'
    OBJECTS ia = ItemAttribute
    PROPERTIES staticIA= staticCaption(ia)
    
    TREE treeGroups tg=ItemGroup PARENT parent
    PROPERTIES (tg) READONLY order, id SHOWIF showIDs(), name
    ORDER BY order(tg), name(tg)    
    
    OBJECTS ia1 = ItemAttribute
    PROPERTIES staticIA1= staticCaption(ia1)   
    FILTERGROUP filterA1
        FILTER 'Все' staticCaption(ia1) 
;

DESIGN itemOptions {
    NEW itemTab {
        fill = 1;
        type = TABBED;
        MOVE ia.box {caption = 'Общие';};
        NEW items1 {
            fill = 1;
            caption = 'Для групп';
            type = SPLITH;
            MOVE treeGroups.tree.box;
            MOVE ia1.box;
        }
    }
    MOVE functions.box;
}

NAVIGATOR {
    skuNavigator {
        ADD itemOptions;
    }
}

META defineItemAttributeBatch (attribute, formProperty, caption, skuClass)
    show###attribute caption (Batch batch)= show###attribute(sku(batch));
    attribute caption (Batch batch) = attribute(sku(batch));

    EXTEND FORM batches PROPERTIES(bt) READONLY FORCE GRID formProperty SHOWIF showAny###attribute(sk);
END

META defineItemAttributeBatchClass (attribute, caption, skuClass)
    @defineItemAttributeBatch (attribute, attribute, caption, skuClass);
END

META defineItemAttributeBatch (attribute, formProperty, caption)
    @defineItemAttributeBatch(attribute, formProperty, caption, item);
END
META defineItemAttributeBatch (attribute, caption)
    @defineItemAttributeBatch (attribute, attribute, caption);
END

META defineObjectItemAttributeBatch(attribute, identity, caption)
    @defineObjectItemAttributeBatch(attribute, identity, caption, item);
END

META defineObjectItemAttributeBatch(attribute, identity, caption, skuClass)
    identity caption (Batch batch) = identity(sku(batch));
    @defineItemAttributeBatch(attribute, identity, caption, skuClass);
END

FORM attributesItem 'Атрибуты товаров'
;

DESIGN attributesItem {
    NEW tabContainer {
        fill = 1;    
        type = TABBED;
    }
    MOVE functions.box;
}

META defineUniteAttributeItem(object, nameProp, caption1, caption2, object2)
    in 'Отм.' = DATA BOOLEAN (###object) MAXCHARWIDTH 5;
    allowReplace###object = DATA LOCAL BOOLEAN ();
    
    FORM confirmReplace###object 'Объединяемые '##caption2
        OBJECTS object = ###object FIXED PANEL 
    
        OBJECTS o = ###object  
        PROPERTIES(o) READONLY nameProp
        FILTERS o==object
    
        OBJECTS o2 = ###object
        PROPERTIES(o2) in
        PROPERTIES(o2) READONLY nameProp
        FILTERS in(o2)
    ;
    
    DESIGN confirmReplace###object {
        REMOVE object.box;
        NEW splitContainer{
            type = SPLITV;
            fill = 1;
            MOVE o.box{
                caption = 'Основной '##caption1;
            }
            MOVE o2.box{
                caption = 'Удаляемый '##caption1;
            }           
        }
        MOVE functions.box;
    }
    
    overReplace(oTo, oFrom) = ACTION ABSTRACT LIST (###object, ###object);
    replace 'Объединить'(###object object) = ACTION {
        FORM confirmReplace###object OBJECTS o=object MODAL;
        IF formResult() == FormResult.ok THEN {
            allowReplace###object() <- TRUE;
            FOR in(###object o) AND allowReplace###object() DO{
                IF o != object THEN {
                    object(###object2 object2) <- object WHERE object(object2) == o;
                    overReplace(object, o);
                    in(o) <- NULL;
                    DELETE o;            
                } ELSE {
                    MESSAGE 'Выделенный '##caption1##' не может совпадать с объединяемым';
                }
            }
            apply();
        } ELSE {
            in(###object o) <- NULL WHERE in(o);           
        }   
    };
    
    EXTEND FORM attributesItem
        OBJECTS object = ###object
        PROPERTIES in(object)
        PROPERTIES READONLY nameProp(object)
        PROPERTIES(object) ADDFORM, EDITFORM, delete###object =DELETE FORCE PANEL TOOLBAR        
        ORDER BY nameProp(object)
        PROPERTIES replace(object) TODRAW object FORCE PANEL TOOLBAR
        
        OBJECTS object##Item = Item
        PROPERTIES(object##Item) READONLY idBarcode, nameProp, id[Sku], idSkuGroup
        PROPERTIES(object##Item) nameProp###object, edit FORCE PANEL
        FILTERS object(object##Item) == object
    ;
    
    DESIGN attributesItem {
        tabContainer {
            NEW object##Tab {
                type = SPLITV;
                caption = ''###caption2;
                MOVE object.box { fill = 3; };
                MOVE object##Item.box;
            }
        }
    }

END

META defineUniteFilterAttributeItem(object, nameProp, caption1, caption2, object2)
    @defineUniteAttributeItem(object, nameProp, caption1, caption2, object2);
    overReplace(###object oTo, ###object oFrom) += ACTION { 
        dataIn (oTo, ###object2##Group g) <- dataIn (oFrom, g) WHERE dataIn(oFrom, g);
    }
END

META defineUniteAttributeItemWithoutExtendForm(object, nameProp, caption1, caption2, object2)
    in 'Отм.' = DATA BOOLEAN (###object) MAXCHARWIDTH 5;
    allowReplace###object = DATA LOCAL BOOLEAN ();
    
    FORM confirmReplace###object 'Объединяемые '##caption2
        OBJECTS object = ###object FIXED PANEL 
    
        OBJECTS o = ###object  
        PROPERTIES(o) READONLY name
        FILTERS o==object
    
        OBJECTS o2 = ###object
        PROPERTIES(o2) in
        PROPERTIES(o2) READONLY name
        FILTERS in(o2)
    ;
    
    DESIGN confirmReplace###object {
        REMOVE object.box;
        NEW splitContainer{
            type = SPLITV;
            fill = 1;
            MOVE o.box{
                caption = 'Основной '##caption1;
            }
            MOVE o2.box{
                caption = 'Удаляемый '##caption1;
            }           
        }
        MOVE functions.box;
    }
    
    replace 'Объединить'(###object object) = ACTION {
        FORM confirmReplace###object OBJECTS o=object MODAL;
        IF formResult() == FormResult.ok THEN {
            allowReplace###object() <- TRUE;
            FOR in(###object o) AND allowReplace###object() DO{
                IF o != object THEN {
                    object(###object2 object2) <- object WHERE object(object2) == o;
                    in(o) <- NULL;
                    DELETE o;            
                } ELSE {
                    MESSAGE 'Выделенный '##caption1##' не может совпадать с объединяемым';
                }
            }
            apply();
        } ELSE {
            in(###object o) <- NULL WHERE in(o);           
        }   
    };
END

NAVIGATOR {
    skuNavigator {
        ADD attributesItem;
    }
}

// -------------------------------------------- Формирование наименования ----------------------------------- //

prefixInName 'Префикс' = DATA VARSTRING[20] (ItemAttribute);
postfixInName 'Постфикс' = DATA VARSTRING[20] (ItemAttribute);

EXTEND FORM itemOptions PROPERTIES(ia) prefixInName, postfixInName;

completeName (Item item, ItemAttribute attribute) = CONCAT '', prefixInName(attribute) IF item IS Item, value(item, attribute), postfixInName(attribute) IF item IS Item;

overName 'Наименование (перегруженное)' = ABSTRACT VARISTRING[255](Item);

META defineItemAttributeName (prefix, caption, group)
    @defineItemDefaultValueCustom(numberInName###prefix, 'Порядковый номер в наименовании'##caption, INTEGER, itemAttribute);

    numberInName###prefix 'Порядковый номер в наименовании'##caption = DATA INTEGER (ItemAttribute) IN base;
    numberInNameItemAttribute###prefix (itemGroup) = GROUP SUM numberInName###prefix(ItemAttribute attribute, ItemGroup itemGroup) BY itemGroup;
    numberInName###prefix 'Порядковый номер в наименовании'##caption (ItemAttribute attribute, Item item) = 
        IF numberInNameItemAttribute###prefix(itemGroup(item))
            THEN numberInName###prefix(attribute, itemGroup(item))
            ELSE numberInName###prefix(attribute);
    
    nameConcat###prefix##Attribute = GROUP CONCAT completeName(Item item, ItemAttribute attribute)
                                                   IF numberInName###prefix(attribute, item) AND value(item, attribute), ' ' BY item ORDER numberInName###prefix(attribute, item) PERSISTENT;
    name###prefix##Attribute 'Наименование'###caption (Item item) = OVERRIDE VARISTRING[255](
                    nameConcat###prefix##Attribute(item)),
                            overName(item)
                    IN group PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;
    
    background###prefix (ItemAttribute a, ItemGroup g) = RGB(203,203,206) IF numberInName###prefix(a, g) AND NOT numberInName###prefix(a, g) == dataNumberInName###prefix(a,g);   
    EXTEND FORM itemOptions 
        PROPERTIES(ia) numberInName###prefix
        PROPERTIES(ia1, tg) numberInName###prefix BACKGROUND background###prefix(ia1, tg)
        EXTEND FILTERGROUP filterA1
            FILTER 'В наименовании'##caption numberInName###prefix(ia1, tg)  
    ;
END

// -------------------------------------- Типы атрибутов ------------------------------- //

// Строка
CLASS StringItemAttribute 'Строковый атрибут' : ItemAttribute;

value = ABSTRACT CASE EXCLUSIVE VARISTRING[255] (Item, StringItemAttribute) PERSISTENT;
value(Item item, StringItemAttribute attribute) += value(item, attribute);

META defineStringItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group);
END

// Целое число
CLASS IntegerItemAttribute 'Целочисленный атрибут' : ItemAttribute;

value = ABSTRACT CASE EXCLUSIVE INTEGER (Item, IntegerItemAttribute) PERSISTENT;
string(Item item, IntegerItemAttribute attribute) = VARSTRING[255](value(item, attribute));
value(Item item, IntegerItemAttribute attribute) += string(item, attribute);

META defineIntegerItemAttribute(attribute, caption, group)
    @definePrimitiveItemAttribute(attribute, INTEGER, caption, group);
END

// Дробное число
CLASS DoubleItemAttribute 'Дробный атрибут' : ItemAttribute;

value = ABSTRACT CASE EXCLUSIVE DOUBLE (Item, DoubleItemAttribute) PERSISTENT;
string(Item item, DoubleItemAttribute attribute) = VARSTRING[255]([= FORMULA TEXT PG 'convert_numeric_to_string(CAST(($1) AS numeric))', MS 'dbo.convert_numeric_to_string(CAST(($1) AS numeric(38,19)))'](value(item, attribute)));
value(Item item, DoubleItemAttribute attribute) += string(item, attribute);

META defineDoubleItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group);
END

// ------------------------------- Значения для групп по умолчанию ------------------------------------- //

GROUP defaultItemGroup 'По-умолчанию' : base;
META defineItemGroupDefaultValueCustom(property, caption, type, typeIdentity, propertyTypeIdentity)
    data###property caption = DATA type (ItemGroup);
    data###typeIdentity###property caption (ItemGroup itemGroup) = name(data###property(itemGroup)) IN defaultItemGroup;
    
    levelParent###property (itemGroup) = GROUP MIN level(ItemGroup itemGroup, ItemGroup parent) IF data###property(parent)
                                                                  BY itemGroup PERSISTENT;    
    nearestParent###property (ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###property(itemGroup));
    nearest###property (ItemGroup itemGroup) = data###property(nearestParent###property (itemGroup));
    property (ItemGroup itemGroup) =
        OVERRIDE nearest###property (itemGroup), 
                 data###property(itemGroup) PERSISTENT;    
    
    propertyTypeIdentity caption (ItemGroup itemGroup) = name(property(itemGroup)) IN defaultItemGroup;    
END 

META defineItemGroupDefaultValue(property, caption, type, typeIdentity)  
    @defineItemGroupDefaultValueCustom(property, caption, type, typeIdentity, typeIdentity);

END 
META defineItemDefaultValue(property, caption, type, typeIdentity)
    @defineItemGroupDefaultValue(property, caption, type, typeIdentity);
    EXTEND FORM itemGroup PROPERTIES(g) typeIdentity;
END  
META defineItemGroupDefaultValue(property, caption, type)
    data###property caption = DATA type (ItemGroup) IN defaultItemGroup;
    
    levelParent###property (itemGroup) = GROUP MIN level(ItemGroup child, ItemGroup parent) IF data###property(parent)
                                                                  BY child PERSISTENT;    
    nearestParent###property (ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###property(itemGroup));
    nearest###property (ItemGroup itemGroup) = data###property(nearestParent###property (itemGroup));
    property caption (ItemGroup itemGroup) =
        OVERRIDE nearest###property (itemGroup), 
                 data###property(itemGroup) PERSISTENT IN defaultItemGroup;        
    
END 
META defineItemDefaultValue(property, caption, type)
    @defineItemGroupDefaultValue(property, caption, type);        
    EXTEND FORM itemGroup PROPERTIES(g) property; 
END
  
//-- Для двух объектов: задание значения для групы по-умолчанию (иерархия)
META defineItemDefaultValue(property, caption, type, typeIdentity, object)
    data##type caption = DATA type (###object, ItemGroup);
    data###typeIdentity##type caption (###object object, ItemGroup itemGroup) = name(data##type(object, itemGroup)) IN defaultItemGroup;
    
    levelParent##type (object, itemGroup) = GROUP MIN level(ItemGroup itemGroup, ItemGroup parent) IF data##type(###object object, parent)
                                                                  BY object, itemGroup PERSISTENT;    
    nearestParent##type (###object object, ItemGroup itemGroup) = itemGroup(itemGroup, levelParent##type(object, itemGroup));
    nearest##type (###object object, ItemGroup itemGroup) = data##type(object, nearestParent##type (object, itemGroup));
    
    property (###object object, ItemGroup itemGroup) =
        OVERRIDE nearest##type (object, itemGroup), 
                 data##type(object, itemGroup) PERSISTENT;    
    
    typeIdentity caption (###object object, ItemGroup itemGroup) = name(property(object, itemGroup)) IN defaultItemGroup;
END 

META defineItemDefaultValueCustom(property, caption, type, object)
    data###property caption = DATA type (###object, ItemGroup);
    
    levelParent###property (object, itemGroup) = GROUP MIN level(ItemGroup itemGroup, ItemGroup parent) IF data###property(###object object, parent)
                                                                  BY object, itemGroup PERSISTENT;    
    nearestParent###property (###object object, ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###property(object, itemGroup));
    nearest###property (###object object, ItemGroup itemGroup) = data###property(object, nearestParent###property (object, itemGroup));
    
    property caption (###object object, ItemGroup itemGroup) =
        OVERRIDE nearest###property (object, itemGroup), 
                 data###property(object, itemGroup) PERSISTENT;
                 
    quantityChild###property (object, itemGroup) = GROUP SUM 1 IF 
        data###property(###object object, ItemGroup childItemGroup) AND isParent(childItemGroup, ItemGroup itemGroup) 
            BY object, itemGroup PERSISTENT;
    quantityParent###property (object, itemGroup) = GROUP SUM 1 IF 
        data###property(###object object, ItemGroup parentItemGroup) AND isParent(ItemGroup itemGroup, parentItemGroup) 
            BY object, itemGroup PERSISTENT;                 

    backgroundWith###property (###object object, ItemGroup itemGroup) =
        IF data###property(object, itemGroup) THEN
            RGB(127,199,255) //IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChild###property (object, itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParent###property (object, itemGroup);
                 
                 
END 

// Ограничения на выбор значений справочника
META defineItemAttributeForm(attribute, formProperty, caption, group)
    @defineItemAttribute(attribute, caption, group);
    
    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute;
    EXTEND FORM itemGroups PROPERTIES(g) READONLYIF  isReadonly() showAny###attribute BACKGROUND backgroundShow###attribute(g) BEFORE deleteg;
    
    background###attribute = ABSTRACT COLOR (Item);
END

deleteUnusedAttributes 'Удалить неиспользуемые атрибуты' = ACTION ABSTRACT LIST();
EXTEND FORM options PROPERTIES() deleteUnusedAttributes;
DESIGN options {
    items {
        MOVE PROPERTY(deleteUnusedAttributes());
    }
};

META defineObjectItemAttribute(attribute, attributeClass, identity, caption, group)
    attribute = DATA attributeClass (Item);
    deleteUnusedAttributes() += ACTION FOR (attributeClass o IS attributeClass) AND NOT [= GROUP SUM 1 BY attribute(Item item)](o) DO DELETE o;
    identity###attribute caption (Item item) = identity(attribute(item)) IN group;

    CONSTRAINT DROPPED(attributeClass o IS attributeClass) AND [= GROUP SUM 1 IF NOT attribute(Item o) BY PREV(attribute(o))](o)
        MESSAGE 'Запрещено удалять атрибут ('##caption##'), так как на него есть ссылки в справочнике товаров';

    @defineItemAttributeForm(attribute, identity, caption, group);
END

autoSetGroupAttribute 'Автоматически проставлять привязки атрибутов к группам' = DATA BOOLEAN (UserRole);
EXTEND FORM userRole PROPERTIES(ur) autoSetGroupAttribute;
 
META defineItemFilterValue(object, captionProp, o)
    TABLE object##ItemGroup (###object, ItemGroup);
      
    dataIn 'Вкл' = DATA BOOLEAN (###object, ItemGroup);
    
    levelParentIn (object, itemGroup) = GROUP MIN level(ItemGroup itemGroup, ItemGroup parent) IF dataIn(###object object, parent)
                                                                  BY object, itemGroup PERSISTENT;    
    nearestParentIn (###object object, ItemGroup itemGroup) = itemGroup(itemGroup, levelParentIn(object, itemGroup));
    nearestIn (###object object, ItemGroup itemGroup) = dataIn(object, nearestParentIn (object, itemGroup));
    
    in 'Вкл' (###object object, ItemGroup itemGroup) =
        OVERRIDE nearestIn (object, itemGroup), 
                 dataIn(object, itemGroup) PERSISTENT;    
                 
    quantityChild (object, itemGroup) = GROUP SUM 1 IF 
        dataIn(###object object, ItemGroup childItemGroup) AND isParent(childItemGroup, ItemGroup itemGroup) 
            BY object, itemGroup PERSISTENT;
    quantityParent (object, itemGroup) = GROUP SUM 1 IF 
        dataIn(###object object, ItemGroup parentItemGroup) AND isParent(ItemGroup itemGroup, parentItemGroup) 
            BY object, itemGroup PERSISTENT;                 

    backgroundWith (###object object, ItemGroup itemGroup) =
        IF dataIn(object, itemGroup) THEN
            RGB(0,0,0) //IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChild (object, itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParent (object, itemGroup);
 
    countRec 'Кол-во (рек.)' (object, itemGroup)= GROUP SUM 1 IF 
        in(###object object, ItemGroup child) AND isParent(child, ItemGroup parent) 
            BY object, parent PERSISTENT;              
    countDataItemGroup 'Кол-во групп' (object) = GROUP SUM 1 IF 
        dataIn(###object object, ItemGroup itemGroup) BY object PERSISTENT;            

    WHEN autoSetGroupAttribute(mainRole[CustomUser](currentUser())) AND (CHANGED(object(Item item)) OR CHANGED(itemGroup(item))) AND countDataItemGroup(object(item)) AND NOT countRec(object(item), itemGroup(item)) DO {
        dataIn(###object o, ItemGroup g) <- TRUE WHERE o == object(item) AND g == itemGroup(item);
    }

    CONSTRAINT object(Item item) AND itemGroup(item) AND countDataItemGroup(object(item)) AND NOT countRec(object(item), itemGroup(item))
        CHECKED BY object[Item]  
            MESSAGE captionProp##' должен быть доступен для товарной группы (товар)';    

    EXTEND FORM object
        TREE groupTree g=ItemGroup PARENT parent
        PROPERTIES READONLY order(g), name(g)
        PROPERTIES in(o,g) BACKGROUND backgroundWith(o,g)
        
        ORDER BY order(g), name(g)
        FILTERS active(g)
    ;
    DESIGN object {
        main {
            MOVE groupTree.tree.box BEFORE functions.box;
        }
    }
    
    FORM object###session 'Добавить'    
        OBJECTS gg = ItemGroup FIXED PANEL 
           
        OBJECTS v = VARISTRING[100] FIXED PANEL    
        PROPERTIES (v) val = OBJVALUE 
    ;    
    
    DESIGN object###session { 
        main{ 
            REMOVE gg.box;
            preferredSize = (600, 400); 
            MOVE v.box {        
                caption = captionProp;
                PROPERTY (val) {
                    caption = 'Наименование';
                    panelCaptionAbove = TRUE;
                    font = 'bold 24';
                }
            }
            MOVE functions.box;
        }
    }    
    FORM object##s###session captionProp
        OBJECTS gg = ItemGroup FIXED PANEL
    
        OBJECTS t= ###object
        PROPERTIES(t) name READONLY
        ORDER BY name(t)
    ;
    DESIGN object##s###session { main{ preferredSize = (600, 400); } }    
  
    add###object 'Добавить'(ItemGroup gg) = ACTION {
        FORM object###session OBJECTS gg = gg MODAL;    
        IF formResult() == FormResult.ok THEN {
            LOCAL loc = ###object();
            loc() <- NULL;
            NEWSESSION NESTED chosenString, loc {
                IF object##Name(chosenString('v')) THEN {
                    dataIn(###object t, gg) <- TRUE WHERE  t == object##Name(chosenString('v'));
                } ELSE {
                    FOR ADDOBJ p = ###object DO {
                        name(p) <- chosenString('v');
                        dataIn(p, gg) <- TRUE;
                        loc() <- p;
                    }
                }
                APPLY NESTED LOCAL {};
            }
            SEEK object##s###session.t (IF object##Name(chosenString('v')) THEN object##Name(chosenString('v')) ELSE loc());
        }
    } TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';
    
    EXTEND FORM object##s###session
        PROPERTIES add###object(gg) FORCE PANEL TOOLBAR TODRAW t, EDITFORM(t), deletet = DELETE(t) FORCE PANEL TOOLBAR
    ; 
    
    change###object(Item i) = ACTION {
        IF object(i) THEN {
            REQUEST OBJECT t
                FORM object##s###session OBJECTS gg = itemGroup(i), t = object(i) CONTEXTFILTER t = object(i) DIALOG SHOWDROP;
        } ELSE {
            REQUEST OBJECT t
                FORM object##s###session OBJECTS gg = itemGroup(i) CONTEXTFILTER t = object(i) DIALOG SHOWDROP;
        }
           
        IF formResult() == FormResult.ok THEN {
            object(i) <- requestedObject();
    
        } ELSE IF formResult() == FormResult.drop THEN {
            object(i) <- NULL;
        }
    }    
    EXTEND FORM item PROPERTIES(i) name###object SHOWIF show###object(i) BACKGROUND background###object(i) ON CHANGE change###object(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei name###object SHOWIF showAny###object(g) ON CHANGE change###object(i);

END

// ---------------------------- Выделение атрибутов -------------------------------- //

skipExtractAttribute = ABSTRACT BOOLEAN (Item);

// -------------- Символьное --------------------- //
FORM extractStringAttributeItem 'Выделение атрибута'
    OBJECTS from = VARSTRING[100] FIXED PANEL
    PROPERTIES(from) from = OBJVALUE
    
    OBJECTS to = VARSTRING[100] FIXED PANEL
    PROPERTIES(to) to = OBJVALUE
;

possibleStringAttributeValue = DATA LOCAL BOOLEAN (VARSTRING[100]);
changePossibleStringAttributeValue(VARSTRING[100] v) = ACTION {
    SEEK extractStringAttributeItem.to v;
}
 
EXTEND FORM extractStringAttributeItem
    OBJECTS v = VARSTRING[100] FIXED GRID
    PROPERTIES(v) value = OBJVALUE ON CHANGE changePossibleStringAttributeValue(v) 
    FILTERS possibleStringAttributeValue(v)
    ORDER BY value
;

DESIGN extractStringAttributeItem {
    PROPERTY(from) {
        caption = 'Последовательность символов, которую извлечь';
        font = '32';
        panelCaptionAbove = TRUE;
    }
    PROPERTY(to) {
        caption = 'Последовательность символов, на которую заменить';
        font = '32';
        panelCaptionAbove = TRUE;
    }
    v.box {
        caption = 'Возможные значения';
        PROPERTY(value) {
            caption = 'Значение';
        }
    }
}

assignStringToFrom(VARSTRING[100] from) = ACTION {
    SEEK extractStringAttributeItem.to from; 
} 
EXTEND FORM extractStringAttributeItem
    EVENTS 
        ON CHANGE from assignStringToFrom(from);
;

META defineItemExtractObjectAttribute(object, objectIdentity, identityObject)
    extract###object##FromCaption 'Выделить из названия'(Item i) = ACTION {
        IF i IS Item THEN {
            possibleStringAttributeValue(VARSTRING[100] s) <- TRUE IF [= GROUP SUM 1 IF in(###object object, ItemGroup g) BY name(object), g](s, itemGroup(i));
            FORM extractStringAttributeItem MODAL;
            IF formResult() == FormResult.ok THEN {
                LOCAL object = ###object();
                object() <- identityObject(trim(chosenString('to')));
                IF NOT object() THEN {
                    FOR ADDOBJ a = ###object DO {
                        name(a) <- trim(chosenString('to'));
                        object() <- a;
                    }
                }
                LOCAL selected = BOOLEAN (Item);
                selected(Item item) <- isSubstring(caption(item), chosenString('from')) == 1 AND [= FILTER items.i](item) AND NOT skipExtractAttribute(item);
                dataIn(###object a, ItemGroup g) <- TRUE WHERE a == object() AND [= GROUP SUM 1 IF selected(Item item) BY itemGroup(item)](g);
                object(Item item) <- object() WHERE selected(item);
                // вырезаем двойные пробелы, а также ненужные символы в начале и конце
                caption(Item item) <- rtrim(
                                        ltrim(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(
                                                            replace(caption(item), chosenString('from'), ''), 
                                                            '  ', ' '),
                                                        '" "', ''),
                                                    '""', ''),
                                                '  ', ' '),
                                            ' ,.'), 
                                        ' ,.') WHERE selected(item);
            }
        }
    } SHORTCUT objectIdentity[Item];
END

META defineItemExtractPrimitiveAttribute(property, form, fromProp)
    extract###property##FromCaption 'Выделить из названия'(Item i) = ACTION {
        IF i IS Item THEN {
            possibleStringAttributeValue(VARSTRING[100] s) <- NULL;
            FORM form MODAL;
            IF formResult() == FormResult.ok THEN {
                LOCAL selected = BOOLEAN (Item);
                selected(Item item) <- isSubstring(caption(item), fromProp('from')) == 1 AND [= FILTER items.i](item) AND NOT skipExtractAttribute(item);
                property(Item item) <- trim(fromProp('to')) WHERE selected(item);
                // вырезаем двойные пробелы, а также ненужные символы в начале и конце
                caption(Item item) <- rtrim(
                                        ltrim(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(
                                                            replace(caption(item), fromProp('from'), ''), 
                                                            '  ', ' '),
                                                        '" "', ''),
                                                    '""', ''),
                                                '  ', ' '),
                                            ' ,.'), 
                                        ' ,.') WHERE selected(item);
            }
        }
    } SHORTCUT property[Item];
END

// -------------- Символьное --------------------- //

META defineItemExtractStringAttribute(property)
    @defineItemExtractPrimitiveAttribute(property, extractStringAttributeItem, chosenString);
END

// -------------- Числовое --------------------- //
FORM extractDoubleAttributeItem 'Выделение атрибута'
    OBJECTS from = VARSTRING[100] FIXED PANEL
    PROPERTIES(from) from = OBJVALUE
    
    OBJECTS to = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(to) to = OBJVALUE
;

DESIGN extractDoubleAttributeItem {
    PROPERTY(from) {
        caption = 'Последовательность символов, которую извлечь';
        font = '32';
        panelCaptionAbove = TRUE;
    }
    PROPERTY(to) {
        caption = 'Число, которое использовать';
        font = '32';
        panelCaptionAbove = TRUE;
    }
}

assignDoubleToFrom(VARSTRING[100] from) = ACTION {
    SEEK extractDoubleAttributeItem.to toInteger(replace(from AS VARSTRING[100], '%', ''));
} 
EXTEND FORM extractDoubleAttributeItem
    EVENTS 
        ON CHANGE from assignDoubleToFrom(from);
;

META defineItemExtractDoubleAttribute(property)
    @defineItemExtractPrimitiveAttribute(property, extractDoubleAttributeItem, chosenNumeric);
END

// ---------------------------- Конкретные свойства -------------------------------- //

GROUP itemBase 'Базовые свойства' : base;
GROUP itemOriginal 'Оригинальные свойства' : base;

// Неактивный
inactive 'Неактивная' = DATA BOOLEAN (ItemGroup);
active 'Активный' (ItemGroup group) = group IS ItemGroup AND NOT inactive(group);
inactive(ItemGroup group) += inactive(group);

EXTEND FORM itemGroup PROPERTIES(g) inactive;
EXTEND FORM itemGroups
    PROPERTIES(g) READONLYIF isReadonly() inactive BEFORE canonicalName(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F10' DEFAULT
;
EXTEND FORM dialogItemGroups
    FILTERGROUP inactive FILTER 'Активные' active(tg) 'F10' DEFAULT
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F10' DEFAULT;

// Группа
@implementItemAttribute(nameItemGroup, 'Группа товаров', String, itemItemGroup);

// ------ Базовые свойства товара ------ //

// Название
@defineStringItemAttribute(caption, VARISTRING[255], 'Название', itemBase);

@defineItemDefaultValue(caption, 'Название', VARISTRING[255]);
WHEN SESSION CHANGED(itemGroup(Item i)) AND NOT caption(i) DO
    caption(i) <- caption(itemGroup(i));

@defineItemAttributeBatch (caption, 'Название');
@implementItemAttribute(caption, 'Название', String, itemCaption);

extractStringCaption 'Заменить в названии'(Item i) = ACTION {
    IF i IS Item THEN {
        possibleStringAttributeValue(VARSTRING[100] s) <- NULL;
        FORM extractStringAttributeItem MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL selected = BOOLEAN (Item);
            selected(Item item) <- isSubstring(caption(item), chosenString('from')) == 1 AND [= FILTER items.i](item) AND NOT skipExtractAttribute(item);
            // вырезаем двойные пробелы, а также ненужные символы в начале и конце
            caption(Item item) <- rtrim(
                                    ltrim(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(caption(item), chosenString('from'), chosenString('to')), 
                                                        '  ', ' '),
                                                    '" "', ''),
                                                '""', ''),
                                            '  ', ' '),
                                        ' ,.'), 
                                    ' ,.') WHERE selected(item);
        }
    }
} SHORTCUT caption[Item];

@defineStringItemAttribute(originalCaption, VARISTRING[100], 'Название (ориг.)', itemOriginal);
@defineItemAttributeBatch (originalCaption, 'Название (ориг.)');

// Единица измерения
@defineObjectItemAttribute(UOM, UOM, name, 'Единица измерения', itemBase);
@defineObjectItemAttributeBatch (UOM, nameUOM, 'Единица измерения', sku);

shortNameUOM 'Единица измерения' (Item item) = shortName(UOM(item)) IN itemBase;
UOM(Item item) += UOM(item);

@defineItemDefaultValue(UOM, 'Ед. изм.', UOM, nameUOM); 
WHEN SESSION CHANGED(itemGroup(Item i)) AND NOT UOM(i) DO
    UOM(i) <- UOM(itemGroup(i));
@defineItemFilterValue(UOM, 'Ед. изм.', u);

//@implementObjectShortItemAttribute(UOM, 'Единица измерения (сокр.)');
@implementItemAttribute(shortNameUOM, 'Единица измерения (сокр.)', String, itemShortUOM);

@defineUniteFilterAttributeItem(UOM, name, 'единица измерения', 'единицы измерения', item);
EXTEND FORM attributesItem
    PROPERTIES(UOM) READONLY AFTER name(UOM) grossWeight, netWeight, split, factor, genitiveName, 
                                                shortNameBase, shortName, id SHOWIF showIDs()   
;

// Брэнд
CLASS Brand 'Бренд';
TABLE brand(Brand);

@defineExternalizable(brand, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[50](Brand);
brandName = GROUP AGGR Brand brand BY name(brand);

site 'Адрес сайта' = DATA VARISTRING[100](Brand);

FORM brand 'Бренд'
    OBJECTS t=Brand FIXED PANEL
    PROPERTIES(t) name, site, id SHOWIF showIDs()
    EDIT Brand OBJECT t
;

FORM brands 'Бренды'
    OBJECTS t=Brand
    PROPERTIES(t) name READONLY, site READONLY, id READONLY SHOWIF showIDs(), deleteb=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY name(t)
    DIALOG Brand OBJECT t
;
DESIGN brands { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(brand, Brand, name, 'Бренд', itemBase);

idBrand(Barcode barcode) = id(brand(sku(barcode)));
nameBrand(Barcode barcode) = name(brand(sku(barcode)));

@defineObjectItemAttributeBatch (brand, nameBrand, 'Бренд');
@implementItemAttribute(nameBrand, 'Бренд', String, itemBrand);

@defineItemFilterValue(brand, 'Бренд', t);
@defineItemExtractObjectAttribute(brand, nameBrand, brandName);

@defineUniteFilterAttributeItem(brand, name, 'бренд', 'бренды', item);
EXTEND FORM attributesItem
    PROPERTIES(brand) AFTER name(brand) READONLY site, id SHOWIF showIDs()
;

INDEX brand(Item i);

// Страна
@defineObjectItemAttribute(country, Country, name, 'Страна', itemBase);
@defineObjectItemAttributeBatch (country, nameCountry, 'Страна', sku);
@implementItemAttribute(nameCountry, 'Страна', String, itemCountry);

@defineItemFilterValue(country, 'Страна', c);

@defineUniteFilterAttributeItem(country, name, 'страна', 'страны', item);
EXTEND FORM attributesItem
    PROPERTIES(country) READONLY AFTER name(country) nameLanguage, nameCurrency, resident, 
                                                            sidOrigin3, sidOrigin2, sid, nameOrigin
;

resident 'Отечественное производство' (Item item) = resident(country(item)) IN itemBase;
country(Item sku) += country(sku);

INDEX country(Item i);

// Производитель
CLASS Manufacturer 'Производитель товара';
TABLE manufacturer(Manufacturer);

@defineExternalizable(manufacturer, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[100](Manufacturer) IN recognize MINCHARWIDTH 15 PREFCHARWIDTH 25;
manufacturerName = GROUP AGGR Manufacturer m BY name(m); 
address 'Адрес производителя' = DATA VARSTRING[255] (Manufacturer) MINCHARWIDTH 20 PREFCHARWIDTH 40;

originalName 'Наименование (ориг.)' = DATA VARISTRING[100](Manufacturer) MINCHARWIDTH 15 PREFCHARWIDTH 15;
originalAddress 'Адрес производителя (ориг.)' = DATA VARSTRING[255] (Manufacturer) MINCHARWIDTH 20 PREFCHARWIDTH 20;

country = DATA Country (Manufacturer);
nameCountry 'Страна' = name(country(Manufacturer m)) MINCHARWIDTH 20 PREFCHARWIDTH 20;

FORM manufacturer 'Производитель товара'
    OBJECTS m=Manufacturer FIXED PANEL
    PROPERTIES(m) name, address, id SHOWIF showIDs(), originalName, originalAddress,
                  nameCountry
    EDIT Manufacturer OBJECT m
;

DESIGN manufacturer {
    main{
        PROPERTY(name(m)){
            preferredCharWidth = 50;    
        }
    }       
}

FORM manufacturerDialog 'Производители товара'
    OBJECTS m=Manufacturer
    PROPERTIES(m) name READONLY, id READONLY SHOWIF showIDs(), 
                  originalName, originalAddress, nameCountry, deleteManufacturer =DELETE FORCE PANEL TOOLBAR
    PROPERTIES(m) ADDFORM, EDITFORM
    ORDER BY name(m)
    DIALOG Manufacturer OBJECT m
;
DESIGN manufacturerDialog { main{ preferredSize = (600, 400); } }

@defineObjectItemAttribute(manufacturer, Manufacturer, name, 'Производитель', itemBase);
@defineObjectItemAttributeBatch (manufacturer, nameManufacturer, 'Производитель');
@implementItemAttribute(nameManufacturer, 'Производитель', String, itemManufacturer);

@defineItemFilterValue(manufacturer, 'Производитель', m);

@defineUniteFilterAttributeItem(manufacturer, name, 'производитель', 'производители', item);
EXTEND FORM attributesItem
    PROPERTIES READONLY AFTER name(manufacturer) id(manufacturer) SHOWIF showIDs(),
                        originalName(manufacturer), originalAddress(manufacturer), nameCountry(manufacturer)

;

addressManufacturer 'Адрес производителя' (Item item) = address(manufacturer(item)); 

INDEX manufacturer(Item i);

//  Состав
@defineStringItemAttribute(composition, VARSTRING[255], 'Состав', itemBase);
@defineItemAttributeBatchClass (composition, 'Состав', sku);
composition (Item sku) += composition(sku);

@defineStringItemAttribute(originalComposition, STRING[255], 'Состав (ориг.)', itemOriginal);

// Тара
skuType = DATA SkuType (Item);
skuType (Item sku) += skuType(sku);

skuType(Item item) <- SkuType.skuTypeItem WHEN SET(item IS Item);

nameSkuType 'Тип SKU' (Item item) = staticCaption(skuType(item)) IN itemBase;
EXTEND FORM item PROPERTIES(i) nameSkuType;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() nameSkuType;

// Весовой
@definePrimitiveItemAttribute(split, BOOLEAN, 'Дробный', itemBase);
split(Item sku) += split(sku);

split(Item i) <- split(UOM(i)) WHEN CHANGED(UOM(i));

// Фиксированная цена
@definePrimitiveItemAttribute(fixedPrice, BOOLEAN, 'Товар с фиксированной ценой', itemBase);
fixedPrice(Item sku) += fixedPrice(sku);

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (Item) IN itemBase;
prevInactive (Item i) = PREV(inactive(i));

active 'Активный' (Item item) = item IS Item AND NOT inactive(item);
prevActive = Item i IS Item AND NOT prevInactive(i);

inactive(Item sku) += inactive(sku);
EXTEND FORM item PROPERTIES(i) inactive;
EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() inactive
    FILTERGROUP inactive2 FILTER 'Активные' prevActive(i) 'F10' DEFAULT
;

DESIGN item {
    itemPrimaryColumn1 {
        MOVE i.itemBase {
            columns = 2;
            PROPERTY(composition(i)) {
                minimumCharWidth = 20;
                preferredCharWidth = 40;
            }
        }
        MOVE i.itemOriginal {
            columns = 2;
        }
    }
}
DESIGN item {
    itemPrimaryColumn1 {
        NEW regionPrm AFTER i.itemBase {
            type = COLUMNS;
            columns = 2;
            caption = 'Региональные свойства';
        }
    }
}

// ------ Габариты товара ------ //

GROUP itemSize 'Габариты товара' : public;

// Вес нетто
@defineDoubleItemAttribute(netWeight, NUMERIC[11,5], 'Вес нетто, кг', itemSize);
@defineItemAttributeBatchClass (netWeight, 'Вес нетто, кг', sku);
@implementItemAttribute(netWeight, 'Вес нетто, кг', Double, itemNetWeight);
netWeight(Item sku) += netWeight(sku);
netWeight(Item i) <- netWeight(UOM(i)) WHEN CHANGED(UOM(i)) AND netWeight(UOM(i));

// Вес брутто
@defineDoubleItemAttribute(grossWeight, NUMERIC[11,5], 'Вес брутто, кг', itemSize);
@defineItemAttributeBatchClass (grossWeight, 'Вес брутто, кг', sku);
grossWeight(Item sku) += grossWeight(sku);

WHEN SESSION (CHANGED(netWeight(Item sku)) OR (CHANGED(UOM(sku) AND grossWeight(UOM(sku))))) AND NOT CHANGED(grossWeight(sku)) DO
    grossWeight(sku) <- OVERRIDE netWeight(sku), grossWeight(UOM(sku));

// Кол-во в грузовом месте
// todo : здесь скорее всего надо будет рефакторить на более сложную логику
//@defineDoubleItemAttribute(packQuantity, NUMERIC[9,3], 'Количество в грузовом месте', itemSize);
//packQuantitySku(sku) += packQuantityItem(sku);

DESIGN item {
    itemPrimaryColumn2 {
        MOVE i.itemSize {
            columns = 2;
        }
    }
}

loadDefaultItemAttributes 'Загрузить стандартные атрибуты товаров' = ACTION ABSTRACT LIST ();
@implementLoadDefaultData(loadDefaultItemAttributes);

// ---------------------------------------------- Формирование наименований -------------------------------------- //

TABLE itemAttributeItemGroup(ItemAttribute, ItemGroup);

@defineItemDefaultValueCustom(required, 'Обязательный для заполнения', BOOLEAN , itemAttribute);

quantityChildWithRequired = GROUP SUM 1 IF dataRequired(ItemAttribute a, ItemGroup child) AND isParent(child, ItemGroup parent) BY a, parent ;
quantityParentWithRequired = GROUP SUM 1 IF dataRequired(ItemAttribute a, ItemGroup parent) AND isParent(ItemGroup child, parent) BY a, child ;

backgroundRequired (ItemAttribute a, ItemGroup g) =
    IF dataRequired(a, g) THEN
        RGB(0,0,0)
    ELSE
        RGB(203,203,206) IF quantityChildWithRequired (a, g) != descendantNumber(g)
                         AND NOT quantityParentWithRequired (a, g);

EXTEND FORM itemOptions 
    PROPERTIES(ia1, tg) required BACKGROUND backgroundRequired(ia1, tg);

constraintRequired(ItemAttribute a, Item i) = (DROPPED (value(i, a)) OR SET (i IS Item)) AND required(a, itemGroup(i)) AND NOT value(i, a);

CONSTRAINT  constraintRequired(ItemAttribute a, Item i)
    MESSAGE 
    [=GROUP CONCAT ('Для товара должен быть задан атрибут ' + staticCaption(ItemAttribute a)) IF 
                    constraintRequired(a,Item i), '\n']();

// Базовое наименование
@defineItemAttributeName( , , recognize);

backgroundNameAttribute = RGB(127,199,255) IF overName(Item i);
changeNameAttribute = ACTION ABSTRACT (Item);

EXTEND FORM item PROPERTIES(i) nameAttribute BACKGROUND backgroundNameAttribute(i) ON CHANGE changeNameAttribute(i);
DESIGN item { itemHeader {MOVE PROPERTY(nameAttribute(i)); } }

name(Item item) += nameAttribute(item);
loadDefaultItemAttributes() += ACTION {
    ASSIGN numberInName(StringItemAttribute a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}

EXTEND FORM items
    PROPERTIES READONLY BACKGROUND background(i) AFTER idBarcode(i) nameAttribute(i) // вообще надо использовать nameAttributeGroupGroupTypeItem(g, gt, i) для скорости, но тогда не будет работать отбор без групп
    PROPERTIES READONLYIF isReadonly() BACKGROUND background(i) AFTER nameAttribute(i) idItemGroup(i) , canonicalNameGroup(gt,i) 

    FILTERGROUP groupFilters
        FILTER 'С группами' isParent(g, i) 'F9' DEFAULT
        FILTER 'Без групп' nameAttribute(i) IF gt IS GroupType AND NOT group(gt,i) 'F8'

    ORDER BY nameAttribute(i)
;

DESIGN items {
    PROPERTY(canonicalNameGroup(gt,i)) {
        caption = 'Полное имя группы';
    }
}    
// Кассы
@defineItemAttributeName(cashRegister, ' (кассы)', public);
dataTitleCashRegister 'Наименование для касс' = DATA VARSTRING[100] (Barcode);
titleCashRegister 'Наименование для касс' = OVERRIDE nameCashRegisterAttribute(sku(Barcode barcode)), dataTitleCashRegister(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    ASSIGN numberInNameCashRegister(StringItemAttribute a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}
// Весы
@defineItemAttributeName(scales, ' (весы)', public);
dataTitleScales 'Наименование для весов' = DATA VARSTRING[100] (Barcode);
titleScales 'Наименование для весов' = OVERRIDE nameScalesAttribute(sku(Barcode barcode)), dataTitleScales(barcode) MINCHARWIDTH 30 PREFCHARWIDTH 30;
loadDefaultItemAttributes() += ACTION {
    ASSIGN numberInNameScales(StringItemAttribute a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}

// Сроки годности
GROUP itemExpiry 'Сроки годности' : public;

expiryDays 'Срок годности в днях' = DATA INTEGER (Item) IN itemExpiry;
expiryDays(Item i) += expiryDays(i);

expiryMonth 'Срок годности в месяцах' = DATA INTEGER (Item) IN itemExpiry;
expiryMonth(Item i) += expiryMonth(i);

expiry 'Срок годности' = DATA BOOLEAN (Item) IN itemExpiry;
@defineItemAttribute(expiry, 'Срок годности', itemExpiry);

EXTEND FORM itemGroup PROPERTIES(g) userShowExpiry;
EXTEND FORM itemGroups PROPERTIES(g) READONLYIF  isReadonly() showExpiry BACKGROUND backgroundShowExpiry(g) BEFORE deleteg;
EXTEND FORM item PROPERTIES(i) SHOWIF showExpiry(i) expiryDays, expiryMonth;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei SHOWIF showExpiry(g) expiryDays, expiryMonth;
DESIGN item {
    itemPrimaryColumn2 {
        MOVE i.itemExpiry {
            columns = 1;
        }
    }    
}


// --------------------------------------- Генерация штрихкодов --------------------------------------------- //

META defineNumeratorItemGroup (prefix, caption)
    data###prefix##Numerator = DATA Numerator (ItemGroup);
    levelParent###prefix##Numerator (itemGroup) = GROUP MIN level(ItemGroup itemGroup, ItemGroup parent) IF data###prefix##Numerator(parent)
                                                                  BY itemGroup PERSISTENT;
    nearestParent###prefix##Numerator (ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###prefix##Numerator(itemGroup));
    nearest###prefix##Numerator (ItemGroup itemGroup) = data###prefix##Numerator(nearestParent###prefix##Numerator(itemGroup)) PERSISTENT;

    prefix##Numerator (ItemGroup itemGroup) =
        OVERRIDE nearest###prefix##Numerator(itemGroup), data###prefix##Numerator(itemGroup) PERSISTENT;
    name###prefix##Numerator caption (ItemGroup itemGroup) = name(prefix##Numerator(itemGroup)) MINCHARWIDTH 5 PREFCHARWIDTH 10 MAXCHARWIDTH 10;

    background###prefix##Numeratot (ItemGroup itemGroup) = IF data###prefix##Numerator(itemGroup) THEN
                                                                      RGB(190,190,190) IF itemGroup IS ItemGroup
                                                                  ELSE
                                                                      RGB(230,230,230) IF prefix##Numerator (itemGroup);

    EXTEND FORM itemGroup PROPERTIES(g)  AFTER nameParent(g) name###prefix##Numerator;
    EXTEND FORM itemGroups PROPERTIES(g) AFTER canonicalName(g) READONLYIF isReadonly() name###prefix##Numerator  BACKGROUND background###prefix##Numeratot(g);
END

@defineNumeratorItemGroup (piece, 'Нумератор штрихкодов (для штучного товара)');
pieceNumerator (Item item) = pieceNumerator(itemGroup(item));

overNumerator = ABSTRACT CASE Numerator (Item);
barcodeNumerator(Item item) += OVERRIDE pieceNumerator(item), overNumerator(item);

DESIGN itemGroup {
    main {
        NEW itemGroupHeader BEFORE functions.box {
            NEW itemGroupHeader1 {
                caption = 'Товарная группа';
                type = COLUMNS;
                columns = 3;
                MOVE PROPERTY(name(g));
                MOVE PROPERTY(order(g));
                MOVE PROPERTY(id(g));
                MOVE PROPERTY(nameParent(g));
                MOVE PROPERTY(inactive(g));
            }

            NEW itemGroupHeader2 {
                caption = 'Нумераторы';
                type = CONTAINERH;
                MOVE PROPERTY(namePieceNumerator(g));
            }
        }

        NEW itemGroupDetail BEFORE functions.box {
            MOVE g.itemBase {
                columns = 6;
            }
            MOVE g.itemOriginal {
                columns = 6;            
            }
            MOVE g.itemSize {
                columns = 6;
            }
            NEW itemGroupDetail1 {
                type = CONTAINERH;
                MOVE g.itemExpiry {type = CONTAINERH;}
            }                    
        }
    }
}

// ---------------------------------------- Копирование товара ----------------------- //
overCopy = ACTION ABSTRACT LIST (Item, Item);
overCopyItem = ACTION ABSTRACT LIST (Barcode, Barcode, Sku);
toCopy = ABSTRACT CASE BOOLEAN (Barcode);

copyDataItem(Item item, Item i) = ACTION  {
    itemGroup(i) <- itemGroup(item);
    caption(i) <- caption(item);
    originalCaption(i) <- originalCaption(item);
    UOM(i) <- UOM(item);
    brand(i) <- brand(item);
    manufacturer(i) <- manufacturer(item);
    composition(i) <- composition(item);
    originalComposition(i) <- originalComposition(item);
    netWeight(i) <- netWeight(item);
    grossWeight(i) <- grossWeight(item);
    country(i) <- country(item);
    dataImage(i) <- dataImage(item);
    skuType(i) <- skuType(item);
    split(i) <- split(item);
    inactive(i) <- inactive(item);
    expiryDays(i) <- expiryDays(item);
    expiryMonth(i) <- expiryMonth(item);

    FOR sku(Barcode barcode) == item AND toCopy(barcode) DO {
        FOR ADDOBJ b = Barcode DO {
            sku(b) <- i;
            dataDate(b) <- dataDate(barcode);
            dataUOM(b) <- dataUOM(barcode);
            dataAmount(b) <- dataAmount(barcode);
            dataTitleScales(b) <- dataTitleScales(barcode);
            dataTitleCashRegister(b) <- dataTitleCashRegister(barcode);
            
            overCopyItem(b, barcode, i);
        }
    }

    customGroup[CustomGroupType,Item](CustomGroupType type, i) <- customGroup[CustomGroupType,Item](type, item);

    overCopy(item, i);
}

copy 'Копировать' (Item item)= ACTION  {
    IF (item IS Item) THEN {
        NEWSESSION NESTED addedSku[] {
            FOR ADDOBJ i = Item DO {
                copyDataItem(item, i);
                FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
                IF formResult() == FormResult.ok THEN {
                    addedSku() <- i;
                }
            }
        }
    }
} EDITKEY 'F5' TOOLBAR;

copyItems 'Копировать' (Item item) = ACTION {
    copy(item);
    IF (addedSku()) THEN {
        SEEK items.i addedSku();
    }
} EDITKEY 'F5' TOOLBAR;

EXTEND FORM items PROPERTIES (i) copyItems;
DESIGN items { PROPERTY(copyItems(i)) { focusable = FALSE; } }

copy(Item sku) += ACTION copy(sku);

createItemBarcode (VARSTRING[15] barcode, DATE date)= ACTION NEWSESSION {

    LOCAL copy = BOOLEAN();
    IF skuAdded(currentUser()) IS Item THEN {
        CONFIRM 'Создать товар на основе последнего созданного ?';
        ASSIGN copy() <- confirmed();
    }

    IF copy() THEN {
        FOR ADDOBJ i = Item DO {
            copyDataItem(skuAdded(currentUser()), i);
            id(Barcode b) <- barcode WHERE sku(b) == i AND primary(b);
            FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } ELSE {
        FOR ADDOBJ bc = Barcode DO {
            id(bc) <- barcode;
            dataDate(bc) <- date;

            FOR ADDOBJ s = Item DO {
                sku(bc) <- s;
                FORM item OBJECTS i = s, b = bc MANAGESESSION DOCKEDMODAL;
            }
        }
    }
}

createSkuBarcode(VARSTRING[15] barcode, DATE date) += ACTION createItemBarcode(barcode, date);

in 'Отм.' = DATA LOCAL BOOLEAN (Item);

countInItem = GROUP SUM 1 IF in(Item item);

checkReplace = ACTION ABSTRACT (Item);

FORM confirmReplaceItem 'Объединяемые товары'
    OBJECTS item = Item FIXED PANEL 

    OBJECTS i = Item  
    PROPERTIES(i) READONLY idBarcode, nameAttribute
    FILTERS i==item

    OBJECTS i2 = Item
    PROPERTIES(i2) in
    PROPERTIES(i2) READONLY idBarcode, nameAttribute
    FILTERS in(i2)
;

DESIGN confirmReplaceItem {
    REMOVE item.box;
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        MOVE i.box{
            caption = 'Основной товар';
        }
        MOVE i2.box{
            caption = 'Удаляемый товар';
        }           
    }
    MOVE functions.box;
}

replace 'Объединить' (Item item)= ACTION {
    FORM confirmReplaceItem OBJECTS i=item MODAL;
    IF formResult() == FormResult.ok THEN {
        allowReplaceItem() <- TRUE;
        checkReplace(item);
        FOR in(Item i) AND allowReplaceItem() AND item IS Item DO {
            IF i != item THEN {
                replace(i, item);
                overReplace(i, item);
                in(i) <- NULL;
                DELETE i;            
            } ELSE {
                MESSAGE 'Выделенный товар не может совпадать с объединяемым';
            }
        }
        apply();
    } ELSE {
        in(Item i) <- NULL WHERE in(i);           
    }   
} CONFIRM;

changeGroupItem 'Изменить группу' () = ACTION {
    FORM dialogItemGroups MODAL;

    IF formResult() == FormResult.ok THEN {
        FOR in(Item i) DO{
            itemGroup(i) <- chosenObject('g');
        }
    }
}


EXTEND FORM items
    PROPERTIES(i) in BEFORE idBarcode(i), replace FORCE PANEL
;
DESIGN items {
    actions {
        NEW replace {
            caption = 'Слияние товаров';
            MOVE PROPERTY(replace(i));
        }
    }
}

// -------------------- Автоматическое проставление даты параметров ------------------ //

defaultItemDate 'Дата для региональных параметров по умолчанию' = DATA DATE();
EXTEND FORM options PROPERTIES() defaultItemDate;
DESIGN options { 
    items { 
        MOVE PROPERTY(defaultItemDate()); 
    } 
}

seekItemDate() = ACTION {
    IF defaultItemDate() THEN {
        SEEK item.dtr defaultItemDate();
    }
}
EXTEND FORM item
    EVENTS ON INIT seekItemDate()
;

//----------- Задание значения по-умолчанию ----------------//
TABLE customGroupTypeItemGroup(CustomGroupType, ItemGroup);
@defineItemDefaultValue(customGroup, 'Дополнительная группа (по умолчанию)', CustomGroup, nameCustomGroup, customGroupType);


EXTEND FORM itemGroup
    OBJECTS dc=CustomGroupType 
    PROPERTIES(dc)   READONLY name, id
    PROPERTIES(dc, g) nameCustomGroup    
;    
DESIGN itemGroup {

    NEW type BEFORE functions.box{
        fill = 1;
        NEW detail {
            fill = 1;
            caption = 'По умолчанию';
            MOVE g.defaultItemGroup {
                caption ='';
                columns = 3;
                PROPERTY(caption(g)) {minimumCharWidth = 20; preferredCharWidth = 40;}
            }
            NEW detail1{
                fill = 1;
                type = TABBED;
                MOVE dc.box { caption = 'Дополнительный классификатор';}
            }            
        }          
    }
}

WHEN SESSION CHANGED(itemGroup(Item i)) AND CustomGroupType dc IS CustomGroupType AND NOT customGroup(dc, i) DO
    customGroup(dc, i) <- customGroup(dc, itemGroup(i));

// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultItemGroup 'Добавить группы товаров' (VARISTRING[250] iname, VARSTRING[100] id) = ACTION {
    FOR ADDOBJ g = ItemGroup DO {
        name(g) <- iname;
        id(g) <- id;
        userShowCaption(g) <- TRUE;
        userShowUOM(g) <- TRUE;
        userShowBrand(g) <- TRUE;
        userShowManufacturer(g) <- TRUE;
        userShowCountry(g) <- TRUE;
    }
}

loadDefaultItemGroups 'Загрузить стандартные группы товаров' () = ACTION {
    loadDefaultItemGroup('Все','Все');    

} IN loadDefault;

@implementLoadDefaultData(loadDefaultItemGroups);
