MODULE MachineryPriceTransaction;

REQUIRE Machinery;

NAMESPACE Machinery;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skipPriceTransactionDocument 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (PriceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL WHEN SET(isDraftPriceTransactionDocument(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Machinery.PriceTransactionDocument;
    Machinery.isDraftPriceTransactionDocument (document) += isDraft###concrete(document);
    Machinery.descriptionPriceTransactionDocument (document) += description###concrete(document);
END
//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT MachineryPriceTransaction 'Загрузка прайса в оборудование';
TABLE machineryPriceTransaction (MachineryPriceTransaction);

@defineExternalizable(machineryPriceTransaction, VARSTRING[100]);

@defineCreated(MachineryPriceTransaction);

groupMachineryMachineryPriceTransaction (transaction) = ABSTRACT GroupMachinery (MachineryPriceTransaction);
nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));
nppGroupMachineryMachineryPriceTransaction 'Номер группы оборудования' (transaction) = nppGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

stockMachineryPriceTransaction (transaction) = stockGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));
idStockMachineryPriceTransaction (transaction) = idStock(stockMachineryPriceTransaction(transaction));

// Дата/время
dateMachineryPriceTransaction 'Дата' = DATA DATE (MachineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() WHEN SET(transaction IS MachineryPriceTransaction);

timeMachineryPriceTransaction 'Время' = DATA TIME (MachineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() WHEN SET(transaction IS MachineryPriceTransaction);

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = dateTimeToDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

orderMachineryPriceTransaction (transaction) = STRUCT(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

// Статус
snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (MachineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (MachineryPriceTransaction);
dateTimeSucceededMachineryPriceTransaction 'Время загрузки' = DATA DATETIME (MachineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (MachineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' (machineryPriceTransaction) =
    machineryPriceTransaction IS MachineryPriceTransaction AND NOT
    succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
    canceledMachineryPriceTransaction(machineryPriceTransaction);

// Основание
commentMachineryPriceTransaction 'Примечание' = DATA VARSTRING[100] (MachineryPriceTransaction);

priceTransactionDocumentMachineryPriceTransaction = DATA PriceTransactionDocument (MachineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) =
    OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document), commentMachineryPriceTransaction(document);

countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) IF NOT countProcessPriceTransactionDocument(document);

//-- Частичная загрузка
succeededMachineryMachineryPriceTransaction 'Загружено' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
dateTimeSucceededMachineryMachineryPriceTransaction 'Время загрузки' = DATA DATETIME(Machinery, MachineryPriceTransaction);

countSucceededMachineriesPriceTransactionDocument'Кол-во загруженного оборудования' (priceTransactionDocument) = GROUP SUM 1 IF succeededMachineryMachineryPriceTransaction(m,t) 
    BY priceTransactionDocumentMachineryPriceTransaction(t);
    
countSucceededMachineriesMachineryPriceTransaction'Кол-во загруженного оборудования' (machineryPriceTransaction) = GROUP SUM 1 
    IF succeededMachineryMachineryPriceTransaction(m,t) BY t;

countMachineriesGroupMachinery 'Кол-во оборудования в группе' (gm) =GROUP SUM 1 BY groupMachineryMachinery(m);
countMachineriesPriceTransactionDocument 'Кол-во оборудования в группе' (priceTransactionDocument) = GROUP SUM countMachineriesGroupMachinery(groupMachineryMachineryPriceTransaction(t)) BY priceTransactionDocumentMachineryPriceTransaction(t);
concatSucceededMachineriesPriceTransactionDocument 'Кол-во оборудования' (t)  = CONCAT '/', countSucceededMachineriesPriceTransactionDocument(t), countMachineriesPriceTransactionDocument(t); 

statusMachineryPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
    CASE
        WHEN skipPriceTransactionDocument(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument        
        WHEN countSucceededMachineriesPriceTransactionDocument(document) != countMachineriesPriceTransactionDocument(document) THEN (CONCAT ' ', 'Частично загружен', concatSucceededMachineriesPriceTransactionDocument(document))
        WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS PriceTransactionDocument        
        WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS PriceTransactionDocument
        ELSE 'Не загружен' IF document IS PriceTransactionDocument
    ;

// Загруженные штрихкоды
TABLE machineryPriceTransactionBarcode (MachineryPriceTransaction, Barcode);

inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA VARSTRING[255] (MachineryPriceTransaction, Barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (MachineryPriceTransaction, Barcode);

// Текущие загруженные штрихкоды
TABLE barcodeGroupMachinery (Barcode, GroupMachinery);

lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = 
    GROUP LAST transaction 
          BY barcode, groupMachineryMachineryPriceTransaction(transaction)
          ORDER orderMachineryPriceTransaction(transaction)
          WHERE inMachineryPriceTransactionBarcode(transaction, barcode) AND NOT canceledMachineryPriceTransaction(transaction) PERSISTENT;
prevLastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = PREV(lastTransactionBarcodeGroupMachinery (barcode, groupMachinery));

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
prevTransactionNameBarcodeGroupMachinery(barcode, groupMachinery) = PREV(transactionNameBarcodeGroupMachinery(barcode, groupMachinery));

transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode) PERSISTENT;
prevTransactionPriceBarcodeGroupMachinery (barcode, groupMachinery) = PREV(transactionPriceBarcodeGroupMachinery(barcode, groupMachinery));

transactionPriceBarcodeStock 'Текущая цена в оборудовании' (barcode, stock) =
    GROUP LAST transactionPriceBarcodeGroupMachinery(b, g) 
          BY b, stockGroupMachinery(g)
          ORDER orderMachineryPriceTransaction(lastTransactionBarcodeGroupMachinery(b, g))
          WHERE lastTransactionBarcodeGroupMachinery(b, g);

transactionPriceSkuStock 'Текущая цена в оборудовании' (sku, stock) =
    transactionPriceBarcodeStock(barcodeSku(sku), stock);

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS MachineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (MachineryPriceTransactionError);

dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA VARSTRING[200] (MachineryPriceTransactionError) IN base;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (MachineryPriceTransactionError) IN base;
toDateMachineryPriceTransactionError 'Дата возникновения' (d) = DATE(dateMachineryPriceTransactionError(d));
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (MachineryPriceTransactionError) IN base;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA MachineryPriceTransaction(MachineryPriceTransactionError) IN base;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN base;

@defineLog (MachineryPriceTransactionError, 'ошибок загрузки прайсов', log, toDate);

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (MachineryPriceTransaction, Machinery);
inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Machinery);
nppsMachineryPriceTransaction 'Номера устройств' (transaction) =
    GROUP CONCAT STRING[3](nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ','
          BY transaction
          ORDER machinery MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;

// перезагрузка прайса целиком
selectedGroupMachinery 'Вкл' = DATA LOCAL BOOLEAN (GroupMachinery);
selectedMachinery 'Вкл' = DATA LOCAL BOOLEAN (Machinery);

GROUP snapshotMachineryPrice 'Перезагрузка прайса' : public;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = Stock FIXED PANEL
    PROPERTIES(s) READONLY sname = nameStock

    OBJECTS g = GroupMachinery
    PROPERTIES(g) selectedGroupMachinery
    PROPERTIES(g) READONLY nppGroupMachinery, nameGroupMachinery, nameStockGroupMachinery
    FILTERS stockGroupMachinery(g) == s,
            activeGroupMachinery(g)
        
    OBJECTS m = Machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery

    FILTERS groupMachineryMachinery(m) == g
;

WHEN SESSION FORMS groupMachineryInput CHANGED (selectedGroupMachinery(g)) DO {
        selectedMachinery (m) <- selectedGroupMachinery(g) WHERE groupMachineryMachinery(m) == g;
    } 

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = MachineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nppGroupMachineryMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, dateTimeSucceededMachineryPriceTransaction SHOWIF succeededMachineryPriceTransaction(t), 
                  canceledMachineryPriceTransaction

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY idBarcode
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT MachineryPriceTransaction OBJECT t;
;

DESIGN machineryPriceTransaction FROM DEFAULT {
    NEW pane BEFORE functions.box {
        fill = 1;
        type = TABBED;
        
        ADD b.box;
    }
}

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES nameStock(s) SELECTOR
    FILTERS isCompanyStock(s)

    OBJECTS t = MachineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, 
                           timeMachineryPriceTransaction, descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, 
                           dateTimeSucceededMachineryPriceTransaction, canceledMachineryPriceTransaction, 
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY createdNameUserMachineryPriceTransaction, createdHostnameComputerMachineryPriceTransaction
    PROPERTIES(t)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS stockMachineryPriceTransaction(t) == s

    OBJECTS b = Barcode
    PROPERTIES(b)    READONLY idBarcode
    PROPERTIES(t, b) READONLY nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = MachineryPriceTransactionError LAST
    PROPERTIES(e)  READONLY dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t
;
@extendFormFilterStockAccess(s, machineryPriceTransactions);

DESIGN machineryPriceTransactions FROM DEFAULT {
    NEW header {
        type = CONTAINERH;
        ADD s.box {
            PROPERTY(nameStock(s)) {
                alignment = STRETCH;
            }
        }
    }
    NEW pane {
        fill = 1;
        type = SPLITV;
        ADD t.box;
        NEW specContainer{
            fill = 1;
            type = TABBED;
            ADD b.box;
            NEW errorContainer {
                fill = 1;
                caption = 'Сообщения об ошибках';
                ADD e.box;
                PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                    fill = 1;
                    panelLabelAbove = TRUE;
                }
            }
        }
    }
    ADD functions.box;
}

// ------------------------------------------------ Действия по загрузке ------------------------------------ //

CLASS RequestExchangeType 'Тип запроса' {
    salesInfo 'Перегрузить продажи',
    checkZReport 'Сверить суммы z-отчётов',
    terminalOrder 'Загрузить заказы',
    discountCard 'Загрузить дисконтные карты'
}

FORM requestExchangeTypes 'Типы запросов'
    OBJECTS r = RequestExchangeType
    PROPERTIES(r) READONLY staticCaption
    DIALOG RequestExchangeType OBJECT r
;

CLASS RequestExchange 'Запрос обмена данными';
TABLE requestExchange (RequestExchange);

stockRequestExchange 'Склад' = DATA Stock (RequestExchange) AUTOSET NOT NULL;
nameStockRequestExchange 'Склад' (requestExchange) = nameStock(stockRequestExchange(requestExchange));

TABLE stockRequestExchange(Stock, RequestExchange);
inStockRequestExchange 'Вкл' = DATA BOOLEAN (Stock, RequestExchange);  
extraStocksRequestExchange 'Дополнительные склады' (requestExchange) = GROUP CONCAT VARSTRING[255](nameStock(stock)) IF inStockRequestExchange(stock, requestExchange), ', ' 
    BY requestExchange MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT;;                                                                          
dateFromRequestExchange 'Дата с' = DATA DATE (RequestExchange) NOT NULL;
dateToRequestExchange 'Дата по' = DATA DATE (RequestExchange) NOT NULL;
startDateRequestExchange 'Загружать дисконтные карты начиная с даты' = DATA DATE (RequestExchange);
requestExchangeTypeRequestExchange 'Тип запроса' = DATA RequestExchangeType (RequestExchange) NOT NULL;
nameRequestExchangeTypeRequestExchange 'Тип запроса' (requestExchange) = staticName(requestExchangeTypeRequestExchange(requestExchange));
captionRequestExchangeTypeRequestExchange 'Тип запроса' (requestExchange) = staticCaption(requestExchangeTypeRequestExchange(requestExchange));
succeededRequestExchange 'Обработан' = DATA BOOLEAN (RequestExchange);
notSucceededRequestExchange 'Не обработан' (requestExchange) = requestExchange IS RequestExchange AND NOT succeededRequestExchange(requestExchange);
dateTimeSucceededRequestExchange 'Время обработки' = DATA DATETIME (RequestExchange);
showExtraStocks(requestExchange) = requestExchangeTypeRequestExchange(requestExchange) == RequestExchangeType.checkZReport OR 
                                   requestExchangeTypeRequestExchange(requestExchange) == RequestExchangeType.salesInfo;
showStartDate(requestExchange) = requestExchangeTypeRequestExchange(requestExchange) == RequestExchangeType.discountCard;

CLASS RequestExchangeLog 'Ошибки обмена данными';
TABLE requestExchangeLog (RequestExchangeLog);

machineryRequestExchangeLog 'Касса' = DATA Machinery (RequestExchangeLog);
nppMachineryRequestExchangeLog 'Касса' (requestExchangeLog) = nppMachinery(machineryRequestExchangeLog(requestExchangeLog));
messageRequestExchangeLog 'Сообщение' = DATA TEXT (RequestExchangeLog);
dateRequestExchangeLog 'Время' = DATA DATETIME (RequestExchangeLog);
requestExchangeRequestExchangeLog = DATA RequestExchange (RequestExchangeLog);

FORM requestExchange 'Запрос обмена данными'
    OBJECTS r = RequestExchange FIXED PANEL
    PROPERTIES(r) nameStockRequestExchange, dateFromRequestExchange, dateToRequestExchange, 
                  captionRequestExchangeTypeRequestExchange, succeededRequestExchange, dateTimeSucceededRequestExchange SHOWIF dateTimeSucceededRequestExchange(r),
                  startDateRequestExchange SHOWIF showStartDate(r)
    OBJECTS s = Stock FIXED GRID
    PROPERTIES(s, r) SHOWIF showExtraStocks(r) inStockRequestExchange
    PROPERTIES(s) SHOWIF showExtraStocks(r) idStock, nameStock, nameLegalEntityStock
    FILTERS isCompanyStock(s)
    
    EDIT RequestExchange OBJECT r
;

FORM requestExchanges 'Запросы обмена данными'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES nameStock(s) SELECTOR
    FILTERS isCompanyStock(s)
    
    OBJECTS r = RequestExchange
    PROPERTIES(r) READONLY nameStockRequestExchange, extraStocksRequestExchange SHOWIF showExtraStocks(r) FORCE PANEL, dateFromRequestExchange, dateToRequestExchange, 
                           captionRequestExchangeTypeRequestExchange, succeededRequestExchange, dateTimeSucceededRequestExchange,
                           startDateRequestExchange SHOWIF showStartDate(r) FORCE PANEL
    PROPERTIES(r)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS stockRequestExchange(r) == s
    
    OBJECTS rl = RequestExchangeLog
    PROPERTIES(rl) READONLY nppMachineryRequestExchangeLog, messageRequestExchangeLog, dateRequestExchangeLog
    FILTERS requestExchangeRequestExchangeLog(rl) == r    
;

createMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (GroupMachinery);

skipInGroupMachinerySku = ABSTRACT CASE BOOLEAN (GroupMachinery, Sku);
inGroupMachinerySku 'Вкл' (groupMachinery, sku) = groupMachinery IS GroupMachinery
                                                    AND sku IS Sku
                                                         AND NOT (filterSkuGroupMachinery(groupMachinery) AND NOT inGroupMachinerySkuGroup(groupMachinery, skuGroupSku(sku)))
                                                         AND NOT skipInGroupMachinerySku(groupMachinery, sku);
                                                         
skipGroupMachineryBarcode = ABSTRACT CASE BOOLEAN (GroupMachinery, Barcode);

// Перезагрузка целиком
snapshotAttributeMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (MachineryPriceTransaction, GroupMachinery);

snapshotGroupMachineryDepartmentStore 'Ранее загруженные' = ACTION (stock) NEWSESSION {
    FORM groupMachineryInput OBJECTS s = stock MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL groupMachinery = GroupMachinery ();
        groupMachinery() <- chosenObject('g');
        createMachineryPriceTransactionGroupMachinery(groupMachinery());
        FOR t == addedObject() DO {
            groupMachineryMachineryPriceTransaction(t) <- groupMachinery();
            commentMachineryPriceTransaction(t) <- 'Перезагрузка прайса целиком';
            snapshotMachineryPriceTransaction(t) <- TRUE;
            inMachineryPriceTransactionMachinery(t, machinery) <- selectedMachinery(machinery);
            inMachineryPriceTransactionBarcode(t, barcode) <- activeBarcode(barcode) AND activeSku(skuBarcode(barcode)) AND
                                                                  prevLastTransactionBarcodeGroupMachinery(barcode, groupMachinery()) AND
                                                                  inGroupMachinerySku(groupMachinery(), skuBarcode(barcode)); // важно, что товар должен быть активным на текущий момент
            nameMachineryPriceTransactionBarcode(t, barcode) <- prevTransactionNameBarcodeGroupMachinery(barcode, groupMachinery());
            snapshotAttributeMachineryPriceTransactionGroupMachinery(t, groupMachinery());
            priceMachineryPriceTransactionBarcode(t, barcode) <- prevTransactionPriceBarcodeGroupMachinery(barcode, groupMachinery());
        }
        apply();
    }
} IN snapshotMachineryPrice;

// Инкрементная загрузка
GROUP incrementMachineryPrice 'Инкрементная загрузка' : public;

// ------------------------------- Определение цены, по которой загружать ------------------------------- //

priceBarcodeGroupMachinery 'Цена' (barcode, groupMachinery) = priceAPriceListTypeSkuStockDateTime(priceListTypeGroupMachinery(groupMachinery),
                                                                                                  skuBarcode(barcode),
                                                                                                  stockGroupMachinery(groupMachinery),
                                                                                                  currentDateTime());

createMachineryPriceTransactionAll = DATA LOCAL BOOLEAN(); // установка флага на полное удаление старых товаров из кассы
createMachineryPriceTransactionSnapshot = DATA LOCAL BOOLEAN (); // загрузка не только изменившихся цен

createMachineryPriceTransactionSku = DATA LOCAL BOOLEAN (Sku);

createMachineryPriceTransactionDocument = DATA LOCAL PriceTransactionDocument();
createMachineryPriceTransactionComment = DATA LOCAL VARSTRING[100] ();

createAttributeMachineryPriceTransaction = ABSTRACT ACTION LIST (MachineryPriceTransaction);
createAttributeMachineryPriceTransactionStock = ABSTRACT ACTION LIST (MachineryPriceTransaction, Stock);
createAttributeMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (MachineryPriceTransaction, GroupMachinery);

skipMachineryPriceTransactionSkuStockDateTime 'Запретить загрузку в оборудование' = ABSTRACT BOOLEAN (Sku, Stock, DATETIME);

excludeGroupMachinery = DATA LOCAL BOOLEAN (GroupMachinery);

createMachineryPriceTransaction 'Создать транзакцию' = ACTION (stock) {
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    message() <- TEXT('Принято к загрузке в оборудование : \n');

    FOR stockGroupMachinery(groupMachinery) == stock AND activeGroupMachinery(groupMachinery) AND NOT excludeGroupMachinery(groupMachinery) DO {
        LOCAL inBarcode = BOOLEAN (Barcode);

        inBarcode(barcode) <- createMachineryPriceTransactionSku(skuBarcode(barcode));

        // делаем разными запросами, чтобы было проще PostgreSQL
        inBarcode(barcode) <- activeBarcode(barcode) WHERE inBarcode(barcode); // если активный штрихкод

        inBarcode(barcode) <- inGroupMachinerySku(groupMachinery, skuBarcode(barcode)) WHERE inBarcode(barcode); // если на эту группу оборудования должна закачиваться

        inBarcode(barcode) <- NULL WHERE inBarcode(barcode) AND skipGroupMachineryBarcode(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться
        
        inBarcode(barcode) <- TRUE IF priceBarcodeGroupMachinery(barcode, groupMachinery) WHERE inBarcode(barcode); // если есть цена

        IF NOT createMachineryPriceTransactionAll() AND NOT createMachineryPriceTransactionSnapshot() THEN
            inBarcode(barcode) <- TRUE IF NOT (priceBarcodeGroupMachinery(barcode, groupMachinery) == transactionPriceBarcodeGroupMachinery(barcode, groupMachinery)) WHERE inBarcode(barcode);
            
        inBarcode(barcode) <- NULL WHERE inBarcode(barcode) AND (skipMachineryPriceTransactionSkuStockDateTime(skuBarcode(barcode), stock, currentDateTime()) OR inactiveSku(skuBarcode(barcode))); // если есть запрет на загрузку
        
        LOCAL countBarcode = INTEGER();
        countBarcode() <- [= GROUP SUM 1 IF inBarcode(barcode)]();
        LOCAL countSku = INTEGER();
        countSku() <- [ = GROUP SUM 1 IF [= GROUP SUM 1 IF inBarcode(barcode) BY skuBarcode(barcode)](sku)]();        
        
        IF countBarcode() THEN {
            createMachineryPriceTransactionGroupMachinery(groupMachinery);
            FOR t == addedObject() DO {
                groupMachineryMachineryPriceTransaction(t) <- groupMachinery;
                priceTransactionDocumentMachineryPriceTransaction(t) <- createMachineryPriceTransactionDocument();
                commentMachineryPriceTransaction(t) <- createMachineryPriceTransactionComment();
                inMachineryPriceTransactionBarcode(t, barcode) <- inBarcode(barcode);
                createAttributeMachineryPriceTransaction(t);
                createAttributeMachineryPriceTransactionStock(t, stock);
                createAttributeMachineryPriceTransactionGroupMachinery(t, groupMachineryMachineryPriceTransaction(t));
                priceMachineryPriceTransactionBarcode(t, barcode) <- priceBarcodeGroupMachinery(barcode, groupMachinery) WHERE inMachineryPriceTransactionBarcode(t, barcode);
                
                IF createMachineryPriceTransactionAll() THEN
                    snapshotMachineryPriceTransaction(t) <- TRUE;
            }

            message() <- message() + nameGroupMachinery(groupMachinery) + ' - ' + countSku() + ' товаров ('+countBarcode()+' штрих кодов).\n' ;
            sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE NO WAIT message()
    ELSE
        MESSAGE NO WAIT 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки' = ACTION (stock) NEWSESSION {
    createMachineryPriceTransactionSku(sku) <- TRUE IF currentBalanceSkuStock(sku, stock);
    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    createMachineryPriceTransaction(stock);
    apply();
} CONFIRM IN incrementMachineryPrice;

createPriceMachineryPriceTransaction 'Все товары' = ACTION (stock) NEWSESSION {
    createMachineryPriceTransactionSku(sku) <- TRUE;
    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    createMachineryPriceTransaction(stock);
    apply();
} CONFIRM IN incrementMachineryPrice;

createSnapshotMachineryPriceTransaction 'Все товары' = ACTION (stock) NEWSESSION {
    createMachineryPriceTransactionSku(sku) <- TRUE;
    createMachineryPriceTransactionComment() <- 'Полная загрузка товаров';
    createMachineryPriceTransactionAll() <- TRUE;
    createMachineryPriceTransaction(stock);
    apply();
} IN snapshotMachineryPrice;

includeGroupMachinery 'Вкл.' = DATA LOCAL BOOLEAN (GroupMachinery);

FORM selectGroupMachinery 'Выбор групп оборудования'
    OBJECTS st = Stock FIXED PANEL 
    PROPERTIES(st) READONLY nameStock    
    
    OBJECTS gm = GroupMachinery 
    PROPERTIES(gm) READONLY nppGroupMachinery, nameGroupMachinery, objectClassName
    PROPERTIES(gm) includeGroupMachinery 
    FILTERS stockGroupMachinery(gm) == st,
            activeGroupMachinery(gm)
;

createSelectMachineryPriceTransaction 'Выборочно' = ACTION (stock) NEWSESSION {
    FORM selectGroupMachinery OBJECTS st = stock MODAL;
    IF formResult() == FormResult.ok  AND [= GROUP SUM 1 IF includeGroupMachinery(gm) BY stockGroupMachinery(gm)](stock) THEN {
        excludeGroupMachinery(gm) <- TRUE WHERE stockGroupMachinery(gm) == stock AND NOT includeGroupMachinery(gm);
        
        createMachineryPriceTransactionSku(sku) <- TRUE;
        createMachineryPriceTransactionComment() <- 'Выборочная загрузка товаров по группе оборудования';
        createMachineryPriceTransactionAll() <- TRUE;
        createMachineryPriceTransaction(stock);
    }
    apply();
} IN snapshotMachineryPrice;



GROUP documentMachineryPrice 'Из документа' : public;
createDocumentMachineryPriceTransactionStock 'Из документа' = ACTION (stock) NEWSESSION {
    FORM documents DIALOG;
    IF formResult() == FormResult.ok THEN {
        createMachineryPriceTransactionSku(sku) <- TRUE WHERE countDocumentDetailSkuDocument(sku, chosenObject('d'));        
        createMachineryPriceTransactionDocument() <- chosenObject('d');
        createMachineryPriceTransactionSnapshot() <- TRUE ;
        createMachineryPriceTransaction(stock);
    }
    apply();
} IN documentMachineryPrice;

EXTEND FORM machineryPriceTransactions
    PROPERTIES(s) createBalanceMachineryPriceTransaction, createPriceMachineryPriceTransaction, 
                  createSnapshotMachineryPriceTransaction, createSelectMachineryPriceTransaction, 
                  snapshotGroupMachineryDepartmentStore, createDocumentMachineryPriceTransactionStock
;

EXTEND DESIGN machineryPriceTransactions {
    header {
        ADD s.incrementMachineryPrice;
        ADD s.snapshotMachineryPrice;
        ADD s.documentMachineryPrice;
    }
}

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBase(object, caption, nameProp)
    prevTransaction###object##BarcodeGroupMachinery caption###' (тек.)' (barcode, groupMachinery)  =
        object##MachineryPriceTransactionBarcode(prevLastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);

    snapshotAttributeMachineryPriceTransactionGroupMachinery(t, groupMachinery) +=
        ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- prevTransaction###object##BarcodeGroupMachinery(barcode, groupMachinery);

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) nameProp###object##MachineryPriceTransactionBarcode;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY nameProp###object##MachineryPriceTransactionBarcode;
    EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb) READONLY FORCE GRID nameProp###object##MachineryPriceTransactionBarcode;
END

META defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    over###object##MachineryPriceTransactionBarcode = ABSTRACT type (MachineryPriceTransaction, Barcode);
    createAttributeMachineryPriceTransaction(t) += ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- OVERRIDE object##Barcode(barcode), over###object##MachineryPriceTransactionBarcode(t, barcode)
                                                          WHERE inMachineryPriceTransactionBarcode(t, barcode);
END

META defineMachineryPriceTransactionAttribute(object, caption, type)
    object###MachineryPriceTransactionBarcode caption = DATA type (MachineryPriceTransaction, Barcode);
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, );
END

META defineMachineryPriceTransactionAttribute(object, caption, type, nameProp)
    object###MachineryPriceTransactionBarcode = DATA type (MachineryPriceTransaction, Barcode);
    nameProp###object###MachineryPriceTransactionBarcode caption (transaction, barcode) =
        nameProp###object(object###MachineryPriceTransactionBarcode(transaction, barcode));
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp);
END

META defineMachineryPriceTransactionAttributeStockAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttributeMachineryPriceTransactionStock(t, stock) += ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- object##BarcodeStock(barcode, stock)
                                                                      WHERE inMachineryPriceTransactionBarcode(t, barcode);
END
META defineMachineryPriceTransactionAttributeStock(object, caption, type)
    object###MachineryPriceTransactionBarcode caption = DATA type (MachineryPriceTransaction, Barcode);
    @defineMachineryPriceTransactionAttributeStockAction(object, caption, );
END

// Номер PLU
pluNumberMachineryPriceTransactionBarcode 'Номер PLU' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);

// Набор флагов
flagsMachineryPriceTransactionBarcode 'Флаги' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);

snapshotDocumentMachineryPriceTransaction 'Загружать в оборудование все позиции документа' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() snapshotDocumentMachineryPriceTransaction
;
EXTEND DESIGN options {
    pane {
        NEW machinery {
            caption = 'Оборудование';
            ADD PROPERTY(snapshotDocumentMachineryPriceTransaction());
        }
    }
}

// Подключение свойств к документу
META defineDocumentMachineryPriceTransaction (document, detailProp, skuProp, stockProp)
    createMachineryPriceTransaction###document 'Загрузить в оборудование' = ACTION (document) NEWSESSION {
    
        IF isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is###document(document) AND (confirmed() OR NOT (isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()))) THEN { 
            IF snapshotDocumentMachineryPriceTransaction() THEN
                createMachineryPriceTransactionSnapshot() <- TRUE;
            createMachineryPriceTransactionSku(sku) <- TRUE IF count###detailProp##Detail###skuProp###document(sku, document);
            createMachineryPriceTransactionDocument() <- document;
            createMachineryPriceTransaction(stockProp###document(document));
            sentPriceTransactionDocument(document) <- TRUE WHERE isPosted###document(document);
        }
        apply();
    } TOOLBAR CONFIRM;

    createSnapshotMachineryPriceTransaction###document 'Перегрузить все позиции' = ACTION (document) NEWSESSION {
        IF isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is###document(document) AND (confirmed() OR NOT (isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()))) THEN { 
            createMachineryPriceTransactionSnapshot() <- TRUE;
            createMachineryPriceTransactionSku(sku) <- TRUE IF count###detailProp##Detail###skuProp###document(sku, document);
            createMachineryPriceTransactionDocument() <- document;
            createMachineryPriceTransaction(stockProp###document(document));
            sentPriceTransactionDocument(document) <- TRUE WHERE isPosted###document(document);
        }
        apply();
    } CONFIRM;

    showCreateMachineryPriceTransaction###document 'Показывать' (document) = isPosted###document(document) AND isOpened###document(document) AND NOT Machinery.skipPriceTransactionDocument(document)
                                                                                                           AND NOT sentPriceTransactionDocument(document);
    backgroundCreateMachineryPriceTransaction###document 'Цвет' (document) = IF countProcessPriceTransactionDocument(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction###document(document);
END

META defineDocumentMachineryPriceTransaction (document, skuProp, stockProp)
    @defineDocumentMachineryPriceTransaction (document, document, skuProp, stockProp);
END


META extendFormDocumentMachineryPriceTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusMachineryPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransaction###document(object) READONLY AFTER afterProp###document(object),        
                           createMachineryPriceTransaction###document FORCE PANEL SHOWIF showCreateMachineryPriceTransaction###document(object),
                           createSnapshotMachineryPriceTransaction###document FORCE PANEL SHOWIF isOpened###document(object)
    ;
    EXTEND DESIGN form {
        propContainer{
            NEW machinery {                 
                caption = 'Загрузки' ;
                type = CONTAINERV;    
                        
                ADD PROPERTY (createMachineryPriceTransaction###document(object));
                ADD PROPERTY (createSnapshotMachineryPriceTransaction###document(object));
            }
        }
    }
END

NAVIGATOR {
    machineryExport {
        ADD machineryPriceTransactions;
        ADD requestExchanges;
    }
}

//--

createSelectedSkuPriceTransactionDocumentStock 'Загрузить в оборудование' = ACTION (stock)  {
    IF [=GROUP SUM 1 IF selectSku(sku)]() THEN {
        createMachineryPriceTransactionSnapshot() <- TRUE;
        createMachineryPriceTransactionSku(sku) <- TRUE IF selectSku(sku);
        createMachineryPriceTransaction(stock);
        apply();
        IF canceled() THEN {
            cancel();
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, необходимые к загрузке';
    }
} TOOLBAR ;

notResetMachinerySelectSku 'Не сбрасывать отмеченные товары при загрузке в оборудование' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetMachinerySelectSku
;
EXTEND DESIGN options {
    machinery {
        ADD PROPERTY(notResetMachinerySelectSku());
    }
}

createSelectedSkuStockPriceTransactionDocument 'Загрузить в оборудование' = ACTION () NEWSESSION NESTED selectSkuStock, createMachineryPriceTransactionSnapshot, createMachineryPriceTransactionSku {
    IF [=GROUP SUM 1 IF selectSkuStock(sku, stock)]() THEN {
        FOR [= GROUP SUM 1 IF selectSkuStock(sku, stock) BY stock](stock) DO {
            createMachineryPriceTransactionSnapshot() <- TRUE;
            createMachineryPriceTransactionSku(sku) <- TRUE IF selectSkuStock(sku, stock);
            createMachineryPriceTransaction(stock);
        }
        IF NOT notResetMachinerySelectSku() THEN {
            selectSkuStock(sku, stock) <- NULL;
        }
        APPLY NESTED LOCAL {};
        IF canceled() THEN {
            cancel();
        }
    }
} TOOLBAR ;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() createSelectedSkuStockPriceTransactionDocument TODRAW sts
;
EXTEND DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW machineryContainer {
            caption = 'Загрузки';
            type = CONTAINERV;
            ADD PROPERTY (createSelectedSkuStockPriceTransactionDocument());
        } 
    }
}
//-- Частичная загрузка
filterMachineryMachineryPriceTransaction (machinery, transaction)= IF nppsMachineryPriceTransaction(transaction) 
                                                                        THEN inMachineryPriceTransactionMachinery(transaction, machinery) AND groupMachineryMachinery(machinery) == groupMachineryMachineryPriceTransaction(transaction)
                                                                        ELSE groupMachineryMachinery(machinery) == groupMachineryMachineryPriceTransaction(transaction); 
EXTEND FORM machineryPriceTransaction
    OBJECTS m = Machinery FIXED GRID
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(t, m) inMachineryPriceTransactionMachinery
    FILTERS groupMachineryMachinery(m) == groupMachineryMachineryPriceTransaction(t) 
    PROPERTIES(m, t) succeededMachineryMachineryPriceTransaction, dateTimeSucceededMachineryMachineryPriceTransaction                     
;

EXTEND DESIGN machineryPriceTransaction {
    pane {
        ADD m.box;
    }
}


filterInMachineryPriceTransactionBarcodeStock (bb,s)= GROUP SUM 1 IF inMachineryPriceTransactionBarcode(mt, bb) BY bb, stockMachineryPriceTransaction(mt);
EXTEND FORM machineryPriceTransactions

    OBJECTS m = Machinery FIXED GRID
    PROPERTIES(m) READONLY  nppMachinery, descriptionMachinery, objectClassName//dataDirectoryCashRegister
    PROPERTIES(t, m) READONLY inMachineryPriceTransactionMachinery
    FILTERS filterMachineryMachineryPriceTransaction(m, t) 
    PROPERTIES(m, t) READONLY  succeededMachineryMachineryPriceTransaction, dateTimeSucceededMachineryMachineryPriceTransaction


    OBJECTS dt = DATE FIXED  PANEL
    PROPERTIES(dt) val = OBJVALUE 

    OBJECTS tt = MachineryPriceTransaction
    PROPERTIES(tt) READONLY FORCE GRID snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, 
                            timeMachineryPriceTransaction, descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, 
                            dateTimeSucceededMachineryPriceTransaction, canceledMachineryPriceTransaction, 
                            quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(tt),
                            nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(tt)
    PROPERTIES(tt) READONLY FORCE GRID createdNameUserMachineryPriceTransaction, createdHostnameComputerMachineryPriceTransaction
    PROPERTIES(tt)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS NOT succeededMachineryPriceTransaction(tt) OR (countSucceededMachineriesMachineryPriceTransaction(tt) != countMachineriesGroupMachinery(groupMachineryMachineryPriceTransaction(tt)))
    FILTERGROUP stockFilter
        FILTER 'По складу' stockMachineryPriceTransaction(tt) == s 'F11'      
    FILTERGROUP dateFilter
        FILTER 'На дату' dateMachineryPriceTransaction(tt) == dt 'F10'    
          
//--
    OBJECTS bb = Barcode
    PROPERTIES(bb)    READONLY idBarcode, nameSkuBarcode
    FILTERS filterInMachineryPriceTransactionBarcodeStock(bb,s)

    OBJECTS mt = MachineryPriceTransaction
    PROPERTIES(mt) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, 
                           timeMachineryPriceTransaction, descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, 
                           dateTimeSucceededMachineryPriceTransaction, canceledMachineryPriceTransaction, 
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(mt),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(mt)
    PROPERTIES(mt) READONLY createdNameUserMachineryPriceTransaction, createdHostnameComputerMachineryPriceTransaction
    
    PROPERTIES(mt, bb) READONLY nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode
    ORDER BY dateMachineryPriceTransaction(mt) DESC, timeMachineryPriceTransaction(mt) DESC
    FILTERS stockMachineryPriceTransaction(mt) == s
    FILTERS inMachineryPriceTransactionBarcode(mt, bb)          
          
          
;

EXTEND DESIGN machineryPriceTransactions{
    pane {        
        type = TABBED ;
        NEW headerContainer{ 
            fill = 1;
            type = SPLITV;
            caption = 'Загрузка';
            ADD t.box;
            ADD specContainer {
                NEW machinery {
                    fill = 1;
                    caption = 'Оборудование';
                    ADD m.box;
                } 
            }
        }
        NEW notSucceeded {
            fill = 1;
            caption = 'Незагруженные';
            ADD dt.box;
            ADD tt.box;
        } 
        NEW barcodeContainer {
            fill = 1;
            caption = 'Загрузка по позиции';
            ADD bb.box;
            ADD mt.box;            
        }               
    }
}
// --------------- Атрибуты по умолчанию ------------------ //
@defineMachineryPriceTransactionAttribute(skuGroup, 'Группа товара', SkuGroup, canonicalName);
@defineMachineryPriceTransactionAttribute(split, 'Дробный товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(passScales, 'Передавать на весы', BOOLEAN);
@defineMachineryPriceTransactionAttribute(shortNameUOM, 'Единица измерения', VARSTRING[10]);
@defineMachineryPriceTransactionAttribute(idUOM, 'Код единицы измерения', VARSTRING[100]);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

expiryDaysBarcode 'Срок годности в днях' = expiryDaysSku(skuBarcode(barcode));
@defineMachineryPriceTransactionAttribute(expiryDays, 'Срок годности в днях', INTEGER);
            
