MODULE MachineryPriceTransaction;

REQUIRE Machinery, StockSkuDocument;

NAMESPACE Machinery;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraft 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
isPosted 'Проведен' (PriceTransactionDocument document) = NOT isDraft(document);
description 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skip 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

sent 'Принят к загрузке в оборудование' = DATA BOOLEAN (PriceTransactionDocument);
sent(PriceTransactionDocument document) <- NULL WHEN SET(isDraft(document));

isClosed 'Закрыт' = ABSTRACT BOOLEAN (PriceTransactionDocument);
date 'Дата' = ABSTRACT DATE (PriceTransactionDocument);
time 'Время' = ABSTRACT TIME (PriceTransactionDocument);
series 'Серия' = ABSTRACT STRING[2] (PriceTransactionDocument);
number 'Номер' = ABSTRACT VARSTRING[28] (PriceTransactionDocument);
stock 'Склад' = ABSTRACT Stock (PriceTransactionDocument);
legalEntity 'Организация' = ABSTRACT LegalEntity (PriceTransactionDocument);
nameLegalEntity 'Организация' (PriceTransactionDocument document) = name(legalEntity(document));
operation = ABSTRACT Operation(PriceTransactionDocument);
nameOperation 'Операция' (PriceTransactionDocument document) = name(operation(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Machinery.PriceTransactionDocument;
    isDraft[PriceTransactionDocument] (concrete document) += isDraft(document);
    description[PriceTransactionDocument] (concrete document) += description(document);
    date[PriceTransactionDocument] (concrete document) += date(document);
    time[PriceTransactionDocument] (concrete document) += time(document);
    series[PriceTransactionDocument] (concrete document) += series(document);
    number[PriceTransactionDocument] (concrete document) += number(document);
    operation[PriceTransactionDocument] (concrete document) += operation(document);
END

META implementPriceTransactionDocument(concrete, le)
    @implementPriceTransactionDocument(concrete);
    legalEntity[PriceTransactionDocument] (concrete document) += le(document);
END

META implementPriceTransactionDocumentStock(concrete, st)
    @implementPriceTransactionDocument(concrete);
    stock[PriceTransactionDocument] (concrete document) += st(document);
    isClosed[PriceTransactionDocument] (concrete document) += isClosed(document);
END

META implementPriceTransactionDocumentStock(concrete, st, legalEntity)
    @implementPriceTransactionDocument(concrete, legalEntity);
    stock[PriceTransactionDocument] (concrete document) += st(document);
    isClosed[PriceTransactionDocument] (concrete document) += isClosed(document);
END

createMachineryPriceTransaction 'Загрузить в оборудование' = ACTION ABSTRACT (PriceTransactionDocument) TOOLBAR CONFIRM;
createSnapshotMachineryPriceTransaction 'Перегрузить все позиции' = ACTION ABSTRACT (PriceTransactionDocument) TOOLBAR CONFIRM;

showCreateMachineryPriceTransaction = ABSTRACT BOOLEAN (PriceTransactionDocument);

CLASS ABSTRACT PriceTransactionDocumentDetail 'Строка документа, требующиего загрузки в оборудование';
TABLE priceTransactionDocumentDetail (PriceTransactionDocumentDetail);

priceTransactionDocument = ABSTRACT PriceTransactionDocument(PriceTransactionDocumentDetail);
sku = ABSTRACT Sku (PriceTransactionDocumentDetail);
idBarcodeSku 'Штрих-код'(PriceTransactionDocumentDetail detail) = idBarcode(sku(detail));
nameSku 'Наименование' (PriceTransactionDocumentDetail detail) = name(sku(detail));
quantity 'Кол-во' = ABSTRACT NUMERIC[16,5](PriceTransactionDocumentDetail);
price 'Цена' = ABSTRACT NUMERIC[16,4](PriceTransactionDocumentDetail);

WHEN (SETCHANGED(sku(PriceTransactionDocumentDetail d)) OR SETCHANGED(price(d))) AND sent(priceTransactionDocument(d)) DO {
    sent( PriceTransactionDocument t) <- NULL WHERE t == priceTransactionDocument(d);   
}; 

META implementPriceTransactionDocumentDetail(object, class)
    EXTEND CLASS class##Detail : Machinery.PriceTransactionDocumentDetail;
    priceTransactionDocument (class##Detail detail) += object(detail);
    sku[PriceTransactionDocumentDetail] (class##Detail detail) += sku(detail);
    quantity[PriceTransactionDocumentDetail](class##Detail detail) += quantity(detail);
END

META implementPriceTransactionDocumentDetail(object)
    @implementPriceTransactionDocumentDetail(object, ###object);
END
//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT MachineryPriceTransaction 'Загрузка прайса в оборудование';
TABLE machineryPriceTransaction (MachineryPriceTransaction);

@defineExternalizable(machineryPriceTransaction, VARSTRING[100]);

@defineCreated(MachineryPriceTransaction);

groupMachinery (transaction) = ABSTRACT GroupMachinery (MachineryPriceTransaction);
nameGroupMachinery 'Группа оборудования' (MachineryPriceTransaction transaction) = name(groupMachinery(transaction));
nppGroupMachinery 'Номер группы оборудования' (MachineryPriceTransaction transaction) = npp(groupMachinery(transaction));

stock (MachineryPriceTransaction transaction) = stock(groupMachinery(transaction));
nameStock 'Склад' (MachineryPriceTransaction transaction) = name(stock(transaction));
idStock (MachineryPriceTransaction transaction) = id(stock(transaction));

// Дата/время
date 'Дата' = DATA DATE (MachineryPriceTransaction);
date (MachineryPriceTransaction transaction) <- currentDate() WHEN SET(transaction IS MachineryPriceTransaction);

time 'Время' = DATA TIME (MachineryPriceTransaction);
time (MachineryPriceTransaction transaction) <- currentTime() WHEN SET(transaction IS MachineryPriceTransaction);

dateTime 'Дата/время' (MachineryPriceTransaction transaction) = dateTimeToDateTime(date(transaction), time(transaction));

order (MachineryPriceTransaction transaction) = STRUCT(dateTime(transaction), transaction) PERSISTENT;

// Статус
snapshot 'Целиком' = DATA BOOLEAN (MachineryPriceTransaction);
skipSnapshot = ABSTRACT BOOLEAN (MachineryPriceTransaction);

skipSnapshotMachinery 'Запрещено загружать в оборудование целиком' = DATA BOOLEAN (UserRole); 

EXTEND FORM userRole
    PROPERTIES(ur) skipSnapshotMachinery
;

dateTimeProcessing 'Принята в обработку' = DATA DATETIME (MachineryPriceTransaction);
succeeded 'Загружена' = DATA BOOLEAN (MachineryPriceTransaction);
notSucceeded 'Не загружена' (MachineryPriceTransaction machineryPriceTransaction) = NOT succeeded(machineryPriceTransaction);
dateTimeSucceeded 'Время загрузки' = DATA DATETIME (MachineryPriceTransaction);
canceled 'Отменена' = DATA BOOLEAN (MachineryPriceTransaction);
process 'Требуется загрузка' (MachineryPriceTransaction machineryPriceTransaction) =
    machineryPriceTransaction IS MachineryPriceTransaction AND NOT
    succeeded(machineryPriceTransaction) AND NOT
    canceled(machineryPriceTransaction);

lastTime (GroupMachinery g) = GROUP LAST dateTime(MachineryPriceTransaction t) BY g WHERE groupMachinery(t) == g AND process(t);

// Основание
comment 'Примечание' = DATA VARSTRING[100] (MachineryPriceTransaction);

priceTransactionDocument = DATA PriceTransactionDocument (MachineryPriceTransaction) INDEXED;
descriptionPriceTransactionDocument 'Основание загрузки' (MachineryPriceTransaction transaction) =
    description(priceTransactionDocument(transaction));

// todo : persistent почему-то не работает
description 'Основание' (MachineryPriceTransaction document) =
    OVERRIDE descriptionPriceTransactionDocument(document), comment(document);

countProcess 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF process(MachineryPriceTransaction transaction)
                                                                                 BY priceTransactionDocument(transaction) PERSISTENT;

succeeded 'Загружен в оборудование' (PriceTransactionDocument document) = sent (document) IF NOT countProcess(document);

//-- Частичная загрузка
cleared 'Выполнена очистка' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
succeeded 'Загружено' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
dateTimeSucceeded 'Время загрузки' = DATA DATETIME(Machinery, MachineryPriceTransaction);

countSucceededMachineries'Кол-во загруженного оборудования' (t) = 
    GROUP SUM 1 IF succeeded(Machinery m, MachineryPriceTransaction t) OR 
                   (succeeded(t) AND groupMachinery(m) == groupMachinery(t)) 
          BY priceTransactionDocument(t) PERSISTENT;
    
countSucceededMachineries'Кол-во загруженного оборудования' (machineryPriceTransaction) = GROUP SUM 1 
    IF succeeded(Machinery m,MachineryPriceTransaction t) BY t PERSISTENT;

countMachineries 'Кол-во оборудования в группе' (gm) =GROUP SUM 1 BY groupMachinery(Machinery m);
countMachineries 'Кол-во оборудования в группе' (priceTransactionDocument) = GROUP SUM countMachineries(groupMachinery(MachineryPriceTransaction t)) BY priceTransactionDocument(t);
concatSucceededMachineries 'Кол-во оборудования' (PriceTransactionDocument t)  = CONCAT '/', countSucceededMachineries(t), countMachineries(t); 

statusMachinery 'Статус загрузки в оборудование' (PriceTransactionDocument document) =
    CASE
        WHEN skip(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument        
        WHEN countSucceededMachineries(document) != countMachineries(document) THEN (CONCAT ' ', 'Частично загружен', concatSucceededMachineries(document))
        WHEN succeeded(document) THEN 'Успешно загружен' IF document IS PriceTransactionDocument        
        WHEN sent(document) THEN 'Принят к загрузке' IF document IS PriceTransactionDocument
        ELSE 'Не загружен' IF document IS PriceTransactionDocument
    PERSISTENT;

// Загруженные штрихкоды
TABLE machineryPriceTransactionBarcode (MachineryPriceTransaction, Barcode);

in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode);

name 'Наименование' = DATA VARSTRING[255] (MachineryPriceTransaction, Barcode);
name(MachineryPriceTransaction t, Barcode barcode)  => in(t, barcode) RESOLVE RIGHT;

price 'Цена' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode) @@denomination;
price(MachineryPriceTransaction t, Barcode barcode)  => in(t, barcode) RESOLVE RIGHT;

// Текущие загруженные штрихкоды
TABLE barcodeGroupMachinery (Barcode, GroupMachinery);

skipLastTransaction 'Не учитывать для определения текущих цен в оборудовании' = ABSTRACT BOOLEAN (GroupMachinery);

// INDEX groupInMachineryPriceTransactionBarcode + barcode 
groupIn = groupMachinery(MachineryPriceTransaction transaction) IF in(transaction, Barcode barcode) 
    AND NOT skipLastTransaction(groupMachinery(transaction)) PERSISTENT;
    
lastTransaction (barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction 
          BY Barcode barcode, groupIn(transaction, barcode)
          ORDER order(transaction)
          WHERE NOT canceled(transaction) PERSISTENT;

lastTransaction (sku, stock) =
    GROUP LAST lastTransaction(Barcode b, GroupMachinery g) 
          BY sku(b), stock(g)
          ORDER order(lastTransaction(b, g))
          WHERE lastTransaction(b, g);
          
lastFullTransaction (barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction 
          BY Barcode barcode, groupMachinery(transaction)
          ORDER order(transaction)
          WHERE in(transaction, barcode) AND NOT canceled(transaction);
          
prevLastTransaction (Barcode barcode, GroupMachinery groupMachinery) = PREV(lastFullTransaction (barcode, groupMachinery));

transactionName 'Текущее наименование в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    name(lastTransaction(barcode, groupMachinery), barcode);
prevTransactionName(Barcode barcode, GroupMachinery groupMachinery) = name(prevLastTransaction(barcode, groupMachinery), barcode);

transactionPrice 'Текущая цена в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    price(lastTransaction(barcode, groupMachinery), barcode) PERSISTENT;
prevTransactionPrice (Barcode barcode, GroupMachinery groupMachinery) = price(prevLastTransaction(barcode, groupMachinery),barcode);

transactionPrice 'Текущая цена в оборудовании' (barcode, stock) =
    GROUP LAST transactionPrice(Barcode b, GroupMachinery g) 
          BY b, stock(g)
          ORDER order(lastTransaction(b, g))
          WHERE lastTransaction(b, g);

transactionPrice 'Текущая цена в оборудовании' (Sku sku, Stock stock) =
    transactionPrice(barcode(sku), stock) PERSISTENT TABLE extraSkuStock;
transactionPriceIdBarcodeId 'Текущая цена в оборудовании' (VARSTRING[15] sku, VARSTRING[100] stock) = transactionPrice(skuBarcode(sku), stock(stock));

countDaysClearMachineryPriceTransaction 'За сколько дней хранить загрузки прайсов в оборудование' = DATA INTEGER (); 

EXTEND FORM options PROPERTIES countDaysClearMachineryPriceTransaction();
DESIGN options { log { MOVE PROPERTY(countDaysClearMachineryPriceTransaction());} }    

clearApplicationLog () += ACTION NEWSESSION {
    IF countDaysClearMachineryPriceTransaction() THEN {
    in(MachineryPriceTransaction t, Barcode b) <- NULL WHERE NOT t == lastTransaction(b, groupMachinery(t)) AND date(t) <= subtract(currentDate(), countDaysClearMachineryPriceTransaction());
    apply();
    
    DELETE MachineryPriceTransaction t WHERE  t IS MachineryPriceTransaction AND NOT [= GROUP SUM 1 IF in(MachineryPriceTransaction t, Barcode b) BY t](t);
    apply();
    }
}   

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS MachineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (MachineryPriceTransactionError);

data 'Сообщение об ошибке' = DATA VARSTRING[200] (MachineryPriceTransactionError) IN base;
date 'Время возникновения' = DATA DATETIME (MachineryPriceTransactionError) IN base;
toDate 'Дата возникновения' (MachineryPriceTransactionError d) = DATE(date(d));
errorTrace 'След исключения' = DATA TEXT (MachineryPriceTransactionError) IN base;
machineryPriceTransaction 'Транзакция (ID)' = DATA MachineryPriceTransaction(MachineryPriceTransactionError) NOT NULL DELETE IN base INDEXED;
quantityMachineryPriceTransactionError 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 BY machineryPriceTransaction (MachineryPriceTransactionError machineryPriceTransactionError) IN base;
lastDateMachineryPriceTransactionError 'Время последней ошибки' (MachineryPriceTransaction) = GROUP MAX date(MachineryPriceTransactionError machineryPriceTransactionError) BY machineryPriceTransaction (machineryPriceTransactionError);

lastTransaction (barcode, stock) =
    GROUP LAST lastTransaction(Barcode b, GroupMachinery g)
          BY b, stock(g)
          ORDER order(lastTransaction(b, g))
          WHERE lastTransaction(b, g);

backgroundLastTransaction (Sku sku, Stock stock) = RGB (255,0,0) IF quantityMachineryPriceTransactionError(lastTransaction(barcode(sku), stock)) AND NOT
    succeeded(lastTransaction (barcode(sku), stock));  

@defineLog (MachineryPriceTransactionError, 'ошибок загрузки прайсов', log, toDate);

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (MachineryPriceTransaction, Machinery);
in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Machinery);
npps 'Номера устройств' (transaction) =
    GROUP CONCAT STRING[3](npp(Machinery machinery)) IF in(MachineryPriceTransaction transaction, machinery), ','
          BY transaction
          ORDER machinery MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;

// перезагрузка прайса целиком
selected 'Вкл' = DATA LOCAL BOOLEAN (GroupMachinery);
selected 'Вкл' = DATA LOCAL BOOLEAN (Machinery);

GROUP snapshotMachineryPrice 'Перезагрузка прайса' : public;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = Stock FIXED PANEL
    PROPERTIES(s) READONLY sname = name

    OBJECTS g = GroupMachinery
    PROPERTIES(g) selected
    PROPERTIES(g) READONLY npp, name, nameStock, nameModel
    FILTERS stock(g) == s,
            active(g)
        
    OBJECTS m = Machinery
    PROPERTIES(m)          selected
    PROPERTIES(m) READONLY npp, shortDescription, description, port

    FILTERS groupMachinery(m) == g
    
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 
;

DESIGN groupMachineryInput {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = MachineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nppGroupMachinery, nameGroupMachinery, date, time,
                  snapshot, dateTimeProcessing SHOWIF notSucceeded(t), succeeded, 
                  dateTimeSucceeded SHOWIF succeeded(t), canceled

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY id
    PROPERTIES(t, b)       in, name, price
    FILTERS in(t, b)

    EDIT MachineryPriceTransaction OBJECT t;
;

DESIGN machineryPriceTransaction {
    NEW pane BEFORE functions.box {
        fill = 1;
        type = TABBED;
        
        MOVE b.box;
    }
}

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES name(s) SELECTOR
    FILTERS isCompany(s)

    OBJECTS t = MachineryPriceTransaction LAST
    PROPERTIES(t) READONLY OBJVALUE, snapshot, nameGroupMachinery, nameStock, date, 
                           time, description, dateTimeProcessing, 
                           succeeded, dateTimeSucceeded, canceled, 
                           quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(t),
                           npps FORCE GRID SHOWIF snapshot(t)
    PROPERTIES(t) READONLY createdNameUser, createdHostnameComputer
    PROPERTIES(t)          addT = ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS stock(t) == s

    OBJECTS b = Barcode
    PROPERTIES(b)    READONLY id
    PROPERTIES(t, b) READONLY name, price

    FILTERS in(t, b)

    OBJECTS e = MachineryPriceTransactionError LAST
    PROPERTIES(e)  READONLY data, date
    PROPERTIES(e)  FORCE PANEL  errorTrace
    FILTERS machineryPriceTransaction(e) == t
;
@extendFormFilterStockAccess(s, machineryPriceTransactions);

DESIGN machineryPriceTransactions {
    NEW header {
        type = CONTAINERH;
        MOVE s.box {
            PROPERTY(name(s)) {
                alignment = STRETCH;
            }
        }
    }
    NEW pane {
        fill = 1;
        type = SPLITV;
        MOVE t.box;
        NEW specContainer{
            fill = 1;
            type = TABBED;
            MOVE b.box;
            NEW errorContainer {
                fill = 1;
                caption = 'Сообщения об ошибках';
                MOVE e.box;
                MOVE PROPERTY(errorTrace(e)) {
                    fill = 1;
                    panelCaptionAbove = TRUE;
                }
            }
        }
    }
    MOVE functions.box;
}

// ------------------------------------------------ Действия по загрузке ------------------------------------ //

CLASS RequestExchangeType 'Тип запроса' {
    salesInfo 'Перегрузить продажи',
    checkZReport 'Сверить суммы z-отчётов',
    terminalOrder 'Загрузить заказы',
    discountCard 'Загрузить дисконтные карты',
    cashierInfo 'Загрузить данные о кассирах'
}

FORM requestExchangeTypes 'Типы запросов'
    OBJECTS r = RequestExchangeType
    PROPERTIES(r) READONLY staticCaption
    DIALOG RequestExchangeType OBJECT r
;

CLASS RequestExchange 'Запрос обмена данными';
TABLE requestExchange (RequestExchange);

stock 'Склад' = DATA Stock (RequestExchange) AUTOSET;// NOT NULL;
nameStock 'Склад' (RequestExchange requestExchange) = name(stock(requestExchange));

TABLE stockRequestExchange(Stock, RequestExchange);
in 'Вкл' = DATA BOOLEAN (Stock, RequestExchange);  
extraStocks = GROUP CONCAT name(Stock stock) IF in(stock, RequestExchange requestExchange), ', ' 
                                                BY requestExchange
                                                ORDER name(stock) MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT;                                                                         
dateFrom 'Дата с' = DATA DATE (RequestExchange) NOT NULL;
dateTo 'Дата по' = DATA DATE (RequestExchange) NOT NULL;
startDate 'Загружать дисконтные карты начиная с даты' = DATA DATE (RequestExchange);
idDiscountCardFrom 'Код дисконтной карты (с)' = DATA VARSTRING[100] (RequestExchange);
idDiscountCardTo 'Код дисконтной карты (по)' = DATA VARSTRING[100] (RequestExchange);
requestExchangeType 'Тип запроса' = DATA RequestExchangeType (RequestExchange) NOT NULL;
nameRequestExchangeType 'Тип запроса' (RequestExchange requestExchange) = staticName(requestExchangeType(requestExchange));
captionRequestExchangeType 'Тип запроса' (RequestExchange requestExchange) = staticCaption(requestExchangeType(requestExchange));
succeeded 'Выгружен' = DATA BOOLEAN (RequestExchange);
notSucceeded 'Не выгружен' (RequestExchange requestExchange) = requestExchange IS RequestExchange AND NOT succeeded(requestExchange);
dateTimeSucceeded 'Время выгрузки' = DATA DATETIME (RequestExchange);
showExtraStocks(RequestExchange requestExchange) = requestExchangeType(requestExchange) == RequestExchangeType.checkZReport OR 
                                   requestExchangeType(requestExchange) == RequestExchangeType.salesInfo OR 
                                   requestExchangeType(requestExchange) == RequestExchangeType.cashierInfo;
showStartDate(RequestExchange requestExchange) = requestExchangeType(requestExchange) == RequestExchangeType.discountCard;

TABLE machineryRequestExchange(Machinery, RequestExchange);
dataIn 'Вкл' = DATA BOOLEAN (Machinery, RequestExchange); 
machineries 'Оборудование' (requestExchange) = GROUP SUM 1 IF dataIn(Machinery m, RequestExchange requestExchange) BY requestExchange;  
in (Machinery machinery, RequestExchange requestExchange) = dataIn(machinery, requestExchange) OR NOT machineries(requestExchange);     
     
CLASS RequestExchangeLog 'Лог обмена данными';
TABLE requestExchangeLog (RequestExchangeLog);

machinery 'Касса' = DATA Machinery (RequestExchangeLog);
nppMachinery 'Касса' (RequestExchangeLog requestExchangeLog) = npp(machinery(requestExchangeLog));
message 'Сообщение' = DATA TEXT (RequestExchangeLog);
date 'Время' = DATA DATETIME (RequestExchangeLog);
requestExchange = DATA RequestExchange (RequestExchangeLog);

CLASS RequestExchangeError 'Ошибки обмена данными';
TABLE requestExchangeError (RequestExchangeError);

message 'Сообщение' = DATA TEXT (RequestExchangeError);
date 'Время' = DATA DATETIME (RequestExchangeError);
requestExchange = DATA RequestExchange (RequestExchangeError);
note 'Примечание' = DATA VARSTRING[100] (RequestExchange) MINCHARWIDTH 30 PREFCHARWIDTH 50;

FORM requestExchange 'Запрос обмена данными'
    OBJECTS r = RequestExchange FIXED PANEL
    PROPERTIES(r) nameStock, dateFrom, dateTo, captionRequestExchangeType, succeeded, note, 
                  startDate SHOWIF showStartDate(r), idDiscountCardFrom SHOWIF showStartDate(r), 
                  idDiscountCardTo SHOWIF showStartDate(r)
 
    OBJECTS s = Stock FIXED GRID
    PROPERTIES(s, r) SHOWIF showExtraStocks(r) in
    PROPERTIES(s) SHOWIF showExtraStocks(r) id, name, nameLegalEntity
    ORDER BY nameLegalEntity(s)
    FILTERS isCompany(s)
    
    OBJECTS m = Machinery 
    PROPERTIES(m, r) dataIn
    PROPERTIES(m) npp, shortDescription, description, objectClassName  
    FILTERS stock(m) == stock(r)  
    
    EDIT RequestExchange OBJECT r
;

DESIGN requestExchange {
    main {
        NEW topContainer{
            caption = 'Запрос обмена данными';
            NEW firstRow {
                type = CONTAINERH;
                MOVE PROPERTY(nameStock(r));
                MOVE PROPERTY(dateFrom(r));
                MOVE PROPERTY(dateTo(r));
                MOVE PROPERTY(captionRequestExchangeType(r));                
            }
            NEW secondRow {
                type = CONTAINERH;
                MOVE PROPERTY(succeeded(r));
                MOVE PROPERTY(note(r));                
            }            
            NEW thirdRow {
                type = CONTAINERH;
                MOVE PROPERTY(startDate(r));
                MOVE PROPERTY(idDiscountCardFrom(r));
                MOVE PROPERTY(idDiscountCardTo(r));                
            }
        }
        NEW tabbedPanel {
            fill = 1;
            type = TABBED;
            MOVE s.box;
            MOVE m.box;
        }
        MOVE functions.box;
    }
}

copy 'Копировать'(RequestExchange request) = ACTION NEWSESSION {
    FOR ADDOBJ r = RequestExchange DO {
        stock(r) <- stock(request);
        dateFrom(r) <- dateFrom(request);
        dateTo(r) <- dateTo(request);
        note(r) <- note(request);
        requestExchangeType(r) <- requestExchangeType(request);
        startDate(r) <- startDate(request);
        idDiscountCardFrom(r) <- idDiscountCardFrom(request);
        idDiscountCardTo(r) <- idDiscountCardTo(request);
        
        FOR in(Stock stock, request) DO {
            in(stock, r) <- in(stock, request);
        }
        
        FOR dataIn(Machinery machinery, request) DO {
            dataIn(machinery, r) <- dataIn(machinery, request);
        }
        
        FORM requestExchange OBJECTS r = r MANAGESESSION DOCKEDMODAL;
    }   
} TOOLBAR;

allStocks 'Склады' (RequestExchange requestExchange)= 
    CONCAT ',', nameStock(requestExchange), extraStocks(requestExchange) 
    MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT; 

FORM requestExchanges 'Запросы обмена данными'
    
    OBJECTS r = RequestExchange LAST
    PROPERTIES(r) READONLY allStocks, dateFrom, dateTo, 
                           captionRequestExchangeType, succeeded, dateTimeSucceeded, note, 
                           startDate SHOWIF showStartDate(r) FORCE PANEL, idDiscountCardFrom SHOWIF showStartDate(r) FORCE PANEL, 
                           idDiscountCardTo SHOWIF showStartDate(r) FORCE PANEL
    PROPERTIES(r)          copy, ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    
    OBJECTS rl = RequestExchangeLog
    PROPERTIES(rl) READONLY nppMachinery, message, date
    FILTERS requestExchange(rl) == r    
    
    OBJECTS re = RequestExchangeError
    PROPERTIES(re) READONLY message, date
    FILTERS requestExchange(re) == r    
;

DESIGN requestExchanges {
    main {
        NEW requestExchangeContainer {
            fill = 1;
            type = SPLITV;
            MOVE r.box;
            NEW tabbedContainer {
                type = TABBED;
                fill = 1;
                NEW logTabbedContainer {
                    fill = 1;
                    caption = 'Лог';
                    MOVE rl.box;
                }
                NEW errorTabbedContainer {
                    fill = 1;
                    caption = 'Ошибки';
                    MOVE re.box;
                }                
            }
        }
        MOVE functions.box;
    }
}

createMachineryPriceTransaction = ACTION ABSTRACT LIST (GroupMachinery);

skipIn = ABSTRACT CASE BOOLEAN (GroupMachinery, Sku);
in 'Вкл' (GroupMachinery groupMachinery, Sku sku) = groupMachinery IS GroupMachinery
                                                    AND sku IS Sku
                                                         AND NOT (filterSku(groupMachinery) AND NOT in(groupMachinery, skuGroup(sku)))
                                                         AND NOT skipIn(groupMachinery, sku);
                                                         
skip = ABSTRACT CASE BOOLEAN (GroupMachinery, Barcode);
skipMachineryPriceTransaction 'Запретить загрузку в оборудование' = ABSTRACT BOOLEAN (Sku, Stock, DATETIME);

// Перезагрузка целиком
snapshotAttribute = ACTION ABSTRACT LIST (MachineryPriceTransaction, GroupMachinery);

snapshotGroupMachinery 'Ранее загруженные'(Stock stock) = ACTION NEWSESSION {
    FORM groupMachineryInput OBJECTS s = stock MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR selected(GroupMachinery groupMachinery) DO {
            createMachineryPriceTransaction(groupMachinery);
            FOR Object t == addedObject() DO {
                groupMachinery[MachineryPriceTransaction](t) <- groupMachinery;
                comment(t) <- 'Перезагрузка прайса целиком';
                IF NOT skipSnapshot(t) THEN {
                    snapshot(t) <- TRUE;
                }
                in(t, Machinery machinery) <- selected(machinery) WHERE groupMachinery(machinery) == groupMachinery;

                LOCAL in = BOOLEAN (Barcode);

                in(Barcode barcode) <- TRUE IF prevLastTransaction(barcode, groupMachinery);

                // делаем разными запросами, чтобы было проще PostgreSQL
                in(Barcode barcode) <- active(barcode) WHERE in(barcode); // если активный штрихкод

                in(Barcode barcode) <- in(groupMachinery, sku(barcode)) WHERE in(barcode); // если на эту группу оборудования должна закачиваться
                
                in(Barcode barcode) <- NOT skuType(sku(barcode)) != SkuType.skuTypeItem WHERE in(barcode); // если это не товар
                
                in(Barcode barcode) <- NULL WHERE in(barcode) AND skip(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться
                in(Barcode barcode) <- NULL WHERE in(barcode) AND (skipMachineryPriceTransaction(sku(barcode), stock, currentDateTime()) OR inactive(sku(barcode))); // если есть запрет на загрузку

                in(t, Barcode barcode) <- in(barcode); // важно, что товар должен быть активным на текущий момент
                name(t, Barcode barcode) <- prevTransactionName(barcode, groupMachinery) WHERE in(t, barcode);
                snapshotAttribute(t, groupMachinery);
                price(t, Barcode barcode) <- prevTransactionPrice(barcode, groupMachinery) WHERE in(t, barcode);
            }
        }
        apply();
    }
} IN snapshotMachineryPrice;

// Инкрементная загрузка
GROUP incrementMachineryPrice 'Инкрементная загрузка' : public;

// ------------------------------- Определение цены, по которой загружать ------------------------------- //

price 'Цена' (Barcode barcode, GroupMachinery groupMachinery) = priceA(priceListType(groupMachinery),
                                                                                                  sku(barcode),
                                                                                                  stock(groupMachinery),
                                                                                                  currentDateTime());

createMachineryPriceTransactionAll = DATA LOCAL BOOLEAN(); // установка флага на полное удаление старых товаров из кассы
createMachineryPriceTransactionSnapshot = DATA LOCAL BOOLEAN (); // загрузка не только изменившихся цен

createMachineryPriceTransaction = DATA LOCAL BOOLEAN (Sku);

createMachineryPriceTransactionDocument = DATA LOCAL PriceTransactionDocument();
createMachineryPriceTransactionComment = DATA LOCAL VARSTRING[100] ();

createAttribute = ACTION ABSTRACT LIST (MachineryPriceTransaction);
createAttribute = ACTION ABSTRACT LIST (MachineryPriceTransaction, Stock);
createAttribute = ACTION ABSTRACT LIST (MachineryPriceTransaction, GroupMachinery);


exclude = DATA LOCAL BOOLEAN (GroupMachinery);

supressNoNeedMessage() = DATA LOCAL BOOLEAN (); // не выдавать сообщение если загрузка не требуется

createMachineryPriceTransaction 'Создать транзакцию'(Stock stock) = ACTION {
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    message() <- TEXT('Принято к загрузке в оборудование : \n');

    FOR stock(GroupMachinery groupMachinery) == stock AND active(groupMachinery) AND NOT exclude(groupMachinery) DO {
        LOCAL in = BOOLEAN (Barcode);

        in(Barcode barcode) <- createMachineryPriceTransaction(sku(barcode));

        // делаем разными запросами, чтобы было проще PostgreSQL
        in(Barcode barcode) <- active(barcode) WHERE in(barcode); // если активный штрихкод

        in(Barcode barcode) <- in(groupMachinery, sku(barcode)) WHERE in(barcode); // если на эту группу оборудования должна закачиваться

        in(Barcode barcode) <- NULL WHERE in(barcode) AND skip(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться

        in(Barcode barcode) <- NOT skuType(sku(barcode)) != SkuType.skuTypeItem WHERE in(barcode); // если это не товар

        in(Barcode barcode) <- TRUE IF price(barcode, groupMachinery) WHERE in(barcode); // если есть цена

        IF NOT createMachineryPriceTransactionAll() AND NOT createMachineryPriceTransactionSnapshot() THEN
            in(Barcode barcode) <- TRUE IF NOT (price(barcode, groupMachinery) == transactionPrice(barcode, groupMachinery)) WHERE in(barcode);
            
        in(Barcode barcode) <- NULL WHERE in(barcode) AND (skipMachineryPriceTransaction(sku(barcode), stock, currentDateTime()) OR inactive(sku(barcode))); // если есть запрет на загрузку
        
        LOCAL countBarcode = INTEGER();
        countBarcode() <- [= GROUP SUM 1 IF in(Barcode barcode)]();
        LOCAL countSku = INTEGER();
        countSku() <- [ = GROUP SUM 1 IF [= GROUP SUM 1 IF in(Barcode barcode) BY sku(barcode)](Sku sku)]();        
        
        IF countBarcode() THEN {
            createMachineryPriceTransaction(groupMachinery);
            FOR Object t == addedObject() DO {
                in(t, Machinery machinery) <- selected(machinery) WHERE groupMachinery(machinery) == groupMachinery;
                groupMachinery[MachineryPriceTransaction](t) <- groupMachinery;
                priceTransactionDocument[MachineryPriceTransaction](t) <- createMachineryPriceTransactionDocument();
                comment(t) <- createMachineryPriceTransactionComment();
                in(t, Barcode barcode) <- in(barcode);
                createAttribute(t);
                createAttribute(t, stock);
                createAttribute(t, groupMachinery[MachineryPriceTransaction](t));
                price(t, Barcode barcode) <- price(barcode, groupMachinery) WHERE in(t, barcode);
                
                IF createMachineryPriceTransactionAll() AND NOT skipSnapshot(t) THEN {
                    snapshot(t) <- TRUE;
                }                    
            }

            message() <- message() + name(groupMachinery) + ' - ' + countSku() + ' товаров ('+countBarcode()+' штрих кодов).\n' ;
            sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE NOWAIT message()
    ELSE
        IF NOT supressNoNeedMessage() THEN
            MESSAGE NOWAIT 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки'(Stock stock) = ACTION NEWSESSION {
    createMachineryPriceTransaction(Sku sku) <- TRUE IF currentBalance(sku, stock);
    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    createMachineryPriceTransaction(stock);
    apply();
} CONFIRM IN incrementMachineryPrice;

createPriceMachineryPriceTransaction 'Все товары'(Stock stock) = ACTION NEWSESSION {
    createMachineryPriceTransaction(Sku sku) <- TRUE;
    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    createMachineryPriceTransaction(stock);
    apply();
} CONFIRM IN incrementMachineryPrice;

createSnapshotMachineryPriceTransaction 'Все товары'(Stock stock) = ACTION NEWSESSION {
    createMachineryPriceTransaction(Sku sku) <- TRUE;
    createMachineryPriceTransactionComment() <- 'Полная загрузка товаров';
    createMachineryPriceTransactionAll() <- TRUE;
    createMachineryPriceTransaction(stock);
    apply();
} CONFIRM IN snapshotMachineryPrice;

include 'Вкл.' = DATA LOCAL BOOLEAN (GroupMachinery);

FORM selectGroupMachinery 'Выбор групп оборудования'
    OBJECTS st = Stock FIXED PANEL 
    PROPERTIES(st) READONLY name    
    
    OBJECTS gm = GroupMachinery 
    PROPERTIES(gm) include 
    PROPERTIES(gm) READONLY npp, name, ports, objectClassName
    FILTERS stock(gm) == st,
            active(gm)
            
    OBJECTS m = Machinery
    PROPERTIES(m)          selected
    PROPERTIES(m) READONLY npp, shortDescription, description, port

    FILTERS groupMachinery(m) == gm
    
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 
;
DESIGN selectGroupMachinery { main{ preferredSize = (1024, 768); } }

createSelectMachineryPriceTransaction 'Выборочно'(Stock stock) = ACTION NEWSESSION {
    FORM selectGroupMachinery OBJECTS st = stock MODAL;
    IF formResult() == FormResult.ok  AND [= GROUP SUM 1 IF include(GroupMachinery gm) BY stock(gm)](stock) THEN {
        exclude(GroupMachinery gm) <- TRUE WHERE stock(gm) == stock AND NOT include(gm);
        
        createMachineryPriceTransaction(Sku sku) <- TRUE;
        createMachineryPriceTransactionComment() <- 'Выборочная загрузка товаров по группе оборудования';
        createMachineryPriceTransactionAll() <- TRUE;
        createMachineryPriceTransaction(stock);
    }
    apply();
} IN snapshotMachineryPrice;



GROUP documentMachineryPrice 'Из документа' : public;
createDocumentMachineryPriceTransaction 'Из документа'(Stock stock) = ACTION NEWSESSION {
    FORM documents DIALOG;
    IF formResult() == FormResult.ok THEN {
        createMachineryPriceTransaction(Sku sku) <- TRUE WHERE countDocumentDetail(sku, chosenObject('d'));        
        createMachineryPriceTransactionDocument() <- chosenObject('d');
        createMachineryPriceTransactionSnapshot() <- TRUE ;
        createMachineryPriceTransaction(stock);
    }
    apply();
} IN documentMachineryPrice;

EXTEND FORM machineryPriceTransactions
    PROPERTIES(s) createBalanceMachineryPriceTransaction, createPriceMachineryPriceTransaction, 
                  createSnapshotMachineryPriceTransaction, createSelectMachineryPriceTransaction, 
                  snapshotGroupMachinery, createDocumentMachineryPriceTransaction
;

DESIGN machineryPriceTransactions {
    header {
        MOVE s.incrementMachineryPrice;
        MOVE s.snapshotMachineryPrice;
        MOVE s.documentMachineryPrice;
    }
}

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBase(object, caption, nameProp)
    prevTransaction###object caption###' (тек.)' (Barcode barcode, GroupMachinery groupMachinery)  =
        object(prevLastTransaction(barcode, groupMachinery), barcode);

    snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +=
        ACTION ASSIGN object(t, Barcode barcode) <- prevTransaction###object(barcode, groupMachinery) WHERE in(t, barcode);

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb) READONLY FORCE GRID nameProp###object;
END

META defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    over###object = ABSTRACT type (MachineryPriceTransaction, Barcode);
    createAttribute(MachineryPriceTransaction t) += ACTION ASSIGN object(t, Barcode barcode) <- OVERRIDE object(barcode), over###object(t, barcode)
                                                          WHERE in(t, barcode);
END

META defineMachineryPriceTransactionAttribute(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, );
END

META defineMachineryPriceTransactionAttribute(object, caption, type, nameProp)
    object = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    nameProp##type caption (MachineryPriceTransaction transaction, Barcode barcode) =
        nameProp(object(transaction, barcode));
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp);
END

META defineMachineryPriceTransactionAttributeStockAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttribute(MachineryPriceTransaction t, Stock stock) += ACTION ASSIGN object(t, Barcode barcode) <- object(barcode, stock)
                                                                      WHERE in(t, barcode);
END
META defineMachineryPriceTransactionAttributeStock(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeStockAction(object, caption, );
END

// Номер PLU
pluNumber 'Номер PLU' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);

// Набор флагов
flags 'Флаги' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);
flags 'Флаги' = ABSTRACT INTEGER (Barcode);

snapshotDocumentMachineryPriceTransaction 'Загружать в оборудование все позиции документа' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() snapshotDocumentMachineryPriceTransaction
;
DESIGN options {
    pane {
        NEW machinery {
            caption = 'Оборудование';
            MOVE PROPERTY(snapshotDocumentMachineryPriceTransaction());
        }
    }
}

@defineOption(closeDocumentMachineryPriceTransaction, 'Закрывать документы при загрузке в оборудование', machinery);

// Подключение свойств к документу
META defineDocumentMachineryPriceTransaction (document, detailProp, skuProp, stockProp)
    createMachineryPriceTransaction 'Загрузить в оборудование'(###document document) = ACTION NEWSESSION {
    
        IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is(document) AND (confirmed() OR NOT (isDraft(document) OR NOT (dateTime(document) <= currentDateTime()))) THEN { 
            IF snapshotDocumentMachineryPriceTransaction() THEN
                createMachineryPriceTransactionSnapshot() <- TRUE;
            createMachineryPriceTransaction(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
            createMachineryPriceTransactionDocument() <- document;
            createMachineryPriceTransaction(stockProp(document));
            sent(document) <- TRUE WHERE isPosted(document);
            isClosed(document) <- TRUE WHERE isPosted(document) AND closeDocumentMachineryPriceTransaction();
        }
        apply();
    } TOOLBAR CONFIRM;
    
    createMachineryPriceTransaction(###document document) += ACTION createMachineryPriceTransaction(document);
    
    createSnapshotMachineryPriceTransaction 'Перегрузить все позиции'(###document document) = ACTION NEWSESSION {
        IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is(document) AND (confirmed() OR NOT (isDraft(document) OR NOT (dateTime(document) <= currentDateTime()))) THEN { 
            createMachineryPriceTransactionSnapshot() <- TRUE;
            createMachineryPriceTransaction(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
            createMachineryPriceTransactionDocument() <- document;
            createMachineryPriceTransaction(stockProp(document));
            sent(document) <- TRUE WHERE isPosted(document);
            isClosed(document) <- TRUE WHERE isPosted(document) AND closeDocumentMachineryPriceTransaction();
        }
        apply();
    } CONFIRM;
    
    createSnapshotMachineryPriceTransaction(###document document) += ACTION createSnapshotMachineryPriceTransaction(document);

    showCreateMachineryPriceTransaction 'Показывать' (###document document) = isPosted(document) AND NOT Machinery.skip(document)
                                                                                                           AND NOT sent(document);
    showCreateMachineryPriceTransaction (###document document) += showCreateMachineryPriceTransaction(document);
                                                                                                           
    backgroundCreateMachineryPriceTransaction 'Цвет' (PriceTransactionDocument document) = IF countProcess(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction[###document](document);
END

META defineDocumentMachineryPriceTransaction (document, skuProp, stockProp)
    @defineDocumentMachineryPriceTransaction (document, document, skuProp, stockProp);
END


META extendFormDocumentMachineryPriceTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusMachinery BACKGROUND backgroundCreateMachineryPriceTransaction(object) READONLY AFTER afterProp(object),        
                           createMachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransaction(object),
                           createSnapshotMachineryPriceTransaction FORCE PANEL SHOWIF isPosted(object)
    ;
    DESIGN form {
        propContainer{
            NEW machinery {                 
                caption = 'Загрузки' ;
                type = CONTAINERV;    
                        
                MOVE PROPERTY (createMachineryPriceTransaction(object));
                MOVE PROPERTY (createSnapshotMachineryPriceTransaction(object));
            }
        }
    }
END

NAVIGATOR {
    machineryExport {
        ADD machineryPriceTransactions;
        ADD requestExchanges;
    }
}

//--

notResetMachinerySelectSku 'Не сбрасывать отмеченные товары при загрузке в оборудование' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetMachinerySelectSku
;
DESIGN options {
    machinery {
        MOVE PROPERTY(notResetMachinerySelectSku());
    }
}

createSelectedSkuPriceTransactionDocument 'Загрузить в оборудование'(Stock stock) = ACTION NEWSESSION NESTED (select[Sku]) {
    IF [=GROUP SUM 1 IF select(Sku sku)]() THEN {
        createMachineryPriceTransactionSnapshot() <- TRUE;
        createMachineryPriceTransaction(Sku sku) <- TRUE IF select(sku);
        createMachineryPriceTransaction(stock);
        
        IF NOT notResetMachinerySelectSku() THEN {
            select(Sku sku) <- NULL;
        }
        APPLY NESTED LOCAL {};
        IF canceled() THEN {
            cancel();
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, необходимые к загрузке';
    }
} TOOLBAR ;

createApplySelectedSkuPriceTransactionDocument 'Загрузить в оборудование'(Stock stock) = ACTION {
    APPLY NESTED (select[Sku]) {};
    IF NOT canceled() THEN {
        createSelectedSkuPriceTransactionDocument(stock);
    }
}

createSelectedSkuStockPriceTransactionDocument 'Загрузить в оборудование'() = ACTION NEWSESSION NESTED (select[Sku,Stock], createMachineryPriceTransactionSnapshot[], createMachineryPriceTransaction[Sku]) {
    IF [=GROUP SUM 1 IF select(Sku sku, Stock stock)]() THEN {
        FOR [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](Stock stock) DO {
            createMachineryPriceTransactionSnapshot() <- TRUE;
            createMachineryPriceTransaction(Sku sku) <- TRUE IF select(sku, stock);
            createMachineryPriceTransaction(stock);
        }
        IF NOT notResetMachinerySelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
        APPLY NESTED LOCAL {};
        IF canceled() THEN {
            cancel();
        }
    }
} TOOLBAR ;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() createSelectedSkuStockPriceTransactionDocument TODRAW sts
;
DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW machineryContainer {
            caption = 'Загрузки';
            type = CONTAINERV;
            MOVE PROPERTY (createSelectedSkuStockPriceTransactionDocument());
        } 
    }
}
//-- Частичная загрузка
filter (Machinery machinery, MachineryPriceTransaction transaction)= IF npps(transaction) 
                                                                        THEN in(transaction, machinery) AND groupMachinery(machinery) == groupMachinery(transaction)
                                                                        ELSE groupMachinery(machinery) == groupMachinery(transaction); 
EXTEND FORM machineryPriceTransaction
    OBJECTS m = Machinery FIXED GRID
    PROPERTIES(m) READONLY npp, shortDescription, description, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(t, m) in
    FILTERS groupMachinery(m) == groupMachinery(t) 
    PROPERTIES(m, t) cleared SHOWIF snapshot(t), 
                     succeeded, dateTimeSucceeded                     
;

DESIGN machineryPriceTransaction {
    pane {
        MOVE m.box;
    }
}


//filterInMachineryPriceTransactionBarcodeStock (bb,s)= GROUP SUM 1 IF inMachineryPriceTransactionBarcode(mt, bb) BY bb, stockMachineryPriceTransaction(mt);
EXTEND FORM machineryPriceTransactions

    OBJECTS m = Machinery FIXED GRID
    PROPERTIES(m) READONLY  npp, shortDescription, description, port, objectClassName//dataDirectoryCashRegister
    PROPERTIES(t, m) READONLY in
    FILTERS filter(m, t) 
    PROPERTIES(m, t) READONLY cleared SHOWIF snapshot(t),
                              succeeded, dateTimeSucceeded
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 

    OBJECTS dt = DATE FIXED  PANEL
    PROPERTIES(dt) val = OBJVALUE 

    OBJECTS tt = MachineryPriceTransaction LAST
    PROPERTIES(tt) READONLY FORCE GRID OBJVALUE, snapshot, nameGroupMachinery, nameStock, date, 
                            time, description, dateTimeProcessing, 
                            succeeded, dateTimeSucceeded, canceled, 
                            quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(tt),
                            npps FORCE PANEL SHOWIF snapshot(tt)
    PROPERTIES(tt) READONLY FORCE GRID createdNameUser, createdHostnameComputer
    PROPERTIES(tt)          addTt = ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS NOT succeeded(tt) AND NOT canceled(tt) //OR (countSucceededMachineriesMachineryPriceTransaction(tt) != countMachineriesGroupMachinery(groupMachineryMachineryPriceTransaction(tt)))
    FILTERGROUP stockFilter
        FILTER 'По складу' stock(tt) == s 'F11'      
    FILTERGROUP dateFilter
        FILTER 'На дату' date(tt) == dt 'F10'  
          
    OBJECTS bt = Barcode
    PROPERTIES(bt)    READONLY id
    PROPERTIES(tt, bt) READONLY name, price
    
    FILTERS in(tt, bt)
    
    OBJECTS et = MachineryPriceTransactionError LAST
    PROPERTIES(et)  READONLY data, date
    PROPERTIES(et)  FORCE PANEL  errorTrace
    FILTERS machineryPriceTransaction(et) == tt    
      
    OBJECTS mtt = Machinery FIXED GRID
    PROPERTIES(mtt) READONLY npp, shortDescription, description, port, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(tt, mtt) in
    FILTERS groupMachinery(mtt) == groupMachinery(tt) 
    PROPERTIES(mtt, tt) cleared SHOWIF snapshot(t),
                        succeeded, dateTimeSucceeded
    FILTERGROUP mttActive
        FILTER 'Активные' NOT inactive(mtt) DEFAULT 
//--
    OBJECTS bb = Barcode
    PROPERTIES(bb)    READONLY id, nameSku, idSku
    FILTERGROUP price
        FILTER 'Ранее загруженные' transactionPrice(bb,s) 'F8' DEFAULT

    OBJECTS mt = MachineryPriceTransaction
    PROPERTIES(mt) READONLY snapshot, nameGroupMachinery, date, 
                           time, description, dateTimeProcessing, 
                           succeeded, dateTimeSucceeded, canceled, 
                           quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(mt),
                           npps FORCE PANEL SHOWIF snapshot(mt)
    PROPERTIES(mt) READONLY createdNameUser, createdHostnameComputer
    
    PROPERTIES(mt, bb) READONLY name, price
    ORDER BY date(mt) DESC, time(mt) DESC
    FILTERS stock(mt) == s
    FILTERS in(mt, bb)          
;

DESIGN machineryPriceTransactions{
    pane {        
        type = TABBED ;
        NEW headerContainer{ 
            fill = 1;
            type = SPLITV;
            caption = 'Загрузка';
            MOVE t.box;
            MOVE specContainer {
                NEW machinery {
                    fill = 1;
                    caption = 'Оборудование';
                    MOVE m.box;
                } 
            }
        }
        NEW notSucceeded {
            fill = 1;
            caption = 'Незагруженные';
            type = SPLITV;
            NEW dttt {
                fill = 1;
                MOVE dt.box;
                MOVE tt.box;                       
            }
            NEW specContainer2{
                fill = 1;
                type = TABBED;
                MOVE bt.box;
                NEW errorContainer2 {
                    fill = 1;
                    caption = 'Сообщения об ошибках';
                    MOVE et.box;
                    MOVE PROPERTY(errorTrace(et)) {
                        fill = 1;
                        panelCaptionAbove = TRUE;
                    }
                }
                NEW machinery2 {
                    fill = 1;
                    caption = 'Оборудование';
                    MOVE mtt.box;
                } 
            }
        } 
        NEW barcodeContainer {
            fill = 1;
            caption = 'Загрузка по позиции';
            MOVE bb.box;
            MOVE mt.box;            
        }               
    }
}
// --------------- Атрибуты по умолчанию ------------------ //
@defineMachineryPriceTransactionAttribute(skuGroup, 'Группа товара', SkuGroup, canonicalName);

@defineMachineryPriceTransactionAttribute(split, 'Дробный товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(passScales, 'Передавать на весы', BOOLEAN);
@defineMachineryPriceTransactionAttribute(shortNameUOM, 'Единица измерения', VARSTRING[10]);
@defineMachineryPriceTransactionAttribute(idUOM, 'Код единицы измерения', VARSTRING[100]);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

expiryDays 'Срок годности в днях' = expiryDays(sku(Barcode barcode));
@defineMachineryPriceTransactionAttribute(expiryDays, 'Срок годности в днях', INTEGER);

dataMinPrice 'Минимальная цена' = ABSTRACT NUMERIC[16,4] (Barcode, Stock);

dataMinPrice 'Минимальная цена' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode) @@denomination;
dataMinPrice(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeStockAction(dataMinPrice, 'Минимальная цена', );
minPrice(MachineryPriceTransaction m, Barcode b) =  MIN dataMinPrice(m, b), price(m, b);