MODULE MachineryPriceTransaction;

REQUIRE Machinery, StockSkuDocument;

NAMESPACE Machinery;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraft 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) MATERIALIZED;
isPosted 'Проведен' (PriceTransactionDocument document) = NOT isDraft(document);
description 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) MATERIALIZED;
skip 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) MATERIALIZED;

sent 'Принят к загрузке в оборудование' = DATA BOOLEAN (PriceTransactionDocument);
sent(PriceTransactionDocument document) <- NULL WHEN SET(isDraft(document));

isClosed 'Закрыт' = ABSTRACT BOOLEAN (PriceTransactionDocument);
date 'Дата' = ABSTRACT DATE (PriceTransactionDocument);
time 'Время' = ABSTRACT TIME (PriceTransactionDocument);
series 'Серия' = ABSTRACT STRING[2] (PriceTransactionDocument);
number 'Номер' = ABSTRACT VARSTRING[28] (PriceTransactionDocument);
stock 'Склад' = ABSTRACT Stock (PriceTransactionDocument);
legalEntity 'Организация' = ABSTRACT LegalEntity (PriceTransactionDocument);
nameLegalEntity 'Организация' (PriceTransactionDocument document) = name(legalEntity(document));
operation = ABSTRACT Operation(PriceTransactionDocument);
nameOperation 'Операция' (PriceTransactionDocument document) = name(operation(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Machinery.PriceTransactionDocument;
    isDraft[PriceTransactionDocument] (concrete document) += isDraft(document);
    description[PriceTransactionDocument] (concrete document) += description(document);
    date[PriceTransactionDocument] (concrete document) += date(document);
    time[PriceTransactionDocument] (concrete document) += time(document);
    series[PriceTransactionDocument] (concrete document) += series(document);
    number[PriceTransactionDocument] (concrete document) += number(document);
    operation[PriceTransactionDocument] (concrete document) += operation(document);
END

META implementPriceTransactionDocument(concrete, le)
    @implementPriceTransactionDocument(concrete);
    legalEntity[PriceTransactionDocument] (concrete document) += le(document);
END

META implementPriceTransactionDocumentStock(concrete, st)
    @implementPriceTransactionDocument(concrete);
    stock[PriceTransactionDocument] (concrete document) += st(document);
    isClosed[PriceTransactionDocument] (concrete document) += isClosed(document);
END

META implementPriceTransactionDocumentStock(concrete, st, legalEntity)
    @implementPriceTransactionDocument(concrete, legalEntity);
    stock[PriceTransactionDocument] (concrete document) += st(document);
    isClosed[PriceTransactionDocument] (concrete document) += isClosed(document);
END

createMachineryPriceTransaction 'Загрузить в оборудование' = ABSTRACT (PriceTransactionDocument) TOOLBAR CONFIRM;
createSnapshotMachineryPriceTransaction 'Перегрузить все позиции' = ABSTRACT (PriceTransactionDocument) TOOLBAR CONFIRM;

showCreateMachineryPriceTransaction = ABSTRACT BOOLEAN (PriceTransactionDocument);

CLASS ABSTRACT PriceTransactionDocumentDetail 'Строка документа, требующиего загрузки в оборудование';
TABLE priceTransactionDocumentDetail (PriceTransactionDocumentDetail);

priceTransactionDocument = ABSTRACT PriceTransactionDocument(PriceTransactionDocumentDetail);
sku = ABSTRACT Sku (PriceTransactionDocumentDetail);
idBarcodeSku 'Штрих-код'(PriceTransactionDocumentDetail detail) = idBarcode(sku(detail));
nameSku 'Наименование' (PriceTransactionDocumentDetail detail) = name(sku(detail));
quantity 'Кол-во' = ABSTRACT NUMERIC[16,5](PriceTransactionDocumentDetail);
price 'Цена' = ABSTRACT NUMERIC[16,4](PriceTransactionDocumentDetail);

WHEN (SETCHANGED(sku(PriceTransactionDocumentDetail d)) OR SETCHANGED(price(d))) AND sent(priceTransactionDocument(d)) DO {
    sent( PriceTransactionDocument t) <- NULL WHERE t == priceTransactionDocument(d);   
}; 

META implementPriceTransactionDocumentDetail(object, class)
    EXTEND CLASS class##Detail : Machinery.PriceTransactionDocumentDetail;
    priceTransactionDocument (class##Detail detail) += object(detail);
    sku[PriceTransactionDocumentDetail] (class##Detail detail) += sku(detail);
    quantity[PriceTransactionDocumentDetail](class##Detail detail) += quantity(detail);
END

META implementPriceTransactionDocumentDetail(object)
    @implementPriceTransactionDocumentDetail(object, ###object);
END
//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT MachineryPriceTransaction 'Загрузка прайса в оборудование';
TABLE machineryPriceTransaction (MachineryPriceTransaction);

@defineExternalizable(machineryPriceTransaction, VARSTRING[100]);

@defineCreated(MachineryPriceTransaction);

groupMachinery (transaction) = ABSTRACT GroupMachinery (MachineryPriceTransaction) MATERIALIZED;
nameGroupMachinery 'Группа оборудования' (MachineryPriceTransaction transaction) = name(groupMachinery(transaction));
nppGroupMachinery 'Номер группы оборудования' (MachineryPriceTransaction transaction) = npp(groupMachinery(transaction));

stock (MachineryPriceTransaction transaction) = stock(groupMachinery(transaction));
nameStock 'Склад' (MachineryPriceTransaction transaction) = name(stock(transaction));
idStock (MachineryPriceTransaction transaction) = id(stock(transaction));

// Дата/время
date 'Дата' = DATA DATE (MachineryPriceTransaction);
date (MachineryPriceTransaction transaction) <- currentDate() WHEN SET(transaction IS MachineryPriceTransaction);

time 'Время' = DATA TIME (MachineryPriceTransaction);
time (MachineryPriceTransaction transaction) <- currentTime() WHEN SET(transaction IS MachineryPriceTransaction);

dateTime 'Дата/время' (MachineryPriceTransaction transaction) = dateTimeToDateTime(date(transaction), time(transaction)) MATERIALIZED;

order (MachineryPriceTransaction transaction) = STRUCT(dateTime(transaction), transaction) MATERIALIZED;

// Статус
snapshot 'Целиком' = DATA BOOLEAN (MachineryPriceTransaction);
skipSnapshot = ABSTRACT BOOLEAN (MachineryPriceTransaction);

skipSnapshotMachinery 'Запрещено загружать в оборудование целиком' = DATA BOOLEAN (UserRole); 

EXTEND FORM userRole
    PROPERTIES(ur) skipSnapshotMachinery
;

dateTimeProcessing 'Принята в обработку' = DATA DATETIME (MachineryPriceTransaction);
succeeded 'Загружена' = DATA BOOLEAN (MachineryPriceTransaction);
notSucceeded 'Не загружена' (MachineryPriceTransaction machineryPriceTransaction) = NOT succeeded(machineryPriceTransaction);
dateTimeSucceeded 'Время загрузки' = DATA DATETIME (MachineryPriceTransaction);
canceled 'Отменена' = DATA BOOLEAN (MachineryPriceTransaction);
process 'Требуется загрузка' (MachineryPriceTransaction machineryPriceTransaction) =
    machineryPriceTransaction IS MachineryPriceTransaction AND NOT
    succeeded(machineryPriceTransaction) AND NOT
    canceled(machineryPriceTransaction) MATERIALIZED INDEXED;


// Основание
comment 'Примечание' = DATA VARSTRING[100] (MachineryPriceTransaction);

priceTransactionDocument = DATA PriceTransactionDocument (MachineryPriceTransaction) INDEXED;
descriptionPriceTransactionDocument 'Основание загрузки' (MachineryPriceTransaction transaction) =
    description(priceTransactionDocument(transaction));

// todo : persistent почему-то не работает
description 'Основание' (MachineryPriceTransaction document) =
    OVERRIDE comment(document), descriptionPriceTransactionDocument(document);

countProcess 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF process(MachineryPriceTransaction transaction)
                                                                                 BY priceTransactionDocument(transaction) MATERIALIZED;

succeeded 'Загружен в оборудование' (PriceTransactionDocument document) = sent (document) IF NOT countProcess(document);

//-- Частичная загрузка
cleared 'Выполнена очистка' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
succeeded 'Загружено' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
dateTimeSucceeded 'Время загрузки' = DATA DATETIME(Machinery, MachineryPriceTransaction);

countSucceededMachineries'Кол-во загруженного оборудования' (t) = 
    GROUP SUM 1 IF succeeded(Machinery m, MachineryPriceTransaction t) OR 
                   (succeeded(t) AND groupMachinery(m) == groupMachinery(t)) 
          BY priceTransactionDocument(t) MATERIALIZED;
    
countSucceededMachineries'Кол-во загруженного оборудования' (machineryPriceTransaction) = GROUP SUM 1 
    IF succeeded(Machinery m,MachineryPriceTransaction t) BY t MATERIALIZED;

countMachineries 'Кол-во оборудования в группе' (gm) =GROUP SUM 1 BY groupMachinery(Machinery m);
countMachineries 'Кол-во оборудования в группе' (priceTransactionDocument) = GROUP SUM countMachineries(groupMachinery(MachineryPriceTransaction t)) BY priceTransactionDocument(t);
concatSucceededMachineries 'Кол-во оборудования' (PriceTransactionDocument t)  = CONCAT '/', countSucceededMachineries(t), countMachineries(t); 

statusMachinery 'Статус загрузки в оборудование' (PriceTransactionDocument document) =
    CASE
        WHEN skip(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument        
        WHEN countSucceededMachineries(document) != countMachineries(document) THEN (CONCAT ' ', 'Частично загружен', concatSucceededMachineries(document))
        WHEN succeeded(document) THEN 'Успешно загружен' IF document IS PriceTransactionDocument        
        WHEN sent(document) THEN 'Принят к загрузке' IF document IS PriceTransactionDocument
        ELSE 'Не загружен' IF document IS PriceTransactionDocument
    MATERIALIZED;

// Загруженные штрихкоды
TABLE machineryPriceTransactionBarcode (MachineryPriceTransaction, Barcode);

in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode);

name 'Наименование' = DATA VARSTRING[255] (MachineryPriceTransaction, Barcode);
name(MachineryPriceTransaction t, Barcode barcode)  => in(t, barcode) RESOLVE RIGHT;

price 'Цена' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode);
price(MachineryPriceTransaction t, Barcode barcode)  => in(t, barcode) RESOLVE RIGHT;

// Текущие загруженные штрихкоды
TABLE barcodeGroupMachinery (Barcode, GroupMachinery);

skipLastTransaction 'Не учитывать для определения текущих цен в оборудовании' = ABSTRACT BOOLEAN (GroupMachinery);

// INDEX groupInMachineryPriceTransactionBarcode + barcode 
groupIn = groupMachinery(MachineryPriceTransaction transaction) IF in(transaction, Barcode barcode) 
    AND NOT skipLastTransaction(groupMachinery(transaction)) MATERIALIZED;
    
lastTransaction (barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction 
          BY Barcode barcode, groupIn(transaction, barcode)
          ORDER order(transaction)
          WHERE NOT canceled(transaction) MATERIALIZED;

lastTransaction (sku, stock) =
    GROUP LAST lastTransaction(Barcode b, GroupMachinery g) 
          BY sku(b), stock(g)
          ORDER order(lastTransaction(b, g))
          WHERE lastTransaction(b, g);
          
lastFullTransaction (barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction 
          BY Barcode barcode, groupMachinery(transaction)
          ORDER order(transaction)
          WHERE in(transaction, barcode) AND NOT canceled(transaction);
          
prevLastTransaction (Barcode barcode, GroupMachinery groupMachinery) = PREV(lastFullTransaction (barcode, groupMachinery));

transactionName 'Текущее наименование в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    name(lastTransaction(barcode, groupMachinery), barcode);
prevTransactionName(Barcode barcode, GroupMachinery groupMachinery) = name(prevLastTransaction(barcode, groupMachinery), barcode);

transactionPrice 'Текущая цена в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    price(lastTransaction(barcode, groupMachinery), barcode) MATERIALIZED;
prevTransactionPrice (Barcode barcode, GroupMachinery groupMachinery) = price(prevLastTransaction(barcode, groupMachinery),barcode);

transactionPrice 'Текущая цена в оборудовании' (barcode, stock) =
    GROUP LAST transactionPrice(Barcode b, GroupMachinery g) 
          BY b, stock(g)
          ORDER order(lastTransaction(b, g))
          WHERE lastTransaction(b, g);

transactionPrice 'Текущая цена в оборудовании' (Sku sku, Stock stock) =
    transactionPrice(barcode(sku), stock) MATERIALIZED TABLE extraSkuStock;
transactionPriceIdBarcodeId 'Текущая цена в оборудовании' (VARSTRING[15] sku, VARSTRING[100] stock) = transactionPrice(skuBarcode(sku), stock(stock));

countDaysClearMachineryPriceTransaction 'За сколько дней хранить загрузки прайсов в оборудование' = DATA INTEGER (); 

EXTEND FORM options PROPERTIES countDaysClearMachineryPriceTransaction();
DESIGN options { log { MOVE PROPERTY(countDaysClearMachineryPriceTransaction());} }    

clearApplicationLog () += {
	NEWSESSION {
	    IF countDaysClearMachineryPriceTransaction() THEN {
	    in(MachineryPriceTransaction t, Barcode b) <- NULL WHERE NOT t == lastTransaction(b, groupMachinery(t)) AND date(t) <= subtract(currentDate(), countDaysClearMachineryPriceTransaction());
	    apply();
	    
	    DELETE MachineryPriceTransaction t WHERE  t IS MachineryPriceTransaction AND NOT [= GROUP SUM 1 IF in(MachineryPriceTransaction t, Barcode b) BY t](t);
	    apply();
	    }
	}
}   

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS MachineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (MachineryPriceTransactionError);

data 'Сообщение об ошибке' = DATA VARSTRING[200] (MachineryPriceTransactionError) IN base;
date 'Время возникновения' = DATA DATETIME (MachineryPriceTransactionError) IN base;
toDate 'Дата возникновения' (MachineryPriceTransactionError d) = DATE(date(d));
errorTrace 'След исключения' = DATA TEXT (MachineryPriceTransactionError) IN base;
machineryPriceTransaction 'Транзакция (ID)' = DATA MachineryPriceTransaction(MachineryPriceTransactionError) NONULL DELETE IN base INDEXED;
quantityMachineryPriceTransactionError 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 BY machineryPriceTransaction (MachineryPriceTransactionError machineryPriceTransactionError) MATERIALIZED IN base;
lastDateMachineryPriceTransactionError 'Время последней ошибки' (MachineryPriceTransaction) = GROUP MAX date(MachineryPriceTransactionError machineryPriceTransactionError) BY machineryPriceTransaction (machineryPriceTransactionError) MATERIALIZED;

lastTransaction (barcode, stock) =
    GROUP LAST lastTransaction(Barcode b, GroupMachinery g)
          BY b, stock(g)
          ORDER order(lastTransaction(b, g))
          WHERE lastTransaction(b, g);

backgroundLastTransaction (Sku sku, Stock stock) = RGB (255,0,0) IF quantityMachineryPriceTransactionError(lastTransaction(barcode(sku), stock)) AND NOT
    succeeded(lastTransaction (barcode(sku), stock));  

INDEX groupMachinery(MachineryPriceTransaction t), dateTime(t), t; 
lastErrorTime (GroupMachinery g) = GROUP LAST dateTime(MachineryPriceTransaction t) IF quantityMachineryPriceTransactionError(t) BY groupMachinery(t) ORDER dateTime(t), t WHERE process(t);

@defineLog (MachineryPriceTransactionError, 'ошибок загрузки прайсов', log, toDate);

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (MachineryPriceTransaction, Machinery);
in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Machinery);
npps 'Номера устройств' (transaction) =
    GROUP CONCAT STRING[3](npp(Machinery machinery)) IF in(MachineryPriceTransaction transaction, machinery), ','
          BY transaction
          ORDER machinery MINCHARWIDTH 10 PREFCHARWIDTH 20 MATERIALIZED;

// перезагрузка прайса целиком
selected 'Вкл' = DATA LOCAL BOOLEAN (GroupMachinery);
selected 'Вкл' = DATA LOCAL BOOLEAN (Machinery);

countSelectedMachinery() = GROUP SUM 1 IF selected(Machinery m);

GROUP snapshotMachineryPrice 'Перезагрузка прайса целиком с выбором группы' : public;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = Stock PANEL
    PROPERTIES(s) READONLY sname = name

    OBJECTS g = GroupMachinery
    PROPERTIES(g) selected
    PROPERTIES(g) READONLY npp, name, nameStock, nameModel
    FILTERS stock(g) == s,
            active(g)
        
    OBJECTS m = Machinery
    PROPERTIES(m)          selected
    PROPERTIES(m) READONLY npp, shortDescription, description, port

    FILTERS groupMachinery(m) == g
    
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 
;

DESIGN groupMachineryInput {
    BOX {
        preferredSize = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = MachineryPriceTransaction PANEL
    PROPERTIES(t) nppGroupMachinery, nameGroupMachinery, date, time,
                  snapshot, dateTimeProcessing SHOWIF notSucceeded(t), succeeded, 
                  dateTimeSucceeded SHOWIF succeeded(t), canceled

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY id
    PROPERTIES(t, b)       in, name, price
    FILTERS in(t, b)

    EDIT MachineryPriceTransaction OBJECT t;
;

DESIGN machineryPriceTransaction {
    NEW pane BEFORE TOOLBARBOX {
        fill = 1;
        type = TABBED;
        
        MOVE BOX(b);
    }
}

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = Stock PANEL
    PROPERTIES name(s) SELECTOR
    FILTERS isCompany(s)

    OBJECTS t = MachineryPriceTransaction LAST
    PROPERTIES(t) READONLY
                           VALUE, snapshot, nameGroupMachinery, nameStock, date, 
                           time, description, dateTimeProcessing 
    PROPERTIES(t) READONLYIF isReadonly()
                           succeeded , dateTimeSucceeded, canceled, 
                           quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(t),
                           npps TOOLBAR SHOWIF snapshot(t)
    PROPERTIES(t) READONLY createdNameUser, createdHostnameComputer
    PROPERTIES(t)          NEWSESSION addT = NEW, EDIT, DELETE 
    FILTERS stock(t) == s

    OBJECTS b = Barcode
    PROPERTIES(b)    READONLY id
    PROPERTIES(t, b) READONLY name, price

    FILTERS in(t, b)

    OBJECTS e = MachineryPriceTransactionError LAST
    PROPERTIES(e)  READONLY data, date
    PROPERTIES(e)  PANEL  errorTrace
    FILTERS machineryPriceTransaction(e) == t
;
@extendFormFilterStockAccess(s, machineryPriceTransactions);

@extendFormEditable(machineryPriceTransactions);

DESIGN machineryPriceTransactions {
    NEW header {
        type = CONTAINERH;
        MOVE BOX(s) {
            PROPERTY(name(s)) {
                alignment = STRETCH;
            }
        }
    }
    NEW pane {
        fill = 1;
        type = SPLITV;
        MOVE BOX(t);
        NEW specContainer{
            fill = 1;
            type = TABBED;
            MOVE BOX(b);
            NEW errorContainer {
                fill = 1;
                caption = 'Сообщения об ошибках';
                MOVE BOX(e);
                MOVE PROPERTY(errorTrace(e)) {
                    fill = 1;
                    panelCaptionAbove = TRUE;
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

// ------------------------------------------------ Действия по загрузке ------------------------------------ //

CLASS RequestExchangeType 'Тип запроса' {
    salesInfo 'Перегрузить продажи',
    checkZReport 'Сверить суммы z-отчётов',
    terminalOrder 'Загрузить заказы',
    discountCard 'Загрузить дисконтные карты',
    cashierInfo 'Загрузить данные о кассирах'
}

FORM requestExchangeTypes 'Типы запросов'
    OBJECTS r = RequestExchangeType
    PROPERTIES(r) READONLY staticCaption
    LIST RequestExchangeType OBJECT r
;

CLASS RequestExchange 'Запрос обмена данными';
TABLE requestExchange (RequestExchange);

stock 'Склад' = DATA Stock (RequestExchange);// NONULL;
nameStock 'Склад' (RequestExchange requestExchange) = name(stock(requestExchange));

CONSTRAINT stock(RequestExchange r) AND NOT isCompany(stock(r))
    CHECKED BY stock[RequestExchange]
    MESSAGE 'Склад запроса обмена данными должен быть складом компании';

TABLE stockRequestExchange(Stock, RequestExchange);
in 'Вкл' = DATA BOOLEAN (Stock, RequestExchange);  
extraStocks = GROUP CONCAT name(Stock stock) IF in(stock, RequestExchange requestExchange), ', ' 
                                                BY requestExchange
                                                ORDER name(stock) MINCHARWIDTH 30 PREFCHARWIDTH 30 MATERIALIZED;                                                                         
dateFrom 'Дата с' = DATA DATE (RequestExchange) NONULL;
dateTo 'Дата по' = DATA DATE (RequestExchange) NONULL;
startDate 'Загружать дисконтные карты начиная с даты' = DATA DATE (RequestExchange);
//todo: rename idDiscountCardFrom, idDiscountCardTo -> numberDiscountCardFrom, numberDiscountCardTo
idDiscountCardFrom 'Номер дисконтной карты (с)' = DATA VARSTRING[100] (RequestExchange);
idDiscountCardTo 'Номер дисконтной карты (по)' = DATA VARSTRING[100] (RequestExchange);
requestExchangeType 'Тип запроса' = DATA RequestExchangeType (RequestExchange) NONULL;
nameRequestExchangeType 'Тип запроса' (RequestExchange requestExchange) = staticName(requestExchangeType(requestExchange));
captionRequestExchangeType 'Тип запроса' (RequestExchange requestExchange) = staticCaption(requestExchangeType(requestExchange));
succeeded 'Выгружен' = DATA BOOLEAN (RequestExchange);
notSucceeded 'Не выгружен' (RequestExchange requestExchange) = requestExchange IS RequestExchange AND NOT succeeded(requestExchange);
dateTimeSucceeded 'Время выгрузки' = DATA DATETIME (RequestExchange);
showExtraStocks(RequestExchange requestExchange) = requestExchangeType(requestExchange) == RequestExchangeType.checkZReport OR 
                                   requestExchangeType(requestExchange) == RequestExchangeType.salesInfo OR 
                                   requestExchangeType(requestExchange) == RequestExchangeType.cashierInfo;
showStartDate(RequestExchange requestExchange) = requestExchangeType(requestExchange) == RequestExchangeType.discountCard;

TABLE machineryRequestExchange(Machinery, RequestExchange);
dataIn 'Вкл' = DATA BOOLEAN (Machinery, RequestExchange); 
machineries 'Оборудование' (requestExchange) = GROUP SUM 1 IF dataIn(Machinery m, RequestExchange requestExchange) BY requestExchange;  
in (Machinery machinery, RequestExchange requestExchange) = dataIn(machinery, requestExchange) OR NOT machineries(requestExchange);     
     
CLASS RequestExchangeLog 'Лог обмена данными';
TABLE requestExchangeLog (RequestExchangeLog);

machinery 'Касса' = DATA Machinery (RequestExchangeLog);
nppMachinery 'Касса' (RequestExchangeLog requestExchangeLog) = npp(machinery(requestExchangeLog));
message 'Сообщение' = DATA TEXT (RequestExchangeLog);
date 'Время' = DATA DATETIME (RequestExchangeLog);
requestExchange = DATA RequestExchange (RequestExchangeLog);

CLASS RequestExchangeError 'Ошибки обмена данными';
TABLE requestExchangeError (RequestExchangeError);

message 'Сообщение' = DATA TEXT (RequestExchangeError);
date 'Время' = DATA DATETIME (RequestExchangeError);
requestExchange = DATA RequestExchange (RequestExchangeError);
note 'Примечание' = DATA VARSTRING[100] (RequestExchange) MINCHARWIDTH 30 PREFCHARWIDTH 50;

FORM requestExchange 'Запрос обмена данными'
    OBJECTS r = RequestExchange PANEL
    PROPERTIES(r) nameStock, dateFrom, dateTo, captionRequestExchangeType, succeeded, note, 
                  startDate SHOWIF showStartDate(r), idDiscountCardFrom SHOWIF showStartDate(r), 
                  idDiscountCardTo SHOWIF showStartDate(r)
 
    OBJECTS s = Stock GRID
    PROPERTIES(s, r) SHOWIF showExtraStocks(r) in
    PROPERTIES(s) READONLY SHOWIF showExtraStocks(r) id, name, nameLegalEntity
    ORDER BY nameLegalEntity(s)
    FILTERS isCompany(s)
    
    OBJECTS m = Machinery 
    PROPERTIES(m, r) dataIn
    PROPERTIES(m) READONLY npp, shortDescription, description, objectClassName  
    FILTERS stock(m) == stock(r)  
    
    EDIT RequestExchange OBJECT r
;

DESIGN requestExchange {
    BOX {
        NEW topContainer{
            caption = 'Запрос обмена данными';
            NEW firstRow {
                type = CONTAINERH;
                MOVE PROPERTY(nameStock(r));
                MOVE PROPERTY(dateFrom(r));
                MOVE PROPERTY(dateTo(r));
                MOVE PROPERTY(captionRequestExchangeType(r));                
            }
            NEW secondRow {
                type = CONTAINERH;
                MOVE PROPERTY(succeeded(r));
                MOVE PROPERTY(note(r));                
            }            
            NEW thirdRow {
                type = CONTAINERH;
                MOVE PROPERTY(startDate(r));
                MOVE PROPERTY(idDiscountCardFrom(r));
                MOVE PROPERTY(idDiscountCardTo(r));                
            }
        }
        NEW tabbedPanel {
            fill = 1;
            type = TABBED;
            MOVE BOX(s);
            MOVE BOX(m);
        }
        MOVE TOOLBARBOX;
    }
}

overCopy = ABSTRACT (RequestExchange, RequestExchange);

copy 'Копировать'(RequestExchange request) = {
	NEWSESSION {
	    NEW r = RequestExchange {
	        stock(r) <- stock(request);
	        dateFrom(r) <- dateFrom(request);
	        dateTo(r) <- dateTo(request);
	        note(r) <- note(request);
	        requestExchangeType(r) <- requestExchangeType(request);
	        startDate(r) <- startDate(request);
	        idDiscountCardFrom(r) <- idDiscountCardFrom(request);
	        idDiscountCardTo(r) <- idDiscountCardTo(request);
	        
	        FOR in(Stock stock, request) DO {
	            in(stock, r) <- in(stock, request);
	        }
	        
	        FOR dataIn(Machinery machinery, request) DO {
	            dataIn(machinery, r) <- dataIn(machinery, request);
	        }
	        
	        overCopy(request, r);
	        
	        SHOW requestExchange OBJECTS r = r MANAGESESSION DOCKED;
	    }   
	}
} TOOLBAR;

allStocks 'Склады' (RequestExchange requestExchange)= 
    CONCAT ',', nameStock(requestExchange), extraStocks(requestExchange) 
    MINCHARWIDTH 30 PREFCHARWIDTH 30 MATERIALIZED; 

FORM requestExchanges 'Запросы обмена данными'
    
    OBJECTS r = RequestExchange LAST
    PROPERTIES(r) READONLY allStocks, dateFrom, dateTo, 
                           captionRequestExchangeType, succeeded, dateTimeSucceeded, note, 
                           startDate SHOWIF showStartDate(r) PANEL, idDiscountCardFrom SHOWIF showStartDate(r) PANEL, 
                           idDiscountCardTo SHOWIF showStartDate(r) PANEL
    PROPERTIES(r)          NEWSESSION copy, NEW, EDIT, DELETE 
    
    OBJECTS rl = RequestExchangeLog
    PROPERTIES(rl) READONLY nppMachinery, message, date
    FILTERS requestExchange(rl) == r    
    
    OBJECTS re = RequestExchangeError
    PROPERTIES(re) READONLY message, date
    FILTERS requestExchange(re) == r    
;

DESIGN requestExchanges {
    BOX {
        NEW requestExchangeContainer {
            fill = 1;
            type = SPLITV;
            MOVE BOX(r);
            NEW tabbedContainer {
                type = TABBED;
                fill = 1;
                NEW logTabbedContainer {
                    fill = 1;
                    caption = 'Лог';
                    MOVE BOX(rl);
                }
                NEW errorTabbedContainer {
                    fill = 1;
                    caption = 'Ошибки';
                    MOVE BOX(re);
                }                
            }
        }
        MOVE TOOLBARBOX;
    }
}

createMachineryPriceTransaction = ABSTRACT LIST (GroupMachinery);

skipIn = ABSTRACT CASE BOOLEAN (GroupMachinery, Sku);
in 'Вкл' (GroupMachinery groupMachinery, Sku sku) = groupMachinery IS GroupMachinery
                                                    AND sku IS Sku
                                                         AND NOT (filterSku(groupMachinery) AND NOT in(groupMachinery, skuGroup(sku)))
                                                         AND NOT skipIn(groupMachinery, sku);
                                                         
skip = ABSTRACT CASE BOOLEAN (GroupMachinery, Barcode);
skipMachineryPriceTransaction 'Запретить загрузку в оборудование' = ABSTRACT BOOLEAN (Sku, Stock, DATETIME);

// Перезагрузка целиком
snapshotAttribute = ABSTRACT LIST (MachineryPriceTransaction, GroupMachinery);

addedTransaction = DATA LOCAL MachineryPriceTransaction();

snapshotGroupMachinery 'Ранее загруженные'(Stock stock) = {
	NEWSESSION {
	    DIALOG groupMachineryInput OBJECTS s = stock DO {
	        FOR selected(GroupMachinery groupMachinery) DO {
	            addedTransaction() <- NULL;
	            createMachineryPriceTransaction(groupMachinery);
	            FOR MachineryPriceTransaction t == addedTransaction() DO {
	                groupMachinery(t) <- groupMachinery;
	                comment(t) <- 'Перезагрузка прайса целиком';
	                IF NOT skipSnapshot(t) THEN {
	                    snapshot(t) <- TRUE;
	                }
	                in(t, Machinery machinery) <- selected(machinery) WHERE groupMachinery(machinery) == groupMachinery;
	
	                LOCAL in = BOOLEAN (Barcode);
	
	                in(Barcode barcode) <- TRUE IF prevLastTransaction(barcode, groupMachinery);
	
	                // делаем разными запросами, чтобы было проще PostgreSQL
	                in(Barcode barcode) <- active(barcode) WHERE in(barcode); // если активный штрихкод
	
	                in(Barcode barcode) <- in(groupMachinery, sku(barcode)) WHERE in(barcode); // если на эту группу оборудования должна закачиваться
	                
	                in(Barcode barcode) <- NOT skuType(sku(barcode)) != SkuType.skuTypeItem WHERE in(barcode); // если это не товар
	                
	                in(Barcode barcode) <- NULL WHERE in(barcode) AND skip(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться
	                in(Barcode barcode) <- NULL WHERE in(barcode) AND (skipMachineryPriceTransaction(sku(barcode), stock, currentDateTime()) OR inactive(sku(barcode))); // если есть запрет на загрузку
	
	                in(t, Barcode barcode) <- in(barcode); // важно, что товар должен быть активным на текущий момент
	                name(t, Barcode barcode) <- prevTransactionName(barcode, groupMachinery) WHERE in(t, barcode);
	                snapshotAttribute(t, groupMachinery);
	                price(t, Barcode barcode) <- prevTransactionPrice(barcode, groupMachinery) WHERE in(t, barcode);
	            }
	        }
	        apply();
	    }
	}
} IN snapshotMachineryPrice;

// Инкрементная загрузка
GROUP incrementMachineryPrice 'Инкрементная загрузка' : public;

// ------------------------------- Определение цены, по которой загружать ------------------------------- //

price 'Цена' (Barcode barcode, GroupMachinery groupMachinery) = priceA(priceListType(groupMachinery),
                                                                                                  sku(barcode),
                                                                                                  stock(groupMachinery),
                                                                                                  currentDateTime());

createMachineryPriceTransactionAll = DATA LOCAL BOOLEAN(); // установка флага на полное удаление старых товаров из кассы
createMachineryPriceTransactionSnapshot = DATA LOCAL BOOLEAN (); // загрузка не только изменившихся цен

createMachineryPriceTransaction = DATA LOCAL BOOLEAN (Sku);

createMachineryPriceTransactionDocument = DATA LOCAL PriceTransactionDocument();
createMachineryPriceTransactionComment = DATA LOCAL VARSTRING[100] ();

createAttribute = ABSTRACT LIST (MachineryPriceTransaction);
createAttribute = ABSTRACT LIST (MachineryPriceTransaction, Stock);
createAttribute = ABSTRACT LIST (MachineryPriceTransaction, GroupMachinery);


exclude = DATA LOCAL BOOLEAN (GroupMachinery);

supressNoNeedMessage() = DATA LOCAL BOOLEAN (); // не выдавать сообщение если загрузка не требуется

createMachineryPriceTransaction 'Создать транзакцию'(Stock stock) = {
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    message() <- TEXT('Принято к загрузке в оборудование : \n');

    FOR stock(GroupMachinery groupMachinery) == stock AND active(groupMachinery) AND NOT exclude(groupMachinery) DO {
        LOCAL in = BOOLEAN (Barcode);

        in(Barcode barcode) <- createMachineryPriceTransaction(sku(barcode));

        // делаем разными запросами, чтобы было проще PostgreSQL
        in(Barcode barcode) <- active(barcode) WHERE in(barcode); // если активный штрихкод

        in(Barcode barcode) <- in(groupMachinery, sku(barcode)) WHERE in(barcode); // если на эту группу оборудования должна закачиваться

        in(Barcode barcode) <- NULL WHERE in(barcode) AND skip(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться

        in(Barcode barcode) <- NOT skuType(sku(barcode)) != SkuType.skuTypeItem WHERE in(barcode); // если это не товар

        in(Barcode barcode) <- TRUE IF price(barcode, groupMachinery) WHERE in(barcode); // если есть цена

        IF NOT createMachineryPriceTransactionAll() AND NOT createMachineryPriceTransactionSnapshot() THEN
            in(Barcode barcode) <- TRUE IF NOT (price(barcode, groupMachinery) == transactionPrice(barcode, groupMachinery)) WHERE in(barcode);
            
        in(Barcode barcode) <- NULL WHERE in(barcode) AND (skipMachineryPriceTransaction(sku(barcode), stock, currentDateTime()) OR inactive(sku(barcode))); // если есть запрет на загрузку
        
        LOCAL countBarcode = INTEGER();
        countBarcode() <- [= GROUP SUM 1 IF in(Barcode barcode)]();
        LOCAL countSku = INTEGER();
        countSku() <- [ = GROUP SUM 1 IF [= GROUP SUM 1 IF in(Barcode barcode) BY sku(barcode)](Sku sku)]();        
        
        IF countBarcode() THEN {
            addedTransaction() <- NULL;
            createMachineryPriceTransaction(groupMachinery);
            FOR MachineryPriceTransaction t == addedTransaction() DO {
                in(t, Machinery machinery) <- selected(machinery) WHERE groupMachinery(machinery) == groupMachinery;
                groupMachinery(t) <- groupMachinery;
                priceTransactionDocument(t) <- createMachineryPriceTransactionDocument();
                comment(t) <- createMachineryPriceTransactionComment();
                in(t, Barcode barcode) <- in(barcode);
                createAttribute(t);
                createAttribute(t, stock);
                createAttribute(t, groupMachinery(t));
                price(t, Barcode barcode) <- price(barcode, groupMachinery) WHERE in(t, barcode);
                
                IF createMachineryPriceTransactionAll() AND NOT skipSnapshot(t) THEN {
                    snapshot(t) <- TRUE;
                    canceled(MachineryPriceTransaction tr) <- TRUE WHERE process(tr) AND groupMachinery(tr) == groupMachinery  AND NOT tr == t AND NOT countSelectedMachinery();
                }                    
            }

            message() <- message() + (OVERRIDE name(groupMachinery), 'Без наименования') + ' - ' + countSku() + ' товаров ('+countBarcode()+' штрих-кодов).\n' ;
            sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE NOWAIT message();
    ELSE
        IF NOT supressNoNeedMessage() THEN
            MESSAGE NOWAIT 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки'(Stock stock) = {
	NEWSESSION {
	    createMachineryPriceTransaction(Sku sku) <- TRUE IF currentBalance(sku, stock);
	    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
	    createMachineryPriceTransaction(stock);
	    apply();
	}
} CONFIRM IN incrementMachineryPrice;

createPriceMachineryPriceTransaction 'Все товары'(Stock stock) = {
	NEWSESSION {
	    createMachineryPriceTransaction(Sku sku) <- TRUE;
	    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
	    createMachineryPriceTransaction(stock);
	    apply();
	}
} CONFIRM IN incrementMachineryPrice;

include 'Вкл.' = DATA LOCAL BOOLEAN (GroupMachinery);

FORM selectGroupMachinery 'Выбор групп оборудования'
    OBJECTS st = Stock PANEL 
    PROPERTIES(st) READONLY name    
    
    OBJECTS gm = GroupMachinery 
    PROPERTIES(gm) include 
    PROPERTIES(gm) READONLY npp, name, ports, objectClassName
    FILTERS stock(gm) == st,
            active(gm)
            
    OBJECTS m = Machinery
    PROPERTIES(m)          selected
    PROPERTIES(m) READONLY npp, shortDescription, description, port

    FILTERS groupMachinery(m) == gm
    
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 
;
DESIGN selectGroupMachinery { BOX { preferredSize = (1024, 768); } }

createBalanceSelectMachineryPriceTransaction 'Остатки'(Stock stock) = {
	NEWSESSION {
	    DIALOG selectGroupMachinery OBJECTS st = stock DO
	        IF [= GROUP SUM 1 IF include(GroupMachinery gm) BY stock(gm)](stock) THEN {
	            exclude(GroupMachinery gm) <- TRUE WHERE stock(gm) == stock AND NOT include(gm);
	            
	            createMachineryPriceTransaction(Sku sku) <-  TRUE IF currentBalance(sku, stock);
	            createMachineryPriceTransactionComment() <- 'Выборочная загрузка остатков по группе оборудования';
	            createMachineryPriceTransactionAll() <- TRUE;
	            createMachineryPriceTransaction(stock);
	            apply();
	        }
	}
} IN snapshotMachineryPrice;

createSelectMachineryPriceTransaction 'Все товары'(Stock stock) = {
	NEWSESSION {
	    DIALOG selectGroupMachinery OBJECTS st = stock DO
	        IF [= GROUP SUM 1 IF include(GroupMachinery gm) BY stock(gm)](stock) THEN {
	            exclude(GroupMachinery gm) <- TRUE WHERE stock(gm) == stock AND NOT include(gm);
	            
	            createMachineryPriceTransaction(Sku sku) <- TRUE;
	            createMachineryPriceTransactionComment() <- 'Выборочная загрузка товаров по группе оборудования';
	            createMachineryPriceTransactionAll() <- TRUE;
	            createMachineryPriceTransaction(stock);
	            apply();
	        }
	}
} IN snapshotMachineryPrice;



GROUP documentMachineryPrice 'Из документа' : public;
createDocumentMachineryPriceTransaction 'Из документа'(Stock stock) = {
	NEWSESSION {
	    DIALOG documents MANAGESESSION DO {
	        createMachineryPriceTransaction(Sku sku) <- TRUE WHERE countDocumentDetail(sku, selectedDocument());        
	        createMachineryPriceTransactionDocument() <- selectedDocument();
	        createMachineryPriceTransactionSnapshot() <- TRUE ;
	        createMachineryPriceTransaction(stock);
	    }
	}
} IN documentMachineryPrice;

EXTEND FORM machineryPriceTransactions
    PROPERTIES(s) createBalanceMachineryPriceTransaction, createPriceMachineryPriceTransaction, 
                  createBalanceSelectMachineryPriceTransaction, createSelectMachineryPriceTransaction, 
                  snapshotGroupMachinery, createDocumentMachineryPriceTransaction
;

DESIGN machineryPriceTransactions {
    header {
        MOVE GROUP(s,incrementMachineryPrice);
        MOVE GROUP(s,snapshotMachineryPrice);
        MOVE GROUP(s,documentMachineryPrice);
    }
}

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBase(object, caption, nameProp)
    prevTransaction###object caption###' (тек.)' (Barcode barcode, GroupMachinery groupMachinery)  =
        object(prevLastTransaction(barcode, groupMachinery), barcode);

    snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +=
        { ASSIGN object(t, Barcode barcode) <- prevTransaction###object(barcode, groupMachinery) WHERE in(t, barcode); }

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb) READONLY  nameProp###object;
END

META defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    over###object = ABSTRACT type (MachineryPriceTransaction, Barcode);
    createAttribute(MachineryPriceTransaction t) += { ASSIGN object(t, Barcode barcode) <- OVERRIDE over###object(t, barcode), object(barcode)
                                                          WHERE in(t, barcode); }
END

META defineMachineryPriceTransactionAttribute(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, );
END

META defineMachineryPriceTransactionAttribute(object, caption, type, nameProp)
    object = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    nameProp##type caption (MachineryPriceTransaction transaction, Barcode barcode) =
        nameProp(object(transaction, barcode));
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp);
END

META defineMachineryPriceTransactionAttributeStockAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttribute(MachineryPriceTransaction t, Stock stock) += { ASSIGN object(t, Barcode barcode) <- object(barcode, stock)
                                                                      WHERE in(t, barcode); }
END
META defineMachineryPriceTransactionAttributeStock(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeStockAction(object, caption, );
END

// Номер PLU
pluNumber 'Номер PLU' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);

// Набор флагов
flags 'Флаги' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);
flags 'Флаги' = ABSTRACT INTEGER (Barcode);

snapshotDocumentMachineryPriceTransaction 'Загружать в оборудование все позиции документа' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() snapshotDocumentMachineryPriceTransaction
;
DESIGN options {
    machinery {
        MOVE PROPERTY(snapshotDocumentMachineryPriceTransaction());
    }
}

@defineOption(closeDocumentMachineryPriceTransaction, 'Закрывать документы при загрузке в оборудование', machinery);

// Подключение свойств к документу
META defineDocumentMachineryPriceTransaction (document, detailProp, skuProp, stockProp)
    createMachineryPriceTransaction 'Загрузить в оборудование'(###document document) = {
	NEWSESSION {
	        IF is(document) THEN
	            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) DO { 
	                IF snapshotDocumentMachineryPriceTransaction() THEN
	                    createMachineryPriceTransactionSnapshot() <- TRUE;
	                createMachineryPriceTransaction(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
	                createMachineryPriceTransactionDocument() <- document;
	                createMachineryPriceTransaction(stockProp(document));
	                sent(document) <- TRUE WHERE isPosted(document);
	                isClosed(document) <- TRUE WHERE isPosted(document) AND closeDocumentMachineryPriceTransaction();
	                apply();
	            }
	    }
} TOOLBAR CONFIRM;
    
    createMachineryPriceTransaction(###document document) += { createMachineryPriceTransaction(document); }
    
    createSnapshotMachineryPriceTransaction 'Перегрузить все позиции'(###document document) = {
	NEWSESSION {
	        IF is(document) THEN
	            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) DO { 
	                createMachineryPriceTransactionSnapshot() <- TRUE;
	                createMachineryPriceTransaction(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
	                createMachineryPriceTransactionDocument() <- document;
	                createMachineryPriceTransaction(stockProp(document));
	                sent(document) <- TRUE WHERE isPosted(document);
	                isClosed(document) <- TRUE WHERE isPosted(document) AND closeDocumentMachineryPriceTransaction();
	                apply();
	            }
	    }
} CONFIRM;
    
    createSnapshotMachineryPriceTransaction(###document document) += { createSnapshotMachineryPriceTransaction(document); }

    showCreateMachineryPriceTransaction 'Показывать' (###document document) = isPosted(document) AND NOT Machinery.skip(document)
                                                                                                           AND NOT sent(document);
    showCreateMachineryPriceTransaction (###document document) += showCreateMachineryPriceTransaction(document);
                                                                                                           
    backgroundCreateMachineryPriceTransaction 'Цвет' (PriceTransactionDocument document) = IF countProcess(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction[###document](document);
END

META defineDocumentMachineryPriceTransaction (document, skuProp, stockProp)
    @defineDocumentMachineryPriceTransaction (document, document, skuProp, stockProp);
END


META extendFormDocumentMachineryPriceTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusMachinery BACKGROUND backgroundCreateMachineryPriceTransaction(object) READONLY AFTER afterProp(object),        
                           createMachineryPriceTransaction SHOWIF showCreateMachineryPriceTransaction(object),
                           createSnapshotMachineryPriceTransaction SHOWIF isPosted(object)
    ;
    DESIGN form {
        propContainer{
            NEW machinery {                 
                caption = 'Загрузки' ;
                type = CONTAINERV;    
                        
                MOVE PROPERTY (createMachineryPriceTransaction(object));
                MOVE PROPERTY (createSnapshotMachineryPriceTransaction(object));
            }
        }
    }
END

META extendFormDocumentMachineryPriceTransactionError(form, object, document, propContainer)
    EXTEND FORM form
        OBJECTS machError = MachineryPriceTransactionError
        PROPERTIES(machError) READONLY data, date 
        FILTERS object == priceTransactionDocument(machineryPriceTransaction(machError))
    ;
    DESIGN form {
        propContainer{
            NEW machineryErrors {                 
                caption = 'Ошибки загрузки в оборудование' ;
                MOVE BOX(machError);
            }
        }
    }
END

NAVIGATOR {
    machineryExport {
        ADD machineryPriceTransactions;
        ADD requestExchanges;
    }
}

//--

notResetMachinerySelectSku 'Не сбрасывать отмеченные товары при загрузке в оборудование' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetMachinerySelectSku
;
DESIGN options {
    machinery {
        MOVE PROPERTY(notResetMachinerySelectSku());
    }
}

createSelectedSkuPriceTransactionDocument 'Загрузить в оборудование'(Stock stock) = {
	NEWSESSION NESTED (select[Sku]) {
	    IF [=GROUP SUM 1 IF select(Sku sku)]() THEN {
	        createMachineryPriceTransactionSnapshot() <- TRUE;
	        createMachineryPriceTransaction(Sku sku) <- TRUE IF select(sku);
	        createMachineryPriceTransaction(stock);
	        
	        IF NOT notResetMachinerySelectSku() THEN {
	            select(Sku sku) <- NULL;
	        }
	        APPLY NESTED LOCAL;
	        IF canceled() THEN {
	            cancel();
	        }
	    } ELSE {
	        MESSAGE 'Не отмечены товары, необходимые к загрузке';
	    }
	}
} TOOLBAR ;

createApplySelectedSkuPriceTransactionDocument 'Загрузить в оборудование'(Stock stock) = {
    APPLY NESTED (select[Sku]);
    IF NOT canceled() THEN {
        createSelectedSkuPriceTransactionDocument(stock);
    }
}

createSelectedSkuStockPriceTransactionDocument 'Загрузить в оборудование'() = {
	NEWSESSION NESTED (select[Sku,Stock], createMachineryPriceTransactionSnapshot[], createMachineryPriceTransaction[Sku]) {
	    IF [=GROUP SUM 1 IF select(Sku sku, Stock stock)]() THEN {
	        FOR [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](Stock stock) DO {
	            createMachineryPriceTransactionSnapshot() <- TRUE;
	            createMachineryPriceTransaction(Sku sku) <- TRUE IF select(sku, stock);
	            createMachineryPriceTransaction(stock);
	        }
	        IF NOT notResetMachinerySelectSku() THEN {
	            select(Sku sku, Stock stock) <- NULL;
	        }
	        APPLY NESTED LOCAL;
	        IF canceled() THEN {
	            cancel();
	        }
	    }
	}
} TOOLBAR ;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() createSelectedSkuStockPriceTransactionDocument TODRAW sts
;
DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW machineryContainer {
            caption = 'Загрузки';
            type = CONTAINERV;
            MOVE PROPERTY (createSelectedSkuStockPriceTransactionDocument());
        } 
    }
}
//-- Частичная загрузка
filter (Machinery machinery, MachineryPriceTransaction transaction)= IF npps(transaction) 
                                                                        THEN in(transaction, machinery) AND groupMachinery(machinery) == groupMachinery(transaction)
                                                                        ELSE groupMachinery(machinery) == groupMachinery(transaction); 
EXTEND FORM machineryPriceTransaction
    OBJECTS m = Machinery GRID
    PROPERTIES(m) READONLY npp, shortDescription, description, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(t, m) in
    FILTERS groupMachinery(m) == groupMachinery(t) 
    PROPERTIES(m, t) cleared SHOWIF snapshot(t), 
                     succeeded, dateTimeSucceeded                     
;

DESIGN machineryPriceTransaction {
    pane {
        MOVE BOX(m);
    }
}


//filterInMachineryPriceTransactionBarcodeStock (bb,s)= GROUP SUM 1 IF inMachineryPriceTransactionBarcode(mt, bb) BY bb, stockMachineryPriceTransaction(mt);
EXTEND FORM machineryPriceTransactions

    OBJECTS m = Machinery GRID
    PROPERTIES(m) READONLY  npp, shortDescription, description, port, objectClassName//dataDirectoryCashRegister
    PROPERTIES(t, m) READONLY in
    FILTERS filter(m, t) 
    PROPERTIES(m, t) READONLY cleared SHOWIF snapshot(t),
                              succeeded, dateTimeSucceeded
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 

    OBJECTS dt = DATE PANEL
    PROPERTIES(dt) val = VALUE 

    OBJECTS tt = MachineryPriceTransaction LAST
    PROPERTIES(tt) READONLY VALUE, snapshot READONLY, nameGroupMachinery, nameStock, date, 
                            time, description, dateTimeProcessing
    PROPERTIES(tt) READONLYIF isReadonly()
                            succeeded, dateTimeSucceeded, canceled, 
                            quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(tt),
                            npps PANEL SHOWIF snapshot(tt)
    PROPERTIES(tt) READONLY  createdNameUser, createdHostnameComputer
    PROPERTIES(tt)          NEWSESSION addTt = NEW, EDIT, DELETE 
    FILTERS NOT succeeded(tt) AND NOT canceled(tt) //OR (countSucceededMachineriesMachineryPriceTransaction(tt) != countMachineriesGroupMachinery(groupMachineryMachineryPriceTransaction(tt)))
    FILTERGROUP stockFilter
        FILTER 'По складу' stock(tt) == s 'F11'      
    FILTERGROUP dateFilter
        FILTER 'На дату' date(tt) == dt 'F10'  
          
    OBJECTS bt = Barcode
    PROPERTIES(bt)    READONLY id
    PROPERTIES(tt, bt) READONLY name, price
    
    FILTERS in(tt, bt)
    
    OBJECTS et = MachineryPriceTransactionError LAST
    PROPERTIES(et)  READONLY data, date
    PROPERTIES(et)  PANEL  errorTrace
    FILTERS machineryPriceTransaction(et) == tt    
      
    OBJECTS mtt = Machinery GRID
    PROPERTIES(mtt) READONLY npp, shortDescription, description, port, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(tt, mtt) in
    FILTERS groupMachinery(mtt) == groupMachinery(tt) 
    PROPERTIES(mtt, tt) cleared SHOWIF snapshot(t),
                        succeeded, dateTimeSucceeded
    FILTERGROUP mttActive
        FILTER 'Активные' NOT inactive(mtt) DEFAULT 
//--
    OBJECTS bb = Barcode
    PROPERTIES(bb)    READONLY id, nameSku, idSku
    FILTERGROUP price
        FILTER 'Ранее загруженные' transactionPrice(bb,s) 'F8' DEFAULT

    OBJECTS mt = MachineryPriceTransaction
    PROPERTIES(mt) READONLY snapshot, nameGroupMachinery, date, 
                           time, description, dateTimeProcessing, 
                           succeeded, dateTimeSucceeded, canceled, 
                           quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(mt),
                           npps PANEL SHOWIF snapshot(mt)
    PROPERTIES(mt) READONLY createdNameUser, createdHostnameComputer
    
    PROPERTIES(mt, bb) READONLY name, price
    ORDER BY date(mt) DESC, time(mt) DESC
    FILTERS stock(mt) == s
    FILTERS in(mt, bb)          
;

@extendFormFilterAccessStock(MachineryPriceTransaction, tt, machineryPriceTransactions, stock, company);

DESIGN machineryPriceTransactions{
    pane {        
        type = TABBED ;
        NEW headerContainer{ 
            fill = 1;
            type = SPLITV;
            caption = 'Загрузка';
            MOVE BOX(t);
            MOVE specContainer {
                NEW machinery {
                    fill = 1;
                    caption = 'Оборудование';
                    MOVE BOX(m);
                } 
            }
        }
        NEW notSucceeded {
            fill = 1;
            caption = 'Незагруженные';
            type = SPLITV;
            NEW dttt {
                fill = 1;
                MOVE BOX(dt);
                MOVE BOX(tt);                       
            }
            NEW specContainer2{
                fill = 1;
                type = TABBED;
                MOVE BOX(bt);
                NEW errorContainer2 {
                    fill = 1;
                    caption = 'Сообщения об ошибках';
                    MOVE BOX(et);
                    MOVE PROPERTY(errorTrace(et)) {
                        fill = 1;
                        panelCaptionAbove = TRUE;
                    }
                }
                NEW machinery2 {
                    fill = 1;
                    caption = 'Оборудование';
                    MOVE BOX(mtt);
                } 
            }
        } 
        NEW barcodeContainer {
            fill = 1;
            caption = 'Загрузка по позиции';
            MOVE BOX(bb);
            MOVE BOX(mt);            
        }               
    }
}
// --------------- Атрибуты по умолчанию ------------------ //
@defineMachineryPriceTransactionAttribute(skuGroup, 'Группа товара', SkuGroup, canonicalName);

@defineMachineryPriceTransactionAttribute(split, 'Дробный товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(passScales, 'Передавать на весы', BOOLEAN);
@defineMachineryPriceTransactionAttribute(shortNameUOM, 'Единица измерения', VARSTRING[100]);
@defineMachineryPriceTransactionAttribute(idUOM, 'Код единицы измерения', VARSTRING[100]);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

expiryDays 'Срок годности в днях' = expiryDays(sku(Barcode barcode));
@defineMachineryPriceTransactionAttribute(expiryDays, 'Срок годности в днях', INTEGER);

dataMinPrice 'Минимальная цена' = ABSTRACT NUMERIC[16,4] (Barcode, Stock);

dataMinPrice 'Минимальная цена' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode);
dataMinPrice(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeStockAction(dataMinPrice, 'Минимальная цена', );
minPrice(MachineryPriceTransaction m, Barcode b) =  MIN dataMinPrice(m, b), price(m, b);