MODULE MachineryPriceTransaction;

REQUIRE Machinery;

NAMESPACE Machinery;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skipPriceTransactionDocument 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (PriceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL WHEN SET(isDraftPriceTransactionDocument(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Machinery.PriceTransactionDocument;
    Machinery.isDraftPriceTransactionDocument (document) += isDraft###concrete(document);
    Machinery.descriptionPriceTransactionDocument (document) += description###concrete(document);
END
//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT MachineryPriceTransaction 'Загрузка прайса в оборудование';
TABLE machineryPriceTransaction (MachineryPriceTransaction);

@defineCreated(MachineryPriceTransaction);

groupMachineryMachineryPriceTransaction (transaction) = ABSTRACT GroupMachinery (MachineryPriceTransaction);
nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));
nppGroupMachineryMachineryPriceTransaction 'Номер группы оборудования' (transaction) = nppGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

stockMachineryPriceTransaction (transaction) = stockGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

// Дата/время
dateMachineryPriceTransaction 'Дата' = DATA DATE (MachineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() WHEN SET(transaction IS MachineryPriceTransaction);

timeMachineryPriceTransaction 'Время' = DATA TIME (MachineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() WHEN SET(transaction IS MachineryPriceTransaction);

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = dateTimeToDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

orderMachineryPriceTransaction (transaction) = STRUCT(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

// Статус
snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (MachineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (MachineryPriceTransaction);
dateTimeSucceededMachineryPriceTransaction 'Время загрузки' = DATA DATETIME (MachineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (MachineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' (machineryPriceTransaction) =
    machineryPriceTransaction IS MachineryPriceTransaction AND NOT
    succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
    canceledMachineryPriceTransaction(machineryPriceTransaction);

// Основание
commentMachineryPriceTransaction 'Примечание' = DATA VARSTRING[30] (MachineryPriceTransaction);

priceTransactionDocumentMachineryPriceTransaction = DATA PriceTransactionDocument (MachineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) =
    OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document), commentMachineryPriceTransaction(document);

countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) IF NOT countProcessPriceTransactionDocument(document);

statusMachineryPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
                                                        CASE
                                                            WHEN skipPriceTransactionDocument(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument
                                                            WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS PriceTransactionDocument
                                                            WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS PriceTransactionDocument
                                                            ELSE 'Не загружен' IF document IS PriceTransactionDocument
                                                        ;

// Загруженные штрихкоды
TABLE machineryPriceTransactionBarcode (MachineryPriceTransaction, Barcode);

inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA VARSTRING[255] (MachineryPriceTransaction, Barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (MachineryPriceTransaction, Barcode);

orderMachineryPriceTransactionBarcode(transaction, barcode) = orderMachineryPriceTransaction(transaction)
                                                              IF inMachineryPriceTransactionBarcode(transaction, barcode)
                                                              AND NOT canceledMachineryPriceTransaction(transaction) PERSISTENT INDEXED;

// Текущие загруженные штрихкоды
TABLE barcodeGroupMachinery (Barcode, GroupMachinery);

lastOrderTransactionBarcodeGroupMachinery (barcode, groupMachinery) = GROUP MAX orderMachineryPriceTransactionBarcode(transaction, barcode)
                                                                            BY barcode, groupMachineryMachineryPriceTransaction(transaction);
lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = lastOrderTransactionBarcodeGroupMachinery(barcode, groupMachinery) [2] PERSISTENT;
prevLastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = PREV(lastTransactionBarcodeGroupMachinery (barcode, groupMachinery));

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
prevTransactionNameBarcodeGroupMachinery(barcode, groupMachinery) = PREV(transactionNameBarcodeGroupMachinery(barcode, groupMachinery));

transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode) PERSISTENT;
prevTransactionPriceBarcodeGroupMachinery (barcode, groupMachinery) = PREV(transactionPriceBarcodeGroupMachinery(barcode, groupMachinery));

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS MachineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (MachineryPriceTransactionError);

dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA VARSTRING[200] (MachineryPriceTransactionError) IN base;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (MachineryPriceTransactionError) IN base;
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (MachineryPriceTransactionError) IN base;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA MachineryPriceTransaction(MachineryPriceTransactionError) IN base;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN base;

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (MachineryPriceTransaction, Machinery);
inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Machinery);
nppsMachineryPriceTransaction 'Номера устройств' (transaction) =
    GROUP CONCAT STRING[3](nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ','
          BY transaction
          ORDER machinery MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;

// перезагрузка прайса целиком
selectedMachinery 'Вкл' = DATA SESSION BOOLEAN (Machinery);

GROUP snapshotMachineryPrice 'Перезагрузка прайса' : public;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = Stock FIXED PANEL
    PROPERTIES(s) READONLY sname = nameStock

    OBJECTS g = GroupMachinery
    PROPERTIES(g) READONLY nppGroupMachinery, nameGroupMachinery, nameStockGroupMachinery
    FILTERS stockGroupMachinery(g) == s

    OBJECTS m = Machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery

    FILTERS groupMachineryMachinery(m) == g
;

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = MachineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nppGroupMachineryMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, dateTimeSucceededMachineryPriceTransaction SHOWIF succeededMachineryPriceTransaction(t), 
                  canceledMachineryPriceTransaction

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY idBarcode
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode FORCE PANEL
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT MachineryPriceTransaction OBJECT t;
;

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES nameStock(s) SELECTOR
    FILTERS isCompanyStock(s)

    OBJECTS t = MachineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, 
                           timeMachineryPriceTransaction, descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, 
                           dateTimeSucceededMachineryPriceTransaction, canceledMachineryPriceTransaction, 
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY createdNameUserMachineryPriceTransaction, createdHostnameComputerMachineryPriceTransaction
    PROPERTIES(t)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS stockMachineryPriceTransaction(t) == s

    OBJECTS b = Barcode
    PROPERTIES(b)    idBarcode
    PROPERTIES(t, b) nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = MachineryPriceTransactionError
    PROPERTIES(e)    dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t
;
@extendFormFilterStockAccess(Stock, s, machineryPriceTransactions);

DESIGN machineryPriceTransactions FROM DEFAULT {
    NEW header {
        type = CONTAINERH;
        ADD s.box {
            PROPERTY(nameStock(s)) {
                alignment = STRETCH;
            }
        }
    }
    NEW pane {
        fill = 1;
        type = SPLITV;
        ADD t.box;
        NEW specContainer{
            fill = 1;
            type = TABBED;
            ADD b.box;
            NEW errorContainer {
                fill = 1;
                caption = 'Сообщения об ошибках';
                ADD e.box;
                PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                    fill = 1;
                    panelLabelAbove = TRUE;
                }
            }
        }
    }
    ADD functions.box;
}

// ------------------------------------------------ Действия по загрузке ------------------------------------ //

CLASS RequestExchangeType 'Тип запроса' {
    salesInfo 'Перегрузить продажи',
    checkZReport 'Сверить суммы z-отчётов'
}

FORM requestExchangeTypes
    OBJECTS r = RequestExchangeType
    PROPERTIES(r) READONLY staticCaption
    DIALOG RequestExchangeType OBJECT r
;

CLASS RequestExchange 'Запрос обмена данными';
TABLE requestExchange (RequestExchange);

stockRequestExchange 'Склад' = DATA Stock (RequestExchange) AUTOSET NOT NULL;
nameStockRequestExchange 'Склад' (requestExchange) = nameStock(stockRequestExchange(requestExchange));
dateFromRequestExchange 'Дата с' = DATA DATE (RequestExchange) NOT NULL;
dateToRequestExchange 'Дата по' = DATA DATE (RequestExchange) NOT NULL;
requestExchangeTypeRequestExchange 'Тип запроса' = DATA RequestExchangeType (RequestExchange) NOT NULL;
nameRequestExchangeTypeRequestExchange 'Тип запроса' (requestExchange) = staticName(requestExchangeTypeRequestExchange(requestExchange));
captionRequestExchangeTypeRequestExchange 'Тип запроса' (requestExchange) = staticCaption(requestExchangeTypeRequestExchange(requestExchange));
succeededRequestExchange 'Обработан' = DATA BOOLEAN (RequestExchange);
notSucceededRequestExchange 'Не обработан' (requestExchange) = requestExchange IS RequestExchange AND NOT succeededRequestExchange(requestExchange);

FORM requestExchange 'Запрос обмена данными'
    OBJECTS r = RequestExchange FIXED PANEL
    PROPERTIES(r) nameStockRequestExchange, dateFromRequestExchange, dateToRequestExchange, 
                  captionRequestExchangeTypeRequestExchange, succeededRequestExchange
    EDIT RequestExchange OBJECT r;
;

FORM requestExchanges 'Запросы обмена данными'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES nameStock(s) SELECTOR
    FILTERS isCompanyStock(s)
    
    OBJECTS r = RequestExchange
    PROPERTIES(r) READONLY nameStockRequestExchange, dateFromRequestExchange, dateToRequestExchange, 
                           captionRequestExchangeTypeRequestExchange, succeededRequestExchange
    PROPERTIES(r)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS stockRequestExchange(r) == s
;

createMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (GroupMachinery);

overInGroupMachinerySku = ABSTRACT BOOLEAN (GroupMachinery, Sku);
inGroupMachinerySku 'Вкл' (groupMachinery, sku) = groupMachinery IS GroupMachinery
                                                    AND sku IS Sku
                                                         AND NOT (filterSkuGroupMachinery(groupMachinery) AND NOT inGroupMachinerySkuGroup(groupMachinery, skuGroupSku(sku)))
                                                         AND NOT overInGroupMachinerySku(groupMachinery, sku);

// Перезагрузка целиком
snapshotAttributeMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (MachineryPriceTransaction, GroupMachinery);

snapshotGroupMachineryDepartmentStore 'Перезагрузить прайс' = ACTION (stock) NEWSESSION {
    FORM groupMachineryInput OBJECTS s = stock MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL groupMachinery = GroupMachinery ();
        groupMachinery() <- chosenObject('g');
        createMachineryPriceTransactionGroupMachinery(groupMachinery());
        FOR t == addedObject() DO {
            groupMachineryMachineryPriceTransaction(t) <- groupMachinery();
            commentMachineryPriceTransaction(t) <- 'Перезагрузка прайса целиком';
            snapshotMachineryPriceTransaction(t) <- TRUE;
            inMachineryPriceTransactionMachinery(t, machinery) <- selectedMachinery(machinery);
            inMachineryPriceTransactionBarcode(t, barcode) <- activeBarcode(barcode) AND
                                                                  prevLastTransactionBarcodeGroupMachinery(barcode, groupMachinery()) AND
                                                                  inGroupMachinerySku(groupMachinery(), skuBarcode(barcode)); // важно, что товар должен быть активным на текущий момент
            nameMachineryPriceTransactionBarcode(t, barcode) <- prevTransactionNameBarcodeGroupMachinery(barcode, groupMachinery());
            snapshotAttributeMachineryPriceTransactionGroupMachinery(t, groupMachinery());
            priceMachineryPriceTransactionBarcode(t, barcode) <- prevTransactionPriceBarcodeGroupMachinery(barcode, groupMachinery());
        }
        apply();
    }
} IN snapshotMachineryPrice;

// Инкрементная загрузка
GROUP incrementMachineryPrice 'Инкрементная загрузка' : public;

// ------------------------------- Определение цены, по которой загружать ------------------------------- //

priceBarcodeGroupMachinery 'Цена' (barcode, groupMachinery) = priceAPriceListTypeSkuStockDateTime(priceListTypeGroupMachinery(groupMachinery),
                                                                                                  skuBarcode(barcode),
                                                                                                  stockGroupMachinery(groupMachinery),
                                                                                                  currentDateTime());

createMachineryPriceTransactionSnapshot = DATA SESSION BOOLEAN ();

createMachineryPriceTransactionSku = DATA SESSION BOOLEAN (Sku);

createMachineryPriceTransactionDocument = DATA SESSION PriceTransactionDocument();
createMachineryPriceTransactionComment = DATA SESSION VARSTRING[20] ();

createAttributeMachineryPriceTransaction = ABSTRACT ACTION LIST (MachineryPriceTransaction);
createAttributeMachineryPriceTransactionStock = ABSTRACT ACTION LIST (MachineryPriceTransaction, Stock);
createAttributeMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (MachineryPriceTransaction, GroupMachinery);

createMachineryPriceTransaction 'Создать транзакцию' = ACTION (stock) {
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    ASSIGN message() <- TEXT('Принято к загрузке в оборудование : \n');

    FOR stockGroupMachinery(groupMachinery) == stock DO {
        LOCAL inBarcode = BOOLEAN (Barcode);

        ASSIGN inBarcode(barcode) <- createMachineryPriceTransactionSku(skuBarcode(barcode));

        // делаем разными запросами, чтобы было проще PostgreSQL
        ASSIGN inBarcode(barcode) <- activeBarcode(barcode) WHERE inBarcode(barcode); // если активный штрихкод

        ASSIGN inBarcode(barcode) <- inGroupMachinerySku(groupMachinery, skuBarcode(barcode)) WHERE inBarcode(barcode); // если на эту группу оборудования должна закачиваться

        ASSIGN inBarcode(barcode) <- TRUE IF priceBarcodeGroupMachinery(barcode, groupMachinery) WHERE inBarcode(barcode); // если есть цена

        IF NOT createMachineryPriceTransactionSnapshot() THEN
            ASSIGN inBarcode(barcode) <- TRUE IF NOT (priceBarcodeGroupMachinery(barcode, groupMachinery) == transactionPriceBarcodeGroupMachinery(barcode, groupMachinery)) WHERE inBarcode(barcode);

        LOCAL countBarcode = INTEGER();
        ASSIGN countBarcode() <- [= GROUP SUM 1 IF inBarcode(barcode)]();
        IF countBarcode() THEN {
            EXEC createMachineryPriceTransactionGroupMachinery(groupMachinery);
            FOR t == addedObject() DO {
                ASSIGN groupMachineryMachineryPriceTransaction(t) <- groupMachinery;
                ASSIGN priceTransactionDocumentMachineryPriceTransaction(t) <- createMachineryPriceTransactionDocument();
                ASSIGN commentMachineryPriceTransaction(t) <- createMachineryPriceTransactionComment();
                ASSIGN inMachineryPriceTransactionBarcode(t, barcode) <- inBarcode(barcode);
                EXEC createAttributeMachineryPriceTransaction(t);
                EXEC createAttributeMachineryPriceTransactionStock(t, stock);
                EXEC createAttributeMachineryPriceTransactionGroupMachinery(t, groupMachineryMachineryPriceTransaction(t));
                ASSIGN priceMachineryPriceTransactionBarcode(t, barcode) <- priceBarcodeGroupMachinery(barcode, groupMachinery) WHERE inMachineryPriceTransactionBarcode(t, barcode);
            }

            ASSIGN message() <- message() + nameGroupMachinery(groupMachinery) + ' - ' + countBarcode() + ' товаров.\n';
            ASSIGN sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE message()
    ELSE
        MESSAGE 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки' = ACTION (stock) NEWSESSION AUTOAPPLY {
    ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF currentBalanceSkuStock(sku, stock);
    ASSIGN createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    EXEC createMachineryPriceTransaction(stock);
} CONFIRM IN incrementMachineryPrice;

createPriceMachineryPriceTransaction 'Все товары' = ACTION (stock) NEWSESSION AUTOAPPLY {
    ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE;
    ASSIGN createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    EXEC createMachineryPriceTransaction(stock);
} CONFIRM IN incrementMachineryPrice;

EXTEND FORM machineryPriceTransactions
    PROPERTIES(s) createBalanceMachineryPriceTransaction, createPriceMachineryPriceTransaction, snapshotGroupMachineryDepartmentStore
;

EXTEND DESIGN machineryPriceTransactions {
    header {
        ADD s.incrementMachineryPrice;
        ADD s.snapshotMachineryPrice;
    }
}

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBase(object, caption, nameProp)
    prevTransaction###object##BarcodeGroupMachinery caption###' (тек.)' (barcode, groupMachinery)  =
        object##MachineryPriceTransactionBarcode(prevLastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);

    snapshotAttributeMachineryPriceTransactionGroupMachinery(t, groupMachinery) +=
        ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- prevTransaction###object##BarcodeGroupMachinery(barcode, groupMachinery);

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) nameProp###object##MachineryPriceTransactionBarcode;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY nameProp###object##MachineryPriceTransactionBarcode;
END

META defineMachineryPriceTransactionAttributeAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttributeMachineryPriceTransaction(t) += ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- object##Barcode(barcode)
                                                          WHERE inMachineryPriceTransactionBarcode(t, barcode);
END

META defineMachineryPriceTransactionAttribute(object, caption, type)
    object###MachineryPriceTransactionBarcode caption = DATA type (MachineryPriceTransaction, Barcode);
    @defineMachineryPriceTransactionAttributeAction(object, caption, );
END

META defineMachineryPriceTransactionAttribute(object, caption, type, nameProp)
    object###MachineryPriceTransactionBarcode = DATA type (MachineryPriceTransaction, Barcode);
    nameProp###object###MachineryPriceTransactionBarcode caption (transaction, barcode) =
        nameProp###object(object###MachineryPriceTransactionBarcode(transaction, barcode));
    @defineMachineryPriceTransactionAttributeAction(object, caption, nameProp);
END

META defineMachineryPriceTransactionAttributeStockAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttributeMachineryPriceTransactionStock(t, stock) += ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- object##BarcodeStock(barcode, stock)
                                                                      WHERE inMachineryPriceTransactionBarcode(t, barcode);
END
META defineMachineryPriceTransactionAttributeStock(object, caption, type)
    object###MachineryPriceTransactionBarcode caption = DATA type (MachineryPriceTransaction, Barcode);
    @defineMachineryPriceTransactionAttributeStockAction(object, caption, );
END

// --------------- Атрибуты по умолчанию ------------------ //
@defineMachineryPriceTransactionAttribute(skuGroup, 'Группа товара', SkuGroup, canonicalName);
@defineMachineryPriceTransactionAttribute(isWeight, 'Весовой товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(passScales, 'Передавать на весы', BOOLEAN);
@defineMachineryPriceTransactionAttribute(shortNameUOM, 'Единица измерения', VARSTRING[10]);
@defineMachineryPriceTransactionAttribute(idUOM, 'Код единицы измерения', VARSTRING[100]);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

// Подключение свойств к документу
META defineDocumentMachineryPriceTransaction (document, skuProp, stockProp)
    create###document##MachineryPriceTransaction 'Загрузить в оборудование' = ACTION (document) NEWSESSION AUTOAPPLY {
    
        IF isDraft###document(document) THEN {
            CONFIRM 'Данный документ не проведен, цены из него не будут учтены. Продолжить?';
        }
        IF (confirmed()) OR NOT isDraft###document(document) THEN {   
                ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF quantity###document##Detail###skuProp###document(sku, document);
                ASSIGN createMachineryPriceTransactionDocument() <- document;
                EXEC createMachineryPriceTransaction(stockProp###document(document));
                ASSIGN sentPriceTransactionDocument(document) <- TRUE WHERE isPosted###document(document);
            
        } 
    } TOOLBAR CONFIRM;

    createSnapshot###document##MachineryPriceTransaction 'Перегрузить все позиции' = ACTION (document) NEWSESSION AUTOAPPLY {
        IF isDraft###document(document) THEN {
            CONFIRM 'Данный документ не проведен, цены из него не будут учтены. Продолжить?';
        }
        IF (confirmed()) OR NOT isDraft###document(document) THEN {     
                ASSIGN createMachineryPriceTransactionSnapshot() <- TRUE;
                ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF count###document##Detail###skuProp###document(sku, document);
                ASSIGN createMachineryPriceTransactionDocument() <- document;
                EXEC createMachineryPriceTransaction(stockProp###document(document));
                ASSIGN sentPriceTransactionDocument(document) <- TRUE WHERE isPosted###document(document);
        }
    } CONFIRM;

    showCreateMachineryPriceTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT Machinery.skipPriceTransactionDocument(document)
                                                                                                           AND NOT sentPriceTransactionDocument(document);
    backgroundCreateMachineryPriceTransaction###document 'Цвет' (document) = IF countProcessPriceTransactionDocument(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction###document(document);
END

META extendFormDocumentMachineryPriceTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusMachineryPriceTransactionDocument BACKGROUND backgroundCreateMachineryPriceTransaction###document(object) READONLY AFTER afterProp###document(object),        
                           create###document###MachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransaction###document(object),
                           createSnapshot###document##MachineryPriceTransaction FORCE PANEL
    ;
    EXTEND DESIGN form {
        propContainer{
            NEW machinery {                 
                caption = 'Загрузки' ;
                type = CONTAINERV;    
                        
                ADD PROPERTY (create###document###MachineryPriceTransaction(object));
                ADD PROPERTY (createSnapshot###document##MachineryPriceTransaction(object));
            }
        }
    }
END

NAVIGATOR {
    machineryExport {
        ADD machineryPriceTransactions;
        ADD requestExchanges;
    }
}

//--

createPriceTransactionDocument 'Загрузить в оборудование' = ACTION ()  {
    IF selectSkuStockSession() THEN {
        FOR selectSkuSessionStock(stock) DO {
            ASSIGN createMachineryPriceTransactionSnapshot() <- NULL;
            ASSIGN createMachineryPriceTransactionSku(sku) <- NULL;        
        
            ASSIGN createMachineryPriceTransactionSnapshot() <- TRUE;
            ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF selectSkuStock(sku, stock);
            EXEC createMachineryPriceTransaction(stock);
        }
        apply();
        IF canceled() THEN {
            cancel();
        }
    }
} TOOLBAR ;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() createPriceTransactionDocument TODRAW sts
;
EXTEND DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW machineryContainer {
            caption = 'Загрузки';
            type = CONTAINERV;
            ADD PROPERTY (createPriceTransactionDocument());
        } 
    }
}
