MODULE CashRegister;

REQUIRE System, Machinery, Store, LegalEntity, StockDocument;

// Группы
CLASS GroupCashRegister 'Группы касс' : GroupMachinery;

departmentStore = DATA DepartmentStore (GroupCashRegister);
stock (GroupCashRegister groupMachinery) += departmentStore(groupMachinery);
idDepartmentStore(GroupCashRegister groupCashRegister) = id(departmentStore(groupCashRegister));

groupCashRegister (departmentStore) = GROUP MAX GroupCashRegister groupCashRegister BY departmentStore(groupCashRegister); 

TABLE groupCashRegisterCustomUser(GroupCashRegister, CustomUser);
operatorNumber 'Номер в группе касс' = DATA INTEGER (GroupCashRegister, CustomUser);

inactive 'Неактивный' = DATA BOOLEAN (GroupCashRegister);
active 'Активный' (GroupCashRegister group) = group IS GroupCashRegister AND NOT inactive(group);
inactive(GroupCashRegister g) += inactive(g);

pieceCode 'Код для штучных товаров' = DATA STRING[2] (GroupCashRegister) IN base;
weightCode 'Код для весовых товаров' = DATA STRING[2] (GroupCashRegister) IN base;

// Модели
CLASS CashRegisterModel 'Модель касс' : Model;

name 'Наименование' = DATA VARISTRING[110](CashRegisterModel);

name(CashRegisterModel model) += name(model) IF model IS CashRegisterModel;

dateTo 'Дата, до которой модель внесена в реестр' = DATA DATE (CashRegisterModel) IN base;

maxSum 'Максимальная сумма чека' = DATA NUMERIC[18,4] (CashRegisterModel) IN base;

ignoreCashRegisterServer 'Не работать с кассовым сервером' = DATA BOOLEAN (CashRegisterModel) IN base;

allUserSnapshot 'Разрешить загрузку целиком всем пользователям' = DATA BOOLEAN(CashRegisterModel);

showSection 'Показывать секции' = DATA BOOLEAN (CashRegisterModel);

FORM cashRegisterModel 'Модель касс'
    OBJECTS c=CashRegisterModel FIXED PANEL
    PROPERTIES(c) name, sid, note, handler, dateTo, maxSum, ignoreCashRegisterServer, allUserSnapshot, showSection
    EDIT CashRegisterModel OBJECT c
;

FORM cashRegistersModels 'Модели касс'
    OBJECTS c=CashRegisterModel
    PROPERTIES(c) READONLY name, sid, handler, note, maxSum, ignoreCashRegisterServer, allUserSnapshot, showSection
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE FORCE PANEL TOOLBAR
    LIST CashRegisterModel OBJECT c
;

NAVIGATOR {
    machineryNavigator {
        NEW cashRegisterNavigator 'Кассы'{
            ADD cashRegistersModels;
        }
    }
}

// Кассы
CLASS CashRegister 'Касса' : Machinery;
is (GroupCashRegister machinery) = machinery IS GroupCashRegister;

groupCashRegister = DATA GroupCashRegister (CashRegister) NOT NULL DELETE;
groupMachinery(CashRegister machinery) += groupCashRegister(machinery);

directory 'Директория обмена с кассами' = DATA VARSTRING[200] (GroupCashRegister) IN base;
directory (GroupCashRegister groupMachinery) += directory(groupMachinery);
dataDirectory 'Директория обмена с кассой' = DATA VARSTRING[200] (CashRegister);
dataDirectory (CashRegister machinery) += dataDirectory(machinery);

startDate 'Дата начала продаж' = DATA DATE (GroupCashRegister) IN base;
startDate 'Дата начала продаж' = startDate(groupCashRegister(CashRegister cashRegister));
startDateGroupCashRegister 'Дата начала продаж' = GROUP MIN startDate(GroupCashRegister c) BY departmentStore(c) PERSISTENT; 

notDetailed 'Не детализировать по чекам' = DATA BOOLEAN (GroupCashRegister) IN base; 
active 'Активный' (CashRegister cashRegister) = active(groupCashRegister(cashRegister));

departmentNumber 'Номер группы касс' = DATA INTEGER (GroupCashRegister) IN recognize;
overDepartmentNumberCashRegister 'Номер группы касс' (GroupMachinery gcr) = OVERRIDE npp(gcr), departmentNumber(gcr);
overDepartmentNumber 'Номер группы касс' (Machinery cr) = overDepartmentNumberCashRegister(groupMachinery(cr));
groupCashRegister (npp) = GROUP AGGR GroupCashRegister groupCashRegister BY npp(groupCashRegister) WHERE groupCashRegister IS GroupCashRegister;  
cashRegisterNppGroupCashRegister (g, npp) = GROUP AGGR CashRegister cashRegister BY npp(groupCashRegister(cashRegister)), npp(cashRegister);  
documentsClosedDate(GroupCashRegister gcr) = OVERRIDE documentsClosedDate(), documentsClosedDate(stock(gcr));

cashRegisterModel = DATA CashRegisterModel (GroupCashRegister);
model(GroupCashRegister groupMachinery) += cashRegisterModel(groupMachinery);

departmentStore (CashRegister cashRegister) = departmentStore(groupCashRegister(cashRegister));
nameDepartmentStore 'Склад' (CashRegister cashRegister) = name(departmentStore(cashRegister));

countCashRegister 'Кол-во касс' (departmentStore) = GROUP SUM 1 IF NOT inactive(CashRegister cashRegister) BY departmentStore(cashRegister);
    
countCashRegister 'Кол-во касс' (store) = GROUP SUM countCashRegister(DepartmentStore d) BY store(d);   
countDataCashRegister 'Кол-во магазинов' = DATA INTEGER (Store);
countChainStoresOver 'Кол-во касс' (Store store) = OVERRIDE countCashRegister(store), countDataCashRegister(store); 

registrationNumber 'Регистрационный номер кассы' = DATA VARSTRING[100] (CashRegister) IN base;

date 'Дата фискализации кассового аппарата' = DATA DATE (CashRegister) IN base;

ip 'IP кассы' = DATA VARSTRING[100] (CashRegister) IN base;
comPort 'Порт кассы' = DATA INTEGER (CashRegister) IN base;
baudRate 'Скорость кассы' = DATA INTEGER (CashRegister) IN base;
overBaudRate 'Скорость кассы' (CashRegister c) = OVERRIDE 9600 IF sidModel(groupCashRegister(c)) == 'VMK', baudRate(c);

disableSales 'Без реализации' = DATA BOOLEAN (CashRegister) IN base;
countSalesCashRegister 'Кол-во касс (с реализацией)' = GROUP SUM 1 IF NOT disableSales(CashRegister cashRegister) AND NOT inactive(cashRegister) BY departmentStore(cashRegister);

country 'Страна кассы' (CashRegister cashRegister) = country(stock(groupCashRegister(cashRegister)));

userLegalEntity (cashRegister) = DATA LegalEntity (CashRegister);
legalEntity (CashRegister cashRegister) =
    OVERRIDE legalEntity(departmentStore(cashRegister)), userLegalEntity(cashRegister);

nameLegalEntity 'Владелец кассы' (CashRegister cashRegister) = name(legalEntity(cashRegister));

computer = DATA Computer (CashRegister);
hostnameComputer 'Компьютер' (CashRegister cashRegister) = hostname(computer(cashRegister)) IN base;

cashRegister (computer) = GROUP AGGR CashRegister cashRegister BY computer(cashRegister) WHERE cashRegister IS CashRegister PERSISTENT;

currentCashRegister 'Текущая касса' = cashRegister(currentComputer());

departmentStoreCurrentCashRegister 'Подразделение' = departmentStore(currentCashRegister());
numberCurrentCashRegister 'Номер кассы' = npp(currentCashRegister());
sidModelCurrentCashRegister 'Код модели' = sidModel(groupMachinery(currentCashRegister()));
ipCurrentCashRegister 'IP кассы' = ip(currentCashRegister());
comPortCurrentCashRegister 'Порт кассы' = comPort(currentCashRegister());
baudRateCurrentCashRegister 'Скорость кассы' = overBaudRate(currentCashRegister());
nppMachineryCurrentCashRegister 'Номер кассового места' = npp(currentCashRegister());
operatorNumberCurrentCashRegister (CustomUser user) = operatorNumber(groupCashRegister(currentCashRegister()), user);
operatorNumberCurrentCashRegisterCurrentUser () = operatorNumberCurrentCashRegister (currentUser());
countryCurrentCashRegister 'Страна кассы' = country(currentCashRegister());
maxSumCurrentCashRegister 'Максимальная сумма чека' = maxSum(cashRegisterModel(groupCashRegister(currentCashRegister())));

ignoreDisplayText = ABSTRACT BOOLEAN (CashRegister);
ignoreDisplayTextCurrentCashRegister 'Страна кассы' = ignoreDisplayText(currentCashRegister());

ignoreCashRegisterServerCashRegisterModel(GroupCashRegister gcr) = ignoreCashRegisterServer(cashRegisterModel(gcr));
notIgnoreCashRegisterServerCashRegisterModel(GroupCashRegister gcr) = gcr IS GroupCashRegister AND NOT ignoreCashRegisterServerCashRegisterModel(gcr);
showSection(GroupCashRegister gcr) = showSection(model(gcr));

overChangeDirectory = ACTION ABSTRACT LIST (GroupCashRegister);
changeDirectory(GroupCashRegister group) = ACTION {     
    REQUEST VARSTRING[200] INPUT;
    directory(group) <- requestedString();
    overChangeDirectory(group);       
}

FORM cashRegister 'Касса'
    OBJECTS c=CashRegister FIXED PANEL
    PROPERTIES(c) nameGroupMachinery, npp, shortDescription, description, port, 
                  ip, comPort, overBaudRate, disableSales, dataDirectory, 
                  date, hostnameComputer
    EDIT CashRegister OBJECT c
;

FORM groupCashRegister 'Группа касс'
    OBJECTS grc=GroupCashRegister FIXED PANEL
    PROPERTIES(grc) npp, departmentNumber, nameStock, name,
                    pieceCode, weightCode,
                    filterSku, showFilterSku SHOWIF filterSku(grc),
                    namePriceListType, nameModel, 
                    directory SHOWIF notIgnoreCashRegisterServerCashRegisterModel(grc) ON CHANGE changeDirectory(grc),
                    startDate, notDetailed, inactive, section SHOWIF showSection(grc)

    OBJECTS c=CashRegister
    PROPERTIES(c)   nameGroupMachinery, npp, shortDescription, description, port SHOWIF ignoreCashRegisterServerCashRegisterModel(grc),
                    ip, comPort SHOWIF ignoreCashRegisterServerCashRegisterModel(grc), 
                    overBaudRate SHOWIF ignoreCashRegisterServerCashRegisterModel(grc),
                    disableSales,
                    dataDirectory SHOWIF ignoreCashRegisterServerCashRegisterModel(grc),
                    date, hostnameComputer, nameLegalEntity, NEW, DELETE

    OBJECTS cu=CustomUser
    PROPERTIES(cu) login, firstName, lastName, sidMainRole
    PROPERTIES(grc, cu) operatorNumber

    FILTERGROUP filters2
        FILTER 'Показывать только для данной группы' groupCashRegister(c) == grc 'F10' DEFAULT

    EDIT GroupCashRegister OBJECT grc
;

DESIGN groupCashRegister{
    NEW topContainer{
        type = COLUMNS;
        columns = 3;
            MOVE PROPERTY(npp(grc));
            MOVE PROPERTY(departmentNumber(grc));
            MOVE PROPERTY(nameStock(grc));
            MOVE PROPERTY(name(grc));
            MOVE PROPERTY(pieceCode(grc));
            MOVE PROPERTY(weightCode(grc));
            MOVE PROPERTY(filterSku(grc));
            MOVE PROPERTY(showFilterSku(grc));
            MOVE PROPERTY(namePriceListType(grc));
            MOVE PROPERTY(nameModel(grc));
            MOVE PROPERTY(directory(grc));
            MOVE PROPERTY(startDate(grc));
            MOVE PROPERTY(notDetailed(grc));
            MOVE PROPERTY(inactive(grc));
            MOVE PROPERTY(section(grc));
    }
    NEW tabContainer {
        type = TABBED;
        fill = 1;
        MOVE c.box;
    }    
    MOVE cu.box; 
    MOVE functions.box; 
}

overCopy = ACTION ABSTRACT LIST (GroupCashRegister, GroupCashRegister);
copy 'Копировать'(GroupCashRegister old) = ACTION NEWSESSION {
    FOR NEW new = GroupCashRegister DO {
        npp(new) <- npp(old);
        departmentNumber(new) <- departmentNumber(old);
        stock(new) <- stock(old);
        name(new) <- name(old);
        pieceCode(new) <- pieceCode(old);
        weightCode(new) <- weightCode(old);
        filterSku(new) <- filterSku(old);
        in(new, SkuGroup s) <- in(old, s);
        priceListType(new) <- priceListType(old);
        cashRegisterModel(new) <- cashRegisterModel(old);
        directory(new) <- directory(old);
        startDate(new) <- startDate(old);
        notDetailed(new) <- notDetailed(old);
        inactive(new) <- inactive(old);
        section(new) <- section(old);
        
        overCopy(old, new);
        
        CONFIRMX 'Копировать кассы?' DO {
            FOR old == groupCashRegister(CashRegister oldCash) NEW newCash = CashRegister DO {
                groupCashRegister(newCash) <- new;
                npp(newCash) <- npp(oldCash);
                shortDescription(newCash) <- shortDescription(oldCash);
                description(newCash) <- description(oldCash);
                port(newCash) <- port(oldCash);
                ip(newCash) <- ip(oldCash);
                comPort(newCash) <- comPort(oldCash);
                baudRate(newCash) <- baudRate(oldCash);
                disableSales(newCash) <- disableSales(oldCash);
                dataDirectory(newCash) <- dataDirectory(oldCash);
                date(newCash) <- date(oldCash);
                computer(newCash) <- computer(oldCash);
            }
        }
        
        SHOW groupCashRegister OBJECTS grc = new MANAGESESSION DOCKED NOCANCEL;
    }
} TOOLBAR;

FORM groupsCashRegister 'Группы касс'
    OBJECTS grc=GroupCashRegister, c=CashRegister
    PROPERTIES(grc)  READONLY active, npp, departmentNumber, nameStock, name,
                     filterSku, nameModel, directory,
                     startDate, notDetailed,  pieceCode, weightCode, section
    PROPERTIES(grc)  NEWSESSION NEW, EDIT, DELETE FORCE PANEL TOOLBAR, copy

    PROPERTIES(c) READONLY npp, shortDescription, description, port, ip, comPort, overBaudRate,
                           disableSales, dataDirectory, date, nameLegalEntity
    FILTERS groupCashRegister(c) == grc
    
    FILTERGROUP active1
        FILTER 'Активные' active(grc) 'F5' DEFAULT
;
@extendFormFilterAccessStock(GroupMachinery, grc, groupsCashRegister, stock, company);


DESIGN groupsCashRegister {
    NEW pane {
        fill = 1;
        type = SPLITV;

        MOVE grc.box;
        MOVE c.box;
    }
    MOVE functions.box;
}

NAVIGATOR {
    cashRegisterNavigator {
        ADD groupsCashRegister;
    }
}

EXTEND FORM departmentStore
    PROPERTIES(d) READONLY countCashRegister
;

DESIGN departmentStore{
    headerExtraParams{
        MOVE PROPERTY(countCashRegister(d));
    }
}
    
EXTEND FORM store
    PROPERTIES(s) countChainStoresOver
    PROPERTIES(d) READONLY countCashRegister BEFORE deleteD
;
    
DESIGN store{
    headerExtraParams{
        MOVE PROPERTY(countChainStoresOver(s));
    }    
}  

EXTEND FORM stores
    PROPERTIES(s) READONLY countChainStoresOver
;

// ------------------------------------------------ Стандартные значения ------------------------------------ //
cashRegisterSID (cashRegisterModel) = GROUP MAX CashRegisterModel scalesModel BY sid (scalesModel);

loadDefaultCashRegisterModel 'Добавить модель касс'(VARISTRING[110] iname, VARSTRING[20] isid, VARSTRING[200] ihandler, BOOLEAN iShowSection, BOOLEAN iIgnoreCashRegisterServer) = ACTION  {
    IF NOT cashRegisterSID(isid) THEN {
        FOR NEW crm = CashRegisterModel DO {
             name(crm) <- iname;
             sid(crm) <- isid;
             handler(crm) <- ihandler;
             showSection(crm) <- iShowSection;
             ignoreCashRegisterServer(crm) <- iIgnoreCashRegisterServer;
        }
    }
}

loadDefaultCashRegisterModels 'Загрузить стандартные модели касс'() = ACTION {
    EXEC loadDefaultCashRegisterModel('Кассы Atol', 'Atol', 'equ.clt.handler.atol.AtolHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы EasyCSV', 'EasyCSVC', 'equ.clt.handler.easy.EasyCSVHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы Kristal', 'Kristal', 'equ.clt.handler.kristal.KristalHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы Kristal 10', 'Kristal10', 'equ.clt.handler.kristal10.Kristal10Handler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы Maxishop', 'Maxishop', 'equ.clt.handler.maxishop.MaxishopHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы UKM4', 'Ukm4', 'equ.clt.handler.ukm4.UKM4Handler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы UKM4 MySQL', 'Ukm4-mysql', 'equ.clt.handler.ukm4mysql.UKM4MySQLHandler', TRUE, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы HTC', 'HTC', 'equ.clt.handler.htc.HTCHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассы BelCoopSoyuz', 'BelCoopSoyuz', 'equ.clt.handler.belcoopsoyuz.BelCoopSoyuzHandler', TRUE, NULL);
    EXEC loadDefaultCashRegisterModel('Кассовый сервер Astron', 'Astron', 'equ.clt.handler.astron.AstronHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Кассовый сервер EQS', 'EQS', 'equ.clt.handler.eqs.EQSHandler', NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Фискальный регистратор DateCS', 'DateCS', NULL, NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Фискальный регистратор VMK', 'VMK', NULL, NULL, TRUE);
    EXEC loadDefaultCashRegisterModel('Фискальный регистратор Casbi', 'Casbi', NULL, NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Фискальный регистратор Shtrih', 'Shtrih', NULL, NULL, NULL);
    EXEC loadDefaultCashRegisterModel('Фискальный регистратор Absolut', 'Absolut', NULL, NULL, TRUE);
} IN loadDefault;

@implementLoadDefaultData(loadDefaultCashRegisterModels);

// --------------------------------------- Генерация групп касс -------------------------------- //
loadDefaultGroup 'Сгенерировать группу касс'(PriceListType priceListType, Stock stock, CashRegisterModel model, INTEGER num) = ACTION {
    FOR NEW g = GroupCashRegister DO {
        departmentStore(g) <- stock;
        priceListType(g) <- priceListType;
        name(g) <- 'Группа касс по умолчанию';

        LOCAL numCashRegister = INTEGER();
        numCashRegister() <- 0;
        WHILE numCashRegister() < num DO {
            FOR NEW c = CashRegister DO {
                groupCashRegister(c) <- g;
                numCashRegister() <- numCashRegister() + 1;
                npp(c) <- numCashRegister();
                cashRegisterModel(g) <- model;
                description(c) <- CONCAT ' ', 'Касса', VARSTRING[255](numCashRegister()), '(', name(stock), ')';
            }
        }
    }
}

EXTEND FORM defaultData
    OBJECTS         crm=CashRegisterModel FIXED PANEL
    PROPERTIES(crm) SELECTOR name

    OBJECTS         cCashReg=INTEGER FIXED PANEL
    PROPERTIES(cCashReg)   intValueCashRegister = OBJVALUE
    PROPERTIES (pt, s, crm, cCashReg) loadDefaultGroup
;

DESIGN defaultData {
    PROPERTY(name(crm)) {
        caption = 'Модель касс';
    }
    PROPERTY(intValueCashRegister) {
        caption = 'Количество касс';
    }
    machinery {
        NEW cashRegister {
            caption = 'Кассы';
            MOVE PROPERTY(name(crm));
            MOVE PROPERTY(intValueCashRegister);
            MOVE PROPERTY(loadDefaultGroup(pt,s,crm,cCashReg));
        }
    }
}