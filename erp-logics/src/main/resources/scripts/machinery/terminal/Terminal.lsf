MODULE Terminal;

REQUIRE System, Machinery, Pricing;

// Группы
CLASS GroupTerminal 'Группы ТСД' : GroupMachinery;
TABLE groupTerminal (GroupTerminal);

stock = DATA Stock (GroupTerminal);
stock (GroupTerminal groupMachinery) += stock(groupMachinery);

inactive 'Неактивный' = DATA BOOLEAN (GroupTerminal);
active 'Активный' (GroupTerminal group) = group IS GroupTerminal AND NOT inactive(group);
inactive(GroupTerminal g) += inactive(g);

// Модели
CLASS TerminalModel 'Модель ТСД' : Model;
TABLE terminalModel (TerminalModel);

name 'Наименование' = DATA VARISTRING[110](TerminalModel);

name(TerminalModel model) += name(model) IF model IS TerminalModel;

FORM terminalModel 'Модель ТСД'
    OBJECTS t=TerminalModel PANEL
    PROPERTIES(t) name, note, handler, maxProduct
    EDIT TerminalModel OBJECT t
;

FORM terminalModels 'Модели ТСД'
    OBJECTS m=TerminalModel
    PROPERTIES(m) READONLY name, maxProduct, handler, note
    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE 
;

// Терминалы
CLASS Terminal 'ТСД' : Machinery;
TABLE terminal (Terminal);

groupTerminal = DATA GroupTerminal (Terminal) NONULL DELETE;
groupMachinery(Terminal machinery) += groupTerminal(machinery);

directory 'Директория обмена с ТСД' = DATA VARSTRING[100] (GroupTerminal) IN base;
directory (GroupTerminal groupMachinery) += directory(groupMachinery);
groupTerminalDirectory (npp) = GROUP MAX GroupTerminal groupTerminal BY directory(groupTerminal);

terminalModel = DATA TerminalModel (GroupTerminal);
model(GroupTerminal groupMachinery) += terminalModel(groupMachinery);

groupTerminal (npp) = GROUP AGGR GroupTerminal groupTerminal BY npp(groupTerminal) WHERE groupTerminal IS GroupTerminal;  

FORM terminal 'ТСД'
    OBJECTS t=Terminal PANEL
    PROPERTIES(t) nameGroupMachinery, npp, description, port
    EDIT Terminal OBJECT t
;

// ------------------------------------- Виды справочников ТСД --------------------------------- //

CLASS TerminalHandbookType 'Вид справочника ТСД';
TABLE terminalHandbookType(TerminalHandbookType);

@defineExternalizable(terminalHandbookType, VARSTRING[100]);

name 'Наименование' = DATA VARSTRING[100] (TerminalHandbookType);
propertyID 'Свойство ID' = DATA Property (TerminalHandbookType);
canonicalNamePropertyID 'Свойство ID' (t) = canonicalName(propertyID(t)) CHARWIDTH 30; 
propertyName 'Свойство наименование' = DATA Property (TerminalHandbookType);
canonicalNamePropertyName 'Свойство наименование' (t) = canonicalName(propertyName(t)) CHARWIDTH 30; 

useForExport 'Использовать для выгрузки' = DATA BOOLEAN (TerminalHandbookType);
skipPrefix 'Не выгружать префикс' = DATA BOOLEAN (TerminalHandbookType);
exportId(TerminalHandbookType t) = IF skipPrefix(t) THEN '' ELSE id(t);
terminalHandbookType() = GROUP MAX TerminalHandbookType t IF useForExport(t);
exportId() = exportId(terminalHandbookType());

FORM terminalHandbookType 'Вид справочника ТСД'
    OBJECTS t = TerminalHandbookType PANEL
    PROPERTIES(t) name, id, canonicalNamePropertyID, canonicalNamePropertyName, skipPrefix, useForExport
    EDIT TerminalHandbookType OBJECT t
;

FORM terminalHandbookTypes 'Виды справочников ТСД'
    OBJECTS t=TerminalHandbookType GRID
    PROPERTIES(t) READONLY name, id, canonicalNamePropertyID, canonicalNamePropertyName, skipPrefix, useForExport
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    LIST TerminalHandbookType OBJECT t
;

// ------------------------ Группы типов документов ------------------------- //
CLASS GroupTerminalDocumentType 'Группа типов документов';
TABLE groupTerminalDocumentType (GroupTerminalDocumentType);

name 'Наименование группы' = DATA VARSTRING[200] (GroupTerminalDocumentType) IN base CHARWIDTH 10;
groupTerminalDocumentType 'Группа типов документов' = DATA GroupTerminalDocumentType (GroupTerminal);
nameGroupTerminalDocumentType 'Группа типов документов' (GroupTerminal groupTerminal) = name(groupTerminalDocumentType(groupTerminal));
skip 'Не передавать в онлайн-режиме' = DATA BOOLEAN (GroupTerminalDocumentType) IN base;
//---------------------------- типы документов ----------------------------------------//

CLASS TerminalDocumentType 'Тип документов';
TABLE terminalDocumentType (TerminalDocumentType);

groupTerminalDocumentType 'Группа типов документов' = DATA GroupTerminalDocumentType (TerminalDocumentType) NONULL DELETE;
nameGroupTerminalDocumentType 'Группа типов документов' (TerminalDocumentType terminalDocumentType) = name(groupTerminalDocumentType(terminalDocumentType));
notSkip (TerminalDocumentType terminalDocumentType) = NOT skip(groupTerminalDocumentType(terminalDocumentType));

name 'Название' = DATA VARSTRING[200] (TerminalDocumentType) IN base;
flag 'Флаг' = DATA INTEGER (TerminalDocumentType) IN base;

@defineExternalizable(terminalDocumentType, VARSTRING[100]);

terminalHandbookType1 = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType1 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType1(terminalDocumentType));
nameTerminalHandbookType1 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType1(terminalDocumentType));

nameInHandbook1 'Наименование в справочнике 1' = DATA VARSTRING[200] (TerminalDocumentType) IN base;
nameInHandbook1(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType1(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType1(terminalDocumentType));

terminalHandbookType2 = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType2 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType2(terminalDocumentType));
nameTerminalHandbookType2 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType2(terminalDocumentType));

nameInHandbook2 'Наименование в справочнике 2' = DATA VARSTRING[200] (TerminalDocumentType) IN base;
nameInHandbook2(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType2(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType2(terminalDocumentType));

FORM terminalDocumentTypes
    OBJECTS t = TerminalDocumentType
    PROPERTIES(t) READONLY id, name 
    
    LIST TerminalDocumentType OBJECT t
;

FORM groupTerminalDocumentType 'Группа типов документов'
    OBJECTS gtdt=GroupTerminalDocumentType PANEL
    PROPERTIES(gtdt) name, skip

    OBJECTS tdt=TerminalDocumentType
    PROPERTIES(tdt)   id, name, flag,
                      idTerminalHandbookType1, nameInHandbook1,
                      idTerminalHandbookType2, nameInHandbook2,
                      NEW, DELETE GRID

    FILTERS groupTerminalDocumentType(tdt) == gtdt

    EDIT GroupTerminalDocumentType OBJECT gtdt
;

FORM groupTerminalDocumentTypes 'Группы типов документов'
    OBJECTS gtdt=GroupTerminalDocumentType
    PROPERTIES(gtdt) READONLY name , skip
    PROPERTIES(gtdt) NEWSESSION NEW, EDIT, DELETE 

    OBJECTS tdt=TerminalDocumentType
    PROPERTIES(tdt) READONLY id, name, flag,
                             idTerminalHandbookType1, nameInHandbook1,
                             idTerminalHandbookType2, nameInHandbook2

    FILTERS groupTerminalDocumentType (tdt) == gtdt
    
    LIST GroupTerminalDocumentType OBJECT gtdt
;

DESIGN groupTerminalDocumentTypes {
    NEW topContainer{
        type = SPLITV;
        fill = 1;

        MOVE BOX(gtdt);
        MOVE BOX(tdt);
    }
    MOVE TOOLBARBOX;
}

FORM groupTerminal 'Группа ТСД'
    OBJECTS grt=GroupTerminal PANEL
    PROPERTIES(grt) npp, nameStock, name,
                    nameGroupTerminalDocumentType, nameModel,
                    filterSku, showFilterSku SHOWIF filterSku(grt),
                    namePriceListType, directory, inactive

    OBJECTS t=Terminal
    PROPERTIES(t)   nameGroupMachinery, npp, description, port, NEW, DELETE GRID

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' groupTerminal(t) == grt 'F10' DEFAULT

    EDIT GroupTerminal OBJECT grt
;

FORM groupsTerminal 'Группы ТСД'
    OBJECTS grt=GroupTerminal, t=Terminal
    PROPERTIES(grt)  READONLY active, npp, nameStock, name,
                     nameGroupTerminalDocumentType, nameModel,
                     filterSku, showFilterSku SHOWIF filterSku(grt) GRID,
                     namePriceListType, directory

    PROPERTIES(grt)  NEWSESSION NEW, EDIT, DELETE 

    PROPERTIES(t) READONLY npp, description, port
    FILTERS groupTerminal(t) == grt
    
    FILTERGROUP active1
        FILTER 'Активные' active(grt) 'F5' DEFAULT       
;

DESIGN groupsTerminal {
    NEW topContainer{
        type = SPLITV;
        fill = 1;

        MOVE BOX(grt);
        MOVE BOX(t);
    }
    MOVE TOOLBARBOX;
}

// ------------------------------------ Документы ТСД ------------------------------- //

CLASS TerminalDocument 'Документ ТСД';
TABLE terminalDocument (TerminalDocument);

TABLE terminalDocumentId(VARISTRING[1000]);

id 'Код' = DATA VARSTRING[1000] (TerminalDocument) IN recognize INDEXED CHARWIDTH 10;
terminalDocument (id) = GROUP AGGR (TerminalDocument td) BY id (td) MATERIALIZED TABLE terminalDocumentId;

title 'Имя' = DATA VARSTRING[100] (TerminalDocument) IN base CHARWIDTH 20;
comment 'Комментарий' = DATA VARSTRING[100] (TerminalDocument) IN base CHARWIDTH 20;
quantity 'Количество' = DATA NUMERIC[14,3] (TerminalDocument) IN base;
idTerminalHandbookType1 'Код в справочнике 1' = DATA VARSTRING[100] (TerminalDocument) IN base;
idTerminalHandbookType2 'Код в справочнике 2' = DATA VARSTRING[100] (TerminalDocument) IN base;

terminalDocumentType = DATA TerminalDocumentType (TerminalDocument);
nameTerminalDocumentType 'Тип документа' (TerminalDocument terminalDocument) = name (terminalDocumentType (terminalDocument)) CHARWIDTH 20;

groupTerminal = DATA GroupTerminal (TerminalDocument);
nameGroupTerminal 'Группа ТСД' (TerminalDocument terminalDocument) = name(groupTerminal(terminalDocument));

idTerminalDocumentType (TerminalDocument terminalDocument) = id (terminalDocumentType (terminalDocument));

used 'Использован' (terminalDocument) = DATA BOOLEAN (TerminalDocument) IN base;
notUsed 'Неиспользован' (TerminalDocument terminalDocument) = terminalDocument IS TerminalDocument AND NOT used(terminalDocument);

createdUser = DATA CustomUser (TerminalDocument);
createdNameUser 'Создан пользователем' (TerminalDocument td) = name[Contact](createdUser(td)) CHARWIDTH 10 IN created;
createdUser (TerminalDocument o) <- currentUser() WHEN SET(o IS TerminalDocument);

dataStock = DATA Stock (TerminalDocument);
stock (TerminalDocument document) = OVERRIDE dataStock(document), stock(groupTerminal(document));
nameStock 'Склад' (TerminalDocument document) = name(stock (document)) IN documentHeader;
dataStock(TerminalDocument d) <- stock(createdUser(d)) WHEN SET (createdUser(d));

createdTime 'Время создания'= DATA DATETIME (TerminalDocument) IN created;
createdTime (TerminalDocument o) <- currentDateTime() WHEN SET(o IS TerminalDocument);

terminalDocument = DATA TerminalDocument(TerminalDocumentDetail) NONULL DELETE INDEXED;

@defineDocumentTimePrefix(terminalDocument, , ' документа');
@deriveDocumentHeaderTimePrefix(TerminalDocument, );

CLASS TerminalDocumentDetail 'Строка документа ТСД';
TABLE terminalDocumentDetail (TerminalDocumentDetail);
TABLE sessionTerminalDocumentDetail (Session, TerminalDocumentDetail);

id 'Код' = DATA VARSTRING[1000] (TerminalDocumentDetail) IN recognize INDEXED CHARWIDTH 10;

number 'Номер' = DATA INTEGER (TerminalDocumentDetail) IN base;
index 'Номер строки ' (TerminalDocumentDetail d) =
    PARTITION SUM 1 BY terminalDocument(d)
    ORDER number(d), d CHARWIDTH 4;
barcode 'Штрихкод' = DATA VARSTRING[15] (TerminalDocumentDetail) IN base;
quantity 'Количество' = DATA NUMERIC[14,3] (TerminalDocumentDetail) IN base;
price 'Цена' = DATA NUMERIC[16,4] (TerminalDocumentDetail) IN base;
sum 'Сумма' = DATA NUMERIC[18,4] (TerminalDocumentDetail) IN base;
sum(TerminalDocumentDetail d) <- round2(quantity(d) * price(d)) WHEN CHANGED(quantity(d)) OR CHANGED(price(d)); 

comment 'Комментарий' = DATA VARSTRING[100] (TerminalDocumentDetail) IN base;
dateTimeScan 'Время сканирования' = DATA DATETIME (TerminalDocumentDetail) IN base;

extraDate1 'Дата 1' = DATA DATE (TerminalDocumentDetail) IN base;
extraDate2 'Дата 2' = DATA DATE (TerminalDocumentDetail) IN base;
extraField1 'Поле 1' = DATA VARSTRING[100] (TerminalDocumentDetail) IN base;
extraField2 'Поле 2' = DATA VARSTRING[100] (TerminalDocumentDetail) IN base;
extraField3 'Поле 3' = DATA VARSTRING[100] (TerminalDocumentDetail) IN base;

stock 'Склад' (TerminalDocumentDetail detail) = stock(terminalDocument(detail)) MATERIALIZED INDEXED;  

sku = DATA Sku (TerminalDocumentDetail) INDEXED;
nameSku 'Наименование' (TerminalDocumentDetail d) = name(sku(d));
dataName 'Наименование' = DATA VARSTRING[200] (TerminalDocumentDetail);
name 'Наименование' (TerminalDocumentDetail d) = OVERRIDE dataName(d), nameSku(d) IN base;

WHEN LOCAL SETCHANGED(barcode(TerminalDocumentDetail d)) DO {
    sku(d) <- OVERRIDE skuBarcode(barcode(d)), sku(barcode(d));
}

migratedSku = DATA BOOLEAN ();
onStarted () += {
    IF NOT migratedSku() THEN {
        migratedSku() <- TRUE;
        setNoCancelInTransaction();
        sku(TerminalDocumentDetail d) <- OVERRIDE sku(barcode(barcode(d), (OVERRIDE date(d), currentDate()))), sku(barcode(d));
        apply();
        dropNoCancelInTransaction();
    }
}

terminalIdTerminalId (documentDetail, document) = GROUP AGGR TerminalDocumentDetail terminalDocumentDetail 
    BY id (terminalDocument(terminalDocumentDetail)), id(terminalDocumentDetail);    

description 'Название документа' (TerminalDocument o) =
    'Документ ТСД' + ' № ' + id(o) + ' от ' + date(o) CHARWIDTH 30;
    
@defineDocumentIs(TerminalDocument, TerminalDocumentDetail);
@defineDocumentHeaderClosed(TerminalDocument);

@defineDocumentHeaderCount(terminalDocument);
@defineDocumentHeaderQuantity(terminalDocument);
@defineDocumentHeaderSum(terminalDocument);
// ----------------------------------------------- Формы документов ------------------------------------------ //

FORM terminalDocument 'Документ ТСД'
    OBJECTS td=TerminalDocument PANEL
    PROPERTIES(td)  id, nameGroupTerminal, nameStock, date, time,
                    nameTerminalDocumentType, idTerminalHandbookType1,
                    idTerminalHandbookType2, title, comment, quantity,  
                    used READONLY, createdNameUser

    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) number, barcode, name, quantity, price, sum, comment, dateTimeScan, extraDate1, extraDate2, extraField1, extraField2, extraField3, 
                    NEW, deletetdd=DELETE GRID

    FILTERS terminalDocument(tdd) == td

    EDIT TerminalDocument OBJECT td;
;

DESIGN terminalDocument {
    BOX(td){
        type = CONTAINERV;

        NEW row1 {
            type = CONTAINERH;
            MOVE PROPERTY(id(td));
            MOVE PROPERTY(nameGroupTerminal(td));
            MOVE PROPERTY(nameTerminalDocumentType(td));
            MOVE PROPERTY(title(td));
            MOVE PROPERTY(comment(td));
            MOVE PROPERTY(createdNameUser(td));
        }
        NEW row2 {
            type = CONTAINERH;
            MOVE PROPERTY(idTerminalHandbookType1(td));
            MOVE PROPERTY(idTerminalHandbookType2(td));
            MOVE PROPERTY(quantity(td));
            MOVE PROPERTY(used(td));
        }
    }
    MOVE BOX(tdd);
    MOVE TOOLBARBOX;
}

FORM terminalDocumentPrint 'Документ ТСД'
    OBJECTS td=TerminalDocument PANEL 
    PROPERTIES(td)  READONLY id, date, time, nameGroupTerminal, 
                    nameTerminalDocumentType, idTerminalHandbookType1, idTerminalHandbookType2,
                    title, comment, quantity, countTerminalDocumentDetail, 
                    quantityTerminalDocumentDetail, sumTerminalDocumentDetail, createdNameUser , createdTime 

    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY number, barcode, name, price, quantity, sum, dateTimeScan
    ORDER number(tdd)

    FILTERS terminalDocument(tdd) == td
;
terminalDocumentPrint 'Печать документа ТСД' (TerminalDocument td) = { PRINT terminalDocumentPrint OBJECTS td = td; }  IMAGE 'print.png' IN print;

in = DATA LOCAL BOOLEAN (TerminalDocumentType);
filterStock = DATA LOCAL Stock ();
include 'Отм.' = DATA LOCAL BOOLEAN (TerminalDocument);

FORM terminalDocuments 'Документы ТСД' AUTOREFRESH 60
    OBJECTS td=TerminalDocument
    PROPERTIES(td)  include
    PROPERTIES(td)  READONLY id, date, time, nameGroupTerminal, nameStock,
                    nameTerminalDocumentType, idTerminalHandbookType1, idTerminalHandbookType2,
                    title, comment, quantity, countTerminalDocumentDetail, 
                    quantityTerminalDocumentDetail, createdNameUser PANEL, createdTime PANEL
    PROPERTIES(td)  NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES (td) close SHOWIF isOpened(td), open SHOWIF isClosed(td)
    FILTERS in(terminalDocumentType(td)) OR (td IS TerminalDocument AND NOT [=GROUP SUM 1 IF in(TerminalDocumentType t)]()),
            stock(td) == filterStock() OR (td IS TerminalDocument AND NOT filterStock())
    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY id, number, barcode, name, price, quantity, sum, comment, dateTimeScan, extraDate1, extraDate2, extraField1, extraField2, extraField3

    FILTERS terminalDocument(tdd) == td
    FILTERGROUP filterUse
        FILTER 'Неиспользованные' notUsed(td) 'F10' DEFAULT
        
    FILTERGROUP open FILTER 'Открыт' isOpened(td) 'F6' DEFAULT
    PROPERTIES terminalDocumentPrint(td)  
;

@extendFormFilterAccessStock(TerminalDocument, td, terminalDocuments, stock, company);


DESIGN terminalDocuments {
    BOX {
        size = (1024, 768);
        NEW topContainer{
            type = SPLITV;
            fill = 1;

            MOVE BOX(td);
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(tdd) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;
                    MOVE GROUP(created,td);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                        MOVE GROUP(print,td);
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

//----------------------------- Макросы для документов --------------------------------//

//META defineAddDetailDialogTerminal (object, skuProp, stockProp)
//    @defineAddDetailDialogTerminalInner (object, ###object, skuProp, stockProp);
//END
//
//META defineAddDetailDialogTerminalInner (object, class, skuProp, stockProp)
//    in = ABSTRACT BOOLEAN (TerminalDocumentType, class);
//    overAddDialogTerminal##class = ABSTRACT (class, TerminalDocument);
//    overAddDetailDialogTerminal##class##Detail = ABSTRACT (class##Detail, TerminalDocumentDetail);
//    
//    addDetailDialogTerminal##class##Detail 'Импорт из ТСД' (class object) = {
//        in(TerminalDocumentType t) <- in(t, object);
//        filterStock() <- stockProp(object);
//        
//        DIALOG terminalDocuments OBJECTS td INPUT DO {
//            used(td) <- TRUE ;
//            overAddDialogTerminal##class(object, td);
//
//            FOR terminalDocument(TerminalDocumentDetail tdd) == td ORDER number(tdd) NEW o = class##Detail DO {
//                object(o) <- object;
//                skuProp(o) <- sku(tdd);
//                quantity(o) <- quantity(tdd);
//                overAddDetailDialogTerminal##class##Detail(o, tdd);
//            }
//        }
//    } TOOLBAR;
//END

META defineAddDetailDialogTerminal (object, skuProp, stockProp)
    @defineAddDetailDialogTerminalInner (object, ###object, skuProp, stockProp);
END

META defineAddDetailDialogTerminalInner (object, class, skuProp, stockProp)
    in = ABSTRACT BOOLEAN (TerminalDocumentType, class);
    overAddDialogTerminal##class = ABSTRACT (class, TerminalDocument);
    overAddDetailDialogTerminal##class##Detail = ABSTRACT (class##Detail, TerminalDocumentDetail);

    addDetailDialogTerminal##class##Detail 'Импорт из ТСД' (class object) = {
        IF isPosted(object) THEN {
            MESSAGE 'Вы пытаетесь импортировать в проведенный документ. Распроведите его.';
        } ELSE {
            in(TerminalDocumentType t) <- in(t, object);
            filterStock() <- stockProp(object);
            DIALOG terminalDocuments OBJECTS td INPUT DO {
                IF NOT [=GROUP SUM 1 IF include(TerminalDocument td)]() THEN {
                    include(td) <- TRUE;
                }
                used(TerminalDocument t) <- TRUE WHERE include(t);
                overAddDialogTerminal##class(object, td);
                
                IF explicitBatchLedger(stockProp(object)) THEN {      
                    LOCAL quantity = NUMERIC[16,5] (Sku);
                    quantity(Sku sku) <- [=GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY sku(tdd)](sku);   
                    FOR [=GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY sku(tdd)](Sku sku) DO {
                        FOR explicitBatchLedger(stockProp(object)) AND quantity(sku(Batch b)) AND sku(b) == sku AND 
                            prevAvailableQuantity(b, stockProp(object)) (-) [=GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object) > 0.0 
                            ORDER dateTime(b) NEW o = class##Detail DO {
                            object(o) <- object;
                            sku(o) <- sku;
                            quantity(o) <- IF quantity(sku(b)) > (prevAvailableQuantity(b, stockProp(object)) (-) [=GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object))
                                THEN prevAvailableQuantity(b, stockProp(object)) (-) [=GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object)
                                ELSE quantity(sku(b));
                            IF NOT skipFillBatch(o) THEN {
                                batch(o) <- b;
                            }                             
                            quantity(sku) <- quantity(sku) (-) quantity(o);
                            IF sku IS Sku AND NOT quantity(sku)
                                THEN BREAK;
                        } 
                        FOR quantity(sku) NEW o = class##Detail DO {
                            object(o) <- object;
                            sku(o) <- sku; 
                            quantity(o) <- quantity(sku);   
                            quantity(sku) <- quantity(sku) (-) quantity(o); 
                            IF sku IS Sku AND NOT quantity(sku)
                                THEN BREAK;                                                                         
                        }                           
                    } 
                }    
                ELSE {   
                    FOR terminalDocument(TerminalDocumentDetail tdd) == td ORDER number(tdd) NEW o = class##Detail DO {
                        object(o) <- object;
                        skuProp(o) <- sku(tdd);
                        quantity(o) <- quantity(tdd);
                        overAddDetailDialogTerminal##class##Detail(o, tdd);
                    }                    
                }
                include(TerminalDocument t) <- NULL;
            }
        }   
    } TOOLBAR;        
END

// ------------------------------------------------ Стандартные значения ------------------------------------ //

// Модели терминалов сбора данных
loadDefaultTerminalModel 'Добавить модель терминала'(VARSTRING[20] stringOne, VARISTRING[110] stringTwo, VARSTRING[200] stringThree) = {
    NEW tm = TerminalModel {
         sid(tm) <- stringOne;   
         name(tm) <- stringTwo;
         handler(tm) <- stringThree;
    }
}

loadDefaultTerminalModels 'Загрузить стандартные модели ТСД'() = {
    EXEC loadDefaultTerminalModel('inventory', 'ТСД InventoryTech', 'equ.clt.handler.inventoryTech.InventoryTechHandler');
    EXEC loadDefaultTerminalModel('EasyCSVT', 'ТСД EasyCSV', 'equ.clt.handler.easy.EasyCSVHandler');
    EXEC loadDefaultTerminalModel('lsterminal', 'ТСД LSTerminal', 'equ.clt.handler.lsterminal.LSTerminalHandler');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalModels);

// Виды справочников терминалов сбора данных
loadDefaultTerminalHandbookType 'Добавить вид справочника ТСД'(VARSTRING[100] n, VARSTRING[100] s) = {
    NEW t = TerminalHandbookType {
        name(t) <- n;
        id(t) <- s;
    }
}

loadDefaultTerminalHandbookTypes 'Загрузить стандартные виды справочников ТСД'() = {
    loadDefaultTerminalHandbookType('Организация', 'ПС');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalHandbookTypes);

// Типы документов терминалов сбора данных
loadDefault 'Добавить тип документа ТСД'(VARSTRING[200] nameString, GroupTerminalDocumentType gtdt, VARSTRING[100] idTypeString, INTEGER flagInteger, VARSTRING[100] handbook1String, VARSTRING[100] handbook2String) = {
    NEW tdt = TerminalDocumentType {
        name(tdt) <- nameString;
        groupTerminalDocumentType(tdt) <- gtdt;
        terminalHandbookType1(tdt) <- terminalHandbookType(handbook1String);
        terminalHandbookType2(tdt) <- terminalHandbookType(handbook2String);
        id(tdt) <- idTypeString;
        flag(tdt) <-flagInteger;
    }
}

loadDefaultTerminalDocumentTypes 'Загрузить стандартные типы документов ТСД'() = {
    NEW gtdt = GroupTerminalDocumentType {
        name(gtdt) <- 'Группа типов документов';
        EXEC loadDefault('Инвентаризация', gtdt, '01', 31, ' ', ' ');
        EXEC loadDefault('Приход', gtdt, '02', 31, '01', ' ');
        EXEC loadDefault('Отгрузка по безналичному расчёту', gtdt, '03', 31, '01', ' ');
    }
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalDocumentTypes);

// ------------------------------------------ Генерация групп терминалов сбора данных ------------------------------ //
loadDefault 'Сгенерировать группу терминалов'(Stock stock, TerminalModel model, GroupTerminalDocumentType gtdt, INTEGER num) = {
    NEW g = GroupTerminal {
        stock(g) <- stock;
        name(g) <- 'Группа ТСД по умолчанию';
        groupTerminalDocumentType(g) <- gtdt;

        LOCAL numTerminal = INTEGER();
        numTerminal() <- 0;
        WHILE numTerminal() < num DO {
            NEW t = Terminal {
                groupTerminal(t) <- g;
                numTerminal() <- numTerminal() + 1;
                npp(t) <- numTerminal();
                terminalModel(g) <- model;
            }
        }
    }
}

EXTEND FORM defaultData
    OBJECTS         tm=TerminalModel PANEL
    PROPERTIES(tm)  SELECTOR name

    OBJECTS         gtdt=GroupTerminalDocumentType PANEL
    PROPERTIES(gtdt) SELECTOR name

    OBJECTS         cTerminal=INTEGER PANEL
    PROPERTIES(cTerminal)   intValueTerminal = VALUE
    PROPERTIES (s, tm, gtdt, cTerminal)  loadDefault
;

DESIGN defaultData {
    PROPERTY(name(tm)) {
        caption = 'Модель ТСД';
    }
    PROPERTY(name(gtdt)) {
        caption = 'Группа типов документов';
    }
    PROPERTY(intValueTerminal) {
        caption = 'Количество ТСД';
    }
    machinery {
        NEW terminal {
            caption = 'ТСД';
            MOVE PROPERTY(name(tm));
            MOVE PROPERTY(name(gtdt));
            MOVE PROPERTY(intValueTerminal);
            MOVE PROPERTY(loadDefault(s,tm,gtdt,cTerminal));
        }
    }
}

NAVIGATOR {
    machineryNavigator {
        NEW FOLDER terminalNavigator 'Терминалы сбора данных' {
            NEW terminalDocuments;
            NEW groupsTerminal;
            NEW terminalModels;
            NEW groupTerminalDocumentTypes;
            NEW terminalHandbookTypes;
        }
    }
}

countDaysClearTerminalDocument 'За сколько дней хранить документы ТСД' = DATA INTEGER (); 

skipDelete = ABSTRACT BOOLEAN (TerminalDocument);

EXTEND FORM options PROPERTIES countDaysClearTerminalDocument();
DESIGN options { log { MOVE PROPERTY(countDaysClearTerminalDocument());} }    
        
clearApplicationLog () += {
	NEWSESSION {
	    IF countDaysClearTerminalDocument() THEN {
	        DELETE TerminalDocument d WHERE d IS TerminalDocument AND date(d) <= subtract(currentDate(), countDaysClearTerminalDocument()) AND NOT skipDelete(d);
	        apply();
	    }
	}
}