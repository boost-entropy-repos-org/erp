MODULE Terminal;

REQUIRE System, Machinery, Pricing;

// Группы
CLASS GroupTerminal 'Группы ТСД' : GroupMachinery;
TABLE groupTerminal (GroupTerminal);

stock = DATA Stock (GroupTerminal);
stock (GroupTerminal groupMachinery) += stock(groupMachinery);

inactive 'Неактивный' = DATA BOOLEAN (GroupTerminal);
active 'Активный' (GroupTerminal group) = group IS GroupTerminal AND NOT inactive(group);
inactive(GroupTerminal g) += inactive(g);

// Модели
CLASS TerminalModel 'Модель ТСД' : Model;
TABLE terminalModel (TerminalModel);

name 'Наименование' = DATA VARISTRING[110](TerminalModel);

name(TerminalModel model) += name(model) IF model IS TerminalModel;

FORM terminalModel 'Модель ТСД'
    OBJECTS t=TerminalModel PANEL
    PROPERTIES(t) name, note, handler, maxProduct
    EDIT TerminalModel OBJECT t
;

FORM terminalModels 'Модели ТСД'
    OBJECTS m=TerminalModel
    PROPERTIES(m) READONLY name, maxProduct, handler, note
    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE 
;

// Терминалы
CLASS Terminal 'ТСД' : Machinery;
TABLE terminal (Terminal);

is (Terminal machinery) = machinery IS Terminal;

groupTerminal = DATA GroupTerminal (Terminal) NOT NULL DELETE;
groupMachinery(Terminal machinery) += groupTerminal(machinery);

directory 'Директория обмена с ТСД' = DATA VARSTRING[100] (GroupTerminal) IN base;
directory (GroupTerminal groupMachinery) += directory(groupMachinery);
groupTerminalDirectory (npp) = GROUP MAX GroupTerminal groupTerminal BY directory(groupTerminal);

terminalModel = DATA TerminalModel (GroupTerminal);
model(GroupTerminal groupMachinery) += terminalModel(groupMachinery);

groupTerminal (npp) = GROUP AGGR GroupTerminal groupTerminal BY npp(groupTerminal) WHERE groupTerminal IS GroupTerminal;  

FORM terminal 'ТСД'
    OBJECTS t=Terminal PANEL
    PROPERTIES(t) nameGroupMachinery, npp, description, port
    EDIT Terminal OBJECT t
;

// ------------------------------------- Виды справочников ТСД --------------------------------- //

CLASS TerminalHandbookType 'Вид справочника ТСД';
TABLE terminalHandbookType(TerminalHandbookType);

@defineExternalizable(terminalHandbookType, VARSTRING[100]);

name 'Наименование' = DATA VARSTRING[100] (TerminalHandbookType);
propertyID 'Свойство ID' = DATA Property (TerminalHandbookType);
canonicalNamePropertyID 'Свойство ID' (t) = canonicalName(propertyID(t)) PREFCHARWIDTH 30; 
propertyName 'Свойство наименование' = DATA Property (TerminalHandbookType);
canonicalNamePropertyName 'Свойство наименование' (t) = canonicalName(propertyName(t)) PREFCHARWIDTH 30; 

useForExport 'Использовать для выгрузки' = DATA BOOLEAN (TerminalHandbookType);
skipPrefix 'Не выгружать префикс' = DATA BOOLEAN (TerminalHandbookType);
exportId(TerminalHandbookType t) = IF skipPrefix(t) THEN '' ELSE id(t);
terminalHandbookType() = GROUP MAX TerminalHandbookType t IF useForExport(t);
exportId() = exportId(terminalHandbookType());

FORM terminalHandbookType 'Вид справочника ТСД'
    OBJECTS t = TerminalHandbookType PANEL
    PROPERTIES(t) name, id, canonicalNamePropertyID, canonicalNamePropertyName, skipPrefix, useForExport
    EDIT TerminalHandbookType OBJECT t
;

FORM terminalHandbookTypes 'Виды справочников ТСД'
    OBJECTS t=TerminalHandbookType GRID
    PROPERTIES(t) READONLY name, id, canonicalNamePropertyID, canonicalNamePropertyName, skipPrefix, useForExport
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    LIST TerminalHandbookType OBJECT t
;

// ------------------------ Группы типов документов ------------------------- //
CLASS GroupTerminalDocumentType 'Группа типов документов';
TABLE groupTerminalDocumentType (GroupTerminalDocumentType);

name 'Наименование группы' = DATA VARSTRING[200] (GroupTerminalDocumentType) IN base MINCHARWIDTH 10 PREFCHARWIDTH 20;
groupTerminalDocumentType 'Группа типов документов' = DATA GroupTerminalDocumentType (GroupTerminal);
nameGroupTerminalDocumentType 'Группа типов документов' (GroupTerminal groupTerminal) = name(groupTerminalDocumentType(groupTerminal));
skip 'Не передавать в онлайн-режиме' = DATA BOOLEAN (GroupTerminalDocumentType);
//---------------------------- типы документов ----------------------------------------//

CLASS TerminalDocumentType 'Тип документов';
TABLE terminalDocumentType (TerminalDocumentType);

groupTerminalDocumentType 'Группа типов документов' = DATA GroupTerminalDocumentType (TerminalDocumentType) NOT NULL DELETE;
nameGroupTerminalDocumentType 'Группа типов документов' (TerminalDocumentType terminalDocumentType) = name(groupTerminalDocumentType(terminalDocumentType));
notSkip (TerminalDocumentType terminalDocumentType) = NOT skip(groupTerminalDocumentType(terminalDocumentType));

name 'Название' = DATA VARSTRING[200] (TerminalDocumentType) IN base;
flag 'Флаг' = DATA INTEGER (TerminalDocumentType) IN base;

@defineExternalizable(terminalDocumentType, VARSTRING[100]);

terminalHandbookType1 = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType1 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType1(terminalDocumentType));
nameTerminalHandbookType1 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType1(terminalDocumentType));

nameInHandbook1 'Наименование в справочнике 1' = DATA VARSTRING[200] (TerminalDocumentType) IN base;
nameInHandbook1(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType1(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType1(terminalDocumentType));

terminalHandbookType2 = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType2 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType2(terminalDocumentType));
nameTerminalHandbookType2 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType2(terminalDocumentType));

nameInHandbook2 'Наименование в справочнике 2' = DATA VARSTRING[200] (TerminalDocumentType) IN base;
nameInHandbook2(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType2(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType2(terminalDocumentType));

FORM groupTerminalDocumentType 'Группа типов документов'
    OBJECTS gtdt=GroupTerminalDocumentType PANEL
    PROPERTIES(gtdt) name

    OBJECTS tdt=TerminalDocumentType
    PROPERTIES(tdt)   id, name, flag,
                      idTerminalHandbookType1, nameInHandbook1,
                      idTerminalHandbookType2, nameInHandbook2,
                      NEW, DELETE GRID

    FILTERS groupTerminalDocumentType(tdt) == gtdt

    EDIT GroupTerminalDocumentType OBJECT gtdt
;

FORM groupTerminalDocumentTypes 'Группы типов документов'
    OBJECTS gtdt=GroupTerminalDocumentType
    PROPERTIES(gtdt) name READONLY, skip
    PROPERTIES(gtdt) NEWSESSION NEW, EDIT, DELETE 

    OBJECTS tdt=TerminalDocumentType
    PROPERTIES(tdt) READONLY id, name, flag,
                             idTerminalHandbookType1, nameInHandbook1,
                             idTerminalHandbookType2, nameInHandbook2

    FILTERS groupTerminalDocumentType (tdt) == gtdt
    
    LIST GroupTerminalDocumentType OBJECT gtdt
;

DESIGN groupTerminalDocumentTypes {
    NEW topContainer{
        type = SPLITV;
        fill = 1;

        MOVE gtdt.box;
        MOVE tdt.box;
    }
    MOVE functions.box;
}

FORM groupTerminal 'Группа ТСД'
    OBJECTS grt=GroupTerminal PANEL
    PROPERTIES(grt) npp, nameStock, name,
                    nameGroupTerminalDocumentType, nameModel,
                    filterSku, showFilterSku SHOWIF filterSku(grt),
                    namePriceListType, directory, inactive

    OBJECTS t=Terminal
    PROPERTIES(t)   nameGroupMachinery, npp, description, port, NEW, DELETE GRID

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' groupTerminal(t) == grt 'F10' DEFAULT

    EDIT GroupTerminal OBJECT grt
;

FORM groupsTerminal 'Группы ТСД'
    OBJECTS grt=GroupTerminal, t=Terminal
    PROPERTIES(grt)  READONLY active, npp, nameStock, name,
                     nameGroupTerminalDocumentType, nameModel,
                     filterSku, showFilterSku SHOWIF filterSku(grt) GRID,
                     namePriceListType, directory

    PROPERTIES(grt)  NEWSESSION NEW, EDIT, DELETE 

    PROPERTIES(t) READONLY npp, description, port
    FILTERS groupTerminal(t) == grt
    
    FILTERGROUP active1
        FILTER 'Активные' active(grt) 'F5' DEFAULT       
;

DESIGN groupsTerminal {
    NEW topContainer{
        type = SPLITV;
        fill = 1;

        MOVE grt.box;
        MOVE t.box;
    }
    MOVE functions.box;
}

// ------------------------------------ Документы ТСД ------------------------------- //

CLASS TerminalDocument 'Документ ТСД';
TABLE terminalDocument (TerminalDocument);

TABLE terminalDocumentId(VARISTRING[100]);

id 'Код' = DATA VARSTRING[100] (TerminalDocument) IN recognize INDEXED MINCHARWIDTH 10 PREFCHARWIDTH 15;
terminalDocument (id) = GROUP AGGR (TerminalDocument td) BY id (td) PERSISTENT TABLE terminalDocumentId;

title 'Имя' = DATA VARSTRING[100] (TerminalDocument) IN base MINCHARWIDTH 20 PREFCHARWIDTH 30;
comment 'Комментарий' = DATA VARSTRING[100] (TerminalDocument) IN base MINCHARWIDTH 20 PREFCHARWIDTH 30;
quantity 'Количество' = DATA NUMERIC[14,3] (TerminalDocument) IN base;
idTerminalHandbookType1 'Код в справочнике 1' = DATA VARSTRING[100] (TerminalDocument) IN base;
idTerminalHandbookType2 'Код в справочнике 2' = DATA VARSTRING[100] (TerminalDocument) IN base;

terminalDocumentType = DATA TerminalDocumentType (TerminalDocument);
nameTerminalDocumentType 'Тип документа' (TerminalDocument terminalDocument) = name (terminalDocumentType (terminalDocument)) MINCHARWIDTH 20 PREFCHARWIDTH 30;

groupTerminal = DATA GroupTerminal (TerminalDocument);
nameGroupTerminal 'Группа ТСД' (TerminalDocument terminalDocument) = name(groupTerminal(terminalDocument));

idTerminalDocumentType (TerminalDocument terminalDocument) = id (terminalDocumentType (terminalDocument));

used 'Использован' (terminalDocument) = DATA BOOLEAN (TerminalDocument) IN base;
notUsed 'Неиспользован' (TerminalDocument terminalDocument) = terminalDocument IS TerminalDocument AND NOT used(terminalDocument);

createdUser = DATA CustomUser (TerminalDocument);
createdNameUser 'Создан пользователем' (TerminalDocument td) = name[Contact](createdUser(td)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
createdUser (TerminalDocument o) <- currentUser() WHEN SET(o IS TerminalDocument);

dataStock = DATA Stock (TerminalDocument);
stock (TerminalDocument document) = OVERRIDE stock(groupTerminal(document)), dataStock(document);
nameStock 'Склад' (TerminalDocument document) = name(stock (document)) IN documentHeader;
dataStock(TerminalDocument d) <- stock(createdUser(d)) WHEN SET (createdUser(d));

createdTime 'Время создания'= DATA DATETIME (TerminalDocument) IN created;
createdTime (TerminalDocument o) <- currentDateTime() WHEN SET(o IS TerminalDocument);

terminalDocument = DATA TerminalDocument(TerminalDocumentDetail) NOT NULL DELETE INDEXED;

@defineDocumentTimePrefix(terminalDocument, , ' документа');
@deriveDocumentHeaderTimePrefix(TerminalDocument, );

CLASS TerminalDocumentDetail 'Строка документа ТСД';
TABLE terminalDocumentDetail (TerminalDocumentDetail);
TABLE sessionTerminalDocumentDetail (Session, TerminalDocumentDetail);

id 'Код' = DATA VARSTRING[100] (TerminalDocumentDetail) IN recognize INDEXED MINCHARWIDTH 10 PREFCHARWIDTH 15;

number 'Номер' = DATA INTEGER (TerminalDocumentDetail) IN base;
index 'Номер строки ' (TerminalDocumentDetail d) =
    PARTITION SUM 1 BY terminalDocument(d)
    ORDER number(d), d MINCHARWIDTH 4 PREFCHARWIDTH 4;
barcode 'Штрихкод' = DATA VARSTRING[15] (TerminalDocumentDetail) IN base;
quantity 'Количество' = DATA NUMERIC[14,3] (TerminalDocumentDetail) IN base;
price 'Цена' = DATA NUMERIC[16,4] (TerminalDocumentDetail) IN base;
sum 'Сумма' = DATA NUMERIC[18,4] (TerminalDocumentDetail) IN base;
sum(TerminalDocumentDetail d) <- round2(quantity(d) * price(d)) WHEN CHANGED(quantity(d)) OR CHANGED(price(d)); 

name 'Наименование' = DATA VARSTRING[200] (TerminalDocumentDetail) IN base;
isNew 'Новый товар' = DATA BOOLEAN (TerminalDocumentDetail) IN base;
comment 'Комментарий' = DATA VARSTRING[100] (TerminalDocumentDetail) IN base;
dateTimeScan 'Время сканирования' = DATA DATETIME (TerminalDocumentDetail) IN base;

stock 'Склад' (TerminalDocumentDetail detail) = stock(terminalDocument(detail));  

sku = DATA Sku (TerminalDocumentDetail) INDEXED;
WHEN SESSION CHANGED(barcode(TerminalDocumentDetail d)) OR CHANGED(date(d)) DO {
    sku(d) <- OVERRIDE sku(barcode(d)), sku(barcode(barcode(d), (OVERRIDE currentDate(), date(d)))) WHERE barcode(d);
}

WHEN SESSION CHANGED(sku(TerminalDocumentDetail d)) AND NOT CHANGED(name(d)) DO {
    name(d) <- VARSTRING[200](name(sku(d)));
} 

migratedSku = DATA BOOLEAN ();
onStarted () += ACTION {
    IF NOT migratedSku() THEN {
        migratedSku() <- TRUE;
        setNoCancelInTransaction();
        sku(TerminalDocumentDetail d) <- OVERRIDE sku(barcode(d)), sku(barcode(barcode(d), (OVERRIDE currentDate(), date(d))));
        apply();
        dropNoCancelInTransaction();
    }
}

terminalIdTerminalId (documentDetail, document) = GROUP AGGR TerminalDocumentDetail terminalDocumentDetail 
    BY id (terminalDocument(terminalDocumentDetail)), id(terminalDocumentDetail);    

description 'Название документа' (TerminalDocument o) =
    'Документ ТСД' + ' № ' + id(o) + ' от ' + date(o) MINCHARWIDTH 30 PREFCHARWIDTH 50;
    
@defineDocumentIs(TerminalDocument, TerminalDocumentDetail);
@defineDocumentHeaderClosed(TerminalDocument);

@defineDocumentHeaderCount(terminalDocument);
@defineDocumentHeaderQuantity(terminalDocument);
@defineDocumentHeaderSum(terminalDocument);
// ----------------------------------------------- Формы документов ------------------------------------------ //

FORM terminalDocument 'Документ ТСД'
    OBJECTS td=TerminalDocument PANEL
    PROPERTIES(td)  id, nameGroupTerminal, nameStock, date, time,
                    nameTerminalDocumentType, idTerminalHandbookType1,
                    idTerminalHandbookType2, title, comment, quantity,  
                    used READONLY, createdNameUser

    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) number, barcode, name, quantity, price, sum, comment, dateTimeScan, NEW, deletetdd=DELETE GRID

    FILTERS terminalDocument(tdd) == td

    EDIT TerminalDocument OBJECT td;
;

DESIGN terminalDocument {
    td.box{
        type = CONTAINERV;

        NEW row1 {
            type = CONTAINERH;
            MOVE PROPERTY(id(td));
            MOVE PROPERTY(nameGroupTerminal(td));
            MOVE PROPERTY(nameTerminalDocumentType(td));
            MOVE PROPERTY(title(td));
            MOVE PROPERTY(comment(td));
            MOVE PROPERTY(createdNameUser(td));
        }
        NEW row2 {
            type = CONTAINERH;
            MOVE PROPERTY(idTerminalHandbookType1(td));
            MOVE PROPERTY(idTerminalHandbookType2(td));
            MOVE PROPERTY(quantity(td));
            MOVE PROPERTY(used(td));
        }
    }
    MOVE tdd.box;
    MOVE functions.box;
}

FORM terminalDocumentPrint 'Документ ТСД'
    OBJECTS td=TerminalDocument PANEL 
    PROPERTIES(td)  READONLY id, date, time, nameGroupTerminal, 
                    nameTerminalDocumentType, idTerminalHandbookType1, idTerminalHandbookType2,
                    title, comment, quantity, countTerminalDocumentDetail, 
                    quantityTerminalDocumentDetail, sumTerminalDocumentDetail, createdNameUser , createdTime 

    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY number, barcode, name, price, quantity, sum, dateTimeScan
    ORDER BY number(tdd)

    FILTERS terminalDocument(tdd) == td
;
terminalDocumentPrint 'Печать документа ТСД' (TerminalDocument td) = ACTION PRINT terminalDocumentPrint OBJECTS td = td  IMAGE 'print.png' IN print;

in = DATA LOCAL BOOLEAN (TerminalDocumentType);
filterStock = DATA LOCAL Stock ();
include 'Отм.' = DATA LOCAL BOOLEAN (TerminalDocument);

FORM terminalDocuments 'Документы ТСД' AUTOREFRESH 60
    OBJECTS td=TerminalDocument
    PROPERTIES(td)  include
    PROPERTIES(td)  READONLY id, date, time, nameGroupTerminal, nameStock,
                    nameTerminalDocumentType, idTerminalHandbookType1, idTerminalHandbookType2,
                    title, comment, quantity, countTerminalDocumentDetail, 
                    quantityTerminalDocumentDetail, createdNameUser PANEL, createdTime PANEL
    PROPERTIES(td)  NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES (td) close SHOWIF isOpened(td), open SHOWIF isClosed(td)
    FILTERS in(terminalDocumentType(td)) OR (td IS TerminalDocument AND NOT [=GROUP SUM 1 IF in(TerminalDocumentType t)]()),
            stock(td) == filterStock() OR (td IS TerminalDocument AND NOT filterStock())
    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY id, number, barcode, name, price, quantity, sum, comment, dateTimeScan

    FILTERS terminalDocument(tdd) == td
    FILTERGROUP filterUse
        FILTER 'Неиспользованные' notUsed(td) 'F10' DEFAULT
        
    FILTERGROUP open FILTER 'Открыт' isOpened(td) 'F6' DEFAULT
    PROPERTIES terminalDocumentPrint(td)  
;

@extendFormFilterAccessStock(TerminalDocument, td, terminalDocuments, stock, company);


DESIGN terminalDocuments {
    main {
        preferredSize = (1024, 768);
        NEW topContainer{
            type = SPLITV;
            fill = 1;

            MOVE td.box;
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE tdd.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;
                    MOVE td.created;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                        MOVE td.print;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
    MOVE functions.box;
}

//----------------------------- Макросы для документов --------------------------------//

//META defineAddDetailDialogTerminal (object, skuProp, stockProp)
//    @defineAddDetailDialogTerminalInner (object, ###object, skuProp, stockProp);
//END
//
//META defineAddDetailDialogTerminalInner (object, class, skuProp, stockProp)
//    in = ABSTRACT BOOLEAN (TerminalDocumentType, class);
//    overAddDialogTerminal##class = ACTION ABSTRACT (class, TerminalDocument);
//    overAddDetailDialogTerminal##class##Detail = ACTION ABSTRACT (class##Detail, TerminalDocumentDetail);
//    
//    addDetailDialogTerminal##class##Detail 'Импорт из ТСД' (class object) = ACTION {
//        in(TerminalDocumentType t) <- in(t, object);
//        filterStock() <- stockProp(object);
//        
//        DIALOG terminalDocuments OBJECTS td INPUT DO {
//            used(td) <- TRUE ;
//            overAddDialogTerminal##class(object, td);
//
//            FOR terminalDocument(TerminalDocumentDetail tdd) == td ORDER number(tdd) NEW o = class##Detail DO {
//                object(o) <- object;
//                skuProp(o) <- sku(tdd);
//                quantity(o) <- quantity(tdd);
//                overAddDetailDialogTerminal##class##Detail(o, tdd);
//            }
//        }
//    } TOOLBAR;
//END

META defineAddDetailDialogTerminal (object, skuProp, stockProp)
    @defineAddDetailDialogTerminalInner (object, ###object, skuProp, stockProp);
END

META defineAddDetailDialogTerminalInner (object, class, skuProp, stockProp)
    in = ABSTRACT BOOLEAN (TerminalDocumentType, class);
    quantity = DATA LOCAL NUMERIC[16,5] (Sku);
    overAddDialogTerminal##class = ACTION ABSTRACT (class, TerminalDocument);
    overAddDetailDialogTerminal##class##Detail = ACTION ABSTRACT (class##Detail, TerminalDocument);

    addDetailDialogTerminal##class##Detail 'Импорт из ТСД' (class object) = ACTION {
        IF isPosted(object) THEN {
            MESSAGE 'Вы пытаетесь импортировать в проведенный документ. Распроведите его.';
        } ELSE {
            in(TerminalDocumentType t) <- in(t, object);
            filterStock() <- stockProp(object);
            DIALOG terminalDocuments OBJECTS td INPUT DO {
                IF NOT [=GROUP SUM 1 IF include(TerminalDocument td)]() THEN {
                    include(td) <- TRUE;
                }
                used(TerminalDocument t) <- TRUE WHERE include(td);
                overAddDialogTerminal##class(object, td);
                        
                quantity(Sku sku) <- [=GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY sku(tdd)](sku);   
                FOR [=GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY sku(tdd)](Sku sku) DO {
                    FOR explicitBatchLedger(stockProp(object)) AND quantity(sku(Batch b)) AND sku(b) == sku AND 
                        prevAvailableQuantity(b, stockProp(object)) (-) [=GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object) > 0.0 
                        ORDER dateTime(b) NEW o = class##Detail DO {
                        object(o) <- object;
                        sku(o) <- sku;
                        quantity(o) <- IF quantity(sku(b)) > (prevAvailableQuantity(b, stockProp(object)) (-) [=GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object))
                            THEN prevAvailableQuantity(b, stockProp(object)) (-) [=GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object)
                            ELSE quantity(sku(b));
                        batch(o) <- b;
                        quantity(sku) <- quantity(sku) (-) quantity(o);
                        overAddDetailDialogTerminal##class##Detail(o, td);                        
                        IF sku IS Sku AND NOT quantity(sku)
                            THEN BREAK;
                    }    
                    FOR quantity(sku) NEW o = class##Detail DO {
                        object(o) <- object;
                        sku(o) <- sku; 
                        quantity(o) <- quantity(sku);   
                        quantity(sku) <- quantity(sku) (-) quantity(o); 
                        overAddDetailDialogTerminal##class##Detail(o, td);                        
                        IF sku IS Sku AND NOT quantity(sku)
                            THEN BREAK;                                                                         
                    }
                }
                include(TerminalDocument t) <- NULL;
            }
        }   
    } TOOLBAR;        
END

// ------------------------------------------------ Стандартные значения ------------------------------------ //

// Модели терминалов сбора данных
loadDefaultTerminalModel 'Добавить модель терминала'(VARSTRING[20] stringOne, VARISTRING[110] stringTwo, VARSTRING[200] stringThree) = ACTION  {
    FOR NEW tm = TerminalModel DO {
         ASSIGN sid(tm) <- stringOne;   
         ASSIGN name(tm) <- stringTwo;
         ASSIGN handler(tm) <- stringThree;
    }
}

loadDefaultTerminalModels 'Загрузить стандартные модели ТСД'() = ACTION {
    EXEC loadDefaultTerminalModel('inventory', 'ТСД InventoryTech', 'equ.clt.handler.inventoryTech.InventoryTechHandler');
    EXEC loadDefaultTerminalModel('EasyCSVT', 'ТСД EasyCSV', 'equ.clt.handler.easy.EasyCSVHandler');
    EXEC loadDefaultTerminalModel('lsterminal', 'ТСД LSTerminal', 'equ.clt.handler.lsterminal.LSTerminalHandler');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalModels);

// Виды справочников терминалов сбора данных
loadDefaultTerminalHandbookType 'Добавить вид справочника ТСД'(VARSTRING[100] n, VARSTRING[100] s) = ACTION {
    FOR NEW t = TerminalHandbookType DO {
        name(t) <- n;
        id(t) <- s;
    }
}

loadDefaultTerminalHandbookTypes 'Загрузить стандартные виды справочников ТСД'() = ACTION {
    loadDefaultTerminalHandbookType('Организация', 'ПС');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalHandbookTypes);

// Типы документов терминалов сбора данных
loadDefault 'Добавить тип документа ТСД'(VARSTRING[200] nameString, GroupTerminalDocumentType gtdt, VARSTRING[100] idTypeString, INTEGER flagInteger, VARSTRING[100] handbook1String, VARSTRING[100] handbook2String) = ACTION {
    FOR NEW tdt = TerminalDocumentType DO {
        ASSIGN name(tdt) <- nameString;
        ASSIGN groupTerminalDocumentType(tdt) <- gtdt;
        ASSIGN terminalHandbookType1(tdt) <- terminalHandbookType(handbook1String);
        ASSIGN terminalHandbookType2(tdt) <- terminalHandbookType(handbook2String);
        ASSIGN id(tdt) <- idTypeString;
        ASSIGN flag(tdt) <-flagInteger;
    }
}

loadDefaultTerminalDocumentTypes 'Загрузить стандартные типы документов ТСД'() = ACTION {
    FOR NEW gtdt = GroupTerminalDocumentType DO {
        ASSIGN name(gtdt) <- 'Группа типов документов';
        EXEC loadDefault('Инвентаризация', gtdt, '01', 31, ' ', ' ');
        EXEC loadDefault('Приход', gtdt, '02', 31, '01', ' ');
        EXEC loadDefault('Отгрузка по безналичному расчёту', gtdt, '03', 31, '01', ' ');
    }
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalDocumentTypes);

// ------------------------------------------ Генерация групп терминалов сбора данных ------------------------------ //
loadDefault 'Сгенерировать группу терминалов'(Stock stock, TerminalModel model, GroupTerminalDocumentType gtdt, INTEGER num) = ACTION {
    FOR NEW g = GroupTerminal DO {
        stock(g) <- stock;
        name(g) <- 'Группа ТСД по умолчанию';
        groupTerminalDocumentType(g) <- gtdt;

        LOCAL numTerminal = INTEGER();
        numTerminal() <- 0;
        WHILE numTerminal() < num DO {
            FOR NEW t = Terminal DO {
                groupTerminal(t) <- g;
                numTerminal() <- numTerminal() + 1;
                npp(t) <- numTerminal();
                terminalModel(g) <- model;
            }
        }
    }
}

EXTEND FORM defaultData
    OBJECTS         tm=TerminalModel PANEL
    PROPERTIES(tm)  SELECTOR name

    OBJECTS         gtdt=GroupTerminalDocumentType PANEL
    PROPERTIES(gtdt) SELECTOR name

    OBJECTS         cTerminal=INTEGER PANEL
    PROPERTIES(cTerminal)   intValueTerminal = OBJVALUE
    PROPERTIES (s, tm, gtdt, cTerminal)  loadDefault
;

DESIGN defaultData {
    PROPERTY(name(tm)) {
        caption = 'Модель ТСД';
    }
    PROPERTY(name(gtdt)) {
        caption = 'Группа типов документов';
    }
    PROPERTY(intValueTerminal) {
        caption = 'Количество ТСД';
    }
    machinery {
        NEW terminal {
            caption = 'ТСД';
            MOVE PROPERTY(name(tm));
            MOVE PROPERTY(name(gtdt));
            MOVE PROPERTY(intValueTerminal);
            MOVE PROPERTY(loadDefault(s,tm,gtdt,cTerminal));
        }
    }
}

NAVIGATOR {
    machineryNavigator {
        NEW terminalNavigator 'Терминалы сбора данных' {
            ADD terminalDocuments;
            ADD groupsTerminal;
            ADD terminalModels;
            ADD groupTerminalDocumentTypes;
            ADD terminalHandbookTypes;
        }
    }
}