MODULE LabelTerminal;

REQUIRE Label, Terminal;

NAMESPACE Label;

addDetailDialogTerminalLabelTransactionDetail 'Импорт из ТСД' (LabelTransaction labelTransaction) = ACTION {
    FORM terminalDocuments MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL document = TerminalDocument ();
        
        document() <- chosenObject('td');
        used(TerminalDocument terminalDocument) <- TRUE WHERE terminalDocument == document()  ;

        FOR terminalDocument(TerminalDocumentDetail tdd) == document()  DO {
            FOR ADDOBJ o = LabelTransactionDetail DO {
                labelTransaction(o) <- labelTransaction;
                sku(o) <- sku(barcode(barcode(tdd), date(labelTransaction)));
                quantity(o) <- INTEGER(quantity(tdd));
                createAttribute(o);
            }
        }
    }
} TOOLBAR;

EXTEND FORM customLabelTransaction
    PROPERTIES(l) TODRAW d addDetailDialogTerminalLabelTransactionDetail
;

@defineDocumentHeaderSkuQuantity(terminalDocument, sku);

EXTEND CLASS TerminalDocument : Label.PriceTransactionDocument;
description (TerminalDocument document) += Terminal.description(document);

createAttribute = ACTION ABSTRACT LIST (TerminalDocumentDetail, LabelTransactionDetail);

createLabelTransaction 'Распечатать ценники'(TerminalDocument terminalDocument) = ACTION NEWSESSION {           

    LOCAL in = BOOLEAN (Sku);
    in(Sku sku) <- TRUE IF countTerminalDocumentDetail(sku, terminalDocument);

    // бежим по всем типам ценников из управленческих параметров
    // для каждого создаем по операции печати ценников
    FOR ([= GROUP SUM 1 IF in(Sku sku) AND in(LabelType labelType, sku, DepartmentStore departmentStore) BY labelType, departmentStore](LabelType labelType, stock(terminalDocument)))
        ADDOBJ t = LabelTransaction DO {
            departmentStore(t) <- stock(terminalDocument);
            priceTransactionDocument(t) <- terminalDocument;
            labelType(t) <- labelType;
            
            FOR terminalDocument(TerminalDocumentDetail dd) == terminalDocument AND 
                in(Sku sku) AND sku == sku(dd) AND 
                in(labelType, sku, stock(terminalDocument))
                ADDOBJ d = LabelTransactionDetail DO {
                labelTransaction(d) <- t;
                sku(d) <- sku;

                name(d) <- IF batch(d) THEN documentNameSku(batch(d)) ELSE name(sku(d));
                createAttribute(d);

                quantity(d) <- INTEGER(quantity(dd));

                price(d) <- calcPrice(d);
                retailPrice(d) <- overRetailPrice(d);
                createAttribute(dd, d);
            }
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d);
            print(t);
    }
    printed(terminalDocument) <- TRUE WHERE is(terminalDocument);    
    used(terminalDocument) <- TRUE WHERE is(terminalDocument); 
       
    apply();
} TOOLBAR CONFIRM;

createSnapshotTerminalDocumentLabel 'Перепечатать ценники'(TerminalDocument terminalDocument) = ACTION NEWSESSION {
        
    LOCAL in = BOOLEAN (Sku);    
    in(Sku sku) <- TRUE IF countTerminalDocumentDetail(sku, terminalDocument);
    
    FORM selectLabelTypes OBJECTS ds =  stock(terminalDocument) MODAL;
    IF formResult() == FormResult.ok THEN { 
        IF NOT countSelectType() THEN {  
            select(LabelType type) <- TRUE WHERE type == chosenObject('l');
        }                                        
        FOR select(LabelType type) ADDOBJ t = LabelTransaction DO {              
            departmentStore(t) <- stock(terminalDocument);
            priceTransactionDocument(t) <- terminalDocument;
            labelType(t) <- type;

            FOR terminalDocument(TerminalDocumentDetail dd) == terminalDocument AND in(Sku sku) AND sku == sku(dd) 
                ADDOBJ d = LabelTransactionDetail DO {
                    labelTransaction(d) <- t;
                    sku(d) <- sku;

                    name(d) <- IF batch(d) THEN documentNameSku(batch(d)) ELSE name(sku(d));
                    documentQuantity(d) <- quantity(dd); 
                    
                    price(d) <- OVERRIDE calcPrice(d), documentPrice(d);
                    retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);                       
                                                               
                    quantity(d) <- IF NOT countLabel(departmentStore(d)) 
                                                             THEN INTEGER(documentQuantity(d))
                                                             ELSE countLabel(departmentStore(d));                                              
                                                               
                                                               
                    
                    
                    createAttribute(d);
                    createAttribute(dd, d);
            }
            IF change(stock(terminalDocument)) THEN {
                FORM customLabelTransaction OBJECTS l = t MODAL;
                IF formResult() == FormResult.ok THEN {    
                    print(t);
                } ELSE {
                    cancel();
                }             
            } ELSE {
                print(t);
            }                        
        }
        printed(terminalDocument) <- TRUE WHERE is(terminalDocument);    
        used(terminalDocument) <- TRUE WHERE is(terminalDocument); 
        
        apply(); 
    }                                                                                                                        
    
} TOOLBAR;

showPrintLabelTransaction 'Показывать' (TerminalDocument terminalDocument) = isOpened(terminalDocument) AND NOT skip(terminalDocument);
                                                                           
backgroundPrintLabelTransaction 'Цвет' (TerminalDocument terminalDocument) = RGB(212,255,212) IF showPrintLabelTransaction(terminalDocument) AND NOT printed(terminalDocument);

EXTEND FORM terminalDocuments
    PROPERTIES(td) statusLabel BACKGROUND backgroundPrintLabelTransaction(td) READONLY,
                       createLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransaction(td), 
                       createSnapshotTerminalDocumentLabel FORCE PANEL SHOWIF isOpened(td)
;

DESIGN terminalDocuments {
    machineryContainer{
        NEW label {
            caption = 'Ценники' ;
            type = CONTAINERV;
            
            MOVE PROPERTY (createLabelTransaction(td));
            MOVE PROPERTY (createSnapshotTerminalDocumentLabel(td));
        }
    }
}