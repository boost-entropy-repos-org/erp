MODULE LabelItem;

REQUIRE Label, Item;


// ------------------------------ Добавляем атрибуты в ценники ----------------------------- //

@defineLabelTransactionAttribute(captionItem, 'Название', VARSTRING[255], Item, caption);

@defineLabelTransactionAttribute(nameBrandItem, 'Брэнд', VARSTRING[100], Item, nameBrand);

@defineLabelTransactionAttribute(nameManufacturerItem, 'Производитель', VARSTRING[255], Item, nameManufacturer);
@defineLabelTransactionAttribute(addressManufacturerItem, 'Адрес производителя', STRING[255], Item, addressManufacturer);

nameAddressManufacturerItemLabelTransactionDetail 'Производитель' (d) = CONCAT ', ', nameManufacturerItemLabelTransactionDetail(d), addressManufacturerItemLabelTransactionDetail(d);
EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY nameAddressManufacturerItemLabelTransactionDetail;
EXTEND FORM customLabelTransaction PROPERTIES(d) nameAddressManufacturerItemLabelTransactionDetail;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY nameAddressManufacturerItemLabelTransactionDetail;

createItemLabelsTransaction 'Сформировать ценники' = ACTION (item, stock) NEWSESSION {
     FOR inLabelTypeSkuDepartmentStore(labelType, item, stock)
         ADDOBJ t = LabelTransaction DO {
             departmentStoreLabelTransaction(t) <- stock;
             labelTypeLabelTransaction(t) <- labelType;
             
             FOR ADDOBJ d = LabelTransactionDetail DO {
                 labelTransactionLabelTransactionDetail(d) <- t;
                 skuLabelTransactionDetail(d) <- item;
                 nameLabelTransactionDetail(d) <- nameSku(item);
 
                 createAttributeLabelTransactionDetail(d);
 
                 priceLabelTransactionDetail(d) <- calcPriceLabelTransactionDetail(d);
                 retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d); 
             } 
             FORM printLabelTransaction OBJECTS l = t PRINT;
     }
 }

createItemLabelTransaction 'Сформировать ценник' = ACTION (item, stock, labelType) NEWSESSION {
    FOR ADDOBJ t = LabelTransaction DO {
            departmentStoreLabelTransaction(t) <- stock;
            labelTypeLabelTransaction(t) <- labelType;
            
            FOR ADDOBJ d = LabelTransactionDetail DO {
                labelTransactionLabelTransactionDetail(d) <- t;
                skuLabelTransactionDetail(d) <- item;
                nameLabelTransactionDetail(d) <- nameSku(item);
                quantityLabelTransactionDetail(d) <- countLabelTypeSku(labelType, skuLabelTransactionDetail(d));
                                                                             
                createAttributeLabelTransactionDetail(d);

                priceLabelTransactionDetail(d) <- calcPriceLabelTransactionDetail(d);
                retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d); 
            } 
            // вызываем печатную форму для каждого из них
            FORM printLabelTransaction OBJECTS l = t PRINT;
    }
} IMAGE 'print.png';

EXTEND FORM item
    OBJECTS ld = DepartmentStore FIXED PANEL
    PROPERTIES(ld) SELECTOR nameDepartmentStore  
    PROPERTIES (i, ld) createItemLabelsTransaction
    FILTERS isCompanyStock(ld)
        
    OBJECTS lt = LabelType
    PROPERTIES (lt) nameLabelType READONLY, ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR 
    PROPERTIES (lt, i) inLabelTypeSku
    PROPERTIES (i, ld, lt) createItemLabelTransaction
;

DESIGN item {
   itemDetail {
        NEW itemLabel {
            caption = 'Ценники';
            MOVE ld.box;
            MOVE lt.box;
        }    
    }
}    