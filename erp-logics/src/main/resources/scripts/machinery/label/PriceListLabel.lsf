MODULE PriceListLabel;

REQUIRE PriceList, Label;

NAMESPACE PriceList;

@Label.implementPriceTransactionDocument(PriceList);


FORM selectDepartmentStore 'Выбор отделов магазина для печати'
    OBJECTS p = PriceList PANEL 
    
    OBJECTS d = DepartmentStore 
    PROPERTIES READONLY id[Stock](d) SHOWIF showIDs(), name(d) 
    FILTERS in(p,d)
    FILTERGROUP inactiveStock 
        FILTER 'Активный' active(d) 'F10' DEFAULT    
;

createPriceListLabel 'Распечатать ценники'(PriceTransactionDocument priceList) = {
	NEWSESSION {
	    DIALOG selectDepartmentStore OBJECTS p = priceList, d INPUT DO {
	        select(Sku sku, LabelType labelType, d) <- countPriceListDetail(sku,priceList) AND in(labelType, sku, d);   
	    
	        createLabelTransaction(d);  
	        priceTransactionDocument(LabelTransaction t) <- priceList WHERE t == addedTransaction();
	        
	        apply();
	    }
	}
} TOOLBAR;

select 'Вкл.' = DATA LOCAL BOOLEAN (LabelType, DepartmentStore);
FORM selectDepartmentStoreLabelType 'Выбор магазина и ценника для печати'
    OBJECTS p = PriceList PANEL 
    
    OBJECTS d = DepartmentStore 
    PROPERTIES READONLY id[Stock](d) SHOWIF showIDs(), name(d) 
    FILTERS in(p,d)
    PROPERTIES change(d)
    FILTERGROUP inactiveStock 
        FILTER 'Активный' active(d) 'F10' DEFAULT    
        
    
    OBJECTS l = LabelType GRID
    PROPERTIES(l,d) select
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate,
                  namePriceListType, nameGroupType, printNullPrice, notPrintRetailPrice
    FILTERS in(l,d) 
    FILTERGROUP inactive FILTER 'Активные' active(l) 'F10' DEFAULT
;

createSelectedSkuStockSnapshotLabel 'Перепечатать ценники'(PriceTransactionDocument priceList) = {    
    DIALOG selectDepartmentStoreLabelType OBJECTS p = priceList, d INPUT DO {
        select(Sku sku) <- TRUE IF countPriceListDetail(sku,priceList);   
        FOR select(LabelType type, d) DO {
            createSnapshotLabelTransactionDepartmentStore(d, type);   
            priceTransactionDocument(LabelTransaction t) <- priceList WHERE t == addedTransaction();
        } 
        apply();
    }
} TOOLBAR;

EXTEND FORM priceLists
    PROPERTIES(p)   createPriceListLabel, createSelectedSkuStockSnapshotLabel 
;
DESIGN priceLists {
    actionContainer {
        NEW priceContainer {
            caption = 'Ценники';                     
            type = CONTAINERV;
            MOVE PROPERTY (createPriceListLabel(p));
            MOVE PROPERTY (createSelectedSkuStockSnapshotLabel(p));
        }
    }
}

overFillDocument = ACTION ABSTRACT (LabelTransactionDetail, DocumentDetail); 
fillDocument 'Подбор документа'(LabelTransaction labelTransaction) = {
    DIALOG documents OBJECTS d INPUT DO {
        FOR document(DocumentDetail documentDetail) == d NEW i = LabelTransactionDetail DO {
            labelTransaction(i) <- labelTransaction;
            sku(i) <- sku(documentDetail);
            name(i) <- name(sku(i));
            createAttribute(i);        
            overFillDocument(i, documentDetail);
        }
    }
} TOOLBAR;

overFillDocument (LabelTransactionDetail i, DocumentDetail d) += {
    batch(i) <- batch(d);
}

EXTEND FORM customLabelTransaction
    PROPERTIES (l) TODRAW d fillDocument  
;

