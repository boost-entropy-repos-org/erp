MODULE Label;

REQUIRE System, Store, Stock, Barcode, PriceListType, PriceRoundStore, PurchaseLedger;

// Ориентация страницы
CLASS PrintOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}
TABLE printOrientation(PrintOrientation);

fileTemplatePrintOrientation 'Файл шаблона' = DATA VARSTRING[200] (PrintOrientation);

FORM printOrientation 'Ориентация'
    OBJECTS o = PrintOrientation FIXED PANEL 
    PROPERTIES(o) staticCaption, fileTemplatePrintOrientation  
    EDIT PrintOrientation OBJECT o
;

FORM printOrientations 'Ориентации'
    OBJECTS o = PrintOrientation
    PROPERTIES(o) READONLY staticCaption, fileTemplatePrintOrientation  
    PROPERTIES(o) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG PrintOrientation OBJECT o
;

onStarted() += ACTION (){
    fileTemplatePrintOrientation(o) <- 'Label_printLabelTransaction.jrxml' WHERE o == PrintOrientation.landscape; 
    fileTemplatePrintOrientation(o) <- 'Label_printLabelTransactionP.jrxml' WHERE o == PrintOrientation.portrait; 
}

// типы ценников
CLASS LabelType 'Тип ценника';
TABLE labelType(LabelType);

nameLabelType 'Наименование' = DATA VARISTRING[50](LabelType);

@defineExternalizable(labelType, VARSTRING[100]);

widthLabelType 'Ширина' = DATA INTEGER (LabelType);
heightLabelType 'Высота' = DATA INTEGER (LabelType);

orientationLabelType = DATA PrintOrientation (LabelType);
nameOrientationLabelType 'Ориентация' (labelType) = staticCaption(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA VARSTRING[200] (LabelType);

priceListTypeLabelType = DATA PriceListType (LabelType);
namePriceListTypeLabelType 'Вид цен' (labelType) = namePriceListType(priceListTypeLabelType(labelType));

TABLE labelTypeStoreType (LabelType, StoreType);
TABLE labelTypeStore (LabelType, Store);
TABLE labelTypeDepartmentStore (LabelType, DepartmentStore);

inLabelType 'Включен' = DATA BOOLEAN (LabelType);
inLabelType(labelType) <- TRUE WHEN SET(labelType IS LabelType);

inDataLabelTypeStoreType 'Включен' (labelType, storeType) = DATA BOOLEAN (LabelType, StoreType);
inLabelTypeStoreType 'Включен' (labelType, storeType) =
    OVERRIDE inLabelType(labelType) AND storeType IS StoreType, inDataLabelTypeStoreType(labelType, storeType);
inDataLabelTypeStore 'Включен' (labelType, store) = DATA BOOLEAN (LabelType, Store);
inLabelTypeStore 'Включен' (labelType, store) =
    OVERRIDE inLabelTypeStoreType(labelType, storeTypeStore(store)), inDataLabelTypeStore(labelType, store);
inDataLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (LabelType, DepartmentStore);
inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) =
    OVERRIDE inLabelTypeStore(labelType, storeDepartmentStore(departmentStore)), inDataLabelTypeDepartmentStore(labelType, departmentStore) PERSISTENT;

groupTypeLabelType = DATA GroupType (LabelType);
nameGroupTypeLabelType 'Тип классификатора' (labelType) = nameGroupType(groupTypeLabelType(labelType));

TABLE labelTypeGroup (LabelType, Group);
dataInLabelTypeGroup 'Вкл.' = DATA BOOLEAN (LabelType, Group);
TABLE labelTypeSku (LabelType, Sku);
dataInLabelTypeSku 'Вкл.' = DATA BOOLEAN (LabelType, Sku);

levelParentLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataInLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentLabelTypeGroup (labelType, group));
nearestInLabelTypeGroup 'Вкл.' (labelType, group) =
    dataInLabelTypeGroup(labelType, nearestParentLabelTypeGroup (labelType, group)) PERSISTENT;

inLabelTypeGroup 'Вкл.' (labelType, group) =
    OVERRIDE nearestInLabelTypeGroup(labelType, group), dataInLabelTypeGroup(labelType, group) PERSISTENT;

inLabelTypeSku 'Вкл.' (labelType, sku) =
    OVERRIDE inLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)), dataInLabelTypeSku(labelType, sku);

overLabelTypeSkuDepartmentStore = ABSTRACT BOOLEAN (LabelType, Sku, DepartmentStore);
skipLabelTypeSkuDepartmentStore = ABSTRACT BOOLEAN (LabelType, Sku, DepartmentStore);
inLabelTypeSkuDepartmentStore (labelType, sku, departmentStore) = ((inLabelTypeSku(labelType, sku) 
    AND inLabelTypeDepartmentStore(labelType, departmentStore)) AND NOT skipLabelTypeSkuDepartmentStore(labelType, sku, departmentStore)) OR overLabelTypeSkuDepartmentStore(labelType, sku, departmentStore);

//-- Множитель
dataCountLabelTypeGroup 'Множитель' = DATA INTEGER (LabelType, Group);
dataCountLabelTypeSku 'Множитель' = DATA INTEGER (LabelType, Sku);

levelParentCountLabelLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataCountLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentCountLabelLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentCountLabelLabelTypeGroup (labelType, group));
nearestCountLabelLabelTypeGroup 'Множитель' (labelType, group) =
    dataCountLabelTypeGroup(labelType, nearestParentCountLabelLabelTypeGroup (labelType, group)) PERSISTENT;

countLabelTypeGroup 'Множитель' (labelType, group) = OVERRIDE
    1 IF group IS Group IF labelType IS LabelType,
    nearestCountLabelLabelTypeGroup(labelType, group),
    dataCountLabelTypeGroup(labelType, group) PERSISTENT;

countLabelTypeSku 'Множитель' (labelType, sku) =
    OVERRIDE countLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)), dataCountLabelTypeSku(labelType, sku);

//-- Количество для печати ценника брать множитель или из документа.
includeLabelType 'Из документа'= DATA BOOLEAN (LabelType);
dataIncludeLabelTypeGroup 'Из документа' = DATA BOOLEAN (LabelType, Group);
dataIncludeLabelTypeSku 'Из документа' = DATA BOOLEAN (LabelType, Sku);

levelParentIncludeLabelLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataIncludeLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentIncludeLabelLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentIncludeLabelLabelTypeGroup (labelType, group));
nearestIncludeLabelLabelTypeGroup 'Из документа' (labelType, group) =
    dataIncludeLabelTypeGroup(labelType, nearestParentIncludeLabelLabelTypeGroup (labelType, group)) PERSISTENT;

includeLabelTypeGroup 'Из документа' (labelType, group) = OVERRIDE
    includeLabelType(labelType) AND group IS Group,
    nearestIncludeLabelLabelTypeGroup(labelType, group),
    dataIncludeLabelTypeGroup(labelType, group) PERSISTENT;

includeLabelTypeSku 'Из документа' (labelType, sku) = OVERRIDE
    includeLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)),
    dataIncludeLabelTypeSku(labelType, sku);

//печать для нулевых цен
printNullPriceLabelType 'Включать позиций без цен' = DATA BOOLEAN (LabelType);

FORM labelType 'Тип ценника'
    OBJECTS l = LabelType FIXED PANEL
    PROPERTIES(l) idLabelType, nameLabelType, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType,
                  namePriceListTypeLabelType, nameGroupTypeLabelType, printNullPriceLabelType

    TREE treeStore a=STRING[3], st=StoreType, s=Store
    PROPERTIES READONLY OBJVALUE(a), nameStockGroup(st), nameStore(s)
    FILTERS stringEqualsAll(a), inStoreTypeStore(st, s)

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY depName = nameDepartmentStore
    FILTERS (d IS DepartmentStore AND NOT s IS Store AND NOT st IS StoreType) OR
            (storeDepartmentStore(d)==s AND st IS StoreType) OR
            (storeTypeDepartmentStore(d)==st AND NOT s IS Store)
    PROPERTIES(l) TODRAW a FORCE GRID inLabelType, includeLabelType
    PROPERTIES inLabelTypeStoreType(l,st), inLabelTypeStore(l,s), inLabelTypeDepartmentStore(l,d)

    ORDER BY depName

    TREE treeGroup g=Group PARENT parentGroup
    PROPERTIES READONLY orderGroup(g), nameGroup(g)
    FILTERS groupTypeGroup(g) == groupTypeLabelType(l)
    ORDER BY orderGroup(g), nameGroup(g)
    FILTERGROUP inactive FILTER 'Активные' activeGroup(g) 'F5' DEFAULT

    PROPERTIES(l, g) inLabelTypeGroup, countLabelTypeGroup, includeLabelTypeGroup

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku
    FILTERS isParentGroupSku(g, sk) OR sk IS Sku AND NOT g
    PROPERTIES(l, sk) inLabelTypeSku, countLabelTypeSku, includeLabelTypeSku

    EDIT LabelType OBJECT l
;
@extendFormFilterStockAccess(d, labelType);
@extendFormFilterStockGroupAccess(st, labelType);
@extendFormFilterStockGroupAccess(s, labelType);

DESIGN labelType {
    main {
        preferredSize = (1024, 768);

        MOVE l.box {
            NEW wor1 {
                type = CONTAINERH;
                MOVE PROPERTY(nameLabelType(l));
                MOVE PROPERTY(widthLabelType(l));
                MOVE PROPERTY(heightLabelType(l));
                MOVE PROPERTY(nameOrientationLabelType(l));
                MOVE PROPERTY(printNullPriceLabelType(l));
            }
            NEW wor2 {
                type = CONTAINERH;
                MOVE PROPERTY(idLabelType(l));
                MOVE PROPERTY(fileTemplateLabelType(l));
                MOVE PROPERTY(namePriceListTypeLabelType(l));
                MOVE PROPERTY(nameGroupTypeLabelType(l));
            }
        };
        NEW specification{
            type = TABBED;
            fill = 1;
            NEW departmentCase {
                caption = 'Склады';
                type = CONTAINERH;
                MOVE treeStore.tree.box;
                MOVE d.box {fill = 2;}
            }
            NEW itemCase {
                caption = 'Товары';
                NEW row1 {
                    caption = 'Классификатор';
                    MOVE PROPERTY(nameGroupTypeLabelType(l));
                }
                NEW row2 {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE treeGroup.tree.box;
                    MOVE sk.box {fill = 2;}
                }
            }
        }
        MOVE functions.box;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = LabelType
    PROPERTIES(l) READONLY idLabelType, nameLabelType, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType, namePriceListTypeLabelType, printNullPriceLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG LabelType OBJECT l
;

//---------------------------- Документы для печати ценников ----------------------------------------//

CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skipPriceTransactionDocument 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (PriceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL WHEN SET(isDraftPriceTransactionDocument(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Label.PriceTransactionDocument;
    Label.isDraftPriceTransactionDocument (document) += isDraft###concrete(document);
    Label.descriptionPriceTransactionDocument (document) += description###concrete(document);
END

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS LabelTransaction 'Печать ценников';
TABLE labelTransaction(LabelTransaction);

@defineCreated(LabelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (LabelTransaction);
dateLabelTransaction (transaction) <- currentDate() WHEN SET(transaction IS LabelTransaction);

timeLabelTransaction 'Время' = DATA TIME (LabelTransaction);
timeLabelTransaction (transaction) <- currentTime() WHEN SET(transaction IS LabelTransaction);

dateTimeLabelTransaction 'Дата/время' (t) = dateTimeToDateTime(dateLabelTransaction(t), timeLabelTransaction(t)) PERSISTENT;

departmentStoreLabelTransaction = DATA DepartmentStore (LabelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = nameDepartmentStore(departmentStoreLabelTransaction(transaction));
nameStoreLabelTransaction 'Магазин' (transaction) = nameStore(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));
addressStoreLabelTransaction 'Адрес магазина' (transaction) = addressStore(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));

nameLegalEntityLabelTransaction 'Компания' (transaction) = nameLegalEntityDepartmentStore(departmentStoreLabelTransaction(transaction));
fullNameLegalEntityLabelTransaction 'Компания (полное наименование)' (transaction) = fullNameLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransaction(transaction)));

labelTypeLabelTransaction 'Тип ценника' = DATA LabelType (LabelTransaction) NOT NULL;
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = nameLabelType(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';
           
priceListTypeLabelTransaction = DATA PriceListType (LabelTransaction);     
namePriceListTypeLabelTransaction 'Вид цен' (labelTransaction) = namePriceListType(priceListTypeLabelTransaction(labelTransaction));         

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

topFileTemplateLabelTransaction 'Файл шаблона (верхний)' = fileTemplatePrintOrientation(orientationLabelType(labelTypeLabelTransaction(transaction)));

priceTransactionDocumentLabelTransaction = DATA PriceTransactionDocument (LabelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusLabelPriceTransactionDocument 'Статус печати ценника' (document) =
                                                        CASE
                                                            WHEN skipPriceTransactionDocument(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument
                                                            WHEN printedPriceTransactionDocument(document) THEN 'Распечатан' IF document IS PriceTransactionDocument
                                                            ELSE 'Не распечатан' IF document IS PriceTransactionDocument
                                                        ;

CLASS LabelTransactionDetail 'Строка печати ценников';
TABLE LabelTransactionDetail(LabelTransactionDetail);

labelTransactionLabelTransactionDetail = DATA LabelTransaction (LabelTransactionDetail);

labelTypeLabelTransactionDetail (d) = labelTypeLabelTransaction(labelTransactionLabelTransactionDetail(d));
nameLabelTypeLabelTransactionDetail 'Тип ценника' (d) = nameLabelType(labelTypeLabelTransactionDetail(d));
descriptionLabelTransactionDetail 'Основание загрузки' (d) = descriptionLabelTransaction(labelTypeLabelTransactionDetail(d));

priceListTypeLabelTypeLabelTransactionDetail(d) = priceListTypeLabelType(labelTypeLabelTransactionDetail(d));
priceListTypeLabelTransactionDetail(d) = OVERRIDE priceListTypeLabelTypeLabelTransactionDetail(d), priceListTypeLabelTransaction(labelTransactionLabelTransactionDetail(d)) PERSISTENT;
namePriceListTypeLabelTransactionDetail 'Вид цен' (labelTransactionDetail) = namePriceListType(priceListTypeLabelTransactionDetail(labelTransactionDetail));     

printNullPriceLabelTransactionDetail = printNullPriceLabelType(labelTypeLabelTransactionDetail(detail));

departmentStoreLabelTransactionDetail (d) = departmentStoreLabelTransaction(labelTransactionLabelTransactionDetail(d)) PERSISTENT;

dateTimeLabelTransactionDetail 'Дата/время' (d) = dateTimeLabelTransaction(labelTransactionLabelTransactionDetail(d)) PERSISTENT;
dateLabelTransactionDetail 'Дата' (d) = dateLabelTransaction(labelTransactionLabelTransactionDetail(d));
timeLabelTransactionDetail 'Время' (d) = timeLabelTransaction(labelTransactionLabelTransactionDetail(d));

createdNameUserLabelTransactionDetail 'Создан пользователем' (d) = createdNameUserLabelTransaction(labelTransactionLabelTransactionDetail(d));
createdTimeLabelTransactionDetail 'Время создания' (d) = createdTimeLabelTransaction(labelTransactionLabelTransactionDetail(d));
createdHostnameComputerLabelTransactionDetail 'Создан на компьютере' (d) = createdHostnameComputerLabelTransaction(labelTransactionLabelTransactionDetail(d));

skuLabelTransactionDetail = DATA Sku (LabelTransactionDetail);
nameSkuLabelTransactionDetail 'SKU' (d) = nameSku(skuLabelTransactionDetail(d));
idBarcodeLabelTransactionDetail 'Штрихкод' (b) = idBarcodeSku(skuLabelTransactionDetail(b)); 

batchLabelTransactionDetail = DATA Batch (LabelTransactionDetail);
nameBatchLabelTransactionDetail 'Партия' (d) = nameBatch(batchLabelTransactionDetail(d));

quantityLabelTransactionDetail 'Кол-во' = DATA INTEGER (LabelTransactionDetail);
nameLabelTransactionDetail 'Наименование' = DATA VARSTRING[255] (LabelTransactionDetail);  
priceLabelTransactionDetail 'Цена' = DATA NUMERIC[14,2] (LabelTransactionDetail);
retailPriceLabelTransactionDetail 'Цена до'  = DATA NUMERIC[14,2] (LabelTransactionDetail);
overRetailPriceLabelTransactionDetail = ABSTRACT NUMERIC[14,2] (LabelTransactionDetail);
operationLabelTransactionDetail = ABSTRACT Operation.Operation (LabelTransactionDetail);
nameOperationLabelTransactionDetail 'Операция' = nameOperation(operationLabelTransactionDetail(detail));
discountSumTransactionDetail 'Скидка' (d) = retailPriceLabelTransactionDetail(d) - priceLabelTransactionDetail(d);

FORM printLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction,
                  dateLabelTransaction, timeLabelTransaction, nameStoreLabelTransaction, nameLegalEntityLabelTransaction, 
                  fullNameLegalEntityLabelTransaction, dateTimeLabelTransaction
                  
    
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) READONLY idBarcodeLabelTransactionDetail, nameSkuLabelTransactionDetail, nameBatchLabelTransactionDetail,
                           quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail, retailPriceLabelTransactionDetail, discountSumTransactionDetail
    FILTERS labelTransactionLabelTransactionDetail(d) == l
    REPORTFILES l fileTemplateLabelTransaction(l), TOP topFileTemplateLabelTransaction(l)
;

needCustomPrintLabelTransaction = ABSTRACT BOOLEAN (LabelTransaction);
customPrintLabelTransaction = ABSTRACT ACTION (LabelTransaction);

printLabelTransaction(t) = ACTION {
    IF needCustomPrintLabelTransaction(t) THEN
        customPrintLabelTransaction(t)
    ELSE
        FORM printLabelTransaction OBJECTS l = t PRINT;
}

selectedLabelTransactionDetail 'Отм.' = DATA LOCAL BOOLEAN (LabelTransactionDetail);
deleteNotSelectedLabelTransactionDetail 'Удалить кроме отмеченных' = ACTION (t) {
    DELETE d WHERE labelTransactionLabelTransactionDetail(d) == t AND NOT selectedLabelTransactionDetail(d);
} TOOLBAR;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, dateLabelTransaction, timeLabelTransaction,
                  descriptionLabelTransaction READONLY 
                   
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) selectedLabelTransactionDetail, idBarcodeLabelTransactionDetail READONLY, nameSkuLabelTransactionDetail READONLY, nameBatchLabelTransactionDetail,
                  nameOperationLabelTransactionDetail, quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail, retailPriceLabelTransactionDetail,
                  discountSumTransactionDetail, DELETESESSION
    FILTERS labelTransactionLabelTransactionDetail(d) == l
    
    PROPERTIES(l) TODRAW d deleteNotSelectedLabelTransactionDetail                      
    
    EDIT LabelTransaction OBJECT l    
;
DESIGN customLabelTransaction {
    main {
        preferredSize = (1024, 768);
        MOVE l.box;
        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }
        MOVE functions.box;
    }
}

@extendFormFilterAccessStock(labelTransaction, l, customLabelTransaction, departmentStore, company);

addLabelTransactionDepartmentStore 'Добавить' = ACTION (dep) NEWSESSION {
    FOR ADDOBJ l = LabelTransaction DO {
        ASSIGN departmentStoreLabelTransaction(l) <- dep;
        FORM customLabelTransaction OBJECTS l=l DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN { 
                printLabelTransaction(l);
            apply();
        }            
    }
} TOOLBAR IMAGE 'add.png';

printToLabelTransaction 'Печать ценников' (labelTransaction) = ACTION (labelTransaction) {
        printLabelTransaction(labelTransaction);
} IMAGE 'print.png' IN print;

filterInLabelTransactionDetailSkuDepartmentStore (s,d)= GROUP SUM 1 IF s == skuLabelTransactionDetail(d) BY s, departmentStoreLabelTransactionDetail(d);

FORM labelTransactions 'Печать ценников'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES nameDepartmentStore(d) SELECTOR

    OBJECTS l = LabelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY createdNameUserLabelTransaction, createdTimeLabelTransaction, createdHostnameComputerLabelTransaction
    PROPERTIES(d) addLabelTransactionDepartmentStore TODRAW l FORCE PANEL TOOLBAR 
    PROPERTIES(l) EDITFORM , DELETE FORCE PANEL TOOLBAR 
    PROPERTIES(l) printToLabelTransaction FORCE PANEL 
    FILTERS departmentStoreLabelTransaction(l) == d
    ORDER BY dateLabelTransaction(l), timeLabelTransaction(l)

    OBJECTS dt = LabelTransactionDetail
    PROPERTIES(dt) READONLY idBarcodeLabelTransactionDetail, nameSkuLabelTransactionDetail, nameBatchLabelTransactionDetail,
                            quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail, retailPriceLabelTransactionDetail, discountSumTransactionDetail 
    FILTERS labelTransactionLabelTransactionDetail(dt) == l
    
 // по определенной позиции и складу  
    OBJECTS s = Sku
    PROPERTIES(s)    READONLY idBarcodeSku, nameSku, idSku
    FILTERS filterInLabelTransactionDetailSkuDepartmentStore(s,d)
    OBJECTS dts = LabelTransactionDetail
    PROPERTIES(dts) READONLY nameLabelTypeLabelTransactionDetail, descriptionLabelTransactionDetail, dateLabelTransactionDetail, timeLabelTransactionDetail,
            createdNameUserLabelTransactionDetail, createdTimeLabelTransactionDetail, createdHostnameComputerLabelTransactionDetail,
            idBarcodeLabelTransactionDetail, nameSkuLabelTransactionDetail, nameBatchLabelTransactionDetail,
            quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail, retailPriceLabelTransactionDetail, discountSumTransactionDetail 
    ORDER BY dateLabelTransactionDetail(dts) DESC, timeLabelTransactionDetail(dts) DESC
    FILTERS skuLabelTransactionDetail(dts) == s,
            departmentStoreLabelTransactionDetail(dts) == d
;

@extendFormFilterStockAccess(d, labelTransactions);

DESIGN labelTransactions {
    main {
        MOVE d.box;
        NEW pane{
            fill = 1;
            type = TABBED ;
            NEW topContainer{
                type = SPLITV;
                fill = 1;
                caption = 'Печать ценников';
    
                MOVE l.box;
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;
        
                    MOVE dt.box {
                        caption = 'Спецификация';
                    } 
                    NEW printTab {
                        caption = 'Печатные формы';
                        MOVE l.print;
                    } 
                }              
            }
            NEW skuContainer{
                type = SPLITV;
                fill = 1;
                caption = 'Печать ценников по позиции';  
                          
                MOVE s.box;
                MOVE dts.box;
            }     
        }
        MOVE functions.box;
    }
}

// -------------------------------------------- Действия по печати ценников ------------------------------ //

documentQuantityLabelTransactionDetail = DATA LOCAL NUMERIC[14,3] (LabelTransactionDetail);
documentPriceLabelTransactionDetail = DATA LOCAL NUMERIC[14,2] (LabelTransactionDetail);

calcPriceLabelTransactionDetail (d) =
    IF  batchLabelTransactionDetail(d) THEN
        prevPriceAPriceListTypeBatchStockDateTime(priceListTypeLabelTransactionDetail(d),
                                                  batchLabelTransactionDetail(d),
                                                  departmentStoreLabelTransactionDetail(d),
                                                  dateTimeLabelTransactionDetail(d))
    ELSE
        prevPriceAPriceListTypeSkuStockDateTime(priceListTypeLabelTransactionDetail(d),
                                                skuLabelTransactionDetail(d),
                                                departmentStoreLabelTransactionDetail(d),
                                                dateTimeLabelTransactionDetail(d));

WHEN SESSION FORMS customLabelTransaction
    CHANGED(labelTypeLabelTransactionDetail(d)) DO {
        priceLabelTransactionDetail(d) <- OVERRIDE 
            calcPriceLabelTransactionDetail(d), 
            documentPriceLabelTransactionDetail(d);
        retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d);   
}

WHEN SESSION FORMS customLabelTransaction
    CHANGED(labelTypeLabelTransactionDetail(d)) DO {
        quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d)) THEN 
                                                INTEGER(documentQuantityLabelTransactionDetail(d))
                                             ELSE 
                                                countLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d));
}

createAttributeLabelTransactionDetail = ABSTRACT ACTION LIST (LabelTransactionDetail);

// -------------------------------- Добавление новых атрибутов -------------------------- //
META defineLabelTransactionAttributeAction(object, skuClass, skuProp)
    createAttributeLabelTransactionDetail(d) +=
        ACTION object##LabelTransactionDetail(d) <- skuProp##skuClass(skuLabelTransactionDetail(d));

    EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY object##LabelTransactionDetail;
    EXTEND FORM customLabelTransaction PROPERTIES(d) object##LabelTransactionDetail;
    EXTEND FORM labelTransactions PROPERTIES(dt) READONLY object##LabelTransactionDetail PROPERTIES(dts) READONLY object##LabelTransactionDetail;   
END

META defineLabelTransactionAttribute(object, caption, type, skuClass, skuProp)
    object##LabelTransactionDetail caption  = DATA type (LabelTransactionDetail);
    @defineLabelTransactionAttributeAction(object, skuClass, skuProp);
END

// ---------- Атрибуты по умолчанию ------ //

@defineLabelTransactionAttribute(nameSkuGroupSku, 'Тов. группа', VARSTRING[100], Sku, nameSkuGroup);
@defineLabelTransactionAttribute(shortNameUOMSku, 'Ед. изм.', VARISTRING[10], Sku, shortNameUOM);
@defineLabelTransactionAttribute(nameCountrySku, 'Страна изготовления', VARSTRING[50], Sku, nameCountry);
residentCountrySkuLabelTransactionDetail 'Отечественный производитель' (d) = residentCountry(countrySku(skuLabelTransactionDetail(d)));
supplierSkuLabelTransactionDetail = lastSupplierStockSku(departmentStoreLabelTransactionDetail(d), skuLabelTransactionDetail(d));
nameSupplierSkuLabelTransactionDetail 'Поставщик' (d) = nameLegalEntity(supplierSkuLabelTransactionDetail(d));
fullNameSupplierSkuLabelTransactionDetail 'Поставщик полное наименование' (d) = fullNameLegalEntity(supplierSkuLabelTransactionDetail(d));
shortNameOwnershipSupplierSkuLabelTransactionDetail 'Форма собственности (сокр.)' (d) =shortNameOwnershipLegalEntity(supplierSkuLabelTransactionDetail(d));

EXTEND FORM printLabelTransaction 
    PROPERTIES(d) READONLY residentCountrySkuLabelTransactionDetail, nameSupplierSkuLabelTransactionDetail, 
                  fullNameSupplierSkuLabelTransactionDetail, shortNameOwnershipSupplierSkuLabelTransactionDetail
    PROPERTIES(l) addressStoreLabelTransaction                  
                  
;

EXTEND FORM customLabelTransaction 
    PROPERTIES(d) residentCountrySkuLabelTransactionDetail, nameSupplierSkuLabelTransactionDetail, 
                  fullNameSupplierSkuLabelTransactionDetail, shortNameOwnershipSupplierSkuLabelTransactionDetail
    PROPERTIES(l) addressStoreLabelTransaction                   
;                  
EXTEND FORM labelTransactions 
    PROPERTIES(dt) READONLY residentCountrySkuLabelTransactionDetail, nameSupplierSkuLabelTransactionDetail, 
                   fullNameSupplierSkuLabelTransactionDetail, shortNameOwnershipSupplierSkuLabelTransactionDetail
    PROPERTIES(l) addressStoreLabelTransaction                
;        
nameAddressPhoneLegalEntityLabelTransactionDetail 'Наименование/Адрес/Телефон юрлица' (d) = 
    CONCAT ', ', 
           fullNameLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransactionDetail(d))), 
           addressLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransactionDetail(d))),
           'Тел. ' + phoneLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransactionDetail(d)));
EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY nameAddressPhoneLegalEntityLabelTransactionDetail;
EXTEND FORM customLabelTransaction PROPERTIES(d) nameAddressPhoneLegalEntityLabelTransactionDetail;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY nameAddressPhoneLegalEntityLabelTransactionDetail;

//-------------------------------------- Подбор ------------------------//

addDetailDialogSkuLabelTransactionDetailLabelTransaction 'Подбор товаров' = ACTION (labelTransaction) {
    FORM dialogSku MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR dialogSkuQuantity(sku) INLINE ADDOBJ w = LabelTransactionDetail DO {
            labelTransactionLabelTransactionDetail(w) <- labelTransaction;
            skuLabelTransactionDetail(w) <- sku;
            quantityLabelTransactionDetail(w) <- INTEGER(dialogSkuQuantity(sku));
            documentQuantityLabelTransactionDetail(w) <- dialogSkuQuantity(sku); 
            createAttributeLabelTransactionDetail(w);               
        }
    }
    dialogSkuQuantity(sku) <- NULL;
} TOOLBAR;

addDetailDialogSkuStockLabelTransactionDetailLabelTransaction 'Подбор товаров' = ACTION (labelTransaction) {
    dialogSkuStock() <- departmentStoreLabelTransaction(labelTransaction);
    dialogSkuAll(sku) <- NULL;

    addDetailDialogSkuLabelTransactionDetailLabelTransaction(labelTransaction);
} TOOLBAR;
            
@defineDocumentDetailActions(labelTransaction);

@defineDocumentHeaderSkuQuantity(labelTransaction, sku);

//-- Подбор товар/партии

labelTransactionDetailSkuLabelTransactionDepartmentStore (sku, labelTransaction, stock) =  GROUP MAX labelTransactionDetail
    BY skuLabelTransactionDetail(labelTransactionDetail), labelTransactionLabelTransactionDetail(labelTransactionDetail), departmentStoreLabelTransactionDetail(labelTransactionDetail);
labelTransactionDetailSkuLabelTransaction (sku, labelTransaction) = labelTransactionDetailSkuLabelTransactionDepartmentStore(sku, labelTransaction, departmentStoreLabelTransaction(labelTransaction));

currentBalanceSkuLabelTransaction 'Остаток' (sku, labelTransaction) = currentBalanceSkuStock(sku, departmentStoreLabelTransaction(labelTransaction));
prevCurrentBalanceSkuLabelTransaction 'Остаток' (sku, labelTransaction) = prevCurrentBalanceSkuStock(sku, departmentStoreLabelTransaction(labelTransaction));
backgroundQuantitySkuLabelTransaction 'Цвет' (sku, labelTransaction) = ABSTRACT CASE COLOR (Sku, LabelTransaction);  

changeQuantityValueSkuLabelTransaction = ACTION (sku, labelTransaction) {
    IF labelTransactionDetailSkuLabelTransaction(sku, labelTransaction) THEN {
        IF requestedNumeric() THEN {
            quantityLabelTransactionDetail(labelTransactionDetail) <- INTEGER(requestedNumeric()) WHERE labelTransactionDetail == labelTransactionDetailSkuLabelTransaction(sku, labelTransaction);
            documentQuantityLabelTransactionDetail(labelTransactionDetail) <- requestedNumeric() WHERE labelTransactionDetail == labelTransactionDetailSkuLabelTransaction(sku, labelTransaction);
        } ELSE {
            DELETE d WHERE d == labelTransactionDetailSkuLabelTransaction(sku, labelTransaction);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = LabelTransactionDetail DO {
                labelTransactionLabelTransactionDetail(d) <- labelTransaction;
                skuLabelTransactionDetail(d) <- sku;
                quantityLabelTransactionDetail (d) <- INTEGER(requestedNumeric());
                documentQuantityLabelTransactionDetail(d) <- requestedNumeric();
                createAttributeLabelTransactionDetail(d);
            }
        }
    }
}

changeQuantitySkuLabelTransaction = ACTION (sku, labelTransaction) {
    REQUEST NUMERIC[14,3] INPUT;
    EXEC changeQuantityValueSkuLabelTransaction(sku, labelTransaction);
}

// Выбор всего остатка
allQuantitySkuLabelTransaction 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, LabelTransaction);
changeAllQuantitySkuLabelTransaction = ACTION (sku, labelTransaction) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        requestedNumeric() <- NULL;
        allQuantitySkuLabelTransaction (sku,labelTransaction) <- TRUE;
        requestedNumeric() <- prevCurrentBalanceSkuLabelTransaction(sku,labelTransaction);
        changeQuantityValueSkuLabelTransaction(sku, labelTransaction);
    } ELSE {
        allQuantitySkuLabelTransaction (sku,labelTransaction) <- NULL;
        requestedNumeric() <- NULL;
        changeQuantityValueSkuLabelTransaction(sku, labelTransaction);
    }
}
priceSkuLabelTransaction 'Цена' (sku, labelTransaction) = prevPriceBPriceListTypeSkuStockDateTime(priceListTypeLabelType(labelTypeLabelTransaction(labelTransaction)), sku, departmentStoreLabelTransaction(labelTransaction), dateTimeLabelTransaction(labelTransaction));

@extendFormDocumentSku(labelTransaction, customLabelTransaction, l);
                           
EXTEND FORM customLabelTransaction 
    
    PROPERTIES(l) TODRAW d addDetailDialogSkuStockLabelTransactionDetailLabelTransaction
    
    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuLabelTransaction(ks, l) 'F10' DEFAULT
        FILTER 'В документе ' quantityLabelTransactionDetailSkuLabelTransaction(ks, l) 'F9'
                  
;
// ------------------------- Подключение печати ценников в документ --------------------- //
META defineDocumentLabelTransaction (document, detailProp, skuProp, stockProp, prefix)
    create###document##LabelTransaction 'Распечатать ценники' = ACTION (document) NEWSESSION {        
        
        IF isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is###document(document) AND (confirmed() OR NOT (isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()))) THEN { 
            LOCAL inSku = BOOLEAN (Sku);
            inSku(sku) <- TRUE IF count###detailProp##Detail###skuProp###document(sku, document);
        
            // бежим по всем типам ценников из управленческих параметров
            // для каждого создаем по операции печати ценников
            FOR ([= GROUP SUM 1 IF inSku(sku) AND inLabelTypeSkuDepartmentStore(labelType, sku, departmentStore) BY labelType, departmentStore](labelType, stockProp###document(document)))
                ADDOBJ t = LabelTransaction DO {
                    departmentStoreLabelTransaction(t) <- stockProp###document(document);
                    priceTransactionDocumentLabelTransaction(t) <- document;
                    labelTypeLabelTransaction(t) <- labelType;
                    
                    FOR document###detailProp##Detail(dd) == document AND 
                        inSku(sku) AND sku == skuProp###detailProp##Detail(dd) AND 
                        inLabelTypeSkuDepartmentStore(labelType, sku, stockProp###document(document))
                        ADDOBJ d = LabelTransactionDetail DO {
                        labelTransactionLabelTransactionDetail(d) <- t;
                        skuLabelTransactionDetail(d) <- sku;
                        batchLabelTransactionDetail(d) <- batch###detailProp##Detail(dd);
    
                        nameLabelTransactionDetail(d) <- IF batchLabelTransactionDetail(d) THEN documentNameSkuBatch(batchLabelTransactionDetail(d)) ELSE nameSku(skuLabelTransactionDetail(d));
                        createAttributeLabelTransactionDetail(d);
    
                        quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelType, skuLabelTransactionDetail(d))
                                                                THEN INTEGER(prefix###quantity###detailProp##Detail(dd))
                                                             ELSE countLabelTypeSku(labelType, skuLabelTransactionDetail(d));

                        priceLabelTransactionDetail(d) <- calcPriceLabelTransactionDetail(d);
                        retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d); 
                    }
                    DELETE d WHERE labelTransactionLabelTransactionDetail(d) == t AND (NOT priceLabelTransactionDetail(d) AND NOT printNullPriceLabelTransactionDetail(d));
                    printLabelTransaction(t);
            }
            printedPriceTransactionDocument(document) <- TRUE WHERE isPosted###document(document);
        }

        apply();
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION {

        
        IF isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is###document(document) AND (confirmed() OR NOT (isDraft###document(document) OR NOT (dateTime###document(document) <= currentDateTime()))) THEN { 
            
            LOCAL inSku = BOOLEAN (Sku);    
            inSku(sku) <- TRUE IF count###detailProp##Detail###skuProp###document(sku, document);
        
            FOR ADDOBJ t = LabelTransaction DO {
                departmentStoreLabelTransaction(t) <- stockProp###document(document);
                priceTransactionDocumentLabelTransaction(t) <- document;
    
                FOR document###detailProp##Detail(dd) == document AND inSku(sku) AND sku == skuProp###detailProp##Detail(dd) 
                    ADDOBJ d = LabelTransactionDetail DO {
                        labelTransactionLabelTransactionDetail(d) <- t;
                        skuLabelTransactionDetail(d) <- sku;
                        batchLabelTransactionDetail(d) <- batch###detailProp##Detail(dd);
    
                        nameLabelTransactionDetail(d) <- IF batchLabelTransactionDetail(d) THEN documentNameSkuBatch(batchLabelTransactionDetail(d)) ELSE nameSku(skuLabelTransactionDetail(d));
                        documentQuantityLabelTransactionDetail(d) <- prefix###quantity###detailProp##Detail(dd); 
                        
                        createAttributeLabelTransactionDetail(d);
                }
                FORM customLabelTransaction OBJECTS l = t MANAGESESSION MODAL ;
                IF formResult() == FormResult.ok THEN {
                        printLabelTransaction(t);                
                }
            }            
        }            
        
    } TOOLBAR;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND isOpened###document(document) AND NOT Label.skipPriceTransactionDocument(document);
                                                                                               //AND NOT printedPriceTransactionDocument(document);
    backgroundPrintLabelTransaction###document 'Цвет' (document) = RGB(212,255,212) IF showPrintLabelTransaction###document(document) AND NOT printedPriceTransactionDocument(document);
END

META defineDocumentLabelTransaction (document, skuProp, stockProp, prefix)
    @defineDocumentLabelTransaction (document, document, skuProp, stockProp, prefix);
END

META defineDocumentLabelTransaction (document, skuProp, stockProp)
    @defineDocumentLabelTransaction (document, skuProp, stockProp, );
END

META extendFormDocumentLabelTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusLabelPriceTransactionDocument BACKGROUND backgroundPrintLabelTransaction###document(object) READONLY AFTER afterProp###document(object),
                           create###document##LabelTransaction FORCE PANEL SHOWIF showPrintLabelTransaction###document(object), 
                           createSnapshot###document##LabelTransaction FORCE PANEL SHOWIF isOpened###document(object)
    ;

    DESIGN form {
        propContainer{
            NEW label {
                caption = 'Ценники' ;
                type = CONTAINERV;
                
                MOVE PROPERTY (create###document##LabelTransaction(object));
                MOVE PROPERTY (createSnapshot###document##LabelTransaction(object));
            }
        }
    }
END

// ---------------------------------------------------------- Стандартные значения --------------------------------- //

loadDefaultLabelType 'Добавить тип ценника' = ACTION(name, width, height, orientation, file) {
    FOR ADDOBJ lt = LabelType DO {
        ASSIGN nameLabelType(lt) <- name;
        ASSIGN widthLabelType(lt) <-width;
        ASSIGN heightLabelType(lt) <-height;
        ASSIGN orientationLabelType(lt) <- orientation;
        ASSIGN fileTemplateLabelType(lt) <-file;
    }
}

loadDefaultLabelTypes 'Загрузить стандартные ценники' = ACTION() {
    EXEC loadDefaultLabelType('Ценник 200x130', 200, 130, PrintOrientation.portrait, 'Label_printLabelTransaction_l.jrxml');
    EXEC loadDefaultLabelType('Ценник 595x480', 595, 480, PrintOrientation.portrait, 'Label_printLabelTransaction_l_a4.jrxml');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultLabelTypes);

NAVIGATOR {
    retailNavigator {
        NEW labelNavigator 'Ценники' {
            ADD labelTransactions;
            ADD labelTypes;
        }
    }
}

selectSkuLabelTypeDepartmentStore = DATA LOCAL BOOLEAN (Sku, LabelType, DepartmentStore);

createLabelTransactionDepartmentStore 'Распечатать ценники' = ACTION (departmentStore) {
    // бежим по всем типам ценников из управленческих параметров
    // для каждого создаем по операции печати ценников
    FOR [= GROUP SUM 1 IF selectSkuLabelTypeDepartmentStore(s,l,d) BY l, d](labelType, departmentStore) ADDOBJ t = LabelTransaction DO { 
        departmentStoreLabelTransaction(t) <- departmentStore;
        labelTypeLabelTransaction(t) <- labelType;
        
        FOR selectSkuLabelTypeDepartmentStore(sku, labelType, departmentStore) ADDOBJ d = LabelTransactionDetail DO {
            
            labelTransactionLabelTransactionDetail(d) <- t;
            skuLabelTransactionDetail(d) <- sku;

            nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
            createAttributeLabelTransactionDetail(d);

            quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelType, skuLabelTransactionDetail(d))
                                                    THEN INTEGER(currentBalanceSkuStock(sku, departmentStore))
                                                 ELSE countLabelTypeSku(labelType, skuLabelTransactionDetail(d));
                                                 
            priceLabelTransactionDetail(d) <- calcPriceLabelTransactionDetail(d);
            retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d);
        } 
        // вызываем печатную форму для каждого из них        
        printLabelTransaction(t);                 
    }
} TOOLBAR;

createSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники' = ACTION (departmentStore) {

    FOR ADDOBJ t = LabelTransaction DO {
        departmentStoreLabelTransaction(t) <- departmentStore;

        FOR selectSku(sku) ADDOBJ d = LabelTransactionDetail DO {
            labelTransactionLabelTransactionDetail(d) <- t;
            skuLabelTransactionDetail(d) <- sku;

            nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
            documentQuantityLabelTransactionDetail(d) <- currentBalanceSkuStock(sku, departmentStore); 

            createAttributeLabelTransactionDetail(d);
        }
        
        FORM customLabelTransaction OBJECTS l = t MODAL;
        IF formResult() == FormResult.ok THEN {    
            printLabelTransaction(t);
        } ELSE {
            cancel();
        }      
    }  
} TOOLBAR ;

// --------------------------------- Печать ценников по отмеченным по sku ------------------------- //

printSelectedSkuLabelTransactionDepartmentStore 'Распечатать ценники' = ACTION (departmentStore) {
    IF [=GROUP SUM 1 IF selectSku(sku)]() THEN {
        selectSkuLabelTypeDepartmentStore(sku, labelType, departmentStore) <- selectSku(sku) AND inLabelTypeSkuDepartmentStore(labelType, sku, departmentStore);   
        createLabelTransactionDepartmentStore(departmentStore);
        selectSku(sku) <- NULL;
    } ELSE {
        MESSAGE 'Не отмечены товары, для которых необходима печать ценников.';
    }
} TOOLBAR;

printSelectedSkuSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники' = ACTION (departmentStore) {
    IF [=GROUP SUM 1 IF selectSku(sku)]() THEN {            
        createSnapshotLabelTransactionDepartmentStore(departmentStore);
        selectSku(sku) <- NULL;
    } ELSE {
        MESSAGE 'Не отмечены товары, для которых необходима печать ценников.';
    }
} TOOLBAR;


// --------------------------------- Печать ценников по отмеченным по складу ------------------------- //

notResetLabelSelectSku 'Не сбрасывать отмеченные товары при печати ценников' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetLabelSelectSku
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(notResetLabelSelectSku());
    }
}
createSelectedSkuStockLabelTransaction 'Распечатать ценники' = ACTION () {
    IF [=GROUP SUM 1 IF selectSkuStock(sku, stock)]() THEN {
        NEWSESSION NESTED selectSkuStock {
            FOR [= GROUP SUM 1 IF selectSkuStock(sku, stock) BY stock] (stock) AND stock IS DepartmentStore DO {        
                selectSkuLabelTypeDepartmentStore(sku, labelType, stock) <- selectSkuStock(sku, stock) AND inLabelTypeSkuDepartmentStore(labelType, sku, stock);   
                createLabelTransactionDepartmentStore(stock);
            }
            
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            selectSkuStock(sku, stock) <- NULL;
        }
    }
} TOOLBAR;

createSelectedSkuStockSnapshotLabelTransaction 'Перепечатать ценники' = ACTION () {
    IF [=GROUP SUM 1 IF selectSkuStock(sku, stock)]() THEN {            
        NEWSESSION NESTED selectSkuStock {
            FOR [= GROUP SUM 1 IF selectSkuStock(sku, stock) BY stock](stock) AND stock IS DepartmentStore DO {  
                selectSku(sku) <- TRUE WHERE  selectSkuStock(sku, stock);   
                                   
                createSnapshotLabelTransactionDepartmentStore(stock);
            }
            
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            selectSkuStock(sku, stock) <- NULL;
        }
    }
} TOOLBAR;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() TODRAW sts createSelectedSkuStockLabelTransaction, createSelectedSkuStockSnapshotLabelTransaction 
;

// Инкрементная загрузка
GROUP incrementMachineryLabel 'Инкрементная печать ценников' : public;

priceLabelTransactionDetailSkuDepartmentStore 'Текущая цена на ценниках' (sku, stock) =
    GROUP LAST priceLabelTransactionDetail(ledger)
          BY skuLabelTransactionDetail(ledger), departmentStoreLabelTransactionDetail(ledger)
          ORDER dateTimeLabelTransactionDetail(ledger), ledger
          WHERE ledger IS LabelTransactionDetail PERSISTENT;

needLabelTransactionPriceListTypeSkuDepartmentStore (type, sku, stock) = 
    prevPriceAPriceListTypeSkuStockDateTime(type, sku, stock, currentDateTime()) AND NOT prevPriceAPriceListTypeSkuStockDateTime(type,  sku, stock, currentDateTime()) == priceLabelTransactionDetailSkuDepartmentStore(sku, stock); 

createAllLabelTransactionDepartmentStore 'Все товары' = ACTION (stock) {
    selectSkuLabelTypeDepartmentStore(sku, labelType, stock) <- needLabelTransactionPriceListTypeSkuDepartmentStore(priceListTypeLabelType(labelType), sku, stock) 
                AND inLabelTypeSkuDepartmentStore(labelType, sku, stock);   
    
    createLabelTransactionDepartmentStore(stock);

    apply();
    IF canceled() THEN {
        cancel();
    }        
} IN incrementMachineryLabel;

createBalanceLabelTransactionDepartmentStore 'Остатки' = ACTION (stock) {
    selectSkuLabelTypeDepartmentStore(sku, labelType, stock) <- needLabelTransactionPriceListTypeSkuDepartmentStore(priceListTypeLabelType(labelType), sku, stock) 
                AND inLabelTypeSkuDepartmentStore(labelType, sku, stock) AND balanceASkuStockDateTime(sku, stock, currentDateTime());   
                
    createLabelTransactionDepartmentStore(stock);

    apply();
    IF canceled() THEN {
        cancel();
    }        
} IN incrementMachineryLabel;


EXTEND FORM labelTransactions 
    PROPERTIES(d) createBalanceLabelTransactionDepartmentStore, createAllLabelTransactionDepartmentStore
;
DESIGN labelTransactions {
    NEW header BEFORE pane{
        type = CONTAINERH;
        MOVE d.box;
        MOVE d.incrementMachineryLabel;
    }
} 


DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW labelContainer {
            caption = 'Ценники';
            type = CONTAINERV;
            MOVE PROPERTY (createSelectedSkuStockLabelTransaction());
            MOVE PROPERTY (createSelectedSkuStockSnapshotLabelTransaction());
        } 
    }
}


