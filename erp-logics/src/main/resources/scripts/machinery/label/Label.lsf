MODULE Label;

REQUIRE System, Store, Stock, Barcode, PriceListType, PriceRoundStore, PurchaseLedger;

// Ориентация страницы
CLASS PrintOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}
TABLE printOrientation(PrintOrientation);

fileTemplate 'Файл шаблона' = DATA VARSTRING[200] (PrintOrientation);

FORM printOrientation 'Ориентация'
    OBJECTS o = PrintOrientation FIXED PANEL 
    PROPERTIES(o) staticCaption, fileTemplate  
    EDIT PrintOrientation OBJECT o
;

FORM printOrientations 'Ориентации'
    OBJECTS o = PrintOrientation
    PROPERTIES(o) READONLY staticCaption, fileTemplate  
    PROPERTIES(o) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG PrintOrientation OBJECT o
;

onStarted() += ACTION {
    fileTemplate(PrintOrientation o) <- 'Label_printLabelTransaction.jrxml' WHERE o == PrintOrientation.landscape; 
    fileTemplate(PrintOrientation o) <- 'Label_printLabelTransaction_P.jrxml' WHERE o == PrintOrientation.portrait; 
}

// типы ценников
CLASS LabelType 'Тип ценника';
TABLE labelType(LabelType);

name 'Наименование' = DATA VARISTRING[50](LabelType);

@defineExternalizable(labelType, VARSTRING[100]);
width 'Ширина' = DATA INTEGER (LabelType);
height 'Высота' = DATA INTEGER (LabelType);

orientation = DATA PrintOrientation (LabelType);
nameOrientation 'Ориентация' (LabelType labelType) = staticCaption(orientation(labelType));

fileTemplate 'Файл шаблона' = DATA VARSTRING[200] (LabelType);

priceListType = DATA PriceListType (LabelType);
namePriceListType 'Вид цен' (LabelType labelType) = name(priceListType(labelType));

TABLE labelTypeStoreType (LabelType, StoreType);
TABLE labelTypeStore (LabelType, Store);
TABLE labelTypeDepartmentStore (LabelType, DepartmentStore);

in 'Включен' = DATA BOOLEAN (LabelType);
in(LabelType labelType) <- TRUE WHEN SET(labelType IS LabelType);

inData 'Включен' (labelType, storeType) = DATA BOOLEAN (LabelType, StoreType);
in 'Включен' (LabelType labelType, StoreType storeType) =
    OVERRIDE in(labelType) AND storeType IS StoreType, inData(labelType, storeType);
inData 'Включен' (labelType, store) = DATA BOOLEAN (LabelType, Store);
in 'Включен' (LabelType labelType, Store store) =
    OVERRIDE in(labelType, storeType(store)), inData(labelType, store);
inData 'Включен' (labelType, departmentStore) = DATA BOOLEAN (LabelType, DepartmentStore);
in 'Включен' (LabelType labelType, DepartmentStore departmentStore) =
    OVERRIDE in(labelType, store(departmentStore)), inData(labelType, departmentStore) PERSISTENT;

groupType = DATA GroupType (LabelType);
nameGroupType 'Тип классификатора' (LabelType labelType) = name(groupType(labelType));

TABLE labelTypeGroup (LabelType, Group);
dataIn 'Вкл.' = DATA BOOLEAN (LabelType, Group);
TABLE labelTypeSku (LabelType, Sku);
dataIn 'Вкл.' = DATA BOOLEAN (LabelType, Sku);

levelParent (labelType, group) = GROUP MIN level(Group group, Group parent) IF dataIn(LabelType labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParent (LabelType labelType, Group group) = group(group, levelParent (labelType, group));
nearestIn 'Вкл.' (LabelType labelType, Group group) =
    dataIn(labelType, nearestParent (labelType, group)) PERSISTENT;

in 'Вкл.' (LabelType labelType, Group group) =
    OVERRIDE nearestIn(labelType, group), dataIn(labelType, group) PERSISTENT;

in 'Вкл.' (LabelType labelType, Sku sku) =
    OVERRIDE in(labelType, group(groupType(labelType), sku)), dataIn(labelType, sku);

over = ABSTRACT BOOLEAN (LabelType, Sku, DepartmentStore);
skip = ABSTRACT BOOLEAN (LabelType, Sku, DepartmentStore);
in (LabelType labelType, Sku sku, DepartmentStore departmentStore) = ((in(labelType, sku) 
    AND in(labelType, departmentStore)) AND NOT skip(labelType, sku, departmentStore)) OR over(labelType, sku, departmentStore);

//-- Множитель
dataCount 'Множитель' = DATA INTEGER (LabelType, Group);
dataCount 'Множитель' = DATA INTEGER (LabelType, Sku);

levelParentCountLabel (labelType, group) = GROUP MIN level(Group group, Group parent) IF dataCount(LabelType labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentCountLabel (LabelType labelType, Group group) = group(group, levelParentCountLabel (labelType, group));
nearestCountLabel 'Множитель' (LabelType labelType, Group group) =
    dataCount(labelType, nearestParentCountLabel (labelType, group)) PERSISTENT;

count 'Множитель' (LabelType labelType, Group group) = OVERRIDE
    1 IF group IS Group IF labelType IS LabelType,
    nearestCountLabel(labelType, group),
    dataCount(labelType, group) PERSISTENT;

count 'Множитель' (LabelType labelType, Sku sku) =
    OVERRIDE count(labelType, group(groupType(labelType), sku)), dataCount(labelType, sku);

//-- Количество для печати ценника брать множитель или из документа.
include 'Из документа'= DATA BOOLEAN (LabelType);
dataInclude 'Из документа' = DATA BOOLEAN (LabelType, Group);
dataInclude 'Из документа' = DATA BOOLEAN (LabelType, Sku);

levelParentIncludeLabel (labelType, group) = GROUP MIN level(Group group, Group parent) IF dataInclude(LabelType labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentIncludeLabel (LabelType labelType, Group group) = group(group, levelParentIncludeLabel (labelType, group));
nearestIncludeLabel 'Из документа' (LabelType labelType, Group group) =
    dataInclude(labelType, nearestParentIncludeLabel (labelType, group)) PERSISTENT;

include 'Из документа' (LabelType labelType, Group group) = OVERRIDE
    include(labelType) AND group IS Group,
    nearestIncludeLabel(labelType, group),
    dataInclude(labelType, group) PERSISTENT;

include 'Из документа' (LabelType labelType, Sku sku) = OVERRIDE
    include(labelType, group(groupType(labelType), sku)),
    dataInclude(labelType, sku);

//печать для нулевых цен
printNullPrice 'Включать позиций без цен' = DATA BOOLEAN (LabelType);

notPrintRetailPrice 'Не печатать без цены до' = DATA BOOLEAN (LabelType);

FORM labelType 'Тип ценника'
    OBJECTS l = LabelType FIXED PANEL
    PROPERTIES(l) id, name, width, height, nameOrientation, fileTemplate,
                  namePriceListType, nameGroupType, printNullPrice, notPrintRetailPrice

    TREE treeStore a=STRING[3], st=StoreType, s=Store
    PROPERTIES READONLY OBJVALUE(a), name[StockGroup](st), name(s)
    FILTERS stringEqualsAll(a), in(st, s)

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS (d IS DepartmentStore AND NOT s IS Store AND NOT st IS StoreType) OR
            (store(d)==s AND st IS StoreType) OR
            (storeType(d)==st AND NOT s IS Store)
    PROPERTIES(l) TODRAW a FORCE GRID in, include
    PROPERTIES in(l,st), in(l,s), in(l,d)

    ORDER BY depName

    TREE treeGroup g=Group PARENT parent
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(l)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    PROPERTIES(l, g) in, count, include

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode
    FILTERS isParent(g, sk) OR sk IS Sku AND NOT g
    PROPERTIES(l, sk) in, count, include

    EDIT LabelType OBJECT l
;
@extendFormFilterStockAccess(d, labelType);
@extendFormFilterStockGroupAccess(st, labelType);
@extendFormFilterStockGroupAccess(s, labelType);

DESIGN labelType {
    main {
        preferredSize = (1024, 768);

        MOVE l.box {
            NEW wor1 {
                type = CONTAINERH;
                MOVE PROPERTY(name(l));
                MOVE PROPERTY(width(l));
                MOVE PROPERTY(height(l));
                MOVE PROPERTY(nameOrientation(l));
                MOVE PROPERTY(printNullPrice(l));
            }
            NEW wor2 {
                type = CONTAINERH;
                MOVE PROPERTY(id(l));
                MOVE PROPERTY(fileTemplate(l));
                MOVE PROPERTY(namePriceListType(l));
                MOVE PROPERTY(nameGroupType(l));
            }
        };
        NEW specification{
            type = TABBED;
            fill = 1;
            NEW departmentCase {
                caption = 'Склады';
                type = CONTAINERH;
                MOVE treeStore.tree.box;
                MOVE d.box {fill = 2;}
            }
            NEW itemCase {
                caption = 'Товары';
                NEW row1 {
                    caption = 'Классификатор';
                    MOVE PROPERTY(nameGroupType(l));
                }
                NEW row2 {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE treeGroup.tree.box;
                    MOVE sk.box {fill = 2;}
                }
            }
        }
        MOVE functions.box;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = LabelType
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate, namePriceListType, printNullPrice
    PROPERTIES(l)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG LabelType OBJECT l
;

//---------------------------- Документы для печати ценников ----------------------------------------//

CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraft 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
description 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skip 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

printed 'Распечатан' = DATA BOOLEAN (PriceTransactionDocument);
printed(PriceTransactionDocument document) <- NULL WHEN SET(isDraft(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Label.PriceTransactionDocument;
    isDraft[PriceTransactionDocument] (concrete document) += isDraft(document);
    description[PriceTransactionDocument] (concrete document) += description(document);
END

createLabelTransaction 'Распечатать ценники' = ACTION ABSTRACT (PriceTransactionDocument) TOOLBAR CONFIRM;
createSnapshotLabelTransaction 'Перепечатать ценники' = ACTION ABSTRACT (PriceTransactionDocument) TOOLBAR;

showPrintLabelTransaction = ABSTRACT BOOLEAN (PriceTransactionDocument);

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS LabelTransaction 'Печать ценников';
TABLE labelTransaction(LabelTransaction);

@defineCreated(LabelTransaction);

date 'Дата' = DATA DATE (LabelTransaction);
date (LabelTransaction transaction) <- currentDate() WHEN SET(transaction IS LabelTransaction);

time 'Время' = DATA TIME (LabelTransaction);
time (LabelTransaction transaction) <- currentTime() WHEN SET(transaction IS LabelTransaction);

dateTime 'Дата/время' (LabelTransaction t) = dateTimeToDateTime(date(t), time(t)) PERSISTENT IN recognize;

departmentStore = DATA DepartmentStore (LabelTransaction);
nameDepartmentStore 'Отдел магазина' (LabelTransaction transaction) = name(departmentStore(transaction)) IN recognize;
nameStore 'Магазин' (LabelTransaction transaction) = name(store(departmentStore(transaction)));
addressStore 'Адрес магазина' (LabelTransaction transaction) = address(store(departmentStore(transaction)));

nameLegalEntity 'Компания' (LabelTransaction transaction) = nameLegalEntity(departmentStore(transaction));
fullNameLegalEntity 'Компания (полное наименование)' (LabelTransaction transaction) = fullName(legalEntity(departmentStore(transaction)));

labelType 'Тип ценника' = DATA LabelType (LabelTransaction) NOT NULL;
nameLabelType 'Тип ценника' (LabelTransaction transaction) = name(labelType(transaction)) IN recognize;

//CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
//           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';
           
priceListType = DATA PriceListType (LabelTransaction);     
namePriceListType 'Вид цен' (LabelTransaction labelTransaction) = name(priceListType(labelTransaction));         

fileTemplate 'Файл шаблона' (LabelTransaction transaction) = fileTemplate(labelType(transaction));

topFileTemplate 'Файл шаблона (верхний)' = fileTemplate(orientation(labelType(LabelTransaction transaction)));

priceTransactionDocument = DATA PriceTransactionDocument (LabelTransaction);
description 'Основание загрузки' (LabelTransaction transaction) =
    description(priceTransactionDocument(transaction));

statusLabel 'Статус печати ценника' (PriceTransactionDocument document) =
                                                        CASE
                                                            WHEN skip(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument
                                                            WHEN printed(document) THEN 'Распечатан' IF document IS PriceTransactionDocument
                                                            ELSE 'Не распечатан' IF document IS PriceTransactionDocument
                                                        ;

CLASS LabelTransactionDetail 'Строка печати ценников';
TABLE LabelTransactionDetail(LabelTransactionDetail);

labelTransaction = DATA LabelTransaction (LabelTransactionDetail) INDEXED;

labelType (LabelTransactionDetail d) = labelType(labelTransaction(d));
nameLabelType 'Тип ценника' (LabelTransactionDetail d) = name(labelType(d));
description 'Основание загрузки' (LabelTransactionDetail d) = description[LabelTransaction](labelType(d));

priceListTypeLabelType(LabelTransactionDetail d) = priceListType(labelType(d));
priceListType(LabelTransactionDetail d) = OVERRIDE priceListTypeLabelType(d), priceListType(labelTransaction(d)) PERSISTENT;
namePriceListType 'Вид цен' (LabelTransactionDetail labelTransactionDetail) = name(priceListType(labelTransactionDetail));     

printNullPrice = printNullPrice(labelType(LabelTransactionDetail detail));
notPrintRetailPrice = notPrintRetailPrice(labelType(LabelTransactionDetail detail));

departmentStore (LabelTransactionDetail d) = departmentStore(labelTransaction(d)) PERSISTENT;

dateTime 'Дата/время' (LabelTransactionDetail d) = dateTime(labelTransaction(d)) PERSISTENT;
date 'Дата' (LabelTransactionDetail d) = date(labelTransaction(d));
time 'Время' (LabelTransactionDetail d) = time(labelTransaction(d));

createdNameUser 'Создан пользователем' (LabelTransactionDetail d) = createdNameUser(labelTransaction(d));
createdTime 'Время создания' (LabelTransactionDetail d) = createdTime(labelTransaction(d));
createdHostnameComputer 'Создан на компьютере' (LabelTransactionDetail d) = createdHostnameComputer(labelTransaction(d));

sku = DATA Sku (LabelTransactionDetail) INDEXED;
nameSku 'SKU' (LabelTransactionDetail d) = name(sku(d));
dataBarcode = DATA Barcode (LabelTransactionDetail);
idBarcode 'Штрихкод' (LabelTransactionDetail d) = OVERRIDE idBarcode(sku(d)), id(dataBarcode(d)) MINCHARWIDTH 15 PREFCHARWIDTH 30; 

batch = DATA Batch (LabelTransactionDetail) INDEXED;
nameBatch 'Партия' (LabelTransactionDetail d) = name(batch(d));

quantity 'Кол-во' = DATA INTEGER (LabelTransactionDetail);
name 'Наименование' = DATA VARSTRING[255] (LabelTransactionDetail);  
price 'Цена' = DATA NUMERIC[14,2] (LabelTransactionDetail);
retailPrice 'Цена до'  = DATA NUMERIC[14,2] (LabelTransactionDetail);
overRetailPrice = ABSTRACT NUMERIC[14,2] (LabelTransactionDetail);
operation = ABSTRACT Operation.Operation (LabelTransactionDetail);
nameOperation 'Операция' = name(operation(LabelTransactionDetail detail));
discountSum 'Скидка' (LabelTransactionDetail d) = retailPrice(d) - price(d);

fullNameLegalEntity 'Компания (полное наименование)' (LabelTransactionDetail d) = fullNameLegalEntity(labelTransaction(d));

priceLabelTransactionDetail 'Текущая цена на ценниках' (sku, stock) =
    GROUP LAST (price(LabelTransactionDetail ledger) / OVERRIDE 1.0, amount(dataBarcode(ledger)))
          BY sku(ledger), departmentStore(ledger)
          ORDER dateTime(ledger), ledger
          WHERE ledger IS LabelTransactionDetail PERSISTENT TABLE extraSkuStock;

firstSort = ABSTRACT OVERRIDE FIRST VARSTRING[100] (LabelTransactionDetail);
secondSort = ABSTRACT OVERRIDE FIRST VARSTRING[100] (LabelTransactionDetail);

skipPrint 'Пропустить' = DATA LOCAL BOOLEAN (LabelTransactionDetail);

FORM printLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction FIXED PANEL
    PROPERTIES(l) READONLY nameLabelType, nameDepartmentStore, description,
                  date, time, nameStore, nameLegalEntity, 
                  fullNameLegalEntity, dateTime                  
    
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) READONLY idBarcode, nameSku, nameBatch,
                           quantity, name, price, 
                           retailPrice, discountSum, fullNameLegalEntity,
                           firstSort, secondSort
    FILTERS labelTransaction(d) == l,
            NOT skipPrint(d)
    ORDER BY firstSort(d), secondSort(d)
    REPORTFILES l fileTemplate(l), TOP topFileTemplate(l)
;

needCustomPrint = ABSTRACT BOOLEAN (LabelTransaction);
customPrint = ACTION ABSTRACT (LabelTransaction);

print(LabelTransaction t) = ACTION {
    IF needCustomPrint(t) THEN
        customPrint(t)
    ELSE
        FORM printLabelTransaction OBJECTS l = t PRINT;
}

selected 'Отм.' = DATA LOCAL BOOLEAN (LabelTransactionDetail);
deleteNotSelectedDetail 'Удалить кроме отмеченных'(LabelTransaction t) = ACTION {
    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT selected(d);
} TOOLBAR;

changeBarcode(LabelTransactionDetail d)  = ACTION {
    IF [= GROUP SUM 1 IF id(Barcode b) BY sku(b)](sku(d)) > 1 THEN {
        REQUEST OBJECT b
        FORM barcodeSku OBJECTS s = sku(d) MODAL;
        IF formResult() == FormResult.ok THEN {
            dataBarcode(d) <- requestedObject();
    
        }
    }
}

FORM labelTypesDialog 'Доступные типы ценников'
    OBJECTS ds = DepartmentStore  FIXED PANEL   
    FILTERS isCompany(ds)

    OBJECTS l = LabelType
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate, namePriceListType, printNullPrice
    FILTERS in(l,ds)
;
DESIGN labelTypesDialog { main{ preferredSize = (800, 600); } } 

changeLabelType(LabelTransaction t)  = ACTION {
    REQUEST OBJECT l
    FORM labelTypesDialog OBJECTS ds = departmentStore(t) MODAL;
    IF formResult() == FormResult.ok THEN {
        labelType(t) <- requestedObject();

    }    
}

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelType ON CHANGE changeLabelType(l), nameDepartmentStore, date, time,
                  description READONLY 
                   
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) selected, idBarcode ON CHANGE changeBarcode(d), nameSku READONLY, nameBatch,
                  nameOperation, quantity, name, price, retailPrice,
                  discountSum, DELETESESSION
    FILTERS labelTransaction(d) == l
    
    PROPERTIES(l) TODRAW d deleteNotSelectedDetail                      
    
    EDIT LabelTransaction OBJECT l    
;
DESIGN customLabelTransaction {
    main {
        preferredSize = (1024, 768);
        MOVE l.box;
        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }
        MOVE functions.box;
    }
}

@extendFormFilterAccessStock(labelTransaction, l, customLabelTransaction, departmentStore, company);

addLabelTransaction 'Добавить'(DepartmentStore dep) = ACTION NEWSESSION {
    FOR ADDOBJ l = LabelTransaction DO {
        ASSIGN departmentStore(l) <- dep;
        FORM customLabelTransaction OBJECTS l=l DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN { 
                print(l);
            apply();
        }            
    }
} TOOLBAR IMAGE 'add.png';

printTo 'Печать ценников' (LabelTransaction labelTransaction) = ACTION {
        print(labelTransaction);
} IMAGE 'print.png' IN print;

select 'Отм.' = DATA LOCAL BOOLEAN (LabelTransactionDetail);
countSelectLabelTransactionDetails = GROUP SUM 1 IF select(LabelTransactionDetail d);

deleteSelect 'Очистить все' () = ACTION {
    select(LabelTransactionDetail d) <- NULL;   
} SHORTCUT select[LabelTransactionDetail];


countSelectedLabelTransactions (t)  =   GROUP SUM 1 IF select(LabelTransactionDetail d) BY labelTransaction(d);

printLabelTransactionDetails 'Печать ценников'()  = ACTION {
    IF countSelectLabelTransactionDetails() THEN NEWSESSION NESTED select[LabelTransactionDetail] {
        FOR countSelectedLabelTransactions(t)  DO {
            skipPrint(LabelTransactionDetail d) <- TRUE WHERE labelTransaction(d) ==t AND NOT select(d);
            print(t);
        }  
        apply();
    } ELSE {
        MESSAGE 'Вначале надо отметить строки для печати.';
    }

}
printLabelTransactionDetail 'Печать ценника' (LabelTransactionDetail d) = ACTION  {
    select(d) <- TRUE;  
    printLabelTransactionDetails();
}

FORM labelTransactions 'Печать ценников'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = LabelTransaction
    PROPERTIES(l) READONLY nameLabelType, description, date, time
    PROPERTIES(l) READONLY createdNameUser, createdTime, createdHostnameComputer
    PROPERTIES(d) addLabelTransaction TODRAW l FORCE PANEL TOOLBAR 
    PROPERTIES(l) EDITFORM , DELETE FORCE PANEL TOOLBAR 
    PROPERTIES(l) printTo FORCE PANEL 
    FILTERS departmentStore(l) == d
    ORDER BY date(l), time(l)

    OBJECTS dt = LabelTransactionDetail
    PROPERTIES(dt) select
    PROPERTIES(dt) READONLY idBarcode, nameSku, nameBatch,
                            quantity, name, price, retailPrice, discountSum 
    FILTERS labelTransaction(dt) == l
    PROPERTIES printLabelTransactionDetails() TOOLBAR TODRAW dt SHOWIF countSelectLabelTransactionDetails()
 // по определенной позиции и складу  
    OBJECTS s = Sku
    PROPERTIES(s)    READONLY idBarcode, name, id
    FILTERGROUP price
        FILTER 'Ранее загруженные' priceLabelTransactionDetail(s, d) 'F8' DEFAULT
    OBJECTS dts = LabelTransactionDetail
    PROPERTIES(dts) READONLY nameLabelType, description, date, time,
            createdNameUser, createdTime, createdHostnameComputer,
            idBarcode, nameSku, nameBatch,
            quantity, name, price, retailPrice, discountSum 
            
    PROPERTIES printLabelTransactionDetail(dts) FORCE PANEL TOOLBAR 
    ORDER BY date(dts) DESC, time(dts) DESC
    FILTERS sku(dts) == s,
            departmentStore(dts) == d
;

@extendFormFilterStockAccess(d, labelTransactions);

DESIGN labelTransactions {
    main {
        MOVE d.box;
        NEW pane{
            fill = 1;
            type = TABBED ;
            NEW topContainer{
                type = SPLITV;
                fill = 1;
                caption = 'Печать ценников';
    
                MOVE l.box;
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;
        
                    MOVE dt.box {
                        caption = 'Спецификация';
                    } 
                    NEW printTab {
                        caption = 'Печатные формы';
                        MOVE l.print;
                    } 
                }              
            }
            NEW skuContainer{
                type = SPLITV;
                fill = 1;
                caption = 'Печать ценников по позиции';  
                          
                MOVE s.box;
                MOVE dts.box;
            }     
        }
        MOVE functions.box;
    }
}

// -------------------------------------------- Действия по печати ценников ------------------------------ //

documentQuantity = DATA LOCAL NUMERIC[14,3] (LabelTransactionDetail);
documentPrice = DATA LOCAL NUMERIC[14,2] (LabelTransactionDetail);

calcPrice (LabelTransactionDetail d) =
    IF  batch(d) THEN
        prevPriceA(priceListType(d), batch(d), departmentStore(d), dateTime(d))
    ELSE
        prevPriceA(priceListType(d), sku(d), departmentStore(d), dateTime(d));

WHEN SESSION FORMS customLabelTransaction
    CHANGED(labelType(LabelTransactionDetail d)) OR SETCHANGED (dataBarcode(d)) DO {
        price(d) <- OVERRIDE 
            round(calcPrice(d) * (OVERRIDE 1.0 IF d IS LabelTransactionDetail, amount(dataBarcode(d))), roundCondition(departmentStore(d))), 
            documentPrice(d);
        retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
}

WHEN SESSION FORMS customLabelTransaction
    CHANGED(labelType(LabelTransactionDetail d)) DO {
        quantity(d) <- IF include(labelType(d), sku(d)) THEN 
                                                INTEGER(documentQuantity(d))
                                             ELSE 
                                                count(labelType(d), sku(d));
}

createAttribute = ACTION ABSTRACT LIST (LabelTransactionDetail);

// -------------------------------- Добавление новых атрибутов -------------------------- //
META defineLabelTransactionAttributeAction(object, skuClass, skuProp)
    createAttribute(LabelTransactionDetail d) +=
        ACTION object(d) <- skuProp(sku(d));

    EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY object;
    EXTEND FORM customLabelTransaction PROPERTIES(d) object;
    EXTEND FORM labelTransactions PROPERTIES(dt) READONLY object PROPERTIES(dts) READONLY object;   
END

META defineLabelTransactionAttribute(object, caption, type, skuClass, skuProp)
    object caption  = DATA type (LabelTransactionDetail);
    @defineLabelTransactionAttributeAction(object, skuClass, skuProp);
END

// ---------- Атрибуты по умолчанию ------ //

@defineLabelTransactionAttribute(nameSkuGroupSku, 'Тов. группа', VARSTRING[100], Sku, nameSkuGroup);
@defineLabelTransactionAttribute(shortNameUOMSku, 'Ед. изм.', VARISTRING[100], Sku, shortNameUOM);
@defineLabelTransactionAttribute(nameCountrySku, 'Страна изготовления', VARSTRING[50], Sku, nameCountry);
residentCountrySku 'Отечественный производитель' (LabelTransactionDetail d) = resident(country(sku(d)));
supplierSku = lastSupplier(departmentStore(LabelTransactionDetail d), sku(d));
nameSupplierSku 'Поставщик' (LabelTransactionDetail d) = name(supplierSku(d));
fullNameSupplierSku 'Поставщик полное наименование' (LabelTransactionDetail d) = fullName(supplierSku(d));
shortNameOwnershipSupplierSku 'Форма собственности (сокр.)' (LabelTransactionDetail d) =shortNameOwnership(supplierSku(d));

EXTEND FORM printLabelTransaction 
    PROPERTIES(d) READONLY residentCountrySku, nameSupplierSku, 
                  fullNameSupplierSku, shortNameOwnershipSupplierSku
    PROPERTIES(l) addressStore                  
                  
;

EXTEND FORM customLabelTransaction 
    PROPERTIES(d) residentCountrySku, nameSupplierSku, 
                  fullNameSupplierSku, shortNameOwnershipSupplierSku
    PROPERTIES(l) addressStore                   
;                  
EXTEND FORM labelTransactions 
    PROPERTIES(dt) READONLY residentCountrySku, nameSupplierSku, 
                   fullNameSupplierSku, shortNameOwnershipSupplierSku
    PROPERTIES(l) addressStore                
;        
nameAddressPhoneLegalEntity 'Наименование/Адрес/Телефон юрлица' (LabelTransactionDetail d) = 
    CONCAT ', ', 
           fullName(legalEntity(departmentStore(d))), 
           address(legalEntity(departmentStore(d))),
           'Тел. ' + phone(legalEntity(departmentStore(d)));
EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY nameAddressPhoneLegalEntity;
EXTEND FORM customLabelTransaction PROPERTIES(d) nameAddressPhoneLegalEntity;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY nameAddressPhoneLegalEntity;

//-------------------------------------- Подбор ------------------------//

addDetailDialogSkuLabelTransactionDetail 'Подбор товаров'(LabelTransaction labelTransaction) = ACTION {
    FORM dialogSku MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR dialogQuantity(Sku sku) INLINE ADDOBJ w = LabelTransactionDetail DO {
            labelTransaction(w) <- labelTransaction;
            sku(w) <- sku;
            quantity(w) <- INTEGER(dialogQuantity(sku));
            documentQuantity(w) <- dialogQuantity(sku); 
            createAttribute(w);               
        }
    }
    dialogQuantity(Sku sku) <- NULL;
} TOOLBAR;

addDetailDialogSkuStockLabelTransactionDetail 'Подбор товаров'(LabelTransaction labelTransaction) = ACTION {
    dialogSkuStock() <- departmentStore(labelTransaction);
    dialogAll(Sku sku) <- NULL;

    addDetailDialogSkuLabelTransactionDetail(labelTransaction);
} TOOLBAR;
            
@defineDocumentDetailActions(labelTransaction);

@defineDocumentHeaderSkuQuantity(labelTransaction, sku);

//-- Подбор товар/партии

labelTransactionDetail (sku, labelTransaction, stock) =  GROUP MAX LabelTransactionDetail labelTransactionDetail
    BY sku(labelTransactionDetail), labelTransaction(labelTransactionDetail), departmentStore(labelTransactionDetail);
labelTransactionDetail (Sku sku, LabelTransaction labelTransaction) = labelTransactionDetail(sku, labelTransaction, departmentStore(labelTransaction));

currentBalance 'Остаток' (Sku sku, LabelTransaction labelTransaction) = currentBalance(sku, departmentStore(labelTransaction));
prevCurrentBalance 'Остаток' (Sku sku, LabelTransaction labelTransaction) = prevCurrentBalance(sku, departmentStore(labelTransaction));
backgroundQuantity 'Цвет' (sku, labelTransaction) = ABSTRACT CASE COLOR (Sku, LabelTransaction);  

changeQuantityValue(Sku sku, LabelTransaction labelTransaction) = ACTION {
    IF labelTransactionDetail(sku, labelTransaction) THEN {
        IF requestedNumeric() THEN {
            quantity(LabelTransactionDetail labelTransactionDetail) <- INTEGER(requestedNumeric()) WHERE labelTransactionDetail == labelTransactionDetail(sku, labelTransaction);
            documentQuantity(LabelTransactionDetail labelTransactionDetail) <- requestedNumeric() WHERE labelTransactionDetail == labelTransactionDetail(sku, labelTransaction);
            name(LabelTransactionDetail labelTransactionDetail) <- name(sku(labelTransactionDetail)) WHERE labelTransactionDetail == labelTransactionDetail(sku, labelTransaction);         
        } ELSE {
            DELETE LabelTransactionDetail d WHERE d == labelTransactionDetail(sku, labelTransaction);
        }
    } ELSE {
        IF requestedNumeric() THEN {
            FOR ADDOBJ d = LabelTransactionDetail DO {
                labelTransaction(d) <- labelTransaction;
                sku(d) <- sku;
                name(d) <- name(sku);                
                quantity (d) <- INTEGER(requestedNumeric());
                documentQuantity(d) <- requestedNumeric();
                createAttribute(d);
            }
        }
    }
}

changeQuantity(Sku sku, LabelTransaction labelTransaction) = ACTION {
    REQUEST INTEGER INPUT;
    changeQuantityValue(sku, labelTransaction);
}

// Выбор всего остатка
allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, LabelTransaction);
changeAllQuantity(Sku sku, LabelTransaction labelTransaction) = ACTION {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        requestedNumeric() <- NULL;
        allQuantity (sku,labelTransaction) <- TRUE;
        requestedNumeric() <- prevCurrentBalance(sku,labelTransaction);
        changeQuantityValue(sku, labelTransaction);
    } ELSE {
        allQuantity (sku,labelTransaction) <- NULL;
        requestedNumeric() <- NULL;
        changeQuantityValue(sku, labelTransaction);
    }
}
price 'Цена' (Sku sku, LabelTransaction labelTransaction) = prevPriceB(priceListType(labelType(labelTransaction)), sku, departmentStore(labelTransaction), dateTime(labelTransaction));

@extendFormDocumentSku(labelTransaction, customLabelTransaction, l);
                           
EXTEND FORM customLabelTransaction 
    
    PROPERTIES(l) TODRAW d addDetailDialogSkuStockLabelTransactionDetail
    
    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, l) 'F10' DEFAULT
        FILTER 'В документе ' quantityLabelTransactionDetail(ks, l) 'F9'
                  
;

skip 'Не печатать на ценник' = ABSTRACT BOOLEAN (LabelTransactionDetail);
// ------------------------- Подключение печати ценников в документ --------------------- //
META defineDocumentLabelTransaction (document, detailProp, skuProp, batchProp, stockProp, prefix)

    createAttribute = ACTION ABSTRACT LIST (###detailProp##Detail, LabelTransactionDetail);
    
    createLabelTransaction 'Распечатать ценники'(###document document) = ACTION NEWSESSION {        
        
        IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is(document) AND (confirmed() OR NOT (isDraft(document) OR NOT (dateTime(document) <= currentDateTime()))) THEN { 
            LOCAL in = BOOLEAN (Sku);
            in(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
        
            // бежим по всем типам ценников из управленческих параметров
            // для каждого создаем по операции печати ценников
            FOR ([= GROUP SUM 1 IF in(###skuProp sku) AND in(LabelType labelType, sku, DepartmentStore departmentStore) BY labelType, departmentStore](LabelType labelType, stockProp(document)))
                ADDOBJ t = LabelTransaction DO {
                    departmentStore(t) <- stockProp(document);
                    priceTransactionDocument(t) <- document;
                    labelType(t) <- labelType;
                    
                    FOR document(###detailProp##Detail dd) == document AND 
                        in(###skuProp sku) AND sku == skuProp(dd) AND 
                        in(labelType, sku, stockProp(document))
                        ADDOBJ d = LabelTransactionDetail DO {
                        labelTransaction(d) <- t;
                        skuProp(d) <- sku;
                        batch(d) <- batchProp(dd);
    
                        name(d) <- IF batch(d) THEN documentName###skuProp(batch(d)) ELSE name(skuProp(d));
                        createAttribute(d);
    
                        quantity(d) <- IF include(labelType, skuProp(d))
                                                                THEN INTEGER(prefix###quantity(dd))
                                                             ELSE count(labelType, skuProp(d));

                        price(d) <- calcPrice(d);
                        retailPrice(d) <- overRetailPrice(d);
                        createAttribute(dd, d);
                    }
                    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);
                    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d);
                    print(t);
            }
            printed(document) <- TRUE WHERE isPosted(document);
        }

        apply();
    } TOOLBAR CONFIRM;
    
    createLabelTransaction(###document document) += ACTION createLabelTransaction(document);

    createSnapshotLabelTransaction 'Перепечатать ценники'(###document document) = ACTION NEWSESSION {

        
        IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) THEN {
            CONFIRM 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?';
        }
        IF is(document) AND (confirmed() OR NOT (isDraft(document) OR NOT (dateTime(document) <= currentDateTime()))) THEN { 
            
            LOCAL in = BOOLEAN (Sku);    
            in(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
            
            FORM selectLabelTypes OBJECTS ds =  stockProp(document) MODAL;
            IF formResult() == FormResult.ok THEN { 
                IF NOT countSelectType() THEN {  
                    select(LabelType type) <- TRUE WHERE type == chosenObject('l');
                }                                        
                FOR select(LabelType type) ADDOBJ t = LabelTransaction DO {              
                    departmentStore(t) <- stockProp(document);
                    priceTransactionDocument(t) <- document;
                    labelType(t) <- type;
        
                    FOR document(###detailProp##Detail dd) == document AND in(###skuProp sku) AND sku == skuProp(dd) 
                        ADDOBJ d = LabelTransactionDetail DO {
                            labelTransaction(d) <- t;
                            skuProp(d) <- sku;
                            batch(d) <- batchProp(dd);
        
                            name(d) <- IF batch(d) THEN documentName###skuProp(batch(d)) ELSE name(skuProp(d));
                            documentQuantity(d) <- prefix###quantity(dd); 
                            
                            price(d) <- OVERRIDE calcPrice(d), documentPrice(d);
                            retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);                       
                                                                       
                            quantity(d) <- IF NOT countLabel(departmentStore(d)) 
                                                                     THEN (IF include(labelType(d), skuProp(d)) 
                                                                        THEN INTEGER(documentQuantity(d))
                                                                         ELSE count(labelType(d), skuProp(d)))
                                                                     ELSE countLabel(departmentStore(d));                                              
                                                                       
                                                                       
                            
                            
                            createAttribute(d);
                            createAttribute(dd, d);
                    }
                    IF change(stockProp(document)) THEN {
                        FORM customLabelTransaction OBJECTS l = t MODAL;
                        IF formResult() == FormResult.ok THEN {    
                            print(t);
                        } ELSE {
                            cancel();
                        }             
                    } ELSE {
                        print(t);
                    }                        
                }
                apply(); 
            }                                                                                                        
        }            
        
    } TOOLBAR;
    
    createSnapshotLabelTransaction(###document document) += ACTION createSnapshotLabelTransaction(document);

    showPrintLabelTransaction 'Показывать' (###document document) = isPosted(document) AND isOpened(document) AND NOT Label.skip(document);
                                                                                               //AND NOT printedPriceTransactionDocument(document);
    showPrintLabelTransaction (###document document) += showPrintLabelTransaction(document);
    
    backgroundPrintLabelTransaction 'Цвет' (###document document) = RGB(212,255,212) IF showPrintLabelTransaction(document) AND NOT printed(document);
END

META defineDocumentLabelTransaction (document, skuProp, batchProp, stockProp, prefix)
    @defineDocumentLabelTransaction (document, document, skuProp, batchProp, stockProp, prefix);
END

META defineDocumentLabelTransaction (document, skuProp, batchProp, stockProp)
    @defineDocumentLabelTransaction (document, skuProp, batchProp, stockProp, );
END

META extendFormDocumentLabelTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusLabel BACKGROUND backgroundPrintLabelTransaction(object) READONLY AFTER afterProp(object),
                           createLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransaction(object), 
                           createSnapshotLabelTransaction FORCE PANEL SHOWIF isOpened(object)
    ;

    DESIGN form {
        propContainer{
            NEW label {
                caption = 'Ценники' ;
                type = CONTAINERV;
                
                MOVE PROPERTY (createLabelTransaction(object));
                MOVE PROPERTY (createSnapshotLabelTransaction(object));
            }
        }
    }
END

// ---------------------------------------------------------- Стандартные значения --------------------------------- //

loadDefaultLabelType 'Добавить тип ценника'(VARISTRING[50] name, INTEGER width, INTEGER height, PrintOrientation orientation, VARSTRING[200] file) = ACTION {
    FOR ADDOBJ lt = LabelType DO {
        ASSIGN name(lt) <- name;
        ASSIGN width(lt) <-width;
        ASSIGN height(lt) <-height;
        ASSIGN orientation(lt) <- orientation;
        ASSIGN fileTemplate(lt) <-file;
    }
}

loadDefaultLabelTypes 'Загрузить стандартные ценники'() = ACTION {
    EXEC loadDefaultLabelType('Ценник 200x130', 200, 130, PrintOrientation.portrait, 'Label_printLabelTransaction_l.jrxml');
    EXEC loadDefaultLabelType('Ценник 595x480', 595, 480, PrintOrientation.portrait, 'Label_printLabelTransaction_l_a4.jrxml');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultLabelTypes);

NAVIGATOR {
    retailNavigator {
        NEW labelNavigator 'Ценники' {
            ADD labelTransactions;
            ADD labelTypes;
        }
    }
}

select = DATA LOCAL BOOLEAN (Sku, LabelType, DepartmentStore);
overCreate = ACTION ABSTRACT LIST (LabelTransaction);

createLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore) = ACTION {
    // бежим по всем типам ценников из управленческих параметров
    // для каждого создаем по операции печати ценников
    FOR [= GROUP SUM 1 IF select(Sku s,LabelType l,DepartmentStore d) BY l, d](LabelType labelType, departmentStore) ADDOBJ t = LabelTransaction DO { 
        departmentStore(t) <- departmentStore;
        labelType(t) <- labelType;
        
        FOR select(Sku sku, labelType, departmentStore) ADDOBJ d = LabelTransactionDetail DO {
            
            labelTransaction(d) <- t;
            sku(d) <- sku;

            name(d) <- name(sku(d));
            createAttribute(d);

            quantity(d) <- IF include(labelType, sku(d))
                                                    THEN INTEGER(currentBalance(sku, departmentStore))
                                                 ELSE count(labelType, sku(d));
                                                 
            price(d) <- calcPrice(d);
            retailPrice(d) <- overRetailPrice(d);
        } 
        overCreate(t);
        // вызываем печатную форму для каждого из них        
        print(t);                 
    }
} TOOLBAR;

select 'Вкл.' = DATA LOCAL BOOLEAN (LabelType);
change 'Изменить данные' = DATA LOCAL BOOLEAN (DepartmentStore);
countLabel 'Количество ценников' = DATA LOCAL INTEGER (DepartmentStore);
countSelectType = GROUP SUM 1 IF select(LabelType t);


createSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore, LabelType labelType) = ACTION {

    FOR ADDOBJ t = LabelTransaction DO {
        departmentStore(t) <- departmentStore;
        labelType(t) <- labelType;
        
        FOR select(Sku sku) ADDOBJ d = LabelTransactionDetail DO {
            labelTransaction(d) <- t;
            sku(d) <- sku;

            name(d) <- name(sku(d));
            documentQuantity(d) <- currentBalance(sku, departmentStore); 

            createAttribute(d);           
            

            price(d) <- OVERRIDE calcPrice(d), documentPrice(d);
            retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
    
            quantity(d) <- IF NOT countLabel(departmentStore) 
                                                     THEN (IF include(labelType(d), sku(d)) 
                                                        THEN INTEGER(documentQuantity(d))
                                                         ELSE count(labelType(d), sku(d)))
                                                     ELSE countLabel(departmentStore);                                                              
        }
        overCreate(t);
        IF change(departmentStore) THEN {
            FORM customLabelTransaction OBJECTS l = t MODAL;
            IF formResult() == FormResult.ok THEN {    
                print(t);
            } ELSE {
                cancel();
            }             
        } ELSE {
            print(t);
        }     
    }  
} TOOLBAR ;


// --------------------------------- Печать ценников по отмеченным по складу ------------------------- //

notResetLabelSelectSku 'Не сбрасывать отмеченные товары при печати ценников' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetLabelSelectSku
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(notResetLabelSelectSku());
    }
}
createSelectedSkuStockLabelTransaction 'Распечатать ценники'() = ACTION {
    IF [=GROUP SUM 1 IF select(Sku sku, Stock stock)]() THEN {
        NEWSESSION NESTED select[Sku,Stock] {
            FOR [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock] (DepartmentStore stock) AND stock IS DepartmentStore DO {        
                select(Sku sku, LabelType labelType, stock) <- select(sku, stock) AND in(labelType, sku, stock);   
                createLabelTransaction(stock);
            }
            
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    }
} TOOLBAR;

FORM selectLabelTypes 'Доступные типы ценников'
    OBJECTS ds = DepartmentStore  FIXED PANEL   
    PROPERTIES(ds) SELECTOR name
    PROPERTIES change(ds), countLabel(ds) 
    OBJECTS l = LabelType FIXED GRID
    PROPERTIES(l) select
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate,
                  namePriceListType, nameGroupType, printNullPrice, notPrintRetailPrice
    FILTERS in(l,ds)
;

DESIGN selectLabelTypes { main{ preferredSize = (600, 400); } }  

createSelectedSkuStockSnapshotLabelTransaction 'Перепечатать ценники'() = ACTION {
    IF [=GROUP SUM 1 IF select(Sku sku, Stock stock)]() THEN {            
        NEWSESSION NESTED select[Sku,Stock] {

            FOR [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](DepartmentStore stock) AND stock IS DepartmentStore DO {  
                FORM selectLabelTypes OBJECTS ds =  stock MODAL;
                IF formResult() == FormResult.ok THEN { 
                    select(Sku sku) <- NULL;  
                    select(Sku sku) <- TRUE WHERE  select(sku, stock);     
                    IF NOT countSelectType() THEN {
                        select(LabelType type) <- TRUE WHERE type == chosenObject('l');
                    }            
                    FOR select(LabelType type) DO {
                        createSnapshotLabelTransactionDepartmentStore(stock, type);
                    }                     
                }                                                  
            }                      
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    }
} TOOLBAR;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() TODRAW sts createSelectedSkuStockLabelTransaction, createSelectedSkuStockSnapshotLabelTransaction 
;
// --------------------------------- Печать ценников по отмеченным по sku ------------------------- //

printSelectedSkuLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore) = ACTION {
    IF [=GROUP SUM 1 IF select(Sku sku)]() THEN {
        NEWSESSION NESTED select[Sku] {
            select(Sku sku, LabelType labelType, departmentStore) <- select(sku) AND in(labelType, sku, departmentStore);   
            createLabelTransaction(departmentStore);
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku) <- NULL;
        }  
    } ELSE {
        MESSAGE 'Не отмечены товары, для которых необходима печать ценников.';
    }
} TOOLBAR;
printSelectedSkuSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore) = ACTION {
    IF [=GROUP SUM 1 IF select(Sku sku)]() THEN  { 
        NEWSESSION NESTED select[Sku] {
            FORM selectLabelTypes OBJECTS ds =  departmentStore MODAL;  
            IF formResult() == FormResult.ok THEN {       
                IF NOT countSelectType() THEN {
                    select(LabelType type) <- TRUE WHERE type == chosenObject('l');
                }                                                            
                FOR select(LabelType type) DO {
                    createSnapshotLabelTransactionDepartmentStore(departmentStore, type);
                }             
            }
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku) <- NULL;
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, для которых необходима печать ценников.';
    }
} TOOLBAR;

// Инкрементная загрузка
GROUP incrementMachineryLabel 'Инкрементная печать ценников' : public;

needLabelTransactionDepartmentStore (PriceListType type, Sku sku, Stock stock) = 
    prevPriceA(type, sku, stock, currentDateTime()) AND NOT prevPriceA(type,  sku, stock, currentDateTime()) == priceLabelTransactionDetail(sku, stock); 

createAllLabelTransaction 'Все товары'(DepartmentStore stock) = ACTION {
    select(Sku sku, LabelType labelType, stock) <- needLabelTransactionDepartmentStore(priceListType(labelType), sku, stock) 
                AND in(labelType, sku, stock);   
    
    createLabelTransaction(stock);

    apply();
    IF canceled() THEN {
        cancel();
    }        
} IN incrementMachineryLabel;

createBalanceLabelTransaction 'Остатки'(DepartmentStore stock) = ACTION {
    select(Sku sku, LabelType labelType, stock) <- needLabelTransactionDepartmentStore(priceListType(labelType), sku, stock) 
                AND in(labelType, sku, stock) AND balanceA(sku, stock, currentDateTime());   
                
    createLabelTransaction(stock);

    apply();
    IF canceled() THEN {
        cancel();
    }        
} IN incrementMachineryLabel;


EXTEND FORM labelTransactions 
    PROPERTIES(d) createBalanceLabelTransaction, createAllLabelTransaction
;
DESIGN labelTransactions {
    NEW header BEFORE pane{
        type = CONTAINERH;
        MOVE d.box;
        MOVE d.incrementMachineryLabel;
    }
} 


DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW labelContainer {
            caption = 'Ценники';
            type = CONTAINERV;
            MOVE PROPERTY (createSelectedSkuStockLabelTransaction());
            MOVE PROPERTY (createSelectedSkuStockSnapshotLabelTransaction());
        } 
    }
}


