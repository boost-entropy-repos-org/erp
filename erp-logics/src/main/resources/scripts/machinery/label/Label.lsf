MODULE Label;

REQUIRE System, Store, Stock, Barcode, PriceListType, Machinery, PriceRoundStore;

// Ориентация страницы
CLASS PrintOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}
FORM printOrientations
    OBJECTS o = PrintOrientation
    PROPERTIES(o) staticCaption
    DIALOG PrintOrientation OBJECT o
;

// типы ценников
CLASS LabelType 'Тип ценника';
TABLE labelType(LabelType);

nameLabelType 'Наименование' = DATA VARISTRING[50](LabelType);

widthLabelType 'Ширина' = DATA INTEGER (LabelType);
heightLabelType 'Высота' = DATA INTEGER (LabelType);

orientationLabelType = DATA PrintOrientation (LabelType);
nameOrientationLabelType 'Ориентация' (labelType) = staticCaption(orientationLabelType(labelType));

fileTemplateLabelType 'Файл шаблона' = DATA VARSTRING[200] (LabelType);

priceListTypeLabelType = DATA PriceListType (LabelType);
namePriceListTypeLabelType 'Вид цен' (labelType) = namePriceListType(priceListTypeLabelType(labelType));

TABLE labelTypeStoreType (LabelType, StoreType);
TABLE labelTypeStore (LabelType, Store);
TABLE labelTypeDepartmentStore (LabelType, DepartmentStore);

inLabelType 'Включен' = DATA BOOLEAN (LabelType);
inLabelType(labelType) <- TRUE WHEN SET(labelType IS LabelType);

inDataLabelTypeStoreType 'Включен' (labelType, storeType) = DATA BOOLEAN (LabelType, StoreType);
inLabelTypeStoreType 'Включен' (labelType, storeType) =
    OVERRIDE inLabelType(labelType) AND storeType IS StoreType, inDataLabelTypeStoreType(labelType, storeType);
inDataLabelTypeStore 'Включен' (labelType, store) = DATA BOOLEAN (LabelType, Store);
inLabelTypeStore 'Включен' (labelType, store) =
    OVERRIDE inLabelTypeStoreType(labelType, storeTypeStore(store)), inDataLabelTypeStore(labelType, store);
inDataLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) = DATA BOOLEAN (LabelType, DepartmentStore);
inLabelTypeDepartmentStore 'Включен' (labelType, departmentStore) =
    OVERRIDE inLabelTypeStore(labelType, storeDepartmentStore(departmentStore)), inDataLabelTypeDepartmentStore(labelType, departmentStore) PERSISTENT;

groupTypeLabelType = DATA GroupType (LabelType);
nameGroupTypeLabelType 'Тип классификатора' (labelType) = nameGroupType(groupTypeLabelType(labelType));

TABLE labelTypeGroup (LabelType, Group);
dataInLabelTypeGroup 'Вкл.' = DATA BOOLEAN (LabelType, Group);
TABLE labelTypeSku (LabelType, Sku);
dataInLabelTypeSku 'Вкл.' = DATA BOOLEAN (LabelType, Sku);

levelParentLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataInLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentLabelTypeGroup (labelType, group));
nearestInLabelTypeGroup 'Вкл.' (labelType, group) =
    dataInLabelTypeGroup(labelType, nearestParentLabelTypeGroup (labelType, group)) PERSISTENT;

inLabelTypeGroup 'Вкл.' (labelType, group) =
    OVERRIDE nearestInLabelTypeGroup(labelType, group), dataInLabelTypeGroup(labelType, group) PERSISTENT;

inLabelTypeSku 'Вкл.' (labelType, sku) =
    OVERRIDE inLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)), dataInLabelTypeSku(labelType, sku);

inLabelTypeSkuDepartmentStore (labelType, sku, departmentStore) = inLabelTypeSku(labelType, sku) AND inLabelTypeDepartmentStore(labelType, departmentStore);

//-- Множитель
dataCountLabelTypeGroup 'Множитель' = DATA INTEGER (LabelType, Group);
dataCountLabelTypeSku 'Множитель' = DATA INTEGER (LabelType, Sku);

levelParentCountLabelLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataCountLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentCountLabelLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentCountLabelLabelTypeGroup (labelType, group));
nearestCountLabelLabelTypeGroup 'Множитель' (labelType, group) =
    dataCountLabelTypeGroup(labelType, nearestParentCountLabelLabelTypeGroup (labelType, group)) PERSISTENT;

countLabelTypeGroup 'Множитель' (labelType, group) = OVERRIDE
    1 IF group IS Group IF labelType IS LabelType,
    nearestCountLabelLabelTypeGroup(labelType, group),
    dataCountLabelTypeGroup(labelType, group) PERSISTENT;

countLabelTypeSku 'Множитель' (labelType, sku) =
    OVERRIDE countLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)), dataCountLabelTypeSku(labelType, sku);

//-- Количество для печати ценника брать множитель или из документа.
includeLabelType 'Из документа'= DATA BOOLEAN (LabelType);
dataIncludeLabelTypeGroup 'Из документа' = DATA BOOLEAN (LabelType, Group);
dataIncludeLabelTypeSku 'Из документа' = DATA BOOLEAN (LabelType, Sku);

levelParentIncludeLabelLabelTypeGroup (labelType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataIncludeLabelTypeGroup(labelType, parent)
                                                              BY labelType, group PERSISTENT;
nearestParentIncludeLabelLabelTypeGroup (labelType, group) = groupGroupLevel(group, levelParentIncludeLabelLabelTypeGroup (labelType, group));
nearestIncludeLabelLabelTypeGroup 'Из документа' (labelType, group) =
    dataIncludeLabelTypeGroup(labelType, nearestParentIncludeLabelLabelTypeGroup (labelType, group)) PERSISTENT;

includeLabelTypeGroup 'Из документа' (labelType, group) = OVERRIDE
    includeLabelType(labelType) AND group IS Group,
    nearestIncludeLabelLabelTypeGroup(labelType, group),
    dataIncludeLabelTypeGroup(labelType, group) PERSISTENT;

includeLabelTypeSku 'Из документа' (labelType, sku) = OVERRIDE
    includeLabelTypeGroup(labelType, groupGroupTypeSku(groupTypeLabelType(labelType), sku)),
    dataIncludeLabelTypeSku(labelType, sku);

FORM labelType 'Тип ценника'
    OBJECTS l = LabelType FIXED PANEL
    PROPERTIES(l) nameLabelType, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType,
                  namePriceListTypeLabelType, nameGroupTypeLabelType

    TREE treeStore a=STRING[3], st=StoreType, s=Store
    PROPERTIES READONLY OBJVALUE(a), nameStockGroup(st), nameStore(s)
    FILTERS stringEqualsAll(a), inStoreTypeStore(st, s)

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY depName = nameDepartmentStore
    FILTERS (d IS DepartmentStore AND NOT s IS Store AND NOT st IS StoreType) OR
            (storeDepartmentStore(d)==s AND st IS StoreType) OR
            (storeTypeDepartmentStore(d)==st AND NOT s IS Store)
    PROPERTIES(l) TODRAW a FORCE GRID inLabelType, includeLabelType
    PROPERTIES inLabelTypeStoreType(l,st), inLabelTypeStore(l,s), inLabelTypeDepartmentStore(l,d)

    ORDER BY depName

    TREE treeGroup g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    FILTERS groupTypeGroup(g) == groupTypeLabelType(l)
    ORDER BY nameGroup(g)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeGroup(g) DEFAULT

    PROPERTIES(l, g) inLabelTypeGroup, countLabelTypeGroup, includeLabelTypeGroup

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY nameSku, idBarcodeSku
    FILTERS isParentGroupSku(g, sk) OR sk IS Sku AND NOT g
    PROPERTIES(l, sk) inLabelTypeSku, countLabelTypeSku, includeLabelTypeSku

    EDIT LabelType OBJECT l
;
@extendFormFilterStockAccess(DepartmentStore, d, labelType);
@extendFormFilterStockGroupAccess(StoreType, st, labelType);
@extendFormFilterStockGroupAccess(Store, s, labelType);

DESIGN labelType FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        ADD l.box {
            NEW wor1 {
                type = CONTAINERH;
                ADD PROPERTY(nameLabelType);
                ADD PROPERTY(widthLabelType);
                ADD PROPERTY(heightLabelType);
                ADD PROPERTY(nameOrientationLabelType);
            }
            NEW wor2 {
                type = CONTAINERH;
                ADD PROPERTY(fileTemplateLabelType);
                ADD PROPERTY(namePriceListTypeLabelType);
                ADD PROPERTY(nameGroupTypeLabelType);
            }
        };
        NEW specification{
            type = TABBED;
            fill = 1;
            NEW departmentCase {
                caption = 'Склады';
                type = CONTAINERH;
                ADD treeStore.tree.box;
                ADD d.box {fill = 2;}
            }
            NEW itemCase {
                caption = 'Товары';
                NEW row1 {
                    caption = 'Классификатор';
                    ADD PROPERTY(nameGroupTypeLabelType);
                }
                NEW row2 {
                    fill = 1;
                    type = CONTAINERH;
                    ADD treeGroup.tree.box;
                    ADD sk.box {fill = 2;}
                }
            }
        }
        ADD functions.box;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = LabelType
    PROPERTIES(l) READONLY nameLabelType, widthLabelType, heightLabelType, nameOrientationLabelType, fileTemplateLabelType, namePriceListTypeLabelType
    PROPERTIES(l)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG LabelType OBJECT l
;

//---------------------------- Документы для печати ценников ----------------------------------------//

CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skipPriceTransactionDocument 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

printedPriceTransactionDocument 'Распечатан' = DATA BOOLEAN (PriceTransactionDocument);
printedPriceTransactionDocument(document) <- NULL WHEN SET(isDraftPriceTransactionDocument(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Label.PriceTransactionDocument;
    Label.isDraftPriceTransactionDocument (document) += isDraft###concrete(document);
    Label.descriptionPriceTransactionDocument (document) += description###concrete(document);
END

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS LabelTransaction 'Печать ценников';
TABLE labelTransaction(LabelTransaction);

@defineCreated(LabelTransaction);

dateLabelTransaction 'Дата' = DATA DATE (LabelTransaction);
dateLabelTransaction (transaction) <- currentDate() WHEN SET(transaction IS LabelTransaction);

timeLabelTransaction 'Время' = DATA TIME (LabelTransaction);
timeLabelTransaction (transaction) <- currentTime() WHEN SET(transaction IS LabelTransaction);

dateTimeLabelTransaction 'Дата/время' (t) = dateTimeToDateTime(dateLabelTransaction(t), timeLabelTransaction(t)) PERSISTENT;

departmentStoreLabelTransaction = DATA DepartmentStore (LabelTransaction);
nameDepartmentStoreLabelTransaction 'Отдел магазина' (transaction) = nameDepartmentStore(departmentStoreLabelTransaction(transaction));
nameStoreLabelTransaction 'Магазин' (transaction) = nameStore(storeDepartmentStore(departmentStoreLabelTransaction(transaction)));
nameLegalEntityLabelTransaction 'Компания' (transaction) = nameLegalEntityDepartmentStore(departmentStoreLabelTransaction(transaction));

labelTypeLabelTransaction = DATA LabelType (LabelTransaction);
nameLabelTypeLabelTransaction 'Тип ценника' (transaction) = nameLabelType(labelTypeLabelTransaction(transaction));

CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';

fileTemplateLabelTransaction 'Файл шаблона' (transaction) = fileTemplateLabelType(labelTypeLabelTransaction(transaction));

priceTransactionDocumentLabelTransaction = DATA PriceTransactionDocument (LabelTransaction);
descriptionLabelTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentLabelTransaction(transaction));

statusLabelPriceTransactionDocument 'Статус печати ценника' (document) =
                                                        CASE
                                                            WHEN skipPriceTransactionDocument(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument
                                                            WHEN printedPriceTransactionDocument(document) THEN 'Распечатан' IF document IS PriceTransactionDocument
                                                            ELSE 'Не распечатан' IF document IS PriceTransactionDocument
                                                        ;

CLASS LabelTransactionDetail 'Строка печати ценников';
TABLE LabelTransactionDetail(LabelTransactionDetail);

labelTransactionLabelTransactionDetail = DATA LabelTransaction (LabelTransactionDetail);

labelTypeLabelTransactionDetail (d) = labelTypeLabelTransaction(labelTransactionLabelTransactionDetail(d));
priceListTypeLabelTransactionDetail(d) = priceListTypeLabelType(labelTypeLabelTransactionDetail(d));

departmentStoreLabelTransactionDetail (d) = departmentStoreLabelTransaction(labelTransactionLabelTransactionDetail(d));

dateTimeLabelTransactionDetail(d) = dateTimeLabelTransaction(labelTransactionLabelTransactionDetail(d));

skuLabelTransactionDetail = DATA Sku (LabelTransactionDetail);
nameSkuLabelTransactionDetail 'SKU' (d) = nameSku(skuLabelTransactionDetail(d));

batchLabelTransactionDetail = DATA Batch (LabelTransactionDetail);
nameBatchLabelTransactionDetail 'Партия' (d) = nameBatch(batchLabelTransactionDetail(d));

barcodeLabelTransactionDetail = DATA Barcode (LabelTransactionDetail);
idBarcodeLabelTransactionDetail 'Штрих-код' (b) = idBarcode(barcodeLabelTransactionDetail(b)); 

quantityLabelTransactionDetail 'Кол-во' = DATA INTEGER (LabelTransactionDetail);
nameLabelTransactionDetail 'Наименование' = DATA VARSTRING[255] (LabelTransactionDetail);  
priceLabelTransactionDetail 'Цена' = DATA NUMERIC[14,2] (LabelTransactionDetail);

FORM printLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction REPORTFILE fileTemplateLabelTransaction(l) FIXED PANEL
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction,
                  dateLabelTransaction, timeLabelTransaction, nameStoreLabelTransaction, nameLegalEntityLabelTransaction
    
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) READONLY idBarcodeLabelTransactionDetail, nameSkuLabelTransactionDetail, nameBatchLabelTransactionDetail,
                           quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail
    FILTERS labelTransactionLabelTransactionDetail(d) == l
;

selectedLabelTransactionDetail = DATA SESSION BOOLEAN (LabelTransactionDetail);
deleteNotSelectedLabelTransactionDetail 'Удалить кроме отмеченных' = ACTION (t) {
    DELETE d WHERE labelTransactionLabelTransactionDetail(d) == t AND NOT selectedLabelTransactionDetail(d);
} TOOLBAR;

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction FIXED PANEL
    PROPERTIES(l) nameLabelTypeLabelTransaction, nameDepartmentStoreLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction,
                  nameStoreLabelTransaction, nameLegalEntityLabelTransaction

    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) selectedLabelTransactionDetail, idBarcodeLabelTransactionDetail, nameSkuLabelTransactionDetail, nameBatchLabelTransactionDetail,
                  quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail,
                  ADDOBJ, DELETESESSION
    FILTERS labelTransactionLabelTransactionDetail(d) == l
    
    PROPERTIES(l) deleteNotSelectedLabelTransactionDetail TODRAW d 
;

FORM labelTransactions 'Печать ценников'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES nameDepartmentStore(d) SELECTOR

    OBJECTS l = LabelTransaction
    PROPERTIES(l) READONLY nameLabelTypeLabelTransaction, descriptionLabelTransaction, dateLabelTransaction, timeLabelTransaction
    PROPERTIES(l) READONLY createdNameUserLabelTransaction, createdTimeLabelTransaction, createdHostnameComputerLabelTransaction
    PROPERTIES(l) DELETESESSION
    FILTERS departmentStoreLabelTransaction(l) == d

    OBJECTS dt = LabelTransactionDetail
    PROPERTIES(dt) READONLY idBarcodeLabelTransactionDetail, nameSkuLabelTransactionDetail, nameBatchLabelTransactionDetail,
                            quantityLabelTransactionDetail, nameLabelTransactionDetail, priceLabelTransactionDetail
    FILTERS labelTransactionLabelTransactionDetail(dt) == l
;

@extendFormFilterStockAccess(DepartmentStore, d, labelTransactions);

DESIGN labelTransactions FROM DEFAULT {
    main {
        ADD d.box;
        NEW topContainer{
            type = SPLITV;
            fill = 1;

            ADD l.box;
            ADD dt.box;
        }
        ADD functions.box;
    }
}

// -------------------------------------------- Действия по печати ценников ------------------------------ //

documentQuantityLabelTransactionDetail = DATA SESSION NUMERIC[14,3] (LabelTransactionDetail);
documentPriceLabelTransactionDetail = DATA SESSION NUMERIC[14,2] (LabelTransactionDetail);

calcPriceLabelTransactionDetail (d) =
    IF batchLabelTransactionDetail(d) THEN
        prevPriceAPriceListTypeBatchStockDateTime(priceListTypeLabelTransactionDetail(d),
                                                  batchLabelTransactionDetail(d),
                                                  departmentStoreLabelTransactionDetail(d),
                                                  dateTimeLabelTransactionDetail(d))
    ELSE
        prevPriceAPriceListTypeSkuStockDateTime(priceListTypeLabelTransactionDetail(d),
                                                skuLabelTransactionDetail(d),
                                                departmentStoreLabelTransactionDetail(d),
                                                dateTimeLabelTransactionDetail(d));

WHEN SESSION FORMS customLabelTransaction
    CHANGED(labelTypeLabelTransactionDetail(d)) DO {
        priceLabelTransactionDetail(d) <- OVERRIDE 
            calcPriceLabelTransactionDetail(d), 
            (roundPriceRoundCondition(calcPriceLabelTransactionDetail(d) * dataAmountBarcode(barcodeLabelTransactionDetail(d)), roundConditionDepartmentStore(departmentStoreLabelTransactionDetail(d)))) IF dataAmountBarcode(barcodeLabelTransactionDetail(d)), 
            documentPriceLabelTransactionDetail(d);
}

WHEN SESSION FORMS customLabelTransaction
    CHANGED(labelTypeLabelTransactionDetail(d)) DO {
        quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d)) THEN 
                                                INTEGER(documentQuantityLabelTransactionDetail(d))
                                             ELSE 
                                                countLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d));
}

createAttributeLabelTransactionDetail = ABSTRACT ACTION LIST (LabelTransactionDetail);

// -------------------------------- Добавление новых атрибутов -------------------------- //
META defineLabelTransactionAttributeAction(object, skuClass, skuProp)
    createAttributeLabelTransactionDetail(d) +=
        ACTION object##LabelTransactionDetail(d) <- skuProp##skuClass(skuLabelTransactionDetail(d));

    EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY object##LabelTransactionDetail;
    EXTEND FORM customLabelTransaction PROPERTIES(d) object##LabelTransactionDetail;
    EXTEND FORM labelTransactions PROPERTIES(dt) READONLY object##LabelTransactionDetail;
END

META defineLabelTransactionAttribute(object, caption, type, skuClass, skuProp)
    object##LabelTransactionDetail caption  = DATA type (LabelTransactionDetail);
    @defineLabelTransactionAttributeAction(object, skuClass, skuProp);
END

// ---------- Атрибуты по умолчанию ------ //

@defineLabelTransactionAttribute(nameSkuGroupSku, 'Тов. группа', VARSTRING[100], Sku, nameSkuGroup);
@defineLabelTransactionAttribute(shortNameUOMSku, 'Ед. изм.', VARISTRING[10], Sku, shortNameUOM);
@defineLabelTransactionAttribute(nameCountrySku, 'Страна изготовления', VARSTRING[50], Sku, nameCountry);

nameAddressPhoneLegalEntityLabelTransactionDetail 'Наименование/Адрес/Телефон юрлица' (d) = 
    CONCAT ', ', 
           fullNameLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransactionDetail(d))), 
           addressLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransactionDetail(d))),
           'Тел. ' + phoneLegalEntity(legalEntityDepartmentStore(departmentStoreLabelTransactionDetail(d)));
EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY nameAddressPhoneLegalEntityLabelTransactionDetail;
EXTEND FORM customLabelTransaction PROPERTIES(d) nameAddressPhoneLegalEntityLabelTransactionDetail;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY nameAddressPhoneLegalEntityLabelTransactionDetail;

// ------------------------- Подключение печати ценников в документ --------------------- //
META defineDocumentLabelTransaction (document, skuProp, stockProp)
    create###document##LabelTransaction 'Распечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {

        LOCAL inBarcode = BOOLEAN (Barcode);
        inBarcode(barcode) <- TRUE IF quantity###document##Detail###skuProp###document(skuBarcode(barcode), document);
    
        // разбивается на несколько выполнений, чтобы не тупил PostgreSQL со сложным запросом
        inBarcode(barcode) <- activeBarcode(barcode) WHERE inBarcode(barcode); // если штрих-код является активным

        // бежим по всем типам ценников из управленческих параметров
        // для каждого создаем по операции печати ценников
        FOR ([= GROUP SUM 1 IF inBarcode(barcode) AND inLabelTypeSkuDepartmentStore(labelType, skuBarcode(barcode), departmentStore) BY labelType, departmentStore](labelType, stockProp###document(document)))
            ADDOBJ t = LabelTransaction DO {
                departmentStoreLabelTransaction(t) <- stockProp###document(document);
                priceTransactionDocumentLabelTransaction(t) <- document;
                labelTypeLabelTransaction(t) <- labelType;
                
                FOR document###document##Detail(dd) == document AND 
                    inBarcode(barcode) AND skuBarcode(barcode) == skuProp###document##Detail(dd) AND 
                    inLabelTypeSkuDepartmentStore(labelType, skuBarcode(barcode), stockProp###document(document))
                    ADDOBJ d = LabelTransactionDetail DO {
                    labelTransactionLabelTransactionDetail(d) <- t;
                    skuLabelTransactionDetail(d) <- skuProp###document##Detail(dd);
                    batchLabelTransactionDetail(d) <- batch###document##Detail(dd);
                    barcodeLabelTransactionDetail(d) <- barcode;

                    nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
                    createAttributeLabelTransactionDetail(d);

                    quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelType, skuLabelTransactionDetail(d))
                                                            THEN INTEGER(quantity###document##Detail(dd))
                                                         ELSE countLabelTypeSku(labelType, skuLabelTransactionDetail(d));
                    IF dataAmountBarcode(barcodeLabelTransactionDetail(d)) THEN {
                        priceLabelTransactionDetail(d) <- roundPriceRoundCondition(calcPriceLabelTransactionDetail(d) * dataAmountBarcode(barcodeLabelTransactionDetail(d)), roundConditionDepartmentStore(departmentStoreLabelTransactionDetail(d)));                         
                    } ELSE {
                        priceLabelTransactionDetail(d) <- calcPriceLabelTransactionDetail(d);
                    }    
                } 
                // вызываем печатную форму для каждого из них
                FORM printLabelTransaction OBJECTS l = t PRINT;
        }
        printedPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##LabelTransaction 'Перепечатать ценники' = ACTION (document) NEWSESSION AUTOAPPLY {

        LOCAL inBarcode = BOOLEAN (Barcode);
        inBarcode(barcode) <- TRUE IF quantity###document##Detail###skuProp###document(skuBarcode(barcode), document);
    
        // разбивается на несколько выполнений, чтобы не тупил PostgreSQL со сложным запросом
        inBarcode(barcode) <- activeBarcode(barcode) WHERE inBarcode(barcode); // если штрих-код является активным

        FOR ADDOBJ t = LabelTransaction DO {
            departmentStoreLabelTransaction(t) <- stockProp###document(document);
            priceTransactionDocumentLabelTransaction(t) <- document;

            FOR document###document##Detail(dd) == document AND inBarcode(barcode) AND skuBarcode(barcode) == skuProp###document##Detail(dd) 
                ADDOBJ d = LabelTransactionDetail DO {
                    labelTransactionLabelTransactionDetail(d) <- t;
                    skuLabelTransactionDetail(d) <- skuProp###document##Detail(dd);
                    batchLabelTransactionDetail(d) <- batch###document##Detail(dd);
                    barcodeLabelTransactionDetail(d) <- barcode;

                    nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
                    documentQuantityLabelTransactionDetail(d) <- quantity###document##Detail(dd); 
                    
//                    IF dataAmountBarcode(barcodeLabelTransactionDetail(d)) THEN {
//                        documentPriceLabelTransactionDetail(d) <- roundPriceRoundCondition(calcPriceLabelTransactionDetail(d) * dataAmountBarcode(barcodeLabelTransactionDetail(d)), roundConditionDepartmentStore(departmentStoreLabelTransactionDetail(d)));                         
//                    }                                                         
                    createAttributeLabelTransactionDetail(d);
            }
            FORM customLabelTransaction OBJECTS l = t MODAL;
            IF formResult() == FormResult.ok THEN {
                FORM printLabelTransaction OBJECTS l = t PRINT;
            }
        }
    } TOOLBAR;

    showPrintLabelTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT Label.skipPriceTransactionDocument(document);
                                                                                               //AND NOT printedPriceTransactionDocument(document);
    backgroundPrintLabelTransaction###document 'Цвет' (document) = RGB(212,255,212) IF showPrintLabelTransaction###document(document);
END

META extendFormDocumentLabelTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusLabelPriceTransactionDocument BACKGROUND backgroundPrintLabelTransaction###document(object) READONLY AFTER afterProp,
                           create###document##LabelTransaction FORCE PANEL SHOWIF showPrintLabelTransaction###document(object), 
                           createSnapshot###document##LabelTransaction FORCE PANEL
    ;

    EXTEND DESIGN form {
        propContainer{
            NEW label {
                caption = 'Ценники' ;
                type = CONTAINERV;
                
                ADD PROPERTY (create###document##LabelTransaction);
                ADD PROPERTY (createSnapshot###document##LabelTransaction);
            }
        }
    }
END

// ---------------------------------------------------------- Стандартные значения --------------------------------- //

loadDefaultLabelType 'Добавить тип ценника' = ACTION(name, width, height, orientation, file) {
    FOR ADDOBJ lt = LabelType DO {
        ASSIGN nameLabelType(lt) <- name;
        ASSIGN widthLabelType(lt) <-width;
        ASSIGN heightLabelType(lt) <-height;
        ASSIGN orientationLabelType(lt) <- orientation;
        ASSIGN fileTemplateLabelType(lt) <-file;
    }
}

loadDefaultLabelTypes 'Загрузить стандартные ценники' = ACTION() {
    EXEC loadDefaultLabelType('Ценник 200x130', 200, 130, PrintOrientation.portrait, 'Label_printLabelTransaction_l.jrxml');
    EXEC loadDefaultLabelType('Ценник 595x480', 595, 480, PrintOrientation.portrait, 'Label_printLabelTransaction_l_a4.jrxml');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultLabelTypes);

NAVIGATOR {
    machineryNavigator {
        NEW labelNavigator 'Ценники' {
            ADD labelTransactions;
            ADD labelTypes;
        }
    }
}