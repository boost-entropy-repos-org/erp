MODULE MachineryPriceTransactionPromotion;

REQUIRE MachineryPriceTransaction;

NAMESPACE Machinery;

isForbidPromotion 'Запрет' = DATA BOOLEAN (SkuGroup);
isForbidPromotion 'Запрет (склад)' = DATA BOOLEAN (SkuGroup, Stock);
overIsForbidPromotion 'Запрет (перегруженный)' = OVERRIDE isForbidPromotion(SkuGroup group) IF Stock stock IS Stock, isForbidPromotion(group, stock);

isForbidPromotion 'Запрет' = DATA BOOLEAN (Sku);
isForbidPromotion 'Запрет(склад)' = DATA BOOLEAN (Sku, Stock);
overIsForbidPromotion 'Запрет (перегруженный)' = OVERRIDE isForbidPromotion(Sku sku) IF Stock stock IS Stock, isForbidPromotion(sku, stock);

levelParent(group) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF isForbidPromotion(parent)
    BY group;
nearestParent(SkuGroup group) = group(group, levelParent(group));
nearestForbidPromotion(SkuGroup group) = isForbidPromotion(nearestParent(group));

levelParent (group, stock) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF isForbidPromotion(parent, Stock stock)
    BY group, stock;
nearestParent (SkuGroup group, Stock stock) = group(group, levelParent(group, stock));
nearestForbidPromotion (SkuGroup group, Stock stock) = isForbidPromotion(nearestParent (group, stock), stock);

levelParentOver (group, stock) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF overIsForbidPromotion(parent, Stock stock)
    BY group, stock;
nearestParentOver (SkuGroup group, Stock stock) = group(group, levelParentOver(group, stock));
nearestOverForbidPromotion (SkuGroup group, Stock stock) = overIsForbidPromotion(nearestParentOver (group, stock), stock);

resultForbidPromotion 'Запрет (перегруженный)' ( SkuGroup group, Stock stock) = OVERRIDE
    nearestOverForbidPromotion(group, stock),
    overIsForbidPromotion( group, stock);

resultForbidPromotion 'Запрет (перегруженный)' = OVERRIDE 
    resultForbidPromotion(skuGroup( Sku sku), Stock stock),
    overIsForbidPromotion(sku, stock) ;

     
quantityChildWithForbidPromotion (group) = GROUP SUM 1 IF isForbidPromotion(SkuGroup childGroup) AND isParent(childGroup, SkuGroup group) BY group;
quantityParentWithForbidPromotion (group) = GROUP SUM 1 IF isForbidPromotion(SkuGroup parentGroup) AND isParent(SkuGroup group, parentGroup) BY group;          
backgroundIsForbidPromotion 'Цвет' (SkuGroup group) = CASE
    WHEN isForbidPromotion(group) THEN RGB(0,0,0)
    WHEN nearestForbidPromotion(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithForbidPromotion(group) != descendantNumber(group) AND NOT quantityParentWithForbidPromotion(group) THEN RGB(203,203,203);           
   
quantityChildWithForbidPromotion (group, stock) = GROUP SUM 1 IF isForbidPromotion(SkuGroup childGroup, Stock stock) AND isParent(childGroup, SkuGroup group) BY group, stock;
quantityParentWithForbidPromotion (group, stock) = GROUP SUM 1 IF isForbidPromotion(SkuGroup parentGroup, Stock stock) AND isParent(SkuGroup group, parentGroup) BY group, stock;          
backgroundIsForbidPromotion 'Цвет' (SkuGroup group, Stock stock) = CASE
    WHEN isForbidPromotion(group, stock) THEN RGB(0,0,0)
    WHEN nearestForbidPromotion(group, stock) THEN RGB(230,248,250) 
    WHEN quantityChildWithForbidPromotion(group, stock) != descendantNumber(group) AND NOT quantityParentWithForbidPromotion(group, stock) THEN RGB(203,203,203);           

quantityChildWithOverForbidPromotion (group, stock) = GROUP SUM 1 IF overIsForbidPromotion(SkuGroup childGroup, Stock stock) AND isParent(childGroup, SkuGroup group) BY group, stock;
quantityParentWithOverForbidPromotion (group, stock) = GROUP SUM 1 IF overIsForbidPromotion(SkuGroup parentGroup, Stock stock) AND isParent(SkuGroup group, parentGroup) BY group, stock;          
backgroundIsOverForbidPromotion 'Цвет' (SkuGroup group, Stock stock) = CASE
    WHEN overIsForbidPromotion(group, stock) THEN RGB(0,0,0)
    WHEN nearestOverForbidPromotion(group, stock) THEN RGB(230,248,250) 
    WHEN quantityChildWithOverForbidPromotion(group, stock) != descendantNumber(group) AND NOT quantityParentWithOverForbidPromotion(group, stock) THEN RGB(203,203,203);           

FORM forbidPromotion 'Запрет на применение скидок'
    OBJECTS st = Stock FIXED PANEL 
    PROPERTIES name(st) SELECTOR
    FILTERS isCompany(st)
    
    TREE treeGroup g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    PROPERTIES isForbidPromotion( g) BACKGROUND backgroundIsForbidPromotion(g), isForbidPromotion (g, st) BACKGROUND backgroundIsForbidPromotion(g,st)
    PROPERTIES READONLY resultForbidPromotion(g, st) BACKGROUND backgroundIsOverForbidPromotion(g,st)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    PROPERTIES isForbidPromotion(s), isForbidPromotion(s, st) 
    PROPERTIES READONLY resultForbidPromotion(s,st)
    
    FILTERGROUP forbid
        FILTER  'Отм.'  overIsForbidPromotion(s,st) 'F10'
        FILTER  'Отм. (перегруженный)'  resultForbidPromotion(s,st) 'F11'
;

DESIGN forbidPromotion {
    NEW treeContainer{
        fill = 1;
        type = SPLITH;
        MOVE treeGroup.tree.box { caption = 'Группы товаров';}
        MOVE s.box ;
    }
    MOVE functions.box;
}

NAVIGATOR {
    machineryExport {
        ADD forbidPromotion;
    }
}

overForbidPromotion 'Запрет продаж' = ABSTRACT BOOLEAN (Sku, Stock);

extraFlags(b, s) = ABSTRACT  INTEGER (Barcode, Stock);

dataFlags(Barcode b, Stock s) =
    (IF (resultForbidPromotion(sku(b), s) OR overForbidPromotion(sku(b),s)) THEN 0 ELSE 16) + (OVERRIDE 0, extraFlags(b, s));
                                     
@defineMachineryPriceTransactionAttributeStock(dataFlags, 'Флаги', INTEGER);
flags (MachineryPriceTransaction t, Barcode b) += dataFlags(t, b);

restrictionToDateTime = ABSTRACT DATETIME (Barcode, Stock);
@defineMachineryPriceTransactionAttributeStock(restrictionToDateTime, 'Дата окончания ограничения', DATETIME );