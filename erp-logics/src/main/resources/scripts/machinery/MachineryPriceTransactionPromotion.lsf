MODULE MachineryPriceTransactionPromotion;

REQUIRE MachineryPriceTransaction, Store;

NAMESPACE Machinery;


TABLE promotionSkuDepartmentStore(Sku, DepartmentStore);

isForbidPromotion 'Запрет' = DATA BOOLEAN (SkuGroup);
isForbidPromotion 'Запрет (склад)' = DATA BOOLEAN (SkuGroup, DepartmentStore);
overIsForbidPromotion 'Запрет (перегруженный)' = OVERRIDE isForbidPromotion(SkuGroup group, DepartmentStore stock), isForbidPromotion(group) IF stock IS DepartmentStore;

isForbidPromotion 'Запрет' = DATA BOOLEAN (Sku);
isForbidPromotion 'Запрет(склад)' = DATA BOOLEAN (Sku, DepartmentStore) TABLE promotionSkuDepartmentStore;
overIsForbidPromotion 'Запрет (перегруженный)' = OVERRIDE isForbidPromotion(Sku sku, DepartmentStore stock), isForbidPromotion(sku) IF stock IS DepartmentStore;

levelParent(group) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF isForbidPromotion(parent)
    BY group;
nearestParent(SkuGroup group) = group(group, levelParent(group));
nearestForbidPromotion(SkuGroup group) = isForbidPromotion(nearestParent(group));

levelParent (group, stock) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF isForbidPromotion(parent, DepartmentStore stock)
    BY group, stock;
nearestParent (SkuGroup group, DepartmentStore stock) = group(group, levelParent(group, stock));
nearestForbidPromotion (SkuGroup group, DepartmentStore stock) = isForbidPromotion(nearestParent (group, stock), stock);

levelParentOver (group, stock) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF overIsForbidPromotion(parent, DepartmentStore stock)
    BY group, stock;
nearestParentOver (SkuGroup group, DepartmentStore stock) = group(group, levelParentOver(group, stock));
nearestOverForbidPromotion (SkuGroup group, DepartmentStore stock) = overIsForbidPromotion(nearestParentOver (group, stock), stock);

resultForbidPromotion 'Запрет (перегруженный)' ( SkuGroup group, DepartmentStore stock) = OVERRIDE
    overIsForbidPromotion( group, stock),
    nearestOverForbidPromotion(group, stock) MATERIALIZED;

resultForbidPromotion 'Запрет (перегруженный)' = OVERRIDE 
    overIsForbidPromotion(Sku sku, DepartmentStore stock),
    resultForbidPromotion(skuGroup(sku), stock) MATERIALIZED TABLE promotionSkuDepartmentStore;

     
quantityChildWithForbidPromotion (group) = GROUP SUM 1 IF isForbidPromotion(SkuGroup childGroup) AND isParent(childGroup, SkuGroup group) BY group;
quantityParentWithForbidPromotion (group) = GROUP SUM 1 IF isForbidPromotion(SkuGroup parentGroup) AND isParent(SkuGroup group, parentGroup) BY group;          
backgroundIsForbidPromotion 'Цвет' (SkuGroup group) = CASE
    WHEN isForbidPromotion(group) THEN RGB(0,0,0)
    WHEN nearestForbidPromotion(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithForbidPromotion(group) != descendantNumber(group) AND NOT quantityParentWithForbidPromotion(group) THEN RGB(203,203,203);           
   
quantityChildWithForbidPromotion (group, stock) = GROUP SUM 1 IF isForbidPromotion(SkuGroup childGroup, DepartmentStore stock) AND isParent(childGroup, SkuGroup group) BY group, stock;
quantityParentWithForbidPromotion (group, stock) = GROUP SUM 1 IF isForbidPromotion(SkuGroup parentGroup, DepartmentStore stock) AND isParent(SkuGroup group, parentGroup) BY group, stock;          
backgroundIsForbidPromotion 'Цвет' (SkuGroup group, DepartmentStore stock) = CASE
    WHEN isForbidPromotion(group, stock) THEN RGB(0,0,0)
    WHEN nearestForbidPromotion(group, stock) THEN RGB(230,248,250) 
    WHEN quantityChildWithForbidPromotion(group, stock) != descendantNumber(group) AND NOT quantityParentWithForbidPromotion(group, stock) THEN RGB(203,203,203);           

quantityChildWithOverForbidPromotion (group, stock) = GROUP SUM 1 IF overIsForbidPromotion(SkuGroup childGroup, DepartmentStore stock) AND isParent(childGroup, SkuGroup group) BY group, stock;
quantityParentWithOverForbidPromotion (group, stock) = GROUP SUM 1 IF overIsForbidPromotion(SkuGroup parentGroup, DepartmentStore stock) AND isParent(SkuGroup group, parentGroup) BY group, stock;          
backgroundIsOverForbidPromotion 'Цвет' (SkuGroup group, DepartmentStore stock) = CASE
    WHEN overIsForbidPromotion(group, stock) THEN RGB(0,0,0)
    WHEN nearestOverForbidPromotion(group, stock) THEN RGB(230,248,250) 
    WHEN quantityChildWithOverForbidPromotion(group, stock) != descendantNumber(group) AND NOT quantityParentWithOverForbidPromotion(group, stock) THEN RGB(203,203,203);           

FORM forbidPromotion 'Запрет на применение скидок'
    OBJECTS st = DepartmentStore PANEL 
    PROPERTIES name(st) SELECTOR
    FILTERS isCompany(st)
    
    TREE treeGroup g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    PROPERTIES isForbidPromotion( g) BACKGROUND backgroundIsForbidPromotion(g), isForbidPromotion (g, st) BACKGROUND backgroundIsForbidPromotion(g,st)
    PROPERTIES READONLY resultForbidPromotion(g, st) BACKGROUND backgroundIsOverForbidPromotion(g,st)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    PROPERTIES isForbidPromotion(s), isForbidPromotion(s, st) 
    PROPERTIES READONLY resultForbidPromotion(s,st)
    
    FILTERGROUP forbid
        FILTER  'Отм.'  overIsForbidPromotion(s,st) 'F10'
        FILTER  'Отм. (перегруженный)'  resultForbidPromotion(s,st) 'F11'
;

DESIGN forbidPromotion {
    NEW treeContainer{
        fill = 1;
        type = SPLITH;
        MOVE BOX(TREE treeGroup) { caption = 'Группы товаров';}
        MOVE BOX(s) ;
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    machineryExport {
        NEW forbidPromotion;
    }
}

overForbidPromotion 'Запрет продаж' = ABSTRACT BOOLEAN (Sku, Stock);

extraFlags(b, s) = ABSTRACT  INTEGER (Barcode, Stock);

dataFlags(Barcode b, Stock s) =
    (IF (resultForbidPromotion(sku(b), s) OR overForbidPromotion(sku(b),s)) THEN 0 ELSE 16) + (OVERRIDE extraFlags(b, s), 0);
                                     
@defineMachineryPriceTransactionAttributeStock(dataFlags, 'Флаги', INTEGER);
flags (MachineryPriceTransaction t, Barcode b) += dataFlags(t, b);

restrictionToDateTime = ABSTRACT DATETIME (Barcode, Stock);
@defineMachineryPriceTransactionAttributeStock(restrictionToDateTime, 'Дата окончания ограничения', DATETIME );