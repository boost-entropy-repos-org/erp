MODULE StopList;

REQUIRE System,
        Stock,
        Machinery,
        Numerator,        
        Utils,
        MachineryPriceTransaction
        ;

NAMESPACE StopList;

//----------------------------------- Запрет продаж по кассе -------------------------------------------------------

CLASS StopList 'Запрет продаж по кассе';
CLASS StopListDetail 'Строка запрета продаж по кассе';

@defineDocument(stopList);
createdTime 'Время создания' = createdTime(stopList(StopListDetail d)); 
createdUser = createdUser(stopList(StopListDetail d)); 
createdNameUser 'Создан пользователем' = name[Contact](createdUser(StopListDetail d)); 
createdComputer 'Создан на компьютере' = createdComputer(stopList(StopListDetail d)); 
createdHostnameComputer 'Создан на компьютере' = hostname(createdComputer(StopListDetail d)); 

@deriveDocumentHeaderTimePrefix(StopList, );

@defineDocumentTimePrefix (stopList, from, ' с');
@deriveDocumentHeaderTimePrefix(StopList, from);

@defineDocumentTimePrefix (stopList, to, ' по');

@defineDocumentHeaderNumber(StopList);
@defineDocumentDetailNumber(stopList, StopListDetail);

@defineNumeratedDefault(StopList, 'Запрет продаж по кассе', 'ЗП');

@defineDocumentHeaderLegalEntity(stopList, company, 'Компания');

exclude 'Исключить из запрета'  = DATA BOOLEAN (StopList) IN documentPrm;
exclude 'Исключить из запрета' (StopListDetail d) = exclude(stopList(d)) PERSISTENT; 


TABLE stockStopList (Stock ,StopList);
TABLE stockStopListDetail (Stock ,StopListDetail);

in 'Вкл.' = DATA BOOLEAN (Stock ,StopList);
stocks 'Склады' (stopList) = GROUP CONCAT name(Stock stock) IF in(stock, StopList stopList) , ', '
                                         BY stopList
                                         ORDER stock
                                         MINCHARWIDTH 30 PREFCHARWIDTH 50;
CONSTRAINT  in(Stock stock, StopList stopList) AND NOT isCompany(stock)
    MESSAGE 'Для Запрета продаж по кассе выбран склад, который не принадлежит компании';                                       
                                         

@defineDocumentPosted(stopList);
@defineDocumentClosed(stopList);
@defineDocumentDescription (stopList, 'Запрет продаж по кассе');

@defineDocumentDetailSkuPrefix (stopList, sku, , '');

idSkuGroup (StopListDetail stopListDetail) = idSkuGroup(sku(stopListDetail));
nameSkuGroup (StopListDetail stopListDetail) = nameSkuGroup(sku(stopListDetail));
idUOMSku (StopListDetail stopListDetail) = id(UOM(sku(stopListDetail)));

splitSku (StopListDetail stopListDetail) = split(sku(stopListDetail));
passScalesSku (StopListDetail stopListDetail) = passScales(sku(stopListDetail));

@defineExternalizable(stopListDetail, VARSTRING[100]);
succeeded 'Загружен в оборудование' = DATA BOOLEAN (Stock, StopList);
notSucceeded 'Не загружен в оборудование' (Stock stock, StopList stopList) = stock IS Stock AND stopList IS StopList AND NOT succeeded(stock, stopList);   

countSucceededStocks  = GROUP SUM 1 IF in(Stock stock, StopList list) AND succeeded(stock, list) BY list PERSISTENT;
countStocks  = GROUP SUM 1 IF in(Stock stock, StopList list) BY list PERSISTENT;

succeeded = countSucceededStocks(StopList l) == countStocks(l);

toExport 'К загрузке' = countStocks(StopList l) AND NOT succeeded(l);  

statusSucceededStocks 'Статус загрузки' = CASE 
    WHEN succeeded(StopList l) AND isPosted(l) THEN 'Успешно загружен'
    WHEN countSucceededStocks(l) < countStocks(l)  AND isPosted(l) THEN 'Частично загружен'
    WHEN  l IS StopList THEN 'Не загружался' MINCHARWIDTH 10 PREFCHARWIDTH 15;
    
backgroundStatusSucceededStocks = CASE 
    WHEN succeeded(StopList l) AND isPosted(l)  THEN RGB(212,255,212)
    WHEN countSucceededStocks(l) < countStocks(l) AND isPosted(l) THEN RGB(255,238,165)    
    WHEN l IS StopList THEN RGB(255,255,255);

stopList (number) = GROUP AGGR StopList stopList BY number(stopList);

//--------------------Сообщения об ошибках при загрузке в кассы--------------------//
CLASS StopListError 'Ошибка';
TABLE stopListError (StopListError);

data 'Сообщение об ошибке' = DATA VARSTRING[200] (StopListError) IN base;
date 'Время возникновения' = DATA DATETIME (StopListError) IN base;
toDate 'Дата возникновения' (StopListError e) = DATE(date(e));
errorTrace 'След исключения' = DATA TEXT (StopListError) IN base;
stopList 'Запрет продаж по кассе (ID)' = DATA StopList(StopListError) IN base;
quantityStopListError 'Количество ошибок' (StopList) = GROUP SUM 1 BY stopList (StopListError stopListError) IN base;

@defineLog (StopListError, 'ошибок загрузки стоп-листов', log, toDate);

//-- SKU
stopListDetail (sku, stopList) =  GROUP MAX StopListDetail stopListDetail
    BY sku(stopListDetail), stopList(stopListDetail);

count 'Вкл.' (Sku sku, StopList stopList) =  TRUE IF [ = GROUP SUM 1 
    BY sku(StopListDetail stopListDetail), stopList(stopListDetail)](sku, stopList);    

in (GroupMachinery groupMachinery, Sku sku, StopList stopList) =count(sku, stopList) AND in(groupMachinery, sku);
in (GroupMachinery groupMachinery, StopListDetail stopListDetail) =in(groupMachinery, sku(stopListDetail), stopList(stopListDetail));                                         
    
changeValue(Sku sku, StopList stopList) = ACTION  {
    REQUEST BOOLEAN INPUT;
    IF stopListDetail(sku, stopList) THEN {
        IF NOT requestedLogical() THEN {
            DELETE StopListDetail d WHERE d == stopListDetail(sku, stopList);
        } 
    } ELSE {
        IF requestedLogical() THEN {
            FOR ADDOBJ d = StopListDetail DO {
               stopList(d) <- stopList;
               sku(d) <- sku;
            }
        }
    }
}


active(Stock stock, StopListDetail detail) = in(stock, stopList(detail)) AND isPosted(detail) PERSISTENT;
sku(Stock stock, StopListDetail detail) = sku(detail) IF active(stock, detail) PERSISTENT INDEXED; 
include(Stock stock, StopListDetail detail) = active(stock, detail) AND NOT exclude(detail) PERSISTENT;
fromDateTime(Stock stock, StopListDetail detail) = fromDateTime(detail) IF active(stock, detail) PERSISTENT; 
toDateTime(Stock stock, StopListDetail detail) = toDateTime(detail) IF active(stock, detail) PERSISTENT; 
   
inStopList (sku, stock, dateTime) =
    GROUP LAST include(Stock stock, StopListDetail detail)
          BY   sku(stock, detail), stock, DATETIME dateTimeIn
          ORDER fromDateTime(stock, detail) , detail 
          WHERE dateTimeIn >= fromDateTime(stock, detail) 
                AND NOT dateTimeIn >  toDateTime(stock, detail) COMPLEX;        

lastStopListDetail (sku, stock, dateTime) =
    GROUP LAST StopListDetail detail IF include(Stock stock, detail)
          BY   sku(stock, detail), stock, DATETIME dateTimeIn
          ORDER fromDateTime(stock, detail) , detail 
          WHERE dateTimeIn >= fromDateTime(stock, detail) 
                AND NOT dateTimeIn >  toDateTime(stock, detail) COMPLEX;        

skipMachineryPriceTransaction(Sku sku, Stock stock, DATETIME dateTime) += inStopList(sku, stock, dateTime); 

FORM stopList 'Запрет продаж по кассе'

    OBJECTS sl=StopList FIXED PANEL

    PROPERTIES(sl) isPosted, nameNumerator, number, series, date, time,
                   countStopListDetail, note,
                   fromDate, fromTime, toDate, toTime, exclude
                   
    TREE stockTree sg = StockGroup PARENT parent
    PROPERTIES READONLY name(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = name(ts)
    PROPERTIES(ts, sl) FORCE GRID in, succeeded 

    FILTERS isParent(sg, ts)
    ORDER BY name(sg)                                        

    OBJECTS d = StopListDetail
    PROPERTIES(d)   index,
                    idBarcodeSku, nameSku, shortNameUOMSku

    PROPERTIES(d)   ADDOBJ, deletedd=DELETESESSION

    PROPERTIES(sl) TODRAW d deleteStopListDetail

    FILTERS         stopList(d) == sl
    
    
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), name(sk)
    ORDER BY order(sk), name(sk)

    OBJECTS           ks=Sku 
    PROPERTIES        READONLY name(ks), idBarcode(ks), shortNameUOM(ks)
    PROPERTIES        addSku() TODRAW ks, edit(ks), copy(ks), count(ks,sl) ON CHANGE changeValue(ks,sl)
    ORDER BY          name(ks) 
    FILTERS           isParent(sk, ks),
                      name(ks)
      
    FILTERGROUP inDocument FILTER 'В док-те' count(ks,sl) 'F10'      

    EVENTS
        ON OK prePost(sl)

    EDIT StopList OBJECT sl
;

DESIGN stopList {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;
                type = CONTAINERV;
                MOVE sl.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPosted(sl)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameNumerator(sl));
                    MOVE PROPERTY(number(sl));
                    MOVE PROPERTY(series(sl));
                    MOVE PROPERTY(date(sl));
                    MOVE PROPERTY(time(sl));
                }
                NEW timeContainer {
                    caption = 'Период действия';
                    type = CONTAINERH;
                    MOVE PROPERTY (fromDate(sl));
                    MOVE PROPERTY (fromTime(sl));
                    MOVE PROPERTY (toDate(sl));
                    MOVE PROPERTY (toTime(sl));   
                }
                MOVE sl.documentPrm;
            }

            MOVE sl.documentSum {
                columns = 1;
            }
        }
        NEW row {
            fill = 1;
            type = TABBED;
            NEW selectStock {
                caption = 'Выбор складов';
                type = SPLITH;
                fill = 1;
                MOVE stockTree.tree.box {caption = 'Группы складов';}            
                MOVE ts.box { fill = 2;}
            }
            NEW specification.box {
                caption = 'Спецификация';
                fill = 1;
                type = TABBED;
                MOVE d.box;
                NEW itemBox {
                    caption = 'Подбор';
                    type = SPLITH;
                    MOVE skuTree.tree.box { caption = 'Группы SKU'; }
                    MOVE ks.box { fill = 2;}
                }
            }
        }    
        MOVE functions.box;
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

FORM stopLists 'Запреты продаж по оборудованию'

    OBJECTS sl=StopList
    PROPERTIES (sl) READONLY statusSucceededStocks BACKGROUND backgroundStatusSucceededStocks(sl)
    PROPERTIES (sl) READONLYIF isReadonly() isClosed, isPosted, exclude, number, series, date, time
    PROPERTIES(sl)  READONLY fromDate, fromTime, toDate, toTime, countStopListDetail
    PROPERTIES (sl) READONLYIF isReadonly() note
    PROPERTIES (sl) READONLY quantityStopListError, stocks

    PROPERTIES(sl)  READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                          postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (sl) ADDFORM, EDITFORM SHOWIF isOpened(sl)
    PROPERTIES(sl)  close SHOWIF isOpened(sl), open SHOWIF isClosed(sl)     
    
    PROPERTIES (sl) deleted=DELETE FORCE PANEL TOOLBAR SHOWIF isOpened(sl)

    OBJECTS d=StopListDetail
    PROPERTIES(d)   READONLY index,
                    idBarcodeSku, nameSku, shortNameUOMSku
    FILTERS         stopList(d) == sl
    
    OBJECTS e=StopListError
    PROPERTIES(e)   READONLY data, date, errorTrace
    FILTERS         stopList(e) == sl
    
    OBJECTS st = Stock FIXED GRID
    PROPERTIES (st) READONLY name, id SHOWIF showIDs()
    PROPERTIES READONLY in(st,sl), succeeded(st,sl)
    FILTERS in(st,sl) 
;

DESIGN stopLists {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer  {
            fill = 1;
            type = SPLITV;

            MOVE sl.box {
                fill = 2;
            }
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE sl.created;
                    MOVE sl.posted;
                }
                NEW errors {
                    caption = 'Ошибки';                    
                    MOVE e.box;
                }
                MOVE st.box;
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
        MOVE functions.box;
    }
}
@extendFormEditable(stopLists);
@defineFilterIsOpened (stopList, stopLists, sl);
NAVIGATOR {
    machineryExport {
        ADD stopLists;
    }
}

//--
statusStopList 'Запрет продаж' (Sku sku, Stock stock)= IF lastStopListDetail(sku, stock, currentDateTime())
    THEN 'В стоп-листе'
    ELSE 'Нет запрета' MINCHARWIDTH 10 PREFCHARWIDTH 12;
backgroundStopList 'Цвет' (Sku sku, Stock stock) = RGB (255,0,0) IF lastStopListDetail(sku, stock, currentDateTime());


notResetStopListSelectSku 'Не сбрасывать отмеченные товары при создании стоп-листа' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetStopListSelectSku
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(notResetStopListSelectSku());
    }
}

skip 'Отм.' = ABSTRACT BOOLEAN (Sku, Stock);

createRequestStopList 'Включить в стоп-лист'()  = ACTION {

    IF [=GROUP SUM 1 IF select(Sku sku, Stock stock)]() THEN {
        NEWSESSION NESTED select[Sku,Stock] {
            FOR ADDOBJ sl = StopList DO {
                in(Stock st, sl) <- TRUE WHERE [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](st);  
                FOR [= GROUP SUM 1 IF select(Sku sku, Stock stock) AND NOT skip(sku, stock) BY sku](Sku sku) ADDOBJ d = StopListDetail DO {
                    stopList(d) <- sl;
                    sku(d) <- sku;            
                } 
                 FORM stopList OBJECTS sl = sl MANAGESESSION DOCKEDMODAL;
            }
        }
        IF NOT notResetStopListSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, по которым надо создать Стоп-лист.';
    }

} TOOLBAR;
excludeRequestStopList 'Исключить из стоп-листа'()  = ACTION {

    IF [=GROUP SUM 1 IF select(Sku sku, Stock stock)]() THEN {
        NEWSESSION NESTED select[Sku,Stock] {
            FOR ADDOBJ sl = StopList DO {
                exclude(sl) <- TRUE;
                in(Stock st, sl) <- TRUE WHERE [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](st);  
                FOR [= GROUP SUM 1 IF select(Sku sku, Stock stock) BY sku](Sku sku) ADDOBJ d = StopListDetail DO {
                    stopList(d) <- sl;
                    sku(d) <- sku;            
                } 
                 FORM stopList OBJECTS sl = sl MANAGESESSION DOCKEDMODAL;
            }
        }
        IF NOT notResetStopListSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, которые надо исключить из Стоп-листа.';
    }
} TOOLBAR;

EXTEND FORM currentBalanceSkuStock
    PROPERTIES READONLY statusStopList(s,st) BACKGROUND backgroundStopList(s,st) BEFORE currentBalance(s,st)
    PROPERTIES  FORCE PANEL TODRAW sts createRequestStopList(), excludeRequestStopList()
;
DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW stopListContainer {
            caption = 'Запрет продаж по кассе';
            type = CONTAINERV;
            MOVE PROPERTY (createRequestStopList());
            MOVE PROPERTY (excludeRequestStopList());
        } 
    }
}

countChangedSkus =  GROUP SUM 1 IF SETCHANGED (sku(StopListDetail d)) BY stopList(d);

WHEN FORMS stopList CHANGED(exclude(StopList l)) OR CHANGED(countChangedSkus(l)) AND isPosted(l) DO {
    succeeded(Stock st, l) <- NULL WHERE st IS Stock;    
}

FORM historyStopList 'История запрета продаж товара на кассе'
    OBJECTS st = Stock FIXED PANEL
    OBJECTS s = Sku FIXED PANEL 
    
    OBJECTS d = StopListDetail
    PROPERTIES(d) READONLY createdTime, createdNameUser, createdHostnameComputer, number, exclude
    FILTERS sku(d) == s,
            in(st, stopList(d))
;

DESIGN historyStopList {
    REMOVE st.box;
    REMOVE s.box;
}

showHistoryStopList 'Показать историю запрета продаж товара на кассе' (Sku sku, Stock stock) = 
    ACTION FORM historyStopList OBJECTS s = sku, st = stock MODAL SHORTCUT statusStopList[Sku,Stock];