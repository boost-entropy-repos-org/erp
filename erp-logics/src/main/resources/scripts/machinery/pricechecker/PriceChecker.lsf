MODULE PriceChecker;

REQUIRE System, Machinery;

// Группы
CLASS GroupPriceChecker 'Группы прайс чекеров' : GroupMachinery;

stock = DATA Stock (GroupPriceChecker);
stock (GroupPriceChecker groupMachinery) += stock(groupMachinery);

inactive 'Неактивный' = DATA BOOLEAN (GroupPriceChecker);
active 'Активный' (GroupPriceChecker group) = group IS GroupPriceChecker AND NOT inactive(group);
inactive(GroupPriceChecker g) += inactive(g);

// Модели
CLASS PriceCheckerModel 'Модель прайс чекеров' : Model;

name 'Наименование' = DATA VARISTRING[110](PriceCheckerModel);

name(PriceCheckerModel model) += name(model) IF model IS PriceCheckerModel;

FORM priceCheckerModel 'Модель прайс чекера'
    OBJECTS ch=PriceCheckerModel FIXED PANEL
    PROPERTIES(ch) name, note, handler, maxProduct
    EDIT PriceCheckerModel OBJECT ch
;

FORM priceCheckerModels 'Модели прайс чекеров'
    OBJECTS m=PriceCheckerModel
    PROPERTIES(m) READONLY name, maxProduct, handler, note
    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE FORCE PANEL TOOLBAR
;

// Прайс-чекеры
CLASS PriceChecker 'Прайс чекер' : Machinery;
is (GroupPriceChecker machinery) = machinery IS GroupPriceChecker;

groupPriceChecker = DATA GroupPriceChecker (PriceChecker) NOT NULL DELETE;
groupMachinery(PriceChecker machinery) += groupPriceChecker(machinery);

priceCheckerModel = DATA PriceCheckerModel (GroupPriceChecker);
model(GroupPriceChecker groupMachinery) += priceCheckerModel(groupMachinery);

groupPriceChecker (npp) = GROUP AGGR GroupPriceChecker groupPriceChecker BY npp(groupPriceChecker) WHERE groupPriceChecker IS GroupPriceChecker;  

ip 'IP' = DATA VARSTRING[100] (PriceChecker);
priceChecker (ip) = GROUP AGGR PriceChecker priceChecker BY ip (priceChecker);
stockIP(VARSTRING[100] ip) = stock(groupPriceChecker(priceChecker(ip)));

weightPrefix 'Весовой префикс' = DATA VARSTRING[2] (GroupPriceChecker);
weightPrefixIP(VARSTRING[100] ip) = weightPrefix(groupPriceChecker(priceChecker(ip)));

piecePrefix 'Штучный префикс' = DATA VARSTRING[2] (GroupPriceChecker);
piecePrefixIP(VARSTRING[100] ip) = piecePrefix(groupPriceChecker(priceChecker(ip)));

FORM priceChecker 'Прайс чекер'
    OBJECTS ch=PriceChecker FIXED PANEL
    PROPERTIES(ch) nameGroupMachinery, npp, description, port, ip
    EDIT PriceChecker OBJECT ch
;

FORM groupPriceChecker 'Группа прайс чекеров'
    OBJECTS grch=GroupPriceChecker FIXED PANEL
    PROPERTIES(grch) npp, nameStock, name, weightPrefix, piecePrefix,
                     filterSku, showFilterSku SHOWIF filterSku(grch),
                     namePriceListType, inactive

    OBJECTS ch=PriceChecker
    PROPERTIES(ch)  nameGroupMachinery, npp, description, port, ip, NEW, DELETE
    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' groupPriceChecker(ch) == grch 'F10' DEFAULT
    EDIT GroupPriceChecker OBJECT grch
;

FORM groupsPriceChecker 'Группы прайс чекеров'
    OBJECTS grch=GroupPriceChecker
    PROPERTIES(grch) READONLY npp, nameStock, name, weightPrefix, piecePrefix,
                              filterSku, showFilterSku SHOWIF filterSku(grch)
    PROPERTIES(grch)          NEWSESSION NEW, EDIT, DELETE FORCE PANEL TOOLBAR

    OBJECTS ch=PriceChecker
    PROPERTIES(ch)   READONLY npp, description, port, ip
    FILTERS groupPriceChecker(ch) == grch
    
    FILTERGROUP active1
        FILTER 'Активные' active(grch) 'F5' DEFAULT    
;

DESIGN groupsPriceChecker {
    NEW topContainer{
        fill = 1;
        type = SPLITV;

        MOVE grch.box;
        MOVE ch.box;
    }
    MOVE functions.box;
}
@extendFormFilterAccessStock(GroupPriceChecker, grch, groupsPriceChecker, stock, company);

// ------------------------------------------------ Стандартные значения ------------------------------------ //
priceCheckerSID (model) = GROUP MAX PriceCheckerModel model BY sid (model);

loadDefaultPriceCheckerModel 'Добавить модель прайс-чекера'(VARISTRING[110] name, VARSTRING[20] sid, VARSTRING[200] handler) = ACTION  {
    IF NOT priceCheckerSID(sid) THEN {
        FOR NEW pcm = PriceCheckerModel DO {
            ASSIGN name(pcm) <- name;
            ASSIGN sid(pcm) <- sid;
            ASSIGN handler(pcm) <- handler;
        }
    }
}

loadDefaultPriceCheckerModels 'Загрузить стандартные модели прайс-чекеров'() = ACTION {
    EXEC loadDefaultPriceCheckerModel('Прайс-чекеры EasyCSV', 'EasyCSVP', 'equ.clt.handler.easy.EasyCSVHandler');
    EXEC loadDefaultPriceCheckerModel('Прайс-чекеры NewLand', 'NewLand', NULL);
} IN loadDefault;

@implementLoadDefaultData(loadDefaultPriceCheckerModels);

// --------------------------------------- Генерация групп прайс-чекеров -------------------------------- //
loadDefaultGroup 'Сгенерировать группу прайс-чекеров'(Stock stock, PriceCheckerModel model, INTEGER num) = ACTION {
    FOR NEW g = GroupPriceChecker DO {
        stock(g) <- stock;
        name(g) <- 'Группа прайс-чекеров по умолчанию';

        LOCAL numPriceChecker = INTEGER();
        numPriceChecker() <- 0;
        WHILE numPriceChecker() < num DO {
            FOR NEW pc = PriceChecker DO {
                groupPriceChecker(pc) <- g;
                numPriceChecker() <- numPriceChecker() + 1;
                npp(pc) <- numPriceChecker();
                priceCheckerModel(g) <- model;
            }
        }
    }
} IN loadDefault;

EXTEND FORM defaultData
    OBJECTS         pm=PriceCheckerModel FIXED PANEL
    PROPERTIES(pm)  SELECTOR name

    OBJECTS         cPriceChecker=INTEGER FIXED PANEL
    PROPERTIES(cPriceChecker)   intValuePriceChecker = OBJVALUE
    PROPERTIES (s, pm, cPriceChecker)  loadDefaultGroup
;

DESIGN defaultData {
    PROPERTY(name(pm)) {
        caption = 'Модель прайс-чекеров';
    }
    PROPERTY(intValuePriceChecker) {
        caption = 'Количество прайс-чекеров';
    }
    machinery {
        NEW priceChecker {
            caption = 'Прайс-чекеры';
            MOVE PROPERTY(name(pm));
            MOVE PROPERTY(intValuePriceChecker);
            MOVE PROPERTY(loadDefaultGroup(s,pm,cPriceChecker));
        }
    }
}

NAVIGATOR {
    machineryNavigator {
        NEW priceCheckerNavigator 'Прайс-чекеры' {
            ADD groupsPriceChecker;
            ADD priceCheckerModels;
        }
    }
}