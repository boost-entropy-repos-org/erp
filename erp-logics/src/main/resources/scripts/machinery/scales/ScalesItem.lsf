MODULE ScalesItem;

REQUIRE ItemDescription, ScalesPriceTransaction;

NAMESPACE Item;

idSkuGroupMachineryPriceTransactionBarcode (machineryPriceTransaction, barcode) = idItemGroup(skuGroupMachineryPriceTransactionBarcode(machineryPriceTransaction, barcode));

createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS GroupScales THEN
        nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleScalesBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

GROUP scales 'Весы' : public;

// Фильтрация для передачи на весы
@definePrimitiveItemAttribute(passScales, BOOLEAN, 'Передавать на весы', scales);
passScalesSku(sku) += passScalesItem(sku);
skipInGroupMachinerySku(groupMachinery, sku) += WHEN groupMachinery IS GroupScales AND sku IS Item AND NOT passScalesItem(sku) THEN TRUE;

EXTEND DESIGN itemGroup {
    itemGroupDetail1 {
        ADD g.scales;
    }
}

maxCharactersNameScalesItem 'Максимальное количество знаков в наименовании для весов' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES() maxCharactersNameScalesItem
;
EXTEND DESIGN options {
    machinery {
        ADD PROPERTY(maxCharactersNameScalesItem());
    }
}

CONSTRAINT charLength(titleScalesBarcode(barcodeSku(item))) > maxCharactersNameScalesItem() AND passScalesItem(item) 
    MESSAGE 'Максимальное количество знаков в наименовании для весов больше предельного значения';

// Формат этикетки
labelFormatPackItem = DATA LabelFormat(Item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN scales;
labelFormatBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

// Сроки годности
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (Item) IN scales;
hoursExpiryBarcode 'Срок годности в часах с момента фасовки' = hoursExpiryPackItem(skuBarcode(barcode));

@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);

// Состав товара
overMachineryDescriptionBarcode = ABSTRACT TEXT (Barcode);
descriptionBarcode 'Описание' = OVERRIDE descriptionItem(skuBarcode(barcode)), overMachineryDescriptionBarcode(barcode);

@defineMachineryPriceTransactionAttribute(description, 'Описание', TEXT);

synchronizeDescriptionMachineryPriceTransactionGroupScales = ACTION (transaction, groupMachinery) {
    FOR [= GROUP SUM 1 BY transaction, descriptionMachineryPriceTransactionBarcode(transaction, barcode)](transaction, description) IF groupMachinery IS GroupScales
        AND NOT cellScalesGroupScalesDescription(groupMachinery, description)
        ADDOBJ c = CellScales DO {
            groupScalesCellScales(c) <- groupMachinery;
            descriptionCellScales(c) <- description;
        }
}

snapshotAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION synchronizeDescriptionMachineryPriceTransactionGroupScales(transaction, groupMachinery);
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION synchronizeDescriptionMachineryPriceTransactionGroupScales(transaction, groupMachinery);

EXTEND FORM item
    PROPERTIES(i) SHOWIF passScalesItem(i) idLabelFormatPackItem, hoursExpiryPackItem 
;
EXTEND DESIGN item {
    itemPrimaryColumn2 {
        ADD i.scales {
            columns = 1;
        }
    }
}

overCopyItem(s, d) += ACTION (s, d) {
    passScalesItem(d) <- passScalesItem(s);
    labelFormatPackItem(d) <- labelFormatPackItem(s);
    hoursExpiryPackItem(d) <- hoursExpiryPackItem(s);
}

// Установка параметра для единицы измерения
passScalesUOM 'Передавать на весы' =  DATA BOOLEAN (UOM);

EXTEND FORM UOM
    PROPERTIES(u) passScalesUOM
;
EXTEND FORM UOMs
    PROPERTIES(u) READONLY passScalesUOM
;

passScalesItem(i) <- passScalesUOM(UOMItem(i)) WHEN CHANGED(UOMItem(i));

// Генерация штрихкодов
@defineNumeratorItemGroup (weight, 'Нумератор штрихкодов (для весового товара)');
weightNumeratorItem (item) = weightNumeratorItemGroup(itemGroupItem(item));

overNumeratorItem(item) += WHEN passScalesItem(item) THEN weightNumeratorItem(item);

EXTEND DESIGN itemGroup {
    itemGroupHeader2 {
        ADD PROPERTY(nameWeightNumeratorItemGroup(g));
    }
}

// Префикс для весовых штрихкодов
prefixWeightItem 'Префикс штрихкодов для весовых товаров' = DATA STRING[2] ();

EXTEND FORM options
    PROPERTIES() prefixWeightItem
;

EXTEND DESIGN options {
    machinery {
        ADD PROPERTY (prefixWeightItem());
    }
}

//--
@defineItemGroupDefaultValue(expired, 'Не грузить с истекшим ср. год-ти', BOOLEAN);

dataExpiredItem 'Не грузить с истекшим ср. год-ти' = DATA BOOLEAN (Item);
expiredItem 'Не грузить с истекшим ср. год-ти' (item) = OVERRIDE expiredItemGroup(itemGroupItem(item)), dataExpiredItem(item) IN itemBase PERSISTENT ;


expiredSkuBarcode (barcode) = expiredItem(skuBarcode(barcode));

quantityChildWithExpiredItemGroup (itemGroup) = GROUP SUM 1 IF dataExpiredItemGroup(childItemGroup) AND isParentItemGroupItemGroup(childItemGroup, itemGroup) BY itemGroup PERSISTENT;
quantityParentWithExpiredItemGroup (itemGroup) = GROUP SUM 1 IF dataExpiredItemGroup(parentItemGroup) AND isParentItemGroupItemGroup(itemGroup, parentItemGroup) BY itemGroup PERSISTENT;

showExpiredItemGroup 'Не грузить с истекшим ср. год-ти' (itemGroup) = TRUE IF (quantityChildWithExpiredItemGroup (itemGroup) (+) quantityParentWithExpiredItemGroup (itemGroup)) > 0 PERSISTENT;

backgroundShowExpiredItemGroup (itemGroup) =
    IF dataExpiredItemGroup(itemGroup) THEN
        RGB(0,0,0) IF itemGroup IS ItemGroup
    ELSE
        RGB(203,203,206) IF quantityChildWithExpiredItemGroup (itemGroup) != descendantNumberItemGroup(itemGroup)
                         AND NOT quantityParentWithExpiredItemGroup (itemGroup);
                             
setNullShowExpiredItemGroup 'Снять признак для всех потомков' = ACTION (itemGroup) {
    FOR isParentItemGroupItemGroup (childGroup, itemGroup) DO {
        ASSIGN dataExpiredItemGroup(childGroup) <- NULL;
    }
} SHORTCUT dataExpiredItemGroup CONFIRM;     


EXTEND FORM itemGroup PROPERTIES(g) dataExpiredItemGroup;
EXTEND FORM itemGroups PROPERTIES(g) READONLYIF  isReadonly() showExpiredItemGroup BACKGROUND backgroundShowExpiredItemGroup(g) BEFORE deleteg;
EXTEND FORM item PROPERTIES(i) expiredItem;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei expiredItem;

skipInGroupMachinerySku(groupMachinery, sku) += WHEN expiredItem(sku) AND expiryDateSkuStock(sku, stockGroupMachinery(groupMachinery)) < currentDate() THEN TRUE;
