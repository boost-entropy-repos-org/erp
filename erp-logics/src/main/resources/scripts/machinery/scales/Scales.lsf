MODULE Scales;

REQUIRE System, Machinery;

// Группы
CLASS GroupScales 'Группы весов' : GroupMachinery;

stock = DATA Stock (GroupScales);
stock (GroupScales groupMachinery) += stock(groupMachinery);

CONSTRAINT stock(GroupScales s) AND NOT isCompany(stock(s))
    CHECKED BY stock[GroupScales]
        MESSAGE 'Для группы весов должен быть задан склад, который принадлежит компании.';

directory 'Каталог обмена' = DATA VARSTRING[200] (GroupScales) IN base;
directory (GroupScales groupMachinery) += directory(groupMachinery);
pieceCode 'Код для штучных товаров' = DATA STRING[2] (GroupScales) IN base;
weightCode 'Код для весовых товаров' = DATA STRING[2] (GroupScales) IN base;

inactive 'Неактивный' = DATA BOOLEAN (GroupScales);
active 'Активный' (GroupScales group) = group IS GroupScales AND NOT inactive(group);
inactive(GroupScales g) += inactive(g);

// Модели
CLASS ScalesModel 'Модель весов' : Model;

name 'Наименование' = DATA VARISTRING[110](ScalesModel);

scalesName (scalesModel) = GROUP AGGR ScalesModel scalesModel BY name (scalesModel) WHERE scalesModel IS ScalesModel;

name(ScalesModel model) += name(model) IF model IS ScalesModel;

maxText 'MAX допустимое колич. дополнительных текстов' = DATA INTEGER (ScalesModel) IN base;
composition 'Число знаков в доп.тексте (составе товара)' = DATA INTEGER (ScalesModel) IN base;

FORM scalesModel 'Модель весов'
    OBJECTS s=ScalesModel PANEL
    PROPERTIES(s) name, note, handler, maxProduct, maxText,
                  composition
    EDIT ScalesModel OBJECT s
;

FORM scalesModels 'Модели весов'
    OBJECTS m=ScalesModel
    PROPERTIES(m) READONLY name, maxProduct, note, handler
    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE 
;

// Весы
CLASS Scales 'Весы' : Machinery;
TABLE scales (Scales);
is (GroupScales machinery) = machinery IS GroupScales;

groupScales = DATA GroupScales (Scales) NONULL DELETE;
groupMachinery(Scales machinery) += groupScales(machinery);

scalesModel = DATA ScalesModel (GroupScales);
model(GroupScales groupMachinery) += scalesModel(groupMachinery);

number 'Заводской(серийный) номер' = DATA VARSTRING[100] (Scales) IN base;
date 'Дата следующей обязательной поверки' = DATA DATE (Scales) IN base;

groupScales (npp) = GROUP AGGR GroupScales groupScales BY npp(groupScales) WHERE groupScales IS GroupScales;  
scalesNppGroupScales (g, npp) = GROUP AGGR Scales scales BY npp(groupScales(scales)), npp(scales);  

inactive 'Неактивный' = DATA BOOLEAN (Scales);
overInactive(Scales scales) += inactive(scales);
active 'Активный' (Scales scales) = scales IS Scales AND NOT (OVERRIDE inactive(scales), inactive(groupScales(scales)));

FORM scales 'Весы'
    OBJECTS s=Scales PANEL
    PROPERTIES(s) nameGroupMachinery, npp, description,inactive, port, number, date
    EDIT Scales OBJECT s
;

FORM groupScales 'Группа весов'
    OBJECTS grs=GroupScales PANEL
    PROPERTIES(grs) npp, nameStock, name,
                    nameModel, directory,
                    pieceCode, weightCode,
                    filterSku, showFilterSku SHOWIF filterSku(grs),
                    namePriceListType, inactive

    OBJECTS s=Scales
    PROPERTIES(s)   nameGroupMachinery, npp, description, inactive, port, number,
                    date, NEW, DELETE GRID
    FILTERGROUP filters1
        FILTER 'Показывать только для данной группы' groupScales(s) == grs 'F10' DEFAULT
    EDIT GroupScales OBJECT grs
;

FORM groupsScales 'Группы весов'
    OBJECTS grs=GroupScales
    PROPERTIES(grs) READONLY active, npp, nameStock, name,
                         filterSku, nameModel, directory,
                         pieceCode, weightCode
    PROPERTIES(grs) NEWSESSION NEW, EDIT, DELETE 

    OBJECTS s=Scales
    PROPERTIES(s)   READONLY npp, description, inactive, port, number, date
    FILTERS groupScales(s) == grs
    
    FILTERGROUP active1
        FILTER 'Активные' active(grs) 'F5' DEFAULT      
;

DESIGN groupsScales {
    NEW topContainer BEFORE TOOLBARBOX {
        type = SPLITV;
        fill = 1;

        MOVE BOX(grs);
        MOVE BOX(s);
    }
}

@extendFormEditable(groupsScales);
@extendFormFilterAccessStock(GroupScales, grs, groupsScales, stock, company);


// Ячейки
CLASS CellScales 'Ячейка весов';
TABLE cellScales(CellScales);

groupScales = DATA GroupScales (CellScales);

description 'Ячейка' = DATA TEXT (CellScales);
number 'Номер' = PARTITION SUM 1 IF CellScales c IS CellScales BY groupScales (c) ORDER c;

cellScales (groupScales, description) = GROUP AGGR CellScales cellScales
            BY groupScales (cellScales), description (cellScales) WHERE cellScales IS CellScales;

FORM cellScales 'Ячейки весов'
    OBJECTS grs=GroupScales
        PROPERTIES(grs) READONLY nameStock, name,
                             filterSku, directory,
                             pieceCode, weightCode

    OBJECTS cs=CellScales
    PROPERTIES(cs)  number, description, DELETE GRID

    FILTERS groupScales(cs) == grs
;

DESIGN cellScales {
    NEW topContainer{
        type = SPLITV;
        fill = 1;

        MOVE BOX(grs);
        MOVE BOX(cs);
    }
    MOVE TOOLBARBOX;
}

//---------------------------- Этикетки в весы ----------------------------------------//

CLASS LabelFormat 'Формат этикетки';
TABLE labelFormat (LabelFormat);

name 'Наименование' = DATA VARISTRING[50](LabelFormat);

id 'Код формата этикетки' = DATA INTEGER (LabelFormat) IN base;
idTo (labelFormat) = GROUP AGGR LabelFormat labelFormat BY id(labelFormat) WHERE labelFormat IS LabelFormat;

file = DATA CUSTOMFILE (LabelFormat);
loadFile 'Загрузить файл этикетки' (LabelFormat labelFormat) = { INPUT =file(labelFormat) CHANGE; } IN base;

fileMessage = DATA CUSTOMFILE (LabelFormat);
loadFileMessage 'Загрузить файл спец.сообщений' (LabelFormat labelFormat) = { INPUT =fileMessage(labelFormat) CHANGE; } IN base;

scalesModel 'Модель весов'= DATA ScalesModel (LabelFormat);
nameScalesModel 'Модель весов' (LabelFormat labelFormat) = name(scalesModel(labelFormat));

FORM labelFormat 'Формат этикеток весов'
    OBJECTS c=LabelFormat
    PROPERTIES(c) GRID id, name, nameScalesModel, loadFile, loadFileMessage

    EDIT LabelFormat OBJECT c
;

FORM labelFormats 'Форматы этикеток весов'
    OBJECTS c=LabelFormat
    PROPERTIES(c) READONLY id, name, nameScalesModel
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE 

    LIST LabelFormat OBJECT c
;

// ------------------------------------------------ Стандартные значения ------------------------------------ //

loadDefaultScalesModel 'Добавить модель весов'(VARISTRING[110] stringOne, VARSTRING[200] stringTwo) = {
    IF NOT scalesName(stringOne) THEN {
        NEW sm = ScalesModel {
             ASSIGN name(sm) <- stringOne;
             ASSIGN handler(sm) <- stringTwo;
        }
    }
}

loadDefaultScalesModels 'Загрузить стандартные модели весов'() = {
    EXEC loadDefaultScalesModel('Весы Digi', 'equ.clt.handler.digi.DigiHandler');
    EXEC loadDefaultScalesModel('Весы EasyCSV', 'equ.clt.handler.easy.EasyCSVHandler');
    EXEC loadDefaultScalesModel('Весы Штрих-Принт', 'equ.clt.handler.shtrihPrint.ShtrihPrintHandler');
    EXEC loadDefaultScalesModel('Весы Bizerba BCII', 'equ.clt.handler.bizerba.BizerbaBCIIHandler');
    EXEC loadDefaultScalesModel('Весы Bizerba BS', 'equ.clt.handler.bizerba.BizerbaBSHandler');
    EXEC loadDefaultScalesModel('Весы Bizerba SCII', 'equ.clt.handler.bizerba.BizerbaSCIIHandler');
    EXEC loadDefaultScalesModel('Весы CAS CL5000J', 'equ.clt.handler.cas.CL5000JHandler');
    EXEC loadDefaultScalesModel('Весы CAS CL5000D', 'equ.clt.handler.cas.CL5000DHandler');
    EXEC loadDefaultScalesModel('Весы MassaK RL10', 'equ.clt.handler.massak.MassaKRL10Handler');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultScalesModels);

// --------------------------------------- Генерация групп весов -------------------------------- //
loadDefaultGroup 'Сгенерировать группу весов'(PriceListType priceListType, Stock stock, ScalesModel model, INTEGER num) = {
    NEW g = GroupScales {
        npp(g) <- [= GROUP MAX npp(GroupMachinery g)]() (+) 1;
        stock(g) <- stock;
        priceListType(g) <- priceListType;
        name(g) <- 'Группа весов по умолчанию';

        LOCAL numScales = INTEGER();
        numScales() <- 0;
        WHILE numScales() < num DO {
            NEW s = Scales {
                groupScales(s) <- g;
                numScales() <- numScales() + 1;
                npp(s) <- numScales();
                scalesModel(g) <- model;
                description(s) <- CONCAT ' ', 'Весы', VARSTRING[255](numScales()), '(', name(stock), ')';
            }
        }
    }
};

EXTEND FORM defaultData
    OBJECTS         sm=ScalesModel PANEL
    PROPERTIES(sm)  SELECTOR name

    OBJECTS         cScales=INTEGER PANEL
    PROPERTIES(cScales)   intValueScales = VALUE
    PROPERTIES(pt, s, sm, cScales)  loadDefaultGroup
;

DESIGN defaultData {
    PROPERTY(name(sm)) {
        caption = 'Модель весов';
    }
    PROPERTY(intValueScales) {
        caption = 'Количество весов';
    }
    machinery {
        NEW scales {
            caption = 'Весы';
            MOVE PROPERTY(name(sm));
            MOVE PROPERTY(intValueScales);
            MOVE PROPERTY(loadDefaultGroup(pt,s,sm,cScales));
        }
    }
}

NAVIGATOR {
    machineryNavigator {
        NEW scalesNavigator 'Весы'{
            ADD groupsScales;
            ADD scalesModels;
            ADD labelFormats;
            ADD cellScales;
        }
    }
}