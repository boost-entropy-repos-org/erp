MODULE Machinery;

REQUIRE System, Stock, Barcode, PriceListType, DefaultData;

//---------------------------- Сервера управления оборудования ----------------------------//

CLASS EquipmentServer 'Сервер оборудования';
TABLE equipmentServer (EquipmentServer);

nameEquipmentServer 'Наименование' = DATA VARISTRING[50](EquipmentServer) IN recognize;

sidEquipmentServer 'Идентификатор' = DATA VARSTRING[20] (EquipmentServer) IN recognize;
sidToEquipmentServer(equipmentServer) = GROUP AGGR equipmentServer BY sidEquipmentServer (equipmentServer) WHERE equipmentServer IS EquipmentServer;
delayEquipmentServer 'Период обновления (в миллисекундах)' = DATA INTEGER (EquipmentServer) IN base;

//---------------------------- Ошибки сервера оборудования ----------------------------//

CLASS EquipmentServerError 'Ошибки';
TABLE equipmentServerError (EquipmentServerError);

dataEquipmentServerError 'Сообщение об ошибке' = DATA VARSTRING[200] (EquipmentServerError) IN base;
erTraceEquipmentServerError 'След ошибки' = DATA TEXT (EquipmentServerError) IN base;
dateEquipmentServerError 'Время возникновения' = DATA DATETIME (EquipmentServerError) IN base;
equipmentServerEquipmentServerError 'Сервер оборудования (ID)' = DATA EquipmentServer(EquipmentServerError) IN base;

//---------------------------- Лог сервера оборудования ----------------------------//

CLASS EquipmentServerLog 'Лог';
TABLE equipmentServerLog (EquipmentServerLog);

dataEquipmentServerLog 'Сообщение' = DATA TEXT (EquipmentServerLog) IN base;
dateEquipmentServerLog 'Время' = DATA DATETIME (EquipmentServerLog) IN base;
equipmentServerEquipmentServerLog 'Сервер оборудования (ID)' = DATA EquipmentServer(EquipmentServerLog) IN base;

//---------------------------- Формы для серверов оборудования ----------------------------//

FORM equipmentServers 'Серверы оборудования'
    OBJECTS es = EquipmentServer
    PROPERTIES(es)  READONLY nameEquipmentServer, sidEquipmentServer, delayEquipmentServer
    PROPERTIES(es)  ADDFORM, EDITFORM, DELETE

    OBJECTS e = EquipmentServerError
    PROPERTIES(e) READONLY dataEquipmentServerError, dateEquipmentServerError
    PROPERTIES(e) DELETESESSION
    PROPERTIES(e) READONLY FORCE PANEL erTraceEquipmentServerError

    OBJECTS l = EquipmentServerLog
    PROPERTIES(l) READONLY dataEquipmentServerLog, dateEquipmentServerLog
    PROPERTIES(l) DELETESESSION

    FILTERS equipmentServerEquipmentServerError (e) == es
    FILTERS equipmentServerEquipmentServerLog (l) == es
;

DESIGN equipmentServers FROM DEFAULT {
    main {
        NEW topContainer {
            fill = 1;
            type = SPLITV;

            ADD es.box;
            NEW specContainer {
                type = TABBED;
                fill = 1;

                NEW errorContainer {
                    caption = 'Ошибки';
                    ADD e.box;
                    PROPERTY(erTraceEquipmentServerError(e)) {
                        fillHorizontal = 1;
                        panelLabelAbove = TRUE;
                    }
                }
                ADD l.box;
            }
        }
        ADD functions.box;
    }
}

//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT GroupMachinery 'Группы оборудования';
TABLE groupMachinery (GroupMachinery);

nameGroupMachinery 'Наименование' = DATA VARSTRING[200] (GroupMachinery) IN base MINCHARWIDTH 10 PREFCHARWIDTH 20;

equipmentServerGroupMachinery = DATA EquipmentServer (GroupMachinery);
nameEquipmentServerGroupMachinery 'Сервер оборудования' (groupMachinery) = nameEquipmentServer(equipmentServerGroupMachinery(groupMachinery));
sidEquipmentServerGroupMachinery 'ИД сервера оборудования' (groupMachinery) = sidEquipmentServer(equipmentServerGroupMachinery(groupMachinery));

// -------------------------------- Склады --------------------------------------------- //

stockGroupMachinery = ABSTRACT Stock (GroupMachinery) PERSISTENT;
nameStockGroupMachinery 'Склад' (groupMachinery) = nameStock(stockGroupMachinery(groupMachinery));

// фильтрация по группам товаров

filterSkuGroupMachinery 'Фильтровать по классификатору' = DATA BOOLEAN (GroupMachinery);

TABLE groupMachinerySkuGroup (GroupMachinery, SkuGroup);
inGroupMachinerySkuGroup 'Вкл' = DATA BOOLEAN (GroupMachinery, SkuGroup);

FORM filterSkuGroupMachinery 'Фильтрация по классификатору'
    OBJECTS gm = GroupMachinery FIXED PANEL
    PROPERTIES(gm) READONLY nameStockGroupMachinery, nameEquipmentServerGroupMachinery, nameGroupMachinery

    TREE treeGroups g=SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(g)
    ORDER BY nameSkuGroup
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(g) DEFAULT

    OBJECTS cg=SkuGroup
    PROPERTIES(cg) READONLY canonicalNameSkuGroup
    PROPERTIES(gm, cg)      inGroupMachinerySkuGroup
    ORDER BY canonicalNameSkuGroup
    FILTERS isParentLeafSkuGroupSkuGroup(cg, g)
    FILTERGROUP inactive1 FILTER 'Активные' 'F5' activeSkuGroup(cg) DEFAULT

    FILTERGROUP filters
        FILTER 'Только выбранные группы' 'F10' inGroupMachinerySkuGroup(gm, cg)
;

DESIGN filterSkuGroupMachinery FROM DEFAULT {
    main {
        ADD gm.box;
        NEW row {
            fill = 1;
            type = SPLITH;

            ADD treeGroups.tree.box;
            ADD cg.box {fill = 2;}
        }
        ADD functions.box;
    }

}

showFilterSkuGroupMachinery 'Выбрать группы' (groupMachinery) = ACTION FORM filterSkuGroupMachinery OBJECTS gm = groupMachinery MODAL;

//---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT Model 'Модель';
TABLE model (Model);

nameModel 'Наименование' = ABSTRACT VARISTRING[110](Model);

sidModel 'Код' = DATA VARSTRING[20] (Model) IN base;
noteModel 'Примечание' = DATA VARSTRING[200] (Model) IN base;
handlerModel 'Обработчик' = DATA VARSTRING[200] (Model) IN base;
maxProductModel 'MAX допустимое колич. товаров' = DATA INTEGER (Model) IN base;

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT Machinery 'Оборудование';
TABLE machinery(Machinery);

groupMachineryMachinery = ABSTRACT GroupMachinery (Machinery) PERSISTENT;
nameGroupMachineryMachinery 'Группа' (machinery) = nameGroupMachinery(groupMachineryMachinery(machinery));

modelMachinery = ABSTRACT Model (Machinery) PERSISTENT;
sidModelMachinery 'Код' (machinery) = sidModel(modelMachinery(machinery)) IN base;
nameModelMachinery 'Модель' (machinery) = nameModel(modelMachinery(machinery)) IN base;
handlerModelMachinery 'Обработчик' (machinery) = handlerModel(modelMachinery(machinery)) IN base;

nppMachinery 'Порядковый номер' = DATA INTEGER (Machinery) IN base;
descriptionMachinery 'Описание' = DATA VARSTRING[200] (Machinery) IN base;
portMachinery 'Адрес/порт' = DATA VARSTRING[100] (Machinery) IN base;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraftPriceTransactionDocument 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;
descriptionPriceTransactionDocument 'Название документа загрузки' = ABSTRACT VARSTRING[200] (PriceTransactionDocument) PERSISTENT;
skipPriceTransactionDocument 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) PERSISTENT;

sentPriceTransactionDocument 'Принят к загрузке в оборудование' = DATA BOOLEAN (PriceTransactionDocument);
sentPriceTransactionDocument(document) <- NULL WHEN SET(isDraftPriceTransactionDocument(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Machinery.PriceTransactionDocument;
    Machinery.isDraftPriceTransactionDocument (document) += isDraft###concrete(document);
    Machinery.descriptionPriceTransactionDocument (document) += description###concrete(document);
END
//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT MachineryPriceTransaction 'Загрузка прайса в оборудование' : Historizable;
TABLE machineryPriceTransaction (MachineryPriceTransaction);

groupMachineryMachineryPriceTransaction (transaction) = ABSTRACT GroupMachinery (MachineryPriceTransaction);
nameGroupMachineryMachineryPriceTransaction 'Группа оборудования' (transaction) = nameGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

stockMachineryPriceTransaction (transaction) = stockGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));

equipmentServerMachineryPriceTransaction (transaction) = equipmentServerGroupMachinery(groupMachineryMachineryPriceTransaction(transaction));
sidEquipmentServerMachineryPriceTransaction (transaction) = sidEquipmentServer(equipmentServerMachineryPriceTransaction (transaction));

// Дата/время
dateMachineryPriceTransaction 'Дата' = DATA DATE (MachineryPriceTransaction);
dateMachineryPriceTransaction (transaction) <- currentDate() WHEN SET(transaction IS MachineryPriceTransaction);

timeMachineryPriceTransaction 'Время' = DATA TIME (MachineryPriceTransaction);
timeMachineryPriceTransaction (transaction) <- currentTime() WHEN SET(transaction IS MachineryPriceTransaction);

dateTimeMachineryPriceTransaction 'Дата/время' (transaction) = dateTimeToDateTime(dateMachineryPriceTransaction(transaction), timeMachineryPriceTransaction(transaction));

orderMachineryPriceTransaction (transaction) = STRUCT(dateTimeMachineryPriceTransaction(transaction), transaction) PERSISTENT;

// Статус
snapshotMachineryPriceTransaction 'Целиком' = DATA BOOLEAN (MachineryPriceTransaction);

succeededMachineryPriceTransaction 'Загружена' = DATA BOOLEAN (MachineryPriceTransaction);
canceledMachineryPriceTransaction 'Отменена' = DATA BOOLEAN (MachineryPriceTransaction);
processMachineryPriceTransaction 'Требуется загрузка' (machineryPriceTransaction) =
    machineryPriceTransaction IS MachineryPriceTransaction AND NOT
    succeededMachineryPriceTransaction(machineryPriceTransaction) AND NOT
    canceledMachineryPriceTransaction(machineryPriceTransaction);

// Основание
commentMachineryPriceTransaction 'Примечание' = DATA VARSTRING[30] (MachineryPriceTransaction);

priceTransactionDocumentMachineryPriceTransaction = DATA PriceTransactionDocument (MachineryPriceTransaction);
descriptionPriceTransactionDocumentMachineryPriceTransaction 'Основание загрузки' (transaction) =
    descriptionPriceTransactionDocument(priceTransactionDocumentMachineryPriceTransaction(transaction));

// todo : persistent почему-то не работает
descriptionMachineryPriceTransaction 'Основание' (document) =
    OVERRIDE descriptionPriceTransactionDocumentMachineryPriceTransaction(document), commentMachineryPriceTransaction(document);

countProcessPriceTransactionDocument 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF processMachineryPriceTransaction(transaction)
                                                                                 BY priceTransactionDocumentMachineryPriceTransaction(transaction) PERSISTENT;

succeededPriceTransactionDocument 'Загружен в оборудование' (document) = sentPriceTransactionDocument (document) IF NOT countProcessPriceTransactionDocument(document);

statusMachineryPriceTransactionDocument 'Статус загрузки в оборудование' (document) =
                                                        CASE
                                                            WHEN skipPriceTransactionDocument(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument
                                                            WHEN succeededPriceTransactionDocument(document) THEN 'Успешно загружен' IF document IS PriceTransactionDocument
                                                            WHEN sentPriceTransactionDocument(document) THEN 'Принят к загрузке' IF document IS PriceTransactionDocument
                                                            ELSE 'Не загружен' IF document IS PriceTransactionDocument
                                                        ;

// Загруженные штрих-коды
TABLE machineryPriceTransactionBarcode (MachineryPriceTransaction, Barcode);

inMachineryPriceTransactionBarcode 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode);
nameMachineryPriceTransactionBarcode 'Наименование' = DATA VARSTRING[255] (MachineryPriceTransaction, Barcode);
priceMachineryPriceTransactionBarcode 'Цена' = DATA NUMERIC[14,2] (MachineryPriceTransaction, Barcode);

orderMachineryPriceTransactionBarcode(transaction, barcode) = orderMachineryPriceTransaction(transaction)
                                                              IF inMachineryPriceTransactionBarcode(transaction, barcode)
                                                              AND NOT canceledMachineryPriceTransaction(transaction) PERSISTENT INDEXED;

// Текущие загруженные штрих-коды
TABLE barcodeGroupMachinery (Barcode, GroupMachinery);

lastOrderTransactionBarcodeGroupMachinery (barcode, groupMachinery) = GROUP MAX orderMachineryPriceTransactionBarcode(transaction, barcode)
                                                                            BY barcode, groupMachineryMachineryPriceTransaction(transaction);
lastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = lastOrderTransactionBarcodeGroupMachinery(barcode, groupMachinery) [2] PERSISTENT;
prevLastTransactionBarcodeGroupMachinery (barcode, groupMachinery) = PREV(lastTransactionBarcodeGroupMachinery (barcode, groupMachinery));

transactionNameBarcodeGroupMachinery 'Текущее наименование в оборудовании' (barcode, groupMachinery)  =
    nameMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);
prevTransactionNameBarcodeGroupMachinery(barcode, groupMachinery) = PREV(transactionNameBarcodeGroupMachinery(barcode, groupMachinery));

transactionPriceBarcodeGroupMachinery 'Текущая цена в оборудовании' (barcode, groupMachinery)  =
    priceMachineryPriceTransactionBarcode(lastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode) PERSISTENT;
prevTransactionPriceBarcodeGroupMachinery (barcode, groupMachinery) = PREV(transactionPriceBarcodeGroupMachinery(barcode, groupMachinery));

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS MachineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (MachineryPriceTransactionError);

dataMachineryPriceTransactionError 'Сообщение об ошибке' = DATA VARSTRING[200] (MachineryPriceTransactionError) IN base;
dateMachineryPriceTransactionError 'Время возникновения' = DATA DATETIME (MachineryPriceTransactionError) IN base;
errorTraceMachineryPriceTransactionError 'След исключения' = DATA TEXT (MachineryPriceTransactionError) IN base;
machineryPriceTransactionMachineryPriceTransactionError 'Транзакция (ID)' = DATA MachineryPriceTransaction(MachineryPriceTransactionError) IN base;
quantityMachineryPriceTransactionErrorMachineryPriceTransaction 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 IF machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) == MachineryPriceTransaction
    BY machineryPriceTransactionMachineryPriceTransactionError (machineryPriceTransactionError) IN base;

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (MachineryPriceTransaction, Machinery);
inMachineryPriceTransactionMachinery 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Machinery);
nppsMachineryPriceTransaction 'Номера устройств' (transaction) =
    GROUP CONCAT STRING[3](nppMachinery(machinery)) IF inMachineryPriceTransactionMachinery(transaction, machinery), ','
          BY transaction
          ORDER machinery MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;

// перезагрузка прайса целиком
selectedMachinery 'Вкл' = DATA SESSION BOOLEAN (Machinery);

GROUP snapshotMachineryPriceGroup 'Перезагрузка прайса' : public;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = Stock FIXED PANEL
    PROPERTIES(s) READONLY sname = nameStock

    OBJECTS g = GroupMachinery
    PROPERTIES(g) READONLY nameGroupMachinery, nameStockGroupMachinery, nameEquipmentServerGroupMachinery
    FILTERS stockGroupMachinery(g) == s

    OBJECTS m = Machinery
    PROPERTIES(m)          selectedMachinery
    PROPERTIES(m) READONLY nppMachinery, descriptionMachinery, portMachinery

    FILTERS groupMachineryMachinery(m) == g
;

DESIGN groupMachineryInput FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = MachineryPriceTransaction FIXED PANEL
    PROPERTIES(t) nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                  snapshotMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY idBarcode
    PROPERTIES(t, b)       inMachineryPriceTransactionBarcode, nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode FORCE PANEL
    FILTERS inMachineryPriceTransactionBarcode(t, b)

    EDIT MachineryPriceTransaction OBJECT t;
;

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES nameStock(s) SELECTOR
    FILTERS isCompanyStock(s)

    OBJECTS t = MachineryPriceTransaction
    PROPERTIES(t) READONLY snapshotMachineryPriceTransaction, nameGroupMachineryMachineryPriceTransaction, dateMachineryPriceTransaction, timeMachineryPriceTransaction,
                           descriptionMachineryPriceTransaction, succeededMachineryPriceTransaction, canceledMachineryPriceTransaction,
                           quantityMachineryPriceTransactionErrorMachineryPriceTransaction BACKGROUND quantityMachineryPriceTransactionErrorMachineryPriceTransaction(t),
                           nppsMachineryPriceTransaction FORCE PANEL SHOWIF snapshotMachineryPriceTransaction(t)
    PROPERTIES(t) READONLY nameUserCreatedHistorizable, hostnameComputerCreatedHistorizable
    PROPERTIES(t)          ADDFORM, EDITFORM, DELETE
    FILTERS stockMachineryPriceTransaction(t) == s

    OBJECTS b = Barcode
    PROPERTIES(b)    idBarcode
    PROPERTIES(t, b) nameMachineryPriceTransactionBarcode, priceMachineryPriceTransactionBarcode

    FILTERS inMachineryPriceTransactionBarcode(t, b)

    OBJECTS e = MachineryPriceTransactionError
    PROPERTIES(e)    dataMachineryPriceTransactionError, dateMachineryPriceTransactionError
    PROPERTIES(e)  FORCE PANEL  errorTraceMachineryPriceTransactionError
    FILTERS machineryPriceTransactionMachineryPriceTransactionError(e) == t
;
@extendFormFilterStockAccess(Stock, s, machineryPriceTransactions);

DESIGN machineryPriceTransactions FROM DEFAULT {
    main {
        s.panel { type = CONTAINERH; }
        NEW topContainer{
            fill = 1;
            type = SPLITV;

            ADD t.box;
            NEW specContainer{
                fill = 1;
                type = TABBED;
                ADD b.box;
                NEW errorContainer {
                   caption = 'Сообщения об ошибках';
                   ADD e.box;
                   PROPERTY(errorTraceMachineryPriceTransactionError(e)) {
                      fillHorizontal = 1;
                      panelLabelAbove = TRUE;
                   }
                }
            }
        }
        ADD functions.box;
    }
}

// ------------------------------------------------ Действия по загрузке ------------------------------------ //

createMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (GroupMachinery);

overInGroupMachinerySku = ABSTRACT BOOLEAN (GroupMachinery, Sku);
inGroupMachinerySku 'Вкл' (groupMachinery, sku) = groupMachinery IS GroupMachinery
                                                    AND sku IS Sku
                                                         AND NOT (filterSkuGroupMachinery(groupMachinery) AND NOT inGroupMachinerySkuGroup(groupMachinery, skuGroupSku(sku)))
                                                         AND NOT overInGroupMachinerySku(groupMachinery, sku);

// Перезагрузка целиком
snapshotAttributeMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (MachineryPriceTransaction, GroupMachinery);

snapshotGroupMachineryDepartmentStore 'Перезагрузить прайс' = ACTION (stock) NEWSESSION {
    FORM groupMachineryInput OBJECTS s = stock MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL groupMachinery = GroupMachinery ();
        ASSIGN groupMachinery() <- chosenObject('g');
        EXEC createMachineryPriceTransactionGroupMachinery(groupMachinery());
        FOR t == addedObject() DO {
            ASSIGN groupMachineryMachineryPriceTransaction(t) <- groupMachinery();
            ASSIGN commentMachineryPriceTransaction(t) <- 'Перезагрузка прайса целиком';
            ASSIGN snapshotMachineryPriceTransaction(t) <- TRUE;
            ASSIGN inMachineryPriceTransactionMachinery(t, machinery) <- selectedMachinery(machinery);
            ASSIGN inMachineryPriceTransactionBarcode(t, barcode) <- activeBarcode(barcode) AND
                                                                  prevLastTransactionBarcodeGroupMachinery(barcode, groupMachinery()) AND
                                                                  inGroupMachinerySku(groupMachinery(), skuBarcode(barcode)); // важно, что товар должен быть активным на текущий момент
            ASSIGN nameMachineryPriceTransactionBarcode(t, barcode) <- prevTransactionNameBarcodeGroupMachinery(barcode, groupMachinery());
            EXEC snapshotAttributeMachineryPriceTransactionGroupMachinery(t, groupMachinery());
            ASSIGN priceMachineryPriceTransactionBarcode(t, barcode) <- prevTransactionPriceBarcodeGroupMachinery(barcode, groupMachinery());
        }
        EXEC apply();
    }
} CONFIRM IN snapshotMachineryPriceGroup;

// Инкрементная загрузка
GROUP incrementMachineryPriceGroup 'Инкрементная загрузка' : public;

// ------------------------------- Определение цены, по которой загружать ------------------------------- //

priceListTypeGroupMachinery = DATA PriceListType (GroupMachinery);
namePriceListTypeGroupMachinery 'Вид цен для POS' (groupMachinery) = namePriceListType(priceListTypeGroupMachinery(groupMachinery));

priceBarcodeGroupMachinery 'Цена' (barcode, groupMachinery) = priceAPriceListTypeSkuStockDateTime(priceListTypeGroupMachinery(groupMachinery),
                                                                                                  skuBarcode(barcode),
                                                                                                  stockGroupMachinery(groupMachinery),
                                                                                                  currentDateTime());

createMachineryPriceTransactionSnapshot = DATA SESSION BOOLEAN ();

createMachineryPriceTransactionSku = DATA SESSION BOOLEAN (Sku);

createMachineryPriceTransactionDocument = DATA SESSION PriceTransactionDocument();
createMachineryPriceTransactionComment = DATA SESSION VARSTRING[20] ();

createAttributeMachineryPriceTransaction = ABSTRACT ACTION LIST (MachineryPriceTransaction);
createAttributeMachineryPriceTransactionStock = ABSTRACT ACTION LIST (MachineryPriceTransaction, Stock);
createAttributeMachineryPriceTransactionGroupMachinery = ABSTRACT ACTION LIST (MachineryPriceTransaction, GroupMachinery);

createMachineryPriceTransaction 'Создать транзакцию' = ACTION (stock) {
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    ASSIGN message() <- TEXT('Принято к загрузке в оборудование : \n');

    FOR stockGroupMachinery(groupMachinery) == stock DO {
        LOCAL inBarcode = BOOLEAN (Barcode);

        ASSIGN inBarcode(barcode) <- createMachineryPriceTransactionSku(skuBarcode(barcode));

        // делаем разными запросами, чтобы было проще PostgreSQL
        ASSIGN inBarcode(barcode) <- activeBarcode(barcode) WHERE inBarcode(barcode); // если активный штрих-код

        ASSIGN inBarcode(barcode) <- inGroupMachinerySku(groupMachinery, skuBarcode(barcode)) WHERE inBarcode(barcode); // если на эту группу оборудования должна закачиваться

        ASSIGN inBarcode(barcode) <- TRUE IF priceBarcodeGroupMachinery(barcode, groupMachinery) WHERE inBarcode(barcode); // если есть цена

        IF NOT createMachineryPriceTransactionSnapshot() THEN
            ASSIGN inBarcode(barcode) <- TRUE IF NOT (priceBarcodeGroupMachinery(barcode, groupMachinery) == transactionPriceBarcodeGroupMachinery(barcode, groupMachinery)) WHERE inBarcode(barcode);

        LOCAL countBarcode = INTEGER();
        ASSIGN countBarcode() <- [GROUP SUM 1 IF inBarcode(barcode)]();
        IF countBarcode() THEN {
            EXEC createMachineryPriceTransactionGroupMachinery(groupMachinery);
            FOR t == addedObject() DO {
                ASSIGN groupMachineryMachineryPriceTransaction(t) <- groupMachinery;
                ASSIGN priceTransactionDocumentMachineryPriceTransaction(t) <- createMachineryPriceTransactionDocument();
                ASSIGN commentMachineryPriceTransaction(t) <- createMachineryPriceTransactionComment();
                ASSIGN inMachineryPriceTransactionBarcode(t, barcode) <- inBarcode(barcode);
                EXEC createAttributeMachineryPriceTransaction(t);
                EXEC createAttributeMachineryPriceTransactionStock(t, stock);
                EXEC createAttributeMachineryPriceTransactionGroupMachinery(t, groupMachineryMachineryPriceTransaction(t));
                ASSIGN priceMachineryPriceTransactionBarcode(t, barcode) <- priceBarcodeGroupMachinery(barcode, groupMachinery) WHERE inMachineryPriceTransactionBarcode(t, barcode);
            }

            ASSIGN message() <- [FORMULA TEXT '$1 || $2 || \' - \' || CAST($3 as text) || \' товаров.\'\n']
                             (message(), nameGroupMachinery(groupMachinery), countBarcode());
            ASSIGN sentSomething() <- TRUE;
        }
    }

    IF sentSomething() THEN
        MESSAGE message()
    ELSE
        MESSAGE 'Загрузка прайса в оборудование не требуется.';
};

createBalanceMachineryPriceTransaction 'Остатки' = ACTION (stock) NEWSESSION AUTOAPPLY {
    ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF currentBalanceSkuStock(sku, stock);
    ASSIGN createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
    EXEC createMachineryPriceTransaction(stock);
} CONFIRM IN incrementMachineryPriceGroup;

createPriceMachineryPriceTransaction 'Все товары' = ACTION (stock) NEWSESSION AUTOAPPLY {
    ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE;
    ASSIGN createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
    EXEC createMachineryPriceTransaction(stock);
} CONFIRM IN incrementMachineryPriceGroup;

EXTEND FORM machineryPriceTransactions
    PROPERTIES(s) createBalanceMachineryPriceTransaction, createPriceMachineryPriceTransaction, snapshotGroupMachineryDepartmentStore
;

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBase(object, caption, nameProp)
    prevTransaction###object##BarcodeGroupMachinery caption###' (тек.)' (barcode, groupMachinery)  =
        object##MachineryPriceTransactionBarcode(prevLastTransactionBarcodeGroupMachinery(barcode, groupMachinery), barcode);

    snapshotAttributeMachineryPriceTransactionGroupMachinery(t, groupMachinery) +=
        ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- prevTransaction###object##BarcodeGroupMachinery(barcode, groupMachinery);

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) nameProp###object##MachineryPriceTransactionBarcode;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY nameProp###object##MachineryPriceTransactionBarcode;
END

META defineMachineryPriceTransactionAttributeAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttributeMachineryPriceTransaction(t) += ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- object##Barcode(barcode)
                                                          WHERE inMachineryPriceTransactionBarcode(t, barcode);
END

META defineMachineryPriceTransactionAttribute(object, caption, type)
    object###MachineryPriceTransactionBarcode caption = DATA type (MachineryPriceTransaction, Barcode);
    @defineMachineryPriceTransactionAttributeAction(object, caption, );
END

META defineMachineryPriceTransactionAttribute(object, caption, type, nameProp)
    object###MachineryPriceTransactionBarcode = DATA type (MachineryPriceTransaction, Barcode);
    nameProp###object###MachineryPriceTransactionBarcode caption (transaction, barcode) =
        nameProp###object(object###MachineryPriceTransactionBarcode(transaction, barcode));
    @defineMachineryPriceTransactionAttributeAction(object, caption, nameProp);
END

META defineMachineryPriceTransactionAttributeStockAction(object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    createAttributeMachineryPriceTransactionStock(t, stock) += ACTION ASSIGN object##MachineryPriceTransactionBarcode(t, barcode) <- object##BarcodeStock(barcode, stock)
                                                                      WHERE inMachineryPriceTransactionBarcode(t, barcode);
END
META defineMachineryPriceTransactionAttributeStock(object, caption, type)
    object###MachineryPriceTransactionBarcode caption = DATA type (MachineryPriceTransaction, Barcode);
    @defineMachineryPriceTransactionAttributeStockAction(object, caption, );
END

// --------------- Атрибуты по умолчанию ------------------ //
@defineMachineryPriceTransactionAttribute(skuGroup, 'Группа товара', SkuGroup, canonicalName);
@defineMachineryPriceTransactionAttribute(isWeight, 'Весовой товар', BOOLEAN);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

// Подключение свойств к документу
META defineDocumentMachineryPriceTransaction (document, skuProp, stockProp)
    create###document##MachineryPriceTransaction 'Загрузить в оборудование' = ACTION (document) NEWSESSION AUTOAPPLY {
        ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF quantity###document##Detail###skuProp###document(sku, document);
        ASSIGN createMachineryPriceTransactionDocument() <- document;
        EXEC createMachineryPriceTransaction(stockProp###document(document));
        ASSIGN sentPriceTransactionDocument(document) <- TRUE;
    } TOOLBAR CONFIRM;

    createSnapshot###document##MachineryPriceTransaction 'Перегрузить все позиции' = ACTION (document) NEWSESSION AUTOAPPLY {
        ASSIGN createMachineryPriceTransactionSnapshot() <- TRUE;
        ASSIGN createMachineryPriceTransactionSku(sku) <- TRUE IF quantity###document##Detail###skuProp###document(sku, document);
        ASSIGN createMachineryPriceTransactionDocument() <- document;
        EXEC createMachineryPriceTransaction(stockProp###document(document));
        ASSIGN sentPriceTransactionDocument(document) <- TRUE;
    } CONFIRM;

    showCreateMachineryPriceTransaction###document 'Показывать' (document) = isPosted###document(document) AND NOT Machinery.skipPriceTransactionDocument(document)
                                                                                                           AND NOT sentPriceTransactionDocument(document);
    backgroundCreateMachineryPriceTransaction###document 'Цвет' (document) = IF countProcessPriceTransactionDocument(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction###document(document);
END

META extendFormDocumentMachineryPriceTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusMachineryPriceTransactionDocument ON SHORTCUT createSnapshot###document##MachineryPriceTransaction(object) BACKGROUND backgroundCreateMachineryPriceTransaction###document(object) READONLY AFTER afterProp,
                           create###document###MachineryPriceTransaction FORCE PANEL SHOWIF showCreateMachineryPriceTransaction###document(object)
    ;
    EXTEND DESIGN form {
        propContainer{
            NEW machinery {                 
                caption = 'Загрузки' ;
                type = CONTAINERV;    
                        
                ADD PROPERTY (create###document###MachineryPriceTransaction);
            }
        }
    }
END

// ------------------------------------------------ Стандартные значения ------------------------------------ //

EXTEND FORM defaultData
    OBJECTS         es=EquipmentServer FIXED PANEL
    PROPERTIES(es)  SELECTOR nameEquipmentServer

    OBJECTS         pt=PriceListType FIXED PANEL
    PROPERTIES(pt)  SELECTOR namePriceListType

    OBJECTS         s=Stock FIXED PANEL
    PROPERTIES(s)   SELECTOR nameStock
;

EXTEND DESIGN defaultData {
    pane {
        NEW machinery {
            fill = 1;
            caption = 'Оборудование';


            ADD PROPERTY(nameEquipmentServer(es)) {
                caption = 'Сервер оборудования';
            }
            ADD PROPERTY(namePriceListType(pt)) {
                caption = 'Вид цен';
            }
            ADD PROPERTY(nameStock(s)) {
                caption = 'Склад';
            }
        }
    }
}

NAVIGATOR {
    NEW machineryNavigator 'Оборудование' BEFORE administration TO toolbar IMAGE '/images/cogwheel.png' {
        NEW machineryExport 'Загрузка в оборудование' {
            ADD machineryPriceTransactions;
        }
        NEW machineryMasterData 'Справочники' {
            ADD equipmentServers;
        }
    }
}