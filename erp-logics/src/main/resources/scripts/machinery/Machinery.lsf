MODULE Machinery;

REQUIRE System, SkuLedger, Barcode, PriceListType, DefaultData;

//---------------------------- группы оборудования ----------------------------------------//

CLASS ABSTRACT GroupMachinery 'Группы оборудования';
TABLE groupMachinery (GroupMachinery);

npp 'Порядковый номер' = DATA INTEGER (GroupMachinery) IN recognize NOT NULL; 
name 'Наименование' = DATA VARSTRING[200] (GroupMachinery) IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 20;
directory = ABSTRACT VARSTRING[200] (GroupMachinery);

inactive 'Неактивный' = ABSTRACT BOOLEAN (GroupMachinery);
active 'Активный' (GroupMachinery group) = group IS GroupMachinery AND NOT inactive(group);

groupMachineryNpp = GROUP AGGR GroupMachinery groupMachinery BY npp(groupMachinery);

// -------------------------------- Склады --------------------------------------------- //

stock = ABSTRACT Stock (GroupMachinery) PERSISTENT;
idStock 'Склад' (GroupMachinery groupMachinery) = id(stock(groupMachinery));
nameStock 'Склад' (GroupMachinery groupMachinery) = name(stock(groupMachinery));

// фильтрация по группам товаров

filterSku 'Фильтровать по классификатору' = DATA BOOLEAN (GroupMachinery);

TABLE groupMachinerySkuGroup (GroupMachinery, SkuGroup);
in 'Вкл' = DATA BOOLEAN (GroupMachinery, SkuGroup);

FORM filterSkuGroupMachinery 'Фильтрация по классификатору'
    OBJECTS gm = GroupMachinery FIXED PANEL
    PROPERTIES(gm) READONLY npp, nameStock, name

    TREE treeGroups g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS cg=SkuGroup
    PROPERTIES(cg) READONLY canonicalName
    PROPERTIES(gm, cg)      in
    ORDER BY canonicalName(cg)
    FILTERS isParentLeaf(cg, g)
    FILTERGROUP inactive1 FILTER 'Активные' active(cg) 'F5' DEFAULT

    FILTERGROUP filters
        FILTER 'Только выбранные группы' in(gm, cg) 'F10'
;

DESIGN filterSkuGroupMachinery {
    main {
        MOVE gm.box;
        NEW row {
            fill = 1;
            type = SPLITH;

            MOVE treeGroups.tree.box;
            MOVE cg.box {fill = 2;}
        }
        MOVE functions.box;
    }

}

showFilterSku 'Выбрать группы' (GroupMachinery groupMachinery) = ACTION FORM filterSkuGroupMachinery OBJECTS gm = groupMachinery MODAL;

// --------------------------------- Вид цены ----------------------------- //

priceListType 'Вид цен' = DATA PriceListType (GroupMachinery) NOT NULL;
namePriceListType 'Вид цен' (GroupMachinery groupMachinery) = name(priceListType(groupMachinery));
idPriceListType 'Вид цен' (GroupMachinery groupMachinery) = id(priceListType(groupMachinery));

// ---------------------------- Модели оборудования ----------------------------------------//
CLASS ABSTRACT Model 'Модель';
TABLE model (Model);

name 'Наименование' = ABSTRACT VARISTRING[110](Model);

sid 'Код' = DATA VARSTRING[20] (Model) IN base;
note 'Примечание' = DATA VARSTRING[200] (Model) IN base;
handler 'Обработчик' = DATA VARSTRING[200] (Model) IN base;
maxProduct 'MAX допустимое колич. товаров' = DATA INTEGER (Model) IN base;

//---------------------------- типы оборудования  ----------------------------------------//
CLASS ABSTRACT Machinery 'Оборудование';
TABLE machinery(Machinery);

groupMachinery = ABSTRACT GroupMachinery (Machinery) PERSISTENT;
dataDirectory = ABSTRACT VARSTRING[100] (Machinery);
overDirectory (Machinery machinery) = OVERRIDE directory(groupMachinery(machinery)), dataDirectory(machinery);
nppGroupMachinery 'Номер группы' (Machinery machinery) = npp(groupMachinery(machinery));
nameGroupMachinery 'Группа' (Machinery machinery) = name(groupMachinery(machinery));
stock (Machinery machinery) = stock(groupMachinery(machinery));
idStock (Machinery machinery) = id(stock(machinery));

model = ABSTRACT Model(GroupMachinery) PERSISTENT;
sidModel 'Код' (GroupMachinery groupMachinery) = sid(model(groupMachinery)) IN base;
nameModel 'Модель' (GroupMachinery groupMachinery) = name(model(groupMachinery)) IN base;
handlerModel 'Обработчик' (GroupMachinery machinery) = handler(model(machinery)) IN base;
handlerModel (Machinery machinery) = handlerModel(groupMachinery(machinery));

npp 'Порядковый номер' = DATA INTEGER (Machinery) IN base NOT NULL;
shortDescription 'Краткое описание' = DATA VARSTRING[10] (Machinery) IN base;
overNpp 'Номер' (Machinery machinery) = OVERRIDE VARSTRING[10](npp(machinery)), shortDescription(machinery);
description 'Описание' = DATA VARSTRING[200] (Machinery) IN base;

port 'Адрес/порт' = DATA VARSTRING[100] (Machinery) IN base PREFCHARWIDTH 20;
ports 'Адрес/порт' = GROUP CONCAT port(Machinery m), ',' BY groupMachinery(m);

overInactive = ABSTRACT BOOLEAN (Machinery);
inactive 'Неактивный' (Machinery m)= OVERRIDE inactive(groupMachinery(m)), overInactive(m);

// ------------------------------------------------ Стандартные значения ------------------------------------ //

EXTEND FORM defaultData
    OBJECTS         pt=PriceListType FIXED PANEL
    PROPERTIES(pt)  SELECTOR name

    OBJECTS         s=Stock FIXED PANEL
    PROPERTIES(s)   SELECTOR name
;

DESIGN defaultData {
    pane {
        NEW machinery {
            fill = 1;
            caption = 'Оборудование';

            MOVE PROPERTY(name(pt)) {
                caption = 'Вид цен';
            }
            MOVE PROPERTY(name(s)) {
                caption = 'Склад';
            }
        }
    }
}

NAVIGATOR {
    NEW machineryNavigator 'Оборудование' BEFORE administration WINDOW toolbar IMAGE '/images/cogwheel.png' {
       NEW machineryExport 'Экспорт';
       NEW machineryMasterData 'Справочники';
    }
}