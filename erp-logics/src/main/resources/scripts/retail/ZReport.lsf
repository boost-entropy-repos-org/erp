MODULE ZReport;

REQUIRE System,
        Utils,
        Document,
        Retail,
        Currency,
        Store,
        StoreSkuLedger,
        Stock,
        StockTax,
        CashRegister,
        CashOperation,
        SaleLedger,
        RetailCRM,
        PaymentTerminal,
        PriceRoundStore,
        PriceListType,
        PaymentLedger,
        StockSkuDocument;
        
// ------------------------------------- Объявление Z-отчета ---------------------------------------- //

CLASS ZReport 'Z-отчет (открытый)' : IncomeCashOrder, PaymentLedger;
TABLE zReport (ZReport);

@defineDocumentHeaderTime(ZReport);
@defineDocumentHeaderCreated(ZReport);

@defineDocumentHeaderPosted(ZReport);
@defineDocumentHeaderClosed(ZReport);

@deriveDocumentHeaderTimePrefix(ZReport, );
@defineDocumentHeaderDepartmentStore(zReport);
@defineExternalizable(zReport, VARSTRING[100]);

castBasisZReport =
    FORMULA VARSTRING[100] '\'Z-отчет №\' || CAST($1 AS TEXT) || \' с кассы \' || CAST($2 AS TEXT) || \' от \' || CAST($3 AS TEXT)';

@defineDocumentHeaderNumber(ZReport);

cashRegisterZReport (zReport) = DATA CashRegister(ZReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = numberCashRegister(cashRegisterZReport(zReport)) IN documentPrm;
zReportNumberCashRegister (numberZReport, numberCashRegister) = GROUP AGGR zReport BY numberZReport (zReport), numberCashRegisterZReport (zReport) WHERE zReport IS ZReport;
zReportNumberNppDirectory (numberZReport, nppMachinery, directoryCashRegister) = GROUP AGGR zReport BY numberZReport (zReport), nppMachinery(cashRegisterZReport(zReport)), directoryCashRegister(cashRegisterZReport(zReport)) WHERE zReport IS ZReport;

maxNumberZReport(cashRegister) = GROUP MAX numberZReport(zReport)  BY cashRegisterZReport (zReport);
basisZReport 'Основание' (zReport) = castBasisZReport(numberZReport(zReport), numberCashRegisterZReport(zReport), dateZReport(zReport)) IN documentPrm;

dateCashDocument(zReport) += dateZReport(zReport);
timeCashDocument(zReport) += timeZReport(zReport);
numberCashDocument(zReport) += numberZReport(zReport);
departmentStoreCashDocument(zReport) += departmentStoreZReport(zReport);
basisCashDocument(zReport) += basisZReport(zReport);
cashRegisterCashDocument(zReport) += cashRegisterZReport(zReport);
isPostedCashDocument(zReport) += isPostedZReport(zReport);

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport (zReport) =
    [= FORMULA VARSTRING[200] '\'Продажа по кассе \' || CAST($1 AS TEXT) || \' отдела \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
    numberCashRegisterZReport(zReport), nameDepartmentStoreZReport(zReport), dateZReport(zReport));

//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS Receipt 'Чек';

@defineCreated(Receipt);
@defineExternalizable(receipt, VARSTRING[100]);

CLASS ABSTRACT ReceiptDetail 'Строка чека';
CLASS ReceiptSaleDetail 'Строка продажи' : ReceiptDetail;
CLASS ReceiptReturnDetail 'Строка возврата' : ReceiptDetail;

@defineExternalizable(receiptDetail, VARSTRING[100]);

TABLE receipt (Receipt);
TABLE receiptDetail (ReceiptDetail);
TABLE receiptSaleDetail (ReceiptSaleDetail);
TABLE receiptReturnDetail (ReceiptReturnDetail);

@defineDocumentRelation(zReport, Receipt);
cashRegisterReceipt (receipt) = cashRegisterZReport(zReportReceipt(receipt));
numberCashRegisterReceipt 'Номер кассы' (receipt) = numberCashRegister(cashRegisterReceipt(receipt)) IN recognize;

groupCashRegisterReceipt (receipt) = groupCashRegisterCashRegister(cashRegisterReceipt(receipt));

cashRegisterModelReceipt (receipt) = cashRegisterModelCashRegister(cashRegisterReceipt(receipt));
sidCashRegisterModelReceipt 'Код модели' (receipt) = sidModel(cashRegisterModelReceipt(receipt));

paymentTerminalModelReceipt (receipt) = paymentTerminalModelCashRegister(cashRegisterReceipt(receipt));
sidPaymentTerminalModelReceipt 'Код модели' (receipt) = sidModel(paymentTerminalModelReceipt(receipt));
numberZReportReceipt 'Номер Z-отчета' (receipt) = numberZReport(zReportReceipt(receipt)) IN recognize;

userReceipt = DATA CustomUser(Receipt);
nameUserReceipt 'Кассир' (receipt) = nameContact(userReceipt(receipt));
userReceipt(receipt) <- currentUser() WHEN SET(receipt IS Receipt);

@defineDocumentHeaderTime(Receipt);
@deriveDocumentHeaderTimePrefix(Receipt, );

@defineDocumentDetailDepartmentStoreCustom(zReport, receipt);
@defineDocumentDetailPosted(zReport, Receipt);
@defineDocumentDetailClosed(zReport, Receipt);

skipReceipt 'Не проводить по регистру' = DATA BOOLEAN (Receipt); 

@defineDocumentRelation(receipt, ReceiptSaleDetail);
@defineDocumentRelation(receipt, ReceiptReturnDetail);

@defineDocumentHeaderCurrency (receipt);
@deriveDocumentCurrency (receipt, departmentStore);

@defineDocumentHeaderNote(Receipt);

@defineDocumentDetailCurrency (receipt, receiptSaleDetail);
@defineDocumentDetailCurrency (receipt, receiptReturnDetail);

receiptReceiptDetail = ABSTRACT Receipt (ReceiptDetail) PERSISTENT;
receiptReceiptDetail(detail) += receiptReceiptReturnDetail(detail);
receiptReceiptDetail(detail) += receiptReceiptSaleDetail(detail);

zReportReceiptSaleDetail(d) = zReportReceipt(receiptReceiptSaleDetail(d)); 
zReportReceiptReturnDetail(d) = zReportReceipt(receiptReceiptReturnDetail(d)); 
zReportReceiptDetail (d) = zReportReceipt(receiptReceiptDetail(d));
sidCashRegisterModelReceiptDetail 'Код модели' (receiptDetail) = sidCashRegisterModelReceipt(receiptReceiptDetail(receiptDetail));

typeReceiptDetail 'Тип' = ABSTRACT STRING[10] (ReceiptDetail) MINCHARWIDTH 10 PREFCHARWIDTH 12 PERSISTENT;
typeReceiptDetail(detail) += 'Продажа' IF detail IS ReceiptSaleDetail;
typeReceiptDetail(detail) += 'Возврат' IF detail IS ReceiptReturnDetail;

@defineDocumentDetailIndex(receipt, ReceiptDetail);

@defineDocumentDetailTime(receipt, ReceiptSaleDetail);
@defineDocumentDetailTime(receipt, ReceiptReturnDetail);

dateReceiptDetail 'Дата' = ABSTRACT DATE (ReceiptDetail) PERSISTENT;
dateReceiptDetail(detail) += dateReceiptReturnDetail(detail);
dateReceiptDetail(detail) += dateReceiptSaleDetail(detail);

dateTimeReceiptDetail 'Дата/время' = ABSTRACT DATETIME (ReceiptDetail) PERSISTENT;
dateTimeReceiptDetail(detail) += dateTimeReceiptReturnDetail(detail);
dateTimeReceiptDetail(detail) += dateTimeReceiptSaleDetail(detail);

// ------------ Проведен --------------- // 

isPostedReceiptDetail 'Проведен' (receiptDetail) = ABSTRACT BOOLEAN (ReceiptDetail) PERSISTENT;

@defineDocumentDetailPosted(receipt, ReceiptSaleDetail);
isPostedReceiptDetail(d) += isPostedReceiptSaleDetail(d); 

@defineDocumentDetailPosted(receipt, ReceiptReturnDetail);
isPostedReceiptDetail(d) += isPostedReceiptReturnDetail(d); 

// ------------ Закрыт --------------- // 
isClosedReceiptDetail 'Закрыт' (receiptDetail) = ABSTRACT BOOLEAN (ReceiptDetail) PERSISTENT;

@defineDocumentDetailClosed(receipt, ReceiptSaleDetail);
isClosedReceiptDetail(d) += isClosedReceiptSaleDetail(d);
 
@defineDocumentDetailClosed(receipt, ReceiptReturnDetail);
isClosedReceiptDetail(d) += isClosedReceiptReturnDetail(d);

skipReceiptSaleDetail 'Не проводить по регистру' (receiptDetail) = skipReceipt(receiptReceiptSaleDetail(receiptDetail)); 
skipReceiptReturnDetail 'Не проводить по регистру' (receiptDetail) = skipReceipt(receiptReceiptReturnDetail(receiptDetail)); 

// --------------- Магазин --------------- //
departmentStoreReceiptDetail (receiptDetail) = ABSTRACT DepartmentStore (ReceiptDetail) PERSISTENT;
storeReceiptDetail (receiptDetail) = storeDepartmentStore(departmentStoreReceiptDetail(receiptDetail));

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptSaleDetail);
departmentStoreReceiptDetail (d) += departmentStoreReceiptSaleDetail(d);
 
@defineDocumentDetailDepartmentStoreCustom(receipt, receiptReturnDetail);
departmentStoreReceiptDetail (d) += departmentStoreReceiptReturnDetail(d); 

// Валюта
@defineDocumentDetailCurrency(receipt, receiptDetail);

@defineDocumentDetailSku(receiptSale, sku);
@defineDocumentDetailSku(receiptReturn, sku);
skuReceiptDetail (receiptDetail) = OVERRIDE skuReceiptReturnDetail(receiptDetail), skuReceiptSaleDetail(receiptDetail);
nameSkuReceiptDetail 'Товар' (receiptDetail) = nameSkuStock(skuReceiptDetail(receiptDetail), departmentStoreReceiptDetail(receiptDetail)) IN recognize;
shortNameUOMSkuReceiptDetail 'Ед. изм.' (receiptDetail) = shortNameUOMSku(skuReceiptDetail(receiptDetail));

changeDialogSkuReceiptDetail  = ACTION (detail) {
    REQUEST OBJECT s
    FORM skus MODAL;                                          
    IF formResult() == FormResult.ok THEN {
        skuReceiptDetail(detail) <- requestedObject();
    }
} TOOLBAR;

//партии
@defineDocumentAbstractDetailBatchCustom(receiptDetail, batch);
@defineDocumentDetailBatchCustom(receiptSaleDetail, batch);
@defineDocumentDetailBatchCustom(receiptReturnDetail, batch);
batchReceiptDetail(detail) += batchReceiptSaleDetail(detail);
batchReceiptDetail(detail) += batchReceiptReturnDetail(detail);

explicitBatchLedgerReceipt(receipt) = explicitBatchLedgerDepartmentStore(departmentStoreZReport(zReportReceipt(receipt)));
notExplicitBatchLedgerReceipt(receipt) = departmentStoreZReport(zReportReceipt(receipt)) AND NOT explicitBatchLedgerReceipt(receipt);

numberReceipt 'Номер чека' (receipt) = DATA INTEGER (Receipt) IN documentHeader;
numberReceiptReceiptDetail 'Номер чека' (receiptDetail) = numberReceipt(receiptReceiptDetail(receiptDetail));

maxNumberReceiptZReport 'Максимальный номер чека' (zReport) = GROUP MAX numberReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT;

receiptZReportNumberCashRegister (zReport, receipt, cashRegister) = GROUP AGGR receipt BY numberZReport(zReportReceipt(receipt)), numberReceipt(receipt), numberCashRegister(cashRegisterZReport(zReportReceipt(receipt))) WHERE receipt IS Receipt;

GROUP receiptDiscount 'Дисконтная карта' : public;

discountCardReceipt (receipt) = DATA DiscountCard (Receipt);

CONSTRAINT dateToDiscountCard(discountCardReceipt(receipt)) < dateReceipt(receipt) CHECKED BY discountCardReceipt MESSAGE 'Закончился срок действия карты';

numberDiscountCardReceipt 'Номер дисконтной карты' (receipt) = seriesNumberDiscountCard(discountCardReceipt(receipt)) IN receiptDiscount;
nameLegalEntityDiscountCardReceipt 'Держатель дисконтной карты' (receipt) = nameLegalEntityDiscountCard(discountCardReceipt(receipt)) IN receiptDiscount MINCHARWIDTH 30 PREFCHARWIDTH 40;
numberDiscountCardReceiptDetail 'Номер дисконтной карты' (receiptDetail) = numberDiscountCardReceipt(receiptReceiptDetail(receiptDetail));
nameLegalEntityDiscountCardReceiptDetail 'Держатель дисконтной карты' (receiptDetail) = nameLegalEntityDiscountCardReceipt(receiptReceiptDetail(receiptDetail)) MINCHARWIDTH 30 PREFCHARWIDTH 40;

idBarcodeReceiptDetail 'Штрих-код' (receiptDetail) = DATA STRING[15] (ReceiptDetail) FIXEDCHARWIDTH 14 INDEXED;

// Возвраты

receiptSaleDetailReceiptReturnDetail = DATA ReceiptSaleDetail (ReceiptReturnDetail);
receiptSaleReceiptReturnDetail (returnDetail) = receiptReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(returnDetail));

descriptionSaleReceiptReturnDetail 'Чек продажи' (returnDetail) =
    [= FORMULA VARSTRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) ||  \' позиция \' || CAST($3 AS TEXT)'](
    numberReceipt(receiptSaleReceiptReturnDetail(returnDetail)), dateTimeReceipt(receiptSaleReceiptReturnDetail(returnDetail)), indexReceiptDetail(receiptSaleDetailReceiptReturnDetail(returnDetail))) MINCHARWIDTH 15 PREFCHARWIDTH 20;

// Количества и суммы

quantityReceiptSaleDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (ReceiptSaleDetail);
priceReceiptSaleDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (ReceiptSaleDetail);
sumReceiptSaleDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptSaleDetail);
discountPercentReceiptSaleDetail 'Процент скидки' (receiptDetail) = DATA NUMERIC[6,2] (ReceiptSaleDetail);
discountPercentReceipt (receipt)= GROUP SUM 1 IF discountPercentReceiptSaleDetail(detail) BY receiptReceiptDetail(detail);
discountSumReceiptSaleDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptSaleDetail);

priceSumReceiptSaleDetail 'Сумма без скидки' = roundPriceRoundCondition(quantityReceiptSaleDetail(detail) * priceReceiptSaleDetail(detail), roundConditionDepartmentStore(departmentStoreReceiptSaleDetail(detail)));

//discountSumReceiptSaleDetail (detail) <- round(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
//                                               priceRoundCurrency(currencyReceiptSaleDetail (detail)))
//    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
//         CHANGED (priceReceiptSaleDetail(detail)) OR
//         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
//         CHANGED (currencyReceiptSaleDetail (detail));
calcDiscountSumReceiptSaleDetail (detail) = roundPriceRoundCondition(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
                                               roundConditionDepartmentStore(departmentStoreReceiptSaleDetail(detail)));

calcSumReceiptSaleDetail (detail) = priceSumReceiptSaleDetail(detail) (-) discountSumReceiptSaleDetail(detail);
sumReceiptSaleDetail (detail) <- calcSumReceiptSaleDetail(detail)
    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
         CHANGED (priceReceiptSaleDetail(detail)) OR
         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
         CHANGED (departmentStoreReceiptSaleDetail(detail));

quantityReceiptReturnDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (ReceiptReturnDetail);
priceReceiptReturnDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (ReceiptReturnDetail);
sumReceiptReturnDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptReturnDetail);
discountSumReceiptReturnDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptReturnDetail);

quantityReturnedReceiptSaleDetail 'Возвращено' (saleDetail) = GROUP SUM quantityReceiptReturnDetail(returnDetail) BY receiptSaleDetailReceiptReturnDetail(returnDetail) PERSISTENT;
CONSTRAINT quantityReturnedReceiptSaleDetail(detail) > quantityReceiptSaleDetail (detail) MESSAGE 'Количество возвратов по строке чека превышает проданное количество';

sumReceiptReturnDetail (detail) <- roundPriceRoundCondition(quantityReceiptReturnDetail(detail) * sumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                            roundConditionDepartmentStore(departmentStoreReceiptReturnDetail (detail)))
                                   WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                        CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                        CHANGED(departmentStoreReceiptReturnDetail(detail));

discountSumReceiptReturnDetail (detail) <- IF receiptSaleDetailReceiptReturnDetail(detail) THEN
                                                roundPriceRoundCondition(quantityReceiptReturnDetail(detail) * discountSumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                                    roundConditionDepartmentStore(departmentStoreReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail))))
                                           ELSE
                                                quantityReceiptReturnDetail(detail) * priceReceiptReturnDetail(detail) - sumReceiptReturnDetail(detail)
                                           WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                                CHANGED(sumReceiptReturnDetail(detail)) OR
                                                CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                                CHANGED(departmentStoreReceiptReturnDetail(detail));

quantityReceiptDetail 'Количество' = ABSTRACT NUMERIC[14,3] (ReceiptDetail) PERSISTENT;
quantityReceiptDetail(detail) += quantityReceiptReturnDetail(detail);
quantityReceiptDetail(detail) += quantityReceiptSaleDetail(detail);

priceReceiptDetail 'Цена' = ABSTRACT NUMERIC[14,2] (ReceiptDetail) PERSISTENT;
priceReceiptDetail(detail) += priceReceiptReturnDetail(detail);
priceReceiptDetail(detail) += priceReceiptSaleDetail(detail);

sumReceiptDetail 'Сумма' = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
sumReceiptDetail(detail) += sumReceiptReturnDetail(detail);
sumReceiptDetail(detail) += sumReceiptSaleDetail(detail);

discountSumReceiptDetail 'Сумма скидки' = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
discountSumReceiptDetail(d) += discountSumReceiptSaleDetail(d);
discountSumReceiptDetail(d) += discountSumReceiptReturnDetail(d);

fullSumReceiptSaleDetail 'Сумма без скидки' (d) = sumReceiptSaleDetail(d) (+) discountSumReceiptSaleDetail(d);
fullSumReceiptReturnDetail 'Сумма без скидки' (d) = sumReceiptReturnDetail(d) (+) discountSumReceiptReturnDetail(d);
fullSumReceiptDetail 'Сумма без скидки' (d) = sumReceiptDetail(d) (+) discountSumReceiptDetail(d);

sumReceiptSaleDetailReceipt 'Сумма продажи' (receipt) = GROUP SUM sumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSum PERSISTENT;

sumReceiptReturnDetailReceipt 'Сумма возврата' (receipt) = GROUP SUM sumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSum PERSISTENT;

signedSumReceiptDetail = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
signedSumReceiptDetail(detail) += -sumReceiptReturnDetail(detail);
signedSumReceiptDetail(detail) += sumReceiptSaleDetail(detail);

signedQuantityReceiptDetail 'Количество' = ABSTRACT NUMERIC[14,3] (ReceiptDetail) PERSISTENT;
signedQuantityReceiptDetail(detail) += -quantityReceiptReturnDetail(detail);
signedQuantityReceiptDetail(detail) += quantityReceiptSaleDetail(detail);

sumReceiptDetailReceipt 'Сумма чека' (receipt) = GROUP SUM signedSumReceiptDetail(detail)
    BY receiptReceiptDetail(detail);

sumSkuReceiptDetailReceipt 'Сумма чека по товарам' (receipt) = GROUP SUM signedSumReceiptDetail(detail) IF skuReceiptDetail(detail)
                                                                         BY receiptReceiptDetail(detail);
//sumReceiptDetailReceipt 'Сумма чека' (receipt) = sumReceiptSaleDetailReceipt(receipt) (-) sumReceiptReturnDetailReceipt(receipt) PERSISTENT;
sumReceiptDetailReceiptDetail 'Сумма чека' (receiptDetail) = sumReceiptDetailReceipt(receiptReceiptDetail(receiptDetail)) PERSISTENT;

discountSumSaleReceiptDetailSaleReceipt 'Сумма скидки (продажи)' (receipt) = GROUP SUM discountSumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSum;
discountSumSaleReceipt 'Сумма скидки (продажи) по чеку' (receipt) = DATA NUMERIC[16,2] (Receipt);

discountSumReturnReceiptDetailReturnReceipt 'Сумма скидки (возврат)' (receipt) = GROUP SUM discountSumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSum;
discountSumReturnReceipt 'Сумма скидки (возврат) по чеку' (receipt) = DATA NUMERIC[16,2] (Receipt);

discountSumReceiptDetailReceipt 'Сумма скидки' (receipt) = discountSumSaleReceiptDetailSaleReceipt(receipt) (-) discountSumReturnReceiptDetailReturnReceipt(receipt) PERSISTENT;
discountSumReceipt 'Сумма скидки по чеку' (receipt) = discountSumSaleReceipt(receipt) (-) discountSumReturnReceipt(receipt);

@defineDocumentHeaderCount(receipt);

@defineDocumentHeaderQuantity(receipt);
@defineDocumentHeaderSkuQuantity(receipt, sku);
@defineDocumentHeaderSkuQuantity(receipt, receiptSaleDetail, sku);

// импорт-экспорт чеков

exportReceiptsZReport 'Экспортировать чеки' = ACTION CUSTOM 'lsfusion.erp.retail.ExportReceiptsZReportCustomActionProperty';
exportReceiptsFolderZReport 'Экспортировать чеки (в папку)' = ACTION CUSTOM 'lsfusion.erp.retail.ExportReceiptsZReportFolderActionProperty';
importReceiptsZReport 'Импортировать чеки' = ACTION CUSTOM 'lsfusion.erp.retail.ImportReceiptsZReportActionProperty';

exportReceipt 'Экспортировать' (receipt) = DATA SESSION BOOLEAN (Receipt);
exportedIncrementReceipt 'Экспортировано (инкрементно)' (receipt) = DATA BOOLEAN (Receipt);
pathExportReceipts 'Путь' = DATA VARSTRING[100] ();

exportIncrementReceipts 'Экспортировать (инкрементно) чеки' = ACTION() {
    FOR z IS ZReport DO {
        exportReceipt(r) <- NOT exportedIncrementReceipt(r) WHERE zReportReceipt(r) == z;    
        exportReceiptsFolderZReport(z);
    }
}

EXTEND FORM integrationData
    PROPERTIES() exportIncrementReceipts, pathExportReceipts
;

EXTEND DESIGN integrationData {
    pane {
        NEW exportReceiptsPane {
            caption = 'Экспорт чеков';
            ADD PROPERTY(exportIncrementReceipts());
            ADD PROPERTY(pathExportReceipts());
        }
    }
}

// -------------------------------------------------- НДС ------------------------------------------------ //

overVATRetailSkuDepartmentStoreDateTime = ABSTRACT Range (Sku, DepartmentStore, DATETIME);
VATRetailSkuDepartmentStoreDateTime (sku, departmentStore, dateTime) = OVERRIDE VATSkuCountryDate(sku, countryStock(departmentStore AS DepartmentStore), toDate(dateTime)),
                                                                                overVATRetailSkuDepartmentStoreDateTime(sku, departmentStore, dateTime);

VATReceiptSaleDetail = DATA Range (ReceiptSaleDetail);
CONSTRAINT taxRange(VATReceiptSaleDetail(detail)) != Tax.taxVAT OR
           countryRange(VATReceiptSaleDetail(detail)) != countryStock(departmentStoreReceiptSaleDetail(detail))
           CHECKED BY VATReceiptSaleDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина: продажа';

VATSumSaleZReport 'Сумма НДС по продажам' (zReport) = DATA NUMERIC[16,2] (ZReport) IN documentSum;

VATReceiptReturnDetail = DATA Range (ReceiptReturnDetail);
CONSTRAINT taxRange(VATReceiptReturnDetail(detail)) != Tax.taxVAT OR
           countryRange(VATReceiptReturnDetail(detail)) != countryStock(departmentStoreReceiptReturnDetail(detail))
           CHECKED BY VATReceiptReturnDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина: возврат';

VATSumReturnZReport 'Сумма НДС по возвратам' (zReport) = DATA NUMERIC[16,2] (ZReport) IN documentSum;

VATReceiptDetail 'НДС' = ABSTRACT Range(ReceiptDetail) PERSISTENT;
numberVATReceiptDetail 'НДС, номер' (receiptDetail) = numberRange(VATReceiptDetail(receiptDetail));
valueVATReceiptDetail 'НДС, %' (receiptDetail) = valueRateRangeDate(VATReceiptDetail(receiptDetail), dateReceiptDetail(receiptDetail));

sumVATReceiptDetail 'Сумма НДС' (d) = roundPriceCurrency(sumReceiptDetail(d) * valueVATReceiptDetail(d) / (100 + valueVATReceiptDetail(d)), currencyReceiptDetail(d)); 

VATReceiptDetail(d) += VATReceiptSaleDetail(d);
VATReceiptDetail(d) += VATReceiptReturnDetail(d);

// используется только для приема реализации из внешних касс
numberReceiptDetail 'Номер позиции чека' = DATA INTEGER (ReceiptDetail);
receiptDetailZReportReceiptNumberCashRegister (zReport, receipt, receiptDetail, cashRegister) = GROUP AGGR receiptDetail BY numberZReport(zReportReceiptDetail(receiptDetail)), numberReceipt(receiptReceiptDetail(receiptDetail)), numberReceiptDetail(receiptDetail), numberCashRegister(cashRegisterZReport(zReportReceiptDetail(receiptDetail))) WHERE receiptDetail IS ReceiptDetail;
//

descriptionReceipt 'Название документа' (receipt) = [= FORMULA VARSTRING[200] '\'Чек № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '](
                                               numberReceipt(receipt), dateTimeReceipt(receipt));

descriptionReceiptSaleDetail (receiptDetail) = [= FORMULA VARSTRING[200] '\'Продажа № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                          numberReceipt(receiptReceiptSaleDetail(receiptDetail)), dateTimeReceipt(receiptReceiptSaleDetail(receiptDetail)));

descriptionReceiptReturnDetail (receiptDetail) = [= FORMULA VARSTRING[200] '\'Возврат № \' || CAST($1 AS TEXT) || \' от \' || CAST($2 AS TEXT) '] (
                                            numberReceipt(receiptReceiptReturnDetail(receiptDetail)), dateTimeReceipt(receiptReceiptReturnDetail(receiptDetail)));

descriptionReceiptDetail (receiptDetail) = OVERRIDE descriptionReceiptReturnDetail(receiptDetail), descriptionReceiptSaleDetail(receiptDetail);

@defineAddDetailDialogSkuStockCustom(receipt, receiptSaleDetail, ' (продажа)', sku, departmentStore, dialogSku);
@defineAddDetailDialogSkuStockCustom(receipt, receiptReturnDetail, ' (возврат)', sku, departmentStore, dialogSku);

// -------------------------------------------- Проведение по регистрам --------------------------------------- //

@implementSkuLedgerOutFIFO(ReceiptSaleDetail, sku, departmentStore);
quantityOutFIFOSkuLedger (ledger) += quantityReceiptSaleDetail(ledger);
batchSkuLedger(ledger) += batchReceiptSaleDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(receiptSaleDetail, departmentStore);
sumOutSkuLedger (ledger) += sumReceiptSaleDetail(ledger) (+) discountSumReceiptSaleDetail(ledger);
skipSkuLedger(ledger) += skipReceiptSaleDetail(ledger);

@implementSkuLedgerInLIFO(ReceiptReturnDetail, sku, departmentStore);
quantityInLIFOSkuLedger (ledger) += quantityReceiptReturnDetail(ledger);
batchSkuLedger(ledger) += batchReceiptReturnDetail(ledger);
@implementSkuLedgerInLIFOBatchBalance(receiptReturnDetail, departmentStore);
sumInSkuLedger (ledger) += sumReceiptReturnDetail(ledger) (+) discountSumReceiptReturnDetail(ledger);
skipSkuLedger(ledger) += skipReceiptReturnDetail(ledger);

@implementSaleLedger(ReceiptSale, sku, departmentStore);
costSaleLedgerBatch(ledger, batch) +=  costSkuLedgerBatch(ledger, batch) IF ledger IS ReceiptSaleDetail; //quantityReceiptSaleDetail(ledger) IF  batchReceiptSaleDetail(ledger)== batch;
quantitySaleLedger (ledger) += quantityReceiptSaleDetail(ledger);
VATSaleLedger (ledger) += VATReceiptSaleDetail(ledger);
sumSaleLedger (ledger) += sumReceiptSaleDetail(ledger);
costSumSaleLedger (ledger) += costSumSkuLedger(ledger) IF ledger IS ReceiptSaleDetail;

@implementSaleLedger(ReceiptReturn, sku, departmentStore);
costSaleLedgerBatch(ledger, batch) += -costSkuLedgerBatch(ledger, batch) IF ledger IS ReceiptReturnDetail;//quantityReceiptReturnDetail(ledger) IF  batchReceiptReturnDetail(ledger)== batch;
quantitySaleLedger (ledger) += -quantityReceiptReturnDetail(ledger);
VATSaleLedger (ledger) += VATReceiptReturnDetail(ledger);
sumSaleLedger (ledger) += -sumReceiptReturnDetail(ledger);
costSumSaleLedger (ledger) += -costSumSkuLedger(ledger) IF ledger IS ReceiptReturnDetail;

// ----------------- Оплаты по чеку ------------------------------

CLASS Payment 'Оплата по чеку';
TABLE payment (Payment);

@defineExternalizable(payment, VARSTRING[100]);

CLASS PaymentMeans 'Форма оплаты'{
    paymentMeansCash 'Наличные',
    paymentMeansCard 'Карточка'
}
FORM paymentMeans
    OBJECTS m = PaymentMeans
    PROPERTIES(m) staticCaption
    DIALOG PaymentMeans OBJECT m
;

CLASS PaymentType 'Тип платежа';
TABLE paymentType (PaymentType);

namePaymentType 'Наименование' = DATA VARISTRING[110](PaymentType) IN recognize;

paymentMeansPaymentType (paymentType) = DATA PaymentMeans (PaymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = staticCaption(paymentMeansPaymentType(paymentType)) IN recognize;

sidPaymentType 'Идентификатор' = DATA STRING[10] (PaymentType) IN base;
typePaymentSID (tp) = GROUP AGGR paymentType BY sidPaymentType(paymentType) WHERE paymentType IS PaymentType;

FORM paymentType 'Тип платежа'
    OBJECTS pt = PaymentType FIXED PANEL
    PROPERTIES(pt) namePaymentType, namePaymentMeansPaymentType, sidPaymentType

    EDIT PaymentType OBJECT pt
;

FORM paymentTypes 'Тип платежа'
    OBJECTS pt = PaymentType
    PROPERTIES(pt) READONLY namePaymentType, namePaymentMeansPaymentType, sidPaymentType
    PROPERTIES(pt) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    DIALOG PaymentType OBJECT pt
;

receiptPayment (payment) = DATA Receipt (Payment) NOT NULL DELETE;

countPaymentReceipt 'Кол-во типов платежей' (receipt) = GROUP SUM 1 BY receiptPayment(payment);

paymentTypePayment (payment) = DATA PaymentType(Payment);
namePaymentTypePayment 'Тип платежа' (payment) = namePaymentType(paymentTypePayment(payment));
sidPaymentTypePayment 'ID Типа платежа' (payment) = sidPaymentType(paymentTypePayment(payment));

minCashPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == PaymentMeans.paymentMeansCash;
minCardPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == PaymentMeans.paymentMeansCard;

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment));
namePaymentMeansPayment 'Форма оплаты' (payment) = staticCaption(paymentMeansPayment(payment));

numberPayment 'Номер платежа' (payment) = DATA INTEGER (Payment);
paymentZReportReceiptNumberCashRegister (zReport, receipt, number, cashRegister) = GROUP AGGR payment BY numberZReport(zReportReceipt(receiptPayment(payment))), numberReceipt(receiptPayment(payment)), numberPayment(payment), numberCashRegister(cashRegisterZReport(zReportReceipt(receiptPayment(payment)))) WHERE payment IS Payment;

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (Payment);

sumPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) BY receiptPayment(payment);

sumInCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) IF paymentMeansPayment(payment) == PaymentMeans.paymentMeansCash  BY receiptPayment(payment);

changePaymentReceipt 'Сдача' (receipt) = sumPaymentReceipt(receipt) - sumReceiptDetailReceipt(receipt);

sumCashPaymentReceipt (receipt) = sumInCashPaymentReceipt(receipt) - changePaymentReceipt(receipt);
sumCardPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) IF paymentMeansPayment(payment) == PaymentMeans.paymentMeansCard BY receiptPayment(payment);

sumPositiveCashPaymentReceipt 'Сумма продажа (наличные)' (receipt) =  sumCashPaymentReceipt (receipt) IF sumCashPaymentReceipt (receipt) >= 0.0 IN documentSum;
sumNegativeCashPaymentReceipt 'Сумма возврата (наличные)' (receipt) =  sumCashPaymentReceipt (receipt) IF sumCashPaymentReceipt (receipt) < 0.0 IN documentSum;

sumPositiveCardPaymentReceipt 'Сумма продажа (карточка)' (receipt) =  sumCardPaymentReceipt (receipt) IF sumCardPaymentReceipt (receipt) >= 0.0 IN documentSum;
sumNegativeCardPaymentReceipt 'Сумма возврата (карточка)' (receipt) =  sumCardPaymentReceipt (receipt) IF sumCardPaymentReceipt (receipt) < 0.0 IN documentSum;

sumPositiveCashPaymentZReport 'Сумма продажа (наличные)' (zReport) = GROUP SUM sumPositiveCashPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;
sumNegativeCashPaymentZReport 'Сумма возврата (наличные)' (zReport) = GROUP SUM sumNegativeCashPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;

sumPositiveCardPaymentZReport 'Сумма продажа (карточка)' (zReport) = GROUP SUM sumPositiveCardPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;
sumNegativeCardPaymentZReport 'Сумма возврата (карточка)' (zReport) = GROUP SUM sumNegativeCardPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;

CONSTRAINT receipt IS Receipt AND NOT sumPaymentReceipt(receipt) MESSAGE 'По чеку не указаны платежи';
CONSTRAINT sumReceiptDetailReceipt(receipt) > sumPaymentReceipt(receipt) MESSAGE 'Сумма платежей по чеку меньше суммы чека';
CONSTRAINT sumReceiptDetailReceipt(receipt) < sumCardPaymentReceipt(receipt) MESSAGE 'Сумма платежей по безналичному расчету больше суммы чека';

// ------------------------ Расписывание платежей по чеку -------------------- //

TABLE receiptDetailPayment(ReceiptDetail, Payment);
sumReceiptDetailPayment 'Расписано для строки чека' = DATA NUMERIC[16,2] (ReceiptDetail, Payment);
CONSTRAINT sumReceiptDetailPayment(d, p) AND receiptReceiptDetail(d) != receiptPayment(p)
    MESSAGE 'Несоответствие чека строки и платежа';

calculateSumReceiptDetailPaymentReceipt 'Расписать платежи по строкам' (receipt) = ACTION (receipt) {
    sumReceiptDetailPayment(d, p) <- NULL WHERE receiptReceiptDetail(d) == receipt AND receiptPayment(p) == receipt; 
    LOCAL left = NUMERIC[16,2] (ReceiptDetail);
    left(d) <- sumReceiptDetail(d) IF receiptReceiptDetail(d) == receipt;
    
    FOR receiptPayment(p) == receipt ORDER DESC paymentMeansPayment(p) DO {
        LOCAL sum = NUMERIC[16,2]();
        sum() <- sumPayment(p);
        FOR left(d) DO {
            IF sum() > 0 THEN {
                sumReceiptDetailPayment(d, p) <- min(left(d), sum());
                sum() <- sum() (-) sumReceiptDetailPayment(d, p);
                left(d) <- left(d) (-) sumReceiptDetailPayment(d, p);
            } ELSE {
                sumReceiptDetailPayment(d, p) <- -min(left(d), -sum());                
                sum() <- sum() (-) sumReceiptDetailPayment(d, p);
                left(d) <- left(d) (+) sumReceiptDetailPayment(d, p);
            }
        }            
    }    
}

// не очень правильно, но пока так
WHEN CHANGED(sumReceiptDetailReceipt(receipt)) OR CHANGED(sumCashPaymentReceipt(receipt)) OR CHANGED(sumCardPaymentReceipt(receipt)) DO {
    calculateSumReceiptDetailPaymentReceipt(receipt);        
}

// Продажи товаров
calcSumVATReceiptDetailPayment (detail, payment) = sumReceiptDetailPayment(detail, payment) * valueVATReceiptDetail(detail) / (100 + valueVATReceiptDetail(detail));

TABLE zReportPaymentMeansRange(ZReport, PaymentMeans, Range);
sumReceiptDetailZReportPaymentMeansRange 'Сумма по товарам' (zReport, paymentMeans, range) = GROUP SUM sumReceiptDetailPayment(detail, payment) 
    IF isItemSku(skuReceiptDetail(detail)) AND isPostedReceiptDetail(detail) BY zReportReceiptDetail(detail), paymentMeansPaymentType(paymentTypePayment(payment)), VATReceiptDetail(detail) PERSISTENT;
sumItemReceiptDetailZReport 'Сумма по товарам' (zReport) = GROUP SUM sumReceiptDetailZReportPaymentMeansRange(zReport, paymentMeans, range) BY zReport;   
    
sumVATReceiptDetailZReportPaymentMeansRange 'Сумма НДС по товарам' (zReport, paymentMeans, range) = (round0(
    [= GROUP SUM calcSumVATReceiptDetailPayment(detail, payment) IF isItemSku(skuReceiptDetail(detail)) AND isPostedReceiptDetail(detail) 
        BY zReportReceiptDetail(detail), paymentMeansPaymentType(paymentTypePayment(payment)), VATReceiptDetail(detail)](zReport, paymentMeans, range))) PERSISTENT;
sumVATReceiptDetailZReportRange 'Сумма НДС по товарам' (zReport, range)= NUMERIC[16,2]([=GROUP SUM sumVATReceiptDetailZReportPaymentMeansRange(zReport, paymentMeans, range) BY zReport, range](zReport, range));
sumVATReceiptDetailZReport 'Сумма НДС по товарам' (zReport)= GROUP SUM sumVATReceiptDetailZReportRange(zReport, range) BY zReport;

sumCashReceiptDetailZReportRange 'Сумма (нал.) по товарам' (zReport, range) = sumReceiptDetailZReportPaymentMeansRange(zReport, PaymentMeans.paymentMeansCash, range);
sumCardReceiptDetailZReportRange 'Сумма (безнал.) по товарам' (zReport, range) = sumReceiptDetailZReportPaymentMeansRange(zReport, PaymentMeans.paymentMeansCard, range);

sumVATCashReceiptDetailZReportRange 'Сумма НДС (нал.) по товарам' (zReport, range) = sumVATReceiptDetailZReportPaymentMeansRange(zReport, PaymentMeans.paymentMeansCash, range);
sumVATCardReceiptDetailZReportRange 'Сумма НДС (безнал.) по товарам' (zReport, range) = sumVATReceiptDetailZReportPaymentMeansRange(zReport, PaymentMeans.paymentMeansCard, range);

// Продажи сертификатов
sumGifCardReceiptDetailZReportPaymentMeans 'Сумма проданных сертификатав' (zReport, paymentMeans) = GROUP SUM sumReceiptDetailPayment(detail, payment) 
    IF NOT isItemSku(skuReceiptDetail(detail)) AND isPostedReceiptDetail(detail) BY zReportReceiptDetail(detail), paymentMeansPaymentType(paymentTypePayment(payment));
sumGifCardReceiptDetailZReport 'Сумма проданных сертификатав' (zReport) = GROUP SUM sumGifCardReceiptDetailZReportPaymentMeans(zReport, paymentMeans) BY zReport;    

sumGifCardCashReceiptDetailZReport 'Сумма (нал.) проданных сертификатав' (zReport) = sumGifCardReceiptDetailZReportPaymentMeans(zReport, PaymentMeans.paymentMeansCash);
sumGifCardCardReceiptDetailZReport 'Сумма (безнал.) проданных сертификатав' (zReport) = sumGifCardReceiptDetailZReportPaymentMeans(zReport, PaymentMeans.paymentMeansCard);   
// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, receiptDetail);

sumCashZReport 'Сумма наличных Z-отчета' (zReport) = GROUP SUM sumCashPaymentReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
sumCashIncomeCashOrder(zReport) += sumCashZReport(zReport);
sumReceiptDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
sumSkuReceiptDetailZReport 'Сумма Z-отчета по sku' (zReport) = GROUP SUM sumSkuReceiptDetailReceipt(receipt) BY zReportReceipt(receipt);
sumMeansCardZReport 'Сумма по карточкам Z-отчета' (zReport) = sumReceiptDetailZReport(zReport) (-) sumCashZReport(zReport);
discountSumReceiptDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
discountSumReceiptZReport 'Сумма скидок по чекам Z-отчета' (zReport) = GROUP SUM discountSumReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = discountSumReceiptDetailZReport(zReport) (+) discountSumReceiptZReport(zReport);

discountSumVATReceiptDetail 'Сумма НДС в скидке' (d) = roundPriceCurrency(discountSumReceiptDetail(d) * valueVATReceiptDetail(d) / (100 + valueVATReceiptDetail(d)), currencyReceiptDetail(d)); 
//discountSumMarkupReceiptDetail 'Сумма набавки в скидке' (d) = discountSumReceiptDetail(d) - discountSumVATReceiptDetail(d); 

discountSumVATSaleZReport 'Сумма НДС в скидке (продажа)' (zReport)= GROUP SUM discountSumVATReceiptDetail(d) IF d IS ReceiptSaleDetail BY zReportReceiptDetail(d);
discountSumVATReturnZReport 'Сумма НДС в скидке (продажа)' (zReport)= GROUP SUM discountSumVATReceiptDetail(d) IF d IS ReceiptReturnDetail BY zReportReceiptDetail(d);
discountSumVATZReport 'Сумма НДС в скидке' (zReport)= discountSumVATSaleZReport(zReport) (-) discountSumVATReturnZReport(zReport);

discountSumMarkupZReport 'Сумма набавки в скидке' (z) = discountSumZReport(z) (-) discountSumVATZReport(z);

sumCardDepartmentStoreDateFromTo 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sumPayment(payment) IF paymentMeansPayment(payment)==PaymentMeans.paymentMeansCard
    AND dateReceipt(receiptPayment(payment)) >= dateFrom AND dateReceipt(receiptPayment(payment)) <= dateTo AND isPostedReceipt(receiptPayment(payment))
        BY departmentStoreReceipt(receiptPayment(payment)), dateFrom, dateTo;

sumSaleDepartmentStoreDateFromTo 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM sumReceiptDetailReceipt(receipt)
    IF dateReceipt(receipt) >= dateFrom AND dateReceipt(receipt) <= dateTo AND isPostedReceipt(receipt)
        BY departmentStoreReceipt(receipt), dateFrom, dateTo;

// Aggregation zReport

CLASS ZReportCard : PaymentLedger;

@defineAggregation(zReport, zReportCard, sumMeansCard);

// Implement шапки документа
dateTimePaymentLedger(zReportCard) += dateTimeZReport(zReportZReportCard(zReportCard));
isPostedPaymentLedger(zReportCard) += isPostedZReport(zReportZReportCard(zReportCard));
descriptionPaymentLedger(zReportCard) += basisZReport(zReportZReportCard(zReportCard));

accountToPaymentLedger(zReportCard) += accountLegalEntity(legalEntityCashRegister(cashRegisterZReport(zReportZReportCard(zReportCard))));
legalEntityToPaymentLedger(zReportCard) += legalEntityCashRegister(cashRegisterZReport(zReportZReportCard(zReportCard)));
sumPaymentLedger(zReportCard) += sumMeansCardZReport(zReportZReportCard(zReportCard));

// ----------------------------------- Расчет сумм скидок ------------------------------------- // 
TABLE receiptSaleDetailPromotionCondition(ReceiptSaleDetail, PromotionCondition);
quantityReceiptSaleDetailPromotionCondition 'Кол-во по акции' = DATA NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition) INDEXED;
promotionSumReceiptSaleDetailPromotionCondition 'Сумма скидки' = DATA NUMERIC[16,2] (ReceiptSaleDetail, PromotionCondition);
setUserPromotionReceiptSaleDetailPromotionCondition 'Применить скидку' = DATA BOOLEAN (ReceiptSaleDetail, PromotionCondition);

//----------------------------------- Формы -------------------------------------------------//

FORM zReport 'Z-отчет'
    OBJECTS z=ZReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport READONLY, dateZReport, timeZReport, numberZReport, //sumCashZReport
                   basisZReport, countReceiptZReport, quantityReceiptDetailZReport, 
                   sumPositiveCashPaymentZReport, sumPositiveCardPaymentZReport, discountSumReceiptDetailZReport, VATSumSaleZReport,
                   sumNegativeCashPaymentZReport, sumNegativeCardPaymentZReport, VATSumReturnZReport,
                   sumReceiptDetailZReport

    OBJECTS b=Receipt, d=ReceiptDetail
    PROPERTIES(b) numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                  numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                  discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt, exportReceipt, exportedIncrementReceipt, 
                  ADDOBJ, DELETESESSION
    FILTERS zReportReceipt(b)==z

    PROPERTIES(b) TODRAW d addDetailDialogSkuStockReceiptSaleDetailReceipt, addDetailDialogSkuStockReceiptReturnDetailReceipt
                           // todo : добавить операции возврата по штрих-коду

    PROPERTIES(d) typeReceiptDetail READONLY, idBarcodeReceiptDetail, nameSkuReceiptDetail ON CHANGE changeDialogSkuReceiptDetail(d) FORCE GRID, nameBatchReceiptDetail SHOWIF explicitBatchLedgerReceipt(b),
                  descriptionSaleReceiptReturnDetail FORCE GRID READONLY,
                  quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                  sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail FORCE GRID,
                  numberVATReceiptDetail FORCE GRID, ADDOBJ, DELETESESSION

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=Payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, DELETESESSION

    FILTERS receiptPayment(p)==b

    EDIT ZReport OBJECT z
;

DESIGN zReport FROM DEFAULT{

    NEW pane {
        type = CONTAINERH;      
           
        NEW first {
            fill = 1;
            type = CONTAINERV;
            ADD z.documentHeader;
            ADD z.documentPrm;
        }
        ADD z.documentSum { columns = 2;}    

    }    
    ADD b.box;
    NEW secondCase{
        fill = 1;
        type = SPLITH;

        ADD d.box {
            fill = 3;
            caption = 'Строка чека';
        }
        ADD p.box;
    }           

    ADD functions.box;
}
isPostedOpenedZReport (z)= isPostedZReport(z) AND isOpenedZReport(z);
isDraftOpenedZReport (z)= isDraftZReport(z) AND isOpenedZReport(z);
FORM zReports 'Z-отчеты'
    OBJECTS z=ZReport
    PROPERTIES (z) READONLY isClosedZReport, isPostedZReport, numberZReport, dateZReport, timeZReport, nameDepartmentStoreZReport, 
                            numberCashRegisterZReport, basisZReport, countReceiptZReport, quantityReceiptDetailZReport, 
                            sumReceiptDetailZReport, sumPositiveCashPaymentZReport, sumPositiveCardPaymentZReport,                             
                            sumNegativeCashPaymentZReport, sumNegativeCardPaymentZReport, VATSumSaleZReport, VATSumReturnZReport,
                            discountSumReceiptDetailZReport                                                                                 
                                                        
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isOpenedZReport(z) 
    PROPERTIES (z) closeZReport SHOWIF isOpenedZReport(z), openZReport SHOWIF isClosedZReport(z)

    PROPERTIES (z) deletez=DELETE FORCE PANEL TOOLBAR SHOWIF isDraftOpenedZReport(z),
                            exportReceiptsZReport FORCE PANEL TOOLBAR, importReceiptsZReport FORCE PANEL TOOLBAR,
                            postZReport SHOWIF isDraftOpenedZReport(z), unpostZReport SHOWIF isPostedOpenedZReport(z)

    OBJECTS b=Receipt
    PROPERTIES(b) READONLY  numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                            numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            discountSumReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt
    PROPERTIES(b)           exportReceipt, exportedIncrementReceipt

    FILTERS zReportReceipt(b)==z
    ORDER BY                numberReceipt(b)

    OBJECTS d=ReceiptDetail
    PROPERTIES(d) READONLY  typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail FORCE GRID, nameBatchReceiptDetail SHOWIF explicitBatchLedgerReceipt(b),
                            descriptionSaleReceiptReturnDetail FORCE GRID,
                            quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                            costSumSkuLedger FORCE GRID, sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID,
                            discountSumReceiptDetail FORCE GRID

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=Payment
    PROPERTIES(p) READONLY  namePaymentTypePayment, namePaymentMeansPayment, sumPayment
    PROPERTIES(d, p) READONLY sumReceiptDetailPayment

    FILTERS receiptPayment(p)==b
;
@extendFormFilterAccessStock(ZReport, z, zReports, departmentStore, company);

DESIGN zReports FROM DEFAULT{

    NEW topContainer{
        fill = 1;
        type = SPLITV;

        NEW firstCase {
            fill = 2;
            type = SPLITV;

            ADD z.box;
            ADD b.box;
        }

        NEW secondCase{
            fill = 1;
            type = SPLITH;

            ADD d.box{
                caption = 'Строка чека';
                fill = 3;
            }
            ADD p.box;
        }
    }

    ADD functions.box;
}
@defineFilterIsOpened (zReport, zReports, z);
// ----------------------------------------------- Стандартные значения ------------------------------------- //

loadDefaultPaymentType 'Добавить тип оплаты' = ACTION(string, paymentMeans, sid) {
    FOR ADDOBJ p = PaymentType DO {
        ASSIGN namePaymentType(p) <- string;
        ASSIGN paymentMeansPaymentType(p) <- paymentMeans;
        ASSIGN sidPaymentType(p) <- sid;
    }
}

overLoadDefaultPaymentTypes 'Загрузить дополнительные типы оплаты' = ABSTRACT ACTION LIST ();
loadDefaultPaymentTypes 'Загрузить стандартные типы оплаты' = ACTION() {
    loadDefaultPaymentType('Наличные', PaymentMeans.paymentMeansCash, 'cash');
    loadDefaultPaymentType('Карточка', PaymentMeans.paymentMeansCard, 'card');
    overLoadDefaultPaymentTypes();
} IN loadDefault;

@implementLoadDefaultData(loadDefaultPaymentTypes);

