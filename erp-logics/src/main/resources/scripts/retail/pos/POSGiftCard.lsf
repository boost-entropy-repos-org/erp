MODULE POSGiftCard;

REQUIRE GiftCard, POS;

NAMESPACE POS;

giftCardAsNotPayment 'Не пробивать сертификат как оплату' = DATA BOOLEAN (GroupCashRegister) IN base;
giftCardAsNotPaymentCurrentCashRegister 'Не пробивать сертификат как оплату' = giftCardAsNotPayment(groupCashRegister(currentCashRegister()));
giftCardAsNotPaymentText 'Текст между товарным чеком и кассовым чеком' = ABSTRACT TEXT (Receipt);

//продажа подарочных сертификатов
overChangeBarcodeGiftCard(VARSTRING[30] string, Receipt receipt) = {
    IF giftCardSeriesNumber(string) AND receipt IS Receipt AND string IS VARSTRING[30] THEN {
        LOCAL giftCard = GiftCard();
        giftCard() <- giftCardSeriesNumber(string);

        IF sold(giftCard()) THEN {
            MESSAGE 'Сертификат ' + seriesNumber(giftCard()) +' был использован';
        } ELSE {
            FOR NEW d = ReceiptGiftCardSaleDetail DO {
                receipt(d) <- receipt;
                giftCard(d) <- giftCard();
                idBarcode(d) <- string;
                price(d) <- price(giftCard());
                sum(d) <- price(giftCard());
                seek(d);
            }
        }
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(VARSTRING[30] string, Receipt receipt) += { overChangeBarcodeGiftCard(string, receipt); }

// Оплата сертификатом

addPaymentGiftCard 'Оплатить сертификатом'(Receipt receipt) = {
    DIALOG barcodeInput DO
        IF isSold(giftCardSeriesNumber(barcodeInput())) AND barcodeInput() IS VARSTRING[15] AND 
           NOT isExpiredDate(giftCardSeriesNumber(barcodeInput())) THEN {
            FOR NEW pg = PaymentGiftCard DO {
                LOCAL giftCard = GiftCard();
                giftCard() <- giftCardSeriesNumber(barcodeInput());
                giftCard(pg) <- giftCard();
                receipt(pg) <- receipt;
                paymentType(pg) <- minGiftCardPaymentType();
                sum[Payment](pg) <- MIN price(giftCard()), (sumReceiptDetail(receipt) (-) sumGiftCardPayment(receipt));
            }
        } ELSE
            MESSAGE 'Сертификат не найден или истек';
}

EXTEND FORM groupCashRegister PROPERTIES(grc) giftCardAsNotPayment;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY(giftCardAsNotPayment(grc));
    }
}

EXTEND FORM groupsCashRegister PROPERTIES(grc) READONLY giftCardAsNotPayment;

overCopy(GroupCashRegister old, GroupCashRegister new ) += { giftCardAsNotPayment(new) <- giftCardAsNotPayment(old); } 

EXTEND FORM postReceiptPayment
    PROPERTIES addPaymentGiftCard(r) TODRAW p SHOWIF allowPaymentGiftCard()
;

DESIGN postReceiptPayment {
    rightControls{
        MOVE PROPERTY(addPaymentGiftCard(r)) BEFORE PROPERTY(formOk()){
            fill = 1;
            font = 'bold 28';
        }
    }
}

bonusPaid 'Оплачено бонусами' = DATA NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
bonusPaid(ReceiptGiftCardSaleDetail d) += bonusPaid(d);
signedBonusPaid(ReceiptGiftCardSaleDetail d) += bonusPaid(d);

priceSum 'Сумма без скидки' = round(quantity(ReceiptGiftCardSaleDetail detail) * price(detail), roundCondition(departmentStore(detail)));
extraDiscountSum = ABSTRACT NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
extraDiscountSum(ReceiptGiftCardSaleDetail d) += bonusPaid(d);
calcSum (ReceiptGiftCardSaleDetail detail) = priceSum(detail) (-) extraDiscountSum(detail);

WHEN SESSION CHANGED (quantity(ReceiptGiftCardSaleDetail detail)) OR CHANGED (price(detail)) OR CHANGED (extraDiscountSum(detail)) OR CHANGED (departmentStore(detail))
    AND bonusPaid(detail) DO {
    sum (detail) <- calcSum(detail);   
}


sumBonusFIFOReceiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail detail) =
    PARTITION UNGROUP toPayBonuses 
        PROPORTION STRICT ROUND(2) (sum(detail) (-) minBonusSum())/(sumReceiptDetail(detail) (-) minBonusSum()*countReceiptDetail(receipt(detail))) 
        BY receipt(detail)
        ORDER detail;       
//    PARTITION UNGROUP toPayBonuses
//        LIMIT round(toPayBonuses(receipt(detail)) * sum(detail) / sumReceiptDetail(detail), roundCondition(departmentStore(receipt(detail))))
//        BY receipt(detail)
//        ORDER detail;       
        
overPostBonus(Receipt r) += {
    bonusPaid(ReceiptGiftCardSaleDetail detail) <- sumBonusFIFOReceiptGiftCardSaleDetail(detail) WHERE receipt(detail) == r;
}       