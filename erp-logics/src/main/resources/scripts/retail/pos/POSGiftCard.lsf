MODULE POSGiftCard;

REQUIRE GiftCard, POS;

NAMESPACE POS;

giftCardAsDiscount 'Пробивать сертификат как скидку' = DATA BOOLEAN (GroupCashRegister) IN base;
giftCardAsDiscountCurrentCashRegister 'Пробивать сертификат как скидку' = giftCardAsDiscount(groupCashRegister(currentCashRegister()));

//продажа подарочных сертификатов
overChangeBarcodeGiftCard(STRING[15] string, Receipt receipt) = ACTION {
    IF giftCardSeriesNumber(string) AND receipt IS Receipt AND string IS STRING[15] THEN {
        LOCAL giftCard = GiftCard();
        giftCard() <- giftCardSeriesNumber(string);

        IF sold(giftCard()) THEN {
            MESSAGE 'Сертификат ' + seriesNumber(giftCard()) +' был использован';
        } ELSE {
            FOR ADDOBJ d = ReceiptGiftCardSaleDetail DO {
                receipt(d) <- receipt;
                giftCard(d) <- giftCard();
                idBarcode(d) <- string;
                price(d) <- price(giftCard());
                sum(d) <- price(giftCard());
                seek(d);
            }
        }
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(STRING[15] string, Receipt receipt) += ACTION overChangeBarcodeGiftCard(string, receipt);

// Оплата сертификатом

addPaymentGiftCard 'Оплатить сертификатом'(Receipt receipt) = ACTION {
    FOR ADDOBJ pg = PaymentGiftCard DO {
        FORM barcodeInput MODAL;
        IF formResult() == FormResult.ok AND isSold(giftCardSeriesNumber(barcodeInput())) AND barcodeInput() IS STRING[15] AND 
           NOT isExpiredDate(giftCardSeriesNumber(barcodeInput())) THEN {
            LOCAL giftCard = GiftCard();
            giftCard() <- giftCardSeriesNumber(barcodeInput());
            giftCard(pg) <- giftCard();
            receipt(pg) <- receipt;
            paymentType(pg) <- minGiftCardPaymentType();
            sum[Payment](pg) <- price(giftCard());
        } ELSE {
            DELETE pg;
            MESSAGE 'Сертификат не найден или истек';
        }
    }
}

EXTEND FORM groupCashRegister PROPERTIES(grc) giftCardAsDiscount;

EXTEND FORM groupsCashRegister PROPERTIES(grc) READONLY giftCardAsDiscount;

EXTEND FORM postReceiptPayment
    PROPERTIES addPaymentGiftCard(r) TODRAW p FORCE PANEL SHOWIF allowPaymentGiftCard()
;

DESIGN postReceiptPayment {
    rightControls{
        MOVE PROPERTY(addPaymentGiftCard(r)) BEFORE PROPERTY(formOk()){
            fill = 1;
            font = 'bold 28';
        }
    }
}

bonusPaid 'Оплачено бонусами' = DATA NUMERIC[18,4] (ReceiptGiftCardSaleDetail) @@denomination;
bonusPaid(ReceiptGiftCardSaleDetail d) += bonusPaid(d);
signedBonusPaid(ReceiptGiftCardSaleDetail d) += bonusPaid(d);

priceSum 'Сумма без скидки' = round(quantity(ReceiptGiftCardSaleDetail detail) * price(detail), roundCondition(departmentStore(detail)));
extraDiscountSum = ABSTRACT NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
extraDiscountSum(ReceiptGiftCardSaleDetail d) += bonusPaid(d);
calcSum (ReceiptGiftCardSaleDetail detail) = priceSum(detail) (-) extraDiscountSum(detail);

WHEN SESSION CHANGED (quantity(ReceiptGiftCardSaleDetail detail)) OR CHANGED (price(detail)) OR CHANGED (extraDiscountSum(detail)) OR CHANGED (departmentStore(detail))
    AND bonusPaid(detail) DO {
    sum (detail) <- calcSum(detail);   
}


sumBonusFIFOReceiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail detail) =
    PARTITION UNGROUP toPayBonuses
        LIMIT round(toPayBonuses(receipt(detail)) * sum(detail) / sumReceiptDetail(detail), roundCondition(departmentStore(receipt(detail))))
        BY receipt(detail)
        ORDER detail;       
        
overPostBonus(Receipt r) += ACTION {
    bonusPaid(ReceiptGiftCardSaleDetail detail) <- sumBonusFIFOReceiptGiftCardSaleDetail(detail) WHERE receipt(detail) == r;
}       