MODULE POSGiftCardExtrnal;

REQUIRE GiftCardExternal, POS;

NAMESPACE POS;


value 'Номинал' = DATA LOCAL NUMERIC[16,4]();

isReadonlyOk = NOT barcodeInput() OR NOT value(); 

overOk '{action.form.ok}' = { formOk(); } TOOLBAR CHANGEKEY 'ctrl ENTER';

changeBarcodeInput() = {
    INPUT s = VARSTRING[15] DO {
        barcodeInput() <- s;
        IF barcodeInput() AND value() THEN formOk();
    }
}

changeValue() = {
    INPUT n = NUMERIC[16,4] DO {
        value() <- n;
        IF barcodeInput() AND value() THEN formOk();
    }
}


FORM barcodeInputExternal 'Ввод штрихкода'
    PROPERTIES() barcodeInput ON CHANGE changeBarcodeInput(), value ON CHANGE changeValue(), overOk READONLYIF isReadonlyOk()
;

DESIGN barcodeInputExternal{
    PROPERTY (formOk()){hide = TRUE;};
    PROPERTY (barcodeInput()) {
        caption = 'Штрихкод';
        font = 'bold 64';
        panelCaptionAbove = TRUE;
        editKey = 'F4';
        focusable = TRUE;
    }
    PROPERTY (value()){
        panelCaptionAbove = TRUE;
        font = 'bold 64';
    }
    TOOLBARRIGHT{
        MOVE PROPERTY (overOk());
    }
}

allowExternalPaymentGiftCard 'Разрешить гасить внешние сертификаты' = DATA BOOLEAN (GroupCashRegister) IN base;
externalLegalEntityGiftCard = DATA LegalEntity (GroupCashRegister) IN base;
nameExternalLegalEntityGiftCard 'Внешний эмитент подарочных сертификатов' (GroupCashRegister gr)= name(externalLegalEntityGiftCard(gr));

EXTEND FORM groupCashRegister
    PROPERTIES(grc) allowExternalPaymentGiftCard, nameExternalLegalEntityGiftCard
;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY(allowExternalPaymentGiftCard(grc));
        MOVE PROPERTY(nameExternalLegalEntityGiftCard(grc));
    }
}

overCopy(GroupCashRegister old, GroupCashRegister new ) += {
    allowExternalPaymentGiftCard(new) <- allowExternalPaymentGiftCard(old); 
    externalLegalEntityGiftCard(new) <- externalLegalEntityGiftCard(old); 
}
allowExternalPaymentGiftCardCurrentCashRegister = allowExternalPaymentGiftCard(groupCashRegister(currentCashRegister())) AND allowPaymentGiftCard();

// Оплата сертификатом
addPaymentGiftCardExternal 'Оплатить внешним сертификатом'(Receipt receipt) = {
    DIALOG barcodeInputExternal DO
        IF barcodeInput() IS VARSTRING[15] AND 
           NOT giftCardSeriesNumber(barcodeInput()) THEN {
            NEW pg = ExternalGiftCard {
                number(pg) <- barcodeInput();
                legalEntity(pg) <- externalLegalEntityGiftCard(groupCashRegister(currentCashRegister()));
                price(pg) <- value();
                sum[Payment](pg) <- MIN value(), (sumReceiptDetail(receipt) (-) sumGiftCardPayment(receipt));
                NEW gp = PaymentGiftCard {
                    receipt(gp) <- receipt;
                    paymentType(gp) <- minExternalGiftCardPaymentType();
                    sum[Payment](gp) <- MIN value(), (sumReceiptDetail(receipt) (-) sumGiftCardPayment(receipt));
                    giftCard(gp) <- pg;                                                      
                }
            }
        } ELSE
            MESSAGE 'Сертификат уже использован';
}


EXTEND FORM postReceiptPayment
    PROPERTIES addPaymentGiftCardExternal(r) TODRAW p SHOWIF allowExternalPaymentGiftCardCurrentCashRegister()
;

DESIGN postReceiptPayment {
    TOOLBARRIGHT{
        MOVE PROPERTY(addPaymentGiftCardExternal(r)) BEFORE PROPERTY(formOk()){
            fill = 1;
            font = 'bold 22';
        }
    }
}