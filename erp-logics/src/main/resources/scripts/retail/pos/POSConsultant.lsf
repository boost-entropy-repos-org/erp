MODULE POSConsultant;

REQUIRE POS;


barcode 'Штрихкод' = DATA STRING[15] (Employee) FIXEDCHARWIDTH 15;
isConsultant 'Продавец' = DATA BOOLEAN (Employee);

employeeBarcode (string) =
    GROUP AGGR Employee e
        BY barcode(e) WHERE e IS Employee;

EXTEND FORM employee
    PROPERTIES (e) isConsultant, barcode
;
DESIGN employee{
    personal {
        type = COLUMNS;
        columns = 2;
        MOVE PROPERTY (barcode(e));
        MOVE PROPERTY (isConsultant(e));
    }
}

EXTEND FORM employees
    PROPERTIES (e) READONLYIF isReadonly() barcode
;

isConsultantReceipt 'Учет личных продаж' = DATA BOOLEAN (Store);
isConsultantReceipt 'Учет личных продаж' = isConsultantReceipt(store(DepartmentStore d));
isConsultantReceip = isConsultantReceipt(departmentStore(Receipt r));

EXTEND FORM store
    PROPERTIES (s) isConsultantReceipt
;
DESIGN store {
    headerExtraParams {
        MOVE PROPERTY (isConsultantReceipt(s));
    }
}

consultant = DATA Employee (Receipt);
nameConsultant 'Продавец' (Receipt r) = name[Contact](consultant(r)) MINCHARWIDTH 20 PREFCHARWIDTH 20;

CONSTRAINT consultant(Receipt r) AND NOT in(departmentStore(r), consultant(r))
    CHECKED BY consultant[Receipt] MESSAGE 'В качестве продавца в чекевыбран сотрудник, которые не является работником данного отдела';
CONSTRAINT consultant(Receipt r) AND NOT isConsultant(consultant(r))
    CHECKED BY consultant[Receipt] MESSAGE 'В качестве продавца в чеке выбран сотрудник, у которого не задан признак "Продавец".';    
    
        
consultant = ABSTRACT Employee (ReceiptDetail);
nameConsultant 'Продавец' (ReceiptDetail d) = name[Contact](consultant(d)) MINCHARWIDTH 20 PREFCHARWIDTH 20;

consultant = DATA Employee (ReceiptSaleDetail);

WHEN SESSION FORMS POS SET (ReceiptSaleDetail d IS ReceiptSaleDetail) AND NOT CHANGED (consultant(d)) DO {
    consultant(d) <- consultant(receipt(d));
};

CONSTRAINT consultant(ReceiptSaleDetail r) AND NOT in(departmentStore(r), consultant(r))
    CHECKED BY consultant[ReceiptSaleDetail] MESSAGE 'В качестве продавца в строке чеке выбран сотрудник, которые не является работником данного отдела';
CONSTRAINT consultant(ReceiptSaleDetail r) AND NOT isConsultant(consultant(r))
    CHECKED BY consultant[ReceiptSaleDetail] MESSAGE 'В качестве продавца в строке чека выбран сотрудник, у которого не задан признак "Продавец".';  
        
consultant = DATA Employee (ReceiptReturnDetail);

WHEN SESSION FORMS POS CHANGED (receiptSaleDetail(ReceiptReturnDetail d)) AND NOT CHANGED (consultant(d))  DO {
    consultant(d) <- consultant(receiptSaleDetail(d));
};

CONSTRAINT consultant(ReceiptReturnDetail r) AND NOT in(departmentStore(r), consultant(r))
    CHECKED BY consultant[ReceiptReturnDetail] MESSAGE 'В качестве продавца в строке чека выбран сотрудник, которые не является работником данного отдела';
CONSTRAINT consultant(ReceiptReturnDetail r) AND NOT isConsultant(consultant(r))
    CHECKED BY consultant[ReceiptReturnDetail] MESSAGE 'В качестве продавца в строке чека выбран сотрудник, у которого не задан признак "Продавец".';  
    
consultant[ReceiptDetail](ReceiptSaleDetail d) += consultant(d);
consultant[ReceiptDetail](ReceiptReturnDetail d) += consultant(d);

EXTEND FORM POS
    PROPERTIES (r) SHOWIF isConsultantReceip(r) nameConsultant
    PROPERTIES (d) SHOWIF isConsultantReceip(r) nameConsultant
;

DESIGN POS {
    receiptDiscountRow2 {
        MOVE PROPERTY (nameConsultant(r)){ alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
    } 
}

EXTEND FORM zReport
    PROPERTIES (d) SHOWIF isConsultantReceip(b) nameConsultant
;
EXTEND FORM zReports
    PROPERTIES (d) READONLY SHOWIF isConsultantReceip(b) nameConsultant
;

consultant = ABSTRACT Employee (SaleLedger);
nameConsultant 'Продавец' (SaleLedger l) = name[Contact](consultant(l)) MINCHARWIDTH 20 PREFCHARWIDTH 20;

consultant[SaleLedger](ReceiptSaleDetail l) +=  consultant(l);
consultant[SaleLedger](ReceiptReturnDetail l) +=  consultant(l); 

saleConsultant 'Продавец' = DATA LOCAL Employee ();
nameSaleConsultant 'Продавец' = name[Contact](saleConsultant());
filterSaleConsultant = consultant(SaleLedger ledger)==saleConsultant() OR (ledger IS SaleLedger AND NOT saleConsultant());

CONSTRAINT saleConsultant()  AND NOT isConsultant(saleConsultant())
    CHECKED BY saleConsultant[] MESSAGE 'В качестве продавца в фильтре выбран сотрудник, у которого не задан признак "Продавец".';  

EXTEND FORM saleLedger
    PROPERTIES()   nameSaleConsultant
    PROPERTIES (s) READONLY nameConsultant
    
    FILTERS filterSaleConsultant(s)
;
DESIGN saleLedger {
    operationContainer{
        MOVE PROPERTY(nameSaleConsultant());
    } 
}

//задание продавца по штрихкоду для чека

overChangeBarcodeConsultant(STRING[15] string, Receipt receipt) = ACTION  {
    IF employeeBarcode(string) AND isConsultant(employeeBarcode(string)) AND receipt IS Receipt AND string IS STRING[15]  THEN {
        consultant(receipt) <- employeeBarcode(string);        
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(STRING[15] string, Receipt receipt) += ACTION overChangeBarcodeConsultant(string, receipt);



