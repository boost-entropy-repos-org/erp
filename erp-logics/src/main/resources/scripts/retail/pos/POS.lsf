MODULE POS;

REQUIRE ZReportRetailCRM, Dashboard, PaymentTerminal, CashOperationZReport;

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceListGroupCashRegister 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (GroupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceListGroupCashRegister
;

// ----------------------------- Кассовый модуль ---------------- //

fiscalSkipReceipt 'Отключить ФР' (receipt) = DATA BOOLEAN (Receipt);

EXTEND FORM zReports PROPERTIES(b) fiscalSkipReceipt;

POSPriceListTypeReceipt (receipt) = OVERRIDE priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt)), priceListTypeDiscountCard(discountCardReceipt(receipt));

overPriceSkuReceiptDateTime = ABSTRACT NUMERIC[14,2] (Sku, Receipt, DATETIME); 

POSPriceSkuReceiptDateTime 'Цена в кассе' (sku, receipt, dateTime) =
    IF usePriceListGroupCashRegister(groupCashRegisterReceipt(receipt)) THEN
        priceAPriceListTypeSkuStockDateTime(POSPriceListTypeReceipt(receipt), sku, departmentStoreReceipt(receipt), dateTime)
    ELSE
        overPriceSkuReceiptDateTime(sku, receipt, dateTime); 
currentPOSPriceSkuReceipt 'Текущая цена' (sku, receipt) = POSPriceSkuReceiptDateTime(sku, receipt, currentDateTime());

POSPriceBatchReceiptDateTime 'Цена в кассе' (batch, receipt, dateTime) =
    IF usePriceListGroupCashRegister(groupCashRegisterReceipt(receipt)) THEN
        priceAPriceListTypeBatchStockDateTime(POSPriceListTypeReceipt(receipt), batch, departmentStoreReceipt(receipt), dateTime)
    ELSE
        overPriceSkuReceiptDateTime(skuBatch(batch), receipt, dateTime); 
currentPOSPriceBatchReceipt 'Текущая цена' (batch, receipt) = POSPriceBatchReceiptDateTime(batch, receipt, currentDateTime());
currentPOSPriceBatchReceiptDetail 'Текущая цена' (batch, receiptDetail) = POSPriceBatchReceiptDateTime(batch, receiptReceiptDetail(receiptDetail), currentDateTime());

zReportCashRegister = DATA ZReport (CashRegister);

GROUP receiptZReport 'Z-отчет' : public;

currentZReport() = zReportCashRegister(currentCashRegister());
zReportReceipt(r) <- currentZReport() WHEN SET(r IS Receipt);

numberCurrentZReport 'Номер текущего Z-отчета' () = numberZReport(currentZReport()) IN receiptZReport;

closedCurrentZReport() = NOT currentZReport();

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы

posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) PERSISTENT;
posReturnSumDiscountCard 'Сумма возвратов' (discountCard) = GROUP SUM sumReceiptReturnDetail(d) IF NOT discountCardReceiptDetail(d) BY discountCardReceipt(receiptSaleReceiptReturnDetail(d)) PERSISTENT; 
cumulativeSumDiscountCard 'Накопленная сумма (основная)' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) (-) posReturnSumDiscountCard(discountCard) PERSISTENT;

externalSumDiscountCard 'Дополнительные накопления' (discountCard) = ABSTRACT NUMERIC[16,2] (DiscountCard) PERSISTENT;
totalSumDiscountCard 'Накопленная сумма' (d) = cumulativeSumDiscountCard(d) (+) externalSumDiscountCard(d); 

prevTotalSumReceipt 'Накопленная сумма' (receipt) = OVERRIDE 0 IF receipt IS Receipt, [= PREV(totalSumDiscountCard(discountCard))](discountCardReceipt(receipt));
totalSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN totalSumDiscountCard(discountCardReceipt(receipt))
                                                                                         ELSE prevTotalSumReceipt (receipt);

EXTEND FORM discountCards
    PROPERTIES(d) READONLY AFTER initialSumDiscountCard(d) posSumDiscountCard, posReturnSumDiscountCard, cumulativeSumDiscountCard, externalSumDiscountCard, totalSumDiscountCard
;

// Расчет сумм скидок

setUserPromotionReceipt (receipt) = GROUP SUM 1 IF setUserPromotionReceiptSaleDetailPromotionCondition (receiptSaleDetail, promotionCondition)  BY receiptReceiptSaleDetail (receiptSaleDetail);

promotionSumReceiptSaleDetail (detail) = GROUP SUM promotionSumReceiptSaleDetailPromotionCondition(detail, condition)
                                               BY detail;

inReceiptPromotion (receipt, promotion) = inPromotionStore(promotion, storeReceipt(receipt)) AND
                                          dateReceipt(receipt) >= dateFromPromotion(promotion) AND dateReceipt(receipt) <= dateToPromotion(promotion) AND
                                          NOT timeReceipt(receipt) < timeOfFromPromotion(promotion) AND NOT timeReceipt(receipt) > timeOfToPromotion(promotion) AND
                                          NOT sumReceiptDetailReceipt(receipt) < minSumBillPromotion(promotion) AND NOT sumReceiptDetailReceipt(receipt) > maxSumBillPromotion(promotion)
                                          AND NOT skipPromotionDOW(promotion, extractDOW(dateReceipt(receipt)))
                                          AND NOT totalSumReceiptPromotion (receipt, promotion) < minCumulativeSumPromotion(promotion) AND NOT totalSumReceiptPromotion (receipt, promotion) > maxCumulativeSumPromotion(promotion)
                                          AND NOT (hasDiscountCardPromotion(promotion) AND NOT inPromotionDiscountCard(promotion, discountCardReceipt(receipt)))
                                          AND NOT (noDiscountCardPromotion(promotion) AND discountCardReceipt(receipt));

inReceiptSaleDetailPromotionCondition (receiptDetail, promotionCondition) =
    inReceiptPromotion(receiptReceiptDetail(receiptDetail), promotionPromotionCondition(promotionCondition))
    AND inPromotionConditionSku(promotionCondition, skuReceiptDetail(receiptDetail));

//maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

isAppliedPromotionReceiptSaleDetailPromotionCondition 'Акция применяется' (receiptSaleDetail, promotionCondition) =
    IF userSetPromotionCondition(promotionCondition) THEN setUserPromotionReceiptSaleDetailPromotionCondition(receiptSaleDetail, promotionCondition)
      ELSE receiptSaleDetail IS ReceiptSaleDetail AND promotionCondition IS PromotionCondition;

// оптимизация
possibleReceiptPromotion = GROUP SUM 1 IF inPromotionConditionSku(promotionCondition, skuReceiptSaleDetail(detail)) IF quantityReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), promotionPromotionCondition(promotionCondition);

calculatePromotionsReceipt 'Рассчитать акции' = ACTION (receipt) {

    quantityReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    promotionSumReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    discountSumReceiptSaleDetail(detail) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;

//    LOCAL maxSalePriceSku = NUMERIC[14,2] (Sku);
//    maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    FOR promotionGroup IS PromotionGroup DO {
//        LOCAL leftSku = NUMERIC[14,3] (Sku);
//        leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'

        LOCAL leftQuantityReceiptSaleDetail = NUMERIC[14,3] (ReceiptSaleDetail);
        leftQuantityReceiptSaleDetail(detail) <- quantityReceiptSaleDetail(detail) WHERE receiptReceiptSaleDetail(detail) == receipt;

        LOCAL leftSumReceiptSaleDetail = NUMERIC[16,3] (ReceiptSaleDetail);
        leftSumReceiptSaleDetail(detail) <- (priceSumReceiptSaleDetail(detail) (-) promotionSumReceiptSaleDetail(detail)) WHERE receiptReceiptSaleDetail(detail) == receipt;

        FOR promotionGroupPromotion(promotion) == promotionGroup AND inReceiptPromotion(receipt, promotion) AND possibleReceiptPromotion(receipt, promotion) ORDER orderPromotion(promotion) DO {
            LOCAL quantityPromotionCondition = NUMERIC[14,3] (PromotionCondition);
            quantityPromotionCondition(promotionCondition) <- [= GROUP SUM leftQuantityReceiptSaleDetail(detail)
                                                                         IF inPromotionConditionSku(promotionCondition, skuReceiptSaleDetail(detail))
                                                                     BY promotionCondition](promotionCondition) IF
                                                                        promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL sumPromotionCondition = NUMERIC[14,3] (PromotionCondition);
            sumPromotionCondition(promotionCondition) <- [= GROUP SUM leftQuantityReceiptSaleDetail(detail) * priceReceiptSaleDetail(detail)
                                                                    IF inPromotionConditionSku(promotionCondition, skuReceiptSaleDetail(detail))
                                                                    BY promotionCondition](promotionCondition) IF
                                                                       promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL countPromotionCondition = INTEGER (PromotionCondition);
            countPromotionCondition(promotionCondition) <- MIN divideInteger(quantityPromotionCondition (promotionCondition), minQuantityPromotionCondition (promotionCondition)),
                                                               divideInteger(sumPromotionCondition(promotionCondition), minSumPromotionCondition(promotionCondition));

            LOCAL countPromotion = INTEGER ();
            countPromotion () <- [= GROUP MIN countPromotionCondition(promotionCondition)]();

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND [= GROUP SUM 1 IF countPromotionCondition(promotionCondition) > 0]() == countPromotionConditionPromotion(promotion) THEN {
//
                // Считаем сколько раз должны применить условие
                LOCAL takenPromotionCondition = NUMERIC[14,3] (PromotionCondition);
                takenPromotionCondition(promotionCondition) <- IF quantityDiscountPromotionCondition(promotionCondition) THEN 
                                                                  min(countPromotion() * quantityDiscountPromotionCondition(promotionCondition), quantityPromotionCondition(promotionCondition))
                                                               ELSE
                                                                  quantityPromotionCondition(promotionCondition);

                // Размазываем его по "Sku"
//                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (Sku, PromotionCondition);
//                takenSkuPromotionCondition(sku, promotionCondition) <- [= PARTITION UNGROUP takenPromotionCondition
//                                                                                  LIMIT leftSku (sku)
//                                                                                        IF inPromotionConditionSku(promotionCondition, sku)
//                                                                                  BY promotionCondition
//                                                                                  ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                // Размазываем его по строкам чека
                LOCAL takenReceiptSaleDetailPromotionCondition = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                takenReceiptSaleDetailPromotionCondition (detail, condition) <- [= PARTITION UNGROUP takenPromotionCondition
                                                                                           LIMIT leftQuantityReceiptSaleDetail(detail) 
                                                                                                 IF inPromotionConditionSku(promotionCondition, skuReceiptSaleDetail(detail))  
                                                                                                 AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, promotionCondition)
                                                                                           BY promotionCondition
                                                                                           ORDER DESC priceReceiptSaleDetail(detail), detail](detail, condition);

                // Считаем сколько товара использовали из каждой строки чека
                LOCAL takenReceiptSaleDetail = NUMERIC[14,3] (ReceiptSaleDetail);
                takenReceiptSaleDetail(detail) <- [= GROUP SUM takenReceiptSaleDetailPromotionCondition(detail, condition) BY detail](detail);

                // Считаем сколько использовали каждый товар
//                LOCAL takenSku = NUMERIC[14,3] (Sku);
//                takenSku(sku) <- [= GROUP SUM takenReceiptSaleDetail(detail) BY skuReceiptSaleDetail(detail)] (sku);

                // Отнимаем использованные
                leftQuantityReceiptSaleDetail(detail) <- leftQuantityReceiptSaleDetail(detail) (-) takenReceiptSaleDetail(detail);
//                leftSku(sku) <- leftSku(sku) (-) takenSku(sku);

                quantityReceiptSaleDetailPromotionCondition(detail, condition) <- takenReceiptSaleDetailPromotionCondition(detail, condition)
                    WHERE takenReceiptSaleDetailPromotionCondition(detail, condition);

                promotionSumReceiptSaleDetailPromotionCondition (detail, condition) <-
                    IF sumReceiptPromotionCondition(condition) THEN
                        takenReceiptSaleDetailPromotionCondition(detail, condition) * (priceReceiptSaleDetail(detail) (-) sumReceiptPromotionCondition(condition) / quantityDiscountPromotionCondition (condition))
                    ELSE
                        IF sumDiscountPromotionCondition(condition) THEN
                            takenReceiptSaleDetailPromotionCondition(detail, condition) * sumDiscountPromotionCondition(condition)
                        ELSE
                            IF resultPricePromotionCondition(condition) THEN
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) - resultPricePromotionCondition(condition))
                            ELSE 
                                IF priceListTypePromotionCondition(condition) THEN
                                    takenReceiptSaleDetailPromotionCondition(detail, condition) * (priceReceiptSaleDetail(detail) (-) priceAPriceListTypeSkuStockDateTime(priceListTypePromotionCondition(condition), skuReceiptSaleDetail(detail), departmentStoreReceiptSaleDetail(detail), dateTimeReceiptSaleDetail(detail)))                                    
                                ELSE
                                    takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) * percentPromotionCondition(condition) / 100)
                    WHERE takenReceiptSaleDetailPromotionCondition(detail, condition);
            }
        }
    }

    discountSumReceiptSaleDetail(detail) <- roundPriceRoundCondition(promotionSumReceiptSaleDetail(detail), roundConditionDepartmentStore(departmentStoreReceiptSaleDetail(detail))) WHERE receiptReceiptSaleDetail(detail) == receipt;
    discountSumReceiptSaleDetail(detail) <- calcDiscountSumReceiptSaleDetail(detail) WHERE detail IS ReceiptSaleDetail AND receiptReceiptSaleDetail(detail) == receipt AND discountPercentReceiptSaleDetail(detail) AND NOT promotionSumReceiptSaleDetail(detail);
}

// Операции с чеками

createCurrentReceipt 'Создать новый чек' = ACTION () {
    FOR ADDOBJ r = Receipt DO {
        seek(r);
        numberReceipt(r) <- maxNumberReceiptZReport(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayTextReceiptDetail 'Вывести текст на дисплей'(receiptDetail) = ABSTRACT ACTION LIST (ReceiptDetail);

//Отмена чека

fiscalCancelReceipt 'Отменить чек' = ABSTRACT ACTION LIST(Receipt);

// Проведение чека

GROUP receiptAction 'Оплата' : public;

postPrintReceipt 'Напечатать фискальный чек' = ABSTRACT ACTION LIST (Receipt);
noFiscalPostPrintReceipt 'Создать чек (без фискального регистратора)' = ACTION (receipt) {
    IF receipt IS Receipt THEN {
        apply();
        IF NOT canceled() THEN
            createCurrentReceipt();
    }
}
postPrintReceipt(receipt) += ACTION IF NOT sidCashRegisterModelReceipt(receipt) THEN noFiscalPostPrintReceipt(receipt);

// Оплата через платежный терминал
paymentTerminalModelReceipt (receipt) = paymentTerminalModelCashRegister(cashRegisterReceipt(receipt));
sidPaymentTerminalModelReceipt 'Код модели' (receipt) = sidModel(paymentTerminalModelReceipt(receipt));

postPaymentTerminalReceipt 'Оплата через платёжный терминал' = ABSTRACT ACTION LIST (Receipt);
postPaymentTerminalReceiptResult = DATA SESSION VARSTRING[100] (); 

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) READONLY sumReceiptDetailReceipt, changePaymentReceipt

    OBJECTS p = Payment FIXED GRID
    PROPERTIES(p) sumPayment, namePaymentTypePayment READONLY
    FILTERS receiptPayment(p) == r
;

DESIGN postReceiptPayment FROM DEFAULT {

    ADD p.box {
        fill = 1;
        p.grid {
            defaultComponent = TRUE;
        }
        PROPERTY(sumPayment(p)) { font = 'bold 36'; }
        PROPERTY(namePaymentTypePayment(p)) { focusable = FALSE; font = 'bold 36'; }
        REMOVE p.toolbar;
    }
    NEW south {
        alignment = STRETCH;
        type = CONTAINERH;
        ADD PROPERTY(sumReceiptDetailReceipt(r)) { panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 72'; }
        ADD PROPERTY(changePaymentReceipt(r)) { panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 72'; }
        ADD rightControls {
            fill = 1;
            type = CONTAINERV;
            PROPERTY(formOk()) {
                fill = 1;
                font = 'bold 28';
            }
            PROPERTY(formClose()) {
                fill = 1;
                font = 'bold 28';
            }
        }
    }
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

allowPaymentGiftCard = DATA SESSION BOOLEAN();

prePostReceipt = ACTION (receipt) {
    allowPaymentGiftCard() <- TRUE;
    DELETE payment WHERE receiptPayment(payment) == receipt;
    dateReceipt(receipt) <- currentDate();
    timeReceipt(receipt) <- currentTime();
}

postReceipt 'Смешанный платеж' = ACTION (receipt) {
    prePostReceipt(receipt);
    IF sumReceiptDetailReceipt(receipt) THEN {
        FOR ADDOBJ p = Payment DO {
            receiptPayment(p) <- receipt;
            paymentTypePayment(p) <- minCashPaymentType();
        }
        FOR ADDOBJ p = Payment DO {
            receiptPayment(p) <- receipt;
            paymentTypePayment(p) <- minCardPaymentType();
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            postPaymentTerminalReceipt(receipt);
            IF NOT postPaymentTerminalReceiptResult() THEN {
                postPrintReceipt(receipt);
            } ELSE {
                MESSAGE postPaymentTerminalReceiptResult();
            }
        } ELSE {
            DELETE p WHERE receiptPayment(p) == receipt;
        }
    }
} EDITKEY 'F9' IN receiptAction;

postCardReceipt 'Карточкой' = ACTION (receipt) {
    prePostReceipt(receipt);
    IF sumReceiptDetailReceipt(receipt) THEN {
        FOR ADDOBJ p = Payment DO {
            ASSIGN receiptPayment(p) <- receipt;
            ASSIGN paymentTypePayment(p) <- minCardPaymentType();
            ASSIGN sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        postPaymentTerminalReceipt(receipt);
        IF NOT postPaymentTerminalReceiptResult() THEN {
            postPrintReceipt(receipt);
        } ELSE {
            MESSAGE postPaymentTerminalReceiptResult();
        }
    }
} EDITKEY 'F10' CONFIRM IN receiptAction;

postCashReceipt 'Наличными' = ACTION (receipt) {
    prePostReceipt(receipt);
    IF sumReceiptDetailReceipt(receipt) THEN {
        FOR ADDOBJ p = Payment DO {
            receiptPayment(p) <- receipt;
            paymentTypePayment(p) <- minCashPaymentType();
            sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            postPrintReceipt(receipt);
        } ELSE {
            DELETE p WHERE receiptPayment(p) == receipt;
        }
    }
} EDITKEY 'F11' IN receiptAction;

resetBoardReceipt 'Сбросить текст на дисплее' = ABSTRACT ACTION LIST(Receipt);

cancelReceipt 'Обнулить чек' = ACTION (receipt) {
    EXEC resetBoardReceipt(receipt);
    IF sumReceiptDetailReceipt(receipt) THEN {
        cancel();
        createCurrentReceipt();
    }
    EXEC fiscalCancelReceipt(receipt);
} EDITKEY 'shift F11' CONFIRM IN receiptAction;

// Операции по добавлению строк в чек

// Продажи
FORM chooseBatchReceipt 'Выбор партии'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS d = ReceiptDetail FIXED PANEL

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY dateTimeBatch, nameBatch
    PROPERTIES(bt, st) READONLY prevCurrentBalanceBatchStock
    PROPERTIES(bt, d) READONLY currentPOSPriceBatchReceiptDetail
    ORDER BY dateTimeBatch(bt) DESC
    FILTERS skuBatch(bt) == skuReceiptDetail(d),
            currentPOSPriceBatchReceiptDetail(bt, d)
    FILTERGROUP balance
        FILTER 'Партии с остатком' 'F10' prevCurrentBalanceBatchStock(bt, st) DEFAULT 
        
;

changeBatchReceiptDetail 'Изменить партию строки чека' = ACTION (detail) {
    IF explicitBatchLedgerReceipt(receiptReceiptDetail(detail)) THEN {
        FORM chooseBatchReceipt OBJECTS st = departmentStoreReceiptDetail(detail), d = detail MODAL;
        IF formResult() == FormResult.ok THEN {
            batchReceiptDetail(detail) <- chosenObject('bt');
            priceReceiptSaleDetail(detail) <- currentPOSPriceBatchReceipt(chosenObject('bt'), receiptReceiptDetail(detail));
        }
    }
}

focusQuantityReceiptDetail = ABSTRACT ACTION LIST (); 

createReceiptSaleDetailBatch 'Добавить строку продажи' = ACTION (receipt, batch, barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        EXEC seek(d);
        receiptReceiptSaleDetail(d) <- receipt;
        idBarcodeReceiptDetail(d) <- barcode;
        skuReceiptSaleDetail(d) <- skuBatch(batch);
        quantityReceiptSaleDetail(d) <- 1.0;
//        VATReceiptSaleDetail(d) <- VATSkuStockDate(skuBatch(batch), departmentStoreReceipt(receipt), currentDate());
        batchReceiptSaleDetail(d) <- batch;
        priceReceiptSaleDetail(d) <- currentPOSPriceBatchReceipt(batch, receipt);
        focusQuantityReceiptDetail();        
    }
}

countBatchSkuStockReceipt (sk, st, r) = GROUP SUM 1 
                                                  IF (currentBalanceBatchStock(batch, stock) (-) 
                                                      [= GROUP SUM quantityReceiptSaleDetail(d) 
                                                              BY batchReceiptSaleDetail(d), receiptReceiptSaleDetail(d)] (batch, receipt)) > 0
                                              BY skuBatch(batch), stock, receipt; 
defaultBatchSkuStockReceipt 'Партия по умолчанию' (sku, stock, receipt) = 
    GROUP MIN batch IF (currentBalanceBatchStock(batch, stock) (-)
                        [= GROUP SUM quantityReceiptSaleDetail(d) 
                                 BY batchReceiptSaleDetail(d), receiptReceiptSaleDetail(d)] (batch, receipt)) > 0
          BY skuBatch(batch), stock, receipt; 

createReceiptSaleDetailSku 'Добавить строку продажи' = ACTION (receipt, sku, barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        seek(d);
        receiptReceiptSaleDetail(d) <- receipt;
        idBarcodeReceiptDetail(d) <- barcode;
        skuReceiptSaleDetail(d) <- sku;
        quantityReceiptSaleDetail(d) <- 1.0;
        priceReceiptSaleDetail(d) <- currentPOSPriceSkuReceipt(sku, receipt);
//        VATReceiptSaleDetail(d) <- VATSkuStockDate(sku, departmentStoreReceipt(receipt), currentDate());
        IF explicitBatchLedgerReceipt(receiptReceiptSaleDetail(d)) AND
            countBatchSkuStockReceipt(skuReceiptSaleDetail(d), departmentStoreReceipt(receiptReceiptSaleDetail(d)), receipt) == 1 THEN {
                batchReceiptSaleDetail(d) <- defaultBatchSkuStockReceipt(skuReceiptSaleDetail(d), departmentStoreReceipt(receiptReceiptSaleDetail(d)), receipt);
                priceReceiptSaleDetail(d) <- currentPOSPriceBatchReceipt(batchReceiptSaleDetail(d), receiptReceiptDetail(d));
            } ELSE IF explicitBatchLedgerReceipt(receiptReceiptSaleDetail(d)) THEN {
                FORM chooseBatchReceipt OBJECTS st = departmentStoreReceiptDetail(d), d = d MODAL;
                IF formResult() == FormResult.ok THEN {
                    batchReceiptSaleDetail(d) <- chosenObject('bt');
                    priceReceiptSaleDetail(d) <- currentPOSPriceBatchReceipt(chosenObject('bt'), receiptReceiptDetail(d));
                    calculatePromotionsReceipt(receipt);
                } ELSE
                    DELETE d;
            }
        focusQuantityReceiptDetail();
    }
}

GROUP receiptSaleAction 'Продажа' : public;

// По штрихкоду
consumedChangeBarcodeSaleReceipt = DATA SESSION BOOLEAN();
overChangeBarcodeSaleReceipt = ABSTRACT ACTION LIST (STRING[15], Receipt);

changeBarcodeSaleReceipt = ACTION (receipt) {
    REQUEST STRING[15] INPUT;
    consumedChangeBarcodeSaleReceipt() <- NULL;
    LOCAL barcode = STRING[15] ();
    barcode() <- processedBarcode(requestedString());
    overChangeBarcodeSaleReceipt(barcode(), receipt);
    IF NOT consumedChangeBarcodeSaleReceipt() THEN{
        LOCAL dialogBarcodeSku = Sku();
        dialogBarcodeSku() <- skuBarcodeIdDate(barcode(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {
            EXEC createReceiptSaleDetailSku(receipt, dialogBarcodeSku(), barcode());
        } ELSE
            MESSAGE CONCAT ' ', 'Не найден штрихкод', barcode(), '(' + requestedString() + ')';
    }
}

// Поиск подбором SKU
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroupStock(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT

    OBJECTS           s = Sku FIXED GRID
    PROPERTIES        READONLY nameSku(s)
    PROPERTIES(s, st) READONLY prevCurrentBalanceSkuStock
    PROPERTIES(s, r)  READONLY currentPOSPriceSkuReceipt    
    PROPERTIES        READONLY idBarcodeSku(s)
    FILTERS           isParentSkuGroupSku(sk, s)
    ORDER BY          nameSku(s)

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' prevCurrentBalanceSkuStock(s, st) DEFAULT

;

DESIGN searchSkuSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            ADD skuTree.tree.box { caption = 'Группы'; }
            ADD s.box {
                fill = 4;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(nameSku(s)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 40;}
            PROPERTY(prevCurrentBalanceSkuStock(s, st)) { font = '16'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPOSPriceSkuReceipt(s, r)) { font = '16'; }
            PROPERTY(idBarcodeSku(s)) { font = '16'; minimumCharWidth = 14; preferredCharWidth = 14;}
        }
    }
}

searchSkuSaleReceipt 'Поиск' = ACTION (receipt) {
    FORM searchSkuSaleReceipt OBJECTS st = departmentStoreReceipt(receipt), r = receipt MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptSaleDetailSku(receipt, chosenObject('s'), idBarcodeSku(chosenObject('s')));
    }
} EDITKEY 'F3' IN receiptSaleAction;

// Поиск подбором Batch
FORM searchBatchSaleReceipt 'Поиск партии'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroupStock(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT

    OBJECTS           b = Batch FIXED GRID
    PROPERTIES        READONLY documentNameSkuBatch(b)
    
    PROPERTIES(b, st) READONLY prevCurrentBalanceBatchStock
    PROPERTIES(b, r)  READONLY currentPOSPriceBatchReceipt
        
    PROPERTIES        READONLY idBarcodeSkuBatch(b), nameBatch(b)
    FILTERS           isParentSkuGroupSku(sk, skuBatch(b))
    ORDER BY          documentNameSkuBatch(b)

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' prevCurrentBalanceBatchStock(b, st) DEFAULT

;

DESIGN searchBatchSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            ADD skuTree.tree.box { caption = 'Группы'; }
            ADD b.box {
                fill = 4;
                b.grid {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(documentNameSkuBatch(b)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 40;}
            PROPERTY(prevCurrentBalanceBatchStock(b, st)) { font = '16'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPOSPriceBatchReceipt(b, r)) { font = '16'; }
            PROPERTY(idBarcodeSkuBatch(b)) { font = '16'; minimumCharWidth = 14; preferredCharWidth = 14;}
            PROPERTY(nameBatch(b)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 30;}           
        }
    }
}

searchBatchSaleReceipt 'Поиск' = ACTION (receipt) {
    FORM searchBatchSaleReceipt OBJECTS st = departmentStoreReceipt(receipt), r = receipt MODAL;
    IF formResult() == FormResult.ok THEN {
        createReceiptSaleDetailBatch(receipt, chosenObject('b'), idBarcodeSkuBatch(chosenObject('b')));
    }
} EDITKEY 'F3' IN receiptSaleAction;


// Возвраты

createReceiptReturnDetail 'Добавить строку возврата' = ACTION (receipt, receiptSaleDetail, barcode) {
    FOR ADDOBJ d = ReceiptReturnDetail DO {
        seek(d);
        receiptReceiptReturnDetail(d) <- receipt;
        idBarcodeReceiptDetail(d) <- barcode;
        receiptSaleDetailReceiptReturnDetail(d) <- receiptSaleDetail;
        skuReceiptReturnDetail(d) <- skuReceiptSaleDetail(receiptSaleDetail);
        quantityReceiptReturnDetail(d) <- 1.0;
        priceReceiptReturnDetail(d) <- priceReceiptSaleDetail(receiptSaleDetail);
        VATReceiptReturnDetail(d) <- VATReceiptSaleDetail(receiptSaleDetail);
        batchReceiptReturnDetail(d) <- batchReceiptSaleDetail(receiptSaleDetail);
        focusQuantityReceiptDetail();
    }
}

GROUP receiptReturnAction 'Возврат' : public;

// По штрихкоду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = DepartmentStore FIXED PANEL

    OBJECTS s = Sku FIXED PANEL
    PROPERTIES idBarcodeSku(s) READONLY, nameSku(s)

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY numberReceiptReceiptDetail, dateTimeReceiptSaleDetail, nameBatchReceiptSaleDetail SHOWIF explicitBatchLedgerDepartmentStore(d),
                           numberDiscountCardReceiptDetail, nameLegalEntityDiscountCardReceiptDetail, sumReceiptDetailReceiptDetail,
                           indexReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                           sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail
    FILTERS departmentStoreReceiptSaleDetail(r) == d,
            skuReceiptSaleDetail(r) == s
;

DESIGN scanBarcodeReturnReceipt FROM DEFAULT {
    PROPERTY(idBarcodeSku(s)) {
        focusable = FALSE;
    }
    PROPERTY(nameSku(s)) {
        focusable = FALSE;
    }
}

scanBarcodeReturnReceipt 'Ввести штрихкод' = ACTION (receipt) {
    FORM barcodeInput MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL dialogBarcodeSku = Sku();
        dialogBarcodeSku() <- skuBarcodeIdDate(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {
            FORM scanBarcodeReturnReceipt OBJECTS d = departmentStoreReceipt(receipt), s = dialogBarcodeSku() MODAL;
            IF formResult() == FormResult.ok AND chosenObject('r') THEN {
                createReceiptReturnDetail(receipt, chosenObject('r'), barcodeInput());
            } ELSE {
                FOR ADDOBJ d = ReceiptReturnDetail DO {
                    seek(d);
                    receiptReceiptReturnDetail(d) <- receipt;
                    idBarcodeReceiptDetail(d) <- barcodeInput();
                    skuReceiptReturnDetail(d) <- dialogBarcodeSku();
                    quantityReceiptReturnDetail(d) <- 1.0;
                    priceReceiptReturnDetail(d) <- currentPOSPriceSkuReceipt(dialogBarcodeSku(), receipt);
                    VATReceiptReturnDetail(d) <- VATSkuStock(dialogBarcodeSku(), departmentStoreReceipt(receipt));
                    IF explicitBatchLedgerReceipt(receipt) THEN {
                        FORM chooseBatchReceipt OBJECTS st = departmentStoreReceiptDetail(d), d = d MODAL;
                        IF formResult() == FormResult.ok THEN {
                            batchReceiptReturnDetail(d) <- chosenObject('bt');
                            priceReceiptReturnDetail(d) <- currentPOSPriceBatchReceipt(chosenObject('bt'), receiptReceiptDetail(d));
                        } ELSE
                            DELETE d;
                    }
                }
                focusQuantityReceiptDetail();
            }
        } ELSE
            MESSAGE CONCAT ' ', 'Не найден штрихкод', barcodeInput();
    }
} EDITKEY 'F7' IN receiptReturnAction;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = DepartmentStore FIXED PANEL

    OBJECTS s = Receipt FIXED GRID
    PROPERTIES(s) READONLY  numberReceipt, dateReceipt, timeReceipt, nameUserReceipt,
                            numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            countReceiptDetailReceipt, quantityReceiptDetailReceipt
    FILTERS departmentStoreReceipt(s) == st

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY  idBarcodeReceiptDetail, nameSkuReceiptDetail, nameBatchReceiptSaleDetail SHOWIF explicitBatchLedgerDepartmentStore(st),
                            quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                            sumReceiptDetail, discountPercentReceiptSaleDetail, discountSumReceiptDetail
    FILTERS receiptReceiptSaleDetail(r) == s
;

searchSkuReturnReceipt 'Поиск' = ACTION (receipt) {
    FORM searchSkuReturnReceipt OBJECTS st = departmentStoreReceipt(receipt) MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptReturnDetail(receipt, chosenObject('r'), idBarcodeSku(skuReceiptSaleDetail(chosenObject('r'))));
    }
} EDITKEY 'F6' IN receiptReturnAction;

// Дисконтные карты

overChangeBarcodeDiscountCard = ACTION (string, receipt) {
    IF discountCardString(string) AND receipt IS Receipt AND string IS STRING[15] THEN {
        IF dateToDiscountCard(discountCardString(string)) < dateReceipt(receipt) THEN
            MESSAGE 'Закончился срок действия карты'
        ELSE
            discountCardReceipt(receipt) <- discountCardString(string); 
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSaleReceipt(string, receipt) += overChangeBarcodeDiscountCard(string, receipt);

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = STRING[18], s = STRING[2]) FIXED PANEL
    PROPERTIES number = OBJVALUE(n), series = OBJVALUE(s)
;

DESIGN inputDiscountCardNumberReceipt FROM DEFAULT{
    NEW centerContainer BEFORE functions.box {
        type = CONTAINERH;
        ADD PROPERTY(number) { editKey = 'F4'; caption = 'Номер'; font = 'bold 72'; }
        ADD PROPERTY(series) { minimumCharWidth = 3; caption = 'Серия'; font = 'bold 72'; }
    }
}

inputDiscountCardNumberReceipt 'Ввести номер' = ACTION (receipt) {
    FORM inputDiscountCardNumberReceipt MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL discountCard = DiscountCard();
        discountCard() <- discountCardString(CONCAT '', chosenString('s'), chosenString('n'));         
        IF discountCard() THEN {
            IF dateToDiscountCard(discountCard()) < dateReceipt(receipt) THEN
                MESSAGE 'Закончился срок действия карты'
            ELSE
                discountCardReceipt(receipt) <- discountCard();
        } ELSE
            MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
    }
} IN receiptDiscount EDITKEY 'F5';

clearDiscountCardReceipt 'Сбросить' = ACTION (receipt) {
    ASSIGN discountCardReceipt(receipt) <- NULL;
} IN receiptDiscount EDITKEY 'shift F5';

// Операции с Z-отчетами

openZReport 'Открыть Z-отчет' (cashRegister) = ACTION {
    FOR ADDOBJ z = ZReport DO {
        isPostedZReport(z) <- TRUE;
        numberZReport(z) <- STRING[255](z);
        cashRegisterZReport(z) <- cashRegister;
        departmentStoreZReport(z) <- departmentStoreCashRegister(cashRegister); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        zReportCashRegister(cashRegister) <- z;
        apply();
    }
} IN receiptZReport;

openCurrentZReport 'Открыть Z-отчет' = ACTION () {
    FOR ADDOBJ z = ZReport DO {
        isPostedZReport(z) <- TRUE;
        numberZReport(z) <- STRING[255](z);
        cashRegisterZReport(z) <- currentCashRegister();
        departmentStoreZReport(z) <- departmentStoreCashRegister(currentCashRegister()); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        zReportCashRegister(cashRegister) <- z WHERE cashRegister == currentCashRegister();
        apply();
    }
} CONFIRM IN receiptZReport;

overCloseZReport = ABSTRACT ACTION LIST (ZReport);

closeZReport 'Закрыть Z-отчет' (cashRegister) = ACTION {
    cancel();
    FOR z == zReportCashRegister(cashRegister) DO {
        timeZReport(z) <- currentTime();
        //dateZReport(z) <- currentDate();
        overCloseZReport(z);
    }
    zReportCashRegister(cashRegister) <- NULL;
    apply();
} CONFIRM IN receiptZReport;

closeCurrentZReport 'Закрыть Z-отчет' = ACTION () {
    cancel();
    timeZReport(z) <- currentTime() WHERE z == currentZReport();
    //dateZReport(z) <- currentDate() WHERE z == currentZReport();
    overCloseZReport(currentZReport());
    zReportCashRegister(cashRegister) <- NULL WHERE cashRegister == currentCashRegister();
    apply();
} CONFIRM IN receiptZReport;

// Форма POS-терминала

prevCurrentBalanceSkuReceipt (sku, receipt) = prevCurrentBalanceSkuStock(sku, departmentStoreReceipt(receipt));
prevCurrentBalanceSkuReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceSkuReceipt(skuReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));
prevCurrentBalanceSkuReceiptDetailStock 'Тек. остаток' (receiptDetail, stock) = prevCurrentBalanceSkuStock(skuReceiptDetail(receiptDetail), stock);

prevCurrentBalanceBatchReceipt (batch, receipt) = prevCurrentBalanceBatchStock(batch, departmentStoreReceipt(receipt));
prevCurrentBalanceBatchReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceBatchReceipt(batchReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

posExplicitBatchLedgerReceipt(r) = explicitBatchLedgerReceipt(r) AND currentZReport();
posNotExplicitBatchLedgerReceipt(r) = notExplicitBatchLedgerReceipt(r) AND currentZReport();

changeQuantityReceiptDetail 'Изменить кол-во строки чека' = ACTION (detail) {
    REQUEST NUMERIC[14,3] INPUT;
    IF requestedNumeric() THEN {
        quantityReceiptDetail(detail) <- requestedNumeric();
    } ELSE {
        DELETE detail; 
    }
}

backgroundReceiptDetail(r, d) = RGB(255, 128, 128) 
    IF (posNotExplicitBatchLedgerReceipt(r) AND prevCurrentBalanceSkuReceiptDetail(d) < quantityReceiptDetail(d)) OR 
       (posExplicitBatchLedgerReceipt(r) AND prevCurrentBalanceBatchReceiptDetail(d) < quantityReceiptDetail(d));

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetailReceipt, sumReceiptDetailReceipt,
                                          searchSkuSaleReceipt SHOWIF posNotExplicitBatchLedgerReceipt(r),
                                          searchBatchSaleReceipt SHOWIF posExplicitBatchLedgerReceipt(r),
                                          searchSkuReturnReceipt, scanBarcodeReturnReceipt,
                                          postReceipt, postCardReceipt, postCashReceipt, cancelReceipt,
                                          numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt,
                                          prevTotalSumReceipt, clearDiscountCardReceipt, fiscalSkipReceipt

    OBJECTS d = ReceiptDetail FIXED GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY FORCE GRID BACKGROUND backgroundReceiptDetail(r, d)  
                        indexReceiptDetail, typeReceiptDetail, idBarcodeGrid = idBarcodeReceiptDetail, nameSkuGrid = nameSkuReceiptDetail,
                        prevCurrentBalanceSkuReceiptDetail SHOWIF posNotExplicitBatchLedgerReceipt(r),
                        prevCurrentBalanceBatchReceiptDetail SHOWIF posExplicitBatchLedgerReceipt(r)
    PROPERTIES(d) SHOWIF currentZReport() FORCE GRID BACKGROUND backgroundReceiptDetail(r, d) 
                        quantityGrid = quantityReceiptDetail ON CHANGE changeQuantityReceiptDetail(d), priceGrid = priceReceiptDetail, sumGrid = sumReceiptDetail, discountPercentReceiptSaleDetail,
                        discountSumReceiptDetail, valueVATReceiptDetail, sumVATReceiptDetail//, numberVATReceiptDetail, , deleted=DELETESESSION
    PROPERTIES(d) SHOWIF currentZReport() READONLY FORCE PANEL BACKGROUND backgroundReceiptDetail(r, d) 
                        idBarcodePanel = idBarcodeReceiptDetail,
                        nameSkuPanel = nameSkuReceiptDetail,
                        quantityPanel = quantityReceiptDetail,
                        shortNameUOMSkuPanel = shortNameUOMSkuReceiptDetail,
                        pricePanel = priceReceiptDetail,
                        sumPanel = sumReceiptDetail
    PROPERTIES(d) SHOWIF currentZReport() FORCE PANEL BACKGROUND backgroundReceiptDetail(r, d) 
                        nameBatchPanel = nameBatchReceiptDetail ON CHANGE changeBatchReceiptDetail(d) SHOWIF posExplicitBatchLedgerReceipt(r)
    FILTERS receiptReceiptDetail(d) == r

    OBJECTS bs = STRING[15] FIXED PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = OBJVALUE ON CHANGE changeBarcodeSaleReceipt(r) EVENTID 'SCANNER'

    OBJECTS pc = PromotionCondition FIXED GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, namePromotionCondition, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pc) SHOWIF currentZReport()       quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition
    FILTERS quantityReceiptSaleDetailPromotionCondition(d, pc) AND NOT userSetPromotionCondition(pc)

    OBJECTS pcu = PromotionCondition FIXED GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, namePromotionCondition, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition, setUserPromotionReceiptSaleDetailPromotionCondition
    FILTERS userSetPromotionCondition(pcu) AND inReceiptSaleDetailPromotionCondition(d, pcu)

    PROPERTIES() fiscalPrintCopyReceipt READONLYIF fiscalSkipReceipt(r), fiscalAdvancePaper READONLYIF fiscalSkipReceipt(r), fiscalCutReceipt READONLYIF fiscalSkipReceipt(r)
    
    OBJECTS s = DepartmentStore FIXED GRID
    PROPERTIES(s) READONLY SHOWIF currentZReport() nameStoreDepartmentStore
    PROPERTIES READONLY SHOWIF currentZReport() prevCurrentBalanceSkuReceiptDetailStock(d, s)

    FILTERS accessCompanyEmployeeStock(currentUser(), s),
            prevCurrentBalanceSkuReceiptDetailStock(d, s)

    EVENTS
        ON INIT createCurrentReceipt()

;

DESIGN POS FROM DEFAULT {
    NEW north {
        type = CONTAINERH;
        alignment = STRETCH;

        ADD r.receiptSaleAction {
            type = CONTAINERV;
            alignment = STRETCH;
            ADD PROPERTY(searchSkuSaleReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22';}
            ADD PROPERTY(searchBatchSaleReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            ADD PROPERTY(barcodeSale) { caption = 'Ввести штрихкод'; panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 22'; editKey = 'F4'; }
        }
        ADD r.receiptReturnAction {
            type = CONTAINERV;
            alignment = STRETCH;
            ADD PROPERTY(searchSkuReturnReceipt(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
            ADD PROPERTY(scanBarcodeReturnReceipt(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
        }
        ADD r.receiptDiscount {
            fill = 1;
            type = CONTAINERV;
            ADD PROPERTY(nameLegalEntityDiscountCardReceipt(r)) { alignment = STRETCH; caption = 'Держатель'; focusable = FALSE; font = 'bold 22'; }
            NEW receiptDiscountRow2 {
                fill = 1;
                type = CONTAINERH;
                ADD PROPERTY(numberDiscountCardReceipt(r)) { alignment = STRETCH; caption = 'Номер'; focusable = FALSE; font = 'bold 22'; }
                ADD PROPERTY(prevTotalSumReceipt(r)) { alignment = STRETCH; caption = 'Сумма'; focusable = FALSE; font = 'bold 22'; }
                NEW receiptDiscountActions {
                    fill = 1;
                    type = CONTAINERH;
                    childrenAlignment = TRAILING;
                    ADD PROPERTY(clearDiscountCardReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 14'; }
                }
            }
        }
        ADD PROPERTY(closedCurrentZReportMessage()) {
            focusable = FALSE;
            font = '100';
            flex = 1;
        }
    }
    ADD d.box {
        fill = 1;
        PROPERTY(indexReceiptDetail(d)) { caption = '№'; focusable = FALSE; font = '18'; minimumCharWidth = 2; preferredCharWidth = 2;}
        PROPERTY(typeReceiptDetail(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
        PROPERTY(idBarcodeGrid) { focusable = FALSE; font = '18'; }
        PROPERTY(nameSkuGrid) { focusable = FALSE; font = '18'; minimumCharWidth = 20; }
        PROPERTY(prevCurrentBalanceSkuReceiptDetail(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
        PROPERTY(prevCurrentBalanceBatchReceiptDetail(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
        PROPERTY(quantityGrid) { caption = 'К-во'; font = '18'; minimumCharWidth = 2; preferredCharWidth = 3;}
        PROPERTY(priceGrid) { font = '18'; }
        PROPERTY(sumGrid) { font = '18'; }
        PROPERTY(discountPercentReceiptSaleDetail(d)) { font = '18'; minimumCharWidth = 3; preferredCharWidth = 4;}
        PROPERTY(discountSumReceiptDetail(d)) { font = '18'; }
//        PROPERTY(numberVATReceiptDetail(d)) { font = '18'; minimumCharWidth = 3; }
        PROPERTY(valueVATReceiptDetail(d)) { font = '18'; minimumCharWidth = 3; preferredCharWidth = 4;}
        PROPERTY(sumVATReceiptDetail(d)) { font = '18';}
//        PROPERTY(deleted) { focusable = FALSE; font = '18'; }
        REMOVE d.toolbar;
    }
    NEW center {
        alignment = STRETCH;
        type = CONTAINERH;
        NEW details {
            fill = 1;
            preferredSize = ( -1, 100);
            ADD d.panel {
                ADD PROPERTY(nameSkuPanel) {
                    alignment = STRETCH;
                    panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24';
                }
                ADD PROPERTY(nameBatchPanel) {
                    alignment = STRETCH;
                    panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24';
                }
                NEW skuDetail {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    ADD PROPERTY(idBarcodePanel) { panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24'; }
                    NEW priceDetail {
                        fill = 1;
                        type = CONTAINERH;
                        childrenAlignment = TRAILING;
                        ADD PROPERTY(quantityPanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24';
                            minimumCharWidth = 5;
                        }
                        ADD PROPERTY(shortNameUOMSkuPanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                        ADD PROPERTY(pricePanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                        ADD PROPERTY(sumPanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                    }
                }
            }
            NEW pane {
                fill = 1;
                type = TABBED;
                ADD pc.box {
                    REMOVE pc.toolbar;
                }
                ADD pcu.box {
                    caption = 'Возможные акции';
                    REMOVE pcu.toolbar;
                }
                ADD s.box{
                    caption = 'Остатки в других магазинах';
                }
            }
            NEW misc {
                type = CONTAINERH;
                alignment = STRETCH;
                ADD PROPERTY(formRefresh()) {
                    fill = 1;
                    focusable = FALSE;
                }
                NEW currentContainer {
                    alignment = STRETCH;
                    caption = 'Текущие значения';
                    ADD PROPERTY(hostnameCurrentComputer()) {
                        caption = 'Компьютер';
                        alignment = STRETCH;
                        focusable = FALSE;
                    }
                    NEW currentRow2 {
                        alignment = STRETCH;
                        type = CONTAINERH;
                        ADD PROPERTY(currentDateTime()) { caption = 'Время'; focusable = FALSE; }
                        ADD PROPERTY(currentUserName()) { caption = 'Пользователь'; focusable = FALSE; }
                    }
                }
                NEW actionsContainer {
                    caption = 'Действия с кассой';
                    type = CONTAINERH;
                    alignment = STRETCH;
                    ADD PROPERTY(fiscalSkipReceipt(r)) { alignment = STRETCH; panelLabelAbove = TRUE; };
                    ADD PROPERTY(fiscalPrintCopyReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    ADD PROPERTY(fiscalAdvancePaper()) { alignment = STRETCH; focusable = FALSE; }
                    ADD PROPERTY(fiscalCutReceipt()) { alignment = STRETCH; focusable = FALSE; }
                }
            }
        }
        NEW east {
            alignment = STRETCH;
            ADD r.receiptAction {
                type = CONTAINERV;
                alignment = STRETCH;
                ADD PROPERTY(postReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                ADD PROPERTY(postCardReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                ADD PROPERTY(postCashReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                ADD PROPERTY(cancelReceipt(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            }
            NEW receiptSums {
                alignment = STRETCH;
                caption = 'Итого';
                ADD PROPERTY(discountSumReceiptDetailReceipt(r)) { alignment = STRETCH; panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 48'; }
                ADD PROPERTY(sumReceiptDetailReceipt(r)) { alignment = STRETCH; panelLabelAbove = TRUE; focusable = FALSE; font = 'bold 48'; }
            }
        }
    }
    REMOVE functions.box CASCADE;
}

focusQuantityReceiptDetail() += ACTION FOCUS POS.quantityGrid;

recalculatedPriceReceipt 'Пересчитать цены чека' = ACTION (receipt){
    FOR receiptReceiptSaleDetail(detail) == receipt DO {
        IF posNotExplicitBatchLedgerReceipt(receipt) THEN 
            priceReceiptSaleDetail(detail) <- currentPOSPriceSkuReceipt(skuReceiptSaleDetail(detail), receipt)
        ELSE 
            priceReceiptSaleDetail(detail) <- currentPOSPriceBatchReceipt(batchReceiptSaleDetail(detail), receipt);        
    }
}

WHEN SESSION FORMS POS CHANGED(quantityReceiptDetailReceipt(receipt)) OR 
                       CHANGED(discountCardReceipt(receipt)) OR 
                       CHANGED(setUserPromotionReceipt(receipt)) OR 
                       CHANGED(discountPercentReceipt(receipt)) 
    DO calculatePromotionsReceipt(receipt);
    
WHEN SESSION FORMS POS CHANGED(quantityReceiptDetail(receiptDetail)) OR CHANGED(sumReceiptDetail(receiptDetail)) DO 
    fiscalDisplayTextReceiptDetail(receiptDetail);
    
WHEN SESSION FORMS POS CHANGED(discountCardReceipt(receipt)) DO EXEC recalculatedPriceReceipt(receipt);

NAVIGATOR {
    retailDashboardNavigator {
        ADD POS;
    }
}

// ----------------------------------------- Кассовые операции ---------------------------------------------- //
fiscalZReport 'Закрыть Z-отчёт' = ABSTRACT ACTION LIST () CONFIRM;
fiscalZReport() += ACTION IF NOT sidModelCurrentCashRegister() THEN closeCurrentZReport();

currentZReportDepartmentStore() = currentZReport() IF departmentStoreCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() IF departmentStoreCurrentCashRegister();

EXTEND FORM operationCashRegister
    PROPERTIES READONLY curSumCurrentCashRegister() TODRAW interval FORCE PANEL
    PROPERTIES() READONLY numberCurrentZReport SHOWIF departmentStoreCurrentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()
    
    PROPERTIES addIncomeCashOperationForm() TODRAW c FORCE PANEL TOOLBAR  SHOWIF currentZReportDepartmentStore()
    PROPERTIES addOutcomeCashOperationForm() TODRAW c FORCE PANEL TOOLBAR SHOWIF currentZReportDepartmentStore()

    OBJECTS z = ZReport
    PROPERTIES(z) READONLY isPostedZReport, numberZReport, dateZReport, timeZReport, nameDepartmentStoreZReport,
                           numberCashRegisterZReport, sumCashZReport, sumReceiptDetailZReport, basisZReport
    ORDER BY dateZReport(z), timeZReport(z)
    FILTERS dateZReport(z) >= dFrom,
            dateZReport(z) <= dTo,
            cashRegisterZReport(z) == currentCashRegister()
;

EXTEND DESIGN operationCashRegister {
    main {
        actions {
            ADD PROPERTY(fiscalZReport()) { font = '24'; }
            ADD PROPERTY(openCurrentZReport()) { font = '24'; };
            ADD PROPERTY(numberCurrentZReport()) { font = '24'; };
        }
        ADD z.box BEFORE functions.box;
    }
}

// Update data
fiscalUpdateData 'Загрузить информацию' = ABSTRACT ACTION LIST ();
fiscalUpdateDataShowIf = departmentStoreCurrentCashRegister() IF closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

EXTEND DESIGN operationCashRegister{
    actions {
        ADD PROPERTY(fiscalUpdateData()) BEFORE PROPERTY(fiscalXReport()) { font = '24'; }
    }
}