MODULE POS;

REQUIRE ZReportRetailCRM, ZReportRetailBonus, Dashboard, PaymentTerminal, CashOperationZReport;

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceList 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (GroupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceList
;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY(usePriceList(grc));
    }
}
overCopy(GroupCashRegister old, GroupCashRegister new ) += { usePriceList(new) <- usePriceList(old); } 

// ----------------------------- Кассовый модуль ---------------- //

fiscalSkip 'Отключить ФР' (receipt) = DATA BOOLEAN (Receipt);

EXTEND FORM zReports PROPERTIES(b) fiscalSkip;

POSPriceListType (Receipt receipt) = OVERRIDE priceListType(groupCashRegister(receipt)), priceListType(discountCard(receipt)) COMPLEX;

overPrice = ABSTRACT NUMERIC[16,4] (Sku, Receipt, DATETIME); 

usePriceList (Receipt receipt) = usePriceList(groupCashRegister(receipt)) COMPLEX; 
POSPrice 'Цена в кассе' (Sku sku, Receipt receipt, DATETIME dateTime) =
    IF usePriceList(receipt) THEN
        priceA(POSPriceListType(receipt), sku, departmentStore(receipt), dateTime)
    ELSE
        overPrice(sku, receipt, dateTime); 
currentPOSPrice 'Текущая цена' (Sku sku, Receipt receipt) = POSPrice(sku, receipt, currentDateTime());

POSPrice 'Цена в кассе' (Batch batch, Receipt receipt, DATETIME dateTime) =
    IF usePriceList(receipt) THEN
        priceA(POSPriceListType(receipt), batch, departmentStore(receipt), dateTime)
    ELSE
        overPrice(sku(batch), receipt, dateTime); 
currentPOSPrice 'Текущая цена' (Batch batch, Receipt receipt) = POSPrice(batch, receipt, currentDateTime());
currentPOSPrice 'Текущая цена' (Batch batch, ReceiptDetail receiptDetail) = POSPrice(batch, receipt(receiptDetail), currentDateTime());

zReport = DATA ZReport (CashRegister);
numberZReport 'Текущий Z-отчет' (CashRegister r) = number(zReport(r));

EXTEND FORM groupCashRegister
    PROPERTIES(c) numberZReport
;

GROUP receiptZReport 'Z-отчет' : public;

currentZReport() = zReport(currentCashRegister());
zReport(Receipt r) <- currentZReport() WHEN SET(r IS Receipt);

numberCurrentZReport 'Номер текущего Z-отчета' () = number(currentZReport()) IN receiptZReport;

closedCurrentZReport() = NOT currentZReport();

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы // Перенесены в модуль ZReportDiscountCard
//
//posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) PERSISTENT;
//posReturnSumDiscountCard 'Сумма возвратов' (discountCard) = GROUP SUM sumReceiptReturnDetail(d) IF NOT discountCardReceiptDetail(d) BY discountCardReceipt(receiptSaleReceiptReturnDetail(d)) PERSISTENT; 
//cumulativeSumDiscountCard 'Накопленная сумма (основная)' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) (-) posReturnSumDiscountCard(discountCard) PERSISTENT;
//
//externalSumDiscountCard 'Дополнительные накопления' (discountCard) = ABSTRACT NUMERIC[18,4] (DiscountCard) PERSISTENT;
//totalSumDiscountCard 'Накопленная сумма' (d) = cumulativeSumDiscountCard(d) (+) externalSumDiscountCard(d); 
//
//EXTEND FORM discountCards
//    PROPERTIES(d) READONLY AFTER initialSumDiscountCard(d) posSumDiscountCard, posReturnSumDiscountCard, cumulativeSumDiscountCard, externalSumDiscountCard, totalSumDiscountCard
//;
//
//prevTotalSumReceipt 'Накопленная сумма' (receipt) = OVERRIDE 0 IF receipt IS Receipt, [= PREV(totalSumDiscountCard(discountCard))](discountCardReceipt(receipt));
//totalSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN totalSumDiscountCard(discountCardReceipt(receipt))
//                                                                                         ELSE prevTotalSumReceipt (receipt);
// Расчет сумм скидок

setUserPromotion (receipt) = GROUP SUM 1 IF setUserPromotion (ReceiptSaleDetail receiptSaleDetail, PromotionCondition promotionCondition)  BY receipt (receiptSaleDetail);

promotionSum (detail) = GROUP SUM promotionSum(ReceiptSaleDetail detail, PromotionCondition condition)
                                               BY detail;

promotionDiscountSum (detail) = GROUP SUM promotionSum(ReceiptSaleDetail detail, PromotionCondition condition) IF NOT useBonus(condition)
                                               BY detail;
promotionBonusSum (detail) = GROUP SUM promotionSum(ReceiptSaleDetail detail, PromotionCondition condition) IF useBonus(condition)
                                               BY detail;

dataDate 'Дата документа' = DATA DATE (Receipt);
dataTime 'Время документа' = DATA TIME (Receipt);
dataDateTime 'Дата/время документа' (Receipt o) = dateTimeToDateTime(dataDate(o), dataTime(o));

overDate 'Дата документа' (Receipt r) = OVERRIDE date(r), dataDate(r);
overTime 'Время документа' (Receipt r) = OVERRIDE time(r), dataTime(r);
overDateTime 'Дата/время документа' (Receipt r) = OVERRIDE dateTime(r), dataDateTime(r);

overDate 'Дата документа' (ReceiptDetail d) = overDate(receipt(d));
overTime 'Время документа' (ReceiptDetail d) = overTime(receipt(d));
overDateTime 'Дата/время документа' (ReceiptDetail d) = overDateTime(receipt(d));

skip (Promotion promotion) = DATA LOCAL BOOLEAN (Promotion);
inCalc (Receipt receipt, Promotion promotion) = in(promotion, store(receipt)) AND
                                          overDate(receipt) >= dateFrom(promotion) AND overDate(receipt) <= dateTo(promotion) AND
                                          NOT time(receipt) < timeOfFrom(promotion) AND NOT time(receipt) > timeOfTo(promotion) AND
                                          NOT sumReceiptDetail(receipt) < minSumBill(promotion) AND NOT sumReceiptDetail(receipt) > maxSumBill(promotion)
                                          AND NOT skip(promotion, extractDOW(overDate(receipt)))
                                          AND NOT totalSum (receipt, promotion) < minCumulativeSum(promotion) AND NOT totalSum (receipt, promotion) > maxCumulativeSum(promotion)
                                          AND NOT (hasDiscountCard(promotion) AND NOT in(promotion, discountCard(receipt)))
                                          AND NOT (noDiscountCard(promotion) AND discountCard(receipt));

in (Receipt receipt, Promotion promotion) = inCalc(receipt, promotion) AND NOT skip(promotion);

inReceiptSale (ReceiptDetail receiptDetail, PromotionCondition promotionCondition) =
    in(receipt(receiptDetail), promotion(promotionCondition))
    AND in(promotionCondition, sku(receiptDetail));

//maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

isAppliedPromotion 'Акция применяется' (ReceiptSaleDetail receiptSaleDetail, PromotionCondition promotionCondition) =
    IF userSet(promotionCondition) THEN setUserPromotion(receiptSaleDetail, promotionCondition)
      ELSE receiptSaleDetail IS ReceiptSaleDetail AND promotionCondition IS PromotionCondition;

// оптимизация
possible = GROUP SUM 1 IF in(PromotionCondition promotionCondition, sku(ReceiptSaleDetail detail)) IF quantity(detail) BY receipt(detail), promotion(promotionCondition);

beforeCalculatePromotions = ACTION ABSTRACT LIST (Receipt);
overCalculatePromotions = ACTION ABSTRACT LIST (Receipt);
calculatePromotions 'Рассчитать акции'(Receipt receipt) = {

    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- NULL WHERE receipt(detail) == receipt;
    promotionSum(ReceiptSaleDetail detail, PromotionCondition condition) <- NULL WHERE receipt(detail) == receipt;
    discountSum(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == receipt;

//    LOCAL maxSalePriceSku = NUMERIC[16,4] (Sku);
//    maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    beforeCalculatePromotions(receipt);
    
    FOR PromotionGroup promotionGroup IS PromotionGroup AND active(promotionGroup) ORDER order (promotionGroup) DO {
//        LOCAL leftSku = NUMERIC[14,3] (Sku);
//        leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'

        LOCAL leftQuantity = NUMERIC[14,3] (ReceiptSaleDetail);
        leftQuantity(ReceiptSaleDetail detail) <- quantity(detail) WHERE receipt(detail) == receipt;

        LOCAL leftSum = NUMERIC[16,3] (ReceiptSaleDetail);
        leftSum(ReceiptSaleDetail detail) <- (priceSum(detail) (-) promotionSum(detail)) WHERE receipt(detail) == receipt;

        FOR promotionGroup(Promotion promotion) == promotionGroup AND in(receipt, promotion) AND possible(receipt, promotion) ORDER order(promotion) DO {
            LOCAL quantity = NUMERIC[14,3] (PromotionCondition);
            quantity(PromotionCondition promotionCondition) <- [= GROUP SUM leftQuantity(ReceiptSaleDetail detail)
                                                                         IF in(PromotionCondition promotionCondition, sku(detail))
                                                                     BY promotionCondition](promotionCondition) IF
                                                                        promotion(promotionCondition) == promotion;

            LOCAL sum = NUMERIC[14,3] (PromotionCondition);
            sum(PromotionCondition promotionCondition) <- [= GROUP SUM leftQuantity(ReceiptSaleDetail detail) * price(detail)
                                                                    IF in(PromotionCondition promotionCondition, sku(detail))
                                                                    BY promotionCondition](promotionCondition) IF
                                                                       promotion(promotionCondition) == promotion;

            LOCAL count = INTEGER (PromotionCondition);
            count(PromotionCondition promotionCondition) <- MIN divideInteger(quantity (promotionCondition), minQuantity (promotionCondition)),
                                                               divideInteger(sum(promotionCondition), minSum(promotionCondition));

            LOCAL countPromotion = INTEGER ();
            countPromotion () <- [= GROUP MIN count(PromotionCondition promotionCondition)]();

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND [= GROUP SUM 1 IF count(PromotionCondition promotionCondition) > 0]() == countPromotionCondition(promotion) THEN {
//
                // Считаем сколько раз должны применить условие
                LOCAL taken = NUMERIC[14,3] (PromotionCondition);
                taken(PromotionCondition promotionCondition) <- IF quantityDiscount(promotionCondition) THEN 
                                                                  min(countPromotion() * quantityDiscount(promotionCondition), quantity(promotionCondition))
                                                               ELSE
                                                                  quantity(promotionCondition);
                                                                  
                LOCAL use = NUMERIC[14,3] (PromotionCondition);
                IF useAllQuantity(promotion) THEN {
                    use(PromotionCondition promotionCondition) <- min(countPromotion() * minQuantity(promotionCondition), quantity(promotionCondition));
                }

                // Размазываем его по "Sku"
//                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (Sku, PromotionCondition);
//                takenSkuPromotionCondition(sku, promotionCondition) <- [= PARTITION UNGROUP takenPromotionCondition
//                                                                                  LIMIT leftSku (sku)
//                                                                                        IF inPromotionConditionSku(promotionCondition, sku)
//                                                                                  BY promotionCondition
//                                                                                  ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                // Размазываем его по строкам чека
                LOCAL taken = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                LOCAL use = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                
                CASE 
                    //-- начиная с самой дешевой и по умолчанию                                                                                  
                    WHEN orderPromotionType(promotion) == OrderPromotionType.ascending OR (promotion IS Promotion AND NOT orderPromotionType(promotion)) THEN {                                                                        
                               
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP taken
                                                                                                   LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                         IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                         AND isAppliedPromotion(detail, promotionCondition)
                                                                                                   BY promotionCondition
                                                                                                   ORDER leftSum(detail)/quantity(detail), detail](detail, condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP use
                                                                                                       LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                             IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                             AND isAppliedPromotion(detail, promotionCondition)
                                                                                                       BY promotionCondition
                                                                                                       ORDER leftSum(detail)/quantity(detail), detail](detail, condition);
                        }
                    }
                    //-- начиная с самой дорогой
                    WHEN orderPromotionType(promotion) == OrderPromotionType.descending  THEN {                
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP taken
                                                                                                   LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                         IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                         AND isAppliedPromotion(detail, promotionCondition)
                                                                                                   BY promotionCondition
                                                                                                   ORDER DESC leftSum(detail)/quantity(detail), detail](detail, condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP use
                                                                                                       LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                             IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                             AND isAppliedPromotion(detail, promotionCondition)
                                                                                                       BY promotionCondition
                                                                                                       ORDER DESC leftSum(detail)/quantity(detail), detail](detail, condition);
                        }
                    }                        
                    //-- по позиции в чеке
                    WHEN orderPromotionType(promotion) == OrderPromotionType.index THEN {   
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP taken
                                                                                                   LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                         IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                         AND isAppliedPromotion(detail, promotionCondition)
                                                                                                   BY promotionCondition
                                                                                                   ORDER detail](detail, condition);   
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP use
                                                                                                       LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                             IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                             AND isAppliedPromotion(detail, promotionCondition)
                                                                                                       BY promotionCondition
                                                                                                       ORDER detail](detail, condition);
                        }
                    }                                                                                        
                // Считаем сколько товара использовали из каждой строки чека
                LOCAL taken = NUMERIC[14,3] (ReceiptSaleDetail);
                IF useAllQuantity(promotion) THEN { 
                    taken(ReceiptSaleDetail detail) <- [= GROUP SUM use(ReceiptSaleDetail detail, PromotionCondition condition) BY detail](detail);
                } ELSE {
                    FOR promotion(PromotionCondition condition) == promotion AND PriceListType pt == priceListType(condition) NOINLINE (pt) DO {
                        taken(ReceiptSaleDetail detail, condition) <- NULL WHERE priceListType(condition) == pt AND NOT priceA(pt, sku(detail), departmentStore(detail), overDateTime(detail)) != price(detail); 
                    }
                    taken(ReceiptSaleDetail detail) <- [= GROUP SUM taken(ReceiptSaleDetail detail, PromotionCondition condition) BY detail](detail);
                }

                // Считаем сколько использовали каждый товар
//                LOCAL takenSku = NUMERIC[14,3] (Sku);
//                takenSku(sku) <- [= GROUP SUM takenReceiptSaleDetail(detail) BY skuReceiptSaleDetail(detail)] (sku);

                IF useAllQuantity(promotion) THEN
                    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- use(detail, condition)
                        WHERE use(detail, condition);
                ELSE
                    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- taken(detail, condition)
                        WHERE taken(detail, condition);


                // считаем остатки суммы по скидки на чек
                LOCAL leftSum = NUMERIC[16,3] (PromotionCondition);
                leftSum(PromotionCondition c) <- [= GROUP SUM leftSum(ReceiptSaleDetail detail) * taken(detail, PromotionCondition condition) / leftQuantity(detail) BY condition](c) - sumReceipt(c) * count(c);
                leftSum(PromotionCondition c) <- NULL WHERE leftSum(c) <= 0.0;

                promotionSum (ReceiptSaleDetail detail, PromotionCondition condition) <-
                    PARTITION UNGROUP leftSum
                            PROPORTION STRICT ROUND(2) leftSum(detail) IF taken(detail, condition)
                            BY condition
                            ORDER detail
                    WHERE taken(detail, condition) AND sumReceipt(condition);

                promotionSum (ReceiptSaleDetail detail, PromotionCondition condition) <-
                    CASE WHEN sumDiscount(condition) THEN taken(detail, condition) * sumDiscount(condition)
                         WHEN resultPrice(condition, sku(detail)) THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) - resultPrice(condition, sku(detail)))
                         WHEN resultPrice(condition) THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) - resultPrice(condition))
                         WHEN priceListType(condition) THEN taken(detail, condition) * (price(detail) - priceA(priceListType(condition), sku(detail), departmentStore(detail), overDateTime(detail)))
                         WHEN condition IS PromotionCondition THEN taken(detail, condition) * ((leftSum(detail) (-) (bonusPaid(detail) IF useBonus(condition))) / quantity(detail) * percent(condition) / 100)
                    WHERE taken(detail, condition) AND NOT sumReceipt(condition);

                // Отнимаем использованные
                leftQuantity(ReceiptSaleDetail detail) <- leftQuantity(detail) (-) taken(detail);
//                leftSku(sku) <- leftSku(sku) (-) takenSku(sku);
            }
        }
    }

    discountSum(ReceiptSaleDetail detail) <- round(promotionDiscountSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == receipt;
    discountSum(ReceiptSaleDetail detail) <- calcDiscountSum(detail) WHERE detail IS ReceiptSaleDetail AND receipt(detail) == receipt AND discountPercent(detail) AND NOT promotionSum(detail);

    IF useBonus() THEN
        bonusSum(ReceiptSaleDetail detail) <- round(promotionBonusSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == receipt;
        
    overCalculatePromotions(receipt);
}

WHEN SESSION FORMS zReport
    CHANGED(discountCard(Receipt r)) DO {
        calculatePromotions(r);
//        bonusSum(ReceiptSaleDetail detail) <- round(promotionBonusSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == r AND useBonus();    
        bonusSum(ReceiptReturnDetail detail) <- bonusSum(overReceiptSaleDetail(detail)) WHERE receipt(detail) == r AND useBonus();    
    }

// Операции с чеками
 
createCurrentReceipt 'Создать новый чек'() = {
    FOR NEW r = Receipt DO {
        seek(r);
        number(r) <- maxNumberReceipt(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayText 'Вывести текст на дисплей'(receiptDetail) = ACTION ABSTRACT LIST (ReceiptDetail);

//Отмена чека

fiscalCancel 'Отменить чек' = ACTION ABSTRACT LIST(Receipt);

// Проведение чека

GROUP receiptAction 'Оплата' : public;

postPrint 'Напечатать фискальный чек' = ACTION ABSTRACT LIST (Receipt);
noFiscalPostPrint 'Создать чек (без фискального регистратора)'(Receipt receipt) = {
    IF receipt IS Receipt THEN {
        apply();
        IF NOT canceled() THEN
            createCurrentReceipt();
    }
}
postPrint(Receipt receipt) += { IF NOT sidCashRegisterModel(receipt) THEN noFiscalPostPrint(receipt); }

// Оплата через платежный терминал
paymentTerminalModel (Receipt receipt) = paymentTerminalModel(cashRegister(receipt));
sidPaymentTerminalModel 'Код модели' (Receipt receipt) = sid(paymentTerminalModel(receipt));

postPaymentTerminal 'Оплата через платёжный терминал' = ACTION ABSTRACT LIST (Receipt);
postPaymentTerminalReceiptResult = DATA LOCAL VARSTRING[100] (); 

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) READONLY sumReceiptDetail, changePayment

    OBJECTS p = Payment GRID
    PROPERTIES(p) sum, namePaymentType READONLY
    FILTERS receipt(p) == r
;

DESIGN postReceiptPayment {

    MOVE p.box {
        fill = 1;
        p.grid {
            defaultComponent = TRUE;
        }
        PROPERTY(sum(p)) { pattern = '#,##0.00'; font = 'bold 36'; }
        PROPERTY(namePaymentType(p)) { focusable = FALSE; font = 'bold 36'; }
        REMOVE p.toolbar;
    }
    NEW south {
        alignment = STRETCH;
        type = CONTAINERH;
        MOVE PROPERTY(sumReceiptDetail(r)) { pattern = '#,##0.00'; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 72'; }
        MOVE PROPERTY(changePayment(r)) { pattern = '#,##0.00'; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 72'; }
        MOVE rightControls {
            fill = 1;
            type = CONTAINERV;
            PROPERTY(formOk()) {
                fill = 1;
                font = 'bold 28';
            }
            PROPERTY(formClose()) {
                fill = 1;
                font = 'bold 28';
            }
        }
    }
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

allowPaymentGiftCard = DATA LOCAL BOOLEAN();

prePost(Receipt receipt) = {
    allowPaymentGiftCard() <- TRUE;
    DELETE Payment payment WHERE receipt(payment) == receipt;
    date(receipt) <- currentDate();
    time(receipt) <- currentTime();
}

incorrectReceipt = ABSTRACT CASE TEXT (Receipt);

post 'Смешанный платеж'(Receipt receipt) = {
    IF (bonusPaid(receipt) OR bonusSum(receipt)) AND NOT discountCard(receipt) AND NOT [=GROUP SUM 1 IF discountCard(ReceiptReturnDetail d) BY receipt(d)](receipt) THEN {
        MESSAGE 'Выберите дисконтную карту';      
        RETURN;   
    } 
    IF signedBonusPaid(receipt) AND NOT (OVERRIDE 0.0, totalBonuses(receipt)) >= signedBonusPaid(receipt) THEN { 
        MESSAGE 'Нельзя оплачивать бонусами больше, чем доступно бонусов на дисконтной карте';      
        RETURN;
    } 
    IF incorrectReceipt(receipt) THEN {
        MESSAGE incorrectReceipt(receipt);
        RETURN;
    } 
    prePost(receipt);
    IF sumReceiptDetail(receipt) THEN {
        FOR NEW p = Payment DO {
            receipt(p) <- receipt;
            paymentType(p) <- minCashPaymentType();
        }
        FOR NEW p = Payment DO {
            receipt(p) <- receipt;
            paymentType(p) <- minCardPaymentType();
        }
        LOCAL printed = BOOLEAN();
        printed() <- NULL;
        DIALOG postReceiptPayment OBJECTS r = receipt CHECK DO {
            postPaymentTerminal(receipt);
            IF NOT postPaymentTerminalReceiptResult() THEN {
                postPrint(receipt);
                printed() <- TRUE;
            } ELSE {
                MESSAGE postPaymentTerminalReceiptResult();
            }
        } 
        IF NOT printed() THEN {
            DELETE Payment p WHERE receipt(p) == receipt;
        }
    } 
} EDITKEY 'F9' IN receiptAction;

postCard 'Карточкой'(Receipt receipt) = {
    IF (bonusPaid(receipt) OR bonusSum(receipt)) AND NOT discountCard(receipt) AND NOT [=GROUP SUM 1 IF discountCard(ReceiptReturnDetail d) BY receipt(d)](receipt) THEN {
        MESSAGE 'Выберите дисконтную карту';      
        RETURN;   
    } 
    IF signedBonusPaid(receipt) > 0 AND NOT (OVERRIDE 0.0, totalBonuses(receipt)) >= signedBonusPaid(receipt) THEN { 
        MESSAGE 'Нельзя оплачивать бонусами больше, чем доступно бонусов на дисконтной карте';    
        RETURN;
    } 
    IF incorrectReceipt(receipt) THEN {
        MESSAGE incorrectReceipt(receipt);
        RETURN;
    }
     
    prePost(receipt);
    IF sumReceiptDetail(receipt) THEN {
        FOR NEW p = Payment DO {
            ASSIGN receipt(p) <- receipt;
            ASSIGN paymentType(p) <- minCardPaymentType();
            ASSIGN sum(p) <- sumReceiptDetail(receipt);
        }
        postPaymentTerminal(receipt);
        IF NOT postPaymentTerminalReceiptResult() THEN {
            postPrint(receipt);
        } ELSE {
            MESSAGE postPaymentTerminalReceiptResult();
        }
    }
        
} EDITKEY 'F10' CONFIRM IN receiptAction;

postCash 'Наличными'(Receipt receipt) = {
    IF (bonusPaid(receipt) OR bonusSum(receipt)) AND NOT discountCard(receipt) AND NOT [=GROUP SUM 1 IF discountCard(ReceiptReturnDetail d) BY receipt(d)](receipt) THEN {
        MESSAGE 'Выберите дисконтную карту';      
        RETURN;   
    } 
    IF signedBonusPaid(receipt) AND NOT (OVERRIDE 0.0, totalBonuses(receipt)) >= signedBonusPaid(receipt) THEN { 
        MESSAGE 'Нельзя оплачивать бонусами больше, чем доступно бонусов на дисконтной карте';      
        RETURN;
    }
    IF incorrectReceipt(receipt) THEN {
        MESSAGE incorrectReceipt(receipt);
        RETURN;
    } 
    
    prePost(receipt);
    IF sumReceiptDetail(receipt) THEN {
        FOR NEW p = Payment DO {
            receipt(p) <- receipt;
            paymentType(p) <- minCashPaymentType();
            sum(p) <- sumReceiptDetail(receipt);
        }
        LOCAL printed = BOOLEAN();
        printed() <- NULL;
        DIALOG postReceiptPayment OBJECTS r = receipt CHECK DO {
            postPrint(receipt);
            printed() <- TRUE;
        }
        IF NOT printed() THEN
            DELETE Payment p WHERE receipt(p) == receipt;
    }  
} EDITKEY 'F11' IN receiptAction;

//Оплата бонусами

toPayBonuses 'Оплатить бонусами' = DATA LOCAL NUMERIC[18,4] (Receipt);

changeToPayBonuses (Receipt r) = {
    INPUTX n = NUMERIC[18,4] DO
        IF n THEN {
            bonusPaid(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == r;
            CASE WHEN n < 0.0 THEN 
                    MESSAGE 'Сумма бонусов не может быть отрицательной';
                 WHEN sumReceiptDetail(r) (-) minBonusSum() * countReceiptDetail(r) < round(n, roundCondition(departmentStore(r))) THEN
                    MESSAGE 'Сумма бонусов должна быть меньше или ровна сумме чека';                 
                 WHEN NOT round(n, roundCondition(departmentStore(r))) <= prevTotalBonuses(discountCard(r)) THEN
                    MESSAGE 'Сумма используемых бонусов не может превышать суммы накопленных';
                 ELSE toPayBonuses(r) <- round(n, roundCondition(departmentStore(r)));
        } ELSE {
            toPayBonuses(r) <- NULL;
        } 
}

sumBonusFIFOReceiptSaleDetail (ReceiptSaleDetail detail) =
    PARTITION UNGROUP toPayBonuses
        PROPORTION STRICT ROUND(2) min((sum(detail) (-) minBonusSum()), ((sum(detail) (-) minBonusSum())/(sumReceiptDetail(detail) (-) minBonusSum()*countReceiptDetail(receipt(detail))))) 
        BY receipt(detail)
        ORDER detail; 
//    PARTITION UNGROUP toPayBonuses
//        LIMIT min((sum(detail) (-) minBonusSum()), round(toPayBonuses(receipt(detail)) * sum(detail) / sumReceiptDetail(detail), roundCondition(departmentStore(receipt(detail)))))
//        BY receipt(detail)
//        ORDER detail; 

bonusBackground (DiscountCard d) = RGB(255,128,128) IF NOT totalBonuses(d) >= 0.0;

FORM bonusPayment 'Оплата бонусами'
    OBJECTS r = Receipt PANEL 
    PROPERTIES(r) toPayBonuses ON CHANGE changeToPayBonuses(r)
        
    OBJECTS d = DiscountCard PANEL 
    PROPERTIES(d) READONLY BACKGROUND bonusBackground(d) prevTotalBonuses TODRAW r 
;

DESIGN bonusPayment {
    NEW topContainer {
        type = CONTAINERH;
        MOVE PROPERTY(toPayBonuses(r)){
            pattern = '#,##0.00';
            font = 'bold 48';
            panelCaptionAbove = TRUE;
        }  
        MOVE PROPERTY(prevTotalBonuses(d)){
            pattern = '#,##0.00';
            font = 'bold 48';
            panelCaptionAbove = TRUE;        
        }          
    }
    REMOVE d.box;
    MOVE functions.box;
}

overPostBonus = ACTION ABSTRACT (Receipt); 

postBonus 'Бонусами'(Receipt receipt) = {
    IF sumReceiptDetail(receipt) AND countReceiptDetail(receipt) AND NOT countReceiptReturnDetail(receipt) THEN {
        DIALOG bonusPayment OBJECTS d = discountCard(receipt), r = receipt DO {
            bonusPaid(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == receipt;
            bonusPaid(ReceiptSaleDetail detail) <- sumBonusFIFOReceiptSaleDetail(detail) WHERE receipt(detail) == receipt;        
            overPostBonus(receipt);        
        }
    }
} EDITKEY 'F8' IN receiptAction;

resetBoard 'Сбросить текст на дисплее' = ACTION ABSTRACT LIST(Receipt);

cancel 'Обнулить чек'(Receipt receipt) = {
    resetBoard(receipt);
    IF sumReceiptDetail(receipt) OR quantityReceiptDetail(receipt) THEN {
        cancel();
        createCurrentReceipt();
    }
    fiscalCancel(receipt);
} EDITKEY 'shift F11' CONFIRM IN receiptAction;

// Операции по добавлению строк в чек

// Продажи
FORM chooseBatchReceipt 'Выбор партии'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS d = ReceiptDetail PANEL

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY dateTime, documentNameSku, name
    PROPERTIES(bt, st) READONLY prevCurrentBalance
    PROPERTIES(bt, d) READONLY currentPOSPrice
    ORDER BY dateTime(bt) DESC
    FILTERS sku(bt) == sku(d),
            currentPOSPrice(bt, d)
    FILTERGROUP balance
        FILTER 'Партии с остатком' prevCurrentBalance(bt, st) 'F10' DEFAULT 
        
;

overChangeBatch = ACTION ABSTRACT LIST (ReceiptDetail);

changeBatch 'Изменить партию строки чека'(ReceiptDetail detail) = {
    IF explicitBatchLedger(receipt(detail)) THEN {
        DIALOG chooseBatchReceipt OBJECTS st = departmentStore(detail), d = detail, bt = batch(detail) INPUT NULL DO{
            batch(detail) <- bt;
            price[ReceiptSaleDetail](detail) <- currentPOSPrice[Batch,Receipt](bt, receipt(detail));
        }
        overChangeBatch(detail);
    }
}

focusQuantity = ACTION ABSTRACT LIST (ReceiptDetail); 

createSaleDetail 'Добавить строку продажи'(Receipt receipt, Batch batch, VARSTRING[30] barcode) = {
    FOR NEW d = ReceiptSaleDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        sku(d) <- sku(batch);
        quantity(d) <- 1.0;
//        VATReceiptSaleDetail(d) <- VATSkuStockDate(skuBatch(batch), departmentStoreReceipt(receipt), currentDate());
        batch(d) <- batch;
        price(d) <- currentPOSPrice(batch, receipt);
        focusQuantity(d);
    }
}

countBatch (sk, st, r) = GROUP SUM 1 
                                                  IF (currentBalance(Batch batch, Stock stock) (-) 
                                                      [= GROUP SUM quantity(ReceiptSaleDetail d) 
                                                              BY batch(d), receipt(d)] (batch, Receipt receipt)) > 0
                                              BY sku(batch), stock, receipt; 
defaultBatch 'Партия по умолчанию' (sku, stock, receipt) = 
    GROUP MIN Batch batch IF (currentBalance(batch, Stock stock) (-)
                        [= GROUP SUM quantity(ReceiptSaleDetail d) 
                                 BY batch(d), receipt(d)] (batch, Receipt receipt)) > 0
          BY sku(batch), stock, receipt; 

createSaleDetail 'Добавить строку продажи'(Receipt receipt, Sku sku, VARSTRING[30] barcode) = {
    FOR NEW d = ReceiptSaleDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        sku(d) <- sku;
        quantity(d) <- 1.0;
        price(d) <- currentPOSPrice(sku, receipt);
//        VATReceiptSaleDetail(d) <- VATSkuStockDate(sku, departmentStoreReceipt(receipt), currentDate());
        focusQuantity(d);
        IF explicitBatchLedger(receipt(d)) AND
            countBatch(sku(d), departmentStore(receipt(d)), receipt) == 1 THEN {
                batch(d) <- defaultBatch(sku(d), departmentStore(receipt(d)), receipt);
                price(d) <- currentPOSPrice(batch(d), receipt[ReceiptDetail](d));
            } ELSE IF explicitBatchLedger(receipt(d)) THEN {
                LOCAL created = BOOLEAN();
                created() <- NULL;
                DIALOG chooseBatchReceipt OBJECTS st = departmentStore[ReceiptDetail](d), d = d, bt INPUT DO {
                    batch(d) <- bt;
                    price(d) <- currentPOSPrice[Batch,Receipt](bt, receipt[ReceiptDetail](d));
                    calculatePromotions(receipt);
                    created() <- TRUE;
                }
                IF NOT created() THEN
                    DELETE d;
            }
        overChangeBatch(d);    
    }
}

GROUP receiptSaleAction 'Продажа' : public;

// По штрихкоду
consumedChangeBarcodeSaleReceipt = DATA LOCAL BOOLEAN();
preProcessBarcode = ACTION ABSTRACT LIST (VARSTRING[30], Receipt);
overChangeBarcodeSale = ACTION ABSTRACT LIST FIRST (VARSTRING[30], Receipt);

changeBarcodeSale(Receipt receipt) = {
    INPUTX s = VARSTRING[30] DO {
        consumedChangeBarcodeSaleReceipt() <- NULL;
        LOCAL barcode = VARSTRING[30] ();
        barcode() <- processedBarcode(s);
        preProcessBarcode(barcode(), receipt);
        overChangeBarcodeSale(barcode(), receipt);
        IF NOT consumedChangeBarcodeSaleReceipt() THEN{
            LOCAL dialogBarcodeSku = Sku();
            dialogBarcodeSku() <- skuBarcode(barcode(), currentDate());
            IF dialogBarcodeSku() IS Sku THEN {
                IF active(dialogBarcodeSku()) THEN {
                    createSaleDetail(receipt, dialogBarcodeSku(), barcode());
                } ELSE {
                    MESSAGE CONCAT ' ', name(dialogBarcodeSku()), '(' + barcode() + ')', ' запрещен к продаже';
                }
                
            } ELSE
                MESSAGE CONCAT ' ', 'Не найден штрихкод', barcode(), '(' + s + ')';
        }
    }
}

overFilterSearch = ABSTRACT BOOLEAN (Sku, Stock);

filterSearchSale = prevCurrentBalance(Sku s, Stock st) 
            OR (currentPOSPrice(s, Receipt r) AND skuType[Item](s) == SkuType.skuTypeCharge)
            OR overFilterSearch(s, st);
            
// Поиск подбором SKU
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS r = Receipt PANEL

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY skuTreeName = name(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS           s = Sku GRID
    PROPERTIES        READONLY name(s)
    PROPERTIES(s, st) READONLY prevCurrentBalance
    PROPERTIES(s, r)  READONLY currentPOSPrice    
    PROPERTIES        READONLY idBarcode(s)
    FILTERS           isParent(sk, s),
                      name(s)
    ORDER BY          name(s)

    FILTERGROUP filters
        FILTER 'Доступные для продажи' filterSearchSale(s, st, r) 'F10' DEFAULT
        
    FILTERGROUP inactiveSku FILTER 'Активные' active(s) 'F11' DEFAULT

;

DESIGN searchSkuSaleReceipt {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            NEW itemImage {               
                fill = 1;
                type = SPLITV;
                MOVE skuTree.tree.box { caption = 'Группы'; }               
            }            
            MOVE s.box {
                fill = 4;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(name(s)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 40;}
            PROPERTY(prevCurrentBalance(s, st)) { font = '16'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPOSPrice(s, r)) { font = '16'; }
            PROPERTY(idBarcode(s)) { font = '16'; minimumCharWidth = 14; preferredCharWidth = 14;}
        }
    }
}

searchSkuSale 'Поиск'(Receipt receipt) = {
    DIALOG searchSkuSaleReceipt OBJECTS st = departmentStore(receipt), r = receipt, s INPUT DO {
        createSaleDetail[Receipt,Sku,STRING[15]](receipt, s, idBarcode[Sku](s));
    }
} EDITKEY 'F3' IN receiptSaleAction;

// Поиск подбором Batch
FORM searchBatchSaleReceipt 'Поиск партии'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS r = Receipt PANEL

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY skuTreeName = name(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS           b = Batch GRID
    PROPERTIES        READONLY documentNameSku(b)
    
    PROPERTIES(b, st) READONLY prevCurrentBalance
    PROPERTIES(b, r)  READONLY currentPOSPrice
        
    PROPERTIES        READONLY idBarcodeSku(b), name(b)
    FILTERS           isParent(sk, sku(b))
    ORDER BY          documentNameSku(b)

    FILTERGROUP filters
        FILTER 'Партии с остатком' prevCurrentBalance(b, st) 'F10' DEFAULT
        FILTER 'Партии с движением' countLedger(b, st) 'F9'

;

DESIGN searchBatchSaleReceipt {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box { caption = 'Группы'; }
            MOVE b.box {
                fill = 4;
                b.grid {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(documentNameSku(b)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 40;}
            PROPERTY(prevCurrentBalance(b, st)) { font = '16'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPOSPrice(b, r)) { font = '16'; }
            PROPERTY(idBarcodeSku(b)) { font = '16'; minimumCharWidth = 14; preferredCharWidth = 14;}
            PROPERTY(name(b)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 30;}           
        }
    }
}

searchBatchSale 'Поиск'(Receipt receipt) = {
    DIALOG searchBatchSaleReceipt OBJECTS st = departmentStore(receipt), r = receipt, b INPUT DO {
        createSaleDetail[Receipt,Batch,STRING[15]](receipt, b, idBarcodeSku[Batch](b));
    }
} EDITKEY 'F3' IN receiptSaleAction;


// Возвраты

allReceiptReturn 'Возврат чека целиком' = DATA BOOLEAN ();
selectiveReturn = TRUE AND NOT allReceiptReturn();

EXTEND FORM options 
    PROPERTIES () allReceiptReturn 
;
DESIGN options {
    pane {
        NEW pos {
            caption = 'POS';
            type = CONTAINERV;
            MOVE PROPERTY (allReceiptReturn());
        }
    }    
}

createReturn 'Добавить строку возврата'(Receipt receipt, ReceiptSaleDetail receiptSaleDetail, VARSTRING[30] barcode) = {
    FOR NEW d = ReceiptReturnDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        receiptSaleDetail(d) <- receiptSaleDetail;
        sku(d) <- sku(receiptSaleDetail);
        quantity(d) <- 1.0;
        price(d) <- price(receiptSaleDetail);
        VAT(d) <- VAT(receiptSaleDetail);
        batch(d) <- batch(receiptSaleDetail);
        discountCard(receipt) <- discountCard(receiptSaleDetail);
        focusQuantity(d);
    }
}
overCreateReturn = ACTION ABSTRACT LIST (ReceiptReturnDetail, ReceiptSaleDetail);
createReturn 'Добавить строки возврата'(Receipt receipt, Receipt receiptReturn) = {
    FOR receipt(ReceiptSaleDetail receiptSaleDetail) == receiptReturn NEW d = ReceiptReturnDetail DO {
        receipt(d) <- receipt;        
        idBarcode(d) <- idBarcode(sku(receiptSaleDetail));        
        receiptSaleDetail(d) <- receiptSaleDetail;
        sku(d) <- sku(receiptSaleDetail);
        quantity(d) <- quantity(receiptSaleDetail);
        price(d) <- price(receiptSaleDetail);
        VAT(d) <- VAT(receiptSaleDetail);
        batch(d) <- batch(receiptSaleDetail);
        discountCard(receipt) <- discountCard(receiptSaleDetail);        
        overCreateReturn(d,receiptSaleDetail);
    }
}

GROUP receiptReturnAction 'Возврат' : public;

// По штрихкоду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = DepartmentStore PANEL

    OBJECTS s = Sku PANEL
    PROPERTIES idBarcode(s) READONLY, name(s)

    OBJECTS r = ReceiptSaleDetail GRID
    PROPERTIES(r) READONLY numberReceipt, dateTime, nameBatch SHOWIF explicitBatchLedger(d),
                           numberDiscountCard, nameLegalEntityDiscountCard, sumReceiptDetail, sumCashPayment, sumCardPayment,
                           index, quantity[ReceiptDetail], quantityReturned, price[ReceiptDetail],
                           sum[ReceiptDetail], discountPercent , discountSum[ReceiptDetail]
    FILTERS departmentStore(r) == d,
            sku(r) == s
            
    FILTERGROUP filter
        FILTER 'Невозвращенные'  quantity[ReceiptDetail](r) (-) quantityReturned(r) > 0.0 DEFAULT             
;

DESIGN scanBarcodeReturnReceipt {
    PROPERTY(idBarcode(s)) {
        focusable = FALSE;
    }
    PROPERTY(name(s)) {
        focusable = FALSE;
    }
}

forbidNullSaleDetail 'Запретить возврат не по чеку' = DATA BOOLEAN (); 

EXTEND FORM options
    PROPERTIES () forbidNullSaleDetail
;
    
DESIGN options {
    pos {
        MOVE PROPERTY(forbidNullSaleDetail());
    }    
}   

scanBarcodeReturn 'Ввести штрихкод'(Receipt receipt) = {
    DIALOG barcodeInput DO {
        LOCAL dialogBarcodeSku = Sku();
        dialogBarcodeSku() <- skuBarcode(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {
            LOCAL created = BOOLEAN();
            created() <- NULL;
            DIALOG scanBarcodeReturnReceipt OBJECTS d = departmentStore(receipt), s = dialogBarcodeSku(), r INPUT DO {
                createReturn(receipt, r, barcodeInput());
                created() <- TRUE;
            }
            IF NOT created() THEN {
                IF NOT forbidNullSaleDetail() THEN {                        
                    FOR NEW d = ReceiptReturnDetail DO {
                        receipt(d) <- receipt;
                        idBarcode(d) <- barcodeInput();
                        sku(d) <- dialogBarcodeSku();
                        quantity(d) <- 1.0;
                        price(d) <- currentPOSPrice(dialogBarcodeSku(), receipt);
                        VAT(d) <- VAT(dialogBarcodeSku(), departmentStore(receipt));
                        focusQuantity(d);
                        IF explicitBatchLedger(receipt) THEN {
                            created() <- NULL;
                            DIALOG chooseBatchReceipt OBJECTS st = departmentStore[ReceiptDetail](d), d = d, bt INPUT DO{
                                batch(d) <- bt;
                                price(d) <- currentPOSPrice[Batch,Receipt](bt, receipt[ReceiptDetail](d));
                                created() <- TRUE;
                            }
                            IF NOT created() THEN
                                DELETE d;
                        }
                    }
                } ELSE {
                    MESSAGE 'Выберите чек для возврата';
                }
            }
        } ELSE
            MESSAGE CONCAT ' ', 'Не найден штрихкод', barcodeInput();
    }
} EDITKEY 'F7' IN receiptReturnAction;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS c = CashRegister PANEL

    OBJECTS s = Receipt GRID LAST 
    PROPERTIES(s) READONLY  number, date, time, nameEmployee,
                            numberDiscountCard, nameLegalEntityDiscountCard, sumReceiptDetail, discountSumReceiptDetail,
                            countReceiptDetail, quantityReceiptDetail
    FILTERS departmentStore(s) == st,
            countReceiptSaleDetail(s) 

    OBJECTS r = ReceiptSaleDetail GRID
    PROPERTIES(r) READONLY  idBarcode, nameSku[ReceiptDetail], nameBatch SHOWIF explicitBatchLedger(st),
                            quantity[ReceiptDetail], quantityReturned, price[ReceiptDetail],
                            sum[ReceiptDetail], discountPercent, discountSum[ReceiptDetail]
    PROPERTIES(r) READONLY SHOWIF useBonus() bonusPaid, bonusSum                            
    FILTERS receipt(r) == s
    FILTERGROUP filter
        FILTER 'Невозвращенные' quantity[ReceiptDetail](r) (-) quantityReturned(r) > 0.0 DEFAULT           
;
DESIGN searchSkuReturnReceipt {
    preferredSize = (1024, 768);
}

createReturn (Receipt receipt, Receipt receiptReturn, ReceiptSaleDetail d) = {
    IF receiptReturn IS Receipt AND d IS ReceiptSaleDetail THEN {
        IF selectiveReturn() THEN {        
            createReturn(receipt, d, idBarcode(sku[ReceiptSaleDetail](d)));
        } ELSE {
            createReturn(receipt, receiptReturn);
        }
    }
}

searchSkuReturn 'Поиск'(Receipt receipt) = {
    DIALOG searchSkuReturnReceipt OBJECTS st = departmentStore(receipt), c = cashRegister(receipt), s INPUT, r INPUT DO
        createReturn(receipt, s, r);
} EDITKEY 'F6' IN receiptReturnAction;

// Дисконтные карты

overChangeBarcodeDiscountCard(VARSTRING[30] string, Receipt receipt) = {
    IF discountString(string) AND receipt IS Receipt AND string IS VARSTRING[30] AND NOT consumedChangeBarcodeSaleReceipt() THEN {
        IF dateTo(discountString(string)) < date(receipt) THEN
            MESSAGE 'Закончился срок действия карты';
        ELSE
            discountCard(receipt) <- discountString(string); 
            consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(VARSTRING[30] string, Receipt receipt) += { overChangeBarcodeDiscountCard(string, receipt); }

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = VARSTRING[28], s = STRING[2]) PANEL
    PROPERTIES number = VALUE(n), series = VALUE(s)
;

DESIGN inputDiscountCardNumberReceipt {
    NEW centerContainer BEFORE functions.box {
        type = CONTAINERH;
        MOVE PROPERTY(number) { editKey = 'F4'; caption = 'Номер'; font = 'bold 72'; }
        MOVE PROPERTY(series) { minimumCharWidth = 3; caption = 'Серия'; font = 'bold 72'; }
    }
}

inputDiscountCardNumber 'Ввести номер'(Receipt receipt) = {
    DIALOG inputDiscountCardNumberReceipt OBJECTS s INPUT, n INPUT DO {
        LOCAL discountCard = DiscountCard();
        discountCard() <- discountString(CONCAT '', s, n);         
        IF discountCard() THEN {
            IF dateTo(discountCard()) < date(receipt) THEN
                MESSAGE 'Закончился срок действия карты';
            ELSE
                discountCard(receipt) <- discountCard();
        } ELSE
            MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
    }
} IN receiptDiscount EDITKEY 'F5';

clearDiscountCard 'Сбросить'(Receipt receipt) = {
    ASSIGN discountCard(receipt) <- NULL;
} IN receiptDiscount EDITKEY 'shift F5';

// Операции с Z-отчетами

openZReport 'Открыть Z-отчет' (CashRegister cashRegister) = {
    FOR NEW z = ZReport DO {
        isPosted(z) <- TRUE;
        number(z) <- STRING[255](z);
        cashRegister(z) <- cashRegister;
        departmentStore(z) <- departmentStore(cashRegister); // todo : приходится ставить из-за того, что на NEW срабатывает resolveAdd
        zReport(cashRegister) <- z;
        apply();
    }
} IN receiptZReport;

fiscalOpenZReport 'Открыть Z-отчет' () = ACTION ABSTRACT LIST ();

openCurrentZReport 'Открыть Z-отчет'() = {
    FOR NEW z = ZReport DO {
        isPosted(z) <- TRUE;
        number(z) <- STRING[255](z);
        cashRegister(z) <- currentCashRegister();
        departmentStore(z) <- departmentStore(currentCashRegister()); // todo : приходится ставить из-за того, что на NEW срабатывает resolveAdd
        zReport(CashRegister cashRegister) <- z WHERE cashRegister == currentCashRegister();
        apply();
    }
    fiscalOpenZReport();
} CONFIRM IN receiptZReport;

overClose = ACTION ABSTRACT LIST (ZReport);

closeZReport 'Закрыть Z-отчет' (CashRegister cashRegister) = {
    cancel();
    FOR ZReport z == zReport(cashRegister) DO {
        time(z) <- currentTime();
        //dateZReport(z) <- currentDate();
        overClose(z);
    }
    zReport(cashRegister) <- NULL;
    apply();
} CONFIRM IN receiptZReport;

closeCurrentZReport 'Закрыть Z-отчет'() = {
    cancel();
    time(ZReport z) <- currentTime() WHERE z == currentZReport();
    //dateZReport(z) <- currentDate() WHERE z == currentZReport();
    overClose(currentZReport());
    zReport(CashRegister cashRegister) <- NULL WHERE cashRegister == currentCashRegister();
    apply();
} CONFIRM IN receiptZReport;

// Форма POS-терминала

prevCurrentBalance (Sku sku, Receipt receipt) = prevCurrentBalance(sku, departmentStore(receipt));
prevCurrentBalanceSku 'Тек. остаток' (ReceiptDetail receiptDetail) = prevCurrentBalance(sku(receiptDetail), receipt(receiptDetail));
prevCurrentBalanceSku 'Тек. остаток' (ReceiptDetail receiptDetail, Stock stock) = prevCurrentBalance(sku(receiptDetail), stock);

prevCurrentBalance 'Тек. остаток' (Batch batch, Receipt receipt) = prevCurrentBalance(batch, departmentStore(receipt));
prevCurrentBalanceBatch 'Тек. остаток' (ReceiptDetail receiptDetail) = prevCurrentBalance(batch(receiptDetail), receipt(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

posExplicitBatchLedger(Receipt r) = explicitBatchLedger(r) AND currentZReport();
posNotExplicitBatchLedger(Receipt r) = notExplicitBatchLedger(r) AND currentZReport();

changeQuantity 'Изменить кол-во строки чека'(ReceiptDetail detail) = {
    INPUTX n = NUMERIC[16,5] DO
        IF n THEN
            quantity(detail) <- n;
        ELSE
            DELETE detail; 
}

notBackgroundPOS 'Не подсвечивать форму POS' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notBackgroundPOS
;
DESIGN options {
    pos {
        MOVE PROPERTY (notBackgroundPOS());
    }  
}

//background(Receipt r, ReceiptDetail d) = RGB(255, 128, 128) 
//    IF ((posNotExplicitBatchLedger(r) AND prevCurrentBalanceSku(d) < quantity(d)) OR 
//       (posExplicitBatchLedger(r) AND prevCurrentBalanceBatch(d) < quantity(d))) AND NOT notBackgroundPOS();
       
background = ABSTRACT VALUE OVERRIDE FIRST COLOR (Receipt, ReceiptSaleDetail);
background(Receipt r, ReceiptSaleDetail d) += RGB(255, 128, 128) IF d IS ReceiptSaleDetail AND ((posNotExplicitBatchLedger(r) AND NOT prevCurrentBalanceSku(d) >= quantity(d)) OR 
                                                 (posExplicitBatchLedger(r) AND NOT prevCurrentBalanceBatch(d) >= quantity(d))) AND NOT notBackgroundPOS();
                                                 
currentZReportUseBonus() = currentZReport() AND useBonus();

bonusBackground (Receipt r) = RGB(255,128,128) IF totalBonuses(r) < 0.0 OR (bonusPaid(r) AND NOT bonusPaid(r) <= totalBonuses(r));

changeBonusPaid (ReceiptDetail d) = {
    INPUTX n = NUMERIC[18,4] DO 
        IF n THEN {
            CASE WHEN n < 0.0 THEN 
                    MESSAGE 'Сумма бонусов не может быть отрицательной';
                 WHEN sum(d) < round(n, roundCondition(departmentStore(d))) THEN
                    MESSAGE 'Сумма бонусов должна быть меньше или равна сумме строки чека';         
                 WHEN sum(d) (-) minBonusSum() < round(n, roundCondition(departmentStore(d))) THEN
                    MESSAGE 'Сумма платежа по строке чека должна быть больше минимальной';                                       
                 ELSE bonusPaid(d) <- round(n, roundCondition(departmentStore(d)));        
        } ELSE {
            bonusPaid(d) <- NULL;
        }  
}

//задание акций кассиром для всего чека

setUserPromotionReceipt 'Применить скидку для всего чека' (Receipt receipt, PromotionCondition pc) = {
    setUserPromotion(ReceiptSaleDetail detail, pc) <- TRUE WHERE receipt(detail) == receipt;
}

dropUserPromotionReceipt 'Сбросить скидку для всего чека' (Receipt receipt, PromotionCondition pc) = {
    setUserPromotion(ReceiptSaleDetail detail, pc) <- NULL WHERE receipt(detail) == receipt;
}

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = Receipt PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetail, sumReceiptDetail,
                                          searchSkuSale SHOWIF posNotExplicitBatchLedger(r),
                                          searchBatchSale SHOWIF posExplicitBatchLedger(r),
                                          searchSkuReturn, scanBarcodeReturn,
                                          post, postCard, postCash, postBonus SHOWIF useBonus(), cancel,
                                          clearDiscountCard, fiscalSkip
    PROPERTIES SHOWIF currentZReport() transferDiscountCards() TODRAW r TOOLBAR  
    PROPERTIES(r) READONLY SHOWIF currentZReport() numberDiscountCard, nameLegalEntityDiscountCard, prevTotalSum, bonusPaid BACKGROUND bonusBackground(r) SHOWIF useBonus()
    PROPERTIES(r) READONLY SHOWIF currentZReportUseBonus() BACKGROUND bonusBackground(r) totalBonuses AFTER prevTotalSum(r)                                       

    OBJECTS d = ReceiptDetail GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY BACKGROUND background(r, d)  
                        index, type, idBarcodeGrid = idBarcode, nameSkuGrid = nameSku,
                        prevCurrentBalanceSku SHOWIF posNotExplicitBatchLedger(r),
                        prevCurrentBalanceBatch SHOWIF posExplicitBatchLedger(r)
    PROPERTIES(d) SHOWIF currentZReport() BACKGROUND background(r, d) 
                        quantityGrid = quantity ON CHANGE changeQuantity(d), priceGrid = price, sumGrid = sum, discountPercent,
                        discountSum, valueVAT, calcSumVAT//, numberVATReceiptDetail, , deleted=DELETESESSION
    PROPERTIES(d) SHOWIF currentZReport() READONLY PANEL BACKGROUND background(r, d) 
                        idBarcodePanel = idBarcode,
                        nameSkuPanel = nameSku,
                        quantityPanel = quantity,
                        shortNameUOMSkuPanel = shortNameUOMSku,
                        pricePanel = price,
                        sumPanel = sum
    PROPERTIES(d) SHOWIF currentZReportUseBonus() BACKGROUND background(r, d) bonusPaid ON CHANGE changeBonusPaid(d) READONLYIF is[ReceiptReturnDetail](d), bonusSum READONLY                        
    PROPERTIES(d) SHOWIF currentZReport() PANEL BACKGROUND background(r, d) 
                        nameBatchPanel = nameBatch ON CHANGE changeBatch(d) SHOWIF posExplicitBatchLedger(r)
    FILTERS receipt(d) == r

    OBJECTS bs = VARSTRING[30] PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = VALUE ON CHANGE changeBarcodeSale(r) EVENTID 'SCANNER'

    OBJECTS pc = PromotionCondition GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pc) SHOWIF currentZReport() quantity, promotionSum
    FILTERS quantity(d, pc) AND NOT userSet(pc)

    OBJECTS pcu = PromotionCondition GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantity, promotionSum, setUserPromotion ON SHORTCUT setUserPromotionReceipt(r, pcu) ON SHORTCUT dropUserPromotionReceipt(r, pcu) 
    FILTERS userSet(pcu) AND inReceiptSale(d, pcu)

    PROPERTIES() fiscalPrintCopyReceipt READONLYIF fiscalSkip(r), fiscalAdvancePaper READONLYIF fiscalSkip(r), 
    fiscalCutReceipt READONLYIF fiscalSkip(r), fiscalCashSum READONLYIF fiscalSkip(r)
    
    OBJECTS s = DepartmentStore GRID
    PROPERTIES(s) READONLY SHOWIF currentZReport() nameStore
    PROPERTIES READONLY SHOWIF currentZReport() prevCurrentBalanceSku(d, s)

    FILTERS accessCompany(currentUser(), s),
            prevCurrentBalanceSku(d, s)

    EVENTS
        ON INIT createCurrentReceipt()

;

DESIGN POS {
    NEW north {
        type = CONTAINERH;
        alignment = STRETCH;

        MOVE r.receiptSaleAction {
            type = CONTAINERV;
            alignment = STRETCH;
            MOVE PROPERTY(searchSkuSale(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22';}
            MOVE PROPERTY(searchBatchSale(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            MOVE PROPERTY(barcodeSale) { caption = 'Ввести штрихкод'; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 22'; editKey = 'F4'; }
        }
        MOVE r.receiptReturnAction {
            type = CONTAINERV;
            alignment = STRETCH;
            MOVE PROPERTY(searchSkuReturn(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
            MOVE PROPERTY(scanBarcodeReturn(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
        }
        MOVE r.receiptDiscount {
            fill = 1;
            type = CONTAINERV;
            MOVE PROPERTY(nameLegalEntityDiscountCard(r)) { alignment = STRETCH; caption = 'Держатель'; focusable = FALSE; font = 'bold 22'; }
            NEW receiptDiscountRow2 {
                fill = 1;
                type = CONTAINERH;
                MOVE PROPERTY(numberDiscountCard(r)) { alignment = STRETCH; caption = 'Номер'; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(prevTotalSum(r)) { alignment = STRETCH; caption = 'Сумма'; focusable = FALSE; font = 'bold 22'; pattern = '#,##0.00'; }
                MOVE PROPERTY(totalBonuses(r)) { alignment = STRETCH; caption = 'Доступно бонусов'; focusable = FALSE; font = 'bold 22'; pattern = '#,##0.00'; }
            }
            NEW receiptDiscountRow3 {
                fill = 1;
                type = CONTAINERH;
                MOVE PROPERTY(clearDiscountCard(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }             
                MOVE PROPERTY(transferDiscountCards()) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }             
            }
        }
        MOVE PROPERTY(closedCurrentZReportMessage()) {
            focusable = FALSE;
            font = '100';
            flex = 1;
        }
    }
    MOVE d.box {
        fill = 1;
        PROPERTY(index(d)) { caption = '№'; focusable = FALSE; font = '18'; minimumCharWidth = 2; preferredCharWidth = 2;}
        PROPERTY(type(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
        PROPERTY(idBarcodeGrid) { focusable = FALSE; font = '18'; }
        PROPERTY(nameSkuGrid) { focusable = FALSE; font = '18'; minimumCharWidth = 20; }
        PROPERTY(prevCurrentBalanceSku(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
        PROPERTY(prevCurrentBalanceBatch(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
        PROPERTY(quantityGrid) { caption = 'К-во'; font = '18'; minimumCharWidth = 2; preferredCharWidth = 5;}
        PROPERTY(priceGrid) { font = '18'; pattern = '#,##0.00'; }
        PROPERTY(sumGrid) { font = '18'; pattern = '#,##0.00'; }
        PROPERTY(discountPercent(d)) { font = '18'; minimumCharWidth = 3; preferredCharWidth = 4;}
        PROPERTY(discountSum(d)) { font = '18'; pattern = '#,##0.00'; }
//        PROPERTY(numberVATReceiptDetail(d)) { font = '18'; minimumCharWidth = 3; }
        PROPERTY(valueVAT(d)) { font = '18'; minimumCharWidth = 3; preferredCharWidth = 4;}
        PROPERTY(calcSumVAT(d)) { font = '18'; pattern = '#,##0.00';}
        PROPERTY(bonusPaid(d)) { font = '18'; pattern = '#,##0.00';}
        PROPERTY(bonusSum(d)) { font = '18'; pattern = '#,##0.00';}
//        PROPERTY(deleted) { focusable = FALSE; font = '18'; }
        REMOVE d.toolbar;
    }
    NEW center {
        alignment = STRETCH;
        type = CONTAINERH;
        NEW imageContainer;        
        NEW details {
            fill = 1;
            preferredSize = ( -1, 100);
            MOVE d.panel {
                MOVE PROPERTY(nameSkuPanel) {
                    alignment = STRETCH;
                    panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                }
                MOVE PROPERTY(nameBatchPanel) {
                    alignment = STRETCH;
                    panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                }
                NEW skuDetail {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(idBarcodePanel) { panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24'; }
                    NEW priceDetail {
                        fill = 1;
                        type = CONTAINERH;
                        childrenAlignment = TRAILING;
                        MOVE PROPERTY(quantityPanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                            minimumCharWidth = 5;
                        }
                        MOVE PROPERTY(shortNameUOMSkuPanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                        MOVE PROPERTY(pricePanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24'; pattern = '#,##0.00';
                        }
                        MOVE PROPERTY(sumPanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24'; pattern = '#,##0.00';
                        }
                    }
                }
            }
            d.filter {
                visible = FALSE; 
            }
            NEW pane {
                fill = 1;
                type = TABBED;
                MOVE pc.box {
                    REMOVE pc.toolbar;
                    PROPERTY(promotionSum(d, pc)) {pattern = '#,##0.00';}                    
                }
                MOVE pcu.box {
                    caption = 'Возможные акции';
                    REMOVE pcu.toolbar;
                    PROPERTY(promotionSum(d, pcu)) {pattern = '#,##0.00';}
                }
                MOVE s.box{
                    caption = 'Остатки в других магазинах';
                }
            }
            NEW misc {
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(formRefresh()) {
                    fill = 1;
                    focusable = FALSE;
                }
                NEW currentContainer {
                    alignment = STRETCH;
                    caption = 'Текущие значения';
                    MOVE PROPERTY(hostnameCurrentComputer()) {
                        caption = 'Компьютер';
                        alignment = STRETCH;
                        focusable = FALSE;
                    }
                    NEW currentRow2 {
                        alignment = STRETCH;
                        type = CONTAINERH;
                        MOVE PROPERTY(currentDateTime()) { caption = 'Время'; focusable = FALSE; }
                        MOVE PROPERTY(currentUserName()) { caption = 'Пользователь'; focusable = FALSE; }
                    }
                }
                NEW actionsContainer {
                    caption = 'Действия с кассой';
                    type = CONTAINERH;
                    alignment = STRETCH;
                    MOVE PROPERTY(fiscalSkip(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; };
                    MOVE PROPERTY(fiscalPrintCopyReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalAdvancePaper()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalCutReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalCashSum()) { alignment = STRETCH; focusable = FALSE; }
                }
            }
        }
        NEW east {
            alignment = STRETCH;
            MOVE r.receiptAction {
                type = CONTAINERV;
                alignment = STRETCH;
                MOVE PROPERTY(postBonus(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(post(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(postCard(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(postCash(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(cancel(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            }
            NEW receiptSums {
                alignment = STRETCH;
                caption = 'Итого';
                MOVE PROPERTY(bonusPaid(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 32'; pattern = '#,##0.00';}
                MOVE PROPERTY(discountSumReceiptDetail(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 32'; pattern = '#,##0.00';}
                MOVE PROPERTY(sumReceiptDetail(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 32'; pattern = '#,##0.00';}
            }
        }
    }
    REMOVE functions.box;
}

focusQuantity(ReceiptDetail d) += {
    FOCUS POS.quantityGrid;
    SEEK POS.d = d;
};

recalculatedPrice 'Пересчитать цены чека'(Receipt receipt) = {
    FOR receipt(ReceiptSaleDetail detail) == receipt DO {
        IF posNotExplicitBatchLedger(receipt) THEN 
            price(detail) <- currentPOSPrice(sku(detail), receipt);
        ELSE 
            price(detail) <- currentPOSPrice(batch(detail), receipt);        
    }
}

WHEN SESSION FORMS POS CHANGED(quantityReceiptDetail(Receipt receipt)) OR 
                       CHANGED(discountCard(receipt)) OR 
                       CHANGED(setUserPromotion(receipt)) OR 
                       CHANGED(discountPercent(receipt)) OR
                       CHANGED(signedBonusPaid(receipt))
    DO calculatePromotions(receipt);
    
WHEN SESSION FORMS POS CHANGED(quantity(ReceiptDetail receiptDetail)) OR CHANGED(sum(receiptDetail)) DO 
    fiscalDisplayText(receiptDetail);
    
WHEN SESSION FORMS POS CHANGED(discountCard(Receipt receipt)) DO recalculatedPrice(receipt);

WHEN SESSION FORMS POS CHANGED(VAT(ReceiptDetail d)) OR CHANGED(date(d)) OR CHANGED (batch(d)) DO {
    valueVAT(d) <- overValueVAT(d);
}

NAVIGATOR {
    retailDashboardNavigator {
        ADD POS;
    }
}

onlyPossitivePriceReceipDetail 'Требовать, что бы цены в строке чека были больше ноля' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () onlyPossitivePriceReceipDetail
;
DESIGN options {
    pos {
        MOVE PROPERTY (onlyPossitivePriceReceipDetail());
    }  
}

CONSTRAINT onlyPossitivePriceReceipDetail() AND ReceiptDetail detail IS ReceiptDetail AND NOT price(detail) > 0.0
    MESSAGE 'Цена для строки чека должна быть задана и быть больше 0';

// ----------------------------------------- Кассовые операции ---------------------------------------------- //
fiscalZReport 'Закрыть Z-отчёт' = ACTION ABSTRACT LIST () CONFIRM;
fiscalZReport() += { IF NOT sidModelCurrentCashRegister() THEN closeCurrentZReport(); }

currentZReportDepartmentStore() = currentZReport() IF departmentStoreCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() IF departmentStoreCurrentCashRegister();

EXTEND FORM operationCashRegister
    PROPERTIES READONLY curSumCurrentCashRegister() TODRAW interval 
    PROPERTIES() READONLY numberCurrentZReport SHOWIF departmentStoreCurrentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()
    
    PROPERTIES addIncomeCashOperationForm() TODRAW c TOOLBAR  SHOWIF currentZReportDepartmentStore()
    PROPERTIES addOutcomeCashOperationForm() TODRAW c TOOLBAR SHOWIF currentZReportDepartmentStore()

    OBJECTS z = ZReport
    PROPERTIES(z) READONLY isPosted, number, date, time, nameDepartmentStore,
                           overNumberCashRegister, sumCash, sumReceiptDetail, basis
    ORDER BY date(z), time(z)
    FILTERS date(z) >= dFrom,
            date(z) <= dTo,
            cashRegister(z) == currentCashRegister()
;

DESIGN operationCashRegister {
    main {
        actions {
            MOVE PROPERTY(fiscalZReport()) { font = '24'; }
            MOVE PROPERTY(openCurrentZReport()) { font = '24'; };
            MOVE PROPERTY(numberCurrentZReport()) { font = '24'; };
        }
        MOVE z.box BEFORE functions.box;
    }
}

// Update data
fiscalUpdateData 'Загрузить информацию' = ACTION ABSTRACT LIST ();
fiscalUpdateDataShowIf = departmentStoreCurrentCashRegister() IF closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

DESIGN operationCashRegister{
    actions {
        MOVE PROPERTY(fiscalUpdateData()) BEFORE PROPERTY(fiscalXReport()) { font = '24'; }
    }
}

//-- 
changeUserPromotion(ReceiptSaleDetail d, PromotionCondition pcu)= {
    INPUTX b = BOOLEAN DO {
        setUserPromotion(d, pcu) <- b;
        quantity(d, pcu) <- quantity(d) IF b;
    }
}

EXTEND FORM zReport

    OBJECTS pcu = PromotionCondition GRID
    PROPERTIES(pcu) READONLY  namePromotion, name, dateFrom, 
                    dateTo, percent
    PROPERTIES(d, pcu)  quantity,
                    promotionSum, 
                    setUserPromotion ON CHANGE changeUserPromotion(d, pcu)
    FILTERS userSet(pcu) AND inReceiptSale(d, pcu)
;

DESIGN zReport {
    secondCase{
        NEW prom AFTER d.box {
            fill = 1;
            type = TABBED;
            MOVE p.box;
            MOVE pcu.box {
                PROPERTY (namePromotion(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}
                PROPERTY (name(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}
            }
        }
    }
}

EXTEND FORM zReports

    OBJECTS pcu = PromotionCondition GRID
    PROPERTIES(pcu) READONLY  namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pcu) READONLY  quantity, promotionSum, setUserPromotion
    FILTERS quantity(d, pcu)
;

DESIGN zReports {
    secondCase{
        NEW prom AFTER d.box {
            fill = 1;
            type = TABBED;
            MOVE p.box;
            MOVE pcu.box {
                caption = 'Условия акции, задаваемые кассиром';
                PROPERTY (namePromotion(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}
                PROPERTY (name(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}                
            }
        }
    }
}

// ограничение на максимальную сумму чека

maxSumPaymentReceipt 'Максимальная сумма платежа по чеку' = DATA NUMERIC[18,4] ();

EXTEND FORM options 
    PROPERTIES () maxSumPaymentReceipt 
;
DESIGN options {
    pane {
        pos {
            MOVE PROPERTY (maxSumPaymentReceipt());
        }
    }    
}

CONSTRAINT maxSumPaymentReceipt() AND sumPayment(Receipt r) > maxSumPaymentReceipt() AND date(r) >= 2016_07_01 
    MESSAGE 'Нельзя вводить сумму платежа по чеку больше разрешенной';