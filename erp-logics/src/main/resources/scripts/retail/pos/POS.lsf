MODULE POS;

REQUIRE ZReportRetailCRM, Dashboard, PaymentTerminal, CashOperationZReport;

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceList 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (GroupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceList
;

// ----------------------------- Кассовый модуль ---------------- //

fiscalSkip 'Отключить ФР' (receipt) = DATA BOOLEAN (Receipt);

EXTEND FORM zReports PROPERTIES(b) fiscalSkip;

POSPriceListType (Receipt receipt) = OVERRIDE priceListType(groupCashRegister(receipt)), priceListType(discountCard(receipt));

overPrice = ABSTRACT NUMERIC[14,2] (Sku, Receipt, DATETIME); 

POSPrice 'Цена в кассе' (Sku sku, Receipt receipt, DATETIME dateTime) =
    IF usePriceList(groupCashRegister(receipt)) THEN
        priceA(POSPriceListType(receipt), sku, departmentStore(receipt), dateTime)
    ELSE
        overPrice(sku, receipt, dateTime); 
currentPOSPrice 'Текущая цена' (Sku sku, Receipt receipt) = POSPrice(sku, receipt, currentDateTime());

POSPrice 'Цена в кассе' (Batch batch, Receipt receipt, DATETIME dateTime) =
    IF usePriceList(groupCashRegister(receipt)) THEN
        priceA(POSPriceListType(receipt), batch, departmentStore(receipt), dateTime)
    ELSE
        overPrice(sku(batch), receipt, dateTime); 
currentPOSPrice 'Текущая цена' (Batch batch, Receipt receipt) = POSPrice(batch, receipt, currentDateTime());
currentPOSPrice 'Текущая цена' (Batch batch, ReceiptDetail receiptDetail) = POSPrice(batch, receipt(receiptDetail), currentDateTime());

zReport = DATA ZReport (CashRegister);

GROUP receiptZReport 'Z-отчет' : public;

currentZReport() = zReport(currentCashRegister());
zReport(Receipt r) <- currentZReport() WHEN SET(r IS Receipt);

numberCurrentZReport 'Номер текущего Z-отчета' () = number(currentZReport()) IN receiptZReport;

closedCurrentZReport() = NOT currentZReport();

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы // Перенесены в модуль ZReportDiscountCard
//
//posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) PERSISTENT;
//posReturnSumDiscountCard 'Сумма возвратов' (discountCard) = GROUP SUM sumReceiptReturnDetail(d) IF NOT discountCardReceiptDetail(d) BY discountCardReceipt(receiptSaleReceiptReturnDetail(d)) PERSISTENT; 
//cumulativeSumDiscountCard 'Накопленная сумма (основная)' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) (-) posReturnSumDiscountCard(discountCard) PERSISTENT;
//
//externalSumDiscountCard 'Дополнительные накопления' (discountCard) = ABSTRACT NUMERIC[16,2] (DiscountCard) PERSISTENT;
//totalSumDiscountCard 'Накопленная сумма' (d) = cumulativeSumDiscountCard(d) (+) externalSumDiscountCard(d); 
//
//EXTEND FORM discountCards
//    PROPERTIES(d) READONLY AFTER initialSumDiscountCard(d) posSumDiscountCard, posReturnSumDiscountCard, cumulativeSumDiscountCard, externalSumDiscountCard, totalSumDiscountCard
//;
//
//prevTotalSumReceipt 'Накопленная сумма' (receipt) = OVERRIDE 0 IF receipt IS Receipt, [= PREV(totalSumDiscountCard(discountCard))](discountCardReceipt(receipt));
//totalSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN totalSumDiscountCard(discountCardReceipt(receipt))
//                                                                                         ELSE prevTotalSumReceipt (receipt);
// Расчет сумм скидок

setUserPromotion (receipt) = GROUP SUM 1 IF setUserPromotion (ReceiptSaleDetail receiptSaleDetail, PromotionCondition promotionCondition)  BY receipt (receiptSaleDetail);

promotionSum (detail) = GROUP SUM promotionSum(ReceiptSaleDetail detail, PromotionCondition condition)
                                               BY detail;

in (Receipt receipt, Promotion promotion) = in(promotion, store(receipt)) AND
                                          date(receipt) >= dateFrom(promotion) AND date(receipt) <= dateTo(promotion) AND
                                          NOT time(receipt) < timeOfFrom(promotion) AND NOT time(receipt) > timeOfTo(promotion) AND
                                          NOT sumReceiptDetail(receipt) < minSumBill(promotion) AND NOT sumReceiptDetail(receipt) > maxSumBill(promotion)
                                          AND NOT skip(promotion, extractDOW(date(receipt)))
                                          AND NOT totalSum (receipt, promotion) < minCumulativeSum(promotion) AND NOT totalSum (receipt, promotion) > maxCumulativeSum(promotion)
                                          AND NOT (hasDiscountCard(promotion) AND NOT in(promotion, discountCard(receipt)))
                                          AND NOT (noDiscountCard(promotion) AND discountCard(receipt));

inReceiptSale (ReceiptDetail receiptDetail, PromotionCondition promotionCondition) =
    in(receipt(receiptDetail), promotion(promotionCondition))
    AND in(promotionCondition, sku(receiptDetail));

//maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

isAppliedPromotion 'Акция применяется' (ReceiptSaleDetail receiptSaleDetail, PromotionCondition promotionCondition) =
    IF userSet(promotionCondition) THEN setUserPromotion(receiptSaleDetail, promotionCondition)
      ELSE receiptSaleDetail IS ReceiptSaleDetail AND promotionCondition IS PromotionCondition;

// оптимизация
possible = GROUP SUM 1 IF in(PromotionCondition promotionCondition, sku(ReceiptSaleDetail detail)) IF quantity(detail) BY receipt(detail), promotion(promotionCondition);

calculatePromotions 'Рассчитать акции' = ACTION (Receipt receipt) {

    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- NULL WHERE receipt(detail) == receipt;
    promotionSum(ReceiptSaleDetail detail, PromotionCondition condition) <- NULL WHERE receipt(detail) == receipt;
    discountSum(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == receipt;

//    LOCAL maxSalePriceSku = NUMERIC[14,2] (Sku);
//    maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    FOR PromotionGroup promotionGroup IS PromotionGroup DO {
//        LOCAL leftSku = NUMERIC[14,3] (Sku);
//        leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'

        LOCAL leftQuantity = NUMERIC[14,3] (ReceiptSaleDetail);
        leftQuantity(ReceiptSaleDetail detail) <- quantity(detail) WHERE receipt(detail) == receipt;

        LOCAL leftSum = NUMERIC[16,3] (ReceiptSaleDetail);
        leftSum(ReceiptSaleDetail detail) <- (priceSum(detail) (-) promotionSum(detail)) WHERE receipt(detail) == receipt;

        FOR promotionGroup(Promotion promotion) == promotionGroup AND in(receipt, promotion) AND possible(receipt, promotion) ORDER order(promotion) DO {
            LOCAL quantity = NUMERIC[14,3] (PromotionCondition);
            quantity(PromotionCondition promotionCondition) <- [= GROUP SUM leftQuantity(ReceiptSaleDetail detail)
                                                                         IF in(PromotionCondition promotionCondition, sku(detail))
                                                                     BY promotionCondition](promotionCondition) IF
                                                                        promotion(promotionCondition) == promotion;

            LOCAL sum = NUMERIC[14,3] (PromotionCondition);
            sum(PromotionCondition promotionCondition) <- [= GROUP SUM leftQuantity(ReceiptSaleDetail detail) * price(detail)
                                                                    IF in(PromotionCondition promotionCondition, sku(detail))
                                                                    BY promotionCondition](promotionCondition) IF
                                                                       promotion(promotionCondition) == promotion;

            LOCAL count = INTEGER (PromotionCondition);
            count(PromotionCondition promotionCondition) <- MIN divideInteger(quantity (promotionCondition), minQuantity (promotionCondition)),
                                                               divideInteger(sum(promotionCondition), minSum(promotionCondition));

            LOCAL countPromotion = INTEGER ();
            countPromotion () <- [= GROUP MIN count(PromotionCondition promotionCondition)]();

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND [= GROUP SUM 1 IF count(PromotionCondition promotionCondition) > 0]() == countPromotionCondition(promotion) THEN {
//
                // Считаем сколько раз должны применить условие
                LOCAL taken = NUMERIC[14,3] (PromotionCondition);
                taken(PromotionCondition promotionCondition) <- IF quantityDiscount(promotionCondition) THEN 
                                                                  min(countPromotion() * quantityDiscount(promotionCondition), quantity(promotionCondition))
                                                               ELSE
                                                                  quantity(promotionCondition);
                                                                  
                LOCAL use = NUMERIC[14,3] (PromotionCondition);
                IF useAllQuantity(promotion) THEN {
                    use(PromotionCondition promotionCondition) <- min(countPromotion() * minQuantity(promotionCondition), quantity(promotionCondition));
                }

                // Размазываем его по "Sku"
//                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (Sku, PromotionCondition);
//                takenSkuPromotionCondition(sku, promotionCondition) <- [= PARTITION UNGROUP takenPromotionCondition
//                                                                                  LIMIT leftSku (sku)
//                                                                                        IF inPromotionConditionSku(promotionCondition, sku)
//                                                                                  BY promotionCondition
//                                                                                  ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                // Размазываем его по строкам чека
                LOCAL taken = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                LOCAL use = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                
                CASE 
                    //-- начиная с самой дешевой и по умолчанию                                                                                  
                    WHEN orderPromotionType(promotion) == OrderPromotionType.ascending OR (promotion IS Promotion AND NOT orderPromotionType(promotion)) THEN {                                                                        
                               
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP taken
                                                                                                   LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                         IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                         AND isAppliedPromotion(detail, promotionCondition)
                                                                                                   BY promotionCondition
                                                                                                   ORDER  price(detail), detail](detail, condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP use
                                                                                                       LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                             IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                             AND isAppliedPromotion(detail, promotionCondition)
                                                                                                       BY promotionCondition
                                                                                                       ORDER price(detail), detail](detail, condition);
                        }
                    }
                    //-- начиная с самой дорогой
                    WHEN orderPromotionType(promotion) == OrderPromotionType.descending  THEN {                
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP taken
                                                                                                   LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                         IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                         AND isAppliedPromotion(detail, promotionCondition)
                                                                                                   BY promotionCondition
                                                                                                   ORDER DESC price(detail), detail](detail, condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP use
                                                                                                       LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                             IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                             AND isAppliedPromotion(detail, promotionCondition)
                                                                                                       BY promotionCondition
                                                                                                       ORDER DESC price(detail), detail](detail, condition);
                        }
                    }                        
                    //-- по позиции в чеке
                    WHEN orderPromotionType(promotion) == OrderPromotionType.index THEN {   
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP taken
                                                                                                   LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                         IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                         AND isAppliedPromotion(detail, promotionCondition)
                                                                                                   BY promotionCondition
                                                                                                   ORDER detail](detail, condition);   
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- [= PARTITION UNGROUP use
                                                                                                       LIMIT leftQuantity(ReceiptSaleDetail detail) 
                                                                                                             IF in(PromotionCondition promotionCondition, sku(detail))  
                                                                                                             AND isAppliedPromotion(detail, promotionCondition)
                                                                                                       BY promotionCondition
                                                                                                       ORDER detail](detail, condition);
                        }
                    }                                                                                        
                // Считаем сколько товара использовали из каждой строки чека
                LOCAL taken = NUMERIC[14,3] (ReceiptSaleDetail);
                IF useAllQuantity(promotion) THEN { 
                    taken(ReceiptSaleDetail detail) <- [= GROUP SUM use(ReceiptSaleDetail detail, PromotionCondition condition) BY detail](detail);
                } ELSE {
                    taken(ReceiptSaleDetail detail) <- [= GROUP SUM taken(ReceiptSaleDetail detail, PromotionCondition condition) BY detail](detail);
                }

                // Считаем сколько использовали каждый товар
//                LOCAL takenSku = NUMERIC[14,3] (Sku);
//                takenSku(sku) <- [= GROUP SUM takenReceiptSaleDetail(detail) BY skuReceiptSaleDetail(detail)] (sku);

                // Отнимаем использованные
                leftQuantity(ReceiptSaleDetail detail) <- leftQuantity(detail) (-) taken(detail);
//                leftSku(sku) <- leftSku(sku) (-) takenSku(sku);

                quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- taken(detail, condition)
                    WHERE taken(detail, condition);

                promotionSum (ReceiptSaleDetail detail, PromotionCondition condition) <-
                    CASE WHEN sumReceipt(condition) THEN taken(detail, condition) * (price(detail) (-) sumReceipt(condition) / quantityDiscount (condition))
                         WHEN sumDiscount(condition) THEN taken(detail, condition) * sumDiscount(condition)
                         WHEN resultPrice(condition, sku(detail)) THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) - resultPrice(condition, sku(detail)))
                         WHEN resultPrice(condition) THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) - resultPrice(condition))
                         WHEN priceListType(condition) THEN taken(detail, condition) * (price(detail) (-) priceA(priceListType(condition), sku(detail), departmentStore(detail), dateTime(detail)))
                         WHEN condition IS PromotionCondition THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) * percent(condition) / 100)
                    WHERE taken(detail, condition);
            }
        }
    }

    discountSum(ReceiptSaleDetail detail) <- round(promotionSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == receipt;
    discountSum(ReceiptSaleDetail detail) <- calcDiscountSum(detail) WHERE detail IS ReceiptSaleDetail AND receipt(detail) == receipt AND discountPercent(detail) AND NOT promotionSum(detail);
}

// Операции с чеками

createCurrentReceipt 'Создать новый чек' = ACTION () {
    FOR ADDOBJ r = Receipt DO {
        seek(r);
        number(r) <- maxNumberReceipt(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayText 'Вывести текст на дисплей'(receiptDetail) = ABSTRACT ACTION LIST (ReceiptDetail);

//Отмена чека

fiscalCancel 'Отменить чек' = ABSTRACT ACTION LIST(Receipt);

// Проведение чека

GROUP receiptAction 'Оплата' : public;

postPrint 'Напечатать фискальный чек' = ABSTRACT ACTION LIST (Receipt);
noFiscalPostPrint 'Создать чек (без фискального регистратора)' = ACTION (Receipt receipt) {
    IF receipt IS Receipt THEN {
        apply();
        IF NOT canceled() THEN
            createCurrentReceipt();
    }
}
postPrint(Receipt receipt) += ACTION IF NOT sidCashRegisterModel(receipt) THEN noFiscalPostPrint(receipt);

// Оплата через платежный терминал
paymentTerminalModel (Receipt receipt) = paymentTerminalModel(cashRegister(receipt));
sidPaymentTerminalModel 'Код модели' (Receipt receipt) = sid(paymentTerminalModel(receipt));

postPaymentTerminal 'Оплата через платёжный терминал' = ABSTRACT ACTION LIST (Receipt);
postPaymentTerminalReceiptResult = DATA LOCAL VARSTRING[100] (); 

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) READONLY sumReceiptDetail, changePayment

    OBJECTS p = Payment FIXED GRID
    PROPERTIES(p) sum, namePaymentType READONLY
    FILTERS receipt(p) == r
;

DESIGN postReceiptPayment {

    MOVE p.box {
        fill = 1;
        p.grid {
            defaultComponent = TRUE;
        }
        PROPERTY(sum(p)) { font = 'bold 36'; }
        PROPERTY(namePaymentType(p)) { focusable = FALSE; font = 'bold 36'; }
        REMOVE p.toolbar;
    }
    NEW south {
        alignment = STRETCH;
        type = CONTAINERH;
        MOVE PROPERTY(sumReceiptDetail(r)) { panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 72'; }
        MOVE PROPERTY(changePayment(r)) { panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 72'; }
        MOVE rightControls {
            fill = 1;
            type = CONTAINERV;
            PROPERTY(formOk()) {
                fill = 1;
                font = 'bold 28';
            }
            PROPERTY(formClose()) {
                fill = 1;
                font = 'bold 28';
            }
        }
    }
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

allowPaymentGiftCard = DATA LOCAL BOOLEAN();

prePost = ACTION (Receipt receipt) {
    allowPaymentGiftCard() <- TRUE;
    DELETE Payment payment WHERE receipt(payment) == receipt;
    date(receipt) <- currentDate();
    time(receipt) <- currentTime();
}

post 'Смешанный платеж' = ACTION (Receipt receipt) {
    prePost(receipt);
    IF sumReceiptDetail(receipt) THEN {
        FOR ADDOBJ p = Payment DO {
            receipt(p) <- receipt;
            paymentType(p) <- minCashPaymentType();
        }
        FOR ADDOBJ p = Payment DO {
            receipt(p) <- receipt;
            paymentType(p) <- minCardPaymentType();
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            postPaymentTerminal(receipt);
            IF NOT postPaymentTerminalReceiptResult() THEN {
                postPrint(receipt);
            } ELSE {
                MESSAGE postPaymentTerminalReceiptResult();
            }
        } ELSE {
            DELETE Payment p WHERE receipt(p) == receipt;
        }
    }
} EDITKEY 'F9' IN receiptAction;

postCard 'Карточкой' = ACTION (Receipt receipt) {
    prePost(receipt);
    IF sumReceiptDetail(receipt) THEN {
        FOR ADDOBJ p = Payment DO {
            ASSIGN receipt(p) <- receipt;
            ASSIGN paymentType(p) <- minCardPaymentType();
            ASSIGN sum(p) <- sumReceiptDetail(receipt);
        }
        postPaymentTerminal(receipt);
        IF NOT postPaymentTerminalReceiptResult() THEN {
            postPrint(receipt);
        } ELSE {
            MESSAGE postPaymentTerminalReceiptResult();
        }
    }
} EDITKEY 'F10' CONFIRM IN receiptAction;

postCash 'Наличными' = ACTION (Receipt receipt) {
    prePost(receipt);
    IF sumReceiptDetail(receipt) THEN {
        FOR ADDOBJ p = Payment DO {
            receipt(p) <- receipt;
            paymentType(p) <- minCashPaymentType();
            sum(p) <- sumReceiptDetail(receipt);
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            postPrint(receipt);
        } ELSE {
            DELETE Payment p WHERE receipt(p) == receipt;
        }
    }
} EDITKEY 'F11' IN receiptAction;

resetBoard 'Сбросить текст на дисплее' = ABSTRACT ACTION LIST(Receipt);

cancel 'Обнулить чек' = ACTION (Receipt receipt) {
    resetBoard(receipt);
    IF sumReceiptDetail(receipt) OR quantityReceiptDetail(receipt) THEN {
        cancel();
        createCurrentReceipt();
    }
    fiscalCancel(receipt);
} EDITKEY 'shift F11' CONFIRM IN receiptAction;

// Операции по добавлению строк в чек

// Продажи
FORM chooseBatchReceipt 'Выбор партии'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS d = ReceiptDetail FIXED PANEL

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY dateTime, documentNameSku, name
    PROPERTIES(bt, st) READONLY prevCurrentBalance
    PROPERTIES(bt, d) READONLY currentPOSPrice
    ORDER BY dateTime(bt) DESC
    FILTERS sku(bt) == sku(d),
            currentPOSPrice(bt, d)
    FILTERGROUP balance
        FILTER 'Партии с остатком' prevCurrentBalance(bt, st) 'F10' DEFAULT 
        
;

changeBatch 'Изменить партию строки чека' = ACTION (ReceiptDetail detail) {
    IF explicitBatchLedger(receipt(detail)) THEN {
        FORM chooseBatchReceipt OBJECTS st = departmentStore(detail), d = detail DIALOG;
        IF formResult() == FormResult.ok THEN {
            batch(detail) <- chosenObject('bt');
            price[ReceiptSaleDetail](detail) <- currentPOSPrice[Batch,Receipt](chosenObject('bt'), receipt(detail));
        }
    }
}

focusQuantity = ABSTRACT ACTION LIST (ReceiptDetail); 

createSaleDetail 'Добавить строку продажи' = ACTION (Receipt receipt, Batch batch, STRING[15] barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        sku(d) <- sku(batch);
        quantity(d) <- 1.0;
//        VATReceiptSaleDetail(d) <- VATSkuStockDate(skuBatch(batch), departmentStoreReceipt(receipt), currentDate());
        batch(d) <- batch;
        price(d) <- currentPOSPrice(batch, receipt);
        focusQuantity(d);
    }
}

countBatch (sk, st, r) = GROUP SUM 1 
                                                  IF (currentBalance(Batch batch, Stock stock) (-) 
                                                      [= GROUP SUM quantity(ReceiptSaleDetail d) 
                                                              BY batch(d), receipt(d)] (batch, Receipt receipt)) > 0
                                              BY sku(batch), stock, receipt; 
defaultBatch 'Партия по умолчанию' (sku, stock, receipt) = 
    GROUP MIN Batch batch IF (currentBalance(batch, Stock stock) (-)
                        [= GROUP SUM quantity(ReceiptSaleDetail d) 
                                 BY batch(d), receipt(d)] (batch, Receipt receipt)) > 0
          BY sku(batch), stock, receipt; 

createSaleDetail 'Добавить строку продажи' = ACTION (Receipt receipt, Sku sku, STRING[15] barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        sku(d) <- sku;
        quantity(d) <- 1.0;
        price(d) <- currentPOSPrice(sku, receipt);
//        VATReceiptSaleDetail(d) <- VATSkuStockDate(sku, departmentStoreReceipt(receipt), currentDate());
        focusQuantity(d);
        IF explicitBatchLedger(receipt(d)) AND
            countBatch(sku(d), departmentStore(receipt(d)), receipt) == 1 THEN {
                batch(d) <- defaultBatch(sku(d), departmentStore(receipt(d)), receipt);
                price(d) <- currentPOSPrice(batch(d), receipt[ReceiptDetail](d));
            } ELSE IF explicitBatchLedger(receipt(d)) THEN {
                FORM chooseBatchReceipt OBJECTS st = departmentStore[ReceiptDetail](d), d = d DIALOG;
                IF formResult() == FormResult.ok THEN {
                    batch(d) <- chosenObject('bt');
                    price(d) <- currentPOSPrice[Batch,Receipt](chosenObject('bt'), receipt[ReceiptDetail](d));
                    calculatePromotions(receipt);
                } ELSE
                    DELETE d;
            }
    }
}

GROUP receiptSaleAction 'Продажа' : public;

// По штрихкоду
consumedChangeBarcodeSaleReceipt = DATA LOCAL BOOLEAN();
preProcessBarcode = ABSTRACT ACTION LIST (STRING[15], Receipt);
overChangeBarcodeSale = ABSTRACT ACTION LIST (STRING[15], Receipt);

changeBarcodeSale = ACTION (Receipt receipt) {
    REQUEST STRING[15] INPUT;
    consumedChangeBarcodeSaleReceipt() <- NULL;
    LOCAL barcode = STRING[15] ();
    barcode() <- processedBarcode(requestedString());
    preProcessBarcode(barcode(), receipt);
    overChangeBarcodeSale(barcode(), receipt);
    IF NOT consumedChangeBarcodeSaleReceipt() THEN{
        LOCAL dialogBarcodeSku = Sku();
        dialogBarcodeSku() <- skuBarcode(barcode(), currentDate());
        IF dialogBarcodeSku() IS Sku THEN {
            IF active(dialogBarcodeSku()) THEN {
                createSaleDetail(receipt, dialogBarcodeSku(), barcode());
            } ELSE {
                MESSAGE CONCAT ' ', name(dialogBarcodeSku()), '(' + barcode() + ')', ' запрещен к продаже';
            }
            
        } ELSE
            MESSAGE CONCAT ' ', 'Не найден штрихкод', barcode(), '(' + requestedString() + ')';
    }
}

overFilterSearch = ABSTRACT BOOLEAN (Sku, Stock);

filterSearchSale = prevCurrentBalance(Sku s, Stock st) 
            OR (currentPOSPrice(s, Receipt r) AND skuType[Item](s) == SkuType.skuTypeCharge)
            OR overFilterSearch(s, st);
            
// Поиск подбором SKU
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY skuTreeName = name(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS           s = Sku FIXED GRID
    PROPERTIES        READONLY name(s)
    PROPERTIES(s, st) READONLY prevCurrentBalance
    PROPERTIES(s, r)  READONLY currentPOSPrice    
    PROPERTIES        READONLY idBarcode(s)
    FILTERS           isParent(sk, s),
                      name(s)
    ORDER BY          name(s)

    FILTERGROUP filters
        FILTER 'Доступные для продажи' filterSearchSale(s, st, r) 'F10' DEFAULT
        
    FILTERGROUP inactiveSku FILTER 'Активные' active(s) 'F11' DEFAULT

;

DESIGN searchSkuSaleReceipt {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box { caption = 'Группы'; }
            MOVE s.box {
                fill = 4;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(name(s)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 40;}
            PROPERTY(prevCurrentBalance(s, st)) { font = '16'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPOSPrice(s, r)) { font = '16'; }
            PROPERTY(idBarcode(s)) { font = '16'; minimumCharWidth = 14; preferredCharWidth = 14;}
        }
    }
}

searchSkuSale 'Поиск' = ACTION (Receipt receipt) {
    FORM searchSkuSaleReceipt OBJECTS st = departmentStore(receipt), r = receipt DIALOG;
    IF formResult() == FormResult.ok THEN {
        createSaleDetail[Receipt,Sku,STRING[15]](receipt, chosenObject('s'), idBarcode[Sku](chosenObject('s')));
    }
} EDITKEY 'F3' IN receiptSaleAction;

// Поиск подбором Batch
FORM searchBatchSaleReceipt 'Поиск партии'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY skuTreeName = name(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS           b = Batch FIXED GRID
    PROPERTIES        READONLY documentNameSku(b)
    
    PROPERTIES(b, st) READONLY prevCurrentBalance
    PROPERTIES(b, r)  READONLY currentPOSPrice
        
    PROPERTIES        READONLY idBarcodeSku(b), name(b)
    FILTERS           isParent(sk, sku(b))
    ORDER BY          documentNameSku(b)

    FILTERGROUP filters
        FILTER 'Товары с остатком' prevCurrentBalance(b, st) 'F10' DEFAULT

;

DESIGN searchBatchSaleReceipt {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box { caption = 'Группы'; }
            MOVE b.box {
                fill = 4;
                b.grid {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(documentNameSku(b)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 40;}
            PROPERTY(prevCurrentBalance(b, st)) { font = '16'; minimumCharWidth = 3; preferredCharWidth = 5;}
            PROPERTY(currentPOSPrice(b, r)) { font = '16'; }
            PROPERTY(idBarcodeSku(b)) { font = '16'; minimumCharWidth = 14; preferredCharWidth = 14;}
            PROPERTY(name(b)) { font = '16'; minimumCharWidth = 20; preferredCharWidth = 30;}           
        }
    }
}

searchBatchSale 'Поиск' = ACTION (Receipt receipt) {
    FORM searchBatchSaleReceipt OBJECTS st = departmentStore(receipt), r = receipt DIALOG;
    IF formResult() == FormResult.ok THEN {
        createSaleDetail[Receipt,Batch,STRING[15]](receipt, chosenObject('b'), idBarcodeSku[Batch](chosenObject('b')));
    }
} EDITKEY 'F3' IN receiptSaleAction;


// Возвраты

allReceiptReturn 'Возврат чека целиком' = DATA BOOLEAN ();
selectiveReturn = TRUE AND NOT allReceiptReturn();

EXTEND FORM options 
    PROPERTIES () allReceiptReturn 
;
DESIGN options {
    pane {
        NEW pos {
            caption = 'POS';
            type = CONTAINERV;
            MOVE PROPERTY (allReceiptReturn());
        }
    }    
}

createReturn 'Добавить строку возврата' = ACTION (Receipt receipt, ReceiptSaleDetail receiptSaleDetail, STRING[15] barcode) {
    FOR ADDOBJ d = ReceiptReturnDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        receiptSaleDetail(d) <- receiptSaleDetail;
        sku(d) <- sku(receiptSaleDetail);
        quantity(d) <- 1.0;
        price(d) <- price(receiptSaleDetail);
        VAT(d) <- VAT(receiptSaleDetail);
        batch(d) <- batch(receiptSaleDetail);
        focusQuantity(d);
    }
}
overCreateReturn = ABSTRACT ACTION LIST (ReceiptReturnDetail, ReceiptSaleDetail);
createReturn 'Добавить строки возврата' = ACTION (Receipt receipt, Receipt receiptReturn) {
    FOR receipt(ReceiptSaleDetail receiptSaleDetail) == receiptReturn ADDOBJ d = ReceiptReturnDetail DO {
        receipt(d) <- receipt;        
        idBarcode(d) <- idBarcode(sku(receiptSaleDetail));        
        receiptSaleDetail(d) <- receiptSaleDetail;
        sku(d) <- sku(receiptSaleDetail);
        quantity(d) <- quantity(receiptSaleDetail);
        price(d) <- price(receiptSaleDetail);
        VAT(d) <- VAT(receiptSaleDetail);
        batch(d) <- batch(receiptSaleDetail);
        overCreateReturn(d,receiptSaleDetail);
    }
}

GROUP receiptReturnAction 'Возврат' : public;

// По штрихкоду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = DepartmentStore FIXED PANEL

    OBJECTS s = Sku FIXED PANEL
    PROPERTIES idBarcode(s) READONLY, name(s)

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY numberReceipt, dateTime, nameBatch SHOWIF explicitBatchLedger(d),
                           numberDiscountCard, nameLegalEntityDiscountCard, sumReceiptDetail,
                           index, quantity[ReceiptDetail], quantityReturned, price[ReceiptDetail],
                           sum[ReceiptDetail], discountPercent FORCE GRID, discountSum[ReceiptDetail]
    FILTERS departmentStore(r) == d,
            sku(r) == s
;

DESIGN scanBarcodeReturnReceipt {
    PROPERTY(idBarcode(s)) {
        focusable = FALSE;
    }
    PROPERTY(name(s)) {
        focusable = FALSE;
    }
}

scanBarcodeReturn 'Ввести штрихкод' = ACTION (Receipt receipt) {
    FORM barcodeInput MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL dialogBarcodeSku = Sku();
        dialogBarcodeSku() <- skuBarcode(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {
            FORM scanBarcodeReturnReceipt OBJECTS d = departmentStore(receipt), s = dialogBarcodeSku() MODAL;
            IF formResult() == FormResult.ok AND chosenObject('r') THEN {
                createReturn(receipt, chosenObject('r'), barcodeInput());
            } ELSE {
                FOR ADDOBJ d = ReceiptReturnDetail DO {
                    receipt(d) <- receipt;
                    idBarcode(d) <- barcodeInput();
                    sku(d) <- dialogBarcodeSku();
                    quantity(d) <- 1.0;
                    price(d) <- currentPOSPrice(dialogBarcodeSku(), receipt);
                    VAT(d) <- VAT(dialogBarcodeSku(), departmentStore(receipt));
                    focusQuantity(d);
                    IF explicitBatchLedger(receipt) THEN {
                        FORM chooseBatchReceipt OBJECTS st = departmentStore[ReceiptDetail](d), d = d MODAL;
                        IF formResult() == FormResult.ok THEN {
                            batch(d) <- chosenObject('bt');
                            price(d) <- currentPOSPrice[Batch,Receipt](chosenObject('bt'), receipt[ReceiptDetail](d));
                        } ELSE
                            DELETE d;
                    }
                }
            }
        } ELSE
            MESSAGE CONCAT ' ', 'Не найден штрихкод', barcodeInput();
    }
} EDITKEY 'F7' IN receiptReturnAction;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS c = CashRegister FIXED PANEL

    OBJECTS s = Receipt FIXED GRID LAST 
    PROPERTIES(s) READONLY  number, date, time, nameEmployee,
                            numberDiscountCard, nameLegalEntityDiscountCard, sumReceiptDetail, discountSumReceiptDetail,
                            countReceiptDetail, quantityReceiptDetail
    FILTERS departmentStore(s) == st

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY  idBarcode, nameSku[ReceiptDetail], nameBatch SHOWIF explicitBatchLedger(st),
                            quantity[ReceiptDetail], quantityReturned, price[ReceiptDetail],
                            sum[ReceiptDetail], discountPercent, discountSum[ReceiptDetail]
    FILTERS receipt(r) == s
;
DESIGN searchSkuReturnReceipt {
    preferredSize = (1024, 768);
}

searchSkuReturn 'Поиск' = ACTION (Receipt receipt) {
    FORM searchSkuReturnReceipt OBJECTS st = departmentStore(receipt), c = cashRegister(receipt) DIALOG;
    IF formResult() == FormResult.ok THEN {
        IF selectiveReturn() THEN {        
            createReturn(receipt, chosenObject('r'), idBarcode(sku[ReceiptSaleDetail](chosenObject('r'))));
        } ELSE {
            createReturn(receipt, chosenObject('s'));
        }
    }
} EDITKEY 'F6' IN receiptReturnAction;

// Дисконтные карты

overChangeBarcodeDiscountCard = ACTION (STRING[15] string, Receipt receipt) {
    IF discountString(string) AND receipt IS Receipt AND string IS STRING[15] THEN {
        IF dateTo(discountString(string)) < date(receipt) THEN
            MESSAGE 'Закончился срок действия карты'
        ELSE
            discountCard(receipt) <- discountString(string); 
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(STRING[15] string, Receipt receipt) += ACTION overChangeBarcodeDiscountCard(string, receipt);

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = STRING[18], s = STRING[2]) FIXED PANEL
    PROPERTIES number = OBJVALUE(n), series = OBJVALUE(s)
;

DESIGN inputDiscountCardNumberReceipt {
    NEW centerContainer BEFORE functions.box {
        type = CONTAINERH;
        MOVE PROPERTY(number) { editKey = 'F4'; caption = 'Номер'; font = 'bold 72'; }
        MOVE PROPERTY(series) { minimumCharWidth = 3; caption = 'Серия'; font = 'bold 72'; }
    }
}

inputDiscountCardNumber 'Ввести номер' = ACTION (Receipt receipt) {
    FORM inputDiscountCardNumberReceipt MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL discountCard = DiscountCard();
        discountCard() <- discountString(CONCAT '', chosenString('s'), chosenString('n'));         
        IF discountCard() THEN {
            IF dateTo(discountCard()) < date(receipt) THEN
                MESSAGE 'Закончился срок действия карты'
            ELSE
                discountCard(receipt) <- discountCard();
        } ELSE
            MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
    }
} IN receiptDiscount EDITKEY 'F5';

clearDiscountCard 'Сбросить' = ACTION (Receipt receipt) {
    ASSIGN discountCard(receipt) <- NULL;
} IN receiptDiscount EDITKEY 'shift F5';

// Операции с Z-отчетами

openZReport 'Открыть Z-отчет' (CashRegister cashRegister) = ACTION {
    FOR ADDOBJ z = ZReport DO {
        isPosted(z) <- TRUE;
        number(z) <- STRING[255](z);
        cashRegister(z) <- cashRegister;
        departmentStore(z) <- departmentStore(cashRegister); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        zReport(cashRegister) <- z;
        apply();
    }
} IN receiptZReport;

openCurrentZReport 'Открыть Z-отчет' = ACTION () {
    FOR ADDOBJ z = ZReport DO {
        isPosted(z) <- TRUE;
        number(z) <- STRING[255](z);
        cashRegister(z) <- currentCashRegister();
        departmentStore(z) <- departmentStore(currentCashRegister()); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        zReport(CashRegister cashRegister) <- z WHERE cashRegister == currentCashRegister();
        apply();
    }
} CONFIRM IN receiptZReport;

overClose = ABSTRACT ACTION LIST (ZReport);

closeZReport 'Закрыть Z-отчет' (CashRegister cashRegister) = ACTION {
    cancel();
    FOR ZReport z == zReport(cashRegister) DO {
        time(z) <- currentTime();
        //dateZReport(z) <- currentDate();
        overClose(z);
    }
    zReport(cashRegister) <- NULL;
    apply();
} CONFIRM IN receiptZReport;

closeCurrentZReport 'Закрыть Z-отчет' = ACTION () {
    cancel();
    time(ZReport z) <- currentTime() WHERE z == currentZReport();
    //dateZReport(z) <- currentDate() WHERE z == currentZReport();
    overClose(currentZReport());
    zReport(CashRegister cashRegister) <- NULL WHERE cashRegister == currentCashRegister();
    apply();
} CONFIRM IN receiptZReport;

// Форма POS-терминала

prevCurrentBalance (Sku sku, Receipt receipt) = prevCurrentBalance(sku, departmentStore(receipt));
prevCurrentBalanceSku 'Тек. остаток' (ReceiptDetail receiptDetail) = prevCurrentBalance(sku(receiptDetail), receipt(receiptDetail));
prevCurrentBalanceSku 'Тек. остаток' (ReceiptDetail receiptDetail, Stock stock) = prevCurrentBalance(sku(receiptDetail), stock);

prevCurrentBalance (Batch batch, Receipt receipt) = prevCurrentBalance(batch, departmentStore(receipt));
prevCurrentBalanceBatch 'Тек. остаток' (ReceiptDetail receiptDetail) = prevCurrentBalance(batch(receiptDetail), receipt(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

posExplicitBatchLedger(Receipt r) = explicitBatchLedger(r) AND currentZReport();
posNotExplicitBatchLedger(Receipt r) = notExplicitBatchLedger(r) AND currentZReport();

changeQuantity 'Изменить кол-во строки чека' = ACTION (ReceiptDetail detail) {
    REQUEST NUMERIC[14,3] INPUT;
    IF requestedNumeric() THEN {
        quantity(detail) <- requestedNumeric();
    } ELSE {
        DELETE detail; 
    }
}

notBackgroundPOS 'Не подсвечивать форму POS' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notBackgroundPOS
;
DESIGN options {
    pos {
        MOVE PROPERTY (notBackgroundPOS());
    }  
}

background(Receipt r, ReceiptDetail d) = RGB(255, 128, 128) 
    IF ((posNotExplicitBatchLedger(r) AND prevCurrentBalanceSku(d) < quantity(d)) OR 
       (posExplicitBatchLedger(r) AND prevCurrentBalanceBatch(d) < quantity(d))) AND NOT notBackgroundPOS();

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetail, sumReceiptDetail,
                                          searchSkuSale SHOWIF posNotExplicitBatchLedger(r),
                                          searchBatchSale SHOWIF posExplicitBatchLedger(r),
                                          searchSkuReturn, scanBarcodeReturn,
                                          post, postCard, postCash, cancel,
                                          numberDiscountCard, nameLegalEntityDiscountCard,
                                          prevTotalSum, clearDiscountCard, fiscalSkip

    OBJECTS d = ReceiptDetail FIXED GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY FORCE GRID BACKGROUND background(r, d)  
                        index, type, idBarcodeGrid = idBarcode, nameSkuGrid = nameSku,
                        prevCurrentBalanceSku SHOWIF posNotExplicitBatchLedger(r),
                        prevCurrentBalanceBatch SHOWIF posExplicitBatchLedger(r)
    PROPERTIES(d) SHOWIF currentZReport() FORCE GRID BACKGROUND background(r, d) 
                        quantityGrid = quantity ON CHANGE changeQuantity(d), priceGrid = price, sumGrid = sum, discountPercent,
                        discountSum, valueVAT, calcSumVAT//, numberVATReceiptDetail, , deleted=DELETESESSION
    PROPERTIES(d) SHOWIF currentZReport() READONLY FORCE PANEL BACKGROUND background(r, d) 
                        idBarcodePanel = idBarcode,
                        nameSkuPanel = nameSku,
                        quantityPanel = quantity,
                        shortNameUOMSkuPanel = shortNameUOMSku,
                        pricePanel = price,
                        sumPanel = sum
    PROPERTIES(d) SHOWIF currentZReport() FORCE PANEL BACKGROUND background(r, d) 
                        nameBatchPanel = nameBatch ON CHANGE changeBatch(d) SHOWIF posExplicitBatchLedger(r)
    FILTERS receipt(d) == r

    OBJECTS bs = STRING[15] FIXED PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = OBJVALUE ON CHANGE changeBarcodeSale(r) EVENTID 'SCANNER'

    OBJECTS pc = PromotionCondition FIXED GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pc) SHOWIF currentZReport()       quantity, promotionSum
    FILTERS quantity(d, pc) AND NOT userSet(pc)

    OBJECTS pcu = PromotionCondition FIXED GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantity, promotionSum, setUserPromotion
    FILTERS userSet(pcu) AND inReceiptSale(d, pcu)

    PROPERTIES() fiscalPrintCopyReceipt READONLYIF fiscalSkip(r), fiscalAdvancePaper READONLYIF fiscalSkip(r), 
    fiscalCutReceipt READONLYIF fiscalSkip(r), fiscalCashSum READONLYIF fiscalSkip(r)
    
    OBJECTS s = DepartmentStore FIXED GRID
    PROPERTIES(s) READONLY SHOWIF currentZReport() nameStore
    PROPERTIES READONLY SHOWIF currentZReport() prevCurrentBalanceSku(d, s)

    FILTERS accessCompany(currentUser(), s),
            prevCurrentBalanceSku(d, s)

    EVENTS
        ON INIT createCurrentReceipt()

;

DESIGN POS {
    NEW north {
        type = CONTAINERH;
        alignment = STRETCH;

        MOVE r.receiptSaleAction {
            type = CONTAINERV;
            alignment = STRETCH;
            MOVE PROPERTY(searchSkuSale(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22';}
            MOVE PROPERTY(searchBatchSale(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            MOVE PROPERTY(barcodeSale) { caption = 'Ввести штрихкод'; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 22'; editKey = 'F4'; }
        }
        MOVE r.receiptReturnAction {
            type = CONTAINERV;
            alignment = STRETCH;
            MOVE PROPERTY(searchSkuReturn(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
            MOVE PROPERTY(scanBarcodeReturn(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
        }
        MOVE r.receiptDiscount {
            fill = 1;
            type = CONTAINERV;
            MOVE PROPERTY(nameLegalEntityDiscountCard(r)) { alignment = STRETCH; caption = 'Держатель'; focusable = FALSE; font = 'bold 22'; }
            NEW receiptDiscountRow2 {
                fill = 1;
                type = CONTAINERH;
                MOVE PROPERTY(numberDiscountCard(r)) { alignment = STRETCH; caption = 'Номер'; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(prevTotalSum(r)) { alignment = STRETCH; caption = 'Сумма'; focusable = FALSE; font = 'bold 22'; }
                NEW receiptDiscountActions {
                    fill = 1;
                    type = CONTAINERH;
                    childrenAlignment = TRAILING;
                    MOVE PROPERTY(clearDiscountCard(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 14'; }
                }
            }
        }
        MOVE PROPERTY(closedCurrentZReportMessage()) {
            focusable = FALSE;
            font = '100';
            flex = 1;
        }
    }
    MOVE d.box {
        fill = 1;
        PROPERTY(index(d)) { caption = '№'; focusable = FALSE; font = '18'; minimumCharWidth = 2; preferredCharWidth = 2;}
        PROPERTY(type(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 7; preferredCharWidth = 7;}
        PROPERTY(idBarcodeGrid) { focusable = FALSE; font = '18'; }
        PROPERTY(nameSkuGrid) { focusable = FALSE; font = '18'; minimumCharWidth = 20; }
        PROPERTY(prevCurrentBalanceSku(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
        PROPERTY(prevCurrentBalanceBatch(d)) { focusable = FALSE; font = '18'; minimumCharWidth = 3; preferredCharWidth = 5;}
        PROPERTY(quantityGrid) { caption = 'К-во'; font = '18'; minimumCharWidth = 2; preferredCharWidth = 3;}
        PROPERTY(priceGrid) { font = '18'; }
        PROPERTY(sumGrid) { font = '18'; }
        PROPERTY(discountPercent(d)) { font = '18'; minimumCharWidth = 3; preferredCharWidth = 4;}
        PROPERTY(discountSum(d)) { font = '18'; }
//        PROPERTY(numberVATReceiptDetail(d)) { font = '18'; minimumCharWidth = 3; }
        PROPERTY(valueVAT(d)) { font = '18'; minimumCharWidth = 3; preferredCharWidth = 4;}
        PROPERTY(calcSumVAT(d)) { font = '18';}
//        PROPERTY(deleted) { focusable = FALSE; font = '18'; }
        REMOVE d.toolbar;
    }
    NEW center {
        alignment = STRETCH;
        type = CONTAINERH;
        NEW details {
            fill = 1;
            preferredSize = ( -1, 100);
            MOVE d.panel {
                MOVE PROPERTY(nameSkuPanel) {
                    alignment = STRETCH;
                    panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                }
                MOVE PROPERTY(nameBatchPanel) {
                    alignment = STRETCH;
                    panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                }
                NEW skuDetail {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    MOVE PROPERTY(idBarcodePanel) { panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24'; }
                    NEW priceDetail {
                        fill = 1;
                        type = CONTAINERH;
                        childrenAlignment = TRAILING;
                        MOVE PROPERTY(quantityPanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                            minimumCharWidth = 5;
                        }
                        MOVE PROPERTY(shortNameUOMSkuPanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                        MOVE PROPERTY(pricePanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                        MOVE PROPERTY(sumPanel) {
                            panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                    }
                }
            }
            NEW pane {
                fill = 1;
                type = TABBED;
                MOVE pc.box {
                    REMOVE pc.toolbar;
                }
                MOVE pcu.box {
                    caption = 'Возможные акции';
                    REMOVE pcu.toolbar;
                }
                MOVE s.box{
                    caption = 'Остатки в других магазинах';
                }
            }
            NEW misc {
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(formRefresh()) {
                    fill = 1;
                    focusable = FALSE;
                }
                NEW currentContainer {
                    alignment = STRETCH;
                    caption = 'Текущие значения';
                    MOVE PROPERTY(hostnameCurrentComputer()) {
                        caption = 'Компьютер';
                        alignment = STRETCH;
                        focusable = FALSE;
                    }
                    NEW currentRow2 {
                        alignment = STRETCH;
                        type = CONTAINERH;
                        MOVE PROPERTY(currentDateTime()) { caption = 'Время'; focusable = FALSE; }
                        MOVE PROPERTY(currentUserName()) { caption = 'Пользователь'; focusable = FALSE; }
                    }
                }
                NEW actionsContainer {
                    caption = 'Действия с кассой';
                    type = CONTAINERH;
                    alignment = STRETCH;
                    MOVE PROPERTY(fiscalSkip(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; };
                    MOVE PROPERTY(fiscalPrintCopyReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalAdvancePaper()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalCutReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalCashSum()) { alignment = STRETCH; focusable = FALSE; }
                }
            }
        }
        NEW east {
            alignment = STRETCH;
            MOVE r.receiptAction {
                type = CONTAINERV;
                alignment = STRETCH;
                MOVE PROPERTY(post(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(postCard(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(postCash(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(cancel(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            }
            NEW receiptSums {
                alignment = STRETCH;
                caption = 'Итого';
                MOVE PROPERTY(discountSumReceiptDetail(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 48'; }
                MOVE PROPERTY(sumReceiptDetail(r)) { alignment = STRETCH; panelCaptionAbove = TRUE; focusable = FALSE; font = 'bold 48'; }
            }
        }
    }
    REMOVE functions.box;
}

focusQuantity(ReceiptDetail d) += ACTION (d) {
    FOCUS POS.quantityGrid;
    SEEK POS.d d;
};

recalculatedPrice 'Пересчитать цены чека' = ACTION (Receipt receipt){
    FOR receipt(ReceiptSaleDetail detail) == receipt DO {
        IF posNotExplicitBatchLedger(receipt) THEN 
            price(detail) <- currentPOSPrice(sku(detail), receipt)
        ELSE 
            price(detail) <- currentPOSPrice(batch(detail), receipt);        
    }
}

WHEN SESSION FORMS POS CHANGED(quantityReceiptDetail(Receipt receipt)) OR 
                       CHANGED(discountCard(receipt)) OR 
                       CHANGED(setUserPromotion(receipt)) OR 
                       CHANGED(discountPercent(receipt)) 
    DO calculatePromotions(receipt);
    
WHEN SESSION FORMS POS CHANGED(quantity(ReceiptDetail receiptDetail)) OR CHANGED(sum(receiptDetail)) DO 
    fiscalDisplayText(receiptDetail);
    
WHEN SESSION FORMS POS CHANGED(discountCard(Receipt receipt)) DO recalculatedPrice(receipt);

WHEN SESSION FORMS POS CHANGED(VAT(ReceiptDetail d)) OR CHANGED(date(d)) OR CHANGED (batch(d)) DO {
    valueVAT(d) <- overValueVAT(d);
}

NAVIGATOR {
    retailDashboardNavigator {
        ADD POS;
    }
}

onlyPossitivePriceReceipDetail 'Требовать, что бы цены в строке чека были больше ноля' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () onlyPossitivePriceReceipDetail
;
DESIGN options {
    pos {
        MOVE PROPERTY (onlyPossitivePriceReceipDetail());
    }  
}

CONSTRAINT onlyPossitivePriceReceipDetail() AND ReceiptDetail detail IS ReceiptDetail AND NOT price(detail) > 0.0
    MESSAGE 'Цена для строки чека должна быть задана и быть больше 0';

// ----------------------------------------- Кассовые операции ---------------------------------------------- //
fiscalZReport 'Закрыть Z-отчёт' = ABSTRACT ACTION LIST () CONFIRM;
fiscalZReport() += ACTION IF NOT sidModelCurrentCashRegister() THEN closeCurrentZReport();

currentZReportDepartmentStore() = currentZReport() IF departmentStoreCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() IF departmentStoreCurrentCashRegister();

EXTEND FORM operationCashRegister
    PROPERTIES READONLY curSumCurrentCashRegister() TODRAW interval FORCE PANEL
    PROPERTIES() READONLY numberCurrentZReport SHOWIF departmentStoreCurrentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()
    
    PROPERTIES addIncomeCashOperationForm() TODRAW c FORCE PANEL TOOLBAR  SHOWIF currentZReportDepartmentStore()
    PROPERTIES addOutcomeCashOperationForm() TODRAW c FORCE PANEL TOOLBAR SHOWIF currentZReportDepartmentStore()

    OBJECTS z = ZReport
    PROPERTIES(z) READONLY isPosted, number, date, time, nameDepartmentStore,
                           overNumberCashRegister, sumCash, sumReceiptDetail, basis
    ORDER BY date(z), time(z)
    FILTERS date(z) >= dFrom,
            date(z) <= dTo,
            cashRegister(z) == currentCashRegister()
;

DESIGN operationCashRegister {
    main {
        actions {
            MOVE PROPERTY(fiscalZReport()) { font = '24'; }
            MOVE PROPERTY(openCurrentZReport()) { font = '24'; };
            MOVE PROPERTY(numberCurrentZReport()) { font = '24'; };
        }
        MOVE z.box BEFORE functions.box;
    }
}

// Update data
fiscalUpdateData 'Загрузить информацию' = ABSTRACT ACTION LIST ();
fiscalUpdateDataShowIf = departmentStoreCurrentCashRegister() IF closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

DESIGN operationCashRegister{
    actions {
        MOVE PROPERTY(fiscalUpdateData()) BEFORE PROPERTY(fiscalXReport()) { font = '24'; }
    }
}

//-- 
changeUserPromotion= ACTION (ReceiptSaleDetail d, PromotionCondition pcu) {
    REQUEST BOOLEAN INPUT;   
    IF requestedLogical() THEN {
        setUserPromotion(d, pcu) <- TRUE;
        quantity(d, pcu) <- quantity(d);
    } ELSE {
        setUserPromotion(d, pcu) <- NULL;
        quantity(d, pcu) <- NULL;    
    }
}

EXTEND FORM zReport

    OBJECTS pcu = PromotionCondition FIXED GRID
    PROPERTIES(pcu) READONLY FORCE GRID namePromotion, name, dateFrom, 
                    dateTo, percent
    PROPERTIES(d, pcu) FORCE GRID quantity,
                    promotionSum, 
                    setUserPromotion ON CHANGE changeUserPromotion(d, pcu)
    FILTERS userSet(pcu) AND inReceiptSale(d, pcu)
;

DESIGN zReport {
    secondCase{
        NEW prom AFTER d.box {
            fill = 1;
            type = TABBED;
            MOVE p.box;
            MOVE pcu.box {
                PROPERTY (namePromotion(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}
                PROPERTY (name(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}
            }
        }
    }
}

EXTEND FORM zReports

    OBJECTS pcu = PromotionCondition FIXED GRID
    PROPERTIES(pcu) READONLY FORCE GRID namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pcu) READONLY FORCE GRID quantity, promotionSum, setUserPromotion
    FILTERS quantity(d, pcu)
;

DESIGN zReports {
    secondCase{
        NEW prom AFTER d.box {
            fill = 1;
            type = TABBED;
            MOVE p.box;
            MOVE pcu.box {
                caption = 'Условия акции, задаваемые кассиром';
                PROPERTY (namePromotion(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}
                PROPERTY (name(pcu)) { minimumCharWidth = 15; preferredCharWidth = 30;}                
            }
        }
    }
}