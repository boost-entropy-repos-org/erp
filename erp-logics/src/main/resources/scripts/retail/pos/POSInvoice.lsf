MODULE POSInvoice;

REQUIRE POS, SaleInvoiceContract, SaleReturnInvoiceContract, ContractPayment, SaleShipment, ZReportPayment, Warehouse;

NAMESPACE Sale;

passportPartyB 'Паспорт' = passportNumber(partyB(Contract contract));
shortNameOwnershipPartyB 'Форма собственности (сокр.)' = shortNameOwnership(partyB(Contract contract));
balanceACurrentDate 'Задолженность' = balanceA(Contract contract, currentDate());
lastPayment 'Платеж' = GROUP LAST Payment.Payment payment BY contract(payment) ORDER payment WHERE isCosted(payment);

fiscalType 'Тип платежа' = ABSTRACT INTEGER (Payment.Payment); 
dataFiscalType 'Тип платежа' = DATA INTEGER (Payment.Payment);
fiscalType(Payment.Payment p) += dataFiscalType(p); 

defaultCurrencyPaymentInstallments = DATA Currency (); 
nameDefaultCurrencyPaymentInstallmentsy 'Валюта рассрочки' = name(defaultCurrencyPaymentInstallments()) PREFCHARWIDTH 30;

defaultTypeExchangePaymentInstallments  = DATA TypeExchange ();
nameDefaultTypeExchangePaymentInstallments 'Тип обмена рассрочки' = name(defaultTypeExchangePaymentInstallments());

defaultTypeExchangeRepaymentInstallments  = DATA TypeExchange ();
nameDefaultTypeExchangeReaymentInstallments 'Тип обмена погашения' = name(defaultTypeExchangeRepaymentInstallments());

defaultOperationPaymentInstallments = DATA Operation ();
nameDefaultOperationPaymentInstallments 'Операция рассрочки' = name(defaultOperationPaymentInstallments()); 

EXTEND FORM options
    PROPERTIES() nameDefaultCurrencyPaymentInstallmentsy, nameDefaultTypeExchangePaymentInstallments, nameDefaultTypeExchangeReaymentInstallments,
                 nameDefaultOperationPaymentInstallments
;

DESIGN options {
    pane {
        NEW paymentInstallmentsy {
            caption = 'Рассрочка';
            MOVE PROPERTY(nameDefaultOperationPaymentInstallments());
            MOVE PROPERTY(nameDefaultCurrencyPaymentInstallmentsy());
            MOVE PROPERTY(nameDefaultTypeExchangePaymentInstallments());
            MOVE PROPERTY(nameDefaultTypeExchangeReaymentInstallments());
        }    
    }
}

setPassportLegalEntity = ACTION ABSTRACT (); 
setNameEmployee = ACTION ABSTRACT (); 

isReadonly() = DATA LOCAL BOOLEAN ();

nameLegalEntity = DATA LOCAL STRING[150] ();     
passportNumberLegalEntity = DATA LOCAL STRING[10] ();
phoneContact = DATA LOCAL STRING[100] ();
postAddressContact = DATA LOCAL STRING[100] ();  
noteInvoice = DATA LOCAL STRING[255] ();  
idEmployee = DATA VARSTRING[100] ();
nameEmployee = DATA VARISTRING[60] ();

FORM paymentInstallments 'Рассрочка'
    PROPERTIES idEmployee() ON CHANGE setNameEmployee()  
    PROPERTIES READONLY nameEmployee()  
    
    PROPERTIES READONLYIF isReadonly() nameLegalEntity()     
        
    PROPERTIES READONLYIF isReadonly() passportNumberLegalEntity() ON CHANGE setPassportLegalEntity()
     
    PROPERTIES READONLYIF isReadonly() phoneContact()
    
    PROPERTIES READONLYIF isReadonly() postAddressContact()    
    
    PROPERTIES noteInvoice()        
    
    OBJECTS n = NUMERIC[18,4] FIXED PANEL
    PROPERTIES(n) sumPayment = OBJVALUE
    
    OBJECTS pt = PaymentType FIXED PANEL 
    PROPERTIES(pt) SELECTOR name
    
    OBJECTS pc = PaymentCondition FIXED PANEL
    PROPERTIES(pc) SELECTOR description    
;

DESIGN paymentInstallments {
    NEW topContainer{
        type = CONTAINERH;
        NEW leftContainer {
            fill = 1;
            NEW supplierContainer {
                caption = 'Продавец';
                type = CONTAINERH;
                alignment = STRETCH; 
                MOVE PROPERTY(idEmployee()) {
                    caption = 'Код продавца';
                    fontSize = 24;
                    preferredCharWidth = 5;                    
                    panelCaptionAbove = TRUE;   
                    notNull = TRUE;                    
                }  
                MOVE PROPERTY(nameEmployee()) {
                    caption = 'ФИО продавца';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;   
                    alignment = STRETCH;   
                    preferredCharWidth = 48;                      
                    notNull = TRUE;
                }                              
            }
            NEW customerContainer {
                caption = 'Покупатель';        
                MOVE PROPERTY(passportNumberLegalEntity()) {
                    caption = 'Паспорт';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;   
                    alignment = STRETCH;   
                    notNull = TRUE;
                }
                MOVE PROPERTY(nameLegalEntity()) {
                    caption = 'ФИО';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;
                    notNull = TRUE;
                }
                MOVE PROPERTY(postAddressContact()) {
                    caption = 'Адрес';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;      
                    alignment = STRETCH;
                    notNull = TRUE;
                }   
                MOVE PROPERTY(phoneContact()) {
                    caption = 'Телефон';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;      
                    alignment = STRETCH;
                    notNull = TRUE;
                }                                    
            }            
        }
        NEW sumContainer {
            caption = 'Платеж';
            MOVE PROPERTY(description(pc)) {
                caption = 'Условия рассрочки';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;
            }              
            MOVE PROPERTY(name(pt)) {
                caption = 'Тип платежа';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;
            }                
            MOVE PROPERTY(sumPayment) {
                caption = 'Сумма первоначального платежа';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                alignment = STRETCH;
            }         
        }
    }
    NEW bottomContainer {
        caption = 'Примечание';
        MOVE PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelCaptionAbove = TRUE;
            preferredCharWidth = 76;
        }        
    }
    MOVE functions.box;
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

setPassportLegalEntity () += ACTION {
    REQUEST STRING[10] INPUT;
    passportNumberLegalEntity() <- requestedString(); 
    FOR NOT requestCanceled() AND passportNumber(LegalEntity l) == requestedString() AND NOT isReadonly() DO {
        nameLegalEntity() <- name(l);
        phoneContact() <- phone[Contact](l);
        postAddressContact() <- postAddress[Contact](l);
        isReadonly() <- TRUE;
    }
}

setNameEmployee () += ACTION {
    REQUEST VARSTRING[100] INPUT;
    FOR NOT requestCanceled() AND id(Employee e) == requestedString() DO {
        idEmployee() <- requestedString();    
        nameEmployee() <- shortName(e);
    } 
}

printReceipt = ACTION ABSTRACT LIST (Sale.Invoice, Payment.Payment);
printReturnReceipt = ACTION ABSTRACT LIST (Sale.Invoice, Payment.Payment);
printReceiptResult = DATA LOCAL BOOLEAN ();

createInvoice(Receipt receipt, LegalEntity customer, CustomUser employee, NUMERIC[18,4] sum, PaymentType paymentType, PaymentCondition paymentCondition, VARSTRING[100] note)  = ACTION {       
    FOR ADDOBJ i = UserInvoice DO {
        operation(i) <- defaultOperationPaymentInstallments();
        supplierStock(i) <- departmentStore(receipt);
        supplier(i) <- legalEntity[Stock](departmentStore(receipt));
        customer(i) <- customer;
        customerStock(i) <- defaultStock(customer);
        date(i) <- date(receipt);
        time(i) <- time(receipt);
        paymentCondition(i) <- paymentCondition;
        priceListType(i) <- defaultPriceListType(operation(i));
        note(i) <- note;
        createShipment(i) <- TRUE;
        isPosted(i) <- TRUE;
        createdUser(i) <- employee;
        postedUser(i) <- employee;
        FOR ADDOBJ c = UserContractSku DO {
            supplier(c) <- legalEntity[Stock](departmentStore(receipt));
            customer(c) <- customer;
            dateFrom(c) <- date(receipt);
            currency(c) <- defaultCurrencyPaymentInstallments();
            type(c) <- ContractSkuType.sale;
            paymentCondition(c) <- paymentCondition;
            typeExchange(c) <- defaultTypeExchangePaymentInstallments();
            contractSku(i) <- c;            
        }
        
        FOR receipt(ReceiptDetail detail) == receipt ADDOBJ d = UserInvoiceDetail DO {
            userInvoice(d) <- i;
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            invoiceSum(d) <- sum(detail);
            shipmentSum(d) <- sum(detail);
            VAT(d) <- VAT(detail);
            valueVAT(d) <- valueVAT(detail);
            invoicePrice(d) <- price(detail);
            price(d) <- invoicePrice (d) * 100/(100 + valueVAT(d));
        }
        
        FOR ADDOBJ p = Payment.Payment DO {
            operation(p) <- defaultPaymentOperation();        
            date(p) <- date(receipt);
            time(p) <- time(receipt); 
            payer(p) <- customer;
            beneficiary(p) <- legalEntity[Stock](departmentStore(receipt));
            sum(p) <- sum;
            contract(p) <- contractSku(i);
            isPosted(p) <- TRUE;
            IF debt(i) >= sumContract(p) THEN {
                cost(p, i) <- sumContract(p);    
            } ELSE IF debt(i) < sumContract(p) THEN{
                cost(p, i) <- debt(i);     
            } 
            dataFiscalType(p) <- IF sid(paymentType) == 'card' THEN 1 ELSE 0;
            type(p) <- IF sid(paymentType) == 'card' THEN 1 ELSE 0;
            
            DELETE ReceiptDetail detail WHERE receipt(detail) == receipt;                                   
            DELETE receipt;
            
            IF model(groupCashRegister(currentCashRegister())) AND NOT fiscalSkip(receipt) THEN {
                check();
                IF NOT canceled() THEN {
                    printReceipt(i, p); 
                    IF printReceiptResult() THEN {
                        zReport(p) <- currentZReport();             
                        apply();
                        createCurrentReceipt();
                    }   
                } 
            }                 
            ELSE {         
                apply();
                createCurrentReceipt(); 
            }
        }
    }
}

createPaymentInstallments 'Рассрочка'(Receipt receipt) = ACTION {
    IF quantityReceiptDetail(receipt) THEN {
        passportNumberLegalEntity() <- NULL;
        nameLegalEntity() <- NULL;
        phoneContact() <- NULL;
        postAddressContact() <- NULL;
        noteInvoice() <- NULL;
        idEmployee() <- NULL;
        nameEmployee() <- NULL;        
        FORM paymentInstallments ;
        IF formResult() == FormResult.ok THEN {
            FOR passportNumber(LegalEntity l) == passportNumberLegalEntity() AND id(Employee e) == idEmployee() DO { 
                createInvoice(receipt, l, e, chosenNumeric('n'), chosenObject('pt'), chosenObject('pc'), noteInvoice());
            } ELSE {
                ADDOBJ LegalEntity;
                FOR Object l == addedObject() AND id(Employee e) == idEmployee() DO {
                    name[LegalEntity](l) <- nameLegalEntity();
                    passportNumber(l) <- passportNumberLegalEntity();
                    phone[Contact](l) <- phoneContact();
                    postAddress[Contact](l) <- postAddressContact();
                    isCustomer[LegalEntity](l) <- TRUE;
                    FOR shortName(Ownership ownership) == 'Ф.Л.' DO {
                        ownership(l) <- ownership;
                    }
                    FOR name(LegalEntityGroup group) == 'Покупатели' DO {
                        legalEntityGroup(l) <- group;
                    }
                    FOR ADDOBJ s = Warehouse DO {
                        name(s) <- nameLegalEntity();
                        legalEntity(s) <- l;
                        FOR name(WarehouseGroup gr) == 'Склады контрагентов' DO {
                            warehouseGroup(s) <- gr;
                        }
                    }
                    createInvoice(receipt, l, e, chosenNumeric('n'), chosenObject('pt'), chosenObject('pc'), noteInvoice());
                }
            }    
        } ELSE {
            isReadonly() <- NULL;
        }   
    }         
}

background (Contract contract, Receipt receipt)= RGB(255,75,75) IF (balanceACurrentDate(contract) (+) sumReceiptDetail(receipt) > 0.0); 

FORM prePayment 'Предоплата'
    OBJECTS r = Receipt FIXED PANEL 
    OBJECTS c = Contract
    PROPERTIES(c) READONLY BACKGROUND background(c, r) namePartyB, passportPartyB, balanceACurrentDate
    FILTERS balanceACurrentDate(c) < 0,
            shortNameOwnershipPartyB(c) == 'Ф.Л.',
            legalEntity[Stock](departmentStore(r)) == partyA(c)
    
    PROPERTIES noteInvoice()
;

DESIGN prePayment {
    REMOVE r.box;
    MOVE c.box {
        PROPERTY(namePartyB(c)){
            caption = 'ФИО';    
        }   
    }
    NEW bottomContainer {
        caption = 'Примечание';
        MOVE PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelCaptionAbove = TRUE;
            preferredCharWidth = 76;
        }        
    }
    MOVE functions.box;
}

createInvoicePrePayment 'Предоплата'(Receipt receipt)  = ACTION {
    IF quantityReceiptDetail(receipt) THEN {
        noteInvoice() <- NULL;
        FORM prePayment OBJECTS r = receipt ;
        IF formResult() == FormResult.ok THEN {
            FOR ADDOBJ i = UserInvoice DO {
                operation(i) <- defaultOperationPaymentInstallments();
                supplierStock(i) <- departmentStore(receipt);
                supplier(i) <- legalEntity[Stock](departmentStore(receipt));
                customer(i) <- partyB(chosenObject('c'));
                customerStock(i) <- Stock.defaultStock[LegalEntity](partyB(chosenObject('c')));
                date(i) <- date(receipt);
                time(i) <- time(receipt);
                contractSku(i) <- chosenObject('c');
                paymentCondition(i) <- paymentCondition[Contract](chosenObject('c'));
                priceListType(i) <- defaultPriceListType(operation(i));                
                note(i) <- noteInvoice();
                createShipment(i) <- TRUE;
                isPosted(i) <- TRUE;
                FOR Payment.Payment p == lastPayment(chosenObject('c')) DO {
                    IF isCosted(p) < sumReceiptDetail(receipt) THEN {
                        cost(p, i) <- isCosted(p);    
                    } ELSE {
                        cost(p, i) <- sumReceiptDetail(receipt);                     
                    }
                }
                FOR receipt(ReceiptDetail detail) == receipt ADDOBJ d = UserInvoiceDetail DO {
                    userInvoice(d) <- i;
                    sku(d) <- sku(detail);
                    quantity(d) <- quantity(detail);
                    invoiceSum(d) <- sum(detail);
                    shipmentSum(d) <- sum(detail);
                    VAT(d) <- VAT(detail);
                    valueVAT(d) <- valueVAT(detail);
                    invoicePrice(d) <- price(detail);
                    price(d) <- invoicePrice (d) * 100/(100 + valueVAT(d));
                }
            }
            DELETE ReceiptDetail detail WHERE receipt(detail) == receipt;                                   
            DELETE receipt;            
            apply();
            createCurrentReceipt();             
        }
    }   
}


EXTEND FORM POS
    PROPERTIES(r) SHOWIF currentZReport() createPaymentInstallments, createInvoicePrePayment
;
DESIGN POS {
    misc {
        NEW invoice {
            alignment = STRETCH;
            caption = 'Накладная';
            MOVE PROPERTY(createPaymentInstallments(r)) {alignment = STRETCH; focusable = FALSE; font = 'bold 24';  }
            MOVE PROPERTY(createInvoicePrePayment(r)) {alignment = STRETCH; focusable = FALSE; font = 'bold 24';  }
        }
    }
}