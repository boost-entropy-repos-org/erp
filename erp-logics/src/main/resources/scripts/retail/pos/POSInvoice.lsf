MODULE POSInvoice;

REQUIRE POS, SaleInvoiceContract, ContractPayment, SaleShipment;

NAMESPACE Sale;

fiscalTypePayment 'Тип платежа' = ABSTRACT INTEGER (Payment.Payment); 
dataFiscalTypePayment 'Тип платежа' = DATA INTEGER (Payment.Payment);
fiscalTypePayment(p) += dataFiscalTypePayment(p); 

EXTEND FORM payment 
    PROPERTIES(p) fiscalTypePayment
;

EXTEND DESIGN payment {
    paramContainer {
        ADD PROPERTY(fiscalTypePayment(p));
    }
} 
  
setPassportPhoneLegalEntity = ABSTRACT ACTION (); 

isReadonly() = DATA LOCAL BOOLEAN ();

nameLegalEntity = DATA LOCAL STRING[150] ();     
passportNumberLegalEntity = DATA LOCAL STRING[10] ();
phoneContact = DATA LOCAL STRING[30] ();
postAddressContact = DATA LOCAL STRING[100] ();  
noteInvoice = DATA LOCAL STRING[255] ();  

FORM paymentInstallments 'Рассрочка'
    PROPERTIES READONLYIF isReadonly() nameLegalEntity()     
        
    PROPERTIES READONLYIF isReadonly() passportNumberLegalEntity() ON CHANGE setPassportPhoneLegalEntity()
     
    PROPERTIES READONLYIF isReadonly() phoneContact()
    
    PROPERTIES READONLYIF isReadonly() postAddressContact()    
    
    PROPERTIES noteInvoice()        
    
    OBJECTS n = NUMERIC[16,2] FIXED PANEL
    PROPERTIES(n) sumPayment = OBJVALUE
    
    OBJECTS pt = PaymentType FIXED PANEL 
    PROPERTIES(pt) SELECTOR namePaymentType
    
    OBJECTS pc = PaymentCondition FIXED PANEL
    PROPERTIES(pc) SELECTOR descriptionPaymentCondition    
;

DESIGN paymentInstallments FROM DEFAULT {
    NEW topContainer{
        type = CONTAINERH;
        NEW customerContainer {
            caption = 'Покупатель';
            ADD PROPERTY(passportNumberLegalEntity()) {
                caption = 'Паспорт';
                fontSize = 24;
                panelLabelAbove = TRUE;   
                alignment = STRETCH;   
                notNull = TRUE;
            }
            ADD PROPERTY(nameLegalEntity()) {
                caption = 'ФИО';
                fontSize = 24;
                panelLabelAbove = TRUE;
                notNull = TRUE;
            }
            ADD PROPERTY(postAddressContact()) {
                caption = 'Адрес';
                fontSize = 24;
                panelLabelAbove = TRUE;      
                alignment = STRETCH;
                notNull = TRUE;
            }   
            ADD PROPERTY(phoneContact()) {
                caption = 'Телефон';
                fontSize = 24;
                panelLabelAbove = TRUE;      
                alignment = STRETCH;
                notNull = TRUE;
            }                                    
        }
        NEW sumContainer {
            caption = 'Платеж';
            ADD PROPERTY(descriptionPaymentCondition(pc)) {
                caption = 'Условия рассрочки';
                fontSize = 32;   
                panelLabelAbove = TRUE;
                preferredCharWidth = 15;
            }              
            ADD PROPERTY(namePaymentType(pt)) {
                caption = 'Тип платежа';
                fontSize = 32;   
                panelLabelAbove = TRUE;
                preferredCharWidth = 15;
            }                
            ADD PROPERTY(sumPayment) {
                caption = 'Сумма первоначального платежа';
                fontSize = 32;   
                panelLabelAbove = TRUE;
                alignment = STRETCH;
            }         
        }
    }
    NEW bottomContainer {
        caption = 'Примечание';
        ADD PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelLabelAbove = TRUE;
            preferredCharWidth = 76;
        }        
    }
    ADD functions.box;
}

setPassportPhoneLegalEntity () += ACTION () {
    REQUEST STRING[150] INPUT;
    passportNumberLegalEntity() <- requestedString(); 
    FOR NOT requestCanceled() AND passportNumberLegalEntity(l) == requestedString() DO {
        nameLegalEntity() <- nameLegalEntity(l);
        phoneContact() <- phoneContact(l);
        postAddressContact() <- postAddressContact(l);
        isReadonly() <- TRUE;
    }
} 

printReceiptInvoicePayment = ABSTRACT ACTION LIST (Sale.Invoice, Payment.Payment);
printReceiptResult = DATA LOCAL BOOLEAN ();

createInvoiceReceipt 'Создать' = ACTION (receipt, customer, sum, paymentType, paymentCondition, note) {       // todo: сделать необходимые округления
    FOR ADDOBJ i = UserInvoice DO {
        supplierStockUserInvoice(i) <- departmentStoreReceipt(receipt);
        supplierUserInvoice(i) <- legalEntityStock(departmentStoreReceipt(receipt));
        customerUserInvoice(i) <- customer;
        customerStockUserInvoice(i) <- defaultStockLegalEntity(customer);
        dateUserInvoice(i) <- dateReceipt(receipt);
        timeUserInvoice(i) <- timeReceipt(receipt);
        paymentConditionUserInvoice(i) <- paymentCondition;
        noteUserInvoice(i) <- note;
        createShipmentUserInvoice(i) <- TRUE;
        isPostedUserInvoice(i) <- TRUE;
        
        FOR ADDOBJ c = UserContractSku DO {
            supplierContractSku(c) <- legalEntityStock(departmentStoreReceipt(receipt));
            customerContractSku(c) <- customer;
            dateFromContract(c) <- dateReceipt(receipt);
            currencyContract(c) <- defaultCurrency();
            typeContractSku(c) <- ContractSkuType.sale;
            paymentConditionContract(c) <- paymentCondition;
            contractSkuUserInvoice(i) <- c;            
        }
        
        FOR receiptReceiptDetail(detail) == receipt ADDOBJ d = UserInvoiceDetail DO {
            userInvoiceUserInvoiceDetail(d) <- i;
            skuUserInvoiceDetail(d) <- skuReceiptDetail(detail);
            quantityUserInvoiceDetail(d) <- quantityReceiptDetail(detail);
            invoiceSumUserInvoiceDetail(d) <- sumReceiptDetail(detail);
            invoicePriceUserInvoiceDetail(d) <- sumReceiptDetail(detail)/quantityReceiptDetail(detail);
            priceUserInvoiceDetail(d) <- invoicePriceUserInvoiceDetail (d) * 100/(100 + calcValueVATUserInvoiceDetail(d));
        }
        
        FOR ADDOBJ p = Payment.Payment DO {
            datePayment(p) <- dateReceipt(receipt);
            timePayment(p) <- timeReceipt(receipt); 
            payerPayment(p) <- customer;
            beneficiaryPayment(p) <- legalEntityStock(departmentStoreReceipt(receipt));
            sumPayment(p) <- sum;
            sumContractPayment(p) <- sum;
            contractPayment(p) <- contractSkuUserInvoice(i);
            costOutContractLedgerInContractLedger(p, i) <- sum;
            isPostedPayment(p) <- TRUE;
            dataFiscalTypePayment(p) <- IF sidPaymentType(paymentType) == 'card' THEN 1 ELSE 0;
            
            DELETE detail WHERE receiptReceiptDetail(detail) == receipt;                                   
            DELETE receipt;
            
            IF modelGroupMachinery(groupCashRegisterCashRegister(currentCashRegister())) THEN {
                printReceiptInvoicePayment(i, p); 
                IF printReceiptResult() THEN 
                    apply();
                    createCurrentReceipt();
            }                 
            ELSE {
                apply();
                createCurrentReceipt(); 
            }
        }
    }
}

createPaymentInstallments 'Рассрочка' = ACTION (receipt) {
    IF quantityReceiptDetailReceipt(receipt) THEN {
        passportNumberLegalEntity() <- NULL;
        nameLegalEntity() <- NULL;
        phoneContact() <- NULL;
        postAddressContact() <- NULL;
        FORM paymentInstallments MODAL;
        IF formResult() == FormResult.ok THEN {
            FOR passportNumberLegalEntity(l) == passportNumberLegalEntity() DO { 
                createInvoiceReceipt(receipt, l, chosenNumeric('n'), chosenNumeric('pt'), chosenObject('pc'), noteInvoice());
            } ELSE {
                ADDOBJ LegalEntity;
                FOR l == addedObject() DO {
                    nameLegalEntity(l) <- nameLegalEntity();
                    passportNumberLegalEntity(l) <- passportNumberLegalEntity();
                    phoneContact(l) <- phoneContact();
                    postAddressContact(l) <- postAddressContact();
                    isCustomerLegalEntity(l) <- TRUE;
                    FOR shortNameOwnership(ownership) == 'Ф.Л.' DO {
                        ownershipLegalEntity(l) <- ownership;
                    }
                    FOR nameLegalEntityGroup(group) == 'Покупатели' DO {
                        legalEntityGroupLegalEntity(l) <- group;
                    }
                    createInvoiceReceipt(receipt, l, chosenNumeric('n'), chosenNumeric('pt'), chosenObject('pc'), noteInvoice());
                }
            }    
        } ELSE {
            isReadonly() <- NULL;
        }   
    }         
}

EXTEND FORM POS
    PROPERTIES(r) SHOWIF currentZReport() createPaymentInstallments
;
EXTEND DESIGN POS {
    misc {
        NEW invoice {
            alignment = STRETCH;
            caption = 'Накладная';
            ADD PROPERTY(createPaymentInstallments(r)) { fill = 1; focusable = FALSE; font = 'bold 24';  }
        }
    }
}