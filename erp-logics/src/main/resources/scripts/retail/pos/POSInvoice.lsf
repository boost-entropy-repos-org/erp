MODULE POSInvoice;

REQUIRE POS, SaleInvoiceContract, SaleReturnInvoiceContract, ContractPayment, SaleShipment, ZReportPayment;

NAMESPACE Sale;

passportPartyBContract 'Паспорт' = passportNumberLegalEntity(partyBContract(contract));
shortNameOwnershipPartyBContract 'Форма собственности (сокр.)' = shortNameOwnershipLegalEntity(partyBContract(contract));
balanceAContractCurrentDate 'Задолженность' = balanceAContractDate(contract, currentDate());
lastPaymentContract 'Платеж' = GROUP LAST payment BY contractPayment(payment) ORDER payment WHERE isCostedOutContractLedger(payment);

fiscalTypePayment 'Тип платежа' = ABSTRACT INTEGER (Payment.Payment); 
dataFiscalTypePayment 'Тип платежа' = DATA INTEGER (Payment.Payment);
fiscalTypePayment(p) += dataFiscalTypePayment(p); 

defaultCurrencyPaymentInstallments = DATA Currency (); 
nameDefaultCurrencyPaymentInstallmentsy 'Валюта рассрочки' = nameCurrency(defaultCurrencyPaymentInstallments()) PREFCHARWIDTH 30;

defaultTypeExchangePaymentInstallments  = DATA TypeExchange ();
nameDefaultTypeExchangePaymentInstallments 'Тип обмена рассрочки' = nameTypeExchange(defaultTypeExchangePaymentInstallments());

defaultTypeExchangeRepaymentInstallments  = DATA TypeExchange ();
nameDefaultTypeExchangeReaymentInstallments 'Тип обмена погашения' = nameTypeExchange(defaultTypeExchangeRepaymentInstallments());

defaultOperationPaymentInstallments = DATA Operation ();
nameDefaultOperationPaymentInstallments 'Операция рассрочки' = nameOperation(defaultOperationPaymentInstallments()); 

EXTEND FORM options
    PROPERTIES() nameDefaultCurrencyPaymentInstallmentsy, nameDefaultTypeExchangePaymentInstallments, nameDefaultTypeExchangeReaymentInstallments,
                 nameDefaultOperationPaymentInstallments
;

DESIGN options {
    pane {
        NEW paymentInstallmentsy {
            caption = 'Рассрочка';
            MOVE PROPERTY(nameDefaultOperationPaymentInstallments());
            MOVE PROPERTY(nameDefaultCurrencyPaymentInstallmentsy());
            MOVE PROPERTY(nameDefaultTypeExchangePaymentInstallments());
            MOVE PROPERTY(nameDefaultTypeExchangeReaymentInstallments());
        }    
    }
}

setPassportLegalEntity = ABSTRACT ACTION (); 
setNameEmployee = ABSTRACT ACTION (); 

isReadonly() = DATA LOCAL BOOLEAN ();

nameLegalEntity = DATA LOCAL STRING[150] ();     
passportNumberLegalEntity = DATA LOCAL STRING[10] ();
phoneContact = DATA LOCAL STRING[100] ();
postAddressContact = DATA LOCAL STRING[100] ();  
noteInvoice = DATA LOCAL STRING[255] ();  
idEmployee = DATA VARSTRING[100] ();
nameEmployee = DATA VARISTRING[60] ();

FORM paymentInstallments 'Рассрочка'
    PROPERTIES idEmployee() ON CHANGE setNameEmployee()  
    PROPERTIES READONLY nameEmployee()  
    
    PROPERTIES READONLYIF isReadonly() nameLegalEntity()     
        
    PROPERTIES READONLYIF isReadonly() passportNumberLegalEntity() ON CHANGE setPassportLegalEntity()
     
    PROPERTIES READONLYIF isReadonly() phoneContact()
    
    PROPERTIES READONLYIF isReadonly() postAddressContact()    
    
    PROPERTIES noteInvoice()        
    
    OBJECTS n = NUMERIC[16,2] FIXED PANEL
    PROPERTIES(n) sumPayment = OBJVALUE
    
    OBJECTS pt = PaymentType FIXED PANEL 
    PROPERTIES(pt) SELECTOR namePaymentType
    
    OBJECTS pc = PaymentCondition FIXED PANEL
    PROPERTIES(pc) SELECTOR descriptionPaymentCondition    
;

DESIGN paymentInstallments {
    NEW topContainer{
        type = CONTAINERH;
        NEW leftContainer {
            fill = 1;
            NEW supplierContainer {
                caption = 'Продавец';
                type = CONTAINERH;
                alignment = STRETCH; 
                MOVE PROPERTY(idEmployee()) {
                    caption = 'Код продавца';
                    fontSize = 24;
                    preferredCharWidth = 5;                    
                    panelCaptionAbove = TRUE;   
                    notNull = TRUE;                    
                }  
                MOVE PROPERTY(nameEmployee()) {
                    caption = 'ФИО продавца';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;   
                    alignment = STRETCH;   
                    preferredCharWidth = 48;                      
                    notNull = TRUE;
                }                              
            }
            NEW customerContainer {
                caption = 'Покупатель';        
                MOVE PROPERTY(passportNumberLegalEntity()) {
                    caption = 'Паспорт';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;   
                    alignment = STRETCH;   
                    notNull = TRUE;
                }
                MOVE PROPERTY(nameLegalEntity()) {
                    caption = 'ФИО';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;
                    notNull = TRUE;
                }
                MOVE PROPERTY(postAddressContact()) {
                    caption = 'Адрес';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;      
                    alignment = STRETCH;
                    notNull = TRUE;
                }   
                MOVE PROPERTY(phoneContact()) {
                    caption = 'Телефон';
                    fontSize = 24;
                    panelCaptionAbove = TRUE;      
                    alignment = STRETCH;
                    notNull = TRUE;
                }                                    
            }            
        }
        NEW sumContainer {
            caption = 'Платеж';
            MOVE PROPERTY(descriptionPaymentCondition(pc)) {
                caption = 'Условия рассрочки';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;
            }              
            MOVE PROPERTY(namePaymentType(pt)) {
                caption = 'Тип платежа';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;
            }                
            MOVE PROPERTY(sumPayment) {
                caption = 'Сумма первоначального платежа';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                alignment = STRETCH;
            }         
        }
    }
    NEW bottomContainer {
        caption = 'Примечание';
        MOVE PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelCaptionAbove = TRUE;
            preferredCharWidth = 76;
        }        
    }
    MOVE functions.box;
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

setPassportLegalEntity () += ACTION () {
    REQUEST STRING[10] INPUT;
    passportNumberLegalEntity() <- requestedString(); 
    FOR NOT requestCanceled() AND passportNumberLegalEntity(l) == requestedString() AND NOT isReadonly() DO {
        nameLegalEntity() <- nameLegalEntity(l);
        phoneContact() <- phoneContact(l);
        postAddressContact() <- postAddressContact(l);
        isReadonly() <- TRUE;
    }
}

setNameEmployee () += ACTION () {
    REQUEST VARSTRING[100] INPUT;
    FOR NOT requestCanceled() AND idEmployee(e) == requestedString() DO {
        idEmployee() <- requestedString();    
        nameEmployee() <- shortNameContact(e);
    } 
}

printReceiptInvoicePayment = ABSTRACT ACTION LIST (Sale.Invoice, Payment.Payment);
printReceiptReturnInvoicePayment = ABSTRACT ACTION LIST (SaleReturn.Invoice, Payment.Payment);
printReceiptResult = DATA LOCAL BOOLEAN ();

createInvoiceReceipt  = ACTION (receipt, customer, employee, sum, paymentType, paymentCondition, note) {       
    FOR ADDOBJ i = UserInvoice DO {
        operationUserInvoice(i) <- defaultOperationPaymentInstallments();
        supplierStockUserInvoice(i) <- departmentStoreReceipt(receipt);
        supplierUserInvoice(i) <- legalEntityStock(departmentStoreReceipt(receipt));
        customerUserInvoice(i) <- customer;
        customerStockUserInvoice(i) <- defaultStockLegalEntity(customer);
        dateUserInvoice(i) <- dateReceipt(receipt);
        timeUserInvoice(i) <- timeReceipt(receipt);
        paymentConditionUserInvoice(i) <- paymentCondition;
        priceListTypeUserInvoice(i) <- defaultPriceListTypeOperation(operationUserInvoice(i));
        noteUserInvoice(i) <- note;
        createShipmentUserInvoice(i) <- TRUE;
        isPostedUserInvoice(i) <- TRUE;
        createdUserUserInvoice(i) <- employee;
        postedUserUserInvoice(i) <- employee;
        FOR ADDOBJ c = UserContractSku DO {
            supplierContractSku(c) <- legalEntityStock(departmentStoreReceipt(receipt));
            customerContractSku(c) <- customer;
            dateFromContract(c) <- dateReceipt(receipt);
            currencyContract(c) <- defaultCurrencyPaymentInstallments();
            typeContractSku(c) <- ContractSkuType.sale;
            paymentConditionContract(c) <- paymentCondition;
            typeExchangeContract(c) <- defaultTypeExchangePaymentInstallments();
            contractSkuUserInvoice(i) <- c;            
        }
        
        FOR receiptReceiptDetail(detail) == receipt ADDOBJ d = UserInvoiceDetail DO {
            userInvoiceUserInvoiceDetail(d) <- i;
            skuUserInvoiceDetail(d) <- skuReceiptDetail(detail);
            quantityUserInvoiceDetail(d) <- quantityReceiptDetail(detail);
            invoiceSumUserInvoiceDetail(d) <- sumReceiptDetail(detail);
            shipmentSumUserInvoiceDetail(d) <- sumReceiptDetail(detail);
            valueVATUserInvoiceDetail(d) <- valueVATReceiptDetail(detail);
            invoicePriceUserInvoiceDetail(d) <- priceReceiptDetail(detail);
            priceUserInvoiceDetail(d) <- invoicePriceUserInvoiceDetail (d) * 100/(100 + valueVATUserInvoiceDetail(d));
        }
        
        FOR ADDOBJ p = Payment.Payment DO {
            datePayment(p) <- dateReceipt(receipt);
            timePayment(p) <- timeReceipt(receipt); 
            payerPayment(p) <- customer;
            beneficiaryPayment(p) <- legalEntityStock(departmentStoreReceipt(receipt));
            sumPayment(p) <- sum;
            contractPayment(p) <- contractSkuUserInvoice(i);
            isPostedPayment(p) <- TRUE;
            IF debtInContractLedger(i) >= sumContractPayment(p) THEN {
                costOutContractLedgerInContractLedger(p, i) <- sumContractPayment(p);    
            } ELSE IF debtInContractLedger(i) < sumContractPayment(p) THEN{
                costOutContractLedgerInContractLedger(p, i) <- debtInContractLedger(i);     
            } 
            dataFiscalTypePayment(p) <- IF sidPaymentType(paymentType) == 'card' THEN 1 ELSE 0;
            
            DELETE detail WHERE receiptReceiptDetail(detail) == receipt;                                   
            DELETE receipt;
            
            IF modelGroupMachinery(groupCashRegisterCashRegister(currentCashRegister())) AND NOT fiscalSkipReceipt(receipt) THEN {
                check();
                IF NOT canceled() THEN {
                    printReceiptInvoicePayment(i, p); 
                    IF printReceiptResult() THEN {
                        zReportPayment(p) <- currentZReport();      
                        typePayment(p) <- IF sidPaymentType(chosenObject('pt')) == 'card' THEN 1 ELSE 0;          
                        apply();
                        createCurrentReceipt();
                    }   
                } 
            }                 
            ELSE {
                apply();
                createCurrentReceipt(); 
            }
        }
    }
}

createPaymentInstallments 'Рассрочка' = ACTION (receipt) {
    IF quantityReceiptDetailReceipt(receipt) THEN {
        passportNumberLegalEntity() <- NULL;
        nameLegalEntity() <- NULL;
        phoneContact() <- NULL;
        postAddressContact() <- NULL;
        noteInvoice() <- NULL;
        idEmployee() <- NULL;
        nameEmployee() <- NULL;        
        FORM paymentInstallments MODAL;
        IF formResult() == FormResult.ok THEN {
            FOR passportNumberLegalEntity(l) == passportNumberLegalEntity() AND idEmployee(e) == idEmployee() DO { 
                createInvoiceReceipt(receipt, l, e, chosenNumeric('n'), chosenObject('pt'), chosenObject('pc'), noteInvoice());
            } ELSE {
                ADDOBJ LegalEntity;
                FOR l == addedObject() AND idEmployee(e) == idEmployee() DO {
                    nameLegalEntity(l) <- nameLegalEntity();
                    passportNumberLegalEntity(l) <- passportNumberLegalEntity();
                    phoneContact(l) <- phoneContact();
                    postAddressContact(l) <- postAddressContact();
                    isCustomerLegalEntity(l) <- TRUE;
                    FOR shortNameOwnership(ownership) == 'Ф.Л.' DO {
                        ownershipLegalEntity(l) <- ownership;
                    }
                    FOR nameLegalEntityGroup(group) == 'Покупатели' DO {
                        legalEntityGroupLegalEntity(l) <- group;
                    }
                    createInvoiceReceipt(receipt, l, e, chosenNumeric('n'), chosenObject('pt'), chosenObject('pc'), noteInvoice());
                }
            }    
        } ELSE {
            isReadonly() <- NULL;
        }   
    }         
}

backgroundContractReceipt (contract, receipt)= RGB(255,75,75) IF (balanceAContractCurrentDate(contract) (+) sumReceiptDetailReceipt(receipt) > 0.0); 

FORM prePayment 'Предоплата'
    OBJECTS r = Receipt FIXED PANEL 
    OBJECTS c = Contract
    PROPERTIES(c) READONLY BACKGROUND backgroundContractReceipt(c, r) namePartyBContract, passportPartyBContract, balanceAContractCurrentDate
    FILTERS balanceAContractCurrentDate(c) < 0,
            shortNameOwnershipPartyBContract(c) == 'Ф.Л.'
    
    PROPERTIES noteInvoice()
;

DESIGN prePayment {
    REMOVE r.box;
    MOVE c.box {
        PROPERTY(namePartyBContract(c)){
            caption = 'ФИО';    
        }   
    }
    NEW bottomContainer {
        caption = 'Примечание';
        MOVE PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelCaptionAbove = TRUE;
            preferredCharWidth = 76;
        }        
    }
    MOVE functions.box;
}

createInvoicePrePayment 'Предоплата'  = ACTION (receipt) {
    IF quantityReceiptDetailReceipt(receipt) THEN {
        noteInvoice() <- NULL;
        FORM prePayment OBJECTS r = receipt MODAL;
        IF formResult() == FormResult.ok THEN {
            FOR ADDOBJ i = UserInvoice DO {
                supplierStockUserInvoice(i) <- departmentStoreReceipt(receipt);
                supplierUserInvoice(i) <- legalEntityStock(departmentStoreReceipt(receipt));
                customerUserInvoice(i) <- partyBContract(chosenObject('c'));
                customerStockUserInvoice(i) <- defaultStockLegalEntity(partyBContract(chosenObject('c')));
                dateUserInvoice(i) <- dateReceipt(receipt);
                timeUserInvoice(i) <- timeReceipt(receipt);
                contractSkuUserInvoice(i) <- chosenObject('c');
                paymentConditionUserInvoice(i) <- paymentConditionContract(chosenObject('c'));
                noteUserInvoice(i) <- noteInvoice();
                createShipmentUserInvoice(i) <- TRUE;
                isPostedUserInvoice(i) <- TRUE;
                FOR p == lastPaymentContract(chosenObject('c')) DO {
                    IF isCostedOutContractLedger(p) < sumReceiptDetailReceipt(receipt) THEN {
                        costOutContractLedgerInContractLedger(p, i) <- isCostedOutContractLedger(p);    
                    } ELSE {
                        costOutContractLedgerInContractLedger(p, i) <- sumReceiptDetailReceipt(receipt);                     
                    }
                }
                FOR receiptReceiptDetail(detail) == receipt ADDOBJ d = UserInvoiceDetail DO {
                    userInvoiceUserInvoiceDetail(d) <- i;
                    skuUserInvoiceDetail(d) <- skuReceiptDetail(detail);
                    quantityUserInvoiceDetail(d) <- quantityReceiptDetail(detail);
                    invoiceSumUserInvoiceDetail(d) <- sumReceiptDetail(detail);
                    invoicePriceUserInvoiceDetail(d) <- sumReceiptDetail(detail)/quantityReceiptDetail(detail);
                    priceUserInvoiceDetail(d) <- invoicePriceUserInvoiceDetail (d) * 100/(100 + calcValueVATUserInvoiceDetail(d));
                }
            }
            DELETE detail WHERE receiptReceiptDetail(detail) == receipt;                                   
            DELETE receipt;            
            apply();
            createCurrentReceipt();             
        }
    }   
}


EXTEND FORM POS
    PROPERTIES(r) SHOWIF currentZReport() createPaymentInstallments, createInvoicePrePayment
;
DESIGN POS {
    misc {
        NEW invoice {
            alignment = STRETCH;
            caption = 'Накладная';
            MOVE PROPERTY(createPaymentInstallments(r)) {alignment = STRETCH; focusable = FALSE; font = 'bold 24';  }
            MOVE PROPERTY(createInvoicePrePayment(r)) {alignment = STRETCH; focusable = FALSE; font = 'bold 24';  }
        }
    }
}