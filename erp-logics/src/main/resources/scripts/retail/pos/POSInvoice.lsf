MODULE POSInvoice;

REQUIRE POS, SaleInvoiceContract, ContractPayment, SaleShipment;

NAMESPACE Sale;

fiscalTypePayment 'Тип платежа' = ABSTRACT INTEGER (Payment.Payment); 
dataFiscalTypePayment 'Тип платежа' = DATA INTEGER (Payment.Payment);
fiscalTypePayment(p) += dataFiscalTypePayment(p); 

EXTEND FORM payment 
    PROPERTIES(p) fiscalTypePayment
;

EXTEND DESIGN payment {
    paramContainer {
        ADD PROPERTY(fiscalTypePayment(p));
    }
} 
  
setPassportPhoneLegalEntity = ABSTRACT ACTION (STRING[10]); 

isReadonly() = DATA LOCAL BOOLEAN ();

FORM paymentInstallments 'Рассрочка'
    OBJECTS str1 = STRING[150] FIXED PANEL
    PROPERTIES(str1) READONLYIF isReadonly() nameLegalEntity = OBJVALUE     
        
    OBJECTS str2 = STRING[10] FIXED PANEL 
    PROPERTIES(str2) READONLYIF isReadonly() passportNumberLegalEntity = OBJVALUE ON CHANGE setPassportPhoneLegalEntity(str2)
     
    OBJECTS str3 = STRING[30] FIXED PANEL 
    PROPERTIES(str3) READONLYIF isReadonly() phoneContact = OBJVALUE
    
    OBJECTS str4 = STRING[100] FIXED PANEL 
    PROPERTIES(str4) READONLYIF isReadonly() postAddressContact = OBJVALUE    
    
    OBJECTS str5 = STRING[255] FIXED PANEL 
    PROPERTIES(str5) noteInvoice = OBJVALUE        
    
    OBJECTS n = NUMERIC[16,2] FIXED PANEL
    PROPERTIES(n) sumPayment = OBJVALUE
    
    OBJECTS pt = PaymentType FIXED PANEL 
    PROPERTIES(pt) SELECTOR namePaymentType
;

DESIGN paymentInstallments FROM DEFAULT {
    NEW topContainer{
        type = CONTAINERH;
        NEW customerContainer {
            caption = 'Покупатель';
            ADD PROPERTY(passportNumberLegalEntity) {
                caption = 'Паспорт';
                fontSize = 24;
                panelLabelAbove = TRUE;   
                alignment = STRETCH;   
                notNull = TRUE;
            }
            ADD PROPERTY(nameLegalEntity) {
                caption = 'ФИО';
                fontSize = 24;
                panelLabelAbove = TRUE;
                notNull = TRUE;
            }
            ADD PROPERTY(postAddressContact) {
                caption = 'Адрес';
                fontSize = 24;
                panelLabelAbove = TRUE;      
                alignment = STRETCH;
                notNull = TRUE;
            }   
            ADD PROPERTY(phoneContact) {
                caption = 'Телефон';
                fontSize = 24;
                panelLabelAbove = TRUE;      
                alignment = STRETCH;
                notNull = TRUE;
            }                                    
        }
        NEW sumContainer {
            caption = 'Платеж';
            ADD PROPERTY(namePaymentType(pt)) {
                caption = 'Тип платежа';
                fontSize = 32;   
                panelLabelAbove = TRUE;
                preferredCharWidth = 12;
            }                
            ADD PROPERTY(sumPayment) {
                caption = 'Сумма первоначального платежа';
                fontSize = 32;   
                panelLabelAbove = TRUE;
                alignment = STRETCH;
            }         
        }
    }
    NEW bottomContainer {
        caption = 'Примечание';
        ADD PROPERTY(noteInvoice) {
            caption = '';
            fontSize = 24;
            panelLabelAbove = TRUE;      
            alignment = STRETCH;
            preferredCharWidth = 72;
        }        
    }
    ADD functions.box;
}

setPassportPhoneLegalEntity (passport) += ACTION (passport) {
    REQUEST STRING[150] INPUT;
    SEEK paymentInstallments.str2 requestedString(); 
    FOR passportNumberLegalEntity(l) == passport DO {
        SEEK paymentInstallments.str1 nameLegalEntity(l);
        SEEK paymentInstallments.str3 phoneContact(l);
        isReadonly() <- TRUE;
        formRefresh();         
    }
} 

printReceiptInvoicePayment = ABSTRACT ACTION LIST (Sale.Invoice, Payment.Payment);
printReceiptResult = DATA LOCAL BOOLEAN ();

createInvoiceReceipt 'Создать' = ACTION (receipt, customer, sum, paymentType, note) {       // todo: сделать необходимые округления
    FOR ADDOBJ i = UserInvoice DO {
        supplierStockUserInvoice(i) <- departmentStoreReceipt(receipt);
        supplierUserInvoice(i) <- legalEntityStock(departmentStoreReceipt(receipt));
        customerUserInvoice(i) <- customer;
        customerStockUserInvoice(i) <- defaultStockLegalEntity(customer);
        dateUserInvoice(i) <- dateReceipt(receipt);
        timeUserInvoice(i) <- timeReceipt(receipt);
        noteUserInvoice(i) <- note;
        createShipmentUserInvoice(i) <- TRUE;
        isPostedUserInvoice(i) <- TRUE;
        
        FOR ADDOBJ c = UserContractSku DO {
            supplierContractSku(c) <- legalEntityStock(departmentStoreReceipt(receipt));
            customerContractSku(c) <- customer;
            dateFromContract(c) <- dateReceipt(receipt);
            currencyContract(c) <- defaultCurrency();
            typeContractSku(c) <- ContractSkuType.sale;
            contractSkuUserInvoice(i) <- c;            
        }
        
        FOR receiptReceiptDetail(detail) == receipt ADDOBJ d = UserInvoiceDetail DO {
            userInvoiceUserInvoiceDetail(d) <- i;
            skuUserInvoiceDetail(d) <- skuReceiptDetail(detail);
            quantityUserInvoiceDetail(d) <- quantityReceiptDetail(detail);
            invoiceSumUserInvoiceDetail(d) <- sumReceiptDetail(detail);
            invoicePriceUserInvoiceDetail(d) <- sumReceiptDetail(detail)/quantityReceiptDetail(detail);
            priceUserInvoiceDetail(d) <- invoicePriceUserInvoiceDetail (d) * 100/(100 + calcValueVATUserInvoiceDetail(d));
        }
        
        FOR ADDOBJ p = Payment.Payment DO {
            datePayment(p) <- dateReceipt(receipt);
            timePayment(p) <- timeReceipt(receipt); 
            payerPayment(p) <- customer;
            beneficiaryPayment(p) <- legalEntityStock(departmentStoreReceipt(receipt));
            sumPayment(p) <- sum;
            sumContractPayment(p) <- sum;
            contractPayment(p) <- contractSkuUserInvoice(i);
            costOutContractLedgerInContractLedger(p, i) <- sum;
            isPostedPayment(p) <- TRUE;
            dataFiscalTypePayment(p) <- IF sidPaymentType(paymentType) == 'card' THEN 1 ELSE 0;
            
            DELETE detail WHERE receiptReceiptDetail(detail) == receipt;                                   
            DELETE receipt;
            
            IF modelGroupMachinery(groupCashRegisterCashRegister(currentCashRegister())) THEN {
                printReceiptInvoicePayment(i, p); 
                IF printReceiptResult() THEN 
                    apply();
                    createCurrentReceipt();
            }                 
            ELSE {
                apply();
                createCurrentReceipt(); 
            }
        }
    }
}

createPaymentInstallments 'Рассрочка' = ACTION (receipt) {
    IF quantityReceiptDetailReceipt(receipt) THEN {
        FORM paymentInstallments MODAL;
        IF formResult() == FormResult.ok THEN {
            ADDOBJ LegalEntity;
            FOR l == addedObject() DO {
                nameLegalEntity(l) <- chosenString('str1');
                passportNumberLegalEntity(l) <- chosenString('str2');
                phoneContact(l) <- chosenString('str3');
                postAddressContact(l) <- chosenString('str4');
                isCustomerLegalEntity(l) <- TRUE;
                FOR shortNameOwnership(ownership) == 'Ф.Л.' DO {
                    ownershipLegalEntity(l) <- ownership;
                }
                FOR nameLegalEntityGroup(group) == 'Покупатели' DO {
                    legalEntityGroupLegalEntity(l) <- group;
                }
                createInvoiceReceipt(receipt, l, chosenNumeric('n'), chosenNumeric('pt'), chosenNumeric('str5'));
            }
        } ELSE {
            isReadonly() <- NULL;
        }   
    }         
}

EXTEND FORM POS
    PROPERTIES(r) SHOWIF currentZReport() createPaymentInstallments
;
EXTEND DESIGN POS {
    misc {
        NEW invoice {
            alignment = STRETCH;
            caption = 'Накладная';
            ADD PROPERTY(createPaymentInstallments(r)) { fill = 1; focusable = FALSE; font = 'bold 24';  }
        }
    }
}