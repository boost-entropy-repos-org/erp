MODULE ZReport;

REQUIRE System,
        Utils,
        Document,
        Retail,
        Currency,
        Store,
        StoreSkuLedger,
        Stock,
        StockTax,
        CashRegister,
        SaleLedger,
        PriceRoundStore,
        PriceListType,
        StockSkuDocument,
        Item;
        
// ------------------------------------- Объявление Z-отчета ---------------------------------------- //

CLASS ZReport 'Z-отчет (открытый)';
TABLE zReport (ZReport);

@defineExternalizable(zReport, VARSTRING[100]);
@defineDocumentHeaderTime(ZReport);
@defineDocumentHeaderCreated(ZReport);

@defineDocumentHeaderPosted(ZReport);
@defineDocumentHeaderClosed(ZReport);

@deriveDocumentHeaderTimePrefix(ZReport, );
@defineDocumentHeaderDepartmentStore(zReport);

@defineDocumentHeaderNumber(ZReport);

idDepartmentStoreZReport 'Код' (zReport) = idDepartmentStore(departmentStoreZReport(zReport));

cashRegisterZReport (zReport) = DATA CashRegister(ZReport);
numberCashRegisterZReport 'Касса Z-отчета' (zReport) = nppMachinery(cashRegisterZReport(zReport)) IN documentPrm;

basisZReport 'Основание' (zReport) = 'Z-отчет №' + numberZReport(zReport) + ' с кассы ' + numberCashRegisterZReport(zReport) + ' от ' + dateZReport(zReport) IN documentPrm;

departmentStoreZReport(zReport) <- departmentStoreCashRegister(cashRegisterZReport(zReport))
    WHEN CHANGED(cashRegisterZReport(zReport));

descriptionZReport 'Название документа' (zReport) =  VARSTRING[200] (CONCAT '', 'Продажа по кассе ' +numberCashRegisterZReport(zReport),
                                            ' отдела ' + nameDepartmentStoreZReport(zReport),
                                            ' от ' + dateZReport(zReport));
    
succeededExtraCheckZReport 'Проверено' (zReport) = DATA BOOLEAN(ZReport);   
//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS Receipt 'Чек';
TABLE receipt (Receipt);

@defineCreated(Receipt);
@defineExternalizable(receipt, VARSTRING[100]);


CLASS ABSTRACT ReceiptDetail 'Строка чека';
TABLE receiptDetail (ReceiptDetail);

CLASS ReceiptSaleDetail 'Строка продажи' : ReceiptDetail;
TABLE receiptSaleDetail (ReceiptSaleDetail);

CLASS ReceiptReturnDetail 'Строка возврата' : ReceiptDetail;
TABLE receiptReturnDetail (ReceiptReturnDetail);

@defineExternalizable(receiptDetail, VARSTRING[100]);

numberReceiptDetail 'Номер позиции чека' = DATA INTEGER (ReceiptDetail); 

@defineDocumentRelation(zReport, Receipt);
numberZReportReceipt 'Номер Z-отчета' (receipt) = numberZReport(zReportReceipt(receipt)) IN recognize;
cashRegisterReceipt (receipt) = cashRegisterZReport(zReportReceipt(receipt));
numberCashRegisterReceipt 'Номер кассы' (receipt) = nppMachinery(cashRegisterReceipt(receipt)) IN recognize;
numberGroupCashRegisterReceipt 'Номер кассы' (receipt) = nppGroupMachineryMachinery(cashRegisterReceipt(receipt)) IN recognize;

groupCashRegisterReceipt (receipt) = groupCashRegisterCashRegister(cashRegisterReceipt(receipt));

cashRegisterModelReceipt (receipt) = cashRegisterModelGroupCashRegister(groupCashRegisterCashRegister(cashRegisterReceipt(receipt)));
sidCashRegisterModelReceipt 'Код модели' (receipt) = sidModel(cashRegisterModelReceipt(receipt));

employeeReceipt = DATA Employee(Receipt);
idEmployeeReceipt (receipt) = idEmployee(employeeReceipt(receipt));
firstNameEmployeeReceipt (receipt) = firstNameContact(employeeReceipt(receipt));
lastNameEmployeeReceipt (receipt) = lastNameContact(employeeReceipt(receipt));
nameEmployeeReceipt 'Кассир' (receipt) = nameContact(employeeReceipt(receipt));
employeeReceipt(receipt) <- currentUser() WHEN SET(receipt IS Receipt);

@defineDocumentHeaderTime(Receipt);
@deriveDocumentHeaderTimePrefix(Receipt, );

@defineDocumentDetailDepartmentStoreCustom(zReport, receipt);
@defineDocumentDetailPosted(zReport, Receipt);
@defineDocumentDetailClosed(zReport, Receipt);

skipReceipt 'Не проводить по регистру' = DATA BOOLEAN (Receipt); 

@defineDocumentRelation(receipt, ReceiptSaleDetail);
@defineDocumentRelation(receipt, ReceiptReturnDetail);

@defineDocumentHeaderCurrency (receipt);
@deriveDocumentCurrency (receipt, departmentStore);

@defineDocumentHeaderNote(Receipt);

@defineDocumentDetailCurrency (receipt, receiptSaleDetail);
@defineDocumentDetailCurrency (receipt, receiptReturnDetail);

receiptReceiptDetail = ABSTRACT Receipt (ReceiptDetail) PERSISTENT INDEXED;
receiptReceiptDetail(detail) += receiptReceiptReturnDetail(detail);
receiptReceiptDetail(detail) += receiptReceiptSaleDetail(detail);

zReportReceiptSaleDetail(d) = zReportReceipt(receiptReceiptSaleDetail(d)); 
zReportReceiptReturnDetail(d) = zReportReceipt(receiptReceiptReturnDetail(d)); 
zReportReceiptDetail (d) = zReportReceipt(receiptReceiptDetail(d));
numberZReportReceiptDetail(d) = numberZReport(zReportReceiptDetail(d));

sidCashRegisterModelReceiptDetail 'Код модели' (receiptDetail) = sidCashRegisterModelReceipt(receiptReceiptDetail(receiptDetail));
numberCashRegisterReceiptDetail 'Номер кассы' (receiptDetail) = numberCashRegisterReceipt(receiptReceiptDetail(receiptDetail));

typeReceiptDetail 'Тип' = ABSTRACT STRING[10] (ReceiptDetail) MINCHARWIDTH 10 PREFCHARWIDTH 12 PERSISTENT;
typeReceiptDetail(detail) += 'Продажа' IF detail IS ReceiptSaleDetail;
typeReceiptDetail(detail) += 'Возврат' IF detail IS ReceiptReturnDetail;

@defineDocumentDetailIndex(receipt, ReceiptDetail);

@defineDocumentDetailTime(receipt, ReceiptSaleDetail);
@defineDocumentDetailTime(receipt, ReceiptReturnDetail);

dateReceiptDetail 'Дата' = ABSTRACT DATE (ReceiptDetail) PERSISTENT;
dateReceiptDetail(detail) += dateReceiptReturnDetail(detail);
dateReceiptDetail(detail) += dateReceiptSaleDetail(detail);

dateTimeReceiptDetail 'Дата/время' = ABSTRACT DATETIME (ReceiptDetail) PERSISTENT INDEXED;
dateTimeReceiptDetail(detail) += dateTimeReceiptReturnDetail(detail);
dateTimeReceiptDetail(detail) += dateTimeReceiptSaleDetail(detail);

// ------------ Проведен --------------- // 

isPostedReceiptDetail 'Проведен' (receiptDetail) = ABSTRACT BOOLEAN (ReceiptDetail) PERSISTENT;

@defineDocumentDetailPosted(receipt, ReceiptSaleDetail);
isPostedReceiptDetail(d) += isPostedReceiptSaleDetail(d);

@defineDocumentDetailPosted(receipt, ReceiptReturnDetail);
isPostedReceiptDetail(d) += isPostedReceiptReturnDetail(d); 

// ------------ Закрыт --------------- // 
isClosedReceiptDetail 'Закрыт' (receiptDetail) = ABSTRACT BOOLEAN (ReceiptDetail) PERSISTENT;

@defineDocumentDetailClosed(receipt, ReceiptSaleDetail);
isClosedReceiptDetail(d) += isClosedReceiptSaleDetail(d);
 
@defineDocumentDetailClosed(receipt, ReceiptReturnDetail);
isClosedReceiptDetail(d) += isClosedReceiptReturnDetail(d);

// --------------- Магазин --------------- //
departmentStoreReceiptDetail (receiptDetail) = ABSTRACT DepartmentStore (ReceiptDetail) PERSISTENT;
nameDepartmentStoreReceiptDetail 'Склад' (d) = nameDepartmentStore(departmentStoreReceiptDetail(d));
storeReceiptDetail (receiptDetail) = storeDepartmentStore(departmentStoreReceiptDetail(receiptDetail));

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptSaleDetail);
departmentStoreReceiptDetail (d) += departmentStoreReceiptSaleDetail(d);
 
@defineDocumentDetailDepartmentStoreCustom(receipt, receiptReturnDetail);
departmentStoreReceiptDetail (d) += departmentStoreReceiptReturnDetail(d); 

// Валюта
@defineDocumentDetailCurrency(receipt, receiptDetail);

@defineDocumentDetailSku(receiptSale, sku);
@defineDocumentDetailSku(receiptReturn, sku);
skuReceiptDetail (receiptDetail) = MULTI skuReceiptReturnDetail(receiptDetail), skuReceiptSaleDetail(receiptDetail);
idSkuReceiptDetail 'Код' (receiptDetail) = idSku(skuReceiptDetail(receiptDetail));
idSkuGroupReceiptDetail 'Код' (receiptDetail) = idSkuGroup(skuGroupSku(skuReceiptDetail(receiptDetail)));
shortNameUOMSkuReceiptDetail 'Ед. изм.' (receiptDetail) = shortNameUOMSku(skuReceiptDetail(receiptDetail));


skipReceiptSaleDetail 'Не проводить по регистру' (receiptDetail) = skipReceipt(receiptReceiptSaleDetail(receiptDetail)) OR skuTypeSku(skuReceiptSaleDetail(receiptDetail)) == SkuType.skuTypeCharge; 
skipReceiptReturnDetail 'Не проводить по регистру' (receiptDetail) = skipReceipt(receiptReceiptReturnDetail(receiptDetail)); 

activeReceiptSaleDetail(d) = isPostedReceiptSaleDetail(d) AND NOT skipReceiptSaleDetail(d); 
activeReceiptReturnDetail(d) = isPostedReceiptReturnDetail(d) AND NOT skipReceiptReturnDetail(d); 

setAttributesReceiptDetail = ABSTRACT ACTION (ReceiptDetail);

changeDialogSkuReceiptDetail  = ACTION (detail) {
    setAttributesReceiptDetail(detail); 
    REQUEST OBJECT s
        IF skuReceiptDetail(detail) THEN {
            FORM skus OBJECTS s = skuReceiptDetail(detail) MODAL;
        } ELSE {
            FORM skus MODAL;
        }
                                              
    IF formResult() == FormResult.ok THEN {
        skuReceiptDetail(detail) <- requestedObject();
    }
} TOOLBAR;

//партии
@defineDocumentAbstractDetailBatchCustom(receiptDetail, batch);
@defineDocumentDetailBatchCustom(receiptSaleDetail, batch);
@defineDocumentDetailBatchCustom(receiptReturnDetail, batch);

batchReceiptDetail(detail) += batchReceiptSaleDetail(detail);
batchReceiptDetail(detail) += batchReceiptReturnDetail(detail);

replaceSkuBatch(s, b) += ACTION (s, b){ skuReceiptSaleDetail(detail) <- s WHERE batchReceiptSaleDetail(detail) == b;}
replaceSkuBatch(s, b) += ACTION (s, b){ skuReceiptReturnDetail(detail) <- s WHERE batchReceiptReturnDetail(detail) == b;}

changeBatchReceiptDetail = ACTION (detail) {
    FORM dialogBatchStock OBJECTS st = departmentStoreReceiptDetail(detail),
                             t = dateTimeReceiptDetail(detail),
                             sk = skuReceiptDetail(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        batchReceiptDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batchReceiptDetail(detail) <- NULL;
    }
}

nameSkuReceiptDetail 'Товар' (d) = IF batchReceiptDetail(d) THEN documentNameSkuBatch(batchReceiptDetail(d)) ELSE nameSku(skuReceiptDetail(d)) IN recognize;

explicitBatchLedgerReceipt(receipt) = explicitBatchLedgerDepartmentStore(departmentStoreZReport(zReportReceipt(receipt)));
notExplicitBatchLedgerReceipt(receipt) = departmentStoreZReport(zReportReceipt(receipt)) AND NOT explicitBatchLedgerReceipt(receipt);

numberReceipt 'Номер чека' (receipt) = DATA INTEGER (Receipt) IN documentHeader;
numberReceiptReceiptDetail 'Номер чека' (receiptDetail) = numberReceipt(receiptReceiptDetail(receiptDetail));

maxNumberReceiptZReport 'Максимальный номер чека' (zReport) = GROUP MAX numberReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT;

GROUP receiptDiscount 'Дисконтная карта' : public;

idBarcodeReceiptDetail 'Штрихкод' (receiptDetail) = DATA STRING[15] (ReceiptDetail) FIXEDCHARWIDTH 14 INDEXED;

// Возвраты

receiptSaleDetailReceiptReturnDetail = DATA ReceiptSaleDetail (ReceiptReturnDetail);
receiptSaleReceiptReturnDetail (returnDetail) = receiptReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(returnDetail));

descriptionSaleReceiptReturnDetail 'Чек продажи' (returnDetail) = CONCAT ' ',
    'Чек № ' + numberReceipt(receiptSaleReceiptReturnDetail(returnDetail)),
    'от ' + dateTimeReceipt(receiptSaleReceiptReturnDetail(returnDetail)),
    'позиция ' + indexReceiptDetail(receiptSaleDetailReceiptReturnDetail(returnDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

// Количества и суммы

quantityReceiptSaleDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (ReceiptSaleDetail);
priceReceiptSaleDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (ReceiptSaleDetail);
sumReceiptSaleDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptSaleDetail);
discountPercentReceiptSaleDetail 'Процент скидки' (receiptDetail) = DATA NUMERIC[6,2] (ReceiptSaleDetail);
discountPercentReceipt (receipt)= GROUP SUM 1 IF discountPercentReceiptSaleDetail(detail) BY receiptReceiptDetail(detail);
discountSumReceiptSaleDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptSaleDetail);

priceSumReceiptSaleDetail 'Сумма без скидки' = roundPriceRoundCondition(quantityReceiptSaleDetail(detail) * priceReceiptSaleDetail(detail), roundConditionDepartmentStore(departmentStoreReceiptSaleDetail(detail)));

//discountSumReceiptSaleDetail (detail) <- round(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
//                                               priceRoundCurrency(currencyReceiptSaleDetail (detail)))
//    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
//         CHANGED (priceReceiptSaleDetail(detail)) OR
//         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
//         CHANGED (currencyReceiptSaleDetail (detail));
calcDiscountSumReceiptSaleDetail (detail) = roundPriceRoundCondition(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
                                               roundDiscountConditionDepartmentStore(departmentStoreReceiptSaleDetail(detail)));

calcSumReceiptSaleDetail (detail) = priceSumReceiptSaleDetail(detail) (-) discountSumReceiptSaleDetail(detail);
sumReceiptSaleDetail (detail) <- calcSumReceiptSaleDetail(detail)
    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
         CHANGED (priceReceiptSaleDetail(detail)) OR
         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
         CHANGED (discountSumReceiptSaleDetail(detail)) OR
         CHANGED (departmentStoreReceiptSaleDetail(detail));

quantityReceiptReturnDetail 'Количество' (receiptDetail) = DATA NUMERIC[14,3] (ReceiptReturnDetail);
priceReceiptReturnDetail 'Цена' (receiptDetail) = DATA NUMERIC[14,2] (ReceiptReturnDetail);
sumReceiptReturnDetail 'Сумма' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptReturnDetail);
discountSumReceiptReturnDetail 'Сумма скидки' (receiptDetail) = DATA NUMERIC[16,2] (ReceiptReturnDetail);

quantityReturnedReceiptSaleDetail 'Возвращено' (saleDetail) = GROUP SUM quantityReceiptReturnDetail(returnDetail) BY receiptSaleDetailReceiptReturnDetail(returnDetail) PERSISTENT;
CONSTRAINT quantityReturnedReceiptSaleDetail(detail) > quantityReceiptSaleDetail (detail) MESSAGE 'Количество возвратов по строке чека превышает проданное количество';

overSumReceiptReturnDetail (d) = roundPriceRoundCondition(
        (quantityReceiptReturnDetail(d) * sumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(d)) / 
        (quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(d)) IF quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(d))!=0)), 
    roundConditionDepartmentStore(departmentStoreReceiptReturnDetail (d)));

priceSumReceiptReturnDetail 'Сумма без скидки' = roundPriceRoundCondition(
        quantityReceiptReturnDetail(d) * priceReceiptReturnDetail(d),
    roundConditionDepartmentStore(departmentStoreReceiptReturnDetail(d)));

sumReceiptReturnDetail (detail) <- IF receiptSaleDetailReceiptReturnDetail(detail) 
                                        THEN overSumReceiptReturnDetail(detail)
                                        ELSE priceSumReceiptReturnDetail(detail)
                                            
                                   WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                        CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                        CHANGED(departmentStoreReceiptReturnDetail(detail));

discountSumReceiptReturnDetail (detail) <- IF receiptSaleDetailReceiptReturnDetail(detail) THEN
                                                roundPriceRoundCondition(quantityReceiptReturnDetail(detail) * discountSumReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)) / quantityReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail)),
                                                    roundDiscountConditionDepartmentStore(departmentStoreReceiptSaleDetail(receiptSaleDetailReceiptReturnDetail(detail))))
                                           ELSE
                                                quantityReceiptReturnDetail(detail) * priceReceiptReturnDetail(detail) - sumReceiptReturnDetail(detail)
                                           WHEN CHANGED(quantityReceiptReturnDetail(detail)) OR
                                                CHANGED(sumReceiptReturnDetail(detail)) OR
                                                CHANGED(receiptSaleDetailReceiptReturnDetail(detail)) OR
                                                CHANGED(departmentStoreReceiptReturnDetail(detail));

quantityReceiptDetail 'Количество' = ABSTRACT NUMERIC[14,3] (ReceiptDetail) PERSISTENT;
quantityReceiptDetail(detail) += quantityReceiptReturnDetail(detail);
quantityReceiptDetail(detail) += quantityReceiptSaleDetail(detail);

priceReceiptDetail 'Цена' = ABSTRACT NUMERIC[14,2] (ReceiptDetail) PERSISTENT;
priceReceiptDetail(detail) += priceReceiptReturnDetail(detail);
priceReceiptDetail(detail) += priceReceiptSaleDetail(detail);

sumReceiptDetail 'Сумма' = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
sumReceiptDetail(detail) += sumReceiptReturnDetail(detail);
sumReceiptDetail(detail) += sumReceiptSaleDetail(detail);

discountSumReceiptDetail 'Сумма скидки' = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
discountSumReceiptDetail(d) += discountSumReceiptSaleDetail(d);
discountSumReceiptDetail(d) += discountSumReceiptReturnDetail(d);

fullSumReceiptSaleDetail 'Сумма без скидки' (d) = sumReceiptSaleDetail(d) (+) discountSumReceiptSaleDetail(d);
fullSumReceiptReturnDetail 'Сумма без скидки' (d) = sumReceiptReturnDetail(d) (+) discountSumReceiptReturnDetail(d);
fullSumReceiptDetail 'Сумма без скидки' (d) = sumReceiptDetail(d) (+) discountSumReceiptDetail(d);

sumReceiptSaleDetailReceipt 'Сумма продажи' (receipt) = GROUP SUM sumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSum PERSISTENT;

sumReceiptReturnDetailReceipt 'Сумма возврата' (receipt) = GROUP SUM sumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSum PERSISTENT;

signedSumReceiptDetail = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
signedSumReceiptDetail(detail) += -sumReceiptReturnDetail(detail);
signedSumReceiptDetail(detail) += sumReceiptSaleDetail(detail);

signedQuantityReceiptDetail 'Количество' = ABSTRACT NUMERIC[14,3] (ReceiptDetail) PERSISTENT;
signedQuantityReceiptDetail(detail) += -quantityReceiptReturnDetail(detail);
signedQuantityReceiptDetail(detail) += quantityReceiptSaleDetail(detail);

sumReceiptDetailReceipt 'Сумма чека' (receipt) = GROUP SUM signedSumReceiptDetail(detail)
    BY receiptReceiptDetail(detail);

sumSkuReceiptDetailReceipt 'Сумма чека по товарам' (receipt) = 
    GROUP SUM signedSumReceiptDetail(detail) IF skuReceiptDetail(detail) BY receiptReceiptDetail(detail);
//sumReceiptDetailReceipt 'Сумма чека' (receipt) = sumReceiptSaleDetailReceipt(receipt) (-) sumReceiptReturnDetailReceipt(receipt) PERSISTENT;
sumReceiptDetailReceiptDetail 'Сумма чека' (receiptDetail) = sumReceiptDetailReceipt(receiptReceiptDetail(receiptDetail));

discountSumSaleReceiptDetailSaleReceipt 'Сумма скидки (продажи)' (receipt) = GROUP SUM discountSumReceiptSaleDetail(receiptDetail)
    BY receiptReceiptSaleDetail (receiptDetail) IN documentSum;
discountSumSaleReceipt 'Сумма скидки (продажи) по чеку' (receipt) = DATA NUMERIC[16,2] (Receipt);

discountSumReturnReceiptDetailReturnReceipt 'Сумма скидки (возврат)' (receipt) = GROUP SUM discountSumReceiptReturnDetail(receiptDetail)
    BY receiptReceiptReturnDetail (receiptDetail) IN documentSum;
discountSumReturnReceipt 'Сумма скидки (возврат) по чеку' (receipt) = DATA NUMERIC[16,2] (Receipt);

discountSumReceiptDetailReceipt 'Сумма скидки' (receipt) = discountSumSaleReceiptDetailSaleReceipt(receipt) (-) discountSumReturnReceiptDetailReturnReceipt(receipt) PERSISTENT;
discountSumReceipt 'Сумма скидки по чеку' (receipt) = discountSumSaleReceipt(receipt) (-) discountSumReturnReceipt(receipt);

@defineDocumentHeaderCount(receipt);

@defineDocumentHeaderQuantity(receipt);
@defineDocumentHeaderSkuQuantity(receipt, sku);
@defineDocumentHeaderSkuQuantity(receipt, receiptSaleDetail, sku);

// -------------------------------------------------- НДС ------------------------------------------------ //

VATReceiptSaleDetail = DATA Range (ReceiptSaleDetail);
CONSTRAINT taxRange(VATReceiptSaleDetail(detail)) != Tax.taxVAT OR
           countryRange(VATReceiptSaleDetail(detail)) != countryStock(departmentStoreReceiptSaleDetail(detail))
           CHECKED BY VATReceiptSaleDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина: продажа';

VATReceiptSaleDetail(d) <- VATSkuStock(skuReceiptSaleDetail(d), departmentStoreReceiptSaleDetail(d))
    WHEN CHANGED(skuReceiptSaleDetail(d)) OR CHANGED(departmentStoreReceiptSaleDetail(d));

VATReceiptReturnDetail = DATA Range (ReceiptReturnDetail);
CONSTRAINT taxRange(VATReceiptReturnDetail(detail)) != Tax.taxVAT OR
           countryRange(VATReceiptReturnDetail(detail)) != countryStock(departmentStoreReceiptReturnDetail(detail))
           CHECKED BY VATReceiptReturnDetail
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина: возврат';

VATReceiptReturnDetail(d) <- VATSkuStock(skuReceiptReturnDetail(d), departmentStoreReceiptReturnDetail(d))
    WHEN CHANGED(skuReceiptReturnDetail(d)) OR CHANGED(departmentStoreReceiptReturnDetail(d));

VATReceiptDetail 'НДС' = ABSTRACT Range(ReceiptDetail) PERSISTENT;
numberVATReceiptDetail 'НДС, номер' (receiptDetail) = numberRange(VATReceiptDetail(receiptDetail));
valueVATReceiptDetail 'НДС, %' (receiptDetail) = DATA NUMERIC[10,5] (ReceiptDetail) PERSISTENT;
WHEN SESSION CHANGED(VATReceiptDetail(receiptDetail)) OR CHANGED(dateReceiptDetail(receiptDetail)) DO {
    valueVATReceiptDetail(receiptDetail) <- valueRateRangeDate(VATReceiptDetail(receiptDetail), dateReceiptDetail(receiptDetail));
}
// todo: после запуска у  всех клиентов удалить
isDataValueVATReceiptDetail = DATA BOOLEAN ();
onStarted() += ACTION () {
    FOR d IS ReceiptDetail AND NOT isDataValueVATReceiptDetail() DO {
        valueVATReceiptDetail(d) <- valueRateRangeDate(VATReceiptDetail(d), dateReceiptDetail(d));    
    }    
    isDataValueVATReceiptDetail() <- TRUE;
    apply();
}

sumVATReceiptDetail 'Сумма НДС' (d) = NUMERIC[16,2](roundPriceCurrency(sumReceiptDetail(d) * valueVATReceiptDetail(d) / (100 + valueVATReceiptDetail(d)), currencyReceiptDetail(d)));
signedSumVATReceiptDetail 'Сумма НДС' (d) = NUMERIC[16,2](roundPriceCurrency(signedSumReceiptDetail(d) * valueVATReceiptDetail(d) / (100 + valueVATReceiptDetail(d)), currencyReceiptDetail(d))) PERSISTENT;

VATReceiptDetail(d) += VATReceiptSaleDetail(d);
VATReceiptDetail(d) += VATReceiptReturnDetail(d);

// используется только для приема реализации из внешних касс
descriptionReceipt 'Название документа' (receipt) = 'Чек № ' + numberReceipt(receipt) + ' от ' + dateTimeReceipt(receipt);

descriptionReceiptSaleDetail (receiptDetail) = 'Продажа № ' + numberReceipt(receiptReceiptSaleDetail(receiptDetail)) + ' от ' + dateTimeReceipt(receiptReceiptSaleDetail(receiptDetail));

descriptionReceiptReturnDetail (receiptDetail) = 'Возврат № ' + numberReceipt(receiptReceiptReturnDetail(receiptDetail)) + ' от ' + dateTimeReceipt(receiptReceiptReturnDetail(receiptDetail));

descriptionReceiptDetail 'Название документа' (receiptDetail) = MULTI descriptionReceiptReturnDetail(receiptDetail), descriptionReceiptSaleDetail(receiptDetail);

@defineAddDetailDialogSkuStockCustom(receipt, receiptSaleDetail, ' (продажа)', sku, departmentStore, dialogSku);
@defineAddDetailDialogSkuStockCustom(receipt, receiptReturnDetail, ' (возврат)', sku, departmentStore, dialogSku);

// ----------------- Оплаты по чеку ------------------------------

CLASS Payment 'Оплата по чеку';
TABLE payment (Payment);

@defineExternalizable(payment, VARSTRING[100]);

CLASS PaymentMeans 'Форма оплаты'{
    paymentMeansCash 'Наличные',
    paymentMeansCard 'Карточка'
}
FORM paymentMeans
    OBJECTS m = PaymentMeans
    PROPERTIES(m) staticCaption
    DIALOG PaymentMeans OBJECT m
;

CLASS PaymentType 'Тип платежа';
TABLE paymentType (PaymentType);

namePaymentType 'Наименование' = DATA VARISTRING[110](PaymentType) IN recognize;

paymentMeansPaymentType (paymentType) = DATA PaymentMeans (PaymentType);
namePaymentMeansPaymentType 'Форма оплаты' (paymentType) = staticCaption(paymentMeansPaymentType(paymentType)) IN recognize;

sidPaymentType 'Идентификатор' = DATA STRING[10] (PaymentType) IN base;
typePaymentSID (tp) = GROUP AGGR paymentType BY sidPaymentType(paymentType) WHERE paymentType IS PaymentType;

FORM paymentType 'Тип платежа'
    OBJECTS pt = PaymentType FIXED PANEL
    PROPERTIES(pt) namePaymentType, namePaymentMeansPaymentType, sidPaymentType

    EDIT PaymentType OBJECT pt
;

FORM paymentTypes 'Тип платежа'
    OBJECTS pt = PaymentType
    PROPERTIES(pt) READONLY namePaymentType, namePaymentMeansPaymentType, sidPaymentType
    PROPERTIES(pt) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    DIALOG PaymentType OBJECT pt
;

receiptPayment (payment) = DATA Receipt (Payment) NOT NULL DELETE;

countPaymentReceipt 'Кол-во типов платежей' (receipt) = GROUP SUM 1 BY receiptPayment(payment);

paymentTypePayment (payment) = DATA PaymentType(Payment);
namePaymentTypePayment 'Тип платежа' (payment) = namePaymentType(paymentTypePayment(payment));
sidPaymentTypePayment 'ID Типа платежа' (payment) = sidPaymentType(paymentTypePayment(payment));

minCashPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == PaymentMeans.paymentMeansCash;
minCardPaymentType () = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == PaymentMeans.paymentMeansCard;

paymentMeansPayment (payment) = paymentMeansPaymentType(paymentTypePayment(payment)) PERSISTENT;
namePaymentMeansPayment 'Форма оплаты' (payment) = staticCaption(paymentMeansPayment(payment));

numberPayment 'Номер платежа' (payment) = DATA INTEGER (Payment);

sumPayment 'Сумма платежа' (payment) = DATA NUMERIC[16,2] (Payment);

sumPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) BY receiptPayment(payment);

sumInCashPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) IF paymentMeansPayment(payment) == PaymentMeans.paymentMeansCash  BY receiptPayment(payment);

changePaymentReceipt 'Сдача' (receipt) = sumPaymentReceipt(receipt) - sumReceiptDetailReceipt(receipt);

sumCashPaymentReceipt (receipt) = sumInCashPaymentReceipt(receipt) - changePaymentReceipt(receipt);
sumCardPaymentReceipt (receipt) = GROUP SUM sumPayment(payment) IF paymentMeansPayment(payment) == PaymentMeans.paymentMeansCard BY receiptPayment(payment);

sumPositiveCashPaymentReceipt 'Сумма продажа (наличные)' (receipt) =  sumCashPaymentReceipt (receipt) IF sumCashPaymentReceipt (receipt) >= 0.0 IN documentSum;
sumNegativeCashPaymentReceipt 'Сумма возврата (наличные)' (receipt) =  sumCashPaymentReceipt (receipt) IF sumCashPaymentReceipt (receipt) < 0.0 IN documentSum;

sumPositiveCardPaymentReceipt 'Сумма продажа (карточка)' (receipt) =  sumCardPaymentReceipt (receipt) IF sumCardPaymentReceipt (receipt) >= 0.0 IN documentSum;
sumNegativeCardPaymentReceipt 'Сумма возврата (карточка)' (receipt) =  sumCardPaymentReceipt (receipt) IF sumCardPaymentReceipt (receipt) < 0.0 IN documentSum;

sumCashPaymentZReport 'Сумма (наличные)' (zReport) = GROUP SUM sumCashPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;

sumPositiveCashPaymentZReport 'Сумма продажа (наличные)' (zReport) = GROUP SUM sumPositiveCashPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;
sumNegativeCashPaymentZReport 'Сумма возврата (наличные)' (zReport) = GROUP SUM sumNegativeCashPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;

sumPositiveCardPaymentZReport 'Сумма продажа (карточка)' (zReport) = GROUP SUM sumPositiveCardPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;
sumNegativeCardPaymentZReport 'Сумма возврата (карточка)' (zReport) = GROUP SUM sumNegativeCardPaymentReceipt(r) BY zReportReceipt(r) IN documentSum;

isSumPaymentReceipt 'Выключть ограничения по суммам платежей в чеке' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isSumPaymentReceipt
;

DESIGN options {
    commons {
        ADD PROPERTY(isSumPaymentReceipt());
    }
}

CONSTRAINT receipt IS Receipt AND NOT isSumPaymentReceipt() AND NOT sumPaymentReceipt(receipt) MESSAGE 'По чеку не указаны платежи';

CONSTRAINT ((sumReceiptDetailReceipt(receipt) > 0 AND sumReceiptDetailReceipt(receipt) > sumPaymentReceipt(receipt)) OR
           (sumReceiptDetailReceipt(receipt) < 0 AND sumReceiptDetailReceipt(receipt) != sumPaymentReceipt(receipt))) AND NOT isSumPaymentReceipt()
    MESSAGE 'Сумма платежей по чеку меньше суммы чека';
    
CONSTRAINT ((sumReceiptDetailReceipt(receipt) > 0 AND sumReceiptDetailReceipt(receipt) < sumCardPaymentReceipt(receipt)) 
           OR (sumReceiptDetailReceipt(receipt) <0 AND sumReceiptDetailReceipt(receipt) > sumCardPaymentReceipt(receipt))) AND NOT isSumPaymentReceipt()
    MESSAGE 'Сумма платежей по безналичному расчету больше суммы чека';

// Итоги по Z-отчету

@defineDocumentHeaderQuantityCustom(zReport, receiptDetail);

sumReceiptDetailZReport 'Сумма Z-отчета' (zReport) = GROUP SUM sumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;

sumCashZReport 'Сумма наличных Z-отчета' (zReport) = GROUP SUM sumCashPaymentReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
sumCardZReport 'Сумма по карточкам Z-отчета' (zReport) = GROUP SUM sumCardPaymentReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;

sumSkuReceiptDetailZReport 'Сумма Z-отчета по sku' (zReport) = GROUP SUM sumSkuReceiptDetailReceipt(receipt) BY zReportReceipt(receipt);

discountSumReceiptDetailZReport 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumReceiptDetailReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
discountSumReceiptZReport 'Сумма скидок по чекам Z-отчета' (zReport) = GROUP SUM discountSumReceipt(receipt) BY zReportReceipt(receipt) PERSISTENT IN documentSum;
discountSumZReport 'Сумма скидок Z-отчета' (zReport) = discountSumReceiptDetailZReport(zReport) (+) discountSumReceiptZReport(zReport);

sumCashZReportCashRegister 'Сумма наличных по кассе' = GROUP SUM sumCashZReport(z) BY cashRegisterZReport(z); 
sumCardZReportCashRegister 'Сумма безнал. по кассе' = GROUP SUM sumCardZReport(z) BY cashRegisterZReport(z); 
// НДС

sumVATSkuReceiptDetailZReport 'Сумма НДС по sku' (zReport) = GROUP SUM signedSumVATReceiptDetail(detail)
    IF skuReceiptDetail(detail) BY zReportReceiptDetail(detail);
sumVATReceiptDetailReceipt'Сумма НДС' (receipt) = GROUP SUM signedSumVATReceiptDetail(detail)
    BY receiptReceiptDetail(detail); 
sumVATReceiptDetailZReport 'Сумма НДС' (zReport) = GROUP SUM sumVATReceiptDetailReceipt(receipt)
    BY zReportReceipt(receipt) IN documentSum;            

discountSumVATReceiptDetail 'Сумма НДС в скидке' (d) = roundPriceCurrency(discountSumReceiptDetail(d) * valueVATReceiptDetail(d) / (100 + valueVATReceiptDetail(d)), currencyReceiptDetail(d));
 
discountSumVATSaleZReport 'Сумма НДС в скидке (продажа)' (zReport)= GROUP SUM discountSumVATReceiptDetail(d) IF d IS ReceiptSaleDetail BY zReportReceiptDetail(d);
discountSumVATReturnZReport 'Сумма НДС в скидке (возврат)' (zReport)= GROUP SUM discountSumVATReceiptDetail(d) IF d IS ReceiptReturnDetail BY zReportReceiptDetail(d);

discountSumVATZReport 'Сумма НДС в скидке' (zReport)= discountSumVATSaleZReport(zReport) (-) discountSumVATReturnZReport(zReport);

discountSumMarkupZReport 'Сумма набавки в скидке' (z) = discountSumZReport(z) (-) discountSumVATZReport(z);

// Суммы за дату
sumCardDepartmentStoreDateFromTo 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sumPayment(payment) IF paymentMeansPayment(payment)==PaymentMeans.paymentMeansCard
    AND dateReceipt(receiptPayment(payment)) >= dateFrom AND dateReceipt(receiptPayment(payment)) <= dateTo AND isPostedReceipt(receiptPayment(payment))
        BY departmentStoreReceipt(receiptPayment(payment)), dateFrom, dateTo;

sumSaleDepartmentStoreDateFromTo 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM sumReceiptDetailReceipt(receipt)
    IF dateReceipt(receipt) >= dateFrom AND dateReceipt(receipt) <= dateTo AND isPostedReceipt(receipt)
        BY departmentStoreReceipt(receipt), dateFrom, dateTo;

//----------------------------------- Формы -------------------------------------------------//

FORM zReport 'Z-отчет'
    OBJECTS z=ZReport FIXED PANEL
    PROPERTIES (z) numberCashRegisterZReport, nameDepartmentStoreZReport, dateZReport, timeZReport, numberZReport, //sumCashZReport
                   basisZReport, countReceiptZReport, quantityReceiptDetailZReport, 
                   sumPositiveCashPaymentZReport, sumPositiveCardPaymentZReport, discountSumZReport,
                   sumNegativeCashPaymentZReport, sumNegativeCardPaymentZReport, sumReceiptDetailZReport,
                   sumVATReceiptDetailZReport

    OBJECTS b=Receipt, d=ReceiptDetail
    PROPERTIES(b) numberReceipt, dateReceipt, timeReceipt, nameEmployeeReceipt,
                  sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                  discountSumReceipt, sumVATReceiptDetailReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt,
                  ADDOBJ, DELETESESSION
    FILTERS zReportReceipt(b)==z

    PROPERTIES(b) TODRAW d addDetailDialogSkuStockReceiptSaleDetailReceipt, addDetailDialogSkuStockReceiptReturnDetailReceipt
                           // todo : добавить операции возврата по штрихкоду

    PROPERTIES(d) typeReceiptDetail READONLY, idBarcodeReceiptDetail, 
                  nameSkuReceiptDetail ON CHANGE changeDialogSkuReceiptDetail(d) FORCE GRID, 
                  nameBatchReceiptDetail ON CHANGE changeBatchReceiptDetail(d) SHOWIF explicitBatchLedgerReceipt(b),
                  descriptionSaleReceiptReturnDetail FORCE GRID READONLY,
                  quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                  sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail FORCE GRID,
                  numberVATReceiptDetail FORCE GRID, ADDOBJ, DELETESESSION

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=Payment
    PROPERTIES(p) namePaymentTypePayment, namePaymentMeansPayment, sumPayment, ADDOBJ, DELETESESSION

    FILTERS receiptPayment(p)==b

    EDIT ZReport OBJECT z
;

DESIGN zReport {

    NEW pane {
        type = CONTAINERH;      
           
        NEW first {
            fill = 1;
            type = CONTAINERV;
            ADD z.documentHeader {
                type = CONTAINERH;
                ADD PROPERTY (nameDepartmentStoreZReport(z));
                ADD PROPERTY (numberZReport(z));
                ADD PROPERTY (dateZReport(z));
                ADD PROPERTY (timeZReport(z));
            }
            ADD z.documentPrm;
        }
        ADD z.documentSum { columns = 2;}    

    }    
    ADD b.box;
    NEW secondCase{
        fill = 1;
        type = SPLITH;

        ADD d.box {
            fill = 3;
            caption = 'Строка чека';
        }
        ADD p.box;
    }           

    ADD functions.box;
}



overCopyReceiptDetailReceiptDetail = ABSTRACT ACTION LIST (ReceiptDetail, ReceiptDetail);
overCopyReceiptDetailReceipt = ABSTRACT ACTION LIST (ReceiptDetail, Receipt);    

editZReport 'Редактировать' = ACTION EDITFORM ZReport;

copyReceipt 'Копировать' = ACTION (receipt) {
    FOR ADDOBJ r = Receipt DO {
        zReportReceipt(r) <- zReportReceipt(receipt);
        skipReceipt(r) <- skipReceipt(receipt);
        currencyReceipt(r) <- currencyReceipt(receipt);
        discountSumSaleReceipt(r) <- discountSumSaleReceipt(receipt);
        discountSumReturnReceipt(r) <- discountSumReturnReceipt(receipt);        
        noteReceipt(r) <- noteReceipt(receipt);
        dateReceipt(r) <- dateReceipt(receipt);
        timeReceipt(r) <- timeReceipt(receipt);
        
        FOR receiptReceiptDetail(detail) == receipt ORDER detail DO {
            IF detail IS ReceiptSaleDetail THEN {
                FOR ADDOBJ d=ReceiptSaleDetail DO {                    
                    receiptReceiptSaleDetail(d) <- r;
                    skuReceiptSaleDetail(d) <- skuReceiptSaleDetail(detail);
                    batchReceiptSaleDetail(d) <- batchReceiptSaleDetail(detail);
                    idBarcodeReceiptDetail(d) <- idBarcodeReceiptDetail(detail);
                    quantityReceiptSaleDetail(d) <- quantityReceiptSaleDetail(detail);
                    priceReceiptSaleDetail(d) <- priceReceiptSaleDetail(detail);
                    discountPercentReceiptSaleDetail(d) <- discountPercentReceiptSaleDetail(detail);
                    discountSumReceiptSaleDetail(d) <- discountSumReceiptSaleDetail(detail);
                    VATReceiptSaleDetail(d) <- VATReceiptSaleDetail(detail);
                    sumReceiptSaleDetail(d) <- sumReceiptDetail(detail);
                    
                    overCopyReceiptDetailReceiptDetail(d, detail);
                }            
            } 
            IF detail IS ReceiptReturnDetail THEN {
                FOR ADDOBJ d=ReceiptReturnDetail DO {
                    receiptReceiptReturnDetail(d) <- r;
                    skuReceiptReturnDetail(d) <- skuReceiptReturnDetail(detail);
                    idBarcodeReceiptDetail(d) <- idBarcodeReceiptDetail(detail);
                    quantityReceiptReturnDetail(d) <- quantityReceiptReturnDetail(detail);
                    priceReceiptReturnDetail(d) <- priceReceiptReturnDetail(detail);
                    discountSumReceiptReturnDetail(d) <- discountSumReceiptReturnDetail(detail);
                    VATReceiptReturnDetail(d) <- VATReceiptReturnDetail(detail);                    
                    sumReceiptReturnDetail(d) <- sumReceiptReturnDetail(detail);

                    overCopyReceiptDetailReceiptDetail(d, detail);
                }            
            }           
            overCopyReceiptDetailReceipt(detail,r);

        }
        FOR receiptPayment(payment) == receipt DO {
            FOR ADDOBJ p=Payment DO {
                receiptPayment(p) <- r;
                paymentTypePayment(p) <- paymentTypePayment(payment);
                numberPayment(p) <- numberPayment(payment);
                sumPayment(p) <- sumPayment(payment);
                
            }
        }
        SEEK zReport.b r;
    }
} TOOLBAR;

EXTEND FORM zReport 
    PROPERTIES (b) copyReceipt
;

overPriceSkuReceiptDateTime 'Цена' (sku, receipt, dateTime) =
        priceAPriceListTypeSkuStockDateTime(priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt)), sku, departmentStoreReceipt(receipt), dateTime);
overPriceBatchReceiptDateTime 'Цена' (batch, receipt, dateTime) =
    IF priceAPriceListTypeBatchStockDateTime(priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt)), batch, departmentStoreReceipt(receipt), dateTime) THEN
        priceAPriceListTypeBatchStockDateTime(priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt)), batch, departmentStoreReceipt(receipt), dateTime)
    ELSE
        overPriceSkuReceiptDateTime(skuBatch(batch), receipt, dateTime); 
        
WHEN SESSION FORMS zReport (CHANGED (skuReceiptDetail(d)) OR CHANGED (batchReceiptDetail(d))) AND NOT (CHANGED (priceReceiptDetail(d))) DO {
    IF explicitBatchLedgerReceipt(receiptReceiptDetail(d)) THEN {
        priceReceiptDetail(d) <- overPriceBatchReceiptDateTime(batchReceiptDetail(d), receiptReceiptDetail(d), dateTimeReceiptDetail(d));    
    } ELSE {
        priceReceiptDetail(d) <- overPriceSkuReceiptDateTime(skuReceiptDetail(d), receiptReceiptDetail(d), dateTimeReceiptDetail(d));    
    }
}
WHEN SESSION FORMS zReport CHANGED (skuReceiptDetail(d))  AND NOT (CHANGED (idBarcodeReceiptDetail(d))) DO {
    idBarcodeReceiptDetail(d) <- idBarcodeSku(skuReceiptDetail(d));
}
        
editReceiptDetail 'Редактировать' = ABSTRACT ACTION LIST  (ReceiptDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

editReceiptReturnDetail 'Редактировать' (d) = ACTION (d) NEWSESSION {
    FORM zReport OBJECTS z = zReportReceiptReturnDetail(d), b = receiptReceiptReturnDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}
editReceiptDetail(d) += ACTION editReceiptReturnDetail(d);

editReceiptSaleDetail 'Редактировать' (d) = ACTION (d) NEWSESSION {
    FORM zReport OBJECTS z = zReportReceiptSaleDetail(d), b = receiptReceiptSaleDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}
editReceiptDetail(d) += ACTION editReceiptSaleDetail(d);

isPostedOpenedZReport (z)= isPostedZReport(z) AND isOpenedZReport(z);
isDraftOpenedZReport (z)= isDraftZReport(z) AND isOpenedZReport(z);

filterZReportDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFromZreport (z) = dateZReport(z) >= filterZReportDateFrom() OR (z IS ZReport AND NOT filterZReportDateFrom());      

filterZReportDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateToZreport (z) = dateZReport(z) <= filterZReportDateTo() OR (z IS ZReport AND NOT filterZReportDateTo());

filterZReportDepartmentStore  = DATA LOCAL DepartmentStore ();
nameFilterZReportDepartmentStore 'Отдел магазина' = nameDepartmentStore(filterZReportDepartmentStore()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterDepartmentStoreZReport (z) = departmentStoreZReport(z) == filterZReportDepartmentStore() OR (z IS ZReport AND NOT filterZReportDepartmentStore());
 
filterZReportCashRegister 'Касса Z-отчета'   = DATA LOCAL INTEGER ();
filterCashRegisterZReport (z) = numberCashRegisterZReport(z) == filterZReportCashRegister() OR (z IS ZReport AND NOT filterZReportCashRegister()); 

FORM zReports 'Z-отчеты'
    PROPERTIES ()  filterZReportDateFrom, filterZReportDateTo, nameFilterZReportDepartmentStore, filterZReportCashRegister

    OBJECTS z=ZReport LAST
    PROPERTIES (z) READONLY succeededExtraCheckZReport, isClosedZReport, isPostedZReport, numberZReport, dateZReport, timeZReport, nameDepartmentStoreZReport, 
                            numberCashRegisterZReport, basisZReport, countReceiptZReport, quantityReceiptDetailZReport, 
                            sumReceiptDetailZReport, sumPositiveCashPaymentZReport, sumPositiveCardPaymentZReport,                             
                            sumNegativeCashPaymentZReport, sumNegativeCardPaymentZReport, sumVATReceiptDetailZReport,
                            discountSumZReport                                                                                 
                                                        
    PROPERTIES (z) ADDFORM, EDITFORM SHOWIF isOpenedZReport(z) 
    PROPERTIES (z) closeZReport SHOWIF isOpenedZReport(z), openZReport SHOWIF isClosedZReport(z)

    PROPERTIES (z) deletez=DELETE FORCE PANEL TOOLBAR SHOWIF isDraftOpenedZReport(z),
                            postZReport SHOWIF isDraftOpenedZReport(z), unpostZReport SHOWIF isPostedOpenedZReport(z)
    
    FILTERS filterDateFromZreport(z),
            filterDateToZreport(z),
            filterDepartmentStoreZReport(z),
            filterCashRegisterZReport(z)

    OBJECTS b=Receipt
    PROPERTIES(b) READONLY  numberReceipt, dateReceipt, timeReceipt, nameEmployeeReceipt,
                            sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            discountSumReceipt, sumVATReceiptDetailReceipt, countReceiptDetailReceipt, quantityReceiptDetailReceipt

    FILTERS zReportReceipt(b)==z
    ORDER BY                numberReceipt(b)

    OBJECTS d=ReceiptDetail
    PROPERTIES(d) READONLY  typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail FORCE GRID, nameBatchReceiptDetail SHOWIF explicitBatchLedgerReceipt(b),
                            descriptionSaleReceiptReturnDetail FORCE GRID,
                            quantityReceiptDetail, quantityReturnedReceiptSaleDetail FORCE GRID, priceReceiptDetail,
                            sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID,
                            discountSumReceiptDetail FORCE GRID

    FILTERS receiptReceiptDetail(d)==b

    OBJECTS p=Payment
    PROPERTIES(p) READONLY  namePaymentTypePayment, namePaymentMeansPayment, sumPayment

    FILTERS receiptPayment(p)==b
;
@extendFormFilterAccessStock(ZReport, z, zReports, departmentStore, company);

DESIGN zReports {

    NEW topContainer{
        fill = 1;
        type = SPLITV;

        NEW firstCase {
            fill = 2;
            type = SPLITV;
             NEW ZFilters {
                fill = 1;
                NEW filters{
                    caption = 'Фильтры';
                    type = CONTAINERH;          
                    ADD PROPERTY(filterZReportDateFrom());
                    ADD PROPERTY(filterZReportDateTo());
                    ADD PROPERTY(nameFilterZReportDepartmentStore());
                    ADD PROPERTY(filterZReportCashRegister());
                }
                ADD z.box;   
             }
            ADD b.box;
        }

        NEW secondCase{
            fill = 1;
            type = SPLITH;

            ADD d.box{
                caption = 'Строка чека';
                fill = 3;
            }
            ADD p.box;
        }
    }

    ADD functions.box;
}
@defineFilterIsOpened (zReport, zReports, z);

NAVIGATOR {
    retailNavigator {
        NEW ZReportNavigator 'Касса' BEFORE retailMasterData {
            ADD zReports;
        }
    }
}

// ---------------------------------- Импорт/Экспорт чеков ---------------------------------- //

exportReceiptsZReport 'Экспортировать чеки' = ACTION CUSTOM 'lsfusion.erp.retail.ExportReceiptsZReportCustomActionProperty' (ZReport);
exportReceiptsFolderZReport 'Экспортировать чеки (в папку)' = ACTION CUSTOM 'lsfusion.erp.retail.ExportReceiptsZReportFolderActionProperty' (ZReport);

// todo : избавиться от этого GROUP AGGR
zReportNumberCashRegister (numberZReport, cashRegister) = GROUP NAGGR zReport BY numberZReport (zReport), numberCashRegisterZReport (zReport) WHERE zReport IS ZReport;
receiptZReportNumberCashRegister (zReport, receipt, cashRegister) = GROUP NAGGR receipt BY numberZReport(zReportReceipt(receipt)), numberReceipt(receipt), nppMachinery(cashRegisterZReport(zReportReceipt(receipt))) WHERE receipt IS Receipt;

// todo : вместо него может быть idReceiptDetail
receiptDetailZReportReceiptNumberCashRegister (zReport, receipt, receiptDetail, cashRegister) = GROUP NAGGR receiptDetail BY numberZReport(zReportReceiptDetail(receiptDetail)), numberReceipt(receiptReceiptDetail(receiptDetail)), numberReceiptDetail(receiptDetail), nppMachinery(cashRegisterZReport(zReportReceiptDetail(receiptDetail))) WHERE receiptDetail IS ReceiptDetail;

paymentZReportReceiptNumberCashRegister (zReport, receipt, number, cashRegister) = GROUP NAGGR payment BY numberZReport(zReportReceipt(receiptPayment(payment))), numberReceipt(receiptPayment(payment)), numberPayment(payment), nppMachinery(cashRegisterZReport(zReportReceipt(receiptPayment(payment)))) WHERE payment IS Payment;

importReceiptsZReport 'Импортировать чеки' = ACTION CUSTOM 'lsfusion.erp.retail.ImportReceiptsZReportActionProperty' (ZReport);

exportReceipt 'Экспортировать' (receipt) = DATA LOCAL BOOLEAN (Receipt);
exportedIncrementReceipt 'Экспортировано (инкрементно)' (receipt) = DATA BOOLEAN (Receipt);
notExportedIncrementReceipt (r) = NOT exportedIncrementReceipt(r);
pathExportReceipts 'Путь' = DATA VARSTRING[100] ();

exportIncrementReceipts 'Экспортировать (инкрементно) чеки' = ACTION() {
    FOR z IS ZReport DO {
        exportReceipt(r) <- NOT exportedIncrementReceipt(r) WHERE zReportReceipt(r) == z;    
        exportReceiptsFolderZReport(z);
    }
}

EXTEND FORM integrationData
    PROPERTIES() exportIncrementReceipts, pathExportReceipts
;

DESIGN integrationData {
    pane {
        NEW exportReceiptsPane {
            caption = 'Экспорт чеков';
            ADD PROPERTY(exportIncrementReceipts());
            ADD PROPERTY(pathExportReceipts());
        }
    }
}

EXTEND FORM zReport
    PROPERTIES(b) exportReceipt, exportedIncrementReceipt 
;

EXTEND FORM zReports
    PROPERTIES(z) exportReceiptsZReport FORCE PANEL TOOLBAR, importReceiptsZReport FORCE PANEL TOOLBAR
    PROPERTIES(b) exportReceipt, exportedIncrementReceipt 
;

// ----------------------------------------------- Стандартные значения ------------------------------------- //

loadDefaultPaymentType 'Добавить тип оплаты' = ACTION(string, paymentMeans, sid) {
    FOR ADDOBJ p = PaymentType DO {
        namePaymentType(p) <- string;
        paymentMeansPaymentType(p) <- paymentMeans;
        sidPaymentType(p) <- sid;
    }
}

overLoadDefaultPaymentTypes 'Загрузить дополнительные типы оплаты' = ABSTRACT ACTION LIST ();
loadDefaultPaymentTypes 'Загрузить стандартные типы оплаты' = ACTION() {
    loadDefaultPaymentType('Наличные', PaymentMeans.paymentMeansCash, 'cash');
    loadDefaultPaymentType('Карточка', PaymentMeans.paymentMeansCard, 'card');
    overLoadDefaultPaymentTypes();
} IN loadDefault;

@implementLoadDefaultData(loadDefaultPaymentTypes);

//--
isDateZReport 'Дата чека должна равняться дате Z-отчета' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isDateZReport
;

DESIGN options {
    commons {
        ADD PROPERTY(isDateZReport());
    }
}

countDateZReport (z) = GROUP SUM 1 IF dateZReport(zReportReceipt(r)) != dateReceipt(r) IF sumSkuReceiptDetailReceipt(r) BY zReportReceipt(r);

CONSTRAINT isDateZReport() AND countDateZReport(z) 
    MESSAGE 'В z-отчете должны быть чеки с одной датой';

