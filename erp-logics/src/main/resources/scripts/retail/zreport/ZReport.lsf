MODULE ZReport;

REQUIRE System,
        Utils,
        Document,
        Retail,
        Currency,
        Store,
        StoreSkuLedger,
        Stock,
        StockTax,
        CashRegister,
        SaleLedger,
        PriceRoundStore,
        PriceListType,
        StockSkuDocument,
        Item;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {
        NEW zReport {
            caption = 'Z-отчеты';
        }
    }
}
        
// ------------------------------------- Объявление Z-отчета ---------------------------------------- //

CLASS ZReport 'Z-отчет (открытый)';
TABLE zReport (ZReport);

@defineExternalizable(zReport, VARSTRING[100]);
@defineDocumentHeaderTime(ZReport);
@defineDocumentHeaderCreated(ZReport);

@defineDocumentHeaderPosted(ZReport);
@defineDocumentHeaderClosed(ZReport);
@defineDocumentClosedConstraint(ZReport);

@deriveDocumentHeaderTimePrefix(ZReport, );
@defineDocumentHeaderDepartmentStore(zReport);

@defineDocumentHeaderNumber(ZReport);

idDepartmentStore 'Код' (ZReport zReport) = id(departmentStore(zReport));

CONSTRAINT isPosted(ZReport z) AND NOT departmentStore(z)
    MESSAGE 'Не задан отдел магазина для Z-отчета';

cashRegister (zReport) = DATA CashRegister(ZReport);
numberCashRegister 'Касса Z-отчета' (ZReport zReport) = npp(cashRegister(zReport)) IN documentPrm;
overNumberCashRegister 'Касса Z-отчета' (ZReport zReport) = overNpp(cashRegister(zReport)) IN documentPrm;

basis 'Основание' (ZReport zReport) = 'Z-отчет №' + number(zReport) + ' с кассы ' + overNumberCashRegister(zReport) + ' от ' + date(zReport) IN documentPrm;

departmentStore(ZReport zReport) <- departmentStore(cashRegister(zReport))
    WHEN CHANGED(cashRegister(zReport));

description 'Название документа' (ZReport zReport) =  VARSTRING[200] (CONCAT '', 'Продажа по кассе ' +overNumberCashRegister(zReport),
                                            ' отдела ' + nameDepartmentStore(zReport),
                                            ' от ' + date(zReport)) IN recognize;
    
succeededExtraCheck 'Проверено' (zReport) = DATA BOOLEAN(ZReport);   
//----------------------------------------------- Чеки ---------------------------------------------------//

CLASS Receipt 'Чек';
TABLE receipt (Receipt);

@defineCreated(Receipt);
@defineExternalizable(receipt, VARSTRING[100]);


CLASS ABSTRACT ReceiptDetail 'Строка чека';
TABLE receiptDetail (ReceiptDetail);

CLASS ReceiptSaleDetail 'Строка продажи' : ReceiptDetail;
TABLE receiptSaleDetail (ReceiptSaleDetail);
is(ReceiptSaleDetail receiptSaleDetail) = receiptSaleDetail IS ReceiptSaleDetail;

CLASS ReceiptReturnDetail 'Строка возврата' : ReceiptDetail;
TABLE receiptReturnDetail (ReceiptReturnDetail);
is(ReceiptReturnDetail receiptReturnDetail) = receiptReturnDetail IS ReceiptReturnDetail;

@defineExternalizable(receiptDetail, VARSTRING[100]);

number 'Номер позиции чека' = DATA INTEGER (ReceiptDetail); 

@defineDocumentRelation(zReport, Receipt);
numberZReport 'Номер Z-отчета' (Receipt receipt) = number(zReport(receipt)) IN recognize;
cashRegister (Receipt receipt) = cashRegister(zReport(receipt));
numberCashRegister 'Номер кассы' (Receipt receipt) = npp(cashRegister(receipt)) IN recognize;
overNumberCashRegister 'Номер кассы' (Receipt receipt) = overNpp(cashRegister(receipt)) IN recognize;
numberGroupCashRegister 'Номер кассы' (Receipt receipt) = nppGroupMachinery(cashRegister(receipt)) IN recognize;

groupCashRegister (Receipt receipt) = groupCashRegister(cashRegister(receipt)) COMPLEX;

cashRegisterModel (Receipt receipt) = cashRegisterModel(groupCashRegister(cashRegister(receipt)));
sidCashRegisterModel 'Код модели' (Receipt receipt) = sid(cashRegisterModel(receipt));

employee = DATA Employee(Receipt);
idEmployee (Receipt receipt) = id(employee(receipt));
firstNameEmployee (Receipt receipt) = firstName(employee(receipt));
lastNameEmployee (Receipt receipt) = lastName(employee(receipt));
nameEmployee 'Кассир' (Receipt receipt) = name[Contact](employee(receipt));
employee(Receipt receipt) <- currentUser() WHEN SET(receipt IS Receipt);

@defineDocumentHeaderTime(Receipt);
@deriveDocumentHeaderTimePrefix(Receipt, );

hour 'Час' (Receipt r) = extractHour(dateTime(r));  

@defineDocumentDetailDepartmentStoreCustom(zReport, receipt);
@defineDocumentDetailPosted(zReport, Receipt);
@defineDocumentDetailClosed(zReport, Receipt);

idDepartmentStore 'Отдел магазина' (Receipt idetail) = id(departmentStore(idetail));    
    

skip 'Не проводить по регистру' = DATA BOOLEAN (Receipt); 

@defineDocumentRelation(receipt, ReceiptSaleDetail);
@defineDocumentRelation(receipt, ReceiptReturnDetail);

@defineDocumentHeaderCurrency (receipt);
@deriveDocumentCurrency (receipt, departmentStore);

@defineDocumentHeaderNote(Receipt);

@defineDocumentDetailCurrency (receipt, receiptSaleDetail);
@defineDocumentDetailCurrency (receipt, receiptReturnDetail);

receipt = ABSTRACT Receipt (ReceiptDetail) MATERIALIZED;
receipt(ReceiptReturnDetail detail) += receipt(detail);
receipt(ReceiptSaleDetail detail) += receipt(detail);

zReport(ReceiptSaleDetail d) = zReport(receipt(d)); 
zReport(ReceiptReturnDetail d) = zReport(receipt(d)); 
zReport (ReceiptDetail d) = zReport(receipt(d));
numberZReport 'Номер Z-отчета'(ReceiptDetail d) = number(zReport(d));

sidCashRegisterModel 'Код модели' (ReceiptDetail receiptDetail) = sidCashRegisterModel(receipt(receiptDetail));
numberCashRegister 'Номер кассы' (ReceiptDetail receiptDetail) = overNumberCashRegister(receipt(receiptDetail));

type 'Тип' = ABSTRACT STRING[10] (ReceiptDetail) MINCHARWIDTH 10 PREFCHARWIDTH 12 MATERIALIZED;
type(ReceiptSaleDetail detail) += 'Продажа' IF detail IS ReceiptSaleDetail;
type(ReceiptReturnDetail detail) += 'Возврат' IF detail IS ReceiptReturnDetail;

index 'Номер строки' (ReceiptDetail d) =
    PARTITION SUM 1 BY receipt(d)
    ORDER d MINCHARWIDTH 4 PREFCHARWIDTH 4;

@defineDocumentDetailTime(receipt, ReceiptSaleDetail);
dateZReport 'Дата Z-отчета'(ReceiptSaleDetail d) = date(zReport(receipt(d)));

@defineDocumentDetailTime(receipt, ReceiptReturnDetail);
dateZReport 'Дата Z-отчета'(ReceiptReturnDetail d) = date(zReport(receipt(d)));

date 'Дата' = ABSTRACT DATE (ReceiptDetail) MATERIALIZED INDEXED;
date(ReceiptReturnDetail detail) += date(detail);
date(ReceiptSaleDetail detail) += date(detail);

dateZReport 'Дата Z-отчета' (ReceiptDetail d) = date(zReport(receipt(d)));

dateTime 'Дата/время' = ABSTRACT DATETIME (ReceiptDetail) MATERIALIZED INDEXED;
dateTime(ReceiptReturnDetail detail) += dateTime(detail);
dateTime(ReceiptSaleDetail detail) += dateTime(detail);

time 'Время' (ReceiptDetail d) = TIME(dateTime(d));

// ------------ Проведен --------------- // 

isPosted 'Проведен' (receiptDetail) = ABSTRACT BOOLEAN (ReceiptDetail) MATERIALIZED;

@defineDocumentDetailPosted(receipt, ReceiptSaleDetail);
isPosted(ReceiptSaleDetail d) += isPosted(d);

@defineDocumentDetailPosted(receipt, ReceiptReturnDetail);
isPosted(ReceiptReturnDetail d) += isPosted(d); 

// ------------ Закрыт --------------- // 
isClosed 'Закрыт' (receiptDetail) = ABSTRACT BOOLEAN (ReceiptDetail) MATERIALIZED;

@defineDocumentDetailClosed(receipt, ReceiptSaleDetail);
isClosed(ReceiptSaleDetail d) += isClosed(d);
 
@defineDocumentDetailClosed(receipt, ReceiptReturnDetail);
isClosed(ReceiptReturnDetail d) += isClosed(d);

// --------------- Магазин --------------- //
departmentStore (receiptDetail) = ABSTRACT DepartmentStore (ReceiptDetail) MATERIALIZED;
nameDepartmentStore 'Склад' (ReceiptDetail d) = name(departmentStore(d));
store (ReceiptDetail receiptDetail) = store(departmentStore(receiptDetail));

INDEX departmentStore(ReceiptDetail d), date(d);

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptSaleDetail);
departmentStore (ReceiptSaleDetail d) += departmentStore(d);
 
@defineDocumentDetailDepartmentStoreCustom(receipt, receiptReturnDetail);
departmentStore (ReceiptReturnDetail d) += departmentStore(d); 

// Валюта
@defineDocumentDetailCurrency(receipt, receiptDetail);

@defineDocumentDetailSku(receiptSale, sku);
@defineDocumentDetailSku(receiptReturn, sku);
sku (ReceiptDetail receiptDetail) = MULTI sku[ReceiptReturnDetail](receiptDetail), sku[ReceiptSaleDetail](receiptDetail) MATERIALIZED;

INDEX receipt(ReceiptDetail d), sku(d);

idSku 'Код' (ReceiptDetail receiptDetail) = id(sku(receiptDetail));
idSkuGroup 'Код' (ReceiptDetail receiptDetail) = id(skuGroup(sku(receiptDetail)));
nameSkuGroup1Sku 'Классификация' (ReceiptDetail receiptDetail) = nameSkuGroup1(sku(receiptDetail));
nameSkuGroup2Sku 'Категория' (ReceiptDetail receiptDetail) = nameSkuGroup2(sku(receiptDetail));
nameSkuGroup3Sku 'Направление' (ReceiptDetail receiptDetail) = nameSkuGroup3(sku(receiptDetail));
nameSkuGroup4Sku 'Группа' (ReceiptDetail receiptDetail) = nameSkuGroup4(sku(receiptDetail));
nameSkuGroup5Sku 'Подгруппа' (ReceiptDetail receiptDetail) = nameSkuGroup5(sku(receiptDetail));
nameSkuGroup6Sku 'Субгруппа' (ReceiptDetail receiptDetail) = nameSkuGroup6(sku(receiptDetail));
shortNameUOMSku 'Ед. изм.' (ReceiptDetail receiptDetail) = shortNameUOM(sku(receiptDetail));


skip 'Не проводить по регистру' (ReceiptSaleDetail receiptDetail) = skip(receipt(receiptDetail)) OR skuType(sku(receiptDetail)) == SkuType.skuTypeCharge; 
skip 'Не проводить по регистру' (ReceiptReturnDetail receiptDetail) = skip(receipt(receiptDetail)) OR skuType(sku(receiptDetail)) == SkuType.skuTypeCharge; 

active(ReceiptSaleDetail d) = isPosted(d) AND NOT skip(d); 
active(ReceiptReturnDetail d) = isPosted(d) AND NOT skip(d); 
active(ReceiptDetail d) = MULTI active[ReceiptSaleDetail](d), active[ReceiptReturnDetail](d); 

setAttributes = ABSTRACT (ReceiptDetail);

changeDialogSku(ReceiptDetail detail)  = {
    setAttributes(detail); 
    DIALOG skus OBJECTS s = sku(detail) INPUT NULL DO
        sku(detail) <- s;
} TOOLBAR;

//партии
@defineDocumentAbstractDetailBatchCustom(receiptDetail, batch);
@defineDocumentDetailBatchCustom(receiptSaleDetail, batch);
@defineDocumentDetailBatchCustom(receiptReturnDetail, batch);

batch(ReceiptSaleDetail detail) += batch(detail);
batch(ReceiptReturnDetail detail) += batch(detail);

replace(Sku s, Batch b) += { sku(ReceiptSaleDetail detail) <- s WHERE batch(detail) == b;}
replace(Sku s, Batch b) += { sku(ReceiptReturnDetail detail) <- s WHERE batch(detail) == b;}

changeBatch(ReceiptDetail detail) = {
    DIALOG dialogBatchStockOut OBJECTS st = departmentStore(detail),
                             t = dateTime(detail),
                             sk = sku(detail),
                             bt = batch(detail) INPUT NULL DO 
        batch(detail) <- bt;
}

nameSku 'Товар' (ReceiptDetail d) = IF batch(d) THEN documentNameSku(batch(d)) ELSE name(sku(d)) IN recognize;

nameCashRegisterSku (ReceiptDetail d) = OVERRIDE nameCashRegisterAttribute(sku(d)), nameSku(d);

boardNameSku 'Товар' = ABSTRACT VARISTRING[255] (ReceiptDetail);

explicitBatchLedger(Receipt receipt) = explicitBatchLedger(departmentStore(zReport(receipt)));
notExplicitBatchLedger(Receipt receipt) = departmentStore(zReport(receipt)) AND NOT explicitBatchLedger(receipt);

number 'Номер чека' (receipt) = DATA INTEGER (Receipt) IN documentHeader;
numberReceipt 'Номер чека' (ReceiptDetail receiptDetail) = number(receipt(receiptDetail));

nameEmployee 'Кассир' = nameEmployee(receipt(ReceiptDetail detail));

maxNumberReceipt 'Максимальный номер чека' (zReport) = GROUP MAX number(Receipt receipt) BY zReport(receipt) MATERIALIZED;

GROUP receiptDiscount 'Дисконтная карта' : public;

idBarcode 'Штрихкод' (receiptDetail) = DATA VARSTRING[15] (ReceiptDetail) FIXEDCHARWIDTH 14 INDEXED;

// Возвраты

saleReceipt = DATA Receipt (ReceiptReturnDetail);
receiptDetail(sku, receipt) = GROUP MAX ReceiptDetail receiptDetail BY sku(receiptDetail), receipt(receiptDetail);
saleReceiptDetail(ReceiptReturnDetail returnReceiptDetail) = receiptDetail(sku[ReceiptDetail](returnReceiptDetail), saleReceipt(returnReceiptDetail));                                                                                                                                                             
receiptSaleDetail = DATA ReceiptSaleDetail (ReceiptReturnDetail);
overReceiptSaleDetail(ReceiptReturnDetail detail) = OVERRIDE saleReceiptDetail(detail), receiptSaleDetail(detail);
receiptSale (ReceiptReturnDetail returnDetail) = receipt[ReceiptSaleDetail](overReceiptSaleDetail(returnDetail));

descriptionSale 'Чек продажи' (ReceiptReturnDetail returnDetail) = CONCAT ' ',
    'Чек № ' + number(receiptSale(returnDetail)),
    'от ' + dateTime(receiptSale(returnDetail)),
    'позиция ' + index(overReceiptSaleDetail(returnDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

changeDescriptionSale = ABSTRACT LIST (ReceiptReturnDetail);

// Количества и суммы

quantity 'Количество' (receiptDetail) = DATA NUMERIC[16,5] (ReceiptSaleDetail);
price 'Цена' (receiptDetail) = DATA NUMERIC[16,4] (ReceiptSaleDetail);
sum 'Сумма' (receiptDetail) = DATA NUMERIC[18,4] (ReceiptSaleDetail);
discountPercent 'Процент скидки' (receiptDetail) = DATA NUMERIC[6,2] (ReceiptSaleDetail);
discountPercent (receipt)= GROUP SUM 1 IF discountPercent(ReceiptSaleDetail detail) BY receipt[ReceiptDetail](detail);
discountSum 'Сумма скидки' (receiptDetail) = DATA NUMERIC[18,4] (ReceiptSaleDetail);

priceSum 'Сумма без скидки' = round(quantity(ReceiptSaleDetail detail) * price(detail), roundCondition(departmentStore(detail)));

//discountSumReceiptSaleDetail (detail) <- round(priceSumReceiptSaleDetail(detail) * discountPercentReceiptSaleDetail (detail) / 100,
//                                               priceRoundCurrency(currencyReceiptSaleDetail (detail)))
//    WHEN CHANGED (quantityReceiptSaleDetail(detail)) OR
//         CHANGED (priceReceiptSaleDetail(detail)) OR
//         CHANGED (discountPercentReceiptSaleDetail(detail)) OR
//         CHANGED (currencyReceiptSaleDetail (detail));
calcDiscountSum (ReceiptSaleDetail detail) = round(priceSum(detail) * discountPercent (detail) / 100,
                                               roundDiscountCondition(departmentStore(detail)));

extraDiscountSum = ABSTRACT NUMERIC[18,4] (ReceiptSaleDetail);
calcSum (ReceiptSaleDetail detail) = priceSum(detail) (-) discountSum(detail) (-) extraDiscountSum(detail);
sum (ReceiptSaleDetail detail) <- calcSum(detail)
    WHEN CHANGED (quantity(detail)) OR
         CHANGED (price(detail)) OR
         CHANGED (discountPercent(detail)) OR
         CHANGED (discountSum(detail)) OR
         CHANGED (extraDiscountSum(detail)) OR
         CHANGED (departmentStore(detail));

quantity 'Количество' (receiptDetail) = DATA NUMERIC[16,5] (ReceiptReturnDetail);
price 'Цена' (receiptDetail) = DATA NUMERIC[16,4] (ReceiptReturnDetail);
sum 'Сумма' (receiptDetail) = DATA NUMERIC[18,4] (ReceiptReturnDetail);
discountSum 'Сумма скидки' (receiptDetail) = DATA NUMERIC[18,4] (ReceiptReturnDetail);

quantityReturned 'Возвращено' (saleDetail) = GROUP SUM quantity(ReceiptReturnDetail returnDetail) BY receiptSaleDetail(returnDetail) MATERIALIZED;
CONSTRAINT quantityReturned(ReceiptSaleDetail detail) > quantity (detail) MESSAGE 'Количество возвратов по строке чека превышает проданное количество';

overSum (ReceiptReturnDetail d) = round(
        (quantity(d) * sum(receiptSaleDetail(d)) / 
        (quantity(receiptSaleDetail(d)) IF quantity(receiptSaleDetail(d))!=0)), 
    roundCondition(departmentStore (d)));

priceSum 'Сумма без скидки' = round(
        quantity(ReceiptReturnDetail d) * price(d),
    roundCondition(departmentStore(d)));

sum (ReceiptReturnDetail detail) <- IF receiptSaleDetail(detail) 
                                        THEN overSum(detail)
                                        ELSE priceSum(detail)
                                            
                                   WHEN CHANGED(quantity(detail)) OR
                                        CHANGED(receiptSaleDetail(detail)) OR
                                        CHANGED(departmentStore(detail));

discountSum (ReceiptReturnDetail detail) <- IF receiptSaleDetail(detail) THEN
                                                round(quantity(detail) * discountSum(receiptSaleDetail(detail)) / quantity(receiptSaleDetail(detail)),
                                                    roundDiscountCondition(departmentStore(receiptSaleDetail(detail))))
                                           ELSE
                                                quantity(detail) * price(detail) - sum(detail)
                                           WHEN CHANGED(quantity(detail)) OR
                                                CHANGED(sum(detail)) OR
                                                CHANGED(receiptSaleDetail(detail)) OR
                                                CHANGED(departmentStore(detail));

quantity 'Количество' = ABSTRACT NUMERIC[16,5] (ReceiptDetail) MATERIALIZED;
quantity(ReceiptReturnDetail detail) += quantity(detail);
quantity(ReceiptSaleDetail detail) += quantity(detail);

price 'Цена' = ABSTRACT NUMERIC[16,4] (ReceiptDetail) MATERIALIZED;
price(ReceiptReturnDetail detail) += price(detail);
price(ReceiptSaleDetail detail) += price(detail);

INDEX sku(ReceiptDetail d), price(d);

sum 'Сумма' = ABSTRACT NUMERIC[18,4] (ReceiptDetail) MATERIALIZED;
sum(ReceiptReturnDetail detail) += sum(detail);
sum(ReceiptSaleDetail detail) += sum(detail);

discountSum 'Сумма скидки' = ABSTRACT NUMERIC[18,4] (ReceiptDetail) MATERIALIZED;
discountSum(ReceiptSaleDetail d) += discountSum(d);
discountSum(ReceiptReturnDetail d) += discountSum(d);

fullSum 'Сумма без скидки' (ReceiptSaleDetail d) = sum(d) (+) discountSum(d);
fullSum 'Сумма без скидки' (ReceiptReturnDetail d) = sum(d) (+) discountSum(d);
fullSum 'Сумма без скидки' (ReceiptDetail d) = sum(d) (+) discountSum(d);

sumReceiptSaleDetail 'Сумма продажи' (receipt) = GROUP SUM sum(ReceiptSaleDetail receiptDetail)
    BY receipt (receiptDetail) IN documentSum MATERIALIZED;

sumReceiptReturnDetail 'Сумма возврата' (receipt) = GROUP SUM sum(ReceiptReturnDetail receiptDetail)
    BY receipt (receiptDetail) IN documentSum MATERIALIZED;

signedSum 'Сумма' = ABSTRACT NUMERIC[18,4] (ReceiptDetail) MATERIALIZED;
signedSum(ReceiptReturnDetail detail) += -sum(detail);
signedSum(ReceiptSaleDetail detail) += sum(detail);

signedQuantity 'Количество' = ABSTRACT NUMERIC[16,5] (ReceiptDetail) MATERIALIZED;
signedQuantity(ReceiptReturnDetail detail) += -quantity(detail);
signedQuantity(ReceiptSaleDetail detail) += quantity(detail);

signedDiscountSum = ABSTRACT NUMERIC[18,4] (ReceiptDetail);
signedDiscountSum(ReceiptReturnDetail detail) += -discountSum(detail);
signedDiscountSum(ReceiptSaleDetail detail) += discountSum(detail);

sumReceiptDetail 'Сумма чека' (receipt) = GROUP SUM signedSum(ReceiptDetail detail)
    BY receipt(detail) MATERIALIZED;

sumSkuReceiptDetail 'Сумма чека по товарам' (receipt) = 
    GROUP SUM signedSum(ReceiptDetail detail) IF sku(detail) BY receipt(detail) MATERIALIZED;
//sumReceiptDetailReceipt 'Сумма чека' (receipt) = sumReceiptSaleDetailReceipt(receipt) (-) sumReceiptReturnDetailReceipt(receipt) MATERIALIZED;
sumReceiptDetail 'Сумма чека' (ReceiptDetail receiptDetail) = sumReceiptDetail(receipt(receiptDetail));

discountSumSaleReceiptDetailSale 'Сумма скидки (продажи)' (receipt) = GROUP SUM discountSum(ReceiptSaleDetail receiptDetail)
    BY receipt (receiptDetail) IN documentSum;
discountSumSale 'Сумма скидки (продажи) по чеку' (receipt) = DATA NUMERIC[18,4] (Receipt);

discountSumReturnReceiptDetailReturn 'Сумма скидки (возврат)' (receipt) = GROUP SUM discountSum(ReceiptReturnDetail receiptDetail)
    BY receipt (receiptDetail) IN documentSum;
discountSumReturn 'Сумма скидки (возврат) по чеку' (receipt) = DATA NUMERIC[18,4] (Receipt);

discountSumReceiptDetail 'Сумма скидки' (Receipt receipt) = discountSumSaleReceiptDetailSale(receipt) (-) discountSumReturnReceiptDetailReturn(receipt) MATERIALIZED;
discountSum 'Сумма скидки по чеку' (Receipt receipt) = discountSumSale(receipt) (-) discountSumReturn(receipt);

@defineDocumentHeaderCount(receipt);

@defineDocumentHeaderQuantity(receipt);
@defineDocumentHeaderSkuQuantity(receipt, sku);
@defineDocumentHeaderSkuQuantity(receipt, receiptSaleDetail, sku);

// -------------------------------------------------- НДС ------------------------------------------------ //

VAT = DATA Range (ReceiptSaleDetail);
CONSTRAINT tax(VAT(ReceiptSaleDetail detail)) != Tax.taxVAT OR
           country(VAT(detail)) != country(departmentStore(detail))
           CHECKED BY VAT[ReceiptSaleDetail]
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина: продажа';

VAT(ReceiptSaleDetail d) <- VAT(sku(d), departmentStore(d))
    WHEN CHANGED(sku(d)) OR CHANGED(departmentStore(d));

VAT = DATA Range (ReceiptReturnDetail);
CONSTRAINT tax(VAT(ReceiptReturnDetail detail)) != Tax.taxVAT OR
           country(VAT(detail)) != country(departmentStore(detail))
           CHECKED BY VAT[ReceiptReturnDetail]
           MESSAGE 'ошибка: Шкала должна соответствовать шкале НДС и стране магазина: возврат';

VAT(ReceiptReturnDetail d) <- VAT(sku(d), departmentStore(d))
    WHEN CHANGED(sku(d)) OR CHANGED(departmentStore(d));

VAT 'НДС' = ABSTRACT Range(ReceiptDetail) MATERIALIZED;
VAT(ReceiptSaleDetail d) += VAT(d);
VAT(ReceiptReturnDetail d) += VAT(d);

numberVAT 'НДС, номер' (ReceiptDetail receiptDetail) = number(VAT(receiptDetail));

valueVAT 'НДС, %' (receiptDetail) = DATA NUMERIC[10,5] (ReceiptDetail) MATERIALIZED;
overValueVAT(d) = ABSTRACT VALUE NUMERIC[10,5] (ReceiptDetail);
overValueVAT(ReceiptDetail d) += valueRate(VAT(d), date(d));
WHEN CHANGED(VAT(ReceiptDetail d)) OR CHANGED(date(d)) OR CHANGED (batch(d)) DO {
    valueVAT(d) <- overValueVAT(d);
}

sumVAT 'Сумма НДС' (d) = DATA NUMERIC[18,4] (ReceiptDetail);
calcSumVAT 'Сумма НДС' (ReceiptDetail d) = round(sum(d) * valueVAT(d) / (100 + valueVAT(d)), currency(d));
// пока делаем не сессионным событием, чтобы быстрее принималось
WHEN CHANGED(valueVAT(ReceiptDetail d)) OR CHANGED(sum(d)) OR CHANGED(currency(d)) DO {
    sumVAT(d) <- calcSumVAT(d);
}

signedSumVAT 'Сумма НДС' (ReceiptDetail d) = IF d IS ReceiptReturnDetail THEN -sumVAT(d) ELSE sumVAT(d);

// используется только для приема реализации из внешних касс
description 'Название документа' (Receipt receipt) = 'Чек № ' + number(receipt) + ' от ' + dateTime(receipt);

description (ReceiptSaleDetail receiptDetail) = VARSTRING[200]('Продажа № ' + number(receipt(receiptDetail)) + ' от ' + dateTime(receipt(receiptDetail)) + ' на ' + description(cashRegister(receipt(receiptDetail))));

description (ReceiptReturnDetail receiptDetail) = VARSTRING[200]('Возврат № ' + number(receipt(receiptDetail)) + ' от ' + dateTime(receipt(receiptDetail)) + ' на ' + description(cashRegister(receipt(receiptDetail))));

description 'Название документа' (ReceiptDetail receiptDetail) = MULTI description[ReceiptReturnDetail](receiptDetail), description[ReceiptSaleDetail](receiptDetail);

@defineAddDetailDialogSkuStockCustom(receipt, receiptSaleDetail, ' (продажа)', sku, departmentStore, dialogSku);
@defineAddDetailDialogSkuStockCustom(receipt, receiptReturnDetail, ' (возврат)', sku, departmentStore, dialogSku);

// ----------------- Оплаты по чеку ------------------------------

CLASS Payment 'Оплата по чеку';
TABLE payment (Payment);

@defineExternalizable(payment, VARSTRING[100]);

CLASS PaymentMeans 'Форма оплаты'{
    paymentMeansCash 'Наличные',
    paymentMeansCard 'Карточка'
}
order = ABSTRACT CASE INTEGER (PaymentMeans);
order(PaymentMeans p) += WHEN p == PaymentMeans.paymentMeansCash THEN 1;
order(PaymentMeans p) += WHEN p == PaymentMeans.paymentMeansCard THEN 2;

FORM paymentMeans
    OBJECTS m = PaymentMeans
    PROPERTIES(m) staticCaption
    LIST PaymentMeans OBJECT m
;

CLASS PaymentType 'Тип платежа';
TABLE paymentType (PaymentType);

name 'Наименование' = DATA VARISTRING[110](PaymentType) IN recognize;

paymentMeans (paymentType) = DATA PaymentMeans (PaymentType);
namePaymentMeans 'Форма оплаты' (PaymentType paymentType) = staticCaption(paymentMeans(paymentType)) IN recognize;

sid 'Идентификатор' = DATA STRING[10] (PaymentType) IN base;
typePaymentSID (tp) = GROUP AGGR PaymentType paymentType BY sid(paymentType) WHERE paymentType IS PaymentType;

FORM paymentType 'Тип платежа'
    OBJECTS pt = PaymentType PANEL
    PROPERTIES(pt) name, namePaymentMeans, sid

    EDIT PaymentType OBJECT pt
;

FORM paymentTypes 'Тип платежа'
    OBJECTS pt = PaymentType
    PROPERTIES(pt) READONLY name, namePaymentMeans, sid
    PROPERTIES(pt) NEWSESSION NEW, EDIT, DELETE 

    LIST PaymentType OBJECT pt
;

receipt (payment) = DATA Receipt (Payment) NONULL DELETE INDEXED;

countPayment 'Кол-во типов платежей' (receipt) = GROUP SUM 1 BY receipt(Payment payment);

paymentType (payment) = DATA PaymentType(Payment);
namePaymentType 'Тип платежа' (Payment payment) = name(paymentType(payment));
sidPaymentType 'ID Типа платежа' (Payment payment) = sid(paymentType(payment));

minCashPaymentType () = GROUP MIN PaymentType paymentType IF paymentMeans(paymentType) == PaymentMeans.paymentMeansCash;
minCardPaymentType () = GROUP MIN PaymentType paymentType IF paymentMeans(paymentType) == PaymentMeans.paymentMeansCard;

paymentMeans (Payment payment) = paymentMeans(paymentType(payment)) MATERIALIZED;
namePaymentMeans 'Форма оплаты' (Payment payment) = staticCaption(paymentMeans(payment));

number 'Номер платежа' (payment) = DATA INTEGER (Payment);

sum 'Сумма платежа' (payment) = DATA NUMERIC[18,4] (Payment);

sumPayment 'Сумма платежа' (receipt) = GROUP SUM sum(Payment payment) BY receipt(payment);

sumInCashPayment (receipt) = GROUP SUM sum(Payment payment) IF paymentMeans(payment) == PaymentMeans.paymentMeansCash  BY receipt(payment);

changePayment 'Сдача' (Receipt receipt) = sumPayment(receipt) - sumReceiptDetail(receipt);

sumCashPayment 'Сумма продажа (наличные)' (Receipt receipt) = sumInCashPayment(receipt) - changePayment(receipt) MATERIALIZED;
sumCardPayment 'Сумма продажа (карточка)' (receipt) = GROUP SUM sum(Payment payment) IF paymentMeans(payment) == PaymentMeans.paymentMeansCard BY receipt(payment);

sumCashPayment 'Наличными (чек)' (ReceiptDetail detail) = sumCashPayment(receipt(detail));
sumCardPayment 'Карточкой (чек)' (ReceiptDetail detail) = sumCardPayment(receipt(detail));

sumPositiveCashPayment 'Сумма продажа (наличные)' (Receipt receipt) =  sumCashPayment (receipt) IF sumCashPayment (receipt) >= 0.0 IN documentSum;
sumNegativeCashPayment 'Сумма возврата (наличные)' (Receipt receipt) =  sumCashPayment (receipt) IF sumCashPayment (receipt) < 0.0 IN documentSum;

sumPositiveCardPayment 'Сумма продажа (карточка)' (Receipt receipt) =  sumCardPayment (receipt) IF sumCardPayment (receipt) >= 0.0 IN documentSum;
sumNegativeCardPayment 'Сумма возврата (карточка)' (Receipt receipt) =  sumCardPayment (receipt) IF sumCardPayment (receipt) < 0.0 IN documentSum;

sumCashPayment 'Сумма (наличные)' (zReport) = GROUP SUM sumCashPayment(Receipt r) BY zReport(r) IN documentSum MATERIALIZED;

sumPositiveCashPayment 'Сумма продажа (наличные)' (zReport) = GROUP SUM sumPositiveCashPayment(Receipt r) BY zReport(r) IN documentSum;
sumNegativeCashPayment 'Сумма возврата (наличные)' (zReport) = GROUP SUM sumNegativeCashPayment(Receipt r) BY zReport(r) MATERIALIZED IN documentSum;

sumPositiveCardPayment 'Сумма продажа (карточка)' (zReport) = GROUP SUM sumPositiveCardPayment(Receipt r) BY zReport(r) IN documentSum;
sumNegativeCardPayment 'Сумма возврата (карточка)' (zReport) = GROUP SUM sumNegativeCardPayment(Receipt r) BY zReport(r) MATERIALIZED IN documentSum;

isSumPaymentReceipt 'Выключать ограничения по суммам платежей в чеке' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isSumPaymentReceipt
;

DESIGN options {
    zReport {
        MOVE PROPERTY(isSumPaymentReceipt());
    }
}

CONSTRAINT Receipt receipt IS Receipt AND NOT isSumPaymentReceipt() AND NOT sumPayment(receipt) AND sumReceiptDetail(receipt) MESSAGE 'По чеку не указаны платежи';

CONSTRAINT ((sumReceiptDetail(Receipt receipt) > 0 AND sumReceiptDetail(receipt) > sumPayment(receipt)) OR
           (sumReceiptDetail(receipt) < 0 AND sumReceiptDetail(receipt) != sumPayment(receipt))) AND NOT isSumPaymentReceipt()
    MESSAGE 'Сумма платежей по чеку меньше суммы чека';
    
CONSTRAINT ((sumReceiptDetail(Receipt receipt) > 0 AND sumReceiptDetail(receipt) < sumCardPayment(receipt)) 
           OR (sumReceiptDetail(receipt) <0 AND sumReceiptDetail(receipt) > sumCardPayment(receipt))) AND NOT isSumPaymentReceipt()
    MESSAGE 'Сумма платежей по безналичному расчету больше суммы чека';

// Итоги по Z-отчету

quantityReceiptDetail 'Кол-во (всего)' (zReport) = GROUP SUM signedQuantity(ReceiptDetail detail) BY zReport(detail) IN documentSum MATERIALIZED;

sumReceiptDetail 'Сумма Z-отчета' (zReport) = GROUP SUM sumReceiptDetail(Receipt receipt) BY zReport(receipt) MATERIALIZED IN documentSum;

sumCash 'Сумма наличных Z-отчета' (zReport) = GROUP SUM sumCashPayment(Receipt receipt) BY zReport(receipt) MATERIALIZED IN documentSum;
sumCard 'Сумма по карточкам Z-отчета' (zReport) = GROUP SUM sumCardPayment(Receipt receipt) BY zReport(receipt) MATERIALIZED IN documentSum;

sumSkuReceiptDetail 'Сумма Z-отчета по sku' (zReport) = GROUP SUM sumSkuReceiptDetail(Receipt receipt) BY zReport(receipt);

// Пока вот такой хак, чтобы не подключить ZReportReceiptDetailPayment
sumCashNotSku (ZReport z) = GROUP SUM max(sumCashPayment(ReceiptDetail d), sum(d)) IF NOT sku(d) BY zReport(d);
sumCashSku 'Сумма наличных по товарам Z-отчета' (ZReport z) = sumCash(z) - OVERRIDE sumCashNotSku(z), 0.0; 

sumCardNotSku (ZReport z) = GROUP SUM max(sumCardPayment(ReceiptDetail d), sum(d)) IF NOT sku(d) BY zReport(d);
sumCardSku 'Сумма по карточкам по товарам Z-отчета' (ZReport z) = sumCard(z) - OVERRIDE sumCardNotSku(z), 0.0; 

discountSumReceiptDetail 'Сумма скидок Z-отчета' (zReport) = GROUP SUM discountSumReceiptDetail(Receipt receipt) BY zReport(receipt) MATERIALIZED IN documentSum;
discountSumReceipt 'Сумма скидок по чекам Z-отчета' (zReport) = GROUP SUM discountSum(Receipt receipt) BY zReport(receipt) MATERIALIZED IN documentSum;
discountSum 'Сумма скидок Z-отчета' (ZReport zReport) = discountSumReceiptDetail(zReport) (+) discountSumReceipt(zReport) IN documentSum;

sumCashZReport 'Сумма наличных по кассе' = GROUP SUM sumCash(ZReport z) BY cashRegister(z); 
sumCardZReport 'Сумма безнал. по кассе' = GROUP SUM sumCard(ZReport z) BY cashRegister(z); 
// НДС

sumVATSkuReceiptDetail 'Сумма НДС по sku' (zReport) = GROUP SUM signedSumVAT(ReceiptDetail detail)
    IF sku(detail) BY zReport(detail);
sumVATReceiptDetail'Сумма НДС' (receipt) = GROUP SUM signedSumVAT(ReceiptDetail detail)
    BY receipt(detail) MATERIALIZED; 
sumVATReceiptDetail 'Сумма НДС' (zReport) = GROUP SUM sumVATReceiptDetail(Receipt receipt)
    BY zReport(receipt) IN documentSum;            

discountSumVAT 'Сумма НДС в скидке' (ReceiptDetail d) = round(discountSum(d) * valueVAT(d) / (100 + valueVAT(d)), currency(d));
 
discountSumVATSale 'Сумма НДС в скидке (продажа)' (zReport)= GROUP SUM discountSumVAT(ReceiptSaleDetail d) IF d IS ReceiptSaleDetail BY zReport[ReceiptDetail](d);
discountSumVATReturn 'Сумма НДС в скидке (возврат)' (zReport)= GROUP SUM discountSumVAT(ReceiptReturnDetail d) IF d IS ReceiptReturnDetail BY zReport[ReceiptDetail](d);

discountSumVAT 'Сумма НДС в скидке' (ZReport zReport)= discountSumVATSale(zReport) (-) discountSumVATReturn(zReport);

discountSumMarkup 'Сумма набавки в скидке' (ZReport z) = discountSum(z) (-) discountSumVAT(z);

// Суммы за дату
sumCard 'Продано с использованием банк. карточек' (departmentStore, dateFrom, dateTo) = GROUP SUM sum(Payment payment) IF paymentMeans(payment)==PaymentMeans.paymentMeansCard
    AND date(receipt(payment)) >= DATE dateFrom AND date(receipt(payment)) <= DATE dateTo AND isPosted(receipt(payment))
        BY departmentStore(receipt(payment)), dateFrom, dateTo;
sumCash 'Продано с использованием наличных' (departmentStore, dateFrom, dateTo) = GROUP SUM sum(Payment payment) IF paymentMeans(payment)==PaymentMeans.paymentMeansCash
    AND date(receipt(payment)) >= DATE dateFrom AND date(receipt(payment)) <= DATE dateTo AND isPosted(receipt(payment))
        BY departmentStore(receipt(payment)), dateFrom, dateTo;
        
sumSale 'Продано по кассе' (departmentStore, dateFrom, dateTo) = GROUP SUM sumReceiptDetail(Receipt receipt)
    IF date(receipt) >= DATE dateFrom AND date(receipt) <= DATE dateTo AND isPosted(receipt)
        BY departmentStore(receipt), dateFrom, dateTo;

//----------------------------------- Формы -------------------------------------------------//

FORM zReport 'Z-отчет'
    OBJECTS z=ZReport PANEL
    PROPERTIES (z) overNumberCashRegister, nameDepartmentStore, date, time, number, //sumCashZReport
                   basis, countReceipt, quantityReceiptDetail, 
                   sumPositiveCashPayment, sumPositiveCardPayment, discountSum,
                   sumNegativeCashPayment, sumNegativeCardPayment, sumReceiptDetail,
                   sumVATReceiptDetail

    OBJECTS b=Receipt, d=ReceiptDetail
    PROPERTIES(b) number, date, time, nameEmployee,
                  sumReceiptDetail, discountSumReceiptDetail,
                  discountSum, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                  sumCashPayment, sumCardPayment, NEW, DELETE GRID
    FILTERS zReport(b)==z

    PROPERTIES(b) TODRAW d addDetailDialogSkuStockReceiptSaleDetail, addDetailDialogSkuStockReceiptReturnDetail
                           // todo : добавить операции возврата по штрихкоду

    PROPERTIES(d) type READONLY, idBarcode, 
                  nameSku ON CHANGE changeDialogSku(d) , 
                  nameBatch ON CHANGE changeBatch(d) SHOWIF explicitBatchLedger(b),
                  descriptionSale ON CHANGE changeDescriptionSale(d),
                  quantity, quantityReturned , price,
                  sum, discountPercent , discountSum ,
                  numberVAT , valueVAT , NEW, DELETE GRID

    FILTERS receipt(d)==b

    OBJECTS p=Payment
    PROPERTIES(p) namePaymentType, namePaymentMeans, sum, NEW, del = DELETE GRID

    FILTERS receipt(p)==b

    EDIT ZReport OBJECT z
;

DESIGN zReport {

    NEW pane {
        type = CONTAINERH;      
           
        NEW first {
            fill = 1;
            type = CONTAINERV;
            MOVE GROUP(z,documentHeader) {
                type = CONTAINERH;
                MOVE PROPERTY (nameDepartmentStore(z));
                MOVE PROPERTY (number(z));
                MOVE PROPERTY (date(z));
                MOVE PROPERTY (time(z));
            }
            MOVE GROUP(z,documentPrm);
        }
        MOVE GROUP(z,documentSum) { columns = 2;}    

    }    
    MOVE BOX(b);
    NEW secondCase{
        fill = 1;
        type = SPLITH;

        MOVE BOX(d) {
            fill = 3;
            caption = 'Строка чека';
        }
        MOVE BOX(p);
    }           

    MOVE TOOLBARBOX;
}



overCopy = ABSTRACT LIST (ReceiptDetail, ReceiptDetail);
overCopy = ABSTRACT LIST (ReceiptDetail, Receipt);    

show 'Просмотреть' (ZReport z) = {
	NEWSESSION {
	    SHOW zReport OBJECTS z = z DOCKED READONLY ;
	}
}

copy 'Копировать'(Receipt receipt) = {
    NEW r = Receipt {
        zReport(r) <- zReport(receipt);
        skip(r) <- skip(receipt);
        currency(r) <- currency(receipt);
        discountSumSale(r) <- discountSumSale(receipt);
        discountSumReturn(r) <- discountSumReturn(receipt);        
        note(r) <- note(receipt);
        date(r) <- date(receipt);
        time(r) <- time(receipt);
        
        FOR receipt(ReceiptDetail detail) == receipt ORDER detail DO {
            IF detail IS ReceiptSaleDetail THEN {
                NEW d=ReceiptSaleDetail {                    
                    receipt(d) <- r;
                    sku(d) <- sku[ReceiptSaleDetail](detail);
                    batch(d) <- batch[ReceiptSaleDetail](detail);
                    idBarcode(d) <- idBarcode(detail);
                    quantity(d) <- quantity[ReceiptSaleDetail](detail);
                    price(d) <- price[ReceiptSaleDetail](detail);
                    discountPercent(d) <- discountPercent(detail);
                    discountSum(d) <- discountSum[ReceiptSaleDetail](detail);
                    VAT(d) <- VAT[ReceiptSaleDetail](detail);
                    sum(d) <- sum(detail);
                    
                    overCopy(d, detail);
                }            
            } 
            IF detail IS ReceiptReturnDetail THEN {
                NEW d=ReceiptReturnDetail {
                    receipt(d) <- r;
                    sku(d) <- sku[ReceiptReturnDetail](detail);
                    idBarcode(d) <- idBarcode(detail);
                    quantity(d) <- quantity[ReceiptReturnDetail](detail);
                    price(d) <- price[ReceiptReturnDetail](detail);
                    discountSum(d) <- discountSum[ReceiptReturnDetail](detail);
                    VAT(d) <- VAT[ReceiptReturnDetail](detail);                    
                    sum(d) <- sum[ReceiptReturnDetail](detail);

                    overCopy(d, detail);
                }            
            }           
            overCopy(detail,r);

        }
        FOR receipt(Payment payment) == receipt DO {
            NEW p=Payment {
                receipt(p) <- r;
                paymentType(p) <- paymentType(payment);
                number(p) <- number(payment);
                sum(p) <- sum(payment);
                
            }
        }
        SEEK zReport.b = r;
    }
} TOOLBAR;

EXTEND FORM zReport 
    PROPERTIES (b) copy
;

overPrice 'Цена' (Sku sku, Receipt receipt, DATETIME dateTime) =
        priceA(priceListType(groupCashRegister(receipt)), sku, departmentStore(receipt), dateTime);
overPrice 'Цена' (Batch batch, Receipt receipt, DATETIME dateTime) =
    IF priceA(priceListType(groupCashRegister(receipt)), batch, departmentStore(receipt), dateTime) THEN
        priceA(priceListType(groupCashRegister(receipt)), batch, departmentStore(receipt), dateTime)
    ELSE
        overPrice(sku(batch), receipt, dateTime); 
        
WHEN LOCAL FORMS zReport (CHANGED (sku(ReceiptDetail d)) OR CHANGED (batch(d))) AND NOT (CHANGED (price(d))) DO {
    IF explicitBatchLedger(receipt(d)) THEN {
        price(d) <- overPrice(batch(d), receipt(d), dateTime(d));    
    } ELSE {
        price(d) <- overPrice(sku(d), receipt(d), dateTime(d));    
    }
}
WHEN LOCAL FORMS zReport CHANGED (sku(ReceiptDetail d))  AND NOT (CHANGED (idBarcode(d))) DO {
    idBarcode(d) <- idBarcode(sku(d));
}
        
edit (ReceiptReturnDetail d) += { DIALOG zReport OBJECTS z = zReport(d), b = receipt(d), d = d AUTOX DOCKED; }
edit (ReceiptSaleDetail d) += { DIALOG zReport OBJECTS z = zReport(d), b = receipt(d), d = d AUTOX DOCKED; }

show 'Просмотреть' = ABSTRACT LIST  (ReceiptDetail)  TOOLBAR;

show 'Просмотреть' (ReceiptReturnDetail d) = {
	NEWSESSION {
	    SHOW zReport OBJECTS z = zReport(d), b = receipt(d), d = d DOCKED READONLY ;
	}
}
show(ReceiptReturnDetail d) += { show(d); }

show 'Просмотреть' (ReceiptSaleDetail d) = {
	NEWSESSION {
	    SHOW zReport OBJECTS z = zReport(d), b = receipt(d), d = d DOCKED READONLY;
	}
}
show(ReceiptSaleDetail d) += { show(d); }


isPostedOpened (ZReport z)= isPosted(z) AND isOpened(z);
isDraftOpened (ZReport z)= isDraft(z) AND isOpened(z);

filterZReportDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFromZreport (ZReport z) = date(z) >= filterZReportDateFrom() OR (z IS ZReport AND NOT filterZReportDateFrom());      

filterZReportDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateToZreport (ZReport z) = date(z) <= filterZReportDateTo() OR (z IS ZReport AND NOT filterZReportDateTo());

filterZReportDepartmentStore  = DATA LOCAL DepartmentStore ();
nameFilterZReportDepartmentStore 'Отдел магазина' = name(filterZReportDepartmentStore()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterDepartmentStore (ZReport z) = departmentStore(z) == filterZReportDepartmentStore() OR (z IS ZReport AND NOT filterZReportDepartmentStore());
 
filterZReportCashRegister 'Касса Z-отчета'   = DATA LOCAL VARSTRING[10] ();
filterCashRegister (ZReport z) = overNumberCashRegister(z) == filterZReportCashRegister() OR (z IS ZReport AND NOT filterZReportCashRegister()); 

lastDateTimeReceipt 'Время последнего чека'  = GROUP LAST dateTime(Receipt b)
        BY zReport(b)
        ORDER dateTime(b), b;    
firstDateTimeReceipt 'Время первого чека' = GROUP LAST dateTime(Receipt b)
        BY zReport(b)
        ORDER DESC dateTime(b), b;      
        
FORM zReports 'Z-отчеты'
    PROPERTIES ()  filterZReportDateFrom, filterZReportDateTo, nameFilterZReportDepartmentStore, filterZReportCashRegister

    OBJECTS z=ZReport LAST
    PROPERTIES (z) READONLY succeededExtraCheck, isClosed, isPosted, number, date, time, nameDepartmentStore, 
                            overNumberCashRegister, basis, countReceipt, quantityReceiptDetail, 
                            sumReceiptDetail, sumPositiveCashPayment, sumPositiveCardPayment,                             
                            sumNegativeCashPayment, sumNegativeCardPayment, sumVATReceiptDetail,
                            discountSum, firstDateTimeReceipt, lastDateTimeReceipt                                                                                 
                                                        
    PROPERTIES (z) NEWSESSION NEW, EDIT SHOWIF isOpened(z) 
    PROPERTIES (z) close SHOWIF isOpened(z), open SHOWIF isClosed(z)

    PROPERTIES (z) NEWSESSION deletez=DELETE SHOWIF isDraftOpened(z),
                            post SHOWIF isDraftOpened(z), unpost SHOWIF isPostedOpened(z)
    
    FILTERS filterDateFromZreport(z),
            filterDateToZreport(z),
            filterDepartmentStore(z),
            filterCashRegister(z)

    OBJECTS b=Receipt
    PROPERTIES(b) READONLY  number, date, time, nameEmployee,
                            sumReceiptDetail, discountSumReceiptDetail,
                            discountSum, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                            sumCashPayment, sumCardPayment

    FILTERS zReport(b)==z
    ORDER BY                number(b)

    OBJECTS d=ReceiptDetail
    PROPERTIES(d) READONLY  type, idBarcode, nameSku , nameBatch SHOWIF explicitBatchLedger(b),
                            descriptionSale ,
                            quantity, quantityReturned , price,
                            sum, discountPercent ,
                            discountSum 

    FILTERS receipt(d)==b

    OBJECTS p=Payment
    PROPERTIES(p) READONLY  namePaymentType, namePaymentMeans, sum

    FILTERS receipt(p)==b
;
@extendFormFilterAccessStock(ZReport, z, zReports, departmentStore, company);

DESIGN zReports {

    NEW topContainer{
        fill = 1;
        type = SPLITV;

        NEW firstCase {
            fill = 2;
            type = SPLITV;
             NEW ZFilters {
                fill = 1;
                NEW filters{
                    caption = 'Фильтры';
                    type = CONTAINERH;          
                    MOVE PROPERTY(filterZReportDateFrom());
                    MOVE PROPERTY(filterZReportDateTo());
                    MOVE PROPERTY(nameFilterZReportDepartmentStore());
                    MOVE PROPERTY(filterZReportCashRegister());
                }
                MOVE BOX(z);   
             }
            MOVE BOX(b);
        }

        NEW secondCase{
            fill = 1;
            type = SPLITH;

            MOVE BOX(d){
                caption = 'Строка чека';
                fill = 3;
            }
            MOVE BOX(p);
        }
    }

    MOVE TOOLBARBOX;
}
@defineFilterIsOpened (zReport, zReports, z);

NAVIGATOR {
    retailNavigator {
        NEW ZReportNavigator 'Касса' BEFORE retailMasterData {
            ADD zReports;
        }
    }
}

countZReports 'Кол-во Z-отчетов' (dep, date) = GROUP SUM 1 IF isPosted(ZReport r) BY departmentStore(r), date(r);
quantityZReports 'Кол-во товаров Z-отчетов' (dep, date) = GROUP SUM quantityReceiptDetail(ZReport r) IF isPosted(r) BY departmentStore(r), date(r);
sumZReports 'Сумма Z-отчетов' (dep, date) = GROUP SUM sumReceiptDetail(ZReport r) IF isPosted(r) BY departmentStore(r), date(r); 

countZReports 'Кол-во Z-отчетов' (s, date) = GROUP SUM 1 IF isPosted(ZReport r) BY store(departmentStore(r)), date(r);
sumZReports 'Сумма Z-отчетов' (s, date) = GROUP SUM sumReceiptDetail(ZReport r) IF isPosted(r) BY store(departmentStore(r)), date(r); 

EXTEND FORM zReports
    OBJECTS dt = DATE PANEL 
    PROPERTIES (dt) VALUE        
    
    TREE treeStore1 a1=STRING[3], t1=ChainStores, st1=StoreType
    PROPERTIES READONLY VALUE(a1), name(t1), name(st1)
    FILTERS chainStores(st1) == t1

    FILTERS stringEqualsAll(a1)
    FILTERS in (t1, st1)          
    
    OBJECTS s1=Store
    PROPERTIES(s1) READONLY name, id SHOWIF showIDs(), countCashRegister
    FILTERS in(t1, st1, s1)    
    PROPERTIES (s1,dt) READONLY countZReports, sumZReports       
    
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s = Store 
    PROPERTIES READONLY VALUE(a), name(t), name(st), name(s)

    FILTERS stringEqualsAll(a)
    FILTERS in(t, st, s) 
 
    OBJECTS dep=DepartmentStore
    PROPERTIES(dep) READONLY name, id SHOWIF showIDs(), countSalesCashRegister
    PROPERTIES READONLY countZReports(dep,dt), sumZReports(dep,dt)
     
    FILTERS in(t, st, s, dep),
            isCompany(dep)    
    FILTERGROUP active
        FILTER 'Активные' countSalesCashRegister(dep) 'F5' DEFAULT
;

DESIGN zReports {
    NEW tabContainer BEFORE TOOLBARBOX {
        fill = 1;
        type = TABBED;
        MOVE topContainer {caption = 'Z-отчеты';}
        NEW department {
            caption = 'Магазины';
            fill = 1;
            type = CONTAINERV;
            MOVE BOX(dt);
            NEW treeContainer {
                fill = 1;  
                type = TABBED;
                NEW treeContainer1{
                    fill = 1;
                    type = SPLITH;
                    caption = 'По магазинам';
                    MOVE BOX(TREE treeStore1);
                    MOVE BOX(s1) { fill = 2;}                 
                }
                NEW treeContainer2{
                    fill = 1;
                    type = SPLITH;
                    caption = 'По отделам';
                    MOVE BOX(TREE treeStore);
                    MOVE BOX(dep) { fill = 2;}                    
                }                
                
            }
        }
    }
}

@extendFormFilterStockGroupAccess(s1, zReports, company);
@extendFormFilterStockAccess(dep, zReports, company);


// ----------------------------------------------- Стандартные значения ------------------------------------- //

loadDefaultType 'Добавить тип оплаты'(VARISTRING[110] string, PaymentMeans paymentMeans, STRING[10] sid) = {
    NEW p = PaymentType {
        name(p) <- string;
        paymentMeans(p) <- paymentMeans;
        sid(p) <- sid;
    }
}

overLoadDefaultPaymentTypes 'Загрузить дополнительные типы оплаты' = ABSTRACT LIST ();
loadDefaultPaymentTypes 'Загрузить стандартные типы оплаты'() = {
    loadDefaultType('Наличные', PaymentMeans.paymentMeansCash, 'cash');
    loadDefaultType('Карточка', PaymentMeans.paymentMeansCard, 'card');
    overLoadDefaultPaymentTypes();
} IN loadDefault;

@implementLoadDefaultData(loadDefaultPaymentTypes);

//--
isDateZReport 'Дата чека должна равняться дате Z-отчета' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isDateZReport
;

DESIGN options {
    zReport {
        MOVE PROPERTY(isDateZReport());
    }
}

countDate (z) = GROUP SUM 1 IF date(zReport(Receipt r)) != date(r) IF sumReceiptDetail(r) BY zReport(r);

CONSTRAINT isDateZReport() AND countDate(ZReport z) 
    MESSAGE 'В z-отчете должны быть чеки с одной датой';

