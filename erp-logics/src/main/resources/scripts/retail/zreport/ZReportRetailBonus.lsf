MODULE ZReportRetailBonus;

REQUIRE ZReportDiscountCard, RetailBonus, ZReportSkuLedger, PricingZReport;

NAMESPACE ZReport;

bonusSum 'Начислено бонусов' = DATA NUMERIC[16,2] (ReceiptSaleDetail);
bonusSum 'Начислено бонусов' = DATA NUMERIC[16,2] (ReceiptReturnDetail);

bonusSum 'Начислено бонусов' = ABSTRACT NUMERIC[16,2] (ReceiptDetail);
bonusSum(ReceiptSaleDetail d) += bonusSum(d);
bonusSum(ReceiptReturnDetail d) += bonusSum(d);

bonusSum 'Начислено бонусов' (Receipt r) = GROUP SUM bonusSum(ReceiptDetail d) BY receipt(d);

signedBonusSum 'Начислено бонусов' = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
signedBonusSum(ReceiptSaleDetail d) += bonusSum(d);
signedBonusSum(ReceiptReturnDetail d) += -bonusSum(d);

signedBonusSum 'Начислено бонусов' (Receipt r) = GROUP SUM signedBonusSum(ReceiptDetail d) BY receipt(d);

bonusPaid 'Оплачено бонусами' = DATA NUMERIC[16,2] (ReceiptSaleDetail);
bonusPaid 'Оплачено бонусами' = DATA NUMERIC[16,2] (ReceiptReturnDetail);

extraSum(ReceiptSaleDetail detail) += bonusPaid(detail);
extraSum(ReceiptReturnDetail detail) += bonusPaid(detail);

bonusPaid 'Оплачено бонусами' = ABSTRACT NUMERIC[16,2] (ReceiptDetail);
bonusPaid(ReceiptSaleDetail d) += bonusPaid(d);
bonusPaid(ReceiptReturnDetail d) += bonusPaid(d);
extraDiscountSum(ReceiptSaleDetail d) += bonusPaid(d);

bonusPaid 'Оплачено бонусами' (Receipt r) = GROUP SUM bonusPaid(ReceiptDetail d) BY receipt(d);

signedBonusPaid 'Оплачено бонусами' = ABSTRACT NUMERIC[16,2] (ReceiptDetail) PERSISTENT;
signedBonusPaid(ReceiptSaleDetail d) += bonusPaid(d);
signedBonusPaid(ReceiptReturnDetail d) += -bonusPaid(d);

signedBonusPaid 'Оплачено бонусами' (Receipt r) = GROUP SUM signedBonusPaid(ReceiptDetail d) BY receipt(d);

signedBonusSum 'Начислено бонусов' = GROUP SUM signedBonusSum(ReceiptDetail d)
    BY zReport(receipt(d));

signedBonusPaid 'Оплачено бонусами' = GROUP SUM signedBonusPaid(ReceiptDetail d)
    BY zReport(receipt(d));

EXTEND FORM zReport
    PROPERTIES(b) SHOWIF useBonus() signedBonusSum, signedBonusPaid  
    PROPERTIES(d) SHOWIF useBonus() bonusSum, bonusPaid  
;
    
EXTEND FORM zReports
    PROPERTIES(z) READONLY SHOWIF useBonus() signedBonusSum, signedBonusPaid
    PROPERTIES(b) READONLY SHOWIF useBonus() signedBonusSum, signedBonusPaid  
    PROPERTIES(d) READONLY SHOWIF useBonus() signedBonusSum, signedBonusPaid  
;

bonusPaidSaleReceiptDetailSale 'Сумма бонусов (продажи)' (receipt) = GROUP SUM bonusPaid(ReceiptSaleDetail receiptDetail)
    BY receipt (receiptDetail) IN documentSum;
bonusPaidReturnReceiptDetailReturn 'Сумма бонусов (возврат)' (receipt) = GROUP SUM bonusPaid(ReceiptReturnDetail receiptDetail)
    BY receipt (receiptDetail) IN documentSum;
bonusPaidReceiptDetail 'Сумма бонусов' (Receipt receipt) = bonusPaidSaleReceiptDetailSale(receipt) (-) bonusPaidReturnReceiptDetailReturn(receipt) PERSISTENT;
bonusPaidReceiptDetail 'Сумма бонусов Z-отчета' (zReport) = GROUP SUM bonusPaidReceiptDetail(Receipt receipt) BY zReport(receipt) PERSISTENT IN documentSum;
extraDiscount(ZReportRepricing zReportRepricing) += bonusPaidReceiptDetail(zReport(zReportRepricing));

cumulativeBonuses 'Накоплено бонусов' (DiscountCard dc) = GROUP SUM signedBonusSum(ReceiptDetail rd) BY discountCard(rd) PERSISTENT;

returnBonusSum = GROUP SUM bonusSum(ReceiptReturnDetail rrd) BY receiptSaleDetail(rrd) PERSISTENT;
blockedBonuses 'Заблокировано бонусов' (DiscountCard dc) = 
    GROUP SUM (bonusSum(ReceiptSaleDetail rsd) (-) returnBonusSum(rsd)) IF date(rsd) > subtract(currentDate(), blockDaysBonus()) BY discountCard(rsd);
externalBlockedBonuses 'Дополнительные заблокированные бонусы' = ABSTRACT NUMERIC[16,2] (DiscountCard);  
totalBlockedBonuses 'Всего заблокировано бонусов' (DiscountCard dc)= blockedBonuses(dc) (+) externalBlockedBonuses(dc);

paidBonuses 'Оплачено бонусами' = GROUP SUM signedBonusPaid(ReceiptDetail rd) BY discountCard(rd) PERSISTENT;

availableBonuses 'Доступно бонусов (основная)' (DiscountCard dc) = cumulativeBonuses(dc) (+) sumBonusLedger(dc) (-) blockedBonuses(dc) (-) paidBonuses(dc) PERSISTENT; 

externalBonuses 'Дополнительные бонусы' = ABSTRACT NUMERIC[16,2] (DiscountCard) PERSISTENT;
totalBonuses 'Доступно бонусов' (DiscountCard d) = availableBonuses(d) (+) externalBonuses(d);
prevTotalBonuses 'Доступно бонусов' (DiscountCard d) = PREV(totalBonuses(d));

totalBonuses 'Доступно бонусов' (Receipt r) = prevTotalBonuses(discountCard(r)) IN receiptDiscount;

//-- Скидки с учетом бонусов
discountBonusSumVAT 'Сумма НДС в скидке' (ReceiptDetail d) = round((discountSum(d) (+) bonusPaid(d))* valueVAT(d) / (100 + valueVAT(d)), currency(d));
 
discountBonusSumVATSale 'Сумма НДС в скидке (продажа)' (zReport)= GROUP SUM discountBonusSumVAT(ReceiptSaleDetail d) IF d IS ReceiptSaleDetail BY zReport[ReceiptDetail](d);
discountBonusSumVATReturn 'Сумма НДС в скидке (возврат)' (zReport)= GROUP SUM discountBonusSumVAT(ReceiptReturnDetail d) IF d IS ReceiptReturnDetail BY zReport[ReceiptDetail](d);

discountBonusSumVAT 'Сумма НДС в скидке' (ZReport zReport)= discountBonusSumVATSale(zReport) (-) discountBonusSumVATReturn(zReport);

discountBonusSumMarkup 'Сумма набавки в скидке' (ZReport z) = discountSum(z) (+) signedBonusPaid(z) (-) discountBonusSumVAT(z);

EXTEND FORM discountCard
    PROPERTIES(d) READONLY SHOWIF useBonus() cumulativeBonuses, blockedBonuses, externalBlockedBonuses, totalBlockedBonuses, paidBonuses, availableBonuses, externalBonuses, totalBonuses
;

DESIGN discountCard {
    d.panel {
        NEW row5 {
            caption = 'Бонусы';
            type = COLUMNS;
            columns = 4;
            MOVE PROPERTY(cumulativeBonuses(d));
            MOVE PROPERTY(blockedBonuses(d));
            MOVE PROPERTY(paidBonuses(d));
            MOVE PROPERTY(sumBonusLedger(d));
            MOVE PROPERTY(availableBonuses(d));
            MOVE PROPERTY(externalBonuses(d));
            MOVE PROPERTY(totalBonuses(d));
        }
    }
}

EXTEND FORM discountCards
    PROPERTIES(d) READONLY SHOWIF useBonus() cumulativeBonuses, blockedBonuses, externalBlockedBonuses, totalBlockedBonuses, paidBonuses, availableBonuses, externalBonuses, totalBonuses
;