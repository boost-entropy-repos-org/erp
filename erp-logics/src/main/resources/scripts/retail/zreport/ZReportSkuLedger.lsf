MODULE ZReportSkuLedger;

REQUIRE ZReport, SkuLedger;
   
//---------------------- Продажа ----------------//
CLASS ZReportSaleSkuLedger 'Продажа за день (общ.)' : OutFIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE zReportSaleSkuLedger (ZReportSaleSkuLedger);
TABLE zReportSkuPrice(ZReport, Sku, NUMERIC[18,6]);

quantityReceiptSaleDetail 'Кол-во' = GROUP SUM quantity(ReceiptSaleDetail d) IF isPosted(d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;
sumReceiptSaleDetail 'Сумма' = GROUP SUM sum(ReceiptSaleDetail d) IF isPosted(d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;
discountSumReceiptSaleDetail 'Сумма скидки' = GROUP SUM discountSum(ReceiptSaleDetail d) IF isPosted(d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;
countReceiptSaleDetail = GROUP SUM 1 IF isPosted(ReceiptSaleDetail d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;

VATReceiptSaleDetail = DATA Range (ZReport, Sku, NUMERIC[18,6]);
WHEN SET(quantityReceiptSaleDetail(ZReport zr, Sku sku, NUMERIC[16,4] price)) DO {
    VATReceiptSaleDetail (zr, sku, price) <- VAT (sku, country(zr));
}

zReport = DATA ZReport (ZReportSaleSkuLedger);
sku = DATA Sku (ZReportSaleSkuLedger) INDEXED;
price = DATA NUMERIC[16,4] (ZReportSaleSkuLedger) INDEXED;

INDEX zReport(ZReportSaleSkuLedger o), sku(o), price(o);

@defineAggregationCustom(zReportReceiptSaleSkuLedger, skuReceiptSaleSkuLedger, priceReceiptSaleSkuLedger, zReport, ZReport, sku, Sku, price, NUMERIC[16,4], zReportSaleSkuLedger, ZReportSaleSkuLedger, countReceiptSaleDetail);


dateTime[DataSkuLedger] (ZReportSaleSkuLedger ledger) += dateTime(zReport(ledger));
isPosted[DataSkuLedger] (ZReportSaleSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[DataSkuLedger] (ZReportSaleSkuLedger ledger) += isClosed(zReport(ledger));
sku[DataSkuLedger] (ZReportSaleSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (ZReportSaleSkuLedger ledger) += departmentStore(zReport(ledger));
description[DataSkuLedger] (ZReportSaleSkuLedger ledger) += VARSTRING[200]('Продажа № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

skip[SkuLedger] (ZReportSaleSkuLedger ledger) += date(zReport(ledger)) < startDateGroupCashRegister(departmentStore(zReport(ledger))) OR
                           skuType(sku(ledger)) == SkuType.skuTypeCharge;

quantity[OutFIFOSkuLedger] (ZReportSaleSkuLedger ledger) += NUMERIC[14,3](quantityReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger)));
sum[OutSkuLedger] (ZReportSaleSkuLedger ledger) += NUMERIC[18,4](sumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger))
    (+) discountSumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger)));

//---------------------- SaleLedger ----------------//

dateTime[SaleLedger] (ZReportSaleSkuLedger ledger) += dateTime(zReport(ledger));
isPosted[SaleLedger] (ZReportSaleSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[SaleLedger] (ZReportSaleSkuLedger ledger) += isClosed(zReport(ledger));
sku[SaleLedger] (ZReportSaleSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (ZReportSaleSkuLedger ledger) += departmentStore(zReport(ledger));
description[SaleLedger] (ZReportSaleSkuLedger ledger) += VARSTRING[200]('Продажа № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

cost(ZReportSaleSkuLedger ledger, Batch batch) +=  cost[SkuLedger, Batch](ledger, batch) IF ledger IS ZReportSaleSkuLedger;
quantity[SaleLedger] (ZReportSaleSkuLedger ledger) += NUMERIC[14,3](quantityReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger)));
VAT (ZReportSaleSkuLedger ledger) += VATReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));
sum[SaleLedger] (ZReportSaleSkuLedger ledger) += NUMERIC[18,4](sumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger)));
price (ZReportSaleSkuLedger ledger) += price(ledger);

discountSum (ZReportSaleSkuLedger ledger) += NUMERIC[18,4](discountSumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger)));

costSum (ZReportSaleSkuLedger ledger) += WHEN ledger IS ZReportSaleSkuLedger THEN costSum[SkuLedger](ledger);

//---------------------- Возврат ----------------//

CLASS ZReportReturnSkuLedger 'Возврат за день (общ.)' : InLIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE zReportReturnSkuLedger (ZReportReturnSkuLedger);

quantityReceiptReturnDetail 'Кол-во' = GROUP SUM quantity(ReceiptReturnDetail d) IF isPosted(d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;
sumReceiptReturnDetail 'Сумма' = GROUP SUM sum(ReceiptReturnDetail d) IF isPosted(d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;
discountSumReceiptReturnDetail 'Сумма скидки' = GROUP SUM discountSum(ReceiptReturnDetail d) IF isPosted(d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;
countReceiptReturnDetail = GROUP SUM 1 IF isPosted(ReceiptReturnDetail d)
    BY zReport(d), sku(d), NUMERIC[18,6](price(d)) PERSISTENT;

VATReceiptReturnDetail = DATA Range (ZReport, Sku, NUMERIC[18,6]);
WHEN SET(quantityReceiptReturnDetail(ZReport zr, Sku sku, NUMERIC[16,4] price)) DO {
    VATReceiptReturnDetail (zr, sku, price) <- VAT(sku, country(zr));
}

zReport = DATA ZReport(ZReportReturnSkuLedger);
sku = DATA Sku (ZReportReturnSkuLedger) INDEXED;
price = DATA NUMERIC[16,4] (ZReportReturnSkuLedger) INDEXED;

INDEX zReport(ZReportReturnSkuLedger o), sku(o), price(o);

@defineAggregationCustom(zReportReceiptReturnSkuLedger, skuReceiptReturnSkuLedger, priceReceiptReturnSkuLedger, zReport, ZReport, sku, Sku, price, NUMERIC[16,4], zReportReturnSkuLedger, ZReportReturnSkuLedger, countReceiptReturnDetail);

dateTime[DataSkuLedger] (ZReportReturnSkuLedger ledger) += dateTime(zReport(ledger));
isPosted[DataSkuLedger] (ZReportReturnSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[DataSkuLedger] (ZReportReturnSkuLedger ledger) += isClosed(zReport(ledger));
sku[DataSkuLedger] (ZReportReturnSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (ZReportReturnSkuLedger ledger) += departmentStore(zReport(ledger));
description[DataSkuLedger] (ZReportReturnSkuLedger ledger) += VARSTRING[200]('Возврат № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

skip[SkuLedger] (ZReportReturnSkuLedger ledger) += date(zReport(ledger)) < startDateGroupCashRegister(departmentStore(zReport(ledger)));

quantity[InLIFOSkuLedger] (ZReportReturnSkuLedger ledger) += NUMERIC[14,3](quantityReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger)));
sum[InSkuLedger] (ZReportReturnSkuLedger ledger) += NUMERIC[18,4](sumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger))
    (+) discountSumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger)));

//---------------------- SaleLedger ----------------//

dateTime[SaleLedger] (ZReportReturnSkuLedger ledger) += dateTime(zReport(ledger));
isPosted[SaleLedger] (ZReportReturnSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[SaleLedger] (ZReportReturnSkuLedger ledger) += isClosed(zReport(ledger));
sku[SaleLedger] (ZReportReturnSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (ZReportReturnSkuLedger ledger) += departmentStore(zReport(ledger));
description[SaleLedger] (ZReportReturnSkuLedger ledger) += VARSTRING[200]('Возврат № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

cost(ZReportReturnSkuLedger ledger, Batch batch) += -cost[SkuLedger, Batch](ledger, batch) IF ledger IS ZReportReturnSkuLedger;
quantity[SaleLedger] (ZReportReturnSkuLedger ledger) += -NUMERIC[14,3](quantityReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger)));
VAT (ZReportReturnSkuLedger ledger) += VATReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
price (ZReportReturnSkuLedger ledger) += price(ledger);
sum[SaleLedger] (ZReportReturnSkuLedger ledger) += -NUMERIC[18,4](sumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger)));
discountSum (ZReportReturnSkuLedger ledger) += -NUMERIC[18,4](discountSumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger)));
costSum (ZReportReturnSkuLedger ledger) += WHEN ledger IS ZReportReturnSkuLedger THEN -costSum[SkuLedger](ledger);