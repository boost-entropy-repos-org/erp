MODULE ZReportReport;

REQUIRE ZReport;

NAMESPACE ZReport;

inReport 'Отм.' = DATA LOCAL BOOLEAN (Stock);

sumReceiptDetailZReport 'Сумма Z-отчета' (date, dateFrom, dateTo)= GROUP SUM sumReceiptDetail(ZReport zReport) IF 
    date(zReport) >= (DATE dateFrom AS DATE) AND date(zReport) <= (DATE dateTo AS DATE) AND isPosted(zReport) AND
    inReport(departmentStore(zReport))
        BY date(zReport), dateFrom, dateTo;
    
sumReceiptDetailZReport 'Сумма Z-отчета' (stock, date)= GROUP SUM sumReceiptDetail(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);

sumPositiveCashPaymentZReport 'Сумма продажа (наличные)' (stock, date)= GROUP SUM sumPositiveCashPayment(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);
sumPositiveCardPaymentZReport 'Сумма продажа (карточка)' (stock, date)= GROUP SUM sumPositiveCardPayment(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);
discountSumReceiptDetailZReport 'Сумма скидок Z-отчета по строкам чека' (stock, date)= GROUP SUM discountSumReceiptDetail(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);        
discountSumZReport 'Сумма скидок Z-отчета' (stock, date)= GROUP SUM discountSum(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);        
VATSumSaleZReport 'Сумма НДС по продажам' (stock, date)= GROUP SUM sumVATReceiptDetail(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);    
              
sumNegativeCashPaymentZReport 'Сумма возврата (наличные)' (stock, date)= GROUP SUM sumNegativeCashPayment(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport); 
sumNegativeCardPaymentZReport 'Сумма возврата (карточка)' (stock, date)= GROUP SUM sumNegativeCardPayment(ZReport zReport) IF isPosted(zReport)
        BY departmentStore(zReport), date(zReport);  

nameReceiptDetailZReport (Stock stock)= name(stock) + ' (сумма Z-отчета)';    
namePositiveCash (Stock stock)= name(stock) + ' (сумма продажа (наличные))';    
namePositiveCard (Stock stock)= name(stock) + ' (сумма продажа (карточка))';    
nameGiftCard (Stock stock)= name(stock) + ' (сумма продаж (сертификат))';    
nameReceiptDetailGiftCard (Stock stock) = name(stock) + ' (сумма проданных сертификатов)';    
nameDiscountSum (Stock stock)= name(stock) + ' (сумма скидок)';    
nameVATSumSale (Stock stock)= name(stock) + ' (сумма НДС по продажам)';        
                                  
nameNegativeCash (Stock stock)= name(stock) + ' (сумма возврата (наличные)';    
nameNegativeCard (Stock stock)= name(stock) + ' (сумма возврата (карточка)';    
nameVATSumReturn (Stock stock)= name(stock) + ' (сумма НДС по возвратам)';                                     

countReceipt 'Кол-во чеков за день' (date) = 
    GROUP SUM countReceipt(ZReport zReport) IF isPosted(zReport) BY date(zReport);

countReceipt 'Кол-во чеков в магазине за день' (departmentStore, date) = 
    GROUP SUM countReceipt(ZReport zReport) IF isPosted(zReport) BY departmentStore(zReport), date(zReport);
    
countReturnReceipt 'Кол-во возвратных чеков' (o) =
    GROUP SUM 1 IF [ = GROUP SUM 1 BY receipt(ReceiptReturnDetail d) ](Receipt d) BY zReport(d) PERSISTENT IN documentSum;
    
countReturnReceipt 'Кол-во возвратных чеков за день' (departmentStore, date) = 
    GROUP SUM countReturnReceipt(ZReport zReport) IF isPosted(zReport) BY departmentStore(zReport), date(zReport);    

countFiscalReceipt 'Кол-во фискальных чеков за день' = countReceipt(DepartmentStore departmentStore, DATE date) (-) countReturnReceipt(departmentStore, date);    
    
averageSumReceipt 'Средняя сумма чека в магазине за день' (DepartmentStore departmentStore, DATE date) = 
    sumReceiptDetailZReport(departmentStore, date) / countFiscalReceipt(departmentStore, date);

countReceiptDetail (zReport) = GROUP SUM countReceiptDetail(Receipt receipt) BY zReport(receipt);
countReceiptDetail 'Кол-во позиций чеков в магазине за период' (departmentStore, date) =
    GROUP SUM countReceiptDetail(ZReport zReport) IF isPosted(zReport) BY departmentStore(zReport), date(zReport);
averageCountReceiptDetail 'Среднее кол-во позиций в чеке в магазине за париод' (DepartmentStore departmentStore, DATE date) = 
    NUMERIC[16,4](countReceiptDetail(departmentStore, date)) / NUMERIC[16,4](countReceipt(departmentStore, date));
    
countReceipt (Stock stock)= name(stock) + ' (кол-во чеков)';        
averageSumReceipt (Stock stock)= name(stock) + ' (cредняя сумма чека)';        
countReceiptDetail (Stock stock)= name(stock) + ' (кол-во позиций чеков)';
averageCountReceiptDetail (Stock stock)= name(stock) + ' (среднее кол-во позиций в чеке)'; 
countFiscalReceipt (Stock stock)= name(stock) + ' (фискальных чеков)';      
  
                         
sumReceiptDetailZReportStocks 'Сумма Z-отчета' = GROUP SUM sumReceiptDetailZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
sumPositiveCashPaymentZReportStocks 'Сумма продажа (наличные)' = GROUP SUM sumPositiveCashPaymentZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
sumPositiveCardPaymentZReportStocks 'Сумма продажа (карточка)' = GROUP SUM sumPositiveCardPaymentZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
discountSumZReportStocks 'Сумма скидок Z-отчета' = GROUP SUM discountSumZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
VATSumSaleZReportStocks 'Сумма НДС по продажам' = GROUP SUM VATSumSaleZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
sumNegativeCashPaymentZReportStocks  'Сумма возврата (наличные)' = GROUP SUM sumNegativeCashPaymentZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
sumNegativeCardPaymentZReportStocks 'Сумма возврата (карточка)' = GROUP SUM sumNegativeCardPaymentZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
countReceiptStocks 'Кол-во чеков в магазине за день' = GROUP SUM countReceipt(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
countFiscalReceiptStocks 'Кол-во фискальных чеков за день' = GROUP SUM countFiscalReceipt(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
averageSumReceiptStocks 'Средняя сумма чека в магазине за день' (DATE date) =     sumReceiptDetailZReportStocks(date) / countReceiptStocks(date);    
countReceiptDetailStocks 'Кол-во позиций чеков в магазине за период' = GROUP SUM countReceiptDetail(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
sumReceiptDetailZReport 'Сумма Z-отчета' = GROUP SUM sumReceiptDetailZReport(DepartmentStore st,DATE dt) IF inReport(st) BY dt;
averageCountReceiptDetailStocks 'Среднее кол-во позиций в чеке в магазине за париод' (DATE date) =  NUMERIC[16,4](countReceiptDetailStocks(date)) / NUMERIC[16,4](countReceiptStocks(date));

allStocks 'Только итоги' = DATA LOCAL BOOLEAN ();
showProperty = DepartmentStore ds IS DepartmentStore AND NOT allStocks();
        
FORM saleZreportStock 'Отчет по магазинам'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo), allStocks()        
     
    OBJECTS ts = DepartmentStore GRID
    PROPERTIES name[Stock](ts) READONLY, nameLegalEntity[Stock](ts) READONLY, inReport(ts)
    ORDER BY name(ts)
    FILTERS isCompany(ts)     
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT  
    
    OBJECTS st = DepartmentStore GRID     
    FILTERS isCompany(st),
            inReport(st)   
    
    OBJECTS sts = DepartmentStore GRID     
    FILTERS isCompany(sts),
            inReport(sts)            
         
    OBJECTS d = DATE GRID
    PROPERTIES READONLY VALUE(d)
    PROPERTIES(d) READONLY extractMonthName, extractDOWName     
    FILTERS    sumReceiptDetailZReport(d,dFrom,dTo)       
    
    PROPERTIES READONLY SHOWIF showProperty(sts) sumReceiptDetailZReport(sts,d)  COLUMNS (sts) HEADER nameReceiptDetailZReport(sts)
    PROPERTIES READONLY SHOWIF showProperty(sts) discountSumZReport(sts,d)  COLUMNS (sts) HEADER nameDiscountSum(sts)                                 

    PROPERTIES READONLY SHOWIF showProperty(sts) countReceipt(sts,d) COLUMNS (sts) HEADER countReceipt(sts)    
    PROPERTIES READONLY SHOWIF showProperty(sts) countFiscalReceipt(sts,d) COLUMNS (sts) HEADER countFiscalReceipt(sts)                                 
    PROPERTIES READONLY SHOWIF showProperty(sts) averageSumReceipt(sts,d) COLUMNS (sts) HEADER averageSumReceipt(sts)      
//--                               
    PROPERTIES READONLY SHOWIF allStocks() sumReceiptDetailZReportStocks(d) 
    PROPERTIES READONLY SHOWIF allStocks() discountSumZReportStocks(d)                                       
    
    PROPERTIES READONLY SHOWIF allStocks() countReceiptStocks(d)  
    PROPERTIES READONLY SHOWIF allStocks() countFiscalReceiptStocks(d)                               
    PROPERTIES READONLY SHOWIF allStocks() averageSumReceiptStocks(d)                              
                               
    
    OBJECTS dt = DATE GRID
    PROPERTIES READONLY valDt = VALUE(dt)
    PROPERTIES(dt) READONLY extractMonthName, extractDOWName 
    
    FILTERS    sumReceiptDetailZReport(dt,dFrom,dTo)
                         
    PROPERTIES READONLY SHOWIF showProperty(st) sumReceiptDetailZReport(st,dt)  COLUMNS (st) HEADER nameReceiptDetailZReport(st)
    PROPERTIES READONLY SHOWIF showProperty(st) sumPositiveCashPaymentZReport(st,dt)  COLUMNS (st) HEADER namePositiveCash(st)
    PROPERTIES READONLY SHOWIF showProperty(st) sumPositiveCardPaymentZReport(st,dt)  COLUMNS (st) HEADER namePositiveCard(st)                                    
    PROPERTIES READONLY SHOWIF showProperty(st) discountSumZReport(st,dt)  COLUMNS (st) HEADER nameDiscountSum(st)                                 
    PROPERTIES READONLY SHOWIF showProperty(st) VATSumSaleZReport(st,dt)  COLUMNS (st) HEADER nameVATSumSale(st)   
                                  
    PROPERTIES READONLY SHOWIF showProperty(st) sumNegativeCashPaymentZReport(st,dt)  COLUMNS (st) HEADER nameNegativeCash(st)                                 
    PROPERTIES READONLY SHOWIF showProperty(st) sumNegativeCardPaymentZReport(st,dt)  COLUMNS (st) HEADER nameNegativeCard(st)                             
    
    PROPERTIES READONLY SHOWIF showProperty(st) countReceipt(st,dt) COLUMNS (st) HEADER countReceipt(st)   
    PROPERTIES READONLY SHOWIF showProperty(st) countFiscalReceipt(st,dt) COLUMNS (st) HEADER countFiscalReceipt(st)                                 
    PROPERTIES READONLY SHOWIF showProperty(st) averageSumReceipt(st,dt) COLUMNS (st) HEADER averageSumReceipt(st)                                 
    PROPERTIES READONLY SHOWIF showProperty(st) countReceiptDetail(st,dt) COLUMNS (st) HEADER countReceiptDetail(st)                                 
    PROPERTIES READONLY SHOWIF showProperty(st) averageCountReceiptDetail(st,dt) COLUMNS (st) HEADER averageCountReceiptDetail(st)   

//-- Итоги
    PROPERTIES READONLY SHOWIF allStocks() sumReceiptDetailZReportStocks(dt) 
    PROPERTIES READONLY SHOWIF allStocks() sumPositiveCashPaymentZReportStocks(dt) 
    PROPERTIES READONLY SHOWIF allStocks() sumPositiveCardPaymentZReportStocks(dt)                                  
    PROPERTIES READONLY SHOWIF allStocks() discountSumZReportStocks(dt)                 
    PROPERTIES READONLY SHOWIF allStocks() VATSumSaleZReportStocks(dt)    
                                  
    PROPERTIES READONLY SHOWIF allStocks() sumNegativeCashPaymentZReportStocks(dt)                
    PROPERTIES READONLY SHOWIF allStocks() sumNegativeCardPaymentZReportStocks(dt)                            
    
    PROPERTIES READONLY SHOWIF allStocks() countReceiptStocks(dt)  
    PROPERTIES READONLY SHOWIF allStocks() countFiscalReceiptStocks(dt)                               
    PROPERTIES READONLY SHOWIF allStocks() averageSumReceiptStocks(dt)                              
    PROPERTIES READONLY SHOWIF allStocks() countReceiptDetailStocks(dt)                                 
    PROPERTIES READONLY SHOWIF allStocks() averageCountReceiptDetailStocks(dt)   
                                       
    FILTERS //(ts IS DepartmentStore AND NOT limitAccess(currentUser())) OR 
            accessCompany(currentUser(),ts);
;

DESIGN saleZreportStock {

    MOVE dates.box {
        caption = 'Период';
        type = CONTAINERH;
        MOVE PROPERTY (allStocks());
    }

    REMOVE st.box;
    NEW detail {
        type = SPLITH;
        fill = 1;
        MOVE ts.box;
        NEW tab {
            fill = 3;
            type = TABBED;
            MOVE d.box {
                caption = 'Краткий';
            } 
            MOVE dt.box {
                caption = 'Детализированный';
            }                       
        }
        PROPERTY(discountSumZReport(sts,d)) { background = #EEFFEE; }          
        PROPERTY(discountSumZReportStocks(d)) { background = #EEFFEE; }  
        

        PROPERTY(sumPositiveCashPaymentZReport(st,dt)) { background = #FFEEEE; } 
        PROPERTY(sumPositiveCardPaymentZReport(st,dt)) { background = #F4FFBD; }    

        PROPERTY(discountSumZReport(st,dt)) { background = #EEFFEE; }  
        PROPERTY(VATSumSaleZReport(st,dt)) { background = #E4FFBD; }             
        
        PROPERTY(sumNegativeCashPaymentZReport(st,dt)) { background = #D4FFFF; }              
        PROPERTY(sumNegativeCardPaymentZReport(st,dt)) { background = #C4FFBD; }    
                  
//-- итоги                  
        PROPERTY(sumPositiveCashPaymentZReportStocks(dt)) { background = #FFEEEE; } 
        PROPERTY(sumPositiveCardPaymentZReportStocks(dt)) { background = #F4FFBD; }    

        PROPERTY(discountSumZReportStocks(dt)) { background = #EEFFEE; }  
        PROPERTY(VATSumSaleZReportStocks(dt)) { background = #E4FFBD; }             
        
        PROPERTY(sumNegativeCashPaymentZReportStocks(dt)) { background = #D4FFFF; }              
        PROPERTY(sumNegativeCardPaymentZReportStocks(dt)) { background = #C4FFBD; }                                                         
    }                                                                                
    MOVE functions.box;
}

NAVIGATOR {
    retailReports  {
        ADD saleZreportStock;
    }
}

divider 'Диапазон суммы'  = DATA LOCAL NUMERIC[18,4] ();

divider 'Диапазон суммы' (Receipt r)  = INTEGER (sumReceiptDetail(r) / divider())*divider();

filterReceiptSumFrom 'Сумма с' = DATA LOCAL NUMERIC[18,4] ();
filterSumFrom (Receipt r) = sumReceiptDetail(r) >= filterReceiptSumFrom() OR (r IS Receipt AND NOT filterReceiptSumFrom());   

filterReceiptSumTo 'Сумма по' = DATA LOCAL NUMERIC[18,4] ();
filterSumTo (Receipt r) = sumReceiptDetail(r) <= filterReceiptSumTo() OR (r IS Receipt AND NOT filterReceiptSumTo());   

FORM receiptListPeriod 'Реестр чеков'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)     
       
    PROPERTIES () filterReceiptSumFrom, filterReceiptSumTo, divider
    
    OBJECTS st = DepartmentStore PANEL 
    PROPERTIES name[Stock](st) SELECTOR 
    FILTERS isCompany(st), active(st)    
    
    OBJECTS r = Receipt
    PROPERTIES(r) READONLY  nameDepartmentStore, number, date, time, hour, numberCashRegister, nameEmployee,
                            sumReceiptDetail, discountSumReceiptDetail,
                            discountSum, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                            sumCashPayment, sumCardPayment, divider SHOWIF divider()
    ORDER BY date(r), time(r)                                            
    FILTERS date(r) >= dFrom,
            date(r) <= dTo,
            isPosted(r),
            filterSumFrom(r),
            filterSumTo(r)
            
    FILTERGROUP department
        FILTER 'По магазину' departmentStore(r) == st 'F9' DEFAULT
;
DESIGN receiptListPeriod {
    main {
        NEW top {
            type = CONTAINERH;
            MOVE dates.box {caption ='Период';}
            MOVE st.box;
        }
        NEW mid {
            type = CONTAINERH;
         
            NEW filter {
                type = CONTAINERH;
                caption = 'Фильтры';
                MOVE PROPERTY (filterReceiptSumFrom());
                MOVE PROPERTY (filterReceiptSumTo());
            }
            NEW mid1 {
                caption = 'Делитель';
                MOVE PROPERTY (divider());
            }
        }
        MOVE r.box;
        MOVE functions.box;
    }
}
@extendFormFilterStockAccess(st, receiptListPeriod, company);
@extendFormFilterAccessStock(receipt, r, receiptListPeriod, departmentStore, company);

NAVIGATOR {
    retailReports  {
        ADD receiptListPeriod;
    }
}
