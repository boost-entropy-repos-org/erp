MODULE ZReportRepricing;

REQUIRE Repricing, ZReport;

NAMESPACE Repricing;

//----------------- Переоценка товаров, которые были возвращены покупателями по кассе -----------------//

retailPricingPriceBReceiptReturnDetail 'Розничная цена (действующая)' (d) =
    priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, skuReceiptReturnDetail(d), departmentStoreReceiptReturnDetail(d), dateTimeReceiptReturnDetail(d));

userRepricingDetailReceiptReturnDetail = DATA  UserRepricingDetail(ReceiptReturnDetail);

soldPriceReceiptReturnDetail (d) = (sumReceiptReturnDetail(d) (+) discountSumReceiptReturnDetail(d)) / quantityReceiptReturnDetail(d); // priceReceiptReturnDetail(d) просто цену брать не можем, так как при внешнем POS'е в этой цене неправильно 

toRepricingReceiptReturnDetail (d) = (d IS ReceiptReturnDetail) AND NOT (retailPricingPriceBReceiptReturnDetail(d) == soldPriceReceiptReturnDetail(d)) AND
            NOT userRepricingDetailReceiptReturnDetail(d);
toRepricingReceiptReturnDetailDepartment (stock) =  GROUP SUM 1 IF toRepricingReceiptReturnDetail(d) BY departmentStoreReceiptReturnDetail(d);

setReceiptReturnDetailUserRepricingStockOperation 'Создать акт переоценки'  = ACTION (stock, operation) NEWSESSION {
    IF toRepricingReceiptReturnDetailDepartment (stock) AND stock IS DepartmentStore THEN {
    
        FOR ADDOBJ p = UserRepricing DO {
            departmentStoreUserRepricing(p) <- stock;
            dateUserRepricing(p) <- currentDate();
            timeUserRepricing(p) <- currentTime();
            skipChangeLedgerUserRepricing(p) <- TRUE;
            operationUserRepricing(p) <- operation;
            
            FOR toRepricingReceiptReturnDetail(detail) AND departmentStoreReceiptDetail(detail) == stock ADDOBJ d = UserRepricingDetail DO {
                userRepricingUserRepricingDetail(d) <- p;   
                userRepricingDetailReceiptReturnDetail(detail) <- d;  
                                
                skuUserRepricingDetail(d) <- skuReceiptReturnDetail(detail);
                quantityUserRepricingDetail(d) <- quantityReceiptReturnDetail(detail);
                curRetailPriceUserRepricingDetail(d) <- soldPriceReceiptReturnDetail(detail);
                retailPriceUserRepricingDetail(d) <- retailPricingPriceBReceiptReturnDetail(detail);
            }  
            FORM userRepricing OBJECTS p = p MANAGESESSION DOCKEDMODAL;
        }
    }     
} TOOLBAR;

FORM returnReceiptDetail 'Дооценка на возврате (касса)'

    OBJECTS st = DepartmentStore FIXED PANEL 
    PROPERTIES (st) SELECTOR nameDepartmentStore
    FILTERS isCompanyStock(st)
    
    OBJECTS o = Operation FIXED PANEL 
    PROPERTIES (o) SELECTOR nameOperation
        
    OBJECTS d = ReceiptReturnDetail
   
    PROPERTIES(d) FORCE GRID READONLY dateTimeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, nameBatchReceiptDetail SHOWIF explicitBatchLedgerDepartmentStore(st),
                  descriptionSaleReceiptReturnDetail, quantityReceiptDetail, priceReceiptDetail, sumReceiptDetail, discountSumReceiptDetail,
                  numberVATReceiptDetail, retailPricingPriceBReceiptReturnDetail
    FILTERS departmentStoreReceiptDetail(d) == st,
            toRepricingReceiptReturnDetail(d)
            
    PROPERTIES TODRAW d FORCE PANEL setReceiptReturnDetailUserRepricingStockOperation(st,o)
;

@extendFormFilterStockAccess(st, returnReceiptDetail, company);

NAVIGATOR {
    retailDashboardNavigator {       
        ADD returnReceiptDetail;       
    } 
}