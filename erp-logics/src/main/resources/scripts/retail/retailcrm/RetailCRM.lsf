MODULE RetailCRM;

REQUIRE System,
        Time,
        Retail,
        Stock,
        Barcode,
        Store,
        Numerator,
        LegalEntity,
        Document,
        DiscountCard,
        PriceListLedger;

PRIORITY Stock;

priceListType = DATA LedgerPriceListType (DiscountCard);
namePriceListType 'Вид цен для дисконтных карт' (DiscountCard DiscountCard) = name(priceListType(DiscountCard));

EXTEND FORM discountCard 
    PROPERTIES(d) namePriceListType
;

DESIGN discountCard {
    row1 {
        MOVE PROPERTY(namePriceListType(d)) {
            font = '24';
        }
    }
}

EXTEND FORM discountCardDialog
    PROPERTIES(d) READONLY namePriceListType
;

EXTEND FORM discountCards 
    PROPERTIES(d) READONLYIF isReadonly() namePriceListType
;

//-------------------------- Группы акций ----------------------------------------//

CLASS PromotionGroup 'Группа акций';
TABLE promotionGroup (PromotionGroup);

@defineExternalizable(promotionGroup, VARSTRING[100]);
name 'Наименование' = DATA VARISTRING[100](PromotionGroup) IN recognize;

//--------------------------Акции----------------------------------------//

CLASS Promotion 'Акция';
TABLE promotion (Promotion);

@defineCreated(Promotion);

@defineExternalizable(promotion, VARSTRING[100]);
@defineNumbered(Promotion);

@defineNumeratedDefault(Promotion, 'Акции', 'АК');

name 'Наименование' = DATA VARISTRING[100](Promotion) IN recognize;

promotionGroup (promotion) = DATA PromotionGroup(Promotion) AUTOSET NOT NULL;
namePromotionGroup 'Группа акций' (Promotion promotion) = name(promotionGroup(promotion)) IN base;

userOrder 'Порядок' (promotion) = DATA INTEGER (Promotion);
order 'Порядок' (Promotion promotion) = OVERRIDE 1 IF promotion IS Promotion, userOrder(promotion) PERSISTENT;

userSet 'Задается кассиром' (promotion) = DATA BOOLEAN (Promotion);

CLASS OrderPromotionType 'Поряок применения акции' { 
    ascending 'Начать с самой дешевой',
    descending 'Начать с самой дорогой',
    index 'В порядке позиций в чеке'    
}
TABLE orderPromotionType (OrderPromotionType);

orderPromotionType (promotion) = DATA OrderPromotionType(Promotion);
nameOrderPromotionType 'Поряок применения акции' = staticCaption(orderPromotionType(Promotion promotion)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

FORM orderPromotionTypies 'Порядок применения акции'
    OBJECTS d = OrderPromotionType
    PROPERTIES(d) READONLY staticCaption
    DIALOG OrderPromotionType OBJECT d
;

useAllQuantity 'В акции учавствует весь товар подходящий под условие' = DATA BOOLEAN (Promotion); 

// ----------------------------- Условия акций ------------------------ //

CLASS PromotionCondition 'Условие акции';
TABLE promotionCondition (PromotionCondition);

GROUP retailCRM 'Реквизиты' : recognize;

@defineExternalizable(promotionCondition, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[2000](PromotionCondition) MINCHARWIDTH 20 PREFCHARWIDTH 40;

dateFrom 'ДАТА ОТ:' = DATA DATE (Promotion) IN retailCRM NOT NULL;
dateTo 'ДАТА ДО:' = DATA DATE (Promotion) IN retailCRM NOT NULL;

timeOfFrom 'ВРЕМЯ ОТ:' =  DATA TIME (Promotion) IN retailCRM;
timeOfTo 'ВРЕМЯ ДО:' =  DATA TIME (Promotion) IN retailCRM;

TABLE promotionDOW (Promotion, DOW);
skip 'Исключить' = DATA BOOLEAN (Promotion, DOW);

allStores 'В акции' = DATA BOOLEAN (Promotion);
allStores(Promotion promotion) <- TRUE WHEN SET(promotion IS Promotion);

TABLE promotionChainStores(Promotion, ChainStores);
dataIn 'В акции' = DATA BOOLEAN (Promotion, ChainStores);

TABLE promotionStoreType(Promotion, StoreType);
dataIn 'В акции' = DATA BOOLEAN (Promotion, StoreType);

TABLE promotionStore(Promotion, Store);
dataIn 'В акции' = DATA BOOLEAN (Promotion, Store);

in 'В акции' (Promotion promotion, ChainStores chainStores) = OVERRIDE
    allStores(promotion) AND chainStores IS ChainStores,
    dataIn(promotion, chainStores) PERSISTENT;

in 'В акции' (Promotion promotion, StoreType storeType) = OVERRIDE
    in(promotion, chainStores(storeType)),
    dataIn(promotion, storeType) PERSISTENT;

in 'В акции' (Promotion promotion, Store store) =
    (OVERRIDE in(promotion, storeType(store)),
              dataIn(promotion, store))
    AND isCompany(store) PERSISTENT;

stores 'Магазины' (promotion) = GROUP CONCAT Store.name(Store store) IF in(Promotion promotion, store), ', '
                                              BY promotion
                                              ORDER store PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40;

minSumBill 'Сумма чека (от)' (promotion) = DATA NUMERIC[16,4] (Promotion) @@denomination;
maxSumBill 'Сумма чека (до)' (promotion) = DATA NUMERIC[16,4] (Promotion) @@denomination;

hasDiscountCard 'Есть дисконтная карта' = DATA BOOLEAN (Promotion);
noDiscountCard 'Нет дисконтной карты' = DATA BOOLEAN (Promotion);
allDiscountCard 'Любая дисконтная карта' = DATA BOOLEAN (Promotion);

TABLE promotionDiscountCard (Promotion, DiscountCard);
inData 'В акции' = DATA BOOLEAN (Promotion, DiscountCard);

in 'В акции' (Promotion promotion, DiscountCard discountCard) = OVERRIDE allDiscountCard(promotion) AND discountCard IS DiscountCard,
                                                                       inData(promotion, discountCard);

minCumulativeSum 'Накоп. сумма (от)' (promotion) = DATA NUMERIC[16,4] (Promotion) @@denomination;
maxCumulativeSum 'Накоп. сумма (до)' (promotion) = DATA NUMERIC[16,4] (Promotion) @@denomination;

useCurrentReceipt 'Учитывать текущий чек' (promotion) = DATA BOOLEAN (Promotion);

minCumulativeSum(Promotion promotion) => hasDiscountCard (promotion) RESOLVE RIGHT;
maxCumulativeSum(Promotion promotion) => hasDiscountCard (promotion) RESOLVE RIGHT;
allDiscountCard(Promotion promotion) => hasDiscountCard (promotion) RESOLVE RIGHT;

promotion = DATA Promotion (PromotionCondition) NOT NULL DELETE;
namePromotion 'Акция' (PromotionCondition promotionCondition) = name(promotion(promotionCondition));
dateFrom 'Действует (от)' (PromotionCondition promotionCondition) = dateFrom(promotion(promotionCondition));
dateTo 'Действует (до)' (PromotionCondition promotionCondition) = dateTo(promotion(promotionCondition));

orderPromotionType = orderPromotionType(promotion(PromotionCondition condition));
nameOrderPromotionType 'Поряок применения акции' = staticCaption(orderPromotionType(PromotionCondition condition));

countPromotionCondition 'Кол-во условий' (promotion) = GROUP SUM 1 IF promotion(PromotionCondition promotionCondition) == Promotion promotion BY promotion PERSISTENT;

minQuantity 'Количество (от)' = DATA NUMERIC[14,3] (PromotionCondition);
CONSTRAINT minQuantity(PromotionCondition promotionCondition) <= 0.0 MESSAGE 'Количество в условии акции должно быть строго больше 0';

minSum 'Сумма (от)' = DATA NUMERIC[18,4] (PromotionCondition) @@denomination;
CONSTRAINT minSum(PromotionCondition promotionCondition) <= 0.0 MESSAGE 'Сумма в условии акции должна быть строго больше 0';

quantityDiscount 'Кол-во товаров со скидкой' = DATA NUMERIC[14,3] (PromotionCondition);
percent 'Процент скидки'  = DATA NUMERIC[8,3] (PromotionCondition);
resultPrice 'Цена со скидкой' = DATA NUMERIC[16,4] (PromotionCondition) @@denomination;
resultPrice 'Цена со скидкой' = DATA NUMERIC[16,4] (PromotionCondition, Sku) @@denomination;
sumDiscount 'Сумма скидки' (promotionCondition) = DATA NUMERIC[16,4] (PromotionCondition) @@denomination;
sumReceipt 'Сумма чека' (promotionCondition) = DATA NUMERIC[16,4] (PromotionCondition) @@denomination;

priceListType 'Вид цены' (promotionCondition) = DATA PriceListType (PromotionCondition);
namePriceListType 'Вид цены' (PromotionCondition promotionCondition) = name(priceListType(promotionCondition));

userSet 'Задается кассиром' (PromotionCondition promotionCondition) = userSet(promotion(promotionCondition));

// skuGroup
TABLE promotionConditionSkuGroup (PromotionCondition, SkuGroup);
inData 'В условии' = DATA BOOLEAN (PromotionCondition, SkuGroup);
inParent (promotionCondition, skuGroup) = GROUP SUM 1 IF inData(PromotionCondition promotionCondition, SkuGroup parent) AND isParent(SkuGroup child, parent)
                                                                          BY promotionCondition, child PERSISTENT;
in 'В условии' = inParent(PromotionCondition promotionCondition, SkuGroup skuGroup) OR inData(promotionCondition, skuGroup);

// sku
TABLE promotionConditionSku (PromotionCondition, Sku);
inData 'В условии' = DATA BOOLEAN (PromotionCondition, Sku);

overIn 'В условии' = ABSTRACT BOOLEAN (PromotionCondition, Sku);

in 'В условии' (PromotionCondition c, Sku sku) = OVERRIDE
    TRUE IF inParent(c, skuGroup(sku)),                                                                            
    overIn(c, sku),
    inData(c, sku);

notHasDiscountCard (Promotion p) = NOT hasDiscountCard(p);
notNoDiscountCard (Promotion p) = NOT noDiscountCard(p);

FORM promotionConditions 'Условия Акций'
    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     READONLY id SHOWIF showIDs(), namePromotion, name, 
                       dateFrom, dateTo,
                       minQuantity, minSum, quantityDiscount, percent,
                       namePriceListType, resultPrice, sumDiscount, sumReceipt
    FILTERGROUP filter1
        FILTER 'Текущие и будущие' dateTo(sg) >= currentDate() 'F5' DEFAULT                      
        FILTER 'Прошедшие' dateTo(sg) < currentDate() 'F6'                       
    DIALOG PromotionCondition OBJECT sg                       
;

FORM promotion 'Акция'
    OBJECTS sh=Promotion   FIXED PANEL
    PROPERTIES(sh)     name, namePromotionGroup, nameOrderPromotionType, useAllQuantity, id SHOWIF showIDs(), userSet,
                       nameNumerator, number, series,
                       dateFrom, dateTo, timeOfFrom, timeOfTo,
                       minSumBill, maxSumBill
    PROPERTIES(sh) SHOWIF notNoDiscountCard(sh)  hasDiscountCard 
    PROPERTIES(sh) SHOWIF notHasDiscountCard(sh) noDiscountCard 
    PROPERTIES(sh) SHOWIF hasDiscountCard(sh)    minCumulativeSum, maxCumulativeSum, useCurrentReceipt, allDiscountCard
    OBJECTS d=DOW
    PROPERTIES(d)     READONLY staticCaption
    PROPERTIES(sh, d)  skip
    FILTERGROUP filterDOW
        FILTER 'Только отмеченные' skip(sh, d) 'F11'

    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     id SHOWIF showIDs(), name, minQuantity, minSum, quantityDiscount, percent,
                       namePriceListType, resultPrice, sumDiscount, sumReceipt, ADDOBJ, DELETESESSION

    FILTERS            promotion(sg)==sh

    TREE skuTree skg = SkuGroup PARENT parent
    PROPERTIES READONLY order(skg), skuTreeName = name(skg)
    ORDER BY order(skg), skuTreeName
    PROPERTIES(sg, skg) in
    FILTERGROUP inactive FILTER 'Активные' active(skg) 'F5' DEFAULT

    OBJECTS sk = Sku
    PROPERTIES(sk)    READONLY idBarcode, name
    FILTERS           isParent(skg, sk)
    PROPERTIES(sg, sk)   resultPrice, in

    FILTERGROUP filterSku
        FILTER 'Только отмеченные' in(sg, sk) 'F10'

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY OBJVALUE(a), Store.name(t), Store.name(st)

    FILTERS stringEqualsAll(a),
            in (t, st)

    OBJECTS s=Store
    PROPERTIES(s) READONLY Store.name, address, nameLegalEntity

    FILTERS in(t, st, s),
            isCompany(s)

    PROPERTIES(sh) allStores TODRAW a FORCE GRID
    PROPERTIES(sh, t) in
    PROPERTIES(sh, st) in
    PROPERTIES(sh, s) in
    FILTERGROUP filterStore
        FILTER 'Только отмеченные' in(sh, s) 'F9'

    OBJECTS dis= DiscountCard
    PROPERTIES(dis)    READONLY number, series, nameLegalEntity
    PROPERTIES(sh, dis) in
    FILTERGROUP filterDiscountCard
        FILTER 'Только отмеченные' in(sh, dis) 'F8'

    EDIT Promotion OBJECT sh
;

DESIGN promotion {
    main{
        preferredSize = (1024, 768);

        MOVE sh.box {
            type = CONTAINERH;
            NEW row01 {
                caption = 'Название';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(id(sh));
                MOVE PROPERTY(name(sh)) {
                    preferredCharWidth = 30;

                }
                MOVE PROPERTY(namePromotionGroup(sh));
                MOVE PROPERTY(nameOrderPromotionType(sh));
                MOVE PROPERTY(useAllQuantity(sh));
                MOVE PROPERTY(userSet(sh));
            }
            MOVE sh.numbered {
                type = COLUMNS;
                columns = 1;
            }
            NEW row11 {
                caption = 'Диапозон дат';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(dateFrom(sh));
                MOVE PROPERTY(dateTo(sh));
            }
            NEW row12 {
                caption = 'Часы';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(timeOfFrom(sh));
                MOVE PROPERTY(timeOfTo(sh));
            }
            NEW row13 {
                caption = 'Суммы';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(minSumBill(sh));
                MOVE PROPERTY(maxSumBill(sh));
            }
            NEW row14 {
                caption = 'Дисконтные карты';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(hasDiscountCard(sh));
                MOVE PROPERTY(noDiscountCard(sh));
                MOVE PROPERTY(minCumulativeSum(sh));
                MOVE PROPERTY(maxCumulativeSum(sh));
                MOVE PROPERTY(useCurrentReceipt(sh));
                MOVE PROPERTY(allDiscountCard(sh));
            }
        }

        NEW row2 {
            fill = 1;
            type = TABBED;

            NEW row21 {
                caption = 'Условия';
                fill = 1;
                type = SPLITV;

                MOVE sg.box;

                NEW row212 {
                    fill = 3;
                    type = SPLITH;
                    caption = 'Товары';

                    MOVE skuTree.tree.box;
                    NEW skuPane {
                        fill = 3;
                        type = TABBED;
                        MOVE sk.box;
                    }
                }
            }

            NEW row22 {
                fill = 1;
                type = SPLITH;
                caption = 'Магазины';

                MOVE treeStore.tree.box;
                MOVE s.box {
                    fill = 3;
                }
            }
            MOVE dis.box;
            MOVE d.box;
        }

        MOVE functions.box;
    }
}
copyProperties = ACTION ABSTRACT (PromotionCondition, PromotionCondition);

copy 'Копировать'(Promotion promotion) = ACTION NEWSESSION {
    FOR ADDOBJ p = Promotion DO {
        promotionGroup(p) <- promotionGroup(promotion);
        orderPromotionType(p) <- orderPromotionType(promotion);
        dateFrom(p) <- dateFrom(promotion);
        dateTo(p) <- dateTo(promotion);
        timeOfFrom(p) <- timeOfFrom(promotion);
        timeOfTo(p) <- timeOfTo(promotion);
        minSumBill(p) <- minSumBill(promotion);
        maxSumBill(p) <-  maxSumBill(promotion);
        hasDiscountCard(p) <- hasDiscountCard(promotion);
        noDiscountCard(p) <- noDiscountCard(promotion);
        minCumulativeSum(p) <- minCumulativeSum(promotion);
        maxCumulativeSum(p) <- maxCumulativeSum(promotion);
        useCurrentReceipt(p) <- useCurrentReceipt(promotion);
        allDiscountCard(p) <- allDiscountCard(promotion);
        inData(p, DiscountCard dicsountCard) <- inData(promotion, dicsountCard);        

        FOR promotion(PromotionCondition promotionCondition) == promotion ADDOBJ pc = PromotionCondition DO {
            promotion(pc) <- p;
            minQuantity(pc) <- minQuantity(promotionCondition);
            minSum(pc) <- minSum(promotionCondition);
            quantityDiscount(pc) <- quantityDiscount(promotionCondition);
            percent(pc) <- percent(promotionCondition);
            priceListType(pc) <- priceListType(promotionCondition);
            resultPrice(pc) <- resultPrice(promotionCondition);
            resultPrice(pc, Sku sku) <- resultPrice(promotionCondition, sku);
            sumDiscount(pc) <- sumDiscount(promotionCondition);
            sumReceipt(pc) <- sumReceipt(promotionCondition);

            inData(pc, SkuGroup skuGroup) <- inData(promotionCondition, skuGroup);
            inData(pc, Sku sku) <- inData(promotionCondition, sku);
            copyProperties(pc, promotionCondition);
        }

        FORM promotion OBJECTS sh = p MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

background 'Цвет' (Promotion promotion) = CASE WHEN dateFrom(promotion) > currentDate() THEN RGB(224,255,224)
                                              WHEN dateTo(promotion) < currentDate() THEN RGB(255,224,224);

FORM promotions 'Акции'
    OBJECTS sh=Promotion
    PROPERTIES(sh)  READONLY BACKGROUND background(sh) 
                    order, name, number, series, dateFrom, dateTo, nameOrderPromotionType, stores,
                    timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                    hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                    useCurrentReceipt, allDiscountCard
    PROPERTIES(sh)  copy, ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY        order(sh)

    PROPERTIES (sh) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer
    
    FILTERGROUP inactivePromotion 
        FILTER 'Текущие' dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate() 'F11'
        FILTER 'Активные' (dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate()) OR (dateFrom(sh) > currentDate()) 'F10' DEFAULT      

;

FORM promotionGroup 'Группа акций'
    OBJECTS st=PromotionGroup FIXED PANEL
    PROPERTIES(st)     name

    OBJECTS sh=Promotion
    PROPERTIES(sh)     userOrder
    PROPERTIES(sh)     READONLY name, series, number, dateFrom, dateTo, stores,
                                timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                                hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                                useCurrentReceipt, allDiscountCard
    PROPERTIES(sh)     copy, ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY userOrder(sh)

    FILTERS promotionGroup(sh)==st

    EDIT PromotionGroup OBJECT st
;

FORM promotionGroups 'Группы акций'
    OBJECTS st=PromotionGroup
    PROPERTIES(st)     READONLY name
    PROPERTIES(st)     ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    OBJECTS sh=Promotion
    PROPERTIES(sh)     READONLY order
    PROPERTIES(sh)     READONLY name, series, number, dateFrom, dateTo, stores,
                                timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                                hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                                useCurrentReceipt, allDiscountCard
    PROPERTIES(sh)     ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY order(sh)

    FILTERS promotionGroup(sh)==st

    DIALOG PromotionGroup OBJECT st
;

EXTEND FORM discountCard
    OBJECTS p=Promotion
    PROPERTIES(p, d) in
    PROPERTIES(p) READONLY name, number, series, dateFrom, dateTo, stores,
                           timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                           hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                           useCurrentReceipt, allDiscountCard
    FILTERS hasDiscountCard(p)
;

DESIGN discountCard {
    tabContainer{
        MOVE p.box;
    }
}

NAVIGATOR {
    retailNavigator {
        NEW retailCRMNavigator 'CRM' BEFORE retailMasterData {
            ADD promotions;
            ADD promotionGroups;
        }
    }
}