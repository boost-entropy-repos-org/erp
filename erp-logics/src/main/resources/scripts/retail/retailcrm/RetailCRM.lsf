MODULE RetailCRM;

REQUIRE System,
        Time,
        Retail,
        Stock,
        Barcode,
        Store,
        Numerator,
        LegalEntity,
        Document,
        DiscountCard,
        PriceListType;

PRIORITY Stock;

priceListTypeDiscountCard = DATA PriceListType (DiscountCard);
namePriceListTypeDiscountCard 'Вид цен для дисконтных карт' (DiscountCard) = namePriceListType(priceListTypeDiscountCard(DiscountCard));
percentDiscountCard 'Процент скидки' (discountCard) = DATA NUMERIC[16,2] (DiscountCard);

EXTEND FORM discountCard 
    PROPERTIES(d) namePriceListTypeDiscountCard, percentDiscountCard
;

DESIGN discountCard {
    row1 {
        MOVE PROPERTY(namePriceListTypeDiscountCard(d)) {
            font = '24';
        }
    }
}

EXTEND FORM discountCardDialog
    PROPERTIES(d) READONLY namePriceListTypeDiscountCard, percentDiscountCard
;

EXTEND FORM discountCards 
    PROPERTIES(d) READONLY namePriceListTypeDiscountCard, percentDiscountCard
;

//-------------------------- Группы акций ----------------------------------------//

CLASS PromotionGroup 'Группа акций';
TABLE promotionGroup (PromotionGroup);

@defineExternalizable(promotionGroup, VARSTRING[100]);
namePromotionGroup 'Наименование' = DATA VARISTRING[100](PromotionGroup) IN recognize;

//--------------------------Акции----------------------------------------//

CLASS Promotion 'Акция';
TABLE promotion (Promotion);

@defineCreated(Promotion);

@defineExternalizable(promotion, VARSTRING[100]);
@defineNumbered(Promotion);

@defineNumeratedDefault(Promotion, 'Акции', 'АК');

namePromotion 'Наименование' = DATA VARISTRING[100](Promotion) IN recognize;

promotionGroupPromotion (promotion) = DATA PromotionGroup(Promotion) AUTOSET NOT NULL;
namePromotionGroupPromotion 'Группа акций' (promotion) = namePromotionGroup(promotionGroupPromotion(promotion)) IN base;

userOrderPromotion 'Порядок' (promotion) = DATA INTEGER (Promotion);
orderPromotion 'Порядок' (promotion) = OVERRIDE 1 IF promotion IS Promotion, userOrderPromotion(promotion) PERSISTENT;

userSetPromotion 'Задается кассиром' (promotion) = DATA BOOLEAN (Promotion);

CLASS OrderPromotionType 'Поряок применения акции' { 
    ascending 'Начать с самой дешевой',
    descending 'Начать с самой дорогой',
    index 'В порядке позиций в чеке'    
}
TABLE orderPromotionType (OrderPromotionType);

orderPromotionTypePromotion (promotion) = DATA OrderPromotionType(Promotion);
nameOrderPromotionTypePromotion 'Поряок применения акции' = staticCaption(orderPromotionTypePromotion(promotion)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

FORM orderPromotionTypies 'Порядок применения акции'
    OBJECTS d = OrderPromotionType
    PROPERTIES(d) READONLY staticCaption
    DIALOG OrderPromotionType OBJECT d
;

useAllQuantityPromotion 'В акции учавствует весь товар' = DATA BOOLEAN (Promotion); 

// ----------------------------- Условия акций ------------------------ //

CLASS PromotionCondition 'Условие акции';
TABLE promotionCondition (PromotionCondition);

GROUP retailCRM 'Реквизиты' : recognize;

@defineExternalizable(promotionCondition, VARSTRING[100]);

namePromotionCondition 'Наименование' = DATA VARISTRING[2000](PromotionCondition) MINCHARWIDTH 20 PREFCHARWIDTH 40;

dateFromPromotion 'ДАТА ОТ:' = DATA DATE (Promotion) IN retailCRM NOT NULL;
dateToPromotion 'ДАТА ДО:' = DATA DATE (Promotion) IN retailCRM NOT NULL;

timeOfFromPromotion 'ВРЕМЯ ОТ:' =  DATA TIME (Promotion) IN retailCRM;
timeOfToPromotion 'ВРЕМЯ ДО:' =  DATA TIME (Promotion) IN retailCRM;

TABLE promotionDOW (Promotion, DOW);
skipPromotionDOW 'Исключить' = DATA BOOLEAN (Promotion, DOW);

allStoresPromotion 'В акции' = DATA BOOLEAN (Promotion);
allStoresPromotion(promotion) <- TRUE WHEN SET(promotion IS Promotion);

TABLE promotionChainStores(Promotion, ChainStores);
dataInPromotionChainStores 'В акции' = DATA BOOLEAN (Promotion, ChainStores);

TABLE promotionStoreType(Promotion, StoreType);
dataInPromotionStoreType 'В акции' = DATA BOOLEAN (Promotion, StoreType);

TABLE promotionStore(Promotion, Store);
dataInPromotionStore 'В акции' = DATA BOOLEAN (Promotion, Store);

inPromotionChainStores 'В акции' (promotion, chainStores) = OVERRIDE
    allStoresPromotion(promotion) AND chainStores IS ChainStores,
    dataInPromotionChainStores(promotion, chainStores) PERSISTENT;

inPromotionStoreType 'В акции' (promotion, storeType) = OVERRIDE
    inPromotionChainStores(promotion, chainStoresStoreType(storeType)),
    dataInPromotionStoreType(promotion, storeType) PERSISTENT;

inPromotionStore 'В акции' (promotion, store) =
    (OVERRIDE inPromotionStoreType(promotion, storeTypeStore(store)),
              dataInPromotionStore(promotion, store))
    AND isCompanyStore(store);

storesPromotion 'Магазины' (promotion) = GROUP CONCAT nameStore(store) IF inPromotionStore(promotion, store), ', '
                                              BY promotion
                                              ORDER store PERSISTENT MINCHARWIDTH 20 PREFCHARWIDTH 40;

minSumBillPromotion 'Сумма чека (от)' (promotion) = DATA NUMERIC[14,2] (Promotion);
maxSumBillPromotion 'Сумма чека (до)' (promotion) = DATA NUMERIC[14,2] (Promotion);

hasDiscountCardPromotion 'Есть дисконтная карта' = DATA BOOLEAN (Promotion);
noDiscountCardPromotion 'Нет дисконтной карты' = DATA BOOLEAN (Promotion);
allDiscountCardPromotion 'Любая дисконтная карта' = DATA BOOLEAN (Promotion);

TABLE promotionDiscountCard (Promotion, DiscountCard);
inDataPromotionDiscountCard 'В акции' = DATA BOOLEAN (Promotion, DiscountCard);

inPromotionDiscountCard 'В акции' (promotion, discountCard) = OVERRIDE allDiscountCardPromotion(promotion) AND discountCard IS DiscountCard,
                                                                       inDataPromotionDiscountCard(promotion, discountCard);

minCumulativeSumPromotion 'Накоп. сумма (от)' (promotion) = DATA NUMERIC[14,2] (Promotion);
maxCumulativeSumPromotion 'Накоп. сумма (до)' (promotion) = DATA NUMERIC[14,2] (Promotion);

useCurrentReceiptPromotion 'Учитывать текущий чек' (promotion) = DATA BOOLEAN (Promotion);

minCumulativeSumPromotion(promotion) => hasDiscountCardPromotion (promotion) RESOLVE RIGHT;
maxCumulativeSumPromotion(promotion) => hasDiscountCardPromotion (promotion) RESOLVE RIGHT;
allDiscountCardPromotion(promotion) => hasDiscountCardPromotion (promotion) RESOLVE RIGHT;

promotionPromotionCondition = DATA Promotion (PromotionCondition) NOT NULL DELETE;
namePromotionPromotionCondition 'Акция' (promotionCondition) = namePromotion(promotionPromotionCondition(promotionCondition));
dateFromPromotionCondition 'Действует (от)' (promotionCondition) = dateFromPromotion(promotionPromotionCondition(promotionCondition));
dateToPromotionCondition 'Действует (до)' (promotionCondition) = dateToPromotion(promotionPromotionCondition(promotionCondition));

orderPromotionTypePromotionCondition = orderPromotionTypePromotion(promotionPromotionCondition(condition));
nameOrderPromotionTypePromotionCondition 'Поряок применения акции' = staticCaption(orderPromotionTypePromotionCondition(condition));

countPromotionConditionPromotion 'Кол-во условий' (promotion) = GROUP SUM 1 IF promotionPromotionCondition(promotionCondition) == promotion BY promotion PERSISTENT;

minQuantityPromotionCondition 'Количество (от)' = DATA NUMERIC[14,3] (PromotionCondition);
CONSTRAINT minQuantityPromotionCondition(promotionCondition) <= 0.0 MESSAGE 'Количество в условии акции должно быть строго больше 0';

minSumPromotionCondition 'Сумма (от)' = DATA NUMERIC[16,2] (PromotionCondition);
CONSTRAINT minSumPromotionCondition(promotionCondition) <= 0.0 MESSAGE 'Сумма в условии акции должна быть строго больше 0';

quantityDiscountPromotionCondition 'Кол-во товаров со скидкой' = DATA NUMERIC[14,3] (PromotionCondition);
percentPromotionCondition 'Процент скидки'  = DATA NUMERIC[8,3] (PromotionCondition);
resultPricePromotionCondition 'Цена со скидкой' = DATA NUMERIC[14,2] (PromotionCondition);
sumDiscountPromotionCondition 'Сумма скидки' (promotionCondition) = DATA NUMERIC[14,2] (PromotionCondition);
sumReceiptPromotionCondition 'Сумма чека' (promotionCondition) = DATA NUMERIC[14,2] (PromotionCondition);

priceListTypePromotionCondition 'Вид цены' (promotionCondition) = DATA PriceListType (PromotionCondition);
namePriceListTypePromotionCondition 'Вид цены' (promotionCondition) = namePriceListType(priceListTypePromotionCondition(promotionCondition));

userSetPromotionCondition 'Задается кассиром' (promotionCondition) = userSetPromotion(promotionPromotionCondition(promotionCondition));

// skuGroup
TABLE promotionConditionSkuGroup (PromotionCondition, SkuGroup);
inDataPromotionConditionSkuGroup 'В условии' = DATA BOOLEAN (PromotionCondition, SkuGroup);
inParentPromotionConditionSkuGroup (promotionCondition, skuGroup) = GROUP SUM 1 IF inDataPromotionConditionSkuGroup(promotionCondition, parent) AND isParentSkuGroupSkuGroup(child, parent)
                                                                          BY promotionCondition, child PERSISTENT;
inPromotionConditionSkuGroup 'В условии' = inParentPromotionConditionSkuGroup(promotionCondition, skuGroup) OR inDataPromotionConditionSkuGroup(promotionCondition, skuGroup);

// sku
TABLE promotionConditionSku (PromotionCondition, Sku);
inDataPromotionConditionSku 'В условии' = DATA BOOLEAN (PromotionCondition, Sku);

overInPromotionConditionSku 'В условии' = ABSTRACT BOOLEAN (PromotionCondition, Sku);

inPromotionConditionSku 'В условии' (c, sku) = OVERRIDE
    TRUE IF inParentPromotionConditionSkuGroup(c, skuGroupSku(sku)),                                                                            
    overInPromotionConditionSku(c, sku),
    inDataPromotionConditionSku(c, sku);

notHasDiscountCardPromotion (p) = NOT hasDiscountCardPromotion(p);
notNoDiscountCardPromotion (p) = NOT noDiscountCardPromotion(p);

FORM promotionConditions 'Условия Акций'
    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     READONLY idPromotionCondition SHOWIF showIDs(), namePromotionPromotionCondition, namePromotionCondition, 
                       minQuantityPromotionCondition, minSumPromotionCondition, quantityDiscountPromotionCondition, percentPromotionCondition,
                       namePriceListTypePromotionCondition, resultPricePromotionCondition, sumDiscountPromotionCondition, sumReceiptPromotionCondition
    DIALOG PromotionCondition OBJECT sg                       
;

FORM promotion 'Акция'
    OBJECTS sh=Promotion   FIXED PANEL
    PROPERTIES(sh)     namePromotion, namePromotionGroupPromotion, nameOrderPromotionTypePromotion, useAllQuantityPromotion, idPromotion SHOWIF showIDs(), userSetPromotion,
                       nameNumeratorPromotion, numberPromotion, seriesPromotion,
                       dateFromPromotion, dateToPromotion, timeOfFromPromotion, timeOfToPromotion,
                       minSumBillPromotion, maxSumBillPromotion
    PROPERTIES(sh) SHOWIF notNoDiscountCardPromotion(sh)  hasDiscountCardPromotion 
    PROPERTIES(sh) SHOWIF notHasDiscountCardPromotion(sh) noDiscountCardPromotion 
    PROPERTIES(sh) SHOWIF hasDiscountCardPromotion(sh)    minCumulativeSumPromotion, maxCumulativeSumPromotion, useCurrentReceiptPromotion, allDiscountCardPromotion
    OBJECTS d=DOW
    PROPERTIES(d)     READONLY staticCaption
    PROPERTIES(sh, d)  skipPromotionDOW
    FILTERGROUP filterDOW
        FILTER 'Только отмеченные' skipPromotionDOW(sh, d) 'F11'

    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     idPromotionCondition SHOWIF showIDs(), namePromotionCondition, minQuantityPromotionCondition, minSumPromotionCondition, quantityDiscountPromotionCondition, percentPromotionCondition,
                       namePriceListTypePromotionCondition, resultPricePromotionCondition, sumDiscountPromotionCondition, sumReceiptPromotionCondition, ADDOBJ, DELETESESSION

    FILTERS            promotionPromotionCondition(sg)==sh

    TREE skuTree skg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(skg), skuTreeName = nameSkuGroup(skg)
    ORDER BY orderSkuGroup(skg), skuTreeName
    PROPERTIES(sg, skg) inPromotionConditionSkuGroup
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(skg) 'F5' DEFAULT

    OBJECTS sk = Sku
    PROPERTIES(sk)    READONLY idBarcodeSku, nameSku
    FILTERS           isParentSkuGroupSku(skg, sk)
    PROPERTIES(sg, sk)   inPromotionConditionSku

    FILTERGROUP filterSku
        FILTER 'Только отмеченные' inPromotionConditionSku(sg, sk) 'F10'

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st)

    FILTERS stringEqualsAll(a),
            inChainStoresStoreType (t, st)

    OBJECTS s=Store
    PROPERTIES(s) READONLY nameStore, addressStore, nameLegalEntityStore

    FILTERS inChainStoresStoreTypeStore(t, st, s),
            isCompanyStore(s)

    PROPERTIES(sh) allStoresPromotion TODRAW a FORCE GRID
    PROPERTIES(sh, t) inPromotionChainStores
    PROPERTIES(sh, st) inPromotionStoreType
    PROPERTIES(sh, s) inPromotionStore
    FILTERGROUP filterStore
        FILTER 'Только отмеченные' inPromotionStore(sh, s) 'F9'

    OBJECTS dis= DiscountCard
    PROPERTIES(dis)    READONLY numberDiscountCard, seriesDiscountCard, nameLegalEntityDiscountCard
    PROPERTIES(sh, dis) inPromotionDiscountCard
    FILTERGROUP filterDiscountCard
        FILTER 'Только отмеченные' inPromotionDiscountCard(sh, dis) 'F8'

    EDIT Promotion OBJECT sh
;

DESIGN promotion {
    main{
        preferredSize = (1024, 768);

        MOVE sh.box {
            type = CONTAINERH;
            NEW row01 {
                caption = 'Название';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(idPromotion(sh));
                MOVE PROPERTY(namePromotion(sh)) {
                    preferredCharWidth = 30;

                }
                MOVE PROPERTY(namePromotionGroupPromotion(sh));
                MOVE PROPERTY(nameOrderPromotionTypePromotion(sh));
                MOVE PROPERTY(useAllQuantityPromotion(sh));
                MOVE PROPERTY(userSetPromotion(sh));
            }
            MOVE sh.numbered {
                type = COLUMNS;
                columns = 1;
            }
            NEW row11 {
                caption = 'Диапозон дат';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(dateFromPromotion(sh));
                MOVE PROPERTY(dateToPromotion(sh));
            }
            NEW row12 {
                caption = 'Часы';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(timeOfFromPromotion(sh));
                MOVE PROPERTY(timeOfToPromotion(sh));
            }
            NEW row13 {
                caption = 'Суммы';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(minSumBillPromotion(sh));
                MOVE PROPERTY(maxSumBillPromotion(sh));
            }
            NEW row14 {
                caption = 'Дисконтные карты';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(hasDiscountCardPromotion(sh));
                MOVE PROPERTY(noDiscountCardPromotion(sh));
                MOVE PROPERTY(minCumulativeSumPromotion(sh));
                MOVE PROPERTY(maxCumulativeSumPromotion(sh));
                MOVE PROPERTY(useCurrentReceiptPromotion(sh));
                MOVE PROPERTY(allDiscountCardPromotion(sh));
            }
        }

        NEW row2 {
            fill = 1;
            type = TABBED;

            NEW row21 {
                caption = 'Условия';
                fill = 1;
                type = SPLITV;

                MOVE sg.box;

                NEW row212 {
                    fill = 3;
                    type = SPLITH;
                    caption = 'Товары';

                    MOVE skuTree.tree.box;
                    NEW skuPane {
                        fill = 3;
                        type = TABBED;
                        MOVE sk.box;
                    }
                }
            }

            NEW row22 {
                fill = 1;
                type = SPLITH;
                caption = 'Магазины';

                MOVE treeStore.tree.box;
                MOVE s.box {
                    fill = 3;
                }
            }
            MOVE dis.box;
            MOVE d.box;
        }

        MOVE functions.box;
    }
}
copyPropertiesPromotionCondition = ABSTRACT ACTION (PromotionCondition, PromotionCondition);

copyPromotion 'Копировать' = ACTION (promotion) NEWSESSION {
    FOR ADDOBJ p = Promotion DO {
        promotionGroupPromotion(p) <- promotionGroupPromotion(promotion);
        orderPromotionTypePromotion(p) <- orderPromotionTypePromotion(promotion);
        dateFromPromotion(p) <- dateFromPromotion(promotion);
        dateToPromotion(p) <- dateToPromotion(promotion);
        timeOfFromPromotion(p) <- timeOfFromPromotion(promotion);
        timeOfToPromotion(p) <- timeOfToPromotion(promotion);
        minSumBillPromotion(p) <- minSumBillPromotion(promotion);
        maxSumBillPromotion(p) <-  maxSumBillPromotion(promotion);
        hasDiscountCardPromotion(p) <- hasDiscountCardPromotion(promotion);
        noDiscountCardPromotion(p) <- noDiscountCardPromotion(promotion);
        minCumulativeSumPromotion(p) <- minCumulativeSumPromotion(promotion);
        maxCumulativeSumPromotion(p) <- maxCumulativeSumPromotion(promotion);
        useCurrentReceiptPromotion(p) <- useCurrentReceiptPromotion(promotion);
        allDiscountCardPromotion(p) <- allDiscountCardPromotion(promotion);
        inDataPromotionDiscountCard(p, dicsountCard) <- inDataPromotionDiscountCard(promotion, dicsountCard);        

        FOR promotionPromotionCondition(promotionCondition) == promotion ADDOBJ pc = PromotionCondition DO {
            promotionPromotionCondition(pc) <- p;
            minQuantityPromotionCondition(pc) <- minQuantityPromotionCondition(promotionCondition);
            minSumPromotionCondition(pc) <- minSumPromotionCondition(promotionCondition);
            quantityDiscountPromotionCondition(pc) <- quantityDiscountPromotionCondition(promotionCondition);
            percentPromotionCondition(pc) <- percentPromotionCondition(promotionCondition);
            priceListTypePromotionCondition(pc) <- priceListTypePromotionCondition(promotionCondition);
            resultPricePromotionCondition(pc) <- resultPricePromotionCondition(promotionCondition);
            sumDiscountPromotionCondition(pc) <- sumDiscountPromotionCondition(promotionCondition);
            sumReceiptPromotionCondition(pc) <- sumReceiptPromotionCondition(promotionCondition);

            inDataPromotionConditionSkuGroup(pc, skuGroup) <- inDataPromotionConditionSkuGroup(promotionCondition, skuGroup);
            inDataPromotionConditionSku(pc, sku) <- inDataPromotionConditionSku(promotionCondition, sku);
            copyPropertiesPromotionCondition(pc, promotionCondition);
        }

        FORM promotion OBJECTS sh = p MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

backgroundPromotion 'Цвет' (promotion) = CASE WHEN dateFromPromotion(promotion) > currentDate() THEN RGB(224,255,224)
                                              WHEN dateToPromotion(promotion) < currentDate() THEN RGB(255,224,224);

FORM promotions 'Акции'
    OBJECTS sh=Promotion
    PROPERTIES(sh)  READONLY BACKGROUND backgroundPromotion(sh) 
                    orderPromotion, namePromotion, numberPromotion, seriesPromotion, dateFromPromotion, dateToPromotion, nameOrderPromotionTypePromotion, storesPromotion,
                    timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                    hasDiscountCardPromotion, noDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                    useCurrentReceiptPromotion, allDiscountCardPromotion
    PROPERTIES(sh)  copyPromotion, ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY        orderPromotion(sh)

    PROPERTIES (sh) READONLY FORCE PANEL createdNameUserPromotion, createdTimePromotion, createdHostnameComputerPromotion
    
    FILTERGROUP inactivePromotion 
        FILTER 'Текущие' dateFromPromotion(sh)<= currentDate() AND dateToPromotion(sh) >= currentDate() 'F11'
        FILTER 'Активные' (dateFromPromotion(sh)<= currentDate() AND dateToPromotion(sh) >= currentDate()) OR (dateFromPromotion(sh) > currentDate()) 'F10' DEFAULT      

;

FORM promotionGroup 'Группа акций'
    OBJECTS st=PromotionGroup FIXED PANEL
    PROPERTIES(st)     namePromotionGroup

    OBJECTS sh=Promotion
    PROPERTIES(sh)     userOrderPromotion
    PROPERTIES(sh)     READONLY namePromotion, seriesPromotion, numberPromotion, dateFromPromotion, dateToPromotion, storesPromotion,
                                timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                                hasDiscountCardPromotion, noDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                                useCurrentReceiptPromotion, allDiscountCardPromotion
    PROPERTIES(sh)     copyPromotion, ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY userOrderPromotion(sh)

    FILTERS promotionGroupPromotion(sh)==st

    EDIT PromotionGroup OBJECT st
;

FORM promotionGroups 'Группы акций'
    OBJECTS st=PromotionGroup
    PROPERTIES(st)     READONLY namePromotionGroup
    PROPERTIES(st)     ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    OBJECTS sh=Promotion
    PROPERTIES(sh)     READONLY orderPromotion
    PROPERTIES(sh)     READONLY namePromotion, seriesPromotion, numberPromotion, dateFromPromotion, dateToPromotion, storesPromotion,
                                timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                                hasDiscountCardPromotion, noDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                                useCurrentReceiptPromotion, allDiscountCardPromotion
    PROPERTIES(sh)     ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY orderPromotion(sh)

    FILTERS promotionGroupPromotion(sh)==st

    DIALOG PromotionGroup OBJECT st
;

EXTEND FORM discountCard
    OBJECTS p=Promotion
    PROPERTIES(p, d) inPromotionDiscountCard
    PROPERTIES(p) READONLY namePromotion, numberPromotion, seriesPromotion, dateFromPromotion, dateToPromotion, storesPromotion,
                           timeOfFromPromotion, timeOfToPromotion, minSumBillPromotion, maxSumBillPromotion,
                           hasDiscountCardPromotion, noDiscountCardPromotion, minCumulativeSumPromotion, maxCumulativeSumPromotion,
                           useCurrentReceiptPromotion, allDiscountCardPromotion
    FILTERS hasDiscountCardPromotion(p)
;

DESIGN discountCard {
    MOVE p.box BEFORE functions.box;
}

NAVIGATOR {
    retailNavigator {
        NEW retailCRMNavigator 'CRM' BEFORE retailMasterData {
            ADD promotions;
            ADD promotionGroups;
        }
    }
}