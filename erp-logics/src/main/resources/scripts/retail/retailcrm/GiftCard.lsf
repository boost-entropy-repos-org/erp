MODULE GiftCard;

REQUIRE ZReport;

//подарочные сертификаты
CLASS GiftCard 'Подарочный сертификат';
TABLE giftCard(GiftCard);

@defineExternalizable(giftCard, VARSTRING[100]);

@defineNumbered(GiftCard);

@defineNumeratedDefault(GiftCard, 'Подарочные сертификаты', 'ПС');

// Уникальность
giftCardSeriesNumber (string) =
    GROUP AGGR GiftCard giftCard
        BY seriesNumber(giftCard) WHERE giftCard IS GiftCard;


date 'Дата' = DATA DATE(GiftCard);
expiryDays 'Срок действия (дней)' = DATA INTEGER(GiftCard);

price 'Цена' = DATA NUMERIC[16,4] (GiftCard);

//регистр движений подарочного сертификата
CLASS ABSTRACT GiftCardLedger 'Движение подарочных сертификатов';

giftCard = ABSTRACT GiftCard (GiftCardLedger);
dateTime 'Дата/время' = ABSTRACT DATETIME (GiftCardLedger);
seriesNumber 'Серия/Номер' (GiftCardLedger l) = seriesNumber(giftCard(l));
sum 'Сумма' = ABSTRACT NUMERIC[18,4] (GiftCardLedger);
description 'Описание' = ABSTRACT VARSTRING[100] (GiftCardLedger);
numberDocument 'Документ' = ABSTRACT VARSTRING[30](GiftCardLedger);
departmentStore = ABSTRACT DepartmentStore (GiftCardLedger);
nameDepartmentStore 'Отдел магазина' (GiftCardLedger g) = name(departmentStore(g));

edit 'Редактировать' = ACTION ABSTRACT LIST (GiftCardLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
show 'Просмотреть' = ACTION ABSTRACT LIST (GiftCardLedger) TOOLBAR;

//продажа подарочных сертификатов
CLASS ABSTRACT SaleGiftCard 'Продажа подарочных сертификатов' : GiftCardLedger;

isSold 'Продан' = ABSTRACT BOOLEAN (SaleGiftCard);

sold = GROUP AGGR SaleGiftCard detail
        BY giftCard(detail) WHERE isSold(detail) PERSISTENT;

isSold 'Продан' (GiftCard g) = isSold(sold(g));
CONSTRAINT DROPPED (GiftCard g IS GiftCard) AND PREV (isSold(g))
    MESSAGE 'Запрещено удалять проданные сертификаты';
    
dateSold 'Дата продажи' (GiftCard g) = DATE (dateTime(sold(g))) PERSISTENT;
departmentStoreSold 'Где продан' (GiftCard g) = departmentStore(sold(g));
nameDepartmentStoreSold 'Где продан' (GiftCard g) = nameDepartmentStore(sold(g));
numberReceiptSold 'Номер чека (продажа)' (GiftCard g) = numberDocument(sold(g));
legalEntity = DATA LegalEntity (GiftCard);
nameLegalEntity 'Эмитент' (GiftCard g) = name(legalEntity(g));   

CLASS ReceiptGiftCardSaleDetail 'Строка продажи сертификата' : ReceiptDetail, SaleGiftCard;
TABLE receiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail);

@defineExternalizable(receiptGiftCardSaleDetail, VARSTRING[100]);

giftCard = DATA GiftCard (ReceiptGiftCardSaleDetail);

isReceiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail d) = TRUE IF d IS ReceiptGiftCardSaleDetail;
seriesNumberGiftCard 'Серия/Номер сертификата' (ReceiptGiftCardSaleDetail detail) = seriesNumber(giftCard(detail));

EXTEND FORM zReport
    PROPERTIES(d) seriesNumberGiftCard SHOWIF isReceiptGiftCardSaleDetail(d) 
;

receipt = DATA Receipt (ReceiptGiftCardSaleDetail) NOT NULL DELETE;
receipt(ReceiptGiftCardSaleDetail detail) += receipt(detail);
zReport(ReceiptGiftCardSaleDetail d) = zReport(receipt(d)); 

@defineDocumentDetailPosted(receipt, ReceiptGiftCardSaleDetail);
isPosted(ReceiptGiftCardSaleDetail d) += isPosted(d); 

@defineDocumentDetailClosed(receipt, ReceiptGiftCardSaleDetail);
isClosed(ReceiptGiftCardSaleDetail d) += isPosted(d); 

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptGiftCardSaleDetail);

type(ReceiptGiftCardSaleDetail detail) += 'Сертификат' IF detail IS ReceiptGiftCardSaleDetail;
quantity(ReceiptGiftCardSaleDetail detail) += 1.0 IF detail IS ReceiptGiftCardSaleDetail;

price 'Цена' = DATA NUMERIC[16,4] (ReceiptGiftCardSaleDetail);
price(ReceiptGiftCardSaleDetail detail) += price(detail);

sum 'Сумма' = DATA NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
sum[ReceiptDetail](ReceiptGiftCardSaleDetail detail) += sum(detail);
signedSum(ReceiptGiftCardSaleDetail detail) += sum(detail);

sumReceiptDetailGiftCard 'Сумма проданных сертификатов' (zReport)= GROUP SUM sum[ReceiptDetail](ReceiptGiftCardSaleDetail d) IF d IS ReceiptGiftCardSaleDetail BY zReport[ReceiptDetail](d);

//имплемент в GiftCardLedger
isSold(ReceiptGiftCardSaleDetail detail) += detail IS ReceiptGiftCardSaleDetail;
giftCard(ReceiptGiftCardSaleDetail detail) += giftCard(detail);
dateTime(ReceiptGiftCardSaleDetail detail) += dateTime(receipt(detail));
sum(ReceiptGiftCardSaleDetail detail) += sum(detail);
description(ReceiptGiftCardSaleDetail detail) += 'Продажа' IF detail IS ReceiptGiftCardSaleDetail;
numberDocument(ReceiptGiftCardSaleDetail detail) += VARSTRING[30](number(receipt(detail)));
departmentStore(ReceiptGiftCardSaleDetail detail) += departmentStore(receipt(detail));

edit 'Редактировать' (ReceiptGiftCardSaleDetail d) = {
	NEWSESSION {
	    SHOW zReport OBJECTS z = zReport(d), b = receipt(d), d = d MANAGESESSION DOCKED;
	}
}
ZReport.edit(ReceiptGiftCardSaleDetail d) += { edit(d); }

show(ReceiptGiftCardSaleDetail d) = {
	NEWSESSION {
	    SHOW zReport OBJECTS z = zReport(d), b = receipt(d), d = d DOCKED READONLY;
	}
}

edit(ReceiptGiftCardSaleDetail d) += { edit(d); }  
show(ReceiptGiftCardSaleDetail d) += { show(d); }  

legalEntityGiftCard = DATA LegalEntity ();
nameLegalEntityGiftCard 'Эмитент подарочных сертификатов' = name(legalEntityGiftCard()); 

EXTEND FORM options 
    PROPERTIES() nameLegalEntityGiftCard;

//генерация подарочных сертификатов
FORM generationGiftCards 'Генерация подарочных сертификатов'
    OBJECTS n=Numerator  PANEL
    PROPERTIES(n) SELECTOR name

    OBJECTS quantityCards=INTEGER PANEL
    PROPERTIES(quantityCards) intValueQuantityCards = VALUE

    OBJECTS priceCards=NUMERIC[16,4] PANEL
    PROPERTIES(priceCards) valuePriceCards = VALUE
    
    OBJECTS dt=DATE PANEL
    PROPERTIES(dt) valueDt = VALUE   
     
    OBJECTS d=INTEGER PANEL
    PROPERTIES(d) valueD = VALUE   
         
    OBJECTS l = LegalEntity PANEL 
    PROPERTIES(l) SELECTOR name        
    
;

DESIGN generationGiftCards {
    main{
        NEW topContainer{
            caption = 'Параметры';
            MOVE PROPERTY(name(n));
            MOVE PROPERTY(intValueQuantityCards) {caption = 'Количество подарочных сертификатов';}
            MOVE PROPERTY(valuePriceCards) {caption = 'Цена подарочных сертификатов';}
            MOVE PROPERTY(valueDt) {caption = 'Дата';}
            MOVE PROPERTY(valueD) {caption = 'Срок действия (дней)';}            
            MOVE PROPERTY(name(l)) {caption = 'Эмитент';}            
            
        }
        MOVE functions.box;
    }
}

overGenerateGiftCards = ACTION ABSTRACT LIST (GiftCard);

generateGiftCards 'Сгенерировать подарочные сертификаты'() = {
    DIALOG generationGiftCards OBJECTS n = defaultNumeratorGiftCard() INPUT, l = legalEntityGiftCard() INPUT,
                                       quantityCards INPUT, priceCards INPUT, dt INPUT, d INPUT DO {
        LOCAL num = INTEGER();
        num() <- 0;
        WHILE num() < quantityCards DO {
            NEW g = GiftCard {
                numerator(g) <- n;
                number(g) <- curStringValue(numerator(g));
                series(g) <- series(numerator(g));
                price(g) <- priceCards;
                date(g) <- dt;                
                expiryDays(g) <- d;
                legalEntity(g) <- l;    
                
                overGenerateGiftCards(g);
                
                curValue(Numerator numerator) <- curValue(numerator) + 1 WHERE numerator == numerator(g);
            }

            num() <- num() + 1;
        }
    }
} TOOLBAR;

//формы
FORM giftCard 'Подарочный сертификат'
    OBJECTS g = GiftCard PANEL
    PROPERTIES(g) nameNumerator, number, series, date, price, expiryDays, nameLegalEntity

    EDIT GiftCard OBJECT g
;

DESIGN giftCard {
    NEW topContainer{
        caption = 'Подарочный сертификат';
        MOVE PROPERTY(nameNumerator(g));
        MOVE PROPERTY(number(g));
        MOVE PROPERTY(series(g));
        MOVE PROPERTY(date(g));
        MOVE PROPERTY(expiryDays(g));
        MOVE PROPERTY(price(g));
        MOVE PROPERTY(nameLegalEntity(g));
    }
    MOVE functions.box;
}

FORM giftCards 'Подарочные сертификаты'
    OBJECTS g = GiftCard
    PROPERTIES(g) READONLYIF isReadonly() number, series, date, dateSold, nameLegalEntity, nameDepartmentStoreSold, numberReceiptSold, expiryDays, price
    PROPERTIES generateGiftCards() TODRAW g 
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE 

    OBJECTS l = GiftCardLedger
    PROPERTIES(l) READONLY dateTime, seriesNumber, sum, description, numberDocument, nameDepartmentStore
    PROPERTIES (l) show //edit                    
                    
    ORDER BY dateTime(l)
    FILTERS giftCard(l) == g
;

NAVIGATOR {
    retailMasterData {
        ADD giftCards;
    }
}

@extendFormEditable(giftCards);

CLASS ABSTRACT UseGiftCard 'Гашение подарочных сертификатов' : GiftCardLedger;

used =
    GROUP AGGR UseGiftCard ledger
        BY giftCard(ledger) WHERE ledger IS UseGiftCard;
isUsed 'Погашен' (GiftCard giftCard) = TRUE IF used(giftCard);
dateUsed 'Дата использования'(GiftCard g) = DATE (dateTime(used(g)));
nameDepartmentStoreUsed 'Где использован' (GiftCard g) = nameDepartmentStore(used(g));
numberReceiptUsed 'Номер чека (погашение)' (GiftCard g) = numberDocument(used(g));

//использование подарочных сертификатов при оплате
CLASS PaymentGiftCard : Payment, UseGiftCard;
TABLE paymentGiftCard(PaymentGiftCard);

@defineExternalizable(paymentGiftCard, VARSTRING[100]);

giftCard = DATA GiftCard (PaymentGiftCard);
seriesNumberGiftCard 'Серия/номер' (PaymentGiftCard payment) = seriesNumber(giftCard(payment));

//имплемент в GiftCardLedger
giftCard(PaymentGiftCard payment) += giftCard(payment);
dateTime(PaymentGiftCard payment) += dateTime(receipt(payment)) IF payment IS PaymentGiftCard;
sum(PaymentGiftCard payment) += sum[Payment](payment) IF payment IS PaymentGiftCard;
description(PaymentGiftCard payment) += 'Погашение' IF payment IS PaymentGiftCard;
numberDocument(PaymentGiftCard payment) += VARSTRING[30](number(receipt(payment))) IF payment IS PaymentGiftCard;
departmentStore(PaymentGiftCard payment) += departmentStore(receipt(payment)) IF payment IS PaymentGiftCard;

edit(PaymentGiftCard d) = {
	NEWSESSION {
	    IF d IS PaymentGiftCard THEN {
	        SHOW zReport OBJECTS z = zReport(receipt(d)), b = receipt(d), p = d MANAGESESSION DOCKED;
	    }
	    
	}
}
GiftCard.edit[GiftCardLedger](PaymentGiftCard d) += { GiftCard.edit[PaymentGiftCard](d); }  

show(PaymentGiftCard d) = {
	NEWSESSION {
	    IF d IS PaymentGiftCard THEN {
	        SHOW zReport OBJECTS z = zReport(receipt(d)), b = receipt(d), p = d DOCKED READONLY;
	    }
	}
}
show(PaymentGiftCard d) += { show(d); }  

allowPartiallyPayGiftCard 'Разрешить гасить сертификат частично' = DATA BOOLEAN ();

sumGiftCard 'Сумма подарочных сертификатов в чеке' (receipt) =
    GROUP SUM sum[Payment](PaymentGiftCard payment) IF payment IS PaymentGiftCard
    BY receipt(payment);
    
CONSTRAINT sumGiftCard(Receipt receipt) > sumReceiptDetail(receipt) AND NOT allowPartiallyPayGiftCard()
    CHECKED BY sumGiftCard[Receipt] MESSAGE 'Сумма сертификатов не может превышать суммы всего чека';

EXTEND FORM options
    PROPERTIES allowPartiallyPayGiftCard()
;

DESIGN options {
    pane{
        NEW giftCards {
            caption = 'Подарочные сертификаты';
            MOVE PROPERTY(allowPartiallyPayGiftCard());
            MOVE PROPERTY(nameLegalEntityGiftCard());             
        }
    }
}

CONSTRAINT giftCard(PaymentGiftCard p) AND p IS PaymentGiftCard AND NOT (price(giftCard(p)) == sum[Payment](p)) AND NOT allowPartiallyPayGiftCard() 
    MESSAGE 'Сумма оплаты сертификатом должна быть равно цене сертификата';

expireDate 'Дата истечения' (GiftCard giftCard) = sum(dateSold(giftCard), expiryDays(giftCard));
isExpiredDate 'Истек срок' (GiftCard giftCard) = expireDate(giftCard) < currentDate(); 

EXTEND FORM giftCards
    PROPERTIES(g) READONLYIF isReadonly() BEFORE expiryDays(g) dateUsed, nameDepartmentStoreUsed,
                  numberReceiptUsed 
    PROPERTIES(g) READONLYIF isReadonly() AFTER expiryDays(g) expireDate  

    FILTERGROUP filter1
        FILTER 'Просрочен' expireDate(g) < currentDate() 'F10'
        FILTER 'Не просрочен' sold(g) AND NOT (expireDate(g) < currentDate()) 'F9'
 
        
    FILTERGROUP filter2
        FILTER 'Погашен' used(g) 'F8' 
        FILTER 'Не погашен' sold(g) AND NOT used(g) 'F7'                                                      
;

EXTEND CLASS PaymentMeans { paymentMeansGiftCard 'Подарочный сертификат'}

overLoadDefaultPaymentTypes() += {
    loadDefaultType('Подарочный сертификат', PaymentMeans.paymentMeansGiftCard, 'giftcard');
}

sumGiftCardPayment 'Сумма продаж (сертификат)' (receipt) = GROUP SUM sum(Payment payment) IF paymentMeans(payment) == PaymentMeans.paymentMeansGiftCard BY receipt(payment);
sumGiftCardPayment 'Сумма продаж (сертификат)' (zReport) = GROUP SUM sumGiftCardPayment(Receipt r) BY zReport(r) IN documentSum;

minGiftCardPaymentType() = GROUP MIN PaymentType paymentType IF paymentMeans(paymentType) == PaymentMeans.paymentMeansGiftCard;

EXTEND FORM zReports
    PROPERTIES (z) READONLY BEFORE sumNegativeCashPayment(z) sumGiftCardPayment
    PROPERTIES (z) READONLY  sumReceiptDetailGiftCard
    PROPERTIES (b) READONLY AFTER sumCardPayment(b) sumGiftCardPayment    
;

addGiftCardpayment 'Добавить ПС' (Receipt r) = { NEW p = PaymentGiftCard receipt(p) <- r; } 

EXTEND FORM zReport
    PROPERTIES (b)  addGiftCardpayment TOOLBAR TODRAW p
    PROPERTIES (p) seriesNumber[GiftCardLedger] BEFORE del;

overCopy(ReceiptGiftCardSaleDetail detail,Receipt r) += {
    IF detail IS ReceiptGiftCardSaleDetail THEN {
        NEW d=ReceiptGiftCardSaleDetail {
            receipt(d) <- r;
            giftCard(d) <- giftCard(detail);
            price(d) <- price(detail);            
            sum(d) <- sum(detail);
            overCopy(d, detail);
        }
    }
}
