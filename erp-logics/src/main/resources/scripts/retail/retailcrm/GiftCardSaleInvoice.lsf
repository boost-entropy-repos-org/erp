MODULE GiftCardSaleInvoice;

REQUIRE GiftCard, SaleShipment, InvoicePrint, SaleInvoiceConsignmentBy;

NAMESPACE GiftCard;


EXTEND CLASS SkuType {
    skuTypeGiftCard 'Номинал подарочного сертификата'
}

giftCardItemGroup = DATA ItemGroup ();
nameGiftCardItemGroup 'Группа товаров для сертификатов' = name(giftCardItemGroup());

EXTEND FORM options PROPERTIES() nameGiftCardItemGroup;
DESIGN options { giftCards { MOVE PROPERTY(nameGiftCardItemGroup()); } }

sku 'SKU' = DATA Sku (GiftCard);
nameSku 'SKU'(GiftCard g) = name(sku(g));
idBarcode 'Код SKU'(GiftCard g) = idBarcode(sku(g));

EXTEND FORM giftCard
    PROPERTIES (g) nameSku;

EXTEND FORM giftCards 
    PROPERTIES (g) READONLY BEFORE date(g) idBarcode, nameSku;

EXTEND FORM generationGiftCards
    OBJECTS s = Sku FIXED PANEL 
    PROPERTIES (s) name SELECTOR
    FILTERS itemGroup(s) == giftCardItemGroup()
;

DESIGN generationGiftCards {
    topContainer{
        MOVE PROPERTY(name(s)) {caption = 'SKU';};
    }
}

overGenerateGiftCards(GiftCard g) += ACTION {
    sku(g) <- chosenObject('s');
}


CLASS InvoiceGiftCardSaleDetail 'Строка продажи сертификата' : SaleGiftCard;
TABLE invoiceGiftCardSaleDetail (InvoiceGiftCardSaleDetail);

giftCard = DATA GiftCard (InvoiceGiftCardSaleDetail);

invoice = DATA Sale.Invoice (InvoiceGiftCardSaleDetail) NOT NULL DELETE;

//имплемент в GiftCardLedger
isSold(InvoiceGiftCardSaleDetail detail) +=  isPosted(invoice(detail)) AND createShipment(invoice(detail));
giftCard(InvoiceGiftCardSaleDetail detail) += giftCard(detail); 
dateTime(InvoiceGiftCardSaleDetail detail) += OVERRIDE dateTime(invoice(detail)), shipmentDateTime(invoice(detail));
sum(InvoiceGiftCardSaleDetail detail) += price(giftCard(detail));
description(InvoiceGiftCardSaleDetail detail) += 'Безнал' IF detail IS InvoiceGiftCardSaleDetail;
numberDocument(InvoiceGiftCardSaleDetail detail) += seriesNumber(invoice(detail));
departmentStore(InvoiceGiftCardSaleDetail detail) += supplierStock(invoice(detail)) AS DepartmentStore;

isGiftCard 'Подарочные сертификаты' = DATA BOOLEAN (Sale.Operation);

EXTEND FORM Sale.operation
    PROPERTIES(o) isGiftCard
;
DESIGN Sale.operation {
    showContainer {
        MOVE PROPERTY(isGiftCard(o));
    }
}

isGiftCard(Sale.Invoice i) = isGiftCard(operation(i));

in 'Отм' = DATA LOCAL BOOLEAN (GiftCard);
quantityInvoiceGiftCardSaleDetail 'Кол-во сертификатов в документе'  = 
    GROUP SUM NUMERIC[16,5](1) IF giftCard(InvoiceGiftCardSaleDetail gd)
          BY  sku(giftCard(gd)), invoice(gd);
toShip 'Подобрать' (Sku i, Sale.Invoice o) = quantityInvoiceDetail(i, o)(-) 
                                                                (NUMERIC[16,5]([ = GROUP SUM 1 IF in(GiftCard c) BY sku(c)](i)) IF o IS Sale.Invoice) (-)
                                                                quantityInvoiceGiftCardSaleDetail(i,o);
                                                                
backgroundToShip (Sku i, Sale.Invoice o) = CASE
    WHEN toShip(i,o) <0 THEN RGB (255,0,0)  
    WHEN toShip(i,o) >0 THEN RGB(255, 250, 205)  
;

FORM dialogGiftCard 'Подбор подарочных сертификатов'
    OBJECTS o = Sale.Invoice FIXED  PANEL
    
    OBJECTS i = Item
    PROPERTIES(i) READONLY caption, id
    PROPERTIES(i, o) READONLY toShip BACKGROUND backgroundToShip(i,o)   
    FILTERS skuType(i) == SkuType.skuTypeGiftCard, 
            quantityInvoiceDetail(i,o)            
    
    OBJECTS g=GiftCard                                 
    PROPERTIES (g) in
    PROPERTIES (g) READONLY number, date, idBarcode, nameSku

    FILTERS NOT isSold(g)
    
    FILTERGROUP sku FILTER 'По номиналу' sku(g) == i 'F10' DEFAULT
;

DESIGN dialogGiftCard {
    preferredSize = (1024, 768);
    NEW filters {
        caption = 'Фильтр';
        type = CONTAINERH ;
    }
    NEW body {
        fill = 1;
        type = SPLITV;
        MOVE i.box { caption = 'Номинал';}
        MOVE g.box{ fill = 2;}
        
    }
    MOVE functions.box;
}

fillDetailDialogSkuGiftCard 'Подбор сертификатов'(Sale.Invoice invoice) = ACTION {
    in(GiftCard g) <- NULL;
    FORM dialogGiftCard OBJECTS o = invoice MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR in(GiftCard g) ADDOBJ gd = InvoiceGiftCardSaleDetail DO {
            invoice(gd) <- invoice;
            giftCard(gd) <- g;
        }    
    }   
} TOOLBAR;


CONSTRAINT isGiftCard(Sale.Invoice o) AND isPosted(o) AND quantityInvoiceDetail(Sku i,o) AND createShipment(o) AND NOT 
    (quantityInvoiceDetail(i,o) == quantityInvoiceGiftCardSaleDetail(i,o)) 
        MESSAGE 'Количетсво товара не соответствует количеству сертификатов';

EXTEND FORM Sale.userInvoice
    OBJECTS gd = InvoiceGiftCardSaleDetail FIXED GRID 
    PROPERTIES (gd) SHOWIF isGiftCard(i) READONLY seriesNumber, sum, DELETESESSION EDITABLE
    FILTERS invoice(gd) == i
    
    PROPERTIES (i) SHOWIF isGiftCard(i) fillDetailDialogSkuGiftCard TODRAW gd 
;

DESIGN Sale.userInvoice {
    specification.box {
        MOVE gd.box;
    }
}


edit(InvoiceGiftCardSaleDetail d) = ACTION NEWSESSION {
    FORM Sale.userInvoice OBJECTS i = invoice(d), gd = d MANAGESESSION DOCKEDMODAL;
}
edit(InvoiceGiftCardSaleDetail d) += ACTION edit(d);  

show(InvoiceGiftCardSaleDetail d) = ACTION NEWSESSION {
    FORM Sale.userInvoice OBJECTS i = invoice(d), gd = d DOCKEDMODAL READONLY;
}
show(InvoiceGiftCardSaleDetail d) += ACTION show(d);  

//рабочий стол

giftCardLegalEntityGroup = DATA LegalEntityGroup ();
nameGiftCardLegalEntityGroup 'Группа организаций для покупателей сертификатов' = name(giftCardLegalEntityGroup());

EXTEND FORM options PROPERTIES() nameGiftCardLegalEntityGroup;
DESIGN options { giftCards { MOVE PROPERTY(nameGiftCardLegalEntityGroup()); } }

beforeApplyCustomer(LegalEntity l) = ACTION {
    fullName(l) <- name(l);
}

changeAddress (LegalEntity l) = ACTION {
    REQUEST VARSTRING[150] INPUT ;
    IF requestedString() THEN {
        dataAddress(l, d) <- requestedString() WHERE d == 2001_01_01;
    } ELSE 
        dataAddress(l, d) <- NULL;
}

changePhone (LegalEntity l) = ACTION {
    REQUEST VARSTRING[100] INPUT ;
    IF requestedString() THEN {
        dataPhone(l, d) <- requestedString() WHERE d == 2001_01_01;
    } ELSE 
        dataPhone(l, d) <- NULL;
}


changeAccount (LegalEntity l) = ACTION {
    REQUEST VARSTRING[50] INPUT ;
    IF NOT account(l) THEN {
        FOR ADDOBJ a = Bank.Account DO {
            number(a) <- requestedString();
            legalEntity(a) <- l;
            userAccount(l) <- a;
        }
    } ELSE 
        number(Bank.Account a) <- requestedString() WHERE a == account(l);
}

changeBank (LegalEntity l) = ACTION {
    REQUEST OBJECT b FORM banks;
    IF NOT account(l) THEN {
        FOR ADDOBJ a = Bank.Account DO {
            bank(a) <- requestedObject();
            legalEntity(a) <- l;
            userAccount(l) <- a;
        }
    } ELSE 
        bank(Bank.Account a) <- requestedObject() WHERE a == account(l);
}

defaultContract(LegalEntity l) = defaultContractSkuSupplierCustomer(defaultCompany(), l, currentDate());

dateFromContract 'Дата'(LegalEntity l) = dateFrom(defaultContract(l));
changeDateFromContract (LegalEntity l) = ACTION {
    REQUEST DATE INPUT ;
    IF requestedDate() THEN {
        dateFrom(UserContractSku c) <- requestedDate() WHERE c == defaultContract(l);
    }
}

numberContract 'Номер'(LegalEntity l) = number(defaultContract(l));
changeNumberContract(LegalEntity l) = ACTION {
    REQUEST VARISTRING[28] INPUT ;
    IF requestedString() THEN {
        number(UserContractSku c) <- requestedString() WHERE c == defaultContract(l);
    }
}

FORM giftCardSaleCustomer 'Покупатель'
    OBJECTS l=LegalEntity FIXED PANEL
    PROPERTIES(l) name
    PROPERTIES(l) address ON CHANGE changeAddress(l), phone ON CHANGE changePhone(l)
    PROPERTIES(l) numberAccount ON CHANGE changeAccount(l), nameBank ON CHANGE changeBank(l)
    PROPERTIES (l)dateFromContract ON CHANGE changeDateFromContract(l), numberContract ON CHANGE changeNumberContract(l)
    
    EVENTS 
        ON APPLY BEFORE beforeApplyCustomer(l)
;

DESIGN giftCardSaleCustomer{
    MOVE PROPERTY (name(l));
    MOVE PROPERTY (address(l));
    MOVE PROPERTY (phone(l));
    MOVE PROPERTY (numberAccount(l));
    MOVE PROPERTY (nameBank(l));
    NEW contract {
        caption = 'Договор';
        MOVE PROPERTY (dateFromContract(l));
        MOVE PROPERTY (numberContract(l));
    }
    MOVE functions.box;
}

addCustomer 'Добавить'() = ACTION NEWSESSION {
    FOR ADDOBJ  l = LegalEntity DO {
        legalEntityGroup(l) <- giftCardLegalEntityGroup();
        isCustomer(l) <- TRUE;
        
        FOR ADDOBJ uc = UserContractSku DO {
            supplier(uc) <- defaultCompany();
            customer(uc) <- l;
            currency(uc) <- defaultCurrency();
            dateFrom(uc) <- currentDate();
            isDataDefault(uc) <- TRUE ;
        }
        
        FORM giftCardSaleCustomer OBJECTS l = l MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
    
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

editCustomer 'Редактировать' (LegalEntity l) = ACTION NEWSESSION {
        FORM giftCardSaleCustomer OBJECTS l = l MANAGESESSION DOCKEDMODAL NOCANCEL;
} IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM giftCardLegalEntitys 'Покупатели'
    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY name, address, phone, numberAccount, nameBank, dateFromContract, numberContract
    PROPERTIES addCustomer() TODRAW l, editCustomer(l)
    ORDER BY name(l)
    
    FILTERS giftCardLegalEntityGroup() == legalEntityGroup(l)
;

quantity 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Item);

customer = DATA LOCAL LegalEntity ();
nameCustomer 'Покупатель'= name(customer());

changeCustomer() = ACTION {
    REQUEST OBJECT l FORM giftCardLegalEntitys DIALOG;       
    customer() <- requestedObject();
}

supplierStock = DATA LOCAL Stock ();
nameSupplierStock 'Склад'= name(supplierStock());

changeSupplierStock() = ACTION {
    REQUEST OBJECT s FORM stocksCompany DIALOG;       
    supplierStock() <- requestedObject();
}

FORM skuGift 'Номиналы подарочных сертификатов'
    PROPERTIES () nameCustomer ON CHANGE changeCustomer(), nameSupplierStock ON CHANGE changeSupplierStock()

    OBJECTS i = Item
    PROPERTIES(i) READONLY caption, id
    PROPERTIES(i) quantity
    
    FILTERS skuType(i) == SkuType.skuTypeGiftCard
;

DESIGN skuGift { 
    preferredSize = (600, 400);
    NEW topContainer {
        type = CONTAINERH;
        MOVE PROPERTY (nameCustomer());
        MOVE PROPERTY (nameSupplierStock());
    }
    MOVE i.box;
    MOVE functions.box;
}


addGiftCardInvoice 'Продажа сертификатов'() = ACTION NEWSESSION {
    quantity(Item i) <- NULL;
    supplierStock() <- stock(currentUser());
       
    FORM skuGift MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR ADDOBJ o = Sale.UserInvoice DO {
            operation(o) <- [=GROUP MIN Sale.Operation o IF isGiftCard(o)]();
//            supplier(o) <- defaultSupplier(operation(o)) WHERE countSupplier(operation(o)) == 1;
//            supplierStock(o) <- defaultCompanyStock(currentUser(), supplier(o))
//                IF countAccessCompanyStock (currentUser(), supplier(o)) == 1;
            supplierStock(o) <- supplierStock();
            supplier(o) <- legalEntity(supplierStock());

            customer(o) <- customer();
            
            priceListType(o) <- defaultPriceListType(operation(o)) 
                        IF defaultPriceListType(operation(o));
                                                         
             date(o) <- currentDate();
             time(o) <- currentTime();
                        
            FOR quantity(Item i) ADDOBJ d = Sale.UserInvoiceDetail DO {
                userInvoice(d) <- o;
                sku(d) <- i;
                quantity(d) <- quantity(i);
                priceListType(d) <- priceListType(o);
                      
                price(d) <- round2(prevList(priceListType(d), d) );
                invoicePrice(d) <- round2(prevList(priceListType(d), d) );
    
            }  
            FORM Sale.userInvoice OBJECTS i=o MANAGESESSION DOCKEDMODAL NOCANCEL; 
        }
    }    
} TOOLBAR IMAGE 'add.png';


shiped 'Отпуск сертификатов покупателю'(Sale.UserInvoice invoice) = ACTION NEWSESSION {
    createShipment(invoice) <- TRUE;
    shipmentDate(invoice) <- currentDate();
    shipmentTime(invoice) <- currentTime();
    
    fillDetailDialogSkuGiftCard(invoice);
    
    APPLY {}
} TOOLBAR;

statusShipment 'Статус выписки' = CASE 
    WHEN createShipment(Sale.Invoice i) AND isPosted(i) THEN 'Выписана' 
    WHEN isPosted(i) THEN 'Не выписана'
    WHEN i IS Sale.Invoice THEN 'В обработке' MINCHARWIDTH 10 PREFCHARWIDTH 15;
    
backgroundShipment 'Цвет' (Sale.Invoice o)= RGB(212,255,212) IF isPosted(o) AND createShipment(o);  

FORM saleGiftCardDashboard 'Выписка подарочных сертификатов' 
    OBJECTS i = Sale.Invoice LAST
    PROPERTIES (i) READONLY isClosed 
                            
    PROPERTIES (i) READONLY BACKGROUND backgroundDraft(i) isPosted, number, series, date, time    
    PROPERTIES (i) READONLY statusShipment BACKGROUND backgroundShipment(i)
    PROPERTIES (i) READONLY nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency
    PROPERTIES (i) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail
    PROPERTIES (i) READONLY note

    PROPERTIES ()  addGiftCardInvoice TODRAW i
    PROPERTIES (i) edit SHOWIF overShowEdit(i), copy, shiped, DELETE TODRAW i FORCE PANEL TOOLBAR 

    PROPERTIES (i) print FORCE PANEL 

    OBJECTS d = Sale.InvoiceDetail
    PROPERTIES (d) READONLY index
    PROPERTIES (d) READONLY BACKGROUND backgroundSkuDetail(d) idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY quantity, namePriceListType, price, sum,
                   numberVAT, valueVAT, VATSum, invoiceSum
    ORDER BY index(d)

    FILTERS invoice(d) == i
    FILTERS isGiftCard(i)
    
    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY name, address, phone, numberAccount, nameBank, dateFromContract, numberContract
    PROPERTIES addCustomer() TODRAW l, editCustomer(l)
    ORDER BY name(l)
    
    FILTERS giftCardLegalEntityGroup() == legalEntityGroup(l)
;

DESIGN saleGiftCardDashboard {
    NEW documentContainer BEFORE functions.box {
        fill = 1;
        type = SPLITV;
        NEW header{
            fill = 1;
            type = TABBED;
            MOVE i.box{caption = 'Счета-фактуры';};
            MOVE l.box{caption = 'Покупатели';};
        }
        
        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                    MOVE i.print;
                }
            }
        }
    }
}

NAVIGATOR {
    retailDashboardNavigator{
        ADD saleGiftCardDashboard;
    }
}

//выписка накладных
EXTEND FORM  saleGiftCardDashboard
    PROPERTIES(i) FORCE PANEL editAttributes
    PROPERTIES(i) FORCE PANEL SHOWIF showTN2(i) READONLYIF banPrint(i)
                     printSimpleHorizontal, printSimpleVertical, printSimpleAttach, printSimpleVerticalAttach, printSimpleHorizontalAttach
;

DESIGN saleGiftCardDashboard {
    printTab {
        NEW consignmentRow1 {
            align = LEADING;
            type = CONTAINERH;

            NEW contOne {
                alignment = STRETCH;
                type = CONTAINERH;
                caption = 'Накладная';
                MOVE PROPERTY(editAttributes(i)) {
                    alignment = STRETCH;
                }
            }
            NEW tn2 {
                alignment = STRETCH;
                type = COLUMNS;
                columns = 3;
                caption = 'ТН-2';
                MOVE PROPERTY(printSimpleVertical(i));
                MOVE PROPERTY(printSimpleHorizontal(i));
                MOVE PROPERTY(printSimpleAttach(i));
                MOVE PROPERTY(printSimpleVerticalAttach(i));
                MOVE PROPERTY(printSimpleHorizontalAttach(i));
            }
        } 
    }
}