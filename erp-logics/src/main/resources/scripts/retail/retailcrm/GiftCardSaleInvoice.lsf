MODULE GiftCardSaleInvoice;

REQUIRE GiftCard, SaleShipment, InvoicePrint, SaleInvoiceConsignmentBy;

NAMESPACE GiftCard;

EXTEND CLASS SkuType {
    skuTypeGiftCard 'Номинал подарочного сертификата'
}

isGiftCard (Sku sku) = skuType(sku) == SkuType.skuTypeGiftCard; 

giftCardItemGroup = DATA ItemGroup ();
nameGiftCardItemGroup 'Группа товаров для сертификатов' = name(giftCardItemGroup());

EXTEND FORM options PROPERTIES() nameGiftCardItemGroup;
DESIGN options { giftCards { MOVE PROPERTY(nameGiftCardItemGroup()); } }

sku 'SKU' = DATA Sku (GiftCard);
nameSku 'SKU'(GiftCard g) = name(sku(g));
idBarcode 'Код SKU'(GiftCard g) = idBarcode(sku(g));

EXTEND FORM giftCard
    PROPERTIES (g) nameSku;

DESIGN giftCard {
    topContainer{
        MOVE PROPERTY(nameSku(g));
    }
}

EXTEND FORM giftCards 
    PROPERTIES(g) READONLYIF isReadonly() BEFORE date(g) idBarcode, nameSku;

FORM generationGiftCardsSku
    OBJECTS s = Sku 
    PROPERTIES (s) READONLY name
    FILTERS itemGroup(s) == giftCardItemGroup()
;

inputComplete = DATA LOCAL BOOLEAN ();
generateSku = DATA LOCAL Sku ();
overGenerateGiftCards(GiftCard g) += ACTION {
    IF NOT inputComplete() THEN {
        DIALOG generationGiftCardsSku OBJECTS s INPUT DO {
            generateSku() <- s;
        }
        inputComplete () <- TRUE;
    }
    sku(g) <- generateSku() ;
}


CLASS InvoiceGiftCardSaleDetail 'Строка продажи сертификата' : SaleGiftCard;
TABLE invoiceGiftCardSaleDetail (InvoiceGiftCardSaleDetail);

giftCard = DATA GiftCard (InvoiceGiftCardSaleDetail);

invoice = DATA Sale.Invoice (InvoiceGiftCardSaleDetail) NOT NULL DELETE;

//имплемент в GiftCardLedger
isSold(InvoiceGiftCardSaleDetail detail) +=  isPosted(invoice(detail)) AND createShipment(invoice(detail));
giftCard(InvoiceGiftCardSaleDetail detail) += giftCard(detail); 
dateTime(InvoiceGiftCardSaleDetail detail) += OVERRIDE dateTime(invoice(detail)), shipmentDateTime(invoice(detail));
sum(InvoiceGiftCardSaleDetail detail) += price(giftCard(detail));
description(InvoiceGiftCardSaleDetail detail) += 'Безнал' IF detail IS InvoiceGiftCardSaleDetail;
numberDocument(InvoiceGiftCardSaleDetail detail) += seriesNumber(invoice(detail));
departmentStore(InvoiceGiftCardSaleDetail detail) += supplierStock(invoice(detail)) AS DepartmentStore;

isGiftCard 'Подарочные сертификаты' = DATA BOOLEAN (Sale.Operation);

EXTEND FORM Sale.operation
    PROPERTIES(o) isGiftCard
;
DESIGN Sale.operation {
    showContainer {
        MOVE PROPERTY(isGiftCard(o));
    }
}

isGiftCard(Sale.Invoice i) = isGiftCard(operation(i));

in 'Отм' = DATA LOCAL BOOLEAN (GiftCard);
quantityInvoiceGiftCardSaleDetail 'Кол-во сертификатов в документе'  = 
    GROUP SUM NUMERIC[16,5](1) IF giftCard(InvoiceGiftCardSaleDetail gd)
          BY  sku(giftCard(gd)), invoice(gd);
toShip 'Подобрать' (Sku i, Sale.Invoice o) = quantityInvoiceDetail(i, o)(-) 
                                                                (NUMERIC[16,5]([ = GROUP SUM 1 IF in(GiftCard c) BY sku(c)](i)) IF o IS Sale.Invoice) (-)
                                                                quantityInvoiceGiftCardSaleDetail(i,o);

toShip 'Подобрать' = GROUP SUM toShip(Sku i, Sale.Invoice o) BY o;                                                               
                                                                
backgroundToShip (Sku i, Sale.Invoice o) = CASE
    WHEN toShip(i,o) <0 THEN RGB (255,0,0)  
    WHEN toShip(i,o) >0 THEN RGB(255, 250, 205)  
;

FORM dialogGiftCard 'Подбор подарочных сертификатов'
    OBJECTS o = Sale.Invoice FIXED  PANEL
    
    OBJECTS i = Item
    PROPERTIES(i) READONLY caption, id
    PROPERTIES(i, o) READONLY toShip BACKGROUND backgroundToShip(i,o)   
    FILTERS isGiftCard(i), 
            quantityInvoiceDetail(i,o)            
    
    OBJECTS g=GiftCard                                 
    PROPERTIES (g) in
    PROPERTIES (g) READONLY number, date, idBarcode, nameSku

    FILTERS NOT isSold(g)
    
    FILTERGROUP sku FILTER 'По номиналу' sku(g) == i 'F10' DEFAULT
;

DESIGN dialogGiftCard {
    preferredSize = (1024, 768);
    NEW filters {
        caption = 'Фильтр';
        type = CONTAINERH ;
    }
    NEW body {
        fill = 1;
        type = SPLITV;
        MOVE i.box { caption = 'Номинал';}
        MOVE g.box{ fill = 2;}
        
    }
    MOVE functions.box;
}

fillDetailDialogSkuGiftCard 'Подбор сертификатов'(Sale.Invoice invoice) = ACTION {
    in(GiftCard g) <- NULL;
    DIALOG dialogGiftCard OBJECTS o = invoice DO {
        FOR in(GiftCard g) NEW gd = InvoiceGiftCardSaleDetail DO {
            invoice(gd) <- invoice;
            giftCard(gd) <- g;
        }    
    }   
} TOOLBAR;


CONSTRAINT isGiftCard(Sale.Invoice o) AND isPosted(o) AND (quantityInvoiceGiftCardSaleDetail(Sku i,o) OR quantityInvoiceDetail(i,o)) AND 
    createShipment(o) AND NOT (quantityInvoiceDetail(i,o) == quantityInvoiceGiftCardSaleDetail(i,o)) 
        MESSAGE 'Количество товара не соответствует количеству сертификатов';
        
//CONSTRAINT isGiftCard(Sale.Invoice o) AND isPosted(o) AND quantityInvoiceDetail(Sku i,o) AND createShipment(o) AND NOT 
//    (quantityInvoiceDetail(i,o) == quantityInvoiceGiftCardSaleDetail(i,o)) 
//        MESSAGE 'Количество товара не соответствует количеству сертификатов';        

EXTEND FORM Sale.userInvoice
    OBJECTS gd = InvoiceGiftCardSaleDetail FIXED GRID 
    PROPERTIES (gd) SHOWIF isGiftCard(i) READONLY seriesNumber, sum, DELETE EDITABLE GRID
    FILTERS invoice(gd) == i
    
    PROPERTIES (i) SHOWIF isGiftCard(i) fillDetailDialogSkuGiftCard TODRAW gd 
;

DESIGN Sale.userInvoice {
    specification.box {
        MOVE gd.box;
    }
}


edit(InvoiceGiftCardSaleDetail d) = ACTION NEWSESSION {
    SHOW Sale.userInvoice OBJECTS i = invoice(d), gd = d MANAGESESSION DOCKED;
}
edit(InvoiceGiftCardSaleDetail d) += ACTION edit(d);  

show(InvoiceGiftCardSaleDetail d) = ACTION NEWSESSION {
    SHOW Sale.userInvoice OBJECTS i = invoice(d), gd = d DOCKED READONLY;
}
show(InvoiceGiftCardSaleDetail d) += ACTION show(d);  

//рабочий стол

giftCardLegalEntityGroup = DATA LegalEntityGroup ();
nameGiftCardLegalEntityGroup 'Группа организаций для покупателей сертификатов' = name(giftCardLegalEntityGroup());

EXTEND FORM options PROPERTIES() nameGiftCardLegalEntityGroup;
DESIGN options { giftCards { MOVE PROPERTY(nameGiftCardLegalEntityGroup()); } }

beforeApplyCustomer(LegalEntity l) = ACTION {
    fullName(l) <- name(l);
}

changeAddress (LegalEntity l) = ACTION {
    INPUTX s = VARSTRING[150] DO
        dataAddress(l, DATE d) <- s WHERE d == 2001_01_01;
}

changePhone (LegalEntity l) = ACTION {
    INPUTX s = VARSTRING[100] DO
        dataPhone(l, DATE d) <- s WHERE d == 2001_01_01;
}


changeAccount (LegalEntity l) = ACTION {
    INPUTX s = VARSTRING[50] DO
        IF NOT account(l) THEN {
            FOR NEW a = Bank.Account DO {
                number(a) <- s;
                legalEntity(a) <- l;
                userAccount(l) <- a;
            }
        } ELSE 
            number(Bank.Account a) <- s WHERE a == account(l);
}

changeBank (LegalEntity l) = ACTION {
    DIALOG dialogBanks OBJECTS b INPUT DO {
        IF NOT account(l) THEN {
            FOR NEW a = Bank.Account DO {
                bank(a) <- b;
                legalEntity(a) <- l;
                userAccount(l) <- a;
            }
        } ELSE 
            bank(Bank.Account a) <- b WHERE a == account(l);
    }
}

defaultContract(LegalEntity l) = defaultContractSkuSupplierCustomer(defaultCompany(), l, currentDate());

dateFromContract 'Дата'(LegalEntity l) = dateFrom(defaultContract(l));
changeDateFromContract (LegalEntity l) = ACTION {
    INPUTX d = DATE DO
        dateFrom(UserContractSku c) <- d WHERE c == defaultContract(l);
}

numberContract 'Номер'(LegalEntity l) = number(defaultContract(l));
changeNumberContract(LegalEntity l) = ACTION {
    INPUTX s = VARISTRING[28] DO
        number(UserContractSku c) <- s WHERE c == defaultContract(l);
}

FORM giftCardSaleCustomer 'Покупатель'
    OBJECTS l=LegalEntity FIXED PANEL
    PROPERTIES(l) name
    PROPERTIES(l) address ON CHANGE changeAddress(l), UNP, phone ON CHANGE changePhone(l)
    PROPERTIES(l) numberAccount ON CHANGE changeAccount(l), nameBank ON CHANGE changeBank(l)
    PROPERTIES (l)dateFromContract ON CHANGE changeDateFromContract(l), numberContract ON CHANGE changeNumberContract(l)
    
    EVENTS 
        ON APPLY BEFORE beforeApplyCustomer(l)
;

DESIGN giftCardSaleCustomer{
    MOVE PROPERTY (name(l));
    MOVE PROPERTY (address(l));
    MOVE PROPERTY (UNP(l));
    MOVE PROPERTY (phone(l));
    MOVE PROPERTY (numberAccount(l));
    MOVE PROPERTY (nameBank(l));
    NEW contract {
        caption = 'Договор';
        MOVE PROPERTY (dateFromContract(l));
        MOVE PROPERTY (numberContract(l));
    }
    MOVE functions.box;
}

addCustomer 'Добавить'() = ACTION NEWSESSION {
    FOR NEW  l = LegalEntity DO {
        legalEntityGroup(l) <- giftCardLegalEntityGroup();
        isCustomer(l) <- TRUE;
        
        FOR NEW uc = UserContractSku DO {
            supplier(uc) <- defaultCompany();
            customer(uc) <- l;
            currency(uc) <- defaultCurrency();
            dateFrom(uc) <- currentDate();
            isDataDefault(uc) <- TRUE ;
        }
        
        SHOW giftCardSaleCustomer OBJECTS l = l MANAGESESSION  NOCANCEL;
    }
    
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

editCustomer 'Редактировать' (LegalEntity l) = ACTION NEWSESSION {
        SHOW giftCardSaleCustomer OBJECTS l = l MANAGESESSION  NOCANCEL;
} IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM giftCardLegalEntitys 'Покупатели'
    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY name, address, phone, numberAccount, nameBank, dateFromContract, numberContract
    PROPERTIES addCustomer() TODRAW l, editCustomer(l)
    ORDER BY name(l)
    
    FILTERS giftCardLegalEntityGroup() == legalEntityGroup(l)
;

quantity 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Item);

customer = DATA LOCAL LegalEntity ();
nameCustomer 'Покупатель'= name(customer());

changeCustomer() = ACTION {
    DIALOG giftCardLegalEntitys OBJECTS l = customer() INPUT NULL DO
        customer() <- l;
}

supplierStock = DATA LOCAL Stock ();
nameSupplierStock 'Склад'= name(supplierStock());

changeSupplierStock() = ACTION {
    DIALOG stocksCompany OBJECTS s = supplierStock() INPUT NULL DO
        supplierStock() <- s;
}

FORM skuGift 'Номиналы подарочных сертификатов'
    PROPERTIES () nameCustomer ON CHANGE changeCustomer(), nameSupplierStock ON CHANGE changeSupplierStock()

    OBJECTS i = Item
    PROPERTIES(i) READONLY caption, id
    PROPERTIES(i) quantity
    
    FILTERS isGiftCard(i)
;

DESIGN skuGift { 
    preferredSize = (600, 400);
    NEW topContainer {
        type = CONTAINERH;
        MOVE PROPERTY (nameCustomer());
        MOVE PROPERTY (nameSupplierStock());
    }
    MOVE i.box;
    MOVE functions.box;
}


addGiftCardInvoice 'Продажа сертификатов'() = ACTION NEWSESSION {
    quantity(Item i) <- NULL;
    supplierStock() <- stock(currentUser());
       
    DIALOG skuGift DO {
        FOR NEW o = Sale.UserInvoice DO {
            operation(o) <- [=GROUP MIN Sale.Operation o IF isGiftCard(o)]();
//            supplier(o) <- defaultSupplier(operation(o)) WHERE countSupplier(operation(o)) == 1;
//            supplierStock(o) <- defaultCompanyStock(currentUser(), supplier(o))
//                IF countAccessCompanyStock (currentUser(), supplier(o)) == 1;
            supplierStock(o) <- supplierStock();
            supplier(o) <- legalEntity(supplierStock());

            customer(o) <- customer();
            
            priceListType(o) <- defaultPriceListType(operation(o)) 
                        IF defaultPriceListType(operation(o));
                                                         
             date(o) <- currentDate();
             time(o) <- currentTime();
                        
            FOR quantity(Item i) NEW d = Sale.UserInvoiceDetail DO {
                userInvoice(d) <- o;
                sku(d) <- i;
                quantity(d) <- quantity(i);
                priceListType(d) <- priceListType(o);
                      
                price(d) <- round2(prevList(priceListType(d), d) );
                invoicePrice(d) <- round2(prevList(priceListType(d), d) );
    
            }  
            SHOW Sale.userInvoice OBJECTS i=o MANAGESESSION DOCKED NOCANCEL; 
        }
    }    
} TOOLBAR IMAGE 'add.png';


shiped 'Отпуск сертификатов покупателю'(Sale.UserInvoice invoice) = ACTION NEWSESSION {
    createShipment(invoice) <- TRUE;
    shipmentDate(invoice) <- currentDate();
    shipmentTime(invoice) <- currentTime();
    
    fillDetailDialogSkuGiftCard(invoice);
    
    APPLY {}
} TOOLBAR;

statusShipment 'Статус выписки' = CASE 
    WHEN createShipment(Sale.Invoice i) AND isPosted(i) THEN 'Выписана' 
    WHEN isPosted(i) THEN 'Не выписана'
    WHEN i IS Sale.Invoice THEN 'В обработке' MINCHARWIDTH 10 PREFCHARWIDTH 15;
    
backgroundShipment 'Цвет' (Sale.Invoice o)= RGB(212,255,212) IF isPosted(o) AND createShipment(o);  

overFilterGiftCard = ABSTRACT BOOLEAN (Sale.Invoice);
filterGiftCard (Sale.Invoice i) = isGiftCard(i) OR overFilterGiftCard(i);

hideShiped = ABSTRACT BOOLEAN (Sale.Invoice);
showShiped (Sale.Invoice i) = toShip(i) AND NOT hideShiped(i);

FORM saleGiftCardDashboard 'Выписка подарочных сертификатов' 
    OBJECTS i = Sale.Invoice LAST
    PROPERTIES (i) READONLY isClosed 
                            
    PROPERTIES (i) READONLY BACKGROUND backgroundDraft(i) isPosted, number, series, date, time    
    PROPERTIES (i) READONLY statusShipment BACKGROUND backgroundShipment(i)
    PROPERTIES (i) READONLY nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency
    PROPERTIES (i) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail
    PROPERTIES (i) READONLY note

    PROPERTIES ()  addGiftCardInvoice TODRAW i
    PROPERTIES (i) NEWSESSION edit SHOWIF overShowEdit(i), copy, shiped SHOWIF showShiped(i), DELETE  

    PROPERTIES (i) print  

    OBJECTS d = Sale.InvoiceDetail
    PROPERTIES (d) READONLY index
    PROPERTIES (d) READONLY BACKGROUND backgroundSkuDetail(d) idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY quantity, namePriceListType, price, sum,
                   numberVAT, valueVAT, VATSum, invoiceSum
    ORDER BY index(d)

    FILTERS invoice(d) == i
    FILTERS filterGiftCard(i)
    
    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY name, address, UNP, phone, numberAccount, nameBank, dateFromContract, numberContract
    PROPERTIES addCustomer() TODRAW l, editCustomer(l)
    ORDER BY name(l)
    
    FILTERS giftCardLegalEntityGroup() == legalEntityGroup(l)
;

DESIGN saleGiftCardDashboard {
    NEW documentContainer BEFORE functions.box {
        fill = 1;
        type = SPLITV;
        NEW header{
            fill = 1;
            type = TABBED;
            MOVE i.box{caption = 'Счета-фактуры';};
            MOVE l.box{caption = 'Покупатели';};
        }
        
        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                    MOVE i.print;
                }
            }
        }
    }
}

NAVIGATOR {
    retailDashboardNavigator{
        ADD saleGiftCardDashboard;
    }
}

//выписка накладных
EXTEND FORM  saleGiftCardDashboard
    PROPERTIES(i)  editAttributes
    PROPERTIES(i) SHOWIF showTN2(i) READONLYIF banPrint(i)
                     printSimpleHorizontal, printSimpleVertical, printSimpleAttach, printSimpleVerticalAttach, printSimpleHorizontalAttach
;

DESIGN saleGiftCardDashboard {
    printTab {
        NEW consignmentRow1 {
            align = LEADING;
            type = CONTAINERH;

            NEW contOne {
                alignment = STRETCH;
                type = CONTAINERH;
                caption = 'Накладная';
                MOVE PROPERTY(editAttributes(i)) {
                    alignment = STRETCH;
                }
            }
            NEW tn2 {
                alignment = STRETCH;
                type = COLUMNS;
                columns = 3;
                caption = 'ТН-2';
                MOVE PROPERTY(printSimpleVertical(i));
                MOVE PROPERTY(printSimpleHorizontal(i));
                MOVE PROPERTY(printSimpleAttach(i));
                MOVE PROPERTY(printSimpleVerticalAttach(i));
                MOVE PROPERTY(printSimpleHorizontalAttach(i));
            }
        } 
    }
}