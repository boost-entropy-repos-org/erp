MODULE Repricing;

REQUIRE RepricingCommittee, Store, Pricing, StockDocumentSkuLedger, PriceListCalc, RepricingOperation, PriceListLedger, 
        PriceListStore, OrderLedger;

NAMESPACE Repricing;

//----------------------------------------------- Переоценка (розница) ---------------------------------------------------//

CLASS ABSTRACT Repricing 'Акт переоценки' : Document;
CLASS ABSTRACT RepricingDetail 'Строка акта переоценки': InLIFOSkuLedger, DocumentDetail;

CLASS UserRepricing 'Акт переоценки (польз.)' : Repricing;
CLASS UserRepricingDetail 'Строка акта переоценки (польз.)' : RepricingDetail;

@defineDocumentInterface(repricing);
@deriveDocumentHeaderTimePrefix(UserRepricing, );

@defineDocumentInterfaceTimePrefix(repricing, before, ' документа (до)');
@deriveDocumentHeaderTimePrefix(UserRepricing, before);

@defineDocumentInterfaceNumber(repricing);
@defineNumeratedDefault(UserRepricing, 'Переоценки', 'ПО');

@defineDocumentInterfaceDataStock(repricing, departmentStore, 'Склад');
@defineDocumentDialogStocks(userRepricing, departmentStore, company, , );
@defineDocumentInterfacePosted(repricing);
@defineDocumentInterfaceClosed(repricing);
@defineDocumentClosedConstraint(UserRepricing);

@defineDocumentInterfaceDescription(repricing, 'Акт переоценки');

@defineDocumentInterfaceCurrency(repricing);
@deriveDocumentCurrency(userRepricing, departmentStore);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (repricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(repricing, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(repricing);

// Округление розничной цены
roundCondition(UserRepricingDetail userRepricingDetail) = roundCondition(departmentStore(userRepricingDetail));

// -- До

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, cur, ' поставщика до');

// Цена от которой будет считаться надбавка
overCurRepricingPrice = ABSTRACT NUMERIC[16,4] (RepricingDetail) PERSISTENT;
overCurRepricingPrice = ABSTRACT NUMERIC[16,4] (UserRepricingDetail) PERSISTENT;
overCurRepricingPrice (UserRepricingDetail detail) += overCurRepricingPrice(detail);

curRepricingPrice (UserRepricingDetail detail) = OVERRIDE curPrice(detail), overCurRepricingPrice(detail) PERSISTENT;
curRepricingPrice (RepricingDetail detail) = OVERRIDE curPrice(detail), overCurRepricingPrice(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, cur, ' до');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, cur, ' до');
@deriveDocumentDetailVAT (userRepricing, cur, beforeDate);
@deriveDocumentDetailValueVAT(userRepricing, cur);

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, curRetail, ' розничная до');

//-- Партии
@showDocumentInterfaceDetailBatch(repricing);
@defineDocumentInterfaceDetailBatch(repricing, batch);

changeBatch(UserRepricingDetail detail) = {
    DIALOG dialogBatchStockOut OBJECTS st = departmentStore(detail),
                             t = dateTime(detail),
                             sk = sku(detail),
                             bt = batch(detail) INPUT NULL DO
        batch(detail) <- bt;
}

replace(Sku s, Batch b) += { sku(UserRepricingDetail detail) <- s WHERE batch(detail) == b;}

@defineBalancesBatch(repricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(repricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(repricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userRepricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара       

@defineMovementPriceSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

// Автоматическое заполнение цен до
curPrice (UserRepricingDetail detail)  <- round2(IF batch(detail)

                                                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                                                                                               batch(detail),
                                                                                               departmentStore(detail),
                                                                                               dateTime(detail))
                                                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                                                                                             sku(detail),
                                                                                             departmentStore(detail),
                                                                                             dateTime(detail)))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(departmentStore(detail)) OR
                                                     (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
                                                     CHANGED(batch(detail));

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, retailPricingPriceListType, curRetail, sku, departmentStore);

// Автоматическое проставление надбавок
curMarkup(UserRepricingDetail userRepricingDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curRetailPrice(userRepricingDetail),
    valueCurVAT(userRepricingDetail),
    curRepricingPrice(userRepricingDetail) IF curRepricingPrice(userRepricingDetail)!=0.0)
    WHEN CHANGED(curRetailPrice(userRepricingDetail)) OR
         CHANGED(curVAT(userRepricingDetail)) OR
         CHANGED(curRepricingPrice(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);

// -- После

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, , ' поставщика после');

price(UserRepricingDetail d) <- curPrice(d) WHEN 
    CHANGED(sku(d)) OR
    CHANGED(departmentStore(d)) OR
    CHANGED(dateTime(d)) OR
    CHANGED(batch(d));

// Цена от которой будет считаться надбавка
overRepricingPrice = ABSTRACT NUMERIC[16,4] (RepricingDetail) PERSISTENT;
overRepricingPrice = ABSTRACT NUMERIC[16,4] (UserRepricingDetail) PERSISTENT;
overRepricingPrice (UserRepricingDetail detail) += overRepricingPrice(detail);

repricingPrice (UserRepricingDetail detail) = OVERRIDE price(detail), overRepricingPrice(detail) PERSISTENT;
repricingPrice (RepricingDetail detail) = OVERRIDE price(detail), overRepricingPrice(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, , ' после');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, , ' после');
@deriveDocumentDetailVAT(userRepricing, );
@deriveDocumentDetailValueVAT(userRepricing, );

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, retail, ' розничная после');

// Автоматическое проставление надбавок
markup(UserRepricingDetail userRepricingDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPrice(userRepricingDetail),
    valueVAT(userRepricingDetail),
    repricingPrice(userRepricingDetail) IF repricingPrice(userRepricingDetail)!=0.0)
    WHEN CHANGED(retailPrice(userRepricingDetail)) OR
         CHANGED (VAT(userRepricingDetail)) OR
         CHANGED(repricingPrice(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, retail, repricing, , );
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , );

// ---- Суммы по строкам ---- //

negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = ABSTRACT BOOLEAN (Repricing);
negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = DATA BOOLEAN (UserRepricing) IN documentPrm;
negativeMarkupOnAccount90(UserRepricing r) += negativeMarkupOnAccount90(r);

negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = negativeMarkupOnAccount90(repricing(RepricingDetail d));
negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = negativeMarkupOnAccount90(userRepricing(UserRepricingDetail d));

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, retail, ' розничная после');

// -- Разница
//@defineDocumentInterfaceDetailDiffSumPrefix (repricing, sum, , cur, ' изменения поставщика '){
//    @defineDocumentInterfaceDetailDiffSumCustomPrefix(repricingDetail, sum, , cur, ' изменения поставщика '){
//    @defineDocumentDetailDiffSumCustomPrefix(repricingDetail, sum, , cur, ' изменения поставщика '){
//    diffSum 'Сумма  изменения поставщика ' (RepricingDetail repricingDetail) =  sum(repricingDetail) (-) curSum(repricingDetail);
//};
//    @defineDocumentDetailDiffSumCustomPrefix(userRepricingDetail, sum, , cur, ' изменения поставщика '){
//    diffSum 'Сумма  изменения поставщика ' (UserRepricingDetail userRepricingDetail) =  sum(userRepricingDetail) (-) curSum(userRepricingDetail);
//};
//
//};
//};
//@defineDocumentInterfaceDetailDiffSumPrefix (repricing, markupSum, , cur, ' изменения надбавки'){
//    @defineDocumentInterfaceDetailDiffSumCustomPrefix(repricingDetail, markupSum, , cur, ' изменения надбавки'){
//    @defineDocumentDetailDiffSumCustomPrefix(repricingDetail, markupSum, , cur, ' изменения надбавки'){
//    diffMarkupSum 'Сумма  изменения надбавки' (RepricingDetail repricingDetail) =  markupSum(repricingDetail) (-) curMarkupSum(repricingDetail);
//};
//    @defineDocumentDetailDiffSumCustomPrefix(userRepricingDetail, markupSum, , cur, ' изменения надбавки'){
//    diffMarkupSum 'Сумма  изменения надбавки' (UserRepricingDetail userRepricingDetail) =  markupSum(userRepricingDetail) (-) curMarkupSum(userRepricingDetail);
//};
//
//};
//};

diffMarkupSum 'Сумма  изменения надбавки' (RepricingDetail d) =  (IF negativeMarkupOnAccount90(d) THEN max(markupSum(d),0.0) ELSE markupSum(d)) (-) 
                                                                                    (IF negativeMarkupOnAccount90(d) THEN max(curMarkupSum(d),0.0) ELSE curMarkupSum(d));    
diffMarkupSum 'Сумма  изменения надбавки' (UserRepricingDetail d) =  (IF negativeMarkupOnAccount90(d) THEN max(markupSum(d),0.0) ELSE markupSum(d)) (-) 
                                                                                    (IF negativeMarkupOnAccount90(d) THEN max(curMarkupSum(d),0.0) ELSE curMarkupSum(d) );    

diffSum 'Сумма  изменения поставщика ' (RepricingDetail d) =  sum(d) (-) 
                                                                               curSum(d) (+) 
                                                                               (-curMarkupSum(d) IF negativeMarkupOnAccount90(d) AND curMarkupSum(d) <0.0) (+)
                                                                               (markupSum(d) IF negativeMarkupOnAccount90(d) AND markupSum(d) <0.0);
diffSum 'Сумма  изменения поставщика ' (UserRepricingDetail d) =  sum(d) (-) 
                                                                                   curSum(d) (+) 
                                                                                   (-curMarkupSum(d) IF negativeMarkupOnAccount90(d) AND curMarkupSum(d) <0.0) (+)
                                                                                   (markupSum(d) IF negativeMarkupOnAccount90(d) AND markupSum(d) <0.0);

@defineDocumentInterfaceDetailDiffSumPrefix (repricing, VATSum, , cur, ' изменения НДС');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, retailSum, , cur, ' изменения розничной');

// Расчет сумм обратным счетом
// -- До
@deriveDocumentDetailSumPrefix(userRepricing, curRetail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, cur, curRetail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, cur, curRetail, cur);
@deriveDocumentDetailSumPrefix(userRepricing, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRepricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, , retail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, , retail, );
@deriveDocumentDetailSumPrefix(userRepricing, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(repricing);
@defineDocumentHeaderSkuQuantity(repricing, sku);
@defineDocumentHeaderSkuQuantity(userRepricing, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (repricing, cur, ' поставщика  до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curMarkup, ' надбавки до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curVAT, ' НДС до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, markup, ' надбавки после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, VAT, ' НДС после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (repricing, diff, ' изменения поставщика');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffMarkup, ' изменения надбавки');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffVAT, ' изменения НДС');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffRetail, ' изменения розничной');

// Изменение сумм по товару, таре...
@defineDocumentInterfaceHeaderItemSum(repricing, diffRetail, );                   //-- сумма розничная
@defineDocumentInterfaceHeaderItemSum (repricing, diffMarkup, diffMarkup);        //-- сумма надбавки
@defineDocumentInterfaceHeaderItemSum (repricing, diffVAT, diffVAT);              //-- сумма ндс
@defineDocumentInterfaceHeaderItemSum (repricing, diff, diff);                    //-- сумма поставщика

@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diff, diff, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffMarkup, diffMarkup, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffVAT, diffVAT, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffRetail, diffRetail, , VAT);

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRepricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userRepricing, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Repricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(repricing, changeLedger, 'Не изменять текущие цены');


// ---- Действия по проставлению новых надбавок и цен ------- //

repricingRoundCondition = DATA RoundCondition ();
nameRepricingRoundCondition 'Условие округления розничной цены' ()= name(repricingRoundCondition());

CONSTRAINT defaultCurrency() AND repricingRoundCondition() AND NOT defaultCurrency() == currency(repricingRoundCondition())
    CHECKED BY repricingRoundCondition[] MESSAGE 'Валюта округления должна совпадать с валютой по умолчанию';

EXTEND FORM options
    PROPERTIES() nameRepricingRoundCondition
;

DESIGN options {
    pane {        
        NEW repricings {
            caption = 'Акты переоценки';
            MOVE PROPERTY(nameRepricingRoundCondition());   
        }
    }
}

CLASS ChangePriceType 'Тип изменения цены' {
    markupChange 'Процент торговой надбавки',
    discountChange 'Процент к розничной цене'
}
FORM changePriceTypes 'Типы изменения цен'
    OBJECTS t = ChangePriceType
    PROPERTIES(t) READONLY staticCaption
    LIST ChangePriceType OBJECT t
;

changePriceType = DATA ChangePriceType (UserRepricing);
nameChangePriceType 'Тип изменения цены' (UserRepricing userRepricing) = staticCaption(changePriceType(userRepricing)) MINCHARWIDTH 20 PREFCHARWIDTH 20 MAXCHARWIDTH 20;

percent 'Процент' (userRepricing)= DATA NUMERIC[8,3](UserRepricing);

roundCondition = DATA RoundCondition (UserRepricing);
nameRoundCondition 'Условие округления розничной цены' (UserRepricing d)= name(roundCondition(d));

CONSTRAINT currency(UserRepricing r) AND roundCondition(r) AND NOT currency(r) == currency(roundCondition(r))
    CHECKED BY roundCondition[UserRepricing] MESSAGE 'Валюта округления должна совпадать с валютой переоценки';

newDiscountRetailPrice (UserRepricingDetail d) =  round(NUMERIC[16,4]([= X+(X*Y)/100](
    curRetailPrice(d),
    percent(userRepricing(d)))), roundCondition(userRepricing(d)));

newMarkupRetailPrice (UserRepricingDetail d) = round(NUMERIC[16,4]([= X*(Y+100)*(Z+100)/10000](
    curRepricingPrice(d),
    percent(userRepricing(d)),
    valueCurVAT(d))), roundCondition(userRepricing(d)));

FORM addPercentUserRepricing 'Изменение цены'
    OBJECTS u=UserRepricing PANEL
    PROPERTIES (u) nameChangePriceType, percent, nameRoundCondition
;

DESIGN addPercentUserRepricing {
    u.panel.props {
        fill = 1;
        type = CONTAINERV;
        PROPERTY (nameChangePriceType(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип';
            font = 'bold 28';
            panelCaptionAbove = TRUE;
        }
        PROPERTY (percent(u)) {
            alignment = STRETCH;
            caption = 'Введите процент';
            font = 'bold 64';
            panelCaptionAbove = TRUE;
        }
        PROPERTY (nameRoundCondition(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип округления';
            font = 'bold 28';
            panelCaptionAbove = TRUE;
        }        
    }
}

overChangePriceUser = ACTION ABSTRACT LIST (RepricingDetail);

changePrice 'Изменить цену' (UserRepricing repricing) = {
    roundCondition(repricing) <- repricingRoundCondition() IF currency(repricing) == currency(repricingRoundCondition());
    DIALOG addPercentUserRepricing OBJECTS u = repricing DO 
        IF changePriceType(repricing) AND percent(repricing) THEN
            FOR userRepricing(UserRepricingDetail d) == repricing DO {
                price(d) <- curPrice(d);
                overChangePriceUser(d);
                VAT(d) <- curVAT(d);
                valueVAT(d) <- valueCurVAT(d);
                IF changePriceType(repricing) == ChangePriceType.markupChange THEN {
                    retailPrice(d) <- newMarkupRetailPrice(d);
                } ELSE {
                    IF changePriceType(repricing)== ChangePriceType.discountChange THEN {
                        retailPrice(d) <- newDiscountRetailPrice(d);
                    }
                }
                markup(d) <- calcMarkup(d) WHERE calcMarkup(d);
            }
} TOOLBAR;

overRecalculatePrice = ACTION ABSTRACT LIST (UserRepricingDetail);
overConfirmRecalculatePrice = ACTION ABSTRACT LIST (UserRepricingDetail);

recalculatePrice 'Пересчитать цены (до)' (UserRepricing repricing) = {
    
    FOR userRepricing(UserRepricingDetail d) == repricing DO {
        IF notUseRound2() THEN {
            curPrice(d) <- IF batch(d)                                          
                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d));
        } ELSE {
            curPrice(d) <- round2(IF batch(d)                                          
                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d)));        
        }                
                                                           
//        curVATUserRepricingDetail(d) <- curVATUserRepricingDetail(d);
//        valueCurVATUserRepricingDetail(d) <- valueCurVATUserRepricingDetail(d);
        
        curRetailPrice(d) <- IF batch(d)                
                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.retailPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.retailPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d));
                            
                            
        overRecalculatePrice(d);
    }    
    ASK 'Может, Вы, хотите пересчитать и цены (после)?' DO {
        FOR userRepricing(UserRepricingDetail d) == repricing DO {
            price(d) <- curPrice(d);
            overConfirmRecalculatePrice(d);        
        }        
    }      


        
} TOOLBAR;
//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //
nameStore 'Магазин' (Repricing repricing) = nameStore(departmentStore(repricing));

FORM repricing 'Акт переоценки (печать)'

    OBJECTS p = Repricing PANEL
    PROPERTIES (p)  SELECTOR isPosted

    PROPERTIES (p) number, series, date, time, nameStore, seriesNumber,
               nameDepartmentStore, countRepricingDetail, quantityRepricingDetail, nameLegalEntityStock,
               curSumRepricingDetail, curMarkupSumRepricingDetail, curVATSumRepricingDetail,
               curRetailSumRepricingDetail,
               sumRepricingDetail, markupSumRepricingDetail, VATSumRepricingDetail,
               retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail,
               note, numberDisposal, repricingCommittee, nameRepricingCommittee,
               nameChairman, shortNameChairman, namePositionChairman, nameEmployeeCommittee,
               shortNameEmployeeCommittee


    OBJECTS d = RepricingDetail
    PROPERTIES (d)  index, idBarcodeSku, nameSku, shortNameUOMSku, quantity,
               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,
               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum,
               diffSum, diffMarkupSum, diffVATSum,
               diffRetailSum

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   name[Contact], namePosition, shortName

    FILTERS    repricing(d) == p,
               inCommittee(p, e),
               (diffSum(d) AND diffSum(d)!=0.0) OR
               (diffMarkupSum(d) AND diffMarkupSum(d)!=0.0) OR
               (diffVATSum(d) AND diffVATSum(d)!=0.0) OR
               (diffRetailSum(d) AND diffRetailSum(d)!=0.0)

;

print 'Акт переоценки' (Repricing repricing) = { PRINT repricing OBJECTS p = repricing; }   IMAGE 'print.png' IN print;
printXls 'Акт переоценки (xls)' (Repricing repricing) = { PRINT repricing OBJECTS p = repricing XLS; } IMAGE 'print.png' IN print;
printAuto 'Акт переоценки (авто)' (Repricing repricing) = { PRINT repricing OBJECTS p = repricing AUTO; } IMAGE 'print.png' IN print;
//----------------------------------------------- Операции ------------------------+----------------------------//

@defineDocumentInterfaceOperation (repricing, Repricing, );

@defineDocumentOperationConstraint(repricing, 'акт переоценки', Repricing);

@defineDocumentOperationRolePrefix(userRepricing, );

toFillQuantityUserRepricingDetail 'Записать в кол-во остатки'(UserRepricing repricing) = {
    quantity(UserRepricingDetail d) <- IF batch(d) THEN balanceB(batch(d),   
                                                        departmentStore(d), 
                                                        dateTime(d)) 
                                                 ELSE balanceB(sku(d), 
                                                        departmentStore(d), 
                                                        dateTime(d))                                                                      
                                                 WHERE userRepricing(d) == repricing;
                                                                     
    quantity(UserRepricingDetail d) <- NULL WHERE quantity(d) < 0.0 AND userRepricing(d) == repricing;
}

toFillQuantityUserRepricingDetailAllUserRepricings 'Записать в кол-во остатки (для всех)'() = {
	NEWSESSION {
	    FOR UserRepricing r IS UserRepricing AND balance(operation(r)) AND NOT isClosed(r) AND accessCompany(currentUser(),departmentStore(r)) DO {
	        toFillQuantityUserRepricingDetail(r);    
	    }
	    apply();
	}
}

allowRecalculatePrice (UserRepricing p) = NOT denyRecalculatePrice(operation(p));

@implementDocumentPrefix(repricing, retail, );
@implementDocumentBatch(repricing);

// --------------------------- Формы --------------------------------- //
edit 'Редактировать' = ACTION ABSTRACT LIST (Repricing) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editSku 'Редактировать SKU' (UserRepricingDetail d) = { edit(sku(d)); }

FORM userRepricing 'Акт переоценки'
    OBJECTS p=UserRepricing PANEL
    PROPERTIES (p) isPosted, nameNumerator, number, series,
                   date, time, beforeDate, nameDepartmentStore ON CHANGE changeDepartmentStoreCompany(p),
                   diffSumUserRepricingDetail, diffMarkupSumUserRepricingDetail, diffVATSumUserRepricingDetail,
                   diffRetailSumUserRepricingDetail,
                   note, numberDisposal ON CHANGE changeNumberDisposal(p), nameRepricingCommittee, skipChangeLedger

    OBJECTS d=UserRepricingDetail
    PROPERTIES (d) index
    PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) nameBatch ON CHANGE changeBatch(d), quantity,

                   curPrice, curSum,                    
                   curMarkup ON CHANGE changeCurMarkup(d), curMarkupSum,
                   numberCurVAT, valueCurVAT, curVATSum,
                   curRetailPrice ON CHANGE changeCurRetailPrice(d), curRetailSum,
                   
                   price, sum,                    
                   markup ON CHANGE changeMarkup(d), markupSum,
                   numberVAT, valueVAT, VATSum,
                   retailPrice ON CHANGE changeRetailPrice(d), retailSum, NEW, DELETE GRID

    PROPERTIES TODRAW d changePrice(p), recalculatePrice(p) SHOWIF allowRecalculatePrice(p)

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserRepricingDetail,
                           addDetailInputBarcodeUserRepricingDetail, deleteUserRepricingDetail

    FILTERS userRepricing(d)==p

    EVENTS
        ON OK prePost(p)

    EDIT UserRepricing OBJECT p
;

DESIGN userRepricing {
    main {
        preferredSize = (1024, 768);
        NEW mainTabbed {
            fill = 1;
            type = TABBED;
            NEW documentBox {
                fill = 1;
                type = CONTAINERV;
                caption = 'Переоценка';
            
                NEW header {
                    type = CONTAINERH;
        
                    NEW headerColumn1 {
                        fill = 1;
                        MOVE p.documentHeader {
                            type = CONTAINERV;
                            NEW first {
                                type = CONTAINERH;
                                MOVE PROPERTY(isPosted(p));
                            }
                            NEW second { 
                                type = CONTAINERH;
                                MOVE PROPERTY(nameDepartmentStore(p));
                                MOVE PROPERTY(nameNumerator(p));
                                MOVE PROPERTY(number(p));
                                MOVE PROPERTY(series(p));
                                MOVE PROPERTY(date(p));
                                MOVE PROPERTY(time(p));
                            }    
                        }                
                        
                        MOVE p.documentPrm {
                            type = COLUMNS;
                            columns = 2;
                            MOVE PROPERTY(beforeDate(p));
                            MOVE PROPERTY(note(p));
                            MOVE PROPERTY(numberDisposal(p));
                            MOVE PROPERTY(nameRepricingCommittee(p));
                            MOVE PROPERTY(skipChangeLedger(p));
                        }
                    }
    
                MOVE p.documentSum {
                    columns = 1;
                }
            }
    
            NEW specification.box {
                fill = 1;
                type = TABBED;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }
    
            PROPERTY(price(d)) { background = #FFFFCC; }
            PROPERTY(sum(d)) { background = #FFFFCC; }
            PROPERTY(markup(d)) { background = #FFFFCC; }
            PROPERTY(markupSum(d)) { background = #FFFFCC; }
            PROPERTY(numberVAT(d)) { background = #FFFFCC; }
            PROPERTY(valueVAT(d)) { background = #FFFFCC; }
            PROPERTY(VATSum(d)) { background = #FFFFCC; }
            PROPERTY(retailPrice(d)) { background = #FFFFCC; }
            PROPERTY(retailSum(d)) { background = #FFFFCC; }
            
            PROPERTY(diffSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
            PROPERTY(diffMarkupSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
            PROPERTY(diffVATSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
            PROPERTY(diffRetailSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
            }
        }    
        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

EXTEND FORM userRepricing
    PROPERTIES(p) nameOperation
    PROPERTIES(p) TODRAW d toFillQuantityUserRepricingDetail TOOLBAR
;
DESIGN userRepricing{
    first {
        MOVE PROPERTY (nameOperation(p) ) {minimumCharWidth = 30; preferredCharWidth = 40;}
    }
}

@addEventGenerateNumberOnForm(userRepricing, p, userRepricing);

edit 'Редактировать' = ACTION ABSTRACT LIST  (RepricingDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserRepricingDetail d) = {
	NEWSESSION {
	    SHOW userRepricing OBJECTS p = userRepricing(d), d = d MANAGESESSION DOCKED;
	}
}

edit(UserRepricingDetail d) += { edit(d); }    
edit[SkuLedger](RepricingDetail ledger) += { edit(ledger); }

show 'Просмотреть' = ACTION ABSTRACT LIST  (RepricingDetail) TOOLBAR;
show(UserRepricingDetail d) = {
	NEWSESSION {
	    SHOW userRepricing OBJECTS p = userRepricing(d), d = d DOCKED READONLY ;
	}
}

show(UserRepricingDetail d) += { show(d); }    
show[SkuLedger](RepricingDetail ledger) += { show(ledger); }

//-- SKU
//@defineDocumentSkuPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore, ){
//    @defineDocumentSku(userRepricing, sku, departmentStore, ){
//    @defineDocumentSku(userRepricing, userRepricingDetail, sku, departmentStore, ){
//    userRepricingDetail (sku, userRepricing, stock) =  GROUP MAX (UserRepricingDetail userRepricingDetail)
//        BY sku(userRepricingDetail), userRepricing(userRepricingDetail), departmentStore(userRepricingDetail);
//    userRepricingDetail (Sku sku, UserRepricing userRepricing) = userRepricingDetail(sku, userRepricing, departmentStore(userRepricing));
//
//    currentBalance 'Остаток' (Sku sku, UserRepricing userRepricing) = currentBalance(sku, departmentStore(userRepricing));
//    prevCurrentBalance 'Остаток' (Sku sku, UserRepricing userRepricing) = prevCurrentBalance(sku, departmentStore(userRepricing));
////    backgroundQuantitySku###object 'Цвет' (sku, object) = RGB(255,128,128) IF quantity###detail###skuProp###object(sku, object) AND NOT
////        (quantity###detail###skuProp###object(sku, object) <= currentBalanceSku###object(sku, object));
//    backgroundQuantity 'Цвет' (sku, userRepricing) = ABSTRACT CASE COLOR (Sku, UserRepricing);  
//
//    overChangeQuantityValueSku = ACTION ABSTRACT LIST (UserRepricingDetail);
//
//    changeQuantityValue(Sku sku, UserRepricing userRepricing, NUMERIC[16,5] n) = ACTION {
//        IF userRepricingDetail(sku, userRepricing) THEN {
//            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
//                quantity(UserRepricingDetail userRepricingDetail) <- n WHERE userRepricingDetail == userRepricingDetail(sku, userRepricing);
//                overChangeQuantityValueSku(userRepricingDetail(sku, userRepricing));
//            } ELSE {
//                FOR userRepricingDetail(sku, userRepricing) == UserRepricingDetail d DO
//                    DELETE d;
//            }
//        } ELSE {
//            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
//                NEW d = UserRepricingDetail {
//                    userRepricing(d) <- userRepricing;
//                    sku(d) <- sku;
//                    quantity (d) <- n;
//                    overChangeQuantityValueSku(d);
//                }
//            }
//        }
//    }
//
//    changeQuantity(Sku sku, UserRepricing userRepricing) = ACTION {
//        INPUT n = NUMERIC[16,5] DO
//            changeQuantityValue(sku, userRepricing, n);
//    }
//
//    // Выбор всего остатка
//    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, UserRepricing);
//    changeAllQuantity(Sku sku, UserRepricing userRepricing) = ACTION {
//        INPUT b = BOOLEAN DO {
//            allQuantity (sku,userRepricing) <- b;
//            changeQuantityValue(sku, userRepricing, prevCurrentBalance(sku,userRepricing) IF b);
//        } 
//    }
//
//};
//};
//    price 'Цена' (Sku sku, UserRepricing userRepricing) = prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, sku, departmentStore(userRepricing), dateTime(userRepricing));
//};

stock(UserRepricingDetail detail) = departmentStore(detail);

@defineDocumentSkuStockPriceListTypeSystemLedger(userRepricing, accountPriceListType, ); 

@extendFormDocumentSkuStock(userRepricing, userRepricing, p, legalEntityStock, );
//@extendFormDocumentSku(userRepricing, userRepricingDetail, userRepricing, p, sku, departmentStore){
//
//    backgroundPickName 'Цвет в подборе' = ABSTRACT CASE COLOR (Sku, UserRepricing);
//    hideQuantitySkuDocument = ABSTRACT BOOLEAN (UserRepricing);
//    showQuantitySkuDocument = NOT hideQuantitySkuDocument(UserRepricing o); 
//    
//    showMovementSku 'Показать движение по складу' (Sku ks, UserRepricing p) = ACTION showMovementSku(ks, departmentStore(p));
//    showMovementPriceSku 'Показать изменение цены по складу' (Sku ks, UserRepricing p) = ACTION showMovementPriceSku(ks, departmentStore(p));
//        
//    EXTEND FORM userRepricing
//
//        TREE skuTree sk = SkuGroup PARENT parent
//        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
//        ORDER BY order(sk), skuTreeName
//        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
//
//        OBJECTS ks=Sku
//        PROPERTIES READONLY      inputName = name(ks) ON SHORTCUT showMovementSku(ks, p) ON SHORTCUT showMovementPriceSku(ks, p) BACKGROUND backgroundPickName(ks, p)
//        PROPERTIES(ks) READONLY  BACKGROUND backgroundPickName(ks, p) idBarcode, id SHOWIF showIDs(), shortNameUOM
//        PROPERTIES(ks, p) quantityUserRepricingDetail ON CHANGE changeQuantity(ks, p) 
//                                    BACKGROUND backgroundQuantity(ks, p) SHOWIF showQuantitySkuDocument(p)
//                                    QUICKFILTER inputName,
//                                 prevCurrentBalance READONLY,
//                                 allQuantity ON CHANGE changeAllQuantity(ks, p),
//                                 price READONLY
//        PROPERTIES               addSku() TODRAW ks, edit(ks), copy(ks)
//
//        FILTERS                isParent(sk, ks)
//        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT
//
//        ORDER BY inputName
//    ;
//
//    seekSkuBarcode(UserRepricing userRepricing, VARSTRING[15] barcode) = ACTION { 
//        IF skuBarcode(barcode, date(userRepricing)) THEN {
//            SEEK userRepricing.ks = skuBarcode(barcode, date(userRepricing));     
//        } ELSE {
//            MESSAGE 'Штрихкод не найден.';
//        }
//    }
//    
//    seekOverSku(UserRepricing userRepricing) = ACTION {
//        INPUT s = VARSTRING[15] DO {
//            seekSkuBarcode(userRepricing, s);
//        }        
//    };
//    seekSku 'Поиск по штрихкоду:' (UserRepricing userRepricing) = DATA LOCAL VARSTRING[15] (UserRepricing) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
//                                                                            ON CHANGE seekOverSku(userRepricing);       
//    EXTEND FORM userRepricing
//        PROPERTIES(p) TODRAW ks seekSku    
//    ;
//    DESIGN userRepricing {
//        mainTabbed {
//            NEW itemBox {
//                caption = 'Подбор';
//                type = SPLITH;
//                fill = 1;
//                MOVE skuTree.tree.box { caption = 'Группы SKU'; }
//                NEW skuMainPane {
//                    fill = 3;
//                    type = CONTAINERV;
//                    NEW skuSelectPane {
//                        fill = 1;
//                        type = CONTAINERV;
//                        NEW skuPane {
//                            type = CONTAINERV;
//                            caption = 'Товары';
//                            fill = 1;
//                            NEW skuTopPane {
//                                caption = 'Поиск товара';
//                                MOVE PROPERTY(seekSku(p));
//                            }
//                            MOVE ks.box;               
//                        }
//                    }
//                }
//            }
//        }
//        PROPERTY(prevCurrentBalance(ks, p)) { background = #FFEEEE; }
//        PROPERTY(quantityUserRepricingDetail(ks, p)) { background = #D4FFD4; }
//    }
//};

@defineDocumentBatchStockPriceListTypeSystemLedger(userRepricing, accountPriceListType, );
 
@extendFormDocumentBatchStock(userRepricing, userRepricing, p, legalEntityStock, );

//@defineDocumentBatchPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore, ){
//    @defineDocumentBatch(userRepricing, batch, sku, departmentStore, ){
//    @defineDocumentBatch(userRepricing, userRepricingDetail, batch, sku, departmentStore, ){
//    userRepricingDetail (batch, userRepricing, stock) =  GROUP MAX (UserRepricingDetail userRepricingDetail)
//        BY batch(userRepricingDetail), userRepricing(userRepricingDetail), departmentStore(userRepricingDetail);
//    userRepricingDetail (Batch batch, UserRepricing userRepricing) = userRepricingDetail(batch, userRepricing, departmentStore(userRepricing));
//
//    currentBalance 'Остаток' (Batch batch, UserRepricing userRepricing) = currentBalance(batch, departmentStore(userRepricing));
//    prevCurrentBalance 'Остаток' (Batch batch, UserRepricing userRepricing) = prevCurrentBalance(batch, departmentStore(userRepricing));
//
//    quantityUserRepricingDetail 'Кол-во товара в документе' (batch, userRepricing) = GROUP SUM quantity(UserRepricingDetail userRepricingDetail)
//        BY batch(userRepricingDetail), userRepricing(userRepricingDetail);
//
//    backgroundQuantity 'Цвет' (batch, userRepricing) = ABSTRACT CASE COLOR (Batch, UserRepricing);  
//
//    overChangeQuantityValueBatch = ACTION ABSTRACT LIST (UserRepricingDetail);
//
//    changeQuantityValue(Batch batch, UserRepricing userRepricing, NUMERIC[16,5] n) = ACTION {
//        IF userRepricingDetail(batch, userRepricing) THEN {
//            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
//                quantity(UserRepricingDetail userRepricingDetail) <- n WHERE userRepricingDetail == userRepricingDetail(batch, userRepricing);
//                overChangeQuantityValueBatch(userRepricingDetail(batch, userRepricing));
//            } ELSE {
//                FOR userRepricingDetail(batch, userRepricing) == UserRepricingDetail d DO
//                    DELETE d;
//            }
//        } ELSE {
//            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
//                NEW d = UserRepricingDetail {
//                    userRepricing(d) <- userRepricing;
//                    sku(d) <- sku(batch);
//                    batch(d) <- batch;
//                    quantity (d) <- n;
//                    overChangeQuantityValueBatch(d);
//                }
//            }
//        }
//    }
//
//    changeQuantity(Batch batch, UserRepricing userRepricing) = ACTION {
//        INPUT n = NUMERIC[16,5] DO
//            changeQuantityValue(batch, userRepricing, n);
//    }
//
//    // Выбор всего остатка
//    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, UserRepricing);
//    changeAllQuantity(Batch batch, UserRepricing userRepricing)= ACTION {
//        INPUT b = BOOLEAN DO {
//            allQuantity (batch,userRepricing) <- b;
//            changeQuantityValue(batch, userRepricing, prevCurrentBalance(batch,userRepricing) IF b);
//        }
//    }
//
//};
//};
//    price 'Цена' (Batch batch, UserRepricing userRepricing) = prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, batch, departmentStore(userRepricing), dateTime(userRepricing));
//};
//@extendFormDocumentBatch(userRepricing, userRepricing, p){
//    @extendFormDocumentBatch(userRepricing, userRepricingDetail, userRepricing, p, batch){
//
//    EXTEND FORM userRepricing
//
//        OBJECTS b=Batch GRID
//        PROPERTIES READONLY SHOWIF showBatch(p) nameSku(b), idBarcodeSku(b), shortNameUOM(b), id(b), name(b)
//        PROPERTIES(b, p) SHOWIF showBatch(p) quantityUserRepricingDetail ON CHANGE changeQuantity(b, p) 
//                                BACKGROUND backgroundQuantity(b, p)
//                                QUICKFILTER nameSku(b),
//                                prevCurrentBalance READONLY,
//                                allQuantity ON CHANGE changeAllQuantity(b, p),
//                                price READONLY
////                                viewPriceBatch###object READONLY
//
//        FILTERS                isParent(sk, b),
//                               activeSku(b)
//
//        ORDER BY nameSku(b)
//    ;                                        
//
//    DESIGN userRepricing {
//        skuSelectPane {
//            type = TABBED;
//
//            MOVE b.box {
//                caption = 'Партии';
//            }
//        }
//        PROPERTY(prevCurrentBalance(b, p)) { background = #FFEEEE; }
//        PROPERTY(quantityUserRepricingDetail(b, p)) { background = #D4FFD4; }
//    }
//};
//};

shipmentDateTime(Repricing repricing) = dateTime(repricing);

@extendFormDocumentSkuStockOrderLedger(repricing, userRepricing, p, departmentStore);

@extendFormDocumentSkuStockOrderLedgerAll(userRepricing, userRepricing, p);

@extendFormDocumentBatchStockOrderLedger(userRepricing, userRepricing, p);

EXTEND FORM userRepricing

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, p, st) 'F9'

    FILTERGROUP filterBatch
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F8' DEFAULT
        FILTER 'В документе ' quantity(b, p, sto) 'F7'
;


isStockRepricings 'Разрешить ввод акта переоценки без склада ' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isStockRepricings
;

DESIGN options {
    pane {        
        repricings {
            MOVE PROPERTY(isStockRepricings());   
        }
    }
}

CONSTRAINT isPosted(UserRepricing i) AND NOT isStockRepricings() AND NOT  departmentStore(i) 
    MESSAGE 'Для акта переоценки должен быть задан склад'; 

// Проведение по товарному отчету
@implementStockDocumentLedgerInc(Repricing, departmentStore);
type(Repricing l) += 'Переоценка' IF l IS Repricing;
sumItem (Repricing ledger) += sumItemRepricingDetail(ledger);
sumContainer (Repricing ledger) += sumContainerRepricingDetail(ledger);

operation[StockDocumentLedger] (Repricing ledger) += operation(ledger);
edit[StockDocumentLedger](Repricing l) += { edit(l); }
close[StockDocumentLedger](Repricing l) += { close(l); }

// Проведение по регистру
@implementSkuLedger(repricingDetail, sku, departmentStore);
sum[InSkuLedger] (RepricingDetail ledger) += diffRetailSum(ledger);
stockDocumentLedger(RepricingDetail ledger) += repricing(ledger); 

batch[SkuLedger](RepricingDetail ledger) += batch(ledger);

edit 'Редактировать' (userRepricing) = ACTION EDITFORM UserRepricing;
edit(UserRepricing p) += { edit(p); }

showEditUser (Repricing i) =  NOT preventChangesDocument(currentUser(),operation(i)) AND isOpened(i); 

isUserOpened(UserRepricing p)=  isOpened[Repricing](p) AND is(p);

showDeleteUser (Repricing i) =  NOT preventChangesDocument(currentUser(),operation(i)) AND isUserOpened(i);

filterRepricingDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (Repricing i) = date(i) >= filterRepricingDateFrom() OR (i IS Repricing AND NOT filterRepricingDateFrom());      

filterRepricingDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (Repricing i) = date(i) <= filterRepricingDateTo() OR (i IS Repricing AND NOT filterRepricingDateTo());      

filterRepricingStore = DATA LOCAL Store ();
nameFilterRepricingStore 'Магазин' = name(filterRepricingStore()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterStore (Repricing i) = store(departmentStore(i)) == filterRepricingStore() OR (i IS Repricing AND NOT filterRepricingStore());      

overCopy = ACTION ABSTRACT LIST (Repricing, UserRepricing);
overCopy = ACTION ABSTRACT LIST (UserRepricingDetail, RepricingDetail);

copy 'Копировать'(Repricing repricing) = {
	NEWSESSION {
	    NEW p = UserRepricing {
	        departmentStore(p) <- departmentStore(repricing);
	        currency(p) <- currency(repricing);
	        operation(p) <- operation(repricing);
	        note(p) <- note(repricing);
	        numberDisposal(p) <- numberDisposal(repricing);
	        
	        EXEC overCopy(repricing, p);
	
	        FOR repricing(RepricingDetail repricingDetail) == repricing DO {
	            NEW d=UserRepricingDetail {
	                userRepricing(d) <- p;
	                sku(d) <- sku(repricingDetail);
	                quantity(d) <- quantity(repricingDetail);                
	                
	                batch(d) <- batch(repricingDetail);
	                
	                overCopy(d, repricingDetail);
	            }
	        }
	        SHOW userRepricing OBJECTS p = p MANAGESESSION DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

FORM repricings 'Акты переоценки' 
    PROPERTIES() filterRepricingDateFrom, filterRepricingDateTo, nameFilterRepricingStore

    OBJECTS p = Repricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, beforeDate,
               nameDepartmentStore
    PROPERTIES (p) READONLY countRepricingDetail, diffSumRepricingDetail,
                   diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
                   diffRetailSumRepricingDetail
    PROPERTIES (p) READONLYIF isReadonly() numberDisposal, skipChangeLedger,
                   note

    PROPERTIES (p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (p)  NEWSESSION NEW[UserRepricing]
    PROPERTIES (p) edit SHOWIF showEditUser(p)
    PROPERTIES(p)  close[UserRepricing] SHOWIF isOpened[UserRepricing](p), open SHOWIF isClosed[UserRepricing](p)     
    PROPERTIES copy(p)
    PROPERTIES (p) NEWSESSION deletep=DELETE SHOWIF showDeleteUser(p)
    PROPERTIES (p)  print, printXls 
    PROPERTIES () toFillQuantityUserRepricingDetailAllUserRepricings TODRAW p
    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
               nameBatch, quantity,

               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,

               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum

    FILTERS repricing(d) == p
    FILTERS filterDateFrom(p), 
            filterDateTo(p),
            filterStore(p)

    LIST Repricing OBJECT p
;
@extendFormFilterAccessStock(Repricing, p, repricings, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricings);
DESIGN repricings {
    NEW pane {
        fill = 1;
        type = SPLITV;
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterRepricingDateFrom());
                MOVE PROPERTY(filterRepricingDateTo());
                MOVE PROPERTY(nameFilterRepricingStore());
                
            }
            MOVE p.box {
                fill = 1;
            }
        } 

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE p.print;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY (copy(p)) {caption = 'Акт переоценки';}
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
                NEW fill {
                    caption = 'Обновление';
                    MOVE PROPERTY(toFillQuantityUserRepricingDetailAllUserRepricings()); 
                }
            }
        }
    }
    MOVE functions.box;
}
@extendFormEditable(repricings);
@defineFilterIsOpened (repricing, repricings, p);

EXTEND FORM repricings
    PROPERTIES(p) READONLY nameOperation BEFORE countRepricingDetail(p)
;

NAVIGATOR {
    pricingNavigator {
        ADD repricings;
        ADD operations;
    }
}

// ---------------------------- Создание PriceList ----------------------------------- //

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) changeSupplierPrice
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(changeSupplierPrice(o));
    }
} 

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = ABSTRACT BOOLEAN (Repricing) PERSISTENT;
changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (UserRepricing) IN documentPrm;
changeSupplierPrice(UserRepricing r) += changeSupplierPrice(r);

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = changeSupplierPrice(repricing(RepricingDetail d)) PERSISTENT;
changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = changeSupplierPrice(userRepricing(UserRepricingDetail d)) PERSISTENT;

@deriveDocumentOperationProperty(UserRepricing, changeSupplierPrice);

showChangeSupplierPrice (UserRepricing r) = r IS UserRepricing AND NOT skipChangeLedger(r);
EXTEND FORM userRepricing
    PROPERTIES (p) changeSupplierPrice SHOWIF showChangeSupplierPrice(p) AFTER skipChangeLedger(p)
; 

@deriveDocumentOperationProperty(UserRepricing, negativeMarkupOnAccount90);
EXTEND FORM userRepricing
    PROPERTIES (p) negativeMarkupOnAccount90 AFTER skipChangeLedger(p)
; 


EXTEND CLASS RepricingDetail : PriceListLedger;

fromDateTime (RepricingDetail ledger) += dateTime(ledger);

isPosted[PriceListLedger](RepricingDetail ledger) += isPosted(ledger);
skip[PriceListLedger](RepricingDetail ledger) += skipChangeLedger(ledger);

sku[PriceListLedger] (RepricingDetail ledger) += sku(ledger);
in (RepricingDetail ledger, Batch batch) += batch(ledger) == batch; 

description[PriceListLedger] (RepricingDetail ledger) += description(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN changeSupplierPrice(ledger);
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType AND changeSupplierPrice(ledger) THEN price(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPrice(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN retailPrice(ledger);

in (RepricingDetail ledger, DepartmentStore stock) += departmentStore(ledger) == stock;

edit[PriceListLedger](RepricingDetail d) += { edit(d); }

@defineDocumentLogForm(repricings, p);

CONSTRAINT  (SET (isPosted(RepricingDetail d)) OR CHANGED (curRetailPrice(d))) AND isPosted(d) AND isRetailPrice(operation(d)) AND NOT curRetailPrice(d)
    MESSAGE 'Для строки акта переоценки должна быть задана розничная цена до'; 

CONSTRAINT  (SET (isPosted(RepricingDetail d)) OR CHANGED (retailPrice(d))) AND isPosted(d) AND isRetailPrice(operation(d)) AND NOT retailPrice(d)
    MESSAGE 'Для строки акта переоценки должна быть задана розничная цена'; 