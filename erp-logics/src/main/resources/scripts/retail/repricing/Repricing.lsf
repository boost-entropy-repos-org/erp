MODULE Repricing;

REQUIRE RepricingCommittee, Store, Pricing, StockDocument, PriceListCalc, RepricingOperation, PriceListLedger;

NAMESPACE Repricing;

//----------------------------------------------- Переоценка (розница) ---------------------------------------------------//

CLASS ABSTRACT Repricing 'Акт переоценки';
CLASS ABSTRACT RepricingDetail 'Строка акта переоценки': InLIFOSkuLedger;

CLASS UserRepricing 'Акт переоценки (польз.)' : Repricing, Historizable, NumeratedDocument;
CLASS UserRepricingDetail 'Строка акта переоценки (польз.)' : RepricingDetail;
CLASS UserRepricingPosted 'Проведенный акт переоценки (польз.)' : UserRepricing, PostedObject;

@defineDocumentInterface(repricing);

@defineDocumentInterfaceTimePrefix(repricing, before, ' документа (до)');

@defineDocumentInterfaceNumber(repricing);

@defineDocumentInterfaceDataStock(repricing, departmentStore, 'Склад');
@defineDocumentInterfacePosted(repricing);

@defineDocumentInterfaceDescription(repricing, 'Акт переоценки');

@defineDocumentInterfaceCurrency(repricing);
@deriveDocumentCurrency(userRepricing, departmentStore);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (repricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(repricing, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(repricing);

// Округление розничной цены
roundConditionUserRepricingDetail(userRepricingDetail) = roundConditionDepartmentStore(departmentStoreUserRepricingDetail(userRepricingDetail));

// -- До

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, cur, ' поставщика до');

// Цена от которой будет считаться надбавка
overCurRepricingPriceRepricingDetail = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overCurRepricingPriceUserRepricingDetail = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overCurRepricingPriceRepricingDetail (detail) += overCurRepricingPriceUserRepricingDetail(detail);

curRepricingPriceUserRepricingDetail (detail) = OVERRIDE curPriceUserRepricingDetail(detail), overCurRepricingPriceUserRepricingDetail(detail) PERSISTENT;
curRepricingPriceRepricingDetail (detail) = OVERRIDE curPriceRepricingDetail(detail), overCurRepricingPriceRepricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, cur, ' до');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, cur, ' до');
@deriveDocumentDetailVAT (userRepricing, cur, beforeDate);
@deriveDocumentDetailValueVAT(userRepricing, cur);

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, curRetail, ' розничная до');

//-- Партии
@defineDocumentInterfaceDetailBatch(repricing, batch);

changeBatchUserRepricingDetail = ACTION (detail) {
    FORM dialogBatchStock OBJECTS st = departmentStoreUserRepricingDetail(detail),
                             t = dateTimeUserRepricingDetail(detail),
                             sk = skuUserRepricingDetail(detail) MODAL SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserRepricingDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batchUserRepricingDetail(detail) <- NULL;
    }
};

@defineBalancesBatch(repricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(repricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineMovementPriceSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

// Автоматическое заполнение цен до
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, supplierPricingPriceListType, cur, sku, departmentStore);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, retailPricingPriceListType, curRetail, sku, departmentStore);

// Автоматическое проставление надбавок
curMarkupUserRepricingDetail(userRepricingDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curRetailPriceUserRepricingDetail(userRepricingDetail),
    valueCurVATUserRepricingDetail(userRepricingDetail),
    curRepricingPriceUserRepricingDetail(userRepricingDetail))
    WHEN CHANGED(curRetailPriceUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(curVATUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(curRepricingPriceUserRepricingDetail(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);

// -- После

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, , ' поставщика после');

// Цена от которой будет считаться надбавка
overRepricingPriceRepricingDetail = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overRepricingPriceUserRepricingDetail = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overRepricingPriceRepricingDetail (detail) += overRepricingPriceUserRepricingDetail(detail);

repricingPriceUserRepricingDetail (detail) = OVERRIDE priceUserRepricingDetail(detail), overRepricingPriceUserRepricingDetail(detail) PERSISTENT;
repricingPriceRepricingDetail (detail) = OVERRIDE priceRepricingDetail(detail), overRepricingPriceRepricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, , ' после');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, , ' после');
@deriveDocumentDetailVAT(userRepricing, );
@deriveDocumentDetailValueVAT(userRepricing, );

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, retail, ' розничная после');

// Автоматическое проставление надбавок
markupUserRepricingDetail(userRepricingDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPriceUserRepricingDetail(userRepricingDetail),
    valueVATUserRepricingDetail(userRepricingDetail),
    repricingPriceUserRepricingDetail(userRepricingDetail))
    WHEN CHANGED(retailPriceUserRepricingDetail(userRepricingDetail)) OR
         CHANGED (VATUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(repricingPriceUserRepricingDetail(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, retail, repricing, , );
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , );

// ---- Суммы по строкам ---- //

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, sum, , cur, ' изменения поставщика ');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, markupSum, , cur, ' изменения надбавки');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, VATSum, , cur, ' изменения НДС');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, retailSum, , cur, ' изменения розничной');

// Расчет сумм обратным счетом
// -- До
@deriveDocumentDetailSumPrefix(userRepricing, curRetail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, cur, curRetail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, cur, curRetail, cur);
@deriveDocumentDetailSumPrefix(userRepricing, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRepricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, , retail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, , retail, );
@deriveDocumentDetailSumPrefix(userRepricing, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(repricing);
@defineDocumentHeaderSkuQuantity(repricing, sku);
@defineDocumentHeaderSkuQuantity(userRepricing, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (repricing, cur, ' поставщика  до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curMarkup, ' надбавки до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curVAT, ' НДС до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, markup, ' надбавки после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, VAT, ' НДС после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (repricing, diff, ' изменения поставщика');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffMarkup, ' изменения надбавки');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffVAT, ' изменения НДС');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffRetail, ' изменения розничной');

// Изменение сумм по товару, таре...
@defineDocumentInterfaceHeaderItemSum(repricing, diffRetail, );                   //-- сумма розничная
@defineDocumentInterfaceHeaderItemSum (repricing, diffMarkup, diffMarkup);        //-- сумма надбавки
@defineDocumentInterfaceHeaderItemSum (repricing, diffVAT, diffVAT);              //-- сумма ндс
@defineDocumentInterfaceHeaderItemSum (repricing, diff, diff);                    //-- сумма поставщика

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRepricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userRepricing, sku);
@defineAddDetailDialogTerminal(userRepricing, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Repricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(repricing, changeLedger, 'Не изменять текущие цены');

// Проведение по регистру
@implementSkuLedger(repricingDetail, sku, departmentStore);
sumInSkuLedger (ledger) += diffRetailSumRepricingDetail(ledger);
seriesDataSkuLedger (ledger) += seriesRepricing(repricingRepricingDetail(ledger));
numberDataSkuLedger (ledger) += numberRepricing(repricingRepricingDetail(ledger));

// ---- Действия по проставлению новых надбавок и цен ------- //

CLASS ChangePriceType 'Тип изменения цены' {
    markupChange 'Процент торговой надбавки',
    discountChange 'Процент к розничной цене'
}
FORM changePriceTypes
    OBJECTS t = ChangePriceType
    PROPERTIES(t) staticCaption
    DIALOG ChangePriceType OBJECT t
;

changePriceTypeUserRepricing = DATA ChangePriceType (UserRepricing);
nameChangePriceTypeUserRepricing 'Тип изменения цены' (userRepricing) = staticCaption(changePriceTypeUserRepricing(userRepricing)) MINCHARWIDTH 20 PREFCHARWIDTH 20 MAXCHARWIDTH 20;

percentUserRepricing 'Процент' (userRepricing)= DATA NUMERIC[8,3](UserRepricing);

CONSTRAINT changePriceTypeUserRepricing(userRepricing) AND NOT percentUserRepricing(userRepricing) //CHECKED BY changePriceTypeUserRepricing
        MESSAGE 'Не задан процент для изменения цены';

newDiscountRetailPriceUserRepricingDetail (d) =  roundPriceRoundCondition(NUMERIC[14,2]([X+(X*Y)/100](
    curRetailPriceUserRepricingDetail(d),
    percentUserRepricing(userRepricingUserRepricingDetail(d)))), roundConditionDepartmentStore(departmentStoreUserRepricingDetail(d)));

newMarkupRetailPriceUserRepricingDetail (d) = roundPriceRoundCondition(NUMERIC[14,2]([X*(Y+100)*(Z+100)/10000](
    curRepricingPriceUserRepricingDetail(d),
    percentUserRepricing(userRepricingUserRepricingDetail(d)),
    valueCurVATUserRepricingDetail(d))), roundConditionDepartmentStore(departmentStoreUserRepricingDetail(d)));


FORM addPercentUserRepricing 'Изменение цены'
    OBJECTS u=UserRepricing FIXED PANEL
    PROPERTIES (u) nameChangePriceTypeUserRepricing, percentUserRepricing
;

DESIGN addPercentUserRepricing FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        PROPERTY (nameChangePriceTypeUserRepricing) {
            caption = 'Выберите тип';
            font = 'Tahoma bold 28';
            panelLabelAbove = TRUE;
        }
        PROPERTY (percentUserRepricing) {
            caption = 'Введите процент';
            font = 'Tahoma bold 64';
            panelLabelAbove = TRUE;
        }
    }
}

overChangePriceUserRepricing = ABSTRACT ACTION LIST (RepricingDetail);

changePriceUserRepricing 'Изменить цену' (userRepricing) = ACTION (userRepricing) {
        FORM addPercentUserRepricing OBJECTS u = userRepricing MODAL;
        IF formResult() == FormResult.ok AND changePriceTypeUserRepricing(userRepricing) AND percentUserRepricing(userRepricing) THEN {
            FOR userRepricingUserRepricingDetail(userRepricingDetail) == userRepricing DO {
                ASSIGN priceUserRepricingDetail(userRepricingDetail) <- curPriceUserRepricingDetail(userRepricingDetail);
                EXEC overChangePriceUserRepricing(userRepricingDetail);
                ASSIGN VATUserRepricingDetail(userRepricingDetail) <- curVATUserRepricingDetail(userRepricingDetail);
                ASSIGN valueVATUserRepricingDetail(userRepricingDetail) <- valueCurVATUserRepricingDetail(userRepricingDetail);
                IF changePriceTypeUserRepricing(userRepricing) == ChangePriceType.markupChange THEN {
                    ASSIGN retailPriceUserRepricingDetail(userRepricingDetail) <- newMarkupRetailPriceUserRepricingDetail(userRepricingDetail);
                } ELSE {
                    IF changePriceTypeUserRepricing(userRepricing)== ChangePriceType.discountChange THEN {
                        ASSIGN retailPriceUserRepricingDetail(userRepricingDetail) <- newDiscountRetailPriceUserRepricingDetail(userRepricingDetail);
                    }
                }
            }
        }
} TOOLBAR;


//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //
nameStoreRepricing 'Магазин' (repricing) = nameStoreDepartmentStore(departmentStoreRepricing(repricing));

FORM repricing 'Акт переоценки (печать)' PRINT

    OBJECTS p = Repricing FIXED PANEL
    PROPERTIES (p)  SELECTOR objectClassName

    PROPERTIES (p) numberRepricing, seriesRepricing, dateRepricing, timeRepricing, nameStoreRepricing,
               nameDepartmentStoreRepricing, countRepricingDetailRepricing, quantityRepricingDetailRepricing, nameLegalEntityStockRepricing,
               curSumRepricingDetailRepricing, curMarkupSumRepricingDetailRepricing, curVATSumRepricingDetailRepricing,
               curRetailSumRepricingDetailRepricing,
               sumRepricingDetailRepricing, markupSumRepricingDetailRepricing, VATSumRepricingDetailRepricing,
               retailSumRepricingDetailRepricing,
               diffSumRepricingDetailRepricing, diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
               diffRetailSumRepricingDetailRepricing,
               noteRepricing, numberDisposalRepricing, repricingCommitteeRepricing, nameRepricingCommitteeRepricing,
               nameChairmanRepricing, namePositionChairmanRepricing, nameEmployeeCommitteeRepricing


    OBJECTS d = RepricingDetail
    PROPERTIES (d)  indexRepricingDetail, idBarcodeSkuRepricingDetail, nameSkuRepricingDetail, shortNameUOMSkuRepricingDetail, quantityRepricingDetail,
               curPriceRepricingDetail, curSumRepricingDetail,
               curMarkupRepricingDetail, curMarkupSumRepricingDetail,
               numberCurVATRepricingDetail, valueCurVATRepricingDetail, curVATSumRepricingDetail,
               curRetailPriceRepricingDetail, curRetailSumRepricingDetail,
               priceRepricingDetail, sumRepricingDetail,
               markupRepricingDetail, markupSumRepricingDetail,
               numberVATRepricingDetail, valueVATRepricingDetail, VATSumRepricingDetail,
               retailPriceRepricingDetail, retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   nameContact, namePositionEmployee

    FILTERS    repricingRepricingDetail(d) == p,
               inCommitteeRepricingEmployee(p, e)

;

printRepricing 'Акт переоценки' (repricing) = ACTION FORM repricing OBJECTS p = repricing IMAGE 'print.png' IN printGroup;

// --------------------------- Формы --------------------------------- //

FORM userRepricing 'Акт переоценки'
    OBJECTS p=UserRepricing FIXED PANEL
    PROPERTIES (p) objectClassName, nameNumeratorObject, numberObject, seriesObject,
                   dateUserRepricing, timeUserRepricing, beforeDateUserRepricing, nameDepartmentStoreUserRepricing,
                   diffSumUserRepricingDetailUserRepricing, diffMarkupSumUserRepricingDetailUserRepricing, diffVATSumUserRepricingDetailUserRepricing,
                   diffRetailSumUserRepricingDetailUserRepricing,
                   noteUserRepricing, numberDisposalUserRepricing, nameRepricingCommitteeUserRepricing, skipChangeLedgerUserRepricing

    OBJECTS d=UserRepricingDetail
    PROPERTIES (d) indexUserRepricingDetail, idBarcodeSkuUserRepricingDetail, nameSkuUserRepricingDetail, shortNameUOMSkuUserRepricingDetail,
                   nameBatchUserRepricingDetail, quantityUserRepricingDetail,

                   curPriceUserRepricingDetail, curSumUserRepricingDetail,                    
                   curMarkupUserRepricingDetail ON CHANGE changeCurMarkupUserRepricingDetail(d), curMarkupSumUserRepricingDetail,
                   numberCurVATUserRepricingDetail, valueCurVATUserRepricingDetail, curVATSumUserRepricingDetail,
                   curRetailPriceUserRepricingDetail ON CHANGE changeCurRetailPriceUserRepricingDetail(d), curRetailSumUserRepricingDetail,
                   
                   priceUserRepricingDetail, sumUserRepricingDetail,                    
                   markupUserRepricingDetail ON CHANGE changeMarkupUserRepricingDetail(d), markupSumUserRepricingDetail,
                   numberVATUserRepricingDetail, valueVATUserRepricingDetail, VATSumUserRepricingDetail,
                   retailPriceUserRepricingDetail ON CHANGE changeRetailPriceUserRepricingDetail(d), retailSumUserRepricingDetail, ADDOBJ, DELETESESSION

    PROPERTIES changePriceUserRepricing(p) TODRAW d

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserRepricingDetailUserRepricing, addDetailDialogTerminalUserRepricingDetailUserRepricing,
                           addDetailInputBarcodeUserRepricingDetailUserRepricing, deleteUserRepricingDetailUserRepricing

    FILTERS userRepricingUserRepricingDetail(d)==p

    EVENTS
        ON OK prePostUserRepricing(p)

    EDIT UserRepricing OBJECT p
;

DESIGN userRepricing FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW specification.box BEFORE functions.box{

            ADD d.box {
                caption = 'Спецификация';
                d.panel {
                    childConstraints = TO THE RIGHT;
                }
            }
        }
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerCol1 {
                childConstraints = TO THE BOTTOM;
                ADD p.documentHeaderGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW firstRow{
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(objectClassName);
                        ADD PROPERTY(nameDepartmentStoreUserRepricing);
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                    }
                    NEW secondRow{
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(dateUserRepricing);
                        ADD PROPERTY(timeUserRepricing);
                        ADD PROPERTY(beforeDateUserRepricing);
                    }
                }
                ADD p.documentPrmGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW thirdRow{
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(noteUserRepricing);
                        ADD PROPERTY(numberDisposalUserRepricing);
                    }
                    NEW fourthRow{
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameRepricingCommitteeUserRepricing);
                        ADD PROPERTY(skipChangeLedgerUserRepricing);
                    }
                }
            }

            ADD p.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }

        PROPERTY(priceUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(sumUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(markupUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(markupSumUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(numberVATUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(valueVATUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(VATSumUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(retailPriceUserRepricingDetail) { background = #FFFFCC; }
        PROPERTY(retailSumUserRepricingDetail) { background = #FFFFCC; }

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

//-- SKU
@defineDocumentSkuPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore);
@extendFormDocumentSku(userRepricing, userRepricing, p);

@defineDocumentBatchPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore);
@extendFormDocumentBatch(userRepricing, userRepricing, p);

EXTEND FORM userRepricing

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuUserRepricing(ks, p) DEFAULT
        FILTER 'В документе ' 'F9' quantityUserRepricingDetailSkuUserRepricing(ks, p)
;

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentInterfaceOperation (repricing, Repricing, );

@defineDocumentOperationRolePrefix(userRepricing, );

EXTEND FORM userRepricing
    PROPERTIES(p) nameOperationUserRepricing
;
EXTEND DESIGN userRepricing{
    thirdRow{
        ADD PROPERTY (nameOperationUserRepricing) BEFORE PROPERTY(noteUserRepricing);
    }
}

//------------------------ Управленческая переоценка ----------------------------//

FORM managementRepricing 'Управленческая переоценка'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES (d) SELECTOR nameDepartmentStore

    OBJECTS o = Repricing.Operation FIXED PANEL
    PROPERTIES (o) SELECTOR Repricing.nameOperation
    FILTERS inUserOperation(currentUser(), o)

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE

;
DESIGN managementRepricing FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        NEW topContainer {
            childConstraints = TO THE RIGHT;
            ADD d.box { caption = 'Выберите отдел магазина';}
            ADD o.box { caption = 'Выберите операцию'; }
            ADD t.box;
        }
        ADD functions.box;
    }
}

overManagementRepricing = ABSTRACT ACTION LIST (RepricingDetail,Sku,Stock,DATETIME);

prevPriceBPriceListCalcListSkuStockDateTime (priceList, calcList, sku, department, time) =
    IF prevPriceBPriceListTypeSkuStockDateTime(priceList, sku, department, time)
        THEN prevPriceBPriceListTypeSkuStockDateTime(priceList, sku, department, time)
        ELSE prevPriceBPriceListTypeSkuStockDateTime(calcList, sku, department, time);



createManagementRepricing 'Создать управленческую переоценку' = ACTION () NEWSESSION {

    FORM managementRepricing  MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL department = DepartmentStore();
        LOCAL priceList = PriceListType();
        LOCAL calcList = CalcPriceListType();
        LOCAL time =  DATETIME();
        LOCAL oper = Repricing.Operation();

        ASSIGN department() <- chosenObject('d');
        ASSIGN priceList() <- priceListTypeOperation(chosenObject('o'));
        ASSIGN calcList() <- calcPriceListTypeOperation(chosenObject('o'));
        ASSIGN time() <- chosenDateTime('t');
        ASSIGN oper() <- chosenObject('o');

        FOR ADDOBJ r = UserRepricing DO {
            ASSIGN departmentStoreUserRepricing(r) <-  department();
            ASSIGN operationUserRepricing(r) <- oper();

            FOR currentBalanceSkuStock(sku, department()) AND
                prevPriceBPriceListCalcListSkuStockDateTime(priceList(), calcList(), sku, department(), time()) != prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, department(), time())
                ADDOBJ rd = UserRepricingDetail DO {
                ASSIGN userRepricingUserRepricingDetail(rd) <- r;
                ASSIGN skuUserRepricingDetail(rd) <- sku;
                ASSIGN quantityUserRepricingDetail(rd) <- currentBalanceSkuStock(sku, department());
                ASSIGN retailPriceUserRepricingDetail(rd) <- prevPriceBPriceListCalcListSkuStockDateTime(priceList(), calcList(), sku, department(), time());
                ASSIGN curRetailPriceUserRepricingDetail(rd) <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, department(), time());
                ASSIGN priceUserRepricingDetail(rd) <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, sku, department(), time());
                EXEC overManagementRepricing(rd, sku, department(), time());
            }
            FORM userRepricing  OBJECTS p = r MANAGESESSION DOCKEDMODAL;

        }
    }
} TOOLBAR;

addUserRepricing 'Добавить' = ACTION ADDFORM UserRepricing;
editUserRepricing 'Редактировать' (userRepricing) = ACTION EDITFORM UserRepricing;

FORM repricings 'Акты переоценки' TITLE 'Акты переоценки'
    OBJECTS p = Repricing
    PROPERTIES (p) READONLY isPostedRepricing FORCE GRID, numberRepricing, seriesRepricing, dateRepricing, timeRepricing, beforeDateRepricing,
               nameDepartmentStoreRepricing, countRepricingDetailRepricing,
               diffSumRepricingDetailRepricing, diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
               diffRetailSumRepricingDetailRepricing,
               numberDisposalRepricing, skipChangeLedgerRepricing,
               noteRepricing, objectClassName

    PROPERTIES (p) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserRepricing TODRAW p
    PROPERTIES (p) editUserRepricing
    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserRepricing(p)
    PROPERTIES (p) printRepricing FORCE PANEL
    PROPERTIES ()  createManagementRepricing TODRAW p


    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY indexRepricingDetail, idBarcodeSkuRepricingDetail, nameSkuRepricingDetail, shortNameUOMSkuRepricingDetail,
               nameBatchRepricingDetail, quantityRepricingDetail,

               curPriceRepricingDetail, curSumRepricingDetail,
               curMarkupRepricingDetail, curMarkupSumRepricingDetail,
               numberCurVATRepricingDetail, valueCurVATRepricingDetail, curVATSumRepricingDetail,
               curRetailPriceRepricingDetail, curRetailSumRepricingDetail,

               priceRepricingDetail, sumRepricingDetail,
               markupRepricingDetail, markupSumRepricingDetail,
               numberVATRepricingDetail, valueVATRepricingDetail, VATSumRepricingDetail,
               retailPriceRepricingDetail, retailSumRepricingDetail

    FILTERS repricingRepricingDetail(d) == p

    DIALOG Repricing OBJECT p
;
@extendFormFilterAccessStock(Repricing, p, repricings, departmentStore, company);

DESIGN repricings FROM DEFAULT {
    PROPERTY (deletep) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD p.box { fillVertical = 2.0; }

        NEW documentDetail {
            type = TABBED;

            ADD d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                ADD p.historyGroup;
                ADD p.postedGroup;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    ADD p.printGroup;
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                childConstraints = TO THE RIGHT;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    childConstraints = TO THE BOTTOM;
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                    childConstraints = TO THE BOTTOM;
                }
            }
        }
    }
}

EXTEND FORM repricings
    PROPERTIES(p) READONLY nameOperationRepricing BEFORE countRepricingDetailRepricing
;

NAVIGATOR {
    pricingNavigator {
        ADD repricings;
        ADD operations;
    }
}

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS RepricingDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeRepricingDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedRepricingDetail(ledger);
skipPriceListLedger(ledger) += skipChangeLedgerRepricingDetail(ledger);

skuPriceListLedger (ledger) += skuRepricingDetail(ledger);
batchPriceListLedger (ledger) += batchRepricingDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionRepricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(priceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(priceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN priceRepricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(retailPriceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(retailPriceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPriceRepricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(retailPriceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(retailPriceRepricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType THEN retailPriceRepricingDetail(ledger);

inPriceListLedgerStock (ledger, stock) += departmentStoreRepricingDetail(ledger) == stock;

// ------------------------------------- Загрузка в оборудование ------------------------------ //

@Machinery.implementPriceTransactionDocument(Repricing);
Machinery.skipPriceTransactionDocument(document) += skipChangeLedgerRepricing(document);

@defineDocumentMachineryPriceTransaction(repricing, sku, departmentStore);
@extendFormDocumentMachineryPriceTransaction(repricings, p, repricing, skipChangeLedgerRepricing, machineryContainer);

@implementStockDocumentLedgerInc(Repricing, departmentStore);
sumIncStockDocumentLedger (ledger) += diffRetailSumRepricingDetailRepricing(ledger);
sumItemIncStockDocumentLedger (ledger) += sumItemRepricingDetailRepricing(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerRepricingDetailRepricing(ledger);

// ------------------------------------- Автоматическое создание дооценки для документа -------------------- //

META defineRepricingAggregation(sign, stockProp)
//-- аггр.объект

    // Комиссия
    @defineDocumentInterfaceHeaderRepricingCommittee (invoice, stockProp);

    // Кол-во
    @defineDocumentInterfaceDetailSkuBalance (invoice);
    @deriveDocumentDetailSkuBalance (userInvoice, sku, stockProp);

    // -- До
    @defineDocumentInterfaceDetailPricePrefix(invoice, cur, ' поставщика до');

    overCurRepricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    overCurRepricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
    overCurRepricingPriceInvoiceDetail (detail) += overCurRepricingPriceUserInvoiceDetail(detail);

    curRepricingPriceUserInvoiceDetail (detail) = OVERRIDE curPriceUserInvoiceDetail(detail), overCurRepricingPriceUserInvoiceDetail(detail) PERSISTENT;
    curRepricingPriceInvoiceDetail (detail) = OVERRIDE curPriceInvoiceDetail(detail), overCurRepricingPriceInvoiceDetail(detail) PERSISTENT;

    @defineDocumentInterfaceDetailMarkupPrefix (invoice, cur, ' до');

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp, cur, ' до');
    @deriveDocumentDetailVAT (userInvoice, cur, beforeDate, sku, stockProp);
    @deriveDocumentDetailValueVAT(userInvoice, cur);

    @defineDocumentInterfaceDetailPricePrefix(invoice, curRetail, ' розничная до');

    // Автоматическое заполнение цен до
    @deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, supplierPricingPriceListType, cur, sku, stockProp);
    @deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, retailPricingPriceListType, curRetail, sku, stockProp);

    // Расчет надбавки обратным счетом
    curMarkupUserInvoiceDetail(userInvoiceDetail)  <- [round2((((X - X*Y/(100+Y))/Z)-1)*100)](
        curRetailPriceUserInvoiceDetail(userInvoiceDetail),
        valueCurVATUserInvoiceDetail(userInvoiceDetail),
        curRepricingPriceUserInvoiceDetail(userInvoiceDetail))
        WHEN CHANGED(curRetailPriceUserInvoiceDetail(userInvoiceDetail)) OR CHANGED (curVATUserInvoiceDetail(userInvoiceDetail)) OR CHANGED(curRepricingPriceUserInvoiceDetail(userInvoiceDetail));

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, curRetail, curRepricing, cur, cur);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, curRetail, curRepricing, cur, cur);

    // -- После
    overRepricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    overRepricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
    overRepricingPriceInvoiceDetail (detail) += overRepricingPriceUserInvoiceDetail(detail);

    repricingPriceUserInvoiceDetail (detail) = OVERRIDE priceUserInvoiceDetail(detail), overRepricingPriceUserInvoiceDetail(detail) PERSISTENT;
    repricingPriceInvoiceDetail (detail) = OVERRIDE priceInvoiceDetail(detail), overRepricingPriceInvoiceDetail(detail) PERSISTENT;

    // ---- Суммы по строкам ---- //

    // -- До
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, cur, ' поставщика до');
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, cur, ' до');
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, cur, ' до');
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, curRetail, ' розничная до');

    // Расчет сумм обратным счетом
    @deriveDocumentDetailSumPrefix(userInvoice, curRetail, currency, balanceBSku);
    @deriveDocumentDetailReverseVATSumPrefix(userInvoice, cur, curRetail);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, cur, curRetail, cur);
    @deriveDocumentDetailSumPrefix(userInvoice, cur, currency, balanceBSku);

    // -- После
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, after, ' поставщика после');
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, afterRetail, ' после');
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, afterRetail, ' после');
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, afterRetail, ' розничная после');

    // Расчет сумм обратным счетом
    afterRetailSumUserInvoiceDetail (detail)  <- roundPriceCurrency(balanceBSkuUserInvoiceDetail(detail) * retailPriceUserInvoiceDetail(detail), currencyUserInvoiceDetail(detail))
                        WHEN CHANGED(balanceBSkuUserInvoiceDetail(detail)) OR CHANGED (retailPriceUserInvoiceDetail(detail)) OR CHANGED(currencyUserInvoiceDetail(detail));
    afterRetailVATSumUserInvoiceDetail (detail)  <- roundPriceCurrency([X*Y/(100+Y)](afterRetailSumUserInvoiceDetail(detail), valueRetailVATUserInvoiceDetail(detail)), currencyUserInvoiceDetail(detail))
                    WHEN CHANGED(afterRetailSumUserInvoiceDetail(detail)) OR CHANGED (valueRetailVATUserInvoiceDetail(detail)) OR CHANGED (currencyUserInvoiceDetail(detail));
    afterRetailMarkupSumUserInvoiceDetail(detail) <- afterRetailSumUserInvoiceDetail(detail) (-) afterRetailVATSumUserInvoiceDetail (detail) (-) afterSumUserInvoiceDetail(detail)
                    WHEN CHANGED(afterRetailVATSumUserInvoiceDetail(detail)) OR CHANGED (afterRetailVATSumUserInvoiceDetail (detail)) OR CHANGED (afterSumUserInvoiceDetail(detail));
    afterSumUserInvoiceDetail (detail)  <- roundPriceCurrency(balanceBSkuUserInvoiceDetail(detail) * priceUserInvoiceDetail(detail), currencyUserInvoiceDetail(detail))
                        WHEN CHANGED(balanceBSkuUserInvoiceDetail(detail)) OR CHANGED (priceUserInvoiceDetail(detail)) OR CHANGED(currencyUserInvoiceDetail(detail));

    // -- Разница
    @defineDocumentInterfaceDetailDiffSumPrefix (invoice, retailSum, after, cur, ' дооценки');

    // ---- Суммы по документу ---- //
    @defineDocumentInterfaceHeaderSumPrefix (invoice, diffRetail, ' дооценки');

    showCreateRepricingInvoice (invoice) = stockProp###invoice(invoice) IS DepartmentStore AND NOT costLedgerDepartmentStore(stockProp###invoice(invoice));
    @defineDocumentInterfaceCreate (invoice, createRepricing, 'Создать акт дооценки');

    needToRepricingInvoiceDetail (invoiceDetail) = curRetailPriceInvoiceDetail(invoiceDetail) != retailPriceInvoiceDetail(invoiceDetail)
                                                   AND balanceBSkuInvoiceDetail(invoiceDetail) != 0 AND stockProp###InvoiceDetail(invoiceDetail) IS DepartmentStore
                                                   AND NOT costLedgerDepartmentStore(stockProp###InvoiceDetail(invoiceDetail))
                                                   AND createRepricingInvoiceDetail(invoiceDetail)
                                                   AND isStockSkuInvoiceDetail(invoiceDetail) PERSISTENT;// AND isPostedInvoiceDetail(invoiceDetail) ;

    needToRepricingInvoice (invoice)= GROUP SUM 1 IF needToRepricingInvoiceDetail(invoiceDetail)
        BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    CLASS InvoiceRepricing 'Акт дооценки на основе инвойса'###sign : Repricing;
    CLASS InvoiceRepricingPosted 'Проведенный акт дооценки на основе инвойса'###sign : InvoiceRepricing, PostedObject;
    CLASS InvoiceRepricingDetail 'Строка акта дооценки на основе инвойса'###sign : RepricingDetail;

    @defineDocumentTables(invoiceRepricing);

    @defineDocumentAggregation(invoice, invoiceRepricing, needToRepricingInvoice);
    @defineDocumentAggregationTimePrefix(invoice, invoiceRepricing, before);

    repricingRepricingDetail(detail) += invoiceRepricingInvoiceRepricingDetail(detail);

    printRepricing 'Акт переоценки' (repricing) = ACTION FORM repricing OBJECTS p = repricing IMAGE 'print.png' IN printGroup;
    printRepricingInvoice 'Акт дооценки' (invoice) = printRepricing(invoiceRepricingInvoice(invoice)) IMAGE 'print.png' IN printGroup;
    @defineDocumentDetailIndex(invoiceRepricing);

    dateRepricing(repricing) += dateInvoiceRepricing(repricing);
    timeRepricing(repricing) += timeInvoiceRepricing(repricing);

    beforeDateRepricing(repricing) += beforeDateInvoiceRepricing(repricing);
    beforeTimeRepricing(repricing) += beforeTimeInvoiceRepricing(repricing);

    @defineDocumentAggregationStockPrefix(invoice, invoiceRepricing, stockProp, 'Склад', , );
    departmentStoreRepricing(repricing) += stockProp###invoiceRepricing(repricing) IF stockProp###invoiceRepricing(repricing) IS DepartmentStore;
    dataDepartmentStoreRepricingDetail(repricingDetail) += data###stockProp###InvoiceDetail(invoiceDetailInvoiceRepricingDetail(repricingDetail))
                                                           IF data###stockProp###InvoiceDetail(invoiceDetailInvoiceRepricingDetail(repricingDetail)) IS DepartmentStore;

    @defineDocumentAggregationPosted(invoice, invoiceRepricing);
    isPostedRepricing(repricing) += isPostedInvoiceRepricing(repricing);

    numberInvoiceRepricing 'Номер документа' (invoiceRepricing) = numberInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    numberRepricing(repricing) += numberInvoiceRepricing(repricing);

    seriesInvoiceRepricing 'Серия документа' (invoiceRepricing) = seriesInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    seriesRepricing(repricing) += seriesInvoiceRepricing(repricing);

    seriesNumberInvoiceRepricing 'Серия/номер документа' (invoiceRepricing) = seriesNumberInvoice(invoiceInvoiceRepricing(invoiceRepricing));

    noteInvoiceInvoiceRepricing 'Примечание' (invoiceRepricing) = noteInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    noteRepricing(repricing) += noteInvoiceInvoiceRepricing(repricing);

    currencyInvoiceRepricing  (invoiceRepricing) = currencyInvoice(invoiceInvoiceRepricing(invoiceRepricing));
    currencyRepricing (repricing) += currencyInvoiceRepricing(repricing);
    repricingCommitteeRepricing(repricing) += repricingCommitteeInvoice(invoiceInvoiceRepricing(repricing));
    numberDisposalRepricing(repricing) += numberDisposalInvoice(invoiceInvoiceRepricing(repricing));

    @defineDocumentDescription(invoiceRepricing, InvoiceRepricingDetail, seriesNumberInvoiceRepricing, 'Акт дооценки на основе инвойса');
    descriptionRepricing (repricing) += descriptionInvoiceRepricing(repricing);

    skipChangeLedgerRepricing(repricing) += repricing IS InvoiceRepricing;

    @defineDocumentAggregationDetailSku(invoice, invoiceRepricing, sku);
    skuRepricingDetail(repricingDetail) +=  skuInvoiceRepricingDetail(repricingDetail);

    overCopyInvoice(s, d) += ACTION (s, d) {
        ASSIGN createRepricingUserInvoice(d) <- createRepricingUserInvoice(s);
        ASSIGN repricingCommitteeUserInvoice(d) <- repricingCommitteeUserInvoice(s);
        ASSIGN numberDisposalUserInvoice(d) <- numberDisposalUserInvoice(s);
        ASSIGN beforeDateUserInvoice(d) <- beforeDateUserInvoice(s);
    }

    backgroundCurInvoice 'Цвет' (invoice) = RGB(255, 255, 224) IF invoice IS Invoice;
    backgroundAfterInvoice 'Цвет' (invoice) = RGB(255, 255, 200) IF invoice IS Invoice;

    EXTEND FORM userInvoice
        PROPERTIES(i)   SHOWIF showCreateRepricingInvoice(i) BACKGROUND backgroundCurInvoice(i) createRepricingUserInvoice
        PROPERTIES(i)   BACKGROUND backgroundCurInvoice(i) SHOWIF createRepricingUserInvoice(i) nameRepricingCommitteeUserInvoice, numberDisposalUserInvoice, beforeDateUserInvoice
        PROPERTIES(i)   BACKGROUND backgroundAfterInvoice(i) SHOWIF createRepricingUserInvoice(i) diffRetailSumUserInvoiceDetailUserInvoice

        PROPERTIES(d)   BACKGROUND backgroundCurInvoice(i) SHOWIF createRepricingUserInvoice(i) BEFORE name###stockProp###userInvoiceDetail(d)
                        balanceBSkuUserInvoiceDetail, curPriceUserInvoiceDetail, curSumUserInvoiceDetail,
                        curMarkupUserInvoiceDetail ON CHANGE changeCurMarkupUserInvoiceDetail(d), curMarkupSumUserInvoiceDetail,
                        numberCurVATUserInvoiceDetail, valueCurVATUserInvoiceDetail, curVATSumUserInvoiceDetail,
                        curRetailPriceUserInvoiceDetail ON CHANGE changeCurRetailPriceUserInvoiceDetail(d), curRetailSumUserInvoiceDetail
        PROPERTIES(d)   BACKGROUND backgroundAfterInvoice(i) SHOWIF createRepricingUserInvoice(i) BEFORE name###stockProp###userInvoiceDetail(d)
                        afterSumUserInvoiceDetail, afterRetailVATSumUserInvoiceDetail, afterRetailMarkupSumUserInvoiceDetail, afterRetailSumUserInvoiceDetail

    ;
    EXTEND DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateRepricing {
                caption = 'Дооценка';
                ADD PROPERTY(createRepricingUserInvoice);
                ADD PROPERTY(nameRepricingCommitteeUserInvoice);
                ADD PROPERTY(numberDisposalUserInvoice);
                ADD PROPERTY(beforeDateUserInvoice);
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) BACKGROUND backgroundCurInvoice(i) createRepricingInvoice READONLYIF isReadonly(), diffRetailSumInvoiceDetailInvoice READONLY AFTER retailSumInvoiceDetailInvoice
        PROPERTIES(i) FORCE PANEL  printRepricingInvoice SHOWIF createRepricingInvoice(i)

    ;

//----------------------------------------------------------------------------------------------------------
    quantityRepricingDetail(repricingDetail) += balanceBSkuInvoiceDetail(invoiceDetailInvoiceRepricingDetail(repricingDetail));

    // -- До

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curPrice, 'Цена поставщика до');
    curPriceRepricingDetail(repricingDetail) += curPriceInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curMarkup, 'Надбавка до');
    curMarkupRepricingDetail(repricingDetail) += curMarkupInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curVAT, 'НДС до');
    curVATRepricingDetail(repricingDetail) += curVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, valueCurVAT, 'НДС,% до');
    valueCurVATRepricingDetail(repricingDetail) += valueCurVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curRetailPrice, 'Цена розничная до');
    curRetailPriceRepricingDetail(repricingDetail) += curRetailPriceInvoiceRepricingDetail(repricingDetail);

    // -- После

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, price, 'Цена поставщика после');
    priceRepricingDetail(repricingDetail) += priceInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailMarkup, 'Надбавка после');
    markupRepricingDetail(repricingDetail) += retailMarkupInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailVAT, 'НДС после');
    VATRepricingDetail(repricingDetail) += retailVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, valueRetailVAT, 'НДС,% после');
    valueVATRepricingDetail(repricingDetail) += valueRetailVATInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailPrice, 'Цена розничная после');
    retailPriceRepricingDetail(repricingDetail) += retailPriceInvoiceRepricingDetail(repricingDetail);

    // ---- Суммы по строкам ---- //

    // -- До
    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curSum, 'Сумма поставщика до');
    curSumRepricingDetail(repricingDetail) += curSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curMarkupSum, 'Сумма надбавки до');
    curMarkupSumRepricingDetail(repricingDetail) += curMarkupSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curVATSum, 'Сумма НДС до');
    curVATSumRepricingDetail(repricingDetail) += curVATSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curRetailSum, 'Сумма розничная до');
    curRetailSumRepricingDetail(repricingDetail) += curRetailSumInvoiceRepricingDetail(repricingDetail);

    // -- После
    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterSum, 'Сумма поставщика после');
    sumRepricingDetail(repricingDetail) += afterSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailMarkupSum, 'Сумма надбавки после');
    markupSumRepricingDetail(repricingDetail) += afterRetailMarkupSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailVATSum, 'Сумма НДС после');
    VATSumRepricingDetail(repricingDetail) += afterRetailVATSumInvoiceRepricingDetail(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailSum, 'Сумма розничная после');
    retailSumRepricingDetail(repricingDetail) += afterRetailSumInvoiceRepricingDetail(repricingDetail);

END

