MODULE Repricing;

REQUIRE RepricingCommittee, Store, Pricing, StockDocumentSkuLedger, PriceListCalc, RepricingOperation, PriceListLedger, 
        PriceListStore;

NAMESPACE Repricing;

//----------------------------------------------- Переоценка (розница) ---------------------------------------------------//

CLASS ABSTRACT Repricing 'Акт переоценки';
CLASS ABSTRACT RepricingDetail 'Строка акта переоценки': InLIFOSkuLedger;

CLASS UserRepricing 'Акт переоценки (польз.)' : Repricing;
CLASS UserRepricingDetail 'Строка акта переоценки (польз.)' : RepricingDetail;

@defineDocumentInterface(repricing);
@deriveDocumentHeaderTimePrefix(UserRepricing, );

@defineDocumentInterfaceTimePrefix(repricing, before, ' документа (до)');
@deriveDocumentHeaderTimePrefix(UserRepricing, before);

@defineDocumentInterfaceNumber(repricing);
@defineNumeratedDefault(UserRepricing, 'Переоценки', 'ПО');

@defineDocumentInterfaceDataStock(repricing, departmentStore, 'Склад');
@defineDocumentDialogStocks(userRepricing, departmentStore, company, , );
@defineDocumentInterfacePosted(repricing);
@defineDocumentInterfaceClosed(repricing);
@defineDocumentClosedConstraint(UserRepricing);

@defineDocumentInterfaceDescription(repricing, 'Акт переоценки');

@defineDocumentInterfaceCurrency(repricing);
@deriveDocumentCurrency(userRepricing, departmentStore);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (repricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(repricing, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(repricing);

// Округление розничной цены
roundConditionUserRepricingDetail(userRepricingDetail) = roundConditionDepartmentStore(departmentStoreUserRepricingDetail(userRepricingDetail));

// -- До

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, cur, ' поставщика до');

// Цена от которой будет считаться надбавка
overCurRepricingPriceRepricingDetail = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overCurRepricingPriceUserRepricingDetail = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overCurRepricingPriceRepricingDetail (detail) += overCurRepricingPriceUserRepricingDetail(detail);

curRepricingPriceUserRepricingDetail (detail) = OVERRIDE curPriceUserRepricingDetail(detail), overCurRepricingPriceUserRepricingDetail(detail) PERSISTENT;
curRepricingPriceRepricingDetail (detail) = OVERRIDE curPriceRepricingDetail(detail), overCurRepricingPriceRepricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, cur, ' до');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, cur, ' до');
@deriveDocumentDetailVAT (userRepricing, cur, beforeDate);
@deriveDocumentDetailValueVAT(userRepricing, cur);

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, curRetail, ' розничная до');

//-- Партии
@defineDocumentInterfaceDetailBatch(repricing, batch);

changeBatchUserRepricingDetail = ACTION (detail) {
    FORM dialogBatchStock OBJECTS st = departmentStoreUserRepricingDetail(detail),
                             t = dateTimeUserRepricingDetail(detail),
                             sk = skuUserRepricingDetail(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserRepricingDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batchUserRepricingDetail(detail) <- NULL;
    }
};

replaceSkuBatch(s, b) += ACTION (s, b){ skuUserRepricingDetail(detail) <- s WHERE batchUserRepricingDetail(detail) == b;}

@defineBalancesBatch(repricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(repricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(repricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userRepricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара       

@defineMovementPriceSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

// Автоматическое заполнение цен до
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, supplierPricingPriceListType, cur, sku, departmentStore);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, retailPricingPriceListType, curRetail, sku, departmentStore);

// Автоматическое проставление надбавок
curMarkupUserRepricingDetail(userRepricingDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curRetailPriceUserRepricingDetail(userRepricingDetail),
    valueCurVATUserRepricingDetail(userRepricingDetail),
    curRepricingPriceUserRepricingDetail(userRepricingDetail) IF curRepricingPriceUserRepricingDetail(userRepricingDetail)!=0.0)
    WHEN CHANGED(curRetailPriceUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(curVATUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(curRepricingPriceUserRepricingDetail(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);

// -- После

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, , ' поставщика после');

priceUserRepricingDetail(d) <- curPriceUserRepricingDetail(d) WHEN 
    CHANGED(skuUserRepricingDetail(d)) OR
    CHANGED(departmentStoreUserRepricingDetail(d)) OR
    CHANGED(dateTimeUserRepricingDetail(d)) OR
    CHANGED(batchUserRepricingDetail(d));

// Цена от которой будет считаться надбавка
overRepricingPriceRepricingDetail = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overRepricingPriceUserRepricingDetail = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overRepricingPriceRepricingDetail (detail) += overRepricingPriceUserRepricingDetail(detail);

repricingPriceUserRepricingDetail (detail) = OVERRIDE priceUserRepricingDetail(detail), overRepricingPriceUserRepricingDetail(detail) PERSISTENT;
repricingPriceRepricingDetail (detail) = OVERRIDE priceRepricingDetail(detail), overRepricingPriceRepricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, , ' после');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, , ' после');
@deriveDocumentDetailVAT(userRepricing, );
@deriveDocumentDetailValueVAT(userRepricing, );

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, retail, ' розничная после');

// Автоматическое проставление надбавок
markupUserRepricingDetail(userRepricingDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPriceUserRepricingDetail(userRepricingDetail),
    valueVATUserRepricingDetail(userRepricingDetail),
    repricingPriceUserRepricingDetail(userRepricingDetail) IF repricingPriceUserRepricingDetail(userRepricingDetail)!=0.0)
    WHEN CHANGED(retailPriceUserRepricingDetail(userRepricingDetail)) OR
         CHANGED (VATUserRepricingDetail(userRepricingDetail)) OR
         CHANGED(repricingPriceUserRepricingDetail(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, retail, repricing, , );
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , );

// ---- Суммы по строкам ---- //

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, sum, , cur, ' изменения поставщика ');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, markupSum, , cur, ' изменения надбавки');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, VATSum, , cur, ' изменения НДС');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, retailSum, , cur, ' изменения розничной');

// Расчет сумм обратным счетом
// -- До
@deriveDocumentDetailSumPrefix(userRepricing, curRetail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, cur, curRetail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, cur, curRetail, cur);
@deriveDocumentDetailSumPrefix(userRepricing, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRepricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, , retail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, , retail, );
@deriveDocumentDetailSumPrefix(userRepricing, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(repricing);
@defineDocumentHeaderSkuQuantity(repricing, sku);
@defineDocumentHeaderSkuQuantity(userRepricing, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (repricing, cur, ' поставщика  до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curMarkup, ' надбавки до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curVAT, ' НДС до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, markup, ' надбавки после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, VAT, ' НДС после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (repricing, diff, ' изменения поставщика');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffMarkup, ' изменения надбавки');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffVAT, ' изменения НДС');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffRetail, ' изменения розничной');

// Изменение сумм по товару, таре...
@defineDocumentInterfaceHeaderItemSum(repricing, diffRetail, );                   //-- сумма розничная
@defineDocumentInterfaceHeaderItemSum (repricing, diffMarkup, diffMarkup);        //-- сумма надбавки
@defineDocumentInterfaceHeaderItemSum (repricing, diffVAT, diffVAT);              //-- сумма ндс
@defineDocumentInterfaceHeaderItemSum (repricing, diff, diff);                    //-- сумма поставщика

@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diff, diff, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffMarkup, diffMarkup, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffVAT, diffVAT, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffRetail, diffRetail, , VAT);

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRepricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userRepricing, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Repricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(repricing, changeLedger, 'Не изменять текущие цены');


// ---- Действия по проставлению новых надбавок и цен ------- //

repricingRoundCondition = DATA RoundCondition ();
nameRepricingRoundCondition 'Условие округления розничной цены' ()= nameRoundCondition(repricingRoundCondition());

CONSTRAINT defaultCurrency() AND repricingRoundCondition() AND NOT defaultCurrency() == currencyRoundCondition(repricingRoundCondition())
    CHECKED BY repricingRoundCondition MESSAGE 'Валюта округления должна совпадать с валютой по умолчанию';

EXTEND FORM options
    PROPERTIES() nameRepricingRoundCondition
;

DESIGN options {
    pane {        
        NEW repricings {
            caption = 'Акты переоценки';
            MOVE PROPERTY(nameRepricingRoundCondition());   
        }
    }
}

CLASS ChangePriceType 'Тип изменения цены' {
    markupChange 'Процент торговой надбавки',
    discountChange 'Процент к розничной цене'
}
FORM changePriceTypes 'Типы изменения цен'
    OBJECTS t = ChangePriceType
    PROPERTIES(t) READONLY staticCaption
    DIALOG ChangePriceType OBJECT t
;

changePriceTypeUserRepricing = DATA ChangePriceType (UserRepricing);
nameChangePriceTypeUserRepricing 'Тип изменения цены' (userRepricing) = staticCaption(changePriceTypeUserRepricing(userRepricing)) MINCHARWIDTH 20 PREFCHARWIDTH 20 MAXCHARWIDTH 20;

percentUserRepricing 'Процент' (userRepricing)= DATA NUMERIC[8,3](UserRepricing);

roundConditionUserRepricing = DATA RoundCondition (UserRepricing);
nameRoundConditionUserRepricing 'Условие округления розничной цены' (d)= nameRoundCondition(roundConditionUserRepricing(d));

CONSTRAINT currencyUserRepricing(r) AND roundConditionUserRepricing(r) AND NOT currencyUserRepricing(r) == currencyRoundCondition(roundConditionUserRepricing(r))
    CHECKED BY roundConditionUserRepricing MESSAGE 'Валюта округления должна совпадать с валютой переоценки';

newDiscountRetailPriceUserRepricingDetail (d) =  roundPriceRoundCondition(NUMERIC[14,2]([= X+(X*Y)/100](
    curRetailPriceUserRepricingDetail(d),
    percentUserRepricing(userRepricingUserRepricingDetail(d)))), roundConditionUserRepricing(userRepricingUserRepricingDetail(d)));

newMarkupRetailPriceUserRepricingDetail (d) = roundPriceRoundCondition(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
    curRepricingPriceUserRepricingDetail(d),
    percentUserRepricing(userRepricingUserRepricingDetail(d)),
    valueCurVATUserRepricingDetail(d))), roundConditionUserRepricing(userRepricingUserRepricingDetail(d)));

FORM addPercentUserRepricing 'Изменение цены'
    OBJECTS u=UserRepricing FIXED PANEL
    PROPERTIES (u) nameChangePriceTypeUserRepricing, percentUserRepricing, nameRoundConditionUserRepricing
;

DESIGN addPercentUserRepricing {
    u.panel.props {
        fill = 1;
        type = CONTAINERV;
        PROPERTY (nameChangePriceTypeUserRepricing(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип';
            font = 'bold 28';
            panelCaptionAbove = TRUE;
        }
        PROPERTY (percentUserRepricing(u)) {
            alignment = STRETCH;
            caption = 'Введите процент';
            font = 'bold 64';
            panelCaptionAbove = TRUE;
        }
        PROPERTY (nameRoundConditionUserRepricing(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип округления';
            font = 'bold 28';
            panelCaptionAbove = TRUE;
        }        
    }
}

overChangePriceUserRepricing = ABSTRACT ACTION LIST (RepricingDetail);

changePriceUserRepricing 'Изменить цену' (repricing) = ACTION (repricing) {
        roundConditionUserRepricing(repricing) <- repricingRoundCondition() IF currencyUserRepricing(repricing) == currencyRoundCondition(repricingRoundCondition());
        FORM addPercentUserRepricing OBJECTS u = repricing MODAL;
        IF formResult() == FormResult.ok AND changePriceTypeUserRepricing(repricing) AND percentUserRepricing(repricing) THEN {
            FOR userRepricingUserRepricingDetail(d) == repricing DO {
                priceUserRepricingDetail(d) <- curPriceUserRepricingDetail(d);
                overChangePriceUserRepricing(d);
                VATUserRepricingDetail(d) <- curVATUserRepricingDetail(d);
                valueVATUserRepricingDetail(d) <- valueCurVATUserRepricingDetail(d);
                IF changePriceTypeUserRepricing(repricing) == ChangePriceType.markupChange THEN {
                    retailPriceUserRepricingDetail(d) <- newMarkupRetailPriceUserRepricingDetail(d);
                } ELSE {
                    IF changePriceTypeUserRepricing(repricing)== ChangePriceType.discountChange THEN {
                        retailPriceUserRepricingDetail(d) <- newDiscountRetailPriceUserRepricingDetail(d);
                    }
                }
                markupUserRepricingDetail(d) <- calcMarkupUserRepricingDetail(d) WHERE calcMarkupUserRepricingDetail(d);
            }
        }
} TOOLBAR;

overRecalculatePriceUserRepricingDetail = ABSTRACT ACTION LIST (UserRepricingDetail);
overConfirmRecalculatePriceUserRepricingDetail = ABSTRACT ACTION LIST (UserRepricingDetail);

recalculatePriceUserRepricing 'Пересчитать цены (до)' (repricing) = ACTION (repricing) {
    CONFIRM 'Может, Вы, хотите пересчитать и цены (после)?';
    
    FOR userRepricingUserRepricingDetail(d) == repricing DO {
        curPriceUserRepricingDetail(d) <- IF batchUserRepricingDetail(d)                                          
                THEN prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType,
                            batchUserRepricingDetail(d),
                            departmentStoreUserRepricingDetail(d),
                            dateTimeUserRepricingDetail(d))
                ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType,
                            skuUserRepricingDetail(d),
                            departmentStoreUserRepricingDetail(d),
                            dateTimeUserRepricingDetail(d));
                                                           
//        curVATUserRepricingDetail(d) <- curVATUserRepricingDetail(d);
//        valueCurVATUserRepricingDetail(d) <- valueCurVATUserRepricingDetail(d);
        
        curRetailPriceUserRepricingDetail(d) <- IF batchUserRepricingDetail(d)                
                THEN prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType,
                            batchUserRepricingDetail(d),
                            departmentStoreUserRepricingDetail(d),
                            dateTimeUserRepricingDetail(d))
                ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType,
                            skuUserRepricingDetail(d),
                            departmentStoreUserRepricingDetail(d),
                            dateTimeUserRepricingDetail(d));
                            
                            
        overRecalculatePriceUserRepricingDetail(d);
    }    
    IF (confirmed()) THEN {
        FOR userRepricingUserRepricingDetail(d) == repricing DO {
            priceUserRepricingDetail(d) <- curPriceUserRepricingDetail(d);
            overConfirmRecalculatePriceUserRepricingDetail(d);        
        }

        
    }      


        
} TOOLBAR;
//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //
nameStoreRepricing 'Магазин' (repricing) = nameStoreDepartmentStore(departmentStoreRepricing(repricing));

FORM repricing 'Акт переоценки (печать)'

    OBJECTS p = Repricing FIXED PANEL
    PROPERTIES (p)  SELECTOR isPostedRepricing

    PROPERTIES (p) numberRepricing, seriesRepricing, dateRepricing, timeRepricing, nameStoreRepricing,
               nameDepartmentStoreRepricing, countRepricingDetailRepricing, quantityRepricingDetailRepricing, nameLegalEntityStockRepricing,
               curSumRepricingDetailRepricing, curMarkupSumRepricingDetailRepricing, curVATSumRepricingDetailRepricing,
               curRetailSumRepricingDetailRepricing,
               sumRepricingDetailRepricing, markupSumRepricingDetailRepricing, VATSumRepricingDetailRepricing,
               retailSumRepricingDetailRepricing,
               diffSumRepricingDetailRepricing, diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
               diffRetailSumRepricingDetailRepricing,
               noteRepricing, numberDisposalRepricing, repricingCommitteeRepricing, nameRepricingCommitteeRepricing,
               nameChairmanRepricing, shortNameChairmanRepricing, namePositionChairmanRepricing, nameEmployeeCommitteeRepricing,
               shortNameEmployeeCommitteeRepricing


    OBJECTS d = RepricingDetail
    PROPERTIES (d)  indexRepricingDetail, idBarcodeSkuRepricingDetail, nameSkuRepricingDetail, shortNameUOMSkuRepricingDetail, quantityRepricingDetail,
               curPriceRepricingDetail, curSumRepricingDetail,
               curMarkupRepricingDetail, curMarkupSumRepricingDetail,
               numberCurVATRepricingDetail, valueCurVATRepricingDetail, curVATSumRepricingDetail,
               curRetailPriceRepricingDetail, curRetailSumRepricingDetail,
               priceRepricingDetail, sumRepricingDetail,
               markupRepricingDetail, markupSumRepricingDetail,
               numberVATRepricingDetail, valueVATRepricingDetail, VATSumRepricingDetail,
               retailPriceRepricingDetail, retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   nameContact, namePositionEmployee, shortNameContact

    FILTERS    repricingRepricingDetail(d) == p,
               inCommitteeRepricingEmployee(p, e),
               (diffSumRepricingDetail(d) AND diffSumRepricingDetail(d)!=0.0) OR
               (diffMarkupSumRepricingDetail(d) AND diffMarkupSumRepricingDetail(d)!=0.0) OR
               (diffVATSumRepricingDetail(d) AND diffVATSumRepricingDetail(d)!=0.0) OR
               (diffRetailSumRepricingDetail(d) AND diffRetailSumRepricingDetail(d)!=0.0)

;

printRepricing 'Акт переоценки' (repricing) = ACTION FORM repricing OBJECTS p = repricing PRINT  IMAGE 'print.png' IN print;

//----------------------------------------------- Операции ------------------------+----------------------------//

@defineDocumentInterfaceOperation (repricing, Repricing, );

@defineDocumentOperationConstraint(repricing, repricings, 'акт переоценки', Repricing);

@defineDocumentOperationRolePrefix(userRepricing, );

toFillQuantityUserRepricingDetailUserRepricing 'Записать в кол-во остатки' = ACTION (repricing) {
    quantityUserRepricingDetail(d) <- IF batchUserRepricingDetail(d) THEN balanceBBatchStockDateTime(batchUserRepricingDetail(d),   
                                                                            departmentStoreUserRepricingDetail(d), 
                                                                            dateTimeUserRepricingDetail(d)) 
                                                                     ELSE balanceBSkuStockDateTime(skuUserRepricingDetail(d), 
                                                                            departmentStoreUserRepricingDetail(d), 
                                                                            dateTimeUserRepricingDetail(d))                                                                      
                                                                     WHERE userRepricingUserRepricingDetail(d) == repricing;    
}

toFillQuantityUserRepricingDetailAllUserRepricings 'Записать в кол-во остатки (для всех)' = ACTION () NEWSESSION {
    FOR r IS UserRepricing AND balanceOperation(operationUserRepricing(r)) AND NOT isClosedUserRepricing(r) DO {
        toFillQuantityUserRepricingDetailUserRepricing(r);    
    }
    apply();
}

allowRecalculatePriceUserRepricing (p) = NOT denyRecalculatePriceOperation(operationUserRepricing(p));

// --------------------------- Формы --------------------------------- //
editRepricing 'Редактировать' = ABSTRACT ACTION LIST (Repricing) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editSkuUserRepricingDetail 'Редактировать SKU' (d) = ACTION editSku(skuUserRepricingDetail(d));

FORM userRepricing 'Акт переоценки'
    OBJECTS p=UserRepricing FIXED PANEL
    PROPERTIES (p) isPostedUserRepricing, nameNumeratorUserRepricing, numberUserRepricing, seriesUserRepricing,
                   dateUserRepricing, timeUserRepricing, beforeDateUserRepricing, nameDepartmentStoreUserRepricing ON CHANGE changeDepartmentStoreCompanyUserRepricing(p),
                   diffSumUserRepricingDetailUserRepricing, diffMarkupSumUserRepricingDetailUserRepricing, diffVATSumUserRepricingDetailUserRepricing,
                   diffRetailSumUserRepricingDetailUserRepricing,
                   noteUserRepricing, numberDisposalUserRepricing ON CHANGE changeNumberDisposalUserRepricing(p), nameRepricingCommitteeUserRepricing, skipChangeLedgerUserRepricing

    OBJECTS d=UserRepricingDetail
    PROPERTIES (d) indexUserRepricingDetail
    PROPERTIES (d) ON EDIT editSkuUserRepricingDetail(d) idBarcodeSkuUserRepricingDetail, nameSkuUserRepricingDetail, shortNameUOMSkuUserRepricingDetail
    PROPERTIES (d) nameBatchUserRepricingDetail ON CHANGE changeBatchUserRepricingDetail(d), quantityUserRepricingDetail,

                   curPriceUserRepricingDetail, curSumUserRepricingDetail,                    
                   curMarkupUserRepricingDetail ON CHANGE changeCurMarkupUserRepricingDetail(d), curMarkupSumUserRepricingDetail,
                   numberCurVATUserRepricingDetail, valueCurVATUserRepricingDetail, curVATSumUserRepricingDetail,
                   curRetailPriceUserRepricingDetail ON CHANGE changeCurRetailPriceUserRepricingDetail(d), curRetailSumUserRepricingDetail,
                   
                   priceUserRepricingDetail, sumUserRepricingDetail,                    
                   markupUserRepricingDetail ON CHANGE changeMarkupUserRepricingDetail(d), markupSumUserRepricingDetail,
                   numberVATUserRepricingDetail, valueVATUserRepricingDetail, VATSumUserRepricingDetail,
                   retailPriceUserRepricingDetail ON CHANGE changeRetailPriceUserRepricingDetail(d), retailSumUserRepricingDetail, ADDOBJ, DELETESESSION

    PROPERTIES TODRAW d changePriceUserRepricing(p), recalculatePriceUserRepricing(p) SHOWIF allowRecalculatePriceUserRepricing(p)

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserRepricingDetailUserRepricing,
                           addDetailInputBarcodeUserRepricingDetailUserRepricing, deleteUserRepricingDetailUserRepricing

    FILTERS userRepricingUserRepricingDetail(d)==p

    EVENTS
        ON OK prePostUserRepricing(p)

    EDIT UserRepricing OBJECT p
;

DESIGN userRepricing {
    main {
        preferredSize = (1024, 768);

        NEW header {
            type = CONTAINERH;

            NEW headerColumn1 {
                fill = 1;
//                ADD p.documentHeader {
//                    type = CONTAINERH;
//                    ADD PROPERTY(isPostedUserRepricing) { preferredCharWidth = 10; };
//                    ADD PROPERTY(nameDepartmentStoreUserRepricing);
//                    ADD PROPERTY(nameNumeratorUserRepricing);
//                    ADD PROPERTY(numberUserRepricing);
//                    ADD PROPERTY(seriesUserRepricing);
//                    ADD PROPERTY(dateUserRepricing);
//                    ADD PROPERTY(timeUserRepricing);
//                }
                MOVE p.documentHeader {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPostedUserRepricing(p));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameDepartmentStoreUserRepricing(p));
                        MOVE PROPERTY(nameNumeratorUserRepricing(p));
                        MOVE PROPERTY(numberUserRepricing(p));
                        MOVE PROPERTY(seriesUserRepricing(p));
                        MOVE PROPERTY(dateUserRepricing(p));
                        MOVE PROPERTY(timeUserRepricing(p));
                    }    
                }                
                
                MOVE p.documentPrm {
                    type = COLUMNS;
                    columns = 2;
                    MOVE PROPERTY(beforeDateUserRepricing(p));
                    MOVE PROPERTY(noteUserRepricing(p));
                    MOVE PROPERTY(numberDisposalUserRepricing(p));
                    MOVE PROPERTY(nameRepricingCommitteeUserRepricing(p));
                    MOVE PROPERTY(skipChangeLedgerUserRepricing(p));
                }
            }

            MOVE p.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            type = TABBED;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        PROPERTY(priceUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(sumUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(markupUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(markupSumUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(numberVATUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(valueVATUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(VATSumUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(retailPriceUserRepricingDetail(d)) { background = #FFFFCC; }
        PROPERTY(retailSumUserRepricingDetail(d)) { background = #FFFFCC; }
        
        PROPERTY(diffSumUserRepricingDetailUserRepricing(p)) { preferredCharWidth = 13;}
        PROPERTY(diffMarkupSumUserRepricingDetailUserRepricing(p)) { preferredCharWidth = 13;}
        PROPERTY(diffVATSumUserRepricingDetailUserRepricing(p)) { preferredCharWidth = 13;}
        PROPERTY(diffRetailSumUserRepricingDetailUserRepricing(p)) { preferredCharWidth = 13;}

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

EXTEND FORM userRepricing
    PROPERTIES(p) nameOperationUserRepricing
    PROPERTIES(p) TODRAW d toFillQuantityUserRepricingDetailUserRepricing FORCE PANEL TOOLBAR
;
DESIGN userRepricing{
    first {
        MOVE PROPERTY (nameOperationUserRepricing(p) ) {minimumCharWidth = 30; preferredCharWidth = 40;}
    }
}

editRepricingDetail 'Редактировать' = ABSTRACT ACTION LIST  (RepricingDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserRepricingDetail(d) = ACTION (d) NEWSESSION {
    FORM userRepricing OBJECTS p = userRepricingUserRepricingDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}

editRepricingDetail(d) += ACTION editUserRepricingDetail(d);    
editSkuLedger(ledger) += ACTION editRepricingDetail(ledger);

//-- SKU
@defineDocumentSkuPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore, );
@extendFormDocumentSku(userRepricing, userRepricing, p);

@defineDocumentBatchPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore, );
@extendFormDocumentBatch(userRepricing, userRepricing, p);

EXTEND FORM userRepricing

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalanceSkuUserRepricing(ks, p) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserRepricingDetailSkuUserRepricing(ks, p) 'F9'
;


isStockRepricings 'Разрешить ввод акта переоценки без склада ' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isStockRepricings
;

DESIGN options {
    pane {        
        repricings {
            MOVE PROPERTY(isStockRepricings());   
        }
    }
}

CONSTRAINT isPostedUserRepricing(i) AND NOT isStockRepricings() AND NOT  departmentStoreUserRepricing(i) 
    MESSAGE 'Для акта переоценки должен быть задан склад'; 

// Проведение по товарному отчету
@implementStockDocumentLedgerInc(Repricing, departmentStore);
typeStockDocumentLedger(l) += 'Переоценка' IF l IS Repricing;
sumItemIncStockDocumentLedger (ledger) += sumItemRepricingDetailRepricing(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerRepricingDetailRepricing(ledger);

operationStockDocumentLedger (ledger) += operationRepricing(ledger);
editStockDocumentLedger(l) += ACTION editRepricing(l);
closeStockDocumentLedger(l) += ACTION closeRepricing(l);

// Проведение по регистру
@implementSkuLedger(repricingDetail, sku, departmentStore);
sumInSkuLedger (ledger) += diffRetailSumRepricingDetail(ledger);
stockDocumentLedgerSkuLedger(ledger) += repricingRepricingDetail(ledger); 

batchSkuLedger(ledger) += batchRepricingDetail(ledger);

addUserRepricing 'Добавить' = ACTION ADDFORM UserRepricing;
editUserRepricing 'Редактировать' (userRepricing) = ACTION EDITFORM UserRepricing;
editRepricing(p) += ACTION editUserRepricing(p);

isUserOpenedRepricing(p)=  isOpenedRepricing(p) AND isUserRepricing(p);

filterRepricingDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFromRepricing (i) = dateRepricing(i) >= filterRepricingDateFrom() OR (i IS Repricing AND NOT filterRepricingDateFrom());      

filterRepricingDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateToRepricing (i) = dateRepricing(i) <= filterRepricingDateTo() OR (i IS Repricing AND NOT filterRepricingDateTo());      

filterRepricingStore = DATA LOCAL Store ();
nameFilterRepricingStore 'Магазин' = nameStore(filterRepricingStore()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterStoreRepricing (i) = storeDepartmentStore(departmentStoreRepricing(i)) == filterRepricingStore() OR (i IS Repricing AND NOT filterRepricingStore());      

FORM repricings 'Акты переоценки' 
    PROPERTIES() filterRepricingDateFrom, filterRepricingDateTo, nameFilterRepricingStore

    OBJECTS p = Repricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosedRepricing, isPostedRepricing, numberRepricing, seriesRepricing, dateRepricing, timeRepricing, beforeDateRepricing,
               nameDepartmentStoreRepricing
    PROPERTIES (p) READONLY countRepricingDetailRepricing, diffSumRepricingDetailRepricing,
                   diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
                   diffRetailSumRepricingDetailRepricing
    PROPERTIES (p) READONLYIF isReadonly() numberDisposalRepricing, skipChangeLedgerRepricing,
                   noteRepricing

    PROPERTIES (p) READONLY FORCE PANEL createdNameUserUserRepricing, createdTimeUserRepricing, createdHostnameComputerUserRepricing, 
                                        postedNameUserUserRepricing, postedTimeUserRepricing, postedHostnameComputerUserRepricing

    PROPERTIES ()  addUserRepricing TODRAW p
    PROPERTIES (p) editRepricing SHOWIF isOpenedRepricing(p)
    PROPERTIES(p)  closeUserRepricing SHOWIF isOpenedUserRepricing(p), openUserRepricing SHOWIF isClosedUserRepricing(p)     

    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpenedRepricing(p)
    PROPERTIES (p) printRepricing FORCE PANEL
    PROPERTIES () toFillQuantityUserRepricingDetailAllUserRepricings FORCE PANEL TODRAW p
    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY indexRepricingDetail, idBarcodeSkuRepricingDetail, nameSkuRepricingDetail, shortNameUOMSkuRepricingDetail,
               nameBatchRepricingDetail, quantityRepricingDetail,

               curPriceRepricingDetail, curSumRepricingDetail,
               curMarkupRepricingDetail, curMarkupSumRepricingDetail,
               numberCurVATRepricingDetail, valueCurVATRepricingDetail, curVATSumRepricingDetail,
               curRetailPriceRepricingDetail, curRetailSumRepricingDetail,

               priceRepricingDetail, sumRepricingDetail,
               markupRepricingDetail, markupSumRepricingDetail,
               numberVATRepricingDetail, valueVATRepricingDetail, VATSumRepricingDetail,
               retailPriceRepricingDetail, retailSumRepricingDetail

    FILTERS repricingRepricingDetail(d) == p
    FILTERS filterDateFromRepricing(p), 
            filterDateToRepricing(p),
            filterStoreRepricing(p)

    DIALOG Repricing OBJECT p
;
@extendFormFilterAccessStock(Repricing, p, repricings, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricings);
DESIGN repricings {
    NEW pane {
        fill = 1;
        type = SPLITV;
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterRepricingDateFrom());
                MOVE PROPERTY(filterRepricingDateTo());
                MOVE PROPERTY(nameFilterRepricingStore());
                
            }
            MOVE p.box {
                fill = 1;
            }
        } 

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE p.print;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
                NEW fill {
                    caption = 'Обновление';
                    MOVE PROPERTY(toFillQuantityUserRepricingDetailAllUserRepricings()); 
                }
            }
        }
    }
    MOVE functions.box;
}
@extendFormEditable(repricings);
@defineFilterIsOpened (repricing, repricings, p);

EXTEND FORM repricings
    PROPERTIES(p) READONLY nameOperationRepricing BEFORE countRepricingDetailRepricing(p)
;

NAVIGATOR {
    pricingNavigator {
        ADD repricings;
        ADD operations;
    }
}

// ---------------------------- Создание PriceList ----------------------------------- //

changeSupplierPriceOperation 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) changeSupplierPriceOperation
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(changeSupplierPriceOperation(o));
    }
} 

changeSupplierPriceRepricing 'Проводить по регистру изменение цены поставщика' = ABSTRACT BOOLEAN (Repricing) PERSISTENT;
changeSupplierPriceUserRepricing 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (UserRepricing) IN documentPrm;
changeSupplierPriceRepricing(r) += changeSupplierPriceUserRepricing(r);

changeSupplierPriceRepricingDetail 'Проводить по регистру изменение цены поставщика' = changeSupplierPriceRepricing(repricingRepricingDetail(d)) PERSISTENT;
changeSupplierPriceUserRepricingDetail 'Проводить по регистру изменение цены поставщика' = changeSupplierPriceUserRepricing(userRepricingUserRepricingDetail(d)) PERSISTENT;

@deriveDocumentOperationProperty(UserRepricing, changeSupplierPrice);

showChangeSupplierPriceUserRepricing (r) = r IS UserRepricing AND NOT skipChangeLedgerUserRepricing(r);
EXTEND FORM userRepricing
    PROPERTIES (p) changeSupplierPriceUserRepricing SHOWIF showChangeSupplierPriceUserRepricing(p) AFTER skipChangeLedgerUserRepricing(p)
; 

EXTEND CLASS RepricingDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeRepricingDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedRepricingDetail(ledger);
skipPriceListLedger(ledger) += skipChangeLedgerRepricingDetail(ledger);

skuPriceListLedger (ledger) += skuRepricingDetail(ledger);
inPriceListLedgerBatch (ledger, batch) += batchRepricingDetail(ledger) == batch; 

descriptionPriceListLedger (ledger) += descriptionRepricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN priceRepricingDetail(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN changeSupplierPriceRepricingDetail(ledger);
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN priceRepricingDetail(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType AND changeSupplierPriceRepricingDetail(ledger) THEN priceRepricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN retailPriceRepricingDetail(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN retailPriceRepricingDetail(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPriceRepricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN retailPriceRepricingDetail(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN retailPriceRepricingDetail(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN retailPriceRepricingDetail(ledger);

inPriceListLedgerStock (ledger, stock) += departmentStoreRepricingDetail(ledger) == stock;

editPriceListLedger(d) += ACTION editRepricingDetail(d);