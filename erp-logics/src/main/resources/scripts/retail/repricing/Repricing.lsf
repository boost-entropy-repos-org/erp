MODULE Repricing;

REQUIRE RepricingCommittee, Store, Pricing, StockDocumentSkuLedger, PriceListCalc, RepricingOperation, PriceListLedger, 
        PriceListStore;

NAMESPACE Repricing;

//----------------------------------------------- Переоценка (розница) ---------------------------------------------------//

CLASS ABSTRACT Repricing 'Акт переоценки' : Document;
CLASS ABSTRACT RepricingDetail 'Строка акта переоценки': InLIFOSkuLedger, DocumentDetail;

CLASS UserRepricing 'Акт переоценки (польз.)' : Repricing;
CLASS UserRepricingDetail 'Строка акта переоценки (польз.)' : RepricingDetail;

@defineDocumentInterface(repricing);
@deriveDocumentHeaderTimePrefix(UserRepricing, );

@defineDocumentInterfaceTimePrefix(repricing, before, ' документа (до)');
@deriveDocumentHeaderTimePrefix(UserRepricing, before);

@defineDocumentInterfaceNumber(repricing);
@defineNumeratedDefault(UserRepricing, 'Переоценки', 'ПО');

@defineDocumentInterfaceDataStock(repricing, departmentStore, 'Склад');
@defineDocumentDialogStocks(userRepricing, departmentStore, company, , );
@defineDocumentInterfacePosted(repricing);
@defineDocumentInterfaceClosed(repricing);
@defineDocumentClosedConstraint(UserRepricing);

@defineDocumentInterfaceDescription(repricing, 'Акт переоценки');

@defineDocumentInterfaceCurrency(repricing);
@deriveDocumentCurrency(userRepricing, departmentStore);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (repricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(repricing, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(repricing);

// Округление розничной цены
roundCondition(UserRepricingDetail userRepricingDetail) = roundCondition(departmentStore(userRepricingDetail));

// -- До

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, cur, ' поставщика до');

// Цена от которой будет считаться надбавка
overCurRepricingPrice = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overCurRepricingPrice = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overCurRepricingPrice (UserRepricingDetail detail) += overCurRepricingPrice(detail);

curRepricingPrice (UserRepricingDetail detail) = OVERRIDE curPrice(detail), overCurRepricingPrice(detail) PERSISTENT;
curRepricingPrice (RepricingDetail detail) = OVERRIDE curPrice(detail), overCurRepricingPrice(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, cur, ' до');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, cur, ' до');
@deriveDocumentDetailVAT (userRepricing, cur, beforeDate);
@deriveDocumentDetailValueVAT(userRepricing, cur);

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, curRetail, ' розничная до');

//-- Партии
@showDocumentInterfaceDetailBatch(repricing);
@defineDocumentInterfaceDetailBatch(repricing, batch);

changeBatch(UserRepricingDetail detail) = ACTION {
    FORM dialogBatchStockOut OBJECTS st = departmentStore(detail),
                             t = dateTime(detail),
                             sk = sku(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batch(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batch(detail) <- NULL;
    }
};

replace(Sku s, Batch b) += ACTION { sku(UserRepricingDetail detail) <- s WHERE batch(detail) == b;}

@defineBalancesBatch(repricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(repricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(repricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userRepricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара       

@defineMovementPriceSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

// Автоматическое заполнение цен до
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, supplierPricingPriceListType, cur, sku, departmentStore);
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, retailPricingPriceListType, curRetail, sku, departmentStore);

// Автоматическое проставление надбавок
curMarkup(UserRepricingDetail userRepricingDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curRetailPrice(userRepricingDetail),
    valueCurVAT(userRepricingDetail),
    curRepricingPrice(userRepricingDetail) IF curRepricingPrice(userRepricingDetail)!=0.0)
    WHEN CHANGED(curRetailPrice(userRepricingDetail)) OR
         CHANGED(curVAT(userRepricingDetail)) OR
         CHANGED(curRepricingPrice(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur);

// -- После

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, , ' поставщика после');

price(UserRepricingDetail d) <- curPrice(d) WHEN 
    CHANGED(sku(d)) OR
    CHANGED(departmentStore(d)) OR
    CHANGED(dateTime(d)) OR
    CHANGED(batch(d));

// Цена от которой будет считаться надбавка
overRepricingPrice = ABSTRACT NUMERIC[14,2] (RepricingDetail) PERSISTENT;
overRepricingPrice = ABSTRACT NUMERIC[14,2] (UserRepricingDetail) PERSISTENT;
overRepricingPrice (UserRepricingDetail detail) += overRepricingPrice(detail);

repricingPrice (UserRepricingDetail detail) = OVERRIDE price(detail), overRepricingPrice(detail) PERSISTENT;
repricingPrice (RepricingDetail detail) = OVERRIDE price(detail), overRepricingPrice(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, , ' после');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, , ' после');
@deriveDocumentDetailVAT(userRepricing, );
@deriveDocumentDetailValueVAT(userRepricing, );

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, retail, ' розничная после');

// Автоматическое проставление надбавок
markup(UserRepricingDetail userRepricingDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPrice(userRepricingDetail),
    valueVAT(userRepricingDetail),
    repricingPrice(userRepricingDetail) IF repricingPrice(userRepricingDetail)!=0.0)
    WHEN CHANGED(retailPrice(userRepricingDetail)) OR
         CHANGED (VAT(userRepricingDetail)) OR
         CHANGED(repricingPrice(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, retail, repricing, , );
@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , );

// ---- Суммы по строкам ---- //

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, sum, , cur, ' изменения поставщика ');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, markupSum, , cur, ' изменения надбавки');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, VATSum, , cur, ' изменения НДС');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, retailSum, , cur, ' изменения розничной');

// Расчет сумм обратным счетом
// -- До
@deriveDocumentDetailSumPrefix(userRepricing, curRetail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, cur, curRetail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, cur, curRetail, cur);
@deriveDocumentDetailSumPrefix(userRepricing, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRepricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, , retail);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, , retail, );
@deriveDocumentDetailSumPrefix(userRepricing, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(repricing);
@defineDocumentHeaderSkuQuantity(repricing, sku);
@defineDocumentHeaderSkuQuantity(userRepricing, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (repricing, cur, ' поставщика  до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curMarkup, ' надбавки до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curVAT, ' НДС до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, markup, ' надбавки после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, VAT, ' НДС после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, retail, ' розничная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (repricing, diff, ' изменения поставщика');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffMarkup, ' изменения надбавки');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffVAT, ' изменения НДС');
@defineDocumentInterfaceHeaderSumPrefix (repricing, diffRetail, ' изменения розничной');

// Изменение сумм по товару, таре...
@defineDocumentInterfaceHeaderItemSum(repricing, diffRetail, );                   //-- сумма розничная
@defineDocumentInterfaceHeaderItemSum (repricing, diffMarkup, diffMarkup);        //-- сумма надбавки
@defineDocumentInterfaceHeaderItemSum (repricing, diffVAT, diffVAT);              //-- сумма ндс
@defineDocumentInterfaceHeaderItemSum (repricing, diff, diff);                    //-- сумма поставщика

@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diff, diff, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffMarkup, diffMarkup, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffVAT, diffVAT, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffRetail, diffRetail, , VAT);

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRepricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userRepricing, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Repricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(repricing, changeLedger, 'Не изменять текущие цены');


// ---- Действия по проставлению новых надбавок и цен ------- //

repricingRoundCondition = DATA RoundCondition ();
nameRepricingRoundCondition 'Условие округления розничной цены' ()= name(repricingRoundCondition());

CONSTRAINT defaultCurrency() AND repricingRoundCondition() AND NOT defaultCurrency() == currency(repricingRoundCondition())
    CHECKED BY repricingRoundCondition[] MESSAGE 'Валюта округления должна совпадать с валютой по умолчанию';

EXTEND FORM options
    PROPERTIES() nameRepricingRoundCondition
;

DESIGN options {
    pane {        
        NEW repricings {
            caption = 'Акты переоценки';
            MOVE PROPERTY(nameRepricingRoundCondition());   
        }
    }
}

CLASS ChangePriceType 'Тип изменения цены' {
    markupChange 'Процент торговой надбавки',
    discountChange 'Процент к розничной цене'
}
FORM changePriceTypes 'Типы изменения цен'
    OBJECTS t = ChangePriceType
    PROPERTIES(t) READONLY staticCaption
    DIALOG ChangePriceType OBJECT t
;

changePriceType = DATA ChangePriceType (UserRepricing);
nameChangePriceType 'Тип изменения цены' (UserRepricing userRepricing) = staticCaption(changePriceType(userRepricing)) MINCHARWIDTH 20 PREFCHARWIDTH 20 MAXCHARWIDTH 20;

percent 'Процент' (userRepricing)= DATA NUMERIC[8,3](UserRepricing);

roundCondition = DATA RoundCondition (UserRepricing);
nameRoundCondition 'Условие округления розничной цены' (UserRepricing d)= name(roundCondition(d));

CONSTRAINT currency(UserRepricing r) AND roundCondition(r) AND NOT currency(r) == currency(roundCondition(r))
    CHECKED BY roundCondition[UserRepricing] MESSAGE 'Валюта округления должна совпадать с валютой переоценки';

newDiscountRetailPrice (UserRepricingDetail d) =  round(NUMERIC[14,2]([= X+(X*Y)/100](
    curRetailPrice(d),
    percent(userRepricing(d)))), roundCondition(userRepricing(d)));

newMarkupRetailPrice (UserRepricingDetail d) = round(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
    curRepricingPrice(d),
    percent(userRepricing(d)),
    valueCurVAT(d))), roundCondition(userRepricing(d)));

FORM addPercentUserRepricing 'Изменение цены'
    OBJECTS u=UserRepricing FIXED PANEL
    PROPERTIES (u) nameChangePriceType, percent, nameRoundCondition
;

DESIGN addPercentUserRepricing {
    u.panel.props {
        fill = 1;
        type = CONTAINERV;
        PROPERTY (nameChangePriceType(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип';
            font = 'bold 28';
            panelCaptionAbove = TRUE;
        }
        PROPERTY (percent(u)) {
            alignment = STRETCH;
            caption = 'Введите процент';
            font = 'bold 64';
            panelCaptionAbove = TRUE;
        }
        PROPERTY (nameRoundCondition(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип округления';
            font = 'bold 28';
            panelCaptionAbove = TRUE;
        }        
    }
}

overChangePriceUser = ACTION ABSTRACT LIST (RepricingDetail);

changePrice 'Изменить цену' (UserRepricing repricing) = ACTION {
        roundCondition(repricing) <- repricingRoundCondition() IF currency(repricing) == currency(repricingRoundCondition());
        FORM addPercentUserRepricing OBJECTS u = repricing MODAL;
        IF formResult() == FormResult.ok AND changePriceType(repricing) AND percent(repricing) THEN {
            FOR userRepricing(UserRepricingDetail d) == repricing DO {
                price(d) <- curPrice(d);
                overChangePriceUser(d);
                VAT(d) <- curVAT(d);
                valueVAT(d) <- valueCurVAT(d);
                IF changePriceType(repricing) == ChangePriceType.markupChange THEN {
                    retailPrice(d) <- newMarkupRetailPrice(d);
                } ELSE {
                    IF changePriceType(repricing)== ChangePriceType.discountChange THEN {
                        retailPrice(d) <- newDiscountRetailPrice(d);
                    }
                }
                markup(d) <- calcMarkup(d) WHERE calcMarkup(d);
            }
        }
} TOOLBAR;

overRecalculatePrice = ACTION ABSTRACT LIST (UserRepricingDetail);
overConfirmRecalculatePrice = ACTION ABSTRACT LIST (UserRepricingDetail);

recalculatePrice 'Пересчитать цены (до)' (UserRepricing repricing) = ACTION {
    CONFIRM 'Может, Вы, хотите пересчитать и цены (после)?';
    
    FOR userRepricing(UserRepricingDetail d) == repricing DO {
        curPrice(d) <- IF batch(d)                                          
                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d));
                                                           
//        curVATUserRepricingDetail(d) <- curVATUserRepricingDetail(d);
//        valueCurVATUserRepricingDetail(d) <- valueCurVATUserRepricingDetail(d);
        
        curRetailPrice(d) <- IF batch(d)                
                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.retailPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.retailPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d));
                            
                            
        overRecalculatePrice(d);
    }    
    IF (confirmed()) THEN {
        FOR userRepricing(UserRepricingDetail d) == repricing DO {
            price(d) <- curPrice(d);
            overConfirmRecalculatePrice(d);        
        }

        
    }      


        
} TOOLBAR;
//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //
nameStore 'Магазин' (Repricing repricing) = nameStore(departmentStore(repricing));

FORM repricing 'Акт переоценки (печать)'

    OBJECTS p = Repricing FIXED PANEL
    PROPERTIES (p)  SELECTOR isPosted

    PROPERTIES (p) number, series, date, time, nameStore,
               nameDepartmentStore, countRepricingDetail, quantityRepricingDetail, nameLegalEntityStock,
               curSumRepricingDetail, curMarkupSumRepricingDetail, curVATSumRepricingDetail,
               curRetailSumRepricingDetail,
               sumRepricingDetail, markupSumRepricingDetail, VATSumRepricingDetail,
               retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail,
               note, numberDisposal, repricingCommittee, nameRepricingCommittee,
               nameChairman, shortNameChairman, namePositionChairman, nameEmployeeCommittee,
               shortNameEmployeeCommittee


    OBJECTS d = RepricingDetail
    PROPERTIES (d)  index, idBarcodeSku, nameSku, shortNameUOMSku, quantity,
               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,
               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum,
               diffSum, diffMarkupSum, diffVATSum,
               diffRetailSum

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   name[Contact], namePosition, shortName

    FILTERS    repricing(d) == p,
               inCommittee(p, e),
               (diffSum(d) AND diffSum(d)!=0.0) OR
               (diffMarkupSum(d) AND diffMarkupSum(d)!=0.0) OR
               (diffVATSum(d) AND diffVATSum(d)!=0.0) OR
               (diffRetailSum(d) AND diffRetailSum(d)!=0.0)

;

print 'Акт переоценки' (Repricing repricing) = ACTION FORM repricing OBJECTS p = repricing PRINT  IMAGE 'print.png' IN print;
printAuto 'Акт переоценки (авто)' (Repricing repricing) = ACTION FORM repricing OBJECTS p = repricing PRINT AUTO IMAGE 'print.png' IN print;
//----------------------------------------------- Операции ------------------------+----------------------------//

@defineDocumentInterfaceOperation (repricing, Repricing, );

@defineDocumentOperationConstraint(repricing, 'акт переоценки', Repricing);

@defineDocumentOperationRolePrefix(userRepricing, );

toFillQuantityUserRepricingDetail 'Записать в кол-во остатки'(UserRepricing repricing) = ACTION {
    quantity(UserRepricingDetail d) <- IF batch(d) THEN balanceB(batch(d),   
                                                                            departmentStore(d), 
                                                                            dateTime(d)) 
                                                                     ELSE balanceB(sku(d), 
                                                                            departmentStore(d), 
                                                                            dateTime(d))                                                                      
                                                                     WHERE userRepricing(d) == repricing;    
}

toFillQuantityUserRepricingDetailAllUserRepricings 'Записать в кол-во остатки (для всех)'() = ACTION NEWSESSION {
    FOR UserRepricing r IS UserRepricing AND balance(operation(r)) AND NOT isClosed(r) DO {
        toFillQuantityUserRepricingDetail(r);    
    }
    apply();
}

allowRecalculatePrice (UserRepricing p) = NOT denyRecalculatePrice(operation(p));

@implementDocumentPrefix(repricing, retail, );
@implementDocumentBatch(repricing);

// --------------------------- Формы --------------------------------- //
edit 'Редактировать' = ACTION ABSTRACT LIST (Repricing) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editSku 'Редактировать SKU' (UserRepricingDetail d) = ACTION edit(sku(d));

FORM userRepricing 'Акт переоценки'
    OBJECTS p=UserRepricing FIXED PANEL
    PROPERTIES (p) isPosted, nameNumerator, number, series,
                   date, time, beforeDate, nameDepartmentStore ON CHANGE changeDepartmentStoreCompany(p),
                   diffSumUserRepricingDetail, diffMarkupSumUserRepricingDetail, diffVATSumUserRepricingDetail,
                   diffRetailSumUserRepricingDetail,
                   note, numberDisposal ON CHANGE changeNumberDisposal(p), nameRepricingCommittee, skipChangeLedger

    OBJECTS d=UserRepricingDetail
    PROPERTIES (d) index
    PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) nameBatch ON CHANGE changeBatch(d), quantity,

                   curPrice, curSum,                    
                   curMarkup ON CHANGE changeCurMarkup(d), curMarkupSum,
                   numberCurVAT, valueCurVAT, curVATSum,
                   curRetailPrice ON CHANGE changeCurRetailPrice(d), curRetailSum,
                   
                   price, sum,                    
                   markup ON CHANGE changeMarkup(d), markupSum,
                   numberVAT, valueVAT, VATSum,
                   retailPrice ON CHANGE changeRetailPrice(d), retailSum, ADDOBJ, DELETESESSION

    PROPERTIES TODRAW d changePrice(p), recalculatePrice(p) SHOWIF allowRecalculatePrice(p)

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserRepricingDetail,
                           addDetailInputBarcodeUserRepricingDetail, deleteUserRepricingDetail

    FILTERS userRepricing(d)==p

    EVENTS
        ON OK prePost(p)

    EDIT UserRepricing OBJECT p
;

DESIGN userRepricing {
    main {
        preferredSize = (1024, 768);

        NEW header {
            type = CONTAINERH;

            NEW headerColumn1 {
                fill = 1;
//                ADD p.documentHeader {
//                    type = CONTAINERH;
//                    ADD PROPERTY(isPostedUserRepricing) { preferredCharWidth = 10; };
//                    ADD PROPERTY(nameDepartmentStoreUserRepricing);
//                    ADD PROPERTY(nameNumeratorUserRepricing);
//                    ADD PROPERTY(numberUserRepricing);
//                    ADD PROPERTY(seriesUserRepricing);
//                    ADD PROPERTY(dateUserRepricing);
//                    ADD PROPERTY(timeUserRepricing);
//                }
                MOVE p.documentHeader {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(p));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameDepartmentStore(p));
                        MOVE PROPERTY(nameNumerator(p));
                        MOVE PROPERTY(number(p));
                        MOVE PROPERTY(series(p));
                        MOVE PROPERTY(date(p));
                        MOVE PROPERTY(time(p));
                    }    
                }                
                
                MOVE p.documentPrm {
                    type = COLUMNS;
                    columns = 2;
                    MOVE PROPERTY(beforeDate(p));
                    MOVE PROPERTY(note(p));
                    MOVE PROPERTY(numberDisposal(p));
                    MOVE PROPERTY(nameRepricingCommittee(p));
                    MOVE PROPERTY(skipChangeLedger(p));
                }
            }

            MOVE p.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            type = TABBED;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        PROPERTY(price(d)) { background = #FFFFCC; }
        PROPERTY(sum(d)) { background = #FFFFCC; }
        PROPERTY(markup(d)) { background = #FFFFCC; }
        PROPERTY(markupSum(d)) { background = #FFFFCC; }
        PROPERTY(numberVAT(d)) { background = #FFFFCC; }
        PROPERTY(valueVAT(d)) { background = #FFFFCC; }
        PROPERTY(VATSum(d)) { background = #FFFFCC; }
        PROPERTY(retailPrice(d)) { background = #FFFFCC; }
        PROPERTY(retailSum(d)) { background = #FFFFCC; }
        
        PROPERTY(diffSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
        PROPERTY(diffMarkupSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
        PROPERTY(diffVATSumUserRepricingDetail(p)) { preferredCharWidth = 13;}
        PROPERTY(diffRetailSumUserRepricingDetail(p)) { preferredCharWidth = 13;}

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

EXTEND FORM userRepricing
    PROPERTIES(p) nameOperation
    PROPERTIES(p) TODRAW d toFillQuantityUserRepricingDetail FORCE PANEL TOOLBAR
;
DESIGN userRepricing{
    first {
        MOVE PROPERTY (nameOperation(p) ) {minimumCharWidth = 30; preferredCharWidth = 40;}
    }
}

edit 'Редактировать' = ACTION ABSTRACT LIST  (RepricingDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserRepricingDetail d) = ACTION NEWSESSION {
    FORM userRepricing OBJECTS p = userRepricing(d), d = d MANAGESESSION DOCKEDMODAL;
}

edit(UserRepricingDetail d) += ACTION edit(d);    
edit[SkuLedger](RepricingDetail ledger) += ACTION edit(ledger);

//-- SKU
@defineDocumentSkuPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore, );
@extendFormDocumentSku(userRepricing, userRepricing, p);

@defineDocumentBatchPriceListTypeSystemLedger(userRepricing, accountPriceListType, departmentStore, );
@extendFormDocumentBatch(userRepricing, userRepricing, p);

EXTEND FORM userRepricing

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, p) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserRepricingDetail(ks, p) 'F9'
;


isStockRepricings 'Разрешить ввод акта переоценки без склада ' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isStockRepricings
;

DESIGN options {
    pane {        
        repricings {
            MOVE PROPERTY(isStockRepricings());   
        }
    }
}

CONSTRAINT isPosted(UserRepricing i) AND NOT isStockRepricings() AND NOT  departmentStore(i) 
    MESSAGE 'Для акта переоценки должен быть задан склад'; 

// Проведение по товарному отчету
@implementStockDocumentLedgerInc(Repricing, departmentStore);
type(Repricing l) += 'Переоценка' IF l IS Repricing;
sumItem (Repricing ledger) += sumItemRepricingDetail(ledger);
sumContainer (Repricing ledger) += sumContainerRepricingDetail(ledger);

operation[StockDocumentLedger] (Repricing ledger) += operation(ledger);
edit[StockDocumentLedger](Repricing l) += ACTION edit(l);
close[StockDocumentLedger](Repricing l) += ACTION close(l);

// Проведение по регистру
@implementSkuLedger(repricingDetail, sku, departmentStore);
sum[InSkuLedger] (RepricingDetail ledger) += diffRetailSum(ledger);
stockDocumentLedger(RepricingDetail ledger) += repricing(ledger); 

batch[SkuLedger](RepricingDetail ledger) += batch(ledger);

addUserRepricing 'Добавить' = ACTION ADDFORM UserRepricing;
edit 'Редактировать' (userRepricing) = ACTION EDITFORM UserRepricing;
edit(UserRepricing p) += ACTION edit(p);

isUserOpened(UserRepricing p)=  isOpened[Repricing](p) AND is(p);

filterRepricingDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (Repricing i) = date(i) >= filterRepricingDateFrom() OR (i IS Repricing AND NOT filterRepricingDateFrom());      

filterRepricingDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (Repricing i) = date(i) <= filterRepricingDateTo() OR (i IS Repricing AND NOT filterRepricingDateTo());      

filterRepricingStore = DATA LOCAL Store ();
nameFilterRepricingStore 'Магазин' = name(filterRepricingStore()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterStore (Repricing i) = store(departmentStore(i)) == filterRepricingStore() OR (i IS Repricing AND NOT filterRepricingStore());      

overCopy = ACTION ABSTRACT LIST (Repricing, UserRepricing);
overCopy = ACTION ABSTRACT LIST (UserRepricingDetail, RepricingDetail);

copy 'Копировать'(Repricing repricing) = ACTION NEWSESSION {
    FOR ADDOBJ p = UserRepricing DO {
        departmentStore(p) <- departmentStore(repricing);
        currency(p) <- currency(repricing);
        operation(p) <- operation(repricing);
        note(p) <- note(repricing);
        numberDisposal(p) <- numberDisposal(repricing);
        
        EXEC overCopy(repricing, p);

        FOR repricing(RepricingDetail repricingDetail) == repricing DO {
            FOR ADDOBJ d=UserRepricingDetail DO {
                userRepricing(d) <- p;
                sku(d) <- sku(repricingDetail);
                quantity(d) <- quantity(repricingDetail);                
                
                batch(d) <- batch(repricingDetail);
                
                overCopy(d, repricingDetail);
            }
        }
        FORM userRepricing OBJECTS p = p MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
} TOOLBAR;

FORM repricings 'Акты переоценки' 
    PROPERTIES() filterRepricingDateFrom, filterRepricingDateTo, nameFilterRepricingStore

    OBJECTS p = Repricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, beforeDate,
               nameDepartmentStore
    PROPERTIES (p) READONLY countRepricingDetail, diffSumRepricingDetail,
                   diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
                   diffRetailSumRepricingDetail
    PROPERTIES (p) READONLYIF isReadonly() numberDisposal, skipChangeLedger,
                   note

    PROPERTIES (p) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES ()  addUserRepricing TODRAW p
    PROPERTIES (p) edit SHOWIF isOpened(p)
    PROPERTIES(p)  close[UserRepricing] SHOWIF isOpened[UserRepricing](p), open SHOWIF isClosed[UserRepricing](p)     
    PROPERTIES copy(p)
    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpened(p)
    PROPERTIES (p) print FORCE PANEL
    PROPERTIES () toFillQuantityUserRepricingDetailAllUserRepricings FORCE PANEL TODRAW p
    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
               nameBatch, quantity,

               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,

               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum

    FILTERS repricing(d) == p
    FILTERS filterDateFrom(p), 
            filterDateTo(p),
            filterStore(p)

    DIALOG Repricing OBJECT p
;
@extendFormFilterAccessStock(Repricing, p, repricings, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricings);
DESIGN repricings {
    NEW pane {
        fill = 1;
        type = SPLITV;
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterRepricingDateFrom());
                MOVE PROPERTY(filterRepricingDateTo());
                MOVE PROPERTY(nameFilterRepricingStore());
                
            }
            MOVE p.box {
                fill = 1;
            }
        } 

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE p.print;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY (copy(p)) {caption = 'Акт переоценки';}
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
                NEW fill {
                    caption = 'Обновление';
                    MOVE PROPERTY(toFillQuantityUserRepricingDetailAllUserRepricings()); 
                }
            }
        }
    }
    MOVE functions.box;
}
@extendFormEditable(repricings);
@defineFilterIsOpened (repricing, repricings, p);

EXTEND FORM repricings
    PROPERTIES(p) READONLY nameOperation BEFORE countRepricingDetail(p)
;

NAVIGATOR {
    pricingNavigator {
        ADD repricings;
        ADD operations;
    }
}

// ---------------------------- Создание PriceList ----------------------------------- //

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) changeSupplierPrice
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(changeSupplierPrice(o));
    }
} 

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = ABSTRACT BOOLEAN (Repricing) PERSISTENT;
changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (UserRepricing) IN documentPrm;
changeSupplierPrice(UserRepricing r) += changeSupplierPrice(r);

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = changeSupplierPrice(repricing(RepricingDetail d)) PERSISTENT;
changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = changeSupplierPrice(userRepricing(UserRepricingDetail d)) PERSISTENT;

@deriveDocumentOperationProperty(UserRepricing, changeSupplierPrice);

showChangeSupplierPrice (UserRepricing r) = r IS UserRepricing AND NOT skipChangeLedger(r);
EXTEND FORM userRepricing
    PROPERTIES (p) changeSupplierPrice SHOWIF showChangeSupplierPrice(p) AFTER skipChangeLedger(p)
; 

EXTEND CLASS RepricingDetail : PriceListLedger;

fromDateTime (RepricingDetail ledger) += dateTime(ledger);

isPosted[PriceListLedger](RepricingDetail ledger) += isPosted(ledger);
skip[PriceListLedger](RepricingDetail ledger) += skipChangeLedger(ledger);

sku[PriceListLedger] (RepricingDetail ledger) += sku(ledger);
in (RepricingDetail ledger, Batch batch) += batch(ledger) == batch; 

description[PriceListLedger] (RepricingDetail ledger) += description(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN changeSupplierPrice(ledger);
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType AND changeSupplierPrice(ledger) THEN price(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPrice(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN retailPrice(ledger);

in (RepricingDetail ledger, DepartmentStore stock) += departmentStore(ledger) == stock;

edit[PriceListLedger](RepricingDetail d) += ACTION edit(d);

@defineDocumentLogForm(repricings, p);