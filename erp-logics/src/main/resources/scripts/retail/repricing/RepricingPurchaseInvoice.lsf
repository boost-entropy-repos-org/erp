MODULE RepricingPurchaseInvoice;

REQUIRE PricingPurchase, Repricing, ZReport;

PRIORITY Purchase;

NAMESPACE Repricing;

//------------------- Дооценка с учетом проданного количества между приходом и закачкой прайса в оборудование -----------------------//  
   
FORM extraValuation 'Дооценка'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES (d) SELECTOR nameDepartmentStore

    OBJECTS tf=DATETIME FIXED PANEL
    PROPERTIES(tf) OBJVALUE
    
    OBJECTS o=Repricing.Operation FIXED PANEL
    PROPERTIES(o) SELECTOR Repricing.nameOperation    

;
DESIGN extraValuation FROM DEFAULT {
    main {
        type = CONTAINERV;

        NEW topContainer {
            type = CONTAINERH;
            ADD d.box { caption = 'Выберите отдел магазина';}
            ADD tf.box { caption = 'Дата/время с'; }
            ADD o.box { caption = 'Выберите операцию переоценки'; }
        }
        ADD functions.box;
    }
}     
       
repricingInvoice = DATA Repricing (Invoice);
repricingInvoiceDetail (d) = repricingInvoice(invoiceInvoiceDetail(d));

prevRetailPricingPriceBInvoiceDetail 'Цена розничная до' (detail) = prevRetailPricingPriceBSkuStockDateTime(skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), dateTimeInvoiceDetail(detail));

calcQuantitySoldSkuStockPriceDateTime 'Кол-во продано по старой цене' (sku, stock, price, dateTime) = GROUP SUM 
    signedQuantityReceiptDetail(d) IF dateTimeReceiptDetail(d) >= (dateTime AS DATETIME) AND isPostedReceiptDetail(d)
        BY skuReceiptDetail(d), departmentStoreReceiptDetail(d), priceReceiptDetail(d), dateTime; 
        
toRepricingQuantitySkuStockPriceDateTime 'Кол-во к дооценке' (sku, stock, price, dateTime) = prevBalanceBSkuStockDateTime (sku, stock, dateTime) (-) calcQuantitySoldSkuStockPriceDateTime(sku, stock, price, dateTime);         
toRepricingQuantityInvoiceDetail 'Кол-во к дооценке' (detail) = toRepricingQuantitySkuStockPriceDateTime(skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), prevRetailPricingPriceBInvoiceDetail(detail), shipmentDateTimeInvoiceDetail(detail));
               
filterToRepricingInvoiceStockDateTime 'Фильтр' (invoice, department, timeFrom)= 
    customerStockInvoice(invoice) == department AND         
    shipmentDateTimeInvoice(invoice) >= timeFrom AND NOT
    costLedgerDepartmentStore(department) AND
    isPostedInvoice(invoice) AND NOT
    repricingInvoice(invoice)
;                  
                  
overExtraValuation = ABSTRACT ACTION LIST (RepricingDetail, InvoiceDetail);  
overExtraRevertValuation = ABSTRACT ACTION LIST (RepricingDetail, InvoiceDetail);

skipExtraValuationSkuStock = ABSTRACT BOOLEAN (Sku, Stock);                
                  
createExtraValuationStockTimeOperation 'Создать дооценку' = ACTION (department, timeFrom, operation) {
    
    LOCAL inInvoice =  BOOLEAN(Invoice);
    inInvoice(invoice) <- filterToRepricingInvoiceStockDateTime(invoice, department, timeFrom);   

    FOR ADDOBJ r = UserRepricing DO {
        departmentStoreUserRepricing(r) <-  department;
        operationUserRepricing(r) <- operation;
        skipChangeLedgerUserRepricing(r) <- TRUE;

        // дооценка в прямую сторону
        FOR (prevRetailPricingPriceBInvoiceDetail(detail) != retailPriceInvoiceDetail(detail) AND
            toRepricingQuantityInvoiceDetail(detail) > 0 AND isStockSkuInvoiceDetail(detail) AND inInvoice(invoiceInvoiceDetail(detail))) AND
            NOT skipExtraValuationSkuStock(skuInvoiceDetail(detail), department)              
            ADDOBJ rd = UserRepricingDetail DO {
                userRepricingUserRepricingDetail(rd) <- r;
                skuUserRepricingDetail(rd) <- skuInvoiceDetail(detail);
                quantityUserRepricingDetail(rd) <- toRepricingQuantityInvoiceDetail(detail);

                curPriceUserRepricingDetail(rd) <- prevSupplierPricingPriceBSkuStockDateTime(skuInvoiceDetail(detail), department, dateTimeInvoiceDetail(detail));
                curRetailPriceUserRepricingDetail(rd) <- prevRetailPricingPriceBInvoiceDetail(detail);

                priceUserRepricingDetail(rd) <- priceInvoiceDetail(detail);
                retailPriceUserRepricingDetail(rd) <- retailPriceInvoiceDetail(detail);                          

                overExtraValuation(rd, detail);
        }

        // дооценка в обратную сторону
        FOR (prevRetailPricingPriceBInvoiceDetail(detail) != retailPriceInvoiceDetail(detail) AND
            toRepricingQuantityInvoiceDetail(detail) < 0 AND isStockSkuInvoiceDetail(detail) AND inInvoice(invoiceInvoiceDetail(detail))) AND 
            NOT skipExtraValuationSkuStock(skuInvoiceDetail(detail), department)               
            ADDOBJ rd = UserRepricingDetail DO {
                userRepricingUserRepricingDetail(rd) <- r;
                skuUserRepricingDetail(rd) <- skuInvoiceDetail(detail);
                quantityUserRepricingDetail(rd) <- -toRepricingQuantityInvoiceDetail(detail);

                curPriceUserRepricingDetail(rd) <- priceInvoiceDetail(detail);
                curRetailPriceUserRepricingDetail(rd) <- retailPriceInvoiceDetail(detail);

                priceUserRepricingDetail(rd) <- priceInvoiceDetail(detail);
                retailPriceUserRepricingDetail(rd) <- prevRetailPricingPriceBInvoiceDetail(detail);                          

                overExtraRevertValuation(rd, detail);
        }
        repricingInvoice(invoice) <- r WHERE inInvoice(invoice);

        FORM userRepricing  OBJECTS p = r MANAGESESSION DOCKEDMODAL;               
    }  
}                   
                                                    
createExtraValuation 'Создать дооценку' = ACTION () NEWSESSION {
    FORM extraValuation  MODAL;
    IF formResult() == FormResult.ok THEN {        
        createExtraValuationStockTimeOperation(chosenObject('d'), chosenDateTime('tf'), chosenObject('o'));                               
    }
} TOOLBAR ;

EXTEND FORM repricings
    PROPERTIES ()  createExtraValuation TODRAW p
;

