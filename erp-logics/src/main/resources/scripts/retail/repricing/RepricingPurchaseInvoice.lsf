MODULE RepricingPurchaseInvoice;

REQUIRE PricingPurchase, Repricing, ZReport;

PRIORITY Purchase;

NAMESPACE Repricing;

//------------------- Дооценка с учетом проданного количества между приходом и закачкой прайса в оборудование -----------------------//  
   
FORM extraValuation 'Дооценка'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES (d) SELECTOR nameDepartmentStore

    OBJECTS tf=DATETIME FIXED PANEL
    PROPERTIES(tf) OBJVALUE
    
    OBJECTS o=Repricing.Operation FIXED PANEL
    PROPERTIES(o) SELECTOR Repricing.nameOperation    

;
DESIGN extraValuation {
    main {
        type = CONTAINERV;

        NEW topContainer {
            type = CONTAINERH;
            MOVE d.box { caption = 'Выберите отдел магазина';}
            MOVE tf.box { caption = 'Дата/время с'; }
            MOVE o.box { caption = 'Выберите операцию переоценки'; }
        }
        MOVE functions.box;
    }
}     
       
repricingInvoice = DATA Repricing (Invoice);
repricingInvoiceDetail (d) = repricingInvoice(invoiceInvoiceDetail(d));

prevRetailPricingPriceBInvoiceDetail 'Цена розничная до' (detail) = prevRetailPricingPriceBSkuStockDateTime(skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), dateTimeInvoiceDetail(detail));

calcQuantitySoldSkuStockPriceDateTime 'Кол-во продано по старой цене' (sku, stock, price, dateTime) = GROUP SUM 
    signedQuantityReceiptDetail(d) IF dateTimeReceiptDetail(d) >= (dateTime AS DATETIME) AND isPostedReceiptDetail(d)
        BY skuReceiptDetail(d), departmentStoreReceiptDetail(d), priceReceiptDetail(d), dateTime; 
        
toRepricingQuantitySkuStockPriceDateTime 'Кол-во к дооценке' (sku, stock, price, dateTime) = prevBalanceBSkuStockDateTime (sku, stock, dateTime) (-) calcQuantitySoldSkuStockPriceDateTime(sku, stock, price, dateTime);         
toRepricingQuantityInvoiceDetail 'Кол-во к дооценке' (detail) = toRepricingQuantitySkuStockPriceDateTime(skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), prevRetailPricingPriceBInvoiceDetail(detail), shipmentDateTimeInvoiceDetail(detail));
               
filterToRepricingInvoiceStockDateTime 'Фильтр' (invoice, department, timeFrom)= 
    customerStockInvoice(invoice) == department AND         
    shipmentDateTimeInvoice(invoice) >= timeFrom AND NOT
    costLedgerDepartmentStore(department) AND
    isPostedInvoice(invoice) AND NOT
    repricingInvoice(invoice)
;                  
                  
overExtraValuation = ABSTRACT ACTION LIST (RepricingDetail, InvoiceDetail);  
overExtraRevertValuation = ABSTRACT ACTION LIST (RepricingDetail, InvoiceDetail);

skipExtraValuationSkuStock = ABSTRACT BOOLEAN (Sku, Stock);        
        
maxInvoiceDetailSkuInvoice = GROUP LAST detail 
    BY skuInvoiceDetail(detail), invoiceInvoiceDetail(detail) 
    ORDER quantityInvoiceDetailSkuInvoice(skuInvoiceDetail(detail), invoiceInvoiceDetail(detail)), detail;
       
repricingForm =  DATA LOCAL UserRepricing();                      

skipNegativeepricing 'Не использовать обратную дооценку' = DATA BOOLEAN ();  

EXTEND FORM options
    PROPERTIES () skipNegativeepricing
;

DESIGN options {
    repricings {
        MOVE PROPERTY (skipNegativeepricing());            
    }
}  

createExtraValuationStockTimeOperationNotForm 'Создать дооценку' = ACTION (department, timeFrom, operation) {   
    IF [ = GROUP SUM 1 IF filterToRepricingInvoiceStockDateTime (invoice, department, timeFrom) BY department, timeFrom] (department, timeFrom) THEN {
    
        LOCAL positiveInvoiceDetail =  BOOLEAN (InvoiceDetail);
        positiveInvoiceDetail(detail) <- TRUE WHERE filterToRepricingInvoiceStockDateTime(invoiceInvoiceDetail(detail), department, timeFrom);
        positiveInvoiceDetail(detail) <- prevRetailPricingPriceBInvoiceDetail(detail) != retailPriceInvoiceDetail(detail) WHERE positiveInvoiceDetail(detail);
        positiveInvoiceDetail(detail) <- toRepricingQuantityInvoiceDetail(detail) > 0 AND isStockSkuInvoiceDetail(detail) WHERE positiveInvoiceDetail(detail);
        positiveInvoiceDetail(detail) <- maxInvoiceDetailSkuInvoice(skuInvoiceDetail(detail), invoiceInvoiceDetail(detail))==detail WHERE positiveInvoiceDetail(detail);
        positiveInvoiceDetail(detail) <- NULL WHERE skipExtraValuationSkuStock(skuInvoiceDetail(detail), department) AND positiveInvoiceDetail(detail);                     
        positiveInvoiceDetail(detail) <- NULL WHERE positiveInvoiceDetail(detail) AND NOT priceInvoiceDetail(detail);                     
    
        LOCAL negativeInvoiceDetail =  BOOLEAN (InvoiceDetail);    
        negativeInvoiceDetail(detail) <- TRUE WHERE filterToRepricingInvoiceStockDateTime(invoiceInvoiceDetail(detail), department, timeFrom);
        negativeInvoiceDetail(detail) <- prevRetailPricingPriceBInvoiceDetail(detail) != retailPriceInvoiceDetail(detail) WHERE negativeInvoiceDetail(detail);
        negativeInvoiceDetail(detail) <- toRepricingQuantityInvoiceDetail(detail) < 0 AND isStockSkuInvoiceDetail(detail) WHERE negativeInvoiceDetail(detail);
        negativeInvoiceDetail(detail) <- maxInvoiceDetailSkuInvoice(skuInvoiceDetail(detail), invoiceInvoiceDetail(detail))==detail WHERE negativeInvoiceDetail(detail);
        negativeInvoiceDetail(detail) <- NULL WHERE skipExtraValuationSkuStock(skuInvoiceDetail(detail), department) AND negativeInvoiceDetail(detail);         
        negativeInvoiceDetail(detail) <- NULL WHERE negativeInvoiceDetail(detail) AND NOT priceInvoiceDetail(detail); 
        negativeInvoiceDetail(detail) <- NULL WHERE negativeInvoiceDetail(detail) AND skipNegativeepricing();                    
                
        IF [ = GROUP SUM 1 IF positiveInvoiceDetail(detail) OR negativeInvoiceDetail(detail) ]() THEN {
            FOR ADDOBJ r = UserRepricing DO {
                departmentStoreUserRepricing(r) <-  department;
                operationUserRepricing(r) <- operation;
                skipChangeLedgerUserRepricing(r) <- TRUE;
                isPostedUserRepricing(r) <- TRUE;
        
                // дооценка в прямую сторону
                FOR positiveInvoiceDetail(detail) ADDOBJ rd = UserRepricingDetail DO {
                        userRepricingUserRepricingDetail(rd) <- r;
                        skuUserRepricingDetail(rd) <- skuInvoiceDetail(detail);
                        quantityUserRepricingDetail(rd) <- toRepricingQuantityInvoiceDetail(detail);
        
                        curPriceUserRepricingDetail(rd) <- prevSupplierPricingPriceBSkuStockDateTime(skuInvoiceDetail(detail), department, dateTimeInvoiceDetail(detail));
                        curRetailPriceUserRepricingDetail(rd) <- prevRetailPricingPriceBInvoiceDetail(detail);
        
                        priceUserRepricingDetail(rd) <- priceInvoiceDetail(detail);
                        retailPriceUserRepricingDetail(rd) <- retailPriceInvoiceDetail(detail);                          
        
                        overExtraValuation(rd, detail);
                }
        
                // дооценка в обратную сторону
                FOR negativeInvoiceDetail(detail) ADDOBJ rd = UserRepricingDetail DO {
                        userRepricingUserRepricingDetail(rd) <- r;
                        skuUserRepricingDetail(rd) <- skuInvoiceDetail(detail);
                        quantityUserRepricingDetail(rd) <- - toRepricingQuantityInvoiceDetail(detail);
        
                        curPriceUserRepricingDetail(rd) <- priceInvoiceDetail(detail);
                        curRetailPriceUserRepricingDetail(rd) <- retailPriceInvoiceDetail(detail);
        
                        priceUserRepricingDetail(rd) <- priceInvoiceDetail(detail);
                        retailPriceUserRepricingDetail(rd) <- prevRetailPricingPriceBInvoiceDetail(detail);                          
        
                        overExtraRevertValuation(rd, detail);
                }
                repricingInvoice(invoice) <- r WHERE filterToRepricingInvoiceStockDateTime(invoice, department, timeFrom);
                repricingForm() <- r;            
            } 
        }
    }
} 
                  
createExtraValuationStockTimeOperation 'Создать дооценку' = ACTION  (department, timeFrom, operation) NEWSESSION {
    createExtraValuationStockTimeOperationNotForm(department, timeFrom, operation);
    FORM userRepricing  OBJECTS p = repricingForm() MANAGESESSION DOCKEDMODAL;  
    repricingForm() <- NULL;      
}                 
                                                    
createExtraValuation 'Создать дооценку' = ACTION () NEWSESSION {
    FORM extraValuation  MODAL;
    IF formResult() == FormResult.ok THEN {        
        createExtraValuationStockTimeOperation(chosenObject('d'), chosenDateTime('tf'), chosenObject('o'));                               
    }
} TOOLBAR ;

EXTEND FORM repricings
    PROPERTIES ()  createExtraValuation TODRAW p
;

