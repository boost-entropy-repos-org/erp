MODULE RepricingPurchaseInvoice;

REQUIRE PricingPurchase, Repricing, ZReport;

PRIORITY Purchase;

NAMESPACE Repricing;

//------------------- Дооценка с учетом проданного количества между приходом и закачкой прайса в оборудование -----------------------//  
   
FORM extraValuation 'Дооценка'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES (d) SELECTOR name

    OBJECTS tf=DATETIME PANEL
    PROPERTIES(tf) VALUE

    OBJECTS tt=DATETIME PANEL
    PROPERTIES(tt) VALUE
    
    OBJECTS o=Repricing.Operation PANEL
    PROPERTIES(o) SELECTOR name    

;
DESIGN extraValuation {
    main {
        type = CONTAINERV;

        NEW topContainer {
            type = CONTAINERH;
            MOVE d.box { caption = 'Выберите отдел магазина';}
            MOVE tf.box { caption = 'Дата/время с'; }
            MOVE tt.box { caption = 'Дата/время по'; }
            MOVE o.box { caption = 'Выберите операцию переоценки'; }
        }
        MOVE functions.box;
    }
}     
       
repricing = DATA Repricing (Invoice);
repricing (InvoiceDetail d) = repricing(invoice(d));

prevRetailPricingPriceB 'Цена розничная до' (InvoiceDetail detail) = prevRetailPricingPriceB(sku(detail), customerStock(detail), pricingDateTime(detail));

//calcQuantitySold 'Кол-во продано по старой цене' (sku, stock, price, dateTime) = GROUP SUM 
//    signedQuantity(ReceiptDetail d) IF dateTime(d) >= (DATETIME dateTime AS DATETIME) AND isPosted(d)
//        BY sku(d), departmentStore(d), price(d), dateTime; 

calcSkuLedgerAhead 'Кол-во движения по старой цене' (sku, stock, price, fromDateTime) = 
    GROUP SUM quantity(SkuLedger l) IF dateTime(l) >= fromDateTime AND abs(price - (sum(l) / quantity(l))) < 0.01
          BY sku(l), stock(l), price, fromDateTime;
           
calcRepricingAhead 'Кол-во движения по старой цене' (sku, stock, price, fromDateTime) = 
    GROUP SUM quantity(RepricingDetail d) IF dateTime(d) >= fromDateTime 
          BY sku(d), departmentStore(d), curRetailPrice(d), fromDateTime; 

toRepricingQuantity 'Кол-во к дооценке' (Sku sku, Stock stock, NUMERIC[16,4] price, DATETIME dateTime) = prevBalanceB (sku, stock, dateTime) (-) calcSkuLedgerAhead(sku, stock, price, dateTime) (-) calcRepricingAhead(sku, stock, price, dateTime);         
toRepricingQuantity 'Кол-во к дооценке' (InvoiceDetail detail) = toRepricingQuantity(sku(detail), customerStock(detail), prevRetailPricingPriceB(detail), shipmentDateTime(detail));
               
filterToRepricing 'Фильтр' (Invoice invoice, Stock department, DATETIME timeFrom)= 
    customerStock(invoice) == department AND         
    shipmentDateTime(invoice) >= timeFrom AND NOT
    costLedger(department) AND
    isPosted(invoice) AND NOT
    repricing(invoice)
; 
 
//calcQuantitySoldDateTime 'Кол-во продано по старой цене' (sku, stock, price, fromDateTime, toDateTime) = GROUP SUM 
//    signedQuantity(ReceiptDetail d) IF dateTime(d) >= (DATETIME fromDateTime AS DATETIME) AND (dateTime(d) <= (DATETIME toDateTime AS DATETIME)) AND isPosted(d)
//        BY sku(d), departmentStore(d), price(d), fromDateTime, toDateTime; 

calcSkuLedgerAhead 'Кол-во движения по старой цене' (sku, stock, price, fromDateTime, toDateTime) = 
    GROUP SUM quantity(SkuLedger l) IF dateTime(l) >= fromDateTime AND dateTime(l) <= toDateTime AND abs(price - (sum(l) / quantity(l))) < 0.01 AND active(l)
          BY sku(l), stock(l), price, fromDateTime, toDateTime;
           
calcRepricingAhead 'Кол-во движения по старой цене' (sku, stock, price, fromDateTime, toDateTime) = 
    GROUP SUM quantity(RepricingDetail d) IF dateTime(d) >= fromDateTime AND dateTime(d) <= toDateTime AND isPosted(d) 
          BY sku(d), departmentStore(d), curRetailPrice(d), fromDateTime, toDateTime; 

        
toRepricingQuantityDateTime 'Кол-во к дооценке' (Sku sku, Stock stock, NUMERIC[16,4] price, DATETIME fromDateTime, DATETIME toDateTime) = 
    prevBalanceB (sku, stock, fromDateTime) (-) calcSkuLedgerAhead(sku, stock, price, fromDateTime, toDateTime) (-) calcRepricingAhead(sku, stock, price, fromDateTime, toDateTime);
             
toRepricingQuantityTo 'Кол-во к дооценке' (InvoiceDetail detail, DATETIME toDateTime) = toRepricingQuantityDateTime(sku(detail), customerStock(detail), prevRetailPricingPriceB(detail), shipmentDateTime(detail), toDateTime); 
filterToRepricingDate 'Фильтр' (Invoice invoice, Stock department, DATETIME timeFrom, DATETIME timeTo)= 
    customerStock(invoice) == department AND         
    shipmentDateTime(invoice) >= timeFrom AND
    isPosted(invoice) AND
    createShipment(invoice) AND
    shipmentDateTime(invoice) <= timeTo AND NOT
    costLedger(department) AND NOT
    explicitBatchLedger[DepartmentStore](department) AND NOT
    repricing(invoice)
;                
                  
overExtraValuation = ACTION ABSTRACT LIST (RepricingDetail, InvoiceDetail);  
overExtraRevertValuation = ACTION ABSTRACT LIST (RepricingDetail, InvoiceDetail);

skipExtraValuation = ABSTRACT BOOLEAN (Sku, Stock);        
        
maxInvoiceDetail = GROUP LAST InvoiceDetail detail 
    BY sku(detail), invoice(detail) 
    ORDER quantityInvoiceDetail(sku(detail), invoice(detail)), detail;
       
repricingForm =  DATA LOCAL UserRepricing();                      

skipNegativeRepricing 'Не использовать обратную дооценку' = DATA BOOLEAN ();  

EXTEND FORM options
    PROPERTIES () skipNegativeRepricing
;

DESIGN options {
    repricings {
        MOVE PROPERTY (skipNegativeRepricing());            
    }
}  

overPositive = ACTION ABSTRACT LIST (InvoiceDetail); 
overNegative= ACTION ABSTRACT LIST (InvoiceDetail); 

positive =  DATA LOCAL BOOLEAN (InvoiceDetail);
negative =  DATA LOCAL BOOLEAN (InvoiceDetail);    

//keepSupplierPriceInRepricing = ABSTRACT BOOLEAN (InvoiceDetail, DepartmentStore);

toRepricingOperation  = DATA Repricing.Operation ();
nameToRepricingOperation 'Операция для автоматической дооценки' = name(toRepricingOperation());

toRepricingTime 'Время (с) для автоматической дооценки' = DATA TIME ();
toRepricingCountDays 'Количество дней анализа для автоматической дооценки (с)' = DATA INTEGER ();
toRepricingDateTime 'Дата/время документа (с)' () = dateTimeToDateTime(subtract(currentDate(), toRepricingCountDays()), toRepricingTime()); 
minQuantityToRepricing 'Минимальное количество к дооценке' = DATA NUMERIC[14,4] ();

toRepricingTimeTo 'Время (по) для автоматической дооценки' = DATA TIME ();
toRepricingCountDaysTo 'Количество дней анализа для автоматической дооценки (по)' = DATA INTEGER ();
toRepricingDateTimeTo 'Дата/время документа (по)' () = OVERRIDE dateTimeToDateTime(subtract(currentDate(), toRepricingCountDaysTo()), toRepricingTimeTo()), currentDateTime(); 
    
    
@defineGroupDefaultValue(skipRepricing, 'Не дооценивать на приходе', BOOLEAN, skuGroup); 
          
quantityChildWithDataSkipRepricing (skuGroup) = GROUP SUM 1 IF dataSkipRepricing(SkuGroup childSkuGroup) AND isParent(childSkuGroup, SkuGroup skuGroup) BY skuGroup MATERIALIZED;
quantityParentWithDataSkipRepricing (skuGroup) = GROUP SUM 1 IF dataSkipRepricing(SkuGroup parentSkuGroup) AND isParent(SkuGroup skuGroup, parentSkuGroup) BY skuGroup MATERIALIZED;

showDataSkipRepricing 'Не дооценивать на приходе' (SkuGroup skuGroup) = TRUE IF (quantityChildWithDataSkipRepricing (skuGroup) (+) quantityParentWithDataSkipRepricing (skuGroup)) > 0 MATERIALIZED;
showAnyDataSkipRepricing 'Не дооценивать на приходе' (SkuGroup skuGroup) = showDataSkipRepricing(skuGroup) OR NOT skuGroup IS SkuGroup;

backgroundShowDataSkipRepricing (SkuGroup skuGroup) =
    IF dataSkipRepricing(skuGroup) THEN
        RGB(0,0,0) IF skuGroup IS SkuGroup
    ELSE
        RGB(203,203,206) IF quantityChildWithDataSkipRepricing (skuGroup) != descendantNumber(skuGroup)
                         AND NOT quantityParentWithDataSkipRepricing (skuGroup);

setNullShowDataSkipRepricing 'Снять признак для всех потомков'(SkuGroup skuGroup) = {
    FOR isParent (SkuGroup childGroup, skuGroup) DO {
        ASSIGN skipRepricing(childGroup) <- NULL;
    }
} SHORTCUT skipRepricing[SkuGroup] CONFIRM;
  
createExtraValuationStockTimeOperationNotForm= ACTION ABSTRACT LIST (UserRepricing);
createExtraValuationNotForm 'Создать дооценку'(Stock department, DATETIME timeFrom, DATETIME timeTo, Operation operation) = {
    LOCAL in = BOOLEAN (Invoice);
    in(Invoice invoice) <- filterToRepricingDate (invoice, department, timeFrom, timeTo);
    IF [ = GROUP SUM 1 IF in(Invoice invoice)] () THEN {
        
        LOCAL repricingQuantity = NUMERIC[16,5] (InvoiceDetail);
        repricingQuantity(InvoiceDetail detail) <- NULL;
        
        positive(InvoiceDetail detail) <- NULL;
        positive(InvoiceDetail detail) <- in(invoice(detail));
        positive(InvoiceDetail detail) <- NULL WHERE positive(detail) AND skipRepricing(skuGroup(sku(detail)));        
        positive(InvoiceDetail detail) <- prevRetailPricingPriceB(detail) != retailExtraPrice(detail) WHERE positive(detail);
        repricingQuantity(InvoiceDetail detail) <- toRepricingQuantityTo(detail, timeTo) WHERE positive(detail);
        positive(InvoiceDetail detail) <- repricingQuantity(detail) > 0 AND isStockSku(detail) WHERE positive(detail);
        positive(InvoiceDetail detail) <- maxInvoiceDetail(sku(detail), invoice(detail)) == detail WHERE positive(detail);
        positive(InvoiceDetail detail) <- NULL WHERE skipExtraValuation(sku(detail), department) AND positive(detail);                     
        positive(InvoiceDetail detail) <- NULL WHERE positive(detail) AND NOT price(detail);
        IF minQuantityToRepricing() THEN {
            positive(InvoiceDetail detail) <- NULL WHERE repricingQuantity(detail) < minQuantityToRepricing() AND positive(detail);
        }
          
        FOR positive(InvoiceDetail detail) DO {
            overPositive(detail);
        }              
    
        IF NOT skipNegativeRepricing() THEN {
            negative(InvoiceDetail detail) <- NULL;
            negative(InvoiceDetail detail) <- in(invoice(detail));
            negative(InvoiceDetail detail) <- NULL WHERE negative(detail) AND skipRepricing(skuGroup(sku(detail)));        
            negative(InvoiceDetail detail) <- prevRetailPricingPriceB(detail) != retailExtraPrice(detail) WHERE negative(detail);
            repricingQuantity(InvoiceDetail detail) <- toRepricingQuantityTo(detail, timeTo) WHERE negative(detail);
            negative(InvoiceDetail detail) <- repricingQuantity(detail) < 0 AND isStockSku(detail) WHERE negative(detail);
            negative(InvoiceDetail detail) <- maxInvoiceDetail(sku(detail), invoice(detail))==detail WHERE negative(detail);
            negative(InvoiceDetail detail) <- NULL WHERE skipExtraValuation(sku(detail), department) AND negative(detail);         
            negative(InvoiceDetail detail) <- NULL WHERE negative(detail) AND NOT price(detail); 
            IF minQuantityToRepricing() THEN {
                negative(InvoiceDetail detail) <- NULL WHERE delta(repricingQuantity(detail),0) < minQuantityToRepricing() AND negative(detail);
            }
        
            FOR negative(InvoiceDetail detail) DO {
                overNegative(detail);
            }
        }
                
        IF [ = GROUP SUM 1 IF positive(InvoiceDetail detail) OR negative(detail) ]() THEN {
            NEW r = UserRepricing {
                departmentStore(r) <-  department;
                operation(r) <- operation;
                skipChangeLedger(r) <- TRUE;
                isPosted(r) <- TRUE;
                date(r) <-  DATE(timeTo);
                time(r) <- currentTime();                
                
        
                // дооценка в прямую сторону
                FOR positive(InvoiceDetail detail) NEW rd = UserRepricingDetail DO {
                        userRepricing(rd) <- r;
                        sku(rd) <- sku(detail);
                        quantity(rd) <- repricingQuantity(detail);
        
                        curPrice(rd) <- round2(prevSupplierPricingPriceB(sku(detail), department, pricingDateTime(detail)));
                        curRetailPrice(rd) <- prevRetailPricingPriceB(detail);
        
//                        price(rd) <- IF NOT keepSupplierPriceInRepricing(detail, department) THEN price(detail) ELSE curPrice(rd);
                        price(rd) <- price(detail);
                        retailPrice(rd) <- retailExtraPrice(detail);                          
        
                        overExtraValuation(rd, detail);
                }
        
                // дооценка в обратную сторону
                FOR negative(InvoiceDetail detail) NEW rd = UserRepricingDetail DO {
                        userRepricing(rd) <- r;
                        sku(rd) <- sku(detail);
                        quantity(rd) <- - repricingQuantity(detail);
        
                        curPrice(rd) <- price(detail);
                        curRetailPrice(rd) <- retailExtraPrice(detail);
        
                        price(rd) <- price(detail);
                        retailPrice(rd) <- prevRetailPricingPriceB(detail);                          
        
                        overExtraRevertValuation(rd, detail);
                }
                repricing(Invoice invoice) <- r WHERE in(invoice);
                createExtraValuationStockTimeOperationNotForm(r);                
                repricingForm() <- r;            
            } 
        }
    }
}                  
                   
createExtraValuation 'Создать дооценку'(Stock department, DATETIME timeFrom, DATETIME timeTo, Operation operation) = {
	NEWSESSION {
	    createExtraValuationNotForm(department, timeFrom, timeTo, operation);
	    SHOW userRepricing  OBJECTS p = repricingForm() MANAGESESSION DOCKED NOCANCEL;  
	    repricingForm() <- NULL;      
	}
}                 
                                                    
createExtraValuation 'Создать дооценку'() = {
	NEWSESSION {
	    DIALOG extraValuation OBJECTS d INPUT, tf INPUT, tt INPUT, o INPUT DO
	        createExtraValuation(d, tf, tt, o);                               
	}
} TOOLBAR ;

recreateExtraValuation(DATE dateFrom, DATE dateTo) = {
    FOR iterate(DATE d, dateFrom, dateTo) DO {
        DELETE UserRepricing u WHERE operation(u) == toRepricingOperation() AND date(u) == d;
        apply();
        FOR DepartmentStore department IS DepartmentStore AND isCompany(department) DO {
            createExtraValuationNotForm(department, DATETIME(subtract(d,1)), DATETIME(d), toRepricingOperation());
            date(UserRepricing r) <- d WHERE SET(r IS UserRepricing);
            apply();
        }
    }
}

EXTEND FORM repricings
    PROPERTIES ()  createExtraValuation TODRAW p
;

DESIGN repricings {
    actionContainer {
        NEW extraValuation {
            caption = 'Дооценка';
            MOVE PROPERTY(createExtraValuation());
        }
    }
}
  
createOverExtraValuationAllStocks = ACTION ABSTRACT LIST ();
isOverExtraValuationAllStocks = ABSTRACT BOOLEAN ();

createExtraValuationAllStocks 'Создать автоматическую дооценку'() = {
	NEWSESSION {
	    IF isOverExtraValuationAllStocks() THEN {
	        createOverExtraValuationAllStocks();
	    } ELSE {   
	        FOR DepartmentStore department IS DepartmentStore AND active(department) AND isCompany(department) DO {
	            createExtraValuationNotForm(department, toRepricingDateTime(), toRepricingDateTimeTo(), toRepricingOperation());                                     
	        } 
	    }
	    apply();
	}
}

EXTEND FORM options
    PROPERTIES() nameToRepricingOperation, toRepricingTime, toRepricingCountDays, minQuantityToRepricing, toRepricingTimeTo, toRepricingCountDaysTo, createExtraValuationAllStocks
    
    TREE skuTree g = SkuGroup PARENT parent
    PROPERTIES READONLY order(g), skuGroupName = name(g), skipRepricing(g) EDITABLE BACKGROUND backgroundShowDataSkipRepricing(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    ORDER BY order(g), skuGroupName
;

DESIGN options {
    repricings {
        NEW repricing {
            caption = 'Автоматическая дооценка';
            MOVE PROPERTY(nameToRepricingOperation());
            MOVE PROPERTY(toRepricingTime());
            MOVE PROPERTY(toRepricingCountDays());
            MOVE PROPERTY(minQuantityToRepricing());
            MOVE PROPERTY(toRepricingTimeTo());
            MOVE PROPERTY(toRepricingCountDaysTo());                       
            MOVE PROPERTY(createExtraValuationAllStocks());
        }
        MOVE skuTree.tree.box;
    }
}

