MODULE RepricingPriceListBatch;

REQUIRE RepricingPriceList, RepricingPriceLimitFixed;

NAMESPACE Repricing;

managementRetailPrice 'Цена (управленческая)' = DATA LOCAL NESTED NUMERIC[14,2] (Batch);
managementPriceListPrice = DATA LOCAL NESTED NUMERIC[14,2] (Batch); 
inDashboardRepricing 'Вкл' = DATA LOCAL NESTED BOOLEAN (Batch); 
//assignAttributeBatch = ABSTRACT ACTION (Stock, Operation, DATETIME);

skipManagementPriceList = ABSTRACT BOOLEAN (PriceListType, Batch, Stock, DATETIME); 


calculateDashboardManagementRepricingBatch 'По прайсам' = ACTION (Stock d, Operation o, DATETIME dt) {
    managementRetailPrice(Batch batch) <- NULL;
    IF onStockPriceListRepricing() THEN {
        managementPriceListPrice (Batch batch) <- prevPriceA((OVERRIDE retailPriceListType(d), priceListType(o)),batch, d, dt)
            IF NOT skipManagementPriceList((OVERRIDE retailPriceListType(d), priceListType(o)),batch, d, dt);
        managementRetailPrice(Batch batch) <- managementPriceListPrice(batch) WHERE managementPriceListPrice(batch);
    } ELSE {
        managementPriceListPrice (Batch batch) <- prevPriceA((OVERRIDE retailPriceListType(d), priceListType(o)),batch, d, dt) 
            IF currentBalance(batch, d) > 0 AND NOT skipManagementPriceList((OVERRIDE retailPriceListType(d), priceListType(o)),batch, d, dt);
        managementRetailPrice(Batch batch) <- managementPriceListPrice(batch) WHERE managementPriceListPrice(batch);
    }
    
//    overSetManagementRetailPriceDepartmentStoreDateTime(d, dt);
    
    inDashboardRepricing(Batch batch) <- managementRetailPrice(batch) != priceABatch(SystemLedgerPriceListType.retailPricingPriceListType, batch, d, dt) 
                                            AND skipRepricing(sku(batch), d) AND currentBalance(batch, d) > 0; // Берем только те товары, которые исключили из переоценки по товарам
//    includeExtraDashboardRepricingStockDateTime(d, dt);
    
//    assignAttributeBatch(d, o, dt);    
    formRefresh();
} TOOLBAR;

//repForm =  DATA LOCAL UserRepricing();  

createDashboardRepricingNotFormBatch 'Создать переоценку' = ACTION (Stock d, Operation o, DATETIME dt) {
    IF [ = GROUP SUM 1 IF inDashboardRepricing(Batch batch)]() THEN {
        FOR ADDOBJ r = UserRepricing DO {
            departmentStore(r) <- d;
            operation(r) <- o;
            date(r) <- toDate(dt);
            time(r) <- toTime(dt);  
            isPosted(r) <- TRUE;
    
            FOR inDashboardRepricing(Batch batch) ADDOBJ rd = UserRepricingDetail DO {
                userRepricing(rd) <- r;
                sku(rd) <- sku(batch);
                batch(rd) <- batch;
                quantity(rd) <- currentBalance(batch, d);
                retailPrice(rd) <- managementRetailPrice(batch);
                curRetailPrice(rd) <- prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType, batch, d, dt);
                price(rd) <- prevPriceA[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType, batch, d, dt);
//                overPriceListUserRepricingDetail(rd);
            }
            repForm() <- r;
        }
    }
} TOOLBAR;

createDashboardRepricingBatch 'Создать переоценку' = ACTION  (Stock d, Operation o, DATETIME dt) NEWSESSION NESTED LOCAL  {
    createDashboardRepricingNotFormBatch(d, o, dt);
    FORM userRepricing OBJECTS p = repForm() MANAGESESSION DOCKEDMODAL;
    repForm() <- NULL;      
}  

createOverManagementRepricing(Stock department) += ACTION (department) {
    calculateDashboardManagementRepricingBatch(department, toManagementRepricingOperation(), currentDateTime());
    createDashboardRepricingNotFormBatch(department, toManagementRepricingOperation(), currentDateTime());     
}
