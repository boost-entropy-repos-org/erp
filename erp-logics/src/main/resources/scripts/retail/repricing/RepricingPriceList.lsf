MODULE RepricingPriceList;

REQUIRE Repricing, PriceListLedger;

NAMESPACE Repricing;


minManagementQuantityToRepricing 'Минимальное количество для управленческой переоценки' = DATA NUMERIC[14,4] ();

EXTEND FORM options 
    PROPERTIES () minManagementQuantityToRepricing
;
DESIGN options {
    repricings {
        MOVE PROPERTY(minManagementQuantityToRepricing());
    }
}

overPriceListUser = ACTION ABSTRACT LIST (RepricingDetail);

skipRepricing = ABSTRACT BOOLEAN (Sku, Stock);

onStockPriceListRepricing 'Переоценивать товары без остатка' = DATA BOOLEAN ();

managementRetailPrice 'Цена (управленческая)' = DATA LOCAL NESTED NUMERIC[16,4] (Sku);
managementPriceListPrice = DATA LOCAL NESTED NUMERIC[16,4] (Sku); 
inDashboardRepricing 'Вкл' = DATA LOCAL NESTED BOOLEAN (Sku); 
assignAttributeSku = ACTION ABSTRACT (Stock, Operation, DATETIME);

skipManagementPriceList = ABSTRACT BOOLEAN (PriceListType, Sku, Stock, DATETIME); 

overSetMarkupManagementRetailPrice = ACTION ABSTRACT LIST(DepartmentStore, Operation, DATETIME);
overSetManagementRetailPrice = ACTION ABSTRACT LIST (DepartmentStore, DATETIME);

includeExtraDashboardRepricing = ACTION ABSTRACT (Stock, Operation, DATETIME);
calculateDashboardRepricing 'По надбавкам и прайсам'(Stock d, Operation o, DATETIME dt) = {
    DIALOG dialogSkuGroup DO {              
        IF onStockPriceListRepricing() THEN {
            managementRetailPrice (Sku sku) <- priceA((OVERRIDE calcPriceListType(o), retailCalcPriceListType(d)), sku, d, dt) 
                IF NOT skipManagementPriceList((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt) AND inSession(skuGroup(sku));
            overSetMarkupManagementRetailPrice(d, o, dt);
            managementPriceListPrice (Sku sku) <- prevPriceA((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt)
                IF NOT skipManagementPriceList((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt) AND inSession(skuGroup(sku));
            managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku);
        } ELSE {
            managementRetailPrice (Sku sku) <- priceA((OVERRIDE calcPriceListType(o), retailCalcPriceListType(d)), sku, d, dt)
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt) AND inSession(skuGroup(sku));
            overSetMarkupManagementRetailPrice(d, o, dt);
            managementPriceListPrice (Sku sku) <- prevPriceA((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt)
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt) AND inSession(skuGroup(sku));
            managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku);
        }
        
        overSetManagementRetailPrice(d, dt);
        
        inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) != prevRetailPricingPriceA(sku, d, dt) AND NOT skipRepricing(sku, d);
        
        includeExtraDashboardRepricing(d, o, dt);
        
        assignAttributeSku(d, o, dt);
        formRefresh();
    }
} TOOLBAR;

calculateDashboardManagementRepricing 'По прайсам'(Stock d, Operation o, DATETIME dt) = {
    managementRetailPrice(Sku sku) <- NULL;
    IF onStockPriceListRepricing() THEN {
        managementPriceListPrice (Sku sku) <- prevPriceA((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt)
            IF NOT skipManagementPriceList((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt);
        managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku) AND skuType(sku) != SkuType.skuTypeContainer;
    } ELSE {
        managementPriceListPrice (Sku sku) <- prevPriceA((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt) 
            IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList((OVERRIDE priceListType(o), retailPriceListType(d)),sku, d, dt);
        managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku) AND skuType(sku) != SkuType.skuTypeContainer;
    }
    
    overSetManagementRetailPrice(d, dt);
    
    inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) != prevRetailPricingPriceA(sku, d, dt) AND NOT skipRepricing(sku, d);
    
    includeExtraDashboardRepricing(d, o, dt);
    
    assignAttributeSku(d, o, dt);    
    formRefresh();
} TOOLBAR;

repForm =  DATA LOCAL UserRepricing();  

overCreateDashboardRepricingNotForm= ACTION ABSTRACT LIST (UserRepricing);

orderRepricingDetail = ABSTRACT INTEGER (Sku);

createDashboardRepricingNotForm 'Создать переоценку'(Stock d, Operation o, DATETIME dt) = {
    IF [ = GROUP SUM 1 IF inDashboardRepricing(Sku sku)]() THEN {
        NEW r = UserRepricing {
            departmentStore(r) <- d;
            operation(r) <- o;
            date(r) <- toDate(dt);
            time(r) <- toTime(dt);  
            isPosted(r) <- TRUE;
    
            FOR inDashboardRepricing(Sku sku) AND NOT skipRepricing(sku, d) ORDER orderRepricingDetail(sku) NEW rd = UserRepricingDetail DO {
                userRepricing(rd) <- r;
                sku(rd) <- sku;
                quantity(rd) <- currentBalance(sku, d) IF currentBalance(sku, d) > 0;
                quantity(rd) <- NULL  WHERE quantity(rd) < minManagementQuantityToRepricing();
                retailPrice(rd) <- managementRetailPrice(sku);
                curRetailPrice(rd) <- prevRetailPricingPriceB(sku, d, dt);
                price(rd) <- round2(prevPriceA[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType, sku, d, dt));
                overPriceListUser(rd);
            }
            overCreateDashboardRepricingNotForm(r);            
            repForm() <- r;
        }
    }
} TOOLBAR;

createDashboardRepricing 'Создать переоценку'(Stock d, Operation o, DATETIME dt) = {
	NEWSESSION NESTED LOCAL  {
	    createDashboardRepricingNotForm(d, o, dt);
	    DIALOG userRepricing OBJECTS p = repForm() MANAGESESSION DOCKED NOCANCEL DO {
	        inDashboardRepricing(Sku sku) <- NULL;
	    }
	    repForm() <- NULL;      
	}
}  

EXTEND FORM options
    PROPERTIES() onStockPriceListRepricing 
;

DESIGN options {
    repricings {
        MOVE PROPERTY(onStockPriceListRepricing());
    }
}

skipManagementRepricing = ABSTRACT BOOLEAN (DepartmentStore);

toManagementRepricingOperation  = DATA Repricing.Operation ();
nameToManagementRepricingOperation 'Операция для переоценки упр.' = name(toManagementRepricingOperation());

createOverManagementRepricing = ACTION ABSTRACT LIST (Stock);

createManagementRepricingAllStocks 'Создать автоматическую переоценку упр.'() = {
    FOR active(DepartmentStore department) AND isCompany(department) AND NOT skipManagementRepricing(department)  DO {
    	NEWSESSION {
            calculateDashboardManagementRepricing(department, toManagementRepricingOperation(), currentDateTime());
            createDashboardRepricingNotForm(department, toManagementRepricingOperation(), currentDateTime()); 
            createOverManagementRepricing(department);
            APPLY;
        }
	}
}
//--------------------------------
//FORM cc 'Дооценка'
//    OBJECTS d = DepartmentStore PANEL
//    PROPERTIES (d) SELECTOR nameDepartmentStore
//
//    OBJECTS tf=DATETIME PANEL
//    PROPERTIES(tf) VALUE
//    
//    OBJECTS o=Repricing.Operation PANEL
//    PROPERTIES(o) SELECTOR Repricing.nameOperation    
//
//;
//DESIGN cc {
//    main {
//        type = CONTAINERV;
//
//        NEW topContainer {
//            type = CONTAINERH;
//            MOVE d.box { caption = 'Выберите отдел магазина';}
//            MOVE tf.box { caption = 'Дата/время с'; }
//            MOVE o.box { caption = 'Выберите операцию переоценки'; }
//        }
//        MOVE functions.box;
//    }
//} 
//aaaaa 'Создать переоценку упр.' = ACTION () NEWSESSION {
//    FORM cc  MODAL;
//    IF formResult() == FormResult.ok THEN {  
//        calculateDashboardManagementRepricing(chosenObject('d'), chosenObject('o'), currentDateTime());
//        createDashboardRepricingNotForm(chosenObject('d'), chosenObject('o'), currentDateTime());      
////        createExtraValuationStockTimeOperation(chosenObject('d'), chosenDateTime('tf'), chosenObject('o'));                               
//    }
//    apply();
//} TOOLBAR;


EXTEND FORM options
    PROPERTIES() nameToManagementRepricingOperation, createManagementRepricingAllStocks
;
DESIGN options {
    repricings {
        NEW managementRepricing {
            caption = 'Автоматическая переоценка упр.';
            MOVE PROPERTY(nameToManagementRepricingOperation());
            MOVE PROPERTY(createManagementRepricingAllStocks());
        }
    }
}