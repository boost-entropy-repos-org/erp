MODULE RepricingPriceList;

REQUIRE Repricing, PriceListOperation;

NAMESPACE Repricing;

overPriceListUserRepricingDetail = ABSTRACT ACTION LIST (RepricingDetail);

skipRepricingSku = ABSTRACT BOOLEAN (Sku, Stock);

onStockPriceListRepricing 'Переоценивать товары без остатка' = DATA BOOLEAN ();

managementRetailPriceSku 'Цена (управленческая)' = DATA LOCAL NESTED NUMERIC[14,2] (Sku);
managementPriceListPriceSku = DATA LOCAL NESTED NUMERIC[14,2] (Sku); 
inDashboardRepricingSku 'Вкл' = DATA LOCAL NESTED BOOLEAN (Sku); 
assignAttributeSku = ABSTRACT ACTION (Stock, Operation, DATETIME);

skipManagementPriceListPriceSku = ABSTRACT BOOLEAN (PriceListType, Sku, Stock, DATETIME); 

overSetManagementRetailPriceDepartmentStoreDateTime = ABSTRACT ACTION LIST (DepartmentStore, DATETIME);

includeExtraDashboardRepricingStockDateTime = ABSTRACT ACTION (Stock, DATETIME);
calculateDashboardRepricing 'По надбавкам и прайсам' = ACTION (d, o, dt) {
    FORM dialogSkuGroup MODAL;
    IF formResult() == FormResult.ok THEN {              
        IF onStockPriceListRepricing() THEN {
            managementRetailPriceSku (sku) <- priceACalcPriceListTypeSkuStockDateTime((OVERRIDE retailCalcPriceListTypeDepartmentStore(d), calcPriceListTypeOperation(o)),
                                                                                      sku, d, dt) IF inSessionGroup(skuGroupSku(sku));
            managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt)
                IF NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt) AND inSessionGroup(skuGroupSku(sku));
            managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
        } ELSE {
            managementRetailPriceSku (sku) <- priceACalcPriceListTypeSkuStockDateTime((OVERRIDE retailCalcPriceListTypeDepartmentStore(d), calcPriceListTypeOperation(o)),
                                                                                      sku, d, dt) IF currentBalanceSkuStock(sku, d) > 0 AND inSessionGroup(skuGroupSku(sku));
            managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt)
                IF currentBalanceSkuStock(sku, d) > 0 AND NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt) AND inSessionGroup(skuGroupSku(sku));
            managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
        }
        
        overSetManagementRetailPriceDepartmentStoreDateTime(d, dt);
        
        inDashboardRepricingSku(sku) <- managementRetailPriceSku(sku) != prevRetailPricingPriceASkuStockDateTime(sku, d, dt);
        includeExtraDashboardRepricingStockDateTime(d, dt);
        
        assignAttributeSku(d, o, dt);
        formRefresh();
    }
} TOOLBAR;

calculateDashboardManagementRepricing 'По прайсам' = ACTION (d, o, dt) {
    managementRetailPriceSku(sku) <- NULL;
    IF onStockPriceListRepricing() THEN {
        managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt)
            IF NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt);
        managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
    } ELSE {
        managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt) 
            IF currentBalanceSkuStock(sku, d) > 0 AND NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt);
        managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
    }
    
    overSetManagementRetailPriceDepartmentStoreDateTime(d, dt);
    
    inDashboardRepricingSku(sku) <- managementRetailPriceSku(sku) != prevRetailPricingPriceASkuStockDateTime(sku, d, dt);
    includeExtraDashboardRepricingStockDateTime(d, dt);
    
    assignAttributeSku(d, o, dt);    
    formRefresh();
} TOOLBAR;

repForm =  DATA LOCAL UserRepricing();  

createDashboardRepricingNotForm 'Создать переоценку' = ACTION (d, o, dt) {
    IF [ = GROUP SUM 1 IF inDashboardRepricingSku(sku)]() THEN {
        FOR ADDOBJ r = UserRepricing DO {
            departmentStoreUserRepricing(r) <- d;
            operationUserRepricing(r) <- o;
            dateUserRepricing(r) <- toDate(dt);
            timeUserRepricing(r) <- toTime(dt);  
            isPostedUserRepricing(r) <- TRUE;
    
            FOR inDashboardRepricingSku(sku) AND NOT skipRepricingSku(sku, d) ADDOBJ rd = UserRepricingDetail DO {
                userRepricingUserRepricingDetail(rd) <- r;
                skuUserRepricingDetail(rd) <- sku;
                quantityUserRepricingDetail(rd) <- currentBalanceSkuStock(sku, d) IF currentBalanceSkuStock(sku, d) > 0;
                retailPriceUserRepricingDetail(rd) <- managementRetailPriceSku(sku);
                curRetailPriceUserRepricingDetail(rd) <- prevRetailPricingPriceBSkuStockDateTime(sku, d, dt);
                priceUserRepricingDetail(rd) <- prevPriceAPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, sku, d, dt);
                overPriceListUserRepricingDetail(rd);
            }
            repForm() <- r;
        }
    }
} TOOLBAR;

createDashboardRepricing 'Создать переоценку' = ACTION  (d, o, dt) NEWSESSION NESTED LOCAL  {
    createDashboardRepricingNotForm(d, o, dt);
    FORM userRepricing OBJECTS p = repForm() MANAGESESSION DOCKEDMODAL;
    repForm() <- NULL;      
}  

EXTEND FORM options
    PROPERTIES() onStockPriceListRepricing 
;

DESIGN options {
    commons {
        MOVE PROPERTY(onStockPriceListRepricing());
    }
}

createOverManagementRepricingAllStocks = ABSTRACT ACTION LIST ();
isOverManagementRepricingAllStocks = ABSTRACT BOOLEAN ();
skipManagementRepricingDepartmentStore = ABSTRACT BOOLEAN (DepartmentStore);

toManagementRepricingOperation  = DATA Repricing.Operation ();
nameToManagementRepricingOperation 'Операция для переоценки упр.' = nameOperation(toManagementRepricingOperation());

createManagementRepricingAllStocks 'Создать автоматическую переоценку упр.' = ACTION () NEWSESSION {
    IF isOverManagementRepricingAllStocks() THEN {
        createOverManagementRepricingAllStocks();
    } ELSE {   
        FOR department IS DepartmentStore AND isCompanyStock(department) AND NOT skipManagementRepricingDepartmentStore(department)  DO {
            calculateDashboardManagementRepricing(department, toManagementRepricingOperation(), currentDateTime());
            createDashboardRepricingNotForm(department, toManagementRepricingOperation(), currentDateTime());                                     
        } 
    }
    apply();
}
//--------------------------------
//FORM cc 'Дооценка'
//    OBJECTS d = DepartmentStore FIXED PANEL
//    PROPERTIES (d) SELECTOR nameDepartmentStore
//
//    OBJECTS tf=DATETIME FIXED PANEL
//    PROPERTIES(tf) OBJVALUE
//    
//    OBJECTS o=Repricing.Operation FIXED PANEL
//    PROPERTIES(o) SELECTOR Repricing.nameOperation    
//
//;
//DESIGN cc {
//    main {
//        type = CONTAINERV;
//
//        NEW topContainer {
//            type = CONTAINERH;
//            MOVE d.box { caption = 'Выберите отдел магазина';}
//            MOVE tf.box { caption = 'Дата/время с'; }
//            MOVE o.box { caption = 'Выберите операцию переоценки'; }
//        }
//        MOVE functions.box;
//    }
//} 
//aaaaa 'Создать переоценку упр.' = ACTION () NEWSESSION {
//    FORM cc  MODAL;
//    IF formResult() == FormResult.ok THEN {  
//        calculateDashboardManagementRepricing(chosenObject('d'), chosenObject('o'), currentDateTime());
//        createDashboardRepricingNotForm(chosenObject('d'), chosenObject('o'), currentDateTime());      
////        createExtraValuationStockTimeOperation(chosenObject('d'), chosenDateTime('tf'), chosenObject('o'));                               
//    }
//    apply();
//} TOOLBAR;


EXTEND FORM options
    PROPERTIES() nameToManagementRepricingOperation, createManagementRepricingAllStocks
;
DESIGN options {
    repricings {
        NEW managementRepricing {
            caption = 'Автоматическая переоценка упр.';
            MOVE PROPERTY(nameToManagementRepricingOperation());
            MOVE PROPERTY(createManagementRepricingAllStocks());
        }
    }
}