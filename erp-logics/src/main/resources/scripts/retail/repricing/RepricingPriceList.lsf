MODULE RepricingPriceList;

REQUIRE Repricing, PriceListOperation;

NAMESPACE Repricing;

overPriceListUserRepricingDetail = ABSTRACT ACTION LIST (RepricingDetail);

skipRepricingSku = ABSTRACT BOOLEAN (Sku, Stock);

onStockPriceListRepricing 'Переоценивать товары без остатка' = DATA BOOLEAN ();

managementRetailPriceSku 'Цена (управленческая)' = DATA LOCAL NUMERIC[14,2] (Sku);
managementPriceListPriceSku = DATA LOCAL NUMERIC[14,2] (Sku); 
inDashboardRepricingSku 'Вкл' = DATA LOCAL BOOLEAN (Sku); 
assignAttributeSku = ABSTRACT ACTION (Stock, Operation, DATETIME);

skipManagementPriceListPriceSku = ABSTRACT BOOLEAN (PriceListType, Sku, Stock, DATETIME); 

calculateDashboardRepricing 'Рассчитать позиции' = ACTION (d, o, dt) {
    
    IF onStockPriceListRepricing() THEN {
        managementRetailPriceSku (sku) <- priceACalcPriceListTypeSkuStockDateTime((OVERRIDE retailCalcPriceListTypeDepartmentStore(d), calcPriceListTypeOperation(o)),
                                                                                  sku, d, dt);
        managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt)
            IF NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt);
        managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
    } ELSE {
        managementRetailPriceSku (sku) <- priceACalcPriceListTypeSkuStockDateTime((OVERRIDE retailCalcPriceListTypeDepartmentStore(d), calcPriceListTypeOperation(o)),
                                                                                  sku, d, dt) IF currentBalanceSkuStock(sku, d) > 0;
        managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt)
            IF currentBalanceSkuStock(sku, d) > 0 AND NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt);
        managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
    }
    
    inDashboardRepricingSku(sku) <- managementRetailPriceSku(sku) != prevRetailPricingPriceASkuStockDateTime(sku, d, dt);
    
    assignAttributeSku(d, o, dt);
    formRefresh();
} TOOLBAR;

calculateDashboardManagementRepricing 'Рассчитать позиции (упр.)' = ACTION (d, o, dt) {
    
    IF onStockPriceListRepricing() THEN {
        managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt)
            IF NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt);
        managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
    } ELSE {
        managementPriceListPriceSku (sku) <- prevPriceAPriceListTypeSkuStockDateTime((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt) 
            IF currentBalanceSkuStock(sku, d) > 0 AND NOT skipManagementPriceListPriceSku((OVERRIDE retailPriceListTypeDepartmentStore(d), priceListTypeOperation(o)),sku, d, dt);
        managementRetailPriceSku(sku) <- managementPriceListPriceSku(sku) WHERE managementPriceListPriceSku(sku);
    }
    
    inDashboardRepricingSku(sku) <- managementRetailPriceSku(sku) != prevRetailPricingPriceASkuStockDateTime(sku, d, dt);
    
    assignAttributeSku(d, o, dt);    
    formRefresh();
} TOOLBAR;

createDashboardRepricing 'Создать переоценку' = ACTION (d, o, dt) {
    NEWSESSION NESTED LOCAL {
        FOR ADDOBJ r = UserRepricing DO {
            departmentStoreUserRepricing(r) <- d;
            operationUserRepricing(r) <- o;
            dateUserRepricing(r) <- toDate(dt);
            timeUserRepricing(r) <- toTime(dt);               
    
            FOR inDashboardRepricingSku(sku) AND NOT skipRepricingSku(sku, d) ADDOBJ rd = UserRepricingDetail DO {
                userRepricingUserRepricingDetail(rd) <- r;
                skuUserRepricingDetail(rd) <- sku;
                quantityUserRepricingDetail(rd) <- currentBalanceSkuStock(sku, d) IF currentBalanceSkuStock(sku, d) > 0;
                retailPriceUserRepricingDetail(rd) <- managementRetailPriceSku(sku);
                curRetailPriceUserRepricingDetail(rd) <- prevRetailPricingPriceBSkuStockDateTime(sku, d, dt);
                priceUserRepricingDetail(rd) <- prevPriceAPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, sku, d, dt);
                overPriceListUserRepricingDetail(rd);
            }
            FORM userRepricing OBJECTS p = r MANAGESESSION DOCKEDMODAL;
        }
    }
} TOOLBAR;

EXTEND FORM options
    PROPERTIES() onStockPriceListRepricing 
;

EXTEND DESIGN options {
    commons {
        ADD PROPERTY(onStockPriceListRepricing());
    }
}