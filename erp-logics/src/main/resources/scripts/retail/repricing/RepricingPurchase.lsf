MODULE RepricingPurchase;

REQUIRE PricingPurchase, RepricingInvoice, PurchaseInvoice, PurchaseShipment, PurchaseOperation;

NAMESPACE Purchase;

//----------------------------------------------- Акт дооценки ---------------------------------------------------//
@defineRepricingAggregation(' (закупка)', customer);
@defineOperationProperty(createRepricing, 'Акт дооценки', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createRepricing);

repricingOperation  = DATA Repricing.Operation (Operation);
nameRepricingOperation 'Операция (переоценки)' (Operation operation)= name(repricingOperation(operation));


EXTEND FORM operation
    PROPERTIES(o) nameRepricingOperation
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(nameRepricingOperation(o)) AFTER PROPERTY(createRepricing(o));
    }
}

// Операция переоценки
@defineDocumentInterfaceOperationPrefix (invoice, repricing, Repricing, ' ( переоценка)');
repricingOperation(UserInvoice i) <- repricingOperation(operation(i))
    WHEN CHANGED(operation(i));

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCur(i) SHOWIF createRepricing(i) nameRepricingOperation
;
DESIGN userInvoice {
    headerCreateRepricing {
        MOVE PROPERTY(nameRepricingOperation(i)) BEFORE PROPERTY(nameRepricingCommittee(i));
    }
}

operation (InvoiceRepricing repricing)+= repricingOperation(invoice(repricing));
changeSupplierPrice (InvoiceRepricing repricing)+= changeSupplierPrice(repricingOperation(invoice(repricing)));

overCopy(UserInvoice s, UserInvoice d) += ACTION (s, d) {
    ASSIGN createRepricing(d) <- createRepricing(s);
    ASSIGN repricingOperation(d) <- repricingOperation(s);
}
