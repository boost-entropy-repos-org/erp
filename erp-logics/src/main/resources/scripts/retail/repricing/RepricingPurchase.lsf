MODULE RepricingPurchase;

REQUIRE PricingPurchase, RepricingInvoice, PurchaseInvoice, PurchaseShipment, PurchaseOperation;

NAMESPACE Purchase;

//----------------------------------------------- Акт дооценки ---------------------------------------------------//
@defineRepricingAggregation(' (закупка)', customer);
@defineOperationProperty(createRepricing, 'Акт дооценки', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createRepricing);

repricingOperationOperation  = DATA Repricing.Operation (Operation);
nameRepricingOperationOperation 'Операция (переоценки)' (operation)= Repricing.nameOperation(repricingOperationOperation(operation));


EXTEND FORM operation
    PROPERTIES(o) nameRepricingOperationOperation
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(nameRepricingOperationOperation(o)) AFTER PROPERTY(createRepricingOperation(o));
    }
}

// Операция переоценки
@defineDocumentInterfaceOperationPrefix (invoice, repricing, Repricing, ' ( переоценка)');
repricingOperationUserInvoice(i) <- repricingOperationOperation(operationUserInvoice(i))
    WHEN CHANGED(operationUserInvoice(i));

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCurInvoice(i) SHOWIF createRepricingUserInvoice(i) nameRepricingOperationUserInvoice
;
DESIGN userInvoice {
    headerCreateRepricing {
        MOVE PROPERTY(nameRepricingOperationUserInvoice(i)) BEFORE PROPERTY(nameRepricingCommitteeUserInvoice(i));
    }
}

operationRepricing (repricing)+= repricingOperationInvoice(invoiceInvoiceRepricing(repricing));

overCopyInvoice(s, d) += ACTION (s, d) {
    ASSIGN createRepricingUserInvoice(d) <- createRepricingUserInvoice(s);
    ASSIGN repricingOperationUserInvoice(d) <- repricingOperationUserInvoice(s);
}
