MODULE RepricingDashboard;

REQUIRE Dashboard, RepricingLabel, RepricingPriceList, RepricingMachinery;

NAMESPACE Repricing;

//------------------------ Управленческая переоценка ----------------------------//

createRepricingLabelTransactionDepartmentStoreOperationDateTime 'Распечатать ценники' = ACTION (departmentStore, operation, dateTime) NEWSESSION NESTED selectSku, inDashboardRepricingSku, managementRetailPriceSku, managementPriceListPriceSku {
    IF [=GROUP SUM 1 IF inDashboardRepricingSku(sku)]() THEN {
        selectSkuLabelTypeDepartmentStore(sku, labelType, departmentStore) <- inDashboardRepricingSku(sku) AND inLabelTypeSkuDepartmentStore(labelType, sku, departmentStore);   
        FOR [= GROUP SUM 1 IF selectSkuLabelTypeDepartmentStore(s,l,d) BY l, d](labelType, departmentStore) ADDOBJ t = LabelTransaction DO { 
            departmentStoreLabelTransaction(t) <- departmentStore;
            labelTypeLabelTransaction(t) <- labelType;
            priceListTypeLabelTransaction(t) <- OVERRIDE retailPriceListTypeDepartmentStore(departmentStore), priceListTypeOperation(operation);   
            dateLabelTransaction(t) <- toDate(dateTime);      
            timeLabelTransaction(t) <- toTime(dateTime);      
            
            FOR selectSkuLabelTypeDepartmentStore(sku, labelType, departmentStore) ADDOBJ d = LabelTransactionDetail DO {
                
                labelTransactionLabelTransactionDetail(d) <- t;
                skuLabelTransactionDetail(d) <- sku;
    
                nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
                createAttributeLabelTransactionDetail(d);
    
                quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelType, skuLabelTransactionDetail(d))
                                                        THEN INTEGER(currentBalanceSkuStock(sku, departmentStore))
                                                     ELSE countLabelTypeSku(labelType, skuLabelTransactionDetail(d));
                                                     
                priceLabelTransactionDetail(d) <- calcPriceLabelTransactionDetail(d);
                retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d);
            } 
            printLabelTransaction(t);
        }
    }
    apply();
} TOOLBAR;

//createSnapshotRepricingLabelTransactionDepartmentStoreOperationDateTime 'Перепечатать ценники' = ACTION (departmentStore, operation, dateTime) NEWSESSION NESTED selectSku, inDashboardRepricingSku, managementRetailPriceSku, managementPriceListPriceSku {
//
//    FOR ADDOBJ t = LabelTransaction DO {
//        departmentStoreLabelTransaction(t) <- departmentStore;
//        priceListTypeLabelTransaction(t) <- OVERRIDE retailPriceListTypeDepartmentStore(departmentStore), priceListTypeOperation(operation);    
//        dateLabelTransaction(t) <- toDate(dateTime);      
//        timeLabelTransaction(t) <- toTime(dateTime);          
//
//        FOR selectSku(sku) ADDOBJ d = LabelTransactionDetail DO {
//            labelTransactionLabelTransactionDetail(d) <- t;
//            skuLabelTransactionDetail(d) <- sku;
//
//            nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
//            documentQuantityLabelTransactionDetail(d) <- currentBalanceSkuStock(sku, departmentStore); 
//
//            createAttributeLabelTransactionDetail(d);
//        }
//        
//        FORM customLabelTransaction OBJECTS l = t MODAL;
//        IF formResult() == FormResult.ok THEN {    
//            printLabelTransaction(t);
//        }  
//    }
//    apply();
//} TOOLBAR;

createSnapshotRepricingLabelTransactionDepartmentStoreOperationDateTime 'Перепечатать ценники' = ACTION (departmentStore, operation, dateTime)  {
    IF countSelectSkus() THEN  NEWSESSION NESTED selectSku, inDashboardRepricingSku, managementRetailPriceSku, managementPriceListPriceSku {
        FORM selectLabelTypes OBJECTS ds =  departmentStore MODAL;
        IF formResult() == FormResult.ok THEN { 

            IF NOT countSelectType() THEN {
                selectType(type) <- TRUE WHERE type == chosenObject('l');
            }            
            FOR selectType(type) DO {
                FOR ADDOBJ t = LabelTransaction DO {
                    departmentStoreLabelTransaction(t) <- departmentStore;
                    priceListTypeLabelTransaction(t) <- OVERRIDE retailPriceListTypeDepartmentStore(departmentStore), priceListTypeOperation(operation);    
                    dateLabelTransaction(t) <- toDate(dateTime);      
                    timeLabelTransaction(t) <- toTime(dateTime);
                    labelTypeLabelTransaction(t) <- type;
            
                    FOR selectSku(sku) ADDOBJ d = LabelTransactionDetail DO {
                        labelTransactionLabelTransactionDetail(d) <- t;
                        skuLabelTransactionDetail(d) <- sku;
            
                        nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
                        documentQuantityLabelTransactionDetail(d) <- currentBalanceSkuStock(sku, departmentStore); 
            
                        createAttributeLabelTransactionDetail(d);                      
               
                        priceLabelTransactionDetail(d) <- OVERRIDE calcPriceLabelTransactionDetail(d), documentPriceLabelTransactionDetail(d);
                        retailPriceLabelTransactionDetail(d) <- overRetailPriceLabelTransactionDetail(d) WHERE overRetailPriceLabelTransactionDetail(d);   
                
                        quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d)) THEN 
                                                                INTEGER(documentQuantityLabelTransactionDetail(d))
                                                             ELSE 
                                                                countLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d));                                                                                                                             
                    }
                    
                    IF changeDepartmentStore(departmentStore) THEN {
                        FORM customLabelTransaction OBJECTS l = t MODAL;
                        IF formResult() == FormResult.ok THEN {    
                            printLabelTransaction(t);
                        } ELSE {
                            cancel();
                        }             
                    } ELSE {
                        printLabelTransaction(t);
                    }
                }
            }                     
        }                 
        apply();
    }
} TOOLBAR;

clearDashboardRepricing = ACTION() {
    inDashboardRepricingSku(sk) <- NULL;
    managementRetailPriceSku(sk) <- NULL;
    managementPriceListPriceSku(sk) <- NULL;
    
    formRefresh();
}

FORM repricingDashboard 'Переоценка'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES (d) SELECTOR nameDepartmentStore
    FILTERS isCompanyStock(d)
        
    OBJECTS o = Repricing.Operation FIXED PANEL
    PROPERTIES (o) SELECTOR Repricing.nameOperation
    FILTERS inUserOperation(currentUser(), o)

    OBJECTS t=DATETIME FIXED PANEL
    PROPERTIES(t) OBJVALUE
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuTreeName = nameSkuGroup(sg)
    ORDER BY orderSkuGroup(sg), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) DEFAULT
    
    OBJECTS sk=Sku
    PROPERTIES(sk)          inDashboardRepricingSku, selectSku
    PROPERTIES(sk) READONLY idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES     READONLY dateTimeLastMovedSkuStock(sk, d), dateTimeLastOrderBatchSkuStock(sk, d), nameSupplierLastOrderBatchSkuStock(sk, d), currentBalanceSkuStock(sk,d), managementRetailPriceSku(sk), retailPricingPriceBSkuStockDateTime(sk,d,t) 
    PROPERTIES (d,o,t)  TODRAW sk FORCE PANEL calculateDashboardRepricing, calculateDashboardManagementRepricing, createDashboardRepricing,
                                              createRepricingLabelTransactionDepartmentStoreOperationDateTime,
                                              createSnapshotRepricingLabelTransactionDepartmentStoreOperationDateTime
    PROPERTIES() READONLY countSelectSkus SHOWIF countSelectSkus() TODRAW sk                                          
    FILTERS inDashboardRepricingSku(sk), isParentSkuGroupSku(sg, sk) 

    OBJECTS p = Repricing
    PROPERTIES (p) READONLY isPostedRepricing, numberRepricing, seriesRepricing, dateRepricing, timeRepricing, beforeDateRepricing,
                   nameDepartmentStoreRepricing, countRepricingDetailRepricing, diffSumRepricingDetailRepricing,
                   diffMarkupSumRepricingDetailRepricing, diffVATSumRepricingDetailRepricing,
                   diffRetailSumRepricingDetailRepricing, numberDisposalRepricing, skipChangeLedgerRepricing,
                   statusLabelPriceTransactionDocument BACKGROUND backgroundPrintLabelTransactionRepricing(p),
                   statusMachineryPriceTransactionDocument ON SHORTCUT createSnapshotMachineryPriceTransactionRepricing(p) BACKGROUND backgroundCreateMachineryPriceTransactionRepricing(p), 
                   noteRepricing                      
               
    PROPERTIES (p) createRepricingLabelTransaction FORCE PANEL SHOWIF showPrintLabelTransactionRepricing(p), 
                   createSnapshotRepricingLabelTransaction FORCE PANEL
                   
    PROPERTIES (p) createMachineryPriceTransactionRepricing FORCE PANEL SHOWIF showCreateMachineryPriceTransactionRepricing(p)
    PROPERTIES (p) printRepricing FORCE PANEL TOOLBAR                                           
    PROPERTIES (p) editRepricing SHOWIF isOpenedRepricing(p), ADDFORM
    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpenedRepricing(p)    
                       
    FILTERGROUP filters FILTER 'Переоценки на дату' dateRepricing(p)==toDate(t) 'F5' DEFAULT                         
    
    EVENTS
        ON CHANGE d clearDashboardRepricing()
;
DESIGN repricingDashboard {
    main {
        type = CONTAINERV;

        NEW topContainer {
            type = CONTAINERH;
            MOVE d.box;
            MOVE o.box;
            MOVE t.box;
        }
        NEW bodyContainer{
            type = SPLITV;
            fill = 1;
            NEW skuBox {
                type = SPLITH;
                fill = 1;
                MOVE skuTree.tree.box { caption = 'Группы SKU'; fill=0.5; }
                MOVE sk.box {
                    caption = 'Товары, для которых необходима переоценка';
                    PROPERTY(retailPricingPriceBSkuStockDateTime(sk,d,t)) {
                        caption = 'Цена (текущая)';
                    }
            }
            }   
            NEW tanContainer {
                fill = 1;
                type = TABBED;
                MOVE p.box;   
                NEW actionContainer {
                    fill = 1;
                    caption = 'Действия';
                    NEW mainActionContainer {
                        fill = 1;
                        type = COLUMNS;
                        columns = 5;
                        MOVE PROPERTY(createDashboardRepricing(d,o,t));
                        MOVE PROPERTY(createRepricingLabelTransactionDepartmentStoreOperationDateTime(d,o,t));
                        MOVE PROPERTY(createSnapshotRepricingLabelTransactionDepartmentStoreOperationDateTime(d,o,t));                    
                    }
                }
            }
        }
        MOVE functions.box;
    }
}

@extendFormFilterStockAccess(d, repricingDashboard);
@extendFormFilterAccessStock(Repricing, p, repricingDashboard, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricingDashboard); 
NAVIGATOR {
    retailDashboardNavigator {
        ADD repricingDashboard;
    }
}