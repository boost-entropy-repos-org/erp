MODULE RepricingDashboard;

REQUIRE Dashboard, RepricingLabel, RepricingPriceList, RepricingMachinery;

NAMESPACE Repricing;

//------------------------ Управленческая переоценка ----------------------------//

createRepricingLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore, Operation operation, DATETIME dateTime) = {
	NEWSESSION NESTED (select[Sku], inDashboardRepricing[Sku], managementRetailPrice[Sku], managementPriceListPrice[Sku]) {
	    IF [=GROUP SUM 1 IF inDashboardRepricing(Sku sku)]() THEN {
	        select(Sku sku, LabelType labelType, departmentStore) <- inDashboardRepricing(sku) AND in(labelType, sku, departmentStore);   
	        FOR [= GROUP SUM 1 IF select(Sku s,LabelType l,DepartmentStore d) BY l, d](LabelType labelType, departmentStore) NEW t = LabelTransaction DO { 
	            departmentStore(t) <- departmentStore;
	            labelType(t) <- labelType;
	            priceListType(t) <- OVERRIDE priceListType(operation), retailPriceListType(departmentStore);   
	            date(t) <- toDate(dateTime);      
	            time(t) <- toTime(dateTime);      
	            
	            FOR select(Sku sku, labelType, departmentStore) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) NEW d = LabelTransactionDetail DO {
	                
	                labelTransaction(d) <- t;
	                sku(d) <- sku;
	    
	                name(d) <- name(sku(d));
	                createAttribute(d);
	    
	                quantity(d) <- IF include(labelType, sku(d))
	                                                        THEN INTEGER(currentBalance(sku, departmentStore))
	                                                     ELSE count(labelType, sku(d));
	                                                     
	                price(d) <- calcPrice(pt, d);
	                retailPrice(d) <- overRetailPrice(d);
	            } 
	            print(t);
	        }
	    }
	    apply();
	}
} TOOLBAR;

//createSnapshotRepricingLabelTransactionDepartmentStoreOperationDateTime 'Перепечатать ценники' = ACTION (departmentStore, operation, dateTime) NEWSESSION NESTED (selectSku, inDashboardRepricingSku, managementRetailPriceSku, managementPriceListPriceSku) {
//
//    NEW t = LabelTransaction {
//        departmentStoreLabelTransaction(t) <- departmentStore;
//        priceListTypeLabelTransaction(t) <- OVERRIDE retailPriceListTypeDepartmentStore(departmentStore), priceListTypeOperation(operation);    
//        dateLabelTransaction(t) <- toDate(dateTime);      
//        timeLabelTransaction(t) <- toTime(dateTime);          
//
//        FOR selectSku(sku) NEW d = LabelTransactionDetail DO {
//            labelTransactionLabelTransactionDetail(d) <- t;
//            skuLabelTransactionDetail(d) <- sku;
//
//            nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
//            documentQuantityLabelTransactionDetail(d) <- currentBalanceSkuStock(sku, departmentStore); 
//
//            createAttributeLabelTransactionDetail(d);
//        }
//        
//        FORM customLabelTransaction OBJECTS l = t MODAL;
//        IF formResult() == FormResult.ok THEN {    
//            printLabelTransaction(t);
//        }  
//    }
//    apply();
//} TOOLBAR;

createSnapshotRepricingLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore, Operation operation, DATETIME dateTime) = {
    IF countSelectSkus() THEN  NEWSESSION NESTED (select[Sku], inDashboardRepricing[Sku], managementRetailPrice[Sku], managementPriceListPrice[Sku]) {
        DIALOG selectLabelTypes OBJECTS ds = departmentStore, l INPUT DO { 

            IF NOT countSelectType() THEN {
                select(l) <- TRUE;
            }            
            FOR select(LabelType type) DO {
                NEW t = LabelTransaction {
                    departmentStore(t) <- departmentStore;
                    priceListType(t) <- OVERRIDE priceListType(operation), retailPriceListType(departmentStore);    
                    date(t) <- toDate(dateTime);      
                    time(t) <- toTime(dateTime);
                    labelType(t) <- type;
            
                    FOR select(Sku sku) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) NEW d = LabelTransactionDetail DO {
                        labelTransaction(d) <- t;
                        sku(d) <- sku;
            
                        name(d) <- name(sku(d));
                        documentQuantity(d) <- currentBalance(sku, departmentStore); 
            
                        createAttribute(d);                      
               
                        price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
                        retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
                
//                        quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d)) THEN 
//                                                                INTEGER(documentQuantityLabelTransactionDetail(d))
//                                                             ELSE 
//                                                                countLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d));  
                                                                                                                                                                                           
                        quantity(d) <- IF NOT countLabel(departmentStore) 
                                                                 THEN (IF include(labelType(d), sku(d)) 
                                                                    THEN INTEGER(documentQuantity(d))
                                                                     ELSE count(labelType(d), sku(d)))
                                                                 ELSE countLabel(departmentStore);                                                                                                                                                                                              
                                                                                                                                                                                           
                    }
                    
                    IF change(departmentStore) THEN {
                        LOCAL printed = BOOLEAN();
                        printed() <- NULL;
                        DIALOG customLabelTransaction OBJECTS l = t DO {    
                            print(t);
                            printed() <- TRUE;
                        }             
                        IF NOT printed() THEN {
                            cancel();
                        }             
                    } ELSE {
                        print(t);
                    }
                }
            }                     
        }                 
        apply();
    }
} TOOLBAR;

clearDashboardRepricing() = {
    inDashboardRepricing(Sku sk) <- NULL;
    managementRetailPrice(Sku sk) <- NULL;
    managementPriceListPrice(Sku sk) <- NULL;
    
    formRefresh();
}

FORM repricingDashboard 'Переоценка'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES (d) SELECTOR name
    FILTERS isCompany(d)
        
    OBJECTS o = Repricing.Operation PANEL
    PROPERTIES (o) SELECTOR name
    FILTERS in(currentUser(), o)

    OBJECTS t=DATETIME PANEL
    PROPERTIES(t) VALUE
    
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuTreeName = name(sg)
    ORDER BY order(sg), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sg) DEFAULT
    
    OBJECTS sk=Sku
    PROPERTIES(sk)          inDashboardRepricing, select
    PROPERTIES(sk) READONLY idBarcode, id, name ON SHORTCUT showMovementSku(sk, d) ON SHORTCUT showMovementPriceSku(sk, d), shortNameUOM
    PROPERTIES     READONLY dateTimeLastMoved(sk, d), dateTimeLastOrderBatch(sk, d), nameSupplierLastOrderBatch(sk, d), nameCountry(sk), currentBalance(sk,d), 
                   managementRetailPrice(sk), retailPricingPriceB(sk,d,t) 
    PROPERTIES (d,o,t)  TODRAW sk  TOOLBAR calculateDashboardRepricing, calculateDashboardManagementRepricing, createDashboardRepricing ,
                                              createRepricingLabelTransaction,
                                              createSnapshotRepricingLabelTransactionDepartmentStore
    PROPERTIES() READONLY countSelectSkus SHOWIF countSelectSkus() TODRAW sk                                          
    FILTERS inDashboardRepricing(sk), isParent(sg, sk) 

    OBJECTS p = Repricing
    PROPERTIES (p) READONLY isPosted, number, series, date, time, beforeDate,
                   nameDepartmentStore, countRepricingDetail, diffSumRepricingDetail,
                   diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
                   diffRetailSumRepricingDetail, numberDisposal, skipChangeLedger,
                   statusLabel BACKGROUND backgroundPrintLabelTransaction(p),
                   statusMachinery ON SHORTCUT createSnapshotMachineryPriceTransaction(p) BACKGROUND backgroundCreateMachineryPriceTransaction(p), 
                   note                      
               
    PROPERTIES (p) createLabelTransaction SHOWIF showPrintLabelTransaction(p), 
                   createSnapshotLabelTransaction 
                   
    PROPERTIES (p) createMachineryPriceTransaction SHOWIF showCreateMachineryPriceTransaction(p)
    PROPERTIES (p) TOOLBAR print, printXls                                          
    PROPERTIES (p) edit SHOWIF showEditUser(p)
    PROPERTIES (p) NEWSESSION NEW[UserRepricing]
    PROPERTIES (p) NEWSESSION deletep=DELETE SHOWIF showDeleteUser(p)    
                       
    FILTERGROUP filters FILTER 'Переоценки на дату' date(p)==toDate(t) 'F5' DEFAULT                         
    
    EVENTS
        ON CHANGE d clearDashboardRepricing()
;
DESIGN repricingDashboard {
    main {
        type = CONTAINERV;

        NEW topContainer {
            type = CONTAINERH;
            MOVE d.box;
            MOVE o.box;
            MOVE t.box;
        }
        NEW bodyContainer{
            type = SPLITV;
            fill = 1;
            NEW skuBox {
                type = SPLITH;
                fill = 1;
                MOVE skuTree.tree.box { caption = 'Группы SKU'; fill=0.5; }
                MOVE sk.box {
                    caption = 'Товары, для которых необходима переоценка';
                    PROPERTY(retailPricingPriceB(sk,d,t)) {
                        caption = 'Цена (текущая)';
                    }
                }
            }   
            NEW tanContainer {
                fill = 1;
                type = TABBED;
                MOVE p.box;   
                NEW actionContainer {
                    fill = 1;
                    caption = 'Действия';
                    NEW mainActionContainer {
                        fill = 1;
                        type = COLUMNS;
                        columns = 5;
//                        MOVE PROPERTY(createDashboardRepricing(d,o,t));
                        MOVE PROPERTY(createRepricingLabelTransaction(d,o,t));
                        MOVE PROPERTY(createSnapshotRepricingLabelTransactionDepartmentStore(d,o,t));                    
                    }
                }
            }
        }
        MOVE functions.box;
    }
}

@extendFormFilterStockAccess(d, repricingDashboard);
@extendFormFilterAccessStock(Repricing, p, repricingDashboard, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricingDashboard); 
NAVIGATOR {
    retailDashboardNavigator {
        ADD repricingDashboard;
    }
}