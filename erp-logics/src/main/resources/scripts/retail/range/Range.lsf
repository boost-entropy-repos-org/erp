MODULE Range;

REQUIRE Store, Sku, Barcode, PriceListStore, EmployeeSku, PriceListDashboardStore, SaleLedger, PurchasePack;

// Уровни ассортимента

NAVIGATOR {
    retailNavigator {
        NEW retailRangeNavigator 'Управление ассортиментом' {
        }
    }
}

// Ассортименты
CLASS Range 'Ассортимент';
TABLE range(Range);
name 'Название' = DATA VARISTRING[100] (Range) IN recognize;

TABLE rangeSkuGroup(Range, SkuGroup);
inData 'Вкл' = DATA BOOLEAN (Range, SkuGroup);

countSkuGroup 'Кол-во групп' = GROUP SUM 1 IF inData(Range r, SkuGroup g) BY r MATERIALIZED; 

inParent (range, parent) = GROUP SUM 1 IF inData(Range range, SkuGroup child) AND isParent(child, SkuGroup parent)
                              BY range, parent MATERIALIZED;

inChild (range, child) = GROUP SUM 1 IF inData(Range range, SkuGroup parent) AND isParent(SkuGroup child, parent)
                              BY range, child MATERIALIZED;
                              
inChild (Range range, Sku sku) = inChild(range, skuGroup(sku)); 

quantityChildWith (skuGroup, range) = GROUP SUM 1 IF inData(Range range, SkuGroup childSkuGroup) AND isParent(childSkuGroup, SkuGroup skuGroup) BY skuGroup, range MATERIALIZED;
quantityParentWith (skuGroup, range) = GROUP SUM 1 IF inData(Range range, SkuGroup parentSkuGroup) AND isParent(SkuGroup skuGroup, parentSkuGroup) BY skuGroup, range MATERIALIZED; 

backgroundIn 'Цвет' (Range range, SkuGroup skuGroup) = CASE 
    WHEN inData(range, skuGroup) THEN RGB(0,0,0)
    WHEN quantityChildWith (skuGroup,range) != descendantNumber(skuGroup) AND NOT quantityParentWith (skuGroup,range) THEN RGB(203,203,203);    



FORM range 'Ассортиментная матрица'
    OBJECTS r = Range PANEL
    PROPERTIES(r) name

    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    PROPERTIES inData(r, sg) BACKGROUND backgroundIn(r, sg)
    ORDER order(sg), skuGroupName
    
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT

    EDIT Range OBJECT r
;

DESIGN range {
    NEW pane {
        fill = 1;
        MOVE PANEL(r);
        NEW tabs {
            fill = 1;
            type = TABBED;
            NEW options {
                caption = 'Настройки';
                fill = 1;
                MOVE BOX(TREE skuTree) {
                    fill = 1;
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

@extendFormFilterSkuGroupAccess(range, sg);

FORM ranges 'Ассортиментные матрицы'
    OBJECTS d = DATE PANEL
    PROPERTIES(d) VALUE

    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER order(sg), skuGroupName
    
    OBJECTS r = Range
    PROPERTIES(r) READONLY name
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE 
    FILTERS inParent(r, sg) OR NOT countSkuGroup(r)
    ORDER name(r)
    
    LIST Range OBJECT r
;

DESIGN ranges {
    MOVE BOX(d);
    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE BOX(TREE skuTree) { caption = 'Группы товаров';}
        MOVE BOX(r) {
            fill = 2;        
        }
    }
    MOVE TOOLBARBOX;
}

countSkuGroup 'Кол-во групп' = GROUP SUM 1 IF inData(Range r, SkuGroup g) AND countAccess(Employee e, g) BY e, r; 
EXTEND FORM ranges FILTERS (r IS Range AND NOT ( limitAccess(currentUser()) AND countSkuGroup(r))) OR countSkuGroup(currentUser(), r);

NAVIGATOR {
    retailRangeNavigator {
        ADD ranges;
    }
}

// Версии

CLASS RangeRev 'Версия ассортиментной матрицы';
TABLE rangeRev(RangeRev);
dateTime 'Действует (с)' = DATA DATETIME (RangeRev) IN recognize;
dateTime(RangeRev v) <- currentDateTime() WHEN SET(v IS RangeRev);

date 'Действует (с)' (RangeRev v) = toDate(dateTime(v)) MATERIALIZED;

range 'Ассортиментная матрица' = DATA Range(RangeRev) NONULL AUTOSET;  
nameRange 'Ассортиментная матрица'(RangeRev v) = name(range(v)) IN recognize;

INDEX range(RangeRev v), date(v), v;
rangeRev 'Версия' = GROUP LAST RangeRev rev
                                       BY range(rev), DATE date
                                       ORDER date(rev), rev
                                       WHERE date(rev) <= (date AS DATE) COMPLEX;
                           
filterSupplier = DATA LOCAL LegalEntity();
nameFilterSupplier 'Поставщик' = name(filterSupplier());

retailPriceA 'Розничная цена (управленческая)' (Sku s, DepartmentStore d, RangeRev v) =  
    retailPriceA(s, d, dateTime(v));

markupA 'Розничная цена (надбавка)' (BasePriceListType pt, Sku s, DepartmentStore d, RangeRev v) =
    markupPriceA(pt, s, d, dateTime(v));

valueVAT 'НДС, %' (Sku s, Stock d, RangeRev v) =
    valueVAT(s, d, date(v));

priceA 'Цена' (LedgerPriceListType pt, Sku s, Stock st, RangeRev v)=  
    priceA(pt, s, st, dateTime(v));

nameCompanyA 'Поставщик' (LedgerPriceListType pt, Sku s, Stock st, RangeRev v)=  
    nameCompanyA(pt, s, st, dateTime(v));


currentBalanceDepartments 'Остаток (все магазины)' (sku) = GROUP SUM currentBalance(Sku sku, DepartmentStore stock) IF stock IS DepartmentStore  BY sku;
quantitySoldDepartments 'Продано за интервал (кол-во) (все магазины)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY sku, dateFrom, dateTo;
sumSoldDepartments 'Продано за интервал (сумма) (все магазины)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY sku, dateFrom, dateTo;

currentBalance 'Остаток (все магазины)' (sku, store) = GROUP SUM currentBalance(Sku sku, DepartmentStore stock) IF stock IS DepartmentStore  BY sku, store(stock);
quantitySold 'Продано за интервал (кол-во)' (store, sku, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY store(stock), sku, dateFrom, dateTo;
sumSold 'Продано за интервал (сумма)' (store, sku, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY store(stock), sku, dateFrom, dateTo;

dateTimeLastMoved 'Время последнего движения' = GROUP MAX dateTimeLastMoved (Sku sku, DepartmentStore stock) BY sku, store(stock);
dateLastMoved 'Дата последнего движения'= toDate(dateTimeLastMoved(Sku s,Store st));
                                                                                       
hasSkus 'Кол-во наименований по всему поставщику' (v, supplier, pt, d) = GROUP SUM 1 IF inChild(range(RangeRev v), Sku sku) 
    BY v, companyA(LedgerPriceListType pt, sku, Stock d, dateTime(v)), pt, d;
    
lastOrderBatch (sku, store) =
    GROUP LAST lastOrderBatch(Sku sku, DepartmentStore stock)
        BY sku, store(stock)
        ORDER dateTimeLastOrderBatch(sku, stock), lastOrderBatch(sku, stock)
        WHERE lastOrderBatch(sku, stock);
dateTimeLastOrderBatch 'Дата последнего прихода' (Sku sku,Store store) = dateTime(lastOrderBatch(sku,store));
dateLastOrderBatch 'Дата последнего прихода'= toDate(dateTimeLastOrderBatch(Sku s,Store st));

nameSupplierLastBatch 'Последний поставщик' (Sku sku,Store store) = nameSupplier(lastOrderBatch(sku,store)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

FORM currentBalanceSku 'Текущие остатки'
    OBJECTS s = Sku PANEL 
    PROPERTIES name(s) READONLY 
        
    OBJECTS st = Store
    PROPERTIES  READONLY name(st), currentBalance(s,st), dateTimeLastMoved(s,st), dateTimeLastOrderBatch(s,st)
    FILTERS currentBalance(s,st)
;
reviewCurrentBalance (Sku sku) = { SHOW currentBalanceSku OBJECTS s=sku ; }

FORM soldStoreSkuDateFromTo 'Продажи по магазинам'
    OBJECTS s = Sku PANEL 
    PROPERTIES name(s) READONLY 
    OBJECTS dates = (dFrom = DATE , dTo = DATE) PANEL
    PROPERTIES READONLY valFrom = VALUE(dFrom), valTo = VALUE(dTo)
        
    OBJECTS st = Store
    PROPERTIES  READONLY name(st), quantitySold(st,s,dFrom,dTo), sumSold(st,s,dFrom,dTo)
    FILTERS quantitySold(st,s,dFrom,dTo) OR sumSold(st,s,dFrom,dTo)
;
reviewSoldStoreDate (Sku sku, DATE dFrom, DATE dTo) = { SHOW soldStoreSkuDateFromTo OBJECTS s=sku, dFrom=dFrom, dTo=dTo ; }


FORM rangeRevSelectSuppliers 'Выбор поставщика'
    OBJECTS v = RangeRev PANEL
    OBJECTS p = PriceListType PANEL
    OBJECTS d = Stock PANEL
    
    OBJECTS l = LegalEntity
    PROPERTIES(l) READONLY name
    FILTERS hasSkus(v, l, p, d)
;

changeNameFilterSupplier(RangeRev v, PriceListType p, Stock d) = {
    DIALOG rangeRevSelectSuppliers OBJECTS v = v, p = p, d = d, l = filterSupplier() INPUT NULL DO
        filterSupplier() <- l;
}

backgroundRange = ABSTRACT CASE COLOR (Sku);

skipSwowDepartment = ABSTRACT BOOLEAN (RangeRev);
swowDepartment (RangeRev v) = v IS RangeRev AND NOT skipSwowDepartment(v);

FORM rangeRev 'Версия ассортиментной матрицы'
    OBJECTS v = RangeRev PANEL
    PROPERTIES(v) dateTime

    OBJECTS pt = DataPriceListType PANEL
    PROPERTIES(pt) SELECTOR name[PriceListType]

    OBJECTS d = Stock PANEL
    PROPERTIES(d) SELECTOR name SHOWIF swowDepartment(v)
    FILTERS isCompany(d)

    PROPERTIES() nameFilterSupplier ON CHANGE changeNameFilterSupplier(v, pt, d) 

    OBJECTS dates = (dFrom = DATE , dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
          
    OBJECTS s = Sku
    PROPERTIES(s) READONLY BACKGROUND backgroundRange(s) idBarcode, id SHOWIF showIDs(), name ON CONTEXTMENU showMovementSku(s, d) ON CONTEXTMENU showMovementPriceSku(s, d), nameUOM
    PROPERTIES(s) amountPack ON CHANGE changePack(s) 
    PROPERTIES READONLY    SHOWIF swowDepartment(v)  
                           nameCompanyA(pt, s, d, v),
                           priceA(pt, s, d, v),
                           retailPriceA(s, d, v) GRID,
                           markup(s, d) GRID,
                           valueVAT(s, d, v),
                           markupA(pt, s, d, v) GRID

    PROPERTIES READONLY SHOWIF swowDepartment(v) currentBalance(s,d), quantitySold(s,d,dFrom,dTo), sumSold(s,d,dFrom,dTo)
    PROPERTIES currentBalanceDepartments(s) ON CHANGE reviewCurrentBalance(s), quantitySoldDepartments(s,dFrom,dTo) ON CHANGE reviewSoldStoreDate(s, dFrom, dTo), 
               sumSoldDepartments(s,dFrom,dTo) ON CHANGE reviewSoldStoreDate(s, dFrom, dTo)               
                 
    FILTERS inChild(range(v), s),
            (filterSupplier() AND priceA(pt, s, d, filterSupplier(), dateTime(v))) OR 
                (s IS Sku AND NOT filterSupplier())
    
    FILTERGROUP active 
        FILTER 'Активный' active(s) 'F11' DEFAULT
    
    ORDER name(s)
            
    OBJECTS store = Store
    PROPERTIES  READONLY name(store), nameStoreType(store), currentBalance(s,store), dateLastMoved(s,store), 
                dateLastOrderBatch(s,store), nameSupplierLastBatch(s,store),
                quantitySold(store,s,dFrom,dTo), sumSold(store,s,dFrom,dTo)
    ORDER nameStoreType(store)
    FILTERS quantitySold(store,s,dFrom,dTo) OR sumSold(store,s,dFrom,dTo) OR currentBalance(s,store)         
    FILTERGROUP activeStore 
        FILTER 'Активный' active(store) 'F11' DEFAULT
                
          
    EDIT RangeRev OBJECT v
;

defaultDepartmentStore = DATA DepartmentStore();
nameDefaultDepartmentStore 'Отдел магазина для ассортиментных матриц по умолчанию' = name(defaultDepartmentStore());
EXTEND FORM options
    PROPERTIES() nameDefaultDepartmentStore
;
DESIGN options {
    pane {
        NEW range {
            caption = 'Ассортиментные матрицы';
            MOVE PROPERTY(nameDefaultDepartmentStore());
        }
    }
}

seekDefaultDepartmentStore = { SEEK rangeRev.d = defaultDepartmentStore(); }
EXTEND FORM rangeRev
    EVENTS ON INIT seekDefaultDepartmentStore()
;

seekDefaultPriceListType = { SEEK rangeRev.pt = defaultPriceListType(); }
EXTEND FORM rangeRev
    EVENTS ON INIT seekDefaultPriceListType()
;
overCopy = ABSTRACT LIST (RangeRev, RangeRev);
copy 'Копировать'(RangeRev pr) = {
	NEWSESSION {
	    NEW r = RangeRev {
	        range(r) <- range(pr);
	        overCopy(r,pr);
	        SHOW rangeRev OBJECTS v = r DOCKED;
	    }
	}
} TOOLBAR;

saved 'Сохранена' (Range r) = PREV(r IS Range);

skipShowEdit = ABSTRACT VALUE BOOLEAN (RangeRev);
skipShowDelete = ABSTRACT VALUE BOOLEAN (RangeRev);

showEdit (RangeRev v)  = v IS RangeRev AND NOT skipShowEdit(v);
showDelete (RangeRev v) = v IS RangeRev AND NOT skipShowDelete(v); 

show 'Просмотреть' (RangeRev v) = {
    NEWSESSION {
        SHOW rangeRev OBJECTS v = v DOCKED READONLY;
    }
} TOOLBAR;

EXTEND FORM range
    
    OBJECTS v = RangeRev
    PROPERTIES(v) READONLY dateTime
    PROPERTIES(v) NEWSESSION SHOWIF saved(r) NEW, show, editv = EDIT SHOWIF showEdit(v), copy, deletev = DELETE SHOWIF showDelete(v)
    FILTERS range(v) == r
;

DESIGN range {
    tabs {
        MOVE BOX(v) FIRST {
            caption = 'Версии';
        }
    }
}


createRangeRev 'Создать версию'(Range range, DATE date) = {
	NEWSESSION {
	    LOCAL rev = RangeRev();
	    rev () <- rangeRev(range, date);
	
	    NEW v = RangeRev {
	        range(v) <- range;
	        overCopy(v,rev ());
	        //level(v, Sku s) <- level(rev(), s);
	        SHOW rangeRev OBJECTS v=v DOCKED;
	    }
	}
} TOOLBAR;

EXTEND FORM ranges
    OBJECTS pt = DataPriceListType PANEL
    PROPERTIES(pt) SELECTOR name[PriceListType]

    OBJECTS ds = DepartmentStore PANEL
    PROPERTIES(ds) SELECTOR name
    FILTERS isCompany(ds)
    
    OBJECTS r1 = Range
    PROPERTIES(r1) READONLY name
    FILTERS inParent(r1, sg) OR NOT countSkuGroup(r1)       
    
    PROPERTIES  createRangeRev(r1,d)     
;

DESIGN ranges {
    pane {
        fill = 1;
        type = SPLITH;
        MOVE BOX(TREE skuTree) { caption = 'Групы товаров';}
        NEW tab {
            caption = 'Список';
            fill = 2;   
            type = TABBED;
            NEW range{
                caption = 'Ассортимент';
                MOVE BOX(r);                
            }
            NEW supplier{
                caption = 'Без поставщиков';
                fill = 1;
                NEW topTab {
                    type = CONTAINERH;
                    MOVE BOX(pt);
                    MOVE BOX(ds);
                }
                MOVE BOX(r1);
            }
            
        }        
    }
}
EXTEND FORM ranges FILTERS (r1 IS Range AND NOT limitAccess(currentUser())) OR countSkuGroup(currentUser(), r1);


@extendFormFilterSkuGroupAccess(ranges, sg);

// ----------------- Связь ассортиментов и магазинов --------------- //

useRange 'Использовать ассортиментную матрицу' = DATA BOOLEAN (StoreType);
EXTEND FORM chainStores
    PROPERTIES(s) useRange AFTER name(s)    
;
useRange 'Использовать ассортиментную матрицу' (Store s) = useRange(storeType(s)) MATERIALIZED; 
useRange 'Использовать ассортиментную матрицу' (DepartmentStore s) = useRange(store(s)) MATERIALIZED; 

in 'В ассортименте' = ABSTRACT BOOLEAN (Sku, Range, Store, DATE);
countRange 'В ассортименте' = GROUP SUM 1 IF in(Sku s, Range r, Store st, DATE d) BY s,st,d;
countRange 'В ассортименте' (Sku s, DepartmentStore ds, DATE d) = countRange(s, store(ds), d); 

in 'В ассортименте' (Sku sku, Range range, Store store) = in(sku, range, store, currentDate());

nameGroup 'Включенные группы'(r) = GROUP CONCAT name(SkuGroup g) IF inData(Range r,g), ',' BY r MINCHARWIDTH 50 PREFCHARWIDTH 50 ;

EXTEND FORM ranges PROPERTIES nameGroup(r);

EXTEND FORM ranges 
    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, id SHOWIF showIDs(),name, nameUOM, amountPack
;

DESIGN ranges {
    range{
        MOVE BOX(s);
    }
}

filterStoreType  = DATA LOCAL StoreType();
nameFilterStoreType 'Формат' = name(filterStoreType());          
filterStoreType (Store st) = storeType(st) == filterStoreType() OR NOT filterStoreType();       

FORM storeRange 'Ассортимент магазинов'
    OBJECTS d = DATE PANEL
    PROPERTIES(d) VALUE
     
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER order(sg), skuGroupName

    // По магазинам
    OBJECTS st = Store GRID 
    PROPERTIES READONLY name(st), nameStoreType(st), orderNumber(st)
//    ORDER nameStoreType(st), name(st)
    ORDER orderNumber(st)
    FILTERS active(st),
            filterStoreType(st)   
            
    PROPERTIES() nameFilterStoreType          

    OBJECTS sr = Range
    PROPERTIES(sr) READONLY name
    //PROPERTIES nameOverLevel(sr, st, d) BACKGROUND backgroundLevel(sr, st, d) ON CHANGE changeLevel(sr, st, d) ON CHANGEWYS changeWYSLevel(sr, st, d) COLUMNS (st) HEADER name(st)
    //PROPERTIES countSku(sr, st, d) COLUMNS (st) HEADER name(st) 
    ORDER name(sr)
    FILTERS inParent(sr, sg) OR NOT countSkuGroup(sr)

    OBJECTS ss = Sku GRID 
    PROPERTIES(ss) READONLY BACKGROUND backgroundRange(ss) idBarcode, name, nameUOM
    //PROPERTIES READONLY nameLevel(sr, ss, d)
    PROPERTIES(ss, st, d) READONLY countRange COLUMNS (st) HEADER name(st)
    //ORDER nameLevel(sr, ss, d), name(ss)
    //FILTERS level(sr, ss, d)

    // -------------- Ассортимент магазина ------------------ //
    OBJECTS ds = Store PANEL
    PROPERTIES (ds) name SELECTOR

    TREE treeGroup g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER order(g), name(g)
    FILTERGROUP inactiveD FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS sk = Sku 
    PROPERTIES (sk) READONLY idBarcode, id SHOWIF showIDs(), name
    //PROPERTIES statusRange(ds, sk, d)
    FILTERS isParent(g, sk) OR ss IS Sku AND NOT g, 
            countRange(sk, ds, d)

    OBJECTS rn = Range
    PROPERTIES READONLY name(rn)//, nameLevel(rn, sk, d), overDate(rn, st, d)
    PROPERTIES (rn) NEWSESSION EDIT
    //FILTERS countRange (rn, sk, ds, d)
;

DESIGN storeRange {
    NEW filters{
        type = CONTAINERH;
        MOVE BOX(d);
    }
    NEW tabPane{
        fill = 1;
        type = TABBED;
        NEW pane {
            fill = 1;
            type = SPLITH;
            caption = 'Назначение ассортимента';
            MOVE BOX(TREE skuTree) {
                caption = 'Группы товаров';
            }
            NEW setPane {
                fill = 2;               
                NEW storePane {
                    fill = 1;
                    caption = 'По магазинам';
                    MOVE PROPERTY (nameFilterStoreType());          
                    REMOVE BOX(st);

                    NEW storePane2 {    
                        fill = 1;
                        type = SPLITV ;
                        MOVE BOX(sr) {
                            fill = 2;
                        }
                        MOVE BOX(ss);
                    }    
                }
            }
        }
        NEW store {
            fill = 1;
            caption = 'Ассортимент по магазинам';
            MOVE BOX(ds);
            NEW skus {
                fill = 1;
                type = SPLITH;
                MOVE BOX(TREE treeGroup) {
                    caption = 'Группы товаров';
                }
                NEW storeRightPane {
                    fill = 2;
                    type = SPLITV;
                    MOVE BOX(sk){fill = 2;};
                    MOVE BOX(rn){fill = 1;};
                }
            }
        }        
    }

    MOVE TOOLBARBOX;
}
@extendFormFilterSkuGroupAccess(storeRange, sg);

NAVIGATOR {
    retailRangeNavigator {
        ADD storeRange;
    }
}

autoSetGroupRange 'Автоматически проставлять группы в матрицу при изменении группы товара' = DATA BOOLEAN (UserRole);
EXTEND FORM userRole PROPERTIES(ur) autoSetGroupRange;

DESIGN rangeRev {
    NEW rev {
        type = SPLITV;
        fill = 1;
        NEW top {            
            type = CONTAINERH;
            fill = 1;
            NEW top1 {                 
                type = CONTAINERV;
                MOVE BOX(v);
                NEW top11 {
                    type = CONTAINERV;
                    MOVE PANEL(s);
                    NEW supplier {
                        caption = 'Поставщик';
                        MOVE PROPERTY(nameFilterSupplier());
                    }
                    MOVE BOX(d);            
                } 
                NEW top12 {
                    type = CONTAINERV;
                    MOVE BOX(pt);
                    MOVE BOX(dates) {        
                        caption = 'Период реализации';
                        type = CONTAINERH;
                    }                
                }        
            }   
            NEW top2 {
                type = SPLITH;
                fill = 1;
  
                MOVE BOX(store) {
                    caption = 'Магазин остатки/продажи';
                    fill = 5;
                    PROPERTY (name(store)) {minimumCharWidth = 10; preferredCharWidth = 15;}
                    PROPERTY (nameStoreType(store)) {minimumCharWidth = 10; preferredCharWidth = 15;}
                    REMOVE TOOLBARBOX(store);
                }
            }

        }
        NEW header {
            //type = TABBED;
            fill = 2.5;
            NEW details {
                fill = 3;
                type = SPLITV;
                caption = 'Товары';
                MOVE BOX(s) {
                    fill = 2;
                    PROPERTY(priceA(pt, s, d, v)) {
                        caption = 'Цена закупки';
                    }  

                    PROPERTY(currentBalance(s,d)) { background = #F4FFBD; }  
                    PROPERTY(quantitySold(s,d,dFrom,dTo)) { background = #CCFFCC; }  
                    PROPERTY(sumSold(s,d,dFrom,dTo)) { background = #CCFFCC; }  
                    
                    PROPERTY(currentBalanceDepartments(s)) { background = #F4FFBD; }  
                    PROPERTY(quantitySoldDepartments(s,dFrom,dTo)) { background = #CCFFCC; }  
                    PROPERTY(sumSoldDepartments(s,dFrom,dTo)) { background = #CCFFCC; }          
                }                               
            }            
        }
    }
    MOVE TOOLBARBOX;
}