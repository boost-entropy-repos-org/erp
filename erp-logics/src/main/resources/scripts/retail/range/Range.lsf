MODULE Range;

REQUIRE Store, Sku, Barcode, PriceListStore, EmployeeSku, PriceListDashboardStore, SaleLedger, PurchasePack;

// Уровни ассортимента

CLASS RangeLevel 'Уровень ассортимента';
TABLE rangeLevel(RangeLevel);
nameRangeLevel 'Название' = DATA VARISTRING[10] (RangeLevel) IN recognize;
rangeLevelName (name) = GROUP AGGR (level) BY nameRangeLevel (level);


FORM rangeLevel 'Уровень ассортимента'
    OBJECTS l = RangeLevel FIXED PANEL
    PROPERTIES(l) nameRangeLevel

    EDIT RangeLevel OBJECT l
;

FORM rangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY nameRangeLevel
    PROPERTIES(l) ADDFORM, EDITFORM, DELETE TOOLBAR FORCE PANEL
;

FORM dialogRangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY nameRangeLevel
    
    DIALOG RangeLevel OBJECT l
;

NAVIGATOR {
    retailNavigator {
        NEW retailRangeNavigator 'Управление ассортиментом' {
            ADD rangeLevels;
        }
    }
}

// Ассортименты
CLASS Range 'Ассортимент';
TABLE range(Range);
nameRange 'Название' = DATA VARISTRING[100] (Range) IN recognize;

TABLE rangeSkuGroup(Range, SkuGroup);
inDataRangeSkuGroup 'Вкл' = DATA BOOLEAN (Range, SkuGroup);

countSkuGroupRange 'Кол-во групп' = GROUP SUM 1 IF inDataRangeSkuGroup(r, g) BY r PERSISTENT; 

inParentRangeSkuGroup (range, parent) = GROUP SUM 1 IF inDataRangeSkuGroup(range, child) AND isParentSkuGroupSkuGroup(child, parent)
                              BY range, parent PERSISTENT;

inChildRangeSkuGroup (range, child) = GROUP SUM 1 IF inDataRangeSkuGroup(range, parent) AND isParentSkuGroupSkuGroup(child, parent)
                              BY range, child PERSISTENT;
                              
inChildRangeSku (range, sku) = inChildRangeSkuGroup(range, skuGroupSku(sku)); 

quantityChildWithSkuGroupRange (skuGroup, range) = GROUP SUM 1 IF inDataRangeSkuGroup(range, childSkuGroup) AND isParentSkuGroupSkuGroup(childSkuGroup, skuGroup) BY skuGroup, range PERSISTENT;
quantityParentWithSkuGroupRange (skuGroup, range) = GROUP SUM 1 IF inDataRangeSkuGroup(range, parentSkuGroup) AND isParentSkuGroupSkuGroup(skuGroup, parentSkuGroup) BY skuGroup, range PERSISTENT; 

backgroundInRangeSkuGroup 'Цвет' (range, skuGroup) = CASE 
    WHEN inDataRangeSkuGroup(range, skuGroup) THEN RGB(0,0,0)
    WHEN quantityChildWithSkuGroupRange (skuGroup,range) != descendantNumberSkuGroup(skuGroup) AND NOT quantityParentWithSkuGroupRange (skuGroup,range) THEN RGB(203,203,203);    

TABLE rangeRangeLevel(Range, RangeLevel);
inRangeRangeLevel 'Вкл' = DATA BOOLEAN (Range, RangeLevel);

FORM range 'Ассортиментная матрица'
    OBJECTS r = Range FIXED PANEL
    PROPERTIES(r) nameRange

    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY nameRangeLevel
    PROPERTIES(r, l) inRangeRangeLevel

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    PROPERTIES inDataRangeSkuGroup(r, sg) BACKGROUND backgroundInRangeSkuGroup(r, sg)
    ORDER BY orderSkuGroup(sg), skuGroupName
    
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT

    EDIT Range OBJECT r
;

DESIGN range {
    NEW pane {
        fill = 1;
        MOVE r.panel;
        NEW tabs {
            fill = 1;
            type = TABBED;
            NEW options {
                caption = 'Настройки';
                fill = 1;
                type = SPLITH;
                MOVE l.box;
                MOVE skuTree.tree.box {
                    fill = 4;
                }
            }
        }
    }
    MOVE functions.box;
}

@extendFormFilterSkuGroupAccess(range, sg);

FORM ranges 'Ассортиментные матрицы'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) OBJVALUE

    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg), skuGroupName
    
    OBJECTS r = Range
    PROPERTIES(r) READONLY nameRange
    PROPERTIES(r) ADDFORM, EDITFORM, DELETE TOOLBAR FORCE PANEL
    FILTERS inParentRangeSkuGroup(r, sg) OR NOT countSkuGroupRange(r)
    
    DIALOG Range OBJECT r
;

DESIGN ranges {
    MOVE d.box;
    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box { caption = 'Групы товаров';}
        MOVE r.box {
            fill = 2;        
        }
    }
    MOVE functions.box;
}

countSkuGroupEmployeeRange 'Кол-во групп' = GROUP SUM 1 IF inDataRangeSkuGroup(r, g) AND countAccessEmployeeSkuGroup(e, g) BY e, r; 
EXTEND FORM ranges FILTERS (r IS Range AND NOT limitAccessEmployee(currentUser())) OR countSkuGroupEmployeeRange(currentUser(), r);

NAVIGATOR {
    retailRangeNavigator {
        ADD ranges;
    }
}

// Версии

CLASS RangeRev 'Версия ассортиментной матрицы';
TABLE rangeRev(RangeRev);
dateTimeRangeRev 'Действует (с)' = DATA DATETIME (RangeRev) IN recognize;
dateTimeRangeRev(v) <- currentDateTime() WHEN SET(v IS RangeRev);

dateRangeRev 'Действует (с)' (v) = toDate(dateTimeRangeRev(v)) PERSISTENT;

rangeRangeRev 'Ассортиментная матрица' = DATA Range(RangeRev) NOT NULL AUTOSET;  

rangeRevRangeDate 'Версия' = GROUP LAST rev
                                       BY rangeRangeRev(rev), date
                                       ORDER dateTimeRangeRev(rev), rev
                                       WHERE dateRangeRev(rev) <= (date AS DATE) COMPLEX;
                           
TABLE rangeRevSku(RangeRev, Sku);
levelRangeRevSku = DATA RangeLevel(RangeRev, Sku);
nameLevelRangeRevSku 'Уровень' (r, s)= nameRangeLevel(levelRangeRevSku(r, s));

levelRangeSkuDate(r, s, d) = levelRangeRevSku(rangeRevRangeDate(r, d), s);
nameLevelRangeSkuDate 'Уровень' (r, s, d) = nameRangeLevel(levelRangeSkuDate(r, s, d));

inRangeRevRangeLevel 'Вкл' = inRangeRangeLevel(rangeRangeRev(v), l);

CONSTRAINT levelRangeRevSku(r, s) AND NOT inRangeRevRangeLevel(r, levelRangeRevSku(r, s))
    CHECKED BY levelRangeRevSku 
    MESSAGE 'Уровень ассортимента для товара не соответствует типу ассортимента';

countSkuRangeRev 'Кол-во товаров' = GROUP SUM 1 IF levelRangeRevSku(r, s) BY r; 

countSkuRangeRevRangeLevel 'Кол-во товаров' = GROUP SUM 1 BY r, levelRangeRevSku(r, s);

countRecSkuRangeRevRangeLevel 'Кол-во товаров' = GROUP SUM countSkuRangeRevRangeLevel(r, l) IF l <= (level AS RangeLevel) BY r, level;

countSkuRangeDate 'Кол-во товаров' (r, d) = countSkuRangeRev(rangeRevRangeDate(r, d));
countSkuRangeRangeLevelDate 'Кол-во товаров' (r, l, d)= countSkuRangeRevRangeLevel(rangeRevRangeDate(r, d), l);

filterSupplier = DATA LOCAL LegalEntity();
nameFilterSupplier 'Поставщик' = nameLegalEntity(filterSupplier());

retailPriceASkuDepartmentStoreRangeRev 'Розничная цена (управленческая)' (s, d, v) =  
    retailPriceASkuDepartmentStoreDateTime(s, d, dateTimeRangeRev(v));

markupPriceASkuDepartmentStoreRangeRev 'Розничная цена (надбавка)' (pt, s, d, v) =
    markupPriceABasePriceListTypeSkuDepartmentStoreDateTime(pt, s, d, dateTimeRangeRev(v));

valueVATSkuStockRangeRev 'НДС, %' (s, d, v) =
    valueVATSkuStockDate(s, d, dateRangeRev(v));

priceALedgerPriceListTypeSkuStockRangeRev 'Цена' (pt, s, st, v)=  
    priceALedgerPriceListTypeSkuStockDateTime(pt, s, st, dateTimeRangeRev(v));

nameCompanyALedgerPriceListTypeSkuStockRangeRev 'Поставщик' (pt, s, st, v)=  
    nameCompanyALedgerPriceListTypeSkuStockDateTime(pt, s, st, dateTimeRangeRev(v));


currentBalanceDepartmentsSku 'Остаток (все магазины)' (sku) = GROUP SUM currentBalanceSkuStock(sku, stock) IF stock IS DepartmentStore  BY sku;
quantitySoldDepartmentsSkuDateFromTo 'Продано за интервал (кол-во) (все магазины)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo AND stock IS DepartmentStore
        BY sku, dateFrom, dateTo;
sumSoldDepartmentsSkuDateFromTo 'Продано за интервал (сумма) (все магазины)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo AND stock IS DepartmentStore
        BY sku, dateFrom, dateTo;

currentBalanceSkuStore 'Остаток (все магазины)' (sku, store) = GROUP SUM currentBalanceSkuStock(sku, stock) IF stock IS DepartmentStore  BY sku, storeDepartmentStore(stock);
quantitySoldStoreSkuDateFromTo 'Продано за интервал (кол-во)' (store, sku, dateFrom, dateTo) = GROUP SUM
        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo AND stock IS DepartmentStore
        BY storeDepartmentStore(stock), sku, dateFrom, dateTo;
sumSoldStoreSkuDateFromTo 'Продано за интервал (сумма)' (store, sku, dateFrom, dateTo) = GROUP SUM
        sumSoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo AND stock IS DepartmentStore
        BY storeDepartmentStore(stock), sku, dateFrom, dateTo;

dateTimeLastMovedSkuStore 'Время последнего движения' = GROUP MAX dateTimeLastMovedSkuStock (sku, stock) BY sku, storeDepartmentStore(stock);
dateLastMovedSkuStore 'Дата последнего движения'= toDate(dateTimeLastMovedSkuStore(s,st));
                                                                                       
priceBLedgerPriceListTypeSkuStoreDateTime 'Цена' (type, sku, store, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), storeDepartmentStore(stockPriceListLedger(ledger)), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;                                                                                        
                                                                                        
lastAccountPriceSkuStore 'Учетная цена' (sku, store) = priceBLedgerPriceListTypeSkuStoreDateTime(SystemLedgerPriceListType.accountPriceListType,sku,store,currentDateTime());;                                                                                        

countSkusRangeRevRangeLevel 'Кол-во наименований' = GROUP SUM 1 BY v, levelRangeRevSku(v,sku);

countSkusRangeRevSupplier 'Кол-во наименований (всего)' (v, supplier, pt, d) = GROUP SUM 1 IF levelRangeRevSku(v, sku)
    BY v, companyALedgerPriceListTypeSkuStockDateTime(pt, sku, d, dateTimeRangeRev(v)), pt, d;

hasSkusRangeRevSupplier 'Кол-во наименований по всему поставщику' (v, supplier, pt, d) = GROUP SUM 1 IF inChildRangeSku(rangeRangeRev(v), sku) 
    BY v, companyALedgerPriceListTypeSkuStockDateTime(pt, sku, d, dateTimeRangeRev(v)), pt, d;
    
countSkusRangeRevRangeLevelSupplier 'Кол-во наименований' (v,l,supplier,pt,d) = GROUP SUM 1
    BY v, levelRangeRevSku(v, sku), companyALedgerPriceListTypeSkuStockDateTime(pt, sku, d, dateTimeRangeRev(v)), pt, d;

lastOrderBatchSkuStore (sku, store) =
    GROUP LAST lastOrderBatchSkuStock(sku, stock)
        BY sku, storeDepartmentStore(stock)
        ORDER dateTimeLastOrderBatchSkuStock(sku, stock), lastOrderBatchSkuStock(sku, stock)
        WHERE lastOrderBatchSkuStock(sku, stock);
dateTimeLastOrderBatchSkuStore 'Дата последнего прихода' (sku,store) = dateTimeBatch(lastOrderBatchSkuStore(sku,store));
dateLastOrderBatchSkuStore 'Дата последнего прихода'= toDate(dateTimeLastOrderBatchSkuStore(s,st));

nameSupplierLastBatchSkuStore 'Последний поставщик' (sku,store) = nameSupplierBatch(lastOrderBatchSkuStore(sku,store)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

FORM currentBalanceSku 'Текущие остатки'
    OBJECTS s = Sku FIXED PANEL 
    PROPERTIES nameSku(s) READONLY 
        
    OBJECTS st = Store
    PROPERTIES  READONLY nameStore(st), currentBalanceSkuStore(s,st), dateTimeLastMovedSkuStore(s,st), dateTimeLastOrderBatchSkuStore(s,st), lastAccountPriceSkuStore(s,st)
    FILTERS currentBalanceSkuStore(s,st)
;
reviewCurrentBalanceSku (sku) = ACTION FORM currentBalanceSku OBJECTS s=sku MODAL;

FORM soldStoreSkuDateFromTo 'Продажи по магазинам'
    OBJECTS s = Sku FIXED PANEL 
    PROPERTIES nameSku(s) READONLY 
    OBJECTS dates = (dFrom = DATE , dTo = DATE) FIXED PANEL
    PROPERTIES READONLY valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)
        
    OBJECTS st = Store
    PROPERTIES  READONLY nameStore(st), quantitySoldStoreSkuDateFromTo(st,s,dFrom,dTo), sumSoldStoreSkuDateFromTo(st,s,dFrom,dTo)
    FILTERS quantitySoldStoreSkuDateFromTo(st,s,dFrom,dTo) OR sumSoldStoreSkuDateFromTo(st,s,dFrom,dTo)
;
reviewSoldStoreSkuDateFromTo (sku, dFrom, dTo) = ACTION FORM soldStoreSkuDateFromTo OBJECTS s=sku, dFrom=dFrom, dTo=dTo MODAL;

TABLE rangeRevRangeLevelSku (RangeRev, RangeLevel, Sku);
quantityShelfRangeRevRangeLevelSku 'Количество на полке' = DATA INTEGER (RangeRev, RangeLevel, Sku);

nameQuantityRangeLevel (rl) = CONCAT ' / ', '('+nameRangeLevel(rl)+')', 'к-во на полке'; 

FORM rangeRevSelectSuppliers 'Выбор поставщика'
    OBJECTS v = RangeRev FIXED PANEL
    OBJECTS p = PriceListType FIXED PANEL
    OBJECTS d = DepartmentStore FIXED PANEL
    
    OBJECTS l = LegalEntity
    PROPERTIES(l) READONLY nameLegalEntity
    FILTERS hasSkusRangeRevSupplier(v, l, p, d)
;

changeNameFilterSupplier = ACTION (v, p, d) {
    FORM rangeRevSelectSuppliers OBJECTS v = v, p = p, d = d DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
        filterSupplier() <- chosenObject('l');
    } ELSE IF formResult() == FormResult.drop THEN {
        filterSupplier() <- NULL;
    }
}

FORM rangeRev 'Версия ассортиментной матрицы'
    OBJECTS v = RangeRev FIXED PANEL
    PROPERTIES(v) dateTimeRangeRev

    OBJECTS pt = DataPriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType

    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES(d) SELECTOR nameDepartmentStore

    PROPERTIES() nameFilterSupplier ON CHANGE changeNameFilterSupplier(v, pt, d) 

    OBJECTS dates = (dFrom = DATE , dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)
    
    OBJECTS rl = RangeLevel    
    FILTERS inRangeRevRangeLevel(v, rl)     
    
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, idSku SHOWIF showIDs(),nameSku, nameUOMSku
    PROPERTIES(s) amountPackSku ON CHANGE changePackSku(s) 
    PROPERTIES READONLY    nameCompanyALedgerPriceListTypeSkuStockRangeRev(pt, s, d, v),
                           priceALedgerPriceListTypeSkuStockRangeRev(pt, s, d, v),
                           retailPriceASkuDepartmentStoreRangeRev(s, d, v),
                           markupSkuDepartmentStore(s, d),
                           valueVATSkuStockRangeRev(s, d, v),
                           markupPriceASkuDepartmentStoreRangeRev(pt, s, d, v)
    PROPERTIES(v, s) nameLevelRangeRevSku
    PROPERTIES READONLY currentBalanceSkuStock(s,d), quantitySoldSkuStockDateFromTo(s,d,dFrom,dTo), sumSoldSkuStockDateFromTo(s,d,dFrom,dTo)
    PROPERTIES currentBalanceDepartmentsSku(s) ON CHANGE reviewCurrentBalanceSku(s), quantitySoldDepartmentsSkuDateFromTo(s,dFrom,dTo) ON CHANGE reviewSoldStoreSkuDateFromTo(s, dFrom, dTo), 
               sumSoldDepartmentsSkuDateFromTo(s,dFrom,dTo) ON CHANGE reviewSoldStoreSkuDateFromTo(s, dFrom, dTo)
               
    PROPERTIES quantityShelfRangeRevRangeLevelSku(v,rl,s) COLUMNS (rl) HEADER nameQuantityRangeLevel(rl)
              
    FILTERS inChildRangeSku(rangeRangeRev(v), s),
            (filterSupplier() AND priceALedgerPriceListTypeSkuStockCompanyDateTime(pt, s, d, filterSupplier(), dateTimeRangeRev(v))) OR 
                (s IS Sku AND NOT filterSupplier())
    
    FILTERGROUP active 
        FILTER 'Активный' activeSku(s) 'F11' DEFAULT
    
    ORDER BY nameSku(s)
    
    FILTERGROUP filters
        FILTER 'Включен' levelRangeRevSku(v, s)  DEFAULT
        FILTER 'Без поставщиков' levelRangeRevSku(v, s) AND NOT companyALedgerPriceListTypeSkuStockDateTime(pt, s, d, dateTimeRangeRev(v))
        
    OBJECTS store = Store
    PROPERTIES  READONLY nameStore(store), nameStoreTypeStore(store), currentBalanceSkuStore(s,store), dateLastMovedSkuStore(s,store), 
                dateLastOrderBatchSkuStore(s,store), nameSupplierLastBatchSkuStore(s,store), lastAccountPriceSkuStore(s,store),
                quantitySoldStoreSkuDateFromTo(store,s,dFrom,dTo), sumSoldStoreSkuDateFromTo(store,s,dFrom,dTo)
    ORDER BY nameStoreTypeStore(store)
    FILTERS quantitySoldStoreSkuDateFromTo(store,s,dFrom,dTo) OR sumSoldStoreSkuDateFromTo(store,s,dFrom,dTo) OR currentBalanceSkuStore(s,store)         
          
    OBJECTS l = RangeLevel
    PROPERTIES READONLY nameRangeLevel(l), countSkusRangeRevRangeLevel(v,l)  
    FILTERS inRangeRevRangeLevel(v, l)  
   
    OBJECTS l2 = RangeLevel FIXED GRID
    FILTERS inRangeRevRangeLevel(v, l2)  

    OBJECTS su = LegalEntity
    PROPERTIES READONLY nameLegalEntity(su), countSkusRangeRevSupplier(v, su, pt, d), countSkusRangeRevRangeLevelSupplier(v, l2, su, pt, d) COLUMNS (l2) HEADER nameRangeLevel(l2) 
    ORDER BY nameLegalEntity(su)
    FILTERS countSkusRangeRevSupplier(v, su, pt, d)         
          
    EDIT RangeRev OBJECT v
;

defaultDepartmentStore = DATA DepartmentStore();
nameDefaultDepartmentStore 'Отдел магазина для ассортиментных матриц по умолчанию' = nameDepartmentStore(defaultDepartmentStore());
EXTEND FORM options
    PROPERTIES() nameDefaultDepartmentStore
;
DESIGN options {
    pane {
        NEW range {
            caption = 'Ассортиментные матрицы';
            MOVE PROPERTY(nameDefaultDepartmentStore());
        }
        
    }
}

seekDefaultDepartmentStore = ACTION SEEK rangeRev.d defaultDepartmentStore();
EXTEND FORM rangeRev
    EVENTS ON INIT seekDefaultDepartmentStore()
;

seekDefaultPriceListType = ACTION SEEK rangeRev.pt defaultPriceListType();
EXTEND FORM rangeRev
    EVENTS ON INIT seekDefaultPriceListType()
;

copyRangeRev 'Копировать' = ACTION (pr) NESTEDSESSION {
    FOR ADDOBJ r = RangeRev DO {
        rangeRangeRev(r) <- rangeRangeRev(pr);
        levelRangeRevSku(r, s) <- levelRangeRevSku(pr, s);
        FORM rangeRev OBJECTS v = r MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM range
    OBJECTS vl = RangeLevel FIXED GRID
    FILTERS inRangeRangeLevel(r, vl)
    
    OBJECTS v = RangeRev
    PROPERTIES(v) READONLY dateTimeRangeRev, countSkuRangeRev
    PROPERTIES READONLY countSkuRangeRevRangeLevel(v, vl) COLUMNS (vl) HEADER nameRangeLevel(vl) 
    PROPERTIES(v) ADDNESTEDFORM, EDITNESTEDFORM, copyRangeRev, DELETESESSION TOOLBAR FORCE PANEL
    FILTERS rangeRangeRev(v) == r
;

DESIGN range {
    tabs {
        MOVE v.box FIRST {
            caption = 'Версии';
        }
    }
}

countSkuNotSupplierTypeDepartmentStoreRangeRev 'Кол-во товаров без поставщика' = GROUP SUM 1 IF levelRangeRevSku(v, sku) AND pt IS DataPriceListType AND d IS DepartmentStore 
    AND NOT companyALedgerPriceListTypeSkuStockDateTime(pt, sku, d, dateTimeRangeRev(v)) 
        BY pt, d, v; 
calcCountSkuNotSupplierTypeDepartmentStoreRangeDate 'Кол-во товаров без поставщика' (pt, d, r, dt) = countSkuNotSupplierTypeDepartmentStoreRangeRev(pt, d , rangeRevRangeDate(r, dt));

countSkuNotSupplierTypeDepartmentStoreRangeDate 'Кол-во товаров без поставщика' = DATA LOCAL INTEGER (DataPriceListType, DepartmentStore, Range, DATE);

fillCountSkuNotSupplier 'Обновить' = ACTION (pt, d, dt) {
    countSkuNotSupplierTypeDepartmentStoreRangeDate(pt, d, r, dt) <- calcCountSkuNotSupplierTypeDepartmentStoreRangeDate(pt, d, r, dt) WHERE r IS Range;   
}
createRangeRevRangeDate 'Создать версию' = ACTION (range, date) NEWSESSION {
    LOCAL rev = RangeRev();
    rev () <- rangeRevRangeDate(range, date);

    FOR ADDOBJ v = RangeRev DO {
        rangeRangeRev(v) <- range;
        levelRangeRevSku(v, s) <- levelRangeRevSku(rev(), s);
        FORM rangeRev OBJECTS v=v MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM ranges
    OBJECTS vl = RangeLevel FIXED GRID

    PROPERTIES READONLY countSkuRangeDate(r, d)
    PROPERTIES READONLY countSkuRangeRangeLevelDate(r, vl, d) TODRAW r COLUMNS (vl) HEADER nameRangeLevel(vl) 

    OBJECTS pt = DataPriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType

    OBJECTS ds = DepartmentStore FIXED PANEL
    PROPERTIES(ds) SELECTOR nameDepartmentStore
    FILTERS isCompanyStock(ds)
    
    OBJECTS r1 = Range
    PROPERTIES(r1) READONLY nameRange
    FILTERS inParentRangeSkuGroup(r1, sg) OR NOT countSkuGroupRange(r1)        
    
    PROPERTIES READONLY countSkuNotSupplierTypeDepartmentStoreRangeDate(pt,ds,r1,d)
    PROPERTIES fillCountSkuNotSupplier(pt, ds, d) TODRAW r1 TOOLBAR , createRangeRevRangeDate(r1,d) 
    
    FILTERGROUP notSupplier
        FILTER 'Без поставщиков' countSkuNotSupplierTypeDepartmentStoreRangeDate(pt, ds, r1, d) DEFAULT 
    
;

DESIGN ranges {
    pane {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box { caption = 'Групы товаров';}
        NEW tab {
            caption = 'Список';
            fill = 2;   
            type = TABBED;
            NEW range{
                caption = 'Ассортимент';
                MOVE r.box;                
            }
            NEW supplier{
                caption = 'Без поставщиков';
                fill = 1;
                NEW topTab {
                    type = CONTAINERH;
                    MOVE pt.box;
                    MOVE ds.box;
                }
                MOVE r1.box;
            }
            
        }        
    }
}
EXTEND FORM ranges FILTERS (r1 IS Range AND NOT limitAccessEmployee(currentUser())) OR countSkuGroupEmployeeRange(currentUser(), r1);


@extendFormFilterSkuGroupAccess(ranges, sg);

// ----------------- Связь ассортиментов и магазинов --------------- //

useRangeStoreType 'Использовать ассортиментную матрицу' = DATA BOOLEAN (StoreType);
EXTEND FORM chainStores
    PROPERTIES(s) useRangeStoreType AFTER nameStoreType(s)    
;
useRangeStore 'Использовать ассортиментную матрицу' (s) = useRangeStoreType(storeTypeStore(s)) PERSISTENT; 
useRangeDepartmentStore 'Использовать ассортиментную матрицу' (s) = useRangeStore(storeDepartmentStore(s)) PERSISTENT; 

TABLE rangeStoreTypeDate(Range, StoreType, DATE);
dataLevelRangeStoreTypeDate = DATA RangeLevel (Range, StoreType, DATE);
excludeLevelRangeStoreTypeDate = DATA BOOLEAN (Range, StoreType, DATE);

CONSTRAINT dataLevelRangeStoreTypeDate(r, t, d) AND NOT inRangeRangeLevel(r, dataLevelRangeStoreTypeDate(r, t, d))
    CHECKED BY dataLevelRangeStoreTypeDate
    MESSAGE 'Уровень ассортимента для формата магазина не соответствует типу ассортимента';

levelRangeStoreTypeDate (r, t, d) = GROUP LAST dataLevelRangeStoreTypeDate(range, storeType, dateIn)
                                              BY range, storeType, date
                                              ORDER dateIn
                                              WHERE (dataLevelRangeStoreTypeDate(range, storeType, dateIn) OR excludeLevelRangeStoreTypeDate(range, storeType, dateIn)) AND dateIn <= (date AS DATE); 

//levelRangeStoreTypeDate(r, t, d) = OVERRIDE lastLevelRangeStoreTypeDate(r, t, d), dataLevelRangeStoreTypeDate(r, t, d);  
nameLevelRangeStoreTypeDate 'Уровень' (r, t, d)= nameRangeLevel(levelRangeStoreTypeDate(r, t, d)); 

changeLevelRangeStoreTypeDate (r, t, d)= ACTION (r, t, d) {
    REQUEST OBJECT l
        IF levelRangeStoreTypeDate(r, t, d) THEN {
            FORM dialogRangeLevels OBJECTS l = levelRangeStoreTypeDate(r, t, d) CONTEXTFILTER l = dataLevelRangeStoreTypeDate(r, t, d) DIALOG SHOWDROP;
        } ELSE {
            FORM dialogRangeLevels CONTEXTFILTER l = dataLevelRangeStoreTypeDate(r, t, d) DIALOG SHOWDROP;
        }        
    IF formResult() == FormResult.ok THEN {
        dataLevelRangeStoreTypeDate (r, t, d) <- requestedObject();
        excludeLevelRangeStoreTypeDate (r, t, d) <- NULL;
    } ELSE IF formResult() == FormResult.drop THEN {
        dataLevelRangeStoreTypeDate (r, t, d) <- NULL;
        excludeLevelRangeStoreTypeDate (r, t, d) <- TRUE;
    }
}

backgroundLevelRangeStoreTypeDate(range, storeType, dateIn) = (dataLevelRangeStoreTypeDate(range, storeType, dateIn) OR excludeLevelRangeStoreTypeDate(range, storeType, dateIn));

countRangeSkuStoreTypeDate 'В ассортименте' (s, t, d) = GROUP SUM 1 IF levelRangeStoreTypeDate(range, t, d) >= levelRangeSkuDate(range, s, d) BY s, t, d;
countRangeSkuStoreDate 'В ассортименте' (s, st, d) = countRangeSkuStoreTypeDate(s, storeTypeStore(st), d);  
countRangeSkuDepartmentStoreDate 'В ассортименте' (s, ds, d) = countRangeSkuStoreTypeDate(s, storeTypeDepartmentStore(ds), d); 

countSkuRangeStoreTypeDate 'Кол-во товаров' (r, t, d) = countRecSkuRangeRevRangeLevel(rangeRevRangeDate(r, d), levelRangeStoreTypeDate(r, t, d));
     
quantityShelfRangeStoreTypeSkuDate 'Количество на полке'  = GROUP SUM quantityShelfRangeRevRangeLevelSku(rangeRevRangeDate(range, date), levelRangeStoreTypeDate(range, type, date), sku) 
        BY range, type, sku, date;

quantityShelfRangeStoreSkuDate 'Количество на полке'  (range, store, sku, date) =  quantityShelfRangeStoreTypeSkuDate(range, storeTypeStore(store), sku, date);   

quantityShelfStoreSkuDate 'Количество на полке'  (store, sku, date) = GROUP SUM quantityShelfRangeStoreSkuDate(r, st, sk, d) BY st, sk, d;   
quantityShelfDepartmentStoreSkuDate 'Количество на полке'  (d, sku, date) = quantityShelfStoreSkuDate(storeDepartmentStore(d), sku, date);   

TABLE rangeStoreDate(Range, Store, DATE);
dataLevelRangeStoreDate = DATA RangeLevel (Range, Store, DATE);
excludeLevelRangeStoreDate = DATA BOOLEAN (Range, Store, DATE);
   
CONSTRAINT dataLevelRangeStoreDate(r, st, d) AND NOT inRangeRangeLevel(r, dataLevelRangeStoreDate(r, st, d))
    CHECKED BY dataLevelRangeStoreDate
    MESSAGE 'Уровень ассортимента для магазина не соответствует типу ассортимента';

levelRangeStoreDate (r, st, d) = GROUP LAST dataLevelRangeStoreDate(range, st, dateIn)
                                              BY range, st, date
                                              ORDER dateIn
                                              WHERE (dataLevelRangeStoreDate(range, st, dateIn) OR excludeLevelRangeStoreDate(range, st, dateIn)) AND dateIn <= (date AS DATE); 

overLevelRangeStoreDate(r, st, d) = OVERRIDE levelRangeStoreTypeDate(r, storeTypeStore(st), d), levelRangeStoreDate(r, st, d);  
nameOverLevelRangeStoreDate 'Уровень (перегруженный)' (r, st, d)= nameRangeLevel(overLevelRangeStoreDate(r, st, d));               
nameLevelRangeStoreDate 'Уровень' (r, st, d)= nameRangeLevel(levelRangeStoreDate(r, st, d));               
 
changeLevelRangeStoreDate (r, st, d)= ACTION (r, st, d) {
    REQUEST OBJECT l
        IF levelRangeStoreDate(r, st, d) THEN {
            FORM dialogRangeLevels OBJECTS l = levelRangeStoreDate(r, st, d) CONTEXTFILTER l = dataLevelRangeStoreDate(r, st, d) DIALOG SHOWDROP;
        } ELSE {
            FORM dialogRangeLevels CONTEXTFILTER l = dataLevelRangeStoreDate(r, st, d) DIALOG SHOWDROP;
        }        
    IF formResult() == FormResult.ok THEN {
        dataLevelRangeStoreDate (r, st, d) <- requestedObject();
        excludeLevelRangeStoreDate (r, st, d) <- NULL;
    } ELSE IF formResult() == FormResult.drop THEN {
        dataLevelRangeStoreDate (r, st, d) <- NULL;
        excludeLevelRangeStoreDate (r, st, d) <- TRUE;
    }
}              
backgroundLevelRangeStoreDate(range, store, dateIn) = (dataLevelRangeStoreDate(range, store, dateIn) OR excludeLevelRangeStoreDate(range, store, dateIn));
              
FORM storeRange 'Ассортимент магазинов'
    OBJECTS dc = (d = DATE, c = ChainStores) FIXED PANEL
    PROPERTIES(d) OBJVALUE
    PROPERTIES(c) SELECTOR nameChainStores
     
    OBJECTS t = StoreType FIXED GRID
    FILTERS chainStoresStoreType(t) == c
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg), skuGroupName
    OBJECTS r = Range
    PROPERTIES(r) READONLY nameRange
    PROPERTIES(r, t, d) nameLevelRangeStoreTypeDate COLUMNS (t) HEADER nameStoreType(t) BACKGROUND backgroundLevelRangeStoreTypeDate(r, t, d) ON CHANGE changeLevelRangeStoreTypeDate(r, t, d),
                        countSkuRangeStoreTypeDate COLUMNS(t) HEADER nameStoreType(t)
    FILTERS inParentRangeSkuGroup(r, sg) OR NOT countSkuGroupRange(r)
    
    OBJECTS s = Sku FIXED GRID 
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, nameUOMSku
    PROPERTIES(s, t, d) READONLY countRangeSkuStoreTypeDate COLUMNS (t) HEADER nameStoreType(t)
    FILTERS levelRangeSkuDate(r, s, d) 
    
    OBJECTS st = Store FIXED GRID 
    PROPERTIES nameStore(st) READONLY, nameStoreTypeStore(st) READONLY, nameOverLevelRangeStoreDate(r, st, d), nameLevelRangeStoreDate(r, st, d)  BACKGROUND backgroundLevelRangeStoreDate(r, st, d) ON CHANGE changeLevelRangeStoreDate(r, st, d)
;

DESIGN storeRange {
    MOVE dc.box;
    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box {
            caption = 'Группы товаров';
        }
        NEW rightPane {
            fill = 2;
            type = SPLITV;
            MOVE r.box {
                fill = 2;
                PROPERTY(countSkuRangeStoreTypeDate(r, t, d)) {
                    background = #FFEEFF;
                }
            }
            NEW rightPane1 {
                fill = 1;
                type = TABBED ;                
                MOVE st.box;
                MOVE s.box;
            }             
        }
    }
    MOVE functions.box;
}
@extendFormFilterSkuGroupAccess(storeRange, sg);

NAVIGATOR {
    retailRangeNavigator {
        ADD storeRange;
    }
}

countFilterRangeSkuStoreDate  = GROUP SUM 1 IF (currentBalanceSkuStock(sku,stock) OR dateTimeLastMovedSkuStock(sku, stock) > DATETIME(dateFrom AS DATE)) 
    BY sku, storeDepartmentStore(stock), dateFrom;

    
countFilterRangeSkuDate 'Кол-во магазинов' (range, sku, dateFrom) = GROUP SUM 1 IF countFilterRangeSkuStoreDate(sku, store, dateFrom) 
    AND inChildRangeSku(range, sku)
    BY range, sku, dateFrom;

countRangeLevel 'Количество товара' = DATA LOCAL INTEGER (RangeLevel);
countRangeLevelsRange = GROUP SUM  countRangeLevel(l) IF inRangeRangeLevel(r,l) BY r;

//indexRangeGroupSkuDateFromTo 'Порядок' (range, sku, dateFrom, dateTo) =
//    PARTITION SUM 1 IF countFilterRangeSkuDateFromTo(range, sku, dateFrom, dateTo)
//    BY range, dateFrom, dateTo
//    ORDER DESC countFilterRangeSkuDateFromTo(range, sku, dateFrom, dateTo), sku;

indexRangeGroupSkuDate 'Порядок' (v, sku, dateFrom, pt, stock) =
    PARTITION SUM 1 IF countFilterRangeSkuDate(rangeRangeRev(v), sku, dateFrom) AND companyALedgerPriceListTypeSkuStockDateTime(pt, sku, stock, dateTimeRangeRev(v))
    BY v, dateFrom, pt, stock
    ORDER DESC countFilterRangeSkuDate(rangeRangeRev(v), sku, dateFrom), sku;

countFilterRangeRevSkuDate 'Кол-во магазинов' (v, sku, dateFrom) = countFilterRangeSkuDate(rangeRangeRev(v), sku, dateFrom);

totalRangeLevel 'Накоплено' (range, level) =
    PARTITION SUM countRangeLevel(level) IF inRangeRangeLevel(range,level)
    BY range
    ORDER  level;
total 'Накоплено' = totalRangeLevel(rangeRangeRev(v), level);      
    
levelSkuRangeDate (sku, v, dateFrom, pt, stock) = 
    GROUP MIN level IF indexRangeGroupSkuDate(v, sku, dateFrom, pt, stock) <= totalRangeLevel(rangeRangeRev(v), level)
          BY sku, v, dateFrom, pt, stock;


countFilterRangeStoreDate 'Кол-во с продажей или остатком' (range, store, dateFrom) = GROUP SUM 1 IF countFilterRangeSkuStoreDate(sku, store, dateFrom) 
    AND inChildRangeSku(range, sku)
        BY range, store, dateFrom;

countFilterRangeRevStoreDate 'Кол-во с продажей или остатком' (v, store, dateFrom) = countFilterRangeStoreDate(rangeRangeRev(v), store, dateFrom);

currentBalanceRangeStore 'Остаток (ассортимент)' (range, store) = GROUP SUM currentBalanceSkuStock(sku,stock) IF inChildRangeSku(range, sku)
        BY range, storeDepartmentStore(stock);

currentBalanceRangeRevStore 'Остаток (ассортимент)' (v, store) = currentBalanceRangeStore(rangeRangeRev(v),store);

nameLevelRangeRevStoreType 'Уровень' (v,t)= nameLevelRangeStoreTypeDate(rangeRangeRev(v), t, dateRangeRev(v));
countSkuRangeRevStoreType 'Кол-во наименований' (v,t) = countSkuRangeStoreTypeDate(rangeRangeRev(v), t, dateRangeRev(v));

EXTEND FORM rangeRev
    PROPERTIES READONLY countFilterRangeRevSkuDate(v, s, dFrom)
    
    OBJECTS t = StoreType FIXED GRID
    PROPERTIES READONLY nameStoreType(t)
    PROPERTIES(v, t) nameLevelRangeRevStoreType, countSkuRangeRevStoreType
    
    OBJECTS st = Store FIXED GRID
    PROPERTIES READONLY nameStore(st), countFilterRangeRevStoreDate(v, st, dFrom), currentBalanceRangeRevStore(v, st)
    
    FILTERGROUP type
        FILTER 'По форматам' storeTypeStore(st) == t DEFAULT 
;
DESIGN rangeRev {
    NEW rev {
        type = SPLITV;
        fill = 1;
        NEW top {            
            type = CONTAINERH;
            fill = 1;
            NEW top1 {                 
                type = CONTAINERV;
                MOVE v.box;
                NEW top11 {
                    type = CONTAINERV;
                    MOVE s.panel;
                    NEW supplier {
                        caption = 'Поставщик';
                        MOVE PROPERTY(nameFilterSupplier());
                    }
                    MOVE d.box;            
                } 
                NEW top12 {
                    type = CONTAINERV;
                    MOVE pt.box;
                    MOVE dates.box {        
                        caption = 'Период реализации';
                        type = CONTAINERH;
                    }                
                }        
            }   
            NEW top2 {
                type = SPLITH;
                fill = 1;
                MOVE l.box { 
                    caption = 'Итого по уровням';
                    fill = 1;
                    REMOVE l.controls;
                }   
                MOVE store.box {
                    caption = 'Магазин остатки/продажи';
                    fill = 5;
                    PROPERTY (nameStore(store)) {minimumCharWidth = 10; preferredCharWidth = 15;}
                    PROPERTY (nameStoreTypeStore(store)) {minimumCharWidth = 10; preferredCharWidth = 15;}
                    REMOVE store.controls;
                }
            }
            REMOVE rl.box;
        }
        NEW header {
            type = TABBED;
            fill = 2.5;
            NEW details {
                fill = 3;
                type = SPLITV;
                caption = 'Товары';
                MOVE s.box {
                    fill = 2;
                    PROPERTY(priceALedgerPriceListTypeSkuStockRangeRev(pt, s, d, v)) {
                        caption = 'Цена закупки';
                    }  
                    PROPERTY(nameLevelRangeRevSku(v,s)) { background = #CCCCFF; }
                    PROPERTY(currentBalanceSkuStock(s,d)) { background = #F4FFBD; }  
                    PROPERTY(quantitySoldSkuStockDateFromTo(s,d,dFrom,dTo)) { background = #CCFFCC; }  
                    PROPERTY(sumSoldSkuStockDateFromTo(s,d,dFrom,dTo)) { background = #CCFFCC; }  
                    
                    PROPERTY(currentBalanceDepartmentsSku(s)) { background = #F4FFBD; }  
                    PROPERTY(quantitySoldDepartmentsSkuDateFromTo(s,dFrom,dTo)) { background = #CCFFCC; }  
                    PROPERTY(sumSoldDepartmentsSkuDateFromTo(s,dFrom,dTo)) { background = #CCFFCC; }          
                }
                
                NEW supplier1 {
                    fill = 1;
                    caption = 'Итого по поставщикам';
                    MOVE su.box;
                    REMOVE l2.box;
                }
                
            }
            NEW store {
                caption = 'Итоги';
                fill = 1;
                type = SPLITH;
                NEW store1 {
                    type = SPLITV;  
                    fill = 1;
                    MOVE t.box;
                    MOVE st.box;            
                }
                MOVE supplier1 { fill = 1;}
            }            
        }
    }
    MOVE functions.box;
}


FORM param 'Параметры заполнения ассортиментной матрицы'
    OBJECTS v = RangeRev FIXED PANEL 

    OBJECTS l = RangeLevel
    PROPERTIES(l) nameRangeLevel READONLY, countRangeLevel 
    FILTERS inRangeRevRangeLevel(v, l)
    
;

fillRangeRev 'Заполнить матрицу по остаткам и продажам' = ACTION (rangeRev, dateFrom, pt, stock) {
    FORM param OBJECTS v = rangeRev MODAL;
    IF formResult() == FormResult.ok THEN { 
        IF countRangeLevelsRange(rangeRangeRev(rangeRev)) THEN {
            levelRangeRevSku(rangeRev,sku) <- levelSkuRangeDate (sku, rangeRev, dateFrom, pt, stock) WHERE levelSkuRangeDate (sku, rangeRev, dateFrom, pt, stock) ;
        } ELSE {
            MESSAGE 'Не задано количество товара ни для одного уровня ассортиментной матрицы.';
        }
    
    }
} TOOLBAR ;


EXTEND FORM rangeRev
    PROPERTIES (v, dFrom, pt, d) fillRangeRev TODRAW s
;

nameGroupRange 'Включенные группы'(r) = GROUP CONCAT nameSkuGroup(g) IF inDataRangeSkuGroup(r,g), ',' BY r MINCHARWIDTH 50 PREFCHARWIDTH 50 ;

EXTEND FORM ranges PROPERTIES nameGroupRange(r);

inRangeSku (r, s) = GROUP SUM 1 IF levelRangeRevSku(v, s) BY rangeRangeRev(v), s;

EXTEND FORM ranges 
    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, idSku SHOWIF showIDs(),nameSku, nameUOMSku, amountPackSku
    PROPERTIES READONLY nameLevelRangeSkuDate(r, s, d)
    ORDER BY nameSku(s)
    FILTERS inRangeSku (r, s)
;

DESIGN ranges {
    range{
        MOVE s.box;
    }
}

CONSTRAINT levelRangeRevSku(v, s) AND NOT inChildRangeSku(rangeRangeRev(v), s) MESSAGE 'Товар не соответствует типу ассортимента';