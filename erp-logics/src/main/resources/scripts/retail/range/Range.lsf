MODULE Range;

REQUIRE Store, Sku, Barcode, PriceListStore, EmployeeSku, PriceListDashboardStore, SaleLedger, PurchasePack;

// Уровни ассортимента

CLASS RangeLevel 'Уровень ассортимента';
TABLE rangeLevel(RangeLevel);
name 'Название' = DATA VARISTRING[10] (RangeLevel) IN recognize;
rangeLevel (name) = GROUP AGGR (RangeLevel level) BY name (level);


FORM rangeLevel 'Уровень ассортимента'
    OBJECTS l = RangeLevel PANEL
    PROPERTIES(l) name

    EDIT RangeLevel OBJECT l
;

FORM rangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE 
;

FORM dialogRangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    
    LIST RangeLevel OBJECT l
;

NAVIGATOR {
    retailNavigator {
        NEW retailRangeNavigator 'Управление ассортиментом' {
            ADD rangeLevels;
        }
    }
}

// Ассортименты
CLASS Range 'Ассортимент';
TABLE range(Range);
name 'Название' = DATA VARISTRING[100] (Range) IN recognize;

TABLE rangeSkuGroup(Range, SkuGroup);
inData 'Вкл' = DATA BOOLEAN (Range, SkuGroup);

countSkuGroup 'Кол-во групп' = GROUP SUM 1 IF inData(Range r, SkuGroup g) BY r PERSISTENT; 

inParent (range, parent) = GROUP SUM 1 IF inData(Range range, SkuGroup child) AND isParent(child, SkuGroup parent)
                              BY range, parent PERSISTENT;

inChild (range, child) = GROUP SUM 1 IF inData(Range range, SkuGroup parent) AND isParent(SkuGroup child, parent)
                              BY range, child PERSISTENT;
                              
inChild (Range range, Sku sku) = inChild(range, skuGroup(sku)); 

quantityChildWith (skuGroup, range) = GROUP SUM 1 IF inData(Range range, SkuGroup childSkuGroup) AND isParent(childSkuGroup, SkuGroup skuGroup) BY skuGroup, range PERSISTENT;
quantityParentWith (skuGroup, range) = GROUP SUM 1 IF inData(Range range, SkuGroup parentSkuGroup) AND isParent(SkuGroup skuGroup, parentSkuGroup) BY skuGroup, range PERSISTENT; 

backgroundIn 'Цвет' (Range range, SkuGroup skuGroup) = CASE 
    WHEN inData(range, skuGroup) THEN RGB(0,0,0)
    WHEN quantityChildWith (skuGroup,range) != descendantNumber(skuGroup) AND NOT quantityParentWith (skuGroup,range) THEN RGB(203,203,203);    

TABLE rangeRangeLevel(Range, RangeLevel);
in 'Вкл' = DATA BOOLEAN (Range, RangeLevel);

FORM range 'Ассортиментная матрица'
    OBJECTS r = Range PANEL
    PROPERTIES(r) name

    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    PROPERTIES(r, l) in

    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    PROPERTIES inData(r, sg) BACKGROUND backgroundIn(r, sg)
    ORDER BY order(sg), skuGroupName
    
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT

    EDIT Range OBJECT r
;

DESIGN range {
    NEW pane {
        fill = 1;
        MOVE r.panel;
        NEW tabs {
            fill = 1;
            type = TABBED;
            NEW options {
                caption = 'Настройки';
                fill = 1;
                type = SPLITH;
                MOVE l.box;
                MOVE skuTree.tree.box {
                    fill = 4;
                }
            }
        }
    }
    MOVE functions.box;
}

@extendFormFilterSkuGroupAccess(range, sg);

FORM ranges 'Ассортиментные матрицы'
    OBJECTS d = DATE PANEL
    PROPERTIES(d) VALUE

    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER BY order(sg), skuGroupName
    
    OBJECTS r = Range
    PROPERTIES(r) READONLY name
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE 
    FILTERS inParent(r, sg) OR NOT countSkuGroup(r)
    ORDER BY name(r)
    
    LIST Range OBJECT r
;

DESIGN ranges {
    MOVE d.box;
    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box { caption = 'Групы товаров';}
        MOVE r.box {
            fill = 2;        
        }
    }
    MOVE functions.box;
}

countSkuGroup 'Кол-во групп' = GROUP SUM 1 IF inData(Range r, SkuGroup g) AND countAccess(Employee e, g) BY e, r; 
EXTEND FORM ranges FILTERS (r IS Range AND NOT limitAccess(currentUser())) OR countSkuGroup(currentUser(), r);

NAVIGATOR {
    retailRangeNavigator {
        ADD ranges;
    }
}

// Версии

CLASS RangeRev 'Версия ассортиментной матрицы';
TABLE rangeRev(RangeRev);
dateTime 'Действует (с)' = DATA DATETIME (RangeRev) IN recognize;
dateTime(RangeRev v) <- currentDateTime() WHEN SET(v IS RangeRev);

date 'Действует (с)' (RangeRev v) = toDate(dateTime(v)) PERSISTENT;

range 'Ассортиментная матрица' = DATA Range(RangeRev) NOT NULL AUTOSET;  

rangeRev 'Версия' = GROUP LAST RangeRev rev
                                       BY range(rev), DATE date
                                       ORDER dateTime(rev), rev
                                       WHERE date(rev) <= (date AS DATE) COMPLEX;
                           
TABLE rangeRevSku(RangeRev, Sku);
level = DATA RangeLevel(RangeRev, Sku);
nameLevel 'Уровень' (RangeRev r, Sku s)= name(level(r, s));

level(Range r, Sku s, DATE d) = level(rangeRev(r, d), s);
nameLevel 'Уровень' (Range r, Sku s, DATE d) = name(level(r, s, d));

in 'Вкл' = in(range(RangeRev v), RangeLevel l);

CONSTRAINT level(RangeRev r, Sku s) AND NOT in(r, level(r, s))
    CHECKED BY level[RangeRev,Sku] 
    MESSAGE 'Уровень ассортимента для товара не соответствует типу ассортимента';

countSku 'Кол-во товаров' = GROUP SUM 1 IF level(RangeRev r, Sku s) BY r; 

countSku 'Кол-во товаров' = GROUP SUM 1 BY RangeRev r, level(r, Sku s);

countRecSku 'Кол-во товаров' = GROUP SUM countSku(RangeRev r, RangeLevel l) IF l <= (RangeLevel level AS RangeLevel) BY r, level;

countSku 'Кол-во товаров' (Range r, DATE d) = countSku(rangeRev(r, d));
countSku 'Кол-во товаров' (Range r, RangeLevel l, DATE d)= countSku(rangeRev(r, d), l);

filterSupplier = DATA LOCAL LegalEntity();
nameFilterSupplier 'Поставщик' = name(filterSupplier());

retailPriceA 'Розничная цена (управленческая)' (Sku s, DepartmentStore d, RangeRev v) =  
    retailPriceA(s, d, dateTime(v));

markupA 'Розничная цена (надбавка)' (BasePriceListType pt, Sku s, DepartmentStore d, RangeRev v) =
    markupPriceA(pt, s, d, dateTime(v));

valueVAT 'НДС, %' (Sku s, Stock d, RangeRev v) =
    valueVAT(s, d, date(v));

priceA 'Цена' (LedgerPriceListType pt, Sku s, Stock st, RangeRev v)=  
    priceA(pt, s, st, dateTime(v));

nameCompanyA 'Поставщик' (LedgerPriceListType pt, Sku s, Stock st, RangeRev v)=  
    nameCompanyA(pt, s, st, dateTime(v));


currentBalanceDepartments 'Остаток (все магазины)' (sku) = GROUP SUM currentBalance(Sku sku, DepartmentStore stock) IF stock IS DepartmentStore  BY sku;
quantitySoldDepartments 'Продано за интервал (кол-во) (все магазины)' (sku, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY sku, dateFrom, dateTo;
sumSoldDepartments 'Продано за интервал (сумма) (все магазины)' (sku, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY sku, dateFrom, dateTo;

currentBalance 'Остаток (все магазины)' (sku, store) = GROUP SUM currentBalance(Sku sku, DepartmentStore stock) IF stock IS DepartmentStore  BY sku, store(stock);
quantitySold 'Продано за интервал (кол-во)' (store, sku, dateFrom, dateTo) = GROUP SUM
        quantitySold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY store(stock), sku, dateFrom, dateTo;
sumSold 'Продано за интервал (сумма)' (store, sku, dateFrom, dateTo) = GROUP SUM
        sumSold(Sku sku, DepartmentStore stock, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo AND stock IS DepartmentStore
        BY store(stock), sku, dateFrom, dateTo;

dateTimeLastMoved 'Время последнего движения' = GROUP MAX dateTimeLastMoved (Sku sku, DepartmentStore stock) BY sku, store(stock);
dateLastMoved 'Дата последнего движения'= toDate(dateTimeLastMoved(Sku s,Store st));
                                                                                       
priceB 'Цена' (type, sku, store, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), store(stock(ledger)), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;                                                                                        
                                                                                        
lastAccountPrice 'Учетная цена' (Sku sku, Store store) = priceB(SystemLedgerPriceListType.accountPriceListType,sku,store,currentDateTime());                                                                                      

countSkus 'Кол-во наименований' = GROUP SUM 1 BY RangeRev v, level(v,Sku sku);

countSkus 'Кол-во наименований (всего)' (v, supplier, pt, d) = GROUP SUM 1 IF level(RangeRev v, Sku sku)
    BY v, companyA(LedgerPriceListType pt, sku, Stock d, dateTime(v)), pt, d;

hasSkus 'Кол-во наименований по всему поставщику' (v, supplier, pt, d) = GROUP SUM 1 IF inChild(range(RangeRev v), Sku sku) 
    BY v, companyA(LedgerPriceListType pt, sku, Stock d, dateTime(v)), pt, d;
    
countSkus 'Кол-во наименований' (v,l,supplier,pt,d) = GROUP SUM 1
    BY RangeRev v, level(v, Sku sku), companyA(LedgerPriceListType pt, sku, Stock d, dateTime(v)), pt, d;

lastOrderBatch (sku, store) =
    GROUP LAST lastOrderBatch(Sku sku, DepartmentStore stock)
        BY sku, store(stock)
        ORDER dateTimeLastOrderBatch(sku, stock), lastOrderBatch(sku, stock)
        WHERE lastOrderBatch(sku, stock);
dateTimeLastOrderBatch 'Дата последнего прихода' (Sku sku,Store store) = dateTime(lastOrderBatch(sku,store));
dateLastOrderBatch 'Дата последнего прихода'= toDate(dateTimeLastOrderBatch(Sku s,Store st));

nameSupplierLastBatch 'Последний поставщик' (Sku sku,Store store) = nameSupplier(lastOrderBatch(sku,store)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

FORM currentBalanceSku 'Текущие остатки'
    OBJECTS s = Sku PANEL 
    PROPERTIES name(s) READONLY 
        
    OBJECTS st = Store
    PROPERTIES  READONLY name(st), currentBalance(s,st), dateTimeLastMoved(s,st), dateTimeLastOrderBatch(s,st), lastAccountPrice(s,st)
    FILTERS currentBalance(s,st)
;
reviewCurrentBalance (Sku sku) = { SHOW currentBalanceSku OBJECTS s=sku ; }

FORM soldStoreSkuDateFromTo 'Продажи по магазинам'
    OBJECTS s = Sku PANEL 
    PROPERTIES name(s) READONLY 
    OBJECTS dates = (dFrom = DATE , dTo = DATE) PANEL
    PROPERTIES READONLY valFrom = VALUE(dFrom), valTo = VALUE(dTo)
        
    OBJECTS st = Store
    PROPERTIES  READONLY name(st), quantitySold(st,s,dFrom,dTo), sumSold(st,s,dFrom,dTo)
    FILTERS quantitySold(st,s,dFrom,dTo) OR sumSold(st,s,dFrom,dTo)
;
reviewSoldStoreDate (Sku sku, DATE dFrom, DATE dTo) = { SHOW soldStoreSkuDateFromTo OBJECTS s=sku, dFrom=dFrom, dTo=dTo ; }

TABLE rangeRevRangeLevelSku (RangeRev, RangeLevel, Sku);
quantityShelf 'Количество на полке' = DATA INTEGER (RangeRev, RangeLevel, Sku);

nameQuantity (RangeLevel rl) = CONCAT ' / ', '('+name(rl)+')', 'к-во на полке'; 

FORM rangeRevSelectSuppliers 'Выбор поставщика'
    OBJECTS v = RangeRev PANEL
    OBJECTS p = PriceListType PANEL
    OBJECTS d = DepartmentStore PANEL
    
    OBJECTS l = LegalEntity
    PROPERTIES(l) READONLY name
    FILTERS hasSkus(v, l, p, d)
;

changeNameFilterSupplier(RangeRev v, PriceListType p, DepartmentStore d) = {
    DIALOG rangeRevSelectSuppliers OBJECTS v = v, p = p, d = d, l = filterSupplier() INPUT NULL DO
        filterSupplier() <- l;
}

backgroundRange = ABSTRACT CASE COLOR (Sku);

skipSwowDepartment = ABSTRACT BOOLEAN (RangeRev);
swowDepartment (RangeRev v) = v IS RangeRev AND NOT skipSwowDepartment(v);

FORM rangeRev 'Версия ассортиментной матрицы'
    OBJECTS v = RangeRev PANEL
    PROPERTIES(v) dateTime

    OBJECTS pt = DataPriceListType PANEL
    PROPERTIES(pt) SELECTOR name[PriceListType]

    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) SELECTOR name SHOWIF swowDepartment(v)

    PROPERTIES() nameFilterSupplier ON CHANGE changeNameFilterSupplier(v, pt, d) 

    OBJECTS dates = (dFrom = DATE , dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
    
    OBJECTS rl = RangeLevel    
    FILTERS in(v, rl)     
    
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY BACKGROUND backgroundRange(s) idBarcode, id SHOWIF showIDs(), name ON SHORTCUT showMovementSku(s, d) ON SHORTCUT showMovementPriceSku(s, d), nameUOM
    PROPERTIES(s) amountPack ON CHANGE changePack(s) 
    PROPERTIES READONLY    SHOWIF swowDepartment(v)  
                           nameCompanyA(pt, s, d, v),
                           priceA(pt, s, d, v),
                           retailPriceA(s, d, v),
                           markup(s, d),
                           valueVAT(s, d, v),
                           markupA(pt, s, d, v)
    PROPERTIES(v, s) nameLevel
    PROPERTIES READONLY SHOWIF swowDepartment(v) currentBalance(s,d), quantitySold(s,d,dFrom,dTo), sumSold(s,d,dFrom,dTo)
    PROPERTIES currentBalanceDepartments(s) ON CHANGE reviewCurrentBalance(s), quantitySoldDepartments(s,dFrom,dTo) ON CHANGE reviewSoldStoreDate(s, dFrom, dTo), 
               sumSoldDepartments(s,dFrom,dTo) ON CHANGE reviewSoldStoreDate(s, dFrom, dTo)
               
    PROPERTIES quantityShelf(v,rl,s) COLUMNS (rl) HEADER nameQuantity(rl)
              
    FILTERS inChild(range(v), s),
            (filterSupplier() AND priceA(pt, s, d, filterSupplier(), dateTime(v))) OR 
                (s IS Sku AND NOT filterSupplier())
    
    FILTERGROUP active 
        FILTER 'Активный' active(s) 'F11' DEFAULT
    
    ORDER BY name(s)
    
    FILTERGROUP filters
        FILTER 'Включен' level(v, s)  DEFAULT
        FILTER 'Без поставщиков' level(v, s) AND NOT companyA(pt, s, d, dateTime(v))
        
    OBJECTS store = Store
    PROPERTIES  READONLY name(store), nameStoreType(store), currentBalance(s,store), dateLastMoved(s,store), 
                dateLastOrderBatch(s,store), nameSupplierLastBatch(s,store), lastAccountPrice(s,store),
                quantitySold(store,s,dFrom,dTo), sumSold(store,s,dFrom,dTo)
    ORDER BY nameStoreType(store)
    FILTERS quantitySold(store,s,dFrom,dTo) OR sumSold(store,s,dFrom,dTo) OR currentBalance(s,store)         
    FILTERGROUP activeStore 
        FILTER 'Активный' active(store) 'F11' DEFAULT
          
    OBJECTS l = RangeLevel
    PROPERTIES READONLY name(l), countSkus(v,l)  
    FILTERS in(v, l)  
   
    OBJECTS l2 = RangeLevel GRID
    FILTERS in(v, l2)  

    OBJECTS su = LegalEntity
    PROPERTIES READONLY name(su), countSkus(v, su, pt, d), countSkus(v, l2, su, pt, d) COLUMNS (l2) HEADER name(l2) 
    ORDER BY name(su)
    FILTERS countSkus(v, su, pt, d)         
          
    EDIT RangeRev OBJECT v
;

defaultDepartmentStore = DATA DepartmentStore();
nameDefaultDepartmentStore 'Отдел магазина для ассортиментных матриц по умолчанию' = name(defaultDepartmentStore());
EXTEND FORM options
    PROPERTIES() nameDefaultDepartmentStore
;
DESIGN options {
    pane {
        NEW range {
            caption = 'Ассортиментные матрицы';
            MOVE PROPERTY(nameDefaultDepartmentStore());
        }
    }
}

seekDefaultDepartmentStore = { SEEK rangeRev.d = defaultDepartmentStore(); }
EXTEND FORM rangeRev
    EVENTS ON INIT seekDefaultDepartmentStore()
;

seekDefaultPriceListType = { SEEK rangeRev.pt = defaultPriceListType(); }
EXTEND FORM rangeRev
    EVENTS ON INIT seekDefaultPriceListType()
;

copy 'Копировать'(RangeRev pr) = {
	NESTEDSESSION {
	    FOR NEW r = RangeRev DO {
	        range(r) <- range(pr);
	        level(r, Sku s) <- level(pr, s);
	        SHOW rangeRev OBJECTS v = r MANAGESESSION DOCKED;
	    }
	}
} TOOLBAR;

saved 'Сохранена' (Range r) = PREV(r IS Range);

EXTEND FORM range
    OBJECTS vl = RangeLevel GRID
    FILTERS in(r, vl)
    
    OBJECTS v = RangeRev
    PROPERTIES(v) READONLY dateTime, countSku
    PROPERTIES READONLY countSku(v, vl) COLUMNS (vl) HEADER name(vl) 
    PROPERTIES(v) NEWSESSION SHOWIF saved(r) NEW, EDIT, copy, DELETE 
    FILTERS range(v) == r
;

DESIGN range {
    tabs {
        MOVE v.box FIRST {
            caption = 'Версии';
        }
    }
}

countSkuNotSupplier 'Кол-во товаров без поставщика' = GROUP SUM 1 IF level(RangeRev v, Sku sku) AND DataPriceListType pt IS DataPriceListType AND DepartmentStore d IS DepartmentStore 
    AND NOT companyA(pt, sku, d, dateTime(v)) 
        BY pt, d, v; 
calcCountSkuNotSupplier 'Кол-во товаров без поставщика' (DataPriceListType pt, DepartmentStore d, Range r, DATE dt) = countSkuNotSupplier(pt, d , rangeRev(r, dt));

countSkuNotSupplier 'Кол-во товаров без поставщика' = DATA LOCAL INTEGER (DataPriceListType, DepartmentStore, Range, DATE);

fillCountSkuNotSupplier 'Обновить'(DataPriceListType pt, DepartmentStore d, DATE dt) = {
    countSkuNotSupplier(pt, d, Range r, dt) <- calcCountSkuNotSupplier(pt, d, r, dt) WHERE r IS Range;   
}
createRangeRev 'Создать версию'(Range range, DATE date) = {
	NEWSESSION {
	    LOCAL rev = RangeRev();
	    rev () <- rangeRev(range, date);
	
	    FOR NEW v = RangeRev DO {
	        range(v) <- range;
	        level(v, Sku s) <- level(rev(), s);
	        SHOW rangeRev OBJECTS v=v MANAGESESSION DOCKED;
	    }
	}
} TOOLBAR;

EXTEND FORM ranges
    OBJECTS vl = RangeLevel GRID BEFORE r

    PROPERTIES READONLY countSku(r, d)
    PROPERTIES READONLY countSku(r, vl, d) TODRAW r COLUMNS (vl) HEADER name(vl) 

    OBJECTS pt = DataPriceListType PANEL
    PROPERTIES(pt) SELECTOR name[PriceListType]

    OBJECTS ds = DepartmentStore PANEL
    PROPERTIES(ds) SELECTOR name
    FILTERS isCompany(ds)
    
    OBJECTS r1 = Range
    PROPERTIES(r1) READONLY name
    FILTERS inParent(r1, sg) OR NOT countSkuGroup(r1)        
    
    PROPERTIES READONLY countSkuNotSupplier(pt,ds,r1,d)
    PROPERTIES fillCountSkuNotSupplier(pt, ds, d) TODRAW r1 TOOLBAR , createRangeRev(r1,d) 
    
    FILTERGROUP notSupplier
        FILTER 'Без поставщиков' countSkuNotSupplier(pt, ds, r1, d) DEFAULT 
    
;

DESIGN ranges {
    pane {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box { caption = 'Групы товаров';}
        NEW tab {
            caption = 'Список';
            fill = 2;   
            type = TABBED;
            NEW range{
                caption = 'Ассортимент';
                MOVE r.box;                
            }
            NEW supplier{
                caption = 'Без поставщиков';
                fill = 1;
                NEW topTab {
                    type = CONTAINERH;
                    MOVE pt.box;
                    MOVE ds.box;
                }
                MOVE r1.box;
            }
            
        }        
    }
}
EXTEND FORM ranges FILTERS (r1 IS Range AND NOT limitAccess(currentUser())) OR countSkuGroup(currentUser(), r1);


@extendFormFilterSkuGroupAccess(ranges, sg);

// ----------------- Связь ассортиментов и магазинов --------------- //

useRange 'Использовать ассортиментную матрицу' = DATA BOOLEAN (StoreType);
EXTEND FORM chainStores
    PROPERTIES(s) useRange AFTER name(s)    
;
useRange 'Использовать ассортиментную матрицу' (Store s) = useRange(storeType(s)) PERSISTENT; 
useRange 'Использовать ассортиментную матрицу' (DepartmentStore s) = useRange(store(s)) PERSISTENT; 

TABLE rangeStoreTypeDate(Range, StoreType, DATE);
dataLevel = DATA RangeLevel (Range, StoreType, DATE);
excludeLevel = DATA BOOLEAN (Range, StoreType, DATE);

CONSTRAINT dataLevel(Range r, StoreType t, DATE d) AND NOT in(r, dataLevel(r, t, d))
    CHECKED BY dataLevel[Range,StoreType,DATE]
    MESSAGE 'Уровень ассортимента для формата магазина не соответствует типу ассортимента';

level (r, t, d) = GROUP LAST dataLevel(Range range, StoreType storeType, DATE dateIn)
                                              BY range, storeType, DATE date
                                              ORDER dateIn
                                              WHERE (dataLevel(range, storeType, dateIn) OR excludeLevel(range, storeType, dateIn)) AND dateIn <= (date AS DATE); 

date (r, t, d) = GROUP LAST DATE dateIn
                                              BY Range range, StoreType storeType, DATE date
                                              ORDER dateIn
                                              WHERE dataLevel(range, storeType, dateIn) AND dateIn <= (date AS DATE); 

//levelRangeStoreTypeDate(r, t, d) = OVERRIDE lastLevelRangeStoreTypeDate(r, t, d), dataLevelRangeStoreTypeDate(r, t, d);  
nameLevel 'Уровень' (Range r, StoreType t, DATE d)= name(level(r, t, d)); 

changeLevel (Range r, StoreType t, DATE d)= {
    DIALOG dialogRangeLevels OBJECTS l = dataLevel(r, t, d) CHANGE DO {
        excludeLevel (r, t, d) <- NOT l;
    }
}

backgroundLevel(Range range, StoreType storeType, DATE dateIn) = (dataLevel(range, storeType, dateIn) OR excludeLevel(range, storeType, dateIn));

countSku 'Кол-во товаров' (Range r, StoreType t, DATE d) = countRecSku(rangeRev(r, d), level(r, t, d));
     
quantityShelf 'Количество на полке'  = GROUP SUM quantityShelf(rangeRev(Range range, DATE date), level(range, StoreType type, date), Sku sku) 
        BY range, type, sku, date;

quantityShelf 'Количество на полке'  (Range range, Store store, Sku sku, DATE date) =  quantityShelf(range, storeType(store), sku, date);   

quantityShelf 'Количество на полке'  (store, sku, date) = GROUP SUM quantityShelf(Range r, Store st, Sku sk, DATE d) BY st, sk, d;   
quantityShelf 'Количество на полке'  (DepartmentStore d, Sku sku, DATE date) = quantityShelf(store(d), sku, date);   

TABLE rangeStoreDate(Range, Store, DATE);
dataLevel = DATA RangeLevel (Range, Store, DATE);
excludeLevel = DATA BOOLEAN (Range, Store, DATE);
   
CONSTRAINT dataLevel(Range r, Store st, DATE d) AND NOT in(r, dataLevel(r, st, d))
    CHECKED BY dataLevel[Range,Store,DATE]
    MESSAGE 'Уровень ассортимента для магазина не соответствует типу ассортимента';

level (r, st, d) = GROUP LAST dataLevel(Range range, Store st, DATE dateIn)
                                              BY range, st, DATE date
                                              ORDER dateIn
                                              WHERE (dataLevel(range, st, dateIn) OR excludeLevel(range, st, dateIn)) AND dateIn <= (date AS DATE); 

date (r, st, d) = GROUP LAST DATE dateIn
                                              BY Range range, Store st, DATE date
                                              ORDER dateIn
                                              WHERE dataLevel(range, st, dateIn) AND dateIn <= (date AS DATE); 

changeLevel (Range r, Store st, DATE d)= {
    DIALOG dialogRangeLevels OBJECTS l = dataLevel(r, st, d) CHANGE DO {
        excludeLevel (r, st, d) <- NOT l;
    }
}              

changeWYSLevel (Range r, Store st, DATE d)= {
    INPUTX s = VARISTRING[10] DO 
        IF s THEN {
            dataLevel (r, st, d) <- [= GROUP MAX RangeLevel l BY name(l)](s);
            excludeLevel (r, st, d) <- NULL;
        } ELSE {
            dataLevel (r, st, d) <- NULL;
            excludeLevel (r, st, d) <- TRUE;
        }
}              
backgroundLevel(Range range, Store store, DATE dateIn) = (dataLevel(range, store, dateIn) OR excludeLevel(range, store, dateIn));

countRange 'В ассортименте' (s, t, d) = GROUP SUM 1 IF level(Range range, StoreType t, DATE d) >= level(range, Sku s, d) BY s, t, d;

overLevel(Range r, Store st, DATE d) = OVERRIDE level(r, storeType(st), d), level(r, st, d);  
overDate 'Дата включения' (Range r, Store st, DATE d) = OVERRIDE date(r, storeType(st), d), date(r, st, d);  
nameOverLevel 'Уровень (перегруженный)' (Range r, Store st, DATE d)= name(overLevel(r, st, d));               
nameLevel 'Уровень' (Range r, Store st, DATE d)= name(level(r, st, d));

countSku 'Кол-во товаров' (Range r, Store st, DATE d) = countRecSku(rangeRev(r, d), overLevel(r, st, d));

//overCountRangeSkuStoreDate 'В ассортименте' (s, t, d) = GROUP SUM 1 IF overLevelRangeStoreDate(range, t, d) >= levelRangeSkuDate(range, s, d) BY s, t, d;
//countRangeSkuStoreDate 'В ассортименте' (s, st, d) = countRangeSkuStoreTypeDate(s, storeTypeStore(st), d);  
countRange 'В ассортименте' (s, st, d) = GROUP SUM 1 IF overLevel(Range range, Store st, DATE d) >= level(range, Sku s, d) BY s, st, d;
countRange 'В ассортименте' (Sku s, DepartmentStore ds, DATE d) = countRange(s, store(ds), d); 
countRange 'В ассортименте' (r, s, st, d) = GROUP SUM 1 IF overLevel(Range range, Store st, DATE d) >= level(range, Sku s, d) BY range, s, st, d;


countRange = GROUP SUM 1 IF level(Range r, Store st, DATE d) >= level(r, Sku sk, d) BY st, sk, d;
countTypeRange = GROUP SUM 1 IF level(Range r, storeType(Store st), DATE d) >= level(r, Sku sk, d) BY st, sk, d;

statusRange 'Вид ассортимента' (Store st, Sku s, DATE d) = CASE WHEN countRange(st, s, d) THEN 'Магазин'
    WHEN countTypeRange(st, s, d) THEN 'Формат';

FORM storeRange 'Ассортимент магазинов'
    OBJECTS dc = (d = DATE, c = ChainStores) PANEL
    PROPERTIES(d) VALUE
    PROPERTIES(c) SELECTOR name
     
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER BY order(sg), skuGroupName

    // По форматам
    OBJECTS t = StoreType GRID
    FILTERS chainStores(t) == c, active(t)
    
    OBJECTS r = Range
    PROPERTIES(r) READONLY name
    PROPERTIES(r, t, d) nameLevel COLUMNS (t) HEADER name(t) BACKGROUND backgroundLevel(r, t, d) ON CHANGE changeLevel(r, t, d),
                        countSku COLUMNS(t) HEADER name(t)
    FILTERS inParent(r, sg) OR NOT countSkuGroup(r)
    ORDER BY name(r)

    OBJECTS s = Sku GRID 
    PROPERTIES(s) READONLY BACKGROUND backgroundRange(s) idBarcode, name, nameUOM
    PROPERTIES(s, t, d) READONLY countRange COLUMNS (t) HEADER name(t)
    FILTERS level(r, s, d)
     
    // По магазинам
    OBJECTS st = Store GRID 
    PROPERTIES READONLY name(st), nameStoreType(st)
    ORDER BY nameStoreType(st), name(st)
    FILTERS active(st)
    
    OBJECTS sr = Range
    PROPERTIES(sr) READONLY name
    PROPERTIES nameOverLevel(sr, st, d) BACKGROUND backgroundLevel(sr, st, d) ON CHANGE changeLevel(sr, st, d) ON CHANGEWYS changeWYSLevel(sr, st, d) COLUMNS (st) HEADER name(st)
    PROPERTIES countSku(sr, st, d) COLUMNS (st) HEADER name(st) 
    ORDER BY name(sr)
    FILTERS inParent(sr, sg) OR NOT countSkuGroup(sr)
    
    OBJECTS ss = Sku GRID 
    PROPERTIES(ss) READONLY BACKGROUND backgroundRange(s) idBarcode, name, nameUOM
    PROPERTIES READONLY nameLevel(sr, ss, d)
    PROPERTIES(ss, st, d) READONLY countRange COLUMNS (st) HEADER name(st)
    ORDER BY nameLevel(sr, ss, d), name(ss)
    FILTERS level(sr, ss, d)

    // -------------- Ассортимент магазина ------------------ //
    OBJECTS ds = Store PANEL
    PROPERTIES (ds) name SELECTOR
    
    TREE treeGroup g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactiveD FILTER 'Активные' active(g) 'F5' DEFAULT
    
    OBJECTS sk = Sku 
    PROPERTIES (sk) READONLY idBarcode, id SHOWIF showIDs(), name
    PROPERTIES statusRange(ds, sk, d)
    FILTERS isParent(g, sk) OR s IS Sku AND NOT g, countRange(sk, ds, d)
    
    OBJECTS rn = Range
    PROPERTIES READONLY name(rn), nameLevel(rn, sk, d), overDate(rn, st, d)
    PROPERTIES (rn) NEWSESSION EDIT
    FILTERS countRange (rn, sk, ds, d)
;

DESIGN storeRange {
    NEW filters{
        type = CONTAINERH;
        MOVE dc.box;
    }
    NEW tabPane{
        fill = 1;
        type = TABBED;
        NEW pane {
            fill = 1;
            type = SPLITH;
            caption = 'Назначение ассортимента';
            MOVE skuTree.tree.box {
                caption = 'Группы товаров';
            }
            NEW setPane {
                fill = 2;
                type = TABBED;
                NEW formatPane {
                    fill = 1;
                    type = SPLITV;
                    caption = 'По форматам';
                    MOVE r.box {
                        fill = 2;
                        PROPERTY(countSku(r, t, d)) {
                            background = #FFEEFF;
                        }
                    }
                    MOVE s.box;
                }
                NEW storePane {
                    fill = 1;
                    type = SPLITV ;
                    caption = 'По магазинам';
                    REMOVE st.box;
                    MOVE sr.box {
                        fill = 2;
                    }
                    MOVE ss.box;
                }
            }
        }
        NEW store {
            fill = 1;
            caption = 'Ассортимент по магазинам';
            MOVE ds.box;
            NEW skus {
                fill = 1;
                type = SPLITH;
                MOVE treeGroup.tree.box {
                    caption = 'Группы товаров';
                }
                NEW storeRightPane {
                    fill = 2;
                    type = SPLITV;
                    MOVE sk.box{fill = 2;};
                    MOVE rn.box{fill = 1;};
                }
            }
        }        
    }

    MOVE functions.box;
}
@extendFormFilterSkuGroupAccess(storeRange, sg);

NAVIGATOR {
    retailRangeNavigator {
        ADD storeRange;
    }
}

countFilterRange  = GROUP SUM 1 IF (currentBalance(Sku sku,DepartmentStore stock) OR dateTimeLastMoved(sku, stock) > DATETIME(DATE dateFrom AS DATE)) AND active(store(stock))
    BY sku, store(stock), dateFrom;

    
countFilter 'Кол-во магазинов' (range, sku, dateFrom) = GROUP SUM 1 IF countFilterRange(Sku sku, Store store, DATE dateFrom) 
    AND inChild(Range range, sku)
    BY range, sku, dateFrom;

count 'Количество товара' = DATA LOCAL INTEGER (RangeLevel);
countRangeLevels = GROUP SUM  count(RangeLevel l) IF in(Range r,l) BY r;

indexGroup 'Порядок' (RangeRev v, Sku sku, DATE dateFrom, LedgerPriceListType pt, Stock stock) =
    PARTITION SUM 1 IF countFilter(range(v), sku, dateFrom) AND companyA(pt, sku, stock, dateTime(v))
    BY v, dateFrom, pt, stock
    ORDER DESC countFilter(range(v), sku, dateFrom), sku;

countFilter 'Кол-во магазинов' (RangeRev v, Sku sku, DATE dateFrom) = countFilter(range(v), sku, dateFrom);

total 'Накоплено' (Range range, RangeLevel level) =
    PARTITION SUM count(level) IF in(range,level)
    BY range
    ORDER  level;
total 'Накоплено' = total(range(RangeRev v), RangeLevel level);      
    
level (sku, v, dateFrom, pt, stock) = 
    GROUP MIN RangeLevel level IF indexGroup(RangeRev v, Sku sku, DATE dateFrom, LedgerPriceListType pt, Stock stock) <= total(range(v), level)
          BY sku, v, dateFrom, pt, stock;


countFilter 'Кол-во с продажей или остатком' (range, store, dateFrom) = GROUP SUM 1 IF countFilterRange(Sku sku, Store store, DATE dateFrom) 
    AND inChild(Range range, sku)
        BY range, store, dateFrom;

countFilter 'Кол-во с продажей или остатком' (RangeRev v, Store store, DATE dateFrom) = countFilter(range(v), store, dateFrom);

currentBalance 'Остаток (ассортимент)' (range, store) = GROUP SUM currentBalance(Sku sku,DepartmentStore stock) IF inChild(Range range, sku)
        BY range, store(stock);

currentBalance 'Остаток (ассортимент)' (RangeRev v, Store store) = currentBalance(range(v),store);

nameLevel 'Уровень' (RangeRev v,StoreType t)= nameLevel(range(v), t, date(v));
countSku 'Кол-во наименований' (RangeRev v,StoreType t) = countSku(range(v), t, date(v));

EXTEND FORM rangeRev
    PROPERTIES READONLY countFilter(v, s, dFrom)
    
    OBJECTS t = StoreType GRID
    PROPERTIES READONLY name(t)
    PROPERTIES(v, t) nameLevel, countSku
    FILTERGROUP activeStoreType
        FILTER 'Активные' active(t) DEFAULT 
    
    OBJECTS st = Store GRID
    PROPERTIES READONLY name(st), countFilter(v, st, dFrom), currentBalance(v, st)
    FILTERS active(st)
    
    FILTERGROUP type
        FILTER 'По форматам' storeType(st) == t DEFAULT 
;
DESIGN rangeRev {
    NEW rev {
        type = SPLITV;
        fill = 1;
        NEW top {            
            type = CONTAINERH;
            fill = 1;
            NEW top1 {                 
                type = CONTAINERV;
                MOVE v.box;
                NEW top11 {
                    type = CONTAINERV;
                    MOVE s.panel;
                    NEW supplier {
                        caption = 'Поставщик';
                        MOVE PROPERTY(nameFilterSupplier());
                    }
                    MOVE d.box;            
                } 
                NEW top12 {
                    type = CONTAINERV;
                    MOVE pt.box;
                    MOVE dates.box {        
                        caption = 'Период реализации';
                        type = CONTAINERH;
                    }                
                }        
            }   
            NEW top2 {
                type = SPLITH;
                fill = 1;
                MOVE l.box { 
                    caption = 'Итого по уровням';
                    fill = 1;
                    REMOVE l.controls;
                }   
                MOVE store.box {
                    caption = 'Магазин остатки/продажи';
                    fill = 5;
                    PROPERTY (name(store)) {minimumCharWidth = 10; preferredCharWidth = 15;}
                    PROPERTY (nameStoreType(store)) {minimumCharWidth = 10; preferredCharWidth = 15;}
                    REMOVE store.controls;
                }
            }
            REMOVE rl.box;
        }
        NEW header {
            type = TABBED;
            fill = 2.5;
            NEW details {
                fill = 3;
                type = SPLITV;
                caption = 'Товары';
                MOVE s.box {
                    fill = 2;
                    PROPERTY(priceA(pt, s, d, v)) {
                        caption = 'Цена закупки';
                    }  
                    PROPERTY(nameLevel(v,s)) { background = #CCCCFF; }
                    PROPERTY(currentBalance(s,d)) { background = #F4FFBD; }  
                    PROPERTY(quantitySold(s,d,dFrom,dTo)) { background = #CCFFCC; }  
                    PROPERTY(sumSold(s,d,dFrom,dTo)) { background = #CCFFCC; }  
                    
                    PROPERTY(currentBalanceDepartments(s)) { background = #F4FFBD; }  
                    PROPERTY(quantitySoldDepartments(s,dFrom,dTo)) { background = #CCFFCC; }  
                    PROPERTY(sumSoldDepartments(s,dFrom,dTo)) { background = #CCFFCC; }          
                }
                
                NEW supplier1 {
                    fill = 1;
                    caption = 'Итого по поставщикам';
                    MOVE su.box;
                    REMOVE l2.box;
                }
                
            }
            NEW store {
                caption = 'Итоги';
                fill = 1;
                type = SPLITH;
                NEW store1 {
                    type = SPLITV;  
                    fill = 1;
                    MOVE t.box;
                    MOVE st.box;            
                }
                MOVE supplier1 { fill = 1;}
            }            
        }
    }
    MOVE functions.box;
}


FORM param 'Параметры заполнения ассортиментной матрицы'
    OBJECTS v = RangeRev PANEL 

    OBJECTS l = RangeLevel
    PROPERTIES(l) name READONLY, count 
    FILTERS in(v, l)
    
;

fill 'Заполнить матрицу по остаткам и продажам'(RangeRev rangeRev, DATE dateFrom, LedgerPriceListType pt, Stock stock) = {
    DIALOG param OBJECTS v = rangeRev DO { 
        IF countRangeLevels(range(rangeRev)) THEN {
            level(rangeRev,Sku sku) <- level (sku, rangeRev, dateFrom, pt, stock) WHERE level (sku, rangeRev, dateFrom, pt, stock) ;
        } ELSE {
            MESSAGE 'Не задано количество товара ни для одного уровня ассортиментной матрицы.';
        }
    
    }
} TOOLBAR ;


EXTEND FORM rangeRev
    PROPERTIES (v, dFrom, pt, d) fill TODRAW s
;

nameGroup 'Включенные группы'(r) = GROUP CONCAT name(SkuGroup g) IF inData(Range r,g), ',' BY r MINCHARWIDTH 50 PREFCHARWIDTH 50 ;

EXTEND FORM ranges PROPERTIES nameGroup(r);

in (r, s) = GROUP SUM 1 IF level(RangeRev v, Sku s) BY range(v), s;

EXTEND FORM ranges 
    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, id SHOWIF showIDs(),name, nameUOM, amountPack
    PROPERTIES READONLY nameLevel(r, s, d)
    ORDER BY nameLevel(r, s, d), name(s)
    FILTERS in (r, s)
;

DESIGN ranges {
    range{
        MOVE s.box;
    }
}

autoSetGroupRange 'Автоматически проставлять группы в матрицу при изменении группы товара' = DATA BOOLEAN (UserRole);
EXTEND FORM userRole PROPERTIES(ur) autoSetGroupRange;
WHEN autoSetGroupAttribute(mainRole(currentUser())) AND CHANGED(itemGroup(Item item)) AND level(RangeRev v, Sku s) AND NOT inChild(range(v), s) DO {
    inData(Range r, SkuGroup g) <- TRUE WHERE r == range(v) AND g == skuGroup(s);
}

CONSTRAINT level(RangeRev v, Sku s) AND NOT inChild(range(v), s) MESSAGE 'Товар не соответствует выбранным группам для ассортимента';