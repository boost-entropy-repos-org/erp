MODULE ABCAnalysis;

REQUIRE Store, SaleLedger, Retail;

round4 (number) = round(number, 4);

CLASS ABCType 'Тип отчета' {
    sum 'По выручке',
    markup 'По доходу',
    quantity 'По количеству'
};

TABLE ABCType (ABCType);

isSum (ABCType type) = type == ABCType.sum;
isMarkupSum (ABCType type) = type == ABCType.markup;
isQuantity (ABCType type) = type == ABCType.quantity;

FORM ABCType 'Тип отчета'
    OBJECTS ct = ABCType FIXED PANEL
    PROPERTIES(ct) staticCaption
    EDIT ABCType OBJECT ct
;

FORM ABCTypes 'Тип отчета'
    OBJECTS ct = ABCType
    PROPERTIES(ct) READONLY staticCaption
    ORDER BY staticCaption(ct)
    DIALOG ABCType OBJECT ct
;

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (Group);

levelParent (group) = GROUP MIN level(Group group, Group parent) IF dataInSession(parent)
    BY group;
nearestParentGroupInSession (Group g) =  group(g, levelParent(g));
nearestInSession (Group g) =
    dataInSession(nearestParentGroupInSession(g)) PERSISTENT;

inParent (Group group) = TRUE IF levelParent(group);

inSession 'Отм.' (Group group) = OVERRIDE
    inParent(group),
    dataInSession(group);

sessionConcatGroups 'Группы' (groupType) =
    GROUP CONCAT name(Group group) IF inSession(group) AND NOT inSession(parent(group)),'; '
    BY groupType(group);
    

quantityChildWithSession (g) = GROUP SUM 1 IF dataInSession(Group child) AND isParent(child, Group parent) BY parent PERSISTENT;
quantityParentWithSession (g) = GROUP SUM 1 IF dataInSession(Group parent) AND isParent(Group child, parent) BY child PERSISTENT;                                                                        
                                                                           
backgroundInSession 'Цвет' (Group g) = CASE 
    WHEN dataInSession(g) THEN RGB(0,0,0)
    WHEN nearestInSession(g) THEN RGB(230,248,250) 
    WHEN quantityChildWithSession (g) != descendantNumber(g) AND NOT quantityParentWithSession (g) THEN RGB(203,203,203);
  
  
  
countInSessionSkuGroups  = GROUP SUM 1 IF dataInSession(Group g) BY groupType(g);

resetSelectedGroups  'Сбросить отмеченные'() = ACTION {
    dataInSession(Group g) <- NULL WHERE g IS Group ;    
}  
selectLeaf  'Отметить листья'(GroupType t) = ACTION {
    dataInSession(Group g)<- TRUE WHERE groupType(g) == t AND isLeaf(g); 
} 
select 'Отм.' = DATA LOCAL BOOLEAN (Stock);
countSelectStocks = GROUP SUM 1 IF select(Stock l);
nameSelectStocks 'Склады' = GROUP CONCAT name(Stock st) IF select(st),', ' MINCHARWIDTH 30 PREFCHARWIDTH 50;
idSelectStocks 'Склады' = GROUP CONCAT id(Stock st) IF select(st),', ' MINCHARWIDTH 30 PREFCHARWIDTH 50;
            
//--

markupSumSold 'Доход'(groupType, group, dateFrom, dateTo) =
    GROUP SUM markupSumSold(Sku sk, Stock st, DATE df, DATE dt) IF  isParent(Group g, sk) AND inSession(group(GroupType groupType, sk)) AND select(st)
    BY groupType, g, df, dt;
                                                   
quantitySold 'Кол-во'(groupType, group, dateFrom, dateTo) =
    GROUP SUM quantitySold(Sku sk, Stock st, DATE df, DATE dt) IF  isParent(Group g, sk) AND inSession(group(GroupType groupType, sk)) AND select(st)
    BY groupType, g, df, dt;
                                                       
sumSold 'Выручка'(groupType, group, dateFrom, dateTo) =
    GROUP SUM sumSold(Sku sk, Stock st, DATE df, DATE dt) IF  isParent(Group g, sk) AND inSession(group(GroupType groupType, sk)) AND select(st)
    BY groupType, g, df, dt; 
                                               
//--
                                               
markupSumSold 'Доход'(groupType, dateFrom, dateTo) =
    GROUP SUM markupSumSold(Sku sk, Stock st, DATE df, DATE dt) IF inSession(group(GroupType groupType, sk))  AND select(st)
    BY groupType, df, dt;
                                                   
quantitySold 'Кол-во'(groupType, dateFrom, dateTo) =
    GROUP SUM quantitySold(Sku sk, Stock st, DATE df, DATE dt) IF inSession(group(GroupType groupType, sk))  AND select(st)
    BY groupType, df, dt;
                                                       
sumSold 'Выручка'(groupType, dateFrom, dateTo) =
    GROUP SUM sumSold(Sku sk, Stock st, DATE df, DATE dt) IF inSession(group(GroupType groupType, sk))  AND select(st)
    BY groupType, df, dt;                                                 
                                               
                                               

ab 'AB, %' = DATA NUMERIC[8,3]();
bc 'BC, %' = DATA NUMERIC[8,3]();

best 'Количество топ лучших' = DATA INTEGER ();
worst 'Количество топ худших' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES () ab, bc, best, worst
;
DESIGN options {
    pane{
        NEW abc{
            caption = 'ABC-анализ';
            fill = 1;
            type = CONTAINERH;
            MOVE PROPERTY (ab());
            MOVE PROPERTY (bc());
            MOVE PROPERTY (best());
            MOVE PROPERTY (worst());                    
                    
        }

    }
}


markupSumSold 'Доход' = DATA LOCAL NUMERIC[18,4] (GroupType) MINCHARWIDTH 15;
quantitySold 'Кол-во' = DATA LOCAL NUMERIC[18,4] (GroupType) MINCHARWIDTH 15;
sumSold 'Выручка' = DATA LOCAL NUMERIC[18,4] (GroupType) MINCHARWIDTH 15;

markupSumSold 'Доход' = DATA LOCAL NUMERIC[18,4] (Group);
quantitySold 'Кол-во' = DATA LOCAL NUMERIC[18,4] (Group);
sumSold 'Выручка' = DATA LOCAL NUMERIC[18,4] (Group);

percMarkupSold 'ВД, %' (Group g) = round2(markupSumSold(g)*100.00 / sumSold(g)); 
percMarkupSold 'ВД, %' (GroupType t) = round2(markupSumSold(t)*100.00 / sumSold(t)); 
   
percInSumSold 'Удельный вес выручка, %'  (GroupType t,Group g) = round4(sumSold(g)*100.00 / sumSold(t));                                         
percInMarkupSumSold 'Удельный вес доход, %'  (GroupType t,Group g) = round4(markupSumSold(g)*100.00 / markupSumSold(t));  
percInQuantitySold 'Удельный вес кол-во, %'  (GroupType t,Group g) = round4(quantitySold(g)*100.00 / quantitySold(t));
 
averagePrice 'Средняя розничная цена' (Group g) = round2(sumSold(g) / quantitySold(g)); 
averageMarkup 'Средняя надбавка' (Group g) = round2(markupSumSold(g) / quantitySold(g)); 
averageDaysSum 'Средняя дневная выручка' (Group g, DATE df, DATE dt) = round2(sumSold(g) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysMarkupSum 'Средний дневной доход' (Group g, DATE df, DATE dt) = round2(markupSumSold(g) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysQuantity 'Среднее дневное кол-во продаж' (Group g, DATE df, DATE dt) = round2(quantitySold(g) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
 
averagePrice 'Средняя розничная цена' (GroupType t) = round2(sumSold(t) / quantitySold(t));  
averageMarkup 'Средняя надбавка' (GroupType t) = round2(markupSumSold(t) / quantitySold(t)); 
averageDaysSum 'Средняя дневная выручка' (GroupType t, DATE df, DATE dt) = round2(sumSold(t) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysMarkupSum 'Средний дневной доход' (GroupType t, DATE df, DATE dt) = round2(markupSumSold(t) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysQuantity 'Среднее дневное кол-во продаж' (GroupType t, DATE df, DATE dt) = round2(quantitySold(t) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 

//-- Лучшие
indexSumBest 'Номер п/п' (Group g)= PARTITION SUM 1 IF sumSold(g) BY groupType(g) ORDER DESC sumSold(g), name(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
indexMarkupBest 'Номер п/п' (Group g)= PARTITION SUM 1 IF markupSumSold(g) BY groupType(g) ORDER DESC markupSumSold(g), name(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
indexQuantityBest 'Номер п/п' (Group g)= PARTITION SUM 1 IF quantitySold(g) BY groupType(g) ORDER DESC quantitySold(g), name(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;

partitionSumBest  (Group g)= PARTITION SUM sumSold(g) BY groupType(g) ORDER indexSumBest(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
partitionMarkupBest  (Group g)= PARTITION SUM markupSumSold(g) BY groupType(g) ORDER indexMarkupBest(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
partitionQuantityBest (Group g)= PARTITION SUM quantitySold(g) BY groupType(g) ORDER indexQuantityBest(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;

sumBest = GROUP SUM sumSold(Group g) IF indexSumBest(g) <= best() BY groupType(g); 
markupBest = GROUP SUM markupSumSold(Group g) IF indexMarkupBest(g) <= best() BY groupType(g); 
quantityBest = GROUP SUM quantitySold(Group g) IF indexQuantityBest(g) <= best() BY groupType(g); 

percInSumBest 'Уд. вес' (GroupType t, Group g) = round4(sumSold(g)*100.00 / sumBest(t)); 
percInMarkupBest 'Уд. вес'(GroupType t, Group g) = round4(markupSumSold(g)*100.00 / markupBest(t)); 
percInQuantityBest 'Уд. вес' (GroupType t, Group g) = round4(quantitySold(g)*100.00 / quantityBest(t)); 

percOrderInSumBest 'Накопленный процент' (GroupType t, Group g) = round4(partitionSumBest(g)*100.00 / sumBest(t)); 
percOrderInMarkupBest 'Накопленный процент'(GroupType t, Group g) = round4(partitionMarkupBest(g)*100.00 / markupBest(t)); 
percOrderInQuantityBest 'Накопленный процент' (GroupType t, Group g) = round4(partitionQuantityBest(g)*100.00 / quantityBest(t)); 

percOrderSum 'Накопленный процент' (GroupType t, Group g) = round4(partitionSumBest(g)*100.00 / sumSold(t)); 
percOrderMarkup 'Накопленный процент'(GroupType t, Group g) = round4(partitionMarkupBest(g)*100.00 / markupSumSold(t)); 
percOrderQuantity 'Накопленный процент' (GroupType t, Group g) = round4(partitionQuantityBest(g)*100.00 / quantitySold(t)); 

index '№ п/п' (Group g, ABCType type) = CASE 
    WHEN isSum(type) THEN indexSumBest(g)
    WHEN isMarkupSum(type) THEN indexMarkupBest(g)    
    WHEN isQuantity(type) THEN indexQuantityBest(g)
;

percOrder 'Накопленный процент' (GroupType t, Group g, ABCType type) = CASE 
    WHEN isSum(type) THEN percOrderSum(t,g)
    WHEN isMarkupSum(type) THEN percOrderMarkup(t,g)    
    WHEN isQuantity(type) THEN percOrderQuantity(t,g)
;

status 'Рейтинг' (GroupType t, Group g, ABCType type) = CASE 
    WHEN  percOrder(t,g,type) <= ab() THEN 'A'
    WHEN  percOrder(t,g,type) <= bc() AND percOrder(t,g,type) > ab() THEN 'B'
    WHEN  percOrder(t,g,type) THEN 'C'
;
backgroundStatus(GroupType t, Group g, ABCType type) = CASE 
    WHEN  percOrder(t,g,type) <= ab() THEN RGB(204,255,204)
    WHEN  percOrder(t,g,type) <= bc() AND percOrder(t,g,type) > ab() THEN RGB(255, 250, 205)
    WHEN  percOrder(t,g,type) THEN  RGB(255,238,238)
;
//-- Худшие
indexSumWorst  (Group g)= PARTITION SUM 1 IF sumSold(g) BY groupType(g) ORDER sumSold(g), name(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
indexMarkupWorst  (Group g)= PARTITION SUM 1 IF markupSumSold(g) BY groupType(g) ORDER markupSumSold(g), name(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
indexQuantityWorst (Group g)= PARTITION SUM 1 IF quantitySold(g) BY groupType(g) ORDER quantitySold(g), name(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;

partitionSumWorst  (Group g)= PARTITION SUM  sumSold(g) BY groupType(g) ORDER indexSumWorst(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
partitionMarkupWorst  (Group g)= PARTITION SUM markupSumSold(g) BY groupType(g) ORDER indexMarkupWorst(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;
partitionQuantityWorst (Group g)= PARTITION SUM quantitySold(g) BY groupType(g) ORDER indexQuantityWorst(g)  MINCHARWIDTH 3 MINCHARWIDTH 6;

sumWorst = GROUP SUM sumSold(Group g) IF indexSumWorst(g) <= worst() BY groupType(g); 
markupWorst = GROUP SUM markupSumSold(Group g) IF indexMarkupWorst(g) <= worst() BY groupType(g); 
quantityWorst = GROUP SUM quantitySold(Group g) IF indexQuantityWorst(g) <= worst() BY groupType(g); 

percInSumWorst(GroupType t, Group g) = round4(sumSold(g)*100.00 / sumWorst(t)); 
percInMarkupWorst(GroupType t, Group g) = round4(markupSumSold(g)*100.00 / markupWorst(t)); 
percInQuantityWorst(GroupType t, Group g) = round4(quantitySold(g)*100.00 / quantityWorst(t)); 

percOrderInSumWorst 'Накопленный процент' (GroupType t, Group g) = round4(partitionSumWorst(g)*100.00 / sumWorst(t)); 
percOrderInMarkupWorst 'Накопленный процент'(GroupType t, Group g) = round4(partitionMarkupWorst(g)*100.00 / markupWorst(t)); 
percOrderInQuantityWorst 'Накопленный процент' (GroupType t, Group g) = round4(partitionQuantityWorst(g)*100.00 / quantityWorst(t)); 

fillProperty 'Заполнить' (GroupType t, ABCType type, DATE df, DATE dt) = ACTION {
    IF countSelectStocks() AND countInSessionSkuGroups(t) THEN {
        markupSumSold(Group g) <- NULL;
        quantitySold(Group g) <- NULL;
        sumSold(Group g) <- NULL;
        
        markupSumSold(t) <- NULL;
        quantitySold(t) <- NULL;
        sumSold(t) <- NULL;               
    
        markupSumSold(Group g) <- NUMERIC[18,4](markupSumSold(t,g,df,dt)) WHERE inSession(g) AND groupType(g) == t;
        quantitySold(Group g) <- NUMERIC[18,4](quantitySold(t,g,df,dt)) WHERE inSession(g) AND groupType(g) == t;
        sumSold(Group g) <- NUMERIC[18,4](sumSold(t,g,df,dt)) WHERE inSession(g) AND groupType(g) == t;
        
        markupSumSold(t) <- NUMERIC[18,4](markupSumSold(t,df,dt));
        quantitySold(t) <- NUMERIC[18,4](quantitySold(t,df,dt));
        sumSold(t) <- NUMERIC[18,4](sumSold(t,df,dt));                    
                        
    } ELSE {
        MESSAGE 'Не выбраны группы или склады';
    }
   
}

deleteProperty 'Сбросить' () = ACTION {
    markupSumSold(Group g) <- NULL;
    quantitySold(Group g) <- NULL;
    sumSold(Group g) <- NULL;
    
    markupSumSold(GroupType t) <- NULL;
    quantitySold(GroupType t) <- NULL;
    sumSold(GroupType t) <- NULL; 
       
    formRefresh();   
}

FORM abcAnalysisPrint 'ABC анализ'

    OBJECTS dates = (df = DATE, dt = DATE, t = GroupType, type= ABCType) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(df), valTo = OBJVALUE(dt)   
        
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) quantitySold, sumSold, markupSumSold, averagePrice, averageMarkup, percMarkupSold
    PROPERTIES (t,df,dt) averageDaysSum, averageDaysMarkupSum, averageDaysQuantity        

    PROPERTIES (type) READONLY staticCaption, isSum, isQuantity, isMarkupSum
     
    PROPERTIES nameSelectStocks(), ab(), bc()    
    
    OBJECTS gg=Group 
    PROPERTIES READONLY  id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            percOrder(t,gg,type), 
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg)

    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold, averagePrice, averageMarkup
    
    PROPERTIES (t,gg) READONLY percInSumSold, percInMarkupSumSold, percInQuantitySold
    PROPERTIES (gg,df,dt) averageDaysSum, averageDaysMarkupSum, averageDaysQuantity
    PROPERTIES index(gg,type)
    ORDER BY index(gg,type) 
    PROPERTIES (t,gg,type) percOrder, status   

;
abcAnalysisPrint 'ABC анализ' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) =
    ACTION PRINT abcAnalysisPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type   IMAGE 'print.png' IN print;

FORM abcAnalysis 'ABC анализ'

    OBJECTS dates = (df = DATE, dt = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(df), valTo = OBJVALUE(dt)   
    
    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a), countCompanyStock(sg)
    
    OBJECTS st = Stock 
    PROPERTIES (st) READONLY name
    PROPERTIES (st) select
    FILTERS isCompany(st),
            st IS DepartmentStore,
            isParent(sg, st) OR (st IS Stock AND NOT sg)
    FILTERGROUP select
        FILTER 'Отмеченные' select(st) 
            
    OBJECTS t = GroupType FIXED PANEL 
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) quantitySold, sumSold, markupSumSold
    
    OBJECTS type= ABCType FIXED PANEL 
    PROPERTIES (type) SELECTOR staticCaption
    
    TREE groupTree g=Group PARENT parent   
    PROPERTIES READONLY  order(g), name(g)
    PROPERTIES (g) inSession BACKGROUND backgroundInSession(g)
    PROPERTIES  FORCE PANEL TOOLBAR TODRAW g resetSelectedGroups(), selectLeaf(t)
    ORDER BY order(g), name(g)
    FILTERS groupType(g) == t
    
    OBJECTS gg=Group 
    PROPERTIES READONLY  index(gg,type), id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            percOrder(t,gg,type), 
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg)

    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,gg) READONLY percInSumSold SHOWIF isSum(type), 
                               percInMarkupSumSold SHOWIF isMarkupSum(type), 
                               percInQuantitySold SHOWIF isQuantity(type)
    PROPERTIES (t,gg,type) percOrder, status BACKGROUND backgroundStatus(t,gg,type)   
    PROPERTIES (gg) READONLY   averagePrice 
    PROPERTIES (gg,df,dt) READONLY averageDaysSum SHOWIF isSum(type),
                                   averageDaysMarkupSum SHOWIF isMarkupSum(type), 
                                   averageDaysQuantity SHOWIF isQuantity(type)                                                                                                               
                            
    ORDER BY index(gg,type) 
    
    PROPERTIES  FORCE PANEL TOOLBAR TODRAW gg fillProperty(t,type,df,dt), abcAnalysisPrint(t,type,df,dt)
    
    EVENTS ON CHANGE df deleteProperty() 
    EVENTS ON CHANGE dt deleteProperty() 
    EVENTS ON CHANGE t deleteProperty()  
;
DESIGN abcAnalysis {
    main {
        NEW header { 
            caption = 'Шапка';
            type = CONTAINERH;
            MOVE dates.box;
            MOVE st.box;
            MOVE t.box;
            MOVE type.box {
                MOVE PROPERTY (staticCaption(type)){ caption = 'Наименование';}
            }
        }
        NEW sum {
            caption = 'Итоги';
            type = CONTAINERH;
            MOVE PROPERTY (quantitySold(t)) { minimumCharWidth = 15; preferredCharWidth = 17;}
            MOVE PROPERTY (sumSold(t)) { minimumCharWidth = 15; preferredCharWidth = 17;}
            MOVE PROPERTY (markupSumSold(t)) { minimumCharWidth = 15; preferredCharWidth = 17;}
        }
        NEW tab {
            fill = 1;
            type = TABBED;
            NEW param {
                caption = 'Параметры';
                type = SPLITV ;   
                NEW param1{
                    fill = 1;
                    type = SPLITH;
                    caption = 'Склады';
                    MOVE stockTree.tree.box;
                    MOVE st.box;
                }
                MOVE groupTree.tree.box{caption = 'Группы';}
            }
            
            MOVE gg.box{caption = 'Результат'; }
        }
         
    }
    MOVE functions.box;
}


NAVIGATOR {
    retailNavigator {
        NEW abcNavigator 'ABC анализ' {
            ADD abcAnalysis;
        }
    }
}
statusSumBest 'Рейтинг' (GroupType t, Group g) = CASE 
    WHEN  percOrderInSumBest(t,g) <= ab() THEN 'A'
    WHEN  percOrderInSumBest(t,g) <= bc() AND percOrderInSumBest(t,g) > ab() THEN 'B'
    WHEN  percOrderInSumBest(t,g) THEN 'C'
;
statusMarkupBest 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInMarkupBest(t,g) <= ab() THEN 'A'
    WHEN  percOrderInMarkupBest(t,g) <= bc() AND percOrderInMarkupBest(t,g) > ab() THEN 'B'
    WHEN  percOrderInMarkupBest(t,g) THEN 'C'
;
statusQuantityBest 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInQuantityBest(t,g) <= ab() THEN 'A'
    WHEN  percOrderInQuantityBest(t,g) <= bc() AND percOrderInQuantityBest(t,g) > ab() THEN 'B'
    WHEN  percOrderInQuantityBest(t,g) THEN 'C'
;
//--
statusSumWorst 'Рейтинг' (GroupType t, Group g) = CASE 
    WHEN  percOrderInSumWorst(t,g) <= ab() THEN 'A'
    WHEN  percOrderInSumWorst(t,g) <= bc() AND percOrderInSumWorst(t,g) > ab() THEN 'B'
    WHEN  percOrderInSumWorst(t,g) THEN 'C'
;
statusMarkupWorst 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInMarkupWorst(t,g) <= ab() THEN 'A'
    WHEN  percOrderInMarkupWorst(t,g) <= bc() AND percOrderInMarkupWorst(t,g) > ab() THEN 'B'
    WHEN  percOrderInMarkupWorst(t,g) THEN 'C'
;
statusQuantityWorst 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInQuantityWorst(t,g) <= ab() THEN 'A'
    WHEN  percOrderInQuantityWorst(t,g) <= bc() AND percOrderInQuantityWorst(t,g) > ab() THEN 'B'
    WHEN  percOrderInQuantityWorst(t,g) THEN 'C'
;

FORM abcBestPrint 'Топ лучших'

    OBJECTS dates = (df = DATE, dt = DATE, t = GroupType, type= ABCType) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(df), valTo = OBJVALUE(dt)    

    PROPERTIES (type) READONLY staticCaption, isSum, isQuantity, isMarkupSum
                
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) sumWorst, markupWorst, quantityWorst, sumBest, markupBest, quantityBest
     
    PROPERTIES nameSelectStocks(), ab(), bc(), best(), worst()    
    
    // выручка
    OBJECTS gg=Group 
    PROPERTIES READONLY  indexSumBest(gg), id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg),
            indexSumBest(gg) <= best()
    ORDER BY indexSumBest(gg)
    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,gg) READONLY percInSumBest, percOrderInSumBest

    PROPERTIES (t,gg) statusSumBest 
    PROPERTIES (gg) READONLY   averagePrice 
    PROPERTIES (gg,df,dt) READONLY averageDaysSum    
    
    // доход
    OBJECTS ggg=Group 
    PROPERTIES READONLY  indexMarkupBest(ggg), id(ggg), name(ggg)
    FILTERS groupType(ggg) == t,
            inSession(ggg),
            sumSold(ggg)  OR quantitySold(ggg) OR markupSumSold(ggg),
            indexMarkupBest(ggg) <= best()
    ORDER BY indexMarkupBest(ggg)
    PROPERTIES (ggg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,ggg) READONLY percInMarkupBest, percOrderInMarkupBest

    PROPERTIES (t,ggg) statusMarkupBest 
    PROPERTIES (ggg) READONLY   averagePrice 
    PROPERTIES (ggg,df,dt) READONLY averageDaysMarkupSum  
     
    // кол-во
    OBJECTS g=Group 
    PROPERTIES READONLY  indexQuantityBest(g), id(g), name(g)
    FILTERS groupType(g) == t,
            inSession(g),
            sumSold(g)  OR quantitySold(g) OR markupSumSold(g),
            indexQuantityBest(g) <= best()
    ORDER BY indexQuantityBest(g)
    PROPERTIES (g) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,g) READONLY percInQuantityBest, percOrderInQuantityBest

    PROPERTIES (t,g) statusQuantityBest 
    PROPERTIES (g) READONLY   averagePrice 
    PROPERTIES (g,df,dt) READONLY averageDaysQuantity       
;
abcBestPrint 'Топ лучших' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) =
    ACTION PRINT abcBestPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type   IMAGE 'print.png' IN print;
    
FORM abcWorstPrint 'Топ худших'

    OBJECTS dates = (df = DATE, dt = DATE, t = GroupType, type= ABCType) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(df), valTo = OBJVALUE(dt)    

    PROPERTIES (type) READONLY staticCaption, isSum, isQuantity, isMarkupSum  
        
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) sumWorst, markupWorst, quantityWorst, sumBest, markupBest, quantityBest
     
    PROPERTIES nameSelectStocks(), ab(), bc(), best(), worst()    
    
    // выручка
    OBJECTS gg=Group 
    PROPERTIES READONLY  indexSumWorst(gg), id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg),
            indexSumWorst(gg) <= worst()
    ORDER BY indexSumWorst(gg)
    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,gg) READONLY percInSumWorst, percOrderInSumWorst

    PROPERTIES (t,gg) statusSumWorst 
    PROPERTIES (gg) READONLY   averagePrice 
    PROPERTIES (gg,df,dt) READONLY averageDaysSum    
    
    // доход
    OBJECTS ggg=Group 
    PROPERTIES READONLY  indexMarkupWorst(ggg), id(ggg), name(ggg)
    FILTERS groupType(ggg) == t,
            inSession(ggg),
            sumSold(ggg)  OR quantitySold(ggg) OR markupSumSold(ggg),
            indexMarkupWorst(ggg) <= worst()
    ORDER BY indexMarkupWorst(ggg)
    PROPERTIES (ggg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,ggg) READONLY percInMarkupWorst, percOrderInMarkupWorst

    PROPERTIES (t,ggg) statusMarkupWorst 
    PROPERTIES (ggg) READONLY   averagePrice 
    PROPERTIES (ggg,df,dt) READONLY averageDaysMarkupSum  
     
    // кол-во
    OBJECTS g=Group 
    PROPERTIES READONLY  indexQuantityWorst(g), id(g), name(g)
    FILTERS groupType(g) == t,
            inSession(g),
            sumSold(g)  OR quantitySold(g) OR markupSumSold(g),
            indexQuantityWorst(g) <= worst()
    ORDER BY indexQuantityWorst(g)
    PROPERTIES (g) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,g) READONLY percInQuantityWorst, percOrderInQuantityWorst

    PROPERTIES (t,g) statusQuantityWorst 
    PROPERTIES (g) READONLY   averagePrice 
    PROPERTIES (g,df,dt) READONLY averageDaysQuantity       
;
abcWorstPrint 'Топ худших' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) =
    ACTION PRINT abcWorstPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type   IMAGE 'print.png' IN print;
    
EXTEND FORM abcAnalysis 
    PROPERTIES  FORCE PANEL TOOLBAR TODRAW gg abcBestPrint(t,type,df,dt), abcWorstPrint(t,type,df,dt)
;