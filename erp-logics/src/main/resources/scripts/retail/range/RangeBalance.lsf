MODULE RangeBalance;

REQUIRE Range;

NAMESPACE Range;

CLASS RangeDocument 'Исполнение ассортимента';
TABLE rangeDocument(RangeDocument);

@defineDocumentHeaderTime(RangeDocument);
@defineDocumentHeaderNote(RangeDocument);
@defineDocumentHeaderCreated(RangeDocument);
@deriveDocumentHeaderTimePrefix(RangeDocument, );
@defineDocumentHeaderNumber(RangeDocument);
@defineNumeratedDefault(RangeDocument, 'Исполнение ассортимента', 'ИА');
@defineDocumentHeaderDescription (RangeDocument, 'Исполнение ассортимента');

fromDateRangeDocument 'Дата с' = DATA DATE (RangeDocument) IN documentHeader;
toDateRangeDocument 'Дата по' = DATA DATE (RangeDocument) IN documentHeader;

WHEN SESSION SET(o IS RangeDocument) DO {
    IF o IS RangeDocument AND NOT fromDateRangeDocument(o) THEN fromDateRangeDocument(o) <- currentDate();
    IF o IS RangeDocument AND NOT toDateRangeDocument(o) THEN toDateRangeDocument(o) <- currentDate();
};


TABLE RangeDocumentStoreDate(RangeDocument, Store, DATE);

//--
countSkuRangeDocumentStoreDate 'Кол-во позиций в ассортименте' = DATA INTEGER (RangeDocument, Store, DATE);     
calcCountSkuStoreDate (st, d) =  GROUP SUM 1 IF countRangeSkuStoreDate(s, st, d) BY  st, d;

countAverageSkuRangeDocumentStoreDate 'Кол-во позиций с остатком меньше ср.дн. р-ии' = DATA INTEGER (RangeDocument, Store, DATE); 
averageSoldSkuStore 'Продаж в день' (sku, store) = GROUP SUM averageSoldSkuStock(sku, stock) BY sku, storeDepartmentStore(stock);
calcCountAverageSkuStoreDate= GROUP SUM 1 IF countRangeSkuStoreDate(s, st, d) AND NOT
    (balanceBSkuStoreDate(s, st, d) >= averageSoldSkuStore(s, st)) AND averageSoldSkuStore(s, st)          
        BY  st, d;  
        
percAverageSkuRangeDocumentStoreDate '% в ассортименте с остатком меньше ср.дн. р-ии' (document, store, date)= 
    NUMERIC[12,4](countAverageSkuRangeDocumentStoreDate(document, store, date)) / 
    (countSkuRangeDocumentStoreDate(document, store, date) IF countSkuRangeDocumentStoreDate(document, store, date) != 0) *  
    100.00;       
        
countLessSkuRangeDocumentStoreDate 'Кол-во позиций без остатка или  с остатком меньше либо равным 0' = DATA INTEGER (RangeDocument, Store, DATE); 
calcLessAverageSkuStoreDate= GROUP SUM 1 IF countRangeSkuStoreDate(s, st, d) AND  NOT (balanceBSkuStoreDate(s, st, d) >0)          
        BY  st, d;   
percLessSkuRangeDocumentStoreDate '% в ассортименте с остатком меньше либо равным 0' (document, store, date)= 
    NUMERIC[12,4](countLessSkuRangeDocumentStoreDate(document, store, date)) / 
    (countSkuRangeDocumentStoreDate(document, store, date) IF countSkuRangeDocumentStoreDate(document, store, date) != 0) * 
    100.00;    
       
countNotSkuRangeDocumentStoreDate 'Кол-во позиций с остатком без ассортимента' = DATA INTEGER (RangeDocument, Store, DATE); 
calcCountNotSkuStoreDate= GROUP SUM 1 IF balanceBSkuStoreDate(s, st, d) >0 AND NOT countRangeSkuStoreDate(s, st, d)        
        BY  st, d;       
             
fillSkuRangeDocumentStoreDate 'Заполнить данные по ассортименту' = ACTION (document, store, date) {         
    countSkuRangeDocumentStoreDate(document, store, date) <-  calcCountSkuStoreDate(store, date);  
    countAverageSkuRangeDocumentStoreDate(document, store, date) <-  calcCountAverageSkuStoreDate(store, date);
    countLessSkuRangeDocumentStoreDate(document, store, date) <-  calcLessAverageSkuStoreDate(store, date);
    countNotSkuRangeDocumentStoreDate(document, store, date) <-  calcCountNotSkuStoreDate(store, date);              
}  

fillSkuRangeDocumentDateFromTo 'Заполнить данные по ассортименту' = ACTION (document, dateFrom, dateTo) {       
    LOCAL dateCur = DATE();               
      
    FOR useRangeStore(store) AND isCompanyStore(store) DO {   
        dateCur() <- dateFrom;
        WHILE dateCur() <= dateTo DO {      
            fillSkuRangeDocumentStoreDate(document, store, dateCur()); 
            dateCur() <- sumDate(dateCur(), 1);
        }
    }
} 
fillSkuRangeDocument 'Заполнить данные по ассортименту' (document) = ACTION fillSkuRangeDocumentDateFromTo(document, fromDateRangeDocument(document), toDateRangeDocument(document));

// -- 
 
inSkuRangeStoreDate 'В ассортименте' (s, range, st, d) = levelRangeStoreTypeDate(range, storeTypeStore(st), d) >= levelRangeSkuDate(range, s, d);  

TABLE RangeDocumentRangeStoreDate(RangeDocument, Range, Store, DATE);

countSkuRangeDocumentRangeStoreDate 'Кол-во позиций в ассортименте' = DATA INTEGER (RangeDocument, Range, Store, DATE);    
calcCountSkuRangeStoreDate (range, store, date) =  GROUP SUM 1 IF inSkuRangeStoreDate(sku, range, store, date) BY  range, store, date;

countAverageSkuRangeDocumentRangeStoreDate 'Кол-во позиций с остатком меньше ср.дн. р-ии' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
calcCountAverageSkuRangeStoreDate= GROUP SUM 1 IF inSkuRangeStoreDate(s, r, st, d) AND NOT
    (balanceBSkuStoreDate(s, st, d) >= averageSoldSkuStore(s, st)) AND averageSoldSkuStore(s, st)          
        BY  r, st, d;  
        
percAverageSkuRangeDocumentRangeStoreDate '% в ассортименте с остатком меньше ср.дн. р-ии' (document, range, store, date)= 
    NUMERIC[12,4](countAverageSkuRangeDocumentRangeStoreDate(document, range, store, date)) / 
    (countSkuRangeDocumentRangeStoreDate(document, range, store, date) IF countSkuRangeDocumentRangeStoreDate(document, range, store, date) != 0) *  
    100.00;       
        
countLessSkuRangeDocumentRangeStoreDate 'Кол-во позиций без остатка или  с остатком меньше либо равным 0' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
calcCountLessSkuRangeStoreDate = GROUP SUM 1 IF inSkuRangeStoreDate(s, r, st, d) AND  NOT (balanceBSkuStoreDate(s, st, d) >0)          
        BY  r, st, d;   
percLessSkuRangeDocumentRangeStoreDate '% в ассортименте с остатком меньше либо равным 0' (document, range, store, date)= 
    NUMERIC[12,4](countLessSkuRangeDocumentRangeStoreDate(document, range, store, date)) / 
    (countSkuRangeDocumentRangeStoreDate(document, range, store, date) IF countSkuRangeDocumentRangeStoreDate(document, range, store, date) != 0) * 
    100.00;    
       
countNotSkuRangeDocumentRangeStoreDate 'Кол-во позиций с остатком без ассортимента' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
calcCountNotRangeInRangeStoreDate= GROUP SUM 1 IF balanceBSkuStoreDate(s, st, d) >0 AND r IS Range AND NOT inSkuRangeStoreDate(s, r, st, d)        
        BY  r, st, d;       
             
fillSkuRangeDocumentRangeStoreDate 'Заполнить данные по ассортименту' = ACTION (document, range, store, date) {         
    countSkuRangeDocumentRangeStoreDate(document, range, store, date) <-  calcCountSkuRangeStoreDate(range, store, date);  
    countAverageSkuRangeDocumentRangeStoreDate(document, range, store, date) <-  calcCountAverageSkuRangeStoreDate(range, store, date);
    countLessSkuRangeDocumentRangeStoreDate(document, range, store, date) <-  calcCountLessSkuRangeStoreDate(range, store, date);
    countNotSkuRangeDocumentRangeStoreDate(document, range, store, date) <-  calcCountNotRangeInRangeStoreDate(range, store, date);              
}  

fillRangeDocumentRangeDateFromTo 'Заполнить данные по ассортименту' = ACTION (document, dateFrom, dateTo) {       
    LOCAL dateCur = DATE();               
      
    FOR useRangeStore(store) AND isCompanyStore(store) AND range IS Range DO {   
        dateCur() <- dateFrom;
        WHILE dateCur() <= dateTo DO {      
            fillSkuRangeDocumentRangeStoreDate(document, range, store, dateCur());
            dateCur() <- sumDate(dateCur(), 1);
        }
    }
}  
 
fillSkuRangeRangeDocument 'Заполнить данные по ассортименту' (document) = ACTION fillRangeDocumentRangeDateFromTo(document, fromDateRangeDocument(document), toDateRangeDocument(document));
 
FORM rangeBalance 'Исполнение ассортимента'

    OBJECTS r = RangeDocument FIXED PANEL
    PROPERTIES (r) nameNumeratorRangeDocument, 
                   numberRangeDocument, seriesRangeDocument, dateRangeDocument, timeRangeDocument,
                   noteRangeDocument, fromDateRangeDocument, toDateRangeDocument, fillSkuRangeDocument         
   
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st)

    FILTERS stringEqualsAll(a),
            inChainStoresStoreType (t, st)

    OBJECTS dts = (d = DATE, ts = Store) FIXED GRID
    PROPERTIES READONLY dataD = OBJVALUE(d)
    PROPERTIES(ts) SELECTOR nameStore
    PROPERTIES(ts) READONLY addressStore, nameLegalEntityStore
    FILTERS  d >= fromDateRangeDocument(r), d <= toDateRangeDocument(r),
             countSkuRangeDocumentStoreDate(r,ts,d)
             
    ORDER BY dataD, nameStore(ts) 

    FILTERS inChainStoresStoreTypeStore(t, st, ts),
            isCompanyStore(ts),
            useRangeStore(ts)
        
 
    PROPERTIES(r, ts, d) countSkuRangeDocumentStoreDate, countLessSkuRangeDocumentStoreDate, percLessSkuRangeDocumentStoreDate,
                    countAverageSkuRangeDocumentStoreDate, percAverageSkuRangeDocumentStoreDate, 
                    countNotSkuRangeDocumentStoreDate      
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sg) DEFAULT
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, nameUOMSku
    PROPERTIES READONLY balanceBSkuStoreDate(s, ts, d), averageSoldSkuStore(s, ts)
    
    FILTERGROUP rangeSku 
        FILTER 'Позиции в ассортименте' 'F11' countRangeSkuStoreDate(s, ts, d)  
        FILTER 'Позиции с остатком <= 0' 'F9' countRangeSkuStoreDate(s, ts, d) AND  NOT (balanceBSkuStoreDate(s, ts, d) >0) 
        FILTER 'Позиции с остатком < ср.дн. р-ии' 'F10' countRangeSkuStoreDate(s, ts, d) AND NOT (balanceBSkuStoreDate(s, ts, d) >= averageSoldSkuStore(s, ts)) AND averageSoldSkuStore(s, ts)               
        FILTER 'Позиции с остатком без ассортимента' 'F8' balanceBSkuStoreDate(s, ts, d) >0 AND NOT countRangeSkuStoreDate(s, ts, d) 
    FILTERS isParentSkuGroupSku(sg,s)
    
 
    PROPERTIES(r) fillSkuRangeRangeDocument     
    
    OBJECTS ddtst = (dd = DATE, tst = Store, rn = Range) FIXED GRID
    PROPERTIES READONLY dataDe = OBJVALUE(dd)
    PROPERTIES(tst) SELECTOR nameStore
    PROPERTIES(tst) READONLY addressStore, nameLegalEntityStore
    PROPERTIES(rn) SELECTOR nameRange
    FILTERS  dd >= fromDateRangeDocument(r), dd <= toDateRangeDocument(r),
             countSkuRangeDocumentRangeStoreDate(r,rn,tst,dd)
    FILTERS inParentRangeSkuGroup(rn, sg) OR NOT countSkuGroupRange(rn)         
    ORDER BY dataDe, nameStore(tst), nameRange(rn)  

    FILTERS inChainStoresStoreTypeStore(t, st, tst),
            isCompanyStore(tst),
            useRangeStore(tst)
        

    PROPERTIES(r, rn, ts, d) countSkuRangeDocumentRangeStoreDate, countLessSkuRangeDocumentRangeStoreDate, percLessSkuRangeDocumentRangeStoreDate,
                    countAverageSkuRangeDocumentRangeStoreDate, percAverageSkuRangeDocumentRangeStoreDate, 
                    countNotSkuRangeDocumentRangeStoreDate       
                    
    OBJECTS ss = Sku
    PROPERTIES(ss) READONLY idBarcodeSku, nameSku, nameUOMSku
    PROPERTIES READONLY balanceBSkuStoreDate(ss, tst, d), averageSoldSkuStore(ss, tst)
    
    FILTERGROUP rangeSku1 
        FILTER 'Позиции в ассортименте' 'F11' inSkuRangeStoreDate(ss, rn, tst, dd)  
        FILTER 'Позиции с остатком <= 0' 'F9' inSkuRangeStoreDate(ss, rn, tst, dd) AND  NOT (balanceBSkuStoreDate(ss, tst, dd) >0) 
        FILTER 'Позиции с остатком < ср.дн. р-ии' 'F10' inSkuRangeStoreDate(ss, rn, tst, dd) AND NOT (balanceBSkuStoreDate(ss, tst, dd) >= averageSoldSkuStore(ss, tst)) AND averageSoldSkuStore(ss, tst)               
        FILTER 'Позиции с остатком без ассортимента' 'F8' balanceBSkuStoreDate(ss, tst, dd) >0 AND NOT inSkuRangeStoreDate(ss, rn, tst, dd)
    FILTERS isParentSkuGroupSku(sg,ss)                    

    EDIT RangeDocument OBJECT r       
;

DESIGN rangeBalance FROM DEFAULT {
    preferredSize = (1024, 768);
    ADD r.box {
        type = CONTAINERV;
        NEW top1 {
            type = CONTAINERH;
            ADD r.numbered; 
            NEW date {
                caption = 'Период';
                type = CONTAINERH;
                ADD PROPERTY (fromDateRangeDocument(r));
                ADD PROPERTY (toDateRangeDocument(r));
            }
        }
        NEW top2 {
            type = CONTAINERH;
            ADD r.documentHeader;                   
            ADD r.documentPrm;
        }       
    };
    NEW pane {
        fill = 1;
        type = SPLITH;
        NEW leftPane {
            fill = 1;
            type = SPLITV;
            ADD treeStore.tree.box;
            ADD skuTree.tree.box {
            }
        }
        NEW rightPane{
            type = TABBED;
            fill = 2;
            NEW rightPane1 {
                caption = 'Магазин';
                fill = 1;   
                NEW rightPane11{
                    ADD PROPERTY(fillSkuRangeDocument(r));    
                };               
                NEW rightPane12{
                    fill = 1;
                    type = SPLITV;
                    ADD dts.box;                     
                    ADD s.box;
                }    
            } 
            NEW rightPane2 {
                caption = 'Магазин / ассортимент';
                fill = 1;   
                NEW rightPane21{
                    ADD PROPERTY(fillSkuRangeRangeDocument(r));    
                };               
                NEW rightPane22{
                    fill = 1;
                    type = SPLITV;
                    ADD ddtst.box;                     
                    ADD ss.box;
                }    
            }            
        }    
    }
    ADD functions.box;
}   
          
FORM rangeBalances 'Исполнения ассортимента'
    OBJECTS r = RangeDocument
    PROPERTIES (r) READONLY numberRangeDocument, seriesRangeDocument, dateRangeDocument, timeRangeDocument,
                   fromDateRangeDocument, toDateRangeDocument,  noteRangeDocument 
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
                        
    DIALOG RangeDocument OBJECT r          
;
              
NAVIGATOR {
    retailRangeNavigator {
        ADD rangeBalances;
    }
}
