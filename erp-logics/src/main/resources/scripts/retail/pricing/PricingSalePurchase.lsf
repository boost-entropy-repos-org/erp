MODULE PricingSalePurchase;

REQUIRE PricingPurchase, SalePurchaseInvoice, SalePurchaseInvoiceShipment, PriceListStore;

NAMESPACE Sale;

//----------------------------------------------------------------------------//

@defineDocumentInterfaceHeaderPricingCommittee(invoice, customerStock, purchase);

// Кол-во
@defineDocumentInterfaceDetailQuantityPrefix (invoice, purchasePricing, ' расценено (закупка)');

// Изменененно кол-во для расценки (пока нигде не используется)
extraPurchasePricingQuantity = ABSTRACT NUMERIC[14,3] (UserInvoiceDetail) PERSISTENT;
purchasePricingQuantity(UserInvoiceDetail detail) <- quantity(detail) (+) extraPurchasePricingQuantity(detail)
    WHEN CHANGED(quantity(detail)) OR CHANGED(extraPurchasePricingQuantity(detail));

// Виды цен

@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentInterfaceHeaderPriceListType (invoice, priceListType, calcPurchaseRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, priceListType, calcPurchaseRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, priceListType, calcPurchaseRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (invoice, priceListType, purchaseRetail, ' (розничная)');

@defineDocumentInterfaceHeaderProperty (invoice, useSupplierStock, 'Использовать склад поставщика');


CONSTRAINT currency(UserInvoice invoice) != currency[PriceListType](calcPurchaseRetailCalcPriceListType(invoice))
           CHECKED BY calcPurchaseRetailCalcPriceListType[UserInvoice]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';
CONSTRAINT currency(UserInvoice invoice) != currency(calcPurchaseRetailPriceListType(invoice))
           CHECKED BY calcPurchaseRetailPriceListType[UserInvoice]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

CONSTRAINT currency(UserInvoiceDetail detail) != currency(purchaseRetailPriceListType(detail))
           CHECKED BY purchaseRetailPriceListType[UserInvoiceDetail]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

overRetailStock = ABSTRACT Stock (UserInvoiceDetail);
retailStock (UserInvoiceDetail d) = OVERRIDE 
    (IF useSupplierStock(userInvoice(d)) THEN supplierStock(d) ELSE customerStock(d)), 
    overRetailStock(d);

WHEN SESSION // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcPurchaseRetailPriceListType(UserInvoiceDetail detail)) OR
    CHANGED(calcPurchaseRetailCalcPriceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(customerStock(detail)) OR
    CHANGED(dateTime(detail))) AND PriceListType pt == calcPurchaseRetailPriceListType(detail) NOINLINE (pt) DO
    purchaseRetailPriceListType(detail) <- IF (IF batch(detail) 
                                                        THEN prevPriceB(pt,batch(detail),retailStock(detail),dateTime(detail))
                                                        ELSE prevPriceB(pt, sku(detail), retailStock(detail), dateTime(detail)))
                                                THEN pt
                                                ELSE calcPurchaseRetailCalcPriceListType(detail);

// если не задана управленческая цена
WHEN SESSION // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcPurchaseRetailPriceListType(UserInvoiceDetail detail)) OR
    CHANGED(calcPurchaseRetailCalcPriceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(customerStock(detail)) OR
    CHANGED(dateTime(detail))) 
    AND calcPurchaseRetailCalcPriceListType(detail) AND NOT calcPurchaseRetailPriceListType(detail) DO
    purchaseRetailPriceListType(detail) <- calcPurchaseRetailCalcPriceListType(detail);


// Базовая цена
overPurchasePricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT;
overPurchasePricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) PERSISTENT;
overPurchasePricingPrice (UserInvoiceDetail detail) += overPurchasePricingPrice(detail);

purchasePricingPrice (UserInvoiceDetail detail) = OVERRIDE price(detail), overPurchasePricingPrice(detail) PERSISTENT;
purchasePricingPrice (InvoiceDetail detail) = OVERRIDE price(detail), overPurchasePricingPrice(detail) PERSISTENT;

@defineDocumentInterfaceDetailMarkupPrefix (invoice, purchaseRetail, ' (закупка)');

@defineDocumentInterfaceDetailVAT(invoice, countryCustomerStock, purchaseRetail, ' розничный (закупка)');
@deriveDocumentDetailVAT(userInvoice, purchaseRetail, date, sku, customerStock);
@deriveDocumentDetailValueVAT(userInvoice, purchaseRetail);

@defineDocumentInterfaceDetailPricePrefix(invoice, purchaseRetail, ' розничная (закупка)');

// Действия по измению цен и надбавок на форме
//purchaseRoundConditionUserInvoiceDetail(userInvoiceDetail) =
//    IF roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        THEN roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        ELSE roundConditionDepartmentStore(customerStockUserInvoiceDetail(userInvoiceDetail));

overPurchaseRoundCondition (UserInvoiceDetail d) = IF purchaseRetailPriceListType(d) IS CalcPriceListType 
    THEN roundCondition(purchaseRetailPriceListType(d), sku(d)) 
    ELSE roundCondition(purchaseRetailPriceListType(d));

purchaseRoundCondition(UserInvoiceDetail d) =  IF overPurchaseRoundCondition(d)
        THEN overPurchaseRoundCondition(d)              
        ELSE roundCondition(customerStock(d));
        
        

@changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, purchaseRetail, purchasePricing, purchaseRetail, purchaseRetail);
@changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, purchaseRetail, purchasePricing, purchaseRetail, purchaseRetail, purchase);

// Проставление цены по виду цен
overLimitPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail);
@deriveDocumentDetailBatchOnSessionPriceListType(UserInvoiceDetail, purchaseRetail, purchasePricing, retailStock, userInvoice, );
@recalculateDocumentDetailBatchOnSessionPriceListType(UserInvoiceDetail, purchaseRetail, purchasePricing, retailStock, userInvoice, ,' закупка',d);

// -- Суммы по строкам

@defineDocumentInterfaceDetailMarkupSumPrefix (invoice, purchaseRetail, ' (закупка)');
@defineDocumentInterfaceDetailVATDataSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');
@defineDocumentInterfaceDetailDataSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');

// Расчет сумм обратным счетом
@deriveDocumentDetailSumPrefix(userInvoice, purchaseRetail, currency, purchasePricingQuantity);
@deriveDocumentDetailReverseVATSumPrefix(userInvoice, purchaseRetail, purchaseRetail);
@deriveDocumentDetailMarkupSumPrefix(userInvoice, purchaseRetail, purchaseRetail, );

// -- Суммы по документу
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');

@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetailVAT, ' НДС розничная (закупка)');
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetailMarkup, ' надбавки (закупка)');

// Галочка по созданию акта расценки на закупке
@defineDocumentInterfaceProperty (invoice, createPurchasePricing, 'Создать акт расценки (закупка)');

// -- Операции
@defineOperationProperty(createPurchasePricing, 'Акт расценки (закупка)', purchaseContainer);
@deriveDocumentOperationProperty(UserInvoice, createPurchasePricing);

//// Вид цены для акта расценки (закупка)
//purchaseRetailPriceListTypeOperation = DATA PriceListType (Operation);
//namePurchaseRetailPriceListTypeOperation 'Вид цен акт расценки управленческий (закупка) ' (operation) = namePriceListType(purchaseRetailPriceListTypeOperation(operation));
//
//purchaseRetailCalcPriceListTypeOperation = DATA CalcPriceListType (Operation);
//namePurchaseRetailCalcPriceListTypeOperation 'Вид цен акт расценки надбавка (закупка)' (operation) = namePriceListType(purchaseRetailCalcPriceListTypeOperation(operation));
//
//EXTEND FORM operation
//    PROPERTIES(o) namePurchaseRetailPriceListTypeOperation, namePurchaseRetailCalcPriceListTypeOperation
//;
//
//DESIGN operation{
//    createContainer {
//        ADD PROPERTY(namePurchaseRetailPriceListTypeOperation);
//        ADD PROPERTY(namePurchaseRetailCalcPriceListTypeOperation);
//    }
//}
//
//calcPurchaseRetailPriceListTypeUserInvoice (invoice) <- purchaseRetailPriceListTypeOperation(operationUserInvoice(invoice))
//    WHEN CHANGED(operationUserInvoice(invoice));
//
//calcPurchaseRetailCalcPriceListTypeUserInvoice (invoice) <- purchaseRetailCalcPriceListTypeOperation(operationUserInvoice(invoice))
//    WHEN CHANGED(operationUserInvoice(invoice));

// Операция расценки
@defineDocumentInterfaceOperationPrefix (invoice, purchasePricing, Pricing, ' расценка (закупка)');

purchasePricingOperation  = DATA Pricing.Operation (Operation);
namePurchasePricingOperation 'Операция расценка (закупка)' (Operation operation)= name(purchasePricingOperation(operation));

purchasePricingOperation (UserInvoice invoice) <- purchasePricingOperation(operation(invoice))
    WHEN CHANGED(operation(invoice));

// Записываем тип цены по умолчанию из операции

calcPurchaseRetailPriceListType (UserInvoice invoice) <- IF pricingPriceListType(purchasePricingOperation(invoice)) 
    THEN pricingPriceListType(purchasePricingOperation(invoice))
    ELSE retailPriceListType(customerStock(invoice))
        WHEN CHANGED(purchasePricingOperation(invoice)) OR CHANGED(customerStock(invoice));
    
calcPurchaseRetailCalcPriceListType (UserInvoice invoice) <- IF pricingCalcPriceListType(purchasePricingOperation(invoice))
    THEN pricingCalcPriceListType(purchasePricingOperation(invoice))
    ELSE retailCalcPriceListType(customerStock(invoice))
        WHEN CHANGED(purchasePricingOperation(invoice)) OR CHANGED(customerStock(invoice));
        
useSupplierStock (UserInvoice invoice) <- useSupplierStock(purchasePricingOperation(invoice))   
        WHEN CHANGED(purchasePricingOperation(invoice));              

EXTEND FORM operation
    PROPERTIES(o) namePurchasePricingOperation
;
DESIGN operation {
    purchaseContainer {
        MOVE PROPERTY(namePurchasePricingOperation(o)) AFTER PROPERTY(createPurchasePricing(o));
    }
}

showCreatePurchasePricing (Invoice invoice) = customerStock(invoice) IS DepartmentStore AND createPurchaseInvoice(invoice) AND NOT costLedger(customerStock(invoice));
showPurchasePricing (Invoice invoice) = showCreatePurchasePricing (invoice) AND NOT createPurchasePricing(invoice);
toShowPurchasePricing (Invoice invoice) = showCreatePurchasePricing (invoice) AND createPurchasePricing(invoice);

backgroundPurchaseRetail 'Цвет' (Invoice invoice) = RGB(255, 255, 190) IF invoice IS Invoice;

printSalePurchasePricing 'Акт расценки (закупка)' (Invoice invoice) = { printPricing(purchaseInvoice(invoice)); } IMAGE 'print.png' IN print;

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF showCreatePurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i) createPurchasePricing
    PROPERTIES(i) SHOWIF createPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)
                  namePurchasePricingOperation, namePurchasePricingCommittee,
                  nameCalcPurchaseRetailPriceListType, nameCalcPurchaseRetailCalcPriceListType,
                  useSupplierStock,
                  purchaseRetailSumUserInvoiceDetail BEFORE purchaseShipmentSumUserInvoiceDetail(i)

    PROPERTIES(d) BEFORE purchaseExpiryDate(d) SHOWIF createPurchasePricing[Invoice](i) BACKGROUND backgroundPurchaseRetail(i)
                  namePurchaseRetailPriceListType,
                  purchaseRetailMarkup ON CHANGE changePurchaseRetailMarkup(d), purchaseRetailMarkupSum, numberPurchaseRetailVAT,
                  valuePurchaseRetailVAT, purchaseRetailVATSum,
                  purchaseRetailPrice ON CHANGE changePurchaseRetailPrice(d),
                  purchaseRetailSum
    PROPERTIES(d) purchasePricingQuantity AFTER quantity(d) SHOWIF toShowPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)

//    HINTTABLE LIST purchaseRetailMarkupUserInvoiceDetail, valuePurchaseRetailVATUserInvoiceDetail, purchaseRetailPriceUserInvoiceDetail
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreateSalePricing  {
            caption = 'Расценка на закупке';
            MOVE PROPERTY(createPurchasePricing(i));
            MOVE PROPERTY(namePurchasePricingOperation(i));
            MOVE PROPERTY(namePurchasePricingCommittee(i));
            MOVE PROPERTY(nameCalcPurchaseRetailPriceListType(i));
            MOVE PROPERTY(nameCalcPurchaseRetailCalcPriceListType(i));
            MOVE PROPERTY(useSupplierStock(i));
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(i) BACKGROUND backgroundPurchaseRetail(i) READONLY BEFORE orders(i) purchaseRetailVATSumInvoiceDetail, purchaseRetailSumInvoiceDetail
    PROPERTIES (i)  printSalePurchasePricing
    PROPERTIES(d) READONLY BEFORE purchaseExpiryDate(d) SHOWIF createPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)
                  namePurchaseRetailPriceListType,
                  purchaseRetailMarkup, purchaseRetailMarkupSum, numberPurchaseRetailVAT,
                  valuePurchaseRetailVAT, purchaseRetailVATSum,
                  purchaseRetailPrice, purchaseRetailSum
    PROPERTIES(d) READONLY BACKGROUND backgroundPurchaseRetail(i) purchasePricingQuantity AFTER quantity(d)  SHOWIF toShowPurchasePricing(i)
;


DESIGN invoices {
    printTab {
        NEW printPricing {
            type = CONTAINERH;
            caption = 'Расценка (приход)';  
            MOVE PROPERTY(printSalePurchasePricing(i));                
        }
    }
}
// --- Заполнение атрибутов приходной накладной ---- //

createPricing(PurchaseInvoice invoice) += createPurchasePricing(invoice(invoice));
pricingCommittee(PurchaseInvoice invoice) += purchasePricingCommittee(invoice(invoice));

// Операция расценки закупка
pricingOperation(PurchaseInvoice invoice) += purchasePricingOperation(invoice(invoice));

// Вид цены
retailPriceListType(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailPriceListType(invoiceDetail(invoiceDetail));

// Кол-во
pricingQuantity(PurchaseInvoiceDetail invoiceDetail) += purchasePricingQuantity(invoiceDetail(invoiceDetail));

// Надбавка
retailMarkup(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailMarkup(invoiceDetail(invoiceDetail));

// НДС
retailVAT(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailVAT(invoiceDetail(invoiceDetail));
valueRetailVAT(PurchaseInvoiceDetail invoiceDetail) += valuePurchaseRetailVAT(invoiceDetail(invoiceDetail));

// Розничная цена
retailPrice(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailPrice(invoiceDetail(invoiceDetail));

// Суммы
retailMarkupSum(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailMarkupSum(invoiceDetail(invoiceDetail));
retailVATSum(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailVATSum(invoiceDetail(invoiceDetail));
retailSum(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailSum(invoiceDetail(invoiceDetail));
