MODULE PricingSalePurchase;

REQUIRE PricingPurchase, SalePurchaseInvoice, SalePurchaseInvoiceShipment, PriceListStore;

NAMESPACE Sale;

//----------------------------------------------------------------------------//

@defineDocumentInterfaceHeaderPricingCommittee(invoice, customerStock, purchase);

// Кол-во
@defineDocumentInterfaceDetailQuantityPrefix (invoice, purchasePricing, ' расценено (закупка)');

// Изменененно кол-во для расценки (пока нигде не используется)
extraPurchasePricingQuantityUserInvoiceDetail = ABSTRACT NUMERIC[14,3] (UserInvoiceDetail) PERSISTENT;
purchasePricingQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail) (+) extraPurchasePricingQuantityUserInvoiceDetail(detail)
    WHEN CHANGED(quantityUserInvoiceDetail(detail)) OR CHANGED(extraPurchasePricingQuantityUserInvoiceDetail(detail));

// Виды цен

@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentInterfaceHeaderPriceListType (invoice, priceListType, calcPurchaseRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, priceListType, calcPurchaseRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, priceListType, calcPurchaseRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (invoice, priceListType, purchaseRetail, ' (розничная)');

@defineDocumentInterfaceHeaderProperty (invoice, useSupplierStock, 'Использовать склад поставщика');


CONSTRAINT currencyUserInvoice(invoice) != currencyPriceListType(calcPurchaseRetailCalcPriceListTypeUserInvoice(invoice))
           CHECKED BY calcPurchaseRetailCalcPriceListTypeUserInvoice
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';
CONSTRAINT currencyUserInvoice(invoice) != currencyPriceListType(calcPurchaseRetailPriceListTypeUserInvoice(invoice))
           CHECKED BY calcPurchaseRetailPriceListTypeUserInvoice
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

CONSTRAINT currencyUserInvoiceDetail(detail) != currencyPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(detail))
           CHECKED BY purchaseRetailPriceListTypeUserInvoiceDetail
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

overRetailStockUserInvoiceDetail = ABSTRACT Stock (UserInvoiceDetail);
retailStockUserInvoiceDetail (d) = OVERRIDE 
    (IF useSupplierStockUserInvoice(userInvoiceUserInvoiceDetail(d)) THEN supplierStockUserInvoiceDetail(d) ELSE customerStockUserInvoiceDetail(d)), 
    overRetailStockUserInvoiceDetail(d);

WHEN SESSION // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcPurchaseRetailPriceListTypeUserInvoiceDetail(detail)) OR
    CHANGED(calcPurchaseRetailCalcPriceListTypeUserInvoiceDetail(detail)) OR
    CHANGED(skuUserInvoiceDetail(detail)) OR
    CHANGED(customerStockUserInvoiceDetail(detail)) OR
    CHANGED(dateTimeUserInvoiceDetail(detail))) AND pt == calcPurchaseRetailPriceListTypeUserInvoiceDetail(detail) NOINLINE (pt) DO
    purchaseRetailPriceListTypeUserInvoiceDetail(detail) <- IF (IF batchUserInvoiceDetail(detail) THEN
                                                                    prevPriceBPriceListTypeBatchStockDateTime(pt,
                                                                                               batchUserInvoiceDetail(detail),
                                                                                               retailStockUserInvoiceDetail(detail),
                                                                                               dateTimeUserInvoiceDetail(detail))
                                                                ELSE
                                                                    prevPriceBPriceListTypeSkuStockDateTime(pt,
                                                                                               skuUserInvoiceDetail(detail),
                                                                                               retailStockUserInvoiceDetail(detail),
                                                                                               dateTimeUserInvoiceDetail(detail)))
                                                            THEN pt
                                                            ELSE calcPurchaseRetailCalcPriceListTypeUserInvoiceDetail(detail);

// если не задана управленческая цена
WHEN SESSION // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcPurchaseRetailPriceListTypeUserInvoiceDetail(detail)) OR
    CHANGED(calcPurchaseRetailCalcPriceListTypeUserInvoiceDetail(detail)) OR
    CHANGED(skuUserInvoiceDetail(detail)) OR
    CHANGED(customerStockUserInvoiceDetail(detail)) OR
    CHANGED(dateTimeUserInvoiceDetail(detail))) 
    AND calcPurchaseRetailCalcPriceListTypeUserInvoiceDetail(detail) AND NOT calcPurchaseRetailPriceListTypeUserInvoiceDetail(detail) DO
    purchaseRetailPriceListTypeUserInvoiceDetail(detail) <- calcPurchaseRetailCalcPriceListTypeUserInvoiceDetail(detail);


// Базовая цена
overPurchasePricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
overPurchasePricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
overPurchasePricingPriceInvoiceDetail (detail) += overPurchasePricingPriceUserInvoiceDetail(detail);

purchasePricingPriceUserInvoiceDetail (detail) = OVERRIDE priceUserInvoiceDetail(detail), overPurchasePricingPriceUserInvoiceDetail(detail) PERSISTENT;
purchasePricingPriceInvoiceDetail (detail) = OVERRIDE priceInvoiceDetail(detail), overPurchasePricingPriceInvoiceDetail(detail) PERSISTENT;

@defineDocumentInterfaceDetailMarkupPrefix (invoice, purchaseRetail, ' (закупка)');

@defineDocumentInterfaceDetailVAT(invoice, countryCustomerStock, purchaseRetail, ' розничный (закупка)');
@deriveDocumentDetailVAT(userInvoice, purchaseRetail, date, sku, customerStock);
@deriveDocumentDetailValueVAT(userInvoice, purchaseRetail);

@defineDocumentInterfaceDetailPricePrefix(invoice, purchaseRetail, ' розничная (закупка)');

// Действия по измению цен и надбавок на форме
//purchaseRoundConditionUserInvoiceDetail(userInvoiceDetail) =
//    IF roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        THEN roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        ELSE roundConditionDepartmentStore(customerStockUserInvoiceDetail(userInvoiceDetail));

overPurchaseRoundConditionUserInvoiceDetail (d) = IF purchaseRetailPriceListTypeUserInvoiceDetail(d) IS CalcPriceListType 
    THEN roundConditionCalcPriceListTypeSku(purchaseRetailPriceListTypeUserInvoiceDetail(d), skuUserInvoiceDetail(d)) 
    ELSE roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(d));

purchaseRoundConditionUserInvoiceDetail(d) =  IF overPurchaseRoundConditionUserInvoiceDetail(d)
        THEN overPurchaseRoundConditionUserInvoiceDetail(d)              
        ELSE roundConditionDepartmentStore(customerStockUserInvoiceDetail(d));
        
        

@changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, purchaseRetail, purchasePricing, purchaseRetail, purchaseRetail);
@changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, purchaseRetail, purchasePricing, purchaseRetail, purchaseRetail, purchase);

// Проставление цены по виду цен
overLimitPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail);
@deriveDocumentDetailBatchOnSessionPriceListType(UserInvoiceDetail, purchaseRetail, purchasePricing, retailStock, userInvoice, );
// -- Суммы по строкам

@defineDocumentInterfaceDetailMarkupSumPrefix (invoice, purchaseRetail, ' (закупка)');
@defineDocumentInterfaceDetailVATDataSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');
@defineDocumentInterfaceDetailDataSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');

// Расчет сумм обратным счетом
@deriveDocumentDetailSumPrefix(userInvoice, purchaseRetail, currency, purchasePricingQuantity);
@deriveDocumentDetailReverseVATSumPrefix(userInvoice, purchaseRetail, purchaseRetail);
@deriveDocumentDetailMarkupSumPrefix(userInvoice, purchaseRetail, purchaseRetail, );

// -- Суммы по документу
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');

@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetailVAT, ' НДС розничная (закупка)');
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetailMarkup, ' надбавки (закупка)');

// Галочка по созданию акта расценки на закупке
@defineDocumentInterfaceProperty (invoice, createPurchasePricing, 'Создать акт расценки (закупка)');

// -- Операции
@defineOperationProperty(createPurchasePricing, 'Акт расценки (закупка)', purchaseContainer);
@deriveDocumentOperationProperty(UserInvoice, createPurchasePricing);

//// Вид цены для акта расценки (закупка)
//purchaseRetailPriceListTypeOperation = DATA PriceListType (Operation);
//namePurchaseRetailPriceListTypeOperation 'Вид цен акт расценки управленческий (закупка) ' (operation) = namePriceListType(purchaseRetailPriceListTypeOperation(operation));
//
//purchaseRetailCalcPriceListTypeOperation = DATA CalcPriceListType (Operation);
//namePurchaseRetailCalcPriceListTypeOperation 'Вид цен акт расценки надбавка (закупка)' (operation) = namePriceListType(purchaseRetailCalcPriceListTypeOperation(operation));
//
//EXTEND FORM operation
//    PROPERTIES(o) namePurchaseRetailPriceListTypeOperation, namePurchaseRetailCalcPriceListTypeOperation
//;
//
//DESIGN operation{
//    createContainer {
//        ADD PROPERTY(namePurchaseRetailPriceListTypeOperation);
//        ADD PROPERTY(namePurchaseRetailCalcPriceListTypeOperation);
//    }
//}
//
//calcPurchaseRetailPriceListTypeUserInvoice (invoice) <- purchaseRetailPriceListTypeOperation(operationUserInvoice(invoice))
//    WHEN CHANGED(operationUserInvoice(invoice));
//
//calcPurchaseRetailCalcPriceListTypeUserInvoice (invoice) <- purchaseRetailCalcPriceListTypeOperation(operationUserInvoice(invoice))
//    WHEN CHANGED(operationUserInvoice(invoice));

// Операция расценки
@defineDocumentInterfaceOperationPrefix (invoice, purchasePricing, Pricing, ' расценка (закупка)');

purchasePricingOperationOperation  = DATA Pricing.Operation (Operation);
namePurchasePricingOperationOperation 'Операция расценка (закупка)' (operation)= Pricing.nameOperation(purchasePricingOperationOperation(operation));

purchasePricingOperationUserInvoice (invoice) <- purchasePricingOperationOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));

// Записываем тип цены по умолчанию из операции

calcPurchaseRetailPriceListTypeUserInvoice (invoice) <- IF pricingPriceListTypeOperation(purchasePricingOperationUserInvoice(invoice)) 
    THEN pricingPriceListTypeOperation(purchasePricingOperationUserInvoice(invoice))
    ELSE retailPriceListTypeDepartmentStore(customerStockUserInvoice(invoice))
        WHEN CHANGED(purchasePricingOperationUserInvoice(invoice)) OR CHANGED(customerStockUserInvoice(invoice));
    
calcPurchaseRetailCalcPriceListTypeUserInvoice (invoice) <- IF pricingCalcPriceListTypeOperation(purchasePricingOperationUserInvoice(invoice))
    THEN pricingCalcPriceListTypeOperation(purchasePricingOperationUserInvoice(invoice))
    ELSE retailCalcPriceListTypeDepartmentStore(customerStockUserInvoice(invoice))
        WHEN CHANGED(purchasePricingOperationUserInvoice(invoice)) OR CHANGED(customerStockUserInvoice(invoice));
        
useSupplierStockUserInvoice (invoice) <- useSupplierStockOperation(purchasePricingOperationUserInvoice(invoice))   
        WHEN CHANGED(purchasePricingOperationUserInvoice(invoice));              

EXTEND FORM operation
    PROPERTIES(o) namePurchasePricingOperationOperation
;
DESIGN operation {
    purchaseContainer {
        MOVE PROPERTY(namePurchasePricingOperationOperation(o)) AFTER PROPERTY(createPurchasePricingOperation(o));
    }
}

showCreatePurchasePricingInvoice (invoice) = customerStockInvoice(invoice) IS DepartmentStore AND createPurchaseInvoiceInvoice(invoice) AND NOT costLedgerDepartmentStore(customerStockInvoice(invoice));
showPurchasePricingInvoice (invoice) = showCreatePurchasePricingInvoice (invoice) AND NOT createPurchasePricingInvoice(invoice);
toShowPurchasePricingInvoice (invoice) = showCreatePurchasePricingInvoice (invoice) AND createPurchasePricingInvoice(invoice);

backgroundPurchaseRetailInvoice 'Цвет' (invoice) = RGB(255, 255, 190) IF invoice IS Invoice;

printSalePurchasePricingInvoice 'Акт расценки (закупка)' (invoice) = ACTION Purchase.printPricingInvoice(SalePurchaseInvoice.purchaseInvoiceInvoice(invoice)) IMAGE 'print.png' IN print;

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF showCreatePurchasePricingInvoice(i) BACKGROUND backgroundPurchaseRetailInvoice(i) createPurchasePricingUserInvoice
    PROPERTIES(i) SHOWIF createPurchasePricingUserInvoice(i) BACKGROUND backgroundPurchaseRetailInvoice(i)
                  namePurchasePricingOperationUserInvoice, namePurchasePricingCommitteeUserInvoice,
                  nameCalcPurchaseRetailPriceListTypeUserInvoice, nameCalcPurchaseRetailCalcPriceListTypeUserInvoice,
                  useSupplierStockUserInvoice,
                  purchaseRetailSumUserInvoiceDetailUserInvoice BEFORE purchaseShipmentSumUserInvoiceDetailUserInvoice(i)

    PROPERTIES(d) BEFORE purchaseExpiryDateUserInvoiceDetail(d) SHOWIF createPurchasePricingInvoice(i) BACKGROUND backgroundPurchaseRetailInvoice(i)
                  namePurchaseRetailPriceListTypeUserInvoiceDetail,
                  purchaseRetailMarkupUserInvoiceDetail ON CHANGE changePurchaseRetailMarkupUserInvoiceDetail(d), purchaseRetailMarkupSumUserInvoiceDetail, numberPurchaseRetailVATUserInvoiceDetail,
                  valuePurchaseRetailVATUserInvoiceDetail, purchaseRetailVATSumUserInvoiceDetail,
                  purchaseRetailPriceUserInvoiceDetail ON CHANGE changePurchaseRetailPriceUserInvoiceDetail(d),
                  purchaseRetailSumUserInvoiceDetail
    PROPERTIES(d) purchasePricingQuantityUserInvoiceDetail AFTER quantityUserInvoiceDetail(d) SHOWIF toShowPurchasePricingInvoice(i) BACKGROUND backgroundPurchaseRetailInvoice(i)

//    HINTTABLE LIST purchaseRetailMarkupUserInvoiceDetail, valuePurchaseRetailVATUserInvoiceDetail, purchaseRetailPriceUserInvoiceDetail
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreateSalePricing  {
            caption = 'Расценка на закупке';
            MOVE PROPERTY(createPurchasePricingUserInvoice(i));
            MOVE PROPERTY(namePurchasePricingOperationUserInvoice(i));
            MOVE PROPERTY(namePurchasePricingCommitteeUserInvoice(i));
            MOVE PROPERTY(nameCalcPurchaseRetailPriceListTypeUserInvoice(i));
            MOVE PROPERTY(nameCalcPurchaseRetailCalcPriceListTypeUserInvoice(i));
            MOVE PROPERTY(useSupplierStockUserInvoice(i));
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(i) BACKGROUND backgroundPurchaseRetailInvoice(i) READONLY BEFORE ordersInvoice(i) purchaseRetailVATSumInvoiceDetailInvoice, purchaseRetailSumInvoiceDetailInvoice
    PROPERTIES (i) FORCE PANEL printSalePurchasePricingInvoice
    PROPERTIES(d) READONLY BEFORE purchaseExpiryDateInvoiceDetail(d) SHOWIF createPurchasePricingInvoice(i) BACKGROUND backgroundPurchaseRetailInvoice(i)
                  namePurchaseRetailPriceListTypeInvoiceDetail,
                  purchaseRetailMarkupInvoiceDetail, purchaseRetailMarkupSumInvoiceDetail, numberPurchaseRetailVATInvoiceDetail,
                  valuePurchaseRetailVATInvoiceDetail, purchaseRetailVATSumInvoiceDetail,
                  purchaseRetailPriceInvoiceDetail, purchaseRetailSumInvoiceDetail
    PROPERTIES(d) READONLY BACKGROUND backgroundPurchaseRetailInvoice(i) purchasePricingQuantityInvoiceDetail AFTER quantityInvoiceDetail(d)  SHOWIF toShowPurchasePricingInvoice(i)
;


DESIGN invoices {
    printTab {
        NEW printPricing {
            type = CONTAINERH;
            caption = 'Расценка (приход)';  
            MOVE PROPERTY(printSalePurchasePricingInvoice(i));                
        }
    }
}
// --- Заполнение атрибутов приходной накладной ---- //

Purchase.createPricingInvoice(invoice) += createPurchasePricingInvoice(invoicePurchaseInvoice(invoice));
Purchase.pricingCommitteeInvoice(invoice) += purchasePricingCommitteeInvoice(invoicePurchaseInvoice(invoice));

// Операция расценки закупка
Purchase.pricingOperationInvoice(invoice) += purchasePricingOperationInvoice(invoicePurchaseInvoice(invoice));

// Вид цены
Purchase.retailPriceListTypeInvoiceDetail(invoiceDetail) += purchaseRetailPriceListTypeInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

// Кол-во
Purchase.pricingQuantityInvoiceDetail(invoiceDetail) += purchasePricingQuantityInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

// Надбавка
Purchase.retailMarkupInvoiceDetail(invoiceDetail) += purchaseRetailMarkupInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

// НДС
Purchase.retailVATInvoiceDetail(invoiceDetail) += purchaseRetailVATInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.valueRetailVATInvoiceDetail(invoiceDetail) += valuePurchaseRetailVATInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

// Розничная цена
Purchase.retailPriceInvoiceDetail(invoiceDetail) += purchaseRetailPriceInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));

// Суммы
Purchase.retailMarkupSumInvoiceDetail(invoiceDetail) += purchaseRetailMarkupSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.retailVATSumInvoiceDetail(invoiceDetail) += purchaseRetailVATSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
Purchase.retailSumInvoiceDetail(invoiceDetail) += purchaseRetailSumInvoiceDetail(invoiceDetailPurchaseInvoiceDetail(invoiceDetail));
