MODULE Pricing;

REQUIRE EmployeeStock, PriceRoundStore, PricingOperation, PriceListCalc, PriceListLedger, StockTax, StockSkuDocument;

// ----------------------------------- Создавать акт расценки по умолчанию для отдела ------------------------------------------ //

costLedger 'Учет по себестоимости' = DATA BOOLEAN (DepartmentStore) IN bookkeeping;
EXTEND FORM departmentStore PROPERTIES(d) costLedger SHOWIF isCompany(d);
DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY(costLedger(d));
    }
}

// ----------------------------------- Комиссия ------------------------------------------ //

CLASS PricingCommittee 'Комиссия для акта расценки' : Committee;

name 'Наименование' = DATA VARISTRING[150](PricingCommittee);

name(PricingCommittee committee) += name(committee) IF committee IS PricingCommittee;


//@defineCommitteeEmployee(committee, chairman, 'Председатель');
@defineCommitteeEmployeePrefix(pricingCommittee, formedMan, 'Цены сформировал');
@defineCommitteeEmployeePrefix(pricingCommittee, checkedMan, 'Реестр проверил');
@defineCommitteeEmployeePrefix(pricingCommittee, labeledMan, 'Товар промаркировал');
@defineCommitteeEmployeePrefix(pricingCommittee, accountantMan, 'Бухгалтер');
@defineCommitteeEmployeePrefix(pricingCommittee, headMan, 'Зав. магазином');

// ----------------------------------- Комиссия по умолчанию для отдела ------------------------------------------ //

pricingCommittee 'Комиссия для акта расценки (ИД)' = DATA PricingCommittee (DepartmentStore);
namePricingCommittee 'Комиссия для акта расценки' (DepartmentStore departmentStore) = name(pricingCommittee(departmentStore)) IN committee MINCHARWIDTH 20 PREFCHARWIDTH 30;
isDefault 'По умолчанию' (PricingCommittee pricingCommittee, DepartmentStore departmentStore) = pricingCommittee(departmentStore) == pricingCommittee;
CONSTRAINT pricingCommittee(DepartmentStore departmentStore) AND NOT in(pricingCommittee(departmentStore), departmentStore)
    CHECKED BY pricingCommittee[DepartmentStore] MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

EXTEND FORM departmentStore PROPERTIES namePricingCommittee(d);

DESIGN departmentStore {
    headerExtraParams{
        MOVE PROPERTY(namePricingCommittee(d));
    }
}

// ----------------------------------- Формы для комиссий для реестра цен ------------------------------------------ //

FORM pricingCommittee 'Комиссия для акта расценки'
    OBJECTS c=PricingCommittee FIXED PANEL
    PROPERTIES(c)      name, nameFormedMan, nameCheckedMan,
                       nameLabeledMan, nameAccountantMan, nameHeadMan

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s=Store
    PROPERTIES         READONLY OBJVALUE(a), name(t), name(st), name(s)
    FILTERS            stringEqualsAll(a), in (t, st), in(st, s)

    OBJECTS dep=DepartmentStore
    PROPERTIES(dep)    READONLY depName = name, id SHOWIF showIDs()
    PROPERTIES(c, dep) in, isDefault
    FILTERS            in(t, st, s, dep)
    ORDER BY depName

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' in(c, dep) 'F9'

    EDIT PricingCommittee OBJECT c
;
@extendFormFilterStockAccess(dep, pricingCommittee);
@extendFormFilterStockGroupAccess(t, pricingCommittee);
@extendFormFilterStockGroupAccess(st, pricingCommittee);
@extendFormFilterStockGroupAccess(s, pricingCommittee);

DESIGN pricingCommittee {
    main {
        preferredSize = (1024, 768);

        NEW stocks AFTER c.box {
            fill = 1;
            type = SPLITH;

            MOVE treeStore.tree.box;
            MOVE dep.box {
                fill = 3;
            }
        }

        NEW managers AFTER stocks {
            caption = 'Состав комиссии';
            type = COLUMNS;
            columns = 3;
            MOVE PROPERTY (nameFormedMan(c));
            MOVE PROPERTY (nameCheckedMan(c));
            MOVE PROPERTY (nameLabeledMan(c));
            MOVE PROPERTY (nameAccountantMan(c));
            MOVE PROPERTY (nameHeadMan(c));
        }
    }
}

FORM pricingCommitteeDialog 'Комиссии для акта расценки'
    OBJECTS r=PricingCommittee
    PROPERTIES(r)      READONLY name, nameStocks, nameFormedMan, nameCheckedMan, nameLabeledMan,
                       nameAccountantMan, nameHeadMan
    PROPERTIES(r)      ADDFORM, EDITFORM

    DIALOG PricingCommittee OBJECT r
;

// ----------------------------------- Макрос для задания комиссии для документов ------------------------------------------ //

GROUP pricingCommittee 'Комиссия' : public;

META defineDocumentHeaderPricingCommittee(object, stockClass, prefix)
    prefix###pricingCommittee (object) = DATA PricingCommittee(###object);

    name###prefix##PricingCommittee 'Комиссия' (###object object) = name(prefix###pricingCommittee(object)) IN documentPrm MINCHARWIDTH 10 PREFCHARWIDTH 15;
    prefix###pricingCommittee (###object object) <- pricingCommittee(stockClass(object))
        WHEN CHANGED(stockClass(object));

    CONSTRAINT prefix###pricingCommittee (###object object) AND NOT in(prefix###pricingCommittee(object), stockClass(object))
        CHECKED BY prefix###pricingCommittee[###object] MESSAGE 'Для документа выбрана комиссия, которая не действует для склада документа';
        
    data###prefix##FormedMan 'Цены сформировал' (object) = DATA Employee (###object);
    data###prefix##CheckedMan 'Реестр проверил' (object) = DATA Employee (###object);
    data###prefix##LabeledMan 'Товар промаркировал' (object) = DATA Employee (###object);
    data###prefix##AccountantMan 'Бухгалтер' (object) = DATA Employee (###object);
    data###prefix##HeadMan 'Зав. магазином' (object) = DATA Employee (###object);    
          
    CONSTRAINT data###prefix##FormedMan(###object object) AND NOT in(stockClass(object), data###prefix##FormedMan(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix##FormedMan[###object] MESSAGE 'В качестве "Цены сформировал" выбран сотрудник, который не является сотрудником склада документа.';                  
    CONSTRAINT data###prefix##CheckedMan(###object object) AND NOT in(stockClass(object), data###prefix##CheckedMan(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix##CheckedMan[###object] MESSAGE 'В качестве "Реестр проверил" выбран сотрудник, который не является сотрудником склада документа.';                        
    CONSTRAINT data###prefix##LabeledMan(###object object) AND NOT in(stockClass(object), data###prefix##LabeledMan(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix##LabeledMan[###object] MESSAGE 'В качестве "Товар промаркировал" выбран сотрудник, который не является сотрудником склада документа.';                         
    CONSTRAINT data###prefix##AccountantMan(###object object) AND NOT in(stockClass(object), data###prefix##AccountantMan(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix##AccountantMan[###object] MESSAGE 'В качестве "Бухгалтер" выбран сотрудник, который не является сотрудником склада документа.';                         
    CONSTRAINT data###prefix##HeadMan(###object object) AND NOT in(stockClass(object), data###prefix##HeadMan(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix##HeadMan[###object] MESSAGE 'В качестве "Зав. магазином" выбран сотрудник, который не является сотрудником склада документа.'; 
    
    prefix###formedMan 'Цены сформировал' (###object object) = OVERRIDE formedMan(prefix###pricingCommittee(object)), data###prefix##FormedMan(object);
    prefix###checkedMan 'Реестр проверил' (###object object) = OVERRIDE checkedMan(prefix###pricingCommittee(object)), data###prefix##CheckedMan(object);
    prefix###labeledMan 'Товар промаркировал' (###object object) = OVERRIDE labeledMan(prefix###pricingCommittee(object)), data###prefix##LabeledMan(object);
    prefix###accountantMan 'Бухгалтер' (###object object) = OVERRIDE accountantMan(prefix###pricingCommittee(object)), data###prefix##AccountantMan(object);
    prefix###headMan 'Зав. магазином' (###object object) = OVERRIDE headMan(prefix###pricingCommittee(object)), data###prefix##HeadMan(object);
    
    name###prefix##FormedMan 'Сформировал' (###object object) = name[Contact](prefix###formedMan(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix##CheckedMan 'Проверил' (###object object) = name[Contact](prefix###checkedMan(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix##LabeledMan 'Промаркировал' (###object object) = name[Contact](prefix###labeledMan(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix##AccountantMan 'Бухгалтер' (###object object) = name[Contact](prefix###accountantMan(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix##HeadMan 'Зав.маг.' (###object object) = name[Contact](prefix###headMan(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;    
       
    positionName###prefix##FormedMan 'Цены сформировал' (###object object) = positionName(prefix###formedMan(object)) IN pricingCommittee;
    positionName###prefix##CheckedMan 'Реестр проверил' (###object object) = positionName(prefix###checkedMan(object)) IN pricingCommittee;
    positionName###prefix##LabeledMan 'Товар промаркировал' (###object object) = positionName(prefix###labeledMan(object)) IN pricingCommittee;
    positionName###prefix##AccountantMan 'Бухгалтер' (###object object) = positionName(prefix###accountantMan(object)) IN pricingCommittee;
    positionName###prefix##HeadMan 'Зав. магазином' (###object object) = positionName(prefix###headMan(object)) IN pricingCommittee;        

    positionShortName###prefix##FormedMan 'Цены сформировал' (###object object) = positionShortName(prefix###formedMan(object)) IN pricingCommittee;
    positionShortName###prefix##CheckedMan 'Реестр проверил' (###object object) = positionShortName(prefix###checkedMan(object)) IN pricingCommittee;
    positionShortName###prefix##LabeledMan 'Товар промаркировал' (###object object) = positionShortName(prefix###labeledMan(object)) IN pricingCommittee;
    positionShortName###prefix##AccountantMan 'Бухгалтер' (###object object) = positionShortName(prefix###accountantMan(object)) IN pricingCommittee;
    positionShortName###prefix##HeadMan 'Зав. магазином' (###object object) = positionShortName(prefix###headMan(object)) IN pricingCommittee;   
END
META defineDocumentHeaderAbstractPricingCommittee(object, stockClass, prefix)
    prefix###pricingCommittee (object) = ABSTRACT PricingCommittee(###object) PERSISTENT;

    name###prefix##PricingCommittee 'Комиссия для акта расценки' (###object object) = name(prefix###pricingCommittee(object)) IN documentPrm MINCHARWIDTH 10 PREFCHARWIDTH 15;

    data###prefix##FormedMan 'Цены сформировал' (object) = ABSTRACT Employee (###object);
    data###prefix##CheckedMan 'Реестр проверил' (object) = ABSTRACT Employee (###object);
    data###prefix##LabeledMan 'Товар промаркировал' (object) = ABSTRACT Employee (###object);
    data###prefix##AccountantMan 'Бухгалтер' (object) = ABSTRACT Employee (###object);
    data###prefix##HeadMan 'Зав. магазином' (object) = ABSTRACT Employee (###object);    

    prefix###formedMan 'Цены сформировал' (###object object) = OVERRIDE formedMan(prefix###pricingCommittee(object)), data###prefix##FormedMan(object);
    prefix###checkedMan 'Реестр проверил' (###object object) = OVERRIDE checkedMan(prefix###pricingCommittee(object)), data###prefix##CheckedMan(object);
    prefix###labeledMan 'Товар промаркировал' (###object object) = OVERRIDE labeledMan(prefix###pricingCommittee(object)), data###prefix##LabeledMan(object);
    prefix###accountantMan 'Бухгалтер' (###object object) = OVERRIDE accountantMan(prefix###pricingCommittee(object)), data###prefix##AccountantMan(object);
    prefix###headMan 'Зав. магазином' (###object object) = OVERRIDE headMan(prefix###pricingCommittee(object)), data###prefix##HeadMan(object);
    
    name###prefix##FormedMan 'Цены сформировал' (###object object) = name[Contact](prefix###formedMan(object)) IN pricingCommittee;
    name###prefix##CheckedMan 'Реестр проверил' (###object object) = name[Contact](prefix###checkedMan(object)) IN pricingCommittee;
    name###prefix##LabeledMan 'Товар промаркировал' (###object object) = name[Contact](prefix###labeledMan(object)) IN pricingCommittee;
    name###prefix##AccountantMan 'Бухгалтер' (###object object) = name[Contact](prefix###accountantMan(object)) IN pricingCommittee;
    name###prefix##HeadMan 'Зав. магазином' (###object object) = name[Contact](prefix###headMan(object)) IN pricingCommittee;    
       
    positionName###prefix##FormedMan 'Цены сформировал' (###object object) = positionName(prefix###formedMan(object)) IN pricingCommittee;
    positionName###prefix##CheckedMan 'Реестр проверил' (###object object) = positionName(prefix###checkedMan(object)) IN pricingCommittee;
    positionName###prefix##LabeledMan 'Товар промаркировал' (###object object) = positionName(prefix###labeledMan(object)) IN pricingCommittee;
    positionName###prefix##AccountantMan 'Бухгалтер' (###object object) = positionName(prefix###accountantMan(object)) IN pricingCommittee;
    positionName###prefix##HeadMan 'Зав. магазином' (###object object) = positionName(prefix###headMan(object)) IN pricingCommittee;        

    positionShortName###prefix##FormedMan 'Цены сформировал' (###object object) = positionShortName(prefix###formedMan(object)) IN pricingCommittee;
    positionShortName###prefix##CheckedMan 'Реестр проверил' (###object object) = positionShortName(prefix###checkedMan(object)) IN pricingCommittee;
    positionShortName###prefix##LabeledMan 'Товар промаркировал' (###object object) = positionShortName(prefix###labeledMan(object)) IN pricingCommittee;
    positionShortName###prefix##AccountantMan 'Бухгалтер' (###object object) = positionShortName(prefix###accountantMan(object)) IN pricingCommittee;
    positionShortName###prefix##HeadMan 'Зав. магазином' (###object object) = positionShortName(prefix###headMan(object)) IN pricingCommittee; 
END

META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass, prefix)
    @defineDocumentHeaderAbstractPricingCommittee (object, stockClass, prefix);
    @defineDocumentHeaderPricingCommittee (user###object, stockClass, prefix);
    prefix###pricingCommittee (User###object object) += prefix###pricingCommittee(object);
    
    data###prefix##FormedMan (User###object object) += data###prefix##FormedMan(object);
    data###prefix##CheckedMan (User###object object) += data###prefix##CheckedMan(object);
    data###prefix##LabeledMan(User###object object) += data###prefix##LabeledMan(object);
    data###prefix##AccountantMan (User###object object) += data###prefix##AccountantMan(object);
    data###prefix##HeadMan (User###object object) += data###prefix##HeadMan(object);
    
END
META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass)
    @defineDocumentInterfaceHeaderPricingCommittee (object, stockClass, );
END

//------------------------  derive or change ------------------------------------//

pricingBase 'Считать розничную цену от базовой в расценке' = DATA BOOLEAN (CalcPriceListType);
pricingDocument = CalcPriceListType p IS CalcPriceListType AND NOT pricingBase(p) PERSISTENT;

EXTEND FORM calcPriceListType
    PROPERTIES(c) pricingBase
;

META deriveDocumentDetailBatchOnSessionPriceListType (idetail, prefix, prefixP, stockProp, form, prefixTime)

    WHEN SESSION 
        (CHANGED(prefix##PriceListType(###idetail detail)) OR
         CHANGED(prefixP##Price(detail)) OR
         CHANGED(sku(detail)) OR
         CHANGED(stockProp(detail)) OR
        (CHANGED(prefixTime###dateTime(detail)) AND NOT isPosted(detail)) OR
         CHANGED(value###prefix##VAT(detail)))
        AND sku(detail) AND CalcPriceListType priceListType == prefix##PriceListType(detail) AND RoundCondition roundCondition == roundCondition(priceListType, sku(detail))
        AND NOT CHANGED(prefix##Price(detail))
        AND pricingDocument(priceListType) NOINLINE (priceListType, roundCondition) INLINE DO {
            prefix##Markup(detail) <- markup(priceListType, sku(detail))
                                                         WHERE prefix##PriceListType(detail) == priceListType;
            prefix##Price(detail) <- round([= X*(Y+100)*(Z+100)/10000](
                                                                    prefixP##Price(detail),
                                                                    prefix##Markup(detail),
                                                                    value###prefix##VAT(detail)), roundCondition)
                                                         WHERE prefix##PriceListType(detail) == priceListType;
        }
        
    WHEN SESSION
        (CHANGED(prefix##PriceListType(###idetail detail)) OR
         CHANGED(prefixP##Price(detail)) OR
         CHANGED(sku(detail)) OR
         CHANGED(stockProp(detail)) OR
        (CHANGED(prefixTime###dateTime(detail)) AND NOT isPosted(detail)) OR
         CHANGED(batch(detail)) OR
         CHANGED(value###prefix##VAT(detail)))
        AND NOT CHANGED(prefix##Price(detail))
        AND sku(detail) AND PriceListType priceListType == prefix##PriceListType(detail) AND NOT pricingDocument(priceListType) NOINLINE (priceListType) INLINE DO {

            prefix##Price(detail) <- IF batch(detail) THEN prevPriceB(priceListType, batch(detail), stockProp(detail), prefixTime###dateTime(detail))
                                                      ELSE prevPriceB(priceListType, sku(detail), stockProp(detail), prefixTime###dateTime(detail))
                                                         WHERE prefix##PriceListType(detail) == priceListType;
                                                         
            prefix##Markup(detail) <- [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                               prefix##Price(detail),
                                                               prefixP##Price(detail) IF prefixP##Price(detail)!= 0.0,
                                                               value###prefix##VAT(detail))
                                                         WHERE prefix##PriceListType(detail) == priceListType;
        }

    WHEN SESSION
        (CHANGED(prefixP##Price(###idetail detail)) OR
         CHANGED(value###prefix##VAT(detail)))
        AND NOT prefix##PriceListType(detail) INLINE DO {

            prefix##Markup(detail) <- [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                               prefix##Price(detail),
                                                               prefixP##Price(detail) IF prefixP##Price(detail)!= 0.0,
                                                               value###prefix##VAT(detail));
        }
END

META recalculateDocumentDetailBatchOnSessionPriceListType (idetail, prefix, prefixP, stockProp, form, prefixTime, cap, concrete)
    recalculate###prefix##Price 'Пересчитать розн. цену'###cap () = ACTION {
        FOR sku(###idetail detail)  AND CalcPriceListType priceListType == prefix##PriceListType(detail) 
            AND RoundCondition roundCondition == roundCondition(priceListType, sku(detail))    
            AND pricingDocument(priceListType) AND [= FILTER form.concrete](detail) NOINLINE (priceListType, roundCondition) INLINE DO {
            
            prefix##Markup(detail) <- markup(priceListType, sku(detail))
                                                         WHERE prefix##PriceListType(detail) == priceListType;
            prefix##Price(detail) <- round([= X*(Y+100)*(Z+100)/10000](
                                                                    prefixP##Price(detail),
                                                                    prefix##Markup(detail),
                                                                    value###prefix##VAT(detail)), roundCondition)
                                                         WHERE prefix##PriceListType(detail) == priceListType;
        } 
           
        FOR sku(###idetail detail) AND PriceListType priceListType == prefix##PriceListType(detail) 
            AND NOT pricingDocument(priceListType) AND [= FILTER form.concrete](detail) NOINLINE (priceListType) INLINE DO {
    
            prefix##Price(detail) <- IF batch(detail) THEN prevPriceB(priceListType, batch(detail), stockProp(detail), prefixTime###dateTime(detail))
                                                    ELSE prevPriceB(priceListType, sku(detail), stockProp(detail), prefixTime###dateTime(detail))
                                                         WHERE prefix##PriceListType(detail) == priceListType;
                                                         
            prefix##Markup(detail) <- [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                               prefix##Price(detail),
                                                               prefixP##Price(detail) IF prefixP##Price(detail)!= 0.0,
                                                               value###prefix##VAT(detail))
                                                         WHERE prefix##PriceListType(detail) == priceListType;
        }             
    } SHORTCUT prefix##Price[###idetail];
END 

META changeDocumentDetailMarkupCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    calc###prefixD##Markup(###detail detail)  = [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
        prefixA##Price(detail),
        prefixB###price(detail) IF prefixB###price(detail) != 0.0,
        value###prefixD##VAT(detail));

    change###prefixA##Price(###detail detail) = ACTION {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            prefixA##Price(detail) <- requestedNumeric();
            prefixD###markup(detail) <- calc###prefixD##Markup(detail) WHERE calc###prefixD##Markup(detail);
        } ELSE {
            prefixA##Price(detail) <- NULL;
        }
    }
END

META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixCondition)

    calc###prefixA##Price(###detail detail)  = round(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
        prefixB###price(detail),
        prefixD###markup(detail),
        value###prefixD##VAT(detail))), prefixCondition###roundCondition(detail));

    change###prefixD##Markup(###detail detail) = ACTION {
        REQUEST NUMERIC[8,3] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixD###markup(detail) <- requestedNumeric();
            ASSIGN prefixA##Price(detail) <- calc###prefixA##Price(detail) WHERE calc###prefixA##Price(detail);
        } ELSE {
            ASSIGN prefixD###markup(detail) <- NULL;
        }
    }
END
META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    @changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, );
END

//-- С учетом предельных надбавок

META changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixCondition)
    calc###prefixA###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
        prefixB###price###detail(detail),
        prefixC###markup###detail(detail),
        value###prefixD###VAT###detail(detail))), prefixCondition###roundCondition###detail(detail));

    calcMin###prefixA###price###detail(detail)  = MIN calc###prefixA###price###detail(detail),
                                                      overLimitPrice###detail(detail);

    change###prefixC###markup###detail = ACTION (detail) {
        REQUEST NUMERIC[8,3] INPUT;

        IF requestedNumeric() THEN {
            SET prefixC###markup###detail(detail) <- requestedNumeric();
            SET prefixA###price###detail(detail) <- calc###prefixA###price###detail(detail) WHERE calcMin###prefixA###price###detail(detail);
        } ELSE {
            SET prefixC###markup###detail(detail) <- NULL;
        }
    }
END
META changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    @changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, );
END

//-- Для общего случая
META changeDocumentDetailMarkupPrefixInner(detail, prefixA, prefixB, prefixC, prefixD, prefixE, prefixF)
    calc###prefixB###markup###detail(detail)  = [= round2(((X/Z*100/(100+Y))-1)*100)](
        prefixC###price###detail(detail),
        prefixD###price###detail(detail) IF prefixD###price###detail(detail) != 0.0,
        value###prefixE###VAT###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixA###price###detail(detail) <- requestedNumeric();
            ASSIGN prefixF###markup###detail(detail) <- calc###prefixB###markup###detail(detail) WHERE calc###prefixB###markup###detail(detail);
        } ELSE {
            ASSIGN prefixA###price###detail(detail) <- NULL;
        }
    }
END
//--

META changeDocumentDetailPricePrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixE, prefixF)

    calc###prefixB##Price(###detail detail)  = round(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
        prefixD##Price(detail),
        prefixE###markup(detail),
        value###prefixE##VAT(detail))), roundCondition(detail));

    change###prefixA##Price(###detail detail) = ACTION {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            prefixA##Price(detail) <- requestedNumeric();
            prefixF##Price(detail) <- calc###prefixB##Price(detail) WHERE calc###prefixB##Price(detail);
        } ELSE {
            prefixA##Price(detail) <- NULL;
        }
    }
END

//----------------------------------------------- Расценка ---------------------------------------------------//

CLASS ABSTRACT Pricing 'Акт расценки';
CLASS ABSTRACT PricingDetail 'Строка акта расценки';

CLASS UserPricing 'Акт расценки (польз.)' : Pricing;
CLASS UserPricingDetail 'Строка акта расценки (польз.)' : PricingDetail;

@defineDocumentInterface(pricing);
@deriveDocumentHeaderTimePrefix(UserPricing, );

@defineDocumentInterfaceNumber(pricing);
@defineNumeratedDefault(UserPricing, 'Расценки', 'РС');

@defineDocumentInterfaceDataStock(pricing, departmentStore, 'Склад');
@defineDocumentDialogStocks(userPricing, departmentStore, company, , );
@defineDocumentInterfacePosted(pricing);
@defineDocumentInterfaceClosed(pricing);
@defineDocumentClosedConstraint(UserPricing);

@defineDocumentInterfaceDescription(pricing, 'Акт расценки');

// Валюта
@defineDocumentInterfaceCurrency(pricing);
@deriveDocumentCurrency(userPricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(pricing, sku);

// Виды цен

@defineDocumentInterfaceHeaderPriceListType (pricing, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (pricing, pricingDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userPricing, userPricingDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentInterfaceHeaderPriceListType (pricing, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (pricing, pricingDetail, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userPricing, userPricingDetail, priceListType, calcRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (pricing, priceListType, retail, );

CONSTRAINT currency(UserPricing pricing) != currency[PriceListType](calcRetailCalcPriceListType(pricing))
           CHECKED BY calcRetailCalcPriceListType[UserPricing]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';
CONSTRAINT currency(UserPricing pricing) != currency(calcRetailPriceListType(pricing))
           CHECKED BY calcRetailPriceListType[UserPricing]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

CONSTRAINT currency(UserPricingDetail detail) != currency(retailPriceListType(detail))
           CHECKED BY retailPriceListType[UserPricingDetail]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';


// Округление
//roundConditionUserPricingDetail(userPricingDetail) =
//    IF roundConditionPriceListType(retailPriceListTypeUserPricingDetail(userPricingDetail))
//        THEN roundConditionPriceListType(retailPriceListTypeUserPricingDetail(userPricingDetail))
//        ELSE roundConditionDepartmentStore(departmentStoreUserPricingDetail(userPricingDetail));

overRoundCondition (UserPricingDetail d) = IF retailPriceListType(d) IS CalcPriceListType 
    THEN roundCondition(retailPriceListType(d), sku(d)) 
    ELSE roundCondition(retailPriceListType(d));

roundCondition(UserPricingDetail d) =  IF overRoundCondition(d)
        THEN overRoundCondition(d)              
        ELSE roundCondition(departmentStore(d));
                       

// Поставщик
@defineDocumentInterfaceLegalEntity (pricing, supplier, 'Поставщик');
CONSTRAINT supplier(UserPricing userPricing) AND NOT isSeller(supplier(userPricing))
    CHECKED BY supplier[UserPricing] MESSAGE 'Для акта расценки выбрано в качестве поставщика организация, не являющаяся поставщиком или компанией';

// Комиссия
@defineDocumentInterfaceHeaderPricingCommittee (pricing, departmentStore);

// Кол-во
@defineDocumentInterfaceDetailQuantity(pricing);

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(pricing, , ' поставщика');

overPrice(pricingDetail) = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;

// Цена базовая (от которой будет считаться надбавка)
overPricingPrice = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;
overPricingPrice = ABSTRACT NUMERIC[14,2] (UserPricingDetail) PERSISTENT;
overPricingPrice (UserPricingDetail detail) += overPricingPrice(detail);

over1PricingPrice = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;

pricingPrice (UserPricingDetail detail) = OVERRIDE price(detail), overPricingPrice(detail) PERSISTENT;
pricingPrice (PricingDetail detail) = OVERRIDE price(detail), overPricingPrice(detail), over1PricingPrice(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (pricing, retail, );

// НДС
@defineDocumentInterfaceDetailVAT(pricing, countryDepartmentStore, retail, );
@deriveDocumentDetailVAT(userPricing, retail);
@deriveDocumentDetailValueVAT(userPricing, retail);
extraRetailVATSum(pricingDetail) = ABSTRACT NUMERIC[16,2] (PricingDetail);

// Цена розничная
extraRetailPrice(pricingDetail) = ABSTRACT NUMERIC[14,2] (PricingDetail);
extraRetailSum(pricingDetail) = ABSTRACT NUMERIC[16,2] (PricingDetail);

@defineDocumentInterfaceDetailPricePrefix(pricing, retail, ' розничная');

disallowLinePricings 'Запретить строки без розничной цены в актах расценки' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() disallowLinePricings
;

DESIGN options {
    pane {        
        NEW pricings {
            caption = 'Акты расценки';
            MOVE PROPERTY(disallowLinePricings());   
        }
    }
}

CONSTRAINT isPosted(PricingDetail d) AND disallowLinePricings() AND NOT retailPrice(d) 
    MESSAGE 'Для строки акта расценки должна быть задана розничная цена'; 

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
overLimitPrice = ABSTRACT NUMERIC[14,2] (UserPricingDetail);
@changeDocumentDetailMarkupCustomPrefix(userPricingDetail, retail, pricing, retail, retail);
@changeDocumentDetailPriceCustomPrefix(userPricingDetail, retail, pricing, retail, retail);

// -- Суммы по строкам

@defineDocumentInterfaceDetailDataSumPrefix (pricing, , ' поставщика');
@defineDocumentInterfaceDetailMarkupSumPrefix (pricing, retail);
@defineDocumentInterfaceDetailVATDataSumPrefix (pricing, retail, ' розничная');
@defineDocumentInterfaceDetailDataSumPrefix (pricing, retail, ' розничная');

// Расчет сумм обратным счетом
@deriveDocumentDetailSumPrefix(userPricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userPricing, retail, retail);
@deriveDocumentDetailMarkupSumPrefix(userPricing, retail, retail, );
@deriveDocumentDetailSum(userPricing, quantity);

// -- Суммы по акту

@defineDocumentInterfaceHeaderQuantity(pricing);

@defineDocumentHeaderSkuQuantity(pricing, sku);
@defineDocumentHeaderSkuQuantity(userPricing, sku);

@defineDocumentInterfaceHeaderSumCustom (pricing, pricingDetail, ' поставщика');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailVAT, ' НДС');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retail, ' розничная');

@defineDocumentInterfaceHeaderItemSum (pricing, retailMarkup, retailMarkup);  //-- сумма торговой надбавки (с разбивкой по таре, товару...)
@defineDocumentInterfaceHeaderItemSum (pricing, retailVAT, retailVAT);        //-- сумма розничного НДС (с разбивкой по таре, товару...)
@defineDocumentInterfaceHeaderItemSumDouble (pricing, range, retailVAT, retailVAT, , retailVAT); //-- сумма НДС розничного (с разбивкой по таре, товару...) по документу и по шкале
@defineDocumentInterfaceHeaderItemSum (pricing, , );                          //-- сумма поставщика (с разбивкой по таре, товару...)

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userPricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userPricing, sku);

// Не изменить текущие цены
@defineDocumentInterfaceHeaderSkip(Pricing, changeLedger, 'Не изменять текущие цены');
skipChangeLedger 'Не изменять текущие цены' = ABSTRACT BOOLEAN(PricingDetail);

skipChangeLedger 'Не изменять текущие цены' (UserPricingDetail d) = skipChangeLedger(userPricing(d)) IN documentPrm;
skipChangeLedger (UserPricingDetail o) += skipChangeLedger(o);

//@defineDocumentInterfaceHeaderSkip(PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    @defineDocumentAbstractHeaderSkip (PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerPricingDetail 'Не изменять текущие цены' = ABSTRACT BOOLEAN(PricingDetail);
//};
//    @defineDocumentHeaderSkip (UserPricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerUserPricingDetail 'Не изменять текущие цены' = DATA BOOLEAN(UserPricingDetail) IN documentPrm;
//};
//    skipChangeLedgerPricingDetail (o) += skipChangeLedgerUserPricingDetail(o);
//};

//@defineDocumentInterfaceDetailSkip(pricing, changeLedger, 'Не изменять текущие цены'){
//    @defineDocumentInterfaceDetailSkip(pricing, PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    @defineDocumentDetailSkip(pricing, PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerPricingDetail 'Не изменять текущие цены' (d) = skipChangeLedgerPricing(pricingPricingDetail(d));
//};
//    @defineDocumentDetailSkip(userPricing, UserPricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerUserPricingDetail 'Не изменять текущие цены' (d) = skipChangeLedgerUserPricing(userPricingUserPricingDetail(d));
//};
//};
//};

// Основание
descriptionDocument 'Документы-основания' = ABSTRACT VARSTRING[255] (Pricing) PERSISTENT;
extraDescription 'Доп. наименование'  = ABSTRACT VARSTRING[255] (PricingDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

// Возвраты
isReturn 'Обратный' = ABSTRACT BOOLEAN (Pricing);

//-- Партии
@showDocumentInterfaceDetailBatch(pricing);
@defineDocumentInterfaceDetailBatch(pricing, batch);

changeBatch(UserPricingDetail detail) = ACTION {
    FORM dialogBatchStockOut OBJECTS st = departmentStore(detail),
                             t = dateTime(detail),
                             sk = sku(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batch(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batch(detail) <- NULL;
    }

};

@defineBalancesBatch(pricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userPricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineMovementPriceSku(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

@defineBarcodeSku(pricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //

isInvoice 'По накладной' = ABSTRACT BOOLEAN (Pricing);

FORM pricing 'Акт расценки (печать)'
    OBJECTS p=Pricing FIXED PANEL
    PROPERTIES (p) SELECTOR isPosted

    PROPERTIES (p) nameDepartmentStore, fullNameLegalEntityStock,nameLegalEntityStock, number, seriesNumber, series, date, time,
                   nameSupplier, fullNameSupplier, nameCurrency, note,
                   countPricingDetail, quantityPricingDetail, sumPricingDetail,
                   retailMarkupSumPricingDetail, retailVATSumPricingDetail,
                   retailSumPricingDetail, namePricingCommittee,
                   nameFormedMan, nameCheckedMan, nameLabeledMan, nameAccountantMan,
                   nameHeadMan, isInvoice    //notPassToBookkeepingListRegister

    OBJECTS d=PricingDetail

    PROPERTIES (d) index, idBarcodeSku, nameSku, extraDescription, shortNameUOMSku,
                   quantity, overPricingPrice, pricingPrice, price, sum,
                   retailMarkup, retailMarkupSum, numberRetailVAT, valueRetailVAT, retailVATSum,
                   retailPrice, retailSum
    ORDER BY index(d)                   

    FILTERS pricing(d) == p
;

print 'Акт расценки' (Pricing pricing) = ACTION FORM pricing OBJECTS p = pricing PRINT  IMAGE 'print.png' IN print;

// --------------------------- Формы --------------------------------- //
edit 'Редактировать' = ACTION ABSTRACT LIST (Pricing) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

backgroundRetail 'Цвет' (Pricing pricing) = RGB(224, 255, 255) IF pricing IS Pricing;
FORM userPricing 'Акт расценки'
    OBJECTS p = UserPricing FIXED PANEL
    PROPERTIES (p) isPosted, nameDepartmentStore ON CHANGE changeDepartmentStoreCompany(p), nameNumerator, number, series, date, time,
                   nameSupplier, nameCurrency, note, nameCalcRetailPriceListType, nameCalcRetailCalcPriceListType,
                   countUserPricingDetail, quantityUserPricingDetail, sumUserPricingDetail,
                   retailSumUserPricingDetail BACKGROUND backgroundRetail(p), namePricingCommittee BACKGROUND backgroundRetail(p), skipChangeLedger
    PROPERTIES (p) SHOWIF pricingCommittee(p)  nameFormedMan, nameCheckedMan, nameLabeledMan,
                   nameAccountantMan, nameHeadMan

    OBJECTS d = UserPricingDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku, nameBatch,
                   quantity, nameRetailPriceListType, price, sum
    PROPERTIES (d) BACKGROUND backgroundRetail(p)
                   retailMarkup ON CHANGE changeRetailMarkup(d), retailMarkupSum, numberRetailVAT, valueRetailVAT,
                   retailVATSum, retailPrice ON CHANGE changeRetailPrice(d), retailSum
    PROPERTIES (d) nameDepartmentStore, ADDOBJ, deletepd=DELETESESSION
    ORDER BY index(d)

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserPricingDetail,
                           addDetailInputBarcodeUserPricingDetail, deleteUserPricingDetail
    FILTERS userPricing(d) == p

    EVENTS
        ON OK prePost(p)

    EDIT UserPricing OBJECT p
;

DESIGN userPricing {
    main {
        preferredSize = (1024, 768);

        NEW header {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;

//                ADD p.documentHeader {
//                    type = CONTAINERH;
//                    ADD PROPERTY(isPostedUserPricing) { preferredCharWidth = 10; }
//                    ADD PROPERTY(nameDepartmentStoreUserPricing);
//                    ADD PROPERTY(nameNumeratorUserPricing);
//                    ADD PROPERTY(numberUserPricing);
//                    ADD PROPERTY(seriesUserPricing);
//                    ADD PROPERTY(dateUserPricing);
//                    ADD PROPERTY(timeUserPricing);
//                }
                MOVE p.documentHeader {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(p));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameDepartmentStore(p));
                        MOVE PROPERTY(nameNumerator(p));
                        MOVE PROPERTY(number(p));
                        MOVE PROPERTY(series(p));
                        MOVE PROPERTY(date(p));
                        MOVE PROPERTY(time(p));
                    }    
                } 
                NEW params {
                    MOVE p.documentPrm {
                        columns = 2;
                    }
                }
                MOVE p.pricingCommittee {
                    columns = 2;
                }
            }

            MOVE p.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserPricingDetail(p)) { preferredCharWidth = 13;}
        PROPERTY(retailSumUserPricingDetail(p)) { preferredCharWidth = 13;}
    }
}

@defineDocumentSkuPriceListTypeSystemLedger(userPricing, accountPriceListType, departmentStore, );
@extendFormDocumentSku(userPricing, userPricing, p);

@defineDocumentBatchPriceListTypeSystemLedger(userPricing, accountPriceListType, departmentStore, );
@extendFormDocumentBatch(userPricing, userPricing, p);

addUserPricing 'Добавить' = ACTION ADDFORM UserPricing;
edit 'Редактировать' (userPricing) = ACTION EDITFORM UserPricing;
edit(UserPricing p) += ACTION edit(p);

isUserOpened(UserPricing p)=  isOpened[Pricing](p) AND is(p);

edit 'Редактировать' = ACTION ABSTRACT LIST (PricingDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserPricingDetail d) = ACTION NEWSESSION {
    FORM userPricing OBJECTS p = userPricing(d), d = d MANAGESESSION DOCKEDMODAL;
}
edit(UserPricingDetail d) += ACTION edit(d);  

FORM pricings 'Акты расценки' 
    OBJECTS p = Pricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosed, isPosted, isReturn, number, series, date, time,
                            nameDepartmentStore, nameSupplier, nameCurrency, nameCalcRetailPriceListType, nameCalcRetailCalcPriceListType                              
    PROPERTIES (p) READONLY countPricingDetail, quantityPricingDetail, sumPricingDetail,
                            retailSumPricingDetail BACKGROUND backgroundRetail(p)
    PROPERTIES (p) READONLYIF isReadonly() skipChangeLedger, note

    PROPERTIES (p) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES ()  addUserPricing TODRAW p
    PROPERTIES (p) edit SHOWIF isOpened(p)
    PROPERTIES(p)  close[UserPricing] SHOWIF isOpened[UserPricing](p), open SHOWIF isClosed[UserPricing](p)     

    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpened(p)
    PROPERTIES (p) print FORCE PANEL

    OBJECTS d = PricingDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameBatch,
                   quantity, nameRetailPriceListType, price, sum
    PROPERTIES (d) READONLY BACKGROUND backgroundRetail(p) retailMarkup, retailMarkupSum, numberRetailVAT, valueRetailVAT, retailVATSum,
                   retailPrice, retailSum
    PROPERTIES (d) READONLY nameDepartmentStore
    ORDER BY index(d)

    FILTERS pricing(d) == p

    DIALOG Pricing OBJECT p
;
@extendFormFilterAccessStock(Pricing, p, pricings, departmentStore, company);
@extendFormFilterAccessLegalEntity(Pricing, p, pricings, supplier, supplier);

DESIGN pricings {
    NEW pane {
        fill = 1;
        type = SPLITV;

        MOVE p.box {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE p.print;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERV;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
            }
        }
    }
    MOVE functions.box;
}
@extendFormEditable(pricings);
@defineFilterIsOpened (pricing, pricings, p);

NAVIGATOR {
    retailNavigator {
        NEW pricingNavigator 'Учет в розничных ценах' {
            ADD pricings;
            ADD pricingCommitteeDialog;
            ADD operations;
        }
    }
}

WHEN SESSION FORMS userPricing // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcRetailPriceListType(UserPricingDetail detail)) OR
    CHANGED(calcRetailCalcPriceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(departmentStore(detail)) OR
    CHANGED(dateTime(detail))) AND PriceListType pt == calcRetailPriceListType(detail) NOINLINE (pt) DO
   retailPriceListType(detail) <- IF prevPriceB(pt,
                                                                                          sku(detail),
                                                                                          departmentStore(detail),
                                                                                          dateTime(detail))
                                                            THEN pt
                                                            ELSE calcRetailCalcPriceListType(detail);

// если не задана управленческая цена
WHEN SESSION FORMS userPricing // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcRetailPriceListType(UserPricingDetail detail)) OR
    CHANGED(calcRetailCalcPriceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(departmentStore(detail)) OR
    CHANGED(dateTime(detail))) AND NOT calcRetailPriceListType(detail) DO
    retailPriceListType(detail) <- calcRetailCalcPriceListType(detail);

// Проставление надбавки и розничной цены при изменении sku, склада, времени, вида цен, цены расценки, НДС в форме userPricing
//overLimitPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail);
//
//minRetailPriceUserPricingDetail 'Минимальная розничная цена' (detail)= MIN roundPriceRoundCondition([= X*(Y+100)*(Z+100)/10000](
//                                                                        pricingPriceUserPricingDetail(detail),
//                                                                        retailMarkupUserPricingDetail(detail),
//                                                                        valueRetailVATUserPricingDetail(detail)), roundConditionPriceListType(calcRetailCalcPriceListTypeUserPricingDetail(detail))),
//                                                                    overLimitPriceUserPricingDetail(detail);
//FORM userPricingDetail 'Строка расценки'
//    OBJECTS d = UserPricingDetail FIXED PANEL
//    PROPERTIES (d) minRetailPriceUserPricingDetail
//;
@deriveDocumentDetailBatchOnSessionPriceListType (userPricingDetail, retail, pricing, departmentStore, userPricing, );
@recalculateDocumentDetailBatchOnSessionPriceListType(userPricingDetail, retail, pricing, departmentStore, userPricing, , '', d);

//----------------------------------------------- Операции -----------------------------------------------------//

// Вид цены для расценки для операции
pricingPriceListType = DATA PriceListType (Operation);
namePricingPriceListType 'Вид цен акт расценки (управленческий)' (Operation operation) = name(pricingPriceListType(operation));

pricingCalcPriceListType = DATA CalcPriceListType (Operation);
namePricingCalcPriceListType 'Вид цен акт расценки (надбавка)' (Operation operation) = name[PriceListType](pricingCalcPriceListType(operation));

useSupplierStock 'Использовать склад поставщика' = DATA BOOLEAN (Operation);
useShipmentQuantity 'Расценивать поставленное кол-во' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) namePricingPriceListType, namePricingCalcPriceListType, useSupplierStock, useShipmentQuantity
;

DESIGN operation {
    createContainer {
        MOVE PROPERTY(namePricingPriceListType(o));
        MOVE PROPERTY(namePricingCalcPriceListType(o));
        MOVE PROPERTY(useSupplierStock(o));
        MOVE PROPERTY(useShipmentQuantity(o));
    }
}

@defineDocumentInterfaceOperation (pricing, Pricing, );
@extendFormFilterRoleAccess(pricing, p, pricings);
@defineDocumentOperationConstraint(pricing, 'акт расценки', Pricing);

@defineDocumentOperationRolePrefix(userPricing, );

// Записываем тип цены по умолчанию из операции
calcRetailPriceListType (UserPricing pricing) <- pricingPriceListType(operation(pricing))
    WHEN CHANGED(operation(pricing));
calcRetailCalcPriceListType (UserPricing pricing) <- pricingCalcPriceListType(operation(pricing))
    WHEN CHANGED(operation(pricing));

EXTEND FORM userPricing
    PROPERTIES(p) nameOperation
//    PROPERTIES (d) overLimitPriceUserPricingDetail, overPricingPriceUserPricingDetail, pricingPriceUserPricingDetail, minRetailPriceUserPricingDetail
;
DESIGN userPricing{
    first{
        MOVE PROPERTY (nameOperation(p)) {minimumCharWidth = 30; preferredCharWidth = 40;}
    }
}

EXTEND FORM pricings
    PROPERTIES(p) READONLY nameOperation BEFORE nameCurrency(p)
;

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS SystemLedgerPriceListType {
    supplierPricingPriceListType 'Поставщика (расценка)',
    retailPricingPriceListType 'Розничная (расценка)'
}

supplierPricingPriceB 'Цена поставщика' (Sku sku, Stock stock, DATETIME dateTime) =
    priceB(SystemLedgerPriceListType.supplierPricingPriceListType, sku, stock, dateTime);
supplierPricingPriceB 'Цена поставщика' (Sku sku, Stock stock, DATE date) = 
    supplierPricingPriceB(sku, stock, toDateTime(date));    
supplierPricingPriceB 'Цена поставщика' = supplierPricingPriceB(Sku sku, Stock stock, currentDateTime());  

supplierPricingPriceB 'Цена поставщика' (Batch batch, Stock stock, DATETIME dateTime) =
    priceB(SystemLedgerPriceListType.supplierPricingPriceListType, batch, stock, dateTime);
supplierPricingPriceB 'Цена поставщика' (Batch batch, Stock stock, DATE date) = 
    supplierPricingPriceB(batch, stock, toDateTime(date));    

prevSupplierPricingPriceB 'Цена поставщика' (Sku sku, Stock stock, DATETIME dateTime) =
    prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType, sku, stock, dateTime);
prevSupplierPricingPriceB 'Цена поставщика' (Sku sku, Stock stock, DATE date) = 
    prevSupplierPricingPriceB(sku, stock, toDateTime(date));    

currentSupplierPricingPriceListLedger (Sku sku, Stock stock) =
    currentPriceListLedger(SystemLedgerPriceListType.supplierPricingPriceListType, sku, stock) PERSISTENT TABLE extraSkuStock;

currentSupplierPricingPrice 'Цена поставщика' (Sku sku, Stock stock) =
    price[PriceListLedger,LedgerPriceListType](currentSupplierPricingPriceListLedger(sku, stock), SystemLedgerPriceListType.supplierPricingPriceListType) PERSISTENT TABLE extraSkuStock; 

retailPricingPriceB 'Розничная цена' (Sku sku, Stock stock, DATETIME dateTime) =
    priceB(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
retailPricingPriceB 'Розничная цена' (Sku sku, Stock stock, DATE date) = 
    retailPricingPriceB(sku, stock, toDateTime(date));    
retailPricingPriceB 'Розничная цена' = retailPricingPriceB(Sku sku, Stock stock, currentDateTime());  

retailPricingPriceB 'Розничная цена' (Batch batch, Stock stock, DATETIME dateTime) =
    priceB(SystemLedgerPriceListType.retailPricingPriceListType, batch, stock, dateTime);
retailPricingPriceB 'Розничная цена' (Batch batch, Stock stock, DATE date) = 
    retailPricingPriceB(batch, stock, toDateTime(date));    

prevRetailPricingPriceB 'Розничная цена' (Sku sku, Stock stock, DATETIME dateTime) =
    prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
prevRetailPricingPriceB 'Розничная цена' (Sku sku, Stock stock, DATE date) = 
    prevRetailPricingPriceB(sku, stock, toDateTime(date));    

retailPricingPriceA 'Розничная цена' (Sku sku, Stock stock, DATETIME dateTime) =
    priceA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
retailPricingPriceA 'Розничная цена' (Sku sku, Stock stock, DATE date) = 
    retailPricingPriceA(sku, stock, toDateTime(date));    

currentRetailPricingPriceListLedger (Sku sku, Stock stock) =
    currentPriceListLedger(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock) PERSISTENT TABLE extraSkuStock;

currentRetailPricingPrice 'Розничная цена' (Sku sku, Stock stock) =
    price[PriceListLedger,LedgerPriceListType](currentRetailPricingPriceListLedger(sku, stock), SystemLedgerPriceListType.retailPricingPriceListType) PERSISTENT TABLE extraSkuStock; 

currentRetailPricingDescription 'Описание' (Sku sku, Stock stock) =
    description(currentRetailPricingPriceListLedger(sku, stock)); 

retailPricingPriceA 'Розничная цена' (Sku sk, Stock st) = retailPricingPriceA(sk, st, currentDateTime());
retailPricingSumA 'Розничная сумма' (Sku sku,Stock stock)= retailPricingPriceA(sku,stock) * currentBalance(sku,stock);

retailPricingDescriptionA 'Описание' (Sku sku, Stock stock, DATETIME dateTime) =
    descriptionA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
retailPricingDescriptionA 'Описание' (Sku sku, Stock stock, DATE date) = 
    retailPricingDescriptionA(sku, stock, toDateTime(date));    

retailPricingDescriptionA 'Описание' (Sku sk, Stock st) = retailPricingDescriptionA(sk, st, currentDateTime()); 

retailPricingFromDateTimeA 'Дата/время с' (Sku sku, Stock stock, DATETIME dateTime) =
    fromDateTimeA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
    
retailPricingFromDateTimeA 'Дата/время с' (Sku sk, Stock st) = retailPricingFromDateTimeA(sk, st, currentDateTime());    

currentRetailPricingFromDateTime 'Дата/время с' (Sku sku, Stock stock) =
    fromDateTime(currentRetailPricingPriceListLedger(sku, stock)); 

retailPricingPriceA 'Розничная цена' (Batch batch, Stock stock, DATETIME dateTime) =
    priceA(SystemLedgerPriceListType.retailPricingPriceListType, batch, stock, dateTime);
retailPricingPriceA 'Розничная цена' (Batch batch, Stock stock, DATE date) = 
    retailPricingPriceA(batch, stock, toDateTime(date));    

prevRetailPricingPriceA 'Розничная цена' (Sku sku, Stock stock, DATETIME dateTime) =
    prevPriceA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
prevRetailPricingPriceA 'Розничная цена' (Sku sku, Stock stock, DATE date) = 
    prevRetailPricingPriceA(sku, stock, toDateTime(date));    

includeVAT[SystemLedgerPriceListType] (SystemLedgerPriceListType priceListType) += WHEN priceListType == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;

batch(SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.supplierPricingPriceListType AND isCompany(stock)
                                              THEN priceBatchLedger(stock);
batch(SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.retailPricingPriceListType AND isCompany(stock)
                                              THEN priceBatchLedger(stock);

EXTEND CLASS PricingDetail : PriceListLedger;

fromDateTime (PricingDetail ledger) += dateTime(ledger);

isPosted(PricingDetail ledger) += isPosted(ledger);
skip(PricingDetail ledger) += skipChangeLedger(ledger);

sku[PriceListLedger] (PricingDetail ledger) += sku(ledger);

description (PricingDetail ledger) += description(ledger);

company (PricingDetail ledger) += supplier(ledger);

in (PricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN TRUE;
price (PricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN price(ledger);
in (PricingDetail ledger, Batch batch) += batch(ledger) == batch; 
differentOrganizations(SystemLedgerPriceListType type) += WHEN type == SystemLedgerPriceListType.supplierPricingPriceListType THEN TRUE;   

in (PricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
price (PricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPrice(ledger);

//inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;
//pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += retailPricePricingDetail(ledger) WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;

in (PricingDetail ledger, DepartmentStore stock) += departmentStore(ledger) == stock;

edit[PriceListLedger](PricingDetail d) += ACTION edit(d);

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userPricing, supplierPricingPriceListType, , sku, departmentStore);

// ------ Расширяем форму остатков

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s, st) READONLY retailPricingPriceA, retailPricingSumA  
;