MODULE Pricing;

REQUIRE Invoice, EmployeeStock, PriceRoundStore, Machinery, PricingOperation, PriceListCalc, PriceListLedger;

// ----------------------------------- Создавать акт расценки по умолчанию для отдела ------------------------------------------ //

costLedgerDepartmentStore 'Учет по себестоимости' = DATA BOOLEAN (DepartmentStore) IN bookkeepingGroup;
EXTEND FORM departmentStore PROPERTIES(d) costLedgerDepartmentStore;
EXTEND DESIGN departmentStore {
    headerExtraParams {
        ADD PROPERTY(costLedgerDepartmentStore);
    }
}

// ----------------------------------- Комиссия ------------------------------------------ //

CLASS PricingCommittee 'Комиссия для акта расценки' : Committee;

namePricingCommittee 'Наименование' = DATA VARISTRING[150](PricingCommittee);

nameCommittee(committee) += namePricingCommittee(committee) IF committee IS PricingCommittee;


//@defineCommitteeEmployee(committee, chairman, 'Председатель');
@defineCommitteeEmployeePrefix(pricingCommittee, formedMan, 'Цены сформировал');
@defineCommitteeEmployeePrefix(pricingCommittee, checkedMan, 'Реестр проверил');
@defineCommitteeEmployeePrefix(pricingCommittee, labeledMan, 'Товар промаркировал');
@defineCommitteeEmployeePrefix(pricingCommittee, accountantMan, 'Бухгалтер');
@defineCommitteeEmployeePrefix(pricingCommittee, headMan, 'Зав. магазином');

// ----------------------------------- Комиссия по умолчанию для отдела ------------------------------------------ //

pricingCommitteeDepartmentStore 'Комиссия для акта расценки (ИД)' = DATA PricingCommittee (DepartmentStore);
namePricingCommitteeDepartmentStore 'Комиссия для акта расценки' (departmentStore) = namePricingCommittee(pricingCommitteeDepartmentStore(departmentStore)) IN committeeGroup MINCHARWIDTH 20 PREFCHARWIDTH 30;
isDefaultPricingCommitteeDepartmentStore 'По умолчанию' (pricingCommittee, departmentStore) = pricingCommitteeDepartmentStore(departmentStore) == pricingCommittee;
CONSTRAINT pricingCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeStock(pricingCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY pricingCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

EXTEND FORM departmentStore PROPERTIES namePricingCommitteeDepartmentStore(d);

// ----------------------------------- Формы для комиссий для реестра цен ------------------------------------------ //

FORM pricingCommittee 'Комиссия для акта расценки'
    OBJECTS c=PricingCommittee FIXED PANEL
    PROPERTIES(c)      namePricingCommittee, nameFormedManPricingCommittee, nameCheckedManPricingCommittee,
                       nameLabeledManPricingCommittee, nameAccountantManPricingCommittee, nameHeadManPricingCommittee

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s=Store
    PROPERTIES         READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st), nameStore(s)
    FILTERS            stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=DepartmentStore
    PROPERTIES(dep)    READONLY depName = nameDepartmentStore
    PROPERTIES(c, dep) inCommitteeStock, isDefaultPricingCommitteeDepartmentStore
    FILTERS            inChainStoresStoreTypeStoreDepartmentStore(t, st, s, dep)
    ORDER BY depName

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' 'F9' inCommitteeStock(c, dep)

    EDIT PricingCommittee OBJECT c
;
@extendFormFilterStockAccess(DepartmentStore, dep, pricingCommittee);
@extendFormFilterStockGroupAccess(ChainStores, t, pricingCommittee);
@extendFormFilterStockGroupAccess(StoreType, st, pricingCommittee);
@extendFormFilterStockGroupAccess(Store, s, pricingCommittee);

DESIGN pricingCommittee FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW stocks AFTER c.box {
            fill = 1;
            type = SPLITH;

            ADD treeStore.tree.box;
            ADD dep.box {
                fill = 3;
            }
        }

        NEW managers AFTER stocks {
            caption = 'Состав комиссии';
            type = COLUMNS;
            columns = 3;
            ADD PROPERTY (nameFormedManPricingCommittee);
            ADD PROPERTY (nameCheckedManPricingCommittee);
            ADD PROPERTY (nameLabeledManPricingCommittee);
            ADD PROPERTY (nameAccountantManPricingCommittee);
            ADD PROPERTY (nameHeadManPricingCommittee);
        }
    }
}

FORM pricingCommitteeDialog 'Комиссии для акта расценки'
    OBJECTS r=PricingCommittee
    PROPERTIES(r)      READONLY namePricingCommittee, nameStocksCommittee, nameFormedManPricingCommittee, nameCheckedManPricingCommittee, nameLabeledManPricingCommittee,
                       nameAccountantManPricingCommittee, nameHeadManPricingCommittee
    PROPERTIES(r)      ADDFORM, EDITFORM

    DIALOG PricingCommittee OBJECT r
;

// ----------------------------------- Макрос для задания комиссии для документов ------------------------------------------ //

GROUP pricingCommitteeGroup 'Комиссия' : public;

META defineDocumentHeaderPricingCommittee(object, stockClass, prefix)
    prefix###pricingCommittee###object (object) = DATA PricingCommittee(###object);

    name###prefix###pricingCommittee###object 'Комиссия для акта расценки' (object) = namePricingCommittee(prefix###pricingCommittee###object(object)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
    prefix###pricingCommittee###object (object) <- pricingCommitteeDepartmentStore(stockClass###object(object))
        WHEN CHANGED(stockClass###object(object));

    CONSTRAINT prefix###pricingCommittee###object (object) AND NOT inCommitteeStock(prefix###pricingCommittee###object(object), stockClass###object(object))
        CHECKED BY prefix###pricingCommittee###object MESSAGE 'Для документа выбрана комиссия, которая не действует для склада документа';

    name###prefix###FormedMan###object 'Цены сформировал' (object) = nameFormedManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###CheckedMan###object 'Реестр проверил' (object) = nameCheckedManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###LabeledMan###object 'Товар промаркировал' (object) = nameLabeledManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###AccountantMan###object 'Бухгалтер' (object) = nameAccountantManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###HeadMan###object 'Зав. магазином' (object) = nameHeadManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;

END
META defineDocumentHeaderAbstractPricingCommittee(object, stockClass, prefix)
    prefix###pricingCommittee###object (object) = ABSTRACT PricingCommittee(###object) PERSISTENT;

    name###prefix###pricingCommittee###object 'Комиссия для акта расценки' (object) = namePricingCommittee(prefix###pricingCommittee###object(object)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

    name###prefix###FormedMan###object 'Цены сформировал' (object) = nameFormedManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###CheckedMan###object 'Реестр проверил' (object) = nameCheckedManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###LabeledMan###object 'Товар промаркировал' (object) = nameLabeledManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###AccountantMan###object 'Бухгалтер' (object) = nameAccountantManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;
    name###prefix###HeadMan###object 'Зав. магазином' (object) = nameHeadManPricingCommittee(prefix###pricingCommittee###object(object)) IN pricingCommitteeGroup;

END

META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass, prefix)
    @defineDocumentHeaderAbstractPricingCommittee (object, stockClass, prefix);
    @defineDocumentHeaderPricingCommittee (user###object, stockClass, prefix);
    prefix###pricingCommittee###object (object) += prefix###pricingCommittee###user###object(object);
END
META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass)
    @defineDocumentInterfaceHeaderPricingCommittee (object, stockClass, );
END

//------------------------  derive or change ------------------------------------//

META deriveDocumentDetailBatchOnSessionPriceListType (idetail, prefix, prefixP, stockProp, form)

    WHEN SESSION FORMS form
        (CHANGED(prefix###priceListType###idetail(detail)) OR
         CHANGED(prefixP###price###idetail(detail)) OR
         CHANGED(sku###idetail(detail)) OR
         CHANGED(stockProp###idetail(detail)) OR
         CHANGED(dateTime###idetail(detail)) OR
         CHANGED(value###prefix###VAT###idetail(detail)))
        AND sku###idetail(detail) AND priceListType == prefix###priceListType###idetail(detail) AND priceListType IS CalcPriceListType NOINLINE (priceListType) INLINE DO {
            prefix###markup###idetail(detail) <- markupCalcPriceListTypeSku(priceListType, sku###idetail(detail))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
            prefix###price###idetail(detail) <- roundPriceRoundCondition([X*(Y+100)*(Z+100)/10000](
                                                                    prefixP###price###idetail(detail),
                                                                    prefix###markup###idetail(detail),
                                                                    value###prefix###VAT###idetail(detail)), roundConditionPriceListType(priceListType))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
        }

    WHEN SESSION FORMS form
        (CHANGED(prefix###priceListType###idetail(detail)) OR
         CHANGED(prefixP###price###idetail(detail)) OR
         CHANGED(sku###idetail(detail)) OR
         CHANGED(stockProp###idetail(detail)) OR
         CHANGED(dateTime###idetail(detail)) OR
         CHANGED(batch###idetail(detail)) OR
         CHANGED(value###prefix###VAT###idetail(detail)))
        AND sku###idetail(detail) AND priceListType == prefix###priceListType###idetail(detail) AND NOT priceListType IS CalcPriceListType NOINLINE (priceListType) INLINE DO {

            prefix###price###idetail(detail) <- IF batch###idetail(detail) THEN
                                                            prevPriceBPriceListTypeBatchStockDateTime(priceListType,
                                                                                       batch###idetail(detail),
                                                                                       stockProp###idetail(detail),
                                                                                       dateTime###idetail(detail))
                                                   ELSE
                                                            prevPriceBPriceListTypeSkuStockDateTime(priceListType,
                                                                                       sku###idetail(detail),
                                                                                       stockProp###idetail(detail),
                                                                                       dateTime###idetail(detail))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
            prefix###markup###idetail(detail) <- [round2(((X/Z*100/(100+Y))-1)*100)](
                                                               prefix###price###idetail(detail),
                                                               prefixP###price###idetail(detail),
                                                               value###prefix###VAT###idetail(detail))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
        }
END

META changeDocumentDetailMarkupCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    calc###prefixC###markup###detail(detail)  = [round2(((X/Z*100/(100+Y))-1)*100)](
        prefixA###price###detail(detail),
        prefixB###price###detail(detail),
        value###prefixD###VAT###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixA###price###detail(detail) <- requestedNumeric();
            ASSIGN prefixC###markup###detail(detail) <- calc###prefixC###markup###detail(detail) WHERE calc###prefixC###markup###detail(detail);
        } ELSE {
            ASSIGN prefixA###price###detail(detail) <- NULL;
        }
    }
END

META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixCondition)

    calc###prefixA###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([X*(Y+100)*(Z+100)/10000](
    prefixB###price###detail(detail),
    prefixC###markup###detail(detail),
    value###prefixD###VAT###detail(detail))), prefixCondition###roundCondition###detail(detail));

    change###prefixC###markup###detail = ACTION (detail) {
        REQUEST NUMERIC[8,3] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixC###markup###detail(detail) <- requestedNumeric();
            ASSIGN prefixA###price###detail(detail) <- calc###prefixA###price###detail(detail) WHERE calc###prefixA###price###detail(detail);
        } ELSE {
            ASSIGN prefixC###markup###detail(detail) <- NULL;
        }
    }
END
META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    @changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, );
END

//-- С учетом предельных надбавок

META changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixCondition)
    calc###prefixA###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([X*(Y+100)*(Z+100)/10000](
    prefixB###price###detail(detail),
    prefixC###markup###detail(detail),
    value###prefixD###VAT###detail(detail))), prefixCondition###roundCondition###detail(detail));

    calcMin###prefixA###price###detail(detail)  = MIN calc###prefixA###price###detail(detail),
                                                      overLimitPrice###detail(detail);

    change###prefixC###markup###detail = ACTION (detail) {
        REQUEST NUMERIC[8,3] INPUT;

        IF requestedNumeric() THEN {
            SET prefixC###markup###detail(detail) <- requestedNumeric();
            SET prefixA###price###detail(detail) <- calc###prefixA###price###detail(detail) WHERE calcMin###prefixA###price###detail(detail);
        } ELSE {
            SET prefixC###markup###detail(detail) <- NULL;
        }
    }
END
META changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    @changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, );
END

//-- Для общего случая
META changeDocumentDetailMarkupPrefixInner(detail, prefixA, prefixB, prefixC, prefixD, prefixE, prefixF)
    calc###prefixB###markup###detail(detail)  = [round2(((X/Z*100/(100+Y))-1)*100)](
        prefixC###price###detail(detail),
        prefixD###price###detail(detail),
        value###prefixE###VAT###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixA###price###detail(detail) <- requestedNumeric();
            ASSIGN prefixF###markup###detail(detail) <- calc###prefixB###markup###detail(detail) WHERE calc###prefixB###markup###detail(detail);
        } ELSE {
            ASSIGN prefixA###price###detail(detail) <- NULL;
        }
    }
END
//--

META changeDocumentDetailPricePrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixE, prefixF)

    calc###prefixB###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([X*(Y+100)*(Z+100)/10000](
        prefixD###price###detail(detail),
        prefixC###markup###detail(detail),
        value###prefixE###VAT###detail(detail))), roundCondition###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixA###price###detail(detail) <- requestedNumeric();
            ASSIGN prefixF###price###detail(detail) <- calc###prefixB###price###detail(detail) WHERE calc###prefixB###price###detail(detail);
        } ELSE {
            ASSIGN prefixA###price###detail(detail) <- NULL;
        }
    }
END

//----------------------------------------------- Расценка ---------------------------------------------------//

CLASS ABSTRACT Pricing 'Акт расценки';
CLASS ABSTRACT PricingDetail 'Строка акта расценки';

CLASS UserPricing 'Акт расценки (польз.)' : Pricing, Historizable, NumeratedDocument;
CLASS UserPricingDetail 'Строка акта расценки (польз.)' : PricingDetail;
CLASS UserPricingPosted 'Проведенный акт расценки (польз.)' : UserPricing, PostedObject;

@defineDocumentInterface(pricing);

@defineDocumentInterfaceNumber(pricing);

@defineDocumentInterfaceDataStock(pricing, departmentStore, 'Склад');
@defineDocumentInterfacePosted(pricing);

@defineDocumentInterfaceDescription(pricing, 'Акт расценки');

// Валюта
@defineDocumentInterfaceCurrency(pricing);
@deriveDocumentCurrency(userPricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(pricing, sku);

// Виды цен

@defineDocumentInterfaceHeaderPriceListType (pricing, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (pricing, pricingDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userPricing, userPricingDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentInterfaceHeaderPriceListType (pricing, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (pricing, pricingDetail, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userPricing, userPricingDetail, priceListType, calcRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (pricing, priceListType, retail, );

CONSTRAINT currencyUserPricing(pricing) != currencyPriceListType(calcRetailCalcPriceListTypeUserPricing(pricing))
           CHECKED BY calcRetailCalcPriceListTypeUserPricing
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';
CONSTRAINT currencyUserPricing(pricing) != currencyPriceListType(calcRetailPriceListTypeUserPricing(pricing))
           CHECKED BY calcRetailPriceListTypeUserPricing
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

CONSTRAINT currencyUserPricingDetail(detail) != currencyPriceListType(retailPriceListTypeUserPricingDetail(detail))
           CHECKED BY retailPriceListTypeUserPricingDetail
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';


// Округление
roundConditionUserPricingDetail(userPricingDetail) =
    IF roundConditionPriceListType(retailPriceListTypeUserPricingDetail(userPricingDetail))
        THEN roundConditionPriceListType(retailPriceListTypeUserPricingDetail(userPricingDetail))
        ELSE roundConditionDepartmentStore(departmentStoreUserPricingDetail(userPricingDetail));

// Поставщик
@defineDocumentInterfaceLegalEntity (pricing, supplier, 'Поставщик');
CONSTRAINT supplierUserPricing(userPricing) AND NOT isSellerLegalEntity(supplierUserPricing(userPricing))
    CHECKED BY supplierUserPricing MESSAGE 'Для акта расценки выбрано в качестве поставщика организация, не являющаяся поставщиком или компанией';

// Комиссия
@defineDocumentInterfaceHeaderPricingCommittee (pricing, departmentStore);

// Кол-во
@defineDocumentInterfaceDetailQuantity(pricing);

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(pricing, , ' поставщика');

// Цена базовая (от которой будет считаться надбавка)
overPricingPricePricingDetail = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;
overPricingPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail) PERSISTENT;
overPricingPricePricingDetail (detail) += overPricingPriceUserPricingDetail(detail);

pricingPriceUserPricingDetail (detail) = OVERRIDE priceUserPricingDetail(detail), overPricingPriceUserPricingDetail(detail) PERSISTENT;
pricingPricePricingDetail (detail) = OVERRIDE pricePricingDetail(detail), overPricingPricePricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (pricing, retail, );

// НДС
@defineDocumentInterfaceDetailVAT(pricing, countryDepartmentStore, retail, );
@deriveDocumentDetailVAT(userPricing, retail);
@deriveDocumentDetailValueVAT(userPricing, retail);

// Цена розничная
@defineDocumentInterfaceDetailPricePrefix(pricing, retail, ' розничная');

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
overLimitPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail);
@changeDocumentDetailMarkupCustomPrefix(userPricingDetail, retail, pricing, retail, retail);
@changeDocumentDetailPriceCustomPrefix(userPricingDetail, retail, pricing, retail, retail);

// -- Суммы по строкам

@defineDocumentInterfaceDetailDataSumPrefix (pricing, , ' поставщика');
@defineDocumentInterfaceDetailMarkupSumPrefix (pricing, retail);
@defineDocumentInterfaceDetailVATDataSumPrefix (pricing, retail, ' розничная');
@defineDocumentInterfaceDetailDataSumPrefix (pricing, retail, ' розничная');

// Расчет сумм обратным счетом
@deriveDocumentDetailSumPrefix(userPricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userPricing, retail, retail);
@deriveDocumentDetailMarkupSumPrefix(userPricing, retail, retail, );
@deriveDocumentDetailSum(userPricing, quantity);

// -- Суммы по акту

@defineDocumentInterfaceHeaderQuantity(pricing);

@defineDocumentHeaderSkuQuantity(pricing, sku);
@defineDocumentHeaderSkuQuantity(userPricing, sku);

@defineDocumentInterfaceHeaderSumCustom (pricing, pricingDetail, ' поставщика');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailVAT, ' НДС');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retail, ' розничная');

@defineDocumentInterfaceHeaderItemSum (pricing, retailMarkup, retailMarkup);  //-- сумма торговой надбавки (с разбивкой по таре, товару...)
@defineDocumentInterfaceHeaderItemSum (pricing, retailVAT, retailVAT);        //-- сумма розничного НДС (с разбивкой по таре, товару...)
@defineDocumentInterfaceHeaderItemSumDouble (pricing, range, retailVAT, retailVAT, , retailVAT); //-- сумма НДС розничного (с разбивкой по таре, товару...) по документу и по шкале
@defineDocumentInterfaceHeaderItemSum (pricing, , );                          //-- сумма поставщика (с разбивкой по таре, товару...)

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userPricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userPricing, sku);

// Не изменить текущие цены
@defineDocumentInterfaceHeaderSkip(Pricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(pricing, changeLedger, 'Не изменять текущие цены');

// Основание
descriptionDocumentPricing 'Документы-основания' = ABSTRACT VARSTRING[255] (Pricing) PERSISTENT;
extraDescriptionPricingDetail 'Доп. наименование'  = ABSTRACT VARSTRING[255] (PricingDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

// Возвраты
isReturnPricing 'Обратный' = ABSTRACT BOOLEAN (Pricing);

//-- Партии
@defineDocumentInterfaceDetailBatch(pricing, batch);

changeBatchUserPricingDetail = ACTION (detail) {
    FORM dialogBatchStock OBJECTS st = departmentStoreUserPricingDetail(detail),
                             t = dateTimeUserPricingDetail(detail),
                             sk = skuUserPricingDetail(detail) MODAL SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserPricingDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batchUserPricingDetail(detail) <- NULL;
    }

};

@defineBalancesBatch(pricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userPricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineMovementPriceSku(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //

FORM pricing 'Акт расценки (печать)' PRINT
    OBJECTS p=Pricing FIXED PANEL
    PROPERTIES (p)  SELECTOR objectClassName

    PROPERTIES (p) nameDepartmentStorePricing, nameLegalEntityStockPricing, numberPricing, seriesPricing, datePricing, timePricing,
                   nameSupplierPricing, nameCurrencyPricing, notePricing,
                   countPricingDetailPricing, quantityPricingDetailPricing, sumPricingDetailPricing,
                   retailMarkupSumPricingDetailPricing, retailVATSumPricingDetailPricing,
                   retailSumPricingDetailPricing, namePricingCommitteePricing,
                   nameFormedManPricing, nameCheckedManPricing, nameLabeledManPricing, nameAccountantManPricing,
                   nameHeadManPricing    //notPassToBookkeepingListRegister

    OBJECTS d=PricingDetail

    PROPERTIES (d) indexPricingDetail, idBarcodeSkuPricingDetail, nameSkuPricingDetail, extraDescriptionPricingDetail, shortNameUOMSkuPricingDetail,
                   quantityPricingDetail, overPricingPricePricingDetail, pricingPricePricingDetail, pricePricingDetail, sumPricingDetail,
                   retailMarkupPricingDetail, retailMarkupSumPricingDetail, numberRetailVATPricingDetail, valueRetailVATPricingDetail, retailVATSumPricingDetail,
                   retailPricePricingDetail, retailSumPricingDetail

    FILTERS pricingPricingDetail(d) == p
;

printPricing 'Акт расценки' (pricing) = ACTION FORM pricing OBJECTS p = pricing IMAGE 'print.png' IN printGroup;

// --------------------------- Формы --------------------------------- //

backgroundRetailPricing 'Цвет' (pricing) = RGB(224, 255, 255) IF pricing IS Pricing;
FORM userPricing 'Акт расценки'
    OBJECTS p = UserPricing FIXED PANEL
    PROPERTIES (p) objectClassName, nameDepartmentStoreUserPricing, nameNumeratorObject, numberObject, seriesObject, dateUserPricing, timeUserPricing,
                   nameSupplierUserPricing, nameCurrencyUserPricing, noteUserPricing, nameCalcRetailPriceListTypeUserPricing, nameCalcRetailCalcPriceListTypeUserPricing,
                   countUserPricingDetailUserPricing, quantityUserPricingDetailUserPricing, sumUserPricingDetailUserPricing,
                   retailSumUserPricingDetailUserPricing BACKGROUND backgroundRetailPricing(p), namePricingCommitteeUserPricing BACKGROUND backgroundRetailPricing(p), skipChangeLedgerUserPricing
    PROPERTIES (p) SHOWIF pricingCommitteeUserPricing(p)  nameFormedManUserPricing, nameCheckedManUserPricing, nameLabeledManUserPricing,
                   nameAccountantManUserPricing, nameHeadManUserPricing

    OBJECTS d = UserPricingDetail
    PROPERTIES (d) indexUserPricingDetail, idBarcodeSkuUserPricingDetail, nameSkuUserPricingDetail, shortNameUOMSkuUserPricingDetail, nameBatchUserPricingDetail,
                   quantityUserPricingDetail, nameRetailPriceListTypeUserPricingDetail, priceUserPricingDetail, sumUserPricingDetail
    PROPERTIES (d) BACKGROUND backgroundRetailPricing(p)
                   retailMarkupUserPricingDetail ON CHANGE changeRetailMarkupUserPricingDetail(d), retailMarkupSumUserPricingDetail, numberRetailVATUserPricingDetail, valueRetailVATUserPricingDetail,
                   retailVATSumUserPricingDetail, retailPriceUserPricingDetail ON CHANGE changeRetailPriceUserPricingDetail(d), retailSumUserPricingDetail
    PROPERTIES (d) nameDepartmentStoreUserPricingDetail, ADDOBJ, deletepd=DELETESESSION


    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserPricingDetailUserPricing,
                           addDetailInputBarcodeUserPricingDetailUserPricing, deleteUserPricingDetailUserPricing
    FILTERS userPricingUserPricingDetail(d) == p

    EVENTS
        ON OK prePostUserPricing(p)

    EDIT UserPricing OBJECT p
;

DESIGN userPricing FROM DEFAULT{
    main {
        preferredSize = (1024, 768);

        NEW header {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;

                ADD p.documentHeaderGroup {
                    type = CONTAINERH;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameDepartmentStoreUserPricing);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserPricing);
                    ADD PROPERTY(timeUserPricing);
                }

                NEW params {
                    ADD p.documentPrmGroup {
                        columns = 2;
                    }
                }
                ADD p.pricingCommitteeGroup {
                    columns = 2;
                }
            }

            ADD p.documentSumGroup {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            ADD d.box {
                caption = 'Спецификация';
            }
        }

        ADD functions.box;

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

@defineDocumentSkuPriceListTypeSystemLedger(userPricing, accountPriceListType, departmentStore);
@extendFormDocumentSku(userPricing, userPricing, p);

@defineDocumentBatchPriceListTypeSystemLedger(userPricing, accountPriceListType, departmentStore);
@extendFormDocumentBatch(userPricing, userPricing, p);

addUserPricing 'Добавить' = ACTION ADDFORM UserPricing;
editUserPricing 'Редактировать' (userPricing) = ACTION EDITFORM UserPricing;

FORM pricings 'Акты расценки' TITLE 'Акты расценки'
    OBJECTS p = Pricing
    PROPERTIES (p) READONLY isPostedPricing FORCE GRID, isReturnPricing, numberPricing, seriesPricing, datePricing, timePricing,
                            nameDepartmentStorePricing, nameSupplierPricing, nameCurrencyPricing, nameCalcRetailPriceListTypePricing, nameCalcRetailCalcPriceListTypePricing,
                            countPricingDetailPricing, quantityPricingDetailPricing, sumPricingDetailPricing,
                            retailSumPricingDetailPricing BACKGROUND backgroundRetailPricing(p), skipChangeLedgerPricing,
                            notePricing, objectClassName

    PROPERTIES (p) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserPricing TODRAW p
    PROPERTIES (p) editUserPricing
    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserPricing(p)
    PROPERTIES (p) printPricing FORCE PANEL

    OBJECTS d = PricingDetail
    PROPERTIES (d) READONLY indexPricingDetail, idBarcodeSkuPricingDetail, nameSkuPricingDetail, shortNameUOMSkuPricingDetail, nameBatchPricingDetail,
                   quantityPricingDetail, nameRetailPriceListTypePricingDetail, pricePricingDetail, sumPricingDetail
    PROPERTIES (d) READONLY BACKGROUND backgroundRetailPricing(p) retailMarkupPricingDetail, retailMarkupSumPricingDetail, numberRetailVATPricingDetail, valueRetailVATPricingDetail, retailVATSumPricingDetail,
                   retailPricePricingDetail, retailSumPricingDetail
    PROPERTIES (d) READONLY nameDepartmentStorePricingDetail

    FILTERS pricingPricingDetail(d) == p

    DIALOG Pricing OBJECT p
;
@extendFormFilterAccessStock(Pricing, p, pricings, departmentStore, company);
@extendFormFilterAccessLegalEntity(Pricing, p, pricings, supplier, supplier);

DESIGN pricings FROM DEFAULT {
    NEW pane {
        fill = 1;
        type = SPLITV;

        ADD p.box {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            ADD d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                ADD p.historyGroup;
                ADD p.postedGroup;
            }
            NEW printTab {
                caption = 'Печатные формы';
                ADD p.printGroup;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERV;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
            }
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    retailNavigator {
        NEW pricingNavigator 'Учет в розничных ценах' {
            ADD pricings;
            ADD pricingCommitteeDialog;
            ADD operations;
        }
    }
}

WHEN SESSION FORMS userPricing // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcRetailPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(calcRetailCalcPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(skuUserPricingDetail(detail)) OR
    CHANGED(departmentStoreUserPricingDetail(detail)) OR
    CHANGED(dateTimeUserPricingDetail(detail))) AND pt == calcRetailPriceListTypeUserPricingDetail(detail) NOINLINE (pt) DO
   retailPriceListTypeUserPricingDetail(detail) <- IF prevPriceBPriceListTypeSkuStockDateTime(pt,
                                                                                          skuUserPricingDetail(detail),
                                                                                          departmentStoreUserPricingDetail(detail),
                                                                                          dateTimeUserPricingDetail(detail))
                                                            THEN pt
                                                            ELSE calcRetailCalcPriceListTypeUserPricingDetail(detail);

// если не задана управленческая цена
WHEN SESSION FORMS userPricing // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcRetailPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(calcRetailCalcPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(skuUserPricingDetail(detail)) OR
    CHANGED(departmentStoreUserPricingDetail(detail)) OR
    CHANGED(dateTimeUserPricingDetail(detail))) AND NOT calcRetailPriceListTypeUserPricingDetail(detail) DO
    retailPriceListTypeUserPricingDetail(detail) <- calcRetailCalcPriceListTypeUserPricingDetail(detail);

// Проставление надбавки и розничной цены при изменении sku, склада, времени, вида цен, цены расценки, НДС в форме userPricing
//overLimitPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail);
//
//minRetailPriceUserPricingDetail 'Минимальная розничная цена' (detail)= MIN roundPriceRoundCondition([X*(Y+100)*(Z+100)/10000](
//                                                                        pricingPriceUserPricingDetail(detail),
//                                                                        retailMarkupUserPricingDetail(detail),
//                                                                        valueRetailVATUserPricingDetail(detail)), roundConditionPriceListType(calcRetailCalcPriceListTypeUserPricingDetail(detail))),
//                                                                    overLimitPriceUserPricingDetail(detail);
//FORM userPricingDetail 'Строка расценки'
//    OBJECTS d = UserPricingDetail FIXED PANEL
//    PROPERTIES (d) minRetailPriceUserPricingDetail
//;
@deriveDocumentDetailBatchOnSessionPriceListType (userPricingDetail, retail, pricing, departmentStore, userPricing);

//----------------------------------------------- Операции -----------------------------------------------------//

// Вид цены для расценки для операции
pricingPriceListTypeOperation = DATA PriceListType (Operation);
namePricingPriceListTypeOperation 'Вид цен акт расценки (управленческий)' (operation) = namePriceListType(pricingPriceListTypeOperation(operation));

pricingCalcPriceListTypeOperation = DATA CalcPriceListType (Operation);
namePricingCalcPriceListTypeOperation 'Вид цен акт расценки (надбавка)' (operation) = namePriceListType(pricingCalcPriceListTypeOperation(operation));

EXTEND FORM operation
    PROPERTIES(o) namePricingPriceListTypeOperation, namePricingCalcPriceListTypeOperation
;

EXTEND DESIGN operation {
    createContainer {
        ADD PROPERTY(namePricingPriceListTypeOperation);
        ADD PROPERTY(namePricingCalcPriceListTypeOperation);
    }
}

@defineDocumentInterfaceOperation (pricing, Pricing, );
@defineDocumentOperationRolePrefix(userPricing, );

// Записываем тип цены по умолчанию из операции
calcRetailPriceListTypeUserPricing (pricing) <- pricingPriceListTypeOperation(operationUserPricing(pricing))
    WHEN CHANGED(operationUserPricing(pricing));
calcRetailCalcPriceListTypeUserPricing (pricing) <- pricingCalcPriceListTypeOperation(operationUserPricing(pricing))
    WHEN CHANGED(operationUserPricing(pricing));

EXTEND FORM userPricing
    PROPERTIES(p) nameOperationUserPricing
//    PROPERTIES (d) overLimitPriceUserPricingDetail, overPricingPriceUserPricingDetail, pricingPriceUserPricingDetail, minRetailPriceUserPricingDetail
;
EXTEND DESIGN userPricing{
    p.documentPrmGroup{
        ADD PROPERTY (nameOperationUserPricing) BEFORE PROPERTY(nameCurrencyUserPricing);
    }
}

EXTEND FORM pricings
    PROPERTIES(p) READONLY nameOperationPricing BEFORE nameCurrencyPricing
;

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS SystemLedgerPriceListType {
    supplierPricingPriceListType 'Поставщика (расценка)',
    retailPricingPriceListType 'Розничная (расценка)'
}
includeVATSystemLedgerPriceListType (priceListType) += WHEN priceListType == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;

batchLedgerPriceListTypeStock(type, stock) += WHEN type == SystemLedgerPriceListType.supplierPricingPriceListType AND isCompanyStock(stock)
                                              THEN explicitBatchLedgerStock(stock);
batchLedgerPriceListTypeStock(type, stock) += WHEN type == SystemLedgerPriceListType.retailPricingPriceListType AND isCompanyStock(stock)
                                              THEN explicitBatchLedgerStock(stock);

EXTEND CLASS PricingDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimePricingDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedPricingDetail(ledger);
skipPriceListLedger(ledger) += skipChangeLedgerPricingDetail(ledger);

skuPriceListLedger (ledger) += skuPricingDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionPricingDetail(ledger);

companyPriceListLedger (ledger) += supplierPricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(pricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(pricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN pricePricingDetail(ledger);
batchPriceListLedger(ledger)+= batchPricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPricePricingDetail(ledger);

//inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;
//pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += retailPricePricingDetail(ledger) WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;

inPriceListLedgerStock (ledger, stock) += departmentStorePricingDetail(ledger) == stock;

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userPricing, supplierPricingPriceListType, , sku, departmentStore);

// ------------------------------------- Загрузка в оборудование ------------------------------ //

@Machinery.implementPriceTransactionDocument(Pricing);
@defineDocumentMachineryPriceTransaction(pricing, sku, departmentStore);
@extendFormDocumentMachineryPriceTransaction(pricings, p, pricing, skipChangeLedgerPricing, machineryContainer);

// ------------------------------------- Автоматическое создание расценки для документа -------------------- //

//-- аггр.объект
META defineInvoicePricingAggregation(concrete, concreteClass, sign, captionPre, captionPost, stockProp, prefix)

    // Комиссия
    @defineDocumentInterfaceHeaderPricingCommittee(invoice, stockProp);

    // Кол-во расценено
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, pricing, ' (расценено)');

    // Кол-во, которое изменяет расцененное количество
    extraPricingQuantityUserInvoiceDetail = ABSTRACT NUMERIC[14,3] (UserInvoiceDetail) PERSISTENT;
    pricingQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail) (+) extraPricingQuantityUserInvoiceDetail(detail)
        WHEN CHANGED(quantityUserInvoiceDetail(detail)) OR CHANGED(extraPricingQuantityUserInvoiceDetail(detail));

    // Базовая цена
    overPricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    overPricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
    overPricingPriceInvoiceDetail (detail) += overPricingPriceUserInvoiceDetail(detail);

    pricingPriceUserInvoiceDetail (detail) = OVERRIDE priceUserInvoiceDetail(detail), overPricingPriceUserInvoiceDetail(detail) PERSISTENT;
    pricingPriceInvoiceDetail (detail) = OVERRIDE priceInvoiceDetail(detail), overPricingPriceInvoiceDetail(detail) PERSISTENT;

    // Надбавка
    @defineDocumentInterfaceDetailMarkupPrefix (invoice, retail, );

    // НДС
    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp, retail, ' розничный');
    // Не проставляется НДС, поскольку для прихода он равен НДС поставщика
    @deriveDocumentDetailValueVAT(userInvoice, retail);

    // Розничная
    @defineDocumentInterfaceDetailPricePrefix(invoice, retail, ' розничная');

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);

    // -- Суммы по строкам

    // Надбавка
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, retail);

    // НДС
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, retail, ' розничная');

    // Выходная
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, retail, ' розничная');

    // Расчет сумм обратным счетом
    @deriveDocumentDetailSumPrefix(userInvoice, retail, currency, pricingQuantity);
    @deriveDocumentDetailReverseVATSumPrefix(userInvoice, retail, retail);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, retail, retail, prefix);

    // -- Суммы по документу
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retail, ' розничная');

    // Создание акта расценки
    @defineDocumentInterfaceCreate (invoice, createPricing, 'Создать акт расценки');

    showCreatePricingInvoice (invoice) = stockProp###invoice(invoice) IS DepartmentStore AND NOT costLedgerDepartmentStore(stockProp###invoice(invoice));
    showPricingInvoice (invoice) = showCreatePricingInvoice (invoice) AND NOT createPricingInvoice(invoice);
    toShowPricingInvoice (invoice) = showCreatePricingInvoice (invoice) AND createPricingInvoice(invoice);

    backgroundRetailInvoice 'Цвет' (invoice) = RGB(224, 255, 255) IF invoice IS Invoice;
    EXTEND FORM userInvoice
        PROPERTIES(i) SHOWIF showCreatePricingInvoice(i) BACKGROUND backgroundRetailInvoice(i) createPricingUserInvoice
        PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) namePricingCommitteeUserInvoice,
                      retailSumUserInvoiceDetailUserInvoice
        PROPERTIES(d) BEFORE expiryDateUserInvoiceDetail(d) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
                      retailMarkupUserInvoiceDetail ON CHANGE changeRetailMarkupUserInvoiceDetail(d), retailMarkupSumUserInvoiceDetail, numberRetailVATUserInvoiceDetail,
                      valueRetailVATUserInvoiceDetail, retailVATSumUserInvoiceDetail,
                      retailPriceUserInvoiceDetail ON CHANGE changeRetailPriceUserInvoiceDetail(d),
                      retailSumUserInvoiceDetail
        PROPERTIES(d) pricingQuantityUserInvoiceDetail AFTER quantityUserInvoiceDetail SHOWIF toShowPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)

//        HINTTABLE LIST retailMarkupUserInvoiceDetail, valueRetailVATUserInvoiceDetail, retailPriceUserInvoiceDetail
    ;
    EXTEND DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreatePricing {
                caption = 'Расценка';
                ADD PROPERTY(createPricingUserInvoice);
                ADD PROPERTY(namePricingCommitteeUserInvoice);
            }
        }
    }
    EXTEND FORM invoices
        PROPERTIES(i) BACKGROUND backgroundRetailInvoice(i) createPricingInvoice READONLYIF isReadonly(), retailSumInvoiceDetailInvoice READONLY BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY BEFORE expiryDateInvoiceDetail(d) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
                      retailMarkupInvoiceDetail, retailMarkupSumInvoiceDetail, numberRetailVATInvoiceDetail,
                      valueRetailVATInvoiceDetail, retailVATSumInvoiceDetail,
                      retailPriceInvoiceDetail, retailSumInvoiceDetail
        PROPERTIES(d) READONLY BACKGROUND backgroundRetailInvoice(i) pricingQuantityInvoiceDetail AFTER quantityInvoiceDetail  SHOWIF toShowPricingInvoice(i)
    ;


    CLASS concreteClass###pricing captionPre###sign : Pricing;
    CLASS concreteClass###pricingPosted captionPost###sign : concreteClass###pricing, PostedObject;
    CLASS concreteClass###pricingDetail captionPre###sign : PricingDetail;

    @defineDocumentTables(concrete###pricing);

    needToPricingInvoiceDetail (invoiceDetail) = createPricingInvoiceDetail(invoiceDetail) AND isStockSkuInvoiceDetail(invoiceDetail) PERSISTENT;

    needToPricingInvoice (invoice)= GROUP SUM 1 IF needToPricingInvoiceDetail(invoiceDetail)
        BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    @defineDocumentAggregation(invoice, concrete###pricing, needToPricingInvoice);


    printPricingInvoice 'Акт расценки' (invoice) = printPricing(concrete###pricingInvoice(invoice)) IMAGE 'print.png' IN printGroup;
    EXTEND FORM invoices
        PROPERTIES(i) FORCE PANEL printPricingInvoice SHOWIF createPricingInvoice(i)
    ;
    EXTEND DESIGN invoices {printContainer { ADD i.printGroup{align=LEADING;};}}

    pricingPricingDetail(detail) += concrete###pricing###concrete###pricingDetail(detail);
    @defineDocumentDetailIndex(concrete###pricing);

    datePricing(pricing) += date###concrete###pricing(pricing);
    timePricing(pricing) += time###concrete###pricing(pricing);

    @defineDocumentAggregationStockPrefix(invoice, concrete###pricing, stockProp, 'Склад', , );
    departmentStorePricing(pricing) += stockProp###concrete###pricing(pricing) IF stockProp###concrete###pricing(pricing) IS DepartmentStore;
    dataDepartmentStorePricingDetail(pricingDetail) += data###stockProp###invoiceDetail(invoiceDetail###concrete###pricingDetail(pricingDetail))
                                                       IF data###stockProp###invoiceDetail(invoiceDetail###concrete###pricingDetail(pricingDetail)) IS DepartmentStore;

    @defineDocumentAggregationLegalEntityPrefix(invoice, concrete###pricing, supplier, 'Поставщик', , );
    supplierPricing(pricing) += supplier###concrete###pricing(pricing);

    @defineDocumentAggregationPosted(invoice, concrete###pricing);
    isPostedPricing(pricing) += isPosted###concrete###pricing(pricing);

    number###concrete###pricing 'Номер документа' (concrete###pricing) = numberInvoice(invoice###concrete###pricing(concrete###pricing));
    numberPricing(pricing) += number###concrete###pricing(pricing);

    series###concrete###pricing 'Серия документа' (concrete###pricing) = seriesInvoice(invoice###concrete###pricing(concrete###pricing));
    seriesPricing(pricing) += series###concrete###pricing(pricing);

    seriesNumber###concrete###pricing 'Серия/номер документа' (concrete###pricing) = seriesNumberInvoice(invoice###concrete###pricing(concrete###pricing));

    noteInvoice###concrete###pricing 'Примечание' (concrete###pricing) = noteInvoice(invoice###concrete###pricing(concrete###pricing));
    notePricing(pricing) += noteInvoice###concrete###pricing(pricing);

    currency###concrete###pricing  (concrete###pricing) = currencyInvoice(invoice###concrete###pricing(concrete###pricing));
    currencyPricing (pricing) += currency###concrete###pricing(pricing);

    pricingCommitteePricing(pricing) += pricingCommitteeInvoice(invoice###concrete###pricing(pricing));
//    operationPricing(pricing) += operationInvoice(invoice###concrete###pricing(pricing));

    @defineDocumentDescription(concrete###pricing, ###concrete###pricingDetail, seriesNumber###concrete###pricing, captionPre###sign);
    descriptionPricing (pricing) += description###concrete###pricing(pricing);

    @defineDocumentAggregationDetailSku(invoice, concrete###pricing, sku);
    skuPricingDetail(pricingDetail) +=  sku###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingQuantity, 'Кол-во (расценено)');
    quantityPricingDetail(pricingDetail) += pricingQuantity###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, prefix###price, 'Цена поставщика');
    pricePricingDetail(pricingDetail) += prefix###price###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkup, 'Надбавка');
    retailMarkupPricingDetail(pricingDetail) += retailMarkup###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVAT, 'НДС');
    retailVATPricingDetail(pricingDetail) += retailVAT###concrete###pricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, valueRetailVAT, 'НДС,%');
    valueRetailVATPricingDetail(pricingDetail) += valueRetailVAT###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailPrice, 'Розничная цена');
    retailPricePricingDetail(pricingDetail) += retailPrice###concrete###pricingDetail(pricingDetail);

    // -- Суммы по строкам

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, prefix###sum, 'Сумма поставщика');
    sumPricingDetail(pricingDetail) += prefix###sum###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkupSum, 'Сумма надбавки');
    retailMarkupSumPricingDetail(pricingDetail) += retailMarkupSum###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVATSum, 'Сумма НДС');
    retailVATSumPricingDetail(pricingDetail) += retailVATSum###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailSum, 'Сумма розничная');
    retailSumPricingDetail(pricingDetail) += retailSum###concrete###pricingDetail(pricingDetail);

END
//--  Связь накладной и расценки
META defineInvoicePricingRelation(sign, stockProp)

    invoiceDetailPricingDetail = ABSTRACT InvoiceDetail (PricingDetail) PERSISTENT;
    invoiceDetailUserPricingDetail = DATA InvoiceDetail (UserPricingDetail);
    invoiceDetailPricingDetail(pricingDetail) += invoiceDetailUserPricingDetail(pricingDetail);

    CONSTRAINT supplierPricingDetail(detail) != supplierInvoiceDetail(invoiceDetailUserPricingDetail(detail)) OR
               departmentStorePricingDetail(detail) != stockProp###invoiceDetail(invoiceDetailUserPricingDetail(detail)) OR
               skuUserPricingDetail(detail) != skuInvoiceDetail(invoiceDetailUserPricingDetail(detail))
        CHECKED BY invoiceDetailUserPricingDetail
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расценки должны соответствовать друг другу';

    descriptionIndexInvoiceDetailPricingDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailPricingDetail(detail));
    descriptionIndexInvoiceDetailUserPricingDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserPricingDetail(detail));

    quantityPricingDetailInvoicePricing (invoice, pricing) = GROUP SUM quantityPricingDetail(pricingDetail) BY invoiceInvoiceDetail(invoiceDetailPricingDetail(pricingDetail)), pricingPricingDetail(pricingDetail);

    invoicesPricing 'Накладные' (pricing) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityPricingDetailInvoicePricing(invoice, pricing) , ', '
                                                    BY pricing
                                                    ORDER invoice IN invoiceGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    pricingInvoiceDetail 'Кол-во (расценено)' (invoiceDetail) = GROUP SUM quantityPricingDetail(pricingDetail) IF isPostedPricingDetail(pricingDetail)
                                                                       BY invoiceDetailPricingDetail(pricingDetail) PERSISTENT;

    toPricingInvoiceDetail 'Не расценено' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) pricingInvoiceDetail(invoiceDetail);

    toPricingInvoiceDetailStockInvoice 'Не расценено по отделу' (stock, invoice) =
        GROUP SUM toPricingInvoiceDetail(invoiceDetail) IF toPricingInvoiceDetail(invoiceDetail) > 0
              BY stockProp###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    // Создание расценки на основе инвойса //

    FORM pricingInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity FIXED PANEL
        PROPERTIES (s) READONLY nameLegalEntity
        OBJECTS c = Stock FIXED PANEL
        PROPERTIES (c) READONLY nameStock

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice FORCE GRID, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice, nameCurrencyInvoice,
                                seriesNumberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice,
                                noteInvoice, objectClassName
        FILTERS supplierInvoice(i) == s,
                stockProp###invoice(i) == c,
                isPostedInvoice(i)
        FILTERGROUP invoice
            FILTER 'Накладные с нерасцененными товарами' 'F10' toPricingInvoiceDetailStockInvoice(c,i) DEFAULT
            FILTER 'Накладные со склада' 'F9' countInvoiceDetailStockInvoice(c,i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, pricingInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       name###stockProp###invoiceDetail, descriptionOrderInvoiceDetail, toPricingInvoiceDetail
        FILTERS invoiceInvoiceDetail(d) == i
        FILTERGROUP invoiceDetail
            FILTER 'Строки с нерасцененными товарами' 'F10' stockProp###invoiceDetail(d) == c AND toPricingInvoiceDetail(d) > 0 DEFAULT
            FILTER 'Строки со склада' 'F9' stockProp###invoiceDetail(d) == c

    ;

    DESIGN pricingInvoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                NEW headerBox {
                    childConstraints = TO THE RIGHT;
                    ADD s.box { caption = 'Поставщик';}
                    ADD c.box { caption = 'Склад';}
                }
                ADD i.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            PROPERTY(toPricingInvoiceDetail) { background = #FFFFCC; }
        }
    }

    fillInvoiceUserPricing 'Заполнить на основе накладной' =  ACTION (userPricing) {
        FORM pricingInvoices OBJECTS s = supplierUserPricing(userPricing), c = departmentStoreUserPricing(userPricing) MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL saleInvoice = Invoice();
            ASSIGN saleInvoice() <- chosenObject('i');

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND
                stockProp###invoiceDetail(invoiceDetail) == departmentStoreUserPricing(userPricing) AND
                toPricingInvoiceDetail(invoiceDetail) > 0
                ADDOBJ d = UserPricingDetail DO {
                ASSIGN userPricingUserPricingDetail(d) <- userPricing;
                ASSIGN invoiceDetailUserPricingDetail(d) <- invoiceDetail;

                ASSIGN skuUserPricingDetail(d) <- skuInvoiceDetail(invoiceDetail);
                ASSIGN quantityUserPricingDetail (d) <- toPricingInvoiceDetail(invoiceDetail);
                ASSIGN priceUserPricingDetail (d) <- priceInvoiceDetail(invoiceDetail);

                ASSIGN retailVATUserPricingDetail(d) <- VATInvoiceDetail(invoiceDetail);
                ASSIGN valueRetailVATUserPricingDetail(d) <- valueVATInvoiceDetail(invoiceDetail);
                ASSIGN batchUserPricingDetail(d) <- batchInvoiceDetail(invoiceDetail);
            }
        }
    } IN invoiceGroup;

    EXTEND FORM userPricing
        PROPERTIES(p) fillInvoiceUserPricing, invoicesPricing READONLY
        PROPERTIES(d) descriptionIndexInvoiceDetailUserPricingDetail BEFORE deletepd
    ;
    EXTEND DESIGN userPricing { params { ADD p.invoiceGroup; } }

    EXTEND FORM pricings
        PROPERTIES(p) READONLY invoicesPricing, descriptionDocumentPricing
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetailPricingDetail
    ;

    EXTEND FORM userInvoice
            PROPERTIES(d) READONLY pricingInvoiceDetail AFTER quantityUserInvoiceDetail SHOWIF showPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
    ;
    EXTEND FORM invoices
            PROPERTIES(d) READONLY BACKGROUND backgroundRetailInvoice(i) pricingInvoiceDetail AFTER quantityInvoiceDetail  SHOWIF showPricingInvoice(i)
    ;
    EXTEND FORM pricingInvoices
        PROPERTIES(i) READONLY createPricingInvoice, retailSumInvoiceDetailInvoice BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY BEFORE name###stockProp###invoiceDetail(d) SHOWIF createPricingInvoice(i)
                      retailMarkupInvoiceDetail, retailMarkupSumInvoiceDetail, numberRetailVATInvoiceDetail,
                      valueRetailVATInvoiceDetail, retailVATSumInvoiceDetail,
                      retailPriceInvoiceDetail, retailSumInvoiceDetail
    ;

    invoiceDetailPricingDetail(pricingDetail) += invoiceDetailInvoicePricingDetail(pricingDetail);
    descriptionDocumentPricing(pricing) += VARSTRING[255](invoicesPricing(pricing));
END
