MODULE Pricing;

REQUIRE EmployeeStock, PriceRoundStore, PricingOperation, PriceListCalc, PriceListLedger, StockTax, StockMovement;

// ----------------------------------- Создавать акт расценки по умолчанию для отдела ------------------------------------------ //

costLedgerDepartmentStore 'Учет по себестоимости' = DATA BOOLEAN (DepartmentStore) IN bookkeeping;
EXTEND FORM departmentStore PROPERTIES(d) costLedgerDepartmentStore SHOWIF isCompanyStock(d);
DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY(costLedgerDepartmentStore(d));
    }
}

// ----------------------------------- Комиссия ------------------------------------------ //

CLASS PricingCommittee 'Комиссия для акта расценки' : Committee;

namePricingCommittee 'Наименование' = DATA VARISTRING[150](PricingCommittee);

nameCommittee(committee) += namePricingCommittee(committee) IF committee IS PricingCommittee;


//@defineCommitteeEmployee(committee, chairman, 'Председатель');
@defineCommitteeEmployeePrefix(pricingCommittee, formedMan, 'Цены сформировал');
@defineCommitteeEmployeePrefix(pricingCommittee, checkedMan, 'Реестр проверил');
@defineCommitteeEmployeePrefix(pricingCommittee, labeledMan, 'Товар промаркировал');
@defineCommitteeEmployeePrefix(pricingCommittee, accountantMan, 'Бухгалтер');
@defineCommitteeEmployeePrefix(pricingCommittee, headMan, 'Зав. магазином');

// ----------------------------------- Комиссия по умолчанию для отдела ------------------------------------------ //

pricingCommitteeDepartmentStore 'Комиссия для акта расценки (ИД)' = DATA PricingCommittee (DepartmentStore);
namePricingCommitteeDepartmentStore 'Комиссия для акта расценки' (departmentStore) = namePricingCommittee(pricingCommitteeDepartmentStore(departmentStore)) IN committee MINCHARWIDTH 20 PREFCHARWIDTH 30;
isDefaultPricingCommitteeDepartmentStore 'По умолчанию' (pricingCommittee, departmentStore) = pricingCommitteeDepartmentStore(departmentStore) == pricingCommittee;
CONSTRAINT pricingCommitteeDepartmentStore(departmentStore) AND NOT inCommitteeStock(pricingCommitteeDepartmentStore(departmentStore), departmentStore)
    CHECKED BY pricingCommitteeDepartmentStore MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

EXTEND FORM departmentStore PROPERTIES namePricingCommitteeDepartmentStore(d);

DESIGN departmentStore {
    headerExtraParams{
        MOVE PROPERTY(namePricingCommitteeDepartmentStore(d));
    }
}

// ----------------------------------- Формы для комиссий для реестра цен ------------------------------------------ //

FORM pricingCommittee 'Комиссия для акта расценки'
    OBJECTS c=PricingCommittee FIXED PANEL
    PROPERTIES(c)      namePricingCommittee, nameFormedManPricingCommittee, nameCheckedManPricingCommittee,
                       nameLabeledManPricingCommittee, nameAccountantManPricingCommittee, nameHeadManPricingCommittee

    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s=Store
    PROPERTIES         READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st), nameStore(s)
    FILTERS            stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS dep=DepartmentStore
    PROPERTIES(dep)    READONLY depName = nameDepartmentStore, idDepartmentStore SHOWIF showIDs()
    PROPERTIES(c, dep) inCommitteeStock, isDefaultPricingCommitteeDepartmentStore
    FILTERS            inChainStoresStoreTypeStoreDepartmentStore(t, st, s, dep)
    ORDER BY depName

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' inCommitteeStock(c, dep) 'F9'

    EDIT PricingCommittee OBJECT c
;
@extendFormFilterStockAccess(dep, pricingCommittee);
@extendFormFilterStockGroupAccess(t, pricingCommittee);
@extendFormFilterStockGroupAccess(st, pricingCommittee);
@extendFormFilterStockGroupAccess(s, pricingCommittee);

DESIGN pricingCommittee {
    main {
        preferredSize = (1024, 768);

        NEW stocks AFTER c.box {
            fill = 1;
            type = SPLITH;

            MOVE treeStore.tree.box;
            MOVE dep.box {
                fill = 3;
            }
        }

        NEW managers AFTER stocks {
            caption = 'Состав комиссии';
            type = COLUMNS;
            columns = 3;
            MOVE PROPERTY (nameFormedManPricingCommittee(c));
            MOVE PROPERTY (nameCheckedManPricingCommittee(c));
            MOVE PROPERTY (nameLabeledManPricingCommittee(c));
            MOVE PROPERTY (nameAccountantManPricingCommittee(c));
            MOVE PROPERTY (nameHeadManPricingCommittee(c));
        }
    }
}

FORM pricingCommitteeDialog 'Комиссии для акта расценки'
    OBJECTS r=PricingCommittee
    PROPERTIES(r)      READONLY namePricingCommittee, nameStocksCommittee, nameFormedManPricingCommittee, nameCheckedManPricingCommittee, nameLabeledManPricingCommittee,
                       nameAccountantManPricingCommittee, nameHeadManPricingCommittee
    PROPERTIES(r)      ADDFORM, EDITFORM

    DIALOG PricingCommittee OBJECT r
;

// ----------------------------------- Макрос для задания комиссии для документов ------------------------------------------ //

GROUP pricingCommittee 'Комиссия' : public;

META defineDocumentHeaderPricingCommittee(object, stockClass, prefix)
    prefix###pricingCommittee###object (object) = DATA PricingCommittee(###object);

    name###prefix###pricingCommittee###object 'Комиссия' (object) = namePricingCommittee(prefix###pricingCommittee###object(object)) IN documentPrm MINCHARWIDTH 10 PREFCHARWIDTH 15;
    prefix###pricingCommittee###object (object) <- pricingCommitteeDepartmentStore(stockClass###object(object))
        WHEN CHANGED(stockClass###object(object));

    CONSTRAINT prefix###pricingCommittee###object (object) AND NOT inCommitteeStock(prefix###pricingCommittee###object(object), stockClass###object(object))
        CHECKED BY prefix###pricingCommittee###object MESSAGE 'Для документа выбрана комиссия, которая не действует для склада документа';
        
    data###prefix###formedMan###object 'Цены сформировал' (object) = DATA Employee (###object);
    data###prefix###checkedMan###object 'Реестр проверил' (object) = DATA Employee (###object);
    data###prefix###labeledMan###object 'Товар промаркировал' (object) = DATA Employee (###object);
    data###prefix###accountantMan###object 'Бухгалтер' (object) = DATA Employee (###object);
    data###prefix###headMan###object 'Зав. магазином' (object) = DATA Employee (###object);    
          
    CONSTRAINT data###prefix###formedMan###object(object) AND NOT inStockEmployee(stockClass###object(object), data###prefix###formedMan###object(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix###formedMan###object MESSAGE 'В качестве "Цены сформировал" выбран сотрудник, который не является сотрудником склада документа.';                  
    CONSTRAINT data###prefix###checkedMan###object(object) AND NOT inStockEmployee(stockClass###object(object), data###prefix###checkedMan###object(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix###checkedMan###object MESSAGE 'В качестве "Реестр проверил" выбран сотрудник, который не является сотрудником склада документа.';                        
    CONSTRAINT data###prefix###labeledMan###object(object) AND NOT inStockEmployee(stockClass###object(object), data###prefix###labeledMan###object(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix###labeledMan###object MESSAGE 'В качестве "Товар промаркировал" выбран сотрудник, который не является сотрудником склада документа.';                         
    CONSTRAINT data###prefix###accountantMan###object(object) AND NOT inStockEmployee(stockClass###object(object), data###prefix###accountantMan###object(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix###accountantMan###object MESSAGE 'В качестве "Бухгалтер" выбран сотрудник, который не является сотрудником склада документа.';                         
    CONSTRAINT data###prefix###headMan###object(object) AND NOT inStockEmployee(stockClass###object(object), data###prefix###headMan###object(object)) AND NOT allowStockEmployee()
        CHECKED BY data###prefix###headMan###object MESSAGE 'В качестве "Зав. магазином" выбран сотрудник, который не является сотрудником склада документа.'; 
    
    prefix###formedMan###object 'Цены сформировал' (object) = OVERRIDE formedManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###FormedMan###object(object);
    prefix###checkedMan###object 'Реестр проверил' (object) = OVERRIDE checkedManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###CheckedMan###object(object);
    prefix###labeledMan###object 'Товар промаркировал' (object) = OVERRIDE labeledManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###LabeledMan###object(object);
    prefix###accountantMan###object 'Бухгалтер' (object) = OVERRIDE accountantManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###AccountantMan###object(object);
    prefix###headMan###object 'Зав. магазином' (object) = OVERRIDE headManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###HeadMan###object(object);
    
    name###prefix###formedMan###object 'Сформировал' (object) = nameContact(prefix###formedMan###object(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix###checkedMan###object 'Проверил' (object) = nameContact(prefix###checkedMan###object(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix###labeledMan###object 'Промаркировал' (object) = nameContact(prefix###labeledMan###object(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix###accountantMan###object 'Бухгалтер' (object) = nameContact(prefix###accountantMan###object(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;
    name###prefix###headMan###object 'Зав.маг.' (object) = nameContact(prefix###headMan###object(object)) IN pricingCommittee MINCHARWIDTH 10 PREFCHARWIDTH 15;    
       
    positionName###prefix###formedMan###object 'Цены сформировал' (object) = positionNameEmployee(prefix###formedMan###object(object)) IN pricingCommittee;
    positionName###prefix###checkedMan###object 'Реестр проверил' (object) = positionNameEmployee(prefix###checkedMan###object(object)) IN pricingCommittee;
    positionName###prefix###labeledMan###object 'Товар промаркировал' (object) = positionNameEmployee(prefix###labeledMan###object(object)) IN pricingCommittee;
    positionName###prefix###accountantMan###object 'Бухгалтер' (object) = positionNameEmployee(prefix###accountantMan###object(object)) IN pricingCommittee;
    positionName###prefix###headMan###object 'Зав. магазином' (object) = positionNameEmployee(prefix###headMan###object(object)) IN pricingCommittee;        

    positionShortName###prefix###formedMan###object 'Цены сформировал' (object) = positionShortNameEmployee(prefix###formedMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###checkedMan###object 'Реестр проверил' (object) = positionShortNameEmployee(prefix###checkedMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###labeledMan###object 'Товар промаркировал' (object) = positionShortNameEmployee(prefix###labeledMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###accountantMan###object 'Бухгалтер' (object) = positionShortNameEmployee(prefix###accountantMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###headMan###object 'Зав. магазином' (object) = positionShortNameEmployee(prefix###headMan###object(object)) IN pricingCommittee;   
END
META defineDocumentHeaderAbstractPricingCommittee(object, stockClass, prefix)
    prefix###pricingCommittee###object (object) = ABSTRACT PricingCommittee(###object) PERSISTENT;

    name###prefix###pricingCommittee###object 'Комиссия для акта расценки' (object) = namePricingCommittee(prefix###pricingCommittee###object(object)) IN documentPrm MINCHARWIDTH 10 PREFCHARWIDTH 15;

    data###prefix###FormedMan###object 'Цены сформировал' (object) = ABSTRACT Employee (###object);
    data###prefix###CheckedMan###object 'Реестр проверил' (object) = ABSTRACT Employee (###object);
    data###prefix###LabeledMan###object 'Товар промаркировал' (object) = ABSTRACT Employee (###object);
    data###prefix###AccountantMan###object 'Бухгалтер' (object) = ABSTRACT Employee (###object);
    data###prefix###HeadMan###object 'Зав. магазином' (object) = ABSTRACT Employee (###object);    

    prefix###formedMan###object 'Цены сформировал' (object) = OVERRIDE formedManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###FormedMan###object(object);
    prefix###checkedMan###object 'Реестр проверил' (object) = OVERRIDE checkedManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###CheckedMan###object(object);
    prefix###labeledMan###object 'Товар промаркировал' (object) = OVERRIDE labeledManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###LabeledMan###object(object);
    prefix###accountantMan###object 'Бухгалтер' (object) = OVERRIDE accountantManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###AccountantMan###object(object);
    prefix###headMan###object 'Зав. магазином' (object) = OVERRIDE headManPricingCommittee(prefix###pricingCommittee###object(object)), data###prefix###HeadMan###object(object);
    
    name###prefix###formedMan###object 'Цены сформировал' (object) = nameContact(prefix###formedMan###object(object)) IN pricingCommittee;
    name###prefix###checkedMan###object 'Реестр проверил' (object) = nameContact(prefix###checkedMan###object(object)) IN pricingCommittee;
    name###prefix###labeledMan###object 'Товар промаркировал' (object) = nameContact(prefix###labeledMan###object(object)) IN pricingCommittee;
    name###prefix###accountantMan###object 'Бухгалтер' (object) = nameContact(prefix###accountantMan###object(object)) IN pricingCommittee;
    name###prefix###headMan###object 'Зав. магазином' (object) = nameContact(prefix###headMan###object(object)) IN pricingCommittee;    
       
    positionName###prefix###formedMan###object 'Цены сформировал' (object) = positionNameEmployee(prefix###formedMan###object(object)) IN pricingCommittee;
    positionName###prefix###checkedMan###object 'Реестр проверил' (object) = positionNameEmployee(prefix###checkedMan###object(object)) IN pricingCommittee;
    positionName###prefix###labeledMan###object 'Товар промаркировал' (object) = positionNameEmployee(prefix###labeledMan###object(object)) IN pricingCommittee;
    positionName###prefix###accountantMan###object 'Бухгалтер' (object) = positionNameEmployee(prefix###accountantMan###object(object)) IN pricingCommittee;
    positionName###prefix###headMan###object 'Зав. магазином' (object) = positionNameEmployee(prefix###headMan###object(object)) IN pricingCommittee;        

    positionShortName###prefix###formedMan###object 'Цены сформировал' (object) = positionShortNameEmployee(prefix###formedMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###checkedMan###object 'Реестр проверил' (object) = positionShortNameEmployee(prefix###checkedMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###labeledMan###object 'Товар промаркировал' (object) = positionShortNameEmployee(prefix###labeledMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###accountantMan###object 'Бухгалтер' (object) = positionShortNameEmployee(prefix###accountantMan###object(object)) IN pricingCommittee;
    positionShortName###prefix###headMan###object 'Зав. магазином' (object) = positionShortNameEmployee(prefix###headMan###object(object)) IN pricingCommittee; 
END

META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass, prefix)
    @defineDocumentHeaderAbstractPricingCommittee (object, stockClass, prefix);
    @defineDocumentHeaderPricingCommittee (user###object, stockClass, prefix);
    prefix###pricingCommittee###object (object) += prefix###pricingCommittee###user###object(object);
    
    data###prefix###FormedMan###object (object) += data###prefix###FormedMan###user###object(object);
    data###prefix###CheckedMan###object (object) += data###prefix###CheckedMan###user###object(object);
    data###prefix###LabeledMan###object(object) += data###prefix###LabeledMan###user###object(object);
    data###prefix###AccountantMan###object (object) += data###prefix###AccountantMan###user###object(object);
    data###prefix###HeadMan###object (object) += data###prefix###HeadMan###user###object(object);
    
END
META defineDocumentInterfaceHeaderPricingCommittee (object, stockClass)
    @defineDocumentInterfaceHeaderPricingCommittee (object, stockClass, );
END

//------------------------  derive or change ------------------------------------//

pricingBaseCalcPriceListType 'Считать розничную цену от базовой в расценке' = DATA BOOLEAN (CalcPriceListType);
pricingDocumentCalcPriceListType = p IS CalcPriceListType AND NOT pricingBaseCalcPriceListType(p) PERSISTENT;

EXTEND FORM calcPriceListType
    PROPERTIES(c) pricingBaseCalcPriceListType
;

META deriveDocumentDetailBatchOnSessionPriceListType (idetail, prefix, prefixP, stockProp, form, prefixTime)

    WHEN SESSION 
        (CHANGED(prefix###priceListType###idetail(detail)) OR
         CHANGED(prefixP###price###idetail(detail)) OR
         CHANGED(sku###idetail(detail)) OR
         CHANGED(stockProp###idetail(detail)) OR
        (CHANGED(prefixTime###dateTime###idetail(detail)) AND NOT isPosted###idetail(detail)) OR
         CHANGED(value###prefix###VAT###idetail(detail)))
        AND sku###idetail(detail) AND priceListType == prefix###priceListType###idetail(detail) AND roundCondition == roundConditionCalcPriceListTypeSku(priceListType, sku###idetail(detail))
        AND NOT CHANGED(prefix###price###idetail(detail))
        AND pricingDocumentCalcPriceListType(priceListType) NOINLINE (priceListType, roundCondition) INLINE DO {
            prefix###markup###idetail(detail) <- markupCalcPriceListTypeSku(priceListType, sku###idetail(detail))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
            prefix###price###idetail(detail) <- roundPriceRoundCondition([= X*(Y+100)*(Z+100)/10000](
                                                                    prefixP###price###idetail(detail),
                                                                    prefix###markup###idetail(detail),
                                                                    value###prefix###VAT###idetail(detail)), roundCondition)
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
        }
        
    WHEN SESSION
        (CHANGED(prefix###priceListType###idetail(detail)) OR
         CHANGED(prefixP###price###idetail(detail)) OR
         CHANGED(sku###idetail(detail)) OR
         CHANGED(stockProp###idetail(detail)) OR
        (CHANGED(prefixTime###dateTime###idetail(detail)) AND NOT isPosted###idetail(detail)) OR
         CHANGED(batch###idetail(detail)) OR
         CHANGED(value###prefix###VAT###idetail(detail)))
        AND NOT CHANGED(prefix###price###idetail(detail))
        AND sku###idetail(detail) AND priceListType == prefix###priceListType###idetail(detail) AND NOT pricingDocumentCalcPriceListType(priceListType) NOINLINE (priceListType) INLINE DO {

            prefix###price###idetail(detail) <- IF batch###idetail(detail) THEN
                                                            prevPriceBPriceListTypeBatchStockDateTime(priceListType,
                                                                                       batch###idetail(detail),
                                                                                       stockProp###idetail(detail),
                                                                                       prefixTime###dateTime###idetail(detail))
                                                   ELSE
                                                            prevPriceBPriceListTypeSkuStockDateTime(priceListType,
                                                                                       sku###idetail(detail),
                                                                                       stockProp###idetail(detail),
                                                                                       prefixTime###dateTime###idetail(detail))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
            prefix###markup###idetail(detail) <- [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                               prefix###price###idetail(detail),
                                                               prefixP###price###idetail(detail) IF prefixP###price###idetail(detail)!= 0.0,
                                                               value###prefix###VAT###idetail(detail))
                                                         WHERE prefix###priceListType###idetail(detail) == priceListType;
        }

    WHEN SESSION
        (CHANGED(prefixP###price###idetail(detail)) OR
         CHANGED(value###prefix###VAT###idetail(detail)))
        AND NOT prefix###priceListType###idetail(detail) INLINE DO {

            prefix###markup###idetail(detail) <- [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                               prefix###price###idetail(detail),
                                                               prefixP###price###idetail(detail) IF prefixP###price###idetail(detail)!= 0.0,
                                                               value###prefix###VAT###idetail(detail));
        }
END

META changeDocumentDetailMarkupCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    calc###prefixC###markup###detail(detail)  = [= round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
        prefixA###price###detail(detail),
        prefixB###price###detail(detail) IF prefixB###price###detail(detail) != 0.0,
        value###prefixD###VAT###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            prefixA###price###detail(detail) <- requestedNumeric();
            prefixC###markup###detail(detail) <- calc###prefixC###markup###detail(detail) WHERE calc###prefixC###markup###detail(detail);
        } ELSE {
            prefixA###price###detail(detail) <- NULL;
        }
    }
END

META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixCondition)

    calc###prefixA###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
        prefixB###price###detail(detail),
        prefixC###markup###detail(detail),
        value###prefixD###VAT###detail(detail))), prefixCondition###roundCondition###detail(detail));

    change###prefixC###markup###detail = ACTION (detail) {
        REQUEST NUMERIC[8,3] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixC###markup###detail(detail) <- requestedNumeric();
            ASSIGN prefixA###price###detail(detail) <- calc###prefixA###price###detail(detail) WHERE calc###prefixA###price###detail(detail);
        } ELSE {
            ASSIGN prefixC###markup###detail(detail) <- NULL;
        }
    }
END
META changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    @changeDocumentDetailPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, );
END

//-- С учетом предельных надбавок

META changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixCondition)
    calc###prefixA###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
        prefixB###price###detail(detail),
        prefixC###markup###detail(detail),
        value###prefixD###VAT###detail(detail))), prefixCondition###roundCondition###detail(detail));

    calcMin###prefixA###price###detail(detail)  = MIN calc###prefixA###price###detail(detail),
                                                      overLimitPrice###detail(detail);

    change###prefixC###markup###detail = ACTION (detail) {
        REQUEST NUMERIC[8,3] INPUT;

        IF requestedNumeric() THEN {
            SET prefixC###markup###detail(detail) <- requestedNumeric();
            SET prefixA###price###detail(detail) <- calc###prefixA###price###detail(detail) WHERE calcMin###prefixA###price###detail(detail);
        } ELSE {
            SET prefixC###markup###detail(detail) <- NULL;
        }
    }
END
META changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD)
    @changeDocumentDetailLimitPriceCustomPrefix(detail, prefixA, prefixB, prefixC, prefixD, );
END

//-- Для общего случая
META changeDocumentDetailMarkupPrefixInner(detail, prefixA, prefixB, prefixC, prefixD, prefixE, prefixF)
    calc###prefixB###markup###detail(detail)  = [= round2(((X/Z*100/(100+Y))-1)*100)](
        prefixC###price###detail(detail),
        prefixD###price###detail(detail) IF prefixD###price###detail(detail) != 0.0,
        value###prefixE###VAT###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            ASSIGN prefixA###price###detail(detail) <- requestedNumeric();
            ASSIGN prefixF###markup###detail(detail) <- calc###prefixB###markup###detail(detail) WHERE calc###prefixB###markup###detail(detail);
        } ELSE {
            ASSIGN prefixA###price###detail(detail) <- NULL;
        }
    }
END
//--

META changeDocumentDetailPricePrefix(detail, prefixA, prefixB, prefixC, prefixD, prefixE, prefixF)

    calc###prefixB###price###detail(detail)  = roundPriceRoundCondition(NUMERIC[14,2]([= X*(Y+100)*(Z+100)/10000](
        prefixD###price###detail(detail),
        prefixC###markup###detail(detail),
        value###prefixE###VAT###detail(detail))), roundCondition###detail(detail));

    change###prefixA###price###detail = ACTION (detail) {
        REQUEST NUMERIC[14,2] INPUT;

        IF requestedNumeric() THEN {
            prefixA###price###detail(detail) <- requestedNumeric();
            prefixF###price###detail(detail) <- calc###prefixB###price###detail(detail) WHERE calc###prefixB###price###detail(detail);
        } ELSE {
            prefixA###price###detail(detail) <- NULL;
        }
    }
END

//----------------------------------------------- Расценка ---------------------------------------------------//

CLASS ABSTRACT Pricing 'Акт расценки';
CLASS ABSTRACT PricingDetail 'Строка акта расценки';

CLASS UserPricing 'Акт расценки (польз.)' : Pricing;
CLASS UserPricingDetail 'Строка акта расценки (польз.)' : PricingDetail;

@defineDocumentInterface(pricing);
@deriveDocumentHeaderTimePrefix(UserPricing, );

@defineDocumentInterfaceNumber(pricing);
@defineNumeratedDefault(UserPricing, 'Расценки', 'РС');

@defineDocumentInterfaceDataStock(pricing, departmentStore, 'Склад');
@defineDocumentDialogStocks(userPricing, departmentStore, company, , );
@defineDocumentInterfacePosted(pricing);
@defineDocumentInterfaceClosed(pricing);
@defineDocumentClosedConstraint(UserPricing);

@defineDocumentInterfaceDescription(pricing, 'Акт расценки');

// Валюта
@defineDocumentInterfaceCurrency(pricing);
@deriveDocumentCurrency(userPricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(pricing, sku);

// Виды цен

@defineDocumentInterfaceHeaderPriceListType (pricing, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (pricing, pricingDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userPricing, userPricingDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentInterfaceHeaderPriceListType (pricing, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (pricing, pricingDetail, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userPricing, userPricingDetail, priceListType, calcRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (pricing, priceListType, retail, );

CONSTRAINT currencyUserPricing(pricing) != currencyPriceListType(calcRetailCalcPriceListTypeUserPricing(pricing))
           CHECKED BY calcRetailCalcPriceListTypeUserPricing
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';
CONSTRAINT currencyUserPricing(pricing) != currencyPriceListType(calcRetailPriceListTypeUserPricing(pricing))
           CHECKED BY calcRetailPriceListTypeUserPricing
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';

CONSTRAINT currencyUserPricingDetail(detail) != currencyPriceListType(retailPriceListTypeUserPricingDetail(detail))
           CHECKED BY retailPriceListTypeUserPricingDetail
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены';


// Округление
//roundConditionUserPricingDetail(userPricingDetail) =
//    IF roundConditionPriceListType(retailPriceListTypeUserPricingDetail(userPricingDetail))
//        THEN roundConditionPriceListType(retailPriceListTypeUserPricingDetail(userPricingDetail))
//        ELSE roundConditionDepartmentStore(departmentStoreUserPricingDetail(userPricingDetail));

overRoundConditionUserPricingDetail (d) = IF retailPriceListTypeUserPricingDetail(d) IS CalcPriceListType 
    THEN roundConditionCalcPriceListTypeSku(retailPriceListTypeUserPricingDetail(d), skuUserPricingDetail(d)) 
    ELSE roundConditionPriceListType(retailPriceListTypeUserPricingDetail(d));

roundConditionUserPricingDetail(d) =  IF overRoundConditionUserPricingDetail(d)
        THEN overRoundConditionUserPricingDetail(d)              
        ELSE roundConditionDepartmentStore(departmentStoreUserPricingDetail(d));
                       

// Поставщик
@defineDocumentInterfaceLegalEntity (pricing, supplier, 'Поставщик');
CONSTRAINT supplierUserPricing(userPricing) AND NOT isSellerLegalEntity(supplierUserPricing(userPricing))
    CHECKED BY supplierUserPricing MESSAGE 'Для акта расценки выбрано в качестве поставщика организация, не являющаяся поставщиком или компанией';

// Комиссия
@defineDocumentInterfaceHeaderPricingCommittee (pricing, departmentStore);

// Кол-во
@defineDocumentInterfaceDetailQuantity(pricing);

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(pricing, , ' поставщика');

overPricePricingDetail(pricingDetail) = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;

// Цена базовая (от которой будет считаться надбавка)
overPricingPricePricingDetail = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;
overPricingPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail) PERSISTENT;
overPricingPricePricingDetail (detail) += overPricingPriceUserPricingDetail(detail);

over1PricingPricePricingDetail = ABSTRACT NUMERIC[14,2] (PricingDetail) PERSISTENT;

pricingPriceUserPricingDetail (detail) = OVERRIDE priceUserPricingDetail(detail), overPricingPriceUserPricingDetail(detail) PERSISTENT;
pricingPricePricingDetail (detail) = OVERRIDE pricePricingDetail(detail), overPricingPricePricingDetail(detail), over1PricingPricePricingDetail(detail) PERSISTENT;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (pricing, retail, );

// НДС
@defineDocumentInterfaceDetailVAT(pricing, countryDepartmentStore, retail, );
@deriveDocumentDetailVAT(userPricing, retail);
@deriveDocumentDetailValueVAT(userPricing, retail);
extraRetailVATSumPricingDetail(pricingDetail) = ABSTRACT NUMERIC[16,2] (PricingDetail);

// Цена розничная
extraRetailPricePricingDetail(pricingDetail) = ABSTRACT NUMERIC[14,2] (PricingDetail);
extraRetailSumPricingDetail(pricingDetail) = ABSTRACT NUMERIC[16,2] (PricingDetail);

@defineDocumentInterfaceDetailPricePrefix(pricing, retail, ' розничная');

disallowLinePricings 'Запретить строки без розничной цены в актах расценки' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() disallowLinePricings
;

DESIGN options {
    pane {        
        NEW pricings {
            caption = 'Акты расценки';
            MOVE PROPERTY(disallowLinePricings());   
        }
    }
}

CONSTRAINT isPostedPricingDetail(d) AND disallowLinePricings() AND NOT retailPricePricingDetail(d) 
    MESSAGE 'Для строки акта расценки должна быть задана розничная цена'; 

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
overLimitPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail);
@changeDocumentDetailMarkupCustomPrefix(userPricingDetail, retail, pricing, retail, retail);
@changeDocumentDetailPriceCustomPrefix(userPricingDetail, retail, pricing, retail, retail);

// -- Суммы по строкам

@defineDocumentInterfaceDetailDataSumPrefix (pricing, , ' поставщика');
@defineDocumentInterfaceDetailMarkupSumPrefix (pricing, retail);
@defineDocumentInterfaceDetailVATDataSumPrefix (pricing, retail, ' розничная');
@defineDocumentInterfaceDetailDataSumPrefix (pricing, retail, ' розничная');

// Расчет сумм обратным счетом
@deriveDocumentDetailSumPrefix(userPricing, retail, currency, quantity);
@deriveDocumentDetailReverseVATSumPrefix(userPricing, retail, retail);
@deriveDocumentDetailMarkupSumPrefix(userPricing, retail, retail, );
@deriveDocumentDetailSum(userPricing, quantity);

// -- Суммы по акту

@defineDocumentInterfaceHeaderQuantity(pricing);

@defineDocumentHeaderSkuQuantity(pricing, sku);
@defineDocumentHeaderSkuQuantity(userPricing, sku);

@defineDocumentInterfaceHeaderSumCustom (pricing, pricingDetail, ' поставщика');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retailVAT, ' НДС');
@defineDocumentInterfaceHeaderSumPrefix (pricing, retail, ' розничная');

@defineDocumentInterfaceHeaderItemSum (pricing, retailMarkup, retailMarkup);  //-- сумма торговой надбавки (с разбивкой по таре, товару...)
@defineDocumentInterfaceHeaderItemSum (pricing, retailVAT, retailVAT);        //-- сумма розничного НДС (с разбивкой по таре, товару...)
@defineDocumentInterfaceHeaderItemSumDouble (pricing, range, retailVAT, retailVAT, , retailVAT); //-- сумма НДС розничного (с разбивкой по таре, товару...) по документу и по шкале
@defineDocumentInterfaceHeaderItemSum (pricing, , );                          //-- сумма поставщика (с разбивкой по таре, товару...)

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userPricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userPricing, sku);

// Не изменить текущие цены
@defineDocumentInterfaceHeaderSkip(Pricing, changeLedger, 'Не изменять текущие цены');
skipChangeLedgerPricingDetail 'Не изменять текущие цены' = ABSTRACT BOOLEAN(PricingDetail);

skipChangeLedgerUserPricingDetail 'Не изменять текущие цены' (d) = skipChangeLedgerUserPricing(userPricingUserPricingDetail(d)) IN documentPrm;
skipChangeLedgerPricingDetail (o) += skipChangeLedgerUserPricingDetail(o);

//@defineDocumentInterfaceHeaderSkip(PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    @defineDocumentAbstractHeaderSkip (PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerPricingDetail 'Не изменять текущие цены' = ABSTRACT BOOLEAN(PricingDetail);
//};
//    @defineDocumentHeaderSkip (UserPricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerUserPricingDetail 'Не изменять текущие цены' = DATA BOOLEAN(UserPricingDetail) IN documentPrm;
//};
//    skipChangeLedgerPricingDetail (o) += skipChangeLedgerUserPricingDetail(o);
//};

//@defineDocumentInterfaceDetailSkip(pricing, changeLedger, 'Не изменять текущие цены'){
//    @defineDocumentInterfaceDetailSkip(pricing, PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    @defineDocumentDetailSkip(pricing, PricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerPricingDetail 'Не изменять текущие цены' (d) = skipChangeLedgerPricing(pricingPricingDetail(d));
//};
//    @defineDocumentDetailSkip(userPricing, UserPricingDetail, changeLedger, 'Не изменять текущие цены'){
//    skipChangeLedgerUserPricingDetail 'Не изменять текущие цены' (d) = skipChangeLedgerUserPricing(userPricingUserPricingDetail(d));
//};
//};
//};

// Основание
descriptionDocumentPricing 'Документы-основания' = ABSTRACT VARSTRING[255] (Pricing) PERSISTENT;
extraDescriptionPricingDetail 'Доп. наименование'  = ABSTRACT VARSTRING[255] (PricingDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

// Возвраты
isReturnPricing 'Обратный' = ABSTRACT BOOLEAN (Pricing);

//-- Партии
@showDocumentInterfaceDetailBatch(pricing);
@defineDocumentInterfaceDetailBatch(pricing, batch);

changeBatchUserPricingDetail = ACTION (detail) {
    FORM dialogBatchStockOut OBJECTS st = departmentStoreUserPricingDetail(detail),
                             t = dateTimeUserPricingDetail(detail),
                             sk = skuUserPricingDetail(detail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserPricingDetail(detail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batchUserPricingDetail(detail) <- NULL;
    }

};

@defineBalancesBatch(pricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userPricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineMovementPriceSku(pricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userPricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

@defineBarcodeSku(pricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //

isInvoicePricing 'По накладной' = ABSTRACT BOOLEAN (Pricing);

FORM pricing 'Акт расценки (печать)'
    OBJECTS p=Pricing FIXED PANEL
    PROPERTIES (p) SELECTOR isPostedPricing

    PROPERTIES (p) nameDepartmentStorePricing, fullNameLegalEntityStockPricing,nameLegalEntityStockPricing, numberPricing, seriesNumberPricing, seriesPricing, datePricing, timePricing,
                   nameSupplierPricing, fullNameSupplierPricing, nameCurrencyPricing, notePricing,
                   countPricingDetailPricing, quantityPricingDetailPricing, sumPricingDetailPricing,
                   retailMarkupSumPricingDetailPricing, retailVATSumPricingDetailPricing,
                   retailSumPricingDetailPricing, namePricingCommitteePricing,
                   nameFormedManPricing, nameCheckedManPricing, nameLabeledManPricing, nameAccountantManPricing,
                   nameHeadManPricing, isInvoicePricing    //notPassToBookkeepingListRegister

    OBJECTS d=PricingDetail

    PROPERTIES (d) indexPricingDetail, idBarcodeSkuPricingDetail, nameSkuPricingDetail, extraDescriptionPricingDetail, shortNameUOMSkuPricingDetail,
                   quantityPricingDetail, overPricingPricePricingDetail, pricingPricePricingDetail, pricePricingDetail, sumPricingDetail,
                   retailMarkupPricingDetail, retailMarkupSumPricingDetail, numberRetailVATPricingDetail, valueRetailVATPricingDetail, retailVATSumPricingDetail,
                   retailPricePricingDetail, retailSumPricingDetail
    ORDER BY indexPricingDetail(d)                   

    FILTERS pricingPricingDetail(d) == p
;

printPricing 'Акт расценки' (pricing) = ACTION FORM pricing OBJECTS p = pricing PRINT  IMAGE 'print.png' IN print;

// --------------------------- Формы --------------------------------- //
editPricing 'Редактировать' = ABSTRACT ACTION LIST (Pricing) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

backgroundRetailPricing 'Цвет' (pricing) = RGB(224, 255, 255) IF pricing IS Pricing;
FORM userPricing 'Акт расценки'
    OBJECTS p = UserPricing FIXED PANEL
    PROPERTIES (p) isPostedUserPricing, nameDepartmentStoreUserPricing ON CHANGE changeDepartmentStoreCompanyUserPricing(p), nameNumeratorUserPricing, numberUserPricing, seriesUserPricing, dateUserPricing, timeUserPricing,
                   nameSupplierUserPricing, nameCurrencyUserPricing, noteUserPricing, nameCalcRetailPriceListTypeUserPricing, nameCalcRetailCalcPriceListTypeUserPricing,
                   countUserPricingDetailUserPricing, quantityUserPricingDetailUserPricing, sumUserPricingDetailUserPricing,
                   retailSumUserPricingDetailUserPricing BACKGROUND backgroundRetailPricing(p), namePricingCommitteeUserPricing BACKGROUND backgroundRetailPricing(p), skipChangeLedgerUserPricing
    PROPERTIES (p) SHOWIF pricingCommitteeUserPricing(p)  nameFormedManUserPricing, nameCheckedManUserPricing, nameLabeledManUserPricing,
                   nameAccountantManUserPricing, nameHeadManUserPricing

    OBJECTS d = UserPricingDetail
    PROPERTIES (d) indexUserPricingDetail, idBarcodeSkuUserPricingDetail, nameSkuUserPricingDetail, shortNameUOMSkuUserPricingDetail, nameBatchUserPricingDetail,
                   quantityUserPricingDetail, nameRetailPriceListTypeUserPricingDetail, priceUserPricingDetail, sumUserPricingDetail
    PROPERTIES (d) BACKGROUND backgroundRetailPricing(p)
                   retailMarkupUserPricingDetail ON CHANGE changeRetailMarkupUserPricingDetail(d), retailMarkupSumUserPricingDetail, numberRetailVATUserPricingDetail, valueRetailVATUserPricingDetail,
                   retailVATSumUserPricingDetail, retailPriceUserPricingDetail ON CHANGE changeRetailPriceUserPricingDetail(d), retailSumUserPricingDetail
    PROPERTIES (d) nameDepartmentStoreUserPricingDetail, ADDOBJ, deletepd=DELETESESSION
    ORDER BY indexUserPricingDetail(d)

    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserPricingDetailUserPricing,
                           addDetailInputBarcodeUserPricingDetailUserPricing, deleteUserPricingDetailUserPricing
    FILTERS userPricingUserPricingDetail(d) == p

    EVENTS
        ON OK prePostUserPricing(p)

    EDIT UserPricing OBJECT p
;

DESIGN userPricing {
    main {
        preferredSize = (1024, 768);

        NEW header {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;

//                ADD p.documentHeader {
//                    type = CONTAINERH;
//                    ADD PROPERTY(isPostedUserPricing) { preferredCharWidth = 10; }
//                    ADD PROPERTY(nameDepartmentStoreUserPricing);
//                    ADD PROPERTY(nameNumeratorUserPricing);
//                    ADD PROPERTY(numberUserPricing);
//                    ADD PROPERTY(seriesUserPricing);
//                    ADD PROPERTY(dateUserPricing);
//                    ADD PROPERTY(timeUserPricing);
//                }
                MOVE p.documentHeader {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPostedUserPricing(p));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameDepartmentStoreUserPricing(p));
                        MOVE PROPERTY(nameNumeratorUserPricing(p));
                        MOVE PROPERTY(numberUserPricing(p));
                        MOVE PROPERTY(seriesUserPricing(p));
                        MOVE PROPERTY(dateUserPricing(p));
                        MOVE PROPERTY(timeUserPricing(p));
                    }    
                } 
                NEW params {
                    MOVE p.documentPrm {
                        columns = 2;
                    }
                }
                MOVE p.pricingCommittee {
                    columns = 2;
                }
            }

            MOVE p.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserPricingDetailUserPricing(p)) { preferredCharWidth = 13;}
        PROPERTY(retailSumUserPricingDetailUserPricing(p)) { preferredCharWidth = 13;}
    }
}

@defineDocumentSkuPriceListTypeSystemLedger(userPricing, accountPriceListType, departmentStore, );
@extendFormDocumentSku(userPricing, userPricing, p);

@defineDocumentBatchPriceListTypeSystemLedger(userPricing, accountPriceListType, departmentStore, );
@extendFormDocumentBatch(userPricing, userPricing, p);

addUserPricing 'Добавить' = ACTION ADDFORM UserPricing;
editUserPricing 'Редактировать' (userPricing) = ACTION EDITFORM UserPricing;
editPricing(p) += ACTION editUserPricing(p);

isUserOpenedPricing(p)=  isOpenedPricing(p) AND isUserPricing(p);

editPricingDetail 'Редактировать' = ABSTRACT ACTION LIST (PricingDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserPricingDetail(d) = ACTION (d) NEWSESSION {
    FORM userPricing OBJECTS p = userPricingUserPricingDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}
editPricingDetail(d) += ACTION editUserPricingDetail(d);  

FORM pricings 'Акты расценки' 
    OBJECTS p = Pricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosedPricing, isPostedPricing, isReturnPricing, numberPricing, seriesPricing, datePricing, timePricing,
                            nameDepartmentStorePricing, nameSupplierPricing, nameCurrencyPricing, nameCalcRetailPriceListTypePricing, nameCalcRetailCalcPriceListTypePricing                              
    PROPERTIES (p) READONLY countPricingDetailPricing, quantityPricingDetailPricing, sumPricingDetailPricing,
                            retailSumPricingDetailPricing BACKGROUND backgroundRetailPricing(p)
    PROPERTIES (p) READONLYIF isReadonly() skipChangeLedgerPricing, notePricing

    PROPERTIES (p) READONLY FORCE PANEL createdNameUserUserPricing, createdTimeUserPricing, createdHostnameComputerUserPricing, 
                                        postedNameUserUserPricing, postedTimeUserPricing, postedHostnameComputerUserPricing

    PROPERTIES ()  addUserPricing TODRAW p
    PROPERTIES (p) editPricing SHOWIF isOpenedPricing(p)
    PROPERTIES(p)  closeUserPricing SHOWIF isOpenedUserPricing(p), openUserPricing SHOWIF isClosedUserPricing(p)     

    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpenedPricing(p)
    PROPERTIES (p) printPricing FORCE PANEL

    OBJECTS d = PricingDetail
    PROPERTIES (d) READONLY indexPricingDetail, idBarcodeSkuPricingDetail, nameSkuPricingDetail, shortNameUOMSkuPricingDetail, nameBatchPricingDetail,
                   quantityPricingDetail, nameRetailPriceListTypePricingDetail, pricePricingDetail, sumPricingDetail
    PROPERTIES (d) READONLY BACKGROUND backgroundRetailPricing(p) retailMarkupPricingDetail, retailMarkupSumPricingDetail, numberRetailVATPricingDetail, valueRetailVATPricingDetail, retailVATSumPricingDetail,
                   retailPricePricingDetail, retailSumPricingDetail
    PROPERTIES (d) READONLY nameDepartmentStorePricingDetail
    ORDER BY indexPricingDetail(d)

    FILTERS pricingPricingDetail(d) == p

    DIALOG Pricing OBJECT p
;
@extendFormFilterAccessStock(Pricing, p, pricings, departmentStore, company);
@extendFormFilterAccessLegalEntity(Pricing, p, pricings, supplier, supplier);

DESIGN pricings {
    NEW pane {
        fill = 1;
        type = SPLITV;

        MOVE p.box {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE p.print;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERV;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
            }
        }
    }
    MOVE functions.box;
}
@extendFormEditable(pricings);
@defineFilterIsOpened (pricing, pricings, p);

NAVIGATOR {
    retailNavigator {
        NEW pricingNavigator 'Учет в розничных ценах' {
            ADD pricings;
            ADD pricingCommitteeDialog;
            ADD operations;
        }
    }
}

WHEN SESSION FORMS userPricing // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcRetailPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(calcRetailCalcPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(skuUserPricingDetail(detail)) OR
    CHANGED(departmentStoreUserPricingDetail(detail)) OR
    CHANGED(dateTimeUserPricingDetail(detail))) AND pt == calcRetailPriceListTypeUserPricingDetail(detail) NOINLINE (pt) DO
   retailPriceListTypeUserPricingDetail(detail) <- IF prevPriceBPriceListTypeSkuStockDateTime(pt,
                                                                                          skuUserPricingDetail(detail),
                                                                                          departmentStoreUserPricingDetail(detail),
                                                                                          dateTimeUserPricingDetail(detail))
                                                            THEN pt
                                                            ELSE calcRetailCalcPriceListTypeUserPricingDetail(detail);

// если не задана управленческая цена
WHEN SESSION FORMS userPricing // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcRetailPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(calcRetailCalcPriceListTypeUserPricingDetail(detail)) OR
    CHANGED(skuUserPricingDetail(detail)) OR
    CHANGED(departmentStoreUserPricingDetail(detail)) OR
    CHANGED(dateTimeUserPricingDetail(detail))) AND NOT calcRetailPriceListTypeUserPricingDetail(detail) DO
    retailPriceListTypeUserPricingDetail(detail) <- calcRetailCalcPriceListTypeUserPricingDetail(detail);

// Проставление надбавки и розничной цены при изменении sku, склада, времени, вида цен, цены расценки, НДС в форме userPricing
//overLimitPriceUserPricingDetail = ABSTRACT NUMERIC[14,2] (UserPricingDetail);
//
//minRetailPriceUserPricingDetail 'Минимальная розничная цена' (detail)= MIN roundPriceRoundCondition([= X*(Y+100)*(Z+100)/10000](
//                                                                        pricingPriceUserPricingDetail(detail),
//                                                                        retailMarkupUserPricingDetail(detail),
//                                                                        valueRetailVATUserPricingDetail(detail)), roundConditionPriceListType(calcRetailCalcPriceListTypeUserPricingDetail(detail))),
//                                                                    overLimitPriceUserPricingDetail(detail);
//FORM userPricingDetail 'Строка расценки'
//    OBJECTS d = UserPricingDetail FIXED PANEL
//    PROPERTIES (d) minRetailPriceUserPricingDetail
//;
@deriveDocumentDetailBatchOnSessionPriceListType (userPricingDetail, retail, pricing, departmentStore, userPricing, );

//----------------------------------------------- Операции -----------------------------------------------------//

// Вид цены для расценки для операции
pricingPriceListTypeOperation = DATA PriceListType (Operation);
namePricingPriceListTypeOperation 'Вид цен акт расценки (управленческий)' (operation) = namePriceListType(pricingPriceListTypeOperation(operation));

pricingCalcPriceListTypeOperation = DATA CalcPriceListType (Operation);
namePricingCalcPriceListTypeOperation 'Вид цен акт расценки (надбавка)' (operation) = namePriceListType(pricingCalcPriceListTypeOperation(operation));

useSupplierStockOperation 'Использовать склад поставщика' = DATA BOOLEAN (Operation);
useShipmentQuantityOperation 'Расценивать поставленное кол-во' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) namePricingPriceListTypeOperation, namePricingCalcPriceListTypeOperation, useSupplierStockOperation, useShipmentQuantityOperation
;

DESIGN operation {
    createContainer {
        MOVE PROPERTY(namePricingPriceListTypeOperation(o));
        MOVE PROPERTY(namePricingCalcPriceListTypeOperation(o));
        MOVE PROPERTY(useSupplierStockOperation(o));
        MOVE PROPERTY(useShipmentQuantityOperation(o));
    }
}

@defineDocumentInterfaceOperation (pricing, Pricing, );
@extendFormFilterRoleAccess(pricing, p, pricings);
@defineDocumentOperationConstraint(pricing, 'акт расценки', Pricing);

@defineDocumentOperationRolePrefix(userPricing, );

// Записываем тип цены по умолчанию из операции
calcRetailPriceListTypeUserPricing (pricing) <- pricingPriceListTypeOperation(operationUserPricing(pricing))
    WHEN CHANGED(operationUserPricing(pricing));
calcRetailCalcPriceListTypeUserPricing (pricing) <- pricingCalcPriceListTypeOperation(operationUserPricing(pricing))
    WHEN CHANGED(operationUserPricing(pricing));

EXTEND FORM userPricing
    PROPERTIES(p) nameOperationUserPricing
//    PROPERTIES (d) overLimitPriceUserPricingDetail, overPricingPriceUserPricingDetail, pricingPriceUserPricingDetail, minRetailPriceUserPricingDetail
;
DESIGN userPricing{
    first{
        MOVE PROPERTY (nameOperationUserPricing(p)) {minimumCharWidth = 30; preferredCharWidth = 40;}
    }
}

EXTEND FORM pricings
    PROPERTIES(p) READONLY nameOperationPricing BEFORE nameCurrencyPricing(p)
;

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS SystemLedgerPriceListType {
    supplierPricingPriceListType 'Поставщика (расценка)',
    retailPricingPriceListType 'Розничная (расценка)'
}

supplierPricingPriceBSkuStockDateTime 'Цена поставщика' (sku, stock, dateTime) =
    priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, sku, stock, dateTime);
supplierPricingPriceBSkuStockDate 'Цена поставщика' (sku, stock, date) = 
    supplierPricingPriceBSkuStockDateTime(sku, stock, toDateTime(date));    
supplierPricingPriceBSkuStock 'Цена поставщика' = supplierPricingPriceBSkuStockDateTime(sku, stock, currentDateTime());  

supplierPricingPriceBBatchStockDateTime 'Цена поставщика' (batch, stock, dateTime) =
    priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, batch, stock, dateTime);
supplierPricingPriceBBatchStockDate 'Цена поставщика' (batch, stock, date) = 
    supplierPricingPriceBBatchStockDateTime(batch, stock, toDateTime(date));    

prevSupplierPricingPriceBSkuStockDateTime 'Цена поставщика' (sku, stock, dateTime) =
    prevPriceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.supplierPricingPriceListType, sku, stock, dateTime);
prevSupplierPricingPriceBSkuStockDate 'Цена поставщика' (sku, stock, date) = 
    prevSupplierPricingPriceBSkuStockDateTime(sku, stock, toDateTime(date));    

retailPricingPriceBSkuStockDateTime 'Розничная цена' (sku, stock, dateTime) =
    priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
retailPricingPriceBSkuStockDate 'Розничная цена' (sku, stock, date) = 
    retailPricingPriceBSkuStockDateTime(sku, stock, toDateTime(date));    
retailPricingPriceBSkuStock 'Розничная цена' = retailPricingPriceBSkuStockDateTime(sku, stock, currentDateTime());  

retailPricingPriceBBatchStockDateTime 'Розничная цена' (batch, stock, dateTime) =
    priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, batch, stock, dateTime);
retailPricingPriceBBatchStockDate 'Розничная цена' (batch, stock, date) = 
    retailPricingPriceBBatchStockDateTime(batch, stock, toDateTime(date));    

prevRetailPricingPriceBSkuStockDateTime 'Розничная цена' (sku, stock, dateTime) =
    prevPriceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
prevRetailPricingPriceBSkuStockDate 'Розничная цена' (sku, stock, date) = 
    prevRetailPricingPriceBSkuStockDateTime(sku, stock, toDateTime(date));    

retailPricingPriceASkuStockDateTime 'Розничная цена' (sku, stock, dateTime) =
    priceALedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
retailPricingPriceASkuStockDate 'Розничная цена' (sku, stock, date) = 
    retailPricingPriceASkuStockDateTime(sku, stock, toDateTime(date));    

currentRetailPricingPriceListLedgerSkuStock (sku, stock) =
    currentPriceListLedgerLedgerPriceListTypeSkuStock(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock) PERSISTENT TABLE extraSkuStock;

currentRetailPricingPriceSkuStock 'Розничная цена' (sku, stock) =
    pricePriceListLedgerLedgerPriceListType(currentRetailPricingPriceListLedgerSkuStock(sku, stock), SystemLedgerPriceListType.retailPricingPriceListType); 

retailPricingPriceASkuStock 'Розничная цена' (sk, st) = retailPricingPriceASkuStockDateTime(sk, st, currentDateTime());
retailPricingSumASkuStock 'Розничная сумма' (sku,stock)= retailPricingPriceASkuStock(sku,stock) * currentBalanceSkuStock(sku,stock);

retailPricingDescriptionASkuStockDateTime 'Описание' (sku, stock, dateTime) =
    descriptionALedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
retailPricingDescriptionASkuStockDate 'Описание' (sku, stock, date) = 
    retailPricingDescriptionASkuStockDateTime(sku, stock, toDateTime(date));    

currentRetailPricingDescriptionSkuStock 'Описание' (sku, stock) =
    descriptionPriceListLedger(currentRetailPricingPriceListLedgerSkuStock(sku, stock)); 

retailPricingDescriptionASkuStock 'Описание' (sk, st) = retailPricingDescriptionASkuStockDateTime(sk, st, currentDateTime()); 

retailPricingFromDateTimeASkuStockDateTime 'Дата/время с' (sku, stock, dateTime) =
    fromDateTimeALedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
    
retailPricingFromDateTimeASkuStock 'Дата/время с' (sk, st) = retailPricingFromDateTimeASkuStockDateTime(sk, st, currentDateTime());    

currentRetailPricingFromDateTimeSkuStock 'Дата/время с' (sku, stock) =
    fromDateTimePriceListLedger(currentRetailPricingPriceListLedgerSkuStock(sku, stock)); 

retailPricingPriceABatchStockDateTime 'Розничная цена' (batch, stock, dateTime) =
    priceALedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, batch, stock, dateTime);
retailPricingPriceABatchStockDate 'Розничная цена' (batch, stock, date) = 
    retailPricingPriceABatchStockDateTime(batch, stock, toDateTime(date));    

prevRetailPricingPriceASkuStockDateTime 'Розничная цена' (sku, stock, dateTime) =
    prevPriceALedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dateTime);
prevRetailPricingPriceASkuStockDate 'Розничная цена' (sku, stock, date) = 
    prevRetailPricingPriceASkuStockDateTime(sku, stock, toDateTime(date));    

includeVATSystemLedgerPriceListType (priceListType) += WHEN priceListType == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;

batchLedgerPriceListTypeStock(type, stock) += WHEN type == SystemLedgerPriceListType.supplierPricingPriceListType AND isCompanyStock(stock)
                                              THEN priceBatchLedgerStock(stock);
batchLedgerPriceListTypeStock(type, stock) += WHEN type == SystemLedgerPriceListType.retailPricingPriceListType AND isCompanyStock(stock)
                                              THEN priceBatchLedgerStock(stock);

EXTEND CLASS PricingDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimePricingDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedPricingDetail(ledger);
skipPriceListLedger(ledger) += skipChangeLedgerPricingDetail(ledger);

skuPriceListLedger (ledger) += skuPricingDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionPricingDetail(ledger);

companyPriceListLedger (ledger) += supplierPricingDetail(ledger);

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN pricePricingDetail(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN pricePricingDetail(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN pricePricingDetail(ledger);
inPriceListLedgerBatch (ledger, batch) += batchPricingDetail(ledger) == batch; 
differentOrganizationsLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType.supplierPricingPriceListType THEN TRUE;   

inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN retailPricePricingDetail(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN retailPricePricingDetail(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPricePricingDetail(ledger);

//inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;
//pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += retailPricePricingDetail(ledger) WHEN CLASS(retailPricePricingDetail(ledger)) AND type == SystemLedgerPriceListType.accountPriceListType;

inPriceListLedgerStock (ledger, stock) += departmentStorePricingDetail(ledger) == stock;

editPriceListLedger(d) += ACTION editPricingDetail(d);

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userPricing, supplierPricingPriceListType, , sku, departmentStore);

// ------ Расширяем форму остатков

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s, st) READONLY retailPricingPriceASkuStock, retailPricingSumASkuStock  
;