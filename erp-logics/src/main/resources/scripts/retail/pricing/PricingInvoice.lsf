MODULE PricingInvoice;

REQUIRE Pricing, Invoice;

NAMESPACE Pricing;

@defineDocumentAbstractHeaderProperty (invoice, createPricing, 'Создать акт расценки');

invoiceDetailPricingDetail = ABSTRACT InvoiceDetail (PricingDetail);

backgroundRetailInvoice 'Цвет' (invoice) = RGB(224, 255, 255) IF invoice IS Invoice;

@defineDocumentAbstractDetailMarkupCustomPrefix(invoiceDetail, retail, );
@defineDocumentAbstractDetailMarkupSumCustomPrefix (invoiceDetail, retail, );
@defineDocumentAbstractDetailVATCustom(invoiceDetail, retail, ' розничный');
@defineDocumentAbstractDetailVATDataSumCustomPrefix(invoiceDetail, retail, ' розничная');
@defineDocumentAbstractDetailPriceCustomPrefix(invoiceDetail, retail, ' розничная');
@defineDocumentAbstractDetailDataSumCustomPrefix(invoiceDetail, retail, ' розничная');
@defineDocumentAbstractDetailQuantityCustomPrefix(invoiceDetail, pricing, ' (расценено)');

retailSumInvoiceDetailInvoice 'Сумма розничная' (invoice) = GROUP SUM retailSumInvoiceDetail(idetail) BY invoiceInvoiceDetail(idetail) IN documentSum;

dateBanRetailPriceDepartmentStore 'Дата запрета приемки накладных без розничных цен'  = DATA DATE (DepartmentStore); 

EXTEND FORM departmentStore
    PROPERTIES (d) dateBanRetailPriceDepartmentStore 
;

DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY(dateBanRetailPriceDepartmentStore(d));   
    }
}

EXTEND FORM options

    TREE stockTreep ap = STRING[3], sgp = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(ap), sgTreeName = nameStockGroup(sgp)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(ap)

    OBJECTS ds = DepartmentStore
    PROPERTIES(ds) READONLY idDepartmentStore SHOWIF showIDs(), nameDepartmentStore, nameLegalEntityStock, dateBanRetailPriceDepartmentStore EDITABLE 
    ORDER BY nameDepartmentStore(ds)
    
    FILTERS isParentStockGroupStock(sgp, ds) OR (ds IS DepartmentStore AND NOT sgp),
            isCompanyStock(ds)
    FILTERGROUP inactiveStockp FILTER 'Активный' activeStock(ds) 'ctrl F10' DEFAULT     
    
;
DESIGN options {
    invoices {
        NEW topContainerp {
            type = SPLITH;
            fill = 1;            
            
            MOVE stockTreep.tree.box {
                caption = 'Группы складов';
            }
            MOVE ds.box {
                fill = 3;
                ds.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}



META defineInvoicePricingAggregation(concrete, concreteClass, sign, captionPre, captionPost, stockProp, prefix)

    // Комиссия
    @defineDocumentInterfaceHeaderPricingCommittee(invoice, stockProp###stock);

    // Кол-во расценено
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, pricing, ' (расценено)');

    // Кол-во, которое изменяет расцененное количество
    extraPricingQuantityUserInvoiceDetail = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail) PERSISTENT;
    overPricingQuantityUserInvoiceDetail = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail) PERSISTENT;
    overQuantityUserInvoiceDetail = OVERRIDE quantityUserInvoiceDetail(detail), overPricingQuantityUserInvoiceDetail(detail);
    pricingQuantityUserInvoiceDetail(detail) <- overQuantityUserInvoiceDetail(detail) (+) extraPricingQuantityUserInvoiceDetail(detail)
        WHEN CHANGED(overQuantityUserInvoiceDetail(detail)) OR CHANGED(extraPricingQuantityUserInvoiceDetail(detail));

    // Базовая цена
    overPricingPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    overPricingPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
    overPricingPriceInvoiceDetail (detail) += overPricingPriceUserInvoiceDetail(detail);

    pricingPriceUserInvoiceDetail 'Цена входная' (detail) = OVERRIDE priceUserInvoiceDetail(detail), overPricingPriceUserInvoiceDetail(detail) PERSISTENT;
    pricingPriceInvoiceDetail 'Цена входная' (detail) = OVERRIDE priceInvoiceDetail(detail), overPricingPriceInvoiceDetail(detail) PERSISTENT;

    // Надбавка
    @defineDocumentInterfaceDetailMarkupPrefix (invoice, retail, );

    // НДС
    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, retail, ' розничный');
    // Не проставляется НДС, поскольку для прихода он равен НДС поставщика
    @deriveDocumentDetailValueVAT(userInvoice, retail);

    // Розничная
    @defineDocumentInterfaceDetailPricePrefix(invoice, retail, ' розничная');
    extraRetailPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
    retailExtraPriceInvoiceDetail 'Цена (полная)' = retailPriceInvoiceDetail(d) + OVERRIDE 0, extraRetailPriceInvoiceDetail(d); 
    
    CONSTRAINT stockProp###stock###userInvoiceDetail(d) IS DepartmentStore AND dateUserInvoiceDetail(d) >= dateBanRetailPriceDepartmentStore(stockProp###stock###userInvoiceDetail(d)) AND isPostedUserInvoiceDetail(d) AND isItemSku(skuUserInvoiceDetail(d)) AND NOT retailPriceUserInvoiceDetail(d)
        MESSAGE 'Не задана розничная цена в строке накладной'##sign;

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);

    // -- Суммы по строкам

    // Надбавка
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, retail);

    // НДС
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, retail, ' розничная');
    extraRetailVATSumInvoiceDetail = ABSTRACT NUMERIC[16,2] (InvoiceDetail) PERSISTENT;
    // Выходная
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, retail, ' розничная');
    extraRetailSumInvoiceDetail = ABSTRACT NUMERIC[16,2] (InvoiceDetail) PERSISTENT;
    
    // Расчет сумм обратным счетом
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, retail, currency, pricingQuantity, priceRound);
    pricingSumUserInvoiceDetail = round(pricingQuantityUserInvoiceDetail(d) * priceUserInvoiceDetail(d), priceRoundUserInvoiceDetail(d));
    pricingSumInvoiceDetail = round(pricingQuantityInvoiceDetail(d) * priceInvoiceDetail(d), priceRoundInvoiceDetail(d));
    
    @deriveDocumentDetailReverseVATSumRoundPrefix(userInvoice, retail, retail, priceRound);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, retail, retail, pricing);

    // -- Суммы по документу
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retail, ' розничная');
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retailVAT, ' НДС розничная');
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retailMarkup, ' надбавки розничная');
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retailMarkup, retailMarkup, , retailVAT);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retailVAT, retailVAT, , retailVAT);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retail, retail, , retailVAT);
    @defineDocumentHeaderItemSumCustom(invoice, invoiceDetail, retail, retail);
    
    // Создание акта расценки
    @defineDocumentInterfaceProperty (invoice, createPricing, 'Создать акт расценки');
    Pricing.createPricingInvoice(i) += createPricingInvoice(i);
    Pricing.retailMarkupInvoiceDetail(d) += retailMarkupInvoiceDetail(d);
    Pricing.retailMarkupSumInvoiceDetail(d) += retailMarkupSumInvoiceDetail(d);
    Pricing.retailVATInvoiceDetail(d) += retailVATInvoiceDetail(d);
    Pricing.valueRetailVATInvoiceDetail(d) += valueRetailVATInvoiceDetail(d); 
    Pricing.retailVATSumInvoiceDetail(d) += retailVATSumInvoiceDetail(d);
    Pricing.retailPriceInvoiceDetail(d) += retailPriceInvoiceDetail(d);
    Pricing.retailSumInvoiceDetail(d) += retailSumInvoiceDetail(d);
    Pricing.pricingQuantityInvoiceDetail(d) += pricingQuantityInvoiceDetail(d);
       
    showCreatePricingInvoice (invoice) = stockProp###stock###invoice(invoice) IS DepartmentStore AND NOT costLedgerDepartmentStore(stockProp###stock###invoice(invoice));
    showPricingInvoice (invoice) = showCreatePricingInvoice (invoice) AND NOT createPricingInvoice(invoice);
    toShowPricingInvoice (invoice) = showCreatePricingInvoice (invoice) AND createPricingInvoice(invoice);
    
    //Расценка поставленного количества
    @defineDocumentInterfaceProperty (invoice, useShipmentQuantity, 'Расценивать поставленное кол-во'); 
          
    overPricingQuantityUserInvoiceDetail(detail) += (OVERRIDE 0.0 IF detail IS UserInvoiceDetail, shipmentQuantityUserInvoiceDetail(detail)) IF useShipmentQuantityUserInvoiceDetail(detail);
    
    backgroundRetailInvoice 'Цвет' (invoice) = RGB(224, 255, 255) IF invoice IS Invoice;
    EXTEND FORM userInvoice
        PROPERTIES(i) SHOWIF showCreatePricingInvoice(i) BACKGROUND backgroundRetailInvoice(i) createPricingUserInvoice
        PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) namePricingCommitteeUserInvoice,
                      retailSumUserInvoiceDetailUserInvoice
        PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i)
            nameFormedManUserInvoice, nameCheckedManUserInvoice, nameLabeledManUserInvoice, nameAccountantManUserInvoice, nameHeadManUserInvoice   
                      
        OBJECTS pd = UserInvoiceDetail FIXED GRID
        PROPERTIES (pd) SHOWIF createPricingInvoice(i) indexUserInvoiceDetail
        PROPERTIES (pd) SHOWIF createPricingInvoice(i) ON EDIT editSkuUserInvoiceDetail(pd) BACKGROUND backgroundSkuUserInvoiceDetail(pd) idBarcodeSkuUserInvoiceDetail, 
                        nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail
        PROPERTIES (pd) quantityUserInvoiceDetail SHOWIF createPricingInvoice(i), pricingQuantityUserInvoiceDetail SHOWIF toShowPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i), 
                        pricingPriceUserInvoiceDetail SHOWIF createPricingInvoice(i)              
                       
        PROPERTIES(pd) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
                      retailMarkupUserInvoiceDetail ON CHANGE changeRetailMarkupUserInvoiceDetail(pd), retailMarkupSumUserInvoiceDetail, numberRetailVATUserInvoiceDetail,
                      valueRetailVATUserInvoiceDetail, retailVATSumUserInvoiceDetail,
                      retailPriceUserInvoiceDetail ON CHANGE changeRetailPriceUserInvoiceDetail(pd),
                      retailSumUserInvoiceDetail
        PROPERTIES(pd) SHOWIF createPricingInvoice(i) deleteipd=DELETESESSION
        ORDER BY indexUserInvoiceDetail(pd)                      
        FILTERS userInvoiceUserInvoiceDetail(pd) == i             
    ;
    
    seekPricingUserInvoiceDetail (d) = ACTION {
        SEEK userInvoice.pd d;
    }

    EXTEND FORM userInvoice
        EVENTS
            ON CHANGE d seekPricingUserInvoiceDetail(d) 
    ;
    
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW createHeaderPricing {
                caption = 'Расценка';
                MOVE PROPERTY(createPricingUserInvoice(i));                
            }
        }
        PROPERTY(retailSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}   
        specification.box {
            NEW pricing {
                fill = 1;
                type = CONTAINERV;
                caption = 'Расценка';
                NEW headerCreatePricing {                    
                    type = COLUMNS;
                    columns = 4;                   
                    
                }
                MOVE pd.box;
                NEW bottomCreatePricing{  
                    caption = 'Комиссия для расценки';              
                    type = COLUMNS;
                    columns = 6;   
                    MOVE PROPERTY(namePricingCommitteeUserInvoice(i));                 
                    MOVE PROPERTY(nameFormedManUserInvoice(i));
                    MOVE PROPERTY(nameCheckedManUserInvoice(i));
                    MOVE PROPERTY(nameLabeledManUserInvoice(i));
                    MOVE PROPERTY(nameAccountantManUserInvoice(i));
                    MOVE PROPERTY(nameHeadManUserInvoice(i));
                }
            }
        }
    }
    EXTEND FORM invoices
        PROPERTIES(i) BACKGROUND backgroundRetailInvoice(i) retailSumInvoiceDetailInvoice READONLY BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY BEFORE expiryDateInvoiceDetail(d) SHOWIF createPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
                      retailMarkupInvoiceDetail, retailMarkupSumInvoiceDetail, numberRetailVATInvoiceDetail,
                      valueRetailVATInvoiceDetail, retailVATSumInvoiceDetail,
                      retailPriceInvoiceDetail, retailSumInvoiceDetail
        PROPERTIES(d) READONLY BACKGROUND backgroundRetailInvoice(i) pricingQuantityInvoiceDetail AFTER quantityInvoiceDetail(d)  SHOWIF toShowPricingInvoice(i)
    ;
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
        retailPriceUserInvoiceDetail(d) <- retailPriceUserInvoiceDetail(detail);          
        retailMarkupUserInvoiceDetail(d) <- retailMarkupUserInvoiceDetail(detail);            
    }  

    CLASS concreteClass###pricing captionPre###sign : Pricing;
    CLASS concreteClass###pricingDetail captionPre###sign : PricingDetail;

    @defineDocumentTables(concrete###pricing);

    needToPricingInvoiceDetail (invoiceDetail) = createPricingInvoiceDetail(invoiceDetail) AND isStockSkuInvoiceDetail(invoiceDetail) PERSISTENT;

    needToPricingInvoice (invoice)= GROUP SUM 1 IF needToPricingInvoiceDetail(invoiceDetail)
        BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    @defineDocumentAggregation(invoice, concrete###pricing, needToPricing);
    Pricing.invoiceDetailPricingDetail(detail) += invoiceDetail###concrete###pricingDetail(detail);

    printPricingInvoice 'Акт расценки' (invoice) = ACTION printPricing(concrete###pricingInvoice(invoice)) IMAGE 'print.png' IN print;
    EXTEND FORM invoices
        PROPERTIES(i) FORCE PANEL printPricingInvoice SHOWIF createPricingInvoice(i)
    ;
    DESIGN invoices { printTab { MOVE i.print { align=LEADING; } } }

    pricingPricingDetail(detail) += concrete###pricing###concrete###pricingDetail(detail);
    indexPricingDetail(detail) += index###concrete###pricingDetail(detail);
    
    @defineDocumentAggregationHeaderTimePrefix(invoice, invoicePricing, shipment);
    
    datePricing(pricing) += OVERRIDE date###concrete###pricing(pricing), shipmentDate###concrete###pricing(pricing);
    timePricing(pricing) += OVERRIDE time###concrete###pricing(pricing), shipmentTime###concrete###pricing(pricing);

    @defineDocumentAggregationStockPrefix(invoice, concrete###pricing, stockProp, 'Склад', , );
    departmentStorePricing(pricing) += stockProp###stock###concrete###pricing(pricing) AS DepartmentStore;
    dataDepartmentStorePricingDetail(pricingDetail) += data###stockProp###stock###invoiceDetail(invoiceDetail###concrete###pricingDetail(pricingDetail)) AS DepartmentStore;

    @defineDocumentAggregationLegalEntityPrefix(invoice, concrete###pricing, supplier, 'Поставщик', , );
    supplierPricing(pricing) += supplier###concrete###pricing(pricing);

    @defineDocumentAggregationPosted(invoice, concrete###pricing);
    isPostedPricing(pricing) += isPosted###concrete###pricing(pricing);
    
    @defineDocumentAggregationClosed(invoice, concrete###pricing);
    isClosedPricing(pricing) += isClosed###concrete###pricing(pricing); 
    isInvoicePricing(pricing) += TRUE IF invoice###concrete###pricing(pricing);    

    number###concrete###pricing 'Номер документа' (concrete###pricing) = numberInvoice(invoice###concrete###pricing(concrete###pricing));
    numberPricing(pricing) += number###concrete###pricing(pricing);

    series###concrete###pricing 'Серия документа' (concrete###pricing) = seriesInvoice(invoice###concrete###pricing(concrete###pricing));
    seriesPricing(pricing) += series###concrete###pricing(pricing);

    seriesNumber###concrete###pricing 'Серия/номер документа' (concrete###pricing) = seriesNumberInvoice(invoice###concrete###pricing(concrete###pricing));

    noteInvoice###concrete###pricing 'Примечание' (concrete###pricing) = noteInvoice(invoice###concrete###pricing(concrete###pricing));
    notePricing(pricing) += noteInvoice###concrete###pricing(pricing);

    currency###concrete###pricing  (concrete###pricing) = currencyInvoice(invoice###concrete###pricing(concrete###pricing));
    currencyPricing (pricing) += currency###concrete###pricing(pricing);
    
    editPricing(pricing) += ACTION editInvoice(invoice###concrete###pricing(pricing));

    pricingCommitteePricing(pricing) += pricingCommitteeInvoice(invoice###concrete###pricing(pricing));
    dataFormedManPricing (pricing) += dataFormedManInvoice(invoice###concrete###pricing(pricing));
    dataCheckedManPricing (pricing) += dataCheckedManInvoice(invoice###concrete###pricing(pricing));
    dataLabeledManPricing (pricing) += dataLabeledManInvoice(invoice###concrete###pricing(pricing));
    dataAccountantManPricing (pricing) += dataAccountantManInvoice(invoice###concrete###pricing(pricing));
    dataHeadManPricing (pricing) += dataHeadManInvoice(invoice###concrete###pricing(pricing));             
//    operationPricing(pricing) += operationInvoice(invoice###concrete###pricing(pricing));

//    @defineDocumentDescription(concrete###pricing, ###concrete###pricingDetail, captionPre###sign);
    description###concrete###pricing 'Название документа' (o) =
        'Расценка № ' + seriesNumber###concrete###pricing(o) + ' от ' + (OVERRIDE date###concrete###pricing(o), shipmentDate###concrete###pricing(o)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
    descriptionPricing (pricing) += description###concrete###pricing(pricing);

    @defineDocumentAggregationDetailSku(invoice, concrete###pricing, sku);
    skuPricingDetail(pricingDetail) +=  sku###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingQuantity, 'Кол-во (расценено)');
    quantityPricingDetail(pricingDetail) += pricingQuantity###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, prefix###price, 'Цена поставщика');
    pricePricingDetail(pricingDetail) += OVERRIDE prefix###price###concrete###pricingDetail(pricingDetail), (overPricePricingDetail(pricingDetail) IF pricingDetail IS concreteClass###PricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkup, 'Надбавка');
    retailMarkupPricingDetail(pricingDetail) += retailMarkup###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVAT, 'НДС');
    retailVATPricingDetail(pricingDetail) += retailVAT###concrete###pricingDetail(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, valueRetailVAT, 'НДС,%');
    valueRetailVATPricingDetail(pricingDetail) += valueRetailVAT###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailPrice, 'Розничная цена');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailPrice, 'Розничная цена (доп.)');
    extraRetailPricePricingDetail(pricingDetail) += extraRetailPrice###concrete###pricingDetail(pricingDetail);
    retailPricePricingDetail(pricingDetail) += retailPrice###concrete###pricingDetail(pricingDetail) + OVERRIDE 0, extraRetailPrice###concrete###pricingDetail(pricingDetail);

    // -- Суммы по строкам

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingSum, 'Сумма поставщика');
    sumPricingDetail(pricingDetail) += NUMERIC[16,2](OVERRIDE pricingSum###concrete###pricingDetail(pricingDetail), 
            overPricePricingDetail(pricingDetail)*quantity###pricingDetail(pricingDetail) IF pricingDetail IS concreteClass###PricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkupSum, 'Сумма надбавки');
    retailMarkupSumPricingDetail(pricingDetail) += retailMarkupSum###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVATSum, 'Сумма НДС');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailVATSum, 'Сумма НДС (доп.)');
    extraRetailVATSumPricingDetail(pricingDetail) += extraRetailVATSum###concrete###pricingDetail(pricingDetail);
    retailVATSumPricingDetail(pricingDetail) += retailVATSum###concrete###pricingDetail(pricingDetail) (+) extraRetailVATSum###concrete###pricingDetail(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailSum, 'Сумма розничная');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailSum, 'Сумма розничная (доп.)');
    extraRetailSumPricingDetail(pricingDetail) += extraRetailSum###concrete###pricingDetail(pricingDetail);
    retailSumPricingDetail(pricingDetail) += retailSum###concrete###pricingDetail(pricingDetail) (+) extraRetailSum###concrete###pricingDetail(pricingDetail);

END
//--  Связь накладной и расценки
META defineInvoicePricingRelation(sign, stockProp)

    invoiceDetailPricingDetail = ABSTRACT InvoiceDetail (PricingDetail) PERSISTENT INDEXED;
    invoiceDetailUserPricingDetail = DATA InvoiceDetail (UserPricingDetail);
    invoiceDetailPricingDetail(pricingDetail) += invoiceDetailUserPricingDetail(pricingDetail);

    CONSTRAINT supplierPricingDetail(detail) != supplierInvoiceDetail(invoiceDetailUserPricingDetail(detail)) OR
               departmentStorePricingDetail(detail) != stockProp###invoiceDetail(invoiceDetailUserPricingDetail(detail)) OR
               skuUserPricingDetail(detail) != skuInvoiceDetail(invoiceDetailUserPricingDetail(detail))
        CHECKED BY invoiceDetailUserPricingDetail
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расценки должны соответствовать друг другу';

    descriptionIndexInvoiceDetailPricingDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailPricingDetail(detail));
    descriptionIndexInvoiceDetailUserPricingDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserPricingDetail(detail));

    quantityPricingDetailInvoicePricing (invoice, pricing) = GROUP SUM quantityPricingDetail(pricingDetail) BY invoiceInvoiceDetail(invoiceDetailPricingDetail(pricingDetail)), pricingPricingDetail(pricingDetail);

    invoicesPricing 'Накладные' (pricing) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityPricingDetailInvoicePricing(invoice, pricing) , ', '
                                                    BY pricing
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    pricingInvoiceDetail 'Кол-во (расценено)' (invoiceDetail) = GROUP SUM quantityPricingDetail(pricingDetail) IF isPostedPricingDetail(pricingDetail)
                                                                       BY invoiceDetailPricingDetail(pricingDetail) PERSISTENT;

    toPricingInvoiceDetail 'Не расценено' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) pricingInvoiceDetail(invoiceDetail);

    toPricingInvoiceDetailStockInvoice 'Не расценено по отделу' (stock, invoice) =
        GROUP SUM toPricingInvoiceDetail(invoiceDetail) IF toPricingInvoiceDetail(invoiceDetail) > 0
              BY stockProp###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    // Создание расценки на основе инвойса //

    FORM pricingInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity FIXED PANEL
        PROPERTIES (s) READONLY nameLegalEntity
        OBJECTS c = Stock FIXED PANEL
        PROPERTIES (c) READONLY nameStock

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice, nameCurrencyInvoice,
                                seriesNumberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice,
                                noteInvoice
        FILTERS supplierInvoice(i) == s,
                stockProp###invoice(i) == c,
                isPostedInvoice(i)
        FILTERGROUP invoice
            FILTER 'Накладные с нерасцененными товарами' toPricingInvoiceDetailStockInvoice(c,i) 'F10' DEFAULT
            FILTER 'Накладные со склада' countInvoiceDetailStockInvoice(c,i) 'F9'

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                       quantityInvoiceDetail, pricingInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       name###stockProp###invoiceDetail, descriptionOrderInvoiceDetail, toPricingInvoiceDetail
        FILTERS invoiceInvoiceDetail(d) == i
        FILTERGROUP invoiceDetail
            FILTER 'Строки с нерасцененными товарами' stockProp###invoiceDetail(d) == c AND toPricingInvoiceDetail(d) > 0 'F10' DEFAULT
            FILTER 'Строки со склада' stockProp###invoiceDetail(d) == c 'F9'

    ;

    DESIGN pricingInvoices {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {
                fill = 1;
                type = CONTAINERV;

                NEW headerBox {
                    type = CONTAINERH;
                    MOVE s.box { caption = 'Поставщик';}
                    MOVE c.box { caption = 'Склад';}
                }
                MOVE i.box;
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE d.box {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        fill = 1;
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }
            }
            PROPERTY(toPricingInvoiceDetail(d)) { background = #FFFFCC; }
        }
    }

    fillInvoiceUserPricing 'Заполнить на основе накладной' =  ACTION (userPricing) {
        FORM pricingInvoices OBJECTS s = supplierUserPricing(userPricing), c = departmentStoreUserPricing(userPricing) MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL saleInvoice = Invoice();
            ASSIGN saleInvoice() <- chosenObject('i');

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND
                stockProp###invoiceDetail(invoiceDetail) == departmentStoreUserPricing(userPricing) AND
                toPricingInvoiceDetail(invoiceDetail) > 0
                ADDOBJ d = UserPricingDetail DO {
                ASSIGN userPricingUserPricingDetail(d) <- userPricing;
                ASSIGN invoiceDetailUserPricingDetail(d) <- invoiceDetail;

                ASSIGN skuUserPricingDetail(d) <- skuInvoiceDetail(invoiceDetail);
                ASSIGN quantityUserPricingDetail (d) <- toPricingInvoiceDetail(invoiceDetail);
                ASSIGN priceUserPricingDetail (d) <- priceInvoiceDetail(invoiceDetail);

                ASSIGN retailVATUserPricingDetail(d) <- VATInvoiceDetail(invoiceDetail);
                ASSIGN valueRetailVATUserPricingDetail(d) <- valueVATInvoiceDetail(invoiceDetail);
                ASSIGN batchUserPricingDetail(d) <- batchInvoiceDetail(invoiceDetail);
            }
        }
    } IN invoice;

    EXTEND FORM userPricing
        PROPERTIES(p) fillInvoiceUserPricing, invoicesPricing READONLY
        PROPERTIES(d) descriptionIndexInvoiceDetailUserPricingDetail BEFORE deletepd
    ;
    DESIGN userPricing { params { MOVE p.invoice; } }

    EXTEND FORM pricings
        PROPERTIES(p) READONLY invoicesPricing, descriptionDocumentPricing
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetailPricingDetail
    ;

    EXTEND FORM userInvoice
            PROPERTIES(d) READONLY pricingInvoiceDetail AFTER quantityUserInvoiceDetail(d) SHOWIF showPricingInvoice(i) BACKGROUND backgroundRetailInvoice(i)
    ;
    EXTEND FORM invoices
            PROPERTIES(d) READONLY BACKGROUND backgroundRetailInvoice(i) pricingInvoiceDetail AFTER quantityInvoiceDetail(d)  SHOWIF showPricingInvoice(i)
    ;
    EXTEND FORM pricingInvoices
        PROPERTIES(i) READONLY createPricingInvoice, retailSumInvoiceDetailInvoice BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY BEFORE name###stockProp###invoiceDetail(d) SHOWIF createPricingInvoice(i)
                      retailMarkupInvoiceDetail, retailMarkupSumInvoiceDetail, numberRetailVATInvoiceDetail,
                      valueRetailVATInvoiceDetail, retailVATSumInvoiceDetail,
                      retailPriceInvoiceDetail, retailSumInvoiceDetail
    ;

    invoiceDetailPricingDetail(pricingDetail) += invoiceDetailInvoicePricingDetail(pricingDetail);
    descriptionDocumentPricing(pricing) += VARSTRING[255](invoicesPricing(pricing));
END
