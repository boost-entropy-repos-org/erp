MODULE PricingInvoice;

REQUIRE Pricing, Invoice;

NAMESPACE Pricing;

@defineDocumentAbstractHeaderProperty (invoice, createPricing, 'Создать акт расценки');

invoiceDetail = ABSTRACT InvoiceDetail (PricingDetail) PERSISTENT INDEXED;

backgroundRetail 'Цвет' (Invoice invoice) = RGB(224, 255, 255) IF invoice IS Invoice;

@defineDocumentAbstractDetailMarkupCustomPrefix(invoiceDetail, retail, );
@defineDocumentAbstractDetailMarkupSumCustomPrefix (invoiceDetail, retail, );
@defineDocumentAbstractDetailVATCustom(invoiceDetail, retail, ' розничный');
@defineDocumentAbstractDetailVATDataSumCustomPrefix(invoiceDetail, retail, ' розничная');
@defineDocumentAbstractDetailPriceCustomPrefix(invoiceDetail, retail, ' розничная');
@defineDocumentAbstractDetailDataSumCustomPrefix(invoiceDetail, retail, ' розничная');
@defineDocumentAbstractDetailQuantityCustomPrefix(invoiceDetail, pricing, ' (расценено)');

retailSumInvoiceDetail 'Сумма розничная' (invoice) = GROUP SUM retailSum(InvoiceDetail idetail) BY invoice(idetail) IN documentSum;

dateBanRetailPrice 'Дата запрета приемки накладных без розничных цен'  = DATA DATE (DepartmentStore); 

EXTEND FORM departmentStore
    PROPERTIES (d) dateBanRetailPrice 
;

DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY(dateBanRetailPrice(d));   
    }
}

EXTEND FORM options

    TREE stockTreep ap = STRING[3], sgp = StockGroup PARENT parent
    PROPERTIES READONLY VALUE(ap), sgTreeName = name(sgp)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(ap)

    OBJECTS ds = DepartmentStore
    PROPERTIES(ds) READONLY id SHOWIF showIDs(), name, nameLegalEntity[Stock], dateBanRetailPrice EDITABLE 
    ORDER BY name(ds)
    
    FILTERS isParent(sgp, ds) OR (ds IS DepartmentStore AND NOT sgp),
            isCompany(ds)
    FILTERGROUP inactiveStockp FILTER 'Активный' active(ds) 'ctrl F10' DEFAULT     
    
;
DESIGN options {
    invoices {
        NEW topContainerp {
            type = SPLITH;
            fill = 1;            
            
            MOVE stockTreep.tree.box {
                caption = 'Группы складов';
            }
            MOVE ds.box {
                fill = 3;
                ds.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}



META defineInvoicePricingAggregation(concrete, concreteClass, sign, captionPre, captionPost, stockProp, prefix)

    // Комиссия
    @defineDocumentInterfaceHeaderPricingCommittee(invoice, stockProp###stock);

    // Кол-во расценено
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, pricing, ' (расценено)');

    // Кол-во, которое изменяет расцененное количество
    extraPricingQuantity = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail);
    overPricingQuantity = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail) PERSISTENT;
    overQuantity = OVERRIDE quantity(User###concrete##Detail detail), overPricingQuantity(detail);
    pricingQuantity(User###concrete##Detail detail) <- overQuantity(detail) (+) extraPricingQuantity(detail)
        WHEN CHANGED(overQuantity(detail)) OR CHANGED(extraPricingQuantity(detail));

    // Базовая цена
    overPricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT;
    overPricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) PERSISTENT;
    overPricingPrice (User###concrete##Detail detail) += overPricingPrice(detail);
    
    extraPricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail);
    extraPricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail);
    extraPricingPrice (User###concrete##Detail detail) += extraPricingPrice(detail);    

    pricingPrice 'Цена входная' (User###concrete##Detail detail) = (OVERRIDE price(detail), overPricingPrice(detail)) (+) extraPricingPrice(detail) PERSISTENT;
    pricingPrice 'Цена входная' (###concrete##Detail detail) = (OVERRIDE price(detail), overPricingPrice(detail)) (+) extraPricingPrice(detail) PERSISTENT;

    // Надбавка
    @defineDocumentInterfaceDetailMarkupPrefix (invoice, retail, );

    // НДС
    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, retail, ' розничный');
    // Не проставляется НДС, поскольку для прихода он равен НДС поставщика
    @deriveDocumentDetailValueVAT(userInvoice, retail);

    // Розничная
    @defineDocumentInterfaceDetailPricePrefix(invoice, retail, ' розничная');
    extraRetailPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT;
    retailExtraPrice 'Цена (полная)' = retailPrice(###concrete##Detail d) + OVERRIDE 0, extraRetailPrice(d); 
    
    CONSTRAINT stockProp##Stock(User###concrete##Detail d) IS DepartmentStore AND date(d) >= dateBanRetailPrice(stockProp##Stock(d)) AND isPosted(d) AND isItem(sku(d)) AND NOT retailPrice(d)
        MESSAGE 'Не задана розничная цена в строке накладной'##sign;

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);

    // -- Суммы по строкам

    // Надбавка
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, retail);

    // НДС
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, retail, ' розничная');
    extraRetailVATSum = ABSTRACT NUMERIC[18,4] (InvoiceDetail) PERSISTENT;
    // Выходная
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, retail, ' розничная');
    extraRetailSum = ABSTRACT NUMERIC[18,4] (InvoiceDetail) PERSISTENT;
    
    // Расчет сумм обратным счетом
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, retail, currency, pricingQuantity, homePriceRound);
    pricingSum = Utils.round(pricingQuantity(User###concrete##Detail d) * pricingPrice(d), homePriceRound(d));
    pricingSum = Utils.round(pricingQuantity(###concrete##Detail d) * pricingPrice(d), homePriceRound(d));
    
    @deriveDocumentDetailReverseVATSumRoundPrefix(userInvoice, retail, retail, homePriceRound);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, retail, retail, pricing);

    // -- Суммы по документу
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retail, ' розничная');
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retailVAT, ' НДС розничная');
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retailMarkup, ' надбавки розничная');
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retailMarkup, retailMarkup, , retailVAT);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retailVAT, retailVAT, , retailVAT);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retail, retail, , retailVAT);
    @defineDocumentHeaderItemSumCustom(invoice, invoiceDetail, retail, retail);
    
    // Создание акта расценки
    @defineDocumentInterfaceProperty (invoice, createPricing, 'Создать акт расценки');
    createPricing[###concrete.###concrete](###concrete i) += createPricing(i);
    retailMarkup[###concrete.###concrete##Detail](###concrete##Detail d) += retailMarkup(d);
    retailMarkupSum[###concrete.###concrete##Detail](###concrete##Detail d) += retailMarkupSum(d);
    retailVAT[###concrete.###concrete##Detail](###concrete##Detail d) += retailVAT(d);
    valueRetailVAT[###concrete.###concrete##Detail](###concrete##Detail d) += valueRetailVAT(d); 
    retailVATSum[###concrete.###concrete##Detail](###concrete##Detail d) += retailVATSum(d);
    retailPrice[###concrete.###concrete##Detail](###concrete##Detail d) += retailPrice(d);
    retailSum[###concrete.###concrete##Detail](###concrete##Detail d) += retailSum(d);
    pricingQuantity[###concrete.###concrete##Detail](###concrete##Detail d) += pricingQuantity(d);
       
    showCreatePricing (###concrete invoice) = stockProp##Stock(invoice) IS DepartmentStore AND NOT costLedger(stockProp##Stock(invoice));
    showPricing (###concrete invoice) = showCreatePricing (invoice) AND NOT createPricing(invoice);
    toShowPricing (###concrete invoice) = showCreatePricing (invoice) AND createPricing(invoice);
    
    //Расценка поставленного количества
    @defineDocumentInterfaceProperty (invoice, useShipmentQuantity, 'Расценивать поставленное кол-во'); 
          
    overPricingQuantity(User###concrete##Detail detail) += (OVERRIDE 0.0 IF detail IS UserInvoiceDetail, shipmentQuantity(detail)) IF useShipmentQuantity(detail);
    
    backgroundRetail 'Цвет' (###concrete invoice) = RGB(224, 255, 255) IF invoice IS Invoice;
    EXTEND FORM userInvoice
        PROPERTIES(i) SHOWIF showCreatePricing(i) BACKGROUND backgroundRetail(i) createPricing
        PROPERTIES(i) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i) namePricingCommittee,
                      retailSumUser###concrete##Detail
        PROPERTIES(i) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
            nameFormedMan, nameCheckedMan, nameLabeledMan, nameAccountantMan, nameHeadMan   
                      
        OBJECTS pd = UserInvoiceDetail GRID
        PROPERTIES (pd) READONLY SHOWIF createPricing[###concrete](i) index
        PROPERTIES (pd) READONLY SHOWIF createPricing[###concrete](i)  BACKGROUND backgroundSku(pd) idBarcodeSku, 
                        idSku, nameSku, shortNameUOMSku //ON EDIT editSku(pd)
        PROPERTIES (pd) quantity SHOWIF createPricing[###concrete](i), pricingQuantity SHOWIF toShowPricing(i) BACKGROUND backgroundRetail(i), 
                        pricingPrice SHOWIF createPricing[###concrete](i)              
                       
        PROPERTIES(pd) SHOWIF createPricing[###concrete](i) BACKGROUND backgroundRetail(i)
                      retailMarkup ON CHANGE changeRetailMarkup(pd), retailMarkupSum, numberRetailVAT,
                      valueRetailVAT, retailVATSum,
                      retailPrice ON CHANGE changeRetailPrice(pd),
                      retailSum
//        PROPERTIES(pd) SHOWIF createPricing[###concrete](i) deleteipd=DELETESESSION TOOLBAR
        ORDER BY index(pd)                      
        FILTERS user###concrete(pd) == i             
    ;
    
    seekPricing (User###concrete##Detail d) = {
        SEEK userInvoice.pd = d;
    }

    EXTEND FORM userInvoice
        EVENTS
            ON CHANGE d seekPricing(d) 
    ;
    
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW createHeaderPricing {
                caption = 'Расценка';
                MOVE PROPERTY(createPricing(i));                
            }
        }
        PROPERTY(retailSumUser###concrete##Detail(i)) { preferredCharWidth = 13;}   
        specification.box {
            NEW pricing {
                fill = 1;
                type = CONTAINERV;
                caption = 'Расценка';
                NEW headerCreatePricing {                    
                    type = COLUMNS;
                    columns = 4;                   
                    
                }
                MOVE pd.box;
                NEW bottomCreatePricing{  
                    caption = 'Комиссия для расценки';              
                    type = COLUMNS;
                    columns = 6;   
                    MOVE PROPERTY(namePricingCommittee(i));                 
                    MOVE PROPERTY(nameFormedMan(i));
                    MOVE PROPERTY(nameCheckedMan(i));
                    MOVE PROPERTY(nameLabeledMan(i));
                    MOVE PROPERTY(nameAccountantMan(i));
                    MOVE PROPERTY(nameHeadMan(i));
                }
            }
        }
    }
    EXTEND FORM invoices
        PROPERTIES(i) BACKGROUND backgroundRetail(i) retailSum###concrete##Detail READONLY BEFORE orders(i)
        PROPERTIES(d) READONLY BEFORE expiryDate(d) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
                      retailMarkup, retailMarkupSum, numberRetailVAT,
                      valueRetailVAT, retailVATSum,
                      retailPrice, retailSum
        PROPERTIES(d) READONLY BACKGROUND backgroundRetail(i) pricingQuantity AFTER quantity(d)  SHOWIF toShowPricing(i)
    ;
    
    overCopy[User###concrete##Detail,User###concrete##Detail](User###concrete##Detail d, User###concrete##Detail detail) += {      
        retailPrice(d) <- retailPrice(detail);          
        retailMarkup(d) <- retailMarkup(detail);            
    }  

    CLASS concreteClass###pricing captionPre###sign : Pricing;
    CLASS concreteClass###pricingDetail captionPre###sign : PricingDetail;

    @defineDocumentTables(concrete###pricing);

    needToPricing (###concrete##Detail invoiceDetail) = createPricing(invoiceDetail) AND isStockSku(invoiceDetail) PERSISTENT;

    needToPricing (invoice)= GROUP SUM 1 IF needToPricing(###concrete##Detail invoiceDetail)
        BY concrete(invoiceDetail) PERSISTENT;

    @defineDocumentAggregation(invoice, concrete###pricing, needToPricing);
    Pricing.concrete##Detail(###concrete##PricingDetail detail) += concrete##Detail(detail);

    printPricing 'Акт расценки' (###concrete invoice) = { print(concrete##Pricing(invoice)); } IMAGE 'print.png' IN print;
    EXTEND FORM invoices
        PROPERTIES(i)  printPricing SHOWIF createPricing(i)
    ;
    DESIGN invoices { printTab { MOVE i.print { align=LEADING; } } }

    pricing(###concrete##PricingDetail detail) += concrete##Pricing(detail);
    index(###concrete##PricingDetail detail) += index(detail);
    
    pricingDate(###concrete invoice) = OVERRIDE date (invoice), shipmentDate(invoice);
    pricingTime(###concrete invoice) = OVERRIDE time (invoice), shipmentTime(invoice);
    pricingDateTime(###concrete invoice) = dateTimeToDateTime(pricingDate(invoice), pricingTime(invoice));
    
    pricingDate(User###concrete invoice) = OVERRIDE date (invoice), shipmentDate(invoice);
    pricingTime(User###concrete invoice) = OVERRIDE time (invoice), shipmentTime(invoice);
    pricingDateTime(User###concrete invoice) = dateTimeToDateTime(pricingDate(invoice), pricingTime(invoice));

    pricingDateTime(###concrete##Detail d) = pricingDateTime(concrete(d)) PERSISTENT;
    pricingDateTime(User###concrete##Detail d) = pricingDateTime(user###concrete(d)) PERSISTENT;
    
    date(###concrete##Pricing pricing) += pricingDate(concrete(pricing)) ;
    time(###concrete##Pricing pricing) += pricingTime(concrete(pricing));

    @defineDocumentAggregationStockPrefix(invoice, concrete###pricing, stockProp, 'Склад', , );
    departmentStore(###concrete##Pricing pricing) += stockProp##Stock(pricing) AS DepartmentStore;

    @defineDocumentAggregationLegalEntityPrefix(invoice, concrete###pricing, supplier, 'Поставщик', , );
    supplier(###concrete##Pricing pricing) += supplier(pricing);

    @defineDocumentAggregationPosted(invoice, concrete###pricing);
    isPosted(###concrete##Pricing pricing) += isPosted(pricing);
    
    @defineDocumentAggregationClosed(invoice, concrete###pricing);
    isClosed(###concrete##Pricing pricing) += isClosed(pricing); 
    is###concrete(###concrete##Pricing pricing) += TRUE IF concrete(pricing);    

    number 'Номер документа' (###concrete##Pricing concrete###pricing) = number(concrete(concrete###pricing));
    number(###concrete##Pricing pricing) += number(pricing);

    series 'Серия документа' (###concrete##Pricing concrete###pricing) = series(concrete(concrete###pricing));
    series(###concrete##Pricing pricing) += series(pricing);

    seriesNumber 'Серия/номер документа' (###concrete##Pricing concrete###pricing) = seriesNumber(concrete(concrete###pricing));

    note###concrete 'Примечание' (###concrete##Pricing concrete###pricing) = note(concrete(concrete###pricing));
    note(###concrete##Pricing pricing) += note###concrete(pricing);

    currency  (###concrete##Pricing concrete###pricing) = currency(concrete(concrete###pricing));
    currency (###concrete##Pricing pricing) += currency(pricing);
    
    edit(###concrete##Pricing pricing) += { edit(concrete(pricing)); }

    pricingCommittee(###concrete##Pricing pricing) += pricingCommittee(concrete(pricing));
    dataFormedMan (###concrete##Pricing pricing) += dataFormedMan(concrete(pricing));
    dataCheckedMan (###concrete##Pricing pricing) += dataCheckedMan(concrete(pricing));
    dataLabeledMan (###concrete##Pricing pricing) += dataLabeledMan(concrete(pricing));
    dataAccountantMan (###concrete##Pricing pricing) += dataAccountantMan(concrete(pricing));
    dataHeadMan (###concrete##Pricing pricing) += dataHeadMan(concrete(pricing));             
//    operationPricing(pricing) += operationInvoice(invoice###concrete###pricing(pricing));

//    @defineDocumentDescription(concrete###pricing, ###concrete###pricingDetail, captionPre###sign);
    description 'Название документа' (###concrete##Pricing o) =
        'Расценка № ' + seriesNumber(o) + ' от ' + pricingDate(concrete(o)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
    description (###concrete##Pricing pricing) += description(pricing);

    @defineDocumentAggregationDetailSku(invoice, concrete###pricing, sku);
    sku(###concrete##PricingDetail pricingDetail) +=  sku(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingQuantity, 'Кол-во (расценено)');
    quantity(###concrete##PricingDetail pricingDetail) += pricingQuantity(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, prefix###price, 'Цена поставщика');
    price(###concrete##PricingDetail pricingDetail) += NUMERIC[16,4](OVERRIDE prefix###price(pricingDetail), (overPrice(pricingDetail) IF pricingDetail IS concreteClass###PricingDetail));

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkup, 'Надбавка');
    retailMarkup(###concrete##PricingDetail pricingDetail) += retailMarkup(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVAT, 'НДС');
    retailVAT(###concrete##PricingDetail pricingDetail) += retailVAT(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, valueRetailVAT, 'НДС,%');
    valueRetailVAT(###concrete##PricingDetail pricingDetail) += valueRetailVAT(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailPrice, 'Розничная цена');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailPrice, 'Розничная цена (доп.)');
    extraRetailPrice(###concrete##PricingDetail pricingDetail) += extraRetailPrice(pricingDetail);
    retailPrice(###concrete##PricingDetail pricingDetail) += retailPrice(pricingDetail) + OVERRIDE 0, extraRetailPrice(pricingDetail);

    // -- Суммы по строкам

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingSum, 'Сумма поставщика');
    sum(###concrete##PricingDetail pricingDetail) += NUMERIC[18,4](OVERRIDE pricingSum(pricingDetail),
            round(overPrice(pricingDetail)*quantity(pricingDetail), homePriceRound(invoiceDetail(pricingDetail))) IF pricingDetail IS concreteClass###PricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkupSum, 'Сумма надбавки');
    retailMarkupSum(###concrete##PricingDetail pricingDetail) += retailMarkupSum(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVATSum, 'Сумма НДС');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailVATSum, 'Сумма НДС (доп.)');
    extraRetailVATSum(###concrete##PricingDetail pricingDetail) += extraRetailVATSum(pricingDetail);
    retailVATSum(###concrete##PricingDetail pricingDetail) += retailVATSum(pricingDetail) (+) extraRetailVATSum(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailSum, 'Сумма розничная');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailSum, 'Сумма розничная (доп.)');
    extraRetailSum(###concrete##PricingDetail pricingDetail) += extraRetailSum(pricingDetail);
    retailSum(###concrete##PricingDetail pricingDetail) += retailSum(pricingDetail) (+) extraRetailSum(pricingDetail);

END
//--  Связь накладной и расценки
META defineInvoicePricingRelation(sign, stockProp)

    invoiceDetail = ABSTRACT InvoiceDetail (PricingDetail) PERSISTENT INDEXED;
    invoiceDetail = DATA InvoiceDetail (UserPricingDetail);
    invoiceDetail(UserPricingDetail pricingDetail) += invoiceDetail(pricingDetail);

    CONSTRAINT supplier[PricingDetail](UserPricingDetail detail) != supplier(invoiceDetail(detail)) OR
               departmentStore[PricingDetail](detail) != stockProp(invoiceDetail(detail)) OR
               sku(detail) != sku(invoiceDetail(detail))
        CHECKED BY invoiceDetail[UserPricingDetail]
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расценки должны соответствовать друг другу';

    descriptionIndexInvoiceDetail 'Строка накладной' (PricingDetail detail) = descriptionIndex(invoiceDetail(detail));
    descriptionIndexInvoiceDetail 'Строка накладной' (UserPricingDetail detail) = descriptionIndex(invoiceDetail(detail));

    quantityPricingDetail (invoice, pricing) = GROUP SUM quantity(PricingDetail pricingDetail) BY invoice(invoiceDetail(pricingDetail)), pricing(pricingDetail);

    invoices 'Накладные' (pricing) = GROUP CONCAT VARSTRING[255](description(Invoice invoice)) IF quantityPricingDetail(invoice, Pricing pricing) , ', '
                                                    BY pricing
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    pricing 'Кол-во (расценено)' (invoiceDetail) = GROUP SUM quantity(PricingDetail pricingDetail) IF isPosted(pricingDetail)
                                                                       BY invoiceDetail(pricingDetail) PERSISTENT;

    toPricing 'Не расценено' (InvoiceDetail invoiceDetail) = quantity (invoiceDetail) (-) pricing(invoiceDetail);

    toPricingInvoiceDetail 'Не расценено по отделу' (stock, invoice) =
        GROUP SUM toPricing(InvoiceDetail invoiceDetail) IF toPricing(invoiceDetail) > 0
              BY stockProp(invoiceDetail), invoice(invoiceDetail);

    // Создание расценки на основе инвойса //

    FORM pricingInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = Stock PANEL
        PROPERTIES (c) READONLY name

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, name###stockProp, nameCurrency,
                                seriesNumberContractSku, isCommission,
                                countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail, orders,
                                note
        FILTERS supplier(i) == s,
                stockProp(i) == c,
                isPosted(i)
        FILTERGROUP invoice
            FILTER 'Накладные с нерасцененными товарами' toPricingInvoiceDetail(c,i) 'F10' DEFAULT
            FILTER 'Накладные со склада' countInvoiceDetail(c,i) 'F9'

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                       quantity, pricing, price, sum,
                       name###stockProp, descriptionOrder, toPricing
        FILTERS invoice(d) == i
        FILTERGROUP invoiceDetail
            FILTER 'Строки с нерасцененными товарами' stockProp(d) == c AND toPricing(d) > 0 'F10' DEFAULT
            FILTER 'Строки со склада' stockProp(d) == c 'F9'

    ;

    DESIGN pricingInvoices {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {
                fill = 1;
                type = CONTAINERV;

                NEW headerBox {
                    type = CONTAINERH;
                    MOVE s.box { caption = 'Поставщик';}
                    MOVE c.box { caption = 'Склад';}
                }
                MOVE i.box;
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE d.box {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        fill = 1;
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }
            }
            PROPERTY(toPricing(d)) { background = #FFFFCC; }
        }
    }

    fillInvoice 'Заполнить на основе накладной'(UserPricing userPricing) =  {
        DIALOG pricingInvoices OBJECTS s = supplier(userPricing), c = departmentStore(userPricing), i INPUT DO {
            FOR invoice(InvoiceDetail invoiceDetail) == i AND
                stockProp(invoiceDetail) == departmentStore(userPricing) AND
                toPricing(invoiceDetail) > 0
                NEW d = UserPricingDetail DO {
                userPricing(d) <- userPricing;
                invoiceDetail(d) <- invoiceDetail;

                sku(d) <- sku(invoiceDetail);
                quantity (d) <- toPricing(invoiceDetail);
                price (d) <- price(invoiceDetail);

                retailVAT(d) <- VAT(invoiceDetail);
                valueRetailVAT(d) <- valueVAT(invoiceDetail);
                batch(d) <- batch(invoiceDetail);
            }
        }
    } IN invoice;

    EXTEND FORM userPricing
        PROPERTIES(p) fillInvoice, invoices READONLY
        PROPERTIES(d) descriptionIndexInvoiceDetail BEFORE deletepd
    ;
    DESIGN userPricing { params { MOVE p.invoice; } }

    EXTEND FORM pricings
        PROPERTIES(p) READONLY invoices, descriptionDocument
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetail
    ;

    EXTEND FORM userInvoice
            PROPERTIES(d) READONLY pricing AFTER quantity(d) SHOWIF showPricing(i) BACKGROUND backgroundRetail(i)
    ;
    EXTEND FORM invoices
            PROPERTIES(d) READONLY BACKGROUND backgroundRetail(i) pricing AFTER quantity(d)  SHOWIF showPricing(i)
    ;
    EXTEND FORM pricingInvoices
        PROPERTIES(i) READONLY createPricing, retailSumInvoiceDetail BEFORE orders(i)
        PROPERTIES(d) READONLY BEFORE name###stockProp(d) SHOWIF createPricing(i)
                      retailMarkup, retailMarkupSum, numberRetailVAT,
                      valueRetailVAT, retailVATSum,
                      retailPrice, retailSum
    ;

    invoiceDetail(InvoicePricingDetail pricingDetail) += invoiceDetail(pricingDetail);
    descriptionDocument(Pricing pricing) += VARSTRING[255](invoices(pricing));
END
