MODULE UpdatePriceDashboard;

REQUIRE Barcode, Pricing, Label, MachineryPriceTransaction;

NAMESPACE Pricing;

FORM priceLabelTransactionDetails 'Цена на ценниках' 
    
    OBJECTS s = Sku FIXED PANEL 
    PROPERTIES READONLY nameSku(s)
    OBJECTS st = Stock FIXED PANEL     
    
    OBJECTS d = LabelTransactionDetail FIXED GRID
    PROPERTIES READONLY dateLabelTransactionDetail(d), timeLabelTransactionDetail(d), nameLabelTypeLabelTransactionDetail(d), priceLabelTransactionDetail(d)
    ORDER BY dateLabelTransactionDetail(d), timeLabelTransactionDetail(d)
    FILTERS skuLabelTransactionDetail(d) == s,
            departmentStoreLabelTransactionDetail(d) == st
;
showPriceLabelTransactionDetailSkuStock 'Показать изменение цены' (sku, stock) = ACTION FORM priceLabelTransactionDetails OBJECTS s = sku, st = stock MODAL SHORTCUT priceLabelTransactionDetailSkuDepartmentStore;

FORM priceMachineryPriceTransactionBarcode 'Цена в оборудовании' 
    
    OBJECTS b = Barcode FIXED PANEL 
    PROPERTIES READONLY nameSkuBarcode(b)
    OBJECTS st = Stock FIXED PANEL     
    
    OBJECTS t= MachineryPriceTransaction FIXED GRID
    PROPERTIES READONLY dateMachineryPriceTransaction(t), timeMachineryPriceTransaction(t), nameGroupMachineryMachineryPriceTransaction(t), nameMachineryPriceTransactionBarcode(t,b), priceMachineryPriceTransactionBarcode(t,b)
    ORDER BY dateMachineryPriceTransaction(t), timeMachineryPriceTransaction(t)
    
    FILTERS stockGroupMachinery(groupMachineryMachineryPriceTransaction(t)) == st,
            inMachineryPriceTransactionBarcode(t,b),
            NOT canceledMachineryPriceTransaction(t)
;
showPriceMachineryPriceTransactionSkuStock 'Показать изменение цены' (sku, stock) = ACTION FORM priceMachineryPriceTransactionBarcode OBJECTS b = barcodeSku(sku), st = stock MODAL SHORTCUT transactionPriceSkuStock;

useCurrentPriceUpdatePriceDashboard 'Использовать текущие цены в обновлении цен' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() useCurrentPriceUpdatePriceDashboard
;

DESIGN options {
    pricings {
        MOVE PROPERTY(useCurrentPriceUpdatePriceDashboard());
    }
}

useCurrentPrice = DATA LOCAL BOOLEAN();
initUseCurrentPrice = ACTION() {
    useCurrentPrice() <- useCurrentPriceUpdatePriceDashboard();
}
updatePriceSkuStock 'Розничная цена' (sku, stock) = IF useCurrentPrice() THEN currentRetailPricingPriceSkuStock(sku, stock) ELSE retailPricingPriceASkuStock(sku, stock);   
updateDescriptionSkuStock 'Описание' (sku, stock) = IF useCurrentPrice() THEN currentRetailPricingDescriptionSkuStock(sku, stock) ELSE retailPricingDescriptionASkuStock(sku, stock);   
updateFromDateTimeSkuStock 'Дата/время с' (sku, stock) = IF useCurrentPrice() THEN currentRetailPricingFromDateTimeSkuStock(sku, stock) ELSE retailPricingFromDateTimeASkuStock(sku, stock);   

showMovementPriceSkuSkuStocks 'Показать изменение цены товара' (sku, stock) = ACTION (sku, stock)  {
    dialogPriceListTypeSkuStock(sku, stock) <- SystemLedgerPriceListType.retailPricingPriceListType;
    FORM movementPriceSkuStock OBJECTS s = sku, st = stock MODAL;
} SHORTCUT updatePriceSkuStock;

FORM updatePriceDashboard 'Обновление розничных цен'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES(d) nameDepartmentStore SELECTOR
    FILTERS isCompanyStock(d)
    
    TREE skuGroupTree sg=SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), nameSkuGroup(sg)
    ORDER BY orderSkuGroup(sg), nameSkuGroup(sg)
    FILTERGROUP sginactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT

    OBJECTS sk = Sku
    PROPERTIES(sk) selectSku
    PROPERTIES(sk) READONLY idBarcodeSku, idSku, nameSku, shortNameUOMSku
    PROPERTIES(sk, d) READONLY currentBalanceSkuStock, updateDescriptionSkuStock, updateFromDateTimeSkuStock, updatePriceSkuStock, 
                      priceLabelTransactionDetailSkuDepartmentStore,  transactionPriceSkuStock BACKGROUND backgroundLastTransactionSkuStock(sk, d)
    PROPERTIES(d) TODRAW sk printSelectedSkuLabelTransactionDepartmentStore, printSelectedSkuSnapshotLabelTransactionDepartmentStore, createSelectedSkuPriceTransactionDocumentStock
    FILTERS isParentSkuGroupSku(sg, sk),
            isItemSku(sk)
    ORDER BY nameSku(sk)
    FILTERGROUP inactive FILTER 'Активные' activeSku(sk) 'F5' DEFAULT
    FILTERGROUP diffPrice
        FILTER 'Ценники' updatePriceSkuStock(sk, d) AND NOT updatePriceSkuStock(sk, d) == priceLabelTransactionDetailSkuDepartmentStore(sk, d) 'F11' 
        FILTER 'Оборудование' updatePriceSkuStock(sk, d) AND barcodeSku(sk) AND NOT updatePriceSkuStock(sk, d) == transactionPriceSkuStock(sk, d) 'F10'
        FILTER 'Ценники и оборуд.' updatePriceSkuStock(sk, d) 
                                                            AND (NOT (updatePriceSkuStock(sk, d) == priceLabelTransactionDetailSkuDepartmentStore(sk, d)) OR 
                                                                 (barcodeSku(sk) AND NOT updatePriceSkuStock(sk, d) == transactionPriceSkuStock(sk, d))) 'F9' DEFAULT 
                                                                 
    FILTERGROUP error
        FILTER 'С ошибками' quantityMachineryPriceTransactionErrorMachineryPriceTransaction(lastTransactionBarcodeStock(barcodeSku(sk), d)) AND NOT
                                succeededMachineryPriceTransaction(lastTransactionBarcodeStock(barcodeSku(sk), d)) 'F6'                                                                  
                                                                 
    PROPERTIES() READONLY countSelectSkus SHOWIF countSelectSkus() TODRAW sk
    
    OBJECTS p = Machinery.PriceTransactionDocument
    PROPERTIES (p) READONLY isClosedPriceTransactionDocument, isPostedPriceTransactionDocument, dateTimePriceTransactionDocument, seriesPriceTransactionDocument, numberPriceTransactionDocument, descriptionPriceTransactionDocument, statusMachineryPriceTransactionDocument, statusLabelPriceTransactionDocument FORCE GRID
    PROPERTIES (p) SHOWIF showCreateMachineryPriceTransactionPriceTransactionDocument(p) createMachineryPriceTransactionPriceTransactionDocument, createSnapshotMachineryPriceTransactionPriceTransactionDocument
    PROPERTIES (p) SHOWIF  showPrintLabelTransactionPriceTransactionDocument(p) createLabelTransactionPriceTransactionDocument, createSnapshotLabelTransactionPriceTransactionDocument
    FILTERS d == stockPriceTransactionDocument(p)
    FILTERGROUP succeeded
        FILTER 'Ценники' NOT skipPriceTransactionDocument(p) AND NOT printedPriceTransactionDocument(p) 'F11'
        FILTER 'Оборудование' NOT succeededPriceTransactionDocument(p) AND NOT skipPriceTransactionDocument(p) 'F10'
        FILTER 'Ценники и оборуд.' (NOT succeededPriceTransactionDocument(p) AND NOT skipPriceTransactionDocument(p) ) OR 
                (NOT skipPriceTransactionDocument(p) AND NOT printedPriceTransactionDocument(p)) 'F9' DEFAULT
    FILTERGROUP opened
        FILTER 'Открыт' NOT isClosedPriceTransactionDocument(p) DEFAULT
    FILTERGROUP posted
        FILTER 'Проведен' NOT isDraftPriceTransactionDocument(p) DEFAULT
                                                                                     
    EVENTS
        ON INIT initUseCurrentPrice()
;

@extendFormFilterStockAccess(d, updatePriceDashboard);

DESIGN updatePriceDashboard {
    NEW header {
        type = CONTAINERH;
        MOVE d.box;
    }
    
    NEW pane{
        fill = 1;
        type = TABBED;
        NEW skuPane {
            caption = 'Товары';
            fill = 1;
            type = SPLITH;
            MOVE skuGroupTree.tree.box;
            MOVE sk.box {
                fill = 3;
            }
        }
        NEW docPane {
            caption = 'Документы';
            fill = 1;
            NEW docTop{
                fill = 9;
                MOVE p.box; 
            }
            NEW docBott{
                caption = 'Действия';
//                fill = 1;
                type =CONTAINERH;
                
                NEW machinery {                 
                    caption = 'Загрузки' ;
                    type = CONTAINERV;    
                            
                    MOVE PROPERTY (createMachineryPriceTransactionPriceTransactionDocument(p));
                    MOVE PROPERTY (createSnapshotMachineryPriceTransactionPriceTransactionDocument(p));
                }
                NEW label {
                    caption = 'Ценники' ;
                    type = CONTAINERV;
                    
                    MOVE PROPERTY (createLabelTransactionPriceTransactionDocument(p));
                    MOVE PROPERTY (createSnapshotLabelTransactionPriceTransactionDocument(p));
                }
            }
        }
    }
    MOVE functions.box;
}
filterSupplierDepartmentStore = DATA LOCAL LegalEntity (DepartmentStore);
nameFilterSupplierDepartmentStore 'Поставщик' (departmentStore) = nameLegalEntity(filterSupplierDepartmentStore(departmentStore));
filterSupplierDepartmentStoreSku (departmentStore, sku) = prevInSupplierSku(filterSupplierDepartmentStore(departmentStore), sku) OR
                                              (sku IS Sku AND NOT filterSupplierDepartmentStore(departmentStore));

EXTEND FORM updatePriceDashboard
    PROPERTIES nameFilterSupplierDepartmentStore(d) FORCE PANEL
    FILTERS    filterSupplierDepartmentStoreSku(d, sk)
;
DESIGN updatePriceDashboard {
    header {
        
        NEW header1 {
            type = CONTAINERH;
            caption = 'Фильтр';
            MOVE PROPERTY (nameFilterSupplierDepartmentStore(d));
        } 
    }    
}

NAVIGATOR { 
    purchaseDashboardNavigator {
        ADD updatePriceDashboard;
    }
}
