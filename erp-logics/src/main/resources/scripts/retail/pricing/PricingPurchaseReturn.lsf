MODULE PricingPurchaseReturn;

REQUIRE Pricing, PurchaseReturnInvoice, PurchaseReturnShipment, PricingPurchase, PriceListLedger;

NAMESPACE PurchaseReturn;

// ------------------------------------- Автоматическое создание расценки для документа -------------------- //

roundConditionUserInvoiceDetail(userInvoiceDetail) = roundConditionDepartmentStore(customerStockUserInvoiceDetail(userInvoiceDetail));
@defineInvoicePricingAggregation(invoice, Invoice, ' (закупка-возврат)', 'Акт расценки при возврате', 'Проведенный акт расценки при возврате', customer, );
batchPricingDetail(detail) += batchInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
editPricingDetail (d)+= ACTION editInvoiceDetail(invoiceDetailInvoicePricingDetail(d));


// Автоматическое проставление свойств
retailMarkupUserInvoiceDetail(userInvoiceDetail)  <- [= round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPriceUserInvoiceDetail(userInvoiceDetail),
    valueRetailVATUserInvoiceDetail(userInvoiceDetail),
    pricingPriceUserInvoiceDetail(userInvoiceDetail))
    WHEN CHANGED(retailPriceUserInvoiceDetail(userInvoiceDetail)) OR
         CHANGED(retailVATUserInvoiceDetail(userInvoiceDetail)) OR
         CHANGED(pricingPriceUserInvoiceDetail(userInvoiceDetail));

//@deriveDocumentDetailVAT(userInvoice, retail, date, sku, customerStock);

// Проставляем НДС розничный, равный НДС входному
WHEN SESSION CHANGED(VATUserInvoiceDetail(detail)) OR CHANGED(valueVATUserInvoiceDetail(detail)) DO {
    retailVATUserInvoiceDetail(detail) <- IF valueVATUserInvoiceDetail(detail) == 0 THEN
                                               VATSkuCountry (skuUserInvoiceDetail(detail), countryStock(supplierStockUserInvoiceDetail(detail)))
                                          ELSE VATUserInvoiceDetail(detail);
}

extraRetailPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail); 
WHEN SESSION (CHANGED(customerStockUserInvoiceDetail(detail)) OR
              CHANGED(dateTimeUserInvoiceDetail(detail)) OR
              CHANGED(batchUserInvoiceDetail(detail))) AND batchUserInvoiceDetail(detail) DO {
    retailPriceUserInvoiceDetail (detail)  <- prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType,
                                                                                                       batchUserInvoiceDetail(detail),
                                                                                                       customerStockUserInvoiceDetail(detail),
                                                                                                       dateTimeUserInvoiceDetail(detail)) (-) extraRetailPriceUserInvoiceDetail(detail);
}

WHEN SESSION (CHANGED(customerStockUserInvoiceDetail(detail)) OR
              CHANGED(dateTimeUserInvoiceDetail(detail)) OR
              DROPPED(batchUserInvoiceDetail(detail)) OR
              CHANGED(skuUserInvoiceDetail(detail))) AND NOT batchUserInvoiceDetail(detail) DO {
    retailPriceUserInvoiceDetail (detail)  <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.retailPricingPriceListType,
                                                                                      skuUserInvoiceDetail(detail),
                                                                                      customerStockUserInvoiceDetail(detail),
                                                                                      dateTimeUserInvoiceDetail(detail)) (-) extraRetailPriceUserInvoiceDetail(detail);
}

// Не изменять цену и является обратным
skipChangeLedgerPricingDetail(d) += d IS InvoicePricingDetail;
isReturnPricing(pricing) +=  pricing IS InvoicePricing;

// Автоматическое проставление галочки создания акта расценки
@deriveDocumentOperationProperty(UserInvoice, createPricing);
// Операция расценки
@defineDocumentInterfaceOperationPrefix (invoice, pricing, Pricing, ' ( расценка)');
pricingOperationUserInvoice (invoice) <- pricingOperationOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));
operationPricing(pricing) += pricingOperationInvoice(invoiceInvoicePricing(pricing));

// Добавляем операцию расценки на форму
EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricingUserInvoice(i) BACKGROUND backgroundRetailInvoice(i) namePricingOperationUserInvoice, 
                                                                                            useShipmentQuantityUserInvoice
;
DESIGN userInvoice {
    headerCreatePricing {
        MOVE PROPERTY(namePricingOperationUserInvoice(i)) BEFORE PROPERTY(namePricingCommitteeUserInvoice(i));
        MOVE PROPERTY(useShipmentQuantityUserInvoice(i)) AFTER PROPERTY(namePricingCommitteeUserInvoice(i));
    }
}

//Проставляем свойство расценки поставленного количества 
useShipmentQuantityUserInvoice (invoice) <- useShipmentQuantityOperation(pricingOperationOperation(operationUserInvoice(invoice)))
                                                        WHEN CHANGED(operationUserInvoice(invoice));
