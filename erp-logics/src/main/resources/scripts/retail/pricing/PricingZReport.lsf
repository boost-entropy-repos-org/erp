MODULE PricingZReport;

REQUIRE System,
        Utils,
        Stock,
        Store,
        ZReportStockDocument;

// документ скидок для товарного отчета
CLASS ZReportRepricing 'Скидка по продаже через кассы';
TABLE zReportRepricing (ZReportRepricing);

@defineAggregation(zReport, zReportRepricing, discountSumReceiptDetail);
@defineDocumentAggregationHeaderNumberCustom(zReport, zReportRepricing, zReport);
@defineDocumentAggregationHeaderTime(zReport, zReportRepricing);
@defineDocumentAggregationHeaderStock(zReport, zReportRepricing, departmentStore, , 'Отдел магазина');
@defineDocumentAggregationHeaderPosted(zReport, zReportRepricing);

numberCashRegisterZReportRepricing (zReportRepricing) = numberCashRegisterZReport(zReportZReportRepricing(zReportRepricing));

discountZReportRepricing (zReportRepricing) = discountSumReceiptDetailZReport(zReportZReportRepricing(zReportRepricing));

descriptionZReportRepricing (zReportRepricing) =
    VARSTRING[200]('Скидка по кассе ' + numberCashRegisterZReportRepricing(zReportRepricing) + ' отдела ' + nameDepartmentStoreZReportRepricing(zReportRepricing) + ' от ' + dateZReportRepricing(zReportRepricing));

@implementStockDocumentLedgerOut(ZReportRepricing, departmentStore);
typeStockDocumentLedger(l) += 'Скидка по кассе' IF l IS ZReportRepricing;
sumOutStockDocumentLedger (ledger) += discountZReportRepricing(ledger);
sumItemOutStockDocumentLedger (ledger) += discountZReportRepricing(ledger);
sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS ZReportRepricing;
skipStockDocumentLedger (ledger) += dateZReportRepricing(ledger) < startDateGroupCashRegisterDepartmentStore(departmentStoreZReportRepricing(ledger));
editStockDocumentLedger(l) += ACTION editZReport(zReportZReportRepricing(l));