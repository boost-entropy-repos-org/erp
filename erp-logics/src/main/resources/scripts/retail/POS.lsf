MODULE POS;

REQUIRE ZReport;

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceListGroupCashRegister 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (GroupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceListGroupCashRegister
;

// ----------------------------- Кассовый модуль ---------------- //

POSPriceListTypeReceipt (receipt) = priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt));

POSPriceSkuReceiptDateTime 'Цена в кассе' (sku, receipt, dateTime) =
    IF usePriceListGroupCashRegister(groupCashRegisterReceipt(receipt)) THEN
        priceAPriceListTypeSkuStockDateTime(POSPriceListTypeReceipt(receipt), sku, departmentStoreReceipt(receipt), dateTime)
    ELSE
        transactionPriceBarcodeGroupMachinery(barcodeSku(sku), groupCashRegisterReceipt(receipt)) IF dateTime IS DATETIME;
currentPOSPriceSkuReceipt 'Текущая цена' (sku, receipt) = POSPriceSkuReceiptDateTime(sku, receipt, currentDateTime());

POSPriceBatchReceiptDateTime 'Цена в кассе' (batch, receipt, dateTime) =
    IF usePriceListGroupCashRegister(groupCashRegisterReceipt(receipt)) THEN
        priceAPriceListTypeBatchStockDateTime(POSPriceListTypeReceipt(receipt), batch, departmentStoreReceipt(receipt), dateTime)
    ELSE
        transactionPriceBarcodeGroupMachinery(barcodeSku(skuBatch(batch)), groupCashRegisterReceipt(receipt)) IF dateTime IS DATETIME;
currentPOSPriceBatchReceipt 'Текущая цена' (batch, receipt) = POSPriceBatchReceiptDateTime(batch, receipt, currentDateTime());
currentPOSPriceBatchReceiptDetail 'Текущая цена' (batch, receiptDetail) = POSPriceBatchReceiptDateTime(batch, receiptReceiptDetail(receiptDetail), currentDateTime());

zReportCashRegister = DATA ZReport (CashRegister);

currentCashRegister () = cashRegisterComputer(currentComputer());

GROUP receiptZReportGroup 'Z-отчет' : public;

currentZReport() = zReportCashRegister(currentCashRegister());
numberCurrentZReport 'Номер текущего Z-отчета' () = numberZReport(currentZReport()) IN receiptZReportGroup;
sumCashCurrentZReport() = sumCashZReport(currentZReport());

closedCurrentZReport() = TRUE IF NOT currentZReport();

currentSumCashCurrentCashRegister 'Сумма наличных в кассе' () =
    curSumIncomeCashOperation(currentCashRegister()) (-) curSumOutcomeCashOperation(currentCashRegister()) (+) sumCashCurrentZReport();

//CONSTRAINT currentSumCashCurrentCashRegister() < 0 AND cashRegister == currentCashRegister() MESSAGE 'Сумма наличных денег в кассе не должна быть отрицательной';

// Операции с чеками

createCurrentReceipt 'Создать новый чек' = ACTION () {
    FOR ADDOBJ r = Receipt DO {
        EXEC seek(r);
        ASSIGN zReportReceipt(r) <- currentZReport();
        ASSIGN numberReceipt(r) <- maxNumberReceiptZReport(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayTextReceiptDetail 'Вывести текст на дисплей'(receiptDetail) = ABSTRACT ACTION LIST (ReceiptDetail);

// Проведение чека

GROUP receiptActionGroup 'Оплата' : public;

postPrintReceipt 'Напечатать фискальный чек' = ABSTRACT ACTION LIST (Receipt);
noFiscalPostPrintReceipt 'Создать чек (без фискального регистратора)' = ACTION (receipt) {
    IF receipt IS Receipt THEN {
        EXEC apply();
        EXEC createCurrentReceipt();
    }
}
postPrintReceipt(receipt) += ACTION IF NOT sidCashRegisterModelReceipt(receipt) THEN noFiscalPostPrintReceipt(receipt);

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) READONLY sumReceiptDetailReceipt, changePaymentReceipt

    OBJECTS p = Payment FIXED GRID
    PROPERTIES(p) sumPayment, namePaymentTypePayment
    FILTERS receiptPayment(p) == r
;

DESIGN postReceiptPayment FROM DEFAULT {

    ADD p.box {
        fill = 1;
        p.grid {
            defaultComponent = TRUE;
        }
        PROPERTY(sumPayment) { font = 'Tahoma bold 36'; }
        PROPERTY(namePaymentTypePayment) { font = 'Tahoma bold 36'; }
        REMOVE p.toolbar;
    }
    NEW south {
        type = CONTAINERH;
        ADD PROPERTY(sumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
        ADD PROPERTY(changePaymentReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
        ADD rightControls {
            alignment = STRETCH;
            type = CONTAINERV;
            PROPERTY(formOk) {
                fill = 1;
                font = 'Tahoma bold 36';
            }
            PROPERTY(formClose) {
                fill = 1;
                font = 'Tahoma bold 36';
            }
        }
    }
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh);
}

postReceipt 'Смешанный платеж' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    //FOR receiptPayment(payment) == receipt DO {
    DELETE payment WHERE receiptPayment(payment) == receipt;
    //}
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            ASSIGN receiptPayment(p) <- receipt;
            ASSIGN paymentTypePayment(p) <- minCashPaymentType();
        }
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            ASSIGN receiptPayment(p) <- receipt;
            ASSIGN paymentTypePayment(p) <- minCardPaymentType();
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            EXEC postPrintReceipt(receipt);
        } ELSE {
            //FOR receiptPayment(p) == receipt DO {
            DELETE p WHERE receiptPayment(p) == receipt;
            //}
        }
    }
} EDITKEY 'F9' IN receiptActionGroup;

postCardReceipt 'Карточкой' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    //FOR receiptPayment(payment) == receipt DO {
    DELETE payment WHERE receiptPayment(payment) == receipt;
    //}
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            ASSIGN receiptPayment(p) <- receipt;
            ASSIGN paymentTypePayment(p) <- minCardPaymentType();
            ASSIGN sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        EXEC postPrintReceipt(receipt);
    }
} EDITKEY 'F10' CONFIRM IN receiptActionGroup;

postCashReceipt 'Наличными' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    //FOR receiptPayment(payment) == receipt DO {
    DELETE payment WHERE receiptPayment(payment) == receipt;
    //}
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            ASSIGN receiptPayment(p) <- receipt;
            ASSIGN paymentTypePayment(p) <- minCashPaymentType();
            ASSIGN sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            EXEC postPrintReceipt(receipt);
        } ELSE {
            //FOR receiptPayment(p) == receipt DO {
            DELETE p WHERE receiptPayment(p) == receipt;
            //}
        }
    }
} EDITKEY 'F11' IN receiptActionGroup;

cancelReceipt 'Отменить чек' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        EXEC cancel();
        EXEC createCurrentReceipt();
    }
    EXEC fiscalCancelReceipt();
} EDITKEY 'shift F11' CONFIRM IN receiptActionGroup;

// Операции по добавлению строк в чек

// Продажи
FORM chooseBatchReceipt 'Выбор партии'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS d = ReceiptDetail FIXED PANEL

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY dateTimeBatch, nameBatch
    PROPERTIES(bt, st) READONLY prevCurrentBalanceBatchStock
    PROPERTIES(bt, d) READONLY currentPOSPriceBatchReceiptDetail
    ORDER BY dateTimeBatch DESC
    FILTERS skuBatch(bt) == skuReceiptDetail(d),
            currentPOSPriceBatchReceiptDetail(bt, d)
;

changeBatchReceiptDetail 'Изменить партию строки чека' = ACTION (detail) {
    IF explicitBatchLedgerReceipt(receiptReceiptDetail(detail)) THEN {
        FORM chooseBatchReceipt OBJECTS st = departmentStoreReceiptDetail(detail), d = detail MODAL;
        IF formResult() == FormResult.ok THEN {
            batchReceiptDetail(detail) <- chosenObject('bt');
            priceReceiptSaleDetail(detail) <- currentPOSPriceBatchReceipt(chosenObject('bt'), receiptReceiptDetail(detail));
        }
    }
}

createReceiptSaleDetailBatch 'Добавить строку продажи' = ACTION (receipt, batch, barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        EXEC seek(d);
        ASSIGN receiptReceiptSaleDetail(d) <- receipt;
        ASSIGN idBarcodeReceiptDetail(d) <- barcode;
        ASSIGN skuReceiptSaleDetail(d) <- skuBatch(batch);
        ASSIGN quantityReceiptSaleDetail(d) <- 1.0;
        ASSIGN VATReceiptSaleDetail(d) <- VATRetailSkuDepartmentStoreDateTime(skuBatch(batch), departmentStoreReceipt(receipt), currentDateTime());
        ASSIGN batchReceiptSaleDetail(d) <- batch;
        ASSIGN priceReceiptSaleDetail(d) <- currentPOSPriceBatchReceipt(batch, receipt);
    }
}

createReceiptSaleDetailSku 'Добавить строку продажи' = ACTION (receipt, sku, barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        EXEC seek(d);
        ASSIGN receiptReceiptSaleDetail(d) <- receipt;
        ASSIGN idBarcodeReceiptDetail(d) <- barcode;
        ASSIGN skuReceiptSaleDetail(d) <- sku;
        ASSIGN quantityReceiptSaleDetail(d) <- 1.0;
        ASSIGN priceReceiptSaleDetail(d) <- currentPOSPriceSkuReceipt(sku, receipt);
        ASSIGN VATReceiptSaleDetail(d) <- VATRetailSkuDepartmentStoreDateTime(sku, departmentStoreReceipt(receipt), currentDateTime());
        IF explicitBatchLedgerReceipt(receiptReceiptSaleDetail(d)) AND
            countBatchSkuStock(skuReceiptSaleDetail(d), departmentStoreReceipt(receiptReceiptSaleDetail(d))) == 1 THEN {
                batchReceiptSaleDetail(d) <- defaultBatchSkuStock(skuReceiptSaleDetail(d), departmentStoreReceipt(receiptReceiptSaleDetail(d)));
                priceReceiptSaleDetail(d) <- currentPOSPriceBatchReceipt(batchReceiptSaleDetail(d), receiptReceiptDetail(d));
            } ELSE IF explicitBatchLedgerReceipt(receiptReceiptSaleDetail(d)) THEN {
                FORM chooseBatchReceipt OBJECTS st = departmentStoreReceiptDetail(d), d = d MODAL;
                IF formResult() == FormResult.ok THEN {
                    batchReceiptSaleDetail(d) <- chosenObject('bt');
                    priceReceiptSaleDetail(d) <- currentPOSPriceBatchReceipt(chosenObject('bt'), receiptReceiptDetail(d));
                }
            }
    }
}

GROUP receiptSaleActionGroup 'Продажа' : public;

// По штрих-коду
changeBarcodeSaleReceipt = ACTION (receipt) {
    REQUEST STRING[15] INPUT;
    LOCAL dialogBarcodeSku = Sku();
    ASSIGN dialogBarcodeSku() <- skuBarcodeIdDate(requestedString(), currentDate());

    IF dialogBarcodeSku() IS Sku THEN {
        EXEC createReceiptSaleDetailSku(receipt, dialogBarcodeSku(), requestedString());
    } ELSE
        MESSAGE 'Не найден штрих-код';
};

// Поиск подбором SKU
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroupStock(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT

    OBJECTS           s = Sku FIXED GRID
    PROPERTIES        READONLY nameSkuStock(s, st), idBarcodeSku(s)
    FILTERS           isParentSkuGroupSku(sk, s)
    ORDER BY          nameSkuStock

    PROPERTIES(s, st) READONLY prevCurrentBalanceSkuStock
    PROPERTIES(s, r)  READONLY currentPOSPriceSkuReceipt

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' prevCurrentBalanceSkuStock(s, st) DEFAULT

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN searchSkuSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            ADD skuTree.tree.box { caption = 'Группы'; }
            ADD s.box {
                fill = 3;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}

searchSkuSaleReceipt 'Поиск' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    FORM searchSkuSaleReceipt OBJECTS st = departmentStoreReceipt(receipt), r = receipt MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptSaleDetailSku(receipt, chosenObject('s'), idBarcodeSku(chosenObject('s')));
    }
} EDITKEY 'F3' IN receiptSaleActionGroup;

// Поиск подбором Batch
FORM searchBatchSaleReceipt 'Поиск партии'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroupStock(sk, st)
    ORDER BY skuTreeName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT

    OBJECTS           b = Batch FIXED GRID
    PROPERTIES        READONLY SHOWIF explicitBatchLedgerReceipt(r) nameSkuBatch(b), dateTimeBatch(b), nameBatch(b), idBarcodeSkuBatch(b)
    FILTERS           isParentSkuGroupSku(sk, skuBatch(b))
    ORDER BY          nameSkuBatch

    PROPERTIES(b, st) READONLY SHOWIF explicitBatchLedgerReceipt(r) prevCurrentBalanceBatchStock
    PROPERTIES(b, r)  READONLY SHOWIF explicitBatchLedgerReceipt(r) currentPOSPriceBatchReceipt

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' prevCurrentBalanceBatchStock(b, st) DEFAULT

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN searchBatchSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1280, 768);
        NEW top BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            ADD skuTree.tree.box { caption = 'Группы'; }
            ADD b.box {
                fill = 3;
                b.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}

searchBatchSaleReceipt 'Поиск' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    FORM searchBatchSaleReceipt OBJECTS st = departmentStoreReceipt(receipt), r = receipt MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptSaleDetailBatch(receipt, chosenObject('b'), idBarcodeSkuBatch(chosenObject('b')));
    }
} EDITKEY 'F3' IN receiptSaleActionGroup;


// Возвраты

createReceiptReturnDetail 'Добавить строку возврата' = ACTION (receipt, receiptSaleDetail, barcode) {
    FOR ADDOBJ d = ReceiptReturnDetail DO {
        EXEC seek(d);
        ASSIGN receiptReceiptReturnDetail(d) <- receipt;
        ASSIGN idBarcodeReceiptDetail(d) <- barcode;
        ASSIGN receiptSaleDetailReceiptReturnDetail(d) <- receiptSaleDetail;
        ASSIGN skuReceiptReturnDetail(d) <- skuReceiptSaleDetail(receiptSaleDetail);
        ASSIGN quantityReceiptReturnDetail(d) <- 1.0;
        ASSIGN priceReceiptReturnDetail(d) <- priceReceiptSaleDetail(receiptSaleDetail);
        ASSIGN VATReceiptReturnDetail(d) <- VATReceiptSaleDetail(receiptSaleDetail);
        ASSIGN batchReceiptReturnDetail(d) <- batchReceiptSaleDetail(receiptSaleDetail);
    }
}

GROUP receiptReturnActionGroup 'Возврат' : public;

// По штрих-коду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = DepartmentStore FIXED PANEL

    OBJECTS s = Sku FIXED PANEL
    PROPERTIES idBarcodeSku(s) READONLY, nameSkuStock(s, d)

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY numberReceiptReceiptDetail, dateTimeReceiptSaleDetail, nameBatchReceiptSaleDetail SHOWIF explicitBatchLedgerDepartmentStore(d),
                           numberDiscountCardReceiptDetail, nameLegalEntityDiscountCardReceiptDetail, sumReceiptDetailReceiptDetail,
                           indexReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                           sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail
    FILTERS departmentStoreReceiptSaleDetail(r) == d,
            skuReceiptSaleDetail(r) == s
;

DESIGN scanBarcodeReturnReceipt FROM DEFAULT {
    PROPERTY(idBarcodeSku) {
        focusable = FALSE;
    }
    PROPERTY(nameSkuStock) {
        focusable = FALSE;
    }
}

scanBarcodeReturnReceipt 'Ввести штрих-код' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    FORM barcodeInput MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL dialogBarcodeSku = Sku();
        ASSIGN dialogBarcodeSku() <- skuBarcodeIdDate(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {
            FORM scanBarcodeReturnReceipt OBJECTS d = departmentStoreReceipt(receipt), s = dialogBarcodeSku() MODAL;
            IF formResult() == FormResult.ok THEN {
                EXEC createReceiptReturnDetail(receipt, chosenObject('r'), barcodeInput());
            }
        } ELSE
            MESSAGE 'Не найден штрих-код';
    }
} EDITKEY 'F7' IN receiptReturnActionGroup;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = DepartmentStore FIXED PANEL

    OBJECTS s = Receipt FIXED GRID
    PROPERTIES(s) READONLY  numberReceipt, dateReceipt, timeReceipt,
                            numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            countReceiptDetailReceipt, quantityReceiptDetailReceipt
    FILTERS departmentStoreReceipt(s) == st

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY  idBarcodeReceiptDetail, nameSkuReceiptDetail, nameBatchReceiptSaleDetail SHOWIF explicitBatchLedgerDepartmentStore(st),
                            quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                            sumReceiptDetail, discountPercentReceiptSaleDetail, discountSumReceiptDetail
    FILTERS receiptReceiptSaleDetail(r) == s
;

searchSkuReturnReceipt 'Поиск' = ACTION (receipt) {
    ASSIGN zReportReceipt(receipt) <- currentZReport();
    FORM searchSkuReturnReceipt OBJECTS st = departmentStoreReceipt(receipt) MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptReturnDetail(receipt, chosenObject('r'), idBarcodeSku(skuReceiptSaleDetail(chosenObject('r'))));
    }
} EDITKEY 'F6' IN receiptReturnActionGroup;

// Дисконтные карты

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = STRING[18], s = STRING[2]) FIXED PANEL
    PROPERTIES number = OBJVALUE(n), series = OBJVALUE(s)
;

DESIGN inputDiscountCardNumberReceipt FROM DEFAULT{
    NEW centerContainer BEFORE functions.box {
        type = CONTAINERH;
        ADD PROPERTY(number) { caption = 'Номер'; font = 'Tahoma bold 72'; }
        ADD PROPERTY(series) { minimumCharWidth = 3; caption = 'Серия'; font = 'Tahoma bold 72'; }
    }
}

inputDiscountCardNumberReceipt 'Ввести номер' = ACTION (receipt) {
    FORM inputDiscountCardNumberReceipt MODAL;
    IF formResult() == FormResult.ok THEN {
        IF TRUE IF NOT chosenString('s') == '' THEN {
            IF discountCardSeriesNumber(CONCAT '', chosenString('s'), chosenString('n')) THEN {
                IF dateToDiscountCard(discountCardSeriesNumber(CONCAT '', chosenString('s'), chosenString('n')))<dateReceipt(receipt) THEN
                    MESSAGE 'Закончился срок действия карты'
                ELSE
                    ASSIGN discountCardReceipt(receipt) <- discountCardSeriesNumber(CONCAT '', chosenString('s'), chosenString('n'));
            }
            ELSE
                MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
        }
        ELSE {
            IF discountCardNumber(chosenString('n')) THEN {
                IF dateToDiscountCard(discountCardNumber(chosenString('n')))<dateReceipt(receipt) THEN
                    MESSAGE 'Закончился срок действия карты'
                ELSE
                    ASSIGN discountCardReceipt(receipt) <- discountCardNumber(chosenString('n'));
            }
            ELSE
                MESSAGE 'Дисконтная карта с таким номером не найдена';
        }
    }
} IN receiptDiscountGroup EDITKEY 'F5';

clearDiscountCardReceipt 'Сбросить' = ACTION (receipt) {
    ASSIGN discountCardReceipt(receipt) <- NULL;
} IN receiptDiscountGroup EDITKEY 'shift F5';

// Операции с Z-отчетами

openCurrentZReport 'Открыть Z-отчет' = ACTION () {
    ADDOBJ ZReportPosted;
    FOR z == addedObject() DO {
        ASSIGN numberZReport(z) <- STRING[255](z);
        ASSIGN cashRegisterZReport(z) <- currentCashRegister();
        ASSIGN departmentStoreZReport(z) <- departmentStoreCashRegister(currentCashRegister()); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        ASSIGN zReportCashRegister(cashRegister) <- z WHERE cashRegister == currentCashRegister();
        EXEC apply();
    }
} CONFIRM IN receiptZReportGroup;

closeCurrentZReport 'Закрыть Z-отчет' = ACTION () {
    EXEC cancel();
    ASSIGN timeZReport(z) <- currentTime() WHERE z == currentZReport();
    ASSIGN dateZReport(z) <- currentDate() WHERE z == currentZReport();
    IF curSumCashCashOperation(cashRegisterZReport(currentZReport())) THEN {
        FOR ADDOBJ o = OutcomeCashOperation DO {
            ASSIGN dateOutcomeCashOperation(o) <- dateZReport(currentZReport());
            ASSIGN timeOutcomeCashOperation(o) <- timeZReport(currentZReport());
            ASSIGN departmentStoreOutcomeCashOperation(o) <- departmentStoreZReport(currentZReport());
            ASSIGN cashRegisterOutcomeCashOperation(o) <- cashRegisterZReport(currentZReport());
            ASSIGN sumCashOutcomeCashOperation(o) <- curSumCashCashOperation(cashRegisterZReport(currentZReport()));
        }
    }
    ASSIGN zReportCashRegister(cashRegister) <- NULL WHERE cashRegister == currentCashRegister();
    EXEC apply();
} CONFIRM IN receiptZReportGroup;

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы

posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) PERSISTENT;
cumulativeSumDiscountCard 'Накопленная сумма' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) PERSISTENT;

prevCumulativeSumReceipt (receipt) = OVERRIDE 0 IF receipt IS Receipt, [PREV(cumulativeSumDiscountCard(discountCard))](discountCardReceipt(receipt));
cumulativeSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN cumulativeSumDiscountCard(discountCardReceipt(receipt))
                                                                                              ELSE prevCumulativeSumReceipt (receipt);

EXTEND FORM discountCards
    PROPERTIES(d) posSumDiscountCard, cumulativeSumDiscountCard
;

// Расчет сумм скидок

TABLE receiptSaleDetailPromotionCondition(ReceiptSaleDetail, PromotionCondition);
quantityReceiptSaleDetailPromotionCondition 'Кол-во по акции' = DATA NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition) INDEXED;
promotionSumReceiptSaleDetailPromotionCondition 'Сумма скидки' = DATA NUMERIC[16,2] (ReceiptSaleDetail, PromotionCondition);
setUserPromotionReceiptSaleDetailPromotionCondition 'Применить скидку' = DATA BOOLEAN (ReceiptSaleDetail, PromotionCondition);

setUserPromotionReceipt (receipt) = GROUP SUM 1 IF setUserPromotionReceiptSaleDetailPromotionCondition (receiptSaleDetail, promotionCondition)  BY receiptReceiptSaleDetail (receiptSaleDetail);

promotionSumReceiptSaleDetail (detail) = GROUP SUM promotionSumReceiptSaleDetailPromotionCondition(detail, condition)
                                               BY detail;

inReceiptPromotion (receipt, promotion) = inPromotionStore(promotion, storeReceipt(receipt)) AND
                                          dateReceipt(receipt) >= dateFromPromotion(promotion) AND dateReceipt(receipt) <= dateToPromotion(promotion) AND
                                          NOT timeReceipt(receipt) < timeOfFromPromotion(promotion) AND NOT timeReceipt(receipt) > timeOfToPromotion(promotion) AND
                                          NOT sumReceiptDetailReceipt(receipt) < minSumBillPromotion(promotion) AND NOT sumReceiptDetailReceipt(receipt) > maxSumBillPromotion(promotion)
                                          AND NOT skipPromotionDOW(promotion, DOWInDate(dateReceipt(receipt)))
                                          AND NOT cumulativeSumReceiptPromotion (receipt, promotion) < minCumulativeSumPromotion(promotion) AND NOT cumulativeSumReceiptPromotion (receipt, promotion) > maxCumulativeSumPromotion(promotion)
                                          AND NOT (hasDiscountCardPromotion(promotion) AND NOT inPromotionDiscountCard(promotion, discountCardReceipt(receipt)));

inReceiptSaleDetailPromotionCondition (receiptDetail, promotionCondition) =
    inReceiptPromotion(receiptReceiptDetail(receiptDetail), promotionPromotionCondition(promotionCondition))
    AND inPromotionConditionSku(promotionCondition, skuReceiptDetail(receiptDetail));

maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

isAppliedPromotionReceiptSaleDetailPromotionCondition 'Акция применяется' (receiptSaleDetail, promotionCondition) =
    IF userSetPromotionCondition(promotionCondition) THEN setUserPromotionReceiptSaleDetailPromotionCondition(receiptSaleDetail, promotionCondition)
      ELSE receiptSaleDetail IS ReceiptSaleDetail AND promotionCondition IS PromotionCondition;

calculatePromotionsReceipt 'Рассчитать акции' = ACTION (receipt) {

    ASSIGN quantityReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    ASSIGN promotionSumReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    ASSIGN discountSumReceiptSaleDetail(detail) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;

    LOCAL maxSalePriceSku = NUMERIC[14,2] (Sku);
    ASSIGN maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    FOR promotionGroup IS PromotionGroup DO {
        LOCAL leftSku = NUMERIC[14,3] (Sku);
        ASSIGN leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'

        LOCAL leftQuantityReceiptSaleDetail = NUMERIC[14,3] (ReceiptSaleDetail);
        ASSIGN leftQuantityReceiptSaleDetail(detail) <- quantityReceiptSaleDetail(detail) WHERE receiptReceiptSaleDetail(detail) == receipt;

        LOCAL leftSumReceiptSaleDetail = NUMERIC[16,3] (ReceiptSaleDetail);
        ASSIGN leftSumReceiptSaleDetail(detail) <- (priceSumReceiptSaleDetail(detail) (-) promotionSumReceiptSaleDetail(detail)) WHERE receiptReceiptSaleDetail(detail) == receipt;

        FOR promotionGroupPromotion(promotion) == promotionGroup AND inReceiptPromotion(receipt, promotion) ORDER orderPromotion(promotion) DO {
            LOCAL quantityPromotionCondition = NUMERIC[14,3] (PromotionCondition);
            ASSIGN quantityPromotionCondition(promotionCondition) <- [GROUP SUM leftSku (sku)
                                                                             IF inPromotionConditionSku(promotionCondition, sku)
                                                                             BY promotionCondition](promotionCondition) IF
                                                                                promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL sumPromotionCondition = NUMERIC[14,3] (PromotionCondition);
            ASSIGN sumPromotionCondition(promotionCondition) <- [GROUP SUM leftSku (sku) * maxSalePriceSku(sku)
                                                                    IF inPromotionConditionSku(promotionCondition, sku)
                                                                    BY promotionCondition](promotionCondition) IF
                                                                       promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL countPromotionCondition = INTEGER (PromotionCondition);
            ASSIGN countPromotionCondition(promotionCondition) <- MIN divideInteger(quantityPromotionCondition (promotionCondition), minQuantityPromotionCondition (promotionCondition)),
                                                                   divideInteger(sumPromotionCondition(promotionCondition), minSumPromotionCondition(promotionCondition));

            LOCAL countPromotion = INTEGER ();
            ASSIGN countPromotion () <- [GROUP MIN countPromotionCondition(promotionCondition)]();

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND [GROUP SUM 1 IF countPromotionCondition(promotionCondition) > 0]() == countPromotionConditionPromotion(promotion) THEN {

//                MESSAGE name(promotion);
//                MESSAGE STRING[255](cumulativeSumReceipt(receipt));
//                MESSAGE STRING[255](minCumulativeSumPromotion(promotion));
//                MESSAGE STRING[255](cumulativeSumReceipt(receipt) < minCumulativeSumPromotion(promotion));
//
                LOCAL takenPromotionCondition = NUMERIC[14,3] (PromotionCondition);
                ASSIGN takenPromotionCondition(promotionCondition) <- min(countPromotion() * quantityDiscountPromotionCondition(promotionCondition), quantityPromotionCondition(promotionCondition));

                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (Sku, PromotionCondition);
                ASSIGN takenSkuPromotionCondition(sku, promotionCondition) <- [PARTITION UNGROUP takenPromotionCondition
                                                                                      LIMIT leftSku (sku)
                                                                                            IF inPromotionConditionSku(promotionCondition, sku)
                                                                                      BY promotionCondition
                                                                                      ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                LOCAL takenSku = NUMERIC[14,3] (Sku);
                ASSIGN takenSku(sku) <- [GROUP SUM takenSkuPromotionCondition(sku, promotionCondition) BY sku] (sku);

                ASSIGN leftSku(sku) <- leftSku(sku) (-) takenSku(sku);

                LOCAL takenReceiptSaleDetailPromotionCondition = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                ASSIGN takenReceiptSaleDetailPromotionCondition (detail, condition) <- [PARTITION UNGROUP takenSkuPromotionCondition
                                                                                               LIMIT leftQuantityReceiptSaleDetail(detail)
                                                                                               BY skuReceiptSaleDetail(detail), promotionCondition
                                                                                               ORDER DESC detail](detail, condition);

                LOCAL takenReceiptSaleDetail = NUMERIC[14,3] (ReceiptSaleDetail);
                ASSIGN takenReceiptSaleDetail(detail) <- [GROUP SUM takenReceiptSaleDetailPromotionCondition(detail, condition) BY detail](detail);

                ASSIGN leftQuantityReceiptSaleDetail(detail) <- leftQuantityReceiptSaleDetail(detail) (-) takenReceiptSaleDetail(detail);

                ASSIGN quantityReceiptSaleDetailPromotionCondition(detail, condition) <- takenReceiptSaleDetailPromotionCondition(detail, condition)
                    WHERE takenReceiptSaleDetailPromotionCondition(detail, condition) AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, condition);

                ASSIGN promotionSumReceiptSaleDetailPromotionCondition (detail, condition) <-
                    IF sumReceiptPromotionCondition(condition) THEN
                        takenReceiptSaleDetailPromotionCondition(detail, condition) * (priceReceiptSaleDetail(detail) (-) sumReceiptPromotionCondition(condition) / quantityDiscountPromotionCondition (condition))
                    ELSE
                       IF sumDiscountPromotionCondition(condition) THEN
                            takenReceiptSaleDetailPromotionCondition(detail, condition) * sumDiscountPromotionCondition(condition)
                        ELSE
                            IF resultPricePromotionCondition(condition) THEN
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) - resultPricePromotionCondition(condition))
                            ELSE
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) * percentPromotionCondition(condition) / 100)
                            WHERE takenReceiptSaleDetailPromotionCondition(detail, condition) AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, condition);
            }
        }
    }

    discountSumReceiptSaleDetail(detail) <- roundPriceRoundCondition(promotionSumReceiptSaleDetail(detail), roundConditionDepartmentStore(departmentStoreReceiptSaleDetail(detail))) WHERE receiptReceiptSaleDetail(detail) == receipt;
    discountSumReceiptSaleDetail(detail) <- calcDiscountSumReceiptSaleDetail(detail) WHERE detail IS ReceiptSaleDetail AND receiptReceiptSaleDetail(detail) == receipt AND discountPercentReceiptSaleDetail(detail) AND NOT promotionSumReceiptSaleDetail(detail);
}

// Форма POS-терминала

prevCurrentBalanceSkuReceipt (sku, receipt) = prevCurrentBalanceSkuStock(sku, departmentStoreReceipt(receipt));
prevCurrentBalanceSkuReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceSkuReceipt(skuReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));

prevCurrentBalanceBatchReceipt (batch, receipt) = prevCurrentBalanceBatchStock(batch, departmentStoreReceipt(receipt));
prevCurrentBalanceBatchReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceBatchReceipt(batchReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetailReceipt, sumReceiptDetailReceipt,
                                          searchSkuSaleReceipt SHOWIF notExplicitBatchLedgerReceipt(r),
                                          searchBatchSaleReceipt SHOWIF explicitBatchLedgerReceipt(r),
                                          searchSkuReturnReceipt, scanBarcodeReturnReceipt,
                                          postReceipt, postCardReceipt, postCashReceipt, cancelReceipt,
                                          numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt,
                                          inputDiscountCardNumberReceipt, clearDiscountCardReceipt

    OBJECTS d = ReceiptDetail FIXED GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY indexReceiptDetail, typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail,
                                                   prevCurrentBalanceSkuReceiptDetail SHOWIF notExplicitBatchLedgerReceipt(r),
                                                   prevCurrentBalanceBatchReceiptDetail SHOWIF explicitBatchLedgerReceipt(r)
    PROPERTIES(d) SHOWIF currentZReport()          quantityReceiptDetail, priceReceiptDetail, sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID,
                                                   discountSumReceiptDetail, numberVATReceiptDetail, valueVATReceiptDetail, deleted=DELETESESSION
    PROPERTIES(d) SHOWIF currentZReport() READONLY FORCE PANEL idBarcodePanel = idBarcodeReceiptDetail,
                                                               nameSkuPanel = nameSkuReceiptDetail,
                                                               quantityPanel = quantityReceiptDetail,
                                                               shortNameUOMSkuPanel = shortNameUOMSkuReceiptDetail,
                                                               pricePanel = priceReceiptDetail,
                                                               sumPanel = sumReceiptDetail
    PROPERTIES(d) SHOWIF currentZReport() FORCE PANEL nameBatchPanel = nameBatchReceiptDetail ON CHANGE changeBatchReceiptDetail(d) SHOWIF explicitBatchLedgerReceipt(r)
    FILTERS receiptReceiptDetail(d) == r

    OBJECTS bs = STRING[15] FIXED PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = OBJVALUE ON CHANGE changeBarcodeSaleReceipt(r) EVENTID 'SCANNER'

    OBJECTS pc = PromotionCondition FIXED GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, namePromotionCondition, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pc) SHOWIF currentZReport()       quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition
    FILTERS quantityReceiptSaleDetailPromotionCondition(d, pc) AND NOT userSetPromotionCondition(pc)

    OBJECTS pcu = PromotionCondition FIXED GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, namePromotionCondition, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition, setUserPromotionReceiptSaleDetailPromotionCondition
    FILTERS userSetPromotionCondition(pcu) AND inReceiptSaleDetailPromotionCondition(d, pcu)

    PROPERTIES() fiscalAdvancePaper, fiscalCutReceipt

    EVENTS
        ON INIT createCurrentReceipt()

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN POS FROM DEFAULT {
    NEW north {
        type = CONTAINERH;
        alignment = STRETCH;

        ADD r.receiptSaleActionGroup {
            type = CONTAINERV;
            alignment = STRETCH;
            ADD PROPERTY(searchSkuSaleReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 22'; }
            ADD PROPERTY(searchBatchSaleReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 22'; }
            ADD PROPERTY(barcodeSale) { caption = 'Ввести штрих-код'; panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 22'; editKey = 'F4'; }
        }
        ADD r.receiptReturnActionGroup {
            type = CONTAINERV;
            alignment = STRETCH;
            ADD PROPERTY(searchSkuReturnReceipt) { fill = 1; focusable = FALSE; font = 'Tahoma bold 22'; }
            ADD PROPERTY(scanBarcodeReturnReceipt) { fill = 1; focusable = FALSE; font = 'Tahoma bold 22'; }
        }
        ADD r.receiptDiscountGroup {
            fill = 1;
            type = CONTAINERV;
            ADD PROPERTY(nameLegalEntityDiscountCardReceipt) { alignment = STRETCH; caption = 'Держатель'; focusable = FALSE; font = 'Tahoma bold 22'; }
            NEW receiptDiscountRow2 {
                fill = 1;
                type = CONTAINERH;
                ADD PROPERTY(numberDiscountCardReceipt) { alignment = STRETCH; caption = 'Номер'; focusable = FALSE; font = 'Tahoma bold 22'; }
                NEW receiptDiscountActions {
                    fill = 1;
                    type = CONTAINERH;
                    childrenAlignment = TRAILING;
                    ADD PROPERTY(inputDiscountCardNumberReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 14'; }
                    ADD PROPERTY(clearDiscountCardReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 14'; }
                }
            }
        }
        ADD PROPERTY(closedCurrentZReportMessage()) {
            focusable = FALSE;
            font = 'Tahoma 100';
            fill = 1;
        }
    }
    ADD d.box {
        fill = 1;
        PROPERTY(indexReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
        PROPERTY(typeReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
        PROPERTY(idBarcodeReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
        PROPERTY(nameSkuReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; minimumCharWidth = 20; }
        PROPERTY(prevCurrentBalanceSkuReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
        PROPERTY(prevCurrentBalanceBatchReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
        PROPERTY(quantityReceiptDetail) { font = 'Tahoma 14'; minimumCharWidth = 5; }
        PROPERTY(priceReceiptDetail) { font = 'Tahoma 14'; }
        PROPERTY(sumReceiptDetail) { font = 'Tahoma 14'; }
        PROPERTY(discountPercentReceiptSaleDetail) { font = 'Tahoma 14'; minimumCharWidth = 4; }
        PROPERTY(discountSumReceiptDetail) { font = 'Tahoma 14'; }
        PROPERTY(numberVATReceiptDetail) { font = 'Tahoma 14'; minimumCharWidth = 3; }
        PROPERTY(valueVATReceiptDetail) { font = 'Tahoma 14'; minimumCharWidth = 3; }
        PROPERTY(deleted) { font = 'Tahoma 14'; }
        REMOVE d.toolbar;
    }
    NEW center {
        alignment = STRETCH;
        type = CONTAINERH;
        NEW details {
            fill = 1;
            preferredSize = ( -1, 0);
            ADD d.panel {
                ADD PROPERTY(nameSkuPanel) {
                    alignment = STRETCH;
                    panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24';
                }
                ADD PROPERTY(nameBatchPanel) {
                    alignment = STRETCH;
                    panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24';
                }
                NEW skuDetail {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    ADD PROPERTY(idBarcodePanel) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; }
                    NEW priceDetail {
                        fill = 1;
                        type = CONTAINERH;
                        childrenAlignment = TRAILING;
                        ADD PROPERTY(quantityPanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24';
                            minimumCharWidth = 5;
                        }
                        ADD PROPERTY(shortNameUOMSkuPanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24';
                        }
                        ADD PROPERTY(pricePanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24';
                        }
                        ADD PROPERTY(sumPanel) {
                            panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24';
                        }
                    }
                }
            }
            NEW pane {
                fill = 1;
                type = TABBED;
                ADD pc.box {
                    REMOVE pc.toolbar;
                }
                ADD pcu.box {
                    caption = 'Возможные акции';
                    REMOVE pcu.toolbar;
                }
            }
            NEW misc {
                type = CONTAINERH;
                alignment = STRETCH;
                ADD PROPERTY(formRefresh) {
                    fill = 1;
                    focusable = FALSE;
                }
                NEW currentContainer {
                    alignment = STRETCH;
                    caption = 'Текущие значения';
                    ADD PROPERTY(hostnameCurrentComputer) {
                        caption = 'Компьютер';
                        alignment = STRETCH;
                        focusable = FALSE;
                    }
                    NEW currentRow2 {
                        alignment = STRETCH;
                        type = CONTAINERH;
                        ADD PROPERTY(currentDateTime) { caption = 'Время'; focusable = FALSE; }
                        ADD PROPERTY(currentUserName) { caption = 'Пользователь'; focusable = FALSE; }
                    }
                }
                NEW actionsContainer {
                    caption = 'Действия с кассой';
                    type = CONTAINERH;
                    alignment = STRETCH;
                    ADD PROPERTY(fiscalAdvancePaper) { alignment = STRETCH; focusable = FALSE; }
                    ADD PROPERTY(fiscalCutReceipt) { alignment = STRETCH; focusable = FALSE; }
                }
            }
        }
        NEW east {
            alignment = STRETCH;
            ADD r.receiptActionGroup {
                type = CONTAINERV;
                alignment = STRETCH;
                ADD PROPERTY(postReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 22'; }
                ADD PROPERTY(postCardReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 22'; }
                ADD PROPERTY(postCashReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 22'; }
                ADD PROPERTY(cancelReceipt) { alignment = STRETCH; focusable = FALSE; font = 'Tahoma bold 22'; }
            }
            NEW receiptSums {
                alignment = STRETCH;
                caption = 'Итого';
                ADD PROPERTY(discountSumReceiptDetailReceipt) { alignment = STRETCH; panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 48'; }
                ADD PROPERTY(sumReceiptDetailReceipt) { alignment = STRETCH; panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 48'; }
            }
        }
    }
    REMOVE functions.box CASCADE;
}

WHEN SESSION FORMS POS CHANGED(quantityReceiptDetailReceipt(receipt)) OR CHANGED(discountCardReceipt(receipt)) OR CHANGED(setUserPromotionReceipt(receipt)) OR CHANGED(discountPercentReceipt(receipt)) DO EXEC calculatePromotionsReceipt(receipt);
WHEN SESSION FORMS POS CHANGED(quantityReceiptDetail(receiptDetail)) OR CHANGED(sumReceiptDetail(receiptDetail)) DO EXEC fiscalDisplayTextReceiptDetail(receiptDetail);

NAVIGATOR {
    retailNavigator {
        NEW POSNavigator 'Касса' BEFORE retailMasterData {
            ADD POS;
            ADD zReports;
            ADD centralCashRegister;
            ADD operationCashRegister;
            ADD groupsCashRegister;
            ADD cashRegistersModels;
        }
    }
}

// ----------------------------------------- Кассовые операции ---------------------------------------------- //
fiscalZReport 'Закрыть Z-отчёт' = ABSTRACT ACTION LIST () CONFIRM;
fiscalZReport() += ACTION IF NOT sidModelCurrentCashRegister() THEN closeCurrentZReport();

currentZReportDepartmentStore() = currentZReport() IF departmentStoreCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() IF departmentStoreCurrentCashRegister();

EXTEND FORM operationCashRegister
    PROPERTIES READONLY currentSumCashCurrentCashRegister() TODRAW interval FORCE PANEL
    PROPERTIES() READONLY numberCurrentZReport SHOWIF departmentStoreCurrentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()

    OBJECTS z = ZReportPosted
    PROPERTIES(z) READONLY objectClassName, numberZReport, dateZReport, timeZReport, nameDepartmentStoreZReport,
                           numberCashRegisterZReport, sumCashZReport, sumReceiptDetailZReport, basisZReport
    ORDER BY dateZReport(z), timeZReport(z)
    FILTERS dateZReport(z) >= dFrom,
            dateZReport(z) <= dTo
;

EXTEND DESIGN operationCashRegister {
    main {
        actions {
            ADD PROPERTY(fiscalZReport) { font = 'Tahoma 24'; }
            ADD PROPERTY(openCurrentZReport) { font = 'Tahoma 24'; };
            ADD PROPERTY(numberCurrentZReport) { font = 'Tahoma 24'; };
        }
        ADD z.box BEFORE functions.box;
    }
}

// Update data
fiscalUpdateData 'Загрузить информацию' = ABSTRACT ACTION LIST ();
fiscalUpdateDataShowIf = departmentStoreCurrentCashRegister() IF closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

EXTEND DESIGN operationCashRegister{
    actions {
        ADD PROPERTY(fiscalUpdateData) BEFORE PROPERTY(fiscalXReport) { font = 'Tahoma 24'; }
    }
}
