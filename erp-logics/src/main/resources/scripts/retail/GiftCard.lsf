MODULE GiftCard;

REQUIRE POS;

//подарочные сертификаты
CLASS GiftCard 'Подарочный сертификат';

@defineExternalizable(giftCard, VARSTRING[100]);

@defineNumberedObject(GiftCard);

@defineNumeratedObjectDefault(GiftCard, 'Нумератор для подарочных сертификатов', 'ПС');

// Уникальность
giftCardSeriesNumber (string) =
    GROUP AGGR giftCard
        BY seriesNumberGiftCard(giftCard) WHERE giftCard IS GiftCard;


dateGiftCard 'Дата' = DATA DATE(GiftCard);
expiryDaysGiftCard 'Срок действия (дней)' = DATA INTEGER(GiftCard);

priceGiftCard 'Цена' = DATA NUMERIC[14,2] (GiftCard);

//регистр движений подарочного сертификата
CLASS ABSTRACT GiftCardLedger 'Движение подарочных сертификатов';

giftCardGiftCardLedger = ABSTRACT GiftCard (GiftCardLedger);
dateTimeGiftCardLedger 'Дата/время' = ABSTRACT DATETIME (GiftCardLedger);
seriesNumberGiftCardLedger 'Серия/Номер' = ABSTRACT STRING[20] (GiftCardLedger);
sumGiftCardLedger 'Сумма' = ABSTRACT NUMERIC[16,2] (GiftCardLedger);
descriptionGiftCardLedger 'Описание' = ABSTRACT STRING[15] (GiftCardLedger);

//продажа подарочных сертификатов
CLASS ReceiptGiftCardSaleDetail 'Строка продажи сертификата' : ReceiptDetail, GiftCardLedger;

@defineExternalizable(receiptGiftCardSaleDetail, VARSTRING[100]);

giftCardReceiptGiftCardSaleDetail = DATA GiftCard (ReceiptGiftCardSaleDetail);

receiptReceiptGiftCardSaleDetail = DATA Receipt (ReceiptGiftCardSaleDetail);
receiptReceiptDetail(detail) += receiptReceiptGiftCardSaleDetail(detail);

soldGiftCard (giftCard) =
    GROUP AGGR detail
        BY giftCardReceiptGiftCardSaleDetail(detail) WHERE detail IS ReceiptGiftCardSaleDetail;
isSoldGiftCard 'Продан' (giftCard) = TRUE IF soldGiftCard(giftCard);
dateSoldGiftCard 'Дата продажи' (giftCard) = toDate(dateTimeReceipt(receiptReceiptGiftCardSaleDetail(soldGiftCard(giftCard))));

typeReceiptDetail(detail) += 'Сертификат' IF detail IS ReceiptGiftCardSaleDetail;
quantityReceiptDetail(detail) += 1.0 IF detail IS ReceiptGiftCardSaleDetail;

priceReceiptGiftCardSaleDetail 'Цена' = DATA NUMERIC[14,2] (ReceiptGiftCardSaleDetail);
priceReceiptDetail(detail) += priceReceiptGiftCardSaleDetail(detail);

sumReceiptGiftCardSaleDetail 'Сумма' = DATA NUMERIC[16,2] (ReceiptGiftCardSaleDetail);
sumReceiptDetail(detail) += sumReceiptGiftCardSaleDetail(detail);
signedSumReceiptDetail(detail) += sumReceiptGiftCardSaleDetail(detail);

//имплемент в GiftCardLedger
giftCardGiftCardLedger(detail) += giftCardReceiptGiftCardSaleDetail(detail);
dateTimeGiftCardLedger(detail) += dateTimeReceipt(receiptReceiptGiftCardSaleDetail(detail));
seriesNumberGiftCardLedger(detail) += seriesNumberGiftCard(giftCardReceiptGiftCardSaleDetail(detail));
sumGiftCardLedger(detail) += sumReceiptGiftCardSaleDetail(detail);
descriptionGiftCardLedger(detail) += 'Продажа' IF detail IS ReceiptGiftCardSaleDetail;

//продажа подарочных сертификатов
overChangeBarcodeGiftCard = ACTION (string, receipt) {
    IF giftCardSeriesNumber(string) AND receipt IS Receipt AND string IS STRING[15] THEN {
        LOCAL giftCard = GiftCard();
        giftCard() <- giftCardSeriesNumber(string);

        IF soldGiftCard(giftCard()) THEN {
            MESSAGE 'Сертификат ' + seriesNumberGiftCard(giftCard()) +' был использован';
        } ELSE {
            FOR ADDOBJ d = ReceiptGiftCardSaleDetail DO {
                receiptReceiptGiftCardSaleDetail(d) <- receipt;
                giftCardReceiptGiftCardSaleDetail(d) <- giftCard();
                idBarcodeReceiptDetail(d) <- string;
                priceReceiptGiftCardSaleDetail(d) <- priceGiftCard(giftCard());
                sumReceiptGiftCardSaleDetail(d) <- priceGiftCard(giftCard());
                seek(d);
            }
        }
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSaleReceipt(string, receipt) += overChangeBarcodeGiftCard(string, receipt);

//генерация подарочных сертификатов
FORM generationGiftCards 'Генерация подарочных сертификатов'
    OBJECTS n=Numerator  FIXED PANEL
    PROPERTIES(n) SELECTOR nameNumerator

    OBJECTS quantityCards=INTEGER FIXED PANEL
    PROPERTIES(quantityCards) intValueQuantityCards = OBJVALUE

    OBJECTS priceCards=NUMERIC[14,2] FIXED PANEL
    PROPERTIES(priceCards) valuePriceCards = OBJVALUE
;

DESIGN generationGiftCards FROM DEFAULT {
    main{
        NEW topContainer{
            caption = 'Параметры';
            ADD PROPERTY(nameNumerator);
            ADD PROPERTY(intValueQuantityCards) {caption = 'Количество подарочных сертификатов';}
            ADD PROPERTY(valuePriceCards) {caption = 'Цена подарочных сертификатов';}
        }
        ADD functions.box;
    }
}

generateGiftCards 'Сгенерировать подарочные сертификаты' = ACTION() {
    FORM generationGiftCards OBJECTS n=defaultNumeratorGiftCard() MODAL CHECK;
    IF formResult() == FormResult.ok THEN {
        LOCAL num = INTEGER();
        ASSIGN num() <- 0;
        WHILE num() < chosenInteger('quantityCards') DO {
            FOR ADDOBJ g = GiftCard DO {
                numeratorGiftCard(g) <- chosenObject('n');
                numberGiftCard(g) <- curStringValueNumerator(numeratorGiftCard(g));
                seriesGiftCard(g) <- seriesNumerator(numeratorGiftCard(g));
                priceGiftCard(g) <- chosenNumeric('priceCards');
                curValueNumerator(numerator) <- curValueNumerator(numerator) + 1 WHERE numerator == numeratorGiftCard(g);
            }

            num() <- num() + 1;
        }
    }
} TOOLBAR;

//формы
FORM giftCard 'Подарочный сертификат'
    OBJECTS g = GiftCard FIXED PANEL
    PROPERTIES(g) nameNumeratorGiftCard, numberGiftCard, seriesGiftCard, dateGiftCard, priceGiftCard, expiryDaysGiftCard

    EDIT GiftCard OBJECT g
;

DESIGN giftCard FROM DEFAULT {
    NEW topContainer{
        caption = 'Подарочный сертификат';
        ADD PROPERTY(nameNumeratorGiftCard);
        ADD PROPERTY(numberGiftCard);
        ADD PROPERTY(seriesGiftCard);
        ADD PROPERTY(dateGiftCard);
        ADD PROPERTY(expiryDaysGiftCard);
        ADD PROPERTY(priceGiftCard);        
    }
    ADD functions.box;
}

FORM giftCards 'Подарочные сертификаты'
    OBJECTS g = GiftCard
    PROPERTIES(g) READONLY objectClassName, nameNumeratorGiftCard, numberGiftCard, seriesGiftCard, dateGiftCard, 
                           dateSoldGiftCard, expiryDaysGiftCard, priceGiftCard
    PROPERTIES generateGiftCards() TODRAW g FORCE PANEL
    PROPERTIES(g) ADDFORM, EDITFORM, DELETE

    OBJECTS l = GiftCardLedger
    PROPERTIES(l) READONLY dateTimeGiftCardLedger, seriesNumberGiftCardLedger, sumGiftCardLedger, descriptionGiftCardLedger
    ORDER BY dateTimeGiftCardLedger
    FILTERS giftCardGiftCardLedger(l) == g
;

NAVIGATOR {
    POSNavigator{
        ADD giftCards;
    }
}

//использование подарочных сертификатов при оплате
CLASS PaymentGiftCard : Payment, GiftCardLedger;

@defineExternalizable(paymentGiftCard, VARSTRING[100]);

giftCardPaymentGiftCard = DATA GiftCard (PaymentGiftCard);
seriesNumberGiftCardPaymentGiftCard 'Серия/номер' (payment) = seriesNumberGiftCard(giftCardPaymentGiftCard(payment));

//имплемент в GiftCardLedger
giftCardGiftCardLedger(payment) += giftCardPaymentGiftCard(payment);
dateTimeGiftCardLedger(payment) += dateTimeReceipt(receiptPayment(payment)) IF payment IS PaymentGiftCard;
seriesNumberGiftCardLedger(payment) += seriesNumberGiftCard(giftCardPaymentGiftCard(payment));
sumGiftCardLedger(payment) += sumPayment(payment) IF payment IS PaymentGiftCard;
descriptionGiftCardLedger(payment) += 'Погашение' IF payment IS PaymentGiftCard;

sumGiftCardReceipt 'Сумма подарочных сертификатов в чеке' (receipt) =
    GROUP SUM sumPayment(payment) IF payment IS PaymentGiftCard
    BY receiptPayment(payment);
    
CONSTRAINT sumGiftCardReceipt(receipt) > sumReceiptDetailReceipt(receipt) 
    CHECKED BY sumGiftCardReceipt MESSAGE 'Сумма сертификатов не может превышать всего суммы чека';

usedGiftCard (giftCard) =
    GROUP AGGR payment
        BY giftCardPaymentGiftCard(payment) WHERE payment IS PaymentGiftCard;
isUsedGiftCard 'Погашен' (giftCard) = TRUE IF usedGiftCard(giftCard);
dateUsedGiftCard 'Дата использования' (giftCard) = toDate(dateTimeReceipt(receiptPayment(usedGiftCard(giftCard))));
expireDateGiftCard 'Дата истечения' (giftCard) = sumDate(toDate(dateTimeReceipt(receiptReceiptGiftCardSaleDetail(soldGiftCard(giftCard)))), expiryDaysGiftCard(giftCard));

EXTEND FORM giftCards
    PROPERTIES(g) READONLY AFTER dateSoldGiftCard(g) expireDateGiftCard, dateUsedGiftCard
;

EXTEND CLASS PaymentMeans { paymentMeansGiftCard 'Подарочный сертификат'}

overLoadDefaultPaymentTypes() += ACTION () {
    loadDefaultPaymentType('Подарочный сертификат', PaymentMeans.paymentMeansGiftCard, 'giftcard');
}

minGiftCardPaymentType() = GROUP MIN paymentType IF paymentMeansPaymentType(paymentType) == PaymentMeans.paymentMeansGiftCard;

addPaymentGiftCard 'Оплатить сертификатом' = ACTION (receipt) {
    FOR ADDOBJ pg = PaymentGiftCard DO {
        FORM barcodeInput MODAL;
        IF formResult() == FormResult.ok AND isSoldGiftCard(giftCardSeriesNumber(barcodeInput())) AND barcodeInput() IS STRING[15] AND 
           NOT expireDateGiftCard(giftCardSeriesNumber(barcodeInput())) < currentDate() THEN {
            LOCAL giftCard = GiftCard();
            giftCard() <- giftCardSeriesNumber(barcodeInput());
            giftCardPaymentGiftCard(pg) <- giftCard();
            receiptPayment(pg) <- receipt;
            paymentTypePayment(pg) <- minGiftCardPaymentType();
            sumPayment(pg) <- priceGiftCard(giftCard());
        } ELSE {
            DELETE pg;
            MESSAGE 'Сертификат не найден или истек';
        }
    }
}

EXTEND FORM postReceiptPayment
    PROPERTIES addPaymentGiftCard(r) TODRAW p FORCE PANEL SHOWIF allowPaymentGiftCard()
;

EXTEND DESIGN postReceiptPayment {
    rightControls{
        ADD PROPERTY(addPaymentGiftCard) BEFORE PROPERTY(formOk){
            fill = 1;
            font = 'bold 28';
        }
    }
}
