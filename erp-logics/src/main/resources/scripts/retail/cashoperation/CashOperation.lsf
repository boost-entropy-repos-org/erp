MODULE CashOperation;

REQUIRE CashRegister, Numerator, Document;

// ----------------------------- Кассовые документы ---------------------------- //

// Интерфейс для по работе с центральной кассой (кассовым счетом)
CLASS ABSTRACT CashDocument 'Кассовый документ';
TABLE cashDocument (CashDocument);

@defineExternalizable(cashDocument, VARSTRING[100]);

date 'Дата документа' = ABSTRACT DATE (CashDocument) IN documentHeader;
time 'Время документа' = ABSTRACT TIME (CashDocument) IN documentHeader;
dateTime 'Дата/время документа' (CashDocument cashDocument) = dateTimeToDateTime(date(cashDocument), time(cashDocument)) IN documentHeader;

number 'Номер' (cashDocument) = ABSTRACT STRING[200] (CashDocument) IN documentPrm; ///

departmentStore (cashDocument) = ABSTRACT DepartmentStore (CashDocument);
nameDepartmentStore 'Подразделение' (CashDocument cashDocument) =
    name(departmentStore(cashDocument)) IN documentHeader;
nameLegalEntity 'Компания' (CashDocument cashDocument) = nameLegalEntity(departmentStore(cashDocument)) IN documentHeader;

basis 'Основание' = ABSTRACT VARSTRING[100] (CashDocument) IN documentPrm;

cashRegister = ABSTRACT CashRegister(CashDocument);
numberCashRegister 'Касса' (CashDocument cashDocument) = npp(cashRegister(cashDocument)) IN documentPrm;

isPosted 'Закрыт' = ABSTRACT BOOLEAN (CashDocument);

CLASS ABSTRACT IncomeCashOrder 'ПКО': CashDocument;
CLASS ABSTRACT OutcomeCashOrder 'РКО': CashDocument;

sumCash 'Сумма' = ABSTRACT NUMERIC[18,4] (IncomeCashOrder) IN documentSum;
isPrinted 'Напечатан' = DATA BOOLEAN (IncomeCashOrder);
isNotPrinted 'Не распечатан' (IncomeCashOrder incomeCashOrder) =
    incomeCashOrder IS IncomeCashOrder  AND NOT isPrinted(incomeCashOrder);

isPrinted 'Напечатан' = DATA BOOLEAN (OutcomeCashOrder);
isNotPrinted 'Не распечатан' (OutcomeCashOrder outcomeCashOrder) =
    outcomeCashOrder IS OutcomeCashOrder  AND NOT isPrinted(outcomeCashOrder);

curSumIncomeCashOrder 'Текущая сумма ПКО' (departmentStore) =
    GROUP SUM sumCash(IncomeCashOrder incomeCashOrder) IF isPosted(incomeCashOrder)
    BY departmentStore(incomeCashOrder);

sumAIncomeCashOrder 'Сумма ПКО после даты/время' (departmentStore, date) =
    GROUP SUM sumCash(IncomeCashOrder incomeCashOrder) IF isPosted(incomeCashOrder) AND
              dateTime(incomeCashOrder) > DATETIME date
    BY departmentStore(incomeCashOrder), date;

sumIncomeCashOrder 'Сумма ПКО на дату/время' (DepartmentStore departmentStore, DATETIME date) =
    curSumIncomeCashOrder(departmentStore) (-)
    sumAIncomeCashOrder(departmentStore, date);

sumCash 'Сумма' = ABSTRACT NUMERIC[18,4] (OutcomeCashOrder) IN documentSum;

curSumOutcomeCashOrder 'Текущая сумма РКО' (departmentStore) =
    GROUP SUM sumCash(OutcomeCashOrder outcomeCashOrder) IF isPosted(outcomeCashOrder)
    BY departmentStore(outcomeCashOrder);

sumAOutcomeCashOrder 'Сумма РКО после даты/время' (departmentStore, date) =
    GROUP SUM sumCash(OutcomeCashOrder outcomeCashOrder) IF isPosted(outcomeCashOrder) AND
              dateTime(outcomeCashOrder) > DATETIME date
    BY departmentStore(outcomeCashOrder), date;

sumOutcomeCashOrder 'Сумма РКО на дату/время' (DepartmentStore departmentStore, DATETIME date) =
    curSumOutcomeCashOrder(departmentStore) (-)
    sumAOutcomeCashOrder(departmentStore, date);

curSumCash 'Текущая сумма наличных в центральной кассе' (DepartmentStore departmentStore) =
    curSumIncomeCashOrder(departmentStore) (-) curSumOutcomeCashOrder(departmentStore);

sumCash 'Сумма наличных в центральной кассе на дату/время' (DepartmentStore departmentStore, DATETIME date) =
    sumIncomeCashOrder(departmentStore, date) (-) sumOutcomeCashOrder(departmentStore, date);

//---------------------------- Операции с фискальным регистратором ---------------------------------------//

fiscalXReport 'X-отчёт' = ACTION ABSTRACT LIST();
fiscalAdvancePaper 'Прогон ленты' = ACTION ABSTRACT LIST();
fiscalCutReceipt 'Отрезать чек' = ACTION ABSTRACT LIST();
fiscalPrintCopyReceipt 'Копия чека'() = ACTION ABSTRACT LIST ();
fiscalCashSum 'Наличных в кассе'() = ACTION ABSTRACT LIST ();

//--------------------------------- Операции с наличными -------------------------------------------------//

// Интерфес для внесения/изъятия денег с кассы
CLASS ABSTRACT CashOperation 'Операция с наличными';
TABLE cashOperation(CashOperation);

date 'Дата документа' = ABSTRACT DATE (CashOperation) IN documentHeader;
time 'Время документа' = ABSTRACT TIME (CashOperation) IN documentHeader;
dateTime 'Дата/время документа'(CashOperation cashOperation) = dateTimeToDateTime(date(cashOperation), time(cashOperation)) IN documentHeader;

number 'Номер' (cashOperation) = ABSTRACT VARSTRING[30] (CashOperation) IN documentPrm;

basis 'Основание' = ABSTRACT VARSTRING[100] (CashOperation) IN documentPrm;

cashRegister = ABSTRACT CashRegister(CashOperation);
cashRegisterModel (CashOperation cashOperation) = cashRegisterModel(groupCashRegister(cashRegister(cashOperation)));
sidCashRegisterModel 'Код модели' (CashOperation cashOperation) = sid(cashRegisterModel (cashOperation));
numberCashRegister 'Касса' (CashOperation cashOperation) = npp(cashRegister(cashOperation)) IN documentPrm;

fiscalService 'Движение денег в фискальном регистраторе' (cashOperation) = ACTION ABSTRACT LIST (CashOperation) CONFIRM;
fiscalServiceCashRegister 'Движение денег в фискальном регистраторе' (CashOperation cashOperation) = ACTION IF cashRegister(cashOperation) == currentCashRegister() THEN fiscalService(cashOperation);

sum 'Сумма' (cashOperation) = ABSTRACT NUMERIC[18,4] (CashOperation);

isComplete 'Фискализировано' = DATA BOOLEAN (CashOperation);

//---------------------------- Внесение денег ----------------------------------------------------------------//

CLASS IncomeCashOperation 'Внесение денег' : OutcomeCashOrder, CashOperation;
TABLE incomeCashOperation (IncomeCashOperation);

is (IncomeCashOperation cashOperation) = cashOperation IS IncomeCashOperation;

@defineDocumentHeaderCreated(IncomeCashOperation);
@defineDocumentHeaderNumber(IncomeCashOperation);

@defineNumeratedDefault(IncomeCashOperation, 'Внесения денег', 'ВД');

@defineDocumentHeaderTime(IncomeCashOperation);
@deriveDocumentHeaderTimePrefix(IncomeCashOperation, );

cashRegister (incomeCashOperation) = DATA CashRegister (IncomeCashOperation);
numberCashRegister 'Касса внесения денег' (IncomeCashOperation incomeCashOperation) = npp(cashRegister(incomeCashOperation)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 40;

departmentStore = departmentStore(cashRegister(IncomeCashOperation incomeCashOperation));
nameDepartmentStore 'Отдел магазина' (IncomeCashOperation incomeCashOperation) = name(departmentStore(incomeCashOperation)) IN documentHeader
        MINCHARWIDTH 20 PREFCHARWIDTH 20;
fullNameDepartmentStore 'Отдел магазина' (IncomeCashOperation incomeCashOperation) = fullName(departmentStore(incomeCashOperation)) IN documentHeader
        MINCHARWIDTH 20 PREFCHARWIDTH 20;
        
legalEntityStock (IncomeCashOperation incomeCashOperation) = legalEntity(departmentStore(incomeCashOperation));
nameLegalEntityStock 'Компания (Отдел магазина)' (IncomeCashOperation incomeCashOperation) = name(legalEntityStock (incomeCashOperation));
fullNameLegalEntityStock 'Компания (Отдел магазина) полное наим-ие' (IncomeCashOperation incomeCashOperation) = fullName(legalEntityStock (incomeCashOperation));       
addressLegalEntityStock 'Адрес компании (Отдел магазина)' (IncomeCashOperation incomeCashOperation) = address(legalEntityStock (incomeCashOperation));

addressStock 'Адрес (Отдел магазина)' (IncomeCashOperation incomeCashOperation) = address(departmentStore(incomeCashOperation));

country (IncomeCashOperation incomeCashOperation) = country(departmentStore(incomeCashOperation));

sumCash 'Сумма внесения' = DATA NUMERIC[18,4] (IncomeCashOperation) IN documentSum;
basis 'Основание' (IncomeCashOperation incomeCashOperation) =
    'Внесение денег №' + seriesNumber(incomeCashOperation) + ' с кассы ' + numberCashRegister(incomeCashOperation) + ' от ' + date(incomeCashOperation) IN documentPrm;

curSumIncomeOperation 'Текущая сумма внесенных денег' (cashRegister) =
    GROUP SUM sumCash(IncomeCashOperation incomeCashOperation)
    BY cashRegister[CashOperation](incomeCashOperation);

sumAIncomeOperation 'Сумма внесенных денег после даты/время' (cashRegister, date) =
    GROUP SUM sumCash(IncomeCashOperation incomeCashOperation) IF
              dateTime[CashOperation](incomeCashOperation) > DATETIME date
    BY cashRegister[CashOperation](incomeCashOperation), date;

sumIncomeOperation 'Сумма внесенных денег на дату/время' (CashRegister cashRegister, DATETIME date) =
    curSumIncomeOperation(cashRegister) (-)
    sumAIncomeOperation(cashRegister, date);

date[CashDocument](IncomeCashOperation incomeCashOperation) += date(incomeCashOperation);
time[CashDocument](IncomeCashOperation incomeCashOperation) += time(incomeCashOperation);
number[CashDocument](IncomeCashOperation incomeCashOperation) += seriesNumber(incomeCashOperation);
departmentStore(IncomeCashOperation incomeCashOperation) += departmentStore(incomeCashOperation);
basis[CashDocument](IncomeCashOperation incomeCashOperation) += basis(incomeCashOperation);
cashRegister[CashDocument](IncomeCashOperation incomeCashOperation) += cashRegister(incomeCashOperation);
sumCash(IncomeCashOperation incomeCashOperation) += sumCash(incomeCashOperation);
isPosted(IncomeCashOperation incomeCashOperation) += incomeCashOperation IS IncomeCashOperation;
date[CashOperation](IncomeCashOperation incomeCashOperation) += date(incomeCashOperation);
time[CashOperation](IncomeCashOperation incomeCashOperation) += time(incomeCashOperation);
number[CashOperation](IncomeCashOperation incomeCashOperation) += seriesNumber(incomeCashOperation);
basis[CashOperation](IncomeCashOperation incomeCashOperation) += basis(incomeCashOperation);
sum(IncomeCashOperation incomeCashOperation) += sumCash(incomeCashOperation);
cashRegister[CashOperation](IncomeCashOperation incomeCashOperation) += cashRegister(incomeCashOperation);

//------------------------------ Изъятие денег -----------------------------------------------------------//

CLASS OutcomeCashOperation 'Изъятие денег' : IncomeCashOrder, CashOperation;
TABLE outcomeCashOperation (OutcomeCashOperation);

is (OutcomeCashOperation cashOperation) = cashOperation IS OutcomeCashOperation;

@defineDocumentHeaderCreated(OutcomeCashOperation);
@defineDocumentHeaderNumber(OutcomeCashOperation);

@defineNumeratedDefault(OutcomeCashOperation, 'Изъятия денег', 'ВД');

@defineDocumentHeaderTime(OutcomeCashOperation);
@deriveDocumentHeaderTimePrefix(OutcomeCashOperation, );

cashRegister (outcomeCashOperation) = DATA CashRegister (OutcomeCashOperation);
numberCashRegister 'Касса изъятия денег' (OutcomeCashOperation outcomeCashOperation) = npp(cashRegister(outcomeCashOperation)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 40;

departmentStore = departmentStore(cashRegister(OutcomeCashOperation outcomeCashOperation));
nameDepartmentStore 'Отдел магазина' (OutcomeCashOperation outcomeCashOperation) = name(departmentStore(outcomeCashOperation)) IN documentHeader
        MINCHARWIDTH 20 PREFCHARWIDTH 20;
fullNameDepartmentStore 'Отдел магазина' (OutcomeCashOperation outcomeCashOperation) = fullName(departmentStore(outcomeCashOperation)) IN documentHeader
        MINCHARWIDTH 20 PREFCHARWIDTH 20;
        
legalEntityStock (OutcomeCashOperation outcomeCashOperation) = legalEntity(departmentStore(outcomeCashOperation));
nameLegalEntityStock 'Компания (Отдел магазина)' (OutcomeCashOperation outcomeCashOperation) = name(legalEntityStock (outcomeCashOperation));
fullNameLegalEntityStock 'Компания (Отдел магазина) полное наим-ие' (OutcomeCashOperation outcomeCashOperation) = fullName(legalEntityStock (outcomeCashOperation));       
addressLegalEntityStock 'Адрес компании (Отдел магазина)' (OutcomeCashOperation outcomeCashOperation) = address(legalEntityStock (outcomeCashOperation));

addressStock 'Адрес (Отдел магазина)' (OutcomeCashOperation outcomeCashOperation) = address(departmentStore(outcomeCashOperation));

country (OutcomeCashOperation outcomeCashOperation) = country(departmentStore(outcomeCashOperation));
                
sumCash 'Сумма изъятия' = DATA NUMERIC[18,4] (OutcomeCashOperation) IN documentSum;
basis 'Основание' (OutcomeCashOperation outcomeCashOperation) =
    'Изъятие денег №' + seriesNumber(outcomeCashOperation) + ' с кассы ' + numberCashRegister(outcomeCashOperation) + ' от ' + date(outcomeCashOperation) IN documentPrm;

curSumOutcomeOperation 'Текущая сумма изъятых денег' (cashRegister) =
    GROUP SUM sumCash(OutcomeCashOperation outcomeCashOperation)
    BY cashRegister[CashOperation](outcomeCashOperation);

sumAOutcomeOperation 'Сумма изъятых денег после даты/время' (cashRegister, date) =
    GROUP SUM sumCash(OutcomeCashOperation outcomeCashOperation) IF
              dateTime[CashOperation](outcomeCashOperation) > DATETIME date
    BY cashRegister[CashOperation](outcomeCashOperation), date;

sumOutcomeOperation 'Сумма изъятых денег на дату/время' (CashRegister cashRegister, DATETIME date) =
    curSumOutcomeOperation(cashRegister) (-)
    sumAOutcomeOperation(cashRegister, date);

date[CashDocument](OutcomeCashOperation outcomeCashOperation) += date(outcomeCashOperation);
time[CashDocument](OutcomeCashOperation outcomeCashOperation) += time(outcomeCashOperation);
number[CashDocument](OutcomeCashOperation outcomeCashOperation) += seriesNumber(outcomeCashOperation);
departmentStore(OutcomeCashOperation outcomeCashOperation) += departmentStore(outcomeCashOperation);
basis[CashDocument](OutcomeCashOperation outcomeCashOperation) += basis(outcomeCashOperation);
cashRegister[CashDocument](OutcomeCashOperation outcomeCashOperation) += cashRegister(outcomeCashOperation);
sumCash(OutcomeCashOperation outcomeCashOperation) += sumCash(outcomeCashOperation);
isPosted(OutcomeCashOperation outcomeCashOperation) += outcomeCashOperation IS OutcomeCashOperation;
date[CashOperation](OutcomeCashOperation outcomeCashOperation) += date(outcomeCashOperation);
time[CashOperation](OutcomeCashOperation outcomeCashOperation) += time(outcomeCashOperation);
number[CashOperation](OutcomeCashOperation outcomeCashOperation) += seriesNumber(outcomeCashOperation);
basis[CashOperation](OutcomeCashOperation outcomeCashOperation) += basis(outcomeCashOperation);
sum(OutcomeCashOperation outcomeCashOperation) += -sumCash(outcomeCashOperation);
cashRegister[CashOperation](OutcomeCashOperation outcomeCashOperation) += cashRegister(outcomeCashOperation);

//------------------------------ Формы ---------------------------------------------------------------------------//

sumCashForIncomeOperation 'Сумма внесения денег' = DATA LOCAL NUMERIC[18,4] (CashRegister);
doNotFiscalisation 'Не фискализировать' = DATA LOCAL BOOLEAN (CashRegister);

FORM addIncomeCashOperation 'Внесение денег'

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) date = OBJVALUE

    OBJECTS t = TIME FIXED PANEL
    PROPERTIES(t) time = OBJVALUE

    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES(d) name SELECTOR

    OBJECTS c = CashRegister
    PROPERTIES(c) READONLY npp
    PROPERTIES(c) sumCashForIncomeOperation, doNotFiscalisation

    FILTERS departmentStore(c) == d
    FILTERGROUP filtersCashRegister
        FILTER 'Только для текущей кассы' c==currentCashRegister() 'F9' DEFAULT;

;

DESIGN addIncomeCashOperation {
    NEW topContainer {
        fill = 1;
        NEW firstCase {
            type = CONTAINERH;
            NEW dateTimeContainer{
                caption = 'Дата/время';
                MOVE PROPERTY(date);
                MOVE PROPERTY(time);
            }
            MOVE d.box;
        }

        MOVE c.box;
    }
    MOVE functions.box;
}

FORM incomeCashOperation 'Внесение денег'

    OBJECTS i = IncomeCashOperation FIXED PANEL
    PROPERTIES(i) number, series, date, time, 
                  nameDepartmentStore ,
                  numberCashRegister, sumCash, basis

    EDIT IncomeCashOperation OBJECT i
;

DESIGN incomeCashOperation {
    NEW topContainer{
        type = CONTAINERH;
        NEW firstCase{
            type = CONTAINERH;
            caption = 'Шапка документа';
            MOVE PROPERTY(numberCashRegister(i));
            MOVE PROPERTY(number(i));
            MOVE PROPERTY(series(i));
            MOVE PROPERTY(date(i));
            MOVE PROPERTY(time(i));
        }
        NEW secondCase{
            caption = 'Параметры документа';
            MOVE PROPERTY(nameDepartmentStore(i));
            MOVE PROPERTY(basis(i));
        }
        NEW thirdCase{
            caption = 'Суммы';
            MOVE PROPERTY(sumCash(i));
        }
    }
    MOVE functions.box;
}

addIncomeCashOperationForm 'Внесение денег' () = ACTION NEWSESSION {

    FORM addIncomeCashOperation OBJECTS d = departmentStore(currentCashRegister()) ;
    IF formResult() == FormResult.ok THEN {
        LOCAL fail = BOOLEAN();
        FOR sumCashForIncomeOperation(CashRegister cashRegister) DO {
            FOR ADDOBJ c = IncomeCashOperation DO {
                cashRegister(c) <- cashRegister;
                sumCash(c) <- sumCashForIncomeOperation(cashRegister);
                generateSeriesNumber(c);
                IF NOT doNotFiscalisation(cashRegister) THEN {
                    fiscalServiceCashRegister(c);                                    
                }
                IF cashRegisterModel(groupCashRegister(cashRegister)) AND NOT isComplete(c) THEN
                    fail() <- TRUE;
            }
        }
        IF NOT fail() THEN
            apply();
    }
} TOOLBAR;

edit 'Редактировать' (incomeCashOperation) = ACTION EDITFORM IncomeCashOperation;

sumCashForOutcomeOperation 'Сумма изъятия денег' = DATA LOCAL NUMERIC[18,4] (CashRegister);

FORM addOutcomeCashOperation 'Изъятие денег'

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) date = OBJVALUE

    OBJECTS t = TIME FIXED PANEL
    PROPERTIES(t) time = OBJVALUE

    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES(d) name SELECTOR

    OBJECTS c = CashRegister
    PROPERTIES(c) READONLY npp
    PROPERTIES(c) sumCashForOutcomeOperation, doNotFiscalisation

    FILTERS departmentStore(c) == d
    FILTERGROUP filtersCashRegister
        FILTER 'Только для текущей кассы' c==currentCashRegister() 'F9' DEFAULT;

;

DESIGN addOutcomeCashOperation {
    NEW topContainer {
        fill = 1;
        NEW firstCase {
            type = CONTAINERH;
            NEW dateTimeContainer{
                caption = 'Дата/время';
                MOVE PROPERTY(date);
                MOVE PROPERTY(time);
            }
            MOVE d.box;
        }
        MOVE c.box;
    }
    MOVE functions.box;
}

FORM outcomeCashOperation 'Изъятие денег'

    OBJECTS o = OutcomeCashOperation FIXED PANEL
    PROPERTIES(o) number, series, date, time, nameDepartmentStore,
                  numberCashRegister, sumCash, basis

    EDIT OutcomeCashOperation OBJECT o;
;

DESIGN outcomeCashOperation {
    NEW topContainer{
        type = CONTAINERH;
        NEW firstCase{
            type = CONTAINERH;
            caption = 'Шапка документа';
            MOVE PROPERTY(numberCashRegister(o));
            MOVE PROPERTY(number(o));
            MOVE PROPERTY(series(o));
            MOVE PROPERTY(date(o));
            MOVE PROPERTY(time(o));
        }
        NEW secondCase{
            caption = 'Параметры документа';
            MOVE PROPERTY(nameDepartmentStore(o));
            MOVE PROPERTY(basis(o));
        }
        NEW thirdCase{
            caption = 'Суммы';
            MOVE PROPERTY(sumCash(o));
        }
    }
    MOVE functions.box;
}

addOutcomeCashOperationForm 'Изъятие денег' () = ACTION NEWSESSION {
    FORM addOutcomeCashOperation OBJECTS d = departmentStore(currentCashRegister()) ;
    IF formResult() == FormResult.ok THEN {
        LOCAL fail = BOOLEAN();
        FOR sumCashForOutcomeOperation(CashRegister cashRegister) ADDOBJ c = OutcomeCashOperation DO {
            cashRegister(c) <- cashRegister;
            sumCash(c) <- sumCashForOutcomeOperation(cashRegister);
            generateSeriesNumber(c);
            IF NOT doNotFiscalisation(cashRegister) THEN {            
                fiscalServiceCashRegister(c);
            }    
            IF cashRegisterModel(groupCashRegister(cashRegister)) AND NOT isComplete(c) THEN
                fail() <- TRUE;
        }
         IF NOT fail() THEN
            apply();
    }
} TOOLBAR;

edit 'Редактировать' (outcomeCashOperation) = ACTION EDITFORM OutcomeCashOperation;

FORM operationCashRegister 'Кассовые операции'

    OBJECTS interval = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    PROPERTIES numberCurrentCashRegister() TODRAW interval FORCE PANEL

    OBJECTS c = CashOperation
    PROPERTIES(c) READONLY objectClassName, number, date, time,
                           numberCashRegister, sum, basis
    PROPERTIES(c) DELETE FORCE PANEL TOOLBAR
    PROPERTIES(c) isComplete FORCE GRID
//    PROPERTIES addIncomeCashOperationForm() TODRAW c FORCE PANEL TOOLBAR
//    PROPERTIES addOutcomeCashOperationForm() TODRAW c FORCE PANEL TOOLBAR
    PROPERTIES eic = edit[IncomeCashOperation](c) SHOWIF is[IncomeCashOperation](c)
    PROPERTIES eoc = edit[OutcomeCashOperation](c) SHOWIF is[OutcomeCashOperation](c)

    FILTERS date(c) >= dFrom,
            date(c) <= dTo,
            cashRegister(c) == currentCashRegister()

    PROPERTIES fiscalXReport() SHOWIF currentCashRegister()
    ORDER BY date(c), time(c)
;

DESIGN operationCashRegister {

    NEW top {
        type = CONTAINERH;
        MOVE interval.box {
            caption = 'Шапка документа';
            type = CONTAINERH;
            PROPERTY(objFrom) {
                caption = 'Дата (с)';
            }
            PROPERTY(objTo) {
                caption = 'Дата (по)';
            }
        }
    }

    NEW actions {
        caption = 'Действия с кассой';
        type = CONTAINERH;
        MOVE PROPERTY(fiscalXReport()) { font = '24'; }
    }
    MOVE c.box;
    MOVE functions.box;
}

NAVIGATOR {
    retailDashboardNavigator {
        ADD operationCashRegister;
    }
}