MODULE Promotion;

REQUIRE ItemManager, PriceListDashboard, PriceListPromotion, PurchaseOrder;

NAMESPACE Promotion;

CLASS Promotion 'Акция';
TABLE promotion (Promotion);

CLASS PromotionDetail 'Строка акции';
TABLE promotionDetail (PromotionDetail);

changedTime 'Время последнего изменения'= DATA DATETIME (PromotionDetail);
changedTime (PromotionDetail detail) <- currentDateTime() WHEN CHANGED(detail IS PromotionDetail);
    
changedUser = DATA CustomUser (PromotionDetail);
changedNameUser 'Изменен пользователем' (PromotionDetail detail) = name[Contact](changedUser(detail)) CHARWIDTH 10;
changedUser (PromotionDetail detail) <- currentUser() WHEN CHANGED (detail IS PromotionDetail);
    
changedComputer = DATA Computer (PromotionDetail);
changedHostnameComputer 'Изменен на компьютере' (PromotionDetail detail) = hostname(changedComputer(detail)) CHARWIDTH 10;
changedComputer (PromotionDetail detail) <- currentComputer() WHEN CHANGED(detail IS PromotionDetail);

promotion 'Акция' = DATA Promotion (PromotionDetail);

name 'Наименование' = DATA VARSTRING[100] (Promotion) CHARWIDTH 30;
fromDate 'Дата с' = DATA DATE (Promotion);
toDate 'Дата по' = DATA DATE (Promotion);

name 'Наименование' (PromotionDetail detail) = name(promotion(detail));
fromDate 'Дата с' (PromotionDetail detail) = fromDate(promotion(detail));
toDate 'Дата по' (PromotionDetail detail) = toDate(promotion(detail));

CLASS PromotionType 'Тип акции';
TABLE promotionType (PromotionType);

id 'Код' = DATA VARISTRING[100] (PromotionType) IN base;
promotionType(id) = GROUP AGGR (PromotionType type) BY id(type);

name 'Наименование' = DATA VARSTRING[100] (PromotionType) IN base CHARWIDTH 10;

promotionType 'Тип акции' = DATA PromotionType (Promotion);
namePromotionType 'Тип акции' (Promotion promotion) = name(promotionType(promotion));

promotionType 'Тип акции' = DATA PromotionType (PromotionDetail);
namePromotionType 'Тип акции' (PromotionDetail detail) = name(promotionType(detail));
overPromotionType 'Тип акции' (PromotionDetail detail) = OVERRIDE promotionType(detail), promotionType(promotion(detail));
nameOverPromotionType 'Тип акции' (PromotionDetail detail) = name(overPromotionType(detail));

CLASS ExtraPromotionType 'Тип подакции';
TABLE extraPromotionType (ExtraPromotionType);

id 'Код' = DATA VARSTRING[100] (ExtraPromotionType) IN base;
extraPromotionType(id) = GROUP AGGR (ExtraPromotionType type) BY id(type);

name 'Наименование' = DATA VARSTRING[100] (ExtraPromotionType) IN base CHARWIDTH 10;

extraPromotionType 'Тип подакции' = DATA ExtraPromotionType (Promotion);
nameExtraPromotionType 'Тип подакции' (Promotion promotion) = name(extraPromotionType(promotion));

extraPromotionType 'Тип подакции' = DATA ExtraPromotionType (PromotionDetail);
nameExtraPromotionType 'Тип подакции' (PromotionDetail detail) = name(extraPromotionType(detail));
overExtraPromotionType 'Тип подакции' (PromotionDetail detail) = OVERRIDE extraPromotionType(detail), extraPromotionType(promotion(detail));
nameOverExtraPromotionType 'Тип подакции' (PromotionDetail detail) = name(overExtraPromotionType(detail));

sku 'Товар' = DATA Sku (PromotionDetail);

idBarcodeSku 'Штрихкод' (PromotionDetail detail) = idBarcode(sku(detail));
nameSkuGroup2 'Категория' (PromotionDetail detail) = nameSkuGroup2(sku(detail));
nameSkuGroup3 'Направление' (PromotionDetail detail) = nameSkuGroup3(sku(detail));
nameSkuGroup4 'Группа' (PromotionDetail detail) = nameSkuGroup4(sku(detail));
nameBrand 'Бренд' (PromotionDetail detail) = nameBrand(sku(detail));
nameCustomUser 'Категорийный менеджер' (PromotionDetail detail) = nameCustomUser(skuGroup(sku(detail)));
nameSku 'Товар' (PromotionDetail detail) = name(sku(detail));

TABLE promotionDetailLegalEntity (PromotionDetail, LegalEntity);
countStocks 'Количество складов компании' = DATA INTEGER (PromotionDetail, LegalEntity);
nameSuppliers 'Поставщики' = GROUP CONCAT name(LegalEntity company) IF countStocks(PromotionDetail detail, company), ', ' BY detail  CHARWIDTH 30;
in (Promotion p, LegalEntity c) = TRUE IF [= GROUP SUM countStocks(PromotionDetail detail, LegalEntity company) BY promotion(detail), company](p,c);

recalculateCountStocks (PromotionDetail d) = {
    countStocks(d, LegalEntity company) <- [= GROUP SUM 1 IF priceA(defaultPriceListType(),sku(PromotionDetail detail), Stock stock, LegalEntity company, toDateTime(fromDate(detail))) BY detail, company](d, company);
}

CLASS Flyer 'Листовка';
TABLE flyer (Flyer);

id 'Код' = DATA VARSTRING[100] (Flyer) IN base;
flyer(id) = GROUP AGGR (Flyer flyer) BY id(flyer);

name 'Наименование' = DATA VARSTRING[100] (Flyer) IN base CHARWIDTH 10;

flyer 'Листовка' = DATA Flyer (Promotion);
nameFlyer 'Листовка' (Promotion promotion) = name(flyer(promotion));

flyer 'Листовка' = DATA Flyer (PromotionDetail);
nameFlyer 'Листовка' (PromotionDetail detail) = name(flyer(detail));
overFlyer 'Листовка' (PromotionDetail detail) = OVERRIDE flyer(detail), flyer(promotion(detail));
nameOverFlyer 'Листовка' (PromotionDetail detail) = name(overFlyer(detail));

paymentForFlyer 'Оплата участия в листовке' = DATA BOOLEAN (PromotionDetail);
decreaseSupplierPercent 'Уменьшение % маркетинга поставщика' = DATA BOOLEAN (PromotionDetail);

supplierPromotionDiscount 'Скидка поставщика в Акцию' = DATA NUMERIC[8,3] (PromotionDetail);

valueVAT 'Ставка НДС' = DATA NUMERIC[10,5] (PromotionDetail);
recalculateValueVAT (PromotionDetail d) = {
    valueVAT(d) <- valueVAT(sku(d));
}

price 'Стандартная цена без НДС' = DATA NUMERIC[16,4] (PromotionDetail);
recalculatePrice (PromotionDetail d) = {
    price(d) <- [=GROUP MAX prevPriceA(defaultPriceListType(), sku(PromotionDetail detail), Stock stock, toDateTime(fromDate(detail))) BY detail](d);
}

markup 'Стандартная наценка' = DATA NUMERIC[8,3] (PromotionDetail);
retailPrice 'Розничная цена стандартная' = DATA NUMERIC[16,4] (PromotionDetail);

promotionPrice 'Цена для акции без НДС' = DATA NUMERIC[16,4] (PromotionDetail);
promotionVATPrice 'Цена для акции с НДС' = DATA NUMERIC[16,4] (PromotionDetail);
promotionMarkup 'Акционная наценка' = DATA NUMERIC[8,3] (PromotionDetail);
proposedPromotionPrice 'Предлагаемая акционная цена' = DATA NUMERIC[16,4] (PromotionDetail);
promotionMarkupSum 'Сумма акционной наценки' = DATA NUMERIC[16,4] (PromotionDetail);
discount 'Акционная скидка' = DATA NUMERIC[8,3] (PromotionDetail);

CLASS StatusSku 'Статус товара';
TABLE statusSku (StatusSku);

id 'Код' = DATA VARSTRING[100] (StatusSku) IN base;
statusSku(id) = GROUP AGGR (StatusSku status) BY id(status);

name 'Наименование' = DATA VARSTRING[100] (StatusSku) IN base CHARWIDTH 10;

statusSku 'Статус товара после акции' = DATA StatusSku (PromotionDetail);
nameStatusSku 'Статус товара после акции' (PromotionDetail detail) = name(statusSku(detail));

CLASS PromoType 'Тип промо';
TABLE promoType (PromoType);

id 'Код' = DATA VARSTRING[100] (PromoType) IN base;
promoType(id) = GROUP AGGR (PromoType type) BY id(type);

name 'Наименование' = DATA VARSTRING[100] (PromoType) IN base CHARWIDTH 10;

promoType 'Тип промо' = DATA PromoType (Promotion);
namePromoType 'Тип промо' (Promotion promotion)= name(promoType(promotion));
 
promoType 'Тип промо' = DATA PromoType (PromotionDetail);
namePromoType 'Тип промо' (PromotionDetail detail) = name(promoType(detail));
overPromoType 'Тип промо' (PromotionDetail detail) = OVERRIDE promoType(detail), promoType(promotion(detail));
nameOverPromoType 'Тип промо' (PromotionDetail detail) = name(overPromoType(detail)); 

CLASS DiscountType 'Тип скидки';
TABLE discountType (DiscountType);

id 'Код' = DATA VARSTRING[100] (DiscountType) IN base;
discountType(id) = GROUP AGGR (DiscountType type) BY id(type);

name 'Наименование' = DATA VARSTRING[100] (DiscountType) IN base CHARWIDTH 10;

discountType 'Тип скидки' = DATA DiscountType (PromotionDetail);
nameDiscountType 'Тип скидки' (PromotionDetail detail) = name(discountType(detail));

CLASS DiscountingType 'Тип начисления скидки';
TABLE discountingType (DiscountingType);

id 'Код' = DATA VARSTRING[100] (DiscountingType) IN base;
discountingType(id) = GROUP AGGR (DiscountingType type) BY id(type);

name 'Наименование' = DATA VARSTRING[100] (DiscountingType) IN base CHARWIDTH 10;

discountingType 'Тип начисления скидки/бонуса' = DATA DiscountingType (PromotionDetail);
nameDiscountingType 'Тип начисления скидки/бонуса' (PromotionDetail detail) = name(discountingType(detail));

bonusSum 'Сумма бонусов' = DATA NUMERIC[16,5] (PromotionDetail);
bonusPercent 'Процент бонусов' = DATA NUMERIC[8,3] (PromotionDetail);

//актуальные виды акции
subway 'Метро' = DATA BOOLEAN (PromotionDetail);
radio 'Радио' = DATA BOOLEAN (PromotionDetail);
citylight 'Ситилайт' = DATA BOOLEAN (PromotionDetail);
billboard 'Билборд' = DATA BOOLEAN (PromotionDetail);
TVcommercial 'ТВ реклама' = DATA BOOLEAN (PromotionDetail);
stockTVcommercial 'ТВ реклама в магазинах' = DATA BOOLEAN (PromotionDetail);
elevator 'Лифты' = DATA BOOLEAN (PromotionDetail);
newspaper 'Газеты/журналы' = DATA BOOLEAN (PromotionDetail);
internet 'Интернет' = DATA BOOLEAN (PromotionDetail);
transport 'Реклама на транспорте' = DATA BOOLEAN (PromotionDetail);
sms 'СМС рассылка' = DATA BOOLEAN (PromotionDetail);
email 'E-mail рассылка' = DATA BOOLEAN (PromotionDetail);
shoppingRoomPoster 'Плакат в торговом зале' = DATA BOOLEAN (PromotionDetail);

comment 'Замечания' = DATA VARISTRING[255] (PromotionDetail) CHARWIDTH 50;

approved 'Утвержден' = DATA BOOLEAN (PromotionDetail);
excluded 'Исключен после утверждения' = DATA BOOLEAN (PromotionDetail);

//политика безопасности
proposeDate 'Дата предложения' = DATA DATE (Promotion);
approveDate 'Дата утверждения'= DATA DATE (Promotion);

allowEditProposedPromotionDetail 'Разрешить редактировать строки акции после даты предложения' = DATA BOOLEAN (UserRole);
allowEditApprovedPromotionDetail 'Разрешить редактировать строки акции после даты утверждения' = DATA BOOLEAN (UserRole);

EXTEND FORM userRole
    PROPERTIES(ur) allowEditProposedPromotionDetail, allowEditApprovedPromotionDetail
;

showApproved (PromotionDetail detail) = currentDate() >= proposeDate(promotion(detail));
showExcluded (PromotionDetail detail) = currentDate() >= approveDate(promotion(detail));

CONSTRAINT DROPPED(PromotionDetail detail IS PromotionDetail) AND currentDate() >= proposeDate(PREV(promotion(detail))) AND 
    (NOT allowEditProposedPromotionDetail(mainRole(currentUser())) OR currentDate() >= approveDate(PREV(promotion(detail))))
        MESSAGE 'Запрещено удалять строки акции после наступления даты предложения (утверждения)';
CONSTRAINT SET(PromotionDetail detail IS PromotionDetail) AND currentDate() >= proposeDate(promotion(detail)) AND 
    (NOT allowEditProposedPromotionDetail(mainRole(currentUser())) OR currentDate() >= approveDate(PREV(promotion(detail))))
        MESSAGE 'Запрещено добавлять строки акции после наступления даты предложения (утверждения)';
CONSTRAINT DROPCHANGED(sku(PromotionDetail detail)) AND currentDate() >= proposeDate(promotion(detail)) AND 
    (NOT allowEditProposedPromotionDetail(mainRole(currentUser())) OR currentDate() >= approveDate(PREV(promotion(detail))))
        MESSAGE 'Запрещено изменять товар после наступления даты предложения (утверждения)';

//CONSTRAINT DROPCHANGED(PromotionDetail detail) AND currentDate() >= approveDate(promotion(detail)) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))
    //MESSAGE 'Запрещено удалять строки акции после даты утверждения';
CONSTRAINT (CHANGED(price(PromotionDetail detail)) OR CHANGED(retailPrice(detail)) OR CHANGED(approved(detail))) AND 
    currentDate() >= approveDate(PREV(promotion(detail))) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))
        MESSAGE 'Запрещено изменять в строке акции Стандартную цену без НДС, Розничную цену и Утверждение';


//расчетные данные
backgroundCur 'Цвет' (PromotionDetail detail) = RGB(218,255,196) IF detail IS PromotionDetail;
backgroundAfter 'Цвет' (PromotionDetail detail) = RGB(255,203,197) IF detail IS PromotionDetail;
backgroundPromo 'Цвет' (PromotionDetail detail) = RGB(255,157,146) IF detail IS PromotionDetail;

@defineMovementSku(promotionDetail); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(promotionDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(promotionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(promotionDetail); //-- показываем по нажатию правой клавиши изменение цены товара

@defineInfoSku(promotionDetail); //-- показываем по нажатию правой клавиши информацию по товару

FORM promotion 'Акция'
    OBJECTS p = Promotion PANEL 
    PROPERTIES(p) name, fromDate, toDate, namePromotionType, nameExtraPromotionType, namePromoType, nameFlyer,
                  proposeDate, approveDate
    
    OBJECTS d = PromotionDetail
    PROPERTIES(d) idBarcodeSku, nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameCustomUser, nameBrand, nameSku, valueVAT, nameSuppliers,
                  paymentForFlyer, decreaseSupplierPercent, supplierPromotionDiscount
    PROPERTIES(d) BACKGROUND backgroundCur(d) price, markup, retailPrice
    PROPERTIES(d) BACKGROUND backgroundAfter(d) promotionPrice BACKGROUND backgroundPromo(d), promotionVATPrice, promotionMarkup,
                  proposedPromotionPrice BACKGROUND backgroundPromo(d), promotionMarkupSum, discount
    PROPERTIES(d) nameStatusSku, nameOverPromotionType, nameOverExtraPromotionType, nameOverPromoType, nameOverFlyer, approved SHOWIF showApproved(d), excluded SHOWIF showExcluded(d), NEW, deleted = DELETE GRID
    ORDER nameSku(d)
    FILTERS promotion(d) == p,
            access(currentUser(), sku(d)) OR NOT sku(d)
            
    OBJECTS dd = PromotionDetail
    PROPERTIES(dd) idBarcodeSku, nameSku, nameDiscountType, nameDiscountingType, bonusSum, bonusPercent, subway, radio, citylight, billboard, TVcommercial, 
                   stockTVcommercial, elevator, newspaper, internet, transport, sms, email, shoppingRoomPoster, comment, changedTime, changedNameUser,
                   changedHostnameComputer
    ORDER nameSku(dd)
    FILTERS promotion(dd) == p,
            access(currentUser(), sku(dd)) OR NOT sku(dd)
                 
    EDIT Promotion OBJECT p
;

DESIGN promotion {
    NEW top {
        type = CONTAINERH;
        NEW headContainer {
            caption = 'Шапка документа';       
            type = CONTAINERV;
            NEW first {
                type = CONTAINERH;
                MOVE PROPERTY(name(p));                
            }
            NEW second {
                type = CONTAINERH;
                MOVE PROPERTY(namePromotionType(p));
                MOVE PROPERTY(nameExtraPromotionType(p));  
            }
            NEW third {
                type = CONTAINERH;
                 MOVE PROPERTY(namePromoType(p));
                 MOVE PROPERTY(nameFlyer(p));
            }
            NEW fourth {
                caption = 'Период действия';
                type = CONTAINERH;
                MOVE PROPERTY(fromDate(p));
                MOVE PROPERTY(toDate(p));
            }
            NEW fifth {
                caption = 'Даты закрытия доступа';
                type = CONTAINERH;
                MOVE PROPERTY(proposeDate(p));
                MOVE PROPERTY(approveDate(p));
            }
        }
    }
    NEW detailContainer {
        fill = 1;
        type = TABBED;
        MOVE BOX(d);
        MOVE BOX(dd) { caption = 'Строка акции (доп.)'; }
    }

    MOVE TOOLBARBOX;
}

FORM promotions 'Акции'
    OBJECTS p = Promotion
    PROPERTIES(p) READONLY name, fromDate, toDate, proposeDate, approveDate
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE
    ORDER toDate(p) DESC, name(p) 
    
    OBJECTS d = PromotionDetail
    PROPERTIES(d) READONLY idBarcodeSku, nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameCustomUser, nameBrand, nameSku, nameOverPromotionType, nameOverExtraPromotionType,
                  nameSuppliers, nameOverFlyer, paymentForFlyer, decreaseSupplierPercent, supplierPromotionDiscount, valueVAT
    PROPERTIES(d) READONLY BACKGROUND backgroundCur(d) price, markup, retailPrice
    PROPERTIES(d) READONLY BACKGROUND backgroundAfter(d) promotionPrice BACKGROUND backgroundPromo(d), promotionVATPrice, promotionMarkup,
                  proposedPromotionPrice BACKGROUND backgroundPromo(d), promotionMarkupSum, discount
    PROPERTIES(d) READONLY nameStatusSku, nameOverPromoType, nameDiscountType, nameDiscountingType, bonusSum, bonusPercent, changedTime, 
                  changedNameUser, changedHostnameComputer, approved SHOWIF showApproved(d), excluded SHOWIF showExcluded(d)
    ORDER nameSku(d)
    FILTERS promotion(d) == p,
            access(currentUser(), sku(d)) OR NOT sku(d)
    
    LIST Promotion OBJECT p
;

DESIGN promotions {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;
        type = SPLITV;
        MOVE BOX(p);
        NEW detailContainer {
            type = TABBED;
            fill = 1;
            MOVE BOX(d);
        }
    }
}

recalculatePrices (PromotionDetail d) = {
    recalculateValueVAT(d);
    recalculatePrice(d);
    
    recalculateCountStocks (d);
}

recalculatePrices 'Пересчитать цены поставщиков' () = {
    FOR [= FILTER promotion.d](PromotionDetail d) DO
        recalculatePrices(d);
} CONFIRM;

EXTEND FORM promotion
    PROPERTIES recalculatePrices() TODRAW d TOOLBAR
;

WHEN LOCAL FORMS promotion (CHANGED(sku(PromotionDetail detail)) OR CHANGED(fromDate(detail))) DO {
    recalculatePrices(detail);
    retailPrice(detail) <- [=GROUP MAX prevPriceA(promotionPriceListType(), sku(PromotionDetail detail), Stock stock, toDateTime(fromDate(detail))) BY detail](detail);
}
WHEN LOCAL FORMS promotion (CHANGED(promotionPrice(PromotionDetail detail)) OR CHANGED(price(detail))) AND price(detail) > 0.0 DO {
    supplierPromotionDiscount(detail) <- NUMERIC[8,3]((1.0 - promotionPrice(detail)/price(detail)) * 100.0);
}
WHEN LOCAL FORMS promotion (CHANGED(retailPrice(PromotionDetail detail)) OR CHANGED(valueVAT(detail)) OR CHANGED(price(detail))) AND price(detail) > 0.0 DO {
    markup(detail) <- NUMERIC[8,3]((((retailPrice(detail)/(1.0+valueVAT(detail)/100.0))-price(detail))/price(detail)) * 100.0);
}
WHEN LOCAL FORMS promotion (CHANGED(promotionPrice(PromotionDetail detail)) OR CHANGED(valueVAT(detail))) DO {
    promotionVATPrice(detail) <- NUMERIC[16,4](promotionPrice(detail)*(1.0+valueVAT(detail)/100.0));
}
WHEN LOCAL FORMS promotion (CHANGED(promotionMarkupSum(PromotionDetail detail)) OR CHANGED(promotionPrice(detail))) AND promotionPrice(detail) > 0.0 DO {
    promotionMarkup(detail) <- NUMERIC[8,3]((promotionMarkupSum(detail)/promotionPrice(detail)) * 100.0);
}
WHEN LOCAL FORMS promotion (CHANGED(proposedPromotionPrice(PromotionDetail detail)) OR CHANGED(valueVAT(detail)) OR CHANGED(promotionPrice(detail))) DO {
    promotionMarkupSum(detail) <- NUMERIC[16,4]((proposedPromotionPrice(detail)/(1.0+valueVAT(detail)/100.0))-promotionPrice(detail));
}
WHEN LOCAL FORMS promotion (CHANGED(proposedPromotionPrice(PromotionDetail detail)) OR CHANGED(retailPrice(detail))) AND retailPrice(detail) > 0.0 DO {
    discount(detail) <- NUMERIC[8,3]((1.0-proposedPromotionPrice(detail)/retailPrice(detail)) * 100.0);
}

supplier 'Поставщик' (Stock stock, PromotionDetail detail) = companyA(defaultPriceListType(), sku(detail), stock, toDateTime(fromDate(detail)));
nameSupplier 'Поставщик' (Stock stock, PromotionDetail detail) = name(supplier(stock,detail));

status 'Статус' (PromotionDetail detail) = CASE
                                                            WHEN excluded(detail) THEN 'Удален'
                                                            WHEN approved(detail) THEN 'Добавлен';

currentBalance 'Текущий остаток' (Stock stock, PromotionDetail detail) = currentBalance(sku(detail),stock);
averageSold 'Продаж в день' (Stock stock, PromotionDetail detail) = averageSold(sku(detail),stock);

createOrder 'Создать заказ' (Stock stock, PromotionDetail detail) = {
    NEWSESSION {
        NEW o = Purchase.UserOrder {
            customer(o) <- legalEntity(stock);
            customerStock(o) <- stock;
            supplier(o) <- supplier(stock,detail);
            
            NEW d = Purchase.UserOrderDetail {
                order(d) <- o;
                sku(d) <- sku(detail);
            }
            
            SHOW userOrder OBJECTS o = o DOCKED;
        }
    }
} TOOLBAR;

FORM promotionsStock 'Акции (магазин)'
    OBJECTS s = Stock PANEL
    PROPERTIES(s) name SELECTOR
    FILTERS isCompany(s),
            accessCompany(s)

    OBJECTS p = Promotion
    PROPERTIES(p) READONLY name, fromDate, toDate, proposeDate, approveDate
    ORDER toDate(p) DESC, name(p)
    FILTERGROUP current
        FILTER 'Действующие' currentDate() >= fromDate(p) AND currentDate() <= toDate(p) DEFAULT
    
    OBJECTS d = PromotionDetail
    PROPERTIES(d) READONLY idBarcodeSku, nameSku, nameOverPromotionType, nameOverExtraPromotionType, nameOverFlyer
    PROPERTIES(s,d) currentBalance, averageSold
    PROPERTIES(d) READONLY BACKGROUND backgroundPromo(d) promotionPrice, proposedPromotionPrice
    PROPERTIES(d) READONLY nameStatusSku, nameOverPromoType, nameDiscountType, nameDiscountingType, status
    ORDER nameSku(d)
    FILTERS promotion(d) == p,
            access(currentUser(), sku(d)) OR NOT sku(d),
            approved(d)
    PROPERTIES nameSupplier(s,d) AFTER nameOverExtraPromotionType(d), createOrder(s,d)
;

DESIGN promotionsStock {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;
        type = SPLITV;
        
        NEW filtersBox {                       
            fill = 1;
            MOVE BOX(s);
            
            MOVE BOX(p) {
                fill = 1;
            }
        }
        MOVE BOX(d) {
            fill = 2;
        }
    }
}

NAVIGATOR {
    priceListDocuments {
        NEW promotions;
        NEW promotionsStock;
    }
}

//-------------------Создание прайсов------------------

promotion = DATA Promotion (UserPriceList);

// Операция по умолчанию для поставщиков
defaultSupplierOperation = DATA PriceList.Operation();
nameDefaultSupplierOperation 'Операция для протокола согласования цен по акции' = name(defaultSupplierOperation());
EXTEND FORM options
    PROPERTIES() nameDefaultSupplierOperation
;
DESIGN options {
    price {
        MOVE PROPERTY(nameDefaultSupplierOperation());
    }
}

createPriceList 'Создать прайсы' (Promotion p) = { 
    NEWSESSION {
        NEW priceList = UserPriceList {
            isPosted(priceList) <- TRUE;
            fromDate(priceList) <- fromDate(p);
            fromTime(priceList) <- 00:00;
            toDate(priceList) <- toDate(p);
            operation(priceList) <- [= GROUP LAST PriceList.Operation o IF isPromotion(o)]();
            company(priceList) <- dataLegalEntity(operation(priceList));
            currency(priceList) <- defaultCurrency(operation(priceList));
            note(priceList) <- name(p);
            
            allStocks(priceList) <- allStocks(operation(priceList));
            dataIn(priceList, StockGroup stockGroup) <- dataIn(stockGroup, operation(priceList));
            dataIn(priceList, Stock stock) <- dataIn(stock, operation(priceList));

            in(priceList, DataPriceListType type) <- change(type, operation(priceList));
            show(priceList, DataPriceListType type) <- show(type, operation(priceList));
            
            FOR promotion(PromotionDetail pd) == p NEW detail = UserPriceListDetail DO {
                priceList(detail) <- priceList;
                sku(detail) <- sku(pd);
                price(detail, DataPriceListType type) <- proposedPromotionPrice(pd) WHERE in(priceList, type);
                priceBefore(detail) <- retailPrice(pd);
            }
            promotion(priceList) <- p;
        }
        
        FOR in(p, LegalEntity company) NEW priceList = UserPriceList DO {
            isPosted(priceList) <- TRUE;
            fromDate(priceList) <- fromDate(p);
            toDate(priceList) <- toDate(p);
            operation(priceList) <- defaultSupplierOperation();
            company(priceList) <- company;
            currency(priceList) <- defaultCurrency(operation(priceList));
            note(priceList) <- name(p);
            
            dataIn(priceList, Stock stock) <- TRUE IF [= GROUP SUM 1 IF prevPriceA(defaultPriceListType(), sku(PromotionDetail d), Stock stock, LegalEntity company, DATETIME dateTime) BY promotion(d), stock, company, dateTime](p, stock, company, toDateTime(fromDate(p))) ;
            
            in(priceList, DataPriceListType type) <- TRUE WHERE type == defaultPriceListType();
            show(priceList, DataPriceListType type) <- TRUE WHERE type == defaultPriceListType();
            
            FOR promotion(PromotionDetail pd) == p AND countStocks(pd,company) NEW detail = UserPriceListDetail DO {
                priceList(detail) <- priceList;
                sku(detail) <- sku(pd);
                price(detail, DataPriceListType type) <- promotionPrice(pd) WHERE in(priceList, type);
            }
            promotion(priceList) <- p;
        }
        APPLY;
    }
} CONFIRM;

EXTEND FORM promotions
    PROPERTIES(p) createPriceList TOOLBAR
    
    OBJECTS pl = UserPriceList
    PROPERTIES(pl) READONLY isPosted, number, series, date, time, fromDate, fromTime, toDate, toTime, countPriceListDetail,
                            nameOperation, nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks, note
    PROPERTIES(pl) NEWSESSION EDIT, DELETE
    FILTERS promotion(pl) == p
;

DESIGN promotions {
    detailContainer {
        MOVE BOX(pl);
    }
}