MODULE ContractPayment;

REQUIRE ContractLedger, Payment;

EXTEND CLASS Payment;

contractPayment 'Контракт' (payment) = DATA Contract (Payment);
seriesNumberContractPayment 'Номер' (payment) = seriesNumberContract(contractPayment(payment));

currencyContractPayment(payment) = currencyContract(contractPayment(payment));
nameCurrencyContractPayment 'Валюта' (payment) = nameCurrency(currencyContractPayment(payment));

typeExchangeContractPayment (payment) = DATA TypeExchange (Payment);
typeExchangeContractPayment (payment) <- typeExchangeContract(contractPayment(payment))
    WHEN CHANGED(contractPayment(payment));
nameTypeExchangeContractPayment 'Тип обмена' (payment) = nameTypeExchange(typeExchangeContractPayment(payment));
rateExchangeContractPayment 'Курс' (payment) = DATA NUMERIC[15,8] (Payment) PREFCHARWIDTH 15;
rateExchangeContractPayment (payment) <- OVERRIDE 1.0 IF payment IS Payment AND currencyContractPayment(payment) == currencyAccountToPayment(payment) AND NOT typeExchangeContractPayment(payment),
                                                  rateOnTypeExchangeCurrencyDate(typeExchangeContractPayment(payment), currencyAccountToPayment(payment), datePayment(payment)) IF currencyContractPayment(payment) != currencyAccountToPayment(payment)
    WHEN CHANGED(currencyContractPayment(payment)) OR
         CHANGED(typeExchangeContractPayment(payment)) OR
         CHANGED(datePayment(payment)) OR
         CHANGED(contractPayment(payment)) OR
         CHANGED(currencyAccountToPayment(payment));

sumContractPayment 'Сумма платежа по контракту' (payment) = DATA NUMERIC[16,2] (Payment) PREFCHARWIDTH 16;
sumContractPayment(payment) <- IF currencyContractPayment(payment) == currencyAccountToPayment(payment)
                               THEN sumPayment(payment)
                               ELSE rateExchangeContractPayment(payment)*sumPayment(payment)
    WHEN CHANGED(sumPayment(payment)) OR
         CHANGED(currencyContractPayment(payment)) OR
         CHANGED(currencyAccountToPayment(payment)) OR
         CHANGED(typeExchangeContractPayment(payment)) OR
         CHANGED(rateExchangeContractPayment(payment));

CONSTRAINT currencyTypeExchange(typeExchangeContractPayment(payment)) != currencyContractPayment(payment)
    CHECKED BY typeExchangeContractPayment MESSAGE 'Валюта договора должна совпадать с валютой типа обмена';

CONSTRAINT contractPayment(payment) IS Contract AND NOT partyAContract(contractPayment(payment)) == beneficiaryPayment(payment)
    CHECKED BY contractPayment MESSAGE 'Выбранный договор не действителен для бенефициара';

CONSTRAINT contractPayment(payment) IS Contract AND NOT partyBContract(contractPayment(payment)) == payerPayment(payment)
    CHECKED BY contractPayment MESSAGE 'Выбранный договор не действителен для плательщика';
    
@implementContractLedger( , Payment, contract);
sumContractLedger(contractLedger) += -sumContractPayment(contractLedger);

@implementContractLedger(a , Payment, contract);
sumContractALedger(contractALedger) += -sumContractPayment(contractALedger);

@implementOutContractLedger(Payment, contract);
sumOutContractLedger(outContractLedger) += sumContractPayment(outContractLedger);

//------------------------------------------- Actions --------------------------------------------------------------//

setRateExchangeContractPayment = ACTION (payment){
    REQUEST NUMERIC[16,2] INPUT;
    ASSIGN rateExchangeContractPayment(payment) <- requestedNumeric()/sumPayment(payment);
}

//----------------------------------------------- Цвета --------------------------------------------------------------//

backgroundSumContractLedgerDate 'Цвет' (contractLedger, date) = OVERRIDE RGB(255,238,165) IF dateContractLedger(contractLedger) <= date,
                                                                         RGB(255,160,160) IF dateContractLedger(contractLedger) > date;
backgroundContractLedgerDate 'Цвет' (contractLedger, date) = RGB(255,160,160) IF dateContractLedger(contractLedger) > date;
backgroundSumContract 'Цвет' (contract) = RGB(255,238,165) IF contract IS Contract;
backgroundSumContractALedgerDate 'Цвет' (contractALedger, date) = OVERRIDE RGB(232,184,146) IF dateContractALedger(contractALedger) <= date,
                                                                           RGB(255,160,160) IF dateContractALedger(contractALedger) > date;
backgroundContractALedgerDate 'Цвет' (contractALedger, date) = RGB(255,160,160) IF dateContractALedger(contractALedger) > date;
backgroundSumContractA 'Цвет' (contract) = RGB(232,184,146) IF contract IS Contract;
backgroundBonusSumInContractLedger 'Цвет' (inContractLedger) = RGB(213,249,185) IF inContractLedger IS InContractLedger;
backgroundBonusSumContract 'Цвет' (contract) = RGB(213,249,185) IF contract IS Contract;
backgroundOutContractLedgerDate 'Цвет' (outContractLedger, date) = RGB(255,160,160) IF dateOutContractLedger(outContractLedger) > date;
backgroundInContractLedgerDate 'Цвет' (inContractLedger, date) = RGB(255,160,160) IF dateInContractLedger(inContractLedger) > date;

showTypeExchangeContractPayment(payment) = currencyContractPayment(payment) != currencyAccountToPayment(payment);

//-------------------------------------------- Форма платежей -------------------------------------------------------//

EXTEND FORM payment
    OBJECTS i = InContractLedger
    PROPERTIES(p) seriesNumberContractPayment,
                  costedInContractLedgerOutContractLedger TODRAW i FORCE PANEL TOOLBAR READONLY,
                  writeOutContractLedgerFIFO TODRAW i FORCE PANEL TOOLBAR,
                  writeOutContractLedgerLIFO TODRAW i FORCE PANEL TOOLBAR,
                  nameTypeExchangeContractPayment SHOWIF showTypeExchangeContractPayment(p),
                  rateExchangeContractPayment SHOWIF showTypeExchangeContractPayment(p),
                  sumContractPayment ON CHANGE setRateExchangeContractPayment(p),
                  nameCurrencyContractPayment

    PROPERTIES(i) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger
    PROPERTIES(p, i) costOutContractLedgerInContractLedger
    ORDER BY dateInContractLedger

    FILTERS contractInContractLedger(i) == contractPayment(p)
;

EXTEND DESIGN payment{
    main{
        columnContainer{
            NEW thirdColumn{
                type = CONTAINERH;
                caption = 'Контракт';
                NEW thirdOneColumn{
                    type = COLUMNS;
                    columns = 1;
                    ADD PROPERTY(seriesNumberContractPayment);
                    ADD PROPERTY(nameCurrencyContractPayment);
                }
                NEW thirdSecondColumn{
                    type = COLUMNS;
                    columns = 1;
                    ADD PROPERTY(nameTypeExchangeContractPayment);
                    ADD PROPERTY(rateExchangeContractPayment);
                    ADD PROPERTY(sumContractPayment);
                }
            }
        }
        ADD i.box BEFORE functions.box;
    }
}

EXTEND FORM payments
    PROPERTIES(p) BACKGROUND backgroundPaymentDate(p, d) READONLY
                  seriesNumberContractPayment, nameCurrencyContractPayment, sumContractPayment
;

currentInContractLedger = DATA SESSION InContractLedger ();
WHEN SESSION FORMS payment
    CHANGED(sumContractPayment(p)) AND currentInContractLedger()
        DO ASSIGN costOutContractLedgerInContractLedger(p, i) <- sumContractPayment(p) WHERE i == currentInContractLedger();

//------------------------------------- Платежи по договору --------------------------------------------------------//

payContractDate 'Оплатить по договору' = ACTION (contract, date) NEWSESSION {

    FOR ADDOBJ pm = Payment DO {
        ASSIGN datePayment(pm) <- date;
        ASSIGN payerPayment(pr) <- partyBContract(contract);
        ASSIGN beneficiaryPayment(pr) <- partyAContract(contract);
        ASSIGN contractPayment(pm) <- contract;
        ASSIGN sumContractPayment(pm) <- debtSumContractDate(contract, date);
        ASSIGN sumPayment(pm) <- debtSumContractDate(contract, date) IF currencyContractPayment(pm) == currencyAccountFromPayment(pm);
        ASSIGN costOutContractLedgerInContractLedger(pm, inContractLedger) <- debtInContractLedgerDate(inContractLedger, date)
            WHERE contractPayment(pm) == contractInContractLedger(inContractLedger);
        FORM payment OBJECTS p = pm MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC apply();
        }
    }
}

//------------------------------------------- Платеж c учетом бонусов договора --------------------------------------------//

payPaymentConditionInContractLedgerDate 'Оплатить c учетом бонусов договора' = ACTION (inContractLedger, date) NEWSESSION {
    IF bonusSumInContractLedger(inContractLedger, date) > 0.0 THEN {
        FOR ADDOBJ pm = Payment DO {
            ASSIGN datePayment(pm) <- date;
            ASSIGN contractPayment(pm) <- contractInContractLedger(inContractLedger);
            ASSIGN sumContractPayment(pm) <- bonusDebtSumInContractLedgerDate(inContractLedger, date);
            ASSIGN sumPayment(pm) <- bonusDebtSumInContractLedgerDate(inContractLedger, date) IF currencyContractPayment(pm) == currencyAccountFromPayment(pm);
            ASSIGN costOutContractLedgerInContractLedger(pm, inContractLedger) <- bonusDebtSumInContractLedgerDate(inContractLedger, date);
            FORM payment OBJECTS p = pm MODAL;
//            IF formResult() == FormResult.ok THEN {
//                FOR ADDOBJ cm = CreditMemoOut DO {
//                    ASSIGN dateCreditMemoOut(cm) <- date;
//                    ASSIGN contractCreditMemoOut(cm) <- contractInContractLedger(inContractLedger);
//                    ASSIGN sumCreditMemoOut(cm) <- bonusSumInContractLedger(inContractLedger, date);
//                    ASSIGN costOutContractLedgerInContractLedger(cm, inContractLedger) <- bonusSumInContractLedger(inContractLedger, date);
//                    FORM creditMemo OBJECTS c = cm MODAL;
//                    IF formResult() == FormResult.ok THEN {
//                        EXEC apply();
//                    }
//                }
//            }
        }
    }
    ELSE {MESSAGE 'По текущему договору не заданы условия бонуса';}
}

payPaymentConditionContractDate 'Оплатить c учетом бонусов договора' = ACTION (contract, date) NEWSESSION {
    IF bonusSumContractDate(contract, date) > 0.0 THEN {
        FOR ADDOBJ pm = Payment DO {
            ASSIGN datePayment(pm) <- date;
            ASSIGN contractPayment(pm) <- contract;
            ASSIGN sumContractPayment(pm) <- bonusDebtSumContractDate(contract, date);
            ASSIGN sumPayment(pm) <- bonusDebtSumContractDate(contract, date) IF currencyContractPayment(pm) == currencyAccountFromPayment(pm);
            ASSIGN costOutContractLedgerInContractLedger(pm, inContractLedger) <- bonusDebtSumInContractLedgerDate(inContractLedger, date)
                WHERE contractPayment(pm) == contractInContractLedger(inContractLedger);
            FORM payment OBJECTS p = pm MODAL;
//            IF formResult() == FormResult.ok THEN {
//                FOR ADDOBJ cm = CreditMemoOut DO {
//                    ASSIGN dateCreditMemoOut(cm) <- date;
//                    ASSIGN contractCreditMemoOut(cm) <- contract;
//                    ASSIGN sumCreditMemoOut(cm) <- bonusSumContractDate(contract, date);
//                    ASSIGN costOutContractLedgerInContractLedger(cm, inContractLedger) <- bonusSumInContractLedger(inContractLedger, date)
//                        WHERE contractCreditMemo(cm) == contractInContractLedger(inContractLedger);
//                    FORM creditMemo OBJECTS c = cm MODAL;
//                    IF formResult() == FormResult.ok THEN {
//                        EXEC apply();
//                    }
//                }
//            }
        }
    }
    ELSE {MESSAGE 'По текущему договору не заданы условия бонуса';}
}

addContractPayment 'Оплатить' = ACTION (contract) NEWSESSION{
    FOR ADDOBJ p = Payment DO{
        ASSIGN payerPayment(pr) <- partyBContract(contract);
        ASSIGN beneficiaryPayment(pr) <- partyAContract(contract);
        ASSIGN contractPayment(p) <- contract;
        FORM payment OBJECTS p=p MODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    }
}

EXTEND FORM contractLedger
    PROPERTIES(c, d) FORCE PANEL TOOLBAR payContractDate, payPaymentConditionContractDate

    PROPERTIES(ic, d) FORCE PANEL TOOLBAR payPaymentConditionInContractLedgerDate

    OBJECTS pm = Payment
    PROPERTIES(pm) READONLY numberPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            seriesPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            datePayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            timePayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            namePayerPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            nameBeneficiaryPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            nameCurrencyContractPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            nameTypeExchangeContractPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            rateExchangeContractPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            sumContractPayment BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            costedInContractLedgerOutContractLedger BACKGROUND backgroundOutContractLedgerDate(pm, d),
                            notePayment BACKGROUND backgroundOutContractLedgerDate(pm, d)

    PROPERTIES(pm) FORCE PANEL TOOLBAR writeOutContractLedgerFIFO, writeOutContractLedgerLIFO
    PROPERTIES addContractPayment(c) TODRAW pm FORCE PANEL TOOLBAR
    PROPERTIES(pm) EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY datePayment, timePayment

    FILTERS contractPayment(pm) == c
;

EXTEND DESIGN contractLedger {
    secondContainer {
        ADD pm.box FIRST;
    }
}
