MODULE ContractLedgerIndividualLegalEntity;

REQUIRE ContractLedger, IndividualLegalEntity, ContractPayment, POSInvoice;

defaultRoundConditionPaymentInstallments  = DATA RoundCondition ();
nameDefaultRoundConditionPaymentInstallments 'Условия округления рассрочки' = name(defaultRoundConditionPaymentInstallments());

countContractSkuSupplierCustomer = 
    GROUP SUM 1 IF dateFrom(ContractSku c) <= DATE dateIn AND NOT dateTo(c) < dateIn
    BY currency(c), supplier(c), customer(c), dateIn;

defaultContractSkCurrencyuSupplierCustomer = 
    GROUP LAST ContractSku c IF dateFrom(c) <= DATE dateIn AND NOT dateTo(c) < dateIn
    BY currency(c), supplier(c), customer(c), dateIn;

EXTEND FORM options
    PROPERTIES() nameDefaultRoundConditionPaymentInstallments
;

DESIGN options {
    pane {
        paymentInstallmentsy {
            MOVE PROPERTY(nameDefaultRoundConditionPaymentInstallments());
        }    
    }
}

debtDefaultCurrency 'Долг по документу (основная валюта)'= 
    IF currency(contract(InContractLedger ledger)) != defaultCurrency() THEN
        round(debt(ledger, DATE date) * rateOn(defaultTypeExchangeRepaymentInstallments(), currency(contract(ledger)), date), defaultRoundConditionPaymentInstallments())
    ELSE
        debt(ledger, date);

balanceACurrencyPaymentInstallments 'Задолженность по рассрочке(валюта рассрочки)' = 
    GROUP SUM balanceA(Contract contract, DATE date) IF partyB(contract) == LegalEntity legalEntity AND currency(contract) == defaultCurrencyPaymentInstallments()
    BY legalEntity, date;
balanceADefaultCurrencyCurrencyPaymentInstallments 'Задолженность по рассрочке(основная валюта)' = 
    GROUP SUM debtDefaultCurrency(InContractLedger ledger, DATE date)
    BY partyBContract(ledger), date;

balanceADefaultCurrency 'Задолженность по предоплате' = 
    GROUP SUM balanceA(Contract contract, DATE date) IF partyB(contract) == LegalEntity legalEntity AND currency(contract) == defaultCurrency()
    BY legalEntity, date;        
    
backgroundDebtInPaymentInstallments 'Цвет' () = RGB(213,249,185);
backgroundDebtInPrePayment 'Цвет' () = RGB(255,200,125);
background 'Цвет' (InContractLedger ledger) = CASE
    WHEN ledger IS InContractLedger AND currency(contract(ledger)) == defaultCurrencyPaymentInstallments() THEN RGB(213,249,185)
    WHEN ledger IS InContractLedger AND currency(contract(ledger)) == defaultCurrency() THEN RGB(255,200,125)
;

fiscalSkip 'Отключить ФР'  = DATA LOCAL BOOLEAN (); 

FORM inContractledgerPayment 'Погашение задолженности'
    OBJECTS n = NUMERIC[16,2] FIXED PANEL
    PROPERTIES(n) sumPayment = OBJVALUE
          
    OBJECTS pt = PaymentType FIXED PANEL 
    PROPERTIES(pt) SELECTOR name    
    
    OBJECTS dt = DATE FIXED PANEL 
    PROPERTIES date = OBJVALUE(dt)
          
    PROPERTIES fiscalSkip()         
;

DESIGN inContractledgerPayment {
    NEW topContainer{
        NEW paymentContainer{
            type = CONTAINERH;
            MOVE PROPERTY(name(pt)) {
                caption = 'Тип платежа';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;
            }                
            MOVE PROPERTY(sumPayment) {
                caption = 'Сумма погашения';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;                
            } 
        }   
        NEW bottomContainer {
            type = CONTAINERH;
            MOVE PROPERTY(date) {
                fontSize = 16;   
                alignment = STRETCH;
            }         
            MOVE PROPERTY(fiscalSkip()) {
                fontSize = 16;   
                alignment = STRETCH;
            }             
        }
    }
    MOVE functions.box;
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

addPayment 'Погасить задолженность'(InContractLedger ledger) = ACTION {
    FORM inContractledgerPayment MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR ADDOBJ p = Payment.Payment DO{
            date(p) <- chosenDate('dt');
            contract(p) <- contract(ledger);    
            payer(p) <- partyBContract(ledger);
            beneficiary(p) <- partyAContract(ledger);
            sum(p) <- chosenNumeric('n');
            isPosted(p) <- TRUE;
            IF debt(ledger) >= sumContract(p) THEN {
                cost(p, ledger) <- sumContract(p);    
            } ELSE IF debt(ledger) < sumContract(p) THEN{
                cost(p, ledger) <- debt(ledger);     
            }             
            dataFiscalType(p) <- IF sid[PaymentType](chosenObject('pt')) == 'card' THEN 1 ELSE 0;  
            type(p) <- IF sid[PaymentType](chosenObject('pt')) == 'card' THEN 1 ELSE 0;            
            
            IF fiscalSkip() OR NOT model(groupCashRegister(currentCashRegister())) THEN {          
                apply();            
            }
            ELSE {
                IF model(groupCashRegister(currentCashRegister())) THEN {
                    check();
                    IF NOT canceled() THEN {
                        printReceipt(ledger, p); 
                        IF printReceiptResult() THEN {
                            zReport(p) <- currentZReport();                        
                            apply();
                        }    
                    }              
                } 
            }                                      
        }
    }    
}

addReturnPayment 'Вернуть предоплату'(InContractLedger ledger) = ACTION {
    FORM inContractledgerPayment MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR ADDOBJ p = Payment.Payment DO{
            date(p) <- chosenDate('dt');
            contract(p) <- contract(ledger);    
            payer(p) <- partyAContract(ledger);
            beneficiary(p) <- partyBContract(ledger);
            sum(p) <- chosenNumeric('n');
            isReturn(p) <- TRUE;
            isPosted(p) <- TRUE;
            cost(p, ledger) <- -sumContract(p);                
            dataFiscalType(p) <- IF sid[PaymentType](chosenObject('pt')) == 'card' THEN 1 ELSE 0;
            type(p) <- IF sid[PaymentType](chosenObject('pt')) == 'card' THEN 1 ELSE 0;
            
            IF fiscalSkip() OR NOT model(groupCashRegister(currentCashRegister())) THEN {
                apply();            
            }
            ELSE {
                IF model(groupCashRegister(currentCashRegister())) THEN {
                    check();
                    IF NOT canceled() THEN {
                        printReturnReceipt(ledger, p); 
                        IF printReceiptResult() THEN {
                            zReport(p) <- currentZReport();                    
                            apply();
                        }    
                    }              
                } 
            }                                      
        }
    }    
}


FORM legalEntityPayment 'Внесение предоплаты'
    OBJECTS l = LegalEntity FIXED PANEL
    PROPERTIES(l) SELECTOR name
    FILTERS isCompany(l)

    OBJECTS n = NUMERIC[16,2] FIXED PANEL
    PROPERTIES(n) sumPayment = OBJVALUE

    OBJECTS dt = DATE FIXED PANEL 
    PROPERTIES date = OBJVALUE(dt) 
    
    OBJECTS pc = PaymentCondition FIXED PANEL
    PROPERTIES(pc) SELECTOR description        
;

DESIGN legalEntityPayment {
    NEW topContainer{
        NEW paymentContainer{
            type = CONTAINERH;
            MOVE PROPERTY(name(l)) {
                caption = 'Компания';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;
            }                
            MOVE PROPERTY(sumPayment) {
                caption = 'Сумма предоплаты';
                fontSize = 32;   
                panelCaptionAbove = TRUE;
                preferredCharWidth = 15;                
            } 
        }   
        NEW bottomContainer {
            type = CONTAINERH;
            MOVE PROPERTY(date) {
                fontSize = 16;
            }
            type = CONTAINERH;
            MOVE PROPERTY(description(pc)) {
                caption = 'Условия рассрочки';
                fontSize = 16;   
                preferredCharWidth = 20;
            }            
        }
    }
    MOVE functions.box;
    REMOVE leftControls;
    REMOVE PROPERTY(formRefresh());
}

localPaymentCondition = DATA LOCAL PaymentCondition ();
localSupplier = DATA LOCAL LegalEntity ();

addPrePayment 'Внести предоплату'(LegalEntity legalEntity) = ACTION {
    localPaymentCondition() <- paymentCondition('0');
    localSupplier() <- legalEntity(currentUser());

    FORM legalEntityPayment OBJECTS l = localSupplier(), pc = localPaymentCondition() MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR ADDOBJ p = Payment.Payment DO{
            date(p) <- chosenDate('dt');
            payer(p) <- legalEntity;
            beneficiary(p) <- chosenObject('l');
            sum(p) <- chosenNumeric('n');
            IF countContractSkuSupplierCustomer(defaultCurrency(), chosenObject('l'), legalEntity, chosenDate('dt')) >= 1 THEN {
                contract(p) <- defaultContractSkCurrencyuSupplierCustomer(defaultCurrency(), chosenObject('l'), legalEntity, chosenDate('dt'));
            } ELSE {
                FOR ADDOBJ c = UserContractSku DO {
                    supplier(c) <- chosenObject('l');
                    customer(c) <- legalEntity;
                    dateFrom(c) <- chosenDate('dt');
                    currency(c) <- defaultCurrency();
                    type(c) <- ContractSkuType.sale;
                    paymentCondition(c) <- chosenObject('pc');
                    contract(p) <- c;            
                }
            }    
            isPosted(p) <- TRUE;
            apply();
        }
    }
}

FORM contractLedgerLegalEnbtity 'Управление задолженностями покупателей'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    OBJECTS l = LegalEntity
    PROPERTIES(l) READONLY name, passportNumber, phone[Contact], postAddress[Contact], email[Contact]
    PROPERTIES(l, d) READONLY balanceACurrencyPaymentInstallments BACKGROUND backgroundDebtInPaymentInstallments(),
                              balanceADefaultCurrencyCurrencyPaymentInstallments BACKGROUND backgroundDebtInPaymentInstallments(),
                              balanceADefaultCurrency BACKGROUND backgroundDebtInPrePayment()
    PROPERTIES addPrePayment(l) TODRAW l FORCE PANEL TOOLBAR 
    FILTERGROUP filters1 
        FILTER 'С долгами' balanceACurrencyPaymentInstallments(l, d) OR 
                           balanceADefaultCurrencyCurrencyPaymentInstallments(l, d) OR 
                           balanceADefaultCurrency(l, d) 'F7' DEFAULT         
    FILTERGROUP filters2 
        FILTER 'Только ф.л.' shortNameOwnership(l) == 'Ф.Л.' 'F7' DEFAULT 
        FILTER 'Только покупатели' isCustomer(l) 'F8'
    
    OBJECTS ic = InContractLedger LAST
    PROPERTIES(ic) READONLY date, description, sum
    PROPERTIES(ic, d) READONLY BACKGROUND background(ic) debt, debtDefaultCurrency
    PROPERTIES(ic) TODRAW ic FORCE PANEL addPayment, addReturnPayment, edit 
    ORDER BY date(ic)
    FILTERS active(ic),
            partyBContract(ic) == l
    FILTERGROUP filters3 
        FILTER 'Неоплаченные' debt(ic, d) 'F6'
    FILTERGROUP filters4 
        FILTER 'На дату' date(ic) <= d 'F5' DEFAULT        

    OBJECTS oc = OutContractLedger LAST
    PROPERTIES(oc) READONLY date, description, sum
    PROPERTIES(oc, d) READONLY costedInContractLedger
    PROPERTIES READONLY cost(oc, ic)
    PROPERTIES(oc) TODRAW oc FORCE PANEL TOOLBAR edit    
    ORDER BY date(oc)
    FILTERS active(oc),
            partyBContract(oc) == l
    FILTERGROUP filters5 
        FILTER 'Нерасписанные' NOT costedInContractLedger(oc, d) == sum(oc) 'F9'
    FILTERGROUP filters6 
        FILTER 'На дату' date(oc) <= d 'F10' DEFAULT
;

DESIGN contractLedgerLegalEnbtity {
    main {
        type = CONTAINERV;
        MOVE d.box;
        NEW topContainer{
            type = SPLITV;
            fill = 1;
            MOVE l.box;
            NEW contractLedgerContainer {
                fill = 2;
                type = SPLITH;
                caption = 'Взаиморасчеты';
                MOVE ic.box;
                NEW rightTabContainer {
                    type = TABBED;
                    fill = 1;
                    MOVE oc.box;                
                }
            }
        }
    }    
    MOVE functions.box;
}

NAVIGATOR {
    contractDashboardNavigator{
        ADD contractLedgerLegalEnbtity;
    }
}