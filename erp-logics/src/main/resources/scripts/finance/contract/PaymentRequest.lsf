MODULE PaymentRequest;

REQUIRE ContractLedger;

CLASS PaymentRequest 'Платежное требование' : NumeratedObject;
CLASS PaymentRequestPosted 'Проведенное платежное требование' : PaymentRequest, PostedObject;
TABLE paymentRequest(PaymentRequest);

@defineDocumentHeaderPosted(PaymentRequest);
@defineNumeratedObjectDefault(PaymentRequest, 'Нумератор для платежных требований', 'ПТ');

datePaymentRequest 'Дата' (paymentRequest) = DATA DATE (PaymentRequest);
datePaymentRequest(paymentRequest) <- currentDate() WHEN SET(paymentRequest IS PaymentRequest);
timePaymentRequest 'Время' (paymentRequest) = DATA TIME (PaymentRequest);
timePaymentRequest(paymentRequest) <- currentTime() WHEN SET(paymentRequest IS PaymentRequest);
dateTimePaymentRequest 'Дата время' (paymentRequest) = dateTimeToDateTime(datePaymentRequest(paymentRequest), timePaymentRequest(paymentRequest));

contractPaymentRequest 'Контракт' (paymentRequest) = DATA Contract (PaymentRequest) AUTOSET;
seriesNumberContractPaymentRequest 'Номер контракта' (paymentRequest) = seriesNumberContract(contractPaymentRequest(paymentRequest));

notePaymentRequest 'Примечание' (paymentRequest) = DATA STRING[200] (PaymentRequest);


payerPaymentRequest(paymentRequest) = DATA LegalEntity (PaymentRequest);
payerPaymentRequest(paymentRequest) <- partyBContract(contractPaymentRequest(paymentRequest)) WHEN SET (contractPaymentRequest(paymentRequest));
namePayerPaymentRequest 'Организация (покупатель)' (paymentRequest) = nameLegalEntity(payerPaymentRequest(paymentRequest));
lenderPaymentRequest(paymentRequest) = DATA LegalEntity (PaymentRequest);
lenderPaymentRequest(paymentRequest) <- partyAContract(contractPaymentRequest(paymentRequest)) WHEN SET (contractPaymentRequest(paymentRequest));
nameLenderPaymentRequest 'Организация (поставщик)' (paymentRequest) = nameLegalEntity(lenderPaymentRequest(paymentRequest));

sumPaymentRequest 'Сумма' (paymentRequest) = DATA NUMERIC[16,2] (PaymentRequest);

descriptionPaymentRequest 'Название документа' =
    [FORMULA STRING[200] '\'Платежное требование \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(paymentRequest), datePaymentRequest(paymentRequest), nameLenderPaymentRequest(paymentRequest)) PERSISTENT;

costPaymentRequestInContractLedger 'Выставлено из документа' (paymentRequest, inContractLedger) = DATA NUMERIC[16,2] (PaymentRequest, InContractLedger) PERSISTENT;
costedPaymentRequestInContractLedger 'Выставлено по документу' (inContractLedger) =
    GROUP SUM costPaymentRequestInContractLedger(paymentRequest, inContractLedger) IF
    activeInContractLedger(inContractLedger) AND isPostedPaymentRequest(paymentRequest)
    BY inContractLedger PERSISTENT;
costedPaymentRequestInContractLedgerDate 'Выставлено по документу на дату' (inContractLedger, date) =
    GROUP SUM costPaymentRequestInContractLedger(paymentRequest, inContractLedger) IF
              activeInContractLedger(inContractLedger) AND isPostedPaymentRequest(paymentRequest) AND
              datePaymentRequest(paymentRequest) <= date
    BY inContractLedger, date;
exposeSumContractDate 'Выставлено по договору на дату' (contract, date) =
    GROUP SUM costedPaymentRequestInContractLedgerDate (inContractLedger, date) IF
              dateInContractLedger(inContractLedger) <= date
    BY contractInContractLedger(inContractLedger), date;

limitSumInContractLedger (inContractLedger) =
    MIN debtInContractLedger(inContractLedger), debtInContractLedger(inContractLedger) (-) costedPaymentRequestInContractLedger(inContractLedger);

limitSumContractDate (contract, date) =
    MIN debtSumContractDate(contract, date), debtSumContractDate(contract, date) (-) exposeSumContractDate (contract, date);

sumInFIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger) =
    PARTITION UNGROUP sumPaymentRequest
              LIMIT limitSumInContractLedger(inContractLedger) IF
                    contractPaymentRequest(paymentRequest) == contractInContractLedger(inContractLedger) AND
                    activeInContractLedger(inContractLedger)
              BY paymentRequest
              ORDER orderInContractLedger(inContractLedger);

sumInLIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger) =
    PARTITION UNGROUP sumPaymentRequest
              LIMIT limitSumInContractLedger(inContractLedger) IF
                    contractPaymentRequest(paymentRequest) == contractInContractLedger(inContractLedger) AND
                    activeInContractLedger(inContractLedger)
              BY paymentRequest
              ORDER DESC orderInContractLedger(inContractLedger);

writePaymentRequestFIFO 'Расписать по FIFO' = ACTION (paymentRequest) {

    ASSIGN costPaymentRequestInContractLedger(paymentRequest, inContractLedger) <- NULL;
    ASSIGN costPaymentRequestInContractLedger(paymentRequest, inContractLedger) <- sumInFIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger);
}

writePaymentRequestLIFO 'Расписать по LIFO' = ACTION (paymentRequest) {

    ASSIGN costPaymentRequestInContractLedger(paymentRequest, inContractLedger) <- NULL;
    ASSIGN costPaymentRequestInContractLedger(paymentRequest, inContractLedger) <- sumInLIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger);
}

partyA = DATA SESSION LegalEntity();
namePartyA 'Организация (поставщик)' = nameLegalEntity(partyA());
partyB = DATA SESSION LegalEntity();
namePartyB 'Организация (покупатель)' = nameLegalEntity(partyB());

FORM paymentRequest 'Платежное требование'

    OBJECTS p = PaymentRequest FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject, datePaymentRequest, timePaymentRequest,
                  seriesNumberContractPaymentRequest, notePaymentRequest
    PROPERTIES(p) READONLY namePayerPaymentRequest, nameLenderPaymentRequest
    PROPERTIES(p) sumPaymentRequest

    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger, costedPaymentRequestInContractLedger
    PROPERTIES(p, i) costPaymentRequestInContractLedger
    PROPERTIES(p) writePaymentRequestFIFO TODRAW i FORCE PANEL TOOLBAR,
                  writePaymentRequestLIFO TODRAW i FORCE PANEL TOOLBAR
    ORDER BY dateInContractLedger

    FILTERS contractPaymentRequest(p) == contractInContractLedger(i)

    EVENTS
        ON OK prePostPaymentRequest(p)

    EDIT PaymentRequest OBJECT p
;

DESIGN paymentRequest FROM DEFAULT{
    NEW headerContainer{
        caption = 'Шапка документа';
        childConstraints = TO THE RIGHT;
        NEW firstColumn{
            childConstraints = TO THE BOTTOM;
            NEW firstRow{
                childConstraints = TO THE RIGHT;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(namePayerPaymentRequest);
            }
            NEW secondRow{
                childConstraints = TO THE RIGHT;
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(datePaymentRequest);
                    ADD PROPERTY(timePaymentRequest);
            }
        }
        ADD PROPERTY(sumPaymentRequest);
    }
    NEW paramContainer {
        caption = 'Параметры документа';
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(seriesNumberContractPaymentRequest);
        ADD PROPERTY(nameLenderPaymentRequest);
        ADD PROPERTY(notePaymentRequest);
    }
    ADD i.box;
    PROPERTY(formOk) {
        caption = 'Провести';
    }
    ADD functions.box;
}

exposePaymentRequest 'Выставить платежное поручение' = ACTION (contract, date) NEWSESSION {
    ADDOBJ PaymentRequest;
    FOR pr == addedObject() DO {
        ASSIGN datePaymentRequest(pr) <- date;
        ASSIGN contractPaymentRequest(pr) <- contract;
        ASSIGN sumPaymentRequest(pr) <- limitSumContractDate(contract, date);
        ASSIGN costPaymentRequestInContractLedger(pr, inContractLedger) <- sumInFIFOPaymentRequestInContractLedger(pr, inContractLedger)
            WHERE contractPaymentRequest(pr) == contractInContractLedger(inContractLedger);
        FORM paymentRequest OBJECTS p = pr MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC apply();
        } ELSE {
            DELETE pr;
        }
    }
}

EXTEND FORM contractLedger
    PROPERTIES(c, d) exposeSumContractDate BACKGROUND backgroundBonusSumContract(c)
    PROPERTIES(c, d) FORCE PANEL TOOLBAR exposePaymentRequest
;

// ------------------------- Расширяем управление задолженностями ------------------------ //

backgroundPaymentRequestDate 'Цвет' (paymentRequest, date) = RGB(255,160,160) IF datePaymentRequest(paymentRequest) > date;

EXTEND FORM contractLedger
    OBJECTS pr = PaymentRequest
    PROPERTIES(pr) READONLY numberObject BACKGROUND backgroundPaymentRequestDate(pr, d),
                            seriesObject BACKGROUND backgroundPaymentRequestDate(pr, d),
                            datePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            timePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            sumPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            notePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            objectClassName BACKGROUND backgroundPaymentRequestDate(pr, d)
    PROPERTIES(pr) ADDFORM, EDITFORM, DELETE
    ORDER BY datePaymentRequest, timePaymentRequest
    FILTERS contractPaymentRequest(pr) == c
;

EXTEND DESIGN contractLedger {
    secondContainer {
        ADD pr.box;
    }
}

toPaymentRequests 'Выставить платежные требования' = ACTION () {
    FOR debtInContractLedger(inContractLedger) AND (partyAContract(contractInContractLedger(inContractLedger)) == partyA() OR inContractLedger IS InContractLedger AND NOT partyA()) AND
    (partyBContract(contractInContractLedger(inContractLedger)) == partyB() OR inContractLedger IS InContractLedger AND NOT partyB()) DO {
        ADDOBJ PaymentRequest;
        FOR pr == addedObject() DO {
            ASSIGN datePaymentRequest(pr) <- currentDate();
            ASSIGN timePaymentRequest(pr) <- currentTime();
            ASSIGN contractPaymentRequest(pr) <- contractInContractLedger(inContractLedger);
            ASSIGN sumPaymentRequest(pr) <- limitSumInContractLedger(inContractLedger);
            ASSIGN costPaymentRequestInContractLedger(pr, inContractLedger) <- limitSumInContractLedger(inContractLedger);
            EXEC prePostPaymentRequest(pr);
        }
    }
}

FORM paymentRequests 'Платежные поручения'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS pr = PaymentRequest
    PROPERTIES(pr) READONLY numberObject BACKGROUND backgroundPaymentRequestDate(pr, d),
                            seriesObject BACKGROUND backgroundPaymentRequestDate(pr, d),
                            datePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            timePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            nameLenderPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            namePayerPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            sumPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            notePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            objectClassName BACKGROUND backgroundPaymentRequestDate(pr, d)
    PROPERTIES(pr) ADDFORM, EDITFORM, DELETE
    ORDER BY datePaymentRequest, timePaymentRequest
    FILTERS partyAContract(contractPaymentRequest(pr)) == partyA() OR pr IS PaymentRequest AND NOT partyA(),
            partyBContract(contractPaymentRequest(pr)) == partyB() OR pr IS PaymentRequest AND NOT partyB()

    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger, costedPaymentRequestInContractLedger
    PROPERTIES(pr, i) costPaymentRequestInContractLedger
    FILTERS costPaymentRequestInContractLedger(pr, i)
    ORDER BY dateInContractLedger

    OBJECTS ic = InContractLedger
    PROPERTIES(ic) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger, costedPaymentRequestInContractLedger
    PROPERTIES() toPaymentRequests TODRAW ic FORCE PANEL TOOLBAR
    FILTERS debtInContractLedger(ic),
            partyAContract(contractInContractLedger(ic)) == partyA() OR ic IS InContractLedger AND NOT partyA(),
            partyBContract(contractInContractLedger(ic)) == partyB() OR ic IS InContractLedger AND NOT partyB()
    ORDER BY dateInContractLedger
;

DESIGN paymentRequests FROM DEFAULT{
    NEW topContainer{
        caption = 'Шапка';
        childConstraints = TO THE RIGHT;
        ADD d.box;
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    NEW splitContainer{
        type = SPLITV;
        ADD pr.box;
        NEW bodyContainer{
            type = TABBED;
            ADD i.box;
            ADD ic.box{caption = 'Неоплаченные поставки';}
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    contractNavigator{
        ADD paymentRequests;
    }
}