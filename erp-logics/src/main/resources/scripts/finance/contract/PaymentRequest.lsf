MODULE PaymentRequest;

REQUIRE Bank, ContractLedger, PaymentOperation;

NAMESPACE PaymentRequest;

CLASS PaymentRequest 'Платежное требование';
CLASS PaymentRequestPosted 'Проведенное платежное требование' : PaymentRequest, PostedObject;
TABLE paymentRequest(PaymentRequest);

@defineDocumentHeaderPosted(PaymentRequest);

@defineNumberedObject(PaymentRequest);

@defineNumeratedObjectDefault(PaymentRequest, 'Платежные требования', 'ПТ');

datePaymentRequest 'Дата' (paymentRequest) = DATA DATE (PaymentRequest);
datePaymentRequest(paymentRequest) <- currentDate() WHEN SET(paymentRequest IS PaymentRequest);
timePaymentRequest 'Время' (paymentRequest) = DATA TIME (PaymentRequest);
timePaymentRequest(paymentRequest) <- currentTime() WHEN SET(paymentRequest IS PaymentRequest);
dateTimePaymentRequest 'Дата время' (paymentRequest) = dateTimeToDateTime(datePaymentRequest(paymentRequest), timePaymentRequest(paymentRequest));

contractPaymentRequest 'Контракт' (paymentRequest) = DATA Contract (PaymentRequest) AUTOSET;
seriesNumberContractPaymentRequest 'Номер контракта' (paymentRequest) = seriesNumberContract(contractPaymentRequest(paymentRequest));
dateContractPaymentRequest 'Дата контракта' (paymentRequest)= dateFromContract(contractPaymentRequest(paymentRequest));

notePaymentRequest 'Примечание' (paymentRequest) = DATA VARSTRING[200] (PaymentRequest);

payerPaymentRequest(paymentRequest) = DATA LegalEntity (PaymentRequest);
namePayerPaymentRequest 'Плательщик' (paymentRequest) = nameLegalEntity(payerPaymentRequest(paymentRequest));

accountFromPaymentRequest(paymentRequest) = DATA Bank.Account (PaymentRequest);
accountFromPaymentRequest(paymentRequest) <- accountLegalEntity(payerPaymentRequest(paymentRequest))
    WHEN CHANGED(payerPaymentRequest(paymentRequest));
nameAccountFromPaymentRequest 'Счет' (paymentRequest) = Bank.numberAccount(accountFromPaymentRequest(paymentRequest));
currencyAccountFromPaymentRequest (paymentRequest) = Bank.currencyAccount(accountFromPaymentRequest(paymentRequest));
nameCurrencyAccountFromPaymentRequest 'Валюта счета' (paymentRequest) = Bank.nameCurrencyAccount(accountFromPaymentRequest(paymentRequest));

CONSTRAINT payerPaymentRequest(paymentRequest) != Bank.legalEntityAccount(accountFromPaymentRequest(paymentRequest))
    CHECKED BY accountFromPaymentRequest MESSAGE 'Организация счета должна совпадать с плательщиком';

beneficiaryPaymentRequest(paymentRequest) = DATA LegalEntity (PaymentRequest);
nameBeneficiaryPaymentRequest 'Бенефициар' (paymentRequest) = nameLegalEntity(beneficiaryPaymentRequest(paymentRequest));

accountToPaymentRequest(paymentRequest) = DATA Bank.Account (PaymentRequest);
accountToPaymentRequest(paymentRequest) <- accountLegalEntity(beneficiaryPaymentRequest(paymentRequest))
    WHEN CHANGED(beneficiaryPaymentRequest(paymentRequest));
nameAccountToPaymentRequest 'Счет' (paymentRequest) = Bank.numberAccount(accountToPaymentRequest(paymentRequest));
currencyAccountToPaymentRequest(paymentRequest) = Bank.currencyAccount(accountToPaymentRequest(paymentRequest));
nameCurrencyAccountToPaymentRequest 'Валюта счета' (paymentRequest) = Bank.nameCurrencyAccount(accountToPaymentRequest(paymentRequest));

CONSTRAINT beneficiaryPaymentRequest(paymentRequest) != Bank.legalEntityAccount(accountToPaymentRequest(paymentRequest))
    CHECKED BY accountToPaymentRequest MESSAGE 'Организация счета должна совпадать с бенефициаром';

sumPaymentRequest 'Сумма' (paymentRequest) = DATA NUMERIC[16,2] (PaymentRequest) PREFCHARWIDTH 16;

descriptionPaymentRequest 'Название документа' =
    [FORMULA VARSTRING[200] '\'Платежное требование \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberPaymentRequest(paymentRequest), datePaymentRequest(paymentRequest), nameBeneficiaryPaymentRequest(paymentRequest)) PERSISTENT;

TABLE paymentRequestInContractLedger (PaymentRequest, InContractLedger);
costPaymentRequestInContractLedger 'Сумма требования' (paymentRequest, inContractLedger) = DATA NUMERIC[16,2] (PaymentRequest, InContractLedger) PERSISTENT;
requestedInContractLedger 'Выставлено требований' (inContractLedger) =
    GROUP SUM costPaymentRequestInContractLedger(paymentRequest, inContractLedger) IF isPostedPaymentRequest(paymentRequest)
    BY inContractLedger PERSISTENT;

requestedDebtInContractLedger 'Неоплаченных требований' (inContractLedger) =
    (MIN requestedInContractLedger(inContractLedger), debtInContractLedger(inContractLedger)) IF requestedInContractLedger(inContractLedger) AND debtInContractLedger(inContractLedger);

toRequestInContractLedger 'Не выставлено требований' (inContractLedger) =
    debtInContractLedger(inContractLedger) (-) requestedInContractLedger(inContractLedger);

CONSTRAINT partyAContract(contractPaymentRequest(paymentRequest)) != beneficiaryPaymentRequest(paymentRequest)
    CHECKED BY contractPaymentRequest MESSAGE 'Договор должен соответствовать организациям покупателю и поставщику';

CONSTRAINT partyBContract(contractPaymentRequest(paymentRequest)) != payerPaymentRequest(paymentRequest)
    CHECKED BY contractPaymentRequest MESSAGE 'Договор должен соответствовать организациям покупателю и поставщику';

sumInFIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger) =
    PARTITION UNGROUP sumPaymentRequest
              LIMIT toRequestInContractLedger(inContractLedger) IF toRequestInContractLedger(inContractLedger) > 0 AND
                    contractPaymentRequest(paymentRequest) == contractInContractLedger(inContractLedger) AND
                    activeInContractLedger(inContractLedger)
              BY paymentRequest
              ORDER orderInContractLedger(inContractLedger);

sumInLIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger) =
    PARTITION UNGROUP sumPaymentRequest
              LIMIT toRequestInContractLedger(inContractLedger) IF toRequestInContractLedger(inContractLedger) > 0 AND
                    contractPaymentRequest(paymentRequest) == contractInContractLedger(inContractLedger) AND
                    activeInContractLedger(inContractLedger)
              BY paymentRequest
              ORDER DESC orderInContractLedger(inContractLedger);

writePaymentRequestFIFO 'Расписать по FIFO' = ACTION (paymentRequest) {
    costPaymentRequestInContractLedger(paymentRequest, inContractLedger) <- sumInFIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger);
}

writePaymentRequestLIFO 'Расписать по LIFO' = ACTION (paymentRequest) {
    costPaymentRequestInContractLedger(paymentRequest, inContractLedger) <- sumInLIFOPaymentRequestInContractLedger(paymentRequest, inContractLedger);
}


//Операции
operationPaymentRequest = DATA PaymentOperation.Operation (PaymentRequest);
nameOperationPaymentRequest 'Операция' = PaymentOperation.nameOperation(operationPaymentRequest(PaymentRequest));
idOperationPaymentRequest 'ID операции' = PaymentOperation.idOperation(operationPaymentRequest(PaymentRequest));

@defineDocumentOperationLegalEntity(paymentRequest, payer, 'Плательщик');
@defineDocumentOperationLegalEntity(paymentRequest, beneficiary, 'Бенефициар');

@defineDocumentOperationRole(paymentRequest);


partyA = DATA SESSION LegalEntity();
namePartyA 'Организация (поставщик)' = nameLegalEntity(partyA());
partyB = DATA SESSION LegalEntity();
namePartyB 'Организация (покупатель)' = nameLegalEntity(partyB());

FORM paymentRequest 'Платежное требование'

    OBJECTS p = PaymentRequest FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorPaymentRequest, numberPaymentRequest, seriesPaymentRequest, datePaymentRequest, timePaymentRequest,
                  seriesNumberContractPaymentRequest, notePaymentRequest
    PROPERTIES(p) namePayerPaymentRequest, nameAccountFromPaymentRequest, nameCurrencyAccountFromPaymentRequest,
                  nameBeneficiaryPaymentRequest, nameAccountToPaymentRequest, nameCurrencyAccountToPaymentRequest
    PROPERTIES(p) sumPaymentRequest, nameOperationPaymentRequest

    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger, requestedInContractLedger
    PROPERTIES(p, i) costPaymentRequestInContractLedger
    PROPERTIES(p) writePaymentRequestFIFO TODRAW i FORCE PANEL TOOLBAR,
                  writePaymentRequestLIFO TODRAW i FORCE PANEL TOOLBAR
    ORDER BY dateInContractLedger

    FILTERS activeInContractLedger(i),
            contractPaymentRequest(p) == contractInContractLedger(i)

    EVENTS
        ON OK prePostPaymentRequest(p)

    EDIT PaymentRequest OBJECT p
;

DESIGN paymentRequest FROM DEFAULT{
    main{
        type = CONTAINERV;
        NEW headerContainer{
            caption = 'Шапка документа';
            type = CONTAINERH;
            ADD PROPERTY(objectClassName);
            ADD PROPERTY(nameNumeratorPaymentRequest);
            ADD PROPERTY(numberPaymentRequest);
            ADD PROPERTY(seriesPaymentRequest);
            ADD PROPERTY(datePaymentRequest);
            ADD PROPERTY(timePaymentRequest);
        }
        NEW columnContainer{
            type = CONTAINERH;
            NEW firstColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Сторона (с)';
                ADD PROPERTY(namePayerPaymentRequest);
                ADD PROPERTY(nameAccountFromPaymentRequest);
                ADD PROPERTY(nameCurrencyAccountFromPaymentRequest);
            }
            NEW secondColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Сторона (на)';
                ADD PROPERTY(nameBeneficiaryPaymentRequest);
                ADD PROPERTY(nameAccountToPaymentRequest);
                ADD PROPERTY(nameCurrencyAccountToPaymentRequest);
            }
            NEW thirdColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Контракт';
                ADD PROPERTY(seriesNumberContractPaymentRequest);
            }
        }
        NEW paramContainer {
            type = CONTAINERH;
            caption = 'Параметры документа';
            ADD PROPERTY(nameOperationPaymentRequest);
            ADD PROPERTY(sumPaymentRequest);
            ADD PROPERTY(notePaymentRequest);
        }
    }
    ADD i.box;

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

// ------------------------ Требования по договору -------------------------- //

toRequestContract 'Не выставлено требований' (contract) =
    GROUP SUM toRequestInContractLedger(ledger) IF activeInContractLedger(ledger) BY contractInContractLedger(ledger);

requestedDebtContract 'Неоплаченных требований' (contract) =
    GROUP SUM requestedDebtInContractLedger (ledger) IF activeInContractLedger(ledger) BY contractInContractLedger(ledger);

toRequestContractDate 'Необходимо выставить требований' (contract, date) = balanceAContractDate(contract, date) (-) requestedDebtContract(contract);

overCreatePaymentRequests = ABSTRACT ACTION LIST (PaymentRequest);
createPaymentRequestContractDate 'Выставить платежное требование' = ACTION (contract, date) NEWSESSION {
    FOR ADDOBJ pr = PaymentRequest DO {
        datePaymentRequest(pr) <- date;
        payerPaymentRequest(pr) <- partyBContract(contract);
        beneficiaryPaymentRequest(pr) <- partyAContract(contract);
        contractPaymentRequest(pr) <- contract;
        sumPaymentRequest(pr) <- toRequestContractDate(contract, date);
        costPaymentRequestInContractLedger(pr, inContractLedger) <- sumInFIFOPaymentRequestInContractLedger(pr, inContractLedger)
            WHERE contractPaymentRequest(pr) == contractInContractLedger(inContractLedger);
        overCreatePaymentRequests(pr);
        FORM paymentRequest OBJECTS p = pr MANAGESESSION DOCKEDMODAL;
    }
}

EXTEND FORM contractLedger
    PROPERTIES(c, d) FORCE PANEL TOOLBAR createPaymentRequestContractDate
;

// ------------------------- Расширяем управление задолженностями ------------------------ //

backgroundPaymentRequestDate 'Цвет' (paymentRequest, date) = CASE WHEN datePaymentRequest(paymentRequest) > date THEN RGB(224,255,224)
                                                                  WHEN datePaymentRequest(paymentRequest) < date THEN RGB(255,224,224);

EXTEND FORM contractLedger
    OBJECTS pr = PaymentRequest
    PROPERTIES(pr) READONLY numberPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            seriesPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            datePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            timePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            sumPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            notePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            objectClassName BACKGROUND backgroundPaymentRequestDate(pr, d)
    PROPERTIES(pr) ADDFORM, EDITFORM, DELETE
    ORDER BY datePaymentRequest, timePaymentRequest
    FILTERS contractPaymentRequest(pr) == c
;

EXTEND DESIGN contractLedger {
    secondContainer {
        ADD pr.box;
    }
}

createPaymentRequests 'Выставить платежные требования' = ACTION (date) {
    LOCAL count = INTEGER();
    count() <- 0;
    FOR toRequestContractDate(contract, date) > 0 AND (partyAContract(contract) == partyA() OR (isCompanyLegalEntity(partyAContract(contract)) AND NOT partyA()))
                                                  AND (partyBContract(contract) == partyB() OR NOT partyB())
        ADDOBJ pr = PaymentRequestPosted DO {
        datePaymentRequest(pr) <- date;
        payerPaymentRequest(pr) <- partyBContract(contract);
        beneficiaryPaymentRequest(pr) <- partyAContract(contract);
        contractPaymentRequest(pr) <- contract;
        sumPaymentRequest(pr) <- toRequestContractDate(contract, date);
        costPaymentRequestInContractLedger(pr, inContractLedger) <- sumInFIFOPaymentRequestInContractLedger(pr, inContractLedger)
            WHERE contractPaymentRequest(pr) == contractInContractLedger(inContractLedger);
        overCreatePaymentRequests(pr);
        count() <- count() + 1;
    }

    MESSAGE 'Сформировано ' + count() + ' платежных требований.';
    apply();
} CONFIRM;

FORM paymentRequests 'Платежные требования'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS pr = PaymentRequest
    PROPERTIES(pr) READONLY numberPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            seriesPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            datePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            timePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            nameBeneficiaryPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            nameAccountFromPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            namePayerPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            nameAccountToPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            nameCurrencyAccountToPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            sumPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            notePaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d),
                            objectClassName BACKGROUND backgroundPaymentRequestDate(pr, d),
                            nameOperationPaymentRequest BACKGROUND backgroundPaymentRequestDate(pr, d)                            
    PROPERTIES(d) createPaymentRequests TODRAW pr TOOLBAR
    PROPERTIES(pr) ADDFORM, EDITFORM, DELETE
    ORDER BY datePaymentRequest, timePaymentRequest
    FILTERS partyAContract(contractPaymentRequest(pr)) == partyA() OR pr IS PaymentRequest AND NOT partyA(),
            partyBContract(contractPaymentRequest(pr)) == partyB() OR pr IS PaymentRequest AND NOT partyB()

    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger, requestedInContractLedger
    PROPERTIES(pr, i) costPaymentRequestInContractLedger
    FILTERS costPaymentRequestInContractLedger(pr, i)
    ORDER BY dateInContractLedger

    OBJECTS ic = InContractLedger
    PROPERTIES(ic) READONLY dateInContractLedger, descriptionInContractLedger, debtInContractLedger, requestedInContractLedger
    FILTERS activeInContractLedger(ic),
            toRequestInContractLedger(ic),
            partyAContract(contractInContractLedger(ic)) == partyA() OR ic IS InContractLedger AND NOT partyA(),
            partyBContract(contractInContractLedger(ic)) == partyB() OR ic IS InContractLedger AND NOT partyB()
    ORDER BY dateInContractLedger
;

DESIGN paymentRequests FROM DEFAULT{
    ADD d.box {
        type = CONTAINERH;
        caption = 'Параметры';
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    NEW splitContainer {
        type = SPLITV;
        fill = 1;
        ADD pr.box;
        NEW bodyContainer {
            fill = 1;
            type = TABBED;
            ADD i.box;
            ADD ic.box { caption = 'Документы, по которым не выставлены требования';}
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    contractNavigator{
        ADD paymentRequests;
    }
}