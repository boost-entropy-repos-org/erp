MODULE ContractLedger;

REQUIRE StockContract,
        Document,
        LegalEntity,
        Numerator,
        Currency,
        Finance,
        Dashboard;

PRIORITY Contract;

META defineContractLedgerPrefix (caption, prefix)

    CLASS ABSTRACT Contract###prefix##Ledger 'Изменение долга по контракту'###caption;
    TABLE contract###prefix##Ledger(Contract###prefix##Ledger);

    isPosted 'Проведен' (contract###prefix##Ledger) = ABSTRACT BOOLEAN (Contract###prefix##Ledger) PERSISTENT;
    skip 'Не проводить по учету' = ABSTRACT BOOLEAN (Contract###prefix##Ledger) PERSISTENT;
    active 'Активен' = isPosted(Contract###prefix##Ledger ledger) AND NOT skip(ledger) PERSISTENT;

    dateTime 'Дата/время' (contract###prefix##Ledger) = ABSTRACT DATETIME (Contract###prefix##Ledger) PERSISTENT INDEXED;
    date 'Дата' (Contract###prefix##Ledger contract###prefix##Ledger) = toDate(dateTime(contract###prefix##Ledger));
    time 'Время' (Contract###prefix##Ledger contract###prefix##Ledger) = toTime(dateTime(contract###prefix##Ledger));

    contract 'Договор' (contract###prefix##Ledger) = ABSTRACT Contract (Contract###prefix##Ledger) INDEXED PERSISTENT;

    description 'Название документа' (contract###prefix##Ledger) = ABSTRACT VARSTRING[200] (Contract###prefix##Ledger) PERSISTENT;

    sum 'Сумма' (contract###prefix##Ledger) = ABSTRACT NUMERIC[18,4] (Contract###prefix##Ledger) PERSISTENT @@denomination;

    currentBalance###prefix 'Текущая задолженность'###caption (contract)=
        GROUP SUM sum(Contract###prefix##Ledger contract###prefix##Ledger) IF active(contract###prefix##Ledger)
              BY contract(contract###prefix##Ledger);

    balanceB###prefix 'Задолженность на начало дня'###caption (Contract contract, DATE date) =
        GROUP SUM sum(Contract###prefix##Ledger contract###prefix##Ledger) IF active(contract###prefix##Ledger)
                  AND date(contract###prefix##Ledger) < DATE date
              BY contract(contract###prefix##Ledger), date;

    balanceA###prefix 'Задолженность на конец дня'###caption (Contract contract, DATE date) =
        GROUP SUM sum(Contract###prefix##Ledger contract###prefix##Ledger) IF active(contract###prefix##Ledger)
                  AND date(contract###prefix##Ledger) <= DATE date
              BY contract(contract###prefix##Ledger), date;

END

@defineContractLedgerPrefix(' (управленческая)', );
@defineContractLedgerPrefix(' (бухгалтерская)', a);

META implementContractLedger(prefix, objectClass, contractProp)
    EXTEND CLASS objectClass : Contract###prefix##Ledger;

    isPosted[Contract###prefix##Ledger](objectClass contract###prefix##Ledger) += isPosted(contract###prefix##Ledger);
    dateTime[Contract###prefix##Ledger](objectClass contract###prefix##Ledger) += dateTime(contract###prefix##Ledger);
    contract[Contract###prefix##Ledger](objectClass contract###prefix##Ledger) += contractProp(contract###prefix##Ledger);
    description[Contract###prefix##Ledger](objectClass contract###prefix##Ledger) += description(contract###prefix##Ledger);

END

META implementContractPrepaymentLedger(object, sumProp, contractProp)
    @implementContractPrepaymentLedgerInner(object, ###object, sumProp, contractProp);
END

META implementContractPrepaymentLedgerInner(object, classPrefix, sumProp, contractProp)

    CLASS classPrefix##ContractLedger : ContractLedger;
    //TABLE object##ContractLedger(object##ContractLedger);

    needToCreate (###object object, PaymentPeriod paymentPeriod) =
        isSaleType(contractProp(object)) AND
        isPrepaymentType(paymentCondition(object)) AND
        paymentCondition(object) == paymentCondition(paymentPeriod) AND
        isPosted(object);

    @defineAggregation(object, paymentPeriod, object##ContractLedger, needToCreate);
    
    bankingPaymentDate (###object##ContractLedger l) = jumpWorkdays(country(customer(object(l))),
                                                                           date(object(l)),
                                                                           countDays(paymentPeriod(l)));
                                                                           
    overCalendarPaymentDateTime = ABSTRACT DATETIME (classPrefix##ContractLedger);
    calendarPaymentDateTime (###object##ContractLedger l) = sumDay(dateTime(object(l)),
                                                               countDays(paymentPeriod(l)));

    isPosted(###object##ContractLedger l) += isPosted(object(l));
    dateTime(###object##ContractLedger l) += IF bankingDays(paymentCondition(paymentPeriod(l))) THEN
                                                      toDateTime(bankingPaymentDate(l)) ELSE
                                                      OVERRIDE calendarPaymentDateTime(l), overCalendarPaymentDateTime(l);
    contract(###object##ContractLedger object##ContractLedger) += contractProp(object(object##ContractLedger));
    description(###object##ContractLedger object##ContractLedger) += description(object(object##ContractLedger));
    sum(###object##ContractLedger object##ContractLedger) +=
        IF currency(object(object##ContractLedger)) != currency(contractProp(object(object##ContractLedger))) THEN 
            NUMERIC[18,4](sumProp(object(object##ContractLedger)) * 
                          rateOn(typeExchange(contractProp(object(object##ContractLedger))), 
                                                                              currency((object(object##ContractLedger))),
                                                                              date(object(object##ContractLedger))) * 
                          percent(paymentPeriod(object##ContractLedger)) / 100.0)
        ELSE 
            NUMERIC[18,4](sumProp(object(object##ContractLedger)) * percent(paymentPeriod(object##ContractLedger)) / 100.0);
    descriptionPaymentDatesPercent 'Дата оплаты'  = GROUP CONCAT 
        (toDateDDMMYYYY(date(###object##ContractLedger l)) +'-'+ percent(paymentPeriod(l)) +'%') , ', '
            BY object(l)
            ORDER date(l) MINCHARWIDTH 30 PREFCHARWIDTH 30;
END

//--------------------------------------------- Логика приходов и расходов ------------------------------------------------------//

META defineInOutContractLedgerPrefix(caption, prefix, classPrefix)

    CLASS ABSTRACT classPrefix##ContractLedger caption;
    TABLE prefix##ContractLedger(classPrefix##ContractLedger);

    isPosted 'Закрыт' (prefix##ContractLedger) = ABSTRACT BOOLEAN (classPrefix##ContractLedger) PERSISTENT;
    skip 'Не проводить по учету' = ABSTRACT BOOLEAN (classPrefix##ContractLedger) PERSISTENT;
    active 'Активен' = isPosted(###prefix##ContractLedger ledger) AND NOT skip(ledger) PERSISTENT;

    dateTime 'Дата/время' (prefix##ContractLedger) = ABSTRACT DATETIME (classPrefix##ContractLedger) PERSISTENT INDEXED;
    date 'Дата' (###prefix##ContractLedger prefix##ContractLedger) = toDate(dateTime(prefix##ContractLedger)) PERSISTENT INDEXED;
    time 'Время' (###prefix##ContractLedger prefix##ContractLedger) = toTime(dateTime(prefix##ContractLedger));

    contract 'Договор' (prefix##ContractLedger) = ABSTRACT Contract (classPrefix##ContractLedger) PERSISTENT INDEXED;

    description 'Название документа' (prefix##ContractLedger) = ABSTRACT VARSTRING[200] (classPrefix##ContractLedger) PERSISTENT;
    sum 'Сумма' = ABSTRACT NUMERIC[22,8] (classPrefix##ContractLedger) MINCHARWIDTH 12 PREFCHARWIDTH 12 PERSISTENT @@denomination;

    is (###prefix##ContractLedger prefix##ContractLedger) = prefix##ContractLedger IS classPrefix##ContractLedger;
    
    edit 'Редактировать' = ACTION ABSTRACT LIST (classPrefix##ContractLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;    

END

@defineInOutContractLedgerPrefix('Приход', in, In);

number 'Номер документа' = ABSTRACT VARSTRING[28] (InContractLedger) PERSISTENT MINCHARWIDTH 7;
series 'Серия' = ABSTRACT STRING[2] (InContractLedger) PERSISTENT FIXEDCHARWIDTH 3;
seriesNumber 'Серия/Номер' (InContractLedger i) = CONCAT '', series(i), number(i) MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20 PERSISTENT;
customerStock = ABSTRACT Stock (InContractLedger) PERSISTENT;
nameCustomerStock 'Склад покупателя' (InContractLedger inContractLedger) = name(customerStock(inContractLedger));
supplierStock (document) = ABSTRACT Stock (InContractLedger) PERSISTENT;
nameSupplierStock 'Склад поставщика' (InContractLedger inContractLedger) = name(supplierStock(inContractLedger));

paymentCondition 'Условия оплаты'  = ABSTRACT PaymentCondition (InContractLedger) PERSISTENT;
descriptionPaymentCondition 'Условия оплаты' (InContractLedger ledger) = description(paymentCondition(ledger));

@defineInOutContractLedgerPrefix('Расход', out, Out);

isReturn 'Возвратный' = ABSTRACT BOOLEAN (OutContractLedger) PERSISTENT;

TABLE outContractLedgerInContractLedger (OutContractLedger, InContractLedger);
cost 'Оплачено из документа' (outContractLedger, inContractLedger) = DATA NUMERIC[18,4] (OutContractLedger, InContractLedger) @@denomination;
costedOutContractLedger 'Оплачено по документу' (inContractLedger) =
    GROUP SUM cost(OutContractLedger outContractLedger, InContractLedger inContractLedger) IF
    active(inContractLedger) AND active(outContractLedger)
    BY inContractLedger PERSISTENT;
costedOutContractLedger 'Оплачено по документу на дату' (inContractLedger, date) =
    GROUP SUM cost(OutContractLedger outContractLedger, InContractLedger inContractLedger) IF
              active(inContractLedger) AND active(outContractLedger) AND
              date(outContractLedger) <= DATE date
    BY inContractLedger, date;
costedInContractLedger 'Расписано из документа' (outContractLedger) =
    GROUP SUM cost(OutContractLedger outContractLedger, InContractLedger inContractLedger) IF
    active(inContractLedger) //AND isPostedOutContractLedger(outContractLedger)
    BY outContractLedger PERSISTENT MINCHARWIDTH 15 PREFCHARWIDTH 15;
costedInContractLedger 'Расписано из документа на дату' (outContractLedger, date) =
    GROUP SUM cost(OutContractLedger outContractLedger, InContractLedger inContractLedger) IF
              active(inContractLedger) AND //isPostedOutContractLedger(outContractLedger) AND
              date(inContractLedger) <= DATE date
    BY outContractLedger, date;

debt 'Долг по документу' (InContractLedger inContractLedger) =
    sum(inContractLedger) (-) costedOutContractLedger(inContractLedger) MINCHARWIDTH 12 PREFCHARWIDTH 12 PERSISTENT INDEXED;

debt 'Долг по документу на дату' (InContractLedger inContractLedger, DATE date) =
    (sum(inContractLedger) IF date IS DATE) (-) costedOutContractLedger(inContractLedger, date) MINCHARWIDTH 12 PREFCHARWIDTH 12;

//CONSTRAINT abs(costedInContractLedger(OutContractLedger outContractLedger)) > abs(sum(outContractLedger))
//    MESSAGE 'Расписанная сумма должна быть равна сумме платежа';

sumInFIFO (OutContractLedger outContractLedger, InContractLedger inContractLedger) =
    PARTITION UNGROUP sum
              LIMIT debt(inContractLedger) IF
                    contract(outContractLedger) == contract(inContractLedger) AND
                    active(inContractLedger)
              BY outContractLedger
              ORDER dateTime(inContractLedger), inContractLedger;

sumInLIFO (OutContractLedger outContractLedger, InContractLedger inContractLedger) =
    PARTITION UNGROUP sum
              LIMIT debt(inContractLedger) IF
                    contract(outContractLedger) == contract(inContractLedger) AND
                    active(inContractLedger)
              BY outContractLedger
              ORDER DESC dateTime(inContractLedger), inContractLedger;

negativeSum 'Обратная сумма' (OutContractLedger outContractLedger) = -sum(outContractLedger);
negativeSumInLIFO (OutContractLedger outContractLedger, InContractLedger inContractLedger) =
    PARTITION UNGROUP negativeSum
              LIMIT costedOutContractLedger(inContractLedger) IF
                    contract(outContractLedger) == contract(inContractLedger) AND
                    active(inContractLedger)
              BY outContractLedger
              ORDER DESC dateTime(inContractLedger), inContractLedger;

writeFIFO 'Расписать по FIFO'(OutContractLedger outContractLedger) = ACTION {

    cost(outContractLedger, InContractLedger inContractLedger) <- NULL;
    IF isReturn(outContractLedger) THEN {
        cost(outContractLedger, InContractLedger inContractLedger) <- -negativeSumInLIFO(outContractLedger, inContractLedger);
    } ELSE {
        cost(outContractLedger, InContractLedger inContractLedger) <- sumInFIFO(outContractLedger, inContractLedger);
    }
}

writeFIFOApply 'Расписать по FIFO'(OutContractLedger outContractLedger) = ACTION {
    writeFIFO(outContractLedger);
    apply();
}

writeLIFO 'Расписать по LIFO'(OutContractLedger outContractLedger) = ACTION {

    ASSIGN cost(outContractLedger, InContractLedger inContractLedger) <- NULL;
    ASSIGN cost(outContractLedger, InContractLedger inContractLedger) <- sumInLIFO(outContractLedger, inContractLedger);
}

writeLIFOApply 'Расписать по LIFO'(OutContractLedger outContractLedger) = ACTION {
    writeLIFO(outContractLedger);
    apply();
}

META implementInOutContractLedgerPrefix(prefix, objectClass, contractProp)

    isPosted[###prefix##ContractLedger](objectClass prefix##ContractLedger) += isPosted(prefix##ContractLedger);
    dateTime[###prefix##ContractLedger](objectClass prefix##ContractLedger) += dateTime(prefix##ContractLedger);
    contract[###prefix##ContractLedger](objectClass prefix##ContractLedger) += contractProp(prefix##ContractLedger);
    description[###prefix##ContractLedger](objectClass prefix##ContractLedger) += description(prefix##ContractLedger);

END

META implementInContractLedger(objectClass, contractProp)
    EXTEND CLASS objectClass : InContractLedger;
    @implementInOutContractLedgerPrefix(in, objectClass, contractProp);
    number[InContractLedger](objectClass inContractLedger) += number(inContractLedger);
    series[InContractLedger](objectClass inContractLedger) += series(inContractLedger);    
    customerStock[InContractLedger](objectClass inContractLedger) += customerStock(inContractLedger);
    supplierStock[InContractLedger](objectClass inContractLedger) += supplierStock(inContractLedger);
    paymentCondition[InContractLedger](objectClass inContractLedger) += paymentCondition(inContractLedger);
    
    edit[InContractLedger](objectClass ledger) += ACTION edit(ledger);    
END

META implementOutContractLedger(objectClass, contractProp)
    EXTEND CLASS objectClass : OutContractLedger;
    @implementInOutContractLedgerPrefix(out, objectClass, contractProp);
    
    edit[OutContractLedger](objectClass ledger) += ACTION edit(ledger);
END

// ----------------------------------------- Связь между InContractLedger и ContractLedger
inContractLedger = ABSTRACT InContractLedger (ContractLedger) PERSISTENT INDEXED;

minDateContractLedger = GROUP MIN date(ContractLedger l) BY inContractLedger(l) PERSISTENT;

//------------------------------------------- Платеж по договору -----------------------------------------------------//

debtSum 'Долг по документам на дату' (contract, date) = GROUP SUM debt(InContractLedger inContractLedger, DATE date) IF
                                                                            active(inContractLedger) AND
                                                                            date(inContractLedger) <= date
                                                                  BY contract(inContractLedger), date;

debtSum 'Долг по документам' (contract) = GROUP SUM debt(InContractLedger inContractLedger) IF
                                                                            active(inContractLedger)
                                                                  BY contract(inContractLedger);      
//----------------------------------------------- Цвета --------------------------------------------------------------//

backgroundSum 'Цвет' (ContractLedger contractLedger, DATE date) = OVERRIDE RGB(255,238,165) IF date(contractLedger) <= date,
                                                                         RGB(255,160,160) IF date(contractLedger) > date;
background 'Цвет' (ContractLedger contractLedger, DATE date) = RGB(255,160,160) IF date(contractLedger) > date;
backgroundSum 'Цвет' (Contract contract) = RGB(255,238,165) IF contract IS Contract;
backgroundSum 'Цвет' (ContractALedger contractALedger, DATE date) = OVERRIDE RGB(232,184,146) IF date(contractALedger) <= date,
                                                                           RGB(255,160,160) IF date(contractALedger) > date;
background 'Цвет' (ContractALedger contractALedger, DATE date) = RGB(255,160,160) IF date(contractALedger) > date;
backgroundSumA 'Цвет' (Contract contract) = RGB(232,184,146) IF contract IS Contract;
backgroundBonusSum 'Цвет' (InContractLedger inContractLedger) = RGB(213,249,185) IF inContractLedger IS InContractLedger;
backgroundBonusSum 'Цвет' (Contract contract) = RGB(213,249,185) IF contract IS Contract;
background 'Цвет' (OutContractLedger outContractLedger, DATE date) = RGB(255,160,160) IF date(outContractLedger) > date;
background 'Цвет' (InContractLedger inContractLedger, DATE date) = RGB(255,160,160) IF date(inContractLedger) > date;

//-------------------------------------------- Разнесение по документам -----------------------------------------------//

partyA = DATA LOCAL LegalEntity();
namePartyA 'Организация (поставщик)' = name(partyA());
partyB = DATA LOCAL LegalEntity();
namePartyB 'Организация (покупатель)' = name(partyB());

isCosted 'Расписан' (OutContractLedger outContractLedger) = abs(sum(outContractLedger)) (-) abs(costedInContractLedger(outContractLedger)) PERSISTENT;

writeNotCostedOutContractLedgerFIFOApply 'Расписать все неразнесенные по FIFO'() = ACTION {

    APPLY SINGLE {
        LOCAL changed = BOOLEAN (OutContractLedger);
        changed(OutContractLedger l) <- TRUE IF isCosted(l) AND isPosted(l);
        
        cost(OutContractLedger ol, InContractLedger il) <- NULL WHERE changed(ol) AND costedInContractLedger(ol);
        
        LOCAL ordered = INTEGER (OutContractLedger);
        ordered(OutContractLedger ledger) <- PARTITION SUM 1 IF changed(ledger) BY contract(ledger) ORDER dateTime(ledger), ledger;
    
        FOR iterate(INTEGER i, 1, [= GROUP MAX ordered(OutContractLedger ledger)]()) DO {
            LOCAL it = BOOLEAN (OutContractLedger);
            it(OutContractLedger ledger) <- ordered(ledger) == i AND isReturn(ledger); // чтобы определились классы
            IF [= GROUP SUM 1 IF it(OutContractLedger ledger)]() THEN
                cost(OutContractLedger ol, InContractLedger il) <- -negativeSumInLIFO(ol, il) WHERE it(ol) AND negativeSumInLIFO(ol, il);

            it(OutContractLedger ledger) <- ordered(ledger) == i AND NOT isReturn(ledger); // чтобы определились классы
            cost(OutContractLedger ol, InContractLedger il) <- sumInFIFO(ol, il) WHERE it(ol) AND sumInFIFO(ol, il);
        }
    }
}

writeNotCostedOutContractLedgerLIFOApply 'Расписать все неразнесенные по LIFO'() = ACTION {
    FOR isCosted(OutContractLedger ledger) ORDER DESC dateTime(ledger) DO {
        writeLIFO(ledger);
    }
    apply();
}

FORM costContractLedger 'Разнесение документов'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS o = OutContractLedger, i = InContractLedger
    PROPERTIES(o) READONLY date BACKGROUND background(o, d),
                           description BACKGROUND background(o, d),
                           sum BACKGROUND background(o, d),
                           costedInContractLedger BACKGROUND background(o, d)
    PROPERTIES(o) writeFIFOApply TODRAW i FORCE PANEL TOOLBAR,
                  writeLIFOApply TODRAW i FORCE PANEL TOOLBAR
    ORDER BY date(o)

    PROPERTIES(i) READONLY date BACKGROUND background(i, d),
                           description BACKGROUND background(i, d),
                           debt BACKGROUND background(i, d)
    PROPERTIES(o, i) cost BACKGROUND background(i, d)
    ORDER BY date(i)

    FILTERGROUP filters1
        FILTER 'Неразнесенные' isCosted(o) 'F9' DEFAULT

    FILTERGROUP filters2
        FILTER 'Неоплаченные' debt(i) 'F10' DEFAULT

    FILTERS partyB(contract(o)) == partyB() OR (o IS OutContractLedger AND NOT partyB()),
            partyA(contract(o)) == partyA() OR (o IS OutContractLedger AND NOT partyA()),
            contract(o) == contract(i)

;

DESIGN costContractLedger {
    NEW topContainer {
        type = CONTAINERV;
        fill = 1;
        NEW headerContainer {
            type = CONTAINERH;
            caption = 'Шапка';
            MOVE PROPERTY(date);
            MOVE PROPERTY(namePartyA());
            MOVE PROPERTY(namePartyB());
        }
        NEW firstContainer {
            type = SPLITV;
            fill = 1;
            MOVE o.box;
            MOVE i.box;
        }
   }
MOVE functions.box;
}

//-------------------------------------------- Сводная форма ---------------------------------------------------------//

FORM contractLedger 'Управление задолженностями'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS c = Contract
    PROPERTIES(c) READONLY seriesNumber, namePartyA, namePartyB, nameCurrency
    PROPERTIES(c, d) READONLY balanceA BACKGROUND backgroundSum(c),
                              balanceAA BACKGROUND backgroundSumA(c)
    PROPERTIES(c) READONLY debtSum BACKGROUND backgroundBonusSum(c)

//    ORDER BY seriesNumber(c)

    OBJECTS cl = ContractLedger
    PROPERTIES(cl) READONLY date BACKGROUND background(cl, d),
                            sum BACKGROUND backgroundSum(cl, d),
                            description BACKGROUND background(cl, d)
    ORDER BY date(cl)
    FILTERS active(cl)

    OBJECTS cal = ContractALedger
    PROPERTIES(cal) READONLY date BACKGROUND background(cal, d),
                             sum BACKGROUND backgroundSum(cal, d),
                             description BACKGROUND background(cal, d)
    ORDER BY date(cal)
    FILTERS active(cal)

    OBJECTS ic = InContractLedger
    PROPERTIES(ic) READONLY date, description, sum
    PROPERTIES(ic) READONLY debt BACKGROUND backgroundBonusSum(ic)

    ORDER BY date(ic)
    FILTERS active(ic)
    FILTERGROUP filters1 
        FILTER 'Неоплаченные' debt(ic) 'F6' DEFAULT
    FILTERGROUP filters2 
        FILTER 'На дату' date(ic) <= d 'F5' DEFAULT        

    OBJECTS icoc = OutContractLedger
    PROPERTIES(icoc) READONLY date, description, sum
    PROPERTIES(icoc, d) READONLY costedInContractLedger
    PROPERTIES READONLY cost(icoc, ic)
    ORDER BY date(icoc)

    OBJECTS oc = OutContractLedger
    PROPERTIES(oc) READONLY date, description, sum
    PROPERTIES(oc, d) READONLY costedInContractLedger
    PROPERTIES(oc) FORCE PANEL TOOLBAR writeFIFO SHOWIF is(oc),
                                       writeLIFO SHOWIF is(oc)
    ORDER BY date(oc)

    OBJECTS ocic = InContractLedger
    PROPERTIES(ocic) READONLY date, description, sum
    PROPERTIES(ocic, d) READONLY debt
    PROPERTIES READONLY cost(oc, ocic)
    ORDER BY date(ocic)
    FILTERS active(ocic)

    FILTERS contract(cl) == c,
            contract(cal) == c,
            contract(ic) == c,
            contract(oc) == c,
            partyB(c) == partyB() OR (c IS Contract AND NOT partyB()),
            partyA(c) == partyA() OR (c IS Contract AND NOT partyA()),
            cost(icoc, ic) > 0,
            cost(oc, ocic) > 0

;

DESIGN contractLedger {
    NEW header {
        type = CONTAINERH;
        caption = 'Шапка';
        MOVE PROPERTY(date);
        MOVE PROPERTY(namePartyA());
        MOVE PROPERTY(namePartyB());
    }

    NEW detail {
        fill = 1;
        type = TABBED;

        NEW documents {
            caption = 'Документы';
            type = SPLITV;
            MOVE c.box {
                fill = 1;    
            }
            NEW firstSecondContainer {
                fill = 2;
                type = TABBED;
                NEW debt.box {
                    type = CONTAINERH;
                    caption = 'Долг по документу';
                    MOVE ic.box;
                    MOVE icoc.box;
                }                
                NEW firstThirdContainer {
                    fill = 1;
                    type = SPLITH;
                    type = CONTAINERH;
                    caption = 'Изменения долга';
                    MOVE cl.box;
                    MOVE cal.box;
                }
                NEW cost.box {
                    type = CONTAINERH;
                    caption = 'Расписано по документу';
                    MOVE oc.box;
                    MOVE ocic.box;
                }
            }
        }
    }
    MOVE functions.box;
}

contractProp = DATA LOCAL Contract();
seriesNumberContractProp 'Договор' = seriesNumber(contractProp());

seriesNumberContract 'Серия/Номер договора' (InContractLedger inContractLedger) = seriesNumber(contract(inContractLedger)); 
partyAContract (InContractLedger inContractLedger) = partyA(contract(inContractLedger)); 
namePartyAContract 'Организация (поставщик)' (InContractLedger inContractLedger) = namePartyA(contract(inContractLedger)); 
partyBContract (InContractLedger inContractLedger) = partyB(contract(inContractLedger)); 
namePartyBContract 'Организация (покупатель)' (InContractLedger inContractLedger) = namePartyB(contract(inContractLedger)); 
nameCurrencyContract 'Валюта договора' (InContractLedger inContractLedger) = nameCurrency(contract(inContractLedger));  

seriesNumberContract 'Серия/Номер договора' (OutContractLedger outContractLedger) = seriesNumber(contract(outContractLedger)); 
partyAContract (OutContractLedger outContractLedger) = partyA(contract(outContractLedger)); 
namePartyAContract 'Организация (поставщик)' (OutContractLedger outContractLedger) = namePartyA(contract(outContractLedger)); 
partyBContract (OutContractLedger outContractLedger) = partyB(contract(outContractLedger)); 
namePartyBContract 'Организация (покупатель)' (OutContractLedger outContractLedger) = namePartyB(contract(outContractLedger)); 
nameCurrencyContract 'Валюта договора' (OutContractLedger outContractLedger) = nameCurrency(contract(outContractLedger));  

FORM unpaidDocuments 'Неоплаченные документы'
    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES valDt = OBJVALUE(dt)
    
    PROPERTIES() namePartyA, namePartyB, seriesNumberContractProp
    
    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY isPosted, number, series, date, namePartyAContract, 
                           nameSupplierStock, namePartyBContract, nameCustomerStock, 
                           nameCurrencyContract, seriesNumberContract, sum, 
                           costedOutContractLedger, debt, description                             
                             
    ORDER BY date(i), number(i)
    FILTERS active(i), contract(i),  
            contract(i) == contractProp() OR (i IS InContractLedger AND NOT seriesNumberContractProp()),
            partyBContract(i) == partyB() OR (i IS InContractLedger AND NOT partyB()),
            partyAContract(i) == partyA() OR (i IS InContractLedger AND NOT partyA())
    FILTERGROUP filters1
        FILTER 'Неоплаченные' debt(i) 'F10' DEFAULT
    FILTERGROUP filters2        
        FILTER 'С договором' contract(i) 'F9' DEFAULT
    FILTERGROUP filters3
        FILTER 'На дату' date(i) <= dt 'F5' DEFAULT 
                       
    OBJECTS o = OutContractLedger
    PROPERTIES(o) READONLY date, description, sum
    PROPERTIES(o, i) READONLY cost
    FILTERS cost(o, i)
;

DESIGN unpaidDocuments {
    NEW header {
        type = CONTAINERH;
        caption = 'Шапка';
        MOVE PROPERTY(valDt);
        MOVE PROPERTY(namePartyA());
        MOVE PROPERTY(namePartyB());
        MOVE PROPERTY(seriesNumberContractProp());
    }
    NEW docsContainer{
        type =SPLITV;
        fill = 1;
        caption = 'Документы';
        MOVE i.box{
            fill = 4;
            PROPERTY(sum(i)){
                caption = 'Сумма документа';
            }
        }
        MOVE o.box{
            fill = 1;
        }      
    }  
    MOVE functions.box;
}     

NAVIGATOR {
    dashboardNavigator {
        NEW contractDashboardNavigator 'Задолженности' {
            ADD contractLedger;
            ADD costContractLedger;
            ADD unpaidDocuments;
        }
    }
    financeNavigator {
        NEW contractNavigator 'Задолженности' BEFORE financeMasterData {
            ADD paymentConditions;
        }
    }
}
