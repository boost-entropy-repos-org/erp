MODULE ContractLedger;

REQUIRE StockContract,
        Document,
        LegalEntity,
        Numerator,
        Currency,
        Finance,
        Dashboard;

PRIORITY Contract;

META defineContractLedgerPrefix (caption, prefix)

    CLASS ABSTRACT Contract###prefix##Ledger 'Изменение долга по контракту'###caption;
    TABLE contract###prefix##Ledger(Contract###prefix##Ledger);

    isPostedContract###prefix##Ledger 'Закрыт' (contract###prefix##Ledger) = ABSTRACT BOOLEAN (Contract###prefix##Ledger) PERSISTENT;
    skipContract###prefix##Ledger 'Не проводить по учету' = ABSTRACT BOOLEAN (Contract###prefix##Ledger) PERSISTENT;
    activeContract###prefix##Ledger 'Активен' = isPostedContract###prefix##Ledger(ledger) AND NOT skipContract###prefix##Ledger(ledger) PERSISTENT;

    dateTimeContract###prefix##Ledger 'Дата/время' (contract###prefix##Ledger) = ABSTRACT DATETIME (Contract###prefix##Ledger) PERSISTENT;
    dateContract###prefix##Ledger 'Дата' (contract###prefix##Ledger) = toDate(dateTimeContract###prefix##Ledger(contract###prefix##Ledger));
    timeContract###prefix##Ledger 'Время' (contract###prefix##Ledger) = toTime(dateTimeContract###prefix##Ledger(contract###prefix##Ledger));

    contractContract###prefix##Ledger 'Договор' (contract###prefix##Ledger) = ABSTRACT Contract (Contract###prefix##Ledger) PERSISTENT;

    descriptionContract###prefix##Ledger 'Название документа' (contract###prefix##Ledger) = ABSTRACT VARSTRING[200] (Contract###prefix##Ledger) PERSISTENT;

    sumContract###prefix##Ledger 'Сумма' (contract###prefix##Ledger) = ABSTRACT NUMERIC[16,2] (Contract###prefix##Ledger) PERSISTENT;

    currentBalance###prefix##Contract 'Текущая задолженность'###caption (contract)=
        GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger) IF activeContract###prefix##Ledger(contract###prefix##Ledger)
              BY contractContract###prefix##Ledger(contract###prefix##Ledger) PERSISTENT;

    balanceB###prefix##ContractDate 'Задолженность на начало дня'###caption (contract, date) =
        currentBalance###prefix##Contract(contract) (-)
        [= GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger) IF activeContract###prefix##Ledger(contract###prefix##Ledger)
                  AND dateContract###prefix##Ledger(contract###prefix##Ledger) >= date
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

    balanceA###prefix##ContractDate 'Задолженность на конец дня'###caption (contract, date) =
        currentBalance###prefix##Contract(contract) (-)
        [= GROUP SUM sumContract###prefix##Ledger(contract###prefix##Ledger) IF activeContract###prefix##Ledger(contract###prefix##Ledger)
                  AND dateContract###prefix##Ledger(contract###prefix##Ledger) > date
              BY contractContract###prefix##Ledger(contract###prefix##Ledger), date](contract, date);

END

@defineContractLedgerPrefix(' (управленческая)', );
@defineContractLedgerPrefix(' (бухгалтерская)', a);

META implementContractLedger(prefix, objectClass, contractProp)
    EXTEND CLASS objectClass : Contract###prefix##Ledger;

    isPostedContract###prefix##Ledger(contract###prefix##Ledger) += isPosted###objectClass(contract###prefix##Ledger);
    dateTimeContract###prefix##Ledger(contract###prefix##Ledger) += dateTime###objectClass(contract###prefix##Ledger);
    contractContract###prefix##Ledger(contract###prefix##Ledger) += contractProp###objectClass(contract###prefix##Ledger);
    descriptionContract###prefix##Ledger(contract###prefix##Ledger) += description###objectClass(contract###prefix##Ledger);

END

META implementContractPrepaymentLedger(object, sumProp, contractProp)
    @implementContractPrepaymentLedgerInner(object, ###object, sumProp, contractProp);
END

META implementContractPrepaymentLedgerInner(object, classPrefix, sumProp, contractProp)

    CLASS classPrefix##ContractLedger : ContractLedger;
    //TABLE object##ContractLedger(object##ContractLedger);

    needToCreate###object##PaymentPeriod (object, paymentPeriod) =
        isSaleTypeContract(contractProp###object(object)) AND
        isPrepaymentTypePaymentCondition(paymentCondition###object(object)) AND
        paymentCondition###object(object) == paymentConditionPaymentPeriod(paymentPeriod) AND
        isPosted###object(object);

    @defineAggregation(object, paymentPeriod, object##ContractLedger, needToCreate);

    isPostedContractLedger(object##ContractLedger) += isPosted###object(object###object##ContractLedger(object##ContractLedger));
    dateTimeContractLedger(object##ContractLedger) += IF bankingDaysPaymentCondition(paymentConditionPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger))) THEN
                                                      toDateTime(jumpWorkdays(countryLegalEntity(customer###object(object###object##ContractLedger(object##ContractLedger))),
                                                                              date###object(object###object##ContractLedger(object##ContractLedger)),
                                                                              countDaysPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)))) ELSE
                                                      sumDateTimeDay(dateTime###object(object###object##ContractLedger(object##ContractLedger)),
                                                                     countDaysPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)));
    contractContractLedger(object##ContractLedger) += contractProp###object(object###object##ContractLedger(object##ContractLedger));
    descriptionContractLedger(object##ContractLedger) += description###object(object###object##ContractLedger(object##ContractLedger));
    sumContractLedger(object##ContractLedger) +=
        NUMERIC[16,2](sumProp###invoice(object###object##ContractLedger(object##ContractLedger)) * percentPaymentPeriod(paymentPeriod###object##ContractLedger(object##ContractLedger)) / 100.0);

END

//--------------------------------------------- Логика приходов и расходов ------------------------------------------------------//

META defineInOutContractLedgerPrefix(caption, prefix, classPrefix)

    CLASS ABSTRACT classPrefix##ContractLedger caption;
    TABLE prefix##ContractLedger(classPrefix##ContractLedger);

    isPosted###prefix##ContractLedger 'Закрыт' (prefix##ContractLedger) = ABSTRACT BOOLEAN (classPrefix##ContractLedger) PERSISTENT;
    skip###prefix##ContractLedger 'Не проводить по учету' = ABSTRACT BOOLEAN (classPrefix##ContractLedger) PERSISTENT;
    active###prefix##ContractLedger 'Активен' = isPosted###prefix##ContractLedger(ledger) AND NOT skip###prefix##ContractLedger(ledger) PERSISTENT;

    dateTime###prefix##ContractLedger 'Дата/время' (prefix##ContractLedger) = ABSTRACT DATETIME (classPrefix##ContractLedger) PERSISTENT;
    date###prefix##ContractLedger 'Дата' (prefix##ContractLedger) = toDate(dateTime###prefix##ContractLedger(prefix##ContractLedger));
    time###prefix##ContractLedger 'Время' (prefix##ContractLedger) = toTime(dateTime###prefix##ContractLedger(prefix##ContractLedger));

    contract###prefix##ContractLedger 'Договор' (prefix##ContractLedger) = ABSTRACT Contract (classPrefix##ContractLedger) PERSISTENT;

    description###prefix##ContractLedger 'Название документа' (prefix##ContractLedger) = ABSTRACT VARSTRING[200] (classPrefix##ContractLedger) PERSISTENT;
    sum###prefix##ContractLedger 'Сумма' = ABSTRACT NUMERIC[22,8] (classPrefix##ContractLedger) MINCHARWIDTH 12 PREFCHARWIDTH 12 PERSISTENT;

    is###prefix##ContractLedger (prefix##ContractLedger) = prefix##ContractLedger IS classPrefix##ContractLedger;

END

@defineInOutContractLedgerPrefix('Приход', in, In);

numberInContractLedger 'Номер документа' = ABSTRACT STRING[20] (InContractLedger) PERSISTENT MINCHARWIDTH 7;
seriesInContractLedger 'Серия' = ABSTRACT STRING[2] (InContractLedger) PERSISTENT FIXEDCHARWIDTH 3;
seriesNumberInContractLedger 'Серия/Номер' (i) = CONCAT '', seriesInContractLedger(i), numberInContractLedger(i) MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20 PERSISTENT;
customerStockInContractLedger = ABSTRACT Stock (InContractLedger) PERSISTENT;
nameCustomerStockInContractLedger 'Склад покупателя' (inContractLedger) = nameStock(customerStockInContractLedger(inContractLedger));
supplierStockInContractLedger (document) = ABSTRACT Stock (InContractLedger) PERSISTENT;
nameSupplierStockInContractLedger 'Склад поставщика' (inContractLedger) = nameStock(supplierStockInContractLedger(inContractLedger));

paymentConditionInContractLedger 'Условия оплаты'  = ABSTRACT PaymentCondition (InContractLedger);
@defineInOutContractLedgerPrefix('Расход', out, Out);

TABLE outContractLedgerInContractLedger (OutContractLedger, InContractLedger);
costOutContractLedgerInContractLedger 'Оплачено из документа' (outContractLedger, inContractLedger) = DATA NUMERIC[16,2] (OutContractLedger, InContractLedger) PERSISTENT;
costedOutContractLedgerInContractLedger 'Оплачено по документу' (inContractLedger) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) IF
    activeInContractLedger(inContractLedger) AND activeOutContractLedger(outContractLedger)
    BY inContractLedger PERSISTENT;
costedOutContractLedgerInContractLedgerDate 'Оплачено по документу на дату' (inContractLedger, date) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) IF
              activeInContractLedger(inContractLedger) AND activeOutContractLedger(outContractLedger) AND
              dateOutContractLedger(outContractLedger) <= date
    BY inContractLedger, date;
costedInContractLedgerOutContractLedger 'Расписано из документа' (outContractLedger) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) IF
    activeInContractLedger(inContractLedger) //AND isPostedOutContractLedger(outContractLedger)
    BY outContractLedger PERSISTENT MINCHARWIDTH 15 PREFCHARWIDTH 15;
costedInContractLedgerOutContractLedgerDate 'Расписано из документа на дату' (outContractLedger, date) =
    GROUP SUM costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) IF
              activeInContractLedger(inContractLedger) AND //isPostedOutContractLedger(outContractLedger) AND
              dateInContractLedger(inContractLedger) <= date
    BY outContractLedger, date;

debtInContractLedger 'Долг по документу' (inContractLedger) =
    sumInContractLedger(inContractLedger) (-) costedOutContractLedgerInContractLedger(inContractLedger) MINCHARWIDTH 12 PREFCHARWIDTH 12;

debtInContractLedgerDate 'Долг по документу на дату' (inContractLedger, date) =
    (sumInContractLedger(inContractLedger) IF date IS DATE) (-) costedOutContractLedgerInContractLedgerDate(inContractLedger, date) MINCHARWIDTH 12 PREFCHARWIDTH 12;

appliedInContractLedgerBonusPeriod(inContractLedger, bonusPeriod) =
    debtInContractLedgerDate(inContractLedger, sumDate(dateInContractLedger(inContractLedger), countDaysBonusPeriod(bonusPeriod))) <= 0.0
    AND paymentConditionInContractLedger(inContractLedger) == paymentConditionBonusPeriod(bonusPeriod);

daysBonusPeriodInContractLedger(inContractLedger, date) =
    GROUP MIN countDaysBonusPeriod(bonusPeriod) IF
              paymentConditionInContractLedger(inContractLedger) == paymentConditionBonusPeriod(bonusPeriod) AND
              sumDate(dateInContractLedger(inContractLedger), countDaysBonusPeriod(bonusPeriod)) >= date
              //appliedInContractLedgerBonusPeriod(inContractLedger, bonusPeriod)
    BY inContractLedger, date;

bonusPeriodInContractLedger(inContractLedger, date) =
    bonusPeriodPaymentConditionDays(paymentConditionInContractLedger(inContractLedger), daysBonusPeriodInContractLedger(inContractLedger, date));

bonusSumInContractLedger 'Сумма бонуса' (inContractLedger, date) =
    sumInContractLedger(inContractLedger) * percentBonusPeriod(bonusPeriodInContractLedger(inContractLedger, date))/100
    IF debtInContractLedger(inContractLedger) > 0.0;

bonusDebtSumInContractLedgerDate 'Сумма долга по документу с учетом бонуса' (inContractLedger, date) =
    debtInContractLedgerDate(inContractLedger, date) (-) bonusSumInContractLedger(inContractLedger, date);

CONSTRAINT costedInContractLedgerOutContractLedger(outContractLedger) > sumOutContractLedger(outContractLedger)
    MESSAGE 'Расписанная сумма должна быть равна сумме платежа';

orderInContractLedger(inContractLedger) = STRUCT(dateInContractLedger(inContractLedger), numberInContractLedger(inContractLedger), inContractLedger);

sumInFIFOOutContractLedgerInContractLedger (outContractLedger, inContractLedger) =
    PARTITION UNGROUP sumOutContractLedger
              LIMIT debtInContractLedger(inContractLedger) IF
                    contractOutContractLedger(outContractLedger) == contractInContractLedger(inContractLedger) AND
                    activeInContractLedger(inContractLedger)
              BY outContractLedger
              ORDER orderInContractLedger(inContractLedger);

sumInLIFOOutContractLedgerInContractLedger (outContractLedger, inContractLedger) =
    PARTITION UNGROUP sumOutContractLedger
              LIMIT debtInContractLedger(inContractLedger) IF
                    contractOutContractLedger(outContractLedger) == contractInContractLedger(inContractLedger) AND
                    activeInContractLedger(inContractLedger)
              BY outContractLedger
              ORDER DESC orderInContractLedger(inContractLedger);

writeOutContractLedgerFIFO 'Расписать по FIFO' = ACTION (outContractLedger) {

    ASSIGN costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- NULL;
    ASSIGN costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- sumInFIFOOutContractLedgerInContractLedger(outContractLedger, inContractLedger);
}

writeOutContractLedgerFIFOApply 'Расписать по FIFO' = ACTION (outContractLedger) {
    writeOutContractLedgerFIFO(outContractLedger);
    apply();
}

writeOutContractLedgerLIFO 'Расписать по LIFO' = ACTION (outContractLedger) {

    ASSIGN costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- NULL;
    ASSIGN costOutContractLedgerInContractLedger(outContractLedger, inContractLedger) <- sumInLIFOOutContractLedgerInContractLedger(outContractLedger, inContractLedger);
}

writeOutContractLedgerLIFOApply 'Расписать по LIFO' = ACTION (outContractLedger) {
    writeOutContractLedgerLIFO(outContractLedger);
    apply();
}

META implementInOutContractLedgerPrefix(prefix, objectClass, contractProp)

    isPosted###prefix##ContractLedger(prefix##ContractLedger) += isPosted###objectClass(prefix##ContractLedger);
    dateTime###prefix##ContractLedger(prefix##ContractLedger) += dateTime###objectClass(prefix##ContractLedger);
    contract###prefix##ContractLedger(prefix##ContractLedger) += contractProp###objectClass(prefix##ContractLedger);
    description###prefix##ContractLedger(prefix##ContractLedger) += description###objectClass(prefix##ContractLedger);

END

META implementInContractLedger(objectClass, contractProp)
    EXTEND CLASS objectClass : InContractLedger;
    @implementInOutContractLedgerPrefix(in, objectClass, contractProp);
    numberInContractLedger(inContractLedger) += number###objectClass(inContractLedger);
    seriesInContractLedger(inContractLedger) += series###objectClass(inContractLedger);    
    customerStockInContractLedger(inContractLedger) += customerStock###objectClass(inContractLedger);
    supplierStockInContractLedger(inContractLedger) += supplierStock###objectClass(inContractLedger);
END

META implementOutContractLedger(objectClass, contractProp)
    EXTEND CLASS objectClass : OutContractLedger;
    @implementInOutContractLedgerPrefix(out, objectClass, contractProp);
END
//------------------------------------------- Платеж по договору -----------------------------------------------------//

debtSumContractDate 'Долг по документам' (contract, date) = GROUP SUM debtInContractLedgerDate(inContractLedger, date) IF
                                                                            activeInContractLedger(inContractLedger) AND
                                                                            dateInContractLedger(inContractLedger) <= date
                                                                  BY contractInContractLedger(inContractLedger), date;

bonusSumContractDate 'Сумма бонусов' (contract, date) = GROUP SUM bonusSumInContractLedger(inContractLedger, date) IF
                                                                         activeInContractLedger(inContractLedger) AND
                                                                         dateInContractLedger(inContractLedger) <= date
                                                               BY contractInContractLedger(inContractLedger), date;

bonusDebtSumContractDate 'Сумма долга с учетом бонуса' (contract, date) =
    debtSumContractDate(contract, date) (-) bonusSumContractDate(contract, date);

//----------------------------------------------- Цвета --------------------------------------------------------------//

backgroundSumContractLedgerDate 'Цвет' (contractLedger, date) = OVERRIDE RGB(255,238,165) IF dateContractLedger(contractLedger) <= date,
                                                                         RGB(255,160,160) IF dateContractLedger(contractLedger) > date;
backgroundContractLedgerDate 'Цвет' (contractLedger, date) = RGB(255,160,160) IF dateContractLedger(contractLedger) > date;
backgroundSumContract 'Цвет' (contract) = RGB(255,238,165) IF contract IS Contract;
backgroundSumContractALedgerDate 'Цвет' (contractALedger, date) = OVERRIDE RGB(232,184,146) IF dateContractALedger(contractALedger) <= date,
                                                                           RGB(255,160,160) IF dateContractALedger(contractALedger) > date;
backgroundContractALedgerDate 'Цвет' (contractALedger, date) = RGB(255,160,160) IF dateContractALedger(contractALedger) > date;
backgroundSumContractA 'Цвет' (contract) = RGB(232,184,146) IF contract IS Contract;
backgroundBonusSumInContractLedger 'Цвет' (inContractLedger) = RGB(213,249,185) IF inContractLedger IS InContractLedger;
backgroundBonusSumContract 'Цвет' (contract) = RGB(213,249,185) IF contract IS Contract;
backgroundOutContractLedgerDate 'Цвет' (outContractLedger, date) = RGB(255,160,160) IF dateOutContractLedger(outContractLedger) > date;
backgroundInContractLedgerDate 'Цвет' (inContractLedger, date) = RGB(255,160,160) IF dateInContractLedger(inContractLedger) > date;

//-------------------------------------------- Разнесение по документам -----------------------------------------------//

partyA = DATA LOCAL LegalEntity();
namePartyA 'Организация (поставщик)' = nameLegalEntity(partyA());
partyB = DATA LOCAL LegalEntity();
namePartyB 'Организация (покупатель)' = nameLegalEntity(partyB());

isCostedOutContractLedger 'Расписан' (outContractLedger) = sumOutContractLedger(outContractLedger) (-) delta(costedInContractLedgerOutContractLedger(outContractLedger),0);

FORM costContractLedger 'Разнесение документов'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS o = OutContractLedger, i = InContractLedger
    PROPERTIES(o) READONLY dateOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d),
                           descriptionOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d),
                           sumOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d),
                           costedInContractLedgerOutContractLedger BACKGROUND backgroundOutContractLedgerDate(o, d)
    PROPERTIES(o) writeOutContractLedgerFIFOApply TODRAW i FORCE PANEL TOOLBAR,
                  writeOutContractLedgerLIFOApply TODRAW i FORCE PANEL TOOLBAR
    ORDER BY dateOutContractLedger(o)

    PROPERTIES(i) READONLY dateInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d),
                           descriptionInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d),
                           debtInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d)
    PROPERTIES(o, i) costOutContractLedgerInContractLedger BACKGROUND backgroundInContractLedgerDate(i, d)
    ORDER BY dateInContractLedger(i)

    FILTERGROUP filters1
        FILTER 'Неразнесенные' isCostedOutContractLedger(o) 'F9' DEFAULT

    FILTERGROUP filters2
        FILTER 'Неоплаченные' debtInContractLedger(i) 'F10' DEFAULT

    FILTERS partyBContract(contractOutContractLedger(o)) == partyB() OR (o IS OutContractLedger AND NOT partyB()),
            partyAContract(contractOutContractLedger(o)) == partyA() OR (o IS OutContractLedger AND NOT partyA()),
            contractOutContractLedger(o) == contractInContractLedger(i)

;

DESIGN costContractLedger FROM DEFAULT {
    NEW topContainer {
        type = CONTAINERV;
        fill = 1;
        NEW headerContainer {
            type = CONTAINERH;
            caption = 'Шапка';
            ADD PROPERTY(date);
            ADD PROPERTY(namePartyA());
            ADD PROPERTY(namePartyB());
        }
        NEW firstContainer {
            type = SPLITV;
            fill = 1;
            ADD o.box;
            ADD i.box;
        }
   }
ADD functions.box;
}

//-------------------------------------------- Сводная форма ---------------------------------------------------------//

FORM contractLedger 'Управление задолженностями'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS c = Contract
    PROPERTIES(c) READONLY seriesNumberContract, namePartyAContract, namePartyBContract, nameCurrencyContract
    PROPERTIES(c, d) READONLY balanceAContractDate BACKGROUND backgroundSumContract(c),
                              balanceAAContractDate BACKGROUND backgroundSumContractA(c),
                              debtSumContractDate BACKGROUND backgroundBonusSumContract(c),
                              bonusSumContractDate BACKGROUND backgroundBonusSumContract(c),
                              bonusDebtSumContractDate BACKGROUND backgroundBonusSumContract(c)
    ORDER BY seriesNumberContract(c)

    OBJECTS cl = ContractLedger
    PROPERTIES(cl) READONLY dateContractLedger BACKGROUND backgroundContractLedgerDate(cl, d),
                            sumContractLedger BACKGROUND backgroundSumContractLedgerDate(cl, d),
                            descriptionContractLedger BACKGROUND backgroundContractLedgerDate(cl, d)
    ORDER BY dateContractLedger(cl)
    FILTERS activeContractLedger(cl)

    OBJECTS cal = ContractALedger
    PROPERTIES(cal) READONLY dateContractALedger BACKGROUND backgroundContractALedgerDate(cal, d),
                             sumContractALedger BACKGROUND backgroundSumContractALedgerDate(cal, d),
                             descriptionContractALedger BACKGROUND backgroundContractALedgerDate(cal, d)
    ORDER BY dateContractALedger(cal)
    FILTERS activeContractALedger(cal)

    OBJECTS ic = InContractLedger
    PROPERTIES(ic) READONLY dateInContractLedger, descriptionInContractLedger, sumInContractLedger
    PROPERTIES(ic, d) READONLY debtInContractLedgerDate BACKGROUND backgroundBonusSumInContractLedger(ic),
                               bonusSumInContractLedger BACKGROUND backgroundBonusSumInContractLedger(ic),
                               bonusDebtSumInContractLedgerDate BACKGROUND backgroundBonusSumInContractLedger(ic)
    ORDER BY dateInContractLedger(ic)
    FILTERS activeInContractLedger(ic)
    FILTERGROUP filters1 
        FILTER 'Неоплаченные' debtInContractLedgerDate(ic, d) 'F6' DEFAULT
    FILTERGROUP filters2 
        FILTER 'На дату' dateInContractLedger(ic) <= d 'F5' DEFAULT        

    OBJECTS icoc = OutContractLedger
    PROPERTIES(icoc) READONLY dateOutContractLedger, descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(icoc, d) READONLY costedInContractLedgerOutContractLedgerDate
    PROPERTIES READONLY costOutContractLedgerInContractLedger(icoc, ic)
    ORDER BY dateOutContractLedger(icoc)

    OBJECTS oc = OutContractLedger
    PROPERTIES(oc) READONLY dateOutContractLedger, descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(oc, d) READONLY costedInContractLedgerOutContractLedgerDate
    PROPERTIES(oc) FORCE PANEL TOOLBAR writeOutContractLedgerFIFO SHOWIF isOutContractLedger(oc),
                                       writeOutContractLedgerLIFO SHOWIF isOutContractLedger(oc)
    ORDER BY dateOutContractLedger(oc)

    OBJECTS ocic = InContractLedger
    PROPERTIES(ocic) READONLY dateInContractLedger, descriptionInContractLedger, sumInContractLedger
    PROPERTIES(ocic, d) READONLY debtInContractLedgerDate
    PROPERTIES READONLY costOutContractLedgerInContractLedger(oc, ocic)
    ORDER BY dateInContractLedger(ocic)
    FILTERS activeInContractLedger(ocic)

    FILTERS contractContractLedger(cl) == c,
            contractContractALedger(cal) == c,
            contractInContractLedger(ic) == c,
            contractOutContractLedger(oc) == c,
            partyBContract(c) == partyB() OR (c IS Contract AND NOT partyB()),
            partyAContract(c) == partyA() OR (c IS Contract AND NOT partyA()),
            costOutContractLedgerInContractLedger(icoc, ic) > 0,
            costOutContractLedgerInContractLedger(oc, ocic) > 0

;

DESIGN contractLedger FROM DEFAULT{
    NEW header {
        type = CONTAINERH;
        caption = 'Шапка';
        ADD PROPERTY(date);
        ADD PROPERTY(namePartyA());
        ADD PROPERTY(namePartyB());
    }

    NEW detail {
        fill = 1;
        type = TABBED;

        NEW documents {
            caption = 'Документы';
            type = SPLITV;
            ADD c.box {
                fill = 1;    
            }
            NEW firstSecondContainer {
                fill = 2;
                type = TABBED;
                NEW debt.box {
                    type = CONTAINERH;
                    caption = 'Долг по документу';
                    ADD ic.box;
                    ADD icoc.box;
                }                
                NEW firstThirdContainer {
                    fill = 1;
                    type = SPLITH;
                    type = CONTAINERH;
                    caption = 'Изменения долга';
                    ADD cl.box;
                    ADD cal.box;
                }
                NEW cost.box {
                    type = CONTAINERH;
                    caption = 'Расписано по документу';
                    ADD oc.box;
                    ADD ocic.box;
                }
            }
        }
    }
    ADD functions.box;
}

contractProp = DATA LOCAL Contract();
seriesNumberContractProp 'Договор' = seriesNumberContract(contractProp());

seriesNumberContractInContractLedger 'Серия/Номер договора' (inContractLedger) = seriesNumberContract(contractInContractLedger(inContractLedger)); 
partyAContractInContractLedger (inContractLedger) = partyAContract(contractInContractLedger(inContractLedger)); 
namePartyAContractInContractLedger 'Организация (поставщик)' (inContractLedger) = namePartyAContract(contractInContractLedger(inContractLedger)); 
partyBContractInContractLedger (inContractLedger) = partyBContract(contractInContractLedger(inContractLedger)); 
namePartyBContractInContractLedger 'Организация (покупатель)' (inContractLedger) = namePartyBContract(contractInContractLedger(inContractLedger)); 
nameCurrencyContractInContractLedger 'Валюта договора' (inContractLedger) = nameCurrencyContract(contractInContractLedger(inContractLedger));  

FORM unpaidDocuments 'Неоплаченные документы'
    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES valDt = OBJVALUE(dt)
    
    PROPERTIES() namePartyA, namePartyB, seriesNumberContractProp
    
    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY isPostedInContractLedger, numberInContractLedger, seriesInContractLedger, dateInContractLedger, namePartyAContractInContractLedger, 
                           nameSupplierStockInContractLedger, namePartyBContractInContractLedger, nameCustomerStockInContractLedger, 
                           nameCurrencyContractInContractLedger, seriesNumberContractInContractLedger, sumInContractLedger, 
                           costedOutContractLedgerInContractLedger, debtInContractLedger, descriptionInContractLedger                             
                             
    ORDER BY dateInContractLedger(i), numberInContractLedger(i)
    FILTERS activeInContractLedger(i), contractInContractLedger(i),  
            contractInContractLedger(i) == contractProp() OR (i IS InContractLedger AND NOT seriesNumberContractProp()),
            partyBContractInContractLedger(i) == partyB() OR (i IS InContractLedger AND NOT partyB()),
            partyAContractInContractLedger(i) == partyA() OR (i IS InContractLedger AND NOT partyA())
    FILTERGROUP filters1
        FILTER 'Неоплаченные' debtInContractLedger(i) 'F10' DEFAULT
    FILTERGROUP filters2        
        FILTER 'С договором' contractInContractLedger(i) 'F9' DEFAULT
    FILTERGROUP filters3
        FILTER 'На дату' dateInContractLedger(i) <= dt 'F5' DEFAULT 
                       
    OBJECTS o = OutContractLedger
    PROPERTIES(o) READONLY dateOutContractLedger, descriptionOutContractLedger, sumOutContractLedger
    PROPERTIES(o, i) READONLY costOutContractLedgerInContractLedger
    FILTERS costOutContractLedgerInContractLedger(o, i)
;

DESIGN unpaidDocuments FROM DEFAULT{
    NEW header {
        type = CONTAINERH;
        caption = 'Шапка';
        ADD PROPERTY(valDt);
        ADD PROPERTY(namePartyA());
        ADD PROPERTY(namePartyB());
        ADD PROPERTY(seriesNumberContractProp());
    }
    NEW docsContainer{
        type =SPLITV;
        fill = 1;
        caption = 'Документы';
        ADD i.box{
            fill = 4;
            PROPERTY(sumInContractLedger(i)){
                caption = 'Сумма документа';
            }
        }
        ADD o.box{
            fill = 1;
        }      
    }  
    ADD functions.box;
}     

NAVIGATOR {
    dashboardNavigator {
        NEW contractDashboardNavigator 'Задолженности' {
            ADD contractLedger;
            ADD costContractLedger;
            ADD unpaidDocuments;
        }
    }
    financeNavigator {
        NEW contractNavigator 'Задолженности' BEFORE financeMasterData {
            ADD paymentConditions;
        }
    }
}
