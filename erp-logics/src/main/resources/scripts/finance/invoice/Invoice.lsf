MODULE Invoice;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        PriceRound,
        Barcode,
        PriceListType,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        EmployeeStock,
        StockContract,
        StockTax;

CLASS ABSTRACT Invoice 'Накладная' : Document;
CLASS ABSTRACT InvoiceDetail 'Строка накладной' : DocumentDetail;

@defineDocumentAbstract(invoice);
@defineDocumentAbstractNumber(invoice);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, to, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

idCustomerStockInvoice(invoice) = idStock(customerStockInvoice(invoice));
idSupplierStockInvoice(invoice) = idStock(supplierStockInvoice(invoice));

@defineDocumentAbstractDataStock(invoice, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(invoice);
@defineDocumentAbstractClosed(invoice);

overShowEditInvoice = ABSTRACT BOOLEAN (Invoice);
overShowDeleteInvoice = ABSTRACT BOOLEAN (Invoice);

@defineDocumentAbstractDetailSku(invoice, sku);

@defineDocumentAbstractDetailBatchCustomInner(invoiceDetail, batch, Batch);

@defineDocumentAbstractDetailQuantity(invoice);

sumNetWeightInvoiceDetail 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
sumNetWeightTonInvoiceDetail 'Вес нетто, т' (d) = round6(sumNetWeightInvoiceDetail(d) / 1000);
@defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг'); 
  
sumGrossWeightInvoiceDetail 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
sumGrossWeightTonInvoiceDetail 'Вес брутто, т' (d) = round6(sumGrossWeightInvoiceDetail(d) / 1000);
@defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');

@defineDocumentAbstractDetailQuantityPrefix(invoice, pack, ' (упаковок)');

@defineDocumentHeaderQuantity(invoice);
@defineDocumentHeaderSkuQuantity(invoice, sku);

@defineDocumentAbstractHeaderCurrency (invoice);
@defineDocumentDetailCurrency (invoice, invoiceDetail);

@defineDocumentAbstractDetailPrice(invoice);
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, , );
@defineDocumentHeaderSum(invoice);
@defineDocumentHeaderItemQuantityPrefix(invoice, , );

@defineDocumentAbstractDetailPriceCustomPrefix(invoiceDetail, invoice, ' с НДС');

@defineDocumentAbstractDetailVAT(invoice, , );
@defineDocumentAbstractDetailVATDataSumCustom (invoiceDetail, invoice);

@defineDocumentHeaderVATSum(invoice, invoice);

notNullInvoiceVAT 'В накладной должен быть задан НДС' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES notNullInvoiceVAT();
DESIGN options { commons { MOVE PROPERTY(notNullInvoiceVAT()); } }

CONSTRAINT notNullInvoiceVAT() AND isItemSku(skuInvoiceDetail(detail)) AND isPostedInvoice(invoiceInvoiceDetail(detail)) AND NOT valueVATInvoiceDetail(detail)
    MESSAGE 'Не задан НДС для строки товара';

@defineDocumentAbstractDetailNote (InvoiceDetail);

@defineDocumentAbstractHeaderDescription(Invoice);
@defineDocumentDetailDescription(invoice, InvoiceDetail);

shortDescriptionInvoice (invoice) = seriesNumberInvoice(invoice) + ' от ' + dateInvoice(invoice);

extraDescriptionInvoiceDetail 'Доп. наименование' (invoiceDetail) = ABSTRACT VARSTRING[1500] (InvoiceDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

editInvoice 'Редактировать' = ABSTRACT ACTION LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

@defineDocumentAbstractHeaderAgreement(invoice);

inInvoice 'Приходная' = ABSTRACT BOOLEAN (Invoice);
inInvoiceDetail 'Приходная' (d) = inInvoice(invoiceInvoiceDetail(d)); 
outInvoice 'Расходная' (invoice) = invoice IS Invoice AND NOT inInvoice(invoice);
outInvoiceDetail 'Расходная' (d) = outInvoice(invoiceInvoiceDetail(d)); 

@defineDocumentAbstractContract(Invoice, contractSku);
// наш склад
stockInvoiceDetail = ABSTRACT Stock(InvoiceDetail) PERSISTENT;   
nameStockInvoiceDetail 'Склад' (d) = nameStock(stockInvoiceDetail(d));

operationInvoice = ABSTRACT Operation.Operation(Invoice);
nameOperationInvoice 'Операция' (invoice) = Operation.nameOperation(operationInvoice(invoice));

createdTimeInvoice 'Время создания'= ABSTRACT DATETIME (Invoice) IN created;
createdUserInvoice = ABSTRACT CustomUser (Invoice);
createdNameUserInvoice 'Создан пользователем' (o) = nameContact(createdUserInvoice(o)) MINCHARWIDTH 10 PREFCHARWIDTH 20;

negativeValueInvoices 'Запретить ввод отрицательных значений в накладных' = DATA BOOLEAN ();

skipConsignmentInvoiceDetail = ABSTRACT BOOLEAN (InvoiceDetail) PERSISTENT;  

EXTEND FORM options
    PROPERTIES() negativeValueInvoices
;

DESIGN options {
    pane {
        NEW invoices  {
            type = CONTAINERV;
            caption = 'Накладная';
            MOVE PROPERTY(negativeValueInvoices());
            NEW document {
//                fill = 1;
                type = COLUMNS;
                columns = 2;
            }
        }
    }
}
//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp, supplierFilter, customerFilter, NS)

    CLASS ABSTRACT Invoice 'Накладная'###sign : Invoice.Invoice;
    CLASS ABSTRACT InvoiceDetail 'Строка накладной'###sign : Invoice.InvoiceDetail;

    CLASS UserInvoice 'Накладная (польз.)'###sign : Invoice;
    CLASS UserInvoiceDetail 'Строка накладной (польз.)'###sign : InvoiceDetail;

    GROUP invoice 'Информация о накладной' : base;

    @defineDocumentInterface(invoice);
    Invoice.noteInvoice(i)+=noteInvoice(i);
    
    TABLE sessionInvoiceDetail(Session, InvoiceDetail);
    
    @deriveDocumentHeaderTimePrefix(UserInvoice, );
    Invoice.indexInvoiceDetail(d)+=indexInvoiceDetail(d);
    
    createdUserInvoice = ABSTRACT CustomUser (Invoice);
    createdNameUserInvoice 'Создан пользователем' (invoice) = nameContact(createdUserInvoice(invoice)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
    createdUserInvoice(invoice) += createdUserUserInvoice(invoice) IF invoice IS UserInvoice;
    
    Invoice.createdTimeInvoice (invoice) += createdTimeUserInvoice(invoice) IF invoice IS UserInvoice;
    Invoice.createdUserInvoice (invoice) += createdUserInvoice(invoice);    
    
    @defineExternalizable(userInvoice, VARSTRING[100]);
    @defineExternalizable(userInvoiceDetail, VARSTRING[100]);
                                                               
    Invoice.invoiceInvoiceDetail (detail) += invoiceInvoiceDetail(detail);
    Invoice.dateInvoice (invoice) += dateInvoice(invoice);
    Invoice.timeInvoice (invoice) += timeInvoice(invoice);

    @defineDocumentInterfaceTimePrefix(invoice, before, ' документа (до)');
    @deriveDocumentHeaderTimePrefix(UserInvoice, before);

    @defineDocumentInterfaceNumber(invoice);
    Invoice.numberInvoice (invoice) += numberInvoice(invoice);
    Invoice.seriesInvoice (invoice) += seriesInvoice(invoice);
    invoiceNumber (number) = GROUP MAX invoice BY Invoice.numberInvoice(invoice);

    @defineNumeratedDefault(UserInvoice, 'Накладные'###sign, 'ПС');

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    Invoice.supplierInvoice(invoice) += supplierInvoice(invoice);
    Invoice.customerInvoice(invoice) += customerInvoice(invoice);

    isCompanySupplierInvoiceDetail 'Приход от компании' (d) = isCompanyLegalEntity(supplierInvoiceDetail(d)); 

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    Invoice.supplierStockInvoice(invoice) += supplierStockInvoice(invoice);
    Invoice.customerStockInvoice(invoice) += customerStockInvoice(invoice);
    Invoice.dataSupplierStockInvoiceDetail(detail) += dataSupplierStockInvoiceDetail(detail);
    Invoice.dataCustomerStockInvoiceDetail(detail) += dataCustomerStockInvoiceDetail(detail);
    Invoice.stockInvoiceDetail(detail) += stockProp###StockInvoiceDetail(detail);
    CONSTRAINT supplierUserInvoice(userInvoice) AND supplierStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(supplierUserInvoice(userInvoice), supplierStockUserInvoice(userInvoice))
        CHECKED BY supplierStockUserInvoice
            MESSAGE 'Поставщик и склад поставщика для накладной не имеют связи';
    CONSTRAINT customerUserInvoice(userInvoice) AND customerStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(customerUserInvoice(userInvoice), customerStockUserInvoice(userInvoice))
        CHECKED BY customerStockUserInvoice
            MESSAGE 'Покупатель и склад покупателя для накладной не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    Invoice.isPostedInvoice (invoice) += isPostedInvoice(invoice);
    
    isStockInvoices 'Разрешить ввод накладной'##sign##' без склада' = DATA BOOLEAN ();    
    equalsSeriesNumberInvoices 'Запретить ввод накладных'##sign##' с одинаковым "Серия/номер"' = DATA BOOLEAN (); 
    skipEqualsSeriesNumberInvoice = ABSTRACT BOOLEAN (Invoice);
    
    EXTEND FORM options
        PROPERTIES() NS###isStockInvoices = isStockInvoices, NS###equalsSeriesNumberInvoices = equalsSeriesNumberInvoices
    ;
    
    DESIGN options {
        document {
            NEW invoice##NS {
                caption = 'Накладная'##sign;
                MOVE PROPERTY(NS###isStockInvoices);
                MOVE PROPERTY(NS###equalsSeriesNumberInvoices);
            } 
        }
    }

    CONSTRAINT isPostedUserInvoice(i) AND NOT isStockInvoices() AND NOT stockProp###stock###userInvoice(i) 
        MESSAGE 'Для накладной'##sign##' должен быть задан склад';   
    CONSTRAINT  equalsSeriesNumberInvoices() AND [ = GROUP SUM 1 IF isPostedInvoice(i) AND NOT skipEqualsSeriesNumberInvoice(i) BY seriesNumberInvoice(i)](series) >1
        MESSAGE 'Запрещено вводить накладные'##sign##' с одинаковым "Серия/номер"';                 
    
    @defineDocumentInterfaceClosed(invoice);
    @defineDocumentClosedConstraint(UserInvoice);
    Invoice.isClosedInvoice (invoice) += isClosedInvoice(invoice);    

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);
    Invoice.descriptionInvoice(invoice) += descriptionInvoice(invoice);    

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    Invoice.currencyInvoice(invoice) += currencyInvoice(invoice);

    @defineDocumentInterfaceContract(Invoice, contractSku, supplier, customer,
                                     'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной',
                                     'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной',
                                     'накладная'###sign, NS);
    Invoice.contractSkuInvoice(invoice) += contractSkuInvoice(invoice);
    Invoice.isCommissionInvoice(invoice) += isCommissionInvoice(invoice);
     
    @defineDocumentInterfaceAgreement(invoice);
    Invoice.agreementInvoice(invoice) += agreementInvoice(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplier, customer, 'накладная'###sign, NS);
    noAgreementUserInvoice (invoice) = invoice IS UserInvoice AND NOT agreementUserInvoice(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    Invoice.skuInvoiceDetail(detail) += skuInvoiceDetail(detail);
    
    countInSkuUserInvoice (invoice) = GROUP SUM 1 IF inAgreementSku(agreement,skuUserInvoiceDetail(d)) 
        AND fromDateTimeAgreement(agreement) <= dateTimeUserInvoiceDetail(d) AND NOT (toDateTimeAgreement(agreement) < dateTimeUserInvoiceDetail(d))
        AND inAgreementSupplier(agreement, supplierUserInvoiceDetail(d)) AND inAgreementCustomer(agreement, customerUserInvoiceDetail(d))
        AND currencyUserInvoiceDetail(d) == currencyAgreement(agreement)
            BY userInvoiceUserInvoiceDetail(d);
            
    maxAgreementInSkuUserInvoice (invoice) = GROUP MAX agreement IF inAgreementSku(agreement,skuUserInvoiceDetail(d)) 
        AND fromDateTimeAgreement(agreement) <= dateTimeUserInvoiceDetail(d) AND NOT (toDateTimeAgreement(agreement) < dateTimeUserInvoiceDetail(d))
        AND inAgreementSupplier(agreement, supplierUserInvoiceDetail(d)) AND inAgreementCustomer(agreement, customerUserInvoiceDetail(d))
            BY userInvoiceUserInvoiceDetail(d);
                        
    isStockSkuInvoiceDetail (invoiceDetail) = isStockSku(skuInvoiceDetail(invoiceDetail));
    isStockSkuUserInvoiceDetail (userInvoiceDetail) = isStockSku(skuUserInvoiceDetail(userInvoiceDetail));

    isChargeSkuInvoiceDetail (invoiceDetail) = isChargeSku(skuInvoiceDetail(invoiceDetail));
    isChargeSkuUserInvoiceDetail (userInvoiceDetail) = isChargeSku(skuUserInvoiceDetail(userInvoiceDetail));

    @defineDocumentInterfaceDetailQuantity(invoice);
    Invoice.quantityInvoiceDetail(detail) += quantityInvoiceDetail(detail);
    CONSTRAINT negativeValueInvoices() AND detail IS InvoiceDetail AND quantityInvoiceDetail(detail) < 0
        MESSAGE 'Количество в строке накладной должно быть не отрицательным';

//    @defineDocumentDetailGrossWeight(invoice, sku);

    @defineDocumentInterfaceDetailPrice(invoice); // объявляем цену без НДС
    Invoice.priceInvoiceDetail(detail) += priceInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, , ); // объявляем шкалу
    
    // запись задана после объявления формы
    @deriveDocumentDetailValueVAT(userInvoice); // записываем значение ставки
       
    equalSkuVATInvoices 'Запрет на различный НДС в накладных '##sign##' и SKU' = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS###equalSkuVATInvoices = equalSkuVATInvoices
    ;
    
    DESIGN options {        
        invoice##NS {
            MOVE PROPERTY(NS###equalSkuVATInvoices);
        }
    }
//    CONSTRAINT equalSkuVATInvoices() AND VATUserInvoiceDetail(d) AND isPostedUserInvoiceDetail(d) AND NOT VATSkuCountry(skuUserInvoiceDetail(d), countryStock(customerStockUserInvoiceDetail(d))) == VATUserInvoiceDetail(d)
//        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';
        
        
    blankLineInvoices 'Разрешить строки без SKU в накладных '##sign = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() NS###blankLineInvoices = blankLineInvoices
    ;
    
    DESIGN options {
        invoice##NS {
            MOVE PROPERTY(NS###blankLineInvoices);    
        }
    }

    CONSTRAINT isPostedUserInvoiceDetail(d) AND NOT skuUserInvoiceDetail(d) AND NOT blankLineInvoices()
        MESSAGE 'Для строки накладной '##sign##' должен быть задан SKU';               

    Invoice.VATInvoiceDetail(detail) += VATInvoiceDetail(detail);
    Invoice.valueVATInvoiceDetail(detail) += valueVATInvoiceDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (invoice, invoice, ' с НДС'); // объявляем цену с НДС
    Invoice.invoicePriceInvoiceDetail(detail) += invoicePriceInvoiceDetail(detail);
    
    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(userInvoice);
    @defineDocumentDetailNumberVATOnChange(userInvoice, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userInvoice);
    @defineDocumentDetailInvoicePriceVATOnChange(userInvoice);
    overPriceRoundUserInvoiceDetail = ABSTRACT INTEGER (UserInvoiceDetail);
    priceRoundUserInvoiceDetail (detail) = OVERRIDE defaultRoundCurrency(currencyUserInvoiceDetail(detail)), overPriceRoundUserInvoiceDetail(detail); 
    priceRoundInvoiceDetail (detail) = OVERRIDE defaultRoundCurrency(currencyInvoiceDetail(detail)), overPriceRoundUserInvoiceDetail(detail); 

    @defineDocumentInterfacePriceListType(invoice); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userInvoice); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentInterfaceDetailDataSum(invoice); // объявляем сумму без НДС
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, , currency, quantity, priceRound);
    Invoice.sumInvoiceDetail(detail) += sumInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVATDataSum (invoice, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userInvoice); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum(userInvoice, invoice); // записываем сумму с НДС

    Invoice.VATSumInvoiceDetail(detail) += VATSumInvoiceDetail(detail);
    Invoice.invoiceSumInvoiceDetail(detail) += invoiceSumInvoiceDetail(detail);

    @defineDocumentInterfaceHeaderVATSum(invoice, invoice);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentInterfaceHeaderItemQuantity(invoice);
    @defineDocumentInterfaceHeaderItemCount(invoice);    
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);

    @defineDocumentInterfaceHeaderItemSum (invoice, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (invoice, , ); //-- сумма поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum(invoice, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)

    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале
    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);
    //-- вес
    sumNetWeightInvoiceDetail 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
    sumNetWeightUserInvoiceDetail 'Вес нетто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumNetWeightInvoiceDetail(d) += sumNetWeightUserInvoiceDetail(d);
    Invoice.sumNetWeightInvoiceDetail(d) += sumNetWeightInvoiceDetail(d);
    
    sumGrossWeightInvoiceDetail 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);        
    sumGrossWeightUserInvoiceDetail 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumGrossWeightInvoiceDetail(d) += sumGrossWeightUserInvoiceDetail(d);
    Invoice.sumGrossWeightInvoiceDetail(d) += sumGrossWeightInvoiceDetail(d);
       
    sumNetWeightUserInvoiceDetail(d) <- netWeightSku(skuUserInvoiceDetail(d)) * quantityUserInvoiceDetail(d)
        WHEN CHANGED(skuUserInvoiceDetail(d)) OR CHANGED(quantityUserInvoiceDetail(d));
    sumGrossWeightUserInvoiceDetail(d) <- grossWeightSku(skuUserInvoiceDetail(d)) * quantityUserInvoiceDetail(d)
        WHEN CHANGED(skuUserInvoiceDetail(d)) OR CHANGED(quantityUserInvoiceDetail(d));
                  
    @defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');       
    @defineDocumentHeaderNetWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг');  
    @defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');
    @defineDocumentHeaderGrossWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг'); 
    changeGrossWeightInvoice  = ACTION (invoice) {
        REQUEST NUMERIC[16,3] INPUT;
        IF requestedNumeric() THEN {           
            sumGrossWeightInvoiceDetail(d) <- NUMERIC[9,3](sumNetWeightInvoiceDetail(d)/(sumNetWeightInvoiceDetailInvoice(invoice) IF sumNetWeightInvoiceDetailInvoice(invoice) != 0)* requestedNumeric())
                WHERE d IS InvoiceDetail AND invoiceInvoiceDetail(d) == invoice;
    
        } ELSE {
           
            sumGrossWeightInvoiceDetail(d) <- NULL WHERE d IS InvoiceDetail AND invoiceInvoiceDetail(d) == invoice;    
        }        
    } 
        
    countInvoiceDetailStockInvoice (stock, invoice) = GROUP SUM 1 BY stockProp###stock###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    @implementDocumentSupplierCustomer(invoice);
    
    @defineMovementSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(invoiceDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineBarcodeSku(invoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

    @defineMovementPriceSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара
//    fillDocumentInvoice 'Подбор документа' = ACTION (userInvoice) {
//        FORM documents MODAL;
//        IF formResult() == FormResult.ok THEN {
//            LOCAL chosenDocument = Document();
//            ASSIGN chosenDocument() <- chosenObject('d');
//            FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = UserInvoiceDetail DO {
//                ASSIGN userInvoiceUserInvoiceDetail(i) <- userInvoice;
//                ASSIGN skuInvoiceDetail(i) <- skuDocumentDetail(documentDetail);
//                ASSIGN quantityInvoiceDetail(i) <- quantityDocumentDetail(documentDetail);
//                ASSIGN priceInvoiceDetail(i) <- priceDocumentDetail(documentDetail);
//            }
//        }
//    } TOOLBAR;
    @defineDocumentDialogSupplierCustomerStock(userInvoice, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userInvoiceDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userInvoice, supplierFilter, customerFilter);

// --------------------------- Формы ---------------------------------- //
    backgroundSkuUserInvoiceDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundVATUserInvoiceDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
        
    editInvoice 'Редактировать' = ABSTRACT ACTION LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Invoice.editInvoice (invoice) += ACTION editInvoice(invoice);
    skipShowQuantityInvoice = ABSTRACT BOOLEAN (Invoice);
    showQuantityInvoice (i) = i IS Invoice AND NOT skipShowQuantityInvoice(i);
    editSkuUserInvoiceDetail 'Редактировать SKU' (d) = ACTION editSku(skuUserInvoiceDetail(d));
    
    FORM userInvoice 'Накладная'###sign
        OBJECTS i = UserInvoice FIXED PANEL
        PROPERTIES (i) isPostedUserInvoice, nameSupplierUserInvoice ON CHANGE changeSupplier###supplierFilter###userInvoice(i),
                       nameSupplierStockUserInvoice ON CHANGE changeSupplierStock###supplierFilter###userInvoice(i),
                       nameCustomerUserInvoice ON CHANGE changeCustomer###customerFilter###userInvoice(i),
                       nameCustomerStockUserInvoice ON CHANGE changeCustomerStock###customerFilter###userInvoice(i),
                       nameNumeratorUserInvoice, numberUserInvoice, seriesUserInvoice, dateUserInvoice, timeUserInvoice,
                       nameCurrencyUserInvoice, nameAgreementUserInvoice, namePriceListTypeUserInvoice SHOWIF noAgreementUserInvoice(i), noteUserInvoice,
                       seriesNumberContractSkuUserInvoice, isCommissionUserInvoice
        PROPERTIES (i) countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice,
                       VATSumUserInvoiceDetailUserInvoice, invoiceSumUserInvoiceDetailUserInvoice, sumNetWeightInvoiceDetailInvoice, 
                       sumGrossWeightInvoiceDetailInvoice ON CHANGE changeGrossWeightInvoice(i) 

        OBJECTS d = UserInvoiceDetail FIXED GRID
        PROPERTIES (d) indexUserInvoiceDetail
        PROPERTIES (d) ON EDIT editSkuUserInvoiceDetail(d) BACKGROUND backgroundSkuUserInvoiceDetail(d) idBarcodeSkuUserInvoiceDetail, 
                       idSkuUserInvoiceDetail SHOWIF showIDs(), nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail
        PROPERTIES (d) quantityUserInvoiceDetail SHOWIF showQuantityInvoice(i), namePriceListTypeUserInvoiceDetail,
                       priceUserInvoiceDetail ON CHANGE changePriceUserInvoiceDetail(d), sumUserInvoiceDetail,
                       numberVATUserInvoiceDetail ON CHANGE changeNumberVATUserInvoiceDetail(d) BACKGROUND backgroundVATUserInvoiceDetail(d),
                       valueVATUserInvoiceDetail ON CHANGE changeValueVATUserInvoiceDetail(d) BACKGROUND backgroundVATUserInvoiceDetail(d),
                       invoicePriceUserInvoiceDetail ON CHANGE changeInvoicePriceUserInvoiceDetail(d),
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, sumNetWeightUserInvoiceDetail BACKGROUND backgroundSkuUserInvoiceDetail(d), 
                       sumGrossWeightUserInvoiceDetail BACKGROUND backgroundSkuUserInvoiceDetail(d), ADDOBJ, deleteid=DELETESESSION
        ORDER BY indexUserInvoiceDetail(d)

        PROPERTIES(i) TODRAW d fillDocumentInvoice, addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                               addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
        FILTERS userInvoiceUserInvoiceDetail(d) == i

        EVENTS
            ON OK prePostUserInvoice(i)

//        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
//                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
//                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail

        EDIT UserInvoice OBJECT i
    ;

    DESIGN userInvoice {
        main {
            preferredSize = (1024, 768);
            NEW header.box {
                type = CONTAINERH;

                NEW headerParams {
                    fill = 1;

                    MOVE i.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPostedUserInvoice(i));
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumeratorUserInvoice(i));
                            MOVE PROPERTY(numberUserInvoice(i));
                            MOVE PROPERTY(seriesUserInvoice(i));
                            MOVE PROPERTY(dateUserInvoice(i));
                            MOVE PROPERTY(timeUserInvoice(i));
                        }    
                    }
                    NEW headerLegalEntity {
                        type = CONTAINERH;
                        NEW headerSupplier {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplierUserInvoice(i));
                            MOVE PROPERTY(nameSupplierStockUserInvoice(i));
                        }
                        NEW headerCustomer {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomerUserInvoice(i));
                            MOVE PROPERTY(nameCustomerStockUserInvoice(i));
                        }
                    }
                    NEW headerTabbedPane {
                        alignment = STRETCH;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            NEW headerContract {
                                type = CONTAINERH;
                                caption = 'Договор';
                                MOVE PROPERTY(seriesNumberContractSkuUserInvoice(i));
                                MOVE PROPERTY(isCommissionUserInvoice(i));
                            }
                            MOVE i.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = COLUMNS;
                            columns = 4;
//                            minimumSize = (500, -1);
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = CONTAINERH;
                            columns = 2;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = COLUMNS;
                            columns = 2;
//                            minimumSize = (500, -1);
                        }
                        NEW import {
                            caption = 'Импорт';
                            type = CONTAINERH;
                        }
                    }
                }
                MOVE i.documentSum {
                    columns = 1;
                    NEW sumWeight {
                        caption = 'Вес';
                        MOVE PROPERTY(sumNetWeightInvoiceDetailInvoice(i)); 
                        MOVE PROPERTY(sumGrossWeightInvoiceDetailInvoice(i));                                                                                                                                                                                                                
                    }
                }
            }
            NEW specification.box {
                fill = 1;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }

            MOVE functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}
            PROPERTY(deleteUserInvoiceDetailUserInvoice(i)){focusable = FALSE;}
        }
    }

    //возможность приоритетной подмены
    overVATUserInvoiceDetail = ABSTRACT OVERRIDE FIRST Range (UserInvoiceDetail);
    overVATUserInvoiceDetail(d) += VATSkuCountry (skuUserInvoiceDetail(d), countryStock(supplierStockUserInvoiceDetail(d)));
    changedVATUserInvoiceDetail = ABSTRACT OVERRIDE BOOLEAN (UserInvoiceDetail); 
    
    WHEN SESSION FORMS userInvoice
        (CHANGED(skuUserInvoiceDetail(detail)) OR CHANGED (supplierStockUserInvoiceDetail(detail)) OR changedVATUserInvoiceDetail(detail)) AND NOT CHANGED(VATUserInvoiceDetail(detail)) DO {
            VATUserInvoiceDetail(detail) <- overVATUserInvoiceDetail(detail);
            
        } // записываем шкалу
        
    CONSTRAINT equalSkuVATInvoices() AND VATUserInvoiceDetail(d) AND isPostedUserInvoiceDetail(d) AND NOT overVATUserInvoiceDetail(d) == VATUserInvoiceDetail(d)
        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';        
    // Добавляем подбор товаров / партий
    @defineDocumentSkuPriceListTypeAgreement(userInvoice, stockProp);
    @extendFormDocumentSkuPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);

    addUserInvoice 'Добавить' = ACTION ADDFORM UserInvoice;
    editUserInvoice 'Редактировать' (userInvoice) = ACTION EDITFORM UserInvoice;
    editInvoice (invoice) += ACTION editUserInvoice(invoice);

    overCopyInvoice = ABSTRACT ACTION LIST (Invoice, UserInvoice);
    overCopyInvoiceDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, InvoiceDetail);
    
    copyInvoice 'Копировать' = ACTION (invoice) NEWSESSION {
        FOR ADDOBJ i = UserInvoice DO {
            ASSIGN supplierUserInvoice(i) <- supplierInvoice(invoice);
            ASSIGN supplierStockUserInvoice(i) <- supplierStockInvoice(invoice);
            ASSIGN customerUserInvoice(i) <- customerInvoice(invoice);
            ASSIGN customerStockUserInvoice(i) <- customerStockInvoice(invoice);
            ASSIGN contractSkuUserInvoice(i) <- contractSkuInvoice(invoice);
            ASSIGN isCommissionUserInvoice(i) <- isCommissionInvoice(invoice);
            ASSIGN currencyUserInvoice(i) <- currencyInvoice(invoice);
            ASSIGN agreementUserInvoice(i) <- agreementInvoice(invoice);
            ASSIGN priceListTypeUserInvoice(i) <- priceListTypeInvoice(invoice);
            ASSIGN noteUserInvoice(i) <- noteInvoice(invoice);
            //ASSIGN createShipmentUserInvoice(i) <- createShipmentUserInvoice(invoice);

            EXEC overCopyInvoice(invoice, i);

            FOR invoiceInvoiceDetail(invoiceDetail) == invoice DO {
                FOR ADDOBJ d=UserInvoiceDetail DO {
                    ASSIGN userInvoiceUserInvoiceDetail(d) <- i;
                    ASSIGN skuUserInvoiceDetail(d) <- skuInvoiceDetail(invoiceDetail);
                    ASSIGN quantityUserInvoiceDetail(d) <- quantityInvoiceDetail(invoiceDetail);
                    ASSIGN priceUserInvoiceDetail(d) <- priceInvoiceDetail(invoiceDetail);
                    ASSIGN data###stockProp###stock###userInvoiceDetail(d) <- data###stockProp###stock###invoiceDetail(invoiceDetail);
                    
                    EXEC overCopyInvoiceDetail(d, invoiceDetail);
                }
            }

            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopyUserInvoiceDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, UserInvoiceDetail);

    copyInvoiceDetail 'Копировать' = ACTION (detail) {
        FOR ADDOBJ d = UserInvoiceDetail DO {          

            userInvoiceUserInvoiceDetail(d) <- userInvoiceUserInvoiceDetail(detail);
            skuUserInvoiceDetail(d) <- skuUserInvoiceDetail(detail);
            quantityUserInvoiceDetail(d) <- quantityUserInvoiceDetail(detail);
            priceUserInvoiceDetail(d) <- priceUserInvoiceDetail(detail);
            data###stockProp###stock###userInvoiceDetail(d) <- data###stockProp###stock###userInvoiceDetail(detail);
            priceListType###userInvoiceDetail(d) <- priceListType###userInvoiceDetail(detail);
            invoicePrice###userInvoiceDetail(d) <- invoicePrice###userInvoiceDetail(detail);
            
            overCopyUserInvoiceDetail(d, detail);                              
        }
    } EDITKEY 'F5' TOOLBAR;
    
    EXTEND FORM userInvoice PROPERTIES(d) copyInvoiceDetail FORCE PANEL;
    DESIGN userInvoice { PROPERTY(copyInvoiceDetail(d)) { focusable = FALSE; } }

    isUserOpenedInvoice(i)=  isOpenedInvoice(i) AND isUserInvoice(i);
    
    filterInvoiceDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFromInvoice (i) = dateInvoice(i) >= filterInvoiceDateFrom() OR (i IS Invoice AND NOT filterInvoiceDateFrom());      
    
    filterInvoiceDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateToInvoice (i) = dateInvoice(i) <= filterInvoiceDateTo() OR (i IS Invoice AND NOT filterInvoiceDateTo());      
    
    filterInvoiceCustomer  = DATA LOCAL LegalEntity ();
    nameFilterInvoiceCustomer 'Покупатель' = nameLegalEntity(filterInvoiceCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerInvoice (i) = customerInvoice(i) == filterInvoiceCustomer() OR (i IS Invoice AND NOT filterInvoiceCustomer());    

    filterInvoiceCustomerStock  = DATA LOCAL Stock ();
    nameFilterInvoiceCustomerStock 'Склад покупателя' = nameStock(filterInvoiceCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStockInvoice (i) = customerStockInvoice(i) == filterInvoiceCustomerStock() OR (i IS Invoice AND NOT filterInvoiceCustomerStock());  

    filterInvoiceSupplier = DATA LOCAL LegalEntity ();
    nameFilterInvoiceSupplier 'Поставщик' = nameLegalEntity(filterInvoiceSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierInvoice (i) = supplierInvoice(i) == filterInvoiceSupplier() OR (i IS Invoice AND NOT filterInvoiceSupplier());      

    filterInvoiceSupplierStock  = DATA LOCAL Stock ();
    nameFilterInvoiceSupplierStock 'Склад поставщика' = nameStock(filterInvoiceSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStockInvoice (i) = supplierStockInvoice(i) == filterInvoiceSupplierStock() OR (i IS Invoice AND NOT filterInvoiceSupplierStock());      
    
    filterInvoiceCustomUser  = DATA LOCAL CustomUser ();
    nameFilterInvoiceCustomUser 'Создан пользователем' = nameContact(filterInvoiceCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUserInvoice (i) = createdUserUserInvoice(i) == filterInvoiceCustomUser() OR (i IS Invoice AND NOT filterInvoiceCustomUser());  

    filterInvoiceComputer = DATA LOCAL Computer ();
    nameFilterInvoiceComputer 'Создан на компьютере' = hostnameComputer(filterInvoiceComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputerInvoice (i) = createdComputerUserInvoice(i) == filterInvoiceComputer() OR (i IS Invoice AND NOT filterInvoiceComputer());
    
    overShowEditInvoice = ABSTRACT BOOLEAN (Invoice);
    overShowDeleteInvoice = ABSTRACT BOOLEAN (Invoice);
    skipShowEditInvoice = ABSTRACT BOOLEAN (Invoice);
    skipShowDeleteInvoice = ABSTRACT BOOLEAN (Invoice);
    
    Invoice.overShowEditInvoice(i) += overShowEditInvoice(i);
    Invoice.overShowDeleteInvoice(i) += overShowDeleteInvoice(i);
    
    overPreventCloseUserInvoice = ABSTRACT BOOLEAN (UserInvoice);
    overPreventOpenUserInvoice = ABSTRACT BOOLEAN (UserInvoice);
    showCloseUserInvoice (i) = isOpenedUserInvoice(i) AND NOT overPreventCloseUserInvoice(i);   
    showOpenUserInvoice (i) = isClosedUserInvoice(i) AND NOT overPreventOpenUserInvoice(i);   
    backgroundDraftInvoice 'Цвет'  (i)= RGB(212,255,212) IF isDraftInvoice(i); 
    
    FORM invoices 'Накладные' 
    
        PROPERTIES() filterInvoiceDateFrom, filterInvoiceDateTo, nameFilterInvoiceSupplier, nameFilterInvoiceSupplierStock, 
                     nameFilterInvoiceCustomer, nameFilterInvoiceCustomerStock, nameFilterInvoiceCustomUser, nameFilterInvoiceComputer
        
        OBJECTS i = Invoice LAST
        PROPERTIES (i) READONLYIF isReadonly() isClosedInvoice 
                                
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND backgroundDraftInvoice(i) isPostedInvoice,
                                numberInvoice, seriesInvoice, dateInvoice, timeInvoice                                
        PROPERTIES (i) READONLYIF isReadonly() nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, nameAgreementInvoice,
                                seriesNumberContractSkuInvoice, isCommissionInvoice
        PROPERTIES (i) READONLY countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice
        PROPERTIES (i) READONLYIF isReadonly() noteInvoice
        PROPERTIES (i) READONLY FORCE PANEL createdNameUserUserInvoice, createdTimeUserInvoice, createdHostnameComputerUserInvoice, 
                                            postedNameUserUserInvoice, postedTimeUserInvoice, postedHostnameComputerUserInvoice 

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) editInvoice SHOWIF overShowEditInvoice(i),//isOpenedInvoice(i), 
                       copyInvoice
        PROPERTIES (i) closeUserInvoice SHOWIF showCloseUserInvoice(i), openUserInvoice SHOWIF showOpenUserInvoice(i)
        PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF overShowDeleteInvoice(i)//isUserOpenedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, idSkuInvoiceDetail SHOWIF showIDs(), nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
        PROPERTIES (d) READONLY quantityInvoiceDetail, namePriceListTypeInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail
        ORDER BY indexInvoiceDetail(d)

        FILTERS invoiceInvoiceDetail(d) == i
        FILTERS filterDateFromInvoice(i), 
                filterDateToInvoice(i),
                filterSupplierInvoice(i),
                filterSupplierStockInvoice(i),
                filterCustomerInvoice(i),
                filterCustomerStockInvoice(i),
                filterCustomUserInvoice(i),
                filterComputerInvoice(i)
                
        DIALOG Invoice OBJECT i
    ;

    DESIGN invoices 'Накладные'###sign {
        main {
            preferredSize = (1024, 768);
            PROPERTY (deletei) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                fill = 1;

                type = SPLITV;
                NEW filtersBox {                       
                    fill = 1;
                    NEW topFilters {
                        caption = 'Фильтры';
                        type = CONTAINERV; 
                        NEW topFilters1 {
                            type = CONTAINERH; 
                            MOVE PROPERTY(filterInvoiceDateFrom());
                            MOVE PROPERTY(filterInvoiceDateTo());                            
                            MOVE PROPERTY(nameFilterInvoiceSupplier());
                            MOVE PROPERTY(nameFilterInvoiceSupplierStock());    
                            MOVE PROPERTY(nameFilterInvoiceCustomer());
                            MOVE PROPERTY(nameFilterInvoiceCustomerStock());                                                    
                        }
                        NEW topFilters2 {
                            type = CONTAINERH; 
                            MOVE PROPERTY(nameFilterInvoiceCustomUser());
                            MOVE PROPERTY(nameFilterInvoiceComputer());                            
                        }                                                                                         
                    }
                    MOVE i.box {
                        fill = 1;
                    }
                }    

                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE d.box {
                        fill = 1;
                        caption = 'Спецификация';
                    }
                    NEW documentHistory {
                        caption = 'История';
                        type = CONTAINERV;

                        MOVE i.created;
                        MOVE i.posted;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                    NEW actionContainer {
                        caption = 'Действия';
                        type = CONTAINERH;
                        NEW createdContainer {
                            caption = 'Создание на основе';
                            type = CONTAINERV;

                            MOVE PROPERTY(copyInvoice(i)) { caption = 'Накладная'###sign;}
                        }
                        NEW machineryContainer {
                            caption = 'Загрузка';
                            type = CONTAINERV;
                        }
                    }
                }
            }
        }
    }
    @extendFormEditable(invoices);
    @defineFilterIsOpened (invoice, invoices, i); 
    @defineDocumentLogForm(invoices, i);
    FORM invoiceDetails 'Продажа'
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                               descriptionInvoiceDetail,
                               quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                               numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                               name###stockProp###stock###invoiceDetail

        DIALOG InvoiceDetail OBJECT d
    ;
    
    backgroundVATUserInvoiceDetail(d) += WHEN isItemSku(skuUserInvoiceDetail(d)) AND NOT 
        ((valueVATUserInvoiceDetail(d) == valueVATSkuCountryDate(skuUserInvoiceDetail(d), countryStock(customerStockUserInvoiceDetail(d)), dateUserInvoiceDetail(d)))
         OR (valueVATUserInvoiceDetail(d) == overSetValueVATUserInvoiceDetail(d))) 
            THEN RGB(255,0,0); 
            
    editInvoiceDetail 'Редактировать' = ABSTRACT ACTION LIST (InvoiceDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    editUserInvoiceDetail(d) = ACTION (d) NEWSESSION {
        FORM userInvoice OBJECTS i = userInvoiceUserInvoiceDetail(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    editInvoiceDetail(d) += ACTION editUserInvoiceDetail(d);        
END

// -------------------------- Метакод по добавлению партий ------------------------- //

META defineInvoiceBatch(stockProp, NS, sign)
    @showDocumentInterfaceDetailBatch(invoice);
    
    @defineDocumentInterfaceDetailBatch(invoice, batch); 
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
        batchUserInvoiceDetail(d) <- batchUserInvoiceDetail(detail);
    }  
    overCopyInvoiceDetail(d, detail) += ACTION (d, detail) {      
        batchUserInvoiceDetail(d) <- batchUserInvoiceDetail(detail);
    }  
    
    // Пишем в цену инвойса из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userInvoice, stockProp###stock, userInvoice);

    // История по правой кнопке
    @defineBalancesBatch(invoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeAgreement(userInvoice, stockProp);
    @extendFormDocumentBatchPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);
    
    // Подбор документа
    @implementDocumentBatch(invoice);
   
    replaceSkuBatch(s, b) += ACTION (s, b){ skuUserInvoiceDetail(detail) <- s WHERE Invoice.batchInvoiceDetail(detail) == b;} 
    
END

// Партии с диалогом по складам
META defineInvoiceBatchDialogStock(stockProp)

    changeBatchUserInvoiceDetail = ACTION (d) {
        IF batchUserInvoiceDetail(d) THEN {
            FORM dialogBatchStock OBJECTS st = stockProp###userInvoiceDetail(d),
                                     t = dateTimeUserInvoiceDetail(d),
                                     sk = skuUserInvoiceDetail(d),
                                     bt = batchUserInvoiceDetail(d) DIALOG SHOWDROP;        
        } ELSE {
            FORM dialogBatchStock OBJECTS st = stockProp###userInvoiceDetail(d),
                                     t = dateTimeUserInvoiceDetail(d),
                                     sk = skuUserInvoiceDetail(d) DIALOG SHOWDROP;        
        }


        IF formResult() == FormResult.ok THEN {
            batchUserInvoiceDetail(d) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batchUserInvoiceDetail(d) <- NULL;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) nameBatchUserInvoiceDetail ON CHANGE changeBatchUserInvoiceDetail(d) AFTER shortNameUOMSkuUserInvoiceDetail(d) SHOWIF showBatchInvoice(i)
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY nameBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d) SHOWIF showBatchInvoice(i);
END

// Партии на приходе
META defineInvoiceBatchDialog(dumb)
    changeBatchUserInvoiceDetail = ACTION (userInvoiceDetail) {
        FORM dialogBatch OBJECTS sk = skuUserInvoiceDetail(userInvoiceDetail) DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            batchUserInvoiceDetail(userInvoiceDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batchUserInvoiceDetail(userInvoiceDetail) <- NULL;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) nameBatchUserInvoiceDetail ON CHANGE changeBatchUserInvoiceDetail(d) AFTER shortNameUOMSkuUserInvoiceDetail(d) SHOWIF showBatchInvoice(i)
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY nameBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d) SHOWIF showBatchInvoice(i);
END

META defineInvoiceReturn(nsdir, nsret, stockProp)
    invoiceDetailInvoiceDetail (invoiceDetail) = ABSTRACT nsdir.InvoiceDetail (nsret.InvoiceDetail) PERSISTENT INDEXED;
    invoiceDetailUserInvoiceDetail (userInvoiceDetail) = DATA nsdir.InvoiceDetail (nsret.UserInvoiceDetail);
    invoiceDetailInvoiceDetail(detail) += invoiceDetailUserInvoiceDetail(detail);

    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM nsret.quantityInvoiceDetail(invoiceDetail) IF nsret.isPostedInvoiceDetail(invoiceDetail) 
        BY invoiceDetailInvoiceDetail(invoiceDetail) PERSISTENT;
    returnQuantityInvoiceDetailInvoice 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantityInvoiceDetail(invoiceDetail) BY nsdir.invoiceInvoiceDetail(invoiceDetail) PERSISTENT;
    toReturnQuantityInvoiceDetail 'Кол-во доступно к возврату' (invoiceDetail)= nsdir.quantityInvoiceDetail(invoiceDetail) (-) returnQuantityInvoiceDetail(invoiceDetail);    

    CONSTRAINT returnQuantityInvoiceDetail(d) > nsdir.quantityInvoiceDetail(d)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT nsdir.skuInvoiceDetail(invoiceDetailUserInvoiceDetail(d)) != nsret.skuUserInvoiceDetail(d) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT nsdir.supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(d)) != nsret.supplierUserInvoiceDetail(d) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT nsdir.customerInvoiceDetail(invoiceDetailUserInvoiceDetail(d)) != nsret.customerUserInvoiceDetail(d) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';
        
        

    descriptionInvoiceDetailInvoiceDetail 'Основание' (invoiceDetail) = nsdir.descriptionInvoiceDetail(invoiceDetailInvoiceDetail(invoiceDetail));
    descriptionInvoiceDetailUserInvoiceDetail 'Основание' (userInvoiceDetail) = nsdir.descriptionInvoiceDetail(invoiceDetailUserInvoiceDetail(userInvoiceDetail));
    balanceBMaxBatchInvoiceDetail 'Остаток партии (max)' (d,st,dt) = balanceBBatchStockDateTime(nsdir.maxBatchInvoiceDetail(d),st,dt);
    
    FORM baseInvoiceDetail 'Строка накладной'        
        OBJECTS sk = Sku FIXED PANEL
        PROPERTIES(sk) READONLY nameSku, idBarcodeSku, shortNameUOMSku
        
        OBJECTS st = Stock FIXED PANEL    
        OBJECTS dt = DATETIME FIXED PANEL       
        OBJECTS d = nsdir.InvoiceDetail LAST
        PROPERTIES(d) READONLY nsdir.dateInvoiceDetail, nsdir.indexInvoiceDetail, nsdir.descriptionInvoiceDetail,
                               nsdir.quantityInvoiceDetail, toReturnQuantityInvoiceDetail
        PROPERTIES   READONLY balanceBMaxBatchInvoiceDetail(d,st,dt)                       
        PROPERTIES(d) READONLY nsdir.priceInvoiceDetail, nsdir.sumInvoiceDetail,
                               nsdir.numberVATInvoiceDetail, nsdir.valueVATInvoiceDetail, nsdir.VATSumInvoiceDetail, nsdir.invoiceSumInvoiceDetail,
                               nsdir.name###stockProp###invoiceDetail         
                
        FILTERGROUP filter11
                    FILTER  'По складу' nsdir.stockProp###invoiceDetail(d) == st DEFAULT     
        FILTERGROUP filter12
                    FILTER  'Доступно' toReturnQuantityInvoiceDetail(d) > 0 DEFAULT                            
                
    ;
    DESIGN baseInvoiceDetail {
        main {
            MOVE sk.box {
                type = CONTAINERH;
                PROPERTY(nameSku(sk)) {focusable = FALSE;}
                PROPERTY(idBarcodeSku(sk)) {focusable = FALSE;}
                PROPERTY(shortNameUOMSku(sk)) {focusable = FALSE;}
            }
            MOVE d.box;
            MOVE functions.box;
        }
    } 
    
    change###nsdir###invoiceDetailInvoiceDetail = ACTION (detail) {
        REQUEST OBJECT d
        IF stockProp###invoiceDetail(detail)  THEN {
            IF invoiceDetailUserInvoiceDetail(detail) THEN {            
                FORM baseInvoiceDetail OBJECTS sk = skuInvoiceDetail(detail), st = stockProp###invoiceDetail(detail), dt = dateTimeInvoiceDetail(detail), d = invoiceDetailUserInvoiceDetail(detail)  CONTEXTFILTER d = invoiceDetailUserInvoiceDetail(detail) DIALOG SHOWDROP;        
            } 
            ELSE {
                FORM baseInvoiceDetail OBJECTS sk = skuInvoiceDetail(detail), st = stockProp###invoiceDetail(detail), dt = dateTimeInvoiceDetail(detail) CONTEXTFILTER d = invoiceDetailUserInvoiceDetail(detail) DIALOG SHOWDROP; 
            }
        }
        
        IF formResult() == FormResult.ok THEN {
            invoiceDetailUserInvoiceDetail(detail) <- requestedObject();

        } ELSE IF formResult() == FormResult.drop THEN {
            invoiceDetailUserInvoiceDetail(detail) <- NULL;
        }
    }    
    

//    nsret.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
//                                                    nsdir.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
//                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
//                                                    prevPriceBPriceListTypeBatchStockDateTime(nsret.priceListTypeInvoiceDetail(detail),
//                                                                                              nsret.batchInvoiceDetail(detail),
//                                                                                              nsret.stockProp###invoiceDetail(detail),
//                                                                                              nsret.dateTimeInvoiceDetail(detail))
//                                                 ELSE
//                                                    prevPriceBPriceListTypeSkuStockDateTime(nsret.priceListTypeInvoiceDetail(detail),
//                                                                                            nsret.skuInvoiceDetail(detail),
//                                                                                            nsret.stockProp###invoiceDetail(detail),
//                                                                                            nsret.dateTimeInvoiceDetail(detail))
//                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.batchInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.priceListTypeInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.skuInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.stockProp###invoiceDetail(detail)) OR
//                                             CHANGED(nsret.dateTimeInvoiceDetail(detail));

    overRecalculatedPriceUserInvoiceDetail = ABSTRACT ACTION LIST (nsret.UserInvoiceDetail);
    recalculatedPriceUserInvoiceDetail(detail) = ACTION (detail) {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
        IF invoiceDetailUserInvoiceDetail(detail) THEN {
            ASSIGN nsret.priceUserInvoiceDetail(detail) <-  nsdir.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            ASSIGN nsret.invoicePriceInvoiceDetail(detail) <-  nsdir.invoicePriceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            ASSIGN nsret.invoicePriceUserInvoiceDetail(detail) <-  nsdir.invoicePriceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            ASSIGN nsret.VATUserInvoiceDetail(detail) <- nsdir.VATInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            EXEC overRecalculatedPriceUserInvoiceDetail(detail);
        }
    }
        WHEN SESSION FORMS userInvoice
            CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
            CHANGED(nsret.batchInvoiceDetail(detail)) OR
            CHANGED(nsret.priceListTypeInvoiceDetail(detail)) OR
            CHANGED(nsret.skuInvoiceDetail(detail)) OR
            CHANGED(nsret.stockProp###invoiceDetail(detail)) OR
            CHANGED(nsret.dateTimeInvoiceDetail(detail))
                DO EXEC recalculatedPriceUserInvoiceDetail(detail);


    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetailUserInvoiceDetail ON CHANGE change###nsdir###invoiceDetailInvoiceDetail(d) 
                AFTER shortNameUOMSkuUserInvoiceDetail(d);
    EXTEND FORM nsdir.userInvoice PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeUserInvoiceDetail(d);

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetailInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d);
    EXTEND FORM nsdir.invoices PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeInvoiceDetail(d);

    nsret.batchUserInvoiceDetail(detail) <- nsdir.maxBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) AND nsdir.countBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) == 1;

    CONSTRAINT batchUserInvoiceDetail(detail) AND invoiceDetailUserInvoiceDetail(detail) AND
               NOT inInvoiceDetailBatch(invoiceDetailUserInvoiceDetail(detail), batchUserInvoiceDetail(detail))
               CHECKED BY batchUserInvoiceDetail, invoiceDetailUserInvoiceDetail
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
               
    equalsPriceLineInvoices 'Цена в возвратной накладной должна соответстовать цене в основании' = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() nsret###equalsPriceLineInvoices = equalsPriceLineInvoices
    ;
    
    DESIGN options {
        invoice##nsret {
            MOVE PROPERTY(nsret###equalsPriceLineInvoices);    
        }
    }

    CONSTRAINT isPostedUserInvoiceDetail(d) AND equalsPriceLineInvoices() AND NOT (nsret.priceUserInvoiceDetail(d) ==  nsdir.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(d)))
        MESSAGE 'Цена в возвратной накладной не соответствует цене в основании';  
            
    //----------- Автоматическое заполнение основания для возвратной накладной ------------------//
    countInvoiceDetailsSupplierStockCustomerStockSkuPriceDate 'Количество строк основания' = GROUP SUM 1 
        IF nsdir.dateInvoiceDetail(d) <= date AND nsdir.isPostedInvoiceDetail(d)
            BY nsdir.supplierInvoiceDetail(d), nsdir.supplierStockInvoiceDetail(d), nsdir.customerInvoiceDetail(d), nsdir.customerStockInvoiceDetail(d), nsdir.skuInvoiceDetail(d), nsdir.priceInvoiceDetail(d), date;
    
    invoiceDetailSupplierStockCustomerStockSkuPriceDate 'Количество строк основания' = GROUP MAX d 
        IF nsdir.dateInvoiceDetail(d) <= date AND nsdir.isPostedInvoiceDetail(d)
            BY nsdir.supplierInvoiceDetail(d), nsdir.supplierStockInvoiceDetail(d), nsdir.customerInvoiceDetail(d), nsdir.customerStockInvoiceDetail(d), nsdir.skuInvoiceDetail(d), nsdir.priceInvoiceDetail(d), date;
                
    maxSaleInvoiceDetailUserInvoiceDetail(d) = invoiceDetailSupplierStockCustomerStockSkuPriceDate(supplierUserInvoiceDetail(d),supplierStockUserInvoiceDetail(d), customerUserInvoiceDetail(d),customerStockUserInvoiceDetail(d),skuUserInvoiceDetail(d), priceUserInvoiceDetail(d),dateUserInvoiceDetail(d));
    countSaleInvoiceDetailsUserInvoiceDetail(d) = countInvoiceDetailsSupplierStockCustomerStockSkuPriceDate(supplierUserInvoiceDetail(d),supplierStockUserInvoiceDetail(d), customerUserInvoiceDetail(d),customerStockUserInvoiceDetail(d),skuUserInvoiceDetail(d), priceUserInvoiceDetail(d), dateUserInvoiceDetail(d));
    balanceReturnQuantityInvoiceDetail(detail) = nsdir.quantityInvoiceDetail(detail) (-) returnQuantityInvoiceDetail(detail);
    
    //-- пока берем без учета того, что в данной накладной может быть несколько строк с одним товаром
    fillInvoiceDetailUserInvoiceDetail 'Проставить основание'  = ACTION (d) {    
        invoiceDetailUserInvoiceDetail(d) <- maxSaleInvoiceDetailUserInvoiceDetail(d)
            WHERE NOT invoiceDetailUserInvoiceDetail(d)  AND countSaleInvoiceDetailsUserInvoiceDetail(d) == 1 AND        
            balanceReturnQuantityInvoiceDetail(maxSaleInvoiceDetailUserInvoiceDetail(d)) >= quantityUserInvoiceDetail(d);
    } SHORTCUT descriptionInvoiceDetailUserInvoiceDetail;
    
    
    fillAllInvoiceDetailUserInvoiceDetail 'Проставить основание для всех' = ACTION (detail) {
       FOR userInvoiceUserInvoiceDetail(detail) == userInvoiceUserInvoiceDetail(d) DO
           fillInvoiceDetailUserInvoiceDetail(d);
    } SHORTCUT descriptionInvoiceDetailUserInvoiceDetail;               
               
END

META defineInvoiceDestination(fromLegalEntity, toLegalEntity)
    Invoice.fromInvoice(invoice) += fromLegalEntity##Invoice(invoice);
    Invoice.toInvoice(invoice) += toLegalEntity##Invoice(invoice);
    //Invoice.dataFromLegalEntityInvoiceDetail(detail) += data###fromLegalEntity##InvoiceDetail(detail);
    //Invoice.dataToLegalEntityInvoiceDetail(detail) += data###toLegalEntity##InvoiceDetail(detail);
END


META defineInvoiceStockDestination(fromStockProp, toStockProp)
    Invoice.fromStockInvoice(invoice) += fromStockProp##Invoice(invoice);
    Invoice.toStockInvoice(invoice) += toStockProp##Invoice(invoice);
    Invoice.dataFromStockInvoiceDetail(detail) += data###fromStockProp##InvoiceDetail(detail);
    Invoice.dataToStockInvoiceDetail(detail) += data###toStockProp##InvoiceDetail(detail);
END

// вторая валюта
META defineInvoiceHomeCurrency(dumb)

    backgroundHomeCurrencyInvoice 'Цвет' (invoice) = RGB(255, 224, 128) IF invoice IS Invoice;

    isHomeCurrencyInvoice 'Конвертация' = ABSTRACT BOOLEAN(Invoice) IN documentPrm;
    isHomeCurrencyUserInvoice 'Конвертация' = DATA BOOLEAN(UserInvoice) IN documentPrm;
    isHomeCurrencyInvoice(i) += isHomeCurrencyUserInvoice(i);
    
    isHomeCurrencyInvoiceDetail (d) = isHomeCurrencyInvoice(invoiceInvoiceDetail(d));
    isHomeCurrencyUserInvoiceDetail (d) = isHomeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(d));

    homeCurrencyInvoice = ABSTRACT Currency(Invoice);
    homeCurrencyUserInvoice = DATA Currency(UserInvoice);
    homeCurrencyInvoice(i) += homeCurrencyUserInvoice(i);
    nameHomeCurrencyInvoice 'Валюта (конв.)' (i) = nameCurrency(homeCurrencyInvoice(i));

    homeCurrencyUserInvoice(userInvoice) <- currencyLegalEntity(customerUserInvoice(userInvoice)) WHEN CHANGED(customerUserInvoice(userInvoice));

    typeExchangeInvoice = ABSTRACT TypeExchange(Invoice);
    typeExchangeUserInvoice = DATA TypeExchange(UserInvoice);
    typeExchangeInvoice(i) += typeExchangeUserInvoice(i);
    nameTypeExchangeInvoice 'Тип обмена' (i) = nameTypeExchange(typeExchangeInvoice(i));

    CONSTRAINT currencyTypeExchange(typeExchangeUserInvoice(invoice)) != homeCurrencyUserInvoice(invoice)
        CHECKED BY typeExchangeUserInvoice MESSAGE 'Тип обмена должен соответствовать валюте (конв.)';

    dateRateExchangeInvoice 'Дата конвертации' = ABSTRACT DATE(Invoice);
    dateRateExchangeUserInvoice 'Дата конвертации' = DATA DATE(UserInvoice);
    dateRateExchangeInvoice(i) += dateRateExchangeUserInvoice(i);

    dateRateExchangeUserInvoice(i) <- dateInvoice(i) WHEN CHANGED (dateInvoice(i));

    rateExchangeInvoice 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) PERSISTENT;
    rateExchangeUserInvoice 'Курс' = DATA NUMERIC[14,6](UserInvoice);
    rateExchangeInvoice(i) += rateExchangeUserInvoice(i);

    WHEN SESSION FORMS userInvoice CHANGED (dateRateExchangeUserInvoice(i)) OR
                                   CHANGED (typeExchangeUserInvoice(i)) OR
                                   CHANGED (currencyUserInvoice(i)) DO {
        rateExchangeUserInvoice(i) <- rateOnTypeExchangeCurrencyDate(typeExchangeUserInvoice(i),
                                                                   currencyUserInvoice(i),
                                                                   dateRateExchangeUserInvoice(i));
    }

    rateExchangeInvoiceDetail 'Курс' = ABSTRACT NUMERIC[14,6](InvoiceDetail) PERSISTENT;

    dataRateExchangeUserInvoiceDetail 'Курс' = DATA NUMERIC[14,6](UserInvoiceDetail);
    rateExchangeUserInvoiceDetail 'Курс' (d) = OVERRIDE rateExchangeUserInvoice(userInvoiceUserInvoiceDetail(d)),  dataRateExchangeUserInvoiceDetail(d);
    rateExchangeInvoiceDetail(d) += rateExchangeUserInvoiceDetail(d);

    homePriceInvoiceDetail 'Цена (конв.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail) PERSISTENT;
    homePriceUserInvoiceDetail 'Цена (конв.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
    homePriceInvoiceDetail(d) += homePriceUserInvoiceDetail(d);
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
        dataRateExchangeUserInvoiceDetail(d) <- dataRateExchangeUserInvoiceDetail(detail);
    }  

    homePriceUserInvoiceDetail(d) <- roundPriceCurrency(priceUserInvoiceDetail(d) *
                                                        rateExchangeUserInvoiceDetail(d),
                                                        homeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(d)))
                                                   WHEN CHANGED (dateUserInvoice(userInvoiceUserInvoiceDetail(d))) OR
                                                        CHANGED (rateExchangeUserInvoiceDetail(d)) OR
                                                        CHANGED (homeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(d))) OR
                                                        CHANGED (priceUserInvoiceDetail(d));

    homeSumInvoiceDetail 'Сумма (конв.)' (d) = quantityInvoiceDetail(d) * homePriceInvoiceDetail(d);
    homeSumUserInvoiceDetail 'Сумма (конв.)' (d) = quantityUserInvoiceDetail(d) * homePriceUserInvoiceDetail(d);

    homeSumInvoiceDetailInvoice 'Сумма (конв.)' (invoice) = GROUP SUM homeSumInvoiceDetail(d)
                                                                  BY invoiceInvoiceDetail(d);
    homeSumUserInvoiceDetailUserInvoice 'Сумма (конв.)' (invoice) = GROUP SUM homeSumUserInvoiceDetail(d)
                                                                          BY userInvoiceUserInvoiceDetail(d);

    EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundHomeCurrencyInvoice(i) BEFORE nameAgreementUserInvoice(i)
                                                                    isHomeCurrencyUserInvoice
        PROPERTIES(i) BACKGROUND backgroundHomeCurrencyInvoice(i) SHOWIF isHomeCurrencyUserInvoice(i)
                                                                    nameHomeCurrencyInvoice, nameTypeExchangeInvoice, dateRateExchangeInvoice, rateExchangeInvoice
        PROPERTIES(d) BACKGROUND backgroundHomeCurrencyInvoice(i) SHOWIF isHomeCurrencyUserInvoice(i) AFTER sumUserInvoiceDetail(d)
                                                                    rateExchangeUserInvoiceDetail, homePriceUserInvoiceDetail, homeSumInvoiceDetail
    ;

    DESIGN userInvoice {
        headerExtraParams {
            NEW headerHomeCurrency {
                caption = 'Конвертация';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(isHomeCurrencyUserInvoice(i));
                MOVE PROPERTY(nameHomeCurrencyInvoice(i));
                MOVE PROPERTY(nameTypeExchangeInvoice(i));
                MOVE PROPERTY(dateRateExchangeInvoice(i));
                MOVE PROPERTY(rateExchangeInvoice(i));
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(d) READONLY BACKGROUND backgroundHomeCurrencyInvoice(i) SHOWIF isHomeCurrencyInvoice(i) AFTER sumInvoiceDetail(d)
                      rateExchangeInvoiceDetail, homePriceInvoiceDetail, homeSumInvoiceDetail
    ;
END

META defineInvoicePayment(dumb)

    addPaymentInvoice 'Оплатить' = ACTION (invoice) {
        ASSIGN currentInContractLedger() <- invoice;
        FOR ADDOBJ p = Payment DO{
            ASSIGN contractPayment(p) <- contractSkuUserInvoice(invoice);
            ASSIGN datePayment(p) <- currentDate();
            ASSIGN timePayment(p) <- currentTime();
            ASSIGN payerPayment(p) <- customerUserInvoice(invoice);
            ASSIGN beneficiaryPayment(p) <- supplierUserInvoice(invoice);
            ASSIGN sumPayment(p) <- invoiceSumUserInvoiceDetailUserInvoice(invoice);
            ASSIGN costOutContractLedgerInContractLedger(p, invoice) <- sumContractPayment(p);
            FORM payment OBJECTS p=p MODAL;
            IF NOT formResult() == FormResult.ok THEN {
                DELETE p;
            }
        }
    }

    editPaymentInvoice 'Редактировать' = ACTION (payment, invoice) {
        ASSIGN currentInContractLedger() <- invoice;
        FORM payment OBJECTS p=payment MODAL;
    }

    EXTEND FORM userInvoice
        OBJECTS pm = Payment
        PROPERTIES(pm) READONLY seriesNumberPayment, dateTimePayment, namePayerPayment, nameBeneficiaryPayment,
                                notePayment, isPostedPayment
        ORDER BY dateTimePayment(pm)
        PROPERTIES(pm, i) costOutContractLedgerInContractLedger
        PROPERTIES TODRAW pm FORCE PANEL TOOLBAR addPaymentInvoice(i), editPaymentInvoice(pm, i)
        PROPERTIES(pm) DELETESESSION

        FILTERGROUP filters
            FILTER 'Платежи по накладной' costOutContractLedgerInContractLedger(pm, i) 'F10' DEFAULT
        FILTERS contractPayment(pm) == contractInContractLedger(i)
    ;

    DESIGN userInvoice{
        specification.box{
            NEW paymentContainer{
                caption = 'Платежи';
                MOVE pm.box;
            }
        }
    }
END

META defineDocumentExtraFilters(object, objectClass, form, container)
    filter###object###CustomUser  = DATA LOCAL CustomUser ();
    nameFilter###object###CustomUser 'Создан пользователем' = nameContact(filter###object###CustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUser###object### (i) = createdNameUserUser###object###(i) == filter###object###CustomUser() OR (i IS objectClass AND NOT filter###object###CustomUser());  

    filter###object###Computer = DATA LOCAL Computer ();
    nameFilter###object###Computer 'Создан на компьютере' = hostnameComputer(filter###object###Computer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputer###object### (i) = createdComputerUser###object###(i) == filter###object###Computer() OR (i IS objectClass AND NOT filter###object###Computer());           
        
    EXTEND FORM form 
    
        PROPERTIES() nameFilter###object###CustomUser, nameFilter###object###Computer
    ;
    
    DESIGN form {
        container { 
            MOVE PROPERTY(nameFilter###object###CustomUser());
            MOVE PROPERTY(nameFilter###object###Computer());                
        }         
    }    
END
