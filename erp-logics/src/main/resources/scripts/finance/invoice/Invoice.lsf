MODULE Invoice;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        PriceRound,
        Barcode,
        PriceListType,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        EmployeeStock,
        StockContract,
        StockTax;

CLASS ABSTRACT Invoice 'Накладная' : Document;
CLASS ABSTRACT InvoiceDetail 'Строка накладной' : DocumentDetail;

@defineDocumentAbstract(invoice);
@defineDocumentAbstractNumber(invoice);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, to, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(invoice, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(invoice);
@defineDocumentAbstractClosed(invoice);

@defineDocumentAbstractDetailSku(invoice, sku);

@defineDocumentAbstractDetailQuantity(invoice);

sumNetWeightInvoiceDetail 'Вес нетто, кг' = ABSTRACT NUMERIC[9,3] (InvoiceDetail);
sumNetWeightTonInvoiceDetail 'Вес нетто, т' (d) = round6(sumNetWeightInvoiceDetail(d) / 1000);
@defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг'); 
  
sumGrossWeightInvoiceDetail 'Вес брутто, кг' = ABSTRACT NUMERIC[9,3] (InvoiceDetail);
sumGrossWeightTonInvoiceDetail 'Вес брутто, т' (d) = round6(sumGrossWeightInvoiceDetail(d) / 1000);
@defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');

@defineDocumentAbstractDetailQuantityPrefix(invoice, pack, ' (упаковок)');

@defineDocumentHeaderQuantity(invoice);
@defineDocumentHeaderSkuQuantity(invoice, sku);

@defineDocumentAbstractHeaderCurrency (invoice);

@defineDocumentAbstractDetailPrice(invoice);
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, , );
@defineDocumentHeaderSum(invoice);
@defineDocumentHeaderItemQuantityPrefix(invoice, , );

@defineDocumentAbstractDetailVAT(invoice, , );
@defineDocumentAbstractDetailVATDataSumCustom (invoiceDetail, invoice);

@defineDocumentHeaderVATSum(invoice, invoice);

notNullInvoiceVAT 'В накладной должен быть задан НДС' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES notNullInvoiceVAT();
EXTEND DESIGN options { commons { ADD PROPERTY(notNullInvoiceVAT()); } }

CONSTRAINT notNullInvoiceVAT() AND isItemSku(skuInvoiceDetail(detail)) AND isPostedInvoice(invoiceInvoiceDetail(detail)) AND NOT valueVATInvoiceDetail(detail)
    MESSAGE 'Не задан НДС для строки товара';

@defineDocumentAbstractDetailNote (InvoiceDetail);

@defineDocumentAbstractHeaderDescription(Invoice);
@defineDocumentDetailDescription(invoice, InvoiceDetail);

shortDescriptionInvoice (invoice) = [= FORMULA VARSTRING[30] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT)'] (
                                               seriesNumberInvoice(invoice), dateInvoice(invoice));

extraDescriptionInvoiceDetail 'Доп. наименование' (invoiceDetail) = ABSTRACT VARSTRING[1500] (InvoiceDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

editInvoice 'Редактировать' = ABSTRACT ACTION LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

inInvoice 'Приходная' = ABSTRACT BOOLEAN (Invoice);
inInvoiceDetail 'Приходная' (d) = inInvoice(invoiceInvoiceDetail(d)); 
outInvoice 'Расходная' (invoice) = invoice IS Invoice AND NOT inInvoice(invoice);
outInvoiceDetail 'Расходная' (d) = outInvoice(invoiceInvoiceDetail(d)); 
// наш склад
stockInvoiceDetail = ABSTRACT Stock(InvoiceDetail) PERSISTENT;   
nameStockInvoiceDetail 'Склад' (d) = nameStock(stockInvoiceDetail(d));

operationInvoice = ABSTRACT Operation.Operation(Invoice);
nameOperationInvoice 'Операция' (invoice) = Operation.nameOperation(operationInvoice(invoice));

createdTimeInvoice 'Время создания'= ABSTRACT DATETIME (Invoice) IN created;
createdUserInvoice = ABSTRACT CustomUser (Invoice);
createdNameUserInvoice 'Создан пользователем' (o) = nameContact(createdUserInvoice(o)) MINCHARWIDTH 10 PREFCHARWIDTH 20;

//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp, supplierFilter, customerFilter)

    CLASS ABSTRACT Invoice 'Накладная'###sign : Invoice.Invoice;
    CLASS ABSTRACT InvoiceDetail 'Строка накладной'###sign : Invoice.InvoiceDetail;

    CLASS UserInvoice 'Накладная (польз.)'###sign : Invoice;
    CLASS UserInvoiceDetail 'Строка накладной (польз.)'###sign : InvoiceDetail;

    GROUP invoice 'Информация о накладной' : base;

    @defineDocumentInterface(invoice);
    @deriveDocumentHeaderTimePrefix(UserInvoice, );
    
    Invoice.createdTimeInvoice (invoice) += createdTimeUserInvoice(invoice) IF invoice IS UserInvoice;
    Invoice.createdUserInvoice (invoice) += createdUserUserInvoice(invoice) IF invoice IS UserInvoice;    
    
    @defineExternalizable(userInvoice, VARSTRING[100]);
    @defineExternalizable(userInvoiceDetail, VARSTRING[100]);
                                                               
    Invoice.invoiceInvoiceDetail (detail) += invoiceInvoiceDetail(detail);
    Invoice.dateInvoice (invoice) += dateInvoice(invoice);
    Invoice.timeInvoice (invoice) += timeInvoice(invoice);

    @defineDocumentInterfaceTimePrefix(invoice, before, ' документа (до)');
    @deriveDocumentHeaderTimePrefix(UserInvoice, before);

    @defineDocumentInterfaceNumber(invoice);
    Invoice.numberInvoice (invoice) += numberInvoice(invoice);
    Invoice.seriesInvoice (invoice) += seriesInvoice(invoice);
    invoiceNumber (number) = GROUP MAX invoice BY Invoice.numberInvoice(invoice);

    @defineNumeratedDefault(UserInvoice, 'Накладные'###sign, 'ПС');

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    Invoice.supplierInvoice(invoice) += supplierInvoice(invoice);
    Invoice.customerInvoice(invoice) += customerInvoice(invoice);

    isCompanySupplierInvoiceDetail 'Приход от компании' (d) = isCompanyLegalEntity(supplierInvoiceDetail(d)); 

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    Invoice.supplierStockInvoice(invoice) += supplierStockInvoice(invoice);
    Invoice.customerStockInvoice(invoice) += customerStockInvoice(invoice);
    Invoice.dataSupplierStockInvoiceDetail(detail) += dataSupplierStockInvoiceDetail(detail);
    Invoice.dataCustomerStockInvoiceDetail(detail) += dataCustomerStockInvoiceDetail(detail);
    Invoice.stockInvoiceDetail(detail) += stockProp###StockInvoiceDetail(detail);
    CONSTRAINT supplierUserInvoice(userInvoice) AND supplierStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(supplierUserInvoice(userInvoice), supplierStockUserInvoice(userInvoice))
        CHECKED BY supplierStockUserInvoice
            MESSAGE 'Поставщик и склад поставщика для накладной не имеют связи';
    CONSTRAINT customerUserInvoice(userInvoice) AND customerStockUserInvoice(userInvoice) AND NOT
    inLegalEntityStock(customerUserInvoice(userInvoice), customerStockUserInvoice(userInvoice))
        CHECKED BY customerStockUserInvoice
            MESSAGE 'Покупатель и склад покупателя для накладной не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    Invoice.isPostedInvoice (invoice) += isPostedInvoice(invoice);
    
    @defineDocumentInterfaceClosed(invoice);
    Invoice.isClosedInvoice (invoice) += isClosedInvoice(invoice);    

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);
    Invoice.descriptionInvoice(invoice) += descriptionInvoice(invoice);    

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    Invoice.currencyInvoice(invoice) += currencyInvoice(invoice);

    @defineDocumentInterfaceContract(Invoice, contractSku, supplier, customer,
                                     'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной',
                                     'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной');

    @defineDocumentInterfaceHeaderAgreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplierUserInvoice, customerUserInvoice);
    noAgreementUserInvoice (invoice) = invoice IS UserInvoice AND NOT agreementUserInvoice(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    Invoice.skuInvoiceDetail(detail) += skuInvoiceDetail(detail);

    isStockSkuInvoiceDetail (invoiceDetail) = isStockSku(skuInvoiceDetail(invoiceDetail));
    isStockSkuUserInvoiceDetail (userInvoiceDetail) = isStockSku(skuUserInvoiceDetail(userInvoiceDetail));

    isChargeSkuInvoiceDetail (invoiceDetail) = isChargeSku(skuInvoiceDetail(invoiceDetail));
    isChargeSkuUserInvoiceDetail (userInvoiceDetail) = isChargeSku(skuUserInvoiceDetail(userInvoiceDetail));

    @defineDocumentInterfaceDetailQuantity(invoice);
    Invoice.quantityInvoiceDetail(detail) += quantityInvoiceDetail(detail);

    @defineDocumentDetailGrossWeight(invoice, sku);

    @defineDocumentInterfaceDetailPrice(invoice); // объявляем цену без НДС
    Invoice.priceInvoiceDetail(detail) += priceInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, , ); // объявляем шкалу
    overVATUserInvoiceDetail = ABSTRACT Range (UserInvoiceDetail); 
    // запись задана после объявления формы
    @deriveDocumentDetailValueVAT(userInvoice); // записываем значение ставки

    Invoice.VATInvoiceDetail(detail) += VATInvoiceDetail(detail);
    Invoice.valueVATInvoiceDetail(detail) += valueVATInvoiceDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (invoice, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(userInvoice);
    @defineDocumentDetailNumberVATOnChange(userInvoice, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userInvoice);
    @defineDocumentDetailInvoicePriceVATOnChange(userInvoice);

    @defineDocumentInterfacePriceListType(invoice); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userInvoice); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentInterfaceDetailDataSum(invoice); // объявляем сумму без НДС
    @deriveDocumentDetailSum(userInvoice, quantity);
    Invoice.sumInvoiceDetail(detail) += sumInvoiceDetail(detail);

    @defineDocumentInterfaceDetailVATDataSum (invoice, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userInvoice); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum(userInvoice, invoice); // записываем сумму с НДС

    Invoice.VATSumInvoiceDetail(detail) += VATSumInvoiceDetail(detail);
    Invoice.invoiceSumInvoiceDetail(detail) += invoiceSumInvoiceDetail(detail);

    @defineDocumentInterfaceHeaderVATSum(invoice, invoice);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentInterfaceHeaderItemQuantity(invoice);
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);

    @defineDocumentInterfaceHeaderItemSum (invoice, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (invoice, , ); //-- сумма поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum(invoice, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)

    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);
    //-- вес
    sumNetWeightInvoiceDetail 'Вес нетто, кг' = ABSTRACT NUMERIC[9,3] (InvoiceDetail);
    sumNetWeightUserInvoiceDetail 'Вес нетто, кг' = DATA NUMERIC[9,3] (UserInvoiceDetail);
    sumNetWeightInvoiceDetail(d) += sumNetWeightUserInvoiceDetail(d);
    Invoice.sumNetWeightInvoiceDetail(d) += sumNetWeightInvoiceDetail(d);
    
    sumGrossWeightInvoiceDetail 'Вес брутто, кг' = ABSTRACT NUMERIC[9,3] (InvoiceDetail);        
    sumGrossWeightUserInvoiceDetail 'Вес брутто, кг' = DATA NUMERIC[9,3] (UserInvoiceDetail);
    sumGrossWeightInvoiceDetail(d) += sumGrossWeightUserInvoiceDetail(d);
    Invoice.sumGrossWeightInvoiceDetail(d) += sumGrossWeightInvoiceDetail(d);
       
    sumNetWeightUserInvoiceDetail(d) <- netWeightSku(skuUserInvoiceDetail(d)) * quantityUserInvoiceDetail(d)
        WHEN CHANGED(skuUserInvoiceDetail(d)) OR CHANGED(quantityUserInvoiceDetail(d));
    sumGrossWeightUserInvoiceDetail(d) <- grossWeightSku(skuUserInvoiceDetail(d)) * quantityUserInvoiceDetail(d)
        WHEN CHANGED(skuUserInvoiceDetail(d)) OR CHANGED(quantityUserInvoiceDetail(d));
                  
    @defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');       
    @defineDocumentHeaderNetWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг');  
    @defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');
    @defineDocumentHeaderGrossWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг'); 
     
        
    countInvoiceDetailStockInvoice (stock, invoice) = GROUP SUM 1 BY stockProp###stock###invoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    @implementDocumentSupplierCustomer(invoice);
    
    @defineMovementSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(invoiceDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineMovementPriceSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара
//    fillDocumentInvoice 'Подбор документа' = ACTION (userInvoice) {
//        FORM documents MODAL;
//        IF formResult() == FormResult.ok THEN {
//            LOCAL chosenDocument = Document();
//            ASSIGN chosenDocument() <- chosenObject('d');
//            FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = UserInvoiceDetail DO {
//                ASSIGN userInvoiceUserInvoiceDetail(i) <- userInvoice;
//                ASSIGN skuInvoiceDetail(i) <- skuDocumentDetail(documentDetail);
//                ASSIGN quantityInvoiceDetail(i) <- quantityDocumentDetail(documentDetail);
//                ASSIGN priceInvoiceDetail(i) <- priceDocumentDetail(documentDetail);
//            }
//        }
//    } TOOLBAR;
    @defineDocumentDialogSupplierCustomerStock(userInvoice, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userInvoiceDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userInvoice, supplierFilter, customerFilter);

// --------------------------- Формы ---------------------------------- //
    backgroundSkuUserInvoiceDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundVATUserInvoiceDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
        
    editInvoice 'Редактировать' = ABSTRACT ACTION LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Invoice.editInvoice (invoice) += editInvoice(invoice);

    editSkuUserInvoiceDetail 'Редактировать SKU' (d) = editSku(skuUserInvoiceDetail(d));
    FORM userInvoice 'Накладная'###sign
        OBJECTS i = UserInvoice FIXED PANEL
        PROPERTIES (i) isPostedUserInvoice, nameSupplierUserInvoice ON CHANGE changeSupplier###supplierFilter###userInvoice(i),
                       nameSupplierStockUserInvoice ON CHANGE changeSupplierStock###supplierFilter###userInvoice(i),
                       nameCustomerUserInvoice ON CHANGE changeCustomer###customerFilter###userInvoice(i),
                       nameCustomerStockUserInvoice ON CHANGE changeCustomerStock###customerFilter###userInvoice(i),
                       nameNumeratorUserInvoice, numberUserInvoice, seriesUserInvoice, dateUserInvoice, timeUserInvoice,
                       nameCurrencyUserInvoice, nameAgreementUserInvoice, namePriceListTypeUserInvoice SHOWIF noAgreementUserInvoice(i), noteUserInvoice,
                       seriesNumberContractSkuUserInvoice, isCommissionUserInvoice
        PROPERTIES (i) countUserInvoiceDetailUserInvoice, quantityUserInvoiceDetailUserInvoice, sumUserInvoiceDetailUserInvoice,
                       VATSumUserInvoiceDetailUserInvoice, invoiceSumUserInvoiceDetailUserInvoice

        OBJECTS d = UserInvoiceDetail
        PROPERTIES (d) indexUserInvoiceDetail
        PROPERTIES (d) ON EDIT editSkuUserInvoiceDetail(d) BACKGROUND backgroundSkuUserInvoiceDetail(d) idBarcodeSkuUserInvoiceDetail, 
                       nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail
        PROPERTIES (d) quantityUserInvoiceDetail, namePriceListTypeUserInvoiceDetail,
                       priceUserInvoiceDetail ON CHANGE changePriceUserInvoiceDetail(d), sumUserInvoiceDetail,
                       numberVATUserInvoiceDetail ON CHANGE changeNumberVATUserInvoiceDetail(d) BACKGROUND backgroundVATUserInvoiceDetail(d),
                       valueVATUserInvoiceDetail ON CHANGE changeValueVATUserInvoiceDetail(d) BACKGROUND backgroundVATUserInvoiceDetail(d),
                       invoicePriceUserInvoiceDetail ON CHANGE changeInvoicePriceUserInvoiceDetail(d),
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, sumNetWeightUserInvoiceDetail BACKGROUND backgroundSkuUserInvoiceDetail(d), 
                       sumGrossWeightUserInvoiceDetail BACKGROUND backgroundSkuUserInvoiceDetail(d), ADDOBJ, deleteid=DELETESESSION
        ORDER BY indexUserInvoiceDetail(d)

        PROPERTIES(i) TODRAW d fillDocumentInvoice, addDetailDialogSkuStockUserInvoiceDetailUserInvoice,
                               addDetailInputBarcodeUserInvoiceDetailUserInvoice, deleteUserInvoiceDetailUserInvoice
        FILTERS userInvoiceUserInvoiceDetail(d) == i

        EVENTS
            ON OK prePostUserInvoice(i)

//        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
//                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
//                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail

        EDIT UserInvoice OBJECT i
    ;

    DESIGN userInvoice FROM DEFAULT{
        main {
            preferredSize = (1024, 768);
            NEW header.box {
                type = CONTAINERH;

                NEW headerParams {
                    fill = 1;

                    ADD i.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            ADD PROPERTY(isPostedUserInvoice(i));
                        }
                        NEW second { 
                            type = CONTAINERH;
                            ADD PROPERTY(nameNumeratorUserInvoice(i));
                            ADD PROPERTY(numberUserInvoice(i));
                            ADD PROPERTY(seriesUserInvoice(i));
                            ADD PROPERTY(dateUserInvoice(i));
                            ADD PROPERTY(timeUserInvoice(i));
                        }    
                    }
                    NEW headerLegalEntity {
                        type = CONTAINERH;
                        NEW headerSupplier {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            ADD PROPERTY(nameSupplierUserInvoice(i));
                            ADD PROPERTY(nameSupplierStockUserInvoice(i));
                        }
                        NEW headerCustomer {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            ADD PROPERTY(nameCustomerUserInvoice(i));
                            ADD PROPERTY(nameCustomerStockUserInvoice(i));
                        }
                    }
                    NEW headerTabbedPane {
                        alignment = STRETCH;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            NEW headerContract {
                                type = CONTAINERH;
                                caption = 'Договор';
                                ADD PROPERTY(seriesNumberContractSkuUserInvoice(i));
                                ADD PROPERTY(isCommissionUserInvoice(i));
                            }
                            ADD i.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = COLUMNS;
                            columns = 4;
//                            minimumSize = (500, -1);
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = CONTAINERH;
                            columns = 2;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = COLUMNS;
                            columns = 2;
//                            minimumSize = (500, -1);
                        }
                    }
                }
                ADD i.documentSum {
                    columns = 1;
                }
            }
            NEW specification.box {
                fill = 1;
                ADD d.box {
                    caption = 'Спецификация';
                }
            }

            ADD functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}
        }
    }

    WHEN SESSION FORMS userInvoice
        (CHANGED(skuUserInvoiceDetail(detail)) OR CHANGED (supplierStockUserInvoiceDetail(detail)) OR 
         CHANGED(dateUserInvoiceDetail(detail)) OR CHANGED(overVATUserInvoiceDetail(detail))) AND NOT CHANGED(VATUserInvoiceDetail(detail)) DO {
            VATUserInvoiceDetail(detail) <- OVERRIDE VATSkuCountryDate (skuUserInvoiceDetail(detail), countryStock(supplierStockUserInvoiceDetail(detail)), dateUserInvoiceDetail(detail)),
                                                     overVATUserInvoiceDetail(detail);
        } // записываем шкалу
    // Добавляем подбор товаров / партий
    @defineDocumentSkuPriceListTypeAgreement(userInvoice, stockProp);
    @extendFormDocumentSkuPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);

    addUserInvoice 'Добавить' = ACTION ADDFORM UserInvoice;
    editUserInvoice 'Редактировать' (userInvoice) = ACTION EDITFORM UserInvoice;
    editInvoice (invoice) += editUserInvoice(invoice);

    overCopyInvoice = ABSTRACT ACTION LIST (Invoice, UserInvoice);
    overCopyInvoiceDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, InvoiceDetail);
    
    copyInvoice 'Копировать' = ACTION (invoice) NEWSESSION {
        FOR ADDOBJ i = UserInvoice DO {
            ASSIGN supplierUserInvoice(i) <- supplierInvoice(invoice);
            ASSIGN supplierStockUserInvoice(i) <- supplierStockInvoice(invoice);
            ASSIGN customerUserInvoice(i) <- customerInvoice(invoice);
            ASSIGN customerStockUserInvoice(i) <- customerStockInvoice(invoice);
            ASSIGN contractSkuUserInvoice(i) <- contractSkuInvoice(invoice);
            ASSIGN isCommissionUserInvoice(i) <- isCommissionInvoice(invoice);
            ASSIGN currencyUserInvoice(i) <- currencyInvoice(invoice);
            ASSIGN agreementUserInvoice(i) <- agreementInvoice(invoice);
            ASSIGN priceListTypeUserInvoice(i) <- priceListTypeInvoice(invoice);
            ASSIGN noteUserInvoice(i) <- noteInvoice(invoice);
            //ASSIGN createShipmentUserInvoice(i) <- createShipmentUserInvoice(invoice);

            EXEC overCopyInvoice(invoice, i);

            FOR invoiceInvoiceDetail(invoiceDetail) == invoice DO {
                FOR ADDOBJ d=UserInvoiceDetail DO {
                    ASSIGN userInvoiceUserInvoiceDetail(d) <- i;
                    ASSIGN skuUserInvoiceDetail(d) <- skuInvoiceDetail(invoiceDetail);
                    ASSIGN quantityUserInvoiceDetail(d) <- quantityInvoiceDetail(invoiceDetail);
                    ASSIGN priceUserInvoiceDetail(d) <- priceInvoiceDetail(invoiceDetail);
                    ASSIGN data###stockProp###stock###userInvoiceDetail(d) <- data###stockProp###stock###invoiceDetail(invoiceDetail);
                    
                    EXEC overCopyInvoiceDetail(d, invoiceDetail);
                }
            }

            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopyUserInvoiceDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, UserInvoiceDetail);

    copyInvoiceDetail 'Копировать' = ACTION (detail) {
        FOR ADDOBJ d = UserInvoiceDetail DO {          

            userInvoiceUserInvoiceDetail(d) <- userInvoiceUserInvoiceDetail(detail);
            skuUserInvoiceDetail(d) <- skuUserInvoiceDetail(detail);
            quantityUserInvoiceDetail(d) <- quantityUserInvoiceDetail(detail);
            priceUserInvoiceDetail(d) <- priceUserInvoiceDetail(detail);
            data###stockProp###stock###userInvoiceDetail(d) <- data###stockProp###stock###userInvoiceDetail(detail);
            priceListType###userInvoiceDetail(d) <- priceListType###userInvoiceDetail(detail);
            invoicePrice###userInvoiceDetail(d) <- invoicePrice###userInvoiceDetail(detail);
            
            overCopyUserInvoiceDetail(d, detail);                              
        }
    } TOOLBAR;
    
    EXTEND FORM userInvoice 
        PROPERTIES(d) copyInvoiceDetail FORCE PANEL 
    ;

    isUserOpenedInvoice(i)=  isOpenedInvoice(i) AND isUserInvoice(i);
    
    filterInvoiceDateFrom 'Дата с' = DATA SESSION DATE ();
    filterDateFromInvoice (i) = dateInvoice(i) >= filterInvoiceDateFrom() OR (i IS Invoice AND NOT filterInvoiceDateFrom());      
    
    filterInvoiceDateTo 'Дата по' = DATA SESSION DATE ();
    filterDateToInvoice (i) = dateInvoice(i) <= filterInvoiceDateTo() OR (i IS Invoice AND NOT filterInvoiceDateTo());      
    
    filterInvoiceCustomer  = DATA SESSION LegalEntity ();
    nameFilterInvoiceCustomer 'Покупатель' = nameLegalEntity(filterInvoiceCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerInvoice (i) = customerInvoice(i) == filterInvoiceCustomer() OR (i IS Invoice AND NOT filterInvoiceCustomer());    

    filterInvoiceCustomerStock  = DATA SESSION Stock ();
    nameFilterInvoiceCustomerStock 'Склад покупателя' = nameStock(filterInvoiceCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStockInvoice (i) = customerStockInvoice(i) == filterInvoiceCustomerStock() OR (i IS Invoice AND NOT filterInvoiceCustomerStock());  

    filterInvoiceSupplier = DATA SESSION LegalEntity ();
    nameFilterInvoiceSupplier 'Поставщик' = nameLegalEntity(filterInvoiceSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierInvoice (i) = supplierInvoice(i) == filterInvoiceSupplier() OR (i IS Invoice AND NOT filterInvoiceSupplier());      

    filterInvoiceSupplierStock  = DATA SESSION Stock ();
    nameFilterInvoiceSupplierStock 'Склад поставщика' = nameStock(filterInvoiceSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStockInvoice (i) = supplierStockInvoice(i) == filterInvoiceSupplierStock() OR (i IS Invoice AND NOT filterInvoiceSupplierStock());      
    
    FORM invoices 'Накладные' TITLE 'Накладные'###sign
    
        PROPERTIES() filterInvoiceDateFrom, filterInvoiceDateTo, nameFilterInvoiceSupplier, nameFilterInvoiceSupplierStock, nameFilterInvoiceCustomer, nameFilterInvoiceCustomerStock
        
        OBJECTS i = Invoice
        PROPERTIES (i) READONLYIF isReadonly()
                                isClosedInvoice, isPostedInvoice,
                                numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, nameAgreementInvoice,
                                seriesNumberContractSkuInvoice, isCommissionInvoice
        PROPERTIES (i) READONLY countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice
        PROPERTIES (i) READONLYIF isReadonly() noteInvoice
        PROPERTIES (i) READONLY FORCE PANEL createdNameUserUserInvoice, createdTimeUserInvoice, createdHostnameComputerUserInvoice, 
                                            postedNameUserUserInvoice, postedTimeUserInvoice, postedHostnameComputerUserInvoice 

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) editInvoice SHOWIF isOpenedInvoice(i), copyInvoice
        PROPERTIES (i) closeUserInvoice SHOWIF isOpenedUserInvoice(i), openUserInvoice SHOWIF isClosedUserInvoice(i)
        PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF isUserOpenedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
        PROPERTIES (d) READONLY quantityInvoiceDetail, namePriceListTypeInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail
        ORDER BY indexInvoiceDetail(d)

        FILTERS invoiceInvoiceDetail(d) == i
        FILTERS filterDateFromInvoice(i), 
                filterDateToInvoice(i),
                filterSupplierInvoice(i),
                filterSupplierStockInvoice(i),
                filterCustomerInvoice(i),
                filterCustomerStockInvoice(i)
                
        DIALOG Invoice OBJECT i
    ;

    DESIGN invoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            PROPERTY (deletei) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                fill = 1;

                type = SPLITV;
                NEW filtersBox {                       
                    fill = 1;
                    NEW topFilters {
                        caption = 'Фильтры';
                        type = CONTAINERH;          
                        ADD PROPERTY(filterInvoiceDateFrom());
                        ADD PROPERTY(filterInvoiceDateTo());
                        ADD PROPERTY(nameFilterInvoiceSupplier());
                        ADD PROPERTY(nameFilterInvoiceSupplierStock());
                        ADD PROPERTY(nameFilterInvoiceCustomer());
                        ADD PROPERTY(nameFilterInvoiceCustomerStock());                   
                    }
                    ADD i.box {
                        fill = 1;
                    }
                }    

                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    ADD d.box {
                        fill = 1;
                        caption = 'Спецификация';
                    }
                    NEW documentHistory {
                        caption = 'История';
                        type = CONTAINERV;

                        ADD i.created;
                        ADD i.posted;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                    NEW actionContainer {
                        caption = 'Действия';
                        type = CONTAINERH;
                        NEW createdContainer {
                            caption = 'Создание на основе';
                            type = CONTAINERV;

                            ADD PROPERTY(copyInvoice(i)) { caption = 'Накладная'###sign;}
                        }
                        NEW machineryContainer {
                            caption = 'Загрузка';
                            type = CONTAINERV;
                        }
                    }
                }
            }
        }
    }
    @extendFormEditable(invoices);
    @defineFilterIsOpened (invoice, invoices, i); 
    
    FORM invoiceDetails 'Продажа'
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail,
                               descriptionInvoiceDetail,
                               quantityInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                               numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                               name###stockProp###stock###invoiceDetail

        DIALOG InvoiceDetail OBJECT d
    ;

    backgroundVATUserInvoiceDetail(d) += WHEN isItemSku(skuUserInvoiceDetail(d)) AND NOT 
        (valueVATUserInvoiceDetail(d) == valueVATSkuCountryDate(skuUserInvoiceDetail(d), countryStock(customerStockUserInvoiceDetail(d)), dateUserInvoiceDetail(d))) 
            THEN RGB(255,0,0); 
            
    editInvoiceDetail 'Редактировать' = ABSTRACT ACTION LIST (InvoiceDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    editUserInvoiceDetail(d) = ACTION (d) NEWSESSION {
        FORM userInvoice OBJECTS i = userInvoiceUserInvoiceDetail(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    editInvoiceDetail(d) += editUserInvoiceDetail(d);        
END

// -------------------------- Метакод по добавлению партий ------------------------- //

META defineInvoiceBatch(stockProp)
    @defineDocumentInterfaceDetailBatch(invoice, batch);
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
        batchUserInvoiceDetail(d) <- batchUserInvoiceDetail(detail);
    }  
    overCopyInvoiceDetail(d, detail) += ACTION (d, detail) {      
        batchUserInvoiceDetail(d) <- batchUserInvoiceDetail(detail);
    }  
    
    // Пишем в цену инвойса из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userInvoice, stockProp###stock, userInvoice);

    // История по правой кнопке
    @defineBalancesBatch(invoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeAgreement(userInvoice, stockProp);
    @extendFormDocumentBatchPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);
    
    // Подбор документа
    @implementDocumentBatch(invoice);
END

// Партии с диалогом по складам
META defineInvoiceBatchDialogStock(stockProp)

    changeBatchUserInvoiceDetail = ACTION (userInvoiceDetail) {
        FORM dialogBatchStock OBJECTS st = stockProp###userInvoiceDetail(userInvoiceDetail),
                                 t = dateTimeUserInvoiceDetail(userInvoiceDetail),
                                 sk = skuUserInvoiceDetail(userInvoiceDetail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            batchUserInvoiceDetail(userInvoiceDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batchUserInvoiceDetail(userInvoiceDetail) <- NULL;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) nameBatchUserInvoiceDetail ON CHANGE changeBatchUserInvoiceDetail(d) AFTER shortNameUOMSkuUserInvoiceDetail(d)
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY nameBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d);
END

// Партии на приходе
META defineInvoiceBatchDialog(dumb)
    changeBatchUserInvoiceDetail = ACTION (userInvoiceDetail) {
        FORM dialogBatch OBJECTS sk = skuUserInvoiceDetail(userInvoiceDetail) MODAL SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            batchUserInvoiceDetail(userInvoiceDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batchUserInvoiceDetail(userInvoiceDetail) <- NULL;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) nameBatchUserInvoiceDetail ON CHANGE changeBatchUserInvoiceDetail(d) AFTER shortNameUOMSkuUserInvoiceDetail(d)
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY nameBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d);
END

META defineInvoiceReturn(NS, NSR, stockProp)
    invoiceDetailInvoiceDetail (invoiceDetail) = ABSTRACT NS.InvoiceDetail (NSR.InvoiceDetail) PERSISTENT;
    invoiceDetailUserInvoiceDetail (userInvoiceDetail) = DATA NS.InvoiceDetail (NSR.UserInvoiceDetail);
    invoiceDetailInvoiceDetail(detail) += invoiceDetailUserInvoiceDetail(detail);

    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM NSR.quantityInvoiceDetail(invoiceDetail) BY invoiceDetailInvoiceDetail(invoiceDetail) PERSISTENT;
    returnQuantityInvoiceDetailInvoice 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantityInvoiceDetail(invoiceDetail) BY NS.invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    CONSTRAINT returnQuantityInvoiceDetail(detail) > NS.quantityInvoiceDetail(detail)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT NS.skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.skuUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT NS.supplierInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.supplierUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT NS.customerInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) != NSR.customerUserInvoiceDetail(detail) CHECKED BY invoiceDetailUserInvoiceDetail
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';

    descriptionInvoiceDetailInvoiceDetail 'Основание' (invoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailInvoiceDetail(invoiceDetail));
    descriptionInvoiceDetailUserInvoiceDetail 'Основание' (userInvoiceDetail) = NS.descriptionInvoiceDetail(invoiceDetailUserInvoiceDetail(userInvoiceDetail));

//    NSR.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
//                                                    NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
//                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
//                                                    prevPriceBPriceListTypeBatchStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
//                                                                                              NSR.batchInvoiceDetail(detail),
//                                                                                              NSR.stockProp###invoiceDetail(detail),
//                                                                                              NSR.dateTimeInvoiceDetail(detail))
//                                                 ELSE
//                                                    prevPriceBPriceListTypeSkuStockDateTime(NSR.priceListTypeInvoiceDetail(detail),
//                                                                                            NSR.skuInvoiceDetail(detail),
//                                                                                            NSR.stockProp###invoiceDetail(detail),
//                                                                                            NSR.dateTimeInvoiceDetail(detail))
//                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.batchInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.skuInvoiceDetail(detail)) OR
//                                             CHANGED(NSR.stockProp###invoiceDetail(detail)) OR
//                                             CHANGED(NSR.dateTimeInvoiceDetail(detail));

    overRecalculatedPriceUserInvoiceDetail = ABSTRACT ACTION LIST (NSR.UserInvoiceDetail);
    recalculatedPriceUserInvoiceDetail(detail) = ACTION (detail) {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
        IF invoiceDetailUserInvoiceDetail(detail) THEN {
            ASSIGN NSR.priceUserInvoiceDetail(detail) <-  NS.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            ASSIGN NSR.invoicePriceUserInvoiceDetail(detail) <-  NS.invoicePriceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            ASSIGN NSR.VATUserInvoiceDetail(detail) <- NS.VATInvoiceDetail(invoiceDetailUserInvoiceDetail(detail));
            EXEC overRecalculatedPriceUserInvoiceDetail(detail);
        }
    }
        WHEN SESSION FORMS userInvoice
            CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
            CHANGED(NSR.batchInvoiceDetail(detail)) OR
            CHANGED(NSR.priceListTypeInvoiceDetail(detail)) OR
            CHANGED(NSR.skuInvoiceDetail(detail)) OR
            CHANGED(NSR.stockProp###invoiceDetail(detail)) OR
            CHANGED(NSR.dateTimeInvoiceDetail(detail))
                DO EXEC recalculatedPriceUserInvoiceDetail(detail);


    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetailUserInvoiceDetail AFTER shortNameUOMSkuUserInvoiceDetail(d);
    EXTEND FORM NS.userInvoice PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeUserInvoiceDetail(d);

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetailInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d);
    EXTEND FORM NS.invoices PROPERTIES (d) READONLY returnQuantityInvoiceDetail BEFORE namePriceListTypeInvoiceDetail(d);

    NSR.batchUserInvoiceDetail(detail) <- NS.maxBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) AND NS.countBatchInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) == 1;

    CONSTRAINT batchUserInvoiceDetail(detail) AND invoiceDetailUserInvoiceDetail(detail) AND
               NOT countShipmentDetailInvoiceDetailBatch(invoiceDetailUserInvoiceDetail(detail), batchUserInvoiceDetail(detail))
               CHECKED BY batchUserInvoiceDetail, invoiceDetailUserInvoiceDetail
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
END

META defineInvoiceDestination(fromLegalEntity, toLegalEntity)
    Invoice.fromInvoice(invoice) += fromLegalEntity##Invoice(invoice);
    Invoice.toInvoice(invoice) += toLegalEntity##Invoice(invoice);
    //Invoice.dataFromLegalEntityInvoiceDetail(detail) += data###fromLegalEntity##InvoiceDetail(detail);
    //Invoice.dataToLegalEntityInvoiceDetail(detail) += data###toLegalEntity##InvoiceDetail(detail);
END


META defineInvoiceStockDestination(fromStock, toStock)
    Invoice.fromStockInvoice(invoice) += fromStock##Invoice(invoice);
    Invoice.toStockInvoice(invoice) += toStock##Invoice(invoice);
    Invoice.dataFromStockInvoiceDetail(detail) += data###fromStock##InvoiceDetail(detail);
    Invoice.dataToStockInvoiceDetail(detail) += data###toStock##InvoiceDetail(detail);
END

// вторая валюта
META defineInvoiceHomeCurrency(dumb)

    backgroundHomeCurrencyInvoice 'Цвет' (invoice) = RGB(255, 224, 128) IF invoice IS Invoice;

    isHomeCurrencyInvoice 'Конвертация' = ABSTRACT BOOLEAN(Invoice) IN documentPrm;
    isHomeCurrencyUserInvoice 'Конвертация' = DATA BOOLEAN(UserInvoice) IN documentPrm;
    isHomeCurrencyInvoice(i) += isHomeCurrencyUserInvoice(i);

    homeCurrencyInvoice = ABSTRACT Currency(Invoice);
    homeCurrencyUserInvoice = DATA Currency(UserInvoice);
    homeCurrencyInvoice(i) += homeCurrencyUserInvoice(i);
    nameHomeCurrencyInvoice 'Валюта (конв.)' (i) = nameCurrency(homeCurrencyInvoice(i));

    homeCurrencyUserInvoice(userInvoice) <- currencyLegalEntity(customerUserInvoice(userInvoice)) WHEN CHANGED(customerUserInvoice(userInvoice));

    typeExchangeInvoice = ABSTRACT TypeExchange(Invoice);
    typeExchangeUserInvoice = DATA TypeExchange(UserInvoice);
    typeExchangeInvoice(i) += typeExchangeUserInvoice(i);
    nameTypeExchangeInvoice 'Тип обмена' (i) = nameTypeExchange(typeExchangeInvoice(i));

    CONSTRAINT currencyTypeExchange(typeExchangeUserInvoice(invoice)) != homeCurrencyUserInvoice(invoice)
        CHECKED BY typeExchangeUserInvoice MESSAGE 'Тип обмена должен соответствовать валюте (конв.)';

    dateRateExchangeInvoice 'Дата конвертации' = ABSTRACT DATE(Invoice);
    dateRateExchangeUserInvoice 'Дата конвертации' = DATA DATE(UserInvoice);
    dateRateExchangeInvoice(i) += dateRateExchangeUserInvoice(i);

    dateRateExchangeUserInvoice(i) <- dateInvoice(i) WHEN CHANGED (dateInvoice(i));

    rateExchangeInvoice 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) PERSISTENT;
    rateExchangeUserInvoice 'Курс' = DATA NUMERIC[14,6](UserInvoice);
    rateExchangeInvoice(i) += rateExchangeUserInvoice(i);

    WHEN SESSION FORMS userInvoice CHANGED (dateRateExchangeUserInvoice(i)) OR
                                   CHANGED (typeExchangeUserInvoice(i)) OR
                                   CHANGED (currencyUserInvoice(i)) DO {
        rateExchangeUserInvoice(i) <- rateOnTypeExchangeCurrencyDate(typeExchangeUserInvoice(i),
                                                                   currencyUserInvoice(i),
                                                                   dateRateExchangeUserInvoice(i));
    }

    rateExchangeInvoiceDetail 'Курс' = ABSTRACT NUMERIC[14,6](InvoiceDetail) PERSISTENT;

    dataRateExchangeUserInvoiceDetail 'Курс' = DATA NUMERIC[14,6](UserInvoiceDetail);
    rateExchangeUserInvoiceDetail 'Курс' (d) = OVERRIDE rateExchangeUserInvoice(userInvoiceUserInvoiceDetail(d)),  dataRateExchangeUserInvoiceDetail(d);
    rateExchangeInvoiceDetail(d) += rateExchangeUserInvoiceDetail(d);

    homePriceInvoiceDetail 'Цена (конв.)' = ABSTRACT NUMERIC[14,2](InvoiceDetail) PERSISTENT;
    homePriceUserInvoiceDetail 'Цена (конв.)' = DATA NUMERIC[14,2](UserInvoiceDetail);
    homePriceInvoiceDetail(d) += homePriceUserInvoiceDetail(d);
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
        dataRateExchangeUserInvoiceDetail(d) <- dataRateExchangeUserInvoiceDetail(detail);
    }  

    homePriceUserInvoiceDetail(d) <- roundPriceCurrency(priceUserInvoiceDetail(d) *
                                                        rateExchangeUserInvoiceDetail(d),
                                                        homeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(d)))
                                                   WHEN CHANGED (dateUserInvoice(userInvoiceUserInvoiceDetail(d))) OR
                                                        CHANGED (rateExchangeUserInvoiceDetail(d)) OR
                                                        CHANGED (homeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(d))) OR
                                                        CHANGED (priceUserInvoiceDetail(d));

    homeSumInvoiceDetail 'Сумма (конв.)' (d) = quantityInvoiceDetail(d) * homePriceInvoiceDetail(d);
    homeSumUserInvoiceDetail 'Сумма (конв.)' (d) = quantityUserInvoiceDetail(d) * homePriceUserInvoiceDetail(d);

    homeSumInvoiceDetailInvoice 'Сумма (конв.)' (invoice) = GROUP SUM homeSumInvoiceDetail(d)
                                                                  BY invoiceInvoiceDetail(d);
    homeSumUserInvoiceDetailUserInvoice 'Сумма (конв.)' (invoice) = GROUP SUM homeSumUserInvoiceDetail(d)
                                                                          BY userInvoiceUserInvoiceDetail(d);

    EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundHomeCurrencyInvoice(i) BEFORE nameAgreementUserInvoice(i)
                                                                    isHomeCurrencyUserInvoice
        PROPERTIES(i) BACKGROUND backgroundHomeCurrencyInvoice(i) SHOWIF isHomeCurrencyUserInvoice(i)
                                                                    nameHomeCurrencyInvoice, nameTypeExchangeInvoice, dateRateExchangeInvoice, rateExchangeInvoice
        PROPERTIES(d) BACKGROUND backgroundHomeCurrencyInvoice(i) SHOWIF isHomeCurrencyUserInvoice(i) AFTER sumUserInvoiceDetail(d)
                                                                    rateExchangeUserInvoiceDetail, homePriceUserInvoiceDetail, homeSumInvoiceDetail
    ;

    EXTEND DESIGN userInvoice {
        headerExtraParams {
            NEW headerHomeCurrency {
                caption = 'Конвертация';
                type = COLUMNS;
                columns = 1;
                ADD PROPERTY(isHomeCurrencyUserInvoice(i));
                ADD PROPERTY(nameHomeCurrencyInvoice(i));
                ADD PROPERTY(nameTypeExchangeInvoice(i));
                ADD PROPERTY(dateRateExchangeInvoice(i));
                ADD PROPERTY(rateExchangeInvoice(i));
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(d) READONLY BACKGROUND backgroundHomeCurrencyInvoice(i) SHOWIF isHomeCurrencyInvoice(i) AFTER sumInvoiceDetail(d)
                      rateExchangeInvoiceDetail, homePriceInvoiceDetail, homeSumInvoiceDetail
    ;
END

META defineInvoicePayment(dumb)

    addPaymentInvoice 'Оплатить' = ACTION (invoice) {
        ASSIGN currentInContractLedger() <- invoice;
        FOR ADDOBJ p = Payment DO{
            ASSIGN contractPayment(p) <- contractSkuUserInvoice(invoice);
            ASSIGN datePayment(p) <- currentDate();
            ASSIGN timePayment(p) <- currentTime();
            ASSIGN payerPayment(p) <- customerUserInvoice(invoice);
            ASSIGN beneficiaryPayment(p) <- supplierUserInvoice(invoice);
            ASSIGN sumPayment(p) <- invoiceSumUserInvoiceDetailUserInvoice(invoice);
            ASSIGN costOutContractLedgerInContractLedger(p, invoice) <- sumContractPayment(p);
            FORM payment OBJECTS p=p MODAL;
            IF NOT formResult() == FormResult.ok THEN {
                DELETE p;
            }
        }
    }

    editPaymentInvoice 'Редактировать' = ACTION (payment, invoice) {
        ASSIGN currentInContractLedger() <- invoice;
        FORM payment OBJECTS p=payment MODAL;
    }

    EXTEND FORM userInvoice
        OBJECTS pm = Payment
        PROPERTIES(pm) READONLY seriesNumberPayment, dateTimePayment, namePayerPayment, nameBeneficiaryPayment,
                                notePayment, isPostedPayment
        ORDER BY dateTimePayment(pm)
        PROPERTIES(pm, i) costOutContractLedgerInContractLedger
        PROPERTIES TODRAW pm FORCE PANEL TOOLBAR addPaymentInvoice(i), editPaymentInvoice(pm, i)
        PROPERTIES(pm) DELETESESSION

        FILTERGROUP filters
            FILTER 'Платежи по накладной' 'F10' costOutContractLedgerInContractLedger(pm, i) DEFAULT
        FILTERS contractPayment(pm) == contractInContractLedger(i)
    ;

    EXTEND DESIGN userInvoice{
        specification.box{
            NEW paymentContainer{
                caption = 'Платежи';
                ADD pm.box;
            }
        }
    }
END

