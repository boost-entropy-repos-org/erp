MODULE Invoice;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        PriceRound,
        Barcode,
        PriceListType,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        EmployeeStock,
        StockContract,
        StockTax;

CLASS ABSTRACT Invoice 'Накладная' : Document;
CLASS ABSTRACT InvoiceDetail 'Строка накладной' : DocumentDetail;

@defineDocumentAbstract(invoice);
@defineDocumentAbstractNumber(invoice);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, to, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

idCustomerStock(Invoice invoice) = id(customerStock(invoice));
idSupplierStock(Invoice invoice) = id(supplierStock(invoice));

@defineDocumentAbstractDataStock(invoice, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(invoice);
@defineDocumentAbstractClosed(invoice);

overShowEdit = ABSTRACT BOOLEAN (Invoice);
overShowDelete = ABSTRACT BOOLEAN (Invoice);

@defineDocumentAbstractDetailSku(invoice, sku);
INDEX sku(InvoiceDetail d), customerStock(d);

@defineDocumentAbstractDetailBatchCustomInner(invoiceDetail, batch, Batch);

@defineDocumentAbstractDetailQuantity(invoice);

sumNetWeight 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
sumNetWeightTon 'Вес нетто, т' (InvoiceDetail d) = round6(sumNetWeight(d) / 1000);
@defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг'); 
  
sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
sumGrossWeightTon 'Вес брутто, т' (InvoiceDetail d) = round6(sumGrossWeight(d) / 1000);
@defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');

@defineDocumentAbstractDetailQuantityPrefix(invoice, pack, ' (упаковок)');

@defineDocumentHeaderQuantity(invoice);
@defineDocumentHeaderSkuQuantity(invoice, sku);

@defineDocumentAbstractHeaderCurrency (invoice);
@defineDocumentDetailCurrency (invoice, invoiceDetail);

price 'Цена' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;

@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, , );
@defineDocumentHeaderSum(invoice);
@defineDocumentHeaderItemQuantityPrefix(invoice, , );

invoicePrice 'Цена с НДС' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;

@defineDocumentAbstractDetailVAT(invoice, , );
@defineDocumentAbstractDetailVATDataSumCustom (invoiceDetail, invoice);

@defineDocumentHeaderVATSum(invoice, invoice);

notNullInvoiceVAT 'В накладной должен быть задан НДС' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES notNullInvoiceVAT();
DESIGN options { commons { MOVE PROPERTY(notNullInvoiceVAT()); } }

CONSTRAINT notNullInvoiceVAT() AND isItem(sku(InvoiceDetail detail)) AND isPosted(invoice(detail)) AND NOT valueVAT(detail)
    MESSAGE 'Не задан НДС для строки товара';

@defineDocumentAbstractDetailNote (InvoiceDetail);

@defineDocumentAbstractHeaderDescription(Invoice);
@defineDocumentDetailDescription(invoice, InvoiceDetail);

shortDescription (Invoice invoice) = seriesNumber(invoice) + ' от ' + date(invoice);

extraDescription 'Доп. наименование' (invoiceDetail) = ABSTRACT VARSTRING[1500] (InvoiceDetail) MINCHARWIDTH 30 PREFCHARWIDTH 80;

edit 'Редактировать' = ACTION ABSTRACT LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

@defineDocumentAbstractHeaderAgreement(invoice);

in 'Приходная' = ABSTRACT BOOLEAN (Invoice) PERSISTENT;
in 'Приходная' (InvoiceDetail d) = in(invoice(d)); 
out 'Расходная' (Invoice invoice) = invoice IS Invoice AND NOT in(invoice) PERSISTENT;
out 'Расходная' (InvoiceDetail d) = out(invoice(d));
 
signedQuantity 'Кол-во' (InvoiceDetail d) = IF in(d) THEN quantity(d) ELSE -quantity(d); 

@defineDocumentAbstractContract(Invoice, contractSku);
// наш склад
stock = ABSTRACT Stock(InvoiceDetail) PERSISTENT;   
nameStock 'Склад' (InvoiceDetail d) = name(stock(d));

operation = ABSTRACT Operation.Operation(Invoice);
nameOperation 'Операция' (Invoice invoice) = name(operation(invoice));
operation (InvoiceDetail d) = operation(invoice(d));
createdTime 'Время создания'= ABSTRACT DATETIME (Invoice) IN created;
createdUser = ABSTRACT CustomUser (Invoice);
createdNameUser 'Создан пользователем' (Invoice o) = name[Contact](createdUser(o)) MINCHARWIDTH 10 PREFCHARWIDTH 20;

negativeValueInvoices 'Запретить ввод отрицательных значений в накладных' = DATA BOOLEAN ();

skipConsignment = ABSTRACT BOOLEAN (InvoiceDetail) PERSISTENT;  

EXTEND FORM options
    PROPERTIES() negativeValueInvoices
;

DESIGN options {
    pane {
        NEW invoices  {
            type = CONTAINERV;
            caption = 'Накладная';
            MOVE PROPERTY(negativeValueInvoices());
            NEW document {
//                fill = 1;
                type = COLUMNS;
                columns = 2;
            }
        }
    }
}
//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp, supplierFilter, customerFilter, priceListTypePrefix, NS)

    CLASS ABSTRACT Invoice 'Накладная'###sign : Invoice.Invoice;
    CLASS ABSTRACT InvoiceDetail 'Строка накладной'###sign : Invoice.InvoiceDetail;

    CLASS UserInvoice 'Накладная (польз.)'###sign : Invoice;
    CLASS UserInvoiceDetail 'Строка накладной (польз.)'###sign : InvoiceDetail;

    GROUP invoice 'Информация о накладной' : base;

    @defineDocumentInterface(invoice);
    note[Invoice.Invoice](Invoice i)+=note(i);
    
    TABLE sessionInvoiceDetail(Session, InvoiceDetail);
    
    @deriveDocumentHeaderTimePrefix(UserInvoice, );
    index[Invoice.InvoiceDetail](InvoiceDetail d)+=index(d);
    
    createdUser = ABSTRACT CustomUser (Invoice);
    createdNameUser 'Создан пользователем' (Invoice invoice) = name[Contact](createdUser(invoice)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
    createdUser(UserInvoice invoice) += createdUser(invoice) IF invoice IS UserInvoice;
    
    createdTime (UserInvoice invoice) += createdTime(invoice) IF invoice IS UserInvoice;
    createdUser[Invoice.Invoice] (Invoice invoice) += createdUser(invoice);    
    
    @defineExternalizable(userInvoice, VARSTRING[100]);
    @defineExternalizable(userInvoiceDetail, VARSTRING[100]);
                                                               
    invoice[Invoice.InvoiceDetail] (InvoiceDetail detail) += invoice(detail);
    date[Invoice.Invoice] (Invoice invoice) += date(invoice);
    time[Invoice.Invoice] (Invoice invoice) += time(invoice);

    @defineDocumentInterfaceTimePrefix(invoice, before, ' документа (до)');
    @deriveDocumentHeaderTimePrefix(UserInvoice, before);

    @defineDocumentInterfaceNumber(invoice);
    number[Invoice.Invoice] (Invoice invoice) += number(invoice);
    series[Invoice.Invoice] (Invoice invoice) += series(invoice);
    invoice (number) = GROUP MAX Invoice.Invoice invoice BY number(invoice);

    @defineNumeratedDefault(UserInvoice, 'Накладные'###sign, 'ПС');

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    supplier[Invoice.Invoice](Invoice invoice) += supplier(invoice);
    customer[Invoice.Invoice](Invoice invoice) += customer(invoice);

    isCompanySupplier 'Приход от компании' (InvoiceDetail d) = isCompany(supplier(d)); 

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    supplierStock[Invoice.Invoice](Invoice invoice) += supplierStock(invoice);
    customerStock[Invoice.Invoice](Invoice invoice) += customerStock(invoice);
    stock[Invoice.InvoiceDetail](InvoiceDetail detail) += stockProp##Stock(detail);
    CONSTRAINT supplier(UserInvoice userInvoice) AND supplierStock(userInvoice) AND NOT
    in(supplier(userInvoice), supplierStock(userInvoice))
        CHECKED BY supplierStock[UserInvoice]
            MESSAGE 'Поставщик и склад поставщика для накладной не имеют связи';
    CONSTRAINT customer(UserInvoice userInvoice) AND customerStock(userInvoice) AND NOT
    in(customer(userInvoice), customerStock(userInvoice))
        CHECKED BY customerStock[UserInvoice]
            MESSAGE 'Покупатель и склад покупателя для накладной не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    isPosted[Invoice.Invoice] (Invoice invoice) += isPosted(invoice);
    
    isStockInvoices 'Разрешить ввод накладной'##sign##' без склада' = DATA BOOLEAN ();    
    equalsSeriesNumberInvoices 'Запретить ввод накладных'##sign##' с одинаковым "Серия/номер"' = DATA BOOLEAN (); 
    skipEqualsSeriesNumber = ABSTRACT BOOLEAN (Invoice);
    
    EXTEND FORM options
        PROPERTIES() NS###isStockInvoices = isStockInvoices, NS###equalsSeriesNumberInvoices = equalsSeriesNumberInvoices
    ;
    
    DESIGN options {
        document {
            NEW invoice##NS {
                caption = 'Накладная'##sign;
                MOVE PROPERTY(NS###isStockInvoices);
                MOVE PROPERTY(NS###equalsSeriesNumberInvoices);
            } 
        }
    }

    CONSTRAINT isPosted(UserInvoice i) AND NOT isStockInvoices() AND NOT stockProp##Stock(i) 
        MESSAGE 'Для накладной'##sign##' должен быть задан склад';   
    CONSTRAINT  equalsSeriesNumberInvoices() AND [ = GROUP SUM 1 IF isPosted(Invoice i) AND NOT skipEqualsSeriesNumber(i) BY seriesNumber(i)](VARSTRING[28] series) >1
        MESSAGE 'Запрещено вводить накладные'##sign##' с одинаковым "Серия/номер"';                 
    
    @defineDocumentInterfaceClosed(invoice);
    @defineDocumentClosedConstraint(UserInvoice);
    isClosed[Invoice.Invoice] (Invoice invoice) += isClosed(invoice);    

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);
    description[Invoice.Invoice](Invoice invoice) += description(invoice);    

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    currency[Invoice.Invoice](Invoice invoice) += currency(invoice);

    @defineDocumentInterfaceContract(Invoice, contractSku, supplier, customer,
                                     'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной',
                                     'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной',
                                     'накладная'###sign, NS);
    contractSku[Invoice.Invoice](Invoice invoice) += contractSku(invoice);
    isCommission[Invoice.Invoice](Invoice invoice) += isCommission(invoice);
    
    
    contractSku(UserInvoiceDetail detail) = contractSku(userInvoice(detail));
    
    @defineDocumentInterfaceAgreement(invoice);
    agreement[Invoice.Invoice](Invoice invoice) += agreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplier, customer, 'накладная'###sign, NS);
    noAgreement (UserInvoice invoice) = invoice IS UserInvoice AND NOT agreement(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    INDEX sku(InvoiceDetail d), customerStock(d);
    sku[Invoice.InvoiceDetail](InvoiceDetail detail) += sku(detail);
    
    countInSku (invoice) = GROUP SUM 1 IF in(Agreement agreement,sku(UserInvoiceDetail d)) 
        AND fromDateTime(agreement) <= dateTime(d) AND NOT (toDateTime(agreement) < dateTime(d))
        AND inSupplier(agreement, supplier(d)) AND inCustomer(agreement, customer(d))
        AND currency(d) == currency(agreement)
            BY userInvoice(d);
            
    maxAgreementInSku (invoice) = GROUP MAX Agreement agreement IF in(agreement,sku(UserInvoiceDetail d)) 
        AND fromDateTime(agreement) <= dateTime(d) AND NOT (toDateTime(agreement) < dateTime(d))
        AND inSupplier(agreement, supplier(d)) AND inCustomer(agreement, customer(d))
            BY userInvoice(d);
                        
    isStockSku (InvoiceDetail invoiceDetail) = isStock(sku(invoiceDetail));
    isStockSku (UserInvoiceDetail userInvoiceDetail) = isStock(sku(userInvoiceDetail));

    isChargeSku (InvoiceDetail invoiceDetail) = isCharge(sku(invoiceDetail));
    isChargeSku (UserInvoiceDetail userInvoiceDetail) = isCharge(sku(userInvoiceDetail));

    @defineDocumentInterfaceDetailQuantity(invoice);
    quantity[Invoice.InvoiceDetail](InvoiceDetail detail) += quantity(detail);
    CONSTRAINT negativeValueInvoices() AND InvoiceDetail detail IS InvoiceDetail AND quantity(detail) < 0
        MESSAGE 'Количество в строке накладной должно быть не отрицательным';

//    @defineDocumentDetailGrossWeight(invoice, sku);

    price 'Цена' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;
    price 'Цена' = DATA NUMERIC[16,4] (UserInvoiceDetail) @@denominationCurrency;
    price (UserInvoiceDetail invoiceDetail) += price(invoiceDetail);
    
    price[Invoice.InvoiceDetail](InvoiceDetail detail) += price(detail);

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, , ); // объявляем шкалу
    
    // запись задана после объявления формы
    @deriveDocumentDetailValueVAT(userInvoice); // записываем значение ставки
       
    equalSkuVATInvoices 'Запрет на различный НДС в накладных '##sign##' и SKU' = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS###equalSkuVATInvoices = equalSkuVATInvoices
    ;
    
    DESIGN options {        
        invoice##NS {
            MOVE PROPERTY(NS###equalSkuVATInvoices);
        }
    }
//    CONSTRAINT equalSkuVATInvoices() AND VATUserInvoiceDetail(d) AND isPostedUserInvoiceDetail(d) AND NOT VATSkuCountry(skuUserInvoiceDetail(d), countryStock(customerStockUserInvoiceDetail(d))) == VATUserInvoiceDetail(d)
//        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';
        
        
    blankLineInvoices 'Разрешить строки без SKU в накладных '##sign = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() NS###blankLineInvoices = blankLineInvoices
    ;
    
    DESIGN options {
        invoice##NS {
            MOVE PROPERTY(NS###blankLineInvoices);    
        }
    }

    CONSTRAINT isPosted(UserInvoiceDetail d) AND NOT sku(d) AND NOT blankLineInvoices()
        MESSAGE 'Для строки накладной '##sign##' должен быть задан SKU';               

    VAT[Invoice.InvoiceDetail](InvoiceDetail detail) += VAT(detail);
    valueVAT[Invoice.InvoiceDetail](InvoiceDetail detail) += valueVAT(detail);

    invoicePrice 'Цена с НДС' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;
    invoicePrice 'Цена с НДС' = DATA NUMERIC[16,4] (UserInvoiceDetail) @@denominationCurrency;
    invoicePrice (UserInvoiceDetail invoiceDetail) += invoicePrice(invoiceDetail);

    invoicePrice[Invoice.InvoiceDetail](InvoiceDetail detail) += invoicePrice(detail);
    
    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(userInvoice);
    @defineDocumentDetailNumberVATOnChange(userInvoice, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userInvoice);
    @defineDocumentDetailInvoicePriceVATOnChange(userInvoice);
    
    priceRound = ABSTRACT CASE OVERRIDE FIRST INTEGER (InvoiceDetail);
    priceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

    homePriceRound = ABSTRACT CASE OVERRIDE FIRST INTEGER (InvoiceDetail);
    homePriceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

    @defineDocumentInterfacePriceListType(invoice); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userInvoice, priceListTypePrefix); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // объявляем сумму без НДС
    sum 'Сумма' = ABSTRACT NUMERIC[18,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;
    sum 'Сумма' = DATA NUMERIC[18,4] (UserInvoiceDetail) @@denominationCurrency;
    sum (UserInvoiceDetail detail) += sum(detail);
        
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, , currency, quantity, priceRound);
    sum[Invoice.InvoiceDetail](InvoiceDetail detail) += sum(detail);


    // объявляем свойства суммы НДС и суммы с НДС
    VATSum 'Сумма НДС' (invoiceDetail) = ABSTRACT NUMERIC[18,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;
    invoiceSum 'Сумма с НДС' (invoiceDetail) = ABSTRACT NUMERIC[18,4] (InvoiceDetail) PERSISTENT @@denominationCurrency;
    
    VATSum 'Сумма НДС' (userInvoiceDetail) = DATA NUMERIC[18,4] (UserInvoiceDetail) @@denominationCurrency;
    invoiceSum 'Сумма с НДС' (userInvoiceDetail) = DATA NUMERIC[18,4] (UserInvoiceDetail) @@denominationCurrency;
    
    VATSum (UserInvoiceDetail invoiceDetail) += VATSum(invoiceDetail);
    invoiceSum (UserInvoiceDetail invoiceDetail) += invoiceSum (invoiceDetail);
    
    @deriveDocumentDetailVATDataSum(userInvoice); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum(userInvoice, invoice); // записываем сумму с НДС

    VATSum[Invoice.InvoiceDetail](InvoiceDetail detail) += VATSum(detail);
    invoiceSum[Invoice.InvoiceDetail](InvoiceDetail detail) += invoiceSum(detail);

    @defineDocumentInterfaceHeaderVATSum(invoice, invoice);

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentInterfaceHeaderItemQuantity(invoice);
    @defineDocumentInterfaceHeaderItemCount(invoice);    
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);
    @defineDocumentInterfaceHeaderSum(invoice);

    @defineDocumentInterfaceHeaderItemSum (invoice, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (invoice, , ); //-- сумма поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum(invoice, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)

    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале
    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);
    //-- вес
    sumNetWeight 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
    sumNetWeight 'Вес нетто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumNetWeight(UserInvoiceDetail d) += sumNetWeight(d);
    sumNetWeight[Invoice.InvoiceDetail](InvoiceDetail d) += sumNetWeight(d);
    
    sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);        
    sumGrossWeight 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumGrossWeight(UserInvoiceDetail d) += sumGrossWeight(d);
    sumGrossWeight[Invoice.InvoiceDetail](InvoiceDetail d) += sumGrossWeight(d);
       
    sumNetWeight(UserInvoiceDetail d) <- netWeight(sku(d)) * quantity(d)
        WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
    sumGrossWeight(UserInvoiceDetail d) <- grossWeight(sku(d)) * quantity(d)
        WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
                  
    @defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');       
    @defineDocumentHeaderNetWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг');  
    @defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');
    @defineDocumentHeaderGrossWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг'); 
    changeGrossWeight(Invoice invoice)  = ACTION {
        REQUEST NUMERIC[16,3] INPUT;
        IF requestedNumeric() THEN {           
            sumGrossWeight(InvoiceDetail d) <- NUMERIC[9,3](sumNetWeight(d)/(sumNetWeightInvoiceDetail(invoice) IF sumNetWeightInvoiceDetail(invoice) != 0)* requestedNumeric())
                WHERE d IS InvoiceDetail AND invoice(d) == invoice;
    
        } ELSE {
           
            sumGrossWeight(InvoiceDetail d) <- NULL WHERE d IS InvoiceDetail AND invoice(d) == invoice;    
        }        
    } 
        
    countInvoiceDetail (stock, invoice) = GROUP SUM 1 BY stockProp##Stock(InvoiceDetail invoiceDetail), invoice(invoiceDetail);

    @implementDocumentSupplierCustomer(invoice);
    
    @defineMovementSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(invoiceDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineBarcodeSku(invoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

    @defineMovementPriceSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

    @defineDocumentDialogSupplierCustomerStock(userInvoice, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userInvoice, supplierFilter, customerFilter);

// --------------------------- Формы ---------------------------------- //
    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundVAT 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
        
    edit 'Редактировать' = ACTION ABSTRACT LIST (Invoice) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit[Invoice.Invoice] (Invoice invoice) += ACTION edit(invoice);
    skipShowQuantity = ABSTRACT BOOLEAN (Invoice);
    showQuantity (Invoice i) = i IS Invoice AND NOT skipShowQuantity(i);
    editSku 'Редактировать SKU' (UserInvoiceDetail d) = ACTION edit(sku(d));
    
    FORM userInvoice 'Накладная'###sign
        OBJECTS i = UserInvoice FIXED PANEL
        PROPERTIES (i) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(i),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(i),
                       nameCustomer ON CHANGE changeCustomer###customerFilter(i),
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(i),
                       nameNumerator, number, series, date, time,
                       nameCurrency, nameAgreement, namePriceListType SHOWIF noAgreement(i), note,
                       seriesNumberContractSku, isCommission
        PROPERTIES (i) countUserInvoiceDetail, quantityUserInvoiceDetail, sumUserInvoiceDetail,
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, sumNetWeightInvoiceDetail, 
                       sumGrossWeightInvoiceDetail ON CHANGE changeGrossWeight(i) 

        OBJECTS d = UserInvoiceDetail FIXED GRID
        PROPERTIES (d) index
        PROPERTIES (d) ON EDIT editSku(d) BACKGROUND backgroundSku(d) idBarcodeSku, 
                       idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
        PROPERTIES (d) quantity SHOWIF showQuantity(i), namePriceListType,
                       price ON CHANGE changePrice(d), sum,
                       numberVAT ON CHANGE changeNumberVAT(d) BACKGROUND backgroundVAT(d),
                       valueVAT ON CHANGE changeValueVAT(d) BACKGROUND backgroundVAT(d),
                       invoicePrice ON CHANGE changeInvoicePrice(d),
                       VATSum, invoiceSum, sumNetWeight BACKGROUND backgroundSku(d), 
                       sumGrossWeight BACKGROUND backgroundSku(d), ADDOBJ, deleteid=DELETESESSION
        ORDER BY index(d)

        PROPERTIES(i) TODRAW d fillDocument, addDetailDialogSkuStockUserInvoiceDetail,
                               addDetailInputBarcodeUserInvoiceDetail, deleteUserInvoiceDetail
        FILTERS userInvoice(d) == i

        EVENTS
            ON OK prePost(i)

//        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
//                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
//                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail

        EDIT UserInvoice OBJECT i
    ;

    DESIGN userInvoice {
        main {
            preferredSize = (1024, 768);
            NEW header.box {
                type = CONTAINERH;

                NEW headerParams {
                    fill = 1;

                    MOVE i.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPosted(i));
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumerator(i));
                            MOVE PROPERTY(number(i));
                            MOVE PROPERTY(series(i));
                            MOVE PROPERTY(date(i));
                            MOVE PROPERTY(time(i));
                        }    
                    }
                    NEW headerLegalEntity {
                        type = CONTAINERH;
                        NEW headerSupplier {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplier(i));
                            MOVE PROPERTY(nameSupplierStock(i));
                        }
                        NEW headerCustomer {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomer(i));
                            MOVE PROPERTY(nameCustomerStock(i));
                        }
                    }
                    NEW headerTabbedPane {
                        alignment = STRETCH;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            NEW headerContract {
                                type = CONTAINERH;
                                caption = 'Договор';
                                MOVE PROPERTY(seriesNumberContractSku(i));
                                MOVE PROPERTY(isCommission(i));
                            }
                            MOVE i.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = COLUMNS;
                            columns = 4;
//                            minimumSize = (500, -1);
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = CONTAINERH;
                            columns = 2;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = COLUMNS;
                            columns = 2;
//                            minimumSize = (500, -1);
                        }
                        NEW import {
                            caption = 'Импорт';
                            type = CONTAINERH;
                        }
                    }
                }
                MOVE i.documentSum {
                    columns = 1;
                    NEW sumWeight {
                        caption = 'Вес';
                        MOVE PROPERTY(sumNetWeightInvoiceDetail(i)); 
                        MOVE PROPERTY(sumGrossWeightInvoiceDetail(i));                                                                                                                                                                                                                
                    }
                }
            }
            NEW specification.box {
                fill = 1;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }

            MOVE functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserInvoiceDetail(i)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserInvoiceDetail(i)) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserInvoiceDetail(i)) { preferredCharWidth = 13;}
            PROPERTY(deleteUserInvoiceDetail(i)){focusable = FALSE;}
        }
    }

    //возможность приоритетной подмены
    overVAT = ABSTRACT OVERRIDE FIRST Range (UserInvoiceDetail);
    overVAT(UserInvoiceDetail d) += VAT (sku(d), country(supplierStock(d)));
    changedVAT = ABSTRACT OVERRIDE BOOLEAN (UserInvoiceDetail); 
    
    WHEN SESSION FORMS userInvoice
        (CHANGED(sku(UserInvoiceDetail detail)) OR CHANGED (supplierStock(detail)) OR changedVAT(detail)) AND NOT CHANGED(VAT(detail)) DO {
            VAT(detail) <- overVAT(detail);
            
        } // записываем шкалу
        
    CONSTRAINT equalSkuVATInvoices() AND VAT(UserInvoiceDetail d) AND isPosted(d) AND NOT overVAT(d) == VAT(d)
        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';        
    // Добавляем подбор товаров / партий
    @defineDocumentSkuPriceListTypeAgreement(userInvoice, stockProp, priceListTypePrefix);
    @extendFormDocumentSkuPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);

    addUserInvoice 'Добавить' = ACTION ADDFORM UserInvoice;
    edit 'Редактировать' (userInvoice) = ACTION EDITFORM UserInvoice;
    edit (UserInvoice invoice) += ACTION edit(invoice);

    overCopy = ACTION ABSTRACT LIST (Invoice, UserInvoice);
    overCopy = ACTION ABSTRACT LIST (UserInvoiceDetail, InvoiceDetail);
    
    copy 'Копировать'(Invoice invoice) = ACTION NEWSESSION {
        FOR ADDOBJ i = UserInvoice DO {
            supplier(i) <- supplier(invoice);
            supplierStock(i) <- supplierStock(invoice);
            customer(i) <- customer(invoice);
            customerStock(i) <- customerStock(invoice);
            contractSku(i) <- contractSku(invoice);
            isCommission(i) <- isCommission(invoice);
            currency(i) <- currency(invoice);
            agreement(i) <- agreement(invoice);
            priceListType(i) <- priceListType(invoice);
            note(i) <- note(invoice);

            overCopy(invoice, i);

            FOR invoice(InvoiceDetail invoiceDetail) == invoice DO {
                FOR ADDOBJ d=UserInvoiceDetail DO {
                    userInvoice(d) <- i;
                    sku(d) <- sku(invoiceDetail);
                    quantity(d) <- quantity(invoiceDetail);
                    price(d) <- price(invoiceDetail);
                    
                    overCopy(d, invoiceDetail);
                }
            }

            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL NOCANCEL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopy = ACTION ABSTRACT LIST (UserInvoiceDetail, UserInvoiceDetail);

    copy 'Копировать'(UserInvoiceDetail detail) = ACTION {
        FOR ADDOBJ d = UserInvoiceDetail DO {          

            userInvoice(d) <- userInvoice(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            priceListType(d) <- priceListType(detail);
            invoicePrice(d) <- invoicePrice(detail);
            
            overCopy(d, detail);                              
        }
    } EDITKEY 'F5' TOOLBAR;
    
    EXTEND FORM userInvoice PROPERTIES(d) copy FORCE PANEL;
    DESIGN userInvoice { PROPERTY(copy(d)) { focusable = FALSE; } }

    isUserOpened(UserInvoice i)=  isOpened[Invoice](i) AND is(i);
    
    filterInvoiceDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Invoice i) = date(i) >= filterInvoiceDateFrom() OR (i IS Invoice AND NOT filterInvoiceDateFrom());      
    
    filterInvoiceDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Invoice i) = date(i) <= filterInvoiceDateTo() OR (i IS Invoice AND NOT filterInvoiceDateTo());      
    
    filterInvoiceCustomer  = DATA LOCAL LegalEntity ();
    nameFilterInvoiceCustomer 'Покупатель' = name(filterInvoiceCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomer (Invoice i) = customer(i) == filterInvoiceCustomer() OR (i IS Invoice AND NOT filterInvoiceCustomer());    

    filterInvoiceCustomerStock  = DATA LOCAL Stock ();
    nameFilterInvoiceCustomerStock 'Склад покупателя' = name(filterInvoiceCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStock (Invoice i) = customerStock(i) == filterInvoiceCustomerStock() OR (i IS Invoice AND NOT filterInvoiceCustomerStock());  

    filterInvoiceSupplier = DATA LOCAL LegalEntity ();
    nameFilterInvoiceSupplier 'Поставщик' = name(filterInvoiceSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplier (Invoice i) = supplier(i) == filterInvoiceSupplier() OR (i IS Invoice AND NOT filterInvoiceSupplier());      

    filterInvoiceSupplierStock  = DATA LOCAL Stock ();
    nameFilterInvoiceSupplierStock 'Склад поставщика' = name(filterInvoiceSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStock (Invoice i) = supplierStock(i) == filterInvoiceSupplierStock() OR (i IS Invoice AND NOT filterInvoiceSupplierStock());      
    
    filterInvoiceCustomUser  = DATA LOCAL CustomUser ();
    nameFilterInvoiceCustomUser 'Создан пользователем' = name[Contact](filterInvoiceCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUser (Invoice i) = createdUser[UserInvoice](i) == filterInvoiceCustomUser() OR (i IS Invoice AND NOT filterInvoiceCustomUser());  

    filterInvoiceComputer = DATA LOCAL Computer ();
    nameFilterInvoiceComputer 'Создан на компьютере' = hostname(filterInvoiceComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputer (Invoice i) = createdComputer(i) == filterInvoiceComputer() OR (i IS Invoice AND NOT filterInvoiceComputer());
    
    overShowEdit = ABSTRACT BOOLEAN (Invoice);
    overShowDelete = ABSTRACT BOOLEAN (Invoice);
    skipShowEdit = ABSTRACT BOOLEAN (Invoice);
    skipShowDelete = ABSTRACT BOOLEAN (Invoice);
    
    overShowEdit[Invoice.Invoice](Invoice i) += overShowEdit(i);
    overShowDelete[Invoice.Invoice](Invoice i) += overShowDelete(i);
    
    overPreventClose = ABSTRACT BOOLEAN (UserInvoice);
    overPreventOpen = ABSTRACT BOOLEAN (UserInvoice);
    showClose (UserInvoice i) = isOpened(i) AND NOT overPreventClose(i);   
    showOpen (UserInvoice i) = isClosed(i) AND NOT overPreventOpen(i);   
    backgroundDraft 'Цвет'  (Invoice i)= RGB(212,255,212) IF isDraft(i); 
    
    backgroundSkuDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (InvoiceDetail);
    
    FORM invoices 'Накладные' 
    
        PROPERTIES() filterInvoiceDateFrom, filterInvoiceDateTo, nameFilterInvoiceSupplier, nameFilterInvoiceSupplierStock, 
                     nameFilterInvoiceCustomer, nameFilterInvoiceCustomerStock, nameFilterInvoiceCustomUser, nameFilterInvoiceComputer
        
        OBJECTS i = Invoice LAST
        PROPERTIES (i) READONLYIF isReadonly() isClosed 
                                
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND backgroundDraft(i) isPosted,
                                number, series, date, time                                
        PROPERTIES (i) READONLYIF isReadonly() nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                                nameCurrency, nameAgreement,
                                seriesNumberContractSku, isCommission
        PROPERTIES (i) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail
        PROPERTIES (i) READONLYIF isReadonly() note
        PROPERTIES (i) READONLY FORCE PANEL createdNameUser[UserInvoice], createdTime[UserInvoice], createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer 

        PROPERTIES ()  addUserInvoice TODRAW i
        PROPERTIES (i) edit SHOWIF overShowEdit(i),//isOpenedInvoice(i), 
                       copy
        PROPERTIES (i) close[UserInvoice] SHOWIF showClose(i), open SHOWIF showOpen(i)
        PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF overShowDelete(i)//isUserOpenedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY index
        PROPERTIES (d) READONLY BACKGROUND backgroundSkuDetail(d) idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, namePriceListType, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum
        ORDER BY index(d)

        FILTERS invoice(d) == i
        FILTERS filterDateFrom(i), 
                filterDateTo(i),
                filterSupplier(i),
                filterSupplierStock(i),
                filterCustomer(i),
                filterCustomerStock(i),
                filterCustomUser(i),
                filterComputer(i)
                
        DIALOG Invoice OBJECT i
    ;

    DESIGN invoices 'Накладные'###sign {
        main {
            preferredSize = (1024, 768);
            PROPERTY (deletei) {
                askConfirm = TRUE;
            }

            NEW documentContainer BEFORE functions.box {
                fill = 1;

                type = SPLITV;
                NEW filtersBox {                       
                    fill = 1;
                    NEW topFilters {
                        caption = 'Фильтры';
                        type = CONTAINERV; 
                        NEW topFilters1 {
                            type = CONTAINERH; 
                            MOVE PROPERTY(filterInvoiceDateFrom());
                            MOVE PROPERTY(filterInvoiceDateTo());                            
                            MOVE PROPERTY(nameFilterInvoiceSupplier());
                            MOVE PROPERTY(nameFilterInvoiceSupplierStock());    
                            MOVE PROPERTY(nameFilterInvoiceCustomer());
                            MOVE PROPERTY(nameFilterInvoiceCustomerStock());                                                    
                        }
                        NEW topFilters2 {
                            type = CONTAINERH; 
                            MOVE PROPERTY(nameFilterInvoiceCustomUser());
                            MOVE PROPERTY(nameFilterInvoiceComputer());                            
                        }                                                                                         
                    }
                    MOVE i.box {
                        fill = 1;
                    }
                }    

                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE d.box {
                        fill = 1;
                        caption = 'Спецификация';
                    }
                    NEW documentHistory {
                        caption = 'История';
                        type = CONTAINERV;

                        MOVE i.created;
                        MOVE i.posted;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                    NEW actionContainer {
                        caption = 'Действия';
                        type = CONTAINERH;
                        NEW createdContainer {
                            caption = 'Создание на основе';
                            type = CONTAINERV;

                            MOVE PROPERTY(copy(i)) { caption = 'Накладная'###sign;}
                        }
                        NEW machineryContainer {
                            caption = 'Загрузка';
                            type = CONTAINERV;
                        }
                    }
                }
            }
        }
    }
    @extendFormEditable(invoices);
    @defineFilterIsOpened (invoice, invoices, i); 
    @defineDocumentLogForm(invoices, i);
    @defineDocumentLogForm(userInvoice, i, specification.box);
    DESIGN userInvoice { historyTabs { caption = 'История'; } }
    FORM invoiceDetails 'Продажа'
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                               description,
                               quantity, price, sum,
                               numberVAT, valueVAT, VATSum, invoiceSum,
                               name###stockProp##Stock

        DIALOG InvoiceDetail OBJECT d
    ;
    
    backgroundVAT(UserInvoiceDetail d) += WHEN isItem(sku(d)) AND NOT 
        ((valueVAT(d) == valueVAT(sku(d), country(customerStock(d)), date(d)))
         OR (valueVAT(d) == overSetValueVAT(d))) 
            THEN RGB(255,0,0); 
            
    edit 'Редактировать' = ACTION ABSTRACT LIST (InvoiceDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit(UserInvoiceDetail d) = ACTION NEWSESSION {
        FORM userInvoice OBJECTS i = userInvoice(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    edit(UserInvoiceDetail d) += ACTION edit(d);  
    
    show 'Просмотреть' = ACTION ABSTRACT LIST (InvoiceDetail) TOOLBAR;
    show(UserInvoiceDetail d) = ACTION NEWSESSION {
        FORM userInvoice OBJECTS i = userInvoice(d), d = d DOCKEDMODAL READONLY;
    }
    show(UserInvoiceDetail d) += ACTION show(d);             
END

// -------------------------- Метакод по добавлению партий ------------------------- //

META defineInvoiceBatch(stockProp, priceListTypePrefix, NS, sign)
    @showDocumentInterfaceDetailBatch(invoice);
    
    @defineDocumentInterfaceDetailBatch(invoice, batch); 
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) += ACTION {      
        batch(d) <- batch(detail);
    }  
    overCopy(UserInvoiceDetail d, UserInvoiceDetail detail) += ACTION {      
        batch(d) <- batch(detail);
    }  
    
    // Пишем в цену инвойса из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userInvoice, stockProp###stock, userInvoice);

    // История по правой кнопке
    @defineBalancesBatch(invoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeAgreement(userInvoice, stockProp, priceListTypePrefix);
    @extendFormDocumentBatchPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);
    
    // Подбор документа
    @implementDocumentBatch(invoice);
   
    replace(Sku s, Batch b) += ACTION { sku(UserInvoiceDetail detail) <- s WHERE batch[Invoice.InvoiceDetail](detail) == b;} 
    
END

// Партии с диалогом по складам
META defineInvoiceBatchDialogStock(stockProp, dialog)

    changeBatch(UserInvoiceDetail d) = ACTION {
        IF batch(d) THEN {
            FORM dialogBatchStock##dialog OBJECTS st = stockProp(d),
                                     t = dateTime(d),
                                     sk = sku(d),
                                     bt = batch(d) DIALOG SHOWDROP;        
        } ELSE {
            FORM dialogBatchStock##dialog OBJECTS st = stockProp(d),
                                     t = dateTime(d),
                                     sk = sku(d) DIALOG SHOWDROP;        
        }


        IF formResult() == FormResult.ok THEN {
            batch(d) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batch(d) <- NULL;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) SHOWIF showBatch[Invoice](i) AFTER shortNameUOMSku(d) nameBatch ON CHANGE changeBatch(d), documentNameBatch ON CHANGE changeBatch(d)  
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY AFTER shortNameUOMSku(d) SHOWIF showBatch(i) nameBatch, documentNameBatch;
END

// Партии на приходе
META defineInvoiceBatchDialog(dumb)
    changeBatch(UserInvoiceDetail userInvoiceDetail) = ACTION {
        FORM dialogBatch OBJECTS sk = sku(userInvoiceDetail) DIALOG SHOWDROP;
        IF formResult() == FormResult.ok THEN {
            batch(userInvoiceDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batch(userInvoiceDetail) <- NULL;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d) SHOWIF showBatch[Invoice](i)
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d) SHOWIF showBatch(i);
END

META defineInvoiceReturn(nsdir, nsret, stockProp)
    invoiceDetail (invoiceDetail) = ABSTRACT nsdir.InvoiceDetail (nsret.InvoiceDetail) PERSISTENT INDEXED;
    invoiceDetail (userInvoiceDetail) = DATA nsdir.InvoiceDetail (nsret.UserInvoiceDetail) INDEXED;
    invoiceDetail(UserInvoiceDetail detail) += invoiceDetail(detail);

    returnQuantity 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM quantity(InvoiceDetail invoiceDetail) IF isPosted(invoiceDetail) 
        BY invoiceDetail(invoiceDetail) PERSISTENT;
    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantity(nsdir.InvoiceDetail invoiceDetail) BY invoice(invoiceDetail) PERSISTENT;
    toReturnQuantity 'Кол-во доступно к возврату' (nsdir.InvoiceDetail invoiceDetail)= quantity(invoiceDetail) (-) returnQuantity(invoiceDetail);    

    CONSTRAINT returnQuantity(nsdir.InvoiceDetail d) > quantity(d)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT sku(invoiceDetail(UserInvoiceDetail d)) != sku(d) CHECKED BY invoiceDetail[UserInvoiceDetail]
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT supplier(invoiceDetail(UserInvoiceDetail d)) != supplier(d) CHECKED BY invoiceDetail[UserInvoiceDetail]
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT customer(invoiceDetail(UserInvoiceDetail d)) != customer(d) CHECKED BY invoiceDetail[UserInvoiceDetail]
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';
        
        

    descriptionInvoiceDetail 'Основание' (InvoiceDetail invoiceDetail) = description(invoiceDetail(invoiceDetail));
    descriptionInvoiceDetail 'Основание' (UserInvoiceDetail userInvoiceDetail) = description(invoiceDetail(userInvoiceDetail));
    balanceBMaxBatch 'Остаток партии (max)' (nsdir.InvoiceDetail d,Stock st,DATETIME dt) = balanceB(maxBatch(d),st,dt);
    
    FORM baseInvoiceDetail 'Строка накладной'        
        OBJECTS sk = Sku FIXED PANEL
        PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
        OBJECTS st = Stock FIXED PANEL    
        OBJECTS dt = DATETIME FIXED PANEL       
        OBJECTS d = nsdir.InvoiceDetail LAST
        PROPERTIES(d) READONLY date, index, description,
                               quantity, toReturnQuantity
        PROPERTIES   READONLY balanceBMaxBatch(d,st,dt)                       
        PROPERTIES(d) READONLY price, sum,
                               numberVAT, valueVAT, VATSum, invoiceSum,
                               name###stockProp         
                
        FILTERGROUP filter11
                    FILTER  'По складу' stockProp(d) == st DEFAULT     
        FILTERGROUP filter12
                    FILTER  'Доступно' toReturnQuantity(d) > 0 DEFAULT                            
                
    ;
    DESIGN baseInvoiceDetail {
        main {
            MOVE sk.box {
                type = CONTAINERH;
                PROPERTY(name(sk)) {focusable = FALSE;}
                PROPERTY(idBarcode(sk)) {focusable = FALSE;}
                PROPERTY(shortNameUOM(sk)) {focusable = FALSE;}
            }
            MOVE d.box;
            MOVE functions.box;
        }
    } 
    
    change##nsdir##InvoiceDetail(InvoiceDetail detail) = ACTION {
        REQUEST OBJECT d
        IF stockProp(detail)  THEN {
            IF invoiceDetail[UserInvoiceDetail](detail) THEN {            
                FORM baseInvoiceDetail OBJECTS sk = sku(detail), st = stockProp(detail), dt = dateTime(detail), d = invoiceDetail[UserInvoiceDetail](detail)  CONTEXTFILTER d = invoiceDetail[UserInvoiceDetail](detail) DIALOG SHOWDROP;        
            } 
            ELSE {
                FORM baseInvoiceDetail OBJECTS sk = sku(detail), st = stockProp(detail), dt = dateTime(detail) CONTEXTFILTER d = invoiceDetail[UserInvoiceDetail](detail) DIALOG SHOWDROP; 
            }
        }
        
        IF formResult() == FormResult.ok THEN {
            invoiceDetail[UserInvoiceDetail](detail) <- requestedObject();

        } ELSE IF formResult() == FormResult.drop THEN {
            invoiceDetail[UserInvoiceDetail](detail) <- NULL;
        }
    }    
    

//    nsret.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
//                                                    nsdir.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
//                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
//                                                    prevPriceBPriceListTypeBatchStockDateTime(nsret.priceListTypeInvoiceDetail(detail),
//                                                                                              nsret.batchInvoiceDetail(detail),
//                                                                                              nsret.stockProp###invoiceDetail(detail),
//                                                                                              nsret.dateTimeInvoiceDetail(detail))
//                                                 ELSE
//                                                    prevPriceBPriceListTypeSkuStockDateTime(nsret.priceListTypeInvoiceDetail(detail),
//                                                                                            nsret.skuInvoiceDetail(detail),
//                                                                                            nsret.stockProp###invoiceDetail(detail),
//                                                                                            nsret.dateTimeInvoiceDetail(detail))
//                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.batchInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.priceListTypeInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.skuInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.stockProp###invoiceDetail(detail)) OR
//                                             CHANGED(nsret.dateTimeInvoiceDetail(detail));

    overRecalculatedPrice = ACTION ABSTRACT LIST (nsret.UserInvoiceDetail);
    recalculatedPrice(UserInvoiceDetail detail) = ACTION {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
        IF invoiceDetail(detail) THEN {
            price(detail) <-  price(invoiceDetail(detail));
            invoicePrice[InvoiceDetail](detail) <-  invoicePrice(invoiceDetail(detail));
            invoicePrice(detail) <-  invoicePrice(invoiceDetail(detail));
            VAT(detail) <- VAT(invoiceDetail(detail));
            overRecalculatedPrice(detail);
        }
    }
        WHEN SESSION FORMS userInvoice
            CHANGED(invoiceDetail[UserInvoiceDetail](InvoiceDetail detail)) OR
            CHANGED(batch(detail)) OR
            CHANGED(priceListType(detail)) OR
            CHANGED(sku(detail)) OR
            CHANGED(stockProp(detail)) OR
            CHANGED(dateTime(detail))
                DO EXEC recalculatedPrice(detail);


    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetail ON CHANGE change##nsdir##InvoiceDetail(d) 
                AFTER shortNameUOMSku(d);
    EXTEND FORM nsdir.userInvoice PROPERTIES (d) READONLY returnQuantity BEFORE namePriceListType(d);

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetail AFTER shortNameUOMSku(d);
    EXTEND FORM nsdir.invoices PROPERTIES (d) READONLY returnQuantity BEFORE namePriceListType(d);

    WHEN SESSION FORMS userInvoice
        CHANGED(invoiceDetail(UserInvoiceDetail detail)) AND countBatch(invoiceDetail(detail)) == 1 DO
            batch(detail) <- maxBatch(invoiceDetail(detail));

    CONSTRAINT batch(UserInvoiceDetail detail) AND invoiceDetail(detail) AND
               NOT in(invoiceDetail(detail), batch(detail))
               CHECKED BY batch[UserInvoiceDetail], invoiceDetail[UserInvoiceDetail]
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке продажи';
               
    equalsPriceLineInvoices 'Цена в возвратной накладной должна соответстовать цене в основании' = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() nsret###equalsPriceLineInvoices = equalsPriceLineInvoices
    ;
    
    DESIGN options {
        invoice##nsret {
            MOVE PROPERTY(nsret###equalsPriceLineInvoices);    
        }
    }

    CONSTRAINT isPosted(UserInvoiceDetail d) AND equalsPriceLineInvoices() AND NOT (price(d) ==  price(invoiceDetail(d)))
        MESSAGE 'Цена в возвратной накладной не соответствует цене в основании';  
            
    //----------- Автоматическое заполнение основания для возвратной накладной ------------------//
    countInvoiceDetailsSupplierCustomerPrice 'Количество строк основания' = GROUP SUM 1 
        IF date(nsdir.InvoiceDetail d) <= DATE date AND isPosted(d)
            BY supplier(d), supplierStock(d), customer(d), customerStock(d), sku(d), price(d), date;
    
    invoiceDetailSupplierCustomerPrice 'Количество строк основания' = GROUP MAX nsdir.InvoiceDetail d 
        IF date(d) <= DATE date AND isPosted(d)
            BY supplier(d), supplierStock(d), customer(d), customerStock(d), sku(d), price(d), date;
                
    maxSaleInvoiceDetail(UserInvoiceDetail d) = invoiceDetailSupplierCustomerPrice(supplier(d),supplierStock(d), customer(d),customerStock(d),sku(d), price(d),date(d));
    countSaleInvoiceDetails(UserInvoiceDetail d) = countInvoiceDetailsSupplierCustomerPrice(supplier(d),supplierStock(d), customer(d),customerStock(d),sku(d), price(d), date(d));
    balanceReturnQuantity(nsdir.InvoiceDetail detail) = quantity(detail) (-) returnQuantity(detail);
    
    //-- пока берем без учета того, что в данной накладной может быть несколько строк с одним товаром
    fillInvoiceDetail 'Проставить основание'(UserInvoiceDetail d)  = ACTION {    
        invoiceDetail(d) <- maxSaleInvoiceDetail(d)
            WHERE NOT invoiceDetail(d)  AND countSaleInvoiceDetails(d) == 1 AND        
            balanceReturnQuantity(maxSaleInvoiceDetail(d)) >= quantity(d);
    } SHORTCUT descriptionInvoiceDetail[UserInvoiceDetail];
    
    
    fillAllInvoiceDetail 'Проставить основание для всех'(UserInvoiceDetail detail) = ACTION {
       FOR userInvoice(detail) == userInvoice(UserInvoiceDetail d) DO
           fillInvoiceDetail(d);
    } SHORTCUT descriptionInvoiceDetail[UserInvoiceDetail];               
               
END

META defineInvoiceDestination(fromLegalEntity, toLegalEntity)
    from(Invoice invoice) += fromLegalEntity(invoice);
    to(Invoice invoice) += toLegalEntity(invoice);
    //Invoice.dataFromLegalEntityInvoiceDetail(detail) += data###fromLegalEntity##InvoiceDetail(detail);
    //Invoice.dataToLegalEntityInvoiceDetail(detail) += data###toLegalEntity##InvoiceDetail(detail);
END


META defineInvoiceStockDestination(fromStockProp, toStockProp)
    fromStock(Invoice invoice) += fromStockProp(invoice);
    toStock(Invoice invoice) += toStockProp(invoice);
END

// вторая валюта
META defineInvoiceHomeCurrency(dumb)

    backgroundHomeCurrency 'Цвет' (Invoice invoice) = RGB(255, 224, 128) IF invoice IS Invoice;

    isHomeCurrency 'Конвертация' = ABSTRACT BOOLEAN(Invoice) IN documentPrm;
    isHomeCurrency 'Конвертация' = DATA BOOLEAN(UserInvoice) IN documentPrm INDEXED;
    isHomeCurrency(UserInvoice i) += isHomeCurrency(i);
    
    isHomeCurrency (InvoiceDetail d) = isHomeCurrency(invoice(d));
    isHomeCurrency (UserInvoiceDetail d) = isHomeCurrency(userInvoice(d));

    homeCurrency = ABSTRACT Currency(Invoice);
    homeCurrency = DATA Currency(UserInvoice);
    homeCurrency(UserInvoice i) += homeCurrency(i);
    nameHomeCurrency 'Валюта (конв.)' (Invoice i) = name(homeCurrency(i));

    homeCurrency(UserInvoice userInvoice) <- currency(customer(userInvoice)) WHEN CHANGED(customer(userInvoice));
    
    homeCurrency(InvoiceDetail d) = homeCurrency(invoice(d));
    homeCurrency(UserInvoiceDetail d) = homeCurrency(userInvoice(d));

    typeExchange = ABSTRACT TypeExchange(Invoice);
    typeExchange = DATA TypeExchange(UserInvoice);
    typeExchange(UserInvoice i) += typeExchange(i);
    nameTypeExchange 'Тип обмена' (Invoice i) = name(typeExchange(i));

    CONSTRAINT currency(typeExchange(UserInvoice invoice)) != homeCurrency(invoice)
        CHECKED BY typeExchange[UserInvoice] MESSAGE 'Тип обмена должен соответствовать валюте (конв.)';

    dateRateExchange 'Дата конвертации' = ABSTRACT DATE(Invoice);
    dateRateExchange 'Дата конвертации' = DATA DATE(UserInvoice);
    dateRateExchange(UserInvoice i) += dateRateExchange(i);

    dateRateExchange(UserInvoice i) <- date[Invoice](i) WHEN CHANGED (date[Invoice](i));

    rateExchange 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) PERSISTENT @@denominationRate;
    rateExchange 'Курс' = DATA NUMERIC[14,6](UserInvoice) @@denominationRate;
    rateExchange(UserInvoice i) += rateExchange(i);

    WHEN SESSION FORMS userInvoice CHANGED (dateRateExchange(UserInvoice i)) OR
                                   CHANGED (typeExchange(i)) OR
                                   CHANGED (currency(i)) DO {
        rateExchange(i) <- rateOn(typeExchange(i),
                                                                   currency(i),
                                                                   dateRateExchange(i));
    }

    rateExchange 'Курс' = ABSTRACT NUMERIC[14,6](InvoiceDetail) PERSISTENT @@denominationRate;

    dataRateExchange 'Курс' = DATA NUMERIC[14,6](UserInvoiceDetail) @@denominationRate;
    rateExchange 'Курс' (UserInvoiceDetail d) = OVERRIDE rateExchange(userInvoice(d)),  dataRateExchange(d);
    rateExchange(UserInvoiceDetail d) += rateExchange(d);

    homePrice 'Цена (конв.)' = ABSTRACT NUMERIC[16,4](InvoiceDetail) PERSISTENT @@denomination;
    homePrice 'Цена (конв.)' = DATA NUMERIC[16,4](UserInvoiceDetail) @@denomination;
    homePrice(UserInvoiceDetail d) += homePrice(d);
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) += ACTION {      
        dataRateExchange(d) <- dataRateExchange(detail);
    }  

    homePrice(UserInvoiceDetail d) <- round2(price(d) * rateExchange(d)) // пока округляем до копеек всегда
                                                   WHEN CHANGED (rateExchange(d)) OR
                                                        CHANGED (price(d));

    homeSum 'Сумма (конв.)' (InvoiceDetail d) = round2(sum(d) * rateExchange(d));
    homeSum 'Сумма (конв.)' (UserInvoiceDetail d) = round2(sum(d) * rateExchange(d));

    homeSumInvoiceDetail 'Сумма (конв.)' (invoice) = GROUP SUM homeSum(InvoiceDetail d)
                                                                  BY invoice(d);
    homeSumUserInvoiceDetail 'Сумма (конв.)' (invoice) = GROUP SUM homeSum(UserInvoiceDetail d)
                                                                          BY userInvoice(d);
                                                                          
    homePriceRound(InvoiceDetail d) += WHEN isHomeCurrency(d) THEN defaultRound(homeCurrency(d));

    EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundHomeCurrency(i) BEFORE nameAgreement(i)
                                                                    isHomeCurrency
        PROPERTIES(i) BACKGROUND backgroundHomeCurrency(i) SHOWIF isHomeCurrency(i)
                                                                    nameHomeCurrency, nameTypeExchange, dateRateExchange[Invoice], rateExchange[Invoice]
        PROPERTIES(d) BACKGROUND backgroundHomeCurrency(i) SHOWIF isHomeCurrency(i) AFTER sum(d)
                                                                    rateExchange, homePrice, homeSum[InvoiceDetail]
    ;

    DESIGN userInvoice {
        headerExtraParams {
            NEW headerHomeCurrency {
                caption = 'Конвертация';
                type = COLUMNS;
                columns = 1;
                MOVE PROPERTY(isHomeCurrency(i));
                MOVE PROPERTY(nameHomeCurrency(i));
                MOVE PROPERTY(nameTypeExchange(i));
                MOVE PROPERTY(dateRateExchange(i));
                MOVE PROPERTY(rateExchange(i));
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(d) READONLY BACKGROUND backgroundHomeCurrency(i) SHOWIF isHomeCurrency(i) AFTER sum(d)
                      rateExchange, homePrice, homeSum
    ;
END

META defineInvoicePayment(dumb)

    addPaymentInvoice 'Оплатить'(InContractLedger invoice) = ACTION {
        currentInContractLedger() <- invoice;
        FOR ADDOBJ p = Payment DO{
            contract(p) <- contractSku[UserInvoice](invoice);
            date(p) <- currentDate();
            time(p) <- currentTime();
            payer(p) <- customer[UserInvoice](invoice);
            beneficiary(p) <- supplier[UserInvoice](invoice);
            sum(p) <- invoiceSumUserInvoiceDetail(invoice);
            cost(p, invoice) <- sumContract(p);
            FORM payment OBJECTS p=p MODAL;
            IF NOT formResult() == FormResult.ok THEN {
                DELETE p;
            }
        }
    }

    editInvoice 'Редактировать'(Payment payment, InContractLedger invoice) = ACTION {
        currentInContractLedger() <- invoice;
        FORM payment OBJECTS p=payment MODAL;
    }

    EXTEND FORM userInvoice
        OBJECTS pm = Payment
        PROPERTIES(pm) READONLY seriesNumber, dateTime, namePayer, nameBeneficiary,
                                note, isPosted
        ORDER BY dateTime(pm)
        PROPERTIES(pm, i) cost
        PROPERTIES TODRAW pm FORCE PANEL TOOLBAR addPaymentInvoice(i), editInvoice(pm, i)
        PROPERTIES(pm) DELETESESSION

        FILTERGROUP filters
            FILTER 'Платежи по накладной' cost(pm, i) 'F10' DEFAULT
        FILTERS contract(pm) == contract[InContractLedger](i)
    ;

    DESIGN userInvoice{
        specification.box{
            NEW paymentContainer{
                caption = 'Платежи';
                MOVE pm.box;
            }
        }
    }
END

META defineDocumentExtraFilters(object, objectClass, form, container)
    filter###object###CustomUser  = DATA LOCAL CustomUser ();
    nameFilter###object###CustomUser 'Создан пользователем' = nameContact(filter###object###CustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUser###object### (i) = createdNameUserUser###object###(i) == filter###object###CustomUser() OR (i IS objectClass AND NOT filter###object###CustomUser());  

    filter###object###Computer = DATA LOCAL Computer ();
    nameFilter###object###Computer 'Создан на компьютере' = hostnameComputer(filter###object###Computer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputer###object### (i) = createdComputerUser###object###(i) == filter###object###Computer() OR (i IS objectClass AND NOT filter###object###Computer());           
        
    EXTEND FORM form 
    
        PROPERTIES() nameFilter###object###CustomUser, nameFilter###object###Computer
    ;
    
    DESIGN form {
        container { 
            MOVE PROPERTY(nameFilter###object###CustomUser());
            MOVE PROPERTY(nameFilter###object###Computer());                
        }         
    }    
END
