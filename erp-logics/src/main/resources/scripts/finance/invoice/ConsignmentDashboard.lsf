MODULE ConsignmentDashboard;

REQUIRE Dashboard, ConsignmentBy, OrderInvoice, TripOrderInvoice,  OrderInvoicePickingOrder, SaleInvoiceConsignmentBy, PurchaseReturnInvoiceConsignmentBy, TripInvoiceConsignmentBy; 

NAMESPACE Order;

inConsignmentPrint 'Отметить' = DATA LOCAL BOOLEAN (Order);

countInConsignmentPrintOrder = GROUP SUM 1 IF inConsignmentPrint(Order order);

hidePrintAction = TRUE AND NOT countInConsignmentPrintOrder();

countOrderConsignmentPrint = GROUP SUM 1 IF inConsignmentPrint(Order order) BY trip(order);

countInConsignmentPrintTrip = GROUP SUM 1 IF countOrderConsignmentPrint(Trip trip);

inConsignmentPrintTrip = GROUP MAX Trip trip IF countOrderConsignmentPrint(trip);

createNotPickedInvoice 'Выписывать накладные на заказы без комплектации' = DATA BOOLEAN ();
singleInvoicedOrder 'Считать выписанным заказ, по которому создана хоть одна накладная' = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES () createNotPickedInvoice, singleInvoicedOrder
;

DESIGN options {
    sale {        
        MOVE PROPERTY(createNotPickedInvoice());
        MOVE PROPERTY(singleInvoicedOrder());
    }    
}

printConsignment 'Создать накладные'(Order order) = ACTION {
    IF countInConsignmentPrintOrder() THEN {
        IF countInConsignmentPrintTrip() > 1 THEN {
            MESSAGE 'Выберите заказы одного рейса';
        } ELSE {
            inCreatePickingUserInvoicePosted(Order o) <- inConsignmentPrint(o);
            IF createNotPickedInvoice()
                THEN addUserInvoice(order)
                ELSE createPickingUserInvoicePosted(order);
            FOR createdUser(Invoice.Invoice i, Order o) DO {
                trip(i) <- trip(o);
                IF i IS Sale.Invoice AND trip(i) THEN {
                    date[Sale.UserInvoice](i) <- date(trip(i));
                    time[Sale.UserInvoice](i) <- OVERRIDE time(trip(i)), timeOfArrival(trip(i));
                    arrivalTime[Sale.Invoice](i) <- dateTime(trip(i));
                } ELSE IF i IS PurchaseReturn.Invoice AND trip(i) THEN {
                    date[PurchaseReturn.UserInvoice](i) <- date(trip(i));
                    time[PurchaseReturn.UserInvoice](i) <- OVERRIDE time(trip(i)), timeOfArrival(trip(i));
                    arrivalTime[PurchaseReturn.Invoice](i) <- dateTime(trip(i));                                
                }                
            }
            apply();
        }
    } ELSE {
        IF createNotPickedInvoice()
            THEN addUserInvoice(order)
            ELSE createPickingUserInvoicePosted(order);
        FOR createdUser(Invoice.Invoice i, order) DO {
            trip(i) <- trip(order);
            IF i IS Sale.Invoice AND trip(i) THEN {
                date[Sale.UserInvoice](i) <- date(trip(i));
                time[Sale.UserInvoice](i) <- OVERRIDE time(trip(i)), timeOfArrival(trip(i));
                arrivalTime[Sale.Invoice](i) <- dateTime(trip(i));
            } ELSE IF i IS PurchaseReturn.Invoice AND trip(i) THEN {
                date[PurchaseReturn.UserInvoice](i) <- date(trip(i));
                time[PurchaseReturn.UserInvoice](i) <- OVERRIDE time(trip(i)), timeOfArrival(trip(i));
                arrivalTime[PurchaseReturn.Invoice](i) <- dateTime(trip(i));                                
            }            
        }
        apply();
    }
} TOOLBAR EDITKEY 'ctrl ENTER';

isNecessaryPowerAttorney 'Необходима доверенность' = ABSTRACT BOOLEAN (Order) IN documentPrm;

backgroundStatusPickingPicking 'Цвет' (Order order) =  CASE
      WHEN isNecessaryPowerAttorney(order) THEN RGB(192,192,255)
      WHEN isReturn(order) THEN RGB(148,255,255)
      WHEN trip(order) THEN RGB(212,255,212)
      WHEN calcPart(order) THEN RGB(255,200,216)
      WHEN calcFull(order) THEN RGB(255,238,165)
; 

changeTrip(Order order) = ACTION {
    REQUEST OBJECT t 
    FORM dialogDateTrips OBJECTS d=date(order) DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
            trip (order) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            trip (order) <- NULL;   
    }
    apply();            
}

changeNumber (Invoice.Invoice invoice) = ACTION {
    REQUEST VARSTRING[28] INPUT;
    IF requestedString() THEN {
        number(invoice) <- requestedString();         
        apply();
    }    
}

changeSeries (Invoice.Invoice invoice) = ACTION {
    REQUEST STRING[2] INPUT;
    IF requestedString() THEN {
        series(invoice) <- requestedString();
        apply();
    }    
}

printed 'Распечатана' = DATA BOOLEAN (Consignment);
notPrinted = TRUE AND NOT printed(Consignment consignment);

filterOrders = IF createNotPickedInvoice() 
                    THEN Order order IS Order
                    ELSE picked(order);
                    
toInvoiced = CASE
                            WHEN singleInvoicedOrder() THEN TRUE IF Order o IS Order AND NOT invoicedOrderDetail(o)
                            WHEN createNotPickedInvoice() THEN TRUE IF toInvoice(o)
                            ELSE TRUE IF toInvoicePicked(o);
                    
toInvoiced = IF createNotPickedInvoice()
                         THEN TRUE IF toInvoice(OrderDetail order)
                         ELSE TRUE IF toInvoicePicked(order);                    

FORM consignmentDashboard 'Выписка накладных' AUTOREFRESH 60

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) date = OBJVALUE

    OBJECTS o=Order FIXED GRID
    PROPERTIES(o) inConsignmentPrint
    PROPERTIES(o) READONLY BACKGROUND backgroundStatusPickingPicking(o) nameDriverTrip, dateTrip
    PROPERTIES(o) BACKGROUND backgroundStatusPickingPicking(o) numberTrip ON CHANGE changeTrip(o)   
    PROPERTIES(o) READONLY BACKGROUND backgroundStatusPickingPicking(o) number, date, shipmentDate, nameFromStock, 
                  nameTo, nameToStock, addressToStock, grossWeightOrderPicking, packQuantity, quantityOrderDetail,
                  note
    PROPERTIES(o) printConsignment FORCE PANEL TOOLBAR
    FILTERS isPosted (o) AND filterOrders(o)
    FILTERGROUP toInvoice FILTER 'Не выписаны' toInvoiced(o) 'ctrl F6' DEFAULT
    FILTERGROUP opened FILTER 'Открыт' NOT isClosed(o) 'F4' DEFAULT
    FILTERGROUP filters FILTER 'Текущие заказы' date(o)<=dt 'F5' DEFAULT
                        FILTER 'Будущие заказы' date(o)>dt 'F6'       
    FILTERS out (o)
    
    OBJECTS d = OrderDetail FIXED GRID
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, nameBatch, quantity,
                  pickingQuantity, invoiced, toInvoicePicked    
    FILTERS order(d) == o
    FILTERGROUP toInvoiceDetail FILTER 'Не выписаны' toInvoiced(d) 'ctrl F6' DEFAULT 
    
    OBJECTS i = Invoice.Invoice FIXED GRID
    PROPERTIES (i) FORCE PANEL numInv=number ON CHANGE changeNumber(i), serInv=series ON CHANGE changeSeries(i)
    PROPERTIES (i) READONLY isPosted 
    PROPERTIES (i) READONLY number, series
    PROPERTIES (i) READONLY date, time, nameFromStock, nameTo, nameToStock, addressToStock, countInvoiceDetail, 
                   quantityInvoiceDetail, sumInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail, 
                   sumGrossWeightInvoiceDetail, seriesNumberOrder, note, noteOrder
    PROPERTIES (i) edit SHOWIF overShowEdit(i)
    PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR SHOWIF overShowDelete(i)

    PROPERTIES (i)  FORCE PANEL printVerticalA, printVerticalAB, printHorizontalA,
                                printVerticalB, printHorizontalB,
                                printAttach, printAttachXLS, printSimpleHorizontal, editAttributes,
                                printSimpleVertical, printSimpleAttach                        
                                
    FILTERS out (i)                            
    FILTERGROUP filters1 FILTER 'Предыдущие накладные' date(i)<dt 'F7'
                         FILTER 'Накладные на дату' date(i)==dt 'F8' DEFAULT
                         FILTER 'Будущие накладные' date(i)>dt 'F9'
    FILTERGROUP filters2 
        FILTER 'Нераспечатанные' notPrinted(i) 'F10' DEFAULT 
;

DESIGN consignmentDashboard {
    main{
        NEW base1Container {
            fill = 1;

             NEW base2Container {
                fill = 4;
                type = SPLITV;
                    NEW tabContainer{
                        type = TABBED;
                        fill = 1;
                        MOVE i.box{
                            caption = 'Накладные';
//                            PROPERTY(nameToInvoice){
//                                minimumCharWidth = 40;
//                            }
                            PROPERTY(addressToStock(o)){
                                caption = 'Адрес получателя';
                            }
//                            PROPERTY(nameToStockInvoice){                  
//                                minimumCharWidth = 45;
//                            }
                            PROPERTY(numInv) {
                                font = 'bold 18';
                            }
                            PROPERTY(serInv) {
                                font = 'bold 18';
                            }
                            PROPERTY(seriesNumberOrder(i)) { minimumCharWidth = 8; preferredCharWidth = 15;}
                        }
                        MOVE d.box{
                            caption = 'Детализация'; 
                        }
                    }
                    NEW secondContainer BEFORE tabContainer {
                        fill = 1;
                        MOVE o.box{
                            caption = 'Заказы';
                                PROPERTY(nameTo(o)){
                                    minimumCharWidth = 40;
                                }
                                PROPERTY(nameToStock(o)){
                                    minimumCharWidth = 45;
                                }
                                PROPERTY(date(o)){
                                    caption = 'Дата заказа';
                                }
                                PROPERTY(number(o)){
                                    caption = 'Номер заказа';
                                }
                                PROPERTY(addressToStock(o)){
                                    caption = 'Адрес получателя';
                                }
                                PROPERTY(inConsignmentPrint(o)){
                                    editKey = 'SPACE';
                                }
                            }
                        }
                    }
                    NEW printContainer {
                        NEW consignmentRow1 {
                            align = LEADING;
                            type = CONTAINERH;

                            NEW contOne {
                                caption = 'Накладная';
                                type = CONTAINERH;
                                MOVE PROPERTY(editAttributes(i));
                            }
                            NEW tn{
                                type = CONTAINERH;
                                caption = 'ТН-2';
                                MOVE PROPERTY(printSimpleVertical(i));
                                MOVE PROPERTY(printSimpleHorizontal(i));
                                MOVE PROPERTY(printSimpleAttach(i));
                            }
                        }
                        NEW consignmentRow2 {
                            type = COLUMNS;
                            columns = 5;
                            caption = 'ТТН-1';
                            MOVE PROPERTY(printVerticalA(i));
                            MOVE PROPERTY(printVerticalAB(i));
                            MOVE PROPERTY(printHorizontalA(i));
                            MOVE PROPERTY(printVerticalB(i));
                            MOVE PROPERTY(printHorizontalB(i));
                            MOVE PROPERTY(printAttach(i));
                            MOVE PROPERTY(printAttachXLS(i));
                        }
                        NEW consignmentRow3 {
                            type = CONTAINERH;
                            NEW export {
                                type = CONTAINERH;
                                caption = 'Экспорт';  
                            }                        
                        }
                    }
                }
                NEW thirdContainer BEFORE base1Container {
                    type = CONTAINERH;
                    caption = 'Шапка';
                    MOVE PROPERTY(date);
                }
        MOVE functions.box;
    }
}

@extendFormFilterRoleAccessNS(order, o, consignmentDashboard, Operation); 
@extendFormFilterRoleAccessNS(invoice, i, consignmentDashboard, Operation);

@extendFormFilterAccessStock(order, o, consignmentDashboard, fromStock, company);
@extendFormFilterAccessStock(invoice, i, consignmentDashboard, fromStock, company);

@extendFormFilterRoleAccess(order, o, consignmentDashboard);
@extendFormFilterRoleAccess(invoice, i, consignmentDashboard);


NAVIGATOR {
    saleDashboardNavigator {
        ADD consignmentDashboard;
    }
}
