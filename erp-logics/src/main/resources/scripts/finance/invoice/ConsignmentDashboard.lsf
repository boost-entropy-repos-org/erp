MODULE ConsignmentDashboard;

REQUIRE Dashboard, ConsignmentBy, OrderInvoice, TripOrderInvoice,  OrderInvoicePickingOrder, SaleInvoiceConsignmentBy, PurchaseReturnInvoiceConsignmentBy, TripInvoiceConsignmentBy; 

NAMESPACE Order;

inConsignmentPrintOrder 'Отметить' = DATA LOCAL BOOLEAN (Order);

countInConsignmentPrintOrder = GROUP SUM 1 IF inConsignmentPrintOrder(order);

hidePrintAction = TRUE AND NOT countInConsignmentPrintOrder();

countOrderConsignmentPrintTrip = GROUP SUM 1 IF inConsignmentPrintOrder(order) BY tripOrder(order);

countInConsignmentPrintTrip = GROUP SUM 1 IF countOrderConsignmentPrintTrip(trip);

inConsignmentPrintTrip = GROUP MAX trip IF countOrderConsignmentPrintTrip(trip);

printConsignmentOrder 'Создать накладные' = ACTION (order) {
    IF countInConsignmentPrintOrder() THEN {
        IF countInConsignmentPrintTrip() > 1 THEN {
            MESSAGE 'Выберите заказы одного рейса';
        } ELSE {
            inCreatePickingUserInvoicePostedOrder(o) <- inConsignmentPrintOrder(o);
            createPickingUserInvoicePostedOrder(order);
            FOR createdUserInvoiceOrder(i, o) DO {
                tripInvoice(i) <- tripOrder(o);
                IF i IS Sale.Invoice AND tripInvoice(i) THEN {
                    Sale.dateUserInvoice(i) <- dateTrip(tripInvoice(i));
                    Sale.timeUserInvoice(i) <- OVERRIDE timeTrip(tripInvoice(i)), timeOfArrivalTrip(tripInvoice(i));
                    Sale.arrivalTimeInvoice(i) <- dateTimeTrip(tripInvoice(i));
                } ELSE IF i IS PurchaseReturn.Invoice AND tripInvoice(i) THEN {
                    PurchaseReturn.dateUserInvoice(i) <- dateTrip(tripInvoice(i));
                    PurchaseReturn.timeUserInvoice(i) <- OVERRIDE timeTrip(tripInvoice(i)), timeOfArrivalTrip(tripInvoice(i));
                    PurchaseReturn.arrivalTimeInvoice(i) <- dateTimeTrip(tripInvoice(i));                                
                }                
            }
            apply();
        }
    } ELSE {
        createPickingUserInvoicePostedOrder(order);  
        FOR createdUserInvoiceOrder(i, order) DO {
            tripInvoice(i) <- tripOrder(order);
            IF i IS Sale.Invoice AND tripInvoice(i) THEN {
                Sale.dateUserInvoice(i) <- dateTrip(tripInvoice(i));
                Sale.timeUserInvoice(i) <- OVERRIDE timeTrip(tripInvoice(i)), timeOfArrivalTrip(tripInvoice(i));
                Sale.arrivalTimeInvoice(i) <- dateTimeTrip(tripInvoice(i));
            } ELSE IF i IS PurchaseReturn.Invoice AND tripInvoice(i) THEN {
                PurchaseReturn.dateUserInvoice(i) <- dateTrip(tripInvoice(i));
                PurchaseReturn.timeUserInvoice(i) <- OVERRIDE timeTrip(tripInvoice(i)), timeOfArrivalTrip(tripInvoice(i));
                PurchaseReturn.arrivalTimeInvoice(i) <- dateTimeTrip(tripInvoice(i));                                
            }            
        }
        apply();
    }
} TOOLBAR EDITKEY 'ctrl ENTER';

isNecessaryPowerAttorney 'Необходима доверенность' = ABSTRACT BOOLEAN (Order) IN documentPrm;

backgroundStatusPickingPickingOrder 'Цвет' (order) =  CASE
      WHEN isNecessaryPowerAttorney(order) THEN RGB(192,192,255)
      WHEN isReturnOrder(order) THEN RGB(148,255,255)
      WHEN tripOrder(order) THEN RGB(212,255,212)
      WHEN calcPartOrder(order) THEN RGB(255,200,216)
      WHEN calcFullOrder(order) THEN RGB(255,238,165)
; 

changeTripOrder = ACTION (order){
    REQUEST OBJECT t 
    FORM dialogDateTrips OBJECTS d=dateOrder(order) DIALOG SHOWDROP;
    IF formResult() == FormResult.ok THEN {
            tripOrder (order) <- requestedObject();
        } ELSE IF formResult() == FormResult.drop THEN {
            tripOrder (order) <- NULL;   
    }
    apply();            
}

changeNumberInvoice (invoice) = ACTION (invoice) {
    REQUEST STRING[18] INPUT;
    IF requestedString() THEN {
        Invoice.numberInvoice(invoice) <- requestedString();         
        apply();
    }    
}

changeSeriesInvoice (invoice) = ACTION (invoice) {
    REQUEST STRING[2] INPUT;
    IF requestedString() THEN {
        Invoice.seriesInvoice(invoice) <- requestedString();
        apply();
    }    
}

printedConsignment 'Распечатана' = DATA BOOLEAN (Consignment);
notPrintedConsignment = TRUE AND NOT printedConsignment(consignment);

FORM consignmentDashboard 'Выписка накладных' AUTOREFRESH 60

    OBJECTS dt = DATE FIXED PANEL
    PROPERTIES(dt) date = OBJVALUE

    OBJECTS o=Order FIXED GRID
    PROPERTIES(o) inConsignmentPrintOrder
    PROPERTIES(o) READONLY BACKGROUND backgroundStatusPickingPickingOrder(o) nameDriverTripOrder, dateTripOrder
    PROPERTIES(o) BACKGROUND backgroundStatusPickingPickingOrder(o) numberTripOrder ON CHANGE changeTripOrder(o)   
    PROPERTIES(o) READONLY BACKGROUND backgroundStatusPickingPickingOrder(o) numberOrder, dateOrder,
                  nameToOrder, nameToStockOrder, addressToStockOrder, grossWeightOrderPickingOrder, packQuantityOrder, quantityOrderDetailOrder,
                  noteOrder
    PROPERTIES(o) printConsignmentOrder FORCE PANEL TOOLBAR
    FILTERS isPostedOrder (o) AND pickedOrder(o)
    FILTERGROUP toInvoice FILTER 'Не выписаны' toInvoicePickedOrder(o) 'ctrl F6' DEFAULT
    FILTERGROUP opened FILTER 'Открыт' NOT isClosedOrder(o) 'F4' DEFAULT    
    FILTERGROUP filters FILTER 'Текущие заказы' dateOrder(o)<=dt 'F5' DEFAULT
                        FILTER 'Будущие заказы' dateOrder(o)>dt 'F6'       
    FILTERS outOrder (o)
    
    OBJECTS d = OrderDetail FIXED GRID
    PROPERTIES(d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, nameBatchOrderDetail, quantityOrderDetail,
                  pickingQuantityOrderDetail, Invoice.invoicedOrderDetail, toInvoicePickedOrderDetail    
    FILTERS orderOrderDetail(d) == o
    FILTERGROUP toInvoiceDetail FILTER 'Не выписаны' toInvoicePickedOrderDetail(d) 'ctrl F6' DEFAULT 
    
    OBJECTS i = Invoice.Invoice FIXED GRID
    PROPERTIES (i) FORCE PANEL numInv=numberInvoice ON CHANGE changeNumberInvoice(i), serInv=seriesInvoice ON CHANGE changeSeriesInvoice(i)
    PROPERTIES (i) READONLY isPostedInvoice 
    PROPERTIES (i) READONLY numberInvoice, seriesInvoice
    PROPERTIES (i) READONLY dateInvoice, timeInvoice, nameToInvoice, nameToStockInvoice, addressToStockInvoice, countInvoiceDetailInvoice, 
                   quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice, VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, 
                   sumGrossWeightInvoiceDetailInvoice, seriesNumberOrderInvoice, noteInvoice, noteOrderInvoice
    PROPERTIES (i) editInvoice
    PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR

    PROPERTIES (i)  FORCE PANEL printConsignmentVerticalA, printConsignmentVerticalAB, printConsignmentHorizontalA,
                                printConsignmentVerticalB, printConsignmentHorizontalB,
                                printConsignmentAttach, printConsignmentSimpleHorizontal, editAttributesConsignment,
                                printConsignmentSimpleVertical, printConsignmentSimpleAttach, printConsignmentAttachXLS
                                
                               
    FILTERS outInvoice (i)                            
    FILTERGROUP filters1 FILTER 'Предыдущие накладные' dateInvoice(i)<dt 'F7'
                         FILTER 'Накладные на дату' dateInvoice(i)==dt 'F8' DEFAULT
                         FILTER 'Будущие накладные' dateInvoice(i)>dt 'F9'
    FILTERGROUP filters2 
        FILTER 'Нераспечатанные' notPrintedConsignment(i) 'F10' DEFAULT 
;

DESIGN consignmentDashboard {
    main{
        NEW base1Container {
            fill = 1;

             NEW base2Container {
                fill = 4;
                type = SPLITV;
                    NEW tabContainer{
                        type = TABBED;
                        fill = 1;
                        MOVE i.box{
                            caption = 'Накладные';
//                            PROPERTY(nameToInvoice){
//                                minimumCharWidth = 40;
//                            }
                            PROPERTY(addressToStockOrder(o)){
                                caption = 'Адрес получателя';
                            }
//                            PROPERTY(nameToStockInvoice){                  
//                                minimumCharWidth = 45;
//                            }
                            PROPERTY(numInv) {
                                font = 'bold 18';
                            }
                            PROPERTY(serInv) {
                                font = 'bold 18';
                            }
                            PROPERTY(seriesNumberOrderInvoice(i)) { minimumCharWidth = 8; preferredCharWidth = 15;}
                        }
                        MOVE d.box{
                            caption = 'Детализация'; 
                        }
                    }
                    NEW secondContainer BEFORE tabContainer {
                        fill = 1;
                        MOVE o.box{
                            caption = 'Скомплектованные заказы';
                                PROPERTY(nameToOrder(o)){
                                    minimumCharWidth = 40;
                                }
                                PROPERTY(nameToStockOrder(o)){
                                    minimumCharWidth = 45;
                                }
                                PROPERTY(dateOrder(o)){
                                    caption = 'Дата заказа';
                                }
                                PROPERTY(numberOrder(o)){
                                    caption = 'Номер заказа';
                                }
                                PROPERTY(addressToStockOrder(o)){
                                    caption = 'Адрес получателя';
                                }
                                PROPERTY(inConsignmentPrintOrder(o)){
                                    editKey = 'SPACE';
                                }
                            }
                        }
                    }
                    NEW printContainer {
                        NEW consignmentRow1 {
                            align = LEADING;
                            type = CONTAINERH;

                            NEW contOne {
                                caption = 'Накладная';
                                type = CONTAINERH;
                                MOVE PROPERTY(editAttributesConsignment(i));
                            }
                            NEW tn{
                                type = CONTAINERH;
                                caption = 'ТН-2';
                                MOVE PROPERTY(printConsignmentSimpleVertical(i));
                                MOVE PROPERTY(printConsignmentSimpleHorizontal(i));
                                MOVE PROPERTY(printConsignmentSimpleAttach(i));
                                MOVE PROPERTY(printConsignmentSimpleAttach(i));
                            }
                        }
                        NEW consignmentRow2 {
                            type = COLUMNS;
                            columns = 5;
                            caption = 'ТТН-1';
                            MOVE PROPERTY(printConsignmentVerticalA(i));
                            MOVE PROPERTY(printConsignmentVerticalAB(i));
                            MOVE PROPERTY(printConsignmentHorizontalA(i));
                            MOVE PROPERTY(printConsignmentVerticalB(i));
                            MOVE PROPERTY(printConsignmentHorizontalB(i));
                            MOVE PROPERTY(printConsignmentAttach(i));
                        }
                        NEW consignmentRow3 {
                            type = CONTAINERH;
                            NEW export {
                                type = CONTAINERH;
                                caption = 'Экспорт';  
                                MOVE PROPERTY(printConsignmentAttachXLS(i));
                            }                        
                        }
                    }
                }
                NEW thirdContainer BEFORE base1Container {
                    type = CONTAINERH;
                    caption = 'Шапка';
                    MOVE PROPERTY(date);
                }
        MOVE functions.box;
    }
}

NAVIGATOR {
    saleDashboardNavigator {
        ADD consignmentDashboard;
    }
}
