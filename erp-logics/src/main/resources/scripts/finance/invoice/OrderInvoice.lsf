MODULE OrderInvoice;

REQUIRE Order, Invoice;

NAMESPACE Invoice;

createdUser = DATA LOCAL BOOLEAN (Invoice, Order);

createUserInvoice 'Создать накладную' = ACTION ABSTRACT LIST (Order);
createUserInvoicePosted 'Создать проведенную накладную' = ACTION ABSTRACT LIST (Order);

order = ABSTRACT Order (InvoiceDetail) PERSISTENT INDEXED;

TABLE orderSku (Order, Sku);
invoicedInvoiceDetail 'Выписано накладных' (order, sku) = GROUP SUM quantity(InvoiceDetail invoiceDetail) IF isPosted(invoiceDetail)
                                                           BY order(invoiceDetail), sku(invoiceDetail) PERSISTENT;
invoiced 'Кол-во (выписано)' (OrderDetail orderDetail) = PARTITION UNGROUP invoicedInvoiceDetail
                                                          LIMIT STRICT quantity (orderDetail)
                                                          BY order(orderDetail), sku(orderDetail)
                                                          ORDER orderDetail PERSISTENT;
                                                          
invoicedOrderDetail 'Кол-во (выписано)' = GROUP SUM invoiced(OrderDetail detail) BY order(detail) PERSISTENT;                                                         

toInvoice 'Не выписано' (OrderDetail orderDetail) = quantity (orderDetail) (-) invoiced(orderDetail);
toInvoice 'Не выписано' (order) = GROUP SUM 1 IF toInvoice(OrderDetail orderDetail) > 0 BY order(orderDetail) PERSISTENT;

quantity (order, invoice) = GROUP SUM quantity(InvoiceDetail invoiceDetail)
                                               BY order(invoiceDetail),
                                                  invoice(invoiceDetail);

seriesNumberOrder 'Заказы' = GROUP CONCAT seriesNumber(Order order) IF quantity (order, Invoice invoice), ','
                                              BY invoice
                                              ORDER order MINCHARWIDTH 10 PREFCHARWIDTH 20;

noteOrder 'Примечание (заказ)' = GROUP CONCAT note(Order order) IF quantity (order, Invoice invoice), ','
                                              BY invoice
                                              ORDER order MINCHARWIDTH 30 PREFCHARWIDTH 50;

GROUP orders 'Приемка по заказам' : base;

quantityInvoiceDetail (order, invoice) = GROUP SUM quantity(InvoiceDetail invoiceDetail) BY order(invoiceDetail), invoice(invoiceDetail);

// -------------- Создание накладной на основе заказа (для абстрактного заказа) ------------------------ // 

selected 'Отм.' = DATA LOCAL BOOLEAN (Order); 
minSelectedOrder = GROUP MIN Order o IF selected(o); 

overCreateMultiUserInvoice = ACTION ABSTRACT LIST (Order);

countSelectedOrder 'Кол-во отм.' = GROUP SUM 1 IF selected(Order order);
countSelectedClass 'Кол-во классов' = GROUP SUM 1 IF [= GROUP SUM 1 IF selected(Order order) BY objectClassName(order)](ISTRING[100] name);
countSelectedFromClass 'Кол-во отправителей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selected(Order order) BY from(order)](LegalEntity from);
countSelectedToClass 'Кол-во получателей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selected(Order order) BY to(order)](LegalEntity to);
countSelectedFromStockClass 'Кол-во складов отправителей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selected(Order order) BY fromStock(order)](Stock fromStock);
countSelectedToStockClass 'Кол-во складов получателей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selected(Order order) BY toStock(order)](Stock toStock);

addUserInvoice = ACTION ABSTRACT LIST (Order);

createMultiUserInvoice 'Создать накладную'(Order order) = ACTION {
    IF countSelectedOrder() THEN {
        IF countSelectedFromClass()!=1 OR countSelectedToClass() != 1 OR countSelectedFromStockClass()!=1 OR countSelectedToStockClass()!=1 THEN {
            MESSAGE 'Выбраны заказы с разными покупателями, поставщиками или их складами';               
        } ELSE {
            IF countSelectedClass()==1 THEN {
                overCreateMultiUserInvoice(minSelectedOrder());
            } ELSE {
                MESSAGE 'Выбраны заказы с разными классами';
            }        
        }
    } ELSE {
        addUserInvoice(order);            
    }    
} TOOLBAR;

//--  Связь с заказом

META defineOrderInvoice(sign, stockProp)

    order = ABSTRACT Order (InvoiceDetail) PERSISTENT;
    INDEX order(InvoiceDetail id), sku(id);
    order[Invoice.InvoiceDetail] (InvoiceDetail invoiceDetail) += order(invoiceDetail);

    order = DATA Order(UserInvoiceDetail) INDEXED;
    order(UserInvoiceDetail invoiceDetail) += order(invoiceDetail);
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) += ACTION {      
        order(d) <- order(detail);
    }  

    CONSTRAINT supplier[InvoiceDetail](UserInvoiceDetail invoiceDetail) != supplier(order(invoiceDetail)) OR
               customer(invoiceDetail) != customer(order(invoiceDetail))
        CHECKED BY order[UserInvoiceDetail]
            MESSAGE 'Поставщик и покупатель в заказе и накладной должны соответствовать друг другу';

    GROUP order 'Информация о заказе' : public;

    descriptionOrder 'Заказ' (InvoiceDetail invoiceDetail) = description(order(invoiceDetail)) IN order;
    descriptionOrder 'Заказ' (UserInvoiceDetail userInvoiceDetail) = description(order(userInvoiceDetail)) IN order;

    quantityInvoiceDetail (order, invoice) = GROUP SUM quantity(InvoiceDetail invoiceDetail) BY order(invoiceDetail), invoice(invoiceDetail);
    countInvoiceDetail(order, invoice) = GROUP SUM 1 BY order(InvoiceDetail invoiceDetail), invoice(invoiceDetail);
    orders 'Заказы' (invoice) = GROUP CONCAT VARSTRING[255](description(Order order)) IF countInvoiceDetail(order, Invoice invoice) , ', '
                                             BY invoice
                                             ORDER order
                                             IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;
                                             
    invoices 'Накладные' (order) = GROUP CONCAT VARSTRING[255](description(Invoice invoice)) IF countInvoiceDetail(Order order, invoice) , ', '
                                             BY order
                                             ORDER invoice
                                             IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50;                                             

    TABLE orderSku (Order, Sku);
    invoicedInvoiceDetail 'Выписано накладных' (order, sku) = GROUP SUM quantity(InvoiceDetail invoiceDetail) IF isPosted(invoiceDetail)
                                                               BY order(invoiceDetail), sku(invoiceDetail) PERSISTENT;
    invoiced 'Кол-во (выписано)' (OrderDetail orderDetail) = PARTITION UNGROUP invoicedInvoiceDetail
                                                              LIMIT STRICT quantity (orderDetail)
                                                              BY order(orderDetail), sku(orderDetail)
                                                              ORDER orderDetail PERSISTENT;
    invoicedOrderDetail 'Кол-во (выписано)' (order) = GROUP SUM invoiced(OrderDetail orderDetail) BY order(orderDetail) IN documentSum;

    toInvoice 'Не выписано' (OrderDetail orderDetail) = quantity (orderDetail) (-) invoiced(orderDetail);
    prevToInvoice (OrderDetail orderDetail) = PREV(toInvoice(orderDetail));
    toInvoice (order) = GROUP SUM toInvoice(OrderDetail orderDetail) IF toInvoice(orderDetail) >0 BY order(orderDetail);

    backgroundInvoice 'Цвет' (Order order) = RGB(175, 255, 175) IF order IS Order;

    maxOrderDetail (InvoiceDetail d) = maxOrderDetail(sku(d), order(d)) PERSISTENT INDEXED;
    quantityOrder 'К-во заказа' (InvoiceDetail d) = quantity(maxOrderDetail(d)); 
    priceOrder 'Цена заказа' (InvoiceDetail d) = price(maxOrderDetail(d));

    maxOrderDetailBatch (InvoiceDetail d) = maxOrderDetail(batch(d), order(d)) PERSISTENT INDEXED;
    priceOrderBatch (InvoiceDetail d) = price(maxOrderDetailBatch(d));
    
    orderDetail (InvoiceDetail d) = OVERRIDE maxOrderDetail(d), maxOrderDetailBatch(d) PERSISTENT INDEXED;
    priceOrderDetail (InvoiceDetail d) = price(orderDetail(d));

    // ------------------------------- Создание нового инвойса на основе заказов ---------------------------- //

    inSupplier (order, supplierStock) = GROUP SUM 1 IF supplierStock(OrderDetail orderDetail) == Stock supplierStock BY order(orderDetail), supplierStock;
    inSupplier (order, legalEntity) = GROUP SUM 1 IF legalEntity(supplierStock(OrderDetail orderDetail)) == LegalEntity supplier BY order(orderDetail), supplier;

    inCustomer (order, customerStock) = GROUP SUM 1 IF customerStock(OrderDetail orderDetail) == Stock customerStock BY order(orderDetail), customerStock;
    inCustomer (order, legalEntity) = GROUP SUM 1 IF legalEntity(customerStock(OrderDetail orderDetail)) == LegalEntity customer BY order(orderDetail), customer;

    useExplicitBatchDetailUserInvoice = ABSTRACT BOOLEAN (Order);

    differentStocksInDetails (Stock stock) = differentStocksInDetails(legalEntity(stock)) PERSISTENT;

    in (OrderDetail orderDetail, UserInvoice userInvoice) = (orderDetail IS OrderDetail AND userInvoice IS UserInvoice AND NOT supplierStock(userInvoice)) OR
                                                           supplierStock(orderDetail)==supplierStock(userInvoice);

    overFill = ACTION ABSTRACT LIST (UserInvoiceDetail, OrderDetail);
    overFill = ACTION ABSTRACT LIST (UserInvoice, Order);
    
    fill(UserInvoiceDetail id, OrderDetail od) = ACTION {    
        VAT(id) <- VAT(od);
        valueVAT(id) <- valueVAT(od);
        priceListType(id) <- priceListType(od);
        IF NOT notFillPriceInvoiceOrder(operation(od)) THEN {
            price(id) <- price(od);
            invoicePrice(id) <- invoicePrice(od);
        }
    }

    toInvoice (Batch batch, OrderDetail orderDetail) = PARTITION UNGROUP toInvoice
                                                               LIMIT STRICT currentBalance(batch, supplierStock(orderDetail)) IF sku(batch) == sku(orderDetail)
                                                               BY orderDetail
                                                               ORDER order(batch);

    orderCreateUserInvoice = ABSTRACT STRING[100] (OrderDetail);
    skipCreateUserInvoice = ABSTRACT BOOLEAN (OrderDetail);

    createDetail(UserInvoice userInvoice, Order order) = ACTION {
        IF useExplicitBatchDetailUserInvoice(order) AND explicitBatchLedger(stockProp##Stock(order)) THEN {
            // проходим по строкам, для которых не задана партия
            FOR order(OrderDetail orderDetail) == order AND toInvoice(Batch batch, orderDetail) AND NOT batch(orderDetail) AND NOT skipCreateUserInvoice(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail), orderDetail 
                ADDOBJ d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    order(d) <- order;
                    sku(d) <- sku(orderDetail);
                    batch(d) <- batch;
                    quantity (d) <- toInvoice(batch, orderDetail);
        
                    fill(d, orderDetail);
                    overFill(d, orderDetail);
            }
            // проходим по строкам, для которых задана партия
            FOR order(OrderDetail orderDetail) == order AND PREV(toInvoice(orderDetail)) AND batch(orderDetail) AND NOT skipCreateUserInvoice(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail), orderDetail
                ADDOBJ d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    order(d) <- order;
                    sku(d) <- sku(orderDetail);
                    batch(d) <- batch(orderDetail);
                    quantity (d) <- PREV(toInvoice(orderDetail));
        
                    fill(d, orderDetail);
                    overFill(d, orderDetail);
            }
        } ELSE
            FOR order(OrderDetail orderDetail) == order AND
                toInvoice(orderDetail) > 0 // возможно еще нужно фильтровать по складам
                AND in(orderDetail, userInvoice) AND NOT skipCreateUserInvoice(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail), orderDetail 
                ADDOBJ d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    order(d) <- order;
                    sku(d) <- sku(orderDetail);
                    batch(d) <- batch(orderDetail);
                    quantity (d) <- toInvoice(orderDetail);

                    fill(d, orderDetail);
                    overFill(d, orderDetail);
            }
    }
    
    fillPrice(UserInvoice userInvoice, Order order) = ACTION {
        IF notFillPriceInvoiceOrder(operation(order)) THEN {
            FOR userInvoice(UserInvoiceDetail d) == userInvoice AND PriceListType pt == priceListType(d) AND sku(d) NOINLINE (pt) DO {
                price(d) <- prevListMVAT (pt, d);
                invoicePrice(d) <- prevListPVAT (pt, d);
            }
        }
    }
    
    skipDeriveOrderPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
    prevList (PriceListType t, UserInvoiceDetail d) += WHEN t == priceListType(d) AND orderDetail(d) AND NOT notFillPriceInvoiceOrder(operation(d)) AND NOT skipDeriveOrderPrice(d) THEN priceOrderDetail(d);
    
    fillHeader(UserInvoice userInvoice, Order order) = ACTION {
        date(userInvoice) <- currentDate();
        time(userInvoice) <- currentTime();
        
        supplier(userInvoice) <- supplier(order) WHERE supplier(order);
        supplierStock(userInvoice) <- supplierStock(order) WHERE supplierStock(order);

        customer(userInvoice) <- customer(order) WHERE customer(order);
        customerStock(userInvoice) <- customerStock(order) WHERE customerStock(order);

        currency(userInvoice) <- currency(order) WHERE currency(order);
        agreement(userInvoice) <- agreement(order) WHERE agreement(order);
        priceListType(userInvoice) <- priceListType(order) WHERE priceListType(order);
        contractSku(userInvoice) <- contractSku(order) WHERE contractSku(order);
//        ASSIGN isCommissionUserInvoice(userInvoice) <- isCommissionOrder(order) WHERE isCommissionOrder(order);

        operation(userInvoice) <- operation(order) WHERE operation(order);
        date(userInvoice) <- shipmentDate(order) WHERE isShipmentDate(operation(order)) AND shipmentDate(order); 
        
        note(userInvoice) <- note(order) WHERE note(order);
        EXEC overFill(userInvoice, order);
    }
    
    fill(UserInvoice userInvoice, Order order) = ACTION {
        fillHeader(userInvoice, order);
        
        createDetail(userInvoice, order);
        fillPrice(userInvoice, order);
    }

    fillSupplier(Stock supplierStock, UserInvoice userInvoice, Order order) = ACTION {
        date(userInvoice) <- currentDate();
        time(userInvoice) <- currentTime();

        supplier(userInvoice) <- legalEntity(supplierStock);
        supplierStock(userInvoice) <- supplierStock;

        customer(userInvoice) <- customer(order);
        customerStock(userInvoice) <- customerStock(order);

        currency(userInvoice) <- currency(order);
        agreement(userInvoice) <- agreement(order);
        priceListType(userInvoice) <- priceListType(order);

        operation(userInvoice) <- operation(order) WHERE operation(order);
        note(userInvoice) <- note(order);

        createDetail(userInvoice, order);
        fillPrice(userInvoice, order);
    }

    userInvoice = DATA LOCAL UserInvoice (Order);
    
    TABLE orderUserInvoice (Order, UserInvoice);
    include 'Вкл. в накладную' = DATA BOOLEAN (Order, UserInvoice) MINCHARWIDTH 10 PREFCHARWIDTH 15;  
    countIncludeOrders (i) = GROUP SUM 1 IF include(Order o,UserInvoice i) BY i;
    
    overCreate = ACTION ABSTRACT LIST (Order, UserInvoice);
    
    createUserInvoice 'Создать накладную'(Order order) = ACTION {
        userInvoice(order) <- NULL;
        FOR ADDOBJ i = UserInvoice DO {
            fill(i, order);
            userInvoice(order) <- i;
            include(order,i) <- TRUE;
            overCreate (order, i);
        }
    }
    createUserInvoice (Order order) += ACTION createUserInvoice(order);

    createUserInvoicePosted 'Создать проведенную накладную'(Order order) = ACTION {
        IF differentStocksInDetails(customerStock(order)) THEN {
            FOR ADDOBJ i = UserInvoice DO {
                isPosted(i) <- TRUE;
                fill(i, order);
                createdUser(i, order) <- TRUE;
            }
        } ELSE {
            FOR inSupplier(order, Stock stock) ADDOBJ i = UserInvoice DO {
                isPosted(i) <- TRUE;
                fillSupplier(stock, i, order);
                createdUser(i, order) <- TRUE;
            }
        }
    }
    createUserInvoicePosted (Order order) += ACTION createUserInvoicePosted(order);

    addUserInvoice 'Накладная'###sign(Order order) =  ACTION NEWSESSION {
        createUserInvoice(order);
        FORM userInvoice OBJECTS i = userInvoice(order) MANAGESESSION DOCKEDMODAL NOCANCEL;
    } TOOLBAR;
    addUserInvoice (Order order) += ACTION addUserInvoice(order);

    EXTEND FORM orders
        PROPERTIES(o) addUserInvoice
    ;
    DESIGN orders {
        createdContainer{
            MOVE PROPERTY(addUserInvoice(o));
        }
    }

    // ---------------------------- Заполнение на основе заказа --------------------------- //

    supplierInvoiceOrder = DATA LOCAL LegalEntity ();
    nameSupplierInvoiceOrder 'Поставщик' = name(supplierInvoiceOrder());

    supplierStockInvoiceOrder = DATA LOCAL Stock ();
    nameSupplierStockInvoiceOrder 'Склад поставщика' = name(supplierStockInvoiceOrder());

    CONSTRAINT legalEntity(supplierStockInvoiceOrder())!= supplierInvoiceOrder() CHECKED BY supplierStockInvoiceOrder[] MESSAGE 'Выбран склад не текущего поставщика';

    customerInvoiceOrder = DATA LOCAL LegalEntity ();
    nameCustomerInvoiceOrder 'Покупатель' = name(customerInvoiceOrder());

    customerStockInvoiceOrder = DATA LOCAL Stock ();
    nameCustomerStockInvoiceOrder 'Склад покупателя' = name(customerStockInvoiceOrder());

    CONSTRAINT legalEntity(customerStockInvoiceOrder())!= customerInvoiceOrder() CHECKED BY customerStockInvoiceOrder[] MESSAGE 'Выбран склад не текущего покупателя';

    operationInvoiceOrder = DATA LOCAL Operation ();
    nameOperationInvoiceOrder 'Операция' = name(operationInvoiceOrder());

    FORM invoiceOrders 'Заказы'###sign
        PROPERTIES() nameSupplierInvoiceOrder, nameSupplierStockInvoiceOrder, nameCustomerInvoiceOrder, nameCustomerStockInvoiceOrder, nameOperationInvoiceOrder

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                countOrderDetail, quantityOrderDetail, sumOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                                note
        FILTERS isPosted(o),
                inSupplier(o, supplierInvoiceOrder()) OR (o IS Order AND NOT supplierInvoiceOrder()),
                customer(o) == customerInvoiceOrder() OR (o IS Order AND NOT customerInvoiceOrder()),
                customerStock(o) == customerStockInvoiceOrder() OR (o IS Order AND NOT customerStockInvoiceOrder()),
                inSupplier(o, supplierStockInvoiceOrder()) OR (o IS Order AND NOT supplierStockInvoiceOrder()),
                operation(o) == operationInvoiceOrder() OR (o IS Order AND NOT operationInvoiceOrder())
//        FILTERGROUP order
//            FILTER 'Заказы с невыписанными товарами со склада' 'F10' toInvoiceOrderDetailStockOrder(s, o) DEFAULT
//            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, invoiced, price, sum,
                        numberVAT, valueVAT, VATSum, invoiceSum,
                        name###stockProp##Stock
        FILTERS order(d) == o
//        FILTERGROUP orderDetail
//            FILTER 'Строки с невыписанными товарами со склада' 'F10' stockProp###stockOrderDetail(d) == stockProp###stockInvoiceOrder() AND toInvoiceOrderDetail(d) > 0 DEFAULT
//            FILTER 'Строки со склада' 'F9' stockProp###stockOrderDetail(d) == stockProp###stockInvoiceOrder()
    ;

    DESIGN invoiceOrders {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                type = CONTAINERV;
                fill = 1;

                MOVE o.box;
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE d.box {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }
            }
            NEW sessionPropContainer BEFORE documentContainer {
                MOVE PROPERTY(nameSupplierInvoiceOrder());
                MOVE PROPERTY(nameSupplierStockInvoiceOrder());
                MOVE PROPERTY(nameCustomerInvoiceOrder());
                MOVE PROPERTY(nameCustomerStockInvoiceOrder());
                MOVE PROPERTY(nameOperationInvoiceOrder());

            }
        }
    }

    fillOrder 'Заполнить на основе заказа'(UserInvoice userInvoice) =  ACTION {
        supplierInvoiceOrder() <- supplier(userInvoice) WHERE supplier(userInvoice);
        supplierStockInvoiceOrder() <- supplierStock(userInvoice) WHERE supplierStock(userInvoice);
        customerInvoiceOrder() <- customer(userInvoice) WHERE customer(userInvoice);
        customerStockInvoiceOrder() <- customerStock(userInvoice) WHERE customerStock(userInvoice);
        operationInvoiceOrder() <- operation(userInvoice) WHERE operation(userInvoice);

        FORM invoiceOrders MODAL;
        IF formResult() == FormResult.ok THEN {
            fill(userInvoice, chosenObject('o') AS Order);
        }
    } IN order;

    EXTEND FORM userInvoice
        PROPERTIES (d)  descriptionOrder AFTER invoiceSum(d)
    ;


    EXTEND FORM invoices
        PROPERTIES (i)  READONLY orders AFTER invoiceSumInvoiceDetail(i)
        PROPERTIES (d)  READONLY descriptionOrder AFTER invoiceSum(d)
    ;
    EXTEND FORM orders
        PROPERTIES (o)  READONLY BACKGROUND backgroundSku(o) invoices AFTER invoiceSumOrderDetail(o)
    ;            
// Создание инвойса на основе нескольких заказов //

    include 'Вкл. в накладную' = ABSTRACT BOOLEAN (Order, Invoice) MINCHARWIDTH 10 PREFCHARWIDTH 15;
    includeOrders 'Заказы в накладной' (invoice) = GROUP CONCAT VARSTRING[255](description(Order order)) IF include(order, Invoice invoice) , ', '
                                                        BY invoice
                                                        ORDER order IN orders MINCHARWIDTH 30 PREFCHARWIDTH 30;
                                                                                                               
    includeOrders 'Заказы в накладной' (userInvoice) = GROUP CONCAT VARSTRING[255](description(Order order)) IF include(order, UserInvoice userInvoice) , ', '
                                                        BY userInvoice
                                                        ORDER order IN orders MINCHARWIDTH 30 PREFCHARWIDTH 30;
    include(Order order,UserInvoice invoice) += include(order,invoice);    
                                                    
    numberOrders 'Заказы в накладной' (invoice) = GROUP CONCAT VARSTRING[255](number(Order order)) IF include(order, Invoice invoice) , ', '
                                                     BY invoice
                                                     ORDER order IN orders MINCHARWIDTH 30 PREFCHARWIDTH 30;
                                                                                                            
    numberOrders 'Заказы в накладной' (userInvoice) = GROUP CONCAT VARSTRING[255](number(Order order)) IF include(order, UserInvoice userInvoice) , ', '
                                                     BY userInvoice
                                                     ORDER order IN orders MINCHARWIDTH 30 PREFCHARWIDTH 30;                                                   
                                                        
    FORM includeOrdersUserInvoice 'Заказы'
        OBJECTS i = UserInvoice FIXED PANEL

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                countOrderDetail, quantityOrderDetail, sumOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                                note

        FILTERS supplier(o) == supplier(i),
                customer(o) == customer(i),
                supplierStock(o) == supplierStock(i),
                customerStock(o) == customerStock(i),
                isPosted(o),
                toInvoice(o) OR include[Order,Invoice](o,i)
                
                
        PROPERTIES(o,i) BACKGROUND backgroundInvoice(o) include BEFORE isPosted(o)
    ;
    
    relationInvoiceDetail (order, invoice) = GROUP SUM 1 BY order(InvoiceDetail invoiceDetail), invoice(invoiceDetail);
    notRelationInvoiceDetailOrder 'Включенные заказы, но по которым не созданы строки' (invoice)= GROUP SUM 1 
        IF include(Order order, UserInvoice invoice) AND NOT  relationInvoiceDetail(order, invoice) BY invoice; 
        
    notIncludeInvoiceDetailOrder 'Есть строки накладной с сылкой на заказ, который не включен в накладную' (invoice)= GROUP SUM 1 
        IF relationInvoiceDetail(Order order, Invoice invoice) AND NOT include[Order,UserInvoice](order, invoice)  BY invoice;         

    dialogIncludeOrdersUser 'Включить заказы в накладную' (Invoice userInvoice) = ACTION {
        FORM includeOrdersUserInvoice OBJECTS i = userInvoice MODAL;
        IF formResult() == FormResult.ok THEN {
            IF notRelationInvoiceDetailOrder(userInvoice) THEN {
                CONFIRM 'Создать по выбранным заказам строки накладной?';
                IF (confirmed()) THEN {  
                    FOR include[Order,UserInvoice](Order order, userInvoice) AND NOT  relationInvoiceDetail(order, userInvoice) DO {
                        
                        createDetail(userInvoice, order);
                        fillPrice(userInvoice, order);
   
                        userInvoice(order) <- userInvoice;                         
                    }                                   
                }              
            }
            IF notIncludeInvoiceDetailOrder(userInvoice) THEN {
                CONFIRM 'В накладной присутствуют строки с сылкой на заказ, который не включен в накладную. Удалить эти строки?';
                IF (confirmed()) THEN {  
                    FOR relationInvoiceDetail(Order order, userInvoice) AND NOT include[Order,UserInvoice](order, userInvoice) DO {
                        
                        DELETE UserInvoiceDetail d WHERE userInvoice(d) == userInvoice AND order(d) == order;     
                        userInvoice(order) <- NULL;                         
                    }                                   
                }                       
            }            
        }                 
    } IN orders;

    defaultOrder (sku, userInvoice) = GROUP MAX Order order IF include(order, UserInvoice userInvoice) 
        AND order(OrderDetail detail)==order
        BY sku(detail), userInvoice;

    connectOrder 'Привязать строку накладной к заказу'(UserInvoiceDetail detail) = ACTION {
        order(detail) <- defaultOrder(sku(detail), userInvoice(detail)) 
                                                    WHERE defaultOrder(sku(detail), userInvoice(detail));
    } SHORTCUT descriptionOrder[UserInvoiceDetail];

    connectOrder 'Привязать все строки накладной к заказам'(UserInvoice userInvoice) = ACTION {
        FOR userInvoice(UserInvoiceDetail detail) == userInvoice DO {
            EXEC connectOrder(detail);
        }
    } SHORTCUT descriptionOrder[UserInvoiceDetail];

    WHEN SESSION FORMS userInvoice
        CHANGED(sku(UserInvoiceDetail detail)) AND NOT order(detail)       
            DO EXEC connectOrder(detail);

    EXTEND FORM userInvoice
        PROPERTIES(i) dialogIncludeOrdersUser, includeOrders READONLY//, connectOrderUserInvoice
    ;
    DESIGN userInvoice {
        headerCreateDetail {
            MOVE i.orders {
                type = CONTAINERV;
            }
        }
    }
//-- 
    
    createMultiUserInvoice(Order order) = ACTION {
        IF order IS Order THEN {
            FOR ADDOBJ i = UserInvoice DO {
                FOR selected(Order.Order o) DO {
                    fill(i, o);   
                    include[Order,UserInvoice](o,i)<- TRUE;             
                }     
                              
                FORM userInvoice OBJECTS i = i DOCKEDMODAL;
                IF formResult() == FormResult.ok THEN {
                    apply();
                } ELSE {
                    FOR userInvoice(UserInvoiceDetail d)==i DO {
                        DELETE d;   
                    }
                    DELETE i;
                }
            }
        }
    }
    overCreateMultiUserInvoice(Order o)+= ACTION createMultiUserInvoice(o);

    // автомтатическое закрытие заказов
    WHEN SET(order(InvoiceDetail d) AND isPosted(d)) AND autoCloseOrders(stockProp###stock(d)) AND NOT isClosed(order(d)) DO
        isClosed(UserOrder o) <- TRUE WHERE o == order(d);

//-- агр.объект

    // todo : временно отключено из-за тормозов при вводе количества в подборе, так как строка заказов может начать влиять на партии
//    @defineDocumentInterfaceDetailQuantityPrefix (order, invoice, ' (выписано)');
//    invoiceQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail) WHEN CHANGED(quantityUserOrderDetail(detail));
//    @defineDocumentInterfaceProperty (order, createInvoice, 'Создать накладную');
//
//
//    showInvoiceOrder (order) =  order IS Order AND NOT createInvoiceOrder(order);
//    
//    EXTEND FORM userOrder
//        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) createInvoiceUserOrder
//        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) SHOWIF createInvoiceUserOrder(o) seriesNumberContractSkuUserOrder, isCommissionUserOrder
//
//        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//        PROPERTIES(d) invoiceQuantityUserOrderDetail AFTER quantityUserOrderDetail SHOWIF createInvoiceUserOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//    ;
//    DESIGN userOrder {
//        headerCreateDocuments {
//            NEW headerInvoice {
//                type = CONTAINERH;
//                caption = 'Накладная';
//                ADD PROPERTY(createInvoiceUserOrder);
//                ADD PROPERTY(seriesNumberContractSkuUserOrder);
//                ADD PROPERTY(isCommissionUserOrder);
//            }
//        }
//    }
//
//    EXTEND FORM orders
//        PROPERTIES(o) READONLYIF isReadonly() AFTER nameAgreementOrder(o) BACKGROUND backgroundInvoiceOrder(o) isCommissionOrder, seriesNumberContractSkuOrder
//
//        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityOrderDetail SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//        PROPERTIES(d) invoiceQuantityOrderDetail AFTER quantityOrderDetail SHOWIF createInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//    ;
//    EXTEND FORM invoiceOrders
//        PROPERTIES (d) READONLY BACKGROUND backgroundInvoiceOrder(o)  toInvoiceOrderDetail
//    ;

//    CLASS OrderInvoice 'Накладная на основе заказа'###sign : Invoice;
//    CLASS OrderInvoiceDetail 'Строка накладной на основе заказа'###sign : InvoiceDetail;
//
//    @defineDocumentTables(orderInvoice);
//
//    @defineDocumentAggregation(order, orderInvoice, createInvoiceOrder);
//
//    invoiceInvoiceDetail(detail) += orderInvoiceOrderInvoiceDetail(detail);
//
//    @defineDocumentDetailIndex(orderInvoice);
//
//    dateInvoice(invoice) += dateOrderInvoice(invoice);
//    timeInvoice(invoice) += timeOrderInvoice(invoice);
//
//    @defineDocumentAggregationStockPrefix(order, orderInvoice, supplierStock, 'Склад поставщика', , );
//    supplierStockInvoice(invoice) += supplierStockOrderInvoice(invoice);
//    dataSupplierStockInvoiceDetail(invoiceDetail) += dataSupplierStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    @defineDocumentAggregationStockPrefix(order, orderInvoice, customerStock, 'Склад покупателя', , );
//    customerStockInvoice(invoice) += customerStockOrderInvoice(invoice);
//    dataCustomerStockInvoiceDetail(invoiceDetail) += dataCustomerStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//
//    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, supplier, 'Поставщик', , );
//    supplierInvoice(invoice) += supplierOrderInvoice(invoice);
//    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, customer, 'Покупатель', , );
//    customerInvoice(invoice) += customerOrderInvoice(invoice);
//
//    @defineDocumentAggregationPosted(order, orderInvoice);
//    isPostedInvoice(invoice) += isPostedOrderInvoice(invoice);
//    
//    @defineDocumentAggregationClosed(order, orderInvoice);
//    isClosedInvoice(invoice) += isClosedOrderInvoice(invoice);    
//
//    numberOrderInvoice 'Номер документа' (orderInvoice) = numberOrder(orderOrderInvoice(orderInvoice));
//    numberInvoice(invoice) += numberOrderInvoice(invoice);
//
//    seriesOrderInvoice 'Серия документа' (orderInvoice) = seriesOrder(orderOrderInvoice(orderInvoice));
//    seriesInvoice(invoice) += seriesOrderInvoice(invoice);
//
//    seriesNumberOrderInvoice 'Серия/номер документа' (orderInvoice) = seriesNumberOrder(orderOrderInvoice(orderInvoice));
//
//    noteInvoiceOrderInvoice 'Примечание' (orderInvoice) = noteOrder(orderOrderInvoice(orderInvoice));
//    noteInvoice(invoice) += noteInvoiceOrderInvoice(invoice);
//
//    currencyOrderInvoice  (orderInvoice) = currencyOrder(orderOrderInvoice(orderInvoice));
//    currencyInvoice (invoice) += currencyOrderInvoice(invoice);
//
//    priceListTypeInvoice(invoice) += priceListTypeOrder(orderOrderInvoice(invoice));
//    agreementInvoice(invoice) += agreementOrder(orderOrderInvoice(invoice));
//    contractSkuInvoice(invoice) += contractSkuOrder(orderOrderInvoice(invoice));
//    isCommissionInvoice (invoice) += isCommissionOrder(orderOrderInvoice(invoice));
//
////    @defineDocumentDescription(orderInvoice, OrderInvoiceDetail, 'Накладная на основе заказа'###sign);
////    descriptionInvoice (invoice) += descriptionOrderInvoice(invoice);
//
//    @defineDocumentAggregationDetailSku(order, orderInvoice, sku);
//    skuInvoiceDetail(invoiceDetail) +=  skuOrderInvoiceDetail(invoiceDetail);
//
//    priceListTypeInvoiceDetail(detail) += priceListTypeOrderDetail(orderDetailOrderInvoiceDetail(detail));
//
//
//    quantityInvoiceDetail(invoiceDetail) += invoiceQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    priceInvoiceDetail(invoiceDetail) += priceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    sumInvoiceDetail(invoiceDetail) += sumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    VATInvoiceDetail(invoiceDetail) += VATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    valueVATInvoiceDetail(invoiceDetail) += valueVATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    invoicePriceInvoiceDetail(invoiceDetail) += invoicePriceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    invoiceSumInvoiceDetail(invoiceDetail) += invoiceSumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    VATSumInvoiceDetail(invoiceDetail) += VATSumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//
//    orderInvoiceDetail(invoiceDetail) += orderOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//
//    editInvoice(invoice) += ACTION EXEC editOrder(orderOrderInvoice(invoice));

END

META defineOrderInvoicePack (showPackage)

    overFill(UserInvoiceDetail i, OrderDetail o) += ACTION {
        IF o IS OrderDetail THEN { // иначе не может определить тип o
            barcodePack(i) <- barcodePack(o);
            amountPack(i) <- amountPack(o);
            packQuantity (i) <- quantity(i) / (amountPack(i) IF amountPack(i) != 0);
        }
    }

//    showPackInvoice(invoice) += showPackOrder(orderOrderInvoice(invoice));
//    barcodePackInvoiceDetail(invoiceDetail) +=  barcodePackOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    amountPackInvoiceDetail(invoiceDetail) +=  amountPackOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    packQuantityInvoiceDetail(invoiceDetail) +=  packQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

END

META defineInvoiceOrder(sign, NS, batchProp, legalProp, stockProp)

    createUserOrder 'Создать заказ'(Invoice invoice) = ACTION NEWSESSION {
        FOR ADDOBJ o = NS.UserOrder DO {
            supplier(o) <- legalProp(invoice);
            supplierStock(o) <- stockProp(invoice);
            
            FOR invoice(InvoiceDetail detail) == invoice ADDOBJ d = NS.UserOrderDetail DO {
                userOrder(d) <- o; 
                sku(d) <- sku(detail);   
                batch(d) <- batchProp(detail);
                quantity(d) <- quantity(detail); 
            }
            
            FORM NS.userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;        
        }
    } TOOLBAR; 
    
    EXTEND FORM invoices 
        PROPERTIES(i) createUserOrder     
    ;
    DESIGN invoices {
        createdContainer {
    
            MOVE PROPERTY(createUserOrder(i)) { caption = 'Заказ'###sign;}
        }
    }
END 
