MODULE OrderInvoice;

REQUIRE Order, Invoice;

NAMESPACE Invoice;

createdUserInvoiceOrder = DATA LOCAL BOOLEAN (Invoice, Order);

createUserInvoiceOrder 'Создать накладную' = ABSTRACT ACTION LIST (Order);
createUserInvoicePostedOrder 'Создать проведенную накладную' = ABSTRACT ACTION LIST (Order);

orderInvoiceDetail = ABSTRACT Order (InvoiceDetail) PERSISTENT INDEXED;

invoicedInvoiceDetailOrderSku 'Выписано накладных' (order, sku) = GROUP SUM quantityInvoiceDetail(invoiceDetail) IF isPostedInvoiceDetail(invoiceDetail)
                                                           BY orderInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail);
invoicedOrderDetail 'Кол-во (выписано)' (orderDetail) = PARTITION UNGROUP invoicedInvoiceDetailOrderSku
                                                          LIMIT STRICT quantityOrderDetail (orderDetail)
                                                          BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                          ORDER orderDetail PERSISTENT;

toInvoiceOrderDetail 'Не выписано' (orderDetail) = quantityOrderDetail (orderDetail) (-) invoicedOrderDetail(orderDetail);
toInvoiceOrder 'Не выписано' (order) = GROUP SUM 1 IF toInvoiceOrderDetail(orderDetail) > 0 BY orderOrderDetail(orderDetail) PERSISTENT;

quantityOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail)
                                               BY orderInvoiceDetail(invoiceDetail),
                                                  invoiceInvoiceDetail(invoiceDetail);

seriesNumberOrderInvoice 'Заказы' = GROUP CONCAT seriesNumberOrder(order) IF quantityOrderInvoice (order, invoice), ','
                                              BY invoice
                                              ORDER order;

noteOrderInvoice 'Примечание (заказ)' = GROUP CONCAT noteOrder(order) IF quantityOrderInvoice (order, invoice), ','
                                              BY invoice
                                              ORDER order;

GROUP orders 'Приемка по заказам' : base;

quantityInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail) BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

// -------------- Создание накладной на основе заказа (для абстрактного заказа) ------------------------ // 

selectedOrder 'Отм.' = DATA LOCAL BOOLEAN (Order); 
minSelectedOrder = GROUP MIN o IF selectedOrder(o); 

overCreateMultiUserInvoiceOrder = ABSTRACT ACTION LIST (Order);

countSelectedOrder 'Кол-во отм.' = GROUP SUM 1 IF selectedOrder(order);
countSelectedClass 'Кол-во классов' = GROUP SUM 1 IF [= GROUP SUM 1 IF selectedOrder(order) BY objectClassName(order)](name);
countSelectedFromClass 'Кол-во отправителей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selectedOrder(order) BY fromOrder(order)](from);
countSelectedToClass 'Кол-во получателей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selectedOrder(order) BY toOrder(order)](to);
countSelectedFromStockClass 'Кол-во складов отправителей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selectedOrder(order) BY fromStockOrder(order)](fromStock);
countSelectedToStockClass 'Кол-во складов получателей' = GROUP SUM 1 IF [= GROUP SUM 1 IF selectedOrder(order) BY toStockOrder(order)](toStock);

addUserInvoiceOrder = ABSTRACT ACTION LIST (Order);

createMultiUserInvoice 'Создать накладную' = ACTION (order) {
    IF countSelectedOrder() THEN {
        IF countSelectedFromClass()!=1 OR countSelectedToClass() != 1 OR countSelectedFromStockClass()!=1 OR countSelectedToStockClass()!=1 THEN {
            MESSAGE 'Выбраны заказы с разными покупателями, поставщиками или их складами';               
        } ELSE {
            IF countSelectedClass()==1 THEN {
                overCreateMultiUserInvoiceOrder(minSelectedOrder());
            } ELSE {
                MESSAGE 'Выбраны заказы с разными классами';
            }        
        }
    } ELSE {
        addUserInvoiceOrder(order);            
    }    
} TOOLBAR;

//--  Связь с заказом

META defineOrderInvoice(sign, stockProp)

    orderInvoiceDetail = ABSTRACT Order (InvoiceDetail) PERSISTENT;
    INDEX orderInvoiceDetail, skuInvoiceDetail;
    INDEX skuInvoiceDetail;
    Invoice.orderInvoiceDetail (invoiceDetail) += orderInvoiceDetail(invoiceDetail);

    orderUserInvoiceDetail = DATA Order(UserInvoiceDetail);
    orderInvoiceDetail(invoiceDetail) += orderUserInvoiceDetail(invoiceDetail);
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {      
        orderUserInvoiceDetail(d) <- orderUserInvoiceDetail(detail);
    }  

    CONSTRAINT supplierInvoiceDetail(invoiceDetail) != supplierOrder(orderUserInvoiceDetail(invoiceDetail)) OR
               customerUserInvoiceDetail(invoiceDetail) != customerOrder(orderUserInvoiceDetail(invoiceDetail))
        CHECKED BY orderUserInvoiceDetail
            MESSAGE 'Поставщик и покупатель в заказе и накладной должны соответствовать друг другу';

    GROUP order 'Информация о заказе' : public;

    descriptionOrderInvoiceDetail 'Заказ' (invoiceDetail) = descriptionOrder(orderInvoiceDetail(invoiceDetail)) IN order;
    descriptionOrderUserInvoiceDetail 'Заказ' (userInvoiceDetail) = descriptionOrder(orderUserInvoiceDetail(userInvoiceDetail)) IN order;

    quantityInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail) BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);
    ordersInvoice 'Заказы' (invoice) = GROUP CONCAT VARSTRING[255](descriptionOrder(order)) IF quantityInvoiceDetailOrderInvoice(order, invoice) , ', '
                                             BY invoice
                                             ORDER order
                                             IN order MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;
                                             
    invoicesOrder 'Накладные' (order) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityInvoiceDetailOrderInvoice(order, invoice) , ', '
                                             BY order
                                             ORDER invoice
                                             IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50;                                             

    invoicedInvoiceDetailOrderSku 'Выписано накладных' (order, sku) = GROUP SUM quantityInvoiceDetail(invoiceDetail) IF isPostedInvoiceDetail(invoiceDetail)
                                                               BY orderInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail);
    invoicedOrderDetail 'Кол-во (выписано)' (orderDetail) = PARTITION UNGROUP invoicedInvoiceDetailOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail PERSISTENT;

    toInvoiceOrderDetail 'Не выписано' (orderDetail) = quantityOrderDetail (orderDetail) (-) invoicedOrderDetail(orderDetail);
    toInvoiceOrder (order) = GROUP SUM toInvoiceOrderDetail(orderDetail) IF toInvoiceOrderDetail(orderDetail) >0 BY orderOrderDetail(orderDetail);

    backgroundInvoiceOrder 'Цвет' (order) = RGB(175, 255, 175) IF order IS Order;

    // ------------------------------- Создание нового инвойса на основе заказов ---------------------------- //

    inOrderSupplierStock (order, supplierStock) = GROUP SUM 1 IF supplierStockOrderDetail(orderDetail) == supplierStock BY orderOrderDetail(orderDetail), supplierStock;
    inOrderSupplier (order, legalEntity) = GROUP SUM 1 IF legalEntityStock(supplierStockOrderDetail(orderDetail)) == supplier BY orderOrderDetail(orderDetail), supplier;

    inOrderCustomerStock (order, customerStock) = GROUP SUM 1 IF customerStockOrderDetail(orderDetail) == customerStock BY orderOrderDetail(orderDetail), customerStock;
    inOrderCustomer (order, legalEntity) = GROUP SUM 1 IF legalEntityStock(customerStockOrderDetail(orderDetail)) == customer BY orderOrderDetail(orderDetail), customer;

    useExplicitBatchDetailUserInvoiceOrder = ABSTRACT BOOLEAN (Order);

    differentStocksInDetailsStock (stock) = differentStocksInDetailsLegalEntity(legalEntityStock(stock)) PERSISTENT;

    inOrderDetailUserInvoice (orderDetail, userInvoice) = (orderDetail IS OrderDetail AND userInvoice IS UserInvoice AND NOT supplierStockUserInvoice(userInvoice)) OR
                                                           supplierStockOrderDetail(orderDetail)==supplierStockUserInvoice(userInvoice);

    overFillUserInvoiceDetailOrderDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, OrderDetail);
    overFillUserInvoiceOrder = ABSTRACT ACTION LIST (UserInvoice, Order);
    
    fillUserInvoiceDetailOrderDetail = ACTION (id, od) {    
        VATUserInvoiceDetail(id) <- VATOrderDetail(od);
        valueVATUserInvoiceDetail(id) <- valueVATOrderDetail(od);
        priceListTypeUserInvoiceDetail(id) <- priceListTypeOrderDetail(od);
        IF NOT notFillPriceInvoiceOrderOperation(operationOrderDetail(od)) THEN {
            priceUserInvoiceDetail(id) <- priceOrderDetail(od);
            invoicePriceUserInvoiceDetail(id) <- invoicePriceOrderDetail(od);
        }
        data###stockProp###stockUserInvoiceDetail(id) <- data###stockProp###stockOrderDetail(od);
    }

    toInvoiceBatchOrderDetail (batch, orderDetail) = PARTITION UNGROUP toInvoiceOrderDetail
                                                               LIMIT STRICT currentBalanceBatchStock(batch, supplierStockOrderDetail(orderDetail)) IF skuBatch(batch) == skuOrderDetail(orderDetail)
                                                               BY orderDetail
                                                               ORDER orderBatch(batch);

    orderCreateUserInvoiceOrderDetail = ABSTRACT STRING[100] (OrderDetail);

    createDetailUserInvoiceOrder = ACTION (userInvoice, order) {
        IF useExplicitBatchDetailUserInvoiceOrder(order) AND explicitBatchLedgerStock(stockProp###stockOrder(order)) THEN {
            // проходим по строкам, для которых не задана партия
            FOR orderOrderDetail(orderDetail) == order AND toInvoiceBatchOrderDetail(batch, orderDetail) AND NOT batchOrderDetail(orderDetail)
                ORDER orderCreateUserInvoiceOrderDetail(orderDetail) 
                ADDOBJ d = UserInvoiceDetail DO {
                    userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    orderUserInvoiceDetail(d) <- order;
                    skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    batchUserInvoiceDetail(d) <- batch;
                    quantityUserInvoiceDetail (d) <- toInvoiceBatchOrderDetail(batch, orderDetail);
        
                    fillUserInvoiceDetailOrderDetail(d, orderDetail);
                    overFillUserInvoiceDetailOrderDetail(d, orderDetail);
            }
            // проходим по строкам, для которых задана партия
            FOR orderOrderDetail(orderDetail) == order AND PREV(toInvoiceOrderDetail(orderDetail)) AND batchOrderDetail(orderDetail)
                ORDER orderCreateUserInvoiceOrderDetail(orderDetail) 
                ADDOBJ d = UserInvoiceDetail DO {
                    userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    orderUserInvoiceDetail(d) <- order;
                    skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    batchUserInvoiceDetail(d) <- batchOrderDetail(orderDetail);
                    quantityUserInvoiceDetail (d) <- PREV(toInvoiceOrderDetail(orderDetail));
        
                    fillUserInvoiceDetailOrderDetail(d, orderDetail);
                    overFillUserInvoiceDetailOrderDetail(d, orderDetail);
            }
        } ELSE
            FOR orderOrderDetail(orderDetail) == order AND
                toInvoiceOrderDetail(orderDetail) > 0 // возможно еще нужно фильтровать по складам
                AND inOrderDetailUserInvoice(orderDetail, userInvoice)
                ORDER orderCreateUserInvoiceOrderDetail(orderDetail) 
                ADDOBJ d = UserInvoiceDetail DO {
                    userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    orderUserInvoiceDetail(d) <- order;
                    skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    batchUserInvoiceDetail(d) <- batchOrderDetail(orderDetail);
                    quantityUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail);

                    fillUserInvoiceDetailOrderDetail(d, orderDetail);
                    overFillUserInvoiceDetailOrderDetail(d, orderDetail);
            }
    }
    
    fillPriceUserInvoiceOrder = ACTION (userInvoice, order) {
        IF notFillPriceInvoiceOrderOperation(operationOrder(order)) THEN {
            FOR userInvoiceUserInvoiceDetail(d) == userInvoice AND pt == priceListTypeUserInvoiceDetail(d) AND skuUserInvoiceDetail(d) NOINLINE (pt) DO {
                priceUserInvoiceDetail(d) <- prevListPriceMVATUserInvoiceDetail (pt, d);
                invoicePriceUserInvoiceDetail(d) <- prevListPricePVATUserInvoiceDetail (pt, d);
            }
        }
    }
    
    fillHeaderUserInvoiceOrder = ACTION (userInvoice, order) {
        dateUserInvoice(userInvoice) <- currentDate();
        timeUserInvoice(userInvoice) <- currentTime();
        
        supplierUserInvoice(userInvoice) <- supplierOrder(order) WHERE supplierOrder(order);
        supplierStockUserInvoice(userInvoice) <- supplierStockOrder(order) WHERE supplierStockOrder(order);

        customerUserInvoice(userInvoice) <- customerOrder(order) WHERE customerOrder(order);
        customerStockUserInvoice(userInvoice) <- customerStockOrder(order) WHERE customerStockOrder(order);

        currencyUserInvoice(userInvoice) <- currencyOrder(order) WHERE currencyOrder(order);
        agreementUserInvoice(userInvoice) <- agreementOrder(order) WHERE agreementOrder(order);
        priceListTypeUserInvoice(userInvoice) <- priceListTypeOrder(order) WHERE priceListTypeOrder(order);
        contractSkuUserInvoice(userInvoice) <- contractSkuOrder(order) WHERE contractSkuOrder(order);
//        ASSIGN isCommissionUserInvoice(userInvoice) <- isCommissionOrder(order) WHERE isCommissionOrder(order);

        operationUserInvoice(userInvoice) <- operationOrder(order) WHERE operationOrder(order);

        noteUserInvoice(userInvoice) <- noteOrder(order) WHERE noteOrder(order);
        EXEC overFillUserInvoiceOrder(userInvoice, order);
    }
    
    fillUserInvoiceOrder = ACTION (userInvoice, order) {
        fillHeaderUserInvoiceOrder(userInvoice, order);
        
        createDetailUserInvoiceOrder(userInvoice, order);
        fillPriceUserInvoiceOrder(userInvoice, order);
    }

    fillSupplierStockUserInvoiceOrder = ACTION (supplierStock, userInvoice, order) {
        dateUserInvoice(userInvoice) <- currentDate();
        timeUserInvoice(userInvoice) <- currentTime();

        supplierUserInvoice(userInvoice) <- legalEntityStock(supplierStock);
        supplierStockUserInvoice(userInvoice) <- supplierStock;

        customerUserInvoice(userInvoice) <- customerOrder(order);
        customerStockUserInvoice(userInvoice) <- customerStockOrder(order);

        currencyUserInvoice(userInvoice) <- currencyOrder(order);
        agreementUserInvoice(userInvoice) <- agreementOrder(order);
        priceListTypeUserInvoice(userInvoice) <- priceListTypeOrder(order);

        operationUserInvoice(userInvoice) <- operationOrder(order) WHERE operationOrder(order);
        noteUserInvoice(userInvoice) <- noteOrder(order);

        createDetailUserInvoiceOrder(userInvoice, order);
        fillPriceUserInvoiceOrder(userInvoice, order);
    }

    userInvoiceOrder = DATA LOCAL UserInvoice (Order);
    
    TABLE orderUserInvoice (Order, UserInvoice);
    includeOrderUserInvoice 'Вкл. в накладную' = DATA BOOLEAN (Order, UserInvoice) MINCHARWIDTH 10 PREFCHARWIDTH 15;  
    countIncludeOrdersInvoice (i) = GROUP SUM 1 IF includeOrderUserInvoice(o,i) BY i;  
    createUserInvoiceOrder 'Создать накладную' = ACTION (order) {
        userInvoiceOrder(order) <- NULL;
        FOR ADDOBJ i = UserInvoice DO {
            fillUserInvoiceOrder(i, order);
            userInvoiceOrder(order) <- i;
            includeOrderUserInvoice(order,i) <- TRUE;
        }
    }
    Invoice.createUserInvoiceOrder (order) += ACTION createUserInvoiceOrder(order);

    createUserInvoicePostedOrder 'Создать проведенную накладную' = ACTION (order) {
        IF differentStocksInDetailsStock(customerStockOrder(order)) THEN {
            FOR ADDOBJ i = UserInvoice DO {
                isPostedUserInvoice(i) <- TRUE;
                fillUserInvoiceOrder(i, order);
                createdUserInvoiceOrder(i, order) <- TRUE;
            }
        } ELSE {
            FOR inOrderSupplierStock(order, stock) ADDOBJ i = UserInvoice DO {
                isPostedUserInvoice(i) <- TRUE;
                fillSupplierStockUserInvoiceOrder(stock, i, order);
                createdUserInvoiceOrder(i, order) <- TRUE;
            }
        }
    }
    Invoice.createUserInvoicePostedOrder (order) += ACTION createUserInvoicePostedOrder(order);

    addUserInvoiceOrder 'Накладная'###sign =  ACTION (order) NEWSESSION {
        createUserInvoiceOrder(order);
        FORM userInvoice OBJECTS i = userInvoiceOrder(order) MANAGESESSION DOCKEDMODAL;
    } TOOLBAR;
    Invoice.addUserInvoiceOrder (order) += ACTION addUserInvoiceOrder(order);

    EXTEND FORM orders
        PROPERTIES(o) addUserInvoiceOrder
    ;
    DESIGN orders {
        createdContainer{
            ADD PROPERTY(addUserInvoiceOrder(o));
        }
    }

    // ---------------------------- Заполнение на основе заказа --------------------------- //

    supplierInvoiceOrder = DATA LOCAL LegalEntity ();
    nameSupplierInvoiceOrder 'Поставщик' = nameLegalEntity(supplierInvoiceOrder());

    supplierStockInvoiceOrder = DATA LOCAL Stock ();
    nameSupplierStockInvoiceOrder 'Склад поставщика' = nameStock(supplierStockInvoiceOrder());

    CONSTRAINT legalEntityStock(supplierStockInvoiceOrder())!= supplierInvoiceOrder() CHECKED BY supplierStockInvoiceOrder MESSAGE 'Выбран склад не текущего поставщика';

    customerInvoiceOrder = DATA LOCAL LegalEntity ();
    nameCustomerInvoiceOrder 'Покупатель' = nameLegalEntity(customerInvoiceOrder());

    customerStockInvoiceOrder = DATA LOCAL Stock ();
    nameCustomerStockInvoiceOrder 'Склад покупателя' = nameStock(customerStockInvoiceOrder());

    CONSTRAINT legalEntityStock(customerStockInvoiceOrder())!= customerInvoiceOrder() CHECKED BY customerStockInvoiceOrder MESSAGE 'Выбран склад не текущего покупателя';

    operationInvoiceOrder = DATA LOCAL Operation ();
    nameOperationInvoiceOrder 'Операция' = nameOperation(operationInvoiceOrder());

    FORM invoiceOrders 'Заказы'###sign
        PROPERTIES() nameSupplierInvoiceOrder, nameSupplierStockInvoiceOrder, nameCustomerInvoiceOrder, nameCustomerStockInvoiceOrder, nameOperationInvoiceOrder

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder, VATSumOrderDetailOrder, invoiceSumOrderDetailOrder,
                                noteOrder
        FILTERS isPostedOrder(o),
                inOrderSupplier(o, supplierInvoiceOrder()) OR (o IS Order AND NOT supplierInvoiceOrder()),
                customerOrder(o) == customerInvoiceOrder() OR (o IS Order AND NOT customerInvoiceOrder()),
                customerStockOrder(o) == customerStockInvoiceOrder() OR (o IS Order AND NOT customerStockInvoiceOrder()),
                inOrderSupplierStock(o, supplierStockInvoiceOrder()) OR (o IS Order AND NOT supplierStockInvoiceOrder()),
                operationOrder(o) == operationInvoiceOrder() OR (o IS Order AND NOT operationInvoiceOrder())
//        FILTERGROUP order
//            FILTER 'Заказы с невыписанными товарами со склада' 'F10' toInvoiceOrderDetailStockOrder(s, o) DEFAULT
//            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
        PROPERTIES (d) READONLY quantityOrderDetail, invoicedOrderDetail, priceOrderDetail, sumOrderDetail,
                        numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                        name###stockProp###stockOrderDetail
        FILTERS orderOrderDetail(d) == o
//        FILTERGROUP orderDetail
//            FILTER 'Строки с невыписанными товарами со склада' 'F10' stockProp###stockOrderDetail(d) == stockProp###stockInvoiceOrder() AND toInvoiceOrderDetail(d) > 0 DEFAULT
//            FILTER 'Строки со склада' 'F9' stockProp###stockOrderDetail(d) == stockProp###stockInvoiceOrder()
    ;

    DESIGN invoiceOrders {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                type = CONTAINERV;
                fill = 1;

                ADD o.box;
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    ADD d.box {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }
            }
            NEW sessionPropContainer BEFORE documentContainer {
                ADD PROPERTY(nameSupplierInvoiceOrder());
                ADD PROPERTY(nameSupplierStockInvoiceOrder());
                ADD PROPERTY(nameCustomerInvoiceOrder());
                ADD PROPERTY(nameCustomerStockInvoiceOrder());
                ADD PROPERTY(nameOperationInvoiceOrder());

            }
        }
    }

    fillOrderUserInvoice 'Заполнить на основе заказа' =  ACTION (userInvoice) {
        supplierInvoiceOrder() <- supplierUserInvoice(userInvoice) WHERE supplierUserInvoice(userInvoice);
        supplierStockInvoiceOrder() <- supplierStockUserInvoice(userInvoice) WHERE supplierStockUserInvoice(userInvoice);
        customerInvoiceOrder() <- customerUserInvoice(userInvoice) WHERE customerUserInvoice(userInvoice);
        customerStockInvoiceOrder() <- customerStockUserInvoice(userInvoice) WHERE customerStockUserInvoice(userInvoice);
        operationInvoiceOrder() <- operationUserInvoice(userInvoice) WHERE operationUserInvoice(userInvoice);

        FORM invoiceOrders MODAL;
        IF formResult() == FormResult.ok THEN {
            fillUserInvoiceOrder(userInvoice, chosenObject('o') AS Order);
        }
    } IN order;

    EXTEND FORM userInvoice
        PROPERTIES (d)  descriptionOrderUserInvoiceDetail AFTER invoiceSumUserInvoiceDetail(d)
    ;


    EXTEND FORM invoices
        PROPERTIES (i)  READONLY ordersInvoice AFTER invoiceSumInvoiceDetailInvoice(i)
        PROPERTIES (d)  READONLY descriptionOrderInvoiceDetail AFTER invoiceSumInvoiceDetail(d)
    ;
    EXTEND FORM orders
        PROPERTIES (o)  READONLY BACKGROUND backgroundSkuOrder(o) invoicesOrder AFTER invoiceSumOrderDetailOrder(o)
    ;            
// Создание инвойса на основе нескольких заказов //

    includeOrderInvoice 'Вкл. в накладную' = ABSTRACT BOOLEAN (Order, Invoice) MINCHARWIDTH 10 PREFCHARWIDTH 15;
    includeOrdersInvoice 'Заказы в накладной' (invoice) = GROUP CONCAT VARSTRING[255](descriptionOrder(order)) IF includeOrderInvoice(order, invoice) , ', '
                                                        BY invoice
                                                        ORDER order IN orders MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT;
                                                                                                               
    includeOrdersUserInvoice 'Заказы в накладной' (userInvoice) = GROUP CONCAT VARSTRING[255](descriptionOrder(order)) IF includeOrderUserInvoice(order, userInvoice) , ', '
                                                        BY userInvoice
                                                        ORDER order IN orders MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT;
    includeOrderInvoice(order,invoice) += includeOrderUserInvoice(order,invoice);                                                    
                                                        
    FORM includeOrdersUserInvoice 'Заказы'
        OBJECTS i = UserInvoice FIXED PANEL

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder, VATSumOrderDetailOrder, invoiceSumOrderDetailOrder,
                                noteOrder

        FILTERS supplierOrder(o) == supplierUserInvoice(i),
                customerOrder(o) == customerUserInvoice(i),
                supplierStockOrder(o) == supplierStockUserInvoice(i),
                customerStockOrder(o) == customerStockUserInvoice(i),
                isPostedOrder(o),
                toInvoiceOrder(o) OR includeOrderInvoice(o,i)
                
                
        PROPERTIES(o,i) BACKGROUND backgroundInvoiceOrder(o) includeOrderUserInvoice BEFORE isPostedOrder(o)
    ;
    
    relationInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM 1 BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);
    notRelationInvoiceDetailOrderInvoice 'Включенные заказы, но по которым не созданы строки' (invoice)= GROUP SUM 1 
        IF includeOrderUserInvoice(order, invoice) AND NOT  relationInvoiceDetailOrderInvoice(order, invoice) BY invoice; 
        
    notIncludeInvoiceDetailOrderInvoice 'Есть строки накладной с сылкой на заказ, который не включен в накладную' (invoice)= GROUP SUM 1 
        IF relationInvoiceDetailOrderInvoice(order, invoice) AND NOT includeOrderUserInvoice(order, invoice)  BY invoice;         

    dialogIncludeOrdersUserInvoice 'Включить заказы в накладную' (userInvoice) = ACTION (userInvoice) {
        FORM includeOrdersUserInvoice OBJECTS i = userInvoice MODAL;
        IF formResult() == FormResult.ok THEN {
            IF notRelationInvoiceDetailOrderInvoice(userInvoice) THEN {
                CONFIRM 'Создать по выбранным заказам строки накладной?';
                IF (confirmed()) THEN {  
                    FOR includeOrderUserInvoice(order, userInvoice) AND NOT  relationInvoiceDetailOrderInvoice(order, userInvoice) DO {
                        
                        createDetailUserInvoiceOrder(userInvoice, order);
                        fillPriceUserInvoiceOrder(userInvoice, order);
   
                        userInvoiceOrder(order) <- userInvoice;                         
                    }                                   
                }              
            }
            IF notIncludeInvoiceDetailOrderInvoice(userInvoice) THEN {
                CONFIRM 'В накладной присутствуют строки с сылкой на заказ, который не включен в накладную. Удалить эти строки?';
                IF (confirmed()) THEN {  
                    FOR relationInvoiceDetailOrderInvoice(order, userInvoice) AND NOT includeOrderUserInvoice(order, userInvoice) DO {
                        
                        DELETE d WHERE userInvoiceUserInvoiceDetail(d) == userInvoice AND orderUserInvoiceDetail(d) == order;     
                        userInvoiceOrder(order) <- NULL;                         
                    }                                   
                }                       
            }            
        }                 
    } IN orders;

    defaultOrderSkuUserInvoice (sku, userInvoice) = GROUP MAX order IF includeOrderUserInvoice(order, userInvoice) 
        AND orderOrderDetail(detail)==order
        BY skuOrderDetail(detail), userInvoice;

    connectOrderUserInvoiceDetail 'Привязать строку накладной к заказу' = ACTION (detail) {
        orderUserInvoiceDetail(detail) <- defaultOrderSkuUserInvoice(skuUserInvoiceDetail(detail), userInvoiceUserInvoiceDetail(detail)) 
                                                    WHERE defaultOrderSkuUserInvoice(skuUserInvoiceDetail(detail), userInvoiceUserInvoiceDetail(detail));
    } SHORTCUT descriptionOrderUserInvoiceDetail;

    connectOrderUserInvoice 'Привязать все строки накладной к заказам' = ACTION (userInvoice) {
        FOR userInvoiceUserInvoiceDetail(detail) == userInvoice DO {
            EXEC connectOrderUserInvoiceDetail(detail);
        }
    } SHORTCUT descriptionOrderUserInvoiceDetail;

    WHEN SESSION FORMS userInvoice
        CHANGED(skuUserInvoiceDetail(detail)) AND NOT orderUserInvoiceDetail(detail)       
            DO EXEC connectOrderUserInvoiceDetail(detail);

    EXTEND FORM userInvoice
        PROPERTIES(i) dialogIncludeOrdersUserInvoice, includeOrdersUserInvoice READONLY//, connectOrderUserInvoice
    ;
    DESIGN userInvoice {
        headerCreateDetail {
            ADD i.orders {
                type = CONTAINERV;
            }
        }
    }
//-- 
    
    createMultiUserInvoiceOrder = ACTION (order) {
        IF order IS Order THEN {
            FOR ADDOBJ i = UserInvoice DO {
                FOR selectedOrder(o) DO {
                    fillUserInvoiceOrder(i, o);   
                    includeOrderUserInvoice(o,i)<- TRUE;             
                }     
                              
                FORM userInvoice OBJECTS i = i DOCKEDMODAL;
                IF formResult() == FormResult.ok THEN {
                    apply();
                } ELSE {
                    FOR userInvoiceUserInvoiceDetail(d)==i DO {
                        DELETE d;   
                    }
                    DELETE i;
                }
            }
        }
    }
    Invoice.overCreateMultiUserInvoiceOrder(o)+= ACTION createMultiUserInvoiceOrder(o);

//-- агр.объект

    // todo : временно отключено из-за тормозов при вводе количества в подборе, так как строка заказов может начать влиять на партии
//    @defineDocumentInterfaceDetailQuantityPrefix (order, invoice, ' (выписано)');
//    invoiceQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail) WHEN CHANGED(quantityUserOrderDetail(detail));
//    @defineDocumentInterfaceProperty (order, createInvoice, 'Создать накладную');
//
//
//    showInvoiceOrder (order) =  order IS Order AND NOT createInvoiceOrder(order);
//    
//    EXTEND FORM userOrder
//        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) createInvoiceUserOrder
//        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) SHOWIF createInvoiceUserOrder(o) seriesNumberContractSkuUserOrder, isCommissionUserOrder
//
//        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//        PROPERTIES(d) invoiceQuantityUserOrderDetail AFTER quantityUserOrderDetail SHOWIF createInvoiceUserOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//    ;
//    DESIGN userOrder {
//        headerCreateDocuments {
//            NEW headerInvoice {
//                type = CONTAINERH;
//                caption = 'Накладная';
//                ADD PROPERTY(createInvoiceUserOrder);
//                ADD PROPERTY(seriesNumberContractSkuUserOrder);
//                ADD PROPERTY(isCommissionUserOrder);
//            }
//        }
//    }
//
//    EXTEND FORM orders
//        PROPERTIES(o) READONLYIF isReadonly() AFTER nameAgreementOrder(o) BACKGROUND backgroundInvoiceOrder(o) isCommissionOrder, seriesNumberContractSkuOrder
//
//        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityOrderDetail SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//        PROPERTIES(d) invoiceQuantityOrderDetail AFTER quantityOrderDetail SHOWIF createInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
//    ;
//    EXTEND FORM invoiceOrders
//        PROPERTIES (d) READONLY BACKGROUND backgroundInvoiceOrder(o)  toInvoiceOrderDetail
//    ;

//    CLASS OrderInvoice 'Накладная на основе заказа'###sign : Invoice;
//    CLASS OrderInvoiceDetail 'Строка накладной на основе заказа'###sign : InvoiceDetail;
//
//    @defineDocumentTables(orderInvoice);
//
//    @defineDocumentAggregation(order, orderInvoice, createInvoiceOrder);
//
//    invoiceInvoiceDetail(detail) += orderInvoiceOrderInvoiceDetail(detail);
//
//    @defineDocumentDetailIndex(orderInvoice);
//
//    dateInvoice(invoice) += dateOrderInvoice(invoice);
//    timeInvoice(invoice) += timeOrderInvoice(invoice);
//
//    @defineDocumentAggregationStockPrefix(order, orderInvoice, supplierStock, 'Склад поставщика', , );
//    supplierStockInvoice(invoice) += supplierStockOrderInvoice(invoice);
//    dataSupplierStockInvoiceDetail(invoiceDetail) += dataSupplierStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    @defineDocumentAggregationStockPrefix(order, orderInvoice, customerStock, 'Склад покупателя', , );
//    customerStockInvoice(invoice) += customerStockOrderInvoice(invoice);
//    dataCustomerStockInvoiceDetail(invoiceDetail) += dataCustomerStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//
//    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, supplier, 'Поставщик', , );
//    supplierInvoice(invoice) += supplierOrderInvoice(invoice);
//    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, customer, 'Покупатель', , );
//    customerInvoice(invoice) += customerOrderInvoice(invoice);
//
//    @defineDocumentAggregationPosted(order, orderInvoice);
//    isPostedInvoice(invoice) += isPostedOrderInvoice(invoice);
//    
//    @defineDocumentAggregationClosed(order, orderInvoice);
//    isClosedInvoice(invoice) += isClosedOrderInvoice(invoice);    
//
//    numberOrderInvoice 'Номер документа' (orderInvoice) = numberOrder(orderOrderInvoice(orderInvoice));
//    numberInvoice(invoice) += numberOrderInvoice(invoice);
//
//    seriesOrderInvoice 'Серия документа' (orderInvoice) = seriesOrder(orderOrderInvoice(orderInvoice));
//    seriesInvoice(invoice) += seriesOrderInvoice(invoice);
//
//    seriesNumberOrderInvoice 'Серия/номер документа' (orderInvoice) = seriesNumberOrder(orderOrderInvoice(orderInvoice));
//
//    noteInvoiceOrderInvoice 'Примечание' (orderInvoice) = noteOrder(orderOrderInvoice(orderInvoice));
//    noteInvoice(invoice) += noteInvoiceOrderInvoice(invoice);
//
//    currencyOrderInvoice  (orderInvoice) = currencyOrder(orderOrderInvoice(orderInvoice));
//    currencyInvoice (invoice) += currencyOrderInvoice(invoice);
//
//    priceListTypeInvoice(invoice) += priceListTypeOrder(orderOrderInvoice(invoice));
//    agreementInvoice(invoice) += agreementOrder(orderOrderInvoice(invoice));
//    contractSkuInvoice(invoice) += contractSkuOrder(orderOrderInvoice(invoice));
//    isCommissionInvoice (invoice) += isCommissionOrder(orderOrderInvoice(invoice));
//
////    @defineDocumentDescription(orderInvoice, OrderInvoiceDetail, 'Накладная на основе заказа'###sign);
////    descriptionInvoice (invoice) += descriptionOrderInvoice(invoice);
//
//    @defineDocumentAggregationDetailSku(order, orderInvoice, sku);
//    skuInvoiceDetail(invoiceDetail) +=  skuOrderInvoiceDetail(invoiceDetail);
//
//    priceListTypeInvoiceDetail(detail) += priceListTypeOrderDetail(orderDetailOrderInvoiceDetail(detail));
//
//
//    quantityInvoiceDetail(invoiceDetail) += invoiceQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    priceInvoiceDetail(invoiceDetail) += priceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    sumInvoiceDetail(invoiceDetail) += sumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    VATInvoiceDetail(invoiceDetail) += VATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    valueVATInvoiceDetail(invoiceDetail) += valueVATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    invoicePriceInvoiceDetail(invoiceDetail) += invoicePriceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    invoiceSumInvoiceDetail(invoiceDetail) += invoiceSumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    VATSumInvoiceDetail(invoiceDetail) += VATSumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//
//    orderInvoiceDetail(invoiceDetail) += orderOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//
//    editInvoice(invoice) += ACTION EXEC editOrder(orderOrderInvoice(invoice));

END

META defineOrderInvoicePack (showPackage)

    overFillUserInvoiceDetailOrderDetail(i, o) += ACTION (i, o) {
        IF o IS OrderDetail THEN { // иначе не может определить тип o
            barcodePackUserInvoiceDetail(i) <- barcodePackOrderDetail(o);
            amountPackUserInvoiceDetail(i) <- amountPackOrderDetail(o);
            packQuantityUserInvoiceDetail (i) <- quantityUserInvoiceDetail(i) / (amountPackUserInvoiceDetail(i) IF amountPackUserInvoiceDetail(i) != 0);
        }
    }

//    showPackInvoice(invoice) += showPackOrder(orderOrderInvoice(invoice));
//    barcodePackInvoiceDetail(invoiceDetail) +=  barcodePackOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    amountPackInvoiceDetail(invoiceDetail) +=  amountPackOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
//    packQuantityInvoiceDetail(invoiceDetail) +=  packQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

END

META defineInvoiceOrder(sign, NS, batchProp, legalProp, stockProp)

    createUserOrderInvoice 'Создать заказ' = ACTION (invoice) NEWSESSION {
        FOR ADDOBJ o = NS.UserOrder DO {
            NS.supplierUserOrder(o) <- legalProp###invoice(invoice);
            NS.supplierStockUserOrder(o) <- stockProp###invoice(invoice);
            
            FOR invoiceInvoiceDetail(detail) == invoice ADDOBJ d = NS.UserOrderDetail DO {
                NS.userOrderUserOrderDetail(d) <- o; 
                NS.skuUserOrderDetail(d) <- skuInvoiceDetail(detail);   
                NS.batchUserOrderDetail(d) <- batchProp###invoiceDetail(detail);
                NS.quantityUserOrderDetail(d) <- quantityInvoiceDetail(detail); 
            }
            
            FORM NS.userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;        
        }
    } TOOLBAR; 
    
    EXTEND FORM invoices 
        PROPERTIES(i) createUserOrderInvoice     
    ;
    DESIGN invoices {
        createdContainer {
    
            ADD PROPERTY(createUserOrderInvoice(i)) { caption = 'Заказ'###sign;}
        }
    }
END 
