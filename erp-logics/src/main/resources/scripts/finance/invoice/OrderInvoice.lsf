MODULE OrderInvoice;

REQUIRE Order, Invoice;

NAMESPACE Invoice;

createdUserInvoiceOrder = DATA SESSION BOOLEAN (Invoice, Order);

createUserInvoiceOrder 'Создать накладную' = ABSTRACT ACTION LIST (Order);
createUserInvoicePostedOrder 'Создать проведенную накладную' = ABSTRACT ACTION LIST (Order);

orderInvoiceDetail = ABSTRACT Order(InvoiceDetail);

quantityOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail)
                                               BY orderInvoiceDetail(invoiceDetail),
                                                  invoiceInvoiceDetail(invoiceDetail);

//--  Связь с заказом

META defineOrderInvoice(sign, stockProp)

    orderInvoiceDetail = ABSTRACT Order (InvoiceDetail) PERSISTENT;
    Invoice.orderInvoiceDetail (invoiceDetail) += orderInvoiceDetail(invoiceDetail);

    orderUserInvoiceDetail = DATA Order(UserInvoiceDetail);
    orderInvoiceDetail(invoiceDetail) += orderUserInvoiceDetail(invoiceDetail);

    CONSTRAINT supplierInvoiceDetail(invoiceDetail) != supplierOrder(orderUserInvoiceDetail(invoiceDetail)) OR
               customerUserInvoiceDetail(invoiceDetail) != customerOrder(orderUserInvoiceDetail(invoiceDetail))
        CHECKED BY orderUserInvoiceDetail
            MESSAGE 'Поставщик и покупатель в заказе и накладной должны соответствовать друг другу';

    GROUP orderGroup 'Информация о заказе' : public;

    descriptionOrderInvoiceDetail 'Заказ' (invoiceDetail) = descriptionOrder(orderInvoiceDetail(invoiceDetail)) IN orderGroup;
    descriptionOrderUserInvoiceDetail 'Заказ' (userInvoiceDetail) = descriptionOrder(orderUserInvoiceDetail(userInvoiceDetail)) IN orderGroup;

    quantityInvoiceDetailOrderInvoice (order, invoice) = GROUP SUM quantityInvoiceDetail(invoiceDetail) BY orderInvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);
    ordersInvoice 'Заказы' (invoice) = GROUP CONCAT toString255(descriptionOrder(order)) IF quantityInvoiceDetailOrderInvoice(order, invoice) , ', '
                                             BY invoice
                                             ORDER order
                                             IN orderGroup MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    invoicedInvoiceDetailOrderSku 'Выписано накладных' (order, sku) = GROUP SUM quantityInvoiceDetail(invoiceDetail) IF isPostedInvoiceDetail(invoiceDetail)
                                                               BY orderInvoiceDetail(invoiceDetail), skuInvoiceDetail(invoiceDetail);
    invoicedOrderDetail 'Кол-во (выписано)' (orderDetail) = PARTITION UNGROUP invoicedInvoiceDetailOrderSku
                                                              LIMIT STRICT quantityOrderDetail (orderDetail)
                                                              BY orderOrderDetail(orderDetail), skuOrderDetail(orderDetail)
                                                              ORDER orderDetail;

    toInvoicedOrderDetail 'Не выписано' (orderDetail) = quantityOrderDetail (orderDetail) (-) invoicedOrderDetail(orderDetail);


    // Создание заказа на основе инвойса //
    inOrderSupplierStock (order, supplierStock) = GROUP SUM 1 IF supplierStockOrderDetail(orderDetail) == supplierStock BY orderOrderDetail(orderDetail), supplierStock;
    inOrderSupplier (order, supplier) = GROUP SUM 1 IF legalEntityStock(supplierStockOrderDetail(orderDetail)) == supplier BY orderOrderDetail(orderDetail), supplier;

    inOrderCustomerStock (order, customerStock) = GROUP SUM 1 IF customerStockOrderDetail(orderDetail) == customerStock BY orderOrderDetail(orderDetail), customerStock;
    inOrderCustomer (order, customer) = GROUP SUM 1 IF legalEntityStock(customerStockOrderDetail(orderDetail)) == customer BY orderOrderDetail(orderDetail), customer;

    supplierInvoiceOrder = DATA SESSION LegalEntity ();
    nameSupplierInvoiceOrder 'Поставщик' = nameLegalEntity(supplierInvoiceOrder());

    supplierStockInvoiceOrder = DATA SESSION Stock ();
    nameSupplierStockInvoiceOrder 'Склад поставщика' = nameStock(supplierStockInvoiceOrder());

    CONSTRAINT legalEntityStock(supplierStockInvoiceOrder())!= supplierInvoiceOrder() CHECKED BY supplierStockInvoiceOrder MESSAGE 'Выбран склад не текущего поставщика';

    customerInvoiceOrder = DATA SESSION LegalEntity ();
    nameCustomerInvoiceOrder 'Покупатель' = nameLegalEntity(customerInvoiceOrder());

    customerStockInvoiceOrder = DATA SESSION Stock ();
    nameCustomerStockInvoiceOrder 'Склад покупателя' = nameStock(customerStockInvoiceOrder());

    CONSTRAINT legalEntityStock(customerStockInvoiceOrder())!= customerInvoiceOrder() CHECKED BY customerStockInvoiceOrder MESSAGE 'Выбран склад не текущего покупателя';

    operationInvoiceOrder = DATA SESSION Operation ();
    nameOperationInvoiceOrder 'Операция' = nameOperation(operationInvoiceOrder());

    FORM invoiceOrders 'Заказы'###sign
        PROPERTIES() nameSupplierInvoiceOrder, nameSupplierStockInvoiceOrder, nameCustomerInvoiceOrder, nameCustomerStockInvoiceOrder, nameOperationInvoiceOrder

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPostedOrder FORCE GRID, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder, VATSumOrderDetailOrder, invoiceSumOrderDetailOrder,
                                noteOrder, objectClassName
        FILTERS isPostedOrder(o),
                (TRUE IF inOrderSupplier(o, supplierInvoiceOrder())) OR (o IS Order AND NOT supplierInvoiceOrder()),
                customerOrder(o) == customerInvoiceOrder() OR (o IS Order AND NOT customerInvoiceOrder()),
                customerStockOrder(o) == customerStockInvoiceOrder() OR (o IS Order AND NOT customerStockInvoiceOrder()),
                (TRUE IF inOrderSupplierStock(o, supplierStockInvoiceOrder())) OR (o IS Order AND NOT supplierStockInvoiceOrder()),
                operationOrder(o) == operationInvoiceOrder() OR (o IS Order AND NOT operationInvoiceOrder())
//        FILTERGROUP order
//            FILTER 'Заказы с невыписанными товарами со склада' 'F10' toInvoiceOrderDetailStockOrder(s, o) DEFAULT
//            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
        PROPERTIES (d) READONLY quantityOrderDetail, invoicedOrderDetail, priceOrderDetail, sumOrderDetail,
                        numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                        name###stockProp###orderDetail, toInvoicedOrderDetail
        FILTERS orderOrderDetail(d) == o
//        FILTERGROUP orderDetail
//            FILTER 'Строки с невыписанными товарами со склада' 'F10' stockProp###orderDetail(d) == stockProp###invoiceOrder() AND toInvoicedOrderDetail(d) > 0 DEFAULT
//            FILTER 'Строки со склада' 'F9' stockProp###orderDetail(d) == stockProp###invoiceOrder()
    ;

    DESIGN invoiceOrders FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW documentContainer BEFORE functions.box {

                childConstraints = TO THE BOTTOM;

                ADD o.box;
                NEW documentDetail {
                    type = TABBED;

                    ADD d.box {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            childConstraints = TO THE BOTTOM;
                            fillVertical = 1.0;
                        }
                    }
                }
            }
            NEW sessionPropContainer BEFORE documentContainer {
                ADD PROPERTY(nameSupplierInvoiceOrder());
                ADD PROPERTY(nameSupplierStockInvoiceOrder());
                ADD PROPERTY(nameCustomerInvoiceOrder());
                ADD PROPERTY(nameCustomerStockInvoiceOrder());
                ADD PROPERTY(nameOperationInvoiceOrder());

            }
            PROPERTY(toInvoicedOrderDetail) { background = #FFFFCC; }
        }
    }

    createExplicitBatchDetailUserInvoiceOrder = ABSTRACT ACTION LIST (UserInvoice, Order);
    useExplicitBatchDetailUserInvoiceOrder = ABSTRACT BOOLEAN (UserInvoice, Order);

    differentStocksInDetailsStock (stock) = differentStocksInDetailsLegalEntity(legalEntityStock(stock)) PERSISTENT;

    inOrderDetailUserInvoice (orderDetail, userInvoice) = (orderDetail IS OrderDetail AND userInvoice IS UserInvoice AND NOT supplierStockUserInvoice(userInvoice)) OR
                                                           supplierStockOrderDetail(orderDetail)==supplierStockUserInvoice(userInvoice);

    overCreateDetailUserInvoiceDetailOrderDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, OrderDetail);
    createDetailUserInvoiceOrder = ACTION (userInvoice, order) {
        IF useExplicitBatchDetailUserInvoiceOrder(userInvoice, order) AND explicitBatchLedgerStock(stockProp##Order(order)) THEN {
            EXEC createExplicitBatchDetailUserInvoiceOrder(userInvoice, order);
        } ELSE
            FOR orderOrderDetail(orderDetail) == order AND
                toInvoicedOrderDetail(orderDetail) > 0 // возможно еще нужно фильтровать по складам
                AND inOrderDetailUserInvoice(orderDetail, userInvoice)
                ADDOBJ d = UserInvoiceDetail DO {
                    SET userInvoiceUserInvoiceDetail(d) <- userInvoice;
                    SET orderUserInvoiceDetail(d) <- order;
                    SET skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                    SET quantityUserInvoiceDetail (d) <- toInvoicedOrderDetail(orderDetail);
                    SET VATUserInvoiceDetail (d) <- VATOrderDetail(orderDetail);
                    SET valueVATUserInvoiceDetail (d) <- valueVATOrderDetail(orderDetail);
                    SET priceListTypeUserInvoiceDetail (d) <- priceListTypeOrderDetail(orderDetail);
                    SET priceUserInvoiceDetail (d) <- priceOrderDetail(orderDetail);
                    SET invoicePriceUserInvoiceDetail (d) <- invoicePriceOrderDetail(orderDetail);
                    SET sumUserInvoiceDetail (d) <- sumOrderDetail(orderDetail);
                    SET data###stockProp###userInvoiceDetail (d) <- data###stockProp###orderDetail(orderDetail);

                    EXEC overCreateDetailUserInvoiceDetailOrderDetail(d, orderDetail);
            }
    }

    fillUserInvoiceOrder = ACTION (userInvoice, order) {
        SET supplierUserInvoice(userInvoice) <- supplierOrder(order) WHERE supplierOrder(order);
        SET supplierStockUserInvoice(userInvoice) <- supplierStockOrder(order) WHERE supplierStockOrder(order);

        SET customerUserInvoice(userInvoice) <- customerOrder(order) WHERE customerOrder(order);
        SET customerStockUserInvoice(userInvoice) <- customerStockOrder(order) WHERE customerStockOrder(order);

        SET currencyUserInvoice(userInvoice) <- currencyOrder(order) WHERE currencyOrder(order);
        SET agreementUserInvoice(userInvoice) <- agreementOrder(order) WHERE agreementOrder(order);
        SET priceListTypeUserInvoice(userInvoice) <- priceListTypeOrder(order) WHERE priceListTypeOrder(order);
//        SET contractSkuUserInvoice(userInvoice) <- contractSkuOrder(order) WHERE contractSkuOrder(order);
//        SET isCommissionUserInvoice(userInvoice) <- isCommissionOrder(order) WHERE isCommissionOrder(order);

        SET operationUserInvoice(userInvoice) <- operationOrder(order) WHERE operationOrder(order);

        SET noteUserInvoice(userInvoice) <- noteOrder(order) WHERE noteOrder(order);

        EXEC createDetailUserInvoiceOrder(userInvoice, order);
    }

    fillSupplierStockUserInvoiceOrder = ACTION (supplierStock, userInvoice, order) {
        SET supplierUserInvoice(userInvoice) <- legalEntityStock(supplierStock);
        SET supplierStockUserInvoice(userInvoice) <- supplierStock;

        SET customerUserInvoice(userInvoice) <- customerOrder(order);
        SET customerStockUserInvoice(userInvoice) <- customerStockOrder(order);

        SET currencyUserInvoice(userInvoice) <- currencyOrder(order);
        SET agreementUserInvoice(userInvoice) <- agreementOrder(order);
        SET priceListTypeUserInvoice(userInvoice) <- priceListTypeOrder(order);

        SET operationUserInvoice(userInvoice) <- operationOrder(order) WHERE operationOrder(order);
        SET noteUserInvoice(userInvoice) <- noteOrder(order);

        EXEC createDetailUserInvoiceOrder(userInvoice, order);
    }

    userInvoiceOrder = DATA SESSION UserInvoice (Order);
    createUserInvoiceOrder 'Создать накладную' = ACTION (order) {
        IF order IS Order THEN {
            SET  userInvoiceOrder(order) <- NULL;
            FOR ADDOBJ i = UserInvoice DO {
                EXEC fillUserInvoiceOrder(i, order);
                SET  userInvoiceOrder(order) <- i;
            }
        }
    }
    Invoice.createUserInvoiceOrder (order) += createUserInvoiceOrder(order);

    //Invoice.createdUserInvoiceOrder(userInvoice, order) += createdUserInvoiceOrder(userInvoice, order);

    createUserInvoicePostedOrder 'Создать проведенную накладную' = ACTION (order) {
        IF order IS Order THEN {
            IF differentStocksInDetailsStock(customerStockOrder(order)) THEN {
                FOR ADDOBJ i = UserInvoicePosted DO {
                    EXEC fillUserInvoiceOrder(i, order);
                    SET createdUserInvoiceOrder(i, order) <- TRUE;
                }
            } ELSE {
                FOR inOrderSupplierStock(order, stock) ADDOBJ i = UserInvoicePosted DO {
                    EXEC fillSupplierStockUserInvoiceOrder(stock, i, order);
                    SET createdUserInvoiceOrder(i, order) <- TRUE;
                }
            }
        }
    }
    Invoice.createUserInvoicePostedOrder (order) += createUserInvoicePostedOrder(order);


    fillOrderUserInvoice 'Заполнить на основе заказа' =  ACTION (userInvoice) {
        supplierInvoiceOrder() <- supplierUserInvoice(userInvoice) WHERE supplierUserInvoice(userInvoice);
        supplierStockInvoiceOrder() <- supplierStockUserInvoice(userInvoice) WHERE supplierStockUserInvoice(userInvoice);
        customerInvoiceOrder() <- customerUserInvoice(userInvoice) WHERE customerUserInvoice(userInvoice);
        customerStockInvoiceOrder() <- customerStockUserInvoice(userInvoice) WHERE customerStockUserInvoice(userInvoice);
        operationInvoiceOrder() <- operationUserInvoice(userInvoice) WHERE operationUserInvoice(userInvoice);

        FORM invoiceOrders MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC fillUserInvoiceOrder(userInvoice, chosenObject('o'));
        }
    } IN orderGroup;

    EXTEND FORM userInvoice
        PROPERTIES (i)  fillOrderUserInvoice, ordersInvoice READONLY
        PROPERTIES (d)  descriptionOrderUserInvoiceDetail AFTER invoiceSumUserInvoiceDetail(d)
    ;

    EXTEND DESIGN userInvoice {
        headerCreateDetail {
            ADD i.orderGroup {childConstraints = TO THE RIGHTBOTTOM;}
        }
    }
    EXTEND FORM invoices
        PROPERTIES (i)  READONLY ordersInvoice AFTER invoiceSumInvoiceDetailInvoice(i)
        PROPERTIES (d)  READONLY descriptionOrderInvoiceDetail AFTER invoiceSumInvoiceDetail(d)
    ;

//-- аггр.объект

    @defineDocumentInterfaceDetailQuantityPrefix (order, invoice, ' (выписано)');
    invoiceQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail) WHEN CHANGED(quantityUserOrderDetail(detail));
    @defineDocumentInterfaceCreate (order, createInvoice, 'Создать накладную');

    @defineDocumentInterfaceContract(Order, contractSku, supplier, customer,
                                     'Организация (поставщик) договора заказа не соответствует организация (поставщик) заказа',
                                     'Организация (покупатель) договора заказа не соответствует организация (покупатель) заказа');

    showInvoiceOrder (order) =  order IS Order AND NOT createInvoiceOrder(order);

    backgroundInvoiceOrder 'Цвет' (order) = RGB(175, 255, 175) IF order IS Order;
    EXTEND FORM userOrder
        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) createInvoiceUserOrder
        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) SHOWIF createInvoiceUserOrder(o) seriesNumberContractSkuUserOrder, isCommissionUserOrder

        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
        PROPERTIES(d) invoiceQuantityUserOrderDetail AFTER quantityUserOrderDetail SHOWIF createInvoiceUserOrder(o) BACKGROUND backgroundInvoiceOrder(o)
    ;
    EXTEND DESIGN userOrder {
        headerCreateDocuments {
            NEW headerInvoice {
                childConstraints = TO THE RIGHTBOTTOM;
                caption = 'Накладная';
                ADD PROPERTY(createInvoiceUserOrder);
                ADD PROPERTY(seriesNumberContractSkuUserOrder);
                ADD PROPERTY(isCommissionUserOrder);
            }
        }
    }

    EXTEND FORM orders
        PROPERTIES(o) READONLY BACKGROUND backgroundInvoiceOrder(o) createInvoiceOrder
        PROPERTIES(o) READONLY AFTER nameAgreementOrder(o) BACKGROUND backgroundInvoiceOrder(o) isCommissionOrder, seriesNumberContractSkuOrder

        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityOrderDetail SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
        PROPERTIES(d) invoiceQuantityOrderDetail AFTER quantityOrderDetail SHOWIF createInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
    ;
    EXTEND FORM invoiceOrders
        PROPERTIES (d) READONLY BACKGROUND backgroundInvoiceOrder(o)  toInvoicedOrderDetail
    ;

    CLASS OrderInvoice 'Накладная на основе заказа'###sign : Invoice;
    CLASS OrderInvoicePosted 'Проведенная накладная на основе заказа'###sign : OrderInvoice, PostedObject;
    CLASS OrderInvoiceDetail 'Строка накладной на основе заказа'###sign : InvoiceDetail;

    @defineDocumentTables(orderInvoice);

    @defineDocumentAggregation(order, orderInvoice, createInvoiceOrder);

    invoiceInvoiceDetail(detail) += orderInvoiceOrderInvoiceDetail(detail);

    @defineDocumentDetailIndex(orderInvoice);

    dateInvoice(invoice) += dateOrderInvoice(invoice);
    timeInvoice(invoice) += timeOrderInvoice(invoice);

    @defineDocumentAggregationStockPrefix(order, orderInvoice, supplierStock, 'Склад поставщика', , );
    supplierStockInvoice(invoice) += supplierStockOrderInvoice(invoice);
    dataSupplierStockInvoiceDetail(invoiceDetail) += dataSupplierStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    @defineDocumentAggregationStockPrefix(order, orderInvoice, customerStock, 'Склад покупателя', , );
    customerStockInvoice(invoice) += customerStockOrderInvoice(invoice);
    dataCustomerStockInvoiceDetail(invoiceDetail) += dataCustomerStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

    @defineDocumentAggregationStockPrefix(order, orderInvoice, supplier, 'Поставщик', , );
    supplierInvoice(invoice) += supplierOrderInvoice(invoice);
    @defineDocumentAggregationStockPrefix(order, orderInvoice, customer, 'Покупатель', , );
    customerInvoice(invoice) += customerOrderInvoice(invoice);

    @defineDocumentAggregationPosted(order, orderInvoice);
    isPostedInvoice(invoice) += isPostedOrderInvoice(invoice);

    numberOrderInvoice 'Номер документа' (orderInvoice) = numberOrder(orderOrderInvoice(orderInvoice));
    numberInvoice(invoice) += numberOrderInvoice(invoice);

    seriesOrderInvoice 'Серия документа' (orderInvoice) = seriesOrder(orderOrderInvoice(orderInvoice));
    seriesInvoice(invoice) += seriesOrderInvoice(invoice);

    seriesNumberOrderInvoice 'Серия/номер документа' (orderInvoice) = seriesNumberOrder(orderOrderInvoice(orderInvoice));

    noteInvoiceOrderInvoice 'Примечание' (orderInvoice) = noteOrder(orderOrderInvoice(orderInvoice));
    noteInvoice(invoice) += noteInvoiceOrderInvoice(invoice);

    currencyOrderInvoice  (orderInvoice) = currencyOrder(orderOrderInvoice(orderInvoice));
    currencyInvoice (invoice) += currencyOrderInvoice(invoice);

    priceListTypeInvoice(invoice) += priceListTypeOrder(orderOrderInvoice(invoice));
    agreementInvoice(invoice) += agreementOrder(orderOrderInvoice(invoice));
    contractSkuInvoice(invoice) += contractSkuOrder(orderOrderInvoice(invoice));
    isCommissionInvoice (invoice) += isCommissionOrder(orderOrderInvoice(invoice));

//    @defineDocumentDescription(orderInvoice, OrderInvoiceDetail, seriesNumberOrderInvoice, 'Накладная на основе заказа'###sign);
//    descriptionInvoice (invoice) += descriptionOrderInvoice(invoice);

    @defineDocumentAggregationDetailSku(order, orderInvoice, sku);
    skuInvoiceDetail(invoiceDetail) +=  skuOrderInvoiceDetail(invoiceDetail);

    priceListTypeInvoiceDetail(detail) += priceListTypeOrderDetail(orderDetailOrderInvoiceDetail(detail));


    quantityInvoiceDetail(invoiceDetail) += invoiceQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    priceInvoiceDetail(invoiceDetail) += priceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    sumInvoiceDetail(invoiceDetail) += sumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    VATInvoiceDetail(invoiceDetail) += VATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    valueVATInvoiceDetail(invoiceDetail) += valueVATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    invoicePriceInvoiceDetail(invoiceDetail) += invoicePriceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    invoiceSumInvoiceDetail(invoiceDetail) += invoiceSumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    VATSumInvoiceDetail(invoiceDetail) += VATSumOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

    orderInvoiceDetail(invoiceDetail) += orderOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

    editInvoice(invoice) += ACTION EXEC editOrder(orderOrderInvoice(invoice));

END

META defineOrderInvoicePack (showPackage)

    EXTEND FORM orders
        PROPERTIES (d) READONLY SHOWIF showPackage###order(o) BEFORE quantityOrderDetail
                       idBarcodePackOrderDetail, shortNameUOMPackOrderDetail,
                       amountPackOrderDetail, packQuantityOrderDetail
    ;

    overCreateDetailUserInvoiceDetailOrderDetail(i, o) += ACTION (i, o) {
        SET barcodePackUserInvoiceDetail(i) <- barcodePackOrderDetail(o);
        SET amountPackUserInvoiceDetail(i) <- amountPackOrderDetail(o);
        SET packQuantityUserInvoiceDetail (i) <- toInvoicedOrderDetail(o)/amountPackOrderDetail(o);
    }

    showPackInvoice(invoice) += showPackOrder(orderOrderInvoice(invoice));
    barcodePackInvoiceDetail(invoiceDetail) +=  barcodePackOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    amountPackInvoiceDetail(invoiceDetail) +=  amountPackOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    packQuantityInvoiceDetail(invoiceDetail) +=  packQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

END

//-- Действие

META defineOrderInvoiceAction (sign)
    moveUserInvoiceOrder 'Накладная'###sign =  ACTION (order) NEWSESSION{
        EXEC createUserInvoiceOrder(order);
        FORM userInvoice OBJECTS i = userInvoiceOrder(order) MANAGESESSION DOCKEDMODAL;
    } TOOLBAR;

    EXTEND FORM orders
        PROPERTIES(o) moveUserInvoiceOrder
    ;
    EXTEND DESIGN orders {
        createdContainer{
            ADD PROPERTY(moveUserInvoiceOrder);
        }
    }
END


