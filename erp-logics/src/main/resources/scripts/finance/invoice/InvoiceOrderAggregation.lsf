MODULE InvoiceOrderAggregation;

REQUIRE Order, Invoice, OrderContract, InvoiceContract;

NAMESPACE Invoice;

META defineInvoiceOrder(sign, NS)

    @defineDocumentInterfaceDataTimePrefix(order, invoice, ' накладной');
    invoiceDateUserOrder(i) <- dateUserOrder(i) WHEN CHANGED(dateUserOrder(i));
    invoiceTimeUserOrder(i) <- timeUserOrder(i) WHEN CHANGED(timeUserOrder(i));
    
    invoiceNumberOrder 'Номер' = ABSTRACT STRING[18] (Order) IN numbered MINCHARWIDTH 7;
    invoiceSeriesOrder 'Серия' = ABSTRACT STRING[2] (Order) IN numbered FIXEDCHARWIDTH 3; 

    invoiceSeriesNumberOrder 'Серия/Номер' (o) = 
        CONCAT '', seriesOrder(o), numberOrder(o) 
        MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20;
        
    invoiceNumberUserOrder 'Номер' = DATA STRING[18] (UserOrder) IN numbered MINCHARWIDTH 7;
    invoiceSeriesUserOrder 'Серия' = DATA STRING[2] (UserOrder) IN numbered FIXEDCHARWIDTH 3; 
    
    invoiceNumberUserOrder(o) <- numberUserOrder(o) WHEN SET (o IS UserOrder);
    invoiceSeriesUserOrder(o) <- seriesUserOrder(o) WHEN SET (o IS UserOrder);

    invoiceSeriesNumberUserOrder 'Серия/Номер' (o) = 
        CONCAT '', seriesUserOrder(o), numberUserOrder(o) 
        MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20;   
        
    invoiceNumberOrder(o) += invoiceNumberUserOrder(o);  
    invoiceSeriesOrder(o) += invoiceSeriesUserOrder(o);    

    @defineDocumentInterfaceDetailQuantityPrefix (order, invoice, ' (выписано)');
    invoiceQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail) WHEN CHANGED(quantityUserOrderDetail(detail));
    @defineDocumentInterfaceProperty (order, createInvoice, 'Создать накладную');

    overCopyOrder(s, d) += ACTION (s, d) {
        createInvoiceUserOrder(d) <- createInvoiceUserOrder(s);
    }  
        
    showInvoiceOrder (order) =  order IS Order AND NOT createInvoiceOrder(order);
    
    
    EXTEND FORM userOrder
    
        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) createInvoiceUserOrder
        PROPERTIES(o) BACKGROUND backgroundInvoiceOrder(o) SHOWIF createInvoiceUserOrder(o) invoiceDateUserOrder, invoiceTimeUserOrder,
                      invoiceNumberUserOrder, invoiceSeriesUserOrder

        PROPERTIES(d) READONLY invoicedOrderDetail AFTER quantityUserOrderDetail(d) SHOWIF showInvoiceOrder(o) BACKGROUND backgroundInvoiceOrder(o)
        PROPERTIES(d) invoiceQuantityUserOrderDetail AFTER quantityUserOrderDetail(d) SHOWIF createInvoiceUserOrder(o) BACKGROUND backgroundInvoiceOrder(o)
    ;
    DESIGN userOrder {
        headerCreateDocuments {
            NEW headerInvoice {
                type = CONTAINERV;
                caption = 'Накладная';
                NEW headerInvoice1 {
                    type = CONTAINERH;
                    MOVE PROPERTY(createInvoiceUserOrder(o));
                    MOVE PROPERTY(invoiceDateUserOrder(o));
                    MOVE PROPERTY(invoiceTimeUserOrder(o));    
                    MOVE PROPERTY(invoiceNumberUserOrder(o));
                    MOVE PROPERTY(invoiceSeriesUserOrder(o));                                        
                                    
                }
//                NEW headerInvoice2 {
//                    type = CONTAINERH;
//                    MOVE PROPERTY(seriesNumberContractSkuUserOrder(o));
//                    MOVE PROPERTY(isCommissionUserOrder(o));                    
//                }              
            }
        }
    } 

    EXTEND FORM orders
        PROPERTIES(o) READONLYIF isReadonly() AFTER nameAgreementOrder(o) BACKGROUND backgroundInvoiceOrder(o) isCommissionOrder, seriesNumberContractSkuOrder

        PROPERTIES(d) READONLY AFTER quantityOrderDetail(d) BACKGROUND backgroundInvoiceOrder(o) 
                      invoicedOrderDetail SHOWIF showInvoiceOrder(o), invoiceQuantityOrderDetail SHOWIF createInvoiceOrder(o) 
    ;
    EXTEND FORM invoiceOrders
        PROPERTIES (d) READONLY BACKGROUND backgroundInvoiceOrder(o)  toInvoiceOrderDetail
    ;

    CLASS OrderInvoice 'Накладная на основе заказа'###sign : Invoice;
    CLASS OrderInvoiceDetail 'Строка накладной на основе заказа'###sign : InvoiceDetail;

    @defineDocumentTables(orderInvoice);

    @defineDocumentAggregation(order, orderInvoice, createInvoice);

    invoiceInvoiceDetail(detail) += orderInvoiceOrderInvoiceDetail(detail);

    //@defineDocumentDetailIndex(orderInvoice);
    
    operationOrderInvoice (invoice) = operationOrder(orderOrderInvoice(invoice));
    operationInvoice(invoice) += operationOrderInvoice(invoice);
    @defineDocumentAggregationHeaderTimePrefix (order, OrderInvoice, invoice);
    dateInvoice(invoice) += invoiceDateOrderInvoice(invoice);
    timeInvoice(invoice) += invoiceTimeOrderInvoice(invoice);
    
    indexInvoiceDetail(detail) += indexOrderInvoiceDetail(detail);

    @defineDocumentAggregationStockPrefix(order, orderInvoice, supplier, 'Склад поставщика', , );
    supplierStockInvoice(invoice) += supplierStockOrderInvoice(invoice);
    dataSupplierStockInvoiceDetail(invoiceDetail) += dataSupplierStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    @defineDocumentAggregationStockPrefix(order, orderInvoice, customer, 'Склад покупателя', , );
    customerStockInvoice(invoice) += customerStockOrderInvoice(invoice);
    dataCustomerStockInvoiceDetail(invoiceDetail) += dataCustomerStockOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, supplier, 'Поставщик', , );
    supplierInvoice(invoice) += supplierOrderInvoice(invoice);
    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, customer, 'Покупатель', , );
    customerInvoice(invoice) += customerOrderInvoice(invoice);

    @defineDocumentAggregationPosted(order, orderInvoice);
    isPostedInvoice(invoice) += isPostedOrderInvoice(invoice);
    
    @defineDocumentAggregationClosed(order, orderInvoice);
    isClosedInvoice(invoice) += isClosedOrderInvoice(invoice);    

    numberOrderInvoice 'Номер документа' (orderInvoice) = invoiceNumberOrder(orderOrderInvoice(orderInvoice));
    numberInvoice(invoice) += numberOrderInvoice(invoice);

    seriesOrderInvoice 'Серия документа' (orderInvoice) = invoiceSeriesOrder(orderOrderInvoice(orderInvoice));
    seriesInvoice(invoice) += seriesOrderInvoice(invoice);

    seriesNumberOrderInvoice 'Серия/номер документа' (orderInvoice) = invoiceSeriesNumberOrder(orderOrderInvoice(orderInvoice));

    noteInvoiceOrderInvoice 'Примечание' (orderInvoice) = noteOrder(orderOrderInvoice(orderInvoice));
    noteInvoice(invoice) += noteInvoiceOrderInvoice(invoice);

    currencyOrderInvoice  (orderInvoice) = currencyOrder(orderOrderInvoice(orderInvoice));
    currencyInvoice (invoice) += currencyOrderInvoice(invoice);

    priceListTypeInvoice(invoice) += priceListTypeOrder(orderOrderInvoice(invoice));
    agreementInvoice(invoice) += agreementOrder(orderOrderInvoice(invoice));
    contractSkuInvoice(invoice) += contractSkuOrder(orderOrderInvoice(invoice));
    paymentConditionInvoice(invoice) += paymentConditionOrder(orderOrderInvoice(invoice));
    isCommissionInvoice (invoice) += isCommissionOrder(orderOrderInvoice(invoice));

    descriptionOrderInvoice 'Название документа' (o) =
        'Накладная на основе заказа (продажа)' + ' № ' + seriesNumberOrderInvoice(o) + ' от ' + dateOrderInvoice(o) MINCHARWIDTH 30 PREFCHARWIDTH 50;
    description##NS##OrderInvoiceDetail 'Название документа' (d) = descriptionOrderInvoice(orderInvoiceOrderInvoiceDetail(d)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
    descriptionIndexOrderInvoiceDetail 'Название документа' (d) = description##NS##OrderInvoiceDetail(d) + ', позиция ' + indexOrderInvoiceDetail(d) MINCHARWIDTH 30 PREFCHARWIDTH 50 IN base;
    descriptionInvoice (invoice) += descriptionOrderInvoice(invoice);  

    @defineDocumentAggregationDetailSku(order, orderInvoice, sku);
    skuInvoiceDetail(invoiceDetail) +=  skuOrderInvoiceDetail(invoiceDetail);

    @defineDocumentAggregationDetailBatch(order, orderInvoice);
    batchInvoiceDetail (invoiceDetail) += batchOrderInvoiceDetail(invoiceDetail);
    
    currencyOrderInvoiceDetail (detail) = currencyOrderInvoice(orderInvoiceOrderInvoiceDetail(detail)) PERSISTENT;

    priceListTypeInvoiceDetail(detail) += priceListTypeOrderDetail(orderDetailOrderInvoiceDetail(detail));

    sumInvoiceUserOrderDetail 'Сумма' = DATA NUMERIC[16,2] (UserOrderDetail);
    sumInvoiceOrderDetail 'Сумма' = ABSTRACT NUMERIC[16,2] (OrderDetail);
    sumInvoiceOrderDetail(d) += sumInvoiceUserOrderDetail(d);
    
    sumInvoiceUserOrderDetail (orderDetail) <- NUMERIC[16,2](roundPriceCurrency(invoiceQuantityOrderDetail(orderDetail) * priceOrderDetail(orderDetail), currencyOrderDetail(orderDetail)))
                    WHEN DO CHANGED(invoiceQuantityOrderDetail(orderDetail)) OR CHANGED (priceOrderDetail(orderDetail)) OR CHANGED(currencyOrderDetail(orderDetail));  

    VATSumInvoiceUserOrderDetail 'Сумма НДС'  = DATA NUMERIC[16,2] (UserOrderDetail);
    VATSumInvoiceOrderDetail 'Сумма НДС'  = ABSTRACT NUMERIC[16,2] (OrderDetail);
    VATSumInvoiceOrderDetail(d) += VATSumInvoiceUserOrderDetail(d);
    
    VATSumInvoiceUserOrderDetail (orderDetail)  <- roundPriceCurrency((sumInvoiceOrderDetail(orderDetail) * calcValueVATOrderDetail (orderDetail) / 100), currencyOrderDetail(orderDetail))
                    WHEN DO CHANGED(sumInvoiceOrderDetail(orderDetail)) OR CHANGED (calcValueVATOrderDetail (orderDetail)) OR CHANGED (currencyOrderDetail (orderDetail));
    
    invoiceSumInvoiceUserOrderDetail 'Сумма с НДС'  = DATA NUMERIC[16,2] (UserOrderDetail);
    invoiceSumInvoiceOrderDetail 'Сумма с НДС'  = ABSTRACT NUMERIC[16,2] (OrderDetail);
    invoiceSumInvoiceOrderDetail(d) += invoiceSumInvoiceUserOrderDetail(d);
    
    invoiceSumInvoiceUserOrderDetail (orderDetail) <- sumInvoiceOrderDetail(orderDetail) (+) VATSumInvoiceOrderDetail(orderDetail)
        WHEN CHANGED(sumInvoiceOrderDetail(orderDetail)) OR CHANGED(VATSumInvoiceOrderDetail(orderDetail));

    quantityInvoiceDetail(invoiceDetail) += invoiceQuantityOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    priceInvoiceDetail(invoiceDetail) += priceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    sumInvoiceDetail(invoiceDetail) += sumInvoiceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    VATInvoiceDetail(invoiceDetail) += VATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    valueVATInvoiceDetail(invoiceDetail) += valueVATOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    invoicePriceInvoiceDetail(invoiceDetail) += invoicePriceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    invoiceSumInvoiceDetail(invoiceDetail) += invoiceSumInvoiceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));
    VATSumInvoiceDetail(invoiceDetail) += VATSumInvoiceOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

    orderInvoiceDetail(invoiceDetail) += orderOrderDetail(orderDetailOrderInvoiceDetail(invoiceDetail));

    editInvoice(invoice) += ACTION EXEC editOrder(orderOrderInvoice(invoice));
    closeInvoice(invoice) += ACTION EXEC closeOrder(orderOrderInvoice(invoice)); 
    editInvoiceDetail(d) += ACTION EXEC editOrderDetail(orderDetailOrderInvoiceDetail(d));
    
    isNewOrderInvoiceDetail = DATA BOOLEAN ();
    onStarted() += ACTION (){
        IF NOT isNewOrderInvoiceDetail() THEN {
            sumInvoiceUserOrderDetail(d) <- sumOrderDetail(d); 
            VATSumInvoiceUserOrderDetail(d) <- VATSumOrderDetail(d); 
            invoiceSumInvoiceUserOrderDetail(d) <- invoiceSumOrderDetail(d);
            isNewOrderInvoiceDetail() <- TRUE;
            apply();
        }
    }
END