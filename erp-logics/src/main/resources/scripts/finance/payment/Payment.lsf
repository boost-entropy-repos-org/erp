MODULE Payment;

REQUIRE Bank, Document, LegalEntity, Numerator, PaymentLedger, PaymentOperation;

CLASS Payment 'Платеж' : PaymentLedger;
TABLE payment(Payment);

@defineDocumentHeaderPosted(Payment);

@defineNumbered(Payment);
@defineNumeratedDefault(Payment, 'Платежи', 'ПЛ');
@defineExternalizable(payment, VARSTRING[100]);

datePayment 'Дата' (payment) = DATA DATE (Payment);
datePayment(payment) <- currentDate() WHEN SET(payment IS Payment);
timePayment 'Время' (payment) = DATA TIME (Payment);
timePayment(payment) <- currentTime() WHEN SET(payment IS Payment);
dateTimePayment 'Дата время' (payment) = dateTimeToDateTime(datePayment(payment), timePayment(payment));

orderPayment 'Порядок' (payment) = DATA INTEGER(Payment);

payerPayment(payment) = DATA LegalEntity (Payment);
namePayerPayment 'Плательщик' (payment) = nameLegalEntity(payerPayment(payment));
accountFromPayment(payment) = DATA PaymentLedger.Account (Payment);
accountFromPayment(payment) <- accountLegalEntity(payerPayment(payment))
    WHEN CHANGED(payerPayment(payment));
nameAccountFromPayment 'Счет' (payment) = PaymentLedger.nameAccount(accountFromPayment(payment));
currencyAccountFromPayment (payment) = PaymentLedger.currencyAccount(accountFromPayment(payment));
nameCurrencyAccountFromPayment 'Валюта счета' (payment) = PaymentLedger.nameCurrencyAccount(accountFromPayment(payment));
sumPayment 'Сумма' (payment) = DATA NUMERIC[16,2] (Payment) PREFCHARWIDTH 16;

CONSTRAINT payerPayment(payment) != PaymentLedger.legalEntityAccount(accountFromPayment(payment))
    CHECKED BY accountFromPayment MESSAGE 'Организация счета должна совпадать с плательщиком';

beneficiaryPayment(payment) = DATA LegalEntity (Payment);
nameBeneficiaryPayment 'Бенефициар' (payment) = nameLegalEntity(beneficiaryPayment(payment));
accountToPayment(payment) = DATA PaymentLedger.Account (Payment);
accountToPayment(payment) <- accountLegalEntity(beneficiaryPayment(payment))
    WHEN CHANGED(beneficiaryPayment(payment));
nameAccountToPayment 'Счет' (payment) = PaymentLedger.nameAccount(accountToPayment(payment));
currencyAccountToPayment(payment) = PaymentLedger.currencyAccount(accountToPayment(payment));
nameCurrencyAccountToPayment 'Валюта счета' (payment) = PaymentLedger.nameCurrencyAccount(accountToPayment(payment));

CONSTRAINT beneficiaryPayment(payment) != PaymentLedger.legalEntityAccount(accountToPayment(payment))
    CHECKED BY accountToPayment MESSAGE 'Организация счета должна совпадать с бенефициаром';

textPayment 'Назначение платежа' = DATA TEXT (Payment);

notePayment 'Примечание' (payment) = DATA VARSTRING[200] (Payment);

descriptionPayment 'Название документа' =
    [= FORMULA VARSTRING[200] '\'Платеж \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)|| \' <-\' || CAST($4 AS TEXT)'](
    seriesNumberPayment(payment), datePayment(payment), nameBeneficiaryPayment(payment), namePayerPayment(payment)) PERSISTENT;

dateTimePaymentLedger(paymentLedger) += dateTimePayment(paymentLedger);
legalEntityFromPaymentLedger(paymentLedger) += payerPayment(paymentLedger);
legalEntityToPaymentLedger(paymentLedger) += beneficiaryPayment(paymentLedger);
accountFromPaymentLedger(payment) += accountFromPayment(payment);
sumPaymentLedger(paymentLedger) += sumPayment(paymentLedger);
accountToPaymentLedger(payment) += accountToPayment(payment);
descriptionPaymentLedger(paymentLedger) += descriptionPayment(paymentLedger);
PaymentLedger.isPostedPaymentLedger(paymentLedger) += isPostedPayment(paymentLedger);

CONSTRAINT PaymentLedger.legalEntityAccount(accountFromPayment(payment)) != payerPayment(payment)
    CHECKED BY accountFromPayment MESSAGE 'Организация счета(с) должна совпадать с организацией(покупатель)';

CONSTRAINT PaymentLedger.legalEntityAccount(accountToPayment(payment)) != beneficiaryPayment(payment)
    CHECKED BY accountToPayment MESSAGE 'Организация счета(на) должна совпадать с организацией(поставщик)';

CONSTRAINT currencyAccountFromPayment(payment) != currencyAccountToPayment(payment)
    CHECKED BY accountFromPayment, accountToPayment MESSAGE 'Валюта счета(с) должна совпадать с валютой счета(на)';

//Операции
operationPayment = DATA PaymentOperation.Operation (Payment);
nameOperationPayment 'Операция' = PaymentOperation.nameOperation(operationPayment(Payment));
idOperationPayment 'ID операции' = PaymentOperation.idOperation(operationPayment(Payment));

@defineDocumentOperationLegalEntity(payment, payer, 'Плательщик');
@defineDocumentOperationLegalEntity(payment, beneficiary, 'Бенефициар');

@defineDocumentOperationRole(payment);

//-------------------------------------------- Форма платежей -------------------------------------------------------//

backgroundPaymentDate 'Цвет' (payment, date) = RGB(255,160,160) IF datePayment(payment) > date;

partyA = DATA SESSION LegalEntity();
namePartyA 'Организация (поставщик)' = nameLegalEntity(partyA());
partyB = DATA SESSION LegalEntity();
namePartyB 'Организация (покупатель)' = nameLegalEntity(partyB());

FORM payment 'Платеж'

    OBJECTS p = Payment FIXED PANEL
    PROPERTIES(p) isPostedPayment, nameNumeratorPayment, orderPayment, numberPayment, seriesPayment, datePayment, timePayment, textPayment,
                  notePayment, namePayerPayment, nameBeneficiaryPayment, nameAccountToPayment, nameAccountFromPayment, sumPayment,
                  nameCurrencyAccountToPayment, nameCurrencyAccountFromPayment, nameOperationPayment
    EVENTS
        ON OK prePostPayment(p)

    EDIT Payment OBJECT p
;

DESIGN payment FROM DEFAULT{

    main{
        type = CONTAINERV;
        NEW headerContainer{
            caption = 'Шапка документа';
            
            type = CONTAINERV;
            NEW first {
                type = CONTAINERH;
                ADD PROPERTY(isPostedPayment);
                ADD PROPERTY(nameOperationPayment);
            }
            NEW second { 
                type = CONTAINERH;
                ADD PROPERTY(nameNumeratorPayment);
                ADD PROPERTY(orderPayment);
                ADD PROPERTY(numberPayment);
                ADD PROPERTY(seriesPayment);
                ADD PROPERTY(datePayment);
                ADD PROPERTY(timePayment);
            }                                                                        
        }
        NEW columnContainer{
            type = CONTAINERH;
            NEW firstColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Сторона (с)';
                ADD PROPERTY(namePayerPayment);
                ADD PROPERTY(nameAccountFromPayment);
                ADD PROPERTY(nameCurrencyAccountFromPayment);
            }
            NEW secondColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Сторона (на)';
                ADD PROPERTY(nameBeneficiaryPayment);
                ADD PROPERTY(nameAccountToPayment);
                ADD PROPERTY(nameCurrencyAccountToPayment);
            }
        }
        NEW paramContainer {
            type = CONTAINERH;                             
            caption = 'Параметры документа';             
            ADD PROPERTY(sumPayment);
            ADD PROPERTY(notePayment);
        }
        ADD PROPERTY(textPayment){
            panelLabelAbove = TRUE;
            alignment = STRETCH;
        }
    }

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

filterPaymentDateFrom 'Дата с' = DATA DATE ();
filterDateFromPayment (p) = datePayment(p) >= filterPaymentDateFrom() OR (p IS Payment AND NOT filterPaymentDateFrom());      

filterPaymentDateTo 'Дата по' = DATA DATE ();
filterDateToPayment (p) = datePayment(p) <= filterPaymentDateTo() OR (p IS Payment AND NOT filterPaymentDateTo());         
    
FORM payments 'Платежи'

    PROPERTIES() filterPaymentDateFrom, filterPaymentDateTo, namePartyA, namePartyB

    OBJECTS p = Payment
    PROPERTIES(p) READONLYIF isReadonly() isPostedPayment, orderPayment, numberPayment, seriesPayment,
                  datePayment, timePayment, namePayerPayment, nameAccountFromPayment, nameBeneficiaryPayment, nameAccountToPayment,
                  nameCurrencyAccountToPayment, sumPayment, notePayment, nameOperationPayment 

    PROPERTIES(p) ADDFORM, EDITFORM, deletep=DELETE FORCE PANEL TOOLBAR

    ORDER BY datePayment, orderPayment 

    FILTERS payerPayment(p) == partyB() OR (p IS Payment AND NOT partyB()),
            beneficiaryPayment(p) == partyA() OR (p IS Payment AND NOT partyA()),
            filterDateFromPayment(p), filterDateToPayment(p)

;
        
DESIGN payments FROM DEFAULT{

    NEW headerContainer {
        type = CONTAINERH;
        caption = 'Шапка';
        ADD PROPERTY(filterPaymentDateFrom);
        ADD PROPERTY(filterPaymentDateTo);
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    ADD p.box;
    ADD functions.box;
}

@extendFormEditable(payments);

NAVIGATOR {
    paymentNavigator {
        ADD payments;
    }
}
