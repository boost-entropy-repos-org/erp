MODULE Payment;

REQUIRE Bank, Document, LegalEntity, Numerator, PaymentLedger, PaymentOperation;

CLASS Payment 'Платеж' : PaymentLedger;
TABLE payment(Payment); 

@defineCreated(Payment);

@defineDocumentHeaderPosted(Payment);


@defineNumbered(Payment);
@defineNumeratedDefault(Payment, 'Платежи', 'ПЛ');
@defineExternalizable(payment, VARSTRING[100]);

date 'Дата' (payment) = DATA DATE (Payment);
date(Payment payment) <- currentDate() WHEN SET(payment IS Payment);
time 'Время' (payment) = DATA TIME (Payment);
time(Payment payment) <- currentTime() WHEN SET(payment IS Payment);
dateTime 'Дата время' (Payment payment) = dateTimeToDateTime(date(payment), time(payment));

order 'Порядок' (payment) = DATA INTEGER(Payment);

isReturn 'Возвратный' = DATA BOOLEAN (Payment);

payer(payment) = DATA LegalEntity (Payment);
namePayer 'Плательщик' (Payment payment) = name(payer(payment));
accountFrom(payment) = DATA PaymentLedger.Account (Payment);
accountFrom(Payment payment) <- account(payer(payment))
    WHEN CHANGED(payer(payment));
nameAccountFrom 'Счет' (Payment payment) = name(accountFrom(payment));
currencyAccountFrom (Payment payment) = currency(accountFrom(payment));
nameCurrencyAccountFrom 'Валюта счета' (Payment payment) = nameCurrency(accountFrom(payment));
sum 'Сумма' (payment) = DATA NUMERIC[16,2] (Payment) PREFCHARWIDTH 16;

CONSTRAINT payer(Payment payment) != legalEntity(accountFrom(payment))
    CHECKED BY accountFrom[Payment] MESSAGE 'Организация счета должна совпадать с плательщиком';

beneficiary(payment) = DATA LegalEntity (Payment);
nameBeneficiary 'Бенефициар' (Payment payment) = name(beneficiary(payment));
accountTo(payment) = DATA PaymentLedger.Account (Payment);
accountTo(Payment payment) <- account(beneficiary(payment))
    WHEN CHANGED(beneficiary(payment));
nameAccountTo 'Счет' (Payment payment) = name(accountTo(payment));
currencyAccountTo(Payment payment) = currency(accountTo(payment));
nameCurrencyAccountTo 'Валюта счета' (Payment payment) = nameCurrency(accountTo(payment));

CONSTRAINT beneficiary(Payment payment) != legalEntity(accountTo(payment))
    CHECKED BY accountTo[Payment] MESSAGE 'Организация счета должна совпадать с бенефициаром';
    
text 'Назначение платежа' = DATA TEXT (Payment);

note 'Примечание' (payment) = DATA VARSTRING[200] (Payment);

description 'Название документа' = VARSTRING[200]('Платеж ' + seriesNumber(Payment payment) + ' от ' +  date(payment) + ' ' + nameBeneficiary(payment) + ' <-' + namePayer(payment)) PERSISTENT;

dateTime(Payment paymentLedger) += dateTime(paymentLedger);
legalEntityFrom(Payment paymentLedger) += payer(paymentLedger);
legalEntityTo(Payment paymentLedger) += beneficiary(paymentLedger);
accountFrom(Payment payment) += accountFrom(payment);
sum(Payment paymentLedger) += sum(paymentLedger);
accountTo(Payment payment) += accountTo(payment);
description(Payment paymentLedger) += description(paymentLedger);
isPosted(Payment paymentLedger) += isPosted(paymentLedger);

CONSTRAINT legalEntity(accountFrom(Payment payment)) != payer(payment)
    CHECKED BY accountFrom[Payment] MESSAGE 'Организация счета(с) должна совпадать с организацией(покупатель)';

CONSTRAINT legalEntity(accountTo(Payment payment)) != beneficiary(payment)
    CHECKED BY accountTo[Payment] MESSAGE 'Организация счета(на) должна совпадать с организацией(поставщик)';

CONSTRAINT currencyAccountFrom(Payment payment) != currencyAccountTo(payment)
    CHECKED BY accountFrom[Payment], accountTo[Payment] MESSAGE 'Валюта счета(с) должна совпадать с валютой счета(на)';
    
//объединение организаций
replace(LegalEntity l, LegalEntity o) += ACTION {
    payer(Payment payment) <- o WHERE payer(payment) == l;
    beneficiary(Payment payment) <- o WHERE beneficiary(payment) == l;
}     

//Операции
operation = DATA PaymentOperation.Operation (Payment);
nameOperation 'Операция' = name(operation(Payment Payment));
idOperation 'ID операции' = id(operation(Payment Payment));

@defineDocumentOperationLegalEntity(payment, payer, 'Плательщик');
@defineDocumentOperationLegalEntity(payment, beneficiary, 'Бенефициар');

@defineDocumentOperationRole(payment);

//-------------------------------------------- Форма платежей -------------------------------------------------------//

background 'Цвет' (Payment payment, DATE date) = RGB(255,160,160) IF date(payment) > date;

partyA = DATA LOCAL LegalEntity();
namePartyA 'Организация (поставщик)' = name(partyA());
partyB = DATA LOCAL LegalEntity();
namePartyB 'Организация (покупатель)' = name(partyB());

FORM payment 'Платеж'

    OBJECTS p = Payment FIXED PANEL
    PROPERTIES(p) isPosted, nameNumerator, order, number, series, date, time, text,
                  note, namePayer, nameBeneficiary, nameAccountTo, nameAccountFrom, sum,
                  nameCurrencyAccountTo, nameCurrencyAccountFrom, nameOperation, isReturn 
    EVENTS
        ON OK prePost(p)

    EDIT Payment OBJECT p
;

DESIGN payment {

    main{
        type = CONTAINERV;
        NEW headerContainer{
            caption = 'Шапка документа';
            
            type = CONTAINERV;
            NEW first {
                type = CONTAINERH;
                MOVE PROPERTY(isPosted(p));
                MOVE PROPERTY(nameOperation(p));
                MOVE PROPERTY(isReturn(p));
            }
            NEW second { 
                type = CONTAINERH;
                MOVE PROPERTY(nameNumerator(p));
                MOVE PROPERTY(order(p));
                MOVE PROPERTY(number(p));
                MOVE PROPERTY(series(p));
                MOVE PROPERTY(date(p));
                MOVE PROPERTY(time(p));
            }                                                                        
        }
        NEW columnContainer{
            type = CONTAINERH;
            NEW firstColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Сторона (с)';
                MOVE PROPERTY(namePayer(p));
                MOVE PROPERTY(nameAccountFrom(p));
                MOVE PROPERTY(nameCurrencyAccountFrom(p));
            }
            NEW secondColumn{
                type = COLUMNS;
                columns = 1;
                fill = 1;
                caption = 'Сторона (на)';
                MOVE PROPERTY(nameBeneficiary(p));
                MOVE PROPERTY(nameAccountTo(p));
                MOVE PROPERTY(nameCurrencyAccountTo(p));
            }
        }
        NEW paramContainer {
            type = CONTAINERH;                             
            caption = 'Параметры документа';             
            MOVE PROPERTY(sum(p));
            MOVE PROPERTY(note(p));
        }
        MOVE PROPERTY(text(p)){
            panelCaptionAbove = TRUE;
            alignment = STRETCH;
        }
    }

    PROPERTY(formOk()) {
        caption = 'Провести';
    }

    MOVE functions.box;
}

//----------------------------------------- Копирование платежей ----------------------------------------------------//
copyData(Payment payment, Payment p) = ACTION {
    operation(p) <- operation(payment);
    isReturn(p) <- isReturn(payment);
    order(p) <- order(payment);
    date(p) <- date(payment);
    time(p) <- time(payment);
    payer(p) <- payer(payment);
    beneficiary(p) <- beneficiary(payment);
    sum(p) <- sum(payment);
}
    
copy 'Копировать'(Payment payment) = ACTION NEWSESSION {
    FOR ADDOBJ p = Payment DO {
        EXEC copyData(payment, p);
        FORM payment OBJECTS p = p MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

edit 'Редактировать' = ACTION EDITFORM Payment IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

filterPaymentDateFrom 'Дата с' = DATA DATE ();
filterDateFrom (Payment p) = date(p) >= filterPaymentDateFrom() OR (p IS Payment AND NOT filterPaymentDateFrom());      

filterPaymentDateTo 'Дата по' = DATA DATE ();
filterDateTo (Payment p) = date(p) <= filterPaymentDateTo() OR (p IS Payment AND NOT filterPaymentDateTo());         
    
FORM payments 'Платежи'

    PROPERTIES() filterPaymentDateFrom, filterPaymentDateTo, namePartyA, namePartyB

    OBJECTS p = Payment LAST
    PROPERTIES(p) READONLYIF isReadonly() isPosted, isReturn, order, number, series,
                  date, time, namePayer, nameAccountFrom, nameBeneficiary, nameAccountTo,
                  nameCurrencyAccountTo, sum, note, nameOperation 

    PROPERTIES(p) READONLY TODRAW p FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                                postedNameUser, postedTime, postedHostnameComputer 

    PROPERTIES(p) ADDFORM, EDITFORM, deletep=DELETE FORCE PANEL TOOLBAR, copy

    ORDER BY date(p), order(p)

    FILTERS payer(p) == partyB() OR (p IS Payment AND NOT partyB()),
            beneficiary(p) == partyA() OR (p IS Payment AND NOT partyA()),
            filterDateFrom(p), filterDateTo(p)

;
        
DESIGN payments {

    NEW headerContainer {
        type = CONTAINERH;
        caption = 'Шапка';
        MOVE PROPERTY(filterPaymentDateFrom());
        MOVE PROPERTY(filterPaymentDateTo());
        MOVE PROPERTY(namePartyA());
        MOVE PROPERTY(namePartyB());
    }
    MOVE p.box;
    NEW documentHistory {
        caption = 'История';
        type = CONTAINERV;
        MOVE p.created;
        MOVE p.posted;
    }
    MOVE functions.box;
}

@extendFormEditable(payments);

NAVIGATOR {
    paymentNavigator {
        ADD payments;
    }
}
