MODULE CreditNote;

REQUIRE Shipment, Invoice;

//----------------------------------------------- Акт расхождения ---------------------------------------------------//

DESIGN options {
    pane {
        NEW creditNotes  {
            type = CONTAINERV;
            caption = 'Акт расхождения';            
        }
    }
}

META defineCreditNote(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, NS)//contact, contactCaption)

    CLASS ABSTRACT CreditNote 'Акт расхождения'###sign ;
    CLASS ABSTRACT CreditNoteDetail 'Строка акта расхождения'###sign ;

    CLASS UserCreditNote 'Акт расхождения (польз.)'###sign : CreditNote;
    CLASS UserCreditNoteDetail 'Строка акта расхождения (польз.)'###sign : CreditNoteDetail;

    GROUP creditNote 'Информация об акте расхождения' : base;
    
    @defineExternalizable(userCreditNote, VARSTRING[100]);
    @defineExternalizable(userCreditNoteDetail, VARSTRING[100]);

    @defineDocumentInterface(creditNote);
    @deriveDocumentHeaderTimePrefix(UserCreditNote, );

    @defineDocumentInterfaceNumber(creditNote);

    @defineNumeratedDefault(UserCreditNote, 'Акты расхождений'###sign, 'АР');

    @defineDocumentInterfaceLegalEntity (creditNote, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (creditNote, customer, 'Покупатель');

    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад покупателя', customer);

    CONSTRAINT supplierUserCreditNote(userCreditNote) AND supplierStockUserCreditNote(userCreditNote) AND NOT
               inLegalEntityStock(supplierUserCreditNote(userCreditNote), supplierStockUserCreditNote(userCreditNote))
        CHECKED BY supplierStockUserCreditNote
            MESSAGE 'Поставщик и склад поставщика для акта расхождений не имеют связи';
    CONSTRAINT customerUserCreditNote(userCreditNote) AND customerStockUserCreditNote(userCreditNote) AND NOT
               inLegalEntityStock(customerUserCreditNote(userCreditNote), customerStockUserCreditNote(userCreditNote))
        CHECKED BY customerStockUserCreditNote
            MESSAGE 'Покупатель и склад покупателя для акта расхождений не имеют связи';

    @defineDocumentInterfacePosted(creditNote);
    @defineDocumentInterfaceClosed(creditNote);
    @defineDocumentClosedConstraint(UserCreditNote);
    @defineDocumentInterfaceDescription(creditNote, 'Акт расхождения'###sign);

    @defineDocumentInterfaceCurrency(creditNote);
    @deriveDocumentCurrency(userCreditNote, stockProp###stock);

    @defineDocumentInterfaceContract(CreditNote, contractSku, supplier, customer,
                                     'Организация (поставщик) договора акта расхождений не соответствует организация (поставщик) акта расхождений',
                                     'Организация (покупатель) договора акта расхождений не соответствует организация (покупатель) акта расхождений',
                                     'акт расхождения'###sign, NS);

    @defineDocumentInterfaceDetailSku(creditNote, sku);

    @defineDocumentInterfaceDetailQuantity(creditNote);

    @defineDocumentInterfaceDetailPrice(creditNote);

    @defineDocumentInterfaceDetailDataSum(creditNote);
    @deriveDocumentDetailSum(userCreditNote, quantity);

    @defineDocumentInterfaceDetailVAT(creditNote, country###stockProp###stock);         //  derive см. ниже в "Связь акта и накладной"
    @defineDocumentInterfaceDetailVATDataSumCustom(creditNoteDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(creditNote);
    @defineDocumentHeaderSkuQuantity(creditNote, sku);
    @defineDocumentInterfaceHeaderSum(creditNote);
    @defineDocumentInterfaceHeaderVATSum(creditNote, creditNoteDetail, invoice);

    @defineAddDetailDialogSkuStock(userCreditNote, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userCreditNote, sku);
        
    @defineMovementSku(creditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userCreditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(creditNoteDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши остатки товара     
    @defineBarcodeSku(creditNoteDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара       
    @defineDocumentDialogSupplierCustomerStock(userCreditNote, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userCreditNoteDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userCreditNote, supplierFilter, customerFilter);       
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, document, ' по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, document, ' по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, documentVAT, ' НДС по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, documentInvoice, ' с НДС по накладной');    
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, shipment, ' по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipment, ' по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipmentVAT, ' НДС по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipmentInvoice, ' с НДС по факту');    
// --------------------------- Формы --------------------------------- //

    editCreditNote 'Редактировать' = ABSTRACT ACTION LIST (CreditNote) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

    FORM userCreditNote 'Акт расхождений'###sign
        OBJECTS c = UserCreditNote FIXED PANEL
        PROPERTIES (c) isPostedCreditNote, nameNumeratorUserCreditNote, numberUserCreditNote, seriesUserCreditNote, dateUserCreditNote, timeUserCreditNote,
                       nameSupplierUserCreditNote ON CHANGE changeSupplier###supplierFilter###userCreditNote(c), 
                       nameCustomerUserCreditNote ON CHANGE changeCustomer###customerFilter###userCreditNote(c), 
                       nameSupplierStockUserCreditNote ON CHANGE changeSupplierStock###supplierFilter###userCreditNote(c), 
                       nameCustomerStockUserCreditNote ON CHANGE changeCustomerStock###customerFilter###userCreditNote(c),
                       nameCurrencyUserCreditNote, seriesNumberContractSkuUserCreditNote, noteUserCreditNote,
                       countUserCreditNoteDetailUserCreditNote, quantityUserCreditNoteDetailUserCreditNote, sumUserCreditNoteDetailUserCreditNote,
                       VATSumUserCreditNoteDetailUserCreditNote, invoiceSumUserCreditNoteDetailUserCreditNote

        OBJECTS d = UserCreditNoteDetail
        PROPERTIES (d) indexUserCreditNoteDetail, idBarcodeSkuUserCreditNoteDetail, nameSkuUserCreditNoteDetail, shortNameUOMSkuUserCreditNoteDetail,
                       quantityUserCreditNoteDetail, priceUserCreditNoteDetail, sumUserCreditNoteDetail,
                       numberVATUserCreditNoteDetail, valueVATUserCreditNoteDetail, VATSumUserCreditNoteDetail, invoiceSumUserCreditNoteDetail,
                       name###stockProp###stock###userCreditNoteDetail, ADDOBJ, deletecd=DELETESESSION

        PROPERTIES(c) TODRAW d addDetailDialogSkuStockUserCreditNoteDetailUserCreditNote,
                               addDetailInputBarcodeUserCreditNoteDetailUserCreditNote, deleteUserCreditNoteDetailUserCreditNote
        FILTERS userCreditNoteUserCreditNoteDetail(d) == c

        EVENTS
            ON OK prePostUserCreditNote(c)

        EDIT UserCreditNote OBJECT c
    ;

    DESIGN userCreditNote {
        main {
            preferredSize = (1024, 768);

            NEW header.box {
                type = CONTAINERH;

                NEW headerRow1 {

                    MOVE c.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPostedCreditNote(c)) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumeratorUserCreditNote(c));
                            MOVE PROPERTY(numberUserCreditNote(c));
                            MOVE PROPERTY(seriesUserCreditNote(c));
                            MOVE PROPERTY(dateUserCreditNote(c));
                            MOVE PROPERTY(timeUserCreditNote(c));
                        }                    
                    }
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplierUserCreditNote(c));
                            MOVE PROPERTY(nameSupplierStockUserCreditNote(c));

                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomerUserCreditNote(c));
                            MOVE PROPERTY(nameCustomerStockUserCreditNote(c));
                        }

                    }
                    MOVE c.documentPrm;
                    NEW headerRow12 {
                        type = CONTAINERH;
                    }
                }

                MOVE c.documentSum {
                    columns = 1;
                }
            }

            NEW specification.box {
                fill = 1;
                type = TABBED;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }
            MOVE functions.box;
            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserCreditNoteDetailUserCreditNote(c)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserCreditNoteDetailUserCreditNote(c)) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserCreditNoteDetailUserCreditNote(c)) { preferredCharWidth = 13;}            
        }
    }

    @defineDocumentSkuStockPriceListTypeSystemLedger(userCreditNote, accountPriceListType, stockProp);
    @extendFormDocumentSkuStock(userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
    
    addUserCreditNote 'Добавить' = ACTION ADDFORM UserCreditNote;
    editUserCreditNote 'Редактировать' (userCreditNote) = ACTION EDITFORM UserCreditNote;
    editCreditNote(c) += ACTION editUserCreditNote(c);
    
    isUserOpenedCreditNote(c)=  isOpenedCreditNote(c) AND isUserCreditNote(c);
        
    FORM creditNotes 'Акты расхождений' 
        OBJECTS c = CreditNote
        PROPERTIES (c) READONLYIF isReadonly() isClosedCreditNote, isPostedCreditNote, numberCreditNote, seriesCreditNote, dateCreditNote, timeCreditNote,
                       nameSupplierCreditNote, nameSupplierStockCreditNote, nameCustomerCreditNote, nameCustomerStockCreditNote,
                       nameCurrencyCreditNote, seriesNumberContractSkuCreditNote
        PROPERTIES (c) READONLY countCreditNoteDetailCreditNote, quantityCreditNoteDetailCreditNote, sumCreditNoteDetailCreditNote,
                       VATSumCreditNoteDetailCreditNote, invoiceSumCreditNoteDetailCreditNote
        PROPERTIES (c) READONLYIF isReadonly() noteCreditNote
        PROPERTIES (c) READONLY FORCE PANEL createdNameUserUserCreditNote, createdTimeUserCreditNote, createdHostnameComputerUserCreditNote, 
                                            postedNameUserUserCreditNote, postedTimeUserCreditNote, postedHostnameComputerUserCreditNote                        

        PROPERTIES ()  addUserCreditNote TODRAW c
        PROPERTIES (c) editCreditNote SHOWIF isOpenedCreditNote(c)
        PROPERTIES (c) closeUserCreditNote SHOWIF isOpenedUserCreditNote(c), openUserCreditNote SHOWIF isClosedUserCreditNote(c)
        PROPERTIES (c) deletec=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpenedCreditNote(c)

        OBJECTS d = CreditNoteDetail
        PROPERTIES (d) READONLY indexCreditNoteDetail, idBarcodeSkuCreditNoteDetail, nameSkuCreditNoteDetail, shortNameUOMSkuCreditNoteDetail,
                                quantityCreditNoteDetail, priceCreditNoteDetail, sumCreditNoteDetail, numberVATCreditNoteDetail, valueVATCreditNoteDetail,
                                 VATSumCreditNoteDetail, invoiceSumCreditNoteDetail, name###stockProp###stock###creditNoteDetail
        FILTERS creditNoteCreditNoteDetail(d) == c

        DIALOG CreditNote OBJECT c
    ;

    DESIGN creditNotes 'Акты расхождений'###sign {
        PROPERTY (deletec) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            fill = 1;

            MOVE c.box { flex = 2.0; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE c.created;
                    MOVE c.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

//                        ADD PROPERTY(copyInvoice) { caption = 'Накладная (продажа)';}
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }                
            }
        }
    }
    @extendFormEditable(creditNotes);
    @defineFilterIsOpened (creditNote, creditNotes, c); 
    editCreditNoteDetail 'Редактировать' = ABSTRACT ACTION LIST  (CreditNoteDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    editUserCreditNoteDetail(d) = ACTION (d) NEWSESSION {
        FORM userCreditNote OBJECTS c = userCreditNoteUserCreditNoteDetail(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    
    editCreditNoteDetail(d) += ACTION editUserCreditNoteDetail(d);  
    
//--  Связь акта и накладной
    invoiceDetailCreditNoteDetail = ABSTRACT InvoiceDetail (CreditNoteDetail) PERSISTENT;
    invoiceDetailUserCreditNoteDetail = DATA InvoiceDetail (UserCreditNoteDetail);
    invoiceDetailCreditNoteDetail(creditNoteDetail) += invoiceDetailUserCreditNoteDetail(creditNoteDetail);

    CONSTRAINT supplierCreditNoteDetail(detail) != supplierInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail)) OR
               customerUserCreditNoteDetail(detail) != customerInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail)) OR
               skuUserCreditNoteDetail(detail) != skuInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        CHECKED BY invoiceDetailUserCreditNoteDetail
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расхождения должны соответствовать друг другу';

    descriptionIndexInvoiceUserCreditNoteDetail 'Накладная' (userCreditNoteDetail) =  descriptionIndexInvoiceDetail(invoiceDetailUserCreditNoteDetail(userCreditNoteDetail));
    descriptionIndexInvoiceInvoiceCreditNoteDetail 'Накладная' (creditNoteDetail) =  descriptionIndexInvoiceDetail(invoiceDetailCreditNoteDetail(creditNoteDetail));

    quantityInvoiceCreditNote (invoice, creditNote) = GROUP SUM quantityCreditNoteDetail(creditNoteDetail) BY invoiceInvoiceDetail(invoiceDetailCreditNoteDetail(creditNoteDetail)), creditNoteCreditNoteDetail(creditNoteDetail);
    invoicesCreditNote 'Накладные' (creditNote) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityInvoiceCreditNote(invoice, creditNote) , ', '
                                                    BY creditNote
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50;

    EXTEND FORM userCreditNote
        PROPERTIES(c) READONLY invoicesCreditNote
        PROPERTIES(d) descriptionIndexInvoiceUserCreditNoteDetail BEFORE deletecd
    ;
    DESIGN userCreditNote { headerRow12 { MOVE c.invoice {type = CONTAINERH;}}}


    EXTEND FORM creditNotes
        PROPERTIES(c) READONLY invoicesCreditNote
        PROPERTIES(d) READONLY descriptionIndexInvoiceInvoiceCreditNoteDetail
    ;
    // Записываем значения из накладной
    quantityUserCreditNoteDetail (detail)  <- toShipInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    priceUserCreditNoteDetail (detail)  <- priceInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    VATUserCreditNoteDetail (detail)  <- VATInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    valueVATUserCreditNoteDetail (detail)  <- valueVATInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    VATSumUserCreditNoteDetail (detail) <- roundPriceCurrency((sumUserCreditNoteDetail(detail) *
        valueVATUserCreditNoteDetail (detail) / 100), currencyInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail)))
        WHEN CHANGED(sumUserCreditNoteDetail(detail)) OR CHANGED(VATUserCreditNoteDetail(detail)) OR CHANGED(currencyUserCreditNoteDetail(detail));
    @deriveDocumentDetailVATPrefixSum (userCreditNote, invoice);

//-- агр.объект
    caseToShipInvoiceDetail = ABSTRACT CASE OVERRIDE FIRST NUMERIC[16,5](InvoiceDetail);
    caseToShipInvoiceDetail (detail) += WHEN skuInvoiceDetail(detail) IS Item THEN toShipInvoiceDetail(detail);
        
    @defineDocumentInterfaceProperty (invoice, createCreditNote, 'Создать акт расхождения');
    
    skipCreateCreditNoteInvoiceDetail = ABSTRACT BOOLEAN (InvoiceDetail) PERSISTENT;
    
    needToCreditNoteInvoiceDetail (invoiceDetail)= createCreditNoteInvoiceDetail(invoiceDetail)  AND
        caseToShipInvoiceDetail (invoiceDetail) AND isPostedInvoiceDetail(invoiceDetail) 
        AND isNotChargeSku(skuInvoiceDetail(invoiceDetail)) AND NOT skipCreateCreditNoteInvoiceDetail(invoiceDetail) PERSISTENT;

    overCopyInvoice(s, d) += ACTION (s, d) {
        ASSIGN createCreditNoteUserInvoice(d) <- createCreditNoteUserInvoice(s);
    }

    needToCreditNoteInvoice (invoice) = GROUP SUM 1 IF needToCreditNoteInvoiceDetail(invoiceDetail) BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    EXTEND FORM userInvoice PROPERTIES(i) createCreditNoteUserInvoice;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateCreditNote {
                caption = 'Акт расхождения';
                MOVE PROPERTY(createCreditNoteUserInvoice(i));
            }
        }
    }

    CLASS InvoiceCreditNote 'Акт расхождения на основе накладной' : CreditNote;
    CLASS InvoiceCreditNoteDetail 'Строка акта расхождения на основе накладной' : CreditNoteDetail;

    @defineDocumentTables(invoiceCreditNote);

    @defineDocumentAggregation(invoice, invoiceCreditNote, needToCreditNote);
    creditNoteCreditNoteDetail(detail) += invoiceCreditNoteInvoiceCreditNoteDetail(detail);

    indexCreditNoteDetail(detail) += indexInvoiceCreditNoteDetail(detail);

    dateCreditNote(creditNote) += dateInvoiceCreditNote(creditNote);
    timeCreditNote(creditNote) += timeInvoiceCreditNote(creditNote);

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, supplier, 'Склад поставщика', , );
    supplierStockCreditNote(creditNote) += supplierStockInvoiceCreditNote(creditNote);
    dataSupplierStockCreditNoteDetail(creditNoteDetail) += dataSupplierStockInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(creditNoteDetail));

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, customer, 'Склад покупателя', , );
    customerStockCreditNote(creditNote) += customerStockInvoiceCreditNote(creditNote);
    dataCustomerStockCreditNoteDetail(creditNoteDetail) += dataCustomerStockInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(creditNoteDetail));

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, supplier, 'Поставщик', , );
    supplierCreditNote(creditNote) += supplierInvoiceCreditNote(creditNote);

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, customer, 'Покупатель', , );
    customerCreditNote(creditNote) += customerInvoiceCreditNote(creditNote);
    
    contractSkuCreditNote(creditNote) += contractSkuInvoice(invoiceInvoiceCreditNote(creditNote));

    @defineDocumentAggregationPosted(invoice, invoiceCreditNote);
    isPostedCreditNote(creditNote) += isPostedInvoiceCreditNote(creditNote);
    
    @defineDocumentAggregationClosed(invoice, invoiceCreditNote);
    isClosedCreditNote(creditNote) += isClosedInvoiceCreditNote(creditNote);
    
    numberInvoiceCreditNote 'Номер документа' (invoiceCreditNote) = numberInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    numberCreditNote(creditNote) += numberInvoiceCreditNote(creditNote);

    seriesInvoiceCreditNote 'Серия документа' (invoiceCreditNote) = seriesInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    seriesCreditNote(creditNote) += seriesInvoiceCreditNote(creditNote);

    seriesNumberInvoiceCreditNote 'Серия/номер документа' (invoiceCreditNote) = seriesNumberInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));

    noteInvoiceInvoiceCreditNote 'Примечание' (invoiceCreditNote) = noteInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    noteCreditNote(creditNote) += noteInvoiceInvoiceCreditNote(creditNote);

    currencyInvoiceCreditNote  (invoiceCreditNote) = currencyInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    currencyCreditNote (creditNote) += currencyInvoiceCreditNote(creditNote);
    currencyInvoiceCreditNoteDetail (invoiceCreditNoteDetail) = currencyInvoiceCreditNote(invoiceCreditNoteInvoiceCreditNoteDetail(invoiceCreditNoteDetail));

    @defineDocumentDescription(invoiceCreditNote, InvoiceCreditNoteDetail, 'Акт расхождения на основе накладной'###sign);
    descriptionCreditNote (creditNote) += descriptionInvoiceCreditNote(creditNote);
        
    @defineDocumentAggregationDetailSku(invoice, invoiceCreditNote, sku);
    skuCreditNoteDetail(creditNoteDetail) +=  skuInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, toShip, 'Кол-во');   //                ????????   может надо сделать через минус
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, caseToShip, 'Кол-во'); 
    
    quantityCreditNoteDetail(creditNoteDetail) += caseToShipInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, price, 'Цена');

    priceCreditNoteDetail(creditNoteDetail) += priceInvoiceCreditNoteDetail(creditNoteDetail);

    sumInvoiceCreditNoteDetail 'Сумма' (invoiceCreditNoteDetail) = NUMERIC[16,2](roundPriceCurrency((caseToShipInvoiceCreditNoteDetail(invoiceCreditNoteDetail) *
        priceInvoiceCreditNoteDetail(invoiceCreditNoteDetail)), currencyInvoiceCreditNoteDetail(invoiceCreditNoteDetail)));

    sumCreditNoteDetail(creditNoteDetail) += sumInvoiceCreditNoteDetail(creditNoteDetail);

    invoiceDetailCreditNoteDetail(creditNoteDetail) += invoiceDetailInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, VAT, 'НДС');
    VATCreditNoteDetail (creditNoteDetail) += VATInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, numberVAT, 'НДС, номер');
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, valueVAT, 'НДС, %');
    valueVATCreditNoteDetail (creditNoteDetail) += valueVATInvoiceCreditNoteDetail(creditNoteDetail);

    VATSumInvoiceCreditNoteDetail 'Сумма НДС' (invoiceCreditNoteDetail) = NUMERIC[16,2](roundPriceCurrency((sumInvoiceCreditNoteDetail(invoiceCreditNoteDetail) *
    valueVATInvoiceCreditNoteDetail (invoiceCreditNoteDetail) / 100), currencyInvoiceCreditNoteDetail(invoiceCreditNoteDetail)));

    invoiceSumInvoiceCreditNoteDetail 'Сумма с НДС' (invoiceCreditNoteDetail) = VATSumInvoiceCreditNoteDetail(invoiceCreditNoteDetail) (+)
        sumInvoiceCreditNoteDetail(invoiceCreditNoteDetail);

    VATSumCreditNoteDetail (creditNoteDetail) += VATSumInvoiceCreditNoteDetail(creditNoteDetail);
    invoiceSumCreditNoteDetail (creditNoteDetail) += invoiceSumInvoiceCreditNoteDetail(creditNoteDetail);
    
    editCreditNote(c) += ACTION EXEC editInvoice(invoiceInvoiceCreditNote(c));
    editCreditNoteDetail(d) += ACTION editInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d));
    
   documentQuantityCreditNoteDetail (d) += quantityInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d)); 
   documentSumCreditNoteDetail (d) += sumInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d)); 
   documentVATSumCreditNoteDetail (d) += VATSumInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d));        
   documentInvoiceSumCreditNoteDetail (d) += invoiceSumInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d)); 

   shipmentQuantityCreditNoteDetail (d) += shippedInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d)); 
   shipmentSumInvoiceCreditNoteDetail (d) = NUMERIC[16,2](roundPriceCurrency((shippedInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(d)) *
                                     priceInvoiceCreditNoteDetail(d)), currencyInvoiceCreditNoteDetail(d)));
   shipmentSumCreditNoteDetail (d) += shipmentSumInvoiceCreditNoteDetail(d);
   shipmentVATSumInvoiceCreditNoteDetail (d) = NUMERIC[16,2](roundPriceCurrency((shipmentSumInvoiceCreditNoteDetail(d) *
                                  valueVATInvoiceCreditNoteDetail (d) / 100), currencyInvoiceCreditNoteDetail(d)));   
   shipmentVATSumCreditNoteDetail (d) += shipmentVATSumInvoiceCreditNoteDetail(d);        
   shipmentInvoiceSumCreditNoteDetail (d) += shipmentVATSumInvoiceCreditNoteDetail(d) (+) shipmentSumInvoiceCreditNoteDetail(d);   
   
END

META defineCreditNoteBatch(legalEntityProp, stockProp)
    @showDocumentInterfaceDetailBatch(creditNote);
    @defineDocumentInterfaceDetailBatch(creditNote, batch);

    EXTEND FORM userCreditNote PROPERTIES (d) nameBatchUserCreditNoteDetail AFTER shortNameUOMSkuUserCreditNoteDetail(d);
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatchCreditNoteDetail AFTER shortNameUOMSkuCreditNoteDetail(d);


    batchUserCreditNoteDetail (detail)  <- batchInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    @defineDocumentAggregationDetailBatch (invoice, invoiceCreditNote);
    batchCreditNoteDetail (creditNoteDetail) += batchInvoiceCreditNoteDetail(creditNoteDetail);
    
    // История по правой кнопке
    @defineBalancesBatch(creditNoteDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userCreditNoteDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(creditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userCreditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии    
    
    @defineDocumentBatchStockPriceListTypeSystemLedger(userCreditNote, accountPriceListType, stockProp);
    @extendFormDocumentBatchStock(userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
END

META defineCreditNotePaymentCondition (sign)

    paymentConditionCreditNote 'Условия оплаты' = ABSTRACT PaymentCondition (CreditNote) PERSISTENT;
    paymentConditionUserCreditNote 'Условия оплаты' = DATA PaymentCondition (UserCreditNote);
    paymentConditionCreditNote(prop) += paymentConditionUserCreditNote(prop);

    descriptionPaymentConditionCreditNote 'Условия оплаты' (prop) = descriptionPaymentCondition(paymentConditionCreditNote(prop)) IN base MINCHARWIDTH 10 PREFCHARWIDTH 15;
    descriptionPaymentConditionUserCreditNote 'Условия оплаты' (prop) = descriptionPaymentCondition(paymentConditionUserCreditNote(prop)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

    paymentConditionUserCreditNote(prop) <- paymentConditionContract(contractSkuUserCreditNote(prop))
        WHEN CHANGED(contractSkuUserCreditNote(prop));

    EXTEND FORM userCreditNote
        PROPERTIES(c) descriptionPaymentConditionUserCreditNote
    ;

    DESIGN userCreditNote{
        c.documentPrm{
            MOVE PROPERTY(descriptionPaymentConditionUserCreditNote(c));
        }
    }

END
