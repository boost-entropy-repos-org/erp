MODULE CreditNote;

REQUIRE Shipment, Invoice;

//----------------------------------------------- Акт расхождения ---------------------------------------------------//

META defineCreditNote(sign, stockProp)//contact, contactCaption)

    CLASS ABSTRACT CreditNote 'Акт расхождения'###sign ;
    CLASS ABSTRACT CreditNoteDetail 'Строка акта расхождения'###sign ;

    CLASS UserCreditNote 'Акт расхождения (польз.)'###sign : CreditNote;
    CLASS UserCreditNoteDetail 'Строка акта расхождения (польз.)'###sign : CreditNoteDetail;

    GROUP creditNote 'Информация об акте расхождения' : base;
    
    @defineExternalizable(userCreditNote, VARSTRING[100]);
    @defineExternalizable(userCreditNoteDetail, VARSTRING[100]);

    @defineDocumentInterface(creditNote);
    @deriveDocumentHeaderTimePrefix(UserCreditNote, );

    @defineDocumentInterfaceNumber(creditNote);

    @defineNumeratedDefault(UserCreditNote, 'Акты расхождений'###sign, 'АР');

    @defineDocumentInterfaceLegalEntity (creditNote, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (creditNote, customer, 'Покупатель');

    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад покупателя', customer);

    CONSTRAINT supplierUserCreditNote(userCreditNote) AND supplierStockUserCreditNote(userCreditNote) AND NOT
               inLegalEntityStock(supplierUserCreditNote(userCreditNote), supplierStockUserCreditNote(userCreditNote))
        CHECKED BY supplierStockUserCreditNote
            MESSAGE 'Поставщик и склад поставщика для акта расхождений не имеют связи';
    CONSTRAINT customerUserCreditNote(userCreditNote) AND customerStockUserCreditNote(userCreditNote) AND NOT
               inLegalEntityStock(customerUserCreditNote(userCreditNote), customerStockUserCreditNote(userCreditNote))
        CHECKED BY customerStockUserCreditNote
            MESSAGE 'Покупатель и склад покупателя для акта расхождений не имеют связи';

    @defineDocumentInterfacePosted(creditNote);
    @defineDocumentInterfaceClosed(creditNote);
    
    @defineDocumentInterfaceDescription(creditNote, 'Акт расхождения'###sign);

    @defineDocumentInterfaceCurrency(creditNote);
    @deriveDocumentCurrency(userCreditNote, stockProp);

    @defineDocumentInterfaceContract(CreditNote, contractSku, supplier, customer,
                                     'Организация (поставщик) договора акта расхождений не соответствует организация (поставщик) акта расхождений',
                                     'Организация (покупатель) договора акта расхождений не соответствует организация (покупатель) акта расхождений');

    @defineDocumentInterfaceDetailSku(creditNote, sku);

    @defineDocumentInterfaceDetailQuantity(creditNote);

    @defineDocumentInterfaceDetailPrice(creditNote);

    @defineDocumentInterfaceDetailDataSum(creditNote);
    @deriveDocumentDetailSum(userCreditNote, quantity);

    @defineDocumentInterfaceDetailVAT(creditNote, country###stockProp);         //  derive см. ниже в "Связь акта и накладной"
    @defineDocumentInterfaceDetailVATDataSumCustom(creditNoteDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(creditNote);
    @defineDocumentHeaderSkuQuantity(creditNote, sku);
    @defineDocumentInterfaceHeaderSum(creditNote);
    @defineDocumentInterfaceHeaderVATSum(creditNote, creditNoteDetail, invoice);

    @defineAddDetailDialogSkuStock(userCreditNote, sku, stockProp, dialogSku);
    @defineAddDetailDialogBarcode(userCreditNote, sku);
        

// --------------------------- Формы --------------------------------- //

    editCreditNote 'Редактировать' = ABSTRACT ACTION LIST (CreditNote) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

    FORM userCreditNote 'Акт расхождений'###sign
        OBJECTS c = UserCreditNote FIXED PANEL
        PROPERTIES (c) isPostedCreditNote, nameNumeratorUserCreditNote, numberUserCreditNote, seriesUserCreditNote, dateUserCreditNote, timeUserCreditNote,
                       nameSupplierUserCreditNote, nameCustomerUserCreditNote, nameSupplierStockUserCreditNote, nameCustomerStockUserCreditNote,
                       nameCurrencyUserCreditNote, seriesNumberContractSkuUserCreditNote, noteUserCreditNote,
                       countUserCreditNoteDetailUserCreditNote, quantityUserCreditNoteDetailUserCreditNote, sumUserCreditNoteDetailUserCreditNote,
                       VATSumUserCreditNoteDetailUserCreditNote, invoiceSumUserCreditNoteDetailUserCreditNote

        OBJECTS d = UserCreditNoteDetail
        PROPERTIES (d) indexUserCreditNoteDetail, idBarcodeSkuUserCreditNoteDetail, nameSkuUserCreditNoteDetail, shortNameUOMSkuUserCreditNoteDetail,
                       quantityUserCreditNoteDetail, priceUserCreditNoteDetail, sumUserCreditNoteDetail,
                       numberVATUserCreditNoteDetail, valueVATUserCreditNoteDetail, VATSumUserCreditNoteDetail, invoiceSumUserCreditNoteDetail,
                       name###stockProp###userCreditNoteDetail, ADDOBJ, deletecd=DELETESESSION

        PROPERTIES(c) TODRAW d addDetailDialogSkuStockUserCreditNoteDetailUserCreditNote,
                               addDetailInputBarcodeUserCreditNoteDetailUserCreditNote, deleteUserCreditNoteDetailUserCreditNote
        FILTERS userCreditNoteUserCreditNoteDetail(d) == c

        EVENTS
            ON OK prePostUserCreditNote(c)

        EDIT UserCreditNote OBJECT c
    ;

    DESIGN userCreditNote FROM DEFAULT{
        main {
            preferredSize = (1024, 768);

            NEW header.box BEFORE d.box {
                type = CONTAINERH;

                NEW headerRow1 {

                    ADD c.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            ADD PROPERTY(isPostedCreditNote) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            ADD PROPERTY(nameNumeratorUserCreditNote);
                            ADD PROPERTY(numberUserCreditNote);
                            ADD PROPERTY(seriesUserCreditNote);
                            ADD PROPERTY(dateUserCreditNote);
                            ADD PROPERTY(timeUserCreditNote);
                        }                    
                    }
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            ADD PROPERTY(nameSupplierUserCreditNote);
                            ADD PROPERTY(nameSupplierStockUserCreditNote);

                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            ADD PROPERTY(nameCustomerUserCreditNote);
                            ADD PROPERTY(nameCustomerStockUserCreditNote);
                        }

                    }
                    ADD c.documentPrm;
                    NEW headerRow12 {
                        type = CONTAINERH;
                    }
                }

                ADD c.documentSum {
                    columns = 1;
                }
            }

            d.panel{
                type = CONTAINERV;
            }
            PROPERTY(formOk) {
                caption = 'Провести';
            }
            PROPERTY(sumUserCreditNoteDetailUserCreditNote) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserCreditNoteDetailUserCreditNote) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserCreditNoteDetailUserCreditNote) { preferredCharWidth = 13;}            
        }
    }

    addUserCreditNote 'Добавить' = ACTION ADDFORM UserCreditNote;
    editUserCreditNote 'Редактировать' (userCreditNote) = ACTION EDITFORM UserCreditNote;
    editCreditNote(c) += editUserCreditNote(c);
    
    isUserOpenedCreditNote(c)=  isOpenedCreditNote(c) AND isUserCreditNote(c);
        
    FORM creditNotes 'Акты расхождений' TITLE 'Акты расхождений'###sign
        OBJECTS c = CreditNote
        PROPERTIES (c) READONLYIF isReadonly() isClosedCreditNote, isPostedCreditNote, numberCreditNote, seriesCreditNote, dateCreditNote, timeCreditNote,
                       nameSupplierCreditNote, nameSupplierStockCreditNote, nameCustomerCreditNote, nameCustomerStockCreditNote,
                       nameCurrencyCreditNote, seriesNumberContractSkuCreditNote
        PROPERTIES (c) READONLY countCreditNoteDetailCreditNote, quantityCreditNoteDetailCreditNote, sumCreditNoteDetailCreditNote,
                       VATSumCreditNoteDetailCreditNote, invoiceSumCreditNoteDetailCreditNote
        PROPERTIES (c) READONLYIF isReadonly() noteCreditNote
        PROPERTIES (c) READONLY FORCE PANEL createdNameUserUserCreditNote, createdTimeUserCreditNote, createdHostnameComputerUserCreditNote, 
                                            postedNameUserUserCreditNote, postedTimeUserCreditNote, postedHostnameComputerUserCreditNote                        

        PROPERTIES ()  addUserCreditNote TODRAW c
        PROPERTIES (c) editCreditNote SHOWIF isOpenedCreditNote(c)
        PROPERTIES (c) closeUserCreditNote SHOWIF isOpenedUserCreditNote(c), openUserCreditNote SHOWIF isClosedUserCreditNote(c)
        PROPERTIES (c) deletec=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpenedCreditNote(c)

        OBJECTS d = CreditNoteDetail
        PROPERTIES (d) READONLY indexCreditNoteDetail, idBarcodeSkuCreditNoteDetail, nameSkuCreditNoteDetail, shortNameUOMSkuCreditNoteDetail,
                                quantityCreditNoteDetail, priceCreditNoteDetail, sumCreditNoteDetail, numberVATCreditNoteDetail, valueVATCreditNoteDetail,
                                 VATSumCreditNoteDetail, invoiceSumCreditNoteDetail, name###stockProp###creditNoteDetail
        FILTERS creditNoteCreditNoteDetail(d) == c

        DIALOG CreditNote OBJECT c
    ;

    DESIGN creditNotes FROM DEFAULT {
        PROPERTY (deletec) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            fill = 1;

            ADD c.box { flex = 2.0; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                ADD d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    ADD c.created;
                    ADD c.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

//                        ADD PROPERTY(copyInvoice) { caption = 'Накладная (продажа)';}
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }                
            }
        }
    }
    @extendFormEditable(creditNotes);
    @defineFilterIsOpened (creditNote, creditNotes, c); 
//--  Связь акта и накладной
    invoiceDetailCreditNoteDetail = ABSTRACT InvoiceDetail (CreditNoteDetail) PERSISTENT;
    invoiceDetailUserCreditNoteDetail = DATA InvoiceDetail (UserCreditNoteDetail);
    invoiceDetailCreditNoteDetail(creditNoteDetail) += invoiceDetailUserCreditNoteDetail(creditNoteDetail);

    CONSTRAINT supplierCreditNoteDetail(detail) != supplierInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail)) OR
               customerUserCreditNoteDetail(detail) != customerInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail)) OR
               skuUserCreditNoteDetail(detail) != skuInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        CHECKED BY invoiceDetailUserCreditNoteDetail
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расхождения должны соответствовать друг другу';

    descriptionIndexInvoiceUserCreditNoteDetail 'Накладная' (userCreditNoteDetail) =  descriptionIndexInvoiceDetail(invoiceDetailUserCreditNoteDetail(userCreditNoteDetail));
    descriptionIndexInvoiceInvoiceCreditNoteDetail 'Накладная' (creditNoteDetail) =  descriptionIndexInvoiceDetail(invoiceDetailCreditNoteDetail(creditNoteDetail));

    quantityInvoiceCreditNote (invoice, creditNote) = GROUP SUM quantityCreditNoteDetail(creditNoteDetail) BY invoiceInvoiceDetail(invoiceDetailCreditNoteDetail(creditNoteDetail)), creditNoteCreditNoteDetail(creditNoteDetail);
    invoicesCreditNote 'Накладные' (creditNote) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityInvoiceCreditNote(invoice, creditNote) , ', '
                                                    BY creditNote
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50;

    EXTEND FORM userCreditNote
        PROPERTIES(c) READONLY invoicesCreditNote
        PROPERTIES(d) descriptionIndexInvoiceUserCreditNoteDetail BEFORE deletecd
    ;
    EXTEND DESIGN userCreditNote { headerRow12 { ADD c.invoice {type = CONTAINERH;}}}


    EXTEND FORM creditNotes
        PROPERTIES(c) READONLY invoicesCreditNote
        PROPERTIES(d) READONLY descriptionIndexInvoiceInvoiceCreditNoteDetail
    ;
    // Записываем значения из накладной
    quantityUserCreditNoteDetail (detail)  <- toShipInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    priceUserCreditNoteDetail (detail)  <- priceInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    VATUserCreditNoteDetail (detail)  <- VATInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    valueVATUserCreditNoteDetail (detail)  <- valueVATInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    VATSumUserCreditNoteDetail (detail) <- roundPriceCurrency((sumUserCreditNoteDetail(detail) *
        valueVATUserCreditNoteDetail (detail) / 100), currencyInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail)))
        WHEN CHANGED(sumUserCreditNoteDetail(detail)) OR CHANGED(VATUserCreditNoteDetail(detail)) OR CHANGED(currencyUserCreditNoteDetail(detail));
    @deriveDocumentDetailVATPrefixSum (userCreditNote, invoice);

//-- аггр.объект

    @defineDocumentInterfaceProperty (invoice, createCreditNote, 'Создать акт расхождения');
    needToCreditNoteInvoiceDetail (invoiceDetail)= createCreditNoteInvoiceDetail(invoiceDetail)  AND
        toShipInvoiceDetail (invoiceDetail) AND isPostedInvoiceDetail(invoiceDetail) PERSISTENT;

    overCopyInvoice(s, d) += ACTION (s, d) {
        ASSIGN createCreditNoteUserInvoice(d) <- createCreditNoteUserInvoice(s);
    }

    needToCreditNoteInvoice (invoice) = GROUP SUM 1 IF needToCreditNoteInvoiceDetail(invoiceDetail) BY invoiceInvoiceDetail(invoiceDetail) PERSISTENT;

    EXTEND FORM userInvoice PROPERTIES(i) createCreditNoteUserInvoice;
    EXTEND DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateCreditNote {
                caption = 'Акт расхождения';
                ADD PROPERTY(createCreditNoteUserInvoice);
            }
        }
    }

    CLASS InvoiceCreditNote 'Акт расхождения на основе накладной' : CreditNote;
    CLASS InvoiceCreditNoteDetail 'Строка акта расхождения на основе накладной' : CreditNoteDetail;

    @defineDocumentTables(invoiceCreditNote);

    @defineDocumentAggregation(invoice, invoiceCreditNote, needToCreditNote);
    creditNoteCreditNoteDetail(detail) += invoiceCreditNoteInvoiceCreditNoteDetail(detail);

    @defineDocumentDetailIndex(invoiceCreditNote);

    dateCreditNote(creditNote) += dateInvoiceCreditNote(creditNote);
    timeCreditNote(creditNote) += timeInvoiceCreditNote(creditNote);

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, supplier, 'Склад поставщика', , );
    supplierStockCreditNote(creditNote) += supplierStockInvoiceCreditNote(creditNote);
    dataSupplierStockCreditNoteDetail(creditNoteDetail) += dataSupplierStockInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(creditNoteDetail));

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, customer, 'Склад покупателя', , );
    customerStockCreditNote(creditNote) += customerStockInvoiceCreditNote(creditNote);
    dataCustomerStockCreditNoteDetail(creditNoteDetail) += dataCustomerStockInvoiceDetail(invoiceDetailInvoiceCreditNoteDetail(creditNoteDetail));

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, supplier, 'Поставщик', , );
    supplierCreditNote(creditNote) += supplierInvoiceCreditNote(creditNote);

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, customer, 'Покупатель', , );
    customerCreditNote(creditNote) += customerInvoiceCreditNote(creditNote);
    
    contractSkuCreditNote(creditNote) += contractSkuInvoice(invoiceInvoiceCreditNote(creditNote));

    @defineDocumentAggregationPosted(invoice, invoiceCreditNote);
    isPostedCreditNote(creditNote) += isPostedInvoiceCreditNote(creditNote);
    
    @defineDocumentAggregationClosed(invoice, invoiceCreditNote);
    isClosedCreditNote(creditNote) += isClosedInvoiceCreditNote(creditNote);
    
    numberInvoiceCreditNote 'Номер документа' (invoiceCreditNote) = numberInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    numberCreditNote(creditNote) += numberInvoiceCreditNote(creditNote);

    seriesInvoiceCreditNote 'Серия документа' (invoiceCreditNote) = seriesInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    seriesCreditNote(creditNote) += seriesInvoiceCreditNote(creditNote);

    seriesNumberInvoiceCreditNote 'Серия/номер документа' (invoiceCreditNote) = seriesNumberInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));

    noteInvoiceInvoiceCreditNote 'Примечание' (invoiceCreditNote) = noteInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    noteCreditNote(creditNote) += noteInvoiceInvoiceCreditNote(creditNote);

    currencyInvoiceCreditNote  (invoiceCreditNote) = currencyInvoice(invoiceInvoiceCreditNote(invoiceCreditNote));
    currencyCreditNote (creditNote) += currencyInvoiceCreditNote(creditNote);
    currencyInvoiceCreditNoteDetail (invoiceCreditNoteDetail) = currencyInvoiceCreditNote(invoiceCreditNoteInvoiceCreditNoteDetail(invoiceCreditNoteDetail));

    @defineDocumentDescription(invoiceCreditNote, InvoiceCreditNoteDetail, 'Акт расхождения на основе накладной'###sign);
    descriptionCreditNote (creditNote) += descriptionInvoiceCreditNote(creditNote);

    @defineDocumentAggregationDetailSku(invoice, invoiceCreditNote, sku);
    skuCreditNoteDetail(creditNoteDetail) +=  skuInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, toShip, 'Кол-во');   //                ????????   может надо сделать через минус

    quantityCreditNoteDetail(creditNoteDetail) += toShipInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, price, 'Цена');

    priceCreditNoteDetail(creditNoteDetail) += priceInvoiceCreditNoteDetail(creditNoteDetail);

    sumInvoiceCreditNoteDetail 'Сумма' (invoiceCreditNoteDetail) = NUMERIC[16,2](roundPriceCurrency((toShipInvoiceCreditNoteDetail(invoiceCreditNoteDetail) *
        priceInvoiceCreditNoteDetail(invoiceCreditNoteDetail)), currencyInvoiceCreditNoteDetail(invoiceCreditNoteDetail)));

    sumCreditNoteDetail(creditNoteDetail) += sumInvoiceCreditNoteDetail(creditNoteDetail);

    invoiceDetailCreditNoteDetail(creditNoteDetail) += invoiceDetailInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, VAT, 'НДС');
    VATCreditNoteDetail (creditNoteDetail) += VATInvoiceCreditNoteDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, numberVAT, 'НДС, номер');
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, valueVAT, 'НДС, %');
    valueVATCreditNoteDetail (creditNoteDetail) += valueVATInvoiceCreditNoteDetail(creditNoteDetail);

    VATSumInvoiceCreditNoteDetail 'Сумма НДС' (invoiceCreditNoteDetail) = NUMERIC[16,2](roundPriceCurrency((sumInvoiceCreditNoteDetail(invoiceCreditNoteDetail) *
    valueVATInvoiceCreditNoteDetail (invoiceCreditNoteDetail) / 100), currencyInvoiceCreditNoteDetail(invoiceCreditNoteDetail)));

    invoiceSumInvoiceCreditNoteDetail 'Сумма НДС' (invoiceCreditNoteDetail) = VATSumInvoiceCreditNoteDetail(invoiceCreditNoteDetail) (+)
        sumInvoiceCreditNoteDetail(invoiceCreditNoteDetail);

    VATSumCreditNoteDetail (creditNoteDetail) += VATSumInvoiceCreditNoteDetail(creditNoteDetail);
    invoiceSumCreditNoteDetail (creditNoteDetail) += invoiceSumInvoiceCreditNoteDetail(creditNoteDetail);
END

META defineCreditNoteBatch(dumb)
    @defineDocumentInterfaceDetailBatch(creditNote, batch);

    EXTEND FORM userCreditNote PROPERTIES (d) nameBatchUserCreditNoteDetail AFTER shortNameUOMSkuUserCreditNoteDetail;
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatchCreditNoteDetail AFTER shortNameUOMSkuCreditNoteDetail;


    batchUserCreditNoteDetail (detail)  <- batchInvoiceDetail(invoiceDetailUserCreditNoteDetail(detail))
        WHEN CHANGED(invoiceDetailUserCreditNoteDetail(detail));

    @defineDocumentAggregationDetailBatch (invoice, invoiceCreditNote);
    batchCreditNoteDetail (creditNoteDetail) += batchInvoiceCreditNoteDetail(creditNoteDetail);

END

META defineCreditNotePaymentCondition (sign)

    paymentConditionCreditNote 'Условия оплаты' = ABSTRACT PaymentCondition (CreditNote) PERSISTENT;
    paymentConditionUserCreditNote 'Условия оплаты' = DATA PaymentCondition (UserCreditNote);
    paymentConditionCreditNote(prop) += paymentConditionUserCreditNote(prop);

    descriptionPaymentConditionCreditNote 'Условия оплаты' (prop) = descriptionPaymentCondition(paymentConditionCreditNote(prop)) IN base MINCHARWIDTH 10 PREFCHARWIDTH 15;
    descriptionPaymentConditionUserCreditNote 'Условия оплаты' (prop) = descriptionPaymentCondition(paymentConditionUserCreditNote(prop)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

    paymentConditionUserCreditNote(prop) <- paymentConditionContract(contractSkuUserCreditNote(prop))
        WHEN CHANGED(contractSkuUserCreditNote(prop));

    EXTEND FORM userCreditNote
        PROPERTIES(c) descriptionPaymentConditionUserCreditNote
    ;

    EXTEND DESIGN userCreditNote{
        c.documentPrm{
            ADD PROPERTY(descriptionPaymentConditionUserCreditNote);
        }
    }

END
