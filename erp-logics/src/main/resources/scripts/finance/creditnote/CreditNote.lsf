MODULE CreditNote;

REQUIRE Shipment, Invoice;

//----------------------------------------------- Акт расхождения ---------------------------------------------------//

DESIGN options {
    pane {
        NEW creditNotes  {
            type = CONTAINERV;
            caption = 'Акт расхождения';            
        }
    }
}

META defineCreditNote(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, NS)//contact, contactCaption)

    CLASS ABSTRACT CreditNote 'Акт расхождения'###sign ;
    CLASS ABSTRACT CreditNoteDetail 'Строка акта расхождения'###sign ;

    CLASS UserCreditNote 'Акт расхождения (польз.)'###sign : CreditNote;
    CLASS UserCreditNoteDetail 'Строка акта расхождения (польз.)'###sign : CreditNoteDetail;

    GROUP creditNote 'Информация об акте расхождения' : base;
    
    @defineExternalizable(userCreditNote, VARSTRING[100]);
    @defineExternalizable(userCreditNoteDetail, VARSTRING[100]);

    @defineDocumentInterface(creditNote);
    @deriveDocumentHeaderTimePrefix(UserCreditNote, );

    @defineDocumentInterfaceNumber(creditNote);

    @defineNumeratedDefault(UserCreditNote, 'Акты расхождений'###sign, 'АР');

    @defineDocumentInterfaceLegalEntity (creditNote, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (creditNote, customer, 'Покупатель');

    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад покупателя', customer);

    CONSTRAINT supplier(UserCreditNote userCreditNote) AND supplierStock(userCreditNote) AND NOT
               in(supplier(userCreditNote), supplierStock(userCreditNote))
        CHECKED BY supplierStock[UserCreditNote]
            MESSAGE 'Поставщик и склад поставщика для акта расхождений не имеют связи';
    CONSTRAINT customer(UserCreditNote userCreditNote) AND customerStock(userCreditNote) AND NOT
               in(customer(userCreditNote), customerStock(userCreditNote))
        CHECKED BY customerStock[UserCreditNote]
            MESSAGE 'Покупатель и склад покупателя для акта расхождений не имеют связи';

    @defineDocumentInterfacePosted(creditNote);
    @defineDocumentInterfaceClosed(creditNote);
    @defineDocumentClosedConstraint(UserCreditNote);
    @defineDocumentInterfaceDescription(creditNote, 'Акт расхождения'###sign);

    @defineDocumentInterfaceCurrency(creditNote);
    @deriveDocumentCurrency(userCreditNote, stockProp###stock);

    @defineDocumentInterfaceContract(CreditNote, contractSku, supplier, customer,
                                     'Организация (поставщик) договора акта расхождений не соответствует организация (поставщик) акта расхождений',
                                     'Организация (покупатель) договора акта расхождений не соответствует организация (покупатель) акта расхождений',
                                     'акт расхождения'###sign, NS);

    @defineDocumentInterfaceDetailSku(creditNote, sku);

    @defineDocumentInterfaceDetailQuantity(creditNote);

    @defineDocumentInterfaceDetailPrice(creditNote);

    @defineDocumentInterfaceDetailDataSum(creditNote);
    @deriveDocumentDetailSum(userCreditNote, quantity);

    @defineDocumentInterfaceDetailVAT(creditNote, country###stockProp###stock);         //  derive см. ниже в "Связь акта и накладной"
    @defineDocumentInterfaceDetailVATDataSumCustom(creditNoteDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(creditNote);
    @defineDocumentHeaderSkuQuantity(creditNote, sku);
    @defineDocumentInterfaceHeaderSum(creditNote);
    @defineDocumentInterfaceHeaderVATSum(creditNote, creditNoteDetail, invoice);

    @defineAddDetailDialogSkuStock(userCreditNote, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userCreditNote, sku);
        
    @defineMovementSku(creditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userCreditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(creditNoteDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши остатки товара     
    @defineBarcodeSku(creditNoteDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара       
    @defineDocumentDialogSupplierCustomerStock(userCreditNote, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userCreditNoteDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userCreditNote, supplierFilter, customerFilter);       
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, document, ' по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, document, ' по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, documentVAT, ' НДС по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, documentInvoice, ' с НДС по накладной');    
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, shipment, ' по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipment, ' по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipmentVAT, ' НДС по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipmentInvoice, ' с НДС по факту');    
// --------------------------- Формы --------------------------------- //

    edit 'Редактировать' = ACTION ABSTRACT LIST (CreditNote) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

    FORM userCreditNote 'Акт расхождений'###sign
        OBJECTS c = UserCreditNote FIXED PANEL
        PROPERTIES (c) isPosted[CreditNote], nameNumerator, number, series, date, time,
                       nameSupplier ON CHANGE changeSupplier###supplierFilter(c), 
                       nameCustomer ON CHANGE changeCustomer###customerFilter(c), 
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(c), 
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(c),
                       nameCurrency, seriesNumberContractSku, note,
                       countUserCreditNoteDetail, quantityUserCreditNoteDetail, sumUserCreditNoteDetail,
                       VATSumUserCreditNoteDetail, invoiceSumUserCreditNoteDetail

        OBJECTS d = UserCreditNoteDetail
        PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                       quantity, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       name###stockProp##Stock, ADDOBJ, deletecd=DELETESESSION

        PROPERTIES(c) TODRAW d addDetailDialogSkuStockUserCreditNoteDetail,
                               addDetailInputBarcodeUserCreditNoteDetail, deleteUserCreditNoteDetail
        FILTERS userCreditNote(d) == c

        EVENTS
            ON OK prePost(c)

        EDIT UserCreditNote OBJECT c
    ;

    DESIGN userCreditNote {
        main {
            preferredSize = (1024, 768);

            NEW header.box {
                type = CONTAINERH;

                NEW headerRow1 {

                    MOVE c.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPosted(c)) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumerator(c));
                            MOVE PROPERTY(number(c));
                            MOVE PROPERTY(series(c));
                            MOVE PROPERTY(date(c));
                            MOVE PROPERTY(time(c));
                        }                    
                    }
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplier(c));
                            MOVE PROPERTY(nameSupplierStock(c));

                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomer(c));
                            MOVE PROPERTY(nameCustomerStock(c));
                        }

                    }
                    MOVE c.documentPrm;
                    NEW headerRow12 {
                        type = CONTAINERH;
                    }
                }

                MOVE c.documentSum {
                    columns = 1;
                }
            }

            NEW specification.box {
                fill = 1;
                type = TABBED;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }
            MOVE functions.box;
            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserCreditNoteDetail(c)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserCreditNoteDetail(c)) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumUserCreditNoteDetail(c)) { preferredCharWidth = 13;}            
        }
    }

    @defineDocumentSkuStockPriceListTypeSystemLedger(userCreditNote, accountPriceListType, stockProp);
    @extendFormDocumentSkuStock(userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
    
    addUserCreditNote 'Добавить' = ACTION ADDFORM UserCreditNote;
    edit 'Редактировать' (userCreditNote) = ACTION EDITFORM UserCreditNote;
    edit(UserCreditNote c) += ACTION edit(c);
    
    isUserOpened(UserCreditNote c)=  isOpened[CreditNote](c) AND is(c);
        
    FORM creditNotes 'Акты расхождений' 
        OBJECTS c = CreditNote
        PROPERTIES (c) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                       nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                       nameCurrency, seriesNumberContractSku
        PROPERTIES (c) READONLY countCreditNoteDetail, quantityCreditNoteDetail, sumCreditNoteDetail,
                       VATSumCreditNoteDetail, invoiceSumCreditNoteDetail
        PROPERTIES (c) READONLYIF isReadonly() note
        PROPERTIES (c) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer                        

        PROPERTIES ()  addUserCreditNote TODRAW c
        PROPERTIES (c) edit SHOWIF isOpened(c)
        PROPERTIES (c) close[UserCreditNote] SHOWIF isOpened[UserCreditNote](c), open SHOWIF isClosed[UserCreditNote](c)
        PROPERTIES (c) deletec=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpened(c)

        OBJECTS d = CreditNoteDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                                quantity, price, sum, numberVAT, valueVAT,
                                 VATSum, invoiceSum, name###stockProp##Stock
        FILTERS creditNote(d) == c

        DIALOG CreditNote OBJECT c
    ;

    DESIGN creditNotes 'Акты расхождений'###sign {
        PROPERTY (deletec) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            fill = 1;

            MOVE c.box { flex = 2.0; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE c.created;
                    MOVE c.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

//                        ADD PROPERTY(copyInvoice) { caption = 'Накладная (продажа)';}
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }                
            }
        }
    }
    @extendFormEditable(creditNotes);
    @defineFilterIsOpened (creditNote, creditNotes, c); 
    edit 'Редактировать' = ACTION ABSTRACT LIST  (CreditNoteDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit(UserCreditNoteDetail d) = ACTION NEWSESSION {
        FORM userCreditNote OBJECTS c = userCreditNote(d), d = d MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
    
    edit(UserCreditNoteDetail d) += ACTION edit(d);  
    
//--  Связь акта и накладной
    invoiceDetail = ABSTRACT InvoiceDetail (CreditNoteDetail) PERSISTENT;
    invoiceDetail = DATA InvoiceDetail (UserCreditNoteDetail);
    invoiceDetail(UserCreditNoteDetail creditNoteDetail) += invoiceDetail(creditNoteDetail);

    CONSTRAINT supplier[CreditNoteDetail](UserCreditNoteDetail detail) != supplier(invoiceDetail(detail)) OR
               customer(detail) != customer(invoiceDetail(detail)) OR
               sku(detail) != sku(invoiceDetail(detail))
        CHECKED BY invoiceDetail[UserCreditNoteDetail]
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расхождения должны соответствовать друг другу';

    descriptionIndexInvoice 'Накладная' (UserCreditNoteDetail userCreditNoteDetail) =  descriptionIndex(invoiceDetail(userCreditNoteDetail));
    descriptionIndexInvoiceInvoice 'Накладная' (CreditNoteDetail creditNoteDetail) =  descriptionIndex(invoiceDetail(creditNoteDetail));

    quantity (invoice, creditNote) = GROUP SUM quantity(CreditNoteDetail creditNoteDetail) BY invoice(invoiceDetail(creditNoteDetail)), creditNote(creditNoteDetail);
    invoices 'Накладные' (creditNote) = GROUP CONCAT VARSTRING[255](description(Invoice invoice)) IF quantity(invoice, CreditNote creditNote) , ', '
                                                    BY creditNote
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50;

    EXTEND FORM userCreditNote
        PROPERTIES(c) READONLY invoices
        PROPERTIES(d) descriptionIndexInvoice BEFORE deletecd
    ;
    DESIGN userCreditNote { headerRow12 { MOVE c.invoice {type = CONTAINERH;}}}


    EXTEND FORM creditNotes
        PROPERTIES(c) READONLY invoices
        PROPERTIES(d) READONLY descriptionIndexInvoiceInvoice
    ;
    // Записываем значения из накладной
    quantity (UserCreditNoteDetail detail)  <- toShip(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    price (UserCreditNoteDetail detail)  <- price(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    VAT (UserCreditNoteDetail detail)  <- VAT(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    valueVAT (UserCreditNoteDetail detail)  <- valueVAT(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    VATSum (UserCreditNoteDetail detail) <- round((sum(detail) *
        valueVAT (detail) / 100), currency(invoiceDetail(detail)))
        WHEN CHANGED(sum(detail)) OR CHANGED(VAT(detail)) OR CHANGED(currency(detail));
    @deriveDocumentDetailVATPrefixSum (userCreditNote, invoice);

//-- агр.объект
    caseToShip = ABSTRACT CASE OVERRIDE FIRST NUMERIC[16,5](InvoiceDetail);
    caseToShip (InvoiceDetail detail) += WHEN sku(detail) IS Item THEN toShip(detail);
        
    @defineDocumentInterfaceProperty (invoice, createCreditNote, 'Создать акт расхождения');
    
    skipCreateCreditNote = ABSTRACT BOOLEAN (InvoiceDetail) PERSISTENT;
    
    needToCreditNote (InvoiceDetail invoiceDetail)= createCreditNote(invoiceDetail)  AND
        caseToShip (invoiceDetail) AND isPosted(invoiceDetail) 
        AND isNotCharge(sku(invoiceDetail)) AND NOT skipCreateCreditNote(invoiceDetail) PERSISTENT;

    overCopy(UserInvoice s, UserInvoice d) += ACTION {
        ASSIGN createCreditNote(d) <- createCreditNote(s);
    }

    needToCreditNote (invoice) = GROUP SUM 1 IF needToCreditNote(InvoiceDetail invoiceDetail) BY invoice(invoiceDetail) PERSISTENT;

    EXTEND FORM userInvoice PROPERTIES(i) createCreditNote;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateCreditNote {
                caption = 'Акт расхождения';
                MOVE PROPERTY(createCreditNote(i));
            }
        }
    }

    CLASS InvoiceCreditNote 'Акт расхождения на основе накладной' : CreditNote;
    CLASS InvoiceCreditNoteDetail 'Строка акта расхождения на основе накладной' : CreditNoteDetail;

    @defineDocumentTables(invoiceCreditNote);

    @defineDocumentAggregation(invoice, invoiceCreditNote, needToCreditNote);
    creditNote(InvoiceCreditNoteDetail detail) += invoiceCreditNote(detail);

    index(InvoiceCreditNoteDetail detail) += index(detail);

    date(InvoiceCreditNote creditNote) += date(creditNote);
    time(InvoiceCreditNote creditNote) += time(creditNote);

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, supplier, 'Склад поставщика', , );
    supplierStock(InvoiceCreditNote creditNote) += supplierStock(creditNote);
    dataSupplierStock(InvoiceCreditNoteDetail creditNoteDetail) += dataSupplierStock(invoiceDetail(creditNoteDetail));

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, customer, 'Склад покупателя', , );
    customerStock(InvoiceCreditNote creditNote) += customerStock(creditNote);
    dataCustomerStock(InvoiceCreditNoteDetail creditNoteDetail) += dataCustomerStock(invoiceDetail(creditNoteDetail));

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, supplier, 'Поставщик', , );
    supplier(InvoiceCreditNote creditNote) += supplier(creditNote);

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, customer, 'Покупатель', , );
    customer(InvoiceCreditNote creditNote) += customer(creditNote);
    
    contractSku(InvoiceCreditNote creditNote) += contractSku(invoice(creditNote));

    @defineDocumentAggregationPosted(invoice, invoiceCreditNote);
    isPosted(InvoiceCreditNote creditNote) += isPosted(creditNote);
    
    @defineDocumentAggregationClosed(invoice, invoiceCreditNote);
    isClosed(InvoiceCreditNote creditNote) += isClosed(creditNote);
    
    number 'Номер документа' (InvoiceCreditNote invoiceCreditNote) = number(invoice(invoiceCreditNote));
    number(InvoiceCreditNote creditNote) += number(creditNote);

    series 'Серия документа' (InvoiceCreditNote invoiceCreditNote) = series(invoice(invoiceCreditNote));
    series(InvoiceCreditNote creditNote) += series(creditNote);

    seriesNumber 'Серия/номер документа' (InvoiceCreditNote invoiceCreditNote) = seriesNumber(invoice(invoiceCreditNote));

    noteInvoice 'Примечание' (InvoiceCreditNote invoiceCreditNote) = note(invoice(invoiceCreditNote));
    note(InvoiceCreditNote creditNote) += noteInvoice(creditNote);

    currency  (InvoiceCreditNote invoiceCreditNote) = currency(invoice(invoiceCreditNote));
    currency (InvoiceCreditNote creditNote) += currency(creditNote);
    currency (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = currency(invoiceCreditNote(invoiceCreditNoteDetail));

    @defineDocumentDescription(invoiceCreditNote, InvoiceCreditNoteDetail, 'Акт расхождения на основе накладной'###sign);
    description (InvoiceCreditNote creditNote) += description(creditNote);
        
    @defineDocumentAggregationDetailSku(invoice, invoiceCreditNote, sku);
    sku(InvoiceCreditNoteDetail creditNoteDetail) +=  sku(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, toShip, 'Кол-во');   //                ????????   может надо сделать через минус
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, caseToShip, 'Кол-во'); 
    
    quantity(InvoiceCreditNoteDetail creditNoteDetail) += caseToShip(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, price, 'Цена');

    price(InvoiceCreditNoteDetail creditNoteDetail) += price(creditNoteDetail);

    sum 'Сумма' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = NUMERIC[16,2](round((caseToShip(invoiceCreditNoteDetail) *
        price(invoiceCreditNoteDetail)), currency(invoiceCreditNoteDetail)));

    sum(InvoiceCreditNoteDetail creditNoteDetail) += sum(creditNoteDetail);

    invoiceDetail(InvoiceCreditNoteDetail creditNoteDetail) += invoiceDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, VAT, 'НДС');
    VAT (InvoiceCreditNoteDetail creditNoteDetail) += VAT(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, numberVAT, 'НДС, номер');
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, valueVAT, 'НДС, %');
    valueVAT (InvoiceCreditNoteDetail creditNoteDetail) += valueVAT(creditNoteDetail);

    VATSum 'Сумма НДС' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = NUMERIC[16,2](round((sum(invoiceCreditNoteDetail) *
    valueVAT (invoiceCreditNoteDetail) / 100), currency(invoiceCreditNoteDetail)));

    invoiceSum 'Сумма с НДС' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = VATSum(invoiceCreditNoteDetail) (+)
        sum(invoiceCreditNoteDetail);

    VATSum (InvoiceCreditNoteDetail creditNoteDetail) += VATSum(creditNoteDetail);
    invoiceSum (InvoiceCreditNoteDetail creditNoteDetail) += invoiceSum(creditNoteDetail);
    
    edit(InvoiceCreditNote c) += ACTION EXEC edit(invoice(c));
    edit(InvoiceCreditNoteDetail d) += ACTION edit(invoiceDetail(d));
    
   documentQuantity (InvoiceCreditNoteDetail d) += quantity(invoiceDetail(d)); 
   documentSum (InvoiceCreditNoteDetail d) += sum(invoiceDetail(d)); 
   documentVATSum (InvoiceCreditNoteDetail d) += VATSum(invoiceDetail(d));        
   documentInvoiceSum (InvoiceCreditNoteDetail d) += invoiceSum(invoiceDetail(d)); 

   shipmentQuantity (InvoiceCreditNoteDetail d) += shipped(invoiceDetail(d)); 
   shipmentSum (InvoiceCreditNoteDetail d) = NUMERIC[16,2](round((shipped(invoiceDetail(d)) *
                                     price(d)), currency(d)));
   shipmentSum (InvoiceCreditNoteDetail d) += shipmentSum(d);
   shipmentVATSum (InvoiceCreditNoteDetail d) = NUMERIC[16,2](round((shipmentSum(d) *
                                  valueVAT (d) / 100), currency(d)));   
   shipmentVATSum (InvoiceCreditNoteDetail d) += shipmentVATSum(d);        
   shipmentInvoiceSum (InvoiceCreditNoteDetail d) += shipmentVATSum(d) (+) shipmentSum(d);   
   
END

META defineCreditNoteBatch(legalEntityProp, stockProp)
    @showDocumentInterfaceDetailBatch(creditNote);
    @defineDocumentInterfaceDetailBatch(creditNote, batch);

    EXTEND FORM userCreditNote PROPERTIES (d) nameBatch AFTER shortNameUOMSku(d);
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);


    batch (UserCreditNoteDetail detail)  <- batch(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    @defineDocumentAggregationDetailBatch (invoice, invoiceCreditNote);
    batch (InvoiceCreditNoteDetail creditNoteDetail) += batch(creditNoteDetail);
    
    // История по правой кнопке
    @defineBalancesBatch(creditNoteDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userCreditNoteDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(creditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userCreditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии    
    
    @defineDocumentBatchStockPriceListTypeSystemLedger(userCreditNote, accountPriceListType, stockProp);
    @extendFormDocumentBatchStock(userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
END

META defineCreditNotePaymentCondition (sign)

    paymentCondition 'Условия оплаты' = ABSTRACT PaymentCondition (CreditNote) PERSISTENT;
    paymentCondition 'Условия оплаты' = DATA PaymentCondition (UserCreditNote);
    paymentCondition(UserCreditNote prop) += paymentCondition(prop);

    descriptionPaymentCondition 'Условия оплаты' (CreditNote prop) = description(paymentCondition(prop)) IN base MINCHARWIDTH 10 PREFCHARWIDTH 15;
    descriptionPaymentCondition 'Условия оплаты' (UserCreditNote prop) = description(paymentCondition(prop)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

    paymentCondition(UserCreditNote prop) <- paymentCondition(contractSku(prop))
        WHEN CHANGED(contractSku(prop));

    EXTEND FORM userCreditNote
        PROPERTIES(c) descriptionPaymentCondition
    ;

    DESIGN userCreditNote{
        c.documentPrm{
            MOVE PROPERTY(descriptionPaymentCondition(c));
        }
    }

END
