MODULE Payment;

REQUIRE Bank, Document, LegalEntity, Numerator, PaymentLedger;

CLASS Payment 'Платеж' : NumeratedObject, PaymentLedger;
CLASS PaymentPosted 'Проведенный платеж' : Payment, PostedObject;
TABLE payment(Payment);

@defineDocumentHeaderPosted(Payment);
@defineNumeratedObjectDefault(Payment, 'Нумератор для платежей', 'ПЛ');

datePayment 'Дата' (payment) = DATA DATE (Payment);
datePayment(payment) <- currentDate() WHEN ASSIGNED(payment IS Payment);
timePayment 'Время' (payment) = DATA TIME (Payment);
timePayment(payment) <- currentTime() WHEN ASSIGNED(payment IS Payment);
dateTimePayment 'Дата время' (payment) = dateTimeToDateTime(datePayment(payment), timePayment(payment));

payerPayment(payment) = DATA LegalEntity (Payment);
namePayerPayment 'Организация (покупатель)' (payment) = nameLegalEntity(payerPayment(payment));
accountFromPayment(payment) = DATA PaymentLedger.Account (Payment);
accountFromPayment(payment) <- accountLegalEntity(payerPayment(payment))
    WHEN CHANGED(payerPayment(payment));
nameAccountFromPayment 'Счет' (payment) = PaymentLedger.nameAccount(accountFromPayment(payment));
currencyAccountFromPayment (payment) = PaymentLedger.currencyAccount(accountFromPayment(payment));
nameCurrencyAccountFromPayment 'Валюта счета' (payment) = PaymentLedger.nameCurrencyAccount(accountFromPayment(payment));
sumFromPayment 'Сумма' (payment) = DATA NUMERIC[16,2] (Payment) PREFCHARWIDTH 16;

beneficiaryPayment(payment) = DATA LegalEntity (Payment);
nameBeneficiaryPayment 'Организация (поставщик)' (payment) = nameLegalEntity(beneficiaryPayment(payment));
accountToPayment(payment) = DATA PaymentLedger.Account (Payment);
accountToPayment(payment) <- accountLegalEntity(beneficiaryPayment(payment))
    WHEN CHANGED(beneficiaryPayment(payment));
nameAccountToPayment 'Счет' (payment) = PaymentLedger.nameAccount(accountToPayment(payment));
currencyAccountToPayment(payment) = PaymentLedger.currencyAccount(accountToPayment(payment));
nameCurrencyAccountToPayment 'Валюта счета' (payment) = PaymentLedger.nameCurrencyAccount(accountToPayment(payment));
sumToPayment 'Сумма' (payment) = DATA NUMERIC[16,2] (Payment) PREFCHARWIDTH 16;
sumToPayment(payment) <- sumFromPayment(payment)
    WHEN ASSIGNED(sumFromPayment(payment));

rateFromPayment 'Курс' (payment) = [FORMULA NUMERIC[15,8] '$1/$2'](sumToPayment(payment),sumFromPayment(payment)) PREFCHARWIDTH 15;
rateToPayment 'Курс' (payment) = [FORMULA NUMERIC[15,8] '$1/$2'](sumFromPayment(payment),sumToPayment(payment)) PREFCHARWIDTH 15;

notePayment 'Примечание' (payment) = DATA STRING[200] (Payment);

descriptionPayment 'Название документа' =
    [FORMULA STRING[200] '\'Платеж \' || CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) || \' \' || CAST($3 AS TEXT)'](
    seriesNumberObject(payment), datePayment(payment), nameBeneficiaryPayment(payment)) PERSISTENT;

dateTimePaymentLedger(paymentLedger) += dateTimePayment(paymentLedger);
legalEntityFromPaymentLedger(paymentLedger) += payerPayment(paymentLedger);
legalEntityToPaymentLedger(paymentLedger) += beneficiaryPayment(paymentLedger);
accountFromPaymentLedger(payment) += accountFromPayment(payment);
sumFromPaymentLedger(paymentLedger) += sumFromPayment(paymentLedger);
accountToPaymentLedger(payment) += accountToPayment(payment);
sumToPaymentLedger(paymentLedger) += sumToPayment(paymentLedger);
descriptionPaymentLedger(paymentLedger) += descriptionPayment(paymentLedger);
PaymentLedger.isPostedPaymentLedger(paymentLedger) += isPostedPayment(paymentLedger);

CONSTRAINT PaymentLedger.legalEntityAccount(accountFromPayment(payment)) != payerPayment(payment)
    CHECKED BY accountFromPayment MESSAGE 'Организация счета(с) должна совпадать с организацией(покупатель)';

CONSTRAINT PaymentLedger.legalEntityAccount(accountToPayment(payment)) != beneficiaryPayment(payment)
    CHECKED BY accountToPayment MESSAGE 'Организация счета(на) должна совпадать с организацией(поставщик)';

//------------------------------------------- Actions --------------------------------------------------------------//

setSumFromPayment = ACTION (payment){
    REQUEST NUMERIC[15,8] INPUT;
    SET sumToPayment(payment) <- sumFromPayment(payment)*requestedNumeric();
}
setSumToPayment = ACTION (payment){
    REQUEST NUMERIC[15,8] INPUT;
    SET sumFromPayment(payment) <- sumToPayment(payment)*requestedNumeric();
}

//-------------------------------------------- Форма платежей -------------------------------------------------------//

backgroundPaymentDate 'Цвет' (payment, date) = RGB(255,160,160) IF datePayment(payment) > date;

partyA = DATA SESSION LegalEntity();
namePartyA 'Организация (поставщик)' = nameLegalEntity(partyA());
partyB = DATA SESSION LegalEntity();
namePartyB 'Организация (покупатель)' = nameLegalEntity(partyB());

FORM payment 'Платеж'

    OBJECTS p = Payment FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject, datePayment, timePayment,
                  notePayment, namePayerPayment, nameBeneficiaryPayment, nameAccountToPayment, nameAccountFromPayment,
                  nameCurrencyAccountFromPayment, nameCurrencyAccountToPayment, sumFromPayment, sumToPayment,
                  rateFromPayment ON CHANGE setSumFromPayment(p),
                  rateToPayment ON CHANGE setSumToPayment(p)
    EVENTS
        ON OK prePostPayment(p)

    EDIT Payment OBJECT p
;

DESIGN payment FROM DEFAULT{

    main{
        childConstraints = TO THE BOTTOM;
        NEW headerContainer{
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHTBOTTOM;
            ADD PROPERTY(objectClassName);
            ADD PROPERTY(nameNumeratorObject);
            ADD PROPERTY(numberObject);
            ADD PROPERTY(seriesObject);
            ADD PROPERTY(datePayment);
            ADD PROPERTY(timePayment);
        }
        NEW columnContainer{
            childConstraints = TO THE RIGHT;
            NEW firstColumn{
                childConstraints = TO THE BOTTOM;
                caption = 'Сторона (с)';
                ADD PROPERTY(namePayerPayment);
                ADD PROPERTY(nameAccountFromPayment);
                ADD PROPERTY(nameCurrencyAccountFromPayment);
                ADD PROPERTY(sumFromPayment);
                ADD PROPERTY(rateFromPayment);
            }
            NEW secondColumn{
                childConstraints = TO THE BOTTOM;
                caption = 'Сторона (на)';
                ADD PROPERTY(nameBeneficiaryPayment);
                ADD PROPERTY(nameAccountToPayment);
                ADD PROPERTY(nameCurrencyAccountToPayment);
                ADD PROPERTY(sumToPayment);
                ADD PROPERTY(rateToPayment);
            }
        }
        NEW paramContainer {
            caption = 'Параметры документа';
            ADD PROPERTY(notePayment);
        }
    }

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    ADD functions.box;
}

FORM payments 'Платежи'

    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) date = OBJVALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS p = Payment
    PROPERTIES(p) BACKGROUND backgroundPaymentDate(p, d) READONLY numberObject, seriesObject, datePayment, timePayment,
                  namePayerPayment, nameBeneficiaryPayment, notePayment, objectClassName

    PROPERTIES(p) ADDFORM, EDITFORM, deletep=DELETE

    ORDER BY datePayment

    FILTERS payerPayment(p) == partyB() OR (p IS Payment AND NOT partyB()),
            beneficiaryPayment(p) == partyA() OR (p IS Payment AND NOT partyA())

;

DESIGN payments FROM DEFAULT{

    NEW headerContainer {
        childConstraints = TO THE RIGHT;
        caption = 'Шапка';
        ADD PROPERTY(date);
        ADD PROPERTY(namePartyA);
        ADD PROPERTY(namePartyB);
    }
    ADD p.box;
    ADD functions.box;
}

NAVIGATOR {
    paymentNavigator {
        ADD payments;
    }
}
