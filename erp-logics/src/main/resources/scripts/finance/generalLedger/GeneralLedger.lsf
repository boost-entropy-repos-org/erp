MODULE GeneralLedger;

REQUIRE GLAccountType, Operation;

CLASS ABSTRACT GLDocument 'Регистр-основание';
TABLE GLDocument(GLDocument);

isPostedGLDocument 'Проведен' = ABSTRACT BOOLEAN (GLDocument) PERSISTENT;

nameGLDocument 'Регистр-основание' = ABSTRACT VARSTRING[200] (GLDocument) PERSISTENT;
numberGLDocument 'Номер' = ABSTRACT STRING[18] (GLDocument) IN numberedGroup MINCHARWIDTH 7;
seriesGLDocument 'Серия' = ABSTRACT STRING[2] (GLDocument) IN numberedGroup FIXEDCHARWIDTH 3;
seriesNumberGLDocument 'Серия/Номер' (GLDocument) = CONCAT '', seriesGLDocument(GLDocument), numberGLDocument(GLDocument) MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20 PERSISTENT;

dateTimeGLDocument 'Дата/время' = ABSTRACT DATETIME (GLDocument) PERSISTENT;
dateGLDocument 'Дата' (document) = toDate(dateTimeGLDocument(document));
timeGLDocument 'Время' (document) = toTime(dateTimeGLDocument(document));

operationGLDocument 'Операция' = ABSTRACT Operation (GLDocument) PERSISTENT;

editGLDocument 'Редактировать регистр' = ABSTRACT ACTION LIST (GLDocument) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

onlineGeneralLedger 'Создавать проводки онлайн' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() onlineGeneralLedger
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(onlineGeneralLedger);
    }
}
//-------------------------- Проводки -------------------------//

CLASS ABSTRACT GeneralLedger 'Проводка';
TABLE generalLedger(GeneralLedger);

CLASS UserGeneralLedger 'Проводка (польз.)': GeneralLedger, Historizable;
CLASS UserGeneralLedgerPosted 'Проведенная проводка (польз.)': UserGeneralLedger, PostedObject;

@defineDocumentInterfaceHeaderPosted (GeneralLedger);
@defineDocumentInterfaceHeaderTimePrefix(GeneralLedger, , );
@deriveDocumentHeaderTimePrefix(UserGeneralLedger, );

GLDocumentGeneralLedger = ABSTRACT GLDocument (GeneralLedger) PERSISTENT;
nameGLDocumentGeneralLedger 'Регистр (описание)' (generalLedger) = nameGLDocument(GLDocumentGeneralLedger(generalLedger));

numberGLDocumentGeneralLedger 'Регистр (номер)' (generalLedger) = numberGLDocument(GLDocumentGeneralLedger(generalLedger));
seriesGLDocumentGeneralLedger 'Регистр (серия)' (generalLedger) = seriesGLDocument(GLDocumentGeneralLedger(generalLedger));
seriesNumberGLDocumentGeneralLedger 'Регистр (серия/номер)' (generalLedger) = seriesNumberGLDocument(GLDocumentGeneralLedger(generalLedger));

operationGLDocumentGeneralLedger (generalLedger) = operationGLDocument(GLDocumentGeneralLedger(generalLedger));

GLDocumentUserGeneralLedger = DATA GLDocument (UserGeneralLedger);
nameGLDocumentUserGeneralLedger 'Регистр-основание' (userGeneralLedger) = nameGLDocument(GLDocumentUserGeneralLedger(userGeneralLedger));

numberGLDocumentUserGeneralLedger 'Регистр (номер)' (userGeneralLedger) = numberGLDocument(GLDocumentUserGeneralLedger(userGeneralLedger));
seriesGLDocumentUserGeneralLedger 'Регистр (серия)' (userGeneralLedger) = seriesGLDocument(GLDocumentUserGeneralLedger(userGeneralLedger));
seriesNumberGLDocumentUserGeneralLedger 'Регистр (серия/номер)' (userGeneralLedger) = seriesNumberGLDocument(GLDocumentUserGeneralLedger(userGeneralLedger));

operationGLDocumentUserGeneralLedger (generalLedger) = operationGLDocument(GLDocumentUserGeneralLedger(generalLedger));

GLDocumentGeneralLedger (generalLedger) += GLDocumentUserGeneralLedger (generalLedger);

editGLDocumentGeneralLedger 'Редактировать регистр' (generalLedger) = editGLDocument(GLDocumentGeneralLedger(generalLedger));

legalEntityGeneralLedger = ABSTRACT LegalEntity (GeneralLedger) PERSISTENT;
nameLegalEntityGeneralLedger 'Компания' (generalLedger) = nameLegalEntity(legalEntityGeneralLedger(generalLedger));
legalEntityUserGeneralLedger = DATA LegalEntity (UserGeneralLedger);
nameLegalEntityUserGeneralLedger 'Компания' (userGeneralLedger) = nameLegalEntity(legalEntityUserGeneralLedger(userGeneralLedger));
legalEntityGeneralLedger (generalLedger) += legalEntityUserGeneralLedger (generalLedger);

debitGeneralLedger = ABSTRACT GLAccount (GeneralLedger) PERSISTENT;
idDebitGeneralLedger 'Дебет' (generalLedger) = idGLAccount(debitGeneralLedger(generalLedger));
debitUserGeneralLedger = DATA GLAccount (UserGeneralLedger);
idDebitUserGeneralLedger 'Дебет' (userGeneralLedger) = idGLAccount(debitUserGeneralLedger(userGeneralLedger));
debitGeneralLedger (generalLedger) += debitUserGeneralLedger (generalLedger);


creditGeneralLedger = ABSTRACT GLAccount (GeneralLedger) PERSISTENT;
idCreditGeneralLedger 'Кредит' (generalLedger) = idGLAccount(creditGeneralLedger(generalLedger));
creditUserGeneralLedger = DATA GLAccount (UserGeneralLedger);
idCreditUserGeneralLedger 'Кредит' (userGeneralLedger) = idGLAccount(creditUserGeneralLedger(userGeneralLedger));
creditGeneralLedger (generalLedger) += creditUserGeneralLedger (generalLedger);

CONSTRAINT GLAccountTypeGLAccount(debitUserGeneralLedger(userGeneralLedger)) != GLAccountTypeGLAccount(creditUserGeneralLedger(userGeneralLedger))
    CHECKED BY  debitUserGeneralLedger, creditUserGeneralLedger
    MESSAGE 'У дебета и кредита разные планы счетов';

sumGeneralLedger 'Сумма' = ABSTRACT NUMERIC[16,2] (GeneralLedger) PERSISTENT;
sumUserGeneralLedger 'Сумма' = DATA NUMERIC[16,2] (UserGeneralLedger);
sumGeneralLedger (generalLedger) += sumUserGeneralLedger (generalLedger);

descriptionGeneralLedger 'Описание' = ABSTRACT VARISTRING[340] (GeneralLedger) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80;
descriptionUserGeneralLedger 'Описание' = DATA VARSTRING[255] (UserGeneralLedger) MINCHARWIDTH 40 PREFCHARWIDTH 80;
descriptionGeneralLedger (generalLedger) += descriptionUserGeneralLedger (generalLedger);

skipGeneralLedger 'Не изменять значение' (generalLedger) = ABSTRACT BOOLEAN (GeneralLedger) PERSISTENT;
skipUserGeneralLedger 'Не изменять значение' (userGeneralLedger) = DATA BOOLEAN (UserGeneralLedger);
skipGeneralLedger (generalLedger) += skipUserGeneralLedger (generalLedger);

editGeneralLedger 'Редактировать' = ABSTRACT ACTION LIST (GeneralLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

// ----------------------------- Сальдо ---------------------------//

META  defineGLAccountSum (caption, concrete, prefix)
    // без учета текущей даты
    prefix###sumB###concrete###GLAccountCompanyDate 'Сумма на начало дня '###caption (GLAccount, company, date) = sum###concrete###GLAccountCompany(GLAccount, company)
                                                                      (-) [GROUP SUM sum###concrete###GLAccountCompanyDate(GLAccount, company, dateIn) IF dateIn >= date
                                                                                 BY GLAccount, company, date](GLAccount, company, date);
    // с учетом текущей даты
    prefix###sumA###concrete###GLAccountCompanyDate 'Сумма на конец дня '###caption (GLAccount, company, date) = sum###concrete###GLAccountCompany(GLAccount, company)
                                                                     (-) [GROUP SUM sum###concrete###GLAccountCompanyDate(GLAccount, company, dateIn) IF dateIn > date
                                                                                BY GLAccount, company, date](GLAccount, company, date);
END
META defineGLAccountBalance (caption, prefix)
    prefix###balanceAGLAccountCompanyDate 'Сальдо на начало дня '###caption (GLAccount, company, date) =  prefix###sumADebitGLAccountCompanyDate(GLAccount, company, date) (-) prefix###sumACreditGLAccountCompanyDate(GLAccount, company, date);
    prefix###balanceBGLAccountCompanyDate 'Сальдо на конец дня '###caption (GLAccount, company, date) =  prefix###sumBDebitGLAccountCompanyDate(GLAccount, company, date) (-) prefix###sumBCreditGLAccountCompanyDate(GLAccount, company, date);
END

sumCreditGLAccountCompany 'Сумма (кредит)' (GLAccount, company)= GROUP SUM sumGeneralLedger(ledger) IF isPostedGeneralLedger(ledger) BY creditGeneralLedger(ledger), legalEntityGeneralLedger(ledger);
sumDebitGLAccountCompany 'Сумма (дебет)' (GLAccount, company)= GROUP SUM sumGeneralLedger(ledger) IF isPostedGeneralLedger(ledger) BY debitGeneralLedger(ledger), legalEntityGeneralLedger(ledger);
balanceGLAccountCompany 'Сальдо' (GLAccount, company)= sumDebitGLAccountCompany(GLAccount, company) (-) sumCreditGLAccountCompany(GLAccount, company);

TABLE GLAccountLegalEntityDate(GLAccount, LegalEntity, DATE);
sumCreditGLAccountCompanyDate 'Сумма (кредит)' (GLAccount, company, date)= GROUP SUM sumGeneralLedger(ledger) IF isPostedGeneralLedger(ledger)
    BY creditGeneralLedger(ledger), legalEntityGeneralLedger(ledger), dateGeneralLedger(ledger) PERSISTENT;
sumDebitGLAccountCompanyDate 'Сумма (дебет)' (GLAccount, company, date)= GROUP SUM sumGeneralLedger(ledger) IF isPostedGeneralLedger(ledger)
    BY debitGeneralLedger(ledger), legalEntityGeneralLedger(ledger), dateGeneralLedger(ledger) PERSISTENT;
balanceGLAccountCompanyDate 'Сальдо' (GLAccount, company, date) =
    sumDebitGLAccountCompanyDate(GLAccount, company, date) (-) sumCreditGLAccountCompanyDate(GLAccount, company, date);

sumCreditGLAccountCompanyDateFromTo 'Сумма (кредит)' (GLAccount, company, dateFrom, dateTo) = GROUP SUM
        sumCreditGLAccountCompanyDate(GLAccount, company, date) IF date >= dateFrom AND date <= dateTo
        BY GLAccount, company, dateFrom, dateTo;
sumDebitGLAccountCompanyDateFromTo 'Сумма (дебет)' (GLAccount, company, dateFrom, dateTo) = GROUP SUM
        sumDebitGLAccountCompanyDate(GLAccount, company, date) IF date >= dateFrom AND date <= dateTo
        BY GLAccount, company, dateFrom, dateTo;
balanceGLAccountCompanyDateFromTo 'Сальдо' (GLAccount, company, dateFrom, dateTo) =
    sumDebitGLAccountCompanyDateFromTo(GLAccount, company, dateFrom, dateTo) (-) sumCreditGLAccountCompanyDateFromTo(GLAccount, company, dateFrom, dateTo);

@defineGLAccountSum ('(кредит)', credit, );
@defineGLAccountSum ('(дебет)', debit, );
@defineGLAccountBalance ( , );

//- Рекурсивно
recSumCreditGLAccountCompany 'Сумма (кредит)' (GLAccount, company)=  GROUP SUM sumCreditGLAccountCompany(child, company)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company;
recSumDebitGLAccountCompany 'Сумма (дебет)' (GLAccount, company)=  GROUP SUM sumDebitGLAccountCompany(child, company)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company;
recBalanceGLAccountCompany 'Сальдо' (GLAccount, company)=
    recSumDebitGLAccountCompany(GLAccount, company) (-) recSumCreditGLAccountCompany(GLAccount, company);

recSumCreditGLAccountCompanyDate 'Сумма (кредит)' (GLAccount, company, date)=  GROUP SUM sumCreditGLAccountCompanyDate(child, company, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, date PERSISTENT;
recSumDebitGLAccountCompanyDate 'Сумма (дебет)' (GLAccount, company, date)=  GROUP SUM sumDebitGLAccountCompanyDate(child, company, date)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, date PERSISTENT;
recBalanceGLAccountCompanyDate 'Сальдо' (GLAccount, company, date) =
    recSumDebitGLAccountCompanyDate(GLAccount, company, date) (-) recSumCreditGLAccountCompanyDate(GLAccount, company, date);

recSumCreditGLAccountCompanyDateFromTo 'Сумма (кредит)' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM sumCreditGLAccountCompanyDateFromTo(child, company, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, dateFrom, dateTo;
recSumDebitGLAccountCompanyDateFromTo 'Сумма (дебет)' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM sumDebitGLAccountCompanyDateFromTo(child, company, dateFrom, dateTo)
    IF isParentGLAccountGLAccount(child, GLAccount) BY GLAccount, company, dateFrom, dateTo;
recBalanceGLAccountCompanyDateFromTo 'Сальдо' (GLAccount, company, dateFrom, dateTo) =
    recSumDebitGLAccountCompanyDateFromTo(GLAccount, company, dateFrom, dateTo) (-) recSumCreditGLAccountCompanyDateFromTo(GLAccount, company, dateFrom, dateTo);


@defineGLAccountSum ('(кредит)', credit, rec);
@defineGLAccountSum ('(дебет)', debit, rec);
@defineGLAccountBalance ( , rec);

EXTEND FORM GLAccounts
    PROPERTIES(g,l,dFrom,dTo) READONLY BEFORE deletea recSumCreditGLAccountCompanyDateFromTo, recSumDebitGLAccountCompanyDateFromTo, recBalanceGLAccountCompanyDateFromTo

    OBJECTS gl = GeneralLedger
    PROPERTIES(gl) READONLY dateGeneralLedger, descriptionGeneralLedger, idDebitGeneralLedger,
                   idCreditGeneralLedger, sumGeneralLedger

    FILTERS isPostedGeneralLedger(gl),
            legalEntityGeneralLedger(gl)==l,
            dateGeneralLedger(gl) >= dFrom, dateGeneralLedger(gl) <= dTo

    FILTERGROUP filter3
            FILTER 'По счету' 'F8' debitGeneralLedger(gl)==g OR creditGeneralLedger(gl)==g DEFAULT
            FILTER 'Только дебет' 'F7' debitGeneralLedger(gl)==g
            FILTER 'Только кредит' 'F6' creditGeneralLedger(gl)==g
;
EXTEND DESIGN GLAccounts {
    wor{
        ADD gl.box;
    }
}


FORM userGeneralLedger 'Проводка'
    OBJECTS g=UserGeneralLedger FIXED PANEL
    PROPERTIES(g) nameLegalEntityUserGeneralLedger, nameGLDocumentUserGeneralLedger, descriptionUserGeneralLedger, dateUserGeneralLedger, timeUserGeneralLedger,
                  idDebitUserGeneralLedger, idCreditUserGeneralLedger, sumUserGeneralLedger

    EVENTS
        ON OK prePostUserGeneralLedger(g)

    EDIT UserGeneralLedger OBJECT g
;

DESIGN userGeneralLedger FROM DEFAULT{
    main {
        preferredSize = (1024, 768);
        ADD g.box BEFORE functions.box {
            ADD g.documentHeaderGroup {
                type = CONTAINERH;
                ADD PROPERTY(nameLegalEntityUserGeneralLedger);
                ADD PROPERTY(nameGLDocumentUserGeneralLedger);
                ADD PROPERTY(descriptionUserGeneralLedger);
                ADD PROPERTY(dateUserGeneralLedger);
                ADD PROPERTY(timeUserGeneralLedger);
            }
            NEW headerRow11 {
                caption = 'Корреспонденция';
                type = CONTAINERH;
                ADD PROPERTY(idDebitUserGeneralLedger);
                ADD PROPERTY(idCreditUserGeneralLedger);
                ADD PROPERTY(sumUserGeneralLedger);
            }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}
addUserGeneralLedger 'Добавить' = ACTION ADDFORM UserGeneralLedger;
editUserGeneralLedger 'Редактировать' (userGeneralLedger) = ACTION EDITFORM UserGeneralLedger;
editGeneralLedger(generalLedger) += editUserGeneralLedger(generalLedger);
isUserGeneralLedger(generalLedger) = generalLedger IS UserGeneralLedger;

overCopyGeneralLedger = ABSTRACT ACTION LIST (GeneralLedger, GeneralLedger);
copyGeneralLedger 'Копировать' = ACTION (generalLedger) NEWSESSION {

    FOR ADDOBJ g = UserGeneralLedger DO {
        ASSIGN legalEntityUserGeneralLedger(g) <- legalEntityGeneralLedger(generalLedger);
        ASSIGN descriptionUserGeneralLedger(g) <- descriptionGeneralLedger(generalLedger);
        ASSIGN sumUserGeneralLedger(g) <- sumGeneralLedger(generalLedger);
        ASSIGN creditUserGeneralLedger(g) <- creditGeneralLedger(generalLedger);
        ASSIGN debitUserGeneralLedger(g) <- debitGeneralLedger(generalLedger);

        EXEC overCopyGeneralLedger(generalLedger, g);

        FORM userGeneralLedger OBJECTS g = g MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

FORM generalLedgers 'Проводки'
    OBJECTS g = GeneralLedger
    PROPERTIES(g)  READONLY isPostedGeneralLedger FORCE GRID, dateTimeGeneralLedger, nameLegalEntityGeneralLedger, nameGLDocumentGeneralLedger,
                   descriptionGeneralLedger, numberGLDocumentGeneralLedger, seriesGLDocumentGeneralLedger, idDebitGeneralLedger,
                   idCreditGeneralLedger, sumGeneralLedger
    ORDER BY dateTimeGeneralLedger, nameGLDocumentGeneralLedger
//    todo : не работает поскольку для абстрактного свойства не задано ни одной реализации
//    PROPERTIES(g)  editGLDocumentGeneralLedger


    PROPERTIES (g) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable,
                   postedNameUserUserGeneralLedger, postedTimeUserGeneralLedger, postedHostnameComputerUserGeneralLedger

    PROPERTIES ()  addUserGeneralLedger TODRAW g
    PROPERTIES (g) editGeneralLedger, copyGeneralLedger
    PROPERTIES     deleteg=DELETE(g) FORCE PANEL TOOLBAR  SHOWIF isUserGeneralLedger(g)

    DIALOG GeneralLedger OBJECT g
;
DESIGN generalLedgers FROM DEFAULT {
    PROPERTY (deleteg) {
        askConfirm = TRUE;
    }

    NEW documentHistory BEFORE functions.box {
        caption = 'История';

        ADD g.historyGroup;
        ADD g.postedGroup;
    }
    ADD g.box BEFORE documentHistory;
}

NAVIGATOR {
    accountType {
        ADD generalLedgers;
    }
}

// ----------------------------------------------- Метакод по созданию проводок -------------------------------------------- //

//-- Для одного объекта
META defineGeneralLedgerAggregation (object, prop, companyProp, property, description, debit, credit, accountType)
    @defineGeneralLedgerAggregation (object, prop, companyProp, property, date, time, description, debit, credit, accountType);
END

META defineGeneralLedgerAggregation (object, idGL, companyProp, property, dateProp, timeProp, description, debit, credit, accountType)
    @defineGeneralLedgerAggregation (object, idGL, ###idGL, companyProp, property, dateProp, timeProp, description, debit, credit, accountType);
END

META defineGeneralLedgerAggregation (object, idGL, classGL, companyProp, property, dateProp, timeProp, description, debit, credit, accountType)
    CLASS classGL###generalLedger : GeneralLedger;

    TABLE idGL###generalLedger (classGL###generalLedger);

    needTo###property (object)=  property(object) IF onlineGeneralLedger();
    @defineAggregation(object, idGL###generalLedger, needTo###property);

    GLDocumentGeneralLedger(generalLedger) += object###idGL###generalLedger(generalLedger);
    legalEntityGeneralLedger(generalLedger) += companyProp###object(object###idGL###generalLedger(generalLedger));
    isPostedGeneralLedger(generalLedger) += isPosted###object(object###idGL###generalLedger(generalLedger));
    descriptionGeneralLedger(generalLedger) += description###object(object###idGL###generalLedger(generalLedger));
    dateGeneralLedger(generalLedger) += dateProp###object(object###idGL###generalLedger(generalLedger));
    timeGeneralLedger(generalLedger) += timeProp###object(object###idGL###generalLedger(generalLedger));
    debitGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debit) IF generalLedger IS classGL###generalLedger;
    creditGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, credit) IF generalLedger IS classGL###generalLedger;
    sumGeneralLedger(generalLedger) += property(object###idGL###generalLedger(generalLedger));
END

//-- С операцией
META defineGeneralLedgerAggregationOperation(object, idGL, companyProp, property, description, debit, credit, accountType, keyProp)
    idGL###property(object) = property(object) IF id###operation###object(object) == keyProp;
    @defineGeneralLedgerAggregation (object, idGL, companyProp, idGL###property, description, debit, credit, accountType);
END

// ----------------------------------- Для двух объектов --------------------------------------- //

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, descriptionProp, debit, credit, accountType)   //  object1 - документ
    @defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, date, time, descriptionProp, debit, credit, accountType);
END

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debit, credit, accountType)
    @defineGeneralLedgerDoubleAggregation (object1, object2, idGL, ###idGL, companyProp, property, dateProp, timeProp, descriptionProp, debit, credit, accountType);
END

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, classGL, companyProp, property, dateProp, timeProp, descriptionProp, debit, credit, accountType)

    CLASS classGL###generalLedger : GeneralLedger;

    TABLE idGL###generalLedger (classGL###generalLedger);

    needTo###property (object1, object2) = property(object1, object2) IF onlineGeneralLedger();
    @defineAggregation (object1, object2, idGL###generalLedger, needTo###property);

    GLDocumentGeneralLedger(generalLedger) += object1###idGL###generalLedger(generalLedger);
    legalEntityGeneralLedger(generalLedger) += companyProp###object1(object1###idGL###generalLedger(generalLedger));
    isPostedGeneralLedger(generalLedger) += isPosted###object1(object1###idGL###generalLedger(generalLedger));
    descriptionGeneralLedger(generalLedger) += descriptionProp(object1###idGL###generalLedger(generalLedger), object2###idGL###generalLedger(generalLedger));
    dateGeneralLedger(generalLedger) += dateProp###object1(object1###idGL###generalLedger(generalLedger));
    timeGeneralLedger(generalLedger) += timeProp###object1(object1###idGL###generalLedger(generalLedger));
    debitGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debit) IF generalLedger IS classGL###generalLedger;
    creditGeneralLedger(generalLedger) += GLAccountIdTypeIdGLAccount(accountType, credit) IF generalLedger IS classGL###generalLedger;
    sumGeneralLedger(generalLedger) += property(object1###idGL###generalLedger(generalLedger), object2###idGL###generalLedger(generalLedger));
END

//-- С операцией
META defineGeneralLedgerAggregationOperation(object1, object2, idGL, companyProp, property, descriptionProp, debit, credit, accountType, keyProp)
    idGL###property(object1, object2) = property(object1, object2) IF id###operation###object1(object1) == keyProp;
    @defineGeneralLedgerDoubleAggregation(object1, object2, idGL, companyProp, idGL###property, descriptionProp, debit, credit, accountType);
END


// ----------------------------------- Стандартные данные ----------------------------------- //

META defineLoadDefaultOperationPrefix (NSR, iname, isid, prefix)
    loadDefault###prefix###Operation 'Добавить значение операций' = ACTION (iname, isid) {
        FOR ADDOBJ t = NSR.Operation DO {
            ASSIGN NSR.nameOperation(t) <- iname;
            ASSIGN NSR.idOperation (t) <- isid;
        }
    }
END
META defineLoadDefaultOperation (NSR, iname, isid)
    @defineLoadDefaultOperationPrefix (NSR, iname, isid, );
END


loadDefaultOperations 'Загрузить стандарные операции для проводок' () = ABSTRACT ACTION LIST ()  IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultOperations);