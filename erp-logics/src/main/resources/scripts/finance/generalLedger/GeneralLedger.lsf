MODULE GeneralLedger;

REQUIRE GLAccountType, Operation, EmployeeLegalEntity;

CLASS ABSTRACT GLDocument 'Регистр-основание';
TABLE GLDocument(GLDocument);

GROUP generalLedger 'Проводки' : base;

isPosted 'Проведен' = ABSTRACT BOOLEAN (GLDocument) MATERIALIZED;

name 'Регистр-основание' = ABSTRACT VARSTRING[200] (GLDocument) MATERIALIZED;
number 'Номер' = ABSTRACT VARSTRING[28] (GLDocument) IN numbered MINCHARWIDTH 7 MATERIALIZED;
series 'Серия' = ABSTRACT STRING[2] (GLDocument) IN numbered FIXEDCHARWIDTH 3 MATERIALIZED;
seriesNumber 'Серия/Номер' (GLDocument GLDocument) = CONCAT '', series(GLDocument), number(GLDocument) MINCHARWIDTH 7 PREFCHARWIDTH 10 MAXCHARWIDTH 20;

dateTime 'Дата/время' = ABSTRACT DATETIME (GLDocument) MATERIALIZED;
date 'Дата' (GLDocument document) = toDate(dateTime(document));
time 'Время' (GLDocument document) = toTime(dateTime(document));

operation 'Операция' = ABSTRACT Operation (GLDocument) MATERIALIZED;

edit 'Редактировать регистр' = ACTION ABSTRACT LIST (GLDocument) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

onlineGeneralLedger 'Создавать проводки онлайн' = DATA BOOLEAN () IN generalLedger COMPLEX;
reportinGeneralLedger 'Запретить редактировать проводки после отчетного периода' = DATA BOOLEAN () IN generalLedger;
dateReportingGeneralLedger 'Дата отчетного периода' = DATA DATE () IN generalLedger;
dataMaxDateGeneralLedger 'Конец отчетного периода' = DATA DATE ();
maxDateGeneralLedger 'Конец отчетного периода' = OVERRIDE dataMaxDateGeneralLedger(), 2040_12_31;

EXTEND FORM options
    OBJECTS lgl = LegalEntity PANEL 
    PROPERTIES (lgl) name SELECTOR
    PROPERTIES() onlineGeneralLedger, reportinGeneralLedger, dateReportingGeneralLedger, maxDateGeneralLedger
    FILTERS accessCompany(currentUser(), lgl)

;
DESIGN options {
    pane {
        NEW generalLedger{
            type = CONTAINERV;
            caption = 'Проводки';
            MOVE PROPERTY (onlineGeneralLedger());
            MOVE PROPERTY (reportinGeneralLedger());
            NEW period {
                type = CONTAINERH;
                MOVE PROPERTY (dateReportingGeneralLedger());
                MOVE PROPERTY (maxDateGeneralLedger());                     
            }
            MOVE lgl.box;
        }
    }
}
//-------------------------- Проводки -------------------------//

CLASS ABSTRACT GeneralLedger 'Проводка';
TABLE generalLedger(GeneralLedger);

CLASS UserGeneralLedger 'Проводка (польз.)': GeneralLedger;

@defineDocumentInterfaceHeaderCreated(GeneralLedger);

@defineDocumentInterfaceHeaderPosted (GeneralLedger);
@defineDocumentInterfaceHeaderTimePrefix(GeneralLedger, , );
@deriveDocumentHeaderTimePrefix(UserGeneralLedger, );

GLDocument = ABSTRACT GLDocument (GeneralLedger) MATERIALIZED;
nameGLDocument 'Регистр (описание)' (GeneralLedger generalLedger) = name(GLDocument(generalLedger)) IN recognize;

numberGLDocument 'Регистр (номер)' (GeneralLedger generalLedger) = number(GLDocument(generalLedger)) IN numbered;
seriesGLDocument 'Регистр (серия)' (GeneralLedger generalLedger) = series(GLDocument(generalLedger)) IN numbered;
seriesNumberGLDocument 'Регистр (серия/номер)' (GeneralLedger generalLedger) = seriesNumber(GLDocument(generalLedger));

operationGLDocument (GeneralLedger generalLedger) = operation(GLDocument(generalLedger));

GLDocument = DATA GLDocument (UserGeneralLedger);
nameGLDocument 'Регистр-основание' (UserGeneralLedger userGeneralLedger) = name(GLDocument(userGeneralLedger));

numberGLDocument 'Регистр (номер)' (UserGeneralLedger userGeneralLedger) = number(GLDocument(userGeneralLedger));
seriesGLDocument 'Регистр (серия)' (UserGeneralLedger userGeneralLedger) = series(GLDocument(userGeneralLedger));
seriesNumberGLDocument 'Регистр (серия/номер)' (UserGeneralLedger userGeneralLedger) = seriesNumber(GLDocument(userGeneralLedger));

operationGLDocument (UserGeneralLedger generalLedger) = operation(GLDocument(generalLedger));

idOperation 'Код операции' = ABSTRACT VARSTRING[3] (GeneralLedger) MATERIALIZED;
idOperation 'Код операции' = DATA VARSTRING[3] (UserGeneralLedger);
idOperation(UserGeneralLedger generalLedger) += idOperation(generalLedger);

GLDocument (UserGeneralLedger generalLedger) += GLDocument (generalLedger);

editGLDocument 'Редактировать регистр' (GeneralLedger generalLedger) = { edit(GLDocument(generalLedger)); }

legalEntity = ABSTRACT LegalEntity (GeneralLedger) MATERIALIZED NOT NULL DELETE;
nameLegalEntity 'Компания' (GeneralLedger generalLedger) = name(legalEntity(generalLedger));
legalEntity = DATA LegalEntity (UserGeneralLedger);
nameLegalEntity 'Компания' (UserGeneralLedger userGeneralLedger) = name(legalEntity(userGeneralLedger));
legalEntity (UserGeneralLedger generalLedger) += legalEntity (generalLedger);

debit = ABSTRACT GLAccount (GeneralLedger) MATERIALIZED;
idDebit 'Дебет' (GeneralLedger generalLedger) = id(debit(generalLedger)) IN recognize;
debit = DATA GLAccount (UserGeneralLedger);
idDebit 'Дебет' (UserGeneralLedger userGeneralLedger) = id(debit(userGeneralLedger));
debit (UserGeneralLedger generalLedger) += debit (generalLedger);


credit = ABSTRACT GLAccount (GeneralLedger) MATERIALIZED;
idCredit 'Кредит' (GeneralLedger generalLedger) = id(credit(generalLedger)) IN recognize;
credit = DATA GLAccount (UserGeneralLedger);
idCredit 'Кредит' (UserGeneralLedger userGeneralLedger) = id(credit(userGeneralLedger));
credit (UserGeneralLedger generalLedger) += credit (generalLedger);

glAccountTypeDebit(GeneralLedger generalLedger) = GLAccountType(debit(generalLedger));
glAccountTypeCredit(GeneralLedger generalLedger) = GLAccountType(credit(generalLedger));

CONSTRAINT GLAccountType(debit(UserGeneralLedger userGeneralLedger)) != GLAccountType(credit(userGeneralLedger))
    CHECKED BY  debit[UserGeneralLedger], credit[UserGeneralLedger]
    MESSAGE 'У дебета и кредита разные планы счетов';

sum 'Сумма' = ABSTRACT NUMERIC[18,4] (GeneralLedger) MATERIALIZED;
sum 'Сумма' = DATA NUMERIC[18,4] (UserGeneralLedger);
sum (UserGeneralLedger generalLedger) += sum (generalLedger);

quantity 'Кол-во'= ABSTRACT NUMERIC[16,5] (GeneralLedger) MATERIALIZED;
quantity 'Кол-во'= DATA NUMERIC[16,5] (UserGeneralLedger);
quantity (UserGeneralLedger generalLedger) += quantity (generalLedger);

description 'Описание' = ABSTRACT VARISTRING[350] (GeneralLedger) MATERIALIZED MINCHARWIDTH 40 PREFCHARWIDTH 80;
description 'Описание' = DATA VARSTRING[255] (UserGeneralLedger) MINCHARWIDTH 40 PREFCHARWIDTH 80;
description (UserGeneralLedger generalLedger) += description (generalLedger);

skip 'Не изменять значение' (generalLedger) = ABSTRACT BOOLEAN (GeneralLedger) MATERIALIZED;
skip 'Не изменять значение' (userGeneralLedger) = DATA BOOLEAN (UserGeneralLedger);
skip (UserGeneralLedger generalLedger) += skip (generalLedger);

edit 'Редактировать' = ACTION ABSTRACT LIST (GeneralLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

CONSTRAINT isPosted(GeneralLedger ledger) AND reportinGeneralLedger() AND date(ledger) < dateReportingGeneralLedger() AND CHANGED(sum(ledger))
    MESSAGE 'Запрещено редактировать проводки после отчетного периода';

// ----------------------------- Сальдо ---------------------------//

META  defineGLAccountSum (caption, concrete, prefix)
    // без учета текущей даты
    prefix###sumB###concrete 'Сумма на начало дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) = sum###concrete(GLAccount, company)
                                                                      (-) [= GROUP SUM sum###concrete(GLAccount GLAccount, LegalEntity company, DATE dateIn) IF dateIn >= DATE date
                                                                                 BY GLAccount, company, date](GLAccount, company, date);
    // с учетом текущей даты
    prefix###sumA###concrete 'Сумма на конец дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) = sum###concrete(GLAccount, company)
                                                                     (-) [= GROUP SUM sum###concrete(GLAccount GLAccount, LegalEntity company, DATE dateIn) IF dateIn > DATE date
                                                                                BY GLAccount, company, date](GLAccount, company, date);
END
META defineGLAccountBalance (caption, prefix)
    prefix###balanceAGL 'Сальдо на начало дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) =  prefix###sumADebit(GLAccount, company, date) (-) prefix###sumACredit(GLAccount, company, date);
    prefix###balanceBGL 'Сальдо на конец дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) =  prefix###sumBDebit(GLAccount, company, date) (-) prefix###sumBCredit(GLAccount, company, date);
END

sumCredit 'Сумма (кредит)' (GLAccount, company)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger) BY credit(ledger), legalEntity(ledger);
sumDebit 'Сумма (дебет)' (GLAccount, company)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger) BY debit(ledger), legalEntity(ledger);
balance 'Сальдо' (GLAccount GLAccount, LegalEntity company)= sumDebit(GLAccount, company) (-) sumCredit(GLAccount, company);

TABLE GLAccountLegalEntityDate(GLAccount, LegalEntity, DATE);
sumCredit 'Сумма (кредит)' (GLAccount, company, date)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger)
    BY credit(ledger), legalEntity(ledger), date(ledger);
sumDebit 'Сумма (дебет)' (GLAccount, company, date)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger)
    BY debit(ledger), legalEntity(ledger), date(ledger);
balance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE date) =
    sumDebit(GLAccount, company, date) (-) sumCredit(GLAccount, company, date);

sumCredit 'Сумма (кредит)' (GLAccount, company, dateFrom, dateTo) = GROUP SUM
        sumCredit(GLAccount GLAccount, LegalEntity company, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY GLAccount, company, dateFrom, dateTo;
sumDebit 'Сумма (дебет)' (GLAccount, company, dateFrom, dateTo) = GROUP SUM
        sumDebit(GLAccount GLAccount, LegalEntity company, DATE date) IF date >= DATE dateFrom AND date <= DATE dateTo
        BY GLAccount, company, dateFrom, dateTo;
balance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo) =
    sumDebit(GLAccount, company, dateFrom, dateTo) (-) sumCredit(GLAccount, company, dateFrom, dateTo);

@defineGLAccountSum ('(кредит)', credit, );
@defineGLAccountSum ('(дебет)', debit, );
@defineGLAccountBalance ( , );

//- Рекурсивно
recSumCredit 'Сумма (кредит)' (GLAccount, company)=  GROUP SUM sumCredit(GLAccount child, LegalEntity company)
    IF isParent(child, GLAccount GLAccount) BY GLAccount, company;
recSumDebit 'Сумма (дебет)' (GLAccount, company)=  GROUP SUM sumDebit(GLAccount child, LegalEntity company)
    IF isParent(child, GLAccount GLAccount) BY GLAccount, company;
recBalance 'Сальдо' (GLAccount GLAccount, LegalEntity company)=
    recSumDebit(GLAccount, company) (-) recSumCredit(GLAccount, company);

recSumCredit 'Сумма (кредит)' (GLAccount, company, date)=  GROUP SUM sumCredit(GLAccount child, LegalEntity company, DATE date)
    IF isParent(child, GLAccount GLAccount) BY GLAccount, company, date;
recSumDebit 'Сумма (дебет)' (GLAccount, company, date)=  GROUP SUM sumDebit(GLAccount child, LegalEntity company, DATE date)
    IF isParent(child, GLAccount GLAccount) BY GLAccount, company, date;
recBalance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE date) =
    recSumDebit(GLAccount, company, date) (-) recSumCredit(GLAccount, company, date);

recSumCredit 'Сумма (кредит)' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM sumCredit(GLAccount child, LegalEntity company, DATE dateFrom, DATE dateTo)
    IF isParent(child, GLAccount GLAccount) BY GLAccount, company, dateFrom, dateTo;
recSumDebit 'Сумма (дебет)' (GLAccount, company, dateFrom, dateTo)=  GROUP SUM sumDebit(GLAccount child, LegalEntity company, DATE dateFrom, DATE dateTo)
    IF isParent(child, GLAccount GLAccount) BY GLAccount, company, dateFrom, dateTo;
recBalance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo) =
    recSumDebit(GLAccount, company, dateFrom, dateTo) (-) recSumCredit(GLAccount, company, dateFrom, dateTo);


@defineGLAccountSum ('(кредит)', credit, rec);
@defineGLAccountSum ('(дебет)', debit, rec);
@defineGLAccountBalance ( , rec);

EXTEND FORM GLAccounts
    PROPERTIES(g,l,dFrom,dTo) READONLY BEFORE deletea recSumCredit, recSumDebit, recBalance

    OBJECTS gl = GeneralLedger
    PROPERTIES(gl) READONLY date, description, idDebit,
                   idCredit, sum

    FILTERS isPosted(gl),
            legalEntity(gl)==l,
            date(gl) >= dFrom, date(gl) <= dTo

    FILTERGROUP filter4
            FILTER 'По счету' debit(gl)==g OR credit(gl)==g 'F8' DEFAULT
            FILTER 'Только дебет' debit(gl)==g 'F7'
            FILTER 'Только кредит' credit(gl)==g 'F6'
;
DESIGN GLAccounts {
    wor{
        MOVE gl.box;
    }
}


FORM userGeneralLedger 'Проводка'
    OBJECTS g=UserGeneralLedger PANEL
    PROPERTIES(g) nameLegalEntity, nameGLDocument, description, date, time,
                  idDebit, idCredit, quantity, sum

    EVENTS
        ON OK prePost(g)

    EDIT UserGeneralLedger OBJECT g
;

DESIGN userGeneralLedger {
    main {
        preferredSize = (1024, 768);
        MOVE g.box BEFORE functions.box {
            MOVE g.documentHeader {
                type = CONTAINERH;
                MOVE PROPERTY(nameLegalEntity(g));
                MOVE PROPERTY(nameGLDocument(g));
                MOVE PROPERTY(description(g));
                MOVE PROPERTY(date(g));
                MOVE PROPERTY(time(g));
            }
            NEW headerRow11 {
                caption = 'Корреспонденция';
                type = CONTAINERH;
                MOVE PROPERTY(idDebit(g));
                MOVE PROPERTY(idCredit(g));
                MOVE PROPERTY(sum(g));
            }
        }
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}
edit 'Редактировать' (userGeneralLedger) = ACTION EDITFORM UserGeneralLedger;
edit(UserGeneralLedger generalLedger) += { edit(generalLedger); }
is(UserGeneralLedger generalLedger) = generalLedger IS UserGeneralLedger;

overCopy = ACTION ABSTRACT LIST (GeneralLedger, GeneralLedger);
copy 'Копировать'(GeneralLedger generalLedger) = {
	NEWSESSION {
	
	    NEW g = UserGeneralLedger {
	        ASSIGN legalEntity(g) <- legalEntity(generalLedger);
	        ASSIGN description(g) <- description(generalLedger);
	        ASSIGN sum(g) <- sum(generalLedger);
	        ASSIGN quantity(g) <- quantity(generalLedger);
	        ASSIGN credit(g) <- credit(generalLedger);
	        ASSIGN debit(g) <- debit(generalLedger);
	
	        EXEC overCopy(generalLedger, g);
	
	        SHOW userGeneralLedger OBJECTS g = g MANAGESESSION DOCKED;
	    }
	}
} TOOLBAR;

accessCompany(GeneralLedger gl) = accessCompany(currentUser(), legalEntity(gl)); 

FORM generalLedgers 'Проводки'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
    
    OBJECTS l = LegalEntity PANEL 
    PROPERTIES(l) SELECTOR name
    FILTERS isCompany(l),
            accessCompany(currentUser(), l)    
        
    OBJECTS g = GeneralLedger
    PROPERTIES(g)  READONLY isPosted , dateTime, nameLegalEntity, nameGLDocument,
                   idOperation, description, numberGLDocument, seriesGLDocument, idDebit,
                   idCredit, quantity, sum
    ORDER BY dateTime(g), nameGLDocument(g)
    FILTERS accessCompany(g)
//    todo : не работает поскольку для абстрактного свойства не задано ни одной реализации
//    PROPERTIES(g)  editGLDocumentGeneralLedger


    PROPERTIES (g) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (g)  NEWSESSION NEW[UserGeneralLedger]
    PROPERTIES (g) edit, copy
    PROPERTIES     NEWSESSION deleteg=DELETE(g) SHOWIF is(g)

    FILTERS toDate(dateTime(g))<= dTo AND toDate(dateTime(g))>= dFrom
    
    LIST GeneralLedger OBJECT g
;
DESIGN generalLedgers {
    NEW topContainer {
        type = CONTAINERH;
        MOVE dates.box{
            caption = 'Период';
            PROPERTY(valFrom){
                caption = 'Дата с';
            }
            PROPERTY(valTo){
                caption = 'Дата по';
            }
        }
        MOVE l.box{
            PROPERTY(name(l)){
                caption = '';
            }
        }
    }
    MOVE g.box;
    NEW documentHistory {
        caption = 'История';

        MOVE g.created;
        MOVE g.posted;
    }
    MOVE functions.box;
}

NAVIGATOR {
    accountType {
        ADD generalLedgers;
    }
}

// ----------------------------------------------- Метакод по созданию проводок через агрегацию-------------------------------------------- //

//-- Для одного объекта
META defineGeneralLedgerAggregation (object, prop, companyProp, property, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerAggregation (object, prop, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerAggregation (object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerAggregation (object, idGL, ###idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerAggregation (object, idGL, classGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    CLASS classGL###generalLedger : GeneralLedger;

    TABLE idGL###generalLedger (classGL###generalLedger);

    needTo###property (###object object)=  property(object) IF onlineGeneralLedger();
    @defineAggregation(object, idGL###generalLedger, needTo###property);

    GLDocument(classGL##GeneralLedger generalLedger) += object(generalLedger);
    legalEntity(classGL##GeneralLedger generalLedger) += companyProp(object(generalLedger));
    isPosted(classGL##GeneralLedger generalLedger) += isPosted(object(generalLedger));
    description(classGL##GeneralLedger generalLedger) += descriptionProp(object(generalLedger));
    date(classGL##GeneralLedger generalLedger) += dateProp(object(generalLedger));
    timeProp(classGL##GeneralLedger generalLedger) += timeProp(object(generalLedger));
    debit(classGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debitV) IF generalLedger IS classGL###generalLedger;
    credit(classGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, creditV) IF generalLedger IS classGL###generalLedger;
    sum(classGL##GeneralLedger generalLedger) += property(object(generalLedger));
END

//-- С операцией
META defineGeneralLedgerAggregationOperation(object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object object) = property(object) IF idOperation(object) == keyProp;
    @defineGeneralLedgerAggregation (object, idGL, companyProp, idGL###property, descriptionProp, debitV, creditV, accountType);
END

// ----------------------------------- Для двух объектов --------------------------------------- //

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType)   //  object1 - документ
    @defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerDoubleAggregation (object1, object2, idGL, ###idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, classGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)

    CLASS classGL###generalLedger : GeneralLedger;

    TABLE idGL###generalLedger (classGL###generalLedger);

    needTo##property (###object1 object1, ###object2 object2) = property(object1, object2) IF onlineGeneralLedger();
    @defineAggregation (object1, object2, idGL###generalLedger, needTo###property);

    GLDocument(idGL##GeneralLedger generalLedger) += object1(generalLedger);
    legalEntity(idGL##GeneralLedger generalLedger) += companyProp(object1(generalLedger));
    isPosted(idGL##GeneralLedger generalLedger) += isPosted(object1(generalLedger));
    descriptionProp(idGL##GeneralLedger generalLedger) += descriptionProp(object1(generalLedger), object2(generalLedger));
    date(idGL##GeneralLedger generalLedger) += dateProp(object1(generalLedger));
    timeProp(idGL##GeneralLedger generalLedger) += timeProp(object1(generalLedger));
    debit(idGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debitV) IF generalLedger IS classGL###generalLedger;
    credit(idGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, creditV) IF generalLedger IS classGL###generalLedger;
    sum(idGL##GeneralLedger generalLedger) += property(object1(generalLedger), object2(generalLedger));
END

//-- С операцией
META defineGeneralLedgerAggregationOperation(object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object1 object1, ###object2 object2) = property(object1, object2) IF idOperation(object1) == keyProp;
    @defineGeneralLedgerDoubleAggregation(object1, object2, idGL, companyProp, idGL###property, descriptionProp, debitV, creditV, accountType);
END


// ----------------------------------- Стандартные данные ----------------------------------- //

META defineLoadDefaultOperationPrefix (NSR, iname, isid, prefix)
    loadDefault###prefix##Operation 'Добавить значение операций'(VARISTRING[100] iname, VARISTRING[100] isid) = {
        NEW t = NSR.Operation {
            ASSIGN name(t) <- iname;
            ASSIGN id (t) <- isid;
        }
    }
END
META defineLoadDefaultOperation (NSR, iname, isid)
    @defineLoadDefaultOperationPrefix (NSR, iname, isid, );
END


loadDefaultOperations 'Загрузить стандартные операции для проводок' () = ACTION ABSTRACT LIST ()  IN loadDefault;

@implementLoadDefaultData(loadDefaultOperations);

//

META extendFormGeneralLedgerDocument (form, filter, container)
    EXTEND FORM form
        OBJECTS g=GeneralLedger
        PROPERTIES(g) READONLY description, idDebit, idDimensionsDebit, dimensionsDebit, 
                                idCredit, idDimensionsCredit, dimensionsCredit, quantity, sum
    
        FILTERS GLDocument(g) == filter
    ;
    
    DESIGN form {
        container {
            MOVE g.box {
                fill = 1;
                caption = 'Проводки';
            };
        }
    }
END
META extendFormGeneralLedgerDocument (form, filter)
    @extendFormGeneralLedgerDocument (form, filter, documentDetail);
END

// ----------------------------------------------- Метакод по созданию проводок через ACTION -------------------------------------------- //

createGeneralLedgerFromTo  = ACTION ABSTRACT LIST (LegalEntity, DATE, DATE); 

createGeneralLedger 'Создать проводки' (LegalEntity legalEntity, DATE dFrom, DATE dTo) = {
    DELETE UserGeneralLedger ud WHERE ud IS UserGeneralLedger AND date(ud) >= dFrom AND date(ud) <= dTo AND legalEntity(ud) == legalEntity;
    createGeneralLedgerFromTo(legalEntity, dFrom, dTo);
    apply();
} CONFIRM;

createGeneralLedger(DATE dFrom, DATE dTo) = {
    FOR isCompany(LegalEntity l) DO 
        createGeneralLedger(l, dFrom, dTo);
}

EXTEND FORM generalLedgers
    PROPERTIES(l, dFrom, dTo) createGeneralLedger 
;

createGeneralLedger 'Создать проводки за отчетный период'(LegalEntity l) = {
    createGeneralLedger(l, dateReportingGeneralLedger(), maxDateGeneralLedger());
} IN generalLedger;

EXTEND FORM options 
    PROPERTIES(lgl) createGeneralLedger
;

DESIGN options {
    generalLedger {
        MOVE PROPERTY(createGeneralLedger(lgl));
    }
}

createGeneralLedger 'Создать проводки за отчетный период'() = {
    FOR isCompany(LegalEntity l) DO 
        createGeneralLedger(l, dateReportingGeneralLedger(), maxDateGeneralLedger());
} IN generalLedger;

//-- Для одного объекта

META defineGeneralLedger (object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    overCreate###idGL###object = ACTION ABSTRACT LIST (UserGeneralLedger);  

    createUserGeneralLedgerALL###idGL###object##FromTo 'Создать проводки за период'(LegalEntity l, DATE dateProp, DATE dateProp##To) = {     
        FOR property(###object object) AND dateProp(object) >= (date AS DATE) AND dateProp(object) <= (dateTo AS DATE) AND companyProp(object) == l NEW u = UserGeneralLedger DO  {
            GLDocument(u) <- object;
            legalEntity(u) <- companyProp(object);
            isPosted(u) <- isPosted(object);
            description(u) <- descriptionProp(object);
            dateProp(u) <- dateProp(object);
            timeProp(u) <- timeProp(object);
            debit(u) <- GLAccountIdTypeIdGLAccount(accountType, debitV);
            credit(u) <- GLAccountIdTypeIdGLAccount(accountType, creditV);
            sum(u) <- NUMERIC[18,4](property(object));   
            
            EXEC overCreate###idGL###object(u); 
        }    
    }
    createGeneralLedgerFromTo(LegalEntity l, DATE date,DATE dateTo) += { createUserGeneralLedgerALL###idGL###object##FromTo(l, date,dateTo); }
END
// дата 
META defineGeneralLedger (object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedger (object, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END


//-- С операцией
META defineGeneralLedgerOperation(object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object object) = property(object) IF idOperation(object) == keyProp;
    @defineGeneralLedger (object, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);            
END
// дата
META defineGeneralLedgerOperation(object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    @defineGeneralLedgerOperation(object, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp);
END  

//-- 2 операции
META defineGeneralLedgerOperation(object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    idGL###property(###object object) = property(object) IF idOperation(object) == keyProp OR idOperation(object) == key1Prop;
    @defineGeneralLedger (object, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);            
END
// дата
META defineGeneralLedgerOperation(object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    @defineGeneralLedgerOperation(object, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop);
END  
 
  
// ----------------------------------- Для двух объектов (object1 - документ) --------------------------------------- //

META defineGeneralLedgerDouble (object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)

    overCreate##idGL###object1###object2 = ACTION ABSTRACT LIST (UserGeneralLedger);  
    overCreate##idGL###object1###object2 = ACTION ABSTRACT LIST (UserGeneralLedger, Dimension);  
    
    createUserGeneralLedgerALL##idGL###object1###object2##FromTo 'Создать проводки'(LegalEntity l, DATE dateProp,DATE dateProp##To) = {     
        FOR property(###object1 object1, ###object2 object2) AND dateProp(object1) >= (date AS DATE) AND dateProp(object1) <= (dateTo AS DATE) AND companyProp(object1) == l NEW u = UserGeneralLedger DO  {
            GLDocument(u) <- object1;
            legalEntity(u) <- companyProp(object1);
            isPosted(u) <- isPosted(object1);
            descriptionProp(u) <- descriptionProp(object1, object2);
            dateProp(u) <- dateProp(object1);
            timeProp(u) <- timeProp(object1);
            debit(u) <- GLAccountIdTypeIdGLAccount(accountType, debitV);
            credit(u) <- GLAccountIdTypeIdGLAccount(accountType, creditV);
            sum(u) <- NUMERIC[18,4](property(object1, object2));   
            
            overCreate##idGL###object1###object2(u,object2);
            overCreate##idGL###object1###object2(u); 
        }    
    }
    createGeneralLedgerFromTo(LegalEntity l, DATE date,DATE dateTo) += { createUserGeneralLedgerALL##idGL###object1###object2##FromTo(l, date, dateTo); }
END
// дата 
META defineGeneralLedgerDouble (object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerDouble (object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END

//-- С операцией
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object1 object1, ###object2 object2) = property(object1, object2) IF id###operation(object1) == keyProp;
    @defineGeneralLedgerDouble (object1, object2, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END  
// дата 
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    @defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp);
END

//-- 2 операции
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    idGL###property(###object1 object1, ###object2 object2) = property(object1, object2) IF id###operation(object1) == keyProp OR id###operation(object1) == key1Prop;
    @defineGeneralLedgerDouble (object1, object2, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END  
// дата 
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    @defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop);
END