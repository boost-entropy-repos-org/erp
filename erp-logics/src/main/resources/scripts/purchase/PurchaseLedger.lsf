MODULE PurchaseLedger;

REQUIRE System, Stock, Tax, EmployeeStock, Purchase, PriceRound, StockSkuDocument, PurchaseOperation;

CLASS ABSTRACT PurchaseLedger 'Покупка товара';
TABLE purchaseLedger(PurchaseLedger);

TABLE skuStockStock(Stock, Stock, Sku);

dateTime 'Дата/время' (ledger) = ABSTRACT DATETIME (PurchaseLedger) MATERIALIZED INDEXED;
date 'Дата' (PurchaseLedger ledger) = toDate(dateTime(ledger)) MATERIALIZED INDEXED;

shipmentDateTime 'Дата/время поставки' (ledger) = ABSTRACT DATETIME (PurchaseLedger) MATERIALIZED INDEXED;
shipmentDate 'Дата поставки' (PurchaseLedger ledger) = toDate(shipmentDateTime(ledger)) MATERIALIZED INDEXED;

isPosted 'Проведен' (ledger) = ABSTRACT BOOLEAN (PurchaseLedger) MATERIALIZED;

show 'Просмотреть' = ABSTRACT MULTI (PurchaseLedger) TOOLBAR;

isClosed 'Закрыт' (ledger) = ABSTRACT BOOLEAN (PurchaseLedger);
skipShowEdit = ABSTRACT BOOLEAN (PurchaseLedger);
allowedEdit (PurchaseLedger d) = (NOT isClosed(d) OR allowedEditClosedDocuments(currentUser())) AND NOT skipShowEdit(d);

allowedShow (PurchaseLedger d) = d IS PurchaseLedger AND NOT allowedEdit(d);

skip 'Не проводить' (ledger) = ABSTRACT BOOLEAN (PurchaseLedger) MATERIALIZED;

active (PurchaseLedger ledger) = isPosted(ledger) AND NOT skip(ledger);

sku (ledger) = ABSTRACT Sku (PurchaseLedger) MATERIALIZED;
INDEX sku(PurchaseLedger l), dateTime(l), l;
nameSku 'SKU' (PurchaseLedger ledger) = name(sku(ledger));
idSku'Код товара' (PurchaseLedger ledger) = id(sku(ledger));
shortNameUOMSku 'Ед. изм.' = shortNameUOM(sku(PurchaseLedger ledger));

canonicalNameSkuGroup 'Каноническое имя' (PurchaseLedger ledger) = canonicalName[Group](skuGroup(sku(ledger)));
nameSkuGroup1Sku 'Категория' = nameSkuGroup1(sku(PurchaseLedger ledger));
nameSkuGroup2Sku 'Направление' = nameSkuGroup2(sku(PurchaseLedger ledger));
nameSkuGroup3Sku 'Группа' = nameSkuGroup3(sku(PurchaseLedger ledger));
nameSkuGroup4Sku 'Подгруппа' = nameSkuGroup4(sku(PurchaseLedger ledger));
nameSkuGroup5Sku 'Субгруппа' = nameSkuGroup5(sku(PurchaseLedger ledger));

stock (ledger) = ABSTRACT Stock (PurchaseLedger) MATERIALIZED;
INDEX stock(PurchaseLedger ledger), sku(ledger), dateTime(ledger), ledger;
nameStock 'Склад' (PurchaseLedger ledger) = name(stock(ledger));

description 'Название документа' (ledger) = ABSTRACT VARSTRING[200] (PurchaseLedger) MATERIALIZED;
numberDocument 'Номер документа' (ledger) = ABSTRACT VARSTRING[28] (PurchaseLedger) MATERIALIZED;
seriesDocument 'Серия документа' (ledger) = ABSTRACT STRING[2] (PurchaseLedger) MATERIALIZED;
seriesNumberDocument 'Серия/Номер документа' (PurchaseLedger o) = 
    CONCAT '', seriesDocument(o), numberDocument(o) 
    CHARWIDTH 7 MATERIALIZED;
        
quantity 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (PurchaseLedger) MATERIALIZED;
shipmentQuantity 'Кол-во (поставлено)' (ledger) = ABSTRACT NUMERIC[16,5] (PurchaseLedger) MATERIALIZED;

price 'Цена без НДС' (ledger) = ABSTRACT NUMERIC[16,4] (PurchaseLedger) MATERIALIZED;


sum 'Сумма покупки с НДС' (ledger) = ABSTRACT NUMERIC[18,4] (PurchaseLedger) MATERIALIZED; 

currency = ABSTRACT Currency (PurchaseLedger) MATERIALIZED;
nameCurrency 'Валюта' = name(currency(PurchaseLedger ledger));

supplier  (ledger) = ABSTRACT LegalEntity (PurchaseLedger) MATERIALIZED;
nameSupplier 'Поставщик' (PurchaseLedger ledger) = name(supplier (ledger));

supplierStock  (ledger) = ABSTRACT Stock (PurchaseLedger) MATERIALIZED;
nameSupplierStock 'Склад поставщика' (PurchaseLedger ledger) = name(supplierStock (ledger));

operation  (ledger) = ABSTRACT Purchase.Operation (PurchaseLedger) MATERIALIZED;
nameOperation 'Операция' (PurchaseLedger ledger) = name(operation (ledger));

TABLE skuStockLegalEntity (Sku, Stock, LegalEntity);
countPurchaseSupplier 'Кол-во закуплено' = GROUP
    BY supplier(PurchaseLedger ledger), stock(ledger), sku(ledger) SUM 1 IF active(ledger) MATERIALIZED;
prevCountSupplier (LegalEntity legalEntity, Stock stock, Sku sku)  = PREV(countPurchaseSupplier(legalEntity, stock, sku));

countPurchaseSupplier 'Кол-во закуплено' = GROUP
    BY LegalEntity l, Sku sk SUM countPurchaseSupplier(l, Stock st, sk);
    
quantityPurchaseSupplier 'Кол-во закуплено' = GROUP
    BY supplierStock(PurchaseLedger ledger), sku(ledger) SUM quantity(ledger) IF active(ledger);
    
lastExternalSupplier (stock, sku) = 
    GROUP
        BY stock(PurchaseLedger ledger), sku(ledger) LAST supplier(ledger)
        ORDER dateTime(ledger), ledger
        WHERE active(ledger) AND NOT isCompany(supplier(ledger));
    
lastSupplier (stock, sku) = 
    GROUP
        BY stock(PurchaseLedger ledger), sku(ledger) LAST supplier(ledger)
        ORDER dateTime(ledger), ledger
        WHERE active(ledger);
 
lastSupplier (sku) = 
    GROUP
        BY sku(PurchaseLedger ledger) LAST supplier(ledger)
        ORDER dateTime(ledger), ledger
        WHERE active(ledger);
        
//-- по складу поставщика        
lastSupplierStock (stock, sku) = 
    GROUP
        BY stock(PurchaseLedger ledger), sku(ledger) LAST supplierStock(ledger)
        ORDER dateTime(ledger), ledger
        WHERE active(ledger);
                
nameLastSupplierStock 'Склад поставщика (последний)' (Stock stock, Sku sku) = name(lastSupplierStock (stock, sku)) CHARWIDTH 12;              

inSupplier 'Были поставки' (LegalEntity legalEntity, Sku sku) = TRUE IF countPurchaseSupplier(legalEntity, sku) MATERIALIZED;
prevInSupplier 'Были поставки (пред.)' (LegalEntity legalEntity, Sku sku) = PREV(inSupplier(legalEntity, sku));

sumPurchase 'Сумма покупки валюта' (TypeExchange typeExchange, PurchaseLedger purchaseLedger)= round((sum (purchaseLedger)*
    rateOn(typeExchange, currency(purchaseLedger), date(purchaseLedger))), currency(typeExchange));

TABLE purchaseLedgerBatch(PurchaseLedger, Batch);

cost 'Расписано из партии' = ABSTRACT NUMERIC[16,5] (PurchaseLedger, Batch) MATERIALIZED;

coeff 'Удельный вес' (PurchaseLedger ledger, Batch batch) =
    NUMERIC[22,8](cost(ledger, batch)/quantity(ledger));

costSum 'Себестоимость' = GROUP BY PurchaseLedger ledger SUM cost(ledger, Batch batch) * cost(batch);

//CONSTRAINT quantityPurchaseLedger(purchaseLedger) == 0 MESSAGE 'ошибка: Количество покупки не должно быть равно нулю';

averagePrice 'Цена покупки (средняя) с НДС' (PurchaseLedger purchaseLedger) = NUMERIC[16,4](sum(purchaseLedger)/quantity(purchaseLedger) IF quantity(purchaseLedger) != 0);

VAT (ledger) = ABSTRACT Range (PurchaseLedger) MATERIALIZED;
valueVAT 'НДС, %' (PurchaseLedger ledger) = valueRate(VAT(ledger), date(ledger));

sumVAT 'Сумма НДС' (PurchaseLedger ledger) = NUMERIC[18,4]([= X*Y/(100+Y)](
        sum(ledger), valueVAT(ledger)));


//по складу и batch
quantityPurchase (batch, stock, date) = GROUP
    BY Batch batch, stock(PurchaseLedger ledger), date(ledger) SUM cost(ledger,batch) IF active(ledger);
quantityPurchase =  GROUP
    BY Batch batch, stock(PurchaseLedger ledger) SUM cost(ledger,batch) IF active(ledger);
sumVATPurchase (batch, stock, date) = GROUP
    BY Batch batch, stock(PurchaseLedger ledger), date(ledger) SUM sumVAT(ledger)*coeff(ledger,batch) IF active(ledger);
sumPurchase (batch, stock, date) = GROUP
    BY Batch batch, stock(PurchaseLedger ledger), date(ledger) SUM sum(ledger)*coeff(ledger,batch) IF active(ledger);    
costSumPurchase (batch, stock, date) = GROUP
    BY Batch batch, stock(PurchaseLedger ledger), date(ledger) SUM costSum(ledger)*coeff(ledger,batch) IF active(ledger);
    
//по складу и Batch
quantityPurchase 'Закуплено за интервал (кол-во)' (batch, stock, dateFrom, dateTo) = GROUP
        BY Batch batch, Stock stock, DATE dateFrom, DATE dateTo SUM
        quantityPurchase(batch, stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumVATPurchase 'Сумма НДС закупленного за интервал' (batch, stock, dateFrom, dateTo) = GROUP
        BY Batch batch, Stock stock, DATE dateFrom, DATE dateTo SUM
        sumVATPurchase(batch, stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumPurchase 'Закуплено за интервал (сумма)' (batch, stock, dateFrom, dateTo) = GROUP
        BY Batch batch, Stock stock, DATE dateFrom, DATE dateTo SUM
        sumPurchase(batch, stock, DATE date) IF date >= dateFrom AND date <= dateTo;
        
costSumPurchase 'Себестоимость закупленного за интервал' (batch, stock, dateFrom, dateTo) = GROUP
        BY Batch batch, Stock stock, DATE dateFrom, DATE dateTo SUM
        costSumPurchase(batch, stock, DATE date) IF date >= dateFrom AND date <= dateTo;     

TABLE purchaseSkuStockDate(Sku, Stock, DATE);

//по складу и SKU
quantityPurchase (sku, stock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), date(ledger) SUM quantity(ledger) IF active(ledger) MATERIALIZED TABLE purchaseSkuStockDate;

sumVATPurchase (sku, stock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), date(ledger) SUM sumVAT(ledger) IF active(ledger) MATERIALIZED TABLE purchaseSkuStockDate;

sumPurchase (sku, stock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), date(ledger) SUM sum(ledger) IF active(ledger) MATERIALIZED TABLE purchaseSkuStockDate;
    
costSumPurchase (sku, stock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), date(ledger) SUM costSum(ledger) IF active(ledger) MATERIALIZED TABLE purchaseSkuStockDate;    

//по складу, поставщику и SKU
quantityPurchase (sku, stock, supplier, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplier(ledger), date(ledger) SUM quantity(ledger) IF active(ledger);  // MATERIALIZED

sumVATPurchase (sku, stock, supplier, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplier(ledger), date(ledger) SUM sumVAT(ledger) IF active(ledger);  // MATERIALIZED

sumPurchase (sku, stock, supplier, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplier(ledger), date(ledger) SUM sum(ledger) IF active(ledger);   // MATERIALIZED


quantityPurchase 'Кол-во закуплено' (sku, stock, supplier) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplier(ledger) SUM quantity(ledger) IF active(ledger);  // MATERIALIZED
    
//по складу, складу поставщика  и SKU
quantityPurchaseSupplier (sku, stock, supplierStock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplierStock(ledger), date(ledger) SUM quantity(ledger) IF active(ledger);  // MATERIALIZED

sumVATPurchaseSupplier (sku, stock, supplierStock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplierStock(ledger), date(ledger) SUM sumVAT(ledger) IF active(ledger);  // MATERIALIZED

sumPurchaseSupplier (sku, stock, supplierStock, date) = GROUP
    BY sku(PurchaseLedger ledger), stock(ledger), supplierStock(ledger), date(ledger) SUM sum(ledger) IF active(ledger);   // MATERIALIZED

quantityPurchaseSupplier 'Кол-во закуплено' (stock, supplierStock, sku) = GROUP
    BY stock(PurchaseLedger ledger), supplierStock(ledger), sku(ledger) SUM quantity(ledger) IF active(ledger);     

//по складу и SKU
quantityPurchase 'Закуплено за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, DATE dateFrom, DATE dateTo SUM
        quantityPurchase(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumVATPurchase 'Сумма НДС закупленного за интервал' (sku, stock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, DATE dateFrom, DATE dateTo SUM
        sumVATPurchase(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumPurchase 'Закуплено за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, DATE dateFrom, DATE dateTo SUM
        sumPurchase(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo;
        
costSumPurchase 'Себестоимость закупленного за интервал' (sku, stock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, DATE dateFrom, DATE dateTo SUM
        costSumPurchase(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo;
        
//по складу, поставщику и SKU
quantityPurchase 'Закуплено за интервал (кол-во)' (sku, stock, supplier, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, LegalEntity supplier, DATE dateFrom, DATE dateTo SUM
        quantityPurchase(sku, stock, supplier, DATE date) IF date >= dateFrom AND date <= dateTo;

sumVATPurchase 'Сумма НДС закупленного за интервал' (sku, stock, supplier, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, LegalEntity supplier, DATE dateFrom, DATE dateTo SUM
        sumVATPurchase(sku, stock, supplier, DATE date) IF date >= dateFrom AND date <= dateTo;

sumPurchase 'Закуплено за интервал (сумма)' (sku, stock, supplier, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, LegalEntity supplier, DATE dateFrom, DATE dateTo SUM
        sumPurchase(sku, stock, supplier, DATE date) IF date >= dateFrom AND date <= dateTo;

//по складу, складу поставщика и SKU
quantityPurchaseSupplier 'Закуплено за интервал (кол-во)' (sku, stock, supplierStock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, Stock supplierStock, DATE dateFrom, DATE dateTo SUM
        quantityPurchaseSupplier(sku, stock, supplierStock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumVATPurchaseSupplier 'Сумма НДС закупленного за интервал' (sku, stock, supplierStock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, Stock supplierStock, DATE dateFrom, DATE dateTo SUM
        sumVATPurchaseSupplier(sku, stock, supplierStock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumPurchaseSupplier 'Закуплено за интервал (сумма)' (sku, stock, supplierStock, dateFrom, dateTo) = GROUP
        BY Sku sku, Stock stock, Stock supplierStock, DATE dateFrom, DATE dateTo SUM
        sumPurchaseSupplier(sku, stock, supplierStock, DATE date) IF date >= dateFrom AND date <= dateTo;
//по SKU
quantityPurchase 'Закуплено за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP
        BY Sku sku, DATE dateFrom, DATE dateTo SUM
        quantityPurchase(sku, Stock stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumPurchase 'Закуплено за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP
        BY Sku sku, DATE dateFrom, DATE dateTo SUM
        sumPurchase(sku, Stock stock, DATE date) IF date >= dateFrom AND date <= dateTo;

//---------------------------------Тип обмена---------------------------------------//

sumPurchase (TypeExchange typeExchange, Sku sku, Stock stock, DATE date)= round((sumPurchase (sku, stock, date)/ rateOn(typeExchange, currency(stock), date)), currency(typeExchange));

sumPurchase 'Закуплено за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP
        BY TypeExchange typeExchange, Sku sku, Stock stock, DATE dateFrom, DATE dateTo SUM
        sumPurchase (typeExchange, sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumPurchase 'Закуплено за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP BY TypeExchange typeExchange, Sku sku, DATE dateFrom, DATE dateTo SUM
        sumPurchase(typeExchange, sku, Stock stock, dateFrom, dateTo);


skuStockAveragePurchaseInterval 'Интервал расчета закупок в день' = DATA INTEGER ();

averagePurchase 'Закупок в день' = DATA NUMERIC[14,3] (Sku, Stock);

calcQuantityPurchaseInterval(DATE dateFrom, DATE dateTo) = {
    LOCAL balance = NUMERIC[14,3] (Sku, Stock);
    LOCAL days = INTEGER (Sku, Stock);
    LOCAL dateCur = DATE();

    dateCur() <- dateFrom;
    balance(Sku sku, Stock stock) <- balanceB(sku, stock, dateFrom);

    WHILE dateCur() <= dateTo DO {
        days(Sku sku, Stock stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantity(sku, stock, dateCur()) > 0)));
        balance(Sku sku, Stock stock) <- balance(sku, stock) (+)
                   signedQuantity(sku, stock, dateCur());
        dateCur() <- sum(dateCur(), 1);
    }

    averagePurchase(Sku sku, Stock stock) <- quantityPurchase (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantityPurchaseInterval 'Пересчитать однодневные закупки'() = {
	NEWSESSION {
	    EXEC calcQuantityPurchaseInterval(subtract(currentDate(), skuStockAveragePurchaseInterval()), subtract(currentDate(), 1));
	    apply();
	}
}

EXTEND FORM options
    PROPERTIES() skuStockAveragePurchaseInterval, calcCurrentQuantityPurchaseInterval
;
DESIGN options {
    purchase {
        MOVE PROPERTY(skuStockAveragePurchaseInterval());
        MOVE PROPERTY(calcCurrentQuantityPurchaseInterval());
    }
}

//---------------------------------------------- Формы закупки -------------------------------------//
purchaseOperation 'Операция' = DATA LOCAL Purchase.Operation ();
namePurchaseOperation 'Операция' = name(purchaseOperation());

filterPurchaseOperationSale = operation(PurchaseLedger ledger)==purchaseOperation() OR (ledger IS PurchaseLedger AND NOT purchaseOperation());

purchaseSupplier 'Поставщик' = DATA LOCAL LegalEntity ();
namePurchaseCustomer 'Поставщик' = name(purchaseSupplier());

filterPurchaseCustomerSale = supplier(PurchaseLedger ledger)==purchaseSupplier() OR (ledger IS PurchaseLedger AND NOT purchaseSupplier());
idBarcodeSku 'Штрихкод' (PurchaseLedger l) = idBarcode(sku(l));

isShipmentDatePurchaseLedger 'Данные фильтровать по дате поставки в "Регистре поступлений"' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () isShipmentDatePurchaseLedger
;
DESIGN options {
    purchase {
        MOVE PROPERTY(isShipmentDatePurchaseLedger());
    }
}

isShipmentDate 'По дате поставки' = DATA LOCAL BOOLEAN ();

onInitPurchaseLedger() = {
    isShipmentDate() <- isShipmentDatePurchaseLedger();    
}

FORM purchaseLedger 'Регистр поступлений'
    PROPERTIES() namePurchaseOperation, namePurchaseCustomer

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo), isShipmentDate()

    OBJECTS te = TypeExchange PANEL
    PROPERTIES nameType = name(te) SELECTOR, nameCurrency(te) READONLY

    OBJECTS s = PurchaseLedger
    PROPERTIES(s) READONLY date, dateTime, numberDocument, shipmentDate, shipmentDateTime,
                           nameStock, nameSupplier, nameOperation,
                           canonicalNameSkuGroup, nameSkuGroup1Sku, nameSkuGroup2Sku, nameSkuGroup3Sku, nameSkuGroup4Sku, nameSkuGroup5Sku, 
                           nameSku, shortNameUOMSku, idBarcodeSku, idSku, description,
                           quantity, price, valueVAT, sumVAT, sum, averagePrice, nameCurrency,
                           shipmentQuantity
    PROPERTIES    READONLY sumPurchase (te, s)
    PROPERTIES(s) NEWSESSION EDIT SHOWIF allowedEdit(s), show SHOWIF allowedShow(s)
    
    FILTERS active(s), filterPurchaseOperationSale(s), filterPurchaseCustomerSale(s)  
    FILTERS (date(s) >= dFrom AND date(s) <= dTo IF NOT isShipmentDate()) OR (s IS PurchaseLedger AND isShipmentDate()),  
            (shipmentDate(s) >= dFrom AND shipmentDate(s) <= dTo IF isShipmentDate()) OR (s IS PurchaseLedger AND NOT isShipmentDate())
            
    EVENTS 
        ON INIT onInitPurchaseLedger()
;
@extendFormFilterAccessStock(PurchaseLedger, s, purchaseLedger, stock, company);


DESIGN purchaseLedger {
    BOX {
        type = CONTAINERV;
        NEW top {
            type = CONTAINERH;
            MOVE BOX(dates) {
                type = CONTAINERH;
                MOVE PROPERTY (isShipmentDate());
                PROPERTY(nameCurrency(te)) { caption = 'Валюта'; charWidth = 20;}
                PROPERTY(nameType) { caption = 'Тип обмена'; charWidth = 20;}
            }
            NEW operationContainer{
                type = COLUMNS;
                columns = 3;
                caption = 'Фильтры';
                MOVE PROPERTY(namePurchaseOperation());
                MOVE PROPERTY(namePurchaseCustomer());
            }  
            MOVE BOX(te) {
                type = CONTAINERH;
                PROPERTY(nameCurrency(te)) { caption = 'Валюта'; charWidth = 20;}
                PROPERTY(nameType) { caption = 'Тип обмена'; charWidth = 20;}
            }
        }
        MOVE BOX(s){
            type = CONTAINERV;
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    purchaseNavigator {
        NEW FOLDER purchasesReports 'Отчеты' {
            NEW purchaseLedger;
        }
    }
}

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementPurchaseLedgerCustom(concrete, skuProp, stockProp)
    dateTime[PurchaseLedger] (concrete##Detail ledger) += dateTime(ledger);
    isPosted[PurchaseLedger] (concrete##Detail ledger) += isPosted(ledger);
    isClosed[PurchaseLedger] (concrete##Detail ledger) += isClosed(ledger);
    numberDocument[PurchaseLedger](concrete##Detail ledger) += number(ledger);
    seriesDocument[PurchaseLedger](concrete##Detail ledger) += series(ledger);
    skuProp[PurchaseLedger] (concrete##Detail ledger) += skuProp(ledger);
    stock[PurchaseLedger] (concrete##Detail ledger) += stockProp(ledger);
    operation[PurchaseLedger] (concrete##Detail ledger) += operation(ledger);
    description[PurchaseLedger] (concrete##Detail ledger) += description(ledger);
    show[PurchaseLedger] (concrete##Detail ledger) += {show(ledger);};
END
META implementPurchaseLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : PurchaseLedger;
    @implementPurchaseLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averagePurchase READONLY;
EXTEND FORM balanceSkuStock PROPERTIES(s, st) averagePurchase READONLY;

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineSupplierDialogStockSku (form)

    form##Supplier = DATA LOCAL LegalEntity ();
    form##NameSupplier 'Поставщик' () = name(form##Supplier()) CHARWIDTH 30;
    dialogSuppliersFilter (Sku sku) =  inSupplier(form##Supplier(), sku) OR
                                    (sku IS Sku AND NOT form##Supplier());

    EXTEND FORM form
        PROPERTIES() form##NameSupplier
        FILTERS dialogSuppliersFilter(s)

    ;
    DESIGN form {
        filterContainer {
            MOVE PROPERTY(form##NameSupplier());
        }
    }
END
@defineSupplierDialogStockSku(dialogSku);

