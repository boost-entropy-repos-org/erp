MODULE PurchaseLedger;

REQUIRE System, Stock, Tax, EmployeeStock, Purchase, PriceRound, StockSkuDocument, PurchaseOperation;

CLASS ABSTRACT PurchaseLedger 'Покупка товара';
TABLE purchaseLedger(PurchaseLedger);

dateTimePurchaseLedger 'Дата/время' (ledger) = ABSTRACT DATETIME (PurchaseLedger) PERSISTENT INDEXED;
datePurchaseLedger 'Дата' (ledger) = toDate(dateTimePurchaseLedger(ledger)) PERSISTENT INDEXED;

isPostedPurchaseLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (PurchaseLedger) PERSISTENT;

skipPurchaseLedger 'Не проводить' (ledger) = ABSTRACT BOOLEAN (PurchaseLedger) PERSISTENT;

activePurchaseLedger (ledger) = isPostedPurchaseLedger(ledger) AND NOT skipPurchaseLedger(ledger);

skuPurchaseLedger (ledger) = ABSTRACT Sku (PurchaseLedger) PERSISTENT INDEXED;
nameSkuPurchaseLedger 'SKU' (ledger) = nameSku(skuPurchaseLedger(ledger));

canonicalNameSkuGroupPurchaseLedger 'Каноническое имя' (ledger) = canonicalNameGroup(skuGroupSku(skuPurchaseLedger(ledger)));
nameSkuGroup1SkuPurchaseLedger 'Категория' = nameSkuGroup1Sku(skuPurchaseLedger(ledger));
nameSkuGroup2SkuPurchaseLedger 'Направление' = nameSkuGroup2Sku(skuPurchaseLedger(ledger));
nameSkuGroup3SkuPurchaseLedger 'Группа' = nameSkuGroup3Sku(skuPurchaseLedger(ledger));
nameSkuGroup4SkuPurchaseLedger 'Подгруппа' = nameSkuGroup4Sku(skuPurchaseLedger(ledger));
nameSkuGroup5SkuPurchaseLedger 'Субгруппа' = nameSkuGroup5Sku(skuPurchaseLedger(ledger));

stockPurchaseLedger (ledger) = ABSTRACT Stock (PurchaseLedger) PERSISTENT INDEXED;
nameStockPurchaseLedger 'Склад' (ledger) = nameStock(stockPurchaseLedger(ledger));

descriptionPurchaseLedger 'Название документа' (ledger) = ABSTRACT VARSTRING[200] (PurchaseLedger) PERSISTENT;
numberDocumentPurchaseLedger 'Номер документа' (ledger) = ABSTRACT STRING[18] (PurchaseLedger) PERSISTENT;

quantityPurchaseLedger 'Кол-во' (ledger) = ABSTRACT NUMERIC[14,3] (PurchaseLedger) PERSISTENT;

sumPurchaseLedger 'Сумма покупки' (ledger) = ABSTRACT NUMERIC[16,2] (PurchaseLedger) PERSISTENT;

supplierPurchaseLedger  (ledger) = ABSTRACT LegalEntity (PurchaseLedger) PERSISTENT;
nameSupplierPurchaseLedger 'Поставщик' (ledger) = nameLegalEntity(supplierPurchaseLedger (ledger));

operationPurchaseLedger  (ledger) = ABSTRACT Purchase.Operation (PurchaseLedger) PERSISTENT;
nameOperationPurchaseLedger 'Операция' (ledger) = nameOperation(operationPurchaseLedger (ledger));

quantityPurchaseSupplierSku 'Кол-во закуплено' = GROUP SUM quantityPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY supplierPurchaseLedger(ledger), skuPurchaseLedger(ledger) PERSISTENT;
    
lastSupplierStockSku (stock, sku) = 
    GROUP LAST supplierPurchaseLedger(ledger)
        BY stockPurchaseLedger(ledger), skuPurchaseLedger(ledger)
        ORDER dateTimePurchaseLedger(ledger), ledger
        WHERE activePurchaseLedger(ledger);
   

inSupplierSku 'Были поставки' (legalEntity, sku) = TRUE IF quantityPurchaseSupplierSku(legalEntity, sku) PERSISTENT;
prevInSupplierSku 'Были поставки (пред.)' (legalEntity, sku) = PREV(inSupplierSku(legalEntity, sku));

sumPurchaseTypeExchangePurchaseLedger 'Сумма покупки валюта' (typeExchange, purchaseLedger)= roundPriceCurrency((sumPurchaseLedger (purchaseLedger)/
    rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stockPurchaseLedger(purchaseLedger)), datePurchaseLedger(purchaseLedger))), currencyTypeExchange(typeExchange));

TABLE purchaseLedgerBatch(PurchaseLedger, Batch);

costPurchaseLedgerBatch 'Расписано из партии' = ABSTRACT NUMERIC[14,3] (PurchaseLedger, Batch) PERSISTENT;

costSumPurchaseLedger 'Себестоимость' = GROUP SUM costPurchaseLedgerBatch(ledger, batch) * costBatch(batch) BY ledger;

//CONSTRAINT quantityPurchaseLedger(purchaseLedger) == 0 MESSAGE 'ошибка: Количество покупки не должно быть равно нулю';

averagePricePurchaseLedger 'Цена покупки (средняя)' (purchaseLedger) = sumPurchaseLedger(purchaseLedger)/quantityPurchaseLedger(purchaseLedger) IF quantityPurchaseLedger(purchaseLedger) != 0;

VATPurchaseLedger (ledger) = ABSTRACT Range (PurchaseLedger) PERSISTENT;
valueVATPurchaseLedger 'НДС, %' (ledger) = valueRateRangeDate(VATPurchaseLedger(ledger), datePurchaseLedger(ledger));

sumVATPurchaseLedger 'Сумма НДС' (ledger) = NUMERIC[16,2]([= X*Y/(100+Y)](
        sumPurchaseLedger(ledger), valueVATPurchaseLedger(ledger)));

//по складу и SKU
quantityPurchaseSkuStockDate (sku, stock, date) = GROUP SUM quantityPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), datePurchaseLedger(ledger) PERSISTENT;

sumVATPurchaseSkuStockDate (sku, stock, date) = GROUP SUM sumVATPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), datePurchaseLedger(ledger) PERSISTENT;

sumPurchaseSkuStockDate (sku, stock, date) = GROUP SUM sumPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), datePurchaseLedger(ledger) PERSISTENT;
    
costSumPurchaseSkuStockDate (sku, stock, date) = GROUP SUM costSumPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), datePurchaseLedger(ledger);    

//по складу, покупателю и SKU
quantityPurchaseSkuStockSupplierDate (sku, stock, supplier, date) = GROUP SUM quantityPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), supplierPurchaseLedger(ledger), datePurchaseLedger(ledger);  // PERSISTENT

sumVATPurchaseSkuStockSupplierDate (sku, stock, supplier, date) = GROUP SUM sumVATPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), supplierPurchaseLedger(ledger), datePurchaseLedger(ledger);  // PERSISTENT

sumPurchaseSkuStockSupplierDate (sku, stock, supplier, date) = GROUP SUM sumPurchaseLedger(ledger) IF activePurchaseLedger(ledger)
    BY skuPurchaseLedger(ledger), stockPurchaseLedger(ledger), supplierPurchaseLedger(ledger), datePurchaseLedger(ledger);   // PERSISTENT

//по складу и SKU
quantityPurchaseSkuStockDateFromTo 'Закуплено за интервал (кол-во)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

sumVATPurchaseSkuStockDateFromTo 'Сумма НДС закупленного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumVATPurchaseSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;

sumPurchaseSkuStockDateFromTo 'Закуплено за интервал (сумма)' (sku, stock, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;
        
costSumPurchaseSkuStockDateFromTo 'Себестоимость закупленного за интервал' (sku, stock, dateFrom, dateTo) = GROUP SUM
        costSumPurchaseSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, dateFrom, dateTo;
        
//по складу, покупателю и SKU
quantityPurchaseSkuStockSupplierDateFromTo 'Закуплено за интервал (кол-во)' (sku, stock, supplier, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockSupplierDate(sku, stock, supplier, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, supplier, dateFrom, dateTo;

sumVATPurchaseSkuStockSupplierDateFromTo 'Сумма НДС закупленного за интервал' (sku, stock, supplier, dateFrom, dateTo) = GROUP SUM
        sumVATPurchaseSkuStockSupplierDate(sku, stock, supplier, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, supplier, dateFrom, dateTo;

sumPurchaseSkuStockSupplierDateFromTo 'Закуплено за интервал (сумма)' (sku, stock, supplier, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockSupplierDate(sku, stock, supplier, date) IF date >= dateFrom AND date <= dateTo
        BY sku, stock, supplier, dateFrom, dateTo;

//по SKU
quantityPurchaseSkuDateFromTo 'Закуплено за интервал (кол-во)' (sku, dateFrom, dateTo) = GROUP SUM
        quantityPurchaseSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, dateFrom, dateTo;

sumPurchaseSkuDateFromTo 'Закуплено за интервал (сумма)' (sku, dateFrom, dateTo) = GROUP SUM
        sumPurchaseSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY sku, dateFrom, dateTo;

//---------------------------------Тип обмена---------------------------------------//

sumPurchaseTypeExchangeSkuStockDate (typeExchange, sku, stock, date)= roundPriceCurrency((sumPurchaseSkuStockDate (sku, stock, date)/ rateOnTypeExchangeCurrencyDate(typeExchange, currencyStock(stock), date)), currencyTypeExchange(typeExchange));

sumPurchaseTypeExchangeSkuStockDateFromTo 'Закуплено за интервал (сумма-валюта)' (typeExchange, sku, stock, dateFrom, dateTo) = GROUP SUM
        sumPurchaseTypeExchangeSkuStockDate (typeExchange, sku, stock, date) IF date >= dateFrom AND date <= dateTo
        BY typeExchange, sku, stock, dateFrom, dateTo;

sumPurchaseTypeExchangeSkuDateFromTo 'Закуплено за интервал (сумма-валюта)' (typeExchange, sku, dateFrom, dateTo) = GROUP SUM
        sumPurchaseTypeExchangeSkuStockDateFromTo(typeExchange, sku, stock, dateFrom, dateTo) BY typeExchange, sku, dateFrom, dateTo;


skuStockAveragePurchaseInterval 'Интервал расчета закупок в день' = DATA INTEGER ();

averagePurchaseSkuStock 'Закупок в день' = DATA NUMERIC[14,3] (Sku, Stock);

calcQuantityPurchaseInterval = ACTION (dateFrom, dateTo) {
    LOCAL balance = NUMERIC[14,3] (Sku, Stock);
    LOCAL days = INTEGER (Sku, Stock);
    LOCAL dateCur = DATE();

    ASSIGN dateCur() <- dateFrom;
    ASSIGN balance(sku, stock) <- balanceBSkuStockDate(sku, stock, dateFrom);

    WHILE dateCur() <= dateTo DO {
        ASSIGN days(sku, stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantitySkuStockDate(sku, stock, dateCur()) > 0)));
        ASSIGN balance(sku, stock) <- balance(sku, stock) (+)
                   signedQuantitySkuStockDate(sku, stock, dateCur());
        ASSIGN dateCur() <- sumDate(dateCur(), 1);
    }

    ASSIGN averagePurchaseSkuStock(sku, stock) <- quantityPurchaseSkuStockDateFromTo (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantityPurchaseInterval 'Пересчитать однодневные закупки' = ACTION () NEWSESSION AUTOAPPLY {
    EXEC calcQuantityPurchaseInterval(subtractDate(currentDate(), skuStockAveragePurchaseInterval()), subtractDate(currentDate(), 1));
}

EXTEND FORM options
    PROPERTIES() skuStockAveragePurchaseInterval, calcCurrentQuantityPurchaseInterval
;
EXTEND DESIGN options {
    purchase {
        ADD PROPERTY(skuStockAveragePurchaseInterval());
        ADD PROPERTY(calcCurrentQuantityPurchaseInterval());
    }
}

//---------------------------------------------- Формы закупки -------------------------------------//
purchaseOperation 'Операция' = DATA SESSION Purchase.Operation ();
namePurchaseOperation 'Операция' = nameOperation(purchaseOperation());

filterPurchaseOperationSaleLedger = operationPurchaseLedger(ledger)==purchaseOperation() OR (ledger IS PurchaseLedger AND NOT purchaseOperation());

purchaseSupplier 'Поставщик' = DATA SESSION LegalEntity ();
namePurchaseCustomer 'Поставщик' = nameLegalEntity(purchaseSupplier());

filterPurchaseCustomerSaleLedger = supplierPurchaseLedger(ledger)==purchaseSupplier() OR (ledger IS PurchaseLedger AND NOT purchaseSupplier());

FORM purchaseLedger 'Регистр поступлений'
    PROPERTIES() namePurchaseOperation, namePurchaseCustomer

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS te = TypeExchange FIXED PANEL
    PROPERTIES nameType = nameTypeExchange(te) SELECTOR, nameCurrencyTypeExchange(te) READONLY

    OBJECTS s = PurchaseLedger
    PROPERTIES(s) READONLY datePurchaseLedger, dateTimePurchaseLedger, numberDocumentPurchaseLedger, nameStockPurchaseLedger, nameSupplierPurchaseLedger, nameOperationPurchaseLedger,
                           canonicalNameSkuGroupPurchaseLedger, nameSkuPurchaseLedger, descriptionPurchaseLedger,
                           quantityPurchaseLedger, valueVATPurchaseLedger, sumVATPurchaseLedger, sumPurchaseLedger, averagePricePurchaseLedger
    PROPERTIES    READONLY sumPurchaseTypeExchangePurchaseLedger (te, s)
    FILTERS activePurchaseLedger(s), filterPurchaseOperationSaleLedger(s), filterPurchaseCustomerSaleLedger(s)  

    FILTERS datePurchaseLedger(s) >= dFrom, datePurchaseLedger(s) <= dTo
;
@extendFormFilterAccessStock(PurchaseLedger, s, purchaseLedger, stock, company);
@extendFormFilterAccessLegalEntity(PurchaseLedger, s, purchaseLedger, supplier, supplier);


DESIGN purchaseLedger FROM DEFAULT {
    main {
        type = CONTAINERV;
        NEW top {
            type = CONTAINERH;
            ADD dates.box {
                type = CONTAINERH;
                PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
                PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
            }
            NEW operationContainer{
                type = COLUMNS;
                columns = 3;
                caption = 'Фильтры';
                ADD PROPERTY(namePurchaseOperation());
                ADD PROPERTY(namePurchaseCustomer());
            }  
            ADD te.box {
                type = CONTAINERH;
                PROPERTY(nameCurrencyTypeExchange(te)) { caption = 'Валюта'; preferredCharWidth = 20;}
                PROPERTY(nameType) { caption = 'Тип обмена'; preferredCharWidth = 20;}
            }
        }
        ADD s.box{
            type = CONTAINERV;
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    purchaseNavigator {
        NEW purchasesReports 'Отчеты' {
            ADD purchaseLedger;
        }
    }
}

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementPurchaseLedgerCustom(concrete, skuProp, stockProp)
    dateTimePurchaseLedger (ledger) += dateTime###concrete##Detail(ledger);
    isPostedPurchaseLedger (ledger) += isPosted###concrete##Detail(ledger);
    numberDocumentPurchaseLedger(ledger) += number###concrete##Detail(ledger);
    skuPurchaseLedger (ledger) += skuProp###concrete##Detail(ledger);
    stockPurchaseLedger (ledger) += stockProp###concrete##Detail(ledger);
    operationPurchaseLedger (ledger) += operation###concrete##Detail(ledger);
    descriptionPurchaseLedger (ledger) += description###concrete##Detail(ledger);
END
META implementPurchaseLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : PurchaseLedger;
    @implementPurchaseLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averagePurchaseSkuStock READONLY;
EXTEND FORM balanceSkuStock PROPERTIES(s, st) averagePurchaseSkuStock READONLY;

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineSupplierDialogStockSku (form)

    form###supplier = DATA SESSION LegalEntity ();
    form###nameSupplier 'Поставщик' () = nameLegalEntity(form###supplier()) PREFCHARWIDTH 30;
    form###suppliersFilter (sku) =  inSupplierSku(form###supplier(), sku) OR
                                    (sku IS Sku AND NOT form###supplier());

    EXTEND FORM form
        PROPERTIES() form###nameSupplier
        FILTERS form###suppliersFilter(s)

    ;
    EXTEND DESIGN form {
        filterContainer {
            ADD PROPERTY(form###nameSupplier());
        }
    }
END
@defineSupplierDialogStockSku(dialogSku);

