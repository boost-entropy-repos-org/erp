MODULE PurchaseSaleCreditNote;

REQUIRE PurchaseCreditNote, SaleCreditNote, SalePurchaseInvoice;

NAMESPACE Purchase;

//----------------------------------------------------------------------------//

// Создание акта расхождения на основе акта расхождения //

FORM creditNoteCreditNotes 'Акты расхождения'
    OBJECTS s = LegalEntity FIXED PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity FIXED PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = Stock FIXED PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = Stock FIXED PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS t=DATE FIXED PANEL
    PROPERTIES(t) OBJVALUE

    OBJECTS o = CreditNote
    PROPERTIES (o) READONLY isPosted, number, series, date, time, nameCurrency,
                            countCreditNoteDetail, quantityCreditNoteDetail, sumCreditNoteDetail,
                            note
    FILTERS supplier(o) == s,
            customer(o) == c,
            supplierStock(o) == ss,
            customerStock(o) == cs,
            isPosted(o)

    FILTERGROUP filters1
        FILTER 'Только этой даты' date(o) == t 'F11' DEFAULT

    OBJECTS d = CreditNoteDetail

    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
//    PROPERTIES (d) READONLY SHOWIF showPackCreditNote(o) idBarcodePackCreditNoteDetail, shortNameUOMPackCreditNoteDetail, amountPackCreditNoteDetail, packQuantityCreditNoteDetail
    PROPERTIES (d) READONLY quantity, price, sum, numberVAT, valueVAT,
                            VATSum, invoiceSum//, nameSupplierStockCreditNoteDetail, nameCustomerStockCreditNoteDetail

    FILTERS creditNote(d) == o
;

DESIGN creditNoteCreditNotes {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {
            
            type = CONTAINERV;
            fill = 1;
            
            NEW headerBox1 {               
                type = CONTAINERV;
                NEW headerBox11 {
                    type = CONTAINERH;
                    caption = 'Поставщик';
                    MOVE s.box;
                    MOVE ss.box;
                }
                NEW headerBox12 {
                    type = CONTAINERH;
                    caption = 'Покупатель';
                    MOVE c.box;
                    MOVE cs.box;
                }
                MOVE t.box;
            }
//            NEW headerBox2 {
//                type = CONTAINERH;
//                
//            }
            MOVE o.box {fill = 1;}
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
}


fillCreditNote 'Заполнить на основе акта расхождения (закупка)'(Sale.UserCreditNote userCreditNote) =  ACTION {
    FORM creditNoteCreditNotes OBJECTS s = supplier(userCreditNote), c = customer(userCreditNote),
                                   ss = supplierStock(userCreditNote), cs = customerStock(userCreditNote),
                                   t = date(userCreditNote) MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL purchaseCreditNote = CreditNote();
        ASSIGN purchaseCreditNote() <- chosenObject('o');

        FOR creditNote(CreditNoteDetail creditNoteDetail) == purchaseCreditNote() ADDOBJ d = Sale.UserCreditNoteDetail DO {
            ASSIGN userCreditNote(d) <- userCreditNote;
            ASSIGN sku(d) <- sku(creditNoteDetail);
            ASSIGN batch(d) <- batch(creditNoteDetail);
//            ASSIGN Sale.barcodePackUserCreditNoteDetail(d) <- barcodePackCreditNoteDetail(creditNoteDetail);
//            ASSIGN Sale.amountPackUserCreditNoteDetail(d) <- amountPackCreditNoteDetail(creditNoteDetail);
//            ASSIGN Sale.packQuantityUserCreditNoteDetail(d) <- packQuantityCreditNoteDetail(creditNoteDetail);
            ASSIGN quantity (d) <- quantity(creditNoteDetail);
            ASSIGN VAT(d) <- VAT(creditNoteDetail);
            ASSIGN valueVAT(d) <- valueVAT(creditNoteDetail);
            ASSIGN price(d) <- price(creditNoteDetail);
//            ASSIGN Sale.creditNotePriceUserCreditNoteDetail(d) <- creditNotePriceCreditNoteDetail(creditNoteDetail);
        }
    }
} IN Sale.creditNote; // 

//----------------------------------------------------------------------------//

//GROUP creditNote 'Информация об акте расхождения' : base;

createSaleCreditNote 'Создать акт расхождения (продажа)' = ABSTRACT BOOLEAN (CreditNote) PERSISTENT;
createSaleCreditNote 'Создать акт расхождения (продажа)' = DATA BOOLEAN (UserCreditNote);
createSaleCreditNote(UserCreditNote creditNote) += createSaleCreditNote(creditNote);

createSaleCreditNote 'Создать акт расхождения (продажа)' (CreditNoteDetail creditNoteDetail) = createSaleCreditNote(creditNote(creditNoteDetail))PERSISTENT;
createSaleCreditNote 'Создать акт расхождения (продажа)' (UserCreditNoteDetail userCreditNoteDetail) = createSaleCreditNote(userCreditNote(userCreditNoteDetail));
backgroundSale 'Цвет' (CreditNote creditNote) = RGB(238, 220, 130) IF creditNote IS CreditNote;

isCompanyCustomer (UserCreditNote userCreditNote) =  isCompany(customer(userCreditNote));

//-- Задание договора 
returnContractSku = ABSTRACT ContractSku (CreditNote) PERSISTENT;
seriesNumberReturnContractSku 'Номер договора' (CreditNote o) = seriesNumber[Contract](returnContractSku(o)) IN documentPrm;
dateFromReturnContractSku 'Дата договора' (CreditNote o) = dateFrom(returnContractSku(o)) IN documentPrm;

descriptionReturnContractSku 'Описание договора' (CreditNote o)= CONCAT ' ', seriesNumberReturnContractSku(o), ' от ' + dateFromReturnContractSku(o);

isCommissionReturn 'Продажа на комиссию' = ABSTRACT BOOLEAN (CreditNote) PERSISTENT IN documentPrm;

returnContractSku = DATA ContractSku (UserCreditNote);
numberReturnContractSku 'Договор (номер)' (UserCreditNote o) = number[Contract](returnContractSku(o)) IN documentPrm;
seriesNumberReturnContractSku 'Договор (серия/номер)' (UserCreditNote o) = seriesNumber[Contract](returnContractSku(o)) IN documentPrm;
dateFromReturnContractSku 'Дата договора' (UserCreditNote o) = dateFrom(returnContractSku(o)) IN documentPrm;

descriptionReturnContractSku 'Описание договора' (UserCreditNote o)= CONCAT ' ', seriesNumberReturnContractSku(o), ' от ' + dateFromReturnContractSku(o);

isCommissionReturn 'Продажа на комиссию' = DATA BOOLEAN (UserCreditNote) IN documentPrm;
isCommissionReturn(UserCreditNote o) <- type(returnContractSku(o)) == ContractSkuType.commission
    WHEN CHANGED(returnContractSku(o));

WHEN SESSION (CHANGED(supplier(UserCreditNote o)) OR CHANGED(customer(o)) OR CHANGED(supplierStock(o))
            OR CHANGED(customerStock(o)) OR CHANGED(date(o))) AND NOT CHANGED(contractSku(o)) DO {
            
    returnContractSku(o) <- OVERRIDE singleContractSkuSupplierCustomer(supplier(o), customer(o), date(o)) IF countContractSkuSupplierCustomer(supplier(o), customer(o), date(o)),
                                                   defaultContractSkuSupplierCustomer(supplier(o), customer(o), date(o)),
                                                   defaultContractSkuSupplierCustomer(supplier(o), supplierStock(o), customer(o), customerStock(o), date(o)); 
}                                     
                                      

CONSTRAINT returnContractSku(UserCreditNote o) AND NOT customer(o) == partyA(returnContractSku(o))
    CHECKED BY returnContractSku[UserCreditNote] MESSAGE 'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной';

CONSTRAINT returnContractSku(UserCreditNote o) AND NOT supplier(o) == partyB(returnContractSku(o))
    CHECKED BY returnContractSku[UserCreditNote] MESSAGE 'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной';    
    
returnContractSku(UserCreditNote o) += returnContractSku(o);
isCommissionReturn(UserCreditNote o) += isCommissionReturn(o);


EXTEND FORM userCreditNote
    PROPERTIES(c) BACKGROUND backgroundSale(c) SHOWIF isCompanyCustomer(c) createSaleCreditNote
    PROPERTIES(c) BACKGROUND backgroundSale(c) SHOWIF createSaleCreditNote(c) seriesNumberReturnContractSku
;
DESIGN userCreditNote {
    headerRow12 {
        NEW headerCreateSale {              
            type = CONTAINERV;
            caption = 'Акт расхождения (продажа)';                
            MOVE PROPERTY(createSaleCreditNote(c));
            MOVE PROPERTY(seriesNumberReturnContractSku(c));
        }
    }
}

//--  Связь акта с актом

creditNoteDetail = ABSTRACT CreditNoteDetail (Sale.CreditNoteDetail) PERSISTENT;
creditNoteDetail = DATA CreditNoteDetail (Sale.UserCreditNoteDetail);
creditNoteDetail(Sale.UserCreditNoteDetail creditNoteDetail) += creditNoteDetail(creditNoteDetail);

CONSTRAINT supplier(Sale.UserCreditNoteDetail detail) != supplier(creditNoteDetail(detail)) OR
           supplierStock(detail) != supplierStock(creditNoteDetail(detail)) OR
           customer(detail) != customer(creditNoteDetail(detail)) OR
           customerStock(detail) != customerStock(creditNoteDetail(detail)) OR
           sku(detail) != sku(creditNoteDetail(detail))
    CHECKED BY creditNoteDetail[Sale.UserCreditNoteDetail]
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в акте расхождения и в акте расхождения на основе акта должны соответствовать друг другу';


descriptionIndexCreditNoteDetail 'Строка акта расхождения (закупка)' (Sale.CreditNoteDetail detail) = descriptionIndex(creditNoteDetail(detail));
descriptionIndexCreditNoteDetail 'Строка акта расхождения (закупка)' (Sale.UserCreditNoteDetail detail) = descriptionIndex(creditNoteDetail(detail));

quantityCreditNoteDetail (purchase, sale) = GROUP SUM quantity(Sale.CreditNoteDetail detail) BY creditNote(creditNoteDetail(detail)), creditNote(detail);

purchaseCreditNotes 'Накладные (закупка)' (sale) = GROUP CONCAT VARSTRING[255](description(CreditNote purchase)) IF quantityCreditNoteDetail(purchase, Sale.CreditNote sale) , ', '
                                                        BY sale
                                                        ORDER sale IN creditNote MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

relationSale 'Связь' (sale) = GROUP SUM quantityCreditNoteDetail (CreditNote purchase, Sale.CreditNote sale) BY sale PERSISTENT;

//creditNotedCreditNoteDetail 'Кол-во (выписано)' (creditNoteDetail) = GROUP SUM Sale.quantityCreditNoteDetail(detail) IF Sale.isPostedCreditNoteDetail(detail)
//                                                                   BY creditNoteDetailCreditNoteDetail(detail) PERSISTENT;
//
//toCreditNotedCreditNoteDetail 'Не выписано' (creditNoteDetail) = quantityCreditNoteDetail (creditNoteDetail) (-) creditNotedCreditNoteDetail(creditNoteDetail);

EXTEND FORM Sale.userCreditNote
    PROPERTIES(c) fillCreditNote, purchaseCreditNotes READONLY
;
DESIGN Sale.userCreditNote { headerRow12{ type = CONTAINERH; MOVE c.creditNote { type = CONTAINERV; }}}



CLASS SaleCreditNote 'Акт расхождения на основе акта расхождений': Sale.CreditNote;
CLASS SaleCreditNoteDetail 'Строка акта расхождений на основе акта расхождений' : Sale.CreditNoteDetail;

@defineDocumentTables(saleCreditNote);

@defineDocumentAggregation(creditNote, saleCreditNote, createSaleCreditNote);
creditNote(SaleCreditNoteDetail detail) += saleCreditNote(detail);

index(SaleCreditNoteDetail detail) += index(detail);

date(SaleCreditNote creditNote) += date(creditNote);
time(SaleCreditNote creditNote) += time(creditNote);

@defineDocumentAggregationStockPrefix(creditNote, saleCreditNote, supplier, 'Склад поставщика', , );
@defineDocumentAggregationStockPrefix(creditNote, saleCreditNote, customer, 'Склад покупателя', , );

@defineDocumentAggregationLegalEntityPrefix(creditNote, saleCreditNote, supplier, 'Поставщик', , );
@defineDocumentAggregationLegalEntityPrefix(creditNote, saleCreditNote, customer, 'Покупатель', , );

supplierStock(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN customerStock(creditNote)
                                                ELSE supplierStock(creditNote);
dataSupplierStock(SaleCreditNoteDetail d) += IF returnContractSku(creditNote(creditNoteDetail(d)))
                                                THEN dataCustomerStock(creditNoteDetail(d))
                                                ELSE dataSupplierStock(creditNoteDetail(d));
customerStock(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN supplierStock(creditNote)
                                                ELSE customerStock(creditNote);
dataCustomerStock(SaleCreditNoteDetail d) += IF returnContractSku(creditNote(creditNoteDetail(d)))
                                                THEN dataSupplierStock(creditNoteDetail(d))
                                                ELSE dataCustomerStock(creditNoteDetail(d));

supplier(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN customer(creditNote)
                                                ELSE supplier(creditNote);
customer(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN supplier(creditNote)
                                                ELSE customer(creditNote);

@defineDocumentAggregationPosted(creditNote, saleCreditNote);
isPosted(SaleCreditNote creditNote) += isPosted(creditNote);

@defineDocumentAggregationClosed(creditNote, saleCreditNote);
isClosed(SaleCreditNote creditNote) += isClosed(creditNote);

number(SaleCreditNote creditNote) += number(creditNote(creditNote));
series(SaleCreditNote creditNote) += series(creditNote(creditNote));
seriesNumber 'Серия/номер документа' (SaleCreditNote saleCreditNote) = seriesNumber(creditNote(saleCreditNote));

noteCreditNote 'Примечание' (SaleCreditNote saleCreditNote) = note(creditNote(saleCreditNote));
note(SaleCreditNote creditNote) += noteCreditNote(creditNote);

currency  (SaleCreditNote saleCreditNote) = currency(creditNote(saleCreditNote));
currency (SaleCreditNote creditNote) += currency(creditNote);

//agreementSaleCreditNote  (saleCreditNote) = agreementCreditNote(creditNoteSaleCreditNote(saleCreditNote));
//Sale.agreementCreditNote (creditNote) += agreementSaleCreditNote(creditNote);
//
//priceListTypeSaleCreditNote  (saleCreditNote) = priceListTypeCreditNote(creditNoteSaleCreditNote(saleCreditNote));
//Sale.priceListTypeCreditNote (creditNote) += priceListTypeSaleCreditNote(creditNote);

@defineDocumentDescription(saleCreditNote, SaleCreditNoteDetail, 'Акт расхождения на основе акта расхождения');
description (SaleCreditNote creditNote) += description(creditNote);

contractSku (SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote)) 
                                               THEN returnContractSku(creditNote(creditNote))
                                               ELSE contractSku(creditNote(creditNote));
isCommission (SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN isCommissionReturn(creditNote(creditNote))
                                                ELSE isCommission(creditNote(creditNote));

@defineDocumentAggregationDetailSku(creditNote, saleCreditNote, sku);
sku(SaleCreditNoteDetail creditNoteDetail) +=  sku(creditNoteDetail);

@defineDocumentAggregationDetailBatch(creditNote, saleCreditNote);
batch(SaleCreditNoteDetail creditNoteDetail) += batch(creditNoteDetail);

quantity(SaleCreditNoteDetail creditNoteDetail) += quantity(creditNoteDetail(creditNoteDetail));
//Sale.priceListTypeCreditNoteDetail(creditNoteDetail) += priceListTypeCreditNoteDetail(creditNoteDetailSaleCreditNoteDetail(creditNoteDetail));

price(SaleCreditNoteDetail creditNoteDetail) += price(creditNoteDetail(creditNoteDetail));
sum(SaleCreditNoteDetail creditNoteDetail) += sum(creditNoteDetail(creditNoteDetail));
VAT(SaleCreditNoteDetail creditNoteDetail) += VAT(creditNoteDetail(creditNoteDetail));
valueVAT(SaleCreditNoteDetail creditNoteDetail) += valueVAT(creditNoteDetail(creditNoteDetail));
VATSum(SaleCreditNoteDetail creditNoteDetail) += VATSum(creditNoteDetail(creditNoteDetail));
invoiceSum(SaleCreditNoteDetail creditNoteDetail) += invoiceSum(creditNoteDetail(creditNoteDetail));

edit(SaleCreditNote creditNote) += ACTION EXEC edit(creditNote(creditNote));

//Sale.showPackCreditNote(creditNote) +=  showPackCreditNote(creditNoteSaleCreditNote(creditNote));
//Sale.barcodePackCreditNoteDetail(creditNoteDetail) += barcodePackCreditNoteDetail(creditNoteDetailSaleCreditNoteDetail(creditNoteDetail));
//Sale.amountPackCreditNoteDetail(creditNoteDetail) +=  amountPackCreditNoteDetail(creditNoteDetailSaleCreditNoteDetail(creditNoteDetail));
//Sale.packQuantityCreditNoteDetail(creditNoteDetail) +=  packQuantityCreditNoteDetail(creditNoteDetailSaleCreditNoteDetail(creditNoteDetail));

creditNoteDetail(SaleCreditNoteDetail creditNoteDetail) += creditNoteDetail(creditNoteDetail);

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

//// -- Операция
//createSaleCreditNoteOperation 'Накладная (закупка) ' = DATA BOOLEAN (Operation);
//
//EXTEND FORM operation
//    PROPERTIES(o) createSaleCreditNoteOperation
//;
//DESIGN operation {
//    saleContainer {
//        ADD PROPERTY(createSaleCreditNoteOperation) BEFORE PROPERTY(nameSaleOperationOperation);
//    }
//}
//
//@deriveDocumentOperationProperty(UserCreditNote, createSaleCreditNote){
//    createSaleCreditNoteUserCreditNote (o) <- createSaleCreditNoteOperation(operationUserCreditNote(o))
//        WHEN CHANGED(operationUserCreditNote(o));
//};
//
//@defineDocumentInterfaceOperationPrefix (creditNote, sale, Sale, ' (закупка)'){
//    @defineDocumentOperationInterfaceHeaderPrefix(creditNote, sale, Sale, ' (закупка)'){
//        @defineDocumentOperationAbstractHeaderPrefix(creditNote, sale, Sale, ' (закупка)'){
//            saleOperationCreditNote = ABSTRACT Sale.Operation (CreditNote) PERSISTENT;
//            nameSaleOperationCreditNote 'Операция (закупка)' = Sale.nameOperation(saleOperationCreditNote(creditNote));
//            idSaleOperationCreditNote 'ID операции (закупка)' = Sale.idOperation(saleOperationCreditNote(creditNote));
//        };
//        @defineDocumentOperationHeaderPrefix(userCreditNote, sale, Sale, ' (закупка)'){
//            saleOperationUserCreditNote = DATA Sale.Operation (UserCreditNote);
//            nameSaleOperationUserCreditNote 'Операция (закупка)' = Sale.nameOperation(saleOperationUserCreditNote(userCreditNote));
//            idSaleOperationUserCreditNote 'ID операции (закупка)' = Sale.idOperation(saleOperationUserCreditNote(userCreditNote));
//        };
//        saleOperationCreditNote(creditNote) += saleOperationUserCreditNote(creditNote);
//    };
//    @defineDocumentOperationDetailPrefix(creditNote, sale, Sale, ' (закупка)'){
//        @defineDocumentOperationDetailPrefix(creditNote, creditNoteDetail, sale, Sale, ' (закупка)'){
//            saleOperationCreditNoteDetail (idetail) = saleOperationCreditNote(creditNoteCreditNoteDetail(idetail));
//            nameSaleOperationCreditNoteDetail 'Операция (закупка)' (idetail) = Sale.nameOperation(saleOperationCreditNoteDetail(idetail));
//            idSaleOperationCreditNoteDetail 'ID операции (закупка)' (idetail) = Sale.idOperation(saleOperationCreditNoteDetail(idetail));
//        };
//    };
//    @defineDocumentOperationDetailPrefix(userCreditNote, sale, Sale, ' (закупка)'){
//        @defineDocumentOperationDetailPrefix(userCreditNote, userCreditNoteDetail, sale, Sale, ' (закупка)'){
//            saleOperationUserCreditNoteDetail (idetail) = saleOperationUserCreditNote(userCreditNoteUserCreditNoteDetail(idetail));
//            nameSaleOperationUserCreditNoteDetail 'Операция (закупка)' (idetail) = Sale.nameOperation(saleOperationUserCreditNoteDetail(idetail));
//            idSaleOperationUserCreditNoteDetail 'ID операции (закупка)' (idetail) = Sale.idOperation(saleOperationUserCreditNoteDetail(idetail));
//        };
//    };
//};
//
//// Записываем операцию для закупки по умолчанию из операции
//saleOperationUserCreditNote (creditNote) <- saleOperationOperation(operationUserCreditNote(creditNote))
//    WHEN CHANGED(operationUserCreditNote(creditNote));
//
//Sale.operationCreditNote(creditNote) += saleOperationCreditNote(creditNoteSaleCreditNote(creditNote));
//
//EXTEND FORM userCreditNote
//    PROPERTIES(i) BACKGROUND backgroundSaleCreditNote(i) SHOWIF createSaleCreditNoteUserCreditNote(i) nameSaleOperationUserCreditNote
//
//;
//DESIGN userCreditNote {
//    headerCreateSale {
//        ADD PROPERTY(nameSaleOperationUserCreditNote) AFTER PROPERTY(createSaleCreditNoteUserCreditNote);
//    }
//}

//-- Действие

overFillCreditNote = ACTION ABSTRACT LIST (Sale.UserCreditNote, CreditNote);
overFillCreditNote = ACTION ABSTRACT LIST (Sale.UserCreditNoteDetail, CreditNoteDetail);

moveUserCreditNote 'Акт расхождения (продажа)'(CreditNote creditNote) =  ACTION NEWSESSION{

    FOR ADDOBJ i = Sale.UserCreditNote DO {

//        ASSIGN Sale.agreementUserCreditNote(i) <- agreementCreditNote(creditNote);
//        ASSIGN Sale.priceListTypeUserCreditNote(i) <- priceListTypeCreditNote(creditNote);
        ASSIGN supplier(i) <- supplier(creditNote);
        ASSIGN customer(i) <- customer(creditNote);
        ASSIGN supplierStock(i) <- supplierStock(creditNote);
        ASSIGN customerStock(i) <- customerStock(creditNote);
        ASSIGN number(i) <- number(creditNote);
        ASSIGN series(i) <- series(creditNote);
        ASSIGN note(i) <- note(creditNote);
        ASSIGN currency(i) <- currency(creditNote);
        ASSIGN contractSku(i) <- contractSku(creditNote);
        ASSIGN isCommission(i) <- isCommission(creditNote);
//        ASSIGN Sale.showPackUserCreditNote(i) <- showPackCreditNote(creditNote);
        ASSIGN operation(i) <- operation(creditNote);
        EXEC overFillCreditNote(i, creditNote);

        FOR creditNote(CreditNoteDetail detail)==creditNote ADDOBJ d = Sale.UserCreditNoteDetail DO {

            ASSIGN userCreditNote(d) <- i;

//            ASSIGN Sale.priceListTypeUserCreditNoteDetail(d) <- priceListTypeCreditNoteDetail(detail);
            ASSIGN dataSupplierStock(d) <- dataSupplierStock(detail);
            ASSIGN dataCustomerStock(d) <- dataCustomerStock(detail);

            ASSIGN sku(d) <- sku(detail);
            ASSIGN quantity (d) <- quantity(detail);
            ASSIGN VAT (d) <- VAT(detail);
            ASSIGN price (d) <- price(detail);
//            ASSIGN Sale.creditNotePriceUserCreditNoteDetail (d) <- creditNotePriceCreditNoteDetail(detail);

//            ASSIGN Sale.barcodePackUserCreditNoteDetail (d) <- barcodePackCreditNoteDetail(detail);
//            ASSIGN Sale.amountPackUserCreditNoteDetail (d) <- amountPackCreditNoteDetail(detail);
//            ASSIGN Sale.packQuantityUserCreditNoteDetail (d) <- packQuantityCreditNoteDetail(detail);

            ASSIGN batch(d) <- batch(detail);
            EXEC overFillCreditNote(d,detail);
        }

    FORM Sale.userCreditNote OBJECTS c = i MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
} TOOLBAR;

EXTEND FORM creditNotes
    PROPERTIES(c) moveUserCreditNote
;
DESIGN creditNotes {
    createdContainer{
        MOVE PROPERTY(moveUserCreditNote(c));
    }
}

