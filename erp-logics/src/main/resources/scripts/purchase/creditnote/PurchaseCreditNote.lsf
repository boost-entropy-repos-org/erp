MODULE PurchaseCreditNote;

REQUIRE CreditNote, PurchaseShipment, PurchaseOperation, PurchaseInvoiceContract;

NAMESPACE Purchase;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (закупка)', customerStock);
@defineCreditNotePaymentCondition(' (закупка)');
paymentConditionCreditNote(creditNote) += paymentConditionInvoice(invoiceInvoiceCreditNote(creditNote));
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, company);
@extendFormFilterAccessStock(CreditNote, c, creditNotes, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, customer, company);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, supplier, supplier);


CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isSupplierLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserCreditNote, supplier, company, userCreditNote);

// -- Операция
@defineDocumentOperation(creditNote ,c); 
@defineDocumentOperationRole(userCreditNote);
@defineOperationProperty(createCreditNote, 'Акт расхождения', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

operationCreditNote(creditNote) += operationInvoice(invoiceInvoiceCreditNote(creditNote));

//------------------- Проведение по регистру задолженностей ----------------------- //

@implementContractLedger(, CreditNote, contractSku);
sumContractLedger(contractLedger) += -invoiceSumCreditNoteDetailCreditNote(contractLedger);

@implementContractLedger(a, CreditNote, contractSku);
sumContractALedger(contractALedger) += -invoiceSumCreditNoteDetailCreditNote(contractALedger);

@implementOutContractLedger(CreditNote, contractSku);
sumOutContractLedger(outContractLedger) += invoiceSumCreditNoteDetailCreditNote(outContractLedger);

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD creditNotes;
    }
}