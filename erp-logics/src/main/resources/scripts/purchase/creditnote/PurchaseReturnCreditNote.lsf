MODULE PurchaseReturnCreditNote;

REQUIRE CreditNote, PurchaseReturnShipment, PurchaseCreditNote, PurchaseReturnInvoiceContract;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (закупка-возврат)', customer, customer, supplier, company, PurchaseReturn);
@defineCreditNotePaymentCondition(' (закупка-возврат)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, company);
@extendFormFilterAccessStock(CreditNote, c, creditNotes, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, customer, company);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, supplier, supplier);

@defineCreditNoteBatch(customer, customer);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isSupplierLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserCreditNote, supplier, company, userCreditNote);


// -- Операция
@defineDocumentOperationContainer(creditNote ,c);
@defineDocumentOperationConstraint(creditNote, creditNotes, 'акт расхождения (закупка-возврат)', PurchaseReturn);
@defineDocumentOperationRole(userCreditNote);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customer, userCreditNote);

operationCreditNote(creditNote) += operationInvoice(invoiceInvoiceCreditNote(creditNote));

// ------------------- Проведение по регистру задолженностей ----------------------- //

@implementContractLedger(, CreditNote, contractSku);
sumContractLedger(contractLedger) +=
    IF currencyCreditNote(contractLedger) != currencyContract(contractSkuCreditNote(contractLedger)) THEN 
        NUMERIC[16,2](invoiceSumCreditNoteDetailCreditNote(contractLedger) * 
                      rateOnTypeExchangeCurrencyDate(typeExchangeContract(contractSkuCreditNote(contractLedger)), 
                                                     currencyCreditNote(contractLedger),
                                                     dateCreditNote(contractLedger)))
    ELSE 
        invoiceSumCreditNoteDetailCreditNote(contractLedger);

@implementContractLedger(a, CreditNote, contractSku);
sumContractALedger(contractALedger) +=
    IF currencyCreditNote(contractALedger) != currencyContract(contractSkuCreditNote(contractALedger)) THEN 
        NUMERIC[16,2](invoiceSumCreditNoteDetailCreditNote(contractALedger) * 
                      rateOnTypeExchangeCurrencyDate(typeExchangeContract(contractSkuCreditNote(contractALedger)), 
                                                     currencyCreditNote(contractALedger),
                                                     dateCreditNote(contractALedger)))
    ELSE 
        invoiceSumCreditNoteDetailCreditNote(contractALedger);

@implementInContractLedger(CreditNote, contractSku);
sumInContractLedger(inContractLedger) += 
    IF currencyCreditNote(inContractLedger) != currencyContract(contractSkuCreditNote(inContractLedger)) THEN 
        NUMERIC[16,2](invoiceSumCreditNoteDetailCreditNote(inContractLedger) * 
                      rateOnTypeExchangeCurrencyDate(typeExchangeContract(contractSkuCreditNote(inContractLedger)), 
                                                     currencyCreditNote(inContractLedger),
                                                     dateCreditNote(inContractLedger)))
    ELSE 
        invoiceSumCreditNoteDetailCreditNote(inContractLedger);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
EXTEND FORM userCreditNote

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalanceSkuStock(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySkuUserCreditNoteCustomerStock(ks, c, st) 'F9'

;

EXTEND FORM userCreditNote

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchStock(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityBatchUserCreditNoteCustomerStock(b, c, sto) 'F9'
;

NAVIGATOR {
    purchaseReturnNavigator {
        ADD creditNotes;
    }
}
