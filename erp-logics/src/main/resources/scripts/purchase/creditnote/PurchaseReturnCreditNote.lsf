MODULE PurchaseReturnCreditNote;

REQUIRE CreditNote, PurchaseReturnShipment, PurchaseCreditNote, PurchaseReturnInvoiceContract;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (закупка-возврат)', customerStock);
@defineCreditNotePaymentCondition(' (закупка-возврат)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, company);
@extendFormFilterAccessStock(CreditNote, c, creditNotes, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, customer, company);
@extendFormFilterAccessLegalEntity(CreditNote, c, creditNotes, supplier, supplier);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserCreditNote(userCreditNote) AND NOT isSupplierLegalEntity(supplierUserCreditNote(userCreditNote))
    CHECKED BY supplierUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserCreditNote(userCreditNote) AND NOT isCompanyLegalEntity(customerUserCreditNote(userCreditNote))
    CHECKED BY customerUserCreditNote MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserCreditNote, supplier, company, userCreditNote);


// -- Операция
@defineDocumentOperationContainer(creditNote ,c); 
@defineDocumentOperationRole(userCreditNote);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplierStock, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplierStock, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customerStock, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customerStock, userCreditNote);

operationCreditNote(creditNote) += operationInvoice(invoiceInvoiceCreditNote(creditNote));

// ------------------- Проведение по регистру задолженностей ----------------------- //

@implementContractLedger(, CreditNote, contractSku);
sumContractLedger(contractLedger) += invoiceSumCreditNoteDetailCreditNote(contractLedger);

@implementContractLedger(a, CreditNote, contractSku);
sumContractALedger(contractALedger) += invoiceSumCreditNoteDetailCreditNote(contractALedger);

@implementInContractLedger(CreditNote, contractSku);
sumInContractLedger(inContractLedger) += invoiceSumCreditNoteDetailCreditNote(inContractLedger);

NAVIGATOR {
    purchaseReturnNavigator {
        ADD creditNotes;
    }
}
