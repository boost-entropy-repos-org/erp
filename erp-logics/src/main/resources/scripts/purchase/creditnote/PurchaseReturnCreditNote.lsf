MODULE PurchaseReturnCreditNote;

REQUIRE CreditNote, PurchaseReturnShipment, PurchaseCreditNote, PurchaseReturnInvoiceContract;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (закупка-возврат)', customer, customer, supplier, company, PurchaseReturn);
@defineCreditNotePaymentCondition(' (закупка-возврат)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, company);

@defineCreditNoteBatch(customer, customer);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserCreditNote userCreditNote) AND NOT isSupplier(supplier(userCreditNote))
    CHECKED BY supplier[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserCreditNote userCreditNote) AND NOT isCompany(customer(userCreditNote))
    CHECKED BY customer[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserCreditNote, supplier, userCreditNote);

@defineDocumentLegalEntityStockAccess(UserCreditNote, customer, company, userCreditNote);


// -- Операция
@defineDocumentOperationContainer(creditNote ,c,overName);
@extendFormFilterRoleAccess(creditNote, c, creditNotes);
@defineDocumentOperationConstraint(creditNote, 'акт расхождения (закупка-возврат)', PurchaseReturn);
@defineDocumentOperationRole(userCreditNote);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customer, userCreditNote);

operation(InvoiceCreditNote creditNote) += operation(invoice(creditNote));

// ------------------- Проведение по регистру задолженностей ----------------------- //

@implementContractLedger(, CreditNote, contractSku);
sum[ContractLedger](CreditNote contractLedger) +=
    IF currency(contractLedger) != currency(contractSku(contractLedger)) THEN 
        NUMERIC[16,2](invoiceSumCreditNoteDetail(contractLedger) * 
                      rateOn(typeExchange(contractSku(contractLedger)), 
                                                     currency(contractLedger),
                                                     date(contractLedger)))
    ELSE 
        invoiceSumCreditNoteDetail(contractLedger);

@implementContractLedger(a, CreditNote, contractSku);
sum[ContractALedger](CreditNote contractALedger) +=
    IF currency(contractALedger) != currency(contractSku(contractALedger)) THEN 
        NUMERIC[16,2](invoiceSumCreditNoteDetail(contractALedger) * 
                      rateOn(typeExchange(contractSku(contractALedger)), 
                                                     currency(contractALedger),
                                                     date(contractALedger)))
    ELSE 
        invoiceSumCreditNoteDetail(contractALedger);

@implementInContractLedger(CreditNote, contractSku);
sum[InContractLedger](CreditNote inContractLedger) += 
    IF currency(inContractLedger) != currency(contractSku(inContractLedger)) THEN 
        NUMERIC[16,2](invoiceSumCreditNoteDetail(inContractLedger) * 
                      rateOn(typeExchange(contractSku(inContractLedger)), 
                                                     currency(inContractLedger),
                                                     date(inContractLedger)))
    ELSE 
        invoiceSumCreditNoteDetail(inContractLedger);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
EXTEND FORM userCreditNote

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantityCustomer(ks, c, st) 'F9'

;

EXTEND FORM userCreditNote

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityCustomer(b, c, sto) 'F9'
;

NAVIGATOR {
    purchaseReturnNavigator {
        ADD creditNotes;
    }
}
