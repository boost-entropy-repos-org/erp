MODULE PurchaseOperation;

REQUIRE Operation, PriceListType, Purchase;

NAMESPACE Purchase;

@defineOperation('(закупка)');
nameReturn 'Наименование (возврат)' = DATA VARISTRING[100](Operation);
nameReturn(Operation operation) += nameReturn(operation);
EXTEND FORM operation 
    PROPERTIES(o)  nameReturn AFTER name(o)
;
DESIGN operation {
    propertyContainer{
        MOVE PROPERTY(nameReturn(o)) AFTER PROPERTY(name(o));
    }
}
overName = OVERRIDE name(Operation o), nameReturn(o);

@defineOperationPriceListType();

TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);

@defineOperationLegalEntity(supplier, , s, 'Поставщики');
@defineCountLegalEntityOperation(supplier, seller);

@defineOperationLegalEntity(customer, , c, 'Покупатели');
@defineCountLegalEntityOperation(customer, company);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);

@defineOperationStock(supplier, sts, 'Склады поставщика');
@defineCountStockOperation(supplier, supplier, seller);

@defineOperationStock(customer, stc, 'Склады покупателя');
@defineCountStockOperation(customer, company, buyer);

EXTEND FORM operation
    FILTERS countSupplierStock(stsg),
            isSupplier(sts),
            countCompanyStock(stcg),
            isCompany(stc),
            inSupplier(legalEntity(sts), o),
            inCustomer(legalEntity(stc), o),
            isSeller(legalEntity(sts)),
            isBuyer(legalEntity(stc))
;

@defineOperationRole();
@extendFormFilterRole(o, dialogOperations);
//@extendFormFilterRole(o, operations);     //-- пока не нужен

countOperationSupplierCustomerSupplierCustomer 'Кол-во операций' (s, c, ss, cs, u) = 
    GROUP SUM 1 IF inSupplier(LegalEntity s, Operation o) AND inSupplier(Stock ss, o)
               AND inCustomer(LegalEntity c, o) AND inCustomer(Stock cs, o) 
               AND in(User u, o) BY s, c, ss, cs, u COMPLEX;   

defaultOperationSupplierCustomerSupplierCustomer 'Операция по умолчанию' (s, c, ss, cs, u) = 
    GROUP MAX Operation o IF inSupplier(LegalEntity s, o) AND inSupplier(Stock ss, o)
               AND inCustomer(LegalEntity c, o) AND inCustomer(Stock cs, o) 
               AND in(User u, o) BY s, c, ss, cs, u COMPLEX;   


EXTEND FORM operation
    FILTERS isSeller(s),
            isCompany(c)
;

DESIGN operation {
    tabContainer{
        NEW createContainer {
            caption = 'Производные документы';
            type = CONTAINERV;
        }
        NEW showContainer {
            caption = 'Отображение свойств';
            type = CONTAINERV;
            NEW commonContainer{
                type = CONTAINERV;
            }
            NEW priceContainer{
                type = CONTAINERV;
            }
        }
    }
}

@defineOperationProperty(showPack, 'Упаковка', commonContainer);

@defineOperationProperty(skipPurchaseLedger, 'Не проводить по регистру поступлений', showContainer);

// Запрет на изменение документа другим пользователем

@defineOperationProperty(preventChangesDocument, 'Запрет на изменение документа другим пользователем', showContainer);

defaultPurchaseOperation = DATA Operation();
nameDefaultPurchaseOperation 'Операция (закупка) по умолчанию' = name(defaultPurchaseOperation());

EXTEND FORM options PROPERTIES() nameDefaultPurchaseOperation;
DESIGN options {
    purchase {
        MOVE PROPERTY(nameDefaultPurchaseOperation());
    }
}

NAVIGATOR {
    purchaseMasterData {
        ADD operations;
    }
}

@defineOperationProperty(isContract, 'Должен быть задан договор', commonContainer);
@defineOperationProperty(isPrice, 'Должна быть задана цена', commonContainer);

@defineOperationProperty(isPurchaseBatch, 'Запретить оприходование накладных (закупка) без партий', BOOLEAN, commonContainer);
@defineOperationProperty(isPurchaseReturnBatch, 'Запретить оприходование накладных (закупка-возврат) без партий', BOOLEAN, commonContainer);

@defineOperationProperty(isShipmentPrice, 'Должна быть задана учетная цена', BOOLEAN, commonContainer);

@defineOperationProperty(isCharLength, 'Проверять номер накладной', commonContainer);
@defineOperationProperty(isPurchaseValueVAT, 'Запретить оприходование накладных (закупка) без ставки НДС', BOOLEAN, commonContainer);

@defineOperationProperty(isShipmentDate, 'Создавать накладную по заказу с датой поставки', showContainer); 

@defineOperationProperty(banNegativeQuantityInvoice, 'Запретить ввод отрицательного количества в накладную', showContainer);

@defineOperationProperty(daysBeforeShipmentDate, 'Дней до поставки по умолчанию', INTEGER, createContainer);