MODULE PurchaseAutoOrder;

REQUIRE PurchaseDemand, PurchaseScheduleOrder, Range, PurchaseSeparation;

NAMESPACE Purchase;

@defineGroupDefaultValue(countSoldDays, 'Количество дней для расчета однодневных продаж', INTEGER, skuGroup);

@defineGroupDefaultValue(coeffPromotion, 'Акц. коэфф.', NUMERIC[14,3], skuGroup);
coeffPromotion 'Акц. коэфф.' (Sku s) = coeffPromotion(skuGroup(s));

fromSoldDate (Sku s)= subtract(currentDate() ,countSoldDays(skuGroup(s)));      
toSoldDate (Sku s)= subtract(currentDate(), 1) IF s IS Sku ;   
fromSoldDateMin = GROUP MIN fromSoldDate (Sku s) ;

dateFromPromotion 'Дата начала акции' = DATA DATE (Sku, Stock);
dateToPromotion 'Дата окончания акции' = DATA DATE (Sku, Stock);
averageSoldPromotion 'Продаж в день за акцию' = DATA NUMERIC[14,3] (Sku, Stock);   

insuranceReserve 'Страховой запас' = ABSTRACT NUMERIC[16,5](Sku, UserOrder, Stock);

quantityDaysPromotion 'Кол-во дней' (Sku s, UserOrder o, Stock st) = quantityDays((MIN dateToPromotion(s, st), nextShipmentDate(o)), (MAX date(o), dateFromPromotion(s, st))) IF dateToPromotion(s, st) >= date(o);

planPromotion 'Планируемые продажи' (Sku s, UserOrder o, Stock st) = quantityDaysPromotion(s, o, st) * averageSoldPromotion(s, st);
 
quantityDaysRegular 'Кол-во дней' (Sku s, UserOrder o, Stock st) = (quantityDaysNextShipment(o) (-) quantityDaysPromotion(s, o, st));
planRegular 'Планируемые продажи' (Sku s, UserOrder o, Stock st) = (quantityDaysNextShipment(o) (-) quantityDaysPromotion(s, o, st)) * averageSold(s, st); 

plan 'Планируемые продажи' (Sku s, UserOrder o, Stock st) =
    planPromotion(s, o, st) (+) planRegular(s, o, st);

overCoeffPromotion 'Акционный коэфф.' (Sku s) = 
    OVERRIDE coeffPromotion(s), 1.0 IF s;
    
overQuantitySoldInterval() = ACTION ABSTRACT LIST ();
calcQuantitySoldInterval 'Рассчитать однодневные продажи'() = {

    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](quantitySold (sku, stock, fromSoldDate(sku), toSoldDate(sku)) / countSoldDays(skuGroup(sku)));
    overQuantitySoldInterval();   
    apply();
}



overQuantityPromotionSoldInterval() = ACTION ABSTRACT LIST ();
isPromotion = ABSTRACT CASE BOOLEAN (PriceListDetail);

calcQuantityPromotionSoldInterval 'Рассчитать однодневные продажи (акции)'() = {

    dateFromPromotion(Sku s, Stock st) <- NULL;
    dateFromPromotion(Sku s, Stock st) <- [= GROUP MIN fromDate(PriceListDetail d) IF isPromotion(d) AND in(priceList(d), Stock s) BY sku(d), s](s, st);  

    dateToPromotion(Sku s, Stock st) <- NULL;
    dateToPromotion(Sku s, Stock st) <- [= GROUP MIN toDate(PriceListDetail d) IF isPromotion(d) AND in(priceList(d), Stock s) BY sku(d), s ](s, st) WHERE dateFromPromotion(s, st);

    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, sum(dateToPromotion(sku, stock), 1), subtract(currentDate(), 1))) 
                                                                WHERE dateToPromotion(sku, stock) <= subtract(currentDate(), 6);
    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, subtract(dateFromPromotion(sku, stock), countSoldDays(skuGroup(sku))), subtract(dateFromPromotion(sku, stock), 1))) 
                                                                WHERE dateToPromotion(sku, stock) > subtract(currentDate(), 6);


    averageSoldPromotion(Sku sku, Stock stock) <- NULL;
    averageSoldPromotion(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, dateFromPromotion(sku, stock), MIN dateToPromotion(sku, stock), subtract(currentDate(), 1)))  WHERE dateFromPromotion(sku, stock) < currentDate();
    averageSoldPromotion(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock) * coeffPromotion(sku))
                                                        WHERE dateFromPromotion(sku, stock) >= currentDate();
    overQuantityPromotionSoldInterval();
    apply();
}


FORM soldParams 'Параметры автозаказа'

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDER BY order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT    
    PROPERTIES(sk) countSoldDays, coeffPromotion
;

NAVIGATOR {
    retailRangeNavigator {
        ADD soldParams;        
    }
}

EXTEND FORM userOrder
    PROPERTIES READONLY PANEL TODRAW sts averageSold(ks,st), quantityDaysRegular(ks, o, st), planRegular(ks,o,st), insuranceReserve(ks,o,st) 
    PROPERTIES READONLY PANEL SHOWIF dateFromPromotion(ks, st) dateFromPromotion(ks, st), dateToPromotion(ks, st), overCoeffPromotion(ks), 
                                     averageSoldPromotion(ks, st), quantityDaysPromotion(ks, o, st), planPromotion(ks, o, st) 
;
DESIGN userOrder {
    sts.panel {
        caption = 'Кол-во к заказу';
        type = CONTAINERH;
        NEW sales {
            caption = 'Продажи';
            MOVE PROPERTY (averageSold(ks, st));
            MOVE PROPERTY (quantityDaysRegular(ks, o, st));
            MOVE PROPERTY (planRegular(ks, o, st));
        }

        NEW buffer {
            caption = 'Буферы';
            MOVE PROPERTY (insuranceReserve(ks, o, st));
        }
        NEW promotion {
            caption = 'Акции';
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY (dateFromPromotion(ks, st));
            MOVE PROPERTY (dateToPromotion(ks, st));
            MOVE PROPERTY (overCoeffPromotion(ks));
            MOVE PROPERTY (averageSoldPromotion(ks, st));
            MOVE PROPERTY (quantityDaysPromotion(ks, o, st));
            MOVE PROPERTY (planPromotion(ks, o, st));
        }
    }
}

createUserOrderAuto 'Автозаказ'  = DATA BOOLEAN (ScheduleOrder) IN documentPrm;
createUserOrderAuto 'Автозаказ' (ScheduleOrderDetail d) = createUserOrderAuto(scheduleOrder(d)); 

EXTEND FORM scheduleOrder
    PROPERTIES(s) createUserOrderAuto   
;
DESIGN scheduleOrder {
    main {
        MOVE s.documentPrm AFTER header { 
            type = CONTAINERH;
        }    
    }   

}

EXTEND FORM scheduleOrderDashboard
    PROPERTIES(ss) READONLY createUserOrderAuto
;

EXTEND FORM scheduleOrderDetails
    PROPERTIES(sd) READONLY createUserOrderAuto
;

isAuto 'Автозаказ' = ABSTRACT BOOLEAN (Order);
isAuto 'Автозаказ' = DATA BOOLEAN (UserOrder);
isAuto[Order](UserOrder o) += isAuto(o);

EXTEND FORM orders
    PROPERTIES READONLY isAuto(o)
    FILTERGROUP auto
        FILTER 'Автозаказ' isAuto(o) 'F7'     
;

backgroundSku(Order o) += WHEN isAuto(o) THEN RGB(140,225,255); 

autoOrderNumerator 'Нумератор для автозаказа' = DATA Numerator ();
nameAutoOrderNumerator 'Нумератор для автозаказа' () = name(autoOrderNumerator());

EXTEND FORM options PROPERTIES() nameAutoOrderNumerator;
DESIGN options { orders { MOVE PROPERTY(nameAutoOrderNumerator()); } }


