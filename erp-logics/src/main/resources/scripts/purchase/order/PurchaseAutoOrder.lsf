MODULE PurchaseAutoOrder;

REQUIRE PurchaseDemand, PurchaseScheduleOrder, PriceList, PurchaseSeparation;

NAMESPACE Purchase;

@defineGroupDefaultValue(countSoldDays, 'Количество дней для расчета однодневных продаж', INTEGER, skuGroup);

@defineGroupDefaultValue(coeffPromotion, 'Акц. коэфф.', NUMERIC[14,3], skuGroup);
coeffPromotion 'Акц. коэфф.' (Sku s) = coeffPromotion(skuGroup(s));

fromSoldDate (Sku s)= subtract(currentDate() ,countSoldDays(skuGroup(s)));      
toSoldDate (Sku s)= subtract(currentDate(), 1) IF s IS Sku ;   

dateFromPromotion 'Дата начала акции' = DATA DATE (Sku, Stock);
dateToPromotion 'Дата окончания акции' = DATA DATE (Sku, Stock);
averageSoldPromotion 'Продаж в день за акцию' = DATA NUMERIC[14,3] (Sku, Stock);   

insuranceReserve 'Страховой запас' = ABSTRACT NUMERIC[16,5](Sku, UserOrder);

quantityDaysPromotion 'Кол-во дней' (Sku s, UserOrder o) = quantityDays((MIN dateToPromotion(s, customerStock(o)), nextShipmentDate(o)), (MAX date(o), dateFromPromotion(s, customerStock(o)))) IF dateToPromotion(s, customerStock(o)) >= date(o);

planPromotion 'Планируемые продажи' (Sku s, UserOrder o) = quantityDaysPromotion(s, o) * averageSoldPromotion(s, customerStock(o));
 
quantityDaysRegular 'Кол-во дней' (Sku s, UserOrder o) = (quantityDaysNextShipment(o) (-) quantityDaysPromotion(s, o));
planRegular 'Планируемые продажи' (Sku s, UserOrder o) = (quantityDaysNextShipment(o) (-) quantityDaysPromotion(s, o)) * averageSold(s, customerStock(o)); 

plan 'Планируемые продажи' (Sku s, UserOrder o) =
    planPromotion(s, o) (+) planRegular(s, o);

@defineGroupDefaultValue(seasonalityCoeff, 'Коэфф. сезонности (упр.)', NUMERIC[14,3], skuGroup);
overSeasonalityCoeff 'Коэфф. сезонности (упр.)' (SkuGroup g) = OVERRIDE seasonalityCoeff(g), 0.0 IF g IS SkuGroup;

coeffSeason 'Сезонный коэффициент (расч.)' = DATA NUMERIC[16,5] (SkuGroup);

coeffSeason 'Коэффициент сезонности' (Sku s) = 
    1.0 (+) (coeffSeason(skuGroup(s)) -1.0) * overSeasonalityCoeff(skuGroup(s));

@defineGroupDefaultValue(countSeason, 'Количество дней для расчета сезонного коэффициента продаж', INTEGER, skuGroup);

dispersionSold 'Дисперсия однодневных продаж' = DATA NUMERIC[14,3] (Sku, Stock);  

@defineGroupDefaultValue(safetyCoeff, 'Z-оценка (упр.)', NUMERIC[14,3], skuGroup);

zScore 'Z-оценка' (Sku sk) = safetyCoeff(skuGroup(sk));


//рассчет значений
lastYearCurrent = DATE(sumYear(currentDate(),-1));

calcQuantitySoldInterval 'Рассчитать однодневные продажи'() = {
    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](quantitySold (sku, stock, fromSoldDate(sku), toSoldDate(sku)) / countSoldDays(skuGroup(sku)));
    APPLY;

    coeffSeason(SkuGroup sk) <- max (min([ = X/Y]([ = GROUP SUM sumSold(Sku s, Stock st, lastYearCurrent(), sum(lastYearCurrent(), countSeason(skuGroup(s))-1)) IF isCompany(st) BY skuGroup(s)](sk), 
                                         [ = GROUP SUM sumSold(Sku s, Stock st, subtract(lastYearCurrent(), countSeason(skuGroup(s))), subtract(lastYearCurrent(),1)) IF isCompany(st) BY skuGroup(s)](sk)), 5), 0.2); 
                                             
    APPLY;
    
    dispersionSold(Sku sku, Stock stock) <- sqrt([ = GROUP SUM sqr((OVERRIDE quantitySold(Sku sku, Stock stock, DATE date), 0.0 IF sku IS Sku AND stock IS Stock AND date IS DATE) -  averageSold(sku, stock)) 
                                                            IF iterate(date, fromSoldDate(sku), toSoldDate(sku)) BY sku, stock](sku, stock) / countSoldDays(skuGroup(sku)));
    APPLY;   
}


isPromotion = ABSTRACT CASE BOOLEAN (PriceListDetail);

calcQuantityPromotionSoldInterval 'Рассчитать однодневные продажи (акции)'() = {

    dateFromPromotion(Sku s, Stock st) <- NULL;
    dateFromPromotion(Sku s, Stock st) <- [= GROUP MIN fromDate(PriceListDetail d) IF isPromotion(d) AND toDate(d) >= subtract(currentDate(), countSoldDays(skuGroup(sku(d)))) AND in(priceList(d), Stock s) BY sku(d), s](s, st);  

    dateToPromotion(Sku s, Stock st) <- NULL;
    dateToPromotion(Sku s, Stock st) <- [= GROUP MIN toDate(PriceListDetail d) IF isPromotion(d) AND toDate(d) >= subtract(currentDate(), countSoldDays(skuGroup(sku(d)))) AND in(priceList(d), Stock s) BY sku(d), s ](s, st) WHERE dateFromPromotion(s, st);

    APPLY;

    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, sum(dateToPromotion(sku, stock), 1), subtract(currentDate(), 1))) 
                                                                WHERE dateToPromotion(sku, stock) <= subtract(currentDate(), 6);
    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, subtract(dateFromPromotion(sku, stock), countSoldDays(skuGroup(sku))), subtract(dateFromPromotion(sku, stock), 1))) 
                                                                WHERE dateToPromotion(sku, stock) > subtract(currentDate(), 6);


    averageSoldPromotion(Sku sku, Stock stock) <- NULL;
    averageSoldPromotion(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, dateFromPromotion(sku, stock), MIN dateToPromotion(sku, stock), subtract(currentDate(), 1)))  WHERE dateFromPromotion(sku, stock) < currentDate();
    averageSoldPromotion(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock) * coeffPromotion(sku))
                                                        WHERE dateFromPromotion(sku, stock) >= currentDate();
    APPLY;

    dispersionSold(Sku sku, Stock stock) <- sqrt([ = GROUP SUM NUMERIC[20,6](sqr((OVERRIDE quantitySold(Sku sku, Stock stock, DATE date), 0.0 IF sku IS Sku AND stock IS Stock AND date IS DATE) -  averageSold(sku, stock))) 
                                                            IF iterate(date, sum(dateToPromotion(sku, stock), 1), subtract(currentDate(), 1)) BY sku, stock](sku, stock) / max(daysBetweenDates(subtract(currentDate(), 1), dateToPromotion(sku, stock)),1)) WHERE dateToPromotion(sku, stock) <= subtract(currentDate(), 6);
    APPLY;
    dispersionSold(Sku sku, Stock stock) <- sqrt([ = GROUP SUM NUMERIC[20,6](sqr((OVERRIDE quantitySold(Sku sku, Stock stock, DATE date), 0.0 IF sku IS Sku AND stock IS Stock AND date IS DATE) -  averageSold(sku, stock))) 
                                                            IF iterate(date, subtract(dateFromPromotion(sku, stock), countSoldDays(skuGroup(sku))), subtract(dateFromPromotion(sku, stock), 1)) BY sku, stock](sku, stock) / max(daysBetweenDates(dateFromPromotion(sku, stock), subtract(dateFromPromotion(sku, stock), countSoldDays(skuGroup(sku)))),1)) WHERE dateToPromotion(sku, stock) > subtract(currentDate(), 6);
    APPLY;
}


FORM soldParams 'Параметры автозаказа'

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDER order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT    
    PROPERTIES(sk) countSoldDays, countSeason, overSeasonalityCoeff, safetyCoeff, coeffPromotion   
;

DESIGN soldParams {
    PROPERTY(safetyCoeff(sk)) {
        toolTip = 'Коэффициент, который определяет величину страхового запаса с необходимой вероятностью доступности товара (99% : 2.575, 95% : 1.950, 90% : 1.645, 70% : 1.035, 50% : 0.675)';
    }
}

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD soldParams;        
    }
}

EXTEND FORM userOrder
    PROPERTIES READONLY PANEL TODRAW sts averageSold(ks,st), quantityDaysRegular(ks, o), planRegular(ks,o), insuranceReserve(ks,o), dispersionSold(ks,st), zScore(ks), coeffSeason(ks)
    PROPERTIES READONLY PANEL SHOWIF dateFromPromotion(ks, st) dateFromPromotion(ks, st), dateToPromotion(ks, st), coeffPromotion(ks), 
                                     averageSoldPromotion(ks, st), quantityDaysPromotion(ks, o), planPromotion(ks, o) 
;
DESIGN userOrder {
    PANEL(sts) {
        caption = 'Кол-во к заказу';
        type = CONTAINERH;
        NEW sales {
            caption = 'Продажи';
            MOVE PROPERTY (averageSold(ks, st));
            MOVE PROPERTY (quantityDaysRegular(ks, o));
            MOVE PROPERTY (planRegular(ks, o));
        }
        NEW insurance {
            caption = 'Расчетный запас';
            MOVE PROPERTY (dispersionSold(ks, st));
            MOVE PROPERTY (zScore(ks));
            MOVE PROPERTY (coeffSeason(ks));            
        }
        NEW buffer {
            caption = 'Буферы';
            MOVE PROPERTY (insuranceReserve(ks, o));
        }
        NEW promotion {
            caption = 'Акции';
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY (dateFromPromotion(ks, st));
            MOVE PROPERTY (dateToPromotion(ks, st));
            MOVE PROPERTY (overCoeffPromotion(ks));
            MOVE PROPERTY (averageSoldPromotion(ks, st));
            MOVE PROPERTY (quantityDaysPromotion(ks, o));
            MOVE PROPERTY (planPromotion(ks, o));
        }
    }
}

createUserOrderAuto 'Автозаказ'  = DATA BOOLEAN (ScheduleOrder) IN documentPrm;
createUserOrderAuto 'Автозаказ' (ScheduleOrderDetail d) = createUserOrderAuto(scheduleOrder(d)); 

EXTEND FORM scheduleOrder
    PROPERTIES(s) createUserOrderAuto   
;
DESIGN scheduleOrder {
    BOX {
        MOVE GROUP(documentPrm,s) AFTER header { 
            type = CONTAINERH;
        }    
    }   

}

EXTEND FORM scheduleOrderDashboard
    PROPERTIES(ss) READONLY createUserOrderAuto
;

EXTEND FORM scheduleOrderDetails
    PROPERTIES(sd) READONLY createUserOrderAuto
;

isAuto 'Автозаказ' = ABSTRACT BOOLEAN (Order);
isAuto 'Автозаказ' = DATA BOOLEAN (UserOrder);
isAuto[Order](UserOrder o) += isAuto(o);

EXTEND FORM orders
    PROPERTIES READONLY isAuto(o)
    FILTERGROUP auto
        FILTER 'Автозаказ' isAuto(o) 'F7'     
;

backgroundSku(Order o) += WHEN isAuto(o) THEN RGB(140,225,255); 

autoOrderNumerator 'Нумератор для автозаказа' = DATA Numerator ();
nameAutoOrderNumerator 'Нумератор для автозаказа' () = name(autoOrderNumerator());

EXTEND FORM options PROPERTIES() nameAutoOrderNumerator;
DESIGN options { orders { MOVE PROPERTY(nameAutoOrderNumerator()); } }

autoQuantity 'Кол-во (автозаказ)' = ABSTRACT NUMERIC[16,5] (OrderDetail) MATERIALIZED;
autoQuantity 'Кол-во (автозаказ)' = DATA NUMERIC[16,5] (UserOrderDetail);

autoQuantity (UserOrderDetail orderDetail) += autoQuantity(orderDetail);
EXTEND FORM userOrder
    PROPERTIES (d) READONLY SHOWIF isAuto(o) autoQuantity BEFORE quantity(d) 
;
EXTEND FORM orders
    PROPERTIES (d) READONLY SHOWIF isAuto(o) autoQuantity BEFORE quantity(d) 
;

banDroppedAutoDetail 'Запрещено удалять строки автозаказа' = DATA BOOLEAN ();
banQuantityAutoDetail 'Запрещено заказывать меньше чем "Кол-во (автозаказ)"' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () banDroppedAutoDetail, banQuantityAutoDetail
;
DESIGN options { 
    orders  { 
        MOVE PROPERTY(banDroppedAutoDetail()); 
        MOVE PROPERTY(banQuantityAutoDetail()); 
    } 
}

CONSTRAINT DROPPED (UserOrderDetail d IS UserOrderDetail) AND banDroppedAutoDetail() AND isAuto(PREV(userOrder(d))) AND PREV(autoQuantity(d)) MESSAGE 'Запрещено удалять строки автозаказа';

CONSTRAINT autoQuantity(UserOrderDetail d) AND banQuantityAutoDetail() AND isAuto(userOrder(d)) AND NOT (quantity(d) >= autoQuantity(d))
    MESSAGE 'Запрещено заказывать меньше чем "Кол-во (автозаказ)"';

