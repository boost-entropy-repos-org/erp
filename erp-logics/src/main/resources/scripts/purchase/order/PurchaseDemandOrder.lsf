MODULE PurchaseDemandOrder;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Barcode,
        PurchaseOrder,
        PurchaseDemand,
        PriceList,Pricing,
        Document,
        Range;

NAMESPACE Purchase;

createDemandUserOrder 'Создать заказ' = ACTION (supplier, stock, priceListType, dateTime, dFrom, dTo) NEWSESSION {
    FOR ADDOBJ o = Purchase.UserOrder DO {
        dateUserOrder(o) <- toDate(dateTime);
        timeUserOrder(o) <- toTime(dateTime);

        supplierUserOrder(o) <- supplier;
        supplierStockUserOrder(o) <- defaultSupplierStockEmployeeLegalEntity(currentUser(), supplier)
            IF countAccessSupplierStockEmployeeLegalEntity (currentUser(), supplier) == 1;
        customerUserOrder(o) <- legalEntityStock(stock);
        customerStockUserOrder(o) <- stock;

        IF countOperationSupplierCustomerSupplierStockCustomerStockUser(supplierUserOrder(o), customerUserOrder(o), supplierStockUserOrder(o), customerStockUserOrder(o), currentUser()) == 1 THEN 
            operationUserOrder(o) <- defaultOperationSupplierCustomerSupplierStockCustomerStockUser(supplierUserOrder(o), customerUserOrder(o), supplierStockUserOrder(o), customerStockUserOrder(o), currentUser());
        
        priceListTypeUserOrder(o) <- priceListType;
        
        dateFromSoldPeriodUserOrder(o) <- dFrom;
        dateToSoldPeriodUserOrder (o) <- dTo;

        fillRecommendedQuantityStockUserOrder(o);
//        FOR priceALedgerPriceListTypeSkuStockCompanyDateTime(priceListType, sku, stock, supplier, dateTime)
//            AND recommendedQuantitySkuStockUserOrder (sku, stock, o)
//            ADDOBJ d = UserOrderDetail DO {
//                userOrderUserOrderDetail(d) <- o;
//                skuUserOrderDetail(d) <- sku;
//                quantityUserOrderDetail (d) <- recommendedQuantitySkuStockUserOrder (sku, stock, o);
//        }

        FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
    }
}

recQuantityDemandOrderSkuStockDateTimeDateDate  (sku, stock, dateTime, dFrom, dTo) =    purchaseReserveStockSkuDate(stock, sku, DATE(dateTime AS DATETIME)) (+) 
                                                                            quantitySoldSkuStockDateFromTo(sku, stock, dFrom, dTo) (-)
                                                                            currentReservePurchaseSkuStock(sku, stock) (-) 
                                                                           (currentBalanceSkuStock(sku, stock) IF currentBalanceSkuStock(sku, stock) > 0.0) ; 

recommendedQuantityDemandOrderSkuStockDateTimeDateDate 'Рекомендуемое к закупке кол-во' (sku, stock, dateTime, dFrom, dTo) = (recQuantityDemandOrderSkuStockDateTimeDateDate(sku, stock, dateTime, dFrom, dTo)) IF recQuantityDemandOrderSkuStockDateTimeDateDate(sku, stock, dateTime, dFrom, dTo) > 0;

numberSkuPurchaseSupplier 'Кол-во товаров' = DATA LOCAL INTEGER (LegalEntity);
recalculateNumberSkuPurchaseSupplier 'Рассчитать потребность' = ACTION (stock, priceListType, int, dateTime) {
    numberSkuPurchaseSupplier(supplier) <- numberSkuPurchaseReserveSupplierStockPriceListTypeIntegerDateTime(supplier, stock, priceListType, int, dateTime);
} TOOLBAR;

FORM demandOrder 'Заказы по потребностям'
    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES valDt = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES (st) SELECTOR nameStock
    FILTERS isCompanyStock(st)

    OBJECTS p = PriceListType FIXED PANEL
    PROPERTIES (p) SELECTOR namePriceListType
    
    OBJECTS i = INTEGER FIXED PANEL 
    PROPERTIES valI = OBJVALUE (i)
    
    OBJECTS dFrom = DATE FIXED PANEL, dTo = DATE FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo)

    OBJECTS l = LegalEntity
    PROPERTIES(l) READONLY nameLegalEntity
    PROPERTIES createDemandUserOrder(l, st, p, dt, dFrom, dTo) FORCE PANEL TODRAW l TOOLBAR
    ORDER BY nameLegalEntity(l)
    FILTERS isSupplierLegalEntity(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' activeLegalEntity(l) 'shift F10' DEFAULT
    PROPERTIES numberSkuPurchaseSupplier(l)
    PROPERTIES recalculateNumberSkuPurchaseSupplier(st, p, i, dt) TODRAW l
    FILTERGROUP filtersLegalEntity
        FILTER 'Необходим заказ' numberSkuPurchaseSupplier(l) > 0 'F10'

    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES orderSkuGroup(sk) READONLY, skuTreeName = nameSkuGroup(sk) READONLY
    ORDER BY orderSkuGroup(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES READONLY idBarcodeSku(s), nameSku(s), shortNameUOMSku(s), amountPackSku(s)
    ORDER BY nameSku(s)
    FILTERS isParentSkuGroupSku(sk, s)

    PROPERTIES READONLY overPurchaseReserveStockSkuDateTime(st, s, dt), averageSoldSkuStock(s, st), quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo), currentBalanceSkuStock(s, st), currentReserveSkuStock(s, st),
        diffPurchaseReserveStockSkuIntegerDateTime(st, s, i, dt), recommendedQuantityDemandOrderSkuStockDateTimeDateDate(s, st, dt, dFrom, dTo), nameCompanyALedgerPriceListTypeSkuStockDateTime(p, s, st, dt),
        priceALedgerPriceListTypeSkuStockDateTime(p, s, st, dt), retailPricingPriceASkuStockDateTime(s, st, dt),dateTimeLastOrderBatchSkuStock(s,st), dateTimeLastMovedSkuStock(s, st) 

    FILTERGROUP filterActive
        FILTER 'Активные' activeSku(s) DEFAULT 
    
    FILTERGROUP filteInRange
       FILTER 'В ассортименте' countRangeSkuDepartmentStoreDate(s, st, DATE(dt))

    FILTERGROUP filterdiff
        FILTER 'С потребностью' calcDiffPurchaseReserveStockSkuIntegerDateTime(st, s, i, dt) > 0 
        FILTER 'С рекомендацией' recommendedQuantityDemandOrderSkuStockDateTimeDateDate(s, st, dt, dFrom, dTo)
        FILTER 'С остатком' currentBalanceSkuStock(s, st)
        FILTER 'С продажами' quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo)
        FILTER 'С остатком или продажами' currentBalanceSkuStock(s, st) OR quantitySoldSkuStockDateFromTo(s, st, dFrom, dTo) DEFAULT

    FILTERGROUP filterSupplier
        FILTER 'По поставщику' priceALedgerPriceListTypeSkuStockCompanyDateTime(p, s, st, l, dt)
                                       //companyALedgerPriceListTypeSkuStockDateTime(p, s, st, dt) == l
        
    OBJECTS o = Order
    PROPERTIES (o) READONLY isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder,
                            nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder,
                            countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                            VATSumOrderDetailOrder, invoiceSumOrderDetailOrder, shipmentDateOrder, shipmentTimeOrder, 
                            closeDateOrder, noteOrder            
    PROPERTIES ()  addUserOrder TODRAW o
    PROPERTIES (o) editOrder SHOWIF isOpenedOrder(o)
    PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF overShowDeleteOrder(o)  
    FILTERS  customerStockOrder(o) ==st
//             supplierOrder(o) == l
             
    FILTERGROUP dateFilter
        FILTER 'Заказы на дату' dateOrder(o) == toDate(dt) 'F9' DEFAULT
;

// Проставляем вид цены по умолчанию
defaultDemandOrderPriceListType = DATA PriceListType();
nameDefaultDemandOrderPriceListType 'Вид цены для заказов по потребностям' = namePriceListType(defaultDemandOrderPriceListType());
EXTEND FORM options
    PROPERTIES() nameDefaultDemandOrderPriceListType
;
DESIGN options {
    purchase {
        MOVE PROPERTY(nameDefaultDemandOrderPriceListType());
    }
}

seekDefaultDemandOrderPriceListType = ACTION SEEK demandOrder.p defaultDemandOrderPriceListType();
EXTEND FORM demandOrder
    EVENTS ON INIT seekDefaultDemandOrderPriceListType()
;

DESIGN demandOrder {
    main {
        NEW mainPane {
            fill = 1;
            type = SPLITV;
            NEW header {
                fill = 1;
                type = SPLITH;
                
                NEW left {
                    fill = 1;
                    type = CONTAINERV;
                    MOVE dt.box;
                    MOVE st.box;
                    MOVE p.box;
                    MOVE i.box{caption = 'Количество дней до поставки';};
                    NEW period{
                        caption = 'Период для реализации';                   
                        type = CONTAINERH;
                        MOVE PROPERTY (valFrom);
                        MOVE PROPERTY (valTo);
                    }
                }                   
                MOVE l.box{fill = 2;}
            }            
            
            NEW colum {
                fill = 3;
                type = TABBED;
                NEW column1 {
                    caption = 'Товары';                   
                    type = SPLITH;
                    MOVE skuTree.tree.box;
                    MOVE s.box { fill = 3; }
                }
                MOVE o.box {
                    caption = 'Заказы';
                }
            }            
        }
        MOVE functions.box;
    }
}

@extendFormFilterRoleAccess(order, o, demandOrder); 

@extendFormFilterStockAccess(st, demandOrder);
@extendFormFilterLegalEntityAccess(l, demandOrder, supplier);

NAVIGATOR {
    purchaseDashboardNavigator {
        ADD demandOrder;
    }
}

DESIGN demandOrder {
        PROPERTY(amountPackSku(s)) { background = #FFBC02;}
        PROPERTY(overPurchaseReserveStockSkuDateTime(st, s, dt)) { background = #FFEEEE; }
        PROPERTY(currentBalanceSkuStock(s, st)) { background = #F4FFBD; }
        PROPERTY(diffPurchaseReserveStockSkuIntegerDateTime(st, s, i, dt)) { background = #D4FFD4; }
        PROPERTY(recommendedQuantityDemandOrderSkuStockDateTimeDateDate(s, st, dt, dFrom, dTo)) { background = #BDE3FF; }
}

EXTEND FORM demandOrder
    FILTERGROUP myOrders
        FILTER 'Мои' createdUserOrder(o) == currentUser() 'F7' DEFAULT
;