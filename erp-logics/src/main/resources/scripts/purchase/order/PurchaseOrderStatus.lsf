MODULE PurchaseOrderStatus;

REQUIRE PurchaseOrder, OrderPrint, PurchaseShipment;

NAMESPACE Purchase;

//--------------- Статус заказа ---------------//

@defineDocumentInterfaceDetailQuantityPrefix (order, original, ' (предзаказ)');
CONSTRAINT CHANGED(originalQuantity(OrderDetail detail)) AND negativeValueOrders() AND originalQuantity(detail) < 0
    MESSAGE 'Количество (предзаказ) в строке заказа должно быть не отрицательным';

//-- Отправлен

isSent 'Отправлен' (o) = ABSTRACT BOOLEAN(Order) PERSISTENT;
isSent 'Отправлен' (o) = DATA BOOLEAN (UserOrder);
isSent(UserOrder o) += isSent(o);  

isSent 'Отправлен' (OrderDetail d) = isSent(order(d));
isSent 'Отправлен' (UserOrderDetail d) = isSent(userOrder(d));

sentDateTime 'Дата отправления' (o) = ABSTRACT DATETIME (Order) PERSISTENT;
sentDateTime 'Дата отправления' (o) = DATA DATETIME (UserOrder);
sentDateTime(UserOrder o) += sentDateTime(o); 

//-- Подтвержден
isConfirmed 'Подтвержден' (o) = ABSTRACT BOOLEAN(Order) PERSISTENT;
isConfirmed 'Подтвержден' (o) = DATA BOOLEAN (UserOrder);
isConfirmed(UserOrder o) += isConfirmed(o);  

notConfirmed 'Не подтвержден' (UserOrder o) = o IS UserOrder AND NOT isConfirmed(o) PERSISTENT;

isConfirmed 'Подтвержден' (OrderDetail d) = isConfirmed(order(d));
isConfirmed 'Подтвержден' (UserOrderDetail d) = isConfirmed(userOrder(d));

//-- Отменен
isRejected 'Отменен' (o) = ABSTRACT BOOLEAN(Order);
isRejected 'Отменен' (o) = DATA BOOLEAN (UserOrder);
isRejected(UserOrder o) += isRejected(o);  

isRejected 'Отменен' (OrderDetail d) = isRejected(order(d));
isRejected 'Отменен' (UserOrderDetail d) = isRejected(userOrder(d));

status 'Статус заказа' = ABSTRACT CASE OVERRIDE FIRST VARISTRING[20] (Order);
calcStatus 'Статус заказа' = CASE
    WHEN isClosed(Order o) THEN 'Закрыт'
    WHEN shippedOrderDetail(o) THEN 'Принят'
    WHEN invoicedOrderDetail (o) THEN 'В приемке'
    WHEN isPosted(o) THEN 'В работе'
    WHEN isRejected(o) THEN 'Отменен'
    WHEN isConfirmed(o) THEN 'Подтвержден'
    WHEN isSent(o) THEN 'Отправлен'
    WHEN o IS Order THEN 'Создан' 
;
status(Order o) += WHEN o IS Order THEN calcStatus(o);

backgroundStatus = ABSTRACT CASE COLOR (Order);
backgroundStatus(Purchase.Order o) += WHEN isRejected(o) THEN RGB (255,128,128);
backgroundStatus(Purchase.Order o) += WHEN isPosted(o) THEN RGB(212,255,212);

originalQuantity(UserOrderDetail d) <- quantity(d)
    WHEN CHANGED (quantity(d)) IF NOT (isConfirmed(d) OR isSent(d));

backgroundOriginalQuantity 'Цвет' (OrderDetail d) = RGB(255,0,0) IF quantity(d) != originalQuantity(d);      

EXTEND FORM userOrder
    PROPERTIES (o) isSent, isConfirmed
    PROPERTIES (d) BACKGROUND backgroundOriginalQuantity(d) originalQuantity BEFORE quantity(d) SHOWIF isConfirmed(o)
;
DESIGN userOrder {
    first {
        MOVE PROPERTY (isConfirmed(o)) BEFORE PROPERTY(isPosted(o));
        MOVE PROPERTY (isSent(o)) BEFORE PROPERTY(isConfirmed(o));    
    }
}

EXTEND FORM orders
    PROPERTIES (o) READONLY  BEFORE isPosted(o) isSent, isConfirmed, isRejected
    PROPERTIES (o) READONLY  AFTER isPosted(o) status BACKGROUND backgroundStatus(o)
    PROPERTIES (d) READONLY BACKGROUND backgroundOriginalQuantity(d) originalQuantity BEFORE quantity(d) SHOWIF isConfirmed(o)
;

emailNameSku = ABSTRACT VARISTRING[255] (OrderDetail) PERSISTENT;

fromEmailOrders 'E-mail, с которой идет отправка заказов поставщику' = DATA VARSTRING[300] () MINCHARWIDTH 30 PREFCHARWIDTH 50; 
messageEmailOrders 'Предупреждающая надпись в сообщении' = DATA RICHTEXT ();

EXTEND FORM options
    PROPERTIES() fromEmailOrders, messageEmailOrders
;

DESIGN options{
    orders{
        NEW email{
            caption = 'Почта';
            fill = 1;
            MOVE PROPERTY(fromEmailOrders());
            MOVE PROPERTY(messageEmailOrders()) {
                fill = 1;
                panelCaptionAbove = TRUE;
            }        
        }

    }
}

name = CONCAT '', 'Заказ № ' + seriesNumber(Order order) + ' от '  + date(order)+ ' '+ fullNameCustomer(order);

FORM messageOrders 'Сообщение'
    OBJECTS o = Order PANEL
    PROPERTIES(o) seriesNumber, date, fullNameCustomer
    PROPERTIES () messageEmailOrders TODRAW o
;

calcEmailCustomer 'Отправить заказ поставщику' (Order.Order order) = { EMAIL
    FROM OVERRIDE fromEmailOrders(), email(createdUser(order))
    SUBJECT 'Заказ №' + seriesNumber(order) + ' на '  + shipmentDate(order)+ ' от ' + nameCustomer(order)
    TO (OVERRIDE email(supplier(order)), email(supplierStock(order)))
    INLINE messageOrders OBJECTS o=order
    ATTACH XLSX 
           NAME number(order) + '/' + shipmentDate(order) // без кирилицы должно быть
           printOrderXLS OBJECTS o=order
; }

overEmailList = ABSTRACT VARSTRING[400](Order);

EXTEND CLASS TypeChange{
    email 'Отправлен поставщику'
}

logSendDocumentOrder(Purchase.Order o) = {
	NEW d = DocumentLog {
	    document(d) <- o;
	    typeDocument(d) <- objectClassName(o);
	    numberDocument(d) <- number(o);  
	    seriesDocument(d) <- series(o); 
	    dateDocument(d) <- date(o);
	    typeChange(d) <- TypeChange.email;
	    note(d) <- VARSTRING[255](OVERRIDE email(supplier(o)), email(supplierStock(o)), overEmailList(o));      
	    session(d) <- currentSession();  
	    hostnameComputer(d) <- hostnameCurrentComputer();
	    userLogin(d) <- login(currentUser()); 
	    nameContact(d) <- VARSTRING[100](name[Contact](currentUser()));
	    dateTimeSession(d) <- currentDateTime();  
	    supplierStock(d) <- supplierStock(o);
	    customerStock(d) <- customerStock(o);
	    
	    PRINT printOrderXLS OBJECTS o = o XLSX TO formExportFile;
	    file(d) <- formExportFile();
	}
}

overEmailCustomer = ACTION ABSTRACT LIST (Order.Order);
consumedEmailCustomer = DATA LOCAL BOOLEAN (Order.Order);

emailCustomerSingle 'Отправить заказ поставщику' (Purchase.Order order) = {
	NEWSESSION {
	    
	    overEmailCustomer(order);
	
	    IF NOT consumedEmailCustomer(order) THEN {
	        IF (OVERRIDE email(supplier(order)), email(supplierStock(order)), overEmailList(order)) THEN {
	            isSent(order) <- TRUE;
	            IF NOT disableDocumentLog() THEN logSendDocumentOrder(order);
	            sentDateTime(order) <- currentDateTime();
	            calcEmailCustomer(order);
	            
	        } ELSE MESSAGE 'Заказ №' + number(order) + ': у поставщика не задан e-mail';
	    }
	    
	    apply();
	}
} TOOLBAR;

emailCustomer 'Отправить заказы поставщикам' (Purchase.Order order)= {
    selected(order) <- TRUE;
    
    FOR selected(Order o) DO 
        emailCustomerSingle(o);
        
    selected(Order o) <- NULL;
}

provider 'Доставка' = ABSTRACT CASE OVERRIDE FIRST VARISTRING[20] (Order);
provider(Order o) += WHEN (OVERRIDE email(supplier(o)), email(supplierStock(o)), overEmailList(o)) THEN 'e-mail';

EXTEND FORM orders
    PROPERTIES(o) PANEL  provider READONLY, emailCustomer
; 

DESIGN orders {
    actionContainer {
        NEW emailContainer {
            caption = 'Почта';
                MOVE PROPERTY (provider(o));
                MOVE PROPERTY (emailCustomer(o));
        }
    }
}

orderConfirmation 'Подтверждение заказа поставщиком'  = DATA BOOLEAN (Agreement);

EXTEND FORM agreement 
    PROPERTIES(a) orderConfirmation 
;
DESIGN agreement {
    orderContainer1 {
        MOVE PROPERTY (orderConfirmation(a));
    }    
}

orderConfirmation 'Подтверждение заказа поставщиком' = DATA BOOLEAN (ContractSku);
EXTEND FORM userContractSku
    PROPERTIES(c) orderConfirmation
;

DESIGN userContractSku {
    params {
        MOVE PROPERTY(orderConfirmation(c));
    }
}

orderConfirmation = ABSTRACT BOOLEAN (UserOrder);

disablePosted (UserOrder o) += (orderConfirmation(agreement(o)) OR orderConfirmation(contractSku(o)) OR orderConfirmation(o)) IF NOT isConfirmed(o);

//для планировщика
skipPostConfirmed = ABSTRACT BOOLEAN (UserOrder); 
postConfirmedOrders 'Провести подтвержденные заказы'() = {
    FOR isConfirmed(Purchase.UserOrder o) AND NOT isPosted(o) AND NOT isClosed(o) AND NOT skipPostConfirmed(o) DO NEWSESSION {
        isPosted(o) <- TRUE;
        APPLY;
    }
}