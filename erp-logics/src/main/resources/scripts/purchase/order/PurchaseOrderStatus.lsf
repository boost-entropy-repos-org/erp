MODULE PurchaseOrderStatus;

REQUIRE PurchaseOrder, OrderPrint, PurchaseShipment;

NAMESPACE Purchase;

//--------------- Статус заказа ---------------//

@defineDocumentInterfaceDetailQuantityPrefix (order, original, ' (предзаказ)');
CONSTRAINT CHANGED(originalQuantity(OrderDetail detail)) AND negativeValueOrders() AND originalQuantity(detail) < 0
    MESSAGE 'Количество (предзаказ) в строке заказа должно быть не отрицательным';

//-- Отправлен

isSent 'Отправлен' (o) = ABSTRACT BOOLEAN(Order) PERSISTENT;
isSent 'Отправлен' (o) = DATA BOOLEAN (UserOrder);

sentDateTime 'Дата отправления' (o) = ABSTRACT DATETIME (Order) PERSISTENT;
sentDateTime 'Дата отправления' (o) = DATA DATETIME (UserOrder);

notSent 'Не отправлен' (Order o) = o IS Order AND NOT isSent(o) PERSISTENT;
notSent 'Не отправлен' (UserOrder o) = o IS UserOrder AND NOT isSent(o) PERSISTENT;

isSent(UserOrder o) += isSent(o);  

isSent 'Отправлен' (OrderDetail d) = isSent(order(d));
notSent 'Не отправлен' (OrderDetail d) = d IS OrderDetail AND NOT isSent(d);

isSent 'Отправлен' (UserOrderDetail d) = isSent(userOrder(d));
notSent 'Не отправлен' (UserOrderDetail d) = d IS UserOrderDetail AND NOT isSent(d);  

//-- Подтвержден
isConfirmed 'Подтвержден' (o) = ABSTRACT BOOLEAN(Order) PERSISTENT;
isConfirmed 'Подтвержден' (o) = DATA BOOLEAN (UserOrder);

notConfirmed 'Не подтвержден' (Order o) = o IS Order AND NOT isConfirmed(o) PERSISTENT;
notConfirmed 'Не подтвержден' (UserOrder o) = o IS UserOrder AND NOT isConfirmed(o) PERSISTENT;

isConfirmed(UserOrder o) += isConfirmed(o);  

isConfirmed 'Подтвержден' (OrderDetail d) = isConfirmed(order(d));
notConfirmed 'Не подтвержден' (OrderDetail d) = d IS OrderDetail AND NOT isConfirmed(d);

isConfirmed 'Подтвержден' (UserOrderDetail d) = isConfirmed(userOrder(d));
notConfirmed 'Не подтвержден' (UserOrderDetail d) = d IS UserOrderDetail AND NOT isConfirmed(d);  

//statusOrder 'Статус заказа' = ABSTRACT VALUE OVERRIDE FIRST VARISTRING[20] (Order);
status 'Статус заказа' = ABSTRACT CASE OVERRIDE FIRST VARISTRING[20] (Order);
calcStatus 'Статус заказа' = CASE
    WHEN isClosed(Order o) THEN 'Закрыт'
    WHEN shippedOrderDetail(o) THEN 'Принят'
    WHEN invoicedOrderDetail (o) THEN 'В приемке'
    WHEN isPosted(o) THEN 'В работе'
    WHEN isConfirmed(o) THEN 'Подтвержден'
    WHEN isSent(o) THEN 'Отправлен'
    WHEN o IS Order THEN 'Создан' 
;
status(Order o) += WHEN o IS Order THEN calcStatus(o);

originalQuantity(UserOrderDetail d) <- quantity(d)
    WHEN CHANGED (quantity(d)) IF NOT (isConfirmed(d) OR isSent(d));

backgroundOriginalQuantity 'Цвет' (OrderDetail d) = RGB(255,0,0) IF quantity(d) != originalQuantity(d);      

EXTEND FORM userOrder
    PROPERTIES (o) isSent, isConfirmed
    PROPERTIES (d) BACKGROUND backgroundOriginalQuantity(d) originalQuantity BEFORE quantity(d) SHOWIF isConfirmed(o)
;
DESIGN userOrder {
    first {
        MOVE PROPERTY (isConfirmed(o)) BEFORE PROPERTY(isPosted(o));
        MOVE PROPERTY (isSent(o)) BEFORE PROPERTY(isConfirmed(o));    
    }
}

EXTEND FORM orders
    PROPERTIES (o) READONLY  BEFORE isPosted(o) isSent, isConfirmed
    PROPERTIES (o) READONLY  AFTER isPosted(o) status
    PROPERTIES (d) READONLY BACKGROUND backgroundOriginalQuantity(d) originalQuantity BEFORE quantity(d) SHOWIF isConfirmed(o)
;

emailNameSku = ABSTRACT VARISTRING[255] (OrderDetail) PERSISTENT;

fromEmailOrders 'E-mail, с которой идет отправка заказов поставщику' = DATA VARSTRING[300] () MINCHARWIDTH 30 PREFCHARWIDTH 50; 
messageEmailOrders 'Предупреждающая надпись в сообщении' = DATA RICHTEXT ();

EXTEND FORM options
    PROPERTIES() fromEmailOrders, messageEmailOrders
;

DESIGN options{
    orders{
        NEW email{
            caption = 'Почта';
            fill = 1;
            MOVE PROPERTY(fromEmailOrders());
            MOVE PROPERTY(messageEmailOrders()) {
                fill = 1;
                panelCaptionAbove = TRUE;
            }        
        }

    }
}

name = CONCAT '', 'Заказ № ' + seriesNumber(Order order) + ' от '  + date(order)+ ' '+ fullNameCustomer(order);

FORM messageOrders 'Сообщение'
    OBJECTS o = Order FIXED PANEL
    PROPERTIES(o) seriesNumber, date, fullNameCustomer
    PROPERTIES () messageEmailOrders TODRAW o
;

calcEmailCustomer 'Отправить заказ поставщику' (Order.Order order) = ACTION EMAIL
    FROM OVERRIDE fromEmailOrders(), email(createdUser(order))
    SUBJECT 'Заказ №' + seriesNumber(order) + ' на '  + shipmentDate(order)+ ' от ' + nameCustomer(order)
    TO (OVERRIDE email(supplier(order)), email(supplierStock(order)))
    INLINE messageOrders OBJECTS o=order
    ATTACH XLSX 
           NAME number(order) + '/' + shipmentDate(order) // без кирилицы должно быть
           printOrderXLS OBJECTS o=order
;


overEmailCustomer = ACTION ABSTRACT LIST (Order.Order);
skipCalcEmailCustomer = ABSTRACT BOOLEAN (Order.Order);

overEmailList = ABSTRACT VARSTRING[400](Order.Order);

EXTEND CLASS TypeChange{
    email 'Отправлен поставщику'
}

logSendDocumentOrder(Purchase.Order o) = ACTION FOR ADDOBJ d = DocumentLog DO {
    document(d) <- o;
    typeDocument(d) <- objectClassName(o);
    numberDocument(d) <- number(o);  
    seriesDocument(d) <- series(o); 
    dateDocument(d) <- date(o);
    typeChange(d) <- TypeChange.email;
    note(d) <- VARSTRING[255](OVERRIDE email(supplier(o)), email(supplierStock(o)), overEmailList(o));      
    session(d) <- currentSession();  
    hostnameComputer(d) <- hostnameCurrentComputer();
    userLogin(d) <- login(currentUser()); 
    nameContact(d) <- VARSTRING[100](name[Contact](currentUser()));
    dateTimeSession(d) <- currentDateTime();  
    supplierStock(d) <- supplierStock(o);
    customerStock(d) <- customerStock(o);
    
    FORM printOrderXLS OBJECTS o = o EXPORT XLSX;
    file(d) <- formExportFile();
}
emailCustomerSingle 'Отправить заказ поставщику' (Purchase.Order order)= ACTION {
    IF (OVERRIDE email(supplier(order)), email(supplierStock(order)), overEmailList(order)) THEN {
        NEWSESSION {
            IF isPosted(order) THEN MESSAGE NOWAIT 'Заказ №' +number(order)+ ': заказ в статусе "В работе" или выше, статус изменен не будет ';
            isSent[Order](order) <- TRUE;
            IF NOT disableDocumentLog() THEN logSendDocumentOrder(order);
            sentDateTime[Order](order) <- currentDateTime();
            
            overEmailCustomer(order);            
            
            IF NOT skipCalcEmailCustomer(order) THEN calcEmailCustomer(order);
            apply();
        }

    } ELSE {
        MESSAGE 'Заказ №' +number(order)+ ': у поставщика не задан e-mail';
    }
} TOOLBAR;

emailCustomer 'Отправить заказы поставщикам' (Purchase.Order order)= ACTION {
    selected(order) <- TRUE;
    
    FOR selected(Order o) DO 
        emailCustomerSingle(o);
        
    selected(Order o) <- NULL;
} TOOLBAR;

EXTEND FORM orders
    PROPERTIES(o) emailCustomer  
; 
DESIGN orders {
    actionContainer {
        NEW emailContainer {
            caption = 'Почта';
                MOVE PROPERTY (emailCustomer(o));
        }
    }
}

orderConfirmation 'Подтверждение заказа поставщиком'  = DATA BOOLEAN (Agreement);

EXTEND FORM agreement 
    PROPERTIES(a) orderConfirmation 
;
DESIGN agreement {
    orderContainer1 {
        MOVE PROPERTY (orderConfirmation(a));
    }    
}

orderConfirmation 'Подтверждение заказа поставщиком' = DATA BOOLEAN (ContractSku);
EXTEND FORM userContractSku
    PROPERTIES(c) orderConfirmation
;

DESIGN userContractSku {
    params {
        MOVE PROPERTY(orderConfirmation(c));
    }
}

disablePosted (UserOrder o) += (orderConfirmation(agreement(o)) OR orderConfirmation(contractSku(o))) IF NOT isConfirmed(o);
