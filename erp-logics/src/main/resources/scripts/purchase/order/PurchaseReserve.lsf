MODULE PurchaseReserve;

REQUIRE StockReserve, PurchaseShipment;

NAMESPACE Purchase;

//-----------------------------------------------------------------------------------------------------------//

dateFromSoldPeriodUserOrder 'Дата с' = DATA DATE (UserOrder);
dateToSoldPeriodUserOrder 'Дата по' = DATA DATE (UserOrder);

WHEN SESSION CHANGED (fromShipmentDateUserOrder(o)) AND NOT CHANGED(dateFromSoldPeriodUserOrder(o)) DO {
    dateFromSoldPeriodUserOrder(o) <- fromShipmentDateUserOrder(o);   
}
WHEN SESSION CHANGED (dateUserOrder(o)) AND NOT CHANGED(dateToSoldPeriodUserOrder(o)) DO {
    dateToSoldPeriodUserOrder(o) <- subtractDate(dateUserOrder(o),1);   
}

quantitySoldSkuStockUserOrder 'Продано' (sku, stock, userOrder) = quantitySoldSkuStockDateFromTo(sku, stock, dateFromSoldPeriodUserOrder(userOrder), dateToSoldPeriodUserOrder(userOrder));
overRecQuantitySkuStockDate = ABSTRACT NUMERIC[14,3] (Sku, Stock, DATE);  

negativeBalanceQuantity 'Не учитывать отрицательный остаток при расчете рекомендуемого кол-ва' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES negativeBalanceQuantity()       
;
DESIGN options {
    commons {
        MOVE PROPERTY (negativeBalanceQuantity());
    }    
}

recQuantitySkuStockUserOrder  (sku, stock, userOrder) =    stockReserveStockSkuDate(stock, sku, dateUserOrder(userOrder)) (+) 
                                                                            quantitySoldSkuStockUserOrder(sku, stock, userOrder) (-)
                                                                            currentReservePurchaseSkuStock(sku, stock) (-) 
                                                                            (IF NOT negativeBalanceQuantity() 
                                                                                THEN currentBalanceSkuStock(sku, stock) 
                                                                                ELSE IF currentBalanceSkuStock(sku, stock) <0 THEN 0.0 ELSE currentBalanceSkuStock(sku, stock)) (+)
                                                                            overRecQuantitySkuStockDate(sku, stock, dateUserOrder(userOrder)); 

recommendedQuantitySkuStockUserOrder 'Рекомендуемое к закупке кол-во' (sku, stock, userOrder) = (recQuantitySkuStockUserOrder(sku, stock, userOrder)) IF recQuantitySkuStockUserOrder(sku, stock, userOrder) > 0;
stockReserveSkuStockUserOrder 'Страховой запас (кол-во)' (sku, stock, userOrder) = stockReserveStockSkuDate(stock, sku, dateUserOrder(userOrder));

diffStockReserveStockSkuDate 'Потребность' (stock, sku, date) = (overStockReserveStockSkuDate(stock, sku, date) (-) (currentBalanceSkuStock(sku, stock) IF date IS DATE)) IF overStockReserveStockSkuDate(stock, sku, date)>0;
diffStockReserveStockSkuDateTime 'Потребность' (stock, sku, dateTime) = diffStockReserveStockSkuDate(stock, sku, toDate(dateTime));

overStockReserveStockSkuDateTime 'Страховой запас (кол-во)'(stock, sku, dateTime) = overStockReserveStockSkuDate(stock, sku, toDate(dateTime));

numberSkuStockReserveSupplierStockPriceListTypeDateTime 'Кол-во товаров' (supplier, stock, priceListType, dateTime) =
    GROUP SUM 1 IF (diffStockReserveStockSkuDateTime(stock, sku, dateTime) > 0 AND
                    companyALedgerPriceListTypeSkuStockDateTime(priceListType, sku, stock, dateTime) == supplier)
          BY supplier, stock, priceListType, dateTime;

limitRecommendedQuantitySkuUserOrder = ABSTRACT BOOLEAN (Sku, UserOrder);

overRecommendedQuantityUserOrderDetailSku = ABSTRACT ACTION LIST (UserOrderDetail,Sku); 
fillRecommendedQuantityStockUserOrder 'Заполнить рекомендуемым' = ACTION (userOrder) {
    LOCAL inSku = BOOLEAN (Sku);
    inSku(sku) <- priceALedgerPriceListTypeSkuStockCompanyDateTime(
                              ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(userOrder, sku)),
                              sku, customerStockUserOrder(userOrder), supplierUserOrder(userOrder), dateTimeUserOrder(userOrder))
                          AND NOT limitRecommendedQuantitySkuUserOrder(sku, userOrder); 
    FOR inSku(sku) AND r == recommendedQuantitySkuStockUserOrder (sku, customerStockUserOrder(userOrder), userOrder)
        ADDOBJ d = UserOrderDetail DO {
            userOrderUserOrderDetail(d) <- userOrder;
            skuUserOrderDetail(d) <- sku;
            quantityUserOrderDetail (d) <- IF amountPackSku(sku) > 0 THEN ceil(r, amountPackSku(sku)) ELSE r;
            overRecommendedQuantityUserOrderDetailSku(d,sku);
        }
} TOOLBAR CONFIRM;
                              
EXTEND FORM userOrder
    PROPERTIES(o) TODRAW sts FORCE PANEL dateFromSoldPeriodUserOrder, dateToSoldPeriodUserOrder

    PROPERTIES READONLY AFTER prevCurrentBalanceSkuStock(ks,st) stockReserveSkuStockUserOrder(ks,st,o), quantitySoldSkuStockUserOrder(ks,st,o)
    PROPERTIES READONLY AFTER quantitySkuUserOrderCustomerStock(ks, o, st)
        recommendedQuantitySkuStockUserOrder(ks,st,o) ON SHORTCUT fillRecommendedQuantityStockUserOrder(o)
;

DESIGN userOrder {
    sts.box {           
        NEW filterDate FIRST {
            caption= 'Период для расчета продаж';
            type = CONTAINERH;
            MOVE PROPERTY (dateFromSoldPeriodUserOrder(o));
            MOVE PROPERTY (dateToSoldPeriodUserOrder(o));
      
        }
    }
}