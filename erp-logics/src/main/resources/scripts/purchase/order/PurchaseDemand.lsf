MODULE PurchaseDemand;

REQUIRE PurchaseOrder;

NAMESPACE Purchase;

//-----------------------------------------------------------------------------------------------------------//

@defineOption(defaultDemandOrderPeriod, 'Период (дней) для заказов по потребностям', INTEGER, purchase);

dateFromSoldPeriod 'Дата с' = DATA DATE (UserOrder);
dateToSoldPeriod 'Дата по' = DATA DATE (UserOrder);

fromShipmentDate 'Начало периода' (UserOrder userOrder) = subtract(date(userOrder), (OVERRIDE quantityDaysNextShipment(userOrder), defaultDemandOrderPeriod()));   

WHEN LOCAL CHANGED (fromShipmentDate(UserOrder o)) AND NOT CHANGED(dateFromSoldPeriod(o)) DO {
    dateFromSoldPeriod(o) <- fromShipmentDate(o);   
}
WHEN LOCAL CHANGED (date(UserOrder o)) AND NOT CHANGED(dateToSoldPeriod(o)) DO {
    dateToSoldPeriod(o) <- subtract(date(o),1);   
}

quantitySold 'Продано' (Sku sku, Stock stock, UserOrder userOrder) = quantitySold(sku, stock, dateFromSoldPeriod(userOrder), dateToSoldPeriod(userOrder));

purchaseReserve 'Страховой запас (кол-во)' = ABSTRACT NUMERIC[16,5](Stock, Sku, DATE);

recQuantity  (Sku sku, Stock stock, UserOrder userOrder) =    purchaseReserve(stock, sku, date(userOrder)) (+) 
                                                                            quantitySold(sku, stock, userOrder) (-)
                                                                            currentReservePurchase(sku, stock) (-) 
                                                                            (currentBalance(sku, stock) IF currentBalance(sku, stock) > 0.0) ; 
                                                                            
changeRecQuantity = ABSTRACT BOOLEAN (UserOrder);                                                                     
overRecQuantity = ABSTRACT NUMERIC[16,5] (Sku, Stock, UserOrder);    

recommendedQuantity 'Рекомендуемое к закупке кол-во' (Sku sku, Stock stock, UserOrder userOrder) = IF changeRecQuantity(userOrder)
    THEN overRecQuantity(sku, stock, userOrder) IF overRecQuantity(sku, stock, userOrder) >0
    ELSE recQuantity(sku, stock, userOrder) IF recQuantity(sku, stock, userOrder) > 0;

purchaseReserve 'Страховой запас (кол-во)' (Sku sku, Stock stock, UserOrder userOrder) = purchaseReserve(stock, sku, date(userOrder));

calcDiffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATE date) =
    averageSold(sku, stock) * (int AS INTEGER) (+) purchaseReserve(stock, sku, date) (-) currentReservePurchase(sku, stock) (-) (currentBalance(sku, stock) IF currentBalance(sku, stock) > 0.0);
calcDiffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATETIME dateTime) = calcDiffPurchaseReserve(stock, sku, int, toDate(dateTime));

//diffPurchaseReserveStockSkuIntegerDate 'Потребность' (stock, sku, int, date) = calcDiffPurchaseReserveStockSkuIntegerDate(stock, sku, int, date) IF calcDiffPurchaseReserveStockSkuIntegerDate(stock, sku, int, date) > 0; 
diffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATE date) = 
    calcDiffPurchaseReserve(stock, sku, int, date) IF calcDiffPurchaseReserve(stock, sku, int, date) > 0; 
diffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATETIME dateTime) = diffPurchaseReserve(stock, sku, int, toDate(dateTime));

overPurchaseReserve 'Страховой запас (кол-во)'(Stock stock, Sku sku, DATETIME dateTime) = purchaseReserve(stock, sku, toDate(dateTime));

numberSkuPurchaseReserve 'Кол-во товаров' (supplier, stock, priceListType, int, dateTime) =
    GROUP SUM 1 IF calcDiffPurchaseReserve(Stock stock, Sku sku, INTEGER int, DATETIME dateTime) > 0
          BY companyA(LedgerPriceListType priceListType, sku, stock, dateTime), stock, priceListType, int, dateTime;

limitRecommendedQuantity = ABSTRACT VALUE BOOLEAN (Sku, UserOrder);

MOQ 'MOQ' = ABSTRACT NUMERIC[16,5] (Sku);
skipPack = ABSTRACT BOOLEAN (Sku, Stock, NUMERIC[16,5]);
overRecommendedQuantity = ABSTRACT LIST (UserOrderDetail,Sku);

ceilRecommendedQuantity(Sku sku, Stock stock, NUMERIC[16,5] r) = 
    IF (MIN MOQ(sku), amountPack(sku)) > 0 AND stock IS Stock AND NOT skipPack(sku, stock, r) 
        THEN ceil(r, (MIN MOQ(sku), amountPack(sku))) 
        ELSE (IF split(sku) THEN r ELSE ceil(r));

fillRecommendedQuantityStock 'Заполнить рекомендуемым'(UserOrder userOrder) = {
    LOCAL in = BOOLEAN (Sku);
    in(Sku sku) <- priceA(
                              ledgerPriceListType(priceListType(userOrder, sku)),
                              sku, customerStock(userOrder), supplier(userOrder), dateTime(userOrder))
                          AND NOT limitRecommendedQuantity(sku, userOrder); 
    FOR in(Sku sku) AND NUMERIC[16,5] r == recommendedQuantity (sku, customerStock(userOrder), userOrder) NOINLINE
        NEW d = UserOrderDetail DO {
            userOrder(d) <- userOrder;
            sku(d) <- sku;
            quantity (d) <- ceilRecommendedQuantity(sku, customerStock(userOrder), r);
            overRecommendedQuantity(d,sku);
        }
} TOOLBAR CONFIRM;
                              
EXTEND FORM userOrder
    PROPERTIES(o) TODRAW sts PANEL dateFromSoldPeriod, dateToSoldPeriod

    PROPERTIES READONLY AFTER prevCurrentBalance(ks,st) purchaseReserve(ks,st,o), quantitySold(ks,st,o)
    PROPERTIES READONLY AFTER quantityCustomer(ks, o, st)
        recommendedQuantity(ks,st,o) ON CONTEXTMENU fillRecommendedQuantityStock(o)
;

DESIGN userOrder {
    BOX(sts) {           
        NEW filterDate FIRST {
            caption= 'Период для расчета продаж';
            type = CONTAINERH;
            MOVE PROPERTY (dateFromSoldPeriod(o));
            MOVE PROPERTY (dateToSoldPeriod(o));
      
        }
    }
}