MODULE PurchaseScheduleOrder;

REQUIRE PurchaseOrder,
        ScheduleOrder;

NAMESPACE Purchase;

@defineScheduleOrder(' (закупка)', supplier, company, customer);

@extendFormFilterStockAccess(ts, scheduleOrder);
@extendFormFilterStockGroupAccess(sg, scheduleOrder);

WHEN LOCAL FORMS scheduleOrder CHANGED(customer(ScheduleOrder o)) DO {
    IF countAccessCompanyStock (currentUser(), customer(o)) == 1 THEN         
        dataIn(o, Stock stock) <- TRUE WHERE defaultCompanyStock(currentUser(), customer(o))==stock;               
}
@defineDocumentLegalEntityAccess(ScheduleOrder, customer, company);

@defineDocumentOperationRoleOver(scheduleOrder, purchase);
    
countShipment 'Кол-во поставок' (DOW, stock, date)= GROUP SUM 1 IF 
    type(scheduleOrder(ScheduleOrderTime scheduleOrderTime))== GenType.genDayMonth AND 
    DATE date >=  startDate(scheduleOrder(scheduleOrderTime)) AND NOT 
    (date >  endDate(scheduleOrder(scheduleOrderTime))) AND 
    in(scheduleOrder(scheduleOrderTime), Stock stock)
        BY shipmentDOW(scheduleOrderTime), stock, date;

countShipment 'Кол-во поставок' (DOW, stock, scheduleOrderTime, date)= GROUP SUM 1 IF 
    type(scheduleOrder(ScheduleOrderTime scheduleOrderTime))== GenType.genDayMonth AND 
    DATE date >=  startDate(scheduleOrder(scheduleOrderTime)) AND NOT 
    (date >  endDate(scheduleOrder(scheduleOrderTime))) AND 
    in(scheduleOrder(scheduleOrderTime), Stock stock)
        BY shipmentDOW(scheduleOrderTime), stock, scheduleOrderTime, date;
 
nameSupplier 'Поставщик'  (ScheduleOrderTime o)= name(supplier(scheduleOrder(o)));
countShipmentDate 'Кол-во поставок' (DOW DOW, Stock stock, ScheduleOrder order) =  countShipment(DOW, stock, startDate(order));  
countShipmentDate 'Кол-во поставок' (DOW DOW, Stock stock, ScheduleOrderTime scheduleOrderTime, ScheduleOrder order) =  countShipment(DOW, stock, scheduleOrderTime, startDate(order));  
    
overPeriod 'Кол-во недель между поставками' (ScheduleOrderTime o)= overPeriod(scheduleOrder(o));        
        
EXTEND FORM scheduleOrder
    OBJECTS st=Stock PANEL  
    PROPERTIES (st) SHOWIF toShowGenDayMonth(s) SELECTOR name
    FILTERS isCompany(st)

    OBJECTS do=DOW GRID
    PROPERTIES(do) SHOWIF toShowGenDayMonth(s) staticCaption
    PROPERTIES READONLY SHOWIF toShowGenDayMonth(s) countShipmentDate(do,st,s)
    FILTERS countShipmentDate(do,st,s)
    
          
    OBJECTS l=ScheduleOrderTime GRID
    PROPERTIES(l) SHOWIF toShowGenDayMonth(s) READONLY nameSupplier, orderNameDOW, overPeriod 
//    PROPERTIES READONLY SHOWIF toShowGenDayMonth(s) countShipmentDOWStockScheduleOrderTimeDateScheduleOrder(do,st,l,s)     
    
    FILTERS shipmentDOW(l) == do,
            countShipmentDate(do,st,l,s) 
;
DESIGN scheduleOrder {

    days {
        fill = 1;
        type = TABBED ;
        NEW days1 {
            type = CONTAINERH;
            fill = 1;
            caption = 'Выбор';
            MOVE dow.box;
            MOVE d.box;
            MOVE m.box;
        }
        NEW days2 {
            type = CONTAINERV;
            fill = 1;
            caption = 'Статистика';
            MOVE st.box;
            NEW days21 {
                fill = 1;
                type = CONTAINERH;
                MOVE do.box {caption = 'День поставки';}
                MOVE l.box { caption = 'Поставщики';}
            }            
        }        
    }
}


WHEN LOCAL CHANGED(supplier(ScheduleOrder o)) DO {
    supplierStock(o) <- defaultStock(supplier(o)) IF countStocks(supplier(o)) == 1;
}

//WHEN LOCAL CHANGED(customerScheduleOrder(o)) DO {
//    customerStockScheduleOrder(o) <- defaultCustomerStockEmployeeLegalEntity(currentUser(), customerScheduleOrder(o))
//        IF countAccessCustomerStockEmployeeLegalEntity (currentUser(), customerScheduleOrder(o)) == 1;
//}

CONSTRAINT supplier(ScheduleOrder scheduleOrder) AND NOT isSupplier(supplier(scheduleOrder))
    CHECKED BY supplier[ScheduleOrder] MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(ScheduleOrder scheduleOrder) AND NOT isCompany(customer(scheduleOrder))
    CHECKED BY customer[ScheduleOrder] MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';

CONSTRAINT supplier() AND NOT isSupplier(supplier())
    CHECKED BY supplier[] MESSAGE 'Выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer() AND NOT isCompany(customer())
    CHECKED BY customer[] MESSAGE 'Выбрана в качестве покупателя организация, не являющаяся компанией';

isCompanySupplier(LegalEntity l, LegalEntity s) = isCompany(l) AND isSupplier(s);

EXTEND FORM legalEntity
    PROPERTIES(s, l) addSaleSchedulerOrderPurchase = addScheduleOrderSupplierCustomer TODRAW ss SHOWIF isCompanySupplier(l, s) //isCompanyLegalEntity(l) AND isSupplierLegalEntity(s)
    PROPERTIES(l, c) addPurchaseSchedulerOrderPurchase = addScheduleOrderSupplierCustomer TODRAW sc SHOWIF isCompanySupplier(c, l) //isCompanyLegalEntity(c) AND isSupplierLegalEntity(l)
;

// Добавляем Dashboard для работы с графиками закупок
@defineScheduleOrderDashboard(' (закупка)', customer);

countStocks (order)= GROUP SUM 1 IF in(ScheduleOrder order,Stock stock)
    BY order;       
countAccessCompanyEmployeeStock (order)= GROUP SUM 1 IF accessCompany(currentUser(),Stock stock) AND in(ScheduleOrder order,stock)
    BY order;
EXTEND FORM scheduleOrderDashboard FILTERS countAccessCompanyEmployeeStock(s) OR NOT countStocks(s);
EXTEND FORM scheduleOrderDashboard FILTERS countAccessCompanyEmployeeStock(ss) OR NOT countStocks(ss);

autoCloseScheduleOrderInterval 'За сколько дней аннулировать точки заказов по графику' = DATA INTEGER ();
autoCloseScheduleOrderDetails 'Аннулировать точки заказов'() = {
    isClosed(ScheduleOrderDetail o) <- TRUE WHERE dateOrder(o) <= subtract(currentDate(), autoCloseScheduleOrderInterval());
}

EXTEND FORM options
    PROPERTIES() autoCloseScheduleOrderInterval, autoCloseScheduleOrderDetails 
;
DESIGN options {
    orders {
        NEW schedule {
            caption = 'Графики заказов';
            MOVE PROPERTY(autoCloseScheduleOrderInterval());
            MOVE PROPERTY(autoCloseScheduleOrderDetails());
        }
    }
}

NAVIGATOR {
    purchaseDashboardNavigator {
        ADD scheduleOrderDashboard;
        ADD scheduleOrderDetails;          
    }
}

CONSTRAINT customerStock() AND NOT isCompany(customerStock())
    CHECKED BY customerStock[] MESSAGE 'Склад покупателя должен быть складом компании';
    
EXTEND FORM scheduleOrderDetails
    FILTERGROUP myOrders
        FILTER 'Мои' createdUser(o) == currentUser() 'F7' DEFAULT
;

// ---------------------------- Циклический заказ, создаётся на основании последнего   ----------------------------

EXTEND FORM scheduleOrder 
    PROPERTIES (s) isCycled 
;

DESIGN scheduleOrder {
    dateContainer {
        MOVE PROPERTY(isCycled(s));  
    } 
}


