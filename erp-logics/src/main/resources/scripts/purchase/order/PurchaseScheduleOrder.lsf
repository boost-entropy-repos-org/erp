MODULE PurchaseScheduleOrder;

REQUIRE PurchaseOrder,
        ScheduleOrder;

NAMESPACE Purchase;

@defineScheduleOrder(' (закупка)', supplier, company, supplier);

@extendFormFilterStockAccess(ts, scheduleOrder);
@extendFormFilterStockGroupAccess(sg, scheduleOrder);
@defineDocumentLegalEntityStockAccess(ScheduleOrder, supplier, supplier, scheduleOrder);


WHEN SESSION FORMS scheduleOrder CHANGED(customerScheduleOrder(o)) DO {
    IF countAccessCompanyStockEmployeeLegalEntity (currentUser(), customerScheduleOrder(o)) == 1 THEN         
        dataInScheduleOrderStock(o, stock) <- TRUE WHERE defaultCompanyStockEmployeeLegalEntity(currentUser(), customerScheduleOrder(o))==stock;               
}
@defineDocumentLegalEntityAccess(ScheduleOrder, customer, company);

@defineDocumentOperationRoleOver(scheduleOrder, purchase);
    
countShipmentDOWStockDate 'Кол-во поставок' (DOW, stock, date)= GROUP SUM 1 IF 
    typeScheduleOrder(scheduleOrderScheduleOrderTime(scheduleOrderTime))== GenType.genDayMonth AND 
    date >=  startDateScheduleOrder(scheduleOrderScheduleOrderTime(scheduleOrderTime)) AND NOT 
    (date >  endDateScheduleOrder(scheduleOrderScheduleOrderTime(scheduleOrderTime))) AND 
    inScheduleOrderStock(scheduleOrderScheduleOrderTime(scheduleOrderTime), stock)
        BY shipmentDOWScheduleOrderTime(scheduleOrderTime), stock, date;

countShipmentDOWStockScheduleOrderTimeDate 'Кол-во поставок' (DOW, stock, scheduleOrderTime, date)= GROUP SUM 1 IF 
    typeScheduleOrder(scheduleOrderScheduleOrderTime(scheduleOrderTime))== GenType.genDayMonth AND 
    date >=  startDateScheduleOrder(scheduleOrderScheduleOrderTime(scheduleOrderTime)) AND NOT 
    (date >  endDateScheduleOrder(scheduleOrderScheduleOrderTime(scheduleOrderTime))) AND 
    inScheduleOrderStock(scheduleOrderScheduleOrderTime(scheduleOrderTime), stock)
        BY shipmentDOWScheduleOrderTime(scheduleOrderTime), stock, scheduleOrderTime, date;
 
nameSupplierScheduleOrderTime 'Поставщик'  (o)= nameLegalEntity(supplierScheduleOrder(scheduleOrderScheduleOrderTime(o)));
countShipmentDOWStockDateScheduleOrder 'Кол-во поставок' (DOW, stock, order) =  countShipmentDOWStockDate(DOW, stock, startDateScheduleOrder(order));  
countShipmentDOWStockScheduleOrderTimeDateScheduleOrder 'Кол-во поставок' (DOW, stock, scheduleOrderTime, order) =  countShipmentDOWStockScheduleOrderTimeDate(DOW, stock, scheduleOrderTime, startDateScheduleOrder(order));  
    
overPeriodScheduleOrderTime 'Кол-во недель между поставками' (o)= overPeriodScheduleOrder(scheduleOrderScheduleOrderTime(o));        
        
EXTEND FORM scheduleOrder
    OBJECTS st=Stock FIXED PANEL  
    PROPERTIES (st) SHOWIF toShowGenDayMonth(s) SELECTOR nameStock
    FILTERS isCompanyStock(st)

    OBJECTS do=DOW FIXED GRID
    PROPERTIES(do) SHOWIF toShowGenDayMonth(s) staticCaption
    PROPERTIES READONLY SHOWIF toShowGenDayMonth(s) countShipmentDOWStockDateScheduleOrder(do,st,s)
    FILTERS countShipmentDOWStockDateScheduleOrder(do,st,s)
    
          
    OBJECTS l=ScheduleOrderTime FIXED GRID
    PROPERTIES(l) SHOWIF toShowGenDayMonth(s) READONLY nameSupplierScheduleOrderTime, orderNameDOWScheduleOrderTime, overPeriodScheduleOrderTime 
//    PROPERTIES READONLY SHOWIF toShowGenDayMonth(s) countShipmentDOWStockScheduleOrderTimeDateScheduleOrder(do,st,l,s)     
    
    FILTERS shipmentDOWScheduleOrderTime(l) == do,
            countShipmentDOWStockScheduleOrderTimeDateScheduleOrder(do,st,l,s) 
;
EXTEND DESIGN scheduleOrder {

    days {
        fill = 1;
        type = TABBED ;
        NEW days1 {
            type = CONTAINERH;
            fill = 1;
            caption = 'Выбор';
            ADD dow.box;
            ADD d.box;
            ADD m.box;
        }
        NEW days2 {
            type = CONTAINERV;
            fill = 1;
            caption = 'Статистика';
            ADD st.box;
            NEW days21 {
                fill = 1;
                type = CONTAINERH;
                ADD do.box {caption = 'День поставки';}
                ADD l.box { caption = 'Поставщики';}
            }            
        }        
    }
}


WHEN SESSION CHANGED(supplierScheduleOrder(o)) DO {
    supplierStockScheduleOrder(o) <- defaultSupplierStockEmployeeLegalEntity(currentUser(), supplierScheduleOrder(o))
        IF countAccessSupplierStockEmployeeLegalEntity (currentUser(), supplierScheduleOrder(o)) == 1;
}

//WHEN SESSION CHANGED(customerScheduleOrder(o)) DO {
//    customerStockScheduleOrder(o) <- defaultCustomerStockEmployeeLegalEntity(currentUser(), customerScheduleOrder(o))
//        IF countAccessCustomerStockEmployeeLegalEntity (currentUser(), customerScheduleOrder(o)) == 1;
//}

CONSTRAINT supplierScheduleOrder(scheduleOrder) AND NOT isSupplierLegalEntity(supplierScheduleOrder(scheduleOrder))
    CHECKED BY supplierScheduleOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerScheduleOrder(scheduleOrder) AND NOT isCompanyLegalEntity(customerScheduleOrder(scheduleOrder))
    CHECKED BY customerScheduleOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';

CONSTRAINT supplier() AND NOT isSupplierLegalEntity(supplier())
    CHECKED BY supplier MESSAGE 'Выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer() AND NOT isCompanyLegalEntity(customer())
    CHECKED BY customer MESSAGE 'Выбрана в качестве покупателя организация, не являющаяся компанией';

isCompanySupplier(l, s) = isCompanyLegalEntity(l) AND isSupplierLegalEntity(s);

EXTEND FORM legalEntity
    PROPERTIES(s, l) addSaleSchedulerOrder = addScheduleOrderSupplierCustomer TODRAW ss SHOWIF isCompanySupplier(l, s) //isCompanyLegalEntity(l) AND isSupplierLegalEntity(s)
    PROPERTIES(l, c) addPurchaseSchedulerOrder = addScheduleOrderSupplierCustomer TODRAW sc SHOWIF isCompanySupplier(c, l) //isCompanyLegalEntity(c) AND isSupplierLegalEntity(l)
;

// Добавляем Dashboard для работы с графиками закупок
@defineScheduleOrderDashboard(' (закупка)');
NAVIGATOR {
    purchaseDashboardNavigator {
        ADD scheduleOrderDashboard;
        ADD scheduleOrderDetails;          
    }
}