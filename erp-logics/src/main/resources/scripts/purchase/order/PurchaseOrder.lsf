MODULE PurchaseOrder;

REQUIRE Order, PurchaseOperation, PurchasePack, PriceListLedger;

NAMESPACE Purchase;

@defineOrder(' (закупка)', customer, customer, supplier, company, company, Purchase);
@extendFormFilterAccessStock(Order, o, orders, customerStock, company);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Order, o, orders, customer, company);
@extendFormFilterAccessLegalEntity(Order, o, orders, supplier, supplier);

Order.inOrder(o) += o IS Order;

@defineOrderBatch(customer, customer);
@defineOrderBatchDialog();

@implementOrderDestination(supplier, customer);

EXTEND FORM userOrder
    OBJECTS sst = Stock
    PROPERTIES READONLY TODRAW sts FORCE GRID BEFORE prevCurrentBalanceSkuStock(ks, st) prevCurrentBalanceSkuStock(ks, sst)
    FILTERS sst == supplierStockUserOrder(o), 
            legalEntityStock(sst) == supplierUserOrder(o),
            isCompanyStock(sst),
            activeStock(sst)     
;

EXTEND DESIGN userOrder {
    PROPERTY(prevCurrentBalanceSkuStock(ks, sst)){
        caption = 'Текущий остаток поставщика';
    }
    REMOVE sst.box;
}

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (закупка)', userOrder);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);


@defineDocumentOperationRole(userOrder);

overCopyOrder(s, d) += ACTION(s, d) {
    ASSIGN operationUserOrder(d) <- operationOrder(s);
}

@defineOperationFilterProperty(order, o, orders, nameFilterOrderSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterOrderSupplier() AND NOT isSupplierLegalEntity(filterOrderSupplier())
    CHECKED BY filterOrderSupplier MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterOrderCustomer() AND NOT isCompanyLegalEntity(filterOrderCustomer())
    CHECKED BY filterOrderCustomer MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся компанией';  
        
CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT inLegalEntityStock(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT inLegalEntityStock(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';            

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, supplier, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
EXTEND DESIGN userOrder {
    PROPERTY(packQuantityUserOrderDetail(d)) { background = #D4FFD4; }
}
EXTEND DESIGN orders {
    PROPERTY(packQuantityOrderDetail(d)) { background = #D4FFD4; }
}

Order.packQuantityOrderDetail(detail) += packQuantityOrderDetail(detail);
EXTEND DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserOrder(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, customer);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, customer);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

overChangeQuantityValueBatchUserOrderDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserOrderDetail(detail))) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortmentSkuStockUserOrder (sku, stock, userOrder) =
    companyALedgerPriceListTypeSkuStockDateTime(ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(userOrder, sku)),
                                                sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);

EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuStock(ks, st)
        FILTER 'В заказе ' 'F9' quantitySkuUserOrderCustomerStock(ks, o, st)

    FILTERGROUP filter1
        FILTER 'С поступлением' 'F8' quantityPurchaseSupplierSku(supplierUserOrder(o), ks)
        FILTER 'В прайсе' 'F7' priceALedgerPriceListTypeSkuStockCompanyDateTime(ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(o, ks)),
                                                                                      ks,
                                                                                      st,
                                                                                      supplierUserOrder(o),
                                                                                      dateTimeUserOrder(o))
;

EXTEND FORM userOrder

    FILTERGROUP filter4
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchStock(b, sto) DEFAULT
        FILTER 'В документе ' 'F9' quantityBatchUserOrderCustomerStock(b, o, sto)
        
    FILTERGROUP filter5
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserOrder(o), skuBatch(b))
        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserOrderBatch(o, b), 
                                                                              b, 
                                                                              customerStockUserOrder(o), 
                                                                              dateTimeUserOrder(o)) == supplierUserOrder(o)
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(Order, sku, shipmentDateTime, customerStock, supplier);

editOrderLedger(ledger) += ACTION editOrderDetail(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);

overShowEditOrder (i) += showEditDeleteUserOrder(i) AND isOpenedOrder(i);
overShowDeleteOrder (i) += showEditDeleteUserOrder(i) AND isUserOpenedOrder(i); 

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD orders;
    }
}
