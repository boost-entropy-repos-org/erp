MODULE PurchaseOrder;

REQUIRE Order, PurchaseOperation, PurchasePack, PriceListLedger;

NAMESPACE Purchase;

@defineOrder(' (закупка)', customer, customer, supplier, company, company, Purchase);
@extendFormFilterAccessStock(Order, o, orders, customerStock, company);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Order, o, orders, customer, company);
@extendFormFilterAccessLegalEntity(Order, o, orders, supplier, supplier);

Order.inOrder(o) += o IS Order;

   
@defineOrderBatch(customer, customer);
@defineOrderBatchDialog();

@implementOrderDestination(supplier, customer);

//использовать цены склада поставщика
usePriceSupplierStockOrder 'Использовать цены для склада поставщика' = ABSTRACT BOOLEAN (Order);
usePriceSupplierStockUserOrder 'Использовать цены для склада поставщика'  = DATA BOOLEAN (Order);

usePriceSupplierStockOrder(order) += usePriceSupplierStockUserOrder(order);

EXTEND FORM userOrder
    PROPERTIES (o) usePriceSupplierStockUserOrder         
;          

DESIGN userOrder {
    headerExtraParams{
        NEW prices {
            caption = 'Цены';
            type = COLUMNS;
            columns = 1;
            MOVE PROPERTY(usePriceSupplierStockUserOrder(o));
        }         
    }
}

priceStockUserOrder(o) += WHEN usePriceSupplierStockUserOrder(o) THEN supplierStockUserOrder(o); 

idSupplierOrder (order) = idLegalEntity(supplierOrder(order)); 

EXTEND FORM userOrder
    PROPERTIES READONLY TODRAW sts FORCE GRID BEFORE prevCurrentBalanceSkuStock(ks, st) prevCurrentBalanceSkuStock(ks, sst)
    FILTERS sst == supplierStockUserOrder(o), 
            legalEntityStock(sst) == supplierUserOrder(o),
            isCompanyStock(sst),
            activeStock(sst)     
;

DESIGN userOrder {
    PROPERTY(prevCurrentBalanceSkuStock(ks, sst)){
        caption = 'Текущий остаток поставщика';
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o);
@extendFormFilterRoleAccess(order, o, orders);
@defineDocumentOperationConstraint(order, 'заказ (закупка)', Purchase);
Order.operationOrder(order) += operationOrder(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (закупка)', userOrder);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);


@defineDocumentOperationRoleOver(userOrder, purchase);

overCopyOrder(s, d) += ACTION(s, d) {
    ASSIGN operationUserOrder(d) <- operationOrder(s);
}

@defineOperationFilterProperty(order, o, orders, nameFilterOrderSupplier);

@defineOperationProperty(usePriceSupplierStock, 'Использовать цены для склада поставщика', createContainer);
@deriveDocumentOperationProperty(userOrder, usePriceSupplierStock);
       
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserOrder(userOrder) AND NOT isSupplierLegalEntity(supplierUserOrder(userOrder))
    CHECKED BY supplierUserOrder MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserOrder(userOrder) AND NOT isCompanyLegalEntity(customerUserOrder(userOrder))
    CHECKED BY customerUserOrder MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterOrderSupplier() AND NOT isSupplierLegalEntity(filterOrderSupplier())
    CHECKED BY filterOrderSupplier MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterOrderCustomer() AND NOT isCompanyLegalEntity(filterOrderCustomer())
    CHECKED BY filterOrderCustomer MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся компанией';  
CONSTRAINT filterOrderCustomerStock() AND NOT isCompanyStock(filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock MESSAGE 'Для фильтра в заказе выбрана в качестве склада покупателя склад, который не принадлежит компании';      
        
CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT inLegalEntityStock(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT inLegalEntityStock(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';            

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserOrder, supplier, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
DESIGN userOrder {
    PROPERTY(packQuantityUserOrderDetail(d)) { background = #FFBC02; }
}
DESIGN orders {
    PROPERTY(packQuantityOrderDetail(d)) { background = #FFBC02; }
}

Order.packQuantityOrderDetail(detail) += packQuantityOrderDetail(detail);
DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPackUserOrder(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, customer);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, customer);

overChangeQuantityValueSkuUserOrderDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuUserOrderDetail(detail)) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

overChangeQuantityValueBatchUserOrderDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserOrderDetail(detail))) THEN {
        ASSIGN packQuantityUserOrderDetail(detail) <- quantityUserOrderDetail(detail)/amountPackUserOrderDetail(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortmentSkuStockUserOrder (sku, stock, userOrder) =
    companyALedgerPriceListTypeSkuStockDateTime(ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(userOrder, sku)),
                                                sku, stock, dateTimeUserOrder(userOrder)) == supplierUserOrder(userOrder);

EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuStock(ks, st) 'F10'
        FILTER 'В заказе ' quantitySkuUserOrderCustomerStock(ks, o, st) 'F9'

    FILTERGROUP filter1
        FILTER 'С поступлением' quantityPurchaseSupplierSku(supplierUserOrder(o), ks) 'F8' 
        FILTER 'С поступлением со склада' quantityPurchaseSupplierStockSku (supplierStockUserOrder(o), ks) 'shift F8'
        FILTER 'В прайсе' priceALedgerPriceListTypeSkuStockCompanyDateTime(ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(o, ks)),
                                                                                      ks,
                                                                                      st,
                                                                                      supplierUserOrder(o),
                                                                                      dateTimeUserOrder(o)) 'F7'
                                                                                      
        FILTER 'В прайсе склада' priceALedgerPriceListTypeSkuStockCompanyStockDateTime(ledgerPriceListTypePriceListType(priceListTypeUserOrderSku(o, ks)),
                                                                                      ks,
                                                                                      st,
                                                                                      supplierUserOrder(o),
                                                                                      supplierStockUserOrder(o),
                                                                                      dateTimeUserOrder(o)) 'F6'                                                                                      
;

EXTEND FORM userOrder

    FILTERGROUP filter4
        FILTER 'С остатком ' prevCurrentBalanceBatchStock(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityBatchUserOrderPriceStock(b, o, sto) 'F9'
        
    FILTERGROUP filter5
        FILTER 'С поступлением ' quantityPurchaseSupplierSku(supplierUserOrder(o), skuBatch(b)) 'F8'
        FILTER 'В прайсе ' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserOrderBatch(o, b), 
                                                                              b, 
                                                                              customerStockUserOrder(o), 
                                                                              dateTimeUserOrder(o)) == supplierUserOrder(o) 'F7'
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(Order, sku, shipmentDateTime, customerStock, supplier);

editOrderLedger(ledger) += ACTION editOrderDetail(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);
skipToShowDeleteOrder = ABSTRACT BOOLEAN (Order);
overShowEditOrder (i) += showEditDeleteUserOrder(i) AND isOpenedOrder(i);
overShowDeleteOrder (i) += showEditDeleteUserOrder(i) AND isUserOpenedOrder(i) AND NOT skipToShowDeleteOrder(i); 

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD orders;
    }
}

CONSTRAINT  isPostedUserOrder(i) AND isContractOperation(operationUserOrder(i)) AND NOT contractSkuOrder(i) 
    MESSAGE 'Для заказа (закупка) обязан быть задан договор';   
CONSTRAINT  isPostedUserOrderDetail(d) AND isPriceOperation(operationUserOrderDetail(d)) AND NOT priceUserOrderDetail(d) 
    MESSAGE 'Для строки заказа (закупка) должна быть задана цена';   