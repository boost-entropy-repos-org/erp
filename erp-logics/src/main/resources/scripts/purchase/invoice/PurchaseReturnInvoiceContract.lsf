MODULE PurchaseReturnInvoiceContract;

REQUIRE PurchaseReturnInvoice, InvoiceContract, ContractPayment;

NAMESPACE PurchaseReturn;

@defineInvoicePaymentCondition(' (закупка-возврат)');

// ------------------- Проведение по регистру задолженностей ----------------------- //

@implementContractLedger(, Invoice, contractSku);
sum[ContractLedger](Invoice contractLedger) +=
    IF currency(contractLedger) != currency(contractSku(contractLedger)) THEN 
        NUMERIC[16,2](-invoiceSumInvoiceDetail(contractLedger) * 
                      rateOn(typeExchange(contractSku(contractLedger)), 
                                                     currency(contractLedger),
                                                     date(contractLedger)))
    ELSE 
        -invoiceSumInvoiceDetail(contractLedger);

@implementContractLedger(a, Invoice, contractSku);
sum[ContractALedger](Invoice contractALedger) +=
    IF currency(contractALedger) != currency(contractSku(contractALedger)) THEN 
        NUMERIC[16,2](-invoiceSumInvoiceDetail(contractALedger) * 
                      rateOn(typeExchange(contractSku(contractALedger)), 
                                                     currency(contractALedger),
                                                     date(contractALedger)))
    ELSE 
        -invoiceSumInvoiceDetail(contractALedger);

@implementOutContractLedger(Invoice, contractSku);
sum[OutContractLedger](Invoice outContractLedger) += 
    IF currency(outContractLedger) != currency(contractSku(outContractLedger)) THEN 
        NUMERIC[16,2](invoiceSumInvoiceDetail(outContractLedger) * 
                      rateOn(typeExchange(contractSku(outContractLedger)), 
                                                     currency(outContractLedger),
                                                     date(outContractLedger)))
    ELSE 
        invoiceSumInvoiceDetail(outContractLedger);