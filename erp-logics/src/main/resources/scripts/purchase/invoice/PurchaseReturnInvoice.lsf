MODULE PurchaseReturnInvoice;

REQUIRE OrderInvoice, PurchaseReturnOrder, PurchaseOperation;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//

@defineInvoice(' (закупка-возврат)', customer, supplier, company, PurchaseReturn);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, supplier);

@defineDocumentOperationContainer(invoice, i);
@defineDocumentOperationConstraint(invoice, invoicePurchaseReturn, 'накладная (закупка-возврат)', PurchaseReturn);

// Добавляем партии
@defineInvoiceBatch(customer, PurchaseReturn, ' (закупка-возврат)');
Invoice.batchInvoiceDetail(d) += batchInvoiceDetail(d);
@defineInvoiceBatchDialogStock(customerStock);

@defineInvoiceReturn(Purchase, PurchaseReturn, customerStock);

@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineOrderInvoice(' (закупка-возврат)', customer);

// вторая валюта
@defineInvoiceHomeCurrency();

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationPriceListType(userInvoice, 'накладной (закупка-возврат)', userInvoice);

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

@deriveDocumentOperationProperty(UserInvoice, isHomeCurrency);

Invoice.operationInvoice(o) += operationInvoice(o);
// Добавляем в копирование инвойсов
overCopyInvoice(s, d) += ACTION(s, d) {
    ASSIGN operationUserInvoice(d) <- operationInvoice(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceSupplier);
//------------------------------ Ограничение на выбор поставщиков -----------------------------//

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isSupplierLegalEntity(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterInvoiceCustomer() AND NOT isCompanyLegalEntity(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся компанией';     
     
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT inLegalEntityStock(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT inLegalEntityStock(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';     

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPackUserInvoice(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, customerStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}
overChangeQuantityValueBatchUserInvoiceDetail(detail) += ACTION (detail) {
    IF packBarcodeSku(skuBatch(batchUserInvoiceDetail(detail))) THEN {
        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

// --------------- Проведение по регистру закупок ------------- //

@implementPurchaseLedger(Invoice, sku, customerStock);
supplierPurchaseLedger (ledger) += supplierInvoiceDetail(ledger);
quantityPurchaseLedger (ledger) += -quantityInvoiceDetail(ledger);
VATPurchaseLedger (ledger) += VATInvoiceDetail(ledger);
sumPurchaseLedger (ledger) += -sumInvoiceDetail(ledger);
currencyPurchaseLedger(ledger) += currencyInvoiceDetail(ledger);
skipPurchaseLedger (ledger) += skipPurchaseLedgerOperation(operationInvoiceDetail(ledger));

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuUserInvoice(ks, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetailSkuUserInvoice(ks, i) 'F9'
        
    FILTERGROUP filter2
        FILTER 'С поступлением ' quantityPurchaseSupplierSku(supplierUserInvoice(i), ks) 'F8'
        FILTER 'В прайсе ' priceALedgerPriceListTypeSkuStockCompanyDateTime(priceListTypeUserInvoiceSku(i, ks), 
                                                                                 ks, 
                                                                                 customerStockUserInvoice(i),
                                                                                 supplierUserInvoice(i),
                                                                                 dateTimeUserInvoice(i)) 'F7'
;
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchUserInvoice(b, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetailBatchUserInvoice(b, i) 'F9'
        
    FILTERGROUP filter4
        FILTER 'С поступлением ' quantityPurchaseSupplierSku(supplierUserInvoice(i), skuBatch(b)) 'F8'
        FILTER 'В прайсе ' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserInvoiceBatch(i, b), 
                                                                              b, 
                                                                              customerStockUserInvoice(i), 
                                                                              dateTimeUserInvoice(i)) == supplierUserInvoice(i) 'F7'
;

// Резервы
@extendFormDocumentSkuOrderLedger(userInvoice, userInvoice, i, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEditInvoice (i) += showEditDeleteUserInvoice(i) AND isOpenedInvoice(i);
overShowDeleteInvoice (i) += showEditDeleteUserInvoice(i) AND isUserOpenedInvoice(i); 

NAVIGATOR {
    purchaseReturnNavigator {
        ADD invoices;
    }
}

dataBaseInvoiceDetailStock 'Дата запрета выписки накладных (закупка-возврат) без основания'  = DATA DATE (Stock); 

CONSTRAINT  isPostedInvoiceDetail(d) AND dateInvoiceDetail(d) >= dataBaseInvoiceDetailStock(customerStockInvoiceDetail(d)) AND NOT invoiceDetailInvoiceDetail(d)
        MESSAGE 'Не задано основание в накладной (закупка-возврат)'; 

EXTEND FORM options
    PROPERTIES(s) dataBaseInvoiceDetailStock
;