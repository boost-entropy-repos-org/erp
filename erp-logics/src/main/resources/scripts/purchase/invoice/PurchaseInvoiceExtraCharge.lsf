MODULE PurchaseInvoiceExtraCharge;

REQUIRE PurchaseInvoiceCharge;

NAMESPACE Purchase;

TABLE invoiceUserInvoice (Invoice, UserInvoice);
inExtraCharge 'Вкл.' = ABSTRACT BOOLEAN (Invoice, InvoiceDetail);
inExtraCharge 'Вкл.' = DATA BOOLEAN (Invoice, UserInvoice);

inDataExtraCharge = DATA BOOLEAN  (Invoice, UserInvoiceDetail);

inExtraCharge 'Вкл.' (Invoice invoice, UserInvoiceDetail detail) =
    OVERRIDE inExtraCharge(invoice, userInvoice(detail)), inDataExtraCharge(invoice, detail);
inExtraCharge(Invoice invoice, UserInvoiceDetail detail) += inExtraCharge(invoice, detail);

inExtraCharge (charge, invoice) = GROUP SUM 1 IF inExtraCharge(Invoice charge, InvoiceDetail d) BY charge, invoice(d);
nameSuppliers 'Поставщики' =GROUP CONCAT  nameSupplier(Invoice invoice) IF inExtraCharge(Invoice charge, invoice), '; ' 
    BY charge ORDER invoice MINCHARWIDTH 20 PREFCHARWIDTH 40;
seriesNumberSuppliers 'Накладные' =GROUP CONCAT  seriesNumber(Invoice invoice) IF inExtraCharge(Invoice charge, invoice), '; ' 
    BY charge ORDER invoice MINCHARWIDTH 20 PREFCHARWIDTH 40;  

overCopy(UserInvoiceDetail d, UserInvoiceDetail detail) += ACTION {      
    inDataExtraCharge(Invoice i,d) <- inDataExtraCharge(i,detail);
} 

backgroupExtraChargeInvoiceUser = ABSTRACT COLOR (InvoiceDetail);

TABLE invoiceUserInvoiceDetail(Invoice, UserInvoiceDetail);
extraChargePrice 'Цена доп. услуг за ед.' = ABSTRACT NUMERIC[14,2] (Invoice, InvoiceDetail);
extraChargePrice 'Цена доп. услуг за ед.' = DATA NUMERIC[14,2] (Invoice, UserInvoiceDetail) @@denomination;
extraChargePrice (Invoice i,UserInvoiceDetail d) += extraChargePrice(i,d);

extraChargeSum 'Сумма доп. услуг' = ABSTRACT NUMERIC[16,2] (Invoice, InvoiceDetail);
extraChargeSum 'Сумма доп. услуг' = DATA NUMERIC[16,2] (Invoice, UserInvoiceDetail) @@denomination;
extraChargeSum (Invoice i,UserInvoiceDetail d) += extraChargeSum(i,d);

changeExtraChargeSum(Invoice i, UserInvoiceDetail d) = ACTION {
    REQUEST NUMERIC[16,2] INPUT;
    IF requestedNumeric() THEN {
        extraChargeSum(i,d) <- requestedNumeric();
        extraChargePrice(i,d) <- NUMERIC[14,2](extraChargeSum(i,d)/quantity(d));
    } ELSE {
        extraChargePrice(i,d) <- NULL;
    }
}

extraChargeSum (Invoice i, UserInvoiceDetail d) <- NUMERIC[16,2](round(quantity(d) * extraChargePrice(i,d), currency(i)))
                WHEN DO CHANGED(quantity(d)) OR CHANGED (extraChargePrice(i,d)) OR CHANGED(currency(i));

extraChargeSumInvoiceDetail 'Сумма доп. услуг (расписанная)' = GROUP SUM extraChargeSum(Invoice i,InvoiceDetail d) BY i;
extraChargeSumUserInvoiceDetail 'Сумма доп. услуг (расписанная)' = GROUP SUM extraChargeSum(Invoice i,UserInvoiceDetail d) BY i;

extraChargePrice 'Цена доп. услуг' (o, d) = GROUP SUM extraChargePrice(Invoice i,UserInvoiceDetail d) IF isPosted(i) BY operation(i),d;
extraChargeSum  'Сумма доп. услуг' (o, d) = GROUP SUM extraChargeSum(Invoice i,UserInvoiceDetail d) IF isPosted(i) BY operation(i),d;

@defineOperationProperty(showExtraCharge, 'Доп. услуги', commonContainer);
@defineDocumentInterfaceProperty (invoice, showExtraCharge, 'Доп. услуги');
@deriveDocumentOperationProperty(UserInvoice, showExtraCharge);

filterOperationExtraCharge= DATA LOCAL Operation (UserInvoice);
nameFilterOperationExtraCharge 'Операция' = name(filterOperationExtraCharge(UserInvoice i));
   
FORM extraChargeInvoices 'Выбрать накладные'
    OBJECTS i=UserInvoice FIXED PANEL                          
    PROPERTIES nameFilterOperationExtraCharge(i)
    OBJECTS ui=UserInvoice
    PROPERTIES (i, ui) inExtraCharge
    PROPERTIES (ui) READONLY isPosted[Invoice], isClosed[Invoice], number, series, date, time, 
                    nameSupplier, nameCustomer, nameCurrency
    FILTERS filterOperationExtraCharge(i) == operation(ui) OR TRUE AND NOT filterOperationExtraCharge(i)
    
    OBJECTS uid=UserInvoiceDetail
    PROPERTIES(i, uid) inExtraCharge
    PROPERTIES(uid) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, 
                            quantity, price, sumGrossWeight
    FILTERS filterOperationExtraCharge(i) == operation(uid) OR TRUE AND NOT filterOperationExtraCharge(i)
            
    FILTERGROUP filters1
        FILTER 'Отмеченные' inExtraCharge(i, ui) 'F10' 
    FILTERGROUP filters2
        FILTER 'По инвойсу' userInvoice(uid) == ui 'F11' DEFAULT 
    FILTERGROUP filters3
        FILTER 'Отмеченные' inExtraCharge(i, uid) 'F10'         
;

DESIGN extraChargeInvoices {
    main {
        preferredSize = (1024, 768);
        NEW split {
            fill = 1;
            type = SPLITV;
            NEW header {
                fill = 1;
                NEW header1 {                    
                    caption = 'Фильтры';
                    type = CONTAINERH;
                    MOVE PROPERTY (nameFilterOperationExtraCharge(i));
                }
                MOVE i.box;
                MOVE ui.box;
            }
            MOVE uid.box;
        }
        MOVE functions.box;
    }
}

selectExtraCharge 'Выбрать накладные'(UserInvoice i) = ACTION {   
    filterOperationExtraCharge(i) <- operation('purchase_external'); // todo: пока пишем явно операцию
    FORM extraChargeInvoices OBJECTS i=i MODAL;
} TOOLBAR;

@defineOperationProperty(toWeightExtraCharge, 'Доп. услуги расписывать пропорционально весу', commonContainer);
@defineDocumentInterfaceProperty (invoice, toWeightExtraCharge, 'Доп. услуги расписывать пропорционально весу');
@deriveDocumentOperationProperty(UserInvoice, toWeightExtraCharge);
backgroundExtraChargeInvoice 'Цвет' = RGB(224, 255, 128);
EXTEND FORM userInvoice
    PROPERTIES(i) showExtraCharge          
    OBJECTS uid = UserInvoiceDetail FIXED GRID
    PROPERTIES (uid) READONLY SHOWIF showExtraCharge(i) index, seriesNumber[InvoiceDetail], date, idBarcodeSku, 
                   idSku, nameSku, shortNameUOMSku
    PROPERTIES (uid) READONLY SHOWIF showExtraCharge(i) quantity, 
                   price, sum, numberVAT, valueVAT, invoicePrice,
                   VATSum, invoiceSum, sumNetWeight, 
                   sumGrossWeight
    PROPERTIES(i,uid) SHOWIF showExtraCharge(i) extraChargePrice BACKGROUND backgroundExtraChargeInvoice(), 
                    extraChargeSum BACKGROUND backgroundExtraChargeInvoice() ON CHANGE changeExtraChargeSum(i,uid)                             
    FILTERS inExtraCharge(i,uid)   
                                        
    PROPERTIES SHOWIF showExtraCharge(i) toWeightExtraCharge(i), extraChargeSumUserInvoiceDetail(i) BACKGROUND backgroundExtraChargeInvoice(),
               nameSuppliers(i) READONLY BACKGROUND backgroundExtraChargeInvoice(), seriesNumberSuppliers(i) READONLY BACKGROUND backgroundExtraChargeInvoice()
;
DESIGN userInvoice {
    specification.box {        
        NEW headerExtraChargeParams {
            caption = 'Доп. услуги';
            fill = 1;
            type = CONTAINERV;
            NEW paneExtra {
                type = CONTAINERH;
                MOVE PROPERTY (toWeightExtraCharge(i));
                MOVE PROPERTY (extraChargeSumUserInvoiceDetail(i)) {minimumCharWidth = 15; preferredCharWidth = 20;}
                MOVE PROPERTY (nameSuppliers(i)) {minimumCharWidth = 15; preferredCharWidth = 20;}
                MOVE PROPERTY (seriesNumberSuppliers(i)) {minimumCharWidth = 15; preferredCharWidth = 20;}
            }
            MOVE uid.box;
        }        
    }
}
EXTEND FORM invoices 
    PROPERTIES READONLY BACKGROUND backgroundExtraChargeInvoice() nameSuppliers(i) , seriesNumberSuppliers(i) 
;

calcChargeSum(Invoice i) = NUMERIC[16,2](IF isHomeCurrency(i) THEN homeSumInvoiceDetail(i) ELSE sumInvoiceDetail(i));

fillExtraChargePriceUser 'Расписать услуги'(Invoice i) = ACTION {
    IF currency(i) THEN {    
        IF toWeightExtraCharge(i) THEN {
            extraChargeSum(i, UserInvoiceDetail d) <- 
                PARTITION UNGROUP calcChargeSum
                                    PROPORTION STRICT ROUND(2) sumGrossWeight(d) IF inExtraCharge(i, d) AND isNotCharge(sku(d)) 
                                    BY i;
            extraChargePrice(i, UserInvoiceDetail d) <-
                extraChargeSum(i, d) / quantity(d) WHERE inExtraCharge[Invoice, InvoiceDetail](i, d) AND isNotCharge(sku[InvoiceDetail](d));
        
        } ELSE {
            extraChargeSum(i, UserInvoiceDetail d) <- 
                PARTITION UNGROUP calcChargeSum
                                  PROPORTION STRICT ROUND(2) (IF isHomeCurrency(d) THEN homeSum(d) ELSE sum(d)) IF inExtraCharge(i, d) AND isNotCharge(sku(d))
                                  BY i;
            extraChargePrice(i, UserInvoiceDetail d) <-
                extraChargeSum(i, d) / quantity(d) WHERE inExtraCharge[Invoice, InvoiceDetail](i, d) AND isNotCharge(sku[InvoiceDetail](d));
        }
    } ELSE {
        MESSAGE 'Для инвойса не задана валюта.';
    }
}

EXTEND FORM userInvoice 
    PROPERTIES FORCE PANEL TOOLBAR TODRAW uid SHOWIF showExtraCharge(i)  selectExtraCharge(i), fillExtraChargePriceUser(i)
;

calcExtraChargePrice (d) = GROUP SUM extraChargePrice(UserInvoice i,UserInvoiceDetail d) IF isPosted(i) BY d; //IF isPostedUserInvoiceDetail(d)
calcExtraChargeSum (d) = GROUP SUM extraChargeSum(UserInvoice i,UserInvoiceDetail d) IF isPosted(i) BY d; //IF isPostedUserInvoiceDetail(d)

WHEN CHANGED(calcExtraChargePrice(UserInvoiceDetail d)) DO
    chargePrice (d) <- calcExtraChargePrice(d);

WHEN CHANGED(calcExtraChargeSum(UserInvoiceDetail d)) DO
    chargeSum (d) <- calcExtraChargeSum(d);
    
FORM extraCharge 'Доп услуги'
    OBJECTS d = InvoiceDetail FIXED PANEL 
    PROPERTIES (d) READONLY nameSku, chargePrice BACKGROUND backgroundChargeInvoice(), chargeSum BACKGROUND backgroundChargeInvoice()
    
    OBJECTS i = Invoice
    PROPERTIES (i) READONLY date, time, nameOperation, nameSupplier, nameSupplierStock
    PROPERTIES (i,d) READONLY BACKGROUND backgroundChargeInvoice() extraChargePrice, extraChargeSum
    FILTERS extraChargeSum(i,d),
            isPosted(i)
    ORDER BY date(i)
;

DESIGN extraCharge {
    main {
        NEW top {
            caption = 'Строка приходной накладной';
            type = CONTAINERH;
            MOVE PROPERTY (nameSku(d)) { minimumCharWidth = 50; preferredCharWidth = 80;}
            MOVE PROPERTY (chargePrice(d)) {minimumCharWidth = 15; preferredCharWidth = 15;}
            MOVE PROPERTY (chargeSum(d)){minimumCharWidth = 15; preferredCharWidth = 15;}
        }
        MOVE i.box {caption = 'Услуги';}
    }
    MOVE functions.box;
}
showExtraChargePrice 'Показать доп. услуги' (InvoiceDetail d) = ACTION NEWSESSION { FORM extraCharge OBJECTS d = d MANAGESESSION MODAL; } SHORTCUT chargePrice[InvoiceDetail];
showExtraChargeSum 'Показать доп. услуги' (InvoiceDetail d) = ACTION NEWSESSION { FORM extraCharge OBJECTS d = d MANAGESESSION MODAL; } SHORTCUT chargeSum[InvoiceDetail];

showExtraChargePrice 'Показать доп. услуги' (UserInvoiceDetail d) = ACTION NEWSESSION { FORM extraCharge OBJECTS d = d MANAGESESSION MODAL; } SHORTCUT chargePrice[UserInvoiceDetail];
showExtraChargeSum 'Показать доп. услуги' (UserInvoiceDetail d) = ACTION NEWSESSION { FORM extraCharge OBJECTS d = d MANAGESESSION MODAL; } SHORTCUT chargeSum[UserInvoiceDetail];    
    
FORM extraChargeParams 'Параметры'
    OBJECTS o = Operation FIXED PANEL 
    PROPERTIES SELECTOR name(o)
    FILTERS showExtraCharge(o)

    OBJECTS s = LegalEntity FIXED PANEL 
    PROPERTIES SELECTOR name(s)
    
    OBJECTS sk = Sku FIXED PANEL 
    PROPERTIES SELECTOR name(sk)    
    FILTERS isCharge(sk)
    
    OBJECTS c = Currency FIXED PANEL 
    PROPERTIES SELECTOR shortName(c)    
    
    OBJECTS nu = NUMERIC[16,2] FIXED PANEL 
    PROPERTIES val = OBJVALUE (nu)    
;
DESIGN extraChargeParams {
    main {
//        preferredSize = (800, 600); 
        NEW top {
            type = CONTAINERH;
            MOVE o.box;
            MOVE s.box { caption = 'Поставщик услуг';}
            MOVE sk.box { 
                caption = 'Услуга'; 
                PROPERTY (name(sk)) {minimumCharWidth = 20; preferredCharWidth = 20;}
            }
//            MOVE c.box{PROPERTY (nameCurrency(c)) {minimumCharWidth = 10; preferredCharWidth = 20;}}
            MOVE nu.box { 
                caption = 'Сумма';
                type = CONTAINERH;
                MOVE PROPERTY (shortName(c)) {caption = 'Валюта'; minimumCharWidth = 5; preferredCharWidth = 10;}
                MOVE PROPERTY (val) {
                    caption = 'Сумма услуг';
                    minimumCharWidth = 15; preferredCharWidth = 15;
                }
            }
        }
        MOVE functions.box;
    }
}

seekDefaultOperatioParams() = ACTION {
    SEEK extraChargeParams.o  operation('purchase_charge');
}
changeDefaultCurrencyParams(LegalEntity s) = ACTION {
    SEEK extraChargeParams.c  currency(s);
}    

EXTEND FORM extraChargeParams
    EVENTS ON INIT seekDefaultOperatioParams()     
    EVENTS ON CHANGE s changeDefaultCurrencyParams(s)
;
    
createExtraChargeUser 'Накладная (закупка) доп. услуги' (Invoice invoice) = ACTION {   
    FORM extraChargeParams MODAL;    
    LOCAL o = Operation();
    LOCAL s = LegalEntity(); 
    LOCAL sk = Sku();
    LOCAL nu = NUMERIC[16,2] ();
    LOCAL c = Currency();
        
    o() <- NULL;
    s() <- NULL;
    sk() <- NULL;
    nu() <- NULL;
    c() <- NULL;
     
    o() <- chosenObject('o');
    s() <- chosenObject('s');
    sk() <- chosenObject('sk');       
    nu() <- chosenNumeric('nu');
    c() <- chosenObject('c');    
    
    IF formResult() == FormResult.ok THEN {
        NEWSESSION NESTED o[],s[],sk[],nu[],c[] {
            FOR ADDOBJ i = UserInvoice DO {
                operation(i) <- o();
                supplier(i) <- s();
                customer(i) <- customer(invoice);
                currency(i) <- c();
                isHomeCurrency(i) <- TRUE WHERE (OVERRIDE currency(invoice), homeCurrency(invoice) IF isHomeCurrency(invoice)) != currency(i);
                dateRateExchange(i) <- currentDate() WHERE isHomeCurrency[Invoice](i);
                rateExchange(i) <- rateOn(typeExchange(i),currency(i),dateRateExchange(i)) WHERE isHomeCurrency[Invoice](i);                                                                                   
                
                FOR ADDOBJ d = UserInvoiceDetail DO {
                    userInvoice(d) <- i;   
                    sku(d) <- sk();
                    quantity(d) <- 1.0; 
                    price(d) <- nu();                    
                    
                }
                inExtraCharge[Invoice,UserInvoice](i,invoice) <- TRUE;
                fillExtraChargePriceUser(i);
                FORM userInvoice OBJECTS i=i MANAGESESSION DOCKEDMODAL NOCANCEL;
            }
        }
    }
}
EXTEND FORM invoices
    PROPERTIES (i) createExtraChargeUser FORCE PANEL TOOLBAR 
;
DESIGN invoices {
    createdContainer {
        MOVE PROPERTY (createExtraChargeUser(i));
    }    
}

