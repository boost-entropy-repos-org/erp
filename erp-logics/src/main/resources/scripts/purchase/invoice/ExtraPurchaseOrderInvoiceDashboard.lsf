MODULE ExtraPurchaseOrderInvoiceDashboard;

REQUIRE PurchaseOrderInvoiceDashboard;

NAMESPACE Purchase;

orderDetailInvoiceDetail = ABSTRACT OrderDetail (InvoiceDetail) PERSISTENT INDEXED;
orderDetailUserInvoiceDetail = DATA OrderDetail (UserInvoiceDetail);
orderDetailInvoiceDetail(d) += orderDetailUserInvoiceDetail(d);

countInvoiceDetailsOrderDetail = GROUP SUM 1 BY orderDetailInvoiceDetail(id);
backgroundInvoiceDetailsOrderDetail = RGB (212,255,212) IF d IS OrderDetail AND countInvoiceDetailsOrderDetail(d);
performUserInvoiceDetailOrderDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, OrderDetail);


performOrderDetailUserInvoice 'Принять' = ACTION (od, invoice) {
    FOR ADDOBJ d = UserInvoiceDetail DO {    
        
        userInvoiceUserInvoiceDetail(d) <- invoice;  
        orderDetailUserInvoiceDetail(d) <- od; 

        orderUserInvoiceDetail(d) <- orderOrderDetail(od);
        skuUserInvoiceDetail(d) <- skuOrderDetail(od);
        quantityUserInvoiceDetail (d) <- toInvoiceOrderDetail(od);
                                
        fillUserInvoiceDetailOrderDetail(d, od);
        overFillUserInvoiceDetailOrderDetail(d, od);        
        performUserInvoiceDetailOrderDetail (d,od);
    }   
} TOOLBAR EDITKEY 'BACK_SPACE';

priceLocalOrderDetail 'Цена' = DATA LOCAL NUMERIC[14,2] (OrderDetail);
quantityLocalOrderDetail 'Количество' = DATA LOCAL NUMERIC[14,3](OrderDetail);

FORM quantityPrice 'Цена и количество'
    OBJECTS od = OrderDetail FIXED PANEL
    PROPERTIES (od) READONLY nameSkuOrderDetail
    PROPERTIES (od) quantityLocalOrderDetail    
    PROPERTIES (od) priceLocalOrderDetail
        
;
DESIGN quantityPrice {
    main {
        MOVE od.box {
            type = CONTAINERV;
            caption = '';
            NEW row1 {
                MOVE PROPERTY (nameSkuOrderDetail(od)) {caption = 'Товар'; focusable = FALSE; font = 'bold 22';}
            }
            NEW row2 {
                type = CONTAINERH;
                MOVE PROPERTY (quantityLocalOrderDetail(od)) {font = 'bold 22';}
                MOVE PROPERTY (priceLocalOrderDetail(od)) {font = 'bold 22';}
            }
        }
        MOVE functions.box;
    }
}
 

correctUserInvoiceDetailOrderDetail = ABSTRACT ACTION LIST (UserInvoiceDetail, OrderDetail);
correctLocalUserOrderDetail = ABSTRACT ACTION LIST (OrderDetail);

correctOrderDetailUserInvoice 'Корректировать' = ACTION (od, invoice) {
    quantityLocalOrderDetail(od) <- quantityOrderDetail(od);
    priceLocalOrderDetail(od) <- priceOrderDetail(od);
    correctLocalUserOrderDetail(od);
    FORM quantityPrice OBJECTS od = od MODAL;

    FOR ADDOBJ d = UserInvoiceDetail DO {    
        
        userInvoiceUserInvoiceDetail(d) <- invoice;  
        orderDetailUserInvoiceDetail(d) <- od; 

        orderUserInvoiceDetail(d) <- orderOrderDetail(od);
        skuUserInvoiceDetail(d) <- skuOrderDetail(od);
        quantityUserInvoiceDetail (d) <- OVERRIDE toInvoiceOrderDetail(od), quantityLocalOrderDetail(od);
                                
//        fillUserInvoiceDetailOrderDetail(d, od);
        VATUserInvoiceDetail(d) <- VATOrderDetail(od);
        valueVATUserInvoiceDetail(d) <- valueVATOrderDetail(od);
        priceListTypeUserInvoiceDetail(d) <- priceListTypeOrderDetail(od);
        IF NOT notFillPriceInvoiceOrderOperation(operationOrderDetail(od)) THEN {
            priceUserInvoiceDetail(d) <- OVERRIDE priceOrderDetail(od), priceLocalOrderDetail(od);
            invoicePriceUserInvoiceDetail (d) <- priceUserInvoiceDetail (d) * (100 + calcValueVATUserInvoiceDetail(d)) / 100;

        }
        dataCustomerStockUserInvoiceDetail(d) <- dataCustomerStockOrderDetail(od);

        overFillUserInvoiceDetailOrderDetail(d, od);
        correctUserInvoiceDetailOrderDetail (d,od);
    }   
} TOOLBAR EDITKEY 'F9';

EXTEND FORM userInvoice
    OBJECTS od = OrderDetail FIXED GRID
    PROPERTIES READONLY SHOWIF countIncludeOrdersInvoice(i) BACKGROUND backgroundInvoiceDetailsOrderDetail(od) indexOrderDetail(od), idBarcodeSkuOrderDetail(od), nameSkuOrderDetail(od), shortNameUOMSkuOrderDetail(od),
               quantityOrderDetail(od), priceOrderDetail(od), sumOrderDetail(od), invoiceSumOrderDetail(od) 
    PROPERTIES SHOWIF countIncludeOrdersInvoice(i) performOrderDetailUserInvoice(od,i), correctOrderDetailUserInvoice(od,i)               
               
    ORDER BY  indexOrderDetail(od)          
    FILTERS  includeOrderUserInvoice(orderOrderDetail(od), i)         
    FILTERGROUP orderFilter
        FILTER 'Без выписки' NOT countInvoiceDetailsOrderDetail(od) DEFAULT 
              
    OBJECTS oid = UserInvoiceDetail FIXED GRID
    PROPERTIES (oid) SHOWIF countIncludeOrdersInvoice(i) indexUserInvoiceDetail
    PROPERTIES (oid) SHOWIF countIncludeOrdersInvoice(i) ON EDIT editSkuUserInvoiceDetail(oid) BACKGROUND backgroundSkuUserInvoiceDetail(oid) idBarcodeSkuUserInvoiceDetail, 
                   nameSkuUserInvoiceDetail, shortNameUOMSkuUserInvoiceDetail
    PROPERTIES (oid) SHOWIF countIncludeOrdersInvoice(i) quantityUserInvoiceDetail,//SHOWIF showQuantityInvoice(i) 
                   namePriceListTypeUserInvoiceDetail,
                   priceUserInvoiceDetail ON CHANGE changePriceUserInvoiceDetail(oid), sumUserInvoiceDetail,
                   numberVATUserInvoiceDetail ON CHANGE changeNumberVATUserInvoiceDetail(oid) BACKGROUND backgroundVATUserInvoiceDetail(oid),
                   valueVATUserInvoiceDetail ON CHANGE changeValueVATUserInvoiceDetail(oid) BACKGROUND backgroundVATUserInvoiceDetail(oid),
                   invoicePriceUserInvoiceDetail ON CHANGE changeInvoicePriceUserInvoiceDetail(oid),
                   VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, ADDOBJ, deleteoid=DELETESESSION            
    FILTERS  userInvoiceUserInvoiceDetail(oid) == i         
;

DESIGN userInvoice {
    NEW gippo {
        fill = 1;
        type = TABBED;
        NEW invoices {
            fill = 1;
            caption = 'Накладная';
            MOVE header.box;
            MOVE specification.box;
        }
        MOVE itemBox {
            type = TABBED;
            NEW orders{
             fill = 1;
             type = SPLITH;
             caption = 'По строкам заказа';
            
             MOVE od.box;
             MOVE oid.box;
            }
            NEW itemBox1 {
             type = SPLITH;
             fill = 1;
             caption ='По товарам';
             MOVE skuTree.tree.box;
             MOVE skuMainPane;          
            }
        }             	
    }
    MOVE functions.box;
}

extraCreateMultiUserInvoiceOrder 'Создать накладную (без строк)'= ACTION (order) NEWSESSION {
    IF order IS Order THEN {
        FOR ADDOBJ i = UserInvoice DO {

            fillHeaderUserInvoiceOrder(i, order);               
            includeOrderUserInvoice(order, i)<- TRUE;
                          
            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
        }
    }
}

numberInvoiceOrderDetail 'Номер накладной' = DATA LOCAL NESTED INTEGER (OrderDetail);
countNumberInvoiceOrder = GROUP SUM 1 IF numberInvoiceOrderDetail(d) BY orderOrderDetail(d); 

FORM selectOrderOrderDetail 'Формирование нескольких накладных'

    OBJECTS o = Order FIXED PANEL 
    
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg), skuGroupName
    
    OBJECTS d=OrderDetail
    PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, idSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
    PROPERTIES (d) READONLY quantityOrderDetail, namePriceListTypeOrderDetail, priceOrderDetail , sumOrderDetail,
                   numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                   toInvoiceOrderDetail BACKGROUND backgroundQuantityParamOrderDetail(d)
    PROPERTIES(d)  numberInvoiceOrderDetail              
    ORDER BY indexOrderDetail(d)

    FILTERS orderOrderDetail(d) == o
    FILTERGROUP filterInvoiced 
        FILTER 'Не оприходованы' toInvoiceOrderDetail(d) 'F9' DEFAULT
        
    FILTERGROUP filterGroup 
        FILTER 'По группам' isParentSkuGroupSku(sg, skuOrderDetail(d)) 'F8' DEFAULT
    
;
DESIGN selectOrderOrderDetail {
    main {
//        preferredSize = (1024, 768);  
        MOVE o.box;
        NEW top {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box;
            MOVE d.box { 
                fill = 2; 
                PROPERTY (numberInvoiceOrderDetail(d)) {background = #FFEEEE;}                
            }
        }
        MOVE functions.box;
    }
}

extraCreateInvoicesOrder 'Создать несколько накладных'= ACTION (order)  {
    numberInvoiceOrderDetail(od) <- NULL WHERE orderOrderDetail(od) == order;
    FORM selectOrderOrderDetail OBJECTS o = order MODAL;
    IF formResult() == FormResult.ok THEN {
        IF countNumberInvoiceOrder(order) THEN {
            FOR [ = GROUP SUM 1 BY numberInvoiceOrderDetail(d), orderOrderDetail(d)](num,order) DO {
                NEWSESSION {
                    FOR ADDOBJ i = UserInvoice DO {
        
                        fillHeaderUserInvoiceOrder(i, order);               
                        includeOrderUserInvoice(order, i)<- TRUE;
                        
                        FOR orderOrderDetail(orderDetail) == order AND numberInvoiceOrderDetail(orderDetail) == num AND toInvoiceOrderDetail(orderDetail) >0
                            AND inOrderDetailUserInvoice(orderDetail, i) AND NOT skipCreateUserInvoiceOrderDetail(orderDetail)
                            ORDER orderCreateUserInvoiceOrderDetail(orderDetail) 
                            ADDOBJ d = UserInvoiceDetail DO {
                                userInvoiceUserInvoiceDetail(d) <- i;
                                orderUserInvoiceDetail(d) <- order;
                                skuUserInvoiceDetail(d) <- skuOrderDetail(orderDetail);
                                batchUserInvoiceDetail(d) <- batchOrderDetail(orderDetail);
                                quantityUserInvoiceDetail (d) <- toInvoiceOrderDetail(orderDetail);
            
                                fillUserInvoiceDetailOrderDetail(d, orderDetail);
                                overFillUserInvoiceDetailOrderDetail(d, orderDetail);
                        }
                                  
                        FORM userInvoice OBJECTS i = i MANAGESESSION DOCKEDMODAL;
                    }
                }
            }
            numberInvoiceOrderDetail(od) <- NULL WHERE orderOrderDetail(od) == order;
        } ELSE {
            MESSAGE 'Не задано количество накладных для формирования';
        }
        
    }    
}

EXTEND FORM orderInvoiceDashboard
PROPERTIES(o) FORCE PANEL TOOLBAR   AFTER createMultiUserInvoice(o) extraCreateMultiUserInvoiceOrder, extraCreateInvoicesOrder
                       
;
