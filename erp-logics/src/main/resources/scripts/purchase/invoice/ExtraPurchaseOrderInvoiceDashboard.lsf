MODULE ExtraPurchaseOrderInvoiceDashboard;

REQUIRE PurchaseOrderInvoiceDashboard;

NAMESPACE Purchase;

countInvoiceDetails = GROUP SUM 1 BY orderDetail(InvoiceDetail id);
backgroundInvoiceDetails = RGB (212,255,212) IF OrderDetail d IS OrderDetail AND countInvoiceDetails(d);
perform = ACTION ABSTRACT LIST (UserInvoiceDetail, OrderDetail);


perform 'Принять'(OrderDetail od, UserInvoice invoice) = ACTION {
    FOR ADDOBJ d = UserInvoiceDetail DO {    
        
        userInvoice(d) <- invoice;  

        orderDetail(d) <- od;
        sku(d) <- sku(od);
        quantity (d) <- toInvoice(od);
                                
        fill(d, od);
        overFill(d, od);        
        perform (d,od);
    }   
} TOOLBAR EDITKEY 'BACK_SPACE';

priceLocal 'Цена' = DATA LOCAL NUMERIC[16,4] (OrderDetail);
quantityLocal 'Количество' = DATA LOCAL NUMERIC[14,3](OrderDetail);

FORM quantityPrice 'Цена и количество'
    OBJECTS od = OrderDetail FIXED PANEL
    PROPERTIES (od) READONLY nameSku
    PROPERTIES (od) quantityLocal    
    PROPERTIES (od) priceLocal
        
;
DESIGN quantityPrice {
    main {
        MOVE od.box {
            type = CONTAINERV;
            caption = '';
            NEW row1 {
                MOVE PROPERTY (nameSku(od)) {caption = 'Товар'; focusable = FALSE; font = 'bold 22';}
            }
            NEW row2 {
                type = CONTAINERH;
                MOVE PROPERTY (quantityLocal(od)) {font = 'bold 22';}
                MOVE PROPERTY (priceLocal(od)) {font = 'bold 22';}
            }
        }
        MOVE functions.box;
    }
}
 

correct = ACTION ABSTRACT LIST (UserInvoiceDetail, OrderDetail);
correctLocalUser = ACTION ABSTRACT LIST (OrderDetail);

correct 'Корректировать'(OrderDetail od, UserInvoice invoice) = ACTION {
    quantityLocal(od) <- quantity(od);
    priceLocal(od) <- price(od);
    correctLocalUser(od);
    FORM quantityPrice OBJECTS od = od ;

    FOR ADDOBJ d = UserInvoiceDetail DO {    
        
        userInvoice(d) <- invoice;  

        orderDetail(d) <- od;
        sku(d) <- sku(od);
        quantity (d) <- OVERRIDE toInvoice(od), quantityLocal(od);
                                
        VAT(d) <- VAT(od);
        valueVAT(d) <- valueVAT(od);
        priceListType(d) <- priceListType(od);
        IF NOT notFillPriceInvoiceOrder(operation(od)) THEN {
            price(d) <- OVERRIDE price(od), priceLocal(od);
            invoicePrice (d) <- price (d) * (100 + calcValueVAT(d)) / 100;

        }

        overFill(d, od);
        correct (d,od);
    }   
} TOOLBAR EDITKEY 'F9';

EXTEND FORM userInvoice
    OBJECTS od = OrderDetail FIXED GRID
    PROPERTIES READONLY SHOWIF countIncludeOrders(i) BACKGROUND backgroundInvoiceDetails(od) index(od), idBarcodeSku(od), nameSku(od), shortNameUOMSku(od),
               quantity(od), price(od), sum(od), invoiceSum(od) 
    PROPERTIES SHOWIF countIncludeOrders(i) perform(od,i), correct(od,i)               
               
    ORDER BY  index(od)          
    FILTERS  include(order(od), i)         
    FILTERGROUP orderFilter
        FILTER 'Без выписки' NOT countInvoiceDetails(od) DEFAULT 
              
    OBJECTS oid = UserInvoiceDetail FIXED GRID
    PROPERTIES (oid) SHOWIF countIncludeOrders(i) index
    PROPERTIES (oid) SHOWIF countIncludeOrders(i) ON EDIT editSku(oid) BACKGROUND backgroundSku(oid) idBarcodeSku, 
                   nameSku, shortNameUOMSku
    PROPERTIES (oid) SHOWIF countIncludeOrders(i) quantity,//SHOWIF showQuantityInvoice(i) 
                   namePriceListType,
                   price ON CHANGE changePrice(oid), sum,
                   numberVAT ON CHANGE changeNumberVAT(oid) BACKGROUND backgroundVAT(oid),
                   valueVAT ON CHANGE changeValueVAT(oid) BACKGROUND backgroundVAT(oid),
                   invoicePrice ON CHANGE changeInvoicePrice(oid),
                   VATSum, invoiceSum, ADDOBJ, deleteoid=DELETESESSION            
    FILTERS  userInvoice(oid) == i         
;

DESIGN userInvoice {
    NEW gippo {
        fill = 1;
        type = TABBED;
        NEW invoices {
            fill = 1;
            caption = 'Накладная';
            MOVE header.box;
            MOVE specification.box;
        }
        MOVE itemBox {
            type = TABBED;
            NEW orders{
             fill = 1;
             type = SPLITH;
             caption = 'По строкам заказа';
            
             MOVE od.box;
             MOVE oid.box;
            }
            NEW itemBox1 {
             type = SPLITH;
             fill = 1;
             caption ='По товарам';
             MOVE skuTree.tree.box;
             MOVE skuMainPane;          
            }
        }             	
    }
    MOVE functions.box;
}

extraCreateMultiUserInvoice 'Создать накладную (без строк)'(Order order)= ACTION NEWSESSION {
    IF order IS Order THEN {
        FOR ADDOBJ i = UserInvoice DO {

            fillHeader(i, order);               
            include(order, i)<- TRUE;
                          
            FORM userInvoice OBJECTS i = i MANAGESESSION DOCKED NOCANCEL;
        }
    }
}

numberInvoice 'Номер накладной' = DATA LOCAL NESTED INTEGER (OrderDetail);
countNumberInvoice = GROUP SUM 1 IF numberInvoice(OrderDetail d) BY order(d); 

FORM selectOrderOrderDetail 'Формирование нескольких накладных'

    OBJECTS o = Order FIXED PANEL 
    
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER BY order(sg), skuGroupName
    
    OBJECTS d=OrderDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY quantity, namePriceListType, price , sum,
                   numberVAT, valueVAT, VATSum, invoiceSum,
                   toInvoice BACKGROUND backgroundQuantityParam(d)
    PROPERTIES(d)  numberInvoice              
    ORDER BY index(d)

    FILTERS order(d) == o
    FILTERGROUP filterInvoiced 
        FILTER 'Не оприходованы' toInvoice(d) 'F9' DEFAULT
        
    FILTERGROUP filterGroup 
        FILTER 'По группам' isParent(sg, sku(d)) 'F8' DEFAULT
    
;
DESIGN selectOrderOrderDetail {
    main {
//        preferredSize = (1024, 768);  
        MOVE o.box;
        NEW top {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box;
            MOVE d.box { 
                fill = 2; 
                PROPERTY (numberInvoice(d)) {background = #FFEEEE;}                
            }
        }
        MOVE functions.box;
    }
}

extraCreateInvoices 'Создать несколько накладных'(Order order)= ACTION  {
    numberInvoice(OrderDetail od) <- NULL WHERE order(od) == order;
    FORM selectOrderOrderDetail OBJECTS o = order ;
    IF formResult() == FormResult.ok THEN {
        IF countNumberInvoice(order) THEN {
            FOR [ = GROUP SUM 1 BY numberInvoice(OrderDetail d), order(d)](INTEGER num,order) DO {
                NEWSESSION {
                    FOR ADDOBJ i = UserInvoice DO {
        
                        fillHeader(i, order);               
                        include(order, i)<- TRUE;
                        
                        FOR order(OrderDetail orderDetail) == order AND numberInvoice(orderDetail) == num AND toInvoice(orderDetail) >0
                            AND in(orderDetail, i) AND NOT skipCreateUserInvoice(orderDetail)
                            ORDER orderCreateUserInvoice(orderDetail) 
                            ADDOBJ d = UserInvoiceDetail DO {
                                userInvoice(d) <- i;
                                orderDetail(d) <- orderDetail;
                                sku(d) <- sku(orderDetail);
                                batch(d) <- batch(orderDetail);
                                quantity (d) <- toInvoice(orderDetail);
            
                                fill(d, orderDetail);
                                overFill(d, orderDetail);
                        }
                                  
                        FORM userInvoice OBJECTS i = i MANAGESESSION DOCKED NOCANCEL;
                    }
                }
            }
            numberInvoice(OrderDetail od) <- NULL WHERE order(od) == order;
        } ELSE {
            MESSAGE 'Не задано количество накладных для формирования';
        }
        
    }    
}

EXTEND FORM orderInvoiceDashboard
PROPERTIES(o) FORCE PANEL TOOLBAR   AFTER createMultiUserInvoice(o) extraCreateMultiUserInvoice, extraCreateInvoices
                       
;
