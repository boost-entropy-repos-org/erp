MODULE PurchaseInvoice;

REQUIRE Utils, PurchaseOrder, OrderInvoice, PurchaseOperation, CustomsGroup, PriceListStock, PriceListLedger;

NAMESPACE Purchase;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (закупка)', customerStock, supplier, company);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, supplier);

// Добавляем партии
@defineInvoiceBatch(customerStock);
@defineInvoiceBatchDialog();

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

// вторая валюта
@defineInvoiceHomeCurrency();
                                               
// страна
countryInvoiceDetail(invoiceDetail) = countryStock(customerStockInvoice(invoiceInvoiceDetail(invoiceDetail)));
countryUserInvoiceDetail(invoiceDetail) = countryStock(customerStockUserInvoice(userInvoiceUserInvoiceDetail(invoiceDetail)));

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(invoice, i);

@defineDocumentOperationPriceListType(userInvoice, 'накладной (закупка)');

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplierStock, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplierStock, userInvoice);
@defineDocumentOperationStock(userInvoice, customerStock, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customerStock, userInvoice);

@defineDocumentOperationRole(userInvoice);

@defineOperationProperty(isHomeCurrency, 'Конвертация', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, isHomeCurrency);

// -------------------------------------------- Инвойс на основе заказа -------------------------------------- //

@defineOrderInvoice(' (закупка)', customerStock);

// --------------------------- Себестоимость ---------------------------------- //

extraCostPriceInvoiceDetail = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT;
extraCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) PERSISTENT;
extraCostPriceInvoiceDetail (detail) += extraCostPriceUserInvoiceDetail(detail);

customCostPriceInvoiceDetail = ABSTRACT NUMERIC[16,4](InvoiceDetail) PERSISTENT;
customCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[16,4](UserInvoiceDetail) PERSISTENT;
customCostPriceInvoiceDetail(detail) += customCostPriceUserInvoiceDetail(detail);

certificateCostPriceInvoiceDetail = ABSTRACT NUMERIC[16,4](InvoiceDetail) PERSISTENT;
certificateCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[16,4](UserInvoiceDetail) PERSISTENT;
certificateCostPriceInvoiceDetail(detail) += certificateCostPriceUserInvoiceDetail(detail);

incomePriceInvoiceDetail (detail) = IF isHomeCurrencyInvoice(invoiceInvoiceDetail(detail)) THEN
                                       homePriceInvoiceDetail(detail)
                                    ELSE priceInvoiceDetail(detail);
incomeSumInvoice(invoice) = GROUP SUM incomePriceInvoiceDetail(detail) * quantityInvoiceDetail(detail) BY invoiceInvoiceDetail(detail);

incomePriceUserInvoiceDetail (detail) = IF isHomeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(detail)) THEN
                                           homePriceUserInvoiceDetail(detail)
                                        ELSE priceUserInvoiceDetail(detail);
incomeSumUserInvoice(invoice) = GROUP SUM incomePriceUserInvoiceDetail(detail) * quantityUserInvoiceDetail(detail) BY userInvoiceUserInvoiceDetail(detail);

costPriceInvoiceDetail(detail) = NUMERIC[14,2] (incomePriceInvoiceDetail(detail) (+) extraCostPriceInvoiceDetail(detail) (+)
                                                customCostPriceInvoiceDetail(detail) (+) certificateCostPriceInvoiceDetail(detail));

costPriceUserInvoiceDetail(detail) = NUMERIC[14,2] (incomePriceUserInvoiceDetail(detail) (+) extraCostPriceUserInvoiceDetail(detail) (+)
                                                    customCostPriceUserInvoiceDetail(detail) (+) certificateCostPriceUserInvoiceDetail(detail));

// -------------------------------------- Формирование задолженности ---------------------------------------------------

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserInvoice);
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, customerStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

//overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
//    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
//        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
//    }
//}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserInvoice(ks, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(ks, i)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserInvoice(i), ks)
        FILTER 'В ассортименте ' 'F7' companyALedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(i, ks), ks, customerStockUserInvoice(i), dateTimeUserInvoice(i)) == supplierUserInvoice(i)
;
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserInvoice(b, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailBatchUserInvoice(b, i)
    FILTERGROUP filter4
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserInvoice(i), skuBatch(b))
        FILTER 'В ассортименте ' 'F7' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserInvoiceBatch(i, b), b, customerStockUserInvoice(i), dateTimeUserInvoice(i)) == supplierUserInvoice(i)
;

// Резервы
@extendFormDocumentSkuOrderLedger(userInvoice, userInvoice, i, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------- Заполнение кода партии ----------------- //

idBatchInvoiceDetail 'Код партии' = ABSTRACT VARSTRING[100] (InvoiceDetail) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatchUserInvoiceDetail 'Код партии' = DATA VARSTRING[100] (UserInvoiceDetail) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatchInvoiceDetail(detail) += idBatchUserInvoiceDetail(detail);

backgroundBatchInvoiceDetail 'Цвет' (detail) = RGB(204, 204, 204) IF batchInvoiceDetail(detail);

EXTEND FORM userInvoice
    PROPERTIES(d) BACKGROUND backgroundBatchInvoiceDetail(d) READONLYIF batchInvoiceDetail(d) SHOWIF showIDs()
                  idBatchUserInvoiceDetail AFTER nameBatchUserInvoiceDetail(d)
;
EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundBatchInvoiceDetail(d) SHOWIF showIDs()
                  idBatchInvoiceDetail AFTER nameBatchInvoiceDetail(d)
;

// --------------- Проведение по регистру закупок ------------- //

@implementPurchaseLedger(Invoice, sku, customerStock);
supplierPurchaseLedger (ledger) += supplierInvoiceDetail(ledger);
quantityPurchaseLedger (ledger) += quantityInvoiceDetail(ledger);
VATPurchaseLedger (ledger) += VATInvoiceDetail(ledger);
sumPurchaseLedger (ledger) += sumInvoiceDetail(ledger);

// --------------- Проведение по регистру цен ------------- //

EXTEND CLASS InvoiceDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(ledger);

skuPriceListLedger (ledger) += skuInvoiceDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(ledger);

companyPriceListLedger (ledger) += supplierInvoiceDetail(ledger);

inPriceListLedgerStock (ledger, stock) += customerStockInvoiceDetail(ledger) == stock;

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoiceStockPriceListType 'Закупки (последняя по складу)' }
batchLedgerPriceListTypeStock (type, stock) += WHEN type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType AND isCompanyStock(stock)
                                               THEN explicitBatchLedgerStock(stock);
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(priceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(priceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType THEN priceInvoiceDetail(ledger);

//Учетные цены и суммы для партий
purchaseInvoiceStockPriceBBatchStockDate 'Цена поставщика (на утро)' (batch, stock, date) =
    prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, toDateTime(date));
purchaseInvoiceStockPriceABatchStockDate 'Цена  поставщика (на вечер)' (batch, stock, date) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, toDateTime(sumDate(date,1)));

purchaseInvoiceStockSumBBatchStockDate 'Сумма поставщика (на утро)' (batch, stock, date) =
    balanceBBatchStockDate(batch, stock, date) * purchaseInvoiceStockPriceBBatchStockDate(batch, stock, date);
purchaseInvoiceStockSumABatchStockDate 'Сумма поставщика (на вечер)' (batch, stock, date) =
    balanceABatchStockDate(batch, stock, date) * purchaseInvoiceStockPriceABatchStockDate(batch, stock, date);

purchaseInvoiceStockSumBBatchesStockDate 'Сумма поставщика (на утро)' (stock, date) =
    GROUP SUM purchaseInvoiceStockSumBBatchStockDate(batch, stock, date)
    BY stock, date;
purchaseInvoiceStockSumABatchesStockDate 'Сумма поставщика (на вечер)' (stock, date) =
    GROUP SUM purchaseInvoiceStockSumABatchStockDate(batch, stock, date)
    BY stock, date;

purchaseInvoiceStockSumBSkuGroupBatchStockDate 'Сумма поставщика (на утро)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumBBatchStockDate(batch, stock, date)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, date;
purchaseInvoiceStockSumRecBSkuGroupBatchStockDate 'Сумма поставщика (на утро)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumBBatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;

purchaseInvoiceStockSumASkuGroupBatchStockDate 'Сумма поставщика (на вечер)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumABatchStockDate(batch, stock, date)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, date;
purchaseInvoiceStockSumRecASkuGroupBatchStockDate 'Сумма поставщика на (вечер)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumABatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;

// ----------------- Текущие ---------------------- //

currentPurchaseInvoiceStockPriceBatchStock 'Цена поставщика' (batch, stock) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, currentDateTime());
currentPurchaseInvoiceStockSumBatchStock 'Сумма поставщика' (batch, stock) =
    currentBalanceBatchStock(batch, stock) * currentPurchaseInvoiceStockPriceBatchStock(batch, stock);

purchaseInvoiceStockPriceBatchStockDateTime 'Цена поставщика' (batch, stock, dateTime) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, dateTime);
    
purchaseInvoiceStockPriceBBatchStockDateTime 'Цена поставщика' (batch, stock, dateTime) =
    prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, dateTime);    
purchaseInvoiceStockSumBBatchStockDateTime 'Сумма поставщика' (batch, stock, dateTime) =
    balanceBBatchStockDateTime(batch, stock, dateTime) * purchaseInvoiceStockPriceBBatchStockDateTime(batch, stock, dateTime);

purchaseInvoiceStockSumBSkuGroupBatchStockDateTime 'Сумма поставщика (на утро)' (group, stock, dateTime) =
    GROUP SUM purchaseInvoiceStockSumBBatchStockDateTime(batch, stock, dateTime)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, dateTime;
purchaseInvoiceStockSumRecBSkuGroupBatchStockDateTime 'Сумма поставщика (на утро)' (group, stock, dateTime) =
    GROUP SUM purchaseInvoiceStockSumBBatchStockDateTime(batch, stock, dateTime) IF isParentGroupBatch(group, batch)
    BY group, stock, dateTime;
    
// Создаем вид цен по всем складам компании
CLASS InvoicePriceListLedger : PriceListLedger;

@defineAggregation(invoiceDetail, invoicePriceListLedger, isInvoiceDetail);

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

skuPriceListLedger (ledger) += skuInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

companyPriceListLedger (ledger) += supplierInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

inPriceListLedgerStock (ledger, stock) += isCompanyStock(stock) AND priceStockGroupStock(customerStockInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) == priceStockGroupStock(stock);

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoicePriceListType 'Закупки (последняя по ценовой группе)' }
batchLedgerPriceListTypeStock (type, stock) += WHEN type == SystemLedgerPriceListType.purchaseInvoicePriceListType AND isCompanyStock(stock)
                                               THEN explicitBatchLedgerStock(stock);
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.purchaseInvoicePriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.purchaseInvoicePriceListType THEN priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));


NAVIGATOR {
    purchasePurchaseNavigator {
        ADD invoices;
    }
}

//Платежи
@defineInvoicePayment();

