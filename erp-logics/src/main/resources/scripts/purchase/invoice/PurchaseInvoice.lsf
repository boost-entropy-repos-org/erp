MODULE PurchaseInvoice;

REQUIRE Utils, PurchaseOrder, OrderInvoice, PurchaseOperation, PriceListLedger;

NAMESPACE Purchase;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (закупка)', customer, supplier, company, , Purchase);

idCustomerStock(Invoice invoice) = id(customerStock(invoice));
idSupplierStock(Invoice invoice) = id(supplierStock(invoice));
//
//numberByTime(i) = [=GROUP LAST 1 BY supplierInvoice(i) ORDER timeInvoice(i)](supplierInvoice(i)); 
//
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, company);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, customer, company);
@extendFormFilterAccessLegalEntity(Invoice, i, invoices, supplier, supplier);

in(Invoice i) += i IS Invoice;

// Добавляем партии
@defineInvoiceBatch(customer, , Purchase, ' (закупка)');
@defineInvoiceBatchDialog();

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

// вторая валюта
@defineInvoiceHomeCurrency();
                                              
// страна
country(InvoiceDetail invoiceDetail) = country(customerStock(invoice(invoiceDetail)));
country(UserInvoiceDetail invoiceDetail) = country(customerStock(userInvoice(invoiceDetail)));

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(invoice, i);
@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, 'накладная (закупка)', Purchase);

@defineDocumentOperationPriceListType(userInvoice, 'накладной (закупка)', userInvoice);

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRoleOver(userInvoice, purchase);
        
@defineOperationProperty(isHomeCurrency, 'Конвертация', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, isHomeCurrency);

typeExchange = DATA TypeExchange (Operation);
nameTypeExchange 'Тип обмена' (Operation operation) = name(typeExchange(operation));

EXTEND FORM operation
     PROPERTIES(o) nameTypeExchange AFTER isHomeCurrency(o)
 ;
DESIGN operation {
    commonContainer {
        MOVE PROPERTY(nameTypeExchange(o));
    }
}
    
@deriveDocumentOperationProperty(UserInvoice, typeExchange);

operation[Invoice.Invoice](Invoice o) += operation(o);
// Добавляем в копирование инвойсов
overCopy(Invoice s, UserInvoice d) += ACTION {
    ASSIGN operation(d) <- operation(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceSupplier);
// -------------------------------------------- Инвойс на основе заказа -------------------------------------- //

notFillPriceInvoiceOrder 'Не использовать цены в накладной из заказа' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) notFillPriceInvoiceOrder
;

DESIGN operation {
    createContainer {
        MOVE PROPERTY(notFillPriceInvoiceOrder(o));
    }
}

@defineOrderInvoice(' (закупка)', customer);

// --------------------------- Себестоимость ---------------------------------- //

extraCostPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) PERSISTENT;
extraCostPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) PERSISTENT INDEXED;
extraCostPrice (UserInvoiceDetail detail) += extraCostPrice(detail);

customCostPrice = ABSTRACT NUMERIC[20,8](InvoiceDetail) PERSISTENT;
customCostPrice = ABSTRACT NUMERIC[20,8](UserInvoiceDetail) PERSISTENT INDEXED;
customCostPrice(UserInvoiceDetail detail) += customCostPrice(detail);

certificateCostPrice = ABSTRACT NUMERIC[16,4](InvoiceDetail) PERSISTENT;
certificateCostPrice = ABSTRACT NUMERIC[16,4](UserInvoiceDetail) PERSISTENT INDEXED;
certificateCostPrice(UserInvoiceDetail detail) += certificateCostPrice(detail);

incomePrice (InvoiceDetail detail) = IF isHomeCurrency(invoice(detail)) THEN
                                       homePrice(detail)
                                    ELSE price(detail);
incomeSum(invoice) = GROUP SUM incomePrice(InvoiceDetail detail) * quantity(detail) BY invoice(detail);

incomePrice (UserInvoiceDetail detail) = IF isHomeCurrency(userInvoice(detail)) THEN
                                           homePrice(detail)
                                        ELSE price(detail);
incomeSum(invoice) = GROUP SUM incomePrice(UserInvoiceDetail detail) * quantity(detail) BY userInvoice(detail);

// todo : переделать на обычный +, чтобы incomePriceInvoiceDetail суммировался с остальными через OVERRIDE, 0
costPrice(InvoiceDetail detail) = NUMERIC[14,2] (incomePrice(detail) (+) extraCostPrice(detail) (+)
                                                customCostPrice(detail) (+) certificateCostPrice(detail)) IF incomePrice(detail);

costPrice(UserInvoiceDetail detail) = NUMERIC[14,2] (incomePrice(detail) (+) extraCostPrice(detail) (+)
                                                    customCostPrice(detail) (+) certificateCostPrice(detail)) IF incomePrice(detail);

//-- Суммы
extraCostSum = ABSTRACT NUMERIC[16,2] (InvoiceDetail);
extraCostSum = ABSTRACT NUMERIC[16,2] (UserInvoiceDetail);
extraCostSum (UserInvoiceDetail detail) += extraCostSum(detail);

customCostSum = ABSTRACT NUMERIC[16,2](InvoiceDetail);
customCostSum = ABSTRACT NUMERIC[16,2](UserInvoiceDetail);
customCostSum(UserInvoiceDetail detail) += customCostSum(detail);

certificateCostSum = ABSTRACT NUMERIC[16,2](InvoiceDetail);
certificateCostSum = ABSTRACT NUMERIC[16,2](UserInvoiceDetail);
certificateCostSum(UserInvoiceDetail detail) += certificateCostSum(detail);

incomeSum (UserInvoiceDetail detail) = IF isHomeCurrency(invoice(detail)) THEN
                                       homeSum(detail)
                                    ELSE sum(detail);

costSum(UserInvoiceDetail detail) = NUMERIC[16,2] (incomeSum(detail) (+) extraCostSum(detail) (+)
                                                customCostSum(detail) (+) certificateCostSum(detail)) IF incomeSum(detail);
                                                
// -------------------------------------- Формирование задолженности ---------------------------------------------------

CONSTRAINT supplier(UserInvoice userInvoice) AND NOT isSupplier(supplier(userInvoice))
    CHECKED BY supplier[UserInvoice] MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserInvoice userInvoice) AND NOT isCompany(customer(userInvoice))
    CHECKED BY customer[UserInvoice] MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся компанией';

CONSTRAINT filterInvoiceSupplier() AND NOT isSupplier(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier[] MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterInvoiceCustomer() AND NOT isCompany(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer[] MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся компанией';      
CONSTRAINT filterInvoiceCustomerStock() AND NOT isCompany(filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Для фильтра в накладной выбран в качестве склада покупателя склад, который не принадлежит компании';          
    
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT in(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT in(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';    

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
packQuantity[Invoice.InvoiceDetail](InvoiceDetail detail) += packQuantity(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, customerStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

//overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
//    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
//        ASSIGN packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
//    }
//}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, i) 'F10'
        FILTER 'В документе ' quantityUserInvoiceDetail(ks, i) 'F9'
    FILTERGROUP filter2
        FILTER 'С поступлением ' quantityPurchaseSupplier(supplier(i), ks) 'F8'
        FILTER 'В прайсе ' priceA(priceListType(i, ks),ks,customerStock(i),supplier(i),dateTime(i)) 'F7'
;
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(b, i) 'F9'
        
    FILTERGROUP filter4
        FILTER 'С поступлением ' quantityPurchaseSupplier(supplier(i), sku(b)) 'F8'
        FILTER 'В прайсе ' companyA(priceListType(i, b),b,customerStock(i),dateTime(i)) == supplier(i) 'F7'
;

// Резервы
@extendFormDocumentSkuOrderLedger(invoice, userInvoice, i, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------- Заполнение кода партии ----------------- //

idBatch 'Код партии' = ABSTRACT VARSTRING[100] (InvoiceDetail) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatch 'Код партии' = DATA VARSTRING[100] (UserInvoiceDetail) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatch(UserInvoiceDetail detail) += idBatch(detail);

@defineMovementIdBatch(invoiceDetail, batch, customerStock);
@defineBalancesIdBatch(invoiceDetail, batch);
@defineMovementIdBatch(userInvoiceDetail, batch, customerStock);
@defineBalancesIdBatch(userInvoiceDetail, batch);

backgroundBatch 'Цвет' (InvoiceDetail detail) = RGB(204, 204, 204) IF batch(detail);

EXTEND FORM userInvoice
    PROPERTIES(d) BACKGROUND backgroundBatch(d) READONLYIF batch(d) SHOWIF showIDs()
                  idBatch AFTER nameBatch(d)
;
EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundBatch(d) SHOWIF showIDs()
                  idBatch AFTER nameBatch(d)
;

// -------------------------------- Наименования для документов --------------------------- //

documentNameSku 'Наименование для документов' = ABSTRACT VARISTRING[255] (InvoiceDetail) MINCHARWIDTH 30 PREFCHARWIDTH 60;
documentNameSku 'Наименование для документов' = DATA VARISTRING[255] (UserInvoiceDetail) MINCHARWIDTH 30 PREFCHARWIDTH 60;
documentNameSku(UserInvoiceDetail detail) += documentNameSku(detail);

EXTEND FORM userInvoice
    PROPERTIES(d) documentNameSku AFTER nameSku(d) SHOWIF useDocumentNameSku()
;
EXTEND FORM invoices
    PROPERTIES(d) READONLY documentNameSku AFTER nameSku(d) SHOWIF useDocumentNameSku()
;

// --------------- Проведение по регистру закупок ------------- //

@implementPurchaseLedger(Invoice, sku, customerStock);
supplier (InvoiceDetail ledger) += supplier(ledger);
supplierStock (InvoiceDetail ledger) += supplierStock(ledger);
quantity[PurchaseLedger] (InvoiceDetail ledger) += quantity(ledger);
VAT[PurchaseLedger] (InvoiceDetail ledger) += VAT(ledger);
sum[PurchaseLedger] (InvoiceDetail ledger) += invoiceSum(ledger);
price[PurchaseLedger] (InvoiceDetail ledger) += price(ledger);
currency(InvoiceDetail ledger) += currency(ledger);
skip[PurchaseLedger] (InvoiceDetail ledger) += skipPurchaseLedger(operation(ledger));

// --------------- Проведение по регистру цен ------------- //

EXTEND CLASS InvoiceDetail : PriceListLedger;

fromDateTime (InvoiceDetail ledger) += dateTime(ledger);

isPosted[PriceListLedger](InvoiceDetail ledger) += isPosted(ledger);

sku[PriceListLedger] (InvoiceDetail ledger) += sku(ledger);

description[PriceListLedger] (InvoiceDetail ledger) += description(ledger);

company (InvoiceDetail ledger) += supplier(ledger);

in (InvoiceDetail ledger, Stock stock) += customerStock(ledger) == stock;

edit[PriceListLedger](InvoiceDetail d) += ACTION edit(d);

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoiceStockPriceListType 'Закупки (последняя по складу)' }
batch (SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType AND isCompany(stock)
                                               THEN TRUE; //priceBatchLedgerStock(stock); для закупки последняя по складу, всегда свои цены для складов
in (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType THEN TRUE;
price (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType THEN price(ledger);
differentOrganizations(SystemLedgerPriceListType type) += WHEN type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType THEN TRUE;  

//Учетные цены и суммы для партий
purchaseInvoiceStockPriceB 'Цена поставщика (на утро)' (Batch batch, Stock stock, DATE date) =
    prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, toDateTime(date));
purchaseInvoiceStockPriceA 'Цена  поставщика (на вечер)' (Batch batch, Stock stock, DATE date) =
    prevPriceA[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, toDateTime(sum(date,1)));

purchaseInvoiceStockSumB 'Сумма поставщика (на утро)' (Batch batch, Stock stock, DATE date) =
    balanceB(batch, stock, date) * purchaseInvoiceStockPriceB(batch, stock, date);
purchaseInvoiceStockSumA 'Сумма поставщика (на вечер)' (Batch batch, Stock stock, DATE date) =
    balanceA(batch, stock, date) * purchaseInvoiceStockPriceA(batch, stock, date);

purchaseInvoiceStockSumBBatches 'Сумма поставщика (на утро)' (stock, date) =
    GROUP SUM purchaseInvoiceStockSumB(Batch batch, Stock stock, DATE date)
    BY stock, date;
purchaseInvoiceStockSumABatches 'Сумма поставщика (на вечер)' (stock, date) =
    GROUP SUM purchaseInvoiceStockSumA(Batch batch, Stock stock, DATE date)
    BY stock, date;

purchaseInvoiceStockSumBSkuBatch 'Сумма поставщика (на утро)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumB(Batch batch, Stock stock, DATE date)
    BY group(GroupType groupType, sku(batch)), stock, date;
purchaseInvoiceStockSumRecBSkuBatch 'Сумма поставщика (на утро)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumB(Batch batch, Stock stock, DATE date) IF isParent(Group group, batch)
    BY group, stock, date;

purchaseInvoiceStockSumASkuBatch 'Сумма поставщика (на вечер)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumA(Batch batch, Stock stock, DATE date)
    BY group(GroupType groupType, sku(batch)), stock, date;
purchaseInvoiceStockSumRecASkuBatch 'Сумма поставщика на (вечер)' (group, stock, date) =
    GROUP SUM purchaseInvoiceStockSumA(Batch batch, Stock stock, DATE date) IF isParent(Group group, batch)
    BY group, stock, date;

// ----------------- Текущие ---------------------- //

currentPurchaseInvoiceStockPrice 'Цена поставщика' (Batch batch, Stock stock) =
    prevPriceA[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, currentDateTime());
currentPurchaseInvoiceStockSum 'Сумма поставщика' (Batch batch, Stock stock) =
    currentBalance(batch, stock) * currentPurchaseInvoiceStockPrice(batch, stock);

purchaseInvoiceStockPrice 'Цена поставщика' (Batch batch, Stock stock, DATETIME dateTime) =
    prevPriceA[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, dateTime);
    
purchaseInvoiceStockPriceB 'Цена поставщика' (Batch batch, Stock stock, DATETIME dateTime) =
    prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, batch, stock, dateTime);    
purchaseInvoiceStockSumB 'Сумма поставщика' (Batch batch, Stock stock, DATETIME dateTime) =
    balanceB(batch, stock, dateTime) * purchaseInvoiceStockPriceB(batch, stock, dateTime);

purchaseInvoiceStockSumBSkuBatch 'Сумма поставщика (на утро)' (group, stock, dateTime) =
    GROUP SUM purchaseInvoiceStockSumB(Batch batch, Stock stock, DATETIME dateTime)
    BY group(GroupType groupType, sku(batch)), stock, dateTime;
purchaseInvoiceStockSumRecBSkuBatch 'Сумма поставщика (на утро)' (group, stock, dateTime) =
    GROUP SUM purchaseInvoiceStockSumB(Batch batch, Stock stock, DATETIME dateTime) IF isParent(Group group, batch)
    BY group, stock, dateTime;

// Добавляем на форму остаток до
balanceB 'Остаток (до)' (UserInvoiceDetail d) = prevBalanceB(sku(d), customerStock(d), dateTime(d));
EXTEND FORM userInvoice
    PROPERTIES(d) READONLY balanceB 
;
    
//-- Курс обмена
EXTEND CLASS SystemLedgerPriceListType { rateExchangeStockPriceListType 'Курс обмена (последний по складу)' }
batch (SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.rateExchangeStockPriceListType AND isCompany(stock)
                                               THEN priceBatchLedger(stock);
in (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN isHomeCurrency(ledger) AND type == SystemLedgerPriceListType.rateExchangeStockPriceListType THEN TRUE;
price (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN isHomeCurrency(ledger) AND type == SystemLedgerPriceListType.rateExchangeStockPriceListType THEN NUMERIC[14,2](rateExchange(ledger));

NAVIGATOR {
    purchasePurchaseNavigator {
        ADD invoices;
    }
}

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEdit (Invoice i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserInvoice i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i); 

overPreventClose (UserInvoice i) += preventCloseDocument(currentUser(), operation(i));

dateBanBarcode 'Дата запрета приемки накладных без штрихкодов'  = DATA DATE (Stock); 
dateBanValueVAT 'Дата запрета приемки накладных без ставки НДС'  = DATA DATE (Stock); 

EXTEND FORM options
    PROPERTIES(s) dateBanBarcode, dateBanValueVAT      
;

CONSTRAINT  isPosted(InvoiceDetail d) AND isItem(sku(d)) AND 
    date(d) >= dateBanValueVAT(customerStock(d)) AND NOT valueVAT(d)
        MESSAGE 'Для строки накладной (закупка) должна быть задана ставка входного НДС';   


banBarcode(d) = ABSTRACT BOOLEAN (InvoiceDetail);
CONSTRAINT  isPosted(InvoiceDetail d) AND isItem(sku(d)) AND NOT banBarcode(d) AND
    date(d) >= dateBanBarcode(customerStock(d)) AND NOT idBarcodeSku(d)
        MESSAGE 'Для строки накладной (закупка) должен быть задан штрихкод';   
                
CONSTRAINT  isPosted(UserInvoice i) AND isContract(operation(i)) AND NOT contractSku[Invoice](i) 
    MESSAGE 'Для накладной (закупка) обязан быть задан договор';   
CONSTRAINT  isPosted(UserInvoiceDetail d) AND isPrice(operation(d)) AND NOT price(d) 
    MESSAGE 'Для строки накладная (закупка) должна быть задана цена'; 
    
CONSTRAINT isPosted(UserInvoiceDetail d) AND isPurchaseBatch(operation(d)) AND sku(d) AND NOT batch(d) 
    MESSAGE 'Для строки накладной (закупка) должна быть задана партия'; 
    
CONSTRAINT isPosted(Invoice i) AND isCharLength(operation(i)) AND NOT (charLength(number(i)) == 7 AND onlyDigits(number(i)) == 1)
    MESSAGE 'У накладной (закупка) номер должен состоять из семи цифр';
    
CONSTRAINT isPosted(UserInvoiceDetail d) AND isPurchaseValueVAT(operation(d)) AND sku(d) AND NOT valueVAT(d) 
    MESSAGE 'Для строки накладной (закупка) должна быть задана ставка НДС'; 