MODULE PurchaseInvoiceArticle;

REQUIRE PurchaseInvoice, OrderLedgerArticle, CustomsGroupArticle;

NAMESPACE Purchase;


//------------------------------ Расширение формы (артикул)-----------------------------//

@defineDocumentArticle(userInvoice, sku, customerStock);
@extendFormDocumentArticleCustom(userInvoice, userInvoice, i, customer, customerStock);

@extendFormDocumentArticleOrderLedger(userInvoice, customerStock);

//--------------------- Добавление товара --------------------//

CLASS UserInvoiceArticleDetail 'Строка накладной/артикул (польз.) (закупка)';

@defineDocumentRelation(userInvoice, UserInvoice, UserInvoiceArticleDetail, );

article = DATA Article (UserInvoiceArticleDetail);
idArticle 'Код артикула' (UserInvoiceArticleDetail d) = id(article(d));
originalCaptionArticle 'Наименование (ориг.)' (UserInvoiceArticleDetail d) = originalCaption(article(d));
originalCompositionArticle 'Состав (ориг.)' (UserInvoiceArticleDetail d) = originalComposition(article(d));
originalCustomsGroupArticle 'Код ТНВЭД' (UserInvoiceArticleDetail d) = originalCustomsGroup(article(d));
nameSizeGroupArticle 'Размерная сетка' (UserInvoiceArticleDetail d) = nameSizeGroup(article(d));
nameCountryArticle 'Страна' (UserInvoiceArticleDetail d) = nameCountry(article(d));
nameBrandArticle 'Бренд' (UserInvoiceArticleDetail d) = nameBrand(article(d));
canonicalNameItemGroupArticle 'Группа' (UserInvoiceArticleDetail d) = canonicalNameItemGroup(article(d));

price 'Цена' = DATA NUMERIC[16,4] (UserInvoiceArticleDetail);

userInvoiceArticleDetail = DATA UserInvoiceArticleDetail (UserInvoiceDetail);

replace(Article a, Article article) += ACTION {ASSIGN article(UserInvoiceArticleDetail d) <- article WHERE article(d) == a;}

//CONSTRAINT  d IS UserInvoiceDetail AND userInvoiceArticleDetailUserInvoiceDetail(d) 
//    AND NOT articleUserInvoiceArticleDetail(userInvoiceArticleDetailUserInvoiceDetail(d)) == articleItem(skuUserInvoiceDetail(d))
//        MESSAGE 'Артикул для строки накладной/артикул (польз.) (закупка) и артикл товара для строки накладной (польз.) (закупка) не соответствуют друг другу';

changeIdArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST VARSTRING[100] INPUT;
    IF requestedString() THEN {
        IF article(requestedString()) THEN {
            article(detail) <- article(requestedString());    
        } ELSE {
            CONFIRM 'Артикула с таким кодом нет, хотите добавить?';
            IF (confirmed()) THEN {
                FOR ADDOBJ a = Article DO {
                    id(a) <- requestedString();  
                    article(detail) <- a;  
                }
            }    
        }
    } 
}

changeOriginalCaptionArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST VARISTRING[100] INPUT;
    IF requestedString() THEN {
        IF article(detail) THEN {
            originalCaption(Article a) <- requestedString() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}

changeOriginalCompositionArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST VARSTRING[255] INPUT;
    IF requestedString() THEN {
        IF article(detail) THEN {
            originalComposition(Article a) <- requestedString() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}

changeOriginalCustomsGroupArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST STRING[10] INPUT;
    IF requestedString() THEN {
        IF article(detail) THEN {
            originalCustomsGroup(Article a) <- requestedString() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}

changeSizeGroupArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST OBJECT t FORM sizeGroups MODAL;
    IF requestedObject() THEN {
        IF article(detail) THEN {
            sizeGroup(Article a) <- requestedObject() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}

changeCountryArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST OBJECT c FORM countries MODAL;
    IF requestedObject() THEN {
        IF article(detail) THEN {
            country(Article a) <- requestedObject() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}
changeBrandArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST OBJECT t FORM brands MODAL;
    IF requestedObject() THEN {
        IF article(detail) THEN {
            brand(Article a) <- requestedObject() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}
changeItemGroupArticle(UserInvoiceArticleDetail detail) = ACTION {
    REQUEST OBJECT g FORM dialogItemGroups MODAL;
    IF requestedObject() THEN {
        IF article(detail) THEN {
            itemGroup(Article a) <- requestedObject() WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
    } 
}

quantity 'Кол-во товара в документе' (cod,sid,detail, stock)=  GROUP SUM  quantity(UserInvoiceDetail userInvoiceDetail)
    BY  calcColor(sku(userInvoiceDetail)), calcSize(sku(userInvoiceDetail)), 
        userInvoiceArticleDetail(userInvoiceDetail), customerStock(userInvoiceDetail);
quantity 'Кол-во товара в документе' (Color color, Size size, UserInvoiceArticleDetail detail) = quantity(color, size, detail, customerStock(userInvoice(detail)));
quantity 'Итого по артиклу' (color, detail) = GROUP SUM quantity(Color color, Size size, UserInvoiceArticleDetail detail)
    BY color, detail;
quantityUserInvoiceArticleDetails 'Итого' (color) = GROUP SUM quantity(Color color, Size size, UserInvoiceArticleDetail detail)
    BY color;

userInvoiceDetail (color, size, detail, stock) = GROUP MAX UserInvoiceDetail userInvoiceDetail
    BY  calcColor(sku(userInvoiceDetail)), calcSize(sku(userInvoiceDetail)), 
        userInvoiceArticleDetail(userInvoiceDetail), customerStock(userInvoiceDetail);

userInvoiceDetail (Color color, Size size, UserInvoiceArticleDetail detail)= userInvoiceDetail(color, size, detail, customerStock(userInvoice(detail)));
                       
changeQuantityValue(Color color, Size size, UserInvoiceArticleDetail articleDetail) = ACTION {
    IF userInvoiceDetail(color, size, articleDetail) THEN {
        IF requestedNumeric() THEN {
            ASSIGN quantity(UserInvoiceDetail d) <- requestedNumeric() WHERE d == userInvoiceDetail(color, size, articleDetail);
        } ELSE {
            DELETE UserInvoiceDetail d WHERE d == userInvoiceDetail(color, size, articleDetail);
        }

    } ELSE {
        IF maxSku(article(articleDetail), color, size) THEN {               
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = UserInvoiceDetail DO {
                   userInvoice(d) <- userInvoice(articleDetail);
                   userInvoiceArticleDetail(d) <- articleDetail;
                   sku(d) <- maxSku(article(articleDetail), color, size);
                   quantity (d) <- requestedNumeric();
                }
            }
        } ELSE {
            IF requestedNumeric() THEN {
                CONFIRM 'Товар с заданными характеристиками не найден, хотите добавить?';
                IF (confirmed()) THEN {
                    FOR ADDOBJ i = Item DO { 
                        article(i) <- article(articleDetail);                      
                        color(i) <- color;
                        size(i) <- size;                          
                        
                        FOR ADDOBJ d = UserInvoiceDetail DO {
                           userInvoice(d) <- userInvoice(articleDetail);
                           userInvoiceArticleDetail(d) <- articleDetail;
                           sku(d) <- i;
                           quantity (d) <- requestedNumeric();
                        }                                               
                    }
                }
            }    
        } 
          
    }
}
changeQuantity(Color color, Size size, UserInvoiceArticleDetail articleDetail) = ACTION {
    REQUEST NUMERIC[14,3] INPUT;
    EXEC changeQuantityValue(color, size, articleDetail);
}                                       
                                     
order (UserInvoiceArticleDetail detail, Size size) = order(sizeGroup(article(detail)), size);                                         
   
quantity 'Кол-во' (articleDetail) = GROUP SUM quantity(UserInvoiceDetail d) BY userInvoiceArticleDetail(d);  
sum 'Сумма' (UserInvoiceArticleDetail articleDetail) = quantity(articleDetail) * price(articleDetail);  
count 'Кол-во строк' (articleDetail) = GROUP SUM 1 BY userInvoiceArticleDetail(UserInvoiceDetail d);  

WHEN SESSION FORMS userInvoice CHANGED(price(userInvoiceArticleDetail(UserInvoiceDetail d))) DO {
    price(d) <- price(userInvoiceArticleDetail(d));            
} 

WHEN SESSION FORMS userInvoice DROPPED(userInvoiceArticleDetail(UserInvoiceDetail d)) DO {
    DELETE d;
}        
                                       
EXTEND FORM userInvoice

    OBJECTS ad=UserInvoiceArticleDetail
    PROPERTIES(ad)  idArticle SHOWIF showIDs() ON CHANGE changeIdArticle(ad), 
                    nameSizeGroupArticle ON CHANGE changeSizeGroupArticle(ad),
                    nameCountryArticle ON CHANGE changeCountryArticle(ad),
                    nameBrandArticle ON CHANGE changeBrandArticle(ad),
                    canonicalNameItemGroupArticle ON CHANGE changeItemGroupArticle(ad),
                    originalCaptionArticle ON CHANGE changeOriginalCaptionArticle(ad), 
                    originalCompositionArticle ON CHANGE changeOriginalCompositionArticle(ad),
                    originalCustomsGroupArticle ON CHANGE changeOriginalCustomsGroupArticle(ad),
                    quantity READONLY, price, sum READONLY, 
                    ADDOBJ, deletead=DELETESESSION                      
                        
    FILTERS userInvoice(ad) == i
    
        OBJECTS sid=Size
        PROPERTIES(sid) name          
        PROPERTIES order(ad,sid)
        FILTERS    in(sizeGroup(article(ad)), sid)
        
        OBJECTS cod=Color
        PROPERTIES(cod) READONLY id SHOWIF showIDs(), name

        PROPERTIES(cod,sid,ad) quantity ON CHANGE changeQuantity(cod,sid,ad)
                                    COLUMNS (sid) HEADER name(sid)
                                    
        PROPERTIES READONLY quantity(cod, ad)  
        PROPERTIES(cod)  ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
        ORDER BY name(cod), 
                 order(ad,sid)                                      
;

DESIGN userInvoice {
    specification.box {
        NEW colorArticleContainer AFTER d.box{
            caption = 'Артикул';
            type = CONTAINERV;
            MOVE ad.box;
            MOVE cod.box;
            REMOVE sid.box;                
        }
    }
} 

