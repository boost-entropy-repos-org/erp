MODULE PurchaseInvoiceWholesalePrice;

REQUIRE PurchaseInvoice, PriceListCalc;

NAMESPACE Purchase;

//------------------------- Оптовая цена-------------------------//
@defineDocumentInterfaceHeaderProperty(invoice, showWholesalePrice, 'Оптовая цена');

// -- Операция
@defineOperationProperty(showWholesalePrice, 'Оптовые цены', priceContainer);
@deriveDocumentOperationProperty(UserInvoice, showWholesalePrice);

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, wholesale, ' (надбавка)');
wholesaleCalcPriceListType = DATA CalcPriceListType (Operation);
nameWholesaleCalcPriceListType 'Вид цен (надбавка) оптовая' (Operation operation) = name(wholesaleCalcPriceListType(operation));

EXTEND FORM operation
    PROPERTIES(o) nameWholesaleCalcPriceListType
;
DESIGN operation {
    priceContainer {
        NEW wholesalePriceContainer{
            caption = 'Оптовая цена';
            type = CONTAINERV;
            MOVE PROPERTY(showWholesalePrice(o));
            MOVE PROPERTY(nameWholesaleCalcPriceListType(o));
        }
    }
}

wholesaleCalcPriceListType (UserInvoice invoice) <- wholesaleCalcPriceListType(operation(invoice))
    WHEN CHANGED(operation(invoice));


@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, wholesale, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, wholesale, ' (надбавка)');

// Объявляем цену для строки
@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');
@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');

overBasePrice = ABSTRACT NUMERIC[14,2] (InvoiceDetail);
overBasePrice = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail);
overBasePrice (UserInvoiceDetail detail) += overBasePrice(detail);

basePrice (InvoiceDetail detail) = OVERRIDE price(detail), overBasePrice(detail) PERSISTENT;
basePrice (UserInvoiceDetail detail) = OVERRIDE price(detail), overBasePrice(detail) PERSISTENT;

wholesaleMarkup(UserInvoiceDetail detail) <- markup(wholesaleCalcPriceListType(detail), sku(detail))
    WHEN CHANGED(wholesaleCalcPriceListType(detail)) OR
         CHANGED(sku(detail));

wholesalePrice(UserInvoiceDetail detail) <- round((basePrice(detail) * (wholesaleMarkup(detail) + 100)/ 100),
                                                                    roundCondition(wholesaleCalcPriceListType(detail))) //currencyUserInvoiceDetail(detail))
    WHEN CHANGED(basePrice(detail)) OR
         CHANGED(wholesaleMarkup(detail)) OR
         CHANGED(wholesaleCalcPriceListType(detail)) OR
         CHANGED(currency(detail));

calcWholesaleMarkup(UserInvoiceDetail detail)  = [= round2((X/Y-1)*100)](
    wholesalePrice(detail),
    basePrice(detail) IF basePrice(detail)!= 0.0);

changeWholesalePrice = ACTION (UserInvoiceDetail detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        ASSIGN wholesalePrice(detail) <- requestedNumeric();
        ASSIGN wholesaleMarkup(detail) <- calcWholesaleMarkup(detail);
    } ELSE {
        ASSIGN wholesalePrice(detail) <- NULL;
    }
}

calcWholesalePrice(UserInvoiceDetail detail)  = round([= X*(Y+100)/100](
    basePrice(detail),
    wholesaleMarkup(detail)),currency(detail));

backgroundWholesale 'Цвет' (Invoice invoice) = RGB(238, 250, 200) IF invoice IS Invoice;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundWholesale(i) showWholesalePrice, nameWholesaleCalcPriceListType SHOWIF showWholesalePrice(i)
    PROPERTIES(d) BACKGROUND backgroundWholesale(i) SHOWIF showWholesalePrice(i) BEFORE deleteid wholesaleMarkup,
                  wholesalePrice ON CHANGE changeWholesalePrice(d)
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerWholesale {
            caption = 'Оптовая цена';
            MOVE PROPERTY(showWholesalePrice(i));
            MOVE PROPERTY(nameWholesaleCalcPriceListType(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundWholesale(i) SHOWIF showWholesalePrice(i) wholesaleMarkup, wholesalePrice
;

// Создаем виды цен
EXTEND CLASS SystemLedgerPriceListType { purchaseWholesaleInvoiceStockPriceListType 'Оптовая (последняя по складу)' }
batch (SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType AND isCompany(stock)
                                               THEN priceBatchLedger(stock);
in (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN wholesalePrice(ledger) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType THEN TRUE;
price (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN wholesalePrice(ledger) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType THEN wholesalePrice(ledger);
