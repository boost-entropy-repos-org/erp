MODULE PurchaseInvoiceWholesalePrice;

REQUIRE PurchaseInvoice, PriceListCalc;

NAMESPACE Purchase;

//------------------------- Оптовая цена-------------------------//
@defineDocumentInterfaceHeaderProperty(invoice, showWholesalePrice, 'Оптовая цена');

// -- Операция
@defineOperationProperty(showWholesalePrice, 'Оптовые цены', priceContainer);
@deriveDocumentOperationProperty(UserInvoice, showWholesalePrice);

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, wholesale, ' (надбавка)');
wholesaleCalcPriceListTypeOperation = DATA CalcPriceListType (Operation);
nameWholesaleCalcPriceListTypeOperation 'Вид цен (надбавка) оптовая' (operation) = nameCalcPriceListType(wholesaleCalcPriceListTypeOperation(operation));

EXTEND FORM operation
    PROPERTIES(o) nameWholesaleCalcPriceListTypeOperation
;
DESIGN operation {
    priceContainer {
        NEW wholesalePriceContainer{
            caption = 'Оптовая цена';
            type = CONTAINERV;
            MOVE PROPERTY(showWholesalePriceOperation(o));
            MOVE PROPERTY(nameWholesaleCalcPriceListTypeOperation(o));
        }
    }
}

wholesaleCalcPriceListTypeUserInvoice (invoice) <- wholesaleCalcPriceListTypeOperation(operationUserInvoice(invoice))
    WHEN CHANGED(operationUserInvoice(invoice));


@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, wholesale, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, wholesale, ' (надбавка)');

// Объявляем цену для строки
@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');
@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');

overBasePriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
overBasePriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
overBasePriceInvoiceDetail (detail) += overBasePriceUserInvoiceDetail(detail);

basePriceInvoiceDetail (detail) = OVERRIDE priceInvoiceDetail(detail), overBasePriceInvoiceDetail(detail) PERSISTENT;
basePriceUserInvoiceDetail (detail) = OVERRIDE priceUserInvoiceDetail(detail), overBasePriceUserInvoiceDetail(detail) PERSISTENT;

wholesaleMarkupUserInvoiceDetail(detail) <- markupCalcPriceListTypeSku(wholesaleCalcPriceListTypeUserInvoiceDetail(detail), skuUserInvoiceDetail(detail))
    WHEN CHANGED(wholesaleCalcPriceListTypeUserInvoiceDetail(detail)) OR
         CHANGED(skuUserInvoiceDetail(detail));

wholesalePriceUserInvoiceDetail(detail) <- roundPriceRoundCondition((basePriceUserInvoiceDetail(detail) * (wholesaleMarkupUserInvoiceDetail(detail) + 100)/ 100),
                                                                    roundConditionPriceListType(wholesaleCalcPriceListTypeUserInvoiceDetail(detail))) //currencyUserInvoiceDetail(detail))
    WHEN CHANGED(basePriceUserInvoiceDetail(detail)) OR
         CHANGED(wholesaleMarkupUserInvoiceDetail(detail)) OR
         CHANGED(wholesaleCalcPriceListTypeUserInvoiceDetail(detail)) OR
         CHANGED(currencyUserInvoiceDetail(detail));

calcWholesaleMarkupUserInvoiceDetail(detail)  = [= round2((X/Y-1)*100)](
    wholesalePriceUserInvoiceDetail(detail),
    basePriceUserInvoiceDetail(detail) IF basePriceUserInvoiceDetail(detail)!= 0.0);

changeWholesalePriceUserInvoiceDetail = ACTION (detail) {
    REQUEST NUMERIC[14,2] INPUT;
    IF requestedNumeric() THEN {
        ASSIGN wholesalePriceUserInvoiceDetail(detail) <- requestedNumeric();
        ASSIGN wholesaleMarkupUserInvoiceDetail(detail) <- calcWholesaleMarkupUserInvoiceDetail(detail);
    } ELSE {
        ASSIGN wholesalePriceUserInvoiceDetail(detail) <- NULL;
    }
}

calcWholesalePriceUserInvoiceDetail(detail)  = roundPriceCurrency([= X*(Y+100)/100](
    basePriceUserInvoiceDetail(detail),
    wholesaleMarkupUserInvoiceDetail(detail)),currencyUserInvoiceDetail(detail));

backgroundWholesaleInvoice 'Цвет' (invoice) = RGB(238, 250, 200) IF invoice IS Invoice;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundWholesaleInvoice(i) showWholesalePriceUserInvoice, nameWholesaleCalcPriceListTypeUserInvoice SHOWIF showWholesalePriceUserInvoice(i)
    PROPERTIES(d) BACKGROUND backgroundWholesaleInvoice(i) SHOWIF showWholesalePriceUserInvoice(i) BEFORE deleteid wholesaleMarkupUserInvoiceDetail,
                  wholesalePriceUserInvoiceDetail ON CHANGE changeWholesalePriceUserInvoiceDetail(d)
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerWholesale {
            caption = 'Оптовая цена';
            MOVE PROPERTY(showWholesalePriceUserInvoice(i));
            MOVE PROPERTY(nameWholesaleCalcPriceListTypeUserInvoice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundWholesaleInvoice(i) SHOWIF showWholesalePriceInvoice(i) wholesaleMarkupInvoiceDetail, wholesalePriceInvoiceDetail
;

// Создаем виды цен
EXTEND CLASS SystemLedgerPriceListType { purchaseWholesaleInvoiceStockPriceListType 'Оптовая (последняя по складу)' }
batchLedgerPriceListTypeStock (type, stock) += WHEN type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType AND isCompanyStock(stock)
                                               THEN priceBatchLedgerStock(stock);
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN wholesalePriceInvoiceDetail(ledger) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType THEN TRUE;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN wholesalePriceInvoiceDetail(ledger) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType THEN wholesalePriceInvoiceDetail(ledger);
