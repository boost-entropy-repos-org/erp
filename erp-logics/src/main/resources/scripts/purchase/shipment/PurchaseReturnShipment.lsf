MODULE PurchaseReturnShipment;

REQUIRE Shipment, PurchaseReturnInvoice, OrderShipment, InvoiceShipment, PriceListLedger;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Поставка ---------------------------------------------------//
@defineShipment('Возвраты', ' (закупка-возврат)', customerStock);
@defineShipmentBatch(customerStock);
expiryDateUserShipmentDetail(detail) <- expiryDateBatch(batchUserShipmentDetail(detail)) WHEN CHANGED (batchUserShipmentDetail(detail));

@defineShipmentStockDestination(customerStock, supplierStock);

@defineOrderShipment(' (закупка-возврат)', customerStock);
@defineInvoiceShipment(' (закупка-возврат)', customerStock);
@defineInvoiceShipmentAction(' (закупка-возврат)');

@defineInvoiceShipmentBatch();

@defineDocumentBatchSystemLedgerPriceListType(userShipment, accountPriceListType, customerStock);
@extendFormDocumentBatch(userShipment, userShipment, s);
@extendFormDocumentBatchAll(userShipment, userShipment, s);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(shipment, s);
@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@defineDocumentOperationRole(userShipment);

@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    ASSIGN operationUserShipment(s) <- operationInvoice(i);
}

operationShipment(shipment) += operationInvoice(invoiceInvoiceShipment(shipment));
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка-возврат';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка-возврат';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserShipment);
        }
    }
}

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, supplier, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserShipment(ks, s)
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailSkuUserShipment(ks, s)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserShipment(s), ks)
//        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserShipmentSku(s, ks), ks, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserShipment(b, s)
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailBatchUserShipment(b, s)
    FILTERGROUP filter4
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserShipment(s), skuBatch(b))
//        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeBatchStockDateTime(priceListTypeUserShipmentBatch(s, b), b, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;

// Резервы
@extendFormDocumentOrderLedger(userShipment, userShipment, customerStock, s);
@extendFormDocumentOrderLedgerAll(userShipment, userShipment, s);

// --------------------------- Расчет учетной цены для поставки --------------------- //

// Для поставки
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, sku, customerStock);

// Для накладной
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, customerStock);
//shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
//    (CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(extraShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(createShipmentUserInvoiceDetail(detail)))
//        AND createShipmentUserInvoiceDetail(detail);

// ------------------------------- Проведение по регистру остатков ------------------------ //

@implementSkuLedgerOutFIFO(ShipmentDetail, sku, customerStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, customerStock);
sumOutSkuLedger (ledger) += sumShipmentDetail(ledger);
seriesDataSkuLedger (ledger) += seriesShipment(shipmentShipmentDetail(ledger));
numberDataSkuLedger (ledger) += numberShipment(shipmentShipmentDetail(ledger));
legalEntityDataSkuLedger (ledger) += supplierShipment(shipmentShipmentDetail(ledger));
legalEntityStockDataSkuLedger (ledger) += supplierStockShipment(shipmentShipmentDetail(ledger));
// ------------------------------- Проведение по товарному отчету ------------------------ //

@implementStockDocumentLedgerOut(Shipment, customerStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);


NAVIGATOR {
    purchaseStockNavigator {
        ADD shipments;
    }
}
