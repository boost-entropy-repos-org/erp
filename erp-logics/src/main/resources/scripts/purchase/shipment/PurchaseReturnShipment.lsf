MODULE PurchaseReturnShipment;

REQUIRE Shipment, PurchaseReturnInvoice, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger, PurchaseLedger;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Поставка ---------------------------------------------------//
@defineShipment('Возвраты', ' (закупка-возврат)', customer, supplier, company, company);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, company);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, customer, company);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, supplier, supplier);

@defineShipmentBatch(customerStock);
@defineShipmentBatchDialogStock(customerStock);

expiryDateUserShipmentDetail(detail) <- expiryDateBatch(batchUserShipmentDetail(detail)) WHEN CHANGED (batchUserShipmentDetail(detail));

@defineShipmentStockDestination(customerStock, supplierStock);

@defineOrderShipment(' (закупка-возврат)', customerStock);
@defineInvoiceShipment(' (закупка-возврат)', customerStock, company);
@defineInvoiceShipmentAction(' (закупка-возврат)');

@defineInvoiceShipmentBatch();

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(shipment, s);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRole(userShipment);

@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    ASSIGN operationUserShipment(s) <- operationInvoice(i);
}

operationShipment(shipment) += operationInvoice(invoiceInvoiceShipment(shipment));

// Добавляем в копирование поставок
overCopyShipment(s, d) += ACTION(s, d) {
    ASSIGN operationUserShipment(d) <- operationShipment(s);
}
@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка-возврат';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка-возврат';
       
CONSTRAINT filterShipmentSupplier() AND NOT isSupplierLegalEntity(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterShipmentCustomer() AND NOT isCompanyLegalEntity(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся компанией';  
    
CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT inLegalEntityStock(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT inLegalEntityStock(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';      
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserShipment(s));
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, supplier, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserShipment(ks, s)
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailSkuUserShipment(ks, s)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserShipment(s), ks)
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeSkuStockDateTime(priceListTypeUserShipmentSku(s, ks), ks, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserShipment(b, s)
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailBatchUserShipment(b, s)
    FILTERGROUP filter4
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserShipment(s), skuBatch(b))
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserShipmentBatch(s, b), b, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;

// Резервы
@extendFormDocumentSkuOrderLedger(userShipment, userShipment, s, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// --------------------------- Расчет учетной цены для поставки --------------------- //

// Для поставки
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userShipment, accountPriceListType, sku, customerStock);

// Для накладной
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (userInvoice, accountPriceListType, shipment, , sku, customerStock);
//shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
//    (CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(extraShipmentPriceUserInvoiceDetail(detail)) OR CHANGED(createShipmentUserInvoiceDetail(detail)))
//        AND createShipmentUserInvoiceDetail(detail);

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerOut(Shipment, customerStock);
sumOutStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemOutStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerOutStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

legalEntityStockDocumentLedger(ledger) += supplierShipment(ledger);  
legalEntityStockStockDocumentLedger(ledger) += supplierStockShipment(ledger);
  
operationStockDocumentLedger(ledger) += operationShipment(ledger);

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerOutFIFO(ShipmentDetail, sku, customerStock);
quantityOutFIFOSkuLedger (ledger) += quantityShipmentDetail(ledger);
batchSkuLedger(ledger) += batchShipmentDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, customerStock);
sumOutSkuLedger (ledger) += sumShipmentDetail(ledger);

costShipmentDetailBatch(detail, batch) += quantityShipmentDetail(detail) IF batch == batchShipmentDetail(detail);
costPurchaseLedgerBatch(ledger, batch) += -costInvoiceDetailBatch (ledger, batch); 

editSkuLedger(d) += editShipmentDetail(d);

// ------------------------------- Проведение по товарному отчету ------------------------ //

stockDocumentLedgerSkuLedger(ledger) += shipmentShipmentDetail(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEditShipment (i) += showEditDeleteUserShipment(i) AND isOpenedShipment(i);
overShowDeleteShipment (i) += showEditDeleteUserShipment(i) AND isUserOpenedShipment(i); 

NAVIGATOR {
    purchaseStockNavigator {
        ADD shipments;
    }
}
