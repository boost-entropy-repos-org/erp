MODULE PurchaseShipment;

REQUIRE Shipment, PurchaseInvoice, PurchaseOperation, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger;

NAMESPACE Purchase;

//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Поставки', ' (закупка)', customer, supplier, company, company, Purchase);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, company);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, supplier);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, customer, company);
@extendFormFilterAccessLegalEntity(Shipment, s, shipments, supplier, supplier);

@defineShipmentBatch(customerStock);
@defineShipmentBatchDialog();

@defineExternalizable(userShipment, VARSTRING[100]);
@defineExternalizable(userShipmentDetail, VARSTRING[100]);

Shipment.inShipment(s) += s IS Shipment;

expiryDateUserShipmentDetail(detail) <- prevExpiryDateBatch(batchUserShipmentDetail(detail)) WHEN CHANGED (batchUserShipmentDetail(detail));

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (закупка)', customerStock);
@defineInvoiceShipment(' (закупка)', customerStock, company, Purchase);
//
//EXTEND FORM invoices
//    PROPERTIES (i) numberByTime
//;

@defineInvoiceShipmentAction(' (закупка)');

@defineInvoiceShipmentBatch();

overCostPriceShipmentDetail(d) = ABSTRACT NUMERIC[14,2] (ShipmentDetail);
extraCostPriceShipmentDetail(d) = ABSTRACT NUMERIC[14,2] (ShipmentDetail);
costPriceShipmentDetail(d) = OVERRIDE priceShipmentDetail(d), overCostPriceShipmentDetail(d), extraCostPriceShipmentDetail(d);

isShippedInvoice = shippedInvoice(invoice) OR (isPostedInvoice(invoice) AND quantityNotChargeInvoiceDetailInvoice(invoice)==0.0) OR (isPostedInvoice(invoice) AND NOT quantityNotChargeInvoiceDetailInvoice(invoice));

statusShippedInvoice 'Статус приемки' (invoice)= IF isShippedInvoice (invoice) AND toShipInvoiceDetailInvoice(invoice)  
                                                    THEN 'Расхождение'
                                                    ELSE 
                                                        IF isShippedInvoice (invoice) 
                                                            THEN 'Оприходована' 
                                                            ELSE 'Не оприходована' IF invoice IS Invoice;
                                                                                                                                                                                                                     
backgroundShipInvoice 'Цвет' (invoice)= RGB(212,255,212) IF invoice IS Invoice AND NOT (shippedInvoice(invoice) OR (isPostedInvoice(invoice) AND quantityNotChargeInvoiceDetailInvoice(invoice)==0.0) OR (isPostedInvoice(invoice) AND NOT quantityNotChargeInvoiceDetailInvoice(invoice)));  

EXTEND FORM invoices
    PROPERTIES (i) READONLY statusShippedInvoice BACKGROUND backgroundShipInvoice(i) AFTER isCommissionInvoice(i)
    
    FILTERGROUP shipped 
        FILTER 'Не оприходованы' i IS Invoice AND NOT (shippedInvoice(i) OR (isPostedInvoice(i) AND quantityNotChargeInvoiceDetailInvoice(i)==0.0) OR (isPostedInvoice(i) AND NOT quantityNotChargeInvoiceDetailInvoice(i))) 'F11'
        FILTER 'Оприходованы' shippedInvoice(i) OR (isPostedInvoice(i) AND quantityNotChargeInvoiceDetailInvoice(i)==0.0) OR (isPostedInvoice(i) AND NOT quantityNotChargeInvoiceDetailInvoice(i)) 'F10'
;   
@defineOrderShipmentExecution(); 
@defineOrderInvoiceSupplierExecution(purchase, ' (закупка)');

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(shipment, s);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRoleOver(userShipment, purchase);

@defineOperationProperty(createShipment, 'Поставка', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    ASSIGN operationUserShipment(s) <- operationInvoice(i);
}
operationShipment(shipment) += operationInvoice(invoiceInvoiceShipment(shipment));

// Добавляем в копирование поставок
overCopyShipment(s, d) += ACTION(s, d) {
    ASSIGN operationUserShipment(d) <- operationShipment(s);
}
@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка';
    
CONSTRAINT filterShipmentSupplier() AND NOT isSupplierLegalEntity(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterShipmentCustomer() AND NOT isCompanyLegalEntity(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся компанией';   
    
CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT inLegalEntityStock(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT inLegalEntityStock(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';     
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserShipment(s));
        }
    }
}
@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, supplier, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuUserShipment(ks, s) 'F10'
        FILTER 'В документе ' quantityUserShipmentDetailSkuUserShipment(ks, s) 'F9'
    FILTERGROUP filter2
        FILTER 'С поступлением ' quantityPurchaseSupplierSku(supplierUserShipment(s), ks) 'F8'
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeSkuStockDateTime(priceListTypeUserShipmentSku(s, ks), ks, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchUserShipment(b, s) 'F10'
        FILTER 'В документе ' quantityUserShipmentDetailBatchUserShipment(b, s) 'F9'
    FILTERGROUP filter4
        FILTER 'С поступлением ' quantityPurchaseSupplierSku(supplierUserShipment(s), skuBatch(b)) 'F8'
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserShipmentBatch(s, b), b, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;

// Резервы
@extendFormDocumentSkuOrderLedger(userShipment, userShipment, s, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //
overShipmentPriceUserInvoiceDetail = ABSTRACT CASE NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
calcShipmentPriceUserInvoiceDetail (detail) = OVERRIDE costPriceUserInvoiceDetail(detail), overShipmentPriceUserInvoiceDetail(detail) PERSISTENT;

extraShipmentPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;

// Цены учетные
shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
    CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR
    CHANGED(extraShipmentPriceUserInvoiceDetail(detail));
priceUserShipmentDetail (detail) <- shipmentPriceInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
    WHEN CHANGED(shipmentPriceInvoiceDetail(invoiceDetailUserShipmentDetail(detail)));

// Цену записываем всегда, чтобы она проставлялась при создании поставки отдельно
//      OR
//     CHANGED(createShipmentUserInvoiceDetail(detail)))
//        AND createShipmentUserInvoiceDetail(detail);

// ------------------------------- Коды партии ----------------------------------- //

idBatchShipmentDetail 'Код партии' = ABSTRACT VARSTRING[100] (ShipmentDetail) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatchUserShipmentDetail 'Код партии' = DATA VARSTRING[100] (UserShipmentDetail) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatchShipmentDetail(detail) += idBatchUserShipmentDetail(detail);

idBatchShipmentDetail(detail) += idBatchInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

@defineMovementIdBatch(shipmentDetail, batch, customerStock);
@defineBalancesIdBatch(shipmentDetail, batch);
@defineMovementIdBatch(userShipmentDetail, batch, customerStock);
@defineBalancesIdBatch(userShipmentDetail, batch);

EXTEND FORM userShipment
    PROPERTIES(d) READONLYIF batchUserShipmentDetail(d) SHOWIF showIDs()
                  idBatchUserShipmentDetail AFTER nameBatchUserShipmentDetail(d)
;
EXTEND FORM shipments
    PROPERTIES(d) READONLY SHOWIF showIDs()
                  idBatchShipmentDetail AFTER nameBatchShipmentDetail(d)
;

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(Shipment, customerStock);
sumIncStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemIncStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);

legalEntityStockDocumentLedger(ledger) += supplierShipment(ledger);  
legalEntityStockStockDocumentLedger(ledger) += supplierStockShipment(ledger);  

operationStockDocumentLedger(ledger) += operationShipment(ledger);

editStockDocumentLedger(l) += ACTION editShipment(l);

// -------------------------------- Наименования для документов --------------------------- //
documentNameSkuShipmentDetail 'Наименование (для документов)' = ABSTRACT VARISTRING[255] (ShipmentDetail) MINCHARWIDTH 30 PREFCHARWIDTH 60;
documentNameSkuUserShipmentDetail 'Наименование (для документов)' = DATA VARISTRING[255] (UserShipmentDetail) MINCHARWIDTH 30 PREFCHARWIDTH 60;
documentNameSkuShipmentDetail(detail) += documentNameSkuUserShipmentDetail(detail);

documentNameSkuShipmentDetail(detail) += documentNameSkuInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

EXTEND FORM userShipment
    PROPERTIES(d) documentNameSkuUserShipmentDetail AFTER nameSkuUserShipmentDetail(d) SHOWIF useDocumentNameSku()
;
EXTEND FORM shipments
    PROPERTIES(d) documentNameSkuShipmentDetail AFTER nameSkuShipmentDetail(d) SHOWIF useDocumentNameSku()
;

// ------------------------------- Проведение по регистру остатков ------------------------ //

overCreateBatchShipmentDetail = ABSTRACT BOOLEAN (ShipmentDetail);
createBatchShipmentDetail (detail) = (detail IS ShipmentDetail OR overCreateBatchShipmentDetail(detail)) AND NOT batchShipmentDetail(detail);

// Создаем партию
CLASS ShipmentBatch 'Партия на основе закупки';
@defineAggregation(shipmentDetail, shipmentBatch, createBatch);

@defineSkuLedgerAggregation(shipmentDetail, shipmentBatch, sku, customerStock);

quantityShipmentBatch (batch) = quantityShipmentDetail(shipmentDetailShipmentBatch(batch));
quantityBatch(b) += quantityShipmentBatch(b);
priceShipmentBatch (batch) = priceShipmentDetail(shipmentDetailShipmentBatch(batch));
costPriceShipmentBatch (batch) = costPriceShipmentDetail(shipmentDetailShipmentBatch(batch));

replaceSkuBatch(s, b) += ACTION (s, b){ skuUserShipmentDetail(detail) <- s WHERE shipmentBatchShipmentDetail(detail) == b;}
replaceSkuBatch(s, b) += ACTION (s, b){ skuUserInvoiceDetail(detail) <- s WHERE detail == invoiceDetailUserShipmentDetail(shipmentDetailShipmentBatch(b));}

@implementBatch(ShipmentBatch, sku, stock, costPrice);
manufactureDateBatch(batch) += manufactureDateShipmentDetail(shipmentDetailShipmentBatch(batch)); 
idBatch(ledger) += idBatchShipmentDetail(shipmentDetailShipmentBatch(ledger));
expiryDateBatch (ledger) += expiryDateShipmentDetail(shipmentDetailShipmentBatch(ledger));
sumInSkuLedger (ledger) += sumShipmentDetail(shipmentDetailShipmentBatch(ledger));
seriesBatch (ledger) += seriesShipment(shipmentShipmentDetail(shipmentDetailShipmentBatch(ledger)));
numberBatch (ledger) += numberShipment(shipmentShipmentDetail(shipmentDetailShipmentBatch(ledger)));
supplierBatch (ledger) += supplierShipmentDetail(shipmentDetailShipmentBatch(ledger));
supplierStockBatch (ledger) += supplierStockShipmentDetail(shipmentDetailShipmentBatch(ledger));

overDocumentNameSkuBatch (ledger) += documentNameSkuShipmentDetail(shipmentDetailShipmentBatch(ledger)); 

batchSkuLedger(ledger) += ledger AS Batch;

stockDocumentLedgerSkuLedger(ledger) += shipmentShipmentDetail(shipmentDetailShipmentBatch(ledger)); 

costPurchaseLedgerBatch(ledger, batch) += costInvoiceDetailBatch (ledger, batch); 
inPriceListLedgerBatch (ledger, batch) += TRUE IF inInvoiceDetailBatch(ledger, batch); 

nameBatch(batch) += VARISTRING[200](CONCAT '', STRING[10](dateShipmentDetail(shipmentDetailShipmentBatch(batch))), '/ ' + seriesNumberShipment(shipmentShipmentDetail(shipmentDetailShipmentBatch(batch))),
                             '/ ' + fullNameSupplierShipmentDetail(shipmentDetailShipmentBatch(batch)));
  
editSkuLedger(batch) += ACTION editShipmentDetail(shipmentDetailShipmentBatch(batch));

// Проводим по регистру учетных цен
supplierShipmentBatch (ledger) = supplierShipmentDetail(shipmentDetailShipmentBatch(ledger));
@implementSystemLedgerPriceListTypeBatch(account, ShipmentBatch, supplier, stock);

editPriceListLedger(d) += ACTION editShipmentDetail(shipmentDetailShipmentBatch(d));
// Создаем просто inLIFOSkuLedger
createSkuLedgerShipmentDetail (detail) = detail IS ShipmentDetail AND NOT createBatchShipmentDetail(detail);

CLASS ShipmentSkuLedger 'Изменение остатка на основе закупки';
@defineAggregation(shipmentDetail, shipmentSkuLedger, createSkuLedger);

@defineSkuLedgerAggregation(shipmentDetail, shipmentSkuLedger, sku, customerStock);

quantityShipmentSkuLedger (ledger) = quantityShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));
priceShipmentSkuLedger (ledger) = priceShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));
batchShipmentSkuLedger (ledger) = batchShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));

quantityShipmentSkuLedgerBatch (batch) = GROUP SUM quantityShipmentSkuLedger (ledger) 
                                                   IF NOT isCompanySupplierShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)) 
                                               BY batchShipmentSkuLedger(ledger);
extraShippedQuantityBatch(b) += quantityShipmentSkuLedgerBatch(b); 

@implementSkuLedgerInLIFO(ShipmentSkuLedger, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityShipmentSkuLedger (ledger);
limitInLIFOSkuLedgerBatch(ledger, batch) += quantityShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)) IF batchShipmentSkuLedger(ledger) == batch;
changedDataSkuLedger(ledger) += CHANGED(batchShipmentSkuLedger(ledger));
sumInSkuLedger (ledger) += sumShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));

batchSkuLedger(ledger) += batchShipmentSkuLedger(ledger);

stockDocumentLedgerSkuLedger (ledger) += shipmentShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)); 

skuLedgerShipmentDetail (detail) = IF createBatchShipmentDetail(detail) THEN shipmentBatchShipmentDetail(detail) ELSE shipmentSkuLedgerShipmentDetail(detail);
ledgerBatchShipmentDetail (detail) = OVERRIDE shipmentBatchShipmentDetail(detail), batchShipmentDetail(detail);
@implementDocumentBatch(shipment, ledger);

costShipmentDetailBatch(detail, batch) += costSkuLedgerBatch(skuLedgerShipmentDetail(detail), batch);

Invoice.batchInvoiceDetail(d) += OVERRIDE batchInvoiceDetail(d), ledgerBatchShipmentDetail(invoiceShipmentDetailInvoiceDetail(d));

editSkuLedger(shipmentSkuLedger) += ACTION editShipmentDetail(shipmentDetailShipmentSkuLedger(shipmentSkuLedger));

// ------------------------------- Проведение регистру учетных цен ------------------------ //

supplierShipmentSkuLedger (ledger) = supplierShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));
@implementSystemLedgerPriceListType(account, ShipmentSkuLedger, supplier, stock);
inPriceListLedgerBatch (ledger, batch) += batchShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)) == batch; 

editPriceListLedger(d) += ACTION editShipmentDetail(shipmentDetailShipmentSkuLedger(d));
//
defaultUserShipmentDetailSkuUserShipmentPrice (sku, shipment, price) = GROUP MIN detail IF NOT batchUserShipmentDetail(detail)
    BY skuUserShipmentDetail(detail), userShipmentUserShipmentDetail(detail), priceUserShipmentDetail(detail);

defaultUserShipmentDetailUserShipmentDetail(detail) = defaultUserShipmentDetailSkuUserShipmentPrice(skuUserShipmentDetail(detail), userShipmentUserShipmentDetail(detail), priceUserShipmentDetail(detail));

mergeBatchUserShipment 'Соединить партии' = ACTION (shipment) {
    CONFIRM 'Документ будет автоматически сохранен, вы действительно хотите выполнить действие "Соединить партии?"';
    IF (confirmed()) THEN {
        EXEC apply();
        FOR userShipmentUserShipmentDetail(detail) == shipment
            AND NOT defaultUserShipmentDetailUserShipmentDetail(detail) == detail
            AND NOT batchUserShipmentDetail(detail) DO {
                ASSIGN batchUserShipmentDetail(detail) <- shipmentBatchShipmentDetail(defaultUserShipmentDetailUserShipmentDetail(detail));

        }
    }
} TOOLBAR;

EXTEND FORM userShipment
    PROPERTIES(s) TODRAW d mergeBatchUserShipment
;
//Строка накладной партии
invoiceDetailBatch = ABSTRACT InvoiceDetail (Batch);
invoiceDetailBatch(b) += invoiceDetailShipmentDetail(shipmentDetailShipmentBatch(b));

//invoiceDetailBatch 'Строка накладной партии' = invoiceDetailShipmentDetail(shipmentDetailShipmentBatch(batch));

descriptionInvoiceDetailInvoiceDetailBatch 'Строка накладной партии' = descriptionInvoiceDetail(invoiceDetailBatch(batch));
priceInvoiceDetailBatch 'Цена закупки' (batch) = priceInvoiceDetail(invoiceDetailBatch(batch));
invoicePriceInvoiceDetailBatch 'Цена закупки с НДС' (batch) = invoicePriceInvoiceDetail(invoiceDetailBatch(batch));

currencyInvoiceDetailBatch 'Валюта закупки' (batch) = currencyInvoiceDetail(invoiceDetailBatch(batch));
shortNameCurrencyInvoiceDetailBatch 'Валюта закупки' (batch) = shortNameCurrency(currencyInvoiceDetailBatch(batch));
rateExchangeInvoiceDetailBatch 'Курс' (batch) = rateExchangeInvoiceDetail(invoiceDetailBatch(batch));
homePriceInvoiceDetailBatch 'Цена закупки (кон.)' (batch) = homePriceInvoiceDetail(invoiceDetailBatch(batch));

receiveShipmentInvoice (invoice)+= ACTION (invoice)  {
    IF invoice IS UserInvoice THEN {
        createShipmentUserInvoice(invoice) <- TRUE;           
    }
};


deleteCreateShipment (shipment)+= WHEN invoiceInvoiceShipment(shipment) IS UserInvoice THEN  ACTION (shipment)  {
    createShipmentInvoice(invoice) <- NULL WHERE invoice == invoiceInvoiceShipment(shipment);          
};

EXTEND FORM batches 
    PROPERTIES(bt)  READONLY BEFORE costBatch(bt) priceInvoiceDetailBatch FORCE GRID
; 

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEditShipment (i) += showEditDeleteUserShipment(i) AND isOpenedShipment(i);
overShowDeleteShipment (i) += showEditDeleteUserShipment(i) AND isUserOpenedShipment(i); 

NAVIGATOR {
    purchaseStockNavigator {
        ADD shipments;
    }
}