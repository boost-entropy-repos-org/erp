MODULE PurchaseShipment;

REQUIRE Shipment, PurchaseInvoice, PurchaseOperation, OrderShipment, InvoiceShipment, PriceListLedger;

NAMESPACE Purchase;

//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Поставки', ' (закупка)', customerStock);
@defineShipmentBatch(customerStock);
expiryDateUserShipmentDetail(detail) <- prevExpiryDateBatch(batchUserShipmentDetail(detail)) WHEN CHANGED (batchUserShipmentDetail(detail));

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (закупка)', customerStock);
@defineInvoiceShipment(' (закупка)', customerStock);
@defineInvoiceShipmentAction(' (закупка)');
@defineInvoiceShipmentBatch();

@defineDocumentBatchSystemLedgerPriceListType(userShipment, accountPriceListType, customerStock);
@extendFormDocumentBatch(userShipment, userShipment, s);
@extendFormDocumentBatchAll(userShipment, userShipment, s);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(shipment, s);
@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@defineDocumentOperationRole(userShipment);

@defineOperationProperty(createShipment, 'Поставка', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);

overFillInvoiceUserShipmentInvoice(s, i) += ACTION (s, i) {
    SET operationUserShipment(s) <- operationInvoice(i);
}
operationShipment(shipment) += operationInvoice(invoiceInvoiceShipment(shipment));
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierUserShipment(userShipment) AND NOT isSupplierLegalEntity(supplierUserShipment(userShipment))
    CHECKED BY supplierUserShipment MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка';
CONSTRAINT customerUserShipment(userShipment) AND NOT isCompanyLegalEntity(customerUserShipment(userShipment))
    CHECKED BY customerUserShipment MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка';

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
Shipment.packQuantityShipmentDetail(detail) += packQuantityShipmentDetail(detail);
EXTEND DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            ADD PROPERTY(showPackUserShipment);
        }
    }
}

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserShipment, supplier, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserShipment(ks, s)
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailSkuUserShipment(ks, s)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserShipment(s), ks)
//        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserShipmentSku(s, ks), ks, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserShipment(b, s)
        FILTER 'В документе ' 'F9' quantityUserShipmentDetailBatchUserShipment(b, s)
    FILTERGROUP filter4
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserShipment(s), skuBatch(b))
//        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeBatchStockDateTime(priceListTypeUserShipmentBatch(s, b), b, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;

// Резервы
@extendFormDocumentOrderLedger(userShipment, userShipment, customerStock, s);
@extendFormDocumentOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //
overShipmentPriceUserInvoiceDetail = ABSTRACT CASE NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
calcShipmentPriceUserInvoiceDetail (detail) = OVERRIDE costPriceUserInvoiceDetail(detail), overShipmentPriceUserInvoiceDetail(detail) PERSISTENT;

extraShipmentPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;

// Цены учетные
priceUserShipmentDetail (detail) <- costPriceInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
    WHEN CHANGED(priceInvoiceDetail(invoiceDetailUserShipmentDetail(detail)));
shipmentPriceUserInvoiceDetail(detail) <- calcShipmentPriceUserInvoiceDetail(detail) (+) extraShipmentPriceUserInvoiceDetail(detail) WHEN
    (CHANGED(calcShipmentPriceUserInvoiceDetail(detail)) OR
     CHANGED(extraShipmentPriceUserInvoiceDetail(detail)) OR
     CHANGED(createShipmentUserInvoiceDetail(detail)))
        AND createShipmentUserInvoiceDetail(detail);

// ------------------------------- Проведение по регистру остатков ------------------------ //

overCreateBatchShipmentDetail = ABSTRACT BOOLEAN (ShipmentDetail);
createBatchShipmentDetail (detail) = (detail IS ShipmentDetail OR overCreateBatchShipmentDetail(detail)) AND NOT batchShipmentDetail(detail);

// Создаем партию
CLASS ShipmentBatch 'Партия на основе закупки';
@defineAggregation(shipmentDetail, shipmentBatch, createBatchShipmentDetail);

@defineSkuLedgerAggregation(shipmentDetail, shipmentBatch, sku, customerStock);
priceShipmentBatch (batch) = priceShipmentDetail(shipmentDetailShipmentBatch(batch));

@implementBatch(ShipmentBatch, sku, stock, price);
quantityBatch (ledger) += quantityShipmentDetail(shipmentDetailShipmentBatch(ledger));
expiryDateBatch (ledger) += expiryDateShipmentDetail(shipmentDetailShipmentBatch(ledger));
sumInSkuLedger (ledger) += sumShipmentDetail(shipmentDetailShipmentBatch(ledger));

ledgerBatchShipmentDetail (detail) = OVERRIDE shipmentBatchShipmentDetail(detail), batchShipmentDetail(detail) PERSISTENT;

batchPriceListLedger(ledger) += OVERRIDE ledgerBatchShipmentDetail(invoiceShipmentDetailInvoiceDetail(ledger)), batchInvoiceDetail(ledger);
batchPriceListLedger(ledger) += OVERRIDE ledgerBatchShipmentDetail(invoiceShipmentDetailInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))), batchInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

nameBatch(batch) += CONCAT '', toString10(dateShipmentDetail(shipmentDetailShipmentBatch(batch))), '/ ' + seriesNumberShipment(shipmentShipmentDetail(shipmentDetailShipmentBatch(batch))),
                             '/ ' + nameSupplierShipmentDetail(shipmentDetailShipmentBatch(batch));

// Проводим по регистру учетных цен
supplierShipmentBatch (ledger) = supplierShipmentDetail(shipmentDetailShipmentBatch(ledger));
@implementSystemLedgerPriceListTypeBatch(account, ShipmentBatch, supplier, stock);

// Создаем просто inLIFOSkuLedger
createSkuLedgerShipmentDetail (detail) = detail IS ShipmentDetail AND NOT createBatchShipmentDetail(detail);

CLASS ShipmentSkuLedger 'Изменение остатка на основе закупки';
@defineAggregation(shipmentDetail, shipmentSkuLedger, createSkuLedgerShipmentDetail);

@defineSkuLedgerAggregation(shipmentDetail, shipmentSkuLedger, sku, customerStock);
priceShipmentSkuLedger (ledger) = priceShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));

@implementSkuLedgerInLIFO(ShipmentSkuLedger, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));
limitInLIFOSkuLedgerBatch(ledger, batch) += quantityShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)) IF batchShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)) == batch;
changedDataSkuLedger(ledger) += CHANGED(batchShipmentDetail(shipmentDetailShipmentSkuLedger(ledger)));
sumInSkuLedger (ledger) += sumShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));

costShipmentDetailBatch(detail, batch) += IF createBatchShipmentDetail(detail) THEN
                                             costSkuLedgerBatch(shipmentBatchShipmentDetail(detail), batch)
                                          ELSE
                                             costSkuLedgerBatch(shipmentSkuLedgerShipmentDetail(detail), batch);

// ------------------------------- Проведение регистру учетных цен ------------------------ //

supplierShipmentSkuLedger (ledger) = supplierShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));
@implementSystemLedgerPriceListType(account, ShipmentSkuLedger, supplier, stock);
batchPriceListLedger(ledger) += batchShipmentDetail(shipmentDetailShipmentSkuLedger(ledger));

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(Shipment, customerStock);
sumIncStockDocumentLedger (ledger) += sumShipmentDetailShipment(ledger);
sumItemIncStockDocumentLedger (ledger) += sumItemShipmentDetailShipment(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerShipmentDetailShipment(ledger);


NAVIGATOR {
    purchaseStockNavigator {
        ADD shipments;
    }
}