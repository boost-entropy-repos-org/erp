MODULE MarketingReport;

REQUIRE InvoiceMarketing, InvoiceShipment, ContractLedger;

NAMESPACE Invoice;

//////////////////////Маркетинговый отчет////////////////////////////

CLASS MarketingReport 'Маркетинговый отчет';
CLASS MarketingReportDetail 'Строка маркетингового отчета';

@defineDocument(marketingReport);
@defineDocumentHeaderPosted(MarketingReport);
@defineDocumentDetailPosted(marketingReport);

@deriveDocumentHeaderTimePrefix(MarketingReport, );

@defineDocumentHeaderNumber(MarketingReport);
@defineNumeratedDefault(MarketingReport, 'Маркетинговый отчет', 'МО');

@defineDocumentDescription (marketingReport, 'Маркетинговый отчет');
@defineDocumentCurrency (marketingReport);

contract = DATA Contract (MarketingReport);
numberContractMarketing 'Договор (номер)' (MarketingReport o) = number[Contract](contract(o)) IN documentPrm;
seriesNumberContractMarketing 'Договор (серия/номер)' (MarketingReport o) = seriesNumber[Contract](contract(o)) IN documentPrm;
dateFromContractMarketing 'Дата договора' (MarketingReport o) = dateFrom(contract(o)) IN documentPrm;
namePartyAContractMarketing 'Поставщик' (MarketingReport o)= name(partyA(contract(o)));
fullNamePartyAContractMarketing 'Поставщик (полное)' (MarketingReport o)= fullName(partyA(contract(o)));

namePartyBContractMarketing 'Покупатель' (MarketingReport o)= name(partyB(contract(o)));
fullNamePartyBContractMarketing 'Покупатель (полное)' (MarketingReport o)= fullName(partyB(contract(o)));

descriptionContractMarketing 'Описание договора' (MarketingReport o)= CONCAT ' ', seriesNumberContractMarketing(o), ' от ' + dateFromContractMarketing(o);

replace(Contract c, Contract o) += {contract(MarketingReport object) <- o WHERE contract(object) == c;}

currency (MarketingReport marketingReport) <- currency(contract(marketingReport)) WHEN CHANGED(contract(marketingReport));

fromDate 'Дата с' = DATA DATE (MarketingReport) IN documentHeader;
fromDate 'Дата с' (MarketingReportDetail d)= fromDate(marketingReport(d));
toDate 'Дата по' = DATA DATE (MarketingReport) IN documentHeader;
toDate 'Дата по' (MarketingReportDetail d)= toDate(marketingReport(d));

invoice  = DATA Invoice.Invoice (MarketingReportDetail);
seriesNumberInvoice 'Серия/номер' (MarketingReportDetail d) = Invoice.seriesNumber(invoice(d));
dateInvoice 'Дата' (MarketingReportDetail d) = Invoice.date(invoice(d));

sum 'Сумма' = IF in[Invoice](invoice(MarketingReportDetail d)) THEN sumInvoiceDetail[Invoice](invoice(d)) ELSE - sumInvoiceDetail[Invoice](invoice(d));
VATSum 'Сумма НДС' = IF in[Invoice](invoice(MarketingReportDetail d)) THEN VATSumInvoiceDetail[Invoice](invoice(d)) ELSE - VATSumInvoiceDetail[Invoice](invoice(d));
invoiceSum 'Сумма с НДС' = IF in[Invoice](invoice(MarketingReportDetail d)) THEN invoiceSumInvoiceDetail[Invoice](invoice(d)) ELSE - invoiceSumInvoiceDetail[Invoice](invoice(d));
marketingSum 'Сумма маркетинга' = IF in[Invoice](invoice(MarketingReportDetail d)) THEN marketingSumInvoiceDetail[Invoice](invoice(d)) ELSE - marketingSumInvoiceDetail[Invoice](invoice(d));

nameSupplierStock 'Склад поставщика' (MarketingReportDetail d) = name(supplierStock(invoice(d)));
nameCustomerStock 'Склад покупателя' (MarketingReportDetail d) = name(customerStock(invoice(d)));

@defineDocumentHeaderSumPrefix (marketingReport, , '');
@defineDocumentHeaderSumPrefix (marketingReport, VAT, ' НДС');
@defineDocumentHeaderSumPrefix (marketingReport, invoice, ' с НДС');
@defineDocumentHeaderSumPrefix (marketingReport, marketing, ' маркетинга');
    
fillData 'Заполнить данные'(MarketingReport report) = {
    IF contract(report) THEN {
        DELETE MarketingReportDetail d WHERE d IS MarketingReportDetail AND marketingReport(d)== report;
        
        LOCAL inc = BOOLEAN (Invoice.Invoice);
        IF contract(report) IS ContractMarketing THEN {
            inc (Invoice.Invoice i) <- TRUE WHERE date(i) >= fromDate(report) AND date(i) <= toDate(report) AND isPosted(i) //AND marketingSumInvoiceDetail(i) 
                                            AND contract(report) == contractMarketing(contractSku(i));
        } ELSE {
            inc (Invoice.Invoice i) <- TRUE WHERE date(i) >= fromDate(report) AND date(i) <= toDate(report) AND isPosted(i) //AND marketingSumInvoiceDetail(i) 
                                            AND contract(report) == contractSku(i);
        }
        
        FOR inc (Invoice.Invoice i) ORDER date(i) NEW d = MarketingReportDetail DO {
            marketingReport(d) <- report;
            invoice(d) <- i;                                                                                                                 
        }    
    }
       
}
skipMarketingReport 'Не создавать маркетинговый отчет' = ABSTRACT BOOLEAN (ContractMarketing);

firstMarketingDate = firstDayOfMonth(sumMonth(currentDate(), -1));
lastMarketingDate = lastDayOfMonth(sumMonth(currentDate(), -1));
marketingReport = GROUP MAX MarketingReport r IF isPosted(r) BY contract(r), fromDate(r), toDate(r);

createAutoMarketingReportFull 'Создать маркетинговый отчет (месяц)'(DATE df, DATE dt) = {
    FOR ContractMarketing c IS ContractMarketing 
        //AND inSalereport(Stock stock) AND partyB(c) == company
        AND NOT marketingReport(c, df, dt)
        AND NOT skipMarketingReport(c) DO {
        NEWSESSION {
            NEW r = MarketingReport {
        
                contract(r) <- c;
                fromDate(r) <- df;
                toDate(r) <- dt;
                isPosted(r) <- TRUE;
                
                fillData(r);
            
                IF countMarketingReportDetail(r) THEN {
                    apply();
                } ELSE {
                    cancel();
                }
            }
        }
    }
}
createAutoMarketingReportFull 'Создать маркетинговый отчет (месяц)'() = {
    createAutoMarketingReportFull(firstMarketingDate(), lastMarketingDate());

}

FORM marketingReport 'Маркетинговый отчет'

    OBJECTS r = MarketingReport PANEL
    PROPERTIES (r) isPosted, seriesNumberContractMarketing,  nameNumerator, 
                   number, series, date, time,
                   nameCurrency, note, fromDate, toDate, 
                   namePartyAContractMarketing, namePartyBContractMarketing                                       

    PROPERTIES (r) READONLY countMarketingReportDetail, sumMarketingReportDetail, VATSumMarketingReportDetail, invoiceSumMarketingReportDetail, marketingSumMarketingReportDetail                                           

    OBJECTS d = MarketingReportDetail
    PROPERTIES (d) index
    PROPERTIES (d) seriesNumberInvoice, dateInvoice, nameSupplierStock, nameCustomerStock                   
    PROPERTIES (d) sum, VATSum, invoiceSum, marketingSum             
    PROPERTIES (d) NEW, deleteid=DELETE GRID
    
    PROPERTIES(r)  fillData TOOLBAR TODRAW d  
    
    ORDER index(d)

    PROPERTIES(r) TODRAW d deleteMarketingReportDetail
    
    FILTERS marketingReport(d) == r
    
    EVENTS
        ON OK prePost(r)
                
    EDIT MarketingReport OBJECT r   
;

DESIGN marketingReport {
    BOX {
        preferredSize = (1024, 768);
        PROPERTY(formOk()) {
            caption = 'Провести';
        }        
        NEW headerBox {
            type = CONTAINERH;

            NEW headerParams {
                fill = 1;
                type = CONTAINERV;
                MOVE GROUP(documentHeader,r) {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(r));
                        MOVE PROPERTY(fromDate(r));
                        MOVE PROPERTY(toDate(r));                        
                        MOVE PROPERTY(seriesNumberContractMarketing(r));                                              
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameNumerator(r));
                        MOVE PROPERTY(number(r));
                        MOVE PROPERTY(series(r));
                        MOVE PROPERTY(date(r));
                        MOVE PROPERTY(time(r));
                    }   
                    NEW headerLegalEntity {
                        type = CONTAINERH;
                        MOVE PROPERTY(namePartyAContractMarketing(r));
                        MOVE PROPERTY(namePartyBContractMarketing(r));
                    }  
                                                                                                                   
                }
                MOVE GROUP(documentPrm,r);
            }
            MOVE GROUP(documentSum,r) {
                columns = 1;
            }
        }
//        NEW totalSum {
//            type = CONTAINERV;
//            caption = 'Итоги';
//            MOVE PROPERTY(sumMarketingReportDetail(r));
//            MOVE PROPERTY(VATSumMarketingReportDetail(r));  
//            MOVE PROPERTY(invoiceSumMarketingReportDetail(r));
//            MOVE PROPERTY(marketingSumMarketingReportDetail(r));  
//            MOVE PROPERTY(countMarketingReportDetail(r));                                          
//        }
        NEW specificationBox {
            fill = 1;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
        }
        MOVE TOOLBARBOX;
    }
}

filterMarketingReportDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (MarketingReport i) = date(i) >= filterMarketingReportDateFrom() OR (i IS MarketingReport AND NOT filterMarketingReportDateFrom());      

filterMarketingReportDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (MarketingReport i) = date(i) <= filterMarketingReportDateTo() OR (i IS MarketingReport AND NOT filterMarketingReportDateTo());      

filterMarketingReportSupplier = DATA LOCAL LegalEntity ();
nameFilterMarketingReportSupplier 'Поставщик' = name(filterMarketingReportSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterSupplier (MarketingReport i) = partyA(contract(i)) == filterMarketingReportSupplier() OR (i IS MarketingReport AND NOT filterMarketingReportSupplier());   

FORM marketingReports 'Маркетинговые отчеты'
    PROPERTIES () filterMarketingReportDateFrom, filterMarketingReportDateTo, nameFilterMarketingReportSupplier
    
    OBJECTS r = MarketingReport 
    PROPERTIES (r) READONLY isPosted, number, series, date, time, seriesNumberContractMarketing, namePartyAContractMarketing, namePartyBContractMarketing,                    
                   fromDate, toDate, nameCurrency, note                   
                
    PROPERTIES (r) READONLY countMarketingReportDetail, sumMarketingReportDetail, VATSumMarketingReportDetail, invoiceSumMarketingReportDetail, marketingSumMarketingReportDetail                                           

    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
                            postedNameUser, postedTime, postedHostnameComputer  
        
    OBJECTS d = MarketingReportDetail
    PROPERTIES (d) READONLY index
    PROPERTIES (d) READONLY seriesNumberInvoice, dateInvoice, nameSupplierStock, nameCustomerStock                   
    PROPERTIES (d) READONLY sum, VATSum, invoiceSum, marketingSum  
    
    ORDER index(d)

    FILTERS marketingReport(d) == r,
            filterDateFrom(r),
            filterDateTo(r),
            filterSupplier(r)
                
    LIST MarketingReport OBJECT r
;
DESIGN marketingReports {
    BOX {
        preferredSize = (1024, 768);

        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;

            type = SPLITV;
            MOVE BOX(r);    

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE GROUP(created,r);  
                    MOVE GROUP(posted,r);                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        NEW filter BEFORE documentContainer {
            type = CONTAINERH;
            caption = 'Фильтры';
            MOVE PROPERTY (filterMarketingReportDateFrom());
            MOVE PROPERTY (filterMarketingReportDateTo());
            MOVE PROPERTY (nameFilterMarketingReportSupplier());
        }
    }
}

NAVIGATOR {
    contractDashboardNavigator {
        ADD marketingReports;
    }
}

// ------------------ Проведение по регистру задолженности ------------------ //

@implementContractLedger( , MarketingReport, contract);
                                   
sum[ContractLedger](MarketingReport contractLedger) += - NUMERIC[18,4](marketingSumMarketingReportDetail(contractLedger));

@implementContractLedger(a , MarketingReport, contract);
sum[ContractALedger](MarketingReport contractALedger) += - NUMERIC[18,4](marketingSumMarketingReportDetail(contractALedger));

@implementOutContractLedger(MarketingReport, contract);

sum[OutContractLedger](MarketingReport outContractLedger) +=  NUMERIC[22,8](marketingSumMarketingReportDetail(outContractLedger));

