MODULE Revaluation;

REQUIRE RepricingCommittee, StockDocumentSkuLedger, PriceListCalc, PriceListLedger, RevaluationOperation, StockSkuDocument;

NAMESPACE Revaluation;

//----------------------------------------------- Переоценка (опт) ---------------------------------------------------//

CLASS ABSTRACT Revaluation 'Переоценка';
CLASS ABSTRACT RevaluationDetail 'Строка переоценки': InLIFOSkuLedger;

CLASS UserRevaluation 'Переоценка (польз.)' : Revaluation;
CLASS UserRevaluationDetail 'Строка переоценки (польз.)' : RevaluationDetail;

@defineDocumentInterface(revaluation);
@deriveDocumentHeaderTimePrefix(UserRevaluation, );

@defineDocumentInterfaceTimePrefix(revaluation, before, ' документа (до)');
@deriveDocumentHeaderTimePrefix(UserRevaluation, before);

@defineDocumentInterfaceNumber(revaluation);
@defineNumeratedDefault(UserRevaluation, 'Переоценки', 'ПО');

@defineDocumentInterfaceDataStock(revaluation, stock, 'Склад');
@defineDocumentDialogStocks(userRevaluation, stock, company, , );

CONSTRAINT stock(UserRevaluation r) AND NOT  isCompany(stock(r))
    CHECKED BY stock[UserRevaluation]
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfacePosted(revaluation);
@defineDocumentInterfaceClosed(revaluation);

@defineDocumentInterfaceDescription(revaluation, 'Переоценка');

@defineDocumentInterfaceCurrency(revaluation);
@deriveDocumentCurrency(userRevaluation, stock);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (revaluation, stock);

// Sku
@defineDocumentInterfaceDetailSku(revaluation, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(revaluation);

// Партия
@showDocumentInterfaceDetailBatch(revaluation);
@defineDocumentInterfaceDetailBatch(revaluation, batch);

idBatch 'Код партии' (RevaluationDetail d) = id(batch(d)) MINCHARWIDTH 10 PREFCHARWIDTH 15;
idBatch 'Код партии' (UserRevaluationDetail d) = id(batch(d)) MINCHARWIDTH 10 PREFCHARWIDTH 15;

changeBatch = ACTION (UserRevaluationDetail userRevaluationDetail) {
    FORM dialogBatchStockOut OBJECTS st = stock(userRevaluationDetail),
                             t = dateTime(userRevaluationDetail),
                             sk = sku(userRevaluationDetail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batch(userRevaluationDetail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batch(userRevaluationDetail) <- NULL;
    }

}

replace(Sku s, Batch b) += ACTION (s, b){ sku(UserRevaluationDetail detail) <- s WHERE batch(detail) == b;}

// -- До

// Цена учетная
@defineDocumentInterfaceDetailPricePrefix(revaluation, cur, ' учетная до');

// Автоматическое заполнение цен до
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRevaluation, accountPriceListType, cur, sku, stock);

// -- После

// Цена учетная
@defineDocumentInterfaceDetailPricePrefix(revaluation, , ' учетная после');

// ---- Суммы по строкам ---- //

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (revaluation, cur, ' учетная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (revaluation, , ' учетная после');

// -- Разница
@defineDocumentInterfaceDetailDiffSumPrefix (revaluation, sum, , cur, ' изменения учетной ');

// -- До
@deriveDocumentDetailSumPrefix(userRevaluation, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRevaluation, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(revaluation);
@defineDocumentHeaderSkuQuantity(revaluation, sku);
@defineDocumentHeaderSkuQuantity(userRevaluation, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (revaluation, cur, ' учетная  до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (revaluation, , ' учетная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (revaluation, diff, ' изменения учетной');

// Изменение сумм по товару и таре
@defineDocumentInterfaceHeaderItemSum(revaluation, diff, diff);

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRevaluation, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userRevaluation, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Revaluation, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(revaluation, changeLedger, 'Не изменять текущие цены');

edit 'Редактировать' = ACTION ABSTRACT LIST (Revaluation) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //

FORM revaluation 'Переоценка (печать)'

    OBJECTS p = Revaluation FIXED PANEL
    PROPERTIES (p) SELECTOR isPosted

    PROPERTIES (p) number, series, date, time, beforeDate, fullNameStock,
                   diffSumRevaluationDetail, curSumRevaluationDetail, sumRevaluationDetail,
                   quantityRevaluationDetail, countRevaluationDetail,
                   nameRepricingCommittee, skipChangeLedger,
                   note, numberDisposal, repricingCommittee, nameEmployeeCommittee,
                   nameChairman, namePositionChairman

    OBJECTS d = RevaluationDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku,
                   shortNameUOMSku, nameBatch, quantity,
                   curPrice, curSum,
                   price, sum, diffSum

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   name[Contact], namePosition

    FILTERS    revaluation(d) == p,
               inCommittee(p, e)

;

print 'Переоценка' (Revaluation revaluation) = ACTION FORM revaluation OBJECTS p = revaluation PRINT  IMAGE 'print.png' IN print;

// --------------------------- Формы --------------------------------- //
FORM userRevaluation 'Переоценка'
    OBJECTS p=UserRevaluation FIXED PANEL
    PROPERTIES (p) isPosted, nameNumerator, number, series,
                   date, time, beforeDate, nameStock ON CHANGE changeStockCompany(p),
                   diffSumUserRevaluationDetail, note, numberDisposal ON CHANGE changeNumberDisposal(p),
                   nameRepricingCommittee, skipChangeLedger

    OBJECTS d=UserRevaluationDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku,
                   shortNameUOMSku, nameBatch ON CHANGE changeBatch(d), quantity,
                   curPrice, curSum,
                   price, sum, ADDOBJ, deleted=DELETESESSION

    PROPERTIES(d) READONLYIF batch(d) SHOWIF showIDs()
                  idBatch ON CHANGE changeBatch(d) BEFORE nameBatch(d)
                  
    PROPERTIES(p) TODRAW d addDetailDialogSkuStockUserRevaluationDetail,
                           addDetailInputBarcodeUserRevaluationDetail, deleteUserRevaluationDetail

    FILTERS userRevaluation(d)==p

    EVENTS
        ON OK prePost(p)

    EDIT UserRevaluation OBJECT p
;

DESIGN userRevaluation {
    main {
        preferredSize = (1024, 768);

        NEW header.box {

            MOVE p.documentHeader {
                type = CONTAINERH;
                MOVE PROPERTY(isPosted(p)) { preferredCharWidth = 10; }
                MOVE PROPERTY(nameStock(p));
                MOVE PROPERTY(nameNumerator(p));
                MOVE PROPERTY(number(p));
                MOVE PROPERTY(series(p));
                MOVE PROPERTY(date(p));
                MOVE PROPERTY(time(p));
                MOVE PROPERTY(beforeDate(p));
            }

            NEW headerCol1 {
                type = CONTAINERH;
                MOVE p.documentPrm {
                    columns = 2;
                }
                MOVE p.documentSum {
                    columns = 1;
                }
            }
        }

        NEW specification.box {
            fill = 1;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(diffSumUserRevaluationDetail(p)) { preferredCharWidth = 13;}
    }
}

edit 'Редактировать' = ACTION ABSTRACT LIST  (RevaluationDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserRevaluationDetail d) = ACTION (d) NEWSESSION {
    FORM userRevaluation OBJECTS p = userRevaluation(d), d = d MANAGESESSION DOCKEDMODAL;
}

edit(UserRevaluationDetail d) += ACTION edit(d);    
edit[SkuLedger](RevaluationDetail ledger) += ACTION edit(ledger);

@defineDocumentSkuPriceListTypeSystemLedger(userRevaluation, accountPriceListType, stock, );
@extendFormDocumentSku(userRevaluation, userRevaluation, p);

@defineDocumentBatchPriceListTypeSystemLedger(userRevaluation, accountPriceListType, stock, );
@extendFormDocumentBatch(userRevaluation, userRevaluation, p);

EXTEND FORM userRevaluation

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, p) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserRevaluationDetail(ks, p) 'F9'
;

EXTEND FORM userRevaluation

    FILTERGROUP filter1
        FILTER 'С остатком ' prevCurrentBalance(b, p) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserRevaluationDetail(b, p) 'F9'
;

addUserRevaluation 'Добавить' = ACTION ADDFORM UserRevaluation;
edit 'Редактировать' (userRevaluation) = ACTION EDITFORM UserRevaluation;

edit (UserRevaluation revaluation) += ACTION edit(revaluation);
isUserOpened(UserRevaluation r)=  isOpened[Revaluation](r) AND is(r);

FORM revaluations 'Переоценки' 
    OBJECTS p = Revaluation    

    PROPERTIES (p) READONLYIF isReadonly() isClosed, isPosted, number, series, 
                   date, time, beforeDate, nameStock
    PROPERTIES (p) READONLY countRevaluationDetail, diffSumRevaluationDetail
    PROPERTIES (p) READONLYIF isReadonly() numberDisposal, skipChangeLedger, note

    PROPERTIES (p) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES ()  addUserRevaluation TODRAW p
    PROPERTIES (p) edit SHOWIF isOpened(p)
    PROPERTIES (p) close[UserRevaluation] SHOWIF isOpened[UserRevaluation](p), open SHOWIF isClosed[UserRevaluation](p)

    PROPERTIES (p) deletep=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpened(p)      
    PROPERTIES (p) print FORCE PANEL


    OBJECTS d = RevaluationDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameBatch,
                   quantity, curPrice, curSum, price, sum

    PROPERTIES(d) READONLY SHOWIF showIDs()
                  idBatch BEFORE nameBatch(d)
                      
    FILTERS revaluation(d) == p
;
@extendFormFilterAccessStock(Revaluation, p, revaluations, stock, company);

DESIGN revaluations {
    NEW documentContainer {
        fill = 1;
        type = SPLITV;

        MOVE p.box {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE p.print;
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
            }
        }
    }

    MOVE functions.box;
}
@extendFormEditable(revaluations);
@defineFilterIsOpened (revaluation, revaluations, p);
//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentInterfaceOperation (revaluation, Revaluation, );
@extendFormFilterRoleAccess(revaluation, p, revaluations);

@defineDocumentOperationRolePrefix(userRevaluation, );

EXTEND FORM userRevaluation
    PROPERTIES(p) nameOperation
;
DESIGN userRevaluation{
    p.documentPrm{
        MOVE PROPERTY (nameOperation(p)) BEFORE PROPERTY(note(p));
    }
}
EXTEND FORM revaluations
    PROPERTIES(p) READONLY nameOperation AFTER nameStock(p)
;

NAVIGATOR {
    revaluationNavigator {
        ADD revaluations BEFORE repricingCommitteeDialog;
        ADD Revaluation.operations AFTER repricingCommitteeDialog;
    }
}

// Проведение по товарному отчету
@implementStockDocumentLedgerOut(Revaluation, stock);
type(Revaluation l) += 'Переоценка (склад)' IF l IS Revaluation;
sumItem (Revaluation ledger) += -diffSumRevaluationDetail(ledger);
sumContainer (Revaluation ledger) += 0.0 IF ledger IS Revaluation;

operation[StockDocumentLedger](Revaluation ledger) += operation(ledger);
edit[StockDocumentLedger](Revaluation l) += ACTION edit(l);
close[StockDocumentLedger](Revaluation l) += ACTION close(l);
// Проведение по регистру
@implementSkuLedger(revaluationDetail, sku, stock);
sum[InSkuLedger] (RevaluationDetail ledger) += diffSum(ledger);

stockDocumentLedger(RevaluationDetail ledger) += revaluation(ledger); 

batch[SkuLedger](RevaluationDetail ledger) += batch(ledger);

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS RevaluationDetail : PriceListLedger;

fromDateTime (RevaluationDetail ledger) += dateTime(ledger);

isPosted[PriceListLedger](RevaluationDetail ledger) += isPosted(ledger);
skip[PriceListLedger](RevaluationDetail ledger) += skipChangeLedger(ledger);

sku[PriceListLedger] (RevaluationDetail ledger) += sku(ledger);

description[PriceListLedger] (RevaluationDetail ledger) += description(ledger);

in (RevaluationDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
price (RevaluationDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN price(ledger);

in (RevaluationDetail ledger, Stock stock) += stock(ledger) == stock;
in (RevaluationDetail ledger, Batch batch) += batch(ledger) == batch; 

edit[PriceListLedger](RevaluationDetail d) += ACTION edit(d);

// ---------------------- Создание переоценки до учетной цены ----------------------- //

addAdjustmentAccountSumDetail 'Привести учетные суммы к ценам партий' = ACTION (Revaluation revaluation) {
    LOCAL sum = NUMERIC[16,2] (Batch);
    sum(Batch b) <- accountSumB(b, stock(revaluation), dateTime(revaluation));
    
    LOCAL sumBatch = NUMERIC[16,2] (Sku);
    sumBatch(Sku s) <- [= GROUP SUM sum(Batch b) BY sku(b)](s);
    
    LOCAL sum = NUMERIC[16,2] (Sku);
    sum(Sku s) <- sumB(s, stock(revaluation), dateTime(revaluation));
    
    LOCAL diffSum = NUMERIC[16,2] (Sku);
    diffSum(Sku s) <- sum(s) (-) sumBatch(s);
    
    FOR diffSum(Sku s) IF diffSum(s) != 0.0 ADDOBJ d = UserRevaluationDetail DO {
        userRevaluation(d) <- revaluation;
        sku(d) <- s;
        quantity(d) <- balanceB(s, stock(revaluation), dateTime(revaluation));
        curSum(d) <- sum(s);
        sum(d) <- sumBatch(s);
    }  
} TOOLBAR;

EXTEND FORM userRevaluation
    PROPERTIES(p) addAdjustmentAccountSumDetail TODRAW d
;