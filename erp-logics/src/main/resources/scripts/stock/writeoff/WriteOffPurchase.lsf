MODULE WriteOffPurchase;

REQUIRE WriteOff, PurchaseShipment;

PRIORITY Purchase; 

NAMESPACE WriteOff;

//---------------------------------- Норма отходов ------------------------------------//
CLASS WriteOffRate 'Норма отходов';
TABLE writeOffRate(WriteOffRate);

@defineExternalizable(writeOffRate, VARSTRING[100]);

nameWriteOffRate 'Наименование' = DATA VARISTRING[100](WriteOffRate);

percentWriteOffRate 'Норма,%' = DATA NUMERIC[10,3] (WriteOffRate);
countryWriteOffRate = DATA Country (WriteOffRate);
nameCountryWriteOffRate 'Страна' (writeOffRate) = nameCountry(countryWriteOffRate(writeOffRate)) IN base;

FORM writeOffRate 'Норма отходов'
    OBJECTS r=WriteOffRate FIXED PANEL
    PROPERTIES(r) nameWriteOffRate, percentWriteOffRate, nameCountryWriteOffRate
    EDIT WriteOffRate OBJECT r
;

writeOffRateCountrySku 'Норма отходов' = ABSTRACT WriteOffRate (Country, Sku);
nameWriteOffRateCountrySku 'Норма отходов' = nameWriteOffRate(writeOffRateCountrySku(country, sku));
percentWriteOffRateCountrySku 'Норма отходов,%' = percentWriteOffRate(writeOffRateCountrySku(country, sku));

FORM writeOffRateDialog 'Нормы отходов'
    OBJECTS r=WriteOffRate
    PROPERTIES(r) READONLY nameWriteOffRate, percentWriteOffRate, nameCountryWriteOffRate
    PROPERTIES(r) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    DIALOG WriteOffRate OBJECT r
;

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

createPurchaseWriteOffOperation 'Акт списания' = DATA BOOLEAN (Purchase.Operation);

EXTEND FORM Purchase.operation
    PROPERTIES(o) createPurchaseWriteOffOperation
;
DESIGN Purchase.operation {
    createContainer {
        MOVE PROPERTY(createPurchaseWriteOffOperation(o));
    }
}

writeOffOperationOperation  = DATA Operation (Purchase.Operation);
nameWriteOffOperationOperation 'Операция (списания)' (operation)= nameOperation(writeOffOperationOperation(operation));

EXTEND FORM Purchase.operation
    PROPERTIES(o) nameWriteOffOperationOperation
;
DESIGN Purchase.operation {
    createContainer {
        MOVE PROPERTY(nameWriteOffOperationOperation(o)) AFTER PROPERTY(createPurchaseWriteOffOperation(o));
    }
}

//---------------------------------- Extend Invoice ------------------------------------//
@defineDocumentInterfaceProperty (invoice, createPurchaseWriteOff, 'Создать акт списания');
@deriveDocumentOperationProperty(UserInvoice, createPurchaseWriteOff);

@defineDocumentInterfaceOperationPrefix (invoice, writeOff, WriteOff, ' ( списания)');
writeOffOperationUserInvoice (i) <- writeOffOperationOperation(operationUserInvoice(i))
    WHEN CHANGED(operationUserInvoice(i));

@defineDocumentInterfaceDetailQuantityPrefix (invoice, writeOff, ' списания');
@defineDocumentInterfaceDetailPricePrefix(invoice, writeOff, ' списания');
@defineDocumentInterfaceDetailDataSumPrefix (invoice, writeOff, ' списания');
@deriveDocumentDetailSumPrefix(userInvoice, writeOff, currency, writeOffQuantity);
@defineDocumentInterfaceHeaderSumPrefix (invoice, writeOff, ' списания');
@defineDocumentInterfaceHeaderWriteOffCommittee(invoice, customerStock);

reasonInvoice 'Причина списания (ИД)' = ABSTRACT Reason (Invoice);
reasonUserInvoice 'Причина списания (ИД)' = DATA Reason (UserInvoice);
reasonInvoice(invoice) += reasonUserInvoice(invoice);
nameReasonInvoice 'Причина списания' (invoice) = nameReason(reasonInvoice(invoice)) IN documentPrm;
nameReasonUserInvoice 'Причина списания' (userInvoice) = nameReason(reasonUserInvoice (userInvoice)) IN documentPrm;
reasonUserInvoice (i) <- reasonOperation(writeOffOperationUserInvoice(i))
    WHEN CHANGED(writeOffOperationUserInvoice(i));

writeOffRateInvoiceDetail 'Норма отходов' (invoiceDetail) = ABSTRACT WriteOffRate (InvoiceDetail);
nameWriteOffRateInvoiceDetail 'Норма отходов' (invoiceDetail) = nameWriteOffRate(writeOffRateInvoiceDetail(invoiceDetail));
percentWriteOffRateInvoiceDetail 'Норма отходов,%' (invoiceDetail)= ABSTRACT NUMERIC[10,3] (InvoiceDetail);

writeOffRateUserInvoiceDetail 'Норма отходов' (userInvoiceDetail) = DATA WriteOffRate (UserInvoiceDetail);
nameWriteOffRateUserInvoiceDetail 'Норма отходов' (userInvoiceDetail) = nameWriteOffRate(writeOffRateUserInvoiceDetail(userInvoiceDetail));
percentWriteOffRateUserInvoiceDetail 'Норма отходов,%' (invoiceDetail)= DATA NUMERIC[10,3] (UserInvoiceDetail);

writeOffRateUserInvoiceDetail(detail) <- writeOffRateCountrySku(countryCustomerStockUserInvoiceDetail(detail), skuUserInvoiceDetail(detail)) WHEN
    (CHANGED(countryCustomerStockUserInvoiceDetail(detail)) OR CHANGED(skuUserInvoiceDetail(detail))) AND createPurchaseWriteOffUserInvoiceDetail(detail);

percentWriteOffRateUserInvoiceDetail (detail) <- percentWriteOffRate(writeOffRateUserInvoiceDetail(detail)) WHEN
    CHANGED(writeOffRateUserInvoiceDetail(detail)) AND createPurchaseWriteOffUserInvoiceDetail(detail);

writeOffQuantityUserInvoiceDetail (detail) <- round3(shipmentQuantityUserInvoiceDetail(detail)*percentWriteOffRateUserInvoiceDetail (detail)/100)   WHEN
    (CHANGED(shipmentQuantityUserInvoiceDetail(detail)) OR CHANGED(percentWriteOffRateUserInvoiceDetail (detail))) AND createPurchaseWriteOffUserInvoiceDetail(detail);

writeOffPriceUserInvoiceDetail (detail) <- shipmentPriceUserInvoiceDetail(detail) WHEN CHANGED(shipmentPriceUserInvoiceDetail(detail)) AND createPurchaseWriteOffUserInvoiceDetail(detail);

writeOffRateInvoiceDetail (detail) += writeOffRateUserInvoiceDetail(detail);
percentWriteOffRateInvoiceDetail (detail) += percentWriteOffRateUserInvoiceDetail(detail);

backgroundWrittenInvoice 'Цвет' (invoice) = RGB(212, 255, 212) IF invoice IS Invoice;
toShowCreatePurchaseWriteOffInvoice (invoice) = ABSTRACT BOOLEAN (Invoice);

EXTEND FORM userInvoice
    PROPERTIES (i) createPurchaseWriteOffUserInvoice BACKGROUND backgroundWrittenInvoice(i) SHOWIF toShowCreatePurchaseWriteOffInvoice(i)
    PROPERTIES (i) BACKGROUND backgroundWrittenInvoice(i) SHOWIF createPurchaseWriteOffUserInvoice(i)
                   nameWriteOffOperationUserInvoice, nameWriteOffCommitteeUserInvoice, nameReasonUserInvoice, writeOffSumUserInvoiceDetailUserInvoice
    PROPERTIES (d) SHOWIF createPurchaseWriteOffUserInvoice(i) BEFORE deleteid BACKGROUND backgroundWrittenInvoice(i)
                   nameWriteOffRateUserInvoiceDetail, percentWriteOffRateUserInvoiceDetail, writeOffQuantityUserInvoiceDetail,
                   writeOffPriceUserInvoiceDetail,  writeOffSumUserInvoiceDetail
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreateWriteOff {
            caption = 'Акт списания';
            MOVE PROPERTY(createPurchaseWriteOffUserInvoice(i));
            MOVE PROPERTY(nameWriteOffOperationUserInvoice(i));
            MOVE PROPERTY(nameWriteOffCommitteeUserInvoice(i));
            MOVE PROPERTY(nameReasonUserInvoice(i));
        }
    }
    PROPERTY(writeOffSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}
}
EXTEND FORM invoices
    PROPERTIES (i) READONLY writeOffSumInvoiceDetailInvoice BACKGROUND backgroundWrittenInvoice(i) BEFORE ordersInvoice(i)
    PROPERTIES (d) SHOWIF createPurchaseWriteOffInvoice(i) BACKGROUND backgroundWrittenInvoice(i) READONLY writeOffQuantityInvoiceDetail,
                   writeOffPriceInvoiceDetail,  writeOffSumInvoiceDetail
;


//---------------------------------- Extend Shipment ------------------------------------//

GROUP shipment 'Информация о поставке' : base;

@defineDocumentInterfaceProperty (shipment, createPurchaseWriteOff, 'Создать акт списания');
@deriveDocumentOperationProperty(UserShipment, createPurchaseWriteOff);

overCopyInvoice(s, d) += ACTION (s, d) {
    ASSIGN createPurchaseWriteOffUserInvoice(d) <- createPurchaseWriteOffUserInvoice(s);
    ASSIGN writeOffCommitteeUserInvoice(d) <- writeOffCommitteeUserInvoice(s);
    ASSIGN writeOffOperationUserInvoice(d) <- writeOffOperationUserInvoice(s);
    ASSIGN reasonUserInvoice(d) <- reasonUserInvoice(s);
}

@defineDocumentInterfaceOperationPrefix (shipment, writeOff, WriteOff, ' ( списания)');
writeOffOperationUserShipment(s) <- writeOffOperationOperation(operationUserShipment(s))
    WHEN CHANGED(operationUserShipment(s));

@defineDocumentInterfaceDetailQuantityPrefix (shipment, writeOff, ' (списания)');
@defineDocumentInterfaceDetailPricePrefix(shipment, writeOff, ' (списания)');
@defineDocumentInterfaceDetailDataSumPrefix (shipment, writeOff, ' (списания)');
@deriveDocumentDetailSumPrefix(userShipment, writeOff, currency, writeOffQuantity);
@defineDocumentInterfaceHeaderSumPrefix (shipment, writeOff, ' (списания)');
@defineDocumentInterfaceHeaderWriteOffCommittee(shipment, customerStock);

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

reasonShipment 'Причина списания (ИД)' = ABSTRACT Reason (Shipment);
reasonUserShipment 'Причина списания (ИД)' = DATA Reason (UserShipment);
reasonShipment(shipment) += reasonUserShipment(shipment);
nameReasonShipment 'Причина списания' (shipment) = nameReason(reasonShipment (shipment)) IN documentPrm;
nameReasonUserShipment 'Причина списания' (userShipment) = nameReason(reasonUserShipment (userShipment)) IN documentPrm;
reasonUserShipment(s) <- reasonOperation(writeOffOperationUserShipment(s))
    WHEN CHANGED(writeOffOperationUserShipment(s));

writeOffRateShipmentDetail 'Норма отходов' (shipmentDetail) = ABSTRACT WriteOffRate (ShipmentDetail);
nameWriteOffRateShipmentDetail 'Норма отходов' (shipmentDetail) = nameWriteOffRate(writeOffRateShipmentDetail(shipmentDetail));
percentWriteOffRateShipmentDetail 'Норма отходов,%' (shipmentDetail)= ABSTRACT NUMERIC[10,3] (ShipmentDetail);

writeOffRateUserShipmentDetail 'Норма отходов' (userShipmentDetail) = DATA WriteOffRate (UserShipmentDetail);
nameWriteOffRateUserShipmentDetail 'Норма отходов' (userShipmentDetail) = nameWriteOffRate(writeOffRateUserShipmentDetail(userShipmentDetail));
percentWriteOffRateUserShipmentDetail 'Норма отходов,%' (shipmentDetail)= DATA NUMERIC[10,3] (UserShipmentDetail);

writeOffRateUserShipmentDetail(detail) <- writeOffRateCountrySku(countryCustomerStockUserShipmentDetail(detail), skuUserShipmentDetail(detail)) WHEN
    CHANGED(countryCustomerStockUserShipmentDetail(detail)) OR CHANGED(skuUserShipmentDetail(detail)) AND createPurchaseWriteOffUserShipmentDetail(detail);

percentWriteOffRateUserShipmentDetail (detail) <- percentWriteOffRate(writeOffRateUserShipmentDetail(detail)) WHEN
    CHANGED(writeOffRateUserShipmentDetail(detail)) AND createPurchaseWriteOffUserShipmentDetail(detail);

writeOffQuantityUserShipmentDetail (detail) <- round3(quantityUserShipmentDetail(detail)*percentWriteOffRateUserShipmentDetail (detail)/100)   WHEN
    CHANGED(quantityUserShipmentDetail(detail)) OR CHANGED(percentWriteOffRateUserShipmentDetail (detail)) AND createPurchaseWriteOffUserShipmentDetail(detail);

writeOffPriceUserShipmentDetail (detail) <- priceUserShipmentDetail(detail) WHEN CHANGED(priceUserShipmentDetail(detail)) AND createPurchaseWriteOffUserShipmentDetail(detail);

writeOffRateShipmentDetail (detail) += writeOffRateUserShipmentDetail(detail);
percentWriteOffRateShipmentDetail (detail) += percentWriteOffRateUserShipmentDetail(detail);


//---------------------------------- Extend Aggregation (invoiceInvoiceShipment) ------------------//

createPurchaseWriteOffShipment(shipment) += createPurchaseWriteOffInvoice(invoiceInvoiceShipment(shipment));
reasonShipment(shipment) += reasonInvoice(invoiceInvoiceShipment(shipment));
writeOffCommitteeShipment(shipment) += writeOffCommitteeInvoice(invoiceInvoiceShipment(shipment));
writeOffOperationShipment(shipment) += writeOffOperationInvoice(invoiceInvoiceShipment(shipment));

writeOffQuantityShipmentDetail(detail) += writeOffQuantityInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));
writeOffPriceShipmentDetail(detail) += writeOffPriceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));
writeOffSumShipmentDetail(detail) += writeOffSumInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));
writeOffRateShipmentDetail (detail) += writeOffRateInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));
percentWriteOffRateShipmentDetail(detail) += percentWriteOffRateInvoiceDetail(invoiceDetailInvoiceShipmentDetail(detail));

//--  Связь поставки и акта списания
shipmentDetailWriteOffDetail = ABSTRACT ShipmentDetail (WriteOffDetail) PERSISTENT;
shipmentDetailUserWriteOffDetail = DATA ShipmentDetail (UserWriteOffDetail);
shipmentDetailWriteOffDetail(writeOffDetail) += shipmentDetailUserWriteOffDetail(writeOffDetail);

CONSTRAINT batchWriteOffDetail(detail) != shipmentDetailUserWriteOffDetail(detail) OR
           stockWriteOff(writeOffWriteOffDetail(detail)) != customerStockShipmentDetail(shipmentDetailUserWriteOffDetail(detail)) OR
           skuWriteOffDetail(detail) != skuShipmentDetail(shipmentDetailUserWriteOffDetail(detail))
    CHECKED BY shipmentDetailUserWriteOffDetail
        MESSAGE 'Склад, партия и товар в поставке и акте списания должны соответствовать друг другу';


descriptionIndexShipmentDetailWriteOffDetail 'Строка поставки' (detail) = descriptionIndexShipmentDetail(shipmentDetailWriteOffDetail(detail));
descriptionIndexShipmentDetailUserWriteOffDetail 'Строка поставки' (detail) = descriptionIndexShipmentDetail(shipmentDetailUserWriteOffDetail(detail));

quantityWriteOffDetailShipmentWriteOff (shipment, writeOff) = GROUP SUM quantityWriteOffDetail(writeOffDetail) BY shipmentShipmentDetail(shipmentDetailWriteOffDetail(writeOffDetail)), writeOffWriteOffDetail(writeOffDetail);

shipmentsWriteOff 'Поставки' (writeOff) = GROUP CONCAT VARSTRING[255](descriptionShipment(shipment)) IF quantityWriteOffDetailShipmentWriteOff(shipment, writeOff) , ', '
                                                BY writeOff
                                                ORDER writeOff IN shipment MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

writtenOffShipmentDetail 'Кол-во (списания)' (shipmentDetail) = GROUP SUM quantityWriteOffDetail(writeOffDetail) IF isPostedWriteOffDetail(writeOffDetail)
                                                                   BY shipmentDetailWriteOffDetail(writeOffDetail) PERSISTENT;
writtenOffShipment (shipment)= GROUP SUM writtenOffShipmentDetail(shipmentDetail) BY shipmentShipmentDetail(shipmentDetail);
notWrittenOffShipment 'Поставки без списания' (shipment) = shipment IS Shipment AND NOT writtenOffShipment (shipment);

showWriteOffShipment (shipment) =  shipment IS Shipment AND NOT createPurchaseWriteOffShipment(shipment);

backgroundWrittenShipment 'Цвет' (shipment) = RGB(212, 255, 212) IF shipment IS Shipment;

EXTEND FORM userShipment
    PROPERTIES (s) createPurchaseWriteOffUserShipment BACKGROUND backgroundWrittenShipment(s)
    PROPERTIES (s) BACKGROUND backgroundWrittenShipment(s) SHOWIF createPurchaseWriteOffUserShipment(s)
                   nameWriteOffOperationUserShipment, nameWriteOffCommitteeUserShipment, nameReasonUserShipment, writeOffSumUserShipmentDetailUserShipment
    PROPERTIES(d)  READONLY writtenOffShipmentDetail AFTER quantityUserShipmentDetail(d) SHOWIF showWriteOffShipment(s) BACKGROUND backgroundWrittenShipment(s)
    PROPERTIES (d) SHOWIF createPurchaseWriteOffUserShipment(s) BEFORE deletesd BACKGROUND backgroundWrittenShipment(s)
                   nameWriteOffRateUserShipmentDetail, percentWriteOffRateUserShipmentDetail, writeOffQuantityUserShipmentDetail,
                   writeOffPriceUserShipmentDetail,  writeOffSumUserShipmentDetail
;
DESIGN userShipment {
    headerCreateDocuments {
        NEW headerWriteOff {
            caption = 'Акт списания';
            type = CONTAINERH;
            MOVE PROPERTY(createPurchaseWriteOffUserShipment(s));
            MOVE PROPERTY(nameWriteOffOperationUserShipment(s));
            MOVE PROPERTY(nameWriteOffCommitteeUserShipment(s));
            MOVE PROPERTY(nameReasonUserShipment(s));
        }
    }
    PROPERTY(writeOffSumUserShipmentDetail(d)) { preferredCharWidth = 13;}
}
EXTEND FORM shipments
    PROPERTIES (s) READONLY writeOffSumShipmentDetailShipment BACKGROUND backgroundWrittenShipment(s) AFTER sumShipmentDetailShipment(s)
    PROPERTIES (d) READONLY SHOWIF createPurchaseWriteOffShipment(s) BACKGROUND backgroundWrittenShipment(s) writeOffQuantityShipmentDetail,
                   writeOffPriceShipmentDetail,  writeOffSumShipmentDetail
    PROPERTIES(d) READONLY writtenOffShipmentDetail AFTER quantityShipmentDetail(d) SHOWIF showWriteOffShipment(s) BACKGROUND backgroundWrittenShipment(s)

;


//costWriteOffDetailBatch (writeOffDetail, batch) = GROUP SUM costSkuLedgerBatch(writeOffDetail, batch) BY writeOffDetailWriteOffDetail(writeOffDetail), batch;
//countBatchWriteOffDetail 'Кол-во партий' (writeOffDetail) = GROUP SUM 1 IF costWriteOffDetailBatch(writeOffDetail, batch) BY writeOffDetail PERSISTENT;
//maxBatchWriteOffDetail (writeOffDetail) = GROUP MAX batch IF costWriteOffDetailBatch(writeOffDetail, batch) BY writeOffDetail;

calcWriteOffRateShipmentDetail  (detail) = writeOffRateCountrySku(countryCustomerStockShipmentDetail(detail), skuShipmentDetail(detail));
calcWriteOffQuantityShipmentDetail 'Кол-во (списания)' (detail) = round3(quantityShipmentDetail(detail)*percentWriteOffRate(calcWriteOffRateShipmentDetail(detail))/100);
calcWriteOffPriceShipmentDetail 'Цена (списания)' (detail) = priceShipmentDetail(detail) IF calcWriteOffQuantityShipmentDetail(detail);
calcWriteOffSumShipmentDetail 'Сумма (списания)' (detail) = roundPriceCurrency(calcWriteOffQuantityShipmentDetail(detail)*calcWriteOffPriceShipmentDetail(detail),currencyShipmentDetail(detail));

// Создание поставки на основе инвойса //

FORM writeOffShipments 'Поставки'
    OBJECTS st = Stock FIXED PANEL
    PROPERTIES (st) READONLY nameStock

    OBJECTS s = Shipment
    PROPERTIES (s) READONLY isPostedShipment, numberShipment, seriesShipment, dateShipment, timeShipment,
                            nameSupplierShipment, nameSupplierStockShipment, nameCustomerShipment, nameCustomerStockShipment,
                            nameCurrencyShipment, countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment,
                            noteShipment
    OBJECTS d = ShipmentDetail
    PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail,
                            quantityShipmentDetail, priceShipmentDetail, sumShipmentDetail,
                            nameCustomerStockShipmentDetail
    PROPERTIES (d) READONLY BACKGROUND backgroundWrittenShipment(s) calcWriteOffQuantityShipmentDetail, calcWriteOffPriceShipmentDetail,  calcWriteOffSumShipmentDetail

    FILTERS shipmentShipmentDetail(d) == s,
            customerStockShipment(s) == st
        FILTERGROUP writeOffDetail
            FILTER 'Поставки без списания' notWrittenOffShipment(s) 'F11' DEFAULT

    DIALOG Shipment OBJECT s
;

DESIGN writeOffShipments {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer BEFORE functions.box {

            type = CONTAINERV;

            NEW headerBox {
                type = CONTAINERH;
                MOVE st.box {caption = 'Склад';};
            }
            MOVE s.box;
            NEW documentDetail {
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
}

fillShipmentUserWriteOff 'Заполнить на основе поставки' =  ACTION (userWriteOff) {
    FORM writeOffShipments OBJECTS st = stockUserWriteOff(userWriteOff) MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL purchaseShipment = Shipment();
        ASSIGN purchaseShipment() <- chosenObject('s');

        FOR shipmentShipmentDetail(shipmentDetail) == purchaseShipment() AND
            customerStockShipmentDetail(shipmentDetail) == stockUserWriteOff(userWriteOff) AND
            calcWriteOffQuantityShipmentDetail(shipmentDetail) AND NOT writeOffQuantityShipmentDetail(shipmentDetail)
            ADDOBJ d = UserWriteOffDetail DO {
                ASSIGN userWriteOffUserWriteOffDetail(d) <- userWriteOff;
                ASSIGN shipmentDetailUserWriteOffDetail(d) <- shipmentDetail;
                ASSIGN batchUserWriteOffDetail(d) <- batchShipmentDetail(shipmentDetail);

                ASSIGN skuUserWriteOffDetail(d) <- skuShipmentDetail(shipmentDetail);
                ASSIGN quantityUserWriteOffDetail (d) <- calcWriteOffQuantityShipmentDetail(shipmentDetail);
                ASSIGN priceUserWriteOffDetail(d) <- calcWriteOffPriceShipmentDetail(shipmentDetail);
//                ASSIGN sumUserWriteOffDetail(d) <- calcSumWriteOffShipmentDetail(shipmentDetail);
        }
    }
} IN shipment;

EXTEND FORM userWriteOff
    PROPERTIES(w) fillShipmentUserWriteOff, shipmentsWriteOff READONLY
    PROPERTIES(d) READONLY descriptionIndexShipmentDetailUserWriteOffDetail BEFORE deletewd
;
DESIGN userWriteOff { headerCreateDetail{ MOVE w.shipment {type = CONTAINERH;}}}

EXTEND FORM writeOffs
    PROPERTIES(w) READONLY shipmentsWriteOff
    PROPERTIES(d) READONLY descriptionIndexShipmentDetailWriteOffDetail
;

//-- агр. объект

needToWrittenShipmentDetail (shipmentDetail) = writeOffQuantityShipmentDetail(shipmentDetail) AND createPurchaseWriteOffShipmentDetail(shipmentDetail) PERSISTENT;

needToWrittenShipment (shipment)= GROUP SUM 1 IF needToWrittenShipmentDetail(shipmentDetail)
    BY shipmentShipmentDetail(shipmentDetail) PERSISTENT;

CLASS ShipmentWriteOff 'Акт списания на основе поставки': WriteOff;
CLASS ShipmentWriteOffDetail 'Строка акта списания на основе поставки ': WriteOffDetail;

@defineDocumentTables(shipmentWriteOff);

@defineDocumentAggregation(shipment, shipmentWriteOff, needToWritten);
writeOffWriteOffDetail(detail) += shipmentWriteOffShipmentWriteOffDetail(detail);

//operationWriteOff(writeOff) += operationShipment(shipmentShipmentWriteOff(writeOff));

indexWriteOffDetail(detail) += indexShipmentWriteOffDetail(detail);

dateWriteOff(writeOff) += dateShipmentWriteOff(writeOff);
timeWriteOff(writeOff) += timeShipmentWriteOff(writeOff);

@defineDocumentAggregationStockPrefix(shipment, shipmentWriteOff, customer, 'Склад', , );
stockWriteOff(writeOff) += customerStockShipmentWriteOff(writeOff);
dataStockWriteOffDetail(writeOffDetail) += dataCustomerStockShipmentDetail(shipmentDetailShipmentWriteOffDetail(writeOffDetail));

@defineDocumentAggregationPosted(shipment, shipmentWriteOff);
isPostedWriteOff(writeOff) += isPostedShipmentWriteOff(writeOff);

@defineDocumentAggregationClosed(shipment, shipmentWriteOff);
isClosedWriteOff(writeOff) += isClosedShipmentWriteOff(writeOff);

numberShipmentWriteOff 'Номер документа' (shipmentWriteOff) = numberShipment(shipmentShipmentWriteOff(shipmentWriteOff));
numberWriteOff(writeOff) += numberShipmentWriteOff(writeOff);

seriesShipmentWriteOff 'Серия документа' (shipmentWriteOff) = seriesShipment(shipmentShipmentWriteOff(shipmentWriteOff));
seriesWriteOff(writeOff) += seriesShipmentWriteOff(writeOff);

seriesNumberShipmentWriteOff 'Серия/номер документа' (shipmentWriteOff) = seriesNumberShipment(shipmentShipmentWriteOff(shipmentWriteOff));

noteShipmentShipmentWriteOff 'Примечание' (shipmentWriteOff) = noteShipment(shipmentShipmentWriteOff(shipmentWriteOff));
noteWriteOff(writeOff) += noteShipmentShipmentWriteOff(writeOff);

currencyShipmentWriteOff  (shipmentWriteOff) = currencyShipment(shipmentShipmentWriteOff(shipmentWriteOff));
currencyWriteOff (writeOff) += currencyShipmentWriteOff(writeOff);

@defineDocumentDescription(shipmentWriteOff, ShipmentWriteOffDetail, 'Акт списания на основе поставки');
descriptionWriteOff (writeOff) += descriptionShipmentWriteOff(writeOff);

reasonWriteOff(writeOff) += reasonShipment(shipmentShipmentWriteOff(writeOff));
writeOffCommitteeWriteOff(writeOff) += writeOffCommitteeShipment(shipmentShipmentWriteOff(writeOff));
operationWriteOff(writeOff) += writeOffOperationShipment(shipmentShipmentWriteOff(writeOff));

@defineDocumentAggregationDetailSku(shipment, shipmentWriteOff, sku);
skuWriteOffDetail(writeOffDetail) +=  skuShipmentWriteOffDetail(writeOffDetail);

quantityWriteOffDetail(writeOffDetail) += writeOffQuantityShipmentDetail(shipmentDetailShipmentWriteOffDetail(writeOffDetail));
batchWriteOffDetail(writeOffDetail) += ledgerBatchShipmentDetail(shipmentDetailShipmentWriteOffDetail(writeOffDetail));

writeOffPriceShipmentWriteOffDetail(shipmentWriteOffDetail) = writeOffPriceShipmentDetail(shipmentDetailShipmentWriteOffDetail(shipmentWriteOffDetail));
priceWriteOffDetail(writeOffDetail) += writeOffPriceShipmentWriteOffDetail(writeOffDetail);

sumWriteOffShipmentWriteOffDetail(shipmentWriteOffDetail) = writeOffSumShipmentDetail(shipmentDetailShipmentWriteOffDetail(shipmentWriteOffDetail));
sumWriteOffDetail(writeOffDetail) += sumWriteOffShipmentWriteOffDetail(writeOffDetail);

priceShipmentWriteOffDetail 'Цена поставщика' (shipmentWriteOffDetail)= priceInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetailShipmentWriteOffDetail(shipmentWriteOffDetail)));

sumVATShipmentWriteOffDetail(shipmentWriteOffDetail) = sumWriteOffShipmentWriteOffDetail(shipmentWriteOffDetail) * valueVATInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetailShipmentWriteOffDetail(shipmentWriteOffDetail))) 
    / (100 + valueVATInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetailShipmentWriteOffDetail(shipmentWriteOffDetail))));

shipmentDetailWriteOffDetail(writeOffDetail) += shipmentDetailShipmentWriteOffDetail(writeOffDetail);

editWriteOffDetail(d) += ACTION editShipmentDetail(shipmentDetailShipmentWriteOffDetail(d));

editWriteOff(w) += ACTION editShipment(shipmentShipmentWriteOff(w));
closeWriteOff(w) += ACTION closeShipment(shipmentShipmentWriteOff(w));

moveUserWriteOffShipment 'Списание' =  ACTION (shipment) NEWSESSION{

    FOR ADDOBJ w = UserWriteOff DO {

        ASSIGN stockUserWriteOff(w) <- customerStockShipment(shipment);

        ASSIGN currencyUserWriteOff(w) <- currencyShipment(shipment);
        ASSIGN numberUserWriteOff(w) <- numberShipment(shipment);
        ASSIGN seriesUserWriteOff(w) <- seriesShipment(shipment);
        ASSIGN noteUserWriteOff(w) <- noteShipment(shipment);

        FOR shipmentShipmentDetail(detail) == shipment AND calcWriteOffQuantityShipmentDetail(detail) AND NOT writeOffQuantityShipmentDetail(detail) ADDOBJ d = UserWriteOffDetail DO {
            ASSIGN userWriteOffUserWriteOffDetail(d) <- w;
            ASSIGN shipmentDetailUserWriteOffDetail(d) <- detail;
            ASSIGN batchUserWriteOffDetail(d) <- batchShipmentDetail(detail);

            ASSIGN skuUserWriteOffDetail(d) <- skuShipmentDetail(detail);
            ASSIGN quantityUserWriteOffDetail (d) <- calcWriteOffQuantityShipmentDetail(detail);
            ASSIGN priceUserWriteOffDetail(d) <- calcWriteOffPriceShipmentDetail(detail);
        }

        FORM userWriteOff OBJECTS w = w MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM shipments
    PROPERTIES(s) moveUserWriteOffShipment
;
DESIGN shipments {
    createdContainer{
        MOVE PROPERTY(moveUserWriteOffShipment(s));
    }
}


NAVIGATOR {
    writeOffNavigator  {
        ADD writeOffRateDialog;
    }
}

// ------------------------------------------------ Стандартные значения --------------------------------------- //

loadDefaultWriteOffRate 'Добавить нормы отходов' = ACTION (idCountry, string, numeric)  {
    FOR ADDOBJ g = WriteOffRate DO {
        ASSIGN nameWriteOffRate(g) <- string;
        ASSIGN percentWriteOffRate(g) <-  numeric;
        ASSIGN countryWriteOffRate(g) <- countrySID(idCountry);
    }
};

loadDefaultWriteOffRates 'Загрузить стандартные нормы отходов' = ABSTRACT ACTION LIST () IN loadDefault;

@implementLoadDefaultData(loadDefaultWriteOffRates);
