MODULE WriteOffReturn;

REQUIRE WriteOff;

NAMESPACE WriteOffReturn; 

CLASS WriteOff 'Списание-возврат' : Document;
CLASS WriteOffDetail 'Строка списания-возврат' : DocumentDetail;

CLASS UserWriteOff 'Списание-возврат (польз.)' : WriteOff;
CLASS UserWriteOffDetail 'Строка списания-возврат (польз.)' : WriteOffDetail;

@defineDocumentInterface(writeOff);
@deriveDocumentHeaderTimePrefix(UserWriteOff, );
                
@defineDocumentInterfaceDataStock(writeOff, stock, 'Склад');
@defineDocumentDialogStocks(userWriteOff, stock, company, , );

CONSTRAINT stockUserWriteOff(w) AND NOT  isCompanyStock(stockUserWriteOff(w))
    CHECKED BY stockUserWriteOff
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfaceNumber(writeOff);
@defineNumeratedDefault(UserWriteOff, 'Списания', 'СП');


@defineDocumentInterfacePosted(writeOff);
@defineDocumentInterfaceClosed(writeOff);
@defineDocumentInterfaceDescription (writeOff, 'Списание товара');

@defineDocumentInterfaceCurrency(writeOff);
@deriveDocumentCurrency(userWriteOff, stock);

addressLegalEntityWriteOff 'Адрес' (writeOff) = addressLegalEntityDate(legalEntityStockWriteOff(writeOff), dateWriteOff(writeOff));
addressLegalEntityUserWriteOff 'Адрес' (userWriteOff) = addressLegalEntityDate(legalEntityStockUserWriteOff(userWriteOff), dateUserWriteOff(userWriteOff));

@defineDocumentInterfaceDetailSku(writeOff, sku);

// Для инвентаризации по партиям
@defineDocumentInterfaceDetailBatch(writeOff, batch);
changeBatchUserWriteOffDetail = ACTION (userWriteOffDetail) {
    FORM dialogBatchStock OBJECTS st = stockUserWriteOffDetail(userWriteOffDetail),
                             t = dateTimeUserWriteOffDetail(userWriteOffDetail),
                             sk = skuUserWriteOffDetail(userWriteOffDetail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        batchUserWriteOffDetail(userWriteOffDetail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batchUserWriteOffDetail(userWriteOffDetail) <- NULL;
    }
}
@defineDocumentInterfaceDetailQuantity(writeOff);
@defineDocumentInterfaceDetailPrice(writeOff);
@defineDocumentInterfaceDetailDataSum(writeOff);
@deriveDocumentDetailSum(userWriteOff, quantity);

priceUserWriteOffDetail (detail)  <- IF batchUserWriteOffDetail(detail)
                THEN priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batchUserWriteOffDetail(detail), stockUserWriteOffDetail(detail), dateTimeUserWriteOffDetail(detail))
                ELSE priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, skuUserWriteOffDetail(detail), stockUserWriteOffDetail(detail), dateTimeUserWriteOffDetail(detail))
                WHEN CHANGED(skuUserWriteOffDetail(detail)) OR CHANGED(batchUserWriteOffDetail(detail)) OR CHANGED(stockUserWriteOffDetail(detail)) OR CHANGED (dateTimeUserWriteOffDetail(detail));


@defineDocumentInterfaceHeaderQuantity(writeOff);
@defineDocumentHeaderSkuQuantity(writeOff, sku);
@defineDocumentHeaderSkuQuantity(userWriteOff, sku);

@defineDocumentInterfaceHeaderSum(writeOff);

@defineDocumentInterfaceHeaderItemSum(writeOff, , );

@defineAddDetailDialogSkuStock(userWriteOff, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userWriteOff, sku);

@defineDocumentInterfaceHeaderWriteOffCommittee(writeOff, stock);

reasonWriteOff 'Причина списания (ИД)' = ABSTRACT Reason (WriteOff);
reasonUserWriteOff 'Причина списания (ИД)' = DATA Reason (UserWriteOff);
reasonWriteOff(writeOff) += reasonUserWriteOff(writeOff);
nameReasonWriteOff 'Причина списания' (writeOff) = nameReason(reasonWriteOff (writeOff)) IN documentPrm;
nameReasonUserWriteOff 'Причина списания' (userWriteOff) = nameReason(reasonUserWriteOff (userWriteOff)) IN documentPrm;


@defineDocumentInterfaceLegalEntity (writeOff, contact, 'Контрагент');

// --------------------- Добрасываем в подбор документа --------------------- //
@implementDocument(writeOff);
@implementDocumentBatch(writeOff);

supplierStockDocument(writeOff) += stockWriteOff(writeOff);

isStockSkuWriteOffDetail (writeOffDetail) = isStockSku(skuWriteOffDetail(writeOffDetail));
isStockSkuUserWriteOffDetail (userWriteOffDetail) = isStockSku(skuUserWriteOffDetail(userWriteOffDetail));

// --------------------------- Формы списания ---------------------------------
editWriteOff 'Редактировать' = ABSTRACT ACTION LIST (WriteOff) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM userWriteOff 'Списание-возврат'
    OBJECTS w=UserWriteOff FIXED PANEL
    PROPERTIES (w) isPostedUserWriteOff, nameNumeratorUserWriteOff, numberUserWriteOff, seriesUserWriteOff, dateUserWriteOff, timeUserWriteOff,
                   nameStockUserWriteOff ON CHANGE changeStockCompanyUserWriteOff(w), nameCurrencyUserWriteOff, noteUserWriteOff,
                   countUserWriteOffDetailUserWriteOff, quantityUserWriteOffDetailUserWriteOff,
                   sumUserWriteOffDetailUserWriteOff, nameReasonUserWriteOff, nameWriteOffCommitteeUserWriteOff, nameContactUserWriteOff

    OBJECTS d=UserWriteOffDetail
    PROPERTIES (d) indexUserWriteOffDetail, idBarcodeSkuUserWriteOffDetail, nameSkuUserWriteOffDetail, shortNameUOMSkuUserWriteOffDetail,
                   nameBatchUserWriteOffDetail ON CHANGE changeBatchUserWriteOffDetail(d), quantityUserWriteOffDetail,
                   priceUserWriteOffDetail, sumUserWriteOffDetail, nameStockUserWriteOffDetail, ADDOBJ, deletewd=DELETESESSION

    PROPERTIES(w) TODRAW d fillDocumentWriteOff, addDetailDialogSkuStockUserWriteOffDetailUserWriteOff,
                           addDetailInputBarcodeUserWriteOffDetailUserWriteOff, deleteUserWriteOffDetailUserWriteOff
    FILTERS userWriteOffUserWriteOffDetail(d)==w

    EVENTS
        ON OK prePostUserWriteOff(w)

    EDIT UserWriteOff OBJECT w
;

DESIGN userWriteOff {

    main {
        preferredSize = (1024, 768);

        NEW header {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;

                MOVE w.documentHeader {
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPostedUserWriteOff(w));
                        MOVE PROPERTY(nameStockUserWriteOff(w));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameNumeratorUserWriteOff(w));
                        MOVE PROPERTY(numberUserWriteOff(w));
                        MOVE PROPERTY(seriesUserWriteOff(w));
                        MOVE PROPERTY(dateUserWriteOff(w));
                        MOVE PROPERTY(timeUserWriteOff(w));
                    }    
                }

                NEW headerTabbedPane {
                    alignment = STRETCH;
                    type = TABBED;
                    NEW headerMainParams {
                        caption = 'Основные параметры';
                        MOVE w.documentPrm {
                            columns = 2;
                        }
                    }
                    NEW headerExtraParams {
                        caption = 'Дополнительные параметры';
                    }
                    NEW headerCreateDetail {
                        caption = 'Основание';
                    }
                    NEW headerCreateDocuments {
                        caption = 'Производные документы';
                    }
                }
            }

            MOVE w.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            type = TABBED;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }
        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

WHEN SESSION FORMS userWriteOff CHANGED(batchUserWriteOffDetail(detail)) DO {
    skuUserWriteOffDetail (detail)  <- skuBatch(batchUserWriteOffDetail(detail)) IF batchUserWriteOffDetail(detail);
}
//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userWriteOff, accountPriceListType, );
@extendFormDocumentSkuStock(userWriteOff, userWriteOff, w, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userWriteOff, accountPriceListType, );
@extendFormDocumentBatchStock(userWriteOff, userWriteOff, w, legalEntityStock, );

@defineMovementSku(writeOffDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userWriteOffDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(writeOffDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши остатки товара

// История по правой кнопке
@defineBalancesBatch(writeOffDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userWriteOffDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(writeOffDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userWriteOffDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

addUserWriteOff 'Добавить' = ACTION ADDFORM UserWriteOff;
editUserWriteOff 'Редактировать'  = ACTION EDITFORM UserWriteOff;

editWriteOff(w) += ACTION editUserWriteOff(w);
isUserOpenedWriteOff(w)=  isOpenedWriteOff(w) AND isUserWriteOff(w);

FORM writeOffs 'Списания-возврат'
    OBJECTS w=WriteOff
    PROPERTIES (w) READONLYIF isReadonly() isClosedWriteOff, isPostedWriteOff, numberWriteOff, seriesWriteOff, 
                   dateWriteOff, timeWriteOff, nameStockWriteOff
    PROPERTIES (w) READONLY nameReasonWriteOff, quantityWriteOffDetailWriteOff, countWriteOffDetailWriteOff,
                            sumWriteOffDetailWriteOff
    PROPERTIES (w) READONLYIF isReadonly() noteWriteOff

    PROPERTIES (w) READONLY FORCE PANEL createdTimeUserWriteOff, createdNameUserUserWriteOff, createdHostnameComputerUserWriteOff, 
                   postedNameUserUserWriteOff, postedTimeUserWriteOff, postedHostnameComputerUserWriteOff
    PROPERTIES ()  addUserWriteOff TODRAW w
    PROPERTIES (w) editWriteOff SHOWIF isOpenedWriteOff(w)
    PROPERTIES (w) closeUserWriteOff SHOWIF isOpenedUserWriteOff(w), openUserWriteOff SHOWIF isClosedUserWriteOff(w)
    
    PROPERTIES (w) deletew=DELETE FORCE PANEL TOOLBAR  SHOWIF isUserOpenedWriteOff(w)

    OBJECTS d=WriteOffDetail
    PROPERTIES (d) READONLY indexWriteOffDetail, idBarcodeSkuWriteOffDetail, nameSkuWriteOffDetail, shortNameUOMSkuWriteOffDetail, 
                   nameBatchWriteOffDetail, quantityWriteOffDetail, priceWriteOffDetail,
                   sumWriteOffDetail, nameStockWriteOffDetail

    FILTERS writeOffWriteOffDetail(d) == w
;
@extendFormFilterAccessStock(WriteOff, w, writeOffs, stock, company);

DESIGN writeOffs {
    NEW pane {
        fill = 1;
        type = SPLITV;

        MOVE w.box {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE w.created;
                MOVE w.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERH;
                }
            }
        }
    }

    MOVE functions.box;
}
@extendFormEditable(writeOffs);
@defineFilterIsOpened (writeOff, writeOffs, w);
@defineDocumentLogForm(writeOffs, w);
//----------------------------------------------- Операции -----------------------------------------------------//
@defineDocumentInterfaceOperation (writeOff, WriteOff, );
@extendFormFilterRoleAccessNS(writeOff, w, writeOffs,Operation);

@defineDocumentOperationRolePrefix(userWriteOff, );

EXTEND FORM userWriteOff
    PROPERTIES(w) nameOperationUserWriteOff
;
DESIGN userWriteOff{
    first{
        MOVE PROPERTY (nameOperationUserWriteOff(w)) BEFORE PROPERTY(nameStockUserWriteOff(w));
    }
}
EXTEND FORM writeOffs
    PROPERTIES(w) READONLY nameOperationWriteOff BEFORE nameReasonWriteOff(w)
;

    
// Основание    
    
writeOffDetailWriteOffDetail (writeOffDetail) = ABSTRACT WriteOff.WriteOffDetail (WriteOffDetail) PERSISTENT;
writeOffDetailUserWriteOffDetail (userWriteOffDetail) = DATA WriteOff.WriteOffDetail (UserWriteOffDetail);
writeOffDetailWriteOffDetail(detail) += writeOffDetailUserWriteOffDetail(detail);

returnQuantityWriteOffDetail 'Кол-во (возвращено)' (writeOffDetail)= GROUP SUM quantityWriteOffDetail(writeOffDetail) BY writeOffDetailWriteOffDetail(writeOffDetail) PERSISTENT;
returnQuantityWriteOffDetailWriteOff 'Кол-во (возвращено)' (writeOff) =  GROUP SUM returnQuantityWriteOffDetail(writeOffDetail) BY WriteOff.writeOffWriteOffDetail(writeOffDetail) PERSISTENT;

CONSTRAINT WriteOffReturn.returnQuantityWriteOffDetail(detail) > WriteOff.quantityWriteOffDetail(detail)
    MESSAGE 'Количество строки возврата больше чем количество строки основания';

CONSTRAINT WriteOff.skuWriteOffDetail(writeOffDetailUserWriteOffDetail(detail)) !=  WriteOffReturn.skuUserWriteOffDetail(detail) CHECKED BY writeOffDetailUserWriteOffDetail
    MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

CONSTRAINT WriteOff.contactWriteOffDetail(writeOffDetailUserWriteOffDetail(detail)) !=  WriteOffReturn.contactUserWriteOffDetail(detail) CHECKED BY writeOffDetailUserWriteOffDetail
    MESSAGE 'Контрагент строки основания должен соответствовать Контрагент строки возврата';

CONSTRAINT WriteOff.stockWriteOffDetail(writeOffDetailUserWriteOffDetail(detail)) != WriteOffReturn.stockUserWriteOffDetail(detail) CHECKED BY writeOffDetailUserWriteOffDetail
    MESSAGE 'Склад строки основания должен соответствовать Склад строки возврата';

descriptionWriteOffDetailWriteOffDetail 'Основание' (writeOffDetail) = WriteOff.descriptionWriteOffDetail(writeOffDetailWriteOffDetail(writeOffDetail));
descriptionWriteOffDetailUserWriteOffDetail 'Основание' (userWriteOffDetail) = WriteOff.descriptionWriteOffDetail(writeOffDetailUserWriteOffDetail(userWriteOffDetail));

recalculatedPriceUserWriteOffDetail(detail) = ACTION (detail) {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
    IF writeOffDetailUserWriteOffDetail(detail) THEN {
        ASSIGN priceUserWriteOffDetail(detail) <-  WriteOff.priceWriteOffDetail(writeOffDetailUserWriteOffDetail(detail));
    }
}
    WHEN SESSION FORMS userWriteOff
        CHANGED(writeOffDetailUserWriteOffDetail(detail)) OR
        CHANGED(batchWriteOffDetail(detail)) OR
        CHANGED(skuWriteOffDetail(detail)) OR
        CHANGED(stockWriteOffDetail(detail)) OR
        CHANGED(dateTimeWriteOffDetail(detail))
            DO EXEC recalculatedPriceUserWriteOffDetail(detail);


EXTEND FORM userWriteOff PROPERTIES (d) descriptionWriteOffDetailUserWriteOffDetail AFTER shortNameUOMSkuUserWriteOffDetail(d);
EXTEND FORM WriteOff.userWriteOff PROPERTIES (d) READONLY returnQuantityWriteOffDetail BEFORE priceUserWriteOffDetail(d);

EXTEND FORM writeOffs PROPERTIES (d) READONLY descriptionWriteOffDetailWriteOffDetail AFTER shortNameUOMSkuWriteOffDetail(d);
EXTEND FORM WriteOff.writeOffs PROPERTIES (d) READONLY returnQuantityWriteOffDetail BEFORE priceWriteOffDetail(d);

WHEN SESSION FORMS userWriteOff  CHANGED(writeOffDetailUserWriteOffDetail(detail)) AND countBatchCostSkuLedger(writeOffDetailUserWriteOffDetail(detail)) == 1 DO {
    batchUserWriteOffDetail(detail) <- maxBatchCostSkuLedger(writeOffDetailUserWriteOffDetail(detail));
}

   
CONSTRAINT batchUserWriteOffDetail(detail) AND writeOffDetailUserWriteOffDetail(detail) AND
           NOT costSkuLedgerBatch(writeOffDetailUserWriteOffDetail(detail), batchUserWriteOffDetail(detail))
           CHECKED BY batchUserWriteOffDetail, writeOffDetailUserWriteOffDetail
           MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке списания';    
 
CONSTRAINT operationUserWriteOff(writeOff) AND contactUserWriteOff(writeOff)
           AND NOT inContactOperation(contactUserWriteOff(writeOff), operationUserWriteOff(writeOff))
    CHECKED BY contactUserWriteOff
    MESSAGE 'Контрагент должен совпадать с отмеченными в операции';

@deriveDocumentOperationLegalEntity(userWriteOff, contact, userWriteOff);
  
NAVIGATOR {
    stockNavigator {
        writeOffNavigator {
            ADD writeOffs;
        }
    }
}

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(WriteOff, stock);
typeStockDocumentLedger(l) += 'Списание-возврат' IF l IS WriteOff;
sumItemIncStockDocumentLedger (ledger) += sumItemWriteOffDetailWriteOff(ledger);
sumContainerIncStockDocumentLedger (ledger) += sumContainerWriteOffDetailWriteOff(ledger);

legalEntityStockDocumentLedger(ledger) += contactWriteOff(ledger);  
operationStockDocumentLedger(ledger) += operationWriteOff(ledger);
editStockDocumentLedger(l) += ACTION editWriteOff(l);
closeStockDocumentLedger(l) += ACTION closeWriteOff(l);

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerInLIFO(WriteOffDetail, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityWriteOffDetail(ledger);
batchSkuLedger(ledger) += batchWriteOffDetail(ledger);
@implementSkuLedgerInLIFOBatchBalance(writeOffDetail, stock);
sumInSkuLedger(ledger) += sumWriteOffDetail(ledger);

stockDocumentLedgerSkuLedger(ledger) += writeOffWriteOffDetail(ledger); 

editWriteOffDetail 'Редактировать' = ABSTRACT ACTION LIST (WriteOffDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserWriteOffDetail(d) = ACTION (d) NEWSESSION {
    FORM userWriteOff OBJECTS w = userWriteOffUserWriteOffDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}
editWriteOffDetail(d) += ACTION editUserWriteOffDetail(d);
editSkuLedger(d) += ACTION editWriteOffDetail(d);

