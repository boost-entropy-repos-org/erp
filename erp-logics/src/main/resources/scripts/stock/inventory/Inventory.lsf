MODULE Inventory;

REQUIRE System,
        Stock,
        Sku,
        InventoryOperation,
        PriceList,
        Numerator,
        Barcode,
        Document,
        EmployeeStock,        
        StockDocumentSkuLedger,
        Utils;

// -------------------------------- Комиссия для инвентаризации ----------------------------------//
CLASS InventoryCommittee 'Комиссия для инвентаризации' : Committee;

name 'Наименование' = DATA VARISTRING[150](InventoryCommittee);

name(InventoryCommittee committee) += name(committee) IF committee IS InventoryCommittee;

committee(inventory) = DATA InventoryCommittee (Inventory);
nameCommittee 'Название комиссии' (Inventory inventory) = name(committee(inventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameChairmanCommittee 'Председатель комиссии' (Inventory inventory) = nameChairman(committee(inventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
namePositionChairman 'Должность председателя' (Inventory inventory)  = namePositionChairman(committee(inventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameEmployee 'Члены комиссии' (Inventory inventory) = nameEmployee(committee(inventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
in 'Является членом комиссии' (Inventory inventory, Employee employee) = in(committee(inventory), employee);

FORM inventoryCommittee 'Комиссия для инвентаризации'
    OBJECTS c=InventoryCommittee FIXED PANEL
    PROPERTIES(c)      name, nameChairman

    TREE stockTree sg = StockGroup PARENT parent
    PROPERTIES READONLY sgTreeName = name(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = name(ts)
    PROPERTIES(c, ts) in FORCE GRID
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    FILTERS isParent(sg, ts)
    ORDER BY tsTreeName


    OBJECTS e=Employee
    PROPERTIES(e)      READONLY name[Contact], firstName, lastName, namePosition
    PROPERTIES(e)      ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    PROPERTIES(c, e)   in
    FILTERS            (countStock (e, c) AND NOT allowStockEmployee()) OR (e IS Employee AND allowStockEmployee())
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' in(c, e) 'F10'

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' in(c, ts) 'F9'

    EDIT InventoryCommittee OBJECT c
;
@extendFormFilterStockAccess(ts, inventoryCommittee);
@extendFormFilterStockGroupAccess(sg, inventoryCommittee);

DESIGN inventoryCommittee {
    main {
        preferredSize = (1024, 768);

        NEW caseOne BEFORE e.box {
            fill = 1;
            type = SPLITH;

            MOVE stockTree.tree.box {
                caption = 'Группы складов';
            }
            MOVE ts.box {
                fill = 1;
            }
        }
    }
}

FORM inventoryCommittees 'Комиссии для инвентаризации'
    OBJECTS w=InventoryCommittee
    PROPERTIES(w)      READONLY name, nameStocks, nameEmployee, nameChairman
    PROPERTIES(w)      ADDFORM, EDITFORM

    DIALOG InventoryCommittee OBJECT w
;

// ------------------------------- Инвентаризация --------------------------------------------- //

CLASS TypeOfAddition 'Тип инвентаризации' {
    register 'Товары из описей',
    remains 'Товары по остаткам',
    many    'Множество товаров'
}
FORM typeOfAdditions 'Типы инвентаризаций'
    OBJECTS t = TypeOfAddition
    PROPERTIES(t) READONLY staticCaption
    DIALOG TypeOfAddition OBJECT t
;

CLASS Inventory 'Инвентаризация';
TABLE inventory (Inventory);

@defineDocumentHeaderCreated(Inventory);
@defineDocumentHeaderPosted(Inventory) ;

@defineDocumentHeaderTime(Inventory);

@defineDocumentHeaderClosed(Inventory);

@deriveDocumentHeaderTimePrefix(Inventory, );

@defineDocumentHeaderNumber(Inventory);
@defineNumeratedDefault(Inventory, 'Инвентаризации', 'ИН');

@defineDocumentHeaderNote(Inventory);

isBatch 'По партиям' (inventory) = DATA BOOLEAN (Inventory);
isSku (Inventory inventory) = inventory IS Inventory AND NOT isBatch(inventory);

name 'Название инвентаризации' = DATA VARSTRING[100] (Inventory) IN documentPrm MINCHARWIDTH 50 PREFCHARWIDTH 50;

timeFrom 'Начато' (inventory) = DATA DATETIME (Inventory) IN documentPrm;
timeTo 'Закончено' (inventory) = DATA DATETIME (Inventory) IN documentPrm;

headMan (inventory) = DATA Employee (Inventory);
nameHeadMan  'Зав. складом' (Inventory inventory) = name[Contact](headMan(inventory)) IN documentPrm;

TABLE stockInventory (Stock, Inventory);
include 'Вкл' = DATA BOOLEAN (Stock, Inventory);
countStocks 'Кол-во складов' = GROUP SUM 1 IF include(Stock st, Inventory in) BY in;
nameStock 'Склады' (inventory) =
    GROUP CONCAT name(Stock stock) IF include(stock, Inventory inventory), ', '
          BY inventory
          ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 40;

// Тип инвентаризации
typeOfAddition(inventory) = DATA TypeOfAddition (Inventory);
nameTypeOfAddition 'Тип инвентаризации' (Inventory inventory) = staticCaption(typeOfAddition(inventory)) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 20;
isPartly 'Частичная' = DATA BOOLEAN (Inventory);


//-- Выбор групп товара  
TABLE inventorySkuGroup (Inventory, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (Inventory, SkuGroup);

levelParentInclude (inventory, skuGroup) = GROUP MIN level(SkuGroup skuGroup, SkuGroup parent) IF dataInclude(Inventory inventory, parent)
                                                              BY inventory, skuGroup PERSISTENT;    
nearestParentInclude (Inventory inventory, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(inventory, skuGroup));
nearestInclude (Inventory inventory, SkuGroup skuGroup) = dataInclude(inventory, nearestParentInclude (inventory, skuGroup));

include 'Вкл' (Inventory inventory, SkuGroup skuGroup) =
    OVERRIDE nearestInclude (inventory, skuGroup), 
             dataInclude(inventory, skuGroup) PERSISTENT;    
                      
include 'Вкл' (Inventory inventory, Sku sku) = include(inventory, skuGroup(sku));  
countIncludeSkuGroup 'Вкл' (inventory) = GROUP SUM 1 IF include(Inventory inventory, SkuGroup sku) BY inventory;     
                    
countIncludeSku 'Вкл' (inventory) = GROUP SUM 1 IF include(Inventory inventory, Sku sku) BY inventory;                    

nameIncludeSkuGroups 'Группы товаров' (document)= 
    GROUP CONCAT name(SkuGroup skuGroup) IF dataInclude(Inventory document, skuGroup), ', ' 
    BY document 
    ORDER skuGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

resetIncludeSkuGroups  'Сбросить отмеченные'(Inventory in) = ACTION {
    dataInclude(in, SkuGroup g) <- NULL WHERE g IS SkuGroup ;    
}  

FORM selectSkuGroups 'Выбор групп'

    OBJECTS in = Inventory FIXED PANEL 

    TREE skuTree2 sk2 = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(in,sk2)
    ORDER BY order(sk2), name(sk2)
    PROPERTIES (in) resetIncludeSkuGroups FORCE PANEL TOOLBAR TODRAW sk2 SHOWIF countIncludeSku(in)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F5' DEFAULT       
;
DESIGN selectSkuGroups {
    main {
        preferredSize = (1024, 768);
    }
}

changeSkuGroups (Inventory in) = ACTION {
    IF typeOfAddition(in) == TypeOfAddition.remains THEN {
        FORM selectSkuGroups OBJECTS in = in MODAL; 
    }
}
isRemains(Inventory in) = typeOfAddition(in) == TypeOfAddition.remains;

CONSTRAINT isPartly(Inventory in) AND NOT isRemains(in)
    MESSAGE 'Признак "Частичная" доступен только для типа инвентаризации "Товары по остаткам".';

userTypeOfAddition(stock, inventory) = DATA TypeOfAddition (Stock, Inventory);
nameUserTypeOfAddition 'Тип инвентаризации' (Stock stock, Inventory inventory) = staticCaption(userTypeOfAddition(stock, inventory));

typeOfAddition(Stock stock, Inventory inventory) = OVERRIDE typeOfAddition(inventory) IF stock IS Stock,
                                                          userTypeOfAddition(stock, inventory);

CONSTRAINT include(Stock stock, Inventory inventory) AND NOT typeOfAddition(stock, inventory) MESSAGE 'Ошибка: Не задан тип сличительной ведомости для выбранного отдела';
userTypeOfAddition(Stock stock, Inventory inventory) => include(stock, inventory) RESOLVE RIGHT;

// ---------------------------------------------- Описи -------------------------------------- //

CLASS ListInventory 'Опись (открытая)';
TABLE listInventory (ListInventory);

@defineDocumentHeaderPosted(ListInventory);
@defineDocumentHeaderStock(listInventory, stock, 'Склад');
@defineDocumentHeaderNote(ListInventory);

@defineDocumentHeaderCurrency(listInventory);
@deriveDocumentCurrency(listInventory, stock);

inventory = DATA Inventory (ListInventory) NOT NULL DELETE;
nameInventory 'Название инвентаризации' (ListInventory listInventory) = name(inventory(listInventory));

@defineDocumentDetailTime(inventory, ListInventory);

@defineDocumentDetailIndex(inventory, ListInventory);
name 'Номер описи' (ListInventory listInventory) = 'Опись ' + index(listInventory);

isBatch (ListInventory listInventory) = isBatch(inventory(listInventory));
isSku (ListInventory listInventory) = isSku(inventory(listInventory));

// Комиссия инвентаризации
GROUP inventoryCommittee 'Комиссия' : public;

userCommittee(listInventory) = DATA InventoryCommittee (ListInventory);
committee(ListInventory listInventory) = OVERRIDE committee(inventory(listInventory)), userCommittee(listInventory);
nameCommittee 'Название комиссии' (ListInventory listInventory) = name(committee(listInventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameChairmanCommittee 'Председатель комиссии' (ListInventory listInventory) = nameChairman(committee(listInventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
namePositionChairman 'Должность председателя' (ListInventory listInventory)  = namePositionChairman(committee(listInventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameEmployee 'Члены комиссии' (ListInventory listInventory) = nameEmployee(committee(listInventory)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
in 'Является членом комиссии' (ListInventory listInventory, Employee employee) = in(committee(listInventory), employee);

// --------------------------------------------- Страницы описи ------------------------------------------ //

CLASS PageInventory 'Страница описи';
TABLE pageInventory (PageInventory);

@defineDocumentHeaderNote(PageInventory);

@defineDocumentRelation(listInventory, PageInventory);
@defineDocumentDetailIndex(listInventory, PageInventory);

name 'Номер страницы' (PageInventory pageInventory) = 'Страница ' + index(pageInventory) IN base;
pageInventoryIndex = GROUP MAX PageInventory pi BY listInventory(pi), index(pi);  

// --------------------------------------------- Строки описи -------------------------------------------- //

CLASS PageInventoryDetail 'Строка';
TABLE pageInventoryDetail (PageInventoryDetail);

@defineDocumentRelation(pageInventory);

listInventory(PageInventoryDetail pageInventoryDetail) = listInventory(pageInventory(pageInventoryDetail)) PERSISTENT INDEXED;
inventory(PageInventoryDetail pageInventoryDetail) = inventory(listInventory(pageInventoryDetail)) PERSISTENT;

@defineDocumentDetailStock(listInventory, pageInventoryDetail, stock, stock, 'Склад');
@defineDocumentDetailTime(inventory, PageInventoryDetail);

@defineDocumentDetailCurrency(listInventory, pageInventoryDetail);

@defineDocumentDetailIndex(pageInventory);
@defineDocumentDetailSku(pageInventory, sku);

nameSkuTypeSku 'Тип товара' (PageInventoryDetail d) = nameSkuType(sku(d));

// Для инвентаризации по партиям
@defineDocumentDetailBatchCustom(pageInventoryDetail, batch);

@defineDocumentDetailQuantity(pageInventory);
@defineDocumentDetailPrice(pageInventory);

@defineDocumentDetailDataSum(pageInventory);
@deriveDocumentDetailSum(pageInventory, quantity);
migratedPageInventorySum = DATA BOOLEAN();
onStarted() += ACTION {
    IF NOT migratedPageInventorySum() THEN {
        applyOnlyData();
        sum (PageInventoryDetail d) <- NUMERIC[16,2](round((quantity(d) * price(d)), currency(d)));
        migratedPageInventorySum() <- TRUE;
        apply();
        applyAll();
    }
}

@defineDocumentHeaderQuantity(pageInventory);
@defineDocumentHeaderSum(pageInventory);

WHEN SESSION CHANGED(sku(PageInventoryDetail detail)) OR CHANGED(batch(detail)) OR CHANGED (dateTime(detail)) DO {
    price (detail)  <- IF batch(detail)
                THEN prevPriceB(SystemLedgerPriceListType.accountPriceListType, batch(detail), stock(detail), dateTime(detail))
                ELSE prevPriceB(SystemLedgerPriceListType.accountPriceListType, sku(detail), stock(detail), dateTime(detail));
}

replace(Sku s, Batch b) += ACTION { sku(PageInventoryDetail detail) <- s WHERE batch(detail) == b;} 
// -------------------------------------------- Сличительная ведомость ----------------------------------------------- //

CLASS ABSTRACT CollationSheet 'Сличительная ведомость';

CLASS RegisterCollationSheet 'Сличительная ведомость по описи' : CollationSheet;
CLASS RemainsCollationSheet 'Сличительная ведомость по остаткам' : CollationSheet;
CLASS ManyCollationSheet 'Сличительная ведомость по множеству товаров' : CollationSheet;

TABLE collationSheet (CollationSheet);

@defineDocumentRelation(inventory, CollationSheet);

@defineDocumentHeaderStock(collationSheet, stock, 'Склад');
numberDisposal 'Основание для инвентаризации'  = DATA VARISTRING[100] (CollationSheet) IN documentPrm MINCHARWIDTH 20 PREFCHARWIDTH 30;

@defineDocumentDetailTime(inventory, CollationSheet);
@defineDocumentDetailPosted(inventory, CollationSheet);
isClosed 'Закрыт' (CollationSheet d) = isClosed(inventory(d)) PERSISTENT;

@defineDocumentDetailIndex(inventory, CollationSheet);

isBatch (CollationSheet collationSheet) = isBatch(inventory(collationSheet)) COMPLEX;
isSku (CollationSheet collationSheet) = isSku(inventory(collationSheet));

nameInventory 'Название инвентаризации' (CollationSheet collationSheet) = name(inventory(collationSheet));

timeFrom 'Снятие остатков начато' (CollationSheet collationSheet) = timeFrom(inventory(collationSheet));
timeTo 'Снятие остатков закончено' (CollationSheet collationSheet) = timeTo(inventory(collationSheet));
nameHeadMan  'Зав. складом' (CollationSheet collationSheet) = nameHeadMan(inventory(collationSheet));

name 'Внутренний номер' (CollationSheet collationSheet) = seriesNumber(inventory(collationSheet)) + '-' + index(collationSheet) IN recognize;
number 'Номер' (CollationSheet c) = number(inventory(c)); 
series 'Серия' (CollationSheet c) = series(inventory(c)); 

collationSheet 'Сличительная ведомость по складу и инвентаризации' (stock, inventory) =
    GROUP AGGR CollationSheet collationSheet BY stock(collationSheet), inventory(collationSheet);
collationSheet(ListInventory listInventory) = collationSheet(stock(listInventory), inventory(listInventory));
nameCollationSheet 'Название сл. ведомости' (ListInventory listInventory) = name(collationSheet(listInventory));

collationSheet (PageInventoryDetail pageInventoryDetail) = collationSheet(listInventory(pageInventoryDetail)) PERSISTENT INDEXED;

typeOfAddition(CollationSheet collationSheet)= typeOfAddition(stock(collationSheet), inventory(collationSheet));
nameTypeOfAddition 'Тип сличительной ведомости' (CollationSheet collationSheet) = staticCaption(typeOfAddition(collationSheet)) IN base MINCHARWIDTH 20 PREFCHARWIDTH 20;

in (Inventory inventory, Stock stock, ListInventory listInventory, PageInventory pageInventory, PageInventoryDetail pageInventoryDetail) = OVERRIDE
    pageInventory(pageInventoryDetail) == pageInventory AND listInventory IS ListInventory AND stock IS Stock AND inventory IS Inventory,
    listInventory(pageInventoryDetail) == listInventory AND stock IS Stock AND NOT pageInventory AND inventory IS Inventory,
    stock(pageInventoryDetail) == stock AND inventory == inventory(pageInventoryDetail) AND NOT pageInventory AND NOT listInventory;

description 'Название документа' (CollationSheet collationSheet) =
    'Сличительная ведомость ' + name(collationSheet) + ' от ' + date(collationSheet);

userPrevDate 'Дата предыдущей инвентаризации' (collationSheet) = DATA DATE (CollationSheet) IN base;

inventoryPrev (Stock stock, Inventory inventory) = PARTITION PREV inventory IF include(stock, inventory) AND isPosted(inventory)
    BY stock ORDER DESC date(inventory);

calcPrevDate 'Дата предыдущей инвентаризации' (CollationSheet collationSheet) = PARTITION PREV date(collationSheet) IF isPosted(collationSheet)
    BY stock(collationSheet) ORDER date(collationSheet), collationSheet;
    
//calcPrevCollationSheet = GROUP LAST CollationSheet cs
//                                                  BY stock(cs), DATE dateIn 
//                                                  ORDER date(cs), cs
//                                                  WHERE isPosted(cs) AND date(cs) < dateIn COMPLEX; // возможно следует учитывать операцию    

overPrevDate= ABSTRACT DATE (CollationSheet); // для даты полной инвентаризации
prevDate 'Дата предыдущей инвентаризации' (CollationSheet collationSheet) = OVERRIDE sum(calcPrevDate(collationSheet), 1), sum(overPrevDate(collationSheet), 1), userPrevDate(collationSheet);
//prevDate 'Дата предыдущей инвентаризации' (CollationSheet collationSheet) = OVERRIDE sum(date(calcPrevCollationSheet(stock(collationSheet), date(collationSheet))), 1), userPrevDate(collationSheet);

// Комиссии
committee = committee(inventory(CollationSheet collationSheet));
nameCommittee 'Название комиссии' (CollationSheet collationSheet) = name(committee(collationSheet)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameChairmanCommittee 'Председатель комиссии' (CollationSheet collationSheet) = nameChairman(committee(collationSheet)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
namePositionChairman 'Должность председателя' (CollationSheet collationSheet)  = namePositionChairman(committee(collationSheet)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
nameEmployee 'Члены комиссии' (CollationSheet collationSheet) = nameEmployee(committee(collationSheet)) IN inventoryCommittee MINCHARWIDTH 30 PREFCHARWIDTH 30;
in 'Является членом комиссии' (CollationSheet collationSheet, Employee employee) = in(committee(collationSheet), employee);

//---------------------------- Состав сличительной ведомости (Sku) ----------------------------//

TABLE collationSheetSku (CollationSheet, Sku);
TABLE collationSheetSkuGroup (CollationSheet, SkuGroup);

in 'Вкл в ведомость' = DATA BOOLEAN (ManyCollationSheet, Sku) IN base;
quantityBalance 'Кол-во по остаткам' (collationSheet, sku) = DATA NUMERIC[16,5] (CollationSheet, Sku);
priceBalance 'Цена по остаткам' (collationSheet, sku) = DATA NUMERIC[14,2] (CollationSheet, Sku) @@denomination;
sumBalance 'Сумма по остаткам' (collationSheet, sku) = DATA NUMERIC[16,2] (CollationSheet, Sku) @@denomination;

isPrice 'Сумму остатка считать по цене' = DATA BOOLEAN (Inventory);

//---------------------------- Состав сличительной ведомости (Партия) ----------------------------//

TABLE collationSheetBatch (CollationSheet, Batch);

quantityBalance 'Кол-во по остаткам' (collationSheet, batch) = DATA NUMERIC[16,5] (CollationSheet, Batch);

priceBalance 'Цена по остаткам' (collationSheet, batch) = DATA NUMERIC[14,2] (CollationSheet, Batch) @@denomination;

sumBalance 'Сумма по остаткам'  = DATA NUMERIC[16,2] (CollationSheet, Batch) @@denomination; 
// ------------------------------------- Действия по заполнению сличительной ведомости --------------------------------------- //

GROUP inventoryAction 'Действия' : public;
overRecalculateBalance = ACTION ABSTRACT LIST (Inventory);

recalculateBalance 'Заполнить остатки' (Inventory inventory) = ACTION {   
    quantityBalance(CollationSheet cs, Sku sku) <- NULL WHERE inventory(cs) == inventory;
    sumBalance(CollationSheet cs, Sku sku)<- NULL WHERE inventory(cs) == inventory;
    quantityBalance(CollationSheet cs, Batch batch)<- NULL WHERE inventory(cs) == inventory;
    sumBalance(CollationSheet cs, Batch batch)<- NULL WHERE inventory(cs) == inventory;
    
    IF isPartly(inventory) AND isRemains(inventory) THEN { 
        quantityBalance(CollationSheet cs, Sku sku)
            <- balanceB(sku, stock(cs), dateTime(inventory(cs)))
            WHERE inventory(cs) == inventory AND include(inventory(cs), sku);
        IF NOT isPrice(inventory) THEN {
            sumBalance(CollationSheet cs, Sku sku)
                <- NUMERIC[16,2](sumB(sku, stock(cs), dateTime(inventory(cs))))
                WHERE inventory(cs) == inventory AND include(inventory(cs), sku);        
        } ELSE {
            sumBalance(CollationSheet cs, Sku sku)
                <- NUMERIC[16,2](round(balanceB(sku, stock(cs), dateTime(inventory(cs)))*priceBalance(cs, sku),currency(stock(cs))))
                WHERE inventory(cs) == inventory AND include(inventory(cs), sku);    
        }   
        
        IF isBatch (inventory) THEN {
            quantityBalance(CollationSheet cs, Batch batch)
                <- balanceB(batch, stock(cs), dateTime(inventory(cs)))
                WHERE inventory(cs) == inventory AND include(inventory(cs), sku(batch));
            IF NOT isPrice(inventory) THEN {
                FOR inventory(CollationSheet cs) == inventory DO {
                    IF explicitBatchLedger(stock(cs)) THEN 
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[16,2](sumB(batch, stock(cs), dateTime(inventory(cs)))) WHERE include(inventory(cs), sku(batch))
                    ELSE
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[16,2](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(stock(cs)))) WHERE include(inventory(cs), sku(batch));
                }                                          
            } ELSE {
                sumBalance(CollationSheet cs, Batch batch)
                    <- NUMERIC[16,2](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(stock(cs))))
                    WHERE inventory(cs) == inventory AND include(inventory(cs), sku(batch));    
            }                
        }    
    } ELSE {
        quantityBalance(CollationSheet cs, Sku sku)
            <- balanceB(sku, stock(cs), dateTime(inventory(cs)))
            WHERE inventory(cs) == inventory;
        IF NOT isPrice(inventory) THEN {
            sumBalance(CollationSheet cs, Sku sku)
                <- NUMERIC[16,2](sumB(sku, stock(cs), dateTime(inventory(cs))))
                WHERE inventory(cs) == inventory;        
        } ELSE {
            sumBalance(CollationSheet cs, Sku sku)
                <- NUMERIC[16,2](round(balanceB(sku, stock(cs), dateTime(inventory(cs)))*priceBalance(cs, sku),currency(stock(cs))))
                WHERE inventory(cs) == inventory;    
        }   
        
        IF isBatch (inventory) THEN {
            quantityBalance(CollationSheet cs, Batch batch)
                <- balanceB(batch, stock(cs), dateTime(inventory(cs)))
                WHERE inventory(cs) == inventory;
            IF NOT isPrice(inventory) THEN {
                FOR inventory(CollationSheet cs) == inventory DO {
                    IF explicitBatchLedger(stock(cs)) THEN 
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[16,2](sumB(batch, stock(cs), dateTime(inventory(cs))))
                    ELSE
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[16,2](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(stock(cs))));
                }
                                          
            } ELSE {
                sumBalance(CollationSheet cs, Batch batch)
                    <- NUMERIC[16,2](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(stock(cs))))
                    WHERE inventory(cs) == inventory;    
            }
                
        }
    }
    overRecalculateBalance(inventory);
} CONFIRM IN inventoryAction;

isNewExplicitBatchLedger = DATA BOOLEAN ();
onStarted() += ACTION {
    IF NOT isNewExplicitBatchLedger() THEN {
        sumBalance(CollationSheet collationSheet, Batch batch)
                    <- NUMERIC[16,2](round(quantityBalance(collationSheet, batch)*priceBalance(collationSheet, batch),currency(stock(collationSheet))));
        isNewExplicitBatchLedger() <- TRUE;
        apply();
    }
}


overPriceBalance = ABSTRACT NUMERIC[14,2](CollationSheet, Sku);
recalculatePrice 'Пересчитать цены в сличительной ведомости' (CollationSheet collationSheet) = ACTION {
    IF isBatch (collationSheet) THEN {
        price(PageInventoryDetail pageInventoryDetail)
            <- OVERRIDE overPriceBalance(collationSheet, sku(pageInventoryDetail)), priceB(SystemLedgerPriceListType.accountPriceListType, batch(pageInventoryDetail), stock(pageInventoryDetail), dateTime(pageInventoryDetail))
            WHERE collationSheet(pageInventoryDetail) == collationSheet;
    } ELSE {
        price(PageInventoryDetail pageInventoryDetail)
            <- OVERRIDE overPriceBalance(collationSheet, sku(pageInventoryDetail)), priceB(SystemLedgerPriceListType.accountPriceListType, sku(pageInventoryDetail), stock(pageInventoryDetail), dateTime(pageInventoryDetail))
            WHERE collationSheet(pageInventoryDetail) == collationSheet;
    }
    priceBalance(collationSheet, Sku sku)
        <- OVERRIDE overPriceBalance(collationSheet, sku), priceB(SystemLedgerPriceListType.accountPriceListType, sku, stock(collationSheet), dateTime(inventory(collationSheet)));

    IF NOT isPrice(inventory(collationSheet)) THEN {
        sumBalance(collationSheet, Sku sku)
            <- NUMERIC[16,2](sumB(sku, stock(collationSheet), dateTime(inventory(collationSheet))));
                
    } ELSE {
        sumBalance(collationSheet, Sku sku)
            <- NUMERIC[16,2](round(balanceB(sku, stock(collationSheet), dateTime(inventory(collationSheet)))*priceBalance(collationSheet, sku), currency(stock(collationSheet))));
           
    }    
    
//    sumBalanceCollationSheetSku(collationSheet, sku)
//        <- NUMERIC[16,2](sumBSkuStockDateTime(sku, stockCollationSheet(collationSheet), dateTimeInventory(inventoryCollationSheet(collationSheet))));
        
    IF isBatch (collationSheet) THEN {
        priceBalance(collationSheet, Batch batch)
            <- priceB(SystemLedgerPriceListType.accountPriceListType, batch, stock(collationSheet), dateTime(inventory(collationSheet)));
    }
} CONFIRM IN inventoryAction;

recalculatePrice 'Пересчитать цены по всей инвентаризации' (Inventory inventory) = ACTION {
    FOR inventory(CollationSheet collationSheet) == inventory DO {
        EXEC recalculatePrice(collationSheet);
    }
} CONFIRM IN inventoryAction;

//----------------------------------------------------- Итоги -------------------------------------------------------- //

//---------------------------- Итоги по описям (Sku) ----------------------------//

countListInventory 'К-во описей' (collationSheet) =
    GROUP SUM 1 IF ListInventory listInventory IS ListInventory BY collationSheet(listInventory);
countPageInventory 'К-во страниц' (collationSheet) =
    GROUP SUM 1 IF PageInventory pageInventory IS PageInventory BY collationSheet(listInventory(pageInventory));

countPageInventoryDetail 'Кол-во строк' (listInventory) = GROUP SUM countPageInventoryDetail(PageInventory pageInventory) BY listInventory(pageInventory) IN documentSum;
quantityPageInventoryDetail 'Кол-во товара' (listInventory) = 
    GROUP SUM quantityPageInventoryDetail(PageInventory pageInventory) BY listInventory(pageInventory) IN documentSum MINCHARWIDTH 12 PREFCHARWIDTH 14;
sumPageInventoryDetail 'Сумма товара' (listInventory) = 
    GROUP SUM sumPageInventoryDetail(PageInventory pageInventory) BY listInventory(pageInventory) IN documentSum MINCHARWIDTH 12 PREFCHARWIDTH 14;

countPageInventoryDetail 'Кол-во строк' (stock, inventory) =
    GROUP SUM countPageInventoryDetail(ListInventory listInventory) BY stock(listInventory), inventory(listInventory) IN documentSum;
quantityPageInventoryDetail 'Кол-во по описям' (stock, inventory) =
    GROUP SUM quantityPageInventoryDetail(ListInventory listInventory) BY stock(listInventory), inventory(listInventory) IN documentSum;
sumPageInventoryDetail 'Сумма по описям' (stock, inventory) =
    GROUP SUM sumPageInventoryDetail(ListInventory listInventory) BY stock(listInventory), inventory(listInventory) IN documentSum;

overChangeQuantityPageInventoryDetail = ACTION ABSTRACT LIST (CollationSheet, Sku);

quantityPageInventoryDetail 'Кол-во по описям' (collationSheet, sku) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), sku(pageInventoryDetail);
countPageInventoryDetail 'Кол-во по описям' (collationSheet, sku) = GROUP SUM 1
    BY collationSheet(PageInventoryDetail pageInventoryDetail), sku(pageInventoryDetail);    
pricePageInventoryDetail 'Цена по описям' (collationSheet, sku) = GROUP MAX price(PageInventoryDetail pageInventoryDetail) // ??????? может нодо  priceSkuStockDateTime
    BY collationSheet(listInventory(pageInventoryDetail)), sku(pageInventoryDetail);
priceMinPageInventoryDetail 'Цена по описям' (collationSheet, sku) = GROUP MIN price(PageInventoryDetail pageInventoryDetail) // ??????? может нодо  priceSkuStockDateTime
    BY collationSheet(listInventory(pageInventoryDetail)), sku(pageInventoryDetail);    
sumPageInventoryDetail 'Сумма по описям' (collationSheet, sku) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), sku(pageInventoryDetail);

quantityPageInventoryDetail 'Кол-во в описи' (listInventory, sku) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);
pricePageInventoryDetail 'Цена в описи' (listInventory, sku) = GROUP MAX price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);
priceMinPageInventoryDetail 'Цена в описи' (listInventory, sku) = GROUP MIN price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);    
sumPageInventoryDetail 'Сумма в описи' (listInventory, sku) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);

differentPrice(CollationSheet collationSheet, Sku sku) = pricePageInventoryDetail(collationSheet, sku) != priceBalance(collationSheet, sku);

index 'Номер строки' (ListInventory listInventory, Sku sku) = PARTITION SUM 1 IF  quantityPageInventoryDetail(listInventory, sku) > 0 BY listInventory ORDER name(sku);
countIndex 'Количество наименований товара'(listInventory) = GROUP SUM 1 IF quantityPageInventoryDetail(ListInventory listInventory, Sku sku) > 0
    BY listInventory IN documentSum;  
    
CONSTRAINT pricePageInventoryDetail(CollationSheet collationSheet, Sku sku) != priceMinPageInventoryDetail(collationSheet, sku) AND NOT  isBatch(collationSheet)   
    MESSAGE 'В описях присутствует одинаковый товар с разными ценами';
//---------------------------- Итоги по описям (Batch) ----------------------------//
notBatchQuantityPageInventoryDetail (CollationSheet cs, Sku sku) = GROUP SUM quantity(PageInventoryDetail d) IF NOT batch(d) BY collationSheet(d), sku(d);
countNotBatchPageInventoryDetail = GROUP SUM 1 IF sku(PageInventoryDetail d)  AND NOT batch(d) BY collationSheet(d);

calcQuantityPageInventoryDetail 'Кол-во по описям' (collationSheet, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);

calcPartitionQuantity (CollationSheet cs, Batch batch) = 
    PARTITION UNGROUP notBatchQuantityPageInventoryDetail
           LIMIT STRICT OVERRIDE 0.0 IF countLedger(batch, stock(cs)) AND dateTime(batch) < dateTime(cs), (balanceB(batch, stock(cs), dateTime(cs)) (-) calcQuantityPageInventoryDetail(cs,batch))                            
           BY cs, sku(batch)
           ORDER order(batch);
                                                           
partitionQuantity 'По FIFO' (CollationSheet cs, Batch batch) = DATA NUMERIC[16,5](CollationSheet, Batch);    
                                                                                                                                                                   
quantityPageInventoryDetail 'Кол-во по описям' (CollationSheet cs, Batch batch) = calcQuantityPageInventoryDetail(cs, batch) (+) partitionQuantity(cs, batch);
         
//quantityPageInventoryDetail 'Кол-во по описям' (collationSheet, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
//    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);
pricePageInventoryDetail 'Цена по описям' (CollationSheet collationSheet, Batch batch) = OVERRIDE priceBalance(collationSheet, batch), 
    [ =GROUP MAX price(PageInventoryDetail d) BY collationSheet(listInventory(d)), batch(d)](collationSheet, batch);
    
priceMaxPageInventoryDetail 'Цена по описям' (collationSheet, batch) = GROUP MAX price(PageInventoryDetail d) 
    BY collationSheet(listInventory(d)), batch(d);   
        
priceMinPageInventoryDetail 'Цена по описям' (collationSheet, batch) = GROUP MIN price(PageInventoryDetail d) 
    BY collationSheet(listInventory(d)), batch(d);   
//sumPageInventoryDetail 'Сумма по описям' (collationSheet, batch) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
//    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);

detailSumPageInventoryDetail 'Сумма по описям' (collationSheet, batch) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);
batchSumPageInventoryDetail (CollationSheet cs, Batch batch) =  NUMERIC[16,2](round(quantityPageInventoryDetail(cs, batch) * pricePageInventoryDetail(cs, batch), currency(stock(cs)))); 
   
sumPageInventoryDetail 'Сумма по описям' (CollationSheet cs, Batch batch) = IF isBatch(cs) AND countNotBatchPageInventoryDetail(cs)
    THEN batchSumPageInventoryDetail(cs,batch)
    ELSE detailSumPageInventoryDetail(cs,batch);
    
countPageInventoryDetail  (collationSheet, batch) = GROUP SUM 1 IF batch(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);

quantityPageInventoryDetail 'Кол-во в описи' (listInventory, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);
pricePageInventoryDetail 'Цена в описи' (listInventory, batch) = GROUP MAX price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);
priceMinPageInventoryDetail 'Цена в описи' (listInventory, batch) = GROUP MIN price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);    
sumPageInventoryDetail 'Сумма в описи' (listInventory, batch) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);

differentPrice(CollationSheet collationSheet, Batch batch) = priceMaxPageInventoryDetail(collationSheet, batch) != priceBalance(collationSheet, batch);

index 'Номер строки' (ListInventory listInventory, Batch batch) = PARTITION SUM 1 IF  quantityPageInventoryDetail(listInventory, batch) > 0 BY listInventory ORDER name(sku(batch));
countIndexBatch 'Количество партий' (listInventory) = GROUP SUM 1 IF quantityPageInventoryDetail(ListInventory listInventory, Batch batch) > 0
    BY listInventory IN documentSum;

quantityBatchPageInventoryDetail 'Кол-во по описям' (collationSheet) =
    GROUP SUM quantityPageInventoryDetail(CollationSheet collationSheet, Batch batch) BY collationSheet;
sumBatchPageInventoryDetail 'Сумма по описям' (collationSheet) =
    GROUP SUM sumPageInventoryDetail(CollationSheet collationSheet, Batch batch) BY collationSheet;
    
CONSTRAINT priceMaxPageInventoryDetail(CollationSheet collationSheet, Batch batch) != priceMinPageInventoryDetail(collationSheet, batch) AND  isBatch(collationSheet)   
    MESSAGE 'В описях присутствует партия с разными ценами';    


quantityPageInventoryDetail 'Кол-во по описям' (collationSheet) =
    GROUP SUM quantity(PageInventoryDetail pageInventoryDetail) BY collationSheet(pageInventoryDetail) PERSISTENT;
//sumPageInventoryDetail 'Сумма по описям' (collationSheet) =
//    GROUP SUM sum(PageInventoryDetail pageInventoryDetail) BY collationSheet(pageInventoryDetail) PERSISTENT;

sumPageInventoryDetail 'Сумма по описям' (CollationSheet cs) = IF isBatch(cs) AND countNotBatchPageInventoryDetail(cs)
    THEN [ = GROUP SUM batchSumPageInventoryDetail(CollationSheet cs, Batch batch) BY cs] (cs)
    ELSE [ = GROUP SUM sum(PageInventoryDetail d) BY collationSheet(d)](cs) PERSISTENT;
    
// ------------------------------ Определение состава сличительной ведомости (Sku) ------------------------------------ //

include(CollationSheet collationSheet, Sku sku) = MULTI
    collationSheet IS RegisterCollationSheet IF countPageInventoryDetail(collationSheet, sku),
    (OVERRIDE in(collationSheet, sku), collationSheet IS ManyCollationSheet IF quantityPageInventoryDetail(collationSheet, sku)),
    (collationSheet IS RemainsCollationSheet IF (quantityBalance(collationSheet, sku) != 0 OR sumBalance(collationSheet, sku) OR quantityPageInventoryDetail(collationSheet, sku)));
overInclude = ABSTRACT BOOLEAN (CollationSheet, Sku);

priceBalance(CollationSheet collationSheet, Sku sku) <- OVERRIDE overPriceBalance(collationSheet, sku), prevPriceB(SystemLedgerPriceListType.accountPriceListType,
                sku, stock(collationSheet), dateTime(inventory(collationSheet)))
                WHEN SET(include(collationSheet, sku));

// ------------------------------ Определение состава сличительной ведомости (Batch) ------------------------------------ //

include(collationSheet, batch) = DATA BOOLEAN (CollationSheet, Batch);
include(CollationSheet collationSheet, Batch batch) <- include(collationSheet, PREV(sku(batch))) AND isBatch(collationSheet)
                        WHEN [= CHANGED(include(CollationSheet collationSheet, Sku sku))](collationSheet, PREV(sku(batch)));

priceBalance(CollationSheet collationSheet, Batch batch) <- prevPriceB(SystemLedgerPriceListType.accountPriceListType,
                batch, stock(collationSheet), dateTime(inventory(collationSheet)))
                WHEN SET(include(collationSheet, batch));

// ------------------------------------ Итоги по сличительной ведомости (Sku) ------------------------------------ //

//sumBalanceCollationSheetSku 'Сумма по остаткам' (collationSheet, sku) =
//    NUMERIC[16,2](roundPriceCurrency(quantityBalanceCollationSheetSku(collationSheet, sku) * priceBalanceCollationSheetSku(collationSheet, sku), currencyStock(stockCollationSheet(collationSheet))));

quantitySkuPageInventoryDetail 'Кол-во по описи' (collationSheet) =
    GROUP SUM quantityPageInventoryDetail(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) BY collationSheet PERSISTENT;

quantitySkuBalance 'Кол-во по остаткам' (collationSheet) =
    GROUP SUM quantityBalance(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) BY collationSheet PERSISTENT;
sumSkuBalance 'Сумма по остаткам' (collationSheet) =  GROUP SUM sumBalance(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) BY collationSheet PERSISTENT;

quantityShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet, Sku sku) =
    quantityBalance(collationSheet, sku) (-) quantityPageInventoryDetail(collationSheet, sku) PERSISTENT;
sumShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet, Sku sku) =
    sumBalance(collationSheet, sku) (-) sumPageInventoryDetail(collationSheet, sku) PERSISTENT;

quantitySkuShortage 'Кол-во недостачи / излишка' (collationSheet) =
    GROUP SUM quantityShortage(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) 
        BY collationSheet PERSISTENT;
sumShortageSku 'Сумма недостачи / излишка' (collationSheet) = 
    GROUP SUM sumShortage(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) 
        BY collationSheet PERSISTENT;
//-- Отдельно излишки, отдельно недостача
positiveQuantitySkuShortage 'Кол-во недостачи' (collationSheet) =
    GROUP SUM quantityShortage(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) AND quantityShortage(collationSheet, sku)>0 
        BY collationSheet PERSISTENT;
positiveSumShortageSku 'Сумма недостачи' (collationSheet) = 
    GROUP SUM sumShortage(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) AND sumShortage(collationSheet, sku)>0 
        BY collationSheet PERSISTENT;
negativeQuantitySkuShortage 'Кол-во излишки' (collationSheet) =
    GROUP SUM quantityShortage(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) AND quantityShortage(collationSheet, sku)<0 
        BY collationSheet PERSISTENT;
negativeSumShortageSku 'Сумма излишки' (collationSheet) = 
    GROUP SUM sumShortage(CollationSheet collationSheet, Sku sku) IF include(collationSheet, sku) AND sumShortage(collationSheet, sku)<0 
        BY collationSheet PERSISTENT;


sumItemSkuBalance 'Сумма по остаткам, товар' (collationSheet) = GROUP SUM sumBalance(CollationSheet collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isItem(sku) BY collationSheet PERSISTENT;
sumContainerSkuBalance 'Сумма по остаткам, тара' (collationSheet) = GROUP SUM sumBalance(CollationSheet collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isContainer(sku) BY collationSheet PERSISTENT;

sumItemSkuPageInventoryDetail 'Сумма по факту, товар' (collationSheet) = GROUP SUM sumPageInventoryDetail(CollationSheet collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isItem(sku) BY collationSheet PERSISTENT;
sumContainerSkuPageInventoryDetail 'Сумма по факту, тара' (collationSheet) = GROUP SUM sumPageInventoryDetail(CollationSheet collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isContainer(sku) BY collationSheet PERSISTENT;

sumItemSkuShortage 'Сумма недостачи / излишка, товар' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isItem(sku) BY collationSheet PERSISTENT;
sumContainerSkuShortage 'Сумма недостачи / излишка, тара' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isContainer(sku) BY collationSheet PERSISTENT;

// ------------------------------------ Итоги по сличительной ведомости (Batch) ------------------------------------ //

//sumBalance 'Сумма по остаткам' (CollationSheet collationSheet, Batch batch) = explicitBatchLedger
//    NUMERIC[16,2](round(quantityBalance(collationSheet, batch) * priceBalance(collationSheet, batch), currency(stock(collationSheet))));
      
quantityBatchBalance 'Кол-во по остаткам' (collationSheet) =
    GROUP SUM quantityBalance(CollationSheet collationSheet, Batch batch) IF include(collationSheet, batch) BY collationSheet PERSISTENT;
sumBatchBalance 'Сумма по остаткам' (collationSheet) =  GROUP SUM sumBalance(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) BY collationSheet PERSISTENT;


quantityShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet, Batch batch) =
    quantityBalance(collationSheet, batch) (-) quantityPageInventoryDetail(collationSheet, batch) PERSISTENT;
sumShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet, Batch batch) =
    sumBalance(collationSheet, batch) (-) sumPageInventoryDetail(collationSheet, batch) PERSISTENT;

quantityBatchShortage 'Кол-во недостачи / излишка' (collationSheet) =
    GROUP SUM quantityShortage(CollationSheet collationSheet, Batch batch) IF include(collationSheet, batch) BY collationSheet PERSISTENT;
sumBatchShortage 'Сумма недостачи / излишка' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) BY collationSheet PERSISTENT;
    
//-- Отдельно излишки, отдельно недостача    
positiveQuantityBatchShortage 'Кол-во недостачи' (collationSheet) =
    GROUP SUM quantityShortage(CollationSheet collationSheet, Batch batch) IF include(collationSheet, batch) AND quantityShortage(collationSheet, batch) >0
        BY collationSheet PERSISTENT;
positiveSumBatchShortage 'Сумма недостачи' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) AND sumShortage(collationSheet, batch) >0
    BY collationSheet PERSISTENT;

negativeQuantityBatchShortage 'Кол-во излишки' (collationSheet) =
    GROUP SUM quantityShortage(CollationSheet collationSheet, Batch batch) IF include(collationSheet, batch) AND quantityShortage(collationSheet, batch) <0
        BY collationSheet PERSISTENT;
negativeSumBatchShortage 'Сумма излишки' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) AND sumShortage(collationSheet, batch) <0
        BY collationSheet PERSISTENT;

sumItemBatchBalance 'Сумма по остаткам, товар' (collationSheet) = GROUP SUM sumBalance(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF NOT isContainer(batch) BY collationSheet PERSISTENT;
sumContainerBatchBalance 'Сумма по остаткам, тара' (collationSheet) = GROUP SUM sumBalance(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF isContainer(batch) BY collationSheet PERSISTENT;

sumItemBatchPageInventoryDetail 'Сумма по факту, товар' (collationSheet) = GROUP SUM sumPageInventoryDetail(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF NOT isContainer(batch) BY collationSheet PERSISTENT;
sumContainerBatchPageInventoryDetail 'Сумма по факту, тара' (collationSheet) = GROUP SUM sumPageInventoryDetail(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF isContainer(batch) BY collationSheet PERSISTENT;

sumItemBatchShortage 'Сумма недостачи / излишка, товар' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF NOT isContainer(batch) BY collationSheet PERSISTENT;
sumContainerBatchShortage 'Сумма недостачи / излишка, тара' (collationSheet) = GROUP SUM sumShortage(CollationSheet collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF isContainer(batch) BY collationSheet PERSISTENT;


//---------------------------------- Итоги сличительной ведомости с учетом типа инвентаризации ----------------------------//

quantityBalance 'Кол-во по остаткам' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN quantityBatchBalance(collationSheet)
                                                                        ELSE quantitySkuBalance(collationSheet);
sumBalance 'Сумма по остаткам' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                    THEN sumBatchBalance(collationSheet)
                                                                    ELSE sumSkuBalance(collationSheet);

quantityShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN quantityBatchShortage(collationSheet)
                                                                        ELSE quantitySkuShortage(collationSheet);
overSumManageShortage= ABSTRACT NUMERIC[16,2](CollationSheet);                                                                        
sumManageShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet) = (IF isBatch(collationSheet)
                                                                    THEN sumBatchShortage(collationSheet)
                                                                    ELSE sumShortageSku(collationSheet)) (+) overSumManageShortage(collationSheet);
                                                                    
positiveQuantityShortage 'Кол-во недостачи' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN positiveQuantityBatchShortage(collationSheet)
                                                                        ELSE positiveQuantitySkuShortage(collationSheet);
positiveSumShortage 'Сумма недостачи' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                    THEN positiveSumBatchShortage(collationSheet)
                                                                    ELSE positiveSumShortageSku(collationSheet);                                                                    
                                                                    
negativeQuantityShortage 'Кол-во излишки' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN negativeQuantityBatchShortage(collationSheet)
                                                                        ELSE negativeQuantitySkuShortage(collationSheet);
negativeSumShortage 'Сумма излишки' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                    THEN negativeSumBatchShortage(collationSheet)
                                                                    ELSE negativeSumShortageSku(collationSheet);

sumItemBalance 'Сумма по остаткам, товар' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                            THEN sumItemBatchBalance(collationSheet)
                                                                            ELSE sumItemSkuBalance(collationSheet);
sumContainerBalance 'Сумма по остаткам, тара' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                THEN sumContainerBatchBalance(collationSheet)
                                                                                ELSE sumContainerSkuBalance(collationSheet);

sumItemPageInventoryDetail 'Сумма по факту, товар' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                        THEN sumItemBatchPageInventoryDetail(collationSheet)
                                                                                        ELSE sumItemSkuPageInventoryDetail(collationSheet);
sumContainerPageInventoryDetail 'Сумма по факту, тара' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                            THEN sumContainerBatchPageInventoryDetail(collationSheet)
                                                                                            ELSE sumContainerSkuPageInventoryDetail(collationSheet);

sumItemManageShortage 'Сумма недостачи / излишка, товар' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                            THEN sumItemBatchShortage(collationSheet)
                                                                            ELSE sumItemSkuShortage(collationSheet);
sumContainerManageShortage 'Сумма недостачи / излишка, тара' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                THEN sumContainerBatchShortage(collationSheet)
                                                                                ELSE sumContainerSkuShortage(collationSheet);

// Объединение товаров                                                                               

overReplace(Sku s, Sku d) += ACTION {
    quantityBalance(CollationSheet collationSheet, d) <- balanceB(d, stock(collationSheet), dateTime(inventory(collationSheet)))
        WHERE countPageInventoryDetail(collationSheet, s);
        
    sumBalance(CollationSheet collationSheet, d)
        <- NUMERIC[16,2](sumB(d, stock(collationSheet), dateTime(inventory(collationSheet))))
        WHERE countPageInventoryDetail(collationSheet, s) AND NOT isPrice(inventory(collationSheet));        
    sumBalance(CollationSheet collationSheet, d)
        <- NUMERIC[16,2](round(balanceB(d, stock(collationSheet), dateTime(inventory(collationSheet)))*priceBalance(collationSheet, d), currency(stock(collationSheet))))
        WHERE countPageInventoryDetail(collationSheet, s) AND isPrice(inventory(collationSheet));    
    
    quantityBalance(CollationSheet collationSheet, Batch batch)
        <- balanceB(batch, stock(collationSheet), dateTime(inventory(collationSheet)))
        WHERE countPageInventoryDetail(collationSheet, s) AND isBatch(inventory(collationSheet));        
        
    priceBalance(CollationSheet collationSheet, d)
        <- OVERRIDE overPriceBalance(collationSheet, d), priceB(SystemLedgerPriceListType.accountPriceListType, d, stock(collationSheet), dateTime(inventory(collationSheet)))
        WHERE countPageInventoryDetail(collationSheet, s);

    sumBalance(CollationSheet collationSheet, d)
        <- NUMERIC[16,2](sumB(d, stock(collationSheet), dateTime(inventory(collationSheet))))
        WHERE countPageInventoryDetail(collationSheet, s) AND NOT isPrice(inventory(collationSheet));
                
    sumBalance(CollationSheet collationSheet, d)
        <- NUMERIC[16,2](round(balanceB(d, stock(collationSheet), dateTime(inventory(collationSheet)))*priceBalance(collationSheet, d), currency(stock(collationSheet))))
        WHERE countPageInventoryDetail(collationSheet, s) AND isPrice(inventory(collationSheet));
        
    priceBalance(CollationSheet collationSheet, Batch batch)
        <- prevPriceB(SystemLedgerPriceListType.accountPriceListType, batch, stock(collationSheet), dateTime(inventory(collationSheet)))
        WHERE countPageInventoryDetail(collationSheet, s) AND isBatch(collationSheet);     
}                                                                                

//-------------------------------------- Проведение по товарному отчету ----------------------------------------------------//

sumItemAccountB 'Сумма по ТО, товар' = DATA NUMERIC[16,2] (CollationSheet) @@denomination;
sumContainerAccountB 'Сумма по ТО, тара' = DATA NUMERIC[16,2] (CollationSheet) @@denomination;
recalculateSumAccountB 'Пересчитать остатки по ТО'(CollationSheet c) = ACTION {
    sumItemAccountB(c) <- prevSumItemAccountBDocumentLedger(stock(c), dateTime(c));
    sumContainerAccountB (c) <- prevSumContainerAccountBDocumentLedger(stock(c), dateTime(c));
}

WHEN SESSION CHANGED(stock(CollationSheet c)) OR CHANGED(dateTime(c)) DO
    recalculateSumAccountB(c);

sumItemAccountShortage = sumItemAccountB(CollationSheet collationSheet) (-) 
                                          sumItemPageInventoryDetail (collationSheet); 
                                          
sumContainerAccountShortage = sumContainerAccountB(CollationSheet collationSheet) (-) sumContainerPageInventoryDetail (collationSheet); 

skipStockDocumentLedger 'Не проводить по товарному отчету'  = DATA BOOLEAN (Inventory) IN documentPrm;
skipStockDocumentLedger 'Не проводить по товарному отчету' = DATA BOOLEAN (Operation);

skipSkuLedger 'Не изменять остатки'  = DATA BOOLEAN (Inventory) IN documentPrm;
skipSkuLedger 'Не изменять остатки' = DATA BOOLEAN (Operation);

EXTEND FORM operation
     PROPERTIES(o) skipStockDocumentLedger, skipSkuLedger
 ;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(skipStockDocumentLedger(o));
        MOVE PROPERTY(skipSkuLedger(o));
    }
}

skipStockDocumentLedger (CollationSheet cs) = skipStockDocumentLedger(inventory(cs));
skip(CollationSheet l) += skipStockDocumentLedger(l);

skipSkuLedger (CollationSheet cs) = skipSkuLedger(inventory(cs));

isShortageStockDocument 'Считать недостачу из товарного отчета' = DATA BOOLEAN (Inventory) IN documentPrm;

isShortageStockDocument 'Считать недостачу из товарного отчета' = DATA BOOLEAN (Operation);

EXTEND FORM operation
     PROPERTIES(o) isShortageStockDocument
 ;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(isShortageStockDocument(o));
    }
}

showAccountSums = typeOfAddition(CollationSheet c)==TypeOfAddition.remains AND isShortageStockDocument(inventory(c)) PERSISTENT;

migratedAccountSum = DATA BOOLEAN();
onStarted() += ACTION {
    IF NOT migratedAccountSum() THEN {
        FOR showAccountSums(CollationSheet c) DO {
            recalculateSumAccountB(c);
        }
        migratedAccountSum() <- TRUE;
    }
}

accountSumItemBalance = IF showAccountSums(CollationSheet collationSheet)
                                                            THEN sumItemAccountB(collationSheet)
                                                            ELSE sumItemBalance(collationSheet);
                                                          
accountSumContainerBalance = IF showAccountSums(CollationSheet collationSheet)
                                                                THEN sumContainerAccountB(collationSheet)
                                                                ELSE sumContainerBalance(collationSheet);
                                                                                                                          
accountSumBalance = IF showAccountSums(CollationSheet collationSheet)
                                                          THEN accountSumItemBalance(collationSheet) (+) accountSumContainerBalance(collationSheet)
                                                          ELSE sumBalance(collationSheet);                                                                                                                          

overSumItemShortage = ABSTRACT NUMERIC[16,2](CollationSheet);
sumItemShortage 'Сумма недостачи / излишка, товар' = (IF showAccountSums(CollationSheet collationSheet)
                                                            THEN sumItemAccountShortage(collationSheet)
                                                            ELSE sumItemManageShortage(collationSheet) (+) overSumItemShortage(collationSheet)) ;
                                                            
sumContainerShortage 'Сумма недостачи / излишка, тара' = IF showAccountSums(CollationSheet collationSheet)
                                                            THEN sumContainerAccountShortage(collationSheet)
                                                            ELSE sumContainerManageShortage(collationSheet);

sumAccountShortage 'Сумма недостачи / излишка по ТО' = sumItemShortage(CollationSheet collationSheet) (+) sumContainerShortage(collationSheet);                                                            
sumShortage 'Сумма недостачи / излишка'  =  IF showAccountSums(CollationSheet collationSheet)
                                                                    THEN sumAccountShortage(collationSheet)
                                                                    ELSE sumManageShortage(collationSheet);                                                           

@implementStockDocumentLedgerOut(CollationSheet, stock);
type(CollationSheet l) += 'Инвентаризация' IF l IS CollationSheet;
sumItem (CollationSheet ledger) += sumItemShortage(ledger);
sumContainer (CollationSheet ledger) += sumContainerShortage(ledger);

//---------------------------- Генерация сличительных ведомостей ----------------------------//

// автоматическое создание сличительной ведомости (товары из описей) //
includeRegister(Stock stock, Inventory inventory) =
    include(stock, inventory) AND typeOfAddition(stock, inventory) == TypeOfAddition.register;

@defineAggregationCustom(stockCollationSheet, inventoryCollationSheet, stock, inventory, registerCollationSheet, includeRegister);

// автоматическое создание сличительной ведомости (по остаткам) //
includeRemains(Stock stock, Inventory inventory) =
    include(stock, inventory) AND typeOfAddition(stock, inventory) == TypeOfAddition.remains;

@defineAggregationCustom(stockCollationSheet, inventoryCollationSheet, stock, inventory, remainsCollationSheet, includeRemains);

// автоматическое создание сличительной ведомости (по множеству товаров) //
includeMany(Stock stock, Inventory inventory) =
    include(stock, inventory) AND typeOfAddition(stock, inventory) == TypeOfAddition.many;

@defineAggregationCustom(stockCollationSheet, inventoryCollationSheet, stock, inventory, manyCollationSheet, includeMany);

//---------------------------- Изменение остатка инвентаризации sku----------------------------//

CLASS ABSTRACT InventorySkuDetail 'Изменение остатка инвентаризации' : DataSkuLedger;
TABLE inventorySkuDetail (InventorySkuDetail);

CLASS OutInventorySkuDetail 'Недостача инвентаризации' : InventorySkuDetail;
CLASS InInventorySkuDetail 'Излишки инвентаризации' : InventorySkuDetail;

needToOutLedger (CollationSheet collationSheet, Sku sku) = 
    (quantityShortage(collationSheet, sku) > 0  OR (sumShortage(collationSheet, sku) > 0 AND NOT quantityShortage(collationSheet, sku)))
    AND include(collationSheet, sku)
    AND NOT skipSkuLedger(collationSheet) 
    AND NOT isBatch(collationSheet)
    AND isPosted(collationSheet);

needToInLedger (CollationSheet collationSheet, Sku sku) = (quantityShortage(collationSheet, sku) < 0 OR (sumShortage(collationSheet, sku) < 0 AND NOT quantityShortage(collationSheet, sku)))
    AND include(collationSheet, sku) 
    AND NOT skipSkuLedger(collationSheet) 
    AND NOT isBatch(collationSheet)
    AND isPosted(collationSheet);

@defineAggregation(collationSheet, sku, outInventorySkuDetail, needToOutLedger);
@defineAggregation(collationSheet, sku, inInventorySkuDetail, needToInLedger);

collationSheet(InventorySkuDetail inventorySkuDetail) = MULTI collationSheet[OutInventorySkuDetail](inventorySkuDetail),
                                                             collationSheet[InInventorySkuDetail](inventorySkuDetail);

inventory(InventorySkuDetail inventorySkuDetail) = inventory(collationSheet(inventorySkuDetail)) PERSISTENT;

@defineDocumentDetailTime(inventory, InventorySkuDetail);
@defineDocumentDetailPosted(inventory, InventorySkuDetail);

@defineDocumentDetailClosed(inventory, InventorySkuDetail);

@defineDocumentDetailStock(collationSheet, inventorySkuDetail, stock, stock, 'Склад');
stock(InInventorySkuDetail detail) = stock[InventorySkuDetail](detail) IF detail IS InInventorySkuDetail;
stock(OutInventorySkuDetail detail) = stock[InventorySkuDetail](detail) IF detail IS OutInventorySkuDetail;

quantity (OutInventorySkuDetail inventorySkuDetail) = quantityShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));
quantity (InInventorySkuDetail inventorySkuDetail) = -quantityShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));

sum (OutInventorySkuDetail inventorySkuDetail) = sumShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));
sum (InInventorySkuDetail inventorySkuDetail) = -sumShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));

sku(InventorySkuDetail inventorySkuDetail) = MULTI sku[OutInventorySkuDetail](inventorySkuDetail),
                                                  sku[InInventorySkuDetail](inventorySkuDetail) PERSISTENT;
nameSku 'Товар' (InventorySkuDetail inventorySkuDetail) = name(sku(inventorySkuDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
idBarcode 'Штрихкод' (InventorySkuDetail inventorySkuDetail) =  idBarcode(sku(inventorySkuDetail));

quantity 'Кол-во недостачи / излишка' (InventorySkuDetail inventorySkuDetail) = quantityShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail)) PERSISTENT;
sum 'Сумма недостачи / излишка' (InventorySkuDetail inventorySkuDetail) = sumShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail)) PERSISTENT;

description 'Название документа' (OutInventorySkuDetail inventorySkuDetail) =
    'Недостача по инвентаризации ' + name(collationSheet(inventorySkuDetail)) + ' от ' + date(collationSheet(inventorySkuDetail));

description 'Название документа' (InInventorySkuDetail inventorySkuDetail) =
    'Излишек по инвентаризации ' + name(collationSheet(inventorySkuDetail)) + ' от ' + date(collationSheet(inventorySkuDetail));

description 'Название документа' (InventorySkuDetail inventorySkuDetail) = OVERRIDE description[OutInventorySkuDetail](inventorySkuDetail), description[InInventorySkuDetail](inventorySkuDetail);

@implementSkuLedger(inventorySkuDetail, sku, stock);

EXTEND CLASS OutInventorySkuDetail : OutFIFOSkuLedger;
quantity (OutInventorySkuDetail ledger) += quantity(ledger);
sum (OutInventorySkuDetail ledger) += sum(ledger);
stockDocumentLedger(OutInventorySkuDetail ledger) += collationSheet(ledger);

EXTEND CLASS InInventorySkuDetail : InLIFOSkuLedger;
quantity (InInventorySkuDetail ledger) += quantity(ledger);
sum (InInventorySkuDetail ledger) += sum(ledger);
stockDocumentLedger(InInventorySkuDetail ledger) += collationSheet(ledger);

//---------------------------- Изменение остатка инвентаризации batch----------------------------//

CLASS ABSTRACT InventoryBatchDetail 'Изменение остатка инвентаризации' : DataSkuLedger;
TABLE inventoryBatchDetail (InventoryBatchDetail);

CLASS OutInventoryBatchDetail 'Недостача инвентаризации' : InventoryBatchDetail;
CLASS InInventoryBatchDetail 'Излишки инвентаризации' : InventoryBatchDetail;

needToOutLedger (CollationSheet collationSheet, Batch batch) = 
    (quantityShortage(collationSheet, batch) > 0  OR (sumShortage(collationSheet, batch) > 0 AND NOT quantityShortage(collationSheet, batch)))
    AND include(collationSheet, batch) 
    AND NOT skipSkuLedger(collationSheet) 
    AND isBatch(collationSheet)
    AND isPosted(collationSheet); 

needToInLedger (CollationSheet collationSheet, Batch batch) =
    (quantityShortage(collationSheet, batch) < 0 OR (sumShortage(collationSheet, batch) < 0 AND NOT quantityShortage(collationSheet, batch)))
    AND include(collationSheet, batch) 
    AND NOT skipSkuLedger(collationSheet) 
    AND isBatch(collationSheet)
    AND isPosted(collationSheet); 

@defineAggregation(collationSheet, batch, outInventoryBatchDetail, needToOutLedger);
@defineAggregation(collationSheet, batch, inInventoryBatchDetail, needToInLedger);

collationSheet(InventoryBatchDetail inventoryBatchDetail) = MULTI collationSheet[OutInventoryBatchDetail](inventoryBatchDetail),
                                                                 collationSheet[InInventoryBatchDetail](inventoryBatchDetail);

inventory(InventoryBatchDetail inventoryBatchDetail) = inventory(collationSheet(inventoryBatchDetail)) PERSISTENT;

@defineDocumentDetailTime(inventory, InventoryBatchDetail);
@defineDocumentDetailPosted(inventory, InventoryBatchDetail);

@defineDocumentDetailClosed(inventory, InventoryBatchDetail);

@defineDocumentDetailStock(collationSheet, inventoryBatchDetail, stock, stock, 'Склад');
stock(InInventoryBatchDetail detail) = stock[InventoryBatchDetail](detail) IF detail IS InInventoryBatchDetail;
stock(OutInventoryBatchDetail detail) = stock[InventoryBatchDetail](detail) IF detail IS OutInventoryBatchDetail;

quantity (OutInventoryBatchDetail inventoryBatchDetail) = quantityShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));
quantity (InInventoryBatchDetail inventoryBatchDetail) = -quantityShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));

sum (OutInventoryBatchDetail inventoryBatchDetail) = sumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));
sum (InInventoryBatchDetail inventoryBatchDetail) = -sumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));

batch(InventoryBatchDetail inventoryBatchDetail) = MULTI batch[OutInventoryBatchDetail](inventoryBatchDetail),
                                                        batch[InInventoryBatchDetail](inventoryBatchDetail) PERSISTENT;
nameBatch 'Партия' (InventoryBatchDetail inventoryBatchDetail) = name(batch(inventoryBatchDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;

sku (InventoryBatchDetail inventoryBatchDetail) = sku(batch(inventoryBatchDetail));
nameSku 'Товар' (InventoryBatchDetail inventoryBatchDetail) = nameSku(batch(inventoryBatchDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
idBarcode 'Штрихкод' (InventoryBatchDetail inventoryBatchDetail) =  idBarcode(sku(inventoryBatchDetail));

quantity 'Кол-во недостачи / излишка' (InventoryBatchDetail inventoryBatchDetail) = quantityShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) PERSISTENT;
sum 'Сумма недостачи / излишка' (InventoryBatchDetail inventoryBatchDetail) = sumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) PERSISTENT;

includeBatch(InventoryBatchDetail inventoryBatchDetail) = include(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) PERSISTENT;

description 'Название документа' (OutInventoryBatchDetail inventoryBatchDetail) =
    'Недостача по инвентаризации ' + name(collationSheet(inventoryBatchDetail)) + ' от ' + date(collationSheet(inventoryBatchDetail));

description 'Название документа' (InInventoryBatchDetail inventoryBatchDetail) =
    'Излишек по инвентаризации ' + name(collationSheet(inventoryBatchDetail)) + ' от ' + date(collationSheet(inventoryBatchDetail));

description 'Название документа' (InventoryBatchDetail inventoryBatchDetail) = OVERRIDE description[OutInventoryBatchDetail](inventoryBatchDetail), description[InInventoryBatchDetail](inventoryBatchDetail);

@implementSkuLedger(inventoryBatchDetail, sku, stock);
changed(InventoryBatchDetail ledger) += CHANGED(batch(ledger));
batch(InventoryBatchDetail ledger) += batch(ledger);

EXTEND CLASS OutInventoryBatchDetail : OutFIFOSkuLedger;
quantity (OutInventoryBatchDetail ledger) += quantity(ledger);
sum (OutInventoryBatchDetail ledger) += sum(ledger);
stockDocumentLedger(OutInventoryBatchDetail ledger) += collationSheet(ledger);

EXTEND CLASS InInventoryBatchDetail : InLIFOSkuLedger;
quantity (InInventoryBatchDetail ledger) += quantity(ledger);
sum (InInventoryBatchDetail ledger) += sum(ledger);
stockDocumentLedger(InInventoryBatchDetail ledger) += collationSheet(ledger);

//------------------------------------ Выбор складов для инвентаризации------------------------------------------//

FORM dialogStockInventory 'Выбор складов для инвентаризации'
    OBJECTS in=Inventory FIXED PANEL
    PROPERTIES (in) READONLY series, number, name, date

    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS ts=Stock
    PROPERTIES (ts) READONLY id SHOWIF showIDs(), tsTreeName = name
    PROPERTIES (ts, in)      include, nameUserTypeOfAddition
    FILTERS isParent(sg, ts) OR ts IS Stock AND NOT sg 
    
    FILTERGROUP filters
        FILTER 'Только склады компании' isCompany(ts) 'F10' DEFAULT
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    ORDER BY tsTreeName
;
@extendFormFilterStockAccess(ts, dialogStockInventory);
@extendFormFilterStockGroupAccess(sg, dialogStockInventory);

DESIGN dialogStockInventory {
    main{
        preferredSize = (1024, 768);
        MOVE in.box {
            in.panel {
                type = CONTAINERH;
            }
        }
        NEW stockCase {
            fill = 1;
            type = SPLITH;
            MOVE stockTree.tree.box;
            MOVE ts.box {
                fill = 3;
            }
        }
        MOVE functions.box;
    }
}

dialogStock 'Выбрать склады для инвентаризации' (Inventory inventory) =
    ACTION FORM dialogStockInventory OBJECTS in = inventory DOCKEDMODAL;

//------------------------------------ Выбор SKU для сличительной ведомости ------------------------------------------//

FORM dialogSkuCollationSheet 'Выбор SKU для сличительной ведомости'
    OBJECTS cs=ManyCollationSheet FIXED PANEL
    PROPERTIES (cs) READONLY name, nameTypeOfAddition

    TREE treeGroup g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS i=Sku
    PROPERTIES(i) READONLY idBarcode, name, shortNameUOM

    PROPERTIES(cs, i) in

    FILTERS isParent(g, i)
    ORDER BY name(i)
;

DESIGN dialogSkuCollationSheet {
    MOVE cs.box;
    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE treeGroup.tree.box;
        MOVE i.box {
            fill = 3;
        }
    }
    MOVE functions.box;
}

dialogSku 'Добавить товар'(ManyCollationSheet collationSheet) = ACTION {
    IF collationSheet IS ManyCollationSheet THEN
        FORM dialogSkuCollationSheet OBJECTS cs = collationSheet MODAL;
} TOOLBAR;

//------------------------------------ Формы редактирования описей ------------------------------------------//

createPage 'Создать страницу описи с остатками'  (ListInventory listInventory) = ACTION {
    FORM dialogSkuGroup MODAL;
    IF formResult() == FormResult.ok THEN {    
        FOR ADDOBJ p = PageInventory  DO {
            listInventory(p) <- listInventory;
            IF isBatch(inventory(listInventory)) THEN {
                FOR (NUMERIC[16,5] cnt == balanceB(Batch b, stock(listInventory), dateTime(inventory(listInventory))) AND cnt > 0 AND inSession(skuGroup(sku(b)))) AND (isItem(sku(b)) OR isContainer(sku(b))) ADDOBJ d = PageInventoryDetail DO {
                    pageInventory(d) <- p;
                    sku(d) <- sku(b);
                    batch(d) <- b;
                    quantity(d) <- cnt;
                    price(d) <- accountPriceA(b, stock(listInventory), dateTime(inventory(listInventory)));
                }
            } ELSE {
                FOR (NUMERIC[16,5] cnt == balanceB(Sku sk, stock(listInventory), dateTime(inventory(listInventory))) AND cnt > 0 AND inSession(skuGroup(sk))) AND (isItem(sk) OR isContainer(sk)) ORDER name (sk) ADDOBJ d = PageInventoryDetail DO {
                    pageInventory(d) <- p;
                    sku(d) <- sk;
                    quantity(d) <- cnt;
                    price(d) <- prevPriceA[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, sk, stock(listInventory), dateTime(inventory(listInventory)));
                }        
            }          
        }
    }    
};

isParentSkuGroup = (isParent(SkuGroup g, sku(PageInventoryDetail detail))) OR (g IS SkuGroup AND NOT sku(detail));

FORM listInventory 'Опись'
    OBJECTS         li=ListInventory FIXED PANEL
    PROPERTIES (li) nameStock, nameInventory, name, note,
                    nameCommittee, nameChairmanCommittee, nameEmployee,
                    countPageInventory, countPageInventoryDetail, quantityPageInventoryDetail,
                    sumPageInventoryDetail, createPage
    
    TREE skuTree g = SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
        
    OBJECTS         pl=PageInventory FIXED GRID
    PROPERTIES(pl)  name, note FORCE PANEL, countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail, ADDOBJ, DELETESESSION
    FILTERS         listInventory(pl) == li

    OBJECTS         dp=PageInventoryDetail
    PROPERTIES (dp) index, nameSkuTypeSku, idSku SHOWIF showIDs(), idBarcodeSku, nameSku, nameBatch SHOWIF isBatch(li), 
                    quantityGrid = quantity, price,
                    sum, ADDOBJ SHOWIF countPageInventory(li), DELETESESSION
    FILTERS         listInventory(pageInventory(dp)) == li, isParentSkuGroup(g, dp)
    FILTERGROUP page
    FILTER 'На странице' pageInventory(dp) == pl DEFAULT 

    OBJECTS         i=Sku FIXED GRID
    PROPERTIES (li,i)  index
    PROPERTIES (i)     id SHOWIF showIDs(), idBarcode, name
    PROPERTIES (li,i)  quantityPageInventoryDetail, pricePageInventoryDetail SHOWIF isSku(li),
                       sumPageInventoryDetail SHOWIF isSku(li)
    FILTERS            quantityPageInventoryDetail(li,i), //> 0
                       isParent(g, i)

    OBJECTS         bt=Batch FIXED GRID
    PROPERTIES (li,bt) SHOWIF isBatch(li) index
    PROPERTIES (bt)    SHOWIF isBatch(li) idBarcodeSku, nameSku, name
    PROPERTIES (li,bt) SHOWIF isBatch(li) quantityPageInventoryDetail, pricePageInventoryDetail, sumPageInventoryDetail
    FILTERS            quantityPageInventoryDetail(li,bt), //> 0
                       isParent(g, bt)

    EDIT ListInventory OBJECT li
;

DESIGN listInventory {
    main{
        preferredSize = (1024, 768);
        NEW header {
            type = CONTAINERH;
            NEW row {
                MOVE li.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameInventory(li));
                    MOVE PROPERTY(name(li));
                }
                MOVE li.inventoryCommittee {
                    type = CONTAINERH;
                }
                NEW createContainer {
                    type = CONTAINERH;
                    MOVE li.documentPrm {
                        columns = 2;
                    }
                    NEW create {
                        caption = 'Создание';   
                        MOVE PROPERTY(createPage(li));
                    }
                }
            }
            MOVE li.documentSum {
                columns = 1;
                PROPERTY(countPageInventory(li)) {
                    caption = 'Количество страниц';
                }
            }
        }
        NEW wor {
            fill = 1;
            type = SPLITH;
            MOVE pl.box;
            NEW case1 {
                fill = 3;
                type = SPLITH;
                MOVE skuTree.tree.box {
                    caption = 'Группы';
                 fill = 1;
                }
                NEW detailPageBox {
                    fill = 2;
                    type = TABBED; 
                    MOVE dp.box {
                        caption = 'Строки';
                    }
                    MOVE i.box {
                        caption = 'Опись-товар';
                    }
                    MOVE bt.box {
                        caption = 'Опись-партия';
                    }
                }
            }
        }
        MOVE functions.box;
    }
}

addListInventory 'Добавить'(Stock stock, Inventory inventory) = ACTION NEWSESSION {
    FOR ADDOBJ g = ListInventory DO {
        stock(g) <- stock;
        inventory(g) <- inventory;
        FORM listInventory OBJECTS li = g MANAGESESSION DOCKEDMODAL NOCANCEL;
    }
} TOOLBAR IMAGE 'add.png';

changeAddDetailInputIdSku(VARSTRING[100] idSku, PageInventory page) = ACTION {
    IF sku(idSku) THEN {  
        FOR ADDOBJ  d = PageInventoryDetail DO {
            pageInventory(d) <- page;   
            sku(d) <- sku(idSku);
            FOCUS listInventory.quantityGrid;
            SEEK listInventory.dp d;
        }        
    } ELSE {
        MESSAGE 'Код товара не найден.';
    }
} 
changeAddDetailInput(PageInventory page) = ACTION {
    REQUEST STRING[20] INPUT;
    EXEC changeAddDetailInputIdSku(requestedString(), page);
};
addDetailInput 'Код товара:' (page) = DATA LOCAL STRING[20] (PageInventory) TOOLBAR EDITKEY 'F5' 
                                                                        ON CHANGE changeAddDetailInput(page) PREFCHARWIDTH 10;  
                                                                     
changeAddDetailInputBarcode(STRING[15] barcode, PageInventory page) = ACTION {
    IF skuBarcode(barcode, date(listInventory(page))) THEN {  
        FOR ADDOBJ  d = PageInventoryDetail DO {
            pageInventory(d) <- page;   
            sku(d) <- skuBarcode(barcode, date(listInventory(page)));
            FOCUS listInventory.quantityGrid;
            SEEK listInventory.dp d;
        }        
    } ELSE {
        MESSAGE 'Штриход товара не найден.';
    }
} 
changeAddDetailInputBarcode(PageInventory page) = ACTION {
    REQUEST STRING[15] INPUT;
    EXEC changeAddDetailInputBarcode(requestedString(), page);
};
addDetailInputBarcode 'Штрихкод товара:' (page) = DATA LOCAL STRING[15] (PageInventory) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                        ON CHANGE changeAddDetailInputBarcode(page) PREFCHARWIDTH 15;

EXTEND FORM listInventory
    PROPERTIES (pl) TODRAW dp addDetailInputBarcode, addDetailInput  
;




// --------------------------------------------- Формы инвентаризаций ------------------------------------- //

dumb (PageInventory p) = ' ' IF p IS PageInventory;


sumPageInventoryDetail 'Сумма по описям' (collationSheet, group) = GROUP SUM sumPageInventoryDetail(CollationSheet cs,Sku sku) IF isParent(SkuGroup group, sku) AND include(cs, sku)
    BY cs, group PERSISTENT;
sumBalance 'Сумма по описям' (collationSheet, group) = GROUP SUM sumBalance(CollationSheet cs,Sku sku) IF isParent(SkuGroup group, sku) AND include(cs, sku)
    BY cs, group PERSISTENT;    
sumShortage 'Сумма по описям' (collationSheet, group) = GROUP SUM sumShortage(CollationSheet cs,Sku sku) IF isParent(SkuGroup group, sku) AND include(cs, sku)
    BY cs, group PERSISTENT;    
    
sumPageInventoryDetailBatches  (collationSheet, group) = GROUP SUM sumPageInventoryDetail(CollationSheet cs,Batch b) IF isParent(SkuGroup group, b) AND include(cs,b)
    BY cs, group PERSISTENT;
sumBalanceBatches  (collationSheet, group) = GROUP SUM sumBalance(CollationSheet cs,Batch b) IF isParent(SkuGroup group, b) AND include(cs,b)
    BY cs, group PERSISTENT;
sumShortageBatches  (collationSheet, group) = GROUP SUM sumShortage(CollationSheet cs,Batch b) IF isParent(SkuGroup group, b) AND include(cs,b)
    BY cs, group PERSISTENT;
overSumPageInventoryDetail 'Сумма по описям' = IF isBatch(CollationSheet cs) THEN sumPageInventoryDetailBatches(cs,SkuGroup g) ELSE sumPageInventoryDetail(cs,g);
overSumBalance 'Сумма по остаткам' = IF isBatch(CollationSheet cs) THEN sumBalanceBatches(cs,SkuGroup g) ELSE sumBalance(cs,g);
overSumShortage 'Сумма недостачи / излишка' = IF isBatch(CollationSheet cs) THEN sumShortageBatches(cs,SkuGroup g) ELSE sumShortage(cs,g);

saved 'Сохранена' (Inventory i) = PREV(i IS Inventory);

backgroundQuantity = ABSTRACT CASE COLOR (CollationSheet, Sku);

FORM inventory 'Инвентаризация'
    OBJECTS          in=Inventory FIXED PANEL
    PROPERTIES (in)  isBatch, isPrice, isShortageStockDocument, nameNumerator, number, series,
                     name, nameTypeOfAddition, nameIncludeSkuGroups SHOWIF isPartly(in) ON CHANGE changeSkuGroups(in), date, time,
                     note, nameStock ON CHANGE dialogStock(in), isPartly SHOWIF isRemains(in),
                     recalculatePrice, recalculateBalance,
                     timeFrom, timeTo, nameHeadMan,
                     nameCommittee, nameChairmanCommittee, nameEmployee, skipStockDocumentLedger, skipSkuLedger

    TREE treeStock ds=Stock, li=ListInventory, pl=PageInventory
    PROPERTIES       READONLY name(ds),  name(li), name(pl)
    FILTERS                   include(ds, in),
                              stock(li) == ds,
                              inventory(li) == in,
                              listInventory(pl) == li
    FILTERGROUP inactiveStock FILTER 'Активный' active(ds) 'ctrl F10' DEFAULT
    PROPERTIES(ds, in) READONLY countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail
    PROPERTIES(ds, in) addListInventory SHOWIF saved(in)

    PROPERTIES(li)   READONLY countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail, isPosted

    PROPERTIES(li)   editLI = EDITFORM FORCE PANEL SHOWIF saved(in), deleteli=DELETE FORCE PANEL TOOLBAR SHOWIF saved(in),
                     post FORCE PANEL SHOWIF saved(in), unpost FORCE PANEL SHOWIF isPosted(li)

    PROPERTIES(pl)   READONLY countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail, dumb

    OBJECTS          dp=PageInventoryDetail FIXED GRID
    PROPERTIES (dp)  READONLY index, nameSkuTypeSku, idSku SHOWIF showIDs(), idBarcodeSku, nameSku, nameBatch  SHOWIF isBatch(li),
                              quantity, price, sum
    FILTERS                   in(in, ds, li, pl, dp)

    OBJECTS         it=Sku FIXED GRID
    PROPERTIES (li,it) READONLY index
    PROPERTIES (it)    READONLY id SHOWIF showIDs(), idBarcode, itNameSku = name
    PROPERTIES (li,it) READONLY quantityPageInventoryDetail, pricePageInventoryDetail SHOWIF isSku(li),
                       sumPageInventoryDetail SHOWIF isSku(li)
    FILTERS            quantityPageInventoryDetail(li,it)
    ORDER BY           itNameSku

    OBJECTS         bt=Batch FIXED GRID
    PROPERTIES (li,bt) READONLY SHOWIF isBatch(li) index
    PROPERTIES (bt)    READONLY SHOWIF isBatch(li) idBarcodeSku, nameSku, name
    PROPERTIES (li,bt) READONLY SHOWIF isBatch(li) quantityPageInventoryDetail, pricePageInventoryDetail, sumPageInventoryDetail
    FILTERS            quantityPageInventoryDetail(li,bt)

    OBJECTS          cs=CollationSheet
    PROPERTIES (cs)              name, nameTypeOfAddition, nameStock, numberDisposal,
                                 quantityPageInventoryDetail, quantityBalance, quantityShortage,
                                 sumPageInventoryDetail, sumBalance, sumItemAccountB SHOWIF showAccountSums(cs) ON SHORTCUT recalculateSumAccountB(cs), 
                                 sumContainerAccountB SHOWIF showAccountSums(cs), 
                                 sumShortage, sumItemPageInventoryDetailCollationSheetGrid = sumItemPageInventoryDetail, 
                                 sumItemShortageCollationSheetGrid = sumItemShortage, 
                                 sumContainerPageInventoryDetailCollationSheetGrid = sumContainerPageInventoryDetail, 
                                 sumContainerShortageCollationSheetGrid = sumContainerShortage,
                                 countListInventory, countPageInventory
    PROPERTIES (cs)              dialogSku, prevDate, recalculatePrice, deletecs=DELETE FORCE PANEL TOOLBAR
    PROPERTIES (cs)  FORCE PANEL sumItemPageInventoryDetail, sumContainerPageInventoryDetail,
                                 sumItemBalance, sumContainerBalance,
                                 sumItemShortage, sumContainerShortage
    FILTERS                      inventory(cs) == in


    TREE treeGroup g=SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g), overSumPageInventoryDetail(cs,g), overSumBalance(cs,g), overSumShortage(cs,g)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS          i=Sku FIXED GRID
    PROPERTIES(i) READONLY                      idBarcode, iNameSku = name, id
    PROPERTIES(cs, i)                           quantityPageInventoryDetail ON CHANGE overChangeQuantityPageInventoryDetail(cs,i) BACKGROUND backgroundQuantity(cs,i), quantityBalance, quantityShortage
    PROPERTIES(cs, i) SHOWIF isSku(in) pricePageInventoryDetail BACKGROUND differentPrice(cs, i),
                                                priceBalance BACKGROUND differentPrice(cs, i)
    PROPERTIES(cs, i) SHOWIF isSku(in) sumPageInventoryDetail, sumBalance, sumShortage
    PROPERTIES(i) READONLY                      nameSkuGroup1, nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameSkuGroup5 
    FILTERS                                     include(cs, i) OR overInclude(cs,i),
                                                isParent(g, i)
    FILTERGROUP notEqualsPriceSkuFilters
            FILTER 'Товар с разными ценами' differentPrice(cs, i) 'F10'
    ORDER BY                                    iNameSku

    OBJECTS         b=Batch FIXED GRID
    PROPERTIES(b) READONLY SHOWIF isBatch(cs) idBarcodeSku, nameSku, name
    PROPERTIES(cs,b) SHOWIF isBatch(cs)       quantityPageInventoryDetail, quantityBalance,
                                                            quantityShortage
    PROPERTIES(cs,b) SHOWIF isBatch(cs)       pricePageInventoryDetail BACKGROUND differentPrice(cs, b),
                                                            priceBalance BACKGROUND differentPrice(cs, b)
    PROPERTIES(cs,b) SHOWIF isBatch(cs)       sumPageInventoryDetail, sumBalance, sumShortage
    FILTERS                                                 include(cs, b),
                                                            isParent(g, b)
    FILTERGROUP notEqualsPriceBatchFilters
            FILTER 'Партии с разными ценами' differentPrice(cs, b) 'F9'
    FILTERGROUP notEqualsPriceBatchFilters2
            FILTER 'Партии с остатками' quantityPageInventoryDetail(cs,b) OR quantityBalance(cs,b) OR sumBalance(cs,b) 'F8' DEFAULT

    EDIT Inventory OBJECT in
;

DESIGN inventory {

    NEW header.box {
        MOVE in.documentHeader {
            type = CONTAINERH;
            MOVE PROPERTY(nameStock(in));
            MOVE PROPERTY(nameNumerator(in));
            MOVE PROPERTY(number(in));
            MOVE PROPERTY(series(in));
            MOVE PROPERTY(date(in));
            MOVE PROPERTY(time(in));
        }

        NEW header {
            type = CONTAINERH;
            NEW headerColumn1 {
                MOVE in.documentPrm {
                    type = COLUMNS;
                    columns = 2;
                    MOVE PROPERTY(nameTypeOfAddition(in));                    
                    MOVE PROPERTY(name(in));
                    MOVE PROPERTY(isBatch(in));
                    MOVE PROPERTY(isPrice(in));
                    MOVE PROPERTY(isPartly(in));
                    MOVE PROPERTY(nameIncludeSkuGroups(in));
                    MOVE PROPERTY(note(in));
                }
                MOVE in.inventoryCommittee {
                    type = CONTAINERH;
                }

                NEW row4 {
                    type = CONTAINERH;
                    NEW balance {
                        caption = 'Снятие остатков';
                        type = CONTAINERH;
                        MOVE PROPERTY(timeFrom(in));
                        MOVE PROPERTY(timeTo(in));
                    }
                    NEW management {
                        caption = 'Руководство';
                        MOVE PROPERTY(nameHeadMan(in));
                    }
                }
            }
            NEW actions {
                MOVE in.inventoryAction {
                    columns = 1;
                }
            }
        }
    }

    NEW secondCase {
        fill = 1;
        type = TABBED;
        NEW z.box {
            caption = 'Описи';
            type = SPLITH;
            MOVE treeStock.tree.box {
                PROPERTY(isPosted(li)) {
                        preferredCharWidth = 15;
                }
                PROPERTY (dumb(pl)) {
                    caption = 'Статус';
                    minimumCharWidth = 15;
                }
                PROPERTY (post(li)) {
                    caption = 'Закрыть';
                }
                PROPERTY (unpost(li)) {
                    caption = 'Открыть';
                }
                PROPERTY (editLI) {
                    caption = 'Редактировать';
                }
            }
            NEW case1  {
                fill = 1;
                type = TABBED;
                MOVE dp.box;
                MOVE it.box {
                    caption = 'Опись-товар';
                }
                MOVE bt.box {
                    caption = 'Опись-партия';
                }
            }
        }

        NEW x.box {
            caption = 'Сличительные ведомости';
            NEW pop1 {
                type = CONTAINERH;
                fill = 1;
                MOVE cs.box {
                    fill = 1;
                    preferredSize = ( -1, 0);
                }
                MOVE cs.panel.props {
                    type = COLUMNS;
                    columns = 1;
                    caption = 'Суммы товар/тара';
                }
            }
            NEW wor1 {
                fill = 3;
                type = SPLITH;
                MOVE treeGroup.tree.box {
                    caption = 'Товарные группы';
                }
                NEW wor11 {
                    fill = 2;
                    type = TABBED;
                    MOVE i.box;
                    MOVE b.box;
                }
            }
        }
    }

    MOVE functions.box;
}

edit 'Редактировать' (InInventoryBatchDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d)  MANAGESESSION DOCKEDMODAL;
}
edit(InInventoryBatchDetail d) += ACTION edit(d);

edit 'Редактировать' (InInventorySkuDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d)  MANAGESESSION DOCKEDMODAL;
}
edit(InInventorySkuDetail d) += ACTION edit(d);

edit 'Редактировать' (OutInventoryBatchDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d)  MANAGESESSION DOCKEDMODAL;
}
edit(OutInventoryBatchDetail d) += ACTION edit(d);

edit 'Редактировать' (OutInventorySkuDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d)  MANAGESESSION DOCKEDMODAL;
}
edit(OutInventorySkuDetail d) += ACTION edit(d);

show 'Просмотреть' (InInventoryBatchDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d)  DOCKEDMODAL READONLY ;
}
show(InInventoryBatchDetail d) += ACTION show(d);

show 'Просмотреть' (InInventorySkuDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d)  DOCKEDMODAL READONLY;
}
show(InInventorySkuDetail d) += ACTION show(d);

show 'Просмотреть' (OutInventoryBatchDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d)  DOCKEDMODAL READONLY;
}
show(OutInventoryBatchDetail d) += ACTION show(d);

show 'Просмотреть' (OutInventorySkuDetail d) = ACTION NEWSESSION {
    FORM inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d)  DOCKEDMODAL READONLY;
}
show(OutInventorySkuDetail d) += ACTION show(d);


edit 'Редактировать' = ACTION EDITFORM Inventory;

edit(CollationSheet l) += ACTION edit(inventory(l));

@extendFormFilterStockAccess(ts, dialogStockInventory);

accessCompanyStockCurrentUser (in) = GROUP SUM 1 IF accessCompany(currentUser(), Stock ts) AND include(ts,Inventory in) BY in;

overShowEdit = ABSTRACT BOOLEAN (Inventory);
overShowDelete = ABSTRACT BOOLEAN (Inventory);
skipShowEdit = ABSTRACT BOOLEAN (Inventory); 

overPreventClose = ABSTRACT BOOLEAN (Inventory);
overPreventOpen = ABSTRACT BOOLEAN (Inventory);
showClose (Inventory i) = isOpened(i) AND NOT overPreventClose(i);   
showOpen (Inventory i) = isClosed(i) AND NOT overPreventOpen(i);   


FORM inventories 'Инвентаризации'
    OBJECTS in=Inventory LAST
    PROPERTIES(in) READONLY             isClosed FORCE GRID, isPosted FORCE GRID, isBatch,  number, series, date, time,
                                        nameStock, name, note, skipStockDocumentLedger, skipSkuLedger, isShortageStockDocument
    PROPERTIES(in) FORCE PANEL READONLY createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer
    
    PROPERTIES(in)                      ADDFORM, edit SHOWIF overShowEdit(in),// SHOWIF isDraftInventory(in), 
                                        deletein=DELETE FORCE PANEL TOOLBAR SHOWIF overShowDelete(in),
                                        post SHOWIF isDraft(in), unpost SHOWIF isPosted(in)
    FILTERGROUP open FILTER 'Открыт' isOpened(in) 'F6' DEFAULT
    
    PROPERTIES (in) close SHOWIF showClose(in), open SHOWIF showOpen(in)

    OBJECTS il=InventorySkuDetail FIXED GRID
    PROPERTIES(il) READONLY SHOWIF isSku(in) nameStock, idBarcode, nameSku, quantity, sum
    FILTERS                                           inventory(il) == in
    ORDER BY                                          nameStock(il), nameSku(il)

    OBJECTS ib=InventoryBatchDetail  FIXED GRID
    PROPERTIES(ib) READONLY SHOWIF isBatch(in) nameStock, idBarcode, nameSku,
                                                        nameBatch, quantity, sum
    FILTERS                                             inventory(ib) == in

    OBJECTS li=ListInventory
    PROPERTIES(li) READONLY name, nameStock, countIndex SHOWIF isSku(li), countIndexBatch SHOWIF isBatch(li),
                            quantityPageInventoryDetail, sumPageInventoryDetail
    FILTERS                 inventory(li) == in
    ORDER BY                nameStock(li)

    OBJECTS         i=Sku FIXED GRID
    PROPERTIES(li,i) READONLY index
    PROPERTIES(i)    READONLY idBarcode, name
    PROPERTIES(li,i) READONLY quantityPageInventoryDetail,
                              pricePageInventoryDetail SHOWIF isSku(li),
                              sumPageInventoryDetail SHOWIF isSku(li)
    FILTERS                   quantityPageInventoryDetail(li,i)
    ORDER BY                  index(li,i)

    OBJECTS         b=Batch FIXED GRID
    PROPERTIES(li,b) READONLY SHOWIF isBatch(li) index
    PROPERTIES(b)    READONLY SHOWIF isBatch(li) idBarcodeSku, nameSku, name
    PROPERTIES(li,b) READONLY SHOWIF isBatch(li) quantityPageInventoryDetail, pricePageInventoryDetail, sumPageInventoryDetail
    FILTERS quantityPageInventoryDetail(li,b)    

    OBJECTS         cs=CollationSheet
    PROPERTIES(cs)  READONLY             name, nameTypeOfAddition, nameStock,
                                         quantityPageInventoryDetail, quantityBalance, quantityShortage,
                                         sumPageInventoryDetail, sumBalance, sumShortage
    PROPERTIES(cs)  FORCE PANEL READONLY sumItemPageInventoryDetail, sumContainerPageInventoryDetail,
                                         sumItemBalance, sumContainerBalance,
                                         sumItemShortage, sumContainerShortage,
                                         sumItemAccountB SHOWIF showAccountSums(cs), sumContainerAccountB SHOWIF showAccountSums(cs)
    FILTERS                              inventory(cs) == in
    ORDER BY                             nameStock(cs)

    OBJECTS          it=Sku FIXED GRID
    PROPERTIES(it) READONLY                                   nASku=name, idBarcode
    PROPERTIES(cs,it) READONLY                                quantityPageInventoryDetail, quantityBalance, quantityShortage
    PROPERTIES(cs,it) READONLY SHOWIF isSku(cs) pricePageInventoryDetail BACKGROUND differentPrice(cs, it),
                                                              priceBalance BACKGROUND differentPrice(cs, it)
    PROPERTIES(cs,it) READONLY SHOWIF isSku(cs) sumPageInventoryDetail, sumBalance, sumShortage
    FILTERS                                                   include(cs, it) OR overInclude(cs,it)
    ORDER BY                                                  nASku

    OBJECTS         bt=Batch FIXED GRID 
    PROPERTIES(bt)    READONLY SHOWIF isBatch(cs) nameSku, idBarcodeSku, name
    PROPERTIES(cs,bt) READONLY SHOWIF isBatch(cs) quantityPageInventoryDetail, quantityBalance, quantityShortage
    PROPERTIES(cs,bt) READONLY SHOWIF isBatch(cs) pricePageInventoryDetail BACKGROUND differentPrice(cs, bt),
                                                                priceBalance BACKGROUND differentPrice(cs, bt)
    PROPERTIES(cs,bt) READONLY SHOWIF isBatch(cs) sumPageInventoryDetail, sumBalance, sumShortage
    
    FILTERS include(cs, bt), 
            quantityPageInventoryDetail(cs,bt) OR quantityBalance(cs,bt) OR sumBalance(cs, bt)            
            
    FILTERS accessCompanyStockCurrentUser(in) OR NOT countStocks(in)
;

DESIGN inventories {
    NEW topContainer{
        fill = 1;
        type = SPLITV;

        MOVE in.box;

        NEW wor {
            fill = 2;
            type = TABBED;

            NEW wor1 {
                caption = 'Товары';
                MOVE il.box {
                    caption = 'Товары с недостачей (излишком)';
                }
            }
            NEW wor2 {
                caption = 'Партии';
                MOVE ib.box {
                    caption = 'Партии с недостачей (излишком)';
                }
            }
            NEW wor3 {
                caption = 'Описи';
                type = SPLITH;
                MOVE li.box;
                NEW wor31 {
                    fill = 2;
                    type = TABBED;
                    MOVE i.box;
                    MOVE b.box;
                }
            }
            NEW wor4 {
                caption = 'Ведомости';
                type = SPLITH;
                MOVE cs.box;
                NEW wor41 {
                    fill = 1;
                    type = TABBED;
                    MOVE it.box;
                    MOVE bt.box;
                }
            }

            NEW documentHistory {
                type = CONTAINERV;
                caption = 'История';
                MOVE in.created;
                MOVE in.posted;
            }
        }
    }

    MOVE functions.box;
}

//------------------- Операция -----------------------//

operation = DATA Operation (Inventory);
nameOperation 'Операция' = name(operation(Inventory i));
idOperation 'ID операции' = id(operation(Inventory i)) MINCHARWIDTH 30 PREFCHARWIDTH 40;

operation =  operation(inventory(CollationSheet collationSheet));
nameOperation 'Операция' (CollationSheet cs) = name(operation(cs));
idOperation 'ID операции' (CollationSheet cs) = id(operation(cs)) MINCHARWIDTH 30 PREFCHARWIDTH 40;

@deriveDocumentOperationProperty(Inventory, skipStockDocumentLedger);
@deriveDocumentOperationProperty(Inventory, skipSkuLedger);
@deriveDocumentOperationProperty(Inventory, isShortageStockDocument);

@defineDocumentOperationConstraint(inventory, 'инвентаризация', Inventory);
@extendFormFilterRoleAccess(inventory, in, inventories);

EXTEND FORM inventory
    PROPERTIES(in) nameOperation
;

DESIGN inventory{
    in.documentHeader {
        type = CONTAINERV;
        NEW first {
            type = CONTAINERH;
            MOVE PROPERTY(nameOperation(in));  
            MOVE PROPERTY(date(in));
            MOVE PROPERTY(time(in));                              
        }
        NEW second {
            type = CONTAINERH;
            MOVE PROPERTY(nameNumerator(in));
            MOVE PROPERTY(number(in));
            MOVE PROPERTY(series(in)); 
            MOVE PROPERTY(nameStock(in));               
        }        
    }
}
EXTEND FORM inventories
    PROPERTIES(in) READONLY nameOperation BEFORE name(in)
;

@defineOperationProperty(isBatch, 'По партиям', commonContainer);

@deriveDocumentOperationProperty(inventory, isBatch) ;

typeOfAddition  = DATA TypeOfAddition (Operation);
nameTypeOfAddition 'Тип инвентаризации' (Operation o) = staticCaption(typeOfAddition(o));

@deriveDocumentOperationProperty(inventory, typeOfAddition) ;

@defineOperationProperty(isPrice, 'Сумму остатка считать по цене', commonContainer);
@deriveDocumentOperationProperty(inventory, isPrice) ;
@defineOperationProperty(isPartly, 'Частичная', commonContainer);
@deriveDocumentOperationProperty(inventory, isPartly) ;
@defineOperationProperty(preventChangesDocument, 'Запрет на изменение документа другим пользователем', showContainer);

EXTEND FORM operation
    PROPERTIES(o) nameTypeOfAddition
;
DESIGN operation {
    commonContainer {
        MOVE PROPERTY(nameTypeOfAddition(o));

    }
}

EXTEND FORM dialogStockInventory
    FILTERS in(ts,operation(in)) OR  ts IS Stock AND NOT operation(in)
;

CONSTRAINT include(Stock stock,Inventory inventory) AND operation(inventory) AND NOT 
    in(stock,operation(inventory))
        MESSAGE 'В инвентаризацию включены склады, которые не включены в операцию';


NAVIGATOR {
     inventoryNavigator {
         ADD inventories;
         ADD inventoryCommittees;
     }
}

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(inventory, UserInventory, preventChangesDocument, created);

overShowEdit (Inventory i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (Inventory i) += showEditDeleteUser(i) AND isOpened(i); 

overPreventClose (Inventory i) += preventCloseDocument(currentUser(), operation(i));

DESIGN options {
    pane {        
        NEW inventory {
            caption = 'Инвентаризация';            
        }
    }
}

@defineMovementSku(pageInventoryDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pageInventoryDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(pageInventoryDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(pageInventoryDetail, stock); //-- показываем по нажатию правой клавиши изменение цены товара

@defineBalancesBatch(pageInventoryDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pageInventoryDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

notCheckBatchDetail 'Не проверять наличие партий для строк описи' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) notCheckBatchDetail SHOWIF isBatch(o)
;
DESIGN operation {
    commonContainer {
        MOVE PROPERTY(notCheckBatchDetail(o)) AFTER PROPERTY (isBatch(o));
    }
}

CONSTRAINT isPosted(inventory(PageInventoryDetail d)) AND isBatch(inventory(d)) AND NOT notCheckBatchDetail(operation(inventory(d)))  AND NOT batch(d)
    MESSAGE 'В инвентаризации по партиям не должно быть строк описи без партий.';     

batchQuantity 'Расписано по партиям' = GROUP SUM quantityPageInventoryDetail(CollationSheet cs, Batch bt) BY cs, sku(bt);
showBatchQuantity (CollationSheet cs) = isBatch(cs) AND countNotBatchPageInventoryDetail(cs); 
backgroundQuantity(CollationSheet cs, Sku sk) += WHEN 
    isBatch(cs) AND countNotBatchPageInventoryDetail(cs) AND quantityPageInventoryDetail(cs, sk) AND NOT batchQuantity(cs,sk) == quantityPageInventoryDetail(cs,sk) THEN RGB(255,0,0);
EXTEND FORM inventory
    PROPERTIES (cs,i) batchQuantity READONLY SHOWIF showBatchQuantity(cs) 
;

overRecalculateBalance(Inventory in) += ACTION {
    FOR inventory(CollationSheet cs) == in DO {
        IF isBatch(cs) AND countNotBatchPageInventoryDetail(cs) THEN {
            
            IF isPartly(in) AND isRemains(in) THEN {
                partitionQuantity(cs, Batch bt) <- calcPartitionQuantity(cs,bt) WHERE include(inventory(cs), sku(bt)); 
            }ELSE {
                partitionQuantity(cs, Batch bt) <- calcPartitionQuantity(cs,bt); 
            }
            FOR quantityPageInventoryDetail(cs,Sku sk) AND NOT batchQuantity(cs,sk) == quantityPageInventoryDetail(cs,sk) DO {
                MESSAGE NO WAIT (CONCAT ' ', 'Для товара:', name(sk), '('+id(sk)+')', 'в количестве', quantityPageInventoryDetail(cs,sk)+' единиц', 'нет подходящих партий.');
            }            
        }
    }    
}