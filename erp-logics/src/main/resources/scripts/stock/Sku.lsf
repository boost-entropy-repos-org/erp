MODULE Sku;

REQUIRE Integration, Hierarchy, Stock, SystemEvents;

NAMESPACE Stock;

// ----------------------------------- Единицы измерения ------------------------------------------ //

CLASS UOM 'Единица измерения';
TABLE UOM (UOM);

@defineExternalizable(UOM, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[50](UOM) MINCHARWIDTH 7 PREFCHARWIDTH 14;
UOMName = GROUP AGGR UOM uom BY name(uom); 
shortName 'Краткое наименование' = DATA VARISTRING[100](UOM) MINCHARWIDTH 3 PREFCHARWIDTH 6;  ////

base = DATA UOM(UOM);
shortNameBase 'Базовая ед.изм.' (UOM UOM) = shortName(base(UOM)) IN base;
genitiveName 'Ед. изм. (родительный)' = DATA VARSTRING[20](UOM) IN base;
factor 'Коэффициент пересчета в баз.ед.' = DATA NUMERIC[14,3] (UOM) IN base;

split 'Дробный' = DATA BOOLEAN (UOM);
netWeight 'Вес нетто, кг' = DATA NUMERIC[11,5] (UOM);
grossWeight 'Вес брутто, кг' = DATA NUMERIC[11,5] (UOM);

FORM UOM 'Единица измерения'
    OBJECTS u=UOM FIXED PANEL
    PROPERTIES(u) name, id SHOWIF showIDs(), shortName, shortNameBase, genitiveName, factor, 
                  split, netWeight, grossWeight              
    EDIT UOM OBJECT u
;

FORM UOMs 'Единицы измерений'
    OBJECTS u=UOM
    PROPERTIES(u) READONLYIF isReadonly() name, id SHOWIF showIDs(), shortName, shortNameBase, genitiveName, factor,
                           split, netWeight, grossWeight
    ORDER BY name(u)                         
    PROPERTIES(u) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    DIALOG UOM OBJECT u
;
@extendFormEditable(UOMs);

// ----------------------------------- Абстрактная группа ------------------------------------------ //

CLASS ABSTRACT Group 'Классификатор SKU';
TABLE group(Group);

name 'Наименование' = ABSTRACT VARISTRING[250](Group) PERSISTENT INDEXED;
order 'Порядок' = ABSTRACT INTEGER (Group) PERSISTENT MINCHARWIDTH 2 PREFCHARWIDTH 2;
id 'Код' = ABSTRACT VARSTRING[100] (Group) IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 15;

TABLE groupGroup(Group, Group);
@defineHierarchyAbstract(group);

FORM groups 'Классификаторы SKU'
    OBJECTS g = Group
    PROPERTIES(g) READONLY name, id SHOWIF showIDs(), nameParent
    DIALOG Group OBJECT g
;

CLASS ABSTRACT GroupType 'Тип классификатора SKU';
name 'Наименование' = ABSTRACT VARISTRING[100](GroupType) MINCHARWIDTH 10 PREFCHARWIDTH 20;

FORM groupTypes 'Типы классификатора SKU'
    OBJECTS g = GroupType
    PROPERTIES(g) READONLY name
    DIALOG GroupType OBJECT g
;

CLASS SystemGroupType 'Системный тип классификатор SKU' : GroupType;
TABLE systemGroupType(SystemGroupType);

name(SystemGroupType type) += VARISTRING[100](staticCaption(type)) IF type IS SystemGroupType;

groupType = ABSTRACT GroupType (Group) PERSISTENT INDEXED;
nameGroupType 'Тип классификатора SKU' (Group group) = name(groupType(group));

TABLE groupTypeSku(GroupType, Sku);
TABLE sessionGroupTypeSku(Session, GroupType, Sku);
group = ABSTRACT CASE Group (GroupType, Sku) PERSISTENT INDEXED;
nameGroup 'Имя' (GroupType type, Sku sku) = name(group(type, sku));
canonicalNameGroup 'Каноническое имя' (GroupType type, Sku sku) = canonicalName(group(type, sku));

TABLE groupStock(Group, Stock);
TABLE groupSku(Group, Sku);
isParent(Group group, Sku sku) = isParent(group(groupType(group), sku), group) PERSISTENT INDEXED;

inactive 'Неактивная' = ABSTRACT BOOLEAN (Group) PERSISTENT;
active 'Активный' (Group group) = group IS Group AND NOT inactive(group);

// ----------------------------------- Custom Group ------------------------------------------ //

CLASS CustomGroup 'Дополнительный классификатор SKU' : Group;
TABLE customGroup (CustomGroup);


@defineExternalizable(customGroup, VARSTRING[100]);
id(CustomGroup group) += id(group) IF group IS CustomGroup;

name 'Наименование' = DATA VARISTRING[250](CustomGroup) PERSISTENT INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 40;

name(CustomGroup group) += name(group) IF group IS CustomGroup;

TABLE customGroupCustomGroup(CustomGroup, CustomGroup);
@defineHierarchy(customGroup);

parent (CustomGroup group) += parent(group);

CLASS CustomGroupType 'Тип дополнительного классификатора SKU' : GroupType;
TABLE customGroupType (CustomGroupType);

@defineExternalizable(customGroupType, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[50](CustomGroupType);

name(CustomGroupType type) += name(type) IF type IS CustomGroupType;

customGroupType = DATA CustomGroupType (CustomGroup) AUTOSET NOT NULL DELETE;
nameCustomGroupType 'Тип классификатора' (CustomGroup customGroup) = name(customGroupType(customGroup));

customGroupIdCustomGroup (id, idType) = GROUP AGGR CustomGroup customGroup BY id(customGroup), id(customGroupType(customGroup));

CONSTRAINT customGroupType(parent(CustomGroup group)) != customGroupType(group)
           CHECKED BY parent[CustomGroup] MESSAGE 'Родительский объект классификатора SKU имеет неправильный тип';

groupType (CustomGroup group) += customGroupType(group);

TABLE customGroupTypeSku(CustomGroupType, Sku);
customGroup = ABSTRACT CustomGroup (CustomGroupType, Sku) PERSISTENT INDEXED;
nameCustomGroup = name(customGroup(CustomGroupType type, Sku sku));

group(CustomGroupType type, Sku sku) += WHEN CLASS(customGroup(type, sku)) THEN customGroup(type, sku);

in 'Отм.' = DATA LOCAL BOOLEAN (CustomGroup);

FORM moveCustomGroup 'Дополнительные группы'
    OBJECTS t = CustomGroupType FIXED PANEL
    PROPERTIES(t) READONLY id, name

    TREE treeGroups g=CustomGroup PARENT parent
    PROPERTIES(g) READONLY id, name, canonicalName
    FILTERS customGroupType(g) == t
    ORDER BY canonicalName(g)
;

move 'Перенести отмеченные группы'(CustomGroupType customGroupType) = ACTION {

    FORM moveCustomGroup OBJECTS t = customGroupType ;
    IF formResult() == FormResult.ok THEN {
        ASSIGN parent(CustomGroup customGroup) <- chosenObject('g') WHERE in(customGroup);
        ASSIGN in(CustomGroup customGroup) <- NULL;
    }
}

FORM customGroupType 'Тип дополнительного классификатора SKU'
    OBJECTS t = CustomGroupType FIXED PANEL
    PROPERTIES(t) id, name
    EDIT CustomGroupType OBJECT t
;

FORM dialogCustomGroupType 'Тип дополнительной группы'
    OBJECTS t = CustomGroupType
    PROPERTIES(t) READONLY id, name
    DIALOG CustomGroupType OBJECT t
;

FORM customGroupTypes 'Типы дополнительных групп'
    OBJECTS t = CustomGroupType
    PROPERTIES(t) READONLY id, name
    PROPERTIES(t) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
;

FORM customGroup 'Дополнительная группа'
    OBJECTS g=CustomGroup FIXED PANEL
    PROPERTIES(g) nameCustomGroupType, id, name, nameParent
    EDIT CustomGroup OBJECT g
;

FORM customGroups 'Дополнительные группы'
    OBJECTS t = CustomGroupType FIXED PANEL
    PROPERTIES(t) SELECTOR name

    TREE treeGroups g=CustomGroup PARENT parent
    PROPERTIES in(g), move(t) TODRAW g FORCE PANEL TOOLBAR
    PROPERTIES(g) READONLY id, name, canonicalName
    PROPERTIES(g) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS customGroupType(g) == t
    ORDER BY canonicalName(g)

    DIALOG CustomGroup OBJECT g
;

DESIGN customGroups {
    PROPERTY(name(t)) {
        focusable = FALSE;
    }
}

// ----------------------------------- Sku Group ------------------------------------------ //

CLASS ABSTRACT SkuGroup 'Группа SKU' : Group;
TABLE skuGroup (SkuGroup);

name 'Наименование' = ABSTRACT VARISTRING[250](SkuGroup) PERSISTENT INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 40;
order 'Порядок' = ABSTRACT INTEGER (SkuGroup) MINCHARWIDTH 2 PREFCHARWIDTH 2;
id 'Код' = ABSTRACT VARSTRING[100] (SkuGroup) IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 15;

sort = OVERRIDE name(SkuGroup g), lpad(VARSTRING[250](order(g)), 20, '0');  

name(SkuGroup group) += name(group) IF group IS SkuGroup;
order(SkuGroup group) += order(group) IF group IS SkuGroup;
id(SkuGroup group) += id(group) IF group IS SkuGroup;

TABLE skuGroupSkuGroup(SkuGroup, SkuGroup);
@defineHierarchyAbstract(skuGroup);
@defineHierarchyFilter(SkuGroup, SkuGroup, name);

@defineHierarchyPlain(skuGroup);
nameSkuGroup1 'Категория' (SkuGroup child) = name(skuGroup1(child));    
nameSkuGroup2 'Направление' (SkuGroup child) = name(skuGroup2(child));    
nameSkuGroup3 'Группа' (SkuGroup child) = name(skuGroup3(child));    
nameSkuGroup4 'Подгруппа' (SkuGroup child) = name(skuGroup4(child));    
nameSkuGroup5 'Субгруппа' (SkuGroup child) = name(skuGroup5(child));    
   
    
EXTEND CLASS SystemGroupType { skuGroupType 'Основной' }

parent(SkuGroup skuGroup) += parent(skuGroup);

TABLE skuGroupLanguage(SkuGroup, Language);
name 'Наименование (иностр.)' = ABSTRACT VARSTRING[110] (SkuGroup, Language) PERSISTENT MINCHARWIDTH 40 PREFCHARWIDTH 80 INDEXED AGGPROP;

name 'Наименование (иностр.)' (SkuGroup skuGroup, Stock stock) = IF language(stock) THEN name(skuGroup, language(stock)) ELSE name(skuGroup);

// ----------------------------------- Sku Type ------------------------------------------ //

CLASS SkuType 'Тип SKU' {
    skuTypeItem 'Товар',
    skuTypeContainer 'Тара',
    skuTypeCharge 'Услуги'
}

FORM skuTypes 'Типы SKU'
    OBJECTS t = SkuType
    PROPERTIES(t) READONLY staticCaption
    DIALOG SkuType OBJECT t
;

DESIGN skuTypes {
    PROPERTY(staticCaption(t)) { caption = 'Тип SKU'; } 
}

TABLE skuType (SkuType);
isStock 'Складируемые' = ABSTRACT CASE BOOLEAN (SkuType) PERSISTENT;
isStock(SkuType t) += WHEN t == SkuType.skuTypeItem OR t == SkuType.skuTypeContainer THEN TRUE;

// ----------------------------------- Sku ------------------------------------------ //

CLASS ABSTRACT Sku 'SKU';
TABLE sku(Sku) FULL;
TABLE legalEntitySku(LegalEntity, Sku);
TABLE countrySku(Country, Sku);

@defineExternalizableAbstract(sku, VARSTRING[100]);

skuGroup (sku) = ABSTRACT SkuGroup (Sku) PERSISTENT INDEXED;
idSkuGroup 'Группа' (Sku sku)= id(skuGroup(sku));
nameSkuGroup 'Группа' (Sku sku)= name(skuGroup(sku));
canonicalNameSkuGroup 'Полное имя' = canonicalName(skuGroup(Sku sku));

orderSkuGroup 'Порядок' = order(skuGroup(Sku sku));

skuGroup1 'Классификация' (Sku sku) = skuGroup1(skuGroup(sku));
nameSkuGroup1 'Классификация' (Sku sku) = name(skuGroup1(sku));
 
skuGroup2 'Категория' (Sku sku) = skuGroup2(skuGroup(sku));
nameSkuGroup2 'Категория' (Sku sku) = name(skuGroup2(sku));

skuGroup3 'Направление' (Sku sku) = skuGroup3(skuGroup(sku));
nameSkuGroup3 'Направление' (Sku sku) = name(skuGroup3(sku));

skuGroup4 'Группа' (Sku sku) = skuGroup4(skuGroup(sku));
nameSkuGroup4 'Группа' (Sku sku) = name(skuGroup4(sku));

skuGroup5 'Подгруппа' (Sku sku) = skuGroup5(skuGroup(sku));
nameSkuGroup5 'Подгруппа' (Sku sku) = name(skuGroup5(sku));

skuGroup6 'Субгруппа' (Sku sku) = skuGroup6(skuGroup(sku));
nameSkuGroup6 'Субгруппа' (Sku sku) = name(skuGroup6(sku));

groupType(SkuGroup group) += SystemGroupType.skuGroupType IF group IS SkuGroup;
group(SystemGroupType type, Sku sku) += WHEN CLASS(skuGroup(sku)) AND type == SystemGroupType.skuGroupType THEN skuGroup(sku);

name 'Наименование' (sku) = ABSTRACT VARISTRING[255] (Sku) PERSISTENT MINCHARWIDTH 30 PREFCHARWIDTH 60 INDEXED AGGPROP IN base;

UOM (sku) = ABSTRACT UOM (Sku) PERSISTENT;
nameUOM 'Ед. изм.' (Sku sku) = name(UOM(sku)) IN base;
shortNameUOM 'Ед. изм.' (Sku sku) = shortName(UOM(sku)) IN base;

country = ABSTRACT Country (Sku) PERSISTENT;
nameCountry 'Страна' (Sku sku) = name(country(sku)) MINCHARWIDTH 15 PREFCHARWIDTH 15 IN base;
sidOrigin2Country 'Код 2 знака (ориг.)' (Sku sku) = sidOrigin2(country(sku));

TABLE skuGroupSku(SkuGroup, Sku);
isParent (SkuGroup skuGroup, Sku sku) = isParent(skuGroup(sku), skuGroup) PERSISTENT;

netWeight 'Вес нетто' = ABSTRACT NUMERIC[11,5] (Sku) PERSISTENT;
overNetWeight 'Вес нетто' (Sku sku) = OVERRIDE 1.0 IF sku IS Sku, netWeight(sku);
grossWeight 'Вес брутто' = ABSTRACT NUMERIC[11,5] (Sku) PERSISTENT;
overGrossWeight 'Вес брутто' (Sku sku) = OVERRIDE 1.0 IF sku IS Sku, grossWeight(sku);
volume 'Объем' = ABSTRACT NUMERIC[9,3] (Sku) PERSISTENT;
composition 'Состав' = ABSTRACT VARSTRING[255] (Sku) PERSISTENT;

skuType = ABSTRACT SkuType (Sku) PERSISTENT INDEXED;
nameSkuType 'Тип товара' (Sku s) = staticCaption(skuType(s)) MINCHARWIDTH 5 PREFCHARWIDTH 5;

isStock 'Складируемый' (Sku sku) = isStock(skuType(sku)) PERSISTENT;

isItem 'Товар' (Sku sku) = skuType(sku) == SkuType.skuTypeItem PERSISTENT;
isContainer 'Тара' (Sku sku) = skuType(sku) == SkuType.skuTypeContainer PERSISTENT;
isCharge 'Услуги' (Sku sku) = skuType(sku) == SkuType.skuTypeCharge PERSISTENT;
isNotCharge 'Не услуги' (Sku sku) = NOT isCharge(sku) AND sku IS Sku PERSISTENT;
isNotItem 'Не товар' (Sku sku) = NOT isItem(sku) AND sku IS Sku PERSISTENT;
isNotContainer 'Не тара' (Sku sku) = NOT isContainer(sku) AND sku IS Sku PERSISTENT;

split 'Дробный товар' = ABSTRACT BOOLEAN (Sku) PERSISTENT;
passScales 'Передавать на весы' =  ABSTRACT BOOLEAN (Sku) PERSISTENT;

expiryDays 'Срок годности в днях' = ABSTRACT INTEGER (Sku) PERSISTENT;
expiryMonth 'Срок годности в месяцах' = ABSTRACT INTEGER (Sku) PERSISTENT;

fixedPrice 'Товар с фиксированной ценой' =  ABSTRACT BOOLEAN (Sku) PERSISTENT;
inactive 'Неактивный' = ABSTRACT BOOLEAN (Sku) PERSISTENT;
active 'Активный' (Sku sku) = sku IS Sku AND NOT inactive(sku);
inactive 'Неактивная' = ABSTRACT BOOLEAN (SkuGroup) PERSISTENT;
active 'Активный' (SkuGroup group) = group IS SkuGroup AND NOT inactive(group);
inactive(SkuGroup group) += inactive(group);

replace = ACTION ABSTRACT LIST (Sku, Sku);
overReplace = ACTION ABSTRACT LIST (Sku, Sku);

countSku 'Кол-во непосредственных товаров в группе' (group, groupType) =
    GROUP SUM 1 IF group(GroupType groupType, Sku sku) == Group group
    BY group, groupType;

// ----------------------- Действия по изменению Sku ----------------------------------- //
disallowEditing 'Запретить редактирование' = ABSTRACT BOOLEAN (Sku);

edit 'Редактировать' = ACTION ABSTRACT LIST (Sku) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
addSku 'Добавить' = ACTION ABSTRACT LIST () IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

addedSku = DATA LOCAL Sku ();
copy 'Копировать' = ACTION ABSTRACT LIST (Sku) EDITKEY 'F5' TOOLBAR;

// ------------------------- Формы ------------------------------------ //

// Sku
FORM skus 'Sku'
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER BY order(sg), skuGroupName
     
    OBJECTS s = Sku
    PROPERTIES(s) READONLY id SHOWIF showIDs()
    PROPERTIES(s) READONLY name, shortNameUOM
    PROPERTIES() addSku TODRAW s
    PROPERTIES(s) edit, copy
    FILTERS isParent(sg, s),
            name(s)
    ORDER BY name(s)
    
    FILTERGROUP active
        FILTER 'Активные' active(s) 'F11' DEFAULT

    DIALOG Sku OBJECT s
;

DESIGN skus {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            MOVE skuTree.tree.box;

            MOVE s.box {
                fill = 4;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE functions.box;
    }
}

NAVIGATOR {
    masterData {
        NEW skuNavigator 'Товар' AFTER legalEntities {
            ADD UOMs;
            ADD customGroupTypes;
            ADD customGroups;
        }
    }
}

// ---------------------------------------------- Макросы для документов ------------------------------------------------- //

META defineGroupDefaultValue(property, caption, type, typeIdentity, groupClass)
    data###property###groupClass caption = DATA type (###groupClass);
    data###typeIdentity###property###groupClass caption (g) = typeIdentity(data###property###groupClass(g));
    
    levelParent###property###groupClass (g) = GROUP MIN level###groupClass###groupClass(g, parent) IF data###property###groupClass(parent)
                                                                  BY g PERSISTENT;    
    nearestParent###property##groupClass (g) = groupClass###groupClassLevel(g, levelParent###property###groupClass(g));
    nearest###property###groupClass (g) = data###property###groupClass(nearestParent###property###groupClass (g));
    property###groupClass (g) =
        OVERRIDE nearest###property###groupClass (g), 
                 data###property###groupClass(g) PERSISTENT;    
    
    typeIdentity##groupClass caption (g) = typeIdentity(property##groupClass(g));    
END 

META defineGroupDefaultValue(property, caption, type, groupClass)
    data###property caption = DATA type (###groupClass);
    
    levelParent###property (g) = GROUP MIN level(###groupClass child, ###groupClass parent) IF data###property(parent)
                                                                  BY child PERSISTENT;    
    nearestParent###property (###groupClass g) = groupClass(g, levelParent###property(g));
    nearest###property (###groupClass g) = data###property(nearestParent###property (g));
    property caption (###groupClass g) =
        OVERRIDE nearest###property (g), 
                 data###property(g) PERSISTENT;        
    
END 

META defineDefaultValueCustom(property, caption, type, object, class)
    data###property caption = DATA type (###object, ###class);
    
    levelParent###property (object, group) = GROUP MIN level(###class group, ###class parent) IF data###property(###object object, parent)
                                                                  BY object, group PERSISTENT;    
    nearestParent###property (###object object, ###class group) = group(group, levelParent###property(object, group));
    nearest###property (###object object, ###class group) = data###property(object, nearestParent###property (object, group));
    
    property caption (###object object, ###class group) =
        OVERRIDE nearest###property (object, group), 
                 data###property(object, group) PERSISTENT;
                 
    quantityChild###property (object, group) = GROUP SUM 1 IF 
        data###property(###object object, ###class child###class) AND isParent(child###class, ###class group) 
            BY object, group PERSISTENT;
    quantityParent###property (object, group) = GROUP SUM 1 IF 
        data###property(###object object, ###class parent###class) AND isParent(###class group, parent###class) 
            BY object, group PERSISTENT;                 

    backgroundWith###property (###object object, ###class group) =
        IF data###property(object, group) THEN
            RGB(127,199,255) //IF group IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChild###property (object, group) != descendantNumber(group)
                             AND NOT quantityParent###property (object, group);
                 
                 
END 

// Sku
META defineDocumentDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    @defineDocumentDetailSkuCustomPrefixInner(detail, skuClass, ###skuClass, prefix, caption);
END

META defineDocumentDetailSkuCustomPrefixInner (detail, skuClass, skuClassUpper, prefix, caption)
    prefix###skuClass = DATA skuClassUpper (###detail) INDEXED;
    prefix###id###skuClass 'Код'###caption (###detail detail) = id(prefix###skuClass(detail)) IN recognize;
    prefix###name###skuClass 'Наименование'###caption (###detail detail) = name(prefix###skuClass(detail)) IN recognize  MINCHARWIDTH 40 PREFCHARWIDTH 80;
    prefix###shortNameUOM###skuClass 'Ед. изм.'###caption = shortNameUOM(prefix###skuClass(###detail detail)) IN recognize;
    prefix###idBarcode###skuClass 'Штрихкод'###caption (###detail detail) = idBarcode(prefix###skuClass(detail)) IN recognize;
    prefix###nameCountry###skuClass 'Страна'###caption (###detail detail) = nameCountry(prefix###skuClass(detail));
    replace(###skuClass s, ###skuClass d) += ACTION {ASSIGN prefix###skuClass(###detail detail) <- d WHERE prefix###skuClass(detail) == s;}
END

META defineDocumentAbstractDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefixInner(detail, skuClass, ###skuClass, prefix, caption);
END

META defineDocumentAbstractDetailSkuCustomPrefixInner (detail, skuClass, skuClassUpper, prefix, caption)
    skuClass = ABSTRACT skuClassUpper (###detail) PERSISTENT;
    INDEX skuClass(###detail d), dateTime(d);
    id###skuClass 'Код'###caption (###detail detail) = id(skuClass(detail));
    name###skuClass 'Наименование'###caption (###detail detail) = name(skuClass(detail)) IN recognize;
    shortNameUOM###skuClass 'Ед. изм.'###caption = shortNameUOM(skuClass(###detail detail)) IN base;
    idBarcode###skuClass 'Штрихкод'###caption (###detail detail) = idBarcode(skuClass(detail)) IN recognize;
    allBarcodes###skuClass 'Все штрих-коды'###caption (###detail detail) = allBarcodes(skuClass(detail));
    nameCountry###skuClass 'Страна'###caption (###detail detail) = nameCountry(skuClass(detail));
END
META defineDocumentInterfaceDetailSkuCustomPrefix (detail, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefix(detail, skuClass, prefix, caption);
    @defineDocumentDetailSkuCustomPrefix(user###detail, skuClass, prefix, caption);
    skuClass(User###detail detail) += skuClass(detail);
END

META defineDocumentDetailSkuCustom (detail, skuClass)
    @defineDocumentDetailSkuCustomPrefix(detail, skuClass, ,);
END
META defineDocumentAbstractDetailSkuCustom (detail, skuClass)
    @defineDocumentAbstractDetailSkuCustomPrefix(detail, skuClass, ,);
END
META defineDocumentInterfaceDetailSkuCustom (detail, skuClass)
    @defineDocumentInterfaceDetailSkuCustomPrefix(detail, skuClass, ,);
END

META defineDocumentDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentDetailSkuCustomPrefix(object##Detail, skuClass, prefix, caption);
END
META defineDocumentAbstractDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentAbstractDetailSkuCustomPrefix(object###Detail, skuClass, prefix, caption);
END
META defineDocumentInterfaceDetailSkuPrefix (object, skuClass, prefix, caption)
    @defineDocumentInterfaceDetailSkuCustomPrefix(object###Detail, skuClass, prefix, caption);
END

META defineDocumentDetailSku (object, skuClass)
    @defineDocumentDetailSkuPrefix(object, skuClass, ,);
END
META defineDocumentAbstractDetailSku (object, skuClass)
    @defineDocumentAbstractDetailSkuPrefix(object, skuClass, ,);
END
META defineDocumentInterfaceDetailSku (object, skuClass)
    @defineDocumentInterfaceDetailSkuPrefix(object, skuClass, ,);
END

// -- Net Weight
META defineDocumentDetailNetWeightCustomPrefix (detail, skuProp, prefix, caption)
    prefix###netWeight###detail 'Вес нетто'###caption (detail) = quantity###detail(detail) * netWeightSku(skuProp###detail(detail)) PERSISTENT;
END
META defineDocumentInterfaceDetailNetWeightCustomPrefix (detail, skuProp, prefix, caption)
    @defineDocumentDetailNetWeightCustomPrefix(detail, skuProp, prefix, caption);
    @defineDocumentDetailNetWeightCustomPrefix (user###detail, skuProp, prefix, caption);
    prefix###netWeight###detail (detail) += prefix###netWeight###user###detail(detail);
END

META defineDocumentDetailNetWeightCustom (detail, skuProp)
    @defineDocumentDetailNetWeightCustomPrefix(detail, skuProp, , );
END
META defineDocumentInterfaceDetailNetWeightCustom (detail, skuProp)
    @defineDocumentInterfaceDetailNetWeightCustomPrefix(detail, skuProp, , );
END

META defineDocumentDetailNetWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentDetailNetWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END
META defineDocumentInterfaceDetailNetWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentInterfaceDetailNetWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END

META defineDocumentDetailNetWeight (object, skuProp)
    @defineDocumentDetailNetWeightPrefix(object, skuProp, , );
END
META defineDocumentInterfaceDetailNetWeight (object, skuProp)
    @defineDocumentInterfaceDetailNetWeightPrefix(object, skuProp, , );
END

META defineDocumentHeaderNetWeightCustomPrefix (object, detail, prefix, caption)
    prefix##NetWeight###detail 'Вес нетто (всего)'###caption (object) = GROUP SUM prefix##NetWeight(###detail idetail) BY object(idetail) IN documentSum PERSISTENT;
END
META defineDocumentInterfaceHeaderNetWeightCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderNetWeightCustomPrefix (object, detail, prefix, caption);
    @defineDocumentHeaderNetWeightCustomPrefix (user###object, user###detail, prefix, caption);
END

// Итоги
META defineDocumentHeaderNetWeightCustom (object, detail)
    @defineDocumentHeaderNetWeightCustomPrefix(object, detail, , );
END
META defineDocumentInterfaceHeaderNetWeightCustom (object, detail)
    @defineDocumentHeaderNetWeightCustom (object, detail)
    @defineDocumentHeaderNetWeightCustom (user###object, user###detail)
END

META defineDocumentHeaderNetWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderNetWeightCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderNetWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderNetWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderNetWeightPrefix (user###object, prefix, caption)
END

META defineDocumentHeaderNetWeight (object)
    @defineDocumentHeaderNetWeightCustomPrefix(object, object##Detail, , );
END
META defineDocumentInterfaceHeaderNetWeight (object)
    @defineDocumentHeaderNetWeight(object);
    @defineDocumentHeaderNetWeight(user###object);
END

// Gross Weight
META defineDocumentDetailGrossWeightCustomPrefix (detail, skuProp, prefix, caption)
    grossWeight 'Вес брутто, кг'###caption (###detail detail) = quantity(detail) * grossWeight(skuProp(detail));
    grossWeightTon 'Вес брутто, т'###caption (###detail detail) = round6(grossWeight(detail) / 1000);
END
META defineDocumentInterfaceDetailGrossWeightCustomPrefix (detail, skuProp, prefix, caption)
    @defineDocumentDetailGrossWeightCustomPrefix(detail, skuProp, prefix, caption);
    @defineDocumentDetailGrossWeightCustomPrefix (user###detail, skuProp, prefix, caption);
    prefix###grossWeight###detail (detail) += prefix###grossWeight###user###detail(detail);
END

META defineDocumentDetailGrossWeightCustom (detail, skuProp)
    @defineDocumentDetailGrossWeightCustomPrefix(detail, skuProp, , );
END
META defineDocumentInterfaceDetailGrossWeightCustom (detail, skuProp)
    @defineDocumentInterfaceDetailGrossWeightCustomPrefix(detail, skuProp, , );
END

META defineDocumentDetailGrossWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentDetailGrossWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END
META defineDocumentInterfaceDetailGrossWeightPrefix (object, skuProp, prefix, caption)
    @defineDocumentInterfaceDetailGrossWeightCustomPrefix(object##Detail, skuProp, prefix, caption);
END

META defineDocumentDetailGrossWeight (object, skuProp)
    @defineDocumentDetailGrossWeightPrefix(object, skuProp, , );
END
META defineDocumentInterfaceDetailGrossWeight (object, skuProp)
    @defineDocumentInterfaceDetailGrossWeightPrefix(object, skuProp, , );
END

// Итоги
META defineDocumentHeaderGrossWeightCustomPrefix (object, detail, prefix, caption)
    prefix###grossWeight###detail 'Вес брутто (всего)'###caption (object) = GROUP SUM prefix###grossWeight(###detail idetail) BY object(idetail) IN documentSum PERSISTENT;
END
META defineDocumentInterfaceHeaderGrossWeightCustomPrefix (object, detail, prefix, caption)
    @defineDocumentHeaderGrossWeightCustomPrefix (object, detail, prefix, caption);
    @defineDocumentHeaderGrossWeightCustomPrefix (user###object, user###detail, prefix, caption);
END

META defineDocumentHeaderGrossWeightCustom (object, detail)
    @defineDocumentHeaderGrossWeightCustomPrefix(object, detail, , );
END
META defineDocumentInterfaceHeaderGrossWeightCustom (object, detail)
    @defineDocumentHeaderGrossWeightCustom (object, detail)
    @defineDocumentHeaderGrossWeightCustom (user###object, user###detail)
END

META defineDocumentHeaderGrossWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderGrossWeightCustomPrefix(object, object##Detail, prefix, caption);
END
META defineDocumentInterfaceHeaderGrossWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderGrossWeightPrefix (object, prefix, caption)
    @defineDocumentHeaderGrossWeightPrefix (user###object, prefix, caption)
END

META defineDocumentHeaderGrossWeight (object)
    @defineDocumentHeaderGrossWeightCustomPrefix(object, object##Detail, , );
END
META defineDocumentInterfaceHeaderGrossWeight (object)
    @defineDocumentHeaderGrossWeight(object);
    @defineDocumentHeaderGrossWeight(user###object);
END

// Агрегации

// Sku
META defineDocumentAggregationDetailSkuPrefix (primObject, aggrObject, skuProp, prefix)
    skuProp (###aggrObject##Detail detail) = prefix###skuProp(primObject##Detail(detail));
    nameSku 'SKU' (###aggrObject##Detail detail) = name(skuProp(detail)) IN public;
    idBarcodeSku 'Штрихкод' (###aggrObject##Detail detail) = idBarcode(skuProp(detail)) IN public;
END
META defineDocumentAggregationDetailSku (primObject, aggrObject, skuProp)
    @defineDocumentAggregationDetailSkuPrefix(primObject, aggrObject, skuProp, );
END

// Batch
META defineDocumentAggregationDetailBatch (primObject, aggrObject)
    batch 'Партия' (###aggrObject##Detail detail) = batch(primObject##Detail(detail)) PERSISTENT;
END

// ------------------------------------------ Итоги по Sku в документе ------------------------------------- //

META defineDocumentHeaderSkuQuantity (object, detail, skuProp, caption)
    quantity###detail 'Кол-во товара в документе'###caption  = 
        GROUP SUM quantity(###detail idetail)
              BY  skuProp(idetail),
                  object(idetail);
    count###detail 'Кол-во строк товара в документе'###caption  = 
        GROUP SUM 1 IF skuProp(###detail idetail)
              BY  skuProp(idetail),
                  object(idetail);              
END

META defineDocumentHeaderSkuQuantity (object, detail, skuProp)
    @defineDocumentHeaderSkuQuantity(object, detail, skuProp, );
END

META defineDocumentHeaderSkuQuantity (object, skuProp)
    @defineDocumentHeaderSkuQuantity(object, object###detail, skuProp);
END

// -------------------------------------- Количество в документе по товару, таре, услугам ----------------------------- //
META defineDocumentHeaderItemQuantityCustomPrefix (object, detail, prefixA, prefixB)
    quantityItem###detail 'Кол-во (всего), товар' (object) =
        GROUP SUM quantity(###detail idetail) IF isItem(sku(idetail))
            BY object(idetail) IN documentSum;
    quantityContainer###detail 'Кол-во (всего), тара' (object) =
        GROUP SUM quantity(###detail idetail) IF isContainer(sku(idetail))
            BY object(idetail) IN documentSum;
    quantityCharge###detail 'Кол-во (всего), услуги' (object) =
        GROUP SUM quantity(###detail idetail) IF isCharge(sku(idetail))
            BY object(idetail) IN documentSum;
    quantityNotCharge###detail 'Кол-во (всего), кроме услуг' (object) =
        GROUP SUM quantity(###detail idetail) IF isNotCharge(sku(idetail))
            BY object(idetail) IN documentSum;
    quantityNotItem###detail 'Кол-во (всего), кроме товара' (object) =
        GROUP SUM quantity(###detail idetail) IF isNotItem(sku(idetail))
            BY object(idetail) IN documentSum;
    quantityNotContainer###detail 'Кол-во (всего), кроме тары' (object) =
        GROUP SUM quantity(###detail idetail) IF isNotContainer(sku(idetail))
            BY object(idetail) IN documentSum;

END 
META defineDocumentHeaderItemQuantityPrefix (object, prefixA, prefixB)
    @defineDocumentHeaderItemQuantityCustomPrefix(object, object##Detail, prefixA, prefixB);
END
META defineDocumentInterfaceHeaderItemQuantityPrefix (object, prefixA, prefixB)
    @defineDocumentHeaderItemQuantityPrefix (object, prefixA, prefixB);
    @defineDocumentHeaderItemQuantityPrefix (user###object, prefixA, prefixB);
END 
META defineDocumentInterfaceHeaderItemQuantity (object)
    @defineDocumentInterfaceHeaderItemQuantityPrefix (object, , );    
END 

// -------------------------------------- Количество строк в документе по товару, таре, услугам ----------------------------- //

META defineDocumentHeaderItemCountCustomPrefix (object, detail, prefixA, prefixB)
    countItem###detail 'Кол-во строк (всего), товар' (object) =
        GROUP SUM 1 IF isItem(sku(###detail idetail))
            BY object(idetail) IN documentSum;
    countContainer###detail 'Кол-во строк (всего), тара' (object) =
        GROUP SUM 1 IF isContainer(sku(###detail idetail))
            BY object(idetail) IN documentSum;
    countCharge###detail 'Кол-во строк (всего), услуги' (object) =
        GROUP SUM 1 IF isCharge(sku(###detail idetail))
            BY object(idetail) IN documentSum;
    countNotCharge###detail 'Кол-во строк (всего), кроме услуг' (object) =
        GROUP SUM 1 IF isNotCharge(sku(###detail idetail))
            BY object(idetail) IN documentSum;
    countNotItem###detail 'Кол-во строк (всего), кроме товара' (object) =
        GROUP SUM 1 IF isNotItem(sku(###detail idetail))
            BY object(idetail) IN documentSum;
    countNotContainer###detail 'Кол-во строк (всего), кроме тары' (object) =
        GROUP SUM 1 IF isNotContainer(sku(###detail idetail))
            BY object(idetail) IN documentSum;

END 
META defineDocumentHeaderItemCountPrefix (object, prefixA, prefixB)
    @defineDocumentHeaderItemCountCustomPrefix(object, object##Detail, prefixA, prefixB);
END
META defineDocumentInterfaceHeaderItemCountPrefix (object, prefixA, prefixB)
    @defineDocumentHeaderItemCountPrefix (object, prefixA, prefixB);
    @defineDocumentHeaderItemCountPrefix (user###object, prefixA, prefixB);
END 
META defineDocumentInterfaceHeaderItemCount (object)
    @defineDocumentInterfaceHeaderItemCountPrefix (object, , );    
END

// -------------------------------------- Суммы по документам по товару, таре, услугам ----------------------------- //

META defineDocumentHeaderItemSumCustom (object, detail, prefixA, prefixB)
    prefixB###sumItem###detail 'Сумма, товар' (object) =
        GROUP SUM prefixA###sum(###detail idetail) IF isItem(sku(idetail))
            BY object(idetail) IN documentSum;
    prefixB###sumContainer###detail 'Сумма, тара' (object) =
        GROUP SUM prefixA###sum(###detail idetail) IF isContainer(sku(idetail))
            BY object(idetail) IN documentSum;
    prefixB###sumCharge###detail 'Сумма услуг' (object) =
        GROUP SUM prefixA###sum(###detail idetail) IF isCharge(sku(idetail))
            BY object(idetail) IN documentSum;
    prefixB###sumNotCharge###detail 'Сумма кроме услуг' (object) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotCharge(sku(idetail))
            BY object(idetail) IN documentSum;
    prefixB###sumNotItem###detail 'Сумма кроме товара' (object) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotItem(sku(idetail))
            BY object(idetail) IN documentSum;
    prefixB###sumNotContainer###detail 'Сумма кроме тары' (object) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotContainer(sku(idetail))
            BY object(idetail) IN documentSum;

END
META defineDocumentHeaderItemSum (object, prefixA, prefixB)
    @defineDocumentHeaderItemSumCustom(object, object##Detail, prefixA, prefixB);
END
META defineDocumentInterfaceHeaderItemSum (object, prefixA, prefixB)
    @defineDocumentHeaderItemSum (object, prefixA, prefixB);
    @defineDocumentHeaderItemSum (user###object, prefixA, prefixB);
END

META defineDocumentHeaderItemSumCustomNS (object, detail, prefixA, prefixB, NS)
    prefixB###sumItem###detail 'Сумма, товар' (object) =
        GROUP SUM prefixA###sum(NS.###detail idetail) IF isItem(NS.sku(idetail))
            BY NS.object(idetail) IN documentSum;
    prefixB###sumContainer###detail 'Сумма, тара' (object) =
        GROUP SUM prefixA###sum(NS.###detail idetail) IF isContainer(NS.sku(idetail))
            BY NS.object(idetail) IN documentSum;
    prefixB###sumCharge###detail 'Сумма услуг' (object) =
        GROUP SUM prefixA###sum(NS.###detail idetail) IF isCharge(NS.sku(idetail))
            BY NS.object(idetail) IN documentSum;
    prefixB###sumNotCharge###detail 'Сумма кроме услуг' (object) =
        GROUP SUM prefixA###sum(NS.###detail idetail) IF isNotCharge(NS.sku(idetail))
            BY NS.object(idetail) IN documentSum;
    prefixB###sumNotItem###detail 'Сумма кроме товара' (object) =
        GROUP SUM prefixA###sum(NS.###detail idetail) IF isNotItem(NS.sku(idetail))
            BY NS.object(idetail) IN documentSum;
    prefixB###sumNotContainer###detail 'Сумма кроме тары' (object) =
        GROUP SUM prefixA###sum(NS.###detail idetail) IF isNotContainer(NS.sku(idetail))
            BY NS.object(idetail) IN documentSum;

END

//-  Суммы по товару, таре, услугам по двум объектам (первый из них документ)
META defineDocumentHeaderItemSumDoubleCustom (object1, object2, detail, prefixA, prefixB, prefixC, object2Prop)
    prefixB###sum###detail 'Сумма, товар' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumItem###detail 'Сумма, товар' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isItem(sku(idetail))
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumContainer###detail 'Сумма, тара' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isContainer(sku(idetail))
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumCharge###detail 'Сумма услуг' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isCharge(sku(idetail))
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumNotCharge###detail 'Сумма кроме услуг' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotCharge(sku(idetail))
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumNotItem###detail 'Сумма кроме товара' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotItem(sku(idetail))
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumNotContainer###detail 'Сумма кроме тары' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotContainer(sku(idetail))
            BY object1(idetail), object2Prop(idetail) IN documentSum;
END
META defineDocumentHeaderItemSumDouble (object1, object2, prefixA, prefixB, prefixC, object2Prop)
    @defineDocumentHeaderItemSumDoubleCustom(object1, object2, object1##Detail, prefixA, prefixB, prefixC, object2Prop);
END
META defineDocumentInterfaceHeaderItemSumDouble (object1, object2, prefixA, prefixB, prefixC, object2Prop)
    @defineDocumentHeaderItemSumDouble (object1, object2, prefixA, prefixB, prefixC, object2Prop);
    @defineDocumentHeaderItemSumDouble (user###object1, object2, prefixA, prefixB, prefixC, object2Prop);
END
//-- с условием
META defineDocumentHeaderItemSumDoubleCustomExtra (object1, object2, detail, prefixA, prefixB, prefixC, object2Prop, extraProp)
    prefixB###sum###detail 'Сумма, товар' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF extraProp(idetail) BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumItem###detail 'Сумма, товар' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isItem(sku(idetail)) AND extraProp(idetail)
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumContainer###detail 'Сумма, тара' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isContainer(sku(idetail)) AND extraProp(idetail)
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumCharge###detail 'Сумма услуг' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isCharge(sku(idetail)) AND extraProp(idetail)
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumNotCharge###detail 'Сумма кроме услуг' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotCharge(sku(idetail)) AND extraProp(idetail)
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumNotItem###detail 'Сумма кроме товара' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotItem(sku(idetail)) AND extraProp(idetail)
            BY object1(idetail), object2Prop(idetail) IN documentSum;
    prefixB###sumNotContainer###detail 'Сумма кроме тары' (object1, object2) =
        GROUP SUM prefixA###sum(###detail idetail) IF isNotContainer(sku(idetail)) AND extraProp(idetail)
            BY object1(idetail), object2Prop(idetail) IN documentSum;
END
META defineDocumentHeaderItemSumDoubleExtra (object1, object2, prefixA, prefixB, prefixC, object2Prop, extraProp)
    @defineDocumentHeaderItemSumDoubleCustomExtra(object1, object2, object1##Detail, prefixA, prefixB, prefixC, object2Prop, extraProp);
END
META defineDocumentInterfaceHeaderItemSumDoubleExtra (object1, object2, prefixA, prefixB, prefixC, object2Prop, extraProp)
    @defineDocumentHeaderItemSumDoubleExtra (object1, object2, prefixA, prefixB, prefixC, object2Prop, extraProp);
    @defineDocumentHeaderItemSumDoubleExtra (user###object1, object2, prefixA, prefixB, prefixC, object2Prop, extraProp);
END

//-  Суммы по товару, таре, услугам по трем объектам (первый из них документ)
META defineDocumentHeaderItemSumTripleCustom (object1, object2, object3, detail, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop)
    prefixB###sum###detail 'Сумма, товар' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) 
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###sumItem###detail 'Сумма, товар' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) IF isItem(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###sumContainer###detail 'Сумма, тара' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) IF isContainer(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###sumCharge###detail 'Сумма услуг' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) IF isCharge(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###sumNotCharge###detail 'Сумма кроме услуг' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) IF isNotCharge(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###sumNotItem###detail 'Сумма кроме товара' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) IF isNotItem(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###sumNotContainer###detail 'Сумма кроме тары' (object1, object2, object3) =
        GROUP SUM prefixB###sum(###detail idetail) IF isNotContainer(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
END
META defineDocumentHeaderItemSumTriple (object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop)
    @defineDocumentHeaderItemSumTripleCustom(object1, object2, object3, object1##Detail, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop);
END
META defineDocumentInterfaceHeaderItemSumTriple (object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop)
    @defineDocumentHeaderItemSumTriple (object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop);
    @defineDocumentHeaderItemSumTriple (user###object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop);
END
//-  Количество по товару, таре, услугам по трем объектам (первый из них документ)
META defineDocumentHeaderItemQuantityTripleCustom (object1, object2, object3, detail, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop)
    prefixB###quantity###detail 'Количество, товар' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) 
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###quantityItem###detail 'Количество, товар' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) IF isItem(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###quantityContainer###detail 'Количество, тара' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) IF isContainer(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###quantityCharge###detail 'Количество услуг' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) IF isCharge(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###quantityNotCharge###detail 'Количество кроме услуг' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) IF isNotCharge(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###quantityNotItem###detail 'Количество кроме товара' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) IF isNotItem(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
    prefixB###quantityNotContainer###detail 'Количество кроме тары' (object1, object2, object3) =
        GROUP SUM prefixB###quantity(###detail idetail) IF isNotContainer(object3(idetail))
            BY object1(idetail), object2Prop(idetail), object3(idetail) IN documentSum;
END
META defineDocumentHeaderItemQuantityTriple (object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop)
    @defineDocumentHeaderItemQuantityTripleCustom(object1, object2, object3, object1##Detail, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop);
END
META defineDocumentInterfaceHeaderItemQuantityTriple (object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop)
    @defineDocumentHeaderItemQuantityTriple (object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop);
    @defineDocumentHeaderItemQuantityTriple (user###object1, object2, object3, prefixA, prefixB, prefixC, prefixD, object2Prop, object3Prop);
END
// ------------------------------------------------ Стандартные значения --------------------------------------- //

loadDefaultUOM 'Добавить ед.изм.'(VARISTRING[50] stringOne, VARISTRING[100] stringTwo, NUMERIC[14,3] numeric, BOOLEAN split, NUMERIC[11,5] netWeight, NUMERIC[11,5] grossWeight) = ACTION {
    FOR ADDOBJ u = UOM DO {
       name(u) <- stringOne;
       shortName(u) <- stringTwo;
       base(u) <- u;
       factor(u) <- numeric;
       split(u) <- split;
       netWeight(u) <- netWeight;
       grossWeight(u) <- grossWeight;
    }
}

loadDefaultUOMs 'Загрузить стандартные единицы измерений'() = ACTION {
    EXEC loadDefaultUOM('Штука', 'шт', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Килограмм', 'кг', 1.0, TRUE, 1.0, 1.0);
    EXEC loadDefaultUOM('Литр', 'л', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Банка', 'бан', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Бутылка', 'бут', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Коробка', 'кор', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Место', 'мест', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Мешок', 'меш', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Пакет', 'пак', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Пачка', 'пач', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Рубль', 'руб', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Рулон', 'рул', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Упаковка', 'упак', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Ящик', 'ящ', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Десяток', 'дес', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Изделие', 'изд', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Набор', 'набор', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Пара', 'пар', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Погонный метр', 'пог.м', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Условный метр', 'усл.м', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Номер', 'ном', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Лист', 'л.', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Элемент', 'элем', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Единица', 'ед', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Комплект', 'компл', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Флакон', 'флак', 1.0, NULL, NULL, NULL);
    EXEC loadDefaultUOM('Ампула', 'ампул', 1.0, NULL, NULL, NULL);
} IN loadDefault;

@implementLoadDefaultData(loadDefaultUOMs);
