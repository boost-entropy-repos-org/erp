MODULE Shipment;

REQUIRE Document, StockSkuDocument, Barcode, Operation;

CLASS ABSTRACT Shipment 'Поставка' : Document;
CLASS ABSTRACT ShipmentDetail 'Строка поставки' : DocumentDetail;

@defineDocumentAbstract(shipment);
@defineDocumentAbstractNumber(shipment);

@defineDocumentAbstractLegalEntity(shipment, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(shipment, customer, 'Покупатель');

@defineDocumentAbstractDataStock(shipment, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(shipment, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(shipment, stock, 'Склад (с)', from);
@defineDocumentAbstractDataStock(shipment, stock, 'Склад (на)', to);

@defineDocumentAbstractPosted(shipment);
@defineDocumentAbstractClosed(shipment);

overShowEdit = ABSTRACT BOOLEAN (Shipment);
overShowDelete = ABSTRACT BOOLEAN (Shipment);

@defineDocumentAbstractDetailSku(shipment, sku);

@defineDocumentAbstractDetailPriceCustomPrefix(shipmentDetail, , );

@defineDocumentAbstractDetailQuantity(shipment);
@defineDocumentDetailGrossWeight(shipment, sku);
@defineDocumentAbstractDetailQuantityPrefix(shipment, pack, ' (упаковок)');
@defineDocumentHeaderSkuQuantity(shipment, sku);

@defineDocumentAbstractDetailDataSumCustomPrefix (shipmentDetail, , );

@defineDocumentHeaderSum(shipment);
@defineDocumentHeaderQuantity(shipment);
@defineDocumentHeaderGrossWeight(shipment);

@defineDocumentHeaderItemSum (shipment, , );
        
edit 'Редактировать' = ACTION ABSTRACT LIST (Shipment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
isUser = ABSTRACT BOOLEAN (Shipment);

operation = ABSTRACT Operation.Operation(Shipment);
nameOperation 'Операция' (Shipment shipment) = name(operation(shipment));

in 'Приходная' = ABSTRACT BOOLEAN (Shipment);
in 'Приходная' (ShipmentDetail d) = in(shipment(d)); 
out 'Расходная' (Shipment shipment) = shipment IS Shipment AND NOT in(shipment);
out 'Расходная' (ShipmentDetail d) = out(shipment(d)); 

DESIGN options {
    pane {
        NEW shipments {
            caption = 'Поставки';
        }
    }
}

// ----------------------------------- Создавать поставку по умолчанию для склада ------------------------------------------ //

META defineDocumentHeaderCreateShipment(object)
    createShipment 'Создать поставку' (object) = DATA BOOLEAN(###object) IN documentPrm;
END
META defineDocumentAbstractHeaderCreateShipment(object)
    createShipment 'Создать поставку' (object) = ABSTRACT BOOLEAN(###object);
END

META defineDocumentInterfaceHeaderCreateShipment (object)
    @defineDocumentAbstractHeaderCreateShipment (object);
    @defineDocumentHeaderCreateShipment (user###object);
    createShipment (User###object object) += createShipment(object);
END

//----------------------------------------------- Поставка ---------------------------------------------------//

META defineShipment(captions, sign, stockProp, supplierFilter, customerFilter, filter, NS)

    CLASS ABSTRACT Shipment 'Поставка'###sign : Shipment.Shipment;
    CLASS ABSTRACT ShipmentDetail 'Строка поставки'###sign : Shipment.ShipmentDetail;

    CLASS UserShipment 'Поставка (польз.)'###sign : Shipment;
    CLASS UserShipmentDetail 'Строка поставки (польз.)'###sign : ShipmentDetail;

    @defineDocumentInterface(shipment);
    @deriveDocumentHeaderTimePrefix(UserShipment, );
    shipment[Shipment.ShipmentDetail] (ShipmentDetail detail) += shipment(detail);
    date[Shipment.Shipment] (Shipment shipment) += date(shipment);
    time[Shipment.Shipment] (Shipment shipment) += time(shipment);
    isUser(UserShipment shipment) += is(shipment);
    index[Shipment.ShipmentDetail](ShipmentDetail d) += index(d);
    
    createdUser = ABSTRACT CustomUser (Shipment);
    createdNameUser 'Создан пользователем' (Shipment shipment) = name[Contact](createdUser(shipment)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
    createdUser(UserShipment shipment) += createdUser(shipment) IF shipment IS UserShipment;    

    @defineDocumentInterfaceNumber(shipment);
    number[Shipment.Shipment] (Shipment shipment) += number(shipment);
    series[Shipment.Shipment] (Shipment shipment) += series(shipment);
    
    @defineNumeratedDefault(UserShipment, 'Поставки'###sign, 'ПС');

    @defineDocumentInterfaceLegalEntity (shipment, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (shipment, customer, 'Покупатель');
    supplier[Shipment.Shipment](Shipment shipment) += supplier(shipment);
    customer[Shipment.Shipment](Shipment shipment) += customer(shipment);
    
    is###filter##Supplier 'Приход от компании' (ShipmentDetail d) = is###filter(supplier(d)); 

    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад покупателя', customer);
    supplierStock[Shipment.Shipment](Shipment shipment) += supplierStock(shipment);
    customerStock[Shipment.Shipment](Shipment shipment) += customerStock(shipment);
    dataSupplierStock[Shipment.ShipmentDetail](ShipmentDetail detail) += dataSupplierStock(detail);
    dataCustomerStock[Shipment.ShipmentDetail](ShipmentDetail detail) += dataCustomerStock(detail);

    CONSTRAINT supplier(UserShipment userShipment) AND supplierStock(userShipment) AND NOT
    in(supplier(userShipment), supplierStock(userShipment))
        CHECKED BY supplierStock[UserShipment]
            MESSAGE 'Поставщик и склад поставщика для поставки не имеют связи';
    CONSTRAINT customer(UserShipment userShipment) AND customerStock(userShipment) AND NOT
    in(customer(userShipment), customerStock(userShipment))
        CHECKED BY customerStock[UserShipment]
            MESSAGE 'Покупатель и склад покупателя для поставки не имеют связи';

    @defineDocumentInterfacePosted(shipment);
    isPosted[Shipment.Shipment] (Shipment shipment) += isPosted(shipment);

    @defineDocumentInterfaceClosed(shipment);
    @defineDocumentClosedConstraint(UserShipment);
    isClosed[Shipment.Shipment] (Shipment shipment) += isClosed(shipment);
    
    @defineDocumentInterfaceDescription(shipment, 'Поставка'###sign);

    @defineDocumentInterfaceCurrency(shipment);
    @deriveDocumentCurrency(userShipment, stockProp###stock);

    @defineDocumentInterfaceDetailSku(shipment, sku);
    sku[Shipment.ShipmentDetail](ShipmentDetail detail) += sku(detail);
    
    blankLineShipments 'Разрешить строки без SKU в поставках '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##blankLineShipments = blankLineShipments
    ;
    
    DESIGN options {
        shipments {
            MOVE PROPERTY(NS##blankLineShipments);
        }
    }

    CONSTRAINT isPosted(UserShipmentDetail d) AND NOT sku(d) AND NOT blankLineShipments()
        MESSAGE 'Для строки поставки '##sign##' должен быть задан SKU';

    @defineDocumentInterfaceDetailQuantity(shipment);
    quantity[Shipment.ShipmentDetail](ShipmentDetail detail) += quantity(detail);

    @defineDocumentInterfaceDetailExpiryDate(shipment);
    @defineDocumentInterfaceDetailManufactureDate(shipment);
    
    @defineDocumentInterfaceDetailPrice(shipment);
    price[Shipment.ShipmentDetail](ShipmentDetail detail) += price(detail);
    
    @defineDocumentInterfaceDetailDataSum(shipment);
    @deriveDocumentDetailSum(userShipment, quantity);
    sum[Shipment.ShipmentDetail](ShipmentDetail detail) += sum(detail);

    @defineDocumentInterfaceHeaderQuantity(shipment);
    @defineDocumentHeaderSkuQuantity(shipment, sku);
    @defineDocumentHeaderSkuQuantity(userShipment, sku);
    @defineDocumentInterfaceHeaderSum(shipment);

    @defineDocumentInterfaceHeaderItemSum (shipment, , );

    @defineAddDetailDialogSkuStock(userShipment, sku, stockProp###stock, dialogSku);
//    @defineAddDetailDialogBarcode(userShipment, sku);

    @implementDocumentSupplierCustomer(shipment);
   
    @defineMovementSku(shipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userShipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(shipmentDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userShipmentDetail); //-- показываем по нажатию правой клавиши остатки товара
    
    @defineBarcodeSku(shipmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userShipmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    
    @defineDocumentDialogSupplierCustomerStock(userShipment, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userShipmentDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userShipment, supplierFilter, customerFilter);

    @defineMovementPriceSku(shipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userShipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

    CLASS ABSTRACT ShipmentDimension 'Регистр хранения' ;
    CLASS UserShipmentDimension : ShipmentDimension;
    TABLE shipmentDimension (ShipmentDimension);

    name 'Наименование' = ABSTRACT VARISTRING[100](ShipmentDimension);

    shipmentDimension = ABSTRACT ShipmentDimension (ShipmentDetail);
    nameShipmentDimension 'Регистр хранения' (ShipmentDetail detail) = name(shipmentDimension(detail));
    shipmentDimension = ABSTRACT ShipmentDimension (UserShipmentDetail);
    nameShipmentDimension 'Регистр хранения' (UserShipmentDetail detail) = name(shipmentDimension(detail));
    shipmentDimension(UserShipmentDetail detail) += shipmentDimension(detail);

    shipmentDimension= ABSTRACT ShipmentDimension (UserShipment);

    userShipmentDetail(shipment, sku, dimension) = GROUP MAX UserShipmentDetail detail BY userShipment(detail), sku(detail), shipmentDimension(detail);
    userShipmentDetail(shipment, sku) = GROUP MAX UserShipmentDetail detail BY userShipment(detail), sku(detail);

    addDetailBarcodeUserShipmentDetail(UserShipment shipment, STRING[15] barcode, ShipmentDimension dimension) = ACTION {
        LOCAL dialogBarcodeSku = Sku ();
        ASSIGN dialogBarcodeSku() <- skuBarcode(barcode, date(shipment));

        IF dialogBarcodeSku() IS Sku THEN {
            LOCAL dialogBarcodeDetail = UserShipmentDetail();
            ASSIGN dialogBarcodeDetail() <- IF dimension IS ShipmentDimension
                                                THEN userShipmentDetail(shipment, dialogBarcodeSku(), dimension)
                                                ELSE userShipmentDetail(shipment, dialogBarcodeSku());


            IF dialogBarcodeDetail() IS UserShipmentDetail THEN {
                ASSIGN quantity(UserShipmentDetail detail) <-
                    quantity(detail) (+) (amount(barcode(barcode, date(shipment))) IF detail IS UserShipmentDetail)
                    WHERE detail == dialogBarcodeDetail();
                EXEC seek(dialogBarcodeDetail());
            } ELSE {
                FOR ADDOBJ w = UserShipmentDetail DO {
                    ASSIGN userShipment(w) <- shipment;
                    ASSIGN sku(w) <- dialogBarcodeSku();
                    ASSIGN quantity(w) <- amount(barcode(barcode, date(shipment)));
                    EXEC seek(w);
                }
            }
            EXEC setAddedUser(dialogBarcodeSku());
        } ELSE {
            FORM emptyBarcodeSkus MODAL;
            IF formResult() == FormResult.ok THEN {
                FOR Object s == chosenObject('s') DO {
                    ASSIGN dialogBarcodeSku() <- s;
                    FOR ADDOBJ br = Barcode DO {
                        ASSIGN id(br) <- barcode;
                        ASSIGN dataDate(br) <- currentDate();
                        ASSIGN sku(br) <- s;
                        FOR ADDOBJ w = UserShipmentDetail DO {
                            ASSIGN userShipment(w) <- shipment;
                            ASSIGN sku(w) <- s;
                            ASSIGN quantity(w) <- amount(br);
                            EXEC seek(w);
                        }
                    }
                }
            } ELSE {
                EXEC createSkuBarcode(barcode, date(shipment));
                ASSIGN dialogBarcodeSku() <- skuBarcode(barcode, date(shipment));
            }
            EXEC setAddedUser(dialogBarcodeSku());
        }
    }

    changeAddDetailInputBarcodeDimensionUserShipmentDetail(UserShipment userShipment) = ACTION {
        REQUEST STRING[15] INPUT;
        EXEC addDetailBarcodeUserShipmentDetail(userShipment, processedBarcode(requestedString()), shipmentDimension(userShipment));
    };
    addDetailInputBarcodeDimensionUserShipmentDetail 'Ввод штрихкода :' (userShipment) = DATA LOCAL STRING[15] (UserShipment) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE changeAddDetailInputBarcodeDimensionUserShipmentDetail(userShipment);

// --------------------------- Формы --------------------------------- //

    edit 'Редактировать' = ACTION ABSTRACT LIST (Shipment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit[Shipment.Shipment] (Shipment shipment) += ACTION edit(shipment);

    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (UserShipmentDetail);
 
    editSku 'Редактировать SKU' (UserShipmentDetail d) = ACTION edit(sku(d));
    FORM userShipment 'Поставка'###sign
        OBJECTS s = UserShipment FIXED PANEL
        PROPERTIES (s) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(s),
                       nameCustomer ON CHANGE changeCustomer###customerFilter(s),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(s),
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(s),
                       nameNumerator, number, series, date, time,
                       nameCurrency, note, countUserShipmentDetail, quantityUserShipmentDetail,
                       sumUserShipmentDetail

        OBJECTS d = UserShipmentDetail
        PROPERTIES (d) index
        PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku BACKGROUND backgroundSku(d), 
                        nameSku BACKGROUND backgroundSku(d), shortNameUOMSku
        PROPERTIES (d) quantity, price, sum, manufactureDate, expiryDate,
                       name###stockProp##Stock[ShipmentDetail] ON CHANGE changeData###stockProp##Stock###filter(d), ADDOBJ, deletesd=DELETESESSION
        ORDER BY index(d)

        PROPERTIES(s) TODRAW d fillDocument, addDetailDialogSkuStockUserShipmentDetail,
                               addDetailInputBarcodeDimensionUserShipmentDetail, deleteUserShipmentDetail
        FILTERS userShipment(d) == s

        EVENTS
            ON OK prePost(s)

        EDIT UserShipment OBJECT s
    ;

    DESIGN userShipment {
        main {
            preferredSize = (1024, 768);

            NEW header.box BEFORE functions.box {
                type = CONTAINERH;

                NEW headerRow1 {
                    fill = 1;
                    type = CONTAINERV;
                    
                    MOVE s.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPosted(s)) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumerator(s));
                            MOVE PROPERTY(number(s));
                            MOVE PROPERTY(series(s));
                            MOVE PROPERTY(date(s));
                            MOVE PROPERTY(time(s));
                        }    
                    }                    
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplier(s));
                            MOVE PROPERTY(nameSupplierStock(s));
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomer(s));
                            MOVE PROPERTY(nameCustomerStock(s));
                        }
                    }

                    NEW headerTabbedPane {
                        fill = 1;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            MOVE s.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = COLUMNS;
                            columns = 4;
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = COLUMNS;
                            columns = 2;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = COLUMNS;
                            columns = 3;
                        }
                    }
                }

                MOVE s.documentSum {
                    columns = 1;
                }
            }

            NEW specification.box BEFORE functions.box{
                fill = 1;
                type = TABBED;
                MOVE d.box;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserShipmentDetail(s)) { preferredCharWidth = 13;}  
        PROPERTY(deleteUserShipmentDetail(s)){focusable = FALSE;}
    }

    @defineDocumentSkuPriceListTypeSystemLedger(userShipment, accountPriceListType, stock, stockProp);
    @extendFormDocumentSku(userShipment, userShipment, s);

    addUserShipment 'Добавить' = ACTION ADDFORM UserShipment;
    edit 'Редактировать' (userShipment) = ACTION EDITFORM UserShipment;
    edit (UserShipment shipment) += ACTION edit(shipment);
    overCopy = ACTION ABSTRACT LIST (UserShipmentDetail, ShipmentDetail);
    overCopy = ACTION ABSTRACT LIST (Shipment, UserShipment);

    copy 'Копировать'(Shipment shipment) = ACTION NEWSESSION {
        FOR ADDOBJ s = UserShipment DO {
            ASSIGN supplier(s) <- supplier(shipment);
            ASSIGN supplierStock(s) <- supplierStock(shipment);
            ASSIGN customer(s) <- customer(shipment);
            ASSIGN customerStock(s) <- customerStock(shipment);
            ASSIGN currency(s) <- currency(shipment);
            ASSIGN note(s) <- note(shipment);

            EXEC overCopy(shipment, s);

            FOR shipment(ShipmentDetail shipmentDetail) == shipment DO {
                FOR ADDOBJ d=UserShipmentDetail DO {
                    ASSIGN userShipment(d) <- s;
                    ASSIGN sku(d) <- sku(shipmentDetail);
                    ASSIGN quantity(d) <- quantity(shipmentDetail);
                    ASSIGN price(d) <- price(shipmentDetail);
                    ASSIGN expiryDate(d) <- expiryDate(shipmentDetail);
                    ASSIGN manufactureDate(d) <- manufactureDate(shipmentDetail);
                    ASSIGN data###stockProp##Stock(d) <- data###stockProp##Stock(shipmentDetail);
                    
                    EXEC overCopy(d, shipmentDetail);
                }
            }

            FORM userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL NOCANCEL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopy = ACTION ABSTRACT LIST (UserShipmentDetail, UserShipmentDetail);

    copy 'Копировать'(UserShipmentDetail detail) = ACTION {
        FOR ADDOBJ d = UserShipmentDetail DO {          

            ASSIGN userShipment(d) <- userShipment(detail);
            ASSIGN sku(d) <- sku(detail);
            ASSIGN quantity(d) <- quantity(detail);
            ASSIGN price(d) <- price(detail);
            ASSIGN data###stockProp##Stock(d) <- data###stockProp##Stock(detail);
            ASSIGN expiryDate(d) <- expiryDate(detail);
            ASSIGN manufactureDate(d) <- manufactureDate(detail);
            
            EXEC overCopy(d, detail);                              
        }
    } TOOLBAR;
    
    EXTEND FORM userShipment PROPERTIES(d) copy FORCE PANEL;
    DESIGN userShipment { PROPERTY(copy(d)) { focusable = FALSE; } }
     
    isUserOpened(UserShipment s)=  isOpened[Shipment](s) AND is(s);
    
    filterShipmentDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Shipment s) = date(s) >= filterShipmentDateFrom() OR (s IS Shipment AND NOT filterShipmentDateFrom());      
    
    filterShipmentDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Shipment s) = date(s) <= filterShipmentDateTo() OR (s IS Shipment AND NOT filterShipmentDateTo());      
    
    filterShipmentCustomer  = DATA LOCAL LegalEntity ();
    nameFilterShipmentCustomer 'Покупатель' = name(filterShipmentCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomer (Shipment s) = customer(s) == filterShipmentCustomer() OR (s IS Shipment AND NOT filterShipmentCustomer());    

    filterShipmentCustomerStock  = DATA LOCAL Stock ();
    nameFilterShipmentCustomerStock 'Склад покупателя' = name(filterShipmentCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStock (Shipment s) = customerStock(s) == filterShipmentCustomerStock() OR (s IS Shipment AND NOT filterShipmentCustomerStock());  

    filterShipmentSupplier = DATA LOCAL LegalEntity ();
    nameFilterShipmentSupplier 'Поставщик' = name(filterShipmentSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplier (Shipment s) = supplier(s) == filterShipmentSupplier() OR (s IS Shipment AND NOT filterShipmentSupplier());      

    filterShipmentSupplierStock  = DATA LOCAL Stock ();
    nameFilterShipmentSupplierStock 'Склад поставщика' = name(filterShipmentSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStock (Shipment s) = supplierStock(s) == filterShipmentSupplierStock() OR (s IS Shipment AND NOT filterShipmentSupplierStock());      

    filterShipmentCustomUser  = DATA LOCAL CustomUser ();
    nameFilterShipmentCustomUser 'Создан пользователем' = name[Contact](filterShipmentCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUser (Shipment i) = createdUser[UserShipment](i) == filterShipmentCustomUser() OR (i IS Shipment AND NOT filterShipmentCustomUser());  

    filterShipmentComputer = DATA LOCAL Computer ();
    nameFilterShipmentComputer 'Создан на компьютере' = hostname(filterShipmentComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputer (Shipment i) = createdComputer(i) == filterShipmentComputer() OR (i IS Shipment AND NOT filterOrderComputer());    
    
    overShowEdit = ABSTRACT BOOLEAN (Shipment);
    overShowDelete = ABSTRACT BOOLEAN (Shipment); 
    skipShowEdit = ABSTRACT BOOLEAN (Shipment);
    skipShowDelete = ABSTRACT BOOLEAN (Shipment); 
    
    overShowEdit[Shipment.Shipment](Shipment i) += overShowEdit(i);
    overShowDelete[Shipment.Shipment](Shipment i) += overShowDelete(i);
        
    backgroundDraft 'Цвет' (Shipment s) = RGB(212,255,212) IF isDraft(s); 
    FORM shipments captions 
    
        PROPERTIES() filterShipmentDateFrom, filterShipmentDateTo, nameFilterShipmentSupplier, nameFilterShipmentSupplierStock, 
                     nameFilterShipmentCustomer, nameFilterShipmentCustomerStock, nameFilterShipmentCustomUser, nameFilterShipmentComputer 
    
        OBJECTS s = Shipment LAST
        PROPERTIES (s) READONLYIF isReadonly() isClosed 
        PROPERTIES (s) READONLYIF isReadonly() BACKGROUND backgroundDraft(s) isPosted, number, series, date, time
        PROPERTIES (s) READONLYIF isReadonly() nameSupplier, nameSupplierStock, nameCustomer,
                       nameCustomerStock, nameCurrency
        PROPERTIES (s) READONLY countShipmentDetail, quantityShipmentDetail, sumShipmentDetail
        PROPERTIES (s) READONLYIF isReadonly() note
        PROPERTIES (s) READONLY FORCE PANEL createdNameUser[UserShipment], createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES ()  addUserShipment TODRAW s
        PROPERTIES (s) edit SHOWIF overShowEdit(s), //isOpenedShipment(s), 
                       copy
        PROPERTIES (s) close[UserShipment] SHOWIF isOpened[UserShipment](s), open SHOWIF isClosed[UserShipment](s)

        PROPERTIES (s) deletes=DELETE FORCE PANEL TOOLBAR SHOWIF overShowDelete(s) //isUserOpenedShipment(s)

        OBJECTS d = ShipmentDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, price, sum, manufactureDate, expiryDate, name###stockProp##Stock
        ORDER BY index(d)
        FILTERS shipment(d) == s
        FILTERS filterDateFrom(s), 
                filterDateTo(s),
                filterSupplier(s),
                filterSupplierStock(s),
                filterCustomer(s),
                filterCustomerStock(s),
                filterCustomUser(s),
                filterComputer(s)                
                
        DIALOG Shipment OBJECT s
    ;

    DESIGN shipments captions###sign {
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {
                    caption = 'Фильтры';
                    type = CONTAINERV; 
                    NEW topFilters1 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(filterShipmentDateFrom());
                        MOVE PROPERTY(filterShipmentDateTo());                            
                        MOVE PROPERTY(nameFilterShipmentSupplier());
                        MOVE PROPERTY(nameFilterShipmentSupplierStock());    
                        MOVE PROPERTY(nameFilterShipmentCustomer());
                        MOVE PROPERTY(nameFilterShipmentCustomerStock());                                               
                    }
                    NEW topFilters2 {
                        type = CONTAINERH;  
                        MOVE PROPERTY(nameFilterShipmentCustomUser());
                        MOVE PROPERTY(nameFilterShipmentComputer());                            
                    }            
                }
                MOVE s.box {
                    fill = 1;
                }
            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE s.created;
                    MOVE s.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                        MOVE PROPERTY(copy(s)) { caption = 'Поставка'###sign;}
                    }
                }
            }
        }
    }
    @extendFormEditable(shipments);
    @defineFilterIsOpened (shipment, shipments, s);
    @defineDocumentLogForm(shipments, s);
    edit 'Редактировать' = ACTION ABSTRACT LIST  (ShipmentDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit(UserShipmentDetail d) = ACTION NEWSESSION {
        FORM userShipment OBJECTS s = userShipment(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    
    edit(UserShipmentDetail d) += ACTION edit(d);      
    
    show 'Просмотреть' = ACTION ABSTRACT LIST  (ShipmentDetail) TOOLBAR;
    show(UserShipmentDetail d) = ACTION NEWSESSION {
        FORM userShipment OBJECTS s = userShipment(d), d = d DOCKEDMODAL READONLY;
    }
    
    show(UserShipmentDetail d) += ACTION show(d);          
    
END

META defineShipmentBatch(stockProp)
    @showDocumentInterfaceDetailBatch(shipment);
    @defineDocumentInterfaceDetailBatch(shipment, batch);
    overCopy[UserShipmentDetail,UserShipmentDetail](UserShipmentDetail d, UserShipmentDetail detail) += ACTION {      
        batch(d) <- batch(detail);
    } 
    overCopy(UserShipmentDetail d, ShipmentDetail detail) += ACTION {      
        batch(d) <- batch(detail);
    }     

    // История по правой кнопке мыши
    @defineBalancesBatch(shipmentDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userShipmentDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(shipmentDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userShipmentDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeSystemLedger(userShipment, accountPriceListType, stock, supplier);
    @extendFormDocumentBatch(userShipment, userShipment, s);

    replace(Sku s, Batch b) += ACTION { sku(UserShipmentDetail detail) <- s WHERE batch[ShipmentDetail](detail) == b;}
END

META defineShipmentBatchDialogStock(stockProp, dialog)

    changeBatch(UserShipmentDetail userShipmentDetail) = ACTION {
        FORM dialogBatchStock##dialog OBJECTS st = stockProp(userShipmentDetail),
                                 t = dateTime(userShipmentDetail),
                                 sk = sku(userShipmentDetail) DIALOG SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            batch(userShipmentDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batch(userShipmentDetail) <- NULL;
        }
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d);
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);
END

META defineShipmentBatchDialog(dumb)

    changeBatch(UserShipmentDetail userShipmentDetail) = ACTION {
        FORM dialogBatch OBJECTS sk = sku(userShipmentDetail) DIALOG SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            batch(userShipmentDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batch(userShipmentDetail) <- NULL;
        }
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d);
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);

END

META defineShipmentStockDestination(fromStockProp, toStockProp)
    fromStock(Shipment shipment) += fromStockProp(shipment);
    toStock(Shipment shipment) += toStockProp(shipment);
    dataFromStock(ShipmentDetail detail) += data###fromStockProp(detail);
    dataToStock(ShipmentDetail detail) += data###toStockProp(detail);
END