MODULE Shipment;

REQUIRE Document, StockSkuDocument, Barcode;

CLASS ABSTRACT Shipment 'Поставка' : Document;
CLASS ABSTRACT ShipmentDetail 'Строка поставки' : DocumentDetail;

@defineDocumentAbstract(shipment);
@defineDocumentAbstractNumber(shipment);

@defineDocumentAbstractLegalEntity(shipment, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(shipment, customer, 'Покупатель');

@defineDocumentAbstractDataStock(shipment, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(shipment, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(shipment, stock, 'Склад (с)', from);
@defineDocumentAbstractDataStock(shipment, stock, 'Склад (на)', to);

@defineDocumentAbstractPosted(shipment);
@defineDocumentAbstractClosed(shipment);

@defineDocumentAbstractDetailSku(shipment, sku);

@defineDocumentAbstractDetailQuantity(shipment);
@defineDocumentDetailGrossWeight(shipment, sku);
@defineDocumentAbstractDetailQuantityPrefix(shipment, pack, ' (упаковок)');
@defineDocumentHeaderSkuQuantity(shipment, sku);

@defineDocumentAbstractDetailDataSumCustomPrefix (shipmentDetail, , );

@defineDocumentHeaderSum(shipment);
@defineDocumentHeaderQuantity(shipment);
@defineDocumentHeaderGrossWeight(shipment);

editShipment 'Редактировать' = ABSTRACT ACTION LIST (Shipment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
isUserShipment = ABSTRACT BOOLEAN (Shipment);

inShipment 'Приходная' = ABSTRACT BOOLEAN (Shipment);
inShipmentDetail 'Приходная' (d) = inShipment(shipmentShipmentDetail(d)); 
outShipment 'Расходная' (shipment) = shipment IS Shipment AND NOT inShipment(shipment);
outShipmentDetail 'Расходная' (d) = outShipment(shipmentShipmentDetail(d)); 

// ----------------------------------- Создавать поставку по умолчанию для склада ------------------------------------------ //

META defineDocumentHeaderCreateShipment(object)
    createShipment###object 'Создать поставку' (object) = DATA BOOLEAN(###object) IN documentPrm;
END
META defineDocumentAbstractHeaderCreateShipment(object)
    createShipment###object 'Создать поставку' (object) = ABSTRACT BOOLEAN(###object);
END

META defineDocumentInterfaceHeaderCreateShipment (object)
    @defineDocumentAbstractHeaderCreateShipment (object);
    @defineDocumentHeaderCreateShipment (user###object);
    createShipment###object (object) += createShipment###user###object(object);
END

//----------------------------------------------- Поставка ---------------------------------------------------//

META defineShipment(captions, sign, stockProp, supplierFilter, customerFilter, filter)

    CLASS ABSTRACT Shipment 'Поставка'###sign : Shipment.Shipment;
    CLASS ABSTRACT ShipmentDetail 'Строка поставки'###sign : Shipment.ShipmentDetail;

    CLASS UserShipment 'Поставка (польз.)'###sign : Shipment;
    CLASS UserShipmentDetail 'Строка поставки (польз.)'###sign : ShipmentDetail;

    @defineDocumentInterface(shipment);
    @deriveDocumentHeaderTimePrefix(UserShipment, );
    Shipment.shipmentShipmentDetail (detail) += shipmentShipmentDetail(detail);
    Shipment.dateShipment (shipment) += dateShipment(shipment);
    Shipment.timeShipment (shipment) += timeShipment(shipment);
    Shipment.isUserShipment(shipment) += isUserShipment(shipment);

    @defineDocumentInterfaceNumber(shipment);
    Shipment.numberShipment (shipment) += numberShipment(shipment);
    Shipment.seriesShipment (shipment) += seriesShipment(shipment);
    
    @defineNumeratedDefault(UserShipment, 'Поставки'###sign, 'ПС');

    @defineDocumentInterfaceLegalEntity (shipment, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (shipment, customer, 'Покупатель');
    Shipment.supplierShipment(shipment) += supplierShipment(shipment);
    Shipment.customerShipment(shipment) += customerShipment(shipment);
    
    isCompanySupplierShipmentDetail 'Приход от компании' (d) = isCompanyLegalEntity(supplierShipmentDetail(d)); 

    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад покупателя', customer);
    Shipment.supplierStockShipment(shipment) += supplierStockShipment(shipment);
    Shipment.customerStockShipment(shipment) += customerStockShipment(shipment);
    Shipment.dataSupplierStockShipmentDetail(detail) += dataSupplierStockShipmentDetail(detail);
    Shipment.dataCustomerStockShipmentDetail(detail) += dataCustomerStockShipmentDetail(detail);

    CONSTRAINT supplierUserShipment(userShipment) AND supplierStockUserShipment(userShipment) AND NOT
    inLegalEntityStock(supplierUserShipment(userShipment), supplierStockUserShipment(userShipment))
        CHECKED BY supplierStockUserShipment
            MESSAGE 'Поставщик и склад поставщика для поставки не имеют связи';
    CONSTRAINT customerUserShipment(userShipment) AND customerStockUserShipment(userShipment) AND NOT
    inLegalEntityStock(customerUserShipment(userShipment), customerStockUserShipment(userShipment))
        CHECKED BY customerStockUserShipment
            MESSAGE 'Покупатель и склад покупателя для поставки не имеют связи';

    @defineDocumentInterfacePosted(shipment);
    Shipment.isPostedShipment (shipment) += isPostedShipment(shipment);

    @defineDocumentInterfaceClosed(shipment);
    Shipment.isClosedShipment (shipment) += isClosedShipment(shipment);
    
    @defineDocumentInterfaceDescription(shipment, 'Поставка'###sign);

    @defineDocumentInterfaceCurrency(shipment);
    @deriveDocumentCurrency(userShipment, stockProp###stock);

    @defineDocumentInterfaceDetailSku(shipment, sku);
    Shipment.skuShipmentDetail(detail) += skuShipmentDetail(detail);

    @defineDocumentInterfaceDetailQuantity(shipment);
    Shipment.quantityShipmentDetail(detail) += quantityShipmentDetail(detail);

    @defineDocumentInterfaceDetailExpiryDate(shipment);
    @defineDocumentInterfaceDetailManufactureDate(shipment);
    
    @defineDocumentInterfaceDetailPrice(shipment);

    @defineDocumentInterfaceDetailDataSum(shipment);
    @deriveDocumentDetailSum(userShipment, quantity);
    Shipment.sumShipmentDetail(detail) += sumShipmentDetail(detail);

    @defineDocumentInterfaceHeaderQuantity(shipment);
    @defineDocumentHeaderSkuQuantity(shipment, sku);
    @defineDocumentHeaderSkuQuantity(userShipment, sku);
    @defineDocumentInterfaceHeaderSum(shipment);

    @defineDocumentInterfaceHeaderItemSum (shipment, , );

    @defineAddDetailDialogSkuStock(userShipment, sku, stockProp###stock, dialogSku);
//    @defineAddDetailDialogBarcode(userShipment, sku);

    @implementDocumentSupplierCustomer(shipment);
   
    @defineMovementSku(shipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userShipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(shipmentDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userShipmentDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineDocumentDialogSupplierCustomerStock(userShipment, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userShipmentDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userShipment, supplierFilter, customerFilter);

    @defineMovementPriceSku(shipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userShipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

    CLASS ABSTRACT ShipmentDimension 'Регистр хранения' ;
    TABLE shipmentDimension (ShipmentDimension);

    nameShipmentDimension 'Наименование' = ABSTRACT VARISTRING[100](ShipmentDimension);

    shipmentDimensionShipmentDetail = ABSTRACT ShipmentDimension (ShipmentDetail);
    nameShipmentDimensionShipmentDetail 'Регистр хранения' (detail) = nameShipmentDimension(shipmentDimensionShipmentDetail(detail));
    shipmentDimensionUserShipmentDetail = ABSTRACT ShipmentDimension (UserShipmentDetail);
    nameShipmentDimensionUserShipmentDetail 'Регистр хранения' (detail) = nameShipmentDimension(shipmentDimensionUserShipmentDetail(detail));
    shipmentDimensionShipmentDetail(detail) += shipmentDimensionUserShipmentDetail(detail);

    shipmentDimensionUserShipment= ABSTRACT ShipmentDimension (UserShipment);

    userShipmentDetailUserShipmentSkuDimension(shipment, sku, dimension) = GROUP MAX detail BY userShipmentUserShipmentDetail(detail), skuUserShipmentDetail(detail), shipmentDimensionUserShipmentDetail(detail);
    userShipmentDetailUserShipmentSku(shipment, sku) = GROUP MAX detail BY userShipmentUserShipmentDetail(detail), skuUserShipmentDetail(detail);

    addDetailBarcodeUserShipmentDetailUserShipmentDimension = ACTION (shipment, barcode, dimension) {
        LOCAL dialogBarcodeSku = Sku ();
        ASSIGN dialogBarcodeSku() <- skuBarcodeIdDate(barcode, dateUserShipment(shipment));

        IF dialogBarcodeSku() IS Sku THEN {
            LOCAL dialogBarcodeDetail = UserShipmentDetail();
            ASSIGN dialogBarcodeDetail() <- IF dimension IS ShipmentDimension
                                                THEN userShipmentDetailUserShipmentSkuDimension(shipment, dialogBarcodeSku(), dimension)
                                                ELSE userShipmentDetailUserShipmentSku(shipment, dialogBarcodeSku());


            IF dialogBarcodeDetail() IS UserShipmentDetail THEN {
                ASSIGN quantityUserShipmentDetail(detail) <-
                    quantityUserShipmentDetail(detail) (+) (amountBarcode(barcodeIdDate(barcode, dateUserShipment(shipment))) IF detail IS UserShipmentDetail)
                    WHERE detail == dialogBarcodeDetail();
                EXEC seek(dialogBarcodeDetail());
            } ELSE {
                FOR ADDOBJ w = UserShipmentDetail DO {
                    ASSIGN userShipmentUserShipmentDetail(w) <- shipment;
                    ASSIGN skuUserShipmentDetail(w) <- dialogBarcodeSku();
                    ASSIGN quantityUserShipmentDetail(w) <- amountBarcode(barcodeIdDate(barcode, dateUserShipment(shipment)));
                    EXEC seek(w);
                }
            }
            EXEC setSkuAddedUser(dialogBarcodeSku());
        } ELSE {
            FORM emptyBarcodeSkus MODAL;
            IF formResult() == FormResult.ok THEN {
                FOR s == chosenObject('s') DO {
                    ASSIGN dialogBarcodeSku() <- s;
                    FOR ADDOBJ br = Barcode DO {
                        ASSIGN idBarcode(br) <- barcode;
                        ASSIGN dataDateBarcode(br) <- currentDate();
                        ASSIGN skuBarcode(br) <- s;
                        FOR ADDOBJ w = UserShipmentDetail DO {
                            ASSIGN userShipmentUserShipmentDetail(w) <- shipment;
                            ASSIGN skuUserShipmentDetail(w) <- s;
                            ASSIGN quantityUserShipmentDetail(w) <- amountBarcode(br);
                            EXEC seek(w);
                        }
                    }
                }
            } ELSE {
                EXEC createSkuBarcodeDate(barcode, dateUserShipment(shipment));
                ASSIGN dialogBarcodeSku() <- skuBarcodeIdDate(barcode, dateUserShipment(shipment));
            }
            EXEC setSkuAddedUser(dialogBarcodeSku());
        }
    }

    changeAddDetailInputBarcodeDimensionUserShipmentDetailUserShipment = ACTION (userShipment) {
        REQUEST STRING[15] INPUT;
        EXEC addDetailBarcodeUserShipmentDetailUserShipmentDimension(userShipment, processedBarcode(requestedString()), shipmentDimensionUserShipment(userShipment));
    };
    addDetailInputBarcodeDimensionUserShipmentDetailUserShipment 'Ввод штрих-кода :' (userShipment) = DATA SESSION STRING[15] (UserShipment) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE changeAddDetailInputBarcodeDimensionUserShipmentDetailUserShipment(userShipment);

// --------------------------- Формы --------------------------------- //

    editShipment 'Редактировать' = ABSTRACT ACTION LIST (Shipment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Shipment.editShipment (shipment) += editShipment(shipment);

    backgroundSkuUserShipmentDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserShipmentDetail);
 
    editSkuUserShipmentDetail 'Редактировать SKU' (d) = editSku(skuUserShipmentDetail(d));
    FORM userShipment 'Поставка'###sign
        OBJECTS s = UserShipment FIXED PANEL
        PROPERTIES (s) isPostedUserShipment, nameSupplierUserShipment ON CHANGE changeSupplier###supplierFilter###userShipment(s),
                       nameCustomerUserShipment ON CHANGE changeCustomer###customerFilter###userShipment(s),
                       nameSupplierStockUserShipment ON CHANGE changeSupplierStock###supplierFilter###userShipment(s),
                       nameCustomerStockUserShipment ON CHANGE changeCustomerStock###customerFilter###userShipment(s),
                       nameNumeratorUserShipment, numberUserShipment, seriesUserShipment, dateUserShipment, timeUserShipment,
                       nameCurrencyUserShipment, noteUserShipment, countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment,
                       sumUserShipmentDetailUserShipment

        OBJECTS d = UserShipmentDetail
        PROPERTIES (d) indexUserShipmentDetail
        PROPERTIES (d) ON EDIT editSkuUserShipmentDetail(d) idBarcodeSkuUserShipmentDetail BACKGROUND backgroundSkuUserShipmentDetail(d), 
                        nameSkuUserShipmentDetail BACKGROUND backgroundSkuUserShipmentDetail(d), shortNameUOMSkuUserShipmentDetail
        PROPERTIES (d) quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail, manufactureDateUserShipmentDetail, expiryDateUserShipmentDetail,
                       name###stockProp###stock###shipmentDetail ON CHANGE changeData###stockProp###stock###filter###userShipmentDetail(d), ADDOBJ, deletesd=DELETESESSION
        ORDER BY indexUserShipmentDetail(d)

        PROPERTIES(s) TODRAW d fillDocumentShipment, addDetailDialogSkuStockUserShipmentDetailUserShipment,
                               addDetailInputBarcodeDimensionUserShipmentDetailUserShipment, deleteUserShipmentDetailUserShipment
        FILTERS userShipmentUserShipmentDetail(d) == s

        EVENTS
            ON OK prePostUserShipment(s)

        EDIT UserShipment OBJECT s
    ;

    DESIGN userShipment FROM DEFAULT{
        main {
            preferredSize = (1024, 768);

            NEW header.box BEFORE functions.box {
                type = CONTAINERH;

                NEW headerRow1 {
                    fill = 1;
                    type = CONTAINERV;
                    
                    ADD s.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            ADD PROPERTY(isPostedUserShipment(s)) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            ADD PROPERTY(nameNumeratorUserShipment(s));
                            ADD PROPERTY(numberUserShipment(s));
                            ADD PROPERTY(seriesUserShipment(s));
                            ADD PROPERTY(dateUserShipment(s));
                            ADD PROPERTY(timeUserShipment(s));
                        }    
                    }                    
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            ADD PROPERTY(nameSupplierUserShipment(s));
                            ADD PROPERTY(nameSupplierStockUserShipment(s));
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            ADD PROPERTY(nameCustomerUserShipment(s));
                            ADD PROPERTY(nameCustomerStockUserShipment(s));
                        }
                    }

                    NEW headerTabbedPane {
                        fill = 1;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            ADD s.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = COLUMNS;
                            columns = 4;
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = COLUMNS;
                            columns = 2;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = COLUMNS;
                            columns = 3;
                        }
                    }
                }

                ADD s.documentSum {
                    columns = 1;
                }
            }

            NEW specification.box BEFORE functions.box{
                fill = 1;
                type = TABBED;
                ADD d.box;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserShipmentDetailUserShipment(s)) { preferredCharWidth = 13;}      
    }

    @defineDocumentSkuPriceListTypeSystemLedger(userShipment, accountPriceListType, stock, stockProp);
    @extendFormDocumentSku(userShipment, userShipment, s);

    addUserShipment 'Добавить' = ACTION ADDFORM UserShipment;
    editUserShipment 'Редактировать' (userShipment) = ACTION EDITFORM UserShipment;
    editShipment (shipment) += editUserShipment(shipment);
    overCopyShipmentDetail = ABSTRACT ACTION LIST (UserShipmentDetail, ShipmentDetail);
    overCopyShipment = ABSTRACT ACTION LIST (Shipment, UserShipment);

    copyShipment 'Копировать' = ACTION (shipment) NEWSESSION {
        FOR ADDOBJ s = UserShipment DO {
            ASSIGN supplierUserShipment(s) <- supplierShipment(shipment);
            ASSIGN supplierStockUserShipment(s) <- supplierStockShipment(shipment);
            ASSIGN customerUserShipment(s) <- customerShipment(shipment);
            ASSIGN customerStockUserShipment(s) <- customerStockShipment(shipment);
            ASSIGN currencyUserShipment(s) <- currencyShipment(shipment);
            ASSIGN noteUserShipment(s) <- noteShipment(shipment);

            EXEC overCopyShipment(shipment, s);

            FOR shipmentShipmentDetail(shipmentDetail) == shipment DO {
                FOR ADDOBJ d=UserShipmentDetail DO {
                    ASSIGN userShipmentUserShipmentDetail(d) <- s;
                    ASSIGN skuUserShipmentDetail(d) <- skuShipmentDetail(shipmentDetail);
                    ASSIGN quantityUserShipmentDetail(d) <- quantityShipmentDetail(shipmentDetail);
                    ASSIGN priceUserShipmentDetail(d) <- priceShipmentDetail(shipmentDetail);
                    ASSIGN expiryDateUserShipmentDetail(d) <- expiryDateShipmentDetail(shipmentDetail);
                    ASSIGN manufactureDateUserShipmentDetail(d) <- manufactureDateShipmentDetail(shipmentDetail);
                    ASSIGN data###stockProp###stock###userShipmentDetail(d) <- data###stockProp###stock###shipmentDetail(shipmentDetail);
                    
                    EXEC overCopyShipmentDetail(d, shipmentDetail);
                }
            }

            FORM userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopyUserShipmentDetail = ABSTRACT ACTION LIST (UserShipmentDetail, UserShipmentDetail);

    copyShipmentDetail 'Копировать' = ACTION (detail) {
        FOR ADDOBJ d = UserShipmentDetail DO {          

            ASSIGN userShipmentUserShipmentDetail(d) <- userShipmentUserShipmentDetail(detail);
            ASSIGN skuUserShipmentDetail(d) <- skuUserShipmentDetail(detail);
            ASSIGN quantityUserShipmentDetail(d) <- quantityUserShipmentDetail(detail);
            ASSIGN priceUserShipmentDetail(d) <- priceUserShipmentDetail(detail);
            ASSIGN data###stockProp###stock###userShipmentDetail(d) <- data###stockProp###stock###userShipmentDetail(detail);
            ASSIGN expiryDateUserShipmentDetail(d) <- expiryDateUserShipmentDetail(detail);
            ASSIGN manufactureDateUserShipmentDetail(d) <- manufactureDateUserShipmentDetail(detail);
            
            EXEC overCopyUserShipmentDetail(d, detail);                              
        }
    } TOOLBAR;
    
    EXTEND FORM userShipment PROPERTIES(d) copyShipmentDetail FORCE PANEL;
    EXTEND DESIGN userShipment { PROPERTY(copyShipmentDetail(d)) { focusable = FALSE; } }
     
    isUserOpenedShipment(s)=  isOpenedShipment(s) AND isUserShipment(s);
    
    filterShipmentDateFrom 'Дата с' = DATA SESSION DATE ();
    filterDateFromShipment (s) = dateShipment(s) >= filterShipmentDateFrom() OR (s IS Shipment AND NOT filterShipmentDateFrom());      
    
    filterShipmentDateTo 'Дата по' = DATA SESSION DATE ();
    filterDateToShipment (s) = dateShipment(s) <= filterShipmentDateTo() OR (s IS Shipment AND NOT filterShipmentDateTo());      
    
    filterShipmentCustomer  = DATA SESSION LegalEntity ();
    nameFilterShipmentCustomer 'Покупатель' = nameLegalEntity(filterShipmentCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerShipment (s) = customerShipment(s) == filterShipmentCustomer() OR (s IS Shipment AND NOT filterShipmentCustomer());    

    filterShipmentCustomerStock  = DATA SESSION Stock ();
    nameFilterShipmentCustomerStock 'Склад покупателя' = nameStock(filterShipmentCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStockShipment (s) = customerStockShipment(s) == filterShipmentCustomerStock() OR (s IS Shipment AND NOT filterShipmentCustomerStock());  

    filterShipmentSupplier = DATA SESSION LegalEntity ();
    nameFilterShipmentSupplier 'Поставщик' = nameLegalEntity(filterShipmentSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierShipment (s) = supplierShipment(s) == filterShipmentSupplier() OR (s IS Shipment AND NOT filterShipmentSupplier());      

    filterShipmentSupplierStock  = DATA SESSION Stock ();
    nameFilterShipmentSupplierStock 'Склад поставщика' = nameStock(filterShipmentSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStockShipment (s) = supplierStockShipment(s) == filterShipmentSupplierStock() OR (s IS Shipment AND NOT filterShipmentSupplierStock());      
    
    FORM shipments captions TITLE captions###sign
    
        PROPERTIES() filterShipmentDateFrom, filterShipmentDateTo, nameFilterShipmentSupplier, nameFilterShipmentSupplierStock, nameFilterShipmentCustomer, nameFilterShipmentCustomerStock
    
        OBJECTS s = Shipment
        PROPERTIES (s) READONLYIF isReadonly() isClosedShipment, isPostedShipment, numberShipment, seriesShipment, dateShipment, 
                       timeShipment, nameSupplierShipment, nameSupplierStockShipment, nameCustomerShipment,
                       nameCustomerStockShipment, nameCurrencyShipment
        PROPERTIES (s) READONLY countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment
        PROPERTIES (s) READONLYIF isReadonly() noteShipment
        PROPERTIES (s) READONLY FORCE PANEL createdNameUserUserShipment, createdTimeUserShipment, createdHostnameComputerUserShipment, 
                                            postedNameUserUserShipment, postedTimeUserShipment, postedHostnameComputerUserShipment

        PROPERTIES ()  addUserShipment TODRAW s
        PROPERTIES (s) editShipment SHOWIF isOpenedShipment(s), copyShipment
        PROPERTIES (s) closeUserShipment SHOWIF isOpenedUserShipment(s), openUserShipment SHOWIF isClosedUserShipment(s)

        PROPERTIES (s) deletes=DELETE FORCE PANEL TOOLBAR SHOWIF isUserOpenedShipment(s)

        OBJECTS d = ShipmentDetail
        PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail
        PROPERTIES (d) READONLY quantityShipmentDetail, priceShipmentDetail, sumShipmentDetail, manufactureDateShipmentDetail, expiryDateShipmentDetail, name###stockProp###stock###shipmentDetail
        ORDER BY indexShipmentDetail(d)
        FILTERS shipmentShipmentDetail(d) == s
        FILTERS filterDateFromShipment(s), 
                filterDateToShipment(s),
                filterSupplierShipment(s),
                filterSupplierStockShipment(s),
                filterCustomerShipment(s),
                filterCustomerStockShipment(s)
                
        DIALOG Shipment OBJECT s
    ;

    DESIGN shipments FROM DEFAULT {

        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {
                    caption = 'Фильтры';
                    type = CONTAINERH;          
                    ADD PROPERTY(filterShipmentDateFrom());
                    ADD PROPERTY(filterShipmentDateTo());
                    ADD PROPERTY(nameFilterShipmentSupplier());
                    ADD PROPERTY(nameFilterShipmentSupplierStock());
                    ADD PROPERTY(nameFilterShipmentCustomer());
                    ADD PROPERTY(nameFilterShipmentCustomerStock());                   
                }
                ADD s.box {
                    fill = 1;
                }
            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                ADD d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    ADD s.created;
                    ADD s.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                        ADD PROPERTY(copyShipment(s)) { caption = 'Поставка'###sign;}
                    }
                }
            }
        }
    }
    @extendFormEditable(shipments);
    @defineFilterIsOpened (shipment, shipments, s);
    
    editShipmentDetail 'Редактировать' = ABSTRACT ACTION LIST  (ShipmentDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    editUserShipmentDetail(d) = ACTION (d) NEWSESSION {
        FORM userShipment OBJECTS s = userShipmentUserShipmentDetail(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    
    editShipmentDetail(d) += editUserShipmentDetail(d);      
END

META defineShipmentBatch(stockProp)
    @defineDocumentInterfaceDetailBatch(shipment, batch);
    overCopyUserShipmentDetail(d, detail) += ACTION (d, detail) {      
        batchUserShipmentDetail(d) <- batchUserShipmentDetail(detail);
    } 
    overCopyShipmentDetail(d, detail) += ACTION (d, detail) {      
        batchUserShipmentDetail(d) <- batchShipmentDetail(detail);
    }     

    // История по правой кнопке мыши
    @defineBalancesBatch(shipmentDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userShipmentDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(shipmentDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userShipmentDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeSystemLedger(userShipment, accountPriceListType, stock, supplier);
    @extendFormDocumentBatch(userShipment, userShipment, s);

    // Подбор документа
    @implementDocumentBatch(shipment);
    replaceSkuBatch(s, b) += ACTION (s, b){ skuUserShipmentDetail(detail) <- s WHERE batchShipmentDetail(detail) == b;}
END

META defineShipmentBatchDialogStock(stockProp)

    changeBatchUserShipmentDetail = ACTION (userShipmentDetail) {
        FORM dialogBatchStock OBJECTS st = stockProp###userShipmentDetail(userShipmentDetail),
                                 t = dateTimeUserShipmentDetail(userShipmentDetail),
                                 sk = skuUserShipmentDetail(userShipmentDetail) DIALOG SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            batchUserShipmentDetail(userShipmentDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batchUserShipmentDetail(userShipmentDetail) <- NULL;
        }
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatchUserShipmentDetail ON CHANGE changeBatchUserShipmentDetail(d) AFTER shortNameUOMSkuUserShipmentDetail(d);
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatchShipmentDetail AFTER shortNameUOMSkuShipmentDetail(d);
END

META defineShipmentBatchDialog(dumb)

    changeBatchUserShipmentDetail = ACTION (userShipmentDetail) {
        FORM dialogBatch OBJECTS sk = skuUserShipmentDetail(userShipmentDetail) DIALOG SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            batchUserShipmentDetail(userShipmentDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            batchUserShipmentDetail(userShipmentDetail) <- NULL;
        }
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatchUserShipmentDetail ON CHANGE changeBatchUserShipmentDetail(d) AFTER shortNameUOMSkuUserShipmentDetail(d);
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatchShipmentDetail AFTER shortNameUOMSkuShipmentDetail(d);

END

META defineShipmentStockDestination(fromStock, toStock)
    Shipment.fromStockShipment(shipment) += fromStock##Shipment(shipment);
    Shipment.toStockShipment(shipment) += toStock##Shipment(shipment);
    Shipment.dataFromStockShipmentDetail(detail) += data###fromStock##ShipmentDetail(detail);
    Shipment.dataToStockShipmentDetail(detail) += data###toStock##ShipmentDetail(detail);
END