MODULE InvoiceShipment;

REQUIRE Invoice, Shipment;

NAMESPACE Shipment;

GROUP invoices 'Приемка по накладным' : base;

@defineDocumentAbstractDetailPricePrefix(invoice, shipment, ' учетная');
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, shipment, ' учетная');
@defineDocumentHeaderSumPrefix(invoice, shipment, ' учетная');

createShipmentInvoice 'Создать поставку' (invoice) = ABSTRACT BOOLEAN(Invoice);

invoiceDetailShipmentDetail = ABSTRACT InvoiceDetail (ShipmentDetail) PERSISTENT INDEXED;
descriptionIndexInvoiceDetailShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailShipmentDetail(detail));

@defineDocumentAbstractDetailQuantityCustomPrefix(invoiceDetail, shipment, ' (поставлено)');

quantityShipmentDetailInvoiceShipment (invoice, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY invoiceInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetail)), shipmentShipmentDetail(shipmentDetail);
relationInvoiceShipment 'Связь' (shipment) = GROUP SUM 1 IF quantityShipmentDetailInvoiceShipment (invoice, shipment) BY shipment;

invoicesShipment 'Накладные' (shipment) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityShipmentDetailInvoiceShipment(invoice, shipment) , ', '
                                                BY shipment
                                                ORDER invoice MINCHARWIDTH 30 PREFCHARWIDTH 50;

shippedInvoiceDetail 'Кол-во (поставлено)' (invoiceDetail) = GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
                                                                   BY invoiceDetailShipmentDetail(shipmentDetail) PERSISTENT;
                                                                   
shippedInvoice 'Кол-во (поставлено) по накладной' (invoice) = GROUP SUM shippedInvoiceDetail(detail)
                                                                   BY invoiceInvoiceDetail(detail) PERSISTENT;   
shippedNotChargeInvoice 'Кол-во (поставлено) по накладной (кроме услуг)' (invoice) = GROUP SUM shippedInvoiceDetail(detail) IF isNotChargeSku(skuInvoiceDetail(detail))
                                                                   BY invoiceInvoiceDetail(detail) PERSISTENT;   
                                                                   
notShippedInvoice (invoice) = invoice IS Invoice AND NOT shippedInvoice(invoice);
                                                                                                                                       
toShipInvoiceDetail 'Не поставлено' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) shippedInvoiceDetail(invoiceDetail);

toShipInvoiceDetailInvoice 'Не поставлено по накладной' (invoice) =
    GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0
          BY invoiceInvoiceDetail(invoiceDetail); 
                       
toShipNotChargeInvoiceDetailInvoice 'Не поставлено по накладной (кроме услуг)' (invoice) =
    GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0 AND isNotChargeSku(skuInvoiceDetail(invoiceDetail))
          BY invoiceInvoiceDetail(invoiceDetail);                       
          
addUserShipmentInvoice  = ABSTRACT ACTION CASE OVERRIDE (Invoice);

receiveShipmentInvoice 'Принять полностью' = ABSTRACT ACTION LIST (Invoice);

createMultiShipmentInvoice 'Принять полностью' = ACTION (invoice) NEWSESSION {
    IF createShipmentInvoice(invoice) THEN {
        MESSAGE 'Для данного инвойса уже создана накладная'; 
    } ELSE {
        receiveShipmentInvoice(invoice);
    }
    apply();
}

deleteCreateShipment  = ABSTRACT ACTION CASE OVERRIDE (Shipment);
deleteMultiShipment 'Удалить полностью' = ACTION (shipment) NEWSESSION {
    IF shipment IS Shipment AND NOT isUserShipment(shipment) THEN {
        deleteCreateShipment(shipment); 
    }
    apply();
}


isShippedInvoice = shippedInvoice(invoice) OR NOT quantityNotChargeInvoiceDetailInvoice(invoice) > 0.0;

statusShippedInvoice 'Статус приемки' (invoice)= IF isShippedInvoice (invoice) AND toShipNotChargeInvoiceDetailInvoice(invoice)  
                                                    THEN 'Расхождение'
                                                    ELSE 
                                                        IF isShippedInvoice (invoice) 
                                                            THEN 'Оприходована' 
                                                            ELSE 'Не оприходована' IF invoice IS Invoice;

backgroundShipInvoice 'Цвет' (invoice)= RGB(212,255,212) IF invoice IS Invoice AND NOT isShippedInvoice(invoice);  

META defineInvoiceShipment(sign, stockProp, filter, NS)

    invoiceDetailShipmentDetail = ABSTRACT InvoiceDetail (ShipmentDetail) PERSISTENT INDEXED;
    invoiceDetailUserShipmentDetail = DATA InvoiceDetail (UserShipmentDetail);
    invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailUserShipmentDetail(shipmentDetail);
    Shipment.invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailShipmentDetail(shipmentDetail);
    
    overCopyUserShipmentDetail(d, detail) += ACTION (d, detail) {      
        invoiceDetailUserShipmentDetail(d) <- invoiceDetailUserShipmentDetail(detail);             
    }   

    CONSTRAINT supplierShipmentDetail(detail) != supplierInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
        CHECKED BY invoiceDetailUserShipmentDetail
            MESSAGE 'Поставщик в накладной и поставке должны соответствовать друг другу';
    CONSTRAINT customerShipmentDetail(detail) != customerInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
        CHECKED BY invoiceDetailUserShipmentDetail
            MESSAGE 'Покупатель в накладной и поставке должны соответствовать друг другу';
    CONSTRAINT skuShipmentDetail(detail) != skuInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
        CHECKED BY invoiceDetailUserShipmentDetail
            MESSAGE 'Товар в накладной и поставке должны соответствовать друг другу';

    descriptionIndexInvoiceDetailShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailShipmentDetail(detail));
    descriptionIndexInvoiceDetailUserShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserShipmentDetail(detail));

    quantityShipmentDetailInvoiceShipment (invoice, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY invoiceInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetail)), shipmentShipmentDetail(shipmentDetail);
    relationInvoiceShipment 'Связь' (shipment) = GROUP SUM 1 IF quantityShipmentDetailInvoiceShipment (invoice, shipment) BY shipment;

    invoicesShipment 'Накладные' (shipment) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityShipmentDetailInvoiceShipment(invoice, shipment) , ', '
                                                    BY shipment
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    shippedInvoiceDetail 'Кол-во (поставлено)' (invoiceDetail) = GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
                                                                       BY invoiceDetailShipmentDetail(shipmentDetail) PERSISTENT;
                                                                       
    shippedInvoice 'Кол-во (поставлено) по накладной' (invoice) = GROUP SUM shippedInvoiceDetail(detail) IF isPostedInvoiceDetail(detail)
                                                                       BY invoiceInvoiceDetail(detail) PERSISTENT;  
    shippedNotChargeInvoice 'Кол-во (поставлено) по накладной (кроме услуг)' (invoice) = GROUP SUM shippedInvoiceDetail(detail) IF isPostedInvoiceDetail(detail) AND isNotChargeSku(skuInvoiceDetail(detail))
                                                                       BY invoiceInvoiceDetail(detail) PERSISTENT;                                                                           
                                                                         
                                                                                                                                          
    shipmentQuantityInvoiceDetailSkuInvoice 'Кол-во товара в документе' (sku, invoice) = 
        GROUP SUM shippedInvoiceDetail(idetail)
              BY  skuInvoiceDetail(idetail),
                  invoiceInvoiceDetail(idetail);
                                                                                                                                                              
    notShippedInvoice = NOT shippedInvoice(invoice);

    TABLE shipmentDetailBatch (ShipmentDetail, Batch);
    costShipmentDetailBatch = ABSTRACT NUMERIC[16,5] (ShipmentDetail, Batch) PERSISTENT;

    TABLE invoiceDetailBatch (InvoiceDetail, Batch);
    costInvoiceDetailBatch (invoiceDetail, batch) = GROUP SUM costShipmentDetailBatch(shipmentDetail, batch) BY invoiceDetailShipmentDetail(shipmentDetail), batch PERSISTENT;
    inInvoiceDetailBatch (invoiceDetail, batch) = [= GROUP SUM 1 IF costShipmentDetailBatch(shipmentDetail, batch) BY invoiceDetailShipmentDetail(shipmentDetail), batch](invoiceDetail, batch) OR 
                                                     batchInvoiceDetail(invoiceDetail) == batch PERSISTENT; // приходится делать OR, так как если количество 0, то партии не расписываются

    countBatchInvoiceDetail 'Кол-во партий' (invoiceDetail) = GROUP SUM 1 IF inInvoiceDetailBatch(invoiceDetail, batch) BY invoiceDetail PERSISTENT;
    maxBatchInvoiceDetail (invoiceDetail) = GROUP MAX batch IF inInvoiceDetailBatch(invoiceDetail, batch) BY invoiceDetail;

    toShipInvoiceDetail 'Не поставлено' (invoiceDetail) = quantityInvoiceDetail(invoiceDetail) (-) shippedInvoiceDetail(invoiceDetail);
    prevToShipInvoiceDetail 'Не поставлено' (invoiceDetail) = PREV(toShipInvoiceDetail(invoiceDetail));
    toShipInvoice 'Не поставлено' (invoice) = quantityInvoiceDetailInvoice(invoice) (-) shippedInvoice(invoice);

    toShipInvoiceDetailStockInvoice 'Не поставлено по складу' (stock, invoice) =
        GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0
              BY stockProp###InvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    toShipInvoiceDetailInvoice 'Не поставлено по накладной' (invoice) =
        GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0
              BY invoiceInvoiceDetail(invoiceDetail);
    toShipNotChargeInvoiceDetailInvoice 'Не поставлено по накладной (кроме услуг)' (invoice) =
        GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0 AND isNotChargeSku(skuInvoiceDetail(invoiceDetail))
              BY invoiceInvoiceDetail(invoiceDetail);
    // Создание поставки на основе инвойса //

    backgroundShippedInvoice 'Цвет' (invoice) = RGB(255, 224, 255) IF invoice IS Invoice;
    backgroundShippedInvoiceDetail (detail) = backgroundShippedInvoice(invoiceInvoiceDetail(detail));

    FORM shipmentInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity FIXED PANEL
        PROPERTIES (s) READONLY nameLegalEntity
        OBJECTS c = LegalEntity FIXED PANEL
        PROPERTIES (c) READONLY nameLegalEntity

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, seriesNumberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice,
                                noteInvoice
        FILTERS supplierInvoice(i) == s,
                customerInvoice(i) == c,
                isPostedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
        PROPERTIES (d) READONLY quantityInvoiceDetail, shippedInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       name###stockProp###InvoiceDetail, descriptionOrderInvoiceDetail
        FILTERS invoiceInvoiceDetail(d) == i

//        DIALOG Invoice OBJECT i
    ;

    DESIGN shipmentInvoices {
        main {
            preferredSize = (1024, 768);
            NEW header {
                type = CONTAINERH;
                MOVE s.box { caption = 'Поставщик';};
                MOVE c.box { caption = 'Покупатель';};
            }
            MOVE i.box;
            MOVE d.box;
            MOVE functions.box;
        }
    }
    overFillInvoiceUserShipmentInvoice = ABSTRACT ACTION LIST (UserShipment, Invoice);                          // документ
    overFillInvoiceUserShipmentDetailInvoiceDetail = ABSTRACT ACTION LIST (UserShipmentDetail, InvoiceDetail);  // детайл

    fillInvoiceUserShipment 'Заполнить на основе накладной' =  ACTION (userShipment) {
        FORM shipmentInvoices OBJECTS s = supplierUserShipment(userShipment), c = customerUserShipment(userShipment) MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL saleInvoice = Invoice();
            ASSIGN saleInvoice() <- chosenObject('i');
            EXEC overFillInvoiceUserShipmentInvoice(userShipment, saleInvoice());

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND
                toShipInvoiceDetail(invoiceDetail) > 0
                ADDOBJ d = UserShipmentDetail DO {
                    ASSIGN userShipmentUserShipmentDetail(d) <- userShipment;
                    ASSIGN invoiceDetailUserShipmentDetail(d) <- invoiceDetail;
                    ASSIGN orderUserShipmentDetail(d) <- orderInvoiceDetail(invoiceDetail);

                    ASSIGN skuUserShipmentDetail(d) <- skuInvoiceDetail(invoiceDetail);

                    ASSIGN quantityUserShipmentDetail (d) <- toShipInvoiceDetail(invoiceDetail);

                    EXEC overFillInvoiceUserShipmentDetailInvoiceDetail(d, invoiceDetail);
            }
        }
    } IN invoice;

// Создание поставки на основе нескольких инвойсов //

    TABLE invoiceUserShipment (Invoice, UserShipment);
    includeInvoiceUserShipment 'Вкл. в приемку' = DATA BOOLEAN (Invoice, UserShipment) MINCHARWIDTH 10 PREFCHARWIDTH 15;
    includeInvoicesUserShipment 'Накладные в приемке' (userShipment) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF includeInvoiceUserShipment(invoice, userShipment) , ', '
                                                        BY userShipment
                                                        ORDER invoice IN invoices MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT;
    FORM includeInvoicesUserShipment 'Накладные'
        OBJECTS s = UserShipment FIXED PANEL

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, seriesNumberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice,
                                noteInvoice

        FILTERS supplierInvoice(i) == supplierUserShipment(s),
                customerInvoice(i) == customerUserShipment(s),
                supplierStockInvoice(i) == supplierStockUserShipment(s),
                customerStockInvoice(i) == customerStockUserShipment(s),
                isPostedInvoice(i),
                toShipInvoiceDetailInvoice(i)
        PROPERTIES(i,s) BACKGROUND backgroundShippedInvoice(i) includeInvoiceUserShipment BEFORE isPostedInvoice(i)
    ;

    dialogIncludeInvoicesUserShipment 'Включить накладные в поставку' (userShipment) = ACTION FORM includeInvoicesUserShipment OBJECTS s = userShipment MODAL IN invoices;

    shipmentDimensionInvoiceDetail = ABSTRACT ShipmentDimension (InvoiceDetail);
    nameShipmentDimensionInvoiceDetail 'Регистр хранения' (detail) = nameShipmentDimension(shipmentDimensionInvoiceDetail(detail));
    shipmentDimensionUserInvoiceDetail = ABSTRACT ShipmentDimension (UserInvoiceDetail);
    nameShipmentDimensionUserInvoiceDetail 'Регистр хранения' (detail) = nameShipmentDimension(shipmentDimensionUserInvoiceDetail(detail));
    shipmentDimensionInvoiceDetail(detail) += shipmentDimensionUserInvoiceDetail(detail);
    defaultInvoiceDetailSkuUserShipment (sku, userShipment) = GROUP MAX detail IF includeInvoiceUserShipment(invoiceInvoiceDetail(detail), userShipment)
        BY skuInvoiceDetail(detail), userShipment;
    defaultInvoiceDetailSkuDimensionUserShipment (sku, dimension, userShipment) = GROUP MAX detail IF includeInvoiceUserShipment(invoiceInvoiceDetail(detail), userShipment)
        BY skuInvoiceDetail(detail), shipmentDimensionInvoiceDetail(detail), userShipment;

    fillInvoiceDetailUserShipmentDetailDimension 'Привязать поставку к накладным' = ACTION (detail, dimension) {

        invoiceDetailUserShipmentDetail(detail) <- IF dimension IS ShipmentDimension
                                    THEN defaultInvoiceDetailSkuDimensionUserShipment(skuUserShipmentDetail(detail), dimension, userShipmentUserShipmentDetail(detail))
                                    ELSE defaultInvoiceDetailSkuUserShipment(skuUserShipmentDetail(detail), userShipmentUserShipmentDetail(detail));
    };

    fillInvoiceDetailUserShipmentDimension 'Привязать поставку к накладным' = ACTION (userShipment, dimension) {
        FOR userShipmentUserShipmentDetail(detail) == userShipment DO {
            EXEC fillInvoiceDetailUserShipmentDetailDimension(detail, dimension);
        }
    } IN invoices;
    fillInvoiceDetailUserShipment 'Привязать поставку к накладным' (userShipment) = ACTION fillInvoiceDetailUserShipmentDimension(userShipment, shipmentDimensionUserShipment(userShipment)) IN invoices;

    WHEN SESSION FORMS userShipment
        (CHANGED(shipmentDimensionUserShipmentDetail(detail)) OR CHANGED(skuUserShipmentDetail(detail))) AND NOT invoiceDetailUserShipmentDetail(detail) AND s==shipmentDimensionUserShipmentDetail(detail)
            DO EXEC fillInvoiceDetailUserShipmentDetailDimension(detail, s);

    EXTEND FORM userShipment
        PROPERTIES(s) fillInvoiceUserShipment, invoicesShipment READONLY
        PROPERTIES(s) dialogIncludeInvoicesUserShipment, includeInvoicesUserShipment READONLY, fillInvoiceDetailUserShipment
        PROPERTIES(d) descriptionIndexInvoiceDetailUserShipmentDetail BEFORE deletesd
    ;
    DESIGN userShipment {
        headerCreateDetail {
            MOVE s.invoice {
                type = CONTAINERV;
            }
            MOVE s.invoices {
                type = CONTAINERV;
            }
        }
    }


    EXTEND FORM shipments
        PROPERTIES(s) READONLY invoicesShipment
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetailShipmentDetail
    ;

//-- агр.объект

    @defineDocumentInterfaceDetailPricePrefix(invoice, shipment, ' (учетная)');
    Shipment.shipmentPriceInvoiceDetail(detail) += shipmentPriceInvoiceDetail(detail);
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, shipment, ' (поставлено)');
    Shipment.shipmentQuantityInvoiceDetail(d)+=shipmentQuantityInvoiceDetail(d);
    @defineDocumentInterfaceHeaderQuantityCustomPrefix (invoice, invoiceDetail, shipment, ' (поставлено)');
    
    skipChangedShipmentQuantityUserInvoiceDetail = ABSTRACT BOOLEAN (UserInvoiceDetail);
    shipmentQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail) WHEN CHANGED(quantityUserInvoiceDetail(detail)) AND NOT skipChangedShipmentQuantityUserInvoiceDetail(detail);

    @defineDocumentInterfaceDetailDataSumPrefix (invoice, shipment, ' (учетная)');
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, shipment, currency, shipmentQuantity, priceRound);
    Shipment.shipmentSumInvoiceDetail(detail) += shipmentSumInvoiceDetail(detail);
    @defineDocumentInterfaceHeaderCreateShipment (invoice);
    Shipment.createShipmentInvoice(invoice) += createShipmentInvoice(invoice);
    @defineDocumentInterfaceHeaderSumPrefix (invoice, shipment, ' (учетная)');

    @defineDocumentInterfaceHeaderItemSum (invoice, shipment, shipment);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, shipment, shipment, , VAT);
    @defineDocumentInterfaceHeaderTimePrefix(Invoice, shipment, ' поставки');
    shipmentDateUserInvoice(i) <- dateUserInvoice(i) WHEN CHANGED(dateUserInvoice(i));
    shipmentTimeUserInvoice(i) <- timeUserInvoice(i) WHEN CHANGED(timeUserInvoice(i));
    @defineDocumentInterfaceDetailTimePrefix(invoice, InvoiceDetail, shipment,' поставки');
    @defineDocumentInterfaceDetailExpiryDate(invoice);
    @defineDocumentInterfaceDetailManufactureDate(invoice);
    
    overExpiryDateInvoiceDetail = ABSTRACT DATE (InvoiceDetail);
    calcExpiryDateInvoiceDetail (d) = OVERRIDE 
        (IF expiryMonthSku(skuUserInvoiceDetail(d)) 
            THEN sumDateMonth(manufactureDateInvoiceDetail(d), expiryMonthSku(skuInvoiceDetail(d)))
            ELSE sumDate(manufactureDateInvoiceDetail(d), expiryDaysSku(skuInvoiceDetail(d)))),
        overExpiryDateInvoiceDetail(d);
        
    WHEN SESSION FORMS userInvoice (CHANGED(manufactureDateInvoiceDetail(d)) OR CHANGED(skuUserInvoiceDetail(d))) AND NOT batchUserInvoiceDetail(d) AND manufactureDateInvoiceDetail(d) DO {
        expiryDateUserInvoiceDetail(d) <- calcExpiryDateInvoiceDetail(d);            
    } 
    overManufactureDateInvoiceDetail = ABSTRACT DATE (InvoiceDetail);
    calcManufactureDateInvoiceDetail (d) = OVERRIDE 
        (IF expiryMonthSku(skuUserInvoiceDetail(d)) 
            THEN sumDateMonth(expiryDateInvoiceDetail(d), -expiryMonthSku(skuInvoiceDetail(d)))
            ELSE sumDate(expiryDateInvoiceDetail(d), -expiryDaysSku(skuInvoiceDetail(d)))),
        overManufactureDateInvoiceDetail(d);     
           
    WHEN SESSION FORMS userInvoice (CHANGED(expiryDateInvoiceDetail(d)) OR CHANGED(skuUserInvoiceDetail(d))) AND NOT batchUserInvoiceDetail(d) AND expiryDateInvoiceDetail(d) DO {
        manufactureDateUserInvoiceDetail(d) <- calcManufactureDateInvoiceDetail(d);            
    }            

    conformityShipmentDateInvoices 'Соответствие даты поставки с датой накладной '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##conformityShipmentDateInvoices = conformityShipmentDateInvoices
    ;
    
    DESIGN options {
        invoice##NS {
            MOVE PROPERTY(NS##conformityShipmentDateInvoices);
        }
    }

    CONSTRAINT isPostedUserInvoice(i) AND conformityShipmentDateInvoices() AND NOT (shipmentDateUserInvoice(i)==dateUserInvoice(i))
        MESSAGE 'Дата поставки должна быть равна дате накладной '##sign; 
    
    overCopyInvoice(s, d) += ACTION (s, d) {
        ASSIGN createShipmentUserInvoice(d) <- createShipmentUserInvoice(s);
    }

    skipCreateShipmentInvoiceDetail = ABSTRACT BOOLEAN (InvoiceDetail) PERSISTENT;
    createShipmentInvoiceDetail 'Создать поставку' (invoiceDetail) = createShipmentInvoice(invoiceInvoiceDetail(invoiceDetail)) AND
                                                                     isStockSkuInvoiceDetail(invoiceDetail) AND
                                                                     NOT skipCreateShipmentInvoiceDetail(invoiceDetail) PERSISTENT;

    createShipmentUserInvoiceDetail 'Создать поставку' (invoiceDetail) = createShipmentUserInvoice(userInvoiceUserInvoiceDetail(invoiceDetail)) AND
                                                                         isStockSkuUserInvoiceDetail(invoiceDetail);

    showShipmentInvoice (invoice) =  invoice IS Invoice AND NOT createShipmentInvoice(invoice);
    
    skipShowShipmentQuantityInvoice = ABSTRACT BOOLEAN (Invoice);
    showShipmentQuantityInvoice = createShipmentInvoice(invoice) AND NOT skipShowShipmentQuantityInvoice(invoice);

        EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundShippedInvoice(i) createShipmentUserInvoice
        PROPERTIES(i) BACKGROUND backgroundShippedInvoice(i) SHOWIF createShipmentUserInvoice(i) shipmentSumUserInvoiceDetailUserInvoice,
                      shipmentDateUserInvoice, shipmentTimeUserInvoice
        PROPERTIES(d) BEFORE deleteid SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
                      manufactureDateUserInvoiceDetail, expiryDateUserInvoiceDetail, name###stockProp###userInvoiceDetail ON CHANGE changeData###stockProp###filter###userInvoiceDetail(d), shipmentSumUserInvoiceDetail
        PROPERTIES(d) BEFORE deleteid BACKGROUND backgroundShippedInvoice(i) shipmentPriceUserInvoiceDetail
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail(d) SHOWIF showShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
        PROPERTIES(d) shipmentQuantityUserInvoiceDetail AFTER quantityUserInvoiceDetail(d) SHOWIF showShipmentQuantityInvoice(i) BACKGROUND backgroundShippedInvoice(i)
    ;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateShipment {
                caption = 'Поставка';
                type = CONTAINERH;
                MOVE PROPERTY(createShipmentUserInvoice(i));
                MOVE PROPERTY(shipmentDateUserInvoice(i));
                MOVE PROPERTY(shipmentTimeUserInvoice(i));
            }
            PROPERTY(shipmentSumUserInvoiceDetailUserInvoice(i)) { preferredCharWidth = 13;}                       
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) READONLY BACKGROUND backgroundShippedInvoice(i) shipmentSumInvoiceDetailInvoice BEFORE ordersInvoice(i)
        PROPERTIES(d) READONLY SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
                      manufactureDateInvoiceDetail, expiryDateInvoiceDetail, name###stockProp###invoiceDetail, shipmentPriceInvoiceDetail, shipmentSumInvoiceDetail
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityInvoiceDetail(d) SHOWIF showShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
        PROPERTIES(d) READONLY shipmentQuantityInvoiceDetail AFTER quantityInvoiceDetail(d) SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
        FILTERGROUP filter11
                    FILTER  'Непоставленные товары' NOT shippedInvoiceDetail(d) == quantityInvoiceDetail (d) 'F10'  
    ;
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY BACKGROUND backgroundShippedInvoice(i)  toShipInvoiceDetail, shipmentPriceInvoiceDetail
    ;
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {
        manufactureDateUserInvoiceDetail(d) <- manufactureDateUserInvoiceDetail(detail);  
        expiryDateUserInvoiceDetail(d) <- expiryDateUserInvoiceDetail(detail);
        //shipmentPriceUserInvoiceDetail(d) <- shipmentPriceUserInvoiceDetail(detail);           
    }        
    

    CLASS InvoiceShipment 'Поставка на основе накладной'###sign : Shipment;
    CLASS InvoiceShipmentDetail 'Строка поставки на основе накладной'###sign : ShipmentDetail;

    @defineDocumentTables(invoiceShipment);

    @defineDocumentAggregation(invoice, invoiceShipment, createShipment);
    shipmentShipmentDetail(detail) += invoiceShipmentInvoiceShipmentDetail(detail);

    indexShipmentDetail(detail) += indexInvoiceShipmentDetail(detail);

    dateShipment(shipment) += shipmentDateInvoice(invoiceInvoiceShipment(shipment));
    timeShipment(shipment) += shipmentTimeInvoice(invoiceInvoiceShipment(shipment));

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, supplier, 'Склад поставщика', , );
    supplierStockShipment(shipment) += supplierStockInvoiceShipment(shipment);
    dataSupplierStockShipmentDetail(shipmentDetail) += dataSupplierStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, customer, 'Склад покупателя', , );
    customerStockShipment(shipment) += customerStockInvoiceShipment(shipment);
    dataCustomerStockShipmentDetail(shipmentDetail) += dataCustomerStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceShipment, supplier, 'Поставщик', , );
    supplierShipment(shipment) += supplierInvoiceShipment(shipment);
    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceShipment, customer, 'Покупатель', , );
    customerShipment(shipment) += customerInvoiceShipment(shipment);

    @defineDocumentAggregationPosted(invoice, invoiceShipment);
    isPostedShipment(shipment) += isPostedInvoiceShipment(shipment);

    @defineDocumentAggregationClosed(invoice, invoiceShipment);
    isClosedShipment(shipment) += isClosedInvoiceShipment(shipment);

    numberInvoiceShipment 'Номер документа' (invoiceShipment) = numberInvoice(invoiceInvoiceShipment(invoiceShipment));
    numberShipment(shipment) += numberInvoiceShipment(shipment);

    seriesInvoiceShipment 'Серия документа' (invoiceShipment) = seriesInvoice(invoiceInvoiceShipment(invoiceShipment));
    seriesShipment(shipment) += seriesInvoiceShipment(shipment);

    seriesNumberInvoiceShipment 'Серия/номер документа' (invoiceShipment) = seriesNumberInvoice(invoiceInvoiceShipment(invoiceShipment));

    noteInvoiceInvoiceShipment 'Примечание' (invoiceShipment) = noteInvoice(invoiceInvoiceShipment(invoiceShipment));
    noteShipment(shipment) += noteInvoiceInvoiceShipment(shipment);

    currencyInvoiceShipment  (invoiceShipment) = currencyInvoice(invoiceInvoiceShipment(invoiceShipment));
    currencyShipment (shipment) += currencyInvoiceShipment(shipment);

    @defineDocumentDescription(invoiceShipment, InvoiceShipmentDetail, 'Поставка на основе накладной'###sign);
    descriptionShipment (shipment) += descriptionInvoiceShipment(shipment);

    @defineDocumentAggregationDetailProperty (invoice, invoiceShipment, order, 'Заказ');
    orderShipmentDetail (shipmentDetail) += orderInvoiceShipmentDetail(shipmentDetail);

    @defineDocumentAggregationDetailSku(invoice, invoiceShipment, sku);
    skuShipmentDetail(shipmentDetail) +=  skuInvoiceShipmentDetail(shipmentDetail);

    quantityShipmentDetail(shipmentDetail) += shipmentQuantityInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    expiryDateShipmentDetail(shipmentDetail) += expiryDateInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    manufactureDateShipmentDetail(shipmentDetail) += manufactureDateInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

    priceInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentPriceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    priceShipmentDetail(shipmentDetail) += priceInvoiceShipmentDetail(shipmentDetail);

    sumInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentSumInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    sumShipmentDetail(shipmentDetail) += sumInvoiceShipmentDetail(shipmentDetail);

    invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailInvoiceShipmentDetail(shipmentDetail);

    editShipment(shipment) += ACTION editInvoice(invoiceInvoiceShipment(shipment));
    closeShipment(shipment) += ACTION closeInvoice(invoiceInvoiceShipment(shipment));
    editShipmentDetail(d) += ACTION editInvoiceDetail(invoiceDetailInvoiceShipmentDetail(d));
    
    createdUserShipment(shipment) += createdUserInvoice(invoiceInvoiceShipment(shipment));
    
    // цены в подборе
    @extendFormDocumentPriceSku(userInvoice, accountPriceListType, stockProp, ' учетная', userInvoice, i, is);
    @extendFormDocumentPriceBatch(userInvoice, accountPriceListType, stockProp, ' учетная', userInvoice, i, is);
END

META defineInvoiceShipmentBatch(dumb)
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY nameBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail(d)
    ;

    overFillInvoiceUserShipmentDetailInvoiceDetail (sd, id) += ACTION ASSIGN batchUserShipmentDetail (sd) <- batchInvoiceDetail(id);

    @defineDocumentAggregationDetailBatch (invoice, invoiceShipment);
    batchShipmentDetail (shipmentDetail) += batchInvoiceShipmentDetail(shipmentDetail);

    expiryDateUserInvoiceDetail(detail) <- prevExpiryDateBatch(batchUserInvoiceDetail(detail)) WHEN CHANGED (batchUserInvoiceDetail(detail));
    manufactureDateUserInvoiceDetail(detail) <- prevManufactureDateBatch(batchUserInvoiceDetail(detail)) WHEN CHANGED (batchUserInvoiceDetail(detail));
END

META defineInvoiceShipmentPack(dumb)
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY SHOWIF showPack##Invoice(i) BEFORE quantityInvoiceDetail(d)
                       idBarcodePackInvoiceDetail, shortNameUOMPackInvoiceDetail,
                       amountPackInvoiceDetail, packQuantityInvoiceDetail
    ;
    overFillInvoiceUserShipmentDetailInvoiceDetail(s, i) += ACTION (s, i) {
        ASSIGN barcodePackUserShipmentDetail(s) <- barcodePackInvoiceDetail(i);
        ASSIGN amountPackUserShipmentDetail(s) <- amountPackInvoiceDetail(i);
        ASSIGN packQuantityUserShipmentDetail(s) <- toShipInvoiceDetail(i)/amountPackInvoiceDetail(i);
    }

    showPackShipment(shipment) += showPackInvoice(invoiceInvoiceShipment(shipment));
    barcodePackShipmentDetail(shipmentDetail) +=  barcodePackInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    amountPackShipmentDetail(shipmentDetail) +=  amountPackInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    packQuantityShipmentDetail(shipmentDetail) +=  packQuantityInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
END

//-- Действие

META defineInvoiceShipmentAction (sign)
    addUserShipmentInvoice 'Поставка'###sign =  ACTION (invoice) NEWSESSION{

        FOR ADDOBJ s = UserShipment DO {

            ASSIGN supplierUserShipment(s) <- supplierInvoice(invoice);
            ASSIGN supplierStockUserShipment(s) <- supplierStockInvoice(invoice);
            ASSIGN customerUserShipment(s) <- customerInvoice(invoice);
            ASSIGN customerStockUserShipment(s) <- customerStockInvoice(invoice);
            ASSIGN currencyUserShipment(s) <- currencyInvoice(invoice);
            ASSIGN numberUserShipment(s) <- numberInvoice(invoice);
            ASSIGN seriesUserShipment(s) <- seriesInvoice(invoice);
            ASSIGN noteUserShipment(s) <- noteInvoice(invoice);
            EXEC overFillInvoiceUserShipmentInvoice(s, invoice);

            FOR invoiceInvoiceDetail(detail) == invoice  ADDOBJ d = UserShipmentDetail DO {
                userShipmentUserShipmentDetail(d) <- s;
                invoiceDetailUserShipmentDetail(d) <- detail;
                orderUserShipmentDetail(d) <- orderInvoiceDetail(detail);

                dataCustomerStockUserShipmentDetail(d) <- dataCustomerStockInvoiceDetail(detail);
                dataSupplierStockUserShipmentDetail(d) <- dataSupplierStockInvoiceDetail(detail);

                skuUserShipmentDetail(d) <- skuInvoiceDetail(detail);
                quantityUserShipmentDetail (d) <- toShipInvoiceDetail(detail);
                
                priceUserShipmentDetail(d) <- shipmentPriceInvoiceDetail(detail);
                EXEC overFillInvoiceUserShipmentDetailInvoiceDetail(d, detail);
            }

            FORM userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    Shipment.addUserShipmentInvoice(invoice) += WHEN invoice IS Invoice THEN ACTION addUserShipmentInvoice(invoice);

    EXTEND FORM invoices
        PROPERTIES(i) addUserShipmentInvoice
    ;
    DESIGN invoices {
        createdContainer{
            MOVE PROPERTY(addUserShipmentInvoice(i));
        }
    }
END

