MODULE InvoiceShipment;

REQUIRE Invoice, Shipment;

NAMESPACE Shipment;

GROUP invoices 'Приемка по накладным' : base;

@defineDocumentAbstractDetailPricePrefix(invoice, shipment, ' учетная');
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, shipment, ' учетная');
@defineDocumentHeaderSumPrefix(invoice, shipment, ' учетная');

META defineInvoiceShipment(sign, stockProp, filter)

    invoiceDetailShipmentDetail = ABSTRACT InvoiceDetail (ShipmentDetail) PERSISTENT;
    invoiceDetailUserShipmentDetail = DATA InvoiceDetail (UserShipmentDetail);
    invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailUserShipmentDetail(shipmentDetail);
    
    overCopyUserShipmentDetail(d, detail) += ACTION (d, detail) {      
        invoiceDetailUserShipmentDetail(d) <- invoiceDetailUserShipmentDetail(detail);             
    }   

    CONSTRAINT supplierShipmentDetail(detail) != supplierInvoiceDetail(invoiceDetailUserShipmentDetail(detail)) OR
               customerShipmentDetail(detail) != customerInvoiceDetail(invoiceDetailUserShipmentDetail(detail)) OR
               skuShipmentDetail(detail) != skuInvoiceDetail(invoiceDetailUserShipmentDetail(detail))
        CHECKED BY invoiceDetailUserShipmentDetail
            MESSAGE 'Поставщик, покупатель и товар в накладной и поставке должны соответствовать друг другу';


    descriptionIndexInvoiceDetailShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailShipmentDetail(detail));
    descriptionIndexInvoiceDetailUserShipmentDetail 'Строка накладной' (detail) = descriptionIndexInvoiceDetail(invoiceDetailUserShipmentDetail(detail));

    quantityShipmentDetailInvoiceShipment (invoice, shipment) = GROUP SUM quantityShipmentDetail(shipmentDetail) BY invoiceInvoiceDetail(invoiceDetailShipmentDetail(shipmentDetail)), shipmentShipmentDetail(shipmentDetail);
    relationInvoiceShipment 'Связь' (shipment) = GROUP SUM 1 IF quantityShipmentDetailInvoiceShipment (invoice, shipment) BY shipment;

    invoicesShipment 'Накладные' (shipment) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF quantityShipmentDetailInvoiceShipment(invoice, shipment) , ', '
                                                    BY shipment
                                                    ORDER invoice IN invoice MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

    shippedInvoiceDetail 'Кол-во (поставлено)' (invoiceDetail) = GROUP SUM quantityShipmentDetail(shipmentDetail) IF isPostedShipmentDetail(shipmentDetail)
                                                                       BY invoiceDetailShipmentDetail(shipmentDetail) PERSISTENT;
                                                                       
    shippedInvoice 'Кол-во (поставлено) по накладной' (invoice) = GROUP SUM shippedInvoiceDetail(detail) IF isPostedInvoiceDetail(detail)
                                                                       BY invoiceInvoiceDetail(detail) PERSISTENT;                                                                       

    TABLE shipmentDetailBatch (ShipmentDetail, Batch);
    costShipmentDetailBatch = ABSTRACT NUMERIC[14,3] (ShipmentDetail, Batch) PERSISTENT;

    TABLE invoiceDetailBatch (InvoiceDetail, Batch);
    countShipmentDetailInvoiceDetailBatch (invoiceDetail, batch) = GROUP SUM 1 IF costShipmentDetailBatch(shipmentDetail, batch) BY invoiceDetailShipmentDetail(shipmentDetail), batch PERSISTENT;

    countBatchInvoiceDetail 'Кол-во партий' (invoiceDetail) = GROUP SUM 1 IF countShipmentDetailInvoiceDetailBatch(invoiceDetail, batch) BY invoiceDetail PERSISTENT;
    maxBatchInvoiceDetail (invoiceDetail) = GROUP MAX batch IF countShipmentDetailInvoiceDetailBatch(invoiceDetail, batch) BY invoiceDetail;

    toShipInvoiceDetail 'Не поставлено' (invoiceDetail) = quantityInvoiceDetail (invoiceDetail) (-) shippedInvoiceDetail(invoiceDetail);

    toShipInvoiceDetailStockInvoice 'Не поставлено по складу' (stock, invoice) =
        GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0
              BY stockProp###InvoiceDetail(invoiceDetail), invoiceInvoiceDetail(invoiceDetail);

    toShipInvoiceDetailInvoice 'Не поставлено по накладной' (invoice) =
        GROUP SUM toShipInvoiceDetail(invoiceDetail) IF toShipInvoiceDetail(invoiceDetail) > 0
              BY invoiceInvoiceDetail(invoiceDetail);

    // Создание поставки на основе инвойса //

    backgroundShippedInvoice 'Цвет' (invoice) = RGB(255, 224, 255) IF invoice IS Invoice;
    backgroundShippedInvoiceDetail (detail) = backgroundShippedInvoice(invoiceInvoiceDetail(detail));

    FORM shipmentInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity FIXED PANEL
        PROPERTIES (s) READONLY nameLegalEntity
        OBJECTS c = LegalEntity FIXED PANEL
        PROPERTIES (c) READONLY nameLegalEntity

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, seriesNumberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice,
                                noteInvoice
        FILTERS supplierInvoice(i) == s,
                customerInvoice(i) == c,
                isPostedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY indexInvoiceDetail, idBarcodeSkuInvoiceDetail, nameSkuInvoiceDetail, shortNameUOMSkuInvoiceDetail
        PROPERTIES (d) READONLY quantityInvoiceDetail, shippedInvoiceDetail, priceInvoiceDetail, sumInvoiceDetail,
                       numberVATInvoiceDetail, valueVATInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail,
                       name###stockProp###InvoiceDetail, descriptionOrderInvoiceDetail
        FILTERS invoiceInvoiceDetail(d) == i

        DIALOG Invoice OBJECT i
    ;

    DESIGN shipmentInvoices FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW header {
                type = CONTAINERH;
                ADD s.box { caption = 'Поставщик';};
                ADD c.box { caption = 'Покупатель';};
            }
            ADD i.box;
            ADD d.box;
            ADD functions.box;
        }
    }
    overFillInvoiceUserShipmentInvoice = ABSTRACT ACTION LIST (UserShipment, Invoice);                          // документ
    overFillInvoiceUserShipmentDetailInvoiceDetail = ABSTRACT ACTION LIST (UserShipmentDetail, InvoiceDetail);  // детайл

    fillInvoiceUserShipment 'Заполнить на основе накладной' =  ACTION (userShipment) {
        FORM shipmentInvoices OBJECTS s = supplierUserShipment(userShipment), c = customerUserShipment(userShipment) MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL saleInvoice = Invoice();
            ASSIGN saleInvoice() <- chosenObject('i');
            EXEC overFillInvoiceUserShipmentInvoice(userShipment, saleInvoice());

            FOR invoiceInvoiceDetail(invoiceDetail) == saleInvoice() AND
                toShipInvoiceDetail(invoiceDetail) > 0
                ADDOBJ d = UserShipmentDetail DO {
                    ASSIGN userShipmentUserShipmentDetail(d) <- userShipment;
                    ASSIGN invoiceDetailUserShipmentDetail(d) <- invoiceDetail;
                    ASSIGN orderUserShipmentDetail(d) <- orderInvoiceDetail(invoiceDetail);

                    ASSIGN skuUserShipmentDetail(d) <- skuInvoiceDetail(invoiceDetail);

                    ASSIGN quantityUserShipmentDetail (d) <- toShipInvoiceDetail(invoiceDetail);

                    EXEC overFillInvoiceUserShipmentDetailInvoiceDetail(d, invoiceDetail);
            }
        }
    } IN invoice;

// Создание поставки на основе нескольких инвойсов //

    TABLE invoiceUserShipment (Invoice, UserShipment);
    includeInvoiceUserShipment 'Вкл. в приемку' = DATA BOOLEAN (Invoice, UserShipment) MINCHARWIDTH 10 PREFCHARWIDTH 15;
    includeInvoicesUserShipment 'Накладные в приемке' (userShipment) = GROUP CONCAT VARSTRING[255](descriptionInvoice(invoice)) IF includeInvoiceUserShipment(invoice, userShipment) , ', '
                                                        BY userShipment
                                                        ORDER invoice IN invoices MINCHARWIDTH 30 PREFCHARWIDTH 30 PERSISTENT;
    FORM includeInvoicesUserShipment 'Накладные'
        OBJECTS s = UserShipment FIXED PANEL

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPostedInvoice, numberInvoice, seriesInvoice, dateInvoice, timeInvoice,
                                nameSupplierInvoice, nameSupplierStockInvoice, nameCustomerInvoice, nameCustomerStockInvoice,
                                nameCurrencyInvoice, seriesNumberContractSkuInvoice, isCommissionInvoice,
                                countInvoiceDetailInvoice, quantityInvoiceDetailInvoice, sumInvoiceDetailInvoice,
                                VATSumInvoiceDetailInvoice, invoiceSumInvoiceDetailInvoice, ordersInvoice,
                                noteInvoice

        FILTERS supplierInvoice(i) == supplierUserShipment(s),
                customerInvoice(i) == customerUserShipment(s),
                supplierStockInvoice(i) == supplierStockUserShipment(s),
                customerStockInvoice(i) == customerStockUserShipment(s),
                isPostedInvoice(i),
                toShipInvoiceDetailInvoice(i)
        PROPERTIES(i,s) BACKGROUND backgroundShippedInvoice(i) includeInvoiceUserShipment BEFORE isPostedInvoice(i)
    ;

    dialogIncludeInvoicesUserShipment 'Включить накладные в поставку' (userShipment) = ACTION FORM includeInvoicesUserShipment OBJECTS s = userShipment MODAL IN invoices;

    shipmentDimensionInvoiceDetail = ABSTRACT ShipmentDimension (InvoiceDetail);
    nameShipmentDimensionInvoiceDetail 'Регистр хранения' (detail) = nameShipmentDimension(shipmentDimensionInvoiceDetail(detail));
    shipmentDimensionUserInvoiceDetail = ABSTRACT ShipmentDimension (UserInvoiceDetail);
    nameShipmentDimensionUserInvoiceDetail 'Регистр хранения' (detail) = nameShipmentDimension(shipmentDimensionUserInvoiceDetail(detail));
    shipmentDimensionInvoiceDetail(detail) += shipmentDimensionUserInvoiceDetail(detail);
    defaultInvoiceDetailSkuUserShipment (sku, userShipment) = GROUP MAX detail IF includeInvoiceUserShipment(invoiceInvoiceDetail(detail), userShipment)
        BY skuInvoiceDetail(detail), userShipment;
    defaultInvoiceDetailSkuDimensionUserShipment (sku, dimension, userShipment) = GROUP MAX detail IF includeInvoiceUserShipment(invoiceInvoiceDetail(detail), userShipment)
        BY skuInvoiceDetail(detail), shipmentDimensionInvoiceDetail(detail), userShipment;

    fillInvoiceDetailUserShipmentDetailDimension 'Привязать поставку к накладным' = ACTION (detail, dimension) {

        invoiceDetailUserShipmentDetail(detail) <- IF dimension IS ShipmentDimension
                                    THEN defaultInvoiceDetailSkuDimensionUserShipment(skuUserShipmentDetail(detail), dimension, userShipmentUserShipmentDetail(detail))
                                    ELSE defaultInvoiceDetailSkuUserShipment(skuUserShipmentDetail(detail), userShipmentUserShipmentDetail(detail));
    };

    fillInvoiceDetailUserShipmentDimension 'Привязать поставку к накладным' = ACTION (userShipment, dimension) {
        FOR userShipmentUserShipmentDetail(detail) == userShipment DO {
            EXEC fillInvoiceDetailUserShipmentDetailDimension(detail, dimension);
        }
    } IN invoices;
    fillInvoiceDetailUserShipment 'Привязать поставку к накладным' (userShipment) = fillInvoiceDetailUserShipmentDimension(userShipment, shipmentDimensionUserShipment(userShipment)) IN invoices;

    WHEN SESSION FORMS userShipment
        (CHANGED(shipmentDimensionUserShipmentDetail(detail)) OR CHANGED(skuUserShipmentDetail(detail))) AND NOT invoiceDetailUserShipmentDetail(detail) AND s==shipmentDimensionUserShipmentDetail(detail)
            DO EXEC fillInvoiceDetailUserShipmentDetailDimension(detail, s);

    EXTEND FORM userShipment
        PROPERTIES(s) fillInvoiceUserShipment, invoicesShipment READONLY
        PROPERTIES(s) dialogIncludeInvoicesUserShipment, includeInvoicesUserShipment READONLY, fillInvoiceDetailUserShipment
        PROPERTIES(d) descriptionIndexInvoiceDetailUserShipmentDetail BEFORE deletesd
    ;
    EXTEND DESIGN userShipment {
        headerCreateDetail {
            ADD s.invoice {
                type = CONTAINERV;
            }
            ADD s.invoices {
                type = CONTAINERV;
            }
        }
    }


    EXTEND FORM shipments
        PROPERTIES(s) READONLY invoicesShipment
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetailShipmentDetail
    ;

//-- аггр.объект

    @defineDocumentInterfaceDetailPricePrefix(invoice, shipment, ' (учетная)');
    Shipment.shipmentPriceInvoiceDetail(detail) += shipmentPriceInvoiceDetail(detail);
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, shipment, ' (поставлено)');
    @defineDocumentInterfaceHeaderQuantityCustomPrefix (invoice, invoiceDetail, shipment, ' (поставлено)');
    
    shipmentQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail) WHEN CHANGED(quantityUserInvoiceDetail(detail));

    @defineDocumentInterfaceDetailDataSumPrefix (invoice, shipment, ' (учетная)');
    @deriveDocumentDetailSumPrefix(userInvoice, shipment, currency, shipmentQuantity);
    Shipment.shipmentSumInvoiceDetail(detail) += shipmentSumInvoiceDetail(detail);
    @defineDocumentInterfaceHeaderCreateShipment (invoice);
    @defineDocumentInterfaceHeaderSumPrefix (invoice, shipment, ' (учетная)');

    @defineDocumentInterfaceHeaderItemSum (invoice, shipment, shipment);

    @defineDocumentInterfaceHeaderTimePrefix(Invoice, shipment, ' поставки');
    shipmentDateUserInvoice(i) <- dateUserInvoice(i) WHEN CHANGED(dateUserInvoice(i));
    shipmentTimeUserInvoice(i) <- timeUserInvoice(i) WHEN CHANGED(timeUserInvoice(i));

    @defineDocumentInterfaceDetailExpiryDate(invoice);
    @defineDocumentInterfaceDetailManufactureDate(invoice);
    
    overCopyInvoice(s, d) += ACTION (s, d) {
        ASSIGN createShipmentUserInvoice(d) <- createShipmentUserInvoice(s);
    }

    skipCreateShipmentInvoiceDetail = ABSTRACT BOOLEAN (InvoiceDetail) PERSISTENT;
    createShipmentInvoiceDetail 'Создать поставку' (invoiceDetail) = createShipmentInvoice(invoiceInvoiceDetail(invoiceDetail)) AND
                                                                     isStockSkuInvoiceDetail(invoiceDetail) AND
                                                                     NOT skipCreateShipmentInvoiceDetail(invoiceDetail) PERSISTENT;

    createShipmentUserInvoiceDetail 'Создать поставку' (invoiceDetail) = createShipmentUserInvoice(userInvoiceUserInvoiceDetail(invoiceDetail)) AND
                                                                         isStockSkuUserInvoiceDetail(invoiceDetail);

    showShipmentInvoice (invoice) =  invoice IS Invoice AND NOT createShipmentInvoice(invoice);

        EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundShippedInvoice(i) createShipmentUserInvoice
        PROPERTIES(i) BACKGROUND backgroundShippedInvoice(i) SHOWIF createShipmentUserInvoice(i) shipmentSumUserInvoiceDetailUserInvoice,
                      shipmentDateUserInvoice, shipmentTimeUserInvoice
        PROPERTIES(d) BEFORE deleteid SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
                      manufactureDateUserInvoiceDetail, expiryDateUserInvoiceDetail, name###stockProp###userInvoiceDetail ON CHANGE changeData###stockProp###filter###userInvoiceDetail(d), shipmentSumUserInvoiceDetail
        PROPERTIES(d) BEFORE deleteid BACKGROUND backgroundShippedInvoice(i) shipmentPriceUserInvoiceDetail
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityUserInvoiceDetail SHOWIF showShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
        PROPERTIES(d) shipmentQuantityUserInvoiceDetail AFTER quantityUserInvoiceDetail SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
    ;
    EXTEND DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateShipment {
                caption = 'Поставка';
                type = CONTAINERH;
                ADD PROPERTY(createShipmentUserInvoice);
                ADD PROPERTY(shipmentDateUserInvoice);
                ADD PROPERTY(shipmentTimeUserInvoice);
            }
            PROPERTY(shipmentSumUserInvoiceDetailUserInvoice) { preferredCharWidth = 13;}                       
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) READONLY BACKGROUND backgroundShippedInvoice(i) shipmentSumInvoiceDetailInvoice BEFORE ordersInvoice
        PROPERTIES(d) READONLY SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
                      manufactureDateInvoiceDetail, expiryDateInvoiceDetail, name###stockProp###invoiceDetail, shipmentPriceInvoiceDetail, shipmentSumInvoiceDetail
        PROPERTIES(d) READONLY shippedInvoiceDetail AFTER quantityInvoiceDetail SHOWIF showShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
        PROPERTIES(d) READONLY shipmentQuantityInvoiceDetail AFTER quantityInvoiceDetail SHOWIF createShipmentInvoice(i) BACKGROUND backgroundShippedInvoice(i)
        FILTERGROUP filter11
                    FILTER  'Непоставленные товары' 'F10' NOT shippedInvoiceDetail(d) == quantityInvoiceDetail (d)  
    ;
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY BACKGROUND backgroundShippedInvoice(i)  toShipInvoiceDetail, shipmentPriceInvoiceDetail
    ;
    
    overCopyUserInvoiceDetail(d, detail) += ACTION (d, detail) {
        manufactureDateUserInvoiceDetail(d) <- manufactureDateUserInvoiceDetail(detail);  
        expiryDateUserInvoiceDetail(d) <- expiryDateUserInvoiceDetail(detail);
        //shipmentPriceUserInvoiceDetail(d) <- shipmentPriceUserInvoiceDetail(detail);           
    }        
    

    CLASS InvoiceShipment 'Поставка на основе накладной'###sign : Shipment;
    CLASS InvoiceShipmentDetail 'Строка поставки на основе накладной'###sign : ShipmentDetail;

    @defineDocumentTables(invoiceShipment);

    @defineDocumentAggregation(invoice, invoiceShipment, createShipment);
    shipmentShipmentDetail(detail) += invoiceShipmentInvoiceShipmentDetail(detail);

    @defineDocumentDetailIndex(invoiceShipment);

    dateShipment(shipment) += shipmentDateInvoice(invoiceInvoiceShipment(shipment));
    timeShipment(shipment) += shipmentTimeInvoice(invoiceInvoiceShipment(shipment));

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, supplier, 'Склад поставщика', , );
    supplierStockShipment(shipment) += supplierStockInvoiceShipment(shipment);
    dataSupplierStockShipmentDetail(shipmentDetail) += dataSupplierStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, customer, 'Склад покупателя', , );
    customerStockShipment(shipment) += customerStockInvoiceShipment(shipment);
    dataCustomerStockShipmentDetail(shipmentDetail) += dataCustomerStockInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceShipment, supplier, 'Поставщик', , );
    supplierShipment(shipment) += supplierInvoiceShipment(shipment);
    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceShipment, customer, 'Покупатель', , );
    customerShipment(shipment) += customerInvoiceShipment(shipment);

    @defineDocumentAggregationPosted(invoice, invoiceShipment);
    isPostedShipment(shipment) += isPostedInvoiceShipment(shipment);

    @defineDocumentAggregationClosed(invoice, invoiceShipment);
    isClosedShipment(shipment) += isClosedInvoiceShipment(shipment);

    numberInvoiceShipment 'Номер документа' (invoiceShipment) = numberInvoice(invoiceInvoiceShipment(invoiceShipment));
    numberShipment(shipment) += numberInvoiceShipment(shipment);

    seriesInvoiceShipment 'Серия документа' (invoiceShipment) = seriesInvoice(invoiceInvoiceShipment(invoiceShipment));
    seriesShipment(shipment) += seriesInvoiceShipment(shipment);

    seriesNumberInvoiceShipment 'Серия/номер документа' (invoiceShipment) = seriesNumberInvoice(invoiceInvoiceShipment(invoiceShipment));

    noteInvoiceInvoiceShipment 'Примечание' (invoiceShipment) = noteInvoice(invoiceInvoiceShipment(invoiceShipment));
    noteShipment(shipment) += noteInvoiceInvoiceShipment(shipment);

    currencyInvoiceShipment  (invoiceShipment) = currencyInvoice(invoiceInvoiceShipment(invoiceShipment));
    currencyShipment (shipment) += currencyInvoiceShipment(shipment);

    @defineDocumentDescription(invoiceShipment, InvoiceShipmentDetail, 'Поставка на основе накладной'###sign);
    descriptionShipment (shipment) += descriptionInvoiceShipment(shipment);

    @defineDocumentAggregationDetailProperty (invoice, invoiceShipment, order, 'Заказ');
    orderShipmentDetail (shipmentDetail) += orderInvoiceShipmentDetail(shipmentDetail);

    @defineDocumentAggregationDetailSku(invoice, invoiceShipment, sku);
    skuShipmentDetail(shipmentDetail) +=  skuInvoiceShipmentDetail(shipmentDetail);

    quantityShipmentDetail(shipmentDetail) += shipmentQuantityInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    expiryDateShipmentDetail(shipmentDetail) += expiryDateInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    manufactureDateShipmentDetail(shipmentDetail) += manufactureDateInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));

    priceInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentPriceInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    priceShipmentDetail(shipmentDetail) += priceInvoiceShipmentDetail(shipmentDetail);

    sumInvoiceShipmentDetail(invoiceShipmentDetail) = shipmentSumInvoiceDetail(invoiceDetailInvoiceShipmentDetail(invoiceShipmentDetail));
    sumShipmentDetail(shipmentDetail) += sumInvoiceShipmentDetail(shipmentDetail);

    invoiceDetailShipmentDetail(shipmentDetail) += invoiceDetailInvoiceShipmentDetail(shipmentDetail);

    editShipment(shipment) += ACTION EXEC editInvoice(invoiceInvoiceShipment(shipment));

    // цены в подборе
    @extendFormDocumentPriceSku(userInvoice, accountPriceListType, stockProp, ' учетная', userInvoice, i, is);
    @extendFormDocumentPriceBatch(userInvoice, accountPriceListType, stockProp, ' учетная', userInvoice, i, is);
END

META defineInvoiceShipmentBatch(dumb)
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY nameBatchInvoiceDetail AFTER shortNameUOMSkuInvoiceDetail
    ;

    overFillInvoiceUserShipmentDetailInvoiceDetail (sd, id) += ACTION ASSIGN batchUserShipmentDetail (sd) <- batchInvoiceDetail(id);

    @defineDocumentAggregationDetailBatch (invoice, invoiceShipment);
    batchShipmentDetail (shipmentDetail) += batchInvoiceShipmentDetail(shipmentDetail);

    expiryDateUserInvoiceDetail(detail) <- prevExpiryDateBatch(batchUserInvoiceDetail(detail)) WHEN CHANGED (batchUserInvoiceDetail(detail));
    manufactureDateUserInvoiceDetail(detail) <- prevManufactureDateBatch(batchUserInvoiceDetail(detail)) WHEN CHANGED (batchUserInvoiceDetail(detail));
END

META defineInvoiceShipmentPack(dumb)
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY SHOWIF showPack##Invoice(i) BEFORE quantityInvoiceDetail
                       idBarcodePackInvoiceDetail, shortNameUOMPackInvoiceDetail,
                       amountPackInvoiceDetail, packQuantityInvoiceDetail
    ;
    overFillInvoiceUserShipmentDetailInvoiceDetail(s, i) += ACTION (s, i) {
        ASSIGN barcodePackUserShipmentDetail(s) <- barcodePackInvoiceDetail(i);
        ASSIGN amountPackUserShipmentDetail(s) <- amountPackInvoiceDetail(i);
        ASSIGN packQuantityUserShipmentDetail(s) <- toShipInvoiceDetail(i)/amountPackInvoiceDetail(i);
    }

    showPackShipment(shipment) += showPackInvoice(invoiceInvoiceShipment(shipment));
    barcodePackShipmentDetail(shipmentDetail) +=  barcodePackInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    amountPackShipmentDetail(shipmentDetail) +=  amountPackInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
    packQuantityShipmentDetail(shipmentDetail) +=  packQuantityInvoiceDetail(invoiceDetailInvoiceShipmentDetail(shipmentDetail));
END

//-- Действие

META defineInvoiceShipmentAction (sign)
    moveUserShipmentInvoice 'Поставка'###sign =  ACTION (invoice) NEWSESSION{

        FOR ADDOBJ s = UserShipment DO {

            ASSIGN supplierUserShipment(s) <- supplierInvoice(invoice);
            ASSIGN supplierStockUserShipment(s) <- supplierStockInvoice(invoice);
            ASSIGN customerUserShipment(s) <- customerInvoice(invoice);
            ASSIGN customerStockUserShipment(s) <- customerStockInvoice(invoice);
            ASSIGN currencyUserShipment(s) <- currencyInvoice(invoice);
            ASSIGN numberUserShipment(s) <- numberInvoice(invoice);
            ASSIGN seriesUserShipment(s) <- seriesInvoice(invoice);
            ASSIGN noteUserShipment(s) <- noteInvoice(invoice);
            EXEC overFillInvoiceUserShipmentInvoice(s, invoice);

            FOR invoiceInvoiceDetail(detail) == invoice  ADDOBJ d = UserShipmentDetail DO {
                userShipmentUserShipmentDetail(d) <- s;
                invoiceDetailUserShipmentDetail(d) <- detail;
                orderUserShipmentDetail(d) <- orderInvoiceDetail(detail);

                dataCustomerStockUserShipmentDetail(d) <- dataCustomerStockInvoiceDetail(detail);
                dataSupplierStockUserShipmentDetail(d) <- dataSupplierStockInvoiceDetail(detail);

                skuUserShipmentDetail(d) <- skuInvoiceDetail(detail);
                quantityUserShipmentDetail (d) <- toShipInvoiceDetail(detail);
                
                priceUserShipmentDetail(d) <- shipmentPriceInvoiceDetail(detail);
                EXEC overFillInvoiceUserShipmentDetailInvoiceDetail(d, detail);
            }

            FORM userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;

    EXTEND FORM invoices
        PROPERTIES(i) moveUserShipmentInvoice
    ;
    EXTEND DESIGN invoices {
        createdContainer{
            ADD PROPERTY(moveUserShipmentInvoice);
        }
    }
END

