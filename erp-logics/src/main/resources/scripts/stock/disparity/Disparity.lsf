MODULE Disparity;

REQUIRE System,
        Stock,
        StockSkuDocument,
        Currency,
        Numerator,
        Barcode,
        Document,
        Employee,
        StockDocumentSkuLedger,
        Utils,
        Item,
        PriceListLedger;

NAMESPACE Disparity;

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS Disparity 'Изменение сортности';
CLASS DisparityDetail 'Строка изменения сортности';

@defineDocument(disparity);
@deriveDocumentHeaderTimePrefix(Disparity, );

@defineDocumentHeaderNumber(Disparity);
@defineNumeratedDefault(Disparity, 'Изменения сортности', 'ИС');

@defineDocumentDataStock (disparity, stock, 'Склад', );
@defineDocumentDialogStocks(disparity, stock, company, , );
@defineDocumentPosted(disparity);
@defineDocumentClosed(disparity);
@defineDocumentClosedConstraint(Disparity);
@defineDocumentDescription (disparity, 'Изменение сортности');
@defineDocumentCurrency (disparity);
@deriveDocumentCurrency(disparity, stock);

@defineDocumentDetailSkuPrefix (disparity, sku, , ' (расход)');
@defineDocumentDetailSkuPrefix (disparity, sku, input, ' (приход)');

@showDocumentDetailBatch(disparity);
@defineDocumentDetailBatchCustomPrefix(disparityDetail, batch, );
changeBatch(DisparityDetail d) = ACTION {
    FORM dialogBatchStockOut OBJECTS st = stock(d),
                             t = dateTime(d),
                             sk = sku(d) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        batch(d) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batch(d) <- NULL;
    }
}

idBatch 'Код партии' (DisparityDetail detail) = id(batch(detail));

costBatch 'Себестоимость партии' = DATA NUMERIC[16,4] (DisparityDetail) @@denomination;
costBatch(DisparityDetail detail) <- prevCost(batch(detail)) WHEN CHANGED(batch(detail));

expiryDateBatch 'Годен до' = DATA DATE (DisparityDetail);
expiryDateBatch(DisparityDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED(batch(detail));

disallowLineDisparities 'Запретить строки без партий в изменениях сортности' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() disallowLineDisparities
;

DESIGN options {
    pane {        
        commons {
            MOVE PROPERTY(disallowLineDisparities());   
        }
    }
}

CONSTRAINT isPosted(DisparityDetail d) AND disallowLineDisparities() AND NOT batch(d) 
    MESSAGE 'Для строки изменения сортности должна быть задана партия';  

@defineDocumentDetailQuantityPrefix (disparity, , ' (расход)');
@defineDocumentDetailQuantityPrefix (disparity, input, ' (приход)');
inputQuantity(DisparityDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

@defineDocumentDetailPricePrefix (disparity, , ' учетная (расход)');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (disparity, accountPriceListType, , , sku, stock);
@defineDocumentDetailPricePrefix (disparity, input, ' учетная (приход)');
inputPrice(DisparityDetail detail) <- price(detail) WHEN CHANGED(price(detail));

@defineDocumentDetailDataSumCustomPrefix (disparityDetail, , ' учетная (расход)');
@deriveDocumentDetailSumPrefix(disparity, , currency, quantity);
@defineDocumentDetailDataSumCustomPrefix (disparityDetail, input, ' учетная (приход)');
@deriveDocumentDetailSumPrefix(disparity, input, currency, inputQuantity);

@defineDocumentHeaderSumPrefix (disparity, , ' учетная (расход)');
@defineDocumentHeaderSumPrefix (disparity, input, ' учетная (приход)');

@defineDocumentHeaderQuantityPrefix (disparity, , ' (расход)');
@defineDocumentHeaderQuantityPrefix (disparity, input, ' (приход)');

@defineAddDetailDialogSkuStock(disparity, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(disparity, sku);

@defineDocumentDetailDiffSumCustomPrefix(disparityDetail, sum, , input, ' изменения учетной');
diffSumDisparityDetail 'Сумма' (disparity) =
    GROUP SUM diffSum(DisparityDetail idetail) 
        BY disparity(idetail) IN documentSum;
            
@defineDocumentHeaderItemSum (disparity, diff, diff);
// ------------ Проведение по товарному отчету ----------------- //
@implementStockDocumentLedgerOut(Disparity, stock);
type(Disparity l) += 'Сортность' IF l IS Disparity;
sumItem (Disparity ledger) += diffSumItemDisparityDetail(ledger);
sumContainer (Disparity ledger) += diffSumContainerDisparityDetail(ledger);

// ------------ Проведение по регистру ----------------- //
@implementSkuLedgerOutFIFO(DisparityDetail, sku, stock);
quantity (DisparityDetail ledger) += quantity(ledger);
batch(DisparityDetail ledger) += batch(ledger);
sum (DisparityDetail ledger) += sum(ledger);

stockDocumentLedger(DisparityDetail ledger) += disparity(ledger); 

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS InputDisparityDetail 'Приход пересортицы';
TABLE inputDisparityDetail (InputDisparityDetail);

needToInput (DisparityDetail disparityDetail) = inputQuantity(disparityDetail) > 0
    AND isPosted(disparityDetail);

@defineAggregation(disparityDetail, inputDisparityDetail, needToInput);

@defineDocumentAggregationDetailTime(disparity, inputDisparity);
@defineDocumentAggregationDetailPosted(disparity, inputDisparity);
@defineDocumentAggregationDetailClosed(disparity, inputDisparity);
@defineDocumentAggregationDetailStock(disparity, inputDisparity, stock, 'Склад');
@defineDocumentAggregationDetailSkuPrefix(disparity, inputDisparity, sku, input);
quantity(InputDisparityDetail inputDisparityDetail) = inputQuantity(disparityDetail(inputDisparityDetail));
price(InputDisparityDetail inputDisparityDetail) = inputPrice(disparityDetail(inputDisparityDetail));
sum(InputDisparityDetail inputDisparityDetail) = inputSum(disparityDetail(inputDisparityDetail));
description(InputDisparityDetail inputDisparityDetail) = description(disparityDetail(inputDisparityDetail));
costBatch(InputDisparityDetail inputDisparityDetail) = costBatch(disparityDetail(inputDisparityDetail));
expiryDateBatch (InputDisparityDetail inputDisparityDetail) = expiryDateBatch(disparityDetail(inputDisparityDetail));


@implementBatch(InputDisparityDetail, sku, stock, costBatch);
quantity (InputDisparityDetail ledger) += quantity(ledger);
expiryDate (InputDisparityDetail ledger) += expiryDateBatch(ledger);
sum (InputDisparityDetail ledger) += sum(ledger);
series (InputDisparityDetail ledger) += series(disparity(disparityDetail(ledger)));
number (InputDisparityDetail ledger) += number(disparity(disparityDetail(ledger)));

supplier = DATA LegalEntity (DisparityDetail);
supplier(DisparityDetail detail) <- prevSupplier(batch(detail)) WHEN CHANGED(batch(detail));
nameSupplier = name(supplier(DisparityDetail detail) );

stockDocumentLedger(InputDisparityDetail ledger) += disparity(disparityDetail(ledger));

name(InputDisparityDetail batch) += VARISTRING[200](CONCAT '', STRING[10](date(disparityDetail(batch))),
                             '/ ' + seriesNumber(disparity(disparityDetail(batch))),
                             '/ ' + fullNameLegalEntityStock(disparityDetail(batch)));

supplier = supplier(disparityDetail(InputDisparityDetail detail));
supplier(InputDisparityDetail batch) += supplier(batch);

supplierStock = DATA Stock (DisparityDetail);
supplierStock(DisparityDetail detail) <- prevSupplierStock(batch(detail)) WHEN CHANGED(batch(detail));
supplierStock = supplierStock(disparityDetail(InputDisparityDetail detail));
supplierStock(InputDisparityDetail batch) += supplierStock(batch);

//CONSTRAINT supplier(DisparityDetail d) AND supplierStock(d) AND NOT in(supplier(d), supplierStock(d))
//    MESSAGE 'Поставщик и склад поставщика в строке изменения сортности не имеют связи';

@implementSystemLedgerPriceListTypeBatch(account, InputDisparityDetail, supplier, stock);   


@defineBarcodeSku(disparityDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

//------------------------------------------- Пересорт товара----------------------------------------------------//

quantityDisparityDetail 'Кол-во для закачки в оборудование (приход)' (sku, disparity) = GROUP SUM inputQuantity(DisparityDetail disparityDetail) BY inputSku(disparityDetail), disparity(disparityDetail);

FORM disparity 'Изменение сортности'

    OBJECTS dis=Disparity FIXED PANEL

    PROPERTIES(dis) isPosted, nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(dis), 
                    date, time, quantityDisparityDetail, sumDisparityDetail,
                    inputQuantityDisparityDetail, inputSumDisparityDetail, note

    OBJECTS d = DisparityDetail
    PROPERTIES(d)   index,
                    idBarcodeSku, nameSku, shortNameUOMSku, idBatch, nameBatch ON CHANGE changeBatch(d),
                    costBatch, expiryDateBatch,
                    quantity, price, sum,
                    inputIdBarcodeSku, inputNameSku, inputShortNameUOMSku,
                    inputQuantity, inputPrice, inputSum
    PROPERTIES(d)   ADDOBJ, deletedd=DELETESESSION

    PROPERTIES(dis) TODRAW d addDetailDialogSkuStockDisparityDetail,
                             addDetailInputBarcodeDisparityDetail, deleteDisparityDetail

    FILTERS         disparity(d) == dis

    EVENTS
        ON OK prePost(dis)

    EDIT Disparity OBJECT dis
;

DESIGN disparity {
    main {
        preferredSize = (1024, 768);
        NEW mainTabbed {
            type = TABBED;
            fill = 1;
            NEW documentBox {
                fill = 1;
                type = CONTAINERV;
                caption = 'Изменение сортности';
                NEW header.box {
                    type = CONTAINERH;
        
                    NEW headerRow1 {
                        fill = 1;
                        MOVE dis.documentHeader {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPosted(dis)) { preferredCharWidth = 10; }
                            MOVE PROPERTY(nameStock(dis));
                            MOVE PROPERTY(nameNumerator(dis));
                            MOVE PROPERTY(number(dis));
                            MOVE PROPERTY(series(dis));
                            MOVE PROPERTY(date(dis));
                            MOVE PROPERTY(time(dis));
                        }
        
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            type = TABBED;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE dis.documentPrm {
                                    type = COLUMNS;
                                    columns = 2;
                                }
                            }
                            NEW headerExtraParams {
                                caption = 'Дополнительные параметры';
                            }
                            NEW headerCreateDetail {
                                caption = 'Основание';
                            }
                            NEW headerCreateDocuments {
                                caption = 'Производные документы';
                            }
                        }
                    }
        
                    MOVE dis.documentSum {
                        columns = 1;
                    }
                }
                NEW specification.box {
                    fill = 1;
                    type = TABBED;
                    MOVE d.box {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE functions.box;
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumDisparityDetail(dis)) { preferredCharWidth = 13;}
        PROPERTY(inputSumDisparityDetail(dis)) { preferredCharWidth = 13;}
    }
}

edit 'Редактировать' (DisparityDetail d) = ACTION NEWSESSION {
    FORM disparity OBJECTS dis = disparity(d), d = d MANAGESESSION DOCKEDMODAL;
}
edit[SkuLedger](InputDisparityDetail batch) += ACTION edit(disparityDetail(batch)); 
edit(DisparityDetail d) += ACTION edit(d); 
edit[PriceListLedger](InputDisparityDetail d) += ACTION edit(disparityDetail(d));                       

show 'Просмотреть' (DisparityDetail d) = ACTION NEWSESSION {
    FORM disparity OBJECTS dis = disparity(d), d = d DOCKEDMODAL READONLY;
}
show[SkuLedger](InputDisparityDetail batch) += ACTION show(disparityDetail(batch)); 
show(DisparityDetail d) += ACTION show(d); 

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(disparity, accountPriceListType, );
@extendFormDocumentSkuStock(disparity, disparity, dis, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(disparity, accountPriceListType, );
  
@extendFormDocumentBatchStock(disparity, disparity, dis, legalEntityStock, );


edit 'Редактировать' (disparity) = ACTION EDITFORM Disparity;
edit(Disparity l) += ACTION edit(l);
close(Disparity l) += ACTION isClosed(l) <- TRUE;

EXTEND FORM disparity

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, dis, st) 'F9'
;

EXTEND FORM disparity

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantity(b, dis, sto) 'F9'
;

FORM disparities 'Изменения сортности'

    OBJECTS dis=Disparity
    PROPERTIES (dis) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, nameStock
    PROPERTIES(dis)  READONLY countDisparityDetail, quantityDisparityDetail, sumDisparityDetail,
                              inputQuantityDisparityDetail, inputSumDisparityDetail
    PROPERTIES (dis) READONLYIF isReadonly() note

    PROPERTIES(dis)  READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                          postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (dis) ADDFORM, EDITFORM SHOWIF isOpened(dis)
    PROPERTIES(dis)  close SHOWIF isOpened(dis), open SHOWIF isClosed(dis)     
    
    PROPERTIES (dis) deleted=DELETE FORCE PANEL TOOLBAR SHOWIF isOpened(dis)

    OBJECTS d=DisparityDetail
    PROPERTIES(d)   READONLY index,
                    idBarcodeSku, nameSku, shortNameUOMSku, nameBatch,
                    costBatch, expiryDateBatch, quantity, price, sum,
                    inputIdBarcodeSku, inputNameSku, inputShortNameUOMSku,
                    inputQuantity, inputPrice, inputSum

    FILTERS         disparity(d) == dis
;
@extendFormFilterAccessStock(Disparity, dis, disparities, stock, company);

DESIGN disparities {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer  {
            fill = 1;
            type = SPLITV;

            MOVE dis.box {
                fill = 2;
            }
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE dis.created;
                    MOVE dis.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
        MOVE functions.box;
    }
}
@extendFormEditable(disparities);
@defineFilterIsOpened (disparity, disparities, dis);
NAVIGATOR {
    stockNavigator {
        NEW disparityNavigator 'Изменение сортности' BEFORE balanceSku {
            ADD disparities;
        }
    }
}

//Родительский товар

disparityItem 'Уцененный товар' = DATA Item (Item);
nameSkuDisparityItem 'Уцененный товар' = name(disparityItem(Item item));

countItemDisparity = GROUP SUM 1 IF disparityItem(Item item) == Item disparityItem BY disparityItem; 

copyDisparityData (Item item, Item i) = ACTION  {
    disparityItem(i) <- item; 
    itemGroup(i) <- itemGroup(item);
    caption(i) <- caption(item) + ' (УЦЕН.)';
    originalCaption(i) <- originalCaption(item);
    UOM(i) <- UOM(item);
    brand(i) <- brand(item);
    manufacturer(i) <- manufacturer(item);
    composition(i) <- composition(item);
    originalComposition(i) <- originalComposition(item);
    netWeight(i) <- netWeight(item);
    grossWeight(i) <- grossWeight(item);
    country(i) <- country(item);
    dataImage(i) <- dataImage(item);
    skuType(i) <- skuType(item);
    split(i) <- split(item);
    inactive(i) <- inactive(item);
    
    generateBarcode(i);       
    
    customGroup[CustomGroupType,Item](CustomGroupType type, i) <- customGroup(type, item);
    
    EXEC overCopy(item, i);    
}

copyDisparity 'Создать уцененный товар'(Item item) = ACTION {
    IF (item IS Item) THEN {
        NEWSESSION NESTED (addedSku[]) {
            FOR ADDOBJ i = Item DO {
                copyDisparityData(item, i);
                FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
                IF formResult() == FormResult.ok THEN {
                    addedSku() <- i;
                }
            }
        }
    }
} EDITKEY 'F6' TOOLBAR;

EXTEND FORM item
    PROPERTIES(i) nameSkuDisparityItem 
    OBJECTS di = Item
    PROPERTIES(di) READONLY idBarcode, name
    FILTERS disparityItem(di)==i 
;

DESIGN item {
    itemDetail {
        NEW disparityItem AFTER calcPriceListTypePrm {
            type = CONTAINERV;
            caption = 'Уценки';
            MOVE PROPERTY(nameSkuDisparityItem(i));
            MOVE di.box;
        }
    }    
}

isNotDisparity = Item item IS Item AND NOT disparityItem(item);

EXTEND FORM items
    PROPERTIES (i) copyDisparity
    FILTERGROUP disparityFilter
        FILTER 'Без уцен.' isNotDisparity(i) 'F5' DEFAULT
        FILTER 'С уценкой' disparityItem(i) 'ctrl F5' 
;

DESIGN items {
    actions {
        NEW disparity {
            caption = 'Уценка';
            type = CONTAINERH;
            MOVE filters.disparityFilter;
            MOVE PROPERTY(copyDisparity(i));
        }
    }
}