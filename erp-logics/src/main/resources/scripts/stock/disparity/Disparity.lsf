MODULE Disparity;

REQUIRE System,
        Stock,
        StockSkuDocument,
        Currency,
        Numerator,
        Barcode,
        Document,
        Employee,
        StockDocumentSkuLedger,
        Utils,
        Item,
        PriceListLedger;

NAMESPACE Disparity;

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS Disparity 'Изменение сортности';
CLASS DisparityDetail 'Строка изменения сортности';

@defineDocument(disparity);
@deriveDocumentHeaderTimePrefix(Disparity, );

@defineDocumentHeaderNumber(Disparity);
@defineNumeratedDefault(Disparity, 'Изменения сортности', 'ИС');

@defineDocumentDataStock (disparity, stock, 'Склад', );
@defineDocumentDialogStocks(disparity, stock, company, , );
@defineDocumentPosted(disparity);
@defineDocumentClosed(disparity);
@defineDocumentDescription (disparity, 'Изменение сортности');
@defineDocumentCurrency (disparity);
@deriveDocumentCurrency(disparity, stock);

@defineDocumentDetailSkuPrefix (disparity, sku, , ' (расход)');
@defineDocumentDetailSkuPrefix (disparity, sku, input, ' (приход)');

@defineDocumentDetailBatchCustomPrefix(disparityDetail, batch, );
changeBatchDisparityDetail = ACTION (d) {
    FORM dialogBatchStock OBJECTS st = stockDisparityDetail(d),
                             t = dateTimeDisparityDetail(d),
                             sk = skuDisparityDetail(d) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        batchDisparityDetail(d) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        batchDisparityDetail(d) <- NULL;
    }
}

costBatchDisparityDetail 'Себестоимость партии' = DATA NUMERIC[14,2] (DisparityDetail);
costBatchDisparityDetail(detail) <- prevCostBatch(batchDisparityDetail(detail)) WHEN CHANGED(batchDisparityDetail(detail));

expiryDateBatchDisparityDetail 'Годен до' = DATA DATE (DisparityDetail);
expiryDateBatchDisparityDetail(detail) <- prevExpiryDateBatch(batchDisparityDetail(detail)) WHEN CHANGED(batchDisparityDetail(detail));

disallowLineDisparities 'Запретить строки без партий в изменениях сортности' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() disallowLineDisparities
;

EXTEND DESIGN options {
    pane {        
        NEW disparity {
            caption = 'Изменения сортности';
            ADD PROPERTY(disallowLineDisparities());   
        }
    }
}

CONSTRAINT isPostedDisparityDetail(d) AND disallowLineDisparities() AND NOT batchDisparityDetail(d) 
    MESSAGE 'Для строки изменения сортности должна быть задана партия';  

@defineDocumentDetailQuantityPrefix (disparity, , ' (расход)');
@defineDocumentDetailQuantityPrefix (disparity, input, ' (приход)');
inputQuantityDisparityDetail(detail) <- quantityDisparityDetail(detail) WHEN CHANGED(quantityDisparityDetail(detail));

@defineDocumentDetailPricePrefix (disparity, , ' учетная (расход)');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (disparity, accountPriceListType, , , sku, stock);
@defineDocumentDetailPricePrefix (disparity, input, ' учетная (приход)');
inputPriceDisparityDetail(detail) <- priceDisparityDetail(detail) WHEN CHANGED(priceDisparityDetail(detail));

@defineDocumentDetailDataSumCustomPrefix (disparityDetail, , ' учетная (расход)');
@deriveDocumentDetailSumPrefix(disparity, , currency, quantity);
@defineDocumentDetailDataSumCustomPrefix (disparityDetail, input, ' учетная (приход)');
@deriveDocumentDetailSumPrefix(disparity, input, currency, inputQuantity);

@defineDocumentHeaderSumPrefix (disparity, , ' учетная (расход)');
@defineDocumentHeaderSumPrefix (disparity, input, ' учетная (приход)');

@defineDocumentHeaderQuantityPrefix (disparity, , ' (расход)');
@defineDocumentHeaderQuantityPrefix (disparity, input, ' (приход)');

@defineAddDetailDialogSkuStock(disparity, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(disparity, sku);

// ------------ Проведение по товарному отчету ----------------- //
@implementStockDocumentLedgerOut(Disparity, stock);
sumOutStockDocumentLedger (ledger) += sumDisparityDetailDisparity(ledger);
sumItemOutStockDocumentLedger (ledger) += sumDisparityDetailDisparity(ledger);
sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS Disparity;

// ------------ Проведение по регистру ----------------- //
@implementSkuLedgerOutFIFO(DisparityDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityDisparityDetail(ledger);
batchSkuLedger(ledger) += batchDisparityDetail(ledger);
@implementSkuLedgerOutFIFOBalance(disparityDetail, stock);
sumOutSkuLedger (ledger) += sumDisparityDetail(ledger);

stockDocumentLedgerSkuLedger(ledger) += disparityDisparityDetail(ledger); 

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS InputDisparityDetail 'Приход пересортицы';
TABLE inputDisparityDetail (InputDisparityDetail);

needToInputDisparityDetail (disparityDetail) = inputQuantityDisparityDetail(disparityDetail) > 0
    AND isPostedDisparityDetail(disparityDetail);

@defineAggregation(disparityDetail, inputDisparityDetail, needToInput);

@defineDocumentAggregationDetailTime(disparity, inputDisparity);
@defineDocumentAggregationDetailPosted(disparity, inputDisparity);
@defineDocumentAggregationDetailClosed(disparity, inputDisparity);
@defineDocumentAggregationDetailStock(disparity, inputDisparity, stock, 'Склад');
@defineDocumentAggregationDetailSkuPrefix(disparity, inputDisparity, sku, input);
quantityInputDisparityDetail(inputDisparityDetail) = inputQuantityDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));
priceInputDisparityDetail(inputDisparityDetail) = inputPriceDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));
sumInputDisparityDetail(inputDisparityDetail) = inputSumDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));
descriptionInputDisparityDetail(inputDisparityDetail) = descriptionDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));
costBatchInputDisparityDetail(inputDisparityDetail) = costBatchDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));
expiryDateBatchInputDisparityDetail (inputDisparityDetail) = expiryDateBatchDisparityDetail(disparityDetailInputDisparityDetail(inputDisparityDetail));



@implementBatch(InputDisparityDetail, sku, stock, costBatch);
quantityBatch (ledger) += quantityInputDisparityDetail(ledger);
expiryDateBatch (ledger) += expiryDateBatchInputDisparityDetail(ledger);
sumInSkuLedger (ledger) += sumInputDisparityDetail(ledger);
seriesBatch (ledger) += seriesDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(ledger)));
numberBatch (ledger) += numberDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(ledger)));

supplierDisparityDetail = DATA LegalEntity (DisparityDetail);
supplierDisparityDetail(detail) <- prevSupplierBatch(batchDisparityDetail(detail)) WHEN CHANGED(batchDisparityDetail(detail));
nameSupplierDisparityDetail = nameLegalEntity(supplierDisparityDetail(detail) );

stockDocumentLedgerSkuLedger(ledger) += disparityDisparityDetail(disparityDetailInputDisparityDetail(ledger));

nameBatch(batch) += VARISTRING[200](CONCAT '', STRING[10](dateDisparityDetail(disparityDetailInputDisparityDetail(batch))),
                             '/ ' + seriesNumberDisparity(disparityDisparityDetail(disparityDetailInputDisparityDetail(batch))),
                             '/ ' + fullNameLegalEntityStockDisparityDetail(disparityDetailInputDisparityDetail(batch)));

supplierInputDisparityDetail = supplierDisparityDetail(disparityDetailInputDisparityDetail(detail));
supplierBatch(batch) += supplierInputDisparityDetail(batch);

@implementSystemLedgerPriceListTypeBatch(account, InputDisparityDetail, supplier, stock);   

//------------------------------------------- Пересорт товара----------------------------------------------------//

quantityDisparityDetailSkuDisparity 'Кол-во для закачки в оборудование (приход)' (sku, disparity) = GROUP SUM inputQuantityDisparityDetail(disparityDetail) BY inputSkuDisparityDetail(disparityDetail), disparityDisparityDetail(disparityDetail);

FORM disparity 'Изменение сортности'

    OBJECTS dis=Disparity FIXED PANEL

    PROPERTIES(dis) isPostedDisparity, nameNumeratorDisparity, numberDisparity, seriesDisparity, nameStockDisparity ON CHANGE changeStockCompanyDisparity(dis), 
                    dateDisparity, timeDisparity, quantityDisparityDetailDisparity, sumDisparityDetailDisparity,
                    inputQuantityDisparityDetailDisparity, inputSumDisparityDetailDisparity, noteDisparity

    OBJECTS d = DisparityDetail
    PROPERTIES(d)   indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameSkuDisparityDetail, shortNameUOMSkuDisparityDetail, nameBatchDisparityDetail ON CHANGE changeBatchDisparityDetail(d),
                    costBatchDisparityDetail, expiryDateBatchDisparityDetail,
                    quantityDisparityDetail, priceDisparityDetail, sumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameSkuDisparityDetail, inputShortNameUOMSkuDisparityDetail,
                    inputQuantityDisparityDetail, inputPriceDisparityDetail, inputSumDisparityDetail
    PROPERTIES(d)   ADDOBJ, deletedd=DELETESESSION

    PROPERTIES(dis) TODRAW d addDetailDialogSkuStockDisparityDetailDisparity,
                             addDetailInputBarcodeDisparityDetailDisparity, deleteDisparityDetailDisparity

    FILTERS         disparityDisparityDetail(d) == dis

    EVENTS
        ON OK prePostDisparity(dis)

    EDIT Disparity OBJECT dis
;

DESIGN disparity FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;
                ADD dis.documentHeader {
                    type = CONTAINERH;
                    ADD PROPERTY(isPostedDisparity(dis)) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameStockDisparity(dis));
                    ADD PROPERTY(nameNumeratorDisparity(dis));
                    ADD PROPERTY(numberDisparity(dis));
                    ADD PROPERTY(seriesDisparity(dis));
                    ADD PROPERTY(dateDisparity(dis));
                    ADD PROPERTY(timeDisparity(dis));
                }

                NEW headerTabbedPane {
                    alignment = STRETCH;
                    type = TABBED;
                    NEW headerMainParams {
                        caption = 'Основные параметры';
                        ADD dis.documentPrm {
                            type = COLUMNS;
                            columns = 2;
                        }
                    }
                    NEW headerExtraParams {
                        caption = 'Дополнительные параметры';
                    }
                    NEW headerCreateDetail {
                        caption = 'Основание';
                    }
                    NEW headerCreateDocuments {
                        caption = 'Производные документы';
                    }
                }
            }

            ADD dis.documentSum {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            type = TABBED;
            ADD d.box {
                caption = 'Спецификация';
            }
        }
        ADD functions.box;
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumDisparityDetailDisparity(dis)) { preferredCharWidth = 13;}
        PROPERTY(inputSumDisparityDetailDisparity(dis)) { preferredCharWidth = 13;}
    }
}

editDisparityDetail 'Редактировать' (d) = ACTION (d) NEWSESSION {
    FORM disparity OBJECTS dis = disparityDisparityDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}

editSkuLedger(batch) += ACTION editDisparityDetail(disparityDetailInputDisparityDetail(batch)); 
editSkuLedger(d) += ACTION editDisparityDetail(d); 

editPriceListLedger(d) += ACTION editDisparityDetail(disparityDetailInputDisparityDetail(d));                       

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(disparity, accountPriceListType, );
@extendFormDocumentSkuStock(disparity, disparity, dis, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(disparity, accountPriceListType, );
  
@extendFormDocumentBatchStock(disparity, disparity, dis, legalEntityStock, );

editDisparity 'Редактировать' (disparity) = ACTION EDITFORM Disparity;

EXTEND FORM disparity

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalanceSkuStock(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySkuDisparityStock(ks, dis, st) 'F9'
;

EXTEND FORM disparity

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalanceBatchStock(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityBatchDisparityStock(b, dis, sto) 'F9'
;

FORM disparities 'Изменения сортности'

    OBJECTS dis=Disparity
    PROPERTIES (dis) READONLYIF isReadonly() isClosedDisparity, isPostedDisparity, numberDisparity, seriesDisparity, dateDisparity, timeDisparity, nameStockDisparity
    PROPERTIES(dis)  READONLY countDisparityDetailDisparity, quantityDisparityDetailDisparity, sumDisparityDetailDisparity,
                              inputQuantityDisparityDetailDisparity, inputSumDisparityDetailDisparity
    PROPERTIES (dis) READONLYIF isReadonly() noteDisparity

    PROPERTIES(dis)  READONLY FORCE PANEL createdNameUserDisparity, createdTimeDisparity, createdHostnameComputerDisparity, 
                                          postedNameUserDisparity, postedTimeDisparity, postedHostnameComputerDisparity

    PROPERTIES (dis) ADDFORM, EDITFORM SHOWIF isOpenedDisparity(dis)
    PROPERTIES(dis)  closeDisparity SHOWIF isOpenedDisparity(dis), openDisparity SHOWIF isClosedDisparity(dis)     
    
    PROPERTIES (dis) deleted=DELETE FORCE PANEL TOOLBAR SHOWIF isOpenedDisparity(dis)

    OBJECTS d=DisparityDetail
    PROPERTIES(d)   READONLY indexDisparityDetail,
                    idBarcodeSkuDisparityDetail, nameSkuDisparityDetail, shortNameUOMSkuDisparityDetail, nameBatchDisparityDetail,
                    costBatchDisparityDetail, expiryDateBatchDisparityDetail, quantityDisparityDetail, priceDisparityDetail, sumDisparityDetail,
                    inputIdBarcodeSkuDisparityDetail, inputNameSkuDisparityDetail, inputShortNameUOMSkuDisparityDetail,
                    inputQuantityDisparityDetail, inputPriceDisparityDetail, inputSumDisparityDetail

    FILTERS         disparityDisparityDetail(d) == dis
;
@extendFormFilterAccessStock(Disparity, dis, disparities, stock, company);

DESIGN disparities FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW documentContainer  {
            fill = 1;
            type = SPLITV;

            ADD dis.box {
                fill = 2;
            }
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                ADD d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    ADD dis.created;
                    ADD dis.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
        ADD functions.box;
    }
}
@extendFormEditable(disparities);
@defineFilterIsOpened (disparity, disparities, dis);
NAVIGATOR {
    stockNavigator {
        NEW disparityNavigator 'Изменение сортности' BEFORE balanceSku {
            ADD disparities;
        }
    }
}

//Родительский товар

disparityItemItem 'Уцененный товар' = DATA Item (Item);
nameSkuDisparityItemItem 'Уцененный товар' = nameSku(disparityItemItem(item));

countItemDisparityItem = GROUP SUM 1 IF disparityItemItem(item) == disparityItem BY disparityItem; 

copyDisparityDataItem = ACTION (item, i) {
    disparityItemItem(i) <- item; 
    itemGroupItem(i) <- itemGroupItem(item);
    captionItem(i) <- captionItem(item) + ' (УЦЕН.)';
    originalCaptionItem(i) <- originalCaptionItem(item);
    UOMItem(i) <- UOMItem(item);
    brandItem(i) <- brandItem(item);
    manufacturerItem(i) <- manufacturerItem(item);
    compositionItem(i) <- compositionItem(item);
    originalCompositionItem(i) <- originalCompositionItem(item);
    netWeightItem(i) <- netWeightItem(item);
    grossWeightItem(i) <- grossWeightItem(item);
    countryItem(i) <- countryItem(item);
    dataImageItem(i) <- dataImageItem(item);
    skuTypeItem(i) <- skuTypeItem(item);
    splitItem(i) <- splitItem(item);
    inactiveItem(i) <- inactiveItem(item);
    
    generateBarcodeSku(i);       
    
    customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeItem(type, item);
    
    EXEC overCopyItem(item, i);    
}

copyDisparityItem 'Создать уцененный товар' = ACTION (item) {
    IF (item IS Item) THEN {
        NEWSESSION NESTED addedSku {
            FOR ADDOBJ i = Item DO {
                copyDisparityDataItem(item, i);
                FORM item OBJECTS i = i MANAGESESSION DOCKEDMODAL;
                IF formResult() == FormResult.ok THEN {
                    addedSku() <- i;
                }
            }
        }
    }
} EDITKEY 'F6' TOOLBAR;

EXTEND FORM item
    PROPERTIES(i) nameSkuDisparityItemItem 
    OBJECTS di = Item
    PROPERTIES(di) READONLY idBarcodeSku, nameSku
    FILTERS disparityItemItem(di)==i 
;

EXTEND DESIGN item {
    itemDetail {
        NEW disparityItem AFTER calcPriceListTypePrm {
            type = CONTAINERV;
            caption = 'Уценки';
            ADD PROPERTY(nameSkuDisparityItemItem(i));
            ADD di.box;
        }
    }    
}

isNotDisparityItem = item IS Item AND NOT disparityItemItem(item);

EXTEND FORM items
    PROPERTIES (i) copyDisparityItem
    FILTERGROUP disparityFilter
        FILTER 'Без уцен.' isNotDisparityItem(i) 'F5' DEFAULT
        FILTER 'С уценкой' disparityItemItem(i) 'ctrl F5' 
;

EXTEND DESIGN items {
    actions {
        NEW disparity {
            caption = 'Уценка';
            type = CONTAINERH;
            ADD filters.disparityFilter;
            ADD PROPERTY(copyDisparityItem(i));
        }
    }
}