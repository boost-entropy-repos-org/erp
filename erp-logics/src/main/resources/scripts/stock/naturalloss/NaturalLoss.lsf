MODULE NaturalLoss;

REQUIRE Document, PriceListType, SaleLedger, Integration, PriceListLedger;

GROUP rateGroup 'Нормы' : public;

// ----------------------------------- Справочник норм естественной убыли -------------------------------------------- //

CLASS NaturalLossGroup 'Группа естественной убыли';
TABLE naturalLossGroup(NaturalLossGroup);

nameNaturalLossGroup 'Наименование' = DATA VARISTRING[110](NaturalLossGroup);

CLASS SubNaturalLossGroup 'Группа естественной убыли';
TABLE subNaturalLossGroup(SubNaturalLossGroup);

nameSubNaturalLossGroup 'Наименование' = DATA VARISTRING[110](SubNaturalLossGroup);

CLASS SubNaturalLossGroupDetail 'Строка группы естественной убыли';
TABLE subNaturalLossGroupDetail(SubNaturalLossGroupDetail);

parentNaturalLossGroup = DATA NaturalLossGroup (SubNaturalLossGroup);
nameParentNaturalLossGroup 'Родительская группа' (subNaturalLossGroup) = nameNaturalLossGroup(parentNaturalLossGroup(subNaturalLossGroup));
codeSubNaturalLossGroup 'Код нормы естественной убыли' = DATA STRING[3] (SubNaturalLossGroup);

nameToNaturalLossGroup (name) = GROUP AGGR naturalLossGroup BY nameNaturalLossGroup(naturalLossGroup) WHERE naturalLossGroup IS NaturalLossGroup;
subNaturalLossGroupSubNaturalLossGroupDetail = DATA SubNaturalLossGroup (SubNaturalLossGroupDetail);
dayFromNaturalLossGroupDetail 'День' = DATA INTEGER (SubNaturalLossGroupDetail);
monthFromNaturalLossGroupDetail = DATA Month (SubNaturalLossGroupDetail);
nameMonthFromNaturalLossGroupDetail 'Месяц' = staticCaption(monthFromNaturalLossGroupDetail(subNaturalLossGroupDetail));
dayToNaturalLossGroupDetail 'День' = DATA INTEGER (SubNaturalLossGroupDetail);
monthToNaturalLossGroupDetail = DATA Month (SubNaturalLossGroupDetail);
nameMonthToNaturalLossGroupDetail 'Месяц' = staticCaption(monthToNaturalLossGroupDetail(subNaturalLossGroupDetail));
percentNaturalLossGroupDetail '% естественной убыли' = DATA NUMERIC[10,5] (SubNaturalLossGroupDetail);

dateToNumber(prm1, prm2) = prm2*32 + prm1;
inInterval(prm1, prm2, prm3, prm4, prm5, prm6) = (dateToNumber(prm1, prm2) >= dateToNumber(prm3, prm4))
                                               AND (dateToNumber(prm1, prm2) <= dateToNumber(prm5, prm6));

inIntervalNaturalLoss (date, subNaturalLossGroupDetail) =
 inInterval(dayInDate(date), numberMonthInDate(date),
            dayFromNaturalLossGroupDetail(subNaturalLossGroupDetail),
            numberMonth(monthFromNaturalLossGroupDetail(subNaturalLossGroupDetail)),
            dayToNaturalLossGroupDetail(subNaturalLossGroupDetail),
            numberMonth(monthToNaturalLossGroupDetail(subNaturalLossGroupDetail))) AND date IS DATE;

castInterval =
 FORMULA VARSTRING[100] ' CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) || \' - \' || CAST($3 AS TEXT) || \' \' || CAST($4 AS TEXT)';
castIntervalNaturalLoss (subNaturalLossGroupDetail) =
 castInterval(dayFromNaturalLossGroupDetail(subNaturalLossGroupDetail),
              nameMonthFromNaturalLossGroupDetail(subNaturalLossGroupDetail),
              dayToNaturalLossGroupDetail(subNaturalLossGroupDetail),
              nameMonthToNaturalLossGroupDetail(subNaturalLossGroupDetail));

concatSubNaturalLossGroupDetail (subNaturalLossGroup) =
 GROUP CONCAT STRING[15](percentNaturalLossGroupDetail(subNaturalLossGroupDetail)), ','
       BY subNaturalLossGroupSubNaturalLossGroupDetail(subNaturalLossGroupDetail)
       ORDER subNaturalLossGroupDetail
       MINCHARWIDTH 10 PREFCHARWIDTH 30;

inSubNaturalLossGroup (subNaturalLossGroup, subNaturalLossGroupDetail) =
 subNaturalLossGroupSubNaturalLossGroupDetail(subNaturalLossGroupDetail) ==  subNaturalLossGroup;

subNaturalLossGroupCountrySku 'Группа естественной убыли товара(ИД)' = ABSTRACT SubNaturalLossGroup (Country, Sku);
nameSubNaturalLossGroupCountrySku 'Группа естественной убыли товара' (country, sku) = nameSubNaturalLossGroup(subNaturalLossGroupCountrySku(country, sku)) IN rateGroup;
rateSubNaturalLossGroupCountrySku 'Норма естественной убыли, %' (country, sku) =
 concatSubNaturalLossGroupDetail(subNaturalLossGroupCountrySku(country, sku)) IN rateGroup;

inParentNaturalLossGroup(naturalLossGroup, subNaturalLossGroup) =
 parentNaturalLossGroup(subNaturalLossGroup ) == naturalLossGroup;

inParentSubNaturalLossGroup (naturalLossGroup, subNaturalLossGroup) = OVERRIDE
 parentNaturalLossGroup(subNaturalLossGroup) == naturalLossGroup,
 subNaturalLossGroup IS SubNaturalLossGroup AND NOT naturalLossGroup;

numberFromSubNaturalLossGroupDetail (subNaturalLossGroupDetail) =
 dateToNumber(dayFromNaturalLossGroupDetail(subNaturalLossGroupDetail),
              numberMonth(monthFromNaturalLossGroupDetail(subNaturalLossGroupDetail)));

numberToSubNaturalLossGroupDetail (subNaturalLossGroupDetail) =
 dateToNumber(dayToNaturalLossGroupDetail(subNaturalLossGroupDetail),
              numberMonth(monthToNaturalLossGroupDetail(subNaturalLossGroupDetail)));

intersect(prm1, prm2, prm3, prm4) = (prm4-prm1)*(prm2-prm3) >= 0;

intersectNaturalLoss(interval1, interval2) = intersect(numberFromSubNaturalLossGroupDetail(interval1),
                                                    numberToSubNaturalLossGroupDetail(interval1),
                                                    numberFromSubNaturalLossGroupDetail(interval2),
                                                    numberToSubNaturalLossGroupDetail(interval2));

CONSTRAINT intersectNaturalLoss(interval1, interval2) AND interval1 != interval2
        AND subNaturalLossGroupSubNaturalLossGroupDetail(interval1) == subNaturalLossGroupSubNaturalLossGroupDetail(interval2)
        CHECKED BY intersectNaturalLoss MESSAGE 'Интервалы не могут пересекаться';

 CONSTRAINT dayFromNaturalLossGroupDetail(subNaturalLossGroupDetail) < 1
        OR dayFromNaturalLossGroupDetail(subNaturalLossGroupDetail) > 31
        CHECKED BY dayFromNaturalLossGroupDetail MESSAGE 'Задайте корректный день месяца';

 CONSTRAINT dayToNaturalLossGroupDetail(subNaturalLossGroupDetail) < 1
        OR dayToNaturalLossGroupDetail(subNaturalLossGroupDetail) > 31
        CHECKED BY dayToNaturalLossGroupDetail MESSAGE 'Задайте корректный день месяца';

countryNaturalLossGroup = DATA Country (NaturalLossGroup) AUTOSET;
nameCountryNaturalLossGroup 'Страна' (naturalLossGroup) = nameCountry(countryNaturalLossGroup(naturalLossGroup)) IN base;

countrySubNaturalLossGroup = DATA Country (SubNaturalLossGroup) AUTOSET;
nameCountrySubNaturalLossGroup 'Страна' (subNaturalLossGroup) = nameCountry(countrySubNaturalLossGroup(subNaturalLossGroup)) IN base;

CONSTRAINT  countryNaturalLossGroup(parentNaturalLossGroup(subNaturalLossGroup)) !=  countrySubNaturalLossGroup(subNaturalLossGroup)
    CHECKED BY parentNaturalLossGroup MESSAGE 'Страна родительской группы должна совпадать со страной группы';

FORM subNaturalLossGroup 'Группа естественное убыли'

    OBJECTS s = SubNaturalLossGroup FIXED PANEL
    PROPERTIES(s) nameSubNaturalLossGroup, nameParentNaturalLossGroup, nameCountrySubNaturalLossGroup

    EDIT SubNaturalLossGroup OBJECT s
;

FORM dialogSubNaturalLossGroup 'Группа естественное убыли'

    OBJECTS s = SubNaturalLossGroup
    PROPERTIES(s) READONLY nameSubNaturalLossGroup, nameParentNaturalLossGroup, nameCountrySubNaturalLossGroup

    DIALOG SubNaturalLossGroup OBJECT s
;

FORM subNaturalLossGroupDetail 'Строка группы естественной убыли'

    OBJECTS s = SubNaturalLossGroupDetail
    PROPERTIES(s) READONLY dayFromNaturalLossGroupDetail, nameMonthFromNaturalLossGroupDetail,
                           dayToNaturalLossGroupDetail, nameMonthToNaturalLossGroupDetail, percentNaturalLossGroupDetail

    DIALOG SubNaturalLossGroupDetail OBJECT s
;

FORM naturalLossGroups 'Справочник норм естественной убыли'
    OBJECTS c=Country FIXED PANEL
    PROPERTIES(c) SELECTOR nameCountry

    TREE treeNaturalLoss a=STRING[3], n=NaturalLossGroup
    PROPERTIES READONLY OBJVALUE(a)
    PROPERTIES nameNaturalLossGroup(n), nameCountryNaturalLossGroup(n), ADDOBJ(n), deleten=DELETE(n) FORCE PANEL TOOLBAR
    ORDER BY nameNaturalLossGroup(n)

    OBJECTS sg=SubNaturalLossGroup, d=SubNaturalLossGroupDetail
    PROPERTIES(sg) nameSubNaturalLossGroup, nameCountrySubNaturalLossGroup, nameParentNaturalLossGroup,
                   codeSubNaturalLossGroup, ADDFORM TODRAW sg, deletesg=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(d) dayFromNaturalLossGroupDetail, nameMonthFromNaturalLossGroupDetail,
                  dayToNaturalLossGroupDetail, nameMonthToNaturalLossGroupDetail,
                  percentNaturalLossGroupDetail, ADDOBJ, DELETESESSION
    FILTERS stringEqualsAll(a), inParentSubNaturalLossGroup(n, sg),  inSubNaturalLossGroup(sg, d)
    ORDER BY nameSubNaturalLossGroup(sg)

    FILTERS countryNaturalLossGroup(n) == c OR n IS NaturalLossGroup AND NOT c,
            countrySubNaturalLossGroup(sg) == c OR sg IS SubNaturalLossGroup AND NOT c
;

DESIGN naturalLossGroups FROM DEFAULT {

    NEW topContainer {
        fill = 1;
        type = CONTAINERV;
        ADD c.box;
        NEW firstContainer {
            fill = 1;
            type = SPLITH;

            ADD treeNaturalLoss.tree.box;
            NEW firstCase {
                fill = 3;
                type = SPLITV;
                ADD sg.box {
                    fill = 2;
                }
                ADD d.box;
            }
        }
    }

    ADD functions.box;
}

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS NaturalLoss 'Ведомость естественной убыли' : Historizable, NumberedObject;
CLASS NaturalLossDetail 'Строка ведомости естественной убыли';
CLASS NaturalLossPosted 'Проведенная ведомость естественной убыли' : NaturalLoss, PostedObject;

@defineDocument(naturalLoss);
@deriveDocumentHeaderTimePrefix(NaturalLoss, );

@defineDocumentDataStock (naturalLoss, stock, 'Склад', );
@defineDocumentPosted(naturalLoss);

@defineDocumentDetailSku(naturalLoss, sku);
//@defineDocumentDetailSkuItem(naturalLoss);

@defineDocumentDetailQuantity(naturalLoss);
//@defineDocumentDetailBasePrice(naturalLoss, departmentStore);

@defineDocumentHeaderQuantity(naturalLoss);

@defineAddDetailDialogSkuStock(naturalLoss, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(naturalLoss, sku);

//countryNaturalLoss(naturalLoss) = countryLegalEntity(legalEntityStore(storeDepartmentStore(departmentStoreNaturalLoss(naturalLoss))));
countryNaturalLossDetail(naturalLossDetail) = countryNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));

GROUP fillNaturalLossGroup 'Автоматическое заполнение' : public;
dateFromNaturalLoss 'Дата с' = DATA DATE (NaturalLoss) IN fillNaturalLossGroup;
dateToNaturalLoss 'Дата по' = DATA DATE (NaturalLoss) IN fillNaturalLossGroup;

dateFromNaturalLossDetail 'Дата с' (naturalLossDetail) = dateFromNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));
dateToNaturalLossDetail 'Дата по' (naturalLossDetail) = dateToNaturalLoss(naturalLossNaturalLossDetail(naturalLossDetail));

subNaturalLossGroupNaturalLossDetail = DATA SubNaturalLossGroup (NaturalLossDetail);
nameSubNaturalLossGroupNaturalLossDetail 'Группа естественной убыли' =
    nameSubNaturalLossGroup(subNaturalLossGroupNaturalLossDetail(naturalLossDetail));
codeNaturalLossDetail 'Код нормы естественной убыли' =
    codeSubNaturalLossGroup(subNaturalLossGroupNaturalLossDetail(naturalLossDetail));

quantityLossNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (NaturalLossDetail);

@defineDocumentDetailBatchCustomPrefix(naturalLossDetail, batch, );
quantityLossNaturalLossDetail(naturalLossDetail) <- quantityBatch(batchNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(batchNaturalLossDetail(naturalLossDetail));

@defineDocumentDetailPricePrefix (naturalLoss, , ' учетная ');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (naturalLoss, accountPriceListType, , , sku, stock);

subNaturalDetailNaturalLossDetail = DATA SubNaturalLossGroupDetail(NaturalLossDetail);
nameSubNaturalDetailNaturalLossDetail 'Период' (naturalLossDetail) =
    castIntervalNaturalLoss(subNaturalDetailNaturalLossDetail(naturalLossDetail));

percentNaturalLossDetail 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (NaturalLossDetail);
percentNaturalLossDetail(naturalLossDetail) <- percentNaturalLossGroupDetail(subNaturalDetailNaturalLossDetail(naturalLossDetail))
    WHEN CHANGED(subNaturalDetailNaturalLossDetail(naturalLossDetail));

castTwoObjectsToString150 = FORMULA VARSTRING[150] 'CAST($1 AS TEXT) || \'  \' || CAST($2 AS TEXT)';
castNameSubNaturalLossGroup 'Группа естественной убыли' (naturalLossDetail) =
    castTwoObjectsToString150(nameSubNaturalLossGroupNaturalLossDetail(naturalLossDetail),
                              nameSubNaturalDetailNaturalLossDetail(naturalLossDetail));

CONSTRAINT subNaturalLossGroupNaturalLossDetail(naturalLossDetail) != subNaturalLossGroupSubNaturalLossGroupDetail(subNaturalDetailNaturalLossDetail(naturalLossDetail))
    CHECKED BY subNaturalDetailNaturalLossDetail MESSAGE 'Группа естественной убыли товара должна соответствовать группе периода';

quantityNaturalLossDetail (naturalLossDetail) <- percentNaturalLossDetail(naturalLossDetail) * quantityLossNaturalLossDetail(naturalLossDetail) /100
    WHEN CHANGED(percentNaturalLossDetail(naturalLossDetail)) OR
         CHANGED(quantityLossNaturalLossDetail(naturalLossDetail));

quantitySoldSkuDepartmentNaturalLoss 'Продано' (sku, stock, dateFrom, dateTo, subNaturalLossGroupDetail) =
    GROUP SUM quantitySaleLedger(ledger) IF dateSaleLedger(ledger) >= dateFrom AND dateSaleLedger(ledger) <= dateTo
              AND inIntervalNaturalLoss(dateSaleLedger(ledger), subNaturalLossGroupDetail)
              AND subNaturalLossGroupCountrySku(countryStock(stockSaleLedger(ledger)), skuSaleLedger(ledger)) == subNaturalLossGroupSubNaturalLossGroupDetail(subNaturalLossGroupDetail)
              BY skuSaleLedger(ledger), stockSaleLedger(ledger), dateFrom, dateTo, subNaturalLossGroupDetail;

sumNaturalLossDetail 'Сумма' (naturalLossDetail) = DATA NUMERIC[16,2] (NaturalLossDetail);
sumNaturalLossDetail (naturalLossDetail) <- priceNaturalLossDetail(naturalLossDetail) * quantityNaturalLossDetail(naturalLossDetail)
    WHEN CHANGED(priceNaturalLossDetail(naturalLossDetail)) OR
         CHANGED(quantityNaturalLossDetail(naturalLossDetail));

sumNaturalLoss 'Сумма' (naturalLoss) = GROUP SUM sumNaturalLossDetail(naturalLossDetail)
    BY naturalLossNaturalLossDetail(naturalLossDetail) IN documentSumGroup;

toFillNaturalLossDetail 'Заполнить на основе продаж' = ACTION (naturalLoss) {
    FOR quantitySoldSkuDepartmentNaturalLoss( sku,
                                              stockNaturalLoss(naturalLoss),
                                              dateFromNaturalLoss(naturalLoss),
                                              dateToNaturalLoss(naturalLoss),
                                              subNaturalLossGroupDetail) ORDER nameSku(sku), subNaturalLossGroupDetail
        DO {
        FOR ADDOBJ d = NaturalLossDetail DO {
            ASSIGN naturalLossNaturalLossDetail(d) <- naturalLoss;
            ASSIGN skuNaturalLossDetail(d) <- sku;
            ASSIGN subNaturalLossGroupNaturalLossDetail(d) <- subNaturalLossGroupCountrySku(countryNaturalLoss(naturalLossNaturalLossDetail(d)), sku);
            ASSIGN quantityLossNaturalLossDetail(d) <- quantitySoldSkuDepartmentNaturalLoss(
                                                                    sku,
                                                                    stockNaturalLoss(naturalLoss),
                                                                    dateFromNaturalLoss(naturalLoss),
                                                                    dateToNaturalLoss(naturalLoss),
                                                                    subNaturalLossGroupDetail);
            ASSIGN subNaturalDetailNaturalLossDetail(d) <- subNaturalLossGroupDetail;
            ASSIGN percentNaturalLossDetail(d) <- percentNaturalLossGroupDetail(subNaturalLossGroupDetail);
            ASSIGN quantityNaturalLossDetail (d) <- percentNaturalLossDetail(d) * quantityLossNaturalLossDetail(d) /100;
            ASSIGN sumNaturalLossDetail (d) <- priceNaturalLossDetail(d) * quantityNaturalLossDetail(d);
        };
    };
} IN fillNaturalLossGroup CONFIRM;

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=NaturalLoss FIXED PANEL
    PROPERTIES(s) objectClassName, numberObject, nameStockNaturalLoss, timeNaturalLoss, seriesObject,
                  dateNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss, toFillNaturalLossDetail,
                  quantityNaturalLossDetailNaturalLoss, sumNaturalLoss, noteNaturalLoss
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) indexNaturalLossDetail, idBarcodeSkuNaturalLossDetail, nameSkuNaturalLossDetail, shortNameUOMSkuNaturalLossDetail,
                  nameBatchNaturalLossDetail, quantityLossNaturalLossDetail, nameSubNaturalLossGroupNaturalLossDetail,
                  codeNaturalLossDetail, nameSubNaturalDetailNaturalLossDetail, percentNaturalLossDetail, quantityNaturalLossDetail, priceNaturalLossDetail,
                  sumNaturalLossDetail, nameStockNaturalLossDetail, ADDOBJ, DELETESESSION

    PROPERTIES(s) TODRAW d addDetailDialogSkuStockNaturalLossDetailNaturalLoss,
                           addDetailInputBarcodeNaturalLossDetailNaturalLoss, deleteNaturalLossDetailNaturalLoss

    FILTERS inNaturalLossNaturalLossDetail(s, d)

    EVENTS
        ON OK prePostNaturalLoss(s)

    EDIT NaturalLoss OBJECT s
;

DESIGN naturalLoss FROM DEFAULT{
    main {
        NEW header.box {
            type = CONTAINERH;

            NEW headerCol1 {
                fill = 1;
                type = CONTAINERV;

                ADD s.documentHeaderGroup {
                    type = CONTAINERH;
                    ADD PROPERTY(objectClassName);
                    ADD PROPERTY(nameStockNaturalLoss);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateNaturalLoss);
                    ADD PROPERTY(timeNaturalLoss);
                }

                ADD s.documentPrmGroup {
                    columns = 2;
                }
                ADD s.fillNaturalLossGroup {
                    columns = 3;
                }
            }

            ADD s.documentSumGroup {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            type = TABBED;
            ADD d.box {
                caption = 'Спецификация';
            }
        }
        ADD functions.box;

        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(naturalLoss, accountPriceListType, stock);
@extendFormDocumentSkuStock(naturalLoss, naturalLoss, s, legalEntityStock, stock);

@defineDocumentBatchStockPriceListTypeSystemLedger(naturalLoss, accountPriceListType, stock);
@extendFormDocumentBatchStock(naturalLoss, naturalLoss, s, legalEntityStock, stock);

FORM naturalLosses 'Ведомости естественной убыли'
    OBJECTS s=NaturalLoss
    PROPERTIES(s) READONLY numberObject, seriesObject, dateNaturalLoss, timeNaturalLoss,
                           nameStockNaturalLoss, dateFromNaturalLoss, dateToNaturalLoss,
                           quantityNaturalLossDetailNaturalLoss, sumNaturalLoss, noteNaturalLoss
    PROPERTIES(s) ADDFORM, EDITFORM, deletes=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(s) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) READONLY indexNaturalLossDetail, idBarcodeSkuNaturalLossDetail, nameSkuNaturalLossDetail, shortNameUOMSkuNaturalLossDetail,
                           nameBatchNaturalLossDetail, quantityLossNaturalLossDetail,
                           nameSubNaturalLossGroupNaturalLossDetail, codeNaturalLossDetail, nameSubNaturalDetailNaturalLossDetail,
                           percentNaturalLossDetail, quantityNaturalLossDetail, priceNaturalLossDetail, sumNaturalLossDetail, nameStockNaturalLossDetail

    FILTERS inNaturalLossNaturalLossDetail(s, d)
;
@extendFormFilterAccessStock(NaturalLoss, s, naturalLosses, stock, company);

DESIGN naturalLosses FROM DEFAULT {
    NEW documentContainer BEFORE functions.box {
        fill = 1;
        type = SPLITV;

        ADD s.box { fill = 2; }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            ADD d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                ADD s.historyGroup;
                ADD s.postedGroup;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
        }
    }
}

NAVIGATOR {
    stockNavigator {
        NEW naturalLossNavigator 'Естественная убыль' BEFORE balanceSku {
            ADD naturalLosses;
            ADD naturalLossGroups;
        }
    }
}

//------------------- Справочник норм естественной убыли----------------------------//

loadDefaultNaturalLossGroup 'Добавить нормы естественной убыли' = ACTION (idCountry, string)  {
    ADDOBJ NaturalLossGroup;
    FOR cg == addedObject() DO {
         ASSIGN nameNaturalLossGroup(cg) <- string;
         ASSIGN countryNaturalLossGroup(cg) <- countrySID(idCountry);
    }
}

loadDefaultSubNaturalLossGroup 'Добавить нормы естественной убыли' = ACTION (idCountry, string, stringOne, stringTwo, numeric)  {
    ADDOBJ SubNaturalLossGroup;
    FOR g == addedObject() DO {
        ASSIGN parentNaturalLossGroup(g) <- nameToNaturalLossGroup(string);
        ASSIGN nameSubNaturalLossGroup(g) <-  stringOne;
        ASSIGN countrySubNaturalLossGroup(g) <- countrySID(idCountry);
        ASSIGN codeSubNaturalLossGroup(g) <- stringTwo;

        ADDOBJ SubNaturalLossGroupDetail;
        FOR d == addedObject() DO {
            ASSIGN subNaturalLossGroupSubNaturalLossGroupDetail(d) <- g;
            ASSIGN percentNaturalLossGroupDetail(d) <- numeric;
            ASSIGN dayFromNaturalLossGroupDetail(d) <- 1;
            ASSIGN monthFromNaturalLossGroupDetail(d) <- Month.january;
            ASSIGN dayToNaturalLossGroupDetail(d) <- 31;
            ASSIGN monthToNaturalLossGroupDetail(d) <- Month.december;
        }
    }
}

loadDefaultNaturalLossGroups 'Загрузить стандартные группы естественной убыли' = ABSTRACT ACTION LIST () IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultNaturalLossGroups);