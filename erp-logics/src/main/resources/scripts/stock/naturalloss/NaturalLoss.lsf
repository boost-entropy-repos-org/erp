MODULE NaturalLoss;

REQUIRE Document, PriceListType, SaleLedger, PurchaseLedger, Integration, PriceListLedger;

GROUP rate 'Нормы' : public;

// ----------------------------------- Справочник норм естественной убыли -------------------------------------------- //

CLASS NaturalLossGroup 'Группа естественной убыли';
TABLE naturalLossGroup(NaturalLossGroup);

name 'Наименование' = DATA VARISTRING[110](NaturalLossGroup) IN recognize;

CLASS SubNaturalLossGroup 'Группа естественной убыли';
TABLE subNaturalLossGroup(SubNaturalLossGroup);

name 'Наименование' = DATA VARISTRING[110](SubNaturalLossGroup) IN recognize;

CLASS SubNaturalLossGroupDetail 'Строка группы естественной убыли';
TABLE subNaturalLossGroupDetail(SubNaturalLossGroupDetail);

parent = DATA NaturalLossGroup (SubNaturalLossGroup) AUTOSET;
nameParent 'Родительская группа' (SubNaturalLossGroup subNaturalLossGroup) = name(parent(subNaturalLossGroup));
code 'Код нормы естественной убыли' = DATA STRING[3] (SubNaturalLossGroup);
subNaturalLossGroupId (name) = GROUP AGGR SubNaturalLossGroup subNaturalLossGroup BY code(subNaturalLossGroup) WHERE subNaturalLossGroup IS SubNaturalLossGroup;


naturalLossGroup (name) = GROUP AGGR NaturalLossGroup naturalLossGroup BY name(naturalLossGroup) WHERE naturalLossGroup IS NaturalLossGroup;
subNaturalLossGroup = DATA SubNaturalLossGroup (SubNaturalLossGroupDetail);
dayFrom 'День' = DATA INTEGER (SubNaturalLossGroupDetail);
monthFrom = DATA Month (SubNaturalLossGroupDetail);
nameMonthFrom 'Месяц' = staticCaption(monthFrom(SubNaturalLossGroupDetail subNaturalLossGroupDetail));
dayTo 'День' = DATA INTEGER (SubNaturalLossGroupDetail);
monthTo = DATA Month (SubNaturalLossGroupDetail);
nameMonthTo 'Месяц' = staticCaption(monthTo(SubNaturalLossGroupDetail subNaturalLossGroupDetail));
percent '% естественной убыли' = DATA NUMERIC[10,5] (SubNaturalLossGroupDetail);

dateToNumber(prm1, prm2) = prm2*32 + prm1;
dateToNumberIntersect(prm1, prm2) = prm2*32 + (prm1*12);
inInterval(INTEGER prm1, INTEGER prm2, INTEGER prm3, INTEGER prm4, INTEGER prm5, INTEGER prm6) = (dateToNumber(prm1, prm2) >= dateToNumber(prm3, prm4))
                                               AND (dateToNumber(prm1, prm2) <= dateToNumber(prm5, prm6));

inInterval (DATE date, SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    inInterval(extractDay(date), extractMonthNumber(date),
    dayFrom(subNaturalLossGroupDetail),
    number(monthFrom(subNaturalLossGroupDetail)),
    dayTo(subNaturalLossGroupDetail),
    number(monthTo(subNaturalLossGroupDetail))) AND date IS DATE;

castInterval (SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    dayFrom(subNaturalLossGroupDetail) + ' ' +
    nameMonthFrom(subNaturalLossGroupDetail) + ' - ' +
    dayTo(subNaturalLossGroupDetail) + ' ' +
    nameMonthTo(subNaturalLossGroupDetail);

concatDetail (subNaturalLossGroup) =
    GROUP CONCAT STRING[15](percent(SubNaturalLossGroupDetail subNaturalLossGroupDetail)), ','
        BY subNaturalLossGroup(subNaturalLossGroupDetail)
        ORDER subNaturalLossGroupDetail
        MINCHARWIDTH 10 PREFCHARWIDTH 30;

in (SubNaturalLossGroup subNaturalLossGroup, SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
 subNaturalLossGroup(subNaturalLossGroupDetail) ==  subNaturalLossGroup;

subNaturalLossGroup 'Группа естественной убыли товара(ИД)' = ABSTRACT SubNaturalLossGroup (Country, Sku);
nameSubNaturalLossGroup 'Группа естественной убыли товара' (Country country, Sku sku) = name(subNaturalLossGroup(country, sku)) IN rate;
rateSubNaturalLossGroup 'Норма естественной убыли, %' (Country country, Sku sku) =
    concatDetail(subNaturalLossGroup(country, sku)) IN rate;

inParent(NaturalLossGroup naturalLossGroup, SubNaturalLossGroup subNaturalLossGroup) =
    parent(subNaturalLossGroup ) == naturalLossGroup;

inParentNull (NaturalLossGroup naturalLossGroup, SubNaturalLossGroup subNaturalLossGroup) = OVERRIDE
    parent(subNaturalLossGroup) == naturalLossGroup,
    subNaturalLossGroup IS SubNaturalLossGroup AND NOT naturalLossGroup;

numberFrom (SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    dateToNumber(dayFrom(subNaturalLossGroupDetail),
    number(monthFrom(subNaturalLossGroupDetail)));

numberTo (SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    dateToNumber(dayTo(subNaturalLossGroupDetail),
    number(monthTo(subNaturalLossGroupDetail)));

intersect(INTEGER prm1, INTEGER prm2, INTEGER prm3, INTEGER prm4) = (prm4-prm1)*(prm2-prm3) >= 0;

intersect(SubNaturalLossGroupDetail interval1, SubNaturalLossGroupDetail interval2) = intersect(numberFrom(interval1),
                                                    numberTo(interval1),
                                                    numberFrom(interval2),
                                                    numberTo(interval2));

CONSTRAINT intersect(SubNaturalLossGroupDetail interval1, SubNaturalLossGroupDetail interval2) AND interval1 != interval2
        AND subNaturalLossGroup(interval1) == subNaturalLossGroup(interval2)
        CHECKED BY intersect[SubNaturalLossGroupDetail,SubNaturalLossGroupDetail] MESSAGE 'Интервалы не могут пересекаться';

CONSTRAINT dayFrom(SubNaturalLossGroupDetail subNaturalLossGroupDetail) < 1  OR dayFrom(subNaturalLossGroupDetail) > 31
    CHECKED BY dayFrom[SubNaturalLossGroupDetail] MESSAGE 'Задайте корректный день месяца';

CONSTRAINT dayTo(SubNaturalLossGroupDetail subNaturalLossGroupDetail) < 1 OR dayTo(subNaturalLossGroupDetail) > 31
    CHECKED BY dayTo[SubNaturalLossGroupDetail] MESSAGE 'Задайте корректный день месяца';

country = DATA Country (NaturalLossGroup) AUTOSET;
nameCountry 'Страна' (NaturalLossGroup naturalLossGroup) = name(country(naturalLossGroup)) IN base;

country = DATA Country (SubNaturalLossGroup) AUTOSET;
nameCountry 'Страна' (SubNaturalLossGroup subNaturalLossGroup) = name(country(subNaturalLossGroup)) IN base;

CONSTRAINT  country(parent(SubNaturalLossGroup subNaturalLossGroup)) !=  country(subNaturalLossGroup)
    CHECKED BY parent[SubNaturalLossGroup] MESSAGE 'Страна родительской группы должна совпадать со страной группы';

FORM subNaturalLossGroup 'Группа естественное убыли'

    OBJECTS s = SubNaturalLossGroup FIXED PANEL
    PROPERTIES(s) name, nameParent, nameCountry

    EDIT SubNaturalLossGroup OBJECT s
;

FORM dialogSubNaturalLossGroup 'Группа естественное убыли'

    OBJECTS s = SubNaturalLossGroup
    PROPERTIES(s) READONLY name, nameParent, nameCountry

    DIALOG SubNaturalLossGroup OBJECT s
;

FORM subNaturalLossGroupDetail 'Строка группы естественной убыли'

    OBJECTS s = SubNaturalLossGroupDetail
    PROPERTIES(s) READONLY dayFrom, nameMonthFrom,
                           dayTo, nameMonthTo, percent

    DIALOG SubNaturalLossGroupDetail OBJECT s
;

FORM naturalLossGroup 'Группа естественной убыли'
    OBJECTS n = NaturalLossGroup FIXED PANEL
    PROPERTIES name(n), nameCountry(n)   
    EDIT NaturalLossGroup  OBJECT n
;


FORM naturalLossGroups 'Справочник норм естественной убыли'
    OBJECTS c=Country FIXED PANEL
    PROPERTIES(c) SELECTOR name

    TREE treeNaturalLoss a=STRING[3], n=NaturalLossGroup
    PROPERTIES READONLY OBJVALUE(a)
    PROPERTIES READONLY name(n), nameCountry(n)
    PROPERTIES ADDFORM(n), deleten=DELETE(n) FORCE PANEL TOOLBAR
    ORDER BY name(n)

    OBJECTS sg=SubNaturalLossGroup, d=SubNaturalLossGroupDetail
    PROPERTIES(sg) READONLY name, nameCountry, nameParent,
                   code
    PROPERTIES(sg) ADDFORM TODRAW sg, deletesg=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(d)  dayFrom, nameMonthFrom,
                   dayTo, nameMonthTo,
                   percent
    PROPERTIES(d)  ADDOBJ, DELETESESSION 
    FILTERS stringEqualsAll(a), inParentNull(n, sg),  in(sg, d)
    ORDER BY name(sg)

    FILTERS country(n) == c OR n IS NaturalLossGroup AND NOT c,
            country(sg) == c OR sg IS SubNaturalLossGroup AND NOT c
;

seekDefaultCountryNaturalLoss() = ACTION () {
    IF defaultCountry() THEN {
        SEEK naturalLossGroups.c defaultCountry();
    }
}
EXTEND FORM naturalLossGroups
    EVENTS ON INIT seekDefaultCountryNaturalLoss()
;

DESIGN naturalLossGroups {

    NEW topContainer {
        fill = 1;
        type = CONTAINERV;
        MOVE c.box;
        NEW firstContainer {
            fill = 1;
            type = SPLITH;

            MOVE treeNaturalLoss.tree.box;
            NEW firstCase {
                fill = 3;
                type = SPLITV;
                MOVE sg.box {
                    fill = 2;
                }
                MOVE d.box;
            }
        }
    }

    MOVE functions.box;
}

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS NaturalLoss 'Ведомость естественной убыли';
CLASS NaturalLossDetail 'Строка ведомости естественной убыли';

@defineDocument(naturalLoss);
@deriveDocumentHeaderTimePrefix(NaturalLoss, );

@defineDocumentDataStock (naturalLoss, stock, 'Склад', );
@defineDocumentDialogStocks(naturalLoss, stock, company, , );
CONSTRAINT stock(NaturalLoss o) AND NOT isCompany(stock(o))
    CHECKED BY stock[NaturalLoss]
        MESSAGE 'Для ведомости естественной убыли выбран склад, которые не принадлежит компании.';

@defineDocumentPosted(naturalLoss);

@defineDocumentHeaderNumber(NaturalLoss);
@defineNumeratedDefault(NaturalLoss, 'Естественные убыли', 'ЕУ');

@defineDocumentDetailSku(naturalLoss, sku);
//@defineDocumentDetailSkuItem(naturalLoss);

//@defineDocumentDetailQuantity(naturalLoss){
//    @defineDocumentDetailQuantityPrefix(naturalLoss, , ){
//    @defineDocumentDetailQuantityCustomPrefix(naturalLossDetail, , ){
//    quantityNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (NaturalLossDetail);
//};
//};
//};
quantity 'Кол-во' = DATA NUMERIC[14,4] (NaturalLossDetail);


@defineDocumentHeaderQuantity(naturalLoss);

@defineAddDetailDialogSkuStock(naturalLoss, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(naturalLoss, sku);

//countryNaturalLoss(naturalLoss) = countryLegalEntity(legalEntityStore(storeDepartmentStore(departmentStoreNaturalLoss(naturalLoss))));
country(NaturalLossDetail naturalLossDetail) = country(naturalLoss(naturalLossDetail));

GROUP fillNaturalLoss 'Автоматическое заполнение' : public;
dateFrom 'Дата с' = DATA DATE (NaturalLoss) IN fillNaturalLoss;
dateTo 'Дата по' = DATA DATE (NaturalLoss) IN fillNaturalLoss;

dateFrom 'Дата с' (NaturalLossDetail naturalLossDetail) = dateFrom(naturalLoss(naturalLossDetail));
dateTo 'Дата по' (NaturalLossDetail naturalLossDetail) = dateTo(naturalLoss(naturalLossDetail));

subNaturalLossGroup = DATA SubNaturalLossGroup (NaturalLossDetail);
nameSubNaturalLossGroup 'Группа естественной убыли' =
    name(subNaturalLossGroup(NaturalLossDetail naturalLossDetail));
code 'Код нормы естественной убыли' =
    code(subNaturalLossGroup(NaturalLossDetail naturalLossDetail));

quantityLoss 'Кол-во' = DATA NUMERIC[14,3] (NaturalLossDetail);
quantityLossNaturalLossDetail 'Кол-во (всего)' (naturalLoss) = GROUP SUM quantityLoss(NaturalLossDetail idetail) 
    BY naturalLoss(idetail) IN documentSum PERSISTENT;
@showDocumentDetailBatch(naturalLoss);
@defineDocumentDetailBatchCustomPrefix(naturalLossDetail, batch, );
quantityLoss(NaturalLossDetail naturalLossDetail) <- shippedQuantity(batch(naturalLossDetail))
    WHEN CHANGED(batch(naturalLossDetail));

@defineDocumentDetailPricePrefix (naturalLoss, , ' учетная ');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (naturalLoss, accountPriceListType, , , sku, stock);

subNaturalDetail = DATA SubNaturalLossGroupDetail(NaturalLossDetail);
nameSubNaturalDetail 'Период' (NaturalLossDetail naturalLossDetail) =
    castInterval(subNaturalDetail(naturalLossDetail));

percent 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (NaturalLossDetail);
percent(NaturalLossDetail naturalLossDetail) <- percent(subNaturalDetail(naturalLossDetail))
    WHEN CHANGED(subNaturalDetail(naturalLossDetail));

castNameSubGroup 'Группа естественной убыли' (NaturalLossDetail naturalLossDetail) =
    nameSubNaturalLossGroup(naturalLossDetail) + ' ' + nameSubNaturalDetail(naturalLossDetail);

CONSTRAINT subNaturalLossGroup(NaturalLossDetail naturalLossDetail) != subNaturalLossGroup(subNaturalDetail(naturalLossDetail))
    CHECKED BY subNaturalDetail[NaturalLossDetail] MESSAGE 'Группа естественной убыли товара должна соответствовать группе периода';

quantity (NaturalLossDetail naturalLossDetail) <- percent(naturalLossDetail) * quantityLoss(naturalLossDetail) /100
    WHEN CHANGED(percent(naturalLossDetail)) OR
         CHANGED(quantityLoss(naturalLossDetail));

quantitySaleDepartment 'Продано' (sku, stock, dateFrom, dateTo, subNaturalLossGroupDetail) =
    GROUP SUM quantity(SaleLedger ledger) IF active(ledger) AND date(ledger) >= DATE dateFrom AND date(ledger) <= DATE dateTo
              AND inInterval(date(ledger), SubNaturalLossGroupDetail subNaturalLossGroupDetail)
              AND subNaturalLossGroup(country(stock(ledger)), sku(ledger)) == subNaturalLossGroup(subNaturalLossGroupDetail)
              BY sku(ledger), stock(ledger), dateFrom, dateTo, subNaturalLossGroupDetail;
              
quantitySaleDepartment 'Продано' (sku, stock, dateFrom, dateTo, subNaturalLossGroupDetail, price) =
    GROUP SUM quantity(SaleLedger ledger) IF active(ledger) AND date(ledger) >= DATE dateFrom AND date(ledger) <= DATE dateTo
              AND inInterval(date(ledger), SubNaturalLossGroupDetail subNaturalLossGroupDetail)
              AND subNaturalLossGroup(country(stock(ledger)), sku(ledger)) == subNaturalLossGroup(subNaturalLossGroupDetail)
              BY sku(ledger), stock(ledger), dateFrom, dateTo, subNaturalLossGroupDetail, price(ledger);              

sum 'Сумма' (naturalLossDetail) = DATA NUMERIC[16,2] (NaturalLossDetail);
sum (NaturalLossDetail naturalLossDetail) <- price(naturalLossDetail) * quantity(naturalLossDetail)
    WHEN CHANGED(price(naturalLossDetail)) OR
         CHANGED(quantity(naturalLossDetail));

sum 'Сумма' (naturalLoss) = GROUP SUM sum(NaturalLossDetail naturalLossDetail)
    BY naturalLoss(naturalLossDetail) IN documentSum;

toSaleFillDetail 'Заполнить на основе продаж' = ACTION (NaturalLoss naturalLoss) {
    IF countNaturalLossDetail(naturalLoss) THEN {
        CONFIRM 'Существующие строки будут удалены.';
        IF confirmed() THEN {
            DELETE NaturalLossDetail d WHERE naturalLoss(d) == naturalLoss;
        } 
    }
    FOR quantitySaleDepartment(  Sku sku,
                                                    stock(naturalLoss),
                                                    dateFrom(naturalLoss),
                                                    dateTo(naturalLoss),
                                                    SubNaturalLossGroupDetail subNaturalLossGroupDetail,
                                                    NUMERIC[14,2] price) > 0 ORDER name(sku), subNaturalLossGroupDetail
          DO {
          FOR ADDOBJ d = NaturalLossDetail DO {
              naturalLoss(d) <- naturalLoss;
              sku(d) <- sku;
              subNaturalLossGroup(d) <- subNaturalLossGroup(country(naturalLoss(d)), sku);
              quantityLoss(d) <- quantitySaleDepartment(
                                                                      sku,
                                                                      stock(naturalLoss),
                                                                      dateFrom(naturalLoss),
                                                                      dateTo(naturalLoss),
                                                                      subNaturalLossGroupDetail,
                                                                      price);
              subNaturalDetail(d) <- subNaturalLossGroupDetail;
              percent(d) <- percent(subNaturalLossGroupDetail);
              quantity (d) <- percent(d) * quantityLoss(d) /100;
              price(d) <- NUMERIC[14,2](price);
              sum (d) <- price(d) * quantity(d);
          }
    }                 
} IN fillNaturalLoss;

//--
skipNatulassLoss = ABSTRACT BOOLEAN (PurchaseLedger);

quantityPurchaseDepartment 'Поступило' (sku, stock, dateFrom, dateTo, subNaturalLossGroupDetail) =
    GROUP SUM quantity(PurchaseLedger ledger) IF active(ledger) AND date(ledger) >= DATE dateFrom AND date(ledger) <= DATE dateTo AND NOT skipNatulassLoss(ledger)
              AND inInterval(date(ledger), SubNaturalLossGroupDetail subNaturalLossGroupDetail)
              AND subNaturalLossGroup(country(stock(ledger)), sku(ledger)) == subNaturalLossGroup(subNaturalLossGroupDetail)
              BY sku(ledger), stock(ledger), dateFrom, dateTo, subNaturalLossGroupDetail;
              
toPurchaseFillDetail 'Заполнить на основе поступлений' = ACTION (NaturalLoss naturalLoss) {

    IF countNaturalLossDetail(naturalLoss) THEN {
        CONFIRM 'Существующие строки будут удалены.';
        IF confirmed() THEN {
            DELETE NaturalLossDetail d WHERE naturalLoss(d) == naturalLoss;
        } 
    }
    
    FOR quantityPurchaseDepartment( Sku sku,
                                              stock(naturalLoss),
                                              dateFrom(naturalLoss),
                                              dateTo(naturalLoss),
                                              SubNaturalLossGroupDetail subNaturalLossGroupDetail) ORDER name(sku), subNaturalLossGroupDetail
        DO {
        FOR ADDOBJ d = NaturalLossDetail DO {
            naturalLoss(d) <- naturalLoss;
            sku(d) <- sku;
            subNaturalLossGroup(d) <- subNaturalLossGroup(country(naturalLoss(d)), sku);
            quantityLoss(d) <- quantityPurchaseDepartment(
                                                                    sku,
                                                                    stock(naturalLoss),
                                                                    dateFrom(naturalLoss),
                                                                    dateTo(naturalLoss),
                                                                    subNaturalLossGroupDetail);
            subNaturalDetail(d) <- subNaturalLossGroupDetail;
            percent(d) <- percent(subNaturalLossGroupDetail);
            quantity (d) <- percent(d) * quantityLoss(d) /100;
            sum (d) <- price(d) * quantity(d);
        }
    }
} IN fillNaturalLoss;

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=NaturalLoss FIXED PANEL
    PROPERTIES(s) isPosted, nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(s), time,
                  date, dateFrom, dateTo, toSaleFillDetail, toPurchaseFillDetail,
                  quantityNaturalLossDetail, sum, note
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                  nameBatch, quantityLoss, nameSubNaturalLossGroup,
                  code, nameSubNaturalDetail, percent, quantity, price,
                  sum, nameStock, ADDOBJ, DELETESESSION

    PROPERTIES(s) TODRAW d addDetailDialogSkuStockNaturalLossDetail,
                           addDetailInputBarcodeNaturalLossDetail, deleteNaturalLossDetail

    FILTERS in(s, d)

    EVENTS
        ON OK prePost(s)

    EDIT NaturalLoss OBJECT s
;

DESIGN naturalLoss {
    main {
        NEW header.box {
            type = CONTAINERH;

            NEW headerCol1 {
                fill = 1;
                type = CONTAINERV;

                MOVE s.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPosted(s));
                    MOVE PROPERTY(nameStock(s));
                    MOVE PROPERTY(nameNumerator(s));
                    MOVE PROPERTY(number(s));
                    MOVE PROPERTY(series(s));
                    MOVE PROPERTY(date(s));
                    MOVE PROPERTY(time(s));
                }

                MOVE s.documentPrm {
                    columns = 2;
                }
                MOVE s.fillNaturalLoss {
                    columns = 4;
                }
            }

            MOVE s.documentSum {
                columns = 1;
            }
        }
        NEW specification.box {
            fill = 1;
            type = TABBED;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }
        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(naturalLoss, accountPriceListType, );
@extendFormDocumentSkuStock(naturalLoss, naturalLoss, s, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(naturalLoss, accountPriceListType, );
@extendFormDocumentBatchStock(naturalLoss, naturalLoss, s, legalEntityStock, );

FORM naturalLosses 'Ведомости естественной убыли'
    OBJECTS s=NaturalLoss
    PROPERTIES(s) READONLY isPosted,number, series, date, time,
                           nameStock, dateFrom, dateTo,
                           quantityNaturalLossDetail, sum, note
    PROPERTIES(s) ADDFORM, EDITFORM, deletes=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(s) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                       postedNameUser, postedTime, postedHostnameComputer
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                           nameBatch, quantityLoss,
                           nameSubNaturalLossGroup, code, nameSubNaturalDetail,
                           percent, quantity, price, sum, nameStock

    FILTERS in(s, d)
;
@extendFormFilterAccessStock(NaturalLoss, s, naturalLosses, stock, company);

DESIGN naturalLosses {
    NEW documentContainer BEFORE functions.box {
        fill = 1;
        type = SPLITV;

        MOVE s.box { fill = 2; }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE d.box {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE s.created;
                MOVE s.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
        }
    }
}

NAVIGATOR {
    stockNavigator {
        NEW naturalLossNavigator 'Естественная убыль' BEFORE balanceSku {
            ADD naturalLosses;
            ADD naturalLossGroups;
        }
    }
}

//------------------- Справочник норм естественной убыли----------------------------//

loadDefaultNaturalLossGroup 'Добавить нормы естественной убыли' = ACTION (STRING[3] idCountry, VARISTRING[110] string)  {
    FOR ADDOBJ cg = NaturalLossGroup DO {
         name(cg) <- string;
         country(cg) <- country(idCountry);
    }
}

loadDefaultSubNaturalLossGroup 'Добавить нормы естественной убыли' = ACTION (STRING[3] idCountry, VARISTRING[110] string, VARISTRING[110] stringOne, STRING[3] stringTwo, NUMERIC[10,5] numeric)  {
    FOR ADDOBJ g = SubNaturalLossGroup DO {
        parent(g) <- naturalLossGroup(string);
        name(g) <-  stringOne;
        country(g) <- country(idCountry);
        code(g) <- stringTwo;

        FOR ADDOBJ d = SubNaturalLossGroupDetail  DO {
            subNaturalLossGroup(d) <- g;
            percent(d) <- numeric;
            dayFrom(d) <- 1;
            monthFrom(d) <- Month.january;
            dayTo(d) <- 31;
            monthTo(d) <- Month.december;
        }
    }
}

//-- Для сезонов
overLoadDefaultSubNaturalLossGroup 'Добавить нормы естественной убыли' = ACTION (STRING[3] idCountry, VARISTRING[110] string, VARISTRING[110] stringOne, STRING[3] stringTwo)  {
    FOR ADDOBJ g = SubNaturalLossGroup DO {
        parent(g) <- naturalLossGroup(string);
        name(g) <-  stringOne;
        country(g) <- country(idCountry);
        code(g) <- stringTwo;
    }
}

overLoadDefaultSubNaturalLossGroupDetail 'Добавить нормы естественной убыли' = ACTION (STRING[3] id, NUMERIC[10,5] numeric, INTEGER dayFrom, INTEGER monthFrom, INTEGER dayTo, INTEGER monthTo)  {
    FOR ADDOBJ d = SubNaturalLossGroupDetail  DO {
        subNaturalLossGroup(d) <- subNaturalLossGroupId(id);
        percent(d) <- numeric;
        dayFrom(d) <- dayFrom;
        monthFrom(d) <-month(monthFrom);
        dayTo(d) <- dayTo;
        monthTo(d) <- month(monthTo);
    }
}

loadDefaultNaturalLossGroups 'Загрузить стандартные группы естественной убыли' = ABSTRACT ACTION LIST () IN loadDefault;

@implementLoadDefaultData(loadDefaultNaturalLossGroups);