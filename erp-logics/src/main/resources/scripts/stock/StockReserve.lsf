MODULE StockReserve;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Document,
        Currency,
        SaleLedger,
        Barcode,
        PriceListType,
        Dashboard;

TABLE StockSkuDate(Stock, Sku, DATE);

@defineHistorizable(stockReserve, 'Страховой запас (кол-во)', NUMERIC[14,3], stock, nameStock, sku, nameSku, base);
dataStockReserveDays 'Страховой запас (дн.)' = DATA NUMERIC[14,3] (Stock, SkuGroup);
dataStockReserveDays 'Страховой запас (дн.)' = DATA NUMERIC[14,3] (Stock, Sku) TABLE extraSkuStock;

levelParent (stock, skuGroup) = GROUP MIN level(SkuGroup skuGroup, SkuGroup parent) IF dataStockReserveDays(Stock stock, parent)
                                                               BY stock, skuGroup MATERIALIZED;
nearestParent (Stock stock, SkuGroup skuGroup) = skuGroup(skuGroup, levelParent(stock, skuGroup));
nearestStockReserveDays (Stock stock, SkuGroup skuGroup) =
    dataStockReserveDays(stock, nearestParent(stock, skuGroup));

stockReserveDays 'Страховой запас (дн.)' (Stock stock, SkuGroup skuGroup) = OVERRIDE
    dataStockReserveDays(stock, skuGroup),
    nearestStockReserveDays (stock, skuGroup);

stockReserveDays 'Страховой запас (дн.)' (Stock stock, Sku sku) = OVERRIDE
    dataStockReserveDays(stock, sku),
    nearestStockReserveDays(stock, skuGroup(sku));

fillReserveFromTo 'Проставить кол-во исходя из продаж в день и запаса(дн.) '(Stock stock, DATE date, DATE dFrom, DATE dTo) = {
    FOR stockReserveDays(stock, Sku sku) AND averageSold(sku,stock,dFrom,dTo) DO {
        dataStockReserve(stock, sku, date) <- averageSold(sku,stock,dFrom,dTo)*stockReserveDays(stock,sku);
    }
} TOOLBAR CONFIRM;

// Вид цены
filterPriceListTypeStock = DATA LOCAL PriceListType ();
nameFilterPriceListTypeStock 'Вид цены' () = name(filterPriceListTypeStock());

defaultStockReservePriceListType = DATA PriceListType();
nameDefaultStockReservePriceListType 'Вид цены для страховых запасов' = name(defaultStockReservePriceListType());
EXTEND FORM options
    PROPERTIES() nameDefaultStockReservePriceListType
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(nameDefaultStockReservePriceListType());
    }
}
setDefaultPriceListType() = { filterPriceListTypeStock() <- defaultStockReservePriceListType(); }

filterPriceListType (Sku sku, Stock stock, DATE date, TIME time) =
    prevPriceB (filterPriceListTypeStock(), sku, stock, dateTimeToDateTime(date, time)) OR
    (sku IS Sku AND stock IS Stock AND date IS DATE AND time IS TIME AND NOT filterPriceListTypeStock());

FORM stockReserve 'Страховые запасы'
    OBJECTS dt = DATE PANEL
    PROPERTIES valDt = VALUE(dt) BACKGROUND dateDiffersCurrent(dt)
    OBJECTS t = TIME PANEL
    PROPERTIES valT = VALUE(t)

    OBJECTS st = Stock PANEL
    PROPERTIES SELECTOR nameSt = name(st)
    FILTERS isCompany(st)

    PROPERTIES()  nameFilterPriceListTypeStock

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)

    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES order(sk) READONLY, skuTreeName = name(sk) READONLY, stockReserveDays(st,sk)
    ORDER order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES READONLY name(s), idBarcode(s), shortNameUOM(s)
    PROPERTIES overStockReserve(st,s,dt), stockReserveDays(st,s), quantitySold(s,st,dFrom,dTo) READONLY, averageSold(s,st,dFrom,dTo) READONLY
    PROPERTIES fillReserveFromTo(st,dt,dFrom,dTo) TODRAW s
    ORDER          name(s)
    FILTERS           isParent(sk, s),
                      filterPriceListType(s,st,dt,t)

    FILTERGROUP soldFilter
        FILTER 'Только с реализацией' quantitySold(s,st,dFrom,dTo) 'F10'
    
    EVENTS ON INIT 
        setDefaultPriceListType();
;

@extendFormFilterStockAccess(st, stockReserve);

DESIGN stockReserve {
    BOX {
        NEW row1 {
            type = CONTAINERH;
            MOVE BOX(st);
            MOVE BOX(dt);
            MOVE BOX(t);
            MOVE BOX(dates) { caption = 'Интервал для реализации'; }
            NEW filterContainer {
                caption = ' Фильтр';
                MOVE PROPERTY(nameFilterPriceListTypeStock());
            }
        }
        NEW row2  {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE skuTree) { caption = 'Товарные группы'; }
            MOVE BOX(s) { fill = 3; };
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    stockDashboardNavigator {
        ADD stockReserve;
    }
}
