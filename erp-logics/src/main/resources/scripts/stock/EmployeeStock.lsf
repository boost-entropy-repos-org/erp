MODULE EmployeeStock;

REQUIRE Stock, EmployeeLegalEntity;

TABLE stockEmployee (Stock, Employee);
inStockEmployee 'Сотрудник подразделения' = DATA BOOLEAN (Stock, Employee);

TABLE stockGroupEmployee(StockGroup, Employee);

//--  Компания
dataAccessCompanyEmployee 'Доступ разрешен (компания)' = DATA BOOLEAN (Employee);
dataAccessCompanyStockEmployee 'Доступ разрешен (компания)' = DATA BOOLEAN (Stock, Employee);
dataAccessCompanyStockGroupEmployee 'Доступ разрешен (компания)' = DATA BOOLEAN (StockGroup, Employee);

levelParentCompanyEmployeeStockGroup (employee, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataAccessCompanyStockGroupEmployee(parent, employee)
                                                               BY employee, stockGroup PERSISTENT;
nearestParentCompanyEmployeeStockGroup (employee, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentCompanyEmployeeStockGroup(employee, stockGroup));
nearestInCompanyEmployeeStockGroup (employee, stockGroup) =
    dataAccessCompanyStockGroupEmployee(nearestParentCompanyEmployeeStockGroup (employee, stockGroup), employee) PERSISTENT;

accessCompanyEmployeeStockGroup 'Доступ разрешен (компания)' (employee, stockGroup) = OVERRIDE
    employee IS Employee  AND stockGroup IS StockGroup AND NOT limitAccessEmployee(employee),
    dataAccessCompanyEmployee(employee) AND stockGroup IS StockGroup,
    nearestInCompanyEmployeeStockGroup(employee, stockGroup),
    dataAccessCompanyStockGroupEmployee(stockGroup, employee); // PERSISTENT;

accessCompanyEmployeeStock 'Доступ разрешен (компания)' (employee, stock) = OVERRIDE
    employee IS Employee AND isCompanyStock(stock) AND NOT limitAccessEmployee(employee),
    dataAccessCompanyEmployee(employee) AND isCompanyStock(stock),
    nearestInCompanyEmployeeStockGroup(employee, stockGroupStock(stock)),
    dataAccessCompanyStockEmployee(stock, employee) PERSISTENT;
countAccessCompanyStockEmployee 'Кол-во доступных подразделений (компания)' (employee) =
    GROUP SUM 1 IF accessCompanyEmployeeStock(employee, stock) AND activeStock(stock)
          BY employee;
defaultCompanyStockEmployee  (employee) =
    GROUP MIN  stock IF accessCompanyEmployeeStock(employee, stock) AND activeStock(stock)
          BY employee;
META defineDocumentStockAccess(objectClass, prefix, filter)
    prefix###objectClass(o) <- default###filter###stock##Employee(currentUser()) IF countAccess###filter###stock##Employee (currentUser()) == 1
                                           WHEN SET(o IS objectClass);
END     
                          
accessCompanyStock 'Доступ разрешен (компания)' (s) = accessCompanyEmployeeStock(currentUser(), s) OR (s IS Stock AND NOT limitAccessEmployee(currentUser()));

countAccessCompanyEmployeeStockGroup 'Кол-во доступных подразделений (компания)' (employee, stockGroup) =
    GROUP SUM 1 IF accessCompanyEmployeeStock(employee, stock)
                AND isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup)
          BY employee, stockGroup PERSISTENT;
          
dataStockEmployee = DATA Stock (Employee);
stockEmployee (e) = OVERRIDE defaultCompanyStockEmployee(e) IF countAccessCompanyStockEmployee (e) == 1, dataStockEmployee(e);
idStockEmployee 'Основной склад' (e) = idStock(stockEmployee(e));
nameStockEmployee 'Основной склад' (e) = nameStock(stockEmployee(e));

CONSTRAINT s == dataStockEmployee(e) AND NOT accessCompanyEmployeeStock(e, s) CHECKED BY dataStockEmployee MESSAGE 'Не разрешен доступ к складу выбранному в качестве основного';

EXTEND FORM employees PROPERTIES(e) READONLY nameStockEmployee;

//-- Поставщик
dataAccessSupplierEmployee 'Доступ разрешен (поставщик)' = DATA BOOLEAN (Employee);
dataAccessSupplierStockEmployee 'Доступ разрешен (поставщик)' = DATA BOOLEAN (Stock, Employee);
dataAccessSupplierStockGroupEmployee 'Доступ разрешен (поставщик)' = DATA BOOLEAN (StockGroup, Employee);
levelParentSupplierEmployeeStockGroup (employee, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataAccessSupplierStockGroupEmployee(parent, employee)
                                                               BY employee, stockGroup PERSISTENT;
nearestParentSupplierEmployeeStockGroup (employee, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentSupplierEmployeeStockGroup(employee, stockGroup));
nearestInSupplierEmployeeStockGroup (employee, stockGroup) =
    dataAccessSupplierStockGroupEmployee(nearestParentSupplierEmployeeStockGroup (employee, stockGroup), employee) PERSISTENT;

accessSupplierEmployeeStockGroup 'Доступ разрешен (поставщик)' (employee, stockGroup) = OVERRIDE
    employee IS Employee AND stockGroup IS StockGroup AND NOT limitAccessEmployee(employee),
    dataAccessSupplierEmployee(employee) AND stockGroup IS StockGroup,
    nearestInSupplierEmployeeStockGroup(employee, stockGroup),
    dataAccessSupplierStockGroupEmployee(stockGroup, employee); // PERSISTENT;

accessSupplierEmployeeStock 'Доступ разрешен (поставщик)' (employee, stock) = OVERRIDE
    employee IS Employee AND stock IS Stock AND NOT limitAccessEmployee(employee),
    dataAccessSupplierEmployee(employee) AND stock IS Stock,
    nearestInSupplierEmployeeStockGroup(employee, stockGroupStock(stock)),
    dataAccessSupplierStockEmployee(stock, employee); // PERSISTENT;

countAccessSupplierEmployeeStockGroup 'Кол-во доступных подразделений (поставщик)' (employee, stockGroup) =
    GROUP SUM 1 IF accessSupplierEmployeeStock(employee, stock)
                AND isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup)
          BY employee, stockGroup PERSISTENT;
//--  Покупатель
dataAccessCustomerEmployee 'Доступ разрешен (покупатель)' = DATA BOOLEAN (Employee);
dataAccessCustomerStockEmployee 'Доступ разрешен (покупатель)' = DATA BOOLEAN (Stock, Employee);
dataAccessCustomerStockGroupEmployee 'Доступ разрешен (покупатель)' = DATA BOOLEAN (StockGroup, Employee);

overCopyEmployee(e,employee) += ACTION {
    dataAccessCompanyEmployee(e) <- dataAccessCompanyEmployee(employee); 
    dataAccessSupplierEmployee(e) <- dataAccessSupplierEmployee(employee); 
    dataAccessCustomerEmployee(e) <- dataAccessCustomerEmployee(employee); 
    dataStockEmployee(e) <- dataStockEmployee(employee); 
               
    inStockEmployee(l,e) <- inStockEmployee(l,employee) WHERE inStockEmployee(l,employee);       
       
    dataAccessCompanyStockEmployee(l,e) <- dataAccessCompanyStockEmployee(l,employee) WHERE dataAccessCompanyStockEmployee(l,employee);
    dataAccessCompanyStockGroupEmployee(lg,e) <- dataAccessCompanyStockGroupEmployee(lg,employee) WHERE dataAccessCompanyStockGroupEmployee(lg,employee);
    
    dataAccessSupplierStockEmployee(l,e) <- dataAccessSupplierStockEmployee(l,employee) WHERE dataAccessSupplierStockEmployee(l,employee);
    dataAccessSupplierStockGroupEmployee(lg,e) <- dataAccessSupplierStockGroupEmployee(lg,employee) WHERE dataAccessSupplierStockGroupEmployee(lg,employee);
    
    dataAccessCustomerStockEmployee(l,e) <- dataAccessCustomerStockEmployee(l,employee) WHERE dataAccessCustomerStockEmployee(l,employee);
    dataAccessCustomerStockGroupEmployee(lg,e) <- dataAccessCustomerStockGroupEmployee(lg,employee) WHERE dataAccessCustomerStockGroupEmployee(lg,employee);    
};

levelParentCustomerEmployeeStockGroup (employee, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataAccessCustomerStockGroupEmployee(parent, employee)
                                                               BY employee, stockGroup PERSISTENT;
nearestParentCustomerEmployeeStockGroup (employee, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentCustomerEmployeeStockGroup(employee, stockGroup));
nearestInCustomerEmployeeStockGroup (employee, stockGroup) =
    dataAccessCustomerStockGroupEmployee(nearestParentCustomerEmployeeStockGroup (employee, stockGroup), employee) PERSISTENT;

accessCustomerEmployeeStockGroup 'Доступ разрешен (покупатель)' (employee, stockGroup) = OVERRIDE
    employee IS Employee AND stockGroup IS StockGroup AND NOT limitAccessEmployee(employee),
    dataAccessCustomerEmployee(employee) AND stockGroup IS StockGroup,
    nearestInCustomerEmployeeStockGroup(employee, stockGroup),
    dataAccessCustomerStockGroupEmployee(stockGroup, employee); 

accessCustomerEmployeeStock 'Доступ разрешен (покупатель)' (employee, stock) = OVERRIDE
    employee IS Employee AND stock IS Stock AND NOT limitAccessEmployee(employee),
    dataAccessCustomerEmployee(employee) AND stock IS Stock,
    nearestInCustomerEmployeeStockGroup(employee, stockGroupStock(stock)),
    dataAccessCustomerStockEmployee(stock, employee); 

countAccessCustomerEmployeeStockGroup 'Кол-во доступных подразделений (покупатель)' (employee, stockGroup) =
    GROUP SUM 1 IF accessCustomerEmployeeStock(employee, stock)
                AND isParentStockGroupStockGroup(stockGroupStock(stock), stockGroup)
          BY employee, stockGroup PERSISTENT;

EXTEND FORM employee

    PROPERTIES nameStockEmployee(e)

    TREE stockTree a = STRING[3], sg = StockGroup  PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = nameStockGroup(sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(e)  TODRAW a dataAccessSupplierEmployee, dataAccessCompanyEmployee, dataAccessCustomerEmployee
    PROPERTIES(e,sg)  accessSupplierEmployeeStockGroup, accessCompanyEmployeeStockGroup, accessCustomerEmployeeStockGroup

    OBJECTS s = Stock FIXED GRID
    PROPERTIES(s) READONLY idStock 
    PROPERTIES(s) READONLY stockName = nameStock, nameLegalEntityStock
    PROPERTIES(s,e) inStockEmployee 
    ORDER BY stockName
    FILTERS isParentStockGroupStock(sg, s) OR (s IS Stock AND NOT sg)
    FILTERGROUP inactiveStock FILTER 'Активный' activeStock(s) 'ctrl F10' DEFAULT
    PROPERTIES(e,s) accessSupplierEmployeeStock, accessCompanyEmployeeStock, accessCustomerEmployeeStock
;

DESIGN employee {
    pane {
        NEW stockContainer {
            caption = 'Склады';
            MOVE PROPERTY(nameStockEmployee(e));
            NEW stockSplitContainer{
                fill = 1;
                type = SPLITH;
                MOVE stockTree.tree.box { 
                    caption = 'Группы складов';
                    PROPERTY (accessSupplierEmployeeStockGroup(e,sg)) {minimumWidth = 100; }
                    PROPERTY (accessCompanyEmployeeStockGroup(e,sg)) {minimumWidth = 100; }
                    PROPERTY (accessCustomerEmployeeStockGroup(e,sg)) {minimumWidth = 100; }
                    
                };
                MOVE s.box {
                    s.grid {
                        defaultComponent = TRUE;
                        PROPERTY (inStockEmployee(s,e)) {minimumWidth = 90;  preferredWidth = 90;}
                        PROPERTY (accessSupplierEmployeeStock(e,s)) {minimumWidth = 100;  preferredWidth = 100;}
                        PROPERTY (accessCompanyEmployeeStock(e,s)) {minimumWidth = 100;  preferredWidth = 100;}
                        PROPERTY (accessCustomerEmployeeStock(e,s)) {minimumWidth = 100;  preferredWidth = 100;}                   
                    }
                }
            }
        }
    }
}

// ----------------------------------- Комиссии ---------------------------------------------------------- //

META defineCommitteeEmployee (committee, prefix, caption)
    prefix##Committee = DATA Employee (###committee);
    name###prefix##Committee caption (committee) = nameContact(prefix##Committee(committee)) IN recognize;
    shortName###prefix##Committee caption (committee) = shortNameContact(prefix##Committee(committee)) IN recognize;
    namePosition###prefix##Committee caption (committee) = namePositionEmployee(prefix##Committee(committee));
    positionName###prefix###committee caption (committee) = positionNameEmployee(prefix###committee(committee));  
    positionShortName###prefix###committee caption (committee) = positionShortNameEmployee(prefix###committee(committee));              
    CONSTRAINT prefix##Committee(committee) AND NOT countStockEmployeeCommittee(prefix##Committee(committee), committee)
        CHECKED BY prefix##Committee MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

META defineCommitteeEmployeePrefix (committee, prefix, caption)
    prefix###committee = DATA Employee (###committee);
    name###prefix###committee caption (committee) = nameContact(prefix###committee(committee)) IN recognize;
    shortName###prefix###committee caption (committee) = shortNameContact(prefix###committee(committee)) IN recognize;
    namePosition###prefix###committee caption (committee) = namePositionEmployee(prefix###committee(committee));
    positionName###prefix###committee caption (committee) = positionNameEmployee(prefix###committee(committee));   
    positionShortName###prefix###committee caption (committee) = positionShortNameEmployee(prefix###committee(committee));             
    CONSTRAINT prefix###committee(committee) AND NOT countStockEmployeeCommittee(prefix###committee(committee), committee)
        CHECKED BY prefix###committee MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

CLASS ABSTRACT Committee 'Комиссия';
TABLE committee (Committee);

nameCommittee 'Наименование' = ABSTRACT VARISTRING[150](Committee);

TABLE committeeEmployee (Committee, Employee);
inCommitteeEmployee 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (Committee, Employee);

numberCommitteeEmployee 'Порядковый номер члены комиссии' = DATA INTEGER (Committee, Employee);
employeeCommitteeNumber (committee, number) = 
    GROUP AGGR employee BY committee, numberCommitteeEmployee(committee, employee);  

TABLE committeeStock (Committee, Stock);
inCommitteeStock 'Вкл.' = DATA BOOLEAN (Committee, Stock);

countStockEmployeeCommittee  (employee, committee) = GROUP SUM 1 IF inCommitteeStock(committee, stock) AND inStockEmployee(stock, employee) BY employee, committee;
CONSTRAINT inCommitteeEmployee(committee, employee) AND NOT countStockEmployeeCommittee(employee, committee)
    CHECKED MESSAGE 'Член комиссии не входит в выбранные подразделения';

@defineCommitteeEmployee(committee, chairman, 'Председатель');

namePositionEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT positionNameEmployee(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;

shortNamePositionEmployeeCommittee 'Члены комиссии' (committee) =
    GROUP CONCAT positionShortNameEmployee(employee) IF inCommitteeEmployee(committee, employee), ', '
    BY committee
    ORDER employee
    MINCHARWIDTH 50 PREFCHARWIDTH 50;

nameEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT nameContact(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;
     
shortNameEmployeeCommittee 'Члены комиссии' (committee) =
     GROUP CONCAT shortNameContact(employee) IF inCommitteeEmployee(committee, employee), ', '
     BY committee
     ORDER employee
     MINCHARWIDTH 50 PREFCHARWIDTH 50;     

nameStocksCommittee 'Подразделения' (committee) =
     GROUP CONCAT nameStock(stock) IF inCommitteeStock(committee, stock), ', '
     BY committee
     ORDER stock
     MINCHARWIDTH 50 PREFCHARWIDTH 50;

// ---------------------------------- Доступ к складам --------------------------------------------------- //

countAccessSupplierStockEmployeeLegalEntity (employee, legalEntity) = GROUP SUM 1 
    IF inLegalEntityStock(legalEntity, stock) AND activeStock(stock) AND accessSupplierEmployeeStock(employee, stock)
        BY employee, legalEntity;

defaultSupplierStockEmployeeLegalEntity 'Склад по умолчанию (поставщик)' (employee, legalEntity)= GROUP MIN stock 
    IF inLegalEntityStock(legalEntity, stock) AND activeStock(stock) AND accessSupplierEmployeeStock(employee, stock)
        BY employee, legalEntity;

countAccessCompanyStockEmployeeLegalEntity (employee, legalEntity) = GROUP SUM 1 
    IF inLegalEntityStock(legalEntity, stock) AND activeStock(stock) AND accessCompanyEmployeeStock(employee, stock)
        BY employee, legalEntity;

dataDefaultCompanyStockLegalEntity = GROUP AGGR stock BY legalEntityStock(stock) IF dataDefaultCompanyStock(stock);
 
minDefaultCompanyStockEmployeeLegalEntity 'Склад по умолчанию (компания)' (employee, legalEntity)= GROUP MIN stock 
    IF inLegalEntityStock(legalEntity, stock) AND activeStock(stock) AND accessCompanyEmployeeStock(employee, stock)
        BY employee, legalEntity;
                                                                                    
defaultCompanyStockEmployeeLegalEntity 'Склад по умолчанию (компания)'(employee, legalEntity) = 
    OVERRIDE minDefaultCompanyStockEmployeeLegalEntity(employee, legalEntity), 
    dataDefaultCompanyStockLegalEntity(legalEntity);                                                                                  

countAccessCustomerStockEmployeeLegalEntity (employee, legalEntity) = GROUP SUM 1 
    IF inLegalEntityStock(legalEntity, stock) AND activeStock(stock) AND accessCustomerEmployeeStock(employee, stock)
        BY employee, legalEntity;

defaultCustomerStockEmployeeLegalEntity 'Склад по умолчанию (покупатель)' (employee, legalEntity)= GROUP MIN stock 
    IF inLegalEntityStock(legalEntity, stock) AND activeStock(stock) AND accessCustomerEmployeeStock(employee, stock)
        BY employee, legalEntity;

// Для документа, у которого задан склад
META extendFormFilterAccessStock(object, concrete, form, stockProp, filter)
    EXTEND FORM form FILTERS access###filter##EmployeeStock(currentUser(),stockProp###object(concrete)) OR NOT stockProp###object(concrete);
END
// Когда склад идет объектом
META extendFormFilterStockAccess(concrete, form, filter)
    EXTEND FORM form FILTERS access###filter##EmployeeStock(currentUser(), concrete);
END
META extendFormFilterStockAccess(concrete, form) // по умолчанию для компании
    @extendFormFilterStockAccess(concrete, form, company);
END
// Для группы складов
META extendFormFilterStockGroupAccess(concrete, form, filter)
    EXTEND FORM form FILTERS countAccess###filter##EmployeeStockGroup(currentUser(), concrete);
END
META extendFormFilterStockGroupAccess(concrete, form) // по умолчанию для компании
    @extendFormFilterStockGroupAccess(concrete, form, company);
END

// ----------------------------- Автоматическое проставление организаций и складов --------------------------------------- //

META defineDocumentLegalEntityStockAccess(objectClass, prefix, filter, form)
    @defineDocumentLegalEntityAccess(objectClass, prefix, filter);

    WHEN SESSION FORMS form CHANGED(prefix###objectClass(o)) DO {
        IF countAccess###filter##StockEmployeeLegalEntity (currentUser(), prefix###objectClass(o)) == 1 THEN
            prefix###stock###objectClass(o) <- default###filter##StockEmployeeLegalEntity(currentUser(), prefix###objectClass(o));
        IF NOT inLegalEntityStock(prefix###objectClass(o), prefix###stock###objectClass(o)) THEN 
            prefix###stock###objectClass(o) <- NULL;
    }
END

META defineDocumentSupplierCustomerStockAccess (objectClass, supplierFilter, customerFilter, form)
    @defineDocumentLegalEntityStockAccess(objectClass, supplier, supplierFilter, form);
    @defineDocumentLegalEntityStockAccess(objectClass, customer, customerFilter, form);
END

// ----------------------------------------- Фильтруем формы, которые объявлены в Stock ----------------------- //
// Нельзя делать в Stock, поскольку иначе будет цикличная связь по модулям

@extendFormFilterStockGroupAccess(sg, companyStocks, company);
@extendFormFilterStockAccess(s, companyStocks, company);

@extendFormFilterStockGroupAccess(sg, supplierStocks, supplier);
@extendFormFilterStockAccess(s, supplierStocks, supplier);

@extendFormFilterStockGroupAccess(sg, customerStocks, customer);
@extendFormFilterStockAccess(s, customerStocks, customer);


@extendFormFilterStockGroupAccess(sg, companysStock, company);
@extendFormFilterStockAccess(s, companysStock, company);

@extendFormFilterStockGroupAccess(sg, suppliersStock, supplier);
@extendFormFilterStockAccess(s, suppliersStock, supplier);

@extendFormFilterStockGroupAccess(sg, customersStock, customer);
@extendFormFilterStockAccess(s, customersStock, customer);
