MODULE StockSnapshot;

REQUIRE SkuLedger, Document, PriceListLedger;

NAMESPACE Stock;

//////////////////////Отчет ////////////////////////////

CLASS Snapshot 'Отчет';
TABLE snapshot (Snapshot);

hintBalanceBBackground 'Лавандовый' = RGB(255,238,238) IF TRUE;     
hintPurchaseBackground 'Розовато-лавандовый'  = RGB(224, 224, 255) IF TRUE;         
hintSaleBackground 'Зеленого чая'  = RGB(204,255,204) IF TRUE;  
hintBalanceABackground 'Небесный'  = RGB(127,199,255) IF TRUE;                                                                                     
hintInBackground 'Лимонный' = RGB(255, 250, 205) IF TRUE;                                                                                   
hintOutBackground 'Бороды Абдель-Керима' = RGB(213, 213, 213) IF TRUE;     // серый


@defineDocumentHeaderTime(Snapshot);
@defineDocumentHeaderNote(Snapshot);
@defineDocumentHeaderCreated(Snapshot);
@deriveDocumentHeaderTimePrefix(Snapshot, );
@defineDocumentHeaderNumber(Snapshot);
@defineNumeratedDefault(Snapshot, 'Отчет', 'ОО');
@defineDocumentHeaderDescription (Snapshot, 'Отчет');

fromDateSnapshot 'Дата с' = DATA DATE (Snapshot) IN documentHeader;
toDateSnapshot 'Дата по' = DATA DATE (Snapshot) IN documentHeader;

WHEN SESSION SET(o IS Snapshot) DO {
    IF o IS Snapshot AND NOT fromDateSnapshot(o) THEN fromDateSnapshot(o) <- currentDate();
    IF o IS Snapshot AND NOT toDateSnapshot(o) THEN toDateSnapshot(o) <- currentDate();
};

isBatchSnapshot 'По партиям' = DATA BOOLEAN (Snapshot) IN documentHeader;
isSkuSnapshot 'По товарам' (s) = s IS Snapshot AND NOT isBatchSnapshot(s) IN documentHeader;

//------------------------------ Sku -------------------------------//

TABLE skuStockSnapshot (Sku, Stock, Snapshot);  
balanceBSkuStockSnapshot 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumBSkuStockSnapshot 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

inQuantitySkuStockSnapshot 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
inSumSkuStockSnapshot 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

outQuantitySkuStockSnapshot 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
outSumSkuStockSnapshot 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

balanceASkuStockSnapshot 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumASkuStockSnapshot 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

//--По группе рекурсивно
TABLE skuGroupStockSnapshot (SkuGroup, Stock, Snapshot);   
  
//-- группа/склад       
balanceBSkuGroupStockSnapshot 'Кол-во начало' (group, stock, snapshot) =
    GROUP SUM balanceBSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
sumBSkuGroupStockSnapshot 'Сумма начало' (group, stock, snapshot) =
    GROUP SUM sumBSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;        
    
inQuantitySkuGroupStockSnapshot 'Кол-во приход' (group, stock, snapshot) =
    GROUP SUM inQuantitySkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
inSumSkuGroupStockSnapshot 'Сумма приход' (group, stock, snapshot) =
    GROUP SUM inSumSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;  
           
outQuantitySkuGroupStockSnapshot 'Кол-во расход' (group, stock, snapshot) =
    GROUP SUM outQuantitySkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
outSumSkuGroupStockSnapshot 'Сумма расход' (group, stock, snapshot) =
    GROUP SUM outSumSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;             
    
balanceASkuGroupStockSnapshot 'Кол-во конец' (group, stock, snapshot) =
    GROUP SUM balanceASkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
sumASkuGroupStockSnapshot 'Сумма конец' (group, stock, snapshot) =
    GROUP SUM sumASkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;  
//-- группа          
balanceBSkuGroupSnapshot 'Кол-во начало' (group, snapshot) =
    GROUP SUM balanceBSkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
sumBSkuGroupSnapshot 'Сумма начало' (group, snapshot) =
    GROUP SUM sumBSkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;        
    
inQuantitySkuGroupSnapshot 'Кол-во приход' (group, snapshot) =
    GROUP SUM inQuantitySkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
inSumSkuGroupSnapshot 'Сумма приход' (group, snapshot) =
    GROUP SUM inSumSkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;      
 
outQuantitySkuGroupSnapshot 'Кол-во расход' (group, snapshot) =
    GROUP SUM outQuantitySkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
outSumSkuGroupSnapshot 'Сумма расход' (group, snapshot) =
    GROUP SUM outSumSkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;      
    
balanceASkuGroupSnapshot 'Кол-во конец' (group, snapshot) =
    GROUP SUM balanceASkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
sumASkuGroupSnapshot 'Сумма конец' (group, snapshot) =
    GROUP SUM sumASkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;            

//--По складам
balanceBStockSnapshot 'Кол-во начало' (stock, snapshot) =
    GROUP SUM balanceBSkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
sumBStockSnapshot 'Сумма начало' (stock, snapshot) =
    GROUP SUM sumBSkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;        
    
inQuantityStockSnapshot 'Кол-во приход' (stock, snapshot) =
    GROUP SUM inQuantitySkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
inSumStockSnapshot 'Сумма приход' (stock, snapshot) =
    GROUP SUM inSumSkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;      
 
outQuantityStockSnapshot 'Кол-во расход' (stock, snapshot) =
    GROUP SUM outQuantitySkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
outSumStockSnapshot 'Сумма расход' (stock, snapshot) =
    GROUP SUM outSumSkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;      
    
balanceAStockSnapshot 'Кол-во конец' (stock, snapshot) =
    GROUP SUM balanceASkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
sumAStockSnapshot 'Сумма конец' (stock, snapshot) =
    GROUP SUM sumASkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;   
        
//------------------------------ Batch -------------------------------//

TABLE batchStockSnapshot (Batch, Stock, Snapshot);  
balanceBBatchStockSnapshot 'Кол-во начало' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumBBatchStockSnapshot 'Сумма начало' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

inQuantityBatchStockSnapshot 'Кол-во приход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
inSumBatchStockSnapshot 'Сумма приход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

outQuantityBatchStockSnapshot 'Кол-во расход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
outSumBatchStockSnapshot 'Сумма расход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

balanceABatchStockSnapshot 'Кол-во конец' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumABatchStockSnapshot 'Сумма конец' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

skuGroup1Batch 'Категория' (batch) = skuGroup1Sku(skuBatch(batch));
nameSkuGroup1Batch 'Категория' (batch) = nameSkuGroup(skuGroup1Batch(batch));
 
skuGroup2Batch 'Направление' (batch) = skuGroup2Sku(skuBatch(batch));
nameSkuGroup2Batch 'Направление' (batch) = nameSkuGroup(skuGroup2Batch(batch));

skuGroup3Batch 'Группа' (batch) = skuGroup3Sku(skuBatch(batch));
nameSkuGroup3Batch 'Группа' (batch) = nameSkuGroup(skuGroup3Batch(batch));

skuGroup4Batch 'Подгруппа' (batch) = skuGroup4Sku(skuBatch(batch));
nameSkuGroup4Batch 'Подгруппа' (batch) = nameSkuGroup(skuGroup4Batch(batch));

skuGroup5Batch 'Субгруппа' (batch) = skuGroup5Sku(skuBatch(batch));
nameSkuGroup5Batch 'Субгруппа' (batch) = nameSkuGroup(skuGroup5Batch(batch));

//-- По поставщикам
balanceBBatchSupplierSnapshot 'Кол-во начало' (supplier, snapshot) =
    GROUP SUM balanceBBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
sumBBatchSupplierSnapshot 'Сумма начало' (supplier, snapshot) =
    GROUP SUM sumBBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot; 
    
inQuantityBatchSupplierSnapshot 'Кол-во приход' (supplier, snapshot) =
    GROUP SUM inQuantityBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
inSumBatchSupplierSnapshot 'Сумма приход' (supplier, snapshot) =
    GROUP SUM inSumBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;     
 
outQuantityBatchSupplierSnapshot 'Кол-во расход' (supplier, snapshot) =
    GROUP SUM outQuantityBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
outSumBatchSupplierSnapshot 'Сумма расход' (supplier, snapshot) =
    GROUP SUM outSumBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;     
    
balanceABatchSupplierSnapshot 'Кол-во конец' (supplier, snapshot) =
    GROUP SUM balanceABatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
sumABatchSupplierSnapshot 'Сумма конец' (supplier, snapshot) =
    GROUP SUM sumABatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;     
    
//-- Выбор складов
TABLE snapshotStockGroup (Snapshot, StockGroup); 
allStockIncludeSnapshot 'Вкл' = DATA BOOLEAN (Snapshot);
dataIncludeSnapshotStockGroup 'Вкл' = DATA BOOLEAN (Snapshot, StockGroup);
dataIncludeSnapshotStock 'Вкл' = DATA BOOLEAN (Snapshot, Stock);

levelParentIncludeSnapshotStockGroup (snapshot, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataIncludeSnapshotStockGroup(snapshot, parent)
                                                              BY snapshot, stockGroup PERSISTENT;    
nearestParentIncludeSnapshotStockGroup (snapshot, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentIncludeSnapshotStockGroup(snapshot, stockGroup));
nearestIncludeSnapshotStockGroup (snapshot, stockGroup) = dataIncludeSnapshotStockGroup(snapshot, nearestParentIncludeSnapshotStockGroup (snapshot, stockGroup));

includeSnapshotStockGroup 'Вкл' (snapshot, stockGroup) =
    OVERRIDE allStockIncludeSnapshot(snapshot) IF stockGroup IS StockGroup,
             nearestIncludeSnapshotStockGroup (snapshot, stockGroup), 
             dataIncludeSnapshotStockGroup(snapshot, stockGroup) PERSISTENT;

includeSnapshotStock 'Вкл' (snapshot, stock) =
    (OVERRIDE includeSnapshotStockGroup(snapshot, stockGroupStock(stock)),
             dataIncludeSnapshotStock(snapshot, stock)) IF isCompanyStock(stock) PERSISTENT;
             
countIncludeStockSnapshot  (snapshot) = GROUP SUM 1 IF includeSnapshotStock(snapshot, stock) BY snapshot;      
        
//-- Выбор групп товара  
TABLE snapshotSkuGroup (Snapshot, SkuGroup);  
     
dataIncludeSnapshotSkuGroup 'Вкл' = DATA BOOLEAN (Snapshot, SkuGroup);

levelParentIncludeSnapshotSkuGroup (snapshot, skuGroup) = GROUP MIN levelSkuGroupSkuGroup(skuGroup, parent) IF dataIncludeSnapshotSkuGroup(snapshot, parent)
                                                              BY snapshot, skuGroup PERSISTENT;    
nearestParentIncludeSnapshotSkuGroup (snapshot, skuGroup) = skuGroupSkuGroupLevel(skuGroup, levelParentIncludeSnapshotSkuGroup(snapshot, skuGroup));
nearestIncludeSnapshotSkuGroup (snapshot, skuGroup) = dataIncludeSnapshotSkuGroup(snapshot, nearestParentIncludeSnapshotSkuGroup (snapshot, skuGroup));

includeSnapshotSkuGroup 'Вкл' (snapshot, skuGroup) =
    OVERRIDE nearestIncludeSnapshotSkuGroup (snapshot, skuGroup), 
             dataIncludeSnapshotSkuGroup(snapshot, skuGroup) PERSISTENT;    
                      
includeSnapshotSku 'Вкл' (snapshot, sku) = includeSnapshotSkuGroup(snapshot, skuGroupSku(sku));  
                    
countIncludeSkuSnapshot 'Вкл' (snapshot) = GROUP SUM 1 IF includeSnapshotSku(snapshot, sku) BY snapshot;                    

//------------------------------- ACTION -------------------------------//   
overTakeSnapshotDateFromTo= ABSTRACT ACTION LIST (Snapshot, DATE, DATE); 
overTakeSkuSnapshotDateFromTo= ABSTRACT ACTION LIST (Snapshot, DATE, DATE);
overTakeBatchSnapshotDateFromTo= ABSTRACT ACTION LIST (Snapshot, DATE, DATE);

takeSnapshotDateFromTo  = ACTION (snapshot, dateFrom, dateTo) {
    apply();    
    IF countIncludeSkuSnapshot(snapshot) AND countIncludeStockSnapshot(snapshot) THEN {        
        balanceBSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](balanceBSkuStockDate(sku, stock, dateFrom)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);
        sumBSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumBSkuStockDate(sku, stock, dateFrom)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);
        
        inQuantitySkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](quantitySumInSkuStockDateDate(sku, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);
        inSumSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumInSkuStockDateDate(sku, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);

        outQuantitySkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](quantitySumOutSkuStockDateDate(sku, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);
        outSumSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumOutSkuStockDateDate(sku, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);        
        
        balanceASkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](balanceASkuStockDate(sku, stock, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);
        sumASkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumASkuStockDate(sku, stock, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku);   
        
        overTakeSkuSnapshotDateFromTo(snapshot, dateFrom, dateTo);      
                     
        IF isBatchSnapshot(snapshot) THEN {   
    
            balanceBBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](balanceBBatchStockDate(batch, stock, dateFrom)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));
            sumBBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](balanceBBatchStockDate(batch, stock, dateFrom)*costBatch(batch)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));
            
            inQuantityBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));
            inSumBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](costSumInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));
    
            outQuantityBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));
            outSumBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](costSumOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));           
            
            balanceABatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](balanceABatchStockDate(batch, stock, dateTo)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));
            sumABatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](balanceABatchStockDate(batch, stock, dateTo)*costBatch(batch)) WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch));        
       
            overTakeBatchSnapshotDateFromTo(snapshot, dateFrom, dateTo);     
        }
        
        overTakeSnapshotDateFromTo(snapshot, dateFrom, dateTo);
        apply();    
    } ELSE {
        MESSAGE 'Не выбраны группы товаров или склады для отчета';
    }    
} CONFIRM;

takeDataSnapshot 'Заполнить данные' (snapshot) = takeSnapshotDateFromTo(snapshot, fromDateSnapshot(snapshot), toDateSnapshot(snapshot)) CONFIRM;

filterMoveSkuStockSnapshot (s, st, r) = balanceBSkuStockSnapshot(s,st,r) OR balanceASkuStockSnapshot(s,st,r) OR 
                                        inQuantitySkuStockSnapshot(s,st,r) OR outQuantitySkuStockSnapshot(s,st,r) PERSISTENT;
                                        
filterMoveBatchStockSnapshot (bt,ss,r)= balanceBBatchStockSnapshot(bt,ss,r) OR balanceABatchStockSnapshot(bt,ss,r) OR 
                                        inQuantityBatchStockSnapshot(bt,ss,r) OR outQuantityBatchStockSnapshot(bt,ss,r) PERSISTENT;

FORM snapshot 'Отчет'

    OBJECTS r = Snapshot FIXED PANEL
    PROPERTIES (r) nameNumeratorSnapshot, 
                   numberSnapshot, seriesSnapshot, dateSnapshot, timeSnapshot,
                   noteSnapshot, fromDateSnapshot, toDateSnapshot, isBatchSnapshot 
//-- выбор складов                  
    TREE stockTree2 a2 = STRING[3], sg2 = StockGroup PARENT parentStockGroup, ts2 = Stock
    PROPERTIES OBJVALUE(a2) READONLY, allStockIncludeSnapshot(r) TODRAW a2, 
               nameStockGroup(sg2) READONLY, includeSnapshotStockGroup(r,sg2),
               nameStock(ts2) READONLY, includeSnapshotStock(r,ts2)
    ORDER BY nameStockGroup(sg2)
    FILTERS stringEqualsAll(a2),
            stockGroupStock(ts2) == sg2,
            isCompanyStock(ts2)
    FILTERGROUP inactiveStock FILTER 'Активный склад' 'ctrl F10' activeStock(ts2) DEFAULT                                                                                  

    TREE stockTree a = STRING[3], sg = StockGroup PARENT parentStockGroup, ts = Stock
    PROPERTIES READONLY OBJVALUE(a), nameStockGroup(sg), nameStock(ts)
    ORDER BY nameStockGroup(sg)
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg,
            isCompanyStock(ts)
    FILTERGROUP inactiveStock FILTER 'Активный склад' 'ctrl F10' activeStock(ts) DEFAULT              
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sk2)
    PROPERTIES includeSnapshotSkuGroup(r,sk2)
    ORDER BY nameSkuGroup(sk2)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk2) DEFAULT            
            
//--sku      
    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sk)
    ORDER BY nameSkuGroup(sk)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT
    
    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY nameSku(s), idBarcodeSku(s), nameStock(st), nameSkuGroup1Sku(s), nameSkuGroup2Sku(s),
                      nameSkuGroup3Sku(s), nameSkuGroup4Sku(s), nameSkuGroup5Sku(s)
    FILTERGROUP inactiveStock FILTER 'Активный склад' 'ctrl F10' activeStock(st) DEFAULT         
        
    FILTERS           isParentSkuGroupSku(sk, s),
                      st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts,
                      isCompanyStock(st)

    PROPERTIES(s, st, r) BACKGROUND hintBalanceBBackground() balanceBSkuStockSnapshot, sumBSkuStockSnapshot 
    PROPERTIES(s, st, r) BACKGROUND hintInBackground() inQuantitySkuStockSnapshot, inSumSkuStockSnapshot
    PROPERTIES(s, st, r) BACKGROUND hintOutBackground() outQuantitySkuStockSnapshot, outSumSkuStockSnapshot
    PROPERTIES(s, st, r) BACKGROUND hintBalanceABackground() balanceASkuStockSnapshot, sumASkuStockSnapshot                                                                                                                                               
                                                             
    FILTERGROUP filtersSold
        FILTER 'С движением' 'F11' filterMoveSkuStockSnapshot(s,st,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBSkuStockSnapshot(s,st,r) OR balanceASkuStockSnapshot(s,st,r)  
        FILTER 'С приходом' 'F9' inQuantitySkuStockSnapshot(s,st,r)   
        FILTER 'С продажей' 'F8' outQuantitySkuStockSnapshot(s,st,r) 
                                                                                                                                                                                      
//--batch
    OBJECTS           stb=(ss=Stock, bt=Batch) FIXED GRID
    PROPERTIES        READONLY SHOWIF isBatchSnapshot(r) nameSkuBatch(bt), idBarcodeSkuBatch(bt), nameStock(ss), nameBatch(bt), dateTimeBatch(bt) 
    PROPERTIES        READONLY nameSkuGroup1Batch(bt), nameSkuGroup2Batch(bt), nameSkuGroup3Batch(bt), nameSkuGroup4Batch(bt), nameSkuGroup5Batch(bt)
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      ss == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, ss) AND NOT ts OR ss IS Stock AND NOT sg AND NOT ts,
                      isCompanyStock(ss)
    FILTERGROUP inactiveStock FILTER 'Активный склад' 'ctrl F10' activeStock(ss) DEFAULT
    ORDER BY          dateTimeBatch(bt)

    PROPERTIES(bt, ss, r) SHOWIF isBatchSnapshot(r) BACKGROUND hintBalanceBBackground() balanceBBatchStockSnapshot, sumBBatchStockSnapshot 
    PROPERTIES(bt, ss, r) SHOWIF isBatchSnapshot(r)BACKGROUND hintInBackground() inQuantityBatchStockSnapshot, inSumBatchStockSnapshot
    PROPERTIES(bt, ss, r) SHOWIF isBatchSnapshot(r) BACKGROUND hintOutBackground() outQuantityBatchStockSnapshot, outSumBatchStockSnapshot                              
    PROPERTIES(bt, ss, r) SHOWIF isBatchSnapshot(r) BACKGROUND hintBalanceABackground() balanceABatchStockSnapshot, sumABatchStockSnapshot
    
    FILTERGROUP filtersSoldBatch
        FILTER 'С движением' 'F11' filterMoveBatchStockSnapshot(bt,ss,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBBatchStockSnapshot(bt,ss,r) OR balanceABatchStockSnapshot(bt,ss,r)  
        FILTER 'С приходом' 'F9' inQuantityBatchStockSnapshot(bt,ss,r)   
        FILTER 'С продажей' 'F8' outQuantityBatchStockSnapshot(bt,ss,r)     
    
    PROPERTIES(r)  takeDataSnapshot FORCE PANEL 
//-- По группам    
    TREE skuTree1 sk1 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sk1)
    ORDER BY nameSkuGroup(sk1)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk1) DEFAULT    
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceBBackground() balanceBSkuGroupSnapshot, sumBSkuGroupSnapshot 
    PROPERTIES(sk1,r) READONLY BACKGROUND hintInBackground() inQuantitySkuGroupSnapshot, inSumSkuGroupSnapshot
    PROPERTIES(sk1,r) READONLY BACKGROUND hintOutBackground() outQuantitySkuGroupSnapshot, outSumSkuGroupSnapshot
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceABackground() balanceASkuGroupSnapshot, sumASkuGroupSnapshot                
       
//-- По складам           
    TREE stockTree1 a1 = STRING[3], sg1 = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a1), nameStockGroup(sg1)
    ORDER BY nameStockGroup(sg1)    
        
    OBJECTS ts1 = Stock
    PROPERTIES READONLY nameStock(ts1)   
    ORDER BY nameStock(ts1) 
    
    FILTERS stringEqualsAll(a1),
            ts1 IS Stock AND NOT sg1 IS StockGroup OR isParentStockGroupStock(sg1, ts1),
            isCompanyStock(ts1)     
    FILTERGROUP inactiveStock FILTER 'Активный склад' 'ctrl F10' activeStock(ts1) DEFAULT               

    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceBBackground() balanceBStockSnapshot, sumBStockSnapshot 
    PROPERTIES(ts1,r) READONLY BACKGROUND hintInBackground() inQuantityStockSnapshot, inSumStockSnapshot
    PROPERTIES(ts1,r) READONLY BACKGROUND hintOutBackground() outQuantityStockSnapshot, outSumStockSnapshot
    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceABackground() balanceAStockSnapshot, sumAStockSnapshot  
                                  
    FILTERGROUP filtersSoldStock
        FILTER 'С движением' 'F11' balanceBStockSnapshot(ts1,r) OR balanceAStockSnapshot(ts1,r) OR 
                                   inQuantityStockSnapshot(ts1,r) OR outQuantityStockSnapshot(ts1,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBStockSnapshot(ts1,r) OR balanceAStockSnapshot(ts1,r)  
        FILTER 'С приходом' 'F9' inQuantityStockSnapshot(ts1,r)   
        FILTER 'С продажей' 'F8' outQuantityStockSnapshot(ts1,r)   
                                          
//-- По поставщикам                                                
    
    OBJECTS l=LegalEntity FIXED GRID
    PROPERTIES READONLY SHOWIF isBatchSnapshot(r) nameLegalEntity(l)
    ORDER BY nameLegalEntity(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная орг-ия' 'shift F10' activeLegalEntity(l) DEFAULT
    FILTERS isSupplierLegalEntity(l)                                              
                                              
    PROPERTIES(l,r) READONLY SHOWIF isBatchSnapshot(r) BACKGROUND hintBalanceBBackground() balanceBBatchSupplierSnapshot, sumBBatchSupplierSnapshot 
    PROPERTIES(l,r) READONLY SHOWIF isBatchSnapshot(r) BACKGROUND hintInBackground() inQuantityBatchSupplierSnapshot, inSumBatchSupplierSnapshot
    PROPERTIES(l,r) READONLY SHOWIF isBatchSnapshot(r) BACKGROUND hintOutBackground() outQuantityBatchSupplierSnapshot, outSumBatchSupplierSnapshot
    PROPERTIES(l,r) READONLY SHOWIF isBatchSnapshot(r) BACKGROUND hintBalanceABackground() balanceABatchSupplierSnapshot, sumABatchSupplierSnapshot                                                                                                                                                              
 
    FILTERGROUP filtersSoldSupplier
        FILTER 'С движением' 'F11' balanceBBatchSupplierSnapshot(l,r) OR balanceABatchSupplierSnapshot(l,r) OR 
                                   inQuantityBatchSupplierSnapshot(l,r) OR outQuantityBatchSupplierSnapshot(l,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBBatchSupplierSnapshot(l,r) OR balanceABatchSupplierSnapshot(l,r)  
        FILTER 'С приходом' 'F9' inQuantityBatchSupplierSnapshot(l,r)   
        FILTER 'С продажей' 'F8' outQuantityBatchSupplierSnapshot(l,r)    
   
    EDIT Snapshot OBJECT r
;
DESIGN snapshot FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        ADD r.box {
            type = CONTAINERH;
            ADD r.numbered; 
            NEW date {
                caption = 'Период';
                type = CONTAINERH;
                ADD PROPERTY (fromDateSnapshot(r));
                ADD PROPERTY (toDateSnapshot(r));
            }
        };
        NEW top {                     
            fill = 1;
            type = TABBED;
            NEW paramContainer {
                fill = 1;
                caption = 'Параметры';
                ADD r.documentHeader;                   
                ADD r.documentPrm;
                 NEW select{
                    fill = 1;
                    type = SPLITH;
                    ADD stockTree2.tree.box { fill = 1; caption = 'Выбор складов'; }   
                    ADD skuTree2.tree.box { fill = 1; caption = 'Выбор групп'; }   
                 }   
            }
            
            NEW resultContainer {
                caption = 'Результат';
                ADD PROPERTY (takeDataSnapshot(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 36';  }
                NEW resultContainer2 {
                    fill = 7;
                    type = TABBED;
                    NEW tabb1 {
                        caption = 'Таблица';
                        type = SPLITH;          
                        NEW firstCase {
                            fill = 1;
                            type = SPLITV;
                            ADD stockTree.tree.box { caption = 'Склады'; }
                            ADD skuTree.tree.box { caption = 'Группы'; }
                        }
                        NEW secondCase {
                            fill = 3;
                            type = TABBED;
                            ADD sts.box {caption = 'Товары';}
                            ADD stb.box {caption = 'Партии';}
            
            
                        }   
                    }
                    NEW tabb2 {
                        caption = 'По складам';
                        type = SPLITH; 
                        fill = 1;
                        ADD stockTree1.tree.box { fill = 1;}     
                        ADD ts1.box { fill = 3;}                
                    }
                    ADD skuTree1.tree.box { caption = 'По группам'; }                        
                    ADD l.box { caption = 'По поставщикам'; }   
                }                 
            }
        }    
        ADD functions.box;
    }
}

@extendFormFilterStockGroupAccess(StockGroup, sg, snapshot);
@extendFormFilterStockGroupAccess(StockGroup, sg1, snapshot);

@extendFormFilterStockAccess(Stock, ts, snapshot);
@extendFormFilterStockAccess(Stock, st, snapshot);
@extendFormFilterStockAccess(Stock, ss, snapshot);
@extendFormFilterStockAccess(Stock, ts1, snapshot);

@extendFormFilterLegalEntityAccess(LegalEntity, l, snapshot, supplier);

FORM snapshots 'Отчеты'

    OBJECTS r = Snapshot
    PROPERTIES (r) READONLY numberSnapshot, seriesSnapshot, dateSnapshot, timeSnapshot,
                   fromDateSnapshot, toDateSnapshot, isBatchSnapshot, noteSnapshot 
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
                        
    DIALOG Snapshot OBJECT r
;

NAVIGATOR {
    stockReports {
        ADD snapshots;
    }
}