MODULE StockSnapshot;

REQUIRE SkuLedger, Document, PriceListLedger;

NAMESPACE Stock;

//////////////////////Отчет ////////////////////////////

CLASS Snapshot 'Отчет по товарообороту';
TABLE snapshot (Snapshot);

hintBalanceBBackground 'Лавандовый' = RGB(255,238,238) IF TRUE;     
hintPurchaseBackground 'Розовато-лавандовый'  = RGB(224, 224, 255) IF TRUE;         
hintSaleBackground 'Зеленого чая'  = RGB(204,255,204) IF TRUE;  
hintBalanceABackground 'Небесный'  = RGB(127,199,255) IF TRUE;                                                                                     
hintInBackground 'Лимонный' = RGB(255, 250, 205) IF TRUE;                                                                                   
hintOutBackground 'Бороды Абдель-Керима' = RGB(213, 213, 213) IF TRUE;     // серый


@defineDocumentHeaderTime(Snapshot);
@defineDocumentHeaderNote(Snapshot);
@defineDocumentHeaderCreated(Snapshot);
@deriveDocumentHeaderTimePrefix(Snapshot, );
@defineDocumentHeaderNumber(Snapshot);
@defineNumeratedDefault(Snapshot, 'Отчет по товарообороту', 'ОО');
@defineDocumentHeaderDescription (Snapshot, 'Отчет по товарообороту');

fromDateSnapshot 'Дата с' = DATA DATE (Snapshot) IN documentHeader;
toDateSnapshot 'Дата по' = DATA DATE (Snapshot) IN documentHeader;

startTimeSnapshot 'Время начала формирования' = DATA DATETIME (Snapshot) IN created;
finishTimeSnapshot 'Время окончания формирования' = DATA DATETIME (Snapshot) IN created;

WHEN SESSION SET(o IS Snapshot) DO {
    IF o IS Snapshot AND NOT fromDateSnapshot(o) THEN fromDateSnapshot(o) <- currentDate();
    IF o IS Snapshot AND NOT toDateSnapshot(o) THEN toDateSnapshot(o) <- currentDate();
};

//-- Параметры отчета
GROUP evidence 'Признаки' : base;

isBatchSnapshot 'По партиям' = DATA BOOLEAN (Snapshot) IN evidence;

isQuantitySnapshot 'Количество' = DATA BOOLEAN (Snapshot) IN evidence;
isSumSnapshot 'Сумма' = DATA BOOLEAN (Snapshot) IN evidence;

isBalanceBSnapshot 'Остаток начало' = DATA BOOLEAN (Snapshot) IN evidence;
isInSnapshot 'Приход' = DATA BOOLEAN (Snapshot) IN evidence;
isOutSnapshot 'Расход' = DATA BOOLEAN (Snapshot) IN evidence;
isBalanceASnapshot 'Остаток конец' = DATA BOOLEAN (Snapshot) IN evidence;

//-- Sku на дату

TABLE skuStockSnapshotDate (Sku, Stock, Snapshot, DATE);  

isDateSnapshot 'На дату' = DATA BOOLEAN (Snapshot) IN evidence;
isNotDateSnapshot 'Без дат' (s) = s IS Snapshot AND NOT isDateSnapshot(s);

balanceBSkuStockSnapshotDate 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
sumBSkuStockSnapshotDate 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

inQuantitySkuStockSnapshotDate 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
inSumSkuStockSnapshotDate 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

outQuantitySkuStockSnapshotDate 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
outSumSkuStockSnapshotDate 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

balanceASkuStockSnapshotDate 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
sumASkuStockSnapshotDate 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

//------------------------------ Sku -------------------------------//

TABLE skuStockSnapshot (Sku, Stock, Snapshot);  
balanceBSkuStockSnapshot 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumBSkuStockSnapshot 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

inQuantitySkuStockSnapshot 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
inSumSkuStockSnapshot 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

outQuantitySkuStockSnapshot 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
outSumSkuStockSnapshot 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

balanceASkuStockSnapshot 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumASkuStockSnapshot 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

//--По группе рекурсивно
TABLE skuGroupStockSnapshot (SkuGroup, Stock, Snapshot);   
  
//-- группа/склад       
balanceBSkuGroupStockSnapshot 'Кол-во начало' (group, stock, snapshot) =
    GROUP SUM balanceBSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
sumBSkuGroupStockSnapshot 'Сумма начало' (group, stock, snapshot) =
    GROUP SUM sumBSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;        
    
inQuantitySkuGroupStockSnapshot 'Кол-во приход' (group, stock, snapshot) =
    GROUP SUM inQuantitySkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
inSumSkuGroupStockSnapshot 'Сумма приход' (group, stock, snapshot) =
    GROUP SUM inSumSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;  
           
outQuantitySkuGroupStockSnapshot 'Кол-во расход' (group, stock, snapshot) =
    GROUP SUM outQuantitySkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
outSumSkuGroupStockSnapshot 'Сумма расход' (group, stock, snapshot) =
    GROUP SUM outSumSkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;             
    
balanceASkuGroupStockSnapshot 'Кол-во конец' (group, stock, snapshot) =
    GROUP SUM balanceASkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;
sumASkuGroupStockSnapshot 'Сумма конец' (group, stock, snapshot) =
    GROUP SUM sumASkuStockSnapshot (sku, stock, snapshot) IF isParentSkuGroupSku(group, sku)
        BY group, stock, snapshot PERSISTENT;  
//-- группа          
balanceBSkuGroupSnapshot 'Кол-во начало' (group, snapshot) =
    GROUP SUM balanceBSkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
sumBSkuGroupSnapshot 'Сумма начало' (group, snapshot) =
    GROUP SUM sumBSkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;        
    
inQuantitySkuGroupSnapshot 'Кол-во приход' (group, snapshot) =
    GROUP SUM inQuantitySkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
inSumSkuGroupSnapshot 'Сумма приход' (group, snapshot) =
    GROUP SUM inSumSkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;      
 
outQuantitySkuGroupSnapshot 'Кол-во расход' (group, snapshot) =
    GROUP SUM outQuantitySkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
outSumSkuGroupSnapshot 'Сумма расход' (group, snapshot) =
    GROUP SUM outSumSkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;      
    
balanceASkuGroupSnapshot 'Кол-во конец' (group, snapshot) =
    GROUP SUM balanceASkuGroupStockSnapshot (group, stock, snapshot)  BY group, snapshot; 
sumASkuGroupSnapshot 'Сумма конец' (group, snapshot) =
    GROUP SUM sumASkuGroupStockSnapshot (group, stock, snapshot) BY group, snapshot;            

//--По складам
balanceBStockSnapshot 'Кол-во начало' (stock, snapshot) =
    GROUP SUM balanceBSkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
sumBStockSnapshot 'Сумма начало' (stock, snapshot) =
    GROUP SUM sumBSkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;        
    
inQuantityStockSnapshot 'Кол-во приход' (stock, snapshot) =
    GROUP SUM inQuantitySkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
inSumStockSnapshot 'Сумма приход' (stock, snapshot) =
    GROUP SUM inSumSkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;      
 
outQuantityStockSnapshot 'Кол-во расход' (stock, snapshot) =
    GROUP SUM outQuantitySkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
outSumStockSnapshot 'Сумма расход' (stock, snapshot) =
    GROUP SUM outSumSkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;      
    
balanceAStockSnapshot 'Кол-во конец' (stock, snapshot) =
    GROUP SUM balanceASkuStockSnapshot (sku, stock, snapshot)  BY stock, snapshot; 
sumAStockSnapshot 'Сумма конец' (stock, snapshot) =
    GROUP SUM sumASkuStockSnapshot (sku, stock, snapshot) BY stock, snapshot;   
    
//--По складам на дату        
balanceBStockSnapshotDate 'Кол-во начало' (stock, snapshot, date) =
    GROUP SUM balanceBSkuStockSnapshotDate (sku, stock, snapshot, date)  BY stock, snapshot, date; 
sumBStockSnapshotDate 'Сумма начало' (stock, snapshot, date) =
    GROUP SUM sumBSkuStockSnapshotDate (sku, stock, snapshot, date) BY stock, snapshot, date;        
    
inQuantityStockSnapshotDate 'Кол-во приход' (stock, snapshot, date) =
    GROUP SUM inQuantitySkuStockSnapshotDate (sku, stock, snapshot, date)  BY stock, snapshot, date; 
inSumStockSnapshotDate 'Сумма приход' (stock, snapshot, date) =
    GROUP SUM inSumSkuStockSnapshotDate (sku, stock, snapshot, date) BY stock, snapshot, date;      
 
outQuantityStockSnapshotDate 'Кол-во расход' (stock, snapshot, date) =
    GROUP SUM outQuantitySkuStockSnapshotDate (sku, stock, snapshot, date)  BY stock, snapshot, date; 
outSumStockSnapshotDate 'Сумма расход' (stock, snapshot, date) =
    GROUP SUM outSumSkuStockSnapshotDate (sku, stock, snapshot, date) BY stock, snapshot, date;      
    
balanceAStockSnapshotDate 'Кол-во конец' (stock, snapshot, date) =
    GROUP SUM balanceASkuStockSnapshotDate (sku, stock, snapshot, date)  BY stock, snapshot, date; 
sumAStockSnapshotDate 'Сумма конец' (stock, snapshot, date) =
    GROUP SUM sumASkuStockSnapshotDate (sku, stock, snapshot, date) BY stock, snapshot, date;  
      
nameBalanceBStock (st) = CONCAT ' ', nameStock(st), ' (кол-во начало)';
nameSumBStock (st) = CONCAT ' ', nameStock(st), ' (сумма начало)';
nameInQuantityStock (st) = CONCAT ' ', nameStock(st), ' (кол-во приход)';
nameInSumStock(st) = CONCAT ' ', nameStock(st), ' (сумма приход)';        
nameOutQuantityStock (st) = CONCAT ' ', nameStock(st), ' (кол-во расход)';
nameOutSumStock (st) = CONCAT ' ', nameStock(st), ' (сумма расход)';
nameBalanceAStock (st) = CONCAT ' ', nameStock(st), ' (кол-во конец)';
nameSumAStock (st) = CONCAT ' ', nameStock(st), ' (сумма конец)';
        
//------------------------------ Batch -------------------------------//

TABLE batchStockSnapshot (Batch, Stock, Snapshot);  
balanceBBatchStockSnapshot 'Кол-во начало' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumBBatchStockSnapshot 'Себестоимость начало' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

inQuantityBatchStockSnapshot 'Кол-во приход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
inSumBatchStockSnapshot 'Себестоимость приход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

outQuantityBatchStockSnapshot 'Кол-во расход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
outSumBatchStockSnapshot 'Себестоимость расход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

balanceABatchStockSnapshot 'Кол-во конец' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumABatchStockSnapshot 'Себестоимость конец' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

//-- По поставщикам
balanceBBatchSupplierSnapshot 'Кол-во начало' (supplier, snapshot) =
    GROUP SUM balanceBBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
sumBBatchSupplierSnapshot 'Себестоимость начало' (supplier, snapshot) =
    GROUP SUM sumBBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot; 
    
inQuantityBatchSupplierSnapshot 'Кол-во приход' (supplier, snapshot) =
    GROUP SUM inQuantityBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
inSumBatchSupplierSnapshot 'Себестоимость приход' (supplier, snapshot) =
    GROUP SUM inSumBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;     
 
outQuantityBatchSupplierSnapshot 'Кол-во расход' (supplier, snapshot) =
    GROUP SUM outQuantityBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
outSumBatchSupplierSnapshot 'Себестоимость расход' (supplier, snapshot) =
    GROUP SUM outSumBatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;     
    
balanceABatchSupplierSnapshot 'Кол-во конец' (supplier, snapshot) =
    GROUP SUM balanceABatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;
sumABatchSupplierSnapshot 'Себестоимость конец' (supplier, snapshot) =
    GROUP SUM sumABatchStockSnapshot (batch, stock, snapshot) BY supplierBatch(batch), snapshot;     
    
//-- Выбор складов
TABLE snapshotStockGroup (Snapshot, StockGroup); 
TABLE snapshotStock (Snapshot, Stock);

allStockIncludeSnapshot 'Вкл' = DATA BOOLEAN (Snapshot);
dataIncludeSnapshotStockGroup 'Вкл' = DATA BOOLEAN (Snapshot, StockGroup);
dataIncludeSnapshotStock 'Вкл' = DATA BOOLEAN (Snapshot, Stock);

levelParentIncludeSnapshotStockGroup (snapshot, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataIncludeSnapshotStockGroup(snapshot, parent)
                                                              BY snapshot, stockGroup PERSISTENT;    
nearestParentIncludeSnapshotStockGroup (snapshot, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParentIncludeSnapshotStockGroup(snapshot, stockGroup));
nearestIncludeSnapshotStockGroup (snapshot, stockGroup) = dataIncludeSnapshotStockGroup(snapshot, nearestParentIncludeSnapshotStockGroup (snapshot, stockGroup));

includeSnapshotStockGroup 'Вкл' (snapshot, stockGroup) =
    OVERRIDE allStockIncludeSnapshot(snapshot) IF stockGroup IS StockGroup,
             nearestIncludeSnapshotStockGroup (snapshot, stockGroup), 
             dataIncludeSnapshotStockGroup(snapshot, stockGroup) PERSISTENT;

includeSnapshotStock 'Вкл' (snapshot, stock) =
    (OVERRIDE includeSnapshotStockGroup(snapshot, stockGroupStock(stock)),
             dataIncludeSnapshotStock(snapshot, stock)) IF isCompanyStock(stock) PERSISTENT;
             
countIncludeStockSnapshot  (snapshot) = GROUP SUM 1 IF includeSnapshotStock(snapshot, stock) BY snapshot;      


nameIncludeStockGroupsSnapshot 'Группы складов (все)' (document)= 
    GROUP CONCAT nameStockGroup(stockGroup) IF dataIncludeSnapshotStockGroup(document, stockGroup), ', ' 
    BY document 
    ORDER stockGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

nameIncludeStocksSnapshot 'Склады (все)' (document)= 
    GROUP CONCAT nameStock(stock) IF dataIncludeSnapshotStock(document, stock), ', ' 
    BY document 
    ORDER stock
    MINCHARWIDTH 20 PREFCHARWIDTH 40;
    
nameIncludeStockGroupsStockSnapshot 'Группы складов, склады (все)' (document) = CONCAT '; ', nameIncludeStockGroupsSnapshot(document), 
                                                                                             nameIncludeStocksSnapshot(document) MINCHARWIDTH 20 PREFCHARWIDTH 40;   
        
//-- Выбор групп товара  
TABLE snapshotSkuGroup (Snapshot, SkuGroup);  
     
dataIncludeSnapshotSkuGroup 'Вкл' = DATA BOOLEAN (Snapshot, SkuGroup);

levelParentIncludeSnapshotSkuGroup (snapshot, skuGroup) = GROUP MIN levelSkuGroupSkuGroup(skuGroup, parent) IF dataIncludeSnapshotSkuGroup(snapshot, parent)
                                                              BY snapshot, skuGroup PERSISTENT;    
nearestParentIncludeSnapshotSkuGroup (snapshot, skuGroup) = skuGroupSkuGroupLevel(skuGroup, levelParentIncludeSnapshotSkuGroup(snapshot, skuGroup));
nearestIncludeSnapshotSkuGroup (snapshot, skuGroup) = dataIncludeSnapshotSkuGroup(snapshot, nearestParentIncludeSnapshotSkuGroup (snapshot, skuGroup));

includeSnapshotSkuGroup 'Вкл' (snapshot, skuGroup) =
    OVERRIDE nearestIncludeSnapshotSkuGroup (snapshot, skuGroup), 
             dataIncludeSnapshotSkuGroup(snapshot, skuGroup) PERSISTENT;    
                      
includeSnapshotSku 'Вкл' (snapshot, sku) = includeSnapshotSkuGroup(snapshot, skuGroupSku(sku));  
                    
countIncludeSkuSnapshot 'Вкл' (snapshot) = GROUP SUM 1 IF includeSnapshotSku(snapshot, sku) BY snapshot;                    

nameIncludeSkuGroupsSnapshot 'Группы товаров (все)' (document)= 
    GROUP CONCAT nameSkuGroup(skuGroup) IF dataIncludeSnapshotSkuGroup(document, skuGroup), ', ' 
    BY document 
    ORDER skuGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

//------------------------------- ACTION -------------------------------//   
overTakeSnapshotDateFromTo= ABSTRACT ACTION LIST (Snapshot, DATE, DATE); 
overTakeSkuSnapshotDateFromTo= ABSTRACT ACTION LIST (Snapshot, DATE, DATE);
overTakeBatchSnapshotDateFromTo= ABSTRACT ACTION LIST (Snapshot, DATE, DATE);

statusSnapshot 'Статус отчета' (snapshot) = CASE
                                          WHEN finishTimeSnapshot(snapshot) THEN 'Сформирован'
                                          WHEN snapshot IS Snapshot THEN 'Не сформирован'
                                          MINCHARWIDTH 10 PREFCHARWIDTH 15
                                      ;
backgroundStatusSnapshot 'Цвет' (snapshot) =  CASE                                             
                                          WHEN finishTimeSnapshot(snapshot) THEN RGB(212,255,212)
                                          WHEN snapshot IS Snapshot THEN RGB(255,200,216)
                                      ;

takeSnapshotDateFromTo  = ACTION (snapshot, dateFrom, dateTo) {
    apply();  
    startTimeSnapshot(snapshot) <- currentDateTime();   
    IF countIncludeSkuSnapshot(snapshot) AND countIncludeStockSnapshot(snapshot) THEN {      
        IF isQuantitySnapshot(snapshot) THEN {         
        
            balanceBSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](balanceBSkuStockDate(sku, stock, dateFrom)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isBalanceBSnapshot(snapshot);
            
            inQuantitySkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](quantitySumInSkuStockDateDate(sku, stock, dateFrom, dateTo)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isInSnapshot(snapshot);
    
            outQuantitySkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](quantitySumOutSkuStockDateDate(sku, stock, dateFrom, dateTo)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isOutSnapshot(snapshot);     
            
            balanceASkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[14,3](balanceASkuStockDate(sku, stock, dateTo)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isBalanceASnapshot(snapshot);
 
        }
        IF isSumSnapshot(snapshot) THEN {         

            sumBSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumBSkuStockDate(sku, stock, dateFrom)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isBalanceBSnapshot(snapshot);

            inSumSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumInSkuStockDateDate(sku, stock, dateFrom, dateTo)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isInSnapshot(snapshot);         

            outSumSkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumOutSkuStockDateDate(sku, stock, dateFrom, dateTo)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isOutSnapshot(snapshot);        
            
            sumASkuStockSnapshot(sku, stock, snapshot) <- NUMERIC[16,2](sumASkuStockDate(sku, stock, dateTo)) 
                WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND isBalanceASnapshot(snapshot);   
        }        
        IF isDateSnapshot(snapshot) THEN {  
            IF isQuantitySnapshot(snapshot) THEN { 
                inQuantitySkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[14,3](quantityInSkuStockDate(sku, stock, date)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND quantityInSkuStockDate(sku, stock, date) AND isInSnapshot(snapshot);
        
                outQuantitySkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[14,3](quantityOutSkuStockDate(sku, stock, date)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND quantityOutSkuStockDate(sku, stock, date) AND isOutSnapshot(snapshot);
            }               
            IF isSumSnapshot(snapshot) THEN { 
                inSumSkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[16,2](sumInSkuStockDate(sku, stock, date)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND sumInSkuStockDate(sku, stock, date) AND isOutSnapshot(snapshot);
        
                outSumSkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[16,2](sumOutSkuStockDate(sku, stock, date)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND sumOutSkuStockDate(sku, stock, date) AND isOutSnapshot(snapshot);              
            }               
      
            
            LOCAL dateCur = DATE();           
            dateCur() <- dateFrom;           
            WHILE dateCur() <= dateTo DO {

                balanceBSkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[14,3](balanceBSkuStockDate(sku, stock, dateCur())) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date == dateCur() AND balanceBSkuStockDate(sku, stock, date)  
                        AND isQuantitySnapshot(snapshot) AND isBalanceBSnapshot(snapshot);
                sumBSkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[16,2](sumBSkuStockDate(sku, stock, dateCur())) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date == dateCur() AND sumBSkuStockDate(sku, stock, date)
                        AND isSumSnapshot(snapshot) AND isBalanceBSnapshot(snapshot);
           
                balanceASkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[14,3](balanceASkuStockDate(sku, stock, dateCur())) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date == dateCur() AND balanceBSkuStockDate(sku, stock, date)
                        AND isQuantitySnapshot(snapshot) AND isBalanceASnapshot(snapshot);
                sumASkuStockSnapshotDate(sku, stock, snapshot, date) <- NUMERIC[16,2](sumASkuStockDate(sku, stock, dateCur())) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, sku) AND date == dateCur() AND sumBSkuStockDate(sku, stock, date)
                        AND isSumSnapshot(snapshot) AND isBalanceASnapshot(snapshot);           

                dateCur() <- sumDate(dateCur(), 1);
            }                    
        }               
                
        overTakeSkuSnapshotDateFromTo(snapshot, dateFrom, dateTo);      
                     
        IF isBatchSnapshot(snapshot) THEN {   
            IF isQuantitySnapshot(snapshot) THEN {
                balanceBBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](balanceBBatchStockDate(batch, stock, dateFrom)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isBalanceBSnapshot(snapshot);
                
                inQuantityBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](costInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isInSnapshot(snapshot);
        
                outQuantityBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](costOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isOutSnapshot(snapshot);
                
                balanceABatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[14,3](balanceABatchStockDate(batch, stock, dateTo)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isBalanceASnapshot(snapshot);
            }
            IF isSumSnapshot(snapshot) THEN { 
                sumBBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](balanceBBatchStockDate(batch, stock, dateFrom)*costBatch(batch)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isBalanceBSnapshot(snapshot);
                
                inSumBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](costSumInBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isInSnapshot(snapshot);
        
                outSumBatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](costSumOutBalanceBatchStockDateFromTo(batch, stock, dateFrom, dateTo)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isOutSnapshot(snapshot);           
                
                sumABatchStockSnapshot(batch, stock, snapshot) <- NUMERIC[16,2](balanceABatchStockDate(batch, stock, dateTo)*costBatch(batch)) 
                    WHERE includeSnapshotStock(snapshot, stock) AND includeSnapshotSku(snapshot, skuBatch(batch)) AND isBalanceASnapshot(snapshot);               
            }    
                               
            overTakeBatchSnapshotDateFromTo(snapshot, dateFrom, dateTo);     
        }         
        overTakeSnapshotDateFromTo(snapshot, dateFrom, dateTo);
        
        apply(); 
        finishTimeSnapshot(snapshot) <- currentDateTime();      
    } ELSE {
        MESSAGE 'Не выбраны группы товаров или склады для отчета';
    }           
};

takeDataSnapshot 'Сформировать отчет' (snapshot) = ACTION (snapshot) { 
    IF finishTimeSnapshot(snapshot) THEN {
        CONFIRM 'Вы действительно хотите выполнить действие "Сформировать отчет?"';
        IF (confirmed()) THEN {            
            takeSnapshotDateFromTo(snapshot, fromDateSnapshot(snapshot), toDateSnapshot(snapshot));
        }
    } ELSE {
        takeSnapshotDateFromTo(snapshot, fromDateSnapshot(snapshot), toDateSnapshot(snapshot));    
    }    
}

filterMoveSkuStockSnapshot (s, st, r) = balanceBSkuStockSnapshot(s,st,r) OR balanceASkuStockSnapshot(s,st,r) OR 
                                        inQuantitySkuStockSnapshot(s,st,r) OR outQuantitySkuStockSnapshot(s,st,r) PERSISTENT;
                                        
filterMoveSkuStockSnapshotDate (s, st, r, d) = balanceBSkuStockSnapshotDate(s,st,r,d) OR balanceASkuStockSnapshotDate(s,st,r,d) OR 
                                        inQuantitySkuStockSnapshotDate(s,st,r,d) OR outQuantitySkuStockSnapshotDate(s,st,r,d) PERSISTENT;  
                                        
filterMoveSnapshotDate (r, d) = GROUP SUM 1 IF filterMoveSkuStockSnapshotDate (s, st, r, d) BY r, d;                                        
filterMoveStockSnapshotDate (st, r, d) = GROUP SUM 1 IF filterMoveSkuStockSnapshotDate (s, st, r, d) BY st, r, d;                                       
                                                                              
filterMoveBatchStockSnapshot (bt,ss,r)= balanceBBatchStockSnapshot(bt,ss,r) OR balanceABatchStockSnapshot(bt,ss,r) OR 
                                        inQuantityBatchStockSnapshot(bt,ss,r) OR outQuantityBatchStockSnapshot(bt,ss,r) PERSISTENT;

//-- SHOWIF
isQuantityBalanceBSnapshot= isQuantitySnapshot(snapshot) AND isBalanceBSnapshot(snapshot);
isQuantityInSnapshot= isQuantitySnapshot(snapshot) AND isInSnapshot(snapshot);
isQuantityOutSnapshot= isQuantitySnapshot(snapshot) AND isOutSnapshot(snapshot);
isQuantityBalanceASnapshot= isQuantitySnapshot(snapshot) AND isBalanceASnapshot(snapshot);

isSumBalanceBSnapshot= isSumSnapshot(snapshot) AND isBalanceBSnapshot(snapshot);
isSumInSnapshot= isSumSnapshot(snapshot) AND isInSnapshot(snapshot);
isSumOutSnapshot= isSumSnapshot(snapshot) AND isOutSnapshot(snapshot);
isSumBalanceASnapshot= isSumSnapshot(snapshot) AND isBalanceASnapshot(snapshot);
//--
isQuantityBalanceBBatchSnapshot= isQuantitySnapshot(snapshot) AND isBalanceBSnapshot(snapshot) AND isBatchSnapshot(snapshot);
isQuantityInBatchSnapshot= isQuantitySnapshot(snapshot) AND isInSnapshot(snapshot) AND isBatchSnapshot(snapshot);
isQuantityOutBatchSnapshot= isQuantitySnapshot(snapshot) AND isOutSnapshot(snapshot) AND isBatchSnapshot(snapshot);
isQuantityBalanceABatchSnapshot= isQuantitySnapshot(snapshot) AND isBalanceASnapshot(snapshot) AND isBatchSnapshot(snapshot);

isSumBalanceBBatchSnapshot= isSumSnapshot(snapshot) AND isBalanceBSnapshot(snapshot) AND isBatchSnapshot(snapshot);
isSumInBatchSnapshot= isSumSnapshot(snapshot) AND isInSnapshot(snapshot) AND isBatchSnapshot(snapshot);
isSumOutBatchSnapshot= isSumSnapshot(snapshot) AND isOutSnapshot(snapshot) AND isBatchSnapshot(snapshot);
isSumBalanceABatchSnapshot= isSumSnapshot(snapshot) AND isBalanceASnapshot(snapshot) AND isBatchSnapshot(snapshot);

//--
isQuantityBalanceBDateSnapshot= isQuantitySnapshot(snapshot) AND isBalanceBSnapshot(snapshot) AND isDateSnapshot(snapshot);
isQuantityInDateSnapshot= isQuantitySnapshot(snapshot) AND isInSnapshot(snapshot) AND isDateSnapshot(snapshot);
isQuantityOutDateSnapshot= isQuantitySnapshot(snapshot) AND isOutSnapshot(snapshot) AND isDateSnapshot(snapshot);
isQuantityBalanceADateSnapshot= isQuantitySnapshot(snapshot) AND isBalanceASnapshot(snapshot) AND isDateSnapshot(snapshot);

isSumBalanceBDateSnapshot= isSumSnapshot(snapshot) AND isBalanceBSnapshot(snapshot) AND isDateSnapshot(snapshot);
isSumInDateSnapshot= isSumSnapshot(snapshot) AND isInSnapshot(snapshot) AND isDateSnapshot(snapshot);
isSumOutDateSnapshot= isSumSnapshot(snapshot) AND isOutSnapshot(snapshot) AND isDateSnapshot(snapshot);
isSumBalanceADateSnapshot= isSumSnapshot(snapshot) AND isBalanceASnapshot(snapshot) AND isDateSnapshot(snapshot);

FORM snapshot 'Отчет по товарообороту'                                   
    OBJECTS r = Snapshot FIXED PANEL
    PROPERTIES (r) nameNumeratorSnapshot, 
                   numberSnapshot, seriesSnapshot, dateSnapshot, timeSnapshot,
                   noteSnapshot, fromDateSnapshot, toDateSnapshot, 
                   isQuantitySnapshot, isSumSnapshot, isBalanceBSnapshot BACKGROUND hintBalanceBBackground(), 
                   isInSnapshot BACKGROUND hintInBackground(), isOutSnapshot BACKGROUND hintOutBackground(), 
                   isBalanceASnapshot BACKGROUND hintBalanceABackground(),
                   isBatchSnapshot, isDateSnapshot 
//-- выбор складов                  
    TREE stockTree2 a2 = STRING[3], sg2 = StockGroup PARENT parentStockGroup, ts2 = Stock
    PROPERTIES OBJVALUE(a2) READONLY, allStockIncludeSnapshot(r) TODRAW a2, 
               nameStockGroup(sg2) READONLY, includeSnapshotStockGroup(r,sg2),
               nameStock(ts2) READONLY, includeSnapshotStock(r,ts2)
    ORDER BY nameStockGroup(sg2)
    FILTERS stringEqualsAll(a2),
            stockGroupStock(ts2) == sg2,
            isCompanyStock(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' 'ctrl F10' activeStock(ts2) DEFAULT                                                                                  
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sk2)
    PROPERTIES includeSnapshotSkuGroup(r,sk2)
    ORDER BY nameSkuGroup(sk2)
    FILTERGROUP inactive2 FILTER 'Активные' 'F5' activeSkuGroup(sk2) DEFAULT            
            
//--sku    
    TREE stockTree a = STRING[3], sg = StockGroup PARENT parentStockGroup, ts = Stock
    PROPERTIES READONLY OBJVALUE(a), nameStockGroup(sg), nameStock(ts)
    ORDER BY nameStockGroup(sg)
    FILTERS stringEqualsAll(a),
            stockGroupStock(ts) == sg,
            isCompanyStock(ts)
    FILTERGROUP inactiveStockts FILTER 'Активный' 'ctrl F10' activeStock(ts) DEFAULT    
    
    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sk)
    ORDER BY nameSkuGroup(sk)
    FILTERGROUP inactivesk FILTER 'Активные' 'F5' activeSkuGroup(sk) DEFAULT
    
    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY nameSku(s), idBarcodeSku(s), nameStock(st)
    FILTERGROUP inactiveStockst FILTER 'Активный' 'ctrl F10' activeStock(st) DEFAULT         
        
    FILTERS           isParentSkuGroupSku(sk, s),
                      st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts,
                      isCompanyStock(st)

    PROPERTIES(s, st, r) BACKGROUND hintBalanceBBackground() balanceBSkuStockSnapshot SHOWIF isQuantityBalanceBSnapshot(r), 
                         sumBSkuStockSnapshot SHOWIF isSumBalanceBSnapshot(r) 
    PROPERTIES(s, st, r) BACKGROUND hintInBackground() inQuantitySkuStockSnapshot SHOWIF isQuantityInSnapshot(r), 
                         inSumSkuStockSnapshot SHOWIF isSumInSnapshot(r)
    PROPERTIES(s, st, r) BACKGROUND hintOutBackground() outQuantitySkuStockSnapshot SHOWIF isQuantityOutSnapshot(r), 
                         outSumSkuStockSnapshot SHOWIF isSumOutSnapshot(r)
    PROPERTIES(s, st, r) BACKGROUND hintBalanceABackground() balanceASkuStockSnapshot SHOWIF isQuantityBalanceASnapshot(r), 
                         sumASkuStockSnapshot SHOWIF isSumBalanceASnapshot(r)                                                                                      
    PROPERTIES        READONLY nameSkuGroup1Sku(s), nameSkuGroup2Sku(s),nameSkuGroup3Sku(s), nameSkuGroup4Sku(s), nameSkuGroup5Sku(s)   
                                                                                
    FILTERGROUP filtersSold
        FILTER 'С движением' 'F11' filterMoveSkuStockSnapshot(s,st,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBSkuStockSnapshot(s,st,r) OR balanceASkuStockSnapshot(s,st,r)  
        FILTER 'С приходом' 'F9' inQuantitySkuStockSnapshot(s,st,r)   
        FILTER 'С продажей' 'F8' outQuantitySkuStockSnapshot(s,st,r) 
                                                                                                                                                                                      
//--batch
    OBJECTS           stb=(ss=Stock, bt=Batch) FIXED GRID
    PROPERTIES        READONLY SHOWIF isBatchSnapshot(r) nameSkuBatch(bt), idBarcodeSkuBatch(bt), nameStock(ss), nameBatch(bt)
    FILTERS           isParentSkuGroupBatch(sk, bt),
                      ss == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, ss) AND NOT ts OR ss IS Stock AND NOT sg AND NOT ts,
                      isCompanyStock(ss)
    FILTERGROUP inactiveStock FILTER 'Активный' 'ctrl F10' activeStock(ss) DEFAULT


    PROPERTIES(bt, ss, r) BACKGROUND hintBalanceBBackground() balanceBBatchStockSnapshot SHOWIF isQuantityBalanceBBatchSnapshot(r), 
                          sumBBatchStockSnapshot SHOWIF isSumBalanceBBatchSnapshot(r) 
    PROPERTIES(bt, ss, r) BACKGROUND hintInBackground() inQuantityBatchStockSnapshot SHOWIF isQuantityInBatchSnapshot(r), 
                          inSumBatchStockSnapshot SHOWIF isSumInBatchSnapshot(r)
    PROPERTIES(bt, ss, r) BACKGROUND hintOutBackground() outQuantityBatchStockSnapshot SHOWIF isQuantityOutBatchSnapshot(r), 
                          outSumBatchStockSnapshot SHOWIF isSumOutBatchSnapshot(r)                             
    PROPERTIES(bt, ss, r) BACKGROUND hintBalanceABackground() balanceABatchStockSnapshot SHOWIF isQuantityBalanceABatchSnapshot(r), 
                          sumABatchStockSnapshot SHOWIF isSumBalanceABatchSnapshot(r)
    PROPERTIES        READONLY SHOWIF isBatchSnapshot(r) dateBatch(bt), nameSkuGroup1Batch(bt), nameSkuGroup2Batch(bt), 
                      nameSkuGroup3Batch(bt), nameSkuGroup4Batch(bt), nameSkuGroup5Batch(bt)
    ORDER BY          dateBatch(bt)            
        
    FILTERGROUP filtersSoldBatch
        FILTER 'С движением' 'F11' filterMoveBatchStockSnapshot(bt,ss,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBBatchStockSnapshot(bt,ss,r) OR balanceABatchStockSnapshot(bt,ss,r)  
        FILTER 'С приходом' 'F9' inQuantityBatchStockSnapshot(bt,ss,r)   
        FILTER 'С продажей' 'F8' outQuantityBatchStockSnapshot(bt,ss,r)     
    
    PROPERTIES(r)  takeDataSnapshot FORCE PANEL 
//-- По группам    
    TREE skuTree1 sk1 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sk1)
    ORDER BY nameSkuGroup(sk1)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sk1) DEFAULT    
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceBBackground() balanceBSkuGroupSnapshot SHOWIF isQuantityBalanceBSnapshot(r), 
                      sumBSkuGroupSnapshot SHOWIF isSumBalanceBSnapshot(r)
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceABackground() balanceASkuGroupSnapshot SHOWIF isQuantityBalanceASnapshot(r), 
                      sumASkuGroupSnapshot SHOWIF isSumBalanceASnapshot(r)               
       
//-- По складам           
    TREE stockTree1 a1 = STRING[3], sg1 = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a1), nameStockGroup(sg1)
    ORDER BY nameStockGroup(sg1)    
        
    OBJECTS ts1 = Stock
    PROPERTIES READONLY nameStock(ts1)   
    ORDER BY nameStock(ts1) 
    
    FILTERS stringEqualsAll(a1),
            ts1 IS Stock AND NOT sg1 IS StockGroup OR isParentStockGroupStock(sg1, ts1),
            isCompanyStock(ts1)     
    FILTERGROUP inactiveStock1 FILTER 'Активный' 'ctrl F10' activeStock(ts1) DEFAULT               

    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceBBackground() balanceBStockSnapshot SHOWIF isQuantityBalanceBSnapshot(r), 
                      sumBStockSnapshot SHOWIF isSumBalanceBSnapshot(r)   
    PROPERTIES(ts1,r) READONLY BACKGROUND hintInBackground() inQuantityStockSnapshot SHOWIF isQuantityInSnapshot(r), 
                      inSumStockSnapshot SHOWIF isSumInSnapshot(r)  
    PROPERTIES(ts1,r) READONLY BACKGROUND hintOutBackground() outQuantityStockSnapshot SHOWIF isQuantityOutSnapshot(r), 
                      outSumStockSnapshot SHOWIF isSumOutSnapshot(r)  
    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceABackground() balanceAStockSnapshot SHOWIF isQuantityBalanceASnapshot(r), 
                      sumAStockSnapshot SHOWIF isSumBalanceASnapshot(r)   
                                  
    FILTERGROUP filtersSoldStock
        FILTER 'С движением' 'F11' balanceBStockSnapshot(ts1,r) OR balanceAStockSnapshot(ts1,r) OR 
                                   inQuantityStockSnapshot(ts1,r) OR outQuantityStockSnapshot(ts1,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBStockSnapshot(ts1,r) OR balanceAStockSnapshot(ts1,r)  
        FILTER 'С приходом' 'F9' inQuantityStockSnapshot(ts1,r)   
        FILTER 'С продажей' 'F8' outQuantityStockSnapshot(ts1,r)   
                                          
//-- По поставщикам                                                
    
    OBJECTS l=LegalEntity FIXED GRID
    PROPERTIES READONLY SHOWIF isBatchSnapshot(r) nameLegalEntity(l)
    ORDER BY nameLegalEntity(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' 'shift F10' activeLegalEntity(l) DEFAULT
    FILTERS isSupplierLegalEntity(l)                                              
                                              
    PROPERTIES(l,r) READONLY BACKGROUND hintBalanceBBackground() balanceBBatchSupplierSnapshot SHOWIF isQuantityBalanceBBatchSnapshot(r), 
                    sumBBatchSupplierSnapshot  SHOWIF isSumBalanceBBatchSnapshot(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintInBackground() inQuantityBatchSupplierSnapshot SHOWIF isQuantityInBatchSnapshot(r), 
                    inSumBatchSupplierSnapshot  SHOWIF isSumInBatchSnapshot(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintOutBackground() outQuantityBatchSupplierSnapshot SHOWIF isQuantityOutBatchSnapshot(r), 
                    outSumBatchSupplierSnapshot  SHOWIF isSumOutBatchSnapshot(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintBalanceABackground() balanceABatchSupplierSnapshot SHOWIF isQuantityBalanceABatchSnapshot(r), 
                    sumABatchSupplierSnapshot  SHOWIF isSumBalanceABatchSnapshot(r)                                                                                                                                                             
 
    FILTERGROUP filtersSoldSupplier
        FILTER 'С движением' 'F11' balanceBBatchSupplierSnapshot(l,r) OR balanceABatchSupplierSnapshot(l,r) OR 
                                   inQuantityBatchSupplierSnapshot(l,r) OR outQuantityBatchSupplierSnapshot(l,r) DEFAULT
        FILTER 'С остатком' 'F10' balanceBBatchSupplierSnapshot(l,r) OR balanceABatchSupplierSnapshot(l,r)  
        FILTER 'С приходом' 'F9' inQuantityBatchSupplierSnapshot(l,r)   
        FILTER 'С продажей' 'F8' outQuantityBatchSupplierSnapshot(l,r)    
        
//-- По SKU на дату         
           
    OBJECTS           sts3=(st3=Stock, s3=Sku, d3=DATE) FIXED GRID 
    PROPERTIES        READONLY SHOWIF isDateSnapshot(r) valD3 =OBJVALUE(d3), nameSku(s3), idBarcodeSku(s3), nameStock(st3) 
    
    ORDER BY          valD3     
    FILTERS           filterMoveSnapshotDate(r,d3)
    
    FILTERGROUP inactiveStock3 FILTER 'Активный' 'ctrl F10' activeStock(st3) DEFAULT         
        
    FILTERS           isParentSkuGroupSku(sk, s3),
                      st3 == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st3) AND NOT ts OR st3 IS Stock AND NOT sg AND NOT ts,
                      isCompanyStock(st3)

    PROPERTIES(s3,st3,r,d3) BACKGROUND hintBalanceBBackground() balanceBSkuStockSnapshotDate SHOWIF isQuantityBalanceBDateSnapshot(r), 
                            sumBSkuStockSnapshotDate SHOWIF isSumBalanceBDateSnapshot(r)  
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintInBackground() inQuantitySkuStockSnapshotDate SHOWIF isQuantityInDateSnapshot(r), 
                            inSumSkuStockSnapshotDate SHOWIF isSumInDateSnapshot(r) 
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintOutBackground() outQuantitySkuStockSnapshotDate SHOWIF isQuantityOutDateSnapshot(r), 
                            outSumSkuStockSnapshotDate SHOWIF isSumOutDateSnapshot(r) 
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintBalanceABackground() balanceASkuStockSnapshotDate SHOWIF isQuantityBalanceADateSnapshot(r), 
                            sumASkuStockSnapshotDate SHOWIF isSumBalanceADateSnapshot(r)                                                                                                                                                  
    PROPERTIES        READONLY SHOWIF isDateSnapshot(r) nameSkuGroup1Sku(s3), nameSkuGroup2Sku(s3), nameSkuGroup3Sku(s3), 
                      nameSkuGroup4Sku(s3), nameSkuGroup5Sku(s3)
                                                             
    FILTERGROUP filtersSold1
        FILTER 'С движением' 'F11' filterMoveSkuStockSnapshotDate(s3,st3,r,d3) DEFAULT
        FILTER 'С остатком' 'F10' balanceBSkuStockSnapshotDate(s3,st3,r,d3) OR balanceASkuStockSnapshotDate(s3,st3,r,d3)  
        FILTER 'С приходом' 'F9' inQuantitySkuStockSnapshotDate(s3,st3,r,d3)   
        FILTER 'С продажей' 'F8' outQuantitySkuStockSnapshotDate(s3,st3,r,d3)         

    OBJECTS st4=Stock
    FILTERS           st4 == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st4) AND NOT ts OR st4 IS Stock AND NOT sg AND NOT ts,
                      isCompanyStock(st4),
                      includeSnapshotStock(r,st4)
    
    OBJECTS d4=DATE FIXED GRID  
    PROPERTIES READONLY  SHOWIF isDateSnapshot(r) valD4 =OBJVALUE(d4)  
    FILTERS           filterMoveSnapshotDate (r, d4)
        
    PROPERTIES(st4,r,d4) BACKGROUND hintBalanceBBackground() balanceBStockSnapshotDate COLUMNS 'g' (st4) HEADER nameBalanceBStock(st4) SHOWIF isQuantityBalanceBDateSnapshot(r), 
                         sumBStockSnapshotDate COLUMNS 'g' (st4) HEADER nameSumBStock(st4) SHOWIF isSumBalanceBDateSnapshot(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintInBackground() inQuantityStockSnapshotDate COLUMNS 'g' (st4) HEADER nameInQuantityStock(st4) SHOWIF isQuantityInDateSnapshot(r), 
                         inSumStockSnapshotDate COLUMNS 'g' (st4) HEADER nameInSumStock(st4) SHOWIF isSumInDateSnapshot(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintOutBackground() outQuantityStockSnapshotDate COLUMNS 'g' (st4) HEADER nameOutQuantityStock(st4) SHOWIF isQuantityOutDateSnapshot(r), 
                         outSumStockSnapshotDate COLUMNS 'g' (st4) HEADER nameOutSumStock(st4) SHOWIF isSumOutDateSnapshot(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintBalanceABackground() balanceAStockSnapshotDate COLUMNS 'g' (st4) HEADER nameBalanceAStock(st4) SHOWIF isQuantityBalanceADateSnapshot(r), 
                         sumAStockSnapshotDate COLUMNS 'g' (st4) HEADER nameSumAStock(st4) SHOWIF isSumBalanceADateSnapshot(r)                                       
   
    EDIT Snapshot OBJECT r
;
DESIGN snapshot FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        ADD r.box {
            type = CONTAINERH;
            ADD r.numbered; 
            NEW date {
                caption = 'Период';
                type = CONTAINERH;
                ADD PROPERTY (fromDateSnapshot(r));
                ADD PROPERTY (toDateSnapshot(r));
            }
            ADD r.documentHeader;           
        };
        NEW top {                     
            fill = 1;
            type = TABBED;
            NEW paramContainer {
                fill = 1;
                caption = 'Параметры';
                ADD r.evidence {
                    type = CONTAINERH;                      
                    NEW row1 {
                        type = CONTAINERV; 
                        caption = 'Основные';    
                        ADD PROPERTY(isBatchSnapshot(r));
                        ADD PROPERTY(isDateSnapshot(r));
                    }
                    NEW row2 {
                        type = CONTAINERV;
                        caption = 'Количественые';
                        ADD PROPERTY(isQuantitySnapshot(r));
                        ADD PROPERTY(isSumSnapshot(r));                        
                    }
                    NEW row3 {
                        caption = 'Остатки';
                        ADD PROPERTY(isBalanceBSnapshot(r));
                        ADD PROPERTY(isBalanceASnapshot(r));                                                                                                     
                    }   
                    NEW row4 {
                        type = CONTAINERV;
                        caption = 'Движение';
                        ADD PROPERTY(isInSnapshot(r));  
                        ADD PROPERTY(isOutSnapshot(r));                     
                    }                                                                          
                    NEW row5 {
                        type = CONTAINERV;
                        caption = 'Оборот';  
                        type = COLUMNS;
                        columns = 2;                          
                    }                                                         
                }                                   
                ADD r.documentPrm;
                NEW select{
                    fill = 1;
                    type = SPLITH;
                    ADD stockTree2.tree.box { fill = 1; caption = 'Выбор складов'; }   
                    ADD skuTree2.tree.box { fill = 1; caption = 'Выбор групп'; }   
                }   
            }
            
            NEW resultContainer {
                caption = 'Результат';
                ADD PROPERTY (takeDataSnapshot(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 36';  }
                NEW resultContainer2 {
                    fill = 7;
                    type = TABBED;
                    NEW tabb1 {
                        caption = 'Таблица';
                        type = SPLITH;          
                        NEW firstCase {
                            fill = 1;
                            type = SPLITV;
                            ADD stockTree.tree.box { caption = 'Склады'; }
                            ADD skuTree.tree.box { caption = 'Группы'; }
                        }
                        NEW secondCase {
                            fill = 3;
                            type = TABBED;
                            NEW skuContainer{
                                fill = 1;
                                caption = 'Товары'; 
                                type = TABBED;
                                ADD sts.box {caption = 'Итоги';}
                                ADD sts3.box {caption = 'Динамика';}
                            }    
                            ADD stb.box {caption = 'Партии'; 
                                PROPERTY(dateBatch(bt)) { caption = 'Дата прихода'; }
                            }                                                  
                        }   
                    }
                    NEW tabb2 {
                        caption = 'По складам';
                        type = SPLITH; 
                        fill = 1;
                        ADD stockTree1.tree.box;                                                                                 
                        NEW tabb21 { 
                            fill = 3;   
                            type = TABBED;
                            ADD ts1.box { caption = 'Итоги';}    
                            ADD d4.box {caption = 'Динамика';}   
                        }      
                    }
                    ADD skuTree1.tree.box { caption = 'По группам'; }                        
                    ADD l.box { caption = 'По поставщикам'; }   
                }                 
            }
        } 
        REMOVE st4.box;
        ADD functions.box;
    }
}

@extendFormFilterStockGroupAccess(StockGroup, sg, snapshot);
@extendFormFilterStockGroupAccess(StockGroup, sg1, snapshot);

@extendFormFilterStockAccess(Stock, ts, snapshot);
@extendFormFilterStockAccess(Stock, st, snapshot);
@extendFormFilterStockAccess(Stock, ss, snapshot);
@extendFormFilterStockAccess(Stock, ts1, snapshot);

@extendFormFilterLegalEntityAccess(LegalEntity, l, snapshot, supplier);

FORM snapshots 'Отчеты по товарообороту'

    OBJECTS r = Snapshot
    PROPERTIES (r) READONLY numberSnapshot, seriesSnapshot, dateSnapshot, timeSnapshot,
                   fromDateSnapshot, toDateSnapshot, statusSnapshot BACKGROUND backgroundStatusSnapshot(r), 
                   startTimeSnapshot, finishTimeSnapshot, noteSnapshot, nameIncludeStockGroupsStockSnapshot, nameIncludeSkuGroupsSnapshot,
                   isBatchSnapshot, isDateSnapshot, isQuantitySnapshot, isSumSnapshot, isBalanceBSnapshot BACKGROUND hintBalanceBBackground(), 
                   isInSnapshot BACKGROUND hintInBackground(),
                   isOutSnapshot BACKGROUND hintOutBackground(), isBalanceASnapshot BACKGROUND hintBalanceABackground()                  
                   
    PROPERTIES (r) ADDFORM, EDITFORM, deleter=DELETE FORCE PANEL TOOLBAR  
    PROPERTIES (r) READONLY FORCE PANEL createdNameUserSnapshot, createdTimeSnapshot, createdHostnameComputerSnapshot   
                         
    DIALOG Snapshot OBJECT r
;
DESIGN snapshots FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        ADD r.box;
        ADD r.created; 
        ADD functions.box;
    }    
}

NAVIGATOR {
    stockReports {
        ADD snapshots;
    }
}