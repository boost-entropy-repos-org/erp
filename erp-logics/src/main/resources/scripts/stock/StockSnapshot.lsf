MODULE StockSnapshot;

REQUIRE SkuLedger, Document, PriceListLedger, StockTax;

NAMESPACE Stock;

////////////////////// Тип отчета ////////////////////////////
CLASS SnapshotType 'Тип аналитического отчета';
TABLE snapshotType (SnapshotType);

name 'Наименование' = DATA STRING[100] (SnapshotType) IN documentHeader;
@defineExternalizable(snapshotType, VARSTRING[100]);
isBatch 'По партиям' = DATA BOOLEAN (SnapshotType);

isQuantity 'Количество' = DATA BOOLEAN (SnapshotType);
isSum 'Сумма ' = DATA BOOLEAN (SnapshotType);

isBalanceB 'Остаток начало' = DATA BOOLEAN (SnapshotType);
isIn 'Приход' = DATA BOOLEAN (SnapshotType);
isOut 'Расход' = DATA BOOLEAN (SnapshotType);
isBalanceA 'Остаток конец' = DATA BOOLEAN (SnapshotType);

isCost 'Себестоимость' = DATA BOOLEAN (SnapshotType);
isVATSupplier 'НДС поставщика' = DATA BOOLEAN (SnapshotType);
isCostVATSupplier 'Себестоимость с НДС' = DATA BOOLEAN (SnapshotType);
isNetWeight 'Вес, кг' = DATA BOOLEAN (SnapshotType);
isDate 'В динамике' = DATA BOOLEAN (SnapshotType);


//-- Выбор складов
TABLE snapshotTypeStockGroup (SnapshotType, StockGroup); 
TABLE snapshotTypeStock (SnapshotType, Stock);

allStockInclude 'Вкл' = DATA BOOLEAN (SnapshotType);
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotType, StockGroup);
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotType, Stock);

levelParentInclude (snapshotType, stockGroup) = GROUP MIN level(StockGroup stockGroup, StockGroup parent) IF dataInclude(SnapshotType snapshotType, parent)
                                                              BY snapshotType, stockGroup PERSISTENT;    
nearestParentInclude (SnapshotType snapshotType, StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(snapshotType, stockGroup));
nearestInclude (SnapshotType snapshotType, StockGroup stockGroup) = dataInclude(snapshotType, nearestParentInclude (snapshotType, stockGroup));

include 'Вкл' (SnapshotType snapshotType, StockGroup stockGroup) =
    OVERRIDE allStockInclude(snapshotType) IF stockGroup IS StockGroup,
             nearestInclude (snapshotType, stockGroup), 
             dataInclude(snapshotType, stockGroup) PERSISTENT;

include 'Вкл' (SnapshotType snapshotType, Stock stock) =
    (OVERRIDE include(snapshotType, stockGroup(stock)),
             dataInclude(snapshotType, stock)) IF isCompany(stock) PERSISTENT;
                        
@defineBackgroundNearestBoolean(allStockInclude, include, snapshotType, stock, nearestInclude, isCompany);            
                          
countIncludeStock  (snapshotType) = GROUP SUM 1 IF include(SnapshotType snapshotType, Stock stock) BY snapshotType;      


nameIncludeStockGroups 'Группы складов (все)' (document)= 
    GROUP CONCAT name(StockGroup stockGroup) IF dataInclude(SnapshotType document, stockGroup), ', ' 
    BY document 
    ORDER stockGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

nameIncludeStocks 'Склады (все)' (document)= 
    GROUP CONCAT name(Stock stock) IF dataInclude(SnapshotType document, stock), ', ' 
    BY document 
    ORDER stock
    MINCHARWIDTH 20 PREFCHARWIDTH 40;
    
nameIncludeStockGroupsStock 'Группы складов, склады (все)' (SnapshotType document) = CONCAT '; ', nameIncludeStockGroups(document), 
                                                                                             nameIncludeStocks(document) MINCHARWIDTH 20 PREFCHARWIDTH 40;   
        
//-- Выбор групп товара  
TABLE snapshotTypeSkuGroup (SnapshotType, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotType, SkuGroup);

levelParentInclude (snapshotType, skuGroup) = GROUP MIN level(SkuGroup skuGroup, SkuGroup parent) IF dataInclude(SnapshotType snapshotType, parent)
                                                              BY snapshotType, skuGroup PERSISTENT;    
nearestParentInclude (SnapshotType snapshotType, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(snapshotType, skuGroup));
nearestInclude (SnapshotType snapshotType, SkuGroup skuGroup) = dataInclude(snapshotType, nearestParentInclude (snapshotType, skuGroup));

include 'Вкл' (SnapshotType snapshotType, SkuGroup skuGroup) =
    OVERRIDE nearestInclude (snapshotType, skuGroup), 
             dataInclude(snapshotType, skuGroup) PERSISTENT;    
                      
include 'Вкл' (SnapshotType snapshotType, Sku sku) = include(snapshotType, skuGroup(sku));  
                    
countIncludeSku 'Вкл' (snapshotType) = GROUP SUM 1 IF include(SnapshotType snapshotType, Sku sku) BY snapshotType;                    

nameIncludeSkuGroups 'Группы товаров (все)' (document)= 
    GROUP CONCAT name(SkuGroup skuGroup) IF dataInclude(SnapshotType document, skuGroup), ', ' 
    BY document 
    ORDER skuGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

FORM snapshotType 'Тип аналитического отчета'
    OBJECTS t = SnapshotType FIXED PANEL
    PROPERTIES(t) id SHOWIF showIDs(), name, isBatch, isQuantity, isSum, isBalanceB,
                  isIn, isOut, isBalanceA, isCost, isVATSupplier,
                  isCostVATSupplier, isNetWeight, isDate  
                     
//-- выбор складов                  
    TREE stockTree2 a2 = STRING[3], sg2 = StockGroup PARENT parent, ts2 = Stock
    PROPERTIES OBJVALUE(a2) READONLY, allStockInclude(t) TODRAW a2 BACKGROUND backgroundAllStockInclude(t), 
               name(sg2) READONLY, include(t,sg2) BACKGROUND backgroundInclude(t,sg2),
               name(ts2) READONLY, include(t,ts2) BACKGROUND backgroundInclude(t,ts2)
    ORDER BY name(sg2)
    FILTERS stringEqualsAll(a2),
            stockGroup(ts2) == sg2,
            isCompany(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(ts2) 'ctrl F10' DEFAULT                                                                                  
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(t,sk2)
    ORDER BY order(sk2), name(sk2)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F5' DEFAULT                                                                  
                     
    EDIT SnapshotType OBJECT t
;
DESIGN snapshotType {
    main{
        preferredSize = (1024, 768);
        NEW topContainer {
            caption = 'Шапка документа';
            type = CONTAINERH;
            MOVE PROPERTY(id(t));
            MOVE PROPERTY(name(t));
        }
        NEW paramContainer {
            caption = 'Параметры';
            type = CONTAINERH;                      
            NEW row1 {
                type = CONTAINERV; 
                caption = 'Основные';    
                MOVE PROPERTY(isBatch(t));
                MOVE PROPERTY(isDate(t));
            }
            NEW row2 {
                caption = 'Остатки';                 
                MOVE PROPERTY(isBalanceB(t));
                MOVE PROPERTY(isBalanceA(t));   
                                                                                     
            }                    
            NEW row3 {
                type = CONTAINERV;
                caption = 'Колонки';
                type = COLUMNS;
                columns = 4;
                MOVE PROPERTY(isQuantity(t));
                MOVE PROPERTY(isSum(t)); 
                MOVE PROPERTY(isCost(t)); 
                MOVE PROPERTY(isVATSupplier(t));   
                MOVE PROPERTY(isCostVATSupplier(t));     
                MOVE PROPERTY(isNetWeight(t));                   
            }                      
            NEW row5 {
                type = CONTAINERV;
                caption = 'Движение';
                MOVE PROPERTY(isIn(t));  
                MOVE PROPERTY(isOut(t));                     
            }                                                                          
            NEW row6 {
                type = CONTAINERV;
                caption = 'Оборот';  
                type = COLUMNS;
                columns = 2;   
                                       
            }                                                         
        }
        NEW select{
            fill = 1;
            type = SPLITH;
            MOVE stockTree2.tree.box { fill = 1; caption = 'Выбор складов'; }   
            MOVE skuTree2.tree.box { fill = 1; caption = 'Выбор групп'; }   
        }
        MOVE functions.box;
    }            
}
FORM snapshotTypes 'Типы аналитических отчетов'
    OBJECTS t = SnapshotType
    PROPERTIES(t) READONLY id SHOWIF showIDs(), name, isBatch, isQuantity, isSum, isBalanceB,
                  isIn, isOut, isBalanceA, isCost, isVATSupplier,
                  isCostVATSupplier, isNetWeight   
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    LIST SnapshotType OBJECT t
;
META deriveDocumentSnapshotProperty(property)
    property (Snapshot o) <- property(snapshotType(o))
        WHEN CHANGED(snapshotType(o));
END

//////////////////////Отчет ////////////////////////////

CLASS Snapshot 'Аналитический отчет';
TABLE snapshot (Snapshot);

hintBalanceBBackground 'Лавандовый' = RGB(255,238,238) IF TRUE;     
hintPurchaseBackground 'Розовато-лавандовый'  = RGB(224, 224, 255) IF TRUE;         
hintSaleBackground 'Зеленого чая'  = RGB(204,255,204) IF TRUE;  
hintBalanceABackground 'Небесный'  = RGB(127,199,255) IF TRUE;                                                                                     
hintInBackground 'Лимонный' = RGB(255, 250, 205) IF TRUE;                                                                                   
hintOutBackground 'Бороды Абдель-Керима' = RGB(213, 213, 213) IF TRUE;     // серый

snapshotType= DATA SnapshotType (Snapshot);
nameSnapshotType 'Тип отчета' = name(snapshotType(Snapshot s)) IN documentHeader MINCHARWIDTH 15  PREFCHARWIDTH 20;

@defineDocumentHeaderTime(Snapshot);
@defineDocumentHeaderNote(Snapshot);
@defineDocumentHeaderCreated(Snapshot);
@deriveDocumentHeaderTimePrefix(Snapshot, );
@defineDocumentHeaderNumber(Snapshot);
@defineNumeratedDefault(Snapshot, 'Аналитический отчет', 'ОО');
@defineDocumentHeaderDescription (Snapshot, 'Аналитический отчет');

fromDate 'Дата с' = DATA DATE (Snapshot) IN documentHeader;
toDate 'Дата по' = DATA DATE (Snapshot) IN documentHeader;

countDays 'Кол-во дней' (Snapshot s) = daysBetweenDates(toDate(s), fromDate(s)) + 1; 

startTime 'Время начала формирования' = DATA DATETIME (Snapshot) IN created;
finishTime 'Время окончания формирования' = DATA DATETIME (Snapshot) IN created;

WHEN SESSION SET(Snapshot o IS Snapshot) DO {
    IF o IS Snapshot AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS Snapshot AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

//-- Параметры отчета
GROUP evidence 'Признаки' : base;

isBatch 'По партиям' = DATA BOOLEAN (Snapshot) IN evidence;

isQuantity 'Количество' = DATA BOOLEAN (Snapshot) IN evidence;
isSum 'Сумма ' = DATA BOOLEAN (Snapshot) IN evidence;

isBalanceB 'Остаток начало' = DATA BOOLEAN (Snapshot) IN evidence;
isIn 'Приход' = DATA BOOLEAN (Snapshot) IN evidence;
isOut 'Расход' = DATA BOOLEAN (Snapshot) IN evidence;
isBalanceA 'Остаток конец' = DATA BOOLEAN (Snapshot) IN evidence;

isCost 'Себестоимость' = DATA BOOLEAN (Snapshot) IN evidence;
isVATSupplier 'НДС поставщика' = DATA BOOLEAN (Snapshot) IN evidence;
isCostVATSupplier 'Себестоимость с НДС' = DATA BOOLEAN (Snapshot) IN evidence;
isNetWeight 'Вес, кг' = DATA BOOLEAN (Snapshot) IN evidence;

@deriveDocumentSnapshotProperty(isBatch);
@deriveDocumentSnapshotProperty(isQuantity);
@deriveDocumentSnapshotProperty(isBalanceB);
@deriveDocumentSnapshotProperty(isIn);
@deriveDocumentSnapshotProperty(isOut);
@deriveDocumentSnapshotProperty(isBalanceA);
@deriveDocumentSnapshotProperty(isCost);
@deriveDocumentSnapshotProperty(isVATSupplier);
@deriveDocumentSnapshotProperty(isCostVATSupplier);
@deriveDocumentSnapshotProperty(isNetWeight);
@deriveDocumentSnapshotProperty(isSum);
//-- Sku на дату

TABLE skuStockSnapshotDate (Sku, Stock, Snapshot, DATE);  

isDate 'В динамике' = DATA BOOLEAN (Snapshot) IN evidence;
@deriveDocumentSnapshotProperty(isDate);

balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
sumB 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costB 'Себестоимость начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Sku sku, Stock stock, Snapshot snapshot, DATE date) (+) 
                                                                costB(sku, stock, snapshot, date);

inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
inSum 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
outSum 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
sumA 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costA 'Себестоимость конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Sku sku, Stock stock, Snapshot snapshot, DATE date) (+) 
                                                               costA(sku, stock, snapshot, date);
//------------------------------ Sku -------------------------------//

TABLE skuStockSnapshot (Sku, Stock, Snapshot);  
balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumB 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costB 'Себестоимость начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Sku sku, Stock stock, Snapshot snapshot) (+) 
                                                            costB(sku, stock, snapshot);
inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
inSum 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
outSum 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumA 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costA 'Себестоимость конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Sku sku, Stock stock, Snapshot snapshot) (+) 
                                                           costA(sku, stock, snapshot);                                 
//--По группе рекурсивно
TABLE skuGroupStockSnapshot (SkuGroup, Stock, Snapshot);   
  
//-- группа/склад       
balanceB 'Кол-во начало' (group, stock, snapshot) =
    GROUP SUM balanceB (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;
netWeightB 'Вес начало' (group, stock, snapshot) =
    GROUP SUM netWeightB (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;               
sumB 'Сумма начало' (group, stock, snapshot) =
    GROUP SUM sumB (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;    
costB 'Себестоимость начало' (group, stock, snapshot) =
    GROUP SUM costB (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;   
VATSupplierB 'НДС поставщика начало' (group, stock, snapshot) =
    GROUP SUM VATSupplierB (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;   
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(SkuGroup group, Stock stock, Snapshot snapshot) (+) 
                                                                 costB(group, stock, snapshot);                                           
    
inQuantity 'Кол-во приход' (group, stock, snapshot) =
    GROUP SUM inQuantity (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;
inNetWeight 'Вес приход' (group, stock, snapshot) =
    GROUP SUM inNetWeight (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;        
inSum 'Сумма приход' (group, stock, snapshot) =
    GROUP SUM inSum (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;  
           
outQuantity 'Кол-во расход' (group, stock, snapshot) =
    GROUP SUM outQuantity (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;
outNetWeight 'Вес расход' (group, stock, snapshot) =
    GROUP SUM outNetWeight (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;        
outSum 'Сумма расход' (group, stock, snapshot) =
    GROUP SUM outSum (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;             
    
balanceA 'Кол-во конец' (group, stock, snapshot) =
    GROUP SUM balanceA (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;
netWeightA 'Вес конец' (group, stock, snapshot) =
    GROUP SUM netWeightA (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;              
sumA 'Сумма конец' (group, stock, snapshot) =
    GROUP SUM sumA (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;  
costA 'Себестоимость конец' (group, stock, snapshot) =
    GROUP SUM costA (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;   
VATSupplierA 'НДС поставщика конец' (group, stock, snapshot) =
    GROUP SUM VATSupplierA (Sku sku, Stock stock, Snapshot snapshot) IF isParent(SkuGroup group, sku)
        BY group, stock, snapshot PERSISTENT;    
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(SkuGroup group, Stock stock, Snapshot snapshot) (+) 
                                                                costA(group, stock, snapshot);                   
                   
//-- группа          
balanceB 'Кол-во начало' (group, snapshot) =
    GROUP SUM balanceB (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot; 
netWeightB 'Вес начало' (group, snapshot) =
    GROUP SUM netWeightB (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot;         
sumB 'Сумма начало' (group, snapshot) =
    GROUP SUM sumB (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;   
costB 'Себестоимость начало' (group, snapshot) =
    GROUP SUM costB (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;            
VATSupplierB 'НДС поставщика начало' (group, snapshot) =
    GROUP SUM VATSupplierB (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;            
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(SkuGroup group, Snapshot snapshot) (+) 
                                                            costB(group, snapshot);     
inQuantity 'Кол-во приход' (group, snapshot) =
    GROUP SUM inQuantity (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot; 
inNetWeight 'Вес приход' (group, snapshot) =
    GROUP SUM inNetWeight (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot;         
inSum 'Сумма приход' (group, snapshot) =
    GROUP SUM inSum (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;      
 
outQuantity 'Кол-во расход' (group, snapshot) =
    GROUP SUM outQuantity (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot; 
outNetWeight 'Вес расход' (group, snapshot) =
    GROUP SUM outNetWeight (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot;        
outSum 'Сумма расход' (group, snapshot) =
    GROUP SUM outSum (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;      
    
balanceA 'Кол-во конец' (group, snapshot) =
    GROUP SUM balanceA (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot; 
netWeightA 'Вес конец' (group, snapshot) =
    GROUP SUM netWeightA (SkuGroup group, Stock stock, Snapshot snapshot)  BY group, snapshot;         
sumA 'Сумма конец' (group, snapshot) =
    GROUP SUM sumA (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot; 
costA 'Себестоимость конец' (group, snapshot) =
    GROUP SUM costA (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;                                   
VATSupplierA 'НДС поставщика конец' (group, snapshot) =
    GROUP SUM VATSupplierA (SkuGroup group, Stock stock, Snapshot snapshot) BY group, snapshot;                                    
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(SkuGroup group, Snapshot snapshot) (+) 
                                                           costA(group, snapshot); 
//--По складам
balanceB 'Кол-во начало' (stock, snapshot) =
    GROUP SUM balanceB (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot; 
netWeightB 'Вес начало' (stock, snapshot) =
    GROUP SUM netWeightB (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot;        
sumB 'Сумма начало' (stock, snapshot) =
    GROUP SUM sumB (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot;        
costB 'Себестоимость начало' (stock, snapshot) =
    GROUP SUM costB (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot; 
VATSupplierB 'НДС поставщика начало' (stock, snapshot) =
    GROUP SUM VATSupplierB (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot; 
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Stock stock, Snapshot snapshot) (+) 
                                                         costB(stock, snapshot);         
            
inQuantity 'Кол-во приход' (stock, snapshot) =
    GROUP SUM inQuantity (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot; 
inNetWeight 'Вес приход' (stock, snapshot) =
    GROUP SUM inNetWeight (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot;     
inSum 'Сумма приход' (stock, snapshot) =
    GROUP SUM inSum (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot;      
 
outQuantity 'Кол-во расход' (stock, snapshot) =
    GROUP SUM outQuantity (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot; 
outNetWeight 'Вес расход' (stock, snapshot) =
    GROUP SUM outNetWeight (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot;         
outSum 'Сумма расход' (stock, snapshot) =
    GROUP SUM outSum (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot;      
    
balanceA 'Кол-во конец' (stock, snapshot) =
    GROUP SUM balanceA (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot; 
netWeightA 'Вес конец' (stock, snapshot) =
    GROUP SUM netWeightA (Sku sku, Stock stock, Snapshot snapshot)  BY stock, snapshot;        
sumA 'Сумма конец' (stock, snapshot) =
    GROUP SUM sumA (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot;   
costA 'Себестоимость конец' (stock, snapshot) =
    GROUP SUM costA (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot;    
VATSupplierA 'НДС поставщика конец' (stock, snapshot) =
    GROUP SUM VATSupplierA (Sku sku, Stock stock, Snapshot snapshot) BY stock, snapshot;    
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Stock stock, Snapshot snapshot) (+) 
                                                        costA(stock, snapshot);         
//--По складам на дату        
balanceB 'Кол-во начало' (stock, snapshot, date) =
    GROUP SUM balanceB (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date; 
netWeightB 'Вес начало' (stock, snapshot, date) =
    GROUP SUM netWeightB (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date;             
sumB 'Сумма начало' (stock, snapshot, date) =
    GROUP SUM sumB (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;       
costB 'Себестоимость начало' (stock, snapshot, date) =
    GROUP SUM costB (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;    
VATSupplierB 'НДС поставщика начало' (stock, snapshot, date) =
    GROUP SUM VATSupplierB (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;     
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Stock stock, Snapshot snapshot, DATE date) (+) 
                                                             costB(stock, snapshot, date);         
    
inQuantity 'Кол-во приход' (stock, snapshot, date) =
    GROUP SUM inQuantity (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date; 
inNetWeight 'Вес приход' (stock, snapshot, date) =
    GROUP SUM inNetWeight (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date;     
inSum 'Сумма приход' (stock, snapshot, date) =
    GROUP SUM inSum (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;      
 
outQuantity 'Кол-во расход' (stock, snapshot, date) =
    GROUP SUM outQuantity (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date; 
outNetWeight 'Вес расход' (stock, snapshot, date) =
    GROUP SUM outNetWeight (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date;         
outSum 'Сумма расход' (stock, snapshot, date) =
    GROUP SUM outSum (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;      
    
balanceA 'Кол-во конец' (stock, snapshot, date) =
    GROUP SUM balanceA (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date; 
netWeightA 'Вес конец' (stock, snapshot, date) =
    GROUP SUM netWeightA (Sku sku, Stock stock, Snapshot snapshot, DATE date)  BY stock, snapshot, date;        
sumA 'Сумма конец' (stock, snapshot, date) =
    GROUP SUM sumA (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;  
costA 'Себестоимость конец' (stock, snapshot, date) =
    GROUP SUM costA (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;    
VATSupplierA 'НДС поставщика конец' (stock, snapshot, date) =
    GROUP SUM VATSupplierA (Sku sku, Stock stock, Snapshot snapshot, DATE date) BY stock, snapshot, date;     
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Stock stock, Snapshot snapshot, DATE date) (+) 
                                                             costA(stock, snapshot, date);   
                                                                   
nameBalanceQB (Stock st) = CONCAT ' ', name(st), ' (кол-во начало)';
nameNetWeightB (Stock st) = CONCAT ' ', name(st), ' (вес начало)';
nameSumB (Stock st) = CONCAT ' ', name(st), ' (сумма начало)';
nameCostB (Stock st) = CONCAT ' ', name(st), ' (себестоимость начало)';
nameCostVATSupplierB (Stock st) = CONCAT ' ', name(st), ' (с/с с НДС начало)';
nameVATSupplierB (Stock st) = CONCAT ' ', name(st), ' (НДС поставщика начало)';
nameInQuantity (Stock st) = CONCAT ' ', name(st), ' (кол-во приход)';
nameInNetWeight (Stock st) = CONCAT ' ', name(st), ' (вес приход)';
nameInSum(Stock st) = CONCAT ' ', name(st), ' (сумма приход)';        
nameOutQuantity (Stock st) = CONCAT ' ', name(st), ' (кол-во расход)';
nameOutNetWeight (Stock st) = CONCAT ' ', name(st), ' (вес расход)';
nameOutSum (Stock st) = CONCAT ' ', name(st), ' (сумма расход)';
nameBalanceQA (Stock st) = CONCAT ' ', name(st), ' (кол-во конец)';
nameNetWeightA (Stock st) = CONCAT ' ', name(st), ' (вес конец)';
nameSumA (Stock st) = CONCAT ' ', name(st), ' (сумма конец)';
nameCostA (Stock st) = CONCAT ' ', name(st), ' (себестоимость конец)';   
nameCostVATSupplierA (Stock st) = CONCAT ' ', name(st), ' (с/с с НДС конец)'; 
nameVATSupplierA (Stock st) = CONCAT ' ', name(st), ' (НДС поставщика конец)';
    
//------------------------------ Batch -------------------------------//

TABLE batchStockSnapshot (Batch, Stock, Snapshot);  
balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumB 'Себестоимость начало' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
sumVATSupplierB 'С/С с НДС начало' = VATSupplierB(Batch batch, Stock stock, Snapshot snapshot) (+)
                                                             sumB(batch, stock, snapshot);

inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
inSum 'Себестоимость приход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
outSum 'Себестоимость расход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumA 'Себестоимость конец' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
sumVATSupplierA 'С/С с НДС конец' = VATSupplierA(Batch batch, Stock stock, Snapshot snapshot) (+)
                                                             sumA(batch, stock, snapshot);

//-- По поставщикам
balanceBBatch 'Кол-во начало' (supplier, snapshot) =
    GROUP SUM balanceB (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;
netWeightBBatch 'Вес начало' (supplier, snapshot) =
    GROUP SUM netWeightB (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;        
sumBBatch 'Себестоимость начало' (supplier, snapshot) =
    GROUP SUM sumB (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot; 
VATSupplierBBatch 'НДС поставщика начало' (supplier, snapshot) =
    GROUP SUM VATSupplierB (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;     
sumVATSupplierBBatch 'С/С с НДС начало' = VATSupplierBBatch(LegalEntity supplier, Snapshot snapshot) (+)
                                                                sumBBatch(supplier, snapshot);   
                                                                 
inQuantityBatch 'Кол-во приход' (supplier, snapshot) =
    GROUP SUM inQuantity (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;
inNetWeightBatch 'Вес приход' (supplier, snapshot) =
    GROUP SUM inNetWeight (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;        
inSumBatch 'Себестоимость приход' (supplier, snapshot) =
    GROUP SUM inSum (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;     
 
outQuantityBatch 'Кол-во расход' (supplier, snapshot) =
    GROUP SUM outQuantity (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;
outNetWeightBatch 'Вес расход' (supplier, snapshot) =
    GROUP SUM outNetWeight (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;      
outSumBatch 'Себестоимость расход' (supplier, snapshot) =
    GROUP SUM outSum (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;     
    
balanceABatch 'Кол-во конец' (supplier, snapshot) =
    GROUP SUM balanceA (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;
netWeightABatch 'Вес конец' (supplier, snapshot) =
    GROUP SUM netWeightA (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;        
sumABatch 'Себестоимость конец' (supplier, snapshot) =
    GROUP SUM sumA (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;   
VATSupplierABatch 'НДС поставщика конец' (supplier, snapshot) =
    GROUP SUM VATSupplierA (Batch batch, Stock stock, Snapshot snapshot) BY supplier(batch), snapshot;
sumVATSupplierABatch 'С/С с НДС конец' = VATSupplierABatch(LegalEntity supplier, Snapshot snapshot) (+)
                                                               sumABatch(supplier, snapshot);           
       
//-- По складу поставщика
balanceBBatchSupplier 'Кол-во начало' (supplier, snapshot) =
    GROUP SUM balanceB (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;
netWeightBBatchSupplier 'Вес начало' (supplier, snapshot) =
    GROUP SUM netWeightB (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;        
sumBBatchSupplier 'Себестоимость начало' (supplier, snapshot) =
    GROUP SUM sumB (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot; 
VATSupplierBBatchSupplier 'НДС поставщика начало' (supplier, snapshot) =
    GROUP SUM VATSupplierB (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;     
sumVATSupplierBBatchSupplier 'С/С с НДС начало' = VATSupplierBBatchSupplier(Stock supplier, Snapshot snapshot) (+)
                                                                sumBBatchSupplier(supplier, snapshot);   
                                                                 
inQuantityBatchSupplier 'Кол-во приход' (supplier, snapshot) =
    GROUP SUM inQuantity (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;
inNetWeightBatchSupplier 'Вес приход' (supplier, snapshot) =
    GROUP SUM inNetWeight (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;        
inSumBatchSupplier 'Себестоимость приход' (supplier, snapshot) =
    GROUP SUM inSum (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;     
 
outQuantityBatchSupplier 'Кол-во расход' (supplier, snapshot) =
    GROUP SUM outQuantity (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;
outNetWeightBatchSupplier 'Вес расход' (supplier, snapshot) =
    GROUP SUM outNetWeight (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;      
outSumBatchSupplier 'Себестоимость расход' (supplier, snapshot) =
    GROUP SUM outSum (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;     
    
balanceABatchSupplier 'Кол-во конец' (supplier, snapshot) =
    GROUP SUM balanceA (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;
netWeightABatchSupplier 'Вес конец' (supplier, snapshot) =
    GROUP SUM netWeightA (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;        
sumABatchSupplier 'Себестоимость конец' (supplier, snapshot) =
    GROUP SUM sumA (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;   
VATSupplierABatchSupplier 'НДС поставщика конец' (supplier, snapshot) =
    GROUP SUM VATSupplierA (Batch batch, Stock stock, Snapshot snapshot) BY supplierStock(batch), snapshot;
sumVATSupplierABatchSupplier 'С/С с НДС конец' = VATSupplierABatchSupplier(Stock supplier, Snapshot snapshot) (+)
                                                               sumABatchSupplier(supplier, snapshot);       
    
//-- Выбор складов
TABLE snapshotStockGroup (Snapshot, StockGroup); 
TABLE snapshotStock (Snapshot, Stock);

allStockInclude 'Вкл' = DATA BOOLEAN (Snapshot);
dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, StockGroup);
dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, Stock);

levelParentInclude (snapshot, stockGroup) = GROUP MIN level(StockGroup stockGroup, StockGroup parent) IF dataInclude(Snapshot snapshot, parent)
                                                              BY snapshot, stockGroup PERSISTENT;    
nearestParentInclude (Snapshot snapshot, StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(snapshot, stockGroup));
nearestInclude (Snapshot snapshot, StockGroup stockGroup) = dataInclude(snapshot, nearestParentInclude (snapshot, stockGroup));

include 'Вкл' (Snapshot snapshot, StockGroup stockGroup) =
    OVERRIDE allStockInclude(snapshot) IF stockGroup IS StockGroup,
             nearestInclude (snapshot, stockGroup), 
             dataInclude(snapshot, stockGroup) PERSISTENT;

include 'Вкл' (Snapshot snapshot, Stock stock) =
    (OVERRIDE include(snapshot, stockGroup(stock)),
             dataInclude(snapshot, stock)) IF isCompany(stock) PERSISTENT;
countIncludeStocks= GROUP SUM 1 IF include(Snapshot r,Stock st) BY r;

deleteIncludeStocks 'Сбросить отмеченные'(Snapshot r) = ACTION {
    allStockInclude (r) <- NULL;
    dataInclude(r,StockGroup g) <- NULL;
    dataInclude (r,Stock st) <- NULL;
};
             
@defineBackgroundNearestBoolean(allStockInclude, include, snapshot, stock, nearestInclude, isCompany);

                      
countIncludeStock  (snapshot) = GROUP SUM 1 IF include(Snapshot snapshot, Stock stock) BY snapshot;      


nameIncludeStockGroups 'Группы складов (все)' (document)= 
    GROUP CONCAT name(StockGroup stockGroup) IF dataInclude(Snapshot document, stockGroup), ', ' 
    BY document 
    ORDER stockGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;

nameIncludeStocks 'Склады (все)' (document)= 
    GROUP CONCAT name(Stock stock) IF dataInclude(Snapshot document, stock), ', ' 
    BY document 
    ORDER stock
    MINCHARWIDTH 20 PREFCHARWIDTH 40;
    
nameIncludeStockGroupsStock 'Группы складов, склады (все)' (Snapshot document) = CONCAT '; ', nameIncludeStockGroups(document), 
                                                                                             nameIncludeStocks(document) MINCHARWIDTH 20 PREFCHARWIDTH 40;   
    
allStockInclude (Snapshot o) <- allStockInclude(snapshotType(o))
    WHEN CHANGED(snapshotType(o));  
dataInclude (Snapshot o,StockGroup g) <- dataInclude(snapshotType(o),g) IF g IS StockGroup
    WHEN CHANGED(snapshotType(o));           
dataInclude (Snapshot o,Stock g) <- dataInclude(snapshotType(o),g) IF g IS Stock
    WHEN CHANGED(snapshotType(o));    
            
//-- Выбор групп товара  
TABLE snapshotSkuGroup (Snapshot, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, SkuGroup);

levelParentInclude (snapshot, skuGroup) = GROUP MIN level(SkuGroup skuGroup, SkuGroup parent) IF dataInclude(Snapshot snapshot, parent)
                                                              BY snapshot, skuGroup PERSISTENT;    
nearestParentInclude (Snapshot snapshot, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(snapshot, skuGroup));
nearestInclude (Snapshot snapshot, SkuGroup skuGroup) = dataInclude(snapshot, nearestParentInclude (snapshot, skuGroup));

include 'Вкл' (Snapshot snapshot, SkuGroup skuGroup) =
    OVERRIDE nearestInclude (snapshot, skuGroup), 
             dataInclude(snapshot, skuGroup) PERSISTENT;    
                      
include 'Вкл' (Snapshot snapshot, Sku sku) = include(snapshot, skuGroup(sku));  
                    
countIncludeSku 'Вкл' (snapshot) = GROUP SUM 1 IF include(Snapshot snapshot, Sku sku) BY snapshot;                    

nameIncludeSkuGroups 'Группы товаров (все)' (document)= 
    GROUP CONCAT name(SkuGroup skuGroup) IF dataInclude(Snapshot document, skuGroup), ', ' 
    BY document 
    ORDER skuGroup
    MINCHARWIDTH 20 PREFCHARWIDTH 40;
    
dataInclude (Snapshot o,SkuGroup g) <- dataInclude(snapshotType(o),g) IF g IS SkuGroup
    WHEN CHANGED(snapshotType(o));  

deleteIncludeSkuGroups 'Сбросить отмеченные'(Snapshot r) = ACTION {
    dataInclude(r,SkuGroup g) <- NULL;
};
    
//------------------------------- ACTION -------------------------------//   
overTakeFromTo= ACTION ABSTRACT LIST (Snapshot, DATE, DATE); 
overTakeSkuFromTo= ACTION ABSTRACT LIST (Snapshot, DATE, DATE);
overTakeBatchFromTo= ACTION ABSTRACT LIST (Snapshot, DATE, DATE);

status 'Статус отчета' (Snapshot snapshot) = CASE
                                          WHEN finishTime(snapshot) THEN 'Сформирован'
                                          WHEN snapshot IS Snapshot THEN 'Не сформирован'
                                          MINCHARWIDTH 10 PREFCHARWIDTH 15
                                      ;
backgroundStatus 'Цвет' (Snapshot snapshot) =  CASE                                             
                                          WHEN finishTime(snapshot) THEN RGB(212,255,212)
                                          WHEN snapshot IS Snapshot THEN RGB(255,200,216)
                                      ;
//overNetWeightSkuBatch (batch)= OVERRIDE overNetWeightSku(skuBatch(batch)), (sumNetWeightInvoiceDetail(invoiceDetailBatch(batch))/(quantityInvoiceDetail(invoiceDetailBatch(batch)) IF quantityInvoiceDetail(invoiceDetailBatch(batch))!=0));
takeFromTo(Snapshot snapshot, DATE dateFrom, DATE dateTo)  = ACTION {
    apply();  
    startTime(snapshot) <- currentDateTime();   
    IF countIncludeSku(snapshot) AND countIncludeStock(snapshot) THEN {      
        IF isQuantity(snapshot) THEN {         
            
            IF isBalanceA(snapshot) THEN {
                balanceA(Sku sku, Stock stock, snapshot) <- NULL;
                balanceA(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(sku, stock, dateTo)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceA(sku, stock, dateTo);
            }
                    
            IF isIn(snapshot) THEN {            
                inQuantity(Sku sku, Stock stock, snapshot) <- NULL;
                inQuantity(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumIn(sku, stock, dateFrom, dateTo)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumIn(sku, stock, dateFrom, dateTo);
            }

            IF isOut(snapshot) THEN { 
                outQuantity(Sku sku, Stock stock, snapshot) <- NULL;
                outQuantity(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumOut(sku, stock, dateFrom, dateTo)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumOut(sku, stock, dateFrom, dateTo);
            }
            
            IF isBalanceB(snapshot) THEN {
                balanceB(Sku sku, Stock stock, snapshot) <- NULL;
                IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN
                    balanceB(Sku sku, Stock stock, snapshot) <- (balanceA(sku, stock, snapshot) (-) inQuantity(sku, stock, snapshot) (+) outQuantity(sku, stock, snapshot))
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND (balanceA(sku, stock, snapshot) (-) inQuantity(sku, stock, snapshot) (+) outQuantity(sku, stock, snapshot))
                ELSE 
                    balanceB(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(sku, stock, dateFrom)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceB(sku, stock, dateFrom);
            }
        }
        IF isSum(snapshot) THEN {         

            IF isBalanceA(snapshot) THEN {
                sumA(Sku sku, Stock stock, snapshot) <- NULL;
                sumA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumA(sku, stock, dateTo)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumA(sku, stock, dateTo);
            }

            IF isIn(snapshot) THEN { 
                inSum(Sku sku, Stock stock, snapshot) <- NULL;
                inSum(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumIn(sku, stock, dateFrom, dateTo)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumIn(sku, stock, dateFrom, dateTo);
            }

            IF isOut(snapshot) THEN {
                outSum(Sku sku, Stock stock, snapshot) <- NULL;
                outSum(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumOut(sku, stock, dateFrom, dateTo)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumOut(sku, stock, dateFrom, dateTo);
            }
            
            IF isBalanceB(snapshot) THEN {
                sumB(Sku sku, Stock stock, snapshot) <- NULL;
                IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN
                    sumB(Sku sku, Stock stock, snapshot) <- (sumA(sku, stock, snapshot) (-) inSum(sku, stock, snapshot) (+) outSum(sku, stock, snapshot))
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND (sumA(sku, stock, snapshot) (-) inSum(sku, stock, snapshot) (+) outSum(sku, stock, snapshot))
                ELSE
                    sumB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumB(sku, stock, dateFrom)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumB(sku, stock, dateFrom);
            }
                        
        }   
        IF isCost(snapshot) THEN {
            costA(Sku sku, Stock stock, snapshot) <- NULL;
            costA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumA(sku, stock, dateTo)) 
                WHERE include(snapshot, stock) AND include(snapshot, sku) AND isBalanceA(snapshot) AND costSumA(sku, stock, dateTo);
                               
            costB(Sku sku, Stock stock, snapshot) <- NULL;
            costB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumB(sku, stock, dateFrom)) 
                WHERE include(snapshot, stock) AND include(snapshot, sku) AND isBalanceB(snapshot) AND costSumB(sku, stock, dateFrom);        
        }      
        IF isVATSupplier(snapshot) THEN {
            VATSupplierA(Sku sku, Stock stock, snapshot) <- NULL;
            VATSupplierA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumA(sku, stock, dateTo)*valueVAT(sku,country(stock),dateTo)/100) 
                WHERE include(snapshot, stock) AND include(snapshot, sku) AND  isBalanceA(snapshot) AND costSumA(sku, stock, dateTo);               
            VATSupplierB(Sku sku, Stock stock, snapshot) <- NULL;
            VATSupplierB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumB(sku, stock, dateFrom)*valueVAT(sku,country(stock),dateTo)/100) 
                WHERE include(snapshot, stock) AND include(snapshot, sku) AND isBalanceB(snapshot) AND costSumB(sku, stock, dateFrom);        
        } 
        IF isNetWeight(snapshot) THEN {         
            
            IF isBalanceA(snapshot) THEN {
                netWeightA(Sku sku, Stock stock, snapshot) <- NULL;
                netWeightA(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(sku, stock, dateTo)*overNetWeight(sku)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceA(sku, stock, dateTo);
            }
                    
            IF isIn(snapshot) THEN {            
                inNetWeight(Sku sku, Stock stock, snapshot) <- NULL;
                inNetWeight(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumIn(sku, stock, dateFrom, dateTo)*overNetWeight(sku)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumIn(sku, stock, dateFrom, dateTo);
            }

            IF isOut(snapshot) THEN {
                outNetWeight(Sku sku, Stock stock, snapshot) <- NULL;
                outNetWeight(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumOut(sku, stock, dateFrom, dateTo)*overNetWeight(sku)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumOut(sku, stock, dateFrom, dateTo);
            }
            
            IF isBalanceB(snapshot) THEN {
                netWeightB(Sku sku, Stock stock, snapshot) <- NULL;
                netWeightB(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(sku, stock, dateFrom)*overNetWeight(sku)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceB(sku, stock, dateFrom);
            }
        }                     
                     
              
        IF isDate(snapshot) THEN {  
            IF isQuantity(snapshot) THEN {
                inQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
                inQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityIn(sku, stock, date)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND quantityIn(sku, stock, date) AND isIn(snapshot);
        
                outQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
                outQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityOut(sku, stock, date)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND quantityOut(sku, stock, date) AND isOut(snapshot);
            }               
            IF isSum(snapshot) THEN { 
                inSum(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
                inSum(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](sumIn(sku, stock, date)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND sumIn(sku, stock, date) AND isOut(snapshot);
        
                outSum(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
                outSum(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](sumOut(sku, stock, date)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND sumOut(sku, stock, date) AND isOut(snapshot);              
            }               
            IF isNetWeight(snapshot) THEN { 
                inNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
                inNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityIn(sku, stock, date)*overNetWeight(sku)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND quantityIn(sku, stock, date) AND isIn(snapshot);
        
                outNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
                outNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityOut(sku, stock, date)*overNetWeight(sku)) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                        AND date <= (dateTo AS DATE) AND quantityOut(sku, stock, date) AND isOut(snapshot);
            }        
            
            LOCAL dateCur = DATE();           
            dateCur() <- dateFrom;           
            WHILE dateCur() <= dateTo DO { // сделано так, иначе происходит зацикливание
                balanceB(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();
                balanceB(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](balanceB(sku, stock, dateCur())) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() 
                        AND isQuantity(snapshot) AND isBalanceB(snapshot) AND balanceB(sku, stock, dateCur());
                
                sumB(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();        
                sumB(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](sumB(sku, stock, dateCur())) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() 
                        AND isSum(snapshot) AND isBalanceB(snapshot) AND sumB(sku, stock, dateCur());
                
                balanceA(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur(); 
                balanceA(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](balanceA(sku, stock, dateCur())) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() 
                        AND isQuantity(snapshot) AND isBalanceA(snapshot) AND balanceA(sku, stock, dateCur());
                sumA(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();        
                sumA(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](sumA(sku, stock, dateCur())) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() 
                        AND isSum(snapshot) AND isBalanceA(snapshot) AND sumA(sku, stock, dateCur());
                          
                IF isNetWeight(snapshot) THEN {
                    netWeightB(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur(); 
                    netWeightB(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](balanceB(sku, stock, dateCur())*overNetWeight(sku)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() AND isBalanceB(snapshot) AND balanceB(sku, stock, dateCur());
                    
                    netWeightA(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();   
                    netWeightA(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](balanceA(sku, stock, dateCur())*overNetWeight(sku)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() AND isBalanceA(snapshot) AND balanceA(sku, stock, dateCur());                            
                            
                }          
                                
                IF isCost(snapshot) THEN {
                    costB(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();
                    costB(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](costSumB(sku, stock, dateCur())) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() AND costSumB(sku, stock, date)
                            AND isBalanceB(snapshot);   
                    
                    costA(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();
                    costA(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](costSumA(sku, stock, dateCur())) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() AND costSumA(sku, stock, date)
                            AND isBalanceA(snapshot);                                             
                
                } 
                IF isVATSupplier(snapshot) THEN {
                    VATSupplierB(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();
                    VATSupplierB(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](costSumB(sku, stock, dateCur())*valueVAT(sku,country(stock),dateCur())/100) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() AND costSumB(sku, stock, date)
                            AND isBalanceB(snapshot);   
                            
                    VATSupplierA(Sku sku, Stock stock, snapshot, DATE date) <- NULL WHERE date == dateCur();        
                    VATSupplierA(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](costSumA(sku, stock, dateCur())*valueVAT(sku,country(stock),dateCur())/100) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND date == dateCur() AND costSumA(sku, stock, date)
                            AND isBalanceA(snapshot);                                             
                
                }                                                                                           

                dateCur() <- sum(dateCur(), 1);
            }                    
        }               
                
        overTakeSkuFromTo(snapshot, dateFrom, dateTo);      
                     
        IF isBatch(snapshot) THEN {   
            IF isQuantity(snapshot) THEN {
                IF isBalanceA(snapshot) THEN
                    balanceA(Batch batch, Stock stock, snapshot) <- NULL;
                    balanceA(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(batch, stock, dateTo)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                
                IF isIn(snapshot) THEN
                    inQuantity(Batch batch, Stock stock, snapshot) <- NULL;
                    inQuantity(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costInBalance(batch, stock, dateFrom, dateTo)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costInBalance(batch, stock, dateFrom, dateTo);
        
                IF isOut(snapshot) THEN
                    outQuantity(Batch batch, Stock stock, snapshot) <- NULL;
                    outQuantity(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costOutBalance(batch, stock, dateFrom, dateTo)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costOutBalance(batch, stock, dateFrom, dateTo);

                IF isBalanceB(snapshot) THEN
                    balanceB(Batch batch, Stock stock, snapshot) <- NULL;
                    IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN
                        balanceB(Batch batch, Stock stock, snapshot) <- (balanceA(batch, stock, snapshot) (-) inQuantity(batch, stock, snapshot) (+) outQuantity(batch, stock, snapshot))
                            WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND (balanceA(batch, stock, snapshot) (-) inQuantity(batch, stock, snapshot) (+) outQuantity(batch, stock, snapshot))
                    ELSE
                        balanceB(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(batch, stock, dateFrom)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
            }
            IF isSum(snapshot) THEN {  
                IF isIn(snapshot) THEN
                    inSum(Batch batch, Stock stock, snapshot) <- NULL;
                    inSum(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](costSumInBalance(batch, stock, dateFrom, dateTo)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costSumInBalance(batch, stock, dateFrom, dateTo);
        
                IF isOut(snapshot) THEN
                    outSum(Batch batch, Stock stock, snapshot) <- NULL;
                    outSum(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](costSumOutBalance(batch, stock, dateFrom, dateTo)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costSumOutBalance(batch, stock, dateFrom, dateTo);               
            
                IF isBalanceA(snapshot) THEN
                    sumA(Batch batch, Stock stock, snapshot) <- NULL;
                    sumA(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceA(batch, stock, dateTo)*cost(batch)) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);                  
                IF isBalanceB(snapshot) THEN
                    sumB(Batch batch, Stock stock, snapshot) <- NULL;
                    IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN
                        sumB(Batch batch, Stock stock, snapshot) <- (sumA(batch, stock, snapshot) (-) inSum(batch, stock, snapshot) (+) outSum(batch, stock, snapshot))
                            WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND (sumA(batch, stock, snapshot) (-) inSum(batch, stock, snapshot) (+) outSum(batch, stock, snapshot))
                    ELSE
                        sumB(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceB(batch, stock, dateFrom)*cost(batch)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);             
            }  
            IF isVATSupplier(snapshot) THEN {
                VATSupplierA(Batch batch, Stock stock, snapshot) <- NULL;
                VATSupplierA(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceA(batch, stock, dateTo)*cost(batch)*valueVAT(sku(batch),country(stock),dateTo)/100) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND isBalanceA(snapshot) AND balanceA(batch, stock, dateTo); 
                    
                VATSupplierB(Batch batch, Stock stock, snapshot) <- NULL;    
                VATSupplierB(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceB(batch, stock, dateFrom)*cost(batch)*valueVAT(sku(batch),country(stock),dateTo)/100) 
                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND isBalanceB(snapshot) AND balanceB(batch, stock, dateFrom);                                   
            }
            //-- todo: может надо брать вес от инвойса для партии 
            IF isNetWeight(snapshot) THEN {
                IF isBalanceA(snapshot) THEN
                    netWeightA(Batch batch, Stock stock, snapshot) <- NULL;
                    netWeightA(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(batch, stock, dateTo)*overNetWeight(sku(batch))) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                
                IF isIn(snapshot) THEN
                    inNetWeight(Batch batch, Stock stock, snapshot) <- NULL;
                    inNetWeight(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costInBalance(batch, stock, dateFrom, dateTo)*overNetWeight(sku(batch))) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costInBalance(batch, stock, dateFrom, dateTo);
        
                IF isOut(snapshot) THEN
                    outNetWeight(Batch batch, Stock stock, snapshot) <- NULL;
                    outNetWeight(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costOutBalance(batch, stock, dateFrom, dateTo)*overNetWeight(sku(batch))) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costOutBalance(batch, stock, dateFrom, dateTo);

                IF isBalanceB(snapshot) THEN
                    netWeightB(Batch batch, Stock stock, snapshot) <- NULL;
                    netWeightB(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(batch, stock, dateFrom)*overNetWeight(sku(batch))) 
                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
            }                                 
                                 
            overTakeBatchFromTo(snapshot, dateFrom, dateTo);     
        }         
        overTakeFromTo(snapshot, dateFrom, dateTo);
        
        finishTime(snapshot) <- currentDateTime();      
        apply(); 
    } ELSE {
        MESSAGE 'Не выбраны группы товаров или склады для отчета';
    }           
};

takeData 'Сформировать отчет' (Snapshot snapshot) = ACTION { 
    IF finishTime(snapshot) THEN {
        ASK 'Вы действительно хотите выполнить действие "Сформировать отчет?"' DO            
            takeFromTo(snapshot, fromDate(snapshot), toDate(snapshot));
    } ELSE {
        takeFromTo(snapshot, fromDate(snapshot), toDate(snapshot));    
    }    
}

filterMove (Sku s, Stock st, Snapshot r) = balanceB(s,st,r) OR balanceA(s,st,r) OR 
                                        inQuantity(s,st,r) OR outQuantity(s,st,r) OR
                                        sumB(s,st,r) OR sumA(s,st,r) OR 
                                        inSum(s,st,r) OR outSum(s,st,r)PERSISTENT;
                                        
filterMove (Sku s, Stock st, Snapshot r, DATE d) = balanceB(s,st,r,d) OR balanceA(s,st,r,d) OR 
                                        inQuantity(s,st,r,d) OR outQuantity(s,st,r,d) OR
                                        sumB(s,st,r,d) OR sumA(s,st,r,d) OR 
                                        inSum(s,st,r,d) OR outSum(s,st,r,d) PERSISTENT;  
                                        
filterMove (r, d) = GROUP SUM 1 IF filterMove (Sku s, Stock st, Snapshot r, DATE d) BY r, d;                                        
filterMove (st, r, d) = GROUP SUM 1 IF filterMove (Sku s, Stock st, Snapshot r, DATE d) BY st, r, d;                                       
                                                                              
filterMove (Batch bt,Stock ss,Snapshot r)= balanceB(bt,ss,r) OR balanceA(bt,ss,r) OR 
                                        inQuantity(bt,ss,r) OR outQuantity(bt,ss,r) OR 
                                        sumB(bt,ss,r) OR sumA(bt,ss,r) OR 
                                        inSum(bt,ss,r) OR outSum(bt,ss,r) PERSISTENT;

//-- SHOWIF
isQuantityBalanceB = isQuantity(Snapshot snapshot) AND isBalanceB(snapshot);
isQuantityIn = isQuantity(Snapshot snapshot) AND isIn(snapshot);
isQuantityOut = isQuantity(Snapshot snapshot) AND isOut(snapshot);
isQuantityBalanceA = isQuantity(Snapshot snapshot) AND isBalanceA(snapshot);

isSumBalanceB = isSum(Snapshot snapshot) AND isBalanceB(snapshot);
isNetWeightBalanceB = isNetWeight(Snapshot snapshot) AND isBalanceB(snapshot);
isSumIn = isSum(Snapshot snapshot) AND isIn(snapshot);
isNetWeightIn = isNetWeight(Snapshot snapshot) AND isIn(snapshot);
isSumOut = isSum(Snapshot snapshot) AND isOut(snapshot);
isNetWeightOut = isNetWeight(Snapshot snapshot) AND isOut(snapshot);
isSumBalanceA = isSum(Snapshot snapshot) AND isBalanceA(snapshot);
isNetWeightBalanceA = isNetWeight(Snapshot snapshot) AND isBalanceA(snapshot);

isCostBalanceB =  isCost(Snapshot snapshot) AND isBalanceB(snapshot);
isCostVATSupplierBalanceB =  isCostVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot);
isCostBalanceA = isCost(Snapshot snapshot) AND isBalanceA(snapshot);
isCostVATSupplierBalanceA = isCostVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot);

isVATSupplierBalanceB = isVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot);
isVATSupplierBalanceA = isVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot);

//--
isQuantityBalanceBBatch = isQuantity(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isQuantityInBatch = isQuantity(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isQuantityOutBatch = isQuantity(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isQuantityBalanceABatch = isQuantity(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);

isSumBalanceBBatch = isSum(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isCostVATSupplierBalanceBBatch = isCostVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);

isCostBalanceBBatch = isCost(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isNetWeightBalanceBBatch = isNetWeight(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isSumInBatch = isSum(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isCostInBatch = isCost(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isNetWeightInBatch = isNetWeight(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isSumOutBatch = isSum(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isCostOutBatch = isCost(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isNetWeightOutBatch = isNetWeight(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isSumBalanceABatch = isSum(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);
isCostVATSupplierBalanceABatch = isCostVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);

isCostBalanceABatch = isCost(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);
isNetWeightBalanceABatch = isNetWeight(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);

isBalanceBBatchVATSupplier = isBalanceB(Snapshot snapshot) AND isBatch(snapshot) AND isVATSupplier(snapshot);
isBalanceABatchVATSupplier = isBalanceA(Snapshot snapshot) AND isBatch(snapshot) AND isVATSupplier(snapshot);
//--
isQuantityBalanceBDate = isQuantity(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isQuantityInDate = isQuantity(Snapshot snapshot) AND isIn(snapshot) AND isDate(snapshot);
isQuantityOutDate = isQuantity(Snapshot snapshot) AND isOut(snapshot) AND isDate(snapshot);
isQuantityBalanceADate = isQuantity(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isSumBalanceBDate = isSum(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isNetWeightBalanceBDate = isNetWeight(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isSumInDate = isSum(Snapshot snapshot) AND isIn(snapshot) AND isDate(snapshot);
isNetWeightInDate = isNetWeight(Snapshot snapshot) AND isIn(snapshot) AND isDate(snapshot);
isSumOutDate = isSum(Snapshot snapshot) AND isOut(snapshot) AND isDate(snapshot);
isNetWeightOutDate = isNetWeight(Snapshot snapshot) AND isOut(snapshot) AND isDate(snapshot);
isSumBalanceADate = isSum(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);
isNetWeightBalanceADate= isNetWeight(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isCostBalanceBDate = isCost(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot) ;
isCostBalanceADate = isCost(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isCostVATSupplierBalanceBDate = isCostVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot) ;
isCostVATSupplierBalanceADate = isCostVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isVATSupplierBalanceBDate = isVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isVATSupplierBalanceADate = isVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

TABLE snapshotTypeDOW(SnapshotType, DOW);
in 'Вкл.' = DATA BOOLEAN (SnapshotType, DOW);
countDOWsIn = GROUP SUM 1 IF in(SnapshotType t,DOW d) BY t;
oneReport 'Отдельный отчет для склада' = DATA BOOLEAN (SnapshotType);
idReport 'Идентификатор для планировщика' = DATA STRING[100] (SnapshotType);
countDays 'Количество дней' = DATA INTEGER (SnapshotType);
countDaysDelete 'Количество дней для хранения отчетов' = DATA INTEGER (SnapshotType);


TABLE snapshotTypeDays(SnapshotType, INTEGER);
inDays 'Вкл.' = DATA BOOLEAN (SnapshotType, INTEGER);
countDaysIn = GROUP SUM 1 IF inDays(SnapshotType t,INTEGER i) BY t;

daysIn 'Числа'  = GROUP CONCAT VARSTRING[2](INTEGER i) IF inDays(SnapshotType t,i), ', '
    BY t
    ORDER i MINCHARWIDTH 10 PREFCHARWIDTH 10;
    
DOWsIn 'Дни недели'  = GROUP CONCAT staticCaption(DOW DOW) IF in(SnapshotType t,DOW), ', '
    BY t
    ORDER number(DOW) MINCHARWIDTH 15 PREFCHARWIDTH 30;    
    
EXTEND FORM snapshotTypes
    PROPERTIES READONLY AFTER name(t) DOWsIn(t), daysIn(t)
;

EXTEND FORM snapshotType
    OBJECTS dow = DOW    
    PROPERTIES number(dow) READONLY, staticCaption(dow) READONLY, in(t,dow)
    PROPERTIES(t) oneReport, countDays, countDaysDelete, idReport
    ORDER BY number(dow)
    
    OBJECTS i = INTEGER    
    PROPERTIES OBJVALUE(i) READONLY , inDays(t,i)
    FILTERS iterate(i,1,31)
    
;
DESIGN snapshotType {
    NEW paramContainerTab BEFORE functions.box{
        fill = 1;
        type = TABBED;
        MOVE select {caption = 'Выбор';}
        NEW createContainer {
            caption = 'Автоматическое формирование';
            NEW createContainer1 {
                type = CONTAINERH;
                MOVE PROPERTY (oneReport(t));
                MOVE PROPERTY (countDays(t));                
                MOVE PROPERTY (idReport(t));
                MOVE PROPERTY (countDaysDelete(t));
            }
            NEW tabContainer {
                fill = 1;
                type = SPLITH;
                MOVE dow.box;
                MOVE i.box {caption = 'Числа месяца';}
            }
        }         
    }
}
   
in (SnapshotType type, DATE date) = ((countDOWsIn(type) AND in(type, extractDOW(date))) OR (type IS SnapshotType AND date IS DATE AND NOT countDOWsIn(type))) AND
                              ((countDaysIn(type) AND inDays(type, extractDay(date))) OR (type IS SnapshotType AND date IS DATE AND NOT countDaysIn(type)));            
  
createSnapshotString 'Создать отчет'(STRING[100] string, DATE dateTo) = ACTION NEWSESSION { 
    FOR idReport(SnapshotType type) == string  DO {
        IF in(type, currentDate()) AND countDays(type) THEN {     

            IF NOT oneReport(type)   THEN {

                FOR NEW r = Snapshot DO {                    
                    fromDate(r) <- subtract(dateTo,countDays(type)-1);
                    toDate(r) <- dateTo;
                    snapshotType(r) <- type;
                    takeFromTo(r, fromDate(r), toDate(r));                
                }


            } ELSE {
                FOR include(type, Stock stock) NEW r = Snapshot DO {
                    fromDate(r) <- subtract(dateTo,countDays(type)-1);
                    toDate(r) <- dateTo;
                    snapshotType(r) <- type;
                    dataInclude(r, Stock st) <- NULL;
                    dataInclude(r, StockGroup st) <- NULL;
                    dataInclude(r, stock) <- TRUE;
                    takeFromTo(r, fromDate(r), toDate(r));                      
                }
            }

            apply();
        }
    }
}

countDaysDeleteSnapshots 'Дней хранить аналитические отчеты без типов' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES countDaysDeleteSnapshots();
    
DESIGN options{
    stock1 {
        MOVE PROPERTY (countDaysDeleteSnapshots());
    }
}

deleteSnapshots 'Удальть старые аналитические отчеты'()= ACTION {
    FOR sum(date(Snapshot r),countDaysDelete(snapshotType(r))) < currentDate()
        OR (NOT snapshotType(r) AND sum(date(r), countDaysDeleteSnapshots()) < currentDate()) DO {
            DELETE  r;
            apply();
        };
}


filterSnapshotSupplier = DATA LOCAL LegalEntity ();
nameFilterSnapshotSupplier 'Поставщик' = name(filterSnapshotSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterSupplierSnapshot (Batch bt) = supplier(bt) == filterSnapshotSupplier() OR (bt IS Batch AND NOT filterSnapshotSupplier());   
filterSupplierSnapshot (Sku s,Stock st)   = supplierLastOrderBatch(s, st) == filterSnapshotSupplier() OR (s IS Sku AND st IS Stock AND NOT filterSnapshotSupplier());   

FORM snapshot 'Аналитический отчет'                                   
    OBJECTS r = Snapshot FIXED PANEL
    PROPERTIES (r) nameNumerator, 
                   number, series, nameSnapshotType, date, time,
                   note, fromDate, toDate,  
                   isQuantity, isSum, isBalanceB BACKGROUND hintBalanceBBackground(), 
                   isIn BACKGROUND hintInBackground(), isOut BACKGROUND hintOutBackground(), 
                   isBalanceA BACKGROUND hintBalanceABackground(),
                   isBatch, isDate, isCost, isVATSupplier, isCostVATSupplier,
                   isNetWeight 
//-- выбор складов                  
    TREE stockTree2 a2 = STRING[3], sg2 = StockGroup PARENT parent, ts2 = Stock
    PROPERTIES OBJVALUE(a2) READONLY, allStockInclude(r) TODRAW a2 BACKGROUND backgroundAllStockInclude(r), 
               name(sg2) READONLY, include(r,sg2) BACKGROUND backgroundInclude(r,sg2),
               name(ts2) READONLY, include(r,ts2) BACKGROUND backgroundInclude(r,ts2)
    ORDER BY name(sg2)
    PROPERTIES deleteIncludeStocks(r) TOOLBAR
    
    FILTERS stringEqualsAll(a2),
            stockGroup(ts2) == sg2,
            isCompany(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(ts2) 'ctrl F10' DEFAULT                                                                                  
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(r,sk2)
    ORDER BY order(sk2), name(sk2)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F5' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups(r) TOOLBAR
            
//--stock    
    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent, ts = Stock
    PROPERTIES READONLY OBJVALUE(a), name(sg), name(ts)
    ORDER BY name(sg)
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg,
            isCompany(ts)
    FILTERGROUP inactiveStocks FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT    
    
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), name(sk)
    ORDER BY order(sk), name(sk)
    FILTERGROUP inactivesk FILTER 'Активные' active(sk) 'F5' DEFAULT
    
    PROPERTIES() nameFilterSnapshotSupplier
    
    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY name(s), idBarcode(s), id(s) SHOWIF showIDs(), name(st), nameSupplierLastOrderBatch(s, st)
    FILTERGROUP inactiveStockst FILTER 'Активный' active(st) 'ctrl F10' DEFAULT
    ORDER BY          name(s)
        
    FILTERS           isParent(sk, s),
                      st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts,
                      isCompany(st),
                      include(r,st),
                      filterSupplierSnapshot(s,st)

    PROPERTIES(s, st, r) BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                         sumB SHOWIF isSumBalanceB(r),                         
                         costB SHOWIF isCostBalanceB(r),                         
                         VATSupplierB SHOWIF isVATSupplierBalanceB(r), 
                         costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),
                         netWeightB SHOWIF isNetWeightBalanceB(r)
    PROPERTIES(s, st, r) BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityIn(r), 
                         inSum SHOWIF isSumIn(r),
                         inNetWeight SHOWIF isNetWeightIn(r)
    PROPERTIES(s, st, r) BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOut(r), 
                         outSum SHOWIF isSumOut(r),
                         outNetWeight SHOWIF isNetWeightOut(r)
    PROPERTIES(s, st, r) BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                         sumA SHOWIF isSumBalanceA(r),                         
                         costA SHOWIF isCostBalanceA(r),
                         VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                         costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),                                                                         
                         netWeightA SHOWIF isNetWeightBalanceA(r)                                                                                                               
    PROPERTIES        READONLY nameSkuGroup1(s), nameSkuGroup2(s),nameSkuGroup3(s), nameSkuGroup4(s), nameSkuGroup5(s)   
                                                                                
    FILTERGROUP filtersSold
        FILTER 'С остатком' balanceB(s,st,r) OR balanceA(s,st,r) OR sumB(s,st,r) OR sumA(s,st,r)  'F10'  
        FILTER 'С приходом' inQuantity(s,st,r) OR inSum(s,st,r) 'F9'   
        FILTER 'С расходом' outQuantity(s,st,r) OR outSum(s,st,r) 'F8'
    
    FILTERS filterMove(s,st,r)
                                                                                                                                                                                      
//--batch
    PROPERTIES()      nameB = nameFilterSnapshotSupplier
    OBJECTS           stb=(ss=Stock, bt=Batch) FIXED GRID
    PROPERTIES        READONLY SHOWIF isBatch(r) nameSku(bt), idBarcodeSku(bt), name(ss), name(bt), nameSupplier(bt), nameSupplierStock(bt) 
    ORDER BY          nameSku(bt)
    FILTERS           isParent(sk, bt),
                      ss == ts AND sg IS StockGroup OR isParent(sg, ss) AND NOT ts OR ss IS Stock AND NOT sg AND NOT ts,
                      isCompany(ss),
                      include(r,ss),
                      filterSupplierSnapshot(bt)
                      
    FILTERGROUP inactiveStock FILTER 'Активный' active(ss) 'ctrl F10' DEFAULT

    PROPERTIES(bt, ss, r) BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceBBatch(r), 
                          sumB SHOWIF isSumBalanceBBatch(r),                          
                          VATSupplierB SHOWIF isBalanceBBatchVATSupplier(r),
                          sumVATSupplierB SHOWIF isCostVATSupplierBalanceBBatch(r),                                                    
                          netWeightB SHOWIF isNetWeightBalanceBBatch(r) 
    PROPERTIES(bt, ss, r) BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityInBatch(r), 
                          inSum SHOWIF isSumInBatch(r),
                          inNetWeight SHOWIF isNetWeightInBatch(r)
    PROPERTIES(bt, ss, r) BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOutBatch(r), 
                          outSum SHOWIF isSumOutBatch(r),
                          outNetWeight SHOWIF isNetWeightOutBatch(r)                             
    PROPERTIES(bt, ss, r) BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceABatch(r), 
                          sumA SHOWIF isSumBalanceABatch(r),
                          VATSupplierA SHOWIF isBalanceABatchVATSupplier(r),
                          sumVATSupplierA SHOWIF isCostVATSupplierBalanceABatch(r),   
                          netWeightA SHOWIF isNetWeightBalanceABatch(r) 
    PROPERTIES        READONLY SHOWIF isBatch(r) date(bt), nameSkuGroup1(bt), nameSkuGroup2(bt), 
                      nameSkuGroup3(bt), nameSkuGroup4(bt), nameSkuGroup5(bt)
    ORDER BY          date(bt)            
        
    FILTERGROUP filtersSoldBatch
        FILTER 'С остатком' balanceB(bt,ss,r) OR balanceA(bt,ss,r) OR sumB(bt,ss,r) OR sumA(bt,ss,r) 'F10'  
        FILTER 'С приходом' inQuantity(bt,ss,r) OR inSum(bt,ss,r) 'F9'   
        FILTER 'С продажей' outQuantity(bt,ss,r) OR outSum(bt,ss,r)'F8'     

    FILTERS filterMove(bt,ss,r)

    PROPERTIES(r)  takeData  
//-- По группам    
    TREE skuTree1 sk1 = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk1), name(sk1)
    ORDER BY order(sk1), name(sk1)
    FILTERGROUP inactive FILTER 'Активные' active(sk1) 'F5' DEFAULT    
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                      sumB SHOWIF isSumBalanceB(r),                      
                      costB SHOWIF isCostBalanceB(r),
                      VATSupplierB SHOWIF isVATSupplierBalanceB(r),
                      costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),
                      netWeightB SHOWIF isNetWeightBalanceB(r)
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                      sumA SHOWIF isSumBalanceA(r),
                      costA SHOWIF isCostBalanceA(r),
                      VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                      costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),
                      netWeightA SHOWIF isNetWeightBalanceA(r)               
       
//-- По складам           
    TREE stockTree1 a1 = STRING[3], sg1 = StockGroup PARENT parent
    PROPERTIES READONLY OBJVALUE(a1), name(sg1)
    ORDER BY name(sg1)    
        
    OBJECTS ts1 = Stock
    PROPERTIES READONLY name(ts1)   
    ORDER BY name(ts1) 
    
    FILTERS stringEqualsAll(a1),
            ts1 IS Stock AND NOT sg1 IS StockGroup OR isParent(sg1, ts1),
            isCompany(ts1),
            include(r,ts1)     
    FILTERGROUP inactiveStock1 FILTER 'Активный' active(ts1) 'ctrl F10' DEFAULT               

    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                      sumB SHOWIF isSumBalanceB(r),
                      costB SHOWIF isCostBalanceB(r),
                      VATSupplierB SHOWIF isVATSupplierBalanceB(r),
                      costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),                      
                      netWeightB SHOWIF isNetWeightBalanceB(r)   
    PROPERTIES(ts1,r) READONLY BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityIn(r), 
                      inSum SHOWIF isSumIn(r),
                      inNetWeight SHOWIF isNetWeightIn(r)  
    PROPERTIES(ts1,r) READONLY BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOut(r), 
                      outSum SHOWIF isSumOut(r),
                      outNetWeight SHOWIF isNetWeightOut(r)  
    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                      sumA SHOWIF isSumBalanceA(r),
                      costA SHOWIF isCostBalanceA(r),
                      VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                      costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),
                      netWeightA SHOWIF isNetWeightBalanceA(r)    
                                  
    FILTERGROUP filtersSoldStock
        FILTER 'С движением' balanceB(ts1,r) OR balanceA(ts1,r) OR inQuantity(ts1,r) OR outQuantity(ts1,r) OR
                             sumB(ts1,r) OR sumA(ts1,r) OR inSum(ts1,r) OR outSum(ts1,r) 'F11' DEFAULT
                             
        FILTER 'С остатком' balanceB(ts1,r) OR balanceA(ts1,r) OR sumB(ts1,r) OR sumA(ts1,r) 'F10'  
        FILTER 'С приходом' inQuantity(ts1,r) OR inSum(ts1,r) 'F9'   
        FILTER 'С продажей' outQuantity(ts1,r) OR outSum(ts1,r) 'F8'   
                                          
//-- По поставщикам                                                
    
    OBJECTS l=LegalEntity FIXED GRID
    PROPERTIES READONLY SHOWIF isBatch(r) name(l)
    ORDER BY name(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    FILTERS isSupplier(l)                                              
                                              
    PROPERTIES(l,r) READONLY BACKGROUND hintBalanceBBackground() balanceBBatch SHOWIF isQuantityBalanceBBatch(r), 
                    sumBBatch  SHOWIF isSumBalanceBBatch(r),
                    VATSupplierBBatch SHOWIF isBalanceBBatchVATSupplier(r),
                    sumVATSupplierBBatch SHOWIF isCostVATSupplierBalanceBBatch(r),
                    netWeightBBatch  SHOWIF isNetWeightBalanceBBatch(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintInBackground() inQuantityBatch SHOWIF isQuantityInBatch(r), 
                    inSumBatch  SHOWIF isSumInBatch(r),
                    inNetWeightBatch  SHOWIF isNetWeightInBatch(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintOutBackground() outQuantityBatch SHOWIF isQuantityOutBatch(r), 
                    outSumBatch  SHOWIF isSumOutBatch(r),
                    outNetWeightBatch  SHOWIF isNetWeightOutBatch(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintBalanceABackground() balanceABatch SHOWIF isQuantityBalanceABatch(r), 
                    sumABatch  SHOWIF isSumBalanceABatch(r), 
                    VATSupplierABatch SHOWIF isBalanceABatchVATSupplier(r),
                    sumVATSupplierABatch SHOWIF isCostVATSupplierBalanceABatch(r),
                    netWeightABatch  SHOWIF isNetWeightBalanceABatch(r)                                                                                                                                                          
 
    FILTERGROUP filtersSoldSupplier
        FILTER 'С движением' balanceBBatch(l,r) OR balanceABatch(l,r) OR inQuantityBatch(l,r) OR outQuantityBatch(l,r) OR
                             sumBBatch(l,r) OR sumABatch(l,r) OR inSumBatch(l,r) OR outSumBatch(l,r)  'F11' DEFAULT
        FILTER 'С остатком' balanceBBatch(l,r) OR balanceABatch(l,r) OR sumBBatch(l,r) OR sumABatch(l,r) 'F10'  
        FILTER 'С приходом' inQuantityBatch(l,r) OR inSumBatch(l,r)'F9'   
        FILTER 'С продажей' outQuantityBatch(l,r) OR outSumBatch(l,r) 'F8'
            
//-- По складам поставщика             
    OBJECTS lst=Stock FIXED GRID
    PROPERTIES READONLY SHOWIF isBatch(r) nameLegalEntity(lst), name(lst)
    ORDER BY nameLegalEntity(lst), name(lst)
    FILTERGROUP inactiveLST FILTER 'Активный' active(lst) 'shift F10' DEFAULT
    FILTERS isSupplier(lst)                                              
                                              
    PROPERTIES(lst,r) READONLY BACKGROUND hintBalanceBBackground() balanceBBatchSupplier SHOWIF isQuantityBalanceBBatch(r), 
                    sumBBatchSupplier  SHOWIF isSumBalanceBBatch(r),
                    VATSupplierBBatchSupplier SHOWIF isBalanceBBatchVATSupplier(r),
                    sumVATSupplierBBatchSupplier SHOWIF isCostVATSupplierBalanceBBatch(r),
                    netWeightBBatchSupplier  SHOWIF isNetWeightBalanceBBatch(r)
    PROPERTIES(lst,r) READONLY BACKGROUND hintInBackground() inQuantityBatchSupplier SHOWIF isQuantityInBatch(r), 
                    inSumBatchSupplier  SHOWIF isSumInBatch(r),
                    inNetWeightBatchSupplier  SHOWIF isNetWeightInBatch(r)
    PROPERTIES(lst,r) READONLY BACKGROUND hintOutBackground() outQuantityBatchSupplier SHOWIF isQuantityOutBatch(r), 
                    outSumBatchSupplier  SHOWIF isSumOutBatch(r),
                    outNetWeightBatchSupplier  SHOWIF isNetWeightOutBatch(r)
    PROPERTIES(lst,r) READONLY BACKGROUND hintBalanceABackground() balanceABatchSupplier SHOWIF isQuantityBalanceABatch(r), 
                    sumABatchSupplier  SHOWIF isSumBalanceABatch(r), 
                    VATSupplierABatchSupplier SHOWIF isBalanceABatchVATSupplier(r),
                    sumVATSupplierABatchSupplier SHOWIF isCostVATSupplierBalanceABatch(r),
                    netWeightABatchSupplier  SHOWIF isNetWeightBalanceABatch(r)                                                                                                                                                          
 
    FILTERGROUP filtersSoldSupplierStock
        FILTER 'С движением' balanceBBatchSupplier(lst,r) OR balanceABatchSupplier(lst,r) OR inQuantityBatchSupplier(lst,r) OR outQuantityBatchSupplier(lst,r) OR
                             sumBBatchSupplier(lst,r) OR sumABatchSupplier(lst,r) OR inSumBatchSupplier(lst,r) OR outSumBatchSupplier(lst,r)  'F11'
        FILTER 'С остатком' balanceBBatchSupplier(lst,r) OR balanceABatchSupplier(lst,r) OR sumBBatchSupplier(lst,r) OR sumABatchSupplier(lst,r) 'F10'  
        FILTER 'С приходом' inQuantityBatchSupplier(lst,r) OR inSumBatchSupplier(lst,r)'F9'   
        FILTER 'С продажей' outQuantityBatchSupplier(lst,r) OR outSumBatchSupplier(lst,r) 'F8'            

    FILTERGROUP filtersLStock
        FILTER 'По поставщику' legalEntity(lst) == l 'F6'  DEFAULT  
              
//-- По SKU на дату         
           
    OBJECTS           sts3=(st3=Stock, s3=Sku, d3=DATE) FIXED GRID 
    PROPERTIES        READONLY SHOWIF isDate(r) valD3 =OBJVALUE(d3), name(s3), idBarcode(s3), name(st3) 
    
    ORDER BY          valD3     
    FILTERS           filterMove(r,d3)
    
    FILTERGROUP inactiveStock3 FILTER 'Активный' active(st3) 'ctrl F10' DEFAULT         
        
    FILTERS           isParent(sk, s3),
                      st3 == ts AND sg IS StockGroup OR isParent(sg, st3) AND NOT ts OR st3 IS Stock AND NOT sg AND NOT ts,
                      isCompany(st3),
                      include(r,st3)

    PROPERTIES(s3,st3,r,d3) BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceBDate(r), 
                            sumB SHOWIF isSumBalanceBDate(r),
                            costB SHOWIF isCostBalanceBDate(r),
                            VATSupplierB SHOWIF isVATSupplierBalanceBDate(r),
                            costVATSupplierB SHOWIF isCostVATSupplierBalanceBDate(r),
                            netWeightB SHOWIF isNetWeightBalanceBDate(r)                             
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityInDate(r), 
                            inSum SHOWIF isSumInDate(r),
                            inNetWeight SHOWIF isNetWeightInDate(r) 
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOutDate(r), 
                            outSum SHOWIF isSumOutDate(r),
                            outNetWeight SHOWIF isNetWeightOutDate(r) 
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceADate(r), 
                            sumA SHOWIF isSumBalanceADate(r),
                            costA SHOWIF isCostBalanceADate(r),
                            VATSupplierA SHOWIF isVATSupplierBalanceBDate(r),
                            costVATSupplierA SHOWIF isCostVATSupplierBalanceBDate(r),
                            netWeightA SHOWIF isNetWeightBalanceADate(r)
                                                                                                                                                                             
    PROPERTIES        READONLY SHOWIF isDate(r) nameSkuGroup1(s3), nameSkuGroup2(s3), nameSkuGroup3(s3), 
                      nameSkuGroup4(s3), nameSkuGroup5(s3)
                                                             
    FILTERGROUP filtersSold1
        FILTER 'С остатком' balanceB(s3,st3,r,d3) OR balanceA(s3,st3,r,d3) OR sumB(s3,st3,r,d3) OR sumA(s3,st3,r,d3) 'F10'  
        FILTER 'С приходом' inQuantity(s3,st3,r,d3) OR inSum(s3,st3,r,d3) 'F9'   
        FILTER 'С продажей' outQuantity(s3,st3,r,d3) OR outSum(s3,st3,r,d3) 'F8'         

    FILTERS filterMove(s3,st3,r,d3)

    OBJECTS st4=Stock
    FILTERS           st4 == ts AND sg IS StockGroup OR isParent(sg, st4) AND NOT ts OR st4 IS Stock AND NOT sg AND NOT ts,
                      isCompany(st4),
                      include(r,st4)
    
    OBJECTS d4=DATE FIXED GRID  
    PROPERTIES READONLY  SHOWIF isDate(r) valD4 =OBJVALUE(d4)  
    FILTERS           filterMove (r, d4)
        
    PROPERTIES(st4,r,d4) BACKGROUND hintBalanceBBackground() balanceB COLUMNS 'g' (st4) HEADER nameBalanceQB(st4) SHOWIF isQuantityBalanceBDate(r), 
                         sumB COLUMNS 'g' (st4) HEADER nameSumB(st4) SHOWIF isSumBalanceBDate(r),
                         costB COLUMNS 'g' (st4) HEADER nameCostB(st4) SHOWIF isCostBalanceBDate(r),
                         VATSupplierB COLUMNS 'g' (st4) HEADER nameCostB(st4) SHOWIF isVATSupplierBalanceBDate(r),
                         costVATSupplierB COLUMNS 'g' (st4) HEADER nameCostVATSupplierB(st4) SHOWIF isCostVATSupplierBalanceBDate(r),  
                         netWeightB COLUMNS 'g' (st4) HEADER nameNetWeightB(st4) SHOWIF isNetWeightBalanceBDate(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintInBackground() inQuantity COLUMNS 'g' (st4) HEADER nameInQuantity(st4) SHOWIF isQuantityInDate(r), 
                         inSum COLUMNS 'g' (st4) HEADER nameInSum(st4) SHOWIF isSumInDate(r),
                         inNetWeight COLUMNS 'g' (st4) HEADER nameInNetWeight(st4) SHOWIF isNetWeightInDate(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintOutBackground() outQuantity COLUMNS 'g' (st4) HEADER nameOutQuantity(st4) SHOWIF isQuantityOutDate(r), 
                         outSum COLUMNS 'g' (st4) HEADER nameOutSum(st4) SHOWIF isSumOutDate(r),
                         outNetWeight COLUMNS 'g' (st4) HEADER nameOutNetWeight(st4) SHOWIF isNetWeightOutDate(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintBalanceABackground() balanceA COLUMNS 'g' (st4) HEADER nameBalanceQA(st4) SHOWIF isQuantityBalanceADate(r), 
                         sumA COLUMNS 'g' (st4) HEADER nameSumA(st4) SHOWIF isSumBalanceADate(r),
                         costA COLUMNS 'g' (st4) HEADER nameCostA(st4) SHOWIF isCostBalanceADate(r),
                         VATSupplierA COLUMNS 'g' (st4) HEADER nameCostA(st4) SHOWIF isVATSupplierBalanceADate(r),
                         costVATSupplierA COLUMNS 'g' (st4) HEADER nameCostVATSupplierA(st4) SHOWIF isCostVATSupplierBalanceADate(r),
                         netWeightA COLUMNS 'g' (st4) HEADER nameNetWeightA(st4) SHOWIF isNetWeightBalanceADate(r)                                      
   
    EDIT Snapshot OBJECT r
;
DESIGN snapshot {
    main{
        preferredSize = (1024, 768);
        MOVE r.box {
            type = CONTAINERH;
            MOVE r.documentHeader;
            MOVE r.numbered; 
            NEW date {
                caption = 'Период';
                type = CONTAINERH;
                MOVE PROPERTY (fromDate(r));
                MOVE PROPERTY (toDate(r));
            }                                  
        };
        NEW top {                     
            fill = 1;
            type = TABBED;
            NEW paramContainer {
                fill = 1;
                caption = 'Параметры';
                MOVE r.evidence {
                    type = CONTAINERH;                      
                    NEW row1 {
                        type = CONTAINERV; 
                        caption = 'Основные';    
                        MOVE PROPERTY(isBatch(r));
                        MOVE PROPERTY(isDate(r));
                    }
                    NEW row2 {
                        caption = 'Остатки';                 
                        MOVE PROPERTY(isBalanceB(r));
                        MOVE PROPERTY(isBalanceA(r));   
                                                                                             
                    }                    
                    NEW row3 {
                        type = CONTAINERV;
                        caption = 'Колонки';
                        type = COLUMNS;
                        columns = 4;
                        MOVE PROPERTY(isQuantity(r));
                        MOVE PROPERTY(isSum(r)); 
                        MOVE PROPERTY(isCost(r)); 
                        MOVE PROPERTY(isVATSupplier(r));   
                        MOVE PROPERTY(isCostVATSupplier(r));     
                        MOVE PROPERTY(isNetWeight(r));                   
                    }                      
                    NEW row5 {
                        type = CONTAINERV;
                        caption = 'Движение';
                        MOVE PROPERTY(isIn(r));  
                        MOVE PROPERTY(isOut(r));                     
                    }                                                                          
                    NEW row6 {
                        type = CONTAINERV;
                        caption = 'Оборот';  
                        type = COLUMNS;
                        columns = 2;   
                                               
                    }                                                         
                }                                   
                MOVE r.documentPrm;
                NEW select{
                    fill = 1;
                    type = SPLITH;
                    MOVE stockTree2.tree.box { 
                        fill = 1; caption = 'Выбор складов'; 
                        stockTree2.tree.controls {
                            MOVE PROPERTY (deleteIncludeStocks(r));
                        }
                    }   
                    MOVE skuTree2.tree.box { 
                        fill = 1; caption = 'Выбор групп'; 
                        skuTree2.tree.controls {
                            MOVE PROPERTY (deleteIncludeSkuGroups(r));
                        }
                    }   
                }   
            }
            
            NEW resultContainer {
                caption = 'Результат';
                MOVE PROPERTY (takeData(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 36';  }
                NEW resultContainer2 {
                    fill = 7;
                    type = TABBED;
                    NEW tabb1 {
                        caption = 'Таблица';
                        type = SPLITH;          
                        NEW firstCase {
                            fill = 1;
                            type = SPLITV;
                            MOVE stockTree.tree.box { caption = 'Склады'; }
                            MOVE skuTree.tree.box { caption = 'Группы'; }
                        }
                        NEW secondCase {
                            fill = 3;
                            type = TABBED;
                            NEW skuContainer{
                                fill = 1;
                                caption = 'Товары'; 
                                type = TABBED;
                                MOVE sts.box {
                                    caption = 'Итоги';
                                    MOVE sts.panel FIRST{
                                        caption = 'Фильтр';
                                        MOVE PROPERTY (nameFilterSnapshotSupplier());
                                    }                           
                                }
                                MOVE sts3.box {caption = 'В динамике';}
                            }    
                            MOVE stb.box {caption = 'Партии'; 
                                MOVE stb.panel FIRST{
                                    caption = 'Фильтр';
                                    MOVE PROPERTY (nameB);
                                }                                
                                PROPERTY(date(bt)) { caption = 'Дата прихода'; }
                            }                                                  
                        }   
                    }
                    NEW tabb2 {
                        caption = 'По складам';
                        type = SPLITH; 
                        fill = 1;
                        MOVE stockTree1.tree.box;                                                                                 
                        NEW tabb21 { 
                            fill = 3;   
                            type = TABBED;
                            MOVE ts1.box { caption = 'Итоги';}    
                            MOVE d4.box {caption = 'В динамике';}   
                        }      
                    }
                    MOVE skuTree1.tree.box { caption = 'По группам'; }  
                    NEW sup {
                        fill = 1;
                        caption = 'По поставщикам';
                        type = SPLITV;
                        MOVE l.box { caption = 'Поставщик'; }   
                        MOVE lst.box { caption = 'Склад поставщика'; }   
                    }                                         
                }                 
            }
        } 
        REMOVE st4.box;
        MOVE functions.box;
    }
}

@extendFormFilterStockGroupAccess(sg, snapshot);

@extendFormFilterStockGroupAccess(sg1, snapshot);
@extendFormFilterStockGroupAccess(sg2, snapshot);
@extendFormFilterStockAccess(ts2, snapshot);
@extendFormFilterStockAccess(ts, snapshot);
@extendFormFilterStockAccess(st, snapshot);
@extendFormFilterStockAccess(ss, snapshot);
@extendFormFilterStockAccess(ts1, snapshot);

accessCompanyEmployeeStocks = 
    ([ = GROUP SUM 1 IF accessCompany(currentUser(), Stock stock) AND include(Snapshot r, stock) BY r](Snapshot r) == countIncludeStock(r)) OR (r IS Snapshot AND NOT countIncludeStock(r));

FORM snapshots 'Аналитические отчеты'

    OBJECTS r = Snapshot LAST 
    PROPERTIES (r) READONLY number, series, date, time,
                   fromDate, toDate, nameSnapshotType, status BACKGROUND backgroundStatus(r), 
                   startTime, finishTime, note, nameIncludeStockGroupsStock, nameIncludeSkuGroups,
                   isBatch, isDate, isQuantity, isNetWeight, isSum, isCost, isVATSupplier, 
                   isCostVATSupplier, isBalanceB BACKGROUND hintBalanceBBackground(), 
                   isIn BACKGROUND hintInBackground(),
                   isOut BACKGROUND hintOutBackground(), isBalanceA BACKGROUND hintBalanceABackground()                  
                   
    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer   
                         
    LIST Snapshot OBJECT r
;
DESIGN snapshots {
    main {
        preferredSize = (1024, 768);
        MOVE r.box;
        MOVE r.created; 
        MOVE functions.box;
    }    
} 
EXTEND FORM snapshots FILTERS accessCompanyEmployeeStocks(r);

NAVIGATOR {
    stockNavigator {
        NEW reports 'Аналитика' {
            ADD snapshotTypes;
            ADD snapshots;
        }
    }
}

