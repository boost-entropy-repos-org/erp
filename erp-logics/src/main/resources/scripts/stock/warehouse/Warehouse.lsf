MODULE Warehouse;

REQUIRE System,
        Stock,
        EmployeeStock,
        Hierarchy,
        LegalEntity;

// ----------------------------------------- Группы складов ------------------------------ //
CLASS WarehouseGroup 'Группа складов' : StockGroup;
TABLE warehouseGroup (WarehouseGroup);

@defineExternalizable(warehouseGroup, VARSTRING[100]);

nameWarehouseGroup 'Наименование' = DATA VARISTRING[100](WarehouseGroup);

nameStockGroup(group) += nameWarehouseGroup(group) IF group IS WarehouseGroup;

TABLE warehouseGroupWarehouseGroup(WarehouseGroup, WarehouseGroup);
@defineHierarchy(warehouseGroup);
parentStockGroup (stockGroup) += parentWarehouseGroup (stockGroup);

FORM warehouseGroup 'Группа складов'

    OBJECTS w = WarehouseGroup FIXED PANEL
    PROPERTIES(w) nameWarehouseGroup, nameParentWarehouseGroup

    EDIT WarehouseGroup OBJECT w
;

FORM warehouseGroups 'Группы складов'

    TREE warehouseGroupTree wg = WarehouseGroup PARENT parentWarehouseGroup
    PROPERTIES READONLY wgTreeName = nameWarehouseGroup(wg)
    PROPERTIES(wg) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY wgTreeName

    DIALOG WarehouseGroup OBJECT wg
;

// ----------------------------------------- Склады ------------------------------ //

CLASS Warehouse 'Склад' : Stock, TaxUnit;
TABLE warehouse(Warehouse);

@defineExternalizable(warehouse, VARSTRING[100]);
idStock (s) += idWarehouse(s);

nameWarehouse 'Наименование' = DATA VARISTRING[150](Warehouse) INDEXED;
fullNameWarehouse 'Наименование полное' = DATA VARISTRING[150](Warehouse) INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 30;
phoneWarehouse 'Телефон' = DATA VARISTRING[100](Warehouse);
phoneStock(st) += phoneWarehouse(st);
nameStock(stock) += nameWarehouse(stock) IF stock IS Warehouse;
fullNameStock(stock) += (OVERRIDE nameWarehouse(stock), fullNameWarehouse(stock)) IF stock IS Warehouse;

warehouseGroupWarehouse (warehouse) = DATA WarehouseGroup (Warehouse) INDEXED AUTOSET;
nameWarehouseGroupWarehouse 'Группа складов' (warehouse) = nameWarehouseGroup(warehouseGroupWarehouse(warehouse)) IN base MINCHARWIDTH 20 PREFCHARWIDTH 30;
isParentWarehouseGroupWarehouse (warehouseGroup, warehouse) =
    isParentWarehouseGroupWarehouseGroup(warehouseGroupWarehouse(warehouse), warehouseGroup) PERSISTENT;
stockGroupStock (stock) += warehouseGroupWarehouse (stock);

legalEntityWarehouse (warehouse) = DATA LegalEntity (Warehouse) INDEXED NOT NULL DELETE;
nameLegalEntityWarehouse 'Организация' (warehouse) = nameLegalEntity(legalEntityWarehouse(warehouse)) IN base MINCHARWIDTH 20 PREFCHARWIDTH 30;
legalEntityStock (stock) += legalEntityWarehouse(stock);

userLegalEntityWarehouse 'Отм.' = DATA BOOLEAN (LegalEntity, Warehouse);
userLegalEntityStock(legalEntity, stock) += userLegalEntityWarehouse(legalEntity, stock);

addressWarehouse 'Адрес' (warehouse) = DATA VARSTRING[100] (Warehouse);
addressStock(stock) += addressWarehouse(stock);

emailWarehouse 'E-mail для заказов' (warehouse) = DATA VARSTRING[300] (Warehouse)MINCHARWIDTH 30 PREFCHARWIDTH 50;
emailStock(stock) += emailWarehouse(stock);

latitudeWarehouse 'Координата X' = DATA NUMERIC[10,5](Warehouse);
longitudeWarehouse 'Координата Y' = DATA NUMERIC[10,5](Warehouse);

latitudePOI (warehouse) += latitudeWarehouse(warehouse);
longitudePOI (warehouse) += longitudeWarehouse(warehouse);

quantityDaysCloseWarehouse 'Срок автоматического закрытия заказов' = DATA INTEGER(Warehouse);
quantityDaysCloseOrdersStock(stock) += quantityDaysCloseWarehouse(stock);

regionWarehouse = DATA Region (Warehouse);
regionStock(warehouse) += regionWarehouse(warehouse);

// Неактивный
inactiveWarehouse 'Неактивный' = DATA BOOLEAN (Warehouse);
inactiveStock(st) += inactiveWarehouse(st);

// -------------------------------------------------- Формы ----------------------------------------- //

FORM warehouse 'Склад'

    OBJECTS           w=Warehouse FIXED PANEL
    PROPERTIES(w)     nameWarehouse, fullNameWarehouse, phoneWarehouse, idWarehouse SHOWIF showIDs(), nameWarehouseGroupWarehouse, addressWarehouse, 
                      emailWarehouse, nameLegalEntityWarehouse,
                      latitudeWarehouse, longitudeWarehouse, showOnMapPOI, quantityDaysCloseWarehouse SHOWIF isCompanyStock(w), nameRegionStock SHOWIF isCompanyStock(w), inactiveWarehouse,
                      dataDefaultCompanyStock
    ORDER BY          nameWarehouse(w)

    OBJECTS           e = Employee FIXED GRID
    PROPERTIES(e)     SHOWIF isCompanyStock(w) READONLY firstNameContact, lastNameContact
    PROPERTIES(e)     SHOWIF isCompanyStock(w) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    FILTERS           inStockEmployee(w, e)

    EDIT Warehouse OBJECT w
;

DESIGN warehouse {
    NEW headerParams {
        type = CONTAINERH;
        NEW headerLeft {
            type = CONTAINERV;
            NEW headerMainParams {
                caption = 'Основные параметры';
                type = COLUMNS;
                columns = 3;
                MOVE PROPERTY(nameWarehouse(w));  
                MOVE PROPERTY(fullNameWarehouse(w));
                MOVE PROPERTY(phoneWarehouse(w));
                MOVE PROPERTY(idWarehouse(w));
                MOVE PROPERTY(nameWarehouseGroupWarehouse(w));
                MOVE PROPERTY(nameLegalEntityWarehouse(w));
                MOVE PROPERTY(inactiveWarehouse(w));
                MOVE PROPERTY(dataDefaultCompanyStock(w));
            }
            NEW headerLocationParams {
                caption = 'Координаты';
                type = CONTAINERH;
                MOVE PROPERTY(addressWarehouse(w));
                MOVE PROPERTY(emailWarehouse(w));
                MOVE PROPERTY(latitudeWarehouse(w));
                MOVE PROPERTY(longitudeWarehouse(w));
                MOVE PROPERTY(showOnMapPOI(w));
            }
            NEW headerExtraParams {
                caption = 'Дополнительные параметры';
                type = CONTAINERH;
                MOVE PROPERTY(nameRegionStock(w));
                MOVE PROPERTY(quantityDaysCloseWarehouse(w));
            }
        }
        NEW headerRight;
    }
    MOVE e.box;
    MOVE functions.box;
}

editWarehouse 'Редактировать' = ACTION EDITFORM Warehouse;
editStock(stock) += ACTION editWarehouse(stock);

editSessionWarehouse 'Редактировать' = ACTION EDITFORM SESSION Warehouse;
editSessionStock(stock) += ACTION editSessionWarehouse(stock);

FORM warehouses 'Склады'

    TREE warehouseTree b=STRING[3], wg = WarehouseGroup PARENT parentWarehouseGroup
    PROPERTIES READONLY OBJVALUE(b), wgTreeName = nameWarehouseGroup(wg)
    PROPERTIES(wg) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ORDER BY wgTreeName
    FILTERS stringEqualsAll(b)

    OBJECTS w=Warehouse
    PROPERTIES(w) READONLYIF isReadonly() nameWarehouse, fullNameWarehouse, idWarehouse SHOWIF showIDs(), nameWarehouseGroupWarehouse, 
                  addressWarehouse, emailWarehouse, nameLegalEntityWarehouse, nameRegionStock, latitudePOI, longitudePOI
    PROPERTIES(w) ADDFORM, EDITFORM, deletew=DELETE FORCE PANEL TOOLBAR
    ORDER BY nameWarehouse(w)
    FILTERS isParentWarehouseGroupWarehouse(wg, w) OR (w IS Warehouse AND wg IS WarehouseGroup AND NOT warehouseGroupWarehouse(w)) OR (w IS Warehouse AND NOT wg)

    DIALOG Warehouse OBJECT w
;

DESIGN warehouses {

    NEW mainContainer{
        fill = 1;
        type = SPLITH;

        MOVE warehouseTree.tree.box {caption = 'Группы складов';}
        MOVE w.box {
            fill = 3;
            w.grid {
                defaultComponent = TRUE;
            }
        }
    }
    MOVE functions.box;
}
@extendFormEditable(warehouses);

addWarehouseLegalEntity 'Добавить склад' = ACTION (legalEntity) NESTEDSESSION {
    FOR ADDOBJ wr = Warehouse DO {
        ASSIGN legalEntityWarehouse(wr) <- legalEntity;
        FORM warehouse OBJECTS w = wr MANAGESESSION DOCKEDMODAL;
    }
}

allWarehouseGroup = DATA WarehouseGroup ();
nameAllWarehouseGroup 'Группа складов по умолчанию для организаций' = nameWarehouseGroup(allWarehouseGroup());

EXTEND FORM options PROPERTIES() nameAllWarehouseGroup;
DESIGN options {
    commons {
        MOVE PROPERTY(nameAllWarehouseGroup());
    }
}


defaultWarehouseLegalEntity= GROUP MAX stock IF inLegalEntityStock(legalEntity, stock) AND stock IS Warehouse BY legalEntity; 
adressDefaultWarehouseLegalEntity 'Адрес основного склада' (legalEntity) = addressWarehouse(defaultWarehouseLegalEntity(legalEntity)) IN law;

changeWarehouseLegalEntity = ACTION (legalEntity){
    REQUEST VARSTRING[100] INPUT;
    IF requestedString() THEN {
        IF defaultWarehouseLegalEntity(legalEntity) THEN {
            addressWarehouse(w) <- requestedString() WHERE w == defaultWarehouseLegalEntity(legalEntity);        
        } ELSE {
            FOR ADDOBJ w = Warehouse DO {
                legalEntityWarehouse(w) <- legalEntity;
                warehouseGroupWarehouse(w) <- allWarehouseGroup();                
                addressWarehouse(w) <- requestedString();    
                nameWarehouse(w) <- VARISTRING[150]('Склад '+(nameLegalEntity(legalEntityWarehouse(w))));    
            }
        }
    } ELSE {
        IF defaultWarehouseLegalEntity(legalEntity) THEN {
            addressWarehouse(w) <- NULL WHERE w == defaultWarehouseLegalEntity(legalEntity);        
        }   
    }
}

EXTEND FORM legalEntity
    PROPERTIES(l) adressDefaultWarehouseLegalEntity ON CHANGE changeWarehouseLegalEntity(l)
    PROPERTIES addWarehouseLegalEntity(l) TODRAW st FORCE PANEL TOOLBAR
;

NAVIGATOR {
    stockMasterData {
        ADD warehouses;
    }
}

// ----------------------------------- Стандартные данные ----------------------------------- //


loadDefaultWarehouseGroup 'Добавить группы складов' = ACTION (iname, id) {
    FOR ADDOBJ w = WarehouseGroup DO {
        nameWarehouseGroup(w) <- iname;
        idWarehouseGroup(w) <- id;

    }
}
loadDefaultRecWarehouseGroup 'Добавить группы складов (рекурсивно)' = ACTION (iname, id, idParent) {
    FOR ADDOBJ w = WarehouseGroup DO {
        nameWarehouseGroup(w) <- iname;
        idWarehouseGroup(w) <- id;
        parentWarehouseGroup(w) <- warehouseGroupId(idParent);
    }
}

loadDefaultStockGroups () += ACTION ()  {
    loadDefaultWarehouseGroup ('Склады контрагентов', 'Склады контрагентов');
    loadDefaultWarehouseGroup ('Собственные склады', 'Собственные склады');
}