MODULE Pack;

REQUIRE System,
        Utils,
        Stock,
        Barcode;

PRIORITY Utils, Stock;

GROUP itemPack 'Упаковка товара' : public;

META definePackSku (caption, NS)
    packBarcode 'Штрихкод для '##caption = DATA Barcode (Sku);
    pack 'Штрихкод для '##caption (Barcode barcode)=  packBarcode(sku(barcode)) == barcode;
    
    CONSTRAINT sku(packBarcode(Sku item)) != item CHECKED BY packBarcode[Sku] MESSAGE 'Выбран неверный sku для штрихкода упаковки ('##caption##')';
    
    changePack(Barcode barcode, Sku sku) = ACTION {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            ASSIGN packBarcode(sku) <- barcode;
        } ELSE
            ASSIGN packBarcode(sku) <- NULL;
    }
    
    EXTEND FORM barcodeDialog
        PROPERTIES (b) READONLY pack##NS = pack
    ;
    EXTEND FORM barcodeSku
        PROPERTIES (b) READONLY pack##NS = pack
    ;
    
    idBarcodePack 'Штрихкод упаковки' (Sku sku)= id(packBarcode(sku));
    shortNameUOMPack 'Ед. изм. упаковки' (Sku sku)= shortNameUOM(packBarcode(sku));
    amountPack 'Кол-во в упаковке'(Sku sku) =amount(packBarcode(sku)) IN itemPack;
    
    changeValuePack(Sku sku) = ACTION {
        IF requestedNumeric() THEN {
            IF NOT packBarcode(sku) THEN {
                FOR ADDOBJ b = Barcode DO {
                   sku(b) <- sku;
                   dataAmount (b) <- requestedNumeric();
    
                   packBarcode(sku) <- b;
                }
            } ELSE {
                dataAmount (Barcode bb) <- requestedNumeric() WHERE bb == packBarcode(sku);
            }
    
        } ELSE {
            IF packBarcode(sku) THEN {
                DELETE Barcode p WHERE p==packBarcode(sku);
            }
        }
    }

    changePack(Sku sku) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        changeValuePack(sku);
    }
END

// --------------------------- Макрос по добавлению упаковки в документы ---------------------- //

META defineDocumentPack(object, detail, f)

    skipChangePackQuantity = ABSTRACT CASE BOOLEAN (User###object###Detail);
    skipChangeQuantity = ABSTRACT CASE BOOLEAN (User###object###Detail);

    // Объявляем галочку по, которой будут показываться колонки с упаковкой
    @defineDocumentInterfaceProperty (object, showPack, 'Упаковка');

    // Добавляем в строки штрихкод
    @defineDocumentInterfaceBarcodePrefix (object, sku, , );
    @deriveDocumentDetailBarcodeCustom (user###detail, sku, showPack);

    // Объявляем первичное свойство количество упаковок
    @defineDocumentInterfaceDetailQuantityPrefix(object, pack, ' упаковок');

    // Автоматически проставляем кол-во упаковок из количества
    packQuantity(User###detail d) <- quantity(d) / (amountPack(d) IF amountPack(d) != 0)
        WHEN CHANGED(quantity(d)) OR CHANGED(amountPack(d));

    // Объявляем действия по изменению количества в упаковке и количества упаковок
    overChangeAmountPackUser = ACTION ABSTRACT LIST (###detail); 
    changeAmountPackUser(###detail detail) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        ASSIGN amountPack[User###detail](detail) <- requestedNumeric();
        IF NOT skipChangeQuantity(detail) THEN {
            ASSIGN quantity[User###detail](detail) <- packQuantity[User###detail](detail)*(OVERRIDE 1.0, amountPack[User###detail](detail));
        }        
        EXEC overChangeAmountPackUser(detail);
    }

    changePackQuantity(User###detail detail) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        ASSIGN packQuantity(detail) <- requestedNumeric();
        IF NOT skipChangeQuantity(detail) THEN {
            ASSIGN quantity(detail) <- packQuantity(detail)*(OVERRIDE 1.0, amountPack(detail));
        }        
    }

    // Расширяем формы
    EXTEND FORM user###object
        PROPERTIES (f) showPack
        PROPERTIES (d) SHOWIF showPack(f) BEFORE quantity(d)
                       idBarcodePack, shortNameUOMPack,
                       amountPack ON CHANGE changeAmountPackUser(d), packQuantity ON CHANGE changePackQuantity(d)
    ;

    EXTEND FORM object##s
        PROPERTIES(d) READONLY SHOWIF showPack(f) BEFORE quantity(d)
                      idBarcodePack, shortNameUOMPack,
                      amountPack, packQuantity
    ;

    // Добавляем в копирование инвойсов
    overCopy(###object s, User###object d) += ACTION {
        ASSIGN showPack(d) <- showPack(s);
    }
END

META defineDocumentPack(object, f)
    @defineDocumentPack(object, object##Detail, f);
END

// --------------------------- Макрос по добавлению упаковки в документы (подбор по нескольким складам) ---------------------- //

META defineDocumentPackSkuStock(object, detail, skuProp, stockProp)
    packQuantity###stockProp 'Кол-во упаковок в документе' (sku, object, stock) = GROUP SUM packQuantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp##Stock(detail);

    changePackQuantity(###skuProp skuProp, ###object object, Stock stock) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###stockProp(sku, object, stock) THEN {
            IF requestedNumeric() THEN {
                ASSIGN packQuantity(###detail detail) <- requestedNumeric() WHERE detail == detail###stockProp(sku, object, stock);
                ASSIGN quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE 1.0, amountPack(detail)) 
                                        WHERE detail == detail###stockProp(sku, object, stock) AND NOT skipChangeQuantity(detail###stockProp(sku, object, stock));
            } ELSE {
                FOR detail###stockProp(sku, object, stock) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF requestedNumeric() THEN  {
                FOR ADDOBJ d = ###detail DO {
                   object(d) <- object;
//                 Пока отключим работу с несколькими складами
//                 data###stockProp###stock###detail (d) <- stock;
                   skuProp(d) <- sku;
                   packQuantity (d) <- requestedNumeric();
                   quantity(d) <- packQuantity(d) * (OVERRIDE 1.0, amountPack(d));
                   shipmentDataDate (d) <- shipmentDate(object);
                   shipmentDataTime (d) <- shipmentTime(object);
                }
            }
        }
    }

    changeAmountPack(###skuProp skuProp, ###object object, Stock stock) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###stockProp(sku, object, stock) THEN {
            IF requestedNumeric() THEN {
                ASSIGN amountPack(###detail detail) <- requestedNumeric() WHERE detail == detail###stockProp(sku, object, stock);
                ASSIGN quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE 1.0, amountPack(detail)) 
                                        WHERE detail == detail###stockProp(sku, object, stock) AND packQuantity(detail) AND NOT skipChangeQuantity(detail###stockProp(sku, object, stock));
            } ELSE {
                ASSIGN amountPack(###detail detail) <- NULL WHERE detail == detail###stockProp(sku, object, stock);
            }

        }
        EXEC changeValuePack(sku);
    }

END
META defineDocumentPackSkuStock(object, skuProp, stockProp)
    @defineDocumentPackSkuStock(object, object##Detail, skuProp, stockProp);
END


META extendFormDocumentPackSkuStock(object, form, concrete, stockProp)
    EXTEND FORM form
        PROPERTIES SHOWIF sh##concrete##wPack(concrete) BEFORE quantity###stockProp(ks, concrete, st)
//                   idBarcodePackSku(ks) READONLY, shortNameUOMPackSku(ks) READONLY,
                   am##concrete##untPack(ks) ON CHANGE changeAm##concrete##untPack(ks, concrete, st),
                   packQuantity###stockProp(ks, concrete, st) ON CHANGE changePackQuantity(ks, concrete, st)
    ;
    DESIGN form {
        PROPERTY(packQuantity###stockProp(ks, concrete, st)) { background = #FFBC02;}  //9AFC9A
    }
        
    
END

// --------------------------- Макрос по добавлению упаковки в документы (подбор по одному складу ) ---------------------- //

META defineDocumentPackSku(object, detail, skuProp, stockProp)
    packQuantity 'Кол-во упаковок в документе' (sku, object) = GROUP SUM packQuantity(###detail detail)
        BY skuProp(detail), object(detail);

    changePackQuantity(###skuProp skuProp, ###object object) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail(sku, object) THEN {
            IF requestedNumeric() THEN {
                packQuantity(###detail detail) <- requestedNumeric() WHERE detail == detail(sku, object);
                quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE 1.0, amountPack(detail)) WHERE detail == detail(sku, object) AND NOT skipChangeQuantity(detail(sku, object));
                                
            } ELSE {
                FOR detail(sku, object) == ###detail d DO 
                    DELETE d;
            }
        } ELSE {
            IF requestedNumeric() THEN
                FOR ADDOBJ d = ###detail DO {
                    object(d) <- object;
                    skuProp(d) <- sku;
                    packQuantity (d) <- requestedNumeric();
                    quantity(d) <- packQuantity(d) * (OVERRIDE 1.0, amountPack(d));
                }
        }
    }
    changeAmountPack(###skuProp skuProp, ###object object) = ACTION {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail(sku, object) THEN {
            IF requestedNumeric() THEN {
                amountPack(###detail detail) <- requestedNumeric() WHERE detail == detail(sku, object);
                quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE 1.0, amountPack(detail)) WHERE detail == detail(sku, object) AND packQuantity(detail) AND NOT skipChangeQuantity(detail(sku, object));
            } ELSE {
                amountPack(###detail detail) <- NULL WHERE detail == detail(sku, object);
            }

        }
        EXEC changeValuePack(sku);
    }

END
META defineDocumentPackSku(object, skuProp, stockProp)
    @defineDocumentPackSku(object, object##Detail, skuProp, stockProp);
END


META extendFormDocumentPackSku(object, form, concrete)
    EXTEND FORM form
        PROPERTIES SHOWIF showPack(concrete) BEFORE quant##concrete##ty###form##Deta##concrete##l(ks, concrete)
//                   idBarcodePackSku(ks) READONLY, shortNameUOMPackSku(ks) READONLY,
                   amountPack(ks) ON CHANGE changeAmountPack(ks, concrete),
                   packQuant##concrete##ty(ks, concrete) ON CHANGE changePackQuant##concrete##ty(ks, concrete) SHOWIF showQuant##concrete##tySkuDocument(concrete)
    ;
    DESIGN form {
        PROPERTY(packQuant##concrete##ty(ks, concrete)) { background = #FFBC02;}
    }
END
