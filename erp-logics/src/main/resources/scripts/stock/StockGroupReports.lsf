MODULE StockGroupReports;

REQUIRE StockReports, Item, PurchaseLedger, SaleLedger;
    
META createGroup(object, name, number)
    g###object name = DATA LOCAL BOOLEAN();
    WHEN LOCAL SET(g###object()) AND countGroup() < 3 DO addGroup(number, name);
    WHEN LOCAL SET(g###object()) AND countGroup() == 3 DO { g###object() <- NULL; };
    WHEN LOCAL DROPPED(g###object()) DO deleteGroup(number);   
END 

order 'Номер' = DATA LOCAL INTEGER(INTEGER);
nameGroup 'Группировка' = DATA VARSTRING[100](INTEGER);

countGroup = OVERRIDE [=GROUP MAX order(INTEGER i)](), 0;

isSkuLastGroup = order(2) == countGroup();

addGroup(INTEGER i, VARSTRING[100] name) = {
    nameGroup(i) <- name;
    order(i) <- (OVERRIDE [=GROUP MAX order(INTEGER in)](), 0) + 1;
}
reorderGroup() = {
    order(INTEGER i) <- PARTITION SUM 1 IF nameGroup(i) ORDER order(i);
}
deleteGroup(INTEGER i) = {
    nameGroup(i) <- NULL;
    order(i) <- NULL;
    reorderGroup();
}

@createGroup(stock, 'По магазину', 1);
@createGroup(sku, 'По товару', 2);
@createGroup(group, 'По группам товара', 3);
@createGroup(supplier, 'По поставщику', 4);
@createGroup(brand, 'По брэнду', 5);

balanceB 'Остаток на начало' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);

costSumB 'Себестоимость на начало' = DATA LOCAL NUMERIC[32,9] (Sku, Stock);

sumB 'Сумма на начало' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

balanceA 'Остаток на конец' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);

costSumA 'Себестоимость на конец' = DATA LOCAL NUMERIC[32,9] (Sku, Stock);

sumA 'Сумма на конец' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

quantityPurchase 'Закуплено за интервал (кол-во)' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);

costSumPurchase 'Себестоимость закупленного за интервал' = DATA LOCAL NUMERIC[32,9] (Sku, Stock);

sumPurchase 'Закуплено за интервал (сумма)' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

sumVATPurchase 'Сумма НДС закупленного за интервал' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

quantitySold 'Продано за интервал (кол-во)' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);

costSumSold 'Себестоимость проданного за интервал' = DATA LOCAL NUMERIC[16,3] (Sku, Stock);

sumSold 'Продано за интервал (сумма)' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

sumVATSold 'Сумма НДС проданного за интервал' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

inSkuStock = DATA LOCAL BOOLEAN (Sku, Stock);

nameGroup1 = DATA LOCAL VARSTRING[255] (Sku, Stock);
nameGroup2 = DATA LOCAL VARSTRING[255] (Sku, Stock);
nameGroup3 = DATA LOCAL VARSTRING[255] (Sku, Stock);

META setNameGroup(number)
    setNameGroup##number () ={
        nameGroup##number(Sku sk, Stock st) <- NULL;
        IF order(1) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE name(st), 'Не задано') IF sk IS Sku WHERE inSkuStock(sk, st);
        }
        IF order(2) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE name(sk), 'Не задано') IF sk IS Sku WHERE inSkuStock(sk, st);
        }
        IF order(3) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE nameSkuGroup(sk), 'Не задано') IF sk IS Sku WHERE inSkuStock(sk, st);
        }
        IF order(4) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE nameSupplierLastOrderBatch(sk), 'Не задано') IF sk IS Sku WHERE inSkuStock(sk, st);
        } 
        IF order(5) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE nameBrand(sk), 'Не задано') IF sk IS Sku WHERE inSkuStock(sk, st);
        }
    }   
END 
@setNameGroup(1);
    @setNameGroup(2);
    @setNameGroup(3);

fillReportGroupBackSheetFromTo 'Сформировать'(GroupType gt, DATE df, DATE dt) = {

    balanceB(Sku sk, Stock st) <- NULL; 
    sumB(Sku sk, Stock st) <- NULL;
    balanceA(Sku sk, Stock st) <- NULL;
    sumA(Sku sk, Stock st) <- NULL;
    quantityPurchase(Sku sk, Stock st) <- NULL;
    sumPurchase(Sku sk, Stock st) <- NULL;
    quantitySold(Sku sk, Stock st) <- NULL;
    sumSold(Sku sk, Stock st) <- NULL;

    balanceA(Sku sk, Stock st) <- NUMERIC[16,5]([ = GROUP SUM balanceA(Sku sk, Stock st, DATE dt) IF inBackSheet(st) BY sk, st, dt](sk, st, dt)); 
    
    costSumA(Sku sk, Stock st) <- NUMERIC[32,9]([ = GROUP SUM costSumA(Sku sk, Stock st, DATE dt) IF inBackSheet(st) BY sk, st, dt](sk, st, dt)); 
     
    sumA(Sku sk, Stock st) <- NUMERIC[18,4]([ = GROUP SUM sumA(Sku sk, Stock st, DATE dt) IF inBackSheet(st) BY sk, st, dt](sk, st, dt));

    balanceB(Sku sk, Stock st) <- NUMERIC[16,5]([ = GROUP SUM balanceB(Sku sk, Stock st, DATE df) IF inBackSheet(st) BY sk, st, df](sk, st, df));
    
    costSumB(Sku sk, Stock st) <- NUMERIC[32,9]([ = GROUP SUM costSumB(Sku sk, Stock st, DATE df) IF inBackSheet(st) BY sk, st, df](sk, st, df));
    
    sumB(Sku sk, Stock st) <- NUMERIC[18,4]([ = GROUP SUM sumB(Sku sk, Stock st, DATE df) IF inBackSheet(st) BY sk, st, df](sk, st, df));
    
    quantityPurchase(Sku sk, Stock st) <- NUMERIC[16,5]([ = GROUP SUM quantityPurchase(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    costSumPurchase(Sku sk, Stock st) <- NUMERIC[32,9]([ = GROUP SUM costSumPurchase(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    sumPurchase(Sku sk, Stock st) <- NUMERIC[18,4]([ = GROUP SUM sumPurchase(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    sumVATPurchase(Sku sk, Stock st) <- NUMERIC[18,4]([ = GROUP SUM sumVATPurchase(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    quantitySold(Sku sk, Stock st) <- NUMERIC[16,5]([ = GROUP SUM quantitySold(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    costSumSold(Sku sk, Stock st) <- NUMERIC[16,3]([ = GROUP SUM costSumSold(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
     
    sumSold(Sku sk, Stock st) <- NUMERIC[18,4]([ = GROUP SUM sumSold(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    sumVATSold(Sku sk, Stock st) <- NUMERIC[18,4]([ = GROUP SUM sumVATSold(Sku sk, Stock st, DATE df, DATE dt) IF inBackSheet(st) BY sk, st, df, dt](sk, st, df, dt));
    
    inSkuStock(Sku sk, Stock st) <- inBackSheet(st) AND balanceA(sk, st) AND balanceB(sk, st) AND quantityPurchase(sk, st) AND quantitySold(sk, st);
    
    setNameGroup1();
    setNameGroup2();
    setNameGroup3();
}
    
FORM printGroupBackSheet 'Товарооборот'   
    PROPERTIES inBackSheetStocks()
    
    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name

    PROPERTIES() countGroup, isSkuLastGroup
    
    OBJECTS s = (s = Sku, st = Stock)
    PROPERTIES(st) name
    PROPERTIES(s)  name, shortNameUOM
    PROPERTIES (s, st) balanceB, costSumB, sumB, balanceA, costSumA, sumA, quantityPurchase, costSumPurchase, sumPurchase, sumVATPurchase, quantitySold, costSumSold, sumSold, sumVATSold, nameGroup1, nameGroup2, nameGroup3
    FILTERS include(gt, s)
    FILTERS inSkuStock(s, st)
    ORDER BY nameGroup1(s, st), nameGroup2(s, st), nameGroup3(s, st)
    
    PROPERTIES nameGroup(gt, s)
;

printGroupBackSheet 'Отчет по товарообороту' (DATE dateFrom, DATE dateTo, GroupType gt) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReportGroupBackSheetFromTo(gt, dateFrom, dateTo);
    PRINT printGroupBackSheet OBJECTS gt = gt;
}  IMAGE 'print.png' IN print;
    
xlsxGroupBackSheet 'Отчет по товарообороту (XLSX)' (DATE dateFrom, DATE dateTo, GroupType gt) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReportGroupBackSheetFromTo(gt, dateFrom, dateTo);
    PRINT printGroupBackSheet OBJECTS gt = gt XLSX;
} IMAGE 'print.png' IN print;

EXTEND FORM reportBackSheet 
    PROPERTIES() gStock, gSku, gGroup, gSupplier, gBrand
    
    OBJECTS gr = INTEGER 
    PROPERTIES(gr) READONLY order, nameGroup
    ORDER BY order(gr)
    FILTERS nameGroup(gr)
    
    PROPERTIES(df,dt,gt) printGroupBackSheet, xlsxGroupBackSheet
;

DESIGN reportBackSheet {
    tabContainer {
        NEW groupContainer {
            caption = 'Группировка';
            type = CONTAINERV;
            fill = 1;
            NEW grContainer {
                fill = 1;
                type = CONTAINERH;
                caption = 'Группировка';
                NEW checkBoxContainer{
                    type = CONTAINERV;
                    MOVE PROPERTY(gStock());
                    MOVE PROPERTY(gSku());
                    MOVE PROPERTY(gGroup());
                    MOVE PROPERTY(gSupplier());
                    MOVE PROPERTY(gBrand());    
                 }
                 MOVE BOX(gr) { caption = 'Порядок группировки'; };
            }
            NEW printGrContainer {
                type = CONTAINERH;
                caption = 'Печать';
                MOVE PROPERTY(printGroupBackSheet(df,dt,gt));
                MOVE PROPERTY(xlsxGroupBackSheet(df,dt,gt));
            }
        }
    }
}