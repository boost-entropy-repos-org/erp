MODULE Barcode;

REQUIRE System, Stock, Utils, Numerator;

CLASS Barcode 'Штрих код';
TABLE barcode (Barcode);
TABLE stringDate (STRING[15], DATE);

idBarcode 'Штрих код' = DATA STRING[15] (Barcode) IN recognize FIXEDCHARWIDTH 15 AGGPROP INDEXED;

dataDateBarcode 'Дата действия' = DATA DATE (Barcode);
dateBarcode 'Дата действия' = OVERRIDE (2001_01_01 IF barcode IS Barcode), dataDateBarcode(barcode) IN base PERSISTENT;

dataBarcodeIdDate (id, date) = GROUP AGGR barcode BY idBarcode(barcode), dateBarcode(barcode) WHERE barcode IS Barcode PERSISTENT;
orderBarcodeIdDate 'Дата действия' (id, date) = GROUP MAX STRUCT(dateIn, dataBarcodeIdDate(id, dateIn)) IF dateIn <= (date AS DATE) BY id, date IN base;
barcodeIdDate (id, date) = orderBarcodeIdDate(id, date)[2];

barcodeId (id) = barcodeIdDate(id, currentDate());
activeBarcode 'Активный' (barcode) = barcodeId(idBarcode(barcode)) == barcode;

dataAmountBarcode 'Множитель' = DATA NUMERIC[14,3] (Barcode);
amountBarcode 'Множитель' = OVERRIDE (1.0 IF barcode IS Barcode), dataAmountBarcode (barcode) PERSISTENT;

completeBarcode = FORMULA STRING[13] 'completeBarcode($1)';

// Sku
skuBarcode = DATA Sku(Barcode) IN base NOT NULL DELETE;
nameSkuBarcode 'Наименование' (barcode) = nameSku(skuBarcode(barcode)) IN recognize;

skuBarcodeIdDate (id, date) = skuBarcode(barcodeIdDate(id, date));

dataBarcodeSku = DATA Barcode (Sku);
CONSTRAINT skuBarcode(dataBarcodeSku(item)) != item CHECKED BY dataBarcodeSku MESSAGE 'Выбран неверный sku для штрих-кода';

barcodeSku(sku) = OVERRIDE [GROUP MIN barcode BY skuBarcode(barcode)](sku), dataBarcodeSku(sku) PERSISTENT;

primaryBarcode 'Основной' (barcode) = barcodeSku(skuBarcode(barcode)) == barcode;
changePrimaryBarcodeSku = ACTION (barcode, sku) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        SET dataBarcodeSku(sku) <- barcode;
    }
}

idBarcodeSku 'Штрих-код' (sku) = idBarcode(barcodeSku(sku)) IN base AGGPROP PERSISTENT;
idBarcodeSkuBatch 'Штрих-код' (batch) = idBarcodeSku(skuBatch(batch));
idBarcodeSkuSkuLedger 'Штрих-код' (skuLedger) = idBarcodeSku(skuSkuLedger(skuLedger));

dataUOMBarcode = DATA UOM (Barcode);
UOMBarcode = OVERRIDE UOMSku(skuBarcode(barcode)), dataUOMBarcode(barcode) PERSISTENT;
shortNameUOMBarcode 'Единица измерения' (barcode) = shortNameUOM(UOMBarcode(barcode));

// Атрибуты вытянутые от sku

skuGroupBarcode (barcode) = skuGroupSku(skuBarcode(barcode));

isWeightBarcode(barcode) = isWeightSku(skuBarcode(barcode));

countryBarcode (barcode) = countrySku(skuBarcode(barcode));
nameCountryBarcode 'Страна' (barcode) = nameCountry(countryBarcode(barcode));

expiryDateBarcodeStock 'Годен до (max.)' (barcode, stock) = expiryDateSkuStock(skuBarcode(barcode), stock);

// Генерация штрих-кодов

barcodeNumeratorSku = ABSTRACT Numerator (Sku);

generateBarcodeSku 'Сгенерировать штрих-код' = ACTION (sku) {
    ADDOBJ Barcode;
    FOR b == addedObject() DO {
        SET skuBarcode(b) <- sku;
        SET idBarcode(b) <- completeBarcode(curStringValueNumerator(barcodeNumeratorSku(sku)));
        EXEC incrementValueNumerator(barcodeNumeratorSku(sku));
    };
} TOOLBAR CONFIRM;

FORM barcodeDialog 'Штрих код'
    OBJECTS b = Barcode
    PROPERTIES (b) READONLY idBarcode, nameSkuBarcode, dateBarcode, shortNameUOMBarcode, amountBarcode, activeBarcode, primaryBarcode//, ordersBarcode
    PROPERTIES (b) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    DIALOG Barcode OBJECT b
;

// ----------------------------------- Форма по вводу штрих-кода ---------------------------- //

barcodeInput 'Штрих-код' = DATA SESSION STRING[13] () EVENTID 'SCANNER';
changeBarcodeInput = ACTION () {
    REQUEST STRING[13] INPUT;
    SET barcodeInput() <- requestedString();
    EXEC formOk();
}
FORM barcodeInput 'Ввод штрих-кода'
    PROPERTIES() barcodeInput ON CHANGE changeBarcodeInput()
;

DESIGN barcodeInput FROM DEFAULT {
    PROPERTY (barcodeInput) {
        caption = 'Штрих-код';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
        editKey = 'F4';
        focusable = TRUE;
    }
}

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

sessionSku = DATA SESSION Sku();

createSkuBarcodeDate = ABSTRACT ACTION LIST (STRING[15], DATE);

skuAddedUser = DATA Sku(User);
setSkuAddedUser = ACTION (sku) NEWSESSION AUTOAPPLY {
    SET skuAddedUser(u) <- sku WHERE u == currentUser();
}

META defineAddDetailDialogBarcodeCustom(object, idetail, skuProp)
    @defineAddDetailDialogBarcodeCustomInner(object, idetail, ###idetail, skuProp);
END

META defineAddDetailDialogBarcodeCustomInner(object, idetail, idetailClass, skuProp)
    idetail###object##Sku(object, sku) = GROUP MAX detail BY object###idetail(detail), skuProp###idetail(detail);

    addDetailBarcode###idetail###object = ACTION (object, barcode) {
        LOCAL dialogBarcodeSku = Sku ();
        SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, date###object(object));

        IF dialogBarcodeSku() IS Sku THEN {
            LOCAL dialogBarcodeDetail = idetailClass();
            SET dialogBarcodeDetail() <- idetail###object##Sku(object, dialogBarcodeSku());
            IF dialogBarcodeDetail() IS idetailClass THEN {
                SET quantity###idetail(detail) <-
                    quantity###idetail(detail) (+) (amountBarcode(barcodeIdDate(barcode, date###object(object))) IF detail IS idetailClass)
                    WHERE detail == dialogBarcodeDetail();
            } ELSE {
                FOR ADDOBJ w = idetailClass DO {
                    SET object###idetail(w) <- object;
                    SET skuProp###idetail(w) <- dialogBarcodeSku();
                    SET quantity###idetail(w) <- amountBarcode(barcodeIdDate(barcode, date###object(object)));
                }
            }
            EXEC setSkuAddedUser(dialogBarcodeSku());
        } ELSE {
            FORM filterSkus MODAL;
            IF formResult() == FormResult.ok THEN {
                FOR s == chosenObject('s') DO {
                    SET dialogBarcodeSku() <- s;
                    FOR ADDOBJ br = Barcode DO {
                        SET idBarcode(br) <- barcode;
                        SET dataDateBarcode(br) <- currentDate();
                        SET skuBarcode(br) <- s;
                        FOR ADDOBJ w = idetailClass DO {
                            SET object###idetail(w) <- object;
                            SET skuProp###idetail(w) <- s;
                            SET quantity###idetail(w) <- amountBarcode(br);
                        }
                    }
                }
            } ELSE {
                EXEC createSkuBarcodeDate(barcode, date###object(object));
                SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, date###object(object));
            }
            EXEC setSkuAddedUser(dialogBarcodeSku());
        }
    }

    addDetailDialogBarcode###idetail###object 'Ввод штрих-кода' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == FormResult.ok THEN
            EXEC addDetailBarcode###idetail###object(object, barcodeInput());
    } TOOLBAR EDITKEY 'F4';

    changeAddDetailInputBarcode###idetail###object = ACTION (object) {
        REQUEST STRING[15] INPUT;
        EXEC addDetailBarcode###idetail###object(object, requestedString());
    };
    addDetailInputBarcode###idetail###object 'Ввод штрих-кода :' (object) = DATA SESSION STRING[15] (###object) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE changeAddDetailInputBarcode###idetail###object(object);
END

META defineAddDetailDialogBarcode(object, skuProp)
    @defineAddDetailDialogBarcodeCustom(object, object##Detail, skuProp);
END

// ----------------------------------- Расширение подбора товаров ---------------------------- //

seekBarcode 'Штрих-код' = DATA SESSION STRING[15] ();
seekSkuBarcode = ACTION (){
    REQUEST STRING[15] INPUT;
    SET seekBarcode() <- NULL;
    SET seekBarcode() <- requestedString();
    EXEC seek(skuBarcodeIdDate(seekBarcode(), currentDate()));
    IF TRUE IF NOT skuBarcodeIdDate(seekBarcode(), currentDate()) THEN
        MESSAGE 'Шрих-код не найден';
    SET seekBarcode() <- NULL;
}

META defineDialogSkuBarcode (form)
    EXTEND FORM form
        PROPERTIES READONLY idBarcodeSku(s), idBarcodeSku(si)
    ;
END

@defineDialogSkuBarcode(dialogSku);

EXTEND FORM skus
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku
;

EXTEND FORM filterSkus
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku
    FILTERS TRUE IF NOT idBarcodeSku(s)
;

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku
    PROPERTIES seekBarcode() TODRAW s FORCE PANEL TOOLBAR ON CHANGE seekSkuBarcode()
;
EXTEND DESIGN currentBalanceSkuStock{
    sts.box{
        PROPERTY(seekBarcode){
            editKey = 'F4';
        }
    }
}
EXTEND FORM balanceSkuStock
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku
    PROPERTIES seekBarcode() TODRAW s FORCE PANEL TOOLBAR ON CHANGE seekSkuBarcode()
;
EXTEND DESIGN balanceSkuStock{
    sts.box{
        PROPERTY(seekBarcode){
            editKey = 'F4';
        }
    }
}

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch
    PROPERTIES seekBarcode() TODRAW bt FORCE PANEL TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcodeIdDate(seekBarcode(), currentDate()) == skuBatch(bt))
;
EXTEND DESIGN currentBalanceBatchStock{
    stb.box{
        PROPERTY(seekBarcode){
            editKey = 'F4';
        }
    }
}

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY idBarcodeSkuSkuLedger AFTER nameSkuSkuLedger
;
EXTEND FORM dialogBatch
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch
;
EXTEND FORM batches
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch
;

EXTEND FORM printBalanceSkusStock
    PROPERTIES(s) idBarcodeSku BEFORE nameSku(s)
;
EXTEND FORM printListBalanceSkusStock
    PROPERTIES(s) idBarcodeSku BEFORE nameSku(s)
;
EXTEND FORM printBalanceBatchesStock
    PROPERTIES(bt) idBarcodeSkuBatch BEFORE nameSkuBatch(bt)
;
EXTEND FORM printListBalanceBatchesStock
    PROPERTIES(bt) idBarcodeSkuBatch BEFORE nameSkuBatch(bt)
;
EXTEND FORM reportBalanceStock
    PROPERTIES(s) idBarcodeSku BEFORE nameSku(s)
    PROPERTIES(bt) idBarcodeSkuBatch BEFORE nameSkuBatch(bt)
;

// ------------------------------------------ Объявление штрих-кода в документе ------------------------------------ //

META defineDocumentDetailBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    prefixB###barcodePack###detail = DATA Barcode (###detail);
    prefixB###idBarcodePack###detail 'Штрих-код упаковки' (detail) = idBarcode(prefixB###barcodePack###detail(detail));
    prefixB###shortNameUOMPack###detail 'Ед. изм. упаковки' = shortNameUOMBarcode(prefixB###barcodePack###detail(detail));
    prefixB###amountPack###detail 'Кол-во в упаковке' = DATA NUMERIC[14,3] (###detail);

    CONSTRAINT skuBarcode(prefixB###barcodePack###detail(detail)) != prefixS###skuProp###detail(detail) CHECKED BY prefixB###barcodePack###detail
        MESSAGE 'Выбран штрих-кода не соответствующий sku';
END

META defineDocumentAbstractDetailBarcodeCustomPrefix (detail, prefixB)
    prefixB###barcodePack###detail = ABSTRACT Barcode (###detail);
    prefixB###idBarcodePack###detail 'Штрих-код упаковки' (detail) = idBarcode(prefixB###barcodePack###detail(detail));
    prefixB###shortNameUOMPack###detail 'Ед. изм. упаковки' = shortNameUOMBarcode(prefixB###barcodePack###detail(detail));
    prefixB###amountPack###detail 'Кол-во в упаковке' = ABSTRACT NUMERIC[14,3] (###detail);
END

META defineDocumentInterfaceBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    @defineDocumentAbstractDetailBarcodeCustomPrefix(detail, prefixB);
    @defineDocumentDetailBarcodeCustomPrefix(user###detail, skuProp, prefixB, prefixS);
    prefixB###barcodePack###detail(detail) += prefixB###barcodePack###user###detail(detail);
    prefixB###amountPack###detail(detail) += prefixB###amountPack###user###detail(detail);
END

META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB, prefixS)
    @defineDocumentInterfaceBarcodeCustomPrefix(object###Detail, skuProp, prefixB, prefixS);
END
META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB)
    @defineDocumentInterfaceBarcodePrefix(object, skuProp, prefixB, );
END

// ------------------------------------------ Автоматическое проставление штрих-кода ------------------------------------ //

META deriveDocumentDetailBarcodeCustom (detail, skuProp, toShowProp)
    barcodePack###detail(detail) <- packBarcodeSku(skuProp###detail(detail)) IF toShowProp###detail(detail)
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(toShowProp###detail(detail));
    amountPack###detail(detail) <- amountBarcode(packBarcodeSku(skuProp###detail(detail))) IF toShowProp###detail(detail)
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(toShowProp###detail(detail));
END


idBarcodeSkuDocumentDetail 'Товар' (documentDetail) = idBarcodeSku(skuDocumentDetail(documentDetail));

EXTEND FORM documents
    PROPERTIES (dd) idBarcodeSkuDocumentDetail BEFORE nameSkuDocumentDetail
;