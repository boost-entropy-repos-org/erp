MODULE Barcode;

REQUIRE System, Integration, Numerator, SkuLedger, StockSkuDocument, Utils;

CLASS Barcode 'Штрих код';
TABLE barcode (Barcode);

idBarcode 'Штрих код' = DATA STRING[15] (Barcode) IN recognize FIXEDCHARWIDTH 15 AGGPROP INDEXED;
@defineExternalizable(barcode, VARSTRING[100], ext);

dataDateBarcode 'Дата действия' = DATA DATE (Barcode);
dateBarcode 'Дата действия' = OVERRIDE (2001_01_01 IF barcode IS Barcode), dataDateBarcode(barcode) IN base PERSISTENT;

barcodeIdDate (id, date) =
    GROUP LAST barcode
          BY idBarcode(barcode), date
          ORDER dateBarcode(barcode), barcode
          WHERE dateBarcode(barcode) <= (date AS DATE) COMPLEX;

barcodeId (id) = barcodeIdDate(id, currentDate());
activeBarcode 'Активный' (barcode) = barcodeId(idBarcode(barcode)) == barcode PERSISTENT;

WHEN CHANGED(idBarcode(b) IF activeBarcode(b)) AND NOT CHANGED(extIdBarcode(b)) DO
    extIdBarcode(b) <- idBarcode(b) IF activeBarcode(b);

dataAmountBarcode 'Множитель' = DATA NUMERIC[14,3] (Barcode);
amountBarcode 'Множитель' = OVERRIDE (1.0 IF barcode IS Barcode), dataAmountBarcode (barcode) PERSISTENT;

completeBarcode = FORMULA STRING[13] PG 'completeBarcode($1)' MS 'dbo.completeBarcode($1)';

allowIncorrectBarcode 'Разрешить некорректные штрихкоды' = DATA BOOLEAN();

CONSTRAINT charLength(idBarcode(barcode)) == 8 AND completeBarcode(left(idBarcode(barcode),7)) != idBarcode(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный штрихкод';

CONSTRAINT charLength(idBarcode(barcode)) == 13 AND completeBarcode(left(idBarcode(barcode),12)) != idBarcode(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный штрихкод';
    
onlyEANBarcode 'Только EAN штрихкоды' = DATA BOOLEAN ();

CONSTRAINT ((charLength(idBarcode(barcode)) > 5 AND charLength(idBarcode(barcode)) < 8) 
    OR (charLength(idBarcode(barcode)) > 8 AND charLength(idBarcode(barcode)) < 13) 
    OR (charLength(idBarcode(barcode)) > 13)) 
    AND onlyEANBarcode()
    MESSAGE 'Штрихкод не соответствует требованиям длины (больше 5, не равен 8 или 13)';
    
setIdBarcodeSku 'Штрихкод обязателен для товара' = DATA BOOLEAN ();

onlyActiveBarcode 'Запретить неактивные штрихкоды' = DATA BOOLEAN ();

CONSTRAINT idBarcode(b) AND onlyActiveBarcode() AND NOT activeBarcode(b)
    MESSAGE 'В системе уже присутствует такой штрихкод';

EXTEND FORM options
    PROPERTIES() allowIncorrectBarcode, onlyEANBarcode, setIdBarcodeSku, onlyActiveBarcode
;

EXTEND DESIGN options {
    commons {
        ADD PROPERTY(allowIncorrectBarcode());   
        ADD PROPERTY(onlyEANBarcode());   
        ADD PROPERTY(setIdBarcodeSku());   
        ADD PROPERTY(onlyActiveBarcode());   
    }
}

// Sku
skuBarcode = DATA Sku(Barcode) IN base NOT NULL DELETE;
nameSkuBarcode 'Наименование' (barcode) = nameSku(skuBarcode(barcode)) IN recognize;

idSkuBarcode 'Код SKU' (b) = idSku(skuBarcode(b)) IN recognize;

skuBarcodeIdDate (id, date) = skuBarcode(barcodeIdDate(id, date));
skuBarcodeId (id) = skuBarcodeIdDate(id, currentDate());
idSkuBarcodeId (id) = idSku(skuBarcodeId(id));

dataBarcodeSku = DATA Barcode (Sku);
CONSTRAINT skuBarcode(dataBarcodeSku(item)) != item CHECKED BY dataBarcodeSku MESSAGE 'Выбран неверный sku для штрихкода';

replaceSkuSku(s, d) += ACTION (s, d){skuBarcode(barcode) <- d WHERE skuBarcode(barcode) == s;}

barcodeSku(sku) = OVERRIDE [= GROUP MIN barcode IF idBarcode(barcode) AND amountBarcode(barcode) == 1.0 AND activeBarcode(barcode)
                        BY skuBarcode(barcode)](sku), dataBarcodeSku(sku) IF activeBarcode(dataBarcodeSku(sku)) PERSISTENT;

primaryBarcode 'Основной' (barcode) = barcodeSku(skuBarcode(barcode)) == barcode;
changePrimaryBarcodeSku = ACTION (barcode, sku) {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        dataBarcodeSku(sku) <- barcode;
    }
}

idBarcodeSku 'Штрихкод' (sku) = idBarcode(barcodeSku(sku)) IN base AGGPROP PERSISTENT;
idBarcodeSkuBatch 'Штрихкод' (batch) = idBarcodeSku(skuBatch(batch));
idBarcodeSkuSkuLedger 'Штрихкод' (skuLedger) = idBarcodeSku(skuSkuLedger(skuLedger));
dataDateBarcodeSku 'Дата' (sku) = dataDateBarcode(barcodeSku(sku));
amountBarcodeSku 'Множитель' (sku) = amountBarcode(barcodeSku(sku));
amountBarcodeSkuBatch 'Множитель' = amountBarcodeSku(skuBatch(batch));

dataUOMBarcode = DATA UOM (Barcode);
UOMBarcode = OVERRIDE UOMSku(skuBarcode(barcode)), dataUOMBarcode(barcode) PERSISTENT;
shortNameUOMBarcode 'Единица измерения' (barcode) = shortNameUOM(UOMBarcode(barcode));
idUOMBarcode 'Код единицы измерения' (barcode) = idUOM(UOMBarcode(barcode));

changeBarcodeSku = ACTION (sku){
    REQUEST STRING[15] INPUT;
    IF requestedString() THEN { 
        IF barcodeSku(sku) THEN {
            idBarcode(b) <- requestedString() WHERE barcodeSku(sku)== b;     
        } ELSE {
            FOR ADDOBJ b = Barcode DO {
                skuBarcode(b) <- sku;
                idBarcode(b) <- requestedString();                
            }    
        }          
    } ELSE
        IF barcodeSku(sku) THEN
            DELETE b WHERE barcodeSku(sku)== b;
}

// Атрибуты вытянутые от sku

skuGroupBarcode (barcode) = skuGroupSku(skuBarcode(barcode));

splitBarcode(barcode) = splitSku(skuBarcode(barcode)); 
passScalesBarcode(barcode) = passScalesSku(skuBarcode(barcode));

countryBarcode (barcode) = countrySku(skuBarcode(barcode));
nameCountryBarcode 'Страна' (barcode) = nameCountry(countryBarcode(barcode));

manufactureDateBarcodeStock 'Дата изготовления' (barcode, stock) = lastManufactureDateSkuStock(skuBarcode(barcode), stock);
expiryDateBarcodeStock 'Годен до' (barcode, stock) = lastExpiryDateSkuStock(skuBarcode(barcode), stock);

// Генерация штрихкодов

barcodeNumeratorSku = ABSTRACT Numerator (Sku);

generateBarcodeSku 'Сгенерировать штрихкод' = ACTION (sku) {
    FOR ADDOBJ b = Barcode DO {
        skuBarcode(b) <- sku;
        idBarcode(b) <- completeBarcode(curStringValueNumerator(barcodeNumeratorSku(sku)));
        incrementValueNumerator(barcodeNumeratorSku(sku));
    };
} TOOLBAR CONFIRM;

FORM barcodeDialog 'Штрих код'
    OBJECTS b = Barcode
    PROPERTIES (b) READONLY idBarcode, nameSkuBarcode, dateBarcode, shortNameUOMBarcode, amountBarcode, activeBarcode, primaryBarcode//, ordersBarcode
    PROPERTIES (b) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    DIALOG Barcode OBJECT b
;

CONSTRAINT idBarcodeSku(sku) AND NOT inactiveSku(sku) AND setIdBarcodeSku()
    MESSAGE 'Для товара должен быть задан штрихкод';

// ---------------------------------- Предобработка штрихкода --------------------------- //
overPreprocessedBarcode = ABSTRACT CASE STRING[15] (STRING[15]);
processedBarcode (b) = OVERRIDE b AS STRING[15], overPreprocessedBarcode(b); 

// ----------------------------------- Форма по вводу штрихкода ---------------------------- //

barcodeInput 'Штрихкод' = DATA LOCAL STRING[15] () EVENTID 'SCANNER';
changeBarcodeInput = ACTION () {
    REQUEST STRING[15] INPUT;
    barcodeInput() <- processedBarcode(requestedString());
    formOk();
}
FORM barcodeInput 'Ввод штрихкода'
    PROPERTIES() barcodeInput ON CHANGE changeBarcodeInput()
;

DESIGN barcodeInput FROM DEFAULT {
    PROPERTY (barcodeInput()) {
        caption = 'Штрихкод';
        font = 'bold 64';
        panelLabelAbove = TRUE;
        editKey = 'F4';
        focusable = TRUE;
    }
}

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

sessionSku = DATA LOCAL Sku();

createSkuBarcodeDate = ABSTRACT ACTION LIST (STRING[15], DATE);

skuAddedUser = DATA Sku(User);
setSkuAddedUser = ACTION (sku) NEWSESSION {
    skuAddedUser(u) <- sku WHERE u == currentUser();
    apply();
}

META defineAddDetailDialogBarcodeCustom(object, idetail, skuProp)
    @defineAddDetailDialogBarcodeCustomInner(object, idetail, ###idetail, skuProp);
END

notFormSku'Не открывать форму SKU  при поиске штрихкода' = DATA BOOLEAN ();
notCreateItem'Не создавать товар на основе при поиске штрихкода' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notFormSku, notCreateItem
;
EXTEND DESIGN options {
    pane {
        NEW barcodeBox {
            caption = 'Штрихкод';
            ADD PROPERTY(notFormSku());
            ADD PROPERTY(notCreateItem());
        }
    }    
}

META defineAddDetailDialogBarcodeCustomInner(object, idetail, idetailClass, skuProp)
    idetail###object##Sku(object, sku) = GROUP MAX (detail) BY object###idetail(detail), skuProp###idetail(detail);

    addDetailBarcode###idetail###object = ACTION (object, barcode) {
        LOCAL dialogBarcodeSku = Sku ();
        dialogBarcodeSku() <- skuBarcodeIdDate(barcode, date###object(object));

        IF dialogBarcodeSku() IS Sku THEN {
            LOCAL dialogBarcodeDetail = idetailClass();
            dialogBarcodeDetail() <- idetail###object##Sku(object, dialogBarcodeSku());
            IF dialogBarcodeDetail() IS idetailClass THEN {
                quantity###idetail(detail) <-
                    quantity###idetail(detail) (+) (amountBarcode(barcodeIdDate(barcode, date###object(object))) IF detail IS idetailClass)
                    WHERE detail == dialogBarcodeDetail();
                seek(dialogBarcodeDetail());
            } ELSE {
                FOR ADDOBJ w = idetailClass DO {
                    object###idetail(w) <- object;
                    skuProp###idetail(w) <- dialogBarcodeSku();
                    quantity###idetail(w) <- amountBarcode(barcodeIdDate(barcode, date###object(object)));
                    seek(w);
                }
            }
            setSkuAddedUser(dialogBarcodeSku());
        } ELSE {
            IF NOT notFormSku() THEN {
                FORM emptyBarcodeSkus MODAL;
                IF formResult() == FormResult.ok THEN {
                    FOR s == chosenObject('s') DO {
                        dialogBarcodeSku() <- s;
                        FOR ADDOBJ br = Barcode DO {
                            idBarcode(br) <- barcode;
                            dataDateBarcode(br) <- currentDate();
                            skuBarcode(br) <- s;
                            FOR ADDOBJ w = idetailClass DO {
                                object###idetail(w) <- object;
                                skuProp###idetail(w) <- s;
                                quantity###idetail(w) <- amountBarcode(br);
                                seek(w);
                            }
                        }
                    }
                } 
            }
            IF NOT notCreateItem() THEN {
                createSkuBarcodeDate(barcode, date###object(object));
                dialogBarcodeSku() <- skuBarcodeIdDate(barcode, date###object(object));
            }
            IF dialogBarcodeSku() THEN {
                setSkuAddedUser(dialogBarcodeSku());
            }
        }
    }

    addDetailDialogBarcode###idetail###object 'Ввод штрихкода' = ACTION (object) {
        FORM barcodeInput MODAL;

        IF formResult() == FormResult.ok THEN
            addDetailBarcode###idetail###object(object, barcodeInput());
    } TOOLBAR EDITKEY 'F4';

    changeAddDetailInputBarcode###idetail###object = ACTION (object) {
        REQUEST STRING[15] INPUT;
        addDetailBarcode###idetail###object(object, processedBarcode(requestedString()));
    };
    addDetailInputBarcode###idetail###object 'Ввод штрихкода:' (object) = DATA LOCAL STRING[15] (###object) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE changeAddDetailInputBarcode###idetail###object(object);
END

META defineAddDetailDialogBarcode(object, skuProp)
    @defineAddDetailDialogBarcodeCustom(object, object##Detail, skuProp);
END

// ----------------------------------- Расширение подбора товаров ---------------------------- //

seekBarcode 'Штрихкод' = DATA LOCAL STRING[15] ();
seekSkuBarcode = ACTION (){
    REQUEST STRING[15] INPUT;
    seekBarcode() <- NULL;
    seekBarcode() <- requestedString();
    seek(skuBarcodeIdDate(seekBarcode(), currentDate()));
    IF NOT skuBarcodeIdDate(seekBarcode(), currentDate()) THEN
        MESSAGE 'Штрихкод не найден';
    seekBarcode() <- NULL;
}

META defineDialogSkuBarcode (form)
    EXTEND FORM form
        PROPERTIES READONLY idBarcodeSku(s), idBarcodeSku(si)
    ;
END

@defineDialogSkuBarcode(dialogSku);

EXTEND FORM skus
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku(s)
;

FORM emptyBarcodeSkus 'Sku'
    TREE skuTree sg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), skuGroupName = nameSkuGroup(sg)
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT
    ORDER BY orderSkuGroup(sg), skuGroupName
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku, shortNameUOMSku
    PROPERTIES() addSku TODRAW s
    PROPERTIES(s) editSku, copySku
    FILTERS isParentSkuGroupSku(sg, s)
    FILTERS NOT idBarcodeSku(s)
    ORDER BY nameSku(s)
;

DESIGN emptyBarcodeSkus FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            ADD skuTree.tree.box;

            ADD s.box {
                fill = 4;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        ADD functions.box;
    }
}

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku(s)
    PROPERTIES seekBarcode() TODRAW sts FORCE PANEL TOOLBAR ON CHANGE seekSkuBarcode()
;
EXTEND DESIGN currentBalanceSkuStock{
    filter{
        ADD PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }
}
EXTEND FORM balanceSkuStock
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku(s)
    PROPERTIES seekBarcode() TODRAW sts FORCE PANEL TOOLBAR ON CHANGE seekSkuBarcode()
;
EXTEND DESIGN balanceSkuStock{
    filter {
        ADD PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }    
}    

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch(bt)
    PROPERTIES seekBarcode() FORCE PANEL TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcodeIdDate(seekBarcode(), currentDate()) == skuBatch(bt))
;
EXTEND DESIGN currentBalanceBatchStock{
    filter{
        ADD PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }    
}

EXTEND FORM balanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch(bt)
    PROPERTIES seekBarcode() FORCE PANEL TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcodeIdDate(seekBarcode(), currentDate()) == skuBatch(bt))
;
EXTEND DESIGN balanceBatchStock{
    filter{
        ADD PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }
}

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY idBarcodeSkuSkuLedger AFTER nameSkuSkuLedger(bil)
;
EXTEND FORM skuLedger
    PROPERTIES(s) READONLY idBarcodeSkuSkuLedger AFTER nameSkuSkuLedger(s)
;
EXTEND FORM dialogBatchStock
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch(bt)
;
EXTEND FORM batches
    PROPERTIES(bt) READONLY idBarcodeSkuBatch AFTER nameSkuBatch(bt)
;

// ------------------------------------------ Объявление штрихкода в документе ------------------------------------ //

META defineDocumentDetailBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    prefixB###barcodePack###detail = DATA Barcode (###detail);
    prefixB###idBarcodePack###detail 'Штрихкод упаковки' (detail) = idBarcode(prefixB###barcodePack###detail(detail));
    prefixB###shortNameUOMPack###detail 'Ед. изм. упаковки' = shortNameUOMBarcode(prefixB###barcodePack###detail(detail));
    prefixB###amountPack###detail 'Кол-во в упаковке' = DATA NUMERIC[14,3] (###detail);

    CONSTRAINT skuBarcode(prefixB###barcodePack###detail(detail)) != prefixS###skuProp###detail(detail) CHECKED BY prefixB###barcodePack###detail
        MESSAGE 'Выбран штрихкода не соответствующий sku';
END

META defineDocumentAbstractDetailBarcodeCustomPrefix (detail, prefixB)
    prefixB###barcodePack###detail = ABSTRACT Barcode (###detail);
    prefixB###idBarcodePack###detail 'Штрихкод упаковки' (detail) = idBarcode(prefixB###barcodePack###detail(detail));
    prefixB###shortNameUOMPack###detail 'Ед. изм. упаковки' = shortNameUOMBarcode(prefixB###barcodePack###detail(detail));
    prefixB###amountPack###detail 'Кол-во в упаковке' = ABSTRACT NUMERIC[14,3] (###detail);
END

META defineDocumentInterfaceBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    @defineDocumentAbstractDetailBarcodeCustomPrefix(detail, prefixB);
    @defineDocumentDetailBarcodeCustomPrefix(user###detail, skuProp, prefixB, prefixS);
    prefixB###barcodePack###detail(detail) += prefixB###barcodePack###user###detail(detail);
    prefixB###amountPack###detail(detail) += prefixB###amountPack###user###detail(detail);
END

META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB, prefixS)
    @defineDocumentInterfaceBarcodeCustomPrefix(object###Detail, skuProp, prefixB, prefixS);
END
META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB)
    @defineDocumentInterfaceBarcodePrefix(object, skuProp, prefixB, );
END

// ------------------------------------------ Автоматическое проставление штрихкода ------------------------------------ //

META deriveDocumentDetailBarcodeCustom (detail, skuProp, toShowProp)
    barcodePack###detail(detail) <- packBarcodeSku(skuProp###detail(detail)) IF toShowProp###detail(detail)
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(toShowProp###detail(detail));
    amountPack###detail(detail) <- amountBarcode(packBarcodeSku(skuProp###detail(detail))) IF toShowProp###detail(detail)
        WHEN CHANGED(skuProp###detail(detail)) OR CHANGED(toShowProp###detail(detail));
END


idBarcodeSkuDocumentDetail 'Товар' (documentDetail) = idBarcodeSku(skuDocumentDetail(documentDetail));

EXTEND FORM documents
    PROPERTIES (dd) idBarcodeSkuDocumentDetail BEFORE nameSkuDocumentDetail(dd)
;