MODULE Barcode;

REQUIRE System, Integration, Numerator, SkuLedger, Utils, Document;

CLASS Barcode 'Штрих код';
TABLE barcode (Barcode);

id 'Штрих код' = DATA VARSTRING[15] (Barcode) IN recognize FIXEDCHARWIDTH 15 AGGPROP INDEXED;
WHEN SETCHANGED (id(Barcode b)) INLINE DO id(b) <- replace(id(b), ' ','');
@defineExternalizable(barcode, VARSTRING[100], ext);

dataDate 'Дата действия' = DATA DATE (Barcode);
date 'Дата действия' = OVERRIDE (2001_01_01 IF Barcode barcode IS Barcode), dataDate(barcode) IN base PERSISTENT;

caption 'Описание' = DATA VARISTRING[30](Barcode);

barcode (id, date) =
    GROUP LAST Barcode barcode
          BY id(barcode), DATE date
          ORDER date(barcode), barcode
          WHERE date(barcode) <= (date AS DATE) COMPLEX;

barcode (VARSTRING[15] id) = barcode(id, currentDate());
active 'Активный' (Barcode barcode) = barcode(id(barcode)) == barcode PERSISTENT;

WHEN CHANGED(id(Barcode b) IF active(b)) AND NOT CHANGED(extId(b)) DO
    extId(b) <- id(b) IF active(b);

dataAmount 'Множитель' = DATA NUMERIC[14,3] (Barcode);
amount 'Множитель' = OVERRIDE (1.0 IF Barcode barcode IS Barcode), dataAmount (barcode) PERSISTENT;

completeBarcode = FORMULA TEXT PG 'completeBarcode($1)', MS 'dbo.completeBarcode($1)';

allowIncorrectBarcode 'Разрешить некорректные штрихкоды' = DATA BOOLEAN();

CONSTRAINT charLength(id(Barcode barcode)) == 8 AND completeBarcode(left(id(barcode),7)) != id(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный EAN-8 штрихкод';

CONSTRAINT charLength(id(Barcode barcode)) == 12 AND completeBarcode('0'+left(id(barcode),11)) != '0'+id(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный UPC штрихкод';

CONSTRAINT charLength(id(Barcode barcode)) == 13 AND completeBarcode(left(id(barcode),12)) != id(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный EAN-13 штрихкод';
    
onlyEANBarcode 'Только EAN или UPC штрихкоды' = DATA BOOLEAN ();

CONSTRAINT ((charLength(id(Barcode barcode)) > 5 AND charLength(id(barcode)) < 8)
    OR (charLength(id(barcode)) > 8 AND charLength(id(barcode)) < 12) 
    OR (charLength(id(barcode)) > 13)
    OR (onlyDigits(id(barcode)) != 1))
    AND onlyEANBarcode()
    MESSAGE 'Штрихкод не является EAN или UPC, так как соответствует требованиям длины (больше 5, не равен 8, 12 или 13)';
    
setIdBarcodeSku 'Штрихкод обязателен для товара' = DATA BOOLEAN ();

onlyActiveBarcode 'Запретить неактивные штрихкоды' = DATA BOOLEAN ();

CONSTRAINT id(Barcode b) AND onlyActiveBarcode() AND NOT active(b)
    MESSAGE 'В системе уже присутствует такой штрихкод';

EXTEND FORM options
    PROPERTIES() allowIncorrectBarcode, onlyEANBarcode, setIdBarcodeSku, onlyActiveBarcode
;

DESIGN options {
    pane {
        NEW barcodeBox {
            caption = 'Штрихкод';
            MOVE PROPERTY(allowIncorrectBarcode());   
            MOVE PROPERTY(onlyEANBarcode());   
            MOVE PROPERTY(setIdBarcodeSku());   
            MOVE PROPERTY(onlyActiveBarcode());   
        }
    }
}

// Sku
sku = DATA Sku(Barcode) IN base NOT NULL DELETE INDEXED;
nameSku 'Наименование' (Barcode barcode) = name(sku(barcode)) IN recognize;

idSku 'Код SKU' (Barcode b) = id(sku(b)) IN recognize;

skuBarcode (VARSTRING[15] id, DATE date) = sku(barcode(id, date));
skuBarcode (VARSTRING[15] id) = skuBarcode(id, currentDate());
idSkuBarcode (VARSTRING[15] id) = id(skuBarcode(id));

dataBarcode = DATA Barcode (Sku);
CONSTRAINT sku(dataBarcode(Sku item)) != item CHECKED BY dataBarcode[Sku] MESSAGE 'Выбран неверный sku для штрихкода';

replace(Sku s, Sku d) += ACTION {sku(Barcode barcode) <- d WHERE sku(barcode) == s;}

barcode(Sku sku) = OVERRIDE [= GROUP MIN Barcode barcode IF id(barcode) AND amount(barcode) == 1.0 AND active(barcode)
                        BY sku(barcode)](sku), dataBarcode(sku) IF active(dataBarcode(sku)) PERSISTENT;

primary 'Основной' (Barcode barcode) = barcode(sku(barcode)) == barcode;
changePrimary(Barcode barcode, Sku sku) = ACTION {
    REQUEST BOOLEAN INPUT;
    IF requestedLogical() THEN {
        dataBarcode(sku) <- barcode;
    }
}

allBarcodes 'Все штрих-коды' = GROUP CONCAT id(Barcode b) IF id(b), ',' BY sku(b) ORDER id(b), b;

idBarcode 'Штрихкод' (Sku sku) = id(barcode(sku)) IN base AGGPROP PERSISTENT INDEXED;
idBarcodeSku 'Штрихкод' (VARSTRING[100] id) = id(barcode(sku(id)));
idBarcodeSku 'Штрихкод' (Batch batch) = idBarcode(sku(batch));
idBarcodeSku 'Штрихкод' (SkuLedger skuLedger) = idBarcode(sku(skuLedger));
dataDateBarcode 'Дата' (Sku sku) = dataDate(barcode(sku));
amountBarcode 'Множитель' (Sku sku) = amount(barcode(sku));
amountBarcodeSku 'Множитель' = amountBarcode(sku(Batch batch));

dataUOM = DATA UOM (Barcode);
UOM = OVERRIDE UOM(sku(Barcode barcode)), dataUOM(barcode) PERSISTENT;
shortNameUOM 'Единица измерения' (Barcode barcode) = shortName(UOM(barcode));
idUOM 'Код единицы измерения' (Barcode barcode) = id(UOM(barcode));

changeBarcode(Sku sku) = ACTION {
    REQUEST VARSTRING[15] INPUT;
    IF requestedString() THEN { 
        IF barcode(sku) THEN {
            id(Barcode b) <- requestedString() WHERE barcode(sku)== b;     
        } ELSE {
            FOR ADDOBJ b = Barcode DO {
                sku(b) <- sku;
                id(b) <- requestedString();                
            }    
        }          
    } ELSE
        IF barcode(sku) THEN
            DELETE Barcode b WHERE barcode(sku)== b;
}

// Атрибуты вытянутые от sku

skuGroup (Barcode barcode) = skuGroup(sku(barcode));

split(Barcode barcode) = split(sku(barcode)); 
passScales(Barcode barcode) = passScales(sku(barcode));

country (Barcode barcode) = country(sku(barcode));
nameCountry 'Страна' (Barcode barcode) = name(country(barcode));

manufactureDate 'Дата изготовления' (Barcode barcode, Stock stock) = lastManufactureDate(sku(barcode), stock);
expiryDate 'Годен до' (Barcode barcode, Stock stock) = lastExpiryDate(sku(barcode), stock);

// Генерация штрихкодов

barcodeNumerator = ABSTRACT Numerator (Sku);
overGenerateBarcode = ACTION ABSTRACT LIST (Sku);

generateBarcode 'Сгенерировать штрихкод'(Sku sku) = ACTION {
    FOR ADDOBJ b = Barcode DO {
        sku(b) <- sku;
        incrementValue(barcodeNumerator(sku));
        id(b) <- completeBarcode(incrementedValue());
        overGenerateBarcode(sku);
    };
} TOOLBAR CONFIRM;

FORM barcodeDialog 'Штрих код'
    OBJECTS b = Barcode
    PROPERTIES (b) READONLY id, nameSku, caption, date, shortNameUOM, amount, active, primary
    DIALOG Barcode OBJECT b
;

CONSTRAINT idBarcode(Sku sku) AND NOT inactive(sku) AND setIdBarcodeSku()
    MESSAGE 'Для товара должен быть задан штрихкод';

// ---------------------------------- Предобработка штрихкода --------------------------- //
overPreprocessedBarcode = ABSTRACT CASE VARSTRING[15] (VARSTRING[15]);
processedBarcode (VARSTRING[15] b) = OVERRIDE b AS VARSTRING[15], overPreprocessedBarcode(b); 

// ----------------------------------- Форма по вводу штрихкода ---------------------------- //

barcodeInput 'Штрихкод' = DATA LOCAL VARSTRING[15] () EVENTID 'SCANNER';
changeBarcodeInput() = ACTION {
    REQUEST VARSTRING[15] INPUT;
    barcodeInput() <- processedBarcode(requestedString());
    formOk();
}
FORM barcodeInput 'Ввод штрихкода'
    PROPERTIES() barcodeInput ON CHANGE changeBarcodeInput()
;

DESIGN barcodeInput {
    PROPERTY (barcodeInput()) {
        caption = 'Штрихкод';
        font = 'bold 64';
        panelCaptionAbove = TRUE;
        editKey = 'F4';
        focusable = TRUE;
    }
}

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

sessionSku = DATA LOCAL Sku();

createSkuBarcode = ACTION ABSTRACT LIST (VARSTRING[15], DATE);

skuAdded = DATA Sku(User);
setAddedUser(Sku sku) = ACTION NEWSESSION {
    skuAdded(User u) <- sku WHERE u == currentUser();
    apply();
}

META defineAddDetailDialogBarcodeCustom(object, idetail, skuProp)
    @defineAddDetailDialogBarcodeCustomInner(object, idetail, ###idetail, skuProp);
END

notFormSku 'Не открывать форму SKU  при поиске штрихкода' = DATA BOOLEAN ();
notCreateItem 'Не создавать товар на основе при поиске штрихкода' = DATA BOOLEAN ();
isShowErrorBarcode() = notFormSku() AND notCreateItem();
errorMessageNotFormSku 'Сообщение об ошибке при поиске штрихкода' = DATA VARSTRING[100]();

EXTEND FORM options
    PROPERTIES () notFormSku, notCreateItem, errorMessageNotFormSku SHOWIF isShowErrorBarcode()
;
DESIGN options {
    barcodeBox {
        MOVE PROPERTY(notFormSku());
        MOVE PROPERTY(notCreateItem());
        MOVE PROPERTY(errorMessageNotFormSku());
    }    
}

META defineAddDetailDialogBarcodeCustomInner(object, idetail, idetailClass, skuProp)
    idetail(object, sku) = GROUP MAX (###idetail detail) BY object(detail), skuProp(detail);

    addDetailBarcode###idetail(###object object, VARSTRING[15] barcode) = ACTION {
        LOCAL dialogBarcode###skuProp = Sku ();
        dialogBarcode###skuProp() <- skuProp##Barcode(barcode, date(object));

        IF dialogBarcode###skuProp() IS Sku THEN {
            LOCAL dialogBarcodeDetail = idetailClass();
            dialogBarcodeDetail() <- idetail(object, dialogBarcode###skuProp());
            IF dialogBarcodeDetail() IS idetailClass THEN {
                quantity(###idetail detail) <-
                    quantity(detail) (+) (amount(barcode(barcode, date(object))) IF detail IS idetailClass)
                    WHERE detail == dialogBarcodeDetail();
                seek(dialogBarcodeDetail());
            } ELSE {
                FOR ADDOBJ w = idetailClass DO {
                    object(w) <- object;
                    skuProp(w) <- dialogBarcode###skuProp();
                    quantity(w) <- amount(barcode(barcode, date(object)));
                    seek(w);
                }
            }
            setAddedUser(dialogBarcode###skuProp());
        } ELSE {
            IF NOT notForm###skuProp() THEN {
                FORM emptyBarcodeSkus MODAL;
                IF formResult() == FormResult.ok THEN {
                    FOR Object s == chosenObject('s') DO {
                        dialogBarcode###skuProp() <- s;
                        FOR ADDOBJ br = Barcode DO {
                            id(br) <- barcode;
                            dataDate(br) <- currentDate();
                            skuProp(br) <- s;
                            FOR ADDOBJ w = idetailClass DO {
                                object(w) <- object;
                                skuProp(w) <- s;
                                quantity(w) <- amount(br);
                                seek(w);
                            }
                        }
                    }
                } 
            }
            IF NOT notCreateItem() THEN {
                create###skuProp##Barcode(barcode, date(object));
                dialogBarcode###skuProp() <- skuProp##Barcode(barcode, date(object));
            }
            IF dialogBarcode###skuProp() THEN {
                setAddedUser(dialogBarcode###skuProp());
            }
            IF notForm###skuProp() AND notCreateItem() AND NOT dialogBarcodeSku() AND errorMessageNotFormSku() THEN MESSAGE errorMessageNotFormSku();
        }
    }

    addDetailDialogBarcode###idetail 'Ввод штрихкода'(###object object) = ACTION {
        FORM barcodeInput MODAL;

        IF formResult() == FormResult.ok THEN
            addDetailBarcode###idetail(object, barcodeInput());
    } TOOLBAR EDITKEY 'F4';

    changeAddDetailInputBarcode###idetail(###object object) = ACTION {
        REQUEST VARSTRING[15] INPUT;
        addDetailBarcode###idetail(object, processedBarcode(requestedString()));
    };
    addDetailInputBarcode###idetail 'Ввод штрихкода:' (object) = DATA LOCAL VARSTRING[15] (###object) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE changeAddDetailInputBarcode###idetail(object);
END

META defineAddDetailDialogBarcode(object, skuProp)
    @defineAddDetailDialogBarcodeCustom(object, object##Detail, skuProp);
END

// ----------------------------------- Расширение подбора товаров ---------------------------- //

seekBarcode 'Штрихкод' = DATA LOCAL VARSTRING[15] ();
seekSkuBarcode() = ACTION {
    REQUEST VARSTRING[15] INPUT;
    seekBarcode() <- NULL;
    seekBarcode() <- requestedString();
    seek(skuBarcode(seekBarcode(), currentDate()));
    IF NOT skuBarcode(seekBarcode(), currentDate()) THEN
        MESSAGE 'Штрихкод не найден';
    seekBarcode() <- NULL;
}

EXTEND FORM skus
    PROPERTIES(s) READONLY idBarcode AFTER name(s)
;

FORM emptyBarcodeSkus 'Sku'
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER BY order(sg), skuGroupName
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES() addSku TODRAW s
    PROPERTIES(s) edit, copy
    FILTERS isParent(sg, s)
    FILTERS NOT idBarcode(s)
    ORDER BY name(s)
;

DESIGN emptyBarcodeSkus {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            MOVE skuTree.tree.box;

            MOVE s.box {
                fill = 4;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE functions.box;
    }
}

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s) BACKGROUND backgroundBalance(s,st) READONLY idBarcode AFTER name(s)
    PROPERTIES seekBarcode() TODRAW sts FORCE PANEL TOOLBAR ON CHANGE seekSkuBarcode()
;
DESIGN currentBalanceSkuStock{
    filter{
        MOVE PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }
}
EXTEND FORM balanceSkuStock
    PROPERTIES(s) BACKGROUND backgroundBalance(s,st,t) READONLY idBarcode AFTER name(s)
    PROPERTIES seekBarcode() TODRAW sts FORCE PANEL TOOLBAR ON CHANGE seekSkuBarcode()
;
DESIGN balanceSkuStock{
    filter {
        MOVE PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }    
}    

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
    PROPERTIES seekBarcode() FORCE PANEL TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcode(seekBarcode(), currentDate()) == sku(bt))
;
DESIGN currentBalanceBatchStock{
    filter{
        MOVE PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }    
}

EXTEND FORM balanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
    PROPERTIES seekBarcode() FORCE PANEL TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcode(seekBarcode(), currentDate()) == sku(bt))
;
DESIGN balanceBatchStock{
    filter{
        MOVE PROPERTY(seekBarcode()) {
            editKey = 'F4';
        }
    }
}

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY idBarcodeSku AFTER nameSku(bil)
;
EXTEND FORM skuLedger
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku(s)
;
EXTEND FORM dialogBatchStockOut
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
;
EXTEND FORM dialogBatchStockIn
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
;
EXTEND FORM batches
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
;

// ------------------------------------------ Объявление штрихкода в документе ------------------------------------ //

META defineDocumentDetailBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    barcodePack = DATA Barcode (###detail);
    idBarcodePack 'Штрихкод упаковки' (###detail detail) = id(barcodePack(detail));
    shortNameUOMPack 'Ед. изм. упаковки' = shortNameUOM(barcodePack(###detail detail));
    amountPack 'Кол-во в упаковке' = DATA NUMERIC[14,3] (###detail);

    CONSTRAINT skuProp(barcodePack(###detail detail)) != skuProp(detail) CHECKED BY barcodePack[###detail]
        MESSAGE 'Выбран штрихкод не соответствующий sku';
END

META defineDocumentAbstractDetailBarcodeCustomPrefix (detail, prefixB)
    barcodePack = ABSTRACT Barcode (###detail);
    idBarcodePack 'Штрихкод упаковки' (###detail detail) = id(barcodePack(detail));
    shortNameUOMPack 'Ед. изм. упаковки' = shortNameUOM(barcodePack(###detail detail));
    amountPack 'Кол-во в упаковке' = ABSTRACT NUMERIC[14,3] (###detail);
END

META defineDocumentInterfaceBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    @defineDocumentAbstractDetailBarcodeCustomPrefix(detail, prefixB);
    @defineDocumentDetailBarcodeCustomPrefix(user###detail, skuProp, prefixB, prefixS);
    barcodePack(User###detail detail) += barcodePack(detail);
    amountPack(User###detail detail) += amountPack(detail);
END

META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB, prefixS)
    @defineDocumentInterfaceBarcodeCustomPrefix(object###Detail, skuProp, prefixB, prefixS);
END
META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB)
    @defineDocumentInterfaceBarcodePrefix(object, skuProp, prefixB, );
END

// ------------------------------------------ Автоматическое проставление штрихкода ------------------------------------ //

META deriveDocumentDetailBarcodeCustom (detail, skuProp, toShowProp)
    barcodePack(###detail detail) <- packBarcode(skuProp(detail)) IF toShowProp(detail)
        WHEN CHANGED(skuProp(detail)) OR CHANGED(toShowProp(detail));
    amountPack(###detail detail) <- amount(packBarcode(skuProp(detail))) IF toShowProp(detail)
        WHEN CHANGED(skuProp(detail)) OR CHANGED(toShowProp(detail));
END


FORM barcodeSku 'Штрихкоды'
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) READONLY name

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY id, date, shortNameUOM,  amount, active, primary
                
    ORDER BY date(b)
    FILTERS sku(b) == s
;
DESIGN barcodeSku {
    main {
        preferredSize = (768, 400);
    }
}

showBarcode'Показать штрихкоды' (Sku sku) = ACTION FORM barcodeSku OBJECTS s = sku MODAL SHORTCUT idBarcode[Sku];

META defineBarcodeSku(detail)
    showBarcodeSku 'Показать штрихкоды' (###detail detail) = ACTION
        FOR s == sku(detail) DO
            FORM barcodeSku OBJECTS s = s MODAL 
    SHORTCUT idBarcodeSku[###detail];
END