MODULE StockContract;

REQUIRE Contract, Stock;

NAMESPACE Contract;

// ------------------------------------ Договора на перемещение товаров ---------------- //

META defineInStockGroupObject(prop, object, objectClass)

    all###prop##Stocks 'Отм' = DATA BOOLEAN (objectClass);

    dataIn###prop 'Отм.' = DATA BOOLEAN (StockGroup, objectClass);

    levelParent###prop##Stock (object, stockGroup) =
        GROUP MIN level(StockGroup stockGroup, StockGroup parent) IF dataIn###prop(parent, ###object object)
              BY object, stockGroup PERSISTENT;
    nearestParent###prop##contract (###object object, StockGroup stockGroup) = stockGroup(stockGroup, levelParent###prop##Stock(object, stockGroup));
    nearestIn###prop (StockGroup stockGroup, ###object object) =
        dataIn###prop(nearestParent###prop##contract(object, stockGroup), object) PERSISTENT;

    in###prop 'Отм' (StockGroup stockGroup, ###object object) =
        OVERRIDE all###prop##Stocks(object) AND stockGroup IS StockGroup,
                 nearestIn###prop(stockGroup, object),
                 dataIn###prop(stockGroup, object);

    // Отметка для складов
    dataIn###prop 'Отм.' = DATA BOOLEAN (Stock, objectClass);
    in###prop 'Отм' (Stock stock, ###object object) =
        (OVERRIDE in###prop(stockGroup(stock), object),
                 dataIn###prop(stock, object)) IF in(prop(object), stock) AND active(stock) PERSISTENT;
    replace(Stock s, Stock o) += ACTION {ASSIGN dataIn###prop(o, ###object object) <- TRUE WHERE in###prop(s, object) AND NOT in###prop(o, object);}                   
                 
    countDataIn###prop##StockGroups = GROUP SUM 1 IF  dataIn###prop(StockGroup stockGroup, ###object object) BY object;            
                                  
    backgroundAll###prop##Stocks 'Цвет' (###object object) = IF all###prop##Stocks(object) THEN RGB(0,0,0)
        ELSE RGB(203,203,203) IF countDataIn###prop##StockGroups(object);      
     
    quantityChildWithIn###prop (group, object) = GROUP SUM 1 IF dataIn###prop(StockGroup childGroup, ###object object) AND isParent(childGroup, StockGroup group) BY group, object PERSISTENT;
    quantityParentWithIn###prop (group, object) = GROUP SUM 1 IF dataIn###prop(StockGroup parentGroup, ###object object) AND isParent(StockGroup group, parentGroup) BY group, object PERSISTENT;          
          
    backgroundIn###prop 'Цвет' (StockGroup group, ###object object) = CASE
        WHEN dataIn###prop(group, object) THEN RGB(0,0,0)
        WHEN nearestIn###prop(group, object) THEN RGB(230,248,250) 
        WHEN quantityChildWithIn###prop(group, object) != descendantNumber(group) AND NOT quantityParentWithIn###prop(group, object) THEN RGB(203,203,203);
        
    backgroundIn###prop 'Цвет' (Stock stock, ###object object) = IF dataIn###prop(stock, object) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in###prop(stockGroup(stock), object);  
END

META defineInStockGroupObject(prop, object)
    @defineInStockGroupObject(prop, object, ###object);
END

CLASS ABSTRACT ContractSku 'Договор на поставку' : Contract;
TABLE contractSku(ContractSku);

word 'Файл договора'  = ABSTRACT WORDFILE (ContractSku);
saveWord 'Загрузить файл договора' (ContractSku contractSku) = ACTION LOADFILE word(contractSku);
openWord 'Просмотреть файл договора' (ContractSku contractSku) = ACTION OPENFILE word(contractSku);
word(ContractSku contract) += word(contract);

id 'Код' = ABSTRACT VARSTRING[100] (ContractSku) IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 15;
id(ContractSku c) += id(c);

CLASS UserContractSku 'Договор на поставку (польз.)' : ContractSku;
@defineDocumentInterfaceHeaderNumber(ContractSku);
@defineExternalizable(userContractSku, VARSTRING[100]);
@defineNumeratedID(UserContractSku, 'Договоры (код)', Id);

id(UserContractSku c) += id(c);

number (ContractSku contract) += number(contract);
series (ContractSku contract) += series(contract);

@defineNumeratedDefault(UserContractSku, 'Договоры', 'ДП');

word 'Файл договора' (UserContractSku) = DATA WORDFILE (UserContractSku);
saveWord 'Загрузить файл договора' (UserContractSku userContractSku) = ACTION LOADFILE word(userContractSku);
openWord 'Просмотреть файл договора' (UserContractSku userContractSku) = ACTION OPENFILE word(userContractSku);
word(UserContractSku contract) += word(contract);

supplier = DATA LegalEntity (ContractSku);
nameSupplier 'Поставщик' (ContractSku contract) = name(supplier(contract)) IN recognize MINCHARWIDTH 20 PREFCHARWIDTH 40;
partyA (ContractSku contract) += supplier(contract);

//inSupplierStockContractSku 'Вкл.'  = DATA BOOLEAN (Stock, ContractSku);
TABLE stockGroupContractSku (StockGroup, ContractSku);
@defineInStockGroupObject(supplier, contractSku);
inPartyA (Stock stock, ContractSku contract) += inSupplier(stock,contract);

countSuppliersStock = GROUP SUM 1 IF inSupplier(Stock stock,ContractSku contract) BY contract;

CONSTRAINT supplier(ContractSku contract) AND inSupplier(Stock stock, contract) AND NOT
    in(supplier(contract), stock) MESSAGE 'Поставщик и склад поставщика для договора не имеют связи';


//--------------------------------------------//
customer = DATA LegalEntity (ContractSku);
nameCustomer 'Покупатель' (ContractSku contract) = name(customer(contract)) IN recognize MINCHARWIDTH 20 PREFCHARWIDTH 40;
partyB (ContractSku contract) += customer(contract);

@defineInStockGroupObject(customer, contractSku);

inPartyB (Stock stock, ContractSku contract) += inCustomer(stock,contract);

countCustomersStock= GROUP SUM 1 IF inCustomer(Stock stock,ContractSku contract) BY contract;

CONSTRAINT customer(ContractSku contract) AND inCustomer(Stock stock, contract) AND NOT
    in(customer(contract), stock) MESSAGE 'Покупатель и склад покупателя для договора не имеют связи';

TABLE supplierCustomer(LegalEntity, LegalEntity);
@defineContractDefault(contractSku, LegalEntity, Stock, LegalEntity, Stock, supplier, customer);

//объединение организаций
replace(LegalEntity l, LegalEntity o) += ACTION {
    supplier(ContractSku contract) <- o WHERE supplier(contract) == l;
    customer(ContractSku contract) <- o WHERE customer(contract) == l;
}   

//для договора

CLASS ContractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
}
FORM contractSkuTypes 'Типы договоров на поставку'
    OBJECTS t = ContractSkuType
    PROPERTIES(t) READONLY staticCaption
    DIALOG ContractSkuType OBJECT t
;

type = DATA ContractSkuType (ContractSku);
nameType 'Тип договора' (ContractSku contract) = staticCaption(type(contract)) IN base;
isSaleType(ContractSku contract) = type(contract) == ContractSkuType.sale;

type (ContractSku o) <- ContractSkuType.sale WHEN SET(o IS ContractSku);

// Формы
FORM userContractSku 'Договор на поставку товаров'
    OBJECTS c = UserContractSku FIXED PANEL
    PROPERTIES(c) nameSupplier, nameCustomer, isDataDefault, nameType,
                  nameNumerator, number, series, dateFrom, dateTo,
                  nameCurrency,  nameTypeExchange, descriptionPaymentCondition,
                  note, saveWord, openWord, id SHOWIF showIDs()

        TREE stockTree a=STRING[3], sg = StockGroup PARENT parent
        PROPERTIES READONLY OBJVALUE(a),name(sg)
        PROPERTIES(c) allSupplierStocks TODRAW a FORCE GRID BACKGROUND backgroundAllSupplierStocks(c)
        PROPERTIES(sg,c) inSupplier BACKGROUND backgroundInSupplier(sg,c)
        ORDER BY name(sg)
        FILTERS stringEqualsAll(a)
        FILTERS countSupplierStock(sg) OR countCompanyStock(sg)
    
        OBJECTS ss = Stock
        PROPERTIES READONLY  name(ss), id(ss) SHOWIF showIDs()
        PROPERTIES(ss,c)    inSupplier BACKGROUND backgroundInSupplier(ss,c)
        FILTERS ss IS Stock AND NOT sg IS StockGroup OR isParent(sg, ss),
                in(supplier(c), ss),
                isCompany(ss) OR isSupplier(ss)
        FILTERGROUP filters
                FILTER 'Отм.'  inSupplier(ss,c) 'F10'   

        TREE stockTree1 b=STRING[3], sg1 = StockGroup PARENT parent
        PROPERTIES READONLY OBJVALUE(b), name(sg1)
        PROPERTIES(c) allCustomerStocks TODRAW b FORCE GRID BACKGROUND backgroundAllCustomerStocks(c)
        PROPERTIES(sg1,c) inCustomer BACKGROUND backgroundInCustomer(sg1,c)
        ORDER BY name(sg1)
        FILTERS stringEqualsAll(b)
        FILTERS countCustomerStock(sg1) OR countCompanyStock(sg1)
    
        OBJECTS ss1 = Stock
        PROPERTIES READONLY  name(ss1), id(ss1) SHOWIF showIDs()
        PROPERTIES(ss1,c)    inCustomer BACKGROUND backgroundInCustomer(ss1,c)
        FILTERS ss1 IS Stock AND NOT sg1 IS StockGroup OR isParent(sg1, ss1),
                in(customer(c), ss1),
                isCompany(ss1) OR isCustomer(ss1)
        FILTERGROUP filters1
                FILTER 'Отм.'  inCustomer(ss1,c) 'F10'   
      
    EDIT UserContractSku OBJECT c

;


DESIGN userContractSku {
    NEW north {
        type = CONTAINERH;
        MOVE c.numbered {
            type = CONTAINERH;
        }
        MOVE c.contract {
        MOVE PROPERTY (id(c));
            type = CONTAINERH;
        }
    }
    NEW params {
        type = COLUMNS;
        columns = 3;
        caption = 'Параметры';
        MOVE PROPERTY(nameSupplier(c));
        MOVE PROPERTY(nameCustomer(c));
        MOVE PROPERTY(nameType(c));
        MOVE PROPERTY(isDataDefault(c));
    }
    MOVE c.payment;
    NEW text {
        type = CONTAINERH;
        caption = 'Содержание';
        MOVE PROPERTY(saveWord(c));
        MOVE PROPERTY(openWord(c));
    }
    NEW tabContainer{
        fill = 1;
        type = TABBED;
        NEW supplier{
            fill = 1;
            type = SPLITH;
            caption = 'Склады поставщика';
            MOVE stockTree.tree.box {caption = 'Группа складов';}
            MOVE ss.box { fill = 2;}
        }
        NEW customer{
            fill = 1;
            type = SPLITH;
            caption = 'Склады покупателя';
            MOVE stockTree1.tree.box {caption = 'Группа складов';}
            MOVE ss1.box { fill = 2;}
        }
        NEW noteContainer {
            fill = 1;
            caption = 'Примечание';
            MOVE PROPERTY(note(c)) {
                panelCaptionAbove = TRUE;
                fill = 1;
            }
        }
    }
    MOVE functions.box;
}

WHEN SESSION FORMS userContractSku SETCHANGED(supplier(UserContractSku contract)) DO {
    currency(contract) <- OVERRIDE defaultCurrency(), currency(supplier(contract));
}

edit 'Редактировать' = ACTION EDITFORM UserContractSku;
edit(UserContractSku userContractSku) += ACTION edit(userContractSku);

addUserContractSkuSupplierCustomer 'Добавить'(LegalEntity supplier, LegalEntity customer) = ACTION NESTEDSESSION{
    FOR ADDOBJ uc = UserContractSku DO {
        supplier(uc) <- supplier;
        customer(uc) <- customer;
        currency(uc) <- OVERRIDE defaultCurrency(), currency(supplier);
        FORM userContractSku OBJECTS c = uc MANAGESESSION DOCKEDMODAL;
    }
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

is (UserContractSku contractSku) = contractSku IS UserContractSku;

addUserContractSku 'Добавить' = ACTION ADDFORM UserContractSku;

EXTEND FORM contracts
    PROPERTIES(c) READONLY nameType
    PROPERTIES() addUserContractSku TODRAW c FORCE PANEL
;

FORM contractSkus 'Договоры на поставку'
    OBJECTS c = ContractSku   
    PROPERTIES(c) READONLY nameSupplier, namePartyAStocks, nameCustomer, namePartyBStocks, nameType,
                  seriesNumber[UserContractSku], dateFrom, dateTo,
                  nameCurrency,  nameTypeExchange, note
    PROPERTIES  addUserContractSku() TODRAW c FORCE PANEL, edit(c)

    DIALOG ContractSku OBJECT c
;

NAVIGATOR {
    stockMasterData {
        ADD contracts;
    }
}

// ----------------------------- Расширяем форму организаций ------------------------------------------- //

isCustomer(LegalEntity l,UserContractSku css) = isCustomer(l) AND is(css);
isSupplier(LegalEntity l,UserContractSku csc) = isSupplier(l) AND is(csc);
EXTEND FORM legalEntity

    OBJECTS css = UserContractSku FIXED GRID
    PROPERTIES(css) SHOWIF isCustomer(l) READONLY seriesNumber, nameType, dateFrom,
                    dateTo, nameCurrency, note, descriptionPaymentCondition, namePartyAStocks, namePartyBStocks
    PROPERTIES      SHOWIF isCustomer(l) addUserContractSkuSupplierCustomer(s, l) TODRAW css FORCE PANEL TOOLBAR
    PROPERTIES(css) SHOWIF isCustomer(l) EDITNESTEDFORM
    PROPERTIES(css) DELETESESSION SHOWIF isCustomer(l,css)
    
    FILTERS customer(css) == l,
            supplier(css) == s

//    FILTERGROUP filters
//        FILTER 'Есть договор' 'F10' countContractPartyAPartyB(s, l)

    OBJECTS csc = UserContractSku FIXED  GRID
    PROPERTIES(csc) SHOWIF isSupplier(l) READONLY seriesNumber, nameType, dateFrom,
                    dateTo, nameCurrency, note, descriptionPaymentCondition
    PROPERTIES SHOWIF isSupplier(l) addUserContractSkuSupplierCustomer(l, c) TODRAW csc FORCE PANEL TOOLBAR
    PROPERTIES(csc) SHOWIF isSupplier(l) EDITNESTEDFORM
    PROPERTIES(csc) DELETESESSION SHOWIF isSupplier(l,csc)
    FILTERS customer(csc) == c,
            supplier(csc) == l

//    FILTERGROUP filters
//        FILTER 'Есть договор' 'F8' countContractPartyAPartyB(l, c)
;

DESIGN legalEntity {
    docPurchaseContainer {
        MOVE css.box {
            caption = 'Договоры на поставку';
        }
    }
    docSaleContainer {
        MOVE csc.box {
            caption = 'Договоры на поставку';
        }
    }
}
