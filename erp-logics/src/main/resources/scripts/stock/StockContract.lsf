MODULE StockContract;

REQUIRE Contract, Stock;

NAMESPACE Contract;

// ------------------------------------ Договора на перемещение товаров ---------------- //

META defineInStockGroupObject(prop, object, objectClass)

    all###prop##Stocks###object 'Отм' = DATA BOOLEAN (objectClass);

    dataIn###prop##StockGroup###object 'Отм.' = DATA BOOLEAN (StockGroup, objectClass);

    levelParent###prop##Stock###object###stockGroup (object, stockGroup) =
        GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataIn###prop##StockGroup###object(parent, object)
              BY object, stockGroup PERSISTENT;
    nearestParent###prop##object###StockGroup (object, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParent###prop##Stock###object###stockGroup(object, stockGroup));
    nearestIn###prop##StockGroup###object (stockGroup, object) =
        dataIn###prop##StockGroup###object(nearestParent###prop##object###StockGroup(object, stockGroup), object) PERSISTENT;

    in###prop##StockGroup###object 'Отм' (stockGroup, object) =
        OVERRIDE all###prop##Stocks###object(object) AND stockGroup IS StockGroup,
                 nearestIn###prop##StockGroup###object(stockGroup, object),
                 dataIn###prop##StockGroup###object(stockGroup, object);

    // Отметка для складов
    dataIn###prop##Stock###object 'Отм.' = DATA BOOLEAN (Stock, objectClass);
    in###prop##Stock###object 'Отм' (stock, object) =
        (OVERRIDE in###prop##StockGroup###object(stockGroupStock(stock), object),
                 dataIn###prop##Stock###object(stock, object)) IF inLegalEntityStock(prop###object(object), stock) AND activeStock(stock) PERSISTENT;
    replaceStockStock(s, o) += ACTION (s, o){ASSIGN dataIn###prop##Stock###object(o, object) <- TRUE WHERE in###prop##Stock###object(s, object) AND NOT in###prop##Stock###object(o, object);}                   
                 
    countDataIn###prop##StockGroups###object = GROUP SUM 1 IF  dataIn###prop##StockGroup###object(stockGroup, object) BY object;            
                                  
    background###all###prop##Stocks###object 'Цвет' (object) = IF all###prop##Stocks###object(object) THEN RGB(0,0,0)
        ELSE RGB(203,203,203) IF countDataIn###prop##StockGroups###object(object);      
     
    quantityChildWith###in###prop##StockGroup###object (group, object) = GROUP SUM 1 IF dataIn###prop##StockGroup###object(childGroup, object) AND isParentStockGroupStockGroup(childGroup, group) BY group, object PERSISTENT;
    quantityParentWith###in###prop##StockGroup###object (group, object) = GROUP SUM 1 IF dataIn###prop##StockGroup###object(parentGroup, object) AND isParentStockGroupStockGroup(group, parentGroup) BY group, object PERSISTENT;          
          
    background###in###prop##StockGroup###object 'Цвет' (group, object) = CASE
        WHEN dataIn###prop##StockGroup###object(group, object) THEN RGB(0,0,0)
        WHEN nearestIn###prop##StockGroup###object(group, object) THEN RGB(230,248,250) 
        WHEN quantityChildWith###in###prop##StockGroup###object(group, object) != descendantNumberStockGroup(group) AND NOT quantityParentWith###in###prop##StockGroup###object(group, object) THEN RGB(203,203,203);
        
    background###in###prop##Stock###object 'Цвет' (stock, object) = IF dataIn###prop##Stock###object(stock, object) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in###prop##StockGroup###object(stockGroupStock(stock), object);  
END

META defineInStockGroupObject(prop, object)
    @defineInStockGroupObject(prop, object, ###object);
END

CLASS ABSTRACT ContractSku 'Договор на поставку' : Contract;
TABLE contractSku(ContractSku);

wordContractSku 'Файл договора'  = ABSTRACT WORDFILE (ContractSku);
saveWordContractSku 'Загрузить файл договора' (contractSku) = ACTION LOADFILE wordContractSku(contractSku);
openWordContractSku 'Просмотреть файл договора' (contractSku) = ACTION OPENFILE wordContractSku(contractSku);
wordContract(contract) += wordContractSku(contract);

idContractSku 'Код' = ABSTRACT VARSTRING[100] (ContractSku) IN recognize MINCHARWIDTH 10 PREFCHARWIDTH 15;
idContract(c) += idContractSku(c);

CLASS UserContractSku 'Договор на поставку (польз.)' : ContractSku;
@defineDocumentInterfaceHeaderNumber(ContractSku);
@defineExternalizable(userContractSku, VARSTRING[100]);
@defineNumeratedID(UserContractSku, 'Договоры (код)', Id);

idContractSku(c) += idUserContractSku(c);

numberContract (contract) += numberContractSku(contract);
seriesContract (contract) += seriesContractSku(contract);

@defineNumeratedDefault(UserContractSku, 'Договоры', 'ДП');

wordUserContractSku 'Файл договора' (UserContractSku) = DATA WORDFILE (UserContractSku);
saveWordUserContractSku 'Загрузить файл договора' (userContractSku) = ACTION LOADFILE wordUserContractSku(userContractSku);
openWordUserContractSku 'Просмотреть файл договора' (userContractSku) = ACTION OPENFILE wordUserContractSku(userContractSku);
wordContractSku(contract) += wordUserContractSku(contract);

supplierContractSku = DATA LegalEntity (ContractSku);
nameSupplierContractSku 'Поставщик' (contract) = nameLegalEntity(supplierContractSku(contract)) IN recognize MINCHARWIDTH 20 PREFCHARWIDTH 40;
partyAContract (contract) += supplierContractSku(contract);

//inSupplierStockContractSku 'Вкл.'  = DATA BOOLEAN (Stock, ContractSku);
TABLE stockGroupContractSku (StockGroup, ContractSku);
@defineInStockGroupObject(supplier, contractSku);
inPartyAStockContract (stock, contract) += inSupplierStockContractSku(stock,contract);

countSuppliersStockContractSku = GROUP SUM 1 IF inSupplierStockContractSku(stock,contract) BY contract;

CONSTRAINT supplierContractSku(contract) AND inSupplierStockContractSku(stock, contract) AND NOT
    inLegalEntityStock(supplierContractSku(contract), stock) MESSAGE 'Поставщик и склад поставщика для договора не имеют связи';


//--------------------------------------------//
customerContractSku = DATA LegalEntity (ContractSku);
nameCustomerContractSku 'Покупатель' (contract) = nameLegalEntity(customerContractSku(contract)) IN recognize MINCHARWIDTH 20 PREFCHARWIDTH 40;
partyBContract (contract) += customerContractSku(contract);

@defineInStockGroupObject(customer, contractSku);

inPartyBStockContract (stock, contract) += inCustomerStockContractSku(stock,contract);

countCustomersStockContractSku= GROUP SUM 1 IF inCustomerStockContractSku(stock,contract) BY contract;

CONSTRAINT customerContractSku(contract) AND inCustomerStockContractSku(stock, contract) AND NOT
    inLegalEntityStock(customerContractSku(contract), stock) MESSAGE 'Покупатель и склад покупателя для договора не имеют связи';

TABLE supplierCustomer(LegalEntity, LegalEntity);
@defineContractDefault(contractSku, LegalEntity, Stock, LegalEntity, Stock, supplier, customer);

//объединение организаций
replaceLegalEntityLegalEntity(l, o) += ACTION (l, o){
    supplierContractSku(contract) <- o WHERE supplierContractSku(contract) == l;
    customerContractSku(contract) <- o WHERE customerContractSku(contract) == l;
}   

//для договора

CLASS ContractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
}
FORM contractSkuTypes 'Типы договоров на поставку'
    OBJECTS t = ContractSkuType
    PROPERTIES(t) READONLY staticCaption
    DIALOG ContractSkuType OBJECT t
;

typeContractSku = DATA ContractSkuType (ContractSku);
nameTypeContractSku 'Тип договора' (contract) = staticCaption(typeContractSku(contract)) IN base;
isSaleTypeContract(contract) = typeContractSku(contract) == ContractSkuType.sale;

typeContractSku (o) <- ContractSkuType.sale WHEN SET(o IS ContractSku);

// Формы
FORM userContractSku 'Договор на поставку товаров'
    OBJECTS c = UserContractSku FIXED PANEL
    PROPERTIES(c) nameSupplierContractSku, nameCustomerContractSku, isDataDefaultContractSku, nameTypeContractSku,
                  nameNumeratorUserContractSku, numberUserContractSku, seriesUserContractSku, dateFromContract, dateToContract,
                  nameCurrencyContract,  nameTypeExchangeContract, descriptionPaymentConditionContract,
                  noteContract, saveWordUserContractSku, openWordUserContractSku, idUserContractSku SHOWIF showIDs()

        TREE stockTree a=STRING[3], sg = StockGroup PARENT parentStockGroup
        PROPERTIES READONLY OBJVALUE(a),nameStockGroup(sg)
        PROPERTIES(c) allSupplierStocksContractSku TODRAW a FORCE GRID BACKGROUND backgroundAllSupplierStocksContractSku(c)
        PROPERTIES(sg,c) inSupplierStockGroupContractSku BACKGROUND backgroundInSupplierStockGroupContractSku(sg,c)
        ORDER BY nameStockGroup(sg)
        FILTERS stringEqualsAll(a)
        FILTERS countSupplierStockStockGroup(sg) OR countCompanyStockStockGroup(sg)
    
        OBJECTS ss = Stock
        PROPERTIES READONLY  nameStock(ss), idStock(ss) SHOWIF showIDs()
        PROPERTIES(ss,c)    inSupplierStockContractSku BACKGROUND backgroundInSupplierStockContractSku(ss,c)
        FILTERS ss IS Stock AND NOT sg IS StockGroup OR isParentStockGroupStock(sg, ss),
                inLegalEntityStock(supplierContractSku(c), ss),
                isCompanyStock(ss) OR isSupplierStock(ss)
        FILTERGROUP filters
                FILTER 'Отм.'  inSupplierStockContractSku(ss,c) 'F10'   

        TREE stockTree1 b=STRING[3], sg1 = StockGroup PARENT parentStockGroup
        PROPERTIES READONLY OBJVALUE(b), nameStockGroup(sg1)
        PROPERTIES(c) allCustomerStocksContractSku TODRAW b FORCE GRID BACKGROUND backgroundAllCustomerStocksContractSku(c)
        PROPERTIES(sg1,c) inCustomerStockGroupContractSku BACKGROUND backgroundInCustomerStockGroupContractSku(sg1,c)
        ORDER BY nameStockGroup(sg1)
        FILTERS stringEqualsAll(b)
        FILTERS countCustomerStockStockGroup(sg1) OR countCompanyStockStockGroup(sg1)
    
        OBJECTS ss1 = Stock
        PROPERTIES READONLY  nameStock(ss1), idStock(ss1) SHOWIF showIDs()
        PROPERTIES(ss1,c)    inCustomerStockContractSku BACKGROUND backgroundInCustomerStockContractSku(ss1,c)
        FILTERS ss1 IS Stock AND NOT sg1 IS StockGroup OR isParentStockGroupStock(sg1, ss1),
                inLegalEntityStock(customerContractSku(c), ss1),
                isCompanyStock(ss1) OR isCustomerStock(ss1)
        FILTERGROUP filters1
                FILTER 'Отм.'  inCustomerStockContractSku(ss1,c) 'F10'   
      
    EDIT UserContractSku OBJECT c

;


DESIGN userContractSku {
    NEW north {
        type = CONTAINERH;
        MOVE c.numbered {
            type = CONTAINERH;
        }
        MOVE c.contract {
        MOVE PROPERTY (idUserContractSku(c));
            type = CONTAINERH;
        }
    }
    NEW params {
        type = COLUMNS;
        columns = 3;
        caption = 'Параметры';
        MOVE PROPERTY(nameSupplierContractSku(c));
        MOVE PROPERTY(nameCustomerContractSku(c));
        MOVE PROPERTY(nameTypeContractSku(c));
        MOVE PROPERTY(isDataDefaultContractSku(c));
    }
    MOVE c.payment;
    NEW text {
        type = CONTAINERH;
        caption = 'Содержание';
        MOVE PROPERTY(saveWordUserContractSku(c));
        MOVE PROPERTY(openWordUserContractSku(c));
    }
    NEW tabContainer{
        fill = 1;
        type = TABBED;
        NEW supplier{
            fill = 1;
            type = SPLITH;
            caption = 'Склады поставщика';
            MOVE stockTree.tree.box {caption = 'Группа складов';}
            MOVE ss.box { fill = 2;}
        }
        NEW customer{
            fill = 1;
            type = SPLITH;
            caption = 'Склады покупателя';
            MOVE stockTree1.tree.box {caption = 'Группа складов';}
            MOVE ss1.box { fill = 2;}
        }
        NEW noteContainer {
            fill = 1;
            caption = 'Примечание';
            MOVE PROPERTY(noteContract(c)) {
                panelCaptionAbove = TRUE;
                fill = 1;
            }
        }
    }
    MOVE functions.box;
}

editUserContractSku 'Редактировать' = ACTION EDITFORM UserContractSku;
editContract(userContractSku) += ACTION editUserContractSku(userContractSku);

addUserContractSkuSupplierCustomer 'Добавить' = ACTION (supplier, customer) NESTEDSESSION{
    FOR ADDOBJ uc = UserContractSku DO {
        supplierContractSku(uc) <- supplier;
        customerContractSku(uc) <- customer;
        FORM userContractSku OBJECTS c = uc MANAGESESSION DOCKEDMODAL;
    }
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

isUserContractSku (contractSku) = contractSku IS UserContractSku;

addUserContractSku 'Добавить' = ACTION ADDFORM UserContractSku;

EXTEND FORM contracts
    PROPERTIES(c) READONLY nameTypeContractSku
    PROPERTIES() addUserContractSku TODRAW c FORCE PANEL
;

FORM contractSkus 'Договоры на поставку'
    OBJECTS c = ContractSku   
    PROPERTIES(c) READONLY nameSupplierContractSku, namePartyAStocksContract, nameCustomerContractSku, namePartyBStocksContract, nameTypeContractSku,
                  seriesNumberUserContractSku, dateFromContract, dateToContract,
                  nameCurrencyContract,  nameTypeExchangeContract, noteContract
    PROPERTIES  addUserContractSku() TODRAW c FORCE PANEL, editContract(c)

    DIALOG ContractSku OBJECT c
;

NAVIGATOR {
    stockMasterData {
        ADD contracts;
    }
}

// ----------------------------- Расширяем форму организаций ------------------------------------------- //

isCustomerLegalEntityUserContractSku(l,css) = isCustomerLegalEntity(l) AND isUserContractSku(css);
isSupplierLegalEntityUserContractSku(l,csc) = isSupplierLegalEntity(l) AND isUserContractSku(csc);
EXTEND FORM legalEntity

    OBJECTS css = UserContractSku FIXED GRID
    PROPERTIES(css) SHOWIF isCustomerLegalEntity(l) READONLY seriesNumberUserContractSku, nameTypeContractSku, dateFromContract,
                    dateToContract, nameCurrencyContract, noteContract, namePartyAStocksContract, namePartyBStocksContract
    PROPERTIES      SHOWIF isCustomerLegalEntity(l) addUserContractSkuSupplierCustomer(s, l) TODRAW css FORCE PANEL TOOLBAR
    PROPERTIES(css) SHOWIF isCustomerLegalEntity(l) EDITNESTEDFORM
    PROPERTIES(css) DELETESESSION SHOWIF isCustomerLegalEntityUserContractSku(l,css)
    
    FILTERS customerContractSku(css) == l,
            supplierContractSku(css) == s

//    FILTERGROUP filters
//        FILTER 'Есть договор' 'F10' countContractPartyAPartyB(s, l)

    OBJECTS csc = UserContractSku FIXED  GRID
    PROPERTIES(csc) SHOWIF isSupplierLegalEntity(l) READONLY seriesNumberUserContractSku, nameTypeContractSku, dateFromContract,
                    dateToContract, nameCurrencyContract, noteContract
    PROPERTIES SHOWIF isSupplierLegalEntity(l) addUserContractSkuSupplierCustomer(l, c) TODRAW csc FORCE PANEL TOOLBAR
    PROPERTIES(csc) SHOWIF isSupplierLegalEntity(l) EDITNESTEDFORM
    PROPERTIES(csc) DELETESESSION SHOWIF isSupplierLegalEntityUserContractSku(l,csc)
    FILTERS customerContractSku(csc) == c,
            supplierContractSku(csc) == l

//    FILTERGROUP filters
//        FILTER 'Есть договор' 'F8' countContractPartyAPartyB(l, c)
;

DESIGN legalEntity {
    docPurchaseContainer {
        MOVE css.box {
            caption = 'Договоры на поставку';
        }
    }
    docSaleContainer {
        MOVE csc.box {
            caption = 'Договоры на поставку';
        }
    }
}
