MODULE StockReports;

REQUIRE EmployeeStock, Barcode, PriceListLedger, StockSkuDocument;

quantityChildWithSession (group) = GROUP SUM 1 IF dataInSession(Group childGroup) AND isParent(childGroup, Group group) BY group;
quantityParentWithSession (group) = GROUP SUM 1 IF dataInSession(Group parentGroup) AND isParent(Group group, parentGroup) BY group;                                                                        
                                                                           
backgroundInSession 'Цвет' (Group group) = CASE 
    WHEN dataInSession(group) THEN RGB(0,0,0)
    WHEN inParent(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithSession (group) != descendantNumber(group) AND NOT quantityParentWithSession (group) THEN RGB(203,203,203);

backgroundInclude 'Цвет' (GroupType groupType, Sku sku) = IF include(sku) 
    THEN RGB(0,0,0) 
    ELSE RGB(230,248,250) IF inSession(group(groupType, sku));

//sessionConcatGroups 'Группы' (groupType) =
//    GROUP CONCAT nameGroup(group) IF inSessionGroup(group) AND NOT inSessionGroup(parentGroup(group)),','
//    BY groupTypeGroup(group);
 
countIncludeSku 'Кол-во непосредственных товаров в группе' (group, groupType) =
    GROUP SUM 1 IF group(GroupType groupType, Sku sku) == Group group AND include(groupType,sku)
    BY group, groupType;
    
sessionConcatGroups 'Группы' (groupType) =
    GROUP CONCAT name(Group group) IF countIncludeSku(group, GroupType groupType),','
    BY groupType;  

//sumBGroupTypeStockDate 'Итоговая сумма отчета' (groupType, stock, date) =
//    GROUP SUM sumBSkuStockDate(sku, stock, date) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, date PREFCHARWIDTH 15;
//    
//sumAGroupTypeStockDate 'Итоговая сумма отчета' (groupType, stock, date) =
//    GROUP SUM sumASkuStockDate(sku, stock, date) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, date PREFCHARWIDTH 15;    
//
//sumInGroupTypeStockDateDate 'Итоговая сумма пришедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
//    GROUP SUM sumInSkuStockDateDate(sku, stock, dateFrom, dateTo) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;
//
//sumOutGroupTypeStockDateDate 'Итоговая сумма ушедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
//    GROUP SUM sumOutSkuStockDateDate(sku, stock, dateFrom, dateTo) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;
////-- Дата/время    
//sumBGroupTypeStockDateTime 'Итоговая сумма отчета' (groupType, stock, dateTime) =
//    GROUP SUM sumBSkuStockDateTime(sku, stock, dateTime) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, dateTime PREFCHARWIDTH 15;  

    
// --------------------------------- Оптимизация с хранимыми свойствами ------------------------------------- //
 
// ---- Оборотная ведомость

balanceB 'Остаток на начало' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumB 'Сумма на начало' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

quantityIn 'Кол-во пришедшего' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumIn 'Сумма пришедшего' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

quantityOut 'Кол-во ушедшего' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumOut 'Сумма ушедшего' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

balanceA 'Остаток на конец' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumA 'Сумма на конец' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

balanceBSku = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumBSku = DATA LOCAL NUMERIC[16,2] (Group, Stock);

quantityInSku = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumInSku = DATA LOCAL NUMERIC[16,2] (Group, Stock);

quantityOutSku = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumOutSku = DATA LOCAL NUMERIC[16,2] (Group, Stock);

balanceASku = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumASku = DATA LOCAL NUMERIC[16,2] (Group, Stock);

fillReportBackSheetData 'Рассчитать'(Stock st, GroupType gt, DATE df, DATE dt) = ACTION  {

    balanceA(Sku sk, st) <- balanceA(sk, st, dt);
    sumA(Sku sk, st) <- sumA(sk, st, dt);

    quantityIn(Sku sk, st) <- quantitySumIn(sk, st, df, dt);
    sumIn(Sku sk, st) <- sumIn(sk, st, df, dt);

    quantityOut(Sku sk, st) <- quantitySumOut(sk, st, df, dt);
    sumOut(Sku sk, st) <- sumOut(sk, st, df, dt);

    balanceB(Sku sk, st) <- balanceA(sk, st) (+) quantityOut(sk, st) (-) quantityIn(sk, st);
    sumB(Sku sk, st) <- sumA(sk, st) (+) sumOut(sk, st) (-) sumIn(sk, st);

    balanceASku(Group g, st) <- [= GROUP SUM balanceA(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;
    sumASku(Group g, st) <- [= GROUP SUM sumA(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;

    quantityInSku(Group g, st) <- [= GROUP SUM quantityIn(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;
    sumInSku(Group g, st) <- [= GROUP SUM sumIn(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;

    quantityOutSku(Group g, st) <- [= GROUP SUM quantityOut(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;
    sumOutSku(Group g, st) <- [= GROUP SUM sumOut(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;
    
    balanceBSku(Group g, st) <- [= GROUP SUM balanceB(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;
    sumBSku(Group g, st) <- [= GROUP SUM sumB(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) IF groupType(g) == gt;
}

balanceRecBSku 'Остаток на начало дня (всего)' (group, stock) =
    GROUP SUM balanceBSku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

sumRecBSku 'Сумма на начало дня (всего)' (group, stock) =
    GROUP SUM sumBSku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

quantityRecInSku 'Кол-во пришедшего (всего)' (group, stock) =
    GROUP SUM quantityInSku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

sumRecInSku 'Сумма пришедшего (всего)' (group, stock) =
    GROUP SUM sumInSku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

quantityRecOutSku 'Кол-во ушедшего (всего)' (group, stock) =
    GROUP SUM quantityOutSku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;
    
sumRecOutSku 'Сумма ушедшего (всего)' (group, stock) =
    GROUP SUM sumOutSku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

balanceRecASku 'Остаток на конец дня (всего)' (group, stock) =
    GROUP SUM balanceASku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

sumRecASku 'Сумма на конец дня (всего)' (group, stock) =
    GROUP SUM sumASku (Group child, Stock stock) IF isParent(child, Group parent)
    BY parent, stock;

//-- По выборке
sumB 'Итоговая сумма отчета' (groupType, stock) =
    GROUP SUM sumB(Sku sku, Stock stock) IF include(GroupType groupType, sku)
    BY groupType, stock PREFCHARWIDTH 15;
    
sumIn 'Итоговая сумма пришедшего товара отчета' (groupType, stock) =
    GROUP SUM sumIn(Sku sku, Stock stock) IF include(GroupType groupType,sku)
    BY groupType, stock PREFCHARWIDTH 15;

sumOut 'Итоговая сумма ушедшего товара отчета' (groupType, stock) =
    GROUP SUM sumOut(Sku sku, Stock stock) IF include(GroupType groupType,sku)
    BY groupType, stock PREFCHARWIDTH 15;

sumA 'Итоговая сумма отчета' (groupType, stock) =
    GROUP SUM sumA(Sku sku, Stock stock) IF include(GroupType groupType, sku)
    BY groupType, stock PREFCHARWIDTH 15;    

sumBSessionSku 'Сумма на начало дня (по группе)' (group, stock) =
    GROUP SUM sumB (Sku sku, Stock stock)  IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock;    
sumInSessionSku 'Сумма товара пришедшего за период(по группе)' (group, stock) =
    GROUP SUM sumIn (Sku sku, Stock stock) IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock;    
sumOutSessionSku 'Сумма товара ушедшего за период(по группе)' (group, stock) =
    GROUP SUM sumOut (Sku sku, Stock stock) IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock;
sumASessionSku 'Сумма на конец дня (по группе)' (group, stock) =
    GROUP SUM sumA (Sku sku, Stock stock) IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock;

// ---- Отчет по остаткам

fillReportBalanceData 'Рассчитать'(Stock st, GroupType gt, DATETIME dt) = ACTION  {

    balanceB(Sku sk, st) <- balanceB(sk, st, dt);
    sumB(Sku sk, st) <- sumB(sk, st, dt);
    
    balanceBSku(Group g, st) <- [= GROUP SUM balanceB(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) WHERE groupType(g) == gt;
    sumBSku(Group g, st) <- [= GROUP SUM sumB(Sku sk, Stock st) BY group(GroupType gt, sk), st](g, st) WHERE groupType(g) == gt;
}
// --------------------------------- Конец оптимизации с хранимыми свойствами ------------------------------------- //

//-- По выборке
sumB 'Итоговая сумма отчета' (groupType, stock, date) =
    GROUP SUM sumB(Sku sku, Stock stock, DATE date) IF include(GroupType groupType, sku)
    BY groupType, stock, date PREFCHARWIDTH 15;
    
sumA 'Итоговая сумма отчета' (groupType, stock, date) =
    GROUP SUM sumA(Sku sku, Stock stock, DATE date) IF include(GroupType groupType, sku)
    BY groupType, stock, date PREFCHARWIDTH 15;    

sumIn 'Итоговая сумма пришедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
    GROUP SUM sumIn(Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF include(GroupType groupType,sku)
    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;

sumOut 'Итоговая сумма ушедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
    GROUP SUM sumOut(Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF include(GroupType groupType,sku)
    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;
//-- Дата/время    

sumB 'Итоговая сумма отчета' (groupType, stock, dateTime) =
    GROUP SUM sumB(Sku sku, Stock stock, DATETIME dateTime) IF include(GroupType groupType,sku)
    BY groupType, stock, dateTime PREFCHARWIDTH 15;     
 
//    PROPERTIES(sk, st, df) READONLY sumBSkuGroupStockDate
//    PROPERTIES(sk, st, df, dt) READONLY sumInGroupSkuStockDateDate, sumOutGroupSkuStockDateDate
//    PROPERTIES(sk, st, dt) READONLY sumASkuGroupStockDate    
sumBSessionSku 'Сумма на начало дня (по группе)' (group, stock, date) =
    GROUP SUM sumB (Sku sku, Stock stock, DATE date)  IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock, date;    
sumInSessionSku 'Сумма товара пришедшего за период(по группе)' (group, stock, dateFrom, dateTo) =
    GROUP SUM sumIn (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock, dateFrom, dateTo;    
sumOutSessionSku 'Сумма товара ушедшего за период(по группе)' (group, stock, dateFrom, dateTo) =
    GROUP SUM sumOut (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock, dateFrom, dateTo;
sumASessionSku 'Сумма на конец дня (по группе)' (group, stock, date) =
    GROUP SUM sumA (Sku sku, Stock stock, DATE date) IF include(GroupType groupType,sku)
        BY group(groupType, sku), stock, date;
                       
filterBalanceBAInOut (Sku s, Stock st) = (balanceB(s, st) OR
    balanceA(s, st) OR
    sumIn(s, st) OR
    sumOut(s, st));

filterBalanceBAInOut (Sku s,Stock st,DATE df,DATE dt) = (balanceB(s,st,df) OR
    balanceA(s,st,dt) OR
    sumIn(s,st,df,dt) OR
    sumOut(s,st,df,dt));

//остатки по товарам
FORM printListBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullName

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt, st)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    FILTERS inSession(group(gt, s))
    ORDER BY name(s)

    PROPERTIES(s, st) READONLY balanceB, sumB
    FILTERS balanceB(s, st)
    FILTERS s IS Sku AND st IS Stock AND d IS DATETIME // фильтр, чтобы сохранилась старая иерархия
;

printListBalanceSkus 'Списком' (Stock stock, DATETIME dateTime) =
    ACTION FORM printListBalanceSkusStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

accountPriceB 'Цена учетная' (Sku sku, Stock st, DATETIME dateTime) = priceB[LedgerPriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, sku, st, dateTime);   

FORM printBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullName

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt, st)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDER BY canonicalName(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    FILTERS inSession(sk) AND countSku(sk, gt)
    FILTERS groupType(sk) == gt
    PROPERTIES(sk, st) READONLY sumRecBSku

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    ORDER BY name(s)
    FILTERS group(gt, s) == sk

    PROPERTIES(s, st) READONLY balanceB, sumB
    PROPERTIES(s, st, d) READONLY accountPriceB
    FILTERS balanceB(s, st)
;

printBalanceSkus 'По группам' (Stock stock, DATETIME dateTime) =
    ACTION FORM printBalanceSkusStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

//остатки по партиям
FORM printListBalanceBatchesStock 'Остатки по партиям'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullName

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt, st ,d)

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY date, name, idBarcodeSku, nameSku, shortNameUOM//, shippedQuantityBatch
    FILTERS inSession(group(gt, sku(bt)))
    ORDER BY          date(bt), name(bt), nameSku(bt)

    PROPERTIES(bt, st, d) READONLY balanceB, accountSumB
    FILTERS balanceB(bt, st, d)
;

printListBalanceBatches 'Списком' (Stock stock, DATETIME dateTime) =
    ACTION FORM printListBalanceBatchesStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

FORM printBalanceBatchesStock 'Остатки по партиям'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullName

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt, st ,d)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDER BY canonicalName(sk)
    FILTERS inSession(sk) AND countSku(sk, gt)
    FILTERS groupType(sk) == gt
    PROPERTIES(sk, st, d) READONLY accountSumBSkuBatch
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY date, name, idBarcodeSku, nameSku, shortNameUOM//, shippedQuantityBatch
    FILTERS           group(gt, sku(bt)) == sk
    ORDER BY          date(bt), name(bt), nameSku(bt)

    PROPERTIES(bt, st, d) READONLY balanceB, accountSumB
    FILTERS balanceB(bt, st, d)
;

printBalanceBatches 'По группам' (Stock stock, DATETIME dateTime) =
    ACTION FORM printBalanceBatchesStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

balanceRecBSku 'Остаток (всего)' (group, stock, dateTime) =
    GROUP SUM balanceB (Sku sku, Stock stock, DATETIME dateTime) IF isParent(Group group, sku)
    BY group, stock, dateTime;

showAccountSumBatch 'Показывать учетные суммы по партиям в отчете по остаткам' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() showAccountSumBatch
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(showAccountSumBatch());
    }
}


FORM reportBalanceStock 'Отчет по остаткам'
    OBJECTS d=DATETIME FIXED PANEL
    PROPERTIES(d) OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR name
    FILTERS isCompany(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
//    PROPERTIES sumBGroupTypeStockDate(gt, st ,d)
//    PROPERTIES(gt) READONLY sessionConcatGroups

    TREE skuTree sk = Group PARENT parent
    PROPERTIES inSession(sk) BACKGROUND backgroundInSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    PROPERTIES(sk, st) READONLY balanceRecBSku, sumRecBSku
    PROPERTIES(sk, st, d) READONLY accountSumRecBSkuBatch SHOWIF showAccountSumBatch()
    ORDER BY order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY id SHOWIF showIDs(), idBarcode, name ON SHORTCUT showMovementSku(s,st) ON SHORTCUT showMovementPriceSku(s,st), shortNameUOM
    ORDER BY name(s)
    FILTERS isParent(sk, s)

    PROPERTIES(s, st) READONLY balanceB, sumB
    PROPERTIES(s, st, d) READONLY accountSumBatchB SHOWIF showAccountSumBatch()
    PROPERTIES(st, d) printListBalanceSkus, printBalanceSkus
    FILTERGROUP balance 
        FILTER 'С остатком (кол-во)' balanceB(s, st) 'F7' DEFAULT
        FILTER 'С остатком (кол-во/сумма)' balanceB(s, st) OR sumB(s, st) 'F8'   
    FILTERGROUP incorrectSum FILTER 'Неправильная сумма по партиям' abs(sumB(s, st) (-) accountSumBatchB(s, st, d)) > 1 'F9'   

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY date, name ON SHORTCUT showMovementBatch(bt,st), idBarcodeSku, 
                      nameSku ON SHORTCUT showMovementSku(bt,st), shortNameUOM//, shippedQuantityBatch
    FILTERS           isParent(sk, bt)
    ORDER BY          date(bt), name(bt), nameSku(bt)

    PROPERTIES(bt, st, d) READONLY balanceB, accountSumB
    PROPERTIES(st, d) printListBalanceBatches, printBalanceBatches
    FILTERS balanceB(bt, st, d)

    EVENTS 
        ON CHANGE gt fillReportBalanceData(st, gt, d),
        ON CHANGE d fillReportBalanceData(st, gt, d),
        ON CHANGE st fillReportBalanceData(st, gt, d)
;
@extendFormFilterStockAccess(st, reportBalanceStock);

DESIGN reportBalanceStock {
    NEW topContainer{
        type = CONTAINERH;
        MOVE gt.box;        
        MOVE d.box;
        MOVE st.box;
    }
    NEW bottomContainer {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box;
        NEW tabContainer {
            fill = 3;
            type = TABBED;
            NEW skuContainer{
                caption = 'Товары';
                NEW printSkuContainer{
                    type = CONTAINERH;
                    caption = 'Печать';
                    MOVE PROPERTY(printListBalanceSkus(st,d));
                    MOVE PROPERTY(printBalanceSkus(st,d));
                }
                MOVE s.box;
            }
            NEW batchContainer{
                caption = 'Партии';
                NEW printBatchContainer {
                    type = CONTAINERV;
                    caption = 'Печать';
                    NEW print1{
                        type = CONTAINERH;
                        MOVE PROPERTY(printListBalanceBatches(st,d));
                        MOVE PROPERTY(printBalanceBatches(st,d));
                    }

                }
                MOVE bt.box;
            }
        }
    }
    MOVE functions.box;
}

//-- Печатные формы для оборотной ведомости списком и по группам--//

FORM printListBackSheet 'Оборотная ведомость'
    OBJECTS df=DATE FIXED PANEL
    PROPERTIES dateFrom = OBJVALUE(df)

    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES dateTo = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullName
    FILTERS isCompany(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt, st)
    PROPERTIES(gt, st) sumIn, sumOut
    PROPERTIES sumA(gt, st)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    ORDER BY name(s)

    PROPERTIES(s, st) READONLY balanceB, sumB
    PROPERTIES(s, st) READONLY quantityIn, sumIn, quantityOut, sumOut
    PROPERTIES(s, st) READONLY balanceA, sumA
    FILTERS include(gt, s)
    FILTERS filterBalanceBAInOut (s, st)
    FILTERS s IS Sku AND st IS Stock AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия
;

printListBackSheet 'Списком' (Stock stock, DATE dateFrom, DATE dateTo) =
    ACTION FORM printListBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT  IMAGE 'print.png' IN print;
xlsListBackSheet 'Списком (XLS)' (Stock stock, DATE dateFrom, DATE dateTo) =
    ACTION FORM printListBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT XLS IMAGE 'print.png' IN print;

FORM printBackSheet 'Оборотная ведомость'
    OBJECTS df=DATE FIXED PANEL
    PROPERTIES dateFrom = OBJVALUE(df)

    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES dateTo = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullName
    FILTERS isCompany(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt, st)
    PROPERTIES(gt, st) sumIn, sumOut
    PROPERTIES sumA(gt, st)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDER BY canonicalName(sk)
    FILTERS countIncludeSku(sk, gt)
    FILTERS groupType(sk) == gt
    PROPERTIES(sk, st) READONLY sumBSessionSku
    PROPERTIES(sk, st) READONLY sumInSessionSku, sumOutSessionSku
    PROPERTIES(sk, st) READONLY sumASessionSku
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
    FILTERS sk IS Group AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    ORDER BY name(s)
    FILTERS group(gt, s) == sk

    PROPERTIES(s, st) READONLY balanceB, sumB
    PROPERTIES(s, st) READONLY quantityIn, sumIn, quantityOut, sumOut
    PROPERTIES(s, st) READONLY balanceA, sumA
    FILTERS include(gt, s)
    FILTERS filterBalanceBAInOut (s,st)
    FILTERS s IS Sku AND st IS Stock AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия
;

printBackSheet 'По группам' (Stock stock, DATE dateFrom, DATE dateTo) =
    ACTION FORM printBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT  IMAGE 'print.png' IN print;

xlsBackSheet 'По группам (XLS)' (Stock stock, DATE dateFrom, DATE dateTo) =
    ACTION FORM printBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT XLS IMAGE 'print.png' IN print;

fillDocumentReport 'Подбор документа'() = ACTION  {
    FORM documents DIALOG;
    IF formResult() == FormResult.ok THEN {
        LOCAL chosenDocument = Document();
        chosenDocument() <- chosenObject('d');
        FOR [ = GROUP SUM 1 BY document(DocumentDetail d), sku(d)](chosenDocument(), Sku sku) DO {
            include(sku) <- TRUE;
        }
    }
} TOOLBAR;

deleteInDataSessionReport 'Очистить выборку'() = ACTION  {
    include(Sku sku) <- NULL;
    formRefresh();
} TOOLBAR;

FORM reportBackSheet 'Оборотная ведомость' 
    OBJECTS df=DATE FIXED PANEL
    PROPERTIES dateFrom = OBJVALUE(df)

    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES dateTo = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR name
    FILTERS isCompany(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES sumB(gt, st)
    PROPERTIES(gt, st) sumIn, sumOut
    PROPERTIES sumA(gt, st)
//    PROPERTIES(gt) READONLY sessionConcatGroups

    TREE skuTree sk = Group PARENT parent
    PROPERTIES inSession(sk) BACKGROUND backgroundInSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    PROPERTIES(sk, st) READONLY sumRecBSku
    PROPERTIES(sk, st) READONLY sumRecInSku, sumRecOutSku
    PROPERTIES(sk, st) READONLY sumRecASku
    ORDER BY order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(gt,s) include BACKGROUND backgroundInclude(gt,s)
    PROPERTIES(s) READONLY idBarcode, name  ON SHORTCUT showBalanceMovementSku(s, st) ON SHORTCUT showBalancePriceSku(s, st), shortNameUOM
    ORDER BY name(s)
    
    PROPERTIES(s, st) READONLY balanceB, sumB
    PROPERTIES(s, st) READONLY quantityIn, sumIn, quantityOut, sumOut
    PROPERTIES(st, df, dt) printListBackSheet, xlsListBackSheet, printBackSheet, xlsBackSheet
    PROPERTIES(s, st) READONLY balanceA, sumA

    FILTERGROUP include FILTER 'Отмеченные' include(gt, s) DEFAULT 
    
    FILTERS filterBalanceBAInOut (s, st)    
    PROPERTIES() TODRAW s fillDocumentReport, deleteInDataSessionReport
    
    EVENTS 
        ON CHANGE gt fillReportBackSheetData(st, gt, df, dt), 
        ON CHANGE df fillReportBackSheetData(st, gt, df, dt), 
        ON CHANGE dt fillReportBackSheetData(st, gt, df, dt),
        ON CHANGE st fillReportBackSheetData(st, gt, df, dt)
;

@extendFormFilterStockAccess(st, reportBackSheet);

DESIGN reportBackSheet {
    NEW topContainer {
        type = CONTAINERH;
        NEW dates {
            type = CONTAINERH;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        MOVE st.box;
        MOVE gt.box;
    }
    NEW sumContainer{
        type = CONTAINERH;
        caption = 'Итоговые суммы';
        MOVE PROPERTY(sumB(gt, st)){caption = 'Начала периода';}
        MOVE PROPERTY(sumIn(gt, st)){caption = 'Товара пришедшего за период';}
        MOVE PROPERTY(sumOut(gt, st)){caption = 'Товара ушедшего за период';}
        MOVE PROPERTY(sumA(gt, st)){caption = 'Конца периода';}
    }
    NEW bottomContainer {
        fill = 1;
        type = SPLITH;

        MOVE skuTree.tree.box;

        PROPERTY(sumRecBSku(sk, st)){caption = 'Остаток на начало периода';}
        PROPERTY(sumRecASku(sk, st)){caption = 'Остаток на конец периода';}

        NEW tabContainer {
            fill = 2;
            type = TABBED;
            NEW skuContainer{
                caption = 'Товары';
                NEW printSkuContainer {
                    type = CONTAINERH;
                    caption = 'Печать';
                    MOVE PROPERTY(printListBackSheet(st,df,dt));
                    MOVE PROPERTY(xlsListBackSheet(st,df,dt));
                    MOVE PROPERTY(printBackSheet(st,df,dt));
                    MOVE PROPERTY(xlsBackSheet(st,df,dt));
                }
                MOVE s.box;
                PROPERTY(balanceB(s, st)){caption = 'Остаток на начало периода';}
                PROPERTY(sumB(s, st)){caption = 'Сумма на начало периода';}
                PROPERTY(balanceA(s, st)){caption = 'Остаток на конец периода';}
                PROPERTY(sumA(s, st)){caption = 'Сумма на конец периода';}
            }
        }
    }
    MOVE functions.box;
}

NAVIGATOR {
    stockReports{
        ADD reportBalanceStock;
        ADD reportBackSheet;
    }
}