MODULE StockReports;

REQUIRE EmployeeStock, Barcode, PriceListLedger, StockMovement;

quantityChildWithSessionGroup (group) = GROUP SUM 1 IF dataInSessionGroup(childGroup) AND isParentGroupGroup(childGroup, group) BY group;
quantityParentWithSessionGroup (group) = GROUP SUM 1 IF dataInSessionGroup(parentGroup) AND isParentGroupGroup(group, parentGroup) BY group;                                                                        
                                                                           
backgroundInSessionGroup 'Цвет' (group) = CASE 
    WHEN dataInSessionGroup(group) THEN RGB(0,0,0)
    WHEN inParentGroup(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithSessionGroup (group) != descendantNumberGroup(group) AND NOT quantityParentWithSessionGroup (group) THEN RGB(203,203,203);

backgroundIncludeGroupTypeSku 'Цвет' (groupType, sku) = IF includeSku(sku) 
    THEN RGB(0,0,0) 
    ELSE RGB(230,248,250) IF inSessionGroup(groupGroupTypeSku(groupType, sku));

//sessionConcatGroups 'Группы' (groupType) =
//    GROUP CONCAT nameGroup(group) IF inSessionGroup(group) AND NOT inSessionGroup(parentGroup(group)),','
//    BY groupTypeGroup(group);
 
countIncludeSkuGroupGroupType 'Кол-во непосредственных товаров в группе' (group, groupType) =
    GROUP SUM 1 IF groupGroupTypeSku(groupType, sku) == group AND includeGroupTypeSku(groupType,sku)
    BY group, groupType;
    
sessionConcatGroups 'Группы' (groupType) =
    GROUP CONCAT nameGroup(group) IF countIncludeSkuGroupGroupType(group, groupType),','
    BY groupType;  

//sumBGroupTypeStockDate 'Итоговая сумма отчета' (groupType, stock, date) =
//    GROUP SUM sumBSkuStockDate(sku, stock, date) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, date PREFCHARWIDTH 15;
//    
//sumAGroupTypeStockDate 'Итоговая сумма отчета' (groupType, stock, date) =
//    GROUP SUM sumASkuStockDate(sku, stock, date) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, date PREFCHARWIDTH 15;    
//
//sumInGroupTypeStockDateDate 'Итоговая сумма пришедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
//    GROUP SUM sumInSkuStockDateDate(sku, stock, dateFrom, dateTo) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;
//
//sumOutGroupTypeStockDateDate 'Итоговая сумма ушедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
//    GROUP SUM sumOutSkuStockDateDate(sku, stock, dateFrom, dateTo) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;
////-- Дата/время    
//sumBGroupTypeStockDateTime 'Итоговая сумма отчета' (groupType, stock, dateTime) =
//    GROUP SUM sumBSkuStockDateTime(sku, stock, dateTime) IF inSessionGroup(groupGroupTypeSku(groupType, sku))
//    BY groupType, stock, dateTime PREFCHARWIDTH 15;  

    
// --------------------------------- Оптимизация с хранимыми свойствами ------------------------------------- //
 
// ---- Оборотная ведомость

balanceBSkuStock 'Остаток на начало' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumBSkuStock 'Сумма на начало' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

quantityInSkuStock 'Кол-во пришедшего' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumInSkuStock 'Сумма пришедшего' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

quantityOutSkuStock 'Кол-во ушедшего' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumOutSkuStock 'Сумма ушедшего' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

balanceASkuStock 'Остаток на конец' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sumASkuStock 'Сумма на конец' = DATA LOCAL NUMERIC[16,2] (Sku, Stock);

balanceBSkuGroupStock = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumBSkuGroupStock = DATA LOCAL NUMERIC[16,2] (Group, Stock);

quantityInSkuGroupStock = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumInSkuGroupStock = DATA LOCAL NUMERIC[16,2] (Group, Stock);

quantityOutSkuGroupStock = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumOutSkuGroupStock = DATA LOCAL NUMERIC[16,2] (Group, Stock);

balanceASkuGroupStock = DATA LOCAL NUMERIC[16,5] (Group, Stock);
sumASkuGroupStock = DATA LOCAL NUMERIC[16,2] (Group, Stock);

fillReportBackSheetData 'Рассчитать' = ACTION (st, gt, df, dt) {

    balanceASkuStock(sk, st) <- balanceASkuStockDate(sk, st, dt);
    sumASkuStock(sk, st) <- sumASkuStockDate(sk, st, dt);

    quantityInSkuStock(sk, st) <- quantitySumInSkuStockDateDate(sk, st, df, dt);
    sumInSkuStock(sk, st) <- sumInSkuStockDateDate(sk, st, df, dt);

    quantityOutSkuStock(sk, st) <- quantitySumOutSkuStockDateDate(sk, st, df, dt);
    sumOutSkuStock(sk, st) <- sumOutSkuStockDateDate(sk, st, df, dt);

    balanceBSkuStock(sk, st) <- balanceASkuStock(sk, st) (+) quantityOutSkuStock(sk, st) (-) quantityInSkuStock(sk, st);
    sumBSkuStock(sk, st) <- sumASkuStock(sk, st) (+) sumOutSkuStock(sk, st) (-) sumInSkuStock(sk, st);

    balanceASkuGroupStock(g, st) <- [= GROUP SUM balanceASkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;
    sumASkuGroupStock(g, st) <- [= GROUP SUM sumASkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;

    quantityInSkuGroupStock(g, st) <- [= GROUP SUM quantityInSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;
    sumInSkuGroupStock(g, st) <- [= GROUP SUM sumInSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;

    quantityOutSkuGroupStock(g, st) <- [= GROUP SUM quantityOutSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;
    sumOutSkuGroupStock(g, st) <- [= GROUP SUM sumOutSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;
    
    balanceBSkuGroupStock(g, st) <- [= GROUP SUM balanceBSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;
    sumBSkuGroupStock(g, st) <- [= GROUP SUM sumBSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) IF groupTypeGroup(g) == gt;
}

balanceRecBSkuGroupStock 'Остаток на начало дня (всего)' (group, stock) =
    GROUP SUM balanceBSkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

sumRecBSkuGroupStock 'Сумма на начало дня (всего)' (group, stock) =
    GROUP SUM sumBSkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

quantityRecInSkuGroupStock 'Кол-во пришедшего (всего)' (group, stock) =
    GROUP SUM quantityInSkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

sumRecInSkuGroupStock 'Сумма пришедшего (всего)' (group, stock) =
    GROUP SUM sumInSkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

quantityRecOutSkuGroupStock 'Кол-во ушедшего (всего)' (group, stock) =
    GROUP SUM quantityOutSkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;
    
sumRecOutSkuGroupStock 'Сумма ушедшего (всего)' (group, stock) =
    GROUP SUM sumOutSkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

balanceRecASkuGroupStock 'Остаток на конец дня (всего)' (group, stock) =
    GROUP SUM balanceASkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

sumRecASkuGroupStock 'Сумма на конец дня (всего)' (group, stock) =
    GROUP SUM sumASkuGroupStock (child, stock) IF isParentGroupGroup(child, parent)
    BY parent, stock;

//-- По выборке
sumBGroupTypeStock 'Итоговая сумма отчета' (groupType, stock) =
    GROUP SUM sumBSkuStock(sku, stock) IF includeGroupTypeSku(groupType, sku)
    BY groupType, stock PREFCHARWIDTH 15;
    
sumInGroupTypeStock 'Итоговая сумма пришедшего товара отчета' (groupType, stock) =
    GROUP SUM sumInSkuStock(sku, stock) IF includeGroupTypeSku(groupType,sku)
    BY groupType, stock PREFCHARWIDTH 15;

sumOutGroupTypeStock 'Итоговая сумма ушедшего товара отчета' (groupType, stock) =
    GROUP SUM sumOutSkuStock(sku, stock) IF includeGroupTypeSku(groupType,sku)
    BY groupType, stock PREFCHARWIDTH 15;

sumAGroupTypeStock 'Итоговая сумма отчета' (groupType, stock) =
    GROUP SUM sumASkuStock(sku, stock) IF includeGroupTypeSku(groupType, sku)
    BY groupType, stock PREFCHARWIDTH 15;    

sumBSessionSkuGroupStock 'Сумма на начало дня (по группе)' (group, stock) =
    GROUP SUM sumBSkuStock (sku, stock)  IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock;    
sumInSessionGroupSkuStock 'Сумма товара пришедшего за период(по группе)' (group, stock) =
    GROUP SUM sumInSkuStock (sku, stock) IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock;    
sumOutSessionGroupSkuStock 'Сумма товара ушедшего за период(по группе)' (group, stock) =
    GROUP SUM sumOutSkuStock (sku, stock) IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock;
sumASessionSkuGroupStock 'Сумма на конец дня (по группе)' (group, stock) =
    GROUP SUM sumASkuStock (sku, stock) IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock;

// ---- Отчет по остаткам

fillReportBalanceStockData 'Рассчитать' = ACTION (st, gt, dt) {

    balanceBSkuStock(sk, st) <- balanceBSkuStockDateTime(sk, st, dt);
    sumBSkuStock(sk, st) <- sumBSkuStockDateTime(sk, st, dt);
    
    balanceBSkuGroupStock(g, st) <- [= GROUP SUM balanceBSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) WHERE groupTypeGroup(g) == gt;
    sumBSkuGroupStock(g, st) <- [= GROUP SUM sumBSkuStock(sk, st) BY groupGroupTypeSku(gt, sk), st](g, st) WHERE groupTypeGroup(g) == gt;
}
// --------------------------------- Конец оптимизации с хранимыми свойствами ------------------------------------- //

//-- По выборке
sumBGroupTypeStockDate 'Итоговая сумма отчета' (groupType, stock, date) =
    GROUP SUM sumBSkuStockDate(sku, stock, date) IF includeGroupTypeSku(groupType, sku)
    BY groupType, stock, date PREFCHARWIDTH 15;
    
sumAGroupTypeStockDate 'Итоговая сумма отчета' (groupType, stock, date) =
    GROUP SUM sumASkuStockDate(sku, stock, date) IF includeGroupTypeSku(groupType, sku)
    BY groupType, stock, date PREFCHARWIDTH 15;    

sumInGroupTypeStockDateDate 'Итоговая сумма пришедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
    GROUP SUM sumInSkuStockDateDate(sku, stock, dateFrom, dateTo) IF includeGroupTypeSku(groupType,sku)
    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;

sumOutGroupTypeStockDateDate 'Итоговая сумма ушедшего товара отчета' (groupType, stock, dateFrom, dateTo) =
    GROUP SUM sumOutSkuStockDateDate(sku, stock, dateFrom, dateTo) IF includeGroupTypeSku(groupType,sku)
    BY groupType, stock, dateFrom, dateTo PREFCHARWIDTH 15;
//-- Дата/время    

sumBGroupTypeStockDateTime 'Итоговая сумма отчета' (groupType, stock, dateTime) =
    GROUP SUM sumBSkuStockDateTime(sku, stock, dateTime) IF includeGroupTypeSku(groupType,sku)
    BY groupType, stock, dateTime PREFCHARWIDTH 15;     
 
//    PROPERTIES(sk, st, df) READONLY sumBSkuGroupStockDate
//    PROPERTIES(sk, st, df, dt) READONLY sumInGroupSkuStockDateDate, sumOutGroupSkuStockDateDate
//    PROPERTIES(sk, st, dt) READONLY sumASkuGroupStockDate    
sumBSessionSkuGroupStockDate 'Сумма на начало дня (по группе)' (group, stock, date) =
    GROUP SUM sumBSkuStockDate (sku, stock, date)  IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock, date;    
sumInSessionGroupSkuStockDateDate 'Сумма товара пришедшего за период(по группе)' (group, stock, dateFrom, dateTo) =
    GROUP SUM sumInSkuStockDateDate (sku, stock, dateFrom, dateTo) IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock, dateFrom, dateTo;    
sumOutSessionGroupSkuStockDateDate 'Сумма товара ушедшего за период(по группе)' (group, stock, dateFrom, dateTo) =
    GROUP SUM sumOutSkuStockDateDate (sku, stock, dateFrom, dateTo) IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock, dateFrom, dateTo;
sumASessionSkuGroupStockDate 'Сумма на конец дня (по группе)' (group, stock, date) =
    GROUP SUM sumASkuStockDate (sku, stock, date) IF includeGroupTypeSku(groupType,sku)
        BY groupGroupTypeSku(groupType, sku), stock, date;
                       
filterBalanceBAInOutSkuStock (s, st) = (balanceBSkuStock(s, st) OR
    balanceASkuStock(s, st) OR
    sumInSkuStock(s, st) OR
    sumOutSkuStock(s, st));

filterBalanceBAInOutSkuStockDate (s,st,df,dt) = (balanceBSkuStockDate(s,st,df) OR
    balanceASkuStockDate(s,st,dt) OR
    sumInSkuStockDateDate(s,st,df,dt) OR
    sumOutSkuStockDateDate(s,st,df,dt));

//остатки по товарам
FORM printListBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullNameStock

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumBGroupTypeStock(gt, st)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, shortNameUOMSku
    FILTERS inSessionGroup(groupGroupTypeSku(gt, s))
    ORDER BY nameSku(s)

    PROPERTIES(s, st) READONLY balanceBSkuStock, sumBSkuStock
    FILTERS balanceBSkuStock(s, st)
    FILTERS s IS Sku AND st IS Stock AND d IS DATETIME // фильтр, чтобы сохранилась старая иерархия
;

printListBalanceSkusStockDateTime 'Списком' (stock, dateTime) =
    ACTION FORM printListBalanceSkusStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

accountPriceBSkuStockDateTime 'Цена учетная' (sku, st, dateTime) = priceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, sku, st, dateTime);   

FORM printBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullNameStock

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumBGroupTypeStock(gt, st)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalNameGroup(sk)
    ORDER BY canonicalNameGroup(sk)
    FILTERGROUP inactive FILTER 'Активные' activeGroup(sk) 'F5' DEFAULT

    FILTERS inSessionGroup(sk) AND countSkuGroupGroupType(sk, gt)
    FILTERS groupTypeGroup(sk) == gt
    PROPERTIES(sk, st) READONLY sumRecBSkuGroupStock

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, shortNameUOMSku
    ORDER BY nameSku(s)
    FILTERS groupGroupTypeSku(gt, s) == sk

    PROPERTIES(s, st) READONLY balanceBSkuStock, sumBSkuStock
    PROPERTIES(s, st, d) READONLY accountPriceBSkuStockDateTime
    FILTERS balanceBSkuStock(s, st)
;

printBalanceSkusStockDateTime 'По группам' (stock, dateTime) =
    ACTION FORM printBalanceSkusStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

//остатки по партиям
FORM printListBalanceBatchesStock 'Остатки по партиям'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullNameStock

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumBGroupTypeStockDateTime(gt, st ,d)

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY dateBatch, nameBatch, idBarcodeSkuBatch, nameSkuBatch, shortNameUOMBatch//, shippedQuantityBatch
    FILTERS inSessionGroup(groupGroupTypeSku(gt, skuBatch(bt)))
    ORDER BY          dateBatch(bt), nameBatch(bt), nameSkuBatch(bt)

    PROPERTIES(bt, st, d) READONLY balanceBBatchStockDateTime, accountSumBBatchStockDateTime
    FILTERS balanceBBatchStockDateTime(bt, st, d)
;

printListBalanceBatchesStockDateTime 'Списком' (stock, dateTime) =
    ACTION FORM printListBalanceBatchesStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

FORM printBalanceBatchesStock 'Остатки по партиям'
    OBJECTS d = DATETIME FIXED PANEL
    PROPERTIES(d) dateTime = OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullNameStock

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumBGroupTypeStockDateTime(gt, st ,d)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalNameGroup(sk)
    ORDER BY canonicalNameGroup(sk)
    FILTERS inSessionGroup(sk) AND countSkuGroupGroupType(sk, gt)
    FILTERS groupTypeGroup(sk) == gt
    PROPERTIES(sk, st, d) READONLY accountSumBSkuGroupBatchStockDateTime
    FILTERGROUP inactive FILTER 'Активные' activeGroup(sk) 'F5' DEFAULT

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY dateBatch, nameBatch, idBarcodeSkuBatch, nameSkuBatch, shortNameUOMBatch//, shippedQuantityBatch
    FILTERS           groupGroupTypeSku(gt, skuBatch(bt)) == sk
    ORDER BY          dateBatch(bt), nameBatch(bt), nameSkuBatch(bt)

    PROPERTIES(bt, st, d) READONLY balanceBBatchStockDateTime, accountSumBBatchStockDateTime
    FILTERS balanceBBatchStockDateTime(bt, st, d)
;

printBalanceBatchesStockDateTime 'По группам' (stock, dateTime) =
    ACTION FORM printBalanceBatchesStock OBJECTS st = stock, d = dateTime PRINT  IMAGE 'print.png' IN print;

balanceRecBSkuGroupStockDateTime 'Остаток (всего)' (group, stock, dateTime) =
    GROUP SUM balanceBSkuStockDateTime (sku, stock, dateTime) IF isParentGroupSku(group, sku)
    BY group, stock, dateTime;

showAccountSumBatch 'Показывать учетные суммы по партиям в отчете по остаткам' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() showAccountSumBatch
;
DESIGN options {
    stock {
        MOVE PROPERTY(showAccountSumBatch());
    }
}


FORM reportBalanceStock 'Отчет по остаткам'
    OBJECTS d=DATETIME FIXED PANEL
    PROPERTIES(d) OBJVALUE

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR nameStock
    FILTERS isCompanyStock(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
//    PROPERTIES sumBGroupTypeStockDate(gt, st ,d)
//    PROPERTIES(gt) READONLY sessionConcatGroups

    TREE skuTree sk = Group PARENT parentGroup
    PROPERTIES inSessionGroup(sk) BACKGROUND backgroundInSessionGroup(sk)
    PROPERTIES READONLY orderGroup(sk), skuTreeName = nameGroup(sk)
    PROPERTIES(sk, st) READONLY balanceRecBSkuGroupStock, sumRecBSkuGroupStock
    PROPERTIES(sk, st, d) READONLY accountSumRecBSkuGroupBatchStockDateTime SHOWIF showAccountSumBatch()
    ORDER BY orderGroup(sk), skuTreeName
    FILTERS groupTypeGroup(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' activeGroup(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idSku SHOWIF showIDs(), idBarcodeSku, nameSku ON SHORTCUT showMovementSkuSkuStock(s,st) ON SHORTCUT showMovementPriceSkuSkuStock(s,st), shortNameUOMSku
    ORDER BY nameSku(s)
    FILTERS isParentGroupSku(sk, s)

    PROPERTIES(s, st) READONLY balanceBSkuStock, sumBSkuStock
    PROPERTIES(s, st, d) READONLY accountSumBatchBSkuStockDateTime SHOWIF showAccountSumBatch()
    PROPERTIES(st, d) printListBalanceSkusStockDateTime, printBalanceSkusStockDateTime
    FILTERGROUP balance 
        FILTER 'С остатком (кол-во)' balanceBSkuStock(s, st) 'F7' DEFAULT
        FILTER 'С остатком (кол-во/сумма)' balanceBSkuStock(s, st) OR sumBSkuStock(s, st) 'F8'   
    FILTERGROUP incorrectSum FILTER 'Неправильная сумма по партиям' NOT sumBSkuStock(s, st) == accountSumBatchBSkuStockDateTime(s, st, d) 'F9'   

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY dateBatch, nameBatch ON SHORTCUT showMovementBatchBatchStock(bt,st), idBarcodeSkuBatch, 
                      nameSkuBatch ON SHORTCUT showMovementSkuBatchStock(bt,st), shortNameUOMBatch//, shippedQuantityBatch
    FILTERS           isParentGroupBatch(sk, bt)
    ORDER BY          dateBatch(bt), nameBatch(bt), nameSkuBatch(bt)

    PROPERTIES(bt, st, d) READONLY balanceBBatchStockDateTime, accountSumBBatchStockDateTime
    PROPERTIES(st, d) printListBalanceBatchesStockDateTime, printBalanceBatchesStockDateTime
    FILTERS balanceBBatchStockDateTime(bt, st, d)

    EVENTS 
        ON CHANGE gt fillReportBalanceStockData(st, gt, d),
        ON CHANGE d fillReportBalanceStockData(st, gt, d),
        ON CHANGE st fillReportBalanceStockData(st, gt, d)
;
@extendFormFilterStockAccess(st, reportBalanceStock);

DESIGN reportBalanceStock {
    NEW topContainer{
        type = CONTAINERH;
        MOVE d.box;
        MOVE st.box;
        MOVE gt.box;
    }
    NEW bottomContainer {
        fill = 1;
        type = SPLITH;
        MOVE skuTree.tree.box;
        NEW tabContainer {
            fill = 1;
            type = TABBED;
            NEW skuContainer{
                caption = 'Товары';
                NEW printSkuContainer{
                    type = CONTAINERH;
                    caption = 'Печать';
                    MOVE PROPERTY(printListBalanceSkusStockDateTime(st,d));
                    MOVE PROPERTY(printBalanceSkusStockDateTime(st,d));
                }
                MOVE s.box;
            }
            NEW batchContainer{
                caption = 'Партии';
                NEW printBatchContainer {
                    type = CONTAINERV;
                    caption = 'Печать';
                    NEW print1{
                        type = CONTAINERH;
                        MOVE PROPERTY(printListBalanceBatchesStockDateTime(st,d));
                        MOVE PROPERTY(printBalanceBatchesStockDateTime(st,d));
                    }

                }
                MOVE bt.box;
            }
        }
    }
    MOVE functions.box;
}

//-- Печатные формы для оборотной ведомости списком и по группам--//

FORM printListBackSheet 'Оборотная ведомость'
    OBJECTS df=DATE FIXED PANEL
    PROPERTIES dateFrom = OBJVALUE(df)

    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES dateTo = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullNameStock
    FILTERS isCompanyStock(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumBGroupTypeStock(gt, st)
    PROPERTIES(gt, st) sumInGroupTypeStock, sumOutGroupTypeStock
    PROPERTIES sumAGroupTypeStock(gt, st)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, shortNameUOMSku
    ORDER BY nameSku(s)

    PROPERTIES(s, st) READONLY balanceBSkuStock, sumBSkuStock
    PROPERTIES(s, st) READONLY quantityInSkuStock, sumInSkuStock, quantityOutSkuStock, sumOutSkuStock
    PROPERTIES(s, st) READONLY balanceASkuStock, sumASkuStock
    FILTERS includeGroupTypeSku(gt, s)
    FILTERS filterBalanceBAInOutSkuStock (s, st)
    FILTERS s IS Sku AND st IS Stock AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия
;

printListBackSheet 'Списком' (stock, dateFrom, dateTo) =
    ACTION FORM printListBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT  IMAGE 'print.png' IN print;
xlsListBackSheet 'Списком (XLS)' (stock, dateFrom, dateTo) =
    ACTION FORM printListBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT XLS IMAGE 'print.png' IN print;

FORM printBackSheet 'Оборотная ведомость'
    OBJECTS df=DATE FIXED PANEL
    PROPERTIES dateFrom = OBJVALUE(df)

    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES dateTo = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR fullNameStock
    FILTERS isCompanyStock(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumBGroupTypeStock(gt, st)
    PROPERTIES(gt, st) sumInGroupTypeStock, sumOutGroupTypeStock
    PROPERTIES sumAGroupTypeStock(gt, st)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalNameGroup(sk)
    ORDER BY canonicalNameGroup(sk)
    FILTERS countIncludeSkuGroupGroupType(sk, gt)
    FILTERS groupTypeGroup(sk) == gt
    PROPERTIES(sk, st) READONLY sumBSessionSkuGroupStock
    PROPERTIES(sk, st) READONLY sumInSessionGroupSkuStock, sumOutSessionGroupSkuStock
    PROPERTIES(sk, st) READONLY sumASessionSkuGroupStock
    FILTERGROUP inactive FILTER 'Активные' activeGroup(sk) 'F5' DEFAULT
    FILTERS sk IS Group AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, shortNameUOMSku
    ORDER BY nameSku(s)
    FILTERS groupGroupTypeSku(gt, s) == sk

    PROPERTIES(s, st) READONLY balanceBSkuStock, sumBSkuStock
    PROPERTIES(s, st) READONLY quantityInSkuStock, sumInSkuStock, quantityOutSkuStock, sumOutSkuStock
    PROPERTIES(s, st) READONLY balanceASkuStock, sumASkuStock
    FILTERS includeGroupTypeSku(gt, s)
    FILTERS filterBalanceBAInOutSkuStock (s,st)
    FILTERS s IS Sku AND st IS Stock AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия
;

printBackSheet 'По группам' (stock, dateFrom, dateTo) =
    ACTION FORM printBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT  IMAGE 'print.png' IN print;

xlsBackSheet 'По группам (XLS)' (stock, dateFrom, dateTo) =
    ACTION FORM printBackSheet OBJECTS st = stock, df = dateFrom, dt = dateTo PRINT XLS IMAGE 'print.png' IN print;

fillDocumentReport 'Подбор документа' = ACTION () {
    FORM documents DIALOG;
    IF formResult() == FormResult.ok THEN {
        LOCAL chosenDocument = Document();
        chosenDocument() <- chosenObject('d');
        FOR [ = GROUP SUM 1 BY documentDocumentDetail(d), skuDocumentDetail(d)](chosenDocument(), sku) DO {
            includeSku(sku) <- TRUE;
        }
    }
} TOOLBAR;

deleteInDataSessionReport 'Очистить выборку' = ACTION () {
    includeSku(sku) <- NULL;
    formRefresh();
} TOOLBAR;

FORM reportBackSheet 'Оборотная ведомость' 
    OBJECTS df=DATE FIXED PANEL
    PROPERTIES dateFrom = OBJVALUE(df)

    OBJECTS dt=DATE FIXED PANEL
    PROPERTIES dateTo = OBJVALUE(dt)

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR nameStock
    FILTERS isCompanyStock(st)

    OBJECTS gt = GroupType FIXED PANEL
    PROPERTIES(gt) SELECTOR nameGroupType
    PROPERTIES sumBGroupTypeStock(gt, st)
    PROPERTIES(gt, st) sumInGroupTypeStock, sumOutGroupTypeStock
    PROPERTIES sumAGroupTypeStock(gt, st)
//    PROPERTIES(gt) READONLY sessionConcatGroups

    TREE skuTree sk = Group PARENT parentGroup
    PROPERTIES inSessionGroup(sk) BACKGROUND backgroundInSessionGroup(sk)
    PROPERTIES READONLY orderGroup(sk), skuTreeName = nameGroup(sk)
    PROPERTIES(sk, st) READONLY sumRecBSkuGroupStock
    PROPERTIES(sk, st) READONLY sumRecInSkuGroupStock, sumRecOutSkuGroupStock
    PROPERTIES(sk, st) READONLY sumRecASkuGroupStock
    ORDER BY orderGroup(sk), skuTreeName
    FILTERS groupTypeGroup(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' activeGroup(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(gt,s) includeGroupTypeSku BACKGROUND backgroundIncludeGroupTypeSku(gt,s)
    PROPERTIES(s) READONLY idBarcodeSku, nameSku, shortNameUOMSku
    ORDER BY nameSku(s)
    
    PROPERTIES(s, st) READONLY balanceBSkuStock, sumBSkuStock
    PROPERTIES(s, st) READONLY quantityInSkuStock, sumInSkuStock, quantityOutSkuStock, sumOutSkuStock
    PROPERTIES(st, df, dt) printListBackSheet, xlsListBackSheet, printBackSheet, xlsBackSheet
    PROPERTIES(s, st) READONLY balanceASkuStock, sumASkuStock

    FILTERGROUP include FILTER 'Отмеченные' includeGroupTypeSku(gt, s) DEFAULT 
    
    FILTERS filterBalanceBAInOutSkuStock (s, st)    
    PROPERTIES() TODRAW s fillDocumentReport, deleteInDataSessionReport
    
    EVENTS 
        ON CHANGE gt fillReportBackSheetData(st, gt, df, dt), 
        ON CHANGE df fillReportBackSheetData(st, gt, df, dt), 
        ON CHANGE dt fillReportBackSheetData(st, gt, df, dt),
        ON CHANGE st fillReportBackSheetData(st, gt, df, dt)
;

@extendFormFilterStockAccess(st, reportBackSheet);

DESIGN reportBackSheet {
    NEW topContainer {
        type = CONTAINERH;
        NEW dates {
            type = CONTAINERH;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        MOVE st.box;
        MOVE gt.box;
    }
    NEW sumContainer{
        type = CONTAINERH;
        caption = 'Итоговые суммы';
        MOVE PROPERTY(sumBGroupTypeStock(gt, st)){caption = 'Начала периода';}
        MOVE PROPERTY(sumInGroupTypeStock(gt, st)){caption = 'Товара пришедшего за период';}
        MOVE PROPERTY(sumOutGroupTypeStock(gt, st)){caption = 'Товара ушедшего за период';}
        MOVE PROPERTY(sumAGroupTypeStock(gt, st)){caption = 'Конца периода';}
    }
    NEW bottomContainer {
        fill = 1;
        type = SPLITH;

        MOVE skuTree.tree.box;

        PROPERTY(sumRecBSkuGroupStock(sk, st)){caption = 'Остаток на начало периода';}
        PROPERTY(sumRecASkuGroupStock(sk, st)){caption = 'Остаток на конец периода';}

        NEW tabContainer {
            fill = 2;
            type = TABBED;
            NEW skuContainer{
                caption = 'Товары';
                NEW printSkuContainer {
                    type = CONTAINERH;
                    caption = 'Печать';
                    MOVE PROPERTY(printListBackSheet(st,df,dt));
                    MOVE PROPERTY(xlsListBackSheet(st,df,dt));
                    MOVE PROPERTY(printBackSheet(st,df,dt));
                    MOVE PROPERTY(xlsBackSheet(st,df,dt));
                }
                MOVE s.box;
                PROPERTY(balanceBSkuStock(s, st)){caption = 'Остаток на начало периода';}
                PROPERTY(sumBSkuStock(s, st)){caption = 'Сумма на начало периода';}
                PROPERTY(balanceASkuStock(s, st)){caption = 'Остаток на конец периода';}
                PROPERTY(sumASkuStock(s, st)){caption = 'Сумма на конец периода';}
            }
        }
    }
    MOVE functions.box;
}

NAVIGATOR {
    stockReports{
        ADD reportBalanceStock;
        ADD reportBackSheet;
    }
}