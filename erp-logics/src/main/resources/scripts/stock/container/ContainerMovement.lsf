MODULE ContainerMovement;

REQUIRE System,
        Utils,
        Stock,
        Store,
        SkuLedger,
        PriceListLedgerAccount,
        Item;


//------------------------------------Отчет по таре-------------------------------------------//

in 'Вкл.' = DATA LOCAL BOOLEAN (Stock);

EXTEND FORM departmentStores
    PROPERTIES(d) in BEFORE id(d)
;

namesDepartmentStores 'Наименования'() = GROUP CONCAT name(DepartmentStore d) IF in(d), ', ' PREFCHARWIDTH 50;
in(Store st) = GROUP SUM 1 IF in(DepartmentStore d) BY store(d);
namesStores 'Магазины' () = GROUP CONCAT name(Store st) IF in(st), ', ' PREFCHARWIDTH 50;
in(LegalEntity l) = GROUP SUM 1 IF in(DepartmentStore d) BY legalEntity(d);
namesLegalEntities 'Компании' () = GROUP CONCAT name(LegalEntity l) IF in(l), ', ' PREFCHARWIDTH 50;

namesFilterItems 'Товары' = GROUP CONCAT name(Item i) IF in(i), ', ' PREFCHARWIDTH 50;
namesFilterSuppliers 'Поставщики' = GROUP CONCAT name(LegalEntity l) IF LegalEntity.in(l), ', ' PREFCHARWIDTH 50;

overMovementContainer (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) =
    OVERRIDE costOutBalance(batch, stock, dateFrom, dateTo),
             costInBalance(batch, stock, dateFrom, dateTo),
             balanceA(batch, stock, dateTo),
             balanceB(batch, stock, dateFrom);

accountSumInBalance 'Сумма прихода' (batch, stock, dateFrom, dateTo) = GROUP SUM cost (InSkuLedger ledger, Batch batch)* accountPriceA(batch, stock(ledger), dateTime(ledger))
    IF ledger IS InSkuLedger AND isPosted(ledger)
    AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
    BY batch, stock(ledger), dateFrom, dateTo;
    
accountSumOutBalance 'Сумма расхода' (batch, stock, dateFrom, dateTo) = GROUP SUM cost (OutSkuLedger ledger, Batch batch)* accountPriceA(batch, stock(ledger), dateTime(ledger))
    IF ledger IS OutSkuLedger AND isPosted(ledger)
    AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
    BY batch, stock(ledger), dateFrom, dateTo;

inContainerMovement = DATA LOCAL BOOLEAN (Stock,Batch);

balanceIn 'Остаток на начало' =  DATA LOCAL NUMERIC[14,3] (Stock,Batch);
sumIn 'Сумма на начало' =  DATA LOCAL NUMERIC[15,3] (Stock,Batch);

balanceOut 'Остаток на конец' =  DATA LOCAL NUMERIC[14,3] (Stock,Batch);
sumOut 'Сумма на конец' =  DATA LOCAL NUMERIC[15,3] (Stock,Batch);

balanceMoveIn 'Приход' =  DATA LOCAL NUMERIC[14,3] (Stock,Batch);
sumMoveIn 'Сумма прихода' =  DATA LOCAL NUMERIC[15,3] (Stock,Batch);

balanceMoveOut 'Расход' =  DATA LOCAL NUMERIC[14,3] (Stock,Batch);
sumMoveOut 'Сумма Расхода' =  DATA LOCAL NUMERIC[15,3] (Stock,Batch);

lastPrice 'Цена'  = DATA LOCAL NUMERIC[15,3] (Stock,Batch);

accountSumContainerDateFrom 'Остаток на начало по складу'  = GROUP SUM sumIn (Stock st, Batch bt) BY st;

accountSumContainerDateTo 'Остаток на конец по складу' = GROUP SUM sumOut(Stock st, Batch bt) BY st;

accountSumContainerStockDateFrom 'Остаток на начало по складам'  = GROUP SUM accountSumContainerDateFrom(Stock st);

accountSumContainerStockDateTo 'Остаток на конец по складам' = GROUP SUM accountSumContainerDateTo(Stock st);

includeContainerMovementBatchFromTo 'Рассчитать'(DATE dateFrom, DATE dateTo) = {
    
    inContainerMovement(Stock st, Batch bt) <- isPosted(bt) AND isContainer(bt) AND in(st);
    
    inContainerMovement(Stock st, Batch bt) <- NULL WHERE [= GROUP SUM 1 IF LegalEntity.in(LegalEntity l)]() AND NOT LegalEntity.in(supplier(bt));
    inContainerMovement(Stock st, Batch bt) <- NULL WHERE [= GROUP SUM 1 IF in(Item i)]() AND NOT in(sku(bt));
    
    inContainerMovement(Stock st, Batch bt) <- NULL WHERE inContainerMovement(st,bt) AND NOT overMovementContainer(bt, st, dateFrom, dateTo);     
    
    balanceIn(Stock st, Batch bt) <- NULL;
    balanceIn(Stock st, Batch bt) <- balanceB(bt, st, dateFrom) WHERE inContainerMovement(st,bt);
    
    sumIn(Stock st, Batch bt) <- NULL;
    sumIn(Stock st, Batch bt) <- balanceIn(st,bt) * accountPriceB(bt, st, dateFrom) WHERE inContainerMovement(st,bt);
    
    balanceOut(Stock st, Batch bt) <- NULL;
    balanceOut(Stock st, Batch bt) <- balanceA(bt, st, dateTo) WHERE inContainerMovement(st,bt);
    
    lastPrice(Stock st, Batch bt) <- NULL;
    lastPrice(Stock st, Batch bt) <- accountPriceA(bt, st, dateTo) WHERE inContainerMovement(st,bt);
    
    lastPrice(Stock st, Batch bt) <- accountPriceA(bt, st, 2030_01_01) WHERE inContainerMovement(st,bt) AND NOT lastPrice(st,bt);
    
    sumOut(Stock st, Batch bt) <- NULL;
    sumOut(Stock st, Batch bt) <- balanceOut(st,bt) * lastPrice(st,bt) WHERE inContainerMovement(st,bt);
    
    balanceMoveIn(Stock st, Batch bt) <- NULL;
    balanceMoveIn(Stock st, Batch bt) <- costInBalance(bt, st, dateFrom, dateTo) WHERE inContainerMovement(st,bt);
    
    sumMoveIn(Stock st, Batch bt) <- NULL;
    sumMoveIn(Stock st, Batch bt) <- [= GROUP SUM cost (InSkuLedger ledger, Batch batch) * (OVERRIDE accountPriceA(batch, stock(ledger), dateTime(ledger)), lastPrice(stock(ledger), batch))
                               IF ledger IS InSkuLedger AND isPosted(ledger)
                               AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
                               BY batch, stock(ledger), dateFrom, dateTo](bt, st, dateFrom, dateTo) WHERE inContainerMovement(st,bt);
    
    balanceMoveOut(Stock st, Batch bt) <- NULL;
    balanceMoveOut(Stock st, Batch bt) <- costOutBalance(bt, st, dateFrom, dateTo) WHERE inContainerMovement(st,bt);

    sumMoveOut(Stock st, Batch bt) <- NULL;
    sumMoveOut(Stock st, Batch bt) <- [= GROUP SUM cost (OutSkuLedger ledger, Batch batch) * (OVERRIDE accountPriceA(batch, stock(ledger), dateTime(ledger)), lastPrice(stock(ledger),batch))
                                IF ledger IS OutSkuLedger AND isPosted(ledger)
                                AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
                                BY batch, stock(ledger), dateFrom, dateTo](bt, st, dateFrom, dateTo) WHERE inContainerMovement(st,bt);
 
    formRefresh();
}

balanceInBatches = GROUP SUM balanceIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st;
balanceOutBatches = GROUP SUM balanceOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st;

balanceMoveInBatches = GROUP SUM balanceMoveIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st;
sumMoveInBatches = GROUP SUM sumMoveIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st;
balanceMoveOutBatches = GROUP SUM balanceMoveOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st;
sumMoveOutBatches = GROUP SUM sumMoveOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st;

balanceInBatches = GROUP SUM balanceInBatches(Stock st);
balanceOutBatches = GROUP SUM balanceOutBatches(Stock st);

balanceMoveInBatches = GROUP SUM balanceMoveInBatches(Stock st);
sumMoveInBatches = GROUP SUM sumMoveInBatches(Stock st);
balanceMoveOutBatches = GROUP SUM balanceMoveOutBatches(Stock st);
sumMoveOutBatches = GROUP SUM sumMoveOutBatches(Stock st);

//--

balanceInPrice = GROUP SUM balanceIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);
sumInPrice = GROUP SUM sumIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);

balanceOutPrice = GROUP SUM balanceOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);
sumOutPrice = GROUP SUM sumOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);

balanceMoveInPrice = GROUP SUM balanceMoveIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);
sumMoveInPrice = GROUP SUM sumMoveIn(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);

balanceMoveOutPrice = GROUP SUM balanceMoveOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);
sumMoveOutPrice = GROUP SUM sumMoveOut(Stock st, Batch bt) IF inContainerMovement(st,bt) BY st, sku(bt), lastPrice(st,bt);

changeDepartmentStores(DATE dateFrom, DATE dateTo) = {
    DIALOG departmentStores OBJECTS d INPUT DO {
        IF NOT [= GROUP SUM 1 IF in(DepartmentStore ds)]() THEN
            in(d) <- TRUE;
        includeContainerMovementBatchFromTo(dateFrom,dateTo);
    }
}

FORM filterItems 'Товары'
    TREE tree g = ItemGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    ORDER order(g), name(g)

    OBJECTS i = Item
    PROPERTIES(i) in
    PROPERTIES(i) READONLY id SHOWIF showIDs()
    PROPERTIES(i) READONLY idBarcode, name, shortNameUOM
    FILTERS isContainer(i),
            isParent(g,i)
    ORDER name(i)
    FILTERGROUP active
        FILTER 'Активные' active(i) 'F11' DEFAULT
    FILTERGROUP include
        FILTER 'Отмеченные' in(i) 'F10'
;

DESIGN filterItems {
    BOX {
        preferredSize = (1024, 768);
        NEW topContainer {
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE tree);
            MOVE BOX(i) {
                fill = 3;
                GRID(i) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

filterItems (DATE dateFrom, DATE dateTo) = {
    DIALOG filterItems OBJECTS i INPUT DO {
        includeContainerMovementBatchFromTo(dateFrom,dateTo);
    }
}

FORM filterSuppliers 'Поставщики'    
    OBJECTS s = LegalEntity
    PROPERTIES(s) LegalEntity.in
    PROPERTIES (s) READONLY name, id, fullName
    ORDER name(s)
    FILTERS isSupplier(s)
    FILTERGROUP inactiveLegalEntity FILTER 'Активные' active(s) 'F11' DEFAULT
    FILTERGROUP include FILTER 'Отмеченные' LegalEntity.in(s) 'F10'
;

DESIGN filterSuppliers {
    BOX {
        preferredSize = (600, 400);
        MOVE BOX(s);   
        MOVE TOOLBARBOX;
    }
}

filterSuppliers (DATE dateFrom, DATE dateTo) = {
    DIALOG filterSuppliers OBJECTS s INPUT DO {
        includeContainerMovementBatchFromTo(dateFrom,dateTo);
    }
}

FORM containerMovement 'Отчет по таре'

    OBJECTS params = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES objFrom = VALUE(dFrom), objTo = VALUE(dTo)
    
    PROPERTIES() ON CHANGE changeDepartmentStores(dFrom, dTo) namesDepartmentStores, namesLegalEntities 
    PROPERTIES() namesFilterItems ON CHANGE filterItems(dFrom, dTo), namesFilterSuppliers ON CHANGE filterSuppliers(dFrom, dTo)
    PROPERTIES() READONLY accountSumContainerStockDateFrom, accountSumContainerStockDateTo
    
    OBJECTS sb = (dep = DepartmentStore, bt = Batch)

    PROPERTIES(bt) READONLY idBarcodeSku, nameSku, nameSupplier
    PROPERTIES(dep,bt) READONLY lastPrice, balanceIn, sumIn, balanceOut, sumOut, balanceMoveIn, sumMoveIn, balanceMoveOut, sumMoveOut
               
    FILTERS inContainerMovement(dep,bt)
    
    ORDER nameSku(bt)

    PROPERTIES includeContainerMovementBatchFromTo(dFrom, dTo) TOOLBAR TODRAW sb
    
    EVENTS 
        ON CHANGE dFrom includeContainerMovementBatchFromTo(dFrom, dTo), 
        ON CHANGE dTo includeContainerMovementBatchFromTo(dFrom, dTo),
        ON CHANGE dep includeContainerMovementBatchFromTo(dFrom, dTo)
;

DESIGN containerMovement {
    NEW header {
        type = CONTAINERH;
        MOVE BOX(params) {
            type = CONTAINERH;
        }
        NEW stocks {
            caption = 'Отделы магазинов';
            type = CONTAINERH;
            MOVE PROPERTY(namesDepartmentStores());
            MOVE PROPERTY(namesLegalEntities());
        }
    }
    NEW header2 {
        type = CONTAINERH;
        caption = 'Фильтры';
        MOVE PROPERTY(namesFilterItems());
        MOVE PROPERTY(namesFilterSuppliers());
    }
    NEW header3 {
        type = CONTAINERH;
        NEW sums {
            caption = 'Суммы';
            type = CONTAINERH;
            MOVE PROPERTY(accountSumContainerStockDateFrom());
            MOVE PROPERTY(accountSumContainerStockDateTo());
        }
        NEW print {
            type = CONTAINERH;
            caption = 'Печать';
        }
    }
    MOVE BOX(sb);
    MOVE TOOLBARBOX;
}

@extendFormFilterStockAccess(dep, containerMovement);

NAVIGATOR {
    stockReports {
        ADD containerMovement;
    }
}