MODULE ContainerMovement;

REQUIRE System,
        Utils,
        Stock,
        Store,
        SkuLedger,
        PriceListLedger;


//------------------------------------Отчет по таре-------------------------------------------//

overMovementContainer (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) =
    OVERRIDE balanceB(batch, stock, dateFrom),
             balanceA(batch, stock, dateTo),
             costInBalance(batch, stock, dateFrom, dateTo),
             costOutBalance(batch, stock, dateFrom, dateTo);

accountSumInBalance 'Сумма прихода' (batch, stock, dateFrom, dateTo) = GROUP SUM cost (InSkuLedger ledger, Batch batch)* accountPriceA(batch, stock(ledger), dateTime(ledger))
    IF ledger IS InSkuLedger AND isPosted(ledger)
    AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
    BY batch, stock(ledger), dateFrom, dateTo;
    
accountSumOutBalance 'Сумма расхода' (batch, stock, dateFrom, dateTo) = GROUP SUM cost (OutSkuLedger ledger, Batch batch)* accountPriceA(batch, stock(ledger), dateTime(ledger))
    IF ledger IS OutSkuLedger AND isPosted(ledger)
    AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
    BY batch, stock(ledger), dateFrom, dateTo;

inContainerMovement = DATA LOCAL BOOLEAN (Batch);

balanceIn 'Остаток на начало' =  DATA LOCAL NUMERIC[14,3] (Batch);
sumIn 'Сумма на начало' =  DATA LOCAL NUMERIC[15,3] (Batch);

balanceOut 'Остаток на конец' =  DATA LOCAL NUMERIC[14,3] (Batch);
sumOut 'Сумма на конец' =  DATA LOCAL NUMERIC[15,3] (Batch);

balanceMoveIn 'Приход' =  DATA LOCAL NUMERIC[14,3] (Batch);
sumMoveIn 'Сумма прихода' =  DATA LOCAL NUMERIC[15,3] (Batch);

balanceMoveOut 'Расход' =  DATA LOCAL NUMERIC[14,3] (Batch);
sumMoveOut 'Сумма Расхода' =  DATA LOCAL NUMERIC[15,3] (Batch);

lastPrice 'Цена'  = DATA LOCAL NUMERIC[15,3] (Batch);

accountSumContainerStockDateFrom 'Остаток на начало по складу'  = GROUP SUM sumIn (Batch bt);

accountSumContainerStockDateTo 'Остаток на конец по складу' = GROUP SUM sumOut(Batch bt);

includeContainerMovementBatchFromTo 'Рассчитать'(Stock stock, DATE dateFrom, DATE dateTo) = ACTION {
    
    inContainerMovement (Batch bt) <- isPosted(bt) AND isContainer(bt);
    
    inContainerMovement (Batch bt) <- NULL WHERE inContainerMovement (bt) AND NOT overMovementContainer(bt, stock, dateFrom, dateTo); 
    
    balanceIn(Batch bt) <- NULL;
    balanceIn(Batch bt) <- balanceB(bt, stock, dateFrom) WHERE inContainerMovement (bt);
    
    sumIn (Batch bt) <- NULL;
    sumIn (Batch bt) <- balanceIn(bt) * accountPriceB(bt, stock, dateFrom) WHERE inContainerMovement (bt);
    
    balanceOut (Batch bt) <- NULL;
    balanceOut (Batch bt) <- balanceA(bt, stock, dateTo) WHERE inContainerMovement (bt);
    
    lastPrice(Batch bt) <- NULL;
    lastPrice(Batch bt) <- accountPriceA(bt, stock, dateTo) WHERE inContainerMovement (bt);
    
    lastPrice(Batch bt) <- accountPriceA(bt, stock, 2030_01_01) WHERE inContainerMovement (bt) AND NOT lastPrice(bt);
    
    sumOut (Batch bt) <- NULL;
    sumOut (Batch bt) <- balanceOut(bt) * lastPrice(bt) WHERE inContainerMovement (bt);
    
    balanceMoveIn (Batch bt) <- NULL;
    balanceMoveIn (Batch bt) <- costInBalance(bt, stock, dateFrom, dateTo) WHERE inContainerMovement (bt);
    
    sumMoveIn (Batch bt) <- NULL;
    sumMoveIn (Batch bt) <- [= GROUP SUM cost (InSkuLedger ledger, Batch batch) * (OVERRIDE lastPrice(batch), accountPriceA(batch, stock(ledger), dateTime(ledger)))
                               IF ledger IS InSkuLedger AND isPosted(ledger)
                               AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
                               BY batch, stock(ledger), dateFrom, dateTo](bt, stock, dateFrom, dateTo) WHERE inContainerMovement (bt);
    
    balanceMoveOut (Batch bt) <- NULL;
    balanceMoveOut (Batch bt) <- costOutBalance(bt, stock, dateFrom, dateTo) WHERE inContainerMovement (bt);

    sumMoveOut (Batch bt) <- NULL;
    sumMoveOut (Batch bt) <- [= GROUP SUM cost (OutSkuLedger ledger, Batch batch) * (OVERRIDE lastPrice(batch), accountPriceA(batch, stock(ledger), dateTime(ledger)))
                                IF ledger IS OutSkuLedger AND isPosted(ledger)
                                AND date(ledger) >= DATE dateFrom AND date(ledger)<= DATE dateTo
                                BY batch, stock(ledger), dateFrom, dateTo](bt, stock, dateFrom, dateTo) WHERE inContainerMovement (bt);
 
    formRefresh();
}

balanceInBatches = GROUP SUM balanceIn(Batch bt) IF inContainerMovement(bt);
balanceOutBatches = GROUP SUM balanceOut(Batch bt) IF inContainerMovement(bt);

balanceMoveInBatches = GROUP SUM balanceMoveIn(Batch bt) IF inContainerMovement(bt);
sumMoveInBatches = GROUP SUM sumMoveIn(Batch bt) IF inContainerMovement(bt);
balanceMoveOutBatches = GROUP SUM balanceMoveOut(Batch bt) IF inContainerMovement(bt);
sumMoveOutBatches = GROUP SUM sumMoveOut(Batch bt) IF inContainerMovement(bt);

//--

balanceInPrice = GROUP SUM balanceIn(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);
sumInPrice = GROUP SUM sumIn(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);

balanceOutPrice = GROUP SUM balanceOut(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);
sumOutPrice = GROUP SUM sumOut(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);

balanceMoveInPrice = GROUP SUM balanceMoveIn(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);
sumMoveInPrice = GROUP SUM sumMoveIn(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);

balanceMoveOutPrice = GROUP SUM balanceMoveOut(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);
sumMoveOutPrice = GROUP SUM sumMoveOut(Batch bt) IF inContainerMovement(bt) BY sku(bt), lastPrice(bt);


FORM containerMovement 'Отчет по таре'

    OBJECTS params = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES objFrom = OBJVALUE(dFrom), objTo = OBJVALUE(dTo)

    OBJECTS dep = DepartmentStore  FIXED PANEL
    PROPERTIES(dep) SELECTOR name, nameLegalEntity  

    OBJECTS bt=Batch

    PROPERTIES READONLY accountSumContainerStockDateFrom(), accountSumContainerStockDateTo()
    PROPERTIES(bt) READONLY idBarcodeSku, nameSku, nameSupplier, lastPrice
    PROPERTIES(bt) READONLY balanceIn, sumIn, balanceOut, sumOut, balanceMoveIn, sumMoveIn, balanceMoveOut, sumMoveOut
               
    FILTERS inContainerMovement(bt)
    
    ORDER BY nameSku(bt)

    PROPERTIES includeContainerMovementBatchFromTo(dep, dFrom, dTo) TOOLBAR TODRAW bt
    
    EVENTS 
        ON CHANGE dFrom includeContainerMovementBatchFromTo(dep, dFrom, dTo), 
        ON CHANGE dTo includeContainerMovementBatchFromTo(dep, dFrom, dTo),
        ON CHANGE dep includeContainerMovementBatchFromTo(dep, dFrom, dTo)
;

DESIGN containerMovement {
    NEW header {
        type = CONTAINERH;
        MOVE params.box {
            type = CONTAINERH;
        }
        MOVE dep.box {
            type = CONTAINERH;
        }
    }

    NEW header2 {
        type = CONTAINERH;
        NEW sums {
            caption = 'Суммы';
            type = CONTAINERH;
            MOVE PROPERTY(accountSumContainerStockDateFrom());
            MOVE PROPERTY(accountSumContainerStockDateTo());
        }
        NEW print {
            type = CONTAINERH;
            caption = 'Печать';
        }
    }

    MOVE bt.box;
    MOVE functions.box;
}

@extendFormFilterStockAccess(dep, containerMovement);

NAVIGATOR {
    stockReports {
        ADD containerMovement;
    }
}