MODULE StockSkuDocument;

REQUIRE SkuLedger, SystemEvents, Barcode, StockMovement;

NAMESPACE Stock;

// ----------- Подбор (товар / один склад)---------------//     Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuPriceListTypeAgreement(object, stockProp, prefix)
    @defineDocumentSku(object, sku, stock, stockProp);
    priceListType(###object object, Sku sku) = OVERRIDE priceListType(object) IF sku IS Sku, prefix###priceListType(agreement(object), sku);

//    priceSku###object 'Цена' (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stockProp###object(object), dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Sku sku, ###object object) = prevPriceB[PriceListType,Sku,Stock,DATETIME](ledgerPriceListType(priceListType(object, sku)), sku, stockProp##Stock(object), dateTime(object));

    viewPrice 'Цена' (sku, object) = DATA LOCAL NESTED NUMERIC[16,4] (Sku, ###object);

    price 'Цена' (Sku sku, ###object object) = viewPrice(sku, object);

    updateViewPrice (Sku sku, ###object object) = ACTION {
        FOR PriceListType pt == priceListType(object, sku) NOINLINE (pt) DO
            viewPrice(sku, object) <- prevPriceB(pt, sku, stockProp##Stock(object), dateTime(object));
    }
END
META defineDocumentSkuPriceListTypeSystemLedger(object, priceListTypeProp, stockClass, stockProp)
    @defineDocumentSku(object, sku, stockClass, stockProp);
    price 'Цена' (Sku sku, ###object object) = prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp, sku, stockProp###stockClass(object), dateTime(object));
END

META defineDocumentSku(object, detail, skuProp, stockClass, stockProp)
    detail###stockProp (sku, object, stock) =  GROUP MAX (###detail detail)
        BY skuProp(detail), object(detail), stockProp###stockClass(detail);
    detail (###skuProp sku, ###object object) = detail###stockProp(sku, object, stockProp###stockClass(object));

    currentBalance 'Остаток' (###skuProp sku, ###object object) = currentBalance(sku, stockProp###stockClass(object));
    prevCurrentBalance 'Остаток' (###skuProp sku, ###object object) = prevCurrentBalance(sku, stockProp###stockClass(object));
//    backgroundQuantitySku###object 'Цвет' (sku, object) = RGB(255,128,128) IF quantity###detail###skuProp###object(sku, object) AND NOT
//        (quantity###detail###skuProp###object(sku, object) <= currentBalanceSku###object(sku, object));
    backgroundQuantity 'Цвет' (sku, object) = ABSTRACT CASE COLOR (Sku, ###object);  

    overChangeQuantityValue###skuProp = ACTION ABSTRACT LIST (###detail);

    changeQuantityValue(###skuProp skuProp, ###object object) = ACTION {
        IF detail(sku, object) THEN {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                quantity(###detail detail) <- requestedNumeric() WHERE detail == detail(sku, object);
                overChangeQuantityValue###skuProp(detail(sku, object));
            } ELSE {
                FOR detail(sku, object) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                FOR ADDOBJ d = ###detail DO {
                    object(d) <- object;
                    skuProp(d) <- sku;
                    quantity (d) <- requestedNumeric();
                    overChangeQuantityValue###skuProp(d);
                }
            }
        }
    }

    changeQuantity(###skuProp skuProp, ###object object) = ACTION {
        REQUEST NUMERIC[16,5] INPUT;
        EXEC changeQuantityValue(sku, object);
    }

    // Выбор всего остатка
    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, ###object);
    changeAllQuantity(###skuProp skuProp, ###object object) = ACTION {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantity (sku,object) <- TRUE;
            requestedNumeric() <- prevCurrentBalance(sku,object);
            changeQuantityValue(sku, object);
        } ELSE {
            allQuantity (sku,object) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValue(sku, object);
        }
    }

END
META defineDocumentSku(object, skuProp, stockClass, stockProp)
    @defineDocumentSku(object, object##Detail, skuProp, stockClass, stockProp);
END

META extendFormDocumentSku(object, detail, form, concrete, skuProp, stockProp)

    backgroundPickName 'Цвет в подборе' = ABSTRACT CASE COLOR (Sku, ###object);
    hideQuantity###skuProp##Document = ABSTRACT BOOLEAN (###object);
    showQuantity###skuProp##Document = NOT hideQuantity###skuProp##Document(###object o); 
    
    showMovementSku 'Показать движение по складу' (Sku ks, ###object concrete) = ACTION showMovementSku(ks, stockProp(concrete));
    showMovementPriceSku 'Показать изменение цены по складу' (Sku ks, ###object concrete) = ACTION showMovementPriceSku(ks, stockProp(concrete));
        
    EXTEND FORM form

        TREE skuTree sk = SkuGroup PARENT parent
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDER BY order(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

        OBJECTS ks=Sku
        PROPERTIES READONLY      inputName = name(ks) ON SHORTCUT showMovementSku(ks, concrete) ON SHORTCUT showMovementPriceSku(ks, concrete) BACKGROUND backgroundPickName(ks, concrete)
        PROPERTIES(ks) READONLY  BACKGROUND backgroundPickName(ks, concrete) idBarcode, id SHOWIF showIDs(), shortNameUOM
        PROPERTIES(ks, concrete) quantity###detail ON CHANGE changeQuantity(ks, concrete) 
                                    BACKGROUND backgroundQuantity(ks, concrete) SHOWIF showQuantity###skuProp##Document(concrete)
                                    QUICKFILTER inputName,
                                 prevCurrentBalance READONLY,
                                 allQuantity ON CHANGE changeAllQuantity(ks, concrete),
                                 price READONLY
        PROPERTIES               add###skuProp() TODRAW ks, edit(ks), copy(ks)

        FILTERS                isParent(sk, ks)
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        ORDER BY inputName
    ;

    seek###skuProp##Barcode(###object object, VARSTRING[15] barcode) = ACTION { 
        IF skuProp##Barcode(barcode, date(object)) THEN {
            SEEK form.ks = skuProp##Barcode(barcode, date(object));     
        } ELSE {
            MESSAGE 'Штрихкод не найден.';
        }
    }
    
    seekOver###skuProp(###object object) = ACTION {
        REQUEST VARSTRING[15] INPUT;
        IF requestedString() THEN {
            seek###skuProp##Barcode(object, requestedString());
        }        
    };
    seek###skuProp 'Поиск по штрихкоду:' (###object object) = DATA LOCAL VARSTRING[15] (###object) TOOLBAR EDITKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE seekOver###skuProp(object);       
    EXTEND FORM form
        PROPERTIES(concrete) TODRAW ks seek###skuProp    
    ;
    DESIGN form {
        mainTabbed {
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;
                fill = 1;
                MOVE skuTree.tree.box { caption = 'Группы SKU'; }
                NEW skuMainPane {
                    fill = 3;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        NEW skuPane {
                            type = CONTAINERV;
                            caption = 'Товары';
                            fill = 1;
                            NEW skuTopPane {
                                caption = 'Поиск товара';
                                MOVE PROPERTY(seek###skuProp(concrete));
                            }
                            MOVE ks.box;               
                        }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, concrete)) { background = #FFEEEE; }
        PROPERTY(quantity###detail(ks, concrete)) { background = #D4FFD4; }
    }
END

META extendFormDocumentSkuPriceListTypeAgreement(eobj, detail, form, concrete, skuProp, stockProp)
    @extendFormDocumentSku(eobj, detail, form, concrete, skuProp, stockProp);

    current###eobj###eobj() = DATA LOCAL NESTED Object ();
    setCurrent###eobj###eobj(Object concrete) = ACTION current###eobj###eobj() <- concrete;

    EXTEND FORM form
        EVENTS ON CHANGE concrete setCurrent###eobj###eobj(concrete)
    ;

    WHEN SESSION FORMS form (SET([= VIEW form.ks](###skuProp sku)) AND (Object concrete) == current###eobj###eobj()) OR 
                            ((CHANGED(stockProp[###eobj](concrete)) OR 
                              CHANGED(dateT##concrete##me[###eobj](concrete)) OR
                              CHANGED(pr##concrete##ceL##concrete##stType[###eobj](concrete)) OR
                              CHANGED(agreement[###eobj](concrete))) AND [= VIEW form.ks](sku)) DO
        updateV##concrete##ewPr##concrete##ce(sku, concrete);
END

META extendFormDocumentSku(object, form, concrete)
    @extendFormDocumentSku(object, object##Detail, form, concrete, sku);
END

META extendFormDocumentSkuPriceListTypeAgreement(object, form, concrete, stockProp)
    @extendFormDocumentSkuPriceListTypeAgreement(object, object##Detail, form, concrete, sku, stockProp);
END

// ----------- Подбор (партий / один склад)---------------//    Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchPriceListTypeAgreement(object, stockProp, prefix)
    @defineDocumentBatch(object, batch, sku, stock, stockProp);
    priceListType(###object object, Batch batch) = OVERRIDE priceListType(object) IF batch IS Batch, prefix###priceListType(agreement(object), sku(batch));

//    priceBatch###object 'Цена' (batch, object) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###batch(object, batch), batch, stockProp###object(object), dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Batch batch, ###object object) = prevPriceB[PriceListType,Batch,Stock,DATETIME](ledgerPriceListType(priceListType(object, batch)), batch, stockProp##Stock(object), dateTime(object));

    viewPrice 'Цена' (batch, object) = DATA LOCAL NESTED NUMERIC[16,4] (Batch, ###object);

    price 'Цена' (Batch batch, ###object object) = viewPrice(batch, object);

    updateViewPrice (Batch batch, ###object object) = ACTION {
        FOR PriceListType pt == priceListType(object, batch) NOINLINE (pt) DO
            viewPrice(batch, object) <- prevPriceB(pt, batch, stockProp##Stock(object), dateTime(object));
    }
END

META defineDocumentBatchPriceListTypeSystemLedger(object, priceListTypeProp, stockClass, stockProp)
    @defineDocumentBatch(object, batch, sku, stockClass, stockProp);
    price 'Цена' (Batch batch, ###object object) = prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp###stockClass(object), dateTime(object));
END

META defineDocumentBatch(object, detail, batchProp, skuProp, stockClass, stockProp)
    detail###stockProp (batch, object, stock) =  GROUP MAX (###detail detail)
        BY batchProp(detail), object(detail), stockProp###stockClass(detail);
    detail (###batchProp batch, ###object object) = detail###stockProp(batch, object, stockProp###stockClass(object));

    currentBalance 'Остаток' (###batchProp batch, ###object object) = currentBalance(batch, stockProp###stockClass(object));
    prevCurrentBalance 'Остаток' (###batchProp batch, ###object object) = prevCurrentBalance(batch, stockProp###stockClass(object));

    quantity###detail 'Кол-во товара в документе' (batch, object) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail);

    backgroundQuantity 'Цвет' (batch, object) = ABSTRACT CASE COLOR (Batch, ###object);  

    overChangeQuantityValue###batchProp = ACTION ABSTRACT LIST (###detail);

    changeQuantityValue(###batchProp batchProp, ###object object) = ACTION {
        IF detail(batch, object) THEN {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                quantity(###detail detail) <- requestedNumeric() WHERE detail == detail(batch, object);
                overChangeQuantityValue###batchProp(detail(batch, object));
            } ELSE {
                FOR detail(batch, object) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                FOR ADDOBJ d = ###detail DO {
                    object(d) <- object;
                    skuProp(d) <- skuProp(batch);
                    batchProp(d) <- batch;
                    quantity (d) <- requestedNumeric();
                    overChangeQuantityValue###batchProp(d);
                }
            }
        }
    }

    changeQuantity(###batchProp batchProp, ###object object) = ACTION {
        REQUEST NUMERIC[16,5] INPUT;
        changeQuantityValue(batch, object);
    }

    // Выбор всего остатка
    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, ###object);
    changeAllQuantity(###batchProp batchProp, ###object object)= ACTION {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantity (batch,object) <- TRUE;
            requestedNumeric() <- prevCurrentBalance(batch,object);
            changeQuantityValue(batch, object);
        } ELSE {
            allQuantity (batch,object) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValue(batch, object);
        }
    }

END

META defineDocumentBatch(object, batchProp, skuProp, stockClass, stockProp)
    @defineDocumentBatch(object, object##Detail, batchProp, skuProp, stockClass, stockProp);
END

META extendFormDocumentBatch(object, detail, form, concrete, batchProp)

    EXTEND FORM form

        OBJECTS b=Batch FIXED GRID
        PROPERTIES READONLY SHOWIF show###batchProp(concrete) nameSku(b), idBarcodeSku(b), shortNameUOM(b), id(b), name(b)
        PROPERTIES(b, concrete) SHOWIF show###batchProp(concrete) quantity###detail ON CHANGE changeQuantity(b, concrete) 
                                BACKGROUND backgroundQuantity(b, concrete)
                                QUICKFILTER nameSku(b),
                                prevCurrentBalance READONLY,
                                allQuantity ON CHANGE changeAllQuantity(b, concrete),
                                price READONLY
//                                viewPriceBatch###object READONLY

        FILTERS                isParent(sk, b),
                               activeSku(b)

        ORDER BY nameSku(b)
    ;                                        

    DESIGN form {
        skuSelectPane {
            type = TABBED;

            MOVE b.box {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalance(b, concrete)) { background = #FFEEEE; }
        PROPERTY(quantity###detail(b, concrete)) { background = #D4FFD4; }
    }
END
META extendFormDocumentBatch(object, form, concrete)
    @extendFormDocumentBatch(object, object##Detail, form, concrete, batch);
END

META extendFormDocumentBatchPriceListTypeAgreement(eobj, detail, form, concrete, batchProp, stockProp)
    @extendFormDocumentBatch(eobj, detail, form, concrete, batchProp);
    
    WHEN SESSION FORMS form (SET([= VIEW form.b](###batchProp batch)) AND (Object concrete) == current###eobj###eobj()) OR
                            ((CHANGED(stockProp[###eobj](concrete)) OR 
                              CHANGED(dateT##concrete##me[###eobj](concrete)) OR
                              CHANGED(pr##concrete##ceL##concrete##stType[###eobj](concrete)) OR
                              CHANGED(agreement[###eobj](concrete))) AND [= VIEW form.b](batch)) DO
        updateV##concrete##ewPr##concrete##ce(batch, concrete);
END

META extendFormDocumentBatchPriceListTypeAgreement(object, form, concrete, stockProp)
    @extendFormDocumentBatchPriceListTypeAgreement(object, object##Detail, form, concrete, batch, stockProp);
END

//задание цены для подбора

META extendFormDocumentPriceSku (object, priceListTypeProp, stockProp, caption, form, char, showif)
    price###priceListTypeProp 'Цена'##caption (Sku sku, ###form object) = prevPriceB(SystemLedgerPriceListType.##priceListTypeProp, sku, stockProp(object), dateTime(object));

    EXTEND FORM form
        PROPERTIES(ks, char) READONLY price###priceListTypeProp SHOWIF showif(char)
    ;
END

META extendFormDocumentPriceBatch (object, priceListTypeProp, stockProp, caption, form, char, showif)
    price###priceListTypeProp 'Цена'##caption (Batch batch, ###form object) = prevPriceB(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp(object), dateTime(object));

    EXTEND FORM form
        PROPERTIES(b, char) READONLY price###priceListTypeProp SHOWIF showif(char)
    ;
END

// ----------- Подбор (товар / несколько складов)---------------//       Не забывать имплементить цвет, если нужно!!!!!!!!

deleteNullDetail 'Удалять строки с нулевым значением' = DATA BOOLEAN ();
EXTEND FORM options 
    PROPERTIES deleteNullDetail()
;
DESIGN options {
    commons {
        MOVE PROPERTY (deleteNullDetail());
    }
}

META defineDocumentSkuStockPriceListTypeAgreement(object, stockProp)
    @defineDocumentSkuStock(object, sku, stockProp);
    priceListType(###object object, Sku sku) = OVERRIDE priceListType(object) IF sku IS Sku, priceListType(agreement(object), sku);

//    priceSkuStock###object 'Цена' (sku, stock, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stock, dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Sku sku, Stock stock, ###object object) = prevPriceB[PriceListType,Sku,Stock,DATETIME](ledgerPriceListType(priceListType(object, sku)), sku, stock, dateTime(object));
                                      
    viewPrice 'Цена' (sku, stock, object) = DATA LOCAL NESTED NUMERIC[16,4] (Sku, Stock, ###object);

    price 'Цена' (Sku sku, Stock stock, ###object object) = viewPrice(sku, stock, object);

    updateViewPrice (Sku sku, Stock stock, ###object object) = ACTION {
        FOR PriceListType pt == priceListType(object, sku) AND stock IS Stock NOINLINE (pt) DO
            viewPrice(sku, stock, object) <- prevPriceB(pt, sku, IF overPriceStockUser(object) THEN overPriceStockUser(object) ELSE stock, dateTime(object));
    }
END
META defineDocumentSkuStockPriceListTypeSystemLedger(object, priceListTypeProp, stockProp)
    @defineDocumentSkuStock(object, sku, stockProp);
    price 'Цена' (Sku sku, Stock stock, ###object object) = prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp, sku, stock, dateTime(object));
END

META defineDocumentSkuStock(object, detail, skuProp, stockProp)
    detail###stockProp (sku, object, stock) =  GROUP MAX (###detail detail)
        BY skuProp(detail), object(detail), stockProp###stock(detail);

    quantity###stockProp 'Кол-во товара в документе' (sku, object, stock) = GROUP SUM quantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp###stock(detail);

//    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128) IF quantitySku###object###stockProp(sku, object, stock) AND NOT
//        (quantitySku###object###stockProp(sku, object, stock) <= currentBalanceSkuStock(sku, stock));
    backgroundQuantity 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);    
    background 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);   

    overChangeQuantityValue###skuProp = ACTION ABSTRACT LIST (###detail);

    changeQuantityValue(###skuProp skuProp, ###object object, Stock stock) = ACTION {
        IF detail###stockProp(sku, object, stock) THEN {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                quantity(###detail detail) <- requestedNumeric() WHERE detail == detail###stockProp(sku, object, stock);
                overChangeQuantityValue###skuProp(detail###stockProp(sku, object, stock));
            } ELSE {
                FOR detail###stockProp(sku, object, stock) == ###detail d DO
                    DELETE d;
            }

        } ELSE {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                FOR ADDOBJ d = ###detail DO {
                   object(d) <- object;
//                  Пока работаем с одним складом                   
//                   stockProp###stock###detail (d) <- stock;
                   skuProp(d) <- sku;
                   quantity (d) <- requestedNumeric();
                   overChangeQuantityValue###skuProp(d);
                }
            }
        }
    }
    changeQuantity(###skuProp skuProp, ###object object, Stock stock) = ACTION {
        REQUEST NUMERIC[16,5] INPUT;
        changeQuantityValue(sku, object, stock);
    }

    allQuantity###object 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, Stock);
    changeAllQuantity(###skuProp skuProp, ###object object, Stock stock) = ACTION {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantity###object (sku,stock) <- TRUE;
            requestedNumeric() <- prevCurrentBalance(sku,stock);
            changeQuantityValue(sku, object, stock);
        } ELSE {
            allQuantity###object (sku,stock) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValue(sku, object, stock);
        }
    }

END
META defineDocumentSkuStock(object, skuProp, stockProp)
    @defineDocumentSkuStock(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStock(object, form, concrete, legalEntityProp, stockProp)
    not###stockProp##Stock (###form o) = NOT stockProp###stock(o);
    EXTEND FORM form

        TREE stockTree a = STRING[3], sg = StockGroup PARENT parent, ts = Stock
        PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a),
                stockGroup(ts) == sg
        FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
        TREE skuTree sk = SkuGroup PARENT parent
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDER BY order(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

        OBJECTS           sst=Stock
        OBJECTS           sts=(st=Stock, ks=Sku) FIXED GRID
        PROPERTIES        READONLY BACKGROUND background(ks, concrete, st) name(ks) ON SHORTCUT showMovementSku(ks, st) ON SHORTCUT showMovementPriceSku(ks, st), idBarcode(ks), id(ks) SHOWIF showIDs(), shortNameUOM(ks)
        PROPERTIES        READONLY stockName = name(st) SHOWIF not###stockProp##Stock(concrete)
        PROPERTIES        addSku() TODRAW sts, edit(ks), copy(ks)

        FILTERS           isParent(sk, ks),
                          // пока отключаем работу по многим складам, а то люди путаются
//                          (st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###stock###object(concrete) OR
//                          st == stockProp###stock###object(concrete) AND NOT sg AND NOT ts,
//                          legalEntityStock(st) == legalEntityProp###object(concrete),
//                          activeStock(st)
                          st == stockProp###stock(concrete)

        FILTERS           name(ks)
        ORDER BY          name(ks)

        PROPERTIES        quantity###stockProp(ks, concrete, st) ON CHANGE changeQuantity(ks, concrete, st) 
                                BACKGROUND backgroundQuantity(ks, concrete, st)
                                QUICKFILTER name(ks),
                          prevCurrentBalance(ks, st) READONLY,
                          allQuantity###form(ks, st) ON CHANGE changeAllQuantity(ks, concrete, st),
                          price(ks, st, concrete) READONLY
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT
    ;

    DESIGN form {
        REMOVE sst.box;
        mainTabbed {
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;
                fill = 1;
                NEW skuFilters {
                    fill = 1;
                    type = TABBED;
                    MOVE skuTree.tree.box { caption = 'Группы SKU'; }
                    MOVE stockTree.tree.box { caption = 'Группы складов'; }
                }
                NEW skuMainPane {
                    fill = 2.5;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        MOVE sts.box {
                            caption = 'Товары';
                        }
                        PROPERTY(copy(ks)) { focusable = FALSE; }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, st)) { background = #FFEEEE; }
        PROPERTY(quantity###stockProp(ks, concrete, st)) { background = #D4FFD4; }
    }
END

META extendFormDocumentSkuStockPriceListTypeAgreement(object, form, concrete, legalEntityProp, stockProp)
    @extendFormDocumentSkuStock(object, form, concrete, legalEntityProp, stockProp);
    
    current###form###form() = DATA LOCAL Object ();
    setCurrent###form###form(###concrete##bject concrete) = ACTION current###form###form() <- concrete;
    
    EXTEND FORM form
        EVENTS ON CHANGE concrete setCurrent###form###form(concrete)
    ;

    WHEN SESSION FORMS form (SET([= VIEW form.sts](St##concrete##ck stock, Sku sku)) AND current###form###form() == ###concrete##bject concrete) OR 
                            ((CHANGED(dateTime[###form](concrete)) OR
                              CHANGED(priceListType[###form](concrete)) OR
                              CHANGED(agreement[###form](concrete))) AND [= VIEW form.sts](stock, sku)) DO 
        updateViewPrice(sku, stock, concrete);
    ;
END

// ----------- Подбор (партия / несколько складов)---------------//      Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchStockPriceListTypeAgreement(object, stockProp)
    @defineDocumentBatchStock(object, batch, sku, stockProp);
    priceListType(###object object, Batch batch) = OVERRIDE priceListType(object) IF batch IS Batch, priceListType(agreement(object), sku(batch));

//    priceBatchStock###object 'Цена' (batch, stock, object) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###batch(object, batch), batch, stock, dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Batch batch, Stock stock, ###object object) = prevPriceB[PriceListType,Batch,Stock,DATETIME](ledgerPriceListType(priceListType(object, batch)), batch, stock, dateTime(object));

    viewPrice 'Цена' (batch, stock, object) = DATA LOCAL NESTED NUMERIC[16,4] (Batch, Stock, ###object);

    price 'Цена' (Batch batch, Stock stock, ###object object) = viewPrice(batch, stock, object);

    updateViewPrice (Batch batch, Stock stock, ###object object) = ACTION {
        FOR PriceListType pt == priceListType(object, batch) AND stock IS Stock NOINLINE (pt) DO
            viewPrice(batch, stock, object) <- prevPriceB(pt, batch, IF overPriceStockUser(object) THEN overPriceStockUser(object) ELSE stock, dateTime(object));
    }
END
META defineDocumentBatchStockPriceListTypeSystemLedger(object, priceListTypeProp, stockProp)
    @defineDocumentBatchStock(object, batch, sku, stockProp);
    price 'Цена' (Batch batch, Stock stock, ###object object) = prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp, batch, stock, dateTime(object));
END

META defineDocumentBatchStock(object, detail, batchProp, skuProp, stockProp)
    detail###stockProp (batch, object, stock) =  GROUP MAX (###detail detail)
        BY batchProp(detail), object(detail), stockProp###stock(detail);

    quantity###stockProp 'Кол-во товара в документе' (batch, object, stockProp###stock) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail), stockProp###stock(detail);

//    backgroundQuantityBatch###object###Stock 'Цвет' (batch, object, stock) = RGB(255,128,128) IF quantityBatch###object###stockProp(batch, object, stock) AND NOT
//        quantityBatch###object###stockProp(batch, object, stock) <= currentBalanceBatchStock(batch, stock);
    backgroundQuantity 'Цвет' (batch, object, stock) = ABSTRACT CASE COLOR (Batch, ###object, Stock);

    overChangeQuantityValue###batchProp = ACTION ABSTRACT LIST (###detail);
    backgroundName###object 'Цвет'  (d)= ABSTRACT CASE COLOR (Batch);

    changeQuantityValue(###batchProp batchProp, ###object object, Stock stock) = ACTION {
        IF detail###stockProp(batch, object, stock) THEN {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                quantity(###detail detail) <- requestedNumeric() WHERE detail == detail###stockProp(batch, object, stock);
                overChangeQuantityValue###batchProp(detail###stockProp(batch, object, stock));
            } ELSE {
                FOR detail###stockProp(batch, object, stock) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF (requestedNumeric() AND NOT deleteNullDetail()) OR (deleteNullDetail() AND requestedNumeric() != 0) THEN {
                FOR ADDOBJ d = ###detail DO {
                    object(d) <- object;
//                    stockProp###stock###detail (d) <- stock;
                    skuProp(d) <- skuProp(batch);
                    batchProp(d) <- batch;
                    quantity (d) <- requestedNumeric();
                    overChangeQuantityValue###batchProp(d);
                }
            }
        }
    }

    changeQuantity(###batchProp batchProp, ###object object, Stock stock) = ACTION {
        REQUEST NUMERIC[16,5] INPUT;
        changeQuantityValue(batch, object, stock);
    }

    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, ###object, Stock);
    changeAllQuantity(###batchProp batchProp, ###object object, Stock stock) = ACTION {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantity (batch, object, stock) <- TRUE;
            requestedNumeric() <- prevCurrentBalance(batch, stock);
            changeQuantityValue(batch, object, stock);
        } ELSE {
            allQuantity (batch, object, stock) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValue(batch, object, stock);
        }
    }
END

META defineDocumentBatchStock(object, batchProp, skuProp, stockProp)
    @defineDocumentBatchStock(object, object##Detail, batchProp, skuProp, stockProp);
END

META extendFormDocumentBatchStock(object, form, concrete, legalEntityProp, stockProp)

    EXTEND FORM form

        OBJECTS           stb=(sto=Stock, b=Batch) FIXED GRID
        PROPERTIES(b) READONLY SHOWIF showBatch(concrete)  prevNameSku BACKGROUND backgroundName###form(b), idBarcodeSku, shortNameUOM, id, name
        PROPERTIES(sto) READONLY SHOWIF showBatch(concrete) stockNameB = name SHOWIF not###stockProp##Stock(concrete)

        FILTERS           isParent(sk, b),
                          // пока отключаем работу по многим складам, а то люди путаются
//                          (sto == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, sto) AND NOT ts OR sto IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###stock###object(concrete) OR
//                          sto == stockProp###stock###object(concrete) AND NOT sg AND NOT ts,
//                          legalEntityStock(sto) == legalEntityProp###object(concrete),
//                          activeStock(sto)
                          sto == stockProp###stock(concrete)
        ORDER BY          prevNameSku(b)

        PROPERTIES        SHOWIF showBatch(concrete) quantity###stockProp(b, concrete, sto) ON CHANGE changeQuantity(b, concrete, sto) 
                                    BACKGROUND backgroundQuantity(b, concrete, sto)
                                    QUICKFILTER prevNameSku(b),
                          prevCurrentBalance(b, sto) READONLY,
                          allQuantity(b, concrete, sto) ON CHANGE changeAllQuantity(b, concrete, sto),
                          price(b, sto, concrete) READONLY
    ;

    DESIGN form {
        skuSelectPane {
            type = TABBED;
            MOVE stb.box {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalance(b, sto)) { background = #FFEEEE; }
        PROPERTY(quantity###stockProp(b, concrete, sto)) { background = #D4FFD4; }
    }
END

META extendFormDocumentBatchStockPriceListTypeAgreement(object, form, concrete, legalEntityProp, stockProp)
    @extendFormDocumentBatchStock(object, form, concrete, legalEntityProp, stockProp);
    
    WHEN SESSION FORMS form (SET([= VIEW form.stb](St##concrete##ck stock, Batch batch)) AND current###form###form() == ###concrete##bject concrete) OR
                            ((CHANGED(dateTime[###form](concrete)) OR
                              CHANGED(priceListType[###form](concrete)) OR
                              CHANGED(agreement[###form](concrete))) AND [= VIEW form.stb](stock, batch)) DO
        updateViewPrice(batch, stock, concrete);
    ;
END

// ----------- Подбор (товар / несколько складов / несколько складов покупателей)---------------//          Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuStockExtra(object, detail, skuProp, stockProp, stockExtra)

    viewPriceCustomer 'Цена' (sku, stockProp, object, stockExtra) = DATA LOCAL NESTED NUMERIC[16,4] (Sku, Stock, ###object, Stock);

    priceCustomer 'Цена' (###skuProp sku, Stock stockProp, ###object object, Stock stockExtra) = viewPriceCustomer(sku, stockProp, object, stockExtra);

    updateViewPriceCustomer (###skuProp sku, Stock stockProp, ###object object, Stock stockExtra) = ACTION {
        FOR PriceListType pt == priceListType(object, stockExtra, sku) AND stockProp IS Stock NOINLINE (pt) DO
            viewPriceCustomer(sku, stockProp, object, stockExtra) <- prevPriceB(pt, sku, stockProp, dateTime(object));
    }

    detail##SupplierCustomer (sku, object, stockProp, stockExtra) =  GROUP MAX (###detail detail)
        BY skuProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplierCustomer 'Кол-во товара в документе' (sku, object, stockProp, stockExtra) = GROUP SUM quantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplier 'Итого' (sku, object, stockProp) = GROUP SUM quantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp(detail);

//    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128) IF quantitySku###object###stockProp(sku, object, stock) AND NOT
//        (quantitySku###object###stockProp(sku, object, stock) <= currentBalanceSkuStock(sku, stock));
    backgroundQuantity 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);  
    
    changeQuantityCustomer(###skuProp skuProp, ###object object, Stock stockProp, Stock stockExtra) = ACTION {
        REQUEST NUMERIC[16,5] INPUT;
        IF detail##SupplierCustomer(sku, object, stockProp, stockExtra) THEN {
            IF requestedNumeric() THEN {
                quantity(###detail detail) <- requestedNumeric() WHERE detail == detail##SupplierCustomer(sku, object, stockProp, stockExtra);
            } ELSE {
                FOR detail##SupplierCustomer(sku, object, stockProp, stockExtra) == ###detail detail DO
                    DELETE detail;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                   object(d) <- object;
                   skuProp(d) <- sku;
                   stockExtra(d) <- stockExtra;
                   quantity (d) <- requestedNumeric();
                   shipmentDataDate (d) <- shipmentDate(object);
                   shipmentDataTime (d) <- shipmentTime(object);
                }
            }
        }
    }
END
META defineDocumentSkuStockExtra(object, skuProp, stockProp, stockExtra)
    @defineDocumentSkuStockExtra(object, object##Detail, skuProp, stockProp, stockExtra);
END

META extendFormDocumentSkuStockExtraCustom(object, form, concrete, legalEntityProp, stockProp, stockExtra)

    nameQuantityCust##concrete##mer (St##concrete##ck stock)= name(stock) + ' (кол-во)' MINCHARWIDTH 15 PREFCHARWIDTH 20;
    namePriceCust##concrete##mer (St##concrete##ck stock)= name(stock) + ' (цена)' MINCHARWIDTH 15 PREFCHARWIDTH 20;
    nameBalanceCust##concrete##mer (St##concrete##ck stock)= name(stock) + ' (остаток)' MINCHARWIDTH 15 PREFCHARWIDTH 20;    
    
    
    n##concrete##t###stockProp (###form o) = NOT stockProp(o);
    EXTEND FORM form

        TREE stockTree a = STRING[3], sg = StockGroup PARENT parent, ts = Stock
        PROPERTIES READONLY SHOWIF n##concrete##t###stockProp(o) OBJVALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a),
                st##concrete##ckGr##concrete##up(ts) == sg
        FILTERGROUP object##inactiveStock1 FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
        TREE skuTree sk = SkuGroup PARENT parent
        PROPERTIES READONLY concrete##rder(sk), skuTreeName = name(sk)
        ORDER BY concrete##rder(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

        OBJECTS cc = Stock FIXED GRID
        FILTERGROUP object##inactiveStock2 FILTER 'Активный' active(cc) 'ctrl F10' DEFAULT
        
        OBJECTS           sts=(st=Stock, ks=Sku)
        PROPERTIES        READONLY name(ks) ON SHORTCUT sh##concrete##wM##concrete##vementSku(ks, st) ON SHORTCUT sh##concrete##wM##concrete##vementPriceSku(ks, st), idBarc##concrete##de(ks), id(ks) SHOWIF sh##concrete##wIDs(), sh##concrete##rtNameU###concrete##M(ks), name(st) SHOWIF n##concrete##t###stockProp(concrete) 
        PROPERTIES        addSku() TODRAW sts, edit(ks), c##concrete##py(ks)
        FILTERS           isParent(sk, ks),
                          (st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts) AND NOT stockProp(concrete) OR
                          st == stockProp(concrete) AND NOT sg AND NOT ts,
                          legalEntity(st) == legalEntityProp(concrete),
                          active(st)

        ORDER BY          name(ks), name(st)

        PROPERTIES quantity###legalEntityProp(ks, concrete, st) READONLY BACKGROUND backgr##concrete##undQuantity(ks, concrete, st)
        PROPERTIES quantity###legalEntityProp##Cust##concrete##mer(ks, concrete, st, cc)  COLUMNS (cc) HEADER nameQuantityCust##concrete##mer(cc) ON CHANGE changeQuantityCust##concrete##mer(ks, concrete, st, cc)
        PROPERTIES READONLY prevCurrentBalance(ks,st)
        PROPERTIES READONLY  priceCust##concrete##mer(ks, st, concrete, cc)  COLUMNS (cc) HEADER namePriceCust##concrete##mer(cc)

        FILTERS in(concrete,cc)
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        FILTERGROUP object##filter1
            FILTER 'С остатком' prevCurrentBalance(ks, st) 'F10' DEFAULT
            FILTER 'В заказе' quantity###legalEntityProp(ks, concrete, st) 'F9'


    ;

    DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;

                NEW skuFilters {
                    fill = 1;
                    type = SPLITV;
                    M###concrete##VE stockTree.tree.box { caption = 'Группы складов'; }
                    M###concrete##VE skuTree.tree.box { caption = 'Группы SKU'; }
                }
                NEW skuMainPane {
                    fill = 2.5;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        M###concrete##VE sts.box {
                            caption = 'Товары';
                        }
                        PROPERTY(c##concrete##py(ks)) { focusable = FALSE; }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, st)) { background = #FFEEEE; } 
        PROPERTY(quantity###legalEntityProp##Cust##concrete##mer(ks, concrete, st, cc)) { background = #D4FFD4; }
    }    
    
END

// ----------- Подбор (партия / несколько складов / несколько складов покупателей)---------------//        Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchStockExtraPriceListTypeAgreement(object, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, batch, sku, stockProp, stockExtra);
        
    priceListType 'Вид цен для склада пок-ля' (###object object, Stock stockExtra, Batch batch) = priceListType(object, stockExtra, sku(batch));

    ledgerPriceCustomer 'Цена (базовая)' (Batch batch, Stock stockProp, ###object object, Stock stockExtra) = prevPriceB(priceListType(object, stockExtra, batch), batch, stockProp, dateTime(object));

    viewPriceCustomer 'Цена' (batch, stockProp, object, stockExtra) = DATA LOCAL NESTED NUMERIC[16,4] (Batch, Stock, ###object, Stock);

    priceCustomer 'Цена' (Batch batch, Stock stockProp, ###object object, Stock stockExtra) = viewPriceCustomer(batch, stockProp, object, stockExtra);

    updateViewPriceCustomer (Batch batch, Stock stockProp, ###object object, Stock stockExtra) = ACTION {
        FOR PriceListType pt == priceListType(object, stockExtra, batch) AND stockProp IS Stock NOINLINE (pt) DO
            viewPriceCustomer(batch, stockProp, object, stockExtra) <- prevPriceB(pt, batch, stockProp, dateTime(object));
    }
END
META defineDocumentBatchStockExtraPriceListTypeSystemLedger(object, priceListTypeProp, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, batch, sku, stockProp, stockExtra);
    priceBatchStock###object###stockExtra 'Цена' (batch, stockProp, object, stockExtra) = prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp, dateTime###object(object)) AND stockExtra IS Stock;
END

META defineDocumentBatchStockExtra(object, detail, batchProp, skuProp, stockProp, stockExtra)

    detail##SupplierCustomer (batch, object, stockProp, stockExtra) =  GROUP MAX (###detail detail)
        BY batchProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplierCustomer 'Кол-во товара в документе' (batch, object, stockProp, stockExtra) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplier 'Итого' (batch, object, stockProp) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail), stockProp(detail);

    backgroundQuantity 'Цвет' (batch, object, stock) = ABSTRACT CASE COLOR (Batch, ###object, Stock);          

    changeQuantityValueCustomer(###batchProp batchProp, ###object object, Stock stockProp, Stock stockExtra) = ACTION {
        IF detail##SupplierCustomer(batch, object, stockProp, stockExtra) THEN {
            IF requestedNumeric() THEN {
                quantity(###detail detail) <- requestedNumeric() WHERE detail == detail##SupplierCustomer(batch, object, stockProp, stockExtra);
            } ELSE {
                FOR detail##SupplierCustomer(batch, object, stockProp, stockExtra) == ###detail detail DO
                    DELETE detail;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                   object(d) <- object;
                   skuProp(d) <- skuProp(batch);
                   batchProp(d) <- batch;
                   stockExtra(d) <- stockExtra;
                   quantity (d) <- requestedNumeric();
                   shipmentDataDate (d) <- shipmentDate(object);
                   shipmentDataTime (d) <- shipmentTime(object);
                }
            }
        }
    }
    changeQuantityCustomer(###batchProp batchProp, ###object object, Stock stockProp, Stock stockExtra) = ACTION {
        REQUEST NUMERIC[16,5] INPUT;
        changeQuantityValueCustomer(batch, object, stockProp, stockExtra);
    }
END
META defineDocumentBatchStockExtra(object, batchProp, skuProp, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, object##Detail, batchProp, skuProp, stockProp, stockExtra);
END

META extendFormDocumentBatchStockExtraCustom(object, form, concrete, legalEntityProp, stockProp, stockExtra)

    EXTEND FORM form
        OBJECTS ccc = Stock FIXED GRID
        FILTERGROUP object##inactiveStock FILTER 'Активный' active(ccc) 'ctrl F10' DEFAULT

        OBJECTS           stb=(sto=Stock, b=Batch)
        PROPERTIES(b) READONLY   nameSku, idBarc##concrete##deSku, sh##concrete##rtNameU###concrete##M, id SHOWIF sh##concrete##wIDs(), name 
        PROPERTIES(sto) READONLY stockName = name SHOWIF n##concrete##t###stockProp(concrete)

        FILTERS           isParent(sk, b),
                          (sto == ts AND sg IS StockGroup OR isParent(sg, sto) AND NOT ts OR sto IS Stock AND NOT sg AND NOT ts) AND NOT stockProp(concrete) OR
                          sto == stockProp(concrete) AND NOT sg AND NOT ts,
                          legalEntity(sto) == legalEntityProp(o)
        ORDER BY          nameSku(b)

        PROPERTIES quantity###legalEntityProp(b, concrete, sto) READONLY BACKGROUND backgr##concrete##undQuantity(b, concrete, sto)
        PROPERTIES quantity###legalEntityProp##Cust##concrete##mer(b, concrete, sto, ccc)  COLUMNS (ccc) HEADER nameQuantityCust##concrete##mer(ccc) ON CHANGE changeQuantityCust##concrete##mer(b, concrete, sto, ccc)
        PROPERTIES READONLY prevCurrentBalance(b,sto)
        PROPERTIES READONLY  priceCust##concrete##mer(b, sto, concrete, ccc)  COLUMNS (ccc) HEADER namePriceCust##concrete##mer(ccc)

        FILTERS in(concrete,ccc)

        FILTERGROUP object##filter2
            FILTER 'С остатком' prevCurrentBalance(b, sto) 'F10' DEFAULT
            FILTER 'В заказе' quantity###legalEntityProp(b, concrete, sto) 'F9'


    ;

    DESIGN form {
        skuSelectPane {
            type = TABBED;
            M###concrete##VE stb.box {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalance(b, sto)) { background = #FFEEEE; }
        PROPERTY(quantity###legalEntityProp##Cust##concrete##mer(b, concrete, sto, ccc)) { background = #D4FFD4; }
    }
END

// ----------- Подбор (товар / один склад) без количества ---------------//

META defineDocumentSkuStockIn(object, detail, skuProp, stockProp)

    currentBalance 'Остаток' (###skuProp sku, ###object object) = currentBalance(sku, stockProp(object));
    prevCurrentBalance 'Остаток' (###skuProp sku, ###object object) = prevCurrentBalance(sku, stockProp(object));
    detail(sku, object) = GROUP SUM 1 BY skuProp(###detail detail), object(detail);

    in 'Отм.' (###skuProp sku, ###object object) = TRUE IF detail(sku, object);

    changeIn(###skuProp skuProp, ###object object) = ACTION {
        REQUEST BOOLEAN INPUT;
        IF NOT requestedLogical() THEN {
            IF detail(sku, object) THEN {
                //FOR sku == skuProp###detail(detail) AND object == object###detail(detail) DO {
                FOR sku == skuProp(###detail detail) AND object == object(detail) DO 
                    DELETE detail;
                //}
            }
        } ELSE {
            IF requestedLogical() THEN {
                FOR ADDOBJ d = ###detail DO {
                   ASSIGN object(d) <- object;
                   ASSIGN skuProp(d) <- sku;
                }
            }
        }
    }

END
META defineDocumentSkuStockIn(object, skuProp, stockProp)
    @defineDocumentSkuStockIn(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStockIn(object, form, concrete, contBox)

    EXTEND FORM form

        TREE treeGroup gg=Group PARENT parent
        PROPERTIES READONLY order(gg), name(gg)
        FILTERS groupType(gg) == groupType(concrete)
        FILTERGROUP object##inactive FILTER 'Активные' active(gg) 'F5' DEFAULT
        ORDER BY order(gg), name(gg) 
        OBJECTS ks=Sku
        PROPERTIES             in(ks,concrete) ON CHANGE changeIn(ks, concrete), inputName = name(ks) READONLY
        PROPERTIES(ks)          READONLY idBarcode, id SHOWIF showIDs(), shortNameUOM
        PROPERTIES(ks, concrete)currentBalance READONLY
        PROPERTIES             addSku() TODRAW ks, edit(ks), copy(ks)

        FILTERS                isParent(gg, ks) OR ks IS Sku AND NOT gg

        ORDER BY inputName
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        FILTERGROUP object##filterBalance
            FILTER 'С остатком' prevCurrentBalance(ks, concrete) 'F11'

    ;

    DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox BEFORE contBox {
                type = CONTAINERH;
                caption = 'Подбор';
                type = SPLITH;

                MOVE treeGroup.tree.box;
                NEW skuSelectPane {
                    fill = 2;
                    MOVE ks.box;
                    PROPERTY(copy(ks)) { focusable = FALSE; }
                }
            }
        }
    }
END

//----------- Подбор (товар / один склад - расширение фильтра поставщиком) -----------//

META defineDocumentSkuStockSupplier (object, form, concrete)
    filterSupplier = DATA LOCAL LegalEntity (###object);
    nameFilterSupplier 'Поставщик' (###form object) = name(filterSupplier(object));
    filterSupplier (###form object, Sku sku) = prevInSupplier(filterSupplier(object), sku) OR
                                                  (sku IS Sku AND NOT filterSupplier(object));

    EXTEND FORM form
        PROPERTIES nameFilterSupplier(concrete) FORCE PANEL
        FILTERS    filterSupplier(concrete, ks)
    ;
    DESIGN form {
        skuMainPane {
            MOVE concrete.panel FIRST;
        }
    }
END

//----------- Подбор (партия / один склад - расширение фильтра поставщиком) -----------//

META defineDocumentBatchStockSupplier (object, form, concrete)

    filterSupplier (###form object, Batch batch) = filterSupplier(object) == prevSupplier(batch) OR
                                                  (batch IS Batch AND NOT filterSupplier(object));

    EXTEND FORM form
        FILTERS    filterSupplier(concrete, b)
    ;

END

// -------------------------------------------- Подбор через диалог --------------------------------------- //

META defineDialogSku (form)

    dialogQuantity 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Sku);

    FORM form 'Подбор SKU'
        TREE skuTree sk = SkuGroup PARENT parent
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDER BY order(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

        OBJECTS s=Sku                                 //form###nameSku 'Наименование' (sku) = IF form###stock() THEN nameSkuStock(sku, form###stock()) ELSE nameSku(sku);
        PROPERTIES READONLY    idBarcode(s), id(s) SHOWIF showIDs(), inputName = name(s) //form###nameSku(s)
        PROPERTIES(s)          dialogQuantity
        PROPERTIES             edit(s)

        FILTERS                isParent(sk, s)
        FILTERGROUP activeSku FILTER 'Активные' active(s) DEFAULT
        ORDER BY inputName

        OBJECTS si=Sku
        PROPERTIES READONLY     idBarcode(si), selectedName = name(si)
        PROPERTIES(si)          dialogQuantity
        FILTERS                 dialogQuantity(si)
        ORDER BY selectedName
    ;

    DESIGN form {
        main {
            preferredSize = (1024, 768);
            NEW skuContainer BEFORE functions.box {
                fill = 1;
                type = SPLITH;

                MOVE skuTree.tree.box;
                NEW inputContainer {
                    fill = 2;
                    type = CONTAINERV;

                    NEW filterContainer {
                        align = STRETCH;
                        type = CONTAINERH;
                        //ADD PROPERTY(form###nameStock());
                    }

                    NEW inputSkuContainer {
                        fill = 1;
                        type = SPLITV;

                        MOVE s.box {
                            fill = 3;
                        }
                        MOVE si.box;
                    }
                }
            }
        }
    }

END

META defineDialogStockSku (form)

    @defineDialogSku (form);

    form##Stock = DATA LOCAL Stock ();
    dialogAll 'Весь остаток' = DATA LOCAL BOOLEAN (Sku);
    form##NameStock 'Склад' () = name(form##Stock()) PREFCHARWIDTH 30;

    dialogBalance 'Остаток' (Sku sku) = currentBalance(sku, form##Stock());
    dialogBalanceFilter (Sku sku) = dialogBalance(sku) OR (sku IS Sku AND NOT form##Stock());

    dialogQuantity(Sku sku) <- dialogBalance(sku) WHEN SET(dialogAll(sku));

    EXTEND FORM form
        PROPERTIES() form##NameStock

        PROPERTIES(s) READONLY dialogBalance SHOWIF form##Stock()
        PROPERTIES(s)          dialogAll SHOWIF form##Stock()
        FILTERS                dialogBalanceFilter(s)

        PROPERTIES(si) READONLY dialogBalance SHOWIF form##Stock()
        PROPERTIES(si)          dialogAll SHOWIF form##Stock()
    ;

    DESIGN form {
        filterContainer {
            MOVE PROPERTY(form##NameStock());
        }
    }
END

META defineAddDetailDialogSkuStock (object, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustom (object, object##Detail, , skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustom (object, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustomInner(object, ###object, detail, caption, skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustomInner (object, class, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuCustom(object, detail, caption, skuProp, form);
    addDetail###form##Stock###detail 'Подбор товаров'###caption(class object) = ACTION {
        ASSIGN form##Stock() <- stockProp(object);
        ASSIGN dialogAll(###skuProp sku) <- NULL;

        EXEC addDetail###form###detail(object);
    } TOOLBAR;
END

META defineAddDetailDialogSku (object, skuProp, form)
    @defineAddDetailDialogSkuCustom(object, object##Detail, , skuProp, form);
END

META defineAddDetailDialogSkuCustom (object, detail, caption, skuProp, form)
    @defineAddDetailDialogSkuCustomInner (object, ###object, detail, ###detail, caption, skuProp, form);
END

META defineAddDetailDialogSkuCustomInner (object, class, detail, detailClass, caption, skuProp, form)
    addDetail###form###detail 'Подбор товаров'###caption(class object) = ACTION {
        FORM form ;
        IF formResult() == FormResult.ok THEN {
            FOR dialogQuantity(###skuProp sku) INLINE ADDOBJ w = detailClass DO {
                ASSIGN object(w) <- object;
                ASSIGN skuProp(w) <- sku;
                ASSIGN quantity(w) <- dialogQuantity(sku);
            }
        }
        ASSIGN dialogQuantity(###skuProp sku) <- NULL;
    } TOOLBAR;
END

@defineDialogStockSku(dialogSku);

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (Group);

levelParent (group) = GROUP MIN level(Group group, Group parent) IF dataInSession(parent)
    BY group;

inParent (Group group) = TRUE IF levelParent(group);

inSession 'Отм.' (Group group) = OVERRIDE
    inParent(group),
    dataInSession(group);
    
include 'Отм.' = DATA LOCAL BOOLEAN (Sku);
include 'Отм.' (GroupType groupType, Sku sku) =  OVERRIDE inSession(group(groupType, sku)), include(sku);

FORM dialogSkuGroup 'Подбор товарных групп'
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES inSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDER BY order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS skg = SkuGroup
    PROPERTIES(skg)         inSession    
    PROPERTIES READONLY     name(skg)
    FILTERS                 inSession(skg)
    ORDER BY name(skg)
;

DESIGN dialogSkuGroup {
    main {
        preferredSize = (1024, 768);
        NEW skuContainer BEFORE functions.box {
            fill = 1;
            type = SPLITH;
            MOVE skuTree.tree.box;
            MOVE skg.box;
        }
    }
}


// ----------------------------------------------- Документы с товарами для подбора ---------------------------------------- //

CLASS ABSTRACT Document 'Документ с товарами';
CLASS ABSTRACT DocumentDetail 'Строка документа';

isClosed 'Закрыт' = ABSTRACT BOOLEAN  (Document);
isPosted 'Проведен' = ABSTRACT BOOLEAN (Document);

number 'Номер' = ABSTRACT VARSTRING[28] (Document);
series 'Серия' = ABSTRACT STRING[2] (Document);
date 'Дата' = ABSTRACT DATE(Document);

supplier = ABSTRACT LegalEntity(Document);
nameSupplier 'Поставщик' (Document document) = name(supplier(document));
supplierStock = ABSTRACT Stock(Document);
nameSupplierStock 'Склад поставщика' (Document document) = name(supplierStock(document));

customer = ABSTRACT LegalEntity(Document);
nameCustomer 'Покупатель' (Document document) = name(customer(document));
customerStock = ABSTRACT Stock(Document);
nameCustomerStock 'Склад покупателя'(Document document) = name(customerStock(document));

document = ABSTRACT Document(DocumentDetail);

sku = ABSTRACT Sku(DocumentDetail);
idBarcodeSku 'Штрих-код' (DocumentDetail documentDetail) = idBarcode(sku(documentDetail));
nameSku 'Товар' (DocumentDetail d) = name(sku(d));
quantity 'Кол-во' = ABSTRACT NUMERIC[16,5] (DocumentDetail);
price 'Цена' = ABSTRACT NUMERIC[16,4] (DocumentDetail);
index 'Номер' = ABSTRACT INTEGER(DocumentDetail);

countDocumentDetail 'Кол-во строк' (o) = GROUP SUM 1 BY document(DocumentDetail d);
quantityDocumentDetail 'Кол-во товара' (sku, o) = GROUP SUM quantity(DocumentDetail d) BY sku(d), document(d);
countDocumentDetail 'Кол-во строк товара' (sku, o) = GROUP SUM 1 IF document(DocumentDetail d)==Document o BY sku(d), document(d);

fillPriceDocuments 'Использовать цены' = DATA LOCAL BOOLEAN ();

FORM documents 'Документы с товарами'
    OBJECTS d=Document LAST
    PROPERTIES(d) READONLY number, series, date, nameSupplier, nameSupplierStock,
                  nameCustomer, nameCustomerStock, objectClassName
    PROPERTIES()  FORCE PANEL TOOLBAR fillPriceDocuments TODRAW d
    OBJECTS dd=DocumentDetail
    PROPERTIES(dd) READONLY index, idBarcodeSku, nameSku, quantity, price SHOWIF fillPriceDocuments()

    FILTERS document(dd)==d
;

DESIGN documents {
    main {
        preferredSize = (1024, 768);
    }
}

META implementDocumentPrefix(object, prefixP, prefixQ)
    isClosed[Document](###object object) += isClosed(object);
    isPosted[Document](###object object) += isPosted(object);
    number[Document](###object object) += number(object);
    series[Document](###object object) += series(object);
    date[Document](###object object) += date(object);

    index[DocumentDetail](User###object##Detail detail) += index(detail);
    sku[DocumentDetail](###object##Detail detail) += sku(detail);
    quantity[DocumentDetail](###object##Detail detail) += quantity(detail);
    price[DocumentDetail](###object##Detail detail) += prefixP###price(detail);

    document[DocumentDetail](###object##Detail detail) += object(detail);

    overFillDocument = ACTION ABSTRACT (###object##Detail, DocumentDetail); 
    fillDocument 'Подбор документа'(User###object user###object) = ACTION {
        FORM documents ;
        IF formResult() == FormResult.ok THEN {
            LOCAL chosenDocument = Document();
            chosenDocument() <- chosenObject('d');
            FOR document(DocumentDetail documentDetail) == chosenDocument() ADDOBJ i = User###object##Detail DO {
                user###object(i) <- user###object;
                sku(i) <- sku(documentDetail);
                quantity(i) <- quantity(documentDetail);
                price(i) <- price(documentDetail) WHERE fillPriceDocuments();
                overFillDocument(i, documentDetail);
            }
        }
    } TOOLBAR;

END
META implementDocument(object)

    @implementDocumentPrefix(object, , );
END

META implementDocumentSupplierCustomer(object)

    @implementDocument(object);

    supplier[Document](###object object) += supplier(object);
    supplierStock[Document](###object object) += supplierStock(object);
    customer[Document](###object object) += customer(object);
    customerStock[Document](###object object) += customerStock(object);
END

// ------------------------- Партии ---------------------------- //
batch = ABSTRACT Batch(DocumentDetail);
nameBatch 'Партия' (DocumentDetail d) = name(batch(d));

META implementDocumentBatch(object)
    @implementDocumentBatch(object, );
END

META implementDocumentBatch(object, prefix)
    batch[DocumentDetail](###object##Detail detail) += prefix###batch(detail);
    
    overFillDocument (User###object##Detail i, DocumentDetail d) += ACTION {
        batch(i) <- batch(d);
    }
END

EXTEND FORM documents
    PROPERTIES(dd) nameBatch AFTER nameSku(dd) 
;

//----------------- Логирование изменений в документах ------------------- //

CLASS DocumentLog 'Запись лога документов';
TABLE documentLog(DocumentLog);

disableDocumentLog 'Отключить запись лога документов' = DATA BOOLEAN ();
enableDocumentLog = TRUE AND NOT disableDocumentLog();

EXTEND FORM options
    PROPERTIES() disableDocumentLog
;

DESIGN options { 
    log { 
        MOVE PROPERTY(disableDocumentLog()) FIRST;   
    } 
}

document = DATA Document (DocumentLog) INDEXED;

numberDocument 'Номер документа' = DATA VARSTRING[28] (DocumentLog) IN recognize;
seriesDocument 'Серия документа' = DATA STRING[2] (DocumentLog) IN recognize;
dateDocument 'Дата документа' = DATA DATE(DocumentLog) IN recognize;
typeDocument 'Тип документа' = DATA ISTRING[100] (DocumentLog) IN recognize; 

session = DATA Session (DocumentLog); 
hostnameComputer 'Имя компьютера' = DATA VARISTRING[100] (DocumentLog); 
userLogin 'Логин пользователя' = DATA STRING[30] (DocumentLog); 
nameContact 'Имя пользователя' =  DATA VARSTRING[100] (DocumentLog) IN recognize;
dateTimeSession 'Время' = DATA DATETIME (DocumentLog) IN recognize;
dateSession 'Дата' (DocumentLog d) = DATE(dateTimeSession(d));

supplierStock = DATA Stock(DocumentLog);
nameSupplierStock 'Склад поставщика'(DocumentLog d) = name(supplierStock(d));

customerStock = DATA Stock(DocumentLog);
nameCustomerStock 'Склад покупателя'(DocumentLog d) = name(customerStock(d));

@defineLog (DocumentLog, 'изменений документов', log, dateSession);

//hostnameComputerDocumentLog 'Имя компьютера' = hostnameComputerConnectionSession(sessionDocumentLog(l)) IN recognize;
//userLoginDocumentLog 'Логин пользователя' = userLoginConnectionSession(sessionDocumentLog(l)) IN recognize;
//nameContactDocumentLog 'Имя пользователя' =  nameUserSession (sessionDocumentLog(l)) IN recognize;
//dateTimeSessionDocumentLog 'Время' = dateTimeSession(sessionDocumentLog(l)) IN recognize;

CLASS TypeChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    addRow 'Добавление строк',
    deleteRow 'Удаление строк',
    changeSeriesNumber 'Изменение серии/номера',
    changeSupplierStock 'Изменение склада поставщика',
    changeCustomerStock 'Изменение склада покупателя',
    changePosted 'Проведение/Распроведение',
    changeClosed 'Закрытие/Открытие'
}

typeChange= DATA TypeChange (DocumentLog);
nameTypeChange 'Тип изменения' (DocumentLog l) = staticCaption(typeChange(l)) IN recognize;

note 'Примечание' = DATA VARSTRING[255] (DocumentLog) MINCHARWIDTH 20 PREFCHARWIDTH 30;

file 'Файл' = DATA CUSTOMFILE (DocumentLog);
openFile 'Открыть Файл' (DocumentLog l) = ACTION OPENFILE (file(l)) TOOLBAR;
showFile = enableDocumentLog() AND file(DocumentLog dLog);

WHEN SET(Document o IS Document) IF NOT disableDocumentLog() DO {
    FOR ADDOBJ d = DocumentLog DO {        
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.add;
        session(d) <- currentSession();
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());             
        note(d) <- VARSTRING[255]('Добавлен документ');              
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}
WHEN DROPPED(Document o IS Document) IF NOT disableDocumentLog() DO {
    FOR ADDOBJ d = DocumentLog DO {       

        typeDocument(d) <- prevObjectClassName(o);
        numberDocument(d) <- PREV(number(o));  
        seriesDocument(d) <- PREV(series(o)); 
        dateDocument(d) <- PREV(date(o));   
        typeChange(d) <- TypeChange.delete;
        session(d) <- currentSession();
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());        
        note(d) <- VARSTRING[255]('Удален документ');         
        supplierStock(d) <- PREV (supplierStock(o));
        customerStock(d) <- PREV (customerStock(o));
    }
}

WHEN ((SETCHANGED(number(Document o)) AND PREV(number(o))) OR (SETCHANGED(series(o)) AND PREV(series(o))) ) IF NOT disableDocumentLog()  DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeSeriesNumber;
        note(d) <- VARSTRING[255]('Предыдущее значение серия/номер: '+(CONCAT '', PREV(series(o)), PREV(number(o))));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());                 
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (INTEGER x== [ = GROUP SUM 1 IF SET(DocumentDetail d IS DocumentDetail) BY document(d)](Document o)) IF NOT disableDocumentLog() DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.addRow;
        note(d) <- VARSTRING[255]('Количество добавленных строк: '+x);  
        session(d) <- currentSession();      
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());                 
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN INTEGER x==[= GROUP SUM 1 IF DROPPED(DocumentDetail d IS DocumentDetail) BY PREV(document(d))](Document o) AND o IS Document AND NOT disableDocumentLog() NOINLINE DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.deleteRow;
        note(d) <- VARSTRING[255]('Количество удаленных строк: '+x);  
        session(d) <- currentSession();   
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());                    
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (CHANGED(supplierStock(Document o)) AND PREV(supplierStock(o)) AND o IS Document) IF NOT disableDocumentLog()  DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeSupplierStock;
        note(d) <- VARSTRING[255](CONCAT '','Предыдущее значение : ', PREV(nameSupplierStock(o)));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());     
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (CHANGED(customerStock(Document o)) AND PREV(customerStock(o)) AND o IS Document) IF NOT disableDocumentLog()  DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeCustomerStock;
        note(d) <- VARSTRING[255](CONCAT '','Предыдущее значение : ', PREV(nameCustomerStock(o)));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());   
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (DROPSET (isPosted(Document o))) IF NOT disableDocumentLog()  DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changePosted;
        note(d) <- VARSTRING[255](IF isPosted(o) THEN 'Проведен' ELSE 'Распроведен');      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());   
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (DROPSET (isClosed(Document o))) IF NOT disableDocumentLog()  DO {
    FOR ADDOBJ d = DocumentLog DO {
        document(d) <- o;
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeClosed;
        note(d) <- VARSTRING[255](IF isClosed(o) THEN 'Закрыт' ELSE 'Открыт');      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());   
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

CLASS DocumentDetailLog 'Запись лога строк документов';
TABLE DocumentDetailLog(DocumentDetailLog);

document = DATA Document (DocumentDetailLog) INDEXED;

index 'Номер строки' = DATA INTEGER (DocumentDetailLog);        

numberDocument 'Номер документа' = DATA VARSTRING[28] (DocumentDetailLog) INDEXED;
seriesDocument 'Серия документа' = DATA STRING[2] (DocumentDetailLog);
dateDocument 'Дата документа' = DATA DATE(DocumentDetailLog);
typeDocument 'Тип документа' = DATA ISTRING[100] (DocumentDetailLog); 

sku = DATA Sku (DocumentDetailLog) INDEXED ;
idSku 'Код' (DocumentDetailLog l) = id(sku(l));
nameSku 'Наименование' (DocumentDetailLog l) = name(sku(l));

quantity 'Кол-во' = DATA NUMERIC[16,5] (DocumentDetailLog);

price 'Цена' = DATA NUMERIC[16,4] (DocumentDetailLog);

nameUser 'Имя пользователя'  = DATA VARSTRING[100] (DocumentDetailLog);

dateTime 'Дата/время изменения' = DATA DATETIME (DocumentDetailLog);
date 'Дата' (DocumentDetailLog d) = DATE(dateTime(d));

note 'Примечание' = DATA VARSTRING[20] (DocumentDetailLog);

@defineLog (DocumentDetailLog, 'строк документов', log, date);

WHEN  SET(DocumentDetail d IS DocumentDetail) AND NOT disableDocumentLog() DO  
    FOR ADDOBJ l = DocumentDetailLog DO{
        document(l) <- document(d);
        index(l) <- index(d);
        numberDocument(l) <- number(document(d));
        seriesDocument(l) <- series(document(d));
        dateDocument(l) <- date(document(d));
        typeDocument(l) <- objectClassName(document(d));
        sku(l) <- sku(d);
        quantity(l) <- quantity(d);
        price(l) <- price(d);
        nameUser(l) <- name(currentUser());
        dateTime(l) <- currentDateTime();
        note(l) <- 'Добавление';
    }

WHEN (CHANGED(price(DocumentDetail d)) OR CHANGED(quantity(d)) OR CHANGED(sku(d))) AND NOT DROPPED(d IS DocumentDetail) AND NOT SET(d IS DocumentDetail) AND NOT disableDocumentLog() DO  
    FOR ADDOBJ l = DocumentDetailLog DO{
        document(l) <- document(d);
        index(l) <- index(d);
        numberDocument(l) <- number(document(d));
        seriesDocument(l) <- series(document(d));
        dateDocument(l) <- date(document(d));
        typeDocument(l) <- objectClassName(document(d));
        sku(l) <- sku(d);
        quantity(l) <- quantity(d);
        price(l) <- price(d);
        nameUser(l) <- name(currentUser());
        dateTime(l) <- currentDateTime();
        note(l) <- 'Изменение';
    }
    
WHEN DROPPED(DocumentDetail d IS DocumentDetail) AND NOT disableDocumentLog() DO  
    FOR ADDOBJ l = DocumentDetailLog DO{
        document(l) <- PREV(document(d));
        index(l) <- PREV(index(d));
        numberDocument(l) <- PREV(number(document(d)));
        seriesDocument(l) <- PREV(series(document(d)));
        dateDocument(l) <- PREV(date(document(d)));
        typeDocument(l) <- prevObjectClassName(PREV(document(d)));
        sku(l) <- PREV(sku(d));
        quantity(l) <- PREV(quantity(d));
        price(l) <- PREV(price(d));
        nameUser(l) <- name(currentUser());
        dateTime(l) <- currentDateTime();
        note(l) <- 'Удаление';
}    

META defineDocumentLogForm(form, concrete)
    @defineDocumentLogForm(form, concrete, documentHistory);
END

META defineDocumentLogForm(form, concrete, container)
    EXTEND FORM form
        OBJECTS dLog=DocumentLog FIXED GRID
        PROPERTIES(dLog) SHOWIF enableDocumentLog() READONLY numberDocument, seriesDocument, dateDocument, nameSupplierStock, nameCustomerStock, typeDocument,
                      hostnameComputer, userLogin, nameContact, dateTimeSession, nameTypeChange,
                      note
        PROPERTIES (dLog) openFile SHOWIF showFile(dLog)
        FILTERS document(dLog) == concrete

        OBJECTS ddLog = DocumentDetailLog FIXED GRID
        PROPERTIES (ddLog) SHOWIF enableDocumentLog() READONLY index, idSku, nameSku, quantity,
                       price, nameUser, dateTime, note
        FILTERS document(ddLog) == concrete
    ;
    
    DESIGN form {
        container { 
            NEW historyTabs {
                 fill = 1;
                 type = TABBED;
                 NEW historyLog{
                    caption = 'По документу';
                    type = CONTAINERV;
                    MOVE dLog.box;
                 }
                 NEW detailLog{
                     caption = 'По строкам';
                     MOVE ddLog.box;
                 }
            }
        }    
    }   
END

FORM documentLogs 'Журнал изменения документов'
    OBJECTS d=DocumentLog
    PROPERTIES(d) READONLY numberDocument, seriesDocument, dateDocument, nameSupplierStock, nameCustomerStock, typeDocument,
                  hostnameComputer, userLogin, dateTimeSession, nameTypeChange,
                  note
                  
    OBJECTS l = DocumentDetailLog
    PROPERTIES (l) READONLY seriesDocument, numberDocument, dateDocument,typeDocument, 
                   index, idSku, nameSku, quantity, price, 
                   nameUser, dateTime, note
    FILTERGROUP documents
        FILTER 'Фильтр по документу' document(d) == document(l) 'F10' DEFAULT
        FILTER 'Фильтр по номеру документа' numberDocument(d) == numberDocument(l) 'F11'
;

DESIGN documentLogs {
    main {
        MOVE d.box;
        MOVE l.box;
        MOVE functions.box;        
    }
}

NAVIGATOR {
    systemEvents {
        ADD documentLogs;

    }
}