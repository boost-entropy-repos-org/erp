MODULE StockSkuDocument;

REQUIRE SkuLedger, SystemEvents;

NAMESPACE Stock;

// ----------- Подбор (товар / один склад)---------------//     Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuPriceListTypeAgreement(object, stockProp)
    @defineDocumentSku(object, sku, stock, stockProp);
    priceListType###object###sku(object, sku) = OVERRIDE priceListType###object(object) IF sku IS Sku, priceListTypeAgreementSku(agreement###object(object), sku);

//    priceSku###object 'Цена' (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stockProp###object(object), dateTime###object(object));
    ledgerPriceSku###object 'Цена (базовая)' (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(ledgerPriceListTypePriceListType(priceListType###object###sku(object, sku)), sku, stockProp###stock###object(object), dateTime###object(object));

    viewPriceSku###object 'Цена' (sku, object) = DATA LOCAL NUMERIC[14,2] (Sku, ###object);

    priceSku###object 'Цена' (sku, object) = viewPriceSku###object(sku, object);

    updateViewPriceSku###object (sku, object) = ACTION {
        FOR pt == priceListType###object###sku(object, sku) NOINLINE (pt) DO
            viewPriceSku###object(sku, object) <- prevPriceBPriceListTypeSkuStockDateTime(pt, sku, stockProp###stock###object(object), dateTime###object(object));
    }
END
META defineDocumentSkuPriceListTypeSystemLedger(object, priceListTypeProp, stockClass, stockProp)
    @defineDocumentSku(object, sku, stockClass, stockProp);
    priceSku###object 'Цена' (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, sku, stockProp###stockClass###object(object), dateTime###object(object));
END

META defineDocumentSku(object, detail, skuProp, stockClass, stockProp)
    detail###Sku###object###stockProp###stockClass (sku, object, stock) =  GROUP MAX (detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###stockClass###detail(detail);
    detail###Sku###object (sku, object) = detail###Sku###object###stockProp###stockClass(sku, object, stockProp###stockClass###object(object));

    currentBalanceSku###object 'Остаток' (sku, object) = currentBalanceSkuStock(sku, stockProp###stockClass###object(object));
    prevCurrentBalanceSku###object 'Остаток' (sku, object) = prevCurrentBalanceSkuStock(sku, stockProp###stockClass###object(object));
//    backgroundQuantitySku###object 'Цвет' (sku, object) = RGB(255,128,128) IF quantity###detail###skuProp###object(sku, object) AND NOT
//        (quantity###detail###skuProp###object(sku, object) <= currentBalanceSku###object(sku, object));
    backgroundQuantitySku###object 'Цвет' (sku, object) = ABSTRACT CASE COLOR (Sku, ###object);  

    overChangeQuantityValueSku###object##Detail = ABSTRACT ACTION LIST (###detail);

    changeQuantityValueSku###object = ACTION (sku, object) {
        IF detail###Sku###object(sku, object) THEN {
            IF requestedNumeric() THEN {
                quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object(sku, object);
                overChangeQuantityValueSku###object##Detail(detail###Sku###object(sku, object));
            } ELSE {
                FOR detail###Sku###object(sku, object) == d DO
                    DELETE d;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                    object###detail(d) <- object;
                    skuProp###detail(d) <- sku;
                    quantity###detail (d) <- requestedNumeric();
                    overChangeQuantityValueSku###object##Detail(d);
                }
            }
        }
    }

    changeQuantitySku###object = ACTION (sku, object) {
        REQUEST NUMERIC[14,3] INPUT;
        EXEC changeQuantityValueSku###object(sku, object);
    }

    // Выбор всего остатка
    allQuantitySku###object 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, ###object);
    changeAllQuantitySku###object = ACTION (sku, object) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantitySku###object (sku,object) <- TRUE;
            requestedNumeric() <- prevCurrentBalanceSku###object(sku,object);
            changeQuantityValueSku###object(sku, object);
        } ELSE {
            allQuantitySku###object (sku,object) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValueSku###object(sku, object);
        }
    }

END
META defineDocumentSku(object, skuProp, stockClass, stockProp)
    @defineDocumentSku(object, object##Detail, skuProp, stockClass, stockProp);
END

META extendFormDocumentSku(object, detail, form, concrete, skuProp)

    EXTEND FORM form

        TREE skuTree sk = SkuGroup PARENT parentSkuGroup
        PROPERTIES READONLY orderSkuGroup(sk), skuTreeName = nameSkuGroup(sk)
        ORDER BY orderSkuGroup(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sk) 'F5' DEFAULT

        OBJECTS ks=Sku
        PROPERTIES READONLY      inputName = nameSku(ks)
        PROPERTIES(ks) READONLY  idBarcodeSku, shortNameUOMSku
        PROPERTIES(ks, concrete) quantity###detail###skuProp###object ON CHANGE changeQuantitySku###object(ks, concrete) 
                                    BACKGROUND backgroundQuantitySku###object(ks, concrete)
                                    QUICKFILTER inputName,
                                 prevCurrentBalanceSku###object READONLY,
                                 allQuantitySku###object ON CHANGE changeAllQuantitySku###object(ks, concrete),
                                 priceSku###object READONLY
        PROPERTIES               addSku() TODRAW ks, editSku(ks), copySku(ks)

        FILTERS                isParentSkuGroupSku(sk, ks),
                               activeSku(ks)

        ORDER BY inputName
    ;

    seekSku###object###barcode = ACTION (object, barcode) { 
        IF skuBarcodeIdDate(barcode, date###object(object)) THEN {
            SEEK form.ks skuBarcodeIdDate(barcode, date###object(object));     
        } ELSE {
            MESSAGE 'Штрихкод не найден.';
        }
    }
    
    seekOverSku###object = ACTION (object) {
        REQUEST STRING[15] INPUT;
        IF requestedString() THEN {
            seekSku###object###barcode(object, requestedString());
        }        
    };
    seekSku###object 'Поиск по штрихкоду:' (object) = DATA LOCAL STRING[15] (###object) TOOLBAR EDITKEY 'F12' EVENTID 'SCANNER'
                                                                            ON CHANGE seekOverSku###object(object);       
    EXTEND FORM form
        PROPERTIES(concrete) TODRAW ks seekSku###object    
    ;
    EXTEND DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;

                ADD skuTree.tree.box { caption = 'Группы SKU'; }
                NEW skuMainPane {
                    fill = 3;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        NEW skuPane {
                            type = CONTAINERV;
                            caption = 'Товары';
                            NEW skuTopPane {
                                caption = 'Поиск товара';
                                ADD PROPERTY(seekSku###object(concrete));
                            }
                            ADD ks.box;               
                        }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalanceSku###object(ks, concrete)) { background = #FFEEEE; }
        PROPERTY(quantity###detail###skuProp###object(ks, concrete)) { background = #D4FFD4; }
    }
END

META extendFormDocumentSkuPriceListTypeAgreement(eobj, detail, form, concrete, skuProp, stockProp)
    @extendFormDocumentSku(eobj, detail, form, concrete, skuProp);

    current###form###eobj() = DATA LOCAL Object ();
    setCurrent###form###eobj(concrete) = ACTION current###form###eobj() <- concrete;

    EXTEND FORM form
        EVENTS ON CHANGE concrete setCurrent###form###eobj(concrete)
    ;

    WHEN SESSION FORMS form (SET([= VIEW form.ks](sku)) AND (concrete) == current###form###eobj()) OR 
                            ((CHANGED(stockProp###eobj(concrete)) OR 
                              CHANGED(dateTime###eobj(concrete)) OR
                              CHANGED(priceListType###eobj(concrete)) OR
                              CHANGED(agreement###eobj(concrete))) AND [= VIEW form.ks](sku)) DO
        updateViewPriceSku###eobj(sku, concrete);
END

META extendFormDocumentSku(object, form, concrete)
    @extendFormDocumentSku(object, object##Detail, form, concrete, sku);
END

META extendFormDocumentSkuPriceListTypeAgreement(object, form, concrete, stockProp)
    @extendFormDocumentSkuPriceListTypeAgreement(object, object##Detail, form, concrete, sku, stockProp);
END

// ----------- Подбор (партий / один склад)---------------//    Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchPriceListTypeAgreement(object, stockProp)
    @defineDocumentBatch(object, batch, sku, stock, stockProp);
    priceListType###object###batch(object, batch) = OVERRIDE priceListType###object(object) IF batch IS Batch, priceListTypeAgreementSku(agreement###object(object), skuBatch(batch));

//    priceBatch###object 'Цена' (batch, object) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###batch(object, batch), batch, stockProp###object(object), dateTime###object(object));
    ledgerPriceBatch###object 'Цена (базовая)' (batch, object) = prevPriceBPriceListTypeBatchStockDateTime(ledgerPriceListTypePriceListType(priceListType###object###batch(object, batch)), batch, stockProp###stock###object(object), dateTime###object(object));

    viewPriceBatch###object 'Цена' (batch, object) = DATA LOCAL NUMERIC[14,2] (Batch, ###object);

    priceBatch###object 'Цена' (batch, object) = viewPriceBatch###object(batch, object);

    updateViewPriceBatch###object (batch, object) = ACTION {
        FOR pt == priceListType###object###batch(object, batch) NOINLINE (pt) DO
            viewPriceBatch###object(batch, object) <- prevPriceBPriceListTypeBatchStockDateTime(pt, batch, stockProp###stock###object(object), dateTime###object(object));
    }
END

META defineDocumentBatchPriceListTypeSystemLedger(object, priceListTypeProp, stockClass, stockProp)
    @defineDocumentBatch(object, batch, sku, stockClass, stockProp);
    priceBatch###object 'Цена' (batch, object) = prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp###stockClass###object(object), dateTime###object(object));
END

META defineDocumentBatch(object, detail, batchProp, skuProp, stockClass, stockProp)
    detail###batch###object###stockProp###stockClass (batch, object, stock) =  GROUP MAX (detail)
        BY batchProp###detail(detail), object###detail(detail), stockProp###stockClass###detail(detail);
    detail###batch###object (batch, object) = detail###batch###object###stockProp###stockClass(batch, object, stockProp###stockClass###object(object));

    currentBalanceBatch###object 'Остаток' (batch, object) = currentBalanceBatchStock(batch, stockProp###stockClass###object(object));
    prevCurrentBalanceBatch###object 'Остаток' (batch, object) = prevCurrentBalanceBatchStock(batch, stockProp###stockClass###object(object));

    quantity###detail###batchProp###object 'Кол-во товара в документе' (batch, object) = GROUP SUM quantity###detail(detail)
        BY batchProp###detail(detail), object###detail(detail);

//    backgroundQuantityBatch###object 'Цвет' (batch, object) = RGB(255,128,128) IF quantity###detail###batchProp###object(batch, object) AND NOT
//        (quantity###detail###batchProp###object(batch, object) <= currentBalanceBatch###object(batch, object));
    backgroundQuantityBatch###object 'Цвет' (batch, object) = ABSTRACT CASE COLOR (Batch, ###object);  

    overChangeQuantityValueBatch###object##Detail = ABSTRACT ACTION LIST (###detail);

    changeQuantityValueBatch###object = ACTION (batch, object) {
        IF detail###batch###object(batch, object) THEN {
            IF requestedNumeric() THEN {
                quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###batch###object(batch, object);
                overChangeQuantityValueBatch###object##Detail(detail###batch###object(batch, object));
            } ELSE {
                FOR detail###batch###object(batch, object) == d DO
                    DELETE d;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                    object###detail(d) <- object;
                    stockProp###stockClass###detail (d) <- stockProp###stockClass###object(object);
                    skuProp###detail(d) <- skuBatch(batch);
                    batchProp###detail(d) <- batch;
                    quantity###detail (d) <- requestedNumeric();
                    overChangeQuantityValueBatch###object##Detail(d);
                }
            }
        }
    }

    changeQuantityBatch###object = ACTION (batch, object) {
        REQUEST NUMERIC[14,3] INPUT;
        changeQuantityValueBatch###object(batch, object);
    }

    // Выбор всего остатка
    allQuantityBatch###object 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, ###object);
    changeAllQuantityBatch###object= ACTION (batch, object) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantityBatch###object (batch,object) <- TRUE;
            requestedNumeric() <- prevCurrentBalanceBatch###object(batch,object);
            changeQuantityValueBatch###object(batch, object);
        } ELSE {
            allQuantityBatch###object (batch,object) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValueBatch###object(batch, object);
        }
    }

END

META defineDocumentBatch(object, batchProp, skuProp, stockClass, stockProp)
    @defineDocumentBatch(object, object##Detail, batchProp, skuProp, stockClass, stockProp);
END

META extendFormDocumentBatch(object, detail, form, concrete, batchProp)

    EXTEND FORM form

        OBJECTS b=Batch
        PROPERTIES READONLY     nameSkuBatch(b), idBarcodeSkuBatch(b), shortNameUOMBatch(b), idBatch(b) SHOWIF showIDs(), nameBatch(b)
        PROPERTIES(b, concrete) quantity###detail###batchProp###object ON CHANGE changeQuantityBatch###object(b, concrete) 
                                    BACKGROUND backgroundQuantityBatch###object(b, concrete)
                                    QUICKFILTER nameSkuBatch(b),
                                prevCurrentBalanceBatch###object READONLY,
                                allQuantityBatch###object ON CHANGE changeAllQuantityBatch###object(b, concrete),
                                priceBatch###object READONLY
//                                viewPriceBatch###object READONLY

        FILTERS                isParentSkuGroupBatch(sk, b),
                               activeSkuBatch(b)

        ORDER BY nameSkuBatch(b)
    ;                                        

    EXTEND DESIGN form {
        skuSelectPane {
            type = TABBED;

            ADD b.box {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalanceBatch###object(b, concrete)) { background = #FFEEEE; }
        PROPERTY(quantity###detail###batchProp###object(b, concrete)) { background = #D4FFD4; }
    }
END
META extendFormDocumentBatch(object, form, concrete)
    @extendFormDocumentBatch(object, object##Detail, form, concrete, batch);
END

META extendFormDocumentBatchPriceListTypeAgreement(eobj, detail, form, concrete, batchProp, stockProp)
    @extendFormDocumentBatch(eobj, detail, form, concrete, batchProp);
    
    WHEN SESSION FORMS form (SET([= VIEW form.b](batch)) AND (concrete) == current###form###eobj()) OR
                            ((CHANGED(stockProp###eobj(concrete)) OR 
                              CHANGED(dateTime###eobj(concrete)) OR
                              CHANGED(priceListType###eobj(concrete)) OR
                              CHANGED(agreement###eobj(concrete))) AND [= VIEW form.b](batch)) DO
        updateViewPriceBatch###eobj(batch, concrete);
END

META extendFormDocumentBatchPriceListTypeAgreement(object, form, concrete, stockProp)
    @extendFormDocumentBatchPriceListTypeAgreement(object, object##Detail, form, concrete, batch, stockProp);
END

//задание цены для подбора

META extendFormDocumentPriceSku (object, priceListTypeProp, stockProp, caption, form, char, showif)
    price###priceListTypeProp###Sku###object 'Цена'##caption (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, sku, stockProp###object(object), dateTime###object(object));

    EXTEND FORM form
        PROPERTIES(ks, char) READONLY price###priceListTypeProp###Sku###object SHOWIF showif###object(char)
    ;
END

META extendFormDocumentPriceBatch (object, priceListTypeProp, stockProp, caption, form, char, showif)
    price###priceListTypeProp###Batch###object 'Цена'##caption (batch, object) = prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp###object(object), dateTime###object(object));

    EXTEND FORM form
        PROPERTIES(b, char) READONLY price###priceListTypeProp###Batch###object SHOWIF showif###object(char)
    ;
END

// ----------- Подбор (товар / несколько складов)---------------//       Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuStockPriceListTypeAgreement(object, stockProp)
    @defineDocumentSkuStock(object, sku, stockProp);
    priceListType###object###sku(object, sku) = OVERRIDE priceListType###object(object) IF sku IS Sku, priceListTypeAgreementSku(agreement###object(object), sku);

//    priceSkuStock###object 'Цена' (sku, stock, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stock, dateTime###object(object));
    ledgerPriceSkuStock###object 'Цена (базовая)' (sku, stock, object) = prevPriceBPriceListTypeSkuStockDateTime(ledgerPriceListTypePriceListType(priceListType###object###sku(object, sku)), sku, stock, dateTime###object(object));
                                      
    viewPriceSkuStock###object 'Цена' (sku, stock, object) = DATA LOCAL NUMERIC[14,2] (Sku, Stock, ###object);

    priceSkuStock###object 'Цена' (sku, stock, object) = viewPriceSkuStock###object(sku, stock, object);

    updateViewPriceSkuStock###object (sku, stock, object) = ACTION {
        FOR pt == priceListType###object###sku(object, sku) AND stock IS Stock NOINLINE (pt) DO
            viewPriceSkuStock###object(sku, stock, object) <- prevPriceBPriceListTypeSkuStockDateTime(pt, sku, stock, dateTime###object(object));
    }
END
META defineDocumentSkuStockPriceListTypeSystemLedger(object, priceListTypeProp, stockProp)
    @defineDocumentSkuStock(object, sku, stockProp);
    priceSkuStock###object 'Цена' (sku, stock, object) = prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, sku, stock, dateTime###object(object));
END

META defineDocumentSkuStock(object, detail, skuProp, stockProp)
    detail###Sku###object###stockProp###stock (sku, object, stock) =  GROUP MAX (detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###stock###detail(detail);

    quantitySku###object###stockProp###stock 'Кол-во товара в документе' (sku, object, stock) = GROUP SUM quantity###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###stock###detail(detail);

//    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128) IF quantitySku###object###stockProp(sku, object, stock) AND NOT
//        (quantitySku###object###stockProp(sku, object, stock) <= currentBalanceSkuStock(sku, stock));
    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);    
    backgroundSku###object###Stock 'Цвет' (sku, object, stock) = ABSTRACT COLOR (Sku, ###object, Stock);   

    overChangeQuantityValueSku###object##Detail = ABSTRACT ACTION LIST (###detail);

    changeQuantityValueSku###object###Stock = ACTION (sku, object, stock) {
        IF detail###Sku###object###stockProp###stock(sku, object, stock) THEN {
            IF requestedNumeric() THEN {
                quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object###stockProp###stock(sku, object, stock);
                overChangeQuantityValueSku###object##Detail(detail###Sku###object###stockProp###stock(sku, object, stock));
            } ELSE {
                FOR detail###Sku###object###stockProp###stock(sku, object, stock) == d DO
                    DELETE d;
            }

        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                   object###detail(d) <- object;
                   stockProp###stock###detail (d) <- stock;
                   skuProp###detail(d) <- sku;
                   quantity###detail (d) <- requestedNumeric();
                   overChangeQuantityValueSku###object##Detail(d);
                }
            }
        }
    }
    changeQuantitySku###object###Stock = ACTION (sku, object, stock) {
        REQUEST NUMERIC[14,3] INPUT;
        changeQuantityValueSku###object###Stock(sku, object, stock);
    }

    allQuantitySku###object 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, Stock);
    changeAllQuantitySku###object = ACTION (sku, object, stock) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantitySku###object (sku,stock) <- TRUE;
            requestedNumeric() <- prevCurrentBalanceSkuStock(sku,stock);
            changeQuantityValueSku###object###Stock(sku, object, stock);
        } ELSE {
            allQuantitySku###object (sku,stock) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValueSku###object###Stock(sku, object, stock);
        }
    }

END
META defineDocumentSkuStock(object, skuProp, stockProp)
    @defineDocumentSkuStock(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStock(object, form, concrete, legalEntityProp, stockProp)
    not###stockProp###stock###object (o) = NOT stockProp###stock###object(o);
    EXTEND FORM form

        TREE stockTree a = STRING[3], sg = StockGroup PARENT parentStockGroup, ts = Stock
        PROPERTIES READONLY OBJVALUE(a), sgTreeName = nameStockGroup(sg), tsTreeName = nameStock(ts)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a),
                stockGroupStock(ts) == sg
        FILTERGROUP inactiveStock FILTER 'Активный' activeStock(ts) 'ctrl F10' DEFAULT
        TREE skuTree sk = SkuGroup PARENT parentSkuGroup
        PROPERTIES READONLY orderSkuGroup(sk), skuTreeName = nameSkuGroup(sk)
        ORDER BY orderSkuGroup(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sk) 'F5' DEFAULT

        OBJECTS           sst=Stock
        OBJECTS           sts=(st=Stock, ks=Sku) FIXED GRID
        PROPERTIES        READONLY BACKGROUND backgroundSku###object###Stock(ks, concrete, st) nameSku(ks), idBarcodeSku(ks), shortNameUOMSku(ks)
        PROPERTIES        READONLY stockName = nameStock(st) SHOWIF not###stockProp###stock###object(concrete)
        PROPERTIES        addSku() TODRAW sts, editSku(ks), copySku(ks)

        FILTERS           isParentSkuGroupSku(sk, ks),
                          (st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###stock###object(concrete) OR
                          st == stockProp###stock###object(concrete) AND NOT sg AND NOT ts,
                          legalEntityStock(st) == legalEntityProp###object(concrete),
                          activeStock(st)

        FILTERS           nameSku(ks)
        ORDER BY          nameSku(ks)

        PROPERTIES        quantitySku###object###stockProp###stock(ks, concrete, st) ON CHANGE changeQuantitySku###object###stock(ks, concrete, st) 
                                BACKGROUND backgroundQuantitySku###object###Stock(ks, concrete, st)
                                QUICKFILTER nameSku(ks),
                          prevCurrentBalanceSkuStock(ks, st) READONLY,
                          allQuantitySku###object(ks, st) ON CHANGE changeAllQuantitySku###object(ks, concrete, st),
                          priceSkuStock###object(ks, st, concrete) READONLY
    ;

    EXTEND DESIGN form {
        REMOVE sst.box;
        specification.box {
            type = TABBED;
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;

                NEW skuFilters {
                    fill = 1;
                    type = TABBED;
                    ADD skuTree.tree.box { caption = 'Группы SKU'; }
                    ADD stockTree.tree.box { caption = 'Группы складов'; }
                }
                NEW skuMainPane {
                    fill = 2.5;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        ADD sts.box {
                            caption = 'Товары';
                        }
                        PROPERTY(copySku(ks)) { focusable = FALSE; }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalanceSkuStock(ks, st)) { background = #FFEEEE; }
        PROPERTY(quantitySku###object###stockProp###stock(ks, concrete, st)) { background = #D4FFD4; }
    }
END

META extendFormDocumentSkuStockPriceListTypeAgreement(object, form, concrete, legalEntityProp, stockProp)
    @extendFormDocumentSkuStock(object, form, concrete, legalEntityProp, stockProp);
    
    current###form###object() = DATA LOCAL Object ();
    setCurrent###form###object(concrete) = ACTION current###form###object() <- concrete;
    
    EXTEND FORM form
        EVENTS ON CHANGE concrete setCurrent###form###object(concrete)
    ;

    WHEN SESSION FORMS form (SET([= VIEW form.sts](stock, sku)) AND current###form###object() == concrete) OR 
                            ((CHANGED(dateTime###object(concrete)) OR
                              CHANGED(priceListType###object(concrete)) OR
                              CHANGED(agreement###object(concrete))) AND [= VIEW form.sts](stock, sku)) DO 
        updateViewPriceSkuStock###object(sku, stock, concrete);
    ;
END

// ----------- Подбор (партия / несколько складов)---------------//      Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchStockPriceListTypeAgreement(object, stockProp)
    @defineDocumentBatchStock(object, batch, sku, stockProp);
    priceListType###object###batch(object, batch) = OVERRIDE priceListType###object(object) IF batch IS Batch, priceListTypeAgreementSku(agreement###object(object), skuBatch(batch));

//    priceBatchStock###object 'Цена' (batch, stock, object) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###batch(object, batch), batch, stock, dateTime###object(object));
    ledgerPriceBatchStock###object 'Цена (базовая)' (batch, stock, object) = prevPriceBPriceListTypeBatchStockDateTime(ledgerPriceListTypePriceListType(priceListType###object###batch(object, batch)), batch, stock, dateTime###object(object));

    viewPriceBatchStock###object 'Цена' (batch, stock, object) = DATA LOCAL NUMERIC[14,2] (Batch, Stock, ###object);

    priceBatchStock###object 'Цена' (batch, stock, object) = viewPriceBatchStock###object(batch, stock, object);

    updateViewPriceBatchStock###object (batch, stock, object) = ACTION {
        FOR pt == priceListType###object###batch(object, batch) AND stock IS Stock NOINLINE (pt) DO
            viewPriceBatchStock###object(batch, stock, object) <- prevPriceBPriceListTypeBatchStockDateTime(pt, batch, stock, dateTime###object(object));
    }
END
META defineDocumentBatchStockPriceListTypeSystemLedger(object, priceListTypeProp, stockProp)
    @defineDocumentBatchStock(object, batch, sku, stockProp);
    priceBatchStock###object 'Цена' (batch, stock, object) = prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, batch, stock, dateTime###object(object));
END

META defineDocumentBatchStock(object, detail, batchProp, skuProp, stockProp)
    detail###batch###object###stockProp###stock (batch, object, stock) =  GROUP MAX (detail)
        BY batchProp###detail(detail), object###detail(detail), stockProp###stock###detail(detail);

    quantityBatch###object###stockProp###stock 'Кол-во товара в документе' (batch, object, stockProp###stock) = GROUP SUM quantity###detail(detail)
        BY batchProp###detail(detail), object###detail(detail), stockProp###stock###detail(detail);

//    backgroundQuantityBatch###object###Stock 'Цвет' (batch, object, stock) = RGB(255,128,128) IF quantityBatch###object###stockProp(batch, object, stock) AND NOT
//        quantityBatch###object###stockProp(batch, object, stock) <= currentBalanceBatchStock(batch, stock);
    backgroundQuantityBatch###object###Stock 'Цвет' (batch, object, stock) = ABSTRACT CASE COLOR (Batch, ###object, Stock);

    overChangeQuantityValueBatch###object##Detail = ABSTRACT ACTION LIST (###detail);
    backgroundName###object###batch 'Цвет'  (d)= ABSTRACT CASE COLOR (Batch);

    changeQuantityValueBatch###object###Stock = ACTION (batch, object, stock) {
        IF detail###batch###object###stockProp###stock(batch, object, stock) THEN {
            IF requestedNumeric() THEN {
                quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###batch###object###stockProp###stock(batch, object, stock);
                overChangeQuantityValueBatch###object##Detail(detail###batch###object###stockProp###stock(batch, object, stock));
            } ELSE {
                FOR detail###batch###object###stockProp###stock(batch, object, stock) == d DO
                    DELETE d;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                    object###detail(d) <- object;
                    stockProp###stock###detail (d) <- stock;
                    skuProp###detail(d) <- skuBatch(batch);
                    batchProp###detail(d) <- batch;
                    quantity###detail (d) <- requestedNumeric();
                    overChangeQuantityValueBatch###object##Detail(d);
                }
            }
        }
    }

    changeQuantityBatch###object###stock = ACTION (batch, object, stock) {
        REQUEST NUMERIC[14,3] INPUT;
        changeQuantityValueBatch###object###Stock(batch, object, stock);
    }

    allQuantityBatch###object 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, ###object, Stock);
    changeAllQuantityBatch###object = ACTION (batch, object, stock) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            requestedNumeric() <- NULL;
            allQuantityBatch###object (batch, object, stock) <- TRUE;
            requestedNumeric() <- prevCurrentBalanceBatchStock(batch, stock);
            changeQuantityValueBatch###object###Stock(batch, object, stock);
        } ELSE {
            allQuantityBatch###object (batch, object, stock) <- NULL;
            requestedNumeric() <- NULL;
            changeQuantityValueBatch###object###Stock(batch, object, stock);
        }
    }
END

META defineDocumentBatchStock(object, batchProp, skuProp, stockProp)
    @defineDocumentBatchStock(object, object##Detail, batchProp, skuProp, stockProp);
END

META extendFormDocumentBatchStock(object, form, concrete, legalEntityProp, stockProp)

    EXTEND FORM form

        OBJECTS           stb=(sto=Stock, b=Batch)
        PROPERTIES(b) READONLY   prevNameSkuBatch BACKGROUND backgroundName###object###batch(b), idBarcodeSkuBatch, shortNameUOMBatch, idBatch SHOWIF showIDs(), nameBatch
        PROPERTIES(sto) READONLY stockNameB = nameStock SHOWIF not###stockProp###stock###object(concrete)

        FILTERS           isParentSkuGroupBatch(sk, b),
                          (sto == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, sto) AND NOT ts OR sto IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###stock###object(concrete) OR
                          sto == stockProp###stock###object(concrete) AND NOT sg AND NOT ts,
                          legalEntityStock(sto) == legalEntityProp###object(concrete),
                          activeStock(sto)
        ORDER BY          prevNameSkuBatch(b)

        PROPERTIES        quantityBatch###object###stockProp###stock(b, concrete, sto) ON CHANGE changeQuantityBatch###object###stock(b, concrete, sto) 
                                    BACKGROUND backgroundQuantityBatch###object###Stock(b, concrete, sto)
                                    QUICKFILTER prevNameSkuBatch(b),
                          prevCurrentBalanceBatchStock(b, sto) READONLY,
                          allQuantityBatch###object(b, concrete, sto) ON CHANGE changeAllQuantityBatch###object(b, concrete, sto),
                          priceBatchStock###object(b, sto, concrete) READONLY
    ;

    EXTEND DESIGN form {
        skuSelectPane {
            type = TABBED;
            ADD stb.box {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalanceBatchStock(b, sto)) { background = #FFEEEE; }
        PROPERTY(quantityBatch###object###stockProp###stock(b, concrete, sto)) { background = #D4FFD4; }
    }
END

META extendFormDocumentBatchStockPriceListTypeAgreement(object, form, concrete, legalEntityProp, stockProp)
    @extendFormDocumentBatchStock(object, form, concrete, legalEntityProp, stockProp);
    
    WHEN SESSION FORMS form (SET([= VIEW form.stb](stock, batch)) AND current###form###object() == concrete) OR
                            ((CHANGED(dateTime###object(concrete)) OR
                              CHANGED(priceListType###object(concrete)) OR
                              CHANGED(agreement###object(concrete))) AND [= VIEW form.stb](stock, batch)) DO
        updateViewPriceBatchStock###object(batch, stock, concrete);
    ;
END

// ----------- Подбор (товар / несколько складов / несколько складов покупателей)---------------//          Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuStockExtra(object, detail, skuProp, stockProp, stockExtra)

    viewPriceSkuStock###object###stockExtra 'Цена' (sku, stockProp, object, stockExtra) = DATA LOCAL NUMERIC[14,2] (Sku, Stock, ###object, Stock);

    priceSkuStock###object###stockExtra 'Цена' (sku, stockProp, object, stockExtra) = viewPriceSkuStock###object###stockExtra(sku, stockProp, object, stockExtra);

    updateViewPriceSkuStock###object###stockExtra (sku, stockProp, object, stockExtra) = ACTION {
        FOR pt == priceListType###object###stock###sku(object, stockExtra, sku) AND stockProp IS Stock NOINLINE (pt) DO
            viewPriceSkuStock###object###stockExtra(sku, stockProp, object, stockExtra) <- prevPriceBPriceListTypeSkuStockDateTime(pt, sku, stockProp, dateTime###object(object));
    }

    detail###Sku###object###stockProp###stockExtra (sku, object, stockProp, stockExtra) =  GROUP MAX (detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail), stockExtra###detail(detail);

    quantitySku###object###stockProp###stockExtra 'Кол-во товара в документе' (sku, object, stockProp, stockExtra) = GROUP SUM quantity###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail), stockExtra###detail(detail);

    quantitySku###object###stockProp 'Итого' (sku, object, stockProp) = GROUP SUM quantity###detail(detail)
        BY skuProp###detail(detail), object###detail(detail), stockProp###detail(detail);

//    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128) IF quantitySku###object###stockProp(sku, object, stock) AND NOT
//        (quantitySku###object###stockProp(sku, object, stock) <= currentBalanceSkuStock(sku, stock));
    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);  
    
    changeQuantitySku###object###Stock###stockExtra = ACTION (sku, object, stockProp, stockExtra) {
        REQUEST NUMERIC[14,3] INPUT;
        IF detail###Sku###object###stockProp###stockExtra(sku, object, stockProp, stockExtra) THEN {
            IF requestedNumeric() THEN {
                quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Sku###object###stockProp###stockExtra(sku, object, stockProp, stockExtra);
            } ELSE {
                FOR detail###Sku###object###stockProp###stockExtra(sku, object, stockProp, stockExtra) == detail DO
                    DELETE detail;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                   object###detail(d) <- object;
                   data###stockProp###detail (d) <- stockProp;
                   skuProp###detail(d) <- sku;
                   stockExtra###detail(d) <- stockExtra;
                   quantity###detail (d) <- requestedNumeric();
                   shipmentDataDate###detail (d) <- shipmentDate###object(object);
                   shipmentDataTime###detail (d) <- shipmentTime###object(object);
                }
            }
        }
    }
END
META defineDocumentSkuStockExtra(object, skuProp, stockProp, stockExtra)
    @defineDocumentSkuStockExtra(object, object##Detail, skuProp, stockProp, stockExtra);
END

META extendFormDocumentSkuStockExtraCustom(object, form, concrete, legalEntityProp, stockProp, stockExtra)

    nameQuantity###stockExtra (stock)= nameStock(stock) + ' (кол-во)' MINCHARWIDTH 15 PREFCHARWIDTH 20;
    namePrice###stockExtra (stock)= nameStock(stock) + ' (цена)' MINCHARWIDTH 15 PREFCHARWIDTH 20;
    nameBalance###stockExtra (stock)= nameStock(stock) + ' (остаток)' MINCHARWIDTH 15 PREFCHARWIDTH 20;    
    
    
    not###stockProp###object (o) = NOT stockProp###object(o);
    EXTEND FORM form

        TREE stockTree a = STRING[3], sg = StockGroup PARENT parentStockGroup, ts = Stock
        PROPERTIES READONLY SHOWIF notSupplierStockBlanketOrder(o) OBJVALUE(a), sgTreeName = nameStockGroup(sg), tsTreeName = nameStock(ts)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a),
                stockGroupStock(ts) == sg
        FILTERGROUP object##inactiveStock1 FILTER 'Активный' activeStock(ts) 'ctrl F10' DEFAULT
        TREE skuTree sk = SkuGroup PARENT parentSkuGroup
        PROPERTIES READONLY orderSkuGroup(sk), skuTreeName = nameSkuGroup(sk)
        ORDER BY orderSkuGroup(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sk) 'F5' DEFAULT

        OBJECTS cc = Stock FIXED GRID
        FILTERGROUP object##inactiveStock2 FILTER 'Активный' activeStock(cc) 'ctrl F10' DEFAULT
        
        OBJECTS           sts=(st=Stock, ks=Sku)
        PROPERTIES        READONLY nameSku(ks), idBarcodeSku(ks), shortNameUOMSku(ks), nameStock(st) SHOWIF not###stockProp###object(concrete) 
        PROPERTIES        addSku() TODRAW sts, editSku(ks), copySku(ks)
        FILTERS           isParentSkuGroupSku(sk, ks),
                          (st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###object(concrete) OR
                          st == stockProp###object(concrete) AND NOT sg AND NOT ts,
                          legalEntityStock(st) == legalEntityProp###object(concrete),
                          activeStock(st)

        ORDER BY          nameSku(ks), nameStock(st)

        PROPERTIES quantitySku###object###stockProp(ks, concrete, st) READONLY BACKGROUND backgroundQuantitySku###object###Stock(ks, concrete, st)
        PROPERTIES quantitySku###object###stockProp###stockExtra(ks, concrete, st, cc)  COLUMNS (cc) HEADER nameQuantity###stockExtra(cc) ON CHANGE changeQuantitySku###object###Stock###stockExtra(ks, concrete, st, cc)
        PROPERTIES READONLY prevCurrentBalanceSkuStock(ks,st)
        PROPERTIES READONLY  priceSkuStock###object###stockExtra(ks, st, concrete, cc)  COLUMNS (cc) HEADER namePrice###stockExtra(cc)

        FILTERS in###object###stock(concrete,cc)

        FILTERGROUP object##filter1
            FILTER 'С остатком' prevCurrentBalanceSkuStock(ks, st) 'F10' DEFAULT
            FILTER 'В заказе' quantitySku###object###stockProp(ks, concrete, st) 'F9'


    ;

    EXTEND DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox {
                caption = 'Подбор';
                type = SPLITH;

                NEW skuFilters {
                    fill = 1;
                    type = SPLITV;
                    ADD stockTree.tree.box { caption = 'Группы складов'; }
                    ADD skuTree.tree.box { caption = 'Группы SKU'; }
                }
                NEW skuMainPane {
                    fill = 2.5;
                    type = CONTAINERV;
                    NEW skuSelectPane {
                        fill = 1;
                        type = CONTAINERV;
                        ADD sts.box {
                            caption = 'Товары';
                        }
                        PROPERTY(copySku(ks)) { focusable = FALSE; }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalanceSkuStock(ks, st)) { background = #FFEEEE; } 
        PROPERTY(quantitySku###object###stockProp###stockExtra(ks, concrete, st, cc)) { background = #D4FFD4; }
    }    
    
END

// ----------- Подбор (партия / несколько складов / несколько складов покупателей)---------------//        Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchStockExtraPriceListTypeAgreement(object, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, batch, sku, stockProp, stockExtra);
        
    priceListType###object###stock###batch 'Вид цен для склада пок-ля' (object, stockExtra, batch) = priceListType###object###stock###sku(object, stockExtra, skuBatch(batch));

    ledgerPriceBatchStock###object###stockExtra 'Цена (базовая)' (batch, stockProp, object, stockExtra) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###stock###batch(object, stockExtra, batch), batch, stockProp, dateTime###object(object));

    viewPriceBatchStock###object###stockExtra 'Цена' (batch, stockProp, object, stockExtra) = DATA LOCAL NUMERIC[14,2] (Batch, Stock, ###object, Stock);

    priceBatchStock###object###stockExtra 'Цена' (batch, stockProp, object, stockExtra) = viewPriceBatchStock###object###stockExtra(batch, stockProp, object, stockExtra);

    updateViewPriceBatchStock###object###stockExtra (batch, stockProp, object, stockExtra) = ACTION {
        FOR pt == priceListType###object###stock###batch(object, stockExtra, batch) AND stockProp IS Stock NOINLINE (pt) DO
            viewPriceBatchStock###object###stockExtra(batch, stockProp, object, stockExtra) <- prevPriceBPriceListTypeBatchStockDateTime(pt, batch, stockProp, dateTime###object(object));
    }
END
META defineDocumentBatchStockExtraPriceListTypeSystemLedger(object, priceListTypeProp, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, batch, sku, stockProp, stockExtra);
    priceBatchStock###object###stockExtra 'Цена' (batch, stockProp, object, stockExtra) = prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp, dateTime###object(object)) AND stockExtra IS Stock;
END

META defineDocumentBatchStockExtra(object, detail, batchProp, skuProp, stockProp, stockExtra)

    detail###Batch###object###stockProp###stockExtra (batch, object, stockProp, stockExtra) =  GROUP MAX (detail)
        BY batchProp###detail(detail), object###detail(detail), stockProp###detail(detail), stockExtra###detail(detail);

    quantityBatch###object###stockProp###stockExtra 'Кол-во товара в документе' (batch, object, stockProp, stockExtra) = GROUP SUM quantity###detail(detail)
        BY batchProp###detail(detail), object###detail(detail), stockProp###detail(detail), stockExtra###detail(detail);

    quantityBatch###object###stockProp 'Итого' (batch, object, stockProp) = GROUP SUM quantity###detail(detail)
        BY batchProp###detail(detail), object###detail(detail), stockProp###detail(detail);

//    backgroundQuantityBatch###object###Stock 'Цвет' (batch, object, stock) = RGB(255,128,128) IF quantityBatch###object###stockProp(batch, object, stock) AND NOT
//        (quantityBatch###object###stockProp(batch, object, stock) <= currentBalanceBatchStock(batch, stock));
    backgroundQuantityBatch###object###Stock 'Цвет' (batch, object, stock) = ABSTRACT CASE COLOR (Batch, ###object, Stock);          

    changeQuantityValueBatch###object###Stock###stockExtra = ACTION (batch, object, stockProp, stockExtra) {
        IF detail###Batch###object###stockProp###stockExtra(batch, object, stockProp, stockExtra) THEN {
            IF requestedNumeric() THEN {
                quantity###detail(detail) <- requestedNumeric() WHERE detail == detail###Batch###object###stockProp###stockExtra(batch, object, stockProp, stockExtra);
            } ELSE {
                FOR detail###Batch###object###stockProp###stockExtra(batch, object, stockProp, stockExtra) == detail DO
                    DELETE detail;
            }
        } ELSE {
            IF requestedNumeric() THEN {
                FOR ADDOBJ d = ###detail DO {
                   object###detail(d) <- object;
                   data###stockProp###detail (d) <- stockProp;
                   skuProp###detail(d) <- skuBatch(batch);
                   batchProp###detail(d) <- batch;
                   stockExtra###detail(d) <- stockExtra;
                   quantity###detail (d) <- requestedNumeric();
                   shipmentDataDate###detail (d) <- shipmentDate###object(object);
                   shipmentDataTime###detail (d) <- shipmentTime###object(object);
                }
            }
        }
    }
    changeQuantityBatch###object###Stock###stockExtra = ACTION (batch, object, stockProp, stockExtra) {
        REQUEST NUMERIC[14,3] INPUT;
        changeQuantityValueBatch###object###Stock###stockExtra(batch, object, stockProp, stockExtra);
    }
END
META defineDocumentBatchStockExtra(object, batchProp, skuProp, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, object##Detail, batchProp, skuProp, stockProp, stockExtra);
END

META extendFormDocumentBatchStockExtraCustom(object, form, concrete, legalEntityProp, stockProp, stockExtra)

    EXTEND FORM form
        OBJECTS ccc = Stock FIXED GRID
        FILTERGROUP object##inactiveStock FILTER 'Активный' activeStock(ccc) 'ctrl F10' DEFAULT

        OBJECTS           stb=(sto=Stock, b=Batch)
        PROPERTIES(b) READONLY   nameSkuBatch, idBarcodeSkuBatch, shortNameUOMBatch, idBatch SHOWIF showIDs(), nameBatch 
        PROPERTIES(sto) READONLY stockName = nameStock SHOWIF not###stockProp###object(concrete)

        FILTERS           isParentSkuGroupBatch(sk, b),
                          (sto == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, sto) AND NOT ts OR sto IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###object(concrete) OR
                          sto == stockProp###object(concrete) AND NOT sg AND NOT ts,
                          legalEntityStock(sto) == supplierBlanketOrder(o)
        ORDER BY          nameSkuBatch(b)

        PROPERTIES quantityBatch###object###stockProp(b, concrete, sto) READONLY BACKGROUND backgroundQuantityBatch###object###Stock(b, concrete, sto)
        PROPERTIES quantityBatch###object###stockProp###stockExtra(b, concrete, sto, ccc)  COLUMNS (ccc) HEADER nameQuantity###stockExtra(ccc) ON CHANGE changeQuantityBatch###object###Stock###stockExtra(b, concrete, sto, ccc)
        PROPERTIES READONLY prevCurrentBalanceBatchStock(b,sto)
        PROPERTIES READONLY  priceBatchStock###object###stockExtra(b, sto, concrete, ccc)  COLUMNS (ccc) HEADER namePrice###stockExtra(ccc)

        FILTERS in###object###stock(concrete,ccc)

        FILTERGROUP object##filter2
            FILTER 'С остатком' prevCurrentBalanceBatchStock(b, sto) 'F10' DEFAULT
            FILTER 'В заказе' quantityBatch###object###stockProp(b, concrete, sto) 'F9'


    ;

    EXTEND DESIGN form {
        skuSelectPane {
            type = TABBED;
            ADD stb.box {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalanceBatchStock(b, sto)) { background = #FFEEEE; }
        PROPERTY(quantityBatch###object###stockProp###stockExtra(b, concrete, sto, ccc)) { background = #D4FFD4; }
    }
END

// ----------- Подбор (товар / один склад) без количества ---------------//

META defineDocumentSkuStockIn(object, detail, skuProp, stockProp)

    currentBalanceSku###object 'Остаток' (sku, object) = currentBalanceSkuStock(sku, stockProp###object(object));
    prevCurrentBalanceSku###object 'Остаток' (sku, object) = prevCurrentBalanceSkuStock(sku, stockProp###object(object));
    detail###sku###object(sku, object) = GROUP SUM 1 BY skuProp###detail(detail), object###detail(detail);

    inSku###object 'Отм.' (sku, object) = TRUE IF detail###sku###object(sku, object);

    changeInSku###object = ACTION (sku, object) {
        REQUEST BOOLEAN INPUT;
        IF NOT requestedLogical() THEN {
            IF detail###sku###object(sku, object) THEN {
                //FOR sku == skuProp###detail(detail) AND object == object###detail(detail) DO {
                FOR sku == skuProp###detail(detail) AND object == object###detail(detail) DO 
                    DELETE detail;
                //}
            }
        } ELSE {
            IF requestedLogical() THEN {
                FOR ADDOBJ d = ###detail DO {
                   ASSIGN object###detail(d) <- object;
                   ASSIGN skuProp###detail(d) <- sku;
                }
            }
        }
    }

END
META defineDocumentSkuStockIn(object, skuProp, stockProp)
    @defineDocumentSkuStockIn(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStockIn(object, form, concrete, contBox)

    EXTEND FORM form

        TREE treeGroup gg=Group PARENT parentGroup
        PROPERTIES READONLY orderGroup(gg), nameGroup(gg)
        FILTERS groupTypeGroup(gg) == groupType###object(concrete)
        FILTERGROUP object##inactive FILTER 'Активные' activeGroup(gg) 'F5' DEFAULT
        ORDER BY orderGroup(gg), nameGroup(gg) 
        OBJECTS ks=Sku
        PROPERTIES             inSku###object(ks,concrete) ON CHANGE changeInSku###object(ks, concrete), inputName = nameSku(ks) READONLY
        PROPERTIES(ks)          READONLY idBarcodeSku, shortNameUOMSku
        PROPERTIES(ks, concrete)currentBalanceSku###object READONLY
        PROPERTIES             addSku() TODRAW ks, editSku(ks), copySku(ks)

        FILTERS                isParentGroupSku(gg, ks) OR ks IS Sku AND NOT gg

        ORDER BY inputName

        FILTERGROUP object##filterBalance
            FILTER 'С остатком' prevCurrentBalanceSku###object(ks, concrete) 'F11'

    ;

    EXTEND DESIGN form {
        specification.box {
            type = TABBED;
            NEW itemBox BEFORE contBox {
                type = CONTAINERH;
                caption = 'Подбор';
                type = SPLITH;

                ADD treeGroup.tree.box;
                NEW skuSelectPane {
                    fill = 2;
                    ADD ks.box;
                    PROPERTY(copySku(ks)) { focusable = FALSE; }
                }
            }
        }
    }
END

//----------- Подбор (товар / один склад - расширение фильтра поставщиком) -----------//

META defineDocumentSkuStockSupplier (object, form, concrete)
    filterSupplier###object = DATA LOCAL LegalEntity (###object);
    nameFilterSupplier###object 'Поставщик' (object) = nameLegalEntity(filterSupplier###object(object));
    filterSupplier###object###sku (object, sku) = prevInSupplierSku(filterSupplier###object(object), sku) OR
                                                  (sku IS Sku AND NOT filterSupplier###object(object));

    EXTEND FORM form
        PROPERTIES nameFilterSupplier###object(concrete) FORCE PANEL
        FILTERS    filterSupplier###object###sku(concrete, ks)
    ;
    EXTEND DESIGN form {
        skuMainPane {
            ADD concrete.panel FIRST;
        }
    }
END

//----------- Подбор (партия / один склад - расширение фильтра поставщиком) -----------//

META defineDocumentBatchStockSupplier (object, form, concrete)

    filterSupplier###object###batch (object, batch) = filterSupplier###object(object) == prevSupplierBatch(batch) OR
                                                  (batch IS Batch AND NOT filterSupplier###object(object));

    EXTEND FORM form
        FILTERS    filterSupplier###object###batch(concrete, b)
    ;

END

// -------------------------------------------- Подбор через диалог --------------------------------------- //

META defineDialogSku (form)

    form###quantity 'Кол-во' = DATA LOCAL NUMERIC[14,3] (Sku);

    FORM form 'Подбор SKU'
        TREE skuTree sk = SkuGroup PARENT parentSkuGroup
        PROPERTIES READONLY orderSkuGroup(sk), skuTreeName = nameSkuGroup(sk)
        ORDER BY orderSkuGroup(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(sk) 'F5' DEFAULT

        OBJECTS s=Sku                                 //form###nameSku 'Наименование' (sku) = IF form###stock() THEN nameSkuStock(sku, form###stock()) ELSE nameSku(sku);
        PROPERTIES READONLY    inputName = nameSku(s) //form###nameSku(s)
        PROPERTIES(s)          form###quantity
        PROPERTIES             editSku(s)

        FILTERS                isParentSkuGroupSku(sk, s)
        ORDER BY inputName

        OBJECTS si=Sku
        PROPERTIES READONLY     selectedName = nameSku(si)
        PROPERTIES(si)          form###quantity
        FILTERS                 form###quantity(si)
        ORDER BY selectedName
    ;

    DESIGN form FROM DEFAULT {
        main {
            preferredSize = (1024, 768);
            NEW skuContainer BEFORE functions.box {
                fill = 1;
                type = SPLITH;

                ADD skuTree.tree.box;
                NEW inputContainer {
                    fill = 2;
                    type = CONTAINERV;;

                    NEW filterContainer {
                        align = STRETCH;
                        type = CONTAINERH;
                        //ADD PROPERTY(form###nameStock());
                    }

                    NEW inputSkuContainer {
                        fill = 1;
                        type = SPLITV;

                        ADD s.box {
                            fill = 3;
                        }
                        ADD si.box;
                    }
                }
            }
        }
    }

END

META defineDialogStockSku (form)

    @defineDialogSku (form);

    form###stock = DATA LOCAL Stock ();
    form###all 'Весь остаток' = DATA LOCAL BOOLEAN (Sku);
    form###nameStock 'Склад' () = nameStock(form###stock()) PREFCHARWIDTH 30;

    form###balance 'Остаток' (sku) = currentBalanceSkuStock(sku, form###stock());
    form###balanceFilter (sku) = form###balance(sku) OR (sku IS Sku AND NOT form###stock());

    form###quantity(sku) <- form###balance(sku) WHEN SET(form###all(sku));

    EXTEND FORM form
        PROPERTIES() form###nameStock

        PROPERTIES(s) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(s)          form###all SHOWIF form###stock()
        FILTERS                form###balanceFilter(s)

        PROPERTIES(si) READONLY form###balance SHOWIF form###stock()
        PROPERTIES(si)          form###all SHOWIF form###stock()
    ;

    EXTEND DESIGN form {
        filterContainer {
            ADD PROPERTY(form###nameStock());
        }
    }
END

META defineAddDetailDialogSkuStock (object, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustom (object, object##Detail, , skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustom (object, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustomInner(object, ###object, detail, caption, skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustomInner (object, class, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuCustom(object, detail, caption, skuProp, form);
    addDetailDialogSkuStock###detail###object 'Подбор товаров'###caption = ACTION (object) {
        ASSIGN form###stock() <- stockProp###object(object);
        ASSIGN form###all(sku) <- NULL;

        EXEC addDetailDialogSku###detail###object(object);
    } TOOLBAR;
END

META defineAddDetailDialogSku (object, skuProp, form)
    @defineAddDetailDialogSkuCustom(object, object##Detail, , skuProp, form);
END

META defineAddDetailDialogSkuCustom (object, detail, caption, skuProp, form)
    @defineAddDetailDialogSkuCustomInner (object, ###object, detail, ###detail, caption, skuProp, form);
END

META defineAddDetailDialogSkuCustomInner (object, class, detail, detailClass, caption, skuProp, form)
    addDetailDialogSku###detail###object 'Подбор товаров'###caption = ACTION (object) {
        FORM form MODAL;
        IF formResult() == FormResult.ok THEN {
            FOR form###quantity(sku) INLINE ADDOBJ w = detailClass DO {
                ASSIGN object###detail(w) <- object;
                ASSIGN skuProp###detail(w) <- sku;
                ASSIGN quantity###detail(w) <- form###quantity(sku);
            }
        }
        ASSIGN form###quantity(sku) <- NULL;
    } TOOLBAR;
END

@defineDialogStockSku(dialogSku);

// ----------------------------------------------- Документы с товарами для подбора ---------------------------------------- //

CLASS ABSTRACT Document 'Документ с товарами';
CLASS ABSTRACT DocumentDetail 'Строка документа';

numberDocument 'Номер' = ABSTRACT STRING[18] (Document);
seriesDocument 'Серия' = ABSTRACT STRING[2] (Document);
dateDocument 'Дата' = ABSTRACT DATE(Document);

supplierDocument = ABSTRACT LegalEntity(Document);
nameSupplierDocument 'Поставщик' (document) = nameLegalEntity(supplierDocument(document));
supplierStockDocument = ABSTRACT Stock(Document);
nameSupplierStockDocument 'Склад поставщика' (document) = nameStock(supplierStockDocument(document));

customerDocument = ABSTRACT LegalEntity(Document);
nameCustomerDocument 'Покупатель' (document) = nameLegalEntity(customerDocument(document));
customerStockDocument = ABSTRACT Stock(Document);
nameCustomerStockDocument 'Склад покупателя'(document) = nameStock(customerStockDocument(document));

documentDocumentDetail = ABSTRACT Document(DocumentDetail);

skuDocumentDetail = ABSTRACT Sku(DocumentDetail);
nameSkuDocumentDetail 'Товар' (d) = nameSku(skuDocumentDetail(d));
quantityDocumentDetail 'Кол-во' = ABSTRACT NUMERIC[14,3] (DocumentDetail);
priceDocumentDetail 'Цена' = ABSTRACT NUMERIC[14,2] (DocumentDetail);
indexDocumentDetail 'Номер' = ABSTRACT INTEGER(DocumentDetail);

countDocumentDetailDocument 'Кол-во строк' (o) = GROUP SUM 1 BY documentDocumentDetail(d);
quantityDocumentDetailSkuDocument 'Кол-во товара' (sku, o) = GROUP SUM quantityDocumentDetail(d) BY skuDocumentDetail(d), documentDocumentDetail(d);
countDocumentDetailSkuDocument 'Кол-во строк товара' (sku, o) = GROUP SUM 1 IF documentDocumentDetail(d)==o BY skuDocumentDetail(d), documentDocumentDetail(d);

fillPriceDocuments 'Использовать цены' = DATA LOCAL BOOLEAN ();

FORM documents 'Документы с товарами'
    OBJECTS d=Document LAST
    PROPERTIES(d) READONLY numberDocument, seriesDocument, dateDocument, nameSupplierDocument, nameSupplierStockDocument,
                  nameCustomerDocument, nameCustomerStockDocument, objectClassName
    PROPERTIES()  FORCE PANEL TOOLBAR fillPriceDocuments TODRAW d
    OBJECTS dd=DocumentDetail
    PROPERTIES(dd) READONLY indexDocumentDetail, nameSkuDocumentDetail, quantityDocumentDetail, priceDocumentDetail SHOWIF fillPriceDocuments()

    FILTERS documentDocumentDetail(dd)==d
;

DESIGN documents FROM DEFAULT{
    main {
        preferredSize = (1024, 768);
    }
}

META implementDocument(object)
    numberDocument(object) += number###object(object);
    seriesDocument(object) += series###object(object);
    dateDocument(object) += date###object(object);

    indexDocumentDetail(detail) += indexUser###object##Detail(detail);
    skuDocumentDetail(detail) += sku###object##Detail(detail);
    quantityDocumentDetail(detail) += quantity###object##Detail(detail);
    priceDocumentDetail(detail) += price###object##Detail(detail);

    documentDocumentDetail(detail) += object###object##Detail(detail);

    overFillDocument###object##DetailDocumentDetail = ABSTRACT ACTION CASE (###object##Detail, DocumentDetail); 
    fillDocument###object 'Подбор документа' = ACTION (user###object) {
        FORM documents MODAL;
        IF formResult() == FormResult.ok THEN {
            LOCAL chosenDocument = Document();
            chosenDocument() <- chosenObject('d');
            FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = User###object##Detail DO {
                user###object##User###object##Detail(i) <- user###object;
                skuUser###object##Detail(i) <- skuDocumentDetail(documentDetail);
                quantityUser###object##Detail(i) <- quantityDocumentDetail(documentDetail);
                priceUser###object##Detail(i) <- priceDocumentDetail(documentDetail) WHERE fillPriceDocuments();
                overFillDocument###object##DetailDocumentDetail(i, documentDetail);
            }
        }
    } TOOLBAR;

END

META implementDocumentSupplierCustomer(object)

    @implementDocument(object);

    supplierDocument(object) += supplier###object(object);
    supplierStockDocument(object) += supplierStock###object(object);
    customerDocument(object) += customer###object(object);
    customerStockDocument(object) += customerStock###object(object);
END

// ------------------------- Партии ---------------------------- //
batchDocumentDetail = ABSTRACT Batch(DocumentDetail);
nameBatchDocumentDetail 'Партия' (d) = nameBatch(batchDocumentDetail(d));

META implementDocumentBatch(object)
    @implementDocumentBatch(object, );
END

META implementDocumentBatch(object, prefix)
    batchDocumentDetail(detail) += prefix###batch###object##Detail(detail);
    
    overFillDocument###object##DetailDocumentDetail (i, d) += ACTION (i, d) {
        batchUser###object##Detail(i) <- batchDocumentDetail(d);
    }
END

EXTEND FORM documents
    PROPERTIES(dd) nameBatchDocumentDetail AFTER nameSkuDocumentDetail(dd) 
;

//----------------- Логирование изменений в документах ------------------- //

CLASS DocumentLog 'Запись лога документов';
TABLE documentLog(DocumentLog);

disableDocumentLog 'Отключить запись лога документов' = DATA BOOLEAN ();
enableDocumentLog = TRUE AND NOT disableDocumentLog();

EXTEND FORM options
    PROPERTIES() disableDocumentLog
;

EXTEND DESIGN options { 
    pane { 
        NEW history {
            caption = 'История';
            ADD PROPERTY(disableDocumentLog());
        }        
    } 
}

documentDocumentLog = DATA Document (DocumentLog);

numberDocumentDocumentLog 'Номер документа' = DATA STRING[18] (DocumentLog) IN recognize;
seriesDocumentDocumentLog 'Серия документа' = DATA STRING[2] (DocumentLog) IN recognize;
dateDocumentDocumentLog 'Дата документа' = DATA DATE(DocumentLog) IN recognize;
typeDocumentDocumentLog 'Тип документа' = DATA ISTRING[100] (DocumentLog) IN recognize; 

sessionDocumentLog = DATA Session (DocumentLog); 
hostnameComputerDocumentLog 'Имя компьютера' = DATA VARISTRING[100] (DocumentLog); 
userLoginDocumentLog 'Логин пользователя' = DATA STRING[30] (DocumentLog); 
nameContactDocumentLog 'Имя пользователя' =  DATA VARSTRING[100] (DocumentLog) IN recognize;
dateTimeSessionDocumentLog 'Время' = DATA DATETIME (DocumentLog) IN recognize;
dateSessionDocumentLog 'Дата' (d) = DATE(dateTimeSessionDocumentLog(d));

@defineLog (DocumentLog, 'изменений документов', log, dateSession);

//hostnameComputerDocumentLog 'Имя компьютера' = hostnameComputerConnectionSession(sessionDocumentLog(l)) IN recognize;
//userLoginDocumentLog 'Логин пользователя' = userLoginConnectionSession(sessionDocumentLog(l)) IN recognize;
//nameContactDocumentLog 'Имя пользователя' =  nameUserSession (sessionDocumentLog(l)) IN recognize;
//dateTimeSessionDocumentLog 'Время' = dateTimeSession(sessionDocumentLog(l)) IN recognize;

CLASS TypeChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    addRow 'Добавление строк',
    deleteRow 'Удаление строк',
    changeSeriesNumber 'Изменение серии/номера'
}

typeChangeDocumentLog= DATA TypeChange (DocumentLog);
nameTypeChangeDocumentLog 'Тип изменения' (l) = staticCaption(typeChangeDocumentLog(l)) IN recognize;

noteDocumentLog 'Примечание' = DATA VARSTRING[255] (DocumentLog) MINCHARWIDTH 20 PREFCHARWIDTH 30;

WHEN SET(o IS Document) IF NOT disableDocumentLog() DO {
    FOR ADDOBJ d = DocumentLog DO {        
        documentDocumentLog(d) <- o;
        typeDocumentDocumentLog(d) <- objectClassName(o);
        numberDocumentDocumentLog(d) <- numberDocument(o);  
        seriesDocumentDocumentLog(d) <- seriesDocument(o); 
        dateDocumentDocumentLog(d) <- dateDocument(o);   
        typeChangeDocumentLog(d) <- TypeChange.add;
        sessionDocumentLog(d) <- currentSession();
        hostnameComputerDocumentLog(d) <- hostnameComputerConnectionSession(currentSession());
        userLoginDocumentLog(d) <- userLoginConnectionSession(currentSession()); 
        nameContactDocumentLog(d) <- VARSTRING[100](nameUserSession(currentSession()));
        dateTimeSessionDocumentLog(d) <- dateTimeSession(currentSession());             
        noteDocumentLog(d) <- VARSTRING[255]('Добавлен документ');              
    }
}
WHEN DROPPED(o IS Document) IF NOT disableDocumentLog() DO {
    FOR ADDOBJ d = DocumentLog DO {       

        typeDocumentDocumentLog(d) <- PREV(objectClassName(o));
        numberDocumentDocumentLog(d) <- PREV(numberDocument(o));  
        seriesDocumentDocumentLog(d) <- PREV(seriesDocument(o)); 
        dateDocumentDocumentLog(d) <- PREV(dateDocument(o));   
        typeChangeDocumentLog(d) <- TypeChange.delete;
        sessionDocumentLog(d) <- currentSession();
        hostnameComputerDocumentLog(d) <- hostnameComputerConnectionSession(currentSession());
        userLoginDocumentLog(d) <- userLoginConnectionSession(currentSession()); 
        nameContactDocumentLog(d) <- VARSTRING[100](nameUserSession(currentSession()));
        dateTimeSessionDocumentLog(d) <- dateTimeSession(currentSession());        
        noteDocumentLog(d) <- VARSTRING[255]('Удален документ');         
    }
}

WHEN ((SETCHANGED(numberDocument(o)) AND PREV(numberDocument(o))) OR (SETCHANGED(seriesDocument(o)) AND PREV(seriesDocument(o))) ) IF NOT disableDocumentLog()  DO {
    FOR ADDOBJ d = DocumentLog DO {
        documentDocumentLog(d) <- o;
        typeDocumentDocumentLog(d) <- objectClassName(o);
        numberDocumentDocumentLog(d) <- numberDocument(o);  
        seriesDocumentDocumentLog(d) <- seriesDocument(o); 
        dateDocumentDocumentLog(d) <- dateDocument(o);   
        typeChangeDocumentLog(d) <- TypeChange.changeSeriesNumber;
        noteDocumentLog(d) <- VARSTRING[255]('Предыдущее значение серия/номер: '+(CONCAT '', PREV(seriesDocument(o)), PREV(numberDocument(o))));      
        sessionDocumentLog(d) <- currentSession();  
        hostnameComputerDocumentLog(d) <- hostnameComputerConnectionSession(currentSession());
        userLoginDocumentLog(d) <- userLoginConnectionSession(currentSession()); 
        nameContactDocumentLog(d) <- VARSTRING[100](nameUserSession(currentSession()));
        dateTimeSessionDocumentLog(d) <- dateTimeSession(currentSession());                 
    }
}

WHEN (x== [ = GROUP SUM 1 IF SET(d IS DocumentDetail) BY documentDocumentDetail(d)](o)) IF NOT disableDocumentLog() DO {
    FOR ADDOBJ d = DocumentLog DO {
        documentDocumentLog(d) <- o;
        typeDocumentDocumentLog(d) <- objectClassName(o);
        numberDocumentDocumentLog(d) <- numberDocument(o);  
        seriesDocumentDocumentLog(d) <- seriesDocument(o); 
        dateDocumentDocumentLog(d) <- dateDocument(o);   
        typeChangeDocumentLog(d) <- TypeChange.addRow;
        noteDocumentLog(d) <- VARSTRING[255]('Количество добавленных строк: '+x);  
        sessionDocumentLog(d) <- currentSession();      
        hostnameComputerDocumentLog(d) <- hostnameComputerConnectionSession(currentSession());
        userLoginDocumentLog(d) <- userLoginConnectionSession(currentSession()); 
        nameContactDocumentLog(d) <- VARSTRING[100](nameUserSession(currentSession()));
        dateTimeSessionDocumentLog(d) <- dateTimeSession(currentSession());                 
    }
}

WHEN x==[= GROUP SUM 1 IF DROPPED(d IS DocumentDetail) BY PREV(documentDocumentDetail(d))](o) AND NOT disableDocumentLog() NOINLINE DO {
    FOR ADDOBJ d = DocumentLog DO {
        documentDocumentLog(d) <- o;
        typeDocumentDocumentLog(d) <- objectClassName(o);
        numberDocumentDocumentLog(d) <- numberDocument(o);  
        seriesDocumentDocumentLog(d) <- seriesDocument(o); 
        dateDocumentDocumentLog(d) <- dateDocument(o);   
        typeChangeDocumentLog(d) <- TypeChange.deleteRow;
        noteDocumentLog(d) <- VARSTRING[255]('Количество удаленных строк: '+x);  
        sessionDocumentLog(d) <- currentSession();   
        hostnameComputerDocumentLog(d) <- hostnameComputerConnectionSession(currentSession());
        userLoginDocumentLog(d) <- userLoginConnectionSession(currentSession()); 
        nameContactDocumentLog(d) <- VARSTRING[100](nameUserSession(currentSession()));
        dateTimeSessionDocumentLog(d) <- dateTimeSession(currentSession());                    
    }
}

META defineDocumentLogForm(form, concrete)
    EXTEND FORM form
        OBJECTS dLog=DocumentLog FIXED GRID
        PROPERTIES(dLog) SHOWIF enableDocumentLog() READONLY numberDocumentDocumentLog, seriesDocumentDocumentLog, dateDocumentDocumentLog, typeDocumentDocumentLog,
                      hostnameComputerDocumentLog, userLoginDocumentLog, nameContactDocumentLog, dateTimeSessionDocumentLog, nameTypeChangeDocumentLog,
                      noteDocumentLog   
        FILTERS documentDocumentLog(dLog) == concrete
    ;
    EXTEND DESIGN form {
        documentHistory {
            ADD dLog.box;
        }    
    }   
END

FORM documentLogs 'Журнал изменения документов'
    OBJECTS d=DocumentLog
    PROPERTIES(d) READONLY numberDocumentDocumentLog, seriesDocumentDocumentLog, dateDocumentDocumentLog, typeDocumentDocumentLog,
                  hostnameComputerDocumentLog, userLoginDocumentLog, dateTimeSessionDocumentLog, nameTypeChangeDocumentLog,
                  noteDocumentLog
;

DESIGN documentLogs FROM DEFAULT{
    main {
        ADD d.box;
        ADD functions.box;        
    }
}

NAVIGATOR {
    systemEvents {
        ADD documentLogs;

    }
}