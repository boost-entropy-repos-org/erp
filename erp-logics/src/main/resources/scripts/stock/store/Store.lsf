MODULE Store;

REQUIRE System, Utils, Historizable, EmployeeStock, Tax, LegalEntity, Retail, Bank, Cash;

// -------------------------------------- Торговая сеть ------------------------------- //

CLASS ChainStores 'Торговая сеть' : StockGroup;
TABLE chainStores (ChainStores);

@defineExternalizable(chainStores, VARSTRING[100]);

nameChainStores 'Наименование' = DATA VARISTRING[100](ChainStores);

nameStockGroup(group) += nameChainStores(group) IF group IS ChainStores;

// -------------------------------------- Формат магазина ----------------------------- //

CLASS StoreType 'Формат магазина' : StockGroup;
TABLE storeType (StoreType);

@defineExternalizable(storeType, VARSTRING[100]);

nameStoreType 'Наименование' = DATA VARISTRING[100](StoreType);

nameStockGroup(group) += nameStoreType(group) IF group IS StoreType;



chainStoresStoreType = DATA ChainStores (StoreType) NOT NULL DELETE;
nameChainStoresStoreType 'Торговая сеть' (storeType) = nameChainStores(chainStoresStoreType(storeType)) IN base;

inChainStoresStoreType(chainStores, storeType) = chainStoresStoreType(storeType) == chainStores;

parentStockGroup (storeType) += chainStoresStoreType(storeType);

storeTypeNameChainStores 'Формат магазина по имени и торговой сети' (name, chainStores) = GROUP AGGR storeType BY nameStoreType(storeType), idStoreType(storeType) WHERE storeType IS StoreType;

FORM storeType 'Формат магазина'
    OBJECTS t=StoreType FIXED PANEL
    PROPERTIES(t) nameStoreType
    EDIT StoreType OBJECT t
;

FORM storeTypes 'Форматы магазинов'
    OBJECTS t=StoreType
    PROPERTIES(t) nameStoreType READONLY, DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameStoreType(t)
    DIALOG StoreType OBJECT t
;
DESIGN storeTypes FROM DEFAULT { main{ preferredSize = (600, 400); } }

FORM chainStores 'Торговая сеть'
    OBJECTS n=ChainStores FIXED PANEL
    PROPERTIES(n) nameChainStores, idChainStores SHOWIF showIDs()

    OBJECTS s=StoreType
    PROPERTIES(s) nameStoreType
    PROPERTIES(s) ADDOBJ, DELETESESSION
    FILTERS inChainStoresStoreType(n, s)

    EDIT ChainStores OBJECT n
;

// -------------------------------------- Магазин ------------------------------- //

CLASS Store 'Магазин' : StockGroup, TaxUnit, POI;
TABLE store (Store);

@defineExternalizable(store, VARSTRING[100]);

nameStore 'Наименование' = DATA VARISTRING[100](Store) INDEXED;

nameStockGroup(group) += nameStore(group) IF group IS Store;

legalEntityStore = DATA LegalEntity (Store) INDEXED NOT NULL;
nameLegalEntityStore 'Компания' (store) = nameLegalEntity(legalEntityStore(store)) IN base;

bankAccountStore = DATA Bank.Account (Store);
bankAccountStore(store) <- accountLegalEntity(legalEntityStore(store))
    WHEN CHANGED(legalEntityStore(store));
numberBankAccountStore 'Номер счета для инкасаций' = Bank.numberAccount(bankAccountStore(store));

CONSTRAINT Bank.legalEntityAccount(bankAccountStore(store)) != legalEntityStore(store)
    CHECKED BY bankAccountStore MESSAGE 'Организация магазина должна совпадать с организацией расчетного счета';

isCompanyStore(store) = isCompanyLegalEntity(legalEntityStore(store));

languageStore (store) = languageLegalEntity(legalEntityStore(store));

regionStore = DATA Region (Store);
nameRegionStore 'Регион' (store) = nameRegion(regionStore(store));

addressStore 'Адрес' = DATA VARSTRING[100] (Store);
addressPOI (store) += addressStore(store);

latitudeStore 'Координата X' = DATA NUMERIC[10,5](Store);
longitudeStore 'Координата Y' = DATA NUMERIC[10,5](Store);

latitudePOI (store) += latitudeStore(store);
longitudePOI (store) += longitudeStore(store);

storeTypeStore = DATA StoreType (Store) INDEXED AUTOSET;
nameStoreTypeStore 'Формат' (store) = nameStoreType(storeTypeStore(store)) IN base;

countStoreStoreType 'Кол-во магазинов' (storeType) =
    GROUP SUM 1 IF storeTypeStore(store) == storeType
    BY storeType;

inStoreTypeStore (storeType, store) = storeTypeStore (store) == storeType;

chainStoresStore (store) = chainStoresStoreType(storeTypeStore(store));
nameChainStoresStore 'Торговая сеть' (store) = nameChainStores(chainStoresStore(store)) IN base;

countStoreChainStores 'Кол-во магазинов' (chainStores) =
    GROUP SUM 1 IF chainStoresStore(store) == chainStores
    BY chainStores;

inChainStoresStore (chainStores, store) = chainStoresStore(store) == chainStores;

parentStockGroup (store) += storeTypeStore(store);

taxUnitGroupTaxUnit(store) += legalEntityStore(store);
descriptionTaxUnit(store) += nameStore(store) + ' ' + addressStore(store);

inChainStoresStoreTypeStore (chainStores, storeType, store) =
    (storeTypeStore(store) == storeType AND chainStores IS ChainStores) OR
    (chainStoresStore(store) == chainStores AND NOT storeType) OR
    (store IS Store AND NOT storeType AND NOT chainStores);

// -------------------------------------- Отдел магазина ------------------------------- //

CLASS DepartmentStore 'Отдел магазина' : Stock;
TABLE departmentStore (DepartmentStore);
TABLE departmentStoreDate (DepartmentStore, DATE);

@defineExternalizable(departmentStore, VARSTRING[100]);
idStock (s) += idDepartmentStore(s);

nameDepartmentStore 'Наименование' = DATA VARISTRING[150](DepartmentStore) INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 30;

nameStock(stock) += nameDepartmentStore(stock) IF stock IS DepartmentStore;

storeDepartmentStore = DATA Store (DepartmentStore) INDEXED AUTOSET NOT NULL DELETE;
nameStoreDepartmentStore 'Магазин' (departmentStore) = nameStore(storeDepartmentStore(departmentStore)) IN base MINCHARWIDTH 20 PREFCHARWIDTH 30;
stockGroupStock (departmentStore) += storeDepartmentStore(departmentStore);

inStoreDepartment(store, departmentStore) = storeDepartmentStore(departmentStore) == store;

storeTypeDepartmentStore(departmentStore) = storeTypeStore(storeDepartmentStore(departmentStore)) PERSISTENT INDEXED;
chainStoresDepartmentStore(departmentStore) = chainStoresStoreType(storeTypeDepartmentStore(departmentStore)) PERSISTENT INDEXED;

legalEntityDepartmentStore (departmentStore) = legalEntityStore(storeDepartmentStore(departmentStore)) PERSISTENT INDEXED;
legalEntityStock (stock) += legalEntityDepartmentStore(stock);

quantityDaysCloseDepartmentStore 'Срок автоматического закрытия заказов' = DATA INTEGER(DepartmentStore);
quantityDaysCloseOrdersStock(stock) += quantityDaysCloseDepartmentStore(stock);

userLegalEntityDepartmentStore 'Отм.' = DATA BOOLEAN (LegalEntity, DepartmentStore);
userLegalEntityStock(legalEntity, stock) += userLegalEntityDepartmentStore(legalEntity, stock);

nameLegalEntityDepartmentStore 'Компания' (departmentStore) = nameLegalEntity(legalEntityDepartmentStore(departmentStore));

primaryDepartmentStoreStore 'Основной отдел' (store) =
    GROUP MIN departmentStore BY storeDepartmentStore(departmentStore);

countDepartmentStoreStore 'Кол-во отделов' (store) = GROUP SUM 1 IF dep IS DepartmentStore BY storeDepartmentStore(dep);

addressDepartmentStore 'Адрес' (departmentStore) = addressStore(storeDepartmentStore(departmentStore));
addressStock (departmentStore) += addressDepartmentStore(departmentStore);

latitudeDepartmentStore 'Координата X' (departmentStore) = latitudeStore(storeDepartmentStore(departmentStore));
longitudeDepartmentStore 'Координата Y' (departmentStore) = longitudeStore(storeDepartmentStore(departmentStore));

latitudePOI (departmentStore) += latitudeDepartmentStore(departmentStore);
longitudePOI (departmentStore) += longitudeDepartmentStore(departmentStore);

regionStock(stock) += regionStore(storeDepartmentStore(stock));

@defineHistorizable(tradingSquare, , 'Торговая площадь', NUMERIC[10,2], departmentStore, nameDepartmentStore, public);

tradingSquareStoreDate (store, date) = GROUP SUM tradingSquareDepartmentStoreDate(departmentStore, date) BY storeDepartmentStore(departmentStore), date;
tradingSquareStore 'Торговая площадь' (store) = tradingSquareStoreDate(store, currentDate());

cashAccountDepartmentStore 'Счет' = DATA Cash.Account (DepartmentStore);
numberCashAccountDepartmentStore 'Номер счета' = Cash.numberAccount(cashAccountDepartmentStore(departmentStore));

CONSTRAINT legalEntityDepartmentStore(departmentStore) != Cash.legalEntityAccount(cashAccountDepartmentStore(departmentStore))
    CHECKED BY cashAccountDepartmentStore MESSAGE 'Организация отдела магазина должна совпадать с организацией счета';

inChainStoresStoreTypeStoreDepartmentStore (chainStores, storeType, store, department) =
    (storeDepartmentStore(department) == store AND storeType IS StoreType AND chainStores IS ChainStores) OR
    (storeTypeDepartmentStore(department) == storeType AND chainStores IS ChainStores AND NOT store) OR
    (chainStoresDepartmentStore(department) == chainStores AND NOT store AND NOT storeType) OR
    (department IS DepartmentStore AND NOT store AND NOT storeType AND NOT chainStores);

inChainStoresStoreTypeDepartmentStore (chainStores, storeType, departmentStore)= inChainStoresStoreTypeStore (chainStores, storeType, storeDepartmentStore(departmentStore));     

// -------------------------------------- Формы отдела магазинов ------------------------------------------ //

FORM departmentStore 'Отдел магазина'
    OBJECTS d = DepartmentStore FIXED PANEL
    PROPERTIES(d) nameDep=nameDepartmentStore, nameStoreDepartmentStore, tradingSquareDepartmentStore,
                  numberCashAccountDepartmentStore, quantityDaysCloseDepartmentStore,
                  idDepartmentStore SHOWIF showIDs()

    OBJECTS e = Employee
    PROPERTIES(e) READONLY firstNameContact, lastNameContact
    PROPERTIES(e) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    FILTERS inStockEmployee(d, e)

    EDIT DepartmentStore OBJECT d
;

DESIGN departmentStore FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        NEW header {
            type = CONTAINERH;
            NEW headerLeft {
                NEW headerMainParams {
                    caption = 'Основные параметры';
                    type = CONTAINERH;
                    ADD PROPERTY(nameDep);
                    ADD PROPERTY(idDepartmentStore(d));
                    ADD PROPERTY(nameStoreDepartmentStore(d));
                    ADD PROPERTY(tradingSquareDepartmentStore(d));
                }
                NEW headerExtraParams {
                    type = COLUMNS;
                    columns = 2;
                    caption = 'Дополнительные параметры';
                    ADD PROPERTY(numberCashAccountDepartmentStore(d));
                    ADD PROPERTY(quantityDaysCloseDepartmentStore(d));
                }
            }
            NEW headerRight;
        }
        ADD e.box;
        ADD functions.box;
    }
}

editDepartmentStore 'Редактировать' = ACTION EDITFORM DepartmentStore;
editStock(stock) += editDepartmentStore(stock);

editSessionDepartmentStore 'Редактировать' = ACTION EDITFORM SESSION DepartmentStore;
editSessionStock(stock) += editSessionDepartmentStore(stock);

FORM departmentStores 'Отделы магазинов'
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s=Store
    PROPERTIES READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st), nameStore(s)
    FILTERS stringEqualsAll(a), inChainStoresStoreType (t, st), inStoreTypeStore(st, s)

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY depName = nameDepartmentStore
    FILTERS inChainStoresStoreTypeStoreDepartmentStore(t, st, s, d)
    ORDER BY depName

    DIALOG DepartmentStore OBJECT d
;

DESIGN departmentStores FROM DEFAULT {
    main {
        preferredSize = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            ADD treeStore.tree.box {
                caption = 'Склады';
            }

            ADD d.box {
                fill = 3;
                d.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        ADD functions.box;
    }
}

changeStore = ACTION (store) {
    REQUEST VARSTRING[110] INPUT;
    IF requestedString() THEN {
        FOR storeDepartmentStore(dep) == store DO {
            ASSIGN nameDepartmentStore(dep) <- replace(nameDepartmentStore(dep), nameStore(store), requestedString());
        }
    }
    ASSIGN nameStore(store) <- requestedString();
}


FORM store 'Магазин'
    OBJECTS s=Store FIXED PANEL
    PROPERTIES(s) nameStore ON CHANGE changeStore(s), addressStore, nameStoreTypeStore, tradingSquareStore READONLY, nameLegalEntityStore, numberBankAccountStore,
                  nameRegionStore, latitudeStore, longitudeStore, showOnMapPOI, idStore SHOWIF showIDs()

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY nameDepartmentStore, idDepartmentStore SHOWIF showIDs(), tradingSquareDepartmentStore
    PROPERTIES(d)          ADDSESSIONFORM, EDITSESSIONFORM, deleteD=DELETESESSION
    FILTERS inStoreDepartment(s, d)

    EDIT Store OBJECT s
;
DESIGN store FROM DEFAULT{
    NEW header {
        NEW headerMainParams {
            caption = 'Основные параметры';
            type = CONTAINERH;
            ADD PROPERTY(nameStore(s));
            ADD PROPERTY(idStore(s));
            ADD PROPERTY(nameStoreTypeStore(s));
            ADD PROPERTY(nameLegalEntityStore(s));
        }
        NEW headerLocationParams {
            caption = 'Координаты';
            type = CONTAINERH;
            ADD PROPERTY(addressStore(s));
            ADD PROPERTY(latitudeStore(s));
            ADD PROPERTY(longitudeStore(s));
            ADD PROPERTY(showOnMapPOI(s));
        }
        NEW headerExtraParams {
            caption = 'Дополнительные параметры';
            type = COLUMNS;
            columns = 3;
            ADD PROPERTY(numberBankAccountStore(s));
            ADD PROPERTY(nameRegionStore(s));
            ADD PROPERTY(tradingSquareStore(s));
        }
    }

    ADD d.box;
    ADD functions.box;
}


// -------------------------------------- Формы магазинов ------------------------------------------ //

FORM stores 'Магазины'
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY OBJVALUE(a), nameChainStores(t), nameStoreType(st)

    FILTERS stringEqualsAll(a)
    FILTERS inChainStoresStoreType (t, st)

    PROPERTIES(t)          addT=ADDFORM FORCE PANEL, editT=EDITFORM FORCE PANEL, deletet=DELETE FORCE PANEL TOOLBAR

    OBJECTS s=Store
    PROPERTIES(s) READONLYIF isReadonly() nameStore, idStore SHOWIF showIDs(), addressStore, nameStoreTypeStore, nameLegalEntityStore, nameRegionStore
    PROPERTIES(s)          ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    FILTERS inChainStoresStoreTypeStore(t, st, s)

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY nameDepartmentStore, idDepartmentStore SHOWIF showIDs()
    FILTERS inStoreDepartment(s, d)
;

DESIGN stores FROM DEFAULT {

    NEW pane {
        fill = 1;
        type = SPLITH;

        ADD treeStore.tree.box;

        NEW firstCase {
            fill = 3;
            type = SPLITV;

            ADD s.box {
                fill = 2;
            }
            ADD d.box;
        }
    }

    ADD functions.box;
}
@extendFormEditable(stores);

NAVIGATOR {
    retailMasterData {
        ADD stores;
    }
}

// -------------------------------------- Макросы ----------------------------------------------- //

META defineDocumentHeaderDepartmentStore (object)
    @defineDocumentHeaderStock(object, departmentStore, 'Отдел магазина');
END

META defineDocumentDetailDepartmentStoreCustom (object, detail)
   @defineDocumentDetailStock (object, detail, departmentStore, departmentStore, 'Отдел магазина');
   store###detail (detail) = storeDepartmentStore(departmentStore###detail(detail));
   nameStore###detail 'Магазин' (detail) = nameStore(store###detail(detail));
END
META defineDocumentDetailDepartmentStore (object)
    @defineDocumentDetailDepartmentStoreCustom (object, object##Detail);
END

META defineDocumentDepartmentStore (object)
    @defineDocumentHeaderDepartmentStore(object);
    @defineDocumentDetailDepartmentStore(object);
END

addStoreLegalEntity 'Добавить магазин' = ACTION (legalEntity) {

    FOR ADDOBJ st = Store DO {
        ASSIGN legalEntityStore(st) <- legalEntity;
        FORM store OBJECTS s = st DOCKEDMODAL;
    }
}

EXTEND FORM legalEntity

    PROPERTIES addStoreLegalEntity(l) TODRAW st FORCE PANEL TOOLBAR
;

