MODULE Store;

REQUIRE System, Utils, Historizable, EmployeeStock, Tax, LegalEntity, Retail, Bank, Cash;

// -------------------------------------- Торговая сеть ------------------------------- //

CLASS ChainStores 'Торговая сеть' : StockGroup;
TABLE chainStores (ChainStores);

@defineExternalizable(chainStores, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[100](ChainStores) IN recognize;

name(ChainStores group) += name(group) IF group IS ChainStores;

// -------------------------------------- Формат магазина ----------------------------- //

CLASS StoreType 'Формат магазина' : StockGroup;
TABLE storeType (StoreType);

@defineExternalizable(storeType, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[100](StoreType);

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (StoreType);
active 'Активный' (StoreType t) = t IS StoreType AND NOT inactive(t);

name(StoreType group) += name(group) IF group IS StoreType;

chainStores = DATA ChainStores (StoreType) NOT NULL DELETE;
nameChainStores 'Торговая сеть' (StoreType storeType) = name(chainStores(storeType)) IN base;

in(ChainStores chainStores, StoreType storeType) = chainStores(storeType) == chainStores;

parent (StoreType storeType) += chainStores(storeType);

storeType 'Формат магазина по имени и торговой сети' (name, chainStores) = GROUP AGGR StoreType storeType BY name(storeType), id(chainStores(storeType)) WHERE storeType IS StoreType;

FORM storeType 'Формат магазина'
    OBJECTS t=StoreType PANEL
    PROPERTIES(t) nameChainStores, name, inactive
    EDIT StoreType OBJECT t
;

FORM storeTypes 'Форматы магазинов'
    OBJECTS t=StoreType
    PROPERTIES(t) NEWSESSION nameChainStores READONLY, name READONLY, DELETE 
    PROPERTIES(t) NEWSESSION NEW, EDIT
    ORDER BY name(t)
    LIST StoreType OBJECT t
;
DESIGN storeTypes { main{ preferredSize = (600, 400); } }

FORM chainStores 'Торговая сеть'
    OBJECTS n=ChainStores PANEL
    PROPERTIES(n) name, id SHOWIF showIDs()

    OBJECTS s=StoreType
    PROPERTIES(s) name, inactive
    PROPERTIES(s) NEW, DELETE GRID
    FILTERS in(n, s)
    FILTERGROUP active
        FILTER 'Активные' active(s) DEFAULT

    EDIT ChainStores OBJECT n
;

// -------------------------------------- Магазин ------------------------------- //

CLASS Store 'Магазин' : StockGroup, TaxUnit, POI;
TABLE store (Store);

@defineExternalizable(store, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[100](Store) INDEXED;

phone 'Телефон магазина' = DATA VARSTRING[100] (Store);

name[StockGroup](Store group) += name(group) IF group IS Store;

legalEntity 'Компания' = DATA LegalEntity (Store) INDEXED NOT NULL;
nameLegalEntity 'Компания' (Store store) = name(legalEntity(store)) IN base;
fullNameLegalEntity 'Компания' (Store store) = fullName(legalEntity(store));

bankAccount = DATA Bank.Account (Store);
bankAccount(Store store) <- account(legalEntity(store))
    WHEN CHANGED(legalEntity(store));
numberBankAccount 'Номер счета для инкасаций' = number(bankAccount(Store store));

CONSTRAINT legalEntity(bankAccount(Store store)) != legalEntity(store)
    CHECKED BY bankAccount[Store] MESSAGE 'Организация магазина должна совпадать с организацией расчетного счета';

isCompany(Store store) = isCompany(legalEntity(store));

language (Store store) = language(legalEntity(store));

region = DATA Region (Store);
region(Store sg) += region(sg);
nameRegion 'Регион' (Store store) = name(region(store));

address 'Адрес' = DATA VARSTRING[100] (Store);
mainAddress (Store store) += address(store);

email 'E-mail' (warehouse) = DATA VARSTRING[300] (Store) MINCHARWIDTH 30 PREFCHARWIDTH 50;

latitude 'Координата X' = DATA NUMERIC[10,5](Store);
longitude 'Координата Y' = DATA NUMERIC[10,5](Store);

chairman = DATA Employee (Store);
nameChairman 'Директор магазина' (Store store) = name[Contact](chairman(store));

openDate 'Дата открытия' = DATA DATE (Store);

latitude (Store store) += latitude(store);
longitude (Store store) += longitude(store);

storeType = DATA StoreType (Store) INDEXED AUTOSET;
nameStoreType 'Формат' (Store store) = name(storeType(store)) IN base;

countStore 'Кол-во магазинов' (storeType) =
    GROUP SUM 1 IF storeType(Store store) == StoreType storeType
    BY storeType;

in (StoreType storeType, Store store) = storeType (store) == storeType;

chainStores (Store store) = chainStores(storeType(store));
nameChainStores 'Торговая сеть' (Store store) = name(chainStores(store)) IN base;

countStore 'Кол-во магазинов' (chainStores) =
    GROUP SUM 1 IF chainStores(Store store) == ChainStores chainStores
    BY chainStores;

in (ChainStores chainStores, Store store) = chainStores(store) == chainStores;

parent (Store store) += storeType(store);

taxUnitGroup(Store store) += legalEntity(store);
description(Store store) += CONCAT ' ', name(store), address(store);

EXTEND FORM tax
    FILTERGROUP store 
        FILTER 'Магазины' u IS Store 'F9' DEFAULT 
;

in (ChainStores chainStores, StoreType storeType, Store store) =
    (storeType(store) == storeType AND chainStores IS ChainStores) OR
    (chainStores(store) == chainStores AND NOT storeType) OR
    (store IS Store AND NOT storeType AND NOT chainStores);
    
// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (Store);
active 'Активный' (Store s) = s IS Store AND NOT inactive(s);

// -------------------------------------- Отдел магазина ------------------------------- //

CLASS DepartmentStore 'Отдел магазина' : Stock;
TABLE departmentStore (DepartmentStore);
TABLE departmentStoreDate (DepartmentStore, DATE);

@defineExternalizable(departmentStore, VARSTRING[100]);
id (DepartmentStore s) += id(s);

name 'Наименование' = DATA VARISTRING[150](DepartmentStore) INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 30 IN recognize;
fullName 'Наименование полное' = DATA VARISTRING[150](DepartmentStore) INDEXED MINCHARWIDTH 20 PREFCHARWIDTH 30;

name(DepartmentStore stock) += name(stock) IF stock IS DepartmentStore;
fullName(DepartmentStore stock) += (OVERRIDE name(stock), fullName(stock)) IF stock IS DepartmentStore;

store = DATA Store (DepartmentStore) INDEXED AUTOSET NOT NULL DELETE;
nameStore 'Магазин' (DepartmentStore departmentStore) = name(store(departmentStore)) IN base MINCHARWIDTH 20 PREFCHARWIDTH 30;
dataStockGroup = DATA StockGroup (DepartmentStore);
nameDataStockGroup = name(dataStockGroup(DepartmentStore d));
stockGroup = OVERRIDE store(DepartmentStore departmentStore), dataStockGroup(departmentStore);
nameStockGroup 'Группа складов' = name(stockGroup(DepartmentStore d)) MINCHARWIDTH 20 PREFCHARWIDTH 30;

openDate 'Дата открытия' (DepartmentStore d) = openDate(store(d)); 

stockGroup (DepartmentStore departmentStore) += OVERRIDE store(departmentStore), dataStockGroup(departmentStore);

in(Store store, DepartmentStore departmentStore) = store(departmentStore) == store;

storeType(DepartmentStore departmentStore) = storeType(store(departmentStore)) PERSISTENT INDEXED;
nameStoreType 'Формат' (DepartmentStore departmentStore) = name(storeType(departmentStore));

chainStores(DepartmentStore departmentStore) = chainStores(storeType(departmentStore)) PERSISTENT INDEXED;

legalEntity (DepartmentStore departmentStore) = legalEntity(store(departmentStore)) PERSISTENT INDEXED;
legalEntity (DepartmentStore stock) += legalEntity(stock);

quantityDaysClose 'Срок автоматического закрытия заказов' = DATA INTEGER(DepartmentStore);
autoCloseOrders 'Автоматически закрывать заказы' = DATA BOOLEAN (DepartmentStore); 

quantityDaysCloseOrders(DepartmentStore stock) += quantityDaysClose(stock);
autoCloseOrders (DepartmentStore stock) += autoCloseOrders(stock); 

user 'Отм.' = DATA BOOLEAN (LegalEntity, DepartmentStore);
user(LegalEntity legalEntity, DepartmentStore stock) += user(legalEntity, stock);

nameLegalEntity 'Компания' (DepartmentStore departmentStore) = name(legalEntity(departmentStore));

dataPhone 'Телефон' = DATA VARSTRING[100] (DepartmentStore); 
phone 'Телефон магазина' (DepartmentStore d) = OVERRIDE phone(store(d)), dataPhone(d);
phone(DepartmentStore st) += phone(st);

primaryDepartmentStore 'Основной отдел' (store) =
    GROUP MIN DepartmentStore departmentStore BY store(departmentStore);

countDepartmentStore 'Кол-во отделов' (store) = GROUP SUM 1 IF DepartmentStore dep IS DepartmentStore BY store(dep);

address 'Адрес' (DepartmentStore departmentStore) = address(store(departmentStore));
address (DepartmentStore departmentStore) += address(departmentStore);

email 'E-mail' (DepartmentStore ds) = email(store(ds)) MINCHARWIDTH 30 PREFCHARWIDTH 50;
email(DepartmentStore stock) += email(stock);

latitude 'Координата X' (DepartmentStore departmentStore) = latitude(store(departmentStore));
longitude 'Координата Y' (DepartmentStore departmentStore) = longitude(store(departmentStore));

latitude (DepartmentStore departmentStore) += latitude(departmentStore);
longitude (DepartmentStore departmentStore) += longitude(departmentStore);

region(DepartmentStore stock) += region(store(stock));

@defineHistorizable(tradingSquare, , 'Торговая площадь', NUMERIC[10,2], departmentStore, nameDepartmentStore, public);

tradingSquare (store, date) = GROUP SUM tradingSquare(DepartmentStore departmentStore, DATE date) BY store(departmentStore), date;
tradingSquare 'Торговая площадь' (Store store) = tradingSquare(store, currentDate());

cashAccount 'Счет' = DATA Cash.Account (DepartmentStore);
numberCashAccount 'Номер счета' = number(cashAccount(DepartmentStore departmentStore));

CONSTRAINT legalEntity(DepartmentStore departmentStore) != legalEntity(cashAccount(departmentStore))
    CHECKED BY cashAccount[DepartmentStore] MESSAGE 'Организация отдела магазина должна совпадать с организацией счета';

in (ChainStores chainStores, StoreType storeType, Store store, DepartmentStore department) =
    (store(department) == store AND storeType IS StoreType AND chainStores IS ChainStores) OR
    (storeType(department) == storeType AND chainStores IS ChainStores AND NOT store) OR
    (chainStores(department) == chainStores AND NOT store AND NOT storeType) OR
    (department IS DepartmentStore AND NOT store AND NOT storeType AND NOT chainStores);

in (ChainStores chainStores, StoreType storeType, DepartmentStore departmentStore)= in (chainStores, storeType, store(departmentStore));     

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (DepartmentStore);
inactive(DepartmentStore st) += inactive(st);

in 'Сотрудник магазина' (store, employee) = GROUP SUM 1 IF in(DepartmentStore d, Employee employee)
    BY store(d), employee;
    
CONSTRAINT chairman(Store store) AND NOT in(store, chairman(store))
    CHECKED BY chairman[Store] MESSAGE 'Работник должен быть сотрудником магазина';

// -------------------------------------- Формы отдела магазинов ------------------------------------------ //

FORM departmentStore 'Отдел магазина'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) nameDep=name, fullName, phone, nameStore, nameStockGroup, tradingSquare,
                  numberCashAccount SHOWIF isCompany(d), quantityDaysClose SHOWIF isCompany(d), autoCloseOrders SHOWIF isCompany(d),
                  id SHOWIF showIDs(), inactive

    OBJECTS e = Employee GRID
    PROPERTIES(e) SHOWIF isCompany(d) READONLY firstName, lastName
    PROPERTIES(e) SHOWIF isCompany(d) NEWEDIT, EDIT, deletee = DELETE GRID
    FILTERS in(d, e)

    EDIT DepartmentStore OBJECT d
;

DESIGN departmentStore {
    main {
        preferredSize = (1024, 768);
        NEW header {
            type = CONTAINERH;
            NEW headerLeft {
                NEW headerMainParams {
                    caption = 'Основные параметры';
                    type = COLUMNS;
                    columns = 3;
                    MOVE PROPERTY(nameDep);
                    MOVE PROPERTY(fullName(d));
                    MOVE PROPERTY(phone(d));
                    MOVE PROPERTY(id(d));
                    MOVE PROPERTY(nameStore(d));
                    MOVE PROPERTY(nameStockGroup(d));
                    MOVE PROPERTY(tradingSquare(d));
                    MOVE PROPERTY(inactive(d)); 
                }
                NEW headerExtraParams {
                    type = COLUMNS;
                    columns = 2;
                    caption = 'Дополнительные параметры';
                    MOVE PROPERTY(numberCashAccount(d));
                    MOVE PROPERTY(quantityDaysClose(d));
                    MOVE PROPERTY(autoCloseOrders(d));
                }
            }
            NEW headerRight;
        }
        MOVE e.box;
        MOVE functions.box;
    }
}

edit 'Редактировать' = ACTION EDITFORM DepartmentStore;
edit(DepartmentStore stock) += { edit(stock); }

editSession 'Редактировать' = ACTION EDITFORM SESSION DepartmentStore;
editSession(DepartmentStore stock) += { editSession(stock); }

FORM departmentStores 'Отделы магазинов'
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType, s=Store
    PROPERTIES READONLY VALUE(a), name(t), name(st), name(s)
    FILTERS stringEqualsAll(a), in (t, st), in(st, s)
    FILTERGROUP activeStore FILTER 'Активный' active(s) 'ctrl F10' DEFAULT

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY id SHOWIF showIDs(), depName = name, fullName
    FILTERS in(t, st, s, d)
    ORDER BY depName
    FILTERGROUP activeDS FILTER 'Активный' active(d) 'F10' DEFAULT

    LIST DepartmentStore OBJECT d
;

DESIGN departmentStores {
    main {
        preferredSize = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            MOVE treeStore.tree.box {
                caption = 'Склады';
            }

            MOVE d.box {
                fill = 3;
                d.grid {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE functions.box;
    }
}
@extendFormFilterStockAccess(d, departmentStores, company);

change(Store store) = {
    INPUT s = VARSTRING[100] DO {
        name(store) <- s;
        IF s THEN {
            FOR store(DepartmentStore dep) == store AND name(store) DO {
                name(dep) <- replace(name(dep), name(store), s);
            }
        }
    }
}


FORM store 'Магазин'
    OBJECTS s=Store PANEL
    PROPERTIES(s) name ON CHANGE change(s), address, email, phone, nameStoreType, tradingSquare READONLY, 
                  nameChairman, openDate, nameLegalEntity, numberBankAccount SHOWIF isCompany(s),
                  nameRegion, latitude, longitude, showOnMap, calculateCoordinates, id SHOWIF showIDs(), inactive

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY name, id SHOWIF showIDs(), nameStockGroup, tradingSquare
    PROPERTIES(d)          NESTEDSESSION NEW, EDIT, deleteD=DELETE GRID
    FILTERS in(s, d)

    EDIT Store OBJECT s
;
DESIGN store {
    NEW header {
        NEW headerMainParams {
            caption = 'Основные параметры';
            type = CONTAINERH;
            MOVE PROPERTY(name(s));
            MOVE PROPERTY(id(s));
            MOVE PROPERTY(nameStoreType(s));
            MOVE PROPERTY(nameLegalEntity(s));
            MOVE PROPERTY(inactive(s));
        }
        NEW headerLocationParams {
            caption = 'Координаты';
            NEW firstRow {
                type = CONTAINERH;
                MOVE PROPERTY(address(s));
                MOVE PROPERTY(email(s));
                MOVE PROPERTY(phone(s));            
            }
            NEW secondRow{
                type = CONTAINERH;
                MOVE PROPERTY(latitude(s));
                MOVE PROPERTY(longitude(s));
                MOVE PROPERTY(showOnMap(s));
                MOVE PROPERTY(calculateCoordinates(s));            
            }
        }
        NEW headerPriceParams {
            caption = 'Цены';
            type = COLUMNS;
            columns = 4;
        }
        NEW headerExtraParams {
            caption = 'Дополнительные параметры';
            type = COLUMNS;
            columns = 4;
            MOVE PROPERTY(nameChairman(s));            
            MOVE PROPERTY(numberBankAccount(s));
            MOVE PROPERTY(nameRegion(s));
            MOVE PROPERTY(tradingSquare(s));
            MOVE PROPERTY(openDate(s));
        }
    }

    MOVE d.box;
    MOVE functions.box;
}

// -------------------------------------- Формы магазинов ------------------------------------------ //

FORM stores 'Магазины'
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY VALUE(a), name(t), name(st)

    FILTERS stringEqualsAll(a)
    FILTERS in (t, st)
    FILTERGROUP active
        FILTER 'Активные' active(st) DEFAULT

    PROPERTIES(t) NEWSESSION addT=NEW , editT=EDIT , deletet=DELETE 

    OBJECTS s=Store
    PROPERTIES(s) READONLYIF isReadonly() name, id SHOWIF showIDs(), address, email, nameStoreType, nameLegalEntity, nameRegion
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE 
    FILTERS in(t, st, s)
    FILTERGROUP group1
        FILTER 'Активные' active(s) 'F10' DEFAULT

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY name, id SHOWIF showIDs()
    FILTERS in(s, d)
    LIST Store OBJECT s
;

DESIGN stores {

    NEW pane {
        fill = 1;
        type = SPLITH;

        MOVE treeStore.tree.box {caption = 'Группы магазинов';}

        NEW firstCase {
            fill = 3;
            type = SPLITV;

            MOVE s.box {
                fill = 2;
            }
            NEW tabbedContainer {
                type = TABBED;
                fill = 1;
                MOVE d.box;                
            }
        }
    }

    MOVE functions.box;
}
@extendFormEditable(stores);

@extendFormFilterStockGroupAccess(st, stores, company);

NAVIGATOR {
    retailMasterData {
        ADD stores;
    }
}

// -------------------------------------- Макросы ----------------------------------------------- //

META defineDocumentHeaderDepartmentStore (object)
    @defineDocumentHeaderStock(object, departmentStore, 'Отдел магазина');
END

META defineDocumentDetailDepartmentStoreCustom (object, detail)
   @defineDocumentDetailStock (object, detail, departmentStore, departmentStore, 'Отдел магазина');
   store (###detail detail) = store(departmentStore(detail));
   nameStore 'Магазин' (###detail detail) = name(store(detail));
END
META defineDocumentDetailDepartmentStore (object)
    @defineDocumentDetailDepartmentStoreCustom (object, object##Detail);
END

META defineDocumentDepartmentStore (object)
    @defineDocumentHeaderDepartmentStore(object);
    @defineDocumentDetailDepartmentStore(object);
END

addStore 'Добавить магазин'(LegalEntity legalEntity) = {
	NESTEDSESSION{
	    NEW st = Store {
	        ASSIGN legalEntity(st) <- legalEntity;
	        SHOW store OBJECTS s = st MANAGESESSION DOCKED;
	    }
	}
}

EXTEND FORM legalEntity
    PROPERTIES addStore(l) TODRAW st TOOLBAR
;

