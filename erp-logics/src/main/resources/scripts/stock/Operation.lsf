MODULE Operation;

REQUIRE Utils, Historizable;

CLASS ABSTRACT Operation 'Операция';
TABLE operation(Operation);

nameOperation 'Наименование' = ABSTRACT VARISTRING[100](Operation) PREFCHARWIDTH 40;

idOperation 'ID' = ABSTRACT VARISTRING[100](Operation);

FORM operationDialogOperations 'Операции'
    OBJECTS o = Operation.Operation
    PROPERTIES(o) READONLY Operation.nameOperation, Operation.idOperation
    PROPERTIES(o) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    DIALOG Operation.Operation OBJECT o
;

// -------------------------------------- Макросы по созданию операций ---------------------------------- //

META defineOperation(postfix)
    @defineOperation(postfix, );
END
META defineOperation(postfix, navigator)

    CLASS Operation 'Операция' : Operation.Operation;
    TABLE operation(Operation);

    @defineCreated(Operation);
    
    nameOperation 'Наименование' = DATA VARISTRING[100](Operation);
    Operation.nameOperation(operation) += nameOperation(operation);

    idOperation 'ID' = DATA VARISTRING[100](Operation);
    Operation.idOperation(operation) += idOperation(operation);
    operationId (id) = GROUP MAX operation BY idOperation(operation);

    FORM operation 'Операция'##postfix
        OBJECTS o = Operation FIXED PANEL
        PROPERTIES(o) nameOperation, idOperation
        PROPERTIES(o) READONLY createdNameUserOperation, createdTimeOperation, createdHostnameComputerOperation

        EDIT Operation OBJECT o
    ;

    DESIGN operation {
        main {
            preferredSize = (1024, 768);
            NEW topContainer{
                fill = 1;
                type = CONTAINERV;
                NEW headContainer {
                    type = CONTAINERV;
                    NEW propertyContainer{
                        type = CONTAINERH;
                        caption = 'Параметры';
                        ADD PROPERTY(nameOperation(o));
                        ADD PROPERTY(idOperation(o));
                    }
                    ADD o.created;
                }
                NEW tabContainer {
                    fill = 1;
                    type = TABBED;
                }
            }
            ADD functions.box;
        }
    }

    FORM operations 'Операции'##navigator
        OBJECTS o = Operation
        PROPERTIES(o) READONLY nameOperation, idOperation, createdNameUserOperation, createdTimeOperation, createdHostnameComputerOperation
        PROPERTIES(o) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR
    ;

    DESIGN operations {
        caption = 'Операции'##postfix;
    }

    FORM dialogOperations 'Операции' 
        OBJECTS o = Operation
        PROPERTIES(o) READONLY nameOperation, idOperation, createdNameUserOperation, createdTimeOperation, createdHostnameComputerOperation
        PROPERTIES(o) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

        DIALOG Operation OBJECT o
    ;
    
    DESIGN dialogOperations {
        caption = 'Операции'##postfix;
    }

END

// -------------------------------------- Макросы по объявлению операций в документах ---------------------------------- //
META defineDocumentOperationAbstractHeaderPrefix(object, prefix, NSR, caption)
    prefix###operation###object = ABSTRACT NSR.Operation (###object) PERSISTENT;
    name###prefix###operation###object 'Операция'###caption = NSR.nameOperation(prefix###operation###object(object));
    id###prefix###operation###object 'ID операции'###caption = NSR.idOperation(prefix###operation###object(object));
END
META defineDocumentOperationHeaderPrefix(object, prefix, NSR, caption)
    prefix###operation###object = DATA NSR.Operation (###object);
    name###prefix###operation###object 'Операция'###caption = NSR.nameOperation(prefix###operation###object(object));
    id###prefix###operation###object 'ID операции'###caption = NSR.idOperation(prefix###operation###object(object));
END
META defineDocumentOperationInterfaceHeaderPrefix(object, prefix, NSR, caption)
    @defineDocumentOperationAbstractHeaderPrefix(object, prefix, NSR, caption);
    @defineDocumentOperationHeaderPrefix(user###object, prefix, NSR, caption);
    prefix###operation###object(object) += prefix###operation###user###object(object);
END
META defineDocumentOperationDetailPrefix(object, detail, prefix, NSR, caption)
    prefix###operation###detail (idetail) = prefix###operation###object(object###detail(idetail));
    name###prefix###operation###detail 'Операция'###caption (idetail) = NSR.nameOperation(prefix###operation###detail(idetail));
    id###prefix###operation###detail 'ID операции'###caption (idetail) = NSR.idOperation(prefix###operation###detail(idetail));
END
META defineDocumentOperationDetailPrefix(object, prefix, NSR, caption)
    @defineDocumentOperationDetailPrefix(object, object##Detail, prefix, NSR, caption);
END
META defineDocumentInterfaceOperationPrefix (object, prefix, NSR, caption)
    @defineDocumentOperationInterfaceHeaderPrefix(object, prefix, NSR, caption);
    @defineDocumentOperationDetailPrefix(object, prefix, NSR, caption);
    @defineDocumentOperationDetailPrefix(user###object, prefix, NSR, caption);
END
META defineDocumentInterfaceOperation (object, NSR, caption)
    @defineDocumentInterfaceOperationPrefix(object, , NSR, caption);
END

META extendFormOperationPrefix(object, char, afterProp, prefix, containerProp)

    EXTEND FORM user###object
        PROPERTIES(char) name###prefix###operationUser###object
    ;

    DESIGN user###object{
        containerProp{
            ADD PROPERTY (name###prefix###operationUser###object) AFTER PROPERTY(afterProp###object);
        }
    }
END


META defineDocumentOperation(object, char, befProp, befProperty)

    operation###object = ABSTRACT Operation (###object) PERSISTENT;
    name###operation###object 'Операция' = nameOperation(operation###object(object));
    id###operation###object 'ID операции' = idOperation(operation###object(object));
    operationUser###object = DATA Operation (User###object);
    name###operationUser###object 'Операция' = nameOperation(operationUser###object(user###object));
    id###operationUser###object 'ID операции' = idOperation(operationUser###object(user###object));
    operation###object(object) += operationUser###object(object);

    operation###object##Detail 'Операция' (object##Detail) = operation###object(object###object##Detail(object##Detail));
    operationUser###object##Detail 'Операция' (user###object##Detail) = operationUser###object(user###object##User###object##Detail(user###object##Detail));

    EXTEND FORM user###object
        PROPERTIES(char) name###operationUser###object
    ;

    DESIGN user###object{
        char.documentPrm{
            ADD PROPERTY(name###operationUser###object) BEFORE PROPERTY(befProp###object);
        }
        PROPERTY(name###operationUser###object) {minimumCharWidth = 30; preferredCharWidth = 40;} 
    }
    EXTEND FORM object##s
        PROPERTIES(char) READONLYIF isReadonly() name###operation###object BEFORE befProperty###object(char)
    ;
END

META defineDocumentOperation(object, char)
    @defineDocumentOperation(object, char, nameCurrencyUser, nameCurrency);
END

META defineDocumentOperationContainer(object, char, afProp, befProperty, contProp)

    operation###object = ABSTRACT Operation (###object) PERSISTENT;
    name###operation###object 'Операция' = nameOperation(operation###object(object));
    id###operation###object 'ID операции' = idOperation(operation###object(object));
    operationUser###object = DATA Operation (User###object);
    name###operationUser###object 'Операция' = nameOperation(operationUser###object(user###object));
    id###operationUser###object 'ID операции' = idOperation(operationUser###object(user###object));
    operation###object(object) += operationUser###object(object);

    operation###object##Detail 'Операция' (object##Detail) = operation###object(object###object##Detail(object##Detail));
    operationUser###object##Detail 'Операция' (user###object##Detail) = operationUser###object(user###object##User###object##Detail(user###object##Detail));

    EXTEND FORM user###object
        PROPERTIES(char) name###operationUser###object
    ;

    DESIGN user###object{
        contProp {
            ADD PROPERTY(name###operationUser###object(char));
        }
        PROPERTY(name###operationUser###object(char)) {minimumCharWidth = 30; preferredCharWidth = 40;} 
    }
    EXTEND FORM object##s
        PROPERTIES(char) READONLYIF isReadonly() name###operation###object BEFORE befProperty###object(char)
    ;
END

META defineDocumentOperationContainer(object, char)
    @defineDocumentOperationContainer(object, char, isPosted###object, nameCurrency, first);
END
// -------------------------------------- Организации ---------------------------------- //

META defineOperationLegalEntity(prop, propPostfix, object, tabcaption)

    // Отметка для групп
    dataIn###prop###propPostfix##GroupOperation 'Отм.' = DATA BOOLEAN (LegalEntityGroup, Operation);

    levelParent###prop###propPostfix##OperationLegalEntityGroup (operation, legalEntityGroup) =
        GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF dataIn###prop###propPostfix##GroupOperation(parent, operation)
              BY operation, legalEntityGroup PERSISTENT;
    nearestParent###prop###propPostfix##GroupLegalEntityGroup (operation, legalEntityGroup) = legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParent###prop###propPostfix##OperationLegalEntityGroup(operation, legalEntityGroup));
    nearestIn###prop###propPostfix##GroupOperation (legalEntityGroup, operation) =
        dataIn###prop###propPostfix##GroupOperation(nearestParent###prop###propPostfix##GroupLegalEntityGroup(operation, legalEntityGroup), operation) PERSISTENT;

    in###prop###propPostfix##GroupOperation 'Отм' (legalEntityGroup, operation) =
        OVERRIDE nearestIn###prop###propPostfix##GroupOperation(legalEntityGroup, operation), dataIn###prop###propPostfix##GroupOperation(legalEntityGroup, operation);

    // Отметка для организаций
    dataIn###prop###propPostfix##Operation 'Отм.' = DATA BOOLEAN (LegalEntity, Operation);
    in###prop###propPostfix##Operation 'Отм' (legalEntity, operation) =
        OVERRIDE nearestIn###prop###propPostfix##GroupOperation(legalEntityGroupLegalEntity(legalEntity), operation), dataIn###prop###propPostfix##Operation(legalEntity, operation);
        
    quantityChildWith###in###prop###propPostfix##GroupOperation (group, operation) = GROUP SUM 1 IF dataIn###prop###propPostfix##GroupOperation(childGroup, operation) AND isParentLegalEntityGroupLegalEntityGroup(childGroup, group) BY group, operation PERSISTENT;
    quantityParentWith###in###prop###propPostfix##GroupOperation (group, operation) = GROUP SUM 1 IF dataIn###prop###propPostfix##GroupOperation(parentGroup, operation) AND isParentLegalEntityGroupLegalEntityGroup(group, parentGroup) BY group, operation PERSISTENT;          
        
    background###in###prop###propPostfix##GroupOperation 'Цвет' (group, operation) = CASE
        WHEN dataIn###prop###propPostfix##GroupOperation(group, operation) THEN RGB(0,0,0)
        WHEN nearestIn###prop###propPostfix##GroupOperation(group, operation) THEN RGB(230,248,250) 
        WHEN quantityChildWith###in###prop###propPostfix##GroupOperation(group, operation) != descendantNumberLegalEntityGroup(group) AND NOT quantityParentWith###in###prop###propPostfix##GroupOperation (group, operation) THEN RGB(203,203,203);    
        
    background###in###prop###propPostfix##Operation'Цвет' (legalEntity, operation) = IF dataIn###prop###propPostfix##Operation(legalEntity, operation) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) IF nearestIn###prop###propPostfix##GroupOperation(legalEntityGroupLegalEntity(legalEntity), operation);   

    EXTEND FORM operation
        TREE prop###propPostfix###groupTree object##g = LegalEntityGroup PARENT parentLegalEntityGroup
        PROPERTIES READONLY object##gTreeName = nameLegalEntityGroup(object##g)
        PROPERTIES in###prop###propPostfix###GroupOperation(object##g, o) BACKGROUND background###in###prop###propPostfix##GroupOperation(object##g, o)

        OBJECTS object = LegalEntity
        PROPERTIES(object, o) in###prop###propPostfix##Operation BACKGROUND background###in###prop###propPostfix##Operation(object, o)
        PROPERTIES(object) READONLY nameLegalEntity, fullNameLegalEntity, shortNameOwnershipLegalEntity, nameLegalEntityGroupLegalEntity,
                               addressLegalEntity, phoneLegalEntity,
                               isSupplierLegalEntity, isCompanyLegalEntity, isCustomerLegalEntity
        FILTERS isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(object), object##g) OR
                object IS LegalEntity AND NOT object##g IS LegalEntityGroup OR
                (object IS LegalEntity AND object##g IS LegalEntityGroup AND NOT legalEntityGroupLegalEntity(object))
        FILTERGROUP object##filters
                FILTER 'Показывать отмеченные' in###prop###propPostfix##Operation(object, o) 'F10'
        FILTERGROUP object##inactiveLegalEntity FILTER 'Активная' activeLegalEntity(object) 'shift F10' DEFAULT        
    ;

    DESIGN operation {
        tabContainer {
            NEW prop###propPostfix###Container{
                type = SPLITH;
                caption = tabcaption;
                ADD prop###propPostfix###groupTree.tree.box;
                ADD object.box {
                    fill = 3;
                }
            }
        }
    }                 
END

META defineDocumentOperationLegalEntity(object, prop, caption)
    CONSTRAINT operation###object(object) AND prop###object(object) 
               AND NOT in###prop##Operation(prop###object(object), operation###object(object))
        CHECKED BY prop###object
        MESSAGE caption##' должен совпадать с отмеченными в операции';
END

META defineCountLegalEntityOperation(prop, filter)
    // Подсчет органиизации по-умолчанию            
    count###prop###operation (operation) = GROUP SUM 1 IF in###prop##Operation(legalEntity,operation) AND is###filter###legalEntity(legalEntity)  BY operation;
    default###prop###operation (operation) = GROUP MIN legalEntity IF in###prop##Operation(legalEntity,operation) AND is###filter###legalEntity(legalEntity) BY operation;   
END

META deriveDocumentOperationLegalEntity(objectClass, prop, form)
    WHEN SESSION FORMS form CHANGED(operation###objectClass(o)) NOINLINE DO {
        prop###objectClass(o) <- default###prop###operation(operation###objectClass(o))
            WHERE count###prop###operation(operation###objectClass(o)) == 1;
    }        
END

//Склады

META defineOperationStock(prop, object, tabcaption)

    // Отметка для групп
    all###prop##StocksOperation 'Отм' = DATA BOOLEAN (Operation);

    dataIn###prop##StockGroupOperation 'Отм.' = DATA BOOLEAN (StockGroup, Operation);

    levelParent###prop##StockOperationStockGroup (operation, stockGroup) =
        GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataIn###prop##StockGroupOperation(parent, operation)
              BY operation, stockGroup PERSISTENT;
    nearestParent###prop##StockGroupStockGroup (operation, stockGroup) = stockGroupStockGroupLevel(stockGroup, levelParent###prop##StockOperationStockGroup(operation, stockGroup));
    nearestIn###prop##StockGroupOperation (stockGroup, operation) =
        dataIn###prop##StockGroupOperation(nearestParent###prop##StockGroupStockGroup(operation, stockGroup), operation) PERSISTENT;

    in###prop##StockGroupOperation 'Отм' (stockGroup, operation) =
        OVERRIDE all###prop##StocksOperation(operation) AND stockGroup IS StockGroup,
                 nearestIn###prop##StockGroupOperation(stockGroup, operation),
                 dataIn###prop##StockGroupOperation(stockGroup, operation);

    // Отметка для складов
    dataIn###prop##StockOperation 'Отм.' = DATA BOOLEAN (Stock, Operation);
    in###prop##StockOperation 'Отм' (stock, operation) =
        OVERRIDE in###prop##StockGroupOperation(stockGroupStock(stock), operation),
                 dataIn###prop##StockOperation(stock, operation);
                 
    countDataIn###prop##StockGroupsOperation = GROUP SUM 1 IF  dataIn###prop##StockGroupOperation(stockGroup, operation) BY operation;            
                                  
    background###all###prop##StocksOperation 'Цвет' (operation) = IF all###prop##StocksOperation(operation) THEN RGB(0,0,0)
        ELSE RGB(203,203,203) IF countDataIn###prop##StockGroupsOperation(operation);      
     
    quantityChildWith###in###prop##StockGroupOperation (group, operation) = GROUP SUM 1 IF dataIn###prop##StockGroupOperation(childGroup, operation) AND isParentStockGroupStockGroup(childGroup, group) BY group, operation PERSISTENT;
    quantityParentWith###in###prop##StockGroupOperation (group, operation) = GROUP SUM 1 IF dataIn###prop##StockGroupOperation(parentGroup, operation) AND isParentStockGroupStockGroup(group, parentGroup) BY group, operation PERSISTENT;          
          
    background###in###prop##StockGroupOperation 'Цвет' (group, operation) = CASE
        WHEN dataIn###prop##StockGroupOperation(group, operation) THEN RGB(0,0,0)
        WHEN nearestIn###prop##StockGroupOperation(group, operation) THEN RGB(230,248,250) 
        WHEN quantityChildWith###in###prop##StockGroupOperation(group, operation) != descendantNumberStockGroup(group) AND NOT quantityParentWith###in###prop##StockGroupOperation(group, operation) THEN RGB(203,203,203);           
        
        
    background###in###prop##StockOperation 'Цвет' (stock, operation) = IF dataIn###prop##StockOperation(stock, operation) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in###prop##StockGroupOperation(stockGroupStock(stock), operation);                           
                    

    EXTEND FORM operation
        TREE prop###stockGroupTree object##a=STRING[3], object##g = StockGroup PARENT parentStockGroup
        PROPERTIES READONLY OBJVALUE(object##a), object##gTreeName = nameStockGroup(object##g)
        PROPERTIES(o) all###prop##StocksOperation TODRAW object##a FORCE GRID BACKGROUND background###all###prop##StocksOperation(o)
        PROPERTIES in###prop###StockGroupOperation(object##g, o) BACKGROUND background###in###prop##StockGroupOperation(object##g, o)
        FILTERS stringEqualsAll(object##a)

        OBJECTS object = Stock
        PROPERTIES(object, o) in###prop##StockOperation BACKGROUND background###in###prop##StockOperation(object, o)
        PROPERTIES(object) READONLY nameStock###object = nameStock, nameStockGroupStock
        ORDER BY nameStock###object
        FILTERS object IS Stock AND NOT object##g IS StockGroup OR
                isParentStockGroupStock(object##g, object)
        FILTERGROUP object##filters3
                FILTER 'Показывать отмеченные' in###prop##StockOperation(object, o) 'F10'
        FILTERGROUP object##inactiveStock FILTER 'Активный' activeStock(object) 'ctrl F10' DEFAULT                    
    ;

    DESIGN operation {
        tabContainer {
            NEW prop###stockContainer{
                type = SPLITH;
                caption = tabcaption;
                ADD prop###stockGroupTree.tree.box;
                ADD object.box {
                    fill = 3;
                }
            }
        }
    }    
END

META defineDocumentOperationStock(object, prop, caption)
    CONSTRAINT operation###object(object) AND prop###stock###object(object) 
               AND NOT in###prop##Stock##Operation(prop###stock###object(object), operation###object(object))
        CHECKED BY prop###stock###object
        MESSAGE caption##' должен совпадать с отмеченными в операции';
END

META defineCountStockOperation(prop, filter, filterEntity)
    // Подсчет складов по-умолчанию            
    count###prop###stock###operation (operation) = GROUP SUM 1 IF in###prop###stock##Operation(stock,operation)
                                                        AND is###filter###stock(stock) 
                                                        AND in###prop##Operation(legalEntityStock(stock),operation)
                                                        AND is###filterEntity###legalEntity(legalEntityStock(stock))
                                                            BY operation;
    default###prop###stock###operation (operation) = GROUP MIN stock IF in###prop###stock##Operation(stock,operation) 
                                                        AND is###filter###stock(stock) 
                                                        AND in###prop##Operation(legalEntityStock(stock),operation)
                                                        AND is###filterEntity###legalEntity(legalEntityStock(stock))
                                                            BY operation;        
END

META deriveDocumentOperationStock(objectClass, prop, form)
    WHEN SESSION FORMS form CHANGED(operation###objectClass(o)) NOINLINE DO {
        IF count###prop###stock###operation(operation###objectClass(o)) == 1 THEN 
            prop###stock###objectClass(o) <- default###prop###stock###operation(operation###objectClass(o));
    }
END

//Валюта

META defineOperationCurrency(dumb)
    TABLE currencyOperation(Currency, Operation);
    inCurrencyOperation 'Отм.' = DATA BOOLEAN (Currency, Operation);

    EXTEND FORM operation
        OBJECTS c = Currency
        PROPERTIES(c, o) inCurrencyOperation
        PROPERTIES(c) READONLY nameCurrency
        FILTERGROUP filters4
            FILTER 'Показывать отмеченные' inCurrencyOperation(c, o) 'F11'
    ;

    DESIGN operation{
        tabContainer {
            NEW currencyContainer{
                caption = 'Валюта';
                ADD c.box;
            }
        }
    }
END

//Тип классификатора

META defineOperationGroupType(dumb)
    groupTypeOperation = DATA GroupType (Operation);
    nameGroupTypeOperation 'Тип классификатора' (operation) = nameGroupType(groupTypeOperation(operation));

    EXTEND FORM operation
        PROPERTIES(o) nameGroupTypeOperation
    ;

    DESIGN operation{
        propertyContainer{
            ADD PROPERTY(nameGroupTypeOperation(o));
        }
    }
END

META defineOperationRole(dumb)

    allRolesOperation 'Для всех ролей' = DATA BOOLEAN (Operation);

    TABLE userRoleOperation (UserRole, Operation);
    dataInUserRoleOperation 'Отм.' = DATA BOOLEAN (UserRole, Operation);

    inUserRoleOperation 'Отм' (role, operation) =
        OVERRIDE allRolesOperation(operation) AND role IS UserRole, dataInUserRoleOperation(role, operation);

    inUserOperation (user, operation) = allRolesOperation(operation) AND user IS User OR 
                                        dataInUserRoleOperation(mainRoleUser(user), operation);

    countOperationsUser (user) = GROUP SUM 1 IF inUserOperation(user, operation) BY user;
    defaultOperationUser 'Операция по умолчанию' (user) = GROUP MIN operation IF inUserOperation(user, operation) BY user;


    EXTEND FORM operation
        PROPERTIES(o) allRolesOperation

        OBJECTS r = UserRole
        PROPERTIES(r) READONLY nameUserRole
        PROPERTIES(r, o) inUserRoleOperation

        FILTERGROUP filtersRole
                FILTER 'Показывать отмеченные' inUserRoleOperation(r, o) 'F8'
    ;

    DESIGN operation {
        tabContainer {
            NEW roleContainer{
                type = CONTAINERV;
                caption = 'Роли';
                NEW roleContainer1 {
                    ADD PROPERTY(allRolesOperation(o));
                    caption = 'Для всех';
                }
                ADD r.box;
            }
        }
    }

END

META extendFormFilterRole(concrete, form)
    EXTEND FORM form FILTERS inUserOperation(currentUser(), concrete);
END

META defineDocumentOperationRole(object, objectClass)
    operation###object(o) <- defaultOperationUser(currentUser()) IF countOperationsUser(currentUser()) == 1
        WHEN SET(o IS objectClass);
END
META defineDocumentOperationRole(object)
    @defineDocumentOperationRole(object, ###object);
END
META defineDocumentOperationRolePrefix(object, objectClass, prefix)
    prefix###operation###object(o) <- defaultOperationUser(currentUser()) IF countOperationsUser(currentUser()) == 1
        WHEN SET(o IS objectClass);
END
META defineDocumentOperationRolePrefix(object, prefix)
    @defineDocumentOperationRolePrefix(object, ###object, prefix);
END

META defineDocumentOperationRoleOver(object, objectClass, prefix)
    operation###object(o) <- (OVERRIDE default###prefix###operation(), defaultOperationUser(currentUser()) IF countOperationsUser(currentUser()) == 1)    
        WHEN SET(o IS objectClass);
END
META defineDocumentOperationRoleOver(object, prefix)
    @defineDocumentOperationRoleOver(object, ###object, prefix);
END


META defineOperationProperty(property, caption, container)
    property###operation caption = DATA BOOLEAN (Operation);

    EXTEND FORM operation
        PROPERTIES(o) property###operation
    ;
    DESIGN operation {
        container {
            ADD PROPERTY(property###operation(o));
        }
    }
END

META deriveDocumentOperationProperty(objectClass, property)
    property###objectClass (o) <- property###operation(operation###objectClass(o))
        WHEN CHANGED(operation###objectClass(o));
END


META defineOperationFilterProperty(object, objectClass, concrete, form, container, befProp)
    
    filter###object###operation  = DATA LOCAL Operation ();
    nameFilter###object###operation 'Операция' = nameOperation(filter###object###operation()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterOperation###object (concrete) = operation###object(concrete) == filter###object###operation() OR (concrete IS objectClass AND NOT filter###object###operation());   


    EXTEND FORM form
        PROPERTIES() nameFilter###object###operation
        
        FILTERS filterOperation###object(concrete)
    ;
    DESIGN form {
        container {
            ADD PROPERTY(nameFilter###object###operation()) BEFORE PROPERTY(befProp());
        }
    }
END

META defineOperationFilterProperty(object, concrete, form, befProp)
    @defineOperationFilterProperty(object, ###object, concrete, form, topFilters, befProp);
END


META defineOperationChangesDocumentPrefix(object, objectClass, concreteClass, property, createdUserProp, prefix)
    
    prefix###property###object (o) = property###operation(prefix###operation###object(o));
    
    showEditDeleteUser###object (o) = (prefix###property###object (o)  AND (currentUser() == createdUserProp###concreteClass(o))) OR 
                                (o IS objectClass AND NOT prefix###property###object (o));    
       
END

META defineOperationChangesDocument(object, concreteClass, property, createdUserProp)    
    @defineOperationChangesDocumentPrefix(object, ###object, concreteClass, property, createdUserProp, );      
END

