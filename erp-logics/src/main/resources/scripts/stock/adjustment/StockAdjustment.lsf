MODULE StockAdjustment;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        StockSkuDocument,
        Numerator,
        Document,
        Currency,
        PriceListLedger,
        Employee,
        StockDocument,
        StockMovement,
        StockAdjustmentOperation,
        Barcode;

NAMESPACE Stock;

CLASS ABSTRACT Adjustment 'Изменение остатков' : Document;
CLASS ABSTRACT AdjustmentDetail 'Строка изменения остатков' : DocumentDetail;

CLASS UserAdjustment 'Изменение остатков (польз.)' : Adjustment;
CLASS UserAdjustmentDetail 'Строка изменения остатков (польз.)' : AdjustmentDetail;

@defineDocumentInterface(adjustment);
@deriveDocumentHeaderTimePrefix(UserAdjustment, );

@defineDocumentInterfaceNumber(adjustment);
@defineNumeratedDefault(UserAdjustment, 'Изменения остатков', 'ИО');

@defineDocumentInterfaceDataStock(adjustment, stock, 'Склад');
@defineDocumentDialogStocks(userAdjustment, stock, company, , );

@defineDocumentInterfacePosted(adjustment);
@defineDocumentInterfaceClosed(adjustment);
@defineDocumentClosedConstraint(UserAdjustment);

@defineDocumentInterfaceDescription(adjustment, 'Изменение остатков');

@defineDocumentInterfaceCurrency(adjustment);
@deriveDocumentCurrency(userAdjustment, stock);

@defineDocumentInterfaceDetailSku(adjustment, sku);
@showDocumentInterfaceDetailBatch(adjustment);
@defineDocumentInterfaceDetailBatch(adjustment, batch);
@defineDocumentInterfaceDetailQuantity(adjustment);
@defineDocumentInterfaceDetailPrice(adjustment);

id = DATA VARSTRING[100] (UserAdjustmentDetail);
userAdjustmentDetail (id, userAdjustment) = GROUP AGGR UserAdjustmentDetail userAdjustmentDetail BY id(userAdjustmentDetail), userAdjustment(userAdjustmentDetail) WHERE userAdjustmentDetail IS UserAdjustmentDetail;

WHEN SESSION (CHANGED(sku(UserAdjustmentDetail detail)) OR CHANGED(batch(detail)) OR CHANGED(stock(detail)) OR CHANGED (dateTime(detail))) AND batch(detail) DO {
    price (detail)  <- prevPriceB(SystemLedgerPriceListType.accountPriceListType, batch(detail), stock(detail), dateTime(detail));
}

WHEN SESSION (CHANGED(sku(UserAdjustmentDetail detail)) OR CHANGED(batch(detail)) OR CHANGED(stock(detail)) OR CHANGED (dateTime(detail))) AND NOT batch(detail) DO {
    price (detail) <- prevPriceB(SystemLedgerPriceListType.accountPriceListType, sku(detail), stock(detail), dateTime(detail));
}

@defineDocumentInterfaceDetailDataSum(adjustment);
@deriveDocumentDetailSum(userAdjustment, quantity);

@defineDocumentInterfaceHeaderQuantity(adjustment);
@defineDocumentHeaderSkuQuantity(adjustment, sku);
@defineDocumentHeaderSkuQuantity(userAdjustment, sku);
@defineDocumentInterfaceHeaderSum(adjustment);

@defineAddDetailDialogSkuStock(userAdjustment, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userAdjustment, sku);

@implementDocument(adjustment);
@implementDocumentBatch(adjustment);

supplierStock(Adjustment adjustment) += stock(adjustment);

@defineMovementSku(adjustmentDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userAdjustmentDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(adjustmentDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userAdjustmentDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(userAdjustmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(adjustmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineMovementPriceSku(adjustmentDetail, stock); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userAdjustmentDetail, stock); //-- показываем по нажатию правой клавиши  изменение цены товара

// --------------------------- Формы ---------------------------------- //

batchDialog(UserAdjustmentDetail userAdjustmentDetail) = ACTION {
    FORM dialogBatchStockOut OBJECTS st = stock(userAdjustmentDetail), t = dateTime(userAdjustmentDetail),
    sk = sku(userAdjustmentDetail) MODAL;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batch(userAdjustmentDetail) <- chosenObject('bt');
    }
};

edit 'Редактировать' = ACTION ABSTRACT LIST (Adjustment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;


FORM userAdjustment 'Изменение остатков'
    OBJECTS i = UserAdjustment FIXED PANEL
    PROPERTIES (i) isPosted, nameStock ON CHANGE changeStockCompany(i),
                   nameNumerator, number, series, date, time,
                   nameCurrency,  note,
                   countUserAdjustmentDetail, quantityUserAdjustmentDetail, sumUserAdjustmentDetail

    OBJECTS d = UserAdjustmentDetail
    PROPERTIES (d) index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE batchDialog(d), quantity, price, sum,
                   nameStock, ADDOBJ, deleted = DELETESESSION

    PROPERTIES(i) TODRAW d fillDocument, addDetailDialogSkuStockUserAdjustmentDetail,
                           addDetailInputBarcodeUserAdjustmentDetail, deleteUserAdjustmentDetail
    FILTERS userAdjustment(d) == i

    EVENTS
        ON OK prePost(i)

    EDIT UserAdjustment OBJECT i
;

DESIGN userAdjustment {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;
                type = CONTAINERV;

                MOVE i.documentHeader {
                    
                    type = CONTAINERV;
                    NEW first {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(i)) { preferredCharWidth = 10; }
                        MOVE PROPERTY(nameStock(i));
                    }
                    NEW second { 
                        type = CONTAINERH;
                        MOVE PROPERTY(nameNumerator(i));
                        MOVE PROPERTY(number(i));
                        MOVE PROPERTY(series(i));
                        MOVE PROPERTY(date(i));
                        MOVE PROPERTY(time(i));
                    }                                                                                
                }

                MOVE i.documentPrm {
                    columns = 3;
                }

            }

            MOVE i.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            type = TABBED;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserAdjustmentDetail(i)) { preferredCharWidth = 13;}
    }
}

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userAdjustment, accountPriceListType, );
@extendFormDocumentSkuStock(userAdjustment, userAdjustment, i, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userAdjustment, accountPriceListType, );
@extendFormDocumentBatchStock(userAdjustment, userAdjustment, i, legalEntityStock, );

EXTEND FORM userAdjustment

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks,st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, i, st) 'F9'

;

EXTEND FORM userAdjustment

    FILTERGROUP filter1
        FILTER 'С остатком ' currentBalance(b,st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(b, i, st) 'F9'
;

addUserAdjustment 'Добавить' = ACTION ADDFORM UserAdjustment;
edit 'Редактировать' (userAdjustment) = ACTION EDITFORM UserAdjustment;
edit (UserAdjustment adjustment) += ACTION edit(adjustment);

skipShowEditDelete = ABSTRACT BOOLEAN (Adjustment);

showEdit (Adjustment a) = isOpened(a) AND NOT skipShowEditDelete(a); 
showDelete(UserAdjustment a) = isOpened(a) AND is(a) AND NOT skipShowEditDelete(a);

actualBalance 'Остаток фактический' (Sku sku, UserAdjustment userAdjustment, Stock stock)= currentBalance(sku, stock) (+) quantity(sku, userAdjustment, stock);

changeActualQuantity(Sku sku, UserAdjustment userAdjustment, Stock stock) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    ASSIGN requestedNumeric() <- (requestedNumeric() IF sku IS Sku AND stock IS Stock) (-) currentBalance(sku, stock);

    EXEC changeQuantityValue(sku, userAdjustment, stock);
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalance(ks,i,st) ON CHANGE changeActualQuantity(ks,i,st) BEFORE prevCurrentBalance(ks,st)
;
actualBalance 'Остаток фактический' (Batch batch, UserAdjustment userAdjustment, Stock stock)= currentBalance(batch, stock) (+) quantity(batch, userAdjustment, stock);

changeActualQuantity(Batch batch, UserAdjustment userAdjustment, Stock stock) = ACTION {
    REQUEST NUMERIC[16,5] INPUT;
    ASSIGN requestedNumeric() <- (requestedNumeric() IF batch IS Batch AND stock IS Stock) (-) currentBalance(batch, stock);

    EXEC changeQuantityValue(batch, userAdjustment, stock);
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalance(b,i,sto) ON CHANGE changeActualQuantity(b,i,sto) BEFORE prevCurrentBalance(b,sto)
;

FORM adjustments 'Изменения остатков'
    OBJECTS i = Adjustment
    PROPERTIES (i) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                            nameStock, nameCurrency
    PROPERTIES (i) READONLY countAdjustmentDetail, quantityAdjustmentDetail,
                            sumAdjustmentDetail
    PROPERTIES (i) READONLYIF isReadonly() note

    PROPERTIES (i) READONLY FORCE PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES ()  addUserAdjustment TODRAW i
    PROPERTIES (i) edit SHOWIF showEdit(i)
    PROPERTIES(i)  close[UserAdjustment] SHOWIF isOpened[UserAdjustment](i), open SHOWIF isClosed[UserAdjustment](i)     

    PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF showDelete[UserAdjustment](i)

    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                   nameBatch, quantity, price, sum, nameStock

    FILTERS adjustment(d) == i

    DIALOG Adjustment OBJECT i
;
@extendFormFilterAccessStock(Adjustment, i, adjustments, stock, company);

DESIGN adjustments {
    main {
        preferredSize = (1024, 768);

        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            MOVE i.box { fill = 2; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE i.created;
                    MOVE i.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                    }
//                    NEW machineryContainer {
//                        caption = 'Загрузка';
//                        type = CONTAINERV;
//                    }
                }
            }
        }
    }
}
@extendFormEditable(adjustments);
@defineFilterIsOpened (adjustment, adjustments, i);
@defineDocumentLogForm(adjustments, i);

NAVIGATOR {
    stockNavigator {
        NEW adjustmentNavigator 'Изменение остатков' BEFORE balanceSku {
            ADD adjustments;
            ADD operations;
        }
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//
@defineDocumentInterfaceOperation (adjustment, Stock, );
@extendFormFilterRoleAccess(adjustment, i, adjustments);
@defineDocumentOperationConstraint(adjustment, 'изменение остатков', Adjustment);
@defineDocumentOperationRolePrefix(userAdjustment, );

EXTEND FORM userAdjustment
    PROPERTIES(i) nameOperation
;
DESIGN userAdjustment{
    first{
        MOVE PROPERTY (nameOperation(i)) BEFORE PROPERTY(nameStock(i));
    }
}
EXTEND FORM adjustments
    PROPERTIES(i) READONLY nameOperation AFTER nameStock(i)
;

//---------------------------- Изменение остатка sku----------------------------//

CLASS ABSTRACT AdjustmentSkuDetail 'Изменение остатка ' : DataSkuLedger;
TABLE adjustmentSkuDetail (AdjustmentSkuDetail);

CLASS OutAdjustmentSkuDetail 'Изменение остатка (-)' : AdjustmentSkuDetail;
CLASS InAdjustmentSkuDetail 'Изменение остатка (+)' : AdjustmentSkuDetail;

needToOutLedger (AdjustmentDetail adjustmentDetail) = ((quantity(adjustmentDetail) < 0 ) OR batch(adjustmentDetail))
    AND isPosted(adjustmentDetail);
needToOutLedger (adjustment) = GROUP SUM 1 IF needToOutLedger(AdjustmentDetail adjustmentDetail)
    BY adjustment(adjustmentDetail);

// Все партии проводим по OutLedger
needToInLedger (AdjustmentDetail adjustmentDetail) = isPosted(adjustmentDetail) AND NOT (quantity(adjustmentDetail) < 0) AND NOT batch(adjustmentDetail);
needToInLedger (adjustment) = GROUP SUM 1 IF needToInLedger(AdjustmentDetail adjustmentDetail)
    BY adjustment(adjustmentDetail);

@defineAggregation(adjustmentDetail, outAdjustmentSkuDetail, needToOutLedger);
@defineAggregation(adjustmentDetail, inAdjustmentSkuDetail, needToInLedger);

adjustmentDetail(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI adjustmentDetail[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                 adjustmentDetail[InAdjustmentSkuDetail](adjustmentSkuDetail);

@defineDocumentDetailTime(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailPosted(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailClosed(adjustmentDetail, AdjustmentSkuDetail);

stock(InAdjustmentSkuDetail adjustmentSkuDetail) = stock(adjustmentDetail(adjustmentSkuDetail));
stock(OutAdjustmentSkuDetail adjustmentSkuDetail) = stock(adjustmentDetail(adjustmentSkuDetail));
stock(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI stock[InAdjustmentSkuDetail](adjustmentSkuDetail),
                                                      stock[OutAdjustmentSkuDetail](adjustmentSkuDetail) PERSISTENT;

batch(InAdjustmentSkuDetail adjustmentSkuDetail) = batch(adjustmentDetail(adjustmentSkuDetail));
batch(OutAdjustmentSkuDetail adjustmentSkuDetail) = batch(adjustmentDetail(adjustmentSkuDetail));
batch(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI batch[InAdjustmentSkuDetail](adjustmentSkuDetail),
                                                      batch[OutAdjustmentSkuDetail](adjustmentSkuDetail) PERSISTENT;

quantity (OutAdjustmentSkuDetail adjustmentSkuDetail) = quantity(adjustmentDetail(adjustmentSkuDetail));
quantity (InAdjustmentSkuDetail adjustmentSkuDetail) = quantity(adjustmentDetail(adjustmentSkuDetail));   // -
quantity 'Кол-во изменения' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI quantity[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                             quantity[InAdjustmentSkuDetail](adjustmentSkuDetail) PERSISTENT;

sum (OutAdjustmentSkuDetail adjustmentSkuDetail) = sum(adjustmentDetail(adjustmentSkuDetail));
sum (InAdjustmentSkuDetail adjustmentSkuDetail) = sum(adjustmentDetail(adjustmentSkuDetail));        // -
sum 'Сумма изменения' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI sum[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                       sum[InAdjustmentSkuDetail](adjustmentSkuDetail) PERSISTENT;

sku (OutAdjustmentSkuDetail adjustmentSkuDetail) = sku(adjustmentDetail(adjustmentSkuDetail));
sku (InAdjustmentSkuDetail adjustmentSkuDetail) = sku(adjustmentDetail(adjustmentSkuDetail));
sku(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI sku[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                    sku[InAdjustmentSkuDetail](adjustmentSkuDetail) PERSISTENT;
nameSku 'Товар' (AdjustmentSkuDetail adjustmentSkuDetail) = name(sku(adjustmentSkuDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
idBarcode 'Штрихкод' (AdjustmentSkuDetail adjustmentSkuDetail) =  idBarcode(sku(adjustmentSkuDetail));

description 'Название документа' (OutAdjustmentSkuDetail adjustmentSkuDetail) = description(adjustmentDetail(adjustmentSkuDetail));
description 'Название документа' (InAdjustmentSkuDetail adjustmentSkuDetail) = description(adjustmentDetail(adjustmentSkuDetail));
description 'Название документа' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI description[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                                  description[InAdjustmentSkuDetail](adjustmentSkuDetail) PERSISTENT;

adjustment 'Название документа' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI adjustment(adjustmentDetail[OutAdjustmentSkuDetail](adjustmentSkuDetail)),
                                                                                 adjustment(adjustmentDetail[InAdjustmentSkuDetail](adjustmentSkuDetail)) PERSISTENT;

@implementSkuLedger(adjustmentSkuDetail, sku, stock);

// Не проводим по товарному отчету
//@implementStockDocumentLedgerOut(Adjustment, stock);
//sumOutStockDocumentLedger (ledger) += sumAdjustmentDetailAdjustment(ledger);
//sumItemOutStockDocumentLedger (ledger) += sumAdjustmentDetailAdjustment(ledger);
//sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS Adjustment;
//
//stockDocumentLedgerSkuLedger(ledger) += adjustmentAdjustmentSkuDetail(ledger);

batch(AdjustmentSkuDetail ledger) += batch(ledger);

skipSkuLedger = ABSTRACT BOOLEAN (AdjustmentSkuDetail);

EXTEND CLASS OutAdjustmentSkuDetail : OutFIFOSkuLedger;
quantity (OutAdjustmentSkuDetail ledger) += -quantity(ledger) IF NOT skipSkuLedger(ledger);
@implementSkuLedgerOutFIFOBatchBalance(outAdjustmentSkuDetail, stock);
sum (OutAdjustmentSkuDetail ledger) += -sum(ledger) IF NOT skipSkuLedger(ledger);

EXTEND CLASS InAdjustmentSkuDetail : InLIFOSkuLedger;
quantity (InAdjustmentSkuDetail ledger) += quantity(ledger) IF NOT skipSkuLedger(ledger);
@implementSkuLedgerInLIFOBatchBalance(inAdjustmentSkuDetail, stock);
sum (InAdjustmentSkuDetail ledger) += sum(ledger) IF NOT skipSkuLedger(ledger);

edit 'Редактировать' = ACTION ABSTRACT LIST  (AdjustmentDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserAdjustmentDetail d) = ACTION NEWSESSION {
    FORM userAdjustment OBJECTS i = userAdjustment(d), d = d MANAGESESSION DOCKEDMODAL;
}

edit(UserAdjustmentDetail d) += ACTION edit(d);    
edit(InAdjustmentSkuDetail d) += ACTION edit(adjustmentDetail(d));
edit(OutAdjustmentSkuDetail d) += ACTION edit(adjustmentDetail(d));

show 'Просмотреть' = ACTION ABSTRACT LIST  (AdjustmentDetail) TOOLBAR;
show(UserAdjustmentDetail d) = ACTION NEWSESSION {
    FORM userAdjustment OBJECTS i = userAdjustment(d), d = d DOCKEDMODAL READONLY;
}

show(UserAdjustmentDetail d) += ACTION show(d);    
show(InAdjustmentSkuDetail d) += ACTION show(adjustmentDetail(d));
show(OutAdjustmentSkuDetail d) += ACTION show(adjustmentDetail(d));

quantityPositiveAdjustmentDetail 'Кол-во приход (всего)' (adjustment) = GROUP SUM quantity(AdjustmentDetail idetail) IF quantity(idetail) >=0
    BY adjustment(idetail) IN documentSum PERSISTENT;
quantityNegativeAdjustmentDetail 'Кол-во расход (всего)' (adjustment) = GROUP SUM -quantity(AdjustmentDetail idetail) IF quantity(idetail) <0
    BY adjustment(idetail) IN documentSum PERSISTENT;

sumPositiveAdjustmentDetail 'Сумма приход (всего)' (adjustment) = GROUP SUM sum(AdjustmentDetail idetail) IF quantity(idetail) >=0
    BY adjustment(idetail) IN documentSum PERSISTENT;
sumNegativeAdjustmentDetail 'Сумма расход (всего)' (adjustment) = GROUP SUM -sum(AdjustmentDetail idetail) IF quantity(idetail) <0
    BY adjustment(idetail) IN documentSum PERSISTENT;
    
sumNegative = -sum(AdjustmentDetail idetail);
quantityNegative = -quantity(AdjustmentDetail idetail);

@defineDocumentStockAccess(UserAdjustment, stock, company);
    
FORM printAdjustment 'Изменения остатков'
    OBJECTS i = Adjustment FIXED PANEL 
    PROPERTIES (i) READONLY isClosed, isPosted, seriesNumber, number, series, date, time,
                            nameStock, addressStock, nameCurrency
    PROPERTIES (i) READONLY countAdjustmentDetail, quantityAdjustmentDetail,
                            sumAdjustmentDetail, note,
                            quantityPositiveAdjustmentDetail, quantityNegativeAdjustmentDetail, sumPositiveAdjustmentDetail,
                            sumNegativeAdjustmentDetail 

    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch, quantity, price, sum, nameStock
    FILTERS adjustment(d) == i,
            quantity(d)>=0
    
    OBJECTS dd = AdjustmentDetail
    PROPERTIES (dd) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch, quantityNegative, price, sumNegative, nameStock
    FILTERS adjustment(dd) == i,
            quantity(dd)<0

;
print 'Изменение остатков' (Adjustment adjustment) =
    ACTION FORM printAdjustment OBJECTS i = adjustment PRINT  IMAGE 'print.png' IN print;
    
notPrint = ABSTRACT BOOLEAN (Adjustment);
toShowPrint (Adjustment a) = a IS Adjustment AND NOT notPrint(a);  
    
EXTEND FORM adjustments
    PROPERTIES (i) print FORCE PANEL SHOWIF toShowPrint(i)
;
DESIGN adjustments{
    printContainer {
        MOVE i.print;   
    }
}

active 'Провести по товарному отчету' = ABSTRACT BOOLEAN (Adjustment);
active 'Провести по товарному отчету' = DATA BOOLEAN (UserAdjustment) IN documentPrm;
active(UserAdjustment i) += active(i);

EXTEND FORM adjustments
    PROPERTIES(i) READONLY active
;
EXTEND FORM userAdjustment
    PROPERTIES (i) active
;

active 'Провести по товарному отчету' = DATA BOOLEAN (Operation);

EXTEND FORM operation
     PROPERTIES(o) active
 ;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(active(o));
    }
}
    
@deriveDocumentOperationProperty(UserAdjustment, active);

// ------------ Проведение по товарному отчету ----------------- //

@defineDocumentInterfaceHeaderItemSum (adjustment, , );

CLASS OutAdjustment 'Изменение остатков расход' : OutStockDocumentLedger;
CLASS InAdjustment 'Изменение остатков приход' : IncStockDocumentLedger;

//-- Расход
needToOutStockLedger = sumAdjustmentDetail(Adjustment l) < 0; //activeAdjustment(l) AND  
@defineAggregation(adjustment, OutAdjustment, needToOutStockLedger);

isPosted (OutAdjustment ledger) += isPosted(adjustment(ledger));  
isClosed (OutAdjustment ledger) += isClosed(adjustment(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
series (OutAdjustment ledger) += series(adjustment(ledger));
number (OutAdjustment ledger) += number(adjustment(ledger));
dateTime (OutAdjustment ledger) += dateTime(adjustment(ledger));
stock (OutAdjustment ledger) += stock(adjustment(ledger));
description (OutAdjustment ledger) += description(adjustment(ledger));                                                                                                                                                                                                                                   
sumContainer(OutAdjustment ledger) += -sumContainerAdjustmentDetail(adjustment(ledger));
sumItem(OutAdjustment ledger) += -sumItemAdjustmentDetail(adjustment(ledger));
edit(OutAdjustment ledger) += ACTION NEWSESSION {FORM userAdjustment OBJECTS i = adjustment(ledger) MANAGESESSION DOCKEDMODAL;}
close(OutAdjustment ledger) += ACTION close(adjustment(ledger));
type(OutAdjustment ledger) += 'Изменение остатков расход' IF ledger IS OutAdjustment;
skip(OutAdjustment ledger) += ledger IS OutAdjustment AND NOT active(adjustment(ledger));
operation[StockDocumentLedger](OutAdjustment ledger) += operation(adjustment(ledger));

//-- Приход
needToInStockLedger = sumAdjustmentDetail(Adjustment l) > 0; //activeAdjustment(l) AND  
@defineAggregation(adjustment, InAdjustment, needToInStockLedger);

isPosted (InAdjustment ledger) += isPosted(adjustment(ledger));  
isClosed (InAdjustment ledger) += isClosed(adjustment(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
series (InAdjustment ledger) += series(adjustment(ledger));
number (InAdjustment ledger) += number(adjustment(ledger));
dateTime (InAdjustment ledger) += dateTime(adjustment(ledger));
stock (InAdjustment ledger) += stock(adjustment(ledger));
description (InAdjustment ledger) += description(adjustment(ledger));                                                                                                                                                                                                                                   
sumContainer(InAdjustment ledger) += sumContainerAdjustmentDetail(adjustment(ledger));
sumItem(InAdjustment ledger) += sumItemAdjustmentDetail(adjustment(ledger));
edit(InAdjustment ledger) += ACTION NEWSESSION {FORM userAdjustment OBJECTS i = adjustment(ledger) MANAGESESSION DOCKEDMODAL;}
close(InAdjustment ledger) += ACTION close(adjustment(ledger));
type(InAdjustment ledger) += 'Изменение остатков приход' IF ledger IS InAdjustment;
skip(InAdjustment ledger) += ledger IS InAdjustment AND NOT active(adjustment(ledger));
operation[StockDocumentLedger](InAdjustment ledger) += operation(adjustment(ledger));

calcSumB (Sku sku,Stock st,DATETIME dateTime) = balanceB(sku,st,dateTime)*priceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, sku, st, dateTime);
needCreateAdjustment = (calcSumB (Sku sku,Stock st,DATETIME dateTime) OR  sumB (sku,st,dateTime)) AND NOT (calcSumB (sku,st,dateTime) ==  sumB (sku,st,dateTime));  

createUserAdjustment(DATETIME dateTime) = ACTION {
    FOR [ = GROUP SUM 1 IF needCreateAdjustment(Sku sku,Stock st,DATETIME dateTime) BY st,dateTime](Stock st,dateTime) AND isCompany(st) DO {
        NEWSESSION {
            FOR ADDOBJ a = UserAdjustment DO {
                stock(a) <- st;
                isPosted(a) <- TRUE;
                FOR needCreateAdjustment(Sku sku,st,dateTime) ADDOBJ  d = UserAdjustmentDetail DO {
                    userAdjustment(d) <- a;
                    sku(d) <- sku;
                    sum(d) <- NUMERIC[18,4](sumB(sku,st,dateTime) (-) calcSumB(sku,st,dateTime));    
                }
            }
            apply();
        }        
    }
} 


dataInSession 'Отм.' = DATA LOCAL BOOLEAN (SkuGroup);

levelParent (group) = GROUP MIN level(SkuGroup group, SkuGroup parent) IF dataInSession(parent)
    BY group;

inParent (SkuGroup group) = TRUE IF levelParent(group);

inSession 'Отм.' (SkuGroup group) = OVERRIDE
    inParent(group),
    dataInSession(group);

sessionConcatSkuGroups 'Группы' () =
    GROUP CONCAT name(SkuGroup group) IF inSession(group) AND NOT inSession(parent(group)),'; ' PREFCHARWIDTH 30;

countInSessionSkuGroups  = GROUP SUM 1 IF dataInSession(SkuGroup g);
resetSelectedGroups  'Сбросить отмеченные'() = ACTION {
    dataInSession(SkuGroup g) <- NULL WHERE g IS SkuGroup ;    
}  

toAdjustment (s,st,dt) = GROUP SUM 1 IF 
    balanceB(Batch b,Stock st,DATETIME dt) >0 AND balanceB(Batch b1,st,dt) <0 AND b !=b1 AND sku(b) == sku(b1)
        BY sku(b),st,dt;
toAdjustment = GROUP SUM 1 IF toAdjustment (Sku s,Stock st,DATETIME dt) BY st,dt;
//abs

toPositiveAdjustment (s,st,dt) = GROUP SUM balanceB(Batch b,Stock st,DATETIME dt) IF 
    balanceB(b,st,dt) >0 
        BY sku(b),st,dt;
toNegativeAdjustment (s,st,dt) = GROUP SUM balanceB(Batch b,Stock st,DATETIME dt) IF 
    balanceB(b,st,dt) <0 
        BY sku(b),st,dt;
        
FORM selectParamsAdjustment 'Параметры пересорта'
    OBJECTS st = Stock FIXED PANEL 
    PROPERTIES SELECTOR name(st)
    FILTERS isCompany(st)
    
    OBJECTS dt = DATETIME FIXED PANEL 
    PROPERTIES val = OBJVALUE (dt)
    
    OBJECTS o = Operation FIXED PANEL 
    PROPERTIES SELECTOR name(o)
    
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDER BY order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
    
    PROPERTIES inSession(sk)         
;
DESIGN selectParamsAdjustment {
    main {
        preferredSize = (800, 600); 
        NEW top {
            type = CONTAINERH;
            MOVE st.box;
            MOVE o.box; 
            MOVE dt.box {caption ='Дата/время документа';}
        }
        MOVE skuTree.tree.box;
    }
    MOVE functions.box;
}

inAdjustment = DATA LOCAL NESTED BOOLEAN (Sku);
inAdjustment = DATA LOCAL NESTED BOOLEAN (Stock);

createBatchUserAdjustmentDetail(UserAdjustment adjustment) = ACTION {

    LOCAL balance = NUMERIC[16,5] (Batch);
    balance(Batch b) <- NULL;
    balance(Batch b) <- balanceB(b, stock(adjustment), dateTime(adjustment)) WHERE inAdjustment(sku(b));
    
    LOCAL adjust = NUMERIC[16,5] (Sku);
    adjust (Sku s) <- NULL; 
    adjust (Sku s) <- min(-[= GROUP SUM balance(Batch b) IF balance(b) < 0 BY sku(b)](s), [= GROUP SUM balance(Batch b) IF balance(b) > 0 BY sku(b)](s));
    
    LOCAL adjust = NUMERIC[16,5] (Batch);
    adjust(Batch b) <- NULL; 
    adjust(Batch b) <- PARTITION UNGROUP adjust
                                            LIMIT -balance(b) IF balance(b) < 0
                                            BY sku(b)
                                            ORDER order(b) WHERE balance(b) < 0;
    
    adjust(Batch b) <- - PARTITION UNGROUP adjust
                                            LIMIT balance(b) IF balance(b) > 0
                                            BY sku(b)
                                            ORDER order(b) WHERE balance(b) > 0;

    FOR adjust(Batch b) ORDER nameSku(b) ADDOBJ d = UserAdjustmentDetail DO {            
        userAdjustment(d) <- adjustment;
        sku(d) <- sku(b);
        batch(d) <- b;
        quantity(d) <- adjust(b);
    }
}

createDialogBatchUserAdjustment 'Пересорт по партиям'() = ACTION NEWSESSION {// NEWSESSION NESTED dataInSession[SkuGroup], chosenObject[STRING[100]], chosenDateTime[STRING[100]]
    FORM selectParamsAdjustment MODAL;
    IF formResult() == FormResult.ok AND countInSessionSkuGroups() THEN {        
        
        FOR ADDOBJ adjustment = UserAdjustment DO {  
            stock(adjustment) <- chosenObject('st');            
            date(adjustment) <- DATE(chosenDateTime('dt'));
            time(adjustment) <- TIME(chosenDateTime('dt'));          
            operation(adjustment) <- chosenObject('o');          
            inAdjustment(Sku sku) <- NULL;
            inAdjustment(Sku sku) <- inSession(skuGroup(sku));
            
            createBatchUserAdjustmentDetail(adjustment);
            FORM userAdjustment OBJECTS i = adjustment MANAGESESSION DOCKEDMODAL NOCANCEL;          
        }        
    }
}

EXTEND FORM adjustments
    PROPERTIES createDialogBatchUserAdjustment()  FORCE PANEL 
;
DESIGN adjustments {
    createdContainer {
        MOVE PROPERTY (createDialogBatchUserAdjustment());
    }    
}

createBatchUserAdjustment 'Документ пересорта'(Stock stock) = ACTION {

    IF toAdjustment(stock,currentDateTime()) THEN NEWSESSION {
        FOR ADDOBJ adjustment = UserAdjustment DO {  
            stock(adjustment) <- stock;
            date(adjustment) <- currentDate();
            time(adjustment) <- currentTime();  
            isPosted(adjustment) <- TRUE;

            inAdjustment(Sku sku) <- TRUE;
//            inAdjustment(Sku sku) <- TRUE WHERE toAdjustment(sku,stock(adjustment),dateTime(adjustment));
            
            createBatchUserAdjustmentDetail(adjustment);      
        }
        apply();
    }
}//-- для планировщика

//-- Для всех складов
overCreateBatchUserAdjustment = ACTION ABSTRACT LIST (UserAdjustment);

createBatchUserAdjustment 'Документ пересорта'() = ACTION {
    FOR inAdjustment(Stock st) ADDOBJ a = UserAdjustment DO {  
        stock(a) <- st;
        date(a) <- currentDate();
        time(a) <- currentTime();  
        isPosted(a) <- TRUE;
        
        overCreateBatchUserAdjustment(a);
        
        createBatchUserAdjustmentDetail(a);      
    }
}//-- для планировщика


//------------------------------- Корректировка суммы ТО -----------------------//

accountSumB 'Учетная сумма'  (Sku s, Stock st, DATETIME dt)= balanceB(s,st,dt)*priceB(SystemLedgerPriceListType.accountPriceListType, s, st, dt);
diff 'Разница' (Sku s, Stock st, DATETIME dt) = sumB(s,st,dt)(-) accountSumB(s,st,dt);

createSumUserAdjustment (UserAdjustment adjustment) = ACTION {

    // todo : деноминация
    FOR sumDiff == diff(Sku s, stock(adjustment), dateTime(adjustment)) AND abs(sumDiff) > (IF currentDate() >= denominationDate() THEN 0.1 ELSE 1000.0) AND inAdjustment(s) ORDER name(s) ADDOBJ d = UserAdjustmentDetail DO {            
        userAdjustment(d) <- adjustment;
        sku(d) <- s;       
        quantity(d) <- 0.0;
        sum(d) <- (-sumDiff);
    }
}

createDialogSumUserAdjustment 'Корректировка суммы ТО'() = ACTION NEWSESSION {// NEWSESSION NESTED dataInSession[SkuGroup], chosenObject[STRING[100]], chosenDateTime[STRING[100]]
    FORM selectParamsAdjustment MODAL;
    IF formResult() == FormResult.ok AND countInSessionSkuGroups() THEN {        
        
        FOR ADDOBJ adjustment = UserAdjustment DO {  
            stock(adjustment) <- chosenObject('st');            
            date(adjustment) <- DATE(chosenDateTime('dt'));
            time(adjustment) <- TIME(chosenDateTime('dt'));          
            operation(adjustment) <- chosenObject('o');          
            
            inAdjustment(Sku sku) <- NULL;
            inAdjustment(Sku sku) <- inSession(skuGroup(sku));
            
            createSumUserAdjustment(adjustment);
            FORM userAdjustment OBJECTS i = adjustment MANAGESESSION DOCKEDMODAL NOCANCEL;          
        }        
    }
}

EXTEND FORM adjustments
    PROPERTIES createDialogSumUserAdjustment()  FORCE PANEL 
;
DESIGN adjustments {
    createdContainer {
        MOVE PROPERTY (createDialogSumUserAdjustment());
    }    
}

//-- Для всех складов
overCreateSumUserAdjustment = ACTION ABSTRACT LIST (UserAdjustment);

createSumUserAdjustment 'Корректировка суммы ТО'() = ACTION {
    FOR inAdjustment(Stock st) ADDOBJ a = UserAdjustment DO {  
        stock(a) <- st;
        date(a) <- currentDate();
        time(a) <- currentTime();  
        isPosted(a) <- TRUE;
        
        overCreateSumUserAdjustment(a);
        
        createSumUserAdjustment(a);      
    }
}//-- для планировщика