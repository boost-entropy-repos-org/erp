MODULE StockAdjustment;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Currency,
        PriceListLedger,
        Employee,
        Barcode;

NAMESPACE Stock;

CLASS ABSTRACT Adjustment 'Изменение остатков' : Document;
CLASS ABSTRACT AdjustmentDetail 'Строка изменения остатков' : DocumentDetail;

CLASS UserAdjustment 'Изменение остатков (польз.)' : Adjustment, Historizable, NumeratedObject;
CLASS UserAdjustmentDetail 'Строка изменения остатков (польз.)' : AdjustmentDetail;
CLASS UserAdjustmentPosted 'Проведенное изменение остатков (польз.)' : UserAdjustment, PostedObject;

@defineDocumentInterface(adjustment);
@defineDocumentInterfaceNumber(adjustment);

@defineDocumentInterfaceDataStock(adjustment, stock, 'Склад');

@defineDocumentInterfacePosted(adjustment);
@defineNumeratedObjectDefault(Adjustment, 'Нумератор для изменения остатков', 'ИО');

@defineDocumentInterfaceDescription(adjustment, 'Изменение остатков');

@defineDocumentInterfaceCurrency(adjustment);
@deriveDocumentCurrency(userAdjustment, stock);

@defineDocumentInterfaceDetailSku(adjustment, sku);
@defineDocumentInterfaceDetailBatch(adjustment, batch);
@defineDocumentInterfaceDetailQuantity(adjustment);
@defineDocumentInterfaceDetailPrice(adjustment);
priceUserAdjustmentDetail (detail)  <- IF batchUserAdjustmentDetail(detail)
                THEN priceLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batchUserAdjustmentDetail(detail), stockUserAdjustmentDetail(detail), dateTimeUserAdjustmentDetail(detail))
                ELSE priceLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, skuUserAdjustmentDetail(detail), stockUserAdjustmentDetail(detail), dateTimeUserAdjustmentDetail(detail))
                WHEN CHANGED(skuUserAdjustmentDetail(detail)) OR CHANGED(batchUserAdjustmentDetail(detail)) OR CHANGED(stockUserAdjustmentDetail(detail)) OR CHANGED (dateTimeUserAdjustmentDetail(detail));

skuUserAdjustmentDetail (detail) <- skuBatch(batchUserAdjustmentDetail(detail)) IF batchUserAdjustmentDetail(detail)
                               WHEN CHANGED(batchUserAdjustmentDetail(detail));

@defineDocumentInterfaceDetailDataSum(adjustment);
@deriveDocumentDetailSum(userAdjustment, quantity);

@defineDocumentInterfaceHeaderQuantity(adjustment);
@defineDocumentHeaderSkuQuantity(adjustment, sku);
@defineDocumentHeaderSkuQuantity(userAdjustment, sku);
@defineDocumentInterfaceHeaderSum(adjustment);

@defineAddDetailDialogSkuStock(userAdjustment, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userAdjustment, sku);

@implementDocument(adjustment);
supplierStockDocument(adjustment) += stockAdjustment(adjustment);

// --------------------------- Формы ---------------------------------- //

batchDialogUserAdjustmentDetail = ACTION (userAdjustmentDetail) {
    FORM dialogBatch OBJECTS st = stockUserAdjustmentDetail(userAdjustmentDetail), t = dateTimeUserAdjustmentDetail(userAdjustmentDetail),
    sk = skuUserAdjustmentDetail(userAdjustmentDetail) MODAL;

    IF formResult() == FormResult.ok THEN {
        SET batchUserAdjustmentDetail(userAdjustmentDetail) <- chosenObject('bt');
    }
};

editAdjustment 'Редактировать' = ABSTRACT ACTION (Adjustment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;


FORM userAdjustment 'Изменение остатков'
    OBJECTS i = UserAdjustment FIXED PANEL
    PROPERTIES (i) objectClassName, nameStockUserAdjustment,
                   nameNumeratorObject, numberObject, seriesObject, dateUserAdjustment, timeUserAdjustment,
                   nameCurrencyUserAdjustment,  noteUserAdjustment,
                   countUserAdjustmentDetailUserAdjustment, quantityUserAdjustmentDetailUserAdjustment, sumUserAdjustmentDetailUserAdjustment

    OBJECTS d = UserAdjustmentDetail
    PROPERTIES (d) indexUserAdjustmentDetail, idBarcodeSkuUserAdjustmentDetail, nameSkuUserAdjustmentDetail, shortNameUOMSkuUserAdjustmentDetail,
                   nameBatchUserAdjustmentDetail ON CHANGE batchDialogUserAdjustmentDetail(d), quantityUserAdjustmentDetail, priceUserAdjustmentDetail, sumUserAdjustmentDetail,
                   nameStockUserAdjustmentDetail, ADDOBJ, DELETESESSION

    PROPERTIES(i) TODRAW d fillDocumentAdjustment, addDetailDialogSkuStockUserAdjustmentDetailUserAdjustment,
                           addDetailInputBarcodeUserAdjustmentDetailUserAdjustment, deleteUserAdjustmentDetailUserAdjustment
    FILTERS userAdjustmentUserAdjustmentDetail(d) == i

    EVENTS
        ON OK prePostUserAdjustment(i)

    EDIT UserAdjustment OBJECT i
;

DESIGN userAdjustment FROM DEFAULT{
    main {
        preferredSize = (1024, 768);
        NEW specification.box BEFORE functions.box{

            ADD d.box {
                title = 'Спецификация';
                d.panel {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
            }
        }
        NEW header.box BEFORE specification.box {
            childConstraints = TO THE RIGHT;

            NEW headerRow1 {
                childConstraints = TO THE BOTTOM;

                ADD i.documentHeaderGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                    ADD PROPERTY(nameStockUserAdjustment);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateUserAdjustment);
                    ADD PROPERTY(timeUserAdjustment);
                }

                ADD i.documentPrmGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }

            }

            ADD i.documentSumGroup {
                childConstraints = TO THE BOTTOM;
            }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

//-- SKU
@defineDocumentSkuStockSystemLedgerPriceListType(userAdjustment, accountPriceListType, stock);
@extendFormDocumentSkuStockCustom(userAdjustment, userAdjustment, i, legalEntityStock, stock);
@extendFormDocumentSkuStockCustomAll(userAdjustment, userAdjustment, i);

@defineDocumentBatchStockSystemLedgerPriceListType(userAdjustment, accountPriceListType, stock);
@extendFormDocumentBatchStock(userAdjustment, userAdjustment, i, row);
@extendFormDocumentBatchStockAll(userAdjustment, userAdjustment, i);

EXTEND FORM userAdjustment

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' currentBalanceSkuStock(ks,st) DEFAULT
        FILTER 'В документе ' 'F9' quantitySkuUserAdjustmentStock(ks, i, st)

;

EXTEND FORM userAdjustment

    FILTERGROUP filter1
        FILTER 'С остатком ' 'F10' currentBalanceBatchStock(b,st) DEFAULT
        FILTER 'В документе ' 'F9' quantityBatchUserAdjustmentStock(b, i, st)
;

addUserAdjustment 'Добавить' = ACTION ADDFORM UserAdjustment;
editUserAdjustment 'Редактировать' (userAdjustment) = ACTION EDITFORM UserAdjustment;
editAdjustment (adjustment) += editUserAdjustment(adjustment);

actualBalanceSkuUserAdjustmentStock 'Остаток фактический' (sku, userAdjustment, stock)= currentBalanceSkuStock(sku, stock) (+) quantitySkuUserAdjustmentStock(sku, userAdjustment, stock);

changeActualQuantitySkuUserAdjustmentStock = ACTION (sku, userAdjustment, stock) {
    REQUEST NUMERIC[14,3] INPUT;
    SET requestedNumeric() <- (requestedNumeric() IF sku IS Sku AND stock IS Stock) (-) currentBalanceSkuStock(sku, stock);

    EXEC changeQuantityValueSkuUserAdjustmentStock(sku, userAdjustment, stock);
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalanceSkuUserAdjustmentStock(ks,i,st) ON CHANGE changeActualQuantitySkuUserAdjustmentStock(ks,i,st) BEFORE currentBalanceSkuStock(ks,st)
;
actualBalanceBatchUserAdjustmentStock 'Остаток фактический' (batch, userAdjustment, stock)= currentBalanceBatchStock(batch, stock) (+) quantityBatchUserAdjustmentStock(batch, userAdjustment, stock);

changeActualQuantityBatchUserAdjustmentStock = ACTION (batch, userAdjustment, stock) {
    REQUEST NUMERIC[14,3] INPUT;
    SET requestedNumeric() <- (requestedNumeric() IF batch IS Batch AND stock IS Stock) (-) currentBalanceBatchStock(batch, stock);

    EXEC changeQuantityValueBatchUserAdjustmentStock(batch, userAdjustment, stock);
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalanceBatchUserAdjustmentStock(b,i,sto) ON CHANGE changeActualQuantityBatchUserAdjustmentStock(b,i,sto) BEFORE prevCurrentBalanceBatchStock(b,sto)
;

FORM adjustments 'Изменения остатков'
    OBJECTS i = Adjustment
    PROPERTIES (i) READONLY isPostedAdjustment FORCE GRID, numberAdjustment, seriesAdjustment, dateAdjustment, timeAdjustment,
                            nameStockAdjustment, nameCurrencyAdjustment, countAdjustmentDetailAdjustment, quantityAdjustmentDetailAdjustment,
                            sumAdjustmentDetailAdjustment, noteAdjustment, objectClassName

    PROPERTIES (i) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES ()  addUserAdjustment TODRAW i
    PROPERTIES (i) editAdjustment
    PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF isUserAdjustment(i)

    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY indexAdjustmentDetail, idBarcodeSkuAdjustmentDetail, nameSkuAdjustmentDetail, shortNameUOMSkuAdjustmentDetail,
                   nameBatchAdjustmentDetail, quantityAdjustmentDetail, priceAdjustmentDetail, sumAdjustmentDetail, nameStockAdjustmentDetail

    FILTERS adjustmentAdjustmentDetail(d) == i

    DIALOG Adjustment OBJECT i
;
@extendFormFilterAccess(Adjustment, i, adjustments, stock);

DESIGN adjustments FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        PROPERTY (deletei) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD i.box;

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    title = 'История';

                    ADD i.historyGroup;
                    ADD i.postedGroup;
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                        fillVertical = 2.0; // todo : иначе кнопка не всегда показывается, нужно будет пофиксить как-нибудь
                    }
                }
            }
        }
    }
}

NAVIGATOR {
    stockNavigator {
        NEW adjustmentNavigator 'Изменение остатков' BEFORE balanceSku {
            ADD adjustments;
        }
    }
}

//---------------------------- Изменение остатка инвентаризации sku----------------------------//

CLASS ABSTRACT AdjustmentSkuDetail 'Изменение остатка ' : SkuLedger;
TABLE adjustmentSkuDetail (AdjustmentSkuDetail);

CLASS OutAdjustmentSkuDetail 'Изменение остатка (-)' : AdjustmentSkuDetail;
CLASS InAdjustmentSkuDetail 'Изменение остатка (+)' : AdjustmentSkuDetail;

needToOutLedgerAdjustmentDetail (adjustmentDetail) = quantityAdjustmentDetail(adjustmentDetail) < 0
    AND isPostedAdjustmentDetail(adjustmentDetail);
needToOutLedgerAdjustment (adjustment) = GROUP SUM needToOutLedgerAdjustmentDetail(adjustmentDetail)
    BY adjustmentAdjustmentDetail(adjustmentDetail);

needToInLedgerAdjustmentDetail (adjustmentDetail) = quantityAdjustmentDetail(adjustmentDetail) > 0
    AND isPostedAdjustmentDetail(adjustmentDetail);
needToInLedgerAdjustment (adjustment) = GROUP SUM needToInLedgerAdjustmentDetail(adjustmentDetail)
    BY adjustmentAdjustmentDetail(adjustmentDetail);

@defineAggregation(adjustmentDetail, outAdjustmentSkuDetail, needToOutLedgerAdjustmentDetail);
@defineAggregation(adjustmentDetail, inAdjustmentSkuDetail, needToInLedgerAdjustmentDetail);

adjustmentDetailAdjustmentSkuDetail(adjustmentSkuDetail) = UNION CLASS adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                                adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail);

@defineDocumentDetailTime(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailPosted(adjustmentDetail, AdjustmentSkuDetail);

stockInAdjustmentSkuDetail(adjustmentSkuDetail) = stockAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
stockOutAdjustmentSkuDetail(adjustmentSkuDetail) = stockAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
stockAdjustmentSkuDetail(adjustmentSkuDetail) = UNION CLASS stockInAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                stockOutAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

batchInAdjustmentSkuDetail(adjustmentSkuDetail) = batchAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
batchOutAdjustmentSkuDetail(adjustmentSkuDetail) = batchAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
batchAdjustmentSkuDetail(adjustmentSkuDetail) = UNION CLASS batchInAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                batchOutAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

quantityOutAdjustmentSkuDetail (adjustmentSkuDetail) = quantityAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
quantityInAdjustmentSkuDetail (adjustmentSkuDetail) = quantityAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));   // -
quantityAdjustmentSkuDetail 'Кол-во изменения' (adjustmentSkuDetail) = UNION CLASS quantityOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                                       quantityInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

sumOutAdjustmentSkuDetail (adjustmentSkuDetail) = sumAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
sumInAdjustmentSkuDetail (adjustmentSkuDetail) = sumAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));        // -
sumAdjustmentSkuDetail 'Сумма изменения' (adjustmentSkuDetail) = UNION CLASS sumOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                                 sumInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

skuOutAdjustmentSkuDetail (adjustmentSkuDetail) = skuAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
skuInAdjustmentSkuDetail (adjustmentSkuDetail) = skuAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
skuAdjustmentSkuDetail(adjustmentSkuDetail) = UNION CLASS skuOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                              skuInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;
nameSkuAdjustmentSkuDetail 'Товар' (adjustmentSkuDetail) = nameSku(skuAdjustmentSkuDetail(adjustmentSkuDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
idBarcodeAdjustmentSkuDetail 'Штрих-код' (adjustmentSkuDetail) =  idBarcodeSku(skuAdjustmentSkuDetail(adjustmentSkuDetail));

descriptionOutAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = descriptionAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
descriptionInAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = descriptionAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
descriptionAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = UNION CLASS descriptionOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                                            descriptionInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

@implementSkuLedger(adjustmentSkuDetail, sku, stock);

EXTEND CLASS OutAdjustmentSkuDetail : OutFIFOSkuLedger;
quantityOutFIFOSkuLedger (ledger) += -quantityOutAdjustmentSkuDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(outAdjustmentSkuDetail, stock);
sumOutSkuLedger (ledger) += -sumOutAdjustmentSkuDetail(ledger);

EXTEND CLASS InAdjustmentSkuDetail : InLIFOSkuLedger;
quantityInLIFOSkuLedger (ledger) += quantityInAdjustmentSkuDetail(ledger);
@implementSkuLedgerInLIFOBatchBalance(inAdjustmentSkuDetail, stock);
sumInSkuLedger (ledger) += sumInAdjustmentSkuDetail(ledger);
