MODULE StockAdjustment;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        StockSkuDocument,
        Numerator,
        Document,
        Currency,
        PriceListLedger,
        Employee,
        StockDocument,
        Barcode;

NAMESPACE Stock;

CLASS ABSTRACT Adjustment 'Изменение остатков' : Document;
CLASS ABSTRACT AdjustmentDetail 'Строка изменения остатков' : DocumentDetail;

CLASS UserAdjustment 'Изменение остатков (польз.)' : Adjustment;
CLASS UserAdjustmentDetail 'Строка изменения остатков (польз.)' : AdjustmentDetail;

@defineDocumentInterface(adjustment);
@deriveDocumentHeaderTimePrefix(UserAdjustment, );

@defineDocumentInterfaceNumber(adjustment);
@defineNumeratedDefault(UserAdjustment, 'Изменения остатков', 'ИО');

@defineDocumentInterfaceDataStock(adjustment, stock, 'Склад');
@defineDocumentDialogStocks(userAdjustment, stock, company, , );

@defineDocumentInterfacePosted(adjustment);
@defineDocumentInterfaceClosed(adjustment);
@defineDocumentClosedConstraint(UserAdjustment);

@defineDocumentInterfaceDescription(adjustment, 'Изменение остатков');

@defineDocumentInterfaceCurrency(adjustment);
@deriveDocumentCurrency(userAdjustment, stock);

@defineDocumentInterfaceDetailSku(adjustment, sku);
@showDocumentInterfaceDetailBatch(adjustment);
@defineDocumentInterfaceDetailBatch(adjustment, batch);
@defineDocumentInterfaceDetailQuantity(adjustment);
@defineDocumentInterfaceDetailPrice(adjustment);

idUserAdjustmentDetail = DATA VARSTRING[100] (UserAdjustmentDetail);
userAdjustmentDetailIdUserAdjustment (id, userAdjustment) = GROUP AGGR userAdjustmentDetail BY idUserAdjustmentDetail(userAdjustmentDetail), userAdjustmentUserAdjustmentDetail(userAdjustmentDetail) WHERE userAdjustmentDetail IS UserAdjustmentDetail;

priceUserAdjustmentDetail (detail)  <- IF batchUserAdjustmentDetail(detail)
                THEN priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batchUserAdjustmentDetail(detail), stockUserAdjustmentDetail(detail), dateTimeUserAdjustmentDetail(detail))
                ELSE priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, skuUserAdjustmentDetail(detail), stockUserAdjustmentDetail(detail), dateTimeUserAdjustmentDetail(detail))
                WHEN CHANGED(skuUserAdjustmentDetail(detail)) OR CHANGED(batchUserAdjustmentDetail(detail)) OR CHANGED(stockUserAdjustmentDetail(detail)) OR CHANGED (dateTimeUserAdjustmentDetail(detail));

skuUserAdjustmentDetail (detail) <- skuBatch(batchUserAdjustmentDetail(detail)) IF batchUserAdjustmentDetail(detail)
                               WHEN CHANGED(batchUserAdjustmentDetail(detail));

@defineDocumentInterfaceDetailDataSum(adjustment);
@deriveDocumentDetailSum(userAdjustment, quantity);

@defineDocumentInterfaceHeaderQuantity(adjustment);
@defineDocumentHeaderSkuQuantity(adjustment, sku);
@defineDocumentHeaderSkuQuantity(userAdjustment, sku);
@defineDocumentInterfaceHeaderSum(adjustment);

@defineAddDetailDialogSkuStock(userAdjustment, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userAdjustment, sku);

@implementDocument(adjustment);
@implementDocumentBatch(adjustment);

supplierStockDocument(adjustment) += stockAdjustment(adjustment);

@defineBarcodeSku(userAdjustmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(adjustmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
// --------------------------- Формы ---------------------------------- //

batchDialogUserAdjustmentDetail = ACTION (userAdjustmentDetail) {
    FORM dialogBatchStock OBJECTS st = stockUserAdjustmentDetail(userAdjustmentDetail), t = dateTimeUserAdjustmentDetail(userAdjustmentDetail),
    sk = skuUserAdjustmentDetail(userAdjustmentDetail) MODAL;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserAdjustmentDetail(userAdjustmentDetail) <- chosenObject('bt');
    }
};

editAdjustment 'Редактировать' = ABSTRACT ACTION LIST (Adjustment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;


FORM userAdjustment 'Изменение остатков'
    OBJECTS i = UserAdjustment FIXED PANEL
    PROPERTIES (i) isPostedUserAdjustment, nameStockUserAdjustment ON CHANGE changeStockCompanyUserAdjustment(i),
                   nameNumeratorUserAdjustment, numberUserAdjustment, seriesUserAdjustment, dateUserAdjustment, timeUserAdjustment,
                   nameCurrencyUserAdjustment,  noteUserAdjustment,
                   countUserAdjustmentDetailUserAdjustment, quantityUserAdjustmentDetailUserAdjustment, sumUserAdjustmentDetailUserAdjustment

    OBJECTS d = UserAdjustmentDetail
    PROPERTIES (d) indexUserAdjustmentDetail, idBarcodeSkuUserAdjustmentDetail, nameSkuUserAdjustmentDetail, shortNameUOMSkuUserAdjustmentDetail,
                   nameBatchUserAdjustmentDetail ON CHANGE batchDialogUserAdjustmentDetail(d), quantityUserAdjustmentDetail, priceUserAdjustmentDetail, sumUserAdjustmentDetail,
                   nameStockUserAdjustmentDetail, ADDOBJ, DELETESESSION

    PROPERTIES(i) TODRAW d fillDocumentAdjustment, addDetailDialogSkuStockUserAdjustmentDetailUserAdjustment,
                           addDetailInputBarcodeUserAdjustmentDetailUserAdjustment, deleteUserAdjustmentDetailUserAdjustment
    FILTERS userAdjustmentUserAdjustmentDetail(d) == i

    EVENTS
        ON OK prePostUserAdjustment(i)

    EDIT UserAdjustment OBJECT i
;

DESIGN userAdjustment {
    main {
        preferredSize = (1024, 768);
        NEW header.box {
            type = CONTAINERH;

            NEW headerRow1 {
                fill = 1;
                type = CONTAINERV;

                MOVE i.documentHeader {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPostedUserAdjustment(i)) { preferredCharWidth = 10; }
                    MOVE PROPERTY(nameStockUserAdjustment(i));
                    MOVE PROPERTY(nameNumeratorUserAdjustment(i));
                    MOVE PROPERTY(numberUserAdjustment(i));
                    MOVE PROPERTY(seriesUserAdjustment(i));
                    MOVE PROPERTY(dateUserAdjustment(i));
                    MOVE PROPERTY(timeUserAdjustment(i));
                }

                MOVE i.documentPrm {
                    columns = 3;
                }

            }

            MOVE i.documentSum {
                columns = 1;
            }
        }

        NEW specification.box {
            fill = 1;
            type = TABBED;
            MOVE d.box {
                caption = 'Спецификация';
            }
        }

        MOVE functions.box;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserAdjustmentDetailUserAdjustment(i)) { preferredCharWidth = 13;}
    }
}

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userAdjustment, accountPriceListType, );
@extendFormDocumentSkuStock(userAdjustment, userAdjustment, i, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userAdjustment, accountPriceListType, );
@extendFormDocumentBatchStock(userAdjustment, userAdjustment, i, legalEntityStock, );

EXTEND FORM userAdjustment

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalanceSkuStock(ks,st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySkuUserAdjustmentStock(ks, i, st) 'F9'

;

EXTEND FORM userAdjustment

    FILTERGROUP filter1
        FILTER 'С остатком ' currentBalanceBatchStock(b,st) 'F10' DEFAULT
        FILTER 'В документе ' quantityBatchUserAdjustmentStock(b, i, st) 'F9'
;

addUserAdjustment 'Добавить' = ACTION ADDFORM UserAdjustment;
editUserAdjustment 'Редактировать' (userAdjustment) = ACTION EDITFORM UserAdjustment;
editAdjustment (adjustment) += ACTION editUserAdjustment(adjustment);

isUserOpenedAdjustment(a)=  isOpenedAdjustment(a) AND isUserAdjustment(a);

actualBalanceSkuUserAdjustmentStock 'Остаток фактический' (sku, userAdjustment, stock)= currentBalanceSkuStock(sku, stock) (+) quantitySkuUserAdjustmentStock(sku, userAdjustment, stock);

changeActualQuantitySkuUserAdjustmentStock = ACTION (sku, userAdjustment, stock) {
    REQUEST NUMERIC[16,5] INPUT;
    ASSIGN requestedNumeric() <- (requestedNumeric() IF sku IS Sku AND stock IS Stock) (-) currentBalanceSkuStock(sku, stock);

    EXEC changeQuantityValueSkuUserAdjustmentStock(sku, userAdjustment, stock);
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalanceSkuUserAdjustmentStock(ks,i,st) ON CHANGE changeActualQuantitySkuUserAdjustmentStock(ks,i,st) BEFORE prevCurrentBalanceSkuStock(ks,st)
;
actualBalanceBatchUserAdjustmentStock 'Остаток фактический' (batch, userAdjustment, stock)= currentBalanceBatchStock(batch, stock) (+) quantityBatchUserAdjustmentStock(batch, userAdjustment, stock);

changeActualQuantityBatchUserAdjustmentStock = ACTION (batch, userAdjustment, stock) {
    REQUEST NUMERIC[16,5] INPUT;
    ASSIGN requestedNumeric() <- (requestedNumeric() IF batch IS Batch AND stock IS Stock) (-) currentBalanceBatchStock(batch, stock);

    EXEC changeQuantityValueBatchUserAdjustmentStock(batch, userAdjustment, stock);
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalanceBatchUserAdjustmentStock(b,i,sto) ON CHANGE changeActualQuantityBatchUserAdjustmentStock(b,i,sto) BEFORE prevCurrentBalanceBatchStock(b,sto)
;

FORM adjustments 'Изменения остатков'
    OBJECTS i = Adjustment
    PROPERTIES (i) READONLYIF isReadonly() isClosedAdjustment, isPostedAdjustment, numberAdjustment, seriesAdjustment, dateAdjustment, timeAdjustment,
                            nameStockAdjustment, nameCurrencyAdjustment
    PROPERTIES (i) READONLY countAdjustmentDetailAdjustment, quantityAdjustmentDetailAdjustment,
                            sumAdjustmentDetailAdjustment
    PROPERTIES (i) READONLYIF isReadonly() noteAdjustment

    PROPERTIES (i) READONLY FORCE PANEL createdNameUserUserAdjustment, createdTimeUserAdjustment, createdHostnameComputerUserAdjustment, 
                                        postedNameUserUserAdjustment, postedTimeUserAdjustment, postedHostnameComputerUserAdjustment

    PROPERTIES ()  addUserAdjustment TODRAW i
    PROPERTIES (i) editAdjustment SHOWIF isOpenedAdjustment(i)
    PROPERTIES(i)  closeUserAdjustment SHOWIF isOpenedUserAdjustment(i), openUserAdjustment SHOWIF isClosedUserAdjustment(i)     

    PROPERTIES (i) deletei=DELETE FORCE PANEL TOOLBAR  SHOWIF isUserOpenedAdjustment(i)

    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY indexAdjustmentDetail, idBarcodeSkuAdjustmentDetail, nameSkuAdjustmentDetail, shortNameUOMSkuAdjustmentDetail,
                   nameBatchAdjustmentDetail, quantityAdjustmentDetail, priceAdjustmentDetail, sumAdjustmentDetail, nameStockAdjustmentDetail

    FILTERS adjustmentAdjustmentDetail(d) == i

    DIALOG Adjustment OBJECT i
;
@extendFormFilterAccessStock(Adjustment, i, adjustments, Stock.stock, company);

DESIGN adjustments {
    main {
        preferredSize = (1024, 768);

        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            MOVE i.box { fill = 2; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE i.created;
                    MOVE i.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
}
@extendFormEditable(adjustments);
@defineFilterIsOpened (adjustment, adjustments, i);
@defineDocumentLogForm(adjustments, i);

NAVIGATOR {
    stockNavigator {
        NEW adjustmentNavigator 'Изменение остатков' BEFORE balanceSku {
            ADD adjustments;
        }
    }
}

//---------------------------- Изменение остатка sku----------------------------//

CLASS ABSTRACT AdjustmentSkuDetail 'Изменение остатка ' : DataSkuLedger;
TABLE adjustmentSkuDetail (AdjustmentSkuDetail);

CLASS OutAdjustmentSkuDetail 'Изменение остатка (-)' : AdjustmentSkuDetail;
CLASS InAdjustmentSkuDetail 'Изменение остатка (+)' : AdjustmentSkuDetail;

needToOutLedgerAdjustmentDetail (adjustmentDetail) = (quantityAdjustmentDetail(adjustmentDetail) < 0 OR sumAdjustmentDetail(adjustmentDetail) <0) OR batchAdjustmentDetail(adjustmentDetail)
    AND isPostedAdjustmentDetail(adjustmentDetail);
needToOutLedgerAdjustment (adjustment) = GROUP SUM 1 IF needToOutLedgerAdjustmentDetail(adjustmentDetail)
    BY adjustmentAdjustmentDetail(adjustmentDetail);

// Все партии проводим по OutLedger
needToInLedgerAdjustmentDetail (adjustmentDetail) = (quantityAdjustmentDetail(adjustmentDetail) > 0 OR sumAdjustmentDetail(adjustmentDetail) >0) AND NOT batchAdjustmentDetail(adjustmentDetail)
    AND isPostedAdjustmentDetail(adjustmentDetail);
needToInLedgerAdjustment (adjustment) = GROUP SUM 1 IF needToInLedgerAdjustmentDetail(adjustmentDetail)
    BY adjustmentAdjustmentDetail(adjustmentDetail);

@defineAggregation(adjustmentDetail, outAdjustmentSkuDetail, needToOutLedger);
@defineAggregation(adjustmentDetail, inAdjustmentSkuDetail, needToInLedger);

adjustmentDetailAdjustmentSkuDetail(adjustmentSkuDetail) = MULTI adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                 adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail);

@defineDocumentDetailTime(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailPosted(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailClosed(adjustmentDetail, AdjustmentSkuDetail);

stockInAdjustmentSkuDetail(adjustmentSkuDetail) = stockAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
stockOutAdjustmentSkuDetail(adjustmentSkuDetail) = stockAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
stockAdjustmentSkuDetail(adjustmentSkuDetail) = MULTI stockInAdjustmentSkuDetail(adjustmentSkuDetail),
                                                      stockOutAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

batchInAdjustmentSkuDetail(adjustmentSkuDetail) = batchAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
batchOutAdjustmentSkuDetail(adjustmentSkuDetail) = batchAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
batchAdjustmentSkuDetail(adjustmentSkuDetail) = MULTI batchInAdjustmentSkuDetail(adjustmentSkuDetail),
                                                      batchOutAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

quantityOutAdjustmentSkuDetail (adjustmentSkuDetail) = quantityAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
quantityInAdjustmentSkuDetail (adjustmentSkuDetail) = quantityAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));   // -
quantityAdjustmentSkuDetail 'Кол-во изменения' (adjustmentSkuDetail) = MULTI quantityOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                             quantityInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

sumOutAdjustmentSkuDetail (adjustmentSkuDetail) = sumAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
sumInAdjustmentSkuDetail (adjustmentSkuDetail) = sumAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));        // -
sumAdjustmentSkuDetail 'Сумма изменения' (adjustmentSkuDetail) = MULTI sumOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                       sumInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

skuOutAdjustmentSkuDetail (adjustmentSkuDetail) = skuAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
skuInAdjustmentSkuDetail (adjustmentSkuDetail) = skuAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
skuAdjustmentSkuDetail(adjustmentSkuDetail) = MULTI skuOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                    skuInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;
nameSkuAdjustmentSkuDetail 'Товар' (adjustmentSkuDetail) = nameSku(skuAdjustmentSkuDetail(adjustmentSkuDetail)) MINCHARWIDTH 15 PREFCHARWIDTH 15;
idBarcodeAdjustmentSkuDetail 'Штрихкод' (adjustmentSkuDetail) =  idBarcodeSku(skuAdjustmentSkuDetail(adjustmentSkuDetail));

descriptionOutAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = descriptionAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail));
descriptionInAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = descriptionAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail));
descriptionAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = MULTI descriptionOutAdjustmentSkuDetail(adjustmentSkuDetail),
                                                                                  descriptionInAdjustmentSkuDetail(adjustmentSkuDetail) PERSISTENT;

adjustmentAdjustmentSkuDetail 'Название документа' (adjustmentSkuDetail) = MULTI adjustmentAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(adjustmentSkuDetail)),
                                                                                 adjustmentAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(adjustmentSkuDetail)) PERSISTENT;

@implementSkuLedger(adjustmentSkuDetail, sku, stock);

// Не проводим по товарному отчету
//@implementStockDocumentLedgerOut(Adjustment, stock);
//sumOutStockDocumentLedger (ledger) += sumAdjustmentDetailAdjustment(ledger);
//sumItemOutStockDocumentLedger (ledger) += sumAdjustmentDetailAdjustment(ledger);
//sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS Adjustment;
//
//stockDocumentLedgerSkuLedger(ledger) += adjustmentAdjustmentSkuDetail(ledger);

batchSkuLedger(ledger) += batchAdjustmentSkuDetail(ledger);

EXTEND CLASS OutAdjustmentSkuDetail : OutFIFOSkuLedger;
quantityOutFIFOSkuLedger (ledger) += -quantityOutAdjustmentSkuDetail(ledger);
@implementSkuLedgerOutFIFOBatchBalance(outAdjustmentSkuDetail, stock);
sumOutSkuLedger (ledger) += -sumOutAdjustmentSkuDetail(ledger);

EXTEND CLASS InAdjustmentSkuDetail : InLIFOSkuLedger;
quantityInLIFOSkuLedger (ledger) += quantityInAdjustmentSkuDetail(ledger);
@implementSkuLedgerInLIFOBatchBalance(inAdjustmentSkuDetail, stock);
sumInSkuLedger (ledger) += sumInAdjustmentSkuDetail(ledger);

editAdjustmentDetail 'Редактировать' = ABSTRACT ACTION LIST  (AdjustmentDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserAdjustmentDetail(d) = ACTION (d) NEWSESSION {
    FORM userAdjustment OBJECTS i = userAdjustmentUserAdjustmentDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}

editAdjustmentDetail(d) += ACTION editUserAdjustmentDetail(d);    
editSkuLedger(d) += ACTION editAdjustmentDetail(adjustmentDetailInAdjustmentSkuDetail(d));
editSkuLedger(d) += ACTION editAdjustmentDetail(adjustmentDetailOutAdjustmentSkuDetail(d));

quantityPositiveAdjustmentDetailAdjustment 'Кол-во приход (всего)' (adjustment) = GROUP SUM quantityAdjustmentDetail(idetail) IF quantityAdjustmentDetail(idetail) >=0
    BY adjustmentAdjustmentDetail(idetail) IN documentSum PERSISTENT;
quantityNegativeAdjustmentDetailAdjustment 'Кол-во расход (всего)' (adjustment) = GROUP SUM -quantityAdjustmentDetail(idetail) IF quantityAdjustmentDetail(idetail) <0
    BY adjustmentAdjustmentDetail(idetail) IN documentSum PERSISTENT;

sumPositiveAdjustmentDetailAdjustment 'Сумма приход (всего)' (adjustment) = GROUP SUM sumAdjustmentDetail(idetail) IF quantityAdjustmentDetail(idetail) >=0
    BY adjustmentAdjustmentDetail(idetail) IN documentSum PERSISTENT;
sumNegativeAdjustmentDetailAdjustment 'Сумма расход (всего)' (adjustment) = GROUP SUM -sumAdjustmentDetail(idetail) IF quantityAdjustmentDetail(idetail) <0
    BY adjustmentAdjustmentDetail(idetail) IN documentSum PERSISTENT;
    
sumNegativeAdjustmentDetail = -sumAdjustmentDetail(idetail);
quantityNegativeAdjustmentDetail = -quantityAdjustmentDetail(idetail);

@defineDocumentStockAccess(UserAdjustment, stock, company);
    
FORM printAdjustment 'Изменения остатков'
    OBJECTS i = Adjustment FIXED PANEL 
    PROPERTIES (i) READONLY isClosedAdjustment, isPostedAdjustment, seriesNumberAdjustment, numberAdjustment, seriesAdjustment, dateAdjustment, timeAdjustment,
                            nameStockAdjustment, addressStockAdjustment, nameCurrencyAdjustment
    PROPERTIES (i) READONLY countAdjustmentDetailAdjustment, quantityAdjustmentDetailAdjustment,
                            sumAdjustmentDetailAdjustment, noteAdjustment,
                            quantityPositiveAdjustmentDetailAdjustment, quantityNegativeAdjustmentDetailAdjustment, sumPositiveAdjustmentDetailAdjustment,
                            sumNegativeAdjustmentDetailAdjustment 

    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY indexAdjustmentDetail, idBarcodeSkuAdjustmentDetail, nameSkuAdjustmentDetail, shortNameUOMSkuAdjustmentDetail,
                   nameBatchAdjustmentDetail, quantityAdjustmentDetail, priceAdjustmentDetail, sumAdjustmentDetail, nameStockAdjustmentDetail
    FILTERS adjustmentAdjustmentDetail(d) == i,
            quantityAdjustmentDetail(d)>=0
    
    OBJECTS dd = AdjustmentDetail
    PROPERTIES (dd) READONLY indexAdjustmentDetail, idBarcodeSkuAdjustmentDetail, nameSkuAdjustmentDetail, shortNameUOMSkuAdjustmentDetail,
                   nameBatchAdjustmentDetail, quantityNegativeAdjustmentDetail, priceAdjustmentDetail, sumNegativeAdjustmentDetail, nameStockAdjustmentDetail
    FILTERS adjustmentAdjustmentDetail(dd) == i,
            quantityAdjustmentDetail(dd)<0

;
printAdjustment 'Изменение остатков' (adjustment) =
    ACTION FORM printAdjustment OBJECTS i = adjustment PRINT  IMAGE 'print.png' IN print;
    
notPrintAdjustment = ABSTRACT BOOLEAN (Adjustment);
toShowPrintAdjustment (a) = a IS Adjustment AND NOT notPrintAdjustment(a);  
    
EXTEND FORM adjustments
    PROPERTIES (i) printAdjustment FORCE PANEL TOOLBAR SHOWIF toShowPrintAdjustment(i)
;
DESIGN adjustments{
    printContainer {
        MOVE PROPERTY (printAdjustment(i));
    }
}

activeAdjustment 'Провести по товарному отчету' = ABSTRACT BOOLEAN (Adjustment);
activeUserAdjustment 'Провести по товарному отчету' = DATA BOOLEAN (UserAdjustment) IN documentPrm;
activeAdjustment(i) += activeUserAdjustment(i);

EXTEND FORM userAdjustment
    PROPERTIES (i) activeUserAdjustment
;

// ------------ Проведение по товарному отчету ----------------- //

@defineDocumentInterfaceHeaderItemSum (adjustment, , );

CLASS OutAdjustment 'Изменение остатков расход' : OutStockDocumentLedger;
CLASS InAdjustment 'Изменение остатков приход' : IncStockDocumentLedger;

//-- Расход
needToOutStockLedgerAdjustment = sumAdjustmentDetailAdjustment(l) < 0; //activeAdjustment(l) AND  
@defineAggregation(adjustment, OutAdjustment, needToOutStockLedger);

isPostedStockDocumentLedger (ledger) += isPostedAdjustment(adjustmentOutAdjustment(ledger));  
isClosedStockDocumentLedger (ledger) += isClosedAdjustment(adjustmentOutAdjustment(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
seriesStockDocumentLedger (ledger) += seriesAdjustment(adjustmentOutAdjustment(ledger));
numberStockDocumentLedger (ledger) += numberAdjustment(adjustmentOutAdjustment(ledger));
dateTimeStockDocumentLedger (ledger) += dateTimeAdjustment(adjustmentOutAdjustment(ledger));
stockStockDocumentLedger (ledger) += stockAdjustment(adjustmentOutAdjustment(ledger));
descriptionStockDocumentLedger (ledger) += descriptionAdjustment(adjustmentOutAdjustment(ledger));                                                                                                                                                                                                                                   
sumContainerOutStockDocumentLedger(ledger) += -sumContainerAdjustmentDetailAdjustment(adjustmentOutAdjustment(ledger));
sumItemOutStockDocumentLedger(ledger) += -sumItemAdjustmentDetailAdjustment(adjustmentOutAdjustment(ledger));
editStockDocumentLedger(ledger) += ACTION NEWSESSION {FORM userAdjustment OBJECTS i = adjustmentOutAdjustment(ledger) MANAGESESSION DOCKEDMODAL;}
closeStockDocumentLedger(ledger) += ACTION closeAdjustment(adjustmentOutAdjustment(ledger));
typeStockDocumentLedger(ledger) += 'Изменение остатков расход' IF ledger IS OutAdjustment;
skipStockDocumentLedger(ledger) += ledger IS OutAdjustment AND NOT activeAdjustment(adjustmentOutAdjustment(ledger));

//-- Приход
needToInStockLedgerAdjustment = sumAdjustmentDetailAdjustment(l) > 0; //activeAdjustment(l) AND  
@defineAggregation(adjustment, InAdjustment, needToInStockLedger);

isPostedStockDocumentLedger (ledger) += isPostedAdjustment(adjustmentInAdjustment(ledger));  
isClosedStockDocumentLedger (ledger) += isClosedAdjustment(adjustmentInAdjustment(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
seriesStockDocumentLedger (ledger) += seriesAdjustment(adjustmentInAdjustment(ledger));
numberStockDocumentLedger (ledger) += numberAdjustment(adjustmentInAdjustment(ledger));
dateTimeStockDocumentLedger (ledger) += dateTimeAdjustment(adjustmentInAdjustment(ledger));
stockStockDocumentLedger (ledger) += stockAdjustment(adjustmentInAdjustment(ledger));
descriptionStockDocumentLedger (ledger) += descriptionAdjustment(adjustmentInAdjustment(ledger));                                                                                                                                                                                                                                   
sumContainerIncStockDocumentLedger(ledger) += sumContainerAdjustmentDetailAdjustment(adjustmentInAdjustment(ledger));
sumItemIncStockDocumentLedger(ledger) += sumItemAdjustmentDetailAdjustment(adjustmentInAdjustment(ledger));
editStockDocumentLedger(ledger) += ACTION NEWSESSION {FORM userAdjustment OBJECTS i = adjustmentInAdjustment(ledger) MANAGESESSION DOCKEDMODAL;}
closeStockDocumentLedger(ledger) += ACTION closeAdjustment(adjustmentInAdjustment(ledger));
typeStockDocumentLedger(ledger) += 'Изменение остатков приход' IF ledger IS InAdjustment;
skipStockDocumentLedger(ledger) += ledger IS InAdjustment AND NOT activeAdjustment(adjustmentInAdjustment(ledger));

calcSumBSkuStockDateTime (sku,st,dateTime) = balanceBSkuStockDateTime(sku,st,dateTime)*priceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, sku, st, dateTime);
needCreateAdjustmentSkuStockDateTime = (calcSumBSkuStockDateTime (sku,st,dateTime) OR  sumBSkuStockDateTime (sku,st,dateTime)) AND NOT (calcSumBSkuStockDateTime (sku,st,dateTime) ==  sumBSkuStockDateTime (sku,st,dateTime));  

createUserAdjustmentDateTime = ACTION (dateTime) {
    FOR [ = GROUP SUM 1 IF needCreateAdjustmentSkuStockDateTime(sku,st,dateTime) BY st,dateTime](st,dateTime) AND isCompanyStock(st) DO {
        NEWSESSION {
            FOR ADDOBJ a = UserAdjustment DO {
                stockUserAdjustment(a) <- st;
                isPostedUserAdjustment(a) <- TRUE;
                FOR needCreateAdjustmentSkuStockDateTime(sku,st,dateTime) ADDOBJ  d = UserAdjustmentDetail DO {
                    userAdjustmentUserAdjustmentDetail(d) <- a;
                    skuUserAdjustmentDetail(d) <- sku;
                    sumUserAdjustmentDetail(d) <- NUMERIC[16,2](sumBSkuStockDateTime(sku,st,dateTime) (-) calcSumBSkuStockDateTime(sku,st,dateTime));    
                }
            }
            apply();
        }        
    }
} 
