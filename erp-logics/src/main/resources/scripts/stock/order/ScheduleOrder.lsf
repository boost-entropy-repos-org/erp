MODULE ScheduleOrder;

REQUIRE System,
        Time,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Order;

CLASS GenType 'Тип генерации' {
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
}
FORM genTypes 'Типы генерации графиков'
    OBJECTS t = GenType
    PROPERTIES(t) READONLY staticCaption
    DIALOG GenType OBJECT t
;

CLASS ABSTRACT ScheduleOrder 'График';
TABLE scheduleOrder(ScheduleOrder);

CLASS ABSTRACT ScheduleOrderDetail 'Заказ по графику';
TABLE scheduleOrderDetail(ScheduleOrderDetail);

//isClosedScheduleOrderDetail 'Аннулирован' = ABSTRACT BOOLEAN (ScheduleOrderDetail);
//isOpenedScheduleOrderDetail= d IS ScheduleOrderDetail AND NOT isClosedScheduleOrderDetail(d);

scheduleOrder = ABSTRACT ScheduleOrder (ScheduleOrderDetail)PERSISTENT;

operation = ABSTRACT Operation.Operation (ScheduleOrder) PERSISTENT;
nameOperation 'Операция' (ScheduleOrder scheduleOrder) = name(operation(scheduleOrder));

startDate 'Дата начала' = ABSTRACT DATE (ScheduleOrder) IN base;
endDate 'Дата окончания' = ABSTRACT DATE (ScheduleOrder) IN base;

type 'Тип генерации графика' = ABSTRACT GenType (ScheduleOrder);
nameType 'Тип генерации графика' (ScheduleOrder scheduleOrder) = staticCaption(type(scheduleOrder)) IN base;

supplier = ABSTRACT LegalEntity(ScheduleOrder);
nameSupplier 'Поставщик' (ScheduleOrder scheduleOrder) = name(supplier(scheduleOrder)) IN base;
customer = ABSTRACT LegalEntity(ScheduleOrder);
nameCustomer 'Покупатель' (ScheduleOrder scheduleOrder) = name(customer(scheduleOrder)) IN base;

supplierStock = ABSTRACT Stock(ScheduleOrder);
nameSupplierStock 'Склад поставщика' (ScheduleOrder scheduleOrder) = name(supplierStock(scheduleOrder));
//customerStockScheduleOrder = ABSTRACT Stock(ScheduleOrder);
//nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = nameStock(customerStockScheduleOrder(scheduleOrder));

// ---------------------  Склады, для которых действует график заказов

stocks 'Склады' (scheduleOrder) = ABSTRACT VARSTRING[500] (ScheduleOrder) MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;

addScheduleOrderSupplierCustomer 'Добавить' = ACTION ABSTRACT LIST (LegalEntity, LegalEntity) IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;
edit 'Редактировать' = ACTION ABSTRACT LIST (ScheduleOrder) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

GROUP schedule 'График' : public;
countDaysPreOrders 'Кол-во дней для предварительных заказов' = DATA INTEGER () IN schedule;

addScheduleOrderDetail 'Сгенерировать заказы по графикам без даты окончания' = ACTION ABSTRACT LIST () IN schedule;

defaultGenType = DATA GenType ();
nameDefaultGenType 'Тип генерации (по-умолчанию)' ()= staticCaption(defaultGenType()) IN schedule;


EXTEND FORM options PROPERTIES() countDaysPreOrders, nameDefaultGenType, addScheduleOrderDetail;
DESIGN options {
    orders {
        MOVE PROPERTY(countDaysPreOrders());
        MOVE PROPERTY(nameDefaultGenType());
        MOVE PROPERTY(addScheduleOrderDetail());
    }
}

META defineScheduleOrder(sign, supplierFilter, customerFilter, stockFilter)

    CLASS ScheduleOrder 'График поставок'##sign : ScheduleOrder.ScheduleOrder;
    CLASS ScheduleOrderDetail 'Заказ по графику'##sign : ScheduleOrder.ScheduleOrderDetail;

    //общие свойства
    type 'Тип генерации графика (ИД)' = DATA GenType (ScheduleOrder);
    type(ScheduleOrder scheduleOrder) += type(scheduleOrder);
    nameType 'Тип генерации графика' (ScheduleOrder scheduleOrder) = staticCaption(type(scheduleOrder)) IN base;
    type(ScheduleOrder o) <- defaultGenType() WHEN SET(o IS ScheduleOrder);
    
    stockFilter 'Поставщик (ИД)' = DATA LegalEntity(ScheduleOrder);
    name###stockFilter 'Поставщик' (ScheduleOrder scheduleOrder) = name(stockFilter(scheduleOrder)) IN base;
    fullName###stockFilter 'Поставщик' (ScheduleOrder scheduleOrder) = fullName(stockFilter(scheduleOrder)) IN base;    

    customer 'Покупатель (ИД)' = DATA LegalEntity(ScheduleOrder);
    nameCustomer 'Покупатель' (ScheduleOrder scheduleOrder) = name(customer(scheduleOrder)) IN base;
    fullNameCustomer 'Покупатель' (ScheduleOrder scheduleOrder) = fullName(customer(scheduleOrder)) IN base;
    
    stockFilter(ScheduleOrder scheduleOrder) += stockFilter(scheduleOrder);
    customer(ScheduleOrder scheduleOrder) += customer(scheduleOrder);

    stockFilter##Stock = DATA Stock(ScheduleOrder);
    name###stockFilter##Stock 'Склад поставщика' (ScheduleOrder scheduleOrder) = name(stockFilter##Stock(scheduleOrder));

    @defineDocumentHeaderCreated(ScheduleOrder);

//    customerStockScheduleOrder = DATA Stock(ScheduleOrder);
//    nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = nameStock(customerStockScheduleOrder(scheduleOrder));

    stockFilter##Stock(ScheduleOrder scheduleOrder) += stockFilter##Stock(scheduleOrder);
//    ScheduleOrder.customerStockScheduleOrder(scheduleOrder) += customerStockScheduleOrder(scheduleOrder);
    
    CONSTRAINT stockFilter(ScheduleOrder scheduleOrder) AND stockFilter##Stock(scheduleOrder) AND NOT
    in(stockFilter(scheduleOrder), stockFilter##Stock(scheduleOrder))
        CHECKED BY stockFilter##Stock[ScheduleOrder]
            MESSAGE 'Поставщик и склад поставщика для графика заказов не имеют связи';

//    CONSTRAINT customerScheduleOrder(scheduleOrder) AND customerStockScheduleOrder(scheduleOrder) AND NOT
//    inLegalEntityStock(customerScheduleOrder(scheduleOrder), customerStockScheduleOrder(scheduleOrder))
//        CHECKED BY customerScheduleOrder, customerStockScheduleOrder
//            MESSAGE 'Покупатель и склад покупателя для графика заказов не имеют связи';

    // ---------------------  Склады, для которых действует график заказов
    
    allStocks 'Отм' = DATA BOOLEAN (ScheduleOrder);
    
    TABLE ScheduleOrderStockGroup(ScheduleOrder, StockGroup);
    dataIn 'Отм' = DATA BOOLEAN (ScheduleOrder, StockGroup);
    
    TABLE ScheduleOrderStock(ScheduleOrder, Stock);
    dataIn 'Отм' = DATA BOOLEAN (ScheduleOrder, Stock);
    
    levelParent (scheduleOrder, stockGroup) = GROUP MIN level(StockGroup stockGroup, StockGroup parent) IF dataIn(ScheduleOrder scheduleOrder, parent)
                                                                   BY scheduleOrder, stockGroup PERSISTENT;
    
    inParent (ScheduleOrder scheduleOrder, StockGroup stockGroup) = TRUE IF levelParent (scheduleOrder, stockGroup) PERSISTENT;
    
    in 'Отм' (ScheduleOrder scheduleOrder, StockGroup stockGroup) = OVERRIDE
        allStocks(scheduleOrder) AND stockGroup IS StockGroup,
        inParent (scheduleOrder, stockGroup),
        dataIn(scheduleOrder, stockGroup);
    
    in 'Отм' (ScheduleOrder scheduleOrder, Stock stock) =
        (OVERRIDE in(scheduleOrder, stockGroup(stock)),                  
                  dataIn(scheduleOrder, stock))
        AND is###customerFilter(stock)
        AND in(customer(scheduleOrder), stock);     
         
         
    backgroundAllStocks 'Цвет' (ScheduleOrder scheduleOrder) = RGB(0,0,0) IF allStocks(scheduleOrder);      
           
    background 'Цвет' (ScheduleOrder scheduleOrder, StockGroup stockGroup) = IF dataIn(scheduleOrder, stockGroup) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF (OVERRIDE allStocks(scheduleOrder) AND stockGroup IS StockGroup, inParent (scheduleOrder, stockGroup));    
        
    background'Цвет' (ScheduleOrder scheduleOrder, Stock stock) = IF dataIn(scheduleOrder, stock) AND is###customerFilter(stock) AND in(customer(scheduleOrder), stock) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in(scheduleOrder, stockGroup(stock)) AND is###customerFilter(stock) AND in(customer(scheduleOrder), stock);           
         
         
    
    stocks 'Склады' (ScheduleOrder scheduleOrder) = VARSTRING[500]([ = GROUP CONCAT name(Stock stock) IF in(ScheduleOrder scheduleOrder, stock) , ', '
                                           BY scheduleOrder
                                           ORDER stock](scheduleOrder)) MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;
    stocks(ScheduleOrder scheduleOrder) += stocks(scheduleOrder);            
                                                                                                           
    startDate 'Дата начала' = DATA DATE (ScheduleOrder) IN base;
    endDate 'Дата окончания' = DATA DATE (ScheduleOrder) IN base;

    startDate (ScheduleOrder scheduleOrder) += startDate(scheduleOrder);
    endDate (ScheduleOrder scheduleOrder) += endDate(scheduleOrder);

    dataDayBefore 'За сколько дней формировать заказ' = DATA INTEGER (ScheduleOrder);
    dayBefore 'За сколько дней формировать заказ' (ScheduleOrder s) = OVERRIDE 1 IF s IS ScheduleOrder, dataDayBefore(s);

    //свойства "Каждые N недель"
    period 'Кол-во недель между поставками' = DATA INTEGER (ScheduleOrder);
    overPeriod 'Кол-во недель между поставками' (ScheduleOrder scheduleOrder) = OVERRIDE 1 IF scheduleOrder IS ScheduleOrder, period(scheduleOrder);

    //свойства "Каждые N дней"
    dayAfter 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (ScheduleOrder);
    dayLastOrder 'Дата последнего заказа' = DATA DATE (ScheduleOrder);

    //свойства "По числам"
    stringNumber 'Числа месяца поставок (указывать через запятую)' = DATA VARSTRING[100] (ScheduleOrder);
    transferDay 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (ScheduleOrder);
    nameTransferDay 'День на который переносить поставки с Субботы и Воскресенья' (ScheduleOrder scheduleOrder) = staticCaption(transferDay(scheduleOrder));
    CONSTRAINT transferDay(ScheduleOrder scheduleOrder) != DOW.friday AND transferDay(scheduleOrder) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

    //свойства "По дням недели и месяца"
    TABLE scheduleOrderMonth(ScheduleOrder, Month);
    inScheduleOrder 'Включать' = DATA BOOLEAN (ScheduleOrder, Month);
    inAllMonth 'Включить все месяцы' = DATA BOOLEAN (ScheduleOrder);
    inAllMonth (ScheduleOrder s) <- TRUE WHEN SET(type(s) == GenType.genDayMonth);
    inScheduleOrder(ScheduleOrder scheduleOrder, Month month) <- inAllMonth(scheduleOrder) WHEN SET(inAllMonth(scheduleOrder) AND month IS Month);

    CLASS ScheduleOrderTime 'День недели';
    TABLE scheduleOrderTime (ScheduleOrderTime);
    
    scheduleOrder 'График поставок' = DATA ScheduleOrder (ScheduleOrderTime) NOT NULL DELETE;
    
    orderDOW 'День недели заказа' = DATA DOW (ScheduleOrderTime) NOT NULL;
    orderNameDOW 'День недели заказа' (ScheduleOrderTime d) = staticCaption(orderDOW(d));
    
    shipmentDOW 'День недели поставки' = DATA DOW (ScheduleOrderTime) NOT NULL;
    shipmentNameDOW 'День недели поставки' (ScheduleOrderTime d) = staticCaption(shipmentDOW(d));

    shipmentTime 'Кол-во дней до поставки' (ScheduleOrderTime d) = OVERRIDE 0 IF d IS ScheduleOrderTime, 
                                                                        distanceDOWDOW(orderDOW(d), shipmentDOW(d));

    shipmentScheduleOrderTime = GROUP AGGR ScheduleOrderTime d BY scheduleOrder(d), shipmentDOW(d); 

    toShowGenDay (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genDays;
    toShowGenNumber (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genNumber;
    toShowGenDayMonth (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genDayMonth;
    toShowMonths (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genDayMonth AND NOT inAllMonth(scheduleOrder);
    
    dateOrder 'Дата заказа' = DATA DATE (ScheduleOrderDetail) IN recognize;
    dateSupply 'Дата поставки' = DATA DATE (ScheduleOrderDetail) IN recognize;
    
    isClosed  'Аннулирован' = DATA BOOLEAN (ScheduleOrderDetail );
    isOpened  'Не аннулирован' (ScheduleOrderDetail o) = o IS ScheduleOrderDetail  AND NOT isClosed (o) PERSISTENT;

    close  'Аннулировать' (ScheduleOrderDetail o) = ACTION NEWSESSION { isClosed (o) <- TRUE; apply(); } TOOLBAR CONFIRM;

    open  'Отменить аннулирование' (ScheduleOrderDetail o) = ACTION NEWSESSION { isClosed (o) <- NULL; apply(); } TOOLBAR CONFIRM;
    
//    isClosedScheduleOrderDetail(d) += isClosedScheduleOrderDetail(d);
    
    scheduleOrder 'График поставок' = DATA ScheduleOrder(ScheduleOrderDetail) NOT NULL DELETE;
    scheduleOrder(ScheduleOrderDetail d) += scheduleOrder(d);
    
    operation = DATA Operation (ScheduleOrder);
    nameOperation 'Операция' = name(operation(ScheduleOrder scheduleOrder));
    idOperation 'ID операции' = id(operation(ScheduleOrder scheduleOrder));
    operation(ScheduleOrder scheduleOrder) += operation(scheduleOrder);

    operation (ScheduleOrderDetail scheduleOrderDetail) = operation(scheduleOrder(scheduleOrderDetail));    
    nameOperation 'Операция' (ScheduleOrderDetail scheduleOrderDetail) = name(operation(scheduleOrderDetail));    

    stockFilter(ScheduleOrderDetail scheduleOrderDetail) = stockFilter(scheduleOrder(scheduleOrderDetail));
    name###stockFilter 'Поставщик' (ScheduleOrderDetail scheduleOrderDetail) = name(stockFilter(scheduleOrderDetail)) IN recognize;

    customer(ScheduleOrderDetail scheduleOrderDetail) = customer(scheduleOrder(scheduleOrderDetail));
    nameCustomer 'Покупатель' (ScheduleOrderDetail scheduleOrderDetail) = name(customer(scheduleOrderDetail));

    stockFilter##Stock(ScheduleOrderDetail scheduleOrderDetail) = stockFilter##Stock(scheduleOrder(scheduleOrderDetail));
    name###stockFilter##Stock 'Склад поставщика' (ScheduleOrderDetail scheduleOrderDetail) = name(stockFilter##Stock(scheduleOrderDetail));

//    customerStockScheduleOrderDetail(scheduleOrderDetail) = customerStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
//    nameCustomerStockScheduleOrderDetail 'Склад покупателя' (scheduleOrderDetail) = nameStock(customerStockScheduleOrderDetail(scheduleOrderDetail));

    customerStock(scheduleOrderDetail) = DATA Stock (ScheduleOrderDetail);
    nameCustomerStock 'Склад покупателя' (ScheduleOrderDetail scheduleOrderDetail) = name(customerStock(scheduleOrderDetail)) IN recognize;
    
    countDetails (scheduleOrder, dateSupply, dateOrder, customerStock)= GROUP SUM 1
        BY  scheduleOrder(ScheduleOrderDetail d), dateSupply(d), dateOrder(d), customerStock(d);   
        
    CONSTRAINT scheduleOrder(ScheduleOrderDetail scheduleOrderDetail1) == scheduleOrder(ScheduleOrderDetail scheduleOrderDetail2) AND
               dateSupply(scheduleOrderDetail1) == dateSupply(scheduleOrderDetail2) AND
               dateOrder(scheduleOrderDetail1) == dateOrder(scheduleOrderDetail2) AND 
               customerStock(scheduleOrderDetail1) == customerStock(scheduleOrderDetail2) AND NOT
               scheduleOrderDetail1 == scheduleOrderDetail2 MESSAGE 'Совпадение даты заказа и даты поставки';        

    tmpDate = DATA LOCAL DATE();
    tmpDateP = DATA LOCAL DATE();
    tmpDateS = DATA LOCAL DATE();
    
    overCreate = ACTION ABSTRACT LIST (ScheduleOrderDetail); 

    create 'Сгенерировать предварительные заказы'(ScheduleOrder scheduleOrder) = ACTION  {
        LOCAL toDate = DATE ();    
        toDate() <- OVERRIDE sum(currentDate(), countDaysPreOrders()), endDate(scheduleOrder);
    
        // генерация через N дней
        IF type(scheduleOrder) == GenType.genDays THEN {
            tmpDate() <- dayLastOrder(scheduleOrder);
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= toDate() DO {
            
                IF tmpDate() >= ( IF endDate(scheduleOrder) THEN startDate(scheduleOrder) ELSE currentDate()) THEN {
                    FOR in(scheduleOrder, Stock stock) DO { 
                        FOR ADDOBJ o = ScheduleOrderDetail DO {
                            dateOrder(o) <- subtract(tmpDate(), dayBefore(scheduleOrder));
                            dateSupply(o) <- tmpDate();
                            scheduleOrder(o) <- scheduleOrder;
                            customerStock(o) <- stock;
                            
                            // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                            DELETE o WHERE countDetails(scheduleOrder(o), dateSupply(o), dateOrder(o), stock) > 1 ;
                        }
                    }
                }
                tmpDate() <- sum(tmpDate(), dayAfter(scheduleOrder));
            }
        }

        // генерация по числам
        IF type(scheduleOrder) == GenType.genNumber THEN {
            tmpDate() <- (IF endDate(scheduleOrder) THEN startDate(scheduleOrder) ELSE currentDate());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= toDate() DO {
                IF isWordInCSV(extractDay(tmpDate()), stringNumber(scheduleOrder)) == 1 THEN {
                    FOR in(scheduleOrder, Stock stock) DO {                     
                        FOR ADDOBJ o = ScheduleOrderDetail DO {
                            tmpDateS() <- tmpDate();
                            scheduleOrder(o) <- scheduleOrder;
                            customerStock(o) <- stock;                            
                            // если попали на субботу или воскресенье
                            IF extractDOWNumber(tmpDateS()) == 0 OR extractDOWNumber(tmpDateS()) == 6 THEN {
                                IF number(transferDay(scheduleOrder)) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                    WHILE extractDOWNumber(tmpDateS()) != 1 DO tmpDateS() <- sum(tmpDateS(), 1);
                                }
                                ELSE {
                                    // если нужно переносить на пятницу, то отнимаем
                                    WHILE extractDOWNumber(tmpDateS()) != 5 DO tmpDateS() <- subtract(tmpDateS(), 1);
                                }
                            }
                            dateSupply(o) <- tmpDateS();
                            dateOrder(o) <- subtract(tmpDateS(), dayBefore(scheduleOrder));
                            // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                            DELETE o WHERE countDetails(scheduleOrder(o), dateSupply(o), dateOrder(o), stock) > 1 ;
                        }
                    }
                }
                tmpDate() <- sum(tmpDate(), 1);
            }
        }

        // генерация по дням и месяцам
        IF type(scheduleOrder) == GenType.genDayMonth THEN {
            tmpDate() <- (IF endDate(scheduleOrder) THEN startDate(scheduleOrder) ELSE currentDate());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= toDate() DO {
                tmpDateP() <- tmpDate();
                WHILE tmpDate() < sum(tmpDateP(), 7) AND tmpDate() <= toDate() DO {
                    IF inScheduleOrder(scheduleOrder, extractMonth(tmpDate())) AND shipmentScheduleOrderTime(scheduleOrder, extractDOW(tmpDate())) THEN {
                        LOCAL orderDate = DATE();
                        orderDate() <- subtract(tmpDate(), 
                                                    shipmentTime(shipmentScheduleOrderTime(scheduleOrder, 
                                                                                                                            extractDOW(tmpDate()))));
                        FOR in(scheduleOrder, Stock stock) AND NOT countDetails(scheduleOrder, tmpDate(), orderDate(), stock) DO {                     
                            FOR ADDOBJ o = ScheduleOrderDetail DO {
                                dateOrder(o) <- orderDate();
                                dateSupply(o) <- tmpDate();
                                scheduleOrder(o) <- scheduleOrder;
                                customerStock(o) <- stock;   
                                overCreate(o);                                                                                                                                                               
                            }
                        }
                    }
                    tmpDate() <- sum(tmpDate(), 1);
                }
                IF overPeriod(scheduleOrder) >= 1 THEN
                    tmpDate() <- sum(tmpDate(), (overPeriod(scheduleOrder) - 1) * 7);
            }
        }

        //EXEC apply();
    } TOOLBAR;
    
    addScheduleOrderDetail() = ACTION) NEWSESSION {
        FOR ScheduleOrder o IS ScheduleOrder AND NOT endDate(o) DO {
            EXEC create(o); 
        }              
        apply();
    }  
    
    addScheduleOrderDetail() += ACTION addScheduleOrderDetail();

    monthInDate 'Месяц'(ScheduleOrderDetail scheduleOrderDetail) = extractMonthName(dateSupply(scheduleOrderDetail));
    DOWInDate 'День недели'(ScheduleOrderDetail scheduleOrderDetail) = extractDOWName(dateSupply(scheduleOrderDetail));

    order = STRUCT(dateSupply(ScheduleOrderDetail scheduleOrderDetail), scheduleOrderDetail) IF isOpened(scheduleOrderDetail) PERSISTENT;

    concatNextDetail(scheduleOrderDetail, scheduleOrder) = GROUP MIN order(ScheduleOrderDetail scheduleOrderDetail1) IF 
                                                                                  dateSupply(scheduleOrderDetail1) > dateSupply(ScheduleOrderDetail scheduleOrderDetail)
                                                                               BY scheduleOrderDetail, scheduleOrder(scheduleOrderDetail1);

    next(ScheduleOrderDetail scheduleOrderDetail) = concatNextDetail(scheduleOrderDetail, scheduleOrder(scheduleOrderDetail))[2];

    dateSupplyNext(ScheduleOrderDetail scheduleOrderDetail) = dateSupply(next(scheduleOrderDetail));

    scheduleOrderDetail = DATA ScheduleOrderDetail(UserOrder);
    quantityOrders 'Кол-во заказов' (scheduleOrderDetail) =
        GROUP SUM 1 IF stockFilter##Stock[Order](UserOrder userOrder)==stockFilter##Stock(ScheduleOrderDetail scheduleOrderDetail) AND
                       customerStock[Order](userOrder)==customerStock(scheduleOrderDetail) AND
                       shipmentDate(userOrder)==dateSupply(scheduleOrderDetail) AND
                       date[Order](userOrder)==dateOrder(scheduleOrderDetail) AND
                       isOpened(scheduleOrderDetail)
               BY scheduleOrderDetail PERSISTENT;
               
    lastScheduleOrderDetail###stockFilter##Customer (d,s,ss,c,cs) = 
        GROUP LAST ScheduleOrderDetail sd
               BY DATE d, stockFilter(sd), stockFilter##Stock(sd), customer(sd), customerStock(sd)
               ORDER dateOrder(sd), sd 
               WHERE dateOrder(sd) <= (d AS DATE) AND isOpened(sd);             
    isLast (ScheduleOrderDetail sd,DATE d)= lastScheduleOrderDetail###stockFilter##Customer(d,stockFilter(sd), stockFilter##Stock(sd), customer(sd), customerStock(sd)) == sd;           

    lastScheduleOrderDetail###stockFilter##Customer (s,ss,c,cs) = 
        GROUP LAST ScheduleOrderDetail sd
               BY stockFilter(sd), stockFilter##Stock(sd), customer(sd), customerStock(sd)
               ORDER dateOrder(sd), sd 
               WHERE isOpened(sd);             
    isLast (ScheduleOrderDetail sd)= lastScheduleOrderDetail###stockFilter##Customer(stockFilter(sd), stockFilter##Stock(sd), customer(sd), customerStock(sd)) == sd;   

    overCreate = ACTION ABSTRACT LIST (UserOrder);

    createScheduleUser(ScheduleOrderDetail scheduleOrderDetail) 'Создать заказ' = scheduleOrderDetail) NEWSESSION {
        FOR ADDOBJ o = UserOrder DO {
            scheduleOrderDetail(o) <- scheduleOrderDetail;
            date(o) <- currentDate();
            time(o) <- currentTime();
            shipmentDate(o) <- dateSupply(scheduleOrderDetail);
            shipmentTime(o) <- currentTime();
            nextShipmentDate(o) <- dateSupplyNext(scheduleOrderDetail);
            stockFilter(o) <- stockFilter(scheduleOrderDetail);
            customer(o) <- customer(scheduleOrderDetail);
            stockFilter##Stock(o) <- stockFilter##Stock(scheduleOrderDetail);
            customerStock(o) <- customerStock(scheduleOrderDetail);

            IF operation(scheduleOrderDetail) THEN
                operation(o) <- operation(scheduleOrderDetail)
            ELSE
                IF countOperation###stockFilter##Customer###stockFilter##Customer(stockFilter(o), customer(o), stockFilter##Stock(o), customerStock(o), currentUser()) == 1 THEN 
                    operation(o) <- defaultOperation###stockFilter##Customer###stockFilter##Customer(stockFilter(o), customer(o), stockFilter##Stock(o), customerStock(o), currentUser());
                    
            IF defaultPriceListType(operation(o)) THEN
                priceListType(o) <- defaultPriceListType(operation(o)); 

            EXEC overCreate(o);

            FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    @defineDocumentDetailActions(scheduleOrder, ScheduleOrderDetail);
    @defineDocumentDialogStock(scheduleOrder, supplierFilter, stockFilter, );

    @defineDocumentDialogSupplierCustomerLegalEntity(scheduleOrder, supplierFilter, customerFilter);
       
    countShipmentScheduleOrderTime (scheduleOrder, dow) = GROUP SUM 1 BY scheduleOrder(ScheduleOrderTime d), shipmentDOW(d);   
    scheduleOrderTimeIn 'Вкл.' (ScheduleOrder scheduleOrder, DOW dow)= TRUE IF [ = GROUP SUM 1 BY scheduleOrder(ScheduleOrderTime d), shipmentDOW(d)](scheduleOrder, dow)(ScheduleOrder scheduleOrder, DOW dow);   

    setScheduleOrderTimeIn = dow) {
        IF NOT scheduleOrderTimeIn(scheduleOrder, dow) THEN {
            LOCAL transfer = INTEGER();
            FOR ADDOBJ  t = ScheduleOrderTime DO {
                scheduleOrder(t) <- scheduleOrder;
                shipmentDOW(t) <- dow; 

                IF number(dow) == 0 THEN transfer() <- 7 ELSE IF number(dow) < dayBefore(scheduleOrder) THEN transfer() <- 5 ELSE transfer() <- 0; //+7-2
                
                CASE WHEN transfer() + number(dow) - dayBefore(scheduleOrder) == 0 THEN orderDOW(t) <- DOW.friday
                WHEN transfer() + number(dow) - dayBefore(scheduleOrder) == 6 THEN orderDOW(t) <- DOW.tuesday
                ELSE orderDOW(t) <- DOW(transfer() + number(dow) - dayBefore(scheduleOrder));       
            }
        }(ScheduleOrder scheduleOrder, DOW dow)
    }
    
    changeScheduleOrderTimeIn DOW dow) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            setScheduleOrderTimeIn(scheduleOrder, dow) ;
        } ELSE {
            DELETE ScheduleOrderTime t WHERE t IS ScheduleOrderTime AND scheduleOrder(t) == scheduleOrder AND shipmentDOW(t) == dow;
        }
    }    
    
    FORM scheduleOrder 'График поставок'##sign
        OBJECTS s=ScheduleOrder FIXED PANEL
        PROPERTIES (s) name###stockFilter ON CHANGE change###stockFilter###supplierFilter(s), 
                       name###stockFilter##Stock ON CHANGE change###stockFilter##Stock###supplierFilter(s), 
                       nameCustomer ON CHANGE changeCustomer###customerFilter(s), nameOperation,
                       startDate, endDate, nameType, 
                       overPeriod SHOWIF toShowGenDayMonth(s), inAllMonth SHOWIF toShowGenDayMonth(s), dayBefore,
                       dayLastOrder SHOWIF toShowGenDay(s), dayAfter SHOWIF toShowGenDay(s), 
                       stringNumber SHOWIF toShowGenNumber(s), nameTransferDay SHOWIF toShowGenNumber(s)

        OBJECTS dow=DOW FIXED GRID 
        PROPERTIES(dow) READONLY SHOWIF toShowGenDayMonth(s) staticCaption, number
        PROPERTIES      SHOWIF toShowGenDayMonth(s) scheduleOrderTimeIn(s,dow) ON CHANGE changeScheduleOrderTimeIn(s,dow)    
        ORDER BY number(dow)
        OBJECTS m=Month FIXED GRID
        PROPERTIES(m) READONLY staticCaption SHOWIF toShowMonths(s)
        PROPERTIES(s, m) inScheduleOrder SHOWIF toShowMonths(s)

        OBJECTS d=ScheduleOrderTime FIXED GRID
        PROPERTIES(d) SHOWIF toShowGenDayMonth(s) orderNameDOW, shipmentNameDOW, shipmentTime, ADDOBJ, DELETESESSION
        FILTERS scheduleOrder(d) == s
        
        TREE stockTree a=STRING[3], sg = StockGroup PARENT parent
        PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
        PROPERTIES(s) allStocks TODRAW a FORCE GRID BACKGROUND backgroundAllStocks(s)
        PROPERTIES(s, sg) in BACKGROUND background(s, sg)
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a)
        FILTERS count###customerFilter##Stock(sg)
    
        OBJECTS ts = Stock
        PROPERTIES READONLY  name(ts)
        PROPERTIES(s, ts)    in BACKGROUND background(s, ts)
        FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParent(sg, ts),
                in(customer(s), ts),
                is###customerFilter(ts)
        FILTERGROUP filters2
                FILTER 'Выбранные склады' in(s, ts) 'F11' 
        FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT        

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES (sd) isClosed, dateOrder, dateSupply
        PROPERTIES (sd) READONLY monthInDate, DOWInDate,
                        name###stockFilter, name###stockFilter##Stock,
                        nameCustomer, nameCustomerStock,
                        nameOperation
        PROPERTIES (sd) createScheduleUser, deletesd=DELETESESSION
        ORDER BY dateSupply(sd)
        PROPERTIES create(s) TODRAW sd

        PROPERTIES(sd) ADDOBJ TOOLBAR
        PROPERTIES(s) TODRAW sd deleteScheduleOrderDetail
        FILTERS scheduleOrder(sd)==s

        EDIT ScheduleOrder OBJECT (ScheduleOrder s, DOW dow)s
    ;
    
    change DOW dow) {
        IF scheduleOrderTimeIn(s, dow) THEN
            SEEK scheduleOrder.d [= GROUP MAX ScheduleOrderTime d BY scheduleOrder(d), shipmentDOW(d)](s, dow);
    }
    EXTEND FORM scheduleOrder
        EVENTS
            ON CHANGE dow change(s, dow)
    ;

    DESIGN scheduleOrder {
        main {
            preferredSize = (1024, 768);
            NEW header {
                type = CONTAINERH;
                NEW suppContainer {
                    caption = 'Поставщик';
                    type = COLUMNS;
                    columns = 1;
                    MOVE PROPERTY(name###stockFilter(s));
                    MOVE PROPERTY(name###stockFilter##Stock(s));
                }
                
                NEW secondContainer{
                    type = CONTAINERV;
                    NEW custContainer {
                        caption = 'Покупатель';
                        type = COLUMNS;
                        columns = 1;
                        MOVE PROPERTY(nameCustomer(s));
                    }
                    
                    NEW operationContainer {
                        caption = 'Операция';
                        type = COLUMNS;
                        columns = 1;
                        MOVE PROPERTY(nameOperation(s));
                    }                    
                }
    
                NEW dateContainer {
                    caption = 'Сроки';
                    type = COLUMNS;
                    columns = 1;
                    MOVE PROPERTY(startDate(s));
                    MOVE PROPERTY(endDate(s));
                }
            }
    
            NEW bottomContainer {
                fill = 1;
                type = TABBED;
                NEW stocksContainer {
                    fill = 1;
                    caption = 'Склады';
                    type = SPLITH;
                    MOVE stockTree.tree.box {
                        caption = 'Группы складов';
                    }
                    MOVE ts.box {
                        fill = 2;
                    }
                }    
                  
                NEW params {
                    caption = 'Параметры';
                    NEW paramsHeader {
                        NEW paramsProps {
                            caption = 'Общие';
                            type = CONTAINERV;
                            MOVE PROPERTY(nameType(s));
                            MOVE PROPERTY(dayBefore(s));
                        }
    
                        NEW paramsCustom {
                            caption = 'Параметры графика';
                            MOVE PROPERTY(overPeriod(s));
                            MOVE PROPERTY(inAllMonth(s));
                            MOVE PROPERTY(dayLastOrder(s));
                            MOVE PROPERTY(dayAfter(s));
                            MOVE PROPERTY(stringNumber(s));
                            MOVE PROPERTY(nameTransferDay(s));
                        }
                    }
    
                    NEW days {
                        fill = 1;
                        type = CONTAINERH;
                        MOVE dow.box {
                            PROPERTY (staticCaption(dow)) { caption = 'День недели поставки';}
                        }
                        MOVE d.box;
                        MOVE m.box;
                    }
                }
                
                MOVE sd.box {
                    caption = 'Предварительные заказы';
                }
            }
            MOVE functions.box;
        }
    }
    
    overCopy = ACTION ABSTRACT LIST (ScheduleOrder, ScheduleOrder(ScheduleOrder scheduleOrder));
    copy  (ScheduleOrder scheduleOrder) NEWSESSION {
        FOR ADDOBJ o = ScheduleOrder DO {
            stockFilter(o) <- stockFilter(scheduleOrder);
            stockFilter##Stock(o) <- stockFilter##Stock(scheduleOrder);
            customer(o) <- customer(scheduleOrder);
//            customerStockScheduleOrder(o) <- customerStockScheduleOrder(scheduleOrder);
            type(o) <- type(scheduleOrder);
            dayBefore(o) <- dayBefore(scheduleOrder);
            dayLastOrder(o) <- dayLastOrder(scheduleOrder);
            dayAfter(o) <- dayAfter(scheduleOrder);
            startDate(o) <- startDate(scheduleOrder);
            endDate(o) <- endDate(scheduleOrder);
            stringNumber(o) <- stringNumber(scheduleOrder);
            transferDay(o) <- transferDay(scheduleOrder);  
            
            FOR scheduleOrder(ScheduleOrderTime scheduleOrderTime) == scheduleOrder ADDOBJ sot=ScheduleOrderTime DO {
                scheduleOrder(sot) <- o;
                orderDOW(sot) <- orderDOW(scheduleOrderTime);
                shipmentDOW(sot) <- shipmentDOW(scheduleOrderTime); 
            }          
                   
            EXEC overCopy(scheduleOrder, o);

            FORM scheduleOrder OBJECTS s = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
                
    editNested 'Редактировать' = ACTION EDITFORM NESTED ScheduleOrder TOOLBAR;
    edit(ScheduleOrder scheduleOrder) += ACTION editNested(scheduleOrder);

    edit 'Редактировать' = ACTION EDITFORM ScheduleOrder TOOLBAR;
    edit 'Редактировать' (ScheduleOrderDetail detail) = ACTION edit(scheduleOrder(detail)) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE(LegalEntity stockFilter, LegalEntity customer) TOOLBAR;

    addScheduleOrder###stockFilter##Customersupplier, LegalEntity customer) NESTEDSESSION {
        FOR ADDOBJ s = ScheduleOrder DO {
            stockFilter(s) <- supplier;
            customer(s) <- customer;

            FORM scheduleOrder OBJECTS s = s MANAGESESSION DOCKEDMODAL;
        }
    } IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

    addScheduleOrder###stockFilter##Customer(LegalEntity supplier, LegalEntity customer) += ACTION addScheduleOrder###stockFilter##Customer(supplier, customer);

    stockFilter = DATA LOCAL LegalEntity();
    name###stockFilter 'Поставщик' = name(stockFilter());
    customer = DATA LOCAL LegalEntity();
    nameCustomer 'Покупатель' = name(customer());
    stockFilter##Stock = DATA LOCAL Stock();
    name###stockFilter##Stock 'Склад поставщика' = name(stockFilter##Stock());
    customerStock = DATA LOCAL Stock();
    nameCustomerStock 'Склад покупателя' = name(customerStock());

    CONSTRAINT stockFilter() AND stockFilter##Stock() AND NOT in(stockFilter(), stockFilter##Stock())
        CHECKED BY stockFilter##Stock[] MESSAGE 'Поставщик и склад поставщика для графика заказов не имеют связи';

    CONSTRAINT customer() AND customerStock() AND NOT in(customer(), customerStock())
        CHECKED BY customerStock[] MESSAGE 'Покупатель и склад покупателя для графика заказов не имеют связи';

    background 'Цвет' = ABSTRACT CASE COLOR (ScheduleOrderDetail);
    FORM scheduleOrderDetails 'Заказы по графику'

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () name###stockFilter, nameCustomer, name###stockFilter##Stock, nameCustomerStock

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES (sd) READONLY BACKGROUND  background(sd) isClosed, dateOrder, dateSupply,
                        monthInDate, DOWInDate,
                        name###stockFilter, name###stockFilter##Stock,
                        nameCustomer, nameCustomerStock, nameOperation, quantityOrders
        PROPERTIES (sd) createScheduleUser, edit
        PROPERTIES (sd) close  SHOWIF isOpened (sd), open  SHOWIF isClosed (sd)
//        FILTERGROUP openFilter
//            FILTER 'Не аннулированные' 'F6' isOpenedScheduleOrderDetail(sd)  
                    
        ORDER BY dateSupply(sd)

        FILTERS stockFilter(sd) == stockFilter() OR (sd IS ScheduleOrderDetail AND NOT stockFilter()),
                stockFilter##Stock(sd) == stockFilter##Stock() OR (sd IS ScheduleOrderDetail AND NOT stockFilter##Stock()),
                customer(sd) == customer() OR (sd IS ScheduleOrderDetail AND NOT customer()),
                customerStock(sd) == customerStock() OR (sd IS ScheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'Без заказов' sd IS ScheduleOrderDetail  AND NOT quantityOrders(sd) 'F11' DEFAULT
        FILTERGROUP countFilter
            FILTER 'Последний на дату' isLast(sd,d) 'F10' DEFAULT      
            FILTER 'На дату' dateOrder(sd) <= d 'F9'                                                  
             
        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time,
                                name###stockFilter, name###stockFilter##Stock, nameCustomer, nameCustomerStock,
                                countOrderDetail, quantityOrderDetail, sumOrderDetail,
                                VATSumOrderDetail, invoiceSumOrderDetail, shipmentDate, shipmentTime, 
                                closeDate, note            
        PROPERTIES ()  addUserOrder TODRAW o
        PROPERTIES (o) edit SHOWIF isOpened(o)
        PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF overShowDelete(o)
        PROPERTIES (o) close[UserOrder] FORCE PANEL TOOLBAR SHOWIF isOpened(o)
        PROPERTIES (o) open FORCE PANEL TOOLBAR SHOWIF isClosed(o)
            
        FILTERS stockFilter(o) == stockFilter() OR (o IS Order AND NOT stockFilter()),
                stockFilter##Stock(o) == stockFilter##Stock() OR (o IS Order AND NOT stockFilter##Stock()),
                customer(o) == customer() OR (o IS Order AND NOT customer()),
                customerStock(o) == customerStock() OR (o IS Order AND NOT customerStock())            
        
        FILTERGROUP date
            FILTER 'На дату' date(o) == d 'F10' DEFAULT         

        FILTERGROUP opened
            FILTER 'Открыт' isOpened(o) 'F9' DEFAULT         
                          
        OBJECTS dd=OrderDetail
        PROPERTIES (dd) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (dd) READONLY quantity, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       nameCustomerStock, shipmentDate, shipmentTime
        ORDER BY index(dd)

        FILTERS order(dd) == o                  
                          
    ;

    DESIGN scheduleOrderDetails {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dv);
            MOVE PROPERTY(name###stockFilter());
            MOVE PROPERTY(name###stockFilter##Stock());
            MOVE PROPERTY(nameCustomer());
            MOVE PROPERTY(nameCustomerStock());
        }
        MOVE sd.box;
        NEW documentDetail {
            fill = 1;
            type = TABBED;
            MOVE o.box;
            MOVE dd.box {
                fill = 1;
                caption = 'Спецификация';
            }
        
        }    
        MOVE functions.box;
    }
    @extendFormFilterAccessStock(ScheduleOrderDetail, sd, scheduleOrderDetails, supplierStock, supplierFilter);
    @extendFormFilterAccessLegalEntity(ScheduleOrderDetail, sd, scheduleOrderDetails, supplier, supplierFilter);

    @extendFormFilterAccessStock(ScheduleOrderDetail, sd, scheduleOrderDetails, customerStock, customerFilter);
    @extendFormFilterAccessLegalEntity(ScheduleOrderDetail, sd, scheduleOrderDetails, customer, customerFilter);
    
    @extendFormFilterAccessStock(Order, o, scheduleOrderDetails, supplierStock, supplierFilter);
    @extendFormFilterAccessLegalEntity(Order, o, scheduleOrderDetails, supplier, supplierFilter);    
    
    @extendFormFilterAccessStock(Order, o, scheduleOrderDetails, customerStock, customerFilter);
    @extendFormFilterAccessLegalEntity(Order, o, scheduleOrderDetails, customer, customerFilter);

    FORM scheduleOrders 'Графики поставок'

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () name###stockFilter, nameCustomer, name###stockFilter##Stock, nameCustomerStock

        OBJECTS s=ScheduleOrder
        PROPERTIES(s) READONLY name###stockFilter, name###stockFilter##Stock,
                      nameCustomer, nameType

        PROPERTIES(s) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES(sd) READONLY isClosed, dateOrder, dateSupply,
                       monthInDate, DOWInDate,
                       name###stockFilter, name###stockFilter##Stock,
                       nameCustomer, nameCustomerStock
        PROPERTIES (sd) close  SHOWIF isOpened (sd), open  SHOWIF isClosed (sd)
        FILTERGROUP openFilter
            FILTER 'Не аннулированные' isOpened(sd) 'F6' DEFAULT  
            
        ORDER BY dateSupply(sd)

        FILTERS stockFilter(sd) == stockFilter() OR (sd IS ScheduleOrderDetail AND NOT stockFilter()),
                stockFilter##Stock(sd) == stockFilter##Stock() OR (sd IS ScheduleOrderDetail AND NOT stockFilter##Stock()),
                customer(sd) == customer() OR (sd IS ScheduleOrderDetail AND NOT customer()),
                customerStock(sd) == customerStock() OR (sd IS ScheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'На дату' dateSupply(sd) == d 'F10'

        FILTERGROUP orderFilter
            FILTER 'Текущего графика' scheduleOrder(sd) == s 'F11' DEFAULT
    ;

    DESIGN scheduleOrders {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dv);
            MOVE PROPERTY(name###stockFilter());
            MOVE PROPERTY(name###stockFilter##Stock());
            MOVE PROPERTY(nameCustomer());
            MOVE PROPERTY(nameCustomerStock());
        }
        MOVE s.box;
        MOVE sd.box;

        MOVE functions.box;
    }

END

filterCompanySupplier(LegalEntity legalEntity, LegalEntity legalFilt) = (isCompany(legalEntity) AND isSupplier(legalFilt)) OR
                                               (isCustomer(legalEntity) AND isCompany(legalFilt));

filterCompanyCustomer(LegalEntity legalEntity, LegalEntity legalFilt) = (isCompany(legalEntity) AND isCustomer(legalFilt)) OR
                                               (isSupplier(legalEntity) AND isCompany(legalFilt));

EXTEND FORM legalEntity

    OBJECTS ss=ScheduleOrder FIXED GRID
    PROPERTIES(ss) SHOWIF isCustomer(l) READONLY startDate, endDate, nameSupplierStock, stocks, nameType
    PROPERTIES(ss) SHOWIF isCustomer(l) DELETE FORCE PANEL TOOLBAR, edit

    FILTERS filterCompanySupplier(l, s)
    FILTERS supplier(ss) == s, customer(ss) == l

    OBJECTS sc=ScheduleOrder FIXED  GRID 
    PROPERTIES(sc) SHOWIF isSupplier(l) READONLY startDate, endDate, nameSupplierStock, stocks, nameType
    PROPERTIES(sc) SHOWIF isSupplier(l) DELETE FORCE PANEL TOOLBAR, edit

    FILTERS filterCompanyCustomer(l, c)
    FILTERS customer(sc) == c, supplier(sc) == l


;

DESIGN legalEntity {
    extendContainer {
        docPurchaseContainer{
            MOVE ss.box;
        }

        docSaleContainer{
            MOVE sc.box;
        }
    }
}

META defineScheduleOrderDashboard(sign, filterSupplier, filterCustomer)

countRemaining 'Кол-во оставшихся заказов'##sign (scheduleOrder,date) = GROUP SUM 1 IF dateSupply(ScheduleOrderDetail d) >= (DATE date AS DATE) 
                                                                                        BY scheduleOrder(d), date; 
lastScheduleOrderSupplierCustomer (s,ss,c,cs) = 
    GROUP LAST ScheduleOrder scheduleOrder IF endDate(scheduleOrder) AND in(scheduleOrder, Stock customerStock)
           BY supplier(scheduleOrder), supplierStock(scheduleOrder), customer(scheduleOrder), customerStock
           ORDER endDate(scheduleOrder), scheduleOrder 
           WHERE scheduleOrder IS ScheduleOrder;  
                                                                                                                                                                                       
//isLastScheduleOrder 'Последний график' (s)= 
//    lastScheduleOrderSupplierStockCustomerStock(supplierScheduleOrder(s),supplierStockScheduleOrder(s),customerScheduleOrder(s),customerStockScheduleOrder(s)) ==s;
    isActive(ScheduleOrder scheduleOrder, DATE date) = (startDate(scheduleOrder) <= (date AS DATE) AND endDate(scheduleOrder) >= date) OR
                                                     (startDate(scheduleOrder) <= (date AS DATE) AND NOT endDate(scheduleOrder));   
    background 'Цвет' (ScheduleOrder scheduleOrder, DATE date) = CASE WHEN startDate(scheduleOrder) > date THEN RGB(224,255,224)
                                                  WHEN endDate(scheduleOrder) < date THEN RGB(255,224,224);                                                                                                                                                                                                                           
                                                                                                                                                                                                                          
    FORM scheduleOrderDashboard 'Графики заказов' 

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock
        
        OBJECTS s=ScheduleOrder
        PROPERTIES(s) READONLY startDate, endDate, nameSupplier, nameSupplierStock,
                      nameCustomer, stocks, nameType
        PROPERTIES(s,d) READONLY countRemaining
        PROPERTIES(s) copy, EDITFORM FORCE PANEL TOOLBAR
        ORDER BY endDate(s)

        FILTERS supplier(s) == supplier() OR (s IS ScheduleOrder AND NOT supplier()),
                supplierStock(s) == supplierStock() OR (s IS ScheduleOrder AND NOT supplierStock()),
                customer(s) == customer() OR (s IS ScheduleOrder AND NOT customer())

        FILTERGROUP countFilter1
            FILTER 'Заканчивается в течение 3 дн.' endDate(s) <= sum(d,2) AND endDate(s) >= d 'F10' DEFAULT
            FILTER 'Заканчивается в течение 5 дн.' endDate(s) <= sum(d,4) AND endDate(s) >= d 'F9' 
                              
        OBJECTS ss=ScheduleOrder
        PROPERTIES(ss) BACKGROUND background(ss,d) READONLY startDate, endDate, nameSupplier, nameSupplierStock,
                      nameCustomer, stocks, nameType     
        PROPERTIES(ss) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR              
        ORDER BY startDate(ss)
              
        PROPERTIES (ss) READONLY FORCE PANEL createdTime, createdNameUser, createdHostnameComputer
              
        FILTERS supplier(ss) == supplier() OR (ss IS ScheduleOrder AND NOT supplier()),
                supplierStock(ss) == supplierStock() OR (ss IS ScheduleOrder AND NOT supplierStock()),
                customer(ss) == customer() OR (ss IS ScheduleOrder AND NOT customer())
 
    FILTERGROUP inactiveScheduleOrder
        FILTER 'Текущие' isActive(ss,d) 'F11'            
        FILTER 'Активные' isActive(ss,d) OR (startDate(ss) > d) 'F10' DEFAULT                                                        
                                         
    ;

    DESIGN scheduleOrderDashboard 'Графики заказов'###sign {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dv);
            MOVE PROPERTY(nameSupplier());
            MOVE PROPERTY(nameSupplierStock());
            MOVE PROPERTY(nameCustomer());
        }
        MOVE s.box;
        MOVE ss.box;
        MOVE functions.box;
    }
    @extendFormFilterAccessStock(scheduleOrder, s, scheduleOrderDashboard, supplierStock, filterSupplier);
    @extendFormFilterAccessLegalEntity(scheduleOrder, s, scheduleOrderDashboard, supplier, filterSupplier);
    @extendFormFilterAccessStock(scheduleOrder, ss, scheduleOrderDashboard, supplierStock, filterSupplier);
    @extendFormFilterAccessLegalEntity(scheduleOrder, ss, scheduleOrderDashboard, supplier, filterSupplier);    
    
    @extendFormFilterAccessLegalEntity(scheduleOrder, s, scheduleOrderDashboard, customer, filterCustomer);    
    @extendFormFilterAccessLegalEntity(scheduleOrder, ss, scheduleOrderDashboard, customer, filterCustomer); 
    countStocks (order)= GROUP SUM 1 IF in(ScheduleOrder order,Stock stock)
        BY order;       
    countAccess###filterCustomer##EmployeeStock (order)= GROUP SUM 1 IF access###filterCustomer(currentUser(),Stock stock) AND in(ScheduleOrder order,stock)
        BY order;
    EXTEND FORM scheduleOrderDashboard FILTERS countAccess###filterCustomer##EmployeeStock(s) OR NOT countStocks(s);
    EXTEND FORM scheduleOrderDashboard FILTERS countAccess###filterCustomer##EmployeeStock(ss) OR NOT countStocks(ss);
    
END

