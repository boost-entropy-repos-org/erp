MODULE ScheduleOrder;

REQUIRE System,
        Time,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Order;

CLASS GenType 'Тип генерации' {
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
}
FORM genTypes 'Типы генерации графиков'
    OBJECTS t = GenType
    PROPERTIES(t) READONLY staticCaption
    DIALOG GenType OBJECT t
;

CLASS ABSTRACT ScheduleOrder 'График';
TABLE scheduleOrder(ScheduleOrder);

CLASS ABSTRACT ScheduleOrderDetail 'Заказ по графику';
TABLE scheduleOrderDetail(ScheduleOrderDetail);

//isClosedScheduleOrderDetail 'Аннулирован' = ABSTRACT BOOLEAN (ScheduleOrderDetail);
//isOpenedScheduleOrderDetail= d IS ScheduleOrderDetail AND NOT isClosedScheduleOrderDetail(d);

operationScheduleOrder = ABSTRACT Operation.Operation (ScheduleOrder) PERSISTENT;
nameOperationScheduleOrder 'Операция' (scheduleOrder) = Operation.nameOperation(operationScheduleOrder(scheduleOrder));

startDateScheduleOrder 'Дата начала' = ABSTRACT DATE (ScheduleOrder) IN base;
endDateScheduleOrder 'Дата окончания' = ABSTRACT DATE (ScheduleOrder) IN base;

typeScheduleOrder 'Тип генерации графика' = ABSTRACT GenType (ScheduleOrder);
nameTypeScheduleOrder 'Тип генерации графика' (scheduleOrder) = staticCaption(typeScheduleOrder(scheduleOrder)) IN base;

supplierScheduleOrder = ABSTRACT LegalEntity(ScheduleOrder);
nameSupplierScheduleOrder 'Поставщик' (scheduleOrder) = nameLegalEntity(supplierScheduleOrder(scheduleOrder)) IN base;
customerScheduleOrder = ABSTRACT LegalEntity(ScheduleOrder);
nameCustomerScheduleOrder 'Покупатель' (scheduleOrder) = nameLegalEntity(customerScheduleOrder(scheduleOrder)) IN base;

supplierStockScheduleOrder = ABSTRACT Stock(ScheduleOrder);
nameSupplierStockScheduleOrder 'Склад поставщика' (scheduleOrder) = nameStock(supplierStockScheduleOrder(scheduleOrder));
//customerStockScheduleOrder = ABSTRACT Stock(ScheduleOrder);
//nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = nameStock(customerStockScheduleOrder(scheduleOrder));

// ---------------------  Склады, для которых действует график заказов

stocksScheduleOrder 'Склады' (scheduleOrder) = ABSTRACT VARSTRING[500] (ScheduleOrder) MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;

addScheduleOrderSupplierCustomer 'Добавить' = ABSTRACT ACTION LIST (LegalEntity, LegalEntity) IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;
editScheduleOrder 'Редактировать' = ABSTRACT ACTION LIST (ScheduleOrder) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

GROUP schedule 'График' : public;
countDaysPreOrders 'Кол-во дней для предварительных заказов' = DATA INTEGER () IN schedule;

addScheduleOrderDetail 'Сгенерировать заказы по графикам без даты окончания' = ABSTRACT ACTION LIST () IN schedule;

defaultGenType = DATA GenType ();
nameDefaultGenType 'Тип генерации (по-умолчанию)' ()= staticCaption(defaultGenType()) IN schedule;


EXTEND FORM options PROPERTIES() countDaysPreOrders, nameDefaultGenType, addScheduleOrderDetail;
EXTEND DESIGN options {
    orders {
        ADD PROPERTY(countDaysPreOrders());
        ADD PROPERTY(nameDefaultGenType());
        ADD PROPERTY(addScheduleOrderDetail());
    }
}

META defineScheduleOrder(sign, supplierFilter, customerFilter, stockFilter)

    CLASS ScheduleOrder 'График поставок'##sign : ScheduleOrder.ScheduleOrder;
    CLASS ScheduleOrderDetail 'Заказ по графику'##sign : ScheduleOrder.ScheduleOrderDetail;

    //общие свойства
    typeScheduleOrder 'Тип генерации графика (ИД)' = DATA GenType (ScheduleOrder);
    ScheduleOrder.typeScheduleOrder(scheduleOrder) += typeScheduleOrder(scheduleOrder);
    nameTypeScheduleOrder 'Тип генерации графика' (scheduleOrder) = staticCaption(typeScheduleOrder(scheduleOrder)) IN base;
    typeScheduleOrder(o) <- defaultGenType() WHEN SET(o IS ScheduleOrder);
    
    supplierScheduleOrder 'Поставщик (ИД)' = DATA LegalEntity(ScheduleOrder);
    nameSupplierScheduleOrder 'Поставщик' (scheduleOrder) = nameLegalEntity(supplierScheduleOrder(scheduleOrder)) IN base;

    customerScheduleOrder 'Покупатель (ИД)' = DATA LegalEntity(ScheduleOrder);
    nameCustomerScheduleOrder 'Покупатель' (scheduleOrder) = nameLegalEntity(customerScheduleOrder(scheduleOrder)) IN base;

    ScheduleOrder.supplierScheduleOrder(scheduleOrder) += supplierScheduleOrder(scheduleOrder);
    ScheduleOrder.customerScheduleOrder(scheduleOrder) += customerScheduleOrder(scheduleOrder);

    supplierStockScheduleOrder = DATA Stock(ScheduleOrder);
    nameSupplierStockScheduleOrder 'Склад поставщика' (scheduleOrder) = nameStock(supplierStockScheduleOrder(scheduleOrder));

//    customerStockScheduleOrder = DATA Stock(ScheduleOrder);
//    nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = nameStock(customerStockScheduleOrder(scheduleOrder));

    ScheduleOrder.supplierStockScheduleOrder(scheduleOrder) += supplierStockScheduleOrder(scheduleOrder);
//    ScheduleOrder.customerStockScheduleOrder(scheduleOrder) += customerStockScheduleOrder(scheduleOrder);
    
    CONSTRAINT supplierScheduleOrder(scheduleOrder) AND supplierStockScheduleOrder(scheduleOrder) AND NOT
    inLegalEntityStock(supplierScheduleOrder(scheduleOrder), supplierStockScheduleOrder(scheduleOrder))
        CHECKED BY supplierStockScheduleOrder
            MESSAGE 'Поставщик и склад поставщика для графика заказов не имеют связи';

//    CONSTRAINT customerScheduleOrder(scheduleOrder) AND customerStockScheduleOrder(scheduleOrder) AND NOT
//    inLegalEntityStock(customerScheduleOrder(scheduleOrder), customerStockScheduleOrder(scheduleOrder))
//        CHECKED BY customerScheduleOrder, customerStockScheduleOrder
//            MESSAGE 'Покупатель и склад покупателя для графика заказов не имеют связи';

    // ---------------------  Склады, для которых действует график заказов
    
    allStocksScheduleOrder 'Отм' = DATA BOOLEAN (ScheduleOrder);
    
    TABLE ScheduleOrderStockGroup(ScheduleOrder, StockGroup);
    dataInScheduleOrderStockGroup 'Отм' = DATA BOOLEAN (ScheduleOrder, StockGroup);
    
    TABLE ScheduleOrderStock(ScheduleOrder, Stock);
    dataInScheduleOrderStock 'Отм' = DATA BOOLEAN (ScheduleOrder, Stock);
    
    levelParentScheduleOrderStockGroup (scheduleOrder, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataInScheduleOrderStockGroup(scheduleOrder, parent)
                                                                   BY scheduleOrder, stockGroup PERSISTENT;
    
    inParentScheduleOrderStockGroup (scheduleOrder, stockGroup) = TRUE IF levelParentScheduleOrderStockGroup (scheduleOrder, stockGroup) PERSISTENT;
    
    inScheduleOrderStockGroup 'Отм' (scheduleOrder, stockGroup) = OVERRIDE
        allStocksScheduleOrder(scheduleOrder) AND stockGroup IS StockGroup,
        inParentScheduleOrderStockGroup (scheduleOrder, stockGroup),
        dataInScheduleOrderStockGroup(scheduleOrder, stockGroup);
    
    inScheduleOrderStock 'Отм' (scheduleOrder, stock) =
        (OVERRIDE inScheduleOrderStockGroup(scheduleOrder, stockGroupStock(stock)),                  
                  dataInScheduleOrderStock(scheduleOrder, stock))
        AND is###customerFilter###stock(stock)
        AND inLegalEntityStock(customerScheduleOrder(scheduleOrder), stock);      
    
    stocksScheduleOrder 'Склады' (scheduleOrder) = VARSTRING[500]([ = GROUP CONCAT nameStock(stock) IF inScheduleOrderStock(scheduleOrder, stock) , ', '
                                           BY scheduleOrder
                                           ORDER stock](scheduleOrder)) MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;
    ScheduleOrder.stocksScheduleOrder(scheduleOrder) += stocksScheduleOrder(scheduleOrder);            
                                                                                                           
    startDateScheduleOrder 'Дата начала' = DATA DATE (ScheduleOrder) IN base;
    endDateScheduleOrder 'Дата окончания' = DATA DATE (ScheduleOrder) IN base;

    ScheduleOrder.startDateScheduleOrder (scheduleOrder) += startDateScheduleOrder(scheduleOrder);
    ScheduleOrder.endDateScheduleOrder (scheduleOrder) += endDateScheduleOrder(scheduleOrder);

    dayBeforeScheduleOrder 'За сколько дней формировать заказ' = DATA INTEGER (ScheduleOrder);

    //свойства "Каждые N недель"
    periodScheduleOrder 'Кол-во недель между поставками' = DATA INTEGER (ScheduleOrder);
    overPeriodScheduleOrder 'Кол-во недель между поставками' (scheduleOrder) = OVERRIDE 1 IF scheduleOrder IS ScheduleOrder, periodScheduleOrder(scheduleOrder);

    //свойства "Каждые N дней"
    dayAfterScheduleOrder 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (ScheduleOrder);
    dayLastOrderScheduleOrder 'Дата последнего заказа' = DATA DATE (ScheduleOrder);

    //свойства "По числам"
    stringNumberScheduleOrder 'Числа месяца поставок (указывать через запятую)' = DATA VARSTRING[100] (ScheduleOrder);
    transferDayScheduleOrder 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (ScheduleOrder);
    nameTransferDayScheduleOrder 'День на который переносить поставки с Субботы и Воскресенья' (scheduleOrder) = staticCaption(transferDayScheduleOrder(scheduleOrder));
    CONSTRAINT transferDayScheduleOrder(scheduleOrder) != DOW.friday AND transferDayScheduleOrder(scheduleOrder) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

    //свойства "По дням недели и месяца"
    TABLE scheduleOrderMonth(ScheduleOrder, Month);
    inMonthScheduleOrder 'Включать' = DATA BOOLEAN (ScheduleOrder, Month);
    inAllMonthScheduleOrder 'Включить все месяцы' = DATA BOOLEAN (ScheduleOrder);
    inAllMonthScheduleOrder (s) <- TRUE WHEN SET(typeScheduleOrder(s) == GenType.genDayMonth);
    inMonthScheduleOrder(scheduleOrder, month) <- inAllMonthScheduleOrder(scheduleOrder) WHEN SET(inAllMonthScheduleOrder(scheduleOrder) AND month IS Month);

    CLASS ScheduleOrderTime 'День недели';
    TABLE scheduleOrderTime (ScheduleOrderTime);
    
    scheduleOrderScheduleOrderTime 'График поставок' = DATA ScheduleOrder (ScheduleOrderTime) NOT NULL DELETE;
    
    orderDOWScheduleOrderTime 'День недели заказа' = DATA DOW (ScheduleOrderTime) NOT NULL;
    orderNameDOWScheduleOrderTime 'День недели заказа' (d) = staticCaption(orderDOWScheduleOrderTime(d));
    
    shipmentDOWScheduleOrderTime 'День недели поставки' = DATA DOW (ScheduleOrderTime) NOT NULL;
    shipmentNameDOWScheduleOrderTime 'День недели поставки' (d) = staticCaption(shipmentDOWScheduleOrderTime(d));

    shipmentTimeScheduleOrderTime 'Кол-во дней до поставки' (d) = OVERRIDE 0 IF d IS ScheduleOrderTime, 
                                                                        distanceDOWDOW(orderDOWScheduleOrderTime(d), shipmentDOWScheduleOrderTime(d));

    shipmentScheduleOrderTimeScheduleOrderDOW = GROUP AGGR d BY scheduleOrderScheduleOrderTime(d), shipmentDOWScheduleOrderTime(d); 

    toShowGenDay (scheduleOrder) = typeScheduleOrder(scheduleOrder) == GenType.genDays;
    toShowGenNumber (scheduleOrder) = typeScheduleOrder(scheduleOrder) == GenType.genNumber;
    toShowGenDayMonth (scheduleOrder) = typeScheduleOrder(scheduleOrder) == GenType.genDayMonth;

    dateOrderScheduleOrderDetail 'Дата заказа' = DATA DATE (ScheduleOrderDetail) IN base;
    dateSupplyScheduleOrderDetail 'Дата поставки' = DATA DATE (ScheduleOrderDetail) IN base;
    
    isClosedScheduleOrderDetail  'Аннулирован' = DATA BOOLEAN (ScheduleOrderDetail );
    isOpenedScheduleOrderDetail  'Не аннулирован' (o) = o IS ScheduleOrderDetail  AND NOT isClosedScheduleOrderDetail (o) PERSISTENT;

    closeScheduleOrderDetail  'Аннулировать' (o) = ACTION NEWSESSION AUTOAPPLY { isClosedScheduleOrderDetail (o) <- TRUE; } TOOLBAR CONFIRM;

    openScheduleOrderDetail  'Отменить аннулирование' (o) = ACTION NEWSESSION AUTOAPPLY { isClosedScheduleOrderDetail (o) <- NULL; } TOOLBAR CONFIRM;
    
//    isClosedScheduleOrderDetail(d) += isClosedScheduleOrderDetail(d);
    
    scheduleOrderScheduleOrderDetail 'График поставок' = DATA ScheduleOrder(ScheduleOrderDetail) NOT NULL DELETE;
    
    operationScheduleOrder = DATA Operation (ScheduleOrder);
    nameOperationScheduleOrder 'Операция' = nameOperation(operationScheduleOrder(scheduleOrder));
    idOperationScheduleOrder 'ID операции' = idOperation(operationScheduleOrder(scheduleOrder));
    ScheduleOrder.operationScheduleOrder(scheduleOrder) += operationScheduleOrder(scheduleOrder);

    operationScheduleOrderDetail (scheduleOrderDetail) = operationScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));    
    nameOperationScheduleOrderDetail 'Операция' (scheduleOrderDetail) = nameOperation(operationScheduleOrderDetail(scheduleOrderDetail));    

    supplierScheduleOrderDetail(scheduleOrderDetail) = supplierScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameSupplierScheduleOrderDetail 'Поставщик' (scheduleOrderDetail) = nameLegalEntity(supplierScheduleOrderDetail(scheduleOrderDetail));

    customerScheduleOrderDetail(scheduleOrderDetail) = customerScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameCustomerScheduleOrderDetail 'Покупатель' (scheduleOrderDetail) = nameLegalEntity(customerScheduleOrderDetail(scheduleOrderDetail));

    supplierStockScheduleOrderDetail(scheduleOrderDetail) = supplierStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
    nameSupplierStockScheduleOrderDetail 'Склад поставщика' (scheduleOrderDetail) = nameStock(supplierStockScheduleOrderDetail(scheduleOrderDetail));

//    customerStockScheduleOrderDetail(scheduleOrderDetail) = customerStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
//    nameCustomerStockScheduleOrderDetail 'Склад покупателя' (scheduleOrderDetail) = nameStock(customerStockScheduleOrderDetail(scheduleOrderDetail));

    customerStockScheduleOrderDetail(scheduleOrderDetail) = DATA Stock (ScheduleOrderDetail);
    nameCustomerStockScheduleOrderDetail 'Склад покупателя' (scheduleOrderDetail) = nameStock(customerStockScheduleOrderDetail(scheduleOrderDetail));
    
    countDetailsScheduleOrderDateSupplyDateOrder (scheduleOrder, dateSupply, dateOrder, customerStock)= GROUP SUM 1
        BY  scheduleOrderScheduleOrderDetail(d), dateSupplyScheduleOrderDetail(d), dateOrderScheduleOrderDetail(d), customerStockScheduleOrderDetail(d);   
        
    CONSTRAINT scheduleOrderScheduleOrderDetail(scheduleOrderDetail1) == scheduleOrderScheduleOrderDetail(scheduleOrderDetail2) AND
               dateSupplyScheduleOrderDetail(scheduleOrderDetail1) == dateSupplyScheduleOrderDetail(scheduleOrderDetail2) AND
               dateOrderScheduleOrderDetail(scheduleOrderDetail1) == dateOrderScheduleOrderDetail(scheduleOrderDetail2) AND 
               customerStockScheduleOrderDetail(scheduleOrderDetail1) == customerStockScheduleOrderDetail(scheduleOrderDetail2) AND NOT
               scheduleOrderDetail1 == scheduleOrderDetail2 MESSAGE 'Совпадение даты заказа и даты поставки';        

    tmpDate = DATA SESSION DATE();
    tmpDateP = DATA SESSION DATE();
    tmpDateS = DATA SESSION DATE();
    
    overCreateScheduleOrderDetail = ABSTRACT ACTION LIST (ScheduleOrderDetail); 

    createScheduleOrder 'Сгенерировать предварительные заказы' = ACTION (scheduleOrder) {
        LOCAL toDate = DATE ();    
        toDate() <- OVERRIDE sumDate(currentDate(), countDaysPreOrders()), endDateScheduleOrder(scheduleOrder);
    
        // генерация через N дней
        IF typeScheduleOrder(scheduleOrder) == GenType.genDays THEN {
            tmpDate() <- dayLastOrderScheduleOrder(scheduleOrder);
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= toDate() DO {
            
                IF tmpDate() >= ( IF endDateScheduleOrder(scheduleOrder) THEN startDateScheduleOrder(scheduleOrder) ELSE currentDate()) THEN {
                    FOR inScheduleOrderStock(scheduleOrder, stock) DO { 
                        FOR ADDOBJ o = ScheduleOrderDetail DO {
                            dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDate(), dayBeforeScheduleOrder(scheduleOrder));
                            dateSupplyScheduleOrderDetail(o) <- tmpDate();
                            scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                            customerStockScheduleOrderDetail(o) <- stock;
                            
                            // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                            DELETE o WHERE countDetailsScheduleOrderDateSupplyDateOrder(scheduleOrderScheduleOrderDetail(o), dateSupplyScheduleOrderDetail(o), dateOrderScheduleOrderDetail(o), stock) > 1 ;
                        }
                    }
                }
                tmpDate() <- sumDate(tmpDate(), dayAfterScheduleOrder(scheduleOrder));
            }
        }

        // генерация по числам
        IF typeScheduleOrder(scheduleOrder) == GenType.genNumber THEN {
            tmpDate() <- (IF endDateScheduleOrder(scheduleOrder) THEN startDateScheduleOrder(scheduleOrder) ELSE currentDate());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= toDate() DO {
                IF isWordInCSV(extractDay(tmpDate()), stringNumberScheduleOrder(scheduleOrder)) == 1 THEN {
                    FOR inScheduleOrderStock(scheduleOrder, stock) DO {                     
                        FOR ADDOBJ o = ScheduleOrderDetail DO {
                            tmpDateS() <- tmpDate();
                            scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                            customerStockScheduleOrderDetail(o) <- stock;                            
                            // если попали на субботу или воскресенье
                            IF extractDOWNumber(tmpDateS()) == 0 OR extractDOWNumber(tmpDateS()) == 6 THEN {
                                IF numberDOW(transferDayScheduleOrder(scheduleOrder)) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                    WHILE extractDOWNumber(tmpDateS()) != 1 DO tmpDateS() <- sumDate(tmpDateS(), 1);
                                }
                                ELSE {
                                    // если нужно переносить на пятницу, то отнимаем
                                    WHILE extractDOWNumber(tmpDateS()) != 5 DO tmpDateS() <- subtractDate(tmpDateS(), 1);
                                }
                            }
                            dateSupplyScheduleOrderDetail(o) <- tmpDateS();
                            dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDateS(), dayBeforeScheduleOrder(scheduleOrder));
                            // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                            DELETE o WHERE countDetailsScheduleOrderDateSupplyDateOrder(scheduleOrderScheduleOrderDetail(o), dateSupplyScheduleOrderDetail(o), dateOrderScheduleOrderDetail(o), stock) > 1 ;
                        }
                    }
                }
                tmpDate() <- sumDate(tmpDate(), 1);
            }
        }

        // генерация по дням и месяцам
        IF typeScheduleOrder(scheduleOrder) == GenType.genDayMonth THEN {
            tmpDate() <- (IF endDateScheduleOrder(scheduleOrder) THEN startDateScheduleOrder(scheduleOrder) ELSE currentDate());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= toDate() DO {
                tmpDateP() <- tmpDate();
                WHILE tmpDate() < sumDate(tmpDateP(), 7) AND tmpDate() <= toDate() DO {
                    IF inMonthScheduleOrder(scheduleOrder, extractMonth(tmpDate())) AND shipmentScheduleOrderTimeScheduleOrderDOW(scheduleOrder, extractDOW(tmpDate())) THEN {
                        FOR inScheduleOrderStock(scheduleOrder, stock) DO {                     
                            FOR ADDOBJ o = ScheduleOrderDetail DO {
                                dateOrderScheduleOrderDetail(o) <- subtractDate(tmpDate(), 
                                                                                shipmentTimeScheduleOrderTime(shipmentScheduleOrderTimeScheduleOrderDOW(scheduleOrder, 
                                                                                                                                                      extractDOW(tmpDate()))));
                                dateSupplyScheduleOrderDetail(o) <- tmpDate();
                                scheduleOrderScheduleOrderDetail(o) <- scheduleOrder;
                                customerStockScheduleOrderDetail(o) <- stock;   
                                overCreateScheduleOrderDetail(o);                                                                                                                                                               
                                // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                                DELETE o WHERE countDetailsScheduleOrderDateSupplyDateOrder(scheduleOrderScheduleOrderDetail(o), dateSupplyScheduleOrderDetail(o), dateOrderScheduleOrderDetail(o), stock) > 1 ;
                            }
                        }
                    }
                    tmpDate() <- sumDate(tmpDate(), 1);
                }
                tmpDate() <- sumDate(tmpDate(), (overPeriodScheduleOrder(scheduleOrder) - 1) * 7);
            }
        }

        //EXEC apply();
    } TOOLBAR;
    
    addScheduleOrderDetail() = ACTION () NEWSESSION AUTOAPPLY {
        FOR o IS ScheduleOrder AND NOT endDateScheduleOrder(o) DO {
            EXEC createScheduleOrder(o); 
        }              
    }  
    
    ScheduleOrder.addScheduleOrderDetail() += ACTION addScheduleOrderDetail();

    monthInDateScheduleOrderDetail 'Месяц'(scheduleOrderDetail) = extractMonthName(dateSupplyScheduleOrderDetail(scheduleOrderDetail));
    DOWInDateScheduleOrderDetail 'День недели'(scheduleOrderDetail) = extractDOWName(dateSupplyScheduleOrderDetail(scheduleOrderDetail));

    orderScheduleOrderDetail = STRUCT(dateSupplyScheduleOrderDetail(scheduleOrderDetail), scheduleOrderDetail) IF isOpenedScheduleOrderDetail(scheduleOrderDetail) PERSISTENT;

    concatNextScheduleOrderDetail(scheduleOrderDetail, scheduleOrder) = GROUP MIN orderScheduleOrderDetail(scheduleOrderDetail1) IF 
                                                                                  dateSupplyScheduleOrderDetail(scheduleOrderDetail1) > dateSupplyScheduleOrderDetail(scheduleOrderDetail)
                                                                               BY scheduleOrderDetail, scheduleOrderScheduleOrderDetail(scheduleOrderDetail1);

    nextScheduleOrderDetail(scheduleOrderDetail) = concatNextScheduleOrderDetail(scheduleOrderDetail, scheduleOrderScheduleOrderDetail(scheduleOrderDetail))[2];

    dateSupplyNextScheduleOrderDetail(scheduleOrderDetail) = dateSupplyScheduleOrderDetail(nextScheduleOrderDetail(scheduleOrderDetail));

    scheduleOrderDetailUserOrder = DATA ScheduleOrderDetail(UserOrder);
    quantityOrdersScheduleOrderDetail 'Кол-во заказов' (scheduleOrderDetail) =
        GROUP SUM 1 IF supplierStockOrder(userOrder)==supplierStockScheduleOrderDetail(scheduleOrderDetail) AND
                       customerStockOrder(userOrder)==customerStockScheduleOrderDetail(scheduleOrderDetail) AND
                       shipmentDateUserOrder(userOrder)==dateSupplyScheduleOrderDetail(scheduleOrderDetail) AND
                       dateOrder(userOrder)==dateOrderScheduleOrderDetail(scheduleOrderDetail) AND
                       isOpenedScheduleOrderDetail(scheduleOrderDetail)
               BY scheduleOrderDetail PERSISTENT;
               
    lastScheduleOrderDetailDateSupplierStockCustomerStock (d,s,ss,c,cs) = 
        GROUP LAST sd
               BY d, supplierScheduleOrderDetail(sd), supplierStockScheduleOrderDetail(sd), customerScheduleOrderDetail(sd), customerStockScheduleOrderDetail(sd)
               ORDER dateOrderScheduleOrderDetail(sd), sd 
               WHERE dateOrderScheduleOrderDetail(sd) <= (d AS DATE) AND isOpenedScheduleOrderDetail(sd);             
    isLastScheduleOrderDetailDate (sd,d)= lastScheduleOrderDetailDateSupplierStockCustomerStock(d,supplierScheduleOrderDetail(sd), supplierStockScheduleOrderDetail(sd), customerScheduleOrderDetail(sd), customerStockScheduleOrderDetail(sd)) == sd;           

    lastScheduleOrderDetailSupplierStockCustomerStock (s,ss,c,cs) = 
        GROUP LAST sd
               BY supplierScheduleOrderDetail(sd), supplierStockScheduleOrderDetail(sd), customerScheduleOrderDetail(sd), customerStockScheduleOrderDetail(sd)
               ORDER dateOrderScheduleOrderDetail(sd), sd 
               WHERE isOpenedScheduleOrderDetail(sd);             
    isLastScheduleOrderDetail (sd)= lastScheduleOrderDetailSupplierStockCustomerStock(supplierScheduleOrderDetail(sd), supplierStockScheduleOrderDetail(sd), customerScheduleOrderDetail(sd), customerStockScheduleOrderDetail(sd)) == sd;   

    overCreateOrder = ABSTRACT ACTION LIST (UserOrder);

    createScheduleUserOrder 'Создать заказ' = ACTION (scheduleOrderDetail) NEWSESSION {
        FOR ADDOBJ o = UserOrder DO {
            scheduleOrderDetailUserOrder(o) <- scheduleOrderDetail;
            dateUserOrder(o) <- currentDate();
            timeUserOrder(o) <- currentTime();
            shipmentDateUserOrder(o) <- dateSupplyScheduleOrderDetail(scheduleOrderDetail);
            shipmentTimeUserOrder(o) <- currentTime();
            nextShipmentDateUserOrder(o) <- dateSupplyNextScheduleOrderDetail(scheduleOrderDetail);
            supplierUserOrder(o) <- supplierScheduleOrderDetail(scheduleOrderDetail);
            customerUserOrder(o) <- customerScheduleOrderDetail(scheduleOrderDetail);
            supplierStockUserOrder(o) <- supplierStockScheduleOrderDetail(scheduleOrderDetail);
            customerStockUserOrder(o) <- customerStockScheduleOrderDetail(scheduleOrderDetail);

            IF operationScheduleOrderDetail(scheduleOrderDetail) THEN
                operationUserOrder(o) <- operationScheduleOrderDetail(scheduleOrderDetail)
            ELSE
                IF countOperationSupplierCustomerSupplierStockCustomerStockUser(supplierUserOrder(o), customerUserOrder(o), supplierStockUserOrder(o), customerStockUserOrder(o), currentUser()) == 1 THEN 
                    operationUserOrder(o) <- defaultOperationSupplierCustomerSupplierStockCustomerStockUser(supplierUserOrder(o), customerUserOrder(o), supplierStockUserOrder(o), customerStockUserOrder(o), currentUser());
                    
            IF defaultPriceListTypeOperation(operationUserOrder(o)) THEN
                priceListTypeUserOrder(o) <- defaultPriceListTypeOperation(operationUserOrder(o)); 

            EXEC overCreateOrder(o);

            FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    @defineDocumentDetailActions(scheduleOrder, ScheduleOrderDetail);
    @defineDocumentDialogStock(scheduleOrder, supplierFilter, stockFilter, );

    @defineDocumentDialogSupplierCustomerLegalEntity(scheduleOrder, supplierFilter, customerFilter);
       
    countShipmentScheduleOrderTimeScheduleOrderDOW (scheduleOrder, dow) = GROUP SUM 1 BY scheduleOrderScheduleOrderTime(d), shipmentDOWScheduleOrderTime(d);   
    scheduleOrderTimeInScheduleOrderDOW 'Вкл.' (scheduleOrder, dow)= TRUE IF [ = GROUP SUM 1 BY scheduleOrderScheduleOrderTime(d), shipmentDOWScheduleOrderTime(d)](scheduleOrder, dow);   

    changeScheduleOrderTimeInScheduleOrderDOW = ACTION (scheduleOrder, dow) {
        REQUEST BOOLEAN INPUT;
        IF requestedLogical() THEN {
            IF NOT scheduleOrderTimeInScheduleOrderDOW(scheduleOrder, dow) THEN {
                FOR ADDOBJ  t = ScheduleOrderTime DO {
                    scheduleOrderScheduleOrderTime(t) <- scheduleOrder;
                    shipmentDOWScheduleOrderTime(t) <- dow; 
                    IF numberDOW(dow) == 0 OR numberDOW(dow) == 1 THEN {
                        orderDOWScheduleOrderTime(t) <- DOW.friday;   
                    } ELSE {
                        orderDOWScheduleOrderTime(t) <- DOWNumber(numberDOW(dow)-1);      
                    }                   
                }
            }

        } ELSE {
            DELETE t WHERE t IS ScheduleOrderTime AND scheduleOrderScheduleOrderTime(t) == scheduleOrder AND shipmentDOWScheduleOrderTime(t) == dow;
        }
    }    
    
    FORM scheduleOrder 'График поставок'##sign
        OBJECTS s=ScheduleOrder FIXED PANEL
        PROPERTIES (s) nameSupplierScheduleOrder ON CHANGE changeSupplier###supplierFilter###scheduleOrder(s), 
                       nameSupplierStockScheduleOrder ON CHANGE changeSupplierStock###supplierFilter###scheduleOrder(s), 
                       nameCustomerScheduleOrder ON CHANGE changeCustomer###customerFilter###scheduleOrder(s), nameOperationScheduleOrder,
                       startDateScheduleOrder, endDateScheduleOrder, nameTypeScheduleOrder, 
                       overPeriodScheduleOrder SHOWIF toShowGenDayMonth(s), inAllMonthScheduleOrder SHOWIF toShowGenDayMonth(s),
                       beforeDay = dayBeforeScheduleOrder SHOWIF toShowGenDay(s), dayLastOrderScheduleOrder SHOWIF toShowGenDay(s), dayAfterScheduleOrder SHOWIF toShowGenDay(s), 
                       beforeNumber = dayBeforeScheduleOrder SHOWIF toShowGenNumber(s), stringNumberScheduleOrder SHOWIF toShowGenNumber(s), nameTransferDayScheduleOrder SHOWIF toShowGenNumber(s)

        OBJECTS dow=DOW FIXED GRID 
        PROPERTIES(dow) READONLY SHOWIF toShowGenDayMonth(s) staticCaption, numberDOW
        PROPERTIES      SHOWIF toShowGenDayMonth(s) scheduleOrderTimeInScheduleOrderDOW(s,dow) ON CHANGE changeScheduleOrderTimeInScheduleOrderDOW(s,dow)    
        ORDER BY numberDOW(dow)
        OBJECTS m=Month FIXED GRID
        PROPERTIES(m) READONLY staticCaption SHOWIF toShowGenDayMonth(s)
        PROPERTIES(s, m) inMonthScheduleOrder SHOWIF toShowGenDayMonth(s)

        OBJECTS d=ScheduleOrderTime FIXED GRID
        PROPERTIES(d) SHOWIF toShowGenDayMonth(s) orderNameDOWScheduleOrderTime, shipmentNameDOWScheduleOrderTime, shipmentTimeScheduleOrderTime, ADDOBJ, DELETESESSION
        FILTERS scheduleOrderScheduleOrderTime(d) == s
        
        TREE stockTree a=STRING[3], sg = StockGroup PARENT parentStockGroup
        PROPERTIES READONLY OBJVALUE(a), sgTreeName = nameStockGroup(sg)
        PROPERTIES(s) allStocksScheduleOrder TODRAW a FORCE GRID
        PROPERTIES(s, sg) inScheduleOrderStockGroup
        ORDER BY sgTreeName
        FILTERS stringEqualsAll(a)
        FILTERS count###customerFilter###stockStockGroup(sg)
    
        OBJECTS ts = Stock
        PROPERTIES READONLY  nameStock(ts)
        PROPERTIES(s, ts)    inScheduleOrderStock
        FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParentStockGroupStock(sg, ts),
                inLegalEntityStock(customerScheduleOrder(s), ts),
                is###customerFilter###stock(ts)
        FILTERGROUP filters2
                FILTER 'Выбранные склады' 'F10' inScheduleOrderStock(s, ts) 
        FILTERGROUP inactiveStock FILTER 'Активный' 'ctrl F10' activeStock(ts) DEFAULT        

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES (sd) isClosedScheduleOrderDetail, dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail
        PROPERTIES (sd) READONLY monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail,
                        nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail,
                        nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail,
                        nameOperationScheduleOrderDetail
        PROPERTIES (sd) createScheduleUserOrder, deletesd=DELETESESSION
        ORDER BY dateSupplyScheduleOrderDetail(sd)
        PROPERTIES createScheduleOrder(s) TODRAW sd

        PROPERTIES(sd) ADDOBJ TOOLBAR
        PROPERTIES(s) TODRAW sd deleteScheduleOrderDetailScheduleOrder
        FILTERS scheduleOrderScheduleOrderDetail(sd)==s

        EDIT ScheduleOrder OBJECT s
    ;

    DESIGN scheduleOrder FROM DEFAULT{
        main {
            preferredSize = (1024, 768);
            NEW header {
                type = CONTAINERH;
                NEW suppContainer {
                    caption = 'Поставщик';
                    type = COLUMNS;
                    columns = 1;
                    ADD PROPERTY(nameSupplierScheduleOrder(s));
                    ADD PROPERTY(nameSupplierStockScheduleOrder(s));
                }
                
                NEW secondContainer{
                    type = CONTAINERV;
                    NEW custContainer {
                        caption = 'Покупатель';
                        type = COLUMNS;
                        columns = 1;
                        ADD PROPERTY(nameCustomerScheduleOrder(s));
                    }
                    
                    NEW operationContainer {
                        caption = 'Операция';
                        type = COLUMNS;
                        columns = 1;
                        ADD PROPERTY(nameOperationScheduleOrder(s));
                    }                    
                }
    
                NEW dateContainer {
                    caption = 'Сроки';
                    type = COLUMNS;
                    columns = 1;
                    ADD PROPERTY(startDateScheduleOrder(s));
                    ADD PROPERTY(endDateScheduleOrder(s));
                }
            }
    
            NEW bottomContainer {
                fill = 1;
                type = TABBED;
                NEW stocksContainer {
                    fill = 1;
                    caption = 'Склады';
                    type = SPLITH;
                    ADD stockTree.tree.box {
                        caption = 'Группы складов';
                    }
                    ADD ts.box {
                        fill = 2;
                    }
                }    
                  
                NEW params {
                    caption = 'Параметры';
                    NEW paramsHeader {
                        NEW paramsProps {
                            caption = 'Общие';
                            type = CONTAINERH;
                            ADD PROPERTY(nameTypeScheduleOrder(s));
                        }
    
                        NEW paramsCustom {
                            caption = 'Параметры графика';
                            ADD PROPERTY(beforeDay);
                            ADD PROPERTY(beforeNumber);
                            ADD PROPERTY(overPeriodScheduleOrder(s));
                            ADD PROPERTY(inAllMonthScheduleOrder(s));
                            ADD PROPERTY(dayLastOrderScheduleOrder(s));
                            ADD PROPERTY(dayAfterScheduleOrder(s));
                            ADD PROPERTY(stringNumberScheduleOrder(s));
                            ADD PROPERTY(nameTransferDayScheduleOrder(s));
                        }
                    }
    
                    NEW days {
                        fill = 1;
                        type = CONTAINERH;
                        ADD dow.box {
                            PROPERTY (staticCaption(dow)) { caption = 'День недели поставки';}
                        }
                        ADD d.box;
                        ADD m.box;
                    }
                }
                
                ADD sd.box {
                    caption = 'Предварительные заказы';
                }
            }
            ADD functions.box;
        }
    }
    
    overCopyScheduleOrder = ABSTRACT ACTION LIST (ScheduleOrder, ScheduleOrder);
    copyScheduleOrder 'Копировать' = ACTION (scheduleOrder) NEWSESSION {
        FOR ADDOBJ o = ScheduleOrder DO {
            supplierScheduleOrder(o) <- supplierScheduleOrder(scheduleOrder);
            supplierStockScheduleOrder(o) <- supplierStockScheduleOrder(scheduleOrder);
            customerScheduleOrder(o) <- customerScheduleOrder(scheduleOrder);
//            customerStockScheduleOrder(o) <- customerStockScheduleOrder(scheduleOrder);
            typeScheduleOrder(o) <- typeScheduleOrder(scheduleOrder);
            dayBeforeScheduleOrder(o) <- dayBeforeScheduleOrder(scheduleOrder);
            dayLastOrderScheduleOrder(o) <- dayLastOrderScheduleOrder(scheduleOrder);
            dayAfterScheduleOrder(o) <- dayAfterScheduleOrder(scheduleOrder);
            startDateScheduleOrder(o) <- startDateScheduleOrder(scheduleOrder);
            endDateScheduleOrder(o) <- endDateScheduleOrder(scheduleOrder);
            stringNumberScheduleOrder(o) <- stringNumberScheduleOrder(scheduleOrder);
            transferDayScheduleOrder(o) <- transferDayScheduleOrder(scheduleOrder);  
            
            FOR scheduleOrderScheduleOrderTime(scheduleOrderTime) == scheduleOrder ADDOBJ sot=ScheduleOrderTime DO {
                scheduleOrderScheduleOrderTime(sot) <- o;
                orderDOWScheduleOrderTime(sot) <- orderDOWScheduleOrderTime(scheduleOrderTime);
                shipmentDOWScheduleOrderTime(sot) <- shipmentDOWScheduleOrderTime(scheduleOrderTime); 
            }          
                   
            EXEC overCopyScheduleOrder(scheduleOrder, o);

            FORM scheduleOrder OBJECTS s = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
                
    editNestedScheduleOrder 'Редактировать' = ACTION EDITFORM NESTED ScheduleOrder TOOLBAR;
    ScheduleOrder.editScheduleOrder(scheduleOrder) += ACTION editNestedScheduleOrder(scheduleOrder);

    editScheduleOrder 'Редактировать' = ACTION EDITFORM ScheduleOrder TOOLBAR;
    editScheduleOrderDetail 'Редактировать' (detail) = ACTION editScheduleOrder(scheduleOrderScheduleOrderDetail(detail)) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

    addScheduleOrderSupplierCustomer 'Добавить'##sign = ACTION (supplier, customer) NEWSESSION NESTED {
        FOR ADDOBJ s = ScheduleOrder DO {
            supplierScheduleOrder(s) <- supplier;
            customerScheduleOrder(s) <- customer;

            FORM scheduleOrder OBJECTS s = s MANAGESESSION DOCKEDMODAL;
        }
    } IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

    ScheduleOrder.addScheduleOrderSupplierCustomer(supplier, customer) += ACTION addScheduleOrderSupplierCustomer(supplier, customer);

    supplier = DATA SESSION LegalEntity();
    nameSupplier 'Поставщик' = nameLegalEntity(supplier());
    customer = DATA SESSION LegalEntity();
    nameCustomer 'Покупатель' = nameLegalEntity(customer());
    supplierStock = DATA SESSION Stock();
    nameSupplierStock 'Склад поставщика' = nameStock(supplierStock());
    customerStock = DATA SESSION Stock();
    nameCustomerStock 'Склад покупателя' = nameStock(customerStock());

    CONSTRAINT supplier() AND supplierStock() AND NOT inLegalEntityStock(supplier(), supplierStock())
        CHECKED BY supplierStock MESSAGE 'Поставщик и склад поставщика для графика заказов не имеют связи';

    CONSTRAINT customer() AND customerStock() AND NOT inLegalEntityStock(customer(), customerStock())
        CHECKED BY customerStock MESSAGE 'Покупатель и склад покупателя для графика заказов не имеют связи';

    backgroundScheduleOrderDetail 'Цвет' = ABSTRACT CASE COLOR (ScheduleOrderDetail);
    FORM scheduleOrderDetails 'Заказы по графику'

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES (sd) READONLY BACKGROUND  backgroundScheduleOrderDetail(sd) isClosedScheduleOrderDetail, dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail,
                        monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail,
                        nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail,
                        nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail, nameOperationScheduleOrderDetail, quantityOrdersScheduleOrderDetail
        PROPERTIES (sd) createScheduleUserOrder, editScheduleOrderDetail
        PROPERTIES (sd) closeScheduleOrderDetail  SHOWIF isOpenedScheduleOrderDetail (sd), openScheduleOrderDetail  SHOWIF isClosedScheduleOrderDetail (sd)
//        FILTERGROUP openFilter
//            FILTER 'Не аннулированные' 'F6' isOpenedScheduleOrderDetail(sd)  
                    
        ORDER BY dateSupplyScheduleOrderDetail(sd)

        FILTERS supplierScheduleOrderDetail(sd) == supplier() OR (sd IS ScheduleOrderDetail AND NOT supplier()),
                supplierStockScheduleOrderDetail(sd) == supplierStock() OR (sd IS ScheduleOrderDetail AND NOT supplierStock()),
                customerScheduleOrderDetail(sd) == customer() OR (sd IS ScheduleOrderDetail AND NOT customer()),
                customerStockScheduleOrderDetail(sd) == customerStock() OR (sd IS ScheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'Без заказов' 'F11' sd IS ScheduleOrderDetail  AND NOT quantityOrdersScheduleOrderDetail(sd) DEFAULT
        FILTERGROUP countFilter
            FILTER 'Последний на дату' 'F10' isLastScheduleOrderDetailDate(sd,d) DEFAULT      
            FILTER 'На дату' 'F9' dateOrderScheduleOrderDetail(sd) <= d                                                  
            FILTER 'Последний' 'F8' isLastScheduleOrderDetail(sd)
             
        OBJECTS o = Order
        PROPERTIES (o) READONLY isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder,
                                countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                                VATSumOrderDetailOrder, invoiceSumOrderDetailOrder, shipmentDateOrder, shipmentTimeOrder, 
                                closeDateOrder, noteOrder            
        PROPERTIES ()  addUserOrder TODRAW o
        PROPERTIES (o) editOrder SHOWIF isOpenedOrder(o)
        PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserOpenedOrder(o)
            
        FILTERS supplierOrder(o) == supplier() OR (o IS Order AND NOT supplier()),
                supplierStockOrder(o) == supplierStock() OR (o IS Order AND NOT supplierStock()),
                customerOrder(o) == customer() OR (o IS Order AND NOT customer()),
                customerStockOrder(o) == customerStock() OR (o IS Order AND NOT customerStock())            
        
        FILTERGROUP object##dateFilter
            FILTER 'На дату' 'F10' dateOrder(o) == d DEFAULT                       
    ;

    DESIGN scheduleOrderDetails FROM DEFAULT{
        NEW header {
            type = CONTAINERH;
            ADD PROPERTY(dv);
            ADD PROPERTY(nameSupplier());
            ADD PROPERTY(nameSupplierStock());
            ADD PROPERTY(nameCustomer());
            ADD PROPERTY(nameCustomerStock());
        }
        ADD sd.box;
        ADD o.box;
        ADD functions.box;
    }


    FORM scheduleOrders 'Графики поставок'

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock

        OBJECTS s=ScheduleOrder
        PROPERTIES(s) READONLY nameSupplierScheduleOrder, nameSupplierStockScheduleOrder,
                      nameCustomerScheduleOrder, nameTypeScheduleOrder

        PROPERTIES(s) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES(sd) READONLY isClosedScheduleOrderDetail, dateOrderScheduleOrderDetail, dateSupplyScheduleOrderDetail,
                       monthInDateScheduleOrderDetail, DOWInDateScheduleOrderDetail,
                       nameSupplierScheduleOrderDetail, nameSupplierStockScheduleOrderDetail,
                       nameCustomerScheduleOrderDetail, nameCustomerStockScheduleOrderDetail
        PROPERTIES (sd) closeScheduleOrderDetail  SHOWIF isOpenedScheduleOrderDetail (sd), openScheduleOrderDetail  SHOWIF isClosedScheduleOrderDetail (sd)
        FILTERGROUP openFilter
            FILTER 'Не аннулированные' 'F6' isOpenedScheduleOrderDetail(sd) DEFAULT  
            
        ORDER BY dateSupplyScheduleOrderDetail(sd)

        FILTERS supplierScheduleOrderDetail(sd) == supplier() OR (sd IS ScheduleOrderDetail AND NOT supplier()),
                supplierStockScheduleOrderDetail(sd) == supplierStock() OR (sd IS ScheduleOrderDetail AND NOT supplierStock()),
                customerScheduleOrderDetail(sd) == customer() OR (sd IS ScheduleOrderDetail AND NOT customer()),
                customerStockScheduleOrderDetail(sd) == customerStock() OR (sd IS ScheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'На дату' 'F10' dateSupplyScheduleOrderDetail(sd) == d

        FILTERGROUP orderFilter
            FILTER 'Текущего графика' 'F11' scheduleOrderScheduleOrderDetail(sd) == s DEFAULT
    ;

    DESIGN scheduleOrders FROM DEFAULT{
        NEW header {
            type = CONTAINERH;
            ADD PROPERTY(dv);
            ADD PROPERTY(nameSupplier());
            ADD PROPERTY(nameSupplierStock());
            ADD PROPERTY(nameCustomer());
            ADD PROPERTY(nameCustomerStock());
        }
        ADD s.box;
        ADD sd.box;

        ADD functions.box;
    }

END

filterCompanySupplier(legalEntity, legalFilt) = (isCompanyLegalEntity(legalEntity) AND isSupplierLegalEntity(legalFilt)) OR
                                               (isCustomerLegalEntity(legalEntity) AND isCompanyLegalEntity(legalFilt));

filterCompanyCustomer(legalEntity, legalFilt) = (isCompanyLegalEntity(legalEntity) AND isCustomerLegalEntity(legalFilt)) OR
                                               (isSupplierLegalEntity(legalEntity) AND isCompanyLegalEntity(legalFilt));

EXTEND FORM legalEntity

    OBJECTS ss=ScheduleOrder FIXED GRID
    PROPERTIES(ss) SHOWIF isCustomerLegalEntity(l) READONLY startDateScheduleOrder, endDateScheduleOrder, nameSupplierStockScheduleOrder, stocksScheduleOrder, nameTypeScheduleOrder
    PROPERTIES(ss) SHOWIF isCustomerLegalEntity(l) DELETE FORCE PANEL TOOLBAR, editScheduleOrder

    FILTERS filterCompanySupplier(l, s)
    FILTERS supplierScheduleOrder(ss) == s, customerScheduleOrder(ss) == l

    OBJECTS sc=ScheduleOrder FIXED  GRID 
    PROPERTIES(sc) SHOWIF isSupplierLegalEntity(l) READONLY startDateScheduleOrder, endDateScheduleOrder, nameSupplierStockScheduleOrder, stocksScheduleOrder, nameTypeScheduleOrder
    PROPERTIES(sc) SHOWIF isSupplierLegalEntity(l) DELETE FORCE PANEL TOOLBAR, editScheduleOrder

    FILTERS filterCompanyCustomer(l, c)
    FILTERS customerScheduleOrder(sc) == c, supplierScheduleOrder(sc) == l


;

EXTEND DESIGN legalEntity {
    extendContainer {
        docPurchaseContainer{
            ADD ss.box;
        }

        docSaleContainer{
            ADD sc.box;
        }
    }
}

META defineScheduleOrderDashboard(sign, filterSupplier, filterCustomer)

countRemainingScheduleOrderDate 'Кол-во оставшихся заказов'##sign (scheduleOrder,date) = GROUP SUM 1 IF dateSupplyScheduleOrderDetail(d) >= (date AS DATE) 
                                                                                        BY scheduleOrderScheduleOrderDetail(d), date; 
lastScheduleOrderSupplierStockCustomerStock (s,ss,c,cs) = 
    GROUP LAST scheduleOrder IF endDateScheduleOrder(scheduleOrder) AND inScheduleOrderStock(scheduleOrder, customerStock)
           BY supplierScheduleOrder(scheduleOrder), supplierStockScheduleOrder(scheduleOrder), customerScheduleOrder(scheduleOrder), customerStock
           ORDER endDateScheduleOrder(scheduleOrder), scheduleOrder 
           WHERE scheduleOrder IS ScheduleOrder;  
                                                                                                                                                                                       
//isLastScheduleOrder 'Последний график' (s)= 
//    lastScheduleOrderSupplierStockCustomerStock(supplierScheduleOrder(s),supplierStockScheduleOrder(s),customerScheduleOrder(s),customerStockScheduleOrder(s)) ==s;
    isActiveScheduleOrder(scheduleOrder, date) = (startDateScheduleOrder(scheduleOrder) <= (date AS DATE) AND endDateScheduleOrder(scheduleOrder) >= date) OR
                                                     (startDateScheduleOrder(scheduleOrder) <= (date AS DATE) AND NOT endDateScheduleOrder(scheduleOrder));   
    backgroundScheduleOrderDate 'Цвет' (scheduleOrder, date) = CASE WHEN startDateScheduleOrder(scheduleOrder) > date THEN RGB(224,255,224)
                                                  WHEN endDateScheduleOrder(scheduleOrder) < date THEN RGB(255,224,224);                                                                                                                                                                                                                           
                                                                                                                                                                                                                          
    FORM scheduleOrderDashboard 'Графики заказов' TITLE 'Графики заказов'###sign

        OBJECTS d=DATE FIXED PANEL
        PROPERTIES dv=OBJVALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock
        
        OBJECTS s=ScheduleOrder
        PROPERTIES(s) READONLY startDateScheduleOrder, endDateScheduleOrder, nameSupplierScheduleOrder, nameSupplierStockScheduleOrder,
                      nameCustomerScheduleOrder, stocksScheduleOrder, nameTypeScheduleOrder
        PROPERTIES(s,d) READONLY countRemainingScheduleOrderDate
        PROPERTIES(s) copyScheduleOrder, EDITFORM FORCE PANEL TOOLBAR
        ORDER BY endDateScheduleOrder(s)

        FILTERS supplierScheduleOrder(s) == supplier() OR (s IS ScheduleOrder AND NOT supplier()),
                supplierStockScheduleOrder(s) == supplierStock() OR (s IS ScheduleOrder AND NOT supplierStock()),
                customerScheduleOrder(s) == customer() OR (s IS ScheduleOrder AND NOT customer())

        FILTERGROUP countFilter1
            FILTER 'Заканчивается в течение 3 дн.' 'F10' endDateScheduleOrder(s) <= sumDate(d,2) AND endDateScheduleOrder(s) >= d DEFAULT
            FILTER 'Заканчивается в течение 5 дн.' 'F9' endDateScheduleOrder(s) <= sumDate(d,4) AND endDateScheduleOrder(s) >= d 
                              
        OBJECTS ss=ScheduleOrder
        PROPERTIES(ss) BACKGROUND backgroundScheduleOrderDate(ss,d) READONLY startDateScheduleOrder, endDateScheduleOrder, nameSupplierScheduleOrder, nameSupplierStockScheduleOrder,
                      nameCustomerScheduleOrder, stocksScheduleOrder, nameTypeScheduleOrder     
        PROPERTIES(ss) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR              
        ORDER BY startDateScheduleOrder(ss)
              
        FILTERS supplierScheduleOrder(ss) == supplier() OR (ss IS ScheduleOrder AND NOT supplier()),
                supplierStockScheduleOrder(ss) == supplierStock() OR (ss IS ScheduleOrder AND NOT supplierStock()),
                customerScheduleOrder(ss) == customer() OR (ss IS ScheduleOrder AND NOT customer())
 
    FILTERGROUP inactiveScheduleOrder
        FILTER 'Текущие' 'F11' isActiveScheduleOrder(ss,d)            
        FILTER 'Активные' 'F10' isActiveScheduleOrder(ss,d) OR (startDateScheduleOrder(ss) > d) DEFAULT                                                        
                                         
    ;

    DESIGN scheduleOrderDashboard FROM DEFAULT{
        NEW header {
            type = CONTAINERH;
            ADD PROPERTY(dv);
            ADD PROPERTY(nameSupplier());
            ADD PROPERTY(nameSupplierStock());
            ADD PROPERTY(nameCustomer());
        }
        ADD s.box;
        ADD ss.box;
        ADD functions.box;
    }
    @extendFormFilterAccessStock(scheduleOrder, s, scheduleOrderDashboard, supplierStock, filterSupplier);
    @extendFormFilterAccessLegalEntity(scheduleOrder, s, scheduleOrderDashboard, supplier, filterSupplier);
    @extendFormFilterAccessStock(scheduleOrder, ss, scheduleOrderDashboard, supplierStock, filterSupplier);
    @extendFormFilterAccessLegalEntity(scheduleOrder, ss, scheduleOrderDashboard, supplier, filterSupplier);    
    
    @extendFormFilterAccessLegalEntity(scheduleOrder, s, scheduleOrderDashboard, customer, filterCustomer);    
    @extendFormFilterAccessLegalEntity(scheduleOrder, ss, scheduleOrderDashboard, customer, filterCustomer); 
    countStocksScheduleOrder (order)= GROUP SUM 1 IF inScheduleOrderStock(order,stock)
        BY order;       
    countAccess###filterCustomer###employeeStockScheduleOrder (order)= GROUP SUM 1 IF access###filterCustomer###employeeStock(currentUser(),stock) AND inScheduleOrderStock(order,stock)
        BY order;
    EXTEND FORM scheduleOrderDashboard FILTERS countAccess###filterCustomer###employeeStockScheduleOrder(s) OR NOT countStocksScheduleOrder(s);
    EXTEND FORM scheduleOrderDashboard FILTERS countAccess###filterCustomer###employeeStockScheduleOrder(ss) OR NOT countStocksScheduleOrder(ss);
    
END

