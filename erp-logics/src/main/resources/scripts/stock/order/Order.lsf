MODULE Order;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        Barcode,
        PriceListType,
        PriceListLedger,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        OrderLedger,
        EmployeeStock,
        Operation,
        StockMovement,
        StockContract,
        StockTax;


PRIORITY Utils, Stock;

CLASS ABSTRACT Order 'Заказ' : Document;
CLASS ABSTRACT OrderDetail 'Строка заказа' : DocumentDetail, OrderLedger;

selected 'Отм.' = DATA LOCAL BOOLEAN (Order); 

@defineDocumentAbstract(order);
@defineDocumentAbstractNumber(order);
//@defineDocumentDetailIndex(order);

@defineDocumentAbstractLegalEntity(order, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(order, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(order, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(order, to, 'Получатель');

closeDate 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm PERSISTENT;

@defineDocumentAbstractHeaderTimePrefix(Order, shipment, ' поставки');
shipmentDate 'Дата поставки' = ABSTRACT DATE (OrderDetail) IN documentHeader PERSISTENT;
shipmentTime 'Время поставки' = ABSTRACT TIME (OrderDetail) IN documentHeader PERSISTENT;
shipmentDateTime 'Дата/время поставки' (OrderDetail d) = dateTimeToDateTime(shipmentDate(d), shipmentTime(d)) PERSISTENT;

@defineDocumentAbstractDataStock(order, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(order, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(order, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(order, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(order);
@defineDocumentAbstractClosed(order);

@defineDocumentAbstractDetailSku(order, sku);
INDEX sku(OrderDetail d), customerStock(d);

@defineDocumentAbstractDetailBatch(order, batch);
idBatch 'Код партии' (OrderDetail d)= id(batch(d));

@defineDocumentAbstractDetailPrice(order);
@defineDocumentAbstractDetailPriceCustomPrefix(orderDetail, invoice, ' с НДС');
@defineDocumentAbstractDetailDataSumCustomPrefix (orderDetail, , );
@defineDocumentAbstractDetailVAT(order, , );
@defineDocumentAbstractDetailVATDataSumCustom (orderDetail, invoice);

@defineDocumentAbstractDetailQuantity(order);
@defineDocumentDetailGrossWeight(order, sku);
@defineDocumentAbstractDetailQuantityPrefix(order, pack, ' (упаковок)');
packQuantityOrderDetail 'Кол-во (упаковок)(всего)' (order) = GROUP SUM packQuantity(OrderDetail idetail) BY order(idetail) IN documentSum PERSISTENT;

@defineDocumentHeaderSkuQuantity(order, sku);

@defineDocumentHeaderQuantity(order);
@defineDocumentHeaderVATSum(order, orderDetail, invoice);
@defineDocumentHeaderSum (order);

@defineDocumentHeaderGrossWeight(order);
@defineDocumentAbstractHeaderCurrency (order);

taxNumberSupplier 'Налоговый номер постащика' = ABSTRACT VARSTRING[9] (Order);

createdUser = ABSTRACT CustomUser (Order);
createdNameUser 'Создан пользователем' (Order order) = name[Contact](createdUser(order)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;

operation = ABSTRACT Operation.Operation (Order) PERSISTENT;
nameOperation 'Операция' (Order order) = name(operation(order));  ////

quantityFrom 'Кол-во со склада' (order, stock) = GROUP SUM quantity(OrderDetail orderDetail) BY order(orderDetail),
                                                                                                         fromStock(orderDetail);

quantityTo 'Кол-во на склад' (order, stock) = GROUP SUM quantity(OrderDetail orderDetail) BY order(orderDetail),
                                                                                                      toStock(orderDetail);

edit 'Редактировать' = ACTION ABSTRACT LIST (Order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

in 'Приходный' = ABSTRACT BOOLEAN (Order) PERSISTENT;
out 'Расходный' (Order order) = order IS Order AND NOT in(order) PERSISTENT;

isReturn 'Возвратный' = ABSTRACT BOOLEAN (Order);

@defineDocumentAbstractHeaderDescription(Order);
@defineDocumentDetailDescription(order, OrderDetail);

@defineDocumentAbstractContract(Order, contractSku, ContractSku);

negativeValueOrders 'Запретить ввод отрицательных значений в заказах' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() negativeValueOrders
;

DESIGN options {
    pane {
        NEW orders {
            caption = 'Заказы';
            NEW optionsContainer {
                fill = 3;
                MOVE PROPERTY(negativeValueOrders());            
            }
        }
    }
}

CLASS AcquisitionTarget 'Цель приобретения';
TABLE acquisitionTarget(AcquisitionTarget);

@defineExternalizable(acquisitionTarget, VARSTRING[100]);

name 'Наименование' = DATA VARISTRING[50](AcquisitionTarget);

FORM acquisitionTarget 'Цель приобретение'
    OBJECTS t=AcquisitionTarget FIXED PANEL
    PROPERTIES(t) name,  id SHOWIF showIDs()
    EDIT AcquisitionTarget OBJECT t
;

FORM acquisitionTargets 'Цели приобретение'
    OBJECTS t=AcquisitionTarget
    PROPERTIES(t) NEWSESSION name READONLY, id READONLY SHOWIF showIDs(), deleteb=DELETE 
    PROPERTIES(t) NEWSESSION NEW, EDIT
    ORDER BY name(t)
    LIST AcquisitionTarget OBJECT t
;
DESIGN acquisitionTargets { main{ preferredSize = (600, 400); } }

acquisitionTarget = ABSTRACT AcquisitionTarget(Order);
nameAcquisitionTarget 'Цель приобретения' = name(acquisitionTarget(Order o));

//----------------------------------------------- Заказ ---------------------------------------------------//

META defineOrder(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, filter, priceListTypePrefix, NS)

    CLASS ABSTRACT Order 'Заказ'###sign : Order.Order;
    CLASS ABSTRACT OrderDetail 'Строка заказа'###sign : Order.OrderDetail;

    CLASS UserOrder 'Заказ (польз.)'###sign : Order;
    CLASS UserOrderDetail 'Строка заказа (польз.)'###sign : OrderDetail;
    
    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (Order);

    @defineExternalizable(userOrder, VARSTRING[100]);
    @defineExternalizable(userOrderDetail, VARSTRING[100]);

    @defineDocumentInterface(order);
    note[Order.Order] (Order order) += note(order);
    index[Order.OrderDetail](OrderDetail d) += index(d);
    
    createdUser = ABSTRACT CustomUser (Order);
    createdNameUser 'Создан пользователем' (Order order) = name[Contact](createdUser(order)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
    createdUser(UserOrder order) += createdUser(order) IF order IS UserOrder;    
    createdUser[Order.Order](Order order) += createdUser(order);    
    @deriveDocumentHeaderTimePrefix(UserOrder, );
    order[Order.OrderDetail] (OrderDetail detail) += order(detail);
    date[Order.Order] (Order order) += date(order);
    time[Order.Order] (Order order) += time(order);

    @defineDocumentInterfaceNumber(order);
    number[Order.Order] (Order order) += number(order);
    series[Order.Order] (Order order) += series(order);

    @defineNumeratedDefault(UserOrder, 'Заказы'###sign, 'ЗК', NS);

    @defineDocumentInterfaceLegalEntity (order, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (order, customer, 'Покупатель');
    supplier[Order.Order](Order order) += supplier(order);
    customer[Order.Order](Order order) += customer(order);

    @defineDocumentInterfaceDataStock(order, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(order, stock, 'Склад покупателя', customer);
    supplierStock[Order.Order](Order order) += supplierStock(order);
    customerStock[Order.Order](Order order) += customerStock(order);

    CONSTRAINT supplier(UserOrder userOrder) AND supplierStock(userOrder) AND NOT
               in(supplier(userOrder), supplierStock(userOrder))
        CHECKED BY supplierStock[UserOrder]
            MESSAGE 'Поставщик и склад поставщика для заказа не имеют связи';
    CONSTRAINT customer(UserOrder userOrder) AND customerStock(userOrder) AND NOT
               in(customer(userOrder), customerStock(userOrder))
        CHECKED BY customerStock[UserOrder]
            MESSAGE 'Покупатель и склад покупателя для заказа не имеют связи';

    @defineDocumentInterfaceContract(Order, contractSku, supplier, customer,
                                     'Организация (поставщик) договора заказа не соответствует организация (поставщик) заказа',
                                     'Организация (покупатель) договора заказа не соответствует организация (покупатель) заказа',
                                     'заказ'###sign, NS);
    contractSku[Order.Order] (Order order) += contractSku (order);
    
    contractSku (UserOrderDetail detail) = contractSku(userOrder(detail));
    
    acquisitionTarget = ABSTRACT AcquisitionTarget(Order);
    nameAcquisitionTarget 'Цель приобретения' = name(acquisitionTarget(Order o));
    acquisitionTarget = DATA AcquisitionTarget(UserOrder);
    nameAcquisitionTarget 'Цель приобретения' = name(acquisitionTarget(UserOrder o)) IN documentPrm;    
    acquisitionTarget(UserOrder o) += acquisitionTarget(o);
    acquisitionTarget[Order.Order](Order o) += acquisitionTarget(o);
    
    @defineDocumentInterfacePosted(order);
    isPosted[Order.Order] (Order order) += isPosted(order);
    
    @defineDocumentInterfaceClosed(order);
    isClosed[Order.Order] (Order order) += isClosed(order);
    
    @defineDocumentInterfaceDataTimePrefix(order, shipment, ' поставки');
    shipmentTime[Order.Order](Order order) += shipmentTime(order);
    shipmentDate[Order.Order](Order order) += shipmentDate(order);    
    shipmentTime(OrderDetail d) += shipmentTime(d);
    shipmentDate(OrderDetail d) += shipmentDate(d);
    
    shipmentDate(UserOrder order) <- sum(date(order), 1) WHEN CHANGED(date(order));
    shipmentTime(UserOrder order) <- time(order) WHEN CHANGED(time(order));

    overCloseDate  = ABSTRACT DATE (Order);
    closeDate 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm;
    closeDate 'Дата автоматического закрытия' = DATA DATE (UserOrder) IN documentPrm;
    closeDate(UserOrder order) += closeDate(order);
    closeDate[Order.Order] (Order order) += closeDate(order);
    
    overCloseDate  = ABSTRACT DATE (OrderDetail);
    closeDataDate 'Дата автоматического закрытия' = ABSTRACT DATE (OrderDetail) IN documentPrm;
    closeDataDate 'Дата автоматического закрытия' = DATA DATE (UserOrderDetail) IN documentPrm;
    closeDataDate(UserOrderDetail detail) += closeDataDate(detail);

    closeDate 'Дата автоматического закрытия' (OrderDetail detail) = OVERRIDE closeDate(order(detail)), closeDataDate(detail) PERSISTENT;
    closeDate 'Дата автоматического закрытия' (UserOrderDetail detail) = OVERRIDE closeDate(userOrder(detail)), closeDataDate(detail) PERSISTENT;

    closeDataDate(UserOrderDetail detail) <- OVERRIDE sum(shipmentDate(detail), quantityDaysCloseOrders(stockProp##Stock(detail))), overCloseDate(detail)
        WHEN CHANGED(shipmentDate(detail)) OR CHANGED(stockProp##Stock(detail)) OR CHANGED(overCloseDate(detail));
    closeDate(UserOrder order) <- OVERRIDE sum(shipmentDate(order), quantityDaysCloseOrders(stockProp##Stock(order))), overCloseDate(order)
            WHEN CHANGED(shipmentDate(order)) OR CHANGED(stockProp##Stock(order)) OR CHANGED(overCloseDate(order));    

    WHEN SET (closeDate(UserOrder order) <= currentDate()) DO isClosed(order) <- TRUE;

    @defineDocumentInterfaceDescription(order, 'Заказ'###sign);
    description[Order.Order](Order order) += description(order);    
    
    @defineDocumentInterfaceCurrency(order);
    @deriveDocumentCurrency(userOrder, supplier, currencyLegalEntity);
    currency[Order.Order](Order order) += currency(order);

    @defineDocumentInterfaceAgreement(order);
    @deriveDocumentHeaderAgreement (userOrder, supplier, customer, 'заказ'###sign, NS);

    maxAgreementInSku (order) = GROUP MAX Agreement agreement IF in(agreement,sku(UserOrderDetail d)) 
        AND fromDateTime(agreement) <= dateTime(d) AND NOT (toDateTime(agreement) < dateTime(d))
        AND inSupplier(agreement, supplier(d)) AND inCustomer(agreement, customer(d))
            BY userOrder(d);

    @defineDocumentInterfaceDetailSku(order, sku);
    INDEX sku(OrderDetail d), customerStock(d);
    sku[Order.OrderDetail](OrderDetail detail) += sku(detail);

    blankLineOrders 'Разрешить строки без SKU в заказах '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##blankLineOrders = blankLineOrders
    ;
    
    DESIGN options {
        optionsContainer {
            MOVE PROPERTY(NS##blankLineOrders);
        }
    }

    CONSTRAINT isPosted(UserOrderDetail d) AND NOT sku(d) AND NOT blankLineOrders()
        MESSAGE 'Для строки заказа '##sign##' должен быть задан SKU';   

    @defineDocumentInterfaceDetailQuantity(order);
    quantity[Order.OrderDetail](OrderDetail detail) += quantity(detail);
    CONSTRAINT CHANGED(quantity(OrderDetail detail)) AND negativeValueOrders() AND quantity(detail) < 0
        MESSAGE 'Количество в строке заказа должно быть не отрицательным';

    @defineDocumentInterfaceDetailPrice(order); // объявляем цену без НДС
    price[Order.OrderDetail](OrderDetail detail) += price(detail);

    overPriceStockUser = ABSTRACT CASE OVERRIDE FIRST Stock (Order) PERSISTENT;
    priceStockUser(Order o) = OVERRIDE stockProp##Stock(o), overPriceStockUser(o);
    notPriceStockUser(Order o) = NOT priceStockUser(o); 
    priceStock(UserOrderDetail d) = priceStockUser(userOrder(d)); 

    @defineDocumentInterfaceDetailVAT(order, country###stockProp###stock, , ); // объявляем шкалу
    
    overVAT = ABSTRACT VALUE OVERRIDE FIRST Range (UserOrderDetail);
    overVAT(UserOrderDetail d) += VAT (sku(d), country(supplierStock(d)));
    changedVAT = ABSTRACT BOOLEAN (UserOrderDetail);
    
    WHEN SESSION
        (CHANGED(sku(UserOrderDetail detail)) OR CHANGED (supplierStock(detail)) OR changedVAT(detail)) AND NOT CHANGED(VAT(detail)) DO {
            VAT(detail) <- overVAT(detail);
        } // записываем шкалу

    @deriveDocumentDetailValueVAT(userOrder); // записываем значение ставки

    VAT[Order.OrderDetail](OrderDetail detail) += VAT(detail);
    valueVAT[Order.OrderDetail](OrderDetail detail) += valueVAT(detail);

    @defineDocumentInterfaceDetailPricePrefix (order, invoice, ' с НДС'); // объявляем цену с НДС
    invoicePrice[Order.OrderDetail](OrderDetail d) += invoicePrice(d);
    // объявляем Action'ы для ON CHANGE
    @defineDocumentDetailPriceVATOnChange(userOrder);
    @defineDocumentDetailNumberVATOnChange(userOrder, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(userOrder);

    @defineDocumentInterfacePriceListType(order); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userOrder, priceListTypePrefix); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userOrder, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // суммма без НДС
    @defineDocumentInterfaceDetailDataSum(order);
    @deriveDocumentDetailSum(userOrder, quantity);
    sum[Order.OrderDetail](OrderDetail detail) += sum(detail);

    // суммы НДС и с НДС
    @defineDocumentInterfaceDetailVATDataSum (order, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

    VATSum[Order.OrderDetail](OrderDetail detail) += VATSum(detail);
    invoiceSum[Order.OrderDetail](OrderDetail detail) += invoiceSum(detail);

    @defineDocumentInterfaceHeaderVATSum (order, orderDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(order);
    @defineDocumentHeaderSkuQuantity(order, sku);
    //Order.quantityOrderSku (order, sku) += quantityOrderDetailSkuOrder(sku, order);

    @defineDocumentHeaderSkuQuantity(userOrder, sku);
    @defineDocumentInterfaceHeaderSum(order);
    
    @defineDocumentInterfaceHeaderItemQuantity(order);
    @defineDocumentInterfaceHeaderItemCount(order);    
    @defineDocumentInterfaceHeaderItemSum (order, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (order, , ); //-- сумма поставщика (с разбивкой по таре, товару...)   
    @defineDocumentInterfaceHeaderItemSum(order, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)  
        
    @defineDocumentInterfaceHeaderItemSumDouble (order, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (order, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (order, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале    

    @defineAddDetailDialogSkuStock(userOrder, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userOrder, sku);

    noAgreement (UserOrder order) = order IS UserOrder AND NOT agreement(order);

    countOrderDetail 'Кол-во строк по складу '(stock, order) = GROUP SUM 1 BY stockProp##Stock(OrderDetail orderDetail), order(orderDetail);

//-- Дата следующей поставки
    @defineDocumentInterfaceDatePrefix (order, nextShipment, ' следующей поставки');
    quantityDaysNextShipment 'Кол-во дней до след. поставки' (UserOrder userOrder) =  daysBetweenDates(nextShipmentDate(userOrder), date(userOrder)) + 1;

    @implementDocumentSupplierCustomer(order);
    @defineMovementSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(orderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userOrderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBarcodeSku(orderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userOrderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineMovementPriceSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

    @defineDocumentDialogSupplierCustomerStock(userOrder, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userOrder, supplierFilter, customerFilter);
    
    backgroundQuantity 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
    backgroundName 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
// --------------------------- Формы Заказа ---------------------------------
    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);

    edit 'Редактировать' = ACTION ABSTRACT LIST (Order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit[Order.Order] (Order order) += ACTION edit(order);

    editSku 'Редактировать SKU' (UserOrderDetail d) = ACTION edit(sku(d));
    
    backgroundParam = RGB(212,255,212) IF OrderDetail orderDetail IS OrderDetail; 
    backgroundQuantityParam = OVERRIDE backgroundParam(OrderDetail d), backgroundQuantity(d);
    disablePosted 'Запретить проведение' = ABSTRACT BOOLEAN (UserOrder); 
    overPrePost 'Провести' (UserOrder o) = ACTION {
        IF NOT disablePosted(o) THEN {
            isPosted(o) <- TRUE;
        } 
    }
    
    FORM userOrder 'Заказ'###sign
        OBJECTS o = UserOrder FIXED PANEL
        PROPERTIES (o) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(o),
                       nameCustomer ON CHANGE changeCustomer###customerFilter(o),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(o),
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(o),
                       nameNumerator, number, series, date, time,
                       nameCurrency, nameAgreement, namePriceListType SHOWIF noAgreement(o), note, nameAcquisitionTarget
        PROPERTIES (o) READONLY countUserOrderDetail, quantityUserOrderDetail, sumUserOrderDetail,
                       VATSumUserOrderDetail, invoiceSumUserOrderDetail
        PROPERTIES (o) shipmentDate, shipmentTime, closeDate, nextShipmentDate,
                       quantityDaysNextShipment READONLY,
                       seriesNumberContractSku, isCommission

        OBJECTS d = UserOrderDetail
        PROPERTIES (d) index BACKGROUND backgroundSku(d)
        PROPERTIES (d) ON EDIT editSku(d) BACKGROUND backgroundSku(d) idBarcodeSku, 
                       idSku, nameSku BACKGROUND backgroundName(d), shortNameUOMSku
        PROPERTIES (d) quantity BACKGROUND backgroundQuantityParam(d), namePriceListType BACKGROUND backgroundSku(d),
                       price ON CHANGE changePrice(d) BACKGROUND backgroundParam(d), sum BACKGROUND backgroundSku(d),
                       numberVAT ON CHANGE changeNumberVAT(d) BACKGROUND backgroundSku(d),
                       valueVAT ON CHANGE changeValueVAT(d) BACKGROUND backgroundSku(d),
                       invoicePrice ON CHANGE changeInvoicePrice(d) BACKGROUND backgroundSku(d),
                       VATSum BACKGROUND backgroundSku(d), invoiceSum BACKGROUND backgroundSku(d),
                       name###stockProp##Stock BACKGROUND backgroundSku(d), 
                       shipmentDate BACKGROUND backgroundSku(d), shipmentTime BACKGROUND backgroundSku(d), 
                       closeDate BACKGROUND backgroundSku(d), NEW, deleteod = DELETE GRID
        ORDER BY index(d)

        PROPERTIES(o) TODRAW d fillDocument, addDetailDialogSkuStockUserOrderDetail,
                               addDetailInputBarcodeUserOrderDetail, deleteUserOrderDetail
        FILTERS userOrder(d) == o

        EVENTS
            ON OK overPrePost(o)

        EDIT UserOrder OBJECT o
    ;

    DESIGN userOrder {

        main {
            preferredSize = (1024, 768);
            NEW mainTabbed {
                type = TABBED;
                fill = 1;
                NEW document.box{
                    fill = 1;
                    caption = 'Заказ';
                    NEW header.box {
                        type = CONTAINERH;
        
                        NEW headerRow1 {
                            fill = 1;
                            type = CONTAINERV;
        
                            MOVE o.documentHeader {
                                type = CONTAINERV;
                                NEW first {
                                    type = CONTAINERH;
                                    MOVE PROPERTY(isPosted(o)) { preferredCharWidth = 40; }
                                }
                                NEW second { 
                                    type = CONTAINERH;
                                    MOVE PROPERTY(nameNumerator(o));
                                    MOVE PROPERTY(number(o));
                                    MOVE PROPERTY(series(o));
                                    MOVE PROPERTY(date(o));
                                    MOVE PROPERTY(time(o));
                                }    
                            }                    
                            
                            NEW headerRow11 {
                                type = CONTAINERH;
                                NEW headerRow111 {
                                    caption = 'Поставщик';
                                    type = COLUMNS;
                                    columns = 2;
                                    MOVE PROPERTY(nameSupplier(o));
                                    MOVE PROPERTY(nameSupplierStock(o));
                                }
                                NEW headerRow112 {
                                    caption = 'Покупатель';
                                    type = COLUMNS;
                                    columns = 2;
                                    MOVE PROPERTY(nameCustomer(o));
                                    MOVE PROPERTY(nameCustomerStock(o));
                                }
                            }
                            NEW headerTabbedPane {
                                alignment = STRETCH;
                                type = TABBED;
                                NEW headerMainParams {
                                    caption = 'Основные параметры';
                                    type = CONTAINERV;
                                    NEW headerContract {
                                        type = CONTAINERH;
                                        caption = 'Договор';
                                        MOVE PROPERTY(seriesNumberContractSku(o));
                                        MOVE PROPERTY(isCommission(o));
                                    }
                                    MOVE o.documentPrm {
                                        columns = 3;
                                    }
                                }
                                NEW headerExtraParams {
                                    caption = 'Дополнительные параметры';
                                    type = CONTAINERH;                                
                                    NEW documentShipmentGroup {
                                        caption = 'Исполнение';
                                        type = COLUMNS;
                                        columns = 1;
                                        MOVE PROPERTY(shipmentDate(o));
                                        MOVE PROPERTY(shipmentTime(o));
                                    }
                                    NEW headerRow121 {
                                        caption = 'Поставка';
                                        type = COLUMNS;
                                        columns = 1;
                                        MOVE PROPERTY(nextShipmentDate(o));
                                        MOVE PROPERTY(quantityDaysNextShipment(o));
                                    }
                                    NEW headerDate {
                                        caption = 'Закрытие';
                                        type = CONTAINERV;
                                        MOVE PROPERTY(closeDate(o));
                                    }
                                }
                                NEW headerCreateDetail {
                                    caption = 'Основание';
                                    type = CONTAINERV;
                                }
                                NEW headerCreateDocuments {
                                    caption = 'Производные документы';
                                    type = CONTAINERH;
                                }
                                NEW import {
                                    caption = 'Импорт';
                                    type = CONTAINERH;
                                }
                            }
                        }
        
                        MOVE o.documentSum {
                            columns = 1;
                        }
                    }
                    NEW specification.box {
                        fill = 1;
                        type = TABBED;
                        MOVE d.box {
                            caption = 'Спецификация';
                        }
                    }
                }
            }
            MOVE functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }                        
            PROPERTY(sumUserOrderDetail(o)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserOrderDetail(o)) { preferredCharWidth = 13;}
            PROPERTY(invoiceSumUserOrderDetail(o)) { preferredCharWidth = 13;}
            PROPERTY(deleteUserOrderDetail(o)){focusable = FALSE;}
            
        }
    }

    @addEventGenerateNumberOnForm(userOrder, o, userOrder);
    @defineDocumentSkuStockPriceListTypeAgreement(userOrder, stockProp);
    @extendFormDocumentSkuStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp);

    edit 'Редактировать' (userOrder) = ACTION EDITFORM UserOrder;
    edit(UserOrder order) += ACTION edit(order);
    
    isUserOpened(UserOrder o)=  isOpened[Order](o) AND is(o);

    overCopy = ACTION ABSTRACT LIST (UserOrderDetail, OrderDetail);
    overCopy = ACTION ABSTRACT LIST (Order, UserOrder);
    copy 'Копировать'(Order order) = ACTION NEWSESSION {
        FOR NEW o = UserOrder DO {
            supplier(o) <- supplier(order);
            supplierStock(o) <- supplierStock(order) IF active(supplierStock(order));
            customer(o) <- customer(order);
            customerStock(o) <- customerStock(order) IF active(customerStock(order));
            currency(o) <- currency(order);
            agreement(o) <- agreement(order);
            priceListType(o) <- priceListType(order);
            note(o) <- note(order);

            overCopy(order, o);

            FOR order(OrderDetail orderDetail) == order DO {
                FOR NEW d=UserOrderDetail DO {
                    userOrder(d) <- o;
                    sku(d) <- sku(orderDetail);
                    quantity(d) <- quantity(orderDetail);
                    
                    overCopy(d, orderDetail);
                }
            }

            SHOW userOrder OBJECTS o = o MANAGESESSION DOCKED;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopy = ACTION ABSTRACT LIST (UserOrderDetail, UserOrderDetail);

    copy 'Копировать'(UserOrderDetail detail) = ACTION {
        FOR NEW d = UserOrderDetail DO {          

            userOrder(d) <- userOrder(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            priceListType(d) <- priceListType(detail);      
            shipmentDataDate(d) <- shipmentDataDate(detail);         
            shipmentDataTime(d) <- shipmentDataTime(detail);        
            closeDataDate(d) <- closeDataDate(detail);  
            
            EXEC overCopy(d, detail);                              
        }
    } EDITKEY 'F5' TOOLBAR;
    
    EXTEND FORM userOrder PROPERTIES(d) copy PANEL;
    DESIGN userOrder { PROPERTY(copy(d)) { focusable = FALSE; } }
    
    filterOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Order o) = date(o) >= filterOrderDateFrom() OR (o IS Order AND NOT filterOrderDateFrom());      
    
    filterOrderDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Order o) = date(o) <= filterOrderDateTo() OR (o IS Order AND NOT filterOrderDateTo());      
    
    filterOrderCustomer  = DATA LOCAL LegalEntity ();
    nameFilterOrderCustomer 'Покупатель' = name(filterOrderCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomer (Order o) = customer(o) == filterOrderCustomer() OR (o IS Order AND NOT filterOrderCustomer());    

    filterOrderCustomerStock  = DATA LOCAL Stock ();
    nameFilterOrderCustomerStock 'Склад покупателя' = name(filterOrderCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStock (Order o) = customerStock(o) == filterOrderCustomerStock() OR (o IS Order AND NOT filterOrderCustomerStock());  

    filterOrderSupplier = DATA LOCAL LegalEntity ();
    nameFilterOrderSupplier 'Поставщик' = name(filterOrderSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplier (Order o) = supplier(o) == filterOrderSupplier() OR (o IS Order AND NOT filterOrderSupplier());      

    filterOrderSupplierStock  = DATA LOCAL Stock ();
    nameFilterOrderSupplierStock 'Склад поставщика' = name(filterOrderSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStock (Order o) = supplierStock(o) == filterOrderSupplierStock() OR (o IS Order AND NOT filterOrderSupplierStock()); 
           
    filterOrderCustomUser  = DATA LOCAL CustomUser ();
    nameFilterOrderCustomUser 'Создан пользователем' = name[Contact](filterOrderCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUser (Order i) = createdUser[UserOrder](i) == filterOrderCustomUser() OR (i IS Order AND NOT filterOrderCustomUser());  

    filterOrderComputer = DATA LOCAL Computer ();
    nameFilterOrderComputer 'Создан на компьютере' = hostname(filterOrderComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputer (Order i) = createdComputer(i) == filterOrderComputer() OR (i IS Order AND NOT filterOrderComputer());
    
    overShowEdit = ABSTRACT BOOLEAN (Order);
    overShowDelete = ABSTRACT BOOLEAN (Order);      
    skipShowEdit = ABSTRACT BOOLEAN (Order);
    skipShowDelete = ABSTRACT BOOLEAN (Order);
    
    backgroundDraft 'Цвет' (Order o) = RGB(212,255,212) IF isDraft(o);      
    overBackgroundDraft(Order o) = OVERRIDE backgroundDraft(o), backgroundSku(o);
    
    FORM orders 'Заказы' AUTOREFRESH 60 
    
        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderSupplier, nameFilterOrderSupplierStock, 
                     nameFilterOrderCustomer, nameFilterOrderCustomerStock, nameFilterOrderCustomUser, nameFilterOrderComputer
        FILTERS is###supplierFilter(filterOrderSupplier())    
            
        OBJECTS o = Order LAST
        PROPERTIES (o) selected
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) isClosed
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND overBackgroundDraft(o) isPosted, number, series, date, time
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                nameAgreement, seriesNumberContractSku
        PROPERTIES (o) READONLY BACKGROUND backgroundSku(o) countOrderDetail, quantityOrderDetail, sumOrderDetail,
                                VATSumOrderDetail, invoiceSumOrderDetail
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) shipmentDate, shipmentTime, closeDate, note

        PROPERTIES (o) READONLY PANEL createdNameUser[UserOrder], createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES (o) NEWSESSION addUserOrder = NEW[UserOrder]
        PROPERTIES (o) edit SHOWIF overShowEdit(o),//isOpenedOrder(o), 
                       copy
        PROPERTIES (o) close[UserOrder] SHOWIF isOpened[UserOrder](o), open SHOWIF isClosed[UserOrder](o)
        PROPERTIES     NEWSESSION deleteo=DELETE(o) TOOLBAR  SHOWIF overShowDelete(o) //isUserOpenedOrder(o)

        OBJECTS d=OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity BACKGROUND backgroundParam(d), namePriceListType, 
                       price BACKGROUND backgroundParam(d), sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       name###stockProp##Stock, shipmentDate, shipmentTime
        ORDER BY index(d)

        FILTERS order(d) == o
        FILTERS filterDateFrom(o), 
                filterDateTo(o),
                filterSupplier(o),
                filterSupplierStock(o),
                filterCustomer(o),
                filterCustomerStock(o),
                filterCustomUser(o),
                filterComputer(o)                            
        
        LIST Order OBJECT o
    ;

    DESIGN orders 'Заказы'###sign {
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {  
                    caption = 'Фильтры';
                    type = CONTAINERV; 
                    NEW topFilters1 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(filterOrderDateFrom());
                        MOVE PROPERTY(filterOrderDateTo());                            
                        MOVE PROPERTY(nameFilterOrderSupplier());
                        MOVE PROPERTY(nameFilterOrderSupplierStock());     
                        MOVE PROPERTY(nameFilterOrderCustomer());
                        MOVE PROPERTY(nameFilterOrderCustomerStock());                                               
                    }
                    NEW topFilters2 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(nameFilterOrderCustomUser());
                        MOVE PROPERTY(nameFilterOrderComputer());                            
                    }                
                }
                MOVE o.box {
                    fill = 1;
                }
            }
//            ADD o.box {
//                fill = 2;
//            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE o.created;
                    MOVE o.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

                        MOVE PROPERTY(copy(o)) { caption = 'Заказ'###sign;}
                    }
                }
            }
        }
    }
    @extendFormEditable(orders);
    @defineFilterIsOpened (order, orders, o); 
    @defineDocumentLogForm(orders, o);
    edit 'Редактировать' = ACTION ABSTRACT LIST  (OrderDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    edit(UserOrderDetail d) = ACTION NEWSESSION {
        SHOW userOrder OBJECTS o = userOrder(d), d = d MANAGESESSION DOCKED;
    }
    edit(UserOrderDetail d) += ACTION edit(d);    
END

META implementOrderDestination(fromProp, toProp)
    from(Order order) += fromProp(order);
    to(Order order) += toProp(order);
    fromStock(Order order) += fromProp##Stock(order);
    toStock(Order order) += toProp##Stock(order);
END

// Партии приход
META defineOrderBatch(legalEntityProp, stockProp)
    @showDocumentInterfaceDetailBatch(order);
    @defineDocumentInterfaceDetailBatch(order, batch);
    batch[Order.OrderDetail](OrderDetail d) += batch(d);
    
    overCopy[UserOrderDetail,UserOrderDetail](UserOrderDetail d, UserOrderDetail detail) += ACTION {      
        batch(d) <- batch(detail);
    } 
    overCopy(UserOrderDetail d, OrderDetail detail) += ACTION {      
        batch(d) <- batch(detail);
    } 
    replace(Sku s, Batch b) += ACTION { sku(UserOrderDetail detail) <- s WHERE batch(detail) == b;}
    // Пишем в цену заказа из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userOrder, priceStock, userOrder);

    // История по правой кнопке
    @defineBalancesBatch(orderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор
    @defineDocumentBatchStockPriceListTypeAgreement(userOrder, stockProp);
    @extendFormDocumentBatchStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp);
    @implementDocumentBatch(order);
    
//    overFillDocumentOrderDetailDocumentDetail(o, d) += ACTION (o, d) { batchUserOrderDetail(o) <- batchDocumentDetail(d);}                    
END

META defineOrderBatchDialog(dumb)
    changeBatch(UserOrderDetail userOrderDetail) = ACTION {
        DIALOG dialogBatch OBJECTS sk = sku(userOrderDetail), bt = batch(userOrderDetail) INPUT NULL DO {
            batch(userOrderDetail) <- bt;
        }
    }

    EXTEND FORM userOrder
        PROPERTIES (d) SHOWIF showBatch[Order](o) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d)  BACKGROUND backgroundSku(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY SHOWIF showBatch(o) nameBatch AFTER shortNameUOMSku(d);
END

META defineOrderBatchDialogStock(stockProp, dialog)
    changeBatch(UserOrderDetail d) = ACTION {
        DIALOG dialogBatchStock##dialog OBJECTS st = stockProp(d),
                                 t = dateTime(d),
                                 sk = sku(d),
                                 bt = batch(d) INPUT NULL DO
            batch(d) <- bt;
    }

    EXTEND FORM userOrder
        PROPERTIES (d) SHOWIF showBatch(o) AFTER shortNameUOMSku(d) nameBatch ON CHANGE changeBatch(d), documentNameBatch ON CHANGE changeBatch(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY SHOWIF showBatch(o) AFTER shortNameUOMSku(d) nameBatch, documentNameBatch;
END
