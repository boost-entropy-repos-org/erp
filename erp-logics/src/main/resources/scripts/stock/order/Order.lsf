MODULE Order;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        Barcode,
        PriceListType,
        PriceListLedger,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        OrderLedger,
        EmployeeStock,
        Operation,
        StockMovement,
        StockContract,
        StockTax;


PRIORITY Utils, Stock;

CLASS ABSTRACT Order 'Заказ' : Document;
CLASS ABSTRACT OrderDetail 'Строка заказа' : DocumentDetail;

@defineDocumentAbstract(order);
@defineDocumentAbstractNumber(order);
//@defineDocumentDetailIndex(order);

@defineDocumentAbstractLegalEntity(order, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(order, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(order, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(order, to, 'Получатель');

closeDateOrder 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm PERSISTENT;

@defineDocumentAbstractHeaderTimePrefix(Order, shipment, ' поставки');
shipmentDateOrderDetail 'Дата поставки' = ABSTRACT DATE (OrderDetail) IN documentHeader PERSISTENT;
shipmentTimeOrderDetail 'Время поставки' = ABSTRACT TIME (OrderDetail) IN documentHeader PERSISTENT;
shipmentDateTimeOrderDetail 'Дата/время поставки' (d) = dateTimeToDateTime(shipmentDateOrderDetail(d), shipmentTimeOrderDetail(d)) PERSISTENT;

@defineDocumentAbstractDataStock(order, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(order, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(order, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(order, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(order);
@defineDocumentAbstractClosed(order);

@defineDocumentAbstractDetailSku(order, sku);

@defineDocumentAbstractDetailBatch(order, batch);
idBatchOrderDetail 'Код партии' (d)= idBatch(batchOrderDetail(d));

@defineDocumentAbstractDetailPrice(order);
@defineDocumentAbstractDetailDataSumCustomPrefix (orderDetail, , );
@defineDocumentAbstractDetailVAT(order, , );
@defineDocumentAbstractDetailVATDataSumCustom (orderDetail, invoice);

@defineDocumentAbstractDetailQuantity(order);
@defineDocumentDetailGrossWeight(order, sku);
@defineDocumentAbstractDetailQuantityPrefix(order, pack, ' (упаковок)');
@defineDocumentHeaderSkuQuantity(order, sku);

@defineDocumentHeaderQuantity(order);
@defineDocumentHeaderVATSum(order, orderDetail, invoice);
@defineDocumentHeaderSum (order);

@defineDocumentHeaderGrossWeight(order);
@defineDocumentAbstractHeaderCurrency (order);

operationOrder = ABSTRACT Operation.Operation (Order) PERSISTENT;
nameOperationOrder 'Операция' (order) = Operation.nameOperation(operationOrder(order));  ////

quantityFromOrderStock 'Кол-во со склада' (order, stock) = GROUP SUM quantityOrderDetail(orderDetail) BY orderOrderDetail(orderDetail),
                                                                                                         fromStockOrderDetail(orderDetail);

quantityToOrderStock 'Кол-во на склад' (order, stock) = GROUP SUM quantityOrderDetail(orderDetail) BY orderOrderDetail(orderDetail),
                                                                                                      toStockOrderDetail(orderDetail);

editOrder 'Редактировать' = ABSTRACT ACTION LIST (Order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

inOrder 'Приходный' = ABSTRACT BOOLEAN (Order);
outOrder 'Расходный' (order) = order IS Order AND NOT inOrder(order);

isReturnOrder 'Возвратный' = ABSTRACT BOOLEAN (Order);

@defineDocumentAbstractHeaderDescription(Order);
@defineDocumentDetailDescription(order, OrderDetail);
//----------------------------------------------- Заказ ---------------------------------------------------//

META defineOrder(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, filter)

    CLASS ABSTRACT Order 'Заказ'###sign : Order.Order;
    CLASS ABSTRACT OrderDetail 'Строка заказа'###sign : Order.OrderDetail;

    CLASS UserOrder 'Заказ (польз.)'###sign : Order;
    CLASS UserOrderDetail 'Строка заказа (польз.)'###sign : OrderDetail;

    @defineExternalizable(userOrderDetail, VARSTRING[100]);

    @defineDocumentInterface(order);
    Order.noteOrder (order) += noteOrder(order);
    
    @deriveDocumentHeaderTimePrefix(UserOrder, );
    Order.orderOrderDetail (detail) += orderOrderDetail(detail);
    Order.dateOrder (order) += dateOrder(order);
    Order.timeOrder (order) += timeOrder(order);

    @defineDocumentInterfaceNumber(order);
    Order.numberOrder (order) += numberOrder(order);
    Order.seriesOrder (order) += seriesOrder(order);

    @defineNumeratedDefault(UserOrder, 'Заказы'###sign, 'ЗК');

    @defineDocumentInterfaceLegalEntity (order, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (order, customer, 'Покупатель');
    Order.supplierOrder(order) += supplierOrder(order);
    Order.customerOrder(order) += customerOrder(order);

    @defineDocumentInterfaceDataStock(order, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(order, stock, 'Склад покупателя', customer);
    Order.supplierStockOrder(order) += supplierStockOrder(order);
    Order.customerStockOrder(order) += customerStockOrder(order);
    Order.dataSupplierStockOrderDetail(detail) += dataSupplierStockOrderDetail(detail);
    Order.dataCustomerStockOrderDetail(detail) += dataCustomerStockOrderDetail(detail);

    CONSTRAINT supplierUserOrder(userOrder) AND supplierStockUserOrder(userOrder) AND NOT
               inLegalEntityStock(supplierUserOrder(userOrder), supplierStockUserOrder(userOrder))
        CHECKED BY supplierStockUserOrder
            MESSAGE 'Поставщик и склад поставщика для заказа не имеют связи';
    CONSTRAINT customerUserOrder(userOrder) AND customerStockUserOrder(userOrder) AND NOT
               inLegalEntityStock(customerUserOrder(userOrder), customerStockUserOrder(userOrder))
        CHECKED BY customerStockUserOrder
            MESSAGE 'Покупатель и склад покупателя для заказа не имеют связи';

    @defineDocumentInterfaceContract(Order, contractSku, supplier, customer,
                                     'Организация (поставщик) договора заказа не соответствует организация (поставщик) заказа',
                                     'Организация (покупатель) договора заказа не соответствует организация (покупатель) заказа');

    @defineDocumentInterfacePosted(order);
    Order.isPostedOrder (order) += isPostedOrder(order);
    
    @defineDocumentInterfaceClosed(order);
    Order.isClosedOrder (order) += isClosedOrder(order);
    
    @defineDocumentInterfaceDataTimePrefix(order, shipment, ' поставки');
    Order.shipmentTimeOrder(order) += shipmentTimeOrder(order);
    Order.shipmentDateOrder(order) += shipmentDateOrder(order);    
    Order.shipmentTimeOrderDetail(d) += shipmentTimeOrderDetail(d);
    Order.shipmentDateOrderDetail(d) += shipmentDateOrderDetail(d);
    @deriveDocumentHeaderTimePrefix(UserOrder, shipment);

    closeDateOrder 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm;
    closeDateUserOrder 'Дата автоматического закрытия' = DATA DATE (UserOrder) IN documentPrm;
    closeDateOrder(order) += closeDateUserOrder(order);
    Order.closeDateOrder (order) += closeDateOrder(order);
    closeDataDateOrderDetail 'Дата автоматического закрытия' = ABSTRACT DATE (OrderDetail) IN documentPrm;
    closeDataDateUserOrderDetail 'Дата автоматического закрытия' = DATA DATE (UserOrderDetail) IN documentPrm;
    closeDataDateOrderDetail(detail) += closeDataDateUserOrderDetail(detail);

    closeDateOrderDetail 'Дата автоматического закрытия' (detail) = OVERRIDE closeDateOrder(orderOrderDetail(detail)), closeDataDateOrderDetail(detail) PERSISTENT;
    closeDateUserOrderDetail 'Дата автоматического закрытия' (detail) = OVERRIDE closeDateUserOrder(userOrderUserOrderDetail(detail)), closeDataDateUserOrderDetail(detail) PERSISTENT;

    closeDataDateUserOrderDetail(detail) <- sumDate(shipmentDateUserOrderDetail(detail), quantityDaysCloseOrdersStock(stockProp###stock###userOrderDetail(detail)))
        WHEN CHANGED(shipmentDateUserOrderDetail(detail)) OR CHANGED(stockProp###stock###userOrderDetail(detail));

//    isDataClosedOrder 'Закрыт' = ABSTRACT BOOLEAN(Order);
//    isDataClosedUserOrder 'Закрыт' = DATA BOOLEAN(UserOrder);
//    isDataClosedOrder(order) += isDataClosedUserOrder(order);
//
//    isDataClosedOrderDetail 'Закрыт' = ABSTRACT BOOLEAN(OrderDetail);
//    isDataClosedUserOrderDetail 'Закрыт' = DATA BOOLEAN(UserOrderDetail);
//    isDataClosedOrderDetail(order) += isDataClosedUserOrderDetail(order);

    defaultClosedOrderDetail(detail) = closeDateOrderDetail(detail) < currentDate() ;
    WHEN SET (closeDateUserOrder(order) <= currentDate()) DO closeUserOrder(order);
//    isClosedOrderDetail 'Закрыт' (detail) = OVERRIDE defaultClosedOrderDetail(detail),
//                                                     isDataClosedOrder(orderOrderDetail(detail)),
//                                                     isDataClosedOrderDetail(detail);
//    countClosedOrderDetailOrder (order) = GROUP SUM 1 IF isClosedOrderDetail(detail) AND isPostedOrderDetail(detail) BY orderOrderDetail(detail);
//    isClosedOrder 'Закрыт' (order) =  countClosedOrderDetailOrder(order) == countOrderDetailOrder(order);
//
//    defaultClosedUserOrderDetail(detail) = closeDateUserOrderDetail(detail) < currentDate();
//    isClosedUserOrderDetail 'Закрыт' (detail) = OVERRIDE defaultClosedUserOrderDetail(detail),
//                                                         isDataClosedUserOrder(userOrderUserOrderDetail(detail)),
//                                                         isDataClosedUserOrderDetail(detail);
//    countClosedUserOrderDetailUserOrder (userOrder) = GROUP SUM 1 IF isClosedUserOrderDetail(detail) AND isPostedUserOrderDetail(detail) BY userOrderUserOrderDetail(detail);
//    isClosedUserOrder 'Закрыт' (userOrder) =  countClosedUserOrderDetailUserOrder(userOrder) == countUserOrderDetailUserOrder(userOrder);

//    isOpenedUserOrder 'Не закрыт' (o) = isPostedUserOrder(o) AND NOT isClosedUserOrder(o) PERSISTENT;
//
//    closeUserOrder 'Закрыть' (o) = ACTION (o) NEWSESSION AUTOAPPLY { IF isPostedUserOrder(o) AND NOT isClosedUserOrder(o) THEN ASSIGN isDataClosedUserOrder(o) <- TRUE; } TOOLBAR CONFIRM;
//
//    openUserOrder 'Открыть' (o) = ACTION (o) NEWSESSION AUTOAPPLY { IF isClosedUserOrder(o) THEN ASSIGN isDataClosedUserOrder(o) <- NULL; } TOOLBAR CONFIRM;

    @defineDocumentInterfaceDescription(order, 'Заказ'###sign);
    Order.descriptionOrder(order) += descriptionOrder(order);    
    
    @defineDocumentInterfaceCurrency(order);
    @deriveDocumentCurrency(userOrder, stockProp###stock);
    Order.currencyOrder(order) += currencyOrder(order);

    @defineDocumentInterfaceHeaderAgreement(order);
    @deriveDocumentHeaderAgreement (userOrder, supplierUserOrder, customerUserOrder);

    @defineDocumentInterfaceDetailSku(order, sku);
    Order.skuOrderDetail(detail) += skuOrderDetail(detail);

    @defineDocumentInterfaceDetailQuantity(order);
    Order.quantityOrderDetail(detail) += quantityOrderDetail(detail);

    @defineDocumentInterfaceDetailPrice(order); // объявляем цену без НДС
    Order.priceOrderDetail(detail) += priceOrderDetail(detail);

    @defineDocumentInterfaceDetailVAT(order, country###stockProp###stock, , ); // объявляем шкалу
    
    overVATUserOrderDetail = ABSTRACT Range (UserOrderDetail); 
    WHEN SESSION
        (CHANGED(skuUserOrderDetail(detail)) OR CHANGED (supplierStockUserOrderDetail(detail)) OR 
        CHANGED(dateUserOrderDetail(detail)) OR CHANGED(overVATUserOrderDetail(detail))) AND NOT CHANGED(VATUserOrderDetail(detail)) DO {
            VATUserOrderDetail(detail) <- OVERRIDE VATSkuCountryDate (skuUserOrderDetail(detail), countryStock(supplierStockUserOrderDetail(detail)), dateUserOrderDetail(detail)),
                                                   overVATUserOrderDetail(detail);
        } // записываем шкалу

    @deriveDocumentDetailValueVAT(userOrder); // записываем значение ставки

    Order.VATOrderDetail(detail) += VATOrderDetail(detail);
    Order.valueVATOrderDetail(detail) += valueVATOrderDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (order, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE
    @defineDocumentDetailPriceVATOnChange(userOrder);
    @defineDocumentDetailNumberVATOnChange(userOrder, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(userOrder);

    @defineDocumentInterfacePriceListType(order); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userOrder); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userOrder, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // суммма без НДС
    @defineDocumentInterfaceDetailDataSum(order);
    @deriveDocumentDetailSum(userOrder, quantity);
    Order.sumOrderDetail(detail) += sumOrderDetail(detail);

    // суммы НДС и с НДС
    @defineDocumentInterfaceDetailVATDataSum (order, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

    Order.VATSumOrderDetail(detail) += VATSumOrderDetail(detail);
    Order.invoiceSumOrderDetail(detail) += invoiceSumOrderDetail(detail);

    @defineDocumentInterfaceHeaderVATSum (order, orderDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(order);
    @defineDocumentHeaderSkuQuantity(order, sku);
    //Order.quantityOrderSku (order, sku) += quantityOrderDetailSkuOrder(sku, order);

    @defineDocumentHeaderSkuQuantity(userOrder, sku);
    @defineDocumentInterfaceHeaderSum(order);

    @defineAddDetailDialogSkuStock(userOrder, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userOrder, sku);

    noAgreementUserOrder (order) = order IS UserOrder AND NOT agreementUserOrder(order);

    countOrderDetailStockOrder 'Кол-во строк по складу '(stock, order) = GROUP SUM 1 BY stockProp###stock###orderDetail(orderDetail), orderOrderDetail(orderDetail);

//-- Дата следующей поставки
    @defineDocumentInterfaceDatePrefix (order, nextShipment, ' следующей поставки');
    quantityDaysNextShipmentUserOrder 'Кол-во дней до след. поставки' (userOrder) =  subtractInteger(nextShipmentDateUserOrder(userOrder), dateUserOrder(userOrder)) + 1;
    fromShipmentDateUserOrder 'Начало периода' (userOrder) = subtractDate(dateUserOrder(userOrder), quantityDaysNextShipmentUserOrder(userOrder));

    @implementDocumentSupplierCustomer(order);
    @defineMovementSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(orderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userOrderDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineMovementPriceSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

    @defineDocumentDialogSupplierCustomerStock(userOrder, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userOrderDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userOrder, supplierFilter, customerFilter);
    
    backgroundQuantityUserOrderDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
    backgroundNameUserOrderDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
// --------------------------- Формы Заказа ---------------------------------

    editOrder 'Редактировать' = ABSTRACT ACTION LIST (Order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Order.editOrder (order) += editOrder(order);

    editSkuUserOrderDetail 'Редактировать SKU' (d) = editSku(skuUserOrderDetail(d));
    FORM userOrder 'Заказ'###sign
        OBJECTS o = UserOrder FIXED PANEL
        PROPERTIES (o) isPostedUserOrder, nameSupplierUserOrder ON CHANGE changeSupplier###supplierFilter###userOrder(o),
                       nameCustomerUserOrder ON CHANGE changeCustomer###customerFilter###userOrder(o),
                       nameSupplierStockUserOrder ON CHANGE changeSupplierStock###supplierFilter###userOrder(o),
                       nameCustomerStockUserOrder ON CHANGE changeCustomerStock###customerFilter###userOrder(o),
                       nameNumeratorUserOrder, numberUserOrder, seriesUserOrder, dateUserOrder, timeUserOrder,
                       nameCurrencyUserOrder, nameAgreementUserOrder, namePriceListTypeUserOrder SHOWIF noAgreementUserOrder(o), noteUserOrder
        PROPERTIES (o) READONLY countUserOrderDetailUserOrder, quantityUserOrderDetailUserOrder, sumUserOrderDetailUserOrder,
                       VATSumUserOrderDetailUserOrder, invoiceSumUserOrderDetailUserOrder
        PROPERTIES (o) shipmentDateUserOrder, shipmentTimeUserOrder, closeDateUserOrder, nextShipmentDateUserOrder,
                       quantityDaysNextShipmentUserOrder READONLY,
                       seriesNumberContractSkuUserOrder, isCommissionUserOrder

        OBJECTS d = UserOrderDetail
        PROPERTIES (d) indexUserOrderDetail
        PROPERTIES (d) ON EDIT editSkuUserOrderDetail(d) idBarcodeSkuUserOrderDetail, nameSkuUserOrderDetail BACKGROUND backgroundNameUserOrderDetail(d), shortNameUOMSkuUserOrderDetail
        PROPERTIES (d) quantityUserOrderDetail BACKGROUND backgroundQuantityUserOrderDetail(d), namePriceListTypeUserOrderDetail,
                       priceUserOrderDetail ON CHANGE changePriceUserOrderDetail(d), sumUserOrderDetail,
                       numberVATUserOrderDetail ON CHANGE changeNumberVATUserOrderDetail(d),
                       valueVATUserOrderDetail ON CHANGE changeValueVATUserOrderDetail(d),
                       invoicePriceUserOrderDetail ON CHANGE changeInvoicePriceUserOrderDetail(d),
                       VATSumUserOrderDetail, invoiceSumUserOrderDetail,
                       name###stockProp###stock###userOrderDetail ON CHANGE changeData###stockProp###stock###filter###userOrderDetail(d), shipmentDateUserOrderDetail,
                       shipmentTimeUserOrderDetail, closeDateUserOrderDetail, ADDOBJ, DELETESESSION
        ORDER BY indexUserOrderDetail(d)

        PROPERTIES(o) TODRAW d fillDocumentOrder, addDetailDialogSkuStockUserOrderDetailUserOrder,
                               addDetailInputBarcodeUserOrderDetailUserOrder, deleteUserOrderDetailUserOrder
        FILTERS userOrderUserOrderDetail(d) == o

        EVENTS
            ON OK prePostUserOrder(o)

//        HINTTABLE LIST dateTimeUserOrderDetail, skuUserOrderDetail, supplierStockUserOrderDetail, customerStockUserOrderDetail,
//                       priceListTypeUserOrderDetail, currencyUserOrderDetail,
//                       priceUserOrderDetail, VATUserOrderDetail, valueVATUserOrderDetail, invoicePriceUserOrderDetail

        EDIT UserOrder OBJECT o
    ;

    DESIGN userOrder FROM DEFAULT{

        main {
            preferredSize = (1024, 768);

            NEW header.box {
                type = CONTAINERH;

                NEW headerRow1 {
                    fill = 1;
                    type = CONTAINERV;

                    ADD o.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            ADD PROPERTY(isPostedUserOrder(o)) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            ADD PROPERTY(nameNumeratorUserOrder(o));
                            ADD PROPERTY(numberUserOrder(o));
                            ADD PROPERTY(seriesUserOrder(o));
                            ADD PROPERTY(dateUserOrder(o));
                            ADD PROPERTY(timeUserOrder(o));
                        }    
                    }                    
                    
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            ADD PROPERTY(nameSupplierUserOrder(o));
                            ADD PROPERTY(nameSupplierStockUserOrder(o));
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            ADD PROPERTY(nameCustomerUserOrder(o));
                            ADD PROPERTY(nameCustomerStockUserOrder(o));
                        }
                    }
                    NEW headerTabbedPane {
                        alignment = STRETCH;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            NEW headerContract {
                                type = CONTAINERH;
                                caption = 'Договор';
                                ADD PROPERTY(seriesNumberContractSkuUserOrder(o));
                                ADD PROPERTY(isCommissionUserOrder(o));
                            }
                            ADD o.documentPrm {
                                columns = 2;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = CONTAINERH;                                
                            NEW documentShipmentGroup {
                                caption = 'Исполнение';
                                type = COLUMNS;
                                columns = 1;
                                ADD PROPERTY(shipmentDateUserOrder(o));
                                ADD PROPERTY(shipmentTimeUserOrder(o));
                            }
                            NEW headerRow121 {
                                caption = 'Поставка';
                                type = COLUMNS;
                                columns = 1;
                                ADD PROPERTY(nextShipmentDateUserOrder(o));
                                ADD PROPERTY(quantityDaysNextShipmentUserOrder(o));
                            }
                            NEW headerDate {
                                caption = 'Закрытие';
                                type = CONTAINERV;
                                ADD PROPERTY(closeDateUserOrder(o));
                            }
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = CONTAINERV;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = CONTAINERH;
                        }
                    }
                }

                ADD o.documentSum {
                    columns = 1;
                }
            }
            NEW specification.box {
                fill = 1;
                type = TABBED;
                ADD d.box {
                    caption = 'Спецификация';
                }
            }

            ADD functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }                        
            PROPERTY(sumUserOrderDetailUserOrder(o)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserOrderDetailUserOrder(o)) { preferredCharWidth = 13;}
            PROPERTY(invoiceSumUserOrderDetailUserOrder(o)) { preferredCharWidth = 13;}
            
        }
    }

    @defineDocumentSkuStockPriceListTypeAgreement(userOrder, stockProp);
    @extendFormDocumentSkuStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp);

    overChangeQuantityValueSkuUserOrderDetail (d) +=  ACTION (d) {
        shipmentDataDateUserOrderDetail (d) <- shipmentDateUserOrder(userOrderUserOrderDetail(d));
        shipmentDataTimeUserOrderDetail (d) <- shipmentTimeUserOrder(userOrderUserOrderDetail(d));
    }

    addUserOrder 'Добавить' = ACTION ADDFORM UserOrder;
    editUserOrder 'Редактировать' (userOrder) = ACTION EDITFORM UserOrder;
    editOrder(order) += editUserOrder(order);
    
    isUserOpenedOrder(o)=  isOpenedOrder(o) AND isUserOrder(o);

    overCopyOrderDetail = ABSTRACT ACTION LIST (UserOrderDetail, OrderDetail);
    overCopyOrder = ABSTRACT ACTION LIST (Order, UserOrder);
    copyOrder 'Копировать' = ACTION (order) NEWSESSION {
        FOR ADDOBJ o = UserOrder DO {
            ASSIGN supplierUserOrder(o) <- supplierOrder(order);
            ASSIGN supplierStockUserOrder(o) <- supplierStockOrder(order);
            ASSIGN customerUserOrder(o) <- customerOrder(order);
            ASSIGN customerStockUserOrder(o) <- customerStockOrder(order);
            ASSIGN currencyUserOrder(o) <- currencyOrder(order);
            ASSIGN agreementUserOrder(o) <- agreementOrder(order);
            ASSIGN priceListTypeUserOrder(o) <- priceListTypeOrder(order);
            ASSIGN noteUserOrder(o) <- noteOrder(order);

            EXEC overCopyOrder(order, o);

            FOR orderOrderDetail(orderDetail) == order DO {
                FOR ADDOBJ d=UserOrderDetail DO {
                    ASSIGN userOrderUserOrderDetail(d) <- o;
                    ASSIGN skuUserOrderDetail(d) <- skuOrderDetail(orderDetail);
                    ASSIGN quantityUserOrderDetail(d) <- quantityOrderDetail(orderDetail);
                    ASSIGN data###stockProp###stock###userOrderDetail(d) <- data###stockProp###stock###orderDetail(orderDetail);
                    
                    EXEC overCopyOrderDetail(d, orderDetail);
                }
            }

            FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopyUserOrderDetail = ABSTRACT ACTION LIST (UserOrderDetail, UserOrderDetail);

    copyOrderDetail 'Копировать' = ACTION (detail) {
        FOR ADDOBJ d = UserOrderDetail DO {          

            userOrderUserOrderDetail(d) <- userOrderUserOrderDetail(detail);
            skuUserOrderDetail(d) <- skuUserOrderDetail(detail);
            quantityUserOrderDetail(d) <- quantityUserOrderDetail(detail);
            priceUserOrderDetail(d) <- priceUserOrderDetail(detail);
            data###stockProp###stock###userOrderDetail(d) <- data###stockProp###stock###userOrderDetail(detail);
            priceListType###userOrderDetail(d) <- priceListType###userOrderDetail(detail);      
            shipmentDataDate###userOrderDetail(d) <- shipmentDataDate###userOrderDetail(detail);         
            shipmentDataTime###userOrderDetail(d) <- shipmentDataTime###userOrderDetail(detail);        
            closeDataDate###userOrderDetail(d) <- closeDataDate###userOrderDetail(detail);  
            
            EXEC overCopyUserOrderDetail(d, detail);                              
        }
    } TOOLBAR;
    
    EXTEND FORM userOrder 
        PROPERTIES(d) copyOrderDetail FORCE PANEL 
    ;    
    
    filterOrderDateFrom 'Дата с' = DATA SESSION DATE ();
    filterDateFromOrder (o) = dateOrder(o) >= filterOrderDateFrom() OR (o IS Order AND NOT filterOrderDateFrom());      
    
    filterOrderDateTo 'Дата по' = DATA SESSION DATE ();
    filterDateToOrder (o) = dateOrder(o) <= filterOrderDateTo() OR (o IS Order AND NOT filterOrderDateTo());      
    
    filterOrderCustomer  = DATA SESSION LegalEntity ();
    nameFilterOrderCustomer 'Покупатель' = nameLegalEntity(filterOrderCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerOrder (o) = customerOrder(o) == filterOrderCustomer() OR (o IS Order AND NOT filterOrderCustomer());    

    filterOrderCustomerStock  = DATA SESSION Stock ();
    nameFilterOrderCustomerStock 'Склад покупателя' = nameStock(filterOrderCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStockOrder (o) = customerStockOrder(o) == filterOrderCustomerStock() OR (o IS Order AND NOT filterOrderCustomerStock());  

    filterOrderSupplier = DATA SESSION LegalEntity ();
    nameFilterOrderSupplier 'Поставщик' = nameLegalEntity(filterOrderSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierOrder (o) = supplierOrder(o) == filterOrderSupplier() OR (o IS Order AND NOT filterOrderSupplier());      

    filterOrderSupplierStock  = DATA SESSION Stock ();
    nameFilterOrderSupplierStock 'Склад поставщика' = nameStock(filterOrderSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStockOrder (o) = supplierStockOrder(o) == filterOrderSupplierStock() OR (o IS Order AND NOT filterOrderSupplierStock());        
    
         
    FORM orders 'Заказы' TITLE 'Заказы'###sign
    
        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderSupplier, nameFilterOrderSupplierStock, nameFilterOrderCustomer, nameFilterOrderCustomerStock
        FILTERS is###supplierFilter###legalEntity(filterOrderSupplier())    
            
        OBJECTS o = Order
        PROPERTIES (o) READONLYIF isReadonly() isClosedOrder, isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder,
                                nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder,
                                nameAgreementOrder
        PROPERTIES (o) READONLY countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                                VATSumOrderDetailOrder, invoiceSumOrderDetailOrder
        PROPERTIES (o) READONLYIF isReadonly() shipmentDateOrder, shipmentTimeOrder, closeDateOrder, noteOrder

        PROPERTIES (o) READONLY FORCE PANEL createdNameUserUserOrder, createdTimeUserOrder, createdHostnameComputerUserOrder, 
                                            postedNameUserUserOrder, postedTimeUserOrder, postedHostnameComputerUserOrder

        PROPERTIES ()  addUserOrder TODRAW o
        PROPERTIES (o) editOrder SHOWIF isOpenedOrder(o), copyOrder
        PROPERTIES (o) closeUserOrder SHOWIF isOpenedUserOrder(o), openUserOrder SHOWIF isClosedUserOrder(o)
        PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF isUserOpenedOrder(o)

        OBJECTS d=OrderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
        PROPERTIES (d) READONLY quantityOrderDetail, namePriceListTypeOrderDetail, priceOrderDetail, sumOrderDetail,
                       numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                       name###stockProp###stock###orderDetail, shipmentDateOrderDetail, shipmentTimeOrderDetail
        ORDER BY indexOrderDetail(d)

        FILTERS orderOrderDetail(d) == o
        FILTERS filterDateFromOrder(o), 
                filterDateToOrder(o),
                filterSupplierOrder(o),
                filterSupplierStockOrder(o),
                filterCustomerOrder(o),
                filterCustomerStockOrder(o)        
        
        DIALOG Order OBJECT o
    ;

    DESIGN orders FROM DEFAULT {
        PROPERTY (deleteo) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {
                    caption = 'Фильтры';
                    type = CONTAINERH;          
                    ADD PROPERTY(filterOrderDateFrom());
                    ADD PROPERTY(filterOrderDateTo());
                    ADD PROPERTY(nameFilterOrderSupplier());
                    ADD PROPERTY(nameFilterOrderSupplierStock());
                    ADD PROPERTY(nameFilterOrderCustomer());
                    ADD PROPERTY(nameFilterOrderCustomerStock());                      
                }
                ADD o.box {
                    fill = 1;
                }
            }
//            ADD o.box {
//                fill = 2;
//            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                ADD d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    ADD o.created;
                    ADD o.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

                        ADD PROPERTY(copyOrder(o)) { caption = 'Заказ'###sign;}
                    }
                }
            }
        }
    }
    @extendFormEditable(orders);
    @defineFilterIsOpened (order, orders, o); 
END

META implementOrderDestination(from, to)
    Order.fromOrder(order) += from##Order(order);
    Order.toOrder(order) += to##Order(order);
    Order.fromStockOrder(order) += from##StockOrder(order);
    Order.toStockOrder(order) += to##StockOrder(order);
    Order.dataFromStockOrderDetail(detail) += data###from##StockOrderDetail(detail);
    Order.dataToStockOrderDetail(detail) += data###to##StockOrderDetail(detail);
END

// Партии приход
META defineOrderBatch(legalEntityProp, stockProp)
    @defineDocumentInterfaceDetailBatch(order, batch);
    Order.batchOrderDetail(d) += batchOrderDetail(d);
    
    overCopyUserOrderDetail(d, detail) += ACTION (d, detail) {      
        batchUserOrderDetail(d) <- batchUserOrderDetail(detail);
    } 
    overCopyOrderDetail(d, detail) += ACTION (d, detail) {      
        batchUserOrderDetail(d) <- batchOrderDetail(detail);
    } 
    // Пишем в цену заказа из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userOrder, stockProp###stock, userOrder);

    // История по правой кнопке
    @defineBalancesBatch(orderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор
    @defineDocumentBatchStockPriceListTypeAgreement(userOrder, stockProp);
    @extendFormDocumentBatchStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp);
END

META defineOrderBatchDialog(dumb)
    changeBatchUserOrderDetail = ACTION (userOrderDetail) {
        FORM dialogBatch OBJECTS sk = skuUserOrderDetail(userOrderDetail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- NULL;
        }
    }

    EXTEND FORM userOrder
        PROPERTIES (d) nameBatchUserOrderDetail ON CHANGE changeBatchUserOrderDetail(d) AFTER shortNameUOMSkuUserOrderDetail(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY nameBatchOrderDetail AFTER shortNameUOMSkuOrderDetail(d);
END

META defineOrderBatchDialogStock(stockProp)
    changeBatchUserOrderDetail = ACTION (userOrderDetail) {
        FORM dialogBatchStock OBJECTS st = stockProp###userOrderDetail(userOrderDetail),
                                      t = dateTimeUserOrderDetail(userOrderDetail),
                                      sk = skuUserOrderDetail(userOrderDetail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- NULL;
        }

    };

    EXTEND FORM userOrder
        PROPERTIES (d) nameBatchUserOrderDetail ON CHANGE changeBatchUserOrderDetail(d) AFTER shortNameUOMSkuUserOrderDetail(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY nameBatchOrderDetail AFTER shortNameUOMSkuOrderDetail(d);
END
