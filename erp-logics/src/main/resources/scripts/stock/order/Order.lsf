MODULE Order;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        Barcode,
        PriceListType,
        PriceListLedger,
        Agreement,
        PurchaseLedger,
        SaleLedger,
        OrderLedger,
        EmployeeStock,
        Operation,
        StockMovement,
        StockContract,
        StockTax;


PRIORITY Utils, Stock;

CLASS ABSTRACT Order 'Заказ' : Document;
CLASS ABSTRACT OrderDetail 'Строка заказа' : DocumentDetail, OrderLedger;

@defineDocumentAbstract(order);
@defineDocumentAbstractNumber(order);
//@defineDocumentDetailIndex(order);

@defineDocumentAbstractLegalEntity(order, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(order, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(order, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(order, to, 'Получатель');

closeDateOrder 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm PERSISTENT;

@defineDocumentAbstractHeaderTimePrefix(Order, shipment, ' поставки');
shipmentDateOrderDetail 'Дата поставки' = ABSTRACT DATE (OrderDetail) IN documentHeader PERSISTENT;
shipmentTimeOrderDetail 'Время поставки' = ABSTRACT TIME (OrderDetail) IN documentHeader PERSISTENT;
shipmentDateTimeOrderDetail 'Дата/время поставки' (d) = dateTimeToDateTime(shipmentDateOrderDetail(d), shipmentTimeOrderDetail(d)) PERSISTENT;

@defineDocumentAbstractDataStock(order, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(order, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(order, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(order, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(order);
@defineDocumentAbstractClosed(order);

@defineDocumentAbstractDetailSku(order, sku);

@defineDocumentAbstractDetailBatch(order, batch);
idBatchOrderDetail 'Код партии' (d)= idBatch(batchOrderDetail(d));

@defineDocumentAbstractDetailPrice(order);
@defineDocumentAbstractDetailPriceCustomPrefix(orderDetail, invoice, ' с НДС');
@defineDocumentAbstractDetailDataSumCustomPrefix (orderDetail, , );
@defineDocumentAbstractDetailVAT(order, , );
@defineDocumentAbstractDetailVATDataSumCustom (orderDetail, invoice);

@defineDocumentAbstractDetailQuantity(order);
@defineDocumentDetailGrossWeight(order, sku);
@defineDocumentAbstractDetailQuantityPrefix(order, pack, ' (упаковок)');
packQuantityOrderDetailOrder 'Кол-во (упаковок)(всего)' (order) = GROUP SUM packQuantityOrderDetail(idetail) BY orderOrderDetail(idetail) IN documentSum PERSISTENT;

@defineDocumentHeaderSkuQuantity(order, sku);

@defineDocumentHeaderQuantity(order);
@defineDocumentHeaderVATSum(order, orderDetail, invoice);
@defineDocumentHeaderSum (order);

@defineDocumentHeaderGrossWeight(order);
@defineDocumentAbstractHeaderCurrency (order);

createdUserOrder = ABSTRACT CustomUser (Order);
createdNameUserOrder 'Создан пользователем' (order) = nameContact(createdUserOrder(order)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;

operationOrder = ABSTRACT Operation.Operation (Order) PERSISTENT;
nameOperationOrder 'Операция' (order) = Operation.nameOperation(operationOrder(order));  ////

quantityFromOrderStock 'Кол-во со склада' (order, stock) = GROUP SUM quantityOrderDetail(orderDetail) BY orderOrderDetail(orderDetail),
                                                                                                         fromStockOrderDetail(orderDetail);

quantityToOrderStock 'Кол-во на склад' (order, stock) = GROUP SUM quantityOrderDetail(orderDetail) BY orderOrderDetail(orderDetail),
                                                                                                      toStockOrderDetail(orderDetail);

editOrder 'Редактировать' = ABSTRACT ACTION LIST (Order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

inOrder 'Приходный' = ABSTRACT BOOLEAN (Order);
outOrder 'Расходный' (order) = order IS Order AND NOT inOrder(order);

isReturnOrder 'Возвратный' = ABSTRACT BOOLEAN (Order);

@defineDocumentAbstractHeaderDescription(Order);
@defineDocumentDetailDescription(order, OrderDetail);

@defineDocumentAbstractContract(Order, contractSku, ContractSku);

negativeValueOrders 'Запретить ввод отрицательных значений в заказах' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() negativeValueOrders
;

DESIGN options {
    pane {
        NEW orders {
            caption = 'Заказы';
            MOVE PROPERTY(negativeValueOrders());
        }
    }
}

CLASS AcquisitionTarget 'Цель приобретения';
TABLE acquisitionTarget(AcquisitionTarget);

@defineExternalizable(acquisitionTarget, VARSTRING[100]);

nameAcquisitionTarget 'Наименование' = DATA VARISTRING[50](AcquisitionTarget);

FORM acquisitionTarget 'Цель приобретение'
    OBJECTS t=AcquisitionTarget FIXED PANEL
    PROPERTIES(t) nameAcquisitionTarget,  idAcquisitionTarget SHOWIF showIDs()
    EDIT AcquisitionTarget OBJECT t
;

FORM acquisitionTargets 'Цели приобретение'
    OBJECTS t=AcquisitionTarget
    PROPERTIES(t) nameAcquisitionTarget READONLY, idAcquisitionTarget READONLY SHOWIF showIDs(), deleteb=DELETE FORCE PANEL TOOLBAR
    PROPERTIES(t) ADDFORM, EDITFORM
    ORDER BY nameAcquisitionTarget(t)
    DIALOG AcquisitionTarget OBJECT t
;
DESIGN acquisitionTargets { main{ preferredSize = (600, 400); } }

acquisitionTargetOrder = ABSTRACT AcquisitionTarget(Order);
nameAcquisitionTargetOrder 'Цель приобретения' = nameAcquisitionTarget(acquisitionTargetOrder(o));

//----------------------------------------------- Заказ ---------------------------------------------------//

META defineOrder(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, filter, NS)

    CLASS ABSTRACT Order 'Заказ'###sign : Order.Order;
    CLASS ABSTRACT OrderDetail 'Строка заказа'###sign : Order.OrderDetail;

    CLASS UserOrder 'Заказ (польз.)'###sign : Order;
    CLASS UserOrderDetail 'Строка заказа (польз.)'###sign : OrderDetail;
    
    backgroundSkuOrder 'Цвет'  (d)= ABSTRACT CASE COLOR (Order);

    @defineExternalizable(userOrder, VARSTRING[100]);
    @defineExternalizable(userOrderDetail, VARSTRING[100]);

    @defineDocumentInterface(order);
    Order.noteOrder (order) += noteOrder(order);
    Order.indexOrderDetail(d) += indexOrderDetail(d);
    
    createdUserOrder = ABSTRACT CustomUser (Order);
    createdNameUserOrder 'Создан пользователем' (order) = nameContact(createdUserOrder(order)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN created;
    createdUserOrder(order) += createdUserUserOrder(order) IF order IS UserOrder;    
    Order.createdUserOrder(order) += createdUserOrder(order);    
    @deriveDocumentHeaderTimePrefix(UserOrder, );
    Order.orderOrderDetail (detail) += orderOrderDetail(detail);
    Order.dateOrder (order) += dateOrder(order);
    Order.timeOrder (order) += timeOrder(order);

    @defineDocumentInterfaceNumber(order);
    Order.numberOrder (order) += numberOrder(order);
    Order.seriesOrder (order) += seriesOrder(order);

    @defineNumeratedDefault(UserOrder, 'Заказы'###sign, 'ЗК');

    @defineDocumentInterfaceLegalEntity (order, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (order, customer, 'Покупатель');
    Order.supplierOrder(order) += supplierOrder(order);
    Order.customerOrder(order) += customerOrder(order);

    @defineDocumentInterfaceDataStock(order, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(order, stock, 'Склад покупателя', customer);
    Order.supplierStockOrder(order) += supplierStockOrder(order);
    Order.customerStockOrder(order) += customerStockOrder(order);
    Order.dataSupplierStockOrderDetail(detail) += dataSupplierStockOrderDetail(detail);
    Order.dataCustomerStockOrderDetail(detail) += dataCustomerStockOrderDetail(detail);

    CONSTRAINT supplierUserOrder(userOrder) AND supplierStockUserOrder(userOrder) AND NOT
               inLegalEntityStock(supplierUserOrder(userOrder), supplierStockUserOrder(userOrder))
        CHECKED BY supplierStockUserOrder
            MESSAGE 'Поставщик и склад поставщика для заказа не имеют связи';
    CONSTRAINT customerUserOrder(userOrder) AND customerStockUserOrder(userOrder) AND NOT
               inLegalEntityStock(customerUserOrder(userOrder), customerStockUserOrder(userOrder))
        CHECKED BY customerStockUserOrder
            MESSAGE 'Покупатель и склад покупателя для заказа не имеют связи';

    @defineDocumentInterfaceContract(Order, contractSku, supplier, customer,
                                     'Организация (поставщик) договора заказа не соответствует организация (поставщик) заказа',
                                     'Организация (покупатель) договора заказа не соответствует организация (покупатель) заказа',
                                     'заказ'###sign, NS);
    Order.contractSkuOrder (order) += contractSkuOrder (order);
    acquisitionTargetOrder = ABSTRACT AcquisitionTarget(Order);
    nameAcquisitionTargetOrder 'Цель приобретения' = nameAcquisitionTarget(acquisitionTargetOrder(o));
    acquisitionTargetUserOrder = DATA AcquisitionTarget(UserOrder);
    nameAcquisitionTargetUserOrder 'Цель приобретения' = nameAcquisitionTarget(acquisitionTargetUserOrder(o)) IN documentPrm;    
    acquisitionTargetOrder(o) += acquisitionTargetUserOrder(o);
    Order.acquisitionTargetOrder(o) += acquisitionTargetOrder(o);
    
    @defineDocumentInterfacePosted(order);
    Order.isPostedOrder (order) += isPostedOrder(order);
    
    @defineDocumentInterfaceClosed(order);
    Order.isClosedOrder (order) += isClosedOrder(order);
    
    @defineDocumentInterfaceDataTimePrefix(order, shipment, ' поставки');
    Order.shipmentTimeOrder(order) += shipmentTimeOrder(order);
    Order.shipmentDateOrder(order) += shipmentDateOrder(order);    
    Order.shipmentTimeOrderDetail(d) += shipmentTimeOrderDetail(d);
    Order.shipmentDateOrderDetail(d) += shipmentDateOrderDetail(d);
    //@deriveDocumentHeaderTimePrefix(UserOrder, shipment);
    shipmentDateUserOrder(order) <- dateUserOrder(order) WHEN CHANGED(dateUserOrder(order));
    shipmentTimeUserOrder(order) <- timeUserOrder(order) WHEN CHANGED(timeUserOrder(order));

    overCloseDateOrder  = ABSTRACT DATE (Order);
    closeDateOrder 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm;
    closeDateUserOrder 'Дата автоматического закрытия' = DATA DATE (UserOrder) IN documentPrm;
    closeDateOrder(order) += closeDateUserOrder(order);
    Order.closeDateOrder (order) += closeDateOrder(order);
    
    overCloseDateOrderDetail  = ABSTRACT DATE (OrderDetail);
    closeDataDateOrderDetail 'Дата автоматического закрытия' = ABSTRACT DATE (OrderDetail) IN documentPrm;
    closeDataDateUserOrderDetail 'Дата автоматического закрытия' = DATA DATE (UserOrderDetail) IN documentPrm;
    closeDataDateOrderDetail(detail) += closeDataDateUserOrderDetail(detail);

    closeDateOrderDetail 'Дата автоматического закрытия' (detail) = OVERRIDE closeDateOrder(orderOrderDetail(detail)), closeDataDateOrderDetail(detail) PERSISTENT;
    closeDateUserOrderDetail 'Дата автоматического закрытия' (detail) = OVERRIDE closeDateUserOrder(userOrderUserOrderDetail(detail)), closeDataDateUserOrderDetail(detail) PERSISTENT;

    closeDataDateUserOrderDetail(detail) <- OVERRIDE sumDate(shipmentDateUserOrderDetail(detail), quantityDaysCloseOrdersStock(stockProp###stock###userOrderDetail(detail))), overCloseDateOrderDetail(detail)
        WHEN CHANGED(shipmentDateUserOrderDetail(detail)) OR CHANGED(stockProp###stock###userOrderDetail(detail)) OR CHANGED(overCloseDateOrderDetail(detail));
    closeDateUserOrder(order) <- OVERRIDE sumDate(shipmentDateUserOrder(order), quantityDaysCloseOrdersStock(stockProp###stock###userOrder(order))), overCloseDateOrder(order)
            WHEN CHANGED(shipmentDateUserOrder(order)) OR CHANGED(stockProp###stock###userOrder(order)) OR CHANGED(overCloseDateOrder(order));    

//    isDataClosedOrder 'Закрыт' = ABSTRACT BOOLEAN(Order);
//    isDataClosedUserOrder 'Закрыт' = DATA BOOLEAN(UserOrder);
//    isDataClosedOrder(order) += isDataClosedUserOrder(order);
//
//    isDataClosedOrderDetail 'Закрыт' = ABSTRACT BOOLEAN(OrderDetail);
//    isDataClosedUserOrderDetail 'Закрыт' = DATA BOOLEAN(UserOrderDetail);
//    isDataClosedOrderDetail(order) += isDataClosedUserOrderDetail(order);

    WHEN SET (closeDateUserOrder(order) <= currentDate()) DO isClosedUserOrder(order) <- TRUE;
//    isClosedOrderDetail 'Закрыт' (detail) = OVERRIDE defaultClosedOrderDetail(detail),
//                                                     isDataClosedOrder(orderOrderDetail(detail)),
//                                                     isDataClosedOrderDetail(detail);
//    countClosedOrderDetailOrder (order) = GROUP SUM 1 IF isClosedOrderDetail(detail) AND isPostedOrderDetail(detail) BY orderOrderDetail(detail);
//    isClosedOrder 'Закрыт' (order) =  countClosedOrderDetailOrder(order) == countOrderDetailOrder(order);
//
//    defaultClosedUserOrderDetail(detail) = closeDateUserOrderDetail(detail) < currentDate();
//    isClosedUserOrderDetail 'Закрыт' (detail) = OVERRIDE defaultClosedUserOrderDetail(detail),
//                                                         isDataClosedUserOrder(userOrderUserOrderDetail(detail)),
//                                                         isDataClosedUserOrderDetail(detail);
//    countClosedUserOrderDetailUserOrder (userOrder) = GROUP SUM 1 IF isClosedUserOrderDetail(detail) AND isPostedUserOrderDetail(detail) BY userOrderUserOrderDetail(detail);
//    isClosedUserOrder 'Закрыт' (userOrder) =  countClosedUserOrderDetailUserOrder(userOrder) == countUserOrderDetailUserOrder(userOrder);

//    isOpenedUserOrder 'Не закрыт' (o) = isPostedUserOrder(o) AND NOT isClosedUserOrder(o) PERSISTENT;
//
//    closeUserOrder 'Закрыть' (o) = ACTION (o) NEWSESSION AUTOAPPLY { IF isPostedUserOrder(o) AND NOT isClosedUserOrder(o) THEN ASSIGN isDataClosedUserOrder(o) <- TRUE; } TOOLBAR CONFIRM;
//
//    openUserOrder 'Открыть' (o) = ACTION (o) NEWSESSION AUTOAPPLY { IF isClosedUserOrder(o) THEN ASSIGN isDataClosedUserOrder(o) <- NULL; } TOOLBAR CONFIRM;

    @defineDocumentInterfaceDescription(order, 'Заказ'###sign);
    Order.descriptionOrder(order) += descriptionOrder(order);    
    
    @defineDocumentInterfaceCurrency(order);
    @deriveDocumentCurrency(userOrder, stockProp###stock);
    Order.currencyOrder(order) += currencyOrder(order);

    @defineDocumentInterfaceAgreement(order);
    @deriveDocumentHeaderAgreement (userOrder, supplier, customer, 'заказ'###sign, NS);

    @defineDocumentInterfaceDetailSku(order, sku);
    Order.skuOrderDetail(detail) += skuOrderDetail(detail);

    maxOrderDetailSkuOrder (sku, order) = GROUP MAX orderDetail BY skuOrderDetail(orderDetail),  orderOrderDetail(orderDetail);
    
    blankLineOrders 'Разрешить строки без SKU в заказах '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##blankLineOrders = blankLineOrders
    ;
    
    DESIGN options {
        orders {
            MOVE PROPERTY(NS##blankLineOrders);
        }
    }

    CONSTRAINT isPostedUserOrderDetail(d) AND NOT skuUserOrderDetail(d) AND NOT blankLineOrders()
        MESSAGE 'Для строки заказа '##sign##' должен быть задан SKU';   

    @defineDocumentInterfaceDetailQuantity(order);
    Order.quantityOrderDetail(detail) += quantityOrderDetail(detail);
    CONSTRAINT negativeValueOrders() AND detail IS OrderDetail AND quantityOrderDetail(detail) < 0
        MESSAGE 'Количество в строке заказа должно быть не отрицательным';

    @defineDocumentInterfaceDetailPrice(order); // объявляем цену без НДС
    Order.priceOrderDetail(detail) += priceOrderDetail(detail);

    @defineDocumentInterfaceDetailVAT(order, country###stockProp###stock, , ); // объявляем шкалу
    
    over1VATUserOrderDetail = ABSTRACT Range (UserOrderDetail); 
    over2VATUserOrderDetail = ABSTRACT Range (UserOrderDetail);
    overVATUserOrderDetail = OVERRIDE over2VATUserOrderDetail(detail), over1VATUserOrderDetail(detail);
    
    WHEN SESSION
        (CHANGED(skuUserOrderDetail(detail)) OR CHANGED (supplierStockUserOrderDetail(detail)) OR 
         CHANGED(overVATUserOrderDetail(detail))) AND NOT CHANGED(VATUserOrderDetail(detail)) DO {
            VATUserOrderDetail(detail) <- OVERRIDE VATSkuCountry (skuUserOrderDetail(detail), countryStock(supplierStockUserOrderDetail(detail))),
                                                   overVATUserOrderDetail(detail);
        } // записываем шкалу

    @deriveDocumentDetailValueVAT(userOrder); // записываем значение ставки

    Order.VATOrderDetail(detail) += VATOrderDetail(detail);
    Order.valueVATOrderDetail(detail) += valueVATOrderDetail(detail);

    @defineDocumentInterfaceDetailPricePrefix (order, invoice, ' с НДС'); // объявляем цену с НДС
    Order.invoicePriceOrderDetail(d) += invoicePriceOrderDetail(d);
    // объявляем Action'ы для ON CHANGE
    @defineDocumentDetailPriceVATOnChange(userOrder);
    @defineDocumentDetailNumberVATOnChange(userOrder, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(userOrder);

    @defineDocumentInterfacePriceListType(order); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userOrder); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userOrder, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // суммма без НДС
    @defineDocumentInterfaceDetailDataSum(order);
    @deriveDocumentDetailSum(userOrder, quantity);
    Order.sumOrderDetail(detail) += sumOrderDetail(detail);

    // суммы НДС и с НДС
    @defineDocumentInterfaceDetailVATDataSum (order, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

    Order.VATSumOrderDetail(detail) += VATSumOrderDetail(detail);
    Order.invoiceSumOrderDetail(detail) += invoiceSumOrderDetail(detail);

    @defineDocumentInterfaceHeaderVATSum (order, orderDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(order);
    @defineDocumentHeaderSkuQuantity(order, sku);
    //Order.quantityOrderSku (order, sku) += quantityOrderDetailSkuOrder(sku, order);

    @defineDocumentHeaderSkuQuantity(userOrder, sku);
    @defineDocumentInterfaceHeaderSum(order);

    @defineAddDetailDialogSkuStock(userOrder, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userOrder, sku);

    noAgreementUserOrder (order) = order IS UserOrder AND NOT agreementUserOrder(order);

    countOrderDetailStockOrder 'Кол-во строк по складу '(stock, order) = GROUP SUM 1 BY stockProp###stock###orderDetail(orderDetail), orderOrderDetail(orderDetail);

//-- Дата следующей поставки
    @defineDocumentInterfaceDatePrefix (order, nextShipment, ' следующей поставки');
    quantityDaysNextShipmentUserOrder 'Кол-во дней до след. поставки' (userOrder) =  subtractInteger(nextShipmentDateUserOrder(userOrder), dateUserOrder(userOrder)) + 1;
    fromShipmentDateUserOrder 'Начало периода' (userOrder) = subtractDate(dateUserOrder(userOrder), quantityDaysNextShipmentUserOrder(userOrder));

    @implementDocumentSupplierCustomer(order);
    @defineMovementSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(orderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userOrderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBarcodeSku(orderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userOrderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineMovementPriceSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

    @defineDocumentDialogSupplierCustomerStock(userOrder, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerStockDetail(userOrderDetail, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userOrder, supplierFilter, customerFilter);
    
    backgroundQuantityUserOrderDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
    backgroundNameUserOrderDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
// --------------------------- Формы Заказа ---------------------------------
    backgroundSkuUserOrderDetail 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);

    editOrder 'Редактировать' = ABSTRACT ACTION LIST (Order) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Order.editOrder (order) += ACTION editOrder(order);

    editSkuUserOrderDetail 'Редактировать SKU' (d) = ACTION editSku(skuUserOrderDetail(d));
    
    backgroundParamOrderDetail = RGB(212,255,212) IF orderDetail IS OrderDetail; 
    backgroundQuantityParamOrderDetail = OVERRIDE backgroundParamOrderDetail(d), backgroundQuantityUserOrderDetail(d);
    disablePostedUserOrder 'Запретить проведение' = ABSTRACT BOOLEAN (UserOrder); 
    overPrePostUserOrder 'Провести' (o) = ACTION (o) {
        IF NOT disablePostedUserOrder(o) THEN {
            isPostedUserOrder(o) <- TRUE;
        } 
    }
    
    FORM userOrder 'Заказ'###sign
        OBJECTS o = UserOrder FIXED PANEL
        PROPERTIES (o) isPostedUserOrder, nameSupplierUserOrder ON CHANGE changeSupplier###supplierFilter###userOrder(o),
                       nameCustomerUserOrder ON CHANGE changeCustomer###customerFilter###userOrder(o),
                       nameSupplierStockUserOrder ON CHANGE changeSupplierStock###supplierFilter###userOrder(o),
                       nameCustomerStockUserOrder ON CHANGE changeCustomerStock###customerFilter###userOrder(o),
                       nameNumeratorUserOrder, numberUserOrder, seriesUserOrder, dateUserOrder, timeUserOrder,
                       nameCurrencyUserOrder, nameAgreementUserOrder, namePriceListTypeUserOrder SHOWIF noAgreementUserOrder(o), noteUserOrder, nameAcquisitionTargetUserOrder
        PROPERTIES (o) READONLY countUserOrderDetailUserOrder, quantityUserOrderDetailUserOrder, sumUserOrderDetailUserOrder,
                       VATSumUserOrderDetailUserOrder, invoiceSumUserOrderDetailUserOrder
        PROPERTIES (o) shipmentDateUserOrder, shipmentTimeUserOrder, closeDateUserOrder, nextShipmentDateUserOrder,
                       quantityDaysNextShipmentUserOrder READONLY,
                       seriesNumberContractSkuUserOrder, isCommissionUserOrder

        OBJECTS d = UserOrderDetail
        PROPERTIES (d) indexUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d)
        PROPERTIES (d) ON EDIT editSkuUserOrderDetail(d) BACKGROUND backgroundSkuUserOrderDetail(d) idBarcodeSkuUserOrderDetail, 
                       idSkuUserOrderDetail, nameSkuUserOrderDetail BACKGROUND backgroundNameUserOrderDetail(d), shortNameUOMSkuUserOrderDetail
        PROPERTIES (d) quantityUserOrderDetail BACKGROUND backgroundQuantityParamOrderDetail(d), namePriceListTypeUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d),
                       priceUserOrderDetail ON CHANGE changePriceUserOrderDetail(d) BACKGROUND backgroundParamOrderDetail(d), sumUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d),
                       numberVATUserOrderDetail ON CHANGE changeNumberVATUserOrderDetail(d) BACKGROUND backgroundSkuUserOrderDetail(d),
                       valueVATUserOrderDetail ON CHANGE changeValueVATUserOrderDetail(d) BACKGROUND backgroundSkuUserOrderDetail(d),
                       invoicePriceUserOrderDetail ON CHANGE changeInvoicePriceUserOrderDetail(d) BACKGROUND backgroundSkuUserOrderDetail(d),
                       VATSumUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d), invoiceSumUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d),
                       name###stockProp###stock###userOrderDetail ON CHANGE changeData###stockProp###stock###filter###userOrderDetail(d) BACKGROUND backgroundSkuUserOrderDetail(d), 
                       shipmentDateUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d), shipmentTimeUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d), 
                       closeDateUserOrderDetail BACKGROUND backgroundSkuUserOrderDetail(d), ADDOBJ, deleteod = DELETESESSION
        ORDER BY indexUserOrderDetail(d)

        PROPERTIES(o) TODRAW d fillDocumentOrder, addDetailDialogSkuStockUserOrderDetailUserOrder,
                               addDetailInputBarcodeUserOrderDetailUserOrder, deleteUserOrderDetailUserOrder
        FILTERS userOrderUserOrderDetail(d) == o

        EVENTS
            ON OK overPrePostUserOrder(o)

//        HINTTABLE LIST dateTimeUserOrderDetail, skuUserOrderDetail, supplierStockUserOrderDetail, customerStockUserOrderDetail,
//                       priceListTypeUserOrderDetail, currencyUserOrderDetail,
//                       priceUserOrderDetail, VATUserOrderDetail, valueVATUserOrderDetail, invoicePriceUserOrderDetail

        EDIT UserOrder OBJECT o
    ;

    DESIGN userOrder {

        main {
            preferredSize = (1024, 768);

            NEW header.box {
                type = CONTAINERH;

                NEW headerRow1 {
                    fill = 1;
                    type = CONTAINERV;

                    MOVE o.documentHeader {
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY(isPostedUserOrder(o)) { preferredCharWidth = 40; }
                        }
                        NEW second { 
                            type = CONTAINERH;
                            MOVE PROPERTY(nameNumeratorUserOrder(o));
                            MOVE PROPERTY(numberUserOrder(o));
                            MOVE PROPERTY(seriesUserOrder(o));
                            MOVE PROPERTY(dateUserOrder(o));
                            MOVE PROPERTY(timeUserOrder(o));
                        }    
                    }                    
                    
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameSupplierUserOrder(o));
                            MOVE PROPERTY(nameSupplierStockUserOrder(o));
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameCustomerUserOrder(o));
                            MOVE PROPERTY(nameCustomerStockUserOrder(o));
                        }
                    }
                    NEW headerTabbedPane {
                        alignment = STRETCH;
                        type = TABBED;
                        NEW headerMainParams {
                            caption = 'Основные параметры';
                            type = CONTAINERV;
                            NEW headerContract {
                                type = CONTAINERH;
                                caption = 'Договор';
                                MOVE PROPERTY(seriesNumberContractSkuUserOrder(o));
                                MOVE PROPERTY(isCommissionUserOrder(o));
                            }
                            MOVE o.documentPrm {
                                columns = 3;
                            }
                        }
                        NEW headerExtraParams {
                            caption = 'Дополнительные параметры';
                            type = CONTAINERH;                                
                            NEW documentShipmentGroup {
                                caption = 'Исполнение';
                                type = COLUMNS;
                                columns = 1;
                                MOVE PROPERTY(shipmentDateUserOrder(o));
                                MOVE PROPERTY(shipmentTimeUserOrder(o));
                            }
                            NEW headerRow121 {
                                caption = 'Поставка';
                                type = COLUMNS;
                                columns = 1;
                                MOVE PROPERTY(nextShipmentDateUserOrder(o));
                                MOVE PROPERTY(quantityDaysNextShipmentUserOrder(o));
                            }
                            NEW headerDate {
                                caption = 'Закрытие';
                                type = CONTAINERV;
                                MOVE PROPERTY(closeDateUserOrder(o));
                            }
                        }
                        NEW headerCreateDetail {
                            caption = 'Основание';
                            type = CONTAINERV;
                        }
                        NEW headerCreateDocuments {
                            caption = 'Производные документы';
                            type = CONTAINERH;
                        }
                    }
                }

                MOVE o.documentSum {
                    columns = 1;
                }
            }
            NEW specification.box {
                fill = 1;
                type = TABBED;
                MOVE d.box {
                    caption = 'Спецификация';
                }
            }

            MOVE functions.box;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }                        
            PROPERTY(sumUserOrderDetailUserOrder(o)) { preferredCharWidth = 13;}
            PROPERTY(VATSumUserOrderDetailUserOrder(o)) { preferredCharWidth = 13;}
            PROPERTY(invoiceSumUserOrderDetailUserOrder(o)) { preferredCharWidth = 13;}
            
            
        }
    }

    @defineDocumentSkuStockPriceListTypeAgreement(userOrder, stockProp);
    @extendFormDocumentSkuStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp);

    overChangeQuantityValueSkuUserOrderDetail (d) +=  ACTION (d) {
        shipmentDataDateUserOrderDetail (d) <- shipmentDateUserOrder(userOrderUserOrderDetail(d));
        shipmentDataTimeUserOrderDetail (d) <- shipmentTimeUserOrder(userOrderUserOrderDetail(d));
    }

    addUserOrder 'Добавить' = ACTION ADDFORM UserOrder;
    editUserOrder 'Редактировать' (userOrder) = ACTION EDITFORM UserOrder;
    editOrder(order) += ACTION editUserOrder(order);
    
    isUserOpenedOrder(o)=  isOpenedOrder(o) AND isUserOrder(o);

    overCopyOrderDetail = ABSTRACT ACTION LIST (UserOrderDetail, OrderDetail);
    overCopyOrder = ABSTRACT ACTION LIST (Order, UserOrder);
    copyOrder 'Копировать' = ACTION (order) NEWSESSION {
        FOR ADDOBJ o = UserOrder DO {
            ASSIGN supplierUserOrder(o) <- supplierOrder(order);
            ASSIGN supplierStockUserOrder(o) <- supplierStockOrder(order);
            ASSIGN customerUserOrder(o) <- customerOrder(order);
            ASSIGN customerStockUserOrder(o) <- customerStockOrder(order);
            ASSIGN currencyUserOrder(o) <- currencyOrder(order);
            ASSIGN agreementUserOrder(o) <- agreementOrder(order);
            ASSIGN priceListTypeUserOrder(o) <- priceListTypeOrder(order);
            ASSIGN noteUserOrder(o) <- noteOrder(order);

            EXEC overCopyOrder(order, o);

            FOR orderOrderDetail(orderDetail) == order DO {
                FOR ADDOBJ d=UserOrderDetail DO {
                    ASSIGN userOrderUserOrderDetail(d) <- o;
                    ASSIGN skuUserOrderDetail(d) <- skuOrderDetail(orderDetail);
                    ASSIGN quantityUserOrderDetail(d) <- quantityOrderDetail(orderDetail);
                    ASSIGN data###stockProp###stock###userOrderDetail(d) <- data###stockProp###stock###orderDetail(orderDetail);
                    
                    EXEC overCopyOrderDetail(d, orderDetail);
                }
            }

            FORM userOrder OBJECTS o = o MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;
    
//-- Копирование строк     
    overCopyUserOrderDetail = ABSTRACT ACTION LIST (UserOrderDetail, UserOrderDetail);

    copyOrderDetail 'Копировать' = ACTION (detail) {
        FOR ADDOBJ d = UserOrderDetail DO {          

            userOrderUserOrderDetail(d) <- userOrderUserOrderDetail(detail);
            skuUserOrderDetail(d) <- skuUserOrderDetail(detail);
            quantityUserOrderDetail(d) <- quantityUserOrderDetail(detail);
            priceUserOrderDetail(d) <- priceUserOrderDetail(detail);
            data###stockProp###stock###userOrderDetail(d) <- data###stockProp###stock###userOrderDetail(detail);
            priceListType###userOrderDetail(d) <- priceListType###userOrderDetail(detail);      
            shipmentDataDate###userOrderDetail(d) <- shipmentDataDate###userOrderDetail(detail);         
            shipmentDataTime###userOrderDetail(d) <- shipmentDataTime###userOrderDetail(detail);        
            closeDataDate###userOrderDetail(d) <- closeDataDate###userOrderDetail(detail);  
            
            EXEC overCopyUserOrderDetail(d, detail);                              
        }
    } EDITKEY 'F5' TOOLBAR;
    
    EXTEND FORM userOrder PROPERTIES(d) copyOrderDetail FORCE PANEL;
    DESIGN userOrder { PROPERTY(copyOrderDetail(d)) { focusable = FALSE; } }
    
    filterOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFromOrder (o) = dateOrder(o) >= filterOrderDateFrom() OR (o IS Order AND NOT filterOrderDateFrom());      
    
    filterOrderDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateToOrder (o) = dateOrder(o) <= filterOrderDateTo() OR (o IS Order AND NOT filterOrderDateTo());      
    
    filterOrderCustomer  = DATA LOCAL LegalEntity ();
    nameFilterOrderCustomer 'Покупатель' = nameLegalEntity(filterOrderCustomer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerOrder (o) = customerOrder(o) == filterOrderCustomer() OR (o IS Order AND NOT filterOrderCustomer());    

    filterOrderCustomerStock  = DATA LOCAL Stock ();
    nameFilterOrderCustomerStock 'Склад покупателя' = nameStock(filterOrderCustomerStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomerStockOrder (o) = customerStockOrder(o) == filterOrderCustomerStock() OR (o IS Order AND NOT filterOrderCustomerStock());  

    filterOrderSupplier = DATA LOCAL LegalEntity ();
    nameFilterOrderSupplier 'Поставщик' = nameLegalEntity(filterOrderSupplier()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierOrder (o) = supplierOrder(o) == filterOrderSupplier() OR (o IS Order AND NOT filterOrderSupplier());      

    filterOrderSupplierStock  = DATA LOCAL Stock ();
    nameFilterOrderSupplierStock 'Склад поставщика' = nameStock(filterOrderSupplierStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterSupplierStockOrder (o) = supplierStockOrder(o) == filterOrderSupplierStock() OR (o IS Order AND NOT filterOrderSupplierStock()); 
           
    filterOrderCustomUser  = DATA LOCAL CustomUser ();
    nameFilterOrderCustomUser 'Создан пользователем' = nameContact(filterOrderCustomUser()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterCustomUserOrder (i) = createdUserUserOrder(i) == filterOrderCustomUser() OR (i IS Order AND NOT filterOrderCustomUser());  

    filterOrderComputer = DATA LOCAL Computer ();
    nameFilterOrderComputer 'Создан на компьютере' = hostnameComputer(filterOrderComputer()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
    filterComputerOrder (i) = createdComputerUserOrder(i) == filterOrderComputer() OR (i IS Order AND NOT filterOrderComputer());
    
    overShowEditOrder = ABSTRACT BOOLEAN (Order);
    overShowDeleteOrder = ABSTRACT BOOLEAN (Order);          
    backgroundDraftOrder 'Цвет' (o) = RGB(212,255,212) IF isDraftOrder(o);      
    overBackgroundDraftOrder(o) = OVERRIDE backgroundDraftOrder(o), backgroundSkuOrder(o);
    
    FORM orders 'Заказы' 
    
        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderSupplier, nameFilterOrderSupplierStock, 
                     nameFilterOrderCustomer, nameFilterOrderCustomerStock, nameFilterOrderCustomUser, nameFilterOrderComputer
        FILTERS is###supplierFilter###legalEntity(filterOrderSupplier())    
            
        OBJECTS o = Order LAST
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSkuOrder(o) isClosedOrder
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND overBackgroundDraftOrder(o) isPostedOrder, numberOrder, seriesOrder, dateOrder, timeOrder
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSkuOrder(o) nameSupplierOrder, nameSupplierStockOrder, nameCustomerOrder, nameCustomerStockOrder, nameCurrencyOrder,
                                nameAgreementOrder
        PROPERTIES (o) READONLY BACKGROUND backgroundSkuOrder(o) countOrderDetailOrder, quantityOrderDetailOrder, sumOrderDetailOrder,
                                VATSumOrderDetailOrder, invoiceSumOrderDetailOrder
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSkuOrder(o) shipmentDateOrder, shipmentTimeOrder, closeDateOrder, noteOrder

        PROPERTIES (o) READONLY FORCE PANEL createdNameUserUserOrder, createdTimeUserOrder, createdHostnameComputerUserOrder, 
                                            postedNameUserUserOrder, postedTimeUserOrder, postedHostnameComputerUserOrder

        PROPERTIES ()  addUserOrder TODRAW o
        PROPERTIES (o) editOrder SHOWIF overShowEditOrder(o),//isOpenedOrder(o), 
                       copyOrder
        PROPERTIES (o) closeUserOrder SHOWIF isOpenedUserOrder(o), openUserOrder SHOWIF isClosedUserOrder(o)
        PROPERTIES     deleteo=DELETE(o) FORCE PANEL TOOLBAR  SHOWIF overShowDeleteOrder(o) //isUserOpenedOrder(o)

        OBJECTS d=OrderDetail
        PROPERTIES (d) READONLY indexOrderDetail, idBarcodeSkuOrderDetail, idSkuOrderDetail, nameSkuOrderDetail, shortNameUOMSkuOrderDetail
        PROPERTIES (d) READONLY quantityOrderDetail BACKGROUND backgroundParamOrderDetail(d), namePriceListTypeOrderDetail, 
                       priceOrderDetail BACKGROUND backgroundParamOrderDetail(d), sumOrderDetail,
                       numberVATOrderDetail, valueVATOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                       name###stockProp###stock###orderDetail, shipmentDateOrderDetail, shipmentTimeOrderDetail
        ORDER BY indexOrderDetail(d)

        FILTERS orderOrderDetail(d) == o
        FILTERS filterDateFromOrder(o), 
                filterDateToOrder(o),
                filterSupplierOrder(o),
                filterSupplierStockOrder(o),
                filterCustomerOrder(o),
                filterCustomerStockOrder(o),
                filterCustomUserOrder(o),
                filterComputerOrder(o)                            
        
        DIALOG Order OBJECT o
    ;

    DESIGN orders 'Заказы'###sign {
        PROPERTY (deleteo) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {  
                    caption = 'Фильтры';
                    type = CONTAINERV; 
                    NEW topFilters1 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(filterOrderDateFrom());
                        MOVE PROPERTY(filterOrderDateTo());                            
                        MOVE PROPERTY(nameFilterOrderSupplier());
                        MOVE PROPERTY(nameFilterOrderSupplierStock());     
                        MOVE PROPERTY(nameFilterOrderCustomer());
                        MOVE PROPERTY(nameFilterOrderCustomerStock());                                               
                    }
                    NEW topFilters2 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(nameFilterOrderCustomUser());
                        MOVE PROPERTY(nameFilterOrderComputer());                            
                    }                
                }
                MOVE o.box {
                    fill = 1;
                }
            }
//            ADD o.box {
//                fill = 2;
//            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE d.box {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE o.created;
                    MOVE o.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

                        MOVE PROPERTY(copyOrder(o)) { caption = 'Заказ'###sign;}
                    }
                }
            }
        }
    }
    @extendFormEditable(orders);
    @defineFilterIsOpened (order, orders, o); 
    @defineDocumentLogForm(orders, o);
    editOrderDetail 'Редактировать' = ABSTRACT ACTION LIST  (OrderDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    editUserOrderDetail(d) = ACTION (d) NEWSESSION {
        FORM userOrder OBJECTS o = userOrderUserOrderDetail(d), d = d MANAGESESSION DOCKEDMODAL;
    }
    editOrderDetail(d) += ACTION editUserOrderDetail(d);    
END

META implementOrderDestination(fromProp, toProp)
    Order.fromOrder(order) += fromProp##Order(order);
    Order.toOrder(order) += toProp##Order(order);
    Order.fromStockOrder(order) += fromProp##StockOrder(order);
    Order.toStockOrder(order) += toProp##StockOrder(order);
    Order.dataFromStockOrderDetail(detail) += data###fromProp##StockOrderDetail(detail);
    Order.dataToStockOrderDetail(detail) += data###toProp##StockOrderDetail(detail);
END

// Партии приход
META defineOrderBatch(legalEntityProp, stockProp, priceProp)
    @defineDocumentInterfaceDetailBatch(order, batch);
    Order.batchOrderDetail(d) += batchOrderDetail(d);
    
    overCopyUserOrderDetail(d, detail) += ACTION (d, detail) {      
        batchUserOrderDetail(d) <- batchUserOrderDetail(detail);
    } 
    overCopyOrderDetail(d, detail) += ACTION (d, detail) {      
        batchUserOrderDetail(d) <- batchOrderDetail(detail);
    } 
    replaceSkuBatch(s, b) += ACTION (s, b){ skuUserOrderDetail(detail) <- s WHERE batchUserOrderDetail(detail) == b;}
    // Пишем в цену заказа из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userOrder, priceProp###stock, userOrder);

    // История по правой кнопке
    @defineBalancesBatch(orderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор
    @defineDocumentBatchStockPriceListTypeAgreement(userOrder, priceProp);
    @extendFormDocumentBatchStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, priceProp);
    @implementDocumentBatch(order);
//    overFillDocumentOrderDetailDocumentDetail(o, d) += ACTION (o, d) { batchUserOrderDetail(o) <- batchDocumentDetail(d);}                    
END

META defineOrderBatch(legalEntityProp, stockProp)
    @defineOrderBatch(legalEntityProp, stockProp, stockProp);
END

META defineOrderBatchDialog(dumb)
    changeBatchUserOrderDetail = ACTION (userOrderDetail) {
        FORM dialogBatch OBJECTS sk = skuUserOrderDetail(userOrderDetail) DIALOG SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- NULL;
        }
    }

    EXTEND FORM userOrder
        PROPERTIES (d) nameBatchUserOrderDetail ON CHANGE changeBatchUserOrderDetail(d) AFTER shortNameUOMSkuUserOrderDetail(d)  BACKGROUND backgroundSkuUserOrderDetail(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY nameBatchOrderDetail AFTER shortNameUOMSkuOrderDetail(d);
END

META defineOrderBatchDialogStock(stockProp)
    changeBatchUserOrderDetail = ACTION (userOrderDetail) {
        FORM dialogBatchStock OBJECTS st = stockProp###userOrderDetail(userOrderDetail),
                                      t = dateTimeUserOrderDetail(userOrderDetail),
                                      sk = skuUserOrderDetail(userOrderDetail) DIALOG SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            ASSIGN batchUserOrderDetail(userOrderDetail) <- NULL;
        }

    };

    EXTEND FORM userOrder
        PROPERTIES (d) nameBatchUserOrderDetail ON CHANGE changeBatchUserOrderDetail(d) AFTER shortNameUOMSkuUserOrderDetail(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY nameBatchOrderDetail AFTER shortNameUOMSkuOrderDetail(d);
END
