MODULE BlanketOrder;

REQUIRE Order;

//----------------------------------------------- Множественнвй Заказ ---------------------------------------------------//

META defineBlanketOrder(sign, supplierFilter, customerFilter)

    CLASS BlanketOrder 'Множественный заказ'###sign : Historizable, NumeratedDocument;
    CLASS BlanketOrderDetail 'Строка множественного заказа'###sign;

    CLASS BlanketOrderPosted 'Проведенный множественный заказ'###sign : BlanketOrder, PostedObject;
    CLASS BlanketOrderClosed 'Закрытый множественный заказ'###sign : BlanketOrderPosted;

    @defineDocument(blanketOrder);
    @defineDocumentHeaderLegalEntity (blanketOrder, supplier, 'Поставщик');
    @defineDocumentHeaderLegalEntity (blanketOrder, customer, 'Покупатель');
    @defineDocumentDetailLegalEntity (blanketOrder, blanketOrderDetail, supplier, 'Поставщик');
    @defineDocumentDetailLegalEntity (blanketOrder, blanketOrderDetail, customer, 'Покупатель');

    @defineDocumentHeaderStock(blanketOrder, stock, 'Склад поставщика', supplier);
    @defineDocumentDetailDataStock (blanketOrder, stock, supplierStock, 'Склад поставщика');

    CONSTRAINT supplierBlanketOrder(blanketOrder) AND supplierStockBlanketOrder(blanketOrder) AND NOT
    inLegalEntityStock(supplierBlanketOrder(blanketOrder), supplierStockBlanketOrder(blanketOrder))
        CHECKED BY supplierBlanketOrder, supplierStockBlanketOrder
            MESSAGE 'Поставщик и склад поставщика для множественного заказа не имеют связи';

    @defineDocumentPosted(blanketOrder);
    @defineDocumentClosed (blanketOrder);

    @defineDocumentDataTimePrefix (blanketOrder, shipment, ' поставки');

    @defineDocumentDescription(blanketOrder, 'Множественный заказ'###sign);

    @defineDocumentCurrency (blanketOrder);
    @deriveDocumentCurrency(blanketOrder, supplierStock);

    TABLE blanketOrderStock(BlanketOrder, Stock);

    customerStockBlanketOrderDetail (blanketOrderDetail) = DATA Stock (BlanketOrderDetail);
    nameCustomerStockBlanketOrderDetail 'Склад покупателя' (blanketOrderDetail) = nameStock(customerStockBlanketOrderDetail(blanketOrderDetail));

    @defineDocumentDetailSku(blanketOrder, sku);
    @defineDocumentDetailQuantity(blanketOrder);

    @defineDocumentHeaderQuantityContractor(blanketOrder, customerStock);
    @defineDocumentHeaderQuantity(blanketOrder);

    @defineDocumentHeaderSkuQuantityContractor (blanketOrder, sku, customerStock);
    @defineDocumentHeaderSkuQuantity(blanketOrder, sku);

    countBlanketOrderDetailStockBlanketOrder 'Кол-во строк по складу '(stock, blanketOrder) = GROUP SUM 1 BY supplierStockBlanketOrderDetail(blanketOrderDetail), blanketOrderBlanketOrderDetail(blanketOrderDetail);
    inBlanketOrderStock 'В заказе' (blanketOrder, stock) = DATA BOOLEAN (BlanketOrder, Stock); //customerStock
    inCustomerBlanketOrderStock 'Отм.' (blanketOrder, stock) = inLegalEntityStock(customerBlanketOrder(blanketOrder), stock);

    @defineDocumentHeaderAgreement (blanketOrder);
    @deriveDocumentHeaderAgreement (blanketOrder, supplierBlanketOrder, customerBlanketOrder);

    @defineDocumentInterfaceHeaderAgreement (BlanketOrder, Stock, supplier, customer);

    priceListTypeBlanketOrderStock (blanketOrder, stock) = DATA PriceListType (BlanketOrder, Stock);
    namePriceListTypeBlanketOrderStock 'Вид цены' (blanketOrder, stock) = namePriceListType(priceListTypeBlanketOrderStock (blanketOrder, stock)) IN documentPrmGroup MINCHARWIDTH 5 PREFCHARWIDTH 10;
    backgroundPriceListTypeBlanketOrderStock (blanketOrder, stock) = RGB(200,200,200) IF agreementBlanketOrderStock (blanketOrder, stock);

    @defineDocumentDetailPrice(blanketOrder); // объявляем цену без НДС

    @defineDocumentDetailVAT(blanketOrder, countrySupplierStock); // объявляем шкалу
    @deriveDocumentDetailVAT(blanketOrder, , date,  sku, supplierStock); // записываем ставку
    @deriveDocumentDetailValueVAT(blanketOrder, ); // записываем значение ставки

    @defineDocumentDetailPriceCustomPrefix (blanketOrderDetail, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(blanketOrder);
    @defineDocumentDetailNumberVATOnChange(blanketOrder, supplierStock);
    @defineDocumentDetailValueVATOnChange(blanketOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(blanketOrder);

    //  объявляем виды цен
    @defineDocumentDetailPriceListType(blanketOrder, blanketOrderDetail);

    priceListTypeBlanketOrderStockSku (blanketOrder, stock, sku) =
        IF agreementBlanketOrderStock(blanketOrder, stock) THEN
            priceListTypeAgreementSku(agreementBlanketOrderStock(blanketOrder, stock), sku)
        ELSE
            priceListTypeBlanketOrderStock(blanketOrder, stock) IF sku IS Sku;
    // записываем вид цены из соглашения
     priceListTypeBlanketOrderDetail (detail) <- IF agreementBlanketOrderStock (blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))
        THEN priceListTypeAgreementSku(agreementBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail)), skuBlanketOrderDetail(detail))
        ELSE priceListTypeBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))
     WHEN CHANGED(agreementBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))) OR
          CHANGED(priceListTypeBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail)));
    @deriveDocumentDetailPricePriceListTypeVAT (blanketOrder, supplierStock); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentDetailDataSum (blanketOrder); // объявляем сумму без НДС
    @deriveDocumentDetailSum(blanketOrder, quantity);

    @defineDocumentDetailVATDataSum (blanketOrder, invoice); // объявляем суммы НДС и с НДС
    @deriveDocumentDetailVATDataSum(blanketOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (blanketOrder, invoice); // записываем сумму с НДС

    @defineDocumentHeaderVATSum (blanketOrder, blanketOrderDetail, invoice);

    @defineDocumentHeaderSumContractor (blanketOrder, customerStock);
    @defineDocumentHeaderSum (blanketOrder);

    countBlanketOrderDetailBlanketOrderCustomerStock 'Количество строк в документе' (order, stock) =
        GROUP SUM 1 BY blanketOrderBlanketOrderDetail(d), customerStockBlanketOrderDetail(d) PERSISTENT IN documentSumGroup;

    CONSTRAINT customerStockBlanketOrderDetail(blanketOrderDetail) AND NOT inBlanketOrderStock(blanketOrderBlanketOrderDetail(blanketOrderDetail), customerStockBlanketOrderDetail(blanketOrderDetail))
        CHECKED BY customerStockBlanketOrderDetail
            MESSAGE 'Для строки множественного заказа выбран склад не включенный в заказ';

    customerStocksBlanketOrder 'Контрагенты' (blanketOrder) =
        GROUP CONCAT nameStock(stock) IF inBlanketOrderStock(blanketOrder, stock), ', '
        BY blanketOrder
        ORDER stock MINCHARWIDTH 20 MAXCHARWIDTH 60 PREFCHARWIDTH 40 PERSISTENT;

    @defineNumeratedObject (blanketOrder, stock);

    @defineMovementSku(blanketOrderDetail, supplierStock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(blanketOrderDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineDocumentDialogStock(blanketOrder, supplierFilter, supplier, );
    @defineDocumentDialogStock(blanketOrderDetail, supplierFilter, supplier, data);
    @defineDocumentDialogStock(blanketOrderDetail, customerFilter, customer, );
    @defineDocumentDialogSupplierCustomerLegalEntity(blanketOrder, supplierFilter, customerFilter);
// --------------------------- Формы Заказа ---------------------------------

    FORM blanketOrder 'Множественный заказ'###sign
        OBJECTS o = BlanketOrder FIXED PANEL
        PROPERTIES (o) objectClassName, nameSupplierBlanketOrder ON CHANGE changeSupplier###supplierFilter###blanketOrder(o),
                       nameSupplierStockBlanketOrder ON CHANGE changeSupplierStock###supplierFilter###blanketOrder(o),
                       nameNumeratorObject, numberObject, seriesObject, dateBlanketOrder, timeBlanketOrder,
                       nameCurrencyBlanketOrder, noteBlanketOrder,
                       nameCustomerBlanketOrder ON CHANGE changeCustomer###customerFilter###blanketOrder(o), nameAgreementBlanketOrder,
                       countBlanketOrderDetailBlanketOrder, quantityBlanketOrderDetailBlanketOrder, sumBlanketOrderDetailBlanketOrder,
                       VATSumBlanketOrderDetailBlanketOrder, invoiceSumBlanketOrderDetailBlanketOrder, shipmentDateBlanketOrder, shipmentTimeBlanketOrder

        OBJECTS d = BlanketOrderDetail
        PROPERTIES (d) indexBlanketOrderDetail, idBarcodeSkuBlanketOrderDetail, nameSkuBlanketOrderDetail, shortNameUOMSkuBlanketOrderDetail,
                       quantityBlanketOrderDetail, namePriceListTypeBlanketOrderDetail,

                       priceBlanketOrderDetail ON CHANGE changePriceBlanketOrderDetail(d), sumBlanketOrderDetail,
                       numberVATBlanketOrderDetail ON CHANGE changeNumberVATBlanketOrderDetail(d),
                       valueVATBlanketOrderDetail ON CHANGE changeValueVATBlanketOrderDetail(d),
                       invoicePriceBlanketOrderDetail ON CHANGE changeInvoicePriceBlanketOrderDetail(d),
                       VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail,
                       nameSupplierStockBlanketOrderDetail ON CHANGE changeDataSupplierStock###supplierFilter###blanketOrderDetail(d),
                       nameCustomerStockBlanketOrderDetail ON CHANGE changeCustomerStock###customerFilter###blanketOrderDetail(d),
                       shipmentDateBlanketOrderDetail, shipmentTimeBlanketOrderDetail, ADDOBJ, DELETESESSION

        OBJECTS c = Stock
        PROPERTIES     nameStock(c) READONLY, inBlanketOrderStock(o,c)
        PROPERTIES(o,c) nameNumeratorBlanketOrderStock, numberBlanketOrderStock, seriesBlanketOrderStock,
                        nameAgreementBlanketOrderStock, namePriceListTypeBlanketOrderStock BACKGROUND backgroundPriceListTypeBlanketOrderStock(o, c)
        PROPERTIES(o,c) READONLY countBlanketOrderDetailBlanketOrderCustomerStock, quantityBlanketOrderDetailBlanketOrderCustomerStock, sumBlanketOrderDetailBlanketOrderCustomerStock

        PROPERTIES(o) TODRAW d deleteBlanketOrderDetailBlanketOrder

        FILTERS blanketOrderBlanketOrderDetail(d) == o,
                inCustomerBlanketOrderStock(o,c)

        EVENTS
            ON OK prePostBlanketOrder(o)

        EDIT BlanketOrder OBJECT o
    ;

    DESIGN blanketOrder FROM DEFAULT{

        main {
            preferredSize = (1024, 768);
            NEW specification.box BEFORE functions.box{
                type = TABBED;
                ADD c.box {caption = 'Контрагент';}
                ADD d.box {caption = 'Спецификация';}

            }

            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD o.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateBlanketOrder);
                        ADD PROPERTY(timeBlanketOrder);
                    }
                    NEW headerRow11 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerRow111 {
                            caption = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierBlanketOrder);
                            ADD PROPERTY(nameSupplierStockBlanketOrder);
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerBlanketOrder);
                        }
                    }
                    NEW headerRow12 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD o.documentPrmGroup {
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW documentShipmentGroup {
                            caption = 'Исполнение';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(shipmentDateBlanketOrder);
                            ADD PROPERTY(shipmentTimeBlanketOrder);
                        }
                    }
                }
                ADD o.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }


            PROPERTY(formOk) {
                caption = 'Провести';
            }
        }
    }

    editBlanketOrder 'Редактировать' = ACTION EDITFORM BlanketOrder;

//-- SKU
    @defineDocumentSkuStockContractor(blanketOrder, sku, supplierStock, customerStock);
    @extendFormDocumentSkuStockContractorCustom(blanketOrder, blanketOrder, o, supplier, supplierStock, customerStock);
    @defineDocumentSkuStockSupplier (blanketOrder, blanketOrder, o, sts.box);

    FORM blanketOrders 'Множественные заказы' TITLE 'Множественные заказы'###sign
        OBJECTS o = BlanketOrder
        PROPERTIES (o) READONLY isPostedBlanketOrder FORCE GRID
        PROPERTIES (o) READONLYIF isReadonly() numberObject, seriesObject, dateBlanketOrder, timeBlanketOrder,
                                nameSupplierBlanketOrder, nameSupplierStockBlanketOrder, nameCustomerBlanketOrder, nameCurrencyBlanketOrder
        PROPERTIES (o) READONLY countBlanketOrderDetailBlanketOrder, quantityBlanketOrderDetailBlanketOrder, sumBlanketOrderDetailBlanketOrder,
                                VATSumBlanketOrderDetailBlanketOrder, invoiceSumBlanketOrderDetailBlanketOrder
        PROPERTIES (o) READONLYIF isReadonly() shipmentDateBlanketOrder, shipmentTimeBlanketOrder, customerStocksBlanketOrder,
                                noteBlanketOrder, objectClassName

        PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES (o) ADDFORM, EDITFORM, deleteo=DELETE FORCE PANEL TOOLBAR
        PROPERTIES (o) closeBlanketOrder SHOWIF isOpenedBlanketOrder(o)


        OBJECTS d=BlanketOrderDetail
        PROPERTIES (d) READONLY indexBlanketOrderDetail, idBarcodeSkuBlanketOrderDetail, nameSkuBlanketOrderDetail, shortNameUOMSkuBlanketOrderDetail,
                       quantityBlanketOrderDetail, namePriceListTypeBlanketOrderDetail,
                       priceBlanketOrderDetail, sumBlanketOrderDetail,
                       numberVATBlanketOrderDetail, valueVATBlanketOrderDetail, VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail,
                       nameSupplierStockBlanketOrderDetail, nameCustomerStockBlanketOrderDetail,
                       shipmentDateBlanketOrderDetail, shipmentTimeBlanketOrderDetail


        FILTERS blanketOrderBlanketOrderDetail(d) == o
        DIALOG BlanketOrder OBJECT o
    ;

    DESIGN blanketOrders FROM DEFAULT {
        PROPERTY(objectClassName) {
            preferredCharWidth = 10;
        }
        PROPERTY (deleteo) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD o.box { fillVertical = 2.0; }

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    ADD o.historyGroup;
                    ADD o.postedGroup;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        childConstraints = TO THE BOTTOM;
                    }
                }
            }
        }
    }
    @extendFormEditable(blanketOrders);
END

META defineOrderBlanketOrder(sign)

    CLASS BlanketOrderOrder 'Заказ на основе множественного'###sign : Order;
    CLASS BlanketOrderOrderDetail 'Строка заказа на основе множественного'###sign : OrderDetail;

    CLASS BlanketOrderOrderPosted 'Проведенный заказ на основе множественного'###sign : BlanketOrderOrder, PostedObject;

    @defineDocumentTables(blanketOrderOrder);

    needToOrderBlanketOrderDetailStock (blanketOrderDetail, stock) = quantityBlanketOrderDetail(blanketOrderDetail)
        AND isPostedBlanketOrderDetail(blanketOrderDetail) AND customerStockBlanketOrderDetail(blanketOrderDetail) == stock;

    needToOrderBlanketOrderStock (blanketOrder, stock) = quantityBlanketOrderDetailBlanketOrderCustomerStock(blanketOrder, stock)
        AND isPostedBlanketOrder(blanketOrder);

//-- object
    @defineAggregation(blanketOrder, stock, blanketOrderOrder, needToOrderBlanketOrderStock);

    supplierOrder(order) += supplierBlanketOrder(blanketOrderBlanketOrderOrder(order));
    customerOrder(order) += customerBlanketOrder(blanketOrderBlanketOrderOrder(order));

    @defineDocumentAggregationHeaderStock (blanketOrder, blanketOrderOrder, supplierStock, 'Склад поставщика');
    supplierStockOrder(order) += supplierStockBlanketOrderOrder(order);

    customerStockOrder(order) += stockBlanketOrderOrder(order);

    shipmentDateOrder(order) += shipmentDateBlanketOrder(blanketOrderBlanketOrderOrder(order));
    shipmentTimeOrder(order) += shipmentTimeBlanketOrder(blanketOrderBlanketOrderOrder(order));

    currencyOrder(order) += currencyBlanketOrder(blanketOrderBlanketOrderOrder(order));
    priceListTypeOrder(order) += priceListTypeBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));

    @defineDocumentAggregationHeaderNote (blanketOrder, blanketOrderOrder);
    noteOrder(order) += noteBlanketOrderOrder(order);

    seriesOrder(order) += seriesBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));
    numberOrder(order) += numberBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));
    seriesNumberBlanketOrderOrder 'Серия/Номер' (blanketOrderOrder) = CONCAT '',
        seriesBlanketOrderStock(blanketOrderBlanketOrderOrder(blanketOrderOrder), stockBlanketOrderOrder(blanketOrderOrder)),
        numberBlanketOrderStock(blanketOrderBlanketOrderOrder(blanketOrderOrder), stockBlanketOrderOrder(blanketOrderOrder));

//-- detail
    @defineAggregation(blanketOrderDetail, stock, blanketOrderOrderDetail, needToOrderBlanketOrderDetailStock);

    blanketOrderOrderBlanketOrderOrderDetail (blanketOrderOrderDetail) =
        blanketOrderOrderBlanketOrderStock(blanketOrderBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(blanketOrderOrderDetail)),
                                           customerStockBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(blanketOrderOrderDetail)));
    orderOrderDetail(detail) += blanketOrderOrderBlanketOrderOrderDetail(detail);

    dataSupplierStockOrderDetail(detail) += dataSupplierStockBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    @defineDocumentHeaderCount(blanketOrderOrder);
    @defineDocumentDetailIndex(blanketOrderOrder);

    @defineDocumentAggregationTime(blanketOrder, blanketOrderOrder);
    dateOrder(order) += dateBlanketOrderOrder(order);
    timeOrder(order) += timeBlanketOrderOrder(order);

    @defineDocumentHeaderDescription(BlanketOrderOrder, seriesNumberBlanketOrderOrder, 'Заказ на основе множественного'###sign);
    descriptionOrder (order) += descriptionBlanketOrderOrder(order);

    @defineDocumentAggregationPosted(blanketOrder, blanketOrderOrder);
    isPostedOrder(order) += isPostedBlanketOrderOrder(order);

    @defineDocumentAggregationDetailSku (blanketOrder, blanketOrderOrder, sku);
    skuOrderDetail(detail) +=  skuBlanketOrderOrderDetail(detail);

    @defineDocumentAggregationDetailQuantity (blanketOrder, blanketOrderOrder);
    quantityOrderDetail(detail) +=  quantityBlanketOrderOrderDetail(detail);

    shipmentDataDateOrderDetail(detail) += shipmentDataDateBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    shipmentDataTimeOrderDetail(detail) += shipmentDataTimeBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    priceListTypeOrderDetail(detail) += priceListTypeBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    priceOrderDetail(detail) += priceBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    sumOrderDetail(detail) += sumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    VATOrderDetail(detail) += VATBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    valueVATOrderDetail(detail) += valueVATBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    invoicePriceOrderDetail(detail) += invoicePriceBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    invoiceSumOrderDetail(detail) += invoiceSumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    VATSumOrderDetail(detail) += VATSumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    editOrder(order) += ACTION EXEC editBlanketOrder(blanketOrderBlanketOrderOrder(order));

END

