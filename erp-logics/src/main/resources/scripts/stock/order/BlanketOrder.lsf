MODULE BlanketOrder;

REQUIRE Order;

//----------------------------------------------- Множественнвй Заказ ---------------------------------------------------//

META defineBlanketOrder(sign, supplierFilter, customerFilter)

    CLASS BlanketOrder 'Множественный заказ'###sign;
    CLASS BlanketOrderDetail 'Строка множественного заказа'###sign;

    CLASS BlanketOrderClosed 'Закрытый множественный заказ'###sign : BlanketOrder;

    @defineDocument(blanketOrder);
    @deriveDocumentHeaderTimePrefix(BlanketOrder, );
    @defineDocumentHeaderLegalEntity (blanketOrder, supplier, 'Поставщик');
    @defineDocumentHeaderLegalEntity (blanketOrder, customer, 'Покупатель');
    @defineDocumentDetailLegalEntity (blanketOrder, blanketOrderDetail, supplier, 'Поставщик');
    @defineDocumentDetailLegalEntity (blanketOrder, blanketOrderDetail, customer, 'Покупатель');

    @defineDocumentHeaderStock(blanketOrder, stock, 'Склад поставщика', supplier);
    @defineDocumentDetailDataStock (blanketOrder, stock, supplierStock, 'Склад поставщика');

    CONSTRAINT supplierBlanketOrder(blanketOrder) AND supplierStockBlanketOrder(blanketOrder) AND NOT
    inLegalEntityStock(supplierBlanketOrder(blanketOrder), supplierStockBlanketOrder(blanketOrder))
        CHECKED BY supplierBlanketOrder, supplierStockBlanketOrder
            MESSAGE 'Поставщик и склад поставщика для множественного заказа не имеют связи';

    @defineDocumentPosted(blanketOrder);
    @defineDocumentClosed (blanketOrder);

    @defineDocumentDataTimePrefix (blanketOrder, shipment, ' поставки');

    @defineDocumentHeaderNumber(BlanketOrder);
    
    @defineNumeratedDefault(BlanketOrder, 'Множественные заказы'###sign, 'ЗМ');
    @defineDocumentDescription(blanketOrder, 'Множественный заказ'###sign);

    @defineDocumentCurrency (blanketOrder);
    @deriveDocumentCurrency(blanketOrder, supplierStock);

    TABLE blanketOrderStock(BlanketOrder, Stock);

    customerStockBlanketOrderDetail (blanketOrderDetail) = DATA Stock (BlanketOrderDetail);
    nameCustomerStockBlanketOrderDetail 'Склад покупателя' (blanketOrderDetail) = nameStock(customerStockBlanketOrderDetail(blanketOrderDetail));

    closeDateBlanketOrder 'Дата автоматического закрытия' = DATA DATE (BlanketOrder) IN documentPrm;
    closeDataDateBlanketOrderDetail 'Дата автоматического закрытия' = DATA DATE (BlanketOrderDetail) IN documentPrm;

    closeDateBlanketOrderDetail 'Дата автоматического закрытия' (detail) = OVERRIDE closeDateBlanketOrder(blanketOrderBlanketOrderDetail(detail)), closeDataDateBlanketOrderDetail(detail) PERSISTENT;

    closeDataDateBlanketOrderDetail(detail) <- sumDate(shipmentDateBlanketOrderDetail(detail), quantityDaysCloseOrdersStock(customerStockBlanketOrderDetail(detail)))
        WHEN CHANGED(shipmentDateBlanketOrderDetail(detail)) OR CHANGED(customerStockBlanketOrderDetail(detail));    

    defaultClosedBlanketOrderDetail(detail) = closeDateBlanketOrderDetail(detail) < currentDate() ;

    @defineDocumentDetailSku(blanketOrder, sku);
    @defineDocumentDetailQuantity(blanketOrder);

    quantityBlanketOrderDetailBlanketOrderCustomerStock 'Кол-во (всего)' (blanketOrder, customerStock) = 
        GROUP SUM quantityBlanketOrderDetail(idetail) 
              BY blanketOrderBlanketOrderDetail(idetail), customerStockBlanketOrderDetail(idetail) 
              IN documentSum;
              
    @defineDocumentHeaderQuantity(blanketOrder);

    quantityBlanketOrderDetailSkuBlanketOrderCustomerStock 'Кол-во товара в документе' (sku, blanketOrder, customerStock) = 
        GROUP SUM quantityBlanketOrderDetail(idetail)
              BY  skuBlanketOrderDetail(idetail),
                  blanketOrderBlanketOrderDetail(idetail),
                  customerStockBlanketOrderDetail(idetail);

    @defineDocumentHeaderSkuQuantity(blanketOrder, sku);

    countBlanketOrderDetailStockBlanketOrder 'Кол-во строк по складу '(stock, blanketOrder) = GROUP SUM 1 BY supplierStockBlanketOrderDetail(blanketOrderDetail), blanketOrderBlanketOrderDetail(blanketOrderDetail);
    inBlanketOrderStock 'В заказе' (blanketOrder, stock) = DATA BOOLEAN (BlanketOrder, Stock); //customerStock
    inCustomerBlanketOrderStock 'Отм.' (blanketOrder, stock) = inLegalEntityStock(customerBlanketOrder(blanketOrder), stock);

    @defineDocumentHeaderAgreement (blanketOrder);
    @deriveDocumentHeaderAgreement (blanketOrder, supplierBlanketOrder, customerBlanketOrder);

    @defineDocumentInterfaceHeaderAgreement (BlanketOrder, Stock, supplier, customer);

    priceListTypeBlanketOrderStock (blanketOrder, stock) = DATA PriceListType (BlanketOrder, Stock);
    namePriceListTypeBlanketOrderStock 'Вид цены' (blanketOrder, stock) = namePriceListType(priceListTypeBlanketOrderStock (blanketOrder, stock)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
    backgroundPriceListTypeBlanketOrderStock (blanketOrder, stock) = RGB(200,200,200) IF agreementBlanketOrderStock (blanketOrder, stock);

    @defineDocumentDetailPrice(blanketOrder); // объявляем цену без НДС

    @defineDocumentDetailVAT(blanketOrder, countrySupplierStock); // объявляем шкалу
    @deriveDocumentDetailVAT(blanketOrder, , date,  sku, supplierStock); // записываем ставку
    @deriveDocumentDetailValueVAT(blanketOrder, ); // записываем значение ставки

    @defineDocumentDetailPriceCustomPrefix (blanketOrderDetail, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(blanketOrder);
    @defineDocumentDetailNumberVATOnChange(blanketOrder, supplierStock);
    @defineDocumentDetailValueVATOnChange(blanketOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(blanketOrder);

    //  объявляем виды цен
    @defineDocumentDetailPriceListType(blanketOrder, blanketOrderDetail);

    priceListTypeBlanketOrderStockSku (blanketOrder, stock, sku) =
        IF agreementBlanketOrderStock(blanketOrder, stock) THEN
            priceListTypeAgreementSku(agreementBlanketOrderStock(blanketOrder, stock), sku)
        ELSE
            priceListTypeBlanketOrderStock(blanketOrder, stock) IF sku IS Sku;
    // записываем вид цены из соглашения
     priceListTypeBlanketOrderDetail (detail) <- IF agreementBlanketOrderStock (blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))
        THEN priceListTypeAgreementSku(agreementBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail)), skuBlanketOrderDetail(detail))
        ELSE priceListTypeBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))
     WHEN CHANGED(agreementBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail))) OR
          CHANGED(priceListTypeBlanketOrderStock(blanketOrderBlanketOrderDetail(detail), customerStockBlanketOrderDetail(detail)));
//    @deriveDocumentDetailPricePriceListTypeVAT (blanketOrder, supplierStock); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentDetailDataSum (blanketOrder); // объявляем сумму без НДС
    @deriveDocumentDetailSum(blanketOrder, quantity);

    @defineDocumentDetailVATDataSum (blanketOrder, invoice); // объявляем суммы НДС и с НДС
    @deriveDocumentDetailVATDataSum(blanketOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (blanketOrder, invoice); // записываем сумму с НДС

    @defineDocumentHeaderVATSum (blanketOrder, blanketOrderDetail, invoice);

    sumBlanketOrderDetailBlanketOrderCustomerStock 'Сумма' (blanketOrder, customerStock) = 
        GROUP SUM sumBlanketOrderDetail(idetail) 
              BY blanketOrderBlanketOrderDetail(idetail), 
                 customerStockBlanketOrderDetail(idetail)  
              IN documentSum;

    @defineDocumentHeaderSum (blanketOrder);

    countBlanketOrderDetailBlanketOrderCustomerStock 'Количество строк в документе' (order, stock) =
        GROUP SUM 1 BY blanketOrderBlanketOrderDetail(d), customerStockBlanketOrderDetail(d) PERSISTENT IN documentSum;

    CONSTRAINT customerStockBlanketOrderDetail(blanketOrderDetail) AND NOT inBlanketOrderStock(blanketOrderBlanketOrderDetail(blanketOrderDetail), customerStockBlanketOrderDetail(blanketOrderDetail))
        CHECKED BY customerStockBlanketOrderDetail
            MESSAGE 'Для строки множественного заказа выбран склад не включенный в заказ';

    customerStocksBlanketOrder 'Контрагенты' (blanketOrder) =
        GROUP CONCAT nameStock(stock) IF inBlanketOrderStock(blanketOrder, stock), ', '
        BY blanketOrder
        ORDER stock MINCHARWIDTH 20 MAXCHARWIDTH 60 PREFCHARWIDTH 40 PERSISTENT;

    @defineNumerated (blanketOrder, stock);

    @defineMovementSku(blanketOrderDetail, supplierStock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(blanketOrderDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineMovementPriceSku(blanketOrderDetail, supplierStock); //-- показываем по нажатию правой клавиши изменение цены товара

    @defineDocumentDialogStock(blanketOrder, supplierFilter, supplier, );
    @defineDocumentDialogStock(blanketOrderDetail, supplierFilter, supplier, data);
    @defineDocumentDialogStock(blanketOrderDetail, customerFilter, customer, );
    @defineDocumentDialogSupplierCustomerLegalEntity(blanketOrder, supplierFilter, customerFilter);
// --------------------------- Формы Заказа ---------------------------------

    FORM blanketOrder 'Множественный заказ'###sign
        OBJECTS o = BlanketOrder FIXED PANEL
        PROPERTIES (o) isPostedBlanketOrder, nameSupplierBlanketOrder ON CHANGE changeSupplier###supplierFilter###blanketOrder(o),
                       nameSupplierStockBlanketOrder ON CHANGE changeSupplierStock###supplierFilter###blanketOrder(o),
                       nameNumeratorBlanketOrder, numberBlanketOrder, seriesBlanketOrder, dateBlanketOrder, timeBlanketOrder,
                       nameCurrencyBlanketOrder, noteBlanketOrder,
                       nameCustomerBlanketOrder ON CHANGE changeCustomer###customerFilter###blanketOrder(o), nameAgreementBlanketOrder,
                       countBlanketOrderDetailBlanketOrder, quantityBlanketOrderDetailBlanketOrder, sumBlanketOrderDetailBlanketOrder,
                       VATSumBlanketOrderDetailBlanketOrder, invoiceSumBlanketOrderDetailBlanketOrder, shipmentDateBlanketOrder, shipmentTimeBlanketOrder

        OBJECTS d = BlanketOrderDetail
        PROPERTIES (d) indexBlanketOrderDetail, idBarcodeSkuBlanketOrderDetail, nameSkuBlanketOrderDetail, shortNameUOMSkuBlanketOrderDetail,
                       quantityBlanketOrderDetail, namePriceListTypeBlanketOrderDetail,

                       priceBlanketOrderDetail ON CHANGE changePriceBlanketOrderDetail(d), sumBlanketOrderDetail,
                       numberVATBlanketOrderDetail ON CHANGE changeNumberVATBlanketOrderDetail(d),
                       valueVATBlanketOrderDetail ON CHANGE changeValueVATBlanketOrderDetail(d),
                       invoicePriceBlanketOrderDetail ON CHANGE changeInvoicePriceBlanketOrderDetail(d),
                       VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail,
                       nameSupplierStockBlanketOrderDetail ON CHANGE changeDataSupplierStock###supplierFilter###blanketOrderDetail(d),
                       nameCustomerStockBlanketOrderDetail ON CHANGE changeCustomerStock###customerFilter###blanketOrderDetail(d),
                       shipmentDateBlanketOrderDetail, shipmentTimeBlanketOrderDetail, ADDOBJ, DELETESESSION

        OBJECTS c = Stock
        PROPERTIES     nameStock(c) READONLY, inBlanketOrderStock(o,c)
        PROPERTIES(o,c) nameNumeratorBlanketOrderStock, numberBlanketOrderStock, seriesBlanketOrderStock,
                        nameAgreementBlanketOrderStock, namePriceListTypeBlanketOrderStock BACKGROUND backgroundPriceListTypeBlanketOrderStock(o, c)
        PROPERTIES(o,c) READONLY countBlanketOrderDetailBlanketOrderCustomerStock, quantityBlanketOrderDetailBlanketOrderCustomerStock, sumBlanketOrderDetailBlanketOrderCustomerStock

        PROPERTIES(o) TODRAW d deleteBlanketOrderDetailBlanketOrder

        FILTERS blanketOrderBlanketOrderDetail(d) == o,
                inCustomerBlanketOrderStock(o,c)

        EVENTS
            ON OK prePostBlanketOrder(o)

        EDIT BlanketOrder OBJECT o
    ;

    DESIGN blanketOrder FROM DEFAULT{

        main {
            preferredSize = (1024, 768);
            NEW header.box {
                type = CONTAINERH;

                NEW headerRow1 {
                    fill = 1;
                    type = CONTAINERV;

                    ADD o.documentHeader {
                        type = CONTAINERH;
                        ADD PROPERTY(isPostedBlanketOrder) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorBlanketOrder);
                        ADD PROPERTY(numberBlanketOrder);
                        ADD PROPERTY(seriesBlanketOrder);
                        ADD PROPERTY(dateBlanketOrder);
                        ADD PROPERTY(timeBlanketOrder);
                    }
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            type = CONTAINERH;
                            caption = 'Поставщик';
                            ADD PROPERTY(nameSupplierBlanketOrder);
                            ADD PROPERTY(nameSupplierStockBlanketOrder);
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            ADD PROPERTY(nameCustomerBlanketOrder);
                        }
                    }
                    NEW headerRow12 {
                        type = CONTAINERH;
                        ADD o.documentPrm {
                            columns = 2;
                        }
                        NEW documentShipmentGroup {
                            caption = 'Исполнение';
                            type = COLUMNS;
                            columns = 1;
                            ADD PROPERTY(shipmentDateBlanketOrder);
                            ADD PROPERTY(shipmentTimeBlanketOrder);
                        }
                    }
                }
                ADD o.documentSum {
                    columns = 1;
                }
            }

            NEW specification.box {
                fill = 1;
                type = TABBED;
                ADD c.box {caption = 'Контрагент';}
                ADD d.box {caption = 'Спецификация';}
            }

            ADD functions.box;

            PROPERTY(formOk) {
                caption = 'Провести';
            }
            PROPERTY(sumBlanketOrderDetailBlanketOrder) { preferredCharWidth = 13;}
            PROPERTY(VATSumBlanketOrderDetailBlanketOrder) { preferredCharWidth = 13;}  
            PROPERTY(invoiceSumBlanketOrderDetailBlanketOrder) { preferredCharWidth = 13;}            
        }
    }

    editBlanketOrder 'Редактировать' = ACTION EDITFORM BlanketOrder;

//-- SKU
    @defineDocumentSkuStockExtra(blanketOrder, sku, supplierStock, customerStock);
    @extendFormDocumentSkuStockExtraCustom(blanketOrder, blanketOrder, o, supplier, supplierStock, customerStock);
    @defineDocumentSkuStockSupplier (blanketOrder, blanketOrder, o);

    FORM blanketOrders 'Множественные заказы' TITLE 'Множественные заказы'###sign
        OBJECTS o = BlanketOrder
        PROPERTIES (o) READONLYIF isReadonly() isClosedBlanketOrder, isPostedBlanketOrder, numberBlanketOrder, seriesBlanketOrder, dateBlanketOrder, timeBlanketOrder,
                                nameSupplierBlanketOrder, nameSupplierStockBlanketOrder, nameCustomerBlanketOrder, nameCurrencyBlanketOrder
        PROPERTIES (o) READONLY countBlanketOrderDetailBlanketOrder, quantityBlanketOrderDetailBlanketOrder, sumBlanketOrderDetailBlanketOrder,
                                VATSumBlanketOrderDetailBlanketOrder, invoiceSumBlanketOrderDetailBlanketOrder
        PROPERTIES (o) READONLYIF isReadonly() shipmentDateBlanketOrder, shipmentTimeBlanketOrder, customerStocksBlanketOrder,
                                noteBlanketOrder

        PROPERTIES (o) READONLY FORCE PANEL createdNameUserBlanketOrder, createdTimeBlanketOrder, createdHostnameComputerBlanketOrder, 
                                            postedNameUserBlanketOrder, postedTimeBlanketOrder, postedHostnameComputerBlanketOrder

        PROPERTIES (o) ADDFORM, EDITFORM SHOWIF isOpenedBlanketOrder(o)
        PROPERTIES (o) closeBlanketOrder SHOWIF isOpenedBlanketOrder(o), openBlanketOrder SHOWIF isClosedBlanketOrder(o)
        PROPERTIES (o) deleteo=DELETE FORCE PANEL TOOLBAR SHOWIF isOpenedBlanketOrder(o)
        


        OBJECTS d=BlanketOrderDetail
        PROPERTIES (d) READONLY indexBlanketOrderDetail, idBarcodeSkuBlanketOrderDetail, nameSkuBlanketOrderDetail, shortNameUOMSkuBlanketOrderDetail,
                       quantityBlanketOrderDetail, namePriceListTypeBlanketOrderDetail,
                       priceBlanketOrderDetail, sumBlanketOrderDetail,
                       numberVATBlanketOrderDetail, valueVATBlanketOrderDetail, VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail,
                       nameSupplierStockBlanketOrderDetail, nameCustomerStockBlanketOrderDetail,
                       shipmentDateBlanketOrderDetail, shipmentTimeBlanketOrderDetail


        FILTERS blanketOrderBlanketOrderDetail(d) == o
        DIALOG BlanketOrder OBJECT o
    ;

    DESIGN blanketOrders FROM DEFAULT {
        NEW documentContainer BEFORE functions.box {
            fill = 1;
            type = SPLITV;

            ADD o.box { fill = 2; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                ADD d.box {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    ADD o.created;
                    ADD o.posted;
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
    @extendFormEditable(blanketOrders);
    @defineFilterIsOpened (blanketOrder, blanketOrders, o);
END

META defineOrderBlanketOrder(sign)

    CLASS BlanketOrderOrder 'Заказ на основе множественного'###sign : Order;
    CLASS BlanketOrderOrderDetail 'Строка заказа на основе множественного'###sign : OrderDetail;

    @defineDocumentTables(blanketOrderOrder);

    needToOrderBlanketOrderDetailStock (blanketOrderDetail, stock) = quantityBlanketOrderDetail(blanketOrderDetail)
        AND isPostedBlanketOrderDetail(blanketOrderDetail) AND customerStockBlanketOrderDetail(blanketOrderDetail) == stock;

    needToOrderBlanketOrderStock (blanketOrder, stock) = quantityBlanketOrderDetailBlanketOrderCustomerStock(blanketOrder, stock)
        AND isPostedBlanketOrder(blanketOrder);

//-- object
    @defineAggregation(blanketOrder, stock, blanketOrderOrder, needToOrder);

    supplierOrder(order) += supplierBlanketOrder(blanketOrderBlanketOrderOrder(order));
    customerOrder(order) += customerBlanketOrder(blanketOrderBlanketOrderOrder(order));

    @defineDocumentAggregationHeaderStock (blanketOrder, blanketOrderOrder, stock, supplier, 'Склад поставщика');
    supplierStockOrder(order) += supplierStockBlanketOrderOrder(order);

    customerStockOrder(order) += stockBlanketOrderOrder(order);

    shipmentDateOrder(order) += shipmentDateBlanketOrder(blanketOrderBlanketOrderOrder(order));
    shipmentTimeOrder(order) += shipmentTimeBlanketOrder(blanketOrderBlanketOrderOrder(order));

    currencyOrder(order) += currencyBlanketOrder(blanketOrderBlanketOrderOrder(order));
    priceListTypeOrder(order) += priceListTypeBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));

    @defineDocumentAggregationHeaderNote (blanketOrder, blanketOrderOrder);
    noteOrder(order) += noteBlanketOrderOrder(order);

    seriesOrder(order) += seriesBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));
    numberOrder(order) += numberBlanketOrderStock(blanketOrderBlanketOrderOrder(order), stockBlanketOrderOrder(order));
    seriesNumberBlanketOrderOrder 'Серия/Номер' (blanketOrderOrder) = CONCAT '',
        seriesBlanketOrderStock(blanketOrderBlanketOrderOrder(blanketOrderOrder), stockBlanketOrderOrder(blanketOrderOrder)),
        numberBlanketOrderStock(blanketOrderBlanketOrderOrder(blanketOrderOrder), stockBlanketOrderOrder(blanketOrderOrder));

//-- detail
    @defineAggregation(blanketOrderDetail, stock, blanketOrderOrderDetail, needToOrder);

    blanketOrderOrderBlanketOrderOrderDetail (blanketOrderOrderDetail) =
        blanketOrderOrderBlanketOrderStock(blanketOrderBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(blanketOrderOrderDetail)),
                                           customerStockBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(blanketOrderOrderDetail)));
    orderOrderDetail(detail) += blanketOrderOrderBlanketOrderOrderDetail(detail);

    dataSupplierStockOrderDetail(detail) += dataSupplierStockBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    @defineDocumentHeaderCount(blanketOrderOrder);
    @defineDocumentDetailIndex(blanketOrderOrder);

    @defineDocumentAggregationTime(blanketOrder, blanketOrderOrder);
    dateOrder(order) += dateBlanketOrderOrder(order);
    timeOrder(order) += timeBlanketOrderOrder(order);

    @defineDocumentHeaderDescription(BlanketOrderOrder, 'Заказ на основе множественного'###sign);
    descriptionOrder (order) += descriptionBlanketOrderOrder(order);

    @defineDocumentAggregationPosted(blanketOrder, blanketOrderOrder);
    isPostedOrder(order) += isPostedBlanketOrderOrder(order);
    
    @defineDocumentAggregationClosed(blanketOrder, blanketOrderOrder);
    isClosedOrder(order) += isClosedBlanketOrderOrder(order);
    
    @defineDocumentAggregationDetailSku (blanketOrder, blanketOrderOrder, sku);
    skuOrderDetail(detail) +=  skuBlanketOrderOrderDetail(detail);

    @defineDocumentAggregationDetailQuantity (blanketOrder, blanketOrderOrder);
    quantityOrderDetail(detail) +=  quantityBlanketOrderOrderDetail(detail);

    shipmentDataDateOrderDetail(detail) += shipmentDataDateBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    shipmentDataTimeOrderDetail(detail) += shipmentDataTimeBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    priceListTypeOrderDetail(detail) += priceListTypeBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    priceOrderDetail(detail) += priceBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    sumOrderDetail(detail) += sumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    VATOrderDetail(detail) += VATBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    valueVATOrderDetail(detail) += valueVATBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    invoicePriceOrderDetail(detail) += invoicePriceBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    invoiceSumOrderDetail(detail) += invoiceSumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));
    VATSumOrderDetail(detail) += VATSumBlanketOrderDetail(blanketOrderDetailBlanketOrderOrderDetail(detail));

    editOrder(order) += ACTION EXEC editBlanketOrder(blanketOrderBlanketOrderOrder(order));

END

// Партии приход
META defineBlanketOrderBatch(legalEntityProp, stockProp, stockExtra)
    @defineDocumentDetailBatch(blanketOrder, batch);

//    overCopyUserOrderDetail(d, detail) += ACTION (d, detail) {      
//        batchUserOrderDetail(d) <- batchUserOrderDetail(detail);
//    } 

    // Пишем в цену заказа из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(blanketOrder, stockProp, blanketOrder);

    // История по правой кнопке
    @defineBalancesBatch(blanketOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(blanketOrderDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии


    // Подбор
    @defineDocumentBatchStockExtraPriceListTypeAgreement(blanketOrder, stockProp, stockExtra);      
    @extendFormDocumentBatchStockExtraCustom(blanketOrder, blanketOrder, o, legalEntityProp, stockProp, stockExtra);
END

META defineBlanketOrderBatchDialog(dumb)
    changeBatchBlanketOrderDetail = ACTION (detail) {
        FORM dialogBatch OBJECTS sk = skuBlanketOrderDetail(detail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            ASSIGN batchBlanketOrderDetail(detail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            ASSIGN batchBlanketOrderDetail(detail) <- NULL;
        }
    }

    EXTEND FORM blanketOrder
        PROPERTIES (d) nameBatchBlanketOrderDetail ON CHANGE changeBatchBlanketOrderDetail(d) AFTER shortNameUOMSkuBlanketOrderDetail
    ;
    EXTEND FORM blanketOrders PROPERTIES (d) READONLY nameBatchBlanketOrderDetail AFTER shortNameUOMSkuBlanketOrderDetail;
END

META defineBlanketOrderBatchDialogStock(stockProp)
    changeBatchBlanketOrderDetail = ACTION (blanketOrderDetail) {
        FORM dialogBatchStock OBJECTS st = stockProp###blanketOrderDetail(blanketOrderDetail),
                                      t = dateTimeBlanketOrderDetail(blanketOrderDetail),
                                      sk = skuBlanketOrderDetail(blanketOrderDetail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            ASSIGN batchBlanketOrderDetail(blanketOrderDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            ASSIGN batchBlanketOrderDetail(blanketOrderDetail) <- NULL;
        }

    };

    EXTEND FORM blanketOrder
        PROPERTIES (d) nameBatchBlanketOrderDetail ON CHANGE changeBatchBlanketOrderDetail(d) AFTER shortNameUOMSkuBlanketOrderDetail
    ;
    EXTEND FORM blanketOrders PROPERTIES (d) READONLY nameBatchBlanketOrderDetail AFTER shortNameUOMSkuBlanketOrderDetail;
END

