MODULE StockContractTemplate;

REQUIRE StockContract, Word, LegalEntityBy, Bank;

overCreateStockContractTemplate = ABSTRACT ACTION (TemplateEntry, Contract);

createStockContractTemplate 'Заполнить по шаблону' = ACTION (contract) {
    SET valueTemplateEntry(detail) <- NULL;

    FORM dialogTemplates MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL template = Template();
        SET template() <- chosenObject('t');
        FOR templateTemplateEntry (detail) == template() DO {

            SET valueTemplateEntry(detail) <- toText(nameSupplierContractSku(contract)) WHERE keyTemplateEntry(detail) == 'supplier';
            SET valueTemplateEntry(detail) <- toText(nameCustomerContractSku(contract)) WHERE keyTemplateEntry(detail) == 'customer';
            SET valueTemplateEntry(detail) <- toText(shortNameOwnershipLegalEntity(supplierContractSku(contract))) WHERE keyTemplateEntry(detail) == 'shortOwnershipSupplier';
            SET valueTemplateEntry(detail) <- toText(shortNameOwnershipLegalEntity(customerContractSku(contract))) WHERE keyTemplateEntry(detail) == 'shortOwnershipCustomer';
            SET valueTemplateEntry(detail) <- toText(addressLegalEntity(supplierContractSku(contract))) WHERE keyTemplateEntry(detail) == 'addressSupplier';
            SET valueTemplateEntry(detail) <- toText(addressLegalEntity(customerContractSku(contract))) WHERE keyTemplateEntry(detail) == 'addressCustomer';
            SET valueTemplateEntry(detail) <- toText(nameCountryLegalEntity(supplierContractSku(contract))) WHERE keyTemplateEntry(detail) == 'countrySupplier';
            SET valueTemplateEntry(detail) <- toText(nameCountryLegalEntity(customerContractSku(contract))) WHERE keyTemplateEntry(detail) == 'countryCustomer';
            SET valueTemplateEntry(detail) <- toText(phoneLegalEntity(supplierContractSku(contract))) WHERE keyTemplateEntry(detail) == 'phoneSupplier';
            SET valueTemplateEntry(detail) <- toText(phoneLegalEntity(customerContractSku(contract))) WHERE keyTemplateEntry(detail) == 'phoneCustomer';
            SET valueTemplateEntry(detail) <- toText(emailLegalEntity(supplierContractSku(contract))) WHERE keyTemplateEntry(detail) == 'emailSupplier';
            SET valueTemplateEntry(detail) <- toText(emailLegalEntity(customerContractSku(contract))) WHERE keyTemplateEntry(detail) == 'emailCustomer';
            SET valueTemplateEntry(detail) <- toText(numberAccountLegalEntity(supplierContractSku(contract))) WHERE keyTemplateEntry(detail) == 'accountBankSupplier';
            SET valueTemplateEntry(detail) <- toText(numberAccountLegalEntity(customerContractSku(contract))) WHERE keyTemplateEntry(detail) == 'accountBankCustomer';
            SET valueTemplateEntry(detail) <- toText(nameBankAccount(accountLegalEntity(supplierContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'bankSupplier';
            SET valueTemplateEntry(detail) <- toText(nameBankAccount(accountLegalEntity(customerContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'bankCustomer';
            SET valueTemplateEntry(detail) <- toText(addressBankAccount(accountLegalEntity(supplierContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'addressBankSupplier';
            SET valueTemplateEntry(detail) <- toText(addressBankAccount(accountLegalEntity(customerContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'addressBankCustomer';
            SET valueTemplateEntry(detail) <- toText(MFOBankAccount(accountLegalEntity(supplierContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'MFOBankSupplier';
            SET valueTemplateEntry(detail) <- toText(MFOBankAccount(accountLegalEntity(customerContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'MFOBankCustomer';
            SET valueTemplateEntry(detail) <- toText(departmentBankAccount(accountLegalEntity(supplierContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'departmentBankSupplier';
            SET valueTemplateEntry(detail) <- toText(departmentBankAccount(accountLegalEntity(customerContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'departmentBankCustomer';
            SET valueTemplateEntry(detail) <- toText(CBUBankAccount(accountLegalEntity(supplierContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'CBUBankSupplier';
            SET valueTemplateEntry(detail) <- toText(CBUBankAccount(accountLegalEntity(customerContractSku(contract)))) WHERE keyTemplateEntry(detail) == 'CBUBankCustomer';

            EXEC overCreateStockContractTemplate(detail, contract);
        }
        FORM template OBJECTS t = template() MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC processTemplate(template());
            SET wordUserContractSku(contract) <- resultTemplate();
            EXEC openWordUserContractSku(contract);
        }
    }
} IMAGE 'editReport.png';

EXTEND FORM userContractSku

    PROPERTIES (c) createStockContractTemplate
;
EXTEND DESIGN userContractSku {
    text {
        ADD PROPERTY(createStockContractTemplate);
    }
}

// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultTemplate 'Добавить шаблон договора' = ACTION (iname, isid) {
    FOR ADDOBJ t = Template DO {
        SET nameTemplate(t) <- iname;
        SET idTemplate(t) <- isid;
    }
}

loadDefaultTemplateEntry 'Добавить строку шаблона' = ACTION (iname, isid) {
    FOR ADDOBJ g = TemplateEntry DO {
        SET keyTemplateEntry(g) <- iname;
        SET templateTemplateEntry(g) <- templateId(isid);
    }
}

overloadDefaultTemplates = ABSTRACT ACTION ();
loadDefaultTemplates 'Загрузить стандарные шаблоны' () = ACTION ()  {
    EXEC loadDefaultTemplate ('Договор купли продажи', '1');

    EXEC loadDefaultTemplateEntry('supplier', '1');
    EXEC loadDefaultTemplateEntry('customer', '1');
    EXEC loadDefaultTemplateEntry('shortOwnershipSupplier', '1');
    EXEC loadDefaultTemplateEntry('shortOwnershipCustomer', '1');
    EXEC loadDefaultTemplateEntry('addressSupplier', '1');
    EXEC loadDefaultTemplateEntry('addressCustomer', '1');
    EXEC loadDefaultTemplateEntry('managerSupplier', '1');
    EXEC loadDefaultTemplateEntry('managerCustomer', '1');
    EXEC loadDefaultTemplateEntry('countrySupplier', '1');
    EXEC loadDefaultTemplateEntry('countryCustomer', '1');
    EXEC loadDefaultTemplateEntry('phoneSupplier', '1');
    EXEC loadDefaultTemplateEntry('phoneCustomer', '1');
    EXEC loadDefaultTemplateEntry('emailSupplier', '1');
    EXEC loadDefaultTemplateEntry('emailCustomer', '1');
    EXEC loadDefaultTemplateEntry('accountBankSupplier', '1');
    EXEC loadDefaultTemplateEntry('accountBankCustomer', '1');
    EXEC loadDefaultTemplateEntry('bankSupplier', '1');
    EXEC loadDefaultTemplateEntry('bankCustomer', '1');
    EXEC loadDefaultTemplateEntry('addressBankSupplier', '1');
    EXEC loadDefaultTemplateEntry('addressBankCustomer', '1');
    EXEC loadDefaultTemplateEntry('MFOBankSupplier', '1');
    EXEC loadDefaultTemplateEntry('MFOBankCustomer', '1');
    EXEC loadDefaultTemplateEntry('departmentBankSupplier', '1');
    EXEC loadDefaultTemplateEntry('departmentBankCustomer', '1');
    EXEC loadDefaultTemplateEntry('CBUBankSupplier', '1');
    EXEC loadDefaultTemplateEntry('CBUBankCustomer', '1');

    EXEC overloadDefaultTemplates();
} IN loadDefaultGroup;

@implementLoadDefaultData(loadDefaultTemplates);



