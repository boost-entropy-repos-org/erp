MODULE PriceListManage;

REQUIRE PriceList;

FORM priceListManage 'Управление ценами'
    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) objValue = OBJVALUE

    OBJECTS pt = DataPriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType
;

defaultPriceListType = DATA DataPriceListType();
nameDefaultPriceListType 'Вид цены для управления ценами по умолчанию' = namePriceListType(defaultPriceListType());
EXTEND FORM options
    PROPERTIES() nameDefaultPriceListType
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(nameDefaultPriceListType);
    }
}

seekDefaultPriceListType = ACTION SEEK priceListManage.pt defaultPriceListType();
EXTEND FORM priceListManage
    EVENTS ON INIT seekDefaultPriceListType()
;

DESIGN priceListManage FROM DEFAULT {
    main {
        type = CONTAINERV;
        NEW params {
            type = CONTAINERH;
            ADD dt.box;
            ADD pt.box {
                caption = 'Вид цены';
            }
        }
        NEW detail {
            type = TABBED;
        }
        ADD functions.box;
    }
}

NAVIGATOR {
    priceListDocuments {
        ADD priceListManage FIRST;
    }
}

inSku 'Отм.' = DATA SESSION BOOLEAN (Sku);

TABLE skuCustomUser(Sku, CustomUser);
inSkuCustomUser = DATA BOOLEAN (Sku, CustomUser);

// ---------------------------- По организациям ----------------------- //
// c

EXTEND FORM priceListManage
    OBJECTS c = LegalEntity FIXED PANEL
    PROPERTIES(c) nameLegalEntity SELECTOR

    TREE cskg cskg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY cskgName = nameSkuGroup(cskg)
    ORDER BY cskgName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(cskg) DEFAULT

    OBJECTS csk = Sku
    PROPERTIES(csk)          inSku
    PROPERTIES(csk) READONLY nameSku, idBarcodeSku
    ORDER BY nameSku(csk)
    FILTERS isParentSkuGroupSku(cskg, csk)

    PROPERTIES READONLY cPrice = activePriceALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt), // последний прайс, в котором есть цена
                        activeDescriptionALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt)
    // на больших объемах возможно будет тормозить
    FILTERS countStockAPriceListTypeSkuCompanyDateTime(pt, csk, c, dt) // фильтруем все товары, которые входят в ассортимент хотя бы одного склада

    OBJECTS cst = Stock
    PROPERTIES(cst)          READONLY nameStock
    PROPERTIES(csk, cst, dt) READONLY balanceASkuStockDateTime
    PROPERTIES               READONLY cPriceStock = priceALedgerPriceListTypeSkuStockCompanyDateTime(pt, csk, cst, c, dt)
    ORDER BY nameStock(cst)
    FILTERS priceALedgerPriceListTypeSkuStockCompanyDateTime(pt, csk, cst, c, dt)

    OBJECTS cpl = PriceListLedger
    PROPERTIES(cpl) READONLY isPostedPriceListLedger, fromDateTimePriceListLedger, toDateTimePriceListLedger, descriptionPriceListLedger, priceListTypesPriceListLedger, stocksPriceListLedger, timeCreatedPriceListLedger, nameUserCreatedPriceListLedger, hostnameComputerCreatedPriceListLedger
    PROPERTIES      READONLY pricePriceListLedgerLedgerPriceListType(cpl, pt)
    FILTERS inPriceListLedgerLedgerPriceListType(cpl, pt),
            skuPriceListLedger(cpl) == csk,
            companyPriceListLedger(cpl) == c
;

EXTEND DESIGN priceListManage {
    detail {
        NEW c {
            caption = 'По организациям';
            type = SPLITV;
            NEW c.skus {
                type = SPLITH;
                fillVertical = 2.0;
                NEW c.skuFilters {
                    type = CONTAINERV;
                    ADD c.box;
                    ADD cskg.tree.box {
                        caption = 'Товарные группы';
                    }
                }
                ADD csk.box {
                    caption = 'Товары';
                    fillHorizontal = 2.0;
                }
            }
            NEW c.detail {
                type = TABBED;
                NEW c.stocks {
                    caption = 'Склады';
                    type = CONTAINERH;
                    ADD cst.box {
                        caption = 'Склады';
                    }
                }
                NEW companyActions {
                    caption = 'Действия';
                    childConstraints = TO THE BOTTOM;
                    NEW companyActionsContainer {
                        childConstraints = TO THE RIGHT;
                    }
                    ADD cpl.box {
                        caption = 'История';
                    }
                }
            }
        }
    }
}

// Создание прайс-листов

fillCompanyPriceList = ACTION (userPriceList, dateTime, dataPriceListType, company) {
    fromDateUserPriceList(userPriceList) <- toDate(dateTime);
    fromTimeUserPriceList(userPriceList) <- toTime(dateTime);
    companyUserPriceList(userPriceList) <- company;
    currencyUserPriceList(userPriceList) <- currencyDataPriceListType(dataPriceListType);
    inUserPriceListDataPriceListType(userPriceList, dataPriceListType) <- TRUE;
    showUserPriceListPriceListType(userPriceList, dataPriceListType) <- TRUE;
    FOR inSkuCustomUser(sku, currentUser()) ADDOBJ d = UserPriceListDetail DO {
        skuUserPriceListDetail(d) <- sku;
        userPriceListUserPriceListDetail(d) <- userPriceList;
    }
}

// Добавление в ассортимент
includeSessionDateTimeDataPriceListTypeCompany 'Включить' = ACTION (dateTime, dataPriceListType, company) NEWSESSION {
    FOR ADDOBJ u = UserPriceList DO {
        fillCompanyPriceList(u, dateTime, dataPriceListType, company);
        priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
            activePriceALedgerPriceListTypeSkuCompanyDateTime(dataPriceListType, skuUserPriceListDetail(d), company, dateTime)
            WHERE userPriceListUserPriceListDetail(d) == u;
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

includeDateTimeDataPriceListTypeCompany 'Включить' = ACTION (dateTime, dataPriceListType, company) {
    inSkuCustomUser(s, u) <- inSku(s) WHERE u == currentUser();
    apply();
    includeSessionDateTimeDataPriceListTypeCompany(dateTime, dataPriceListType, company);
}

// Изменение цен
modifySessionDateTimeDataPriceListTypeCompany 'Изменить' = ACTION (dateTime, dataPriceListType, company) NEWSESSION {
    FOR ADDOBJ u = UserPriceList DO {
        fillCompanyPriceList(u, dateTime, dataPriceListType, company);
        priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
            activePriceALedgerPriceListTypeSkuCompanyDateTime(dataPriceListType, skuUserPriceListDetail(d), company, dateTime)
            WHERE userPriceListUserPriceListDetail(d) == u;
        FOR [GROUP SUM 1 IF inSkuCustomUser(sku, currentUser()) AND priceALedgerPriceListTypeSkuStockCompanyDateTime(t, sku, st, c, d) BY t, st, c, d] (dataPriceListType, stock, company, dateTime) DO {
            dataInUserPriceListStock(u, stock) <- TRUE;
        }
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

modifyDateTimeDataPriceListTypeCompany 'Изменить' = ACTION (dateTime, dataPriceListType, company) {
    inSkuCustomUser(s, u) <- inSku(s) WHERE u == currentUser();
    apply();
    modifySessionDateTimeDataPriceListTypeCompany(dateTime, dataPriceListType, company);
}

// Исключение из ассортимента
excludeSessionDateTimeDataPriceListTypeCompany 'Исключить' = ACTION (dateTime, dataPriceListType, company) NEWSESSION {
    FOR ADDOBJ u = UserPriceList DO {
        fillCompanyPriceList(u, dateTime, dataPriceListType, company);
        FOR [GROUP SUM 1 IF inSkuCustomUser(sku, currentUser()) AND priceALedgerPriceListTypeSkuStockCompanyDateTime(t, sku, st, c, d) BY t, st, c, d] (dataPriceListType, stock, company, dateTime) DO {
            dataInUserPriceListStock(u, stock) <- TRUE;
        }
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

excludeDateTimeDataPriceListTypeCompany 'Исключить' = ACTION (dateTime, dataPriceListType, company) {
    inSkuCustomUser(s, u) <- inSku(s) WHERE u == currentUser();
    apply();
    excludeSessionDateTimeDataPriceListTypeCompany(dateTime, dataPriceListType, company);
}

EXTEND FORM priceListManage
    PROPERTIES TODRAW csk FORCE PANEL includeDateTimeDataPriceListTypeCompany(dt, pt, c),
                                      modifyDateTimeDataPriceListTypeCompany(dt, pt, c),
                                      excludeDateTimeDataPriceListTypeCompany(dt, pt, c)
;

EXTEND DESIGN priceListManage {
    companyActionsContainer {
        NEW primaryCompanyActions {
            caption = 'Согласованные цены';
            ADD PROPERTY(includeDateTimeDataPriceListTypeCompany);
            ADD PROPERTY(modifyDateTimeDataPriceListTypeCompany);
            ADD PROPERTY(excludeDateTimeDataPriceListTypeCompany);
        }
    }
}

// ---------------------------- По складам ---------------------------- //
// s

EXTEND FORM priceListManage
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES(s) nameStock SELECTOR
    FILTERS isCompanyStock(s)

    TREE sskg sskg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY sskgName = nameSkuGroup(sskg)
    ORDER BY sskgName
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeSkuGroup(sskg) DEFAULT

    OBJECTS ssk = Sku
    PROPERTIES(ssk)          inSku
    PROPERTIES(ssk) READONLY nameSku, idBarcodeSku
    PROPERTIES      READONLY balanceASkuStockDateTime(ssk, s, dt)
    ORDER BY nameSku(ssk)
    FILTERS isParentSkuGroupSku(sskg, ssk)

    PROPERTIES(pt, ssk, s, dt) READONLY sPrice = priceALedgerPriceListTypeSkuStockDateTime,
                                        nameCompanyALedgerPriceListTypeSkuStockDateTime,
                                        descriptionALedgerPriceListTypeSkuStockDateTime
    FILTERS priceALedgerPriceListTypeSkuStockDateTime(pt, ssk, s, dt)

    OBJECTS sst = Stock
    PROPERTIES(sst)          READONLY nameStock
    PROPERTIES(ssk, sst, dt) READONLY balanceASkuStockDateTime
    PROPERTIES(pt, ssk, sst, dt) READONLY sPriceStock = priceALedgerPriceListTypeSkuStockDateTime,
                                          nameCompanyALedgerPriceListTypeSkuStockDateTime,
                                          descriptionALedgerPriceListTypeSkuStockDateTime

    ORDER BY nameStock(cst)
    FILTERS priceALedgerPriceListTypeSkuStockDateTime(pt, ssk, sst, dt)

    OBJECTS spl = PriceListLedger
    PROPERTIES(spl) READONLY isPostedPriceListLedger, fromDateTimePriceListLedger, toDateTimePriceListLedger, descriptionPriceListLedger, priceListTypesPriceListLedger, stocksPriceListLedger, timeCreatedPriceListLedger, nameUserCreatedPriceListLedger, hostnameComputerCreatedPriceListLedger
    PROPERTIES      READONLY pricePriceListLedgerLedgerPriceListType(spl, pt)
    FILTERS inPriceListLedgerLedgerPriceListType(spl, pt),
            skuPriceListLedger(spl) == ssk,
            inPriceListLedgerStock(spl, s)
;

EXTEND DESIGN priceListManage {
    detail {
        NEW s {
            caption = 'По складам';
            type = SPLITV;
            NEW s.skus {
                type = SPLITH;
                fillVertical = 2.0;
                NEW s.skuFilters {
                    type = CONTAINERV;
                    ADD s.box;
                    ADD sskg.tree.box {
                        caption = 'Товарные группы';
                    }
                }
                ADD ssk.box {
                    caption = 'Товары';
                    fillHorizontal = 2.0;
                }
            }
            NEW s.detail {
                type = TABBED;
                NEW s.stocks {
                    caption = 'Склады';
                    type = CONTAINERH;
                    ADD sst.box {
                        caption = 'Склады';
                    }
                }
                NEW stockActions {
                    caption = 'Действия';
                    childConstraints = TO THE BOTTOM;
                    NEW stockActionsContainer {
                        childConstraints = TO THE RIGHT;
                    }
                    ADD spl.box {
                        caption = 'История';
                    }
                }
            }
        }
    }
}

fillCompanyStockPriceList = ACTION (u, company, dateTime, dataPriceListType, stock) {
    fromDateUserPriceList(u) <- toDate(dateTime);
    fromTimeUserPriceList(u) <- toTime(dateTime);
    companyUserPriceList(u) <- company;
    currencyUserPriceList(u) <- currencyDataPriceListType(dataPriceListType);
    inUserPriceListDataPriceListType(u, dataPriceListType) <- TRUE;
    showUserPriceListPriceListType(u, dataPriceListType) <- TRUE;
    dataInUserPriceListStock(u, stock) <- TRUE;
    FOR inSkuCustomUser(sku, currentUser()) AND companyALedgerPriceListTypeSkuStockDateTime(dataPriceListType, sku, stock, dateTime) == company
        ADDOBJ d = UserPriceListDetail DO {
        skuUserPriceListDetail(d) <- sku;
        userPriceListUserPriceListDetail(d) <- u;
    }
}

createCompanyStockPriceList = ACTION (company, dateTime, dataPriceListType, stock) NEWSESSION {
    FOR ADDOBJ u = UserPriceList DO {
        fillCompanyStockPriceList(u, company, dateTime, dataPriceListType, stock);
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

createPriceCompanyStockPriceList = ACTION (company, dateTime, dataPriceListType, stock) NEWSESSION {
    FOR ADDOBJ u = UserPriceList DO {
        fillCompanyStockPriceList(u, company, dateTime, dataPriceListType, stock);
        priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
            priceALedgerPriceListTypeSkuStockDateTime(dataPriceListType, skuUserPriceListDetail(d), stock, dateTime)
            WHERE userPriceListUserPriceListDetail(d) == u;
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

// Изменение цен
modifySessionDateTimeDataPriceListTypeStock 'Изменить' = ACTION (dateTime, dataPriceListType, stock) {
    FOR [GROUP SUM 1 IF inSkuCustomUser(s, currentUser()) BY companyALedgerPriceListTypeSkuStockDateTime(t, s, st, d), t, st, d] (company, dataPriceListType, stock, dateTime) DO {
        createPriceCompanyStockPriceList(company, dateTime, dataPriceListType, stock);
    }
}

modifyDateTimeDataPriceListTypeStock 'Изменить' = ACTION (dateTime, dataPriceListType, stock) {
    inSkuCustomUser(s, u) <- inSku(s) WHERE u == currentUser();
    apply();
    modifySessionDateTimeDataPriceListTypeStock(dateTime, dataPriceListType, stock);
}

// Исключение из ассортимента
excludeSessionDateTimeDataPriceListTypeStock 'Исключить' = ACTION (dateTime, dataPriceListType, stock) {
    FOR [GROUP SUM 1 IF inSkuCustomUser(s, currentUser()) BY companyALedgerPriceListTypeSkuStockDateTime(t, s, st, d), t, st, d] (company, dataPriceListType, stock, dateTime) DO {
        createCompanyStockPriceList(company, dateTime, dataPriceListType, stock);
    }
}

excludeDateTimeDataPriceListTypeStock 'Исключить' = ACTION (dateTime, dataPriceListType, stock) {
    inSkuCustomUser(s, u) <- inSku(s) WHERE u == currentUser();
    apply();
    excludeSessionDateTimeDataPriceListTypeStock(dateTime, dataPriceListType, stock);
}

EXTEND FORM priceListManage
    PROPERTIES TODRAW ssk FORCE PANEL modifyDateTimeDataPriceListTypeStock(dt, pt, s),
                                      excludeDateTimeDataPriceListTypeStock(dt, pt, s)
;

EXTEND DESIGN priceListManage {
    stockActionsContainer {
        NEW primaryStockActions {
            caption = 'Согласованные цены';
            ADD PROPERTY(modifyDateTimeDataPriceListTypeStock);
            ADD PROPERTY(excludeDateTimeDataPriceListTypeStock);
        }
    }
}

// ----------------------------------- Список прайсов ---------------------------- //
// p

EXTEND FORM priceListManage
    PROPERTIES(c) pNameCompany = nameLegalEntity SELECTOR

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY isPostedUserPriceList FORCE GRID, numberObject, seriesObject, dateUserPriceList, timeUserPriceList,
                           fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                           nameCurrencyUserPriceList, nameCompanyUserPriceList, priceListTypesPriceList, stocksPriceList,
                           noteUserPriceList, objectClassName
    PROPERTIES(p) EDITFORM, DELETE, updatePriceList FORCE PANEL TOOLBAR
    ORDER BY fromDateUserPriceList, fromTimeUserPriceList
    FILTERS inPriceListDataPriceListType(p, pt),
            companyUserPriceList(p) == c
;
EXTEND DESIGN priceListManage {
    detail {
        NEW p {
            caption = 'Прайсы';
            type = CONTAINERV;

            ADD PROPERTY(pNameCompany);
            ADD p.box;
        }
    }
}
