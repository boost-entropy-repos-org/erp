MODULE Agreement;

REQUIRE Currency,
        Document,
        LegalEntity,
        Numerator,
        PriceListType,
        PaymentCondition;

CLASS Agreement 'Соглашение';
TABLE agreement (Agreement);

nameAgreement 'Наименование' = DATA VARISTRING[50](Agreement) IN recognize;

@defineExternalizable (agreement, VARSTRING[100]);

@defineNumbered(Agreement);

@defineNumeratedDefault(Agreement, 'Соглашения', 'ТД');

@defineDocumentHeaderTime(Agreement);
@deriveDocumentHeaderTimePrefix(Agreement, );

@defineDocumentHeaderTimePrefix(Agreement, from, ' с');
@deriveDocumentHeaderTimePrefix(Agreement, from);

@defineDocumentHeaderTimePrefix(Agreement, to, ' по');
//toDateAgreement 'Дата по' = DATA DATE(Agreement);
//toTimeAgreement 'Время по' = DATA TIME(Agreement);
//toDateTimeAgreement 'Дата/время по'(agreement) = dateTimeToDateTime(toDateAgreement(agreement), toTimeAgreement(agreement));

@defineDocumentHeaderNote(Agreement);
@defineDocumentHeaderCurrency(agreement);
@defineDocumentHeaderDescription(Agreement, 'Соглашение');

// -------------------------------------- Поставщики -------------------------------- //

// Группы поставщиков
TABLE agreementLegalEntityGroup (Agreement, LegalEntityGroup);
dataInAgreementSupplierGroup 'Отм' = DATA BOOLEAN (Agreement, LegalEntityGroup);

levelParentAgreementSupplierGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF dataInAgreementSupplierGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntitySupplierGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementSupplierGroup(agreement, legalEntityGroup));
nearestInAgreementSupplierGroup (agreement, legalEntityGroup) =
    dataInAgreementSupplierGroup(agreement, nearestParentLegalEntitySupplierGroup(agreement, legalEntityGroup)) PERSISTENT;

inAgreementSupplierGroup 'Отм' (agreement, legalEntityGroup) = OVERRIDE nearestInAgreementSupplierGroup(agreement, legalEntityGroup),
                                                                        dataInAgreementSupplierGroup(agreement, legalEntityGroup);
                                                                        
quantityChildWithSupplierGroupAgreement (legalEntityGroup, agreement) = GROUP SUM 1 IF dataInAgreementSupplierGroup(agreement, childLegalEntityGroup) AND isParentLegalEntityGroupLegalEntityGroup(childLegalEntityGroup, legalEntityGroup) BY legalEntityGroup, agreement PERSISTENT;
quantityParentWithSupplierGroupAgreement (legalEntityGroup, agreement) = GROUP SUM 1 IF dataInAgreementSupplierGroup(agreement, parentLegalEntityGroup) AND isParentLegalEntityGroupLegalEntityGroup(legalEntityGroup, parentLegalEntityGroup) BY legalEntityGroup, agreement PERSISTENT;                                                                        
                                                                           
backgroundInAgreementSupplierGroup 'Цвет' (agreement, legalEntityGroup) = CASE 
    WHEN dataInAgreementSupplierGroup(agreement, legalEntityGroup) THEN RGB(0,0,0)
    WHEN nearestInAgreementSupplierGroup(agreement, legalEntityGroup) THEN RGB(230,248,250) 
    WHEN quantityChildWithSupplierGroupAgreement (legalEntityGroup, agreement) != descendantNumberLegalEntityGroup(legalEntityGroup) AND NOT quantityParentWithSupplierGroupAgreement (legalEntityGroup, agreement) THEN RGB(203,203,203);
        
// Поставщики
TABLE agreementLegalEntity(Agreement, LegalEntity);
dataInAgreementSupplier 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (Agreement, LegalEntity);

inAgreementSupplier 'Отм' (agreement, legalEntity) = OVERRIDE nearestInAgreementSupplierGroup(agreement, legalEntityGroupLegalEntity(legalEntity)),
                                                           dataInAgreementSupplier(agreement, legalEntity);
                                                           
backgroundInAgreementSupplier'Цвет' (agreement, legalEntity) = IF dataInAgreementSupplier(agreement, legalEntity) THEN RGB(0,0,0)
    ELSE RGB(230,248,250) IF nearestInAgreementSupplierGroup(agreement, legalEntityGroupLegalEntity(legalEntity));                                                            

supplierAgreement 'Поставщики' (agreement) = GROUP CONCAT nameLegalEntity(supplier) IF inAgreementSupplier(agreement, supplier) , ', '
                                                 BY agreement
                                                 ORDER supplier MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

CONSTRAINT inAgreementSupplier(agreement, supplier) AND NOT isSellerLegalEntity(supplier)
    MESSAGE 'Для соглашения выбрано в качестве поставщика организация, не являющеяся поставщиком или компанией';

defaultSupplierAgreement (agreement)= GROUP MIN legalEntity IF inAgreementSupplier(agreement, legalEntity) BY agreement; 
countSuppliersAgreement (agreement) = GROUP SUM 1 IF inAgreementSupplier(agreement, legalEntity) BY agreement; 
// -------------------------------------- Покупатели -------------------------------- //

// Группы покупателей
dataInAgreementCustomerGroup 'Отм' = DATA BOOLEAN (Agreement, LegalEntityGroup);

levelParentAgreementCustomerGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF dataInAgreementCustomerGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntityCustomerGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementCustomerGroup(agreement, legalEntityGroup));
nearestInAgreementCustomerGroup (agreement, legalEntityGroup) =
    dataInAgreementCustomerGroup(agreement, nearestParentLegalEntityCustomerGroup(agreement, legalEntityGroup));

inAgreementCustomerGroup 'Отм' (agreement, legalEntityGroup) = OVERRIDE nearestInAgreementCustomerGroup(agreement, legalEntityGroup),
                                                                        dataInAgreementCustomerGroup(agreement, legalEntityGroup);
                                                                        
quantityChildWithCustomerGroupAgreement (legalEntityGroup, agreement) = GROUP SUM 1 IF dataInAgreementCustomerGroup(agreement, childLegalEntityGroup) AND isParentLegalEntityGroupLegalEntityGroup(childLegalEntityGroup, legalEntityGroup) BY legalEntityGroup, agreement PERSISTENT;
quantityParentWithCustomerGroupAgreement (legalEntityGroup, agreement) = GROUP SUM 1 IF dataInAgreementCustomerGroup(agreement, parentLegalEntityGroup) AND isParentLegalEntityGroupLegalEntityGroup(legalEntityGroup, parentLegalEntityGroup) BY legalEntityGroup, agreement PERSISTENT;     
                                                                        
//backgroundInAgreementCustomerGroup 'Цвет' (agreement, legalEntityGroup) = IF dataInAgreementCustomerGroup(agreement, legalEntityGroup) THEN RGB(0,0,0)
//    ELSE RGB(230,248,250) IF nearestInAgreementCustomerGroup(agreement, legalEntityGroup);
    
backgroundInAgreementCustomerGroup 'Цвет' (agreement, legalEntityGroup) = CASE 
    WHEN dataInAgreementCustomerGroup(agreement, legalEntityGroup) THEN RGB(0,0,0)
    WHEN nearestInAgreementCustomerGroup(agreement, legalEntityGroup) THEN RGB(230,248,250) 
    WHEN quantityChildWithCustomerGroupAgreement (legalEntityGroup, agreement) != descendantNumberLegalEntityGroup(legalEntityGroup) AND NOT quantityParentWithCustomerGroupAgreement (legalEntityGroup, agreement) THEN RGB(203,203,203);    
    
// Покупатели
dataInAgreementCustomer 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (Agreement, LegalEntity);

inAgreementCustomer 'Отм' (agreement, legalEntity) = OVERRIDE nearestInAgreementCustomerGroup(agreement, legalEntityGroupLegalEntity(legalEntity)),
                                                           dataInAgreementCustomer(agreement, legalEntity)
                                                  PERSISTENT;
backgroundInAgreementCustomer'Цвет' (agreement, legalEntity) = IF dataInAgreementCustomer(agreement, legalEntity) THEN RGB(0,0,0)
    ELSE RGB(230,248,250) IF nearestInAgreementCustomerGroup(agreement, legalEntityGroupLegalEntity(legalEntity)); 
    
customerAgreement 'Покупатели' (agreement) = GROUP CONCAT nameLegalEntity(customer) IF inAgreementCustomer(agreement, customer) , ', '
                                                 BY agreement
                                                 ORDER customer MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

CONSTRAINT inAgreementCustomer(agreement, customer) AND NOT isBuyerLegalEntity(customer)
    MESSAGE 'Для соглашения выбрано в качестве покупателя организация, не являющеяся покупателем или компанией';

// ----------------------------------------------- Соглашение по умолчанию --------------------------- //

countDefaultAgreementSupplierCustomerDateTime 'Кол-во соглашений' (supplier, customer, dateTime)= GROUP SUM 1 
    IF inAgreementCustomer(agreement, customer) AND inAgreementSupplier(agreement, supplier)
    AND fromDateTimeAgreement(agreement) <= dateTime AND NOT (toDateTimeAgreement(agreement) < dateTime)    
        BY supplier, customer, dateTime;

userDefaultAgreementSupplierCustomer = DATA Agreement (LegalEntity, LegalEntity);
userDefaultAgreementSupplierCustomer(supplier, customer) => inAgreementCustomer(userDefaultAgreementSupplierCustomer(supplier, customer), customer) RESOLVE RIGHT;

calcDefaultAgreementSupplierCustomerDateTime(supplier, customer, dateTime) = GROUP MAX agreement
    IF inAgreementCustomer(agreement, customer) AND inAgreementSupplier(agreement, supplier)
    AND fromDateTimeAgreement(agreement) <= dateTime AND NOT (toDateTimeAgreement(agreement) < dateTime)    
        BY supplier, customer, dateTime;

defaultAgreementSupplierCustomerDateTime(supplier, customer, dateTime) =  OVERRIDE 
    calcDefaultAgreementSupplierCustomerDateTime(supplier, customer, dateTime) IF countDefaultAgreementSupplierCustomerDateTime(supplier, customer, dateTime) == 1,
    userDefaultAgreementSupplierCustomer(supplier, customer) IF dateTime IS DATETIME;
nameDefaultAgreementSupplierCustomerDateTime 'Соглашение по умолчанию' (supplier, customer, dateTime) = nameAgreement(defaultAgreementSupplierCustomerDateTime(supplier, customer, dateTime));

isDefaultAgreementSupplierCustomer 'Соглашение по умолчанию' (agreement, supplier, customer) = defaultAgreementSupplierCustomerDateTime(supplier, customer, currentDateTime()) == agreement;

// ----------------------------------------------- Виды цен --------------------------------- //

isPurchaseAgreement 'Закупка' (agreement) = GROUP SUM 1 IF inAgreementSupplier(agreement, supplier) AND isSupplierLegalEntity(supplier) AND 
    inAgreementCustomer(agreement, customer) AND isCompanyLegalEntity(customer)
    BY agreement;
isSaleAgreement 'Продажа' (agreement) = GROUP SUM 1 IF inAgreementSupplier(agreement, supplier) AND isCompanyLegalEntity(supplier) AND 
    inAgreementCustomer(agreement, customer) AND isCustomerLegalEntity(customer)
    BY agreement;

// -- Основной вид цены
priceListTypeAgreement 'Вид цены' (agreement) = DATA PriceListType (Agreement);
namePriceListTypeAgreement 'Вид цены' (agreement) = namePriceListType(priceListTypeAgreement(agreement));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreement(agreement))
           CHECKED BY priceListTypeAgreement
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

// Уточнение по группам
groupTypeAgreement = DATA GroupType (Agreement);
nameGroupTypeAgreement 'Тип классификатора' (agreement) = nameGroupType(groupTypeAgreement(agreement));

groupTypeAgreement (o) <- SystemGroupType.skuGroupType WHEN SET(o IS Agreement);

TABLE agreementGroup(Agreement, Group);
dataPriceListTypeAgreementGroup (agreement, group) = DATA PriceListType (Agreement, Group);
nameDataPriceListTypeAgreementGroup 'Вид цены (перегруженный)' (agreement, group) = namePriceListType(dataPriceListTypeAgreementGroup(agreement, group));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(dataPriceListTypeAgreementGroup(agreement, group))
           CHECKED BY dataPriceListTypeAgreementGroup
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

levelParentPriceListTypeAgreementGroup (agreement, group) =
    GROUP MIN levelGroupGroup(group, parent) IF dataPriceListTypeAgreementGroup(agreement, parent)
    BY agreement, group PERSISTENT;
nearestParentGroup (agreement, group) = groupGroupLevel(group, levelParentPriceListTypeAgreementGroup (agreement, group));
nearestPriceListTypeAgreementGroup (agreement, group) =
   dataPriceListTypeAgreementGroup(agreement, nearestParentGroup(agreement, group)) PERSISTENT;

priceListTypeAgreementGroup 'Вид цены' (agreement, group) =  OVERRIDE nearestPriceListTypeAgreementGroup(agreement, group), dataPriceListTypeAgreementGroup(agreement, group) PERSISTENT;
namePriceListTypeAgreementGroup 'Вид цены' (agreement, group) =
    namePriceListType(priceListTypeAgreementGroup (agreement, group));

//--
dataInAgreementGroup 'Вкл.' (agreement, group) = DATA BOOLEAN (Agreement, Group);

levelParentDataInAgreementGroup (agreement, group) =
    GROUP MIN levelGroupGroup(group, parent) IF dataInAgreementGroup(agreement, parent)
    BY agreement, group PERSISTENT;
nearestParentAgreementGroup (agreement, group) = groupGroupLevel(group, levelParentDataInAgreementGroup (agreement, group));
nearestDataInAgreementGroup (agreement, group) =
   dataInAgreementGroup(agreement, nearestParentAgreementGroup(agreement, group)) PERSISTENT;

inAgreementGroup 'Вкл.' (agreement, group) =  OVERRIDE nearestDataInAgreementGroup(agreement, group), 
                                                                                 dataInAgreementGroup(agreement, group) PERSISTENT;
    
inAgreementSku 'Вкл.' (agreement, sku) = inAgreementGroup (agreement, groupGroupTypeSku(groupTypeAgreement(agreement),sku));

quantityChildWithGroupAgreement (group, agreement) = GROUP SUM 1 IF dataInAgreementGroup(agreement, childGroup) AND isParentGroupGroup(childGroup, group) BY group, agreement PERSISTENT;
quantityParentWithGroupAgreement (group, agreement) = GROUP SUM 1 IF dataInAgreementGroup(agreement, parentGroup) AND isParentGroupGroup(group, parentGroup) BY group, agreement PERSISTENT;                                                                        
                                                                           
backgroundInAgreementGroup 'Цвет' (agreement, group) = CASE 
    WHEN dataInAgreementGroup(agreement, group) THEN RGB(0,0,0)
    WHEN nearestDataInAgreementGroup(agreement, group) THEN RGB(230,248,250) 
    WHEN quantityChildWithGroupAgreement (group, agreement) != descendantNumberGroup(group) AND NOT quantityParentWithGroupAgreement (group, agreement) THEN RGB(203,203,203);

// Уточнение по sku
TABLE agreementSku(Agreement, Sku);
dataPriceListTypeAgreementSku (agreement, sku) = DATA PriceListType (Agreement, Sku);
nameDataPriceListTypeAgreementSku 'Вид цены (перегруженный)' (agreement, sku) = namePriceListType(dataPriceListTypeAgreementSku(agreement, sku));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(dataPriceListTypeAgreementSku(agreement, sku))
           CHECKED BY dataPriceListTypeAgreementSku
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

priceListTypeAgreementSku (agreement, sku) = OVERRIDE priceListTypeAgreement(agreement) IF sku IS Sku,
                                                      priceListTypeAgreementGroup(agreement, groupGroupTypeSku(groupTypeAgreement(agreement),sku)),
                                                      dataPriceListTypeAgreementSku(agreement, sku);

namePriceListTypeAgreementSku 'Вид цены' = namePriceListType(priceListTypeAgreementSku(agreement, sku));

// ------------------------------------------- Условия оплаты ------------------------------------- //

paymentConditionAgreement 'Условия оплаты' =  DATA PaymentCondition (Agreement);
typePaymentAgreement 'Тип оплаты' (agreement) = typePaymentCondition(paymentConditionAgreement(agreement));
descriptionPaymentConditionAgreement 'Условия оплаты' (agreement) = descriptionPaymentCondition(paymentConditionAgreement(agreement));

// ------------------------------------------- Формы ---------------------------------------------- //

FORM agreement 'Соглашение'

    OBJECTS a = Agreement FIXED PANEL
    PROPERTIES(a) nameAgreement, idAgreement, nameNumeratorAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                  fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                  nameCurrencyAgreement, namePriceListTypeAgreement, descriptionPaymentConditionAgreement, nameGroupTypeAgreement, noteAgreement

    TREE supplierGroupTree f = LegalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY fTreeName = nameLegalEntityGroup(f)
    PROPERTIES(a, f) inAgreementSupplierGroup BACKGROUND backgroundInAgreementSupplierGroup(a, f)

    OBJECTS cc = LegalEntity
    PROPERTIES(cc) READONLY nameLegalEntity
    PROPERTIES(a, cc) inAgreementSupplier BACKGROUND backgroundInAgreementSupplier(a, cc)
    FILTERS isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(cc), f)
    FILTERGROUP ccinactiveLegalEntity FILTER 'Активная' activeLegalEntity(cc) 'shift F10' DEFAULT
    FILTERGROUP ccfilters
        FILTER 'Только отмеченные' inAgreementSupplier (a, cc) 'F9'

    TREE customerGroupTree lg = LegalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY lgTreeName = nameLegalEntityGroup(lg)
    PROPERTIES(a, lg) inAgreementCustomerGroup BACKGROUND backgroundInAgreementCustomerGroup(a, lg)

    OBJECTS c = LegalEntity
    PROPERTIES(c) READONLY nameLegalEntity
    PROPERTIES(a, c) inAgreementCustomer BACKGROUND backgroundInAgreementCustomer(a, c)
    FILTERS isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(c), lg)
    FILTERGROUP cinactiveLegalEntity FILTER 'Активная' activeLegalEntity(c) 'shift F10' DEFAULT
    FILTERGROUP cfilters
        FILTER 'Только отмеченные' inAgreementCustomer (a, c) 'F10'
    TREE groupTree g=Group PARENT parentGroup
    PROPERTIES READONLY orderGroup(g), nameGroup(g)
    FILTERS groupTypeGroup(g) == groupTypeAgreement(a)
    ORDER BY orderGroup(g), nameGroup(g)
    FILTERGROUP ginactive FILTER 'Активные' activeGroup(g) 'F5' DEFAULT
    PROPERTIES(a, g) nameDataPriceListTypeAgreementGroup, namePriceListTypeAgreementGroup, inAgreementGroup BACKGROUND backgroundInAgreementGroup(a, g)

    TREE skuGroupTree sg=SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sg), nameSkuGroup(sg)
    ORDER BY orderSkuGroup(sg), nameSkuGroup(sg)
    FILTERGROUP sginactive FILTER 'Активные' activeSkuGroup(sg) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(a, s) nameDataPriceListTypeAgreementSku, namePriceListTypeAgreementSku
    FILTERS isParentSkuGroupSku(sg, s)

    EDIT Agreement OBJECT a
;

DESIGN agreement FROM DEFAULT {

    NEW headContainer {
        caption = 'Шапка документа';
        type = CONTAINERH;
        ADD PROPERTY (nameAgreement(a));
        ADD PROPERTY (idAgreement(a));
        ADD PROPERTY (nameNumeratorAgreement(a));
        ADD PROPERTY (numberAgreement(a));
        ADD PROPERTY (seriesAgreement(a));
        ADD PROPERTY (dateAgreement(a));
        ADD PROPERTY (timeAgreement(a));
    }
    NEW firstContainer{
        type = CONTAINERH;
        NEW timeContainer{
            caption = 'Период действия';
            type = CONTAINERH;
            ADD PROPERTY (fromDateAgreement(a));
            ADD PROPERTY (fromTimeAgreement(a));
            ADD PROPERTY (toDateAgreement(a));
            ADD PROPERTY (toTimeAgreement(a));
        }
    }
    NEW propContainer{
        caption = 'Параметры документа';
        type = COLUMNS;
        columns = 2;
        ADD PROPERTY(nameCurrencyAgreement(a));
        ADD PROPERTY(namePriceListTypeAgreement(a));
        ADD PROPERTY(descriptionPaymentConditionAgreement(a));
        ADD PROPERTY(noteAgreement(a));
    }
    NEW orderContainer {
        caption = 'Заказ';
        type = CONTAINERV;
        NEW orderContainer1 {
            type = CONTAINERH;
        }
    }
    NEW tabContainer {
        fill = 1;
        type = TABBED;
        NEW supplierBox{
            fill = 1;
            caption = 'Поставщики';
            type = SPLITH;
            ADD supplierGroupTree.tree.box {caption = 'Группы организаций';}
            ADD cc.box {
                fill = 3;
            }
        }
        NEW customerBox{
            fill = 1;
            caption = 'Покупатели';
            type = SPLITH;
            ADD customerGroupTree.tree.box {caption = 'Группы организаций';}
            ADD c.box {
                fill = 3;
            }
        }
        NEW groupPane {
            caption = 'Уточнение цен по группам';
            ADD PROPERTY(nameGroupTypeAgreement(a));
            ADD groupTree.tree.box {caption = 'Группы товаров';}
        }
        NEW skuContainer{
            fill = 1;
            caption = 'Уточнение цен по товарам';
            type = SPLITH;
            ADD skuGroupTree.tree.box {caption = 'Группы товаров';}
            ADD s.box {
                fill = 3;
            }
        }
    }
    ADD functions.box;
}

FORM agreements 'Соглашения'

    OBJECTS a = Agreement
    PROPERTIES(a) READONLY nameAgreement, seriesNumberAgreement, dateTimeAgreement,
                           fromDateTimeAgreement, toDateTimeAgreement,
                           nameCurrencyAgreement, namePriceListTypeAgreement, customerAgreement, supplierAgreement, noteAgreement

    PROPERTIES(a) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    DIALOG Agreement OBJECT a
;

NAVIGATOR {
    priceListDocuments {
        ADD agreements;
    }
}

WHEN SESSION FORMS agreement 
    SET(a IS Agreement) OR  SET(countSuppliersAgreement(a)) DO {
        currencyAgreement (a) <- currencyLegalEntity(defaultSupplierAgreement(a));
    }        
        
// ---------------------------------------------- Копирование соглащений --------------------------------------- //

overCopyAgreement = ABSTRACT ACTION LIST (Agreement, Agreement);

copyDataAgreement = ACTION (s, d) {
    dateAgreement(d) <- dateAgreement(s);
    timeAgreement(d) <- timeAgreement(s);
    fromDateAgreement(d) <- fromDateAgreement(s);
    fromTimeAgreement(d) <- fromTimeAgreement(s);
    toDateAgreement(d) <- toDateAgreement(s);
    toTimeAgreement(d) <- toTimeAgreement(s);

    currencyAgreement(d) <- currencyAgreement(s);
    priceListTypeAgreement(d) <- priceListTypeAgreement(s);
    noteAgreement(d) <- noteAgreement(s);
    groupTypeAgreement(d) <- groupTypeAgreement(s);

    dataInAgreementCustomer(d, customer) <- dataInAgreementCustomer (s, customer);
    dataInAgreementCustomerGroup(d, legalEntityGroup) <- dataInAgreementCustomerGroup(s, legalEntityGroup);

    dataInAgreementSupplier(d, customer) <- dataInAgreementSupplier (s, customer);
    dataInAgreementSupplierGroup(d, legalEntityGroup) <- dataInAgreementSupplierGroup(s, legalEntityGroup);

    dataPriceListTypeAgreementGroup(d, group) <- dataPriceListTypeAgreementGroup(s, group);
    dataPriceListTypeAgreementSku(d, sku) <- dataPriceListTypeAgreementSku(s, sku);
    
    overCopyAgreement(s, d);
}

copyAgreement 'Копировать' = ACTION (agreement) NEWSESSION {
    FOR ADDOBJ a = Agreement DO {
        copyDataAgreement(agreement, a);

        FORM agreement OBJECTS a = a MANAGESESSION DOCKEDMODAL;
    };
} TOOLBAR;

copySessionAgreement 'Копировать' = ACTION (agreement) NESTEDSESSION {
    FOR ADDOBJ a = Agreement DO {
        copyDataAgreement(agreement, a);
        FORM agreement OBJECTS a = a MANAGESESSION DOCKEDMODAL;
    };
} TOOLBAR;

EXTEND FORM agreements
    PROPERTIES(a) copyAgreement
;

// ---------------------------------------------- Расширение формы организации --------------------------------- //

inAgreement 'Присоединить' = DATA LOCAL BOOLEAN (Agreement);

FORM agreementsCustomer 'Соглашения'

    OBJECTS s=LegalEntity FIXED PANEL
    PROPERTIES(s) nameLegalEntity

    OBJECTS c=LegalEntity FIXED PANEL
    PROPERTIES(c) nameLegalEntity

    OBJECTS ag=Agreement
    PROPERTIES(ag) READONLY nameAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    PROPERTIES inAgreement(ag)
;

DESIGN agreementsCustomer FROM DEFAULT{
    NEW mainContainer{
        REMOVE s.box;
        REMOVE c.box;
        ADD ag.box;
    }
    ADD functions.box;
}

addAgreementsSupplierCustomer 'Присоединить' = ACTION (supplier, customer) {

    FORM agreementsCustomer OBJECTS s=supplier, c=customer MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR inAgreement(agreement) DO {
            ASSIGN dataInAgreementSupplier(agreement,supplier) <- TRUE;
            ASSIGN dataInAgreementCustomer(agreement,customer) <- TRUE;
        }
    }
} TOOLBAR;


addAgreementsCustomerSupplier 'Присоединить' = ACTION (customer, supplier) {

    FORM agreementsCustomer OBJECTS s=supplier, c=customer MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR inAgreement(agreement) DO {
            dataInAgreementSupplier(agreement,supplier) <- TRUE;
            dataInAgreementCustomer(agreement,customer) <- TRUE;
        }
    }
} TOOLBAR;


createAgreementSupplierCustomer 'Добавить' = ACTION (supplier, customer) NESTEDSESSION{
    FOR ADDOBJ ag = Agreement DO {
        dataInAgreementCustomer(ag, customer) <- TRUE;
        dataInAgreementSupplier(ag, supplier) <- TRUE;
        FORM agreement OBJECTS a = ag MANAGESESSION DOCKEDMODAL;
    }
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS ags=Agreement FIXED GRID
    PROPERTIES(ags, s, l) SHOWIF isCustomerLegalEntity(l) isDefaultAgreementSupplierCustomer
    PROPERTIES(ags, l) SHOWIF isCustomerLegalEntity(l) inAgreementCustomer
    PROPERTIES(ags) SHOWIF isCustomerLegalEntity(l) READONLY nameAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                             fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                             nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    PROPERTIES(ags) SHOWIF isCustomerLegalEntity(l) DELETESESSION, EDITNESTEDFORM, copySessionAgreement
    PROPERTIES SHOWIF isCustomerLegalEntity(l) createAgreementSupplierCustomer(s, l) TODRAW ags FORCE PANEL TOOLBAR, addAgreementsSupplierCustomer(s, l) TODRAW ags FORCE PANEL TOOLBAR
    FILTERS inAgreementCustomer(ags, l) AND inAgreementSupplier(ags, s),
            isSellerLegalEntity(s),
            l != s

//    FILTERGROUP filtersSupplier
//        FILTER 'Есть соглашение' 'F11' countAgreementSupplierCustomer(s, l)

    OBJECTS agc=Agreement FIXED  GRID 
    PROPERTIES(agc, c) SHOWIF isSupplierLegalEntity(l) READONLY inAgreementCustomer
    PROPERTIES(agc, l, c) SHOWIF isSupplierLegalEntity(l) isDefaultAgreementSupplierCustomer
    PROPERTIES(agc) SHOWIF isSupplierLegalEntity(l) READONLY nameAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                             fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                             nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES(agc) SHOWIF isSupplierLegalEntity(l) DELETESESSION, EDITNESTEDFORM, copySessionAgreement

    PROPERTIES SHOWIF isSupplierLegalEntity(l) createAgreementSupplierCustomer(l, c) TODRAW agc FORCE PANEL TOOLBAR, addAgreementsCustomerSupplier (c,l) TODRAW agc FORCE PANEL TOOLBAR
    FILTERS inAgreementCustomer(agc, c) AND inAgreementSupplier(agc, l),
            isBuyerLegalEntity(c),
            c != l

//    FILTERGROUP filters3
//        FILTER 'Есть соглашение' 'F9' countAgreementSupplierCustomer(l, c)

;

EXTEND DESIGN legalEntity {
    extendContainer {
        docPurchaseContainer{
            ADD ags.box;
        }

        docSaleContainer{
            ADD agc.box;
        }
    }
}

// ----------------------------------------- Метакод по добавлению соглашений в документы -------------------------------------- //

META defineDocumentAbstractHeaderAgreement (object)
    agreement###object (object) = ABSTRACT Agreement (###object) PERSISTENT;
    nameAgreement###object 'Соглашение' (object)= nameAgreement(agreement###object(object)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentHeaderAgreement (object)
    agreement###object (object) = DATA Agreement (###object);
    nameAgreement###object 'Соглашение' (object)= nameAgreement(agreement###object(object)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderAgreement (object)
    @defineDocumentAbstractHeaderAgreement(object);
    @defineDocumentHeaderAgreement(user###object);
    agreement###object(object) += agreement###user###object(object);

END

META deriveDocumentHeaderAgreement (object, supplierProp, customerProp)

    defaultAgreement###object = ABSTRACT Agreement (###object);
    changedDefaultAgreement###object = ABSTRACT Object (###object);
    overDefaultAgreement###object = OVERRIDE
        defaultAgreementSupplierCustomerDateTime(supplierProp###object(o), customerProp###object(o), dateTime###object(o)) 
            IF currency###object(o) == currencyAgreement(defaultAgreementSupplierCustomerDateTime(supplierProp###object(o), customerProp###object(o), dateTime###object(o))), 
        defaultAgreement###object(o);
    WHEN SESSION
        CHANGED(currency###object(o)) OR
                 CHANGED(customerProp###object(o)) OR
                 CHANGED(supplierProp###object(o)) OR 
                 CHANGED(changedDefaultAgreement###object(o)) DO
        agreement###object (o) <- overDefaultAgreement###object(o);

    CONSTRAINT currency###object(o) != currencyAgreement(agreement###object(o))
               CHECKED BY agreement###object
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT agreement###object(o) AND NOT inAgreementSupplier(agreement###object(o), supplierProp###object(o))
               CHECKED BY agreement###object
               MESSAGE 'Соглашение должно быть между заданными организациями (поставщик)';

    CONSTRAINT agreement###object(object)
               AND NOT inAgreementCustomer(agreement###object(object), customerProp###object(object))
               CHECKED BY agreement###object
               MESSAGE 'Соглашение должно быть между заданными организациями (покупатель)';
               
    CONSTRAINT agreement###object(o) AND NOT (fromDateTimeAgreement(agreement###object(o)) <= dateTime###object(o) AND NOT (toDateTimeAgreement(agreement###object(o)) < dateTime###object(o)))
               CHECKED BY agreement###object
               MESSAGE 'Соглашение просрочено';
               
END

META defineDocumentDetailAgreement (object, detail)
    agreement###detail (detail) = agreement###object(object###detail(detail));
END

META defineDocumentInterfaceAgreement (object)
    @defineDocumentInterfaceHeaderAgreement(object);
    @defineDocumentDetailAgreement(object, object##Detail);
END


META deriveDocumentDetailPriceListTypeAgreement (object, detail)
    WHEN SESSION
        (CHANGED(agreement###object(object###detail(d))) OR
         CHANGED(priceListType###object(object###detail(d))) OR
         CHANGED(sku###detail(d))) AND NOT CHANGED(priceListType###detail(d)) DO {
            priceListType###detail(d) <- IF agreement###object(object###detail(d))
                                         THEN priceListTypeAgreementSku(agreement###object(object###detail(d)), sku###detail(d))
                                         ELSE priceListType###object(object###detail(d));
        }
END
META deriveDocumentDetailPriceListTypeAgreement (object)
    @deriveDocumentDetailPriceListTypeAgreement(object, object###detail);
END

//--------------------------------------- Для двух объектов (object1 - документ)----------------------------------------------------------//
META defineDocumentHeaderAgreement (object1, object2)
    agreement###object1###object2 (object1, object2) = DATA Agreement (###object1, ###object2);
    nameAgreement###object1###object2 'Соглашение' (object1, object2)= nameAgreement(agreement###object1###object2 (object1, object2)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
    defaultPriceListType###object1###object2 (object1, object2) = priceListTypeAgreement(agreement###object1###object2 (object1, object2));
END

META defineDocumentInterfaceHeaderAgreement(object1Class, object2Class, supplierProp, customerProp)
    @defineDocumentHeaderAgreement(object1Class, object2Class);
    agreement###object1Class###object2Class (o1, o2) <- agreement###object1Class(o1)
        IF currency###object1Class(o1) == currencyAgreement(agreement###object1Class(o1))
        AND in###object1Class###object2Class(o1, o2)
    WHEN CHANGED(currency###object1Class(o1)) AND o2 IS object2Class OR
         CHANGED(agreement###object1Class(o1)) AND o2 IS object2Class OR
         CHANGED(in###object1Class###object2Class(o1, o2));

    CONSTRAINT currency###object1Class(o1) != currencyAgreement(agreement###object1Class###object2Class(o1, o2))
               CHECKED BY agreement###object1Class###object2Class
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT agreement###object1Class###object2Class(o1, o2)
               AND NOT inAgreementSupplier(agreement###object1Class###object2Class(o1, o2), supplierProp###object1Class(o1))
               CHECKED BY agreement###object1Class###object2Class
               MESSAGE 'Соглашение должно быть между заданными организациями (поставщик)';

    CONSTRAINT agreement###object1Class###object2Class(o1, o2)
               AND NOT inAgreementCustomer(agreement###object1Class###object2Class(o1, o2), customerProp###object1Class(o1))
               CHECKED BY agreement###object1Class###object2Class
               MESSAGE 'Соглашение должно быть между заданными организациями (покупатель)';
END
