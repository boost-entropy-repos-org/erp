MODULE Agreement;

REQUIRE Currency,
        Document,
        LegalEntity,
        Numerator,
        PriceListType,
        PaymentCondition;

CLASS Agreement 'Соглашение';
TABLE agreement (Agreement);

nameAgreement 'Наименование' = DATA VARISTRING[50](Agreement) IN recognize;

@defineNumbered(Agreement);

@defineNumeratedDefault(Agreement, 'Соглашения', 'ТД');

@defineDocumentHeaderTime(Agreement);
@deriveDocumentHeaderTimePrefix(Agreement, );

@defineDocumentHeaderTimePrefix(Agreement, from, ' с');
@deriveDocumentHeaderTimePrefix(Agreement, from);

@defineDocumentHeaderTimePrefix(Agreement, to, ' по');
//toDateAgreement 'Дата по' = DATA DATE(Agreement);
//toTimeAgreement 'Время по' = DATA TIME(Agreement);
//toDateTimeAgreement 'Дата/время по'(agreement) = dateTimeToDateTime(toDateAgreement(agreement), toTimeAgreement(agreement));

@defineDocumentHeaderNote(Agreement);
@defineDocumentHeaderCurrency(agreement);
@defineDocumentHeaderDescription(Agreement, 'Соглашение');

// -------------------------------------- Поставщики -------------------------------- //

// Группы поставщиков
TABLE agreementLegalEntityGroup (Agreement, LegalEntityGroup);
dataInAgreementSupplierGroup 'Отм' = DATA BOOLEAN (Agreement, LegalEntityGroup);

levelParentAgreementSupplierGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF dataInAgreementSupplierGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntitySupplierGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementSupplierGroup(agreement, legalEntityGroup));
nearestInAgreementSupplierGroup (agreement, legalEntityGroup) =
    dataInAgreementSupplierGroup(agreement, nearestParentLegalEntitySupplierGroup(agreement, legalEntityGroup)) PERSISTENT;

inAgreementSupplierGroup 'Отм' (agreement, legalEntityGroup) = OVERRIDE nearestInAgreementSupplierGroup(agreement, legalEntityGroup),
                                                                        dataInAgreementSupplierGroup(agreement, legalEntityGroup);

// Поставщики
TABLE agreementLegalEntity(Agreement, LegalEntity);
dataInAgreementSupplier 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (Agreement, LegalEntity);

inAgreementSupplier 'Отм' (agreement, legalEntity) = OVERRIDE nearestInAgreementSupplierGroup(agreement, legalEntityGroupLegalEntity(legalEntity)),
                                                           dataInAgreementSupplier(agreement, legalEntity);

supplierAgreement 'Поставщики' (agreement) = GROUP CONCAT nameLegalEntity(supplier) IF inAgreementSupplier(agreement, supplier) , ', '
                                                 BY agreement
                                                 ORDER supplier MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

CONSTRAINT inAgreementSupplier(agreement, supplier) AND NOT isSellerLegalEntity(supplier)
    MESSAGE 'Для соглашения выбрано в качестве поставщика организация, не являющеяся поставщиком или компанией';

// -------------------------------------- Покупатели -------------------------------- //

// Группы покупателей
dataInAgreementCustomerGroup 'Отм' = DATA BOOLEAN (Agreement, LegalEntityGroup);

levelParentAgreementCustomerGroup (agreement, legalEntityGroup) =
    GROUP MIN levelLegalEntityGroupLegalEntityGroup(legalEntityGroup, parent) IF dataInAgreementCustomerGroup(agreement, parent)
          BY agreement, legalEntityGroup PERSISTENT;
nearestParentLegalEntityCustomerGroup (agreement, legalEntityGroup) =
    legalEntityGroupLegalEntityGroupLevel(legalEntityGroup, levelParentAgreementCustomerGroup(agreement, legalEntityGroup));
nearestInAgreementCustomerGroup (agreement, legalEntityGroup) =
    dataInAgreementCustomerGroup(agreement, nearestParentLegalEntityCustomerGroup(agreement, legalEntityGroup));

inAgreementCustomerGroup 'Отм' (agreement, legalEntityGroup) = OVERRIDE nearestInAgreementCustomerGroup(agreement, legalEntityGroup),
                                                                        dataInAgreementCustomerGroup(agreement, legalEntityGroup);

// Покупатели
dataInAgreementCustomer 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (Agreement, LegalEntity);

inAgreementCustomer 'Отм' (agreement, legalEntity) = OVERRIDE nearestInAgreementCustomerGroup(agreement, legalEntityGroupLegalEntity(legalEntity)),
                                                           dataInAgreementCustomer(agreement, legalEntity)
                                                  PERSISTENT;

customerAgreement 'Покупатели' (agreement) = GROUP CONCAT nameLegalEntity(customer) IF inAgreementCustomer(agreement, customer) , ', '
                                                 BY agreement
                                                 ORDER customer MINCHARWIDTH 30 PREFCHARWIDTH 50 PERSISTENT;

CONSTRAINT inAgreementCustomer(agreement, customer) AND NOT isBuyerLegalEntity(customer)
    MESSAGE 'Для соглашения выбрано в качестве покупателя организация, не являющеяся покупателем или компанией';

// ----------------------------------------------- Соглашение по умолчанию --------------------------- //

countAgreementSupplierCustomer 'Кол-во соглашений' (supplier, customer)= GROUP SUM 1 IF inAgreementCustomer(agreement, customer) AND inAgreementSupplier(agreement, supplier)
    BY supplier, customer;

userDefaultAgreementSupplierCustomer = DATA Agreement (LegalEntity, LegalEntity);
userDefaultAgreementSupplierCustomer(supplier, customer) => inAgreementCustomer(userDefaultAgreementSupplierCustomer(supplier, customer), customer) RESOLVE FALSE;

calcDefaultAgreementSupplierCustomer(supplier, customer) =
    GROUP MAX agreement IF inAgreementCustomer(agreement, customer) AND inAgreementSupplier(agreement, supplier)
    BY supplier, customer PERSISTENT;

defaultAgreementSupplierCustomer(supplier, customer) =  OVERRIDE calcDefaultAgreementSupplierCustomer(supplier, customer),
                                                                 userDefaultAgreementSupplierCustomer(supplier, customer)
                                                        PERSISTENT;
nameDefaultAgreementSupplierCustomer 'Соглашение по умолчанию' (supplier, customer) = nameAgreement(defaultAgreementSupplierCustomer(supplier, customer));

isDefaultAgreementSupplierCustomer 'Соглашение по умолчанию' (agreement, supplier, customer) = defaultAgreementSupplierCustomer(supplier, customer) == agreement;

// ----------------------------------------------- Виды цен --------------------------------- //

// -- Основной вид цены
priceListTypeAgreement 'Вид цены' (agreement) = DATA PriceListType (Agreement);
namePriceListTypeAgreement 'Вид цены' (agreement) = namePriceListType(priceListTypeAgreement(agreement));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(priceListTypeAgreement(agreement))
           CHECKED BY priceListTypeAgreement
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

// Уточнение по группам
groupTypeAgreement = DATA GroupType (Agreement);
nameGroupTypeAgreement 'Тип классификатора' (agreement) = nameGroupType(groupTypeAgreement(agreement));

TABLE agreementGroup(Agreement, Group);
dataPriceListTypeAgreementGroup (agreement, group) = DATA PriceListType (Agreement, Group);
nameDataPriceListTypeAgreementGroup 'Вид цены (перегруженный)' (agreement, group) = namePriceListType(dataPriceListTypeAgreementGroup(agreement, group));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(dataPriceListTypeAgreementGroup(agreement, group))
           CHECKED BY dataPriceListTypeAgreementGroup
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

levelParentPriceListTypeAgreementGroup (agreement, group) =
    GROUP MIN levelGroupGroup(group, parent) IF dataPriceListTypeAgreementGroup(agreement, parent)
    BY agreement, group PERSISTENT;
nearestParentGroup (agreement, group) = groupGroupLevel(group, levelParentPriceListTypeAgreementGroup (agreement, group));
nearestPriceListTypeAgreementGroup (agreement, group) =
   dataPriceListTypeAgreementGroup(agreement, nearestParentGroup(agreement, group)) PERSISTENT;

priceListTypeAgreementGroup 'Вид цены' (agreement, group) =  OVERRIDE nearestPriceListTypeAgreementGroup(agreement, group), dataPriceListTypeAgreementGroup(agreement, group) PERSISTENT;
namePriceListTypeAgreementGroup 'Вид цены' (agreement, group) =
    namePriceListType(priceListTypeAgreementGroup (agreement, group));

// Уточнение по sku
TABLE agreementSku(Agreement, Sku);
dataPriceListTypeAgreementSku (agreement, sku) = DATA PriceListType (Agreement, Sku);
nameDataPriceListTypeAgreementSku 'Вид цены (перегруженный)' (agreement, sku) = namePriceListType(dataPriceListTypeAgreementSku(agreement, sku));

CONSTRAINT currencyAgreement(agreement) != currencyPriceListType(dataPriceListTypeAgreementSku(agreement, sku))
           CHECKED BY dataPriceListTypeAgreementSku
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

priceListTypeAgreementSku (agreement, sku) = OVERRIDE priceListTypeAgreement(agreement) IF sku IS Sku,
                                                      priceListTypeAgreementGroup(agreement, groupGroupTypeSku(groupTypeAgreement(agreement),sku)),
                                                      dataPriceListTypeAgreementSku(agreement, sku);

namePriceListTypeAgreementSku 'Вид цены' = namePriceListType(priceListTypeAgreementSku(agreement, sku));

// ------------------------------------------- Условия оплаты ------------------------------------- //

paymentConditionAgreement 'Условия оплаты' =  DATA PaymentCondition (Agreement);
typePaymentAgreement 'Тип оплаты' (agreement) = typePaymentCondition(paymentConditionAgreement(agreement));
descriptionPaymentConditionAgreement 'Условия оплаты' (agreement) = descriptionPaymentCondition(paymentConditionAgreement(agreement));

// ------------------------------------------- Формы ---------------------------------------------- //

FORM agreement 'Соглашение'

    OBJECTS a = Agreement FIXED PANEL
    PROPERTIES(a) nameAgreement, nameNumeratorAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                  fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                  nameCurrencyAgreement, namePriceListTypeAgreement, descriptionPaymentConditionAgreement, nameGroupTypeAgreement, noteAgreement

    TREE supplierGroupTree f = LegalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY fTreeName = nameLegalEntityGroup(f)
    PROPERTIES(a, f) inAgreementSupplierGroup

    OBJECTS cc = LegalEntity
    PROPERTIES(cc) READONLY nameLegalEntity
    PROPERTIES(a, cc) inAgreementSupplier
    FILTERS isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(cc), f)
    FILTERGROUP ccinactiveLegalEntity FILTER 'Активная' 'shift F10' activeLegalEntity(cc) DEFAULT
    FILTERGROUP ccfilters
        FILTER 'Только отмеченные' 'F9' inAgreementSupplier (a, cc)

    TREE customerGroupTree lg = LegalEntityGroup PARENT parentLegalEntityGroup
    PROPERTIES READONLY lgTreeName = nameLegalEntityGroup(lg)
    PROPERTIES(a, lg) inAgreementCustomerGroup

    OBJECTS c = LegalEntity
    PROPERTIES(c) READONLY nameLegalEntity
    PROPERTIES(a, c) inAgreementCustomer
    FILTERS isParentLegalEntityGroupLegalEntityGroup(legalEntityGroupLegalEntity(c), lg)
    FILTERGROUP cinactiveLegalEntity FILTER 'Активная' 'shift F10' activeLegalEntity(c) DEFAULT
    FILTERGROUP cfilters
        FILTER 'Только отмеченные' 'F10' inAgreementCustomer (a, c)
    TREE groupTree g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    FILTERS groupTypeGroup(g) == groupTypeAgreement(a)
    ORDER BY nameGroup(g)
    FILTERGROUP ginactive FILTER 'Активные' 'F5' activeGroup(g) DEFAULT
    PROPERTIES(a, g) nameDataPriceListTypeAgreementGroup, namePriceListTypeAgreementGroup

    TREE skuGroupTree sg=SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY nameSkuGroup(sg)
    ORDER BY nameSkuGroup(sg)
    FILTERGROUP sginactive FILTER 'Активные' 'F5' activeSkuGroup(sg) DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku
    PROPERTIES(a, s) nameDataPriceListTypeAgreementSku, namePriceListTypeAgreementSku
    FILTERS isParentSkuGroupSku(sg, s)

    EDIT Agreement OBJECT a
;

DESIGN agreement FROM DEFAULT {

    NEW headContainer {
        caption = 'Шапка документа';
        type = CONTAINERH;
        ADD PROPERTY (nameAgreement(a));
        ADD PROPERTY (nameNumeratorAgreement(a));
        ADD PROPERTY (numberAgreement(a));
        ADD PROPERTY (seriesAgreement(a));
        ADD PROPERTY (dateAgreement(a));
        ADD PROPERTY (timeAgreement(a));

    }
    NEW firstContainer{
        type = CONTAINERH;
        NEW timeContainer{
            caption = 'Период действия';
            type = CONTAINERH;
            ADD PROPERTY (fromDateAgreement(a));
            ADD PROPERTY (fromTimeAgreement(a));
            ADD PROPERTY (toDateAgreement(a));
            ADD PROPERTY (toTimeAgreement(a));
        }
    }
    NEW propContainer{
        caption = 'Параметры документа';
        type = COLUMNS;
        columns = 2;
        ADD PROPERTY(nameCurrencyAgreement(a));
        ADD PROPERTY(namePriceListTypeAgreement(a));
        ADD PROPERTY(descriptionPaymentConditionAgreement(a));
        ADD PROPERTY(noteAgreement(a));
    }
    NEW tabContainer {
        fill = 1;
        type = TABBED;
        NEW supplierBox{
            fill = 1;
            caption = 'Поставщики';
            type = SPLITH;
            ADD supplierGroupTree.tree.box;
            ADD cc.box {
                fill = 3;
            }
        }
        NEW customerBox{
            fill = 1;
            caption = 'Покупатели';
            type = SPLITH;
            ADD customerGroupTree.tree.box;
            ADD c.box {
                fill = 3;
            }
        }
        NEW groupPane {
            caption = 'Уточнение цен по ценовым группам';
            ADD PROPERTY(nameGroupTypeAgreement(a));
            ADD groupTree.tree.box;
        }
        NEW skuContainer{
            fill = 1;
            caption = 'Уточнение цен по товарам';
            type = SPLITH;
            ADD skuGroupTree.tree.box;
            ADD s.box {
                fill = 3;
            }
        }
    }
    ADD functions.box;
}

FORM agreements 'Соглашения'

    OBJECTS a = Agreement
    PROPERTIES(a) READONLY nameAgreement, seriesNumberAgreement, dateTimeAgreement,
                           fromDateTimeAgreement, toDateTimeAgreement,
                           nameCurrencyAgreement, namePriceListTypeAgreement, customerAgreement, supplierAgreement, noteAgreement

    PROPERTIES(a) ADDFORM, EDITFORM, DELETE FORCE PANEL TOOLBAR

    DIALOG Agreement OBJECT a
;

NAVIGATOR {
    priceListDocuments {
        ADD agreements;
    }
}

// ---------------------------------------------- Копирование соглащений --------------------------------------- //

overCopyAgreement = ABSTRACT ACTION LIST (Agreement, Agreement);

copyDataAgreement = ACTION (s, d) {
    dateAgreement(d) <- dateAgreement(s);
    timeAgreement(d) <- timeAgreement(s);
    fromDateAgreement(d) <- fromDateAgreement(s);
    fromTimeAgreement(d) <- fromTimeAgreement(s);
    toDateAgreement(d) <- toDateAgreement(s);
    toTimeAgreement(d) <- toTimeAgreement(s);

    currencyAgreement(d) <- currencyAgreement(s);
    priceListTypeAgreement(d) <- priceListTypeAgreement(s);
    noteAgreement(d) <- noteAgreement(s);
    groupTypeAgreement(d) <- groupTypeAgreement(s);

    dataInAgreementCustomer(d, customer) <- dataInAgreementCustomer (s, customer);
    dataInAgreementCustomerGroup(d, legalEntityGroup) <- dataInAgreementCustomerGroup(s, legalEntityGroup);

    dataInAgreementSupplier(d, customer) <- dataInAgreementSupplier (s, customer);
    dataInAgreementSupplierGroup(d, legalEntityGroup) <- dataInAgreementSupplierGroup(s, legalEntityGroup);

    dataPriceListTypeAgreementGroup(d, group) <- dataPriceListTypeAgreementGroup(s, group);
    dataPriceListTypeAgreementSku(d, sku) <- dataPriceListTypeAgreementSku(s, sku);
    
    overCopyAgreement(s, d);
}

copyAgreement 'Копировать' = ACTION (agreement) NEWSESSION {
    FOR ADDOBJ a = Agreement DO {
        copyDataAgreement(agreement, a);

        FORM agreement OBJECTS a = a MANAGESESSION DOCKEDMODAL;
    };
} TOOLBAR;

copySessionAgreement 'Копировать' = ACTION (agreement) NEWSESSION NESTED{
    FOR ADDOBJ a = Agreement DO {
        copyDataAgreement(agreement, a);
        FORM agreement OBJECTS a = a MANAGESESSION DOCKEDMODAL;
    };
} TOOLBAR;

EXTEND FORM agreements
    PROPERTIES(a) copyAgreement
;

// ---------------------------------------------- Расширение формы организации --------------------------------- //

inAgreement 'Присоединить' = DATA SESSION BOOLEAN (Agreement);

FORM agreementsCustomer 'Соглашения'

    OBJECTS s=LegalEntity FIXED PANEL
    PROPERTIES(s) nameLegalEntity

    OBJECTS c=LegalEntity FIXED PANEL
    PROPERTIES(c) nameLegalEntity

    OBJECTS ag=Agreement
    PROPERTIES(ag) READONLY nameAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    PROPERTIES inAgreement(ag)
;

DESIGN agreementsCustomer FROM DEFAULT{
    NEW mainContainer{
        REMOVE s.box;
        REMOVE c.box;
        ADD ag.box;
    }
    ADD functions.box;
}

addAgreementsSupplierCustomer 'Присоединить' = ACTION (supplier, customer) {

    FORM agreementsCustomer OBJECTS s=supplier, c=customer MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR inAgreement(agreement) DO {
            ASSIGN dataInAgreementSupplier(agreement,supplier) <- TRUE;
            ASSIGN dataInAgreementCustomer(agreement,customer) <- TRUE;
        }
    }
} TOOLBAR;


addAgreementsCustomerSupplier 'Присоединить' = ACTION (customer, supplier) {

    FORM agreementsCustomer OBJECTS s=supplier, c=customer MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR inAgreement(agreement) DO {
            dataInAgreementSupplier(agreement,supplier) <- TRUE;
            dataInAgreementCustomer(agreement,customer) <- TRUE;
        }
    }
} TOOLBAR;


createAgreementSupplierCustomer 'Добавить' = ACTION (supplier, customer) NEWSESSION NESTED{
    FOR ADDOBJ ag = Agreement DO {
        dataInAgreementCustomer(ag, customer) <- TRUE;
        dataInAgreementSupplier(ag, supplier) <- TRUE;
        FORM agreement OBJECTS a = ag MANAGESESSION DOCKEDMODAL;
    }
} IMAGE 'add.png' EDITKEY 'INSERT' HIDE TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS ags=Agreement FIXED GRID
    PROPERTIES(ags, s, l) SHOWIF isCustomerLegalEntity(l) isDefaultAgreementSupplierCustomer
    PROPERTIES(ags, l) SHOWIF isCustomerLegalEntity(l) inAgreementCustomer
    PROPERTIES(ags) SHOWIF isCustomerLegalEntity(l) READONLY nameAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                             fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                             nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement

    PROPERTIES(ags) SHOWIF isCustomerLegalEntity(l) DELETESESSION, EDITNESTEDFORM, copySessionAgreement
    PROPERTIES SHOWIF isCustomerLegalEntity(l) createAgreementSupplierCustomer(s, l) TODRAW ags FORCE PANEL TOOLBAR, addAgreementsSupplierCustomer(s, l) TODRAW ags FORCE PANEL TOOLBAR
    FILTERS inAgreementCustomer(ags, l) AND inAgreementSupplier(ags, s),
            isSellerLegalEntity(s),
            l != s

//    FILTERGROUP filtersSupplier
//        FILTER 'Есть соглашение' 'F11' countAgreementSupplierCustomer(s, l)

    OBJECTS agc=Agreement FIXED  GRID 
    PROPERTIES(agc, c) SHOWIF isSupplierLegalEntity(l) READONLY inAgreementCustomer
    PROPERTIES(agc, l, c) SHOWIF isSupplierLegalEntity(l) isDefaultAgreementSupplierCustomer
    PROPERTIES(agc) SHOWIF isSupplierLegalEntity(l) READONLY nameAgreement, numberAgreement, seriesAgreement, dateAgreement, timeAgreement,
                             fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                             nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES(agc) SHOWIF isSupplierLegalEntity(l) DELETESESSION, EDITNESTEDFORM, copySessionAgreement

    PROPERTIES SHOWIF isSupplierLegalEntity(l) createAgreementSupplierCustomer(l, c) TODRAW agc FORCE PANEL TOOLBAR, addAgreementsCustomerSupplier (c,l) TODRAW agc FORCE PANEL TOOLBAR
    FILTERS inAgreementCustomer(agc, c) AND inAgreementSupplier(agc, l),
            isBuyerLegalEntity(c),
            c != l

//    FILTERGROUP filters3
//        FILTER 'Есть соглашение' 'F9' countAgreementSupplierCustomer(l, c)

;

EXTEND DESIGN legalEntity {
    extendContainer {
        docPurchaseContainer{
            ADD ags.box;
        }

        docSaleContainer{
            ADD agc.box;
        }
    }
}

// ----------------------------------------- Метакод по добавлению соглашений в документы -------------------------------------- //

META defineDocumentAbstractHeaderAgreement (object)
    agreement###object (object) = ABSTRACT Agreement (###object) PERSISTENT;
    nameAgreement###object 'Соглашение' (object)= nameAgreement(agreement###object(object)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentHeaderAgreement (object)
    agreement###object (object) = DATA Agreement (###object);
    nameAgreement###object 'Соглашение' (object)= nameAgreement(agreement###object(object)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
END
META defineDocumentInterfaceHeaderAgreement (object)
    @defineDocumentAbstractHeaderAgreement(object);
    @defineDocumentHeaderAgreement(user###object);
    agreement###object(object) += agreement###user###object(object);

END

META deriveDocumentHeaderAgreement (object, supplierProp, customerProp)

    defaultAgreement###object = ABSTRACT Agreement (###object);
    overDefaultAgreement###object = 
        OVERRIDE defaultAgreementSupplierCustomer(supplierProp###object(o), customerProp###object(o)) IF currency###object(o) == currencyAgreement(defaultAgreementSupplierCustomer(supplierProp###object(o), customerProp###object(o))), 
        defaultAgreement###object(o);
    agreement###object (o) <- overDefaultAgreement###object(o)
    WHEN CHANGED(currency###object(o)) OR
         CHANGED(customerProp###object(o)) OR
         CHANGED(supplierProp###object(o));

    CONSTRAINT currency###object(o) != currencyAgreement(agreement###object(o))
               CHECKED BY agreement###object
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT agreement###object(o) AND NOT inAgreementSupplier(agreement###object(o), supplierProp###object(o))
               CHECKED BY agreement###object
               MESSAGE 'Соглашение должно быть между заданными организациями (поставщик)';

    CONSTRAINT agreement###object(object)
               AND NOT inAgreementCustomer(agreement###object(object), customerProp###object(object))
               CHECKED BY agreement###object
               MESSAGE 'Соглашение должно быть между заданными организациями (покупатель)';
END



META deriveDocumentDetailPriceListTypeAgreement (object, detail)
    WHEN SESSION
        (CHANGED(agreement###object(object###detail(d))) OR
         CHANGED(priceListType###object(object###detail(d))) OR
         CHANGED(sku###detail(d))) AND NOT CHANGED(priceListType###detail(d)) DO {
            priceListType###detail(d) <- IF agreement###object(object###detail(d))
                                         THEN priceListTypeAgreementSku(agreement###object(object###detail(d)), sku###detail(d))
                                         ELSE priceListType###object(object###detail(d));
        }
END
META deriveDocumentDetailPriceListTypeAgreement (object)
    @deriveDocumentDetailPriceListTypeAgreement(object, object###detail);
END

//--------------------------------------- Для двух объектов (object1 - документ)----------------------------------------------------------//
META defineDocumentHeaderAgreement (object1, object2)
    agreement###object1###object2 (object1, object2) = DATA Agreement (###object1, ###object2);
    nameAgreement###object1###object2 'Соглашение' (object1, object2)= nameAgreement(agreement###object1###object2 (object1, object2)) IN documentPrm MINCHARWIDTH 5 PREFCHARWIDTH 10;
    defaultPriceListType###object1###object2 (object1, object2) = priceListTypeAgreement(agreement###object1###object2 (object1, object2));
END

META defineDocumentInterfaceHeaderAgreement(object1Class, object2Class, supplierProp, customerProp)
    @defineDocumentHeaderAgreement(object1Class, object2Class);
    agreement###object1Class###object2Class (o1, o2) <- agreement###object1Class(o1)
        IF currency###object1Class(o1) == currencyAgreement(agreement###object1Class(o1))
        AND in###object1Class###object2Class(o1, o2)
    WHEN CHANGED(currency###object1Class(o1)) AND o2 IS object2Class OR
         CHANGED(agreement###object1Class(o1)) AND o2 IS object2Class OR
         CHANGED(in###object1Class###object2Class(o1, o2));

    CONSTRAINT currency###object1Class(o1) != currencyAgreement(agreement###object1Class###object2Class(o1, o2))
               CHECKED BY agreement###object1Class###object2Class
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT agreement###object1Class###object2Class(o1, o2)
               AND NOT inAgreementSupplier(agreement###object1Class###object2Class(o1, o2), supplierProp###object1Class(o1))
               CHECKED BY agreement###object1Class###object2Class
               MESSAGE 'Соглашение должно быть между заданными организациями (поставщик)';

    CONSTRAINT agreement###object1Class###object2Class(o1, o2)
               AND NOT inAgreementCustomer(agreement###object1Class###object2Class(o1, o2), customerProp###object1Class(o1))
               CHECKED BY agreement###object1Class###object2Class
               MESSAGE 'Соглашение должно быть между заданными организациями (покупатель)';
END
