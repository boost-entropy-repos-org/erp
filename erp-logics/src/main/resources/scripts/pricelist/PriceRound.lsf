MODULE PriceRound;

REQUIRE System, Utils, DefaultData, Stock, Sku;


//--  По группам
CLASS RoundCondition 'Условие округления';
TABLE roundCondition (RoundCondition);

nameRoundCondition 'Наименование' = DATA VARISTRING[50](RoundCondition);

currencyRoundCondition = DATA Currency(RoundCondition);
nameCurrencyRoundCondition 'Валюта' (roundCondition)= nameCurrency(currencyRoundCondition(roundCondition));

denominatorPriceRoundCondition 'Делитель (округление цен)' =  DATA NUMERIC[14,2](RoundCondition);
minPriceRoundCondition 'Нижний порог (округление цен)' =  DATA NUMERIC[14,2](RoundCondition);
priceRoundRoundCondition 'До скольки знаков округлять цену' (roundCondition)=  DATA INTEGER (RoundCondition);

defaultRoundConditionCurrency = DATA RoundCondition(Currency);
defaultRoundCurrency 'Округление' (currency) = priceRoundRoundCondition(defaultRoundConditionCurrency(currency)) PERSISTENT;
isDefaultRoundConditionCurrency 'По умолчанию' (roundCondition, currency) = defaultRoundConditionCurrency(currency) == roundCondition;

priceRoundCurrency 'Округление по умолчанию' (currency) = priceRoundRoundCondition(defaultRoundConditionCurrency(currency)) PERSISTENT;

CLASS PriceInterval 'Диапазон цен';
TABLE priceInterval (PriceInterval);

roundConditionPriceInterval = DATA RoundCondition(PriceInterval);

fromPriceInterval 'от' = DATA NUMERIC[14,3](PriceInterval) IN base;
toPriceInterval 'до' = DATA NUMERIC[14,3](PriceInterval) IN base;
modifierPriceInterval 'Округлённая цена интервала' = DATA NUMERIC[14,2](PriceInterval) IN base;

integerPriceRoundCondition 'Целое' (price, roundCondition) = divideInteger(price, denominatorPriceRoundCondition(roundCondition));

fractionPriceRoundCondition 'Дробное' (price, roundCondition) = price -
    integerPriceRoundCondition(price, roundCondition) * denominatorPriceRoundCondition(roundCondition);

modifierPriceIntervalPriceRoundCondition (price, roundCondition) =
    GROUP LAST modifierPriceInterval(interval)
          BY price, roundConditionPriceInterval(interval)
          ORDER interval
          WHERE fractionPriceRoundCondition(price, roundConditionPriceInterval(interval)) >= fromPriceInterval(interval) AND
                fractionPriceRoundCondition(price, roundConditionPriceInterval(interval)) < toPriceInterval(interval);


roundPriceRoundCondition (price, roundCondition) = NUMERIC[14,2](
    IF price > minPriceRoundCondition(roundCondition) AND modifierPriceIntervalPriceRoundCondition(price, roundCondition)
        THEN
            integerPriceRoundCondition(price, roundCondition) * denominatorPriceRoundCondition(roundCondition) +
            modifierPriceIntervalPriceRoundCondition(price, roundCondition)
        ELSE
            round(price AS NUMERIC[14,2], priceRoundRoundCondition(roundCondition))
    ) COMPLEX; // для COMPLEX

// -------------------- Группы для округления --------------- //

CLASS ABSTRACT RoundGroup 'Группа округлений';
TABLE roundGroup(RoundGroup);

nameRoundGroup 'Наименование' = ABSTRACT VARISTRING[150](RoundGroup);

TABLE roundConditionRoundGroup (RoundCondition, RoundGroup);
inRoundConditionRoundGroup 'Вкл' = DATA BOOLEAN (RoundCondition, RoundGroup);

roundConditionUniqueCurrencyRoundGroup(currency, roundGroup) = GROUP AGGR roundCondition
                                                                     BY currencyRoundCondition(roundCondition), roundGroup
                                                                     WHERE inRoundConditionRoundGroup(roundCondition, roundGroup) PERSISTENT;

TABLE currencyRoundGroup(Currency, RoundGroup);
roundConditionCurrencyRoundGroup (currency, roundGroup) = OVERRIDE defaultRoundConditionCurrency(currency) IF roundGroup IS RoundGroup,
                                                                   roundConditionUniqueCurrencyRoundGroup(currency, roundGroup);

roundPriceCurrencyRoundGroup(price, currency, roundGroup) = roundPriceRoundCondition(price, roundConditionCurrencyRoundGroup(currency, roundGroup));

roundPriceCurrency(price, currency) = round(price, defaultRoundCurrency(currency));

FORM priceIntervals 'Округления цен'

    OBJECTS c=Currency FIXED PANEL
    PROPERTIES (c)  SELECTOR nameCurrency

    OBJECTS rc=RoundCondition
    PROPERTIES(rc) nameRoundCondition, denominatorPriceRoundCondition, minPriceRoundCondition, priceRoundRoundCondition, ADDOBJ, DELETESESSION
    PROPERTIES(rc, c) isDefaultRoundConditionCurrency
    OBJECTS p=PriceInterval
    PROPERTIES(p) fromPriceInterval, toPriceInterval, modifierPriceInterval, ADDOBJ, DELETESESSION

    OBJECTS rg=RoundGroup
    PROPERTIES(rg) READONLY nameRoundGroup
    PROPERTIES(rc, rg) inRoundConditionRoundGroup

    OBJECTS nu=NUMERIC[14,3] FIXED PANEL
    PROPERTIES val = OBJVALUE(nu)

    PROPERTIES(nu, c, rg) READONLY roundPriceCurrencyRoundGroup

    FILTERGROUP filterGroup
        FILTER 'Только отмеченные' 'F10' inRoundConditionRoundGroup(rc, rg)


    FILTERS currencyRoundCondition(rc) == c,
            roundConditionPriceInterval(p) == rc
;

DESIGN priceIntervals FROM DEFAULT {
    ADD c.box {
        PROPERTY (nameCurrency(c)) {
            preferredCharWidth = 30;
            panelLabelAbove = TRUE;
            font = 'Tahoma bold 24';
        }
    }

    NEW specification {
        fill = 1;

        ADD rc.box;
        ADD p.box;
        NEW wor21 {
            fill = 1;
            type = CONTAINERH;
            ADD rg.box;
            ADD nu.box {
                caption = 'Тестовая форма';
                type = CONTAINERH;
                ADD PROPERTY (val) {
                    caption = 'Введите число для примера';
                    panelLabelAbove = TRUE;
                    font = 'Tahoma bold 36';
                }
                ADD PROPERTY (roundPriceCurrencyRoundGroup(nu, c, rg)) {
                    caption = 'Результат';
                    panelLabelAbove = TRUE;
                    font = 'Tahoma bold 36';
                }
            }
        }
    }
    ADD functions.box;
}

FORM dialogPriceIntervals 'Округления цен'

    OBJECTS rc=RoundCondition
    PROPERTIES(rc) READONLY nameRoundCondition, denominatorPriceRoundCondition, minPriceRoundCondition, priceRoundRoundCondition, nameCurrencyRoundCondition
    OBJECTS p=PriceInterval
    PROPERTIES(p) READONLY fromPriceInterval, toPriceInterval, modifierPriceInterval

    FILTERS roundConditionPriceInterval(p) == rc

    DIALOG RoundCondition OBJECT rc
;
DESIGN dialogPriceIntervals FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
    }
}

// --------------------------------------------------- Стандартные значения ------------------------------------ //

loadDefaultPriceInterval  = ACTION (value, shortName, name) {
    LOCAL currency = Currency();
    ASSIGN currency() <- currencyShortName(shortName);
    FOR ADDOBJ p = RoundCondition DO {
        ASSIGN currencyRoundCondition(p) <- currency();
        ASSIGN priceRoundRoundCondition(p)  <- value;
        ASSIGN defaultRoundConditionCurrency(c) <- p WHERE c == currency();
        ASSIGN nameRoundCondition(p) <- name;
    }
}

loadDefaultPriceIntervals 'Загрузить стандартные округления цен'  = ACTION () {
    EXEC loadDefaultPriceInterval(0, 'BLR', 'До рублей');
    EXEC loadDefaultPriceInterval(2, 'BLR', 'До копеек');

    LOCAL currency = Currency();
    ASSIGN currency() <- currencyShortName('BLR');
    FOR ADDOBJ p = RoundCondition DO {
        ASSIGN currencyRoundCondition(p) <- currency();
        ASSIGN minPriceRoundCondition(p) <- 25;
        ASSIGN priceRoundRoundCondition(p) <- -1;
        ASSIGN nameRoundCondition(p) <- 'До 50 рублей';
        denominatorPriceRoundCondition(p) <- 50;
        FOR ADDOBJ i1 = PriceInterval DO {
            roundConditionPriceInterval(i1) <- p;
            modifierPriceInterval(i1) <- 0;
            fromPriceInterval(i1) <- 0;
            toPriceInterval(i1) <- 25;
        }
        FOR ADDOBJ i2 = PriceInterval DO {
            roundConditionPriceInterval(i1) <- p;
            modifierPriceInterval(i2) <- 50;
            fromPriceInterval(i2) <- 26;
            toPriceInterval(i2) <- 50;
        }
    }

    EXEC loadDefaultPriceInterval(2, 'RUB', 'До копеек');
    EXEC loadDefaultPriceInterval(2, 'AUD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'BGN', 'До стотинок');
    EXEC loadDefaultPriceInterval(2, 'UAH', 'До копеек');
    EXEC loadDefaultPriceInterval(2, 'DKK', 'До эре');
    EXEC loadDefaultPriceInterval(2, 'USD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'EUR', 'До евроцентов');
    EXEC loadDefaultPriceInterval(2, 'PLN', 'До грошей');
    EXEC loadDefaultPriceInterval(2, 'ISK', 'До эйре');
    EXEC loadDefaultPriceInterval(2, 'CAD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'CNY', 'До фэней');
    EXEC loadDefaultPriceInterval(3, 'KWD', 'До филсов');
    EXEC loadDefaultPriceInterval(2, 'LVL', 'До сантимов');
    EXEC loadDefaultPriceInterval(2, 'LTL', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'MDL', 'До баней');
    EXEC loadDefaultPriceInterval(2, 'NOK', 'До эре');
    EXEC loadDefaultPriceInterval(2, 'XDR', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'SGD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'KGS', 'До тыйынов');
    EXEC loadDefaultPriceInterval(2, 'KZT', 'До тиынов');
    EXEC loadDefaultPriceInterval(2, 'TRY', 'До курушей');
    EXEC loadDefaultPriceInterval(2, 'GBP', 'До пенсов');
    EXEC loadDefaultPriceInterval(2, 'CZK', 'До геллеров');
    EXEC loadDefaultPriceInterval(2, 'SEK', 'До эре');
    EXEC loadDefaultPriceInterval(2, 'CHF', 'До рапенов');
    EXEC loadDefaultPriceInterval(2, 'JPY', 'До сэнов');
    EXEC loadDefaultPriceInterval(2, 'IRR', 'До динаров');
} IN loadDefaultGroup;


@implementLoadDefaultData(loadDefaultPriceIntervals);

// --------------------------------------------------- Для SKU ------------------------------------ //

roundGroupSku = ABSTRACT RoundGroup (Sku) PERSISTENT;
TABLE roundGroupSku(RoundGroup, Sku);

roundPriceCurrencySku 'Округление для товара' (price, currency, sku) = roundPriceCurrencyRoundGroup(price, currency, roundGroupSku(sku));
