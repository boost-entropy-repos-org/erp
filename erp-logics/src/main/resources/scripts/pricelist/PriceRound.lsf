MODULE PriceRound;

REQUIRE System, Utils, DefaultData, Stock, Sku;


//--  По группам
CLASS RoundCondition 'Условие округления';
TABLE roundCondition (RoundCondition);

name 'Наименование' = DATA VARISTRING[50](RoundCondition);

currency = DATA Currency(RoundCondition) NOT NULL DELETE;
nameCurrency 'Валюта' (RoundCondition roundCondition)= name(currency(roundCondition));

denominatorPrice 'Делитель' =  DATA NUMERIC[16,4](RoundCondition);
minPrice 'Нижний порог' =  DATA NUMERIC[16,4](RoundCondition);
priceRound 'Количество знаков после запятой' (roundCondition)=  DATA INTEGER (RoundCondition);

defaultRoundCondition = DATA RoundCondition(Currency);
defaultRound 'Округление' (Currency currency) = priceRound(defaultRoundCondition(currency)) PERSISTENT;
isDefault 'По умолчанию' (RoundCondition roundCondition, Currency currency) = defaultRoundCondition(currency) == roundCondition;
defaultRound 'Округление' () = defaultRound(defaultCurrency());

//priceRound 'Округление по умолчанию' (Currency currency) = priceRound(defaultRoundCondition(currency)) PERSISTENT;

CLASS PriceInterval 'Диапазон цен';
TABLE priceInterval (PriceInterval);

roundCondition = DATA RoundCondition(PriceInterval) NOT NULL DELETE;

from 'от' = DATA NUMERIC[16,4](PriceInterval) IN base;
to 'до' = DATA NUMERIC[16,4](PriceInterval) IN base;
modifier 'Округлённая цена интервала' = DATA NUMERIC[16,4](PriceInterval) IN base;

integer 'Целое' (price, RoundCondition roundCondition) = floor(price / denominatorPrice(roundCondition));

fraction 'Дробное' (price, RoundCondition roundCondition) = price -
    integer(price, roundCondition) * denominatorPrice(roundCondition);

modifierPriceInterval (price, roundCondition) =
    GROUP LAST modifier(PriceInterval interval)
          BY NUMERIC[22,10] price AS NUMERIC[22,10], roundCondition(interval)
          ORDER interval
          WHERE fraction(price, roundCondition(interval)) >= from(interval) AND
                fraction(price, roundCondition(interval)) < to(interval);


round (NUMERIC[16,4] price, RoundCondition roundCondition) = NUMERIC[16,4](
    IF (price AS NUMERIC[22,10]) > minPrice(roundCondition) AND modifierPriceInterval(price, roundCondition)
        THEN
            integer(price, roundCondition) * denominatorPrice(roundCondition) +
            modifierPriceInterval(price, roundCondition)
        ELSE
            Utils.round(price AS NUMERIC[22,10], priceRound(roundCondition))
    ) COMPLEX; // для COMPLEX

round(price, Currency currency) = Utils.round(price, defaultRound(currency));

FORM priceIntervals 'Округления цен'

    OBJECTS c=Currency PANEL
    PROPERTIES (c)  SELECTOR name

    OBJECTS rc=RoundCondition
    PROPERTIES(rc) name, denominatorPrice, minPrice, priceRound, NEW, DELETE 
    PROPERTIES(rc, c) isDefault
    
    OBJECTS p=PriceInterval
    PROPERTIES(p) from, to, modifier, NEW, DELETE 

    OBJECTS nu=NUMERIC[16,4] PANEL
    PROPERTIES val = OBJVALUE(nu)
    PROPERTIES(nu, rc) READONLY round

    FILTERS currency(rc) == c,
            roundCondition(p) == rc
;

DESIGN priceIntervals {
    MOVE c.box {
        PROPERTY (name(c)) {
            preferredCharWidth = 30;
            panelCaptionAbove = TRUE;
            font = 'bold 24';
        }
    }

    NEW specification {
        fill = 1;

        MOVE rc.box;
        MOVE p.box;
        MOVE nu.box {
            caption = 'Тестовая форма';
            type = CONTAINERH;
            MOVE PROPERTY (val) {
                caption = 'Введите число для примера';
                panelCaptionAbove = TRUE;
                font = 'bold 36';
            }
            MOVE PROPERTY (round(nu, rc)) {
                caption = 'Результат';
                panelCaptionAbove = TRUE;
                font = 'bold 36';
            }
        }
    }
    MOVE functions.box;
}

FORM dialogPriceIntervals 'Округления цен'

    OBJECTS rc=RoundCondition
    PROPERTIES(rc) READONLY name, denominatorPrice, minPrice, priceRound, nameCurrency
    OBJECTS p=PriceInterval
    PROPERTIES(p) READONLY from, to, modifier

    FILTERS roundCondition(p) == rc

    LIST RoundCondition OBJECT rc
;
DESIGN dialogPriceIntervals {
    main {
        preferredSize = (1024, 768);
    }
}

// --------------------------------------------------- Стандартные значения ------------------------------------ //

loadDefaultPriceInterval(INTEGER value, STRING[3] shortName, VARISTRING[50] name)  = ACTION {
    LOCAL currency = Currency();
    ASSIGN currency() <- currencyShortName(shortName);
    FOR NEW p = RoundCondition DO {
        ASSIGN currency(p) <- currency();
        ASSIGN priceRound(p)  <- value;
        ASSIGN defaultRoundCondition(Currency c) <- p WHERE c == currency();
        ASSIGN name(p) <- name;
    }
}

loadDefaultPriceIntervals 'Загрузить стандартные округления цен'()  = ACTION {
    EXEC loadDefaultPriceInterval(0, 'BLR', 'До рублей');
    EXEC loadDefaultPriceInterval(2, 'BLR', 'До копеек');

//    FOR NEW p = RoundCondition DO {
//        ASSIGN currencyRoundCondition(p) <- currencyShortName('BLR');
//        ASSIGN minPriceRoundCondition(p) <- 25.0;
//        ASSIGN priceRoundRoundCondition(p) <- -1;
//        ASSIGN nameRoundCondition(p) <- 'До 50 рублей';
//        denominatorPriceRoundCondition(p) <- 50.0;
//        FOR NEW i1 = PriceInterval DO {
//            roundConditionPriceInterval(i1) <- p;
//            modifierPriceInterval(i1) <- 0.0;
//            fromPriceInterval(i1) <- 0.0;
//            toPriceInterval(i1) <- 25.0;
//        }
//        FOR NEW i2 = PriceInterval DO {
//            roundConditionPriceInterval(i2) <- p;
//            modifierPriceInterval(i2) <- 50.0;
//            fromPriceInterval(i2) <- 25.0;
//            toPriceInterval(i2) <- 50.0;
//        }
//    }
    FOR NEW p = RoundCondition DO {
        ASSIGN currency(p) <- currencyShortName('BLR');
        ASSIGN minPrice(p) <- 50.0;
        ASSIGN priceRound(p) <- -2;
        ASSIGN name(p) <- 'До 100 рублей';
        denominatorPrice(p) <- 100.0;
        FOR NEW i1 = PriceInterval DO {
            roundCondition(i1) <- p;
            modifier(i1) <- 0.0;
            from(i1) <- 0.0;
            to(i1) <- 50.0;
        }
        FOR NEW i2 = PriceInterval DO {
            roundCondition(i2) <- p;
            modifier(i2) <- 100.0;
            from(i2) <- 50.0;
            to(i2) <- 100.0;
        }
    }
    FOR NEW p = RoundCondition DO {
        ASSIGN currency(p) <- currencyShortName('BLR');
        ASSIGN minPrice(p) <- 100.0;
        ASSIGN priceRound(p) <- 0;
        ASSIGN name(p) <- 'До 100 рублей (вниз)';
        denominatorPrice(p) <- 100.0;

        FOR NEW i1 = PriceInterval DO {
            roundCondition(i1) <- p;
            modifier(i1) <- 0.0;
            from(i1) <- 0.0;
            to(i1) <- 100.0;
        }
    }    
    EXEC loadDefaultPriceInterval(2, 'RUB', 'До копеек');
    EXEC loadDefaultPriceInterval(2, 'AUD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'BGN', 'До стотинок');
    EXEC loadDefaultPriceInterval(2, 'UAH', 'До копеек');
    EXEC loadDefaultPriceInterval(2, 'DKK', 'До эре');
    EXEC loadDefaultPriceInterval(2, 'USD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'EUR', 'До евроцентов');
    EXEC loadDefaultPriceInterval(2, 'PLN', 'До грошей');
    EXEC loadDefaultPriceInterval(2, 'ISK', 'До эйре');
    EXEC loadDefaultPriceInterval(2, 'CAD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'CNY', 'До фэней');
    EXEC loadDefaultPriceInterval(3, 'KWD', 'До филсов');
    EXEC loadDefaultPriceInterval(2, 'LVL', 'До сантимов');
    EXEC loadDefaultPriceInterval(2, 'LTL', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'MDL', 'До баней');
    EXEC loadDefaultPriceInterval(2, 'NOK', 'До эре');
    EXEC loadDefaultPriceInterval(2, 'XDR', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'SGD', 'До центов');
    EXEC loadDefaultPriceInterval(2, 'KGS', 'До тыйынов');
    EXEC loadDefaultPriceInterval(2, 'KZT', 'До тиынов');
    EXEC loadDefaultPriceInterval(2, 'TRY', 'До курушей');
    EXEC loadDefaultPriceInterval(2, 'GBP', 'До пенсов');
    EXEC loadDefaultPriceInterval(2, 'CZK', 'До геллеров');
    EXEC loadDefaultPriceInterval(2, 'SEK', 'До эре');
    EXEC loadDefaultPriceInterval(2, 'CHF', 'До рапенов');
    EXEC loadDefaultPriceInterval(2, 'JPY', 'До сэнов');
    EXEC loadDefaultPriceInterval(2, 'IRR', 'До динаров');
} IN loadDefault;


@implementLoadDefaultData(loadDefaultPriceIntervals);

