MODULE PriceListCalc;

REQUIRE Integration, PriceListLedger, StockTax;

NAMESPACE PriceList;

CLASS CalcPriceListType 'Расчетный вид цены' : PriceListType;
TABLE calcPriceListType (CalcPriceListType);

@defineExternalizable(calcPriceListType, VARSTRING[100]);
idPriceListType (p) += idCalcPriceListType(p);

nameCalcPriceListType 'Наименование' = DATA VARISTRING[50](CalcPriceListType);
namePriceListType(type) += nameCalcPriceListType(type) IF type IS CalcPriceListType;

basePriceListTypeCalcPriceListType(type) = DATA BasePriceListType (CalcPriceListType);
nameBasePriceListTypeCalcPriceListType 'Базовый вид цены' (type) = nameBasePriceListType(basePriceListTypeCalcPriceListType(type));

ledgerPriceListTypePriceListType(type) += basePriceListTypeCalcPriceListType(type) AS LedgerPriceListType;

includeVATCalcPriceListType 'Цена с НДС' = DATA BOOLEAN (CalcPriceListType);
includeVATPriceListType(type) += includeVATCalcPriceListType(type);

countryCalcPriceListType 'Страна' = DATA Country(CalcPriceListType);
nameCountryCalcPriceListType 'Страна' (t) = nameCountry(countryCalcPriceListType(t));

addVATCalcPriceListType 'Добавлять НДС' (t) = includeVATCalcPriceListType(t) AND NOT includeVATPriceListType(basePriceListTypeCalcPriceListType(t)) PERSISTENT;  

@defineDocumentHeaderCurrency(calcPriceListType);
currencyPriceListType(calcPriceListType) += currencyCalcPriceListType(calcPriceListType);

// ---------------- Надбавка по классификатору ------------------- //

groupTypeCalcPriceListType = DATA GroupType (CalcPriceListType);
nameGroupTypeCalcPriceListType 'Тип классификатора' (type) = nameGroupType(groupTypeCalcPriceListType(type));

TABLE calcPriceListTypeGroup (CalcPriceListType, Group);
dataMarkupCalcPriceListTypeGroup 'Надбавка, %' = DATA NUMERIC[8,2] (CalcPriceListType, Group);

TABLE calcPriceListTypeSku (CalcPriceListType, Sku);
dataMarkupCalcPriceListTypeSku 'Надбавка, %' = DATA NUMERIC[8,2] (CalcPriceListType, Sku);

levelParentMarkupGroup (calcPriceListType, group) = GROUP MIN levelGroupGroup(group, parent) IF dataMarkupCalcPriceListTypeGroup(calcPriceListType, parent)
                                                              BY calcPriceListType, group PERSISTENT;
nearestParentGroup (calcPriceListType, group) = groupGroupLevel(group, levelParentMarkupGroup(calcPriceListType, group));
nearestMarkupCalcPriceListTypeGroup 'Расчетная надбавка, %' (calcPriceListType, group) =
    dataMarkupCalcPriceListTypeGroup(calcPriceListType, nearestParentGroup(calcPriceListType, group)) PERSISTENT;

markupCalcPriceListTypeGroup 'Надбавка, %' (type, group) =
    OVERRIDE nearestMarkupCalcPriceListTypeGroup(type, group), dataMarkupCalcPriceListTypeGroup(type, group) PERSISTENT;

markupCalcPriceListTypeSku 'Надбавка, % (перегруженная)' (type, sku) = OVERRIDE
    markupCalcPriceListTypeGroup(type, groupGroupTypeSku(groupTypeCalcPriceListType(type), sku)),
    dataMarkupCalcPriceListTypeSku(type, sku) PERSISTENT;

multiplierCalcPriceListTypeSku (type, sku) = NUMERIC[10,4]((100.0 + markupCalcPriceListTypeSku(type, sku)) / 100.0) PERSISTENT;

VATCalcPriceListTypeSkuDate(type, sku, date) = IF addVATCalcPriceListType(type) THEN (100.0 + valueVATSkuCountryDate(sku, countryCalcPriceListType(type), date)) / 100.0 ELSE 1.0 IF sku IS Sku AND type IS CalcPriceListType AND date IS DATE;

// --------------- Расчет значения цены --------------- //

priceBBasePriceListTypeCalcPriceListTypeSkuStockDateTime(base, type, sku, stock, dateTime) =
    roundPriceRoundCondition(priceBBasePriceListTypeSkuStockDateTime(base, sku, stock, dateTime) * multiplierCalcPriceListTypeSku(type, sku) * VATCalcPriceListTypeSkuDate(type, sku, DATE(dateTime)), roundConditionPriceListType(type)) COMPLEX;
priceABasePriceListTypeCalcPriceListTypeSkuStockDateTime(base, type, sku, stock, dateTime) =
    roundPriceRoundCondition(priceABasePriceListTypeSkuStockDateTime(base, sku, stock, dateTime) * multiplierCalcPriceListTypeSku(type, sku) * VATCalcPriceListTypeSkuDate(type, sku, DATE(dateTime)), roundConditionPriceListType(type)) COMPLEX;

priceBCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    priceBBasePriceListTypeCalcPriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), type, sku, stock, dateTime) COMPLEX;
priceACalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    priceABasePriceListTypeCalcPriceListTypeSkuStockDateTime(basePriceListTypeCalcPriceListType(type), type, sku, stock, dateTime) COMPLEX;

priceBCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    roundPriceRoundCondition(priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeCalcPriceListType(type), batch, stock, dateTime) * multiplierCalcPriceListTypeSku(type, skuBatch(batch)) * VATCalcPriceListTypeSkuDate(type, skuBatch(batch), DATE(dateTime)), roundConditionPriceListType(type)) COMPLEX;
priceACalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    roundPriceRoundCondition(priceABasePriceListTypeBatchStockDateTime(basePriceListTypeCalcPriceListType(type), batch, stock, dateTime) * multiplierCalcPriceListTypeSku(type, skuBatch(batch)) * VATCalcPriceListTypeSkuDate(type, skuBatch(batch), DATE(dateTime)) , roundConditionPriceListType(type)) COMPLEX;

priceBPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceBCalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceAPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceACalcPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

priceBPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceBCalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
priceAPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceACalcPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

// ------------------------------------- Формы ---------------------------------- //

backgroundMarkup 'Цвет' (calcPriceListType, group) = RGB(255,160,160) IF dataMarkupCalcPriceListTypeGroup(calcPriceListType, group);

FORM calcPriceListType 'Расчетный вид цен'
    OBJECTS c = CalcPriceListType FIXED PANEL
    PROPERTIES(c) nameCalcPriceListType, idCalcPriceListType SHOWIF showIDs(), includeVATPriceListType, nameCurrencyCalcPriceListType, nameCountryCalcPriceListType, nameBasePriceListTypeCalcPriceListType,
                  nameRoundConditionPriceListType, nameGroupTypeCalcPriceListType

    TREE treeGroup g=Group PARENT parentGroup
    PROPERTIES READONLY nameGroup(g)
    FILTERS groupTypeGroup(g) == groupTypeCalcPriceListType(c)
    ORDER BY nameGroup(g)
    FILTERGROUP inactive FILTER 'Активные' 'F5' activeGroup(g) DEFAULT
    PROPERTIES(c, g) dataMarkupCalcPriceListTypeGroup , nearestMarkupCalcPriceListTypeGroup

    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, idBarcodeSku
    FILTERS isParentGroupSku(g, s) OR s IS Sku AND NOT g
    PROPERTIES(c, s) dataMarkupCalcPriceListTypeSku, markupCalcPriceListTypeSku

    EDIT CalcPriceListType OBJECT c
;

DESIGN calcPriceListType FROM DEFAULT{
    ADD c.box{
        type = CONTAINERH;
        ADD PROPERTY(nameCurrencyCalcPriceListType(c));
        ADD PROPERTY(nameRoundConditionPriceListType(c));
    }
    NEW groupContainer {
        fill = 1;
        ADD PROPERTY(nameGroupTypeCalcPriceListType(c));
        NEW treeContainer{
            fill = 1;
            type = SPLITH;
            ADD treeGroup.tree.box;
            ADD s.box {
                fill = 3;
            }
        }
    }
    ADD functions.box;
}

FORM calcPriceListTypes 'Расчетный вид цены'
    OBJECTS p = CalcPriceListType
    PROPERTIES(p) READONLY nameCalcPriceListType, nameCurrencyCalcPriceListType, nameRoundConditionPriceListType
    PROPERTIES(p) READONLY includeVATCalcPriceListType

    DIALOG CalcPriceListType OBJECT p
;

addCalcPriceListType 'Добавить расчетную цену' = ACTION ADDFORM CalcPriceListType;
editCalcPriceListType 'Редактировать' = ACTION EDITFORM CalcPriceListType;
editPriceListType(priceListType) += editCalcPriceListType(priceListType);

EXTEND FORM priceListTypes
    PROPERTIES() TODRAW pt FORCE PANEL addCalcPriceListType
//    PROPERTIES(pt) SHOWIF showIDs() READONLY idCalcPriceListType
;