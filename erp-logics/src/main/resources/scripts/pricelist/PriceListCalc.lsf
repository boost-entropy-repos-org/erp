MODULE PriceListCalc;

REQUIRE Integration, PriceListLedger, StockTax, SystemEvents;

NAMESPACE PriceList;

CLASS CalcPriceListType 'Расчетный вид цены' : PriceListType;
TABLE calcPriceListType (CalcPriceListType);

@defineExternalizable(calcPriceListType, VARSTRING[100]);
id (CalcPriceListType p) += id(p);

name 'Наименование' = DATA VARISTRING[50](CalcPriceListType);
name(CalcPriceListType type) += name(type) IF type IS CalcPriceListType;

basePriceListType(type) = DATA BasePriceListType (CalcPriceListType);
nameBasePriceListType 'Базовый вид цены' (CalcPriceListType type) = name(basePriceListType(type));

ledgerPriceListType(CalcPriceListType type) += basePriceListType(type) AS LedgerPriceListType;

includeVAT 'Цена с НДС' = DATA BOOLEAN (CalcPriceListType);
includeVAT(CalcPriceListType type) += includeVAT(type);

country 'Страна' = DATA Country(CalcPriceListType);
nameCountry 'Страна' (CalcPriceListType t) = name(country(t));

addVAT 'Добавлять НДС' (CalcPriceListType t) = includeVAT(t) AND NOT includeVAT[PriceListType](basePriceListType(t)) PERSISTENT;  

@defineDocumentHeaderCurrency(calcPriceListType);
currency(CalcPriceListType calcPriceListType) += currency(calcPriceListType);

parent = DATA CalcPriceListType (CalcPriceListType);
nameParent 'Родительский вид цены' = name(parent(CalcPriceListType t));

// ---------------- Надбавка по классификатору ------------------- //

groupType = DATA GroupType (CalcPriceListType);
nameGroupType 'Тип классификатора' (CalcPriceListType type) = name(groupType(type));

TABLE calcPriceListTypeGroup (CalcPriceListType, Group);
TABLE sessionCalcPriceListTypeGroup (Session, CalcPriceListType, Group);
dataMarkup 'Надбавка, %' = DATA NUMERIC[8,2] (CalcPriceListType, Group);

TABLE calcPriceListTypeSku (CalcPriceListType, Sku);
TABLE sessionCalcPriceListTypeSku (Session, CalcPriceListType, Sku);
dataMarkup 'Надбавка, %' = DATA NUMERIC[8,2] (CalcPriceListType, Sku);

levelParentMarkup (calcPriceListType, group) = GROUP MIN level(Group group, Group parent) IF dataMarkup(CalcPriceListType calcPriceListType, parent)
                                                              BY calcPriceListType, group PERSISTENT;
nearestParent (CalcPriceListType calcPriceListType, Group group) = group(group, levelParentMarkup(calcPriceListType, group));
nearestMarkup 'Расчетная надбавка, %' (CalcPriceListType calcPriceListType, Group group) =
    dataMarkup(calcPriceListType, nearestParent(calcPriceListType, group)) PERSISTENT;

markup 'Надбавка, %' (CalcPriceListType type, Group group) =
    OVERRIDE nearestMarkup(type, group), dataMarkup(type, group) PERSISTENT;
    
                                                                     
quantityChildWithMarkup  = GROUP SUM 1 IF dataMarkup(CalcPriceListType type, Group child) AND isParent(child, Group parent) BY parent, type PERSISTENT;
quantityParentWithMarkup  = GROUP SUM 1 IF dataMarkup(CalcPriceListType type, Group parent) AND isParent(Group child, parent) BY child, type PERSISTENT;                                                                        

backgroundMarkup 'Цвет' (CalcPriceListType type, Group group) = CASE 
    WHEN dataMarkup(type, group) THEN RGB(230,248,250) 
//    WHEN nearestMarkup(type, group) THEN RGB(230,248,250) 
    WHEN quantityChildWithMarkup (group, type) != descendantNumber(group) AND NOT quantityParentWithMarkup (group, type) THEN RGB(203,203,203);
    
    
    
extraMarkup = ABSTRACT NUMERIC[8,2] (CalcPriceListType, Sku);  
    
overMarkup 'Надбавка, % (перегруженная)' = OVERRIDE 
    markup(CalcPriceListType type, group(groupType(type), Sku sku)),
    extraMarkup(type, sku),
    dataMarkup(type, sku) PERSISTENT;

markup 'Надбавка, %' (CalcPriceListType type, Sku sku) = OVERRIDE
    overMarkup(parent(type), sku),
    overMarkup(type, sku) PERSISTENT;
    
multiplier (CalcPriceListType type, Sku sku) = NUMERIC[10,4]((100.0 + markup(type, sku)) / 100.0) PERSISTENT;

VAT(CalcPriceListType type, Sku sku, DATE date) = IF addVAT(type) THEN (100.0 + valueVAT(sku, country(type), date)) / 100.0 ELSE 1.0 IF sku IS Sku AND type IS CalcPriceListType AND date IS DATE;


//-- Условие округления
dataRoundCondition = DATA RoundCondition (CalcPriceListType, Group);
nameDataRoundCondition 'Условие округления' (CalcPriceListType type, Group group) = name(dataRoundCondition(type, group));
CONSTRAINT currency(dataRoundCondition(CalcPriceListType type, Group group)) != currency[PriceListType](type)
           CHECKED BY dataRoundCondition[CalcPriceListType,Group]
           MESSAGE 'Валюта документа должна совпадать с валютой условия округления цены';
           
levelParentRoundCondition (calcPriceListType, group) = GROUP MIN level(Group group, Group parent) IF dataRoundCondition(CalcPriceListType calcPriceListType, parent)
                                                              BY calcPriceListType, group PERSISTENT;
nearestParentRoundCondition (CalcPriceListType calcPriceListType, Group group) = group(group, levelParentRoundCondition(calcPriceListType, group));
nearestRoundCondition  (CalcPriceListType calcPriceListType, Group group) =
    dataRoundCondition(calcPriceListType, nearestParentRoundCondition(calcPriceListType, group)) PERSISTENT;
    
nameNearestRoundConditionCalc 'Расчетное условие округления' (PriceListType type, Group group) = name(OVERRIDE roundCondition(type) IF group IS Group,
                                                                                                                nearestRoundCondition(type, group));

roundCondition 'Условие округления' (CalcPriceListType type, Group group) =
    OVERRIDE nearestRoundCondition(type, group), 
             dataRoundCondition(type, group) PERSISTENT;
            
groupRoundConditionGroup (CalcPriceListType type, Sku sku) = roundCondition(type, group(groupType(type), sku)) PERSISTENT;
roundCondition (CalcPriceListType type, Sku sku) = OVERRIDE roundCondition(type) IF type IS CalcPriceListType AND sku IS Sku, groupRoundConditionGroup(type, sku);            
nameRoundCondition 'Условие округления' (CalcPriceListType type, Sku sku)= name(roundCondition(type, sku));    
        
// --------------- Расчет значения цены --------------- //

priceB(BasePriceListType base, CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    round(priceB(base, sku, stock, dateTime) * multiplier(type, sku) * VAT(type, sku, DATE(dateTime)), roundCondition(type, sku)) COMPLEX;
priceA(BasePriceListType base, CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    round(priceA(base, sku, stock, dateTime) * multiplier(type, sku) * VAT(type, sku, DATE(dateTime)), roundCondition(type, sku)) COMPLEX;

priceB(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    priceB(basePriceListType(type), type, sku, stock, dateTime) COMPLEX;
priceA(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    priceA(basePriceListType(type), type, sku, stock, dateTime) COMPLEX;

priceB(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    round(priceB(basePriceListType(type), batch, stock, dateTime) * multiplier(type, sku(batch)) * VAT(type, sku(batch), DATE(dateTime)), roundCondition(type, sku(batch))) COMPLEX;
priceA(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    round(priceA(basePriceListType(type), batch, stock, dateTime) * multiplier(type, sku(batch)) * VAT(type, sku(batch), DATE(dateTime)) , roundCondition(type, sku(batch))) COMPLEX;

priceB(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceB(type, sku, stock, dateTime);
priceA(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceA(type, sku, stock, dateTime);

priceB(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceB(type, batch, stock, dateTime);
priceA(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceA(type, batch, stock, dateTime);

// ------------------------------------- Формы ---------------------------------- //

//backgroundMarkup 'Цвет' (CalcPriceListType calcPriceListType, Group group) = RGB(255,160,160) IF dataMarkup(calcPriceListType, group);

FORM calcPriceListType 'Расчетный вид цен'
    OBJECTS c = CalcPriceListType FIXED PANEL
    PROPERTIES(c) name, id SHOWIF showIDs(), includeVAT[PriceListType], nameCurrency, nameCountry, nameBasePriceListType,
                  nameRoundCondition, nameGroupType, nameParent

    TREE treeGroup g=Group PARENT parent
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(c)
    ORDER BY order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    PROPERTIES(c, g) dataMarkup , nearestMarkup BACKGROUND backgroundMarkup(c,g), nameDataRoundCondition, nameNearestRoundConditionCalc READONLY 

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    PROPERTIES(c, s) dataMarkup, overMarkup, nameRoundCondition
    FILTERGROUP inactiveSku 
        FILTER 'Активный' active(s) 'F5' DEFAULT

    EDIT CalcPriceListType OBJECT c
;

DESIGN calcPriceListType {
    MOVE c.box{
        type = CONTAINERH;
        MOVE PROPERTY(nameCurrency(c));
        MOVE PROPERTY(nameRoundCondition(c));
    }
    NEW groupContainer {
        fill = 1;
        MOVE PROPERTY(nameGroupType(c));
        NEW treeContainer{
            fill = 1;
            type = SPLITH;
            MOVE treeGroup.tree.box { caption = 'Группы товаров';}
            MOVE s.box {
                fill = 2;
            }
        }
    }
    MOVE functions.box;
}

FORM calcPriceListTypes 'Расчетный вид цены'
    OBJECTS p = CalcPriceListType
    PROPERTIES(p) READONLY name, nameCurrency, nameRoundCondition
    PROPERTIES(p) READONLY includeVAT

    DIALOG CalcPriceListType OBJECT p
;

edit 'Редактировать' = ACTION EDITFORM CalcPriceListType;
edit(CalcPriceListType priceListType) += ACTION edit(priceListType);

overCopy (CalcPriceListType priceListType) += ACTION NEWSESSION {
    IF priceListType IS CalcPriceListType THEN {
        FOR ADDOBJ p = CalcPriceListType DO {
            includeVAT(p) <- includeVAT(priceListType);
            country(p) <- country(priceListType);            
            currency(p) <- currency(priceListType);            
            roundCondition(p) <- roundCondition(priceListType);            
            basePriceListType(p) <- basePriceListType(priceListType);
            parent(p) <- parent(priceListType);
           // pricingBaseCalcPriceListType(p) <- pricingBaseCalcPriceListType(p);
            groupType(p) <- groupType(priceListType);
            
            dataMarkup(p, Group group) <- dataMarkup(priceListType, group) WHERE dataMarkup(priceListType, group);    
            dataRoundCondition(p, Group group) <- dataRoundCondition(priceListType, group) WHERE dataRoundCondition(priceListType, group);    
            dataMarkup(p, Sku sku) <- dataMarkup(priceListType, sku) WHERE dataMarkup(priceListType, sku);    
            
            FORM calcPriceListType OBJECTS c=p MANAGESESSION DOCKEDMODAL; 
        }
    }
}

EXTEND FORM priceListTypes
    PROPERTIES(pt) addCalcPriceListType = ADDFORM[CalcPriceListType] 
//    PROPERTIES(pt) SHOWIF showIDs() READONLY idCalcPriceListType
;

DESIGN priceListTypes {
    PROPERTY (addCalcPriceListType) {
        caption = 'Добавить расчетную цену';
    }
}
