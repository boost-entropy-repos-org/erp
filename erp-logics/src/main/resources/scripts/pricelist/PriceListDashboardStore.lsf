MODULE PriceListDashboardStore;

REQUIRE PriceListDashboard, StoreSkuLedger, PriceListStore;

// -------------------- В прайсе ----------------- //

// по организациям
countDepartmentStoreALedgerPriceListTypeSkuStoreCompanyDateTime 'В прайсе' (type, sku, store, company, dateTime) =
    GROUP SUM 1 IF priceALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)
    BY type, sku, storeDepartmentStore(stock), company, dateTime;

countStoreALedgerPriceListTypeSkuChainStoresCompanyDateTime 'В прайсе' (type, sku, chainStores, company, dateTime) =
    GROUP SUM 1 IF countDepartmentStoreALedgerPriceListTypeSkuStoreCompanyDateTime(type, sku, store, company, dateTime)
    BY type, sku, chainStoresStore(store), company, dateTime;

countStoreALedgerPriceListTypeSkuStoreTypeCompanyDateTime 'В прайсе' (type, sku, storeType, company, dateTime) =
    GROUP SUM 1 IF countDepartmentStoreALedgerPriceListTypeSkuStoreCompanyDateTime(type, sku, store, company, dateTime)
    BY type, sku, storeTypeStore(store), company, dateTime;

countStoreALedgerPriceListTypeSkuCompanyDateTime 'В прайсе' (type, sku, company, dateTime) =
    GROUP SUM 1 IF countDepartmentStoreALedgerPriceListTypeSkuStoreCompanyDateTime(type, sku, store, company, dateTime)
    BY type, sku, company, dateTime;

// по складам
countDepartmentStoreALedgerPriceListTypeSkuStoreDateTime 'В прайсе' (type, sku, store, dateTime) =
    GROUP SUM 1 IF priceALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)
    BY type, sku, storeDepartmentStore(stock), dateTime;

countStoreALedgerPriceListTypeSkuChainStoresDateTime 'В прайсе' (type, sku, chainStores, dateTime) =
    GROUP SUM 1 IF countDepartmentStoreALedgerPriceListTypeSkuStoreDateTime(type, sku, store, dateTime)
    BY type, sku, chainStoresStore(store), dateTime;

countStoreALedgerPriceListTypeSkuStoreTypeDateTime 'В прайсе' (type, sku, storeType, dateTime) =
    GROUP SUM 1 IF countDepartmentStoreALedgerPriceListTypeSkuStoreDateTime(type, sku, store, dateTime)
    BY type, sku, storeTypeStore(store), dateTime;

countStoreALedgerPriceListTypeSkuDateTime 'В прайсе' (type, sku, dateTime) =
    GROUP SUM 1 IF countDepartmentStoreALedgerPriceListTypeSkuStoreDateTime(type, sku, store, dateTime)
    BY type, sku, dateTime;

// --------------------- В наличии ---------------- //

countStoreASkuStoreTypeDateTime 'В наличии' (sku, storeType, dateTime) =
    GROUP SUM 1 IF balanceASkuStoreDateTime(sku, store, dateTime)
    BY sku, storeTypeStore(store), dateTime;

countStoreASkuChainStoresDateTime 'В наличии' (sku, chainStores, dateTime) =
    GROUP SUM 1 IF balanceASkuStoreDateTime(sku, store, dateTime)
    BY sku, chainStoresStore(store), dateTime;

EXTEND FORM priceListDashboard
    // --- По организациям
    PROPERTIES READONLY countStoreALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt) AFTER idBarcodeSku(csk)

    OBJECTS ccs = ChainStores
    PROPERTIES READONLY nameChainStores(ccs), countStoreChainStores(ccs), countStoreALedgerPriceListTypeSkuChainStoresCompanyDateTime(pt, csk, ccs, c, dt), countStoreASkuChainStoresDateTime(csk, ccs, dt)
    FILTERS countStoreALedgerPriceListTypeSkuChainStoresCompanyDateTime(pt, csk, ccs, c, dt)

    OBJECTS ctp=StoreType
    PROPERTIES READONLY nameStoreType(ctp), countStoreStoreType(ctp), countStoreALedgerPriceListTypeSkuStoreTypeCompanyDateTime(pt, csk, ctp, c, dt), countStoreASkuStoreTypeDateTime(csk, ctp, dt)
    FILTERS countStoreALedgerPriceListTypeSkuStoreTypeCompanyDateTime(pt, csk, ctp, c, dt)

    // --- По складам
    PROPERTIES READONLY countStoreALedgerPriceListTypeSkuDateTime(pt, ssk, dt) AFTER idBarcodeSku(ssk)

    OBJECTS scs = ChainStores
    PROPERTIES READONLY nameChainStores(scs), countStoreChainStores(scs), countStoreALedgerPriceListTypeSkuChainStoresDateTime(pt, ssk, scs, dt), countStoreASkuChainStoresDateTime(ssk, scs, dt)
    FILTERS countStoreALedgerPriceListTypeSkuChainStoresDateTime(pt, ssk, scs, dt)

    OBJECTS stp=StoreType
    PROPERTIES READONLY nameStoreType(stp), countStoreStoreType(stp), countStoreALedgerPriceListTypeSkuStoreTypeDateTime(pt, ssk, stp, dt), countStoreASkuStoreTypeDateTime(ssk, stp, dt)
    FILTERS countStoreALedgerPriceListTypeSkuStoreTypeDateTime(pt, ssk, stp, dt)
;

DESIGN priceListDashboard {
    c.stocks {
        MOVE ccs.box BEFORE cst.box;
        MOVE ctp.box BEFORE cst.box;
    }
    s.stocks {
        MOVE scs.box BEFORE sst.box;
        MOVE stp.box BEFORE sst.box;
    }
}

// ------------------------------- Добавляем розничный вид цены ----------------------------------- //

activeMarkupALedgerPriceListTypeSkuDepartmentStoreCompanyDateTime 'Надбавка, % (управленческая)' (pt, s, d, c, dt) =
    retailPriceASkuDepartmentStoreDateTime (s, d, dt) * 10000.0 /
    ((valueRateRangeDate(VATSkuStock(s, d), DATE(dt)) + 100.0) *
     activePriceALedgerPriceListTypeSkuCompanyDateTime (pt, s, c, dt) IF activePriceALedgerPriceListTypeSkuCompanyDateTime (pt, s, c, dt) != 0)
    - 100.0;

markupALedgerPriceListTypeSkuStockDateTime 'Надбавка, % (управленческая)' (pt, s, d, dt) =
    retailPriceASkuDepartmentStoreDateTime (s, d, dt) * 10000.0 /
    ((valueRateRangeDate(VATSkuStock(s, d), DATE(dt)) + 100.0) *
     priceALedgerPriceListTypeSkuStockDateTime (pt, s, d, dt) IF priceALedgerPriceListTypeSkuStockDateTime (pt, s, d, dt) != 0)
    - 100.0;


EXTEND FORM priceListDashboard
    PROPERTIES TODRAW ssk READONLY AFTER sPrice
            markupALedgerPriceListTypeSkuStockDateTime(pt, ssk, s, dt),
            sRetailPrice = retailPriceASkuDepartmentStoreDateTime(ssk, s, dt),
            markupSkuDepartmentStore(ssk, s),            
            markupPriceABasePriceListTypeSkuDepartmentStoreDateTime(pt, ssk, s, dt)
;

DESIGN priceListDashboard {
    PROPERTY(sRetailPrice) {
        caption = 'Розничная цена (управленческая)';
    }
}

// -------------------- Изменение согласованных и розничных цен одновременно --------------------------- //
createRetailCompanyPriceListStock = ACTION (company, dateTime, dataPriceListType, departmentStore) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyStockPriceList(u, company, dateTime, dataPriceListType, departmentStore);
    
            inUserPriceListDataPriceListType(u, t) <- TRUE WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
            showUserPriceListPriceListType(u, t) <- TRUE WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
    
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

createRetailPricesCompanyPriceListStock = ACTION (company, dateTime, dataPriceListType, departmentStore) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyStockPriceList(u, company, dateTime, dataPriceListType, departmentStore);
            priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
                priceALedgerPriceListTypeSkuStockDateTime(dataPriceListType, skuUserPriceListDetail(d), departmentStore, dateTime)
                WHERE userPriceListUserPriceListDetail(d) == u;
    
            inUserPriceListDataPriceListType(u, t) <- TRUE WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
            showUserPriceListPriceListType(u, t) <- TRUE WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
            priceUserPriceListDetailDataPriceListType(d, t) <-
                priceALedgerPriceListTypeSkuStockDateTime(t, skuUserPriceListDetail(d), departmentStore, dateTime)
                WHERE userPriceListUserPriceListDetail(d) == u AND t == retailPriceListTypeDepartmentStore(departmentStore);
    
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

// Изменение цен
modifyRetailPricesDateTimeDataPriceListTypeStock 'Изменить' = ACTION (dateTime, dataPriceListType, stock) {
    FOR [= GROUP SUM 1 IF inSku(s) BY companyALedgerPriceListTypeSkuStockDateTime(t, s, st, d), t, st, d] (company, dataPriceListType, stock, dateTime) DO {
        createRetailPricesCompanyPriceListStock(company, dateTime, dataPriceListType, stock);
    }
}

// Исключение из ассортимента
excludeRetailDateTimeDataPriceListTypeStock 'Исключить' = ACTION (dateTime, dataPriceListType, stock) {
    FOR [= GROUP SUM 1 IF inSku(s) BY companyALedgerPriceListTypeSkuStockDateTime(t, s, st, d), t, st, d] (company, dataPriceListType, stock, dateTime) DO {
        createRetailCompanyPriceListStock(company, dateTime, dataPriceListType, stock);
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES TODRAW ssk FORCE PANEL modifyRetailPricesDateTimeDataPriceListTypeStock(dt, pt, s),
                                      excludeRetailDateTimeDataPriceListTypeStock(dt, pt, s)
;

DESIGN priceListDashboard {
    stockActionsContainer {
        NEW primaryRetailStockActions {
            type = CONTAINERH;
            caption = 'Согласованные и розничные цены';
            MOVE PROPERTY(modifyRetailPricesDateTimeDataPriceListTypeStock(dt, pt, s));
            MOVE PROPERTY(excludeRetailDateTimeDataPriceListTypeStock(dt, pt, s));
        }
    }
}

// ------------------------------- Изменение розничных цен по складу -------------------------- //

modifyDateTimeRetailDataPriceListTypeStock 'Изменить' = ACTION (dateTime, dataPriceListType, departmentStore) {

    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fromDateUserPriceList(u) <- toDate(dateTime);
            fromTimeUserPriceList(u) <- toTime(dateTime);
            companyUserPriceList(u) <- legalEntityStock(departmentStore);
            currencyUserPriceList(u) <- currencyPriceListType(retailPriceListTypeDepartmentStore(departmentStore));
            inUserPriceListDataPriceListType(u, t) <- TRUE WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
            showUserPriceListPriceListType(u, t) <- TRUE WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
            showUserPriceListPriceListType(u, dataPriceListType) <- TRUE;
            dataInUserPriceListStock(u, departmentStore) <- TRUE;
            FOR inSku(sku)
                ADDOBJ d = UserPriceListDetail DO {
                skuUserPriceListDetail(d) <- sku;
                userPriceListUserPriceListDetail(d) <- u;
                priceUserPriceListDetailDataPriceListType(d, t) <-
                            priceALedgerPriceListTypeSkuStockDateTime(t, skuUserPriceListDetail(d), departmentStore, dateTime) WHERE t == retailPriceListTypeDepartmentStore(departmentStore);
            }
    
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES TODRAW csk FORCE PANEL
                                      modifyDateTimeRetailDataPriceListTypeStock(dt, pt, s)
;

DESIGN priceListDashboard {
    stockActionsContainer {
        NEW retailStockActions {
            caption = 'Розничные цены';
            MOVE PROPERTY(modifyDateTimeRetailDataPriceListTypeStock(dt, pt, s));
        }
    }
}
