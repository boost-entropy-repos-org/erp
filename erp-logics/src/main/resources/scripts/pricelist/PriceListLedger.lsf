MODULE PriceListLedger;

REQUIRE PriceListType, Historizable;

NAMESPACE PriceList;

CLASS ABSTRACT LedgerPriceListType 'Регистровый вид цены' : BasePriceListType;

nameLedgerPriceListType 'Наименование' = ABSTRACT VARISTRING[100](LedgerPriceListType) IN recognize;
nameBasePriceListType(type) += nameLedgerPriceListType(type) IF type IS LedgerPriceListType;

TABLE ledgerPriceListTypeStock (LedgerPriceListType, Stock);
batchLedgerPriceListTypeStock 'Использовать для партий свои цены' = ABSTRACT CASE BOOLEAN (LedgerPriceListType, Stock) PERSISTENT;

CLASS ABSTRACT PriceListLedger 'Изменение цены';
TABLE priceListLedger(PriceListLedger);

@defineCreatedAbstract(PriceListLedger);

fromDateTimePriceListLedger 'Дата/время с' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;
toDateTimePriceListLedger 'Дата/время по' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;

isPostedPriceListLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;
skipPriceListLedger 'Не изменять значение' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;

activePriceListLedger 'Активен' (ledger) = isPostedPriceListLedger(ledger) AND NOT skipPriceListLedger(ledger) PERSISTENT;

skuPriceListLedger = ABSTRACT Sku (PriceListLedger) PERSISTENT INDEXED;
nameSkuPriceListLedger 'SKU' (l) = nameSku(skuPriceListLedger(l));

countPriceListLedgerSku = GROUP SUM 1 BY skuPriceListLedger(ledger) PERSISTENT;

batchPriceListLedger = ABSTRACT Batch (PriceListLedger) PERSISTENT INDEXED;
idBatchPriceListLedger (priceListLedger) = idBatch(batchPriceListLedger(priceListLedger));

TABLE priceListLedgerBatch(PriceListLedger, Batch);
//inPriceListLedgerBatch = DATA BOOLEAN (PriceListLedger, Batch) INDEXED;
inPriceListLedgerBatch = ABSTRACT BOOLEAN (PriceListLedger, Batch) PERSISTENT INDEXED;

descriptionPriceListLedger 'Описание' = ABSTRACT VARSTRING[200] (PriceListLedger) PERSISTENT;

companyPriceListLedger = ABSTRACT LegalEntity (PriceListLedger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListType(PriceListLedger, LedgerPriceListType);
inPriceListLedgerLedgerPriceListType = ABSTRACT BOOLEAN (PriceListLedger, LedgerPriceListType) PERSISTENT;
pricePriceListLedgerLedgerPriceListType 'Цена' = ABSTRACT NUMERIC[14,2] (PriceListLedger, LedgerPriceListType) PERSISTENT;

priceListTypesPriceListLedger 'Цены' (priceList) = GROUP CONCAT nameLedgerPriceListType(type) IF inPriceListLedgerLedgerPriceListType(priceList, type) , ', '
                                                                BY priceList
                                                                ORDER type MINCHARWIDTH 20 PREFCHARWIDTH 40;

inPriceListLedgerStock (ledger, stock) = ABSTRACT BOOLEAN (PriceListLedger, Stock);

stocksPriceListLedger 'Склады' (priceList) = GROUP CONCAT nameStock(stock) IF inPriceListLedgerStock(priceList, stock) , ', '
                                                   BY priceList
                                                   ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 160;

orderPriceListLedger(ledger) = STRUCT(fromDateTimePriceListLedger(ledger), ledger) IF activePriceListLedger(ledger) PERSISTENT;

// ------------------ Расчет цен для sku ---------------- //

activePriceListLedgerLedgerPriceListType(ledger, type) =
    activePriceListLedger(ledger) AND inPriceListLedgerLedgerPriceListType(ledger, type) PERSISTENT INDEXED;

priceBLedgerPriceListTypeSkuDateTime 'Цена' (type, sku, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

priceALedgerPriceListTypeSkuDateTime 'Цена' (type, sku, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

// ------------------ Расчет цен для sku / company ---------------- //

priceBLedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

priceALedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

// Только с ценами

activePriceBLedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE pricePriceListLedgerLedgerPriceListType(ledger, type) AND activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

activePriceALedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE pricePriceListLedgerLedgerPriceListType(ledger, type) AND activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

activeDescriptionBLedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    GROUP LAST descriptionPriceListLedger(ledger)
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE pricePriceListLedgerLedgerPriceListType(ledger, type) AND activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

activeDescriptionALedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    GROUP LAST descriptionPriceListLedger(ledger)
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE pricePriceListLedgerLedgerPriceListType(ledger, type) AND activePriceListLedgerLedgerPriceListType(ledger, type) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

// ------------------ Расчет цен для sku / stock / datetime

TABLE priceListLedgerLedgerPriceListTypeStock (PriceListLedger, LedgerPriceListType, Stock);
activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) =
    activePriceListLedger(ledger) AND inPriceListLedgerLedgerPriceListType(ledger, type) AND inPriceListLedgerStock(ledger, stock) PERSISTENT INDEXED;

// По товарам
priceBLedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

priceALedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

META defineLastLedgerPriceListTypeSkuStock(property, caption)
    property##BLedgerPriceListTypeSkuStockDateTime caption (type, sku, stock, dateTime) =
        GROUP LAST property##PriceListLedger(ledger)
              BY type, skuPriceListLedger(ledger), stock, dateTimeIn
              ORDER fromDateTimePriceListLedger(ledger), ledger
              WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                    fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

    property##ALedgerPriceListTypeSkuStockDateTime caption (type, sku, stock, dateTime) =
        GROUP LAST property##PriceListLedger(ledger)
              BY type, skuPriceListLedger(ledger), stock, dateTimeIn
              ORDER fromDateTimePriceListLedger(ledger), ledger
              WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                    fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;
END

@defineLastLedgerPriceListTypeSkuStock(company, 'Организация');
nameCompanyBLedgerPriceListTypeSkuStockDateTime 'Организация' (type, sku, stock, dateTime) =
    nameLegalEntity(companyBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
nameCompanyALedgerPriceListTypeSkuStockDateTime 'Организация' (type, sku, stock, dateTime) =
    nameLegalEntity(companyALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));

@defineLastLedgerPriceListTypeSkuStock(description, 'Описание');


pricePriceListLedgerLedgerPriceListTypeBatch (ledger, type, batch) = 
    pricePriceListLedgerLedgerPriceListType(ledger, type) IF inPriceListLedgerBatch(ledger, batch); 

activePriceListLedgerLedgerPriceListTypeStockBatch(ledger, type, stock, batch) =
    activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND inPriceListLedgerBatch(ledger, batch);
    

// По партиям
priceBLedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    IF batchLedgerPriceListTypeStock(type, stock) THEN
        [= GROUP LAST pricePriceListLedgerLedgerPriceListTypeBatch(ledger, type, batch)
               BY type, batch, stock, dateTimeIn
               ORDER fromDateTimePriceListLedger(ledger), ledger
               WHERE activePriceListLedgerLedgerPriceListTypeStockBatch(ledger, type, stock, batch) AND
                     fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn] (type, batch, stock, dateTime)
    ELSE
        priceBLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime) COMPLEX;

priceALedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    IF batchLedgerPriceListTypeStock(type, stock) THEN
        [= GROUP LAST pricePriceListLedgerLedgerPriceListTypeBatch(ledger, type, batch)
               BY type, batch, stock, dateTimeIn
               ORDER fromDateTimePriceListLedger(ledger), ledger
               WHERE activePriceListLedgerLedgerPriceListTypeStockBatch(ledger, type, stock, batch) AND
                     fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn] (type, batch, stock, dateTime)
    ELSE
        priceALedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime) COMPLEX;

META defineLastLedgerPriceListTypeBatchStock(property, caption)
    property##BLedgerPriceListTypeBatchStockDateTime caption (type, batch, stock, dateTime) =
        IF batchLedgerPriceListTypeStock(type, stock) THEN
            [= GROUP LAST property##PriceListLedger(ledger) IF inPriceListLedgerBatch(ledger, batch)
                   BY type, batch, stock, dateTimeIn
                   ORDER fromDateTimePriceListLedger(ledger), ledger
                   WHERE activePriceListLedgerLedgerPriceListTypeStockBatch(ledger, type, stock, batch) AND
                        fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn](type, batch, stock, dateTime)
        ELSE
            property##BLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime) COMPLEX;

    property##ALedgerPriceListTypeBatchStockDateTime caption (type, batch, stock, dateTime) =
        IF batchLedgerPriceListTypeStock(type, stock) THEN
            [= GROUP LAST property##PriceListLedger(ledger) IF inPriceListLedgerBatch(ledger, batch)
                   BY type, batch, stock, dateTimeIn
                   ORDER fromDateTimePriceListLedger(ledger), ledger
                   WHERE activePriceListLedgerLedgerPriceListTypeStockBatch(ledger, type, stock, batch) AND
                        fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn](type, batch, stock, dateTime)
        ELSE
            property##ALedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime) COMPLEX;
END

@defineLastLedgerPriceListTypeBatchStock(company, 'Организация');
nameCompanyBLedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    nameLegalEntity(companyBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));
nameCompanyALedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    nameLegalEntity(companyALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

@defineLastLedgerPriceListTypeBatchStock(description, 'Описание');

// ------------------ Расчет цен для sku / stock / company / datetime

priceBLedgerPriceListTypeSkuStockCompanyDateTime 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), stock, companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

priceALedgerPriceListTypeSkuStockCompanyDateTime 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST pricePriceListLedgerLedgerPriceListType(ledger, type)
          BY type, skuPriceListLedger(ledger), stock, companyPriceListLedger(ledger), dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;

countStockBPriceListTypeSkuCompanyDateTime 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceBLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)
    BY type, sku, company, dateTime;

countStockAPriceListTypeSkuCompanyDateTime 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)
    BY type, sku, company, dateTime;

// ------- НДС --- //

includeVATLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (LedgerPriceListType);
includeVATBasePriceListType(type) += includeVATLedgerPriceListType(type);

// ------------------ Связь с базовым видом цен ------------- //

priceBBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceABasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

priceBBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
priceABasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

// ------ оптимизация для ассортиментов
ledgerPriceListTypePriceListType = ABSTRACT LedgerPriceListType (PriceListType) PERSISTENT;

ledgerPriceListTypePriceListType(type) += type AS LedgerPriceListType;

// --------------------------- Системные виды цен, на основе Ledger'ов ------------------ //

CLASS SystemLedgerPriceListType 'Системный вид цены (регистр)' {
    accountPriceListType 'Учетная'
}: LedgerPriceListType;

nameLedgerPriceListType (type) += VARISTRING[100](staticCaption(type)) IF type IS SystemLedgerPriceListType;

batchLedgerPriceListTypeStock(type, stock) += WHEN type == SystemLedgerPriceListType.accountPriceListType AND isCompanyStock(stock)
                                              THEN explicitBatchLedgerStock(stock);

includeVATSystemLedgerPriceListType 'Цена с НДС' = ABSTRACT CASE BOOLEAN (SystemLedgerPriceListType);
includeVATLedgerPriceListType (type) += includeVATSystemLedgerPriceListType(type);

inPriceListLedgerSystemLedgerPriceListType = ABSTRACT CASE BOOLEAN (PriceListLedger, SystemLedgerPriceListType) PERSISTENT;
pricePriceListLedgerSystemLedgerPriceListType = ABSTRACT CASE NUMERIC[14,2] (PriceListLedger, SystemLedgerPriceListType) PERSISTENT;
inPriceListLedgerLedgerPriceListType(ledger, type) += inPriceListLedgerSystemLedgerPriceListType(ledger, type);
pricePriceListLedgerLedgerPriceListType(ledger, type) += pricePriceListLedgerSystemLedgerPriceListType(ledger, type);

//Учетные цены и суммы для партий
accountPriceBBatchStockDate 'Учетная цена товара в партии на начало дня' (batch, stock, date) =
    prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(date));
accountPriceABatchStockDate 'Учетная цена товара в партии на конец дня' (batch, stock, date) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(sumDate(date,1)));
accountSumBBatchStockDate 'Учетная сумма на начало дня' (batch, stock, date) =
    balanceBBatchStockDate(batch, stock, date) * accountPriceBBatchStockDate(batch, stock, date);
accountSumABatchStockDate 'Учетная сумма на конец дня' (batch, stock, date) =
    balanceABatchStockDate(batch, stock, date) * accountPriceABatchStockDate(batch, stock, date);
accountSumBBatchesStockDate 'Учетная сумма склада(по партиям) на начало дня' (stock, date) =
    GROUP SUM accountSumBBatchStockDate(batch, stock, date)
    BY stock, date;
accountSumABatchesStockDate 'Учетная сумма склада(по партиям) на конец дня' (stock, date) =
    GROUP SUM accountSumABatchStockDate(batch, stock, date)
    BY stock, date;

accountSumBSkuGroupBatchStockDate 'Учетная сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumBBatchStockDate(batch, stock, date)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, date;
accountSumRecBSkuGroupBatchStockDate 'Учетная сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumBBatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;

accountSumASkuGroupBatchStockDate 'Учетная сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumABatchStockDate(batch, stock, date)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, date;
accountSumRecASkuGroupBatchStockDate 'Учетная сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumABatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;   

//--
currentAccountPriceBatchStock 'Цена учетная' (batch, stock) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, currentDateTime());
currentAccountSumBatchStock 'Сумма учетная' (batch, stock) =
    currentBalanceBatchStock(batch, stock) * currentAccountPriceBatchStock(batch, stock);

accountPriceBatchStockDateTime 'Цена учетная' (batch, stock, dateTime) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, dateTime);

    
//--Дата/время    
accountPriceBBatchStockDateTime 'Учетная цена товара в партии' (batch, stock, dateTime) =
    prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, dateTime);    
accountSumBBatchStockDateTime 'Сумма учетная' (batch, stock, dateTime) =
    balanceBBatchStockDateTime(batch, stock, dateTime) * accountPriceBBatchStockDateTime(batch, stock, dateTime);

accountSumBatchBSkuStockDateTime 'Сумма учетная по партиям' (sku, stock, dateTime) =
    GROUP SUM accountSumBBatchStockDateTime(batch, stock, dateTime) BY skuBatch(batch), stock, dateTime; 
    
accountSumBSkuGroupBatchStockDateTime 'Учетная сумма на начало дня(по партиям)' (group, stock, dateTime) =
    GROUP SUM accountSumBBatchStockDateTime(batch, stock, dateTime)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, dateTime;
accountSumRecBSkuGroupBatchStockDateTime 'Учетная сумма (по партиям)' (group, stock, dateTime) =
    GROUP SUM accountSumBBatchStockDateTime(batch, stock, dateTime) IF isParentGroupBatch(group, batch)
    BY group, stock, dateTime;

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt,st) READONLY BEFORE dateTimeBatch(bt) currentAccountPriceBatchStock, currentAccountSumBatchStock
;
EXTEND FORM balanceBatchStock
    PROPERTIES(bt,st,t) READONLY BEFORE dateTimeBatch(bt) accountPriceBatchStockDateTime, accountSumBBatchStockDateTime
;

// ------------------ Суммы по регистрам ------------------------ //

accountPriceASkuLedgerBatch 'Цена учетная' (ledger, batch) = accountPriceBatchStockDateTime(batch, stockSkuLedger(ledger), dateTimeSkuLedger(ledger));
accountSumBatchSkuLedger 'Сумма по партиям' = GROUP SUM costSkuLedgerBatch(l, b) * accountPriceASkuLedgerBatch(l, b) BY l;
EXTEND FORM costSkuLedger 
    PROPERTIES(bil) accountSumBatchSkuLedger AFTER sumSkuLedger(bil)
    FILTERGROUP wrongSum
        FILTER 'Неправильная сумма по партиям' 'F4' NOT accountSumBatchSkuLedger(bil) == sumSkuLedger(bil) 
;

// --------------------------- Формы ---------------------------- //

EXTEND FORM currentPrices
    PROPERTIES(pt, sk, s, dt) READONLY nameCompanyALedgerPriceListTypeSkuStockDateTime, descriptionALedgerPriceListTypeSkuStockDateTime
    PROPERTIES(pt, b, s, dt) READONLY nameCompanyALedgerPriceListTypeBatchStockDateTime, descriptionALedgerPriceListTypeBatchStockDateTime
;

// ----------------------------- Метакоды ------------------------ //

// Implement
META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp, prefix)
    EXTEND CLASS objectClass : PriceListLedger;

    fromDateTimePriceListLedger (ledger) += dateTime###objectClass(ledger);

    isPostedPriceListLedger(ledger) += isPosted###objectClass(ledger);

    skuPriceListLedger (ledger) += sku###objectClass(ledger);

    descriptionPriceListLedger (ledger) += description###objectClass(ledger);

    companyPriceListLedger (ledger) += companyProp###objectClass(ledger);

    inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(prefix###price###objectClass(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType THEN TRUE;
    pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(prefix###price###objectClass(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType THEN prefix###price###objectClass(ledger);

    inPriceListLedgerStock (ledger, stock) += stockProp###objectClass(ledger) == stock;
END

META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp, );
END

META implementSystemLedgerPriceListTypeBatch (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp);
    inPriceListLedgerBatch(ledger, batch) += (ledger AS objectClass) == batch;
END

// Derive
META deriveDocumentDetailPriceSystemLedgerPriceListType (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                            skuProp###concrete##Detail(detail),
                                                                                            stockProp###concrete##Detail(detail),
                                                                                            dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- IF prefixB###batch###concrete##Detail(detail)

                                                    THEN prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                   prefixB###batch###concrete##Detail(detail),
                                                                                                   stockProp###concrete##Detail(detail),
                                                                                                   dateTime###concrete##Detail(detail))
                                                    ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                 prefixB###skuProp###concrete##Detail(detail),
                                                                                                 stockProp###concrete##Detail(detail),
                                                                                                 dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(prefixB###skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail)) OR
                                                         CHANGED(prefixB###batch###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, , , skuProp, stockProp);
END

dialogPriceListTypeSkuStock = DATA SESSION PriceListType (Sku, Stock);
nameDialogPriceListTypeSkuStock 'Вид цены' = namePriceListType(dialogPriceListTypeSkuStock(sku, stock));

relationSkuStockPriceListType(s,st,t) = GROUP SUM 1 IF skuPriceListLedger(pl) == s AND isPostedPriceListLedger(pl) AND inPriceListLedgerLedgerPriceListType(pl, t)
    AND inPriceListLedgerStock(pl,st) AND pricePriceListLedgerLedgerPriceListType(pl,t) BY s,st,t;
CONSTRAINT dialogPriceListTypeSkuStock(s,st) AND NOT relationSkuStockPriceListType(s,st,dialogPriceListTypeSkuStock(s,st))
    CHECKED BY dialogPriceListTypeSkuStock MESSAGE 'Выбран вид цены, по которому нет истории изменения по данному товару';

FORM movementPriceSkuStock 'Изменение цены товара по складу'
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) READONLY nameSku

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR nameStock
    PROPERTIES(s,st) nameDialogPriceListTypeSkuStock

    OBJECTS pp = (t = PriceListType, pl = PriceListLedger)
    PROPERTIES READONLY namePriceListType(t),  descriptionPriceListLedger(pl), fromDateTimePriceListLedger(pl), toDateTimePriceListLedger(pl),
                        pricePriceListLedgerLedgerPriceListType(pl,t) FORCE GRID
    ORDER BY namePriceListType(t), fromDateTimePriceListLedger(pl)

    FILTERS skuPriceListLedger(pl) == s,
            isPostedPriceListLedger(pl),
            inPriceListLedgerLedgerPriceListType(pl, t),
            inPriceListLedgerStock(pl,st),
            pricePriceListLedgerLedgerPriceListType(pl,t),
            isCompanyStock(st),
            (t IS PriceListType AND NOT dialogPriceListTypeSkuStock(s,st)) OR dialogPriceListTypeSkuStock(s,st)== t

;
DESIGN movementPriceSkuStock FROM DEFAULT {
    main {
        NEW topContainer{
            type = CONTAINERH;
            ADD s.box;
            ADD st.box;
        }
        NEW dialog {
            caption = 'Вид цен';
            ADD PROPERTY(nameDialogPriceListTypeSkuStock(s,st));
        }
        ADD pp.box;

        PROPERTY(nameSku(s)) { focusable = FALSE;}
        PROPERTY(nameStock(st)) { focusable = FALSE;}
        PROPERTY(namePriceListType(t)) { caption = 'Вид цен';}
    }
    ADD functions.box;
}

META defineMovementPriceSku(detail, stockProp)
    showMovementPriceSkuStock###detail 'Показать изменение цены товара по складу' (detail) = ACTION FORM movementPriceSkuStock OBJECTS s = sku###detail(detail), st = stockProp###detail(detail) MODAL SHORTCUT nameSku###detail;
END

showMovementPriceSkuSkuStock 'Показать изменение цены товара по складу' (sku, stock) = ACTION FORM movementPriceSkuStock OBJECTS s = sku, st = stock MODAL;

showMovementPriceSkuBatchStock 'Показать изменение цены товара по складу' (batch, stock) = ACTION FORM movementPriceSkuStock OBJECTS s = skuBatch(batch), st = stock MODAL;

showMovementPriceSkuStockBatch 'Показать изменение цены товара по складу возникновения партии' (batch) = ACTION FORM movementPriceSkuStock OBJECTS s = skuBatch(batch), st = stockBatch(batch) MODAL SHORTCUT nameSkuBatch;

//@defineMovementPriceSku(batch, stock){
//    showMovementPriceSkuStockBatch 'Показать изменение цены товара по складу' (batch) = ACTION FORM movementPriceSkuStock OBJECTS s = skuBatch(batch), st = stockBatch(batch) MODAL SHORTCUT nameSkuBatch;
//}; //-- показываем по нажатию правой клавиши  изменение цены товара

@extendFormFilterStockAccess(Stock, st, movementPriceSkuStock);
