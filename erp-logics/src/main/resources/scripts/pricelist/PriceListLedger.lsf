MODULE PriceListLedger;

REQUIRE PriceListType, Historizable;

NAMESPACE PriceList;

CLASS ABSTRACT LedgerPriceListType 'Регистровый вид цены' : BasePriceListType;

name 'Наименование' = ABSTRACT VARISTRING[100](LedgerPriceListType) IN recognize;
name(LedgerPriceListType type) += name(type) IF type IS LedgerPriceListType;

differentOrganizations 'Для разных организаций' = ABSTRACT CASE EXCLUSIVE BOOLEAN (LedgerPriceListType);    

TABLE ledgerPriceListTypeStock (LedgerPriceListType, Stock);
batch 'Использовать для партий свои цены' = ABSTRACT CASE EXCLUSIVE BOOLEAN (LedgerPriceListType, Stock) PERSISTENT;
skipBatch = ABSTRACT CASE BOOLEAN (LedgerPriceListType, Stock, Batch);
                                                   
FORM ledgerPriceListTypes 'Регистровые виды цен'
   OBJECTS p = LedgerPriceListType
   PROPERTIES(p) READONLY name
   
   LIST LedgerPriceListType OBJECT p
;
    
CLASS ABSTRACT PriceListLedger 'Изменение цены';
TABLE priceListLedger(PriceListLedger);

@defineCreatedAbstract(PriceListLedger);

fromDateTime 'Дата/время с' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;
toDateTime 'Дата/время по' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;

isPosted 'Проведен' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;
skip 'Не изменять значение' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;

active 'Активен' (PriceListLedger ledger) = isPosted(ledger) AND NOT skip(ledger) PERSISTENT;

sku = ABSTRACT Sku (PriceListLedger) PERSISTENT INDEXED;
nameSku 'SKU' (PriceListLedger l) = name(sku(l));

countPriceListLedger = GROUP SUM 1 BY sku(PriceListLedger ledger);

edit 'Редактировать' = ACTION ABSTRACT MULTI (PriceListLedger) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

TABLE priceListLedgerBatch(PriceListLedger, Batch);
//inPriceListLedgerBatch = DATA BOOLEAN (PriceListLedger, Batch) INDEXED;
in = ABSTRACT BOOLEAN (PriceListLedger, Batch) PERSISTENT;

batch = GROUP MAX Batch batch IF in(PriceListLedger ledger, batch) BY ledger;
idBatch (PriceListLedger ledger) = id(batch(ledger));

description 'Описание' = ABSTRACT VARISTRING[200] (PriceListLedger) PERSISTENT;

company = ABSTRACT LegalEntity (PriceListLedger) PERSISTENT;
nameCompany 'Компания' = name(company(PriceListLedger ledger));

companyStock = ABSTRACT Stock (PriceListLedger) PERSISTENT;
nameCompanyStock 'Склад компании' = name(companyStock(PriceListLedger ledger));

TABLE priceListLedgerLedgerPriceListType(PriceListLedger, LedgerPriceListType);
in = ABSTRACT BOOLEAN (PriceListLedger, LedgerPriceListType) PERSISTENT;
price 'Цена' = ABSTRACT NUMERIC[16,4] (PriceListLedger, LedgerPriceListType) PERSISTENT;

priceListTypes 'Цены' (priceList) = GROUP CONCAT name(LedgerPriceListType type) IF in(PriceListLedger priceList, type) , ', '
                                                                BY priceList
                                                                ORDER type MINCHARWIDTH 20 PREFCHARWIDTH 40;

in (ledger, stock) = ABSTRACT BOOLEAN (PriceListLedger, Stock);
stock (ledger) = GROUP MAX Stock stock IF in(PriceListLedger ledger, stock) BY ledger;

stocks 'Склады' (priceList) = GROUP CONCAT name(Stock stock) IF in(PriceListLedger priceList, stock) , ', '
                                                   BY priceList
                                                   ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 160;

// ------------------ Расчет цен для sku ---------------- //

active(PriceListLedger ledger, LedgerPriceListType type) =
    active(ledger) AND in(ledger, type) PERSISTENT;

priceB 'Цена' (type, sku, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

priceA 'Цена' (type, sku, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

// ------------------ Расчет цен для sku / company ---------------- //

priceB 'Цена' (type, sku, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

priceA 'Цена' (type, sku, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

priceListLedgerB 'Цена' (type, sku, company, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

priceListLedgerA 'Цена' (type, sku, company, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

descriptionB 'Описание' (type, sku, company, dateTime) =
    GROUP LAST description(PriceListLedger ledger)
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

descriptionA 'Описание' (type, sku, company, dateTime) =
    GROUP LAST description(PriceListLedger ledger)
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

// Только с ценами

activePriceB 'Цена' (type, sku, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

activePriceA 'Цена' (type, sku, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

activeDescriptionB 'Описание' (type, sku, company, dateTime) =
    GROUP LAST description(PriceListLedger ledger)
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) < dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

activeDescriptionA 'Описание' (type, sku, company, dateTime) =
    GROUP LAST description(PriceListLedger ledger)
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

activeLedgerA (type, sku, company, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger), company(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;

// ------------------ Расчет цен для sku / stock / datetime

TABLE priceListLedgerLedgerPriceListTypeStock (PriceListLedger, LedgerPriceListType, Stock);
active(PriceListLedger ledger, LedgerPriceListType type, Stock stock) =
    active(ledger, type) AND in(ledger, stock) PERSISTENT;

price 'Цена' (PriceListLedger ledger, LedgerPriceListType type, Stock stock) =
    price(ledger, type) IF active(ledger, type, stock) PERSISTENT;

sku(PriceListLedger ledger, LedgerPriceListType type, Stock stock) =
    sku(ledger) IF active(ledger, type, stock) PERSISTENT;
    
INDEX LedgerPriceListType type, sku(PriceListLedger ledger, type, Stock stock), stock, fromDateTime(ledger, type, stock);
INDEX sku(PriceListLedger ledger, LedgerPriceListType type, Stock stock), stock, fromDateTime(ledger, type, stock);

fromDateTime 'Дата/время с' (PriceListLedger ledger, LedgerPriceListType type, Stock stock) =
    fromDateTime(ledger) IF active(ledger, type, stock) PERSISTENT INDEXED;

toDateTime 'Дата/время по' (PriceListLedger ledger, LedgerPriceListType type, Stock stock) =
    toDateTime(ledger) IF active(ledger, type, stock) PERSISTENT INDEXED;

company(PriceListLedger ledger, LedgerPriceListType type, Stock stock) =
    company(ledger) IF active(ledger, type, stock) PERSISTENT;
    
INDEX company(PriceListLedger ledger, LedgerPriceListType type, Stock stock), type, stock, toDateTime(ledger, type, stock); 

// По товарам
activePriceB 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

activePriceA 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

prevActivePriceA 'Цена' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(activePriceA (type, sku, stock, dateTime));

activePriceListLedgerB  (type, sku, stock, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
prevActivePriceListLedgerB (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(activePriceListLedgerB(type, sku, stock, dateTime));  
              
activePriceListLedgerA  (type, sku, stock, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
prevActivePriceListLedgerA (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(activePriceListLedgerA(type, sku, stock, dateTime));   

//-- Следующая цена, которая проводится по регистру, после даты/время
activeNextPriceA 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
          ORDER DESC fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) >= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
                
activeNextPriceB 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
          ORDER DESC fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) > dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
 
activeNextPriceA 'Цена' (type, sku, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), DATETIME dateTimeIn
          ORDER DESC fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) >= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;
                
activeNextPriceB 'Цена' (type, sku, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type)
          BY type, sku(ledger), DATETIME dateTimeIn
          ORDER DESC fromDateTime(ledger), ledger
          WHERE price(ledger, type) AND active(ledger, type) AND
                fromDateTime(ledger) > dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;
                                
// Только с ценами
priceB 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

priceA 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

currentPriceListLedger 'Цена' (type, sku, stock) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) COMPLEX;

lastPriceListLedger 'Цена' (type, sku, stock) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) COMPLEX;

lastPriceListLedger 'Цена' (type, sku, stock, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, DATETIME dateTime
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) AND NOT toDateTime(ledger, type, stock) < dateTime COMPLEX;


META defineLastLedgerPriceListTypeSkuStock(property, caption)
    property##B caption (type, sku, stock, dateTime) =
        GROUP LAST property(PriceListLedger ledger)
              BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, DATETIME dateTimeIn
              ORDER fromDateTime(ledger, type, stock), ledger
              WHERE active(ledger, type, stock) AND
                    fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

    property##A caption (type, sku, stock, dateTime) =
        GROUP LAST property(PriceListLedger ledger)
              BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, DATETIME dateTimeIn
              ORDER fromDateTime(ledger, type, stock), ledger
              WHERE active(ledger, type, stock) AND
                    fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
END

META defineLastLedgerPriceListTypeSkuStockAggr(property, caption)
    property##B caption (type, sku, stock, dateTime) =
        GROUP LAST property(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
              BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
              ORDER fromDateTime(ledger, type, stock), ledger
              WHERE fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

    property##A caption (type, sku, stock, dateTime) =
        GROUP LAST property(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
              BY type, sku(ledger, type, stock), stock, DATETIME dateTimeIn
              ORDER fromDateTime(ledger, type, stock), ledger
              WHERE fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
END

@defineLastLedgerPriceListTypeSkuStockAggr(company, 'Организация');
nameCompanyB 'Организация' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    name(companyB(type, sku, stock, dateTime));
nameCompanyA 'Организация' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    name(companyA(type, sku, stock, dateTime));

@defineLastLedgerPriceListTypeSkuStock(description, 'Описание');

@defineLastLedgerPriceListTypeSkuStock(fromDateTime, 'Дата/время с');

price (PriceListLedger ledger, LedgerPriceListType type, Stock stock, Batch batch) = 
    price(ledger, type, stock) IF in(ledger, batch); 

active(PriceListLedger ledger, LedgerPriceListType type, Stock stock, Batch batch) =
    active(ledger, type, stock) AND in(ledger, batch);
    

// По партиям

activePriceListLedgerB (type, batch, stock, dateTime) =
    GROUP LAST PriceListLedger ledger
        BY LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTimeIn
        ORDER fromDateTime(ledger, type, stock), ledger
        WHERE active(ledger, type, stock, batch) AND price(ledger, type, stock, batch) AND
              fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn;

activePriceListLedgerA  (type, batch, stock, dateTime) =
    GROUP LAST PriceListLedger ledger
        BY LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTimeIn
        ORDER fromDateTime(ledger, type, stock), ledger
        WHERE active(ledger, type, stock, batch) AND price(ledger, type, stock, batch) AND
              fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn;

priceB 'Цена' (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    IF batch(type, stock) AND NOT skipBatch(type, stock, batch) THEN
        [= GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock, Batch batch)
               BY type, batch, stock, DATETIME dateTimeIn
               ORDER fromDateTime(ledger, type, stock), ledger
               WHERE active(ledger, type, stock, batch) AND
                     fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn] (type, batch, stock, dateTime)
    ELSE
        priceB(type, sku(batch), stock, dateTime) COMPLEX;

priceA 'Цена' (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    IF batch(type, stock) AND NOT skipBatch(type, stock, batch) THEN
        [= GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock, Batch batch)
               BY type, batch, stock, DATETIME dateTimeIn
               ORDER fromDateTime(ledger, type, stock), ledger
               WHERE active(ledger, type, stock, batch) AND
                     fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn] (type, batch, stock, dateTime)
    ELSE
        priceA(type, sku(batch), stock, dateTime) COMPLEX;

prevPriceB 'Цена (пред.)' (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceB(type, batch, stock, dateTime)) COMPLEX;
prevPriceA 'Цена (пред.)' (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceA(type, batch, stock, dateTime)) COMPLEX;

prevPriceB 'Цена (пред.)' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceB(type, sku, stock, dateTime)) COMPLEX;
prevPriceA 'Цена (пред.)' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceA(type, sku, stock, dateTime)) COMPLEX;

//-- Только от партии
priceBBatch 'Цена' (type, batch, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock, Batch batch)
        BY type, batch, stock, DATETIME dateTimeIn
        ORDER fromDateTime(ledger, type, stock), ledger
        WHERE active(ledger, type, stock, batch) AND
            fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

priceABatch 'Цена' (type, batch, stock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock, Batch batch)
        BY type, batch, stock, DATETIME dateTimeIn
        ORDER fromDateTime(ledger, type, stock), ledger
        WHERE active(ledger, type, stock, batch) AND
            fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

META defineLastLedgerPriceListTypeBatchStock(property, caption)
    property##B caption (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
        IF batch(type, stock) AND NOT skipBatch(type, stock, batch) THEN
            [= GROUP LAST property(PriceListLedger ledger) IF in(ledger, Batch batch)
                   BY LedgerPriceListType type, batch, Stock stock, DATETIME dateTimeIn
                   ORDER fromDateTime(ledger, type, stock), ledger
                   WHERE active(ledger, type, stock, batch) AND
                        fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn](type, batch, stock, dateTime)
        ELSE
            property##B(type, sku(batch), stock, dateTime) COMPLEX;

    property##A caption (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
        IF batch(type, stock) AND NOT skipBatch(type, stock, batch) THEN
            [= GROUP LAST property(PriceListLedger ledger) IF in(ledger, Batch batch)
                   BY LedgerPriceListType type, batch, Stock stock, DATETIME dateTimeIn
                   ORDER fromDateTime(ledger, type, stock), ledger
                   WHERE active(ledger, type, stock, batch) AND
                        fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn](type, batch, stock, dateTime)
        ELSE
            property##A(type, sku(batch), stock, dateTime) COMPLEX;
END

@defineLastLedgerPriceListTypeBatchStock(company, 'Организация');
nameCompanyB 'Компания прайса' (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    name(companyB(type, batch, stock, dateTime));
nameCompanyA 'Компания прайса' (LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    name(companyA(type, batch, stock, dateTime));

@defineLastLedgerPriceListTypeBatchStock(description, 'Описание');

// ------------------ Расчет цен для sku / stock / company / datetime

priceB 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;
                
prevPriceB(LedgerPriceListType type, Sku sku, Stock stock, LegalEntity company, DATETIME dateTime) =
    PREV(priceB(type, sku, stock, company, dateTime)); 

priceA 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

prevPriceA(LedgerPriceListType type, Sku sku, Stock stock, LegalEntity company, DATETIME dateTime) =
    PREV(priceA(type, sku, stock, company, dateTime)); 

currentPrice 'Цена' (type, sku, stock, company) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock)
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) COMPLEX;

priceListLedgerB 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, company(ledger, type, stock), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

priceListLedgerA 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger, type, Stock stock), stock, company(ledger, type, stock), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

// Только с ценами                
activePriceB 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

activePriceA 'Цена' (type, sku, stock, company, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE price(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;                
                

// ------------------ Расчет цен для sku / stock / company / stockCompany / datetime

priceB 'Цена' (type, sku, stock, company, companyStock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock), companyStock(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) < dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

priceA 'Цена' (type, sku, stock, company, companyStock, dateTime) =
    GROUP LAST price(PriceListLedger ledger, LedgerPriceListType type, Stock stock)
          BY type, sku(ledger, type, stock), stock, company(ledger, type, stock), companyStock(ledger), DATETIME dateTimeIn
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE active(ledger, type, stock) AND
                fromDateTime(ledger, type, stock) <= dateTimeIn AND NOT toDateTime(ledger, type, stock) < dateTimeIn COMPLEX;

countStockB 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceB(LedgerPriceListType type, Sku sku, Stock stock, LegalEntity company, DATETIME dateTime)
    BY type, sku, company, dateTime;

countStockA 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceA(LedgerPriceListType type, Sku sku, Stock stock, LegalEntity company, DATETIME dateTime)
    BY type, sku, company, dateTime;

// ------- НДС --- //

includeVAT 'Цена с НДС' = ABSTRACT BOOLEAN (LedgerPriceListType);
includeVAT(LedgerPriceListType type) += includeVAT(type);

// ------------------ Связь с базовым видом цен ------------- //

priceB(LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceB(type, sku, stock, dateTime);
priceA(LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceA(type, sku, stock, dateTime);

priceB(LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceB(type, batch, stock, dateTime);
priceA(LedgerPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceA(type, batch, stock, dateTime);

// ------ оптимизация для ассортиментов
ledgerPriceListType = ABSTRACT LedgerPriceListType (PriceListType) PERSISTENT;

ledgerPriceListType(LedgerPriceListType type) += type AS LedgerPriceListType;

// --------------------------- Системные виды цен, на основе Ledger'ов ------------------ //

CLASS SystemLedgerPriceListType 'Системный вид цены (регистр)' {
    accountPriceListType 'Учетная'
}: LedgerPriceListType;

showCopy(PriceListType p) += p IS PriceListType AND NOT (p IS SystemLedgerPriceListType);

name (SystemLedgerPriceListType type) += VARISTRING[100](staticCaption(type)) IF type IS SystemLedgerPriceListType;

batch(SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.accountPriceListType AND isCompany(stock)
                                              THEN priceBatchLedger(stock);

includeVAT 'Цена с НДС' = ABSTRACT CASE EXCLUSIVE BOOLEAN (SystemLedgerPriceListType);
includeVAT (SystemLedgerPriceListType type) += includeVAT(type);

in = ABSTRACT CASE EXCLUSIVE BOOLEAN (PriceListLedger, SystemLedgerPriceListType);
price = ABSTRACT CASE EXCLUSIVE NUMERIC[16,4] (PriceListLedger, SystemLedgerPriceListType);
in(PriceListLedger ledger, SystemLedgerPriceListType type) += in(ledger, type);
price(PriceListLedger ledger, SystemLedgerPriceListType type) += price(ledger, type);

// Учетные цены и суммы для товаров

accountPriceA 'Учетная цена' (Sku sku, Stock stock, DATETIME dateTime) =
    priceA(SystemLedgerPriceListType.accountPriceListType, sku, stock, dateTime);

accountPriceA 'Учетная цена' (Sku sk, Stock st) = accountPriceA(sk, st, currentDateTime());

currentAccountSum 'Сумма учетная' (Sku sku, Stock stock) =
    currentBalance(sku, stock) * accountPriceA(sku, stock);

diffAccountSum 'Разница' (Sku sku, Stock stock) = currentAccountSum(sku, stock) (-) currentSum(sku, stock);

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s, st) accountPriceA, currentAccountSum, diffAccountSum
;

//Учетные цены и суммы для партий
accountPriceB 'Учетная цена товара в партии на начало дня' (Batch batch, Stock stock, DATE date) =
    prevPriceB[LedgerPriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(date));
accountPriceA 'Учетная цена товара в партии на конец дня' (Batch batch, Stock stock, DATE date) =
    prevPriceA[LedgerPriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(sum(date,1)));
accountSumB 'Учетная сумма на начало дня' (Batch batch, Stock stock, DATE date) =
    balanceB(batch, stock, date) * accountPriceB(batch, stock, date);
accountSumA 'Учетная сумма на конец дня' (Batch batch, Stock stock, DATE date) =
    balanceA(batch, stock, date) * accountPriceA(batch, stock, date);
accountSumBBatches 'Учетная сумма склада(по партиям) на начало дня' (stock, date) =
    GROUP SUM accountSumB(Batch batch, Stock stock, DATE date)
    BY stock, date;
accountSumABatches 'Учетная сумма склада(по партиям) на конец дня' (stock, date) =
    GROUP SUM accountSumA(Batch batch, Stock stock, DATE date)
    BY stock, date;

accountSumBSkuBatch 'Учетная сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumB(Batch batch, Stock stock, DATE date)
    BY group(GroupType groupType, sku(batch)), stock, date;
accountSumRecBSkuBatch 'Учетная сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumB(Batch batch, Stock stock, DATE date) IF isParent(Group group, batch)
    BY group, stock, date;

accountSumASkuBatch 'Учетная сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumA(Batch batch, Stock stock, DATE date)
    BY group(GroupType groupType, sku(batch)), stock, date;
accountSumRecASkuBatch 'Учетная сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumA(Batch batch, Stock stock, DATE date) IF isParent(Group group, batch)
    BY group, stock, date;   

//--
accountPriceA 'Цена учетная' (Batch batch, Stock stock) =
    prevPriceA[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, batch, stock, currentDateTime());

// Суммы остатков
currentAccountSum 'Сумма учетная' (Batch batch, Stock stock) =
    currentBalance(batch, stock) * accountPriceA(batch, stock);
currentCostSum 'Сумма себестоимости' (Batch batch, Stock stock) =
    currentBalance(batch, stock) * cost(batch);    

currentAccountSumBatch 'Сумма учетная по партиям' (sku, stock) =
    GROUP SUM currentAccountSum(Batch batch, Stock stock) BY sku(batch), stock;
     
currentCostSumBatch 'Сумма себестоимости по партиям' (sku, stock) =
    GROUP SUM currentCostSum(Batch batch, Stock stock) BY sku(batch), stock;
     
averageCostPriceBatch 'Себестоимость (средневзв.)' = 
    currentCostSumBatch(Sku sku, Stock stock) / currentBalance(sku, stock);   

//--Дата/время    
accountPriceB 'Учетная цена товара в партии' (Batch batch, Stock stock, DATETIME dateTime) =
    prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, batch, stock, dateTime);    
accountSumB 'Сумма учетная' (Batch batch, Stock stock, DATETIME dateTime) =
    balanceB(batch, stock, dateTime) * accountPriceB(batch, stock, dateTime);

accountPriceA 'Учетная цена товара в партии' (Batch batch, Stock stock, DATETIME dateTime) =
    prevPriceA[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.accountPriceListType, batch, stock, dateTime);    
accountSumA 'Сумма учетная' (Batch batch, Stock stock, DATETIME dateTime) =
    balanceA(batch, stock, dateTime) * accountPriceA(batch, stock, dateTime);

accountSumBatchB 'Сумма учетная по партиям' (sku, stock, dateTime) =
    GROUP SUM accountSumB(Batch batch, Stock stock, DATETIME dateTime) BY sku(batch), stock, dateTime; 
    
accountSumBSkuBatch 'Учетная сумма на начало дня(по партиям)' (group, stock, dateTime) =
    GROUP SUM accountSumB(Batch batch, Stock stock, DATETIME dateTime)
    BY group(GroupType groupType, sku(batch)), stock, dateTime;
accountSumRecBSkuBatch 'Учетная сумма (по партиям)' (group, stock, dateTime) =
    GROUP SUM accountSumB(Batch batch, Stock stock, DATETIME dateTime) IF isParent(Group group, batch)
    BY group, stock, dateTime;

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt, st) READONLY BEFORE dateTime(bt) accountPriceA, currentAccountSum
;
EXTEND FORM balanceBatchStock
    PROPERTIES(bt, st, t) READONLY BEFORE dateTime(bt) accountPriceB, accountSumB
;

EXTEND FORM dialogBatchStockOut
    PROPERTIES(bt, st, t) READONLY accountPriceA
    
    FILTERGROUP account
        FILTER 'С учетной ценой' accountPriceA(bt, st, t) DEFAULT
;

EXTEND FORM dialogBatchStockIn
    PROPERTIES(bt, st, t) READONLY accountPriceA
;

// ------------------ Суммы по регистрам ------------------------ //

accountPriceA 'Цена учетная' (SkuLedger ledger, Batch batch) = accountPriceA(batch, stock(ledger), dateTime(ledger));
accountSumBatch 'Сумма по партиям' = GROUP SUM cost(SkuLedger l, Batch b) * accountPriceA(l, b) BY l;
EXTEND FORM costSkuLedger 
    PROPERTIES(bil) accountSumBatch AFTER sum(bil)
    FILTERGROUP wrongSum
        FILTER 'Неправильная сумма по партиям' NOT accountSumBatch(bil) == sum(bil) 'F4' 
;

// ----------------------------- Метакоды ------------------------ //

// Implement
META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp, prefix)
    EXTEND CLASS objectClass : PriceListLedger;

    fromDateTime (objectClass ledger) += dateTime(ledger);

    isPosted[PriceListLedger](objectClass ledger) += isPosted(ledger);

    sku[PriceListLedger] (objectClass ledger) += sku(ledger);

    description[PriceListLedger] (objectClass ledger) += description(ledger);

    company (objectClass ledger) += companyProp(ledger);

    in (objectClass ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.##type##PriceListType THEN TRUE;
    price (objectClass ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.##type##PriceListType THEN price(ledger);

    in (objectClass ledger, ###stockProp stock) += stockProp(ledger) == stock;
END

META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp, );
END

META implementSystemLedgerPriceListTypeBatch (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp);
    in(objectClass ledger, objectClass batch) += (ledger AS objectClass) == batch;
END

// Derive
META deriveDocumentDetailPriceSystemLedgerPriceListType (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    prefixP##Price (###concrete##Detail detail)  <- prevPriceB[PriceListType,###skuProp,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp,
                                                                                            skuProp(detail),
                                                                                            stockProp(detail),
                                                                                            dateTime(detail))
                                                    WHEN DO CHANGED(skuProp(detail)) OR
                                                         CHANGED(stockProp(detail)) OR
                                                         CHANGED(dateTime(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prefixP###price (###concrete##Detail detail)  <- IF batch(detail)

                                                    THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                   batch(detail),
                                                                                                   stockProp(detail),
                                                                                                   dateTime(detail))
                                                    ELSE prevPriceB[PriceListType,###skuProp,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                 skuProp(detail),
                                                                                                 stockProp(detail),
                                                                                                 dateTime(detail))
                                                    WHEN DO CHANGED(skuProp(detail)) OR
                                                         CHANGED(stockProp(detail)) OR
                                                         (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
                                                         CHANGED(batch(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, , , skuProp, stockProp);
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prevList###skuProp###prefixP##Price = ABSTRACT VALUE OVERRIDE FIRST NUMERIC[16,4] (###concrete##Detail);
    prevListBatch###prefixP##Price = ABSTRACT VALUE OVERRIDE FIRST NUMERIC[16,4] (###concrete##Detail);
    
    prevListBatch###prefixP##Price(###concrete##Detail detail) += prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                           batch(detail),
                                                                                                           stockProp(detail),
                                                                                                           dateTime(detail));
    prevList###skuProp###prefixP##Price(###concrete##Detail detail) += prevPriceB[PriceListType,###skuProp,Stock,DATETIME](SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                 skuProp(detail),
                                                                                                 stockProp(detail),
                                                                                                 dateTime(detail));
                                                                                                     
    prefixP##Price (###concrete##Detail detail)  <- round2(IF batch(detail)    
                                                    THEN prevListBatch###prefixP##Price(detail)
                                                    ELSE prevList###skuProp###prefixP##Price(detail))
        WHEN DO CHANGED(skuProp(detail)) OR
             CHANGED(stockProp(detail)) OR
             CHANGED(dateTime(detail)) OR
             CHANGED(batch(detail));
END
META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END
META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra (concrete, priceListTypeProp, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatchExtra (concrete, priceListTypeProp, , , skuProp, stockProp);
END

dialogPriceListType = DATA LOCAL LedgerPriceListType (Sku, Stock);
nameDialogPriceListType 'Вид цены' = name[PriceListType](dialogPriceListType(Sku sku, Stock stock));

relation(s,st,t) = GROUP SUM 1 IF sku(PriceListLedger pl) == Sku s AND isPosted(pl) AND active(pl, LedgerPriceListType t)
    AND in(pl,Stock st) AND price(pl,t) BY s,st,t;
CONSTRAINT dialogPriceListType(Sku s,Stock st) AND NOT relation(s,st,dialogPriceListType(s,st))
    CHECKED BY dialogPriceListType[Sku,Stock] MESSAGE 'Выбран вид цены, по которому нет истории изменения по данному товару';

FORM movementPriceSkuStock 'Изменение цены товара по складу'
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) READONLY name

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR name
    PROPERTIES(s,st) nameDialogPriceListType

    OBJECTS pp = (t = LedgerPriceListType, pl = PriceListLedger)
    PROPERTIES READONLY  name[PriceListType](t),  description(pl), fromDateTime(pl, t, st), toDateTime(pl, t, st),
                        price(pl, t, st) 
    PROPERTIES(pl) edit                     
    ORDER BY name(t), fromDateTime(pl, t, st)

    FILTERS sku(pl, t, st) == s,
            active(pl, t, st),
            (t IS PriceListType AND NOT dialogPriceListType(s,st)) OR dialogPriceListType(s,st) == t

;
DESIGN movementPriceSkuStock {
    main {
        preferredSize = (1024, 768);
        NEW topContainer{
            type = CONTAINERH;
            MOVE s.box;
            MOVE st.box;
        }
        NEW dialog {
            caption = 'Вид цен';
            MOVE PROPERTY(nameDialogPriceListType(s,st));
        }
        MOVE pp.box;
        PROPERTY(name(s)) { focusable = FALSE;}
        PROPERTY(name(t)) { caption = 'Вид цен';}
    }
    MOVE functions.box;
}

// --
dialogSupplier = DATA LOCAL LegalEntity (Sku, Stock);
nameDialogSupplier 'Поставщик' = name(dialogSupplier(Sku sku, Stock stock));

relationCompany(s,st,c) = GROUP SUM 1 IF sku(PriceListLedger pl) == Sku s AND isPosted(pl) AND active(pl)
    AND in(pl,Stock st) BY s,st,company(pl);

CONSTRAINT dialogSupplier(Sku s,Stock st) AND NOT isSupplier(dialogSupplier(s,st))
    CHECKED BY dialogSupplier[Sku,Stock] MESSAGE 'Выбран организация, которая не является поставщиком';
CONSTRAINT dialogSupplier(Sku s,Stock st) AND NOT relationCompany(s,st,dialogSupplier(s,st))
    CHECKED BY dialogSupplier[Sku,Stock] MESSAGE 'Выбран организация, по которой нет истории изменения по данному товару';

FORM movementPriceSkuStockSupplier 'Изменение цены товара по складу и поставщику'
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) READONLY name

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) SELECTOR name
    PROPERTIES(s,st) nameDialogPriceListType, nameDialogSupplier

    OBJECTS pp = (t = LedgerPriceListType, pl = PriceListLedger)
    PROPERTIES READONLY  name[PriceListType](t),  description(pl), nameCompany(pl), fromDateTime(pl, t, st), toDateTime(pl, t, st),
                        price(pl, t, st) 
    PROPERTIES(pl) edit                     
    ORDER BY name(t), fromDateTime(pl, t, st)

    FILTERS sku(pl, t, st) == s,
            active(pl, t, st),
            (t IS PriceListType AND NOT dialogPriceListType(s,st)) OR dialogPriceListType(s,st) == t,
            (pl IS PriceListLedger AND NOT dialogSupplier(s,st)) OR dialogSupplier(s,st) == company(pl)

;
DESIGN movementPriceSkuStockSupplier {
    main {
        preferredSize = (1024, 768);
        NEW topContainer{
            type = CONTAINERH;
            NEW left {
                type = CONTAINERV;
                MOVE s.box;
                NEW dialog1 {
                    caption = 'Вид цен';
                    MOVE PROPERTY(nameDialogPriceListType(s,st));
                }
            }
            NEW reight {
                type = CONTAINERV;
                MOVE st.box;
                NEW dialog2 {
                    caption = 'Поставщик';
                    MOVE PROPERTY(nameDialogSupplier(s,st));
                }
            }
            
        }

        MOVE pp.box;
        PROPERTY(name(s)) { focusable = FALSE;}
        PROPERTY(name(t)) { caption = 'Вид цен';}
    }
    MOVE functions.box;
}

//--
FORM movementPriceSkuStocks 'Изменение цены товара'
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) READONLY name

    OBJECTS pp = (t = PriceListType, pl = PriceListLedger, st = Stock)
    PROPERTIES READONLY  name(t), name(st), description(pl),  fromDateTime(pl, t, st), toDateTime(pl, t, st),
                        price(pl, t, st) 
    PROPERTIES(pl) edit                     
    ORDER BY name(st), name(t), fromDateTime(pl, t, st)

    FILTERS sku(pl, t, st) == s,
            active(pl, t, st)
;
DESIGN movementPriceSkuStocks {
    main {
        preferredSize = (1024, 768);
        MOVE s.box;
        MOVE pp.box;
        PROPERTY(name(s)) { focusable = FALSE;}
        PROPERTY(name(st)) { caption = 'Склад';}
        PROPERTY(name(t)) { caption = 'Вид цен';}
    }
    MOVE functions.box;
}

META defineMovementPriceSku(detail, stockProp)
    showMovementPriceSkuStock 'Показать изменение цены товара по складу' (###detail detail) = ACTION
        FOR s == sku(detail) AND st == stockProp(detail) DO
            NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s, st = st 
    SHORTCUT nameSku[###detail];
    
    showMovementPriceSkuStocks 'Показать изменение цены товара' (###detail detail) = ACTION
        FOR s == sku(detail) DO 
            NEWSESSION SHOW movementPriceSkuStocks OBJECTS s = s 
    SHORTCUT nameSku[###detail];
END
META defineMovementPriceSku(detail)
    showMovementPriceSkuStock 'Показать изменение цены товара по складу' (###detail detail) = ACTION
        FOR s == sku(detail) DO
            NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s 
    SHORTCUT nameSku[###detail];
    
    showMovementPriceSkuStocks 'Показать изменение цены товара' (###detail detail) = ACTION
        FOR s == sku(detail) DO
            NEWSESSION SHOW movementPriceSkuStocks OBJECTS s = s 
    SHORTCUT nameSku[###detail];
END

showMovementPriceSku 'Показать изменение цены товара по складу' (Sku sku, Stock stock) = ACTION NEWSESSION SHOW movementPriceSkuStock OBJECTS s = sku, st = stock ;
showBalancePriceSku(Sku sku, Stock stock) += ACTION showMovementPriceSku(sku, stock); 
showMovementPriceSkuStocks 'Показать изменение цены товара по складу' (Sku sku) = ACTION NEWSESSION SHOW movementPriceSkuStock OBJECTS s = sku ;
showMovementPriceStocks 'Показать изменение цены товара' (Sku sku) = ACTION NEWSESSION SHOW movementPriceSkuStocks OBJECTS s = sku  SHORTCUT name[Sku];

showMovementPriceSku 'Показать изменение цены товара по складу' (Batch batch, Stock stock) = ACTION
    FOR s == sku(batch) DO
        NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s, st = stock ;

showMovementPriceSkuStocks 'Показать изменение цены товара по складу' (Batch batch) = ACTION
    FOR s == sku(batch) DO 
        NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s 
SHORTCUT nameSku[Batch];

showMovementPriceStocks 'Показать изменение цены товара' (Batch batch) = ACTION
    FOR s == sku(batch) DO
        NEWSESSION SHOW movementPriceSkuStocks OBJECTS s = s 
SHORTCUT nameSku[Batch];

showMovementPriceSkuStock 'Показать изменение цены товара по складу возникновения партии' (Batch batch) = ACTION
    FOR s == sku(batch) AND st == stock(batch) DO
        NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s, st = st 
SHORTCUT nameSku[Batch];

@extendFormFilterStockAccess(st, movementPriceSkuStock);
@extendFormFilterStockAccess(st, movementPriceSkuStocks);
@extendFormFilterStockAccess(st, movementPriceSkuStockSupplier);

filterReportStock  = DATA LOCAL Stock ();
nameFilterReportStock 'Склад' = name(filterReportStock()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
  
CONSTRAINT  filterReportStock() AND NOT isCompany(filterReportStock())
    CHECKED BY filterReportStock[] MESSAGE 'Выбран склад, который не является складом компании';
  
filterReportLedgerPriceListType  = DATA LOCAL LedgerPriceListType ();
nameFilterReportLedgerPriceListType 'Вид цены' = name[PriceListType](filterReportLedgerPriceListType()) MINCHARWIDTH 15 PREFCHARWIDTH 20; 

filterReportSku = DATA LOCAL Sku ();
nameFilterReportSku 'SKU' = name(filterReportSku()) MINCHARWIDTH 15 PREFCHARWIDTH 20; 

FORM priceTypeLedgerSkuStock 'Регистр цен'

    OBJECTS dates = (dFrom = DATE , dTo = DATE) FIXED PANEL
    PROPERTIES valFrom = OBJVALUE(dFrom), valTo = OBJVALUE(dTo), nameFilterReportStock(), nameFilterReportLedgerPriceListType(),
               nameFilterReportSku()       

    OBJECTS pp = (t = LedgerPriceListType, pl = PriceListLedger, st = Stock)
    PROPERTIES READONLY name[PriceListType](t),  name(st), nameSku(pl), description(pl), fromDateTime(pl, t, st), toDateTime(pl, t, st),
                        price(pl, t, st) 
    PROPERTIES(pl) edit                     
//    ORDER BY fromDateTimePriceListLedger(pl)

    FILTERS fromDateTime(pl, t, st) >= DATETIME(dFrom),
            fromDateTime(pl, t, st) < DATETIME(sum(dTo, 1)),                       
            filterReportStock() == st OR (st IS Stock AND NOT filterReportStock()),
            filterReportLedgerPriceListType() == t OR (t IS PriceListType AND NOT filterReportLedgerPriceListType()),
            filterReportSku() == sku(pl, t, st) OR (pl IS PriceListLedger AND NOT filterReportSku())
;
DESIGN priceTypeLedgerSkuStock {
    main {
        MOVE dates.box {        
            caption = 'Период';
            type = CONTAINERH;
        }
        NEW filter {
            caption = 'Фильтры';
            type = CONTAINERH;
            MOVE PROPERTY(nameFilterReportStock());
            MOVE PROPERTY(nameFilterReportLedgerPriceListType());
            MOVE PROPERTY(nameFilterReportSku());
        }
        MOVE pp.box;
    }
    MOVE functions.box;
}

NAVIGATOR {
    priceListReport  {
        ADD priceTypeLedgerSkuStock;
    }       
}
