MODULE PriceListLedger;

REQUIRE PriceListType;

NAMESPACE PriceList;

CLASS ABSTRACT LedgerPriceListType 'Регистровый вид цены' : BasePriceListType;

nameLedgerPriceListType 'Наименование' = ABSTRACT ISTRING[100](LedgerPriceListType);
nameBasePriceListType(type) += nameLedgerPriceListType(type) IF type IS LedgerPriceListType;

batchLedgerPriceListType 'Использовать для партий свои цены' = ABSTRACT CASE BOOLEAN (PriceListType) PERSISTENT;

CLASS ABSTRACT PriceListLedger 'Изменение цены';
TABLE priceListLedger(PriceListLedger);

fromDateTimePriceListLedger 'Дата/время с' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;
toDateTimePriceListLedger 'Дата/время по' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;

isPostedPriceListLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;
skipPriceListLedger 'Не изменять значение' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;

activePriceListLedger 'Активен' (ledger) = isPostedPriceListLedger(ledger) AND NOT skipPriceListLedger(ledger) PERSISTENT;

skuPriceListLedger = ABSTRACT Sku (PriceListLedger) PERSISTENT INDEXED;
batchPriceListLedger = ABSTRACT Batch (PriceListLedger) PERSISTENT INDEXED;

descriptionPriceListLedger 'Описание' = ABSTRACT STRING[200] (PriceListLedger) PERSISTENT;

companyPriceListLedger = ABSTRACT LegalEntity (PriceListLedger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListType(PriceListLedger, LedgerPriceListType);
inPriceListLedgerLedgerPriceListType = ABSTRACT BOOLEAN (PriceListLedger, LedgerPriceListType) PERSISTENT;
pricePriceListLedgerLedgerPriceListType 'Цена' = ABSTRACT NUMERIC[14,2] (PriceListLedger, LedgerPriceListType) PERSISTENT;

TABLE priceListLedgerStock(PriceListLedger, Stock);
inPriceListLedgerStock (ledger, stock) = ABSTRACT BOOLEAN (PriceListLedger, Stock);

stocksPriceListLedger 'Склады' (priceList) = GROUP CONCAT nameStock(stock) IF inPriceListLedgerStock(priceList, stock) , ', '
                                                   BY priceList
                                                   ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 160;

orderPriceListLedger(ledger) = STRUCT(fromDateTimePriceListLedger(ledger), ledger) IF activePriceListLedger(ledger) PERSISTENT;


// ------------------ Расчет цен для sku ---------------- //

orderPriceListLedgerLedgerPriceListType(ledger, type) = orderPriceListLedger(ledger) IF inPriceListLedgerLedgerPriceListType(ledger, type) PERSISTENT;

concatLedgerPriceListTypeSkuDateTime(type, sku, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), dateTimeIn;

priceListLedgerLedgerPriceListTypeSkuDateTime(type, sku, dateTime) =
    concatLedgerPriceListTypeSkuDateTime(type, sku, dateTime)[2];

priceLedgerPriceListTypeSkuDateTime 'Цена' (type, sku, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeSkuDateTime(type, sku, dateTime), type);

companyLedgerPriceListTypeSkuDateTime (type, sku, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuDateTime(type, sku, dateTime));
nameCompanyLedgerPriceListTypeSkuDateTime 'Компания прайса' (type, sku, dateTime) =
    nameLegalEntity(companyLedgerPriceListTypeSkuDateTime(type, sku, dateTime));

descriptionLedgerPriceListTypeSkuDateTime 'Описание' (type, sku,  dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeSkuDateTime(type, sku, dateTime));

// ------------------ Расчет цен для sku / company ---------------- //

concatLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn;

priceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    concatLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)[2];

priceLedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime), type);

companyLedgerPriceListTypeSkuCompanyDateTime (type, sku, company, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));
nameCompanyLedgerPriceListTypeSkuCompanyDateTime 'Компания прайса' (type, sku, company, dateTime) =
    nameLegalEntity(companyLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

descriptionLedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

// Только с ценами

activeConcatLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type) IF pricePriceListLedgerLedgerPriceListType(ledger, type)
              AND fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn;

activePriceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    activeConcatLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)[2];

activePriceLedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(activePriceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime), type);

activeDescriptionLedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    descriptionPriceListLedger(activePriceListLedgerLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

// ------------------ Расчет цен для sku / stock / datetime

TABLE priceListLedgerLedgerPriceListTypeStock (PriceListLedger, LedgerPriceListType, Stock);
orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) =
    orderPriceListLedger(ledger) IF inPriceListLedgerLedgerPriceListType(ledger, type) AND inPriceListLedgerStock(ledger, stock) PERSISTENT INDEXED;

concatLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn;
priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

concatLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, batchPriceListLedger(ledger), stock, dateTimeIn;
priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    IF batchLedgerPriceListType(type) THEN concatLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)[2]
                                      ELSE priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceLedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type);
priceLedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime), type);

companyLedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
nameCompanyLedgerPriceListTypeSkuStockDateTime 'Компания прайса' (type, sku, stock, dateTime) =
    nameLegalEntity(companyLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
companyLedgerPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    companyPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime));
nameCompanyLedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    nameLegalEntity(companyLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

descriptionLedgerPriceListTypeSkuStockDateTime 'Описание' (type, sku, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
descriptionLedgerPriceListTypeBatchStockDateTime 'Описание' (type, batch, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

// ------------------ Расчет цен для sku / stock / company / datetime

concatLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), stock, companyPriceListLedger(ledger), dateTimeIn;
priceListLedgerLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime) =
    concatLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)[2];

priceLedgerPriceListTypeSkuStockCompanyDateTime 'Цена' (type, sku, stock, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime), type);

countStockPriceListTypeSkuCompanyDateTime 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)
    BY type, sku, company, dateTime;

includeVATLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (LedgerPriceListType);

priceBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

includeVATBasePriceListType(type) += includeVATLedgerPriceListType(type);

// ------ оптимизация для ассортиментов
ledgerPriceListTypePriceListType = ABSTRACT LedgerPriceListType (PriceListType) PERSISTENT;

ledgerPriceListTypePriceListType(type) += type AS LedgerPriceListType;

// --------------------------- Системные виды цен, на основе Ledger'ов ------------------ //

CLASS SystemLedgerPriceListType 'Системный вид цены (регистр)' {
    accountPriceListType 'Учетная'
}: LedgerPriceListType;

nameLedgerPriceListType (type) += staticCaption(type) IF type IS SystemLedgerPriceListType;

batchLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;

includeVATSystemLedgerPriceListType 'Цена с НДС' = ABSTRACT CASE BOOLEAN (SystemLedgerPriceListType);
includeVATLedgerPriceListType (type) += includeVATSystemLedgerPriceListType(type);

inPriceListLedgerSystemLedgerPriceListType = ABSTRACT CASE BOOLEAN (PriceListLedger, SystemLedgerPriceListType) PERSISTENT;
pricePriceListLedgerSystemLedgerPriceListType = ABSTRACT CASE NUMERIC[14,2] (PriceListLedger, SystemLedgerPriceListType) PERSISTENT;
inPriceListLedgerLedgerPriceListType(ledger, type) += inPriceListLedgerSystemLedgerPriceListType(ledger, type);
pricePriceListLedgerLedgerPriceListType(ledger, type) += pricePriceListLedgerSystemLedgerPriceListType(ledger, type);

//Учетные цены и суммы для партий
costPriceBBatchStockDate 'Цена товара в партии на начало дня' (batch, stock, date) =
    prevPricePriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(date));
costPriceABatchStockDate 'Цена товара в партии на конец дня' (batch, stock, date) =
    prevPricePriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(sumDate(date,1)));
costSumBBatchStockDate 'Сумма на начало дня' (batch, stock, date) =
    balanceBBatchStockDate(batch, stock, date) * costPriceBBatchStockDate(batch, stock, date);
costSumABatchStockDate 'Сумма на конец дня' (batch, stock, date) =
    balanceABatchStockDate(batch, stock, date) * costPriceABatchStockDate(batch, stock, date);
costSumBBatchesStockDate 'Сумма склада(по партиям) на начало дня' (stock, date) =
    GROUP SUM costSumBBatchStockDate(batch, stock, date)
    BY stock, date;
costSumABatchesStockDate 'Сумма склада(по партиям) на конец дня' (stock, date) =
    GROUP SUM costSumABatchStockDate(batch, stock, date)
    BY stock, date;
costSumBSkuGroupBatchStockDate 'Сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM costSumBBatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;
costSumASkuGroupBatchStockDate 'Сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM costSumABatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;

// --------------------------- Формы ---------------------------- //

EXTEND FORM priceListTypes
    PROPERTIES(pt, sk, s, dt) READONLY nameCompanyLedgerPriceListTypeSkuStockDateTime, descriptionLedgerPriceListTypeSkuStockDateTime
    PROPERTIES(pt, b, s, dt) READONLY nameCompanyLedgerPriceListTypeBatchStockDateTime, descriptionLedgerPriceListTypeBatchStockDateTime
;

// ----------------------------- Метакоды ------------------------ //

// Implement
META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp, prefix)
    EXTEND CLASS objectClass : PriceListLedger;

    fromDateTimePriceListLedger (ledger) += dateTime###objectClass(ledger);

    isPostedPriceListLedger(ledger) += isPosted###objectClass(ledger);

    skuPriceListLedger (ledger) += sku###objectClass(ledger);

    descriptionPriceListLedger (ledger) += description###objectClass(ledger);

    companyPriceListLedger (ledger) += companyProp###objectClass(ledger);

    inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(prefix###price###objectClass(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType THEN TRUE;
    pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(prefix###price###objectClass(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType THEN prefix###price###objectClass(ledger);

    inPriceListLedgerStock (ledger, stock) += stockProp###objectClass(ledger) == stock;
END

META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp, );
END

META implementSystemLedgerPriceListTypeBatch (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp);
    batchPriceListLedger (ledger) += ledger AS objectClass;
END

// Derive
META deriveDocumentDetailPriceSystemLedgerPriceListType (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                           skuProp###concrete##Detail(detail),
                                                                                           stockProp###concrete##Detail(detail),
                                                                                           dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- IF prefixB###batch###concrete##Detail(detail)

                                                    THEN prevPricePriceListTypeBatchStockDateTime (SystemLedgerPriceListType.##priceListTypeProp,
                                                                                               prefixB###batch###concrete##Detail(detail),
                                                                                               stockProp###concrete##Detail(detail),
                                                                                               dateTime###concrete##Detail(detail))
                                                    ELSE prevPricePriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                           prefixB###skuProp###concrete##Detail(detail),
                                                                                           stockProp###concrete##Detail(detail),
                                                                                           dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(prefixB###skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail)) OR
                                                         CHANGED(prefixB###batch###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, , , skuProp, stockProp);
END
