MODULE PriceListLedger;

REQUIRE PriceListType, Historizable;

NAMESPACE PriceList;

CLASS ABSTRACT LedgerPriceListType 'Регистровый вид цены' : BasePriceListType;

nameLedgerPriceListType 'Наименование' = ABSTRACT VARISTRING[100](LedgerPriceListType) IN recognize;
nameBasePriceListType(type) += nameLedgerPriceListType(type) IF type IS LedgerPriceListType;

batchLedgerPriceListType 'Использовать для партий свои цены' = ABSTRACT CASE BOOLEAN (PriceListType) PERSISTENT;

CLASS ABSTRACT PriceListLedger 'Изменение цены';
TABLE priceListLedger(PriceListLedger);

fromDateTimePriceListLedger 'Дата/время с' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;
toDateTimePriceListLedger 'Дата/время по' = ABSTRACT DATETIME (PriceListLedger) PERSISTENT INDEXED;

isPostedPriceListLedger 'Проведен' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;
skipPriceListLedger 'Не изменять значение' (ledger) = ABSTRACT BOOLEAN (PriceListLedger) PERSISTENT;

activePriceListLedger 'Активен' (ledger) = isPostedPriceListLedger(ledger) AND NOT skipPriceListLedger(ledger) PERSISTENT;

skuPriceListLedger = ABSTRACT Sku (PriceListLedger) PERSISTENT INDEXED;
batchPriceListLedger = ABSTRACT Batch (PriceListLedger) PERSISTENT INDEXED;

descriptionPriceListLedger 'Описание' = ABSTRACT VARSTRING[200] (PriceListLedger) PERSISTENT;

companyPriceListLedger = ABSTRACT LegalEntity (PriceListLedger) PERSISTENT;

TABLE priceListLedgerLedgerPriceListType(PriceListLedger, LedgerPriceListType);
inPriceListLedgerLedgerPriceListType = ABSTRACT BOOLEAN (PriceListLedger, LedgerPriceListType) PERSISTENT;
pricePriceListLedgerLedgerPriceListType 'Цена' = ABSTRACT NUMERIC[14,2] (PriceListLedger, LedgerPriceListType) PERSISTENT;

priceListTypesPriceListLedger 'Цены' (priceList) = GROUP CONCAT nameLedgerPriceListType(type) IF inPriceListLedgerLedgerPriceListType(priceList, type) , ', '
                                                                BY priceList
                                                                ORDER type MINCHARWIDTH 20 PREFCHARWIDTH 40;

inPriceListLedgerStock (ledger, stock) = ABSTRACT BOOLEAN (PriceListLedger, Stock);

stocksPriceListLedger 'Склады' (priceList) = GROUP CONCAT nameStock(stock) IF inPriceListLedgerStock(priceList, stock) , ', '
                                                   BY priceList
                                                   ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 160;

orderPriceListLedger(ledger) = STRUCT(fromDateTimePriceListLedger(ledger), ledger) IF activePriceListLedger(ledger) PERSISTENT;

// История
timeCreatedPriceListLedger 'Время создания'= ABSTRACT DATETIME (PriceListLedger) IN historyGroup;

userCreatedPriceListLedger = ABSTRACT CustomUser (PriceListLedger);
nameUserCreatedPriceListLedger 'Пользователь' (historizable) = nameContact (userCreatedPriceListLedger(historizable)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN historyGroup;

computerCreatedPriceListLedger = ABSTRACT Computer (PriceListLedger);
hostnameComputerCreatedPriceListLedger 'Компьютер' (historizable) = hostnameComputer (computerCreatedPriceListLedger(historizable)) MINCHARWIDTH 10 PREFCHARWIDTH 20 IN historyGroup;

// ------------------ Расчет цен для sku ---------------- //

orderPriceListLedgerLedgerPriceListType(ledger, type) = orderPriceListLedger(ledger) IF inPriceListLedgerLedgerPriceListType(ledger, type) PERSISTENT;

concatBLedgerPriceListTypeSkuDateTime(type, sku, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn
          BY type, skuPriceListLedger(ledger), dateTimeIn;

concatALedgerPriceListTypeSkuDateTime(type, sku, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type)
              IF fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), dateTimeIn;

priceListLedgerBLedgerPriceListTypeSkuDateTime(type, sku, dateTime) =
    concatBLedgerPriceListTypeSkuDateTime(type, sku, dateTime)[2];

priceListLedgerALedgerPriceListTypeSkuDateTime(type, sku, dateTime) =
    concatALedgerPriceListTypeSkuDateTime(type, sku, dateTime)[2];

priceBLedgerPriceListTypeSkuDateTime 'Цена' (type, sku, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerBLedgerPriceListTypeSkuDateTime(type, sku, dateTime), type);

priceALedgerPriceListTypeSkuDateTime 'Цена' (type, sku, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerALedgerPriceListTypeSkuDateTime(type, sku, dateTime), type);

companyBLedgerPriceListTypeSkuDateTime (type, sku, dateTime) =
    companyPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuDateTime(type, sku, dateTime));
nameCompanyBLedgerPriceListTypeSkuDateTime 'Компания прайса' (type, sku, dateTime) =
    nameLegalEntity(companyBLedgerPriceListTypeSkuDateTime(type, sku, dateTime));

companyALedgerPriceListTypeSkuDateTime (type, sku, dateTime) =
    companyPriceListLedger(priceListLedgerALedgerPriceListTypeSkuDateTime(type, sku, dateTime));
nameCompanyALedgerPriceListTypeSkuDateTime 'Компания прайса' (type, sku, dateTime) =
    nameLegalEntity(companyALedgerPriceListTypeSkuDateTime(type, sku, dateTime));

descriptionBLedgerPriceListTypeSkuDateTime 'Описание' (type, sku,  dateTime) =
    descriptionPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuDateTime(type, sku, dateTime));

descriptionALedgerPriceListTypeSkuDateTime 'Описание' (type, sku,  dateTime) =
    descriptionPriceListLedger(priceListLedgerALedgerPriceListTypeSkuDateTime(type, sku, dateTime));

// ------------------ Расчет цен для sku / company ---------------- //

concatBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn;

concatALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type)
              IF fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn;

priceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    concatBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)[2];

priceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    concatALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)[2];

priceBLedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime), type);

priceALedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime), type);

companyBLedgerPriceListTypeSkuCompanyDateTime (type, sku, company, dateTime) =
    companyPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));
nameCompanyBLedgerPriceListTypeSkuCompanyDateTime 'Компания прайса' (type, sku, company, dateTime) =
    nameLegalEntity(companyBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

companyALedgerPriceListTypeSkuCompanyDateTime (type, sku, company, dateTime) =
    companyPriceListLedger(priceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));
nameCompanyALedgerPriceListTypeSkuCompanyDateTime 'Компания прайса' (type, sku, company, dateTime) =
    nameLegalEntity(companyALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

descriptionBLedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    descriptionPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

descriptionALedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    descriptionPriceListLedger(priceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

// Только с ценами

activeConcatBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type) IF pricePriceListLedgerLedgerPriceListType(ledger, type)
              AND fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn;

activeConcatALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListType(ledger, type) IF pricePriceListLedgerLedgerPriceListType(ledger, type)
              AND fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), companyPriceListLedger(ledger), dateTimeIn;

activePriceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    activeConcatBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)[2];

activePriceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime) =
    activeConcatALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)[2];

activePriceBLedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(activePriceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime), type);

activePriceALedgerPriceListTypeSkuCompanyDateTime 'Цена' (type, sku, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(activePriceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime), type);

activeDescriptionBLedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    descriptionPriceListLedger(activePriceListLedgerBLedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

activeDescriptionALedgerPriceListTypeSkuCompanyDateTime 'Описание' (type, sku, company, dateTime) =
    descriptionPriceListLedger(activePriceListLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime));

// ------------------ Расчет цен для sku / stock / datetime

TABLE priceListLedgerLedgerPriceListTypeStock (PriceListLedger, LedgerPriceListType, Stock);
orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) =
    orderPriceListLedger(ledger) IF inPriceListLedgerLedgerPriceListType(ledger, type) AND inPriceListLedgerStock(ledger, stock) PERSISTENT INDEXED;

// По товарам
concatBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn;

concatALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn;

priceListLedgerBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

priceListLedgerALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
    concatALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)[2];

priceBLedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type) COMPLEX;

priceALedgerPriceListTypeSkuStockDateTime 'Цена' (type, sku, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime), type) COMPLEX;

companyBLedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    companyPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
nameCompanyBLedgerPriceListTypeSkuStockDateTime 'Компания прайса' (type, sku, stock, dateTime) =
    nameLegalEntity(companyBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));

companyALedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    companyPriceListLedger(priceListLedgerALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));
nameCompanyALedgerPriceListTypeSkuStockDateTime 'Компания прайса' (type, sku, stock, dateTime) =
    nameLegalEntity(companyALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));

descriptionBLedgerPriceListTypeSkuStockDateTime 'Описание' (type, sku, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));

descriptionALedgerPriceListTypeSkuStockDateTime 'Описание' (type, sku, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime));

// По партиям
concatBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn
          BY type, batchPriceListLedger(ledger), stock, dateTimeIn;

concatALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, batchPriceListLedger(ledger), stock, dateTimeIn;

priceListLedgerBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    IF batchLedgerPriceListType(type) THEN concatBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)[2]
                                      ELSE priceListLedgerBLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceListLedgerALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
    IF batchLedgerPriceListType(type) THEN concatALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)[2]
                                      ELSE priceListLedgerALedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime);

priceBLedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime), type) COMPLEX;

priceALedgerPriceListTypeBatchStockDateTime 'Цена' (type, batch, stock, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime), type) COMPLEX;

companyBLedgerPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    companyPriceListLedger(priceListLedgerBLedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime));
nameCompanyBLedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    nameLegalEntity(companyBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

companyALedgerPriceListTypeBatchStockDateTime (type, batch, stock, dateTime) =
    companyPriceListLedger(priceListLedgerALedgerPriceListTypeSkuStockDateTime(type, skuBatch(batch), stock, dateTime));
nameCompanyALedgerPriceListTypeBatchStockDateTime 'Компания прайса' (type, batch, stock, dateTime) =
    nameLegalEntity(companyALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

descriptionBLedgerPriceListTypeBatchStockDateTime 'Описание' (type, batch, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

descriptionALedgerPriceListTypeBatchStockDateTime 'Описание' (type, batch, stock, dateTime) =
    descriptionPriceListLedger(priceListLedgerALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime));

// ------------------ Расчет цен для sku / stock / company / datetime

concatBLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) < dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn
          BY type, skuPriceListLedger(ledger), stock, companyPriceListLedger(ledger), dateTimeIn;

concatALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime) =
    GROUP MAX orderPriceListLedgerLedgerPriceListTypeStock(ledger, type, stock)
              IF fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) <= dateTimeIn
          BY type, skuPriceListLedger(ledger), stock, companyPriceListLedger(ledger), dateTimeIn;

priceListLedgerBLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime) =
    concatBLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)[2];

priceListLedgerALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime) =
    concatALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)[2];

priceBLedgerPriceListTypeSkuStockCompanyDateTime 'Цена' (type, sku, stock, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerBLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime), type);

priceALedgerPriceListTypeSkuStockCompanyDateTime 'Цена' (type, sku, stock, company, dateTime) =
    pricePriceListLedgerLedgerPriceListType(priceListLedgerALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime), type);

countStockBPriceListTypeSkuCompanyDateTime 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceBLedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)
    BY type, sku, company, dateTime;

countStockAPriceListTypeSkuCompanyDateTime 'Кол-во складов' (type, sku, company, dateTime) =
    GROUP SUM 1 IF priceALedgerPriceListTypeSkuStockCompanyDateTime(type, sku, stock, company, dateTime)
    BY type, sku, company, dateTime;

// ------- НДС --- //

includeVATLedgerPriceListType 'Цена с НДС' = ABSTRACT BOOLEAN (LedgerPriceListType);
includeVATBasePriceListType(type) += includeVATLedgerPriceListType(type);

// ------------------ Связь с базовым видом цен ------------- //

priceBBasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceBLedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);
priceABasePriceListTypeSkuStockDateTime(type, sku, stock, dateTime) += priceALedgerPriceListTypeSkuStockDateTime(type, sku, stock, dateTime);

priceBBasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceBLedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);
priceABasePriceListTypeBatchStockDateTime(type, batch, stock, dateTime) += priceALedgerPriceListTypeBatchStockDateTime(type, batch, stock, dateTime);

// ------ оптимизация для ассортиментов
ledgerPriceListTypePriceListType = ABSTRACT LedgerPriceListType (PriceListType) PERSISTENT;

ledgerPriceListTypePriceListType(type) += type AS LedgerPriceListType;

// --------------------------- Системные виды цен, на основе Ledger'ов ------------------ //

CLASS SystemLedgerPriceListType 'Системный вид цены (регистр)' {
    accountPriceListType 'Учетная'
}: LedgerPriceListType;

nameLedgerPriceListType (type) += VARISTRING[100](staticCaption(type)) IF type IS SystemLedgerPriceListType;

batchLedgerPriceListType(type) += WHEN type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;

includeVATSystemLedgerPriceListType 'Цена с НДС' = ABSTRACT CASE BOOLEAN (SystemLedgerPriceListType);
includeVATLedgerPriceListType (type) += includeVATSystemLedgerPriceListType(type);

inPriceListLedgerSystemLedgerPriceListType = ABSTRACT CASE BOOLEAN (PriceListLedger, SystemLedgerPriceListType) PERSISTENT;
pricePriceListLedgerSystemLedgerPriceListType = ABSTRACT CASE NUMERIC[14,2] (PriceListLedger, SystemLedgerPriceListType) PERSISTENT;
inPriceListLedgerLedgerPriceListType(ledger, type) += inPriceListLedgerSystemLedgerPriceListType(ledger, type);
pricePriceListLedgerLedgerPriceListType(ledger, type) += pricePriceListLedgerSystemLedgerPriceListType(ledger, type);

//Учетные цены и суммы для партий
accountPriceBBatchStockDate 'Учетная цена товара в партии на начало дня' (batch, stock, date) =
    prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(date));
accountPriceABatchStockDate 'Учетная цена товара в партии на конец дня' (batch, stock, date) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, toDateTime(sumDate(date,1)));
accountSumBBatchStockDate 'Учетная сумма на начало дня' (batch, stock, date) =
    balanceBBatchStockDate(batch, stock, date) * accountPriceBBatchStockDate(batch, stock, date);
accountSumABatchStockDate 'Учетная сумма на конец дня' (batch, stock, date) =
    balanceABatchStockDate(batch, stock, date) * accountPriceABatchStockDate(batch, stock, date);
accountSumBBatchesStockDate 'Учетная сумма склада(по партиям) на начало дня' (stock, date) =
    GROUP SUM accountSumBBatchStockDate(batch, stock, date)
    BY stock, date;
accountSumABatchesStockDate 'Учетная сумма склада(по партиям) на конец дня' (stock, date) =
    GROUP SUM accountSumABatchStockDate(batch, stock, date)
    BY stock, date;

accountSumBSkuGroupBatchStockDate 'Учетная сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumBBatchStockDate(batch, stock, date)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, date;
accountSumRecBSkuGroupBatchStockDate 'Учетная сумма на начало дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumBBatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;

accountSumASkuGroupBatchStockDate 'Учетная сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumABatchStockDate(batch, stock, date)
    BY groupGroupTypeSku(groupType, skuBatch(batch)), stock, date;
accountSumRecASkuGroupBatchStockDate 'Учетная сумма на конец дня(по партиям)' (group, stock, date) =
    GROUP SUM accountSumABatchStockDate(batch, stock, date) IF isParentGroupBatch(group, batch)
    BY group, stock, date;

//--
currentAccountPriceBatchStock 'Цена учетная' (batch, stock) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, currentDateTime());
currentAccountSumBatchStock 'Сумма учетная' (batch, stock) =
    currentBalanceBatchStock(batch, stock) * currentAccountPriceBatchStock(batch, stock);

accountPriceBatchStockDateTime 'Цена учетная' (batch, stock, dateTime) =
    prevPriceAPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batch, stock, dateTime);
accountSumBBatchStockDateTime 'Сумма учетная' (batch, stock, dateTime) =
    balanceBBatchStockDateTime(batch, stock, dateTime) * accountPriceBatchStockDateTime(batch, stock, dateTime);

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt,st) READONLY BEFORE dateTimeBatch(bt) currentAccountPriceBatchStock, currentAccountSumBatchStock
;
EXTEND FORM balanceBatchStock
    PROPERTIES(bt,st,t) READONLY BEFORE dateTimeBatch(bt) accountPriceBatchStockDateTime, accountSumBBatchStockDateTime
;
// --------------------------- Формы ---------------------------- //

EXTEND FORM priceListTypes
    PROPERTIES(pt, sk, s, dt) READONLY nameCompanyALedgerPriceListTypeSkuStockDateTime, descriptionALedgerPriceListTypeSkuStockDateTime
    PROPERTIES(pt, b, s, dt) READONLY nameCompanyALedgerPriceListTypeBatchStockDateTime, descriptionALedgerPriceListTypeBatchStockDateTime
;

// ----------------------------- Метакоды ------------------------ //

// Implement
META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp, prefix)
    EXTEND CLASS objectClass : PriceListLedger;

    fromDateTimePriceListLedger (ledger) += dateTime###objectClass(ledger);

    isPostedPriceListLedger(ledger) += isPosted###objectClass(ledger);

    skuPriceListLedger (ledger) += sku###objectClass(ledger);

    descriptionPriceListLedger (ledger) += description###objectClass(ledger);

    companyPriceListLedger (ledger) += companyProp###objectClass(ledger);

    inPriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(prefix###price###objectClass(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType THEN TRUE;
    pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += WHEN CLASS(prefix###price###objectClass(ledger)) AND type == SystemLedgerPriceListType.##type##PriceListType THEN prefix###price###objectClass(ledger);

    inPriceListLedgerStock (ledger, stock) += stockProp###objectClass(ledger) == stock;
END

META implementSystemLedgerPriceListType (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp, );
END

META implementSystemLedgerPriceListTypeBatch (type, objectClass, companyProp, stockProp)
    @implementSystemLedgerPriceListType(type, objectClass, companyProp, stockProp);
    batchPriceListLedger (ledger) += ledger AS objectClass;
END

// Derive
META deriveDocumentDetailPriceSystemLedgerPriceListType (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                            skuProp###concrete##Detail(detail),
                                                                                            stockProp###concrete##Detail(detail),
                                                                                            dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, prefixB, skuProp, stockProp)
    prefixP###price###concrete##Detail (detail)  <- IF prefixB###batch###concrete##Detail(detail)

                                                    THEN prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                   prefixB###batch###concrete##Detail(detail),
                                                                                                   stockProp###concrete##Detail(detail),
                                                                                                   dateTime###concrete##Detail(detail))
                                                    ELSE prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.##priceListTypeProp,
                                                                                                 prefixB###skuProp###concrete##Detail(detail),
                                                                                                 stockProp###concrete##Detail(detail),
                                                                                                 dateTime###concrete##Detail(detail))
                                                    WHEN DO CHANGED(prefixB###skuProp###concrete##Detail(detail)) OR
                                                         CHANGED(stockProp###concrete##Detail(detail)) OR
                                                         CHANGED(dateTime###concrete##Detail(detail)) OR
                                                         CHANGED(prefixB###batch###concrete##Detail(detail));
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, prefixP, , skuProp, stockProp);
END

META deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, skuProp, stockProp)
    @deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch (concrete, priceListTypeProp, , , skuProp, stockProp);
END

dialogPriceListTypeSkuStock = DATA SESSION PriceListType (Sku, Stock);
nameDialogPriceListTypeSkuStock 'Вид цены' = namePriceListType(dialogPriceListTypeSkuStock(sku, stock));

relationSkuStockPriceListType(s,st,t) = GROUP SUM 1 IF skuPriceListLedger(pl) == s AND isPostedPriceListLedger(pl) AND inPriceListLedgerLedgerPriceListType(pl, t)
    AND inPriceListLedgerStock(pl,st) AND pricePriceListLedgerLedgerPriceListType(pl,t) BY s,st,t;
CONSTRAINT dialogPriceListTypeSkuStock(s,st) AND NOT relationSkuStockPriceListType(s,st,dialogPriceListTypeSkuStock(s,st))
    CHECKED BY dialogPriceListTypeSkuStock MESSAGE 'Выбран вид цены, по которому нет истории изменения по данному товару';

FORM movementPriceSkuStock 'Изменение цены товара по складу'
    OBJECTS s = Sku FIXED PANEL
    PROPERTIES(s) READONLY nameSku

    OBJECTS st = Stock FIXED PANEL
    PROPERTIES(st) READONLY nameStock
    PROPERTIES(s,st) nameDialogPriceListTypeSkuStock

    OBJECTS pp = (t = PriceListType, pl = PriceListLedger)
    PROPERTIES READONLY namePriceListType(t),  descriptionPriceListLedger(pl), fromDateTimePriceListLedger(pl), toDateTimePriceListLedger(pl),
                        pricePriceListLedgerLedgerPriceListType(pl,t) FORCE GRID
    ORDER BY namePriceListType, fromDateTimePriceListLedger

    FILTERS skuPriceListLedger(pl) == s,
            isPostedPriceListLedger(pl),
            inPriceListLedgerLedgerPriceListType(pl, t),
            inPriceListLedgerStock(pl,st),
            pricePriceListLedgerLedgerPriceListType(pl,t),
            isCompanyStock(st),
            (t IS PriceListType AND NOT dialogPriceListTypeSkuStock(s,st)) OR dialogPriceListTypeSkuStock(s,st)== t

;
DESIGN movementPriceSkuStock FROM DEFAULT {
    main {
        NEW topContainer{
            childConstraints = TO THE RIGHT;
            ADD s.box;
            ADD st.box;
        }
        NEW dialog {
            caption = 'Вид цен';
            ADD PROPERTY(nameDialogPriceListTypeSkuStock);
        }
        ADD pp.box;

        PROPERTY(nameSku) { focusable = FALSE;}
        PROPERTY(nameStock) { focusable = FALSE;}
        PROPERTY(namePriceListType) { caption = 'Вид цен';}
    }
    ADD functions.box;
}

META defineMovementPriceSku(detail, stockProp)
    showMovementPriceSkuStock###detail 'Показать изменение цены товара по складу' (detail) = ACTION FORM movementPriceSkuStock OBJECTS s = sku###detail(detail), st = stockProp###detail(detail) MODAL SHORTCUT nameSku###detail;
END

@defineMovementPriceSku(batch, stock); //-- показываем по нажатию правой клавиши  изменение цены товара

@extendFormFilterStockAccess(Stock, st, movementPriceSkuStock);
