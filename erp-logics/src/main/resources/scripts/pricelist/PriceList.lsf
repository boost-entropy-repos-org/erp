MODULE PriceList;

REQUIRE PriceListLedger;

NAMESPACE PriceList;

// --------------------------- Пользовательские виды цен ------------------------- //

CLASS DataPriceListType 'Пользовательский вид цены' : LedgerPriceListType;
batchLedgerPriceListType (priceListType) += WHEN priceListType IS DataPriceListType THEN TRUE;

nameDataPriceListType 'Наименование' = DATA ISTRING[50](DataPriceListType);
nameLedgerPriceListType(type) += nameDataPriceListType(type) IF type IS DataPriceListType;

includeVATDataPriceListType 'Цена с НДС' = DATA BOOLEAN (DataPriceListType);
includeVATLedgerPriceListType (priceListType) += includeVATDataPriceListType(priceListType);

@defineDocumentHeaderCurrency(dataPriceListType);
currencyPriceListType(dataPriceListType) += currencyDataPriceListType(dataPriceListType);

FORM dataPriceListType 'Пользовательский вид цен'
    OBJECTS d = DataPriceListType FIXED PANEL
    PROPERTIES(d) nameDataPriceListType, includeVATPriceListType, nameCurrencyDataPriceListType, nameRoundConditionPriceListType

    EDIT DataPriceListType OBJECT d
;

DESIGN dataPriceListType FROM DEFAULT {
    d.box{
        ADD PROPERTY(nameDataPriceListType);
        ADD PROPERTY(includeVATPriceListType);
        ADD PROPERTY(nameCurrencyDataPriceListType);
        ADD PROPERTY(nameRoundConditionPriceListType);
    }
}

FORM dataPriceListTypes 'Пользовательские виды цен'
    OBJECTS p = DataPriceListType
    PROPERTIES(p) READONLY nameDataPriceListType, nameCurrencyDataPriceListType, nameRoundConditionPriceListType
    PROPERTIES(p) READONLY includeVATDataPriceListType

    DIALOG DataPriceListType OBJECT p
;

addDataPriceListType 'Добавить пользовательскую цену' = ACTION ADDFORM DataPriceListType;
editDataPriceListType 'Редактировать' = ACTION EDITFORM DataPriceListType;
editPriceListType(priceListType) += editDataPriceListType(priceListType);

EXTEND FORM priceListTypes
    PROPERTIES() TODRAW pt FORCE PANEL addDataPriceListType
;

// --------------------------- Прайс-листы ------------------------- //

CLASS ABSTRACT PriceList 'Прайс' : Document;
CLASS ABSTRACT PriceListDetail 'Строка прайса' : DocumentDetail;

CLASS UserPriceList 'Прайс (польз.)' : PriceList, Historizable, NumeratedObject;
CLASS UserPriceListDetail 'Строка прайса (польз.)' : PriceListDetail;
CLASS UserPriceListPosted 'Проведенный прайс (польз.)' : UserPriceList, PostedObject;

@defineDocumentInterface(priceList);

// Шапка

@defineDocumentInterfaceDataTimePrefix(priceList, from, ' c');

toDatePriceList 'Дата по' = ABSTRACT DATE (PriceList) IN documentHeaderGroup PERSISTENT;
toTimePriceList 'Время по' = ABSTRACT TIME (PriceList) IN documentHeaderGroup PERSISTENT;
toDateTimePriceList 'Дата/время по'(priceList) = dateTimeToDateTime(toDatePriceList(priceList), toTimePriceList(priceList)) PERSISTENT;

toDateUserPriceList 'Дата по' = DATA DATE(UserPriceList);
toTimeUserPriceList 'Время по' = DATA TIME(UserPriceList);
toDateTimeUserPriceList 'Дата/время'(userPriceList) = dateTimeToDateTime(toDateUserPriceList(userPriceList), toTimeUserPriceList(userPriceList));

toDatePriceList(userPriceList) += toDateUserPriceList(userPriceList);
toTimePriceList(userPriceList) += toTimeUserPriceList(userPriceList);

@defineDocumentInterfaceNumber(priceList);
@defineNumeratedObjectDefault(PriceList, 'Нумератор для прайсов', 'ПЛ');

@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

//@defineDocumentInterfaceLegalEntity(priceList, company, 'Организация');
@defineDocumentInterfaceDataLegalEntity(priceList, company, 'Организация');
userPriceListLegalEntity (legalEntity) = GROUP MAX userPriceList BY companyUserPriceList(userPriceList);

@defineDocumentInterfaceCurrency(priceList);

// Строки

@defineDocumentInterfaceDetailDataTimePrefix(priceList, to, ' по');

@defineDocumentInterfaceDetailSku(priceList, sku);

@defineDocumentInterfaceDetailQuantity(priceList);
@defineAddDetailDialogBarcode(userPriceList, sku);

// ---------------- Цены для видов цен

// Шапка

TABLE priceListPriceListType (PriceList, PriceListType);
showPriceListPriceListType 'Показывать цены' = ABSTRACT BOOLEAN (PriceList, PriceListType) PERSISTENT;
showUserPriceListPriceListType 'Показывать цены' = DATA BOOLEAN (UserPriceList, PriceListType);
showPriceListPriceListType (priceList, priceListType) += showUserPriceListPriceListType(priceList, priceListType);

TABLE priceListDataPriceListType (PriceList, DataPriceListType);
inPriceListDataPriceListType 'Изменять цены' = ABSTRACT BOOLEAN (PriceList, DataPriceListType) PERSISTENT;
inUserPriceListDataPriceListType 'Изменять цены' = DATA BOOLEAN (UserPriceList, DataPriceListType);
inPriceListDataPriceListType (priceList, dataPriceListType) += inUserPriceListDataPriceListType(priceList, dataPriceListType);

priceListTypesPriceList 'Цены' (priceList) = GROUP CONCAT namePriceListType(priceListType) IF inPriceListDataPriceListType(priceList, priceListType) , ', '
                                               BY priceList
                                               ORDER priceListType MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;

// Строки

TABLE priceListDetailPriceListType (PriceListDetail, PriceListType);

TABLE priceListDetailDataPriceListType (PriceListDetail, DataPriceListType);
pricePriceListDetailDataPriceListType 'Цена (новая)' = ABSTRACT NUMERIC[14,2] (PriceListDetail, DataPriceListType) PERSISTENT;
priceUserPriceListDetailDataPriceListType 'Цена (новая)' = DATA NUMERIC[14,2] (PriceListDetail, DataPriceListType);
pricePriceListDetailDataPriceListType (priceListDetail, dataPriceListType) += priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType);

pricePriceListDetailDataPriceListType(detail, dataPriceListType) => inPriceListDataPriceListType(priceListPriceListDetail(detail), dataPriceListType) RESOLVE FALSE;

// ---------------------  Склады, для которых действует прайс

// Шапка
allStocksPriceList 'Отм' = ABSTRACT BOOLEAN (PriceList) PERSISTENT;
allStocksUserPriceList 'Отм' = DATA BOOLEAN (UserPriceList);
allStocksPriceList (priceList) += allStocksUserPriceList(priceList);

TABLE priceListStockGroup(PriceList, StockGroup);
dataInPriceListStockGroup 'Отм' = ABSTRACT BOOLEAN (PriceList, StockGroup) PERSISTENT;
dataInUserPriceListStockGroup 'Отм' = DATA BOOLEAN (UserPriceList, StockGroup);
dataInPriceListStockGroup (priceList, stockGroup) += dataInUserPriceListStockGroup(priceList, stockGroup);

TABLE priceListStock(PriceList, Stock);
dataInPriceListStock 'Отм' = ABSTRACT BOOLEAN (PriceList, Stock) PERSISTENT;
dataInUserPriceListStock 'Отм' = DATA BOOLEAN (UserPriceList, Stock);
dataInPriceListStock (priceList, stock) += dataInUserPriceListStock(priceList, stock);

levelParentPriceListStockGroup (priceList, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataInPriceListStockGroup(priceList, parent)
                                                               BY priceList, stockGroup PERSISTENT;

inParentPriceListStockGroup (priceList, stockGroup) = TRUE IF levelParentPriceListStockGroup (priceList, stockGroup) PERSISTENT;

inPriceListStockGroup 'Отм' (priceList, stockGroup) = OVERRIDE
    allStocksPriceList(priceList) AND stockGroup IS StockGroup,
    inParentPriceListStockGroup (priceList, stockGroup),
    dataInPriceListStockGroup(priceList, stockGroup);

inPriceListStock 'Отм' (priceList, stock) =
    (OVERRIDE allStocksPriceList(priceList) AND stock IS Stock,
              inParentPriceListStockGroup(priceList, stockGroupStock(stock)),
              dataInPriceListStock(priceList, stock))
    AND isCompanyStock(stock);

stocksPriceList 'Склады' (priceList) = GROUP CONCAT nameStock(stock) IF inPriceListStock(priceList, stock) , ', '
                                       BY priceList
                                       ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;

// ------- Проведение по priceListLedger ----- //

EXTEND CLASS PriceListDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += fromDateTimePriceListDetail(ledger);
toDateTimePriceListLedger (ledger) += toDateTimePriceListDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedPriceListDetail(ledger);

skuPriceListLedger (ledger) += skuPriceListDetail(ledger);

companyPriceListLedger (ledger) += companyPriceListDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionPriceList(priceListPriceListDetail(ledger));

inPriceListLedgerLedgerPriceListType (ledger, type) += inPriceListDataPriceListType(priceListPriceListDetail(ledger), type);
pricePriceListLedgerLedgerPriceListType (ledger, type) += pricePriceListDetailDataPriceListType(ledger, type);
inPriceListLedgerStock (ledger, stock) += inPriceListStock(priceListPriceListDetail(ledger), stock);

// -------------- Текущая действующая цена --------------- //

currentPricePriceListDetailDataPriceListTypeStock 'Действующая цена' (priceListDetail, dataPriceListType, stock) =
    prevPricePriceListTypeSkuStockDateTime(dataPriceListType, skuPriceListDetail(priceListDetail), stock, subtractDateTimeSeconds(fromDateTimePriceListDetail(priceListDetail), 1));

currentPriceSkuPriceListDataPriceListTypeStock 'Действующая цена' (sku, priceList, dataPriceListType, stock) =
    prevPricePriceListTypeSkuStockDateTime(dataPriceListType, sku, stock, subtractDateTimeSeconds(fromDateTimePriceList(priceList), 1));

changePricePriceListDetailDataPriceListTypeStock 'Изменение, %' (priceListDetail, dataPriceListType, stock) =
    pricePriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
    (currentPricePriceListDetailDataPriceListTypeStock (priceListDetail, dataPriceListType, stock) IF currentPricePriceListDetailDataPriceListTypeStock (priceListDetail, dataPriceListType, stock) != 0) - 100.0;

// Заголовки колонок
headerNameCurrentDataPriceListType (userPriceList, dataPriceListType) =
    [FORMULA STRING[50]  ' CAST($1 AS TEXT) || \' (старая) \''](
    namePriceListType(dataPriceListType)) IF showPriceListPriceListType(userPriceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;

headerNameChangeDataPriceListType (userPriceList, dataPriceListType) =
    [FORMULA STRING[50]  'CAST($1 AS TEXT) || \' (изменение, %) \''](
    namePriceListType(dataPriceListType)) IF inUserPriceListDataPriceListType (userPriceList, dataPriceListType) AND
                                             showUserPriceListPriceListType (userPriceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;

headerNameDataPriceListType (userPriceList, dataPriceListType) =
    [FORMULA STRING[50]  ' CAST($1 AS TEXT) || \' (новая) \''](
    namePriceListType(dataPriceListType)) IF inPriceListDataPriceListType(userPriceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;

// Цвета колонок
backgroundCurrentDataPriceListType 'Цвет' (dataPriceListType) = RGB(255,238,165) IF dataPriceListType IS DataPriceListType;
backgroundChangeDataPriceListType 'Цвет' (dataPriceListType) = RGB(232,184,146) IF dataPriceListType IS DataPriceListType;
backgroundDataPriceListType 'Цвет' (dataPriceListType) = RGB(213,249,185) IF dataPriceListType IS DataPriceListType;

// Подбор товаров
detailSkuUserPriceList(sku, price) = GROUP SUM 1 IF sku == skuUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail)
                                           BY skuUserPriceListDetail(detail), userPriceListUserPriceListDetail(detail);

inSkuUserPriceList 'Вкл.' (sku, price) = TRUE IF detailSkuUserPriceList(sku, price);

changeInSkuUserPriceList = ACTION (sku, price) {
    REQUEST BOOLEAN INPUT;
    IF TRUE IF NOT requestedLogical() THEN {
        IF detailSkuUserPriceList(sku, price) THEN {
            //FOR sku == skuUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail) DO {
            DELETE detail WHERE sku == skuUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail);
            //}
        }
    } ELSE {
        IF requestedLogical() THEN {
            FOR ADDOBJ d = UserPriceListDetail DO {
               SET userPriceListUserPriceListDetail(d) <- price;
               SET skuUserPriceListDetail(d) <- sku;
            }
        }
    }
}

// ------------- Подбор документов ----------------- //

numberDocument(priceList) += numberPriceList(priceList);
seriesDocument(priceList) += seriesPriceList(priceList);
dateDocument(priceList) += datePriceList(priceList);
supplierDocument(priceList) += companyPriceList(priceList);

indexDocumentDetail(priceList) += indexPriceListDetail(priceList);
skuDocumentDetail(priceList) += skuPriceListDetail(priceList);

documentDocumentDetail(detail) += priceListPriceListDetail(detail);

fillDocumentPriceList 'Подбор документа' = ACTION (userPriceList) {
    FORM documents MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL chosenDocument = Document();
        SET chosenDocument() <- chosenObject('d');
        FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = UserPriceListDetail DO {
            SET userPriceListUserPriceListDetail(i) <- userPriceList;
            SET skuUserPriceListDetail(i) <- skuDocumentDetail(documentDetail);
        }
    }
} TOOLBAR;

// ---------------------- Активность --------------------------- //

isActivePriceList(priceList) = (fromDateTimePriceList(priceList) < currentDateTime() AND toDateTimePriceList(priceList) > currentDateTime()) OR
                               (fromDateTimePriceList(priceList) < currentDateTime() AND NOT toDateTimePriceList(priceList));
isActivePriceListDetail(priceListDetail) = (fromDateTimePriceListDetail(priceListDetail) < currentDateTime() AND toDateTimePriceListDetail(priceListDetail) > currentDateTime()) OR
                               (fromDateTimePriceListDetail(priceListDetail) < currentDateTime() AND NOT toDateTimePriceListDetail(priceListDetail));

// Цвета
backgroundPriceList 'Цвет' (priceList) =
    IF currentDateTime() > toDateTimePriceList(priceList)
        THEN RGB(255, 226, 226) IF priceList IS PriceList
    ELSE
        RGB(226, 255, 226) IF fromDateTimePriceList(priceList) > currentDateTime();

backgroundPriceListDetail 'Цвет' (priceListDetail) =
    IF currentDateTime() > toDateTimePriceListDetail(priceListDetail)
        THEN RGB(255, 226, 226) IF priceListDetail IS PriceListDetail
    ELSE
        RGB(226, 255, 226) IF fromDateTimePriceListDetail(priceListDetail) > currentDateTime();

// --------------- Фильтры для подбора товаров ------------------ //

// Вид цены
filterPriceListTypeUserPriceList = DATA SESSION PriceListType (UserPriceList);
nameFilterPriceListTypeUserPriceList 'Вид цены' (userPriceList) = namePriceListType(filterPriceListTypeUserPriceList(userPriceList));

currentPriceSkuPriceListStock 'Текущая цена' (sku, userPriceList, stock) =
    currentPriceSkuPriceListDataPriceListTypeStock(sku, userPriceList, filterPriceListTypeUserPriceList(userPriceList), stock);
filterPriceListTypeUserPriceListSkuStock (userPriceList, sku, stock) =
    (TRUE IF currentPriceSkuPriceListStock (sku, userPriceList, stock)) OR
    (sku IS Sku AND stock IS Stock AND NOT filterPriceListTypeUserPriceList(userPriceList));

FORM userPriceList 'Прайс'
    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroup(sk)
    ORDER BY skuTreeName

    OBJECTS p = UserPriceList FIXED PANEL
    PROPERTIES(p) objectClassName, nameNumeratorObject, numberObject, seriesObject,
                  dateUserPriceList, timeUserPriceList,
                  fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                  nameCurrencyUserPriceList, nameCompanyUserPriceList, noteUserPriceList

    OBJECTS t = PriceListType
    PROPERTIES(t) namePriceListType READONLY, includeVATLedgerPriceListType
    PROPERTIES(p, t) inPriceListDataPriceListType TODRAW t FORCE GRID, showPriceListPriceListType
    FILTERS (currencyUserPriceList(p) == currencyPriceListType(t)) OR (p IS UserPriceList AND t IS PriceListType AND NOT currencyPriceListType(t))

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) BACKGROUND backgroundPriceListDetail(d)
                  indexUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                  shortNameUOMSkuUserPriceListDetail, fromDateUserPriceListDetail, fromTimeUserPriceListDetail,
                  toDateUserPriceListDetail, toTimeUserPriceListDetail, ADDOBJ, DELETESESSION
    PROPERTIES(d, t) pricePriceListDetailDataPriceListType COLUMNS (t) HEADER headerNameDataPriceListType(p, t) BACKGROUND backgroundDataPriceListType(t) TODRAW d FORCE GRID
    PROPERTIES(p) TODRAW d FORCE PANEL TOOLBAR fillDocumentPriceList, addDetailInputBarcodeUserPriceListDetailUserPriceList
    FILTERS userPriceListUserPriceListDetail(d) == p,
            isParentSkuGroupSku(sk, skuPriceListDetail(d)) OR (sk IS SkuGroup AND d IS PriceListDetail AND NOT skuPriceListDetail(d))
    FILTERGROUP filters
        FILTER 'Активные строки' 'F10' isActivePriceListDetail(d)

    TREE stockTree a=STRING[3], sg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = nameStockGroup(sg)
    PROPERTIES(p) allStocksPriceList TODRAW a FORCE GRID
    PROPERTIES(p, sg) inPriceListStockGroup
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    FILTERS countStockStockGroup(sg)

    OBJECTS ts = Stock
    PROPERTIES READONLY  nameStock(ts)
    PROPERTIES(p, ts)    inPriceListStock
    PROPERTIES(d, t, ts) currentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t)
    PROPERTIES(d, t, ts) changePricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameChangeDataPriceListType(p, t) BACKGROUND backgroundChangeDataPriceListType(t)
    FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParentStockGroupStock(sg, ts),
            isCompanyStock(ts)
    FILTERGROUP filters2
            FILTER 'Выбранные склады' 'F10' inPriceListStock(p, ts) DEFAULT

    OBJECTS tt = Stock FIXED PANEL
    PROPERTIES SELECTOR stockName = nameStock(tt) FORCE PANEL
    PROPERTIES(d, t, tt) currentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t) TODRAW d FORCE GRID
    PROPERTIES(d, t, tt) changePricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameChangeDataPriceListType(p, t) BACKGROUND backgroundChangeDataPriceListType(t) TODRAW d FORCE GRID

    PROPERTIES(d)        nameCompanyUserPriceListDetail
    FILTERS isCompanyStock(tt)

    TREE skuTree2 sk2 = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName2 = nameSkuGroup(sk2)
    ORDER BY skuTreeName2

    OBJECTS ts2 = Stock FIXED PANEL
    PROPERTIES(ts2) SELECTOR nameStock
    FILTERS inPriceListStock(p, ts2),
            isCompanyStock(ts2)
    PROPERTIES(p) FORCE PANEL nameFilterPriceListTypeUserPriceList

    OBJECTS s2=Sku
    PROPERTIES inSkuUserPriceList(s2, p) ON CHANGE changeInSkuUserPriceList(s2, p)
    PROPERTIES READONLY inputName2 = nameSku(s2), idBarcodeSku(s2), currentBalanceSkuStock(s2, ts2)
    PROPERTIES READONLY currentPriceSkuPriceListStock(s2, p, ts2) SHOWIF filterPriceListTypeUserPriceList(p)
    FILTERS    filterPriceListTypeUserPriceListSkuStock(p, s2, ts2)

    FILTERGROUP filters3
        FILTER 'С остатком' 'F10' currentBalanceSkuStock(s2, ts2)

    FILTERS isParentSkuGroupSku(sk2, s2)
    ORDER BY inputName2

    EVENTS
        ON OK prePostUserPriceList(p)

    EDIT UserPriceList OBJECT p
;

DESIGN userPriceList FROM DEFAULT {
//    REMOVE st.box;
    NEW topContainer{
        NEW headContainer {
            caption = 'Шапка документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (objectClassName);
            ADD PROPERTY (nameNumeratorObject);
            ADD PROPERTY (numberObject);
            ADD PROPERTY (seriesObject);
            ADD PROPERTY (dateUserPriceList);
            ADD PROPERTY (timeUserPriceList);

        }
        NEW timeContainer{
            caption = 'Период действия';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY (fromDateUserPriceList);
            ADD PROPERTY (fromTimeUserPriceList);
            ADD PROPERTY (toDateUserPriceList);
            ADD PROPERTY (toTimeUserPriceList);
        }
        ADD p.documentPrmGroup{
            caption = 'Параметры документа';
            childConstraints = TO THE RIGHT;
            ADD PROPERTY(nameCurrencyUserPriceList);
            ADD PROPERTY(nameCompanyUserPriceList);
            ADD PROPERTY(noteUserPriceList);
        }
        //POSITION p.documentPrmGroup TO THE RIGHT timeContainer;
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = TABBED;
            NEW firstContainer{
                caption = 'Спецификация';
                childConstraints = TO THE BOTTOM;

                ADD tt.box; // PROPERTY(stockName);
                NEW secondSecondContainer{
                    type = SPLITH;
                    childConstraints =  TO THE RIGHT;
                    ADD skuTree.tree.box {caption = 'Товары';}
                    NEW skuContainer{
                        childConstraints = TO THE BOTTOM;
                        NEW rowContainer{
                            ADD PROPERTY(addDetailInputBarcodeUserPriceListDetailUserPriceList);
                        }
                        ADD d.box{fillHorizontal = 3.0;}
                    }
                }
            }

            NEW secondContainer {
                caption = 'Склады';
                type = SPLITH;
                ADD stockTree.tree.box{caption = 'Группы складов';}
                ADD ts.box{fillHorizontal = 2.0;}
            }

            NEW thirdContainer{
                caption = 'Вид цен';
                ADD t.box;
            }

            NEW fourthContainer{
                caption = 'Подбор';
                NEW topThirdContainer{
                    childConstraints = TO THE RIGHT;
                    ADD ts2.box;
                    NEW filtersContainer{
                        caption = 'Фильтры';
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(nameFilterPriceListTypeUserPriceList);
                    }
                }
                NEW detailFourthContainer{
                    childConstraints = TO THE RIGHT;
                    type = SPLITH;
                    ADD skuTree2.tree.box;
                    ADD s2.box{fillHorizontal = 3.0;}
                }
            }

        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }

    ADD functions.box;
}

// -------------------------------- Изменение цен для строк ------------------------------ //

CLASS TypeMarkUpSkuUserPriceList 'Метод изменения цены'{
    percent 'Наценка, %',
    multiplication 'Умножение',
    division 'Деление'
}

FORM typeMarkUpSkuUserPriceList 'Метод изменения цены'
    OBJECTS m = TypeMarkUpSkuUserPriceList
    PROPERTIES(m) READONLY staticCaption

    DIALOG TypeMarkUpSkuUserPriceList OBJECT m
;

DESIGN typeMarkUpSkuUserPriceList FROM DEFAULT{
    PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
}

headerNumericCaption(type) =
    CASE
        WHEN type == TypeMarkUpSkuUserPriceList.percent
            THEN '% наценки' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.multiplication
            THEN 'Множитель' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.division
            THEN 'Делитель' IF type IS TypeMarkUpSkuUserPriceList
        ELSE '% наценки' IF type IS TypeMarkUpSkuUserPriceList
    ;

FORM chooseMarkUpSkuUserPriceList 'Наценка'

    OBJECTS p = UserPriceList FIXED PANEL

    OBJECTS m = TypeMarkUpSkuUserPriceList FIXED PANEL
    PROPERTIES(m) SELECTOR staticCaption

    OBJECTS pt = PriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType

    OBJECTS n = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(n) objValue = OBJVALUE HEADER headerNumericCaption(m)

    OBJECTS nt = DataPriceListType FIXED PANEL
    PROPERTIES(nt) SELECTOR nameDataPriceListType
    FILTERS inPriceListDataPriceListType(p, nt)
;

DESIGN chooseMarkUpSkuUserPriceList FROM DEFAULT {

    REMOVE p.box;
    NEW topContainer {
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
        ADD PROPERTY(namePriceListType(pt));
        PROPERTY(namePriceListType(pt)){caption = 'Старая цена';}
        ADD PROPERTY(objValue);
        PROPERTY(objValue){caption = 'Изменение';}
        ADD PROPERTY(nameDataPriceListType(nt));
        PROPERTY(nameDataPriceListType(nt)){caption = 'Новая цена';}
    }
    ADD functions.box;
}

// ----------------------- Для отмеченных строк ------------------------ //
isSelectedUserPriceListDetail 'Отм' = DATA SESSION BOOLEAN (UserPriceListDetail);
changeMarkUpChosenSkuUserPriceList 'Изменить цену для отмеченных строк' = ACTION (userPriceList, stock) {
    FORM chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList MODAL;
    IF formResult() == FormResult.ok THEN {
        IF NOT [GROUP SUM 1 IF isSelectedUserPriceListDetail(priceListDetail)
                      BY userPriceListUserPriceListDetail(priceListDetail)](userPriceList) THEN
            MESSAGE 'Выберите хотя бы одну позицию'
        ELSE {
            LOCAL prevPrice = NUMERIC[14,2] (UserPriceListDetail);
            IF chosenObject('pt') != chosenObject('nt') AND inUserPriceListDataPriceListType(userPriceList, chosenObject('pt')) THEN {
                prevPrice(detail) <- priceUserPriceListDetailDataPriceListType(detail, chosenObject('pt'))
                                     WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
            } ELSE {
                prevPrice(detail) <- currentPricePriceListDetailDataPriceListTypeStock(detail, chosenObject('pt'), stock)
                                     WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
            }
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent THEN
                SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication THEN
                SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division THEN
                SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(d) isSelectedUserPriceListDetail BEFORE indexUserPriceListDetail
    PROPERTIES(p, tt) TODRAW d FORCE PANEL TOOLBAR changeMarkUpChosenSkuUserPriceList
    FILTERGROUP filterSelected
        FILTER 'Отмеченные строки' 'F11' isSelectedUserPriceListDetail(d)
;
EXTEND DESIGN userPriceList{
    rowContainer{
        ADD PROPERTY(changeMarkUpChosenSkuUserPriceList);
    }
}

// ---------------------- Для всех строк ----------------------- //
changeMarkUpSkuUserPriceList 'Изменить цену для всех строк' = ACTION (userPriceList, stock) {
    FORM chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL prevPrice = NUMERIC[14,2] (UserPriceListDetail);
        IF chosenObject('pt') != chosenObject('nt') AND inUserPriceListDataPriceListType(userPriceList, chosenObject('pt')) THEN {
            prevPrice(detail) <- priceUserPriceListDetailDataPriceListType(detail, chosenObject('pt'))
                                 WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
        } ELSE {
            prevPrice(detail) <- currentPricePriceListDetailDataPriceListTypeStock(detail, chosenObject('pt'), stock)
                                 WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
        }

        FOR [FILTER userPriceList.d](detail) DO {
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent THEN
                SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication THEN
                SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division THEN
                SET priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p, tt) TODRAW d FORCE PANEL TOOLBAR changeMarkUpSkuUserPriceList
;

EXTEND DESIGN userPriceList{
    rowContainer{
        ADD PROPERTY(changeMarkUpSkuUserPriceList) BEFORE PROPERTY(changeMarkUpChosenSkuUserPriceList);
    }
}

addUserPriceList 'Добавить' = ACTION ADDFORM UserPriceList;
editUserPriceList 'Редактировать' = ACTION EDITFORM UserPriceList;
editPriceList 'Редактировать' = ABSTRACT ACTION LIST (PriceList) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editPriceList (p) += editUserPriceList(p);

// ------------------ Копирование прайс-листов ------------------- //

copyAbstractDataPriceList = ABSTRACT ACTION LIST (PriceList, UserPriceList);

copyDataPriceList = ACTION (priceList, userPriceList){
        SET currencyUserPriceList(userPriceList) <- currencyUserPriceList(priceList);
        SET companyUserPriceList(userPriceList) <- companyUserPriceList(priceList);
        SET dataInUserPriceListStock(userPriceList, stock) <- dataInUserPriceListStock(priceList, stock);
        SET dataInUserPriceListStockGroup(userPriceList, stockGroup) <- dataInUserPriceListStockGroup(priceList, stockGroup);
        SET allStocksUserPriceList(userPriceList) <- allStocksUserPriceList(priceList);
        SET inUserPriceListDataPriceListType(userPriceList, priceListType) <- inPriceListDataPriceListType(priceList, priceListType);
        EXEC copyAbstractDataPriceList(priceList, userPriceList);
        FOR userPriceListUserPriceListDetail(detail) == priceList DO {
            FOR ADDOBJ d = UserPriceListDetail DO {
                SET userPriceListUserPriceListDetail(d) <- userPriceList;
                SET skuUserPriceListDetail(d) <- skuUserPriceListDetail(detail);
                SET priceUserPriceListDetailDataPriceListType(d, priceListType) <- pricePriceListDetailDataPriceListType(detail, priceListType);
            }
        }
}

copySessionPriceList 'Копировать' = ACTION (priceList){

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

copyPriceList 'Копировать' = ACTION (priceList) NEWSESSION {

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

updateSessionPriceList 'Обновить' = ACTION (priceList) {

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN {
            SET toDateUserPriceList(priceList) <- fromDateUserPriceList(u);
            SET toTimeUserPriceList(priceList) <- fromTimeUserPriceList(u);
        } ELSE {
            DELETE u;
        }
    }
}

updatePriceList 'Обновить' = ACTION (priceList) NEWSESSION{

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN {
            SET toDateUserPriceList(priceList) <- fromDateUserPriceList(u);
            SET toTimeUserPriceList(priceList) <- fromTimeUserPriceList(u);
        } ELSE {
            DELETE u;
        }
    }
}

printPriceList 'Распечатать' = ABSTRACT ACTION LIST (PriceList);

FORM priceLists 'Прайсы'
    OBJECTS p = PriceList
    PROPERTIES(p) READONLY BACKGROUND backgroundPriceList(p)
           isPostedPriceList FORCE GRID, numberObject, seriesObject, datePriceList, timePriceList,
           fromDatePriceList, fromTimePriceList, toDatePriceList, toTimePriceList,
           nameCurrencyPriceList, nameCompanyPriceList, priceListTypesPriceList, stocksPriceList,
           notePriceList, objectClassName

    PROPERTIES ()  addUserPriceList TODRAW p
    PROPERTIES (p) editPriceList, copyPriceList FORCE PANEL TOOLBAR, printPriceList FORCE PANEL TOOLBAR
    PROPERTIES (p) DELETE FORCE PANEL TOOLBAR SHOWIF isUserPriceList(p)

    OBJECTS t = DataPriceListType

    OBJECTS d = PriceListDetail
    PROPERTIES(d) READONLY indexPriceListDetail, idBarcodeSkuPriceListDetail, nameSkuPriceListDetail,
                           shortNameUOMSkuPriceListDetail, nameCompanyPriceListDetail

    OBJECTS ts = Stock
    PROPERTIES(ts) READONLY nameStock
    PROPERTIES(p, ts) READONLY inPriceListStock

    PROPERTIES(d, t) READONLY pricePriceListDetailDataPriceListType COLUMNS (t) HEADER nameDataPriceListType(t)

    FILTERGROUP filters
        FILTER 'Активные прайсы' 'F10' isActivePriceList(p) DEFAULT


    FILTERS priceListPriceListDetail(d) == p,
            inPriceListDataPriceListType(p, t),
            inPriceListStock(p, ts),
            currencyUserPriceList(p) == currencyDataPriceListType(t),
            isCompanyStock(ts)

    DIALOG PriceList OBJECT p
;

DESIGN priceLists FROM DEFAULT{

    REMOVE t.box;
    NEW topContainer{
        type = SPLITV;
        ADD p.box{fillVertical = 3.0;}
        NEW detailContainer{
            childConstraints = TO THE RIGHT;
            type = TABBED;
            fillVertical = 2.0;
            NEW firstContainer{
                caption = 'Спецификация';
                childConstraints = TO THE RIGHT;
                type = SPLITH;
                ADD d.box{fillHorizontal = 4.0;}
                ADD ts.box{fillHorizontal = 1.0;}
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    childConstraints = TO THE BOTTOM;
                    ADD PROPERTY(printPriceList);
                }
            }
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    priceListDocuments 'Документы' {
        ADD priceLists;
    }
}

// Заполнение на основании

addUnderPriceListUserPriceList 'Заполнить на основании' = ACTION (userPriceList) {
    FORM priceLists MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR priceListPriceListDetail(detail) == chosenObject('p') DO {
            ADDOBJ UserPriceListDetail;
            FOR d == addedObject() DO {
                SET userPriceListUserPriceListDetail(d) <- userPriceList;
                SET skuUserPriceListDetail(d) <- skuPriceListDetail(detail);
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p) TODRAW d FORCE PANEL TOOLBAR addUnderPriceListUserPriceList
;

//печать прайсов

FORM printPriceList 'Прайс' PRINT
    OBJECTS p = PriceList FIXED PANEL
    PROPERTIES(p) READONLY numberObject, seriesObject, datePriceList, timePriceList,
           fromDatePriceList, fromTimePriceList, toDatePriceList, toTimePriceList,
           nameCurrencyPriceList, nameCompanyPriceList, priceListTypesPriceList, stocksPriceList,
           notePriceList, objectClassName

    OBJECTS t = PriceListType
    PROPERTIES(t) READONLY namePriceListType
    FILTERS inPriceListDataPriceListType(p, t),
            (currencyUserPriceList(p) == currencyPriceListType(t)) OR (p IS PriceList AND t IS PriceListType AND NOT currencyPriceListType(t))

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) READONLY indexPriceListDetail, idBarcodeSkuPriceListDetail, nameSkuPriceListDetail,
                           shortNameUOMSkuPriceListDetail, nameCompanyPriceListDetail
    PROPERTIES(d, t) pricePriceListDetailDataPriceListType COLUMNS (t) HEADER headerNameDataPriceListType(p, t) BACKGROUND backgroundDataPriceListType(t) TODRAW d FORCE GRID

    FILTERS priceListPriceListDetail(d) == p
;

printPrintPriceList 'Распечатать' (priceList) =
    ACTION FORM printPriceList OBJECTS p = priceList  IMAGE 'print.png' IN printGroup;

printPriceList(priceList) += printPrintPriceList(priceList);

// ------------------------- Расширяем форму LegalEntity ----------------------- //

addUserPriceListLegalEntity 'Добавить' = ACTION (legalEntity) {

    FOR ADDOBJ u = UserPriceList DO {
        SET companyUserPriceList(u) <- legalEntity;
        FORM userPriceList OBJECTS p = u DOCKEDMODAL;
        IF TRUE IF NOT formResult() == FormResult.ok THEN {
            DELETE u;
        }
    }
} TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY isPostedUserPriceList, numberObject, seriesObject, dateUserPriceList, timeUserPriceList,
                           fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                           nameCurrencyUserPriceList, priceListTypesPriceList,
                           stocksPriceList, noteUserPriceList, objectClassName
    PROPERTIES addUserPriceListLegalEntity(l) TODRAW p FORCE PANEL, updateSessionPriceList(p) TODRAW p FORCE PANEL TOOLBAR
    PROPERTIES(p) EDITSESSIONFORM, DELETESESSION FORCE PANEL TOOLBAR
    FILTERS companyUserPriceList(p) == l
;

EXTEND DESIGN legalEntity{
    extendContainer {
        ADD p.box{caption = 'Прайсы';}
    }
}

// ------------------------------------------------- Сравнение прайсов ---------------------------- //

countSkuPriceList (sku, priceList) = GROUP SUM 1 IF skuPriceListDetail(detail) == sku AND priceListPriceListDetail(detail) == priceList
    BY sku, priceList;

countSkusPriceList (priceList) = GROUP SUM 1 IF countSkuPriceList(sku, priceList)
    BY priceList;

countSkuPriceListPriceList (priceList1, priceList2) = GROUP SUM 1 IF countSkuPriceList(sku, priceList1) == countSkuPriceList(sku, priceList2)
    BY priceList1, priceList2;

equalsPriceListPriceList (priceList1, priceList2) = companyPriceList(priceList1) == companyPriceList(priceList2) AND
                                                    currencyPriceList(priceList1) == currencyPriceList(priceList2) AND
                                                    datePriceList(priceList1) == datePriceList(priceList2) AND
                                                    countSkuPriceListPriceList (priceList1, priceList2) == countSkusPriceList(priceList1) AND
                                                    countSkuPriceListPriceList (priceList1, priceList2) == countSkusPriceList(priceList2) AND
                                                    priceList1 != priceList2;

//FORM test 'Test'
//    OBJECTS p1 = PriceList FIXED PANEL
//    PROPERTIES(p1) READONLY numberObject
//
//    OBJECTS d1 = PriceListDetail
//    PROPERTIES(d1) READONLY idBarcodeSkuPriceListDetail, nameSkuPriceListDetail
//    FILTERS priceListPriceListDetail(d1) == p1
//
//    OBJECTS p2 = PriceList FIXED PANEL
//    PROPERTIES(p2) READONLY numberObject
//
//    OBJECTS d2 = PriceListDetail
//    PROPERTIES(d2) READONLY idBarcodeSkuPriceListDetail, nameSkuPriceListDetail
//    FILTERS priceListPriceListDetail(d2) == p2
//;
//
//DESIGN test FROM DEFAULT{
//    NEW topContainer{
//        childConstraints = TO THE RIGHT;
//        NEW leftContainer{
//            childConstraints = TO THE BOTTOM;
//            ADD p1.box;
//            ADD d1.box;
//        }
//        NEW rightContainer{
//            childConstraints = TO THE BOTTOM;
//            ADD p2.box;
//            ADD d2.box;
//        }
//    }
//    ADD functions.box;
//}

findEqualsPriceLists 'Найти дубликаты прайсов' = ACTION () {
    FOR p1 IS UserPriceList NOINLINE DO {
        FOR equalsPriceListPriceList(p1, p2) NOINLINE DO {
            SET dataInUserPriceListStock(p2, s) <- dataInUserPriceListStock(p1, s) WHERE dataInUserPriceListStock(p1, s);
            DELETE p1;
            apply();
            BREAK;
        }
    }
}

EXTEND FORM migrationData
    PROPERTIES() findEqualsPriceLists
;