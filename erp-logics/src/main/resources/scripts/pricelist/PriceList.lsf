MODULE PriceList;

REQUIRE PriceListLedger, StockTax, StockMovement;

NAMESPACE PriceList;

// --------------------------- Пользовательские виды цен ------------------------- //

CLASS DataPriceListType 'Пользовательский вид цены' : LedgerPriceListType;

@defineExternalizable(dataPriceListType, VARSTRING[100]);
idPriceListType (p) += idDataPriceListType(p);

batchLedgerDataPriceListType 'Использовать для партий свои цены' = DATA BOOLEAN (DataPriceListType);
batchLedgerPriceListTypeStock (priceListType, stock) += WHEN priceListType IS DataPriceListType AND isCompanyStock(stock)
                                                        THEN batchLedgerDataPriceListType(priceListType);

nameDataPriceListType 'Наименование' = DATA VARISTRING[50](DataPriceListType);
nameLedgerPriceListType(type) += nameDataPriceListType(type) IF type IS DataPriceListType;

includeVATDataPriceListType 'Цена с НДС' = DATA BOOLEAN (DataPriceListType);
includeVATLedgerPriceListType (priceListType) += includeVATDataPriceListType(priceListType);

@defineDocumentHeaderCurrency(dataPriceListType);
currencyPriceListType(dataPriceListType) += currencyDataPriceListType(dataPriceListType);

differentOrganizationsDataPriceListType 'Для разных организаций' = DATA BOOLEAN (DataPriceListType); 
differentOrganizationsLedgerPriceListType(type) += WHEN type IS DataPriceListType THEN differentOrganizationsDataPriceListType(type);   

notNullDataPriceListType 'Должна быть задана цена' = DATA BOOLEAN (DataPriceListType);

FORM dataPriceListType 'Пользовательский вид цен'
    OBJECTS d = DataPriceListType FIXED PANEL
    PROPERTIES(d) nameDataPriceListType, idDataPriceListType SHOWIF showIDs(), includeVATPriceListType,
                  nameCurrencyDataPriceListType, nameRoundConditionPriceListType, batchLedgerDataPriceListType, 
                  differentOrganizationsDataPriceListType, notNullDataPriceListType

    EDIT DataPriceListType OBJECT d
;

DESIGN dataPriceListType {
    d.box{
        MOVE PROPERTY(nameDataPriceListType(d));
        MOVE PROPERTY(idDataPriceListType(d));
        MOVE PROPERTY(includeVATPriceListType(d));
        MOVE PROPERTY(nameCurrencyDataPriceListType(d));
        MOVE PROPERTY(nameRoundConditionPriceListType(d));
        MOVE PROPERTY(batchLedgerDataPriceListType(d));
        MOVE PROPERTY(notNullDataPriceListType(d));
    }
}

FORM dataPriceListTypes 'Пользовательские виды цен'
    OBJECTS p = DataPriceListType
    PROPERTIES(p) READONLY nameDataPriceListType, nameCurrencyDataPriceListType, nameRoundConditionPriceListType
    PROPERTIES(p) READONLY includeVATDataPriceListType, notNullDataPriceListType

    DIALOG DataPriceListType OBJECT p
;

addDataPriceListType 'Добавить пользовательскую цену' = ACTION ADDFORM DataPriceListType;
editDataPriceListType 'Редактировать' = ACTION EDITFORM DataPriceListType;
editPriceListType(priceListType) += ACTION editDataPriceListType(priceListType);

EXTEND FORM priceListTypes
    PROPERTIES() TODRAW pt FORCE PANEL addDataPriceListType
//    PROPERTIES(pt) SHOWIF showIDs() READONLY idDataPriceListType
;

overCopyPriceListType (priceListType) += ACTION (priceListType) NEWSESSION {
    IF priceListType IS DataPriceListType THEN {
        FOR ADDOBJ p = DataPriceListType DO {
            batchLedgerDataPriceListType(p) <- batchLedgerDataPriceListType(priceListType);
            includeVATDataPriceListType(p) <- includeVATDataPriceListType(priceListType);
            roundConditionPriceListType(p) <- roundConditionPriceListType(priceListType);
            currencyDataPriceListType(p) <- currencyDataPriceListType(priceListType);
                                    
            FORM dataPriceListType OBJECTS d=p MANAGESESSION DOCKEDMODAL; 
        }
    }
}

// --------------------------- Прайс-листы ------------------------- //

CLASS ABSTRACT PriceList 'Прайс' : Document;
CLASS ABSTRACT PriceListDetail 'Строка прайса' : DocumentDetail;

CLASS UserPriceList 'Прайс (польз.)' : PriceList;
CLASS UserPriceListDetail 'Строка прайса (польз.)' : PriceListDetail;

@defineDocumentInterface(priceList);
@deriveDocumentHeaderTimePrefix(UserPriceList, );

@defineExternalizable(userPriceList, VARSTRING[100]);

// Шапка

@defineDocumentInterfaceDataTimePrefix(priceList, from, ' c');
@deriveDocumentHeaderTimePrefix(UserPriceList, from);

toDatePriceList 'Дата по' = ABSTRACT DATE (PriceList) IN documentHeader PERSISTENT;
toTimePriceList 'Время по' = ABSTRACT TIME (PriceList) IN documentHeader PERSISTENT;
toDateTimePriceList 'Дата/время по'(priceList) = dateTimeToDateTime(toDatePriceList(priceList), toTimePriceList(priceList)) PERSISTENT;

toDateUserPriceList 'Дата по' = DATA DATE(UserPriceList);
toTimeUserPriceList 'Время по' = DATA TIME(UserPriceList);
toDateTimeUserPriceList 'Дата/время по'(userPriceList) = dateTimeToDateTime(toDateUserPriceList(userPriceList), toTimeUserPriceList(userPriceList));

toDatePriceList(userPriceList) += toDateUserPriceList(userPriceList);
toTimePriceList(userPriceList) += toTimeUserPriceList(userPriceList);

@deriveDocumentHeaderTimeBeforePrefix(UserPriceList, to);

@defineDocumentInterfaceNumber(priceList);
@defineNumeratedDefault(UserPriceList, 'Прайсы', 'ПЛ');

@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

//@defineDocumentInterfaceLegalEntity(priceList, company, 'Организация');
@defineDocumentInterfaceDataLegalEntity(priceList, company, 'Организация');
userPriceListLegalEntity (legalEntity) = GROUP MAX userPriceList BY companyUserPriceList(userPriceList);
@defineDocumentInterfaceDataStock(priceList, stock, 'Склад организации', company);
CONSTRAINT companyUserPriceList(priceList) AND companyStockUserPriceList(priceList) AND NOT
inLegalEntityStock(companyUserPriceList(priceList), companyStockUserPriceList(priceList))
    CHECKED BY companyStockUserPriceList
        MESSAGE 'Организация и склад организации для прайса не имеют связи';

@defineDocumentInterfaceCurrency(priceList);

groupTypeUserPriceList = DATA GroupType (UserPriceList);
nameGroupTypeUserPriceList 'Тип классификатора' = nameGroupType(groupTypeUserPriceList(UserPriceList));

// Строки

@defineDocumentInterfaceDetailDataTimePrefix(priceList, to, ' по');

@defineDocumentInterfaceDetailSku(priceList, sku);

@defineDocumentInterfaceDetailQuantity(priceList);
@defineAddDetailDialogBarcode(userPriceList, sku);

// ---------------- Цены для видов цен

// Шапка

TABLE priceListPriceListType (PriceList, PriceListType);
showPriceListPriceListType 'Показывать цены' = ABSTRACT BOOLEAN (PriceList, PriceListType) PERSISTENT;
showUserPriceListPriceListType 'Показывать цены' = DATA BOOLEAN (UserPriceList, PriceListType);
showPriceListPriceListType (priceList, priceListType) += showUserPriceListPriceListType(priceList, priceListType);

TABLE priceListDataPriceListType (PriceList, DataPriceListType);
inPriceListDataPriceListType 'Изменять цены' = ABSTRACT BOOLEAN (PriceList, DataPriceListType) PERSISTENT;
inUserPriceListDataPriceListType 'Изменять цены' = DATA BOOLEAN (UserPriceList, DataPriceListType);
inPriceListDataPriceListType (priceList, dataPriceListType) += inUserPriceListDataPriceListType(priceList, dataPriceListType);

priceListTypesPriceList 'Цены' (priceList) = GROUP CONCAT namePriceListType(priceListType) IF inPriceListDataPriceListType(priceList, priceListType) , ', '
                                               BY priceList
                                               ORDER priceListType MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;
priceListTypesPriceListDetail 'Цены' (d) = priceListTypesPriceList(priceListPriceListDetail(d));

// Строки

TABLE priceListDetailPriceListType (PriceListDetail, PriceListType);

TABLE priceListDetailDataPriceListType (PriceListDetail, DataPriceListType);
pricePriceListDetailDataPriceListType 'Цена (новая)' = ABSTRACT NUMERIC[14,2] (PriceListDetail, DataPriceListType) PERSISTENT;
priceUserPriceListDetailDataPriceListType 'Цена (новая)' = DATA NUMERIC[14,2] (UserPriceListDetail, DataPriceListType);
pricePriceListDetailDataPriceListType (priceListDetail, dataPriceListType) += priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType);

inPriceListDetailDataPriceListType (detail, type) = inPriceListDataPriceListType(priceListPriceListDetail(detail), type);
inUserPriceListDetailDataPriceListType (detail, type) = inUserPriceListDataPriceListType(userPriceListUserPriceListDetail(detail), type);

pricePriceListDetailDataPriceListType(detail, type) => inPriceListDetailDataPriceListType (detail, type) RESOLVE RIGHT;

//НДС

valueVATPriceListDetail 'НДС' (d) =
    valueVATSkuCountryDate(skuPriceListDetail(d), countryLegalEntity(companyPriceListDetail(d)), fromDatePriceListDetail(d));
valueVATUserPriceListDetail 'НДС' (d) =
    valueVATSkuCountryDate(skuUserPriceListDetail(d), countryLegalEntity(companyUserPriceListDetail(d)), fromDateUserPriceListDetail(d));

// ---------------------  Склады, для которых действует прайс

// Шапка
allStocksPriceList 'Отм' = ABSTRACT BOOLEAN (PriceList) PERSISTENT;
allStocksUserPriceList 'Отм' = DATA BOOLEAN (UserPriceList);
allStocksPriceList (priceList) += allStocksUserPriceList(priceList);

TABLE priceListStockGroup(PriceList, StockGroup);
dataInPriceListStockGroup 'Отм' = ABSTRACT BOOLEAN (PriceList, StockGroup) PERSISTENT;
dataInUserPriceListStockGroup 'Отм' = DATA BOOLEAN (UserPriceList, StockGroup);
dataInPriceListStockGroup (priceList, stockGroup) += dataInUserPriceListStockGroup(priceList, stockGroup);

TABLE priceListStock(PriceList, Stock);
dataInPriceListStock 'Отм' = ABSTRACT BOOLEAN (PriceList, Stock) PERSISTENT;
dataInUserPriceListStock 'Отм' = DATA BOOLEAN (UserPriceList, Stock);
dataInPriceListStock (priceList, stock) += dataInUserPriceListStock(priceList, stock);

levelParentPriceListStockGroup (priceList, stockGroup) = GROUP MIN levelStockGroupStockGroup(stockGroup, parent) IF dataInPriceListStockGroup(priceList, parent)
                                                               BY priceList, stockGroup PERSISTENT;

inParentPriceListStockGroup (priceList, stockGroup) = TRUE IF levelParentPriceListStockGroup (priceList, stockGroup) PERSISTENT;

inPriceListStockGroup 'Отм' (priceList, stockGroup) = OVERRIDE
    allStocksPriceList(priceList) AND stockGroup IS StockGroup,
    inParentPriceListStockGroup (priceList, stockGroup),
    dataInPriceListStockGroup(priceList, stockGroup);

inPriceListStock 'Отм' (priceList, stock) =
    (OVERRIDE inPriceListStockGroup(priceList, stockGroupStock(stock)),
              dataInPriceListStock(priceList, stock))
    AND isCompanyStock(stock) PERSISTENT;
       
             
@defineBackgroundNearestBoolean(allStocks, in, priceList, stock, inParent, isCompany);                    

stocksPriceList 'Склады' (priceList) = GROUP CONCAT nameStock(stock) IF inPriceListStock(priceList, stock) , ', '
                                       BY priceList
                                       ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;
stocksPriceListDetail 'Склады' (d) = stocksPriceList(priceListPriceListDetail(d));                                       
// История
@defineCreatedAbstract(PriceListDetail);

createdTimePriceListDetail (d) += createdTimeUserPriceList(userPriceListUserPriceListDetail(d));
createdUserPriceListDetail (d) += createdUserUserPriceList(userPriceListUserPriceListDetail(d));
createdComputerPriceListDetail (d) += createdComputerUserPriceList(userPriceListUserPriceListDetail(d));

// Партии
@defineDocumentInterfaceDetailBatch(priceList, batch);
//@deriveDocumentDetailPricePriceListTypeVATBatch(userPriceList, stockProp, userPriceList);

changePurchaseBatchUserPriceListDetail = ACTION (userPriceListDetail) {
    FORM dialogBatch OBJECTS sk = skuUserPriceListDetail(userPriceListDetail) DIALOG SHOWDROP;

    IF formResult() == FormResult.ok THEN {
        ASSIGN batchUserPriceListDetail(userPriceListDetail) <- chosenObject('bt');
    } ELSE IF formResult() == FormResult.drop THEN {
        ASSIGN batchUserPriceListDetail(userPriceListDetail) <- NULL;
    }

};

replaceSkuBatch(s, b) += ACTION (s, b){ skuUserPriceListDetail(detail) <- s WHERE batchUserPriceListDetail(detail) == b;}
//@defineBalancesBatch(priceListDetail); //-- показываем по нажатию правой клавиши остатки партии
//@defineBalancesBatch(userPriceListDetail); //-- показываем по нажатию правой клавиши остатки партии
//@defineMovementBatch(priceListDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии
//@defineMovementBatch(userPriceListDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии

// ------- Проведение по priceListLedger ----- //

EXTEND CLASS PriceListDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += fromDateTimePriceListDetail(ledger);
toDateTimePriceListLedger (ledger) += toDateTimePriceListDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedPriceListDetail(ledger);

skuPriceListLedger (ledger) += skuPriceListDetail(ledger);
inPriceListLedgerBatch (ledger, batch) += batchPriceListDetail(ledger) == batch; 

companyPriceListLedger (ledger) += companyPriceListDetail(ledger);
companyStockPriceListLedger (ledger) += companyStockPriceListDetail(ledger);
descriptionPriceListLedger (ledger) += descriptionPriceList(priceListPriceListDetail(ledger));

inPriceListLedgerLedgerPriceListType (ledger, type) += inPriceListDetailDataPriceListType(ledger, type);
pricePriceListLedgerLedgerPriceListType (ledger, type) += pricePriceListDetailDataPriceListType(ledger, type);
inPriceListLedgerStock (ledger, stock) += inPriceListStock(priceListPriceListDetail(ledger), stock);

createdTimePriceListLedger (d) += createdTimePriceListDetail(d);
createdUserPriceListLedger (d) += createdUserPriceListDetail(d);
createdComputerPriceListLedger (d) += createdComputerPriceListDetail(d);

// -------------- Текущая действующая цена --------------- //

currentPriceUserPriceListDetailPriceListTypeStock 'Действующая цена' (priceListDetail, priceListType, stock) =
    IF inUserPriceListDetailDataPriceListType(priceListDetail, priceListType) THEN
        prevPriceBPriceListTypeSkuStockDateTime(priceListType, skuUserPriceListDetail(priceListDetail), stock, fromDateTimeUserPriceListDetail(priceListDetail))
    ELSE
        prevPriceAPriceListTypeSkuStockDateTime(priceListType, skuUserPriceListDetail(priceListDetail), stock, fromDateTimeUserPriceListDetail(priceListDetail));

// Рассчитываем цены для строк
viewPriceUserPriceListDetailPriceListType 'Цена' = DATA LOCAL NUMERIC[14,2] (UserPriceListDetail, PriceListType);

updateViewPriceDetailUserPriceListDetailPriceListTypeStock(d, t, s) = ACTION {
    viewPriceUserPriceListDetailPriceListType(d, t) <- currentPriceUserPriceListDetailPriceListTypeStock(d, t, s);
}

updateViewPriceDetailUserPriceListDetailStock (d, s) = ACTION {
    FOR showUserPriceListPriceListType(userPriceListUserPriceListDetail(d), t) NOINLINE (t) DO
        updateViewPriceDetailUserPriceListDetailPriceListTypeStock(d, t, s);
}

currentPriceSkuUserPriceListPriceListTypeStock 'Действующая цена' (sku, priceList, priceListType, stock) =
    IF inUserPriceListDataPriceListType(priceList, priceListType) THEN
        prevPriceBPriceListTypeSkuStockDateTime(priceListType, sku, stock, fromDateTimePriceList(priceList))
    ELSE
        prevPriceAPriceListTypeSkuStockDateTime(priceListType, sku, stock, fromDateTimePriceList(priceList));

currentPriceBatchPriceListPriceListTypeStock 'Действующая цена' (batch, priceList, priceListType, stock) =
    IF inUserPriceListDataPriceListType(priceList, priceListType) THEN
        prevPriceBPriceListTypeSkuStockDateTime(priceListType, skuBatch(batch), stock, fromDateTimePriceList(priceList))
    ELSE
        prevPriceAPriceListTypeSkuStockDateTime(priceListType, skuBatch(batch), stock, fromDateTimePriceList(priceList));

changePriceUserPriceListDetailDataPriceListType 'Изменение, %' (priceListDetail, dataPriceListType) =
    priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
    (viewPriceUserPriceListDetailPriceListType (priceListDetail, dataPriceListType) IF viewPriceUserPriceListDetailPriceListType (priceListDetail, dataPriceListType) != 0) - 100.0;

//changePriceUserPriceListDetailDataPriceListTypeStock 'Изменение, %' (priceListDetail, dataPriceListType, stock) =
//    priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
//    (currentPriceUserPriceListDetailPriceListTypeStock (priceListDetail, dataPriceListType, stock) IF currentPriceUserPriceListDetailPriceListTypeStock (priceListDetail, dataPriceListType, stock) != 0) - 100.0;

// Заголовки колонок
headerNameCurrentDataPriceListType (dataPriceListType) =
    namePriceListType(dataPriceListType) + ' (старая)' MINCHARWIDTH 30 MAXCHARWIDTH 50;

headerNameChangeDataPriceListType (dataPriceListType) =
    namePriceListType(dataPriceListType) + ' (изменение, %)' MINCHARWIDTH 30 MAXCHARWIDTH 50;

headerNameDataPriceListType (dataPriceListType) =
    namePriceListType(dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;
    
headerNameCompanyDataPriceListType (dataPriceListType) = 'Организация (старая)' IF dataPriceListType IS PriceListType;    

// Цвета колонок
backgroundCurrentDataPriceListType 'Цвет' (dataPriceListType) = RGB(255,238,165) IF dataPriceListType IS DataPriceListType;
backgroundChangeDataPriceListType 'Цвет' (dataPriceListType) = RGB(232,184,146) IF dataPriceListType IS DataPriceListType;
backgroundDataPriceListType 'Цвет' (dataPriceListType) = RGB(213,249,185) IF dataPriceListType IS DataPriceListType;

// Подбор товаров SKU
detailSkuUserPriceList(sku, price) = GROUP SUM 1 IF sku == skuUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail)
                                           BY skuUserPriceListDetail(detail), userPriceListUserPriceListDetail(detail);

inSkuUserPriceList 'Вкл.' (sku, price) = TRUE IF detailSkuUserPriceList(sku, price);

changeInSkuUserPriceList = ACTION (sku, priceList) {
    REQUEST BOOLEAN INPUT;
    IF NOT requestedLogical() THEN {
        IF detailSkuUserPriceList(sku, priceList) THEN {
            DELETE detail WHERE sku == skuUserPriceListDetail(detail) AND priceList == userPriceListUserPriceListDetail(detail);
        }
    } ELSE {
        FOR ADDOBJ d = UserPriceListDetail DO {
           userPriceListUserPriceListDetail(d) <- priceList;
           skuUserPriceListDetail(d) <- sku;
        }
    }
}

// Подбор товаров batch
detailBatchUserPriceList(batch, price) = GROUP SUM 1 IF batch == batchUserPriceListDetail(detail) AND price == userPriceListUserPriceListDetail(detail)
                                           BY batchUserPriceListDetail(detail), userPriceListUserPriceListDetail(detail);

inBatchUserPriceList 'Вкл.' (batch, price) = TRUE IF detailBatchUserPriceList(batch, price);

changeInBatchUserPriceList = ACTION (batch, priceList) {
    REQUEST BOOLEAN INPUT;
    IF NOT requestedLogical() THEN {
        IF detailBatchUserPriceList(batch, priceList) THEN {
            DELETE detail WHERE batch == batchUserPriceListDetail(detail) AND priceList == userPriceListUserPriceListDetail(detail);
        }
    } ELSE {
        IF NOT detailBatchUserPriceList(batch, priceList) THEN { 
            FOR ADDOBJ d = UserPriceListDetail DO {
               userPriceListUserPriceListDetail(d) <- priceList;
               batchUserPriceListDetail(d) <- batch;
               skuUserPriceListDetail(d) <- skuBatch(batch);
           }
        }
    }
}

// ------------- Подбор документов ----------------- //

numberDocument(priceList) += numberPriceList(priceList);
seriesDocument(priceList) += seriesPriceList(priceList);
dateDocument(priceList) += datePriceList(priceList);
supplierDocument(priceList) += companyPriceList(priceList);

indexDocumentDetail(priceList) += indexPriceListDetail(priceList);
skuDocumentDetail(priceList) += skuPriceListDetail(priceList);

documentDocumentDetail(detail) += priceListPriceListDetail(detail);

fillDocumentPriceList 'Подбор документа' = ACTION (userPriceList) {
    FORM documents MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL chosenDocument = Document();
        ASSIGN chosenDocument() <- chosenObject('d');
        FOR documentDocumentDetail(documentDetail) == chosenDocument() ADDOBJ i = UserPriceListDetail DO {
            ASSIGN userPriceListUserPriceListDetail(i) <- userPriceList;
            ASSIGN skuUserPriceListDetail(i) <- skuDocumentDetail(documentDetail);
        }
    }
} TOOLBAR;

// ---------------------- Активность --------------------------- //
isActivePriceListDateTime(priceList, dateTime) = (fromDateTimePriceList(priceList) <= (dateTime AS DATETIME) AND toDateTimePriceList(priceList) >= dateTime) OR
                                                 (fromDateTimePriceList(priceList) <= (dateTime AS DATETIME) AND NOT toDateTimePriceList(priceList));
isActivePriceList(priceList) = isActivePriceListDateTime(priceList, currentDateTime());
//(fromDateTimePriceList(priceList) <= currentDateTime() AND toDateTimePriceList(priceList) >= currentDateTime()) OR
//                               (fromDateTimePriceList(priceList) <= currentDateTime() AND NOT toDateTimePriceList(priceList));
isActivePriceListDetail(priceListDetail) = (fromDateTimePriceListDetail(priceListDetail) <= currentDateTime() AND toDateTimePriceListDetail(priceListDetail) >= currentDateTime()) OR
                               (fromDateTimePriceListDetail(priceListDetail) <= currentDateTime() AND NOT toDateTimePriceListDetail(priceListDetail));

CONSTRAINT notNullDataPriceListType(priceListType) AND isActivePriceListDetail(detail) AND inPriceListDetailDataPriceListType(detail, priceListType) AND NOT pricePriceListDetailDataPriceListType(detail, priceListType)
    MESSAGE 'Должна быть задана цена';

// Цвета
//backgroundPriceList 'Цвет' (priceList) =
//    IF currentDateTime() > toDateTimePriceList(priceList)
//        THEN RGB(255, 226, 226) IF priceList IS PriceList
//    ELSE
//        RGB(226, 255, 226) IF fromDateTimePriceList(priceList) > currentDateTime();

isOverBackgroundPriceList (priceList) =  ABSTRACT BOOLEAN (PriceList);  
overBackgroundPriceList (priceList) =  ABSTRACT CASE COLOR (PriceList);  
        
defaultBackgroundPriceList 'Цвет' (priceList) = CASE WHEN fromDateTimePriceList(priceList) > currentDateTime() OR NOT isPostedPriceList(priceList) THEN RGB(224,255,224)
                                              WHEN toDateTimePriceList(priceList) < currentDateTime() THEN RGB(255,224,224);      
                                                
backgroundPriceList 'Цвет' (priceList) = IF isOverBackgroundPriceList (priceList) THEN overBackgroundPriceList (priceList)
                                                                                ELSE defaultBackgroundPriceList(priceList);

backgroundPriceListDetail 'Цвет' (priceListDetail) =  ABSTRACT CASE COLOR (PriceListDetail);
//    IF currentDateTime() > toDateTimePriceListDetail(priceListDetail)
//        THEN RGB(255, 226, 226) IF priceListDetail IS PriceListDetail
//    ELSE
//        RGB(226, 255, 226) IF fromDateTimePriceListDetail(priceListDetail) > currentDateTime();
        
        

// --------------- Фильтры для подбора товаров ------------------ //

// Вид цены
filterPriceListTypeUserPriceList = DATA LOCAL PriceListType (UserPriceList);
nameFilterPriceListTypeUserPriceList 'Вид цены' (userPriceList) = namePriceListType(filterPriceListTypeUserPriceList(userPriceList));

//sku
currentPriceSkuPriceListStock 'Текущая цена' (sku, userPriceList, stock) =
    currentPriceSkuUserPriceListPriceListTypeStock(sku, userPriceList, filterPriceListTypeUserPriceList(userPriceList), stock);

//batch
currentPriceBatchPriceListStock 'Текущая цена' (batch, userPriceList, stock) =
    currentPriceBatchPriceListPriceListTypeStock(batch, userPriceList, filterPriceListTypeUserPriceList(userPriceList), stock);
filterPriceListTypeUserPriceListBatchStock (userPriceList, batch, stock) =
    currentPriceBatchPriceListStock (batch, userPriceList, stock) OR
    (batch IS Batch AND stock IS Stock AND NOT filterPriceListTypeUserPriceList(userPriceList));
    
editSkuUserPriceListDetail 'Редактировать SKU' (d) = ACTION editSku(skuUserPriceListDetail(d));   
   
nameCompanyBLedgerPriceListTypeStockPriceListDetail 'Организация' (type, stock, d) = nameLegalEntity(companyBLedgerPriceListTypeSkuStockDateTime(type, skuUserPriceListDetail(d), stock ,fromDateTimePriceListDetail(d)));    
toShowPriceListPriceListType (p, to) = showPriceListPriceListType(p, to) AND to IS LedgerPriceListType AND differentOrganizationsLedgerPriceListType(to);          
    
showBatchPriceList 'Партия' =  ABSTRACT BOOLEAN (PriceList);   
showBatchUserPriceList 'Партия' =  DATA BOOLEAN (PriceList);  
showBatchPriceList(p) += showBatchUserPriceList(p);

showCompanyPriceList 'Организация строки' =  ABSTRACT BOOLEAN (PriceList);   
showCompanyUserPriceList 'Организация строки' =  DATA BOOLEAN (PriceList);  
showCompanyPriceList(p) += showCompanyUserPriceList(p);

showDateTimePriceList 'Даты действия' =  ABSTRACT BOOLEAN (PriceList);   
showDateTimeUserPriceList 'Даты действия' =  DATA BOOLEAN (PriceList);  
showDateTimePriceList(p) += showDateTimeUserPriceList(p);

originalNameSkuPriceListDetail 'Наименование поставщика' = ABSTRACT VARISTRING[255] (PriceListDetail);
originalNameSkuUserPriceListDetail 'Наименование поставщика' = DATA VARISTRING[255] (UserPriceListDetail);
originalNameSkuPriceListDetail(d) += originalNameSkuUserPriceListDetail(d);

showOriginalNameSkuPriceList 'Наименование поставщика' = ABSTRACT BOOLEAN (PriceList);
showOriginalNameSkuUserPriceList 'Наименование поставщика' = DATA BOOLEAN (UserPriceList) IN documentPrm;
showOriginalNameSkuPriceList(d) += showOriginalNameSkuUserPriceList(d); 

originalIdBarcodeSkuPriceListDetail 'Штрихкод поставщика' = ABSTRACT STRING[15] (PriceListDetail) FIXEDCHARWIDTH 15;
originalIdBarcodeSkuUserPriceListDetail 'Штрихкод поставщика' = DATA STRING[15] (UserPriceListDetail) FIXEDCHARWIDTH 15;
originalIdBarcodeSkuPriceListDetail(d) += originalIdBarcodeSkuUserPriceListDetail(d);

showOriginalIdBarcodeSkuPriceList 'Штрихкод поставщика' = ABSTRACT BOOLEAN (PriceList);
showOriginalIdBarcodeSkuUserPriceList 'Штрихкод поставщика' = DATA BOOLEAN (UserPriceList) IN documentPrm;
showOriginalIdBarcodeSkuPriceList(d) += showOriginalIdBarcodeSkuUserPriceList(d); 
      
@defineMovementSku(priceListDetail); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPriceListDetail); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(priceListDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPriceListDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(priceListDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPriceListDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(priceListDetail); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userPriceListDetail); //-- показываем по нажатию правой клавиши  изменение цены товара      
      
FORM userPriceList 'Прайс'
    OBJECTS p = UserPriceList FIXED PANEL
    PROPERTIES(p) isPostedUserPriceList, nameNumeratorUserPriceList, numberUserPriceList, seriesUserPriceList,
                  dateUserPriceList, timeUserPriceList,
                  fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                  nameCurrencyUserPriceList, nameCompanyUserPriceList, nameCompanyStockUserPriceList, noteUserPriceList,
                  nameGroupTypeS = nameGroupTypeUserPriceList, nameGroupTypeP = nameGroupTypeUserPriceList,
                  showBatchUserPriceList, showCompanyUserPriceList, showDateTimeUserPriceList, showOriginalIdBarcodeSkuUserPriceList, showOriginalNameSkuUserPriceList

    OBJECTS t = PriceListType
    PROPERTIES(t) READONLY namePriceListType, includeVATLedgerPriceListType FORCE GRID
    PROPERTIES(p, t) inUserPriceListDataPriceListType FORCE GRID, showPriceListPriceListType
    FILTERS (currencyUserPriceList(p) == currencyPriceListType(t)) OR 
            NOT currencyPriceListType(t) OR NOT currencyUserPriceList(p) 

    OBJECTS tc = DataPriceListType FIXED GRID
    FILTERS inUserPriceListDataPriceListType(p, tc), 
            (currencyUserPriceList(p) == currencyPriceListType(tc)) OR 
            NOT currencyPriceListType(tc) OR NOT currencyUserPriceList(p) 

    OBJECTS to = PriceListType FIXED GRID
    FILTERS showPriceListPriceListType(p, to)

    OBJECTS th = DataPriceListType FIXED GRID
    FILTERS inUserPriceListDataPriceListType(p, th) AND showPriceListPriceListType(p, th)  

    TREE skuTree sk = Group PARENT parentGroup
    PROPERTIES READONLY orderGroup(sk), skuTreeName = nameGroup(sk)
    ORDER BY orderGroup(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' activeGroup(sk) 'F5' DEFAULT

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) BACKGROUND backgroundPriceListDetail(d) indexUserPriceListDetail
    PROPERTIES(d) BACKGROUND backgroundPriceListDetail(d) ON EDIT editSkuUserPriceListDetail(d) idSkuUserPriceListDetail, idBarcodeSkuUserPriceListDetail, nameSkuUserPriceListDetail,
                  shortNameUOMSkuUserPriceListDetail
    PROPERTIES(d) BACKGROUND backgroundPriceListDetail(d)nameBatchUserPriceListDetail ON CHANGE changePurchaseBatchUserPriceListDetail(d) SHOWIF showBatchUserPriceList(p),
                  valueVATUserPriceListDetail, fromDateUserPriceListDetail SHOWIF showDateTimeUserPriceList(p), 
                  fromTimeUserPriceListDetail SHOWIF showDateTimeUserPriceList(p), toDateUserPriceListDetail SHOWIF showDateTimeUserPriceList(p), 
                  toTimeUserPriceListDetail SHOWIF showDateTimeUserPriceList(p), nameCompanyUserPriceListDetail SHOWIF showCompanyUserPriceList(p), 
                  ADDOBJ, DELETESESSION
    PROPERTIES(d, tc) priceUserPriceListDetailDataPriceListType COLUMNS (tc) HEADER headerNameDataPriceListType(tc) BACKGROUND backgroundDataPriceListType(tc)
    PROPERTIES(p) TODRAW d FORCE PANEL TOOLBAR fillDocumentPriceList, addDetailInputBarcodeUserPriceListDetailUserPriceList
    ORDER BY indexUserPriceListDetail(d)
    FILTERS userPriceListUserPriceListDetail(d) == p,
            isParentGroupSku(sk, skuPriceListDetail(d)) OR NOT groupGroupTypeSku(groupTypeGroup(sk), skuPriceListDetail(d)),
            groupTypeUserPriceList(p) == groupTypeGroup(sk)
    FILTERGROUP filters
        FILTER 'Активные' isActivePriceListDetail(d) 'F10'

    TREE stockTree a=STRING[3], sg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = nameStockGroup(sg)
    PROPERTIES(p) allStocksPriceList TODRAW a FORCE GRID BACKGROUND backgroundAllStocksPriceList(p)
    PROPERTIES(p, sg) inPriceListStockGroup BACKGROUND backgroundInPriceListStockGroup(p,sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    FILTERS countCompanyStockStockGroup(sg)

    OBJECTS ts = Stock
    PROPERTIES READONLY  nameStock(ts)
    PROPERTIES(p, ts)    inPriceListStock BACKGROUND backgroundInPriceListStock(p,ts)
//    PROPERTIES(d, to, ts) currentPriceUserPriceListDetailPriceListTypeStock COLUMNS (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to)
//    PROPERTIES(d, th, ts) changePriceUserPriceListDetailDataPriceListTypeStock COLUMNS (th) HEADER headerNameChangeDataPriceListType(th) BACKGROUND backgroundChangeDataPriceListType(th)
    FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParentStockGroupStock(sg, ts),
            isCompanyStock(ts)
    FILTERGROUP filters2
            FILTER 'Выбранные склады' inPriceListStock(p, ts) 'F10'
    FILTERGROUP inactiveStock FILTER 'Активный' activeStock(ts) 'ctrl F10' DEFAULT
        
    OBJECTS tt = Stock FIXED PANEL
    PROPERTIES SELECTOR stockName = nameStock(tt) FORCE PANEL
    PROPERTIES(d, to) READONLY viewPriceUserPriceListDetailPriceListType COLUMNS 'type' (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to) TODRAW d FORCE GRID
//    PROPERTIES(d, to, tt) READONLY currentPriceUserPriceListDetailPriceListTypeStock COLUMNS 'type' (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to) TODRAW d FORCE GRID
    PROPERTIES(to, tt, d) SHOWIF toShowPriceListPriceListType(p, to) READONLY nameCompanyBLedgerPriceListTypeStockPriceListDetail COLUMNS 'type' (to) HEADER headerNameCompanyDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to) TODRAW d FORCE GRID    
    PROPERTIES(d, th) READONLY changePriceUserPriceListDetailDataPriceListType COLUMNS (th) HEADER headerNameChangeDataPriceListType(th) BACKGROUND backgroundChangeDataPriceListType(th) TODRAW d FORCE GRID

//    PROPERTIES(d)        nameCompanyUserPriceListDetail
    FILTERS isCompanyStock(tt),
            inPriceListStock(p, tt)

    TREE skuTree2 sk2 = Group PARENT parentGroup
    PROPERTIES READONLY orderGroup(sk2), skuTreeName2 = nameGroup(sk2)
    ORDER BY orderGroup(sk2), skuTreeName2
    FILTERGROUP inactive1 FILTER 'Активные' activeGroup(sk2) 'F5' DEFAULT

    OBJECTS ts2 = Stock FIXED PANEL
    PROPERTIES(ts2) SELECTOR nameStock
    FILTERS inPriceListStock(p, ts2),
            isCompanyStock(ts2)
    PROPERTIES(p) FORCE PANEL nameFilterPriceListTypeUserPriceList

    OBJECTS s2=Sku
    PROPERTIES inSkuUserPriceList(s2, p) ON CHANGE changeInSkuUserPriceList(s2, p)
    PROPERTIES READONLY inputName2 = nameSku(s2), idBarcodeSku(s2), shortNameUOMSku(s2), currentBalanceSkuStock(s2, ts2)
    PROPERTIES READONLY currentPriceSkuPriceListStock(s2, p, ts2) SHOWIF filterPriceListTypeUserPriceList(p)
    PROPERTIES(s2, p, to, ts2) currentPriceSkuUserPriceListPriceListTypeStock COLUMNS (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to)
    PROPERTIES                 addSku() TODRAW s2, editSku(s2), copySku(s2)
    FILTERS currentPriceSkuPriceListStock (s2, p, ts2) OR
            NOT filterPriceListTypeUserPriceList(p),
            groupTypeUserPriceList(p) == groupTypeGroup(sk2)
    FILTERGROUP filters3
        FILTER 'С остатком' currentBalanceSkuStock(s2, ts2) 'F10'

    FILTERS isParentGroupSku(sk2, s2)
    ORDER BY inputName2

    OBJECTS b=Batch
    PROPERTIES inBatchUserPriceList(b, p) ON CHANGE changeInBatchUserPriceList(b, p) 
    PROPERTIES READONLY idBarcodeSkuBatch(b)
    PROPERTIES READONLY  nameSkuBatch(b)
    PROPERTIES READONLY QUICKFILTER nameSkuBatch(b) shortNameUOMBatch(b),
                                                 prevCurrentBalanceBatchStock(b, ts2), nameBatch(b)
    PROPERTIES READONLY currentPriceBatchPriceListStock(b, p, ts2) SHOWIF filterPriceListTypeUserPriceList(p)                                                 
    PROPERTIES(b, p, to, ts2) currentPriceBatchPriceListPriceListTypeStock COLUMNS (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to)
    FILTERS filterPriceListTypeUserPriceListBatchStock(p, b, ts2),
            isParentSkuGroupBatch(sk2, b)
    FILTERGROUP filters4
        FILTER 'С остатком' prevCurrentBalanceBatchStock(b, ts2) 'F10' DEFAULT
    ORDER BY nameSkuBatch(b)

    EVENTS
        ON OK prePostUserPriceList(p)

    EDIT UserPriceList OBJECT p
;
EXTEND FORM userPriceList
    PROPERTIES(d) AFTER nameSkuUserPriceListDetail(d) originalIdBarcodeSkuUserPriceListDetail SHOWIF showOriginalIdBarcodeSkuUserPriceList(p), originalNameSkuUserPriceListDetail  SHOWIF showOriginalNameSkuUserPriceList(p)        
;

WHEN SESSION FORMS userPriceList CHANGED(companyUserPriceList(o)) DO {
    IF counStocksLegalEntity (companyUserPriceList(o)) == 1 THEN
        companyStockUserPriceList(o) <- defaultStockLegalEntity(companyUserPriceList(o));
    IF NOT inLegalEntityStock(companyUserPriceList(o), companyStockUserPriceList(o)) THEN 
        companyStockUserPriceList(o) <- NULL;
}

WHEN SESSION FORMS userPriceList (SET([= VIEW userPriceList.d](d)) OR // изменились строки
                                  CHANGED(skuUserPriceListDetail(d)) OR // или изменился sku
                                  CHANGED(fromDateTimeUserPriceListDetail(d)) OR // или изменился дата с
                                  CHANGED([= VIEW userPriceList.tt](s))) // или изменился склад
                                 AND [= VIEW userPriceList.d](d)
                                 AND [= VIEW userPriceList.tt](s) DO
    updateViewPriceDetailUserPriceListDetailStock(d, s);

WHEN SESSION FORMS userPriceList CHANGED(showUserPriceListPriceListType(userPriceListUserPriceListDetail(d), t))
                                 AND [= VIEW userPriceList.d](d)
                                 AND [= VIEW userPriceList.tt](s) NOINLINE (t) DO
    updateViewPriceDetailUserPriceListDetailPriceListTypeStock(d, t, s);

// Оптимизация с преподсчетом видов цен в сессионное свойство

//viewCurrentPricePriceListDetailDataPriceListTypeStock 'Действующая цена' = DATA LOCAL NUMERIC[14,2] (UserPriceListDetail, DataPriceListType, Stock);
//
//currentUserPriceList = DATA LOCAL UserPriceList ();
//setCurrentUserPriceList (u) = ACTION currentUserPriceList() <- u;
//
//EXTEND FORM userPriceList
//    PROPERTIES(d, t, ts) viewCurrentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) SHOWIF headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t)
//    PROPERTIES(d, t, tt) viewCurrentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) SHOWIF headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t) TODRAW d FORCE GRID
//    EVENTS
//        ON CHANGE p setCurrentUserPriceList(p)
//;
//
//WHEN SESSION FORMS userPriceList SET([= VIEW userPriceList.d](d)) AND p == currentUserPriceList() DO
//    FOR showUserPriceListPriceListType(p, pt) AND isCompanyStock(s) NOINLINE (pt) DO
//        viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s);  
//
//WHEN SESSION FORMS userPriceList CHANGED(showUserPriceListPriceListType(p, pt)) NOINLINE (pt) DO
//    viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s) 
//        WHERE [= VIEW userPriceList.d](d) AND isCompanyStock(s);  
//
//WHEN SESSION FORMS userPriceList CHANGED(skuUserPriceListDetail(d)) OR CHANGED(fromDateTimeUserPriceListDetail(d)) DO
//    viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s) 
//        WHERE showUserPriceListPriceListType(userPriceListUserPriceListDetail(d), pt) AND isCompanyStock(s);  
//

DESIGN userPriceList {
    NEW top {
        type = CONTAINERH;
        NEW top1 {
            type = CONTAINERV;
            NEW headContainer {
                caption = 'Шапка документа';       
                type = CONTAINERV;
                
                NEW first {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPostedUserPriceList(p)) { preferredCharWidth = 40; }
                }
                NEW second { 
                    type = CONTAINERH;
                    MOVE PROPERTY (nameNumeratorUserPriceList(p));
                    MOVE PROPERTY (numberUserPriceList(p));
                    MOVE PROPERTY (seriesUserPriceList(p));
                    MOVE PROPERTY (dateUserPriceList(p));
                    MOVE PROPERTY (timeUserPriceList(p));
                }        
        
            }
            NEW midContainer {
                type = CONTAINERH;
                NEW timeContainer{
                    caption = 'Период действия';
                    type = CONTAINERH;
                    MOVE PROPERTY (fromDateUserPriceList(p));
                    MOVE PROPERTY (fromTimeUserPriceList(p));
                    MOVE PROPERTY (toDateUserPriceList(p));
                    MOVE PROPERTY (toTimeUserPriceList(p));
                }
            }
            MOVE p.documentPrm{
                caption = 'Параметры документа';
                type = COLUMNS;
                columns = 3;
                MOVE PROPERTY(nameCurrencyUserPriceList(p));
                MOVE PROPERTY(nameCompanyUserPriceList(p));
                MOVE PROPERTY(nameCompanyStockUserPriceList(p));
                MOVE PROPERTY(noteUserPriceList(p));
            }             
        }
        NEW param {
            caption = 'Дополнительные параметры';
            type = COLUMNS;
            columns = 1; 
            MOVE PROPERTY(showOriginalIdBarcodeSkuUserPriceList(p));
            MOVE PROPERTY(showOriginalNameSkuUserPriceList(p));
            MOVE PROPERTY(showBatchUserPriceList(p)); 
            MOVE PROPERTY(showCompanyUserPriceList(p));
            MOVE PROPERTY(showDateTimeUserPriceList(p));
        }         
    }

    NEW detailContainer{
        fill = 1;
        type = TABBED;
        NEW firstContainer{
            fill = 1;
            caption = 'Спецификация';

            type = SPLITH;
            NEW leftColumnContainer{
                fill = 1;
                MOVE tt.box;
                MOVE PROPERTY(nameGroupTypeS);
                MOVE skuTree.tree.box {
                    caption = 'Группы товаров';
                }
            }
            NEW skuContainer{
                fill = 3;
                NEW rowContainer {
                    type = CONTAINERH;
                    MOVE PROPERTY(addDetailInputBarcodeUserPriceListDetailUserPriceList(p));
                }
                MOVE d.box;
            }
        }

        NEW secondContainer {
            fill = 1;
            caption = 'Склады';
            type = SPLITH;
            MOVE stockTree.tree.box {
                caption = 'Группы складов';
            }
            MOVE ts.box {
                fill = 2;
            }
        }

        NEW thirdContainer{
            fill = 1;
            caption = 'Вид цен';
            MOVE t.box;
        }

        NEW fourthContainer {
            caption = 'Подбор';
            NEW topThirdContainer{
                type = CONTAINERH;
                MOVE ts2.box;
                NEW filtersContainer {
                    caption = 'Фильтры';
                    type = CONTAINERH;
                    MOVE PROPERTY(nameFilterPriceListTypeUserPriceList(p));
                }
            }
            NEW detailFourthContainer{
                fill = 1;
                type = SPLITH;
                NEW treeContainer {
                    fill = 1;
                    MOVE PROPERTY(nameGroupTypeP);
                    MOVE skuTree2.tree.box {
                        caption = 'Группы товаров';
                    }                        
                }
                NEW tabContainer {
                    type = TABBED;
                    fill = 3;
                    MOVE s2.box;
                    MOVE b.box{
                        caption = 'Партии';
                    }                    
                }
            }
        }

    }
    MOVE functions.box;

    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

editPriceListDetail 'Редактировать' = ABSTRACT ACTION LIST (PriceListDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editUserPriceListDetail(d) = ACTION (d) NEWSESSION {
    FORM userPriceList OBJECTS p = userPriceListUserPriceListDetail(d), d = d MANAGESESSION DOCKEDMODAL;
}
editPriceListDetail(d) += ACTION editUserPriceListDetail(d);   
editPriceListLedger(d) += ACTION editPriceListDetail(d);
    
// -------------------------------- Изменение цен для строк ------------------------------ //

CLASS TypeMarkUpSkuUserPriceList 'Метод изменения цены'{
    percent 'Наценка, %',
    multiplication 'Умножение',
    division 'Деление'
}

FORM typeMarkUpSkuUserPriceList 'Метод изменения цены'
    OBJECTS m = TypeMarkUpSkuUserPriceList
    PROPERTIES(m) READONLY staticCaption

    DIALOG TypeMarkUpSkuUserPriceList OBJECT m
;

DESIGN typeMarkUpSkuUserPriceList {
    PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
}

headerNumericCaption(type) =
    CASE
        WHEN type == TypeMarkUpSkuUserPriceList.percent
            THEN '% наценки' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.multiplication
            THEN 'Множитель' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.division
            THEN 'Делитель' IF type IS TypeMarkUpSkuUserPriceList
        ELSE '% наценки' IF type IS TypeMarkUpSkuUserPriceList
    ;

FORM chooseMarkUpSkuUserPriceList 'Наценка'

    OBJECTS p = UserPriceList FIXED PANEL

    OBJECTS m = TypeMarkUpSkuUserPriceList FIXED PANEL
    PROPERTIES(m) SELECTOR staticCaption

    OBJECTS pt = PriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType

    OBJECTS n = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(n) objValue = OBJVALUE HEADER headerNumericCaption(m)

    OBJECTS nt = DataPriceListType FIXED PANEL
    PROPERTIES(nt) SELECTOR nameDataPriceListType
    FILTERS inUserPriceListDataPriceListType(p, nt)
;

DESIGN chooseMarkUpSkuUserPriceList {

    REMOVE p.box;
    NEW topContainer {
        type = CONTAINERV;
        MOVE PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
        MOVE PROPERTY(namePriceListType(pt));
        PROPERTY(namePriceListType(pt)){caption = 'Старая цена';}
        MOVE PROPERTY(objValue);
        PROPERTY(objValue){caption = 'Изменение';}
        MOVE PROPERTY(nameDataPriceListType(nt));
        PROPERTY(nameDataPriceListType(nt)){caption = 'Новая цена';}
    }
    MOVE functions.box;
}

// ----------------------- Для отмеченных строк ------------------------ //
isSelectedUserPriceListDetail 'Отм' = DATA LOCAL BOOLEAN (UserPriceListDetail);
changeMarkUpChosenSkuUserPriceList 'Изменить цену для отмеченных строк' = ACTION (userPriceList, stock) {
    FORM chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList MODAL;
    IF formResult() == FormResult.ok THEN {
        IF NOT [= GROUP SUM 1 IF isSelectedUserPriceListDetail(priceListDetail)
                      BY userPriceListUserPriceListDetail(priceListDetail)](userPriceList) THEN
            MESSAGE 'Выберите хотя бы одну позицию'
        ELSE {
            LOCAL prevPrice = NUMERIC[14,2] (UserPriceListDetail);
            IF chosenObject('pt') != chosenObject('nt') AND inUserPriceListDataPriceListType(userPriceList, chosenObject('pt')) THEN {
                prevPrice(detail) <- priceUserPriceListDetailDataPriceListType(detail, chosenObject('pt'))
                                     WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
            } ELSE {
                prevPrice(detail) <- currentPriceUserPriceListDetailPriceListTypeStock(detail, chosenObject('pt'), stock)
                                     WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
            }
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent AND includeVATPriceListType(chosenObject('nt')) AND NOT includeVATPriceListType(chosenObject('pt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (valueVATUserPriceListDetail(detail) + 100.0) / 100.0 * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent AND includeVATPriceListType(chosenObject('pt')) AND NOT includeVATPriceListType(chosenObject('nt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / (valueVATUserPriceListDetail(detail) + 100.0) * 100.0 * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent THEN{
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            }
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication AND includeVATPriceListType(chosenObject('nt')) AND NOT includeVATPriceListType(chosenObject('pt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (valueVATUserPriceListDetail(detail) + 100.0) / 100.0 * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication AND includeVATPriceListType(chosenObject('pt')) AND NOT includeVATPriceListType(chosenObject('nt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / (valueVATUserPriceListDetail(detail) + 100.0) * 100.0 * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            }
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division AND includeVATPriceListType(chosenObject('nt')) AND NOT includeVATPriceListType(chosenObject('pt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (valueVATUserPriceListDetail(detail) + 100.0) / 100.0 / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division AND includeVATPriceListType(chosenObject('pt')) AND NOT includeVATPriceListType(chosenObject('nt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / (valueVATUserPriceListDetail(detail) + 100.0) * 100.0 / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE isSelectedUserPriceListDetail(detail) AND userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(d) isSelectedUserPriceListDetail BEFORE indexUserPriceListDetail(d)
    PROPERTIES(p, tt) TODRAW d FORCE PANEL TOOLBAR changeMarkUpChosenSkuUserPriceList
    FILTERGROUP filterSelected
        FILTER 'Отмеченные строки' isSelectedUserPriceListDetail(d) 'F11'
;
DESIGN userPriceList{
    rowContainer{
        MOVE PROPERTY(changeMarkUpChosenSkuUserPriceList(p,tt));
    }
}

// ---------------------- Для всех строк ----------------------- //
changeMarkUpSkuUserPriceList 'Изменить цену для всех строк' = ACTION (userPriceList, stock) {
    FORM chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL prevPrice = NUMERIC[14,2] (UserPriceListDetail);
        IF chosenObject('pt') != chosenObject('nt') AND inUserPriceListDataPriceListType(userPriceList, chosenObject('pt')) THEN {
            prevPrice(detail) <- priceUserPriceListDetailDataPriceListType(detail, chosenObject('pt'))
                                 WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
        } ELSE {
            prevPrice(detail) <- currentPriceUserPriceListDetailPriceListTypeStock(detail, chosenObject('pt'), stock)
                                 WHERE userPriceListUserPriceListDetail(detail) == userPriceList;
        }

        FOR [= FILTER userPriceList.d](detail) DO {
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent AND includeVATPriceListType(chosenObject('nt')) AND NOT includeVATPriceListType(chosenObject('pt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (valueVATUserPriceListDetail(detail) + 100.0) / 100.0 * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent AND includeVATPriceListType(chosenObject('pt')) AND NOT includeVATPriceListType(chosenObject('nt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / (valueVATUserPriceListDetail(detail) + 100.0) * 100.0 * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.percent THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (chosenNumeric('n') + 100.0) / 100.0, roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            }
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication AND includeVATPriceListType(chosenObject('nt')) AND NOT includeVATPriceListType(chosenObject('pt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (valueVATUserPriceListDetail(detail) + 100.0) / 100.0 * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication AND includeVATPriceListType(chosenObject('pt')) AND NOT includeVATPriceListType(chosenObject('nt')) THEN{
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / (valueVATUserPriceListDetail(detail) + 100.0) * 100.0 * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.multiplication THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            }
            IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division AND includeVATPriceListType(chosenObject('nt')) AND NOT includeVATPriceListType(chosenObject('pt')) THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) * (valueVATUserPriceListDetail(detail) + 100.0) / 100.0 / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division AND includeVATPriceListType(chosenObject('pt')) AND NOT includeVATPriceListType(chosenObject('nt')) THEN{
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / (valueVATUserPriceListDetail(detail) + 100.0) * 100.0 / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            } ELSE IF chosenObject('m') == TypeMarkUpSkuUserPriceList.division THEN {
                ASSIGN priceUserPriceListDetailDataPriceListType(detail, t) <-
                    roundPriceRoundCondition(prevPrice(detail) / chosenNumeric('n'), roundConditionPriceListType(t))
                    WHERE userPriceListUserPriceListDetail(detail) == userPriceList AND t == chosenObject('nt');
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p, tt) TODRAW d FORCE PANEL TOOLBAR changeMarkUpSkuUserPriceList
;

DESIGN userPriceList{
    rowContainer{
        MOVE PROPERTY(changeMarkUpSkuUserPriceList(p,tt)) BEFORE PROPERTY(changeMarkUpChosenSkuUserPriceList(p,tt));
    }
}

addUserPriceList 'Добавить' = ACTION ADDFORM UserPriceList;
editUserPriceList 'Редактировать' = ACTION EDITFORM UserPriceList;
editPriceList 'Редактировать' = ABSTRACT ACTION LIST (PriceList) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
editPriceList (p) += ACTION editUserPriceList(p);
// ------------------ Копирование прайс-листов ------------------- //

copyAbstractDataPriceList = ABSTRACT ACTION LIST (PriceList, UserPriceList);

copyDataPriceList = ACTION (priceList, userPriceList){
        currencyUserPriceList(userPriceList) <- currencyUserPriceList(priceList);
        companyUserPriceList(userPriceList) <- companyUserPriceList(priceList);
        companyStockUserPriceList(userPriceList) <- companyStockUserPriceList(priceList);
        dataInUserPriceListStock(userPriceList, stock) <- dataInUserPriceListStock(priceList, stock);
        dataInUserPriceListStockGroup(userPriceList, stockGroup) <- dataInUserPriceListStockGroup(priceList, stockGroup);
        allStocksUserPriceList(userPriceList) <- allStocksUserPriceList(priceList);
        inUserPriceListDataPriceListType(userPriceList, priceListType) <- inUserPriceListDataPriceListType(priceList, priceListType);
        EXEC copyAbstractDataPriceList(priceList, userPriceList);
        FOR userPriceListUserPriceListDetail(detail) == priceList DO {
            FOR ADDOBJ d = UserPriceListDetail DO {
                ASSIGN userPriceListUserPriceListDetail(d) <- userPriceList;
                ASSIGN skuUserPriceListDetail(d) <- skuUserPriceListDetail(detail);
                ASSIGN priceUserPriceListDetailDataPriceListType(d, priceListType) <- pricePriceListDetailDataPriceListType(detail, priceListType);
            }
        }
}

copySessionPriceList 'Копировать' = ACTION (priceList){

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

copyPriceList 'Копировать' = ACTION (priceList) NEWSESSION {

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
}

updateSessionPriceList 'Обновить' = ACTION (priceList) {

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN {
            ASSIGN toDateUserPriceList(priceList) <- fromDateUserPriceList(u);
            ASSIGN toTimeUserPriceList(priceList) <- fromTimeUserPriceList(u);
        } ELSE {
            DELETE u;
        }
    }

}
updatePriceList 'Обновить' = ACTION (priceList) NEWSESSION{

    FOR ADDOBJ u = UserPriceList DO {
        EXEC copyDataPriceList(priceList, u);
        FORM userPriceList OBJECTS p = u DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN {
            ASSIGN toDateUserPriceList(priceList) <- fromDateUserPriceList(u);
            ASSIGN toTimeUserPriceList(priceList) <- fromTimeUserPriceList(u);
            apply();
        } ELSE {
            DELETE u;
        }
    }
}

printPriceList 'Распечатать' = ABSTRACT ACTION LIST (PriceList);

filterPriceListDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFromPriceList (p) = fromDatePriceList(p) >= filterPriceListDateFrom() OR (p IS PriceList AND NOT filterPriceListDateFrom());      

filterPriceListDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateToPriceList (p) = toDatePriceList(p) <= filterPriceListDateTo() OR (p IS PriceList AND NOT filterPriceListDateTo());      

filterPriceListCompany  = DATA LOCAL LegalEntity ();
nameFilterPriceListCompany 'Организация' = nameLegalEntity(filterPriceListCompany()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterCompanyPriceList (p) = companyPriceList(p) == filterPriceListCompany() OR (p IS PriceList AND NOT filterPriceListCompany());       

FORM priceLists 'Прайсы'
    PROPERTIES() filterPriceListDateFrom, filterPriceListDateTo, nameFilterPriceListCompany

    OBJECTS p = PriceList
    PROPERTIES(p) READONLY BACKGROUND backgroundPriceList(p)
           isPostedPriceList FORCE GRID, numberPriceList, seriesPriceList, datePriceList, timePriceList,
           fromDatePriceList, fromTimePriceList, toDatePriceList, toTimePriceList, countPriceListDetailPriceList,
           nameCurrencyPriceList, nameCompanyPriceList, nameCompanyStockPriceList, priceListTypesPriceList, stocksPriceList,
           notePriceList

    PROPERTIES ()  addUserPriceList TODRAW p
    PROPERTIES (p) editPriceList, copyPriceList FORCE PANEL TOOLBAR, printPriceList FORCE PANEL TOOLBAR
    PROPERTIES (p) DELETE FORCE PANEL TOOLBAR SHOWIF isUserPriceList(p)
    PROPERTIES (p) READONLY FORCE PANEL createdNameUserUserPriceList, createdTimeUserPriceList, createdHostnameComputerUserPriceList, 
                                        postedNameUserUserPriceList, postedTimeUserPriceList, postedHostnameComputerUserPriceList 
                                        
    OBJECTS t = DataPriceListType FIXED GRID

    OBJECTS d = PriceListDetail
    PROPERTIES(d) READONLY BACKGROUND backgroundPriceListDetail(d) indexPriceListDetail, idBarcodeSkuPriceListDetail, nameSkuPriceListDetail,
                           shortNameUOMSkuPriceListDetail, nameBatchPriceListDetail, nameCompanyPriceListDetail
    PROPERTIES(d) READONLY AFTER nameSkuPriceListDetail(d) originalIdBarcodeSkuPriceListDetail SHOWIF showOriginalIdBarcodeSkuPriceList(p), originalNameSkuPriceListDetail SHOWIF showOriginalNameSkuPriceList(p)
    
    ORDER BY indexPriceListDetail(d)
    
    OBJECTS ts = Stock
    PROPERTIES(ts) READONLY nameStock
    PROPERTIES(p, ts) READONLY inPriceListStock

    PROPERTIES(d, t) READONLY BACKGROUND backgroundPriceListDetail(d) pricePriceListDetailDataPriceListType COLUMNS (t) HEADER nameDataPriceListType(t)

    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActivePriceList(p) 'F11'            
        FILTER 'Активные' isActivePriceList(p) OR (fromDateTimePriceList(p) > currentDateTime()) 'F10' DEFAULT
        
    FILTERGROUP inactiveStock 
        FILTER 'Активный' activeStock(ts) 'ctrl F10' DEFAULT    

    FILTERS priceListPriceListDetail(d) == p,
            inPriceListDataPriceListType(p, t),
            inPriceListStock(p, ts),
            currencyUserPriceList(p) == currencyDataPriceListType(t),
            isCompanyStock(ts)
    FILTERS filterDateFromPriceList(p), 
            filterDateToPriceList(p),
            filterCompanyPriceList(p)                    

    DIALOG PriceList OBJECT p
;

DESIGN priceLists {
    NEW topContainer{
        fill = 1;
        type = SPLITV;
        REMOVE t.box;
//        ADD p.box {
//            fill = 2;
//        }
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterPriceListDateFrom());    
                MOVE PROPERTY(filterPriceListDateTo());
                MOVE PROPERTY(nameFilterPriceListCompany());                
            }
            MOVE p.box {
                fill = 1;
            }
        }        
        NEW detailContainer{
            fill = 1;
            type = TABBED;
            NEW firstContainer{
                caption = 'Спецификация';
                type = SPLITH;
                MOVE d.box {
                    fill = 4;
                }
                MOVE ts.box;
            }
            NEW documentHistory {
                caption = 'История';
                type = CONTAINERV;

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                    MOVE PROPERTY(printPriceList(p));
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
            }
        }
    }
    MOVE functions.box;
}

@defineDocumentLogForm(priceLists, p);

NAVIGATOR {
    priceListDocuments 'Документы' {
        ADD priceLists;
    }
}

// Заполнение на основании

addUnderPriceListUserPriceList 'Заполнить на основании' = ACTION (p) {
    FORM priceLists MODAL;
    IF formResult() == FormResult.ok THEN {
        FOR priceListPriceListDetail(detail) == chosenObject('p') ADDOBJ d = UserPriceListDetail DO {
            userPriceListUserPriceListDetail(d) <- p;
            skuUserPriceListDetail(d) <- skuPriceListDetail(detail);
            priceUserPriceListDetailDataPriceListType(d, type) <- pricePriceListDetailDataPriceListType(detail, type)
                                                                  WHERE inUserPriceListDataPriceListType(p, type); 
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p) TODRAW d FORCE PANEL TOOLBAR addUnderPriceListUserPriceList
;

//печать прайсов

FORM printPriceList 'Прайс'
    OBJECTS p = PriceList FIXED PANEL
    PROPERTIES(p) READONLY numberPriceList, seriesPriceList, datePriceList, timePriceList,
           fromDatePriceList, fromTimePriceList, toDatePriceList, toTimePriceList,
           nameCurrencyPriceList, nameCompanyPriceList, nameCompanyStockPriceList, priceListTypesPriceList, stocksPriceList,
           notePriceList, isPostedPriceList

    OBJECTS t = DataPriceListType
    PROPERTIES(t) READONLY namePriceListType
    FILTERS inPriceListDataPriceListType(p, t),
            (currencyUserPriceList(p) == currencyPriceListType(t)) OR (p IS PriceList AND t IS PriceListType AND NOT currencyPriceListType(t))

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) READONLY indexPriceListDetail, idBarcodeSkuPriceListDetail, nameSkuPriceListDetail,
                           shortNameUOMSkuPriceListDetail, nameCompanyPriceListDetail
    PROPERTIES(d, t) pricePriceListDetailDataPriceListType COLUMNS (t) HEADER headerNameDataPriceListType(t) BACKGROUND backgroundDataPriceListType(t) TODRAW d FORCE GRID

    FILTERS priceListPriceListDetail(d) == p
;

printPrintPriceList 'Распечатать' (priceList) =
    ACTION FORM printPriceList OBJECTS p = priceList PRINT  IMAGE 'print.png' IN print;

printPriceList(priceList) += ACTION printPrintPriceList(priceList);

// ------------------------- Расширяем форму LegalEntity ----------------------- //
overAddUserPriceList= ABSTRACT ACTION LIST (UserPriceList);
addUserPriceListLegalEntity 'Добавить' = ACTION (legalEntity) NESTEDSESSION {
    FOR ADDOBJ u = UserPriceList DO {
        companyUserPriceList(u) <- legalEntity;
        overAddUserPriceList(u); 
        FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY BACKGROUND backgroundPriceList(p) isPostedUserPriceList, numberUserPriceList, seriesUserPriceList, dateUserPriceList, timeUserPriceList,
                           fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                           nameCurrencyUserPriceList, priceListTypesPriceList,
                           stocksPriceList, noteUserPriceList
    PROPERTIES addUserPriceListLegalEntity(l) TODRAW p FORCE PANEL, updateSessionPriceList(p) TODRAW p FORCE PANEL TOOLBAR
    PROPERTIES(p) EDITSESSIONFORM, DELETESESSION FORCE PANEL TOOLBAR
    FILTERS companyUserPriceList(p) == l
    
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActivePriceList(p) 'F11'            
        FILTER 'Активные' isActivePriceList(p) OR (fromDateTimePriceList(p) > currentDateTime()) 'F10' DEFAULT  
;

DESIGN legalEntity{
    extendContainer {
        MOVE p.box{caption = 'Прайсы';}
    }
}

// ------------------------------------------------- Сравнение прайсов ---------------------------- //

countSkuPriceList (sku, priceList) = GROUP SUM 1 BY skuPriceListDetail(detail), priceListPriceListDetail(detail);

countSkusPriceList (priceList) = GROUP SUM 1 IF countSkuPriceList(sku, priceList)
    BY priceList;

countSkuPriceListPriceList (priceList1, priceList2) = GROUP SUM 1 IF countSkuPriceList(sku, priceList1) == countSkuPriceList(sku, priceList2)
    BY priceList1, priceList2;

equalsPriceListPriceList (priceList1, priceList2) = companyPriceList(priceList1) == companyPriceList(priceList2) AND
                                                    currencyPriceList(priceList1) == currencyPriceList(priceList2) AND
                                                    datePriceList(priceList1) == datePriceList(priceList2) AND
                                                    countSkuPriceListPriceList (priceList1, priceList2) == countSkusPriceList(priceList1) AND
                                                    countSkuPriceListPriceList (priceList1, priceList2) == countSkusPriceList(priceList2) AND
                                                    priceList1 != priceList2;

//FORM test 'Test'
//    OBJECTS p1 = PriceList FIXED PANEL
//    PROPERTIES(p1) READONLY numberPriceList
//
//    OBJECTS d1 = PriceListDetail
//    PROPERTIES(d1) READONLY idBarcodeSkuPriceListDetail, nameSkuPriceListDetail
//    FILTERS priceListPriceListDetail(d1) == p1
//
//    OBJECTS p2 = PriceList FIXED PANEL
//    PROPERTIES(p2) READONLY numberPriceList
//
//    OBJECTS d2 = PriceListDetail
//    PROPERTIES(d2) READONLY idBarcodeSkuPriceListDetail, nameSkuPriceListDetail
//    FILTERS priceListPriceListDetail(d2) == p2
//;
//
//DESIGN test {
//    NEW topContainer{
//        type = CONTAINERH;
//        NEW leftContainer{
//            type = CONTAINERV;
//            ADD p1.box;
//            ADD d1.box;
//        }
//        NEW rightContainer{
//            type = CONTAINERV;
//            ADD p2.box;
//            ADD d2.box;
//        }
//    }
//    ADD functions.box;
//}

findEqualsPriceLists 'Найти дубликаты прайсов' = ACTION () {
    FOR p1 IS UserPriceList NOINLINE DO {
        FOR equalsPriceListPriceList(p1, p2) NOINLINE DO {
            ASSIGN dataInUserPriceListStock(p2, s) <- dataInUserPriceListStock(p1, s) WHERE dataInUserPriceListStock(p1, s);
            DELETE p1;
            apply();
            BREAK;
        }
    }
}

EXTEND FORM migrationData
    PROPERTIES() findEqualsPriceLists
;

countPriceListDetailSkuPriceList 'Кол-во строк' (sku, priceList) = GROUP SUM 1 BY skuPriceListDetail(d), priceListPriceListDetail(d);
