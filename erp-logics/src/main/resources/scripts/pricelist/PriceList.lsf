MODULE PriceList;

REQUIRE PriceListLedger, StockTax, StockSkuDocument;

NAMESPACE PriceList;

// --------------------------- Пользовательские виды цен ------------------------- //

CLASS DataPriceListType 'Пользовательский вид цены' : LedgerPriceListType;

@defineExternalizable(dataPriceListType, VARSTRING[100]);
id (DataPriceListType p) += id(p);

batchLedger 'Использовать для партий свои цены' = DATA BOOLEAN (DataPriceListType);
batch (DataPriceListType priceListType, Stock stock) += WHEN priceListType IS DataPriceListType AND isCompany(stock)
                                                        THEN batchLedger(priceListType);

name 'Наименование' = DATA VARISTRING[50](DataPriceListType);
name(DataPriceListType type) += name(type) IF type IS DataPriceListType;

includeVAT 'Цена с НДС' = DATA BOOLEAN (DataPriceListType);
includeVAT (DataPriceListType priceListType) += includeVAT(priceListType);

@defineDocumentHeaderCurrency(dataPriceListType);
currency(DataPriceListType dataPriceListType) += currency(dataPriceListType);

differentOrganizations 'Для разных организаций' = DATA BOOLEAN (DataPriceListType); 
differentOrganizations(DataPriceListType type) += WHEN type IS DataPriceListType THEN differentOrganizations(type);   

notNull 'Должна быть задана цена' = DATA BOOLEAN (DataPriceListType);

FORM dataPriceListType 'Пользовательский вид цен'
    OBJECTS d = DataPriceListType PANEL
    PROPERTIES(d) name, id SHOWIF showIDs(), includeVAT[PriceListType],
                  nameCurrency, nameRoundCondition, batchLedger, 
                  differentOrganizations, notNull

    EDIT DataPriceListType OBJECT d
;

DESIGN dataPriceListType {
    d.box{
        MOVE PROPERTY(name(d));
        MOVE PROPERTY(id(d));
        MOVE PROPERTY(includeVAT(d));
        MOVE PROPERTY(nameCurrency(d));
        MOVE PROPERTY(nameRoundCondition(d));
        MOVE PROPERTY(batchLedger(d));
        MOVE PROPERTY(notNull(d));
    }
}

FORM dataPriceListTypes 'Пользовательские виды цен'
    OBJECTS p = DataPriceListType
    PROPERTIES(p) READONLY name, nameCurrency, nameRoundCondition
    PROPERTIES(p) READONLY includeVAT, notNull

    LIST DataPriceListType OBJECT p
;

edit 'Редактировать' = ACTION EDITFORM DataPriceListType;
edit(DataPriceListType priceListType) += ACTION edit(priceListType);

EXTEND FORM priceListTypes
    PROPERTIES(pt) NEWSESSION addDataPriceListType = NEW[DataPriceListType]
//    PROPERTIES(pt) SHOWIF showIDs() READONLY idDataPriceListType
;

DESIGN priceListTypes {
    PROPERTY (addDataPriceListType) {
        caption = 'Добавить пользовательскую цену';
    }
}

overCopy (DataPriceListType priceListType) += ACTION NEWSESSION {
    IF priceListType IS DataPriceListType THEN {
        FOR NEW p = DataPriceListType DO {
            batchLedger(p) <- batchLedger(priceListType);
            includeVAT(p) <- includeVAT(priceListType);
            roundCondition(p) <- roundCondition(priceListType);
            currency(p) <- currency(priceListType);
                                    
            SHOW dataPriceListType OBJECTS d=p MANAGESESSION DOCKED; 
        }
    }
}

// --------------------------- Прайс-листы ------------------------- //

CLASS ABSTRACT PriceList 'Прайс' : Document;
CLASS ABSTRACT PriceListDetail 'Строка прайса' : DocumentDetail;

CLASS UserPriceList 'Прайс (польз.)' : PriceList;
CLASS UserPriceListDetail 'Строка прайса (польз.)' : PriceListDetail;

@defineDocumentInterface(priceList);
@deriveDocumentHeaderTimePrefix(UserPriceList, );

@defineExternalizable(userPriceList, VARSTRING[100]);

// Шапка

@defineDocumentInterfaceDataTimePrefix(priceList, from, ' c');
@deriveDocumentHeaderTimePrefix(UserPriceList, from);

toDate 'Дата по' = ABSTRACT DATE (PriceList) IN documentHeader PERSISTENT;
toTime 'Время по' = ABSTRACT TIME (PriceList) IN documentHeader PERSISTENT;
toDateTime 'Дата/время по'(PriceList priceList) = dateTimeToDateTime(toDate(priceList), toTime(priceList)) PERSISTENT;

CONSTRAINT toDate(PriceList p) AND NOT toTime(p) MESSAGE 'Время по должно быть заполнено если заполнена дата по';

toDate 'Дата по' = DATA DATE(UserPriceList);
toTime 'Время по' = DATA TIME(UserPriceList);
toDateTime 'Дата/время по'(UserPriceList userPriceList) = dateTimeToDateTime(toDate(userPriceList), toTime(userPriceList));

toDate(UserPriceList userPriceList) += toDate(userPriceList);
toTime(UserPriceList userPriceList) += toTime(userPriceList);

@deriveDocumentHeaderTimeBeforePrefix(UserPriceList, to);

@defineDocumentInterfaceNumber(priceList);
@defineNumeratedDefault(UserPriceList, 'Прайсы', 'ПЛ');

@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

//@defineDocumentInterfaceLegalEntity(priceList, company, 'Организация');
@defineDocumentInterfaceDataLegalEntity(priceList, company, 'Организация');
userPriceList (legalEntity) = GROUP MAX UserPriceList userPriceList BY company(userPriceList);
@defineDocumentInterfaceDataStock(priceList, stock, 'Склад организации', company);
CONSTRAINT company(UserPriceList priceList) AND companyStock(priceList) AND NOT
in(company(priceList), companyStock(priceList))
    CHECKED BY companyStock[UserPriceList]
        MESSAGE 'Организация и склад организации для прайса не имеют связи';

@defineDocumentInterfaceCurrency(priceList);

groupType = DATA GroupType (UserPriceList);
nameGroupType 'Тип классификатора' = name(groupType(UserPriceList UserPriceList));

// Строки

@defineDocumentInterfaceDetailDataTimePrefix(priceList, to, ' по');

@defineDocumentInterfaceDetailSku(priceList, sku);

@defineDocumentInterfaceDetailQuantity(priceList);
@defineAddDetailDialogBarcode(userPriceList, sku);

// ---------------- Цены для видов цен

// Шапка

TABLE priceListPriceListType (PriceList, PriceListType);
show 'Показывать цены' = ABSTRACT BOOLEAN (PriceList, PriceListType) PERSISTENT;
show 'Показывать цены' = DATA BOOLEAN (UserPriceList, PriceListType);
show (UserPriceList priceList, PriceListType priceListType) += show(priceList, priceListType);

TABLE priceListDataPriceListType (PriceList, DataPriceListType);
in 'Изменять цены' = ABSTRACT BOOLEAN (PriceList, DataPriceListType) PERSISTENT;
in 'Изменять цены' = DATA BOOLEAN (UserPriceList, DataPriceListType);
in (UserPriceList priceList, DataPriceListType dataPriceListType) += in(priceList, dataPriceListType);

priceListTypes 'Цены' (priceList) = GROUP CONCAT name[PriceListType](DataPriceListType priceListType) IF in(PriceList priceList, priceListType) , ', '
                                               BY priceList
                                               ORDER priceListType MINCHARWIDTH 10 PREFCHARWIDTH 20 PERSISTENT;
priceListTypes 'Цены' (PriceListDetail d) = priceListTypes(priceList(d));

// Строки

TABLE priceListDetailPriceListType (PriceListDetail, PriceListType);

TABLE priceListDetailDataPriceListType (PriceListDetail, DataPriceListType);
price 'Цена (новая)' = ABSTRACT NUMERIC[16,4] (PriceListDetail, DataPriceListType) PERSISTENT;
price 'Цена (новая)' = DATA NUMERIC[16,4] (UserPriceListDetail, DataPriceListType); //annotation не нужен, делим скриптом с учетом валюты вида цен
price (UserPriceListDetail priceListDetail, DataPriceListType dataPriceListType) += price(priceListDetail, dataPriceListType);

in (PriceListDetail detail, DataPriceListType type) = in(priceList(detail), type);
in (UserPriceListDetail detail, DataPriceListType type) = in(userPriceList(detail), type);

price(PriceListDetail detail, DataPriceListType type) => in (detail, type) RESOLVE RIGHT;

//НДС

valueVAT 'НДС' (PriceListDetail d) =
    valueVAT(sku(d), country(company(d)), fromDate(d));
valueVAT 'НДС' (UserPriceListDetail d) =
    valueVAT(sku(d), country(company(d)), fromDate(d));

// ---------------------  Склады, для которых действует прайс

// Шапка
allStocks 'Отм' = ABSTRACT BOOLEAN (PriceList) PERSISTENT;
allStocks 'Отм' = DATA BOOLEAN (UserPriceList);
allStocks (UserPriceList priceList) += allStocks(priceList);

TABLE priceListStockGroup(PriceList, StockGroup);
dataIn 'Отм' = ABSTRACT BOOLEAN (PriceList, StockGroup) PERSISTENT;
dataIn 'Отм' = DATA BOOLEAN (UserPriceList, StockGroup);
dataIn (UserPriceList priceList, StockGroup stockGroup) += dataIn(priceList, stockGroup);

TABLE priceListStock(PriceList, Stock);
dataIn 'Отм' = ABSTRACT BOOLEAN (PriceList, Stock) PERSISTENT;
dataIn 'Отм' = DATA BOOLEAN (UserPriceList, Stock);
dataIn (UserPriceList priceList, Stock stock) += dataIn(priceList, stock);

levelParent (priceList, stockGroup) = GROUP MIN level(StockGroup stockGroup, StockGroup parent) IF dataIn(PriceList priceList, parent)
                                                               BY priceList, stockGroup PERSISTENT;

inParent (PriceList priceList, StockGroup stockGroup) = TRUE IF levelParent (priceList, stockGroup) PERSISTENT;

in 'Отм' (PriceList priceList, StockGroup stockGroup) = OVERRIDE
    allStocks(priceList) AND stockGroup IS StockGroup,
    inParent (priceList, stockGroup),
    dataIn(priceList, stockGroup);

allow = ABSTRACT BOOLEAN (Stock, PriceList);

in 'Отм' (PriceList priceList, Stock stock) =
    (OVERRIDE in(priceList, stockGroup(stock)),
              dataIn(priceList, stock))
    AND allow(stock, priceList) PERSISTENT;     
             
@defineBackgroundNearestBoolean(allStocks, in, priceList, stock, inParent, isCompany);                    

stocks 'Склады' (priceList) = GROUP CONCAT VARISTRING[250] (name(Stock stock)) IF in(PriceList priceList, stock) , ', '
                                       BY priceList
                                       ORDER stock MINCHARWIDTH 20 PREFCHARWIDTH 40 PERSISTENT;
stocks 'Склады' (PriceListDetail d) = stocks(priceList(d));                                       
// История
@defineCreatedAbstract(PriceListDetail);

createdTime (UserPriceListDetail d) += createdTime(userPriceList(d));
createdUser (UserPriceListDetail d) += createdUser(userPriceList(d));
createdComputer (UserPriceListDetail d) += createdComputer(userPriceList(d));

// Партии
@defineDocumentInterfaceDetailBatch(priceList, batch);
//@deriveDocumentDetailPricePriceListTypeVATBatch(userPriceList, stockProp, userPriceList);

changePurchaseBatch(UserPriceListDetail userPriceListDetail) = ACTION {
    DIALOG dialogBatch OBJECTS sk = sku(userPriceListDetail), bt = batch(userPriceListDetail) INPUT NULL DO
        batch(userPriceListDetail) <- bt;
}

replace(Sku s, Batch b) += ACTION { sku(UserPriceListDetail detail) <- s WHERE batch(detail) == b;}
//@defineBalancesBatch(priceListDetail); //-- показываем по нажатию правой клавиши остатки партии
//@defineBalancesBatch(userPriceListDetail); //-- показываем по нажатию правой клавиши остатки партии
//@defineMovementBatch(priceListDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии
//@defineMovementBatch(userPriceListDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии

exclude 'Исключить' = ABSTRACT BOOLEAN (PriceListDetail);
exclude 'Исключить' = DATA BOOLEAN (UserPriceListDetail);
exclude(UserPriceListDetail d) += exclude(d);

// ------- Проведение по priceListLedger ----- //

EXTEND CLASS PriceListDetail : PriceListLedger;

fromDateTime (PriceListDetail ledger) += fromDateTime(ledger);
toDateTime (PriceListDetail ledger) += toDateTime(ledger);

isPosted(PriceListDetail ledger) += isPosted(ledger);
skip(PriceListDetail ledger) += exclude(ledger);

sku (PriceListDetail ledger) += sku(ledger);
in (PriceListDetail ledger, Batch batch) += batch(ledger) == batch; 

company (PriceListDetail ledger) += company(ledger);
companyStock (PriceListDetail ledger) += companyStock(ledger);
description (PriceListDetail ledger) += description(priceList(ledger));

in (PriceListDetail ledger, DataPriceListType type) += in(ledger, type);
price (PriceListDetail ledger, DataPriceListType type) += price(ledger, type);
in (PriceListDetail ledger, Stock stock) += in(priceList(ledger), stock);

createdTime (PriceListDetail d) += createdTime(d);
createdUser (PriceListDetail d) += createdUser(d);
createdComputer (PriceListDetail d) += createdComputer(d);

// -------------- Текущая действующая цена --------------- //

currentPrice 'Действующая цена' (UserPriceListDetail priceListDetail, PriceListType priceListType, Stock stock) =
    IF in[UserPriceListDetail,DataPriceListType](priceListDetail, priceListType) THEN
        prevPriceB(priceListType, sku(priceListDetail), stock, fromDateTime(priceListDetail))
    ELSE
        prevPriceA(priceListType, sku(priceListDetail), stock, fromDateTime(priceListDetail));

// Рассчитываем цены для строк
viewPrice 'Цена' = DATA LOCAL NUMERIC[16,4] (UserPriceListDetail, PriceListType);

updateViewPriceDetail(UserPriceListDetail d, PriceListType t, Stock s) = ACTION {
    viewPrice(d, t) <- currentPrice(d, t, s);
}

updateViewPriceDetail (UserPriceListDetail d, Stock s) = ACTION {
    FOR show(userPriceList(d), PriceListType t) NOINLINE (t) DO
        updateViewPriceDetail(d, t, s);
}

currentPriceUser 'Действующая цена' (Sku sku, PriceList priceList, PriceListType priceListType, Stock stock) =
    IF in[UserPriceList,DataPriceListType](priceList, priceListType) THEN
        prevPriceB(priceListType, sku, stock, fromDateTime(priceList))
    ELSE
        prevPriceA(priceListType, sku, stock, fromDateTime(priceList));

currentPrice 'Действующая цена' (Batch batch, PriceList priceList, PriceListType priceListType, Stock stock) =
    IF in[UserPriceList,DataPriceListType](priceList, priceListType) THEN
        prevPriceB(priceListType, sku(batch), stock, fromDateTime(priceList))
    ELSE
        prevPriceA(priceListType, sku(batch), stock, fromDateTime(priceList));

changePrice 'Изменение, %' (UserPriceListDetail priceListDetail, DataPriceListType dataPriceListType) =
    round2(price(priceListDetail, dataPriceListType) * 100.0 /
    (viewPrice (priceListDetail, dataPriceListType) IF viewPrice (priceListDetail, dataPriceListType) != 0) - 100.0);

//changePriceUserPriceListDetailDataPriceListTypeStock 'Изменение, %' (priceListDetail, dataPriceListType, stock) =
//    priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
//    (currentPriceUserPriceListDetailPriceListTypeStock (priceListDetail, dataPriceListType, stock) IF currentPriceUserPriceListDetailPriceListTypeStock (priceListDetail, dataPriceListType, stock) != 0) - 100.0;

// Заголовки колонок
headerNameCurrentData (PriceListType dataPriceListType) =
    name(dataPriceListType) + ' (старая)' MINCHARWIDTH 30 MAXCHARWIDTH 50;

headerNameChangeData (PriceListType dataPriceListType) =
    name(dataPriceListType) + ' (изменение, %)' MINCHARWIDTH 30 MAXCHARWIDTH 50;

headerNameData (PriceListType dataPriceListType) =
    name(dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;
    
headerNameCompanyData (PriceListType dataPriceListType) = 'Организация (старая)' IF dataPriceListType IS PriceListType;    

// Цвета колонок
backgroundCurrent 'Цвет' (DataPriceListType dataPriceListType) = RGB(255,238,165) IF dataPriceListType IS DataPriceListType;
backgroundChange 'Цвет' (DataPriceListType dataPriceListType) = RGB(232,184,146) IF dataPriceListType IS DataPriceListType;
background 'Цвет' (DataPriceListType dataPriceListType) = RGB(213,249,185) IF dataPriceListType IS DataPriceListType;

// Подбор товаров SKU
detail= GROUP SUM 1 BY sku(UserPriceListDetail detail), userPriceList(detail);

in 'Вкл.' (Sku sku, UserPriceList price) = TRUE IF detail(sku, price);

changeIn(Sku sku, UserPriceList priceList) = ACTION {
    INPUTX b = BOOLEAN DO
        IF detail(sku, priceList) THEN {
            IF NOT b THEN
                DELETE UserPriceListDetail detail WHERE sku == sku(detail) AND priceList == userPriceList(detail);
        } ELSE
            IF b THEN 
                FOR NEW d = UserPriceListDetail DO {
                   userPriceList(d) <- priceList;
                   sku(d) <- sku;
                }
}

// Подбор товаров batch
detail(batch, price) = GROUP SUM 1 IF Batch batch == batch(UserPriceListDetail detail) AND UserPriceList price == userPriceList(detail)
                                           BY batch(detail), userPriceList(detail);

in 'Вкл.' (Batch batch, UserPriceList price) = TRUE IF detail(batch, price);

changeIn(Batch batch, UserPriceList priceList) = ACTION {
    INPUTX b = BOOLEAN DO
        IF detail(batch, priceList) THEN {
            IF NOT b THEN
                DELETE UserPriceListDetail detail WHERE batch == batch(detail) AND priceList == userPriceList(detail);
        } ELSE
            IF b THEN 
                FOR NEW d = UserPriceListDetail DO {
                   userPriceList(d) <- priceList;
                   batch(d) <- batch;
                   sku(d) <- sku(batch);
                }
}

// ------------- Подбор документов ----------------- //

number[Document](PriceList priceList) += number(priceList);
series[Document](PriceList priceList) += series(priceList);
date[Document](PriceList priceList) += date(priceList);
supplier(PriceList priceList) += company(priceList);

index[DocumentDetail](PriceListDetail priceList) += index(priceList);
sku[DocumentDetail](PriceListDetail priceList) += sku(priceList);

document(PriceListDetail detail) += priceList(detail);

fillDocument 'Подбор документа'(UserPriceList userPriceList) = ACTION {
    DIALOG documents OBJECTS d INPUT DO
        FOR document(DocumentDetail documentDetail) == d NEW i = UserPriceListDetail DO {
            userPriceList(i) <- userPriceList;
            sku(i) <- sku(documentDetail);
        }
} TOOLBAR;

// ---------------------- Активность --------------------------- //
isActive(PriceList priceList, DATETIME dateTime) = (fromDateTime(priceList) <= (dateTime AS DATETIME) AND toDateTime(priceList) >= dateTime) OR
                                                 (fromDateTime(priceList) <= (dateTime AS DATETIME) AND NOT toDateTime(priceList));
isActive(PriceList priceList) = isActive(priceList, currentDateTime());
//(fromDateTimePriceList(priceList) <= currentDateTime() AND toDateTimePriceList(priceList) >= currentDateTime()) OR
//                               (fromDateTimePriceList(priceList) <= currentDateTime() AND NOT toDateTimePriceList(priceList));
isActive(PriceListDetail priceListDetail) = (fromDateTime(priceListDetail) <= currentDateTime() AND toDateTime(priceListDetail) >= currentDateTime()) OR
                               (fromDateTime(priceListDetail) <= currentDateTime() AND NOT toDateTime(priceListDetail));

CONSTRAINT notNull(DataPriceListType priceListType) AND isActive(PriceListDetail detail) AND in(detail, priceListType) AND NOT price(detail, priceListType)
    MESSAGE 'Должна быть задана цена';

// Цвета
//backgroundPriceList 'Цвет' (priceList) =
//    IF currentDateTime() > toDateTimePriceList(priceList)
//        THEN RGB(255, 226, 226) IF priceList IS PriceList
//    ELSE
//        RGB(226, 255, 226) IF fromDateTimePriceList(priceList) > currentDateTime();

isOverBackground (priceList) =  ABSTRACT BOOLEAN (PriceList);  
overBackground (priceList) =  ABSTRACT CASE COLOR (PriceList);  
        
defaultBackground 'Цвет' (PriceList priceList) = CASE WHEN fromDateTime(priceList) > currentDateTime() OR NOT isPosted(priceList) THEN RGB(224,255,224)
                                              WHEN toDateTime(priceList) < currentDateTime() THEN RGB(255,224,224);      
                                                
background 'Цвет' (PriceList priceList) = IF isOverBackground (priceList) THEN overBackground (priceList)
                                                                                ELSE defaultBackground(priceList);

background 'Цвет' (priceListDetail) =  ABSTRACT CASE COLOR (PriceListDetail);
//    IF currentDateTime() > toDateTimePriceListDetail(priceListDetail)
//        THEN RGB(255, 226, 226) IF priceListDetail IS PriceListDetail
//    ELSE
//        RGB(226, 255, 226) IF fromDateTimePriceListDetail(priceListDetail) > currentDateTime();
        
        

// --------------- Фильтры для подбора товаров ------------------ //

// Вид цены
filterPriceListType = DATA LOCAL PriceListType (UserPriceList);
nameFilterPriceListType 'Вид цены' (UserPriceList userPriceList) = name(filterPriceListType(userPriceList));

//sku
currentPrice 'Текущая цена' (Sku sku, UserPriceList userPriceList, Stock stock) =
    currentPriceUser(sku, userPriceList, filterPriceListType(userPriceList), stock);

//batch
currentPrice 'Текущая цена' (Batch batch, UserPriceList userPriceList, Stock stock) =
    currentPrice(batch, userPriceList, filterPriceListType(userPriceList), stock);
filterPriceListType (UserPriceList userPriceList, Batch batch, Stock stock) =
    currentPrice (batch, userPriceList, stock) OR
    (batch IS Batch AND stock IS Stock AND NOT filterPriceListType(userPriceList));
    
editSku 'Редактировать SKU' (UserPriceListDetail d) = ACTION edit(sku(d));   
   
nameCompanyB 'Организация' (LedgerPriceListType type, Stock stock, UserPriceListDetail d) = name(companyB(type, sku(d), stock ,fromDateTime[PriceListDetail](d)));    
toShow (PriceList p, LedgerPriceListType to) = show(p, to) AND to IS LedgerPriceListType AND differentOrganizations(to);          
    
showBatch 'Партия' =  ABSTRACT BOOLEAN (PriceList);   
showBatchUser 'Партия' =  DATA BOOLEAN (PriceList);  
showBatch(PriceList p) += showBatchUser(p);

showCompany 'Организация строки' =  ABSTRACT BOOLEAN (PriceList);   
showCompanyUser 'Организация строки' =  DATA BOOLEAN (PriceList);  
showCompany(PriceList p) += showCompanyUser(p);

showDateTime 'Даты действия' =  ABSTRACT BOOLEAN (PriceList);   
showDateTimeUser 'Даты действия' =  DATA BOOLEAN (PriceList);  
showDateTime(PriceList p) += showDateTimeUser(p);

originalNameSku 'Наименование поставщика' = ABSTRACT VARISTRING[255] (PriceListDetail);
originalNameSku 'Наименование поставщика' = DATA VARISTRING[255] (UserPriceListDetail);
originalNameSku(UserPriceListDetail d) += originalNameSku(d);

showOriginalNameSku 'Наименование поставщика' = ABSTRACT BOOLEAN (PriceList);
showOriginalNameSku 'Наименование поставщика' = DATA BOOLEAN (UserPriceList) IN documentPrm;
showOriginalNameSku(UserPriceList d) += showOriginalNameSku(d); 

originalIdBarcodeSku 'Штрихкод поставщика' = ABSTRACT VARSTRING[15] (PriceListDetail) FIXEDCHARWIDTH 15;
originalIdBarcodeSku 'Штрихкод поставщика' = DATA VARSTRING[15] (UserPriceListDetail) FIXEDCHARWIDTH 15;
originalIdBarcodeSku(UserPriceListDetail d) += originalIdBarcodeSku(d);

showOriginalIdBarcodeSku 'Штрихкод поставщика' = ABSTRACT BOOLEAN (PriceList);
showOriginalIdBarcodeSku 'Штрихкод поставщика' = DATA BOOLEAN (UserPriceList) IN documentPrm;
showOriginalIdBarcodeSku(UserPriceList d) += showOriginalIdBarcodeSku(d); 

showNotCompanyStocks 'Склады контрагентов' =  ABSTRACT BOOLEAN (PriceList);   
showNotCompanyStocksUser 'Склады контрагентов' =  DATA BOOLEAN (PriceList);  
showNotCompanyStocks(PriceList p) += showNotCompanyStocksUser(p);
      
@defineMovementSku(priceListDetail); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPriceListDetail); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(priceListDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPriceListDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(priceListDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPriceListDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(priceListDetail); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userPriceListDetail); //-- показываем по нажатию правой клавиши  изменение цены товара      

show (PriceList priceList, Stock stock) = IF showNotCompanyStocks(priceList) THEN stock IS Stock
                                                                                               ELSE isCompany(stock); 

allow(Stock stock, PriceList priceList) += show (priceList, stock);                                                                                                               
      
FORM userPriceList 'Прайс'
    OBJECTS p = UserPriceList PANEL
    PROPERTIES(p) isPosted, nameNumerator, number, series,
                  date, time,
                  fromDate, fromTime, toDate, toTime,
                  nameCurrency, nameCompany, nameCompanyStock, note,
                  nameGroupTypeS = nameGroupType, nameGroupTypeP = nameGroupType,
                  showBatchUser, showCompanyUser, showDateTimeUser, showOriginalIdBarcodeSku, 
                  showOriginalNameSku, showNotCompanyStocksUser

    OBJECTS t = PriceListType
    PROPERTIES(t) READONLY name, includeVAT[LedgerPriceListType] 
    PROPERTIES(p, t) in[UserPriceList,DataPriceListType] , show[PriceList,PriceListType]
    FILTERS (currency(p) == currency(t)) OR 
            NOT currency(t) OR NOT currency(p) 

    OBJECTS tc = DataPriceListType GRID
    FILTERS in(p, tc), 
            (currency(p) == currency[PriceListType](tc)) OR 
            NOT currency[PriceListType](tc) OR NOT currency(p) 

    OBJECTS to = PriceListType GRID
    FILTERS show[PriceList,PriceListType](p, to)

    OBJECTS th = DataPriceListType GRID
    FILTERS in(p, th) AND show[PriceList,PriceListType](p, th)  

    TREE skuTree sk = Group PARENT parent
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDER BY order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) BACKGROUND background(d) index
    PROPERTIES(d) BACKGROUND background(d) ON EDIT editSku(d) idSku, idBarcodeSku, nameSku,
                  shortNameUOMSku
    PROPERTIES(d) BACKGROUND background(d)nameBatch ON CHANGE changePurchaseBatch(d) SHOWIF showBatchUser(p),
                  valueVAT, fromDate SHOWIF showDateTimeUser(p), 
                  fromTime SHOWIF showDateTimeUser(p), toDate SHOWIF showDateTimeUser(p), 
                  toTime SHOWIF showDateTimeUser(p), nameCompany SHOWIF showCompanyUser(p), 
                  exclude, NEW, deleted = DELETE GRID
    PROPERTIES(d, tc) price COLUMNS (tc) HEADER headerNameData(tc) BACKGROUND background(tc)
    PROPERTIES(p) TODRAW d  fillDocument, addDetailInputBarcodeUserPriceListDetail
    ORDER BY index(d)
    FILTERS userPriceList(d) == p,
            isParent(sk, sku[PriceListDetail](d)) OR NOT group(groupType(sk), sku[PriceListDetail](d)),
            groupType(p) == groupType(sk)
    FILTERGROUP filters
        FILTER 'Активные' isActive(d) 'F10'

    TREE stockTree a=STRING[3], sg = StockGroup PARENT parent
    PROPERTIES READONLY OBJVALUE(a), sgTreeName = name(sg)
    PROPERTIES(p) allStocks[PriceList] TODRAW a BACKGROUND backgroundAllStocks(p)
    PROPERTIES(p, sg) in BACKGROUND backgroundIn(p,sg)
    ORDER BY sgTreeName
    FILTERS stringEqualsAll(a)
    FILTERS countCompanyStock(sg)

    OBJECTS ts = Stock
    PROPERTIES READONLY  name(ts)
    PROPERTIES(p, ts)    in BACKGROUND backgroundIn(p,ts)
//    PROPERTIES(d, to, ts) currentPriceUserPriceListDetailPriceListTypeStock COLUMNS (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to)
//    PROPERTIES(d, th, ts) changePriceUserPriceListDetailDataPriceListTypeStock COLUMNS (th) HEADER headerNameChangeDataPriceListType(th) BACKGROUND backgroundChangeDataPriceListType(th)
    FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParent(sg, ts),
            show(p, ts)
    FILTERGROUP filters2
            FILTER 'Выбранные склады' in(p, ts) 'F10'
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
        
    OBJECTS tt = Stock PANEL
    PROPERTIES SELECTOR stockName = name(tt) 
    PROPERTIES(d, to) READONLY viewPrice COLUMNS 'type' (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to) TODRAW d 
//    PROPERTIES(d, to, tt) READONLY currentPriceUserPriceListDetailPriceListTypeStock COLUMNS 'type' (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to) TODRAW d GRID
    PROPERTIES(to, tt, d) SHOWIF toShow(p, to) READONLY nameCompanyB COLUMNS 'type' (to) HEADER headerNameCompanyData(to) BACKGROUND backgroundCurrent(to) TODRAW d     
    PROPERTIES(d, th) READONLY changePrice COLUMNS (th) HEADER headerNameChangeData(th) BACKGROUND backgroundChange(th) TODRAW d 

//    PROPERTIES(d)        nameCompanyUserPriceListDetail
    FILTERS isCompany(tt),
            in(p, tt)

    TREE skuTree2 sk2 = Group PARENT parent
    PROPERTIES READONLY order(sk2), skuTreeName2 = name(sk2)
    ORDER BY order(sk2), skuTreeName2
    FILTERGROUP inactive1 FILTER 'Активные' active(sk2) 'F5' DEFAULT

    OBJECTS ts2 = Stock PANEL
    PROPERTIES(ts2) SELECTOR name
    FILTERS isCompany(ts2),
            isCompany(ts2)
    PROPERTIES(p)  nameFilterPriceListType

    OBJECTS s2=Sku
    PROPERTIES in(s2, p) ON CHANGE changeIn(s2, p)
    PROPERTIES READONLY inputName2 = name(s2), idBarcode(s2), shortNameUOM(s2), currentBalance(s2, ts2)
    PROPERTIES READONLY currentPrice(s2, p, ts2) SHOWIF filterPriceListType(p)
    PROPERTIES(s2, p, to, ts2) currentPriceUser COLUMNS (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to)
    PROPERTIES                 addSku() TODRAW s2, edit(s2), copy(s2)
    FILTERS currentPrice (s2, p, ts2) OR
            NOT filterPriceListType(p),
            groupType(p) == groupType(sk2)
    FILTERGROUP filters3
        FILTER 'С остатком' currentBalance(s2, ts2) 'F10'

    FILTERS isParent(sk2, s2)
    FILTERGROUP activeSku FILTER 'Активные' active(s2) DEFAULT
    ORDER BY inputName2

    OBJECTS b=Batch
    PROPERTIES in(b, p) ON CHANGE changeIn(b, p) 
    PROPERTIES READONLY idBarcodeSku(b)
    PROPERTIES READONLY  nameSku(b)
    PROPERTIES READONLY QUICKFILTER nameSku(b) shortNameUOM(b),
                                                 prevCurrentBalance(b, ts2), name(b)
    PROPERTIES READONLY currentPrice(b, p, ts2) SHOWIF filterPriceListType(p)                                                 
    PROPERTIES(b, p, to, ts2) currentPrice COLUMNS (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to)
    FILTERS filterPriceListType(p, b, ts2),
            isParent[SkuGroup,Batch](sk2, b)
    FILTERGROUP filters4
        FILTER 'С остатком' prevCurrentBalance(b, ts2) 'F10' DEFAULT
    ORDER BY nameSku(b)

    EVENTS
        ON OK prePost(p)

    EDIT UserPriceList OBJECT p
;
EXTEND FORM userPriceList
    PROPERTIES(d) BACKGROUND background(d) AFTER nameSku(d) originalIdBarcodeSku SHOWIF showOriginalIdBarcodeSku(p), originalNameSku  SHOWIF showOriginalNameSku(p)        
;

WHEN SESSION FORMS userPriceList CHANGED(company(UserPriceList o)) DO {
    IF countStocks (company(o)) == 1 THEN
        companyStock(o) <- defaultStock(company(o));
    IF NOT in(company(o), companyStock(o)) THEN 
        companyStock(o) <- NULL;
}

WHEN SESSION FORMS userPriceList (SET([= VIEW userPriceList.d](UserPriceListDetail d)) OR // изменились строки
                                  CHANGED(sku(d)) OR // или изменился sku
                                  CHANGED(fromDateTime(d)) OR // или изменился дата с
                                  CHANGED([= VIEW userPriceList.tt](Stock s))) // или изменился склад
                                 AND [= VIEW userPriceList.d](d)
                                 AND [= VIEW userPriceList.tt](s) DO
    updateViewPriceDetail(d, s);

WHEN SESSION FORMS userPriceList CHANGED(show(userPriceList(UserPriceListDetail d), PriceListType t))
                                 AND [= VIEW userPriceList.d](d)
                                 AND [= VIEW userPriceList.tt](Stock s) NOINLINE (t) DO
    updateViewPriceDetail(d, t, s);

// Оптимизация с преподсчетом видов цен в сессионное свойство

//viewCurrentPricePriceListDetailDataPriceListTypeStock 'Действующая цена' = DATA LOCAL NUMERIC[16,4] (UserPriceListDetail, DataPriceListType, Stock);
//
//currentUserPriceList = DATA LOCAL UserPriceList ();
//setCurrentUserPriceList (u) = ACTION currentUserPriceList() <- u;
//
//EXTEND FORM userPriceList
//    PROPERTIES(d, t, ts) viewCurrentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) SHOWIF headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t)
//    PROPERTIES(d, t, tt) viewCurrentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) SHOWIF headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t) TODRAW d GRID
//    EVENTS
//        ON CHANGE p setCurrentUserPriceList(p)
//;
//
//WHEN SESSION FORMS userPriceList SET([= VIEW userPriceList.d](d)) AND p == currentUserPriceList() DO
//    FOR showUserPriceListPriceListType(p, pt) AND isCompanyStock(s) NOINLINE (pt) DO
//        viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s);  
//
//WHEN SESSION FORMS userPriceList CHANGED(showUserPriceListPriceListType(p, pt)) NOINLINE (pt) DO
//    viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s) 
//        WHERE [= VIEW userPriceList.d](d) AND isCompanyStock(s);  
//
//WHEN SESSION FORMS userPriceList CHANGED(skuUserPriceListDetail(d)) OR CHANGED(fromDateTimeUserPriceListDetail(d)) DO
//    viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s) 
//        WHERE showUserPriceListPriceListType(userPriceListUserPriceListDetail(d), pt) AND isCompanyStock(s);  
//

DESIGN userPriceList {
    NEW top {
        type = CONTAINERH;
        NEW top1 {
            type = CONTAINERV;
            NEW headContainer {
                caption = 'Шапка документа';       
                type = CONTAINERV;
                
                NEW first {
                    type = CONTAINERH;
                    MOVE PROPERTY(isPosted(p)) { preferredCharWidth = 40; }
                }
                NEW second { 
                    type = CONTAINERH;
                    MOVE PROPERTY (nameNumerator(p));
                    MOVE PROPERTY (number(p));
                    MOVE PROPERTY (series(p));
                    MOVE PROPERTY (date(p));
                    MOVE PROPERTY (time(p));
                }        
        
            }
            NEW midContainer {
                type = CONTAINERH;
                NEW timeContainer{
                    caption = 'Период действия';
                    type = CONTAINERH;
                    MOVE PROPERTY (fromDate(p));
                    MOVE PROPERTY (fromTime(p));
                    MOVE PROPERTY (toDate(p));
                    MOVE PROPERTY (toTime(p));
                }
            }
            MOVE p.documentPrm{
                caption = 'Параметры документа';
                type = COLUMNS;
                columns = 3;
                MOVE PROPERTY(nameCurrency(p));
                MOVE PROPERTY(nameCompany(p));
                MOVE PROPERTY(nameCompanyStock(p));
                MOVE PROPERTY(note(p));
            }             
        }
        NEW param {
            caption = 'Дополнительные параметры';
            type = COLUMNS;
            columns = 1; 
            MOVE PROPERTY(showOriginalIdBarcodeSku(p));
            MOVE PROPERTY(showOriginalNameSku(p));
            MOVE PROPERTY(showBatchUser(p)); 
            MOVE PROPERTY(showCompanyUser(p));
            MOVE PROPERTY(showDateTimeUser(p));
            MOVE PROPERTY(showNotCompanyStocksUser(p));
        }         
    }

    NEW detailContainer{
        fill = 1;
        type = TABBED;
        NEW firstContainer{
            fill = 1;
            caption = 'Спецификация';

            type = SPLITH;
            NEW leftColumnContainer{
                fill = 1;
                MOVE tt.box;
                MOVE PROPERTY(nameGroupTypeS);
                MOVE skuTree.tree.box {
                    caption = 'Группы товаров';
                }
            }
            NEW skuContainer{
                fill = 3;
                NEW rowContainer {
                    type = CONTAINERH;
                    MOVE PROPERTY(addDetailInputBarcodeUserPriceListDetail(p));
                }
                MOVE d.box;
            }
        }

        NEW secondContainer {
            fill = 1;
            caption = 'Склады';
            type = SPLITH;
            MOVE stockTree.tree.box {
                caption = 'Группы складов';
            }
            MOVE ts.box {
                fill = 2;
            }
        }

        NEW thirdContainer{
            fill = 1;
            caption = 'Вид цен';
            MOVE t.box;
        }

        NEW fourthContainer {
            caption = 'Подбор';
            NEW topThirdContainer{
                type = CONTAINERH;
                MOVE ts2.box;
                NEW filtersContainer {
                    caption = 'Фильтры';
                    type = CONTAINERH;
                    MOVE PROPERTY(nameFilterPriceListType(p));
                }
            }
            NEW detailFourthContainer{
                fill = 1;
                type = SPLITH;
                NEW treeContainer {
                    fill = 1;
                    MOVE PROPERTY(nameGroupTypeP);
                    MOVE skuTree2.tree.box {
                        caption = 'Группы товаров';
                    }                        
                }
                NEW tabContainer {
                    type = TABBED;
                    fill = 3;
                    MOVE s2.box;
                    MOVE b.box{
                        caption = 'Партии';
                    }                    
                }
            }
        }

    }
    MOVE functions.box;

    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

edit 'Редактировать' = ACTION ABSTRACT LIST (PriceListDetail) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit(UserPriceListDetail d) = ACTION NEWSESSION {
    SHOW userPriceList OBJECTS p = userPriceList(d), d = d MANAGESESSION DOCKED;
}
edit(UserPriceListDetail d) += ACTION edit(d);   
edit(PriceListDetail d) += ACTION edit(d);
    
// -------------------------------- Изменение цен для строк ------------------------------ //

CLASS TypeMarkUpSkuUserPriceList 'Метод изменения цены'{
    percent 'Наценка, %',
    multiplication 'Умножение',
    division 'Деление'
}

FORM typeMarkUpSkuUserPriceList 'Метод изменения цены'
    OBJECTS m = TypeMarkUpSkuUserPriceList
    PROPERTIES(m) READONLY staticCaption

    LIST TypeMarkUpSkuUserPriceList OBJECT m
;

DESIGN typeMarkUpSkuUserPriceList {
    PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
}

headerNumericCaption(TypeMarkUpSkuUserPriceList type) =
    CASE
        WHEN type == TypeMarkUpSkuUserPriceList.percent
            THEN '% наценки' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.multiplication
            THEN 'Множитель' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.division
            THEN 'Делитель' IF type IS TypeMarkUpSkuUserPriceList
        ELSE '% наценки' IF type IS TypeMarkUpSkuUserPriceList
    ;

FORM chooseMarkUpSkuUserPriceList 'Наценка'

    OBJECTS p = UserPriceList PANEL

    OBJECTS m = TypeMarkUpSkuUserPriceList PANEL
    PROPERTIES(m) SELECTOR staticCaption

    OBJECTS pt = PriceListType PANEL
    PROPERTIES(pt) SELECTOR name

    OBJECTS n = NUMERIC[20,7] PANEL
    PROPERTIES(n) objValue = OBJVALUE HEADER headerNumericCaption(m)

    OBJECTS nt = DataPriceListType PANEL
    PROPERTIES(nt) SELECTOR name
    FILTERS in(p, nt)
;

DESIGN chooseMarkUpSkuUserPriceList {

    REMOVE p.box;
    NEW topContainer {
        type = CONTAINERV;
        MOVE PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
        MOVE PROPERTY(name(pt));
        PROPERTY(name(pt)){caption = 'Старая цена';}
        MOVE PROPERTY(objValue);
        PROPERTY(objValue){caption = 'Изменение';}
        MOVE PROPERTY(name(nt));
        PROPERTY(name(nt)){caption = 'Новая цена';}
    }
    MOVE functions.box;
}

// ----------------------- Для отмеченных строк ------------------------ //
isSelected 'Отм' = DATA LOCAL BOOLEAN (UserPriceListDetail);
changeMarkUpChosenSku 'Изменить цену для отмеченных строк'(UserPriceList userPriceList, Stock stock) = ACTION {
    DIALOG chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList, pt INPUT, nt INPUT, m INPUT, n INPUT DO {
        IF NOT [= GROUP SUM 1 IF isSelected(UserPriceListDetail priceListDetail)
                      BY userPriceList(priceListDetail)](userPriceList) THEN
            MESSAGE 'Выберите хотя бы одну позицию'
        ELSE {
            LOCAL prev = NUMERIC[16,4] (UserPriceListDetail);
            IF pt != nt AND in[UserPriceList,DataPriceListType](userPriceList, pt) THEN {
                prev(UserPriceListDetail detail) <- price[UserPriceListDetail,DataPriceListType](detail, pt)
                                     WHERE userPriceList(detail) == userPriceList;
            } ELSE {
                prev(UserPriceListDetail detail) <- currentPrice(detail, pt, stock)
                                     WHERE userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent THEN{
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 / n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 / n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(d) isSelected BEFORE index(d)
    PROPERTIES(p, tt) TODRAW d TOOLBAR changeMarkUpChosenSku
    FILTERGROUP filterSelected
        FILTER 'Отмеченные строки' isSelected(d) 'F11'
;
DESIGN userPriceList{
    rowContainer{
        MOVE PROPERTY(changeMarkUpChosenSku(p,tt));
    }
}

// ---------------------- Для всех строк ----------------------- //
changeMarkUpSku 'Изменить цену для всех строк'(UserPriceList userPriceList, Stock stock) = ACTION {
    DIALOG chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList, pt INPUT, nt INPUT, m INPUT, n INPUT DO {
        LOCAL prev = NUMERIC[16,4] (UserPriceListDetail);
        IF pt != nt AND in[UserPriceList,DataPriceListType](userPriceList, pt) THEN {
            prev(UserPriceListDetail detail) <- price[UserPriceListDetail,DataPriceListType](detail, pt)
                                 WHERE userPriceList(detail) == userPriceList;
        } ELSE {
            prev(UserPriceListDetail detail) <- currentPrice(detail, pt, stock)
                                 WHERE userPriceList(detail) == userPriceList;
        }

        FOR [= FILTER userPriceList.d](UserPriceListDetail detail) DO {
            IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent THEN {
                price(detail, nt) <-
                    round(prev(detail) * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN{
                price(detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication THEN {
                price(detail, nt) <-
                    round(prev(detail) * n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 / n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN{
                price(detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 / n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division THEN {
                price(detail, nt) <-
                    round(prev(detail) / n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p, tt) TODRAW d TOOLBAR changeMarkUpSku
;

DESIGN userPriceList{
    rowContainer{
        MOVE PROPERTY(changeMarkUpSku(p,tt)) BEFORE PROPERTY(changeMarkUpChosenSku(p,tt));
    }
}

edit 'Редактировать' = ACTION EDITFORM UserPriceList;
edit 'Редактировать' = ACTION ABSTRACT LIST (PriceList) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
edit (UserPriceList p) += ACTION edit(p);
// ------------------ Копирование прайс-листов ------------------- //

copyAbstractData = ACTION ABSTRACT LIST (PriceList, UserPriceList);

copyData(PriceList priceList, UserPriceList userPriceList) = ACTION {
        currency(userPriceList) <- currency[UserPriceList](priceList);
        company(userPriceList) <- company[UserPriceList](priceList);
        companyStock(userPriceList) <- companyStock[UserPriceList](priceList);
        dataIn(userPriceList, Stock stock) <- dataIn[UserPriceList,Stock](priceList, stock);
        dataIn(userPriceList, StockGroup stockGroup) <- dataIn[UserPriceList,StockGroup](priceList, stockGroup);
        allStocks(userPriceList) <- allStocks[UserPriceList](priceList);
        in(userPriceList, DataPriceListType priceListType) <- in[UserPriceList,DataPriceListType](priceList, priceListType);
        EXEC copyAbstractData(priceList, userPriceList);
        FOR userPriceList(UserPriceListDetail detail) == priceList DO {
            FOR NEW d = UserPriceListDetail DO {
                ASSIGN userPriceList(d) <- userPriceList;
                ASSIGN sku(d) <- sku(detail);
                ASSIGN price(d, DataPriceListType priceListType) <- price[PriceListDetail,DataPriceListType](detail, priceListType);
            }
        }
}

copySession 'Копировать'(PriceList priceList) = ACTION {

    FOR NEW u = UserPriceList DO {
        EXEC copyData(priceList, u);
        SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
    }
}

copy 'Копировать'(PriceList priceList) = ACTION NEWSESSION {

    FOR NEW u = UserPriceList DO {
        EXEC copyData(priceList, u);
        SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
    }
}

updateSession 'Обновить'(PriceList priceList) = ACTION NESTEDSESSION {

    FOR NEW u = UserPriceList DO {
        copyData(priceList, u);
        DIALOG userPriceList OBJECTS p = u MANAGESESSION DOCKED NOCANCEL DO {
            toDate[UserPriceList](priceList) <- fromDate(u);
            toTime[UserPriceList](priceList) <- fromTime(u);
        }
    }

}
update 'Обновить'(PriceList priceList) = ACTION NEWSESSION {

    FOR NEW u = UserPriceList DO {
        copyData(priceList, u);
        DIALOG userPriceList OBJECTS p = u MANAGESESSION DOCKED NOCANCEL DO {
            toDate[UserPriceList](priceList) <- fromDate(u);
            toTime[UserPriceList](priceList) <- fromTime(u);
            apply();
        }
    }
}

print 'Распечатать' = ACTION ABSTRACT LIST (PriceList);

filterPriceListDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (PriceList p) = fromDate(p) >= filterPriceListDateFrom() OR (p IS PriceList AND NOT filterPriceListDateFrom());      

filterPriceListDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (PriceList p) = toDate(p) <= filterPriceListDateTo() OR (p IS PriceList AND NOT filterPriceListDateTo());      

filterPriceListCompany  = DATA LOCAL LegalEntity ();
nameFilterPriceListCompany 'Организация' = name(filterPriceListCompany()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterCompany (PriceList p) = company(p) == filterPriceListCompany() OR (p IS PriceList AND NOT filterPriceListCompany());       

FORM priceLists 'Прайсы'
    PROPERTIES() filterPriceListDateFrom, filterPriceListDateTo, nameFilterPriceListCompany

    OBJECTS p = PriceList
    PROPERTIES(p) READONLY BACKGROUND background(p)
           isPosted , number, series, date, time,
           fromDate, fromTime, toDate, toTime, countPriceListDetail,
           nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks,
           note

    PROPERTIES (p)  NEWSESSION NEW[UserPriceList]
    PROPERTIES (p) TOOLBAR edit, copy , print 
    PROPERTIES (p) NEWSESSION DELETE SHOWIF is[UserPriceList](p)
    PROPERTIES (p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer 
                                        
    OBJECTS t = DataPriceListType GRID

    OBJECTS d = PriceListDetail
    PROPERTIES (d) READONLY exclude
    PROPERTIES(d) READONLY BACKGROUND background(d) index, idBarcodeSku, idSku SHOWIF showIDs(),nameSku,
                           shortNameUOMSku, nameBatch, nameCompany
    PROPERTIES(d) READONLY  BACKGROUND background(d)  AFTER nameSku(d) originalIdBarcodeSku SHOWIF showOriginalIdBarcodeSku(p), originalNameSku SHOWIF showOriginalNameSku(p)
    
    ORDER BY index(d)
    
    OBJECTS ts = Stock
    PROPERTIES(ts) READONLY name
    PROPERTIES(p, ts) READONLY in

    PROPERTIES(d, t) READONLY BACKGROUND background(d) price COLUMNS (t) HEADER name(t)

    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(p) 'F11'            
        FILTER 'Активные' isActive(p) OR (fromDateTime(p) > currentDateTime()) 'F10' DEFAULT
        
    FILTERGROUP inactiveStock 
        FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT    

    FILTERS priceList(d) == p,
            in(p, t),
            in(p, ts),
            currency[UserPriceList](p) == currency(t),
            isCompany(ts)
    FILTERS filterDateFrom(p), 
            filterDateTo(p),
            filterCompany(p)                    

    LIST PriceList OBJECT p
;

DESIGN priceLists {
    NEW topContainer{
        fill = 1;
        type = SPLITV;
        REMOVE t.box;
//        ADD p.box {
//            fill = 2;
//        }
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterPriceListDateFrom());    
                MOVE PROPERTY(filterPriceListDateTo());
                MOVE PROPERTY(nameFilterPriceListCompany());                
            }
            MOVE p.box {
                fill = 1;
            }
        }        
        NEW detailContainer{
            fill = 1;
            type = TABBED;
            NEW firstContainer{
                caption = 'Спецификация';
                type = SPLITH;
                MOVE d.box {
                    fill = 4;
                }
                MOVE ts.box;
            }
            NEW documentHistory {
                caption = 'История';
                type = CONTAINERV;

                MOVE p.created;
                MOVE p.posted;
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                    MOVE PROPERTY(print(p));
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
            }
        }
    }
    MOVE functions.box;
}

@defineDocumentLogForm(priceLists, p);

NAVIGATOR {
    priceListDocuments 'Документы' {
        ADD priceLists;
    }
}

// Заполнение на основании

addUnderPriceList 'Заполнить на основании'(UserPriceList p) = ACTION {
    DIALOG priceLists OBJECTS p INPUT pt DO
        FOR priceList(PriceListDetail detail) == pt NEW d = UserPriceListDetail DO {
            userPriceList(d) <- p;
            sku(d) <- sku(detail);
            price(d, DataPriceListType type) <- price(detail, type)
                                                                  WHERE in(p, type); 
        }
}

EXTEND FORM userPriceList
    PROPERTIES(p) TODRAW d TOOLBAR addUnderPriceList
;

//печать прайсов

FORM printPriceList 'Прайс'
    OBJECTS p = PriceList PANEL
    PROPERTIES(p) READONLY number, series, date, time,
           fromDate, fromTime, toDate, toTime,
           nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks,
           note, isPosted

    OBJECTS t = DataPriceListType
    PROPERTIES(t) READONLY name[PriceListType]
    FILTERS in(p, t),
            (currency[UserPriceList](p) == currency[PriceListType](t)) OR (p IS PriceList AND t IS PriceListType AND NOT currency[PriceListType](t))

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) READONLY index[PriceListDetail], idBarcodeSku[PriceListDetail], nameSku[PriceListDetail],
                           shortNameUOMSku[PriceListDetail], nameCompany[PriceListDetail]
    PROPERTIES(d, t) price[PriceListDetail,DataPriceListType] COLUMNS (t) HEADER headerNameData(t) BACKGROUND background(t) TODRAW d 

    FILTERS priceList(d) == p
;

printPrint 'Распечатать' (PriceList priceList) =
    ACTION PRINT printPriceList OBJECTS p = priceList   IMAGE 'print.png' IN print;

print(PriceList priceList) += ACTION printPrint(priceList);

// ------------------------- Расширяем форму LegalEntity ----------------------- //
overAdd= ACTION ABSTRACT LIST (UserPriceList);
addUserPriceList 'Добавить'(LegalEntity legalEntity) = ACTION NESTEDSESSION {
    FOR NEW u = UserPriceList DO {
        company(u) <- legalEntity;
        overAdd(u); 
        SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
    }
} TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY BACKGROUND background(p) isPosted, number, series, date, time,
                           fromDate, fromTime, toDate, toTime,
                           nameCurrency, priceListTypes,
                           stocks, note
    PROPERTIES addUserPriceList(l) TODRAW p , updateSession(p) TOOLBAR
    PROPERTIES(p) EDIT, DELETE 
    FILTERS company(p) == l
    
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(p) 'F11'            
        FILTER 'Активные' isActive(p) OR (fromDateTime[PriceList](p) > currentDateTime()) 'F10' DEFAULT  
;

DESIGN legalEntity{
    extendContainer {
        MOVE p.box{caption = 'Прайсы';}
    }
}

// ------------------------------------------------- Сравнение прайсов ---------------------------- //

count (sku, priceList) = GROUP SUM 1 BY sku(PriceListDetail detail), priceList(detail);

countSkus (priceList) = GROUP SUM 1 IF count(Sku sku, PriceList priceList)
    BY priceList;

countSku (priceList1, priceList2) = GROUP SUM 1 IF count(Sku sku, PriceList priceList1) == count(sku, PriceList priceList2)
    BY priceList1, priceList2;

equals (PriceList priceList1, PriceList priceList2) = company(priceList1) == company(priceList2) AND
                                                    currency(priceList1) == currency(priceList2) AND
                                                    date(priceList1) == date(priceList2) AND
                                                    countSku (priceList1, priceList2) == countSkus(priceList1) AND
                                                    countSku (priceList1, priceList2) == countSkus(priceList2) AND
                                                    priceList1 != priceList2;


findEqualsPriceLists 'Найти дубликаты прайсов'() = ACTION {
    FOR UserPriceList p1 IS UserPriceList NOINLINE DO {
        FOR equals(p1, PriceList p2) NOINLINE DO {
            ASSIGN dataIn[UserPriceList,Stock](p2, Stock s) <- dataIn(p1, s) WHERE dataIn(p1, s);
            DELETE p1;
            apply();
            BREAK;
        }
    }
}

EXTEND FORM migrationData
    PROPERTIES() findEqualsPriceLists
;

countPriceListDetail 'Кол-во строк' (sku, priceList) = GROUP SUM 1 BY sku(PriceListDetail d), priceList(d);

priceLimit 'Максимально допустимая цена' = DATA NUMERIC[16,4] (Currency);

EXTEND FORM currency
    PROPERTIES priceLimit(c);
    
CONSTRAINT (SETCHANGED (price(PriceListDetail d, DataPriceListType t)) OR SET (isPosted(d))) AND isPosted(d) AND price(d,t) > priceLimit(currency(t))
    MESSAGE 'Превышена максимально допустимая для валюты цена ';