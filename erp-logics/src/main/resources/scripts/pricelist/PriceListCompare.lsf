MODULE PriceListCompare;

REQUIRE PriceList, PriceListDashboard;

//Подсветка строк сравнения прайсов
isSkuPriceList (sku, priceList) = GROUP SUM 1 BY skuPriceListDetail(detail), priceListPriceListDetail(detail);

priceSkuDataPriceListTypePriceList 'Цена' (sku, type, priceList) = GROUP MAX pricePriceListDetailDataPriceListType(detail, type)
    BY skuPriceListDetail(detail), type, priceListPriceListDetail(detail);

backgroundSkuPriceListPriceListPricelistType (sku, p1, p2, type) = 
    CASE WHEN isSkuPriceList(sku, p1) AND NOT isSkuPriceList(sku, p2) THEN RGB(192,255,192)  
         WHEN isSkuPriceList(sku, p2) AND NOT isSkuPriceList(sku, p1) THEN RGB(255,192,192)  
         WHEN priceSkuDataPriceListTypePriceList(sku, type, p1) != priceSkuDataPriceListTypePriceList(sku, type, p2) THEN RGB(255,255,192);  

headerNamePriceListDataPriceListType (priceList, dataPriceListType) =
    (namePriceListType(dataPriceListType) + ' (№' + numberPriceList(priceList) + ')') IF inPriceListDataPriceListType(priceList, dataPriceListType) MINCHARWIDTH 30 MAXCHARWIDTH 50;    

EXTEND FORM userPriceList
    OBJECTS p2 = UserPriceList FIXED PANEL
    PROPERTIES (p2) SELECTOR seriesNumberUserPriceList, dateUserPriceList, nameCurrencyUserPriceList, nameCompanyUserPriceList
    FILTERS p != p2
    
    OBJECTS s3=Sku
    PROPERTIES BACKGROUND backgroundSkuPriceListPriceListPricelistType(s3, p, p2, t) READONLY inputName3 = nameSku(s3), idBarcodeSku(s3), shortNameUOMSku(s3)
    PROPERTIES(s3, t, p) READONLY priceSkuDataPriceListTypePriceList COLUMNS (t) HEADER headerNamePriceListDataPriceListType(p, t) SHOWIF headerNamePriceListDataPriceListType(p, t) BACKGROUND backgroundSkuPriceListPriceListPricelistType(s3, p, p2, t) TODRAW s3 FORCE GRID    
    PROPERTIES(s3, t, p2) READONLY priceSkuDataPriceListTypePriceList COLUMNS (t) HEADER headerNamePriceListDataPriceListType(p2, t) SHOWIF headerNamePriceListDataPriceListType(p2, t) BACKGROUND backgroundSkuPriceListPriceListPricelistType(s3, p, p2, t) TODRAW s3 FORCE GRID    
    ORDER BY inputName3
    FILTERS isSkuPriceList(s3, p) OR isSkuPriceList(s3, p2),
            companyUserPriceList(p) == companyUserPriceList(p2)
    FILTERGROUP compareFilter
        FILTER 'Удаленные' isSkuPriceList(s3, p2) AND NOT isSkuPriceList(s3, p) 'F9' 
        FILTER 'Добавленные' isSkuPriceList(s3, p) AND NOT isSkuPriceList(s3, p2) 'F10' 
    FILTERGROUP differentPricesFilter
        FILTER 'Различные цены' priceSkuDataPriceListTypePriceList(s3, t, p) != priceSkuDataPriceListTypePriceList(s3, t, p2) 'F11' 
;

DESIGN userPriceList{
    detailContainer{
        NEW fifthContainer{
            fill = 1;
            caption = 'Сравнение';
            ADD p2.box{
                type = CONTAINERH;
                ADD PROPERTY (seriesNumberUserPriceList(p2));
                ADD PROPERTY (dateUserPriceList(p2));
                ADD PROPERTY (nameCurrencyUserPriceList(p2));
                ADD PROPERTY (nameCompanyUserPriceList(p2));
            }
            ADD s3.box;
        }
    }
}


percentPrice 'Отклонение цены, %' (pa,pb,sk,sa,sb,da,db)  = (priceBPriceListTypeSkuStockDateTime(pb,sk,sb,db) - priceBPriceListTypeSkuStockDateTime(pa,sk,sa,da))*100.00/
                                                                           priceBPriceListTypeSkuStockDateTime(pa,sk,sb,db) IF priceBPriceListTypeSkuStockDateTime(pa,sk,sa,da)!=0;

backgroundPercentPrice  = IF percentPrice(pa,pb,sk,sa,sb,da,db) < 0 THEN RGB(255,100,100) 
                                   ELSE IF percentPrice(pa,pb,sk,sa,sb,da,db)> 0 THEN RGB(100,255,100);
backgroundCompareA = RGB(250,225,225);
backgroundCompareB = RGB(225,225,250);
isDifferent(a,b) = IF a != b THEN TRUE;

FORM comparePriceList 'Сравнение цен '
    OBJECTS pa = PriceListType FIXED PANEL, pb = PriceListType FIXED PANEL,sa=Stock FIXED PANEL, sb=Stock FIXED PANEL  
    PROPERTIES SELECTOR BACKGROUND backgroundCompareA() namePriceListType(pa), nameStock(sa)
    PROPERTIES SELECTOR BACKGROUND backgroundCompareB() namePriceListType(pb), nameStock(sb)
    FILTERS activeStock(sa), isCompanyStock(sa), activeStock(sb), isCompanyStock(sb)    
    
    OBJECTS da = DATETIME 'Дата' FIXED PANEL, db = DATETIME 'Дата' FIXED PANEL 
    PROPERTIES OBJVALUE (da) BACKGROUND backgroundCompareA(), OBJVALUE (db) BACKGROUND backgroundCompareB()     
    
    OBJECTS           t=GroupType FIXED PANEL 
    PROPERTIES(t)     SELECTOR nameGroupType        
        
    TREE skuTree g = Group PARENT parentGroup
    PROPERTIES READONLY orderGroup(g), nameGroup(g)
    ORDER BY orderGroup(g), nameGroup(g)
    FILTERS groupTypeGroup(g) == t
    FILTERGROUP inactive FILTER 'Активные' activeGroup(g) 'F5' DEFAULT 

    OBJECTS sk = Sku FIXED GRID 
    PROPERTIES READONLY idBarcodeSku(sk),nameSku(sk)
    PROPERTIES READONLY BACKGROUND backgroundCompareA() currentBalanceSkuStock(sk,sa), dateTimeLastOrderBatchSkuStock(sk,sa), priceBPriceListTypeSkuStockDateTime(pa,sk,sa,da)
    PROPERTIES READONLY BACKGROUND backgroundCompareB() currentBalanceSkuStock(sk,sb) SHOWIF isDifferent(sa,sb),dateTimeLastOrderBatchSkuStock(sk,sb) SHOWIF isDifferent(sa,sb),
                                                        priceBPriceListTypeSkuStockDateTime(pb,sk,sb,db)
    PROPERTIES READONLY percentPrice(pa,pb,sk,sa,sb,da,db) BACKGROUND backgroundPercentPrice(pa,pb,sk,sa,sb,da,db)
    FILTERS priceBPriceListTypeSkuStockDateTime(pa,sk,sa,da) OR priceBPriceListTypeSkuStockDateTime(pb,sk,sb,db), isParentGroupSku(g,sk)
    FILTERGROUP ostFilter
        FILTER 'Есть остаток' currentBalanceSkuStock(sk,sa) OR currentBalanceSkuStock(sk,sb) 'F8' 
    FILTERGROUP compareFilter
        FILTER 'Первая цена выше' percentPrice(pa,pb,sk,sa,sb,da,db) < 0 'F9' 
        FILTER 'Вторая цена выше' percentPrice(pa,pb,sk,sa,sb,da,db) > 0 'F10'
;

DESIGN comparePriceList {
    NEW top FIRST{
        NEW param  {
            type = COLUMNS ;
            columns = 2;
            ADD pa.box;
            ADD pb.box;
            ADD sa.box;
            ADD sb.box;
            ADD da.box;
            ADD db.box;
        } 
    }
    NEW bottom AFTER top {
        fill = 1;
        type = SPLITH;
        NEW leftBottom {
            fill=2;
            ADD t.box;
            ADD skuTree.tree.box;
        }
        NEW rightBottom {
            fill = 5;
            ADD sk.box;
        }
    }
    ADD functions.box;
}

NAVIGATOR {
    priceListDashboardNavigator {
        ADD comparePriceList;
    }
}