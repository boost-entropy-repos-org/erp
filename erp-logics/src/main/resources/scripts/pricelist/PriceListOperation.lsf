MODULE PriceListOperation;

REQUIRE PriceList;

NAMESPACE PriceList;

@defineOperation('(прайс)');
@defineOperationRole();
@extendFormFilterRole(o, dialogOperations);
//@extendFormFilterRole(o, operations);     //-- пока не нужен

TABLE priceListTypeOperation(PriceListType, Operation);

change 'Изменять цены' = DATA BOOLEAN (DataPriceListType, Operation);
show 'Показывать цены' = DATA BOOLEAN (PriceListType, Operation);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);
TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);
@defineOperationStock(, st, 'Склады');
@defineOperationLegalEntity( ,legalEntity, l, 'Организации');

EXTEND FORM operation
    FILTERS countCompanyStock(stg),
            isCompany(st)
;

dataLegalEntity = DATA LegalEntity (Operation);

nameDefaultLegalEntity 'Организация по умолчанию' (Operation operation) = name(dataLegalEntity(operation));
isDefault 'Организация по умолчанию' (LegalEntity legalEntity, Operation operation) =
    dataLegalEntity(operation) == legalEntity;

CONSTRAINT dataLegalEntity(Operation operation) AND NOT in(dataLegalEntity(operation), operation)
    CHECKED BY dataLegalEntity[Operation] MESSAGE 'Организация по умолчанию должна быть в списке отмечанных организаций';

@defineOperationCurrency();
@defineOperationGroupType();
userDefaultCurrency = DATA Currency (Operation);
//userDefaultCurrencyOperation(operation) => inCurrencyOperation(userDefaultCurrencyOperation(operation), operation) RESOLVE RIGHT;
calcDefaultCurrency(operation) =
    GROUP MAX Currency currency IF in(currency, Operation operation)
    BY operation PERSISTENT;
defaultCurrency(Operation operation) = OVERRIDE calcDefaultCurrency(operation),
                                               userDefaultCurrency(operation) PERSISTENT;
nameDefaultCurrency 'Валюта по умолчанию' (Operation operation) = name(defaultCurrency(operation));
isDefault 'Валюта по умолчанию' (Currency currency, Operation operation) =
    defaultCurrency(operation) == currency;

CONSTRAINT userDefaultCurrency(Operation operation) AND NOT in(userDefaultCurrency(operation), operation)
    CHECKED BY userDefaultCurrency[Operation] MESSAGE 'Валюта по умолчанию должны быть в списке отмечанных валют';

//Определение операции для прайсов
//@defineDocumentOperationContainer(priceList, p){
//    @defineDocumentOperationContainer(priceList, p, isPostedPriceList, nameCurrency, first){
//    
//        operationPriceList = ABSTRACT Operation (PriceList) PERSISTENT;
//        nameOperationPriceList 'Операция' = nameOperation(operationPriceList(priceList));
//        idOperationPriceList 'ID операции' = idOperation(operationPriceList(priceList));
//        operationUserPriceList = DATA Operation (UserPriceList);
//        nameOperationUserPriceList 'Операция' = nameOperation(operationUserPriceList(userPriceList));
//        idOperationUserPriceList 'ID операции' = idOperation(operationUserPriceList(userPriceList));
//        operationPriceList(priceList) += operationUserPriceList(priceList);
//    
//        operationPriceListDetail 'Операция' (priceListDetail) = operationPriceList(priceListPriceListDetail(priceListDetail));
//        operationUserPriceListDetail 'Операция' (userPriceListDetail) = operationUserPriceList(userPriceListUserPriceListDetail(userPriceListDetail));
//    
//        EXTEND FORM userPriceList
//            PROPERTIES(p) nameOperationUserPriceList
//        ;
//    
//        DESIGN userPriceList{
//            first {
//                ADD PROPERTY(nameOperationUserPriceList(p));
//            }
//            PROPERTY(nameOperationUserPriceList(p)) {minimumCharWidth = 30; preferredCharWidth = 40;} 
//        }
//        EXTEND FORM priceLists
//            PROPERTIES(p) READONLYIF isReadonly() nameOperationPriceList BEFORE nameCurrencyPriceList(p)
//        ;
//    };
//};
    
operation = ABSTRACT Operation (PriceList) PERSISTENT;
nameOperation 'Операция' = name(operation(PriceList priceList));
idOperation 'ID операции' = id(operation(PriceList priceList));
operation = DATA Operation (UserPriceList);
nameOperation 'Операция' = name(operation(UserPriceList userPriceList));
idOperation 'ID операции' = id(operation(UserPriceList userPriceList));
operation(UserPriceList priceList) += operation(priceList);

operation 'Операция' (PriceListDetail priceListDetail) = operation(priceList(priceListDetail)) PERSISTENT;
operation 'Операция' (UserPriceListDetail userPriceListDetail) = operation(userPriceList(userPriceListDetail));

DESIGN options {
    pane {        
        NEW priceLists {
            caption = 'Прайсы';
        }
    }
}

@defineDocumentOperationConstraint(priceList, 'прайс', PriceList);
@extendFormFilterRoleAccess(priceList, p, priceLists);



EXTEND FORM userPriceList
    PROPERTIES(p) nameOperation
;

DESIGN userPriceList{
    first {
        MOVE PROPERTY(nameOperation(p));
    }
    PROPERTY(nameOperation(p)) {minimumCharWidth = 30; preferredCharWidth = 40;} 
}
EXTEND FORM priceLists
    PROPERTIES(p) READONLYIF isReadonly() BACKGROUND background(p) nameOperation BEFORE nameCurrency(p)
;

@defineDocumentOperationRole(userPriceList);

in(UserPriceList priceList, DataPriceListType dataPriceListType) <- change(dataPriceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));

show(UserPriceList priceList, PriceListType priceListType) <- show(priceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));

WHEN SESSION CHANGED(operation(UserPriceList priceList)) AND dataLegalEntity(operation(priceList)) DO
    company(priceList) <- dataLegalEntity(operation(priceList));

WHEN SESSION CHANGED(operation(UserPriceList priceList)) AND defaultCurrency(operation(priceList)) DO
    currency(priceList) <- defaultCurrency(operation(priceList));

copyOperation(UserPriceList priceList, UserPriceList userPriceList) = ACTION {
    operation(userPriceList) <- operation(priceList);
}
copyAbstractData(UserPriceList priceList, UserPriceList userPriceList) += ACTION copyOperation(priceList, userPriceList);

CONSTRAINT operation(UserPriceList priceList) AND company(priceList) AND NOT in(company(priceList), operation(priceList))
    CHECKED BY company[UserPriceList] MESSAGE 'Компания прайса должна соответствовать ограничениям операции';

groupType(UserPriceList priceList) <- IF operation(priceList) THEN groupType(operation(priceList))
                                        ELSE SystemGroupType.skuGroupType
    WHEN CHANGED(operation(priceList)) OR
         SET(priceList IS UserPriceList);
         
doNotSetStocksUserPriceList 'Не проставлять склады по умолчанию' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) doNotSetStocksUserPriceList
;
DESIGN operation {
    st.box {
        MOVE PROPERTY(doNotSetStocksUserPriceList(o)) FIRST;
    }
}

skipSetStocks = DATA LOCAL BOOLEAN (UserPriceList);

WHEN SESSION CHANGED(operation(UserPriceList priceList)) AND NOT doNotSetStocksUserPriceList(operation(priceList))
    AND NOT skipSetStocks(priceList) DO {
    allStocks(priceList) <- allStocks(operation(priceList));
    dataIn(priceList, StockGroup stockGroup) <- dataIn(stockGroup, operation(priceList));
    dataIn(priceList, Stock stock) <- dataIn(stock, operation(priceList));
} 

CONSTRAINT operation(UserPriceList priceList) AND NOT in(Stock stock, operation(priceList)) AND in(priceList, stock)
    CHECKED BY in[PriceList,Stock] MESSAGE 'Склады прайса должна соответствовать ограничениям операции';


showOriginalNameSku 'Наименование поставщика' = DATA BOOLEAN (Operation);
showOriginalNameSku(UserPriceList priceList) <- showOriginalNameSku(operation(priceList))
    WHEN CHANGED(operation(priceList));
    
showDateTime 'Даты действия' = DATA BOOLEAN (Operation);
showDateTimeUser(UserPriceList priceList) <- showDateTime(operation(priceList))
    WHEN CHANGED(operation(priceList));  
      
showBatch 'Партия' = DATA BOOLEAN (Operation);
showBatchUser(UserPriceList priceList) <- showBatch(operation(priceList))
    WHEN CHANGED(operation(priceList));    
 
showCompany 'Организация строки' = DATA BOOLEAN (Operation);
showCompanyUser(UserPriceList priceList) <- showCompany(operation(priceList))
    WHEN CHANGED(operation(priceList));             
         
showOriginalIdBarcodeSku 'Штрихкод поставщика' = DATA BOOLEAN (Operation);
showOriginalIdBarcodeSku(UserPriceList priceList) <- showOriginalIdBarcodeSku(operation(priceList))
    WHEN CHANGED(operation(priceList));
    
showNotCompanyStocks 'Склады контрагентов' = DATA BOOLEAN (Operation);
showNotCompanyStocksUser(UserPriceList priceList) <- showNotCompanyStocks(operation(priceList))
    WHEN CHANGED(operation(priceList));

EXTEND FORM operation
    OBJECTS pt = PriceListType
    PROPERTIES(pt, o) change TODRAW pt FORCE GRID, show
    PROPERTIES(pt) READONLY name, nameCurrency, objectClassName
    FILTERGROUP filters
        FILTER 'Показывать отмеченные' change(pt, o) 'F9'
    PROPERTIES(l, o) isDefault AFTER in(l,o)
    PROPERTIES(c, o) isDefault AFTER in(c,o)
    PROPERTIES(o) nameDefaultLegalEntity, nameDefaultCurrency
    FILTERS isCompany(st)
    PROPERTIES(o) showOriginalIdBarcodeSku, showOriginalNameSku, showDateTime, showBatch, 
                  showCompany, showNotCompanyStocks
    
;

DESIGN operation {
    headContainer {
        NEW defaultContainer{
            type = CONTAINERH;
            caption = 'Параметры по умолчанию';
            MOVE PROPERTY(nameDefaultLegalEntity(o));
            MOVE PROPERTY(nameDefaultCurrency(o));
        }
    }
    tabContainer {
        MOVE pt.box BEFORE legalEntityContainer;
        NEW showContainer {
            caption = 'Отображение свойств';
            type = CONTAINERV;
            MOVE PROPERTY(showOriginalIdBarcodeSku(o));
            MOVE PROPERTY(showOriginalNameSku(o));
            MOVE PROPERTY(showDateTime(o));
            MOVE PROPERTY(showBatch(o));
            MOVE PROPERTY(showCompany(o));
            MOVE PROPERTY(showNotCompanyStocks(o));
        }
    }
}

// Подсчет цен по прайс-листам

priceListDetailA  (type, sku, stock, dateTime, operation) =
    GROUP LAST PriceListDetail detail
          BY DataPriceListType type, sku(detail), Stock stock, DATETIME dateTimeIn, operation(detail)
          ORDER fromDateTime(detail), detail
          WHERE in(detail, type) AND isPosted(detail) AND in(priceList(detail),stock) AND
                fromDateTime(detail) <= dateTimeIn AND NOT toDateTime(detail) < dateTimeIn COMPLEX;
                
priceListDetailA  (type, sku, stock, date, operation) =
    GROUP LAST PriceListDetail detail
          BY DataPriceListType type, sku(detail), Stock stock, DATE dateIn, operation(detail)
          ORDER fromDate(detail), detail
          WHERE in(detail, type) AND isPosted(detail) AND in(priceList(detail),stock) AND
                fromDate(detail) <= dateIn AND NOT toDate(detail) < dateIn COMPLEX;

lastPriceListDetailA (type, sku, stock, dateTime, operation) =
    GROUP LAST PriceListDetail detail
          BY DataPriceListType type, sku(detail), Stock stock, DATETIME dateTimeIn, operation(detail)
          ORDER fromDateTime(detail), detail
          WHERE in(detail, type) AND isPosted(detail) AND in(priceList(detail),stock) AND
                toDateTime(detail) >= dateTimeIn COMPLEX;


//-- Фильтр
filterPriceListOperation  = DATA LOCAL Operation ();
nameFilterPriceListOperation 'Операция' = name(filterPriceListOperation()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterOperation (PriceList i) = operation(i) == filterPriceListOperation() OR (i IS PriceList AND NOT filterPriceListOperation());   

EXTEND FORM priceLists
    PROPERTIES() nameFilterPriceListOperation
    
    FILTERS filterOperation(p)
;
DESIGN priceLists {
    topFilters {
        MOVE PROPERTY(nameFilterPriceListOperation()) BEFORE PROPERTY(nameFilterPriceListCompany());
    }
}

NAVIGATOR {
    priceListMasterData {
        ADD operations;
    }
}

@defineOperationProperty(allowRepeatSku, 'Разрешить повтор SKU', showContainer);

CONSTRAINT NOT allowRepeatSku(operation(priceList(PriceListDetail d1))) AND SETCHANGED (sku(d1)) AND sku(d1) == sku(PriceListDetail d2) AND priceList(d1) == priceList(d2) AND NOT d1 == d2
    MESSAGE 'SKU может быть включен в прайс только один раз';
  