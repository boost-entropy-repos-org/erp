MODULE PriceListOperation;

REQUIRE PriceList;

NAMESPACE PriceList;

@defineOperation('(прайс)');
@defineOperationRole();
@extendFormFilterRole(o, dialogOperations);
//@extendFormFilterRole(o, operations);     //-- пока не нужен

TABLE priceListTypeOperation(PriceListType, Operation);

changeDataPriceListTypeOperation 'Изменять цены' = DATA BOOLEAN (DataPriceListType, Operation);
showPriceListTypeOperation 'Показывать цены' = DATA BOOLEAN (PriceListType, Operation);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);
TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);
@defineOperationStock(, st, 'Склады');
@defineOperationLegalEntity( ,legalEntity, l, 'Организации');

EXTEND FORM operation
    FILTERS countCompanyStockStockGroup(stg),
            isCompanyStock(st)
;

dataLegalEntityOperation = DATA LegalEntity (Operation);

nameDefaultLegalEntityOperation 'Организация по умолчанию' (operation) = nameLegalEntity(dataLegalEntityOperation(operation));
isDefaultLegalEntityOperation 'Организация по умолчанию' (legalEntity, operation) =
    dataLegalEntityOperation(operation) == legalEntity;

CONSTRAINT dataLegalEntityOperation(operation) AND NOT inLegalEntityOperation(dataLegalEntityOperation(operation), operation)
    CHECKED BY dataLegalEntityOperation MESSAGE 'Организация по умолчанию должна быть в списке отмечанных организаций';

@defineOperationCurrency();
@defineOperationGroupType();
userDefaultCurrencyOperation = DATA Currency (Operation);
//userDefaultCurrencyOperation(operation) => inCurrencyOperation(userDefaultCurrencyOperation(operation), operation) RESOLVE FALSE;
calcDefaultCurrencyOperation(operation) =
    GROUP MAX currency IF inCurrencyOperation(currency, operation)
    BY operation PERSISTENT;
defaultCurrencyOperation(operation) = OVERRIDE calcDefaultCurrencyOperation(operation),
                                               userDefaultCurrencyOperation(operation) PERSISTENT;
nameDefaultCurrencyOperation 'Валюта по умолчанию' (operation) = nameCurrency(defaultCurrencyOperation(operation));
isDefaultCurrencyOperation 'Валюта по умолчанию' (currency, operation) =
    defaultCurrencyOperation(operation) == currency;

CONSTRAINT userDefaultCurrencyOperation(operation) AND NOT inCurrencyOperation(userDefaultCurrencyOperation(operation), operation)
    CHECKED BY userDefaultCurrencyOperation MESSAGE 'Валюта по умолчанию должны быть в списке отмечанных валют';

//Определение операции для прайсов
@defineDocumentOperationContainer(priceList, p);

inUserPriceListDataPriceListType(priceList, dataPriceListType) <- changeDataPriceListTypeOperation(dataPriceListType, operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));

showUserPriceListPriceListType(priceList, priceListType) <- showPriceListTypeOperation(priceListType, operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));

companyUserPriceList(priceList) <- dataLegalEntityOperation(operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));

currencyUserPriceList(priceList) <- defaultCurrencyOperation(operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));

copyOperationPriceList = ACTION (priceList, userPriceList){
    ASSIGN operationUserPriceList(userPriceList) <- operationUserPriceList(priceList);
}
copyAbstractDataPriceList(priceList, userPriceList) +=copyOperationPriceList(priceList, userPriceList);

CONSTRAINT operationUserPriceList(priceList) AND NOT inLegalEntityOperation(companyUserPriceList(priceList), operationUserPriceList(priceList))
    CHECKED BY companyUserPriceList MESSAGE 'Компания прайса должна соответствовать ограничениям операции';

groupTypeUserPriceList(priceList) <- IF operationUserPriceList(priceList) THEN groupTypeOperation(operationUserPriceList(priceList))
                                        ELSE SystemGroupType.skuGroupType
    WHEN CHANGED(operationUserPriceList(priceList)) OR
         SET(priceList IS UserPriceList);

allStocksUserPriceList(priceList) <- allStocksOperation(operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));
dataInUserPriceListStockGroup(priceList, stockGroup) <- dataInStockGroupOperation(stockGroup, operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));
dataInUserPriceListStock(priceList, stock) <- dataInStockOperation(stock, operationUserPriceList(priceList))
    WHEN CHANGED(operationUserPriceList(priceList));

CONSTRAINT operationUserPriceList(priceList) AND NOT inStockOperation(stock, operationUserPriceList(priceList)) AND inPriceListStock(priceList, stock)
    CHECKED BY inPriceListStock MESSAGE 'Склады прайса должна соответствовать ограничениям операции';

EXTEND FORM operation
    OBJECTS pt = PriceListType
    PROPERTIES(pt, o) changeDataPriceListTypeOperation TODRAW pt FORCE GRID, showPriceListTypeOperation
    PROPERTIES(pt) READONLY namePriceListType, nameCurrencyPriceListType, objectClassName
    FILTERGROUP filters
        FILTER 'Показывать отмеченные' 'F9' changeDataPriceListTypeOperation(pt, o)
    PROPERTIES(l, o) isDefaultLegalEntityOperation AFTER inLegalEntityOperation(l,o)
    PROPERTIES(c, o) isDefaultCurrencyOperation AFTER inCurrencyOperation(c,o)
    PROPERTIES(o) nameDefaultLegalEntityOperation, nameDefaultCurrencyOperation
    FILTERS isCompanyStock(st)
;

EXTEND DESIGN operation {
    headContainer {
        NEW defaultContainer{
            type = CONTAINERH;
            caption = 'Параметры по умолчанию';
            ADD PROPERTY(nameDefaultLegalEntityOperation(o));
            ADD PROPERTY(nameDefaultCurrencyOperation(o));
        }
    }
    tabContainer {
        ADD pt.box BEFORE legalEntityContainer;
    }
}

//-- Фильтр
filterPriceListOperation  = DATA SESSION Operation ();
nameFilterPriceListOperation 'Операция' = nameOperation(filterPriceListOperation()) MINCHARWIDTH 15 PREFCHARWIDTH 20;          
filterOperationPriceList (i) = operationPriceList(i) == filterPriceListOperation() OR (i IS PriceList AND NOT filterPriceListOperation());   

EXTEND FORM priceLists
    PROPERTIES() nameFilterPriceListOperation
    
    FILTERS filterOperationPriceList(p)
;
EXTEND DESIGN priceLists {
    topFilters {
        ADD PROPERTY(nameFilterPriceListOperation()) BEFORE PROPERTY(nameFilterPriceListCompany());
    }
}

NAVIGATOR {
    priceListMasterData {
        ADD operations;
    }
}