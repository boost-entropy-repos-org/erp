MODULE PriceListContract;

REQUIRE PriceListOperation, StockContract;

NAMESPACE PriceList;

@defineDocumentAbstractContract (PriceList, contractSku, ContractSku);

contractSkuUserPriceList = DATA ContractSku (UserPriceList);
seriesNumberContractSkuUserPriceList 'Номер договора' (o) = seriesNumberContract(contractSkuUserPriceList(o)) IN documentPrm;
dateFromContractSkuUserPriceList 'Дата договора' (o) = dateFromContract(contractSkuUserPriceList(o)) IN documentPrm;

descriptionContractSkuUserPriceList 'Описание договора' (o)= CONCAT ' ', seriesNumberContractSkuUserPriceList(o), ' от ' + dateFromContractSkuUserPriceList(o);

isCommissionUserPriceList 'Продажа на комиссию' = DATA BOOLEAN (UserPriceList) IN documentPrm;

contractSkuPriceList(o) += contractSkuUserPriceList(o);
isCommissionPriceList(o) += isCommissionUserPriceList(o);

contractSkuPriceListDetail (d) = contractSkuPriceList(priceListPriceListDetail(d));
seriesNumberContractSkuPriceListDetail 'Номер договора' (d) = seriesNumberContract(contractSkuPriceListDetail (d));
contractSkuUserPriceListDetail (d) = contractSkuPriceList(userPriceListUserPriceListDetail(d));
seriesNumberContractSkuUserPriceListDetail 'Номер договора' (d) = seriesNumberContract(contractSkuUserPriceListDetail (d));

isCommissionUserPriceList(o) <- typeContractSku(contractSkuUserPriceList(o)) == ContractSkuType.commission
    WHEN CHANGED(contractSkuUserPriceList(o));


WHEN SESSION (CHANGED(companyUserPriceList(o)) OR CHANGED(companyStockUserPriceList(o)) OR CHANGED(fromDateUserPriceList(o))) AND NOT CHANGED(contractSkuUserPriceList(o)) DO {
            
    contractSkuUserPriceList(o) <- defaultContractSkuSupplierStockDate(companyUserPriceList(o), companyStockUserPriceList(o), fromDateUserPriceList(o))
                                    IF countContractSkuSupplierStockDate(companyUserPriceList(o), companyStockUserPriceList(o), fromDateUserPriceList(o)) == 1;

}

dateFromConstraintContractUserPriceList 'Дата начала контроля сроков договора прайс' = DATA DATE ();  

EXTEND FORM options 
    PROPERTIES dateFromConstraintContractUserPriceList()    
;
    
DESIGN options {
    contract {
        MOVE PROPERTY(dateFromConstraintContractUserPriceList());
    }
}   
   
CONSTRAINT contractSkuUserPriceList(o) 
    AND NOT (dateFromContract(contractSkuUserPriceList(o)) <= fromDateUserPriceList(o) AND NOT (dateToContract(contractSkuUserPriceList(o)) < fromDateUserPriceList(o)))
    AND NOT (dateFromConstraintContractUserPriceList() > fromDateUserPriceList(o))
           CHECKED BY contractSkuUserPriceList
           MESSAGE 'Договор просрочен или еще не действует';   

CONSTRAINT contractSkuUserPriceList(o) AND NOT companyUserPriceList(o) == partyAContract(contractSkuUserPriceList(o))
    CHECKED BY contractSkuUserPriceList MESSAGE 'Организация (поставщик) договора прайса не соответствует компании прайса';

CONSTRAINT contractSkuUserPriceList(o) AND NOT isSellerLegalEntity(partyAContract(contractSkuUserPriceList(o)))
    CHECKED BY contractSkuUserPriceList MESSAGE 'Организация (поставщик) договора прайса не является поставщиком или компанией';

CONSTRAINT contractSkuUserPriceList(o) AND NOT isBuyerLegalEntity(partyBContract(contractSkuUserPriceList(o)))
    CHECKED BY contractSkuUserPriceList MESSAGE 'Организация (покупатель) договора прайса не является покупателем или компанией';
               
CONSTRAINT contractSkuUserPriceList(o) AND countSuppliersStockContractSku(contractSkuUserPriceList(o)) AND NOT inSupplierStockContractSku(companyStockUserPriceList(o),contractSkuUserPriceList(o))
    CHECKED BY contractSkuUserPriceList MESSAGE 'Для прайса выбран склад организации, который не включен в договор';


EXTEND FORM userPriceList
    PROPERTIES (p) seriesNumberContractSkuUserPriceList, isCommissionUserPriceList
;
DESIGN userPriceList {
    p.documentPrm{ 
        MOVE PROPERTY (seriesNumberContractSkuUserPriceList(p)) AFTER PROPERTY(nameCompanyStockUserPriceList(p));
        MOVE PROPERTY (isCommissionUserPriceList(p)) AFTER PROPERTY(seriesNumberContractSkuUserPriceList(p));
    }
}

EXTEND FORM priceLists
    PROPERTIES (p) READONLY seriesNumberContractSkuPriceList AFTER nameCompanyStockPriceList(p)
;

@defineOperationProperty(isContract, 'Должен быть задан договор', showContainer);

CONSTRAINT isContractOperation(operationPriceList(p))AND NOT contractSkuPriceList(p)
    MESSAGE 'Для прайса должен быть задан договор';