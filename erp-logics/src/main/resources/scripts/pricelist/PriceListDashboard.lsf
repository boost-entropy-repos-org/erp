MODULE PriceListDashboard;

REQUIRE PriceList,
        ImportUserPriceList,
        PriceListForm,
        Dashboard;

FORM priceListDashboard 'Управление ценами'
    OBJECTS dt = DATETIME PANEL
    PROPERTIES(dt) objValue = VALUE

    OBJECTS pt = DataPriceListType PANEL
    PROPERTIES(pt) SELECTOR name[PriceListType]
;
@extendFormEditable(priceListDashboard);

defaultPriceListType = DATA DataPriceListType();
nameDefaultPriceListType 'Вид цены для управления ценами по умолчанию' = name[PriceListType](defaultPriceListType());
EXTEND FORM options
    PROPERTIES() nameDefaultPriceListType
;
DESIGN options {
    priceLists {
        MOVE PROPERTY(nameDefaultPriceListType());
    }
}

seekDefaultPriceListType = { SEEK priceListDashboard.pt = defaultPriceListType(); }
EXTEND FORM priceListDashboard
    EVENTS ON INIT seekDefaultPriceListType()
;

DESIGN priceListDashboard {
    NEW params {
        type = CONTAINERH;
        MOVE dt.box { 
            PROPERTY (objValue) { caption = 'Дата/время';}
        }
        MOVE pt.box {
            caption = 'Вид цены';
        }
    }
    NEW detail {
        fill = 1;
        type = TABBED;
    }
    MOVE functions.box;
}

NAVIGATOR {
    dashboardNavigator {
        NEW priceListDashboardNavigator 'Цены' {
            ADD priceListDashboard;
            ADD currentPrices;
        }    
    }
}

in 'Отм.' = DATA LOCAL BOOLEAN (Sku);

// ---------------------------- По организациям ----------------------- //
// c
editActiveLedgerA'Редактировать' (LedgerPriceListType type, Sku sku, LegalEntity company, DATETIME dateTime) = { edit(activeLedgerA(type, sku, company, dateTime)); } IMAGE 'edit.png';                                            

// workaround, что объект не может быть null
currentLegalEntity 'Организация' = DATA LOCAL NESTED LegalEntity ();
nameCurrentLegalEntity 'Организация' = name(currentLegalEntity());

EXTEND FORM priceListDashboard
    OBJECTS o = PriceList.Operation PANEL
    PROPERTIES(o) SELECTOR name
        
    PROPERTIES() nameCurrentLegalEntity
    
    OBJECTS c = LegalEntity PANEL
//    PROPERTIES(c) nameLegalEntity SELECTOR
    FILTERS c == currentLegalEntity()

    TREE cskg cskg = SkuGroup PARENT parent
    PROPERTIES READONLY order(cskg), cskgName = name(cskg)
    ORDER BY order(cskg), cskgName
    FILTERGROUP inactive FILTER 'Активные' active(cskg) 'F5' DEFAULT

    OBJECTS csk = Sku
    PROPERTIES(csk)          in
    PROPERTIES(csk) READONLY name, id, idBarcode
    ORDER BY name(csk)
    FILTERS isParent(cskg, csk)

    PROPERTIES READONLY cPrice = activePriceA(pt, csk, c, dt) // последний прайс, в котором есть цена
    PROPERTIES READONLY activeDescriptionA(pt, csk, c, dt) ON SHORTCUT editActiveLedgerA(pt, csk, c, dt)
    PROPERTIES editActiveLedgerA(pt, csk, c, dt) TOOLBAR 
    // на больших объемах возможно будет тормозить
    FILTERS countStockA(pt, csk, c, dt) // фильтруем все товары, которые входят в ассортимент хотя бы одного склада

    OBJECTS cst = Stock
    PROPERTIES(cst)          READONLY name
    PROPERTIES(csk, cst, dt) READONLY balanceA
    PROPERTIES               READONLY cPriceStock = priceA(pt, csk, cst, c, dt)
    ORDER BY name(cst)
    FILTERS priceA(pt, csk, cst, c, dt)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(cst) 'ctrl F10' DEFAULT 
       
    OBJECTS cpl = PriceListLedger
    PROPERTIES(cpl) READONLY isPosted, fromDateTime, toDateTime, description, 
                             nameCompany, priceListTypes, stocks, 
                             createdTime, createdNameUser, createdHostnameComputer
    PROPERTIES(cpl) edit                         
    PROPERTIES      READONLY price(cpl, pt)
    FILTERS in(cpl, pt),
            sku(cpl) == csk,
            company(cpl) == c
;

DESIGN priceListDashboard {
    params {
        MOVE o.box;    
    }
    detail {
        NEW c {
            caption = 'По организациям';
            type = SPLITV;
            NEW c.skus {
                fill = 2;
                type = SPLITH;
                NEW c.skuFilters {
                    fill = 1;
//                    ADD c.box;
                    MOVE PROPERTY(nameCurrentLegalEntity());
                    MOVE cskg.tree.box {
                        caption = 'Товарные группы';
                    }
                }
                MOVE csk.box {
                    fill = 3;
                    caption = 'Товары';
                }
            }
            NEW c.detail {
                fill = 1;
                type = TABBED;
                NEW c.stocks {
                    caption = 'Склады';
                    type = CONTAINERH;
                    MOVE cst.box {
                        caption = 'Склады';
                    }
                }
                NEW companyActions {
                    caption = 'Действия';
                    NEW companyActionsContainer {
                        type = CONTAINERH;
                    }
                    MOVE cpl.box {
                        caption = 'История';
                    }
                }
            }
        }
    }
}

// Создание прайс-листов

fillCompany(UserPriceList userPriceList, DATETIME dateTime, PriceListType dataPriceListType, LegalEntity company) = {
    fromDate(userPriceList) <- toDate(dateTime);
    fromTime(userPriceList) <- toTime(dateTime);
    company(userPriceList) <- company;
    currency(userPriceList) <- currency[DataPriceListType](dataPriceListType);
    in[UserPriceList,DataPriceListType](userPriceList, dataPriceListType) <- TRUE;
    show(userPriceList, dataPriceListType) <- TRUE;
    FOR in(Sku sku) NEW d = UserPriceListDetail DO {
        sku(d) <- sku;
        userPriceList(d) <- userPriceList;
    }
}

// Добавление в ассортимент
includeDataCompany 'Включить'(DATETIME dateTime, PriceListType dataPriceListType, LegalEntity company, PriceList.Operation operation) = {
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompany(u, dateTime, dataPriceListType, company);
            price[UserPriceListDetail,DataPriceListType](UserPriceListDetail d, dataPriceListType) <-
                activePriceA(dataPriceListType, sku(d), company, dateTime)
                WHERE userPriceList(d) == u;
            operation(u) <- operation;     
            SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

// Изменение цен
modifyDataCompany 'Изменить'(DATETIME dateTime, PriceListType dataPriceListType, LegalEntity company, PriceList.Operation operation) = {
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompany(u, dateTime, dataPriceListType, company);
            price[UserPriceListDetail,DataPriceListType](UserPriceListDetail d, dataPriceListType) <-
                activePriceA(dataPriceListType, sku(d), company, dateTime)
                WHERE userPriceList(d) == u;
            FOR [= GROUP SUM 1 IF in(Sku sku) AND priceA(LedgerPriceListType t, sku, Stock st, LegalEntity c, DATETIME d) BY t, st, c, d] (dataPriceListType, Stock stock, company, dateTime) DO {
                dataIn(u, stock) <- TRUE;
            }
            operation(u) <- operation;  
            SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

// Исключение из ассортимента
excludeDataCompany 'Исключить'(DATETIME dateTime, PriceListType dataPriceListType, LegalEntity company, PriceList.Operation operation) = {
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompany(u, dateTime, dataPriceListType, company);
            FOR [= GROUP SUM 1 IF in(Sku sku) AND priceA(LedgerPriceListType t, sku, Stock st, LegalEntity c, DATETIME d) BY t, st, c, d] (dataPriceListType, Stock stock, company, dateTime) DO {
                dataIn(u, stock) <- TRUE;
            }
            operation(u) <- operation;  
            SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES TODRAW csk  includeDataCompany(dt, pt, c, o),
                                      modifyDataCompany(dt, pt, c, o),
                                      excludeDataCompany(dt, pt, c, o)
;

DESIGN priceListDashboard {
    companyActionsContainer {
        NEW primaryCompanyActions {
            type = CONTAINERH;
            caption = 'Согласованные цены';
            MOVE PROPERTY(includeDataCompany(dt,pt,c,o));
            MOVE PROPERTY(modifyDataCompany(dt,pt,c,o));
            MOVE PROPERTY(excludeDataCompany(dt,pt,c,o));
        }
    }
}

// ---------------------------- По складам ---------------------------- //
// s
ledgerA (type, sku, stock, dateTime) =
    GROUP LAST PriceListLedger ledger
          BY LedgerPriceListType type, sku(ledger), Stock stock, DATETIME dateTimeIn
          ORDER fromDateTime(ledger), ledger
          WHERE active(ledger, type, stock) AND
                fromDateTime(ledger) <= dateTimeIn AND NOT toDateTime(ledger) < dateTimeIn COMPLEX;
editLedgerA 'Редактировать' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = { edit(ledgerA (type, sku, stock, dateTime)); } IMAGE 'edit.png';                

stockFilter (Stock stock, PriceList.Operation operation) = (stock IS Stock AND showNotCompanyStocks(operation)) OR isCompany(stock);

EXTEND FORM priceListDashboard
    OBJECTS s = Stock PANEL
    PROPERTIES(s) name SELECTOR
    FILTERS stockFilter(s, o)

    TREE sskg sskg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sskg), sskgName = name(sskg)
    ORDER BY order(sskg), sskgName
    FILTERGROUP inactive2 FILTER 'Активные' active(sskg) 'F5' DEFAULT

    OBJECTS ssk = Sku
    PROPERTIES(ssk)          in
    PROPERTIES(ssk) READONLY name, idBarcode
    PROPERTIES      READONLY balanceA(ssk, s, dt)
    ORDER BY name(ssk)
    FILTERS isParent(sskg, ssk)

    PROPERTIES(pt, ssk, s, dt) READONLY sPrice = priceA,
                                        nameCompanyA
    PROPERTIES(pt, ssk, s, dt) READONLY descriptionA ON SHORTCUT editLedgerA(pt, ssk, s, dt) 
    PROPERTIES editLedgerA(pt, ssk, s, dt) TOOLBAR
    FILTERS priceA(pt, ssk, s, dt)

    OBJECTS sst = Stock
    PROPERTIES(sst)          READONLY name
    PROPERTIES(ssk, sst, dt) READONLY balanceA
    PROPERTIES(pt, ssk, sst, dt) READONLY sPriceStock = priceA,
                                          nameCompanyA,
                                          descriptionA
    FILTERGROUP inactiveStock FILTER 'Активный' active(sst) 'ctrl F10' DEFAULT    
    ORDER BY name(cst)
    FILTERS priceA(pt, ssk, sst, dt)

    OBJECTS spl = PriceListLedger
    PROPERTIES(spl) READONLY isPosted, fromDateTime, toDateTime, description, 
                             nameCompany, priceListTypes, stocks, 
                             createdTime, createdNameUser, createdHostnameComputer
    PROPERTIES(spl) edit                     
                             
    PROPERTIES      READONLY price(spl, pt)
    FILTERS in(spl, pt),
            sku(spl) == ssk,
            in(spl, s)
;

DESIGN priceListDashboard {
    detail {
        NEW s {
            caption = 'По складам';
            type = SPLITV;
            NEW s.skus {
                fill = 2;
                type = SPLITH;
                NEW s.skuFilters {
                    fill = 1;
                    type = CONTAINERV;
                    MOVE s.box;
                    MOVE sskg.tree.box {
                        caption = 'Товарные группы';
                    }
                }
                MOVE ssk.box {
                    fill = 3;
                    caption = 'Товары';
                }
            }
            NEW s.detail {
                fill = 1;
                type = TABBED;
                NEW s.stocks {
                    caption = 'Склады';
                    type = CONTAINERH;
                    MOVE sst.box {
                        caption = 'Склады';
                    }
                }
                NEW stockActions {
                    caption = 'Действия';
                    NEW stockActionsContainer {
                        type = CONTAINERH;
                    }
                    MOVE spl.box {
                        caption = 'История';
                    }
                }
            }
        }
    }
}

fillCompanyPriceList(UserPriceList u, LegalEntity company, DATETIME dateTime, PriceListType dataPriceListType, Stock stock) = {
    fromDate(u) <- toDate(dateTime);
    fromTime(u) <- toTime(dateTime);
    company(u) <- company;
    currency(u) <- currency[DataPriceListType](dataPriceListType);
    in[UserPriceList,DataPriceListType](u, dataPriceListType) <- TRUE;
    show(u, dataPriceListType) <- TRUE;
    dataIn(u, stock) <- TRUE;
    FOR in(Sku sku) AND companyA(dataPriceListType, sku, stock, dateTime) == company
        NEW d = UserPriceListDetail DO {
        sku(d) <- sku;
        userPriceList(d) <- u;
    }
}

createCompanyPriceList(LegalEntity company, DATETIME dateTime, PriceListType dataPriceListType, Stock stock) = {
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompanyPriceList(u, company, dateTime, dataPriceListType, stock);
            SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

createWPricesCompanyPriceList(LegalEntity company, DATETIME dateTime, PriceListType dataPriceListType, Stock stock) = {
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompanyPriceList(u, company, dateTime, dataPriceListType, stock);
            price[UserPriceListDetail,DataPriceListType](UserPriceListDetail d, dataPriceListType) <-
                priceA[LedgerPriceListType,Sku,Stock,DATETIME](dataPriceListType, sku(d), stock, dateTime)
                WHERE userPriceList(d) == u;
            SHOW userPriceList OBJECTS p = u MANAGESESSION DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

// Изменение цен
modifyData 'Изменить'(DATETIME dateTime, LedgerPriceListType dataPriceListType, Stock stock) = {
    FOR [= GROUP SUM 1 IF in(Sku s) BY companyA(LedgerPriceListType t, s, Stock st, DATETIME d), t, st, d] (LegalEntity company, dataPriceListType, stock, dateTime) DO {
        createWPricesCompanyPriceList(company, dateTime, dataPriceListType, stock);
    }
}

// Исключение из ассортимента
excludeData 'Исключить'(DATETIME dateTime, LedgerPriceListType dataPriceListType, Stock stock) = {
    FOR [= GROUP SUM 1 IF in(Sku s) BY companyA(LedgerPriceListType t, s, Stock st, DATETIME d), t, st, d] (LegalEntity company, dataPriceListType, stock, dateTime) DO {
        createCompanyPriceList(company, dateTime, dataPriceListType, stock);
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES TODRAW ssk  modifyData(dt, pt, s),
                                      excludeData(dt, pt, s)
;

DESIGN priceListDashboard {
    stockActionsContainer {
        NEW primaryStockActions {
            type = CONTAINERH;
            caption = 'Согласованные цены';
            MOVE PROPERTY(modifyData(dt,pt,s));
            MOVE PROPERTY(excludeData(dt,pt,s));
        }
    }
}

// ----------------------------------- Список прайсов ---------------------------- //
// p

addUserPriceList 'Добавить'(LegalEntity legalEntity, PriceListType type, DATETIME dateTime) = {
	NEWSESSION {
	    NEW p = UserPriceList {
	        company(p) <- legalEntity;
	        fromDate(p) <- toDate(dateTime);
	        fromTime(p) <- toTime(dateTime);
	        in[UserPriceList,DataPriceListType](p, type) <- TRUE;
	        show[PriceList,PriceListType](p, type) <- TRUE;
	        overAdd(p); 
	        SHOW userPriceList OBJECTS p=p MANAGESESSION DOCKED NOCANCEL;
	    }
	}
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

EXTEND FORM priceListDashboard
    PROPERTIES() pCurrentLegalEntity = nameCurrentLegalEntity

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLYIF isReadonly() BACKGROUND background(p) isPosted, number, series, date, time,
                           fromDate, fromTime, toDate, toTime,
                           nameCurrency, nameCompany, priceListTypes, stocks,
                           note
    PROPERTIES(p) NEWSESSION EDIT, DELETE , update TOOLBAR
    ORDER BY fromDate(p), fromTime(p)
    FILTERS in(p, pt),
            company(p) == c
    PROPERTIES(c, pt, dt) addUserPriceList TODRAW p       
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(p,dt) 'F11'            
        FILTER 'Активные' isActive(p,dt) OR (fromDateTime[PriceList](p) > dt) 'F10' DEFAULT   
            
;
DESIGN priceListDashboard {
    detail {
        NEW p {
            caption = 'Прайсы';
            type = CONTAINERV;
            NEW rowContainer{
                type = CONTAINERH;
                MOVE PROPERTY(pCurrentLegalEntity);
            }
            MOVE p.box;
        }
    }
}

// ------------------- Импорт прайсов --------------------------- //
importTime = ABSTRACT BOOLEAN (UserPriceList);
importUserPriceList 'Импортировать'(LegalEntity c, ImportUserPriceListType t, DATETIME dt) = {
	NEWSESSION {
	    NEW p = UserPriceList {
	        importUserPriceListType(p) <- t;
	        company(p) <- c;
	        fromDate(p) <- toDate(dt);
	        IF NOT importTime(p) THEN {
	            fromTime(p) <- toTime(dt);
	        } ELSE {
	            fromTime(p) <- 00:00;
	        }
	        
	        importAction(p);
	        SHOW userPriceList OBJECTS p = p MANAGESESSION DOCKED;
	    }
	}
} TOOLBAR;

EXTEND FORM priceListDashboard
    OBJECTS t = ImportUserPriceListType PANEL
    PROPERTIES(t) name SELECTOR
    PROPERTIES(c, t, dt) importUserPriceList TODRAW p
    FILTERS company(t)== c OR (c IS LegalEntity AND NOT company(t))    
;

DESIGN priceListDashboard{
    rowContainer{
        MOVE PROPERTY(name(t));
    }
}
