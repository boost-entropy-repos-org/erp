MODULE PriceListDashboard;

REQUIRE PriceList,
        ImportUserPriceList,
        Dashboard;

FORM priceListDashboard 'Управление ценами'
    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) objValue = OBJVALUE

    OBJECTS pt = DataPriceListType FIXED PANEL
    PROPERTIES(pt) SELECTOR namePriceListType
;

defaultPriceListType = DATA DataPriceListType();
nameDefaultPriceListType 'Вид цены для управления ценами по умолчанию' = namePriceListType(defaultPriceListType());
EXTEND FORM options
    PROPERTIES() nameDefaultPriceListType
;
DESIGN options {
    commons {
        MOVE PROPERTY(nameDefaultPriceListType());
    }
}

seekDefaultPriceListType = ACTION SEEK priceListDashboard.pt defaultPriceListType();
EXTEND FORM priceListDashboard
    EVENTS ON INIT seekDefaultPriceListType()
;

DESIGN priceListDashboard {
    NEW params {
        type = CONTAINERH;
        MOVE dt.box { 
            PROPERTY (objValue) { caption = 'Дата/время';}
        }
        MOVE pt.box {
            caption = 'Вид цены';
        }
    }
    NEW detail {
        fill = 1;
        type = TABBED;
    }
    MOVE functions.box;
}

NAVIGATOR {
    dashboardNavigator {
        NEW priceListDashboardNavigator 'Цены' {
            ADD priceListDashboard;
            ADD currentPrices;
        }    
    }
}

inSku 'Отм.' = DATA LOCAL BOOLEAN (Sku);

// ---------------------------- По организациям ----------------------- //
// c
editActiveLedgerALedgerPriceListTypeSkuCompanyDateTime'Редактировать' (type, sku, company, dateTime) = ACTION editPriceListLedger(activeLedgerALedgerPriceListTypeSkuCompanyDateTime(type, sku, company, dateTime)) IMAGE 'edit.png';                                            

// workaround, что объект не может быть null
currentLegalEntity 'Организация' = DATA LOCAL LegalEntity ();
nameCurrentLegalEntity 'Организация' = nameLegalEntity(currentLegalEntity());

EXTEND FORM priceListDashboard
    OBJECTS o = PriceList.Operation FIXED PANEL
    PROPERTIES(o) SELECTOR PriceList.nameOperation
        
    PROPERTIES() nameCurrentLegalEntity
    
    OBJECTS c = LegalEntity FIXED PANEL
//    PROPERTIES(c) nameLegalEntity SELECTOR
    FILTERS c == currentLegalEntity()

    TREE cskg cskg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(cskg), cskgName = nameSkuGroup(cskg)
    ORDER BY orderSkuGroup(cskg), cskgName
    FILTERGROUP inactive FILTER 'Активные' activeSkuGroup(cskg) 'F5' DEFAULT

    OBJECTS csk = Sku
    PROPERTIES(csk)          inSku
    PROPERTIES(csk) READONLY nameSku, idSku, idBarcodeSku
    ORDER BY nameSku(csk)
    FILTERS isParentSkuGroupSku(cskg, csk)

    PROPERTIES READONLY cPrice = activePriceALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt) // последний прайс, в котором есть цена
    PROPERTIES READONLY activeDescriptionALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt) ON SHORTCUT editActiveLedgerALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt)
    PROPERTIES editActiveLedgerALedgerPriceListTypeSkuCompanyDateTime(pt, csk, c, dt) TOOLBAR 
    // на больших объемах возможно будет тормозить
    FILTERS countStockAPriceListTypeSkuCompanyDateTime(pt, csk, c, dt) // фильтруем все товары, которые входят в ассортимент хотя бы одного склада

    OBJECTS cst = Stock
    PROPERTIES(cst)          READONLY nameStock
    PROPERTIES(csk, cst, dt) READONLY balanceASkuStockDateTime
    PROPERTIES               READONLY cPriceStock = priceALedgerPriceListTypeSkuStockCompanyDateTime(pt, csk, cst, c, dt)
    ORDER BY nameStock(cst)
    FILTERS priceALedgerPriceListTypeSkuStockCompanyDateTime(pt, csk, cst, c, dt)
    FILTERGROUP inactiveStock2 FILTER 'Активный' activeStock(cst) 'ctrl F10' DEFAULT 
       
    OBJECTS cpl = PriceListLedger
    PROPERTIES(cpl) READONLY isPostedPriceListLedger, fromDateTimePriceListLedger, toDateTimePriceListLedger, descriptionPriceListLedger, 
                             nameCompanyPriceListLedger, priceListTypesPriceListLedger, stocksPriceListLedger, 
                             createdTimePriceListLedger, createdNameUserPriceListLedger, createdHostnameComputerPriceListLedger
    PROPERTIES(cpl) editPriceListLedger                         
    PROPERTIES      READONLY pricePriceListLedgerLedgerPriceListType(cpl, pt)
    FILTERS inPriceListLedgerLedgerPriceListType(cpl, pt),
            skuPriceListLedger(cpl) == csk,
            companyPriceListLedger(cpl) == c
;

DESIGN priceListDashboard {
    params {
        MOVE o.box;    
    }
    detail {
        NEW c {
            caption = 'По организациям';
            type = SPLITV;
            NEW c.skus {
                fill = 2;
                type = SPLITH;
                NEW c.skuFilters {
                    fill = 1;
//                    ADD c.box;
                    MOVE PROPERTY(nameCurrentLegalEntity());
                    MOVE cskg.tree.box {
                        caption = 'Товарные группы';
                    }
                }
                MOVE csk.box {
                    fill = 3;
                    caption = 'Товары';
                }
            }
            NEW c.detail {
                fill = 1;
                type = TABBED;
                NEW c.stocks {
                    caption = 'Склады';
                    type = CONTAINERH;
                    MOVE cst.box {
                        caption = 'Склады';
                    }
                }
                NEW companyActions {
                    caption = 'Действия';
                    NEW companyActionsContainer {
                        type = CONTAINERH;
                    }
                    MOVE cpl.box {
                        caption = 'История';
                    }
                }
            }
        }
    }
}

// Создание прайс-листов

fillCompanyPriceList = ACTION (userPriceList, dateTime, dataPriceListType, company) {
    fromDateUserPriceList(userPriceList) <- toDate(dateTime);
    fromTimeUserPriceList(userPriceList) <- toTime(dateTime);
    companyUserPriceList(userPriceList) <- company;
    currencyUserPriceList(userPriceList) <- currencyDataPriceListType(dataPriceListType);
    inUserPriceListDataPriceListType(userPriceList, dataPriceListType) <- TRUE;
    showUserPriceListPriceListType(userPriceList, dataPriceListType) <- TRUE;
    FOR inSku(sku) ADDOBJ d = UserPriceListDetail DO {
        skuUserPriceListDetail(d) <- sku;
        userPriceListUserPriceListDetail(d) <- userPriceList;
    }
}

// Добавление в ассортимент
includeDateTimeDataPriceListTypeCompany 'Включить' = ACTION (dateTime, dataPriceListType, company, operation) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyPriceList(u, dateTime, dataPriceListType, company);
            priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
                activePriceALedgerPriceListTypeSkuCompanyDateTime(dataPriceListType, skuUserPriceListDetail(d), company, dateTime)
                WHERE userPriceListUserPriceListDetail(d) == u;
            operationUserPriceList(u) <- operation;     
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

// Изменение цен
modifyDateTimeDataPriceListTypeCompany 'Изменить' = ACTION (dateTime, dataPriceListType, company, operation) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyPriceList(u, dateTime, dataPriceListType, company);
            priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
                activePriceALedgerPriceListTypeSkuCompanyDateTime(dataPriceListType, skuUserPriceListDetail(d), company, dateTime)
                WHERE userPriceListUserPriceListDetail(d) == u;
            FOR [= GROUP SUM 1 IF inSku(sku) AND priceALedgerPriceListTypeSkuStockCompanyDateTime(t, sku, st, c, d) BY t, st, c, d] (dataPriceListType, stock, company, dateTime) DO {
                dataInUserPriceListStock(u, stock) <- TRUE;
            }
            operationUserPriceList(u) <- operation;  
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

// Исключение из ассортимента
excludeDateTimeDataPriceListTypeCompany 'Исключить' = ACTION (dateTime, dataPriceListType, company, operation) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyPriceList(u, dateTime, dataPriceListType, company);
            FOR [= GROUP SUM 1 IF inSku(sku) AND priceALedgerPriceListTypeSkuStockCompanyDateTime(t, sku, st, c, d) BY t, st, c, d] (dataPriceListType, stock, company, dateTime) DO {
                dataInUserPriceListStock(u, stock) <- TRUE;
            }
            operationUserPriceList(u) <- operation;  
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES TODRAW csk FORCE PANEL includeDateTimeDataPriceListTypeCompany(dt, pt, c, o),
                                      modifyDateTimeDataPriceListTypeCompany(dt, pt, c, o),
                                      excludeDateTimeDataPriceListTypeCompany(dt, pt, c, o)
;

DESIGN priceListDashboard {
    companyActionsContainer {
        NEW primaryCompanyActions {
            type = CONTAINERH;
            caption = 'Согласованные цены';
            MOVE PROPERTY(includeDateTimeDataPriceListTypeCompany(dt,pt,c,o));
            MOVE PROPERTY(modifyDateTimeDataPriceListTypeCompany(dt,pt,c,o));
            MOVE PROPERTY(excludeDateTimeDataPriceListTypeCompany(dt,pt,c,o));
        }
    }
}

// ---------------------------- По складам ---------------------------- //
// s
ledgerALedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime) =
    GROUP LAST ledger
          BY type, skuPriceListLedger(ledger), stock, dateTimeIn
          ORDER fromDateTimePriceListLedger(ledger), ledger
          WHERE activePriceListLedgerLedgerPriceListTypeStock(ledger, type, stock) AND
                fromDateTimePriceListLedger(ledger) <= dateTimeIn AND NOT toDateTimePriceListLedger(ledger) < dateTimeIn COMPLEX;
editLedgerALedgerPriceListTypeSkuStockDateTime 'Редактировать' (type, sku, stock, dateTime) = ACTION editPriceListLedger(ledgerALedgerPriceListTypeSkuStockDateTime (type, sku, stock, dateTime)) IMAGE 'edit.png';                


EXTEND FORM priceListDashboard
    OBJECTS s = Stock FIXED PANEL
    PROPERTIES(s) nameStock SELECTOR
    FILTERS isCompanyStock(s)

    TREE sskg sskg = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY orderSkuGroup(sskg), sskgName = nameSkuGroup(sskg)
    ORDER BY orderSkuGroup(sskg), sskgName
    FILTERGROUP inactive2 FILTER 'Активные' activeSkuGroup(sskg) 'F5' DEFAULT

    OBJECTS ssk = Sku
    PROPERTIES(ssk)          inSku
    PROPERTIES(ssk) READONLY nameSku, idBarcodeSku
    PROPERTIES      READONLY balanceASkuStockDateTime(ssk, s, dt)
    ORDER BY nameSku(ssk)
    FILTERS isParentSkuGroupSku(sskg, ssk)

    PROPERTIES(pt, ssk, s, dt) READONLY sPrice = priceALedgerPriceListTypeSkuStockDateTime,
                                        nameCompanyALedgerPriceListTypeSkuStockDateTime
    PROPERTIES(pt, ssk, s, dt) READONLY descriptionALedgerPriceListTypeSkuStockDateTime ON SHORTCUT editLedgerALedgerPriceListTypeSkuStockDateTime(pt, ssk, s, dt) 
    PROPERTIES editLedgerALedgerPriceListTypeSkuStockDateTime(pt, ssk, s, dt) TOOLBAR
    FILTERS priceALedgerPriceListTypeSkuStockDateTime(pt, ssk, s, dt)

    OBJECTS sst = Stock
    PROPERTIES(sst)          READONLY nameStock
    PROPERTIES(ssk, sst, dt) READONLY balanceASkuStockDateTime
    PROPERTIES(pt, ssk, sst, dt) READONLY sPriceStock = priceALedgerPriceListTypeSkuStockDateTime,
                                          nameCompanyALedgerPriceListTypeSkuStockDateTime,
                                          descriptionALedgerPriceListTypeSkuStockDateTime
    FILTERGROUP inactiveStock FILTER 'Активный' activeStock(sst) 'ctrl F10' DEFAULT    
    ORDER BY nameStock(cst)
    FILTERS priceALedgerPriceListTypeSkuStockDateTime(pt, ssk, sst, dt)

    OBJECTS spl = PriceListLedger
    PROPERTIES(spl) READONLY isPostedPriceListLedger, fromDateTimePriceListLedger, toDateTimePriceListLedger, descriptionPriceListLedger, 
                             nameCompanyPriceListLedger, priceListTypesPriceListLedger, stocksPriceListLedger, 
                             createdTimePriceListLedger, createdNameUserPriceListLedger, createdHostnameComputerPriceListLedger
    PROPERTIES(spl) editPriceListLedger                     
                             
    PROPERTIES      READONLY pricePriceListLedgerLedgerPriceListType(spl, pt)
    FILTERS inPriceListLedgerLedgerPriceListType(spl, pt),
            skuPriceListLedger(spl) == ssk,
            inPriceListLedgerStock(spl, s)
;

DESIGN priceListDashboard {
    detail {
        NEW s {
            caption = 'По складам';
            type = SPLITV;
            NEW s.skus {
                fill = 2;
                type = SPLITH;
                NEW s.skuFilters {
                    fill = 1;
                    type = CONTAINERV;
                    MOVE s.box;
                    MOVE sskg.tree.box {
                        caption = 'Товарные группы';
                    }
                }
                MOVE ssk.box {
                    fill = 3;
                    caption = 'Товары';
                }
            }
            NEW s.detail {
                fill = 1;
                type = TABBED;
                NEW s.stocks {
                    caption = 'Склады';
                    type = CONTAINERH;
                    MOVE sst.box {
                        caption = 'Склады';
                    }
                }
                NEW stockActions {
                    caption = 'Действия';
                    NEW stockActionsContainer {
                        type = CONTAINERH;
                    }
                    MOVE spl.box {
                        caption = 'История';
                    }
                }
            }
        }
    }
}

fillCompanyStockPriceList = ACTION (u, company, dateTime, dataPriceListType, stock) {
    fromDateUserPriceList(u) <- toDate(dateTime);
    fromTimeUserPriceList(u) <- toTime(dateTime);
    companyUserPriceList(u) <- company;
    currencyUserPriceList(u) <- currencyDataPriceListType(dataPriceListType);
    inUserPriceListDataPriceListType(u, dataPriceListType) <- TRUE;
    showUserPriceListPriceListType(u, dataPriceListType) <- TRUE;
    dataInUserPriceListStock(u, stock) <- TRUE;
    FOR inSku(sku) AND companyALedgerPriceListTypeSkuStockDateTime(dataPriceListType, sku, stock, dateTime) == company
        ADDOBJ d = UserPriceListDetail DO {
        skuUserPriceListDetail(d) <- sku;
        userPriceListUserPriceListDetail(d) <- u;
    }
}

createCompanyStockPriceList = ACTION (company, dateTime, dataPriceListType, stock) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyStockPriceList(u, company, dateTime, dataPriceListType, stock);
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

createWPricesCompanyStockPriceList = ACTION (company, dateTime, dataPriceListType, stock) {
    NEWSESSION NESTED inSku {
        FOR ADDOBJ u = UserPriceList DO {
            fillCompanyStockPriceList(u, company, dateTime, dataPriceListType, stock);
            priceUserPriceListDetailDataPriceListType(d, dataPriceListType) <-
                priceALedgerPriceListTypeSkuStockDateTime(dataPriceListType, skuUserPriceListDetail(d), stock, dateTime)
                WHERE userPriceListUserPriceListDetail(d) == u;
            FORM userPriceList OBJECTS p = u MANAGESESSION DOCKEDMODAL;
            inSku(s) <- NULL;
        }
    }
}

// Изменение цен
modifyDateTimeDataPriceListTypeStock 'Изменить' = ACTION (dateTime, dataPriceListType, stock) {
    FOR [= GROUP SUM 1 IF inSku(s) BY companyALedgerPriceListTypeSkuStockDateTime(t, s, st, d), t, st, d] (company, dataPriceListType, stock, dateTime) DO {
        createWPricesCompanyStockPriceList(company, dateTime, dataPriceListType, stock);
    }
}

// Исключение из ассортимента
excludeDateTimeDataPriceListTypeStock 'Исключить' = ACTION (dateTime, dataPriceListType, stock) {
    FOR [= GROUP SUM 1 IF inSku(s) BY companyALedgerPriceListTypeSkuStockDateTime(t, s, st, d), t, st, d] (company, dataPriceListType, stock, dateTime) DO {
        createCompanyStockPriceList(company, dateTime, dataPriceListType, stock);
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES TODRAW ssk FORCE PANEL modifyDateTimeDataPriceListTypeStock(dt, pt, s),
                                      excludeDateTimeDataPriceListTypeStock(dt, pt, s)
;

DESIGN priceListDashboard {
    stockActionsContainer {
        NEW primaryStockActions {
            type = CONTAINERH;
            caption = 'Согласованные цены';
            MOVE PROPERTY(modifyDateTimeDataPriceListTypeStock(dt,pt,s));
            MOVE PROPERTY(excludeDateTimeDataPriceListTypeStock(dt,pt,s));
        }
    }
}

// ----------------------------------- Список прайсов ---------------------------- //
// p

addUserPriceListLegalEntityPriceListTypeDateTime 'Добавить' = ACTION (legalEntity, type, dateTime) NEWSESSION {
    FOR ADDOBJ p = UserPriceList DO {
        companyUserPriceList(p) <- legalEntity;
        fromDateUserPriceList(p) <- toDate(dateTime);
        fromTimeUserPriceList(p) <- toTime(dateTime);
        inUserPriceListDataPriceListType(p, type) <- TRUE;
        showPriceListPriceListType(p, type) <- TRUE;
        EXEC overAddUserPriceList(p); 
        FORM userPriceList OBJECTS p=p MANAGESESSION DOCKEDMODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    }
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';

EXTEND FORM priceListDashboard
    PROPERTIES() pCurrentLegalEntity = nameCurrentLegalEntity

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY BACKGROUND backgroundPriceList(p) isPostedUserPriceList, numberUserPriceList, seriesUserPriceList, dateUserPriceList, timeUserPriceList,
                           fromDateUserPriceList, fromTimeUserPriceList, toDateUserPriceList, toTimeUserPriceList,
                           nameCurrencyUserPriceList, nameCompanyUserPriceList, priceListTypesPriceList, stocksPriceList,
                           noteUserPriceList
    PROPERTIES(p) EDITFORM, DELETE FORCE PANEL TOOLBAR, updatePriceList FORCE PANEL TOOLBAR
    ORDER BY fromDateUserPriceList(p), fromTimeUserPriceList(p)
    FILTERS inUserPriceListDataPriceListType(p, pt),
            companyUserPriceList(p) == c
    PROPERTIES(c, pt, dt) addUserPriceListLegalEntityPriceListTypeDateTime FORCE PANEL TODRAW p       
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActivePriceListDateTime(p,dt) 'F11'            
        FILTER 'Активные' isActivePriceListDateTime(p,dt) OR (fromDateTimePriceList(p) > dt) 'F10' DEFAULT   
            
;
DESIGN priceListDashboard {
    detail {
        NEW p {
            caption = 'Прайсы';
            type = CONTAINERV;
            NEW rowContainer{
                type = CONTAINERH;
                MOVE PROPERTY(pCurrentLegalEntity);
            }
            MOVE p.box;
        }
    }
}

// ------------------- Импорт прайсов --------------------------- //
importTimeUserPriceList = ABSTRACT BOOLEAN (UserPriceList);
importUserPriceListLegalEntityPriceListTypeDateTime 'Импортировать' = ACTION (c, t, dt) NEWSESSION {
    FOR ADDOBJ p = UserPriceList DO {
        importUserPriceListTypeUserPriceList(p) <- t;
        companyUserPriceList(p) <- c;
        fromDateUserPriceList(p) <- toDate(dt);
        IF NOT importTimeUserPriceList(p) THEN {
            fromTimeUserPriceList(p) <- toTime(dt);
        } ELSE {
            fromTimeUserPriceList(p) <- 00:00;
        }
        
        importUserPriceListAction(p);
        FORM userPriceList OBJECTS p = p MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;

EXTEND FORM priceListDashboard
    OBJECTS t = ImportUserPriceListType FIXED PANEL
    PROPERTIES(t) nameImportUserPriceListType SELECTOR
    PROPERTIES(c, t, dt) importUserPriceListLegalEntityPriceListTypeDateTime FORCE PANEL TODRAW p
    FILTERS companyImportUserPriceListType(t)== c OR (c IS LegalEntity AND NOT companyImportUserPriceListType(t))    
;

DESIGN priceListDashboard{
    rowContainer{
        MOVE PROPERTY(nameImportUserPriceListType(t));
    }
}
