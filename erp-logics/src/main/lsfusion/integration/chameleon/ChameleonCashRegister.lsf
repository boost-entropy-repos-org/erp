MODULE ChameleonCashRegister;

REQUIRE NativeMachinery, CashRegister, Store, ZReport;

NAMESPACE Chameleon;

id = DATA INTEGER (CashRegister);
cashRegister (INTEGER id) = GROUP AGGR CashRegister cr BY id(cr);

maxIdCashRegister(CashRegister c) = GROUP MAX id(CashRegister cr AS CashRegister) IF c IS CashRegister;

index(CashRegister cr) = PARTITION SUM 1 ORDER cr IF cr IS CashRegister AND NOT id(cr);

WHEN SET(CashRegister cr IS CashRegister) DO id(cr) <- (GROUP MAX id(CashRegister c AS CashRegister)) (+) 1;

onStarted() + {
    APPLY {
        id(CashRegister cr) <- index(cr) (+) maxIdCashRegister(cr) WHERE index(cr);
    };
}

CLASS ChameleonVersion;

chameleonVersion = ABSTRACT CASE ChameleonVersion (GroupMachinery);

isChameleon (CashRegisterModel m) = left(handler(m), 14) = 'lsf.Chameleon.';
isChameleon (GroupCashRegister g) = isChameleon(cashRegisterModel(g));
haveChameleon (DepartmentStore d) = GROUP MAX isChameleon(GroupCashRegister g) IF stock(g) = d;

idTellerSettings 'Ид. настройки ККМ' = DATA INTEGER (DepartmentStore);
idTellerSettings 'Ид. настройки ККМ' (MachineryPriceTransaction t) = OVERRIDE idTellerSettings(stock(groupMachinery(t)) AS DepartmentStore), 0;

EXTEND FORM store PROPERTIES idTellerSettings(d) BEFORE deleteD SHOWIF haveChameleon(d);

trueFalse (BOOLEAN flag) = IF flag THEN 'true' ELSE 'false';
escape (ISTRING s) = ISTRING(replace(s, '\'', '\'\''));

centsString(NUMERIC[16,4] n) = IF n THEN STRING(round(n * 100, 0)) ELSE '0';

name(MachineryPriceTransaction t, Sku s) = escape((GROUP LAST name(t, Barcode b) ORDER t, b IF in(t, b) AND sku(b) = s));
order (Sku s) = PARTITION SUM 1 IF s IS Sku ORDER name(s), s;

currenciesString = ABSTRACT CASE ISTRING (GroupMachinery);
currenciesExchangeString = ABSTRACT CASE ISTRING (GroupMachinery);

taxString = ABSTRACT CASE ISTRING (GroupMachinery);

employeesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

priceLevelString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

chainStoreString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
storeString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
employeesStoreString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

cashRegistersString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

groupsSkuStringHierarchy = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
skusString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
batchesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

uomsString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

pricesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

barcodesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

restsString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

atcString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

returnExchange = DATA LOCAL BOOLEAN (GroupCashRegister);

exchangeChameleon (GroupCashRegister g, STRING q) {
    IF NOT returnExchange(g) AND directory(g) AND isChameleon(g) THEN {
        System.messageCaughtException() <- NULL;
        TRY {
            EXTERNAL SQL directory(g) EXEC q TO exportFile;
        } CATCH {
            IF System.messageCaughtException() != 'java.lang.UnsupportedOperationException' AND System.messageCaughtException() !=  'java.lang.RuntimeException: java.io.IOException' THEN {
                returnExchange(g) <- TRUE;
            }
        }
    } ELSE {
        returnExchange(g) <- TRUE;
    }
}

overSendToChameleon ABSTRACT LIST (MachineryPriceTransaction);

sendToChameleon (MachineryPriceTransaction t){
    NEWSESSION {
        IF isChameleon(groupMachinery(t)) AND notSucceeded(t) AND NOT canceled(t) AND directory(groupMachinery(t)) THEN {
            NEWSESSION { dateTimeProcessing(t) <- currentDateTime(); APPLY; }
            exchangeChameleon(groupMachinery(t),
            CONCAT ';',
                currenciesString(groupMachinery(t)),
                currenciesExchangeString(groupMachinery(t)),
                taxString(groupMachinery(t)),
                employeesString(t),
                priceLevelString(t),
                chainStoreString(t),
                storeString(t),
                employeesStoreString(t),
                cashRegistersString(t),
                groupsSkuStringHierarchy(t),
                skusString(t),
                batchesString(t),
                uomsString(t),
                pricesString(t),
                restsString(t),
                barcodesString(t),
                atcString(t)
                //plusString(t)
            );
            IF returnExchange(groupMachinery(t)) THEN {
                NEW e = MachineryPriceTransactionError {
                    LOCAL p = INTEGER();
                    dateTimeProcessing(t) <- NULL;
                    machineryPriceTransaction(e) <- t;
                    p() <- strpos(System.messageCaughtException(), ':');
                    IF p() != 0 THEN {
                        data(e) <- left(System.messageCaughtException(), p() - 1);
                        System.messageCaughtException() <- substrFrom(System.messageCaughtException(), p() + 1);
                        p() <- strpos(System.messageCaughtException(), 'in SQL');
                        IF p() != 0 THEN {
                            errorTrace(e) <- left(System.messageCaughtException(), p() + 5);
                        } ELSE {
                            errorTrace(e) <- System.messageCaughtException();
                        }
                    } ELSE {
                        data(e) <- System.messageCaughtException();
                        errorTrace(e) <- System.messageCaughtException();
                    }
                    date(e) <- currentDateTime();
                }
            } ELSE {
                succeeded(t) <- TRUE;
                dateTimeSucceeded(t) <- currentDateTime();
                overSendToChameleon(t);
            }
            APPLY;
        }
    }
}

receiptNumber = DATA LOCAL INTEGER (INTEGER);
idCashRegister = DATA LOCAL INTEGER (INTEGER);
idReceipt = DATA LOCAL INTEGER (INTEGER);

receipt (INTEGER cr, INTEGER n) = GROUP MAX id(cashRegister(Receipt r)) = cr IF number(r) = n;
zReport (CashRegister cr, STRING n) = GROUP LAST ZReport z ORDER z IF number(z) = n AND cashRegister(z) = cr;

receipt (ZReport z, INTEGER n) = GROUP LAST Receipt r AS Receipt ORDER r IF zReport(r) = z AND number(r) = n;

receiptNumberString () = GROUP CONCAT STRING(idReceipt(INTEGER i)), ',' IF NOT receipt(idCashRegister(i), receiptNumber(i));

//cashRegister (LONG id) = GROUP LAST CashRegister cr AS CashRegister ORDER cr BY LONG(cr);
employee (LONG id) = GROUP LAST Employee e AS Employee ORDER e BY LONG(e);
sku (LONG id) = GROUP LAST Sku s AS Sku ORDER s BY LONG(s);
batch (LONG id) = GROUP LAST Batch b AS Batch ORDER b BY LONG(b);

receiveFromChameleon(GroupCashRegister g) {
    IF isChameleon(g) THEN {
        exportFile() <- NULL;
        exchangeChameleon(g,'select id_check, id_workplace, id_fcheck from sales.checks where type_payment < 1000');
        IMPORT FROM exportFile() TO idReceipt = id_check, receiptNumber = id_fcheck, idCashRegister = id_workplace;
        NEWSESSION NESTED LOCAL {
            LOCAL localReceiptNumberString = STRING();
            LOCAL number = INTEGER (INTEGER);
            LOCAL idCashRegister = INTEGER (INTEGER);
            LOCAL dateTime = DATETIME (INTEGER);
            LOCAL idCashMan = LONG (INTEGER);
            LOCAL numberZReport = INTEGER (INTEGER);
            LOCAL summ = INTEGER (INTEGER);
            LOCAL quantity = NUMERIC[10,3] (INTEGER);
            LOCAL discount = INTEGER (INTEGER);
            LOCAL idSku = LONG (INTEGER);
            LOCAL price = INTEGER (INTEGER);
            LOCAL idTypePayment = INTEGER (INTEGER);
            LOCAL idBatch = STRING (INTEGER);
            localReceiptNumberString() <- receiptNumberString();
            exportFile() <- NULL;
            exchangeChameleon(g,
                'select id_workplace, id_session, max(time_change) as time_change from sales.checks where id_check in(' + localReceiptNumberString() + ') group by id_workplace, id_session'
            );
            IMPORT FROM exportFile() TO number = id_session, idCashRegister = id_workplace, dateTime = time_change;
            FOR imported(INTEGER i) AND cashRegister(idCashRegister(i)) AND NOT zReport(cashRegister(idCashRegister(i)), STRING(number(i))) DO NEW z = ZReport {
                number(z) <- STRING(number(i));
                cashRegister(z) <- cashRegister(idCashRegister(i));
//                date(z) <- DATE(dateTime(i));
//                time(z) <- TIME(dateTime(i));
                departmentStore(z) <- stock(cashRegister(idCashRegister(i))) AS DepartmentStore;
                isPosted(z) <- TRUE;
            }
            FOR imported(INTEGER i) AND cashRegister(idCashRegister(i)) AND zReport(cashRegister(idCashRegister(i)), STRING(number(i))) DO {
                date(zReport(cashRegister(idCashRegister(i)), STRING(number(i)))) <- DATE(dateTime(i));
                time(zReport(cashRegister(idCashRegister(i)), STRING(number(i)))) <- TIME(dateTime(i));
            }
            exportFile() <- NULL;
            exchangeChameleon(g,
                'select id_workplace,id_session,id_fcheck,time_check,id_employee,type_payment,sum_check from sales.checks where id_check in(' + localReceiptNumberString() + ')'
            );
            imported(INTEGER i) <- NULL;
            IMPORT FROM exportFile() TO number = id_fcheck, dateTime = time_check, idCashRegister = id_workplace, idCashMan = id_employee, numberZReport = id_session, idTypePayment = type_payment, summ = sum_check;
            FOR imported(INTEGER i) AND zReport(cashRegister(idCashRegister(i)), STRING(numberZReport(i))) DO NEW r = Receipt {
                number(r) <- number(i);
                date(r) <- DATE(dateTime(i));
                time(r) <- TIME(dateTime(i));
                employee(r) <- employee(idCashMan(i));
                zReport(r) <- zReport(cashRegister(idCashRegister(i)), STRING(numberZReport(i)));
                NEW p = Payment {
                    receipt(p) <- r;
                    paymentType(p) <- typePaymentSID(BPISTRING(idTypePayment(i)));
                    sum(p) <- abs(NUMERIC[18,4](summ(i)) / 100);
                }
            }
            exportFile() <- NULL;
            exchangeChameleon(g,
                'select sales.checks.id_workplace,quantity,price,discount,summ,id_goods,id_series,id_session,id_fcheck from sales.check_lines, sales.checks where sales.checks.id_check = sales.check_lines.id_check and sales.check_lines.id_check in(' + localReceiptNumberString() + ')'
            );
            imported(INTEGER i) <- NULL;
            IMPORT FROM exportFile() TO number = id_fcheck, idCashRegister = id_workplace, idCashMan = id_employee, numberZReport = id_session, summ, quantity, discount, price, idSku = id_goods, idBatch = id_series;
            FOR imported(INTEGER i) AND receipt(zReport(cashRegister(idCashRegister(i)), STRING(numberZReport(i))), number(i)) AND summ(i) > 0 DO NEW d = ReceiptSaleDetail {
                receipt(d) <- receipt(zReport(cashRegister(idCashRegister(i)), STRING(numberZReport(i))), number(i));
                sku(d) <- sku(idSku(i));
                batch[DocumentDetail](d) <- batch(LONG(idBatch(i)));
                price(d) <- NUMERIC[16,4](price(i)) / 100;
                quantity(d) <- quantity(i);
                sum(d) <- NUMERIC[18,4](summ(i)) / 100;
                discountSum(d) <-NUMERIC[18,4](discount(i)) / 100;     
            }
            FOR imported(INTEGER i) AND receipt(zReport(cashRegister(idCashRegister(i)), STRING(numberZReport(i))), number(i)) AND summ(i) < 0 DO NEW d = ReceiptReturnDetail {
                receipt(d) <- receipt(zReport(cashRegister(idCashRegister(i)), STRING(numberZReport(i))), number(i));
                sku(d) <- sku(idSku(i));
                price(d) <- NUMERIC[16,4](price(i)) / 100;
                quantity(d) <- quantity(i);
                sum(d) <- NUMERIC[18,4](summ(i)) / 100;
                discountSum(d) <- NUMERIC[18,4](discount(i)) / 100;     
            }
            APPLY;
        }
    }
}

sendMachineryPriceTransaction(MachineryPriceTransaction t) + {
    sendToChameleon(t);
}

receiveGroupMachinery(GroupCashRegister g) + {
    receiveFromChameleon(g);
}