MODULE ChameleonCashRegister;

REQUIRE NativeMachinery, CashRegister, Store, ZReport;

NAMESPACE Chameleon;

id = DATA INTEGER (CashRegister);
cashRegister (INTEGER id) = GROUP AGGR CashRegister cr BY id(cr);

maxIdCashRegister(CashRegister c) = GROUP MAX id(CashRegister cr AS CashRegister) IF c IS CashRegister;

index(CashRegister cr) = PARTITION SUM 1 ORDER cr IF cr IS CashRegister AND NOT id(cr);

WHEN SET(CashRegister cr IS CashRegister) DO id(cr) <- (GROUP MAX id(CashRegister c AS CashRegister)) (+) 1;

onStarted() + {
    APPLY {
        id(CashRegister cr) <- index(cr) (+) maxIdCashRegister(cr) WHERE index(cr);
    };
}

CLASS ChameleonVersion;

chameleonVersion = ABSTRACT CASE ChameleonVersion (GroupMachinery);

isChameleon (CashRegisterModel m) = left(handler(m), 14) = 'lsf.Chameleon.';
isChameleon (GroupCashRegister g) = isChameleon(cashRegisterModel(g));
isChameleon (CashRegister cr) = isChameleon(groupCashRegister(cr));
isChameleon (Receipt r) = isChameleon(cashRegister(r));

haveChameleon (DepartmentStore d) = GROUP MAX isChameleon(GroupCashRegister g) IF stock(g) = d;

idTellerSettings 'Ид. настройки ККМ' = DATA INTEGER (DepartmentStore);
idTellerSettings 'Ид. настройки ККМ' (MachineryPriceTransaction t) = OVERRIDE idTellerSettings(stock(groupMachinery(t)) AS DepartmentStore), 0;

EXTEND FORM store PROPERTIES idTellerSettings(d) BEFORE deleteD SHOWIF haveChameleon(d);

trueFalse (BOOLEAN flag) = IF flag THEN 'true' ELSE 'false';
escape (ISTRING s) = ISTRING(replace(s, '\'', '\'\''));

centsString(NUMERIC[16,4] n) = IF n THEN STRING(round(n * 100, 0)) ELSE '0';

name(MachineryPriceTransaction t, Sku s) = escape((GROUP LAST name(t, Barcode b) ORDER t, b IF in(t, b) AND sku(b) = s));
order (Sku s) = PARTITION SUM 1 IF s IS Sku ORDER name(s), s;

currenciesString = ABSTRACT CASE ISTRING (GroupMachinery);
currenciesExchangeString = ABSTRACT CASE ISTRING (GroupMachinery);

taxString = ABSTRACT CASE ISTRING (GroupMachinery);

employeesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

priceLevelString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

chainStoreString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
storeString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
employeesStoreString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

cashRegistersString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

groupsSkuStringHierarchy = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
skusString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);
batchesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

uomsString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

pricesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

barcodesString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

restsString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

atcString = ABSTRACT CASE ISTRING (MachineryPriceTransaction);

returnExchange = DATA LOCAL BOOLEAN (GroupCashRegister);

exchangeChameleon (GroupCashRegister g, STRING q) {
    exportFile() <- NULL;
    IF NOT returnExchange(g) AND directory(g) AND isChameleon(g) THEN {
        System.messageCaughtException() <- NULL;
        TRY {
            EXTERNAL SQL directory(g) EXEC q TO exportFile;
        } CATCH {
            IF System.messageCaughtException() != 'java.lang.UnsupportedOperationException' AND System.messageCaughtException() !=  'java.lang.RuntimeException: java.io.IOException' THEN {
                returnExchange(g) <- TRUE;
                MESSAGE System.messageCaughtException();
            }
        }
    } ELSE {
        returnExchange(g) <- TRUE;
    }
}

overSendToChameleon ABSTRACT LIST (MachineryPriceTransaction);

sendToChameleon (MachineryPriceTransaction t){
    NEWSESSION {
        IF isChameleon(groupMachinery(t)) AND notSucceeded(t) AND NOT canceled(t) AND directory(groupMachinery(t)) THEN {
            NEWSESSION { dateTimeProcessing(t) <- currentDateTime(); APPLY; }
            exchangeChameleon(groupMachinery(t),
            CONCAT ';',
                currenciesString(groupMachinery(t)),
                currenciesExchangeString(groupMachinery(t)),
                taxString(groupMachinery(t)),
                employeesString(t),
                priceLevelString(t),
                chainStoreString(t),
                storeString(t),
                employeesStoreString(t),
                cashRegistersString(t),
                groupsSkuStringHierarchy(t),
                skusString(t),
                batchesString(t),
                uomsString(t),
                pricesString(t),
                restsString(t),
                barcodesString(t),
                atcString(t)
                //plusString(t)
            );
            IF returnExchange(groupMachinery(t)) THEN {
                NEW e = MachineryPriceTransactionError {
                    LOCAL p = INTEGER();
                    dateTimeProcessing(t) <- NULL;
                    machineryPriceTransaction(e) <- t;
                    p() <- strpos(System.messageCaughtException(), ':');
                    IF p() != 0 THEN {
                        data(e) <- left(System.messageCaughtException(), p() - 1);
                        System.messageCaughtException() <- substrFrom(System.messageCaughtException(), p() + 1);
                        p() <- strpos(System.messageCaughtException(), 'in SQL');
                        IF p() != 0 THEN {
                            errorTrace(e) <- left(System.messageCaughtException(), p() + 5);
                        } ELSE {
                            errorTrace(e) <- System.messageCaughtException();
                        }
                    } ELSE {
                        data(e) <- System.messageCaughtException();
                        errorTrace(e) <- System.messageCaughtException();
                    }
                    date(e) <- currentDateTime();
                }
            } ELSE {
                succeeded(t) <- TRUE;
                dateTimeSucceeded(t) <- currentDateTime();
                overSendToChameleon(t);
            }
            APPLY;
        }
    }
}

// receive
CLASS ChameleonReceipt 'Чек Chameleon' : Receipt;
uid = DATA ISTRING[36] (Receipt);
receiptUid (ISTRING[36] s) = GROUP AGGR Receipt r BY uid(r);

idReceipt = DATA INTEGER (Receipt);
maxIdReceipt (CashRegister cr) = GROUP MAX idReceipt(Receipt r) BY cashRegister(r);
maxIdReceipt (GroupCashRegister g) = GROUP MAX maxIdReceipt(CashRegister cr) BY groupCashRegister(cr);

cashRegisterIds (GroupCashRegister g) = GROUP CONCAT ISTRING(id(CashRegister cr)), ',' IF isChameleon(cr) AND groupCashRegister(cr) = g AND NOT disableSales(cr) ORDER cr;

conditionRecieve (GroupCashRegister g) = 'where ' + CONCAT ' and ',
    'type_payment < 1000',
    'time_check>=\'' + toDateISO(startDate(g)) + '\'',
    'id_workplace in (' + cashRegisterIds(g) + ')',
    'id_check>' + maxIdReceipt(g);

zReport (CashRegister cr, STRING n) = GROUP LAST ZReport z ORDER z IF number(z) = n AND cashRegister(z) = cr;

employee (LONG id) = GROUP LAST Employee e AS Employee ORDER e BY LONG(e);
sku (LONG id) = GROUP LAST Sku s AS Sku ORDER s BY LONG(s);
batch (LONG id) = GROUP LAST Batch b AS Batch ORDER b BY LONG(b);

@defineStaticObject(chameleonPaymentType, 'Тип оплаты Chameleon');

EXTEND CLASS ChameleonPaymentType {
    cash 'Наличные',
    card 'Карта',
    certificate 'Сертификат'
}

shortStaticName (ChameleonPaymentType t) = CASE
    WHEN t = ChameleonPaymentType.cash THEN 'cash'
    WHEN t = ChameleonPaymentType.card THEN 'card'
    WHEN t = ChameleonPaymentType.certificate THEN 'certificate'
;

chameleonPaymentType 'Тип оплаты Chameleon' (ISTRING s) = GROUP AGGR ChameleonPaymentType t BY shortStaticName(t);

chameleonPaymentType 'Тип оплаты Chameleon' = DATA ChameleonPaymentType (PaymentType);
nameChameleonPaymentType 'Тип оплаты Chameleon' (PaymentType t) = name(chameleonPaymentType(t)); 

paymentType 'Тип оплаты' (ChameleonPaymentType t) = GROUP AGGR PaymentType pt BY chameleonPaymentType(pt);

EXTEND FORM paymentType PROPERTIES nameChameleonPaymentType(pt);

paymentType(ISTRING s) = OVERRIDE paymentType(chameleonPaymentType(s)), typePaymentSID(BPISTRING[10](s));

payment (Receipt r, PaymentType t) = GROUP LAST Payment p ORDER p BY receipt(p), paymentType(p);

receiveFromChameleon(GroupCashRegister g) {
    returnExchange(g) <- NULL;
    LOCAL type = ISTRING (INTEGER);

    LOCAL id = LONG (INTEGER);
    LOCAL guid = ISTRING[36] (INTEGER);
    LOCAL idCashRegister = INTEGER (INTEGER);
    LOCAL idSession = INTEGER (INTEGER);
    LOCAL number = INTEGER (INTEGER);
    LOCAL dateTime = DATETIME (INTEGER);
    LOCAL idEmployee = INTEGER (INTEGER);
    
    LOCAL cash = STRING (INTEGER);
    LOCAL card = STRING (INTEGER);
    LOCAL certificate = STRING (INTEGER);
    
    LOCAL summ = INTEGER (INTEGER);
    LOCAL quantity = NUMERIC[10,3] (INTEGER);
    LOCAL discount = INTEGER (INTEGER);
    LOCAL idSku = LONG (INTEGER);
    LOCAL price = INTEGER (INTEGER);
    LOCAL idTypePayment = INTEGER (INTEGER);
    LOCAL idBatch = STRING (INTEGER);
    LOCAL idBarcode = STRING (INTEGER);
        
    LOCAL receiptSql = ISTRING();
    LOCAL receiptSqlDetail = ISTRING();
    receiptSql() <- CONCAT ' ', 'select id_check,guid::text,id_workplace,id_session,id_fcheck,time_check,id_employee, attrs->\'cash\' as cash, attrs->\'card\' as card, attrs->\'certificate\' as certificate from sales.checks', conditionRecieve(g);
    receiptSqlDetail() <- CONCAT ' ',
        'select checks.guid::text,quantity,price,discount,summ,id_goods,id_series,attrs->\'barcode\' as barcode from sales.check_lines',
        'inner join (' + receiptSql() + ') checks on checks.guid=sales.check_lines.guid::text'
    ;
    IF isChameleon(g) THEN {
        exchangeChameleon(g, 'select id_session,id_workplace,min(time_check) as time_report from (' + receiptSql() + ') as checks group by id_session,id_workplace');
        IF NOT returnExchange(g) THEN NEWSESSION NESTED LOCAL {
            IMPORT FROM exportFile() TO idSession = id_session, idCashRegister = id_workplace, dateTime = time_report;
            FOR idSession(INTEGER i) AND NOT zReport(cashRegister(idCashRegister(i)), STRING(idSession(i))) DO NEW z = ZReport {
                cashRegister(z) <- cashRegister(idCashRegister(i));
                number(z) <- STRING(idSession(i));
            }
            FOR ZReport z = zReport(cashRegister(idCashRegister(INTEGER i)), STRING(idSession(i))) DO {
                date(z) <- DATE(dateTime(i));
                time(z) <- TIME(dateTime(i));
                isPosted(z) <- TRUE; 
            }
            exchangeChameleon(g, receiptSql());
            IMPORT FROM exportFile() TO id = id_check, guid = guid, idCashRegister = id_workplace, idSession = id_session, number = id_fcheck, dateTime = time_check, idEmployee = id_employee, cash, card, certificate;
            FOR guid(INTEGER i) AND ZReport z = zReport(cashRegister(idCashRegister(i)), STRING(idSession(i))) AND NOT receiptUid(guid(i)) DO NEW r = Receipt {
                zReport(r) <- z;
                uid(r) <- guid(i);
            }
            FOR Receipt r = receiptUid(guid(INTEGER i)) DO {
                idReceipt(r) <- id(i);
                number(r) <- number(i);
                date(r) <- DATE(dateTime(i));
                time(r) <- TIME(dateTime(i));
                employee(r) <- employee(idEmployee(i));    
            }
            FOR cash(INTEGER i) AND Receipt r = receiptUid(guid(i)) AND NOT payment(r, paymentType('cash')) DO NEW p = Payment {
                receipt(p) <- r;
                paymentType(p) <- paymentType('cash');
            }
            FOR cash(INTEGER i) AND Receipt r = receiptUid(guid(i)) AND Payment p = payment(r, paymentType('cash')) DO {
                sum(p) <- NUMERIC[18,4](cash(i)) / 100;
            }
            FOR card(INTEGER i) AND Receipt r = receiptUid(guid(i)) AND NOT payment(r, paymentType('card')) DO NEW p = Payment {
                receipt(p) <- r;
                paymentType(p) <- paymentType('card');               
            }
            FOR card(INTEGER i) AND Receipt r = receiptUid(guid(i)) AND Payment p = payment(r, paymentType('card')) DO {
                sum(p) <- NUMERIC[18,4](card(i)) / 100;
            }
            FOR certificate(INTEGER i) AND Receipt r = receiptUid(guid(i)) AND NOT payment(r, paymentType('certificate')) DO NEW p = Payment {
                receipt(p) <- r;
                paymentType(p) <- paymentType('certificate');
            }
            FOR certificate(INTEGER i) AND Receipt r = receiptUid(guid(i)) AND Payment p = payment(r, paymentType('certificate')) DO {
                sum(p) <- NUMERIC[18,4](certificate(i)) / 100;
            }
            exchangeChameleon(g, receiptSqlDetail());
            IMPORT FROM exportFile() TO guid, summ, quantity, discount, price, idSku = id_goods, idBatch = id_series, idBarcode = barcode;
            FOR Receipt r = receiptUid(guid(INTEGER i)) DO {
                DELETE ReceiptDetail rd WHERE receipt(rd) = r;
            }
            FOR Receipt r = receiptUid(guid(INTEGER i)) AND summ(i) > 0 DO NEW d = ReceiptSaleDetail {
                receipt(d) <- r;
                sku(d) <- sku(idSku(i));
                batch[DocumentDetail](d) <- batch(LONG(idBatch(i)));
                price(d) <- NUMERIC[16,4](price(i)) / 100;
                quantity(d) <- quantity(i);
                sum(d) <- NUMERIC[18,4](summ(i)) / 100;
                discountSum(d) <-NUMERIC[18,4](discount(i)) / 100;
                idBarcode(d) <- idBarcode(i);
            }
            FOR Receipt r = receiptUid(guid(INTEGER i)) AND summ(i) < 0 DO NEW d = ReceiptReturnDetail {
                receipt(d) <- r;
                sku(d) <- sku(idSku(i));
                batch[DocumentDetail](d) <- batch(LONG(idBatch(i)));
                price(d) <- NUMERIC[16,4](price(i)) / 100;
                quantity(d) <- abs(quantity(i));
                sum(d) <- abs(NUMERIC[18,4](summ(i))) / 100;
                discountSum(d) <-abs(NUMERIC[18,4](discount(i))) / 100;
                idBarcode(d) <- idBarcode(i);
            }
            IF NOT returnExchange(g) THEN APPLY; ELSE CANCEL;
        }
    }
}

sendMachineryPriceTransaction(MachineryPriceTransaction t) + {
    sendToChameleon(t);
}

receiveGroupMachinery(GroupCashRegister g) + {
    receiveFromChameleon(g);
}