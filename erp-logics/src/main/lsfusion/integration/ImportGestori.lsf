MODULE ImportGestori;

REQUIRE Item, Store, Stock, Warehouse, ItemDescription, StockContract, Agreement, ItemStorage, ItemNutrition, RangeLevel, 
        PurchaseInvoice, PurchaseShipment, PricingPurchase;

host 'Хост' = DATA ISTRING[30]();
port 'Порт' = DATA ISTRING[10]();
base 'База' = DATA ISTRING[100]();
login 'Логин' = DATA ISTRING[100]();
password 'Пароль' = DATA ISTRING[100]() ECHO;

EXTEND FORM integrationData PROPERTIES () host, port, base, login, password;

DESIGN integrationData {
    pane {
        NEW santa FIRST {
            caption = 'Санта';
            fill = 1;
            NEW santaParams {
                caption = 'Параметры';
                MOVE PROPERTY (host());
                MOVE PROPERTY (port());
                MOVE PROPERTY (base());
                MOVE PROPERTY (login());
                MOVE PROPERTY (password());
            }
            NEW santaButtons { 
                caption = 'Импорт';
            }
        }
    }
}


id = DATA LOCAL INTEGER (INTEGER);
idItem = DATA LOCAL NUMERIC[13,0](INTEGER);
name = DATA LOCAL STRING[100](INTEGER);
idParent = DATA LOCAL INTEGER (INTEGER);

importItemGroup 'Импорт товарных групп' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_dep, name_dep FROM Pub.depart WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT itemGroup('all') THEN NEW g = ItemGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup('all');
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_group, name_gr, cod_dep FROM Pub.ggroup WITH (NOLOCK)' TO file;
        
    IMPORT TABLE FROM file() TO id, name, idParent;
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup(TEXT (idParent(i)));
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_sgr, name_sgr, cod_group FROM Pub.sgroup WITH (NOLOCK)' TO file;
        
    IMPORT TABLE FROM file() TO id, name, idParent;
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup(TEXT (idParent(i)));
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemGroup();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItemGroup()); } }

idGroup = DATA LOCAL INTEGER (INTEGER);

importLegalEntities 'Импорт организаций' () {

    LOCAL imported = BOOLEAN (LegalEntityGroup); 
    LOCAL phone = STRING[100](INTEGER);  
    LOCAL fax = STRING[100](INTEGER);  
    LOCAL director = STRING[100](INTEGER);  
    LOCAL comment = TEXT (INTEGER); 
    LOCAL intext = STRING[10](INTEGER);   
    LOCAL email = STRING[100](INTEGER);   
    LOCAL note = TEXT (INTEGER);  
    LOCAL address = TEXT (INTEGER);  
    LOCAL addressBank = TEXT (INTEGER);
    LOCAL bankAddress = TEXT (INTEGER);  
    LOCAL account = TEXT (INTEGER);  
    LOCAL corrAccount = STRING[20](INTEGER);
    LOCAL bic = TEXT (INTEGER);  
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_group, name_group FROM Pub.groups WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT itemGroup('all') THEN NEW g = LegalEntityGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND NOT legalEntityGroup(TEXT (id(i))) DO NEW g = LegalEntityGroup {
        id(g) <- STRING[100](id(i));
    }
    
    FOR LegalEntityGroup g = legalEntityGroup(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i);
        parent(g) <- legalEntityGroup('all');
        order(g) <- id(i);
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_firm, SUBSTR(name_firm, 1, 100), cod_group, phone, fax, "e-mail", director, comment, intext, bank_addr, bank_acct, bank_acctk, MFO, SUBSTR(primech, 1, 100) FROM Pub.firms WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idGroup, phone, fax, email, director, comment, intext, bankAddress, account, corrAccount, bic, note;
    
    FOR id(INTEGER i) AND NOT legalEntity(TEXT (id(i))) DO NEW s = LegalEntity {
        id(s) <- ISTRING[100] (id(i));
        
        IF NOT intext(i) == 'I' THEN NEW w = Warehouse {
            name(w) <- ISTRING[150](name(i));
            id(w) <- ISTRING[100](id(i));
            legalEntity(w) <- s;
            stockGroup(w) <- warehouseGroup('external');
        }
    }
    
    address(INTEGER i) <- (GROUP CONCAT getWord(comment(i), ';', INTEGER j) IF iterate(j, 2, wordCount(comment(i), ';')), ' ' ORDER j);
    addressBank(INTEGER i) <- (GROUP CONCAT getWord(bankAddress(i), ';', INTEGER j) IF iterate(j, 2, wordCount(bankAddress(i), ';')), ' ' ORDER j);
    
    address(INTEGER i) <- NULL WHERE trim(address(i)) == '';
    addressBank(INTEGER i) <- NULL WHERE trim(address(i)) == '';
    phone(INTEGER i) <- NULL WHERE trim(phone(i)) == '';
    fax(INTEGER i) <- NULL WHERE trim(fax(i)) == '';
    
    FOR INTEGER i = [GROUP MIN INTEGER ii BY bic(ii)](STRING[50] bic) AND NOT [GROUP MAX Bank b BY oldMFO(b)](bic) DO NEW b = Bank {
        oldMFO(b) <- STRING[10](bic);
        MFO(b) <- STRING[11](bic);
        name(b) <- STRING[200](getWord(bankAddress(i), ';', 1));
        dataAddress(b, DATE d) <- ISTRING[150] (addressBank(i)) WHERE d == currentDate();
    }
    
    FOR INTEGER i = [GROUP MIN INTEGER ii BY account(ii), id(ii)](STRING[50] number, INTEGER id) AND NOT accountID(number, TEXT (id)) DO NEW a = Bank.Account {
        number(a) <- number;
        legalEntity(a) <- legalEntity(TEXT (id));
        bank(a) <- GROUP MAX Bank b IF oldMFO(b) == bic(i);
    }
    
    FOR LegalEntity s = legalEntity(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
        fullName(s) <- STRING[200](OVERRIDE getWord(comment(i), ';', 1) IF trim(getWord(comment(i), ';', 1)) != '', name(i));
        isCompany(s) <- intext(i) == 'B';
        isSupplier(s) <- idGroup(i) == 1;
        isCustomer(s) <- idGroup(i) == 2;
        legalEntityGroup(s) <- OVERRIDE legalEntityGroup(TEXT (idGroup(i))), legalEntityGroup('2');
        note(s) <- note(i);
        email(s) <- email(i) WHERE trim(email(i)) != '';
        dataPhone(s, DATE d) <- CONCAT ', ', phone(i), 'факс: ' + fax(i) WHERE d == currentDate();
        nameChief(s) <- director(i);
        IF NOT address(s, currentDate()) == address(i) THEN {
            dataAddress(s, DATE d) <- ISTRING[150] (address(i)) WHERE d == currentDate();
        }
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importLegalEntities();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importLegalEntities()); } }

idType = DATA LOCAL INTEGER (INTEGER);
//nameType = DATA LOCAL STRING[100](INTEGER);
//nameGroup = DATA LOCAL ISTRING[100](INTEGER);

defaultCompany = DATA LegalEntity();
nameDefaultCompany 'Организация по умолчанию' () = name(defaultCompany());

EXTEND FORM options PROPERTIES nameDefaultCompany();
DESIGN options {
    commons {
        MOVE PROPERTY (nameDefaultCompany());
    }
}

importStores 'Импорт магазинов' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_ob, SUBSTR(name,1,100) as test_name FROM Pub.obshop WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT chainStores('main') THEN NEW c = ChainStores {
        id(c) <- 'main';
        name(c) <- 'Санта Ритейл';
    }
    
    FOR id(INTEGER i) AND NOT storeType(TEXT (id(i))) DO NEW g = StoreType {
        id(g) <- ISTRING[100](id(i));
        chainStores(g) <- chainStores('main');
    }
    
    FOR StoreType g = storeType(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i) + ' ' + id(i);
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_shop, name_shop, cod_ob FROM Pub.shops WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idType;
    
    FOR id(INTEGER i) AND NOT store(TEXT (id(i))) DO NEW s = Store {
        id(s) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND NOT departmentStore(TEXT (id(i))) DO NEW s = DepartmentStore {
        id(s) <- ISTRING[100] (id(i));
        store(s) <- store(TEXT (id(i)));
    }
    
    FOR Store s = store(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
        storeType(s) <- storeType(TEXT (idType(i)));
        legalEntity(s) <- OVERRIDE legalEntity(TEXT (idType(i))), defaultCompany();
    }
    
    FOR DepartmentStore s = departmentStore(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStores();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importStores()); } }

importUOMs 'Импорт ед. измерений' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_meas, name_meas FROM Pub.meas WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    FOR id(INTEGER i) AND NOT UOM(TEXT (id(i))) DO NEW u = UOM {
        id(u) <- STRING[100](id(i));
        name(u) <- STRING[50](name(i));
        shortName(u) <- name(i);
        base(u) <- u;
        factor(u) <- 1;
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importUOMs();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importUOMs()); } }

supplier = DATA LegalEntity(Item);
nameSupplier 'Поставщик' (Item i) = name(supplier(i)) IN itemBase;

EXTEND FORM item PROPERTIES nameSupplier(i);
EXTEND FORM items PROPERTIES READONLYIF isReadonly() nameSupplier(i);

importItems 'Импорт товаров' () {
    
    LOCAL nameSupplier = TEXT (INTEGER);
    LOCAL nameLabel = TEXT (INTEGER);
    LOCAL nameCashbox = TEXT (INTEGER);
    LOCAL idUOM = INTEGER (INTEGER);
    LOCAL idGroup1 = INTEGER (INTEGER);
    LOCAL idGroup2 = INTEGER (INTEGER);
    LOCAL idGroup3 = INTEGER (INTEGER);
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL passScales = BOOLEAN (INTEGER);
    LOCAL netWeight = NUMERIC[11,3](INTEGER);
    LOCAL volume = NUMERIC[11,3](INTEGER);
    LOCAL article = TEXT(INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, name, SUBSTR(name_e, 1, 60), price_name, name_cur, cod_meas, cod_sgr, cod_group, cod_dep, cod_firm, wflag, massa, volume, artic, parent_good FROM Pub.katalog WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, name, nameSupplier, nameLabel, nameCashbox, idUOM, idGroup1, idGroup2, idGroup3, idLegalEntity, passScales, netWeight, volume, article;
    
    FOR idItem(INTEGER i) AND NOT item(TEXT (idItem(i))) DO NEW s = Item {
        id(s) <- STRING[100](idItem(i));
    }
    
    FOR Item s = item(TEXT (idItem(INTEGER i))) DO {
        caption(s) <- name(i);
        UOM(s) <- UOM(TEXT (idUOM(i)));
        itemGroup(s) <- OVERRIDE itemGroup(TEXT (idGroup1(i))), itemGroup(TEXT (idGroup2(i))), itemGroup(TEXT (idGroup3(i)));
        supplier(s) <- legalEntity(TEXT (idLegalEntity(i)));
        passScales(s) <- passScales(i);
        netWeight(s) <- OVERRIDE netWeight(i) IF netWeight(i) > 0, volume(i);
        description(s) <- article(i);
    }
    
    LOCAL vat = INTEGER (INTEGER);
    LOCAL dt = DATE (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, dt, nds FROM Pub."arh-nds" WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, dt, vat;
    
    FOR INTEGER ii = [GROUP LAST INTEGER i IF imported(i) ORDER dt(i), i BY item(TEXT (idItem(i)))](Item s) DO {
        VAT(s, Country c) <- (GROUP MAX Tax.Range r IF valueCurrentRate(r) == vat(ii)*10 AND c == defaultCountry());
    }
    
    LOCAL idBarcode = STRING[15](INTEGER);
    LOCAL date = DATE (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, bar_cod, dt FROM Pub.barcod WHERE NOT cod_good = bar_cod WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, idBarcode, date;
    
    FOR idBarcode(INTEGER i) AND NOT barcode(idBarcode(i)) DO NEW b = Barcode {
        id(b) <- idBarcode(i);
    }
    FOR Barcode b = barcode(idBarcode(INTEGER i)) AND Item s = item(TEXT (idItem(i))) DO {
        sku(b) <- s;
        barcode(s) <- b;
        dataDate(b) <- date(i);
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItems();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItems()); } }

userContractSku = GROUP MAX UserContractSku c BY supplier(c), customer(c);

EXTEND CLASS AgreementPaymentType {
    paymentOrder 'Платежное поручение'
}  
showPaymentPeriod (PaymentCondition pc) += type(pc) == AgreementPaymentType.paymentOrder;
 
paymentPeriod (INTEGER days, INTEGER bank, AgreementPaymentType t) = GROUP MAX PaymentPeriod p IF percent(p) == 0 
    AND bank == (OVERRIDE 1 IF bankingDays(p), 0) BY countDays(p), type(paymentCondition(p));

importContract 'Импорт договоров' () {
    
    LOCAL number = STRING[15] (INTEGER);
    LOCAL dateFrom = DATE (INTEGER);
    LOCAL dateTo = DATE (INTEGER);
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    LOCAL comment = TEXT (INTEGER);
    LOCAL condition = TEXT (INTEGER);
    LOCAL idType = INTEGER (INTEGER);
    LOCAL idDeliv = INTEGER (INTEGER);
    LOCAL idPayVid = INTEGER (INTEGER);
    LOCAL delay = INTEGER (INTEGER);
    LOCAL idPayment = INTEGER (INTEGER);
    LOCAL idContract = INTEGER (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT ct_num, NumCt, DateCt, DateAct, cod_firm, cod_ob, comment, SUBSTR(SpecCond,1,1000), TypeCt, cod_deliv, CodePayVid, termpay, CodeTypeOpl, main_ct_num FROM Pub.Contract WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, number, dateFrom, dateTo, idLegalEntity, idCompany, comment, condition, idType, idDeliv, idPayVid, delay, idPayment, idContract;
    
    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND NOT userContractSku(TEXT (id(i))) AND idContract(i) == 0 DO NEW c = UserContractSku {
        id(c) <- ISTRING[100](id(i));
    }
    
    FOR UserContractSku c == userContractSku(TEXT (id(INTEGER i))) AND idContract(i) == 0 DO {
        supplier(c) <- legalEntity(TEXT (idLegalEntity(i)));
        customer(c) <- legalEntity(TEXT (idCompany(i)));
        note(c) <- STRING[100](CONCAT '\n', comment(i), condition(i));
        currency(c) <- defaultCurrency();
        type(c) <- ContractSkuType.sale;
        dateFrom(c) <- OVERRIDE dateFrom(i), 2001_01_01;
        dateTo(c) <- dateTo(i);
        number(c) <- number(i);
    }
    
//    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND NOT agreement(TEXT (id(i))) AND NOT idContract(i) == 0 DO NEW c = Agreement {
//        id(c) <- ISTRING[100](id(i));
//    }
//    
//    FOR Agreement c == agreement(TEXT (id(INTEGER i))) AND NOT idContract(i) == 0 DO {
//        inSupplier(c, LegalEntity l) <- l == legalEntity(TEXT (idLegalEntity(i)));
//        inCustomer(c, LegalEntity l) <- l == legalEntity(TEXT (idCompany(i)));
//        name(c) <- ISTRING[100](comment(i));
//        note(c) <- ISTRING[500](condition(i));
//        currency(c) <- defaultCurrency();
//        fromDate(c) <- OVERRIDE dateFrom(i), 2001_01_01;
//        toDate(c) <- dateTo(i);
//        number(c) <- number(i);
//        fromTime(c) <- 00:00;
//        toTime(c) <- 23:59;
//    }


    LOCAL bank = INTEGER (INTEGER);
    LOCAL type = AgreementPaymentType(INTEGER);
    
    bank(INTEGER i) <- CASE WHEN idPayment(i) == 3 THEN 1 ELSE 0 WHERE imported(i);
    type(INTEGER i) <- CASE WHEN idPayVid(i) == 1 THEN AgreementPaymentType.advancePayment
                            WHEN idPayVid(i) == 3 THEN AgreementPaymentType.prepayment
                            WHEN idPayVid(i) == 5 THEN AgreementPaymentType.requirement
                            WHEN idPayVid(i) == 6 THEN AgreementPaymentType.paymentOrder
                            ELSE AgreementPaymentType.implement WHERE imported(i);

    FOR [GROUP SUM 1 IF imported(INTEGER i) BY delay(i), bank(i), type(i)](INTEGER d, INTEGER b, AgreementPaymentType t)  AND NOT paymentPeriod(d, b, t)  DO NEW p = PaymentCondition {
        type(p) <- t;
        bankingDays(p) <- b == 1;

        NEW pp = PaymentPeriod {
            paymentCondition(pp) <- p;
            percent(pp) <- 0;
            countDays(pp) <- d;
        }
    }

    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND UserContractSku c = userContractSku(TEXT (id(i))) DO {
        paymentCondition(c) <- paymentCondition(paymentPeriod(delay(i), bank(i), type(i)));
    }

    APPLY;
}

EXTEND FORM integrationData PROPERTIES importContract();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importContract()); } }

property = DATA LOCAL INTEGER (INTEGER);
value = DATA LOCAL TEXT (INTEGER);

overImportItemAttribute ABSTRACT LIST ();

importItemAttribute 'Импорт доп. свойств товаров' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, npar, SUBSTR(pvalue, 1, 1000) FROM Pub.subcard WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, property, value;

    FOR [GROUP SUM 1 IF property(INTEGER i) == 71 BY value(i)](TEXT name) AND name != '' AND NOT brandName(name) DO NEW b = Brand {
        name(b) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 71 DO {
        brand(Item s) <- brandName(value(i)) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 4 BY value(i)](TEXT name) AND name != '' AND NOT manufacturerName(name) DO NEW m = Manufacturer {
        name(m) <- ISTRING[200] (name);
    }
    FOR property(INTEGER i) == 4 DO {
        manufacturer(Item s) <- manufacturerName(value(i)) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 5 BY upper(value(i))](TEXT name) AND name != '' AND NOT (GROUP MAX Country c IF upper(name(c)) == name) DO NEW c = Country {
        name(c) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 5 DO {
        country(Item s) <- (GROUP MAX Country c IF upper(name(c)) == upper(value(i))) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 7 DO {
        conditionsText(Item s) <- ISTRING[100] (value(i)) WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 41 AND (value(i) == 'yes' OR value(i) == '1') DO {
        banPurchase(Item s) <- TRUE WHERE s = item(TEXT (idItem(i)));
    }
    
    overImportItemAttribute();
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemAttribute();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItemAttribute()); } }

id 'Номер' = DATA ISTRING[100](Range.Range);
range = GROUP MAX Range.Range r BY id(r);

importRange 'Импорт ассортиментных матриц' () {
    
    LOCAL stores = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT num_as, name, SUBSTR(seq_shop,1,1000) FROM Pub.as1 WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name, stores;
    
    IF NOT rangeLevel('1') THEN NEW l = RangeLevel {
        name(l) <- '1';
    }
    
    FOR id(INTEGER i) AND NOT range(TEXT (id(i))) DO NEW r = Range.Range {
        id(r) <- ISTRING[100](id(i));
    }
    
    FOR Range.Range r = range(TEXT (id(INTEGER i))) DO {
        name(r) <- name(i);
        in(r, RangeLevel l) <- l == rangeLevel('1');
        inData(r, ItemGroup g) <- g == itemGroup('all');
        dataLevel(r, Store s, DATE d) <- rangeLevel('1') WHERE [GROUP SUM 1 IF iterate(INTEGER j, 1, wordCount(stores(i), ',')) BY getWord(stores(i), ',', j)](id(s)) AND d = 2019_01_01;
        
        IF NOT [GROUP SUM 1 BY range(RangeRev rr)](r) THEN NEW rr = RangeRev {
            range(rr) <- r;
            dateTime(rr) <- 2019_01_01_00:00;
        }
    }
    
    LOCAL idRange = INTEGER (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT num_as, cod_good FROM Pub.asskat WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idRange, idItem;
    
    LOCAL imported = BOOLEAN (RangeRev, Item);
    
    FOR Item sk = sku(TEXT (idItem(INTEGER i))) AND RangeRev r = [GROUP LAST RangeRev rr BY range(rr)](range(TEXT (idRange(i)))) DO {
    
        level(r, sk) <- rangeLevel('1');
        imported(r, sk) <- TRUE;
    }
    
    level(RangeRev r, Item s) <- NULL WHERE r IS RangeRev AND s IS Item AND NOT imported(r, s);
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importRange();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importRange()); } }

customerStock = DATA Stock();
nameCustomerStock 'Склад' () = name(customerStock());

CONSTRAINT customerStock() AND NOT isCompany(legalEntity(customerStock())) CHECKED BY customerStock[] MESSAGE 'Склад не компании';

importInit 'Импорт остатков' () {
    
    LOCAL quantity = NUMERIC[16,3](INTEGER);
    LOCAL quantityID = NUMERIC[16,3](NUMERIC[13,0]);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, quantityF FROM Pub.art WHERE cod_shop = \''+ id(customerStock()) +'\' AND NOT (quantityF = 0 AND last_cost_price = 0) WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, quantity;
    
    FOR NUMERIC[16,3] q = [GROUP MAX quantity(INTEGER i) BY idItem(i)](NUMERIC[13,0] s) DO {
        quantityID(s) <- q;
    }
    
    LOCAL price = NUMERIC[16,3](INTEGER);
    LOCAL priceID = NUMERIC[16,3](NUMERIC[13,0]);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, retail_price FROM Pub.artprice WHERE cod_shop = \''+ id(customerStock()) +'\' WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, price;
    
    FOR NUMERIC[16,3] p = [GROUP MAX price(INTEGER i) BY idItem(i)](NUMERIC[13,0] s) AND p > 0 DO {
        priceID(s) <- p;
    }
    
    LOCAL date = DATE (INTEGER);
    LOCAL number = ISTRING[50] (INTEGER);
    LOCAL cost = NUMERIC[16,3](INTEGER);
    LOCAL idSupplier = INTEGER (INTEGER);
    LOCAL time = INTEGER (INTEGER);
    LOCAL idDetail = ISTRING[100](INTEGER);
    LOCAL imported = BOOLEAN (Purchase.UserInvoiceDetail);
    
    FOR quantityID(NUMERIC[13,0] s) AND NOT sku(TEXT (s)) DO {
        logToFile('importGestori_init', 'Не найден товар! ' + CONCAT ', ', 'Код: ' + s, 'Кол-во: ' + quantityID(s), 'Цена: ' + priceID(s) + '\r\n');
    }
    
    FOR quantityID(NUMERIC[13,0] s) AND sku(TEXT (s)) DO {
    
        EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT TOP 1 pr2.dt_nakl, pr2.num_nakl, pr1.num_doc, pr2.cost_price, pr1.cod_firm, pr1.ModTime FROM Pub.pr2 LEFT JOIN Pub.pr1 ON pr2.num_nakl = pr1.num_nakl WHERE pr2.cod_shop = \''
            + id(customerStock()) +'\' AND pr2.cod_good = \'' + s + '\' ORDER BY pr2.dt_nakl DESC WITH (NOLOCK)' TO file;
            
        IMPORT TABLE FROM file() TO date, id, number, cost, idSupplier, time;
        
        IF NOT Purchase.userInvoice(TEXT (id(0))) AND isSupplier(OVERRIDE legalEntity(TEXT (idSupplier(0))), legalEntity(customerStock())) THEN NEW i = Purchase.UserInvoice {
            id(i) <- ISTRING[100](id(0));
        }
        FOR Purchase.UserInvoice i == Purchase.userInvoice(TEXT (id(0))) DO {       
            supplier(i) <- OVERRIDE legalEntity(TEXT (idSupplier(0))), legalEntity(customerStock());
            supplierStock(i) <- IF legalEntity(TEXT (idSupplier(0))) THEN minStock(legalEntity(TEXT (idSupplier(0)))) ELSE stock(TEXT (idSupplier(0)));
            customer(i) <- legalEntity(customerStock());
            customerStock(i) <- customerStock();
            number(i) <- right(number(0), length(number(0)) - 2);
            series(i) <- left(number(0), 2);
            date(i) <- date(0);
            time(i) <- sumSeconds(00:00, time(0));
            isPosted(i) <- TRUE;
            operation(i) <- Purchase.operation('initial');
            createShipment(i) <- createShipment(Purchase.operation('initial')); 
            createPricing(i) <- createPricing(Purchase.operation('initial')); 
            isClosed(i) <- TRUE;
        }
        
        IF NOT userInvoice('NN' + id(customerStock())) THEN NEW i = UserInvoice {
            id(i) <- 'NN' + id(customerStock());
            number(i) <- id(customerStock());
            series(i) <- 'NN';
            customer(i) <- legalEntity(customerStock());
            customerStock(i) <- customerStock();
            date(i) <- 2019_01_01;
            operation(i) <- Purchase.operation('initial');
        }
        
        idDetail(INTEGER i) <- CONCAT '-', s, (OVERRIDE number(0), ('NN' + id(customerStock()))) WHERE i == 0;
        
        IF NOT Purchase.userInvoiceDetail(idDetail(0)) THEN NEW d = Purchase.UserInvoiceDetail {
            id(d) <- idDetail(0);
        } 
        
        FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(idDetail(0)) INLINE DO {
            userInvoice(d) <- Purchase.userInvoice(OVERRIDE TEXT (id(0)), ('NN' + id(customerStock())));
            sku(d) <- sku(TEXT (s));
            quantity(d) <- quantityID(s);
            shipmentQuantity(d) <- quantityID(s);
            VAT(d) <- VAT(sku(TEXT (s))); 
            retailVAT(d) <- VAT(sku(TEXT (s)));
            price(d) <- NUMERIC[16,4](cost(0));
            retailPrice(d) <- NUMERIC[16,4](priceID(s));
            shipmentPrice(d) <- NUMERIC[16,4](priceID(s));
            imported(d) <- TRUE;
        }
    }
    
    FOR customerStock(Purchase.UserInvoiceDetail d) == customerStock() AND operation(d) == Purchase.operation('initial') AND NOT imported(d) DO {
        quantity(d) <- 0.0;
        shipmentQuantity(d) <- 0.0;
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES () nameCustomerStock, importInit;
DESIGN integrationData { 
    santaButtons { 
        NEW importInit {
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY (importInit());
            MOVE PROPERTY (nameCustomerStock()) { alignment = CENTER; }
        } 
        
    } 
}

daysSupplier 'Кол-во дней для импорта прайсов поставщика' = DATA INTEGER ();
dateFromS () = sum(currentDate(), -daysSupplier());
dateFromST () = toDateDDMMYY(dateFromS());

EXTEND FORM integrationData PROPERTIES () daysSupplier;

importPriceListSupplier 'Импорт прайсов поставщика' () {
    
    LOCAL number = ISTRING[50] (INTEGER);
    LOCAL begin = DATE (INTEGER);
    LOCAL end = DATE (INTEGER);
    LOCAL idContract = INTEGER (INTEGER);
    LOCAL idMainContract = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    LOCAL idStockGroup = INTEGER (INTEGER);
    LOCAL idStocks = ISTRING[1000] (INTEGER);
    LOCAL note = ISTRING[255] (INTEGER);
    LOCAL closed = ISTRING[1] (INTEGER);
    LOCAL paymentDelay = INTEGER (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceList);
    
    logToFile('importGestori', 'importPriceList_Docs_Select_started');
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT ct_spec, NumSpec, DateSpec, DateEnd, spec1.ct_num, Contract.main_ct_num, spec1.cod_firm, spec1.cod_ob, SUBSTR(seq_shop,1,100), primech, StsDoc FROM Pub.spec1, Pub.Contract WHERE spec1.ct_num = Contract.ct_num AND (spec1.DateEnd >= TO_DATE(\''
            + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR spec1.DateEnd IS NULL) AND (Contract.DateAct >= TO_DATE(\'' + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR Contract.DateAct IS NULL) AND spec1.stsdoc = \'$\' WITH (NOLOCK)' TO file;

    logToFile('importGestori', 'importPriceList_Docs_Select_complete');
    
    IMPORT TABLE FROM file() TO id, number, begin, end, idContract, idMainContract, idCompany, idStockGroup, idStocks, note, closed;

    logToFile('importGestori', 'importPriceList_Docs_Import_complete:' + GROUP SUM 1 IF imported(INTEGER i));
    
    FOR id(INTEGER i) AND NOT userPriceList(TEXT (id(i))) DO NEW p = UserPriceList {
        id(p) <- ISTRING[100](id(i));
    }
    
    FOR UserPriceList p == userPriceList(TEXT (id(INTEGER i))) DO {
        
        operation(p) <- PriceList.operation('supplier');
        number(p) <- ISTRING[28] (number(i));
        date(p) <- begin(i);
        time(p) <- 00:00;
        isPosted(p) <- TRUE;
        fromDate(p) <- begin(i);
        fromTime(p) <- 00:00;
        toDate(p) <- end(i);
        company(p) <- legalEntity(TEXT (idCompany(i)));
        note(p) <- note(i);
        allStocks(p) <- NULL;
        imported(p) <- TRUE;
        dataIn(p, StoreType g) <- TRUE IF g == stockGroup(TEXT (idStockGroup(i))) AND NOT idStocks(i) != '';
        
        FOR Stock st = stock(getWord(idStocks(i), ',', INTEGER j)) AND iterate(j, 1, wordCount(idStocks(i), ',')) DO {
            dataIn(p, st) <- TRUE;
        }
    }
    
    LOCAL index = INTEGER (INTEGER);
    LOCAL price = NUMERIC[16,3](INTEGER);
    LOCAL idPriceList = INTEGER (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);
    
    logToFile('importGestori', 'importPriceList_Spec_Select_started');

    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, NumPos, PriceDoc, spec2.ct_spec FROM Pub.spec2, Pub.spec1, Pub.Contract WHERE spec1.ct_spec = spec2.ct_spec AND spec1.ct_num = Contract.ct_num AND (spec1.DateEnd >= TO_DATE(\'' 
            + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR spec1.DateEnd IS NULL) AND (Contract.DateAct >= TO_DATE(\'' + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR Contract.DateAct IS NULL) AND spec1.stsdoc = \'$\' WITH (NOLOCK)' TO file;

    logToFile('importGestori', 'importPriceList_Spec_Select_complete');
    
    IMPORT TABLE FROM file() TO idItem, index, price, idPriceList;

    logToFile('importGestori', 'importPriceList_Spec_Import_complete:' + GROUP SUM 1 IF imported(INTEGER i));
    
    LOCAL idDetail = ISTRING[100](INTEGER);
    idDetail(INTEGER i) <- CONCAT '-', idItem(i), index(i) WHERE imported(i); 
    
    FOR userPriceList(TEXT (idPriceList(INTEGER i))) AND NOT userPriceListDetail(idDetail(i), userPriceList(TEXT (idPriceList(i)))) DO NEW d = UserPriceListDetail {
        id(d) <- idDetail(i);
        userPriceList(d) <- userPriceList(TEXT (idPriceList(i)));
    }
    
    FOR UserPriceListDetail d = userPriceListDetail(idDetail(INTEGER i), userPriceList(TEXT (idPriceList(i)))) DO {
        sku(d) <- item(TEXT (idItem(i)));
        price(d, LedgerPriceListType t) <- NUMERIC[16,4](price(i)) WHERE t == dataPriceListType('supplier');
        dataIndex(d) <- index(i);
        imported(d) <- TRUE;
    }

    logToFile('importGestori', 'importPriceList_Delete_started');
    
    DELETE UserPriceList p WHERE toDate(p) >= dateFromS() AND id(operation(p)) == 'supplier' AND NOT imported(p);
    DELETE UserPriceListDetail d WHERE toDate(d) >= dateFromS() AND id(operation(d)) == 'supplier' AND NOT imported(d);
    
    logToFile('importGestori', 'importPriceList_Apply_started');
    
    APPLY;

    logToFile('importGestori', 'importPriceList_Apply_complete');
}

EXTEND FORM integrationData PROPERTIES importPriceListSupplier();
DESIGN integrationData { 
    santaButtons { 
        NEW supermagSup {
            type = CONTAINERH;
            MOVE PROPERTY (importPriceListSupplier());
            MOVE PROPERTY (daysSupplier()) { caption = 'Кол-во дней'; alignment = CENTER; }
        } 
    } 
}

dateFromOrder 'Дата с' = DATA DATE ();

customerStockOrder = DATA Stock();
nameCustomerStockOrder 'Склад' () = name(customerStockOrder());
idCustomerStockOrder 'Склад' () = id(customerStockOrder());

importOrder 'Импорт заказов' () {
    
    LOCAL date = DATE (INTEGER);
    LOCAL date2 = DATE (INTEGER);
    LOCAL closed = BOOLEAN (INTEGER);
    LOCAL idSupplier = INTEGER (INTEGER);
    LOCAL comment = ISTRING[255] (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT num_nakl, dt_doc, dt_nakl, fflag, cod_firm, primech FROM Pub.zakp1 WHERE cod_shop = \'' + idCustomerStockOrder() + '\' AND zakp1.dt_doc >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\') OR (zakp1.dt_doc IS NULL AND zakp1.dt_nakl >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\')) WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, date, date2, closed, idSupplier, comment;
    
    FOR id(INTEGER i) AND NOT userOrder(TEXT (id(i))) DO NEW o = UserOrder {
        id(o) <- ISTRING[100](id(i));
    }
    
    FOR UserOrder o == userOrder(TEXT (id(INTEGER i))) DO {
        
        number(o) <- ISTRING[28](id(i));
        operation(o) <- Purchase.operation('purchaseStoreSupplier');
        isPosted(o) <- closed(i);
        supplier(o) <- legalEntity(ISTRING[100] (idSupplier(i)));
        supplierStock(o) <- minStock(legalEntity(ISTRING[100] (idSupplier(i))));
        customerStock(o) <- stock(ISTRING[100] (idCustomerStockOrder()));
        customer(o) <- legalEntity(stock(ISTRING[100] (idCustomerStockOrder())));
        date(o) <- OVERRIDE date(i), date2(i);
        time(o) <- 00:00;
        shipmentDate(o) <- date2(i);
    }
    
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL price = NUMERIC[16,3] (INTEGER);
    LOCAL index = INTEGER (INTEGER);
    LOCAL idOrder = INTEGER (INTEGER);
    LOCAL idDetail = ISTRING[100](INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);

    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, quantity_f, cost_price, nn, zakp2.num_nakl FROM Pub.zakp2, Pub.zakp1 WHERE zakp1.num_nakl = zakp2.num_nakl AND quantity > 0 AND (zakp1.dt_doc >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\') OR (zakp1.dt_doc IS NULL AND zakp1.dt_nakl >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\'))) AND zakp1.cod_shop = \'' + idCustomerStockOrder() + '\' WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, quantity, price, index, idOrder;

    idDetail(INTEGER i) <- CONCAT '-', index(i), idItem(i), idOrder(i) WHERE imported(i); 

    FOR userOrder(TEXT (idOrder(INTEGER i))) AND NOT userOrderDetail(idDetail(i)) DO NEW d = UserOrderDetail {
        id(d) <- idDetail(i);
    }
    
    FOR UserOrderDetail d = userOrderDetail(idDetail(INTEGER i)) DO {
        userOrder(d) <- userOrder(TEXT (idOrder(i)));
        sku(d) <- item(TEXT (idItem(i)));
        quantity(d) <- quantity(i);
        price(d) <- NUMERIC[16,4](price(i));
        dataIndex(d) <- index(i);
    }
    
    setNoCancelInTransaction();
    APPLY;
}

EXTEND FORM integrationData PROPERTIES () importOrder, dateFromOrder, nameCustomerStockOrder;
DESIGN integrationData { 
    santaButtons { 
        NEW orders {
            type = CONTAINERH;
            MOVE PROPERTY (importOrder());
            MOVE PROPERTY (dateFromOrder()) { alignment = CENTER; }
            MOVE PROPERTY (nameCustomerStockOrder()) { alignment = CENTER; }
        } 
    } 
}
