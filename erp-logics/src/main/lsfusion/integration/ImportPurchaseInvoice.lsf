MODULE ImportPurchaseInvoice;

REQUIRE System,
        ImportDocument,
        Item,
        PurchaseInvoice;

importPurchaseDataAction 'Импортировать накладную' = CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoiceActionProperty' (Purchase.UserInvoice);
importType = DATA ImportType(UserInvoice);
nameImportType 'Тип импорта' (UserInvoice userInvoice) = name(importType(userInvoice));

importPurchaseInvoicesDataAction 'Импортировать накладные' = CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesActionProperty' ();
importTypeUserInvoices = DATA ImportType();
nameImportTypeUserInvoices 'Тип импорта' () = name(importTypeUserInvoices());

importPurchaseInvoicesDirectoryDataAction 'Импортировать накладные из папки' = CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesDirectoryActionProperty' ();
importPurchaseInvoicesEmailDataAction 'Импортировать накладные из почты' = CUSTOM 'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesEmailActionProperty' ();

importPurchaseInvoicesEmailLastDays 'За сколько дней импортировать накладные из почты' = DATA INTEGER();
skip(AttachmentEmail ae) = importPurchaseInvoicesEmailLastDays() AND (daysBetweenDates(currentDate(), DATE (dateTimeSent(email(ae)))) > importPurchaseInvoicesEmailLastDays());

ignoreInvoicesAfterDocumentsClosedDate 'Не принимать инвоисы по закрытым документам' = DATA BOOLEAN ();

original 'Файл оригинала накладной'  = DATA CUSTOMFILE (Purchase.Invoice);
saveOriginal 'Загрузить файл оригинала накладной' (Purchase.Invoice i) = { INPUT =original(i) CHANGE; }
openOriginal 'Просмотреть оригинал накладной' (Purchase.Invoice i) = { OPEN original(i); }

countDaysClearPurchaseInvoiceCustomfiles 'За сколько дней хранить файлы импорта(накладная-закупка)' = DATA INTEGER (); 

EXTEND FORM options 
    PROPERTIES countDaysClearPurchaseInvoiceCustomfiles();
    
DESIGN options { 
    log { 
        MOVE PROPERTY(countDaysClearPurchaseInvoiceCustomfiles());
    }
}
        
clearApplicationLog () += {
    NEWSESSION {
        IF countDaysClearPurchaseInvoiceCustomfiles() THEN {
            original(Purchase.Invoice i) <- NULL IF date(i) <= subtract(currentDate(), countDaysClearPurchaseInvoiceCustomfiles());
        }
        apply();
    } 
}

autoImportEmail 'E-mail(ы) поставщика' =  DATA VARSTRING[500](ImportType);
autoImportAccount 'E-mail аккаунт' =  DATA Email.Account(ImportType);
autoImportNameAccount 'E-mail аккаунт' (ImportType importType) = name(autoImportAccount(importType));
autoImportCheckInvoiceExistence 'Проверять существование накладной' = DATA BOOLEAN (ImportType);
completeIdItemAsEAN 'Дополнять код товара контрольным символом как штрихкод' = DATA BOOLEAN (ImportType);

currentInvoice = DATA LOCAL Purchase.Invoice ();
cancelSession 'Отменить изменения' = DATA LOCAL BOOLEAN (); 
script 'Пост-скрипт' = DATA TEXT (ImportType);
executeScript (ImportType i) = { IF script(i) THEN EVAL 'run() = \{' + script(i) + ';\};'; };


EXTEND FORM importTypes
PROPERTIES(i) READONLY SHOWIF autoImport(i) autoImportEmail, autoImportNameAccount, 
                              autoImportCheckInvoiceExistence
PROPERTIES(i) READONLY completeIdItemAsEAN                              
;

EXTEND FORM importType
PROPERTIES(i) SHOWIF autoImport(i) autoImportNameAccount, autoImportEmail,
                                 autoImportCheckInvoiceExistence
PROPERTIES(i) completeIdItemAsEAN , script

;

DESIGN importType {
        autoImportContainer {
            MOVE PROPERTY(autoImportNameAccount(i));
            MOVE PROPERTY(autoImportEmail(i));
            MOVE PROPERTY(autoImportCheckInvoiceExistence(i));
        }
        tabbedContainer {
            NEW scriptContainer {
                caption = 'Пост-скрипт';
                MOVE PROPERTY(script(i)) { fill = 1; panelCaptionAbove = TRUE; };
            }
        }
}

EXTEND FORM userInvoice
    PROPERTIES(i) importPurchaseDataAction TODRAW d TOOLBAR
    PROPERTIES(i) nameImportType
    PROPERTIES(i) saveOriginal, openOriginal 
;

DESIGN userInvoice{
    import {
        NEW universalImport {
            caption = 'Универсальный импорт';
            MOVE PROPERTY(nameImportType(i));
            MOVE PROPERTY(importPurchaseDataAction(i));
        }
        NEW origin {
            caption = 'Оригинал накладной';
            MOVE PROPERTY(saveOriginal(i));
            MOVE PROPERTY(openOriginal(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES() TODRAW d TOOLBAR importPurchaseInvoicesDataAction, nameImportTypeUserInvoices, 
                 importPurchaseInvoicesDirectoryDataAction, importPurchaseInvoicesEmailDataAction,
                 ignoreInvoicesAfterDocumentsClosedDate, importPurchaseInvoicesEmailLastDays
;

DESIGN invoices{
    documentDetail {
        NEW importUniversal {
            caption = 'Импорт';
            MOVE PROPERTY(nameImportTypeUserInvoices());
            MOVE PROPERTY(importPurchaseInvoicesDataAction());            
            MOVE PROPERTY(importPurchaseInvoicesDirectoryDataAction());
            NEW importEmail {
                caption = 'Из почты';
                alignment = CENTER;
                MOVE PROPERTY(importPurchaseInvoicesEmailDataAction());
                MOVE PROPERTY(ignoreInvoicesAfterDocumentsClosedDate());
                MOVE PROPERTY(importPurchaseInvoicesEmailLastDays());
            }
        }
    }
}

EXTEND FORM integrationData
    PROPERTIES() TOOLBAR importPurchaseInvoicesDirectoryDataAction, importPurchaseInvoicesEmailDataAction,
                 ignoreInvoicesAfterDocumentsClosedDate, importPurchaseInvoicesEmailLastDays
;

DESIGN integrationData {
    pane { 
        actionsContainer {
            MOVE PROPERTY(importPurchaseInvoicesDirectoryDataAction());
            NEW importEmail {
                caption = 'Из почты';
                alignment = CENTER;
                MOVE PROPERTY(importPurchaseInvoicesEmailDataAction());
                MOVE PROPERTY(ignoreInvoicesAfterDocumentsClosedDate());
                MOVE PROPERTY(importPurchaseInvoicesEmailLastDays());
            }
        }
    }
}

CONSTRAINT importType(UserInvoice invoice) AND (supplier(invoice) != autoImportSupplier(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают поставщики';
    
CONSTRAINT importType(UserInvoice invoice) AND  (supplierStock(invoice) != autoImportSupplierStock(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают склады поставщиков';

CONSTRAINT importType(UserInvoice invoice) AND  (customer(invoice) != autoImportCustomer(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают покупатели';
CONSTRAINT importType(UserInvoice invoice) AND  (customerStock(invoice) != autoImportCustomerStock(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают склады покупателей';
    
CONSTRAINT importType(UserInvoice invoice) AND  (operation(invoice) != autoImportOperation(importType(invoice)))
   CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают операции';    