MODULE ImportSupermag;

REQUIRE Item, ItemSize, LegalEntityBy, EDI, PriceListOperation, PriceListBefore, PurchasePack, ItemStorage, RangeCheck, 
        PurchaseInvoice, PurchaseShipment, PricingPurchase;

host 'Хост' = DATA VARISTRING[30]();
base 'База' = DATA VARISTRING[100]();
login 'Логин' = DATA VARISTRING[100]();
password 'Пароль' = DATA VARISTRING[100]();

EXTEND FORM integrationData PROPERTIES () host, base, login, password;

DESIGN integrationData {
    pane {
        NEW supermag FIRST {
            caption = 'Супермаг';
            fill = 1;
            NEW supermagParams {
                caption = 'Параметры';
                MOVE PROPERTY (host());
                MOVE PROPERTY (base());
                MOVE PROPERTY (login());
                MOVE PROPERTY (password());
            }
            NEW supermagButtons { 
                caption = 'Импорт';
            }
        }
    }
}

idOrder (ItemGroup g) = GROUP CONCAT TEXT (order(ItemGroup gg)) + '.' IF level(g, gg), '' ORDER DESC level(g, gg); 

importItemGroup 'Импорт товарных групп' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = VARISTRING[100] (INTEGER);
    LOCAL name = VARISTRING[255] (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SACARDCLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, tree, name;
    
    IF NOT itemGroup('all') THEN NEW g = ItemGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- VARISTRING[100] (id(i));
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    LOCAL idOrder = VARISTRING[20](ItemGroup);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND ItemGroup g = itemGroup(TEXT (id(i))) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        idOrder(g) <- tree(i);
    }
    FOR level(INTEGER i) AND ItemGroup g = itemGroup(TEXT (id(i))) ORDER level(i) DO {
        
        parent(g) <- OVERRIDE (GROUP MAX ItemGroup gg IF idOrder(gg) == parent(i)), itemGroup('all');
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemGroup();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importItemGroup()); } }

importUOM 'Импорт единиц измерений' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = TEXT (INTEGER);
    LOCAL abb = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, NAME, ABBREV FROM Supermag.SAMEASUREMENT' TO file;
    
    IMPORT TABLE FROM file() TO id, name, abb;
    
    FOR id(INTEGER i) AND NOT UOM(TEXT (id(i))) DO NEW u = UOM {
        id(u) <- VARISTRING[100] (id(i));
    }
    
    FOR UOM u = UOM(TEXT (id(INTEGER i))) DO {
        id(u) <- VARISTRING[100] (id(i));
        name(u) <- name(i);
        shortName(u) <- abb(i);
        factor(u) <- 1;
        base(u) <- u;
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importUOM();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importUOM()); } }

importItem 'Импорт товаров' () {
    
    LOCAL id = TEXT (INTEGER);
    LOCAL name = TEXT (INTEGER);
    LOCAL idMeasurement = INTEGER (INTEGER);
    LOCAL idClass = INTEGER (INTEGER);
    LOCAL country = TEXT (INTEGER);
    LOCAL accepted = INTEGER (INTEGER);
    LOCAL scale = VARSTRING[1] (INTEGER);
    LOCAL width = NUMERIC[14,3] (INTEGER);
    LOCAL length = NUMERIC[14,3] (INTEGER);
    LOCAL height = NUMERIC[14,3] (INTEGER);
    LOCAL vat = NUMERIC[8,4] (INTEGER);
    
    LOCAL imported = BOOLEAN (Item);
    LOCAL imported = BOOLEAN (Barcode);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT card.ARTICLE, SHORTNAME, IDMEASUREMENT, IDCLASS, COUNTRY, ACCEPTED, SCALELOAD, WIDTH, LENGTH, HEIGHT, taxrate.TAXPERCENT AS VAT FROM Supermag.SMCARD card, SUPERMAG.SMTAXIDENTITY taxident, SUPERMAG.SMTAXGROUP taxgr, SUPERMAG.SMTAXRATE taxrate, SUPERMAG.SMCARDTAX cardtax WHERE taxident.IDENTID = 0 AND taxgr.TAXGROUPID = cardtax.TAXGROUPID AND taxgr.TAXID = taxident.TAXID AND taxrate.TAXID = taxident.TAXID AND taxrate.RATEID = taxgr.RATEID AND cardtax.ARTICLE = card.article AND cardtax.RGNID = 3' TO file;
    
    logToFile('importSupermag', 'importItem_1');
    
    IMPORT TABLE FROM file() TO id, name, idMeasurement, idClass, country, accepted, scale, width, length, height, vat;
    
    logToFile('importSupermag', 'importItem_2');
    
    FOR [GROUP SUM 1 IF id(INTEGER i) AND NOT item(id(i)) BY id(i)](VARISTRING[100] id) DO NEW s = Item {
        id(s) <- id;
    }
    
    FOR Item s = item(id(INTEGER i)) DO {
        caption(s) <- name(i);
        UOM(s) <- UOM(TEXT (idMeasurement(i)));
        itemGroup(s) <- itemGroup(TEXT (idClass(i)));
        country(s) <- GROUP MAX Country c IF upper(name(c)) == upper(country(i));
        width(s) <- max(min(width(i), 99999), -99999);
        length(s) <- max(min(length(i), 99999), -99999);
        height(s) <- max(min(height(i), 99999), -99999);
        inactive(s) <- accepted(i) != 1;
        passScales(s) <- scale(i) == '1';
        imported(s) <- TRUE;
        VAT(s, Country c) <- GROUP MAX Tax.Range r IF valueRate(r) == vat(i) AND c = defaultCountry();
    }
    
    logToFile('importSupermag', 'importItem_3');
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT BARCODE, ARTICLE FROM Supermag.SVStoreUnits' TO file;
    
    logToFile('importSupermag', 'importItem_4');
    
    IMPORT TABLE FROM file() TO name, id;
    
    logToFile('importSupermag', 'importItem_5');
    
    name(INTEGER i) <- left(name(i), 15);
    
    FOR imported(INTEGER i) AND NOT barcode(name(i)) DO NEW b = Barcode {
        id(b) <- VARISTRING[15] (name(i));
    }
    FOR Barcode b = barcode(name(INTEGER i)) AND Item s = item(id(i)) DO {
        sku(b) <- s;
        barcode(s) <- b;
        imported(b) <- TRUE;
    }
    
    logToFile('importSupermag', 'importItem_6');
    
    DELETE Item i WHERE i IS Item AND NOT imported(i);
    DELETE Barcode b WHERE b IS Barcode AND NOT imported(b);

    logToFile('importSupermag', 'importItem_7');
    APPLY;
    logToFile('importSupermag', 'importItem_8');
}

EXTEND FORM integrationData PROPERTIES importItem();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importItem()); } }

importItemAttribute 'Импорт доп. свойств товаров' () {
    
    LOCAL id = VARISTRING[50] (INTEGER);
    LOCAL property = VARISTRING[50] (INTEGER);
    LOCAL value = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT ARTICLE, PROPID, PROPVAL FROM Supermag.SVCARDPROPERTIES WHERE PROPID IN (\'packsize2\', \'1\', \'manufacturer\', \'manCountry\', \'expDate\', \'storeWetness\', \'storeTemperature\')' TO file;
    
    logToFile('importSupermag', 'importItemAttribute_1');
    
    IMPORT TABLE FROM file() TO id, property, value;
    
    logToFile('importSupermag', 'importItemAttribute_2');
    
    FOR property(INTEGER i) == 'packsize2' AND Item s = item(id(i)) AND NOT packBarcode(item(id(i))) DO NEW b = Barcode {
        packBarcode(s) <- b;
        sku(b) <- s;
    }
    FOR property(INTEGER i) == 'packsize2' AND item(id(i)) AND NUMERIC[14,3](trim(value(i))) > 0 DO {
        amount(Barcode b) <- NUMERIC[14,3](trim(value(i))) WHERE b == packBarcode(item(id(i)));
    }
    
    logToFile('importSupermag', 'importItemAttribute_3');
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == '1' BY value(i)](TEXT name) AND name != '' AND NOT brandName(name) DO NEW b = Brand {
        name(b) <- VARISTRING[50] (name);
    }
    FOR property(INTEGER i) == '1' DO {
        brand(Item s) <- brandName(value(i)) WHERE s == item(id(i));
    }
    
    logToFile('importSupermag', 'importItemAttribute_4');
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 'manufacturer' BY value(i)](TEXT name) AND name != '' AND NOT manufacturerName(name) DO NEW m = Manufacturer {
        name(m) <- VARISTRING[200] (name);
    }
    FOR property(INTEGER i) == 'manufacturer' DO {
        manufacturer(Item s) <- manufacturerName(value(i)) WHERE s == item(id(i));
    }
    
    logToFile('importSupermag', 'importItemAttribute_5');
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 'manCountry' BY upper(value(i))](TEXT name) AND name != '' AND NOT (GROUP MAX Country c IF upper(name(c)) == name) DO NEW c = Country {
        name(c) <- VARISTRING[50] (name);
    }
    FOR property(INTEGER i) == 'manCountry' DO {
        country(Item s) <- (GROUP MAX Country c IF upper(name(c)) == upper(value(i))) WHERE s == item(id(i));
    }
    
    logToFile('importSupermag', 'importItemAttribute_6');
    
    FOR property(INTEGER i) == '17' AND Item s = item(id(i)) DO {
        netWeight(s) <- NUMERIC[11,5](trim(value(i)));
        grossWeight(s) <- NUMERIC[11,5](trim(value(i)));
    }
    
    logToFile('importSupermag', 'importItemAttribute_7');
    
    FOR property(INTEGER i) == 'expDate' DO {
        expiryDays(Item s) <- INTEGER (getWord(value(i), ' ', 1)) WHERE s == item(id(i));
        expiryText(Item s) <- VARISTRING[100] (value(i)) WHERE s = item(id(i));
    }
    
    logToFile('importSupermag', 'importItemAttribute_8');
    
    FOR property(INTEGER i) == 'storeTemperature' DO {
        conditionsText(Item s) <- VARISTRING[100] (value(i)) WHERE s = item(id(i));
    }
    
    logToFile('importSupermag', 'importItemAttribute_9');
    
    FOR property(INTEGER i) == 'storeWetness' AND NOT value(i) == 'не обусловлено' AND NOT value(i) == 'не обусловлен' AND NOT value(i) == 'нет' AND NOT value(i) == ','
        AND NOT value(i) == '-' AND NOT value(i) == '"-"' AND NOT value(i) == '_' AND NOT value(i) == '/' AND NOT value(i) == '.' AND NOT value(i) == '--' DO {
        conditionsText(Item s) <- CONCAT '', conditionsText(s), ', влажность: ' + VARISTRING[100] (value(i)) WHERE s = item(id(i));
    }
    
    logToFile('importSupermag', 'importItemAttribute_10');
    APPLY;
    logToFile('importSupermag', 'importItemAttribute_11');
}

EXTEND FORM items PROPERTIES (i) READONLY expiryText, conditionsText;

EXTEND FORM integrationData PROPERTIES importItemAttribute();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importItemAttribute()); } }

idOrder (LegalEntityGroup g) = GROUP CONCAT TEXT (order(LegalEntityGroup gg)) + '.' IF level(g, gg), '' ORDER DESC level(g, gg); 

importSupplierGroup 'Импорт групп поставщиков' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = VARISTRING[100] (INTEGER);
    LOCAL name = VARISTRING[255] (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SASUPPLIERCLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, tree, name;
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT legalEntityGroup('S' + id(i)) DO NEW g = LegalEntityGroup {
        id(g) <- 'S' + id(i);
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND LegalEntityGroup g = legalEntityGroup('S' + id(i)) ORDER level(i) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        parent(g) <- OVERRIDE (GROUP MAX LegalEntityGroup gg IF idOrder(gg) == parent(i)), legalEntityGroup('suppliers');
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importSupplierGroup();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importSupplierGroup()); } }


importCustomerGroup 'Импорт групп покупателей' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = VARISTRING[100] (INTEGER);
    LOCAL name = VARISTRING[255] (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SACLIENTCLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, tree, name;
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT legalEntityGroup('C' + id(i)) DO NEW g = LegalEntityGroup {
        id(g) <- 'C' + id(i);
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND LegalEntityGroup g = legalEntityGroup('C' + id(i)) ORDER level(i) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        parent(g) <- OVERRIDE (GROUP MAX LegalEntityGroup gg IF idOrder(gg) == parent(i)), legalEntityGroup('customers');
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importCustomerGroup();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importCustomerGroup()); } }

importLegalEntity 'Импорт организаций' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = VARISTRING[255] (INTEGER);
    LOCAL shortName = VARISTRING[255] (INTEGER);
    LOCAL inn = VARISTRING[20] (INTEGER);
    LOCAL address = VARISTRING[255] (INTEGER);
    LOCAL faddress = VARISTRING[255] (INTEGER);
    LOCAL tel = VARISTRING[40] (INTEGER);
    LOCAL fax = VARISTRING[40] (INTEGER);
    LOCAL email = VARISTRING[255] (INTEGER);
    LOCAL okpo = VARISTRING[40] (INTEGER);
    LOCAL kpp = VARISTRING[9] (INTEGER);
    LOCAL commentary = VARISTRING[255] (INTEGER);
    LOCAL gln = VARISTRING[13] (INTEGER);
    LOCAL own = VARISTRING[1] (INTEGER);
    LOCAL clientClass = INTEGER (INTEGER);
    LOCAL supplierClass = INTEGER (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT ID, NAME, SHORTNAME, INN, ADDRESS, FADDRESS, nvl(TEL,FTEL) AS TEL, nvl(FAX, FFAX) AS FAX, nvl(EMAIL, FEMAIL) AS EMAIL, OKPO, KPP, COMMENTARY, GLN, OWNCLIENT, CLIENTCLASS, SUPPLIERCLASS FROM Supermag.SVCOMPANIES' TO file;

    IMPORT TABLE FROM file() TO id, name, shortName, inn, address, faddress, tel, fax, email, okpo, kpp, commentary, gln, own, clientClass, supplierClass;
    
    FOR id(INTEGER i) AND NOT legalEntity(TEXT (id(i))) DO NEW s = LegalEntity {
        id(s) <- VARISTRING[100] (id(i));
        
        NEW w = Warehouse {
            name(w) <- VARISTRING[150](shortName(i));
            address(w) <- VARISTRING[150](faddress(i));
            id(w) <- VARISTRING[100](id(i));
            legalEntity(w) <- s;
            stockGroup(w) <- warehouseGroup('external');
        }
    }
    
    FOR LegalEntity s = legalEntity(TEXT (id(INTEGER i))) DO {
        fullName(s) <- VARISTRING[200] (name(i));
        name(s) <- VARISTRING[150] (OVERRIDE shortName(i), name(i));
        UNP(s) <- left(inn(i), 9);
        dataAddress(s, DATE d) <- VARISTRING[150] (address(i)) WHERE d == currentDate();
        dataPostAddress(s, DATE d) <- VARISTRING[150](faddress(i)) WHERE d == currentDate();
        dataPhone(s, DATE d) <- CONCAT ', ', tel(i), fax(i) WHERE d == currentDate();
        email(s) <- email(i);
        OKPO(s) <- VARISTRING[20] (okpo(i));
        note(s) <- commentary(i);
        GLN(s) <- gln(i);
        isCompany(s) <- own(i) == '1';
        isSupplier(s) <- TRUE IF supplierClass(i);
        isCustomer(s) <- TRUE IF clientClass(i);
        legalEntityGroup(s) <- OVERRIDE legalEntityGroup('companies') IF own(i) == '1', legalEntityGroup('S' + supplierClass(i)), legalEntityGroup('C' + clientClass(i));
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importLegalEntity();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importLegalEntity()); } }

importStore 'Импорт магазинов' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, NAME FROM Supermag.SASTORECLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT stockGroup(TEXT (id(i))) DO NEW g = Store {
        id(g) <- VARISTRING[100] (id(i));
        legalEntity(g) <- legalEntity('534');
    }
    
    FOR Store g = store(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i);
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStore();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importStore()); } }

importStoreType 'Импорт форматов магазинов' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, TITLE FROM Supermag.SASTOREFORMATS' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT chainStores('main') THEN NEW c = ChainStores {
        id(c) <- 'main';
    }
    
    FOR id(INTEGER i) AND NOT storeType('T' + id(i)) DO NEW g = StoreType {
        id(g) <- 'T' + id(i);
        chainStores(g) <- chainStores('main');
    }
    
    FOR StoreType g = storeType('T' + id(INTEGER i)) DO {
        name(g) <- name(i);
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStoreType();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importStoreType()); } }

importDepartmentStore 'Импорт отделов магазинов' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = VARISTRING[255] (INTEGER);
    LOCAL idClass = INTEGER (INTEGER);
    LOCAL address = VARISTRING[255] (INTEGER);
    LOCAL idFormat = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT ID, NAME, IDCLASS, ADDRESS, FORMATID, l.CLIENTID AS COMPANYID FROM Supermag.SVGRANTEDLOCS g, Supermag.SMOWNCLIENTLOCS l WHERE g.ID = l.LOCID' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idClass, address, idFormat, idCompany;
    
    FOR id(INTEGER i) AND NOT stock(TEXT (id(i))) DO NEW s = DepartmentStore {
        id(s) <- VARISTRING[100] (id(i));
    }
    
    FOR DepartmentStore s = stock(TEXT (id(INTEGER i))) DO {
        
        name(s) <- VARISTRING[150](name(i));
        store(s) <- store(TEXT (idClass(i)));
    }
    
    FOR INTEGER i = [GROUP LAST INTEGER ii ORDER idFormat(ii), address(ii) BY store(TEXT (idClass(ii)))](Store st) DO {
        address(st) <- VARISTRING[150](address(i));
        storeType(st) <- storeType('T' + idFormat(i));
        legalEntity(st) <- legalEntity(TEXT (idCompany(i)));
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importDepartmentStore();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importDepartmentStore()); } }

id = DATA VARISTRING[100](UserPriceListDetail) INDEXED;
userPriceListDetail = GROUP AGGR UserPriceListDetail d WHERE d IS UserPriceListDetail BY id(d);

daysSupplier 'Кол-во дней для импорта прайсов поставщика' = DATA INTEGER ();
dateFromS () = sum(currentDate(), -daysSupplier());
dateFromST () = toDateDDMMYY(dateFromS());

EXTEND FORM integrationData PROPERTIES () daysSupplier;

importPriceListSupplier 'Импорт прайсов поставщика' () {
    
    LOCAL id = VARISTRING[50] (INTEGER);
    LOCAL date = DATE (INTEGER);
    LOCAL posted = INTEGER (INTEGER);
    LOCAL begin = DATE (INTEGER);
    LOCAL end = DATE (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    LOCAL title = VARISTRING[255] (INTEGER);
    LOCAL paymentDelay = INTEGER (INTEGER);
    LOCAL isCalendarDelay = VARISTRING[1] (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceList);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT q.ID, q.CREATEDAT, q.DOCSTATE, q.BEGINSAT, q.ENDSAT, q.CLIENTINDEX, cc.TITLE, cc.PAYMENTDELAY, cc.ISCALENDARDELAY FROM Supermag.SvDocNoPriceCQ q, Supermag.SVDocumentsCO cc WHERE q.docco = cc.id AND q.ENDSAT >= \'' + dateFromST() + '\'' TO file;
    
    logToFile('importSupermag', 'importPriceListSupplier_1');
    
    IMPORT TABLE FROM file() TO id, date, posted, begin, end, idCompany, title, paymentDelay, isCalendarDelay;
    
    logToFile('importSupermag', 'importPriceListSupplier_2');
    
    FOR id(INTEGER i) AND NOT userPriceList(id(i)) DO NEW p = UserPriceList {
        id(p) <- id(i);
    }
    
    FOR UserPriceList p == userPriceList(id(INTEGER i)) DO {
        
        operation(p) <- PriceList.operation('supplier');
        number(p) <- VARISTRING[28] (id(p));
        date(p) <- date(i);
        time(p) <- 00:00;
        isPosted(p) <- posted(i) == 0 OR posted(i) == 2;
        fromDate(p) <- begin(i);
        fromTime(p) <- 00:00;
        toDate(p) <- end(i);
        company(p) <- legalEntity(TEXT (idCompany(i)));
        note(p) <- title(i);
        allStocks(p) <- NULL;
        imported(p) <- TRUE;
    }
    
    logToFile('importSupermag', 'importPriceListSupplier_3');
    
    LOCAL type = VARISTRING[2](INTEGER);
    LOCAL idDoc = VARISTRING[50](INTEGER);
    LOCAL specItem = INTEGER (INTEGER);
    LOCAL idItem = VARISTRING[50](INTEGER);
    LOCAL packSize = NUMERIC[14,3](INTEGER);
    LOCAL price = NUMERIC[19,4](INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
            EXEC 'SELECT qd.DOCTYPE, qd.DOCID, qd.SPECITEM, q.CREATEDAT, qd.ARTICLE, qd.PACKSIZE, cd.itemPrice FROM Supermag.SVSpecNoPriceCQ qd, Supermag.SvDocNoPriceCQ q, Supermag.SVDocumentsCO cc, Supermag.SVSpecCO cd WHERE qd.docid=q.id AND q.docco = cc.id AND cd.docid = cc.id AND cd.article = qd.article AND q.ENDSAT >= \'' + dateFromST() + '\'' TO file;
    
    logToFile('importSupermag', 'importPriceListSupplier4');
    
    IMPORT TABLE FROM file() TO type, idDoc, specItem, date, idItem, packSize, price;
    
    logToFile('importSupermag', 'importPriceListSupplier_5');
    
    id(INTEGER i) <- CONCAT '', 'S', type(i), idDoc(i), specItem(i) WHERE imported(i); 
    
    FOR userPriceList(idDoc(INTEGER i)) AND NOT userPriceListDetail(id(i)) DO NEW d = UserPriceListDetail {
        id(d) <- id(i);
        userPriceList(d) <- userPriceList(idDoc(i));
    }
    
    logToFile('importSupermag', 'importPriceListSupplier_6');
    
    FOR UserPriceListDetail d = userPriceListDetail(id(INTEGER i)) DO {
        sku(d) <- item(idItem(i));
        price(d, LedgerPriceListType t) <- NUMERIC[16,4](price(i)) WHERE t == dataPriceListType('supplier');
        imported(d) <- TRUE;
        dataIndex(d) <- specItem(i);
    }
    
    logToFile('importSupermag', 'importPriceListSupplier_7');
    
    LOCAL idStock = INTEGER (INTEGER);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT q.ID, cl.locationid FROM Supermag.SvDocNoPriceCQ q, Supermag.SMContractLocations cl WHERE q.id = cl.id AND q.ENDSAT >= \'' + dateFromST() + '\'' TO file;
    
    logToFile('importSupermag', 'importPriceListSupplier_8');
    
    IMPORT TABLE FROM file() TO idDoc, idStock;
    
    logToFile('importSupermag', 'importPriceListSupplier_9');
    
    FOR [GROUP SUM 1 BY userPriceList(idDoc(INTEGER i))](UserPriceList p) DO {
        dataIn(p, Stock s) <- TRUE IF [GROUP SUM 1 BY userPriceList(idDoc(INTEGER i)), stock(TEXT (idStock(i)))](p, s);
    }
    
    logToFile('importSupermag', 'importPriceListSupplier_10');
    
    DELETE UserPriceList p WHERE toDate(p) >= dateFromS() AND id(operation(p)) == 'supplier' AND NOT imported(p);
    DELETE UserPriceListDetail d WHERE  toDate(d) >= dateFromS() AND id(operation(d)) == 'supplier' AND NOT imported(d);
    
    logToFile('importSupermag', 'importPriceListSupplier_11');
    APPLY;
    logToFile('importSupermag', 'importPriceListSupplier_12');
}

EXTEND FORM integrationData PROPERTIES importPriceListSupplier();
DESIGN integrationData { 
    supermagButtons { 
        NEW supermagSup {
            type = CONTAINERH;
            MOVE PROPERTY (importPriceListSupplier());
            MOVE PROPERTY (daysSupplier()) { caption = 'Кол-во дней'; alignment = CENTER; }
        } 
    } 
}

daysRetail 'Кол-во дней для импорта розничных прайсов' = DATA INTEGER ();
dateFromR () = sum(currentDate(), -daysRetail());
dateFromRT () = toDateDDMMYYYY(dateFromR());

withoutPrice 'Импорт только с товарами без цен' = DATA BOOLEAN ();

imported 'Импортируемая' = DATA BOOLEAN (PriceList.Operation);

EXTEND FORM PriceList.operation PROPERTIES imported(o);

DESIGN PriceList.operation {
    paramsContainer {
        MOVE PROPERTY (imported(o));
    }
}

importPriceListRetail 'Импорт розничных прайсов' (DATE df, DATE dt) {
    
    LOCAL id = VARISTRING[50] (INTEGER);
    LOCAL dateTime = DATETIME (INTEGER);
    LOCAL reason = INTEGER (INTEGER);
    LOCAL posted = INTEGER (INTEGER);
    LOCAL idStore = INTEGER (INTEGER);
    LOCAL comment = VARISTRING[255] (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceList);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT a.ID, nvl(a.EXECTIME,a.EXECDATE) AS EXECDATE, a.REASON, s.DOCSTATE, S.LOCATION, S.COMMENTARY FROM Supermag.SMActs a, Supermag.SMDocuments s WHERE TRUNC(nvl(a.EXECTIME,a.EXECDATE)) >= CAST(\'' 
        + toDateDDMMYYYY(df) + '\' AS DATE) AND TRUNC(nvl(a.EXECTIME,a.EXECDATE)) <= CAST(\'' + toDateDDMMYYYY(dt) + '\' AS DATE) AND a.id = s.id AND s.docState > 0' TO file;
    
    logToFile('importSupermag', 'importPriceListRetail_1');
    
    IMPORT TABLE FROM file() TO id, dateTime, reason, posted, idStore, comment;
    
    logToFile('importSupermag', 'importPriceListRetail_2');
    
    FOR [GROUP SUM 1 BY reason(INTEGER i)](INTEGER r) AND NOT PriceList.operation(TEXT (r)) DO NEW o = PriceList.Operation {
        id(o) <- VARISTRING[100](r);
        name(o) <- VARISTRING[100](r);
        allRoles(o) <- TRUE;
        groupType(o) <- SystemGroupType.skuGroupType;
        dataIn(StockGroup g, o) <- TRUE IF g IS ChainStores;
        needStock(o) <- TRUE;
        show(PriceListType t, o) <- id(t) == 'supplier' OR id(t) == 'retail';
        change(DataPriceListType t, o) <- id(t) == 'retail';
        in(Currency c, o) <- c == defaultCurrency();
        doNotSetStocksUserPriceList(o) <- TRUE;
        imported(o) <- TRUE;
    }
    
    FOR id(INTEGER i) AND NOT userPriceList(id(i)) DO NEW p = UserPriceList {
        id(p) <- id(i);
    }
    
    FOR UserPriceList p == userPriceList(id(INTEGER i)) DO {
        
        operation(p) <- PriceList.operation(TEXT (reason(i)));
        number(p) <- VARISTRING[28] (id(p));
        date(p) <- DATE (dateTime(i));
        time(p) <- TIME (dateTime(i));
        fromDate(p) <- DATE (dateTime(i));
        fromTime(p) <- TIME (dateTime(i));
        isPosted(p) <- posted(i) != 1;
        note(p) <- comment(i);
        dataIn(p, StockGroup s) <- NULL;
        dataIn(p, DepartmentStore s) <- s == departmentStore(TEXT (idStore(i)));
        in(p, DataPriceListType t) <- id(t) == 'retail';
        imported(p) <- TRUE;
    }
    
    logToFile('importSupermag', 'importPriceListRetail_3');
    
    LOCAL type = VARISTRING[2](INTEGER);
    LOCAL idDoc = VARISTRING[50](INTEGER);
    LOCAL specItem = INTEGER (INTEGER);
    LOCAL price = NUMERIC[19,4](INTEGER);
    LOCAL idItem = VARISTRING[50](INTEGER);
    LOCAL aReason = INTEGER (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);
    LOCAL skip = BOOLEAN (INTEGER);

    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
            EXEC 'SELECT d.DOCTYPE, d.DOCID, d.SPECITEM, sd.ITEMPRICE, sd.ARTICLE, a.REASON FROM Supermag.SMSpecActs d, Supermag.SMActs a, Supermag.SMSpec sd, Supermag.SMDocuments s WHERE a.id = d.docid AND TRUNC(nvl(a.EXECTIME,a.EXECDATE)) >= CAST(\'' 
            + toDateDDMMYYYY(df) + '\' AS DATE) AND TRUNC(nvl(a.EXECTIME,a.EXECDATE)) <= CAST(\'' + toDateDDMMYYYY(dt) + 
            '\' AS DATE) AND d.DocType = sd.DocType and d.DocID = sd.DocID and d.SpecItem = sd.SpecItem and sd.docid = s.id and s.docstate > 0' TO file;
    
    logToFile('importSupermag', 'importPriceListRetail_4');
    
    IMPORT TABLE FROM file() TO type, idDoc, specItem, price, idItem, aReason;

    logToFile('importSupermag', 'importPriceListRetail_5');
    
    id(INTEGER i) <- CONCAT '', 'R', type(i), idDoc(i), specItem(i) WHERE imported(i); 

    skip(INTEGER i) <- withoutPrice() AND imported(i) AND NOT (GROUP SUM 1 IF in(userPriceList(idDoc(i)), DepartmentStore st) AND NOT prevPriceA(dataPriceListType('retail'), item(idItem(i)), st, 2030_01_01_00:00));
    
    FOR userPriceList(idDoc(INTEGER i)) AND NOT userPriceListDetail(id(i)) AND NOT skip(i) DO NEW d = UserPriceListDetail {
        id(d) <- id(i);
        userPriceList(d) <- userPriceList(idDoc(i));
    }
    
    FOR UserPriceListDetail d = userPriceListDetail(id(INTEGER i)) AND NOT skip(i) DO {
        sku(d) <- item(idItem(i));
        price(d, LedgerPriceListType t) <- NUMERIC[16,4](price(i)) IF aReason(i) > 0 WHERE t == dataPriceListType('retail');
        imported(d) <- TRUE;
        dataIndex(d) <- specItem(i);
    }
    
    logToFile('importSupermag', 'importPriceListRetail_6');
    APPLY NESTED LOCAL;
    logToFile('importSupermag', 'importPriceListRetail_7');
    
    DELETE UserPriceList p WHERE date(p) >= df AND date(p) <= dt AND imported(operation(p)) AND imported(p) AND NOT withoutPrice();
    DELETE UserPriceListDetail d WHERE date(d) >= df AND date(d) <= dt AND imported(operation(d)) AND imported(d) AND NOT withoutPrice();
    
    logToFile('importSupermag', 'importPriceListRetail_8');
    APPLY;
    logToFile('importSupermag', 'importPriceListRetail_9');
}

importPriceListRetail 'Импорт розничных прайсов' () { 
    importPriceListRetail(dateFromR(), 2030_01_01);
}

EXTEND FORM integrationData PROPERTIES () importPriceListRetail, daysRetail, withoutPrice;
DESIGN integrationData { 
    supermagButtons { 
        NEW supermagRetail {
            type = CONTAINERH;
            MOVE PROPERTY (importPriceListRetail());
            MOVE PROPERTY (daysRetail()) { caption = 'Кол-во дней'; alignment = CENTER; }
        } 
        MOVE PROPERTY (withoutPrice());
    } 
}
importCalcPriceListType 'Импорт расчетных видов цен' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = VARISTRING[50] (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC 'SELECT ID, NAME FROM Supermag.SMPriceTypes WHERE WITHDUE = 1' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    FOR id(INTEGER i) AND NOT calcPriceListType(TEXT (id(i))) DO NEW s = CalcPriceListType {
        id(s) <- VARISTRING[100] (id(i));
    }
    
    FOR CalcPriceListType t = calcPriceListType(TEXT (id(INTEGER i))) DO {
        
        name(t) <- name(i);
        includeVAT(t) <- TRUE;
        currency(t) <- defaultCurrency();
        roundCondition(t) <- GROUP MAX RoundCondition c IF priceRound(c) == 2 AND currency(c) == defaultCurrency();
        groupType(t) <- SystemGroupType.skuGroupType;  
    }
    
    LOCAL idGroup = INTEGER (INTEGER);
    LOCAL markup = NUMERIC[8,4] (INTEGER);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT PRICETYPE, IDCLASS, EXTRACHARGE FROM Supermag.SMMARKUPCLASS WHERE NOT EXTRACHARGE IS NULL' TO file;
    
    IMPORT TABLE FROM file() TO id, idGroup, markup;
    
    LOCAL idItemGroup = VARSTRING[100](INTEGER);
    
    idItemGroup (INTEGER i) <- OVERRIDE 'all' IF idGroup(i) == 0, VARSTRING[100](idGroup(i));
    
    FOR id(INTEGER i) AND CalcPriceListType t = calcPriceListType(TEXT (id(i))) AND ItemGroup g = itemGroup(idItemGroup(i)) DO {
        dataMarkup(t, g) <- NUMERIC[8,2](markup(i));
    }
    
    dataMarkup(CalcPriceListType t, ItemGroup g) <- NULL WHERE NOT [GROUP SUM 1 BY calcPriceListType(TEXT (id(INTEGER i))), itemGroup(idItemGroup(i))](t, g);
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importCalcPriceListType();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importCalcPriceListType()); } }

id = DATA VARSTRING[100](Range.Range);
range = GROUP AGGR Range.Range r WHERE r IS Range.Range BY id(r);

nameImport 'Наименование для импорта' = DATA VARSTRING[50](Store);

EXTEND FORM stores PROPERTIES READONLYIF isReadonly() nameImport(s);
EXTEND FORM store PROPERTIES nameImport(s);

DESIGN store {
    headerExtraParams {
        MOVE PROPERTY (nameImport(s));
    }
}

importRange 'Импорт ассортиментных матриц' () {
    
    LOCAL id = VARSTRING[50] (INTEGER);
    LOCAL name = VARISTRING[50] (INTEGER);
    LOCAL store = Store(INTEGER);
    LOCAL rangeRev = RangeRev(INTEGER);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT sm.article, sa.name FROM Supermag.SMCardMatrix sm, Supermag.SACardMatrix sa WHERE sm.idMatrix = sa.id' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    store (INTEGER i) <- GROUP MAX Store s IF isISubstring(nameImport(s), replace(name(i), ' nS', ''));
    
    FOR itemGroupRoot(ItemGroup g, 2) == g AND NOT range(id(g)) DO NEW r = Range.Range {
        id(r) <- id(g);
        name(r) <- VARISTRING[100](name(g));
        inData(r, g) <- TRUE;
        
        NEW rr = RangeRev {
            range(rr) <- r;
            dateTime(rr) <- 2001_01_01_00:00;
        }
    }
    
    rangeRev(INTEGER i) <- GROUP LAST RangeRev rr ORDER dateTime(rr), rr IF isParent(ItemGroup g, item(id(i))) AND level(g, itemGroup(id(range(rr))));
    
    FOR [GROUP SUM 1 BY rangeRev(INTEGER i)](RangeRev r) DO {
        include(r, Store st, Item s) <- TRUE IF [GROUP SUM 1 BY rangeRev(INTEGER i), store(i), item(id(i))](r, st, s);
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importRange();
DESIGN integrationData { supermagButtons { MOVE PROPERTY (importRange()); } }

scriptImportInit 'Скрипт импорта остатков' = DATA TEXT ();
useConstraint 'Сохранять, даже если есть ограничения' = DATA BOOLEAN ();

date 'Дата ТТН' = DATA LOCAL DATE (INTEGER);
num 'Номер ТТН' = DATA LOCAL VARSTRING[28](INTEGER);
series 'Серия ТТН' = DATA LOCAL VARSTRING[2](INTEGER);
spec 'Код для импорта' = DATA LOCAL INTEGER (INTEGER);

idSupplierInt 'Код поставщика'= DATA LOCAL INTEGER (INTEGER);
idSupplier 'Код поставщика'= DATA LOCAL VARISTRING[100] (INTEGER);
idCustomerStockInt 'Код склада покупателя'= DATA LOCAL INTEGER (INTEGER);
idCustomerStock 'Код склада покупателя'= DATA LOCAL VARISTRING[100] (INTEGER);

id 'Код накладной'(INTEGER i) = OVERRIDE (CONCAT '', idCustomerStock(i), series(i), num(i)), 'nodoc' IF imported(i);
idDetail 'Код строки'(INTEGER i) = OVERRIDE (CONCAT '', idCustomerStock(i), series(i), num(i), spec(i)), 'nodoc' IF imported(i);

idSku 'Код товара'= DATA LOCAL VARSTRING[100](INTEGER);

quantity 'Количество' = DATA LOCAL NUMERIC[16,5](INTEGER);
price 'Цена' = DATA LOCAL NUMERIC[16,4](INTEGER);
retailPrice 'Цена' = DATA LOCAL NUMERIC[19,4](INTEGER);
vat 'Ставка НДС поставщика' = DATA LOCAL NUMERIC[10,5](INTEGER);

in 'Отм.' = DATA BOOLEAN (Stock);
stocks 'Склады для импорта' () = GROUP CONCAT id(Stock st) IF in(st), ',' ORDER id(st) CHARWIDTH 50;

FORM dialogDepartmentStores 'Склады'
    OBJECTS d = Stock
    PROPERTIES (d) in
    PROPERTIES (d) READONLY id, name, nameStore
    FILTERS d IS DepartmentStore OR isCompany(legalEntity(d))
    FILTERGROUP active FILTER 'Активные' active(d) DEFAULT
    FILTERGROUP in FILTER 'Отмеченные' in(d)
    ORDER nameStore(d), name(d)
;

DESIGN dialogDepartmentStores {
    size = (600, 600);
}

skipSetContractSku(Purchase.UserInvoice i) += idOperation(i) == 'initial';

deleteInvoiceDetails 'Удалять строки, которых нет в импорте' = DATA BOOLEAN ();

importInit 'Импорт остатков' ()  {
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC replace(scriptImportInit(), 'STOCK_LIST', stocks()) TO file;
    
    logToFile('importSupermag', 'importInit_1');
    
    IMPORT TABLE FROM file() TO idCustomerStockInt, idSku, num, series, spec, idSupplierInt, vat, price, quantity, retailPrice, date;
       
    logToFile('importSupermag', 'importInit_2');
    
    idSupplier(INTEGER r) <- OVERRIDE VARISTRING[100] (idSupplierInt(r)), 'nosup' WHERE imported(r);
    idCustomerStock(INTEGER r) <- VARISTRING[100] (idCustomerStockInt(r)) WHERE imported(r);
    date(INTEGER r) <- 2018_01_01 WHERE imported(r) AND NOT date(r);
    retailPrice(INTEGER r) <- NULL WHERE imported(r) AND stock(VARISTRING[100] (idCustomerStockInt(r))) IS Warehouse;
    
    LOCAL supplier = LegalEntity(INTEGER);
    supplier(INTEGER r) <- legalEntity(idSupplier(r)) WHERE imported(r); 

    LOCAL incl =  BOOLEAN (Purchase.UserInvoiceDetail);
    
    //шапки
    FOR [GROUP SUM 1 BY id(INTEGER r)](VARISTRING[100] id) AND NOT Purchase.userInvoice(id) DO NEW i = Purchase.UserInvoice {
        id(i) <- id;
    }
    FOR INTEGER r == [GROUP MIN INTEGER ir BY id(ir)](VARISTRING[100] id) AND Purchase.UserInvoice i == Purchase.userInvoice(id) DO {
        
        supplier(i) <- OVERRIDE supplier(r), legalEntity(stock(idCustomerStock(r)));
        supplierStock(i) <- IF supplier(r) THEN minStock(supplier(r)) ELSE stock(idCustomerStock(r));
        customer(i) <- legalEntity(stock(idCustomerStock(r)));
        customerStock(i) <- stock(idCustomerStock(r));
        number(i) <- num(r);
        date(i) <- date(r);
        time(i) <- 00:00;
        isPosted(i) <- TRUE;
        operation(i) <- Purchase.operation('initial');
        createShipment(i) <- createShipment(Purchase.operation('initial')); 
        createPricing(i) <- createPricing(Purchase.operation('initial')); 
        isClosed(i) <- TRUE;
    }
    
    logToFile('importSupermag', 'importInit_3');
    
    //строки
    FOR imported(INTEGER r) AND NOT Purchase.userInvoiceDetail(idDetail(r)) NEW d = Purchase.UserInvoiceDetail DO {
        id(d) <- idDetail(r);
    }
        
    FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(idDetail(INTEGER r)) INLINE DO {
        userInvoice(d) <- Purchase.userInvoice(id(r));
        sku(d) <- sku(idSku(r));
        quantity(d) <- quantity(r);
        shipmentQuantity(d) <- quantity(r);
        VAT(d) <- valueCurrentVAT(defaultCountry(), vat(r)); 
        valueVAT(d) <- vat(r);
        retailVAT(d) <- VAT(sku(idSku(r)));
        valueRetailVAT(d) <- valueVAT(sku(idSku(r)));
        price(d) <- NUMERIC[16,4](price(r));
        retailPrice(d) <- NUMERIC[16,4](retailPrice(r));
        shipmentPrice(d) <- NUMERIC[16,4](OVERRIDE retailPrice(r), price(r));
        incl(d) <- TRUE;
        dataIndex(d) <- spec(r);
    }
    
    logToFile('importSupermag', 'importInit_4');
    
    FOR [GROUP SUM 1 IF imported(INTEGER in) BY idCustomerStock(in)](id(Stock st)) DO {
        
        IF NOT  deleteInvoiceDetails() THEN {
            quantity(Purchase.UserInvoiceDetail d) <- 0.0 WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d);
            shipmentQuantity(Purchase.UserInvoiceDetail d) <- 0.0 WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d);
            shipmentSum(Purchase.UserInvoiceDetail d) <- 0.0 WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d); 
        }
        ELSE DELETE Purchase.UserInvoiceDetail d WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d) AND NOT sku(d);    
    } 
        
    disableDocumentLog() <- TRUE;
    IF useConstraint() THEN {
        setNoCancelInTransaction();             
    }     
    
    logToFile('importSupermag', 'importInit_5');
    APPLY; 
    logToFile('importSupermag', 'importInit_6');
} 

EXTEND FORM integrationData PROPERTIES () scriptImportInit, useConstraint, importInit, disableDocumentLog, deleteInvoiceDetails, stocks ON CHANGE { SHOW dialogDepartmentStores; };

DESIGN integrationData {
    supermag {
        type = CONTAINERH;
        NEW supermag1 {
            type = CONTAINERH;
            NEW supermagLeft {
                MOVE supermagParams { fill = 1; }
                MOVE supermagButtons { fill = 1; }
            }
            NEW supermagRight {
                fill = 1;
                NEW stocks {
                    caption = 'Склады для импорта';
                    alignment = STRETCH;
                    MOVE PROPERTY (stocks()) { caption = ''; alignment = STRETCH; }
                }
                NEW importBalance {
                    caption = 'Импорт остатков';
                    fill = 1;
                    NEW supermagTopRight {
                        type = CONTAINERH;
                        MOVE PROPERTY (disableDocumentLog()) { alignment = CENTER; }
                        MOVE PROPERTY (useConstraint()) { alignment = CENTER; }
                        MOVE PROPERTY (deleteInvoiceDetails()) { alignment = CENTER; }
                        MOVE PROPERTY (importInit());
                    }
                    NEW supermagScript {
                        fill = 1;
                        caption = 'Скрипт для импорта остатков';
                        MOVE PROPERTY (scriptImportInit()) { 
                            caption = ''; 
                            fill = 1;
                            charWidth = 100; 
                        }
                    }
                }
            }
        }
    }
}

dateFromOrder 'Дата с' = DATA DATE ();

importOrder 'Импорт заказов' () {
    
    LOCAL id = VARISTRING[50] (INTEGER);
    LOCAL docstate = INTEGER (INTEGER);
    LOCAL idSupplier = INTEGER (INTEGER);
    LOCAL idStock = INTEGER (INTEGER);
    LOCAL comment = VARISTRING[255] (INTEGER);
    LOCAL date = DATE (INTEGER);
    LOCAL supplyDate = DATE (INTEGER);
    LOCAL supplyTimeMin = INTEGER (INTEGER);
    LOCAL supplyTimeTillMin = INTEGER (INTEGER);
    LOCAL sql = TEXT ();
    
    sql() <- 'Select D.ID, D.DocState, D.ClientIndex, D.Location, D.Commentary, DD.OrderDate, DD.SupplyDate, DD.SupplyTime as SupplyTimeMinutes, DD.SupplyTimeTill as SupplyTimeTillMinutes from Supermag.SMDocuments D, Supermag.SMDocOR DD where DD.DocType(+)= D.DocType and DD.ID(+)= D.ID and d.docstate IN (1, 2) and d.location IN (' + stocks() + ') and dd.orderdate >= \'' + toDateDDMMYY(dateFromOrder()) + '\'';

    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() EXEC sql() TO file;
    
    logToFile('importSupermag', 'importOrder_1');
    
    IMPORT TABLE FROM file() TO id, docstate, idSupplier, idStock, comment, date, supplyDate, supplyTimeMin, supplyTimeTillMin;
    
    logToFile('importSupermag', 'importOrder_2');
    
    FOR id(INTEGER i) AND NOT userOrder(id(i)) DO NEW o = UserOrder {
        id(o) <- id(i);
    }
    
    FOR UserOrder o == userOrder(id(INTEGER i)) DO {
        
        number(o) <- id(i);
        operation(o) <- Purchase.operation('purchaseStoreSupplier');
        isPosted(o) <- docstate(i) == 2;
        supplier(o) <- legalEntity(VARISTRING[100] (idSupplier(i)));
        supplierStock(o) <- stock(VARISTRING[100] (idSupplier(i)));
        customerStock(o) <- stock(VARISTRING[100] (idStock(i)));
        customer(o) <- legalEntity(stock(VARISTRING[100] (idStock(i))));
        date(o) <- date(i);
        time(o) <- 00:00;
        shipmentDate(o) <- supplyDate(i);
        shipmentTime(o) <- sumMinutes(00:00, supplyTimeMin(i));
    }
    
    logToFile('importSupermag', 'importOrder_3');
    
    LOCAL type = VARISTRING[2](INTEGER);
    LOCAL idDoc = VARISTRING[50](INTEGER);
    LOCAL specItem = INTEGER (INTEGER);
    LOCAL price = NUMERIC[19,4](INTEGER);
    LOCAL totalPrice = NUMERIC[19,4](INTEGER);
    LOCAL quantity = NUMERIC[14,3](INTEGER);
    LOCAL idItem = VARISTRING[50](INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);

    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
            EXEC 'SELECT dd.DOCTYPE, dd.DOCID, dd.SPECITEM, dd.ARTICLE, dd.QUANTITY, dd.ITEMPRICE, dd.TOTALPRICE FROM Supermag.SMSpecOR dd, Supermag.SMDocOR o, Supermag.SMDocuments d WHERE dd.DOCID = o.id AND o.id = d.id AND d.docstate IN (1, 2) AND d.location IN (' + stocks() + ') AND o.orderdate >= \'' + toDateDDMMYY(dateFromOrder()) + '\'' TO file;
    
    logToFile('importSupermag', 'importOrder_4');
    
    IMPORT TABLE FROM file() TO type, idDoc, specItem, idItem, quantity, price, totalPrice;

    logToFile('importSupermag', 'importOrder_5');
    
    id(INTEGER i) <- CONCAT '', 'O', type(i), idDoc(i), specItem(i) WHERE imported(i); 

    FOR userOrder(idDoc(INTEGER i)) AND NOT userOrderDetail(id(i)) DO NEW d = UserOrderDetail {
        id(d) <- id(i);
        userOrder(d) <- userOrder(idDoc(i));
    }
    
    FOR UserOrderDetail d = userOrderDetail(id(INTEGER i)) DO {
        sku(d) <- item(idItem(i));
        quantity(d) <- quantity(i);
        price(d) <- NUMERIC[16,4](price(i));
        sum(d) <- NUMERIC[16,4](totalPrice(i));
        dataIndex(d) <- specItem(i);
    }
    
    logToFile('importSupermag', 'importOrder_6');
    APPLY;
    logToFile('importSupermag', 'importOrder_7');
}

EXTEND FORM integrationData PROPERTIES importOrder(), dateFromOrder();
DESIGN integrationData { 
    supermagButtons { 
        NEW orders {
            type = CONTAINERH;
            MOVE PROPERTY (importOrder());
            MOVE PROPERTY (dateFromOrder()) { alignment = CENTER; }
        } 
    } 
}

rangeRev (SkuGroup g) = GROUP LAST RangeRev rr ORDER dateTime(rr), rr IF inData(range(rr), g);

WHEN CHANGED (skuGroup2(Item i)) AND rangeRev(PREV (skuGroup2(i))) DO {
    include(RangeRev rr, Store st, i) <- TRUE IF include(rangeRev(PREV (skuGroup2(i))), st, i) AND rr == rangeRev(skuGroup2(i));
    include(RangeRev rr, Store st, i) <- NULL WHERE rr IS RangeRev AND NOT rr == rangeRev(skuGroup2(i));
}

daysPromotion 'Кол-во дней для импорта акционных прайсов' = DATA INTEGER ();
dateFromP () = sum(currentDate(), -daysPromotion());
dateFromPT () = toDateDDMMYY(dateFromP());

importPriceListPromotion 'Импорт акционных прайсов' () {
    
    LOCAL id = VARISTRING[50] (INTEGER);
    LOCAL date = DATE (INTEGER);
    LOCAL begin = DATETIME (INTEGER);
    LOCAL end = DATETIME (INTEGER);
    LOCAL posted = INTEGER (INTEGER);
    LOCAL name = VARISTRING[255] (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceList);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT ID, CREATEDAT, DATEBEGIN, DATEEND, DOCSTATE, NAME FROM Supermag.SVDocumentsMA WHERE DATEEND >= \'' + dateFromPT() + '\'' TO file;
    
    logToFile('importSupermag', 'importPriceListPromotion_1');
    
    IMPORT TABLE FROM file() TO id, date, begin, end, posted, name;
    
    logToFile('importSupermag', 'importPriceListPromotion_2');
    
    FOR id(INTEGER i) AND NOT userPriceList(id(i)) DO NEW p = UserPriceList {
        id(p) <- id(i);
    }
    
    FOR UserPriceList p == userPriceList(id(INTEGER i)) DO {
        
        operation(p) <- PriceList.operation('promotion');
        number(p) <- VARISTRING[28] (id(p));
        date(p) <- date(i);
        time(p) <- 00:00;
        isPosted(p) <- posted(i) != 1;
        fromDate(p) <- DATE (begin(i));
        fromTime(p) <- TIME (begin(i));
        toDate(p) <- DATE (end(i));
        toTime(p) <- TIME (end(i));
        note(p) <- name(i);
        fromPriceBeforeDate(p) <- sum(DATE (begin(i)), -1);
        fromPriceBeforeTime(p) <- 00:00;
        toPriceBeforeDate(p) <- sum(DATE (end(i)), 1);
        allStocks(p) <- NULL;
        imported(p) <- TRUE;
    }
    
    logToFile('importSupermag', 'importPriceListPromotion_3');
    
    LOCAL idDoc = VARISTRING[50](INTEGER);
    LOCAL specItem = INTEGER (INTEGER);
    LOCAL idItem = VARISTRING[50](INTEGER);
    LOCAL price = NUMERIC[19,4](INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
            EXEC 'SELECT DOCID, SPECITEM, ARTICLE, ITEMPRICE FROM Supermag.SVSpecMA d, Supermag.SVDocumentsMA a WHERE d.DOCID = a.id AND a.DATEEND >= \'' + dateFromPT() + '\'' TO file;
    
    logToFile('importSupermag', 'importPriceListPromotion_4');
    
    IMPORT TABLE FROM file() TO idDoc, specItem, idItem, price;
    
    logToFile('importSupermag', 'importPriceListPromotion_5');
    
    id(INTEGER i) <- CONCAT '', 'P', idDoc(i), specItem(i) WHERE imported(i); 
    
    FOR userPriceList(idDoc(INTEGER i)) AND NOT userPriceListDetail(id(i)) DO NEW d = UserPriceListDetail {
        id(d) <- id(i);
        userPriceList(d) <- userPriceList(idDoc(i));
    }
    
    FOR UserPriceListDetail d = userPriceListDetail(id(INTEGER i)) DO {
        sku(d) <- item(idItem(i));
        imported(d) <- TRUE;
        dataIndex(d) <- specItem(i);
        priceBefore(d) <- OVERRIDE (GROUP MAX prevPriceA(dataPriceListType('retail'), item(idItem(i)), Stock st, fromDateTime(userPriceList(idDoc(i)))) IF in(userPriceList(idDoc(i)), st)), 0.0;
        price(d, LedgerPriceListType t) <- NUMERIC[16,4](price(i)) WHERE t == dataPriceListType('promotion');
    }
    
    logToFile('importSupermag', 'importPriceListPromotion_6');
    
    LOCAL idStock = INTEGER (INTEGER);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base() 
        EXEC 'SELECT a.AUCID, a.LOCID FROM Supermag.SVAuctionAtoms a, Supermag.SVDocumentsMA d WHERE a.AUCID = d.id AND d.DATEEND >= \'' + dateFromPT() + '\'' TO file;
    
    logToFile('importSupermag', 'importPriceListPromotion_7');
    
    IMPORT TABLE FROM file() TO idDoc, idStock;
    
    logToFile('importSupermag', 'importPriceListPromotion_8');
    
    FOR [GROUP SUM 1 BY userPriceList(idDoc(INTEGER i))](UserPriceList p) DO {
        dataIn(p, DepartmentStore s) <- TRUE IF [GROUP SUM 1 BY userPriceList(idDoc(INTEGER i)), departmentStore(TEXT (idStock(i)))](p, s);
    }
    
    logToFile('importSupermag', 'importPriceListPromotion_9');
    APPLY NESTED LOCAL;
    logToFile('importSupermag', 'importPriceListPromotion_10');
    
    DELETE UserPriceList p WHERE toDate(p) >= dateFromP() AND id(operation(p)) == 'promotion' AND NOT imported(p);
    DELETE UserPriceListDetail d WHERE  toDate(d) >= dateFromP() AND id(operation(d)) == 'promotion' AND NOT imported(d);
    
    logToFile('importSupermag', 'importPriceListPromotion_11');
    APPLY;
    logToFile('importSupermag', 'importPriceListPromotion_12');
}

EXTEND FORM integrationData PROPERTIES importPriceListPromotion(), daysPromotion();
DESIGN integrationData { 
    supermagButtons { 
        NEW supermagPromo {
            type = CONTAINERH;
            MOVE PROPERTY (importPriceListPromotion());
            MOVE PROPERTY (daysPromotion()) { caption = 'Кол-во дней'; alignment = CENTER; }
        } 
    } 
}
