MODULE ImportInit;
REQUIRE PurchaseInvoice, PricingPurchase, PurchaseManufacturingPrice;

NAMESPACE Purchase;

date 'Дата ТТН' = DATA LOCAL NESTED DATE (INTEGER);
num 'Номер ТТН' = DATA LOCAL NESTED VARSTRING[28](INTEGER);
series 'Серия ТТН' = DATA LOCAL NESTED VARSTRING[2](INTEGER);
seriesNumber 'Серия/номер ТТН'(INTEGER i) = CONCAT '', series(i), num(i);

idSupplier 'Код поставщика'= DATA LOCAL NESTED VARSTRING[100](INTEGER);
supplier (INTEGER i) = legalEntity(idSupplier(i));
idSupplierStock 'Код склада поставщика'= DATA LOCAL NESTED VARSTRING[100](INTEGER);
supplierStock (INTEGER i) = stock(idSupplierStock(i));
idCustomerStock 'Код склада покупателя'= DATA LOCAL NESTED VARSTRING[100](INTEGER);
customerStock (INTEGER i) = stock(idCustomerStock(i));
idOperation 'Код операции'= DATA LOCAL NESTED VARSTRING[100](INTEGER);
operation (INTEGER i) = Purchase.operation(idOperation(i));

idSku 'Код товара'= DATA LOCAL NESTED VARSTRING[100](INTEGER);
barcode 'Штрихкод товара'= DATA LOCAL NESTED VARSTRING[100](INTEGER);
sku (INTEGER i) = OVERRIDE sku(idSku(i)), skuBarcode(barcode(i)), sku(barcode(i));
item (INTEGER i) = OVERRIDE idSku(i), barcode(i);
nameSku 'Наименование товара' = DATA LOCAL NESTED VARISTRING[255](INTEGER);
nameUOM 'Ед.изм.' = DATA LOCAL NESTED VARSTRING[255](INTEGER);
UOM (INTEGER i) = OVERRIDE  UOMName(nameUOM(i)), UOM(nameUOM(i));
idSkuGroup 'Код группы' = DATA LOCAL NESTED VARSTRING[100](INTEGER);
splitSku 'Дробный (0/1)'  = DATA LOCAL NESTED VARSTRING[100](INTEGER);

part 'Код партии'=  DATA LOCAL NESTED VARSTRING[100](INTEGER );
indexBatch(INTEGER i) =PARTITION SUM 1 ORDER idCustomerStock(i), i BY part(i);
quantity 'Количество'= DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
price 'Цена'= DATA LOCAL NESTED NUMERIC[14,4](INTEGER);
manPrice 'Цена изготовитля'= DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
vat 'Ставка НДС поставщика'= DATA LOCAL NESTED NUMERIC[8,2](INTEGER);
vatr 'Ставка розничного НДС'= DATA LOCAL NESTED NUMERIC[8,2](INTEGER);
shipPrice 'Цена учетная розничная ' = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
shipSum 'Учетная сумма' = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
expire 'Годен до (дата)'= DATA LOCAL NESTED DATE (INTEGER);
newItem 'Создавать новый товар (0/1)' = DATA LOCAL NESTED VARSTRING[100] (INTEGER);

resetLoc () {
    date(INTEGER int) <- NULL;
    num (INTEGER int) <- NULL;
    series (INTEGER int) <- NULL;
    idSupplier (INTEGER int) <- NULL;
    idSupplierStock (INTEGER int) <- NULL;
    idCustomerStock (INTEGER int) <- NULL;
    idOperation(INTEGER int) <- NULL;
        
    idSku (INTEGER int) <- NULL;
    barcode (INTEGER int) <- NULL;
    nameSku (INTEGER int) <- NULL;
    nameUOM  (INTEGER int) <- NULL;
    idSkuGroup  (INTEGER int) <- NULL;
    splitSku  (INTEGER int) <- NULL;
    part (INTEGER int) <- NULL;
    quantity (INTEGER int) <- NULL;
    price (INTEGER int) <- NULL;
    manPrice (INTEGER int) <- NULL;
    vat (INTEGER int) <- NULL;
    vatr (INTEGER int) <- NULL;
    shipPrice (INTEGER int) <- NULL;  
    shipSum (INTEGER int) <- NULL;         
    expire (INTEGER int) <- NULL;    
    newItem(INTEGER int) <- NULL;    

}

importInitCustom 'Импорт остатков' ()  {

    LOCAL incl =  BOOLEAN (Purchase.UserInvoiceDetail);
                   
    //встречаются очень древние партии по которым потерялся товар
    part(INTEGER r) <- NULL WHERE quantity(r) == 0.0 AND NOT sku(r);
    
    IF (GROUP SUM 1 IF newItem(INTEGER r)=='1') THEN {
        FOR VARSTRING[100] str AND INTEGER r AND ( GROUP MIN r IF date(r) AND idSkuGroup(r) == str AND NOT itemGroup(idSkuGroup(r)))  NEW it = ItemGroup DO {
            id(it) <- str;
        }
        FOR VARSTRING[100] str AND INTEGER r AND ( GROUP MIN r IF date(r) AND nameUOM(r) == str AND NOT UOM(r))  NEW it = UOM DO {
            id(it) <- str;
            shortName(it) <- str;
            name(it) <- VARISTRING[50](str);
        }
                
        FOR VARSTRING[100] str AND INTEGER r AND ( GROUP MIN r IF date(r) AND idSku(r) == str AND NOT sku(r))  NEW it = Item DO {
            id(it) <- str;
            caption(it) <- nameSku(r);
            itemGroup(it) <- itemGroup(idSkuGroup(r));
            UOM(it) <- UOM(r);
            split(it) <- TRUE IF splitSku(r) == '1';
            skuType(it) <- SkuType.skuTypeItem;
            IF barcode(r) THEN {
                NEW b = Barcode {
                    id(b) <- VARSTRING[15](barcode(r));
                    sku(b) <- it;
                }                
            }
        }    
    }
    
    
    //шапки
    FOR [=GROUP MIN INTEGER r IF date(r) AND sku(r) BY idCustomerStock(r), idSupplier(r), seriesNumber(r)](VARISTRING[100] idCustomerStock, VARISTRING[100] idSupplier, VARISTRING[100] num) 
        AND NOT Purchase.userInvoice(CONCAT '_', VARSTRING[100](idCustomerStock), VARSTRING[100](idSupplier), VARSTRING[100](num)) 
        NEW i = Purchase.UserInvoice DO {
        
        id(i) <- CONCAT '_', VARSTRING[100](idCustomerStock), VARSTRING[100](idSupplier), VARSTRING[100](num);
    }
    FOR INTEGER r == [=GROUP MIN INTEGER ir IF date(ir) AND  sku(ir) BY idCustomerStock(ir), idSupplier(ir), seriesNumber(ir)](VARISTRING[100] idCustomerStock, VARISTRING[100] idSupplier, VARISTRING[100] num) 
        AND Purchase.UserInvoice i == Purchase.userInvoice(CONCAT '_', VARSTRING[100](idCustomerStock), VARSTRING[100](idSupplier), VARSTRING[100](num)) DO {
        
        supplier(i) <- legalEntity(idSupplier(r));
        supplierStock(i) <- stock(idSupplierStock(r)) WHERE stock(idSupplierStock(r));
        customer(i) <- legalEntity(stock(idCustomerStock(r)));
        customerStock(i) <- stock(idCustomerStock(r));
        number(i) <- num(r);
        series(i) <- series(r);
        date(i) <- date(r);
        isPosted(i) <- TRUE;
        operation(i) <- operation(r);
        createShipment(i) <- createShipment(operation(r)); 
        createPricing(i) <- createPricing(operation(r)); 
        isClosed(i) <- TRUE;
    }
    
    //строки
    FOR sku(INTEGER r) AND NOT Purchase.userInvoiceDetail(CONCAT '_', idCustomerStock(r), idSupplier(r), seriesNumber(r), item(r), part(r)) NEW d = Purchase.UserInvoiceDetail DO {
        id(d) <- CONCAT '_', idCustomerStock(r), idSupplier(r), seriesNumber(r), item(r), part(r);
    }
    
//    printToLog((GROUP CONCAT 'Change SKU = ' + barcode(INTEGER r) + '/' + idSku(r) + ' : ' + name(sku(r)) + ' - ' + name(skuBarcode(barcode(r))) + ' = ' + qty(r), '\n' 
//            IF name(sku(item(r))) != name(skuBarcode(barcode(r))) AND skuType(sku(item(r))) == SkuType.skuTypeItem AND NOT idBarcode(sku(item(r)))));
    
    FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(CONCAT '_', idCustomerStock(INTEGER r), idSupplier(r), seriesNumber(r), item(r), part(r)) INLINE DO {
        userInvoice(d) <- Purchase.userInvoice(CONCAT '_', idCustomerStock(r), idSupplier(r), seriesNumber(r));
        sku(d) <- sku(r);
        quantity(d) <- quantity(r);
        shipmentQuantity(d) <- quantity(r);
        VAT(d) <- valueCurrentVAT(defaultCountry(), vat(r)); 
        valueVAT(d) <- vat(r);
        valueRetailVAT(d) <- vatr(r);
        price(d) <- price(r);
        manufacturingPrice(d) <- manPrice(r);
             
        retailPrice(d) <- shipPrice(r) IF customerStock(r) IS DepartmentStore;
        
        shipmentPrice(d) <-CASE 
                            WHEN shipPrice(r) THEN shipPrice(r) 
                            WHEN customerStock(r) IS DepartmentStore THEN retailPrice(d)
                            ELSE price(r);
        shipmentSum(d) <- shipSum(r);
        idBatch(d) <- part(r) IF indexBatch(r) == 1;
        expiryDate(d) <- expire(r);
        incl(d) <- TRUE;
    }
    FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(CONCAT '_', idCustomerStock(INTEGER r), idSupplier(r), seriesNumber(r), item(r), part(r)) AND indexBatch(r) > 1 DO {
        batch(d) <- batch(part(r));
    }
    FOR [ = GROUP SUM 1 BY operation(INTEGER in),customerStock(in)](Purchase.Operation o, Stock st) DO {
        quantity(Purchase.UserInvoiceDetail d ) <- 0.0 WHERE o==operation(d) AND st == customerStock(d) AND NOT incl(d);
        shipmentQuantity(Purchase.UserInvoiceDetail d ) <- 0.0 WHERE o==operation(d) AND st == customerStock(d) AND NOT incl(d);
        shipmentSum(Purchase.UserInvoiceDetail d ) <- 0.0 WHERE o==operation(d) AND st == customerStock(d) AND NOT incl(d);     
    } 
        
    LOCAL NESTED closeDate = DATE (Stock);
    closeDate (Stock st) <- documentsClosedDate(st) WHERE (GROUP SUM 1 IF sku(INTEGER in) AND customerStock(in) == st);
    documentsClosedDate(Stock st) <- NULL WHERE closeDate(st);
    disableDocumentLog() <- TRUE;
    APPLY;
    
    documentsClosedDate(Stock st) <- closeDate(st) WHERE closeDate(st);
    disableDocumentLog() <- NULL;	    
    APPLY;    

} 

importInit 'Импорт остатков' ()  {
    NEWSESSION {
        resetLoc ();
        INPUT f = EXCELFILE DO {
            
            IMPORT XLS FROM f AS EXCELFILE TO  date,num,series,idSupplier,idSupplierStock,idCustomerStock,
                   idOperation,idSku,barcode,nameSku,nameUOM,idSkuGroup,splitSku,part,quantity,price,manPrice,vat,vatr,
                   shipPrice,shipSum,expire,newItem;
                   
            importInitCustom();
        }     
    }   
}
FORM importInitXLSX 'Шаблон импорта остатков'
    OBJECTS i = INTEGER
    PROPERTIES (i) date,num,series,idSupplier,idSupplierStock,idCustomerStock,
                  idOperation,idSku,barcode,nameSku,nameUOM,idSkuGroup,splitSku,part,quantity,price,manPrice,vat,vatr,
                  shipPrice,shipSum,expire,newItem
    FILTERS count(i,10)
;

importInitXLSX 'Шаблон импорта' ()  {
    PRINT importInitXLSX XLSX;
}

EXTEND FORM integrationData
    PROPERTIES () importInit, importInitXLSX
;
DESIGN integrationData {
    pane {
        NEW integrationBalance {
            caption = 'Начальные остатки';
            MOVE PROPERTY (importInitXLSX());
            MOVE PROPERTY (importInit());
        }    
    }
}