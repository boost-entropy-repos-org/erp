MODULE ImportSanta;

REQUIRE Item, Store, Stock, Warehouse, ItemDescription, StockContract, Agreement, ItemStorage, ItemNutrition;

host 'Хост' = DATA ISTRING[30]();
port 'Порт' = DATA ISTRING[10]();
base 'База' = DATA ISTRING[100]();
login 'Логин' = DATA ISTRING[100]();
password 'Пароль' = DATA ISTRING[100]() ECHO;

EXTEND FORM integrationData PROPERTIES () host, port, base, login, password;

DESIGN integrationData {
    pane {
        NEW santa FIRST {
            caption = 'Санта';
            fill = 1;
            NEW santaParams {
                caption = 'Параметры';
                MOVE PROPERTY (host());
                MOVE PROPERTY (port());
                MOVE PROPERTY (base());
                MOVE PROPERTY (login());
                MOVE PROPERTY (password());
            }
            NEW santaButtons { 
                caption = 'Импорт';
            }
        }
    }
}


id = DATA LOCAL INTEGER (INTEGER);
name = DATA LOCAL STRING[100](INTEGER);
idParent = DATA LOCAL INTEGER (INTEGER);

importItemGroup 'Импорт товарных групп' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_dep, name_dep FROM Pub.depart' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT itemGroup('all') THEN NEW g = ItemGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup('all');
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_group, name_gr, cod_dep FROM Pub.ggroup' TO file;
        
    IMPORT TABLE FROM file() TO id, name, idParent;
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup(TEXT (idParent(i)));
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_sgr, name_sgr, cod_group FROM Pub.sgroup' TO file;
        
    IMPORT TABLE FROM file() TO id, name, idParent;
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup(TEXT (idParent(i)));
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemGroup();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItemGroup()); } }

idGroup = DATA LOCAL INTEGER (INTEGER);

importLegalEntities 'Импорт организаций' () {

    LOCAL imported = BOOLEAN (LegalEntityGroup); 
    LOCAL phone = STRING[100](INTEGER);  
    LOCAL fax = STRING[100](INTEGER);  
    LOCAL director = STRING[100](INTEGER);  
    LOCAL comment = TEXT (INTEGER); 
    LOCAL intext = STRING[10](INTEGER);   
    LOCAL email = STRING[100](INTEGER);   
    LOCAL note = TEXT (INTEGER);  
    LOCAL address = TEXT (INTEGER);  
    LOCAL addressBank = TEXT (INTEGER);
    LOCAL bankAddress = TEXT (INTEGER);  
    LOCAL account = TEXT (INTEGER);  
    LOCAL corrAccount = STRING[20](INTEGER);
    LOCAL bic = TEXT (INTEGER);  
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_group, name_group FROM Pub.groups' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT itemGroup('all') THEN NEW g = LegalEntityGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND NOT legalEntityGroup(TEXT (id(i))) DO NEW g = LegalEntityGroup {
        id(g) <- STRING[100](id(i));
    }
    
    FOR LegalEntityGroup g = legalEntityGroup(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i);
        parent(g) <- legalEntityGroup('all');
        order(g) <- id(i);
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_firm, SUBSTR(name_firm, 1, 100), cod_group, phone, fax, "e-mail", director, comment, intext, bank_addr, bank_acct, bank_acctk, MFO, SUBSTR(primech, 1, 100) FROM Pub.firms' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idGroup, phone, fax, email, director, comment, intext, bankAddress, account, corrAccount, bic, note;
    
    FOR id(INTEGER i) AND NOT legalEntity(TEXT (id(i))) DO NEW s = LegalEntity {
        id(s) <- ISTRING[100] (id(i));
        
        IF NOT intext(i) == 'I' THEN NEW w = Warehouse {
            name(w) <- ISTRING[150](name(i));
            id(w) <- ISTRING[100](id(i));
            legalEntity(w) <- s;
            stockGroup(w) <- warehouseGroup('external');
        }
    }
    
    address(INTEGER i) <- (GROUP CONCAT getWord(comment(i), ';', INTEGER j) IF iterate(j, 2, wordCount(comment(i), ';')), ' ' ORDER j);
    addressBank(INTEGER i) <- (GROUP CONCAT getWord(bankAddress(i), ';', INTEGER j) IF iterate(j, 2, wordCount(bankAddress(i), ';')), ' ' ORDER j);
    
    address(INTEGER i) <- NULL WHERE trim(address(i)) == '';
    addressBank(INTEGER i) <- NULL WHERE trim(address(i)) == '';
    phone(INTEGER i) <- NULL WHERE trim(phone(i)) == '';
    fax(INTEGER i) <- NULL WHERE trim(fax(i)) == '';
    
    FOR INTEGER i = [GROUP MIN INTEGER ii BY bic(ii)](STRING[50] bic) AND NOT [GROUP MAX Bank b BY oldMFO(b)](bic) DO NEW b = Bank {
        oldMFO(b) <- STRING[10](bic);
        MFO(b) <- STRING[11](bic);
        name(b) <- STRING[200](getWord(bankAddress(i), ';', 1));
        dataAddress(b, DATE d) <- ISTRING[150] (addressBank(i)) WHERE d == currentDate();
    }
    
    FOR INTEGER i = [GROUP MIN INTEGER ii BY account(ii), id(ii)](STRING[50] number, INTEGER id) AND NOT accountID(number, TEXT (id)) DO NEW a = Bank.Account {
        number(a) <- number;
        legalEntity(a) <- legalEntity(TEXT (id));
        bank(a) <- GROUP MAX Bank b IF oldMFO(b) == bic(i);
    }
    
    FOR LegalEntity s = legalEntity(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
        fullName(s) <- STRING[200](OVERRIDE getWord(comment(i), ';', 1) IF trim(getWord(comment(i), ';', 1)) != '', name(i));
        isCompany(s) <- intext(i) == 'B';
        isSupplier(s) <- idGroup(i) == 1;
        isCustomer(s) <- idGroup(i) == 2;
        legalEntityGroup(s) <- OVERRIDE legalEntityGroup(TEXT (idGroup(i))), legalEntityGroup('2');
        note(s) <- note(i);
        email(s) <- email(i) WHERE trim(email(i)) != '';
        dataPhone(s, DATE d) <- CONCAT ', ', phone(i), 'факс: ' + fax(i) WHERE d == currentDate();
        nameChief(s) <- director(i);
        IF NOT address(s, currentDate()) == address(i) THEN {
            dataAddress(s, DATE d) <- ISTRING[150] (address(i)) WHERE d == currentDate();
        }
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importLegalEntities();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importLegalEntities()); } }

idType = DATA LOCAL INTEGER (INTEGER);
//nameType = DATA LOCAL STRING[100](INTEGER);
//nameGroup = DATA LOCAL ISTRING[100](INTEGER);

defaultCompany = DATA LegalEntity();
nameDefaultCompany 'Организация по умолчанию' () = name(defaultCompany());

EXTEND FORM options PROPERTIES nameDefaultCompany();
DESIGN options {
    commons {
        MOVE PROPERTY (nameDefaultCompany());
    }
}

importStores 'Импорт магазинов' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_ob, SUBSTR(name,1,100) as test_name FROM Pub.obshop' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT chainStores('main') THEN NEW c = ChainStores {
        id(c) <- 'main';
        name(c) <- 'Санта Ритейл';
    }
    
    FOR id(INTEGER i) AND NOT storeType(TEXT (id(i))) DO NEW g = StoreType {
        id(g) <- ISTRING[100](id(i));
        chainStores(g) <- chainStores('main');
    }
    
    FOR StoreType g = storeType(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i) + ' ' + id(i);
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_shop, name_shop, cod_ob FROM Pub.shops' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idType;
    
    FOR id(INTEGER i) AND NOT store(TEXT (id(i))) DO NEW s = Store {
        id(s) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND NOT departmentStore(TEXT (id(i))) DO NEW s = DepartmentStore {
        id(s) <- ISTRING[100] (id(i));
        store(s) <- store(TEXT (id(i)));
    }
    
    FOR Store s = store(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
        storeType(s) <- storeType(TEXT (idType(i)));
        legalEntity(s) <- OVERRIDE legalEntity(TEXT (idType(i))), defaultCompany();
    }
    
    FOR DepartmentStore s = departmentStore(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStores();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importStores()); } }

importUOMs 'Импорт ед. измерений' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_meas, name_meas FROM Pub.meas' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    FOR id(INTEGER i) AND NOT UOM(TEXT (id(i))) DO NEW u = UOM {
        id(u) <- STRING[100](id(i));
        name(u) <- STRING[50](name(i));
        shortName(u) <- name(i);
        base(u) <- u;
        factor(u) <- 1;
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importUOMs();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importUOMs()); } }

supplier = DATA LegalEntity(Item);
nameSupplier 'Поставщик' (Item i) = name(supplier(i)) IN itemBase;

EXTEND FORM item PROPERTIES nameSupplier(i);
EXTEND FORM items PROPERTIES READONLYIF isReadonly() nameSupplier(i);

importItems 'Импорт товаров' () {
    
    LOCAL nameSupplier = TEXT (INTEGER);
    LOCAL nameLabel = TEXT (INTEGER);
    LOCAL nameCashbox = TEXT (INTEGER);
    LOCAL idUOM = INTEGER (INTEGER);
    LOCAL idGroup1 = INTEGER (INTEGER);
    LOCAL idGroup2 = INTEGER (INTEGER);
    LOCAL idGroup3 = INTEGER (INTEGER);
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL passScales = BOOLEAN (INTEGER);
    LOCAL netWeight = NUMERIC[11,3](INTEGER);
    LOCAL volume = NUMERIC[11,3](INTEGER);
    LOCAL article = TEXT(INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, name, SUBSTR(name_e, 1, 60), price_name, name_cur, cod_meas, cod_sgr, cod_group, cod_dep, cod_firm, wflag, massa, volume, artic, parent_good FROM Pub.katalog' TO file;
    
    IMPORT TABLE FROM file() TO id, name, nameSupplier, nameLabel, nameCashbox, idUOM, idGroup1, idGroup2, idGroup3, idLegalEntity, passScales, netWeight, volume, article;
    
    FOR id(INTEGER i) AND NOT item(TEXT (id(i))) DO NEW s = Item {
        id(s) <- STRING[100](id(i));
    }
    
    FOR Item s = item(TEXT (id(INTEGER i))) DO {
        caption(s) <- name(i);
        UOM(s) <- UOM(TEXT (idUOM(i)));
        itemGroup(s) <- OVERRIDE itemGroup(TEXT (idGroup1(i))), itemGroup(TEXT (idGroup2(i))), itemGroup(TEXT (idGroup3(i)));
        supplier(s) <- legalEntity(TEXT (idLegalEntity(i)));
        passScales(s) <- passScales(i);
        netWeight(s) <- OVERRIDE netWeight(i) IF netWeight(i) > 0, volume(i);
        description(s) <- article(i);
    }
    
    LOCAL vat = INTEGER (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, nds FROM Pub."arh-nds"' TO file;
    
    IMPORT TABLE FROM file() TO id, vat;
    
    FOR Item s = item(TEXT (id(INTEGER i))) DO {
        VAT(s, Country c) <- (GROUP MAX Range r IF valueCurrentRate(r) == vat(i)*10) WHERE c == defaultCountry();
    }
    
    LOCAL idBarcode = STRING[15](INTEGER);
    LOCAL idItem = INTEGER (INTEGER);
    LOCAL date = DATE (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, bar_cod, dt FROM Pub.barcod WHERE NOT cod_good = bar_cod' TO file;
    
    IMPORT TABLE FROM file() TO idItem, idBarcode, date;
    
    FOR id(INTEGER i) AND NOT barcode(idBarcode(i)) DO NEW b = Barcode {
        id(b) <- idBarcode(i);
    }
    FOR Barcode b = barcode(idBarcode(INTEGER i)) AND Item s = item(TEXT (idItem(i))) DO {
        sku(b) <- s;
        barcode(s) <- b;
        dataDate(b) <- date(i);
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItems();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItems()); } }

userContractSku = GROUP MAX UserContractSku c BY supplier(c), customer(c);

EXTEND CLASS AgreementPaymentType {
    paymentOrder 'Платежное поручение'
}  
showPaymentPeriod (PaymentCondition pc) += type(pc) == AgreementPaymentType.paymentOrder;
 
paymentPeriod (INTEGER days, INTEGER bank, AgreementPaymentType t) = GROUP MAX PaymentPeriod p IF percent(p) == 0 
    AND bank == (OVERRIDE 1 IF bankingDays(p), 0) BY countDays(p), type(paymentCondition(p));

importContract 'Импорт договоров' () {
    
    LOCAL number = STRING[15] (INTEGER);
    LOCAL dateFrom = DATE (INTEGER);
    LOCAL dateTo = DATE (INTEGER);
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    LOCAL comment = TEXT (INTEGER);
    LOCAL condition = TEXT (INTEGER);
    LOCAL idType = INTEGER (INTEGER);
    LOCAL idDeliv = INTEGER (INTEGER);
    LOCAL idPayVid = INTEGER (INTEGER);
    LOCAL delay = INTEGER (INTEGER);
    LOCAL idPayment = INTEGER (INTEGER);
    LOCAL idContract = INTEGER (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT ct_num, NumCt, DateCt, DateAct, cod_firm, cod_ob, comment, SUBSTR(SpecCond,1,1000), TypeCt, cod_deliv, CodePayVid, termpay, CodeTypeOpl, main_ct_num FROM Pub.Contract' TO file;
    
    IMPORT TABLE FROM file() TO id, number, dateFrom, dateTo, idLegalEntity, idCompany, comment, condition, idType, idDeliv, idPayVid, delay, idPayment, idContract;
    
    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND NOT userContractSku(TEXT (id(i))) AND idContract(i) == 0 DO NEW c = UserContractSku {
        id(c) <- ISTRING[100](id(i));
    }
    
    FOR UserContractSku c == userContractSku(TEXT (id(INTEGER i))) AND idContract(i) == 0 DO {
        supplier(c) <- legalEntity(TEXT (idLegalEntity(i)));
        customer(c) <- legalEntity(TEXT (idCompany(i)));
        note(c) <- STRING[100](CONCAT '\n', comment(i), condition(i));
        currency(c) <- defaultCurrency();
        type(c) <- ContractSkuType.sale;
        dateFrom(c) <- OVERRIDE dateFrom(i), 2001_01_01;
        dateTo(c) <- dateTo(i);
        number(c) <- number(i);
    }
    
//    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND NOT agreement(TEXT (id(i))) AND NOT idContract(i) == 0 DO NEW c = Agreement {
//        id(c) <- ISTRING[100](id(i));
//    }
//    
//    FOR Agreement c == agreement(TEXT (id(INTEGER i))) AND NOT idContract(i) == 0 DO {
//        inSupplier(c, LegalEntity l) <- l == legalEntity(TEXT (idLegalEntity(i)));
//        inCustomer(c, LegalEntity l) <- l == legalEntity(TEXT (idCompany(i)));
//        name(c) <- ISTRING[100](comment(i));
//        note(c) <- ISTRING[500](condition(i));
//        currency(c) <- defaultCurrency();
//        fromDate(c) <- OVERRIDE dateFrom(i), 2001_01_01;
//        toDate(c) <- dateTo(i);
//        number(c) <- number(i);
//        fromTime(c) <- 00:00;
//        toTime(c) <- 23:59;
//    }


    LOCAL bank = INTEGER (INTEGER);
    LOCAL type = AgreementPaymentType(INTEGER);
    
    bank(INTEGER i) <- CASE WHEN idPayment(i) == 3 THEN 1 ELSE 0 WHERE imported(i);
    type(INTEGER i) <- CASE WHEN idPayVid(i) == 1 THEN AgreementPaymentType.advancePayment
                            WHEN idPayVid(i) == 3 THEN AgreementPaymentType.prepayment
                            WHEN idPayVid(i) == 5 THEN AgreementPaymentType.requirement
                            WHEN idPayVid(i) == 6 THEN AgreementPaymentType.paymentOrder
                            ELSE AgreementPaymentType.implement WHERE imported(i);

    FOR [GROUP SUM 1 IF imported(INTEGER i) BY delay(i), bank(i), type(i)](INTEGER d, INTEGER b, AgreementPaymentType t)  AND NOT paymentPeriod(d, b, t)  DO NEW p = PaymentCondition {
        type(p) <- t;
        bankingDays(p) <- b == 1;

        NEW pp = PaymentPeriod {
            paymentCondition(pp) <- p;
            percent(pp) <- 0;
            countDays(pp) <- d;
        }
    }

    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND UserContractSku c = userContractSku(TEXT (id(i))) DO {
        paymentCondition(c) <- paymentCondition(paymentPeriod(delay(i), bank(i), type(i)));
    }

    APPLY;
}

EXTEND FORM integrationData PROPERTIES importContract();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importContract()); } }

idItem = DATA LOCAL INTEGER (INTEGER);
property = DATA LOCAL INTEGER (INTEGER);
value = DATA LOCAL TEXT (INTEGER);

overImportItemAttribute ABSTRACT LIST ();

importItemAttribute 'Импорт доп. свойств товаров' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT TOP 1000 cod_good, npar, SUBSTR(pvalue, 1, 1000) FROM Pub.subcard WHERE npar = 60' TO file;
    
    IMPORT TABLE FROM file() TO idItem, property, value;

    FOR [GROUP SUM 1 IF property(INTEGER i) == 71 BY value(i)](TEXT name) AND name != '' AND NOT brandName(name) DO NEW b = Brand {
        name(b) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 71 DO {
        brand(Item s) <- brandName(value(i)) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 4 BY value(i)](TEXT name) AND name != '' AND NOT manufacturerName(name) DO NEW m = Manufacturer {
        name(m) <- ISTRING[200] (name);
    }
    FOR property(INTEGER i) == 4 DO {
        manufacturer(Item s) <- manufacturerName(value(i)) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 5 BY upper(value(i))](TEXT name) AND name != '' AND NOT (GROUP MAX Country c IF upper(name(c)) == name) DO NEW c = Country {
        name(c) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 5 DO {
        country(Item s) <- (GROUP MAX Country c IF upper(name(c)) == upper(value(i))) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 7 DO {
        conditionsText(Item s) <- ISTRING[100] (value(i)) WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 41 AND (value(i) == 'yes' OR value(i) == '1') DO {
        banPurchase(Item s) <- TRUE;
    }
    
    overImportItemAttribute();
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemAttribute();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItemAttribute()); } }