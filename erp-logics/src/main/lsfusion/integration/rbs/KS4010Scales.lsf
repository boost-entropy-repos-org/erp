MODULE KS4010Scales;

REQUIRE NativeMachinery, ScalesItem;

NAMESPACE RBS;

loadDefaultScalesModels () + { 
    loadDefaultScalesModel('Весы РБС KS4010', 'KS4010', 'lsf.rbs.KS4010');
}
nonCyr = FORMULA STRING[100] 'regexp_replace(($1), \'[а-я]\', \'\', \'ig\')';

sendMachineryPriceTransaction(MachineryPriceTransaction t) + {
    IF handlerModel(groupMachinery(t)) = 'lsf.rbs.KS4010' THEN NEWSESSION {
        NEWSESSION {
            dateTimeProcessing(t) <- currentDateTime();
            APPLY;
        }

        LOCAL groups = JSONFILE();
        LOCAL groupsImages = FILE();
        EXPORT JSON FROM
            category_num = nonCyr(id(Group g)),	//The index of the category //не дружит с кирилицей
            category_name = name(g), //The name of the category
            describ = '', //The description of the category.
            //order = (OVERRIDE order(g), INTEGER (id(g)), 1000), //The order index of the category. The smaller the number, the higher priority it has when sorting categories. //пока не работает
            image = ('cat_' + id(g) + '.jpg') IF scalesImage(g)
            WHERE GROUP SUM 1 IF in(t, Barcode b) AND g == (OVERRIDE (scalesGroup(t, b)), skuGroup(t, b))
            TO groups;
            
        FOR [GROUP SUM 1 IF in(t, Barcode b) BY (OVERRIDE (scalesGroup(t, b)), skuGroup(t, b))](Group g) AND hasScalesImage(g) DO
            zipping(STRING[1000] f) <- FILE(scalesImage(g)) WHERE f == 'cat_' + id(g) + '.jpg';
        IF GROUP SUM 1 IF zipping(STRING[1000] f) THEN {
            makeZipFile();
            groupsImages()<- zipped();
        }
        
        LOCAL items = JSONFILE();
        LOCAL itemsImages = FILE();
        EXPORT JSON FROM
            product_number = (OVERRIDE STRING(pluNumber(t, Barcode b)), id(b)),
            product_code = id(b),
            product_name = name(t,b),
            name_sort = name(t,b),
            product_abbr =name(t,b),
            abbr_sort =name(t, b),
            category_num = idSkuGroup(t, b),
            department_num = '1',
            sales_price = 0.0,
            original_price  = price(t, b),
            price_unit_index = 0, //-1:/pc, 0:/kg, 1:/100g, 2:/g
            ingredients = left(description(t, b), 1500),
            used_by_days = STRING (expiryDays(t, b)),
            image_filename = ('item_' + id(b) + '.jpg') IF hasImage(sku(b)),
            disabled = '0',
            barcode = 0,
            exp_date = expiryDate(t, b)
            WHERE in(t, b)
            TO items;
        
        zipping(STRING[1000] f) <- NULL;
        FOR in(t, Barcode b) AND hasImage(sku(b)) DO
            zipping(STRING[1000] f) <- FILE(image(sku(b))) WHERE f == 'item_' + id(b) + '.jpg';
        IF GROUP SUM 1 IF zipping(STRING[1000] f) THEN {
            makeZipFile();
            itemsImages()<- zipped();
        }
        
        FOR groupMachinery(Machinery m) == groupMachinery(t) AND (in(t, m) OR NOT npps(t)) AND NOT succeeded(m,t) AND NOT inactive(m) NOINLINE DO {
            
            LOCAL error = BOOLEAN ();
            LOCAL result = JSONFILE ();
            TRY {
                IF snapshot(t) AND NOT cleared(m, t) THEN {
                    LOCAL id = STRING (INTEGER );
                    
                    EXTERNAL HTTP GET 'http://'+ port(m) + ':1235/category' TO result;
                    IMPORT JSON FROM result() TO id = category_num; 
                    EXPORT JSON FROM value = id(INTEGER r) ;
                    EXTERNAL HTTP DELETE 'http://'+ port(m) + ':1235/category' PARAMS exportFile() TO result;
                    
                    EXTERNAL HTTP GET 'http://'+ port(m) + ':1235/products' TO result;
                    IMPORT JSON FROM result() TO id = product_number; 
                    EXPORT JSON FROM value = id(INTEGER r) ;
                    EXTERNAL HTTP DELETE 'http://'+ port(m) + ':1235/products' PARAMS exportFile() TO result;
                    
                    cleared(m, t) <- TRUE;
                }
                
                IF groupsImages() THEN EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/upload/categoryImage' BODYPARAMNAMES 'file' PARAMS groupsImages() TO result;
                
                EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/category' PARAMS groups() TO result;
                
                IF itemsImages() THEN EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/upload/productImage' BODYPARAMNAMES 'file' PARAMS itemsImages() TO result;
                
                EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/products' PARAMS items() TO result;
                
            } CATCH {
                error() <- TRUE;
                NEW er = MachineryPriceTransactionError {
                    LOCAL code = STRING ();
                    IMPORT JSON FROM result() TO() code;
                    machineryPriceTransaction(er) <- t;
                    data(er) <- CONCAT ' ', messageCaughtException(), 'error: ' + code();
                    date(er) <- currentDateTime();
                    errorTrace(er) <- CONCAT '\n\n', lsfStackTraceCaughtException(), javaStackTraceCaughtException ();
                }
            }
            
            IF NOT error() THEN {
                succeeded(m, t) <- TRUE;
            }
            
        }
        
        IF (GROUP SUM 1 IF groupMachinery(Machinery m) == groupMachinery(t) AND (in(t, m) OR NOT npps(t)) AND NOT inactive(m)) ==
            (GROUP SUM 1 IF groupMachinery(Machinery m) == groupMachinery(t) AND succeeded(m, t)) THEN {
                succeeded(t) <- TRUE;
                dateTimeSucceeded (t) <- currentDateTime();
            }
            
        APPLY;
    }
}