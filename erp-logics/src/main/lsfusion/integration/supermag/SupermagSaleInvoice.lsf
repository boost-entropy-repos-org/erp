MODULE SupermagSaleInvoice;

REQUIRE SupermagSettings, SupermagFormMeta, SaleInvoice, SaleShipment, SaleInvoiceContract, Utils, PricingSale, PriceListLedger;

NAMESPACE Sale;

@settingOperationSupermag(Sale);

overApplySaleInvoice 'Экспорт с Супермаг' ABSTRACT LIST (Sale.Invoice);

EXTEND FORM Sale.invoices
    PROPERTIES (i) overApplySaleInvoice TOOLBAR 
    PROPERTIES (i) id SHOWIF showIDs()
;
DESIGN Sale.invoices {
    actionContainer{
        NEW mag { caption = 'Супермаг'; MOVE PROPERTY (overApplySaleInvoice(i)); }        
    }
}

userInvoiceApply 'Сохранить ' (UserInvoice doc) {
    formApply();
    IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
    overApplySaleInvoice(doc);
}

EXTEND FORM userInvoice  PROPERTIES userInvoiceApply(i) TOOLBAR;

DESIGN userInvoice {
    TOOLBARRIGHT {
        MOVE PROPERTY (userInvoiceApply(i)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

//-- предполагаем, что дата оплаты для накладной только одна
lastInvoiceContractLedger 'Дата оплаты' = GROUP LAST Sale.InvoiceContractLedger l ORDER date(l),l BY inContractLedger(l);// MATERIALIZED;
lastPaymentPeriod = GROUP MAX PaymentPeriod p BY paymentCondition(p);                            

@settingIntegration(Sale.Invoice, Sale.InvoiceDetail);

dateTimeChange[StockDocumentLedger](InvoiceShipment doc) += dateTimeChange(invoice(doc));
bornin[StockDocumentLedger](InvoiceShipment doc) += bornin(invoice(doc));

@exportFilds(invoice, invoiceDetail);

@exportFormWO(exportSaleInvoiceWO, invoice, invoiceDetail, 'Накладная (продажа)');

EXTEND FORM exportSaleInvoiceWO FORMEXTID 'PACKAGE'  
    PROPERTIES ATTR = exportTime(currentDateTime())  EXTID 'name'                                             
            
    //-- сама накладная
  //  PROPERTIES i2 = creditInvoiceSumInvoiceDetail(doc) EXTID 'SUPPLDOCSUM' IN SMWAYBILLSIN 
    PROPERTIES = (CONCAT '',series(doc),number(doc)) EXTID 'SUPPLIERDOC' IN SMWAYBILLSOUT        
    PROPERTIES = exportTime(dateTime(doc))  EXTID 'SUPPLIERDOCCREATE' IN SMWAYBILLSOUT
    
    PROPERTIES = exportTime(toDateTime(expiryDate(docd5))) EXTID 'VALIDDATE'                
    
    OBJECTS docd6= InvoiceDetail EXTID 'SLSPECQMISMATCH' IN WO
    PROPERTIES = docId(docd6) EXTID 'DOCID'    
    PROPERTIES = 'WO' IF docd6 IS InvoiceDetail EXTID 'DOCTYPE'      
    PROPERTIES = quantity(docd6) EXTID 'QUANTBYDOC'                  
    FILTERS invoice(docd6)==doc     
    
    PROPERTIES = index(docd) EXTID 'SPECITEM'
    PROPERTIES = index(docd2) EXTID 'SPECITEM'
    PROPERTIES = index(docd3) EXTID 'SPECITEM'
    PROPERTIES = index(docd4) EXTID 'SPECITEM'
    PROPERTIES = index(docd5) EXTID 'SPECITEM'
    PROPERTIES = index(docd6) EXTID 'SPECITEM'
        
    OBJECTS o = Order EXTID 'SMCOMMONBASES' IN WO 
    PROPERTIES = STRING[100](docid(doc)) IF o IS Order EXTID 'ID'  
    PROPERTIES = 'WO' IF o IS Order EXTID 'DOCTYPE'     
    PROPERTIES = 'OR' IF o IS Order EXTID 'BASEDOCTYPE'                    
    PROPERTIES = id(o) EXTID 'BASEID' 
    FILTERS include(o,doc)                

    OBJECTS c = ContractSku EXTID 'SMCOMMONBASES' IN WO 
    PROPERTIES = STRING[100](docid(doc)) IF c IS ContractSku EXTID 'ID'   
    PROPERTIES = 'WO' IF c IS ContractSku EXTID 'DOCTYPE'     
    PROPERTIES = 'CO' IF c IS ContractSku EXTID 'BASEDOCTYPE'                    
    PROPERTIES = id(c) EXTID 'BASEID' 
    FILTERS c=contractSku(doc)                
; 

@exportFormFO(exportSaleInvoiceWO, invoice, invoiceDetail, 'Накладная (продажа)');

exportSaleInvoiceWO 'Экспорт в супермаг' (Invoice doc) {
    inc(Invoice ii) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();
        dt () <- currentDateTime();
        inc(doc) <- TRUE;
        // для накладной берем первые параметры, для возврата вторые
        FOR iterate(INTEGER n, 1, 1) DO {
                doctype(doc) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                opcode(doc) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(doc) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                docstate(doc) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                docid(doc) <- seriesNumber(doc);                 
                id(doc) <- CONCAT '', doctype(doc), seriesNumber(doc);                 
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(doc); 
                bornin(doc) <- OVERRIDE bornin(doc), baseIDSupermag();
                clientIndex(doc) <- id(customer(doc));
                locationFrom(doc) <- supplierStock(doc);
                locationTo(doc) <- NULL IF doc IS Invoice;                
                location(doc)  <- NULL IF doc IS Invoice;                             
                priceRoundMode(doc) <- 4 IF doc IS Invoice;                                                
                id(InvoiceDetail docd) <- (CONCAT '~',id(doc),index(docd)) WHERE invoice(docd) = doc;
                quantityExp(InvoiceDetail docd) <- quantity(docd);
                 priceWithTax(InvoiceDetail docd) <- invoicePrice(docd) WHERE invoice(docd) = doc;
                valueTax(InvoiceDetail docd) <- valueVAT(docd) WHERE invoice(docd) = doc;
                priceNoTax(InvoiceDetail docd) <- price(docd) WHERE invoice(docd) = doc;
                sumWithTax(InvoiceDetail docd) <- abs(invoiceSum(docd)) WHERE invoice(docd) = doc;
                sumNoTax(InvoiceDetail docd) <- abs(sum(docd)) WHERE invoice(docd) = doc;
                sumTax(InvoiceDetail docd) <- VATSum(docd) WHERE invoice(docd) = doc;
                sumWithTaxCurr(InvoiceDetail docd) <-round(sumWithTax(docd)/curRate(doc),2) WHERE invoice(docd) = doc;
            //    priceManufacturer(InvoiceDetail docd) <- manufacturingPrice(docd) WHERE invoice(docd) = doc;
            //    priceRetail(InvoiceDetail docd) <- retailPrice(docd) WHERE invoice(docd) = doc;
                sumWithTax(doc) <- GROUP SUM abs(sumWithTax(InvoiceDetail add)) IF invoice(add) = doc;                
                sumWithTaxCurr(doc) <- GROUP SUM sumWithTaxCurr(InvoiceDetail add) IF invoice(add) = doc; 
                createFinobligation(doc)  <- createFinobligation(operation(doc));                               
           TRY {                
                EXPORT exportSaleInvoiceWO XML TO System.exportFile;
           } CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WO_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           
           TRY {          
                WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
                WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
           } CATCH {
                logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WO_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());           
           }
           
           TRY 
           {      
                fileExists('file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt()) + '.xml'); 
                IF fileExists()  THEN NEWSESSION NESTED LOCAL {
                    FOR inc(Invoice ii)  DO NEW log = SupermagLog {
                        id(log)<- doctype(doc) + '_' +STRING[30](LONG(ii))+'_'+(OVERRIDE id(ii), '')+'_'+ formulaDateT(dt());  
                        dateTime(log) <- currentDateTime();
                        userLogin(log) <- login(currentUser()); 
                        nameContact(log) <- STRING[100](name(currentUser()));
                        stockDocumentLedger(log) <- invoiceShipment(ii);
                    }     
                    APPLY NESTED LOCAL;
                }             
                     
           } CATCH {
                logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WO_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           }
        } 
    }       
    inc(Invoice ii) <- NULL;
    APPLY;
}

overApplySaleInvoice (Sale.UserInvoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'WO' AND (isPosted(doc) OR createShipment(doc)) THEN exportSaleInvoiceWO(doc);
}

//-------------------------------------------------------------------------------------------------------------------импорт
overImportSaleInvoice ABSTRACT LIST ();

importSaleInvoiceWO 'Импорт накладные (продажа)' () {
      
    LOCAL paymentCondition = PaymentCondition (STRING);
    
    filterSql() <- 'D.DocType = \'WO\' AND b.DocType(+)= D.DocType AND b.id(+) = d.id AND d.locationfrom IN ('+ stocks() + ')  AND d.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\')'; 
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'D.DocType = \'WO\' AND b.DocType(+)= D.DocType AND b.id(+) = d.id AND d.id = \'' + numberImportDocument() + '\''; 
       
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary from Supermag.SMDocuments d, Supermag.SMWayBillsOut b where ' + filterSql() TO SupermagSettings.file;   
    
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationFrom, comment;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(clientIndex(i)), STRING(locationFrom(i)), STRING(comment(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF Sale.operation1Supermag(codeOperation(i)) AND NOT docState(i) = 1](STRING[50] newId) AND NOT userInvoice(newId) DO NEW o = UserInvoice {
        id(o) <- newId;
    }

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary from Supermag.SMDocuments d, Supermag.SMWayBillsOut b where ' + filterSql();
        MESSAGE idDoc(0);
        MESSAGE currentVersion(0);
        MESSAGE name(Sale.operation1Supermag(codeOperation(0)));
    }
      
    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) AND NOT currentVersion(i) = Sale.lastVersion[Invoice](doc) DO {       
        number[Document](doc) <- STRING[28](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- Sale.operation1Supermag(codeOperation(i));
        isPosted(doc) <- docState(i) == 3;
        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        isClosed(doc) <- docState(i) == 0;
        lastStatusSupermag[UserInvoice](doc) <- docState(i);
        supplier(doc) <- legalEntity(stock(ISTRING[100] (locationFrom(i))));
        supplierStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        customer(doc) <- legalEntity(STRING(clientIndex(i)));
        customerStock(doc) <- stock(ISTRING[100] (clientIndex(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- 00:00;
        imported(doc) <- TRUE;
        lastVersion[Invoice](doc) <- currentVersion(i);
    }  
    
    overImportSaleInvoice();

    //импорт спецификаций
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
        EXEC 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt WHERE ds.DocType = d.DOCTYPE AND ds.DOCID = d.id AND dt.DocType = \'WO\' AND dt.DOCID = d.id  AND ds.SPECITEM = dt.SPECITEM AND ' + filterSql() TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, locationTo, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), 
                                                STRING(itemPrice(i)), STRING(itemPriceNoTax(i)), STRING(totalPrice(i)), STRING(totalPriceNoTax(i)),  
                                                STRING(taxSum(i)), STRING(taxRate(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt WHERE ds.DocType = d.DOCTYPE AND ds.DOCID = d.id AND dt.DocType = \'WO\' AND dt.DOCID = d.id  AND ds.SPECITEM = dt.SPECITEM AND ' + filterSql();
        MESSAGE idDet(0);
        MESSAGE currentVersion(0);        
    }

    FOR Sale.userInvoice(idDoc(INTEGER i)) AND NOT Sale.userInvoiceDetail(idDet(i)) DO NEW d = Sale.UserInvoiceDetail {
        id(d) <- idDet(i);
        Sale.userInvoice(d) <- Sale.userInvoice(idDoc(i));
    }

    FOR Sale.UserInvoiceDetail det = Sale.userInvoiceDetail(idDet(INTEGER i)) AND NOT currentVersion(i) = Sale.lastVersion[InvoiceDetail](det) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
        invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
        VATSum(det) <- taxSum(i);
        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
     //   priceListType(det) <- priceListType(stock(ISTRING[100] (locationTo(i))));
        retailPrice(det) <- retailPricingPriceA(sku(det), stock(ISTRING[100] (locationTo(i))), currentDateTime());
        retailVAT(det) <- VAT(sku(det));         
        shipmentPrice(det) <- retailPrice(det); 
        imported(det) <- TRUE;
        lastVersion[InvoiceDetail](det) <- currentVersion(i);
   }
   
    APPLY;           
}

EXTEND FORM integrationData PROPERTIES importSaleInvoiceWO();
