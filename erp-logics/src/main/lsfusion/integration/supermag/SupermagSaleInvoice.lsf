MODULE SupermagSaleInvoice;

REQUIRE SupermagSettings, SupermagFormMeta, SupermagExportForms, SaleInvoice, SaleShipment, SaleInvoiceContract, Utils, PricingSale, PriceListLedger, SaleManufacturingPrice, SaleInvoiceConsignmentBy;

NAMESPACE Sale;

@settingOperationSupermag(Sale);

overApplySaleInvoice 'Экспорт в Супермаг' ABSTRACT LIST (Sale.Invoice);

EXTEND FORM Sale.invoices
    PROPERTIES (i) overApplySaleInvoice TOOLBAR 
    PROPERTIES (i) id SHOWIF showIDs()
;
DESIGN Sale.invoices {
    actionContainer{
        NEW mag { caption = 'Супермаг'; MOVE PROPERTY (overApplySaleInvoice(i)); }        
    }
}

userInvoiceApply 'Сохранить ' (UserInvoice doc) {
    formApply();
    IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
    overApplySaleInvoice(doc);
}

EXTEND FORM userInvoice  PROPERTIES userInvoiceApply(i) TOOLBAR;

DESIGN userInvoice {
    TOOLBARRIGHT {
        MOVE PROPERTY (userInvoiceApply(i)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

//-- предполагаем, что дата оплаты для накладной только одна
lastInvoiceContractLedger 'Дата оплаты' = GROUP LAST Sale.InvoiceContractLedger l ORDER date(l),l BY inContractLedger(l);// MATERIALIZED;
lastPaymentPeriod = GROUP MAX PaymentPeriod p BY paymentCondition(p);                            

@settingIntegration(Sale.Invoice, Sale.InvoiceDetail);

dateTimeChange[StockDocumentLedger](InvoiceShipment doc) += dateTimeChange(invoice(doc));
bornin[StockDocumentLedger](InvoiceShipment doc) += bornin(invoice(doc));

overInvoiceDocSum = ABSTRACT NUMERIC[18,4] (Invoice);

exportSaleInvoiceWO 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain d) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',1));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',1));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',1));
                creatdate(expMain) <- shipmentDateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(expMain); 
                invoiceDocCreate(expMain) <- dateTime(doc);
                invoiceDocSum(expMain) <- OVERRIDE overInvoiceDocSum(doc), sumInvoiceConsignmentDetail(doc);
                invoiceDocNumber(expMain) <- CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc); //OVERRIDE  (CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc)), seriesNumber(doc);      
                priceRoundMode(expMain) <- 4 IF doc IS Invoice;                                                
                createFinobligation(expMain)  <- createFinobligation(operation(doc));                               
                clientIndex(expMain) <- id(customer(doc));
                locationFrom(expMain) <- id(supplierStock(doc));
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));                                              
                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE quantity(docd), 0; //quantity(docd);
                        blankquantity(expDet) <- OVERRIDE quantityOrder(docd), quantity(docd), 0;
                        priceWithTax(expDet) <- invoicePrice(docd);
                        valueTax(expDet) <- valueVAT(docd);
                        priceNoTax(expDet) <- price(docd);
                        priceWithTaxCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(invoiceSum(docd)), 0;
                        sumNoTax(expDet) <- OVERRIDE abs(sum(docd)), 0;
                        sumTax(expDet) <- OVERRIDE VATSum(docd), 0;
                        sumWithTaxCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                        extracharge(expDet) <-OVERRIDE wholesaleMarkup(docd), 0;
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                    
                    }
                    
                }           
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumWithTaxCurr(expMain) <- GROUP SUM sumWithTaxCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                FOR include(Order o, doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(o);
                    doctype(b) <- 'OR';
                }
                
                FOR ContractSku c = contractSku(doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(c);
                    doctype(b) <- 'CO';
                }                                
                
         //       acceptsum(expMain)  <- creditInvoiceSumInvoiceDetail(doc);
                basesum(expMain) <- invoiceSumInvoiceDetail(doc);
                calcenddate(expMain) <- OVERRIDE dateTime(lastInvoiceContractLedger(doc)), shipmentDateTime(doc);
                paymentdelay(expMain) <- countDays(lastPaymentPeriod(paymentCondition(doc)));
                finagent(expMain) <- id(supplier(doc)); 
                iscalendardelay(expMain) <- IF bankingDays(paymentCondition(doc)) THEN '0' ELSE '1'; 
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportWO XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    
//                    dt () <- currentDateTime();        
//                    TRY EXPORT exportFI XML TO System.exportFile;
//                    CATCH logToFile('supermag', CONCAT '\n', 'Финансовое обязательство', 'file://' + exportDirectorySupermag() + '/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
//                    TRY {
//                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
//                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
//                        }
//                    CATCH logToFile('supermag', CONCAT '\n', 'Финансовое обязательство', 'file://' + exportDirectorySupermag() + '/' + 'FI_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                
                inc(expMain) <- NULL;
        }         
    }       
    APPLY;
}

overApplySaleInvoice (Sale.UserInvoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'WO' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createShipment(doc)) THEN exportSaleInvoiceWO(doc);
}

//-------------------------------------------------------------------------------------------------------------------импорт
overImportSaleInvoice2 ABSTRACT LIST ();

importSaleInvoiceWO 'Импорт накладные (продажа)' () {
      
    LOCAL paymentCondition = PaymentCondition (STRING);       
    
    filterSql() <- 'NOT d.DOCTYPE = \'IW\' AND b.DocType(+)= D.DocType AND b.id(+) = d.id AND d.locationfrom IN ('+ stocksImport() + ')  AND d.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( ';
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',1) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',1) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',1)), ('d.USEROP = ' + getWord(useropSupermag(op),';',1)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
          
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
    
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'D.DocType = \'WO\' AND b.DocType(+)= D.DocType AND b.id(+) = d.id AND d.id = \'' + numberImportDocument() + '\''; 
       
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary from Supermag.SMDocuments d, Supermag.SMWayBillsOut b where ' + filterSql() TO SupermagSettings.file;   
    
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationFrom, comment;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(clientIndex(i)), STRING(locationFrom(i)), STRING(comment(i)), STRING(suppldocNumber(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF Sale.operation1Supermag(codeOperation(i)) AND NOT docState(i) = 1](STRING[50] newId) AND NOT userInvoice(newId) DO NEW o = UserInvoice {
        id(o) <- newId;
    }

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary from Supermag.SMDocuments d, Supermag.SMWayBillsOut b where ' + filterSql();
        MESSAGE idDoc(0);
        MESSAGE currentVersion(0);
        MESSAGE name(Sale.operation1Supermag(codeOperation(0)));
    }
      
    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) AND Sale.operation1Supermag(codeOperation(i)) AND NOT currentVersion(i) = Sale.lastVersion[Invoice](doc) DO {       
        number[Document](doc) <- STRING[28](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- Sale.operation1Supermag(codeOperation(i));
        isPosted(doc) <- docState(i) == 3;
        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        isClosed(doc) <- docState(i) == 0;
        lastStatusSupermag[UserInvoice](doc) <- docState(i);
        supplier(doc) <- legalEntity(stock(ISTRING[100] (locationFrom(i))));
        supplierStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        customer(doc) <- legalEntity(STRING(clientIndex(i)));
        customerStock(doc) <- stock(ISTRING[100] (clientIndex(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- 00:00;
        imported(doc) <- TRUE;
        lastVersion[Invoice](doc) <- currentVersion(i);
    }  
    
    //импорт оснований для накладных
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype' TO SupermagSettings.file;
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));
    
    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype';
        MESSAGE idDoc(0) +  ' ' + idBase(0);
    }

    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) AND userContractSku(idBase(i)) DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }        
        
    overImportSaleInvoice2();

    //импорт спецификаций
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
        EXEC 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = d.DOCTYPE AND ds.DOCID = d.id AND dt.DocType = \'WO\' AND dt.DOCID = d.id  AND ds.SPECITEM = dt.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql() TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, locationTo, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), 
                                                STRING(itemPrice(i)), STRING(itemPriceNoTax(i)), STRING(totalPrice(i)), STRING(totalPriceNoTax(i)),  
                                                STRING(taxSum(i)), STRING(taxRate(i)), STRING(priceManufacturer(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = d.DOCTYPE AND ds.DOCID = d.id AND dt.DocType = \'WO\' AND dt.DOCID = d.id  AND ds.SPECITEM = dt.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql();
        MESSAGE idDet(0);
        MESSAGE currentVersion(0);        
    }

    FOR Sale.userInvoice(idDoc(INTEGER i)) AND NOT Sale.userInvoiceDetail(idDet(i)) DO NEW d = Sale.UserInvoiceDetail {
        id(d) <- idDet(i);
        Sale.userInvoice(d) <- Sale.userInvoice(idDoc(i));
    }

    FOR Sale.UserInvoiceDetail det = Sale.userInvoiceDetail(idDet(INTEGER i)) AND NOT currentVersion(i) = Sale.lastVersion[InvoiceDetail](det) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
        invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
        VATSum(det) <- taxSum(i);
        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
     //   priceListType(det) <- priceListType(stock(ISTRING[100] (locationTo(i))));
        retailPrice(det) <- retailPricingPriceA(sku(det), stock(ISTRING[100] (locationTo(i))), currentDateTime());
        retailVAT(det) <- VAT(sku(det));         
        shipmentPrice(det) <- retailPrice(det);
        manufacturingPrice(det) <- priceManufacturer(i); 
        imported(det) <- TRUE;
        lastVersion[InvoiceDetail](det) <- currentVersion(i);
   }
   
    APPLY;           
}

EXTEND FORM integrationData PROPERTIES importSaleInvoiceWO();
