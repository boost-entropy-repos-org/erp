MODULE SupermagInternalWay;

REQUIRE SupermagSaleInvoice, PricingSalePurchase, SalePurchaseInvoiceShipment, SaleManufacturingPrice;

PRIORITY SupermagSettings;

NAMESPACE Sale;

overExportSaleInvoiceIW ABSTRACT LIST (Invoice, DocMain);

exportSaleInvoiceIW 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain expMain) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();        
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',1));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',1));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',1));
                creatdate(expMain) <- shipmentDateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(expMain); 
                invoiceDocCreate(expMain) <- dateTime(doc);
                invoiceDocSum(expMain) <- OVERRIDE overInvoiceDocSum(doc), sumInvoiceConsignmentDetail(doc);
                invoiceDocNumber(expMain) <- CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc); //OVERRIDE  (CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc)), seriesNumber(doc);      
                priceRoundMode(expMain) <- 0 IF doc IS Invoice;                                                
                createFinobligation(expMain)  <- createFinobligation(operation(doc));                               
                locationFrom(expMain) <- id(supplierStock(doc));
                locationTo(expMain) <- id(customerStock(doc));
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));                   
                                                           
                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE quantity(docd), 0;
                        blankquantity(expDet) <- OVERRIDE quantityOrder(docd), quantity(docd), 0;
                        priceWithTax(expDet) <- invoicePrice(docd);
                        valueTax(expDet) <- valueVAT(docd);
                        priceNoTax(expDet) <- price(docd);
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(invoiceSum(docd)), 0;
                        sumNoTax(expDet) <- OVERRIDE abs(sum(docd)), 0;
                        sumTax(expDet) <- OVERRIDE VATSum(docd), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                        extracharge(expDet) <-OVERRIDE wholesaleMarkup(docd), 0;
                        expiryDate(expDet) <- expiryDate(docd); 
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                    
                    }
                    
                }           
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                FOR include(Order o, doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(o);
                    doctype(b) <- 'OR';
                }
                
                FOR ContractSku c = contractSku(doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(c);
                    doctype(b) <- 'CO';
                }                                
                
         //       acceptsum(expMain)  <- creditInvoiceSumInvoiceDetail(doc);
                basesum(expMain) <- invoiceSumInvoiceDetail(doc);
                calcenddate(expMain) <- OVERRIDE dateTime(lastInvoiceContractLedger(doc)), shipmentDateTime(doc);
                paymentdelay(expMain) <- countDays(lastPaymentPeriod(paymentCondition(doc)));
                finagent(expMain) <- id(supplier(doc)); 
                iscalendardelay(expMain) <- IF bankingDays(paymentCondition(doc)) THEN '0' ELSE '1'; 
                
                overExportSaleInvoiceIW(doc, expMain);
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportIW XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'IW_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                
                inc(expMain) <- NULL;
        }                        
    }       
    inc(DocMain expMain) <- NULL;
    APPLY;
}

overApplySaleInvoice (Sale.UserInvoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'IW' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createShipment(doc)) THEN exportSaleInvoiceIW(doc);
}

//-----------------------------------------------------------------------------------------------------импорт
overImportInternalWay ABSTRACT LIST ();
overImportInternalWay2 ABSTRACT LIST ();

importInternalWay 'Импорт накладные перемещение' () {     
   
    filterSql() <- 'doc.DocType = \'IW\' AND (doc.locationfrom IN ('+ stocksImport() + ') OR doc.locationto IN ('+ stocksImport() + ') ) AND doc.CreateDat >= TO_DATE(\'' + toDateISO(SupermagSettings.dateFromImportDocument[]()) + '\',\'YYYY-MM-DD\')'; 
    IF length(SupermagSettings.numberImportDocument[]()) > 0 THEN filterSql() <- 'doc.DocType = \'IW\' AND doc.id = \'' + SupermagSettings.numberImportDocument[]() + '\''; 
       
    EXTERNAL SQL connectionString()  
    EXEC 'Select doc.ID, doc.doctype, doc.opcode, doc.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), doc.createdat, doc.docstate, doc.locationto, doc.locationfrom, doc.Commentary from Supermag.SMDocuments doc where ' + filterSql() TO SupermagSettings.file;   
    
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, locationTo, locationFrom, comment;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(locationTo(i)), STRING(locationFrom(i)), STRING(comment(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) AND NOT docState(i) = 1](STRING[50] newId) AND NOT userInvoice(newId) DO NEW o = UserInvoice {
        id(o) <- newId;
    }
    
    IF length(SupermagSettings.numberImportDocument[]()) > 0 THEN { //для отладки
        MESSAGE 'Select doc.ID, doc.doctype, doc.opcode, doc.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), doc.createdat, doc.docstate, doc.locationto, doc.locationfrom, doc.Commentary from Supermag.SMDocuments doc where ' + filterSql();
        MESSAGE idDoc(0);
        MESSAGE currentVersion(0);
        MESSAGE name(operation1Supermag(codeOperation(0)));
    }
      
    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) AND NOT currentVersion(i) = Sale.lastVersion[Invoice](doc) DO {       
        number[Document](doc) <- STRING[28](docNumber(i));
        operation(doc) <- operation1Supermag(codeOperation(i));
        isPosted(doc) <- docState(i) == 3;
        bornin(doc) <- bornIn(i);
        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        createPurchaseShipment(doc) <- docState(i) == 2 OR docState(i) == 3;
        isClosed(doc) <- docState(i) == 0;
        lastStatusSupermag[UserInvoice](doc) <- docState(i);
        supplierStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        supplier(doc) <- legalEntity(supplierStock(doc));
        customerStock(doc) <- stock(ISTRING[100] (locationTo(i)));
        customer(doc) <- legalEntity(customerStock(doc));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- 00:00;
        imported(doc) <- TRUE;
        lastVersion[Invoice](doc) <- currentVersion(i);
    }  
    
    overImportInternalWay();
    
    //импорт оснований для накладных
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select doc.ID, doc.doctype, doc.opcode, doc.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments doc, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=doc.id AND bs.doctype(+)=doc.doctype' TO SupermagSettings.file;
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));
    
    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select doc.ID, doc.doctype, doc.opcode, doc.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments doc, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=doc.id AND bs.doctype(+)=doc.doctype';
        MESSAGE idDoc(0) +  ' ' + idBase(0);
    }

    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) AND userContractSku(idBase(i)) DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }        
    
    overImportInternalWay2();

    //импорт спецификаций
    EXTERNAL SQL connectionString()  
        EXEC 'SELECT doc.ID, doc.DOCTYPE, doc.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE FROM Supermag.SMDocuments doc, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = doc.DOCTYPE AND ds.DOCID = doc.id AND dt.DocType(+) = ds.DOCTYPE AND dt.DOCID(+) = ds.DOCID AND dt.SPECITEM(+) = ds.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql() TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, locationTo, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), 
                                                STRING(itemPrice(i)), STRING(itemPriceNoTax(i)), STRING(totalPrice(i)), STRING(totalPriceNoTax(i)),  
                                                STRING(taxSum(i)), STRING(taxRate(i)), STRING(priceManufacturer(i)) ) IF idDet(i);                  

    IF length(SupermagSettings.numberImportDocument[]()) > 0 THEN { //для отладки
        MESSAGE 'SELECT doc.ID, doc.DOCTYPE, doc.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE FROM Supermag.SMDocuments doc, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = doc.DOCTYPE AND ds.DOCID = doc.id AND dt.DocType(+) = ds.DOCTYPE AND dt.DOCID(+) = ds.DOCID AND dt.SPECITEM(+) = ds.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql();
        MESSAGE idDet(0);
        MESSAGE currentVersion(0);        
    }

    FOR Sale.userInvoice(idDoc(INTEGER i)) AND NOT Sale.userInvoiceDetail(idDet(i)) DO NEW d = Sale.UserInvoiceDetail {
        id(d) <- idDet(i);
        Sale.userInvoice(d) <- Sale.userInvoice(idDoc(i));
    }

    FOR Sale.UserInvoiceDetail det = Sale.userInvoiceDetail(idDet(INTEGER i)) AND NOT currentVersion(i) = Sale.lastVersion[InvoiceDetail](det) DO {
        sku(det) <- item(idItem(i));
//        shipmentQuantity(det) <- quantity(i);
//        pricingQuantity(det) <- quantity(i);
        quantity(det) <- quantity(i);
        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
        invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
        VATSum(det) <- taxSum(i);
        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
     //   priceListType(det) <- priceListType(stock(ISTRING[100] (locationTo(i))));
        retailPrice(det) <- OVERRIDE retailPricingPriceA(sku(det), stock(ISTRING[100] (locationFrom(i))), currentDateTime()), NUMERIC[16,4](itemPrice(i));       
        retailVAT(det) <- VAT(sku(det));
        valueRetailVAT(det) <- taxRate(i);                 
        purchaseRetailPrice(det) <- OVERRIDE retailPricingPriceA(sku(det), stock(ISTRING[100] (locationTo(i))), currentDateTime()), NUMERIC[16,4](itemPrice(i));
        purchaseRetailVAT(det) <- VAT(sku(det));
        valuePurchaseRetailVAT(det) <- taxRate(i);       
        shipmentPrice(det) <- NUMERIC[16,4](itemPrice(i));
        shipmentSum(det) <- NUMERIC[16,4](totalPrice(i)); 
        manufacturingPrice(det) <- priceManufacturer(i);
        imported(det) <- TRUE;
        lastVersion[InvoiceDetail](det) <- currentVersion(i);
   }
   
    APPLY;           
}

EXTEND FORM integrationData PROPERTIES importInternalWay();
