MODULE SupermagIntegration;

REQUIRE StockDocument, LogTools, Store;

host 'Хост' = DATA ISTRING[30]();
base 'База' = DATA ISTRING[100]();
login 'Логин' = DATA ISTRING[100]();
password 'Пароль' = DATA ISTRING[100]();

EXTEND FORM integrationData PROPERTIES smhost = host(), base(), login(), password();

DESIGN integrationData {
    pane {
        NEW supermagScroll FIRST {
            type = SCROLL;
            caption = 'Супермаг';
            NEW supermag {                
                fill = 1;
                
                NEW supermagParams {
                    caption = 'Параметры';
                    MOVE PROPERTY (smhost);
                    MOVE PROPERTY (base());
                    MOVE PROPERTY (login());
                    MOVE PROPERTY (password());
                }
                NEW supermagExportButtons { 
                    caption = 'Экспорт';
                }               
                NEW supermagImportButtons { 
                    caption = 'Импорт';
                }
}   }   }   }

exportDirectorySupermag 'Путь для исходящих файлов в супермаг' = DATA STRING[500] ();
importDirectorySupermag 'Путь для входящих файлов из супермаг' = DATA STRING[500] ();
baseIDSupermag 'ID нашей базы в Супермаг' = DATA STRING[100] ();

EXTEND FORM integrationData 
    PROPERTIES() exportDirectorySupermag, importDirectorySupermag, baseIDSupermag
;

DESIGN integrationData {
        supermagParams {
            MOVE PROPERTY (exportDirectorySupermag());  
            MOVE PROPERTY (importDirectorySupermag());     
            MOVE PROPERTY (baseIDSupermag());
        }
}

dateTimeChange 'Дата/время изменения' = ABSTRACT DATETIME (StockDocumentLedger);
bornin 'ИД базы создателя' = ABSTRACT STRING[100] (StockDocumentLedger);
exportSupermag 'Экспорт в супермаг' ABSTRACT (StockDocumentLedger);
exportTime (DATETIME dt)=  [FORMULA STRING[20] 'to_char(($1),\'YYYY-MM-DD\') || \'T\' || to_char(($1),\'HH24:MI:SS\')'](dt);
formulaDateT =  [FORMULA STRING[20] 'to_char(($1),\'YYYYMMDDHH24MISSMS\')']( DATETIME dt);

exportSupermagAll 'Экспорт в супермаг' ABSTRACT LIST ();

EXTEND FORM integrationData 
    PROPERTIES()  exportSupermagAll
;

DESIGN integrationData {
    pane {
        supermagExportButtons {
            MOVE PROPERTY (exportSupermagAll());   
}   }   }

docTypeSupermag 'Вид документа в супермаг' = DATA STRING[10] (Operation.Operation);
opcodeSupermag 'Код в супермаг' = DATA STRING[10] (Operation.Operation); 
useropSupermag 'Доп код в супермаг' = DATA STRING[10] (Operation.Operation); 
nameSuperMag 'Название в супермаг' = DATA STRING[200] (Operation.Operation);  
createFinobligation 'Фин.обязательство' = DATA BOOLEAN (Operation.Operation);  

contragentSupermag 'Контрагент для инвентаризаций с супермаг' = DATA LegalEntity (StockGroup);
nameContragentSupermag 'Контрагент для инвентаризаций с супермаг' (StockGroup sg) = name(contragentSupermag(sg));

EXTEND FORM stores  PROPERTIES nameContragentSupermag(s) READONLY;
EXTEND FORM store   PROPERTIES nameContragentSupermag(s);
DESIGN store {  headerExtraParams{
        MOVE PROPERTY (nameContragentSupermag(s));
}}

CLASS SupermagLog 'История' ;
TABLE supermagLog (SupermagLog);
id 'Код' = DATA STRING[100] (SupermagLog);
dateTime 'Дата/время' = DATA DATETIME (SupermagLog);
userLogin 'Логин пользователя' = DATA STRING[100] (SupermagLog) CHARWIDTH 15; 
nameContact 'Имя пользователя' =  DATA STRING[100] (SupermagLog) IN id CHARWIDTH 15;
stockDocumentLedger 'Документ' = DATA StockDocumentLedger (SupermagLog);
dateTimeAnswer 'Дата/время ответа' = DATA DATETIME (SupermagLog);
errorAnswerFile 'Ошибка файла' = DATA BOOLEAN (SupermagLog);
errorAnswer 'Ошибка обработки' = DATA BOOLEAN (SupermagLog);
textError 'Текст ошибки' = DATA TEXT (SupermagLog);

supermagLog = GROUP MAX SupermagLog log BY ISTRING[100](id(log));

lastSupermagLog (StockDocumentLedger l) = GROUP LAST SupermagLog d ORDER dateTime(d), d BY stockDocumentLedger(d);
lastDateTimeSupermagLog 'Последняя выгрузка' = dateTime(lastSupermagLog (StockDocumentLedger l));     
dateTimeAnswerSupermagLog 'Дата/время ответа' = dateTimeAnswer(lastSupermagLog (StockDocumentLedger l));     
errorAnswerFileSupermagLog 'Ошибка файла' = errorAnswerFile(lastSupermagLog (StockDocumentLedger l));     
errorAnswerSupermagLog 'Ошибка обработки' = errorAnswer(lastSupermagLog (StockDocumentLedger l));   
    
isExport 'Загружен' (StockDocumentLedger d)= lastDateTimeSupermagLog(d) AND dateTimeAnswerSupermagLog(d) AND NOT (errorAnswerFileSupermagLog(d) OR errorAnswerSupermagLog(d));
banDroppedExport 'Запрещено удалять документы, которые экспортированы в супермаг' = DATA BOOLEAN ();
prevExportPosted (StockDocumentLedger l) = PREV(active(l) AND isExport(l)); 
//CONSTRAINT DROPPED (StockDocumentLedger l IS StockDocumentLedger) AND PREV(isExport(l)) AND banDroppedExport()
//    MESSAGE 'Запрещено удалять документы, которые экспортированы в супермаг';
CONSTRAINT DROPPED (isExport(StockDocumentLedger l)) AND PREV(isExport(l)) AND banDroppedExport()
    MESSAGE 'Запрещено удалять документы, которые экспортированы в супермаг';    
   
//форма документов обмена с Супермагом
FORM exportSupermag 'Экспорт в супермаг' 
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
    
    OBJECTS ol = StockDocumentLedger
    PROPERTIES(ol) READONLY isClosed, isPosted, date, nameStock,
                   oObjName = objectClassName, description,
                   nameOperation, nameLegalEntity, nameLegalEntityStock, 
                   sumItem, sumContainer, sum, dateTimeChange, lastDateTimeSupermagLog,
                   dateTimeAnswerSupermagLog,errorAnswerFileSupermagLog,errorAnswerSupermagLog, isExport
                   
    FILTERS date(ol) >= dFrom,
            date(ol) <= dTo
    ORDER date(ol), nameStock(ol)    
    FILTERGROUP open FILTER 'Открыт' isOpened(ol) 'F6'   
    FILTERGROUP post FILTER 'Проведен' active(ol) 'F7' DEFAULT 
         
    OBJECTS l = SupermagLog
    PROPERTIES (l) READONLY id, dateTime, userLogin, nameContact, dateTimeAnswer, errorAnswerFile, errorAnswer, textError
    FILTERS stockDocumentLedger(l)==ol
;
DESIGN exportSupermag {
    BOX {        
        OBJECTS {
            MOVE BOX (dates);
            NEW body {
                fill = 1;
                type = SPLITH;
                MOVE BOX(ol){
                    fill = 2;
                }
                MOVE BOX(l);
            }
        }
    }

}

//-- В планировщик
forExport = DATA LOCAL NESTED BOOLEAN (StockDocumentLedger);

exportSupermag 'Экспорт в супермаг' () {   
    IF exportDirectorySupermag() THEN {        
        forExport(StockDocumentLedger d) <- NULL;   
        forExport(StockDocumentLedger d) <- TRUE WHERE dateTimeChange(d) >= currentDateTime();   
        FOR forExport(StockDocumentLedger d) DO {
            exportSupermag(d);
        }
    } ELSE {
        MESSAGE 'Не задан путь для экспорта файлов в супермаг' NOWAIT;
    }
}

//принудительная выгрузка отфильтрованных документов
exportSupermagFilter 'Экспорт в супермаг (фильтр)'() {
    IF exportDirectorySupermag() THEN {
        FOR [ FILTER exportSupermag.ol](StockDocumentLedger l) DO {
            exportSupermag(l);
        }
    } ELSE {
        MESSAGE 'Не задан путь для экспорта файлов в супермаг';
    }
}

EXTEND FORM exportSupermag
    PROPERTIES (ol) exportSupermag TOOLBAR 
    PROPERTIES () exportSupermagFilter TOOLBAR DRAW ol
;

NAVIGATOR {
    stockReports {
        NEW exportSupermag;
    }
}

GROUP POSTOBJECT;
GROUP TOTALPACKAGE;

idDoc = DATA LOCAL STRING();
ERROR = DATA LOCAL STRING(INTEGER);
POSTOBJECTERROR = DATA LOCAL INTEGER(INTEGER);
ERROR1 = DATA LOCAL STRING(INTEGER);
TOTALPACKAGEERROR1 = DATA LOCAL INTEGER(INTEGER);
nameDoc = DATA LOCAL STRING();
packageType = DATA LOCAL STRING();

FORM REPLY
PROPERTIES() nameDoc ATTR, packageType ATTR
PROPERTIES() IN POSTOBJECT idDoc EXTID 'Id'

OBJECTS ERROR = INTEGER IN POSTOBJECT
PROPERTIES(ERROR) ERROR EXTID 'value'

OBJECTS ERROR1 = INTEGER EXTID 'ERROR' IN TOTALPACKAGE
PROPERTIES(ERROR1) ERROR1 EXTID 'value';

importAnswer 'Импорт ответов из супермаг'()  { 
    IF   importDirectorySupermag() THEN {  
        LOCAL importName = ISTRING[100] (INTEGER ); 
        
        fileName(INTEGER i)<- NULL;    
        listFiles('file://' + importDirectorySupermag());
        
        fileName(INTEGER i)<- NULL WHERE fileName(i) AND NOT isISubstring(fileName(i),'.Reply');    
        importName(INTEGER i)<- ISTRING[100](replace(replace(upper(fileName(i)),'.REPLY',''), '.XML','')) WHERE fileName(i) ;    
            
        FOR importName(INTEGER j) AND NOT fileIsDirectory(j) AND supermagLog(importName(j)) == SupermagLog log  DO NEWSESSION NESTED (fileName[INTEGER], importName[INTEGER]) {
            dateTimeAnswer(log) <- NULL;
            errorAnswerFile(log) <- NULL;
            errorAnswer(log) <- NULL;
            textError(log) <- NULL;
            LOCAL importFile = XMLFILE (); 
            
            TRY {
                READ 'file://' + importDirectorySupermag() + '/' + fileName(j) TO importFile;
                IMPORT REPLY XML FROM importFile();
            } CATCH {
                dateTimeAnswer(log)<- currentDateTime();
                errorAnswerFile(log) <- TRUE;
                logToFile('supermagAnswer', CONCAT '\n', 'file://' + fileName(j) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                APPLY;
                RETURN;    
            }
            dateTimeAnswer(log)<- currentDateTime();
            IF (GROUP SUM 1 IF ERROR(INTEGER ii)) OR (GROUP SUM 1 IF ERROR1(INTEGER ii)) THEN {            
                errorAnswer(log)<- TRUE;                      
                textError(log) <- CONCAT '\n', (GROUP CONCAT ERROR(INTEGER ii) IF ERROR(ii), '\n'), 
                                                (GROUP CONCAT ERROR1(INTEGER ii) IF ERROR1(ii), '\n');  
            } 
            APPLY NESTED (fileName[INTEGER], importName[INTEGER]); 
          
            delete('file://' + importDirectorySupermag() + '/' + fileName(j));
            fileName(j) <- NULL;
            importName(j) <- NULL;                
            
        }
    } ELSE {
        MESSAGE 'Не задан путь для загрузки из супермаг' NOWAIT ;
    }
}
EXTEND FORM exportSupermag
    PROPERTIES () importAnswer TOOLBAR DRAW l
;

EXTEND FORM integrationData 
    PROPERTIES() importAnswer, banDroppedExport
;
DESIGN integrationData {
    supermagExportButtons {    
        MOVE PROPERTY (importAnswer());       
        MOVE PROPERTY (banDroppedExport());         
    }    
}

@defineLogRotate(supermag, 5, weekly);

// контроль статусов документов в супермаге
daysStatus 'Дней для синхронизации заказов' = DATA INTEGER ();
dateFromStatus () = sum(currentDate(), -daysStatus());

overCheckDocStatusSupermag ABSTRACT LIST();

docStatusId = DATA LOCAL ISTRING[50] (INTEGER);
docStatusType = DATA LOCAL ISTRING[20] (INTEGER);
docStatusOpcode = DATA LOCAL INTEGER (INTEGER);
docStatusUserop = DATA LOCAL INTEGER (INTEGER);
docStatusBornin = DATA LOCAL ISTRING[100] (INTEGER);
docLocationFrom = DATA LOCAL INTEGER (INTEGER);
docStatusState = DATA LOCAL INTEGER (INTEGER);
maxDocStatusState = DATA LOCAL INTEGER (STRING);

checkDocStatusSupermag 'Контроль статусов документов в Супермаг' () { 
    LOCAL filterSql = TEXT ();
    LOCAL file = FILE ();           
              
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagIntegration.login() + '/' + SupermagIntegration.password() + '@//'+ SupermagIntegration.host() + '/' + SupermagIntegration.base() 
    EXEC 'SELECT d.ID, d.DOCTYPE, d.OPCODE, d.USEROP, d.DOCSTATE, d.LOCATIONFROM FROM Supermag.SMDocuments d WHERE d.CREATEDAT >= TO_DATE(\'' + toDateISO(dateFromStatus()) + '\',\'YYYY-MM-DD\')' TO file;
    
    IMPORT TABLE FROM file() TO docStatusId, docStatusType, docStatusOpcode, docStatusUserop, docStatusState, docLocationFrom;
    
    maxDocStatusState(STRING idDoc) <- [GROUP MAX docStatusState(INTEGER i) BY docStatusId(i)](idDoc);
    
    overCheckDocStatusSupermag();
    
    APPLY;
}

