MODULE SupermagPurchaseInvoice;

REQUIRE SupermagSettings, SupermagFormMeta, PurchaseManufacturingPrice, PurchaseInvoiceConsignmentBy, PricingPurchase, PurchaseCreditNote, PurchaseInvoiceContract, Utils;

NAMESPACE Purchase;

@settingOperationSupermag(Purchase);

exportPurchaseInvoice ABSTRACT LIST (Purchase.Invoice);

EXTEND FORM Purchase.invoices
    PROPERTIES (i) exportPurchaseInvoice TOOLBAR 
    PROPERTIES (i) id SHOWIF showIDs()
;

DESIGN Purchase.invoices {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportPurchaseInvoice(i));
        }        
    }
}

userInvoiceApply 'Сохранить ' (UserInvoice doc) {
    formApply();
    IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
    exportPurchaseInvoice(doc);
}

EXTEND FORM userInvoice  PROPERTIES userInvoiceApply(i) TOOLBAR;

DESIGN userInvoice {
    TOOLBARRIGHT {
        MOVE PROPERTY (userInvoiceApply(i)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

//-- предполагаем, что дата оплаты для накладной только одна
lastInvoiceContractLedger 'Дата оплаты' = GROUP LAST Purchase.InvoiceContractLedger l ORDER date(l),l BY inContractLedger(l);// MATERIALIZED;
lastPaymentPeriod = GROUP MAX PaymentPeriod p BY paymentCondition(p);                            

@settingIntegration(Purchase.Invoice, Purchase.InvoiceDetail);

dateTimeChange[StockDocumentLedger](InvoiceShipment doc) += dateTimeChange(invoice(doc));
bornin[StockDocumentLedger](InvoiceShipment doc) += bornin(invoice(doc));

@exportFilds(invoice, invoiceDetail);

@exportFormWI(exportPurchaseInvoiceWI, invoice, invoiceDetail, 'Накладная (закупка)');

EXTEND FORM exportPurchaseInvoiceWI FORMEXTID 'PACKAGE'  
    PROPERTIES ATTR = exportTime(currentDateTime())  EXTID 'name'                                             
            
    //-- сама накладная
  //  PROPERTIES i2 = creditInvoiceSumInvoiceDetail(doc) EXTID 'SUPPLDOCSUM' IN SMWAYBILLSIN 
//    PROPERTIES = (CONCAT '',series(doc),number(doc)) EXTID 'SUPPLIERDOC' IN SMWAYBILLSIN        
//    PROPERTIES = exportTime(dateTime(doc))  EXTID 'SUPPLIERDOCCREATE' IN SMWAYBILLSIN
    
    PROPERTIES = exportTime(toDateTime(expiryDate(docd5))) EXTID 'VALIDDATE'                
    
    OBJECTS docd6= InvoiceDetail EXTID 'SLSPECQMISMATCH' IN WI
    PROPERTIES = docId(docd6) EXTID 'DOCID'    
    PROPERTIES = 'WI' IF docd6 IS InvoiceDetail EXTID 'DOCTYPE'      
    PROPERTIES = quantity(docd6) EXTID 'QUANTBYDOC'                  
    FILTERS invoice(docd6)==doc     
    
    PROPERTIES = index(docd) EXTID 'SPECITEM'
    PROPERTIES = index(docd2) EXTID 'SPECITEM'
    PROPERTIES = index(docd3) EXTID 'SPECITEM'
    PROPERTIES = index(docd4) EXTID 'SPECITEM'
    PROPERTIES = index(docd5) EXTID 'SPECITEM'
    PROPERTIES = index(docd6) EXTID 'SPECITEM'
        
    OBJECTS o = Order EXTID 'SMCOMMONBASES' IN WI 
    PROPERTIES = STRING[100](docid(doc)) IF o IS Order EXTID 'ID'  
    PROPERTIES = 'WI' IF o IS Order EXTID 'DOCTYPE'     
    PROPERTIES = 'OR' IF o IS Order EXTID 'BASEDOCTYPE'                    
    PROPERTIES = seriesNumber(o) EXTID 'BASEID' 
    FILTERS include(o,doc)                

    OBJECTS c = ContractSku EXTID 'SMCOMMONBASES' IN WI 
    PROPERTIES = STRING[100](docid(doc)) IF c IS ContractSku EXTID 'ID'   
    PROPERTIES = 'WI' IF c IS ContractSku EXTID 'DOCTYPE'     
    PROPERTIES = 'CO' IF c IS ContractSku EXTID 'BASEDOCTYPE'                    
    PROPERTIES = seriesNumber(c) EXTID 'BASEID' 
    FILTERS c=contractSku(doc)                
; 

@exportFormFI(exportPurchaseInvoiceWI, invoice, invoiceDetail, 'Накладная (закупка)');



exportPurchaseInvoiceWI 'Экспорт в супермаг' (Invoice doc) {
    inc(Invoice ii) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();
        dt () <- currentDateTime();
        inc(doc) <- TRUE;
        // для накладной берем первые параметры, для возврата вторые
        FOR iterate(INTEGER n, 1, 1) DO {
                doctype(doc) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                opcode(doc) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(doc) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                creatdat(doc) <- shipmentDateTime(doc);                
                docstate(doc) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                docid(doc) <- seriesNumber(doc);            
                invoiceDocCreate(doc) <- dateTime(doc);
                invoiceDocSum(doc) <- OVERRIDE overInvoiceDocSum(doc), sumInvoiceConsignmentDetail(doc);
                invoiceDocNumber(doc) <- OVERRIDE  (CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc)), seriesNumber(doc);      
                priceRoundMode(doc) <- 4 IF doc IS Invoice;                                                
                id(doc) <- CONCAT '', doctype(doc), seriesNumber(doc);                 
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(doc); 
                bornin(doc) <- OVERRIDE bornin(doc), baseIDSupermag();
                CASE WHEN doctype(doc) = 'WI' THEN {
                        clientIndex(doc) <- id(supplier(doc));
                        locationFrom(doc) <- NULL IF doc IS Invoice;
                        locationTo(doc) <- customerStock(doc);                
                        location(doc)  <- NULL IF doc IS Invoice;                             
                    }                 
                    WHEN doctype(doc) = 'IW' THEN {
                        clientIndex(doc) <- NULL IF doc IS Invoice;
                        locationFrom(doc) <- supplierStock(doc);
                        locationTo(doc) <- customerStock(doc);                
                        location(doc)  <- NULL IF doc IS Invoice;                                                     
                    }                
                id(InvoiceDetail docd) <- (CONCAT '~',id(doc),index(docd)) WHERE invoice(docd) = doc;
                skuId(InvoiceDetail docd) <- id(sku(docd));                                                                           
                quantityExp(InvoiceDetail docd) <- OVERRIDE creditQuantity(docd), quantity(docd);
                priceWithTax(InvoiceDetail docd) <- invoicePrice(docd) WHERE invoice(docd) = doc;
                valueTax(InvoiceDetail docd) <- valueVAT(sku(docd)) WHERE invoice(docd) = doc;
                priceNoTax(InvoiceDetail docd) <- price(docd) WHERE invoice(docd) = doc;
                priceWithTaxCurr(InvoiceDetail docd) <- round(priceWithTax(docd)/curRate(doc),4) WHERE invoice(docd) = doc;
                sumWithTax(InvoiceDetail docd) <- OVERRIDE abs(creditInvoiceSum(docd)), abs(invoiceSum(docd)) WHERE invoice(docd) = doc;
                sumNoTax(InvoiceDetail docd) <- OVERRIDE abs(creditSum(docd)), abs(sum(docd)) WHERE invoice(docd) = doc;
                sumTax(InvoiceDetail docd) <- OVERRIDE creditVATSum(docd), VATSum(docd) WHERE invoice(docd) = doc;
                sumWithTaxCurr(InvoiceDetail docd) <- round(sumWithTax(docd)/curRate(doc),4) WHERE invoice(docd) = doc;
                priceManufacturer(InvoiceDetail docd) <- (IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(docd)) WHERE invoice(docd) = doc;
                extracharge(InvoiceDetail docd) <-(OVERRIDE -manufacturingMarkup(docd),0) WHERE invoice(docd) = doc;
                priceRetail(InvoiceDetail docd) <- (OVERRIDE retailPrice(docd), 0) WHERE invoice(docd) = doc;
                sumWithTax(doc) <- GROUP SUM abs(sumWithTax(InvoiceDetail add)) IF invoice(add) = doc;                
                sumWithTaxCurr(doc) <- GROUP SUM sumWithTaxCurr(InvoiceDetail add) IF invoice(add) = doc; 
                createFinobligation(doc)  <- createFinobligation(operation(doc));                               
                countSpec(doc) <- GROUP SUM 1 IF invoice(InvoiceDetail docd) = doc;
           TRY { 
                CASE WHEN doctype(doc) = 'WI' THEN EXPORT exportPurchaseInvoiceWI XML TO System.exportFile;
                     WHEN doctype(doc) = 'IW' THEN EXPORT exportPurchaseInvoiceWI XML TO System.exportFile;                  
           } CATCH logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           
           TRY {
                IF countSpec(doc) > 0 THEN {          
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
                }
           } CATCH {
                logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());           
           }
           
           TRY 
           {      
                fileExists('file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt()) + '.xml'); 
                IF fileExists()  THEN NEWSESSION NESTED LOCAL {
                    FOR inc(Invoice ii)  DO NEW log = SupermagLog {
                        id(log)<- doctype(doc) + '_' +STRING[30](LONG(ii))+'_'+(OVERRIDE id(ii), '')+'_'+ formulaDateT(dt());  
                        dateTime(log) <- currentDateTime();
                        userLogin(log) <- login(currentUser()); 
                        nameContact(log) <- STRING[100](name(currentUser()));
                        stockDocumentLedger(log) <- invoiceShipment(ii);
                    }     
                    APPLY NESTED LOCAL;
                }             
                     
           } CATCH {
                logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           }
        } 
    }       
    inc(Invoice ii) <- NULL;
    APPLY;
}

exportPurchaseInvoice (Purchase.Invoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'WI' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createShipment(doc)) THEN exportPurchaseInvoiceWI(doc);
}

//---------------------------------------------------------------------------------------импорт
overImportPurchaseInvoice ABSTRACT LIST ();
overImportPurchaseInvoice2 ABSTRACT LIST ();

importPurchaseInvoice 'Импорт накладные (закупка)' () {

    LOCAL paymentCondition = PaymentCondition (STRING);
       
    filterSql() <- 'NOT d.DOCTYPE = \'IW\' AND b.DocType(+)= d.DocType AND b.id(+) = d.id AND d.locationto IN ('+ stocksImport() + ')  AND d.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( ';
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',1) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',1) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',1)), ('d.USEROP = ' + getWord(useropSupermag(op),';',1)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
         
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
         
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'd.DocType = \'WI\' AND b.DocType(+)= d.DocType AND b.id(+) = d.id AND d.id = \'' + numberImportDocument() + '\''; 
       
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationto, d.Commentary, b.suppldocsum, f.paymentdelay, f.iscalendardelay from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMFinobligation f where ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype' TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationTo, comment, suppldocSum, paymentDelay, isCalendarDelay ;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(clientIndex(i)), STRING(locationTo(i)), STRING(comment(i)), STRING(suppldocSum(i)), STRING(paymentDelay(i)), STRING(isCalendarDelay(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    isBankDays(INTEGER i) <- (CASE WHEN isCalendarDelay(i) = '1' THEN 0 WHEN isCalendarDelay(i) = '0' THEN 0 ELSE NULL) WHERE idDoc(i);   
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) AND NOT docState(i) = 1](STRING[50] newId) AND NOT userInvoice(newId) DO NEW o = UserInvoice {
        id(o) <- newId;
    }

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationto, d.Commentary, b.suppldocsum, f.paymentdelay, f.iscalendardelay from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMFinobligation f where ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype' ;
        MESSAGE currentVersion(0);
        MESSAGE codeOperation(0);
    }
      
    FOR Purchase.UserInvoice doc == Purchase.userInvoice(idDoc(INTEGER i)) AND NOT currentVersion(i) = Purchase.lastVersion(doc) DO {       
        number[Document](doc) <- STRING[28](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- operation1Supermag(codeOperation(i));
        isPosted(doc) <- docState(i) == 3;
        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        isClosed(doc) <- docState(i) == 0;
        lastStatusSupermag(doc) <- docState(i);
        supplier(doc) <- legalEntity(STRING(clientIndex(i)));
        supplierStock(doc) <- stock(STRING[100] (clientIndex(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (locationTo(i))));
        customerStock(doc) <- stock(ISTRING[100] (locationTo(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- 00:00;
        imported(doc) <- TRUE;
        paymentCondition(doc) <- paymentCondition(paymentPeriod(paymentDelay(i), isBankDays(i))) WHERE paymentDelay(i) > 0;              
        lastVersion(doc) <- currentVersion(i);
    }  
    
    overImportPurchaseInvoice();
    
    //импорт заказов-оснований и договоров для накладных. импорт всех оснований через overImportPurchaseInvoice() 
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype' TO SupermagSettings.file;
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype' ;
        MESSAGE idDoc(0)  +  ' ' + idBase(0);
    }

    FOR Purchase.UserInvoice doc == Purchase.userInvoice(idDoc(INTEGER i)) AND userContractSku(idBase(i)) DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }    

    overImportPurchaseInvoice2();
    
    //импорт спецификаций
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
        EXEC 'SELECT d.ID, d.DOCTYPE, d.LOCATIONTO, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.extracharge, dby.RETAILPRICE FROM Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = \'WI\' AND ds.DocId = d.id AND dt.DocType = \'WI\' AND dt.DocId = d.id AND ds.SPECITEM = dt.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql() TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, locationTo, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer, extracharge, retailPrice;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(locationTo(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), 
                                                STRING(itemPrice(i)), STRING(itemPriceNoTax(i)), STRING(totalPrice(i)), STRING(totalPriceNoTax(i)),  
                                                STRING(taxSum(i)), STRING(taxRate(i)), STRING(priceManufacturer(i)), STRING(extracharge(i)), STRING(retailPrice(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'SELECT d.ID, d.DOCTYPE, d.LOCATIONTO, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.extracharge, dby.RETAILPRICE FROM Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = \'WI\' AND ds.DocId = d.id AND dt.DocType = \'WI\' AND dt.DocId = d.id AND ds.SPECITEM = dt.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql();
        MESSAGE idDet(0);
        MESSAGE currentVersion(0);        
    }

    FOR Purchase.userInvoice(idDoc(INTEGER i)) AND NOT Purchase.userInvoiceDetail(idDet(i)) DO NEW d = Purchase.UserInvoiceDetail {
        id(d) <- idDet(i);
        Purchase.userInvoice(d) <- Purchase.userInvoice(idDoc(i));
    }

    FOR Purchase.UserInvoiceDetail det = Purchase.userInvoiceDetail(idDet(INTEGER i)) AND NOT currentVersion(i) = Purchase.lastVersion(det) DO {
        sku(det) <- item(idItem(i));
        shipmentQuantity(det) <- quantity(i);
        pricingQuantity(det) <- quantity(i);
        quantity(det) <- OVERRIDE quantity(det), quantity(i);
        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
        invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
        VATSum(det) <- taxSum(i);
        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
        manufacturingPrice(det) <- priceManufacturer(i);
        manufacturingMarkup(det) <-  - extracharge(i);
        retailPriceListType(det) <- OVERRIDE retailPriceListType(det), retailPriceListType(stock(ISTRING[100] (locationTo(i))));
        retailPrice(det) <- retailPrice(i);
        imported(det) <- TRUE;
        lastVersion(det) <- currentVersion(i);
   }
   
    APPLY;           
}

EXTEND FORM integrationData PROPERTIES importPurchaseInvoice();
