MODULE SupermagPurchaseInvoice;

REQUIRE SupermagIntegration, SupermagFormMeta, PurchaseManufacturingPrice, PricingPurchase, PurchaseCreditNote, PurchaseInvoiceContract, Utils;
NAMESPACE Purchase;

EXTEND FORM operation
    PROPERTIES (o) docTypeSupermag, opcodeSupermag, useropSupermag, nameSuperMag
;
DESIGN operation{
    propertyContainer {
        MOVE PROPERTY(docTypeSupermag(o));
        MOVE PROPERTY(opcodeSupermag(o));
        MOVE PROPERTY(useropSupermag(o));
        MOVE PROPERTY(nameSuperMag(o));
    }
}

EXTEND FORM operations
    PROPERTIES (o) READONLY docTypeSupermag, opcodeSupermag, useropSupermag, nameSuperMag
;

@overCheckDocStatusSupermag(invoice);

GROUP FI;
GROUP SMFINOBLIGATION :FI;

//-- предполагаем, что дата оплаты для накладной только одна
lastInvoiceContractLedger 'Дата оплаты' = GROUP LAST Purchase.InvoiceContractLedger l
                            ORDER date(l),l
                            BY inContractLedger(l);// MATERIALIZED;
lastPaymentPeriod = GROUP MAX PaymentPeriod p BY paymentCondition(p);                            

//curRate(Purchase.InvoiceDetail d) = curRate(Purchase.invoice(d));

dateTimeChange = DATA DATETIME (Invoice);
dateTimeChange[StockDocumentLedger](InvoiceShipment i) += dateTimeChange(invoice(i));

//changeDoc(Invoice d) = CHANGED(seriesNumber(d)) OR CHANGED(supplier(d))  OR CHANGED(supplierStock(d))  OR CHANGED(customer(d))  OR CHANGED(customerStock(d))  
//    OR CHANGED(dateTime(d)) OR CHANGED(operation(d)) OR CHANGED (creditInvoiceSumInvoiceDetail(d)) OR CHANGED(curRate(d)) OR CHANGED(isPosted(d)) OR CHANGED (invoiceShipment(d));
//
//changeDoc(InvoiceDetail d) = CHANGED(quantity( d)) OR CHANGED(sku(d)) OR CHANGED(price(d)) OR CHANGED(invoicePrice(d))  OR CHANGED (valueVAT(d))
//    OR CHANGED(retailPrice(d)) OR CHANGED(creditQuantity(d)) OR CHANGED(creditInvoiceSum(d)) OR CHANGED(creditSum(d)) OR CHANGED(manufacturingPrice(d));
//changeDocDetail(Invoice i) = GROUP SUM 1 IF changeDoc(InvoiceDetail d) AND invoice(d)==i;

//WHEN SET(changeDoc(Invoice i)) OR SET (changeDocDetail(i)) DO {
//    dateTimeChange(i)<- currentDateTime();  
//}

WHEN SET(isPosted(Invoice i))  DO {
    dateTimeChange(i)<- currentDateTime();  
}

@exportFilds(invoice, invoiceDetail);

@exportFormWI(exportPurchaseInvoiceWI, invoice, invoiceDetail, 'Накладная (закупка)');

EXTEND FORM exportPurchaseInvoiceWI FORMEXTID 'PACKAGE'  
    PROPERTIES ATTR = exportTime(currentDateTime())  EXTID 'name'                                             
            
    //-- сама накладная
    PROPERTIES i2 = creditInvoiceSumInvoiceDetail(doc) EXTID 'SUPPLDOCSUM' IN SMWAYBILLSIN 
    PROPERTIES = (CONCAT ' ',number(doc),series(doc)) EXTID 'SUPPLIERDOC' IN SMWAYBILLSIN        
    PROPERTIES = exportTime(dateTime(doc))  EXTID 'SUPPLIERDOCCREATE' IN SMWAYBILLSIN
    
    PROPERTIES = exportTime(toDateTime(expiryDate(docd5))) EXTID 'VALIDDATE'                
    
    OBJECTS docd6= InvoiceDetail EXTID 'SLSPECQMISMATCH' IN WI
    PROPERTIES = docId(docd6) EXTID 'DOCID'    
    PROPERTIES = 'WI' IF docd6 IS InvoiceDetail EXTID 'DOCTYPE'      
    PROPERTIES = quantity(docd6) EXTID 'QUANTBYDOC'                  
    FILTERS invoice(docd6)==doc     
    
    PROPERTIES = index(docd) EXTID 'SPECITEM'
    PROPERTIES = index(docd2) EXTID 'SPECITEM'
    PROPERTIES = index(docd3) EXTID 'SPECITEM'
    PROPERTIES = index(docd4) EXTID 'SPECITEM'
    PROPERTIES = index(docd5) EXTID 'SPECITEM'
    PROPERTIES = index(docd6) EXTID 'SPECITEM'
        
    OBJECTS o = Order EXTID 'SMCOMMONBASES' IN WI 
    PROPERTIES = STRING[100](id(doc)) IF o IS Order EXTID 'ID'  
    PROPERTIES = 'WI' IF o IS Order EXTID 'DOCTYPE'     
    PROPERTIES = 'OR' IF o IS Order EXTID 'BASEDOCTYPE'                    
    PROPERTIES = id(o) EXTID 'BASEID' 
    FILTERS include(o,doc)                
    
    OBJECTS c = ContractSku EXTID 'SMCOMMONBASES' IN WI 
    PROPERTIES = STRING[100](id(doc)) IF c IS ContractSku EXTID 'ID'   
    PROPERTIES = 'WI' IF c IS ContractSku EXTID 'DOCTYPE'     
    PROPERTIES = 'CO' IF c IS ContractSku EXTID 'BASEDOCTYPE'                    
    PROPERTIES = id(c) EXTID 'BASEID' 
    FILTERS c=contractSku(doc)                
    
//    OBJECTS doc2 = Invoice EXTID 'POSTOBJECT'
//    PROPERTIES ATTR = 'Финансовое обязательство по поставке' IF doc2 IS Purchase.Invoice EXTID 'description'  
//    PROPERTIES ATTR = 'normal' IF doc2 IS Purchase.Invoice EXTID 'action'  
//        
//    PROPERTIES = STRING[100]('FI'+seriesNumber(doc2)+'\tWI') EXTID 'Id'
//    PROPERTIES = STRING[100](seriesNumber(doc2)) EXTID 'DOCID' IN SMFINOBLIGATION   
//    PROPERTIES = 'WI' IF doc2 IS Purchase.Invoice  EXTID 'DOCTYPE' IN SMFINOBLIGATION    
//    PROPERTIES = creditInvoiceSumInvoiceDetail(doc2) EXTID 'ACCEPTSUM' IN SMFINOBLIGATION   
//    PROPERTIES = invoiceSumInvoiceDetail(doc2)  EXTID 'BASESUM' IN SMFINOBLIGATION   
//    PROPERTIES = exportTime(dateTime(doc2))  EXTID 'BEGINDATE' IN SMFINOBLIGATION   
//    PROPERTIES = idSupermag(customerStock(doc2)) EXTID 'BORNIN' IN SMFINOBLIGATION       
//    PROPERTIES = (OVERRIDE exportTime(dateTime(lastInvoiceContractLedger(doc2))), exportTime(dateTime(doc2)))  EXTID 'CALCENDDATE' IN SMFINOBLIGATION   
//    PROPERTIES = id(supplier(doc2))  EXTID 'CLIENTINDEX' IN SMFINOBLIGATION  
//    PROPERTIES = id(supplier(doc2))  EXTID 'FINAGENT' IN SMFINOBLIGATION      
//    PROPERTIES = 0 IF doc2 IS Purchase.Invoice  EXTID 'FINEPERCENT' IN SMFINOBLIGATION  
//    PROPERTIES = 0 IF doc2 IS Purchase.Invoice  EXTID 'ISADMITTED' IN SMFINOBLIGATION 
//    PROPERTIES = IF bankingDays(paymentCondition(doc2)) THEN 0 ELSE 1  EXTID 'ISCALENDARDELAY' IN SMFINOBLIGATION     
//    PROPERTIES = id(customer(doc2))  EXTID 'OURSELFCLIENT' IN SMFINOBLIGATION 
//    PROPERTIES = (OVERRIDE countDays(lastPaymentPeriod(paymentCondition(doc2))), 0)  EXTID 'PAYMENTDELAY' IN SMFINOBLIGATION              
//    PROPERTIES = 1 IF doc2 IS Purchase.Invoice  EXTID 'PAYMENTPRTY' IN SMFINOBLIGATION          
//    FILTERS inc(doc2)
; 

//                manufactPrice(AdjustmentDetail ad) <- price(ad) WHERE adjustment(ad) = doc;

exportPurchaseInvoiceMag 'Экспорт в супермаг' (Invoice doc) {
    inc(Invoice ii) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();
        dt () <- currentDateTime();
        inc(doc) <- TRUE;
        // для накладной берем первые параметры, для возврата вторые
        FOR iterate(INTEGER n, 1, 1) DO {
                doctype(doc) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                opcode(doc) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(doc) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                docstate(doc) <- IF isPosted(doc) THEN 3 ELSE 2;
                id(doc) <- 'Ф' + seriesNumber(doc);                 
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(doc); 
                CASE WHEN doctype(doc) = 'WI' THEN {
                        clientIndex(doc) <- id(supplier(doc));
                        locationFrom(doc) <- NULL IF doc IS Invoice;
                        locationTo(doc) <- customerStock(doc);                
                        location(doc)  <- NULL IF doc IS Invoice;                             
                    }                 
                    WHEN doctype(doc) = 'IW' THEN {
                        clientIndex(doc) <- NULL IF doc IS Invoice;
                        locationFrom(doc) <- supplierStock(doc);
                        locationTo(doc) <- customerStock(doc);                
                        location(doc)  <- NULL IF doc IS Invoice;                                                     
                    }                
                priceWithTax(InvoiceDetail docd) <- invoicePrice(docd) WHERE invoice(docd) = doc;
                valueTax(InvoiceDetail docd) <- valueVAT(sku(docd)) WHERE invoice(docd) = doc;
                priceNoTax(InvoiceDetail docd) <- price(docd) WHERE invoice(docd) = doc;
                sumWithTax(InvoiceDetail docd) <- abs(invoiceSum(docd)) WHERE invoice(docd) = doc;
                sumNoTax(InvoiceDetail docd) <- abs(sum(docd)) WHERE invoice(docd) = doc;
                sumTax(InvoiceDetail docd) <- VATSum(docd) WHERE invoice(docd) = doc;
                sumWithTaxCurr(InvoiceDetail docd) <-round(sumWithTax(docd)/curRate(doc),2) WHERE invoice(docd) = doc;
                priceManufacturer(InvoiceDetail docd) <- manufacturingPrice(docd) WHERE invoice(docd) = doc;
                sumWithTax(doc) <- GROUP SUM abs(sumWithTax(InvoiceDetail add)) IF invoice(add) = doc;                
                sumWithTaxCurr(doc) <- GROUP SUM sumWithTaxCurr(InvoiceDetail add) IF invoice(add) = doc;                                
           TRY {                
                EXPORT exportPurchaseInvoiceWI XML TO System.exportFile;                 
           } CATCH logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           
           TRY {          
                WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
           } CATCH {
                logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());           
           }
           
           TRY 
           {      
                fileExists('file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt()) + '.xml'); 
                IF fileExists()  THEN NEWSESSION NESTED LOCAL {
                    FOR inc(Invoice ii)  DO NEW log = SupermagLog {
                        id(log)<- doctype(doc) + '_' +STRING[30](LONG(ii))+'_'+(OVERRIDE id(ii), '')+'_'+ formulaDateT(dt());  
                        dateTime(log) <- currentDateTime();
                        userLogin(log) <- login(currentUser()); 
                        nameContact(log) <- STRING[100](name(currentUser()));
                        stockDocumentLedger(log) <- invoiceShipment(ii);
                    }     
                    APPLY NESTED LOCAL;
                }             
                     
           } CATCH {
                logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           }
        } 
    }       
    inc(Invoice ii) <- NULL;
    APPLY;
}

exportSupermag(InvoiceShipment s) +{
    exportPurchaseInvoiceMag(invoice(s));
}

exportSupermagAll() +{
//здесь нужна проверка того что выгружать
  //  FOR date(Invoice s AS Invoice) > sum(currentDate(),-countDaysExportData()) AND dateTimeChange(s) AND NOT (dateTimeChange(s) <lastDateTimeSupermagLog(invoiceShipment(s))) AND opcodeSupermag(operation(s)) DO {
  //      exportPurchaseInvoiceMag(s);
  //  }
}

EXTEND FORM Purchase.invoices
    PROPERTIES (i) exportPurchaseInvoiceMag TOOLBAR 
;
DESIGN Purchase.invoices {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportPurchaseInvoiceMag(i));
        }        
    }
}