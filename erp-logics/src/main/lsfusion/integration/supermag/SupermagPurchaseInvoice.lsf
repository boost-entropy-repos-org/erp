MODULE SupermagPurchaseInvoice;

REQUIRE SupermagSettings, SupermagFormMeta, SupermagExportForms, PurchaseManufacturingPrice, PurchaseInvoiceConsignmentBy, PricingPurchase, PricingSumPurchase, PurchaseCreditNote, PurchaseInvoiceContract, Utils, SupermagPricing;

NAMESPACE Purchase;

@settingOperationSupermag(Purchase);

exportPurchaseInvoice ABSTRACT LIST (Purchase.Invoice);

EXTEND FORM Purchase.invoices
    PROPERTIES (i) exportPurchaseInvoice TOOLBAR 
    PROPERTIES (i) id SHOWIF showIDs()
;

DESIGN Purchase.invoices {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportPurchaseInvoice(i));
        }        
    }
}

userInvoiceApply 'Сохранить ' (UserInvoice doc) {
    formApply();
    IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
    exportPurchaseInvoice(doc);
}

EXTEND FORM userInvoice  PROPERTIES userInvoiceApply(i) TOOLBAR;

DESIGN userInvoice {
    TOOLBARRIGHT {
        MOVE PROPERTY (userInvoiceApply(i)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

//-- предполагаем, что дата оплаты для накладной только одна
lastInvoiceContractLedger 'Дата оплаты' = GROUP LAST Purchase.InvoiceContractLedger l ORDER date(l),l BY inContractLedger(l);// MATERIALIZED;
lastPaymentPeriod = GROUP MAX PaymentPeriod p BY paymentCondition(p);                            

@settingIntegration(Purchase.Invoice, Purchase.InvoiceDetail);

dateTimeChange[StockDocumentLedger](InvoiceShipment doc) += dateTimeChange(invoice(doc));
bornin[StockDocumentLedger](InvoiceShipment doc) += bornin(invoice(doc));

overInvoiceDocSum = ABSTRACT NUMERIC[18,4] (Invoice);

//---------------------------------------------------------------------------экспорт-----------------------------------------------------------------------------------
exportPurchaseInvoiceWI 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain d) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',1));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',1));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',1));
                creatdate(expMain) <- shipmentDateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(expMain); 
                invoiceDocCreate(expMain) <- dateTime(doc);
                invoiceDocSum(expMain) <- OVERRIDE overInvoiceDocSum(doc), sumInvoiceConsignmentDetail(doc);
                invoiceDocNumber(expMain) <- OVERRIDE  (CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc)), seriesNumber(doc);      
                priceRoundMode(expMain) <- 4 IF doc IS Invoice;                                                
                createFinobligation(expMain)  <- createFinobligation(operation(doc));                               
                clientIndex(expMain) <- id(supplier(doc));
                locationTo(expMain) <- id(customerStock(doc));
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));
                                                
                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE creditQuantity(docd), quantity(docd);
                        priceWithTax(expDet) <- invoicePrice(docd);
                        valueTax(expDet) <- valueVAT(sku(docd));
                        priceNoTax(expDet) <- price(docd);
                        priceWithTaxCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(creditInvoiceSum(docd)), abs(invoiceSum(docd));
                        sumNoTax(expDet) <- OVERRIDE abs(creditSum(docd)), abs(sum(docd));
                        sumTax(expDet) <- OVERRIDE creditVATSum(docd), VATSum(docd);
                        sumWithTaxCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                        extracharge(expDet) <-(OVERRIDE -manufacturingMarkup(docd),0);
                        priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                    
                    }
                    
                }           
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumWithTaxCurr(expMain) <- GROUP SUM sumWithTaxCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                FOR include(Order o, doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(o);
                    doctype(b) <- 'OR';
                }
                
                FOR ContractSku c = contractSku(doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(c);
                    doctype(b) <- 'CO';
                }                                
                
                acceptsum(expMain)  <- creditInvoiceSumInvoiceDetail(doc);
                basesum(expMain) <- invoiceSumInvoiceDetail(doc);
                calcenddate(expMain) <- OVERRIDE dateTime(lastInvoiceContractLedger(doc)), shipmentDateTime(doc);
                paymentdelay(expMain) <- countDays(lastPaymentPeriod(paymentCondition(doc)));
                finagent(expMain) <- id(supplier(doc)); 
                iscalendardelay(expMain) <- IF bankingDays(paymentCondition(doc)) THEN '0' ELSE '1'; 
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportWI XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'WI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Приходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    
                    dt () <- currentDateTime();        
                    TRY EXPORT exportFI XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Финансовое обязательство', 'file://' + exportDirectorySupermag() + '/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Финансовое обязательство', 'file://' + exportDirectorySupermag() + '/' + 'FI_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                
                inc(expMain) <- NULL;
        }         
    }
    APPLY;
}

exportPurchaseInvoice (Purchase.Invoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'WI' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createShipment(doc)) THEN exportPurchaseInvoiceWI(doc);    
}

exportPurchaseInvoiceAC 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain d) <- NULL;
    IF createPricing(doc) THEN {   
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;
                doctype(expMain) <- 'AC';
                docid(expMain) <- seriesNumber(doc);                 
                id(expMain) <- CONCAT '', doctype(expMain), seriesNumber(doc);                 
                opcode(expMain) <- '-1';
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN isClosed(doc) THEN 0 ELSE 2;
                creatdate(expMain) <- shipmentDateTime(doc);
                execDate(expMain) <- postedTime(doc);
                execTime(expMain) <- postedTime(doc);                
                priceType(expMain) <- STRING[10](replace(id(retailPriceListType(customerStock(doc))),'D',''));
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(expMain); 
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                location(expMain)  <- id(customerStock(doc));
                reasonPricing(expMain) <- '0';     
                priceRoundMode(expMain) <- 0;
                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- pricingQuantity(docd);
                        valueTax(expDet) <- valueRetailVAT(docd);
                        priceWithTax(expDet) <- retailPrice(docd);
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round( priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceWithTaxCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- retailSum(docd);
                        sumNoTax(expDet) <- NUMERIC[18,4] ( abs(round( sumWithTax(expDet) / (1 + valueTax(expDet)/100),2)));
                        sumWithTaxCurr(expDet) <-round(sumWithTax(expDet)/curRate(expMain),4);
                        sumTax(expDet) <- VATSum(docd);
                        oldPrice(expDet) <- retailPriceB(docd);
                        flags(expDet) <- '0';
                        revalSum(expDet) <- 0.00;
                        revalOperQuantity(expDet) <- 0.00;
                    }
                }    
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumWithTaxCurr(expMain) <- GROUP SUM sumWithTaxCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;                
                
                NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(doc);
                    doctype(b) <- 'WI';
                }
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportAC XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расценка на приходе', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +  '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расценка на приходе', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }    
                inc(expMain) <- NULL;
        }                                    
    }       
    APPLY;    
}

exportPurchaseInvoice (Purchase.Invoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'WI' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createShipment(doc)) AND createPricing(doc) THEN exportPurchaseInvoiceAC(doc);    
}

//--------------------------------------------------------------------------------------------импорт--------------------------------------------------------------
overImportPurchaseInvoice ABSTRACT LIST ();
overImportPurchaseInvoice2 ABSTRACT LIST ();

importPurchaseInvoice 'Импорт накладные (закупка)' () {

    LOCAL paymentCondition = PaymentCondition (STRING);
       
    filterSql() <- 'NOT d.DOCTYPE = \'IW\' AND b.DocType(+)= d.DocType AND b.id(+) = d.id AND d.locationto IN ('+ stocksImport() + ')  AND d.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( ';
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',1) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',1) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',1)), ('d.USEROP = ' + getWord(useropSupermag(op),';',1)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
         
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
         
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'd.DocType = \'WI\' AND b.DocType(+)= d.DocType AND b.id(+) = d.id AND d.id = \'' + numberImportDocument() + '\''; 
       
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationto, d.Commentary, b.suppldocsum, f.paymentdelay, f.iscalendardelay from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMFinobligation f where ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype' TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationTo, comment, suppldocSum, paymentDelay, isCalendarDelay ;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(clientIndex(i)), STRING(locationTo(i)), STRING(comment(i)), STRING(suppldocSum(i)), STRING(paymentDelay(i)), STRING(isCalendarDelay(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    isBankDays(INTEGER i) <- (CASE WHEN isCalendarDelay(i) = '1' THEN 0 WHEN isCalendarDelay(i) = '0' THEN 0 ELSE NULL) WHERE idDoc(i);   
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) AND NOT docState(i) = 1](STRING[50] newId) AND NOT userInvoice(newId) DO NEW o = UserInvoice {
        id(o) <- newId;
    }

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationto, d.Commentary, b.suppldocsum, f.paymentdelay, f.iscalendardelay from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMFinobligation f where ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype' ;
        MESSAGE currentVersion(0);
        MESSAGE codeOperation(0);
    }
      
    FOR Purchase.UserInvoice doc == Purchase.userInvoice(idDoc(INTEGER i)) AND NOT currentVersion(i) = Purchase.lastVersion(doc) DO {       
        number[Document](doc) <- STRING[28](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- operation1Supermag(codeOperation(i));
        isPosted(doc) <- docState(i) == 3;
        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        isClosed(doc) <- docState(i) == 0;
        lastStatusSupermag(doc) <- docState(i);
        supplier(doc) <- legalEntity(STRING(clientIndex(i)));
        supplierStock(doc) <- stock(STRING[100] (clientIndex(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (locationTo(i))));
        customerStock(doc) <- stock(ISTRING[100] (locationTo(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- 00:00;
        imported(doc) <- TRUE;
        paymentCondition(doc) <- paymentCondition(paymentPeriod(paymentDelay(i), isBankDays(i))) WHERE paymentDelay(i) > 0;              
        lastVersion(doc) <- currentVersion(i);
    }  
    
    overImportPurchaseInvoice();
    
    //импорт заказов-оснований и договоров для накладных. импорт всех оснований через overImportPurchaseInvoice() 
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype' TO SupermagSettings.file;
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, operCode, userOp, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype' ;
        MESSAGE idDoc(0)  +  ' ' + idBase(0);
    }

    FOR Purchase.UserInvoice doc == Purchase.userInvoice(idDoc(INTEGER i)) AND userContractSku(idBase(i)) DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }    

    overImportPurchaseInvoice2();
    
    //импорт спецификаций
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
        EXEC 'SELECT d.ID, d.DOCTYPE, d.LOCATIONTO, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.extracharge, dby.RETAILPRICE FROM Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = \'WI\' AND ds.DocId = d.id AND dt.DocType = \'WI\' AND dt.DocId = d.id AND ds.SPECITEM = dt.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql() TO SupermagSettings.file;

    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, locationTo, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer, extracharge, retailPrice;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(locationTo(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), 
                                                STRING(itemPrice(i)), STRING(itemPriceNoTax(i)), STRING(totalPrice(i)), STRING(totalPriceNoTax(i)),  
                                                STRING(taxSum(i)), STRING(taxRate(i)), STRING(priceManufacturer(i)), STRING(extracharge(i)), STRING(retailPrice(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE 'SELECT d.ID, d.DOCTYPE, d.LOCATIONTO, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.extracharge, dby.RETAILPRICE FROM Supermag.SMDocuments d, Supermag.SMWayBillsIn b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby WHERE ds.DocType = \'WI\' AND ds.DocId = d.id AND dt.DocType = \'WI\' AND dt.DocId = d.id AND ds.SPECITEM = dt.SPECITEM AND dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WI\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + filterSql();
        MESSAGE idDet(0);
        MESSAGE currentVersion(0);        
    }

    FOR Purchase.userInvoice(idDoc(INTEGER i)) AND NOT Purchase.userInvoiceDetail(idDet(i)) DO NEW d = Purchase.UserInvoiceDetail {
        id(d) <- idDet(i);
        Purchase.userInvoice(d) <- Purchase.userInvoice(idDoc(i));
    }

    FOR Purchase.UserInvoiceDetail det = Purchase.userInvoiceDetail(idDet(INTEGER i)) AND NOT currentVersion(i) = Purchase.lastVersion(det) DO {
        sku(det) <- item(idItem(i));
        shipmentQuantity(det) <- quantity(i);
        pricingQuantity(det) <- quantity(i);
        quantity(det) <- OVERRIDE quantity(det), quantity(i);
        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
        invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
        VATSum(det) <- taxSum(i);
        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
        manufacturingPrice(det) <- priceManufacturer(i);
        manufacturingMarkup(det) <-  - extracharge(i);
        retailPriceListType(det) <- OVERRIDE retailPriceListType(det), retailPriceListType(stock(ISTRING[100] (locationTo(i))));
        retailPrice(det) <- retailPrice(i);
        imported(det) <- TRUE;
        lastVersion(det) <- currentVersion(i);
   }
   
    APPLY;           
}

EXTEND FORM integrationData PROPERTIES importPurchaseInvoice();
