MODULE MachineryPriceTransactionBalance;

REQUIRE MachineryPriceTransaction;

balance 'Баланс' (Barcode b, Stock st) = currentBalance(sku(b), st);


balance 'Остаток' = DATA NUMERIC[16,5] (MachineryPriceTransaction, Barcode);
balance(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeBase(balance, 'Остаток', );

balanceToDate 'Загружать в оборудование остатки на дату/время транзакции' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() balanceToDate
;
DESIGN options {
    machinery {
        MOVE PROPERTY(balanceToDate());
    }
}

createAttribute(MachineryPriceTransaction t, Stock stock) + {  
    IF NOT balanceToDate() THEN {
        balance(t, Barcode barcode) <- OVERRIDE balance(barcode, stock), 0.0 WHERE in(t, barcode) AND NOT extraLoad(sku(barcode)); 
    } ELSE {
        balance(t, Barcode barcode) <- OVERRIDE prevBalanceB(sku(barcode), stock, dateTime(t)), 0.0 WHERE in(t, barcode) AND NOT extraLoad(sku(barcode));  
    }
    
}

balanceDate 'Дата остатка' = DATA DATETIME (MachineryPriceTransaction, Barcode);
balanceDate(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeBase(balanceDate, 'Дата остатка', );

balanceDate'Дата остатка' = ABSTRACT DATETIME (Stock);

createAttribute(MachineryPriceTransaction t, Stock s) + {  
    balanceDate(t, Barcode b) <- OVERRIDE balanceDate(s), currentDateTime() WHERE in(t, b) AND NOT extraLoad(sku(b));
}