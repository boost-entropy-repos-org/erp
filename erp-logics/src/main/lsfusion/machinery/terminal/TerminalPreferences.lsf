MODULE TerminalPreferences;

REQUIRE System, Terminal;

CLASS ExchangeFormat 'Формат обмена' {
    Format_SQLite 'SQLite',
    Format_CSV 'CSV',
    Format_XML 'XML'
}
    
exchangeFormatValue(ExchangeFormat f) = CASE 
                        WHEN f = ExchangeFormat.Format_SQLite THEN 0
                        WHEN f = ExchangeFormat.Format_CSV THEN 1
                        WHEN f = ExchangeFormat.Format_XML THEN 2
                        ELSE 0;
                        
exchangeValue 'Значение' (ExchangeFormat f) = exchangeFormatValue(f);                                                                       
exchangeName 'Формат' (ExchangeFormat f) = staticCaption(f);

FORM exchangeFormats 'Форматы обмена'
    OBJECTS f = ExchangeFormat
    PROPERTIES(f) READONLY exchangeValue, exchangeName
    LIST ExchangeFormat OBJECT f
    ORDERS exchangeValue(f)
;

terminalPreferencesJSON = DATA LOCAL STRING();

CLASS TerminalPreferences 'Конфигурация ТСД';
TABLE terminalPreferences (TerminalPreferences);

name 'Наименование конфигурации' = DATA STRING[100] (TerminalPreferences);
ID 'ID терминала' = DATA STRING[50] (TerminalPreferences);
terminalPreferencesID = GROUP AGGR TerminalPreferences t BY ID(t);

dbFile 'Файл базы данных' = DATA STRING[255] (TerminalPreferences);
autoDocNum 'Автоматическая нумерация документа' = DATA BOOLEAN (TerminalPreferences);
defaultVopDocument 'Код операции для документа' = DATA STRING[3] (TerminalPreferences);
postVan 'Вид аналитики поставщика' = DATA STRING[5] (TerminalPreferences);
weightTemplate 'Весовые шаблоны' = DATA TEXT (TerminalPreferences);
voice 'Голосовые сообщения' = DATA BOOLEAN (TerminalPreferences);
fieldDate1Alias 'Дата 1' = DATA STRING[30] (TerminalPreferences) CHARWIDTH 30;
fieldDate2Alias 'Дата 2' = DATA STRING[30] (TerminalPreferences) CHARWIDTH 30;
fieldField1Alias 'Поле 1' = DATA STRING[30] (TerminalPreferences) CHARWIDTH 30;
fieldField2Alias 'Поле 2' = DATA STRING[30] (TerminalPreferences) CHARWIDTH 30;
fieldField3Alias 'Поле 3' = DATA STRING[30] (TerminalPreferences) CHARWIDTH 30;
menuIk 'Проверка цен' = DATA BOOLEAN (TerminalPreferences);

onlineEnable 'Включить On-line обмена с сервером' = DATA BOOLEAN (TerminalPreferences);
onlineServer 'Имя/IP-адрес сервера' = DATA STRING[30] (TerminalPreferences) CHARWIDTH 15;
onlinePort 'Порт сервера' = DATA INTEGER (TerminalPreferences);

mobCennikEnable 'Включить мобильную печать ценников' = DATA BOOLEAN (TerminalPreferences);
mobCennikVop 'Код операции для On-line ценника' = DATA STRING[3] (TerminalPreferences);

exchangeFormat = DATA ExchangeFormat (TerminalPreferences);
exchangeFormatName 'Формат файлового обмена' (TerminalPreferences t) = staticCaption(exchangeFormat(t));
exchangeDir 'Каталог' = DATA STRING[255] (TerminalPreferences);
exchangeUser 'Пользователь' = DATA STRING[30] (TerminalPreferences);
exchangePass 'Пароль' = DATA STRING[30] (TerminalPreferences);
exchangeDomain 'Домен' = DATA STRING[30] (TerminalPreferences);
exchangeFtp 'Включить FTP-обмен' = DATA BOOLEAN (TerminalPreferences);
exchangeFtpServer 'FTP-cервер' = DATA STRING[50] (TerminalPreferences) CHARWIDTH 50;
exchangeFtpUser 'Пользователь' = DATA STRING[30] (TerminalPreferences);
exchangeFtpPass 'Пароль' = DATA STRING[30] (TerminalPreferences);
exchangeFtpDir 'Каталог' = DATA STRING[30] (TerminalPreferences);

updateAppStartUp 'Автоматическая проверка обновления' = DATA BOOLEAN (TerminalPreferences);
updateAppServer 'FTP-сервер' = DATA STRING[50] (TerminalPreferences) CHARWIDTH 50;
updateAppUser 'Пользователь' = DATA STRING[30] (TerminalPreferences);
updateAppPass 'Пароль' = DATA STRING[30] (TerminalPreferences);
updateAppDir 'Каталог' = DATA STRING[30] (TerminalPreferences);

FORM terminalPreferences 'Конфигурация ТСД'
    OBJECTS t=TerminalPreferences PANEL
    PROPERTIES(t) name, ID
    
    PROPERTIES(t) dbFile
    PROPERTIES(t) autoDocNum    
    PROPERTIES(t) defaultVopDocument
    PROPERTIES(t) postVan
    PROPERTIES(t) weightTemplate
    PROPERTIES(t) voice
    PROPERTIES(t) fieldDate1Alias
    PROPERTIES(t) fieldDate2Alias
    PROPERTIES(t) fieldField1Alias
    PROPERTIES(t) fieldField2Alias
    PROPERTIES(t) fieldField3Alias
    PROPERTIES(t) menuIk
    
    PROPERTIES(t) mobCennikEnable, mobCennikVop
        
    PROPERTIES(t) exchangeFormatName
    PROPERTIES(t) exchangeUser
    PROPERTIES(t) exchangePass
    PROPERTIES(t) exchangeDir
    PROPERTIES(t) exchangeDomain
    PROPERTIES(t) exchangeFtp
    PROPERTIES(t) exchangeFtpServer
    PROPERTIES(t) exchangeFtpUser
    PROPERTIES(t) exchangeFtpPass
    PROPERTIES(t) exchangeFtpDir
    
    PROPERTIES(t) onlineEnable, onlineServer, onlinePort
    
    PROPERTIES(t) updateAppStartUp
    PROPERTIES(t) updateAppServer
    PROPERTIES(t) updateAppUser
    PROPERTIES(t) updateAppPass
    PROPERTIES(t) updateAppDir
        
    EDIT TerminalPreferences OBJECT t    
;

initDefaultValues (TerminalPreferences tp)  {
         
    dbFile(tp) <- 'tsd.db';
    postVan(tp) <- 'ПС'; 
    weightTemplate(tp) <- '20TTTTTWWWWW'; 
    menuIk(tp) <- TRUE;
    
    onlinePort(tp) <- 2004;
    
    updateAppServer(tp) <- 'office.luxsoft.by';
    updateAppUser(tp) <- 'tsd';
    updateAppPass(tp) <- 'tsd';
}

getTerminalPreferences(terminalID) {

    LOCAL json = STRING();
    json() <- '';
    
    FOR TerminalPreferences t IS TerminalPreferences AND (NOT ID(t) OR ID(t) == terminalID) DO {
            
        json() <- json() + '"DatabaseName":"' + (OVERRIDE dbFile(t), '') + '",';
        json() <- json() + '"AutoDocumentNumbering":' + (IF autoDocNum(t) THEN 'true' ELSE 'false') + ',';
        json() <- json() + '"DefaultDocumentVop":"' + (OVERRIDE defaultVopDocument(t), '') + '",';
        json() <- json() + '"PostVan":"' + (OVERRIDE postVan(t), '') + '",';
        json() <- json() + '"VesTemplate":"' + (OVERRIDE weightTemplate(t), '') + '",';             
        json() <- json() + '"Voice":' + (IF voice(t) THEN 'true' ELSE 'false') + ',';
        json() <- json() + '"AliasDate1":"' + (OVERRIDE fieldDate1Alias(t), '') + '",';
        json() <- json() + '"AliasDate2":"' + (OVERRIDE fieldDate2Alias(t), '') + '",';
        json() <- json() + '"AliasField1":"' + (OVERRIDE fieldField1Alias(t), '') + '",';
        json() <- json() + '"AliasField2":"' + (OVERRIDE fieldField2Alias(t), '') + '",';
        json() <- json() + '"AliasField3":"' + (OVERRIDE fieldField3Alias(t), '') + '",';
        json() <- json() + '"ShowMenuIk":' + (IF menuIk(t) THEN 'true' ELSE 'false') + ',';
            
        json() <- json() + '"MobCennikEnable":' + (IF mobCennikEnable(t) THEN 'true' ELSE 'false') + ',';
        json() <- json() + '"MobCennikVop":"' + (OVERRIDE mobCennikVop(t), '') + '",';
                        
        json() <- json() + '"ObmenType":"' + exchangeValue(exchangeFormat(t)) + '",';
        json() <- json() + '"ObmenUserName":"' + (OVERRIDE exchangeUser(t), '') + '",';
        json() <- json() + '"ObmenPass":"' + (OVERRIDE exchangePass(t), '') + '",';
        json() <- json() + '"ObmenDir":"' + (OVERRIDE exchangeDir(t), '') + '",';
        json() <- json() + '"ObmenDomain":"' + (OVERRIDE exchangeDomain(t), '') + '",';
        json() <- json() + '"ObmenFtp":' + (IF exchangeFtp(t) THEN 'true' ELSE 'false') + ',';
        json() <- json() + '"ObmenFtpServer":"' + (OVERRIDE exchangeFtpServer(t), '') + '",';
        json() <- json() + '"ObmenFtpUserName":"' + (OVERRIDE exchangeFtpUser(t), '') + '",';
        json() <- json() + '"ObmenFtpPass":"' + (OVERRIDE exchangeFtpPass(t), '') + '",';
        json() <- json() + '"ObmenFtpDir":"' + (OVERRIDE exchangeFtpDir(t), '') + '",';
    
        json() <- json() + '"OnlineEnable":' + (IF onlineEnable(t) THEN 'true' ELSE 'false') + ',';
        IF onlineServer(t) THEN json() <- json() + '"OnlineServer":"' + onlineServer(t) + '",';
        IF onlinePort(t) THEN json() <- json() + '"OnlinePort":"' + onlinePort(t) + '",';
    
        json() <- json() + '"UpdateAppStartUp":' + (IF updateAppStartUp(t) THEN 'true' ELSE 'false') + ',';
        json() <- json() + '"UpdateAppServer":"' + (OVERRIDE updateAppServer(t), '') + '",';
        json() <- json() + '"UpdateAppUser":"' + (OVERRIDE updateAppUser(t), '') + '",';
        json() <- json() + '"UpdateAppPassword":"' + (OVERRIDE updateAppPass(t), '') + '",';
        json() <- json() + '"UpdateAppDir":"' + (OVERRIDE updateAppDir(t), '') + '"';              
    }

    IF length(json()) > 0 THEN json() <- '[\{' + json() + '\}]'; ELSE json() <- NULL;
    
    terminalPreferencesJSON() <- json();
}

//actionTest 'Test' (TerminalPreferences tp) {
//    getTerminalPreferences('');
//    MESSAGE terminalPreferencesJSON();
//}

FORM terminalsPreferences 'Конфигурация ТСД'
    OBJECTS t=TerminalPreferences
    PROPERTIES(t) READONLY name, ID
//    PROPERTIES(t) actionTest TOOLBAR
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE    
;

EXTEND FORM terminalPreferences
    EVENTS ON INIT {
//        initDefaultValues(t);
    }      
;

DESIGN terminalPreferences {
    
    NEW orderPane FIRST {
        fill = 1;
        type = CONTAINERV;
        
        NEW box {
            type = CONTAINERH;
            MOVE PROPERTY(name(t));        
            MOVE PROPERTY(ID(t));
        }
        
        NEW preferences {
            fill = 1;
            type = TABBED;
            NEW general {
                caption = 'Основные';
                fill = 0;
                type = CONTAINERV;
                MOVE PROPERTY(dbFile(t));   
                MOVE PROPERTY(autoDocNum(t));
                MOVE PROPERTY(weightTemplate(t));
                MOVE PROPERTY(defaultVopDocument(t));
                MOVE PROPERTY(postVan(t));
                MOVE PROPERTY(voice(t));
                NEW fieldsAliases {
                    caption = 'Наименования полей ввода';
                    fill = 1;
                    type = CONTAINERV;
                    MOVE PROPERTY(fieldDate1Alias(t));
                    MOVE PROPERTY(fieldDate2Alias(t));
                    MOVE PROPERTY(fieldField1Alias(t));
                    MOVE PROPERTY(fieldField2Alias(t));
                    MOVE PROPERTY(fieldField3Alias(t));
                }
                NEW mainMenu {
                    caption = 'Главное меню';
                    fontStyle = 'bold';
                    fill = 1;
                    type = CONTAINERV;
                    MOVE PROPERTY(menuIk(t));
                }                                  
            }
            NEW cennik {
                caption = 'Печать ценников';
                fill = 0;
                type = CONTAINERV;
                MOVE PROPERTY(mobCennikEnable(t));        
                MOVE PROPERTY(mobCennikVop(t));
            }            
            NEW online {
                caption = 'On-line настройки';
                fill = 0;
                type = CONTAINERV;
                MOVE PROPERTY(onlineEnable(t));        
                MOVE PROPERTY(onlineServer(t));
                MOVE PROPERTY(onlinePort(t));
            }
            NEW obmen {
                caption = 'Обмен';
                fill = 0;
                type = CONTAINERV;
                MOVE PROPERTY(exchangeFormatName(t)); 
                NEW filesObmen {
                    caption = 'Сетевой обмен';
                    fill = 1;
                    type = CONTAINERV;
                    MOVE PROPERTY(exchangeDir(t));
                    MOVE PROPERTY(exchangeUser(t));
                    MOVE PROPERTY(exchangePass(t));
                    MOVE PROPERTY(exchangeDomain(t));
                }                                  
                NEW ftpObmen {
                    caption = 'FTP обмен';
                    fill = 1;
                    type = CONTAINERV;
                    MOVE PROPERTY(exchangeFtp(t));
                    MOVE PROPERTY(exchangeFtpServer(t));
                    MOVE PROPERTY(exchangeFtpUser(t));
                    MOVE PROPERTY(exchangeFtpPass(t));
                    MOVE PROPERTY(exchangeFtpDir(t));
                }                                                     
            } 
            NEW updateApp {
                caption = 'Обновление приложения';
                fill = 0;
                type = CONTAINERV;
                MOVE PROPERTY(updateAppStartUp(t));
                MOVE PROPERTY(updateAppServer(t));
                MOVE PROPERTY(updateAppUser(t));
                MOVE PROPERTY(updateAppPass(t));
                MOVE PROPERTY(updateAppDir(t));
            }                                                          
        }
    }
}

NAVIGATOR {
    terminalNavigator {
        NEW terminalsPreferences;
    }
}
