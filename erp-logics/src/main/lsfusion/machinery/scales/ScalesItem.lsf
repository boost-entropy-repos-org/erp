MODULE ScalesItem;

REQUIRE ItemDescription, ScalesPriceTransaction;

NAMESPACE Item;

scalesIdSkuGroup = ABSTRACT STRING[100] (MachineryPriceTransaction, Barcode);
idSkuGroup (MachineryPriceTransaction transaction, Barcode barcode) = OVERRIDE scalesIdSkuGroup(transaction, barcode), id[ItemGroup](skuGroup(transaction, barcode));

overTitleScales = ABSTRACT ISTRING[255] (MachineryPriceTransaction, Barcode);

createAttribute(MachineryPriceTransaction transaction, GroupScales groupMachinery) + { 
    IF groupMachinery IS GroupScales THEN
        name(transaction, Barcode barcode) <- (OVERRIDE overTitleScales(transaction, barcode), titleScales(barcode) IF transaction IS MachineryPriceTransaction) WHERE in(transaction, barcode);
}

GROUP scales 'Весы' : public;

// Фильтрация для передачи на весы
@definePrimitiveItemAttribute(passScales, BOOLEAN, 'Передавать на весы', scales);
passScales(Item sku) += passScales(sku);
skipIn(GroupScales groupMachinery, Item sku) += WHEN groupMachinery IS GroupScales AND sku IS Item AND NOT passScales(sku) THEN TRUE;

DESIGN itemGroup {
    itemGroupDetail1 {
        MOVE GROUP(scales,g);
    }
}

pluSku 'Номер PLU' = ABSTRACT INTEGER (Stock, Item);
pluIdStockSku (STRING[100] s, Item i) = pluSku(stock(s), i);

maxCharactersNameScalesItem 'Максимальное количество знаков в наименовании для весов' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES() maxCharactersNameScalesItem
;
DESIGN options {
    machinery {
        MOVE PROPERTY(maxCharactersNameScalesItem());
    }
}

CONSTRAINT length(titleScales(barcode(Item item))) > maxCharactersNameScalesItem() AND passScales(item) 
    MESSAGE 'Максимальное количество знаков в наименовании для весов больше предельного значения';

// Формат этикетки
labelFormatPack = DATA LabelFormat(Item);
idLabelFormatPack 'Код формата этикетки' (Item item) = id(labelFormatPack(item)) IN scales;
labelFormat 'Формат этикетки' = idLabelFormatPack(sku(Barcode barcode));

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

// Сроки годности
hoursExpiry 'Срок годности в часах с момента фасовки' = hoursExpiryPack(sku(Barcode barcode));

@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);

// Состав товара
overMachineryDescription = ABSTRACT TEXT (Barcode);
description 'Описание' = OVERRIDE overMachineryDescription(Barcode barcode), description(sku(barcode));

@defineMachineryPriceTransactionAttribute(description, 'Описание', TEXT);

descriptionNumber(MachineryPriceTransaction t, Barcode b) = number(cellScales(groupMachinery(t), description(t, b)));

extraPercent 'Доп. процент' = ABSTRACT NUMERIC[6,2] (MachineryPriceTransaction, Barcode);

imagesCount 'Кол-во изображений' = ABSTRACT INTEGER (Barcode);

useCellScales 'Использовать автогенерацию ячеек' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES useCellScales()
;

DESIGN options {
    machinery {
        MOVE PROPERTY(useCellScales());
    }
}

synchronizeDescription(MachineryPriceTransaction transaction, GroupScales groupMachinery)  { 
    IF useCellScales() AND groupMachinery IS GroupScales THEN {
        FOR [ GROUP SUM 1 BY description(transaction, Barcode barcode)](TEXT description)
            AND NOT cellScales(groupMachinery, description)
            NEW c = CellScales DO {
                groupScales(c) <- groupMachinery;
                description(c) <- description;
            }
    }
}

snapshotAttribute(MachineryPriceTransaction transaction, GroupScales groupMachinery) + {  synchronizeDescription(transaction, groupMachinery); }
createAttribute(MachineryPriceTransaction transaction, GroupScales groupMachinery) + {  synchronizeDescription(transaction, groupMachinery); }

EXTEND FORM item
    PROPERTIES(i) SHOWIF passScales(i) idLabelFormatPack 
;
DESIGN item {
    itemPrimaryColumn2 {
        MOVE GROUP(scales,i) {
            alignment = STRETCH;
            columns = 1;
        }
    }
}

overCopy(Item s, Item d) + { 
    passScales(d) <- passScales(s);
    labelFormatPack(d) <- labelFormatPack(s);
}

// Установка параметра для единицы измерения
passScales 'Передавать на весы' =  DATA BOOLEAN (UOM);

EXTEND FORM UOM
    PROPERTIES(u) passScales
;
EXTEND FORM UOMs
    PROPERTIES(u) READONLY passScales
;

passScales(Item i) <- passScales(UOM(i)) WHEN CHANGED(UOM(i));

// Генерация штрихкодов
@defineNumeratorItemGroup (weight, 'Нумератор штрихкодов (для весового товара)', paramsItemGroup);
weightNumerator (Item item) = weightNumerator(itemGroup(item));

overNumerator(Item item) += WHEN passScales(item) THEN weightNumerator(item);

//DESIGN itemGroup {
//    itemGroupHeader2 {
//        MOVE PROPERTY(nameWeightNumerator(g));
//    }
//}

//--
@defineItemGroupValue(expired, 'Не грузить с истекшим ср. год-ти', BOOLEAN);

dataExpired 'Не грузить с истекшим ср. год-ти' = DATA BOOLEAN (Item);
expired 'Не грузить с истекшим ср. год-ти' (Item item) = OVERRIDE dataExpired(item), expired(itemGroup(item)) IN itemBase MATERIALIZED ;


expiredSku (Barcode barcode) = expired(sku(barcode));

quantityChildWithExpired (ItemGroup itemGroup) = GROUP SUM 1 IF dataExpired(ItemGroup childItemGroup) AND isParent(childItemGroup, itemGroup) MATERIALIZED;
quantityParentWithExpired (ItemGroup itemGroup) = GROUP SUM 1 IF dataExpired(ItemGroup parentItemGroup) AND isParent(itemGroup, parentItemGroup) MATERIALIZED;

showExpired 'Не грузить с истекшим ср. год-ти' (ItemGroup itemGroup) = TRUE IF (quantityChildWithExpired (itemGroup) (+) quantityParentWithExpired (itemGroup)) > 0 MATERIALIZED;

backgroundShowExpired (ItemGroup itemGroup) =
    IF dataExpired(itemGroup) THEN
        RGB(0,0,0) IF itemGroup IS ItemGroup
    ELSE
        RGB(203,203,206) IF quantityChildWithExpired (itemGroup) != descendantNumber(itemGroup)
                         AND NOT quantityParentWithExpired (itemGroup);
                             
setNullShowExpired 'Снять признак для всех потомков'(ItemGroup itemGroup)  { 
    FOR isParent (ItemGroup childGroup, itemGroup) DO {
        dataExpired(childGroup) <- NULL;
    }
} ASON CONTEXTMENU dataExpired[ItemGroup] CONFIRM;     


EXTEND FORM itemGroups PROPERTIES(g) READONLYIF  isReadonly() showExpired BACKGROUND backgroundShowExpired(g) BEFORE deleteg;
EXTEND FORM item PROPERTIES(i) expired;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei expired;

skipIn(GroupScales groupMachinery, Item sku) += WHEN groupMachinery IS GroupScales AND expired(sku) AND lastExpiryDate(sku, stock[GroupMachinery](groupMachinery)) < currentDate() THEN TRUE;


//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    weightNumerator(ng) <- weightNumerator(itemGroup(g));
    dataExpired(ng) <- prevExpired(itemGroup(g));
    userShowPassScales(ng) <- userShowPassScales(itemGroup(g));
}