MODULE ItemLog;

REQUIRE Item;

NAMESPACE Item;


//----------------- Логирование изменений в документах ------------------- //

CLASS ItemLog 'Запись лога товара';
TABLE itemLog(ItemLog);

disableItemLog 'Отключить запись лога товара' = DATA BOOLEAN ();
enableItemLog = TRUE AND NOT disableItemLog();

EXTEND FORM options
    PROPERTIES() disableItemLog
;

DESIGN options { 
    log { 
        MOVE PROPERTY(disableItemLog()) FIRST;   
    } 
}

item = DATA Item (ItemLog) INDEXED;
id 'Код' = DATA VARSTRING[100](ItemLog) CHARWIDTH 10;
idBarcode 'Основной штрихкод' =  DATA VARSTRING[15](ItemLog) CHARWIDTH 15;

name 'Наименование' = DATA VARISTRING[255] (ItemLog)  CHARWIDTH 30 IN recognize;

session = DATA Session (ItemLog); 
hostnameComputer 'Имя компьютера' = DATA VARISTRING[100] (ItemLog); 
userLogin 'Логин пользователя' = DATA STRING[30] (ItemLog); 
nameContact 'Имя пользователя' =  DATA VARSTRING[100] (ItemLog) IN recognize;
dateTimeSession 'Время' = DATA DATETIME (ItemLog) IN recognize;
dateSession 'Дата' (ItemLog d) = DATE(dateTimeSession(d));


@defineLog (ItemLog, 'изменений товара', log, dateSession);


CLASS TypeChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    replace 'Объединение',
    addBarcode 'Добавление штрихкода',
    deleteBarcode 'Удаление штрихкода',
    changeBarcode 'Изменение штрихкода',
    addAttribute 'Добавление атрибутов',    
    changeAttribute 'Изменение атрибутов',
    deleteAttribute 'Удаление атрибутов'    
}

typeChange= DATA TypeChange (ItemLog);
nameTypeChange 'Тип изменения' (ItemLog l) = staticCaption(typeChange(l)) IN recognize;

note 'Примечание' = DATA VARSTRING[500] (ItemLog) CHARWIDTH 20;

file 'Файл' = DATA FILE (ItemLog);
openFile 'Открыть Файл' (ItemLog l)  { open(file(l)); } TOOLBAR;
showFile = enableItemLog() AND file(ItemLog dLog);

WHEN SET(Item i IS Item) IF NOT disableItemLog() DO {
    NEW d = ItemLog {        
        item(d) <- i;
        id(d) <- id(i);
        idBarcode(d) <- idBarcode(i);
        name(d) <- nameAttribute(i);

        typeChange(d) <- TypeChange.add;
        session(d) <- currentSession();
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());             
        note(d) <- VARSTRING[500]('Добавлен товар');             
    }
}
WHEN DROPPED(Item i IS Item) IF NOT disableItemLog() DO {
    NEW d = ItemLog {      
        id(d) <- PREV(id(i));
        idBarcode(d) <- PREV(idBarcode(i));
        name(d) <- PREV(nameAttribute(i));  
        typeChange(d) <- TypeChange.delete;
        session(d) <- currentSession();
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());        
        note(d) <- VARSTRING[500]('Удален товар');         
    }
}

WHEN CHANGED(id(Barcode b)) AND (id(b) != PREV(id(b))) AND sku(b) IS Item IF NOT disableItemLog()  DO {
NEW d = ItemLog {
        item(d) <- sku(b);
        id(d) <- id(sku(b));
        idBarcode(d) <- idBarcode(sku(b));
        name(d) <- nameAttribute(sku(b));     
        
        typeChange(d) <- TypeChange.changeBarcode;
        note(d) <- VARSTRING[500](CONCAT ' ', 'До: '+PREV(id(b))+'.', 'После: '+id(b));              
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());    

    }
}

WHEN SET(Barcode b IS Barcode) AND sku(b) IS Item IF NOT disableItemLog()  DO {
    NEW d = ItemLog {
        item(d) <- sku(b);
        id(d) <- id(sku(b));
        idBarcode(d) <- idBarcode(sku(b));
        name(d) <- nameAttribute(sku(b));     
        
        typeChange(d) <- TypeChange.addBarcode;
        note(d) <- VARSTRING[500]('Штрихкод: '+id(b));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());    

    }
}
WHEN DROPPED(Barcode b IS Barcode) AND PREV(sku(b)) IS Item IF NOT disableItemLog()  DO {
    NEW d = ItemLog {
        item(d) <- PREV(sku(b));
        id(d) <- id(PREV(sku(b)));
        idBarcode(d) <- idBarcode(PREV(sku(b)));
        name(d) <- nameAttribute(PREV(sku(b)));     
        
        typeChange(d) <- TypeChange.deleteBarcode;
        note(d) <- VARSTRING[500]('Штрихкод (до): '+PREV(id(b)));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());    

    }
}
WHEN (SET ((value(Item i, ItemAttribute ia)))) IF NOT disableItemLog()  DO { 
    NEW d = ItemLog {
        item(d) <- i;
        id(d) <- id(i);
        idBarcode(d) <- idBarcode(i);
        name(d) <- nameAttribute(i);   

        typeChange(d) <- TypeChange.addAttribute;
        note(d) <- VARSTRING[500](CONCAT ' ',staticCaption(ia)+':', value(i,ia));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());    
    }
}

WHEN (SETCHANGED ((value(Item i, ItemAttribute ia))) AND PREV(value(i,ia))) IF NOT disableItemLog()  DO { 
    NEW d = ItemLog {
        item(d) <- i;
        id(d) <- id(i);
        idBarcode(d) <- idBarcode(i);
        name(d) <- nameAttribute(i);   

        typeChange(d) <- TypeChange.changeAttribute;
        note(d) <- VARSTRING[500](CONCAT ' ',staticCaption(ia)+'.', 'До: '+PREV(value(i,ia))+'.', 'После: '+value(i,ia));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());   
    }
}

////-- при создании товара лог атрибутов не пишем
//WHEN (SETCHANGED ((value(Item i, ItemAttribute ia))) AND NOT (SET(i IS Item))) IF NOT disableItemLog()  DO { 
//    NEW d = ItemLog {
//        item(d) <- i;
//        id(d) <- id(i);
//        idBarcode(d) <- idBarcode(i);
//        name(d) <- nameAttribute(i);   
//
//        typeChange(d) <- TypeChange.changeAttribute;
//        note(d) <- VARSTRING[500](CONCAT ' ',staticCaption(ia)+':', 'до - '+PREV(value(i,ia))+';', 'после - '+value(i,ia))+';';      
//        session(d) <- currentSession();  
//        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
//        userLogin(d) <- userLoginConnection(currentSession()); 
//        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
//        dateTimeSession(d) <- dateTime(currentSession());   
//    }
//}

WHEN (DROPPED ((value(Item i, ItemAttribute ia))) AND PREV(value(i,ia))) IF NOT disableItemLog()  DO {
    NEW d = ItemLog {
        item(d) <- i;
        id(d) <- id(i);
        idBarcode(d) <- idBarcode(i);
        name(d) <- nameAttribute(i);   
        
        typeChange(d) <- TypeChange.deleteAttribute;
        note(d) <- VARSTRING[500](CONCAT ' ',staticCaption(ia)+'.', 'До: '+PREV(value(i,ia)));      
        session(d) <- currentSession();  
        hostnameComputer(d) <- hostnameComputerConnection(currentSession());
        userLogin(d) <- userLoginConnection(currentSession()); 
        nameContact(d) <- VARSTRING[100](nameContact(currentSession()));
        dateTimeSession(d) <- dateTime(currentSession());    
    }
}

META defineItemLogForm(form, concrete)
    @defineItemLogForm(form, concrete, itemHistory);
END

META defineItemLogForm(form, concrete, container)
    EXTEND FORM form
        OBJECTS dLog=ItemLog GRID
        PROPERTIES(dLog) SHOWIF enableItemLog() READONLY name, id, idBarcode, hostnameComputer, userLogin, dateTimeSession, nameTypeChange, note
        PROPERTIES (dLog) openFile SHOWIF showFile(dLog)
        FILTERS item(dLog) == concrete

    ;
    
    DESIGN form {
        container { 
            MOVE BOX(dLog);
        }    
    }   
END

@defineItemLogForm(items, i, tab);
DESIGN items {
    pane {
    type = SPLITV;
    }
}

FORM itemLogs 'Журнал изменения товара'
    OBJECTS d=ItemLog
    PROPERTIES(d) READONLY name, id, idBarcode, hostnameComputer, userLogin, dateTimeSession, nameTypeChange, note
;

DESIGN itemLogs {
    BOX {
        MOVE BOX(d);
        MOVE TOOLBARBOX;        
    }
}

NAVIGATOR {
    systemEvents {
        NEW itemLogs;
    }
}

// объединение товара
replaceBefore (Item i, Item item) + { 
    IF NOT disableItemLog() THEN NEW d = ItemLog {        
        item(d) <- i;
        id(d) <- id(i);
        idBarcode(d) <- idBarcode(i);
        name(d) <- nameAttribute(i);

        typeChange(d) <- TypeChange.replace;
        hostnameComputer(d) <- hostname(currentComputer());
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- VARSTRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();             
        note(d) <- VARSTRING[500]('В товар ' + nameAttribute(item));             
    }
}

replaceAfter (Item i) + { 
    IF NOT disableItemLog() THEN NEW d = ItemLog {        
        item(d) <- i;
        id(d) <- id(i);
        idBarcode(d) <- idBarcode(i);
        name(d) <- nameAttribute(i);

        typeChange(d) <- TypeChange.replace;
        hostnameComputer(d) <- hostname(currentComputer());
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- VARSTRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();             
        note(d) <- 'Из товаров (удалены): ' + replaceDelNames();             
    }

}