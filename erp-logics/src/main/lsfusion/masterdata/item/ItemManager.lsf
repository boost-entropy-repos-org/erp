MODULE ItemManager;

REQUIRE Item, EmployeeManager;

NAMESPACE Item;

@defineItemGroupObject(itemManager, 'Категорийный менеджер', Employee, nameCustomUser);  
nameItemManager 'Категорийный менеджер' (ItemGroup itemGroup) = name[Contact](itemManager(itemGroup)); 

countItemGroup (Employee employee) = GROUP SUM 1 IF dataItemManager(ItemGroup group) == employee MATERIALIZED;

hasManager (Employee e) = countItemGroup(e) OR countManagers(e) MATERIALIZED COMPLEX;

TABLE employeeItemGroup(Employee, ItemGroup);
access (Employee e, ItemGroup g) = nearestItemManager(g) = e OR inManager(nearestItemManager(g), e) MATERIALIZED;

countAccessItem 'Кол-во доступных групп' (Employee employee, SkuGroup itemGroup) =
    GROUP
       SUM 1 IF access(employee, ItemGroup child)
             AND isParent(child, itemGroup) MATERIALIZED;
             
childAccess 'Кол-во доступных групп' (Employee e, SkuGroup g) = countAccessItem(e, g) OR NOT hasManager(e); 

access = access(Employee employee, itemGroup(Item item));

accessManager (Employee e, Item i) = access(e, i) OR NOT hasManager(e);                                     

EXTEND FORM itemGroups
    PROPERTIES(g) READONLYIF  isReadonly() nameItemManager AFTER name(g) 
;

EXTEND FORM items 
    FILTERS childAccess(currentUser(), g) OR NOT g IS ItemGroup
    FILTERS accessManager(currentUser(), i) OR NOT itemGroup(i)
;

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    dataItemManager(ng) <- prevItemManager(itemGroup(g));
}