MODULE ItemInfoAPI;

REQUIRE PriceList, SaleLedger, Item, Store, API, OrderLedger, Pricing, SkuLedgerAPI;

NAMESPACE Item;

filter = DATA LOCAL BOOLEAN (DepartmentStore);
allStores = DATA LOCAL BOOLEAN () COMPLEX;

access (DepartmentStore s) = (filter(s) OR allStores()) AND (accessCompany(currentUser(), s) OR NOT limitAccess());

getSkuSalesBalance (FILE f, DATE df, DATE dt, LONG idSku) {

    IF limitAccess() AND NOT access(currentUser(), Category.skuLedger) THEN {
        EXPORT FROM 'Нет доступа к API';
        RETURN;
    }
    
    IMPORT JSON FROM f AS FILE FIELDS LONG id DO {
        filter(DepartmentStore s) <- TRUE WHERE LONG (s AS DepartmentStore) == id;
    }
    allStores() <- TRUE IF NOT (GROUP SUM 1 IF filter(DepartmentStore s));
    
    LOCAL sku = Sku();
    sku() <- GROUP MAX Sku s IF LONG (s AS Sku) == idSku;
    
    EXPORT JSON FROM id = Stock st, name(st), 
        quantity = currentBalance(sku(), st),
        sold = quantitySold(sku(), st, df, dt),
        ordered = currentReservePurchase(sku(), st),
        price = currentRetailPricingPrice(sku(), st) 
        WHERE access(st) AND (currentBalance(sku(), st) OR quantitySold(sku(), st, df, dt) OR currentReservePurchase(sku(), st));
} @@api;

getSkuLedger (FILE f, DATE df, DATE dt, LONG idSku) {

    IF limitAccess() AND NOT access(currentUser(), Category.skuLedger) THEN {
        EXPORT FROM 'Нет доступа к API';
        RETURN;
    }
    
    IMPORT JSON FROM f AS FILE FIELDS LONG id DO {
        filter(DepartmentStore s) <- TRUE WHERE LONG (s AS DepartmentStore) == id;
    }
    allStores() <- TRUE IF NOT (GROUP SUM 1 IF filter(DepartmentStore s));
    
    LOCAL sku = Sku();
    sku() <- GROUP MAX Sku s IF LONG (s AS Sku) == idSku;
    
    EXPORT JSON FROM id = SkuLedger s, nameStock(s), 
        date = date(s),
        description = description(s),
        quantity = signedQuantity(s),
        balanceB = balanceB(s)
        WHERE access(stock(s)) AND active(s) AND sku(s) == sku() AND date(s) >= df AND date(s) <= dt
        ORDER date(s) DESC, s DESC;
} @@api;

getPriceListDetail (FILE f, DATE df, DATE dt, LONG idSku) {

    IF limitAccess() AND NOT access(currentUser(), Category.skuLedger) THEN {
        EXPORT FROM 'Нет доступа к API';
        RETURN;
    }
    
    IMPORT JSON FROM f AS FILE FIELDS LONG id DO {
        filter(DepartmentStore s) <- TRUE WHERE LONG (s AS DepartmentStore) == id;
    }
    allStores() <- TRUE IF NOT (GROUP SUM 1 IF filter(DepartmentStore s));
    
    LOCAL sku = Sku();
    sku() <- GROUP MAX Sku s IF LONG (s AS Sku) == idSku;
    
    EXPORT JSON FROM fromDate(UserPriceListDetail d), toDate(d),
        stockGroups = (GROUP CONCAT name(StockGroup g) IF dataIn(priceList(d), g), ', ' ORDER name(g), g),
        stocks = (GROUP CONCAT name(Stock s) IF dataIn(priceList(d), s), ', ' ORDER name(s), s),
        prices = (GROUP CONCAT (name(DataPriceListType t) + ' : ' + TEXT (price(d, t))) IF in(priceList(d), t) AND price(d, t), ', ' ORDER name(t), t)
        WHERE fromDate(d) <= dt AND toDate(d) >= df AND sku(d) == sku() AND (GROUP SUM 1 IF access(Stock st) AND in(priceList(d), st));

} @@api;

getSkuDateSalesBalance (FILE f, DATE df, DATE dt, LONG idSku) {

    IF limitAccess() AND NOT access(currentUser(), Category.skuLedger) THEN {
        EXPORT FROM 'Нет доступа к API';
        RETURN;
    }
    
    IMPORT JSON FROM f AS FILE FIELDS LONG id DO {
        filter(DepartmentStore s) <- TRUE WHERE LONG (s AS DepartmentStore) == id;
    }
    allStores() <- TRUE IF NOT (GROUP SUM 1 IF filter(DepartmentStore s));    
    
    LOCAL sku = Sku();
    LOCAL sold = NUMERIC[16,5](DATE);
    LOCAL balance = NUMERIC[16,5](DATE);
    
    sku() <- GROUP MAX Sku s IF LONG (s AS Sku) == idSku;
    sold(DATE d) <- GROUP SUM quantitySold(sku(), Stock st, d, d) IF access(st) AND iterate(d, df, dt);
    balance(DATE d) <- GROUP SUM balanceA(sku(), Stock st, d) IF access(st) AND iterate(d, df, dt);
    
    EXPORT JSON FROM date = DATE d, sold(d), balance(d) WHERE iterate(d, df, dt) AND (sold(d) OR balance(d));
} @@api;

getSkuMarkups (DATE df, DATE dt, LONG idSku) {

    IF limitAccess() AND NOT access(currentUser(), Category.skuLedger) THEN {
        EXPORT FROM 'Нет доступа к API';
        RETURN;
    }
    
    LOCAL sku = Sku();
    sku() <- GROUP MAX Sku s IF LONG (s AS Sku) == idSku;
    
    EXPORT JSON FROM id = CalcPriceListType t, markup = overMarkup(t, sku()), 
        level = (OVERRIDE ('Товар' IF dataMarkup(t, sku())), name(group(groupType(t), sku()))) WHERE overMarkup(t, sku());
} @@api;