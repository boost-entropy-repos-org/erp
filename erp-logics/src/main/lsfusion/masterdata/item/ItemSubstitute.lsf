MODULE ItemSubstitute;

REQUIRE Item, Document, Range;

NAMESPACE Item;

CLASS SubstituteList 'Замены';
TABLE substituteList (SubstituteList);

@defineDocumentHeaderTimePrefix(SubstituteList, , ' документа');

@deriveDocumentHeaderTimePrefix(SubstituteList, );

@defineDocumentHeaderNote(SubstituteList);

inactive 'Неактивная' = DATA BOOLEAN (SubstituteList) IN documentPrm;
active 'Активная' = SubstituteList o IS SubstituteList AND NOT inactive(o);

itemGroup = DATA ItemGroup (SubstituteList);
nameItemGroup 'Товарная группа' (SubstituteList o) = name(itemGroup(o)) IN documentPrm;

CONSTRAINT itemGroup(SubstituteList o) AND NOT isLeaf(itemGroup(o))
    CHECKED BY itemGroup[SubstituteList] MESSAGE 'Нужно выбрать нижнюю товарную группу';

CLASS SubstituteListDetail 'Аналог';
TABLE substituteListDetail (SubstituteListDetail);

substituteList = DATA SubstituteList (SubstituteListDetail) NONULL DELETE INDEXED;

@defineDocumentDetailIndex(substituteList, SubstituteListDetail);

sku = DATA Sku (SubstituteListDetail) INDEXED;
nameSku 'Наименование товара'(SubstituteListDetail d) = name(sku(d)) IN id;
idBarcodeSku 'Штрихкод' (SubstituteListDetail d) = idBarcode(sku(d)) IN id;
shortNameUOMSku 'Ед. изм.'(SubstituteListDetail d) = shortNameUOM(sku(d));
nameCountrySku 'Страна' (SubstituteListDetail d) = nameCountry(sku(d));
nameManufacturerSku 'Производитель' (SubstituteListDetail d) = nameManufacturer(sku(d));

CONSTRAINT SETCHANGED(sku(SubstituteListDetail d)) AND [ GROUP SUM 1 BY sku(SubstituteListDetail ud), substituteList(ud)](sku(d), substituteList(d)) > 1
    MESSAGE 'Запрещено добавлять товар в документ несколько раз';
CONSTRAINT SubstituteListDetail d IS SubstituteListDetail AND NOT sku(d)
    MESSAGE 'Строка с товаром в документе не может быть пустой';
CONSTRAINT (SETCHANGED(sku(SubstituteListDetail d)) OR CHANGED(inactive(substituteList(d)))) AND active(substituteList(d)) AND [ GROUP SUM 1 IF active(substituteList(SubstituteListDetail ud)) BY sku(ud)](sku(d)) > 1
    MESSAGE 'Запрещено добавлять товар в несколько активных документов';
CONSTRAINT itemGroup(substituteList(SubstituteListDetail d)) AND sku(d) AND NOT itemGroup(sku(d)) == itemGroup(substituteList(d))
    CHECKED BY sku[SubstituteListDetail] MESSAGE 'Товар не принадлежит выбранной товарной группе';

FORM substituteList 'Документ замены'
    OBJECTS l = SubstituteList PANEL
    PROPERTIES(l) date, time, inactive, nameItemGroup, note
    
    OBJECTS d = SubstituteListDetail
    PROPERTIES(d) index, nameSku, idBarcodeSku, shortNameUOMSku, nameCountrySku, nameManufacturerSku
    PROPERTIES(d) NEW, DELETE GRID
    FILTERS  substituteList(d) == l 
    
    EDIT SubstituteList OBJECT l
;

FORM substituteLists 'Замены'
    OBJECTS l = SubstituteList
    PROPERTIES(l) READONLY inactive, date, time, nameItemGroup, note
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE
    
    OBJECTS d = SubstituteListDetail
    PROPERTIES(d) READONLY index, nameSku, idBarcodeSku, shortNameUOMSku, nameCountrySku, nameManufacturerSku
    FILTERS  substituteList(d) == l 
    
    FILTERGROUP active FILTER 'Активные' active(l) DEFAULT
    
    LIST SubstituteList OBJECT l
;

NAVIGATOR {
    skuNavigator {
        NEW substituteLists;
    }
}

substituteList (Sku sk) = GROUP MAX substituteList(SubstituteListDetail d) IF active(substituteList(d)) BY sku(d);
overCountRange 'В ассортименте' (Sku s, DepartmentStore ds, DATE d) = OVERRIDE countRange(s, store(ds), d), (GROUP SUM countRange(sku(SubstituteListDetail sd), store(ds), d) IF substituteList(sd) == substituteList(s));

adjustAverageSold 'Продаж в день с учетом замены' = DATA NUMERIC[14,3] (Sku, Stock);

calcAdjustQuantitySoldInterval 'Дополнительные однодневные продажи' (SubstituteList l) {
    LOCAL extraAverageSold = NUMERIC[14,3] (Stock);
    extraAverageSold(Stock st) <-
        (GROUP SUM averageSold(Sku sk, st) IF NOT countRange(sk,st,currentDate()) AND substituteList(sk) == l) /
        (GROUP SUM 1 IF NOT countRange(Sku sk,st,currentDate()) AND substituteList(sk) == l);
    FOR substituteList(Sku sk) == l AND countRange(sk, Stock st, currentDate()) DO {
        adjustAverageSold(sk,st) <- extraAverageSold(st);
    }
    APPLY;
} CONFIRM;

calcAdjustQuantitySoldInterval 'Дополнительные однодневные продажи (все)' () {
    adjustAverageSold(Sku sk, Stock st) <- NULL;
    FOR active(SubstituteList l) DO {
        calcAdjustQuantitySoldInterval(l);
    }
} CONFIRM;

EXTEND FORM substituteLists
    PROPERTIES calcAdjustQuantitySoldInterval(l) SHOWIF active(l), calcAdjustQuantitySoldInterval()
;
DESIGN substituteLists {
    OBJECTS {
        NEW pane {
            type = TABBED;
            fill = 1;
            MOVE BOX(d);
            NEW actions {
                caption = 'Действия';
                MOVE PROPERTY(calcAdjustQuantitySoldInterval(l));
                MOVE PROPERTY(calcAdjustQuantitySoldInterval());
            }
        }
    }
}