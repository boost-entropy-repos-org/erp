MODULE Schedule;

REQUIRE Time, MasterData, Utils;

CLASS Schedule 'Расписание';

name 'Наименование' = DATA STRING[100] (Schedule);

CLASS ScheduleDetail 'Строка расписания';

schedule = DATA Schedule (ScheduleDetail) INDEXED NONULL DELETE;

timeFrom 'Время с' = DATA TIME (ScheduleDetail);
timeTo 'Время по' = DATA TIME (ScheduleDetail);

dowFrom 'День недели с' = DATA DOW (ScheduleDetail);
captionDowFrom 'День недели с' (ScheduleDetail d) = staticCaption(dowFrom(d));
dowTo = DATA DOW (ScheduleDetail);
captionDowTo 'День недели по' (ScheduleDetail d) = staticCaption(dowTo(d));

dateFrom 'Дата с' = DATA DATE (ScheduleDetail);
captionDateFrom 'Дата с' = DATA STRING[100] (ScheduleDetail);
dateTo 'Дата по' = DATA DATE (ScheduleDetail);
captionDateTo 'Дата по' = DATA STRING[100] (ScheduleDetail);

CONSTRAINT (timeFrom(ScheduleDetail d) AND NOT timeTo(d)) OR (timeTo(d) AND NOT timeFrom(d))
    MESSAGE 'Интервал должен быть закрытым';
    
CONSTRAINT (dowFrom(ScheduleDetail d) AND NOT dowTo(d)) OR (dowTo(d) AND NOT dowFrom(d))
    MESSAGE 'Интервал должен быть закрытым';
    
CONSTRAINT (dateFrom(ScheduleDetail d) AND NOT dateTo(d)) OR (dateTo(d) AND NOT dateFrom(d))
    MESSAGE 'Интервал должен быть закрытым';   

dateCaption 'День' = DATA LOCAL NESTED STRING[100] (INTEGER ); 
day = DATA LOCAL NESTED INTEGER (INTEGER );
month = DATA LOCAL NESTED INTEGER (INTEGER );
dow = DATA LOCAL NESTED INTEGER (INTEGER );

inDate (INTEGER date, ScheduleDetail d) =
    CASE WHEN d IS ScheduleDetail AND dateFrom(d) AND dateTo(d) AND number(extractMonth(dateFrom(d)))<=number(extractMonth(dateTo(d))) AND
              extractDay(dateFrom(d))<=extractDay(dateTo(d)) AND number(extractMonth(dateFrom(d)))<=month(date) AND 
              extractDay(dateFrom(d))<=day(date) AND number(extractMonth(dateTo(d)))>=month(date) AND extractDay(dateTo(d))>=day(date) THEN TRUE
         WHEN d IS ScheduleDetail AND dateFrom(d) AND dateTo(d) AND number(extractMonth(dateFrom(d)))>=number(extractMonth(dateTo(d))) AND extractDay(dateFrom(d))>=extractDay(dateTo(d)) AND        
              ((number(extractMonth(dateFrom(d)))<=month(date) AND extractDay(dateFrom(d))<=day(date) AND number(extractMonth(dateTo(d)))<=month(date) AND extractDay(dateTo(d))<=day(date)) OR
               (number(extractMonth(dateFrom(d)))>=month(date) AND extractDay(dateFrom(d))>=day(date) AND number(extractMonth(dateTo(d)))>=month(date) AND extractDay(dateTo(d))>=day(date))) THEN TRUE
         WHEN d IS ScheduleDetail AND NOT (dateFrom(d) AND dateTo(d)) AND date IS INTEGER THEN TRUE
         ELSE NULL; 
         
inDate =
    GROUP SUM 1 IF inDate(INTEGER date, ScheduleDetail d) BY date, schedule(d);

inDOW (INTEGER date, ScheduleDetail d) =
    CASE WHEN d IS ScheduleDetail AND dowFrom(d) AND dowTo(d) AND numberM(dowFrom(d))<=numberM(dowTo(d)) AND 
              numberM(dowFrom(d))<=dow(date) AND numberM(dowTo(d))>=dow(date) THEN TRUE
         WHEN d IS ScheduleDetail AND dowFrom(d) AND dowTo(d) AND numberM(dowFrom(d))>=numberM(dowTo(d)) AND 
              ((numberM(dowFrom(d))<=dow(date) AND numberM(dowTo(d))<=dow(date)) OR 
               (numberM(dowFrom(d))>=dow(date) AND numberM(dowTo(d))>=dow(date))) THEN TRUE 
         WHEN d IS ScheduleDetail AND NOT (dowFrom(d) AND dowTo(d)) AND date IS INTEGER THEN TRUE
         ELSE NULL;       

inDOW =
    GROUP SUM 1 IF inDOW(INTEGER date, ScheduleDetail d) BY date, schedule(d);
        
inTime (INTEGER hour, ScheduleDetail d)=
    CASE WHEN d IS ScheduleDetail AND timeFrom(d) AND timeTo(d) AND extractHour(timeFrom(d))<=extractHour(timeTo(d)) AND
              extractHour(timeFrom(d))<=hour AND extractHour(timeTo(d))>=hour THEN TRUE
         WHEN d IS ScheduleDetail AND timeFrom(d) AND timeTo(d) AND extractHour(timeFrom(d))>=extractHour(timeTo(d)) AND
              ((extractHour(timeFrom(d))<=hour AND extractHour(timeTo(d))<=hour) OR 
               (extractHour(timeFrom(d))>=hour AND extractHour(timeTo(d))>=hour)) THEN TRUE 
         WHEN d IS ScheduleDetail AND NOT (dateFrom(d) AND timeTo(d)) AND hour IS INTEGER THEN TRUE
         ELSE NULL;            

inTime =
    GROUP SUM 1 IF inTime(INTEGER hour, ScheduleDetail d) BY hour, schedule(d);             
    
in (INTEGER hour, INTEGER date, Schedule s) = inDate(date,s) + inDOW(date,s) + inTime(hour,s); 
    
showIn (INTEGER h, INTEGER d, Schedule s) = ' ' IF in(h,d,s);             
background (INTEGER h, INTEGER d, Schedule s) = IF in(h,d,s) THEN RGB(125,125,255) ;             
    
monthName (INTEGER i) =
    CASE WHEN i==1 THEN 'января'
         WHEN i==2 THEN 'февраля' 
         WHEN i==3 THEN 'марта'
         WHEN i==4 THEN 'апреля'
         WHEN i==5 THEN 'мая'
         WHEN i==6 THEN 'июня'
         WHEN i==7 THEN 'июля'
         WHEN i==8 THEN 'августа'
         WHEN i==9 THEN 'сентября'
         WHEN i==10 THEN 'октября'
         WHEN i==11 THEN 'ноября'
         WHEN i==12 THEN 'декабря';
           
    
changeDateFrom(ScheduleDetail d) {
    INPUT date = DATE DO{
        dateFrom(d) <- date;
        captionDateFrom(d) <- extractDay(date)+' '+ monthName(extractMonthNumber(date));        
    }
}     

changeDateTo(ScheduleDetail d) {
    INPUT date = DATE DO{
        dateTo(d) <- date;
        captionDateTo(d) <- extractDay(date)+' '+ monthName(extractMonthNumber(date));             
    }
} 

changeDateTimeFrom ABSTRACT (DATETIME );
changeDateTimeTo ABSTRACT (DATETIME);

FORM schedule 'Расписание'
    OBJECTS s = Schedule PANEL 
    PROPERTIES(s) name 
    
    OBJECTS d = ScheduleDetail
    PROPERTIES(d) captionDateFrom ON CHANGE changeDateFrom(d), captionDateTo ON CHANGE changeDateTo(d), captionDowFrom, captionDowTo, timeFrom, timeTo 
               
    PROPERTIES(d) NEW, DELETE  
    
    FILTERS schedule(d)==s
    
    OBJECTS df=DATETIME PANEL , dt=DATETIME PANEL 
    PROPERTIES dateFrom=VALUE(df) ON CHANGE changeDateTimeFrom(dt), dateTo=VALUE(dt) ON CHANGE changeDateTimeTo(df)
    
    
    OBJECTS hour = INTEGER 
    FILTERS iterate(hour,0,23)    
    
    OBJECTS date = INTEGER 
    PROPERTIES READONLY dateCaption(date)
    FILTERS iterate(date,1,daysInclBetweenDates(toDate(df),toDate(dt)))
    
    PROPERTIES BACKGROUND background(hour,date,s) READONLY showIn(hour,date,s) COLUMNS (hour) HEADER LONG(hour)
    
    EDIT Schedule OBJECT s    
;

DESIGN schedule {
    NEW mainContainer{
        type = SPLITV;
        fill=1;
        NEW topContainer{
            type = CONTAINERV ;
            fill=1;
            caption = 'Параметры';
            MOVE BOX(s);
            MOVE BOX(d);
        }
        NEW bottomContainer{
            type = CONTAINERV;
            fill = 1;
            caption = 'Результат';
            NEW dateCotainer{
                caption = 'Период';
                type = CONTAINERH;
                MOVE PROPERTY(dateFrom);
                MOVE PROPERTY(dateTo);
            }
            MOVE BOX (date);
            MOVE BOX (hour);
        }                 
    }   
    MOVE TOOLBARBOX;
}

FORM dialogSchedules 'Расписания'
    OBJECTS s = Schedule  
    PROPERTIES(s) READONLY name
    
    OBJECTS d = ScheduleDetail
    PROPERTIES(d) READONLY captionDateFrom, captionDateTo, captionDowFrom, captionDowTo, timeFrom, timeTo
    
    FILTERS schedule(d)==s

    LIST Schedule OBJECT s
;

FORM schedules 'Расписания'
    OBJECTS s = Schedule  
    PROPERTIES(s) READONLY name
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
        
    OBJECTS d = ScheduleDetail
    PROPERTIES(d) READONLY captionDateFrom, captionDateTo, captionDowFrom, captionDowTo, timeFrom, timeTo

    FILTERS schedule(d)==s         
;

setDates() {
    SEEK schedule.df = dateTimeToDateTime(firstDayOfMonth(currentDate()),00:00);
    SEEK schedule.dt = dateTimeToDateTime(lastDayOfMonth(currentDate()),23:59);

    LOCAL i=INTEGER();
    i()<-1;
    FOR iterate(DATE d,firstDayOfMonth(currentDate()),lastDayOfMonth(currentDate())) ORDER d DO {
        dateCaption(i()) <- (extractDay(d)+' '+ monthName(extractMonthNumber(d))); 
        day(i()) <- extractDay(d); 
        month(i()) <- number(extractMonth(d));          
        dow(i()) <- numberM(extractDOW(d));          
        i() <- i() + 1;
    }       
}

changeDateTimeFrom (DATETIME  dt) + {
    INPUT df = DATETIME DO {
        SEEK schedule.df = df;
        LOCAL i=INTEGER();
        i()<-1;
        FOR iterate(DATE d,toDate(df),toDate(dt)) ORDER d DO {
            dateCaption(i()) <- (extractDay(d)+' '+ monthName(extractMonthNumber(d))); 
            day(i()) <- extractDay(d); 
            month(i()) <- number(extractMonth(d)); 
            dow(i()) <- numberM(extractDOW(d));  
            i() <- i() + 1;
        }       
    }
}

changeDateTimeTo (DATETIME  df) + {
    INPUT dt = DATETIME DO {
        SEEK schedule.dt = dt; 
        LOCAL i=INTEGER();
        i()<-1;   
        FOR iterate(DATE d,toDate(df),toDate(dt)) ORDER d DO {
            dateCaption(i()) <- (extractDay(d)+' '+ monthName(extractMonthNumber(d))); 
            day(i()) <- extractDay(d); 
            month(i()) <- number(extractMonth(d));
            dow(i()) <- numberM(extractDOW(d));                
            i() <- i() + 1;
        }         
    }
}

EXTEND FORM schedule 
    EVENTS
        ON INIT setDates()    
;

NAVIGATOR {
    masterData{
        NEW schedules;
    }
}