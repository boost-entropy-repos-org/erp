MODULE  BOM;

REQUIRE EmployeeStock,
        Numerator,
        Barcode,
        Document,
        Sku,
        Utils,
        Time,
        Manufacturing,
        Integration,
        StockSkuDocument;

dataComponent 'Сырье' = DATA BOOLEAN (SkuGroup);
countDataComponentSkuGroup () = GROUP SUM 1 IF dataComponent(SkuGroup g);

levelParentComponent (SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataComponent(parent) MATERIALIZED;    
nearestParentComponent (SkuGroup skuGroup) = skuGroup(skuGroup, levelParentComponent(skuGroup));
nearestComponent (SkuGroup skuGroup) = dataComponent( nearestParentComponent (skuGroup));
component 'Сырье' (SkuGroup skuGroup) =
    OVERRIDE dataComponent(skuGroup), 
             nearestComponent (skuGroup) MATERIALIZED;    
filterComponent (SkuGroup parent) = GROUP SUM 1 IF component(SkuGroup group) AND isParent(group, parent);
               
quantityChildWithComponent (SkuGroup group) = GROUP SUM 1 IF dataComponent(SkuGroup childGroup) AND isParent(childGroup, group) MATERIALIZED;
quantityParentWithComponent (SkuGroup group) = GROUP SUM 1 IF dataComponent(SkuGroup parentGroup) AND isParent(group, parentGroup) MATERIALIZED;          
      
backgroundComponent 'Цвет' (SkuGroup group) = CASE
    WHEN dataComponent(group) THEN RGB(0,0,0)
    WHEN nearestComponent(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithComponent(group) != descendantNumber(group) AND NOT quantityParentWithComponent(group) THEN RGB(203,203,203);                                          
             
//--

dataProduct 'Готовые изделия' = DATA BOOLEAN (SkuGroup);
countDataProductSkuGroup () = GROUP SUM 1 IF dataProduct(SkuGroup g);

levelParentProduct (SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataProduct(parent) MATERIALIZED;    
nearestParentProduct (SkuGroup skuGroup) = skuGroup(skuGroup, levelParentProduct(skuGroup));
nearestProduct (SkuGroup skuGroup) = dataProduct( nearestParentProduct (skuGroup));
product 'Готовые изделия' (SkuGroup skuGroup) =
    OVERRIDE dataProduct(skuGroup), 
             nearestProduct (skuGroup) MATERIALIZED; 

filterProduct (SkuGroup parent) = GROUP SUM 1 IF product(SkuGroup group) AND isParent(group, parent);

quantityChildWithProduct (SkuGroup group) = GROUP SUM 1 IF dataProduct(SkuGroup childGroup) AND isParent(childGroup, group) MATERIALIZED;
quantityParentWithProduct (SkuGroup group) = GROUP SUM 1 IF dataProduct(SkuGroup parentGroup) AND isParent(group, parentGroup) MATERIALIZED;          
      
backgroundProduct 'Цвет' (SkuGroup group) = CASE
    WHEN dataProduct(group) THEN RGB(0,0,0)
    WHEN nearestProduct(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithProduct(group) != descendantNumber(group) AND NOT quantityParentWithProduct(group) THEN RGB(203,203,203);    

EXTEND FORM options 
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES(sk) READONLY order, name
    PROPERTIES(sk) component BACKGROUND backgroundComponent(sk), product BACKGROUND backgroundProduct(sk)
    ORDER order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT    
;
DESIGN options {
    pane {
        NEW manufacturing {
            caption = 'Производство';
            MOVE BOX(TREE skuTree);
        }
    }
}

isComponentGroup 'Фильтр сырье (группа)' (Sku sku) = component(Stock.skuGroup(sku)) OR (sku IS Sku AND NOT countDataComponentSkuGroup ());
isProductGroup 'Фильтр готовые изделия (группа)' (Sku sku) = product(Stock.skuGroup(sku))  OR (sku IS Sku AND NOT countDataProductSkuGroup ());

// ---------------- Материалы ------------------- //
CLASS ABSTRACT Material 'Материал';
TABLE material(Material);

id 'Код' = ABSTRACT VARSTRING[100] (Material) MATERIALIZED INDEXED CHARWIDTH 10;

name 'Наименование' (material) = ABSTRACT VARISTRING[255] (Material) MATERIALIZED INDEXED CHARWIDTH 40;

UOM (material) = ABSTRACT UOM (Material) MATERIALIZED;
shortNameUOM 'Ед. изм.' (Material material) = shortName(UOM(material)) IN base;

country (material) = ABSTRACT Country (Material) MATERIALIZED;
nameCountry 'Страна' (Material material) = name(country(material)) IN base;

addMaterial 'Добавить' = ABSTRACT LIST () IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

copy 'Копировать' = ABSTRACT LIST (Material) CHANGEKEY 'F5' TOOLBAR;

sku (material) = ABSTRACT Sku (Material) MATERIALIZED;

skuGroup (Material material) = Stock.skuGroup(sku(material)) MATERIALIZED;
isParent (SkuGroup skuGroup, Material material) = isParent(skuGroup(material), skuGroup);

FORM materials 'Материалы'

    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDER order(sg), skuGroupName
    FILTERS filterComponent(sg)
    
    OBJECTS m = Material
    PROPERTIES(m) READONLY id SHOWIF showIDs(), name, shortNameUOM, objectClassName    
    PROPERTIES() addMaterial TODRAW m
    PROPERTIES(m) EDIT NEWSESSION, copy
    FILTERS isParent(sg, m)
    ORDER name(m)

    LIST Material OBJECT m
;

DESIGN materials {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE BOX(TREE skuTree) {
                caption = 'Группы Материалов';
            }

            MOVE BOX(m) {
                fill = 2;
                GRID(m) {
                    defaultComponent = TRUE;
                }
                PROPERTY(copy(m)) { focusable = TRUE; }
            }
        }

        MOVE TOOLBARBOX;
    }
}


// --------------- Товары ----------------- //
EXTEND CLASS Sku : Material;

name(Sku material) += Stock.name(material);
UOM(Sku material) += Stock.UOM(material);
country(Sku material) += Stock.country(material);

addMaterial () += { addSku(); }
copy(Sku sku) += { Stock.copy(sku); }

sku(Sku material) += material AS Sku;

id(Sku sku) += Stock.id(sku);

// ---------------------- BOM'ы ----------------------

CLASS BOM 'Спецификация' : Document;
TABLE BOM (BOM);
TABLE employeeBOM(Employee, BOM); 

@defineExternalizable(BOM, VARSTRING[100]);

@defineDocumentHeaderTimePrefix(BOM, , ' документа');
@deriveDocumentHeaderTimePrefix(BOM, );

name 'Наименование' = DATA VARISTRING[100](BOM);

@defineDocumentHeaderCreated(BOM);
@defineDocumentHeaderNote(BOM);

@defineNumbered(BOM);
@defineNumeratedDefault(BOM, 'Спецификации', 'СП');
  
description 'Название спецификации' (BOM BOM) = VARSTRING[200](CONCAT ' ', name(BOM), 
                                                                          '№'+seriesNumber(BOM)) CHARWIDTH 30; 
    

fromDate 'Дата с' = DATA DATE (BOM) IN documentPrm;
toDate 'Дата по' = DATA DATE (BOM) IN documentPrm;

inactive 'Неактивная' = DATA BOOLEAN (BOM) IN documentPrm;
active 'Активная' = BOM b IS BOM AND NOT inactive(b);

// ------------- Изделия ----------- //
CLASS Product 'Изделие' : Material, DocumentDetail;
TABLE product (Product);

@defineExternalizable(product, VARSTRING[100], ext);

EXTEND FORM materials

    FILTERGROUP filters
        FILTER 'Изделие' m IS Product 'F11'
        FILTER 'Sku' m IS Sku 'F10'
;

sku = DATA Sku (Product) NONULL INDEXED;
nameSku 'SKU' (Product product) = Stock.name(sku(product)) IN recognize;
idBarcodeSku 'Штрихкод' (Product product)= idBarcode(sku(product));
idSku 'Код' (Product product)= Stock.id(sku(product));

id 'Код изделия' (Product product) = Stock.id(sku(product))IN recognize CHARWIDTH 10;
id(Product p) += id(p);

editSku 'Редактировать SKU' (Product p) = { NEWSESSION { edit(sku(p)); } }

UOM = DATA UOM (Product);
shortNameUOM 'Ед.изм.' (Product product) = shortName(UOM(product)) IN recognize;
UOM(Product product) <- Stock.UOM(sku(product)) WHEN CHANGED (sku(product));


@defineDocumentRelation (BOM, Product, ' (изделие)');
@defineDocumentDetailTimePrefix(BOM, Product, , ' документа');

inactive 'Неактивный' (Product product) = inactive(BOM(product));
description 'Название документа' (Product product) = description(BOM(product));

@defineDocumentDetailIndexPersistent (BOM, Product);
@defineDocumentDetailActionsCustom (BOM, Product);

products 'Изделия' (BOM) = GROUP CONCAT VARISTRING[2000](CONCAT '', nameSku(Product p), ' ('+idSku(p)+')'), ', '
                                       ORDER index(p), p
                                       BY BOM(p) CHARWIDTH 30 MATERIALIZED;

idProducts 'Коды' (BOM) = GROUP CONCAT VARSTRING[255](idSku(Product p)), ', '
                                      ORDER index(p), p
                                      BY BOM(p) CHARWIDTH 13 MATERIALIZED; 
                                                                              
fullName 'Полное название' (BOM BOM) = VARISTRING[2000] (CONCAT '/',
                                                              products(BOM),                                                                  
                                                              name(BOM)) CHARWIDTH 30;
                                       
@defineDocumentDetailQuantityCustomPrefix (product, , );

@defineDocumentHeaderQuantityCustomPrefix (BOM, product, , ' (изделие)');

pricePercent 'Удельный вес цены,%' = DATA NUMERIC[16,10] (Product);
pricePercent(Product product) <- 100.000 WHEN SET (product IS Product);
priceCoeff (Product product) = pricePercent(product) / 100 MATERIALIZED;

pricePercent 'Удельный вес цен, %' = GROUP SUM pricePercent(Product product) BY BOM(product) MATERIALIZED IN documentSum;

name(Product material) += VARISTRING[255] (CONCAT '/',
                                              description(BOM(material)),
                                              nameSku(material));

UOM(Product material) += Stock.UOM(sku(material));
country(Product material) += Stock.country(sku(material));
sku (Product material) += sku(material);

calcPriceCoeff 'Коэффициент цены' (Product product) = NUMERIC[20,5](quantityProduct(BOM(product)) * pricePercent(product) 
    / (quantity(product) * 100));  

calcPricePercentNumeric '%' (Product product, NUMERIC[8,5] num) = (num AS NUMERIC[8,5]) * quantity(product)*100 
    /(quantityProduct(BOM(product)) IF quantityProduct(BOM(product))!= 0); 
    
changePriceCoeff(Product product) = {
    INPUT n = NUMERIC[8,5] DO        
        pricePercent(product) <- NUMERIC[16,10](calcPricePercentNumeric(product, n));
}
series 'Серия' = series(BOM(Product p)) FIXEDCHARWIDTH 3;
number 'Номер' = number(BOM(Product p)) CHARWIDTH 7;

fromDate 'Дата с' = fromDate(BOM(Product p));
toDate 'Дата по' = toDate(BOM(Product p));

FORM products 'Изделия'
    OBJECTS p=Product
    PROPERTIES (p) READONLY number, series, date
    PROPERTIES(p) id SHOWIF showIDs()
    PROPERTIES(p) READONLY inactive, description, index, nameSku, shortNameUOM, quantity
    PROPERTIES(p) READONLY fromDate, toDate
//    PROPERTIES (p) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
    FILTERGROUP active
        FILTER 'Активные' NOT inactive(p) DEFAULT

    LIST Product OBJECT p
;


// ------------- Компоненты ----------- //
CLASS Component 'Компонент' : DocumentDetail;
TABLE component (Component);

//nameComponent 'Наименование' = DATA VARISTRING[100](Component);

@defineExternalizable(component, VARSTRING[100], ext);

@defineDocumentRelation (BOM, Component, ' (компонент)');
@defineDocumentDetailTimePrefix(BOM, Component, , ' документа');

description 'Спецификация' (Component component)= description(BOM(component));
productsBOM 'Название' = products(BOM(Component component));

@defineDocumentDetailIndexPersistent (BOM, Component);
@defineDocumentDetailActionsCustom (BOM, Component);

material = DATA Material (Component) INDEXED;
nameMaterial 'Материал' (Component component) = name(material(component));
idBarcodeSku 'Штрихкод' (Component component)= idBarcode(material(component));
id 'Код компонента' (Component component)= id(material(component));
sku 'Sku' (Component c) = sku(material(c)) MATERIALIZED INDEXED;


components 'Компоненты' (BOM) = GROUP CONCAT VARISTRING[2000](CONCAT '', nameMaterial(Component component), ' ('+id(component)+')'), ', '
                                       ORDER index(component), component
                                       BY BOM(component) CHARWIDTH 30 MATERIALIZED;
idComponents 'Коды' (BOM) = GROUP CONCAT VARSTRING[255](id(Component component)), ', '
                                       ORDER index(component), component
                                       BY BOM(component) CHARWIDTH 20 MATERIALIZED;                                       
                                     
name 'Компонент' (Component component) = VARSTRING[255](CONCAT '/', description(BOM(component)), 
                                                     nameMaterial(component)) MATERIALIZED;
                                      

UOM = DATA UOM (Component);
shortNameUOM 'Ед. изм.' (Component component) = shortName(UOM(component));
UOM(Component component) <- UOM(material(component)) WHEN CHANGED (material(component));

// Кол-во нетто
@defineDocumentDetailQuantityCustomPrefix (component, netto, ' (нетто)');
@defineDocumentHeaderQuantityCustomPrefix (BOM, component, netto, ' (нетто компонент)');

// % Потерь
wastage '% потерь'= DATA NUMERIC[8,3] (Component);

coeffWastageTechnologies = ABSTRACT VALUE OVERRIDE FIRST NUMERIC[20,9] (Component, DATE);
coeffWastageTechnologies (Component c, DATE d) += NUMERIC[20,9](1.0) IF c IS Component AND d IS DATE; 

wastage '% потерь' (Component component, DATE date) = [= (1.0-(X*(100.0-Y)/100.0))*100.0](
    coeffWastageTechnologies(component, date),
    (OVERRIDE wastage(component),  0 IF component IS Component));
//wastageTechnologiesComponentDate(component, date) (+) wastageComponent(component);                                                 

// Кол-во брутто

@defineDocumentDetailQuantityCustomPrefix (component, brutto, ' (брутто)');
@defineDocumentHeaderQuantityCustomPrefix (BOM, component, brutto, ' (брутто компонент)'); 
            
changeNettoQuantity(Component component) = {
    INPUT n = NUMERIC[16,5] DO {
        nettoQuantity(component) <- n;
        IF n THEN
            bruttoQuantity(component) <- NUMERIC[16,5](nettoQuantity(component)/(1 - (OVERRIDE wastage(component)/100,0 IF component IS Component))); 
    }
}   
overChangeWastage = ABSTRACT LIST (Component);                                                                                                                                                                                                                                                                                                                                                    
changeWastage(Component component) = {
    INPUT n = NUMERIC[8,3] DO {
        wastage(component) <- n;   
        bruttoQuantity(component) <- NUMERIC[16,5](nettoQuantity(component)/(1 - (OVERRIDE n/100,0 IF component IS Component))); 
        overChangeWastage(component);
    }
}                                                                                                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                                                                                            
changeBruttoQuantity(Component component) = {
    INPUT n = NUMERIC[16,5] DO {    
        bruttoQuantity(component) <- n;
        wastage(component) <- NUMERIC[8,3]((1-(nettoQuantity(component)/(bruttoQuantity(component) IF bruttoQuantity(component)!=0)))*100); 
    }                
}
backgroundBruttoQuantity 'Цвет' = ABSTRACT COLOR (Component);
backgroundBruttoQuantity 'Цвет' (BOM b) = RGB(229,229,229) IF b IS BOM;

bruttoQuantity 'Кол-во (брутто) с учетом технологий' (Component component, DATE date) = NUMERIC[16,5](bruttoQuantity(component)/coeffWastageTechnologies(component, date)) COMPLEX;
                                                                                
overCurBruttoQuantity 'Кол-во (брутто) с уч. тех-ий' (Component component) = bruttoQuantity(component, currentDate());

FORM components 'Компоненты'
    OBJECTS c=Component
    PROPERTIES(c) READONLY description, id SHOWIF showIDs(), nameMaterial, shortNameUOM, nettoQuantity
//    PROPERTIES (c) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION

    LIST Component OBJECT c
;

CONSTRAINT material(Component c) IS Sku AND NOT isComponentGroup(material(c)) CHECKED  BY material[Component]
    MESSAGE 'В качестве компонента выбран товар, который не входит в группу: Сырье';
CONSTRAINT sku(Product p) AND NOT isProductGroup(sku(p)) CHECKED  BY sku[Product]
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';      
    
overSku (Component c) = IF material(c) IS Product THEN sku[Product](material(c)) ELSE material(c);
    
overNetWeight = OVERRIDE netWeight(overSku(Component c)); 
overNettoNetWeight 'Вес (нетто)' (Component c) = nettoQuantity(c) * (OVERRIDE overNetWeight(c), 1.0 IF c IS Component);
overBruttoNetWeight 'Вес (брутто)' (Component c) = bruttoQuantity(c) * (OVERRIDE overNetWeight(c), 1.0 IF c IS Component);

overNettoNetWeight 'Вес (нетто)' (Product p) = quantity(p) * (OVERRIDE netWeight(sku(p)), 1.0 IF p IS Product);

overNettoNetWeightProduct 'Вес нетто изд. (всего)' (BOM) = GROUP SUM overNettoNetWeight(Product idetail) BY BOM(idetail) IN documentSum MATERIALIZED;
overNettoNetWeightComponent 'Вес нетто ком. (всего)' (BOM) = GROUP SUM overNettoNetWeight(Component idetail) BY BOM(idetail) IN documentSum MATERIALIZED;            
overBruttoNetWeightyComponent 'Вес брутто ком. (всего)' (c)= GROUP SUM overBruttoNetWeight(Component cc) BY BOM(cc) IN documentSum MATERIALIZED;


overCurBruttoNetWeight 'Вес (брутто) с уч. тех-ий' (Component c) = overCurBruttoQuantity(c) * (OVERRIDE overNetWeight(c), 1.0 IF c IS Component);
overCurBruttoNetWeightyComponent 'Вес брутто комп. (всего) с уч. тех-ий' (BOM)= GROUP SUM overCurBruttoNetWeight(Component c) BY BOM(c) IN documentSum;      
        
//CONSTRAINT overNettoNetWeightProductBOM(b) AND overNettoNetWeightComponentBOM(b) AND NOT (overNettoNetWeightProductBOM(b) == overNettoNetWeightComponentBOM(b))
//    MESSAGE 'Вес нетто изделия не равен весу нетто компонентов в спецификации';   
                           
//------------------------------- Формы -------------------------------------//
background 'Цвет' (Component component) = RGB(255,255,229) IF material(component) IS Product;

TABLE stockBOM (Stock, BOM);
TABLE stockGroupBOM (StockGroup, BOM);

dataIn 'Доступ разрешен (компания)' = DATA BOOLEAN (Stock, BOM);
dataIn 'Доступ разрешен (компания)' = DATA BOOLEAN (StockGroup, BOM);

levelParentCompany (BOM BOM, StockGroup stockGroup) = GROUP
                                                               MIN level(stockGroup, StockGroup parent) IF dataIn(parent, BOM) MATERIALIZED;
nearestParentCompany (BOM BOM, StockGroup stockGroup) = stockGroup(stockGroup, levelParentCompany(BOM, stockGroup));
nearestInCompany (BOM BOM, StockGroup stockGroup) =
    dataIn(nearestParentCompany (BOM, stockGroup), BOM) MATERIALIZED;

in 'Вкл.' (BOM BOM, StockGroup stockGroup) = OVERRIDE
    dataIn(stockGroup, BOM),
    nearestInCompany(BOM, stockGroup);

in 'Вкл.' (BOM BOM, Stock stock) = OVERRIDE
    dataIn(stock, BOM),
    nearestInCompany(BOM, stockGroup(stock)) AND isCompany(stock) MATERIALIZED;
    
    
countStocks (BOM BOM) = GROUP SUM 1 IF in(BOM, Stock stock) MATERIALIZED;
    
quantityChildWith (StockGroup stockGroup, BOM BOM) = GROUP SUM 1 IF dataIn(StockGroup childstockGroup, BOM) AND isParent(childstockGroup, stockGroup) MATERIALIZED;
quantityParentWith (StockGroup stockGroup, BOM BOM) = GROUP SUM 1 IF dataIn(StockGroup parentstockGroup, BOM) AND isParent(stockGroup, parentstockGroup) MATERIALIZED;     
    
backgroundIn 'Цвет' (Object BOM, Object stockGroup) = CASE 
    WHEN dataIn[StockGroup,BOM](stockGroup, BOM) THEN RGB(0,0,0)
    WHEN nearestInCompany(stockGroup, BOM) THEN RGB(230,248,250) 
    WHEN quantityChildWith (stockGroup, BOM) != descendantNumber[StockGroup](stockGroup) AND NOT quantityParentWith (stockGroup, BOM) THEN RGB(203,203,203);    

editMaterial 'Редактировать компонент' (Component d) = { NEWSESSION { edit(material(d)); } }

stocks 'Склады' (BOM BOM) = GROUP
                                                 CONCAT name(Stock stock) IF in(BOM, stock) , ', '
                                                 ORDER stock CHARWIDTH 30 MATERIALIZED;
stocksIDBOM 'Склады' (BOM BOM) = GROUP
                                                 CONCAT id(Stock stock) IF in(BOM, stock) , ', '
                                                 ORDER stock CHARWIDTH 30 MATERIALIZED;          
                                                                                        
                                                                                        
EXTEND FORM products
    OBJECTS c = Component
    PROPERTIES(c) READONLY BACKGROUND background(c) index 
    PROPERTIES(c) READONLY BACKGROUND background(c) idBarcodeSku, id SHOWIF showIDs(), nameMaterial, shortNameUOM 
    PROPERTIES(c) READONLY BACKGROUND background(c) 
                  nettoQuantity, overNettoNetWeight,
                  wastage,
                  bruttoQuantity, overBruttoNetWeight
    ORDER index(c)
    FILTERS       BOM(c) == BOM(p)                                                                                      
; 
DESIGN products {
    BOX {
        NEW top {
            fill = 1;
            type = SPLITV;
            MOVE BOX(p);
            MOVE BOX(c);
        }
        MOVE TOOLBARBOX;
    }
}                                                                                    
                                                                                        
FORM BOM 'Спецификация'

    OBJECTS b=BOM PANEL

    PROPERTIES(b) inactive, name, nameNumerator, number, series, date, time, note, fromDate, toDate 
    PROPERTIES(b) READONLY overNettoNetWeightProduct, overNettoNetWeightComponent, overBruttoNetWeightyComponent, 
                  overCurBruttoNetWeightyComponent BACKGROUND backgroundBruttoQuantity(b), pricePercent
    OBJECTS p = Product
    PROPERTIES(p) index 
    PROPERTIES(p) ON EDIT editSku(p) idBarcodeSku, id SHOWIF showIDs(), nameSku, shortNameUOM     
    
    PROPERTIES(p) quantity, overNettoNetWeight READONLY, pricePercent, calcPriceCoeff ON CHANGE changePriceCoeff(p)

    PROPERTIES(p) NEW, deletep=DELETE GRID
    PROPERTIES(b) TODRAW p deleteProduct
    FILTERS       BOM(p) == b

    OBJECTS c = Component
    PROPERTIES(c) BACKGROUND background(c) index 
    PROPERTIES(c) BACKGROUND background(c) ON EDIT editMaterial(c) idBarcodeSku, id SHOWIF showIDs(), nameMaterial, shortNameUOM 
    PROPERTIES(c) BACKGROUND background(c) 
                  nettoQuantity ON CHANGE changeNettoQuantity(c), overNettoNetWeight READONLY,
                  wastage ON CHANGE changeWastage(c),
                  bruttoQuantity ON CHANGE changeBruttoQuantity(c), overBruttoNetWeight READONLY
    ORDER index(c)
    PROPERTIES(c) NEW, deletec=DELETE GRID
    PROPERTIES(b) TODRAW c deleteComponent
    FILTERS       BOM(c) == b
    
    TREE stockTree sg = StockGroup PARENT parent
    PROPERTIES    name(sg) READONLY, in(b,sg) BACKGROUND backgroundIn(b,sg)
    ORDER      name(sg)
    
    OBJECTS ts=Stock
    PROPERTIES    name(ts) READONLY, id(ts) READONLY SHOWIF showIDs(), in(b,ts)

    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    FILTERS isParent(sg, ts)
    ORDER name(ts)
    
    FILTERGROUP BOM FILTER 'Отм.' in(b,ts) 'ctrl F9'

    EDIT BOM OBJECT b
;

DESIGN BOM {

    BOX {
        size = (1024, 768);
        NEW specificationBox BEFORE TOOLBARBOX{
            type = TABBED;
            fill = 1;
            MOVE BOX(p) {
                caption = 'Изделие';
                PROPERTY (id(p)) { caption = 'Код изделия';}
            }
            MOVE BOX(c) {caption = 'Компонент';}
            NEW inBOM {
                caption = 'Склады';
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE stockTree);
                MOVE BOX(ts);
            }
        }

        MOVE BOX(b) BEFORE specificationBox {
            type = CONTAINERH;
            NEW headerRow1 {
                type = CONTAINERV;

                NEW headerRow11 {
                    caption = 'Шапка';
                    type = CONTAINERH;
                    MOVE PROPERTY(inactive(b));
                    MOVE PROPERTY(name(b)) { charWidth = 20; }
                    MOVE PROPERTY(nameNumerator(b));
                    MOVE PROPERTY(number(b));
                    MOVE PROPERTY(series(b));
                    MOVE PROPERTY(date(b));
                    MOVE PROPERTY(time(b));                    
                    
                }
                MOVE GROUP(documentPrm,b) {
                    type = CONTAINERH;
                }
                NEW kitchen {
                    caption = 'Кухня';
                    type = COLUMNS;
                    columns = 4;
                }

            }
            MOVE GROUP(documentSum,b) {
                columns = 1;
            }
        }
    }
}

@addEventGenerateNumberOnForm(BOM, b, BOM);

WHEN LOCAL FORMS BOM SET(BOM BOM IS BOM) DO {
    dataIn(Stock stock, BOM) <- TRUE WHERE dataAccessCompany(stock, currentUser());
    dataIn(StockGroup group, BOM) <- TRUE WHERE dataAccessCompany(group, currentUser());
};

overCopy = ABSTRACT LIST (BOM, BOM);
overCopy = ABSTRACT LIST (Component, Component);

copy 'Копировать'(BOM BOM) = {
	NEWSESSION {
	    NEW b = BOM {
	
	        note(b) <- note(BOM);
	        FOR BOM(Product product) == BOM NEW p=Product DO {
	            BOM(p) <- b;
	            sku(p) <- sku(product);
	            quantity(p) <- quantity(product);
	            pricePercent(p) <- pricePercent(product);
	        }
	
	        FOR BOM(Component component) == BOM NEW c=Component DO {
	            BOM(c) <- b;
	            material(c) <- material(component);
	            nettoQuantity(c) <- nettoQuantity(component);
	            
	            bruttoQuantity(c) <- bruttoQuantity(component);
	            wastage(c) <- wastage(component);
	            overCopy(c,component);
	        }
	        dataIn(Stock s, b) <- dataIn(s, BOM); 
	        dataIn(StockGroup g, b) <- dataIn(g, BOM);
	
	        EXEC overCopy(BOM, b);
	        
	        SHOW BOM OBJECTS b = b DOCKED;
	    }
	}
} TOOLBAR;

edit(Product p) += { DIALOG BOM OBJECTS b = BOM(p), p = p DOCKED; }

relationProducts (sku,BOM)= GROUP SUM 1 BY sku(Product p), BOM(p);
relationComponents (sku,BOM)= GROUP SUM 1 BY material(Component c), BOM(c);

isActive(BOM BOM, DATE date) = BOM IS BOM AND date IS DATE
                                        AND NOT inactive(BOM)
                                        AND NOT fromDate(BOM) > date
                                        AND NOT toDate(BOM) < date;
isActive(BOM BOM) = isActive(BOM, currentDate());

background 'Цвет' (BOM BOM) = CASE WHEN fromDate(BOM) > currentDate() THEN RGB(224,255,224)
                                  WHEN toDate(BOM) < currentDate() THEN RGB(255,224,224);     

addBOM 'Добавить'(Sku sku) = {
	NEWSESSION {
	    NEW b = BOM {
	    
	        NEW p = Product {   
	            BOM(p) <- b;
	            sku(p) <- sku;
	        } 
	        SHOW BOM OBJECTS  b = b DOCKED;
	    }
	}
} TOOLBAR IMAGE 'add.png' CHANGEKEY 'INSERT';

FORM BOMs 'Спецификации'

    OBJECTS b=BOM

    PROPERTIES(b)  READONLY BACKGROUND background(b) inactive, products, name, number, series,  date, time, fromDate, toDate, components,  
                   overNettoNetWeightProduct, overNettoNetWeightComponent, overBruttoNetWeightyComponent, pricePercent, note, stocks
    PROPERTIES (b) NEWSESSION NEW, EDIT, copy, deleteb=DELETE 
    PROPERTIES (b) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActive(b) 'F11'            
        FILTER 'Активные' isActive(b) OR (fromDate(b) > currentDate()) 'F10' DEFAULT
        
    OBJECTS p = Product
    PROPERTIES(p) READONLY index, idBarcodeSku, id SHOWIF showIDs(), nameSku, shortNameUOM,
                  quantity, overNettoNetWeight, pricePercent
    FILTERS       BOM(p) == b

    OBJECTS c = Component
    PROPERTIES(c) BACKGROUND  background(c) READONLY index, idBarcodeSku, id SHOWIF showIDs(), nameMaterial, 
                  shortNameUOM, nettoQuantity, overNettoNetWeight, wastage, bruttoQuantity, overBruttoNetWeight
                                                                                   
    FILTERS       BOM(c) == b
    
    OBJECTS p1 = Sku
    PROPERTIES(p1) READONLY idBarcode, Stock.id SHOWIF showIDs(), Stock.name, Stock.shortNameUOM
    PROPERTIES     TODRAW p1 NEWSESSION addSkuP1 = addSku(), EDIT(p1), DELETE(p1)  
    FILTERS        isProductGroup(p1)
    ORDER name(p1)
    
    OBJECTS b1=BOM    
    PROPERTIES(b1) READONLY inactive, products, name, date, number, series, components, overNettoNetWeightProduct, overNettoNetWeightComponent, 
                   overBruttoNetWeightyComponent, pricePercent, note, stocks
    PROPERTIES(b1) NEWSESSION EDIT
    PROPERTIES     addBOM(p1) TODRAW b1
    FILTERS        relationProducts(p1,b1)
          
    OBJECTS c1 = Component
    PROPERTIES(c1) BACKGROUND  background(c) READONLY index, idBarcodeSku, id SHOWIF showIDs(), 
                   nameMaterial, shortNameUOM, nettoQuantity, overNettoNetWeight, wastage, bruttoQuantity, overBruttoNetWeight
    FILTERS        BOM(c1) == b1   
    ORDER index(c1)
    

    OBJECTS c2 = Sku
    PROPERTIES(c2) READONLY idBarcode, Stock.id SHOWIF showIDs(), Stock.name, Stock.shortNameUOM
    PROPERTIES     TODRAW c2 NEWSESSION addSkuC2 = addSku(), EDIT(c2), DELETE(c2)   
    FILTERS        isComponentGroup(c2)                   
    OBJECTS b2=BOM    
    PROPERTIES(b2) READONLY inactive, products, name, date, number, series, components, overNettoNetWeightProduct, overNettoNetWeightComponent, 
                   overBruttoNetWeightyComponent, pricePercent, note, stocks
    PROPERTIES(b2) NEWSESSION EDIT                
    FILTERS        relationComponents(c2,b2)           
    ORDER name(c2)
    
    OBJECTS p2 = Product
    PROPERTIES(p2) READONLY index, idBarcodeSku, id SHOWIF showIDs(), nameSku, shortNameUOM, 
                   quantity, overNettoNetWeight, pricePercent
    FILTERS        BOM(p2) == b2    
    
;

DESIGN BOMs {
    BOX {
        size = (1024, 768);

        NEW documentContainer BEFORE TOOLBARBOX {
            type = TABBED ;
            fill = 1;
            NEW bom {
                type = SPLITV;
                caption = 'Спецификация';
                
                MOVE BOX(b);
                NEW documentDetail {
                    type = TABBED;
                    fill = 1;
    
                    MOVE BOX(p) {
                        caption = 'Изделие';
                        PROPERTY (id(p)) { caption = 'Код изделия';}
                    }
                    MOVE BOX(c) {
                        caption = 'Компонент';
                    }
    
                    NEW documentHistory {
                        caption = 'История';
    
                        MOVE GROUP(created,b);
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }                
            }                                 
            NEW product {
                fill =1;
                caption = 'Изделие';
                type = SPLITV;
                MOVE BOX(p1);
                NEW product1 {
                    fill = 1;
                    type = SPLITH;
                    MOVE BOX(b1);
                    MOVE BOX(c1);                    
                } 
            }  
            NEW component {
                fill =1;
                caption = 'Компонент';
                type = SPLITV;
                MOVE BOX(c2);
                NEW component1 {
                    fill = 1;
                    type = SPLITH;
                    MOVE BOX(b2);
                    MOVE BOX(p2) {
                        PROPERTY (id(p2)) { caption = 'Код изделия';}
                    };                    
                } 
            }                      
        }
        PROPERTY (id(p1)) { caption = 'Код изделия';}
        PROPERTY (id(c2)) { caption = 'Код компонента';}
    }
}

copyBOMProduct 'Копировать'(Sku sku) = {
    Stock.copy(sku);
    IF addedSku() THEN
        SEEK BOMs.p1 = addedSku(); 
} CHANGEKEY 'F5' TOOLBAR;

EXTEND FORM BOMs PROPERTIES(p1) copyBOMProduct;

copyBOMComponent 'Копировать'(Sku sku) = {
    Stock.copy(sku);
    IF addedSku() THEN
        SEEK BOMs.c2 = addedSku(); 
} CHANGEKEY 'F5' TOOLBAR;

EXTEND FORM BOMs PROPERTIES(c2) copyBOMComponent;

FORM BOMsDialog 'Спецификации'

    OBJECTS b=BOM
    PROPERTIES(b)  READONLY BACKGROUND background(b) products, name, number, series, date, time, fromDate, toDate, components, 
                   overNettoNetWeightProduct, overNettoNetWeightComponent, overBruttoNetWeightyComponent, pricePercent, note
    PROPERTIES (b) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActive(b) 'F11'            
        FILTER 'Активные' isActive(b) OR (fromDate(b) > currentDate()) 'F10' DEFAULT
        
    OBJECTS p = Product
    PROPERTIES(p) READONLY index, idBarcodeSku, id SHOWIF showIDs(), nameSku, shortNameUOM, 
                  quantity, overNettoNetWeight, pricePercent
    FILTERS       BOM(p) == b

    OBJECTS c = Component                 
    PROPERTIES(c) BACKGROUND  background(c) READONLY index, idBarcodeSku, id SHOWIF showIDs(), 
                   nameMaterial, shortNameUOM, nettoQuantity, overNettoNetWeight, wastage, bruttoQuantity, overBruttoNetWeight
                  
    FILTERS       BOM(c) == b
      
    LIST BOM OBJECT b
;

DESIGN BOMsDialog {
    BOX {
        size = (1024, 768);
        NEW bom BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;
            
            MOVE BOX(b);
            NEW documentDetail {
                type = TABBED;
                fill = 1;

                MOVE BOX(p) {
                    caption = 'Изделие';
                    PROPERTY (id(p)) { caption = 'Код изделия';}
                }
                MOVE BOX(c) {
                    caption = 'Компонент';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,b);
                }                
            }                
        }                                                              
    }
}

accessCurrentUser = [ =GROUP SUM 1 IF accessCompany(currentUser(), Stock s) AND in(BOM BOM,s) BY BOM](BOM BOM) OR (BOM IS BOM AND NOT countStocks(BOM)); 

EXTEND FORM BOMs 
    FILTERS accessCurrentUser(b)
;
EXTEND FORM BOMsDialog 
    FILTERS accessCurrentUser(b)
;

EXTEND FORM products 
    FILTERS accessCurrentUser(BOM(p))
;

EXTEND FORM components 
    FILTERS accessCurrentUser(BOM(c))

    FILTERGROUP active
        FILTER 'Активные' isActive(BOM(c)) DEFAULT 
;
//-------------------------------- Комиссия для акта контрольной проработки ----------------------------------//
CLASS ManufacturingCommittee 'Комиссия производство' : Committee;

name 'Наименование' = DATA VARISTRING[150](ManufacturingCommittee);

name(ManufacturingCommittee committee) += name(committee) IF committee IS ManufacturingCommittee;

FORM manufacturingCommittee 'Комиссия производство'
    OBJECTS c=ManufacturingCommittee PANEL
    PROPERTIES(c)      name

    TREE stockTree sg = StockGroup PARENT parent
    PROPERTIES READONLY sgTreeName = name(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = name(ts)
    PROPERTIES(c, ts) in 
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    FILTERS isParent(sg, ts)
    ORDER tsTreeName

    OBJECTS e=Employee
    PROPERTIES(e)      READONLY name[Contact], firstName, lastName, namePosition
    PROPERTIES(e)      NEWEDIT, EDIT, DELETE GRID

    PROPERTIES(c, e)   in
    FILTERS            (countStock (e, c) AND NOT allowStockEmployee()) OR (e IS Employee AND allowStockEmployee())
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' in(c, e) 'F10'
    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' in(c, ts) 'F9'
    FILTERGROUP active FILTER 'Активные' active(e) 'F5'  DEFAULT 
    EDIT ManufacturingCommittee OBJECT c
;

DESIGN manufacturingCommittee {
    BOX {
        size = (1024, 768);

        OBJECTS {
            NEW caseOne BEFORE BOX(e) {
                type = SPLITH;
                fill = 1;
                caption = 'Отделы, для которых действуют комиссии';
    
                MOVE BOX(TREE stockTree) {
                    fill = 1;
                }
                MOVE BOX(ts) {
                    fill = 2;
                }
            }
        }
    }
}

FORM manufacturingCommitteeDialog 'Комиссии производство'
    OBJECTS a=ManufacturingCommittee
    PROPERTIES(a)      READONLY name, nameEmployee
    PROPERTIES(a)      NEWSESSION NEW, EDIT

    LIST ManufacturingCommittee OBJECT a
;

// ----------------- Акт контрольной проработки-------------------- //

actStudyOfCulinaryCommittee (BOM) = DATA ManufacturingCommittee(BOM);
nameActStudyOfCulinaryCommittee 'Комиссия для акта' (BOM BOM) = name(actStudyOfCulinaryCommittee (BOM)) IN documentPrm CHARWIDTH 20;
nameEmployeeCommittee 'Члены комиссии' (BOM BOM)= nameEmployee(actStudyOfCulinaryCommittee(BOM));

inCommittee (BOM BOM, Employee employee) = in(actStudyOfCulinaryCommittee (BOM), employee);
commonNameEmployeeCommittee 'Члены комиссии' (BOM BOM) = namePositionEmployee(actStudyOfCulinaryCommittee (BOM));

company (BOM) = DATA LegalEntity(BOM);
nameCompany 'Компания' (BOM BOM) = name(company(BOM)) IN documentPrm;

actQuantity 'Кол-во для акта' = DATA NUMERIC[16,5] (BOM);
actStock  = DATA Stock (BOM);
nameActStock 'Склад для акта' (BOM b) = name(actStock(b));


CONSTRAINT  company(BOM BOM) AND NOT isCompany(company(BOM)) CHECKED BY company[BOM]
    MESSAGE 'Для спецификации выбрана организация, которая не является компанией';
CONSTRAINT  actStock(BOM BOM) AND NOT isCompany(actStock(BOM)) CHECKED BY actStock[BOM]
    MESSAGE 'Для спецификации выбран склад, который не является складом компании';        
     

EXTEND FORM BOM
    PROPERTIES(b) actQuantity, nameActStock, nameActStudyOfCulinaryCommittee, nameCompany

    OBJECTS e=Employee
    PROPERTIES(e) READONLY name[Contact], namePosition
    FILTERS       inCommittee(b,e)
;
DESIGN BOM {

    specificationBox {
        NEW row {
            type = CONTAINERV;
            caption = 'Акт контрольной проработки';
            NEW row1{
                caption = 'Акт';
                type = CONTAINERH;
                MOVE PROPERTY(actQuantity(b));
                MOVE PROPERTY(nameActStock(b));
                MOVE PROPERTY(nameActStudyOfCulinaryCommittee(b));
            }
            MOVE BOX(e) {caption = 'Сотрудники комиссии';}
        }
    }
}

// ----- Рекурсивный расчет потребностей брутто ---------- //

// кол-во требуемых материалов материалов
// без учета технологий
bruttoQuantity(BOM, material) = GROUP SUM bruttoQuantity(Component component) BY BOM(component), material(component);
// с учетом технологий
bruttoQuantity (BOM, material, DATE date) = GROUP SUM bruttoQuantity(Component component, date) BY BOM(component), material(component);

bruttoQuantity(BOM BOM, Sku sku, DATE date) = bruttoQuantity[BOM,Material,DATE](BOM, sku, date) IF sku IS Sku;

bruttoQuantityBOMBOM (BOM parent, child) = GROUP MAX NUMERIC[20,11](bruttoQuantity(parent, Product material) / quantity(material)) BY BOM(material) MATERIALIZED;

TABLE BOMBOM(BOM, BOM);
TABLE BOMBOMResult(BOM, BOM, NUMERIC[20,11]);

recBruttoQuantityBOMBOM (BOM parent, BOM child, NUMERIC[20,11] q) = (RECURSION NUMERIC[20,11](1.0) IF q == NUMERIC[20,11](1.0) AND child == (parent AS BOM) STEP NUMERIC[20,11](1.0) IF q == $q * bruttoQuantityBOMBOM($child, child) CYCLES NO) MATERIALIZED;
recBruttoQuantityBOMBOM (BOM parent, BOM child) = GROUP SUM recBruttoQuantityBOMBOM(parent, child, NUMERIC[20,11] q) * q MATERIALIZED;
//recBruttoQuantityBOMBOMDate (parent, child, date) = 1.0 IF (parent AS BOM) == (child AS BOM) AND date IS DATE;

recBruttoQuantity (BOM BOM, Sku sku, DATE date) = GROUP SUM recBruttoQuantityBOMBOM(BOM, BOM childBOM) * bruttoQuantity(childBOM, sku, date); //](BOM, sku);

recBruttoQuantity (BOM BOM, Component component, DATE date) = GROUP SUM recBruttoQuantityBOMBOM(BOM, BOM(component)) * bruttoQuantity(component, date); //](BOM, sku);

recBruttoNodeQuantity (BOM BOM, sku, DATE date) = GROUP SUM recBruttoQuantityBOMBOM(BOM, BOM childBOM) * bruttoQuantity(childBOM, Material material, date) BY sku(material); //](BOM, sku);

// Расчет цены
priceCoeffBOMBOM(BOM parent, child) = GROUP SUM NUMERIC[20,11](bruttoQuantity(parent, Product material) * priceCoeff(material) / quantity(material)) BY BOM(material) MATERIALIZED;

recPriceCoeffBOMBOM (BOM parent, BOM child, NUMERIC[20,11] q) = (RECURSION NUMERIC[20,11](1.0) IF q == NUMERIC[20,11](1.0) AND child == (parent AS BOM) STEP NUMERIC[20,11](1.0) IF q == $q * priceCoeffBOMBOM($child, child) CYCLES NO) MATERIALIZED;
recPriceCoeffBOMBOM (BOM parent, BOM child) = GROUP SUM recPriceCoeffBOMBOM(parent, child, NUMERIC[20,11] q) * q MATERIALIZED;
//recPriceCoeffBOMBOMDate (parent, child, date) = 1.0 IF (parent AS BOM) == (child AS BOM) AND date IS DATE;

//
recPriceCoeff (BOM BOM, sku, DATE date) = GROUP SUM recPriceCoeffBOMBOM(BOM, BOM childBOM) * bruttoQuantity(childBOM, Material material, date) BY sku(material);
//recPricePercentProductSkuDate (product, sku, date) = recPriceCoeffBOMSkuDate (BOMProduct(product), sku, date) * pricePercentProduct(product);

// ----- Рекурсивный расчет потребностей нетто ---------- //

nettoQuantity 'Кол-во нетто компонентов в документе' (BOM, material) = GROUP SUM nettoQuantity(Component component) BY BOM(component), material(component);
nettoQuantity(BOM BOM, Sku sku) = nettoQuantity[BOM,Material](BOM, sku) IF sku IS Sku;

nettoQuantityBOMBOM (BOM parent, child) = GROUP MAX NUMERIC[20,11](nettoQuantity(parent, Product material) / quantity(material)) BY BOM(material) MATERIALIZED;

recNettoQuantityBOMBOM (BOM parent, BOM child, NUMERIC[20,11] q) = (RECURSION NUMERIC[20,11](1.0) IF q == NUMERIC[20,11](1.0) AND child == (parent AS BOM) STEP NUMERIC[20,11](1.0) IF q == $q * nettoQuantityBOMBOM($child, child) CYCLES NO) MATERIALIZED;
recNettoQuantityBOMBOM (BOM parent, BOM child) = GROUP SUM recNettoQuantityBOMBOM(parent, child, NUMERIC[20,11] q) * q MATERIALIZED;

recNettoQuantity (BOM BOM, Sku sku) = GROUP SUM recNettoQuantityBOMBOM(BOM, BOM childBOM) * nettoQuantity(childBOM, sku); //](BOM, sku);

recNettoNodeQuantity (BOM BOM, sku) = GROUP SUM recNettoQuantityBOMBOM(BOM, BOM childBOM) * nettoQuantity(childBOM, Material material) BY sku(material); //](BOM, sku);

//recNettoNodeQuantityBOMSku (BOM, sku) =  DATA NUMERIC[16,5] (BOM, Sku);   // пока сделал так, потому что очень тормозит.

//-------------------- Подбор компонентов -----------------//
component (BOM,material) =  GROUP MAX Component component
    BY BOM(component), material(component);
   
changeQuantity(BOM BOM,Material material) = {
    INPUT n = NUMERIC[14,3] DO
        IF component(BOM,material) THEN {
            IF n THEN {
                nettoQuantity(Component detail) <- n WHERE detail == component(BOM,material);
                bruttoQuantity(Component detail) <- n WHERE detail == component(BOM,material);
            } ELSE {
                DELETE Component detail WHERE detail == component(BOM,material);
            }
        } ELSE {
            IF n THEN {
                NEW d = Component {
                    BOM(d) <- BOM;
                    material(d) <- material;
                    nettoQuantity (d) <- n;
                    bruttoQuantity (d) <- n;
                }
            }
        }
}
componentsStock = DATA LOCAL Stock(BOM);
nameComponentsStock 'Склад' = name(componentsStock(BOM BOM));
prevCurrentBalance 'Остаток' (BOM BOM,Sku material) = prevCurrentBalance(material, componentsStock(BOM));

CONSTRAINT componentsStock(BOM b) AND NOT isCompany(componentsStock(b))
    CHECKED BY componentsStock[BOM] MESSAGE 'Выбран склад для Спецификации, которые не принадлежит компании';

EXTEND FORM BOM

    PROPERTIES nameComponentsStock(b)

    TREE skuTree g = SkuGroup PARENT parent
    PROPERTIES READONLY order(g), name(g)
    ORDER name(g)
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F5' DEFAULT
    ORDER order(g)
    
    OBJECTS m = Material
    PROPERTIES(m) READONLY id SHOWIF showIDs(), name, shortNameUOM 
    PROPERTIES nettoQuantity(b,m) ON CHANGE changeQuantity(b,m)
    
    PROPERTIES(b,m) READONLY  prevCurrentBalance     

    FILTERS isParent(g, m)
    ORDER name(m)    
  
    FILTERGROUP filters
        FILTER 'Изделие' m IS Product 'F11'
        FILTER 'Sku' m IS Sku 'F10'
                    
    FILTERGROUP filter
        FILTER 'С остатком (склад)' prevCurrentBalance(b,m) 'F10' DEFAULT 
        FILTER 'В документе (нетто)' nettoQuantity(b,m) 'F9'
;

DESIGN BOM{
   
    specificationBox {
        NEW tabContainerComponent AFTER BOX(p) {
            caption = 'Компонент';
            type = TABBED;
            MOVE BOX(c) {caption = 'Компонент';}
            NEW selectPane {
                caption = 'Подбор';
                fill = 1;
                type = SPLITH;
                
                MOVE BOX(TREE skuTree) { caption = 'Группы'; fill = 1;}                
                NEW selectPane21 {
                    fill = 2;
                    type = CONTAINERV;
                    NEW selectPane1 {
                        caption = 'Выбор склада для отображения остатков';
                        MOVE PROPERTY (nameComponentsStock(b));
                    }
                    MOVE BOX(m);
                }
                        
            }            
        }        
    }
}


NAVIGATOR {
    manufacturingMasterData {
        NEW BOMs;
        NEW manufacturingCommitteeDialog;
    }
}

showBOM 'Показать спецификацию' (Component c) = {
    FOR b == BOM(material(c)) AND p == material(c) DO
        NEWSESSION SHOW BOM OBJECTS b = b, p = p; }  
ASON CONTEXTMENU nameMaterial[Component];


number(BOM BOM) += number(BOM);
series(BOM BOM) += series(BOM);
date(BOM BOM) += date(BOM);

index(Product detail) += index(detail);
sku[DocumentDetail](Product detail) += sku(detail);
quantity(Product detail) += quantity(detail);
document(Product detail) += BOM(detail);

index(Component detail) += index(detail);
sku(Component detail) += sku(detail);
quantity(Component detail) += bruttoQuantity(detail);
document(Component detail) += BOM(detail);

supplier(BOM BOM) += company(BOM);
//supplierStockDocument(BOM) +=supplierStockBOM(BOM);
customer(BOM BOM) += company(BOM);
//customerStockDocument(BOM) += customerStockBOM(BOM);


@defineDocumentLogForm(BOMs, b); 