MODULE RangeLevel;

REQUIRE Range;

NAMESPACE Range;

depth 'Глубина матрицы' = DATA INTEGER (Range);
EXTEND FORM range
    PROPERTIES (r) depth
;
EXTEND FORM ranges
    PROPERTIES (r)  READONLY depth
;

CLASS RangeLevel 'Уровень ассортимента';
TABLE rangeLevel(RangeLevel);
name 'Название' = DATA VARISTRING[10] (RangeLevel) IN recognize;
rangeLevel (name) = GROUP AGGR (RangeLevel level) BY name (level);

FORM rangeLevel 'Уровень ассортимента'
    OBJECTS l = RangeLevel PANEL
    PROPERTIES(l) name

    EDIT RangeLevel OBJECT l
;

FORM rangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE 
;

FORM dialogRangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    
    LIST RangeLevel OBJECT l
;

NAVIGATOR {

    retailRangeNavigator {
        NEW rangeLevels;
    }

}

TABLE rangeRangeLevel(Range, RangeLevel);
in 'Вкл' = DATA BOOLEAN (Range, RangeLevel);
depth 'Глубина матрицы' = DATA INTEGER (Range, RangeLevel);
depth 'Глубина матрицы' (RangeRev v, RangeLevel l)= depth(range(v),l);

EXTEND FORM range 
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    PROPERTIES(r, l) in, depth
;

DESIGN range {
    options {
        type = SPLITH;
        MOVE BOX(l);
        MOVE BOX(TREE skuTree) {
            fill = 4;
        }
    }
}

TABLE rangeRevSku(RangeRev, Sku);
level = DATA RangeLevel(RangeRev, Sku);
nameLevel 'Уровень' (RangeRev r, Sku s)= name(level(r, s));

level(Range r, Sku s, DATE d) = level(rangeRev(r, d), s);
nameLevel 'Уровень' (Range r, Sku s, DATE d) = name(level(r, s, d));

in 'Вкл' = in(range(RangeRev v), RangeLevel l);

CONSTRAINT level(RangeRev r, Sku s) AND NOT in(r, level(r, s))
    CHECKED BY level[RangeRev,Sku] 
    MESSAGE 'Уровень ассортимента для товара не соответствует допустимым уровням ассортимента';
    
countSku 'Кол-во товаров' (RangeRev r) = GROUP SUM 1 IF level(r, Sku s);   

notCheckDepthRange 'Не проверять глубину матрицы при изменении значения глубины' = DATA BOOLEAN ();
notCheckDepth 'Не проверять глубину матрицы' = DATA BOOLEAN ();
notCheckDepthLoc 'Не проверять глубину матрицы' = DATA LOCAL BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notCheckDepthRange, notCheckDepth
;
DESIGN options {
    range {
        MOVE PROPERTY (notCheckDepthRange());
        MOVE PROPERTY (notCheckDepth());
    }
}  

CONSTRAINT CHANGED(countSku(RangeRev v)) AND depth(range(v)) < countSku(v) AND NOT (notCheckDepth() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице';
//CONSTRAINT CHANGED(countSku(RangeRev v)) AND depth(range(v)) < countSku(v) AND NOT (PREV(countSku(v)) >= countSku(v) )
//    MESSAGE 'Превышено максимально количество товаров по матрице';  

    
CONSTRAINT CHANGED(depth(range(RangeRev v))) AND rangeRev(range(v), currentDate()) == v AND  depth(range(v)) < countSku(v) AND NOT (notCheckDepthRange() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице для действующей версии';

countSku 'Кол-во товаров' = GROUP SUM 1 BY RangeRev r, level(r, Sku s);

countRecSku 'Кол-во товаров' (RangeRev r, RangeLevel level) = GROUP SUM countSku(r, RangeLevel l) IF l <= (level AS RangeLevel);

countSku 'Кол-во товаров' (Range r, DATE d) = countSku(rangeRev(r, d));
countSku 'Кол-во товаров' (Range r, RangeLevel l, DATE d)= countSku(rangeRev(r, d), l);

countSkus 'Кол-во наименований' = GROUP SUM 1 BY RangeRev v, level(v,Sku sku);

CONSTRAINT CHANGED(countSku(RangeRev v, RangeLevel l)) AND depth(range(v), l) < countSku(v,l) AND NOT (notCheckDepth() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице для уровня';
//CONSTRAINT CHANGED(countSku(RangeRev v, RangeLevel l)) AND depth(range(v), l) < countSku(v,l) AND NOT (PREV(countSku(v,l)) >= countSku(v,l) )
//    MESSAGE 'Превышено максимально количество товаров по матрице для уровня';

CONSTRAINT CHANGED(depth(range(RangeRev v), RangeLevel l)) AND rangeRev(range(v), currentDate()) == v AND  depth(range(v), l) < countSku(v,l) AND NOT (notCheckDepthRange() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице для действующей версии';

countSkus 'Кол-во наименований (всего)' (RangeRev v, supplier, LedgerPriceListType pt, Stock d) = GROUP SUM 1 IF level(v, Sku sku)
    BY companyA(pt, sku, d, dateTime(v));
    
countSkus 'Кол-во наименований' (RangeRev v,l,supplier,LedgerPriceListType pt,Stock d) = GROUP SUM 1
    BY level(v, Sku sku), companyA(pt, sku, d, dateTime(v));
    
TABLE rangeRevRangeLevelSku (RangeRev, RangeLevel, Sku);

nameQuantity (RangeLevel rl) = CONCAT ' / ', '('+name(rl)+')', 'к-во на полке'; 

EXTEND  FORM rangeRev
    OBJECTS rl = RangeLevel AFTER dates  
    FILTERS in(v, rl)     
                               
    PROPERTIES(v, s) nameLevel AFTER markupA(pt, s, d, v)

    FILTERGROUP filters
        FILTER 'Включен' level(v, s)  DEFAULT
        FILTER 'Без поставщиков' level(v, s) AND NOT priceA(pt, s, d, dateTime(v))   
        
    OBJECTS l = RangeLevel AFTER store
    PROPERTIES READONLY name(l), depth(v,l), countSkus(v,l)  
    FILTERS in(v, l)  
   
    OBJECTS l2 = RangeLevel GRID AFTER store
    FILTERS in(v, l2)  
    
    OBJECTS su = LegalEntity
    PROPERTIES READONLY name(su), countSkus(v, su, pt, d), countSkus(v, l2, su, pt, d) COLUMNS (l2) HEADER name(l2) 
    ORDER name(su)
    FILTERS countSkus(v, su, pt, d)      
;
overCopy(RangeRev r, RangeRev pr) += {
    level(r, Sku s) <- level(pr, s);
}

DESIGN rangeRev {
    PROPERTY(nameLevel(v,s)) {
        background = #CCCCFF;
    }
}

EXTEND FORM range
    OBJECTS vl = RangeLevel GRID BEFORE v
    FILTERS in(r, vl)
    
    PROPERTIES READONLY countSku(v) AFTER dateTime(v), countSku(v, vl) COLUMNS (vl) HEADER name(vl)
;

countSkuNotSupplier 'Кол-во товаров без поставщика' (DataPriceListType pt, DepartmentStore d, RangeRev v) = GROUP 
        SUM 1 IF level(v, Sku sku) AND pt IS DataPriceListType AND d IS DepartmentStore 
    AND NOT priceA(pt, sku, d, dateTime(v)); 
calcCountSkuNotSupplier 'Кол-во товаров без поставщика' (DataPriceListType pt, DepartmentStore d, Range r, DATE dt) = countSkuNotSupplier(pt, d , rangeRev(r, dt));

countSkuNotSupplier 'Кол-во товаров без поставщика' = DATA LOCAL INTEGER (DataPriceListType, DepartmentStore, Range, DATE);

fillCountSkuNotSupplier 'Обновить'(DataPriceListType pt, DepartmentStore d, DATE dt) = {
    countSkuNotSupplier(pt, d, Range r, dt) <- calcCountSkuNotSupplier(pt, d, r, dt) WHERE r IS Range;   
}
EXTEND FORM ranges
    OBJECTS vl = RangeLevel GRID BEFORE r

    PROPERTIES READONLY countSku(r, d)
    PROPERTIES READONLY countSku(r, vl, d) TODRAW r COLUMNS (vl) HEADER name(vl) 
    
    PROPERTIES READONLY countSkuNotSupplier(pt,ds,r1,d)
    PROPERTIES fillCountSkuNotSupplier(pt, ds, d) TODRAW r1 TOOLBAR BEFORE createRangeRev(r1,d) 
    
    FILTERGROUP notSupplier
        FILTER 'Без поставщиков' countSkuNotSupplier(pt, ds, r1, d) DEFAULT 
;
TABLE rangeStoreTypeDate(Range, StoreType, DATE);
excludeLevel = DATA BOOLEAN (Range, StoreType, DATE);
dataLevel = DATA RangeLevel (Range, StoreType, DATE);
dateTime 'Дата/время' = DATA DATETIME (Range, StoreType, DATE);
user = DATA User (Range, StoreType, DATE);
nameUser 'Пользователь' (Range r, StoreType s, DATE d) = name(user(r, s, d));
hasLevel (Range r, StoreType s, DATE d) = dataLevel(r, s, d) OR excludeLevel(r, s, d) MATERIALIZED;

CONSTRAINT dataLevel(Range r, StoreType t, DATE d) AND NOT in(r, dataLevel(r, t, d))
    CHECKED BY dataLevel[Range,StoreType,DATE]
    MESSAGE 'Уровень ассортимента для формата магазина не соответствует допустимым уровням ассортимента';

level (Range range, StoreType storeType, DATE date) = GROUP
                                              LAST dataLevel(range, storeType, DATE dateIn)
                                              ORDER dateIn
                                              WHERE hasLevel(range, storeType, dateIn) AND dateIn <= (date AS DATE) COMPLEX; 

date (Range range, StoreType storeType, DATE date) = GROUP
                                              LAST DATE dateIn
                                              ORDER dateIn
                                              WHERE dataLevel(range, storeType, dateIn) AND dateIn <= (date AS DATE); 
                                              
nameLevel 'Уровень' (Range r, StoreType t, DATE d)= name(level(r, t, d)); 

changeLevel (Range r, StoreType t, DATE d)= {
    DIALOG dialogRangeLevels OBJECTS l = dataLevel(r, t, d) CHANGE DO {
        excludeLevel (r, t, d) <- NOT l;
        dateTime(r, t, d) <- currentDateTime();
        user(r, t, d) <- currentUser();
    }
}

backgroundLevel(Range range, StoreType storeType, DATE dateIn) = (dataLevel(range, storeType, dateIn) OR excludeLevel(range, storeType, dateIn));

countSku 'Кол-во товаров' (Range r, StoreType t, DATE d) = countRecSku(rangeRev(r, d), level(r, t, d));       

TABLE rangeStoreDate(Range, Store, DATE);
dataLevel = DATA RangeLevel (Range, Store, DATE);
excludeLevel = DATA BOOLEAN (Range, Store, DATE);
dateTime 'Дата/время' = DATA DATETIME (Range, Store, DATE);
user = DATA User (Range, Store, DATE);
nameUser 'Пользователь' (Range r, Store s, DATE d) = name(user(r, s, d));
hasLevel (Range r, Store s, DATE d) = dataLevel(r, s, d) OR excludeLevel(r, s, d) MATERIALIZED;
   
CONSTRAINT dataLevel(Range r, Store st, DATE d) AND NOT in(r, dataLevel(r, st, d))
    CHECKED BY dataLevel[Range,Store,DATE]
    MESSAGE 'Уровень ассортимента для магазина не соответствует допустимым уровням ассортимента';

level (Range range, Store st, DATE date) = GROUP
                                              LAST dataLevel(range, st, DATE dateIn)
                                              ORDER dateIn
                                              WHERE hasLevel(range, st, dateIn) AND dateIn <= (date AS DATE) COMPLEX; 

date (Range range, Store st, DATE date) = GROUP
                                              LAST DATE dateIn
                                              ORDER dateIn
                                              WHERE dataLevel(range, st, dateIn) AND dateIn <= (date AS DATE); 

changeLevel (Range r, Store st, DATE d)= {
    DIALOG dialogRangeLevels OBJECTS l = dataLevel(r, st, d) CHANGE DO {
        excludeLevel (r, st, d) <- NOT l;
        dateTime(r, st, d) <- currentDateTime();
        user(r, st, d) <- currentUser();
    }
}              

changeWYSLevel (Range r, Store st, DATE d)= {
    INPUT s = VARISTRING[10] DO 
        IF s THEN {
            dataLevel (r, st, d) <- [= GROUP MAX RangeLevel l BY name(l)](s);
            excludeLevel (r, st, d) <- NULL;
        } ELSE {
            dataLevel (r, st, d) <- NULL;
            excludeLevel (r, st, d) <- TRUE;
        }
}              
backgroundLevel(Range range, Store store, DATE dateIn) = (dataLevel(range, store, dateIn) OR excludeLevel(range, store, dateIn));

countRange 'В ассортименте' (Sku s, StoreType t, DATE d) = GROUP SUM 1 IF level(Range range, t, d) >= level(range, s, d);

overLevel(Range r, Store st, DATE d) = OVERRIDE level(r, st, d), level(r, storeType(st), d);  
overDate 'Дата включения' (Range r, Store st, DATE d) = OVERRIDE date(r, st, d), date(r, storeType(st), d);  
nameOverLevel 'Уровень (перегруженный)' (Range r, Store st, DATE d)= name(overLevel(r, st, d));               
nameLevel 'Уровень' (Range r, Store st, DATE d)= name(level(r, st, d));
overUser (Range r, Store st, DATE d) = OVERRIDE user(r, st, d), user(r, storeType(st), d);
nameOverUser 'Пользователь' (Range r, Store st, DATE d) = name(overUser(r, st, d));
overDateTime 'Дата/время' (Range r, Store st, DATE d) = OVERRIDE dateTime(r, st, d), dateTime(r, storeType(st), d);

countSku 'Кол-во товаров' (Range r, Store st, DATE d) = countRecSku(rangeRev(r, d), overLevel(r, st, d));

countRange 'В ассортименте' (Sku s, Range r, Store st, DATE d) =  overLevel(r, st, d) >= level(r, s, d);
in (Sku s, Range r, Store st, DATE d) += overLevel(r, st, d) >= level(r, s, d);

countRange (Store st, Sku sk, DATE d) = GROUP SUM 1 IF level(Range r, st, d) >= level(r, sk, d);
countTypeRange (Store st, Sku sk, DATE d) = GROUP SUM 1 IF level(Range r, storeType(st), d) >= level(r, sk, d);

statusRange 'Вид ассортимента' (Store st, Sku s, DATE d) = CASE WHEN countRange(st, s, d) THEN 'Магазин'
    WHEN countTypeRange(st, s, d) THEN 'Формат';
    
EXTEND FORM storeRange 
    OBJECTS c = ChainStores PANEL AFTER d
    PROPERTIES(c) SELECTOR name


    // По форматам
    OBJECTS t = StoreType GRID
    FILTERS chainStores(t) == c, active(t)

    OBJECTS r = Range
    PROPERTIES(r) READONLY name
    PROPERTIES(r, t, d) nameLevel COLUMNS (t) HEADER name(t) BACKGROUND backgroundLevel(r, t, d) ON CHANGE changeLevel(r, t, d),
                        countSku COLUMNS(t) HEADER name(t)
    FILTERS inParent(r, sg) OR NOT countSkuGroup(r)
    ORDER name(r)

    OBJECTS s = Sku GRID 
    PROPERTIES(s) READONLY BACKGROUND backgroundRange(s) idBarcode, name, nameUOM
    PROPERTIES(s, t, d) READONLY countRange COLUMNS (t) HEADER name(t)
    FILTERS level(r, s, d)

    // По магазинам

    PROPERTIES nameOverLevel(sr, st, d) BACKGROUND backgroundLevel(sr, st, d) ON CHANGE changeLevel(sr, st, d) ON CHANGEWYS changeWYSLevel(sr, st, d) COLUMNS (st) HEADER name(st)
    PROPERTIES countSku(sr, st, d) COLUMNS (st) HEADER name(st) 
    ORDER name(sr)
    FILTERS inParent(sr, sg) OR NOT countSkuGroup(sr)

    PROPERTIES READONLY nameLevel(sr, ss, d)
    ORDER nameLevel(sr, ss, d), name(ss)
    FILTERS level(sr, ss, d)

    // -------------- Ассортимент магазина ------------------ //

    PROPERTIES statusRange(ds, sk, d)

    PROPERTIES READONLY AFTER name(rn) nameLevel(rn, sk, d), overDate(rn, st, d)
    FILTERS countRange (sk, rn, ds, d)
;

DESIGN storeRange {
    filters{        
        MOVE BOX(c);
    }
    setPane {
        fill = 2;
        type = TABBED;
        NEW formatPane {
            fill = 1;
            type = SPLITV;
            caption = 'По форматам';
            MOVE BOX(r) {
                fill = 2;
                PROPERTY(countSku(r, t, d)) {
                    background = #FFEEFF;
                }
            }
            MOVE BOX(s);
        }
        MOVE storePane; 
        
    }                 
    MOVE TOOLBARBOX;
}


countFilterRange  = GROUP SUM 1 IF (currentBalance(Sku sku,DepartmentStore stock) OR dateTimeLastMoved(sku, stock) > DATETIME(DATE dateFrom AS DATE)) AND active(store(stock))
    BY sku, store(stock), dateFrom;

    
countFilter 'Кол-во магазинов' (Range range, Sku sku, DATE dateFrom) = GROUP
    SUM 1 IF countFilterRange(sku, Store store, dateFrom) 
    AND inChild(range, sku);

count 'Количество товара' = DATA LOCAL INTEGER (RangeLevel);
countRangeLevels (Range r) = GROUP SUM  count(RangeLevel l) IF in(r,l);

indexGroup 'Порядок' (RangeRev v, Sku sku, DATE dateFrom, LedgerPriceListType pt, Stock stock) =
    PARTITION SUM 1 IF countFilter(range(v), sku, dateFrom) AND companyA(pt, sku, stock, dateTime(v))
    ORDER DESC countFilter(range(v), sku, dateFrom), sku
    BY v, dateFrom, pt, stock;

countFilter 'Кол-во магазинов' (RangeRev v, Sku sku, DATE dateFrom) = countFilter(range(v), sku, dateFrom);

total 'Накоплено' (Range range, RangeLevel level) =
    PARTITION SUM count(level) IF in(range,level)
    ORDER  level
    BY range;
total 'Накоплено' = total(range(RangeRev v), RangeLevel level);      
    
level (Sku sku, RangeRev v, DATE dateFrom, LedgerPriceListType pt, Stock stock) = 
    GROUP
          MIN RangeLevel level IF indexGroup(v, sku, dateFrom, pt, stock) <= total(range(v), level);


countFilter 'Кол-во с продажей или остатком' (Range range, Store store, DATE dateFrom) = GROUP
        SUM 1 IF countFilterRange(Sku sku, store, dateFrom) 
    AND inChild(range, sku);

countFilter 'Кол-во с продажей или остатком' (RangeRev v, Store store, DATE dateFrom) = countFilter(range(v), store, dateFrom);

currentBalance 'Остаток (ассортимент)' (Range range, store) = GROUP SUM currentBalance(Sku sku,DepartmentStore stock) IF inChild(range, sku)
        BY store(stock);

currentBalance 'Остаток (ассортимент)' (RangeRev v, Store store) = currentBalance(range(v),store);

nameLevel 'Уровень' (RangeRev v, StoreType t)= nameLevel(range(v), t, date(v));
nameLevel 'Уровень' (RangeRev v, Store s) = nameLevel(range(v), s, date(v));

countSku 'Кол-во наименований' (RangeRev v,StoreType t) = countSku(range(v), t, date(v));

EXTEND FORM rangeRev
    PROPERTIES READONLY countFilter(v, s, dFrom)
    
    OBJECTS t = StoreType GRID
    PROPERTIES READONLY name(t)
    PROPERTIES(v, t) nameLevel, countSku
    FILTERGROUP activeStoreType
        FILTER 'Активные' active(t) DEFAULT 
    
    OBJECTS st = Store GRID
    PROPERTIES READONLY name(st), nameLevel(v, st), countFilter(v, st, dFrom), currentBalance(v, st)
    FILTERS active(st)
    
    PROPERTIES READONLY nameLevel(v, store) AFTER name(store)
    
    FILTERGROUP type
        FILTER 'По форматам' storeType(st) == t DEFAULT 
;
DESIGN rangeRev {
    rev {
        REMOVE BOX(rl);
    
        top2 {
            MOVE BOX(l) BEFORE BOX(store){ 
                caption = 'Итого по уровням';
                fill = 1;
                REMOVE TOOLBARBOX(l);
            }   
        }                   
        header {
            type = TABBED;
            details {                
                NEW supplier1 AFTER BOX(s){
                    fill = 1;
                    caption = 'Итого по поставщикам';
                    MOVE BOX(su);
                    REMOVE BOX(l2);
                }
                
            }
            NEW store {
                caption = 'Итоги';
                fill = 1;
                type = SPLITH;
                NEW store1 {
                    type = SPLITV;  
                    fill = 1;
                    MOVE BOX(t);
                    MOVE BOX(st);            
                }
                MOVE supplier1 { fill = 1;}
            }            
        }
    }
    MOVE TOOLBARBOX;
}


FORM param 'Параметры заполнения ассортиментной матрицы'
    OBJECTS v = RangeRev PANEL 

    OBJECTS l = RangeLevel
    PROPERTIES(l) name READONLY, count 
    FILTERS in(v, l)
    
;

fill 'Заполнить матрицу по остаткам и продажам'(RangeRev rangeRev, DATE dateFrom, LedgerPriceListType pt, Stock stock) = {
    DIALOG param OBJECTS v = rangeRev DO { 
        IF countRangeLevels(range(rangeRev)) THEN {
            level(rangeRev,Sku sku) <- level (sku, rangeRev, dateFrom, pt, stock) WHERE level (sku, rangeRev, dateFrom, pt, stock) ;
        } ELSE {
            MESSAGE 'Не задано количество товара ни для одного уровня ассортиментной матрицы.';
        }
    
    }
} TOOLBAR ;


EXTEND FORM rangeRev
    PROPERTIES (v, dFrom, pt, d) fill TODRAW s
;

in (r, Sku s) = GROUP SUM 1 IF level(RangeRev v, s) BY range(v);

ranges 'Ассортиментные матрицы' (Sku s, DATE d) = GROUP CONCAT name(Range r) IF level(r, s, d) ,', ' CHARWIDTH 30; 

EXTEND FORM ranges 
    PROPERTIES READONLY nameLevel(r, s, d), ranges(s, d)
    ORDER nameLevel(r, s, d), name(s)
    FILTERGROUP filterSku
        FILTER 'По матрице' in(r, s) DEFAULT
        FILTER 'По группе' ranges(s, d) AND isParent(sg, s)
        
;


WHEN autoSetGroupAttribute(mainRole(currentUser())) AND CHANGED(itemGroup(Item item)) AND level(RangeRev v, Sku s) AND NOT inChild(range(v), s) DO {
    inData(Range r, SkuGroup g) <- TRUE WHERE r == range(v) AND g == skuGroup(s);
}

CONSTRAINT level(RangeRev v, Sku s) AND NOT inChild(range(v), s) MESSAGE 'Товар не соответствует выбранным группам для ассортимента';


nameOverLevel 'Уровень (перегруженный)' (Store st, Range r, DATE d) = nameOverLevel(r, st, d);  

filterStoreType2  = DATA LOCAL StoreType();
nameFilterStoreType2 'Формат' = name(filterStoreType2());          
filterStoreType2 (Store st) = storeType(st) == filterStoreType2() OR NOT filterStoreType2();       

EXTEND FORM storeRange 
    PROPERTIES() nameFilterStoreType2          

    OBJECTS store = Store GRID 
    PROPERTIES READONLY name(store)
    PROPERTIES nameOverLevel(store, sr, d) BACKGROUND backgroundLevel(sr, store, d) ON CHANGE changeLevel(sr, store, d) ON CHANGEWYS changeWYSLevel(sr, store, d) COLUMNS (sr) HEADER name(sr)
    FILTERS active(store),
            filterStoreType2(store)   
;

DESIGN storeRange{
    setPane {
        NEW rangePane {
            fill = 1;
            caption = 'По матрицам';
            MOVE PROPERTY (nameFilterStoreType2());          
            MOVE BOX(store);
        }   
    }
}

// ---------- Импорт версии матрицы

importXls 'Импорт' (RangeRev v) = {
    INPUT f = EXCELFILE DO {
        LOCAL barcode = VARSTRING[15] (INTEGER);
        LOCAL name = VARSTRING[255] (INTEGER);
        LOCAL level = VARSTRING[10] (INTEGER);
        
        IMPORT XLS FROM f TO barcode = A, name = B, level = C;
        
        FOR imported(INTEGER i) DO {
            level(v, Sku s) <- rangeLevel(level(i)) WHERE sku(barcode(barcode(i), currentDate())) == s; 
        }
        IF (GROUP SUM 1 IF NOT barcode(barcode(INTEGER i), currentDate())) THEN 
            MESSAGE 'Не найдены следующие штрих-коды : \n' + (GROUP CONCAT (CONCAT ' : ', barcode(INTEGER i), name(i)) IF NOT barcode(barcode(i), currentDate()), '\n');
    }
}

EXTEND FORM rangeRev
    PROPERTIES(v) importXls TODRAW s TOOLBAR
;

//----фильтр по магазину
filterStore = DATA LOCAL Store();
nameFilterStore 'Магазин' = name(filterStore());

CONSTRAINT filterStore() AND NOT [=GROUP SUM 1 IF accessCompany(currentUser(), DepartmentStore ds) BY store(ds)](filterStore())
    CHECKED BY filterStore[]
    MESSAGE 'В фильтре выбран Магазин, к которому нет доступа';
    
EXTEND FORM ranges
    PROPERTIES nameFilterStore()
    
    FILTERS overLevel(r,filterStore(),d) OR NOT filterStore()
;  

DESIGN ranges {
    NEW filters BEFORE pane {
        type = CONTAINERH;
        MOVE PROPERTY(date);
        MOVE PROPERTY(nameFilterStore());
    }
}

createNewTopLevel 'Добавить верхний уровень'() = {

    NEW l = RangeLevel;
    
    LOCAL level = RangeLevel();
    
    FOR RangeLevel l IS RangeLevel ORDER DESC l DO {
        IF level() THEN {
            dataLevel(Range.Range r, Store s, DATE d) <- level() WHERE dataLevel(r, s, d) == l;
            in(Range.Range r, RangeLevel ln) <- TRUE WHERE ln == level() AND in(r, l);
            in(Range.Range r, l) <- NULL;
            level(RangeRev v, Sku s) <- level() WHERE level(v, s) == l;
            name(RangeLevel ln) <- name(l) WHERE ln == level();
            name(l) <- NULL;
        }
        level() <- l;
    }
    APPLY;

}

allowChangePast 'Разрешить изменять уровни за прошедшие дни' = DATA BOOLEAN();

EXTEND FORM options PROPERTIES allowChangePast();

DESIGN options {
    range {
        MOVE PROPERTY (allowChangePast());
    }
}

CONSTRAINT (CHANGED (dataLevel(Range r, Store s, DATE d)) OR  CHANGED (dataLevel(r, storeType(s), d))) AND r IS Range AND s IS Store
    AND NOT allowChangePast() AND d < currentDate() MESSAGE 'Запрещено изменять уровень для прошедшего дня';

FORM rangeLevelLog 'Лог изменений уровня'
    OBJECTS r = Range PANEL 
    PROPERTIES READONLY name(r)
    
    OBJECTS sd = (s = Store, st = StoreType, d = DATE)
    
    PROPERTIES READONLY vd = VALUE (d), name(s), nameOverLevel(r, s, d), name(st), nameLevel(r, st, d), dateTime(r, s, d), nameUser(r, s, d)
    ORDER vd, name(s)
    FILTERS hasLevel(r, s, d) OR hasLevel(r, st, d), storeType(s) == st
;

showRangeLevelLog 'Лог изменения уровня' (Range r) = {
    SHOW rangeLevelLog OBJECTS r = r;
} ASON CONTEXTMENU name[Range];

FORM rangeLevelStoreLog 'Лог изменений уровня'
    
    OBJECTS r = Range PANEL 
    PROPERTIES READONLY name(r)
    
    OBJECTS s = Store PANEL 
    PROPERTIES READONLY name(s)
    
    OBJECTS d = DATE
    
    PROPERTIES READONLY vd = VALUE (d), nameOverLevel(r, s, d), overDateTime(r, s, d), nameOverUser(r, s, d)
    ORDER vd, name(s)
    FILTERS hasLevel(r, s, d) OR hasLevel(r, storeType(s), d)
;

showRangeLevelStoreLog 'Лог изменения уровня' (Range r, Store s) = {
    SHOW rangeLevelStoreLog OBJECTS r = r, s = s;
} ASON CONTEXTMENU nameOverLevel[Range, Store, DATE];


FORM rangeLevelStoreTypeLog 'Лог изменений уровня'
    
    OBJECTS r = Range PANEL 
    PROPERTIES READONLY name(r)
    
    OBJECTS s = StoreType PANEL 
    PROPERTIES READONLY name(s)
    
    OBJECTS d = DATE
    
    PROPERTIES READONLY vd = VALUE (d), nameLevel(r, s, d), dateTime(r, s, d), nameUser(r, s, d)
    ORDER vd, name(s)
    FILTERS hasLevel(r, s, d)
;

showRangeLevelStoreTypeLog 'Лог изменения уровня' (Range r, StoreType s) = {
    SHOW rangeLevelStoreTypeLog OBJECTS r = r, s = s;
} ASON CONTEXTMENU nameLevel[Range, StoreType, DATE];