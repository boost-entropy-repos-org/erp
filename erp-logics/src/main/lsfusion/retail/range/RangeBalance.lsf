MODULE RangeBalance;

REQUIRE Range;

NAMESPACE Range;

CLASS RangeDocument 'Исполнение ассортимента';
TABLE rangeDocument(RangeDocument);

@defineDocumentHeaderTime(RangeDocument);
@defineDocumentHeaderNote(RangeDocument);
@defineDocumentHeaderCreated(RangeDocument);
@deriveDocumentHeaderTimePrefix(RangeDocument, );
@defineDocumentHeaderNumber(RangeDocument);
@defineNumeratedDefault(RangeDocument, 'Исполнение ассортимента', 'ИА');
@defineDocumentHeaderDescription (RangeDocument, 'Исполнение ассортимента');

fromDate 'Дата с' = DATA DATE (RangeDocument) IN documentHeader;
toDate 'Дата по' = DATA DATE (RangeDocument) IN documentHeader;

WHEN LOCAL SET(RangeDocument o IS RangeDocument) DO {
    IF o IS RangeDocument AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS RangeDocument AND NOT toDate(o) THEN toDate(o) <- currentDate();
};


TABLE RangeDocumentStoreDate(RangeDocument, Store, DATE);

//--
countSku 'Кол-во позиций в ассортименте' = DATA INTEGER (RangeDocument, Store, DATE);     
calcCountSku (Store st, DATE d) =  GROUP SUM 1 IF countRange(Sku s, st, d);

countAverageSku 'Кол-во позиций с остатком меньше ср.дн. р-ии' = DATA INTEGER (RangeDocument, Store, DATE); 
averageSold 'Продаж в день' (Sku sku, store) = GROUP SUM averageSold(sku, DepartmentStore stock) BY store(stock);
calcCountAverageSku (Store st, DATE d)= GROUP          
        SUM 1 IF countRange(Sku s, st, d) AND NOT
    (balanceB(s, st, d) >= averageSold(s, st)) AND averageSold(s, st);  
        
percAverageSku '% в ассортименте с остатком меньше ср.дн. р-ии' (RangeDocument document, Store store, DATE date)= 
    NUMERIC[12,4](countAverageSku(document, store, date)) / 
    (countSku(document, store, date) IF countSku(document, store, date) != 0) *  
    100.00;       
        
countLessSku 'Кол-во позиций без остатка или  с остатком меньше либо равным 0' = DATA INTEGER (RangeDocument, Store, DATE); 
calcLessAverageSku (Store st, DATE d)= GROUP          
        SUM 1 IF countRange(Sku s, st, d) AND  NOT (balanceB(s, st, d) >0);   
percLessSku '% в ассортименте с остатком меньше либо равным 0' (RangeDocument document, Store store, DATE date)= 
    NUMERIC[12,4](countLessSku(document, store, date)) / 
    (countSku(document, store, date) IF countSku(document, store, date) != 0) * 
    100.00;    
       
countNotSku 'Кол-во позиций с остатком без ассортимента' = DATA INTEGER (RangeDocument, Store, DATE); 
calcCountNotSku (Store st, DATE d)= GROUP        
        SUM 1 IF balanceB(Sku s, st, d) >0 AND NOT countRange(s, st, d);       
             
fillSku 'Заполнить данные по ассортименту'(RangeDocument document, Store store, DATE date)  {         
    countSku(document, store, date) <-  calcCountSku(store, date);  
    countAverageSku(document, store, date) <-  calcCountAverageSku(store, date);
    countLessSku(document, store, date) <-  calcLessAverageSku(store, date);
    countNotSku(document, store, date) <-  calcCountNotSku(store, date);              
}  

fillSkuFromTo 'Заполнить данные по ассортименту'(RangeDocument document, DATE dateFrom, DATE dateTo)  {       
    LOCAL dateCur = DATE();               
      
    FOR isCompany(Store store) DO {   
        dateCur() <- dateFrom;
        WHILE dateCur() <= dateTo DO {      
            fillSku(document, store, dateCur()); 
            dateCur() <- sum(dateCur(), 1);
        }
    }
} 
fillSku 'Заполнить данные по ассортименту' (RangeDocument document)  { fillSkuFromTo(document, fromDate(document), toDate(document)); }

// -- 
 
//in 'В ассортименте' (Sku s, Range range, Store st, DATE d) = level(range, storeType(st), d) >= level(range, s, d);  

TABLE RangeDocumentRangeStoreDate(RangeDocument, Range, Store, DATE);

countSku 'Кол-во позиций в ассортименте' = DATA INTEGER (RangeDocument, Range, Store, DATE);    
calcCountSku (Range range, Store store, DATE date) =  GROUP SUM 1 IF in(Sku sku, range, store, date);

countAverageSku 'Кол-во позиций с остатком меньше ср.дн. р-ии' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
calcCountAverageSku (Range r, Store st, DATE d)= GROUP          
        SUM 1 IF in(Sku s, r, st, d) AND NOT
    (balanceB(s, st, d) >= averageSold(s, st)) AND averageSold(s, st);  
        
percAverageSku '% в ассортименте с остатком меньше ср.дн. р-ии' (RangeDocument document, Range range, Store store, DATE date)= 
    NUMERIC[12,4](countAverageSku(document, range, store, date)) / 
    (countSku(document, range, store, date) IF countSku(document, range, store, date) != 0) *  
    100.00;       
        
countLessSku 'Кол-во позиций без остатка или  с остатком меньше либо равным 0' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
calcCountLessSku (Range r, Store st, DATE d) = GROUP          
        SUM 1 IF in(Sku s, r, st, d) AND  NOT (balanceB(s, st, d) >0);   
percLessSku '% в ассортименте с остатком меньше либо равным 0' (RangeDocument document, Range range, Store store, DATE date)= 
    NUMERIC[12,4](countLessSku(document, range, store, date)) / 
    (countSku(document, range, store, date) IF countSku(document, range, store, date) != 0) * 
    100.00;    
       
countNotSku 'Кол-во позиций с остатком без ассортимента' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
calcCountNotRangeIn (Range r, Store st, DATE d)= GROUP        
        SUM 1 IF balanceB(Sku s, st, d) >0 AND r IS Range AND NOT in(s, r, st, d);       
             
fillSku 'Заполнить данные по ассортименту'(RangeDocument document, Range range, Store store, DATE date)  {         
    countSku(document, range, store, date) <-  calcCountSku(range, store, date);  
    countAverageSku(document, range, store, date) <-  calcCountAverageSku(range, store, date);
    countLessSku(document, range, store, date) <-  calcCountLessSku(range, store, date);
    countNotSku(document, range, store, date) <-  calcCountNotRangeIn(range, store, date);              
}  

fillRangeDocumentFromTo 'Заполнить данные по ассортименту'(RangeDocument document, DATE dateFrom, DATE dateTo)  {       
    LOCAL dateCur = DATE();               
      
    FOR isCompany(Store store) AND Range range IS Range DO {   
        dateCur() <- dateFrom;
        WHILE dateCur() <= dateTo DO {      
            fillSku(document, range, store, dateCur());
            dateCur() <- sum(dateCur(), 1);
        }
    }
}  
 
fillSkuRange 'Заполнить данные по ассортименту' (RangeDocument document)  { fillRangeDocumentFromTo(document, fromDate(document), toDate(document)); }
 
FORM rangeBalance 'Исполнение ассортимента'

    OBJECTS r = RangeDocument PANEL
    PROPERTIES (r) nameNumerator, 
                   number, series, date, time,
                   note, fromDate, toDate, fillSku         
   
    TREE treeStore a=STRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY VALUE(a), name(t), name(st)

    FILTERS stringEqualsAll(a),
            in (t, st)

    OBJECTS dts = (d = DATE, ts = Store) GRID
    PROPERTIES READONLY dataD = VALUE(d)
    PROPERTIES(ts) SELECTOR name
    PROPERTIES(ts) READONLY address, nameLegalEntity
    FILTERS  d >= fromDate(r), d <= toDate(r),
             countSku(r,ts,d)
             
    ORDER dataD, name(ts) 

    FILTERS in(t, st, ts),
            isCompany(ts)        
 
    PROPERTIES(r, ts, d) countSku, countLessSku, percLessSku,
                    countAverageSku, percAverageSku, 
                    countNotSku      
    
    TREE skuTree sg = SkuGroup PARENT parent
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    ORDER order(sg)
    
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, nameUOM
    PROPERTIES READONLY balanceB(s, ts, d), averageSold(s, ts)
    
    FILTERGROUP rangeSku 
        FILTER 'Позиции в ассортименте' countRange(s, ts, d) 'F11'  
        FILTER 'Позиции с остатком <= 0' countRange(s, ts, d) AND  NOT (balanceB(s, ts, d) >0) 'F9' 
        FILTER 'Позиции с остатком < ср.дн. р-ии' countRange(s, ts, d) AND NOT (balanceB(s, ts, d) >= averageSold(s, ts)) AND averageSold(s, ts) 'F10'               
        FILTER 'Позиции с остатком без ассортимента' balanceB(s, ts, d) >0 AND NOT countRange(s, ts, d) 'F8' 
    FILTERS isParent(sg,s)
    
 
    PROPERTIES(r) fillSkuRange     
    
    OBJECTS ddtst = (dd = DATE, tst = Store, rn = Range) GRID
    PROPERTIES READONLY dataDe = VALUE(dd)
    PROPERTIES(tst) SELECTOR name
    PROPERTIES(tst) READONLY address, nameLegalEntity
    PROPERTIES(rn) SELECTOR name
    FILTERS  dd >= fromDate(r), dd <= toDate(r),
             countSku(r,rn,tst,dd)
    FILTERS inParent(rn, sg) OR NOT countSkuGroup(rn)         
    ORDER dataDe, name(tst), name(rn)  

    FILTERS in(t, st, tst),
            isCompany(tst)

    PROPERTIES(r, rn, ts, d) countSku, countLessSku, percLessSku,
                    countAverageSku, percAverageSku, 
                    countNotSku       
                    
    OBJECTS ss = Sku
    PROPERTIES(ss) READONLY idBarcode, name, nameUOM
    PROPERTIES READONLY balanceB(ss, tst, d), averageSold(ss, tst)
    
    FILTERGROUP rangeSku1 
        FILTER 'Позиции в ассортименте' in(ss, rn, tst, dd) 'F11'  
        FILTER 'Позиции с остатком <= 0' in(ss, rn, tst, dd) AND  NOT (balanceB(ss, tst, dd) >0) 'F9' 
        FILTER 'Позиции с остатком < ср.дн. р-ии' in(ss, rn, tst, dd) AND NOT (balanceB(ss, tst, dd) >= averageSold(ss, tst)) AND averageSold(ss, tst) 'F10'               
        FILTER 'Позиции с остатком без ассортимента' balanceB(ss, tst, dd) >0 AND NOT in(ss, rn, tst, dd) 'F8'
    FILTERS isParent(sg,ss)                    

    EDIT RangeDocument OBJECT r       
;

DESIGN rangeBalance {
    size = (1024, 768);
    MOVE BOX(r) {
        type = CONTAINERV;
        NEW top1 {
            type = CONTAINERH;
            MOVE GROUP(numbered,r); 
            NEW date {
                caption = 'Период';
                type = CONTAINERH;
                MOVE PROPERTY (fromDate(r));
                MOVE PROPERTY (toDate(r));
            }
        }
        NEW top2 {
            type = CONTAINERH;
            MOVE GROUP(documentHeader,r);                   
            MOVE GROUP(documentPrm,r);
        }       
    };
    NEW pane {
        fill = 1;
        type = SPLITH;
        NEW leftPane {
            fill = 1;
            type = SPLITV;
            MOVE BOX(TREE treeStore);
            MOVE BOX(TREE skuTree) {
            }
        }
        NEW rightPane{
            type = TABBED;
            fill = 2;
            NEW rightPane1 {
                caption = 'Магазин';
                fill = 1;   
                NEW rightPane11{
                    MOVE PROPERTY(fillSku(r));    
                };               
                NEW rightPane12{
                    fill = 1;
                    type = SPLITV;
                    MOVE BOX(dts);                     
                    MOVE BOX(s);
                }    
            } 
            NEW rightPane2 {
                caption = 'Магазин / ассортимент';
                fill = 1;   
                NEW rightPane21{
                    MOVE PROPERTY(fillSkuRange(r));    
                };               
                NEW rightPane22{
                    fill = 1;
                    type = SPLITV;
                    MOVE BOX(ddtst);                     
                    MOVE BOX(ss);
                }    
            }            
        }    
    }
    MOVE TOOLBARBOX;
}   
          
FORM rangeBalances 'Исполнения ассортимента'
    OBJECTS r = RangeDocument
    PROPERTIES (r) READONLY number, series, date, time,
                   fromDate, toDate,  note 
    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
                        
    LIST RangeDocument OBJECT r          
;
              
NAVIGATOR {
    retailRangeNavigator {
        NEW rangeBalances;
    }
}
