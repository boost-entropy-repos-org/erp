MODULE RetailPriceLimitFixed;

REQUIRE PricingPurchase, PriceList, RepricingPriceList, ItemManager, PriceListDashboard, PricingProductionOutput, PriceListPromotion;//, PriceListOver;

NAMESPACE RetailPriceLimitFixed;

TABLE retailPrice(Sku,Stock);
maxLimitRetailPrice 'Максимальная розничная цена' = DATA NUMERIC[16,4] (Sku, Stock) TABLE retailPrice;
dateTimeLimitRetailPrice 'Дата/время контроля' = DATA DATETIME ();

dataStepPercLimitRetailPrice '% Доступного отклонения' = DATA NUMERIC[8,3] ();
stepPercLimitRetailPrice '% Доступного отклонения' = OVERRIDE dataStepPercLimitRetailPrice(), 0.0;
checkRetailPrice 'Контроль розничных цен' = DATA BOOLEAN ();

maxLimitRetailPricePerc 'Максимальная розничная цена (шаг)' (Sku s, Stock st) = NUMERIC[16,4](round2(maxLimitRetailPrice(s,st)* (100.0+stepPercLimitRetailPrice())/100.0));

EXTEND FORM options
    PROPERTIES () checkRetailPrice, stepPercLimitRetailPrice 
;
DESIGN options {
    pricings {
        MOVE PROPERTY (checkRetailPrice());
        MOVE PROPERTY (stepPercLimitRetailPrice());
    }
}


@defineItemGroupValue(checkLimitRetailPrice, 'Включить в контроль розничных цен', BOOLEAN) ;

EXTEND FORM itemGroups 
    PROPERTIES(g) READONLYIF isReadonly() checkLimitRetailPrice
;

dataCheckLimitRetailPrice 'Включить в контроль розничных цен' = DATA BOOLEAN (Sku);
checkLimitRetailPrice 'Включить в контроль розничных цен' (Item i) = OVERRIDE dataCheckLimitRetailPrice(i), checkLimitRetailPrice(itemGroup(i)) IN itemBase;
@defineItemGroupValue(skipCheckRetailPrice, 'Исключить из контроля розничных цен', BOOLEAN) ;

EXTEND FORM itemGroups 
    PROPERTIES(g) READONLYIF isReadonly() skipCheckRetailPrice
;

dataSkipCheckRetailPrice 'Исключить из контроля розничных цен' = DATA BOOLEAN (Item);
skipCheckRetailPrice 'Исключить из контроля розничных цен' (Item i) = OVERRIDE dataSkipCheckRetailPrice(i), skipCheckRetailPrice(itemGroup(i)) IN itemBase;

EXTEND FORM item
    PROPERTIES(i) checkLimitRetailPrice, skipCheckRetailPrice
;
EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() checkLimitRetailPrice, skipCheckRetailPrice
;


calcCheckLimitRetailPrice 'Контроль розничных цен' (Item s) = checkRetailPrice() AND checkLimitRetailPrice(s) AND NOT skipCheckRetailPrice(s);

firstPriceNotPromotion (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    GROUP LAST price(PriceListLedger ledger, type, stock)
          ORDER DESC fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) > dateTime AND NOT promotionPriceListDetailA(sku,stock,dateTime)
          AND sku(ledger, type, stock);

priceANotPromotion 'Цена' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    GROUP LAST price(PriceListLedger ledger, type, stock)
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) <= dateTime AND NOT toDateTime(ledger, type, stock) < dateTime AND NOT promotionPriceListDetailA(sku,stock,dateTime) 
          AND sku(ledger, type, stock)==sku COMPLEX CHARWIDTH 7;

fillMaxLimitRetailPrice 'Заполнить максимальную розничную цену' (DATETIME dt) {
    NEWSESSION {
        dateTimeLimitRetailPrice() <- dt;
        maxLimitRetailPrice(Sku sku, Stock stock)<- NULL;
        
        maxLimitRetailPrice(Sku sku, Stock stock) <- priceANotPromotion(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dt) 
                                                        WHERE calcCheckLimitRetailPrice(sku) AND stock IS DepartmentStore AND stockGroup(stock) IS Store;       
        maxLimitRetailPrice(Sku sku, Stock stock) <- firstPriceNotPromotion(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dt) 
                                                        WHERE calcCheckLimitRetailPrice(sku) AND NOT maxLimitRetailPrice(sku, stock) AND stock IS DepartmentStore AND stockGroup(stock) IS Store;
        APPLY;
    }
}
FORM dialogDateT 'Выбор даты/время'
    OBJECTS d = DATETIME PANEL
    PROPERTIES(d) objValue = VALUE
;

DESIGN dialogDateT {
    NEW date BEFORE TOOLBARBOX {
        fill = 1;
        MOVE PROPERTY (objValue) {
            fill = 1;
            caption = 'Введите дата/время';
            font = 'bold 64';
            panelCaptionVertical = TRUE;
        }
    }

}
fillMaxLimitRetailPrice 'Заполнить максимальную розничную цену (все отделы)' () {
    DIALOG dialogDateT OBJECTS d INPUT DO{
        fillMaxLimitRetailPrice(d);
    }
}

WHEN SET(currentRetailPricingPrice(Sku sku, Stock stock)) AND NOT maxLimitRetailPrice(sku,stock) AND calcCheckLimitRetailPrice(sku) DO {
    maxLimitRetailPrice(sku,stock) <- currentRetailPricingPrice(sku,stock) WHERE NOT promotionPriceListDetailA(sku,stock,currentDate());
}


WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
            SETCHANGED(retailPrice(UserInvoiceDetail d)) AND calcCheckLimitRetailPrice(sku(d))
            AND maxLimitRetailPricePerc(sku(d), customerStock(d)) < retailPrice(d) DO {
    retailPrice(d) <- maxLimitRetailPricePerc(sku(d), customerStock(d));
    retailMarkup(d) <- calcRetailMarkup(d);
}

overSetManagementRetailPrice(DepartmentStore d, DATETIME dt) + {
    LOCAL limitPrice = NUMERIC[16,4] (Sku);
    limitPrice(Sku sku) <- maxLimitRetailPricePerc(sku,d) WHERE managementRetailPrice(sku) AND calcCheckLimitRetailPrice(sku);
    managementRetailPrice (Sku sku) <- limitPrice(sku) WHERE limitPrice(sku) < managementRetailPrice (sku) AND calcCheckLimitRetailPrice(sku);
}

//------------------------ Логирование --------------------------//

CLASS LimitRetailPriceLog 'Запись лога максимальная РЦ';
TABLE limitRetailPriceLog(LimitRetailPriceLog);

disableLimitRetailPriceLog 'Отключить запись лога максимальная РЦ' = DATA BOOLEAN ();
enableLimitRetailPriceLog = TRUE AND NOT disableLimitRetailPriceLog();

EXTEND FORM options
    PROPERTIES() disableLimitRetailPriceLog
;

DESIGN options { 
    log { 
        MOVE PROPERTY(disableLimitRetailPriceLog()) FIRST;   
    } 
}

dateTimeLimitRetailPrice 'Дата/время контроля' = DATA DATETIME (LimitRetailPriceLog);
stepPercLimitRetailPrice '% Доступного отклонения' = DATA NUMERIC[8,3] (LimitRetailPriceLog);

checkLimitRetailPrice 'Контроль розничных цен' = DATA BOOLEAN (LimitRetailPriceLog);

sku = DATA Sku (LimitRetailPriceLog) INDEXED;
nameSku 'Товар' (LimitRetailPriceLog l) = name(sku(l));
idSku 'Товар' (LimitRetailPriceLog l) = id(sku(l));
idBarcodeSku 'Товар' (LimitRetailPriceLog l) = idBarcode(sku(l));

stock = DATA Stock (LimitRetailPriceLog) INDEXED;
nameStock 'Склад' (LimitRetailPriceLog l) = name(stock(l));

price 'Максимальная РЦ' = DATA NUMERIC[16,4] (LimitRetailPriceLog) ;

hostnameComputer 'Имя компьютера' = DATA ISTRING[100] (LimitRetailPriceLog); 
userLogin 'Логин пользователя' = DATA STRING[100] (LimitRetailPriceLog); 
nameContact 'Имя пользователя' =  DATA STRING[100] (LimitRetailPriceLog) IN id;
dateTimeSession 'Время' = DATA DATETIME (LimitRetailPriceLog) IN id;
dateSession 'Дата' (LimitRetailPriceLog d) = DATE(dateTimeSession(d));


@defineLog (LimitRetailPriceLog, 'максимальной РЦ', log, dateSession);


CLASS TypeChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    change 'Изменение',
    flagAdd 'Признак добавлен',
    flagDelete 'Признак удален'
}

typeChange= DATA TypeChange (LimitRetailPriceLog);
nameTypeChange 'Тип изменения' (LimitRetailPriceLog l) = staticCaption(typeChange(l)) IN id;


WHEN SETCHANGED (maxLimitRetailPrice(Sku s,Stock st)) IF NOT disableLimitRetailPriceLog() DO {
    NEW d = LimitRetailPriceLog {        
        sku(d) <- s ;
        stock(d) <- st;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);
        
        price(d)<-maxLimitRetailPrice(s,st);
        typeChange(d) <- IF PREV(maxLimitRetailPrice(s,st)) THEN TypeChange.change ELSE TypeChange.add;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                      
    }
}
WHEN DROPPED(maxLimitRetailPrice(Sku s,Stock st)) IF NOT disableLimitRetailPriceLog() AND NOT (DROPPED(s IS Sku) OR DROPPED(st IS Stock)) DO {
    NEW d = LimitRetailPriceLog {   
        sku(d) <- s;
        stock(d) <- st;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);
        
        price(d)<-maxLimitRetailPrice(s,st);
        typeChange(d) <- TypeChange.delete;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();             
    }
}

WHEN SET(calcCheckLimitRetailPrice(Sku s)) IF NOT disableLimitRetailPriceLog() DO {
    NEW d = LimitRetailPriceLog {        
        sku(d) <- s ;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);

        typeChange(d) <- TypeChange.flagAdd;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                  
    }
}
WHEN DROPPED(calcCheckLimitRetailPrice(Sku s)) IF NOT disableLimitRetailPriceLog() AND NOT DROPPED(s IS Sku) DO {
    NEW d = LimitRetailPriceLog {        
        sku(d) <- s ;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);

        typeChange(d) <- TypeChange.flagDelete;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                     
    }
}

FORM maxLimitRetailPrice 'Максимальные розничные цены'
    OBJECTS st = DepartmentStore PANEL 
    PROPERTIES SELECTOR name(st)
    PROPERTIES () READONLY  dateTimeLimitRetailPrice, dataStepPercLimitRetailPrice

    OBJECTS s = Sku
    PROPERTIES (s) READONLY name, id, idBarcode
    PROPERTIES maxLimitRetailPrice(s,st) READONLYIF isReadonly(), maxLimitRetailPricePerc(s,st) READONLY, currentRetailPricingPrice(s,st)  READONLY
    FILTERS active(s)
    FILTERGROUP max
        FILTER 'С максимальной РЦ' maxLimitRetailPrice(s,st) 'F9' DEFAULT
    OBJECTS d = LimitRetailPriceLog
    PROPERTIES(d) READONLY  dateTimeLimitRetailPrice, stepPercLimitRetailPrice, checkLimitRetailPrice, nameStock, nameSku, idSku, idBarcodeSku, price, nameTypeChange, hostnameComputer, userLogin, nameContact, dateTimeSession, dateSession
    FILTERS sku(d)==s,
            stock(d)==st OR (typeChange(d)==TypeChange.flagAdd OR typeChange(d)==TypeChange.flagDelete) 
    PROPERTIES fillMaxLimitRetailPrice() DRAW s TOOLBAR 
;
    
DESIGN maxLimitRetailPrice {
    OBJECTS {        
        MOVE BOX(st) {
            type = CONTAINERH;
            MOVE PROPERTY (name(st));
            MOVE PROPERTY (dateTimeLimitRetailPrice());
            MOVE PROPERTY (dataStepPercLimitRetailPrice());
        }
        NEW body{
            fill = 1;
            type = SPLITV;
            MOVE BOX(s){fill = 2;} 
            MOVE BOX(d); 
        }        
    }
}
@extendFormFilterStockAccess(st, maxLimitRetailPrice, company);
@extendFormEditable(maxLimitRetailPrice);

calcCheckLimitRetailForm 'Контроль розничных цен (перегруженный)' (Item s) = checkLimitRetailPrice(s) AND NOT skipCheckRetailPrice(s);

FORM maxLimitRetailPriceParams 'Максимальные розничные цены (параметры)'
    TREE skuTree g = ItemGroup PARENT parent(g)
    PROPERTIES(g) READONLY order, name, id
    PROPERTIES checkLimitRetailPrice(g), skipCheckRetailPrice(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    ORDERS order(g), name(g)
    
    OBJECTS i = Item
    PROPERTIES (i) READONLY name, id, idBarcode
    PROPERTIES checkLimitRetailPrice(i), skipCheckRetailPrice(i) 
    PROPERTIES READONLY calcCheckLimitRetailForm(i) BACKGROUND RGB(127,199,255)
    FILTERGROUP inactive1 FILTER 'Активные' active(i) 'F5' DEFAULT    
    FILTERGROUP check FILTER 'Контроль' calcCheckLimitRetailForm(i) 'F9' DEFAULT    
    FILTERS isParent(g,i)
;
DESIGN maxLimitRetailPriceParams{
    OBJECTS {
        NEW top{
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE skuTree);
            MOVE BOX(i){fill = 2;}
        }
    }
}

NAVIGATOR {
    priceListDashboardNavigator {
        NEW maxLimitRetailPrice;
        NEW maxLimitRetailPriceParams;
    }
}