MODULE PricingPriceList;

REQUIRE Pricing;

NAMESPACE Repricing; // пока Repricing для обратной совместимости - потом правильнее перекинуть на Pricing с миграцией

skipRepricing = ABSTRACT BOOLEAN (Sku, Stock);

onStockPriceListRepricing 'Переоценивать товары без остатка' = DATA BOOLEAN ();
withoutCurrentRetailPrice 'Формировать цену, если нет текущих розничных цен' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() onStockPriceListRepricing, withoutCurrentRetailPrice 
;

DESIGN options {
    pricings {
        MOVE PROPERTY(onStockPriceListRepricing());
        MOVE PROPERTY(withoutCurrentRetailPrice());
    }
}

managementRetailPrice 'Цена (управленческая)' = DATA LOCAL NESTED NUMERIC[16,4] (Sku);
managementPriceListPrice = DATA LOCAL NESTED NUMERIC[16,4] (Sku); 
inDashboardRepricing 'Вкл' = DATA LOCAL NESTED BOOLEAN (Sku); 

skipManagementPriceList = ABSTRACT BOOLEAN (PriceListType, Sku, Stock, DATETIME); 

overSetMarkupManagementRetailPrice  ABSTRACT LIST( DepartmentStore, DATETIME);
overSetManagementRetailPrice  ABSTRACT LIST ( DepartmentStore, DATETIME);

includeExtraDashboardRepricing  ABSTRACT ( DepartmentStore, PriceListType, DATETIME);
calculateDashboardRepricing 'По надбавкам и прайсам'(DepartmentStore d, CalcPriceListType ct, PriceListType pt, DATETIME dt)  { 
    DIALOG dialogSkuGroup DO {              
        IF onStockPriceListRepricing() THEN {
            managementRetailPrice (Sku sku) <- priceA(ct, sku, d, dt) 
                IF NOT skipManagementPriceList(pt, sku, d, dt) AND inSession(skuGroup(sku));
            overSetMarkupManagementRetailPrice(d, dt);
            managementPriceListPrice (Sku sku) <- prevPriceA(pt, sku, d, dt)
                IF NOT skipManagementPriceList(pt, sku, d, dt) AND inSession(skuGroup(sku));
            managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku);
        } ELSE {
            managementRetailPrice (Sku sku) <- priceA(ct, sku, d, dt)
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList(ct, sku, d, dt) AND inSession(skuGroup(sku));
            overSetMarkupManagementRetailPrice(d, dt);
            managementPriceListPrice (Sku sku) <- prevPriceA(pt,sku, d, dt)
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList(pt, sku, d, dt) AND inSession(skuGroup(sku));
            managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku);
        }
        
        overSetManagementRetailPrice(d, dt);
        
        IF withoutCurrentRetailPrice() THEN
            inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) AND NOT managementRetailPrice(sku) == prevRetailPricingPriceA(sku, d, dt)  
                                                           AND NOT skipRepricing(sku, d);
        ELSE
            inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) != prevRetailPricingPriceA(sku, d, dt) AND NOT skipRepricing(sku, d);
        
        includeExtraDashboardRepricing(d, pt, dt);
        
        formRefresh();
    }
}
customerManagementRepricing = DATA LOCAL BOOLEAN ();
customerManagementRepricing  ABSTRACT LIST ( DepartmentStore, PriceListType, DATETIME );

calculateDashboardManagementRepricing 'По прайсам'(DepartmentStore d, PriceListType pt, DATETIME dt)  { 
    managementRetailPrice(Sku sku) <- NULL;
    IF NOT customerManagementRepricing() THEN {
        IF onStockPriceListRepricing() THEN {
            managementPriceListPrice (Sku sku) <- prevPriceA(pt, sku, d, dt)
                IF NOT skipManagementPriceList(pt, sku, d, dt);
        } ELSE {
            managementPriceListPrice (Sku sku) <- prevPriceA(pt, sku, d, dt) 
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList(pt, sku, d, dt);
            
        }
    } ELSE {
        customerManagementRepricing(d,pt,dt);
    }
    managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku) AND skuType(sku) != SkuType.skuTypeContainer;    
    overSetManagementRetailPrice(d, dt);
    
    IF withoutCurrentRetailPrice() THEN
        inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) AND NOT managementRetailPrice(sku) == prevRetailPricingPriceA(sku, d, dt)  
                                                       AND NOT skipRepricing(sku, d);
    ELSE
        inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) != prevRetailPricingPriceA(sku, d, dt) AND NOT skipRepricing(sku, d);
    
    includeExtraDashboardRepricing(d, pt, dt);
}

clearDashboardRepricing()  { 
    inDashboardRepricing(Sku sk) <- NULL;
    managementRetailPrice(Sku sk) <- NULL;
    managementPriceListPrice(Sku sk) <- NULL;
    
    formRefresh();
}

orderRepricingDetail = ABSTRACT INTEGER (Sku);