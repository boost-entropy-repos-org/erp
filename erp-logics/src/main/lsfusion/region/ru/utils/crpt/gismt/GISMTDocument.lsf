MODULE GISMTDocument;

REQUIRE GISMTLegalEntity, LotType, Time, CryptoProLegalEntity;

NAMESPACE GISMT;

CLASS ABSTRACT Document 'Исходящий документ ГИС МТ';

isPosted 'Проведен' = ABSTRACT BOOLEAN (Document) MATERIALIZED;
canceled 'Отменен' = ABSTRACT BOOLEAN (Document) MATERIALIZED;

id 'Код' = ABSTRACT STRING[100] (Document) MATERIALIZED INDEXED;
document 'Документ ГИС МТ' = GROUP AGGR Document d BY id(d);

dateTime 'Дата/время' = ABSTRACT DATETIME (Document) MATERIALIZED;

legalEntity = ABSTRACT LegalEntity (Document) MATERIALIZED;
nameLegalEntity 'Организация' (Document d) = name(legalEntity(d));

type = ABSTRACT LotType (Document) MATERIALIZED;
idType (Document d) = id(type(d));
nameType 'Тип' (Document d) = name(type(d));

gismtType 'Тип ГИС МТ' = ABSTRACT STRING (Document) MATERIALIZED;

docCreateUrl (Document o) = url() + '/lk/documents/create?pg=' + idType(o);

documentHeaders (TEXT name) = CASE
    WHEN name = 'Authorization' THEN 'Bearer ' + token();

status 'Статус ГИС МТ' = DATA STRING (Document);
downloadDesc 'Описание ГИС МТ' = DATA STRING (Document);

stopCreate = DATA LOCAL BOOLEAN ();
export ABSTRACT (Document);

toCreate = ABSTRACT BOOLEAN (Document) MATERIALIZED;
dateTimeCreated 'Отправлен' = DATA DATETIME (Document);
    
create 'Отослать в ГИС МТ' (Document d) {
    NEWSESSION {
        export(d);
        IF stopCreate() THEN RETURN;
        
        logToFile('gismt', exportFile());
        
        sign(exportFile(), TRUE, legalEntity(d));
        
        LOCAL sendRequest = FILE();
        EXPORT JSON FROM document_format = 'MANUAL', 
                         product_document = replace(encode(RAWFILE(exportFile()), 'base64'), '\n', ''),
                         type = gismtType(d),
                         signature = encodedSignature()
                    TO sendRequest;
        
        logToFile('gismt', sendRequest());

        getToken(legalEntity(d));

        LOCAL id = STRING();
        EXTERNAL HTTP POST docCreateUrl(d) HEADERS documentHeaders PARAMS sendRequest() TO id;
        
        status(d) <- NULL;
        canceled(d) <- NULL;
        downloadDesc(d) <- NULL;
        id(d) <- STRING[100](id());
        dateTimeCreated(d) <- currentDateTime();
        APPLY;
        
        MESSAGE 'Документ успешно отослан. Присвоен код : ' + id(d);
    }
}

// get status
GROUP body;

number = DATA LOCAL STRING[100] (INTEGER);
docDate = DATA LOCAL STRING (INTEGER);

GROUP sender;
senderInn = DATA LOCAL STRING (INTEGER) IN sender;

status = DATA LOCAL STRING (INTEGER);
downloadDesc = DATA LOCAL STRING (INTEGER);

gtin = DATA LOCAL STRING (INTEGER);
uit_code = DATA LOCAL STRING[100] (INTEGER);

sku = DATA LOCAL Sku (INTEGER);

FORM getDocumentStatus
    OBJECTS results = INTEGER
    PROPERTIES(results) number = number, status = status, downloadDesc = downloadDesc 
;

checkDocStatusInterval 'За сколько дней проверять статусы документов' = DATA INTEGER ();
checkDocStatusDateTime () = subtractDay(currentDateTime(), OVERRIDE checkDocStatusInterval(), 1);

EXTEND FORM integrationData
    PROPERTIES checkDocStatusInterval()
;

DESIGN integrationData {
    GISMT {
        MOVE PROPERTY(checkDocStatusInterval());
    }
}

getDocumentStatuses (DATETIME dFrom) {
    FOR keyAlias(LegalEntity l) DO {
        NEWSESSION {
            getToken(l);
            
            LOCAL result = JSONFILE();
            TRY {
                EXTERNAL HTTP GET url() + '/facade/doc/listV2?inputFormat=false&limit=10000&dateFrom=' + replace(toChar(dFrom, 'yyyy-MM-dd T HH24:MI:SS.MI0Z'),' ','') HEADERS documentHeaders TO result;
            } CATCH {
                logToFile('gismt', messageCaughtException());
                logToFile('gismt', FILE(result()));
                MESSAGE CONCAT ' ', 'Ошибка при получении данных о статусах документов ГИС МТ', messageCaughtException();
                RETURN;
            }
            
            IMPORT getDocumentStatus JSON FROM result();
            FOR id(Document d) = number(INTEGER i) INLINE DO {
                status(d) <- status(i);
                downloadDesc(d) <- downloadDesc(i);
            }
            
            APPLY;
        }
    }
}

getDocumentStatuses 'Импортировать статусы документов ГИС МТ' () { 
    getDocumentStatuses(checkDocStatusDateTime());
}

postDocuments 'Изменить статусы документов ГИС МТ' () {
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND (status(d) = 'CHECKED_OK' OR status(d) = 'ACCEPTED') AND NOT isPosted(d) DO {
        NEWSESSION {
            isPosted(d) <- TRUE;
            APPLY;
        }
    }
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND status(d) = 'CHECKED_NOT_OK' AND NOT canceled(d) DO {
        NEWSESSION {
            canceled(d) <- TRUE;
            APPLY;
        }
    }
}

META defineDocumentGISMT(doc, property, form, obj, legalEntityProp, gisType)
    DESIGN form {
        documentDetail {
            NEW gismt {
                caption = 'ГИС МТ';
            }
        }
    }
    
    CLASS ###doc##Document : Document;
    id 'Код' = DATA STRING[100] (###doc##Document);
    
    document = AGGR ###doc##Document WHERE in(###doc doc, LotType lotType) AND property(doc) MATERIALIZED INDEXED;
    nameLotType 'Тип' (###doc##Document d) = name(lotType(d));
    
    id (###doc##Document i) += id(i);
    dateTime (###doc##Document i) += dateTime(doc(i));
    gismtType (###doc##Document i) += gisType IF i IS ###doc##Document;
    
    legalEntity (###doc##Document i) += legalEntityProp(doc(i));
    
    isPosted 'Проведена' = DATA BOOLEAN (###doc##Document);
    isPosted(###doc##Document i) += isPosted(i);
    
    type (###doc##Document i) += lotType(i);
    
    canceled 'Отменена' = DATA BOOLEAN (###doc##Document);
    canceled(###doc##Document i) += canceled(i);
    
    toCreate (###doc##Document d) += d IS ###doc##Document AND (NOT id(d) OR canceled(d));
    
    edit (###doc##Document d) + { edit(doc(d)); }
    
    statusP 'Статус передачи в ГИС МТ' (###doc##Document d) = CASE WHEN isPosted(d) THEN 'Отправлен' 
                                       WHEN toCreate(d) THEN 'Требуется загрузка'
                                       ELSE 'Ожидание подтверждения';
    status 'Статус передачи в ГИС МТ' (###doc d) = 
        GROUP CONCAT statusP(###doc##Document dd) + '(' + name(lotType(dd)) + ')' IF doc(dd) = d, ',' ORDER dd MATERIALIZED;
    
    EXTEND FORM form
        PROPERTIES(obj) READONLY status
    
        OBJECTS gd = ###doc##Document
        PROPERTIES(gd) READONLY nameLotType
        PROPERTIES(gd) READONLY id, isPosted, canceled 
        PROPERTIES(gd) READONLY statusP, status, downloadDesc
        PROPERTIES(gd) create TOOLBAR SHOWIF toCreate(gd)
        FILTERS doc(gd) = obj

        PROPERTIES(obj) recalculateLotType TOOLBAR DRAW gd
    ;
    
    DESIGN form {
        gismt {
            showIf = useLot(operation(obj));
            MOVE BOX(gd) { caption = 'Документы'; }
        }
    }
END

// form list

FORM documents 'Исходящие документы'
    OBJECTS d = Document
    PROPERTIES(d) READONLYIF isReadonly() isPosted, canceled, id 
    PROPERTIES(d) READONLY dateTimeCreated, dateTime, nameLegalEntity, gismtType 
    PROPERTIES(d) READONLYIF isReadonly() status, downloadDesc
    
    PROPERTIES(d) TOOLBAR create SHOWIF toCreate(d) AND NOT isPosted(d)
    PROPERTIES(d) EDIT
    PROPERTIES() DRAW d TOOLBAR getDocumentStatuses, postDocuments
    
    FILTERGROUP status
        FILTER 'Требуется отсылка' NOT isPosted(d) AND toCreate(d)
        FILTER 'Ожидается ответ' NOT isPosted(d) AND NOT canceled(d) AND NOT toCreate(d)
        FILTER 'Не завершен' NOT isPosted(d) AND (toCreate(d) OR NOT canceled(d))
;

@extendFormEditable(documents);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER gismtNavigator 'ГИС МТ' {
            NEW documents;
        }
    }
}