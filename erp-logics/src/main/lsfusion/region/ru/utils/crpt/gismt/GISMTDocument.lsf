MODULE GISMTDocument;

REQUIRE GISMTLegalEntity, LotType, Time, CryptoProLegalEntity;

NAMESPACE GISMT;

CLASS ABSTRACT Document 'Документ ГИС МТ';

isPosted = ABSTRACT BOOLEAN (Document);
canceled = ABSTRACT BOOLEAN (Document);

id = ABSTRACT STRING[100] (Document);

dateTime = ABSTRACT DATETIME (Document);

legalEntity = ABSTRACT LegalEntity (Document);

type = ABSTRACT LotType (Document);
idType (Document d) = id(type(d));

gismtType = ABSTRACT STRING (Document);

docCreateUrl (Document o) = url() + '/lk/documents/create?pg=' + idType(o);

documentHeaders (TEXT name) = CASE
    WHEN name = 'Authorization' THEN 'Bearer ' + token();

status 'Статус ГИС МТ' = DATA STRING (Document);
downloadDesc 'Описание ГИС МТ' = DATA STRING (Document);

export ABSTRACT (Document);
    
create 'Отослать в ГИС МТ' (Document d) {
    NEWSESSION {
        export(d);
        logToFile('gismt', exportFile());
        
        sign(exportFile(), TRUE, legalEntity(d));
        
        LOCAL sendRequest = FILE();
        EXPORT JSON FROM document_format = 'MANUAL', 
                         product_document = replace(encode(RAWFILE(exportFile()), 'base64'), '\n', ''),
                         type = gismtType(d),
                         signature = encodedSignature()
                    TO sendRequest;
        
        logToFile('gismt', sendRequest());

        getToken(legalEntity(d));

        LOCAL id = STRING();
        EXTERNAL HTTP POST docCreateUrl(d) HEADERS documentHeaders PARAMS sendRequest() TO id;
        
        status(d) <- NULL;
        canceled(d) <- NULL;
        downloadDesc(d) <- NULL;
        id(d) <- STRING[100](id());
        APPLY;
    }
}

// get status

number = DATA LOCAL STRING (INTEGER);
status = DATA LOCAL STRING (INTEGER);
downloadDesc = DATA LOCAL STRING (INTEGER);
FORM getDocumentStatus
    OBJECTS results = INTEGER
    PROPERTIES(results) number = number, status = status, downloadDesc = downloadDesc 
;

getDocumentStatuses (DATETIME dFrom) {
    FOR keyAlias(LegalEntity l) DO {
        NEWSESSION {
            getToken(l);
            
            LOCAL result = JSONFILE();
            TRY {
                EXTERNAL HTTP GET url() + '/facade/doc/listV2?dateFrom=' + replace(toChar(dFrom, 'yyyy-MM-dd T HH24:MI:SS.MI0Z'),' ','') HEADERS documentHeaders TO result;
            } CATCH {
                logToFile('gismt', messageCaughtException());
                logToFile('gismt', FILE(result()));
                MESSAGE CONCAT ' ', 'Ошибка при получении данных о статусах документов ГИС МТ', messageCaughtException();
                RETURN;
            }
            
            IMPORT getDocumentStatus JSON FROM result();
            FOR id(Document d) = number(INTEGER i) INLINE DO {
                status(d) <- status(i);
                downloadDesc(d) <- downloadDesc(i);
            }
            
            APPLY;
        }
    }
}

checkDocStatusInterval 'За сколько дней проверять статусы документов' = DATA INTEGER ();
checkDocStatusDateTime () = subtractDay(currentDateTime(), OVERRIDE checkDocStatusInterval(), 1);
getDocumentStatuses 'Импортировать статусы документов ГИС МТ' () { 
    getDocumentStatuses(checkDocStatusDateTime());
}

postDocuments 'Изменить статусы документов ГИС МТ' () {
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND status(d) = 'CHECKED_OK' AND NOT isPosted(d) DO {
        NEWSESSION {
            isPosted(d) <- TRUE;
            APPLY;
        }
    }
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND status(d) = 'CHECKED_NOT_OK' AND NOT canceled(d) DO {
        NEWSESSION {
            canceled(d) <- TRUE;
            APPLY;
        }
    }
}

EXTEND FORM integrationData
    PROPERTIES checkDocStatusInterval(), getDocumentStatuses(), postDocuments();
;

DESIGN integrationData {
    GISMT {
        MOVE PROPERTY(checkDocStatusInterval());
        MOVE PROPERTY(getDocumentStatuses());
        MOVE PROPERTY(postDocuments());
    }
}

META defineDocumentGISMT(doc, property, form, obj, legalEntityProp, gisType)
    DESIGN form {
        documentDetail {
            NEW gismt {
                caption = 'ГИС МТ';
            }
        }
    }
    
    CLASS ###doc##Document : Document;
    id 'Код' = DATA STRING[100] (###doc##Document);
    
    document = AGGR ###doc##Document WHERE in(###doc doc, LotType lotType) AND property(doc) MATERIALIZED INDEXED;
    nameLotType 'Тип' (###doc##Document d) = name(lotType(d));
    
    id (###doc##Document i) += id(i);
    dateTime (###doc##Document i) += dateTime(doc(i));
    gismtType (###doc##Document i) += gisType IF i IS ###doc##Document;
    
    legalEntity (###doc##Document i) += legalEntityProp(doc(i));
    
    isPosted 'Проведена' = DATA BOOLEAN (###doc##Document);
    isPosted(###doc##Document i) += isPosted(i);
    
    type (###doc##Document i) += lotType(i);
    
    canceled 'Отменена' = DATA BOOLEAN (###doc##Document);
    canceled(###doc##Document i) += canceled(i);
    
    toCreate (###doc##Document d) = d IS ###doc##Document AND NOT id(d) OR canceled(d);
    
    statusP 'Статус передачи в ГИС МТ' (###doc##Document d) = CASE WHEN isPosted(d) THEN 'Отправлен' 
                                       WHEN toCreate(d) THEN 'Требуется загрузка'
                                       ELSE 'Ожидание подтверждения';
    status 'Статус передачи в ГИС МТ' (###doc d) = 
        GROUP CONCAT statusP(###doc##Document dd) + '(' + name(lotType(dd)) + ')' IF doc(dd) = d, ',' ORDER dd MATERIALIZED;
    
    export (###doc##Document i) + {
        EXPORT export###doc OBJECTS i = doc(i), t = lotType(i) JSON;
    }
    
    EXTEND FORM form
        PROPERTIES(obj) READONLY status
    
        OBJECTS gd = ###doc##Document
        PROPERTIES(gd) READONLY nameLotType
        PROPERTIES(gd) READONLY id, isPosted, canceled 
        PROPERTIES(gd) READONLY statusP, status, downloadDesc
        PROPERTIES(gd) create TOOLBAR SHOWIF toCreate(gd)
        FILTERS doc(gd) = obj

        PROPERTIES(obj) recalculateLotType TOOLBAR DRAW gd
    ;
    
    DESIGN form {
        gismt {
            showIf = useLot(operation(obj));
            MOVE BOX(gd) { caption = 'Документы'; }
        }
    }
END