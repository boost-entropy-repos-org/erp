MODULE GISMTDocument;

REQUIRE GISMTAuthentication, LotType, Time;

NAMESPACE GISMT;

CLASS ABSTRACT Document 'Документ ГИС МТ';

isPosted = ABSTRACT BOOLEAN (Document);
canceled = ABSTRACT BOOLEAN (Document);

id = ABSTRACT STRING[100] (Document);

dateTime = ABSTRACT DATETIME (Document);

type = ABSTRACT LotType (Document);
idType (Document d) = id(type(d));

gismtType = ABSTRACT STRING (Document);

docCreateUrl (Document o) = url() + '/lk/documents/create?pg=' + idType(o);

documentHeaders (TEXT name) = CASE
    WHEN name = 'Authorization' THEN 'Bearer ' + token();

status 'Статус ГИС МТ' = DATA STRING (Document);
downloadDesc 'Описание ГИС МТ' = DATA STRING (Document);

export ABSTRACT (Document);
    
create 'Отослать в ГИС МТ' (Document d) {
    NEWSESSION {
        export(d);
        
        sign(exportFile(), TRUE);
        
        LOCAL sendRequest = FILE();
        EXPORT JSON FROM document_format = 'MANUAL', 
                         product_document = replace(encode(RAWFILE(exportFile()), 'base64'), '\n', ''),
                         type = gismtType(d),
                         signature = encodedSignature()
                    TO sendRequest;
        
        getToken();
        
        LOCAL id = STRING();
        EXTERNAL HTTP POST docCreateUrl(d) HEADERS documentHeaders PARAMS sendRequest() TO id;
        
        status(d) <- NULL;
        canceled(d) <- NULL;
        id(d) <- STRING[100](id());
        APPLY;
    }
}

// get status

number = DATA LOCAL STRING (INTEGER);
status = DATA LOCAL STRING (INTEGER);
downloadDesc = DATA LOCAL STRING (INTEGER);
FORM getDocumentStatus
    OBJECTS results = INTEGER
    PROPERTIES(results) number = number, status = status, downloadDesc = downloadDesc 
;

getDocumentStatuses (DATETIME dFrom) {
    NEWSESSION {
        getToken();
        
        LOCAL result = JSONFILE();
        EXTERNAL HTTP GET url() + '/facade/doc/listV2?dateFrom=' + replace(toChar(dFrom, 'yyyy-MM-dd T HH24:MI:SS.MI0Z'),' ','') HEADERS documentHeaders TO result;
        
        IMPORT getDocumentStatus JSON FROM result();
        FOR id(Document d) = number(INTEGER i) INLINE DO {
            status(d) <- status(i);
            downloadDesc(d) <- downloadDesc(i);
        }
        
        APPLY;
    }
}

checkDocStatusInterval 'За сколько дней проверять статусы документов' = DATA INTEGER ();
checkDocStatusDateTime () = subtractDay(currentDateTime(), OVERRIDE checkDocStatusInterval(), 1);
getDocumentStatuses 'Импортировать статусы документов' () { 
    getDocumentStatuses(checkDocStatusDateTime());
}

postDocuments 'Изменить статусы документов' () {
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND status(d) = 'CHECKED_OK' AND NOT isPosted(d) DO {
        NEWSESSION {
            isPosted(d) <- TRUE;
            APPLY;
        }
    }
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND status(d) = 'CHECKED_NOT_OK' AND NOT canceled(d) DO {
        NEWSESSION {
            canceled(d) <- TRUE;
            APPLY;
        }
    }
}

EXTEND FORM integrationData
    PROPERTIES checkDocStatusInterval(), getDocumentStatuses(), postDocuments();
;

DESIGN integrationData {
    GISMT {
        MOVE PROPERTY(checkDocStatusInterval());
        MOVE PROPERTY(getDocumentStatuses());
        MOVE PROPERTY(postDocuments());
    }
}