MODULE ConsignmentEInvoice;

REQUIRE EDI, Invoice, ConsignmentBy;

NAMESPACE Consignment;

defaultNumeratorDeliveryNoteNumber = DATA Numerator ();
nameDefaultNumeratorDeliveryNote 'DeliveryNoteNumber Накладные EDI' = name(defaultNumeratorDeliveryNoteNumber()) IN defaultNumerator;

EXTEND FORM defaultNumerators
    PROPERTIES() nameSaleDefaultNumeratorDeliveryNote = nameDefaultNumeratorDeliveryNote
;

loadDefaultNumerators() + { 
    NEW n = Numerator {
        name(n) <- 'DeliveryNoteNumber Накладные EDI';
        series(n) <- '';
        minValue(n) <- 1L;
        maxValue(n) <- 9999999999L;
        stringLength(n) <- 10;

        defaultNumeratorDeliveryNoteNumber() <- n;
    }
}

generateSeriesNumber 'Сгенерировать номер'(EInvoice o)  { 
    deliveryNoteNumber(o) <- '001-' + GLN(supplier(o)) + '-' + curStringValue(defaultNumeratorDeliveryNoteNumber()); //ССС-GGGGGGGGGGGGG-NNNNNNNNNN
    incrementValueSession(defaultNumeratorDeliveryNoteNumber());
}

//исходящие
invoice= DATA Invoice(EInvoice);
eInvoice= GROUP LAST EInvoice ei IF NOT isCancel(ei) ORDER dateTime(ei), ei BY invoice(ei);
numberInvoice'Номер накладной EDI (расход)' (EInvoice i) = number(invoice(i));
EXTEND FORM eInvoices
    PROPERTIES (e) READONLY SaleNumberInvoice = numberInvoice
;
numberEInvoice'Номер'(Invoice i) = deliveryNoteNumber(eInvoice(i));

signAndSendSupplierEDI 'Подписать и отправить (поставщик)'(Invoice i)  { 
    in(EInvoice e) <- e = eInvoice(i);
    signAndSendSupplierEDI();
    in(EInvoice e) <- NULL;
}

cancelSignAndSendSupplierEDI 'Отменить (поставщик)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        exportedSupplier(EInvoice e) <- NULL WHERE e = eInvoice(i);
        isCancel(EInvoice e) <- TRUE WHERE e = eInvoice(i);
        signAndSendSupplierEDI();
        IF (GROUP SUM 1 IF exportedSupplier(EInvoice e) AND in(e)) THEN APPLY;
    }
}

currentOrderMessage = GROUP LAST EInvoiceMessage m ORDER priority(m), dateTime(m), m BY invoice(eInvoice(m));
statusDescription 'Статус отправки EDI'(Invoice o) = CONCAT ' ', code(currentOrderMessage(o)), description(currentOrderMessage(o)) CHARWIDTH 15;


createEInvoice 'Создать электронную накладную' (Consignment invoice)  { 
    IF NOT eInvoice(invoice) THEN NEWSESSION {
        NEW ei = EInvoice {
            invoice(ei) <- invoice;
            number(ei) <- number(invoice);
            dateTime(ei) <- dateTime[Invoice](invoice);
            deliveryNoteDateTime(ei) <- dateTime[Invoice](invoice);
            supplier(ei) <- supplier(invoice);
            supplierStock(ei) <- supplierStock(invoice);
            customer(ei) <- customer(invoice);
            customerStock(ei) <- customerStock(invoice);
            contactCustomerStock(ei) <- '';
            contractId(ei) <- seriesNumberContractSku(invoice);
            contractDate(ei) <- dateFromContractSku(invoice);
            currency(ei) <- shortNameCurrency(invoice);
            generateSeriesNumber(ei);
            freightPayer(ei) <- payer(invoice);
            
            FOR consignment(ConsignmentDetail detail) == invoice NEW ed = EInvoiceDetail  DO {
                eInvoice(ed) <- ei;
                lineItemID(ed) <- id(barcode(sku(detail))) IF charLength(id(barcode(sku(detail)))) > 7;
                lineItemBuyerID(ed) <- id(sku(detail));
                lineItemName(ed) <- nameSku(detail);
                quantityDespatched(ed) <- quantity(detail);
                valueVAT(ed) <- vat(detail);
                lineItemPrice(ed) <- price(detail);
                lineItemAmount(ed) <- dataSumInvoice(detail);
                lineItemAmountCharges(ed) <- sumVAT(detail);
                lineItemAmountWithoutCharges(ed) <- dataSumInvoice(detail) (-)sumVAT(detail);
                grossWeightValue(ed) <- NUMERIC[12,6](grossWeightTon(detail));
                lineItemQuantityUOM(ed) <- OVERRIDE extraCodeUOM(UOM(sku(detail))), 'PCE';
                despatchUnitQuantityDespatched(ed) <- OVERRIDE NUMERIC[12,5](packQuantity(detail)), 1.0;
            }
        }
        APPLY;
    }
}

UNPfullNamePayer (Invoice i) = CONCAT ', ', UNPPayer(i), fullNamePayer(i);
UNPfullNameSupplier (Invoice i) = CONCAT ', ', UNPSupplier(i), fullNameSupplier[Consignment](i);
addressSupplierAddressSupplierStock (Invoice i) = CONCAT ', ', addressSupplier[Consignment](i), addressSupplierStock[Consignment](i);
infoCustomerBase (Invoice i) = CONCAT ', ', UNPCustomer(i), fullNameCustomer[Consignment](i), addressCustomer[Consignment](i), shipmentBase(i);
numberDate (Invoice i) = CONCAT ', ', number(i), toDateDDMMYY(date(i));

//-- old
FORM consignmentEInvoice 'РЕЕСТР'
    OBJECTS i = Invoice PANEL SUBREPORT
    PROPERTIES(i) READONLY UNPfullNamePayer, addressPayer, UNPfullNameSupplier, addressSupplierAddressSupplierStock,
                           date, nameTruck, overWaybill, nameDriver, trailer, number, numberDate, infoCustomerBase,
                           grossWeightConsignmentDetail, overPackQuantityConsignmentDetail, sumVATConsignmentDetail,
                           sumInvoiceConsignmentDetail, forwarder, overGoodsAccepted, numberEInvoice
;

FORM attachmentEInvoice 'Приложение'
    OBJECTS i = Invoice PANEL SUBREPORT
    PROPERTIES(i) READONLY number, date
    
    OBJECTS d = InvoiceDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, quantity, price, sum, valueVAT, VATSum, invoiceSum,
                           packQuantity, sumGrossWeight, idSku
    FILTERS invoice(d) == i
;

UNPfullNamePayer (EInvoice i) = CONCAT ', ', UNP(freightPayer(i)), fullName(freightPayer(i));
UNPfullNameSupplier (EInvoice i) = CONCAT ', ', unpSupplier(i), nameSupplier(i);
addressSupplierAddressSupplierStock (EInvoice i) = CONCAT ', ', addressSupplier(i), addressSupplierStock(i);
numberDate (EInvoice i) = CONCAT ', ', number(i), toDateDDMMYY(dateTime(i));
infoCustomerBase (EInvoice i) = CONCAT ', ', unpCustomer(i), nameCustomer(i), addressCustomer(i), (CONCAT ' ', contractId(i),contractDate(i));

FORM EInvoiceConsignment 'РЕЕСТР'
    OBJECTS e = EInvoice PANEL 
    PROPERTIES(e)  UNPfullNamePayer, addressFreightPayer, UNPfullNameSupplier, addressSupplierAddressSupplierStock, deliveryNoteDateTime,deliveryNoteNumber,
                   transportContact, waybillId, deliveryContact, transportID, trailerID, numberDate, infoCustomerBase, contactCustomerStock    
    PROPERTIES(e) totalAmountWithoutCharges,totalAmountCharges, totalAmount,totalLineItem, totalLineItemQuantity, totalGrossWeight, 
                totalDespatchUnitQuantity, totalAmountExcise

;
FORM EInvoiceAttachment 'Приложение'
    OBJECTS e = EInvoice PANEL 
    PROPERTIES(e) READONLY number, dateTime
    
    OBJECTS d = EInvoiceDetail
    PROPERTIES(d) READONLY lineItemID, lineItemBuyerID, lineItemName, quantityDespatched, lineItemPrice, lineItemAmountWithoutCharges, valueVAT, 
                   lineItemAmountCharges, lineItemAmount, despatchUnitQuantityDespatched, grossWeightValue
    PROPERTIES shortNameUOMSku= UOMExtraCode(lineItemQuantityUOM(d))
    FILTERS eInvoice(d) == e
;

printConsignmentEInvoiceAttachment 'Реестр ТТН с приложением' (Invoice i)  { 
    PRINT EInvoiceConsignment OBJECTS e = eInvoice(i);
    PRINT EInvoiceAttachment OBJECTS  e = eInvoice(i);
} IMAGE 'print.png';

printConsignmentEInvoice 'Реестр ТТН' (Invoice i)  { 
    PRINT EInvoiceConsignment OBJECTS e = eInvoice(i);
} IMAGE 'print.png';

printConsignmentEAttachment 'Приложение' (Invoice i)  { 
    PRINT EInvoiceAttachment OBJECTS  e = eInvoice(i);
} IMAGE 'print.png';

printConsignmentEAttachmentXLSX 'Приложение (xlsx)' (Invoice i)  { 
    PRINT EInvoiceAttachment OBJECTS  e = eInvoice(i) XLSX;
} IMAGE 'print.png';

include 'Вкл.' = DATA LOCAL BOOLEAN (Invoice);
countInclude() = GROUP SUM 1 IF include(Invoice i);
maxInclude() = GROUP MAX Invoice i IF include(i);

UNPfullNamePayer () = CONCAT ', ', UNPPayer(maxInclude()), fullNamePayer(maxInclude());
addressPayer () = addressPayer(maxInclude());
UNPfullNameSupplier () = CONCAT ', ', UNPSupplier(maxInclude()), fullNameSupplier[Consignment](maxInclude());
addressSupplier () = addressSupplier[Consignment](maxInclude());
date () = date(maxInclude());
nameTruck () = nameTruck(maxInclude());
overWaybill () = overWaybill(maxInclude());
nameDriver () = nameDriver(maxInclude());
forwarder () = forwarder(maxInclude());
infoCustomer (Invoice i) = CONCAT ', ', UNPCustomer(i), fullNameCustomer[Consignment](i), addressCustomer[Consignment](i);


FORM consignmentEInvoices 'РЕЕСТР'
    PROPERTIES() UNPfullNamePayer, addressPayer, UNPfullNameSupplier, addressSupplier, date, nameTruck, overWaybill, nameDriver, forwarder
    OBJECTS i = Invoice SUBREPORT
    PROPERTIES(i) READONLY numberDate, infoCustomer, overGoodsAccepted
    FILTERS include(i)
;

//printConsignmentEInvoicesXLSX 'Реестр ТТН (xlsx) (несколько)' ()  { 
//    PRINT consignmentEInvoices XLSX;
//    FOR include(Invoice i) DO {
//        PRINT attachmentEInvoice OBJECTS i = i XLSX;
//    }
//} IMAGE 'print.png';

editAttributesEInvoice 'Заполнить атрибуты накладной' (Invoice i)  { 
	NEWSESSION {   
	    SHOW eInvoice OBJECTS e = eInvoice(i) DOCKED; 
	}
} IMAGE 'edit.png';

META defineInvoiceEinvoice (dumb)
    EXTEND FORM invoices
        PROPERTIES READONLY PANEL numberEInvoice(i)
        PROPERTIES(i) createEInvoice SHOWIF (NOT eInvoice(i)), statusDescription SHOWIF eInvoice(i) PANEL, 
                      signAndSendSupplierEDI SHOWIF (eInvoice(i) AND NOT exportedSupplier(eInvoice(i))), 
                      cancelSignAndSendSupplierEDI SHOWIF (eInvoice(i) AND exportedSupplier(eInvoice(i)))
        PROPERTIES(i) SHOWIF eInvoice(i) editAttributesEInvoice, printConsignmentEInvoiceAttachment,  printConsignmentEInvoice, 
                      printConsignmentEAttachment, printConsignmentEAttachmentXLSX
    ;
    
    DESIGN invoices {
        printTabScroll {
            NEW tabConsignment{
                type = TABBED;
                MOVE printTab {caption = 'Накладная';};
                NEW eInvoice {
                    caption = 'Электронная накладная';
                    NEW createEI {
                        type = CONTAINERH;
                        MOVE PROPERTY(numberEInvoice(i));
                        MOVE PROPERTY(createEInvoice(i));
                        MOVE PROPERTY(editAttributesEInvoice(i));
                        MOVE PROPERTY(signAndSendSupplierEDI(i));
                        MOVE PROPERTY(cancelSignAndSendSupplierEDI(i));
                        MOVE PROPERTY(statusDescription(i));
                    }
                    NEW printEI {
                        type = CONTAINERH;
                        MOVE PROPERTY (printConsignmentEInvoiceAttachment(i));
                        MOVE PROPERTY (printConsignmentEInvoice(i));
                        MOVE PROPERTY (printConsignmentEAttachment(i));
                    }
                    NEW exportEI {
                        type = CONTAINERH;
                        MOVE PROPERTY (printConsignmentEAttachmentXLSX(i));
                    }
                }
            }
    }    
    }
END