MODULE PurchaseEInvoice;

REQUIRE InvoiceEInvoice, PurchaseInvoice, EInvoiceEDI, PurchaseCreditNote;

PRIORITY Purchase;

NAMESPACE EDI;


eOperation = DATA Operation(LegalEntity);
nameEOperation 'Операция (Закупка) для электронных накладных'(LegalEntity l) = name(eOperation(l));

EXTEND FORM legalEntity
    PROPERTIES (l) nameEOperation;

DESIGN legalEntity {
    EDI{
        MOVE PROPERTY (nameEOperation(l));
    }
} 

receiver = DATA Employee (UserInvoice);
receiver(UserInvoice i) += receiver(i);

nameReceiver 'Приёмщик'(Invoice i) = name(receiver(i));

filterDate 'Дата' = DATA LOCAL DATE ();
filterDate (EInvoice i) = DATE(dateTime(i)) == filterDate() OR NOT filterDate();      

FORM selectEInvoice 'Накладные EDI'
    PROPERTIES filterDate()
    
    OBJECTS ei = EInvoice
    PROPERTIES(ei) READONLY dateTime, number, deliveryNoteNumber, nameSupplier, nameCustomer
    FILTERS filterDate(ei),
            NOT invoice(ei)            
;

DESIGN selectEInvoice {
    NEW filter {
        caption = 'Фильтр';
        MOVE PROPERTY (filterDate());
    }
    
    MOVE BOX(ei);
    MOVE TOOLBARBOX;
}

copyData(EInvoice ei, Invoice i)  { 
    invoice(ei) <- i;
    number(i) <- deliveryNoteNumber(ei);
    series(i) <- NULL;
    operation(i) <- eOperation(supplier(ei)) WHERE eOperation(supplier(ei));
    supplier(i) <- supplier(ei);
    supplierStock(i) <- defaultStock(supplier(ei));
    customer(i) <- customer(ei);
    customerStock(i) <- customerStock(ei);
    date(i) <- DATE(dateTime(ei));
    time(i) <- TIME(dateTime(ei));
    
    FOR eInvoice(EInvoiceDetail eid) == eInvoice(i) NEW id = UserInvoiceDetail DO {
        userInvoice(id) <- i;
        sku(id) <- sku(lineItemBuyerID(eid));
        quantity(id) <- quantityDespatched(eid);
        price(id) <- lineItemPrice(eid);
        VAT(id) <- valueCurrentVAT(country(defaultStock(supplier(ei))), valueVAT(eid));;
        valueVAT(id) <- NUMERIC[10,5](valueVAT(eid));  
        invoicePrice(id) <- round2(price(id) * (100 + valueVAT(id))/100);  
    }
}

importFromEInvoice 'Импорт из накладной EDI' (UserInvoice i)  { 
    IF isPosted(i) THEN {
        MESSAGE 'Вы пытаетесь импортировать в проведенный документ. Распроведите его.';
        RETURN;
    }
    
    filterDate() <- date(i);
    
    DIALOG selectEInvoice OBJECTS ei INPUT DO {
        IF ei THEN
            copyData(ei,i);
    }
}


EXTEND FORM userInvoice 
    PROPERTIES numberEInvoice(i) ON CHANGE changeEInvoice(i)
    PROPERTIES(i) importFromEInvoice, nameReceiver
;

DESIGN userInvoice {
    import {
        NEW importEDI {
            caption = 'Накладная EDI';
            flex = 1;
            type = CONTAINERH;
            MOVE PROPERTY(numberEInvoice(i));
            MOVE PROPERTY(nameReceiver(i));
            MOVE PROPERTY(importFromEInvoice(i));
        }
    }
}

skipNumberCheck(Invoice i) += IF eInvoice(i) AND i IS Invoice THEN TRUE;
 
@defineOption(createPurchaseInvoiceFromEInvoice, 'Автоматически создавать накладную (закупка) при создании накладной EDI', EDI);

WHEN SET(EInvoice ei IS EInvoice) AND createPurchaseInvoiceFromEInvoice() DO {
    NEW i = UserInvoice {
        copyData(ei,i);
    }        
}

creditNote = DATA CreditNote (ECreditNote);
creditNoteDetail = DATA CreditNoteDetail(ECreditNoteDetail);
eCreditNote = GROUP LAST ECreditNote ec IF NOT isCancel(ec) ORDER dateTime(ec), ec BY creditNote(ec);
numberCreditNote 'Номер акта приемки EDI' (ECreditNote c) = number(creditNote(c));
EXTEND FORM eCreditNotes
    PROPERTIES (c) READONLY numberCreditNote
;

CONSTRAINT DROPPED (CreditNote c IS CreditNote) AND exportedCustomer(eCreditNote(c)) 
    MESSAGE 'Запрещено удалять акт расхождения по которому был отправлен электронный акт приемки. Сначала необходимо отменить электронный акт приемки';

numberECreditNote 'Номер электронного акта приемки'(CreditNote c) = actDifNumber(eCreditNote(c));
isECreditNote 'Электронный акт приемки' (CreditNote c) = TRUE IF eCreditNote(c);
signAndSendCustomerCreditNoteEDI 'Подписать и отправить (покупатель)'(CreditNote c)  { 
    NEWSESSION {
        in(ECreditNote e) <- e = eCreditNote(c);
        signAndSendCustomerCreditNoteEDI();
        in(ECreditNote e) <- NULL;
    }
}

cancelSignAndSendCustomerCreditNoteEDII 'Отменить (покупатель)'(CreditNote c)  { 
    NEWSESSION {
        in(ECreditNote e) <- e = eCreditNote(c);
        exportedCustomer(ECreditNote e) <- NULL WHERE e = eCreditNote(c);
        isCancel(ECreditNote e) <- TRUE WHERE e = eCreditNote(c);
        signAndSendCustomerCreditNoteEDI();
        IF (GROUP SUM 1 IF exportedCustomer(ECreditNote e) AND in(e)) THEN APPLY;
    }
}

createECreditNote 'Создать электронный акт приемки' (CreditNote c)  { 
    IF NOT eCreditNote(c) THEN NEWSESSION {
        NEW ec = ECreditNote {
            creditNote(ec) <- c;
            number(ec) <- number(c);
            dateTime(ec) <- dateTime(c);
            actDifDateTime(ec) <- dateTime(c);
            deliveryNoteNumber(ec) <- GROUP MAX deliveryNoteNumber(eInvoice(Invoice i)) IF quantity(i, c);
            deliveryNoteDateTime(ec) <- GROUP MAX dateTime(eInvoice(Invoice i)) IF quantity(i, c);
            supplier(ec) <- supplier(c);
            customer(ec) <- customer(c);
            customerStock(ec) <- customerStock(c);
            contractId(ec) <- seriesNumberContractSku(c);
            contractDate(ec) <- dateFromContractSku(c);
            currency(ec) <- shortNameCurrency(c);
            
            FOR creditNote(CreditNoteDetail d) == c NEW ed = ECreditNoteDetail  DO {
                eCreditNote(ed) <- ec;
                creditNoteDetail(ed) <- d;
                lineItemNumber(ed) <- index(d);
                lineItemID(ed) <- id(barcode(sku(d))) IF length(id(barcode(sku(d)))) > 7;
                lineItemBuyerID(ed) <- id(sku(d));
                lineItemName(ed) <- STRING[500](nameSku(d));
                lineItemQuantityUOM(ed) <- OVERRIDE extraCodeUOM(UOM(sku(d))), 'PCE';
                quantityOrdered(ed) <- OVERRIDE quantity(invoiceDetail(d)), 0.0;
                quantityReceived(ed) <- OVERRIDE shipped(invoiceDetail(d)), 0.0;
                valueVAT(ed) <- NUMERIC[8,2](valueVAT(d));
                lineItemPrice(ed) <- price(d);
                amountOrdered(ed) <- OVERRIDE invoiceSum(invoiceDetail(d)), 0.0;
                amountReceived(ed) <- OVERRIDE invoiceSum(invoiceDetail(d)) (-) invoiceSum(d), 0.0;
                //amountReceived(ed) <- NUMERIC[18,4](Utils.round(quantityReceived(ed) * price(d), priceRound(invoiceDetail(d)))) (+)
                                      //round((NUMERIC[18,4](Utils.round(quantityReceived(ed) * price(d), priceRound(invoiceDetail(d)))) * calcValueVAT(invoiceDetail(d)) / 100), currency(invoiceDetail(d)));
            }
        }
        APPLY;
    }
}

EXTEND FORM creditNotes
        PROPERTIES READONLY PANEL numberECreditNote(c)
        PROPERTIES(c) createECreditNote SHOWIF (NOT eCreditNote(c)),// statusDescription SHOWIF eInvoice(i) PANEL, 
                      signAndSendCustomerCreditNoteEDI SHOWIF (eCreditNote(c) AND NOT exportedCustomer(eCreditNote(c))), 
                      cancelSignAndSendCustomerCreditNoteEDII SHOWIF (eCreditNote(c) AND exportedCustomer(eCreditNote(c)))
;

DESIGN creditNotes {
    documentDetail {
        NEW tabCreditNote AFTER printTab {
            caption = 'Печатные формы';
            type = TABBED;
            MOVE printTab {caption = 'Акт расхождений';};
            NEW eCreditNote {
                caption = 'Электронный акт приемки';
                NEW createCN {
                    type = CONTAINERH;
                    MOVE PROPERTY(numberECreditNote(c));
                    MOVE PROPERTY(createECreditNote(c));
                    MOVE PROPERTY(signAndSendCustomerCreditNoteEDI(c));
                    MOVE PROPERTY(cancelSignAndSendCustomerCreditNoteEDII(c));
                }
            }
        }
    }
}

numberECreditNote 'Номер электронного акта приемки'(Invoice i) = actDifNumber(eCreditNote(invoiceCreditNote(i)));

signAndSendCustomerCreditNoteEDI 'Подписать и отправить (покупатель)'(Invoice i)  { 
    signAndSendCustomerCreditNoteEDI(invoiceCreditNote(i));
}

cancelSignAndSendCustomerCreditNoteEDII 'Отменить (покупатель)'(Invoice i)  { 
    cancelSignAndSendCustomerCreditNoteEDII(invoiceCreditNote(i));
}
createECreditNote 'Создать электронный акт приемки' (Invoice i)  {
    createECreditNote(invoiceCreditNote(i));
}

EXTEND FORM invoices
        PROPERTIES READONLY PANEL numberECreditNote(i) SHOWIF invoiceCreditNote(i)
        PROPERTIES(i) createECreditNote SHOWIF (invoiceCreditNote(i) AND NOT eCreditNote(invoiceCreditNote(i))),// statusDescription SHOWIF eInvoice(i) PANEL, 
                      signAndSendCustomerCreditNoteEDI SHOWIF (invoiceCreditNote(i) AND eCreditNote(invoiceCreditNote(i)) AND NOT exportedCustomer(eCreditNote(invoiceCreditNote(i)))), 
                      cancelSignAndSendCustomerCreditNoteEDII SHOWIF (invoiceCreditNote(i) AND eCreditNote(invoiceCreditNote(i)) AND exportedCustomer(eCreditNote(invoiceCreditNote(i))))
;

DESIGN invoices {
    printTabScroll {
        NEW tabConsignment{
            type = TABBED;
            MOVE printTab {caption = 'Накладная';};
            NEW eCreditNote {
                caption = 'Электронный акт приемки';
                NEW createCN {
                    type = CONTAINERH;
                    MOVE PROPERTY(numberECreditNote(i));
                    MOVE PROPERTY(createECreditNote(i));
                    MOVE PROPERTY(signAndSendCustomerCreditNoteEDI(i));
                    MOVE PROPERTY(cancelSignAndSendCustomerCreditNoteEDII(i));
                }
            }
        }
    }    
}