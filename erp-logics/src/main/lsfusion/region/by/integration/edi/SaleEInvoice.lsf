MODULE SaleEInvoice;

REQUIRE EDI, SaleInvoice, ConsignmentBy, ConsignmentDashboard;

PRIORITY Sale;

NAMESPACE EDI;

eInvoice = ABSTRACT EInvoice (Invoice);
eInvoice = DATA EInvoice (UserInvoice);
eInvoice(UserInvoice i) += eInvoice(i);

invoice = GROUP AGGR Invoice i BY eInvoice(i);
numberInvoice 'Номер накладной (продажа)' (EInvoice i) = number(invoice(i));

numberEInvoice 'Номер'(Invoice i) = deliveryNoteNumber(eInvoice(i));


defaultNumeratorDeliveryNoteNumber = DATA Numerator ();
nameDefaultNumeratorDeliveryNote 'DeliveryNoteNumber Накладные (продажа)' = name(defaultNumeratorDeliveryNoteNumber()) IN defaultNumerator;

EXTEND FORM defaultNumerators
    PROPERTIES() nameSaleDefaultNumeratorDeliveryNote = nameDefaultNumeratorDeliveryNote
;

loadDefaultNumerators() + { 
    NEW n = Numerator {
        name(n) <- 'DeliveryNoteNumber Накладные (продажа)';
        series(n) <- '';
        minValue(n) <- 1L;
        maxValue(n) <- 9999999999L;
        stringLength(n) <- 10;

        defaultNumeratorDeliveryNoteNumber() <- n;
    }
}

generateSeriesNumber 'Сгенерировать номер'(EInvoice o)  { 
    deliveryNoteNumber(o) <- '001-' + GLN(supplier(o)) + '-' + curStringValue(defaultNumeratorDeliveryNoteNumber()); //ССС-GGGGGGGGGGGGG-NNNNNNNNNN
    incrementValueSession(defaultNumeratorDeliveryNoteNumber());
}

WHEN SET(EInvoice o IS EInvoice) 
     DO generateSeriesNumber(o) ;

createEInvoice 'Создать электронную накладную' (Invoice invoice)  { 
    IF NOT eInvoice(invoice) THEN NEWSESSION {
        NEW ei = EInvoice {
            eInvoice(invoice) <- ei;
            number(ei) <- number(invoice);
            dateTime(ei) <- dateTime(invoice);
            deliveryNoteDateTime(ei) <- dateTime(invoice);
            supplier(ei) <- supplier(invoice);
            supplierStock(ei) <- supplierStock(invoice);
            customer(ei) <- customer(invoice);
            customerStock(ei) <- customerStock(invoice);
            contactCustomerStock(ei) <- '';
            contractId(ei) <- seriesNumberContractSku(invoice);
            contractDate(ei) <- dateFromContractSku(invoice);
            currency(ei) <- shortNameCurrency(invoice);
            
            FOR invoice(InvoiceDetail detail) == invoice NEW ed = EInvoiceDetail  DO {
                eInvoice(ed) <- ei;
                lineItemID(ed) <- idBarcodeSku(detail);
                lineItemBuyerID(ed) <- idSku(detail);
                lineItemName(ed) <- nameSku(detail);
                quantityDespatched(ed) <- quantity(detail);
                valueVAT(ed) <- valueVAT(detail);
                lineItemPrice(ed) <- price(detail);
                lineItemAmountWithoutCharges(ed) <- sum(detail);
                lineItemAmount(ed) <- sum(detail);
                lineItemAmountCharges(ed) <- VATSum(detail);
                grossWeightValue(ed) <- OVERRIDE NUMERIC[12,6](sumGrossWeight(detail)), 0.0;
                lineItemQuantityUOM(ed) <- extraCodeUOM(UOM(sku(detail)));
                despatchUnitQuantityDespatched(ed) <- OVERRIDE NUMERIC[12,5](packQuantity(detail)), 0.0;
                taxRate(ed) <- numberVAT(detail);
            }
        }
        APPLY;
    }
}

EXTEND FORM eInvoices
    PROPERTIES (e) READONLY numberInvoice
;

signAndSendSupplierEDI 'Подписать и отправить'(Invoice i)  { 
    in(EInvoice e) <- e = eInvoice(i);
    signAndSendSupplierEDI();
    in(EInvoice e) <- NULL;
}

UNPfullNamePayer (Invoice i) = CONCAT ', ', UNPPayer(i), fullNamePayer(i);
UNPfullNameSupplier (Invoice i) = CONCAT ', ', UNPSupplier(i), fullNameSupplier[Consignment](i);
addressSupplierAddressSupplierStock (Invoice i) = CONCAT ', ', addressSupplier[Consignment](i), addressSupplierStock[Consignment](i);
infoCustomerBase (Invoice i) = CONCAT ', ', UNPCustomer(i), fullNameCustomer[Consignment](i), addressCustomer[Consignment](i), shipmentBase(i);
numberDate (Invoice i) = CONCAT ', ', number(i), toDateDDMMYY(date(i));

FORM consignmentEInvoice 'РЕЕСТР'
    OBJECTS i = Invoice SUBREPORT
    PROPERTIES(i) READONLY UNPfullNamePayer, addressPayer, UNPfullNameSupplier, addressSupplierAddressSupplierStock,
                           date, nameTruck, overWaybill, nameDriver, trailer, number, numberDate, infoCustomerBase,
                           grossWeightConsignmentDetail, overPackQuantityConsignmentDetail, sumVATConsignmentDetail,
                           sumInvoiceConsignmentDetail, forwarder, overGoodsAccepted, numberEInvoice
;

FORM attachmentEInvoice 'Приложение'
    OBJECTS i = Invoice SUBREPORT
    PROPERTIES(i) READONLY number, date
    
    OBJECTS d = InvoiceDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, quantity, price, sum, valueVAT, VATSum, invoiceSum,
                           packQuantity, sumGrossWeight, idSku
    FILTERS invoice(d) == i
;

printConsignmentEInvoiceAttachment 'Реестр ТТН с приложением' (Invoice i)  { 
    PRINT consignmentEInvoice OBJECTS i = i;
    PRINT attachmentEInvoice OBJECTS i = i;
} IMAGE 'print.png';

printConsignmentEInvoice 'Реестр ТТН' (Invoice i)  { 
    PRINT consignmentEInvoice OBJECTS i = i;
} IMAGE 'print.png';

printConsignmentEAttachment 'Приложение' (Invoice i)  { 
    PRINT consignmentEInvoice OBJECTS i = i;
} IMAGE 'print.png';

printConsignmentEAttachmentXLSX 'Приложение (xlsx)' (Invoice i)  { 
    PRINT consignmentEInvoice OBJECTS i = i XLSX;
} IMAGE 'print.png';

include 'Вкл.' = DATA LOCAL BOOLEAN (Invoice);
countInclude() = GROUP SUM 1 IF include(Invoice i);
maxInclude() = GROUP MAX Invoice i IF include(i);

UNPfullNamePayer () = CONCAT ', ', UNPPayer(maxInclude()), fullNamePayer(maxInclude());
addressPayer () = addressPayer(maxInclude());
UNPfullNameSupplier () = CONCAT ', ', UNPSupplier(maxInclude()), fullNameSupplier[Consignment](maxInclude());
addressSupplier () = addressSupplier[Consignment](maxInclude());
date () = date(maxInclude());
nameTruck () = nameTruck(maxInclude());
overWaybill () = overWaybill(maxInclude());
nameDriver () = nameDriver(maxInclude());
forwarder () = forwarder(maxInclude());
infoCustomer (Invoice i) = CONCAT ', ', UNPCustomer(i), fullNameCustomer[Consignment](i), addressCustomer[Consignment](i);


FORM consignmentEInvoices 'РЕЕСТР'
    PROPERTIES() UNPfullNamePayer, addressPayer, UNPfullNameSupplier, addressSupplier, date, nameTruck, overWaybill, nameDriver, forwarder
    OBJECTS i = Invoice SUBREPORT
    PROPERTIES(i) READONLY numberDate, infoCustomer, overGoodsAccepted
    FILTERS include(i)
;

printConsignmentEInvoicesXLSX 'Реестр ТТН (xlsx) (несколько)' ()  { 
    PRINT consignmentEInvoices XLSX;
    FOR include(Invoice i) DO {
        PRINT attachmentEInvoice OBJECTS i = i XLSX;
    }
} IMAGE 'print.png';

editAttributesEInvoice 'Заполнить атрибуты накладной' (Invoice i)  { 
	NEWSESSION {   
	    SHOW eInvoice OBJECTS e = eInvoice(i) DOCKED; 
	}
} IMAGE 'edit.png';

EXTEND FORM consignmentDashboard
    PROPERTIES READONLY PANEL numberEInvoice(i)
    PROPERTIES(i) createEInvoice SHOWIF (NOT eInvoice[Invoice](i)), signAndSendSupplierEDI SHOWIF eInvoice[Invoice](i)
    PROPERTIES(i) SHOWIF eInvoice[Invoice](i) editAttributesEInvoice, printConsignmentEInvoiceAttachment,  printConsignmentEInvoice, 
                  printConsignmentEAttachment, printConsignmentEAttachmentXLSX
    //PROPERTIES() printConsignmentEInvoicesXLSX SHOWIF countInclude()
;

DESIGN consignmentDashboard {
    tabContainer {
        NEW eInvoice {
            caption = 'Электронная накладная';
            NEW createEI {
                type = CONTAINERH;
                MOVE PROPERTY(numberEInvoice(i));
                MOVE PROPERTY(createEInvoice(i));
                MOVE PROPERTY(editAttributesEInvoice(i));
                MOVE PROPERTY(signAndSendSupplierEDI(i));
            }
            NEW printEI {
                type = CONTAINERH;
                MOVE PROPERTY (printConsignmentEInvoiceAttachment(i));
                MOVE PROPERTY (printConsignmentEInvoice(i));
                MOVE PROPERTY (printConsignmentEAttachment(i));
            }
            NEW exportEI {
                type = CONTAINERH;
                MOVE PROPERTY (printConsignmentEAttachmentXLSX(i));
            }
        }
    }
}