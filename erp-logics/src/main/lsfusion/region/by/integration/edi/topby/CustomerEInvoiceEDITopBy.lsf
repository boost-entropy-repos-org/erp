MODULE CustomerEInvoiceEDITopBy;

REQUIRE CustomerEInvoiceEDI, EInvoiceEDITopBy;

NAMESPACE EDI;

hostEDSServiceCustomerTopBy (EInvoice i) = OVERRIDE hostEDSServiceTopBy(customerStock(i)), hostEDSServiceTopBy(customer(i));
portEDSServiceCustomerTopBy (EInvoice i) = OVERRIDE portEDSServiceTopBy(customerStock(i)), portEDSServiceTopBy(customer(i));

blrwblDocumentNumber = DATA LOCAL NESTED STRING[28]();
blrwblDeliveryNoteNumber = DATA LOCAL NESTED STRING[28]();
blrwblDateTime = DATA LOCAL NESTED DATETIME();
blrwblDeliveryNoteDate = DATA LOCAL NESTED DATE();
blrwblFunctionCode = DATA LOCAL NESTED STRING[3]();
blrwblContractID = DATA LOCAL NESTED STRING[70]();
blrwblContractDate = DATA LOCAL NESTED DATE();
blrwblWaybillID = DATA LOCAL NESTED STRING[70]();
GROUP blrwblShipper EXTID 'Shipper' : deliveryNote;
blrwblSupplierGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblReceiver EXTID 'Receiver' : deliveryNote;
blrwblCustomerGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblFreightPayer EXTID 'FreightPayer' : deliveryNote;
blrwblFreightPayerGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblShipFrom EXTID 'ShipFrom' : deliveryNote;
blrwblSupplierStockGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblShipTo EXTID 'ShipTo' : deliveryNote;
blrwblCustomerStockGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblCarrier EXTID 'Carrier' : deliveryNote;
blrwblTransportContact = DATA LOCAL NESTED STRING[150]();
blrwblTransportID = DATA LOCAL NESTED STRING[35]();
blrwblTrailerID = DATA LOCAL NESTED STRING[35]();
GROUP despatchAdviceLogisticUnitLineItemDeliveryNote EXTID 'DespatchAdviceLogisticUnitLineItem' :deliveryNote;
blrwblLineItemNumber = DATA LOCAL NESTED INTEGER(INTEGER);
blrwblLineItemID = DATA LOCAL NESTED STRING[14](INTEGER);
blrwblLineItemBuyerID = DATA LOCAL NESTED STRING[35](INTEGER);
blrwblLineItemSupplierID = DATA LOCAL NESTED STRING[35](INTEGER);
blrwblLineItemName = DATA LOCAL NESTED STRING[500](INTEGER);
blrwblGrossWeightValue = DATA LOCAL NESTED NUMERIC[12,6](INTEGER);
blrwblQuantityDespatched = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
blrwblLineItemQuantityUOM = DATA LOCAL NESTED STRING[3](INTEGER);
blrwblDespatchUnitQuantityDespatched = DATA LOCAL NESTED NUMERIC[12,5](INTEGER);
blrwblExpiryDate = DATA LOCAL NESTED DATE(INTEGER);
blrwblValueVAT = DATA LOCAL NESTED NUMERIC[6,4](INTEGER);
blrwblAdditionalInformation = DATA LOCAL NESTED STRING[512](INTEGER);
blrwblLineItemPrice = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
blrwblLineItemAmountWithoutCharges = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrwblLineItemAmount = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrwblLineItemAmountCharges = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
lineItemLineItemExtraField = DATA LOCAL NESTED INTEGER(INTEGER);
blrwblFieldName = DATA LOCAL NESTED STRING[255](INTEGER);
blrwblFieldValue = DATA LOCAL NESTED STRING[2560](INTEGER);

FORM blrwbl
    PROPERTIES IN deliveryNote blrwblDocumentNumber() EXTID 'DocumentID',
                               blrwblDeliveryNoteNumber() EXTID 'DeliveryNoteID',
                               blrwblDeliveryNoteDate() EXTID 'DeliveryNoteDate',
                               blrwblDateTime() EXTID 'CreationDateTime',
                               blrwblFunctionCode() EXTID 'FunctionCode',
                               blrwblContractID() EXTID 'ContractID',
                               blrwblContractDate() EXTID 'ContractDate',
                               blrwblWaybillID() EXTID 'WaybillID',
                               blrwblTransportID() EXTID 'TransportID',
                               blrwblTrailerID() EXTID 'TrailerID'
    PROPERTIES IN blrwblShipper blrwblSupplierGLN() EXTID 'GLN'
    PROPERTIES IN blrwblReceiver blrwblCustomerGLN() EXTID 'GLN'
    PROPERTIES IN blrwblFreightPayer blrwblFreightPayerGLN() EXTID 'GLN'
    PROPERTIES IN blrwblShipFrom blrwblSupplierStockGLN() EXTID 'GLN'
    PROPERTIES IN blrwblShipTo blrwblCustomerStockGLN() EXTID 'GLN'
    PROPERTIES IN blrwblCarrier blrwblTransportContact() EXTID 'TransportContact'
    
    OBJECTS i = INTEGER EXTID 'LineItem' IN despatchAdviceLogisticUnitLineItemDeliveryNote
    PROPERTIES(i) blrwblLineItemNumber EXTID 'LineItemNumber',
                  blrwblLineItemID EXTID 'LineItemID',
                  blrwblLineItemBuyerID EXTID 'LineItemBuyerID',
                  blrwblLineItemSupplierID EXTID 'LineItemSupplierID',
                  blrwblLineItemName EXTID 'LineItemName',
                  blrwblGrossWeightValue EXTID 'GrossWeightValue',
                  blrwblQuantityDespatched EXTID 'QuantityDespatched',
                  blrwblLineItemQuantityUOM EXTID 'LineItemQuantityUOM',
                  blrwblDespatchUnitQuantityDespatched EXTID 'DespatchUnitQuantityDespatched',
                  blrwblExpiryDate EXTID 'BestBeforeDate',
                  blrwblValueVAT EXTID 'TaxRate',
                  blrwblAdditionalInformation EXTID 'AdditionalInformation',
                  blrwblLineItemPrice EXTID 'LineItemPrice',
                  blrwblLineItemAmountWithoutCharges EXTID 'LineItemAmountWithoutCharges',
                  blrwblLineItemAmount EXTID 'LineItemAmount',
                  blrwblLineItemAmountCharges EXTID 'LineItemAmountCharges'
    OBJECTS f = INTEGER EXTID 'LineItemExtraField'
    PROPERTIES(f) blrwblFieldName EXTID 'FieldName',
                  blrwblFieldValue EXTID 'FieldValue'
    FILTERS lineItemLineItemExtraField(f) == i
;

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrwbl' AND invoices THEN {
        TRY {
            IMPORT blrwbl XML FROM data(i);
            NEWSESSION NESTED LOCAL {
                LOCAL isCancel = BOOLEAN();
                isCancel() <- TRUE IF blrwblFunctionCode() == '1';
                IF eInvoiceDeliveryNoteNumberIsCancel(blrwblDeliveryNoteNumber(), IF isCancel() THEN 1 ELSE 0) THEN {
                    importedCustomer(EInvoice ei) <- TRUE WHERE ei == eInvoiceDeliveryNoteNumberIsCancel(blrwblDeliveryNoteNumber(), IF isCancel() THEN 1 ELSE 0);
                } ELSE NEW ei = EInvoice {
                    importedCustomer(ei) <- TRUE;
                    id(ei) <- blrwblSupplierGLN() + '/' + blrwblDeliveryNoteNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                    number(ei) <- blrwblDocumentNumber();
                    dateTime(ei) <- blrwblDateTime();
                    deliveryNoteDateTime(ei) <- DATETIME (blrwblDeliveryNoteDate());
                    deliveryNoteNumber(ei) <- blrwblDeliveryNoteNumber();
                    contractId(ei) <- blrwblContractID();
                    contractDate(ei) <- blrwblContractDate();
                    waybillId(ei) <- blrwblWaybillID();
                    isCancel(ei) <- isCancel();
                    supplier(ei) <- legalEntityGLN(blrwblSupplierGLN());
                    supplierStock(ei) <- stockGLN(blrwblSupplierStockGLN());
                    customer(ei) <- legalEntityGLN(blrwblCustomerGLN());
                    customerStock(ei) <- companyStockGLN(blrwblCustomerStockGLN());
                    freightPayer(ei) <- legalEntityGLN(blrwblFreightPayerGLN());
                    transportContact(ei) <- blrwblTransportContact();
                    transportID(ei) <- blrwblTransportID();
                    trailerID(ei) <- blrwblTrailerID();
                    XMLPath(ei) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    FOR blrwblLineItemID(INTEGER l) OR blrwblLineItemBuyerID(l) OR blrwblLineItemSupplierID(l) DO NEW ed = EInvoiceDetail {
                        eInvoice(ed) <- ei;
                        id(ed) <- id(ei) + '/' + blrwblLineItemNumber(l);
                        lineItemID(ed) <- blrwblLineItemID(l);
                        lineItemBuyerID(ed) <- blrwblLineItemBuyerID(l);
                        lineItemSupplierID(ed) <- blrwblLineItemSupplierID(l);
                        lineItemName(ed) <- blrwblLineItemName(l);
                        grossWeightValue(ed) <- blrwblGrossWeightValue(l);
                        quantityDespatched(ed) <- blrwblQuantityDespatched(l);
                        lineItemQuantityUOM(ed) <- blrwblLineItemQuantityUOM(l);
                        despatchUnitQuantityDespatched(ed) <- blrwblDespatchUnitQuantityDespatched(l);
                        expiryDate(ed) <- blrwblExpiryDate(l);
                        valueVAT(ed) <- NUMERIC[4,2](blrwblValueVAT(l));
                        additionalInformation(ed) <- blrwblAdditionalInformation(l);
                        lineItemPrice(ed) <- blrwblLineItemPrice(l);
                        lineItemAmountWithoutCharges(ed) <- blrwblLineItemAmountWithoutCharges(l);
                        lineItemAmount(ed) <- blrwblLineItemAmount(l);
                        lineItemAmountCharges(ed) <- blrwblLineItemAmountCharges(l);
                        lineItemExtraFields(ed) <- GROUP CONCAT (CONCAT ': ', blrwblFieldName(INTEGER f), blrwblFieldValue(f)) IF lineItemLineItemExtraField(f) == l, ', ' ORDER blrwblFieldName(f);
                    }
                }
                APPLY NESTED LOCAL;
                IF canceled() THEN {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        sendRequestEDI(host, port, login, password, url, xml());
                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                    logToFile('edi', provider + ' Import EInvoice ' + id(i) + ' failed: ' + applyMessage());
                    eInvoicesFailed() <- eInvoicesFailed() + 1;
                } ELSE {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(host, port, login, password, url, xml());
                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                    }
                    logToFile('edi', provider + ' Import EInvoice ' + id(i) + ' succeeded');
                    eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                }  
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(host, port, login, password, url, xml());
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте накладной ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            eInvoicesFailed() <- eInvoicesFailed() + 1;
        }
    }
}

exportBlrwbrDateTime = DATA LOCAL NESTED DATETIME();

GROUP report EXTID 'Report';

FORM exportBlrwbr FORMEXTID 'BLRWBR'
    PROPERTIES ATTR ='0.1' EXTID 'version'
    OBJECTS ei = EInvoice PANEL
    
    OBJECTS eih = EInvoice EXTID 'MessageHeader'
    FILTERS eih == ei
    PROPERTIES DRAW eih messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrwbrDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRWBR' EXTID 'MessageType',
                        glnCustomer(eih) EXTID 'MsgSenderID',
                        glnSupplier(eih) EXTID 'MsgReceiverID'
    
    OBJECTS ein = EInvoice EXTID 'DeliveryNote'
    FILTERS ein == ei
    PROPERTIES DRAW ein deliveryNoteType = '700' EXTID 'DeliveryNoteType',
                        documentID = resultMilliseconds() EXTID 'DocumentID',
                        creationDateTime = toChar(exportBlrwbrDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = '11' EXTID 'FunctionCode',
                        referenceDocument = (OVERRIDE blrwbl(ein), number(ein)) EXTID 'ID' IN referenceDocument,
                        date = toChar((OVERRIDE blrwblDate(ein), dateTime(ein)),'YYYYMMDDHH24MISS') EXTID 'Date' IN referenceDocument,
                        deliveryNoteNumber(ein) EXTID 'DeliveryNoteID',
                        deliveryNoteDateTime = toChar(deliveryNoteDateTime(ein),'YYYYMMDD') EXTID 'DeliveryNoteDate'
    PROPERTIES DRAW ein IN report overReportId(ein) EXTID 'ReportID',
                                  overReportDate = toChar(overReportDate(ein),'YYYYMMDD') EXTID 'ReportDate',
                                  overReportName(ein) EXTID 'ReportName'
    PROPERTIES DRAW ein IN shipper glnSupplier(ein) EXTID 'GLN',
                                   nameSupplier(ein) EXTID 'Name',
                                   addressSupplier(ein) EXTID 'Address',
                                   unpSupplier(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN receiver glnCustomer(ein) EXTID 'GLN',
                                    nameCustomer(ein) EXTID 'Name',
                                    addressCustomer(ein) EXTID 'Address',
                                    unpCustomer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN shipTo glnCustomerStock(ein) EXTID 'GLN',
                                  addressCustomerStock(ein) EXTID 'Address',
                                  contactCustomerStock(ein) EXTID 'Contact'
    PROPERTIES DRAW ein sealIDReceiver(ein) EXTID 'SealIDReceiver'
;

signAndSendCustomerEInvoice (EInvoice ei, STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF loginTopBy(customer(ei)) AND passwordTopBy(customer(ei)) AND hostTopBy(customer(ei)) AND portTopBy(customer(ei)) THEN {
                IF hostEDSServiceCustomerTopBy(ei) AND portEDSServiceCustomerTopBy(ei) THEN {
                    LOCAL blrapnSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- 'BLRWBL';
                    blrapnReferenceDocumentId() <- OVERRIDE blrwbl(ei), number(ei);
                    blrapnReferenceDocumentDate() <- OVERRIDE blrwblDate(ei), dateTime(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO blrapnSubXML;
                    IF outputDirTopBy() THEN {
                        TRY{ mkdir(outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE blrapnSubXML() TO outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    LOCAL blrwbrSubXML = FILE();
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';
                        
                        IF error() == '' THEN {
                            exportBlrwbrDateTime() <- sumSeconds(blrapnDateTime(),1);
                            toMilliseconds(exportBlrwbrDateTime());
                            EXPORT exportBlrwbr OBJECTS ei = ei XML TO blrwbrSubXML;
                            IF outputDirTopBy() THEN {
                                TRY{ mkdir(outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE blrwbrSubXML() TO outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                        } ELSE {
                            logToFile('edi', provider + ' SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    }
                    
                    LOCAL blrapnEncoded = TEXT();
                    LOCAL blrwbrEncoded = TEXT();
                    IF aliasEDSServiceCustomer(ei) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(ei)) THEN {
                        LOCAL blrapn = FILE();
                        fileToString(blrapnSubXML());
                        EXPORT getEDS OBJECTS alias = aliasEDSServiceCustomer(ei),password = (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(ei)) XML TO blrapn;
                        LOCAL innerXML = TEXT();
                        innerXML() <- resultString();
                        fileToString(blrapn());
                        stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                        sendRequestEDI(hostEDSServiceCustomerTopBy(ei), portEDSServiceCustomerTopBy(ei), 'eds', 'eds', ('http://' + hostEDSServiceCustomerTopBy(ei) + ':' + portEDSServiceCustomerTopBy(ei) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                        IMPORT getEDSResponse FROM sendRequestEDIResponse();
                        IF faultstring() THEN {
                            logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' error: BLRAPN ' + number(ei) + ' не подписан. Ошибка: ' + faultstring());
                            MESSAGE provider + ' Накладная не выгружена: BLRAPN ' + number(ei) + ' не подписан. Ошибка: ' + faultstring() NOWAIT;
                        }
                        ELSE IF waybill() THEN {
                            encodeBase64(waybill());
                            blrapnEncoded() <- encodedBase64();
                        }
                        
                        IF blrwbrSubXML() THEN {
                            LOCAL blrwbr = FILE();
                            fileToString(blrwbrSubXML());
                            EXPORT getEDS OBJECTS alias = aliasEDSServiceCustomer(ei),password = (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(ei)) XML TO blrwbr;
                            innerXML() <- resultString();
                            fileToString(blrwbr());
                            stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                            sendRequestEDI(hostEDSServiceCustomerTopBy(ei), portEDSServiceCustomerTopBy(ei), 'eds', 'eds', ('http://' + hostEDSServiceCustomerTopBy(ei) + ':' + portEDSServiceCustomerTopBy(ei) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                            IMPORT getEDSResponse FROM sendRequestEDIResponse();
                            IF faultstring() THEN {
                                logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' error: BLRWBR ' + number(ei) + ' не подписан. Ошибка: ' + faultstring());
                                MESSAGE provider + ' Накладная не выгружена: BLRWBR ' + number(ei) + ' не подписан. Ошибка: ' + faultstring() NOWAIT;
                            }
                            ELSE IF waybill() THEN {
                                encodeBase64(waybill());
                                blrwbrEncoded() <- encodedBase64();
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' error: Alias or Password for EDSService not found');
                        MESSAGE provider + ' Накладная ' + number(ei) + ' не выгружена: Alias или Пароль EDSService не задан' NOWAIT;
                    }
                    
                    IF blrapnEncoded() AND (blrwbrEncoded() OR isCancel(ei)) THEN {
                        NEWSESSION NESTED LOCAL {
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- loginTopBy(customer(ei));
                            envelopePassword() <- passwordTopBy(customer(ei));
                            envelopeFilename() <- CONCAT '', 'invoice', number(ei);
                            envelopeDocumentDate() <- blrapnDateTime();
                            envelopeDocumentNumber() <- number(ei);
                            envelopeSender() <- glnCustomer(ei);
                            envelopeReceiver() <- glnCustomer(ei);
                            envelopeDeliveryPoint() <- glnCustomerStock(ei);
                            envelopeDocumentType() <- 'BLRAPN';
                            envelopeContent() <- blrapnEncoded();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(hostTopBy(customer(ei)), portTopBy(customer(ei)), loginTopBy(customer(ei)), passwordTopBy(customer(ei)), ('http://' + hostTopBy(customer(ei)) +':' + portTopBy(customer(ei)) + '/DmcService'), xml());
                            logToFile('edi', provider + ' SendEInvoice ' + number(ei) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ': ' + requestError());
                                MESSAGE provider + ' Накладная ' + number(ei) + ' не выгружена: ' + requestError() NOWAIT;
                            } ELSE {
                                toMilliseconds(blrapnDateTime());
                                blrapn(ei) <- STRING[14](resultMilliseconds());
                                
                                IF blrwbrEncoded() THEN {
                                    envelopeLogin() <- loginTopBy(customer(ei));
                                    envelopePassword() <- passwordTopBy(customer(ei));
                                    envelopeFilename() <- CONCAT '', 'invoice', number(ei);
                                    envelopeDocumentDate() <- exportBlrwbrDateTime();
                                    envelopeDocumentNumber() <- number(ei);
                                    envelopeSender() <- glnCustomer(ei);
                                    envelopeReceiver() <- glnCustomer(ei);
                                    envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                    envelopeDocumentType() <- 'BLRWBR';
                                    envelopeContent() <- blrwbrEncoded();
                                    EXPORT envelope XML TO xml;
                                    sendRequestEDI(hostTopBy(customer(ei)), portTopBy(customer(ei)), loginTopBy(customer(ei)), passwordTopBy(customer(ei)), ('http://' + hostTopBy(customer(ei)) +':' + portTopBy(customer(ei)) + '/DmcService'), xml());
                                    logToFile('edi', provider + ' SendEInvoice ' + number(ei) +' request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ': ' + requestError());
                                        MESSAGE provider + ' Накладная ' + number(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' request succeeded');
                                        MESSAGE provider + ' Накладная ' + number(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                        exportedCustomer(ei) <- TRUE;
                                        toMilliseconds(exportBlrwbrDateTime());
                                        blrwbr(ei) <- STRING[14](resultMilliseconds());
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' request succeeded');
                                    MESSAGE provider + ' Накладная ' + number(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                }
                                APPLY NESTED LOCAL;
                            }
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendCustomerTopBy 'Подписать и отправить (покупатель)'  INTERNAL  'lsfusion.erp.region.by.integration.edi.topby.SendEInvoiceCustomerTopByAction' (EInvoice);
signAndSendCustomer(EInvoice e) + {  IF EDIProvider(supplier(e)) == EDIProvider.topBy THEN IF exportedCustomer(e) THEN MESSAGE 'Накладная (покупатель) уже отправлена'; ELSE {signAndSendCustomerEInvoice(e,'TopBy');}}

hostEDSServiceCustomerTopBy (ECreditNote c) = OVERRIDE hostEDSServiceTopBy(customerStock(c)), hostEDSServiceTopBy(customer(c));
portEDSServiceCustomerTopBy (ECreditNote c) = OVERRIDE portEDSServiceTopBy(customerStock(c)), portEDSServiceTopBy(customer(c));

//overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
//    IF lower(documentType(i)) == 'blradf' AND invoices THEN {
//        TRY {
//            IMPORT blradf XML FROM data(i);
//            IF blradfMsgReceiverID() == blradfCustomerGLN() THEN {
//                NEWSESSION NESTED LOCAL {
//                    LOCAL isCancel = BOOLEAN();
//                    isCancel() <- TRUE IF blradfFunctionCode() == '1';
//                    IF eCreditNoteActDifNumberIsCancel(blradfActDifNumber(), IF isCancel() THEN 1 ELSE 0) THEN {
//                        importedCustomer(ECreditNote ec) <- TRUE WHERE ec == eCreditNoteActDifNumberIsCancel(blradfActDifNumber(), IF isCancel() THEN 1 ELSE 0);
//                    } ELSE NEW ec = ECreditNote {
//                        importedCustomer(ec) <- TRUE;
//                        id(ec) <- blradfSupplierGLN() + '/' + blradfActDifNumber() + (IF isCancel() THEN '_cancel' ELSE '');
//                        number(ec) <- blradfDocumentNumber();
//                        dateTime(ec) <- blradfDateTime();
//                        actDifDateTime(ec) <- blradfDateTime();
//                        actDifNumber(ec) <- blradfActDifNumber();
//                        deliveryNoteDateTime(ec) <- blradfDateTime();
//                        deliveryNoteNumber(ec) <- blradfDeliveryNoteNumber();
//                        isCancel(ec) <- isCancel();
//                        supplier(ec) <- legalEntityGLN(blradfSupplierGLN());
//                        customer(ec) <- legalEntityGLN(blradfCustomerGLN());
//                        customerStock(ec) <- companyStockGLN(blradfCustomerStockGLN());
//                        XMLPath(ec) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
//                        FOR blradfLineItemID(INTEGER l) OR blradfLineItemBuyerID(l) OR blradfLineItemSupplierID(l) DO NEW ed = ECreditNoteDetail {
//                            id(ed) <- id(ec) + '/' + blradfLineItemNumber(l);
//                            lineItemID(ed) <- blradfLineItemID(l);
//                            lineItemBuyerID(ed) <- blradfLineItemBuyerID(l);
//                            lineItemSupplierID(ed) <- blradfLineItemSupplierID(l);
//                            lineItemName(ed) <- blradfLineItemName(l);
//                            quantityOrdered(ed) <- blradfQuantityOrdered(l);
//                            quantityReceived(ed) <- blradfQuantityReceived(l);
//                            valueVAT(ed) <- blradfValueVAT(l);
//                            lineItemPrice(ed) <- blradfLineItemPrice(l);
//                            amountOrdered(ed) <- blradfAmountOrdered(l);
//                            amountReceived(ed) <- blradfAmountReceived(l);
//                        }
//                    }
//                    APPLY NESTED LOCAL;
//                    IF canceled() THEN {
//                        IF NOT disableConfirmation AND sendReplies THEN {
//                            LOCAL contentSubXML = FILE();
//                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
//                            fileToString(contentSubXML());
//                            encodeBase64(resultString());
//                            LOCAL xml = XMLFILE();
//                            envelopeLogin() <- login;
//                            envelopePassword() <- password;
//                            envelopeDocumentDate() <- currentDateTime();
//                            envelopeDocumentNumber() <- id(i);
//                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
//                            envelopeContent() <- encodedBase64();
//                            EXPORT envelope XML TO xml;
//                            sendRequestEDI(host, port, login, password, url, xml());
//                            logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
//                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
//                            IF requestError() THEN {
//                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
//                                logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
//                                MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
//                            } ELSE {
//                                logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
//                            }
//                        }
//                        logToFile('edi', provider + ' Import ECreditNote ' + id(i) + ' failed: ' + applyMessage());
//                        eInvoicesFailed() <- eInvoicesFailed() + 1;
//                    } ELSE {
//                        IF NOT disableConfirmation THEN {
//                            LOCAL xml = XMLFILE();
//                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
//                            sendRequestEDI(host, port, login, password, url, xml());
//                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
//                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
//                            IF requestError() THEN {
//                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
//                                MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
//                            } ELSE {
//                                IF archiveDir THEN {
//                                    TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
//                                    WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
//                                }
//                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
//                            }
//                        }
//                        logToFile('edi', provider + ' Import CreditNote ' + id(i) + ' succeeded');
//                        blradfCount() <- blradfCount() + 1;
//                    }  
//                }
//            }
//        } CATCH {
//            IF NOT disableConfirmation AND sendReplies THEN {
//                LOCAL contentSubXML = FILE();
//                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse CreditNote ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
//                fileToString(contentSubXML());
//                encodeBase64(resultString());
//                LOCAL xml = XMLFILE();
//                envelopeLogin() <- login;
//                envelopePassword() <- password;
//                envelopeDocumentDate() <- currentDateTime();
//                envelopeDocumentNumber() <- id(i);
//                envelopeDocumentType() <- 'SYSTEMMESSAGE';
//                envelopeContent() <- encodedBase64();
//                EXPORT envelope XML TO xml;
//                sendRequestEDI(host, port, login, password, url, xml());
//                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
//                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
//                IF requestError() THEN {
//                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
//                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
//                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
//                } ELSE {
//                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
//                }
//            }
//            logToFile('edi', CONCAT '\n', provider + ' Parse CreditNote ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
//            MESSAGE  'Ошибка при импорте акта приемки ' + id(i) +'. Обратитесь к администратору' NOWAIT;
//        }
//    }
//}

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blradf' AND invoices AND NOT disableConfirmation THEN {
        TRY {
            IMPORT blradf XML FROM data(i);
            IF blradfMsgReceiverID() == blradfCustomerGLN() THEN {
                FOR ECreditNote ec == eCreditNoteActDifNumber(blradfActDifNumber()) DO {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ec);
                    blrapnMsgReceiver() <- glnSupplier(ec);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ec);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ec));
                    blrapnReferenceDocumentType() <- 'BLRADF';
                    blrapnReferenceDocumentId() <- blradfDocumentNumber();
                    blrapnReferenceDocumentDate() <- blradfDateTime();
                    blrapnShipper() <- glnSupplier(ec);
                    blrapnReceiver() <- glnCustomer(ec);
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF archiveDir THEN {
                        TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    IF aliasEDSServiceCustomer(ec) AND passwordEDSServiceCustomer(ec) THEN {
                        IF hostEDSServiceCustomerTopBy(ec) AND portEDSServiceCustomerTopBy(ec) THEN {
                            LOCAL xml = FILE();
                            fileToString(contentSubXML());
                            EXPORT getEDS OBJECTS alias = aliasEDSServiceCustomer(ec),password = passwordEDSServiceCustomer(ec) XML TO xml;
                            LOCAL innerXML = TEXT();
                            innerXML() <- resultString();
                            fileToString(xml());
                            stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                            sendRequestEDI(hostEDSServiceCustomerTopBy(ec), portEDSServiceCustomerTopBy(ec), 'eds', 'eds', ('http://' + hostEDSServiceCustomerTopBy(ec) + ':' + portEDSServiceCustomerTopBy(ec) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                            IMPORT getEDSResponse FROM sendRequestEDIResponse();
                            IF faultstring() THEN {
                                logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: BLRAPN ' + number(ec) + ' не подписан. Ошибка: ' + faultstring());
                            }
                            ELSE IF waybill() THEN {
                                encodeBase64(waybill());
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'creditnote', number(ec);
                                envelopeDocumentDate() <- blrapnDateTime();
                                envelopeDocumentNumber() <- number(ec);
                                envelopeSender() <- glnCustomer(ec);
                                envelopeReceiver() <- glnCustomer(ec);
                                envelopeDeliveryPoint() <- glnCustomerStock(ec);
                                envelopeDocumentType() <- 'BLRAPN';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(host, port, login, password, url, ixml());
                                logToFile('edi', provider + ' SendECreditNote ' + number(ec) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' SendECreditNote ' + number(ec) + ': ' + requestError());
                                    MESSAGE provider + ' Акт приемки ' + number(ec) + ' не выгружен: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' SendECreditNote ' + number(ec) + ' request succeeded');
                                    IF NOT disableConfirmation THEN {
                                        LOCAL cxml = XMLFILE();
                                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                        sendRequestEDI(host, port, login, password, url, cxml());
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                        } ELSE {
                                            IF archiveDir THEN {
                                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                            }
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        }
                                    }
                                    blradfCount() <- blradfCount() + 1;
                                    NEWSESSION NESTED LOCAL {
                                        IF isCancel(ec) THEN {
                                            importedCustomerCancel(ec) <- TRUE;
                                        } ELSE {
                                            importedCustomer(ec) <- TRUE;
                                        }
                                        APPLY NESTED LOCAL;
                                    }
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: не заданы параметры EDSService');
                        }
                    } ELSE {
                        logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: Alias or Password for EDSService not found');
                    }
                }
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' Parse Message ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
        }
    }
}

signAndSendCustomerECreditNote (ECreditNote c, STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF loginTopBy(customer(c)) AND passwordTopBy(customer(c)) AND hostTopBy(customer(c)) AND portTopBy(customer(c)) THEN {
                IF hostEDSServiceCustomerTopBy(c) AND portEDSServiceCustomerTopBy(c) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(glnSupplier(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'GLN поставщика\'\n';
                    IF NOT length(addressSupplier(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'Адрес поставщика\'\n';
                    IF NOT length(glnCustomer(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'GLN покупателя\'\n';
                    IF NOT length(addressCustomer(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'Адрес покупателя\'\n';
                    IF NOT length(glnCustomerStock(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'GLN склада покупателя\'\n';
                    IF NOT length(addressCustomerStock(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'Адрес склада покупателя\'\n';
                    IF NOT length(currency(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'3-х буквенный код валюты, в которой указаны ценовые значения\'\n';
                    FOR eCreditNote(ECreditNoteDetail d) == c DO {
                        IF NOT length(lineItemQuantityUOM(d)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Международный 3-х буквенный код единицы измерения из справочника ОКРБ 008-95 Единицы измерения и счета\'\n';
                    }
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        blradfDateTime() <- currentDateTimeMillis();
                        blradfMsgSenderID() <- glnCustomer(c);
                        blradfMsgReceiverID() <- glnSupplier(c);
                        toMilliseconds(blradfDateTime());
                        EXPORT exportBlradf OBJECTS ec = c XML TO contentSubXML;
                        IF outputDirTopBy() THEN {
                            TRY{ mkdir(outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blradf-' + toChar(blradfDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        }
                        IF aliasEDSServiceCustomer(c) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(c)) THEN {
                            LOCAL xml = FILE();
                            fileToString(contentSubXML());
                            EXPORT getEDS OBJECTS alias = aliasEDSServiceCustomer(c),password = (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(c)) XML TO xml;
                            LOCAL innerXML = TEXT();
                            innerXML() <- resultString();
                            fileToString(xml());
                            stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                            sendRequestEDI(hostEDSServiceCustomerTopBy(c), portEDSServiceCustomerTopBy(c), 'eds', 'eds', ('http://' + hostEDSServiceCustomerTopBy(c) + ':' + portEDSServiceCustomerTopBy(c) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                            IMPORT getEDSResponse FROM sendRequestEDIResponse();
                            IF faultstring() THEN {
                                logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' error: BLRADF ' + number(c) + ' не подписан. Ошибка: ' + faultstring());
                                MESSAGE provider + ' Акт приемки не выгружен: BLRADF ' + number(c) + ' не подписан. Ошибка: ' + faultstring() NOWAIT;
                            }
                            ELSE IF waybill() THEN {
                                encodeBase64(waybill());
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- loginTopBy(customer(c));
                                envelopePassword() <- passwordTopBy(customer(c));
                                envelopeFilename() <- CONCAT '', 'creditnote', number(c);
                                envelopeDocumentDate() <- blradfDateTime();
                                envelopeDocumentNumber() <- number(c);
                                envelopeSender() <- glnCustomer(c);
                                envelopeReceiver() <- glnCustomer(c);
                                envelopeDeliveryPoint() <- glnCustomerStock(c);
                                envelopeDocumentType() <- 'BLRADF';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(hostTopBy(customer(c)), portTopBy(customer(c)), loginTopBy(customer(c)), passwordTopBy(customer(c)), ('http://' + hostTopBy(customer(c)) +':' + portTopBy(customer(c)) + '/DmcService'), ixml());
                                logToFile('edi', provider + ' SendECreditNote ' + number(c) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' SendECreditNote ' + number(c) + ': ' + requestError());
                                    MESSAGE provider + ' Акт приемки ' + number(c) + ' не выгружен: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' request succeeded');
                                    MESSAGE provider + ' Акт приемки ' + number(c) + (IF isCancel(c) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    //NEWSESSION NESTED LOCAL {
                                        exportedCustomer(c) <- TRUE;
                                        blradf(c) <- STRING[14](resultMilliseconds());
                                        blradfDate(c) <- blradfDateTime();
                                        APPLY NESTED LOCAL;
                                    //}
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' error: Alias or Password for EDSService not found');
                            MESSAGE provider + ' Акт приемки ' + number(c) + ' не выгружен: Alias или Пароль EDSService не задан' NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendECreditNote: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' Акт приемки не выгружен: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' SendECreditNote: не заданы параметры EDSService');
                    MESSAGE provider + ' Акт приемки не выгружен: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendECreditNote: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Акт приемки не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Акт приемки не выгружен. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendECreditNote disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendECreditNote disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendCustomer(ECreditNote c) + { IF EDIProvider(supplier(c)) == EDIProvider.topBy THEN IF exportedCustomer(c) THEN MESSAGE 'Акт приемки (покупатель) уже отправлен'; ELSE signAndSendCustomerECreditNote(c,'TopBy'); }