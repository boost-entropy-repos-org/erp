MODULE EDIIntegration;

REQUIRE EDI, SaleOrder;

//-------------------------- Send Request ------------------------------//
//host, port, login, password, url, xml request
sendRequestEDIResponse = DATA LOCAL FILE();
sendRequestEDIStatus = DATA LOCAL INTEGER();
sendRequestEDI 'Отправить'  INTERNAL  'lsfusion.erp.region.by.integration.edi.SendRequestEDIActionProperty' (TEXT, INTEGER, TEXT, TEXT, TEXT, XMLFILE);

printToImportLog INTERNAL  'lsfusion.erp.region.by.integration.edi.PrintToImportLogActionProperty' (TEXT);

//----------------------- importRequestResult ---------------------------//

succesful = DATA LOCAL TEXT(INTEGER);
message = DATA LOCAL TEXT(INTEGER);
errorCode = DATA LOCAL INTEGER(INTEGER);

requestError = DATA LOCAL NESTED TEXT();
importRequestResult(FILE xml, INTEGER status, TEXT root) {
    IF status == 200 THEN {
        IMPORT XML ROOT root FROM xml TO succesful='Succesful', message='Message', errorCode='ErrorCode';
        IF succesful(0) == 'true' THEN {
            requestError() <- NULL;
        } ELSE {
            IF errorCode(0) == 1300 THEN {
                requestError()<- 'Ошибка авторизации';
            } ELSE {
                requestError() <- CONCAT ' ', 'Неизвестная ошибка', message(0);
            }   
        }
    } ELSE {
        requestError() <- CONCAT ' ', 'Неизвестная ошибка: статус', status;
    }
}


//----------------------- Import Sale.UserOrder (orders) ---------------------------//

documentNumber = DATA LOCAL NESTED VARSTRING[28]();
documentDate = DATA LOCAL DATE();
buyerGLN = DATA LOCAL VARSTRING[100]();
destinationGLN = DATA LOCAL VARSTRING[100]();
supplierGLN = DATA LOCAL VARSTRING[100]();

GTIN = DATA LOCAL VARSTRING[100](INTEGER);
quantityOrdered = DATA LOCAL NUMERIC[16,5](INTEGER);
priceElement = DATA LOCAL NUMERIC[16,4](INTEGER);
priceNoNDS = DATA LOCAL VARSTRING[100](INTEGER);
priceNDS = DATA LOCAL VARSTRING[100](INTEGER);
tax = DATA LOCAL NUMERIC[10,5](INTEGER);

FORM importSaleUserOrderEDI
    PROPERTIES() documentNumber, documentDate, buyerGLN, destinationGLN, supplierGLN
    
    OBJECTS line = INTEGER
    PROPERTIES(line) GTIN, quantityOrdered, priceElement, priceNoNDS, priceNDS, tax 
;

importSaleUserOrderEDIError = DATA LOCAL NESTED TEXT();
importSaleUserOrderEDI(FILE xml) {
    NEWSESSION {
    IMPORT importSaleUserOrderEDI XML FROM xml;
        NEW order = Sale.UserOrder {
            number(order) <- documentNumber();
            date(order) <- documentDate();
            supplier(order) <- legalEntityGLN(buyerGLN());
            supplierStock(order) <- stockGLN(destinationGLN());
            customer(order) <- legalEntityGLN(supplierGLN());
            operation(order) <- Sale.operation('intra');
            
            FOR GTIN(INTEGER line) DO {
                NEW detail = Sale.UserOrderDetail {      
                    order(detail) <- order;     
                    sku(detail) <- skuGTIN(GTIN(line));
                    quantity(detail) <- quantityOrdered(line);
                    price(detail) <- priceElement(line);
                    valueVAT(detail) <- tax(line);
                }
            }
            APPLY;
            IF canceled() THEN importSaleUserOrderEDIError() <- applyMessage();
        }
    }
}

//----------------------- Export Sale.UserOrder (ordrsp, desadv) ---------------------------//

GROUP body EXTID 'soapenv:Body';
GROUP sendDocument EXTID 'top:SendDocument' : body;

GLNSupplier (Sale.UserOrder order) = GLN(supplier(order));
GLNSupplierStock (Sale.UserOrder order) = GLN(supplierStock(order));
GLNCustomer (Sale.UserOrder order) = GLN(customer(order));
GLNCustomerStock (Sale.UserOrder order) = GLN(customerStock(order));
GTIN(Sale.UserOrderDetail detail) = GTIN(sku(detail));

documentType = DATA LOCAL VARSTRING[6](Sale.UserOrder);
filename (Sale.UserOrder order) = CONCAT '', 'order', number(order);
orderDate(Sale.UserOrder order) = '2019-02-04T09:30:00Z' IF order IS Sale.UserOrder; //TODO: изменить на нужное свойство
    
FORM envelope
    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'      
    OBJECTS login = TEXT, password = TEXT, innerXML = TEXT
    OBJECTS order = Sale.UserOrder
    PROPERTIES DRAW order IN sendDocument VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
    PROPERTIES(order) IN sendDocument filename EXTID 'top:filename', orderDate EXTID 'top:documentDate', number EXTID 'top:documentNumber',
                      GLNSupplier EXTID 'top:senderCode', GLNCustomer EXTID 'top:receiverCode', GLNCustomerStock EXTID 'top:deliveryPointCode',
                      documentType EXTID 'top:documentType'
    PROPERTIES IN sendDocument VALUE(innerXML) EXTID 'top:content'  
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'                                                  
;

sendSaleUserOrderRequest(Sale.UserOrder order, TEXT host, INTEGER port, TEXT login, TEXT password, TEXT url, TEXT innerXML, VARSTRING[6] documentType) {
    LOCAL exportSaleUserOrderRequest = XMLFILE();
    documentType(order) <- documentType;
    encodeBase64(innerXML);
    EXPORT envelope OBJECTS order = order, login=login, password=password, innerXML=encodedBase64() XML TO exportSaleUserOrderRequest; //export request
    sendRequestEDI(host, port, login, password, url, exportSaleUserOrderRequest()); //send request
    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse'); //check response
    open(exportSaleUserOrderRequest());
}

//свойства для ordrsp и desadv
idBuyer = DATA LOCAL VARSTRING[15] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство
idSupplier = DATA LOCAL VARSTRING[15] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство
measurement(Sale.UserOrderDetail detail) = 'PCE' IF detail IS Sale.UserOrderDetail;//TODO: изменить на нужное свойство

//свойства для ordrsp
function(Sale.UserOrder order) = '4' IF order IS Sale.UserOrder;
lineQuantity(order) = GROUP SUM 1 BY order(Sale.UserOrderDetail detail);
sumNoNDS = DATA LOCAL NUMERIC[16,5] (Sale.UserOrder); //TODO: изменить на нужное свойство
sumNDS = DATA LOCAL NUMERIC[16,5] (Sale.UserOrder); //TODO: изменить на нужное свойство
action(Sale.UserOrderDetail detail) = '5' IF detail IS Sale.UserOrderDetail;
quantityOrdered (Sale.UserOrderDetail detail) = quantity(detail);//TODO: изменить на нужное свойство
quantityAccepted (Sale.UserOrderDetail detail) = quantity(detail);//TODO: изменить на нужное свойство

//свойства для desadv
deliveryNoteNumber = DATA LOCAL TEXT (Sale.UserOrder);//TODO: изменить на нужное свойство
deliveryNoteDate = DATA LOCAL DATE (Sale.UserOrder);//TODO: изменить на нужное свойство
functionCode(Sale.UserOrder order) = '9' IF order IS Sale.UserOrder;
contractNumber = DATA LOCAL TEXT (Sale.UserOrder);//TODO: изменить на нужное свойство
contractDate = DATA LOCAL DATE (Sale.UserOrder);//TODO: изменить на нужное свойство
quantityDespatch (Sale.UserOrderDetail detail) = quantity(detail);//TODO: изменить на нужное свойство
quantityDespatchTransport (Sale.UserOrderDetail detail) = quantity(detail);//TODO: изменить на нужное свойство
vat =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство
lineItemPrice =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство
lineItemAmountWithoutCharges =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство
lineItemAmount =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство
lineItemAmountCharges =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrderDetail);//TODO: изменить на нужное свойство 
totalLineItem =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrder);//TODO: изменить на нужное свойство 
totalLineItemQuantity =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrder);//TODO: изменить на нужное свойство 
totalAmountWithoutCharges =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrder);//TODO: изменить на нужное свойство 
totalAmountCharges =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrder);//TODO: изменить на нужное свойство 
totalAmount =  DATA LOCAL NUMERIC[16,5] (Sale.UserOrder);//TODO: изменить на нужное свойство 

exported 'Экспортирован (поставщик)' = DATA BOOLEAN (Sale.UserOrder);
sendSaleOrderSupplier 'Отправить (поставщик)'  ABSTRACT LIST (Sale.UserOrder);
EXTEND FORM Sale.userOrder PROPERTIES(o) exported;
EXTEND FORM Sale.orders PROPERTIES(o) exported READONLY, sendSaleOrderSupplier TOOLBAR;

//ordrsp form
FORM orders
    OBJECTS order = Sale.UserOrder
    PROPERTIES(order) IN private documentNumber=number, documentDate=date, function=function, buyerGLN=GLNCustomer,
                                 buyerName=nameCustomer, destinationGLN=GLNCustomerStock, destinationName=nameCustomerStock,
                                 supplierGLN=GLNSupplier, supplierName=nameSupplier, orderNumber=number, orderDate=orderDate,
                                 deliveryDateTimeFirst=orderDate
    OBJECTS line = Sale.UserOrderDetail 
    PROPERTIES(line) GTIN=GTIN, IDBuyer=idBuyer, idSupplier=idSupplier, action=action, fullName=nameSku, quantityOrdered=quantityOrdered,
                     quantityAccepted=quantityAccepted, measurement=measurement, pricElement=price
    PROPERTIES(order) IN private lineQuantity=lineQuantity, sumNoNDS=sumNoNDS, sumNDS=sumNDS                    
    FILTERS order(line) = order
;

sendOrdrspXML(Sale.UserOrder order, TEXT outputDir, TEXT host, INTEGER port, TEXT login, TEXT password, TEXT url) {
    LOCAL ordrspXML = FILE();
    EXPORT orders OBJECTS order = order XML TO ordrspXML;
    IF outputDir THEN WRITE ordrspXML() TO outputDir + '/' + number(order) + 'ordrsp';
    fileToString(ordrspXML());
    printToImportLog(CONCAT ' ', 'Sending order', number(order), '(ordrsp)');
    sendSaleUserOrderRequest(order, host, port, login, password, url, resultString(), 'ORDERS');
}

//desadv form
FORM DESADV
    OBJECTS order = Sale.UserOrder
    PROPERTIES(order) IN private documentNumber=number, documentDate=date, deliveryNoteNumber=deliveryNoteNumber, deliveryNoteDate=deliveryNoteDate,
                      function=functionCode, buyerGLN=GLNCustomer, buyerName=nameCustomer, destinationGLN=GLNCustomerStock, destinationName=nameCustomerStock,
                      supplierGLN=GLNSupplier, supplierName=nameSupplier, stGLN=GLNSupplierStock, stName=nameSupplierStock, contractNumber=contractNumber, 
                      contractDate=contractDate
    OBJECTS line = Sale.UserOrderDetail 
    PROPERTIES(line) IN private GTIN=GTIN, IDBuyer=idBuyer, idSupplier=idSupplier, fullName=nameSku, quantityDespatch=quantityDespatch,
                     measurement=measurement, quantityDespatchTransport=quantityDespatchTransport, vat=vat,lineItemPrice=lineItemPrice, 
                     lineItemAmountWithoutCharges=lineItemAmountWithoutCharges, lineItemAmount=lineItemAmount, lineItemAmountCharges=lineItemAmountCharges             
    
    PROPERTIES(order) IN private totalLineItem=totalLineItem, totalLineItemQuantity=totalLineItemQuantity, totalAmountWithoutCharges=totalAmountWithoutCharges,
                                 totalAmountCharges=totalAmountCharges, totalAmount=totalAmount
                                 
    FILTERS order(line) = order
;

sendDesadvXML(Sale.UserOrder order, TEXT outputDir, TEXT host, INTEGER port, TEXT login, TEXT password, TEXT url) {
    LOCAL desadvXML = FILE();
    EXPORT DESADV OBJECTS order = order XML TO desadvXML;
    IF outputDir THEN WRITE desadvXML() TO outputDir + '/' + number(order) + 'desadv';
    fileToString(desadvXML());
    printToImportLog(CONCAT ' ', 'Sending order', number(order), '(desadv)');
    sendSaleUserOrderRequest(order, host, port, login, password, url, resultString(), 'DESADV');
}

//----------------------- Sale.UserOrder ---------------------------//
sendSaleOrder(Sale.UserOrder order, TEXT outputDir, TEXT host, INTEGER port, TEXT login, TEXT password, TEXT url) {
    sendOrdrspXML(order, outputDir, host, port, login, password, url);
    IF NOT requestError() THEN {
        sendDesadvXML(order, outputDir, host, port, login, password, url);
    }
    IF NOT requestError() THEN {
        NEWSESSION {
            exported(order) <- TRUE;
            apply();
        }
        printToImportLog(CONCAT ' ', 'Заказ', number(order), 'выгружен');
        MESSAGE CONCAT ' ', 'Заказ', number(order), 'выгружен';
    } ELSE {
        printToImportLog(CONCAT ' ', 'Заказ', number(order), 'не выгружен:', requestError());
        MESSAGE CONCAT ' ', 'Заказ', number(order), 'не выгружен:', requestError();
    }
}