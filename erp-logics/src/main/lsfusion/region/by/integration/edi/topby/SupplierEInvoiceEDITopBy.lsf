MODULE SupplierEInvoiceEDITopBy;

REQUIRE SupplierEInvoiceEDI, EInvoiceEDITopBy;

NAMESPACE EDI;

hostEDSServiceSupplierTopBy (EInvoice i) = OVERRIDE hostEDSServiceTopBy(supplierStock(i)), hostEDSServiceTopBy(supplier(i));
portEDSServiceSupplierTopBy (EInvoice i) = OVERRIDE portEDSServiceTopBy(supplierStock(i)), portEDSServiceTopBy(supplier(i));

blrwbrDocumentNumber = DATA LOCAL NESTED STRING[28]();
blrwbrDocumentId = DATA LOCAL NESTED STRING[35]();
blrwbrDateTime = DATA LOCAL NESTED DATETIME();
blrwbrDeliveryNoteNumber = DATA LOCAL NESTED STRING[28]();
blrwbrFunctionCode = DATA LOCAL NESTED STRING[3]();

FORM blrwbr
    PROPERTIES IN messageHeader blrwbrDocumentNumber() EXTID 'MessageID'
    PROPERTIES IN deliveryNote blrwbrDocumentId() EXTID 'DocumentID',
                               blrwbrDeliveryNoteNumber() EXTID 'DeliveryNoteID',
                               blrwbrDateTime() EXTID 'CreationDateTime',
                               blrwbrFunctionCode() EXTID 'FunctionCode'
;

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrwbr' AND invoices AND receiveSupplierMessages AND NOT disableConfirmation THEN {
        TRY {
            IMPORT blrwbr XML FROM data(i);
            FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrwbrDeliveryNoteNumber()) DO {
                LOCAL contentSubXML = FILE();
                blrapnDateTime() <- currentDateTimeMillis();
                blrapnMsgSender() <- glnSupplier(ei);
                blrapnMsgReceiver() <- glnCustomer(ei);
                blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                blrapnReferenceDocumentType() <- 'BLRWBR';
                blrapnReferenceDocumentId() <- blrwbrDocumentId();
                blrapnReferenceDocumentDate() <- blrwbrDateTime();
                blrapnShipper() <- glnSupplier(ei);
                blrapnReceiver() <- glnCustomer(ei);
                toMilliseconds(blrapnDateTime());
                EXPORT exportBlrapn XML TO contentSubXML;
                IF archiveDir THEN {
                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                }
                IF aliasEDSServiceSupplier(ei) AND passwordEDSServiceSupplier(ei) THEN {
                    IF hostEDSServiceSupplierTopBy(ei) AND portEDSServiceSupplierTopBy(ei) THEN {
                        LOCAL xml = FILE();
                        fileToString(contentSubXML());
                        EXPORT getEDS OBJECTS alias = aliasEDSServiceSupplier(ei),password = passwordEDSServiceSupplier(ei) XML TO xml;
                        LOCAL innerXML = TEXT();
                        innerXML() <- resultString();
                        fileToString(xml());
                        stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                        sendRequestEDI(hostEDSServiceSupplierTopBy(ei), portEDSServiceSupplierTopBy(ei), 'eds', 'eds', ('http://' + hostEDSServiceSupplierTopBy(ei) + ':' + portEDSServiceSupplierTopBy(ei) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                        IMPORT getEDSResponse FROM sendRequestEDIResponse();
                        IF faultstring() THEN {
                            logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: BLRAPN ' + number(ei) + ' не подписан. Ошибка: ' + faultstring());
                        }
                        ELSE IF waybill() THEN {
                            encodeBase64(waybill());
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'invoice', number(ei);
                            envelopeDocumentDate() <- blrapnDateTime();
                            envelopeDocumentNumber() <- number(ei);
                            envelopeSender() <- glnSupplier(ei);
                            envelopeReceiver() <- glnCustomer(ei);
                            envelopeDeliveryPoint() <- glnCustomerStock(ei);
                            envelopeDocumentType() <- 'BLRAPN';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(host, port, login, password, url, ixml());
                            logToFile('edi', provider + ' SendEInvoice ' + number(ei) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ': ' + requestError());
                                MESSAGE provider + ' Накладная ' + number(ei) + ' не выгружена: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' request succeeded');
                                IF NOT disableConfirmation THEN {
                                    LOCAL cxml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                    sendRequestEDI(host, port, login, password, url, cxml());
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        IF archiveDir THEN {
                                            TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                        }
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                blrwbrCount() <- blrwbrCount() + 1;
                                NEWSESSION NESTED LOCAL {
                                    IF isCancel(ei) THEN {
                                        importedSupplierCancel(ei) <- TRUE;
                                    } ELSE {
                                        importedSupplier(ei) <- TRUE;
                                    }
                                    APPLY NESTED LOCAL;
                                }
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: не заданы параметры EDSService');
                    }
                } ELSE {
                    logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: Alias or Password for EDSService not found');
                }
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' Parse Message ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
        }
    }
}

exportBlrwblDateTime = DATA LOCAL NESTED DATETIME();

GROUP freightPayer EXTID 'FreightPayer';
GROUP shipFrom EXTID 'ShipFrom';
GROUP carrier EXTID 'Carrier';
GROUP extraField EXTID 'ExtraField';
GROUP despatchAdviceLogisticUnitLineItem EXTID 'DespatchAdviceLogisticUnitLineItem';

FORM exportBlrwbl FORMEXTID 'BLRWBL'
    PROPERTIES ATTR ='0.1' EXTID 'version'
    OBJECTS ei = EInvoice PANEL
    
    OBJECTS eih = EInvoice EXTID 'MessageHeader'
    FILTERS eih == ei
    PROPERTIES DRAW eih messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrwblDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRWBL' EXTID 'MessageType',
                        glnSupplier(eih) EXTID 'MsgSenderID',
                        glnCustomer(eih) EXTID 'MsgReceiverID'
    
    OBJECTS ein = EInvoice EXTID 'DeliveryNote'
    FILTERS ein == ei
    PROPERTIES DRAW ein deliveryNoteType = '700' EXTID 'DeliveryNoteType',
                        documentID = resultMilliseconds() EXTID 'DocumentID',
                        creationDateTime = toChar(exportBlrwblDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = (IF isCancel(ein) THEN '1' ELSE '9') EXTID 'FunctionCode',
                        deliveryNoteNumber(ein) EXTID 'DeliveryNoteID',
                        deliveryNoteDateTime = toChar(deliveryNoteDateTime(ein),'YYYYMMDD') EXTID 'DeliveryNoteDate',
                        contractId(ein) EXTID 'ContractID',
                        contractDate = toChar(contractDate(ein),'YYYYMMDD') EXTID 'ContractDate',
                        waybillId(ein) EXTID 'WaybillID'
    PROPERTIES DRAW ein IN shipper glnSupplier(ein) EXTID 'GLN',
                                   nameSupplier(ein) EXTID 'Name',
                                   addressSupplier(ein) EXTID 'Address',
                                   unpSupplier(ein) EXTID 'VATRegistrationNumber',
                                   contactSupplier(ein) EXTID 'Contact'
    PROPERTIES DRAW ein IN receiver glnCustomer(ein) EXTID 'GLN',
                                    nameCustomer(ein) EXTID 'Name',
                                    addressCustomer(ein) EXTID 'Address',
                                    unpCustomer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN freightPayer glnFreightPayer(ein) EXTID 'GLN',
                                        nameFreightPayer(ein) EXTID 'Name',
                                        addressFreightPayer(ein) EXTID 'Address',
                                        unpFreightPayer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN shipFrom glnSupplierStock(ein) EXTID 'GLN',
                                    addressSupplierStock(ein) EXTID 'Address',
                                    contactSupplierStock(ein) EXTID 'Contact'
    PROPERTIES DRAW ein IN shipTo glnCustomerStock(ein) EXTID 'GLN',
                                  addressCustomerStock(ein) EXTID 'Address'
    PROPERTIES DRAW ein IN carrier transportContact(ein) EXTID 'TransportContact',
                                   deliveryContact(ein) EXTID 'DeliveryContact',
                                   proxyID(ein) EXTID 'ProxyID',
                                   proxyDate = toChar(proxyDate(ein),'YYYYMMDD') EXTID 'ProxyDate',
                                   partyIssuingProxyName(ein) EXTID 'PartyIssuingProxyName'
    PROPERTIES DRAW ein quantityTrip(ein) EXTID 'QuantityTrip',
                        transportOwnerName(ein) EXTID 'TransportOwnerName',
                        transportID(ein) EXTID 'TransportID',
                        trailerID(ein) EXTID 'TrailerID',
                        sealIDReceiver(ein) EXTID 'SealID',
                        currency(ein) EXTID 'Currency'
    PROPERTIES DRAW ein IN extraField fieldName = IF isReturn(ein) THEN 'Признак возвратной накладной' EXTID 'FieldName',
                                      fieldCode = IF isReturn(ein) THEN 'PW0013' EXTID 'FieldCode',
                                      fieldValue = IF isReturn(ein) THEN '1' EXTID 'FieldValue'
    
    OBJECTS d = EInvoiceDetail EXTID 'LineItem' IN despatchAdviceLogisticUnitLineItem
    FILTERS eInvoice(d) == ein
    PROPERTIES DRAW d lineItemNumber(d) EXTID 'LineItemNumber',
                      lineItemID(d) EXTID 'LineItemID',
                      lineItemBuyerID(d) EXTID 'LineItemBuyerID',
                      lineItemSupplierID(d) EXTID 'LineItemSupplierID',
                      lineItemName(d) EXTID 'LineItemName',
                      grossWeightValue(d) EXTID 'GrossWeightValue',
                      quantityDespatched(d) EXTID 'QuantityDespatched',
                      lineItemQuantityUOM(d) EXTID 'LineItemQuantityUOM',
                      despatchUnitQuantityDespatched(d) EXTID 'DespatchUnitQuantityDespatched',
                      expiryDate = toChar(expiryDate(d),'YYYYMMDD') EXTID 'BestBeforeDate',
                      valueVAT(d) EXTID 'TaxRate',
                      additionalInformation(d) EXTID 'AdditionalInformation',
                      lineItemAmountWithoutCharges(d) EXTID 'LineItemAmountWithoutCharges',
                      lineItemAmountCharges(d) EXTID 'LineItemAmountCharges',
                      lineItemAmount(d) EXTID 'LineItemAmount',
                      lineItemPrice(d) EXTID 'LineItemPrice',
                      lineItemAmountExcise(d) EXTID 'LineItemAmountExcise'
    
    OBJECTS eint = EInvoice EXTID 'Total'
    FILTERS eint == ei
    PROPERTIES DRAW ein totalAmountWithoutCharges(eint) EXTID 'TotalAmountWithoutCharges',
                        totalAmountCharges(eint) EXTID 'TotalAmountCharges',
                        totalAmount(eint) EXTID 'TotalAmount',
                        totalLineItem(eint) EXTID 'TotalLineItem',
                        totalLineItemQuantity(eint) EXTID 'TotalLineItemQuantity',
                        totalGrossWeight(eint) EXTID 'TotalGrossWeight',
                        totalDespatchUnitQuantity(eint) EXTID 'TotalDespatchUnitQuantity',
                        totalAmountExcise(eint) EXTID 'TotalAmountExcise'
;

signAndSendSupplierEInvoice (EInvoice ei, STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF loginTopBy(supplier(ei)) AND passwordTopBy(supplier(ei)) AND hostTopBy(supplier(ei)) AND portTopBy(supplier(ei)) THEN {
                IF hostEDSServiceSupplierTopBy(ei) AND portEDSServiceSupplierTopBy(ei) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(contractId(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер Договора (или другого документа, служащего основанием отпуска)\'\n';
//                    IF NOT contractDate(ei) THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Дата договора в формате ГГГГММДД (или другого документа, служащего основанием отпуска)\'\n';
                    IF NOT length(waybillId(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер путевого листа\'\n';
                    IF NOT length(contactSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Отпуск разрешил (должность и ФИО)\'\n';
                    IF NOT length(glnSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'GLN пункта погрузки\'\n';
                    IF NOT length(addressSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта погрузки\'\n';
                    IF NOT length(contactSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'ФИО и должность лица, которое отвечает за передачу груза со стороны грузоотправителя\'\n';
                    IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                    IF NOT length(transportContact(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'ФИО водителя\'\n';
                    IF NOT length(deliveryContact(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Товар к перевозке принял (должность и ФИО)\'\n';
                    IF NOT length(transportID(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Марка и гос. номер автомобиля\'\n';
                    IF NOT length(currency(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'3-х буквенный код валюты, в которой указаны ценовые значения\'\n';
                    IF NOT totalGrossWeight(ei) THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Всего масса груза в тоннах\'\n';
                    FOR eInvoice(EInvoiceDetail d) == ei DO {
                        IF NOT grossWeightValue(d) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Масса груза\'\n';
                        IF NOT length(lineItemQuantityUOM(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Международный 3-х буквенный код единицы измерения из справочника ОКРБ 008-95 Единицы измерения и счета\'\n';
                        IF NOT despatchUnitQuantityDespatched(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Количество в грузовых местах\'\n';
                        IF NOT lineItemAmountWithoutCharges(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Стоимость товарной позиции без НДС\'\n';
                    }
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlrwblDateTime() <- currentDateTimeMillis();
                        toMilliseconds(exportBlrwblDateTime());
                        EXPORT exportBlrwbl OBJECTS ei = ei XML TO contentSubXML;
                        IF outputDirTopBy() THEN {
                            TRY{ mkdir(outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbl-' + toChar(exportBlrwblDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS'); 
                        }
                        IF aliasEDSServiceSupplier(ei) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(ei)) THEN {
                            LOCAL xml = FILE();
                            fileToString(contentSubXML());
                            EXPORT getEDS OBJECTS alias = aliasEDSServiceSupplier(ei),password = (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(ei)) XML TO xml;
                            LOCAL innerXML = TEXT();
                            innerXML() <- resultString();
                            fileToString(xml());
                            stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                            sendRequestEDI(hostEDSServiceSupplierTopBy(ei), portEDSServiceSupplierTopBy(ei), 'eds', 'eds', ('http://' + hostEDSServiceSupplierTopBy(ei) + ':' + portEDSServiceSupplierTopBy(ei) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                            IMPORT getEDSResponse FROM sendRequestEDIResponse();
                            IF faultstring() THEN {
                                logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' error: BLRWBL ' + number(ei) + ' не подписан. Ошибка: ' + faultstring());
                                MESSAGE provider + ' Накладная не выгружена: BLRWBL ' + number(ei) + ' не подписан. Ошибка: ' + faultstring() NOWAIT;
                            }
                            ELSE IF waybill() THEN {
                                encodeBase64(waybill());
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- loginTopBy(supplier(ei));
                                envelopePassword() <- passwordTopBy(supplier(ei));
                                envelopeFilename() <- CONCAT '', 'invoice', number(ei);
                                envelopeDocumentDate() <- exportBlrwblDateTime();
                                envelopeDocumentNumber() <- number(ei);
                                envelopeSender() <- glnSupplier(ei);
                                envelopeReceiver() <- glnCustomer(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRWBL';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(hostTopBy(supplier(ei)), portTopBy(supplier(ei)), loginTopBy(supplier(ei)), passwordTopBy(supplier(ei)), ('http://' + hostTopBy(supplier(ei)) +':' + portTopBy(supplier(ei)) + '/DmcService'), ixml());
                                logToFile('edi', provider + ' SendEInvoice ' + number(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ': ' + requestError());
                                    MESSAGE provider + ' Накладная ' + number(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' request succeeded');
                                    MESSAGE provider + ' Накладная ' + number(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    //NEWSESSION NESTED LOCAL {
                                        exportedSupplier(ei) <- TRUE;
                                        blrwbl(ei) <- STRING[14](resultMilliseconds());
                                        blrwblDate(ei) <- exportBlrwblDateTime();
                                        APPLY NESTED LOCAL;
                                    //}
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' SendEInvoice ' + number(ei) + ' error: Alias or Password for EDSService not found');
                            MESSAGE provider + ' Накладная ' + number(ei) + ' не выгружена: Alias или Пароль EDSService не задан' NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendEInvoice: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendSupplier(EInvoice e) + {  IF EDIProvider(supplier(e)) == EDIProvider.topBy THEN IF exportedSupplier(e) THEN MESSAGE 'Накладная (поставщик) уже отправлена'; ELSE {signAndSendSupplierEInvoice(e,'TopBy');}}

hostEDSServiceSupplierTopBy (ECreditNote c) = hostEDSServiceTopBy(supplier(c));
portEDSServiceSupplierTopBy (ECreditNote c) = portEDSServiceTopBy(supplier(c));

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blradf' AND invoices AND receiveSupplierMessages THEN {
        TRY {
            IMPORT blradf XML FROM data(i);
            IF blradfMsgReceiverID() == blradfSupplierGLN() THEN {
                NEWSESSION NESTED LOCAL {
                    LOCAL isCancel = BOOLEAN();
                    isCancel() <- TRUE IF blradfFunctionCode() == '1';
                    IF eCreditNoteActDifNumber(blradfActDifNumber()) THEN {
                        importedSupplier(ECreditNote ec) <- TRUE WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                        securityID(ECreditNote ec) <- blradfSecurityID() WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                        certificateID(ECreditNote ec) <- blradfCertificateID() WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                        securityPartyID(ECreditNote ec) <- blradfSecurityPartyID() WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                        creationSignatureDate(ECreditNote ec) <- blradfCreationSignatureDate() WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                        creationSignatureTime(ECreditNote ec) <- blradfCreationSignatureTime() WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                        signatureValue(ECreditNote ec) <- blradfSignatureValue() WHERE ec == eCreditNoteActDifNumber(blradfActDifNumber());
                    } ELSE NEW ec = ECreditNote {
                        importedSupplier(ec) <- TRUE;
                        id(ec) <- blradfCustomerGLN() + '/' + blradfActDifNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                        number(ec) <- blradfDocumentNumber();
                        dateTime(ec) <- blradfDateTime();
                        actDifDateTime(ec) <- blradfDateTime();
                        actDifNumber(ec) <- blradfActDifNumber();
                        deliveryNoteDateTime(ec) <- blradfDateTime();
                        deliveryNoteNumber(ec) <- blradfDeliveryNoteNumber();
                        isCancel(ec) <- isCancel();
                        supplier(ec) <- legalEntityGLN(blradfSupplierGLN());
                        customer(ec) <- legalEntityGLN(blradfCustomerGLN());
                        customerStock(ec) <- companyStockGLN(blradfCustomerStockGLN());
                        securityID(ec) <- blradfSecurityID();
                        certificateID(ec) <- blradfCertificateID();
                        securityPartyID(ec) <- blradfSecurityPartyID();
                        creationSignatureDate(ec) <- blradfCreationSignatureDate();
                        creationSignatureTime(ec) <- blradfCreationSignatureTime();
                        signatureValue(ec) <- blradfSignatureValue();
                        XMLPath(ec) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR blradfLineItemID(INTEGER l) OR blradfLineItemBuyerID(l) OR blradfLineItemSupplierID(l) DO NEW ed = ECreditNoteDetail {
                            id(ed) <- id(ec) + '/' + blradfLineItemNumber(l);
                            eCreditNote(ed) <- ec;
                            lineItemNumber(ed) <- blradfLineItemNumber(l);
                            lineItemID(ed) <- blradfLineItemID(l);
                            lineItemBuyerID(ed) <- blradfLineItemBuyerID(l);
                            lineItemSupplierID(ed) <- blradfLineItemSupplierID(l);
                            lineItemName(ed) <- blradfLineItemName(l);
                            quantityOrdered(ed) <- blradfQuantityOrdered(l);
                            quantityReceived(ed) <- blradfQuantityReceived(l);
                            valueVAT(ed) <- blradfValueVAT(l);
                            lineItemPrice(ed) <- blradfLineItemPrice(l);
                            amountOrdered(ed) <- blradfAmountOrdered(l);
                            amountReceived(ed) <- blradfAmountReceived(l);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(host, port, login, password, url, xml());
                            logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' Import ECreditNote ' + id(i) + ' failed: ' + applyMessage());
                        eCreditNotesFailed() <- eCreditNotesFailed() + 1;
                    } ELSE {
                        IF isCancel() THEN {
                            FOR ECreditNote c == eCreditNoteActDifNumber(blradfActDifNumber()) DO {
                                LOCAL contentSubXML = FILE();
                                blrapnDateTime() <- currentDateTimeMillis();
                                blrapnMsgSender() <- glnSupplier(c);
                                blrapnMsgReceiver() <- glnCustomer(c);
                                blrapnDeliveryNoteId() <- actDifNumber(c);
                                blrapnDeliveryNoteDate() <- DATE(actDifDateTime(c));
                                blrapnReferenceDocumentType() <- 'BLRADF';
                                blrapnReferenceDocumentId() <- blradfDocumentNumber();
                                blrapnReferenceDocumentDate() <- blradfDateTime();
                                blrapnShipper() <- glnSupplier(c);
                                blrapnReceiver() <- glnCustomer(c);
                                toMilliseconds(blrapnDateTime());
                                EXPORT exportBlrapn XML TO contentSubXML;
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                IF aliasEDSServiceSupplier(c) AND passwordEDSServiceSupplier(c) THEN {
                                    IF hostEDSServiceSupplierTopBy(c) AND portEDSServiceSupplierTopBy(c) THEN {
                                        LOCAL xml = FILE();
                                        fileToString(contentSubXML());
                                        EXPORT getEDS OBJECTS alias = aliasEDSServiceSupplier(c),password = passwordEDSServiceSupplier(c) XML TO xml;
                                        LOCAL innerXML = TEXT();
                                        innerXML() <- resultString();
                                        fileToString(xml());
                                        stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                                        sendRequestEDI(hostEDSServiceSupplierTopBy(c), portEDSServiceSupplierTopBy(c), 'eds', 'eds', ('http://' + hostEDSServiceSupplierTopBy(c) + ':' + portEDSServiceSupplierTopBy(c) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                                        IMPORT getEDSResponse FROM sendRequestEDIResponse();
                                        IF faultstring() THEN {
                                            logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: BLRAPN ' + number(c) + ' не подписан. Ошибка: ' + faultstring());
                                        }
                                        ELSE IF waybill() THEN {
                                            encodeBase64(waybill());
                                            LOCAL ixml = XMLFILE();
                                            envelopeLogin() <- login;
                                            envelopePassword() <- password;
                                            envelopeFilename() <- CONCAT '', 'creditnote', number(c);
                                            envelopeDocumentDate() <- blrapnDateTime();
                                            envelopeDocumentNumber() <- number(c);
                                            envelopeSender() <- glnSupplier(c);
                                            envelopeReceiver() <- glnCustomer(c);
                                            envelopeDeliveryPoint() <- glnCustomerStock(c);
                                            envelopeDocumentType() <- 'BLRAPN';
                                            envelopeContent() <- encodedBase64();
                                            EXPORT envelope XML TO ixml;
                                            sendRequestEDI(host, port, login, password, url, ixml());
                                            logToFile('edi', provider + ' SendECreditNote ' + number(c) +' request sent');
                                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                            IF requestError() THEN {
                                                logToFile('edi', provider + ' SendECreditNote ' + number(c) + ': ' + requestError());
                                                MESSAGE provider + ' Акт приемки ' + number(c) + ' не выгружен: ' + requestError() NOWAIT;
                                            } ELSE {
                                                toMilliseconds(blrapnDateTime());
                                                blrapn(c) <- STRING[14](resultMilliseconds());
                                                logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' request succeeded');
                                                IF NOT disableConfirmation THEN {
                                                    LOCAL cxml = XMLFILE();
                                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                    sendRequestEDI(host, port, login, password, url, cxml());
                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                    IF requestError() THEN {
                                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                        MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                    } ELSE {
                                                        IF archiveDir THEN {
                                                            TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                                        }
                                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                    }
                                                }
                                            }
                                        }
                                    } ELSE {
                                        logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: не заданы параметры EDSService');
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: Alias or Password for EDSService not found');
                                }
                            }
                        }
                        IF NOT disableConfirmation THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(host, port, login, password, url, xml());
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                    WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                }
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' Import ECreditNote ' + id(i) + ' succeeded');
                        eCreditNotesSucceeded() <- eCreditNotesSucceeded() + 1;
                    }  
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse CreditNote ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(host, port, login, password, url, xml());
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse Message ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
        }
    }
}

//информация от СТТ:
//при обмене накладными каждое сообщение - заново сформированная xml с одной подписью (отправителя)
//при обмене актами выполненных работ, актами приемки, документами свободной формы - принимающая сторона подписывает тот же документ, ту же xml. 
//т.е. накладывает ВТОРУЮ подпись на полученный документ, ничего в нем не меняя. меняется только шапка документа, которая не подписывается
//при этом MessageHeader нужен новый... поэтому просто взять файл и отправить нельзя

signAndSendSupplierECreditNote (ECreditNote c, STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF loginTopBy(supplier(c)) AND passwordTopBy(supplier(c)) AND hostTopBy(supplier(c)) AND portTopBy(supplier(c)) THEN {
                IF hostEDSServiceSupplierTopBy(c) AND portEDSServiceSupplierTopBy(c) THEN {
                    IF NOT isCancel(c) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'Адрес места составления акта (Адрес склада покупателя)\'\n';
                        //IF NOT length(contactCustomerStock(c)) > 0 THEN error() <- error() + 'ECreditNote ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';
                        
                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            blradfDateTime() <- currentDateTimeMillis();
                            blradfMsgSenderID() <- glnSupplier(c);
                            blradfMsgReceiverID() <- glnCustomer(c);
                            blradfSecurityID() <- securityID(c);
                            blradfCertificateID() <- certificateID(c);
                            blradfSecurityPartyID() <- securityPartyID(c);
                            blradfCreationSignatureDate() <- creationSignatureDate(c);
                            blradfCreationSignatureTime() <- creationSignatureTime(c);
                            blradfSignatureValue() <- signatureValue(c);
                            toMilliseconds(blradfDateTime());
                            EXPORT exportBlradf OBJECTS ec = c XML TO contentSubXML;
                            IF outputDirTopBy() THEN {
                                TRY{ mkdir(outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDirTopBy() + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blradf-' + toChar(blradfDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            IF aliasEDSServiceSupplier(c) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(c)) THEN {
                                LOCAL xml = FILE();
                                fileToString(contentSubXML());
                                EXPORT getEDS OBJECTS alias = aliasEDSServiceSupplier(c),password = (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(c)) XML TO xml;
                                LOCAL innerXML = TEXT();
                                innerXML() <- resultString();
                                fileToString(xml());
                                stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                                sendRequestEDI(hostEDSServiceSupplierTopBy(c), portEDSServiceSupplierTopBy(c), 'eds', 'eds', ('http://' + hostEDSServiceSupplierTopBy(c) + ':' + portEDSServiceSupplierTopBy(c) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                                IMPORT getEDSResponse FROM sendRequestEDIResponse();
                                IF faultstring() THEN {
                                    logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' error: BLRADF ' + number(c) + ' не подписан. Ошибка: ' + faultstring());
                                    MESSAGE provider + ' Акт приемки не выгружен: BLRADF ' + number(c) + ' не подписан. Ошибка: ' + faultstring() NOWAIT;
                                }
                                ELSE IF waybill() THEN {
                                    encodeBase64(waybill());
                                    LOCAL ixml = XMLFILE();
                                    envelopeLogin() <- loginTopBy(supplier(c));
                                    envelopePassword() <- passwordTopBy(supplier(c));
                                    envelopeFilename() <- CONCAT '', 'creditnote', number(c);
                                    envelopeDocumentDate() <- blradfDateTime();
                                    envelopeDocumentNumber() <- number(c);
                                    envelopeSender() <- glnSupplier(c);
                                    envelopeReceiver() <- glnCustomer(c);
                                    envelopeDeliveryPoint() <- glnCustomerStock(c);
                                    envelopeDocumentType() <- 'BLRADF';
                                    envelopeContent() <- encodedBase64();
                                    EXPORT envelope XML TO ixml;
                                    sendRequestEDI(hostTopBy(supplier(c)), portTopBy(supplier(c)), loginTopBy(supplier(c)), passwordTopBy(supplier(c)), ('http://' + hostTopBy(supplier(c)) +':' + portTopBy(supplier(c)) + '/DmcService'), ixml());
                                    logToFile('edi', provider + ' SendECreditNote ' + number(c) +' request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' SendECreditNote ' + number(c) + ': ' + requestError());
                                        MESSAGE provider + ' Акт приемки ' + number(c) + ' не выгружен: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' request succeeded');
                                        MESSAGE provider + ' Акт приемки ' + number(c) + ' выгружен' NOWAIT;
                                        exportedSupplier(c) <- TRUE;
                                        APPLY NESTED LOCAL;
                                    }
                                }
                            } ELSE {
                                logToFile('edi', provider + ' SendECreditNote ' + number(c) + ' error: Alias or Password for EDSService not found');
                                MESSAGE provider + ' Акт приемки ' + number(c) + ' не выгружен: Alias или Пароль EDSService не задан' NOWAIT;
                            }
                        } ELSE {
                            logToFile('edi', provider + ' SendECreditNote: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' Акт приемки не выгружен: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendECreditNote: Запрещено отправлять отмененный документ.');
                        MESSAGE provider + ' Акт приемки не выгружен: Запрещено отправлять отмененный документ' NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' SendECreditNote: не заданы параметры EDSService');
                    MESSAGE provider + ' Акт приемки не выгружен: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendECreditNote: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Акт приемки не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Акт приемки не выгружен. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendECreditNote disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendECreditNote disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendSupplier(ECreditNote c) + { IF EDIProvider(customer(c)) == EDIProvider.topBy THEN IF exportedSupplier(c) THEN MESSAGE 'Акт приемки (поставщик) уже отправлен'; ELSE signAndSendSupplierECreditNote(c,'TopBy'); }