MODULE SaleManufacturingPrice;

REQUIRE SaleInvoice, PriceListLedger, OrderManufacturingPrice, PurchaseManufacturingPrice;

NAMESPACE Sale;

//заказ
@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', showContainer);
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(orderDetail, manufacturing, ' изготовителя');
manufacturingPrice[Order.OrderDetail](OrderDetail d) += manufacturingPrice(d);
@defineDocumentInterfaceDetailInclVATCustomPrefix (orderDetail);
includeVAT(UserOrderDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (orderDetail, manufacturing, );

manufacturingPrice (UserOrderDetail detail)  <- round2(IF batch(detail)

                                                THEN prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                               batch(detail),
                                                                                               supplierStock(detail),
                                                                                               dateTime(detail))
                                                ELSE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                             sku(detail),
                                                                                             supplierStock(detail),
                                                                                             dateTime(detail)))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(supplierStock(detail)) OR
                                                     (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
                                                     CHANGED(batch(detail));

wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (OrderDetail detail) = NUMERIC[17,5](round2([= ((X*100.0)/Y-100.0)](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail) != 0.0)));
wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (UserOrderDetail detail) = round2([= ((X*100.0)/Y-100.0)](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail) != 0.0 ));
wholesaleMarkup(OrderDetail d) += wholesaleMarkup(d);

@defineDocumentInterfaceDetailDataSumPrefix (order, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userOrder, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (order, manufacturing, manufacturing);

overChangeManufacturingPriceUser  ABSTRACT LIST ( OrderDetail);
changeManufacturingPriceUser (OrderDetail detail)  { 
    INPUT n = NUMERIC[16,4] DO {
        manufacturingPrice[UserOrderDetail](detail) <- n;   
        overChangeManufacturingPriceUser(detail);
    }
}

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPrice
    PROPERTIES(d)  SHOWIF showManufacturingPrice(o) AFTER invoiceSum(d)  
                   manufacturingPrice ON CHANGE changeManufacturingPriceUser(d), wholesaleMarkup READONLY,
                   includeVAT, manufacturingSum

;
DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPrice(o) AFTER invoiceSum(d) 
                  manufacturingPrice, wholesaleMarkup, includeVAT, manufacturingSum
;

//накладная
@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVAT(UserInvoiceDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

// Устанавливаем цену изготовителя из регистра
updateManufacturingPrice 'Изменить цену изготовителя' = DATA BOOLEAN (UserInvoice);
updateManufacturingPrice = updateManufacturingPrice(userInvoice(UserInvoiceDetail d));

disableUpdateManufacturingPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
WHEN LOCAL (CHANGED(sku(UserInvoiceDetail detail)) OR
              ((CHANGED(supplierStock(detail)) OR
                CHANGED(dateTime(detail))) AND NOT isPosted(detail)) OR
              CHANGED(batch(detail)) OR
              CHANGED(updateManufacturingPrice(detail))) AND NOT CHANGED(manufacturingPrice (detail)) AND NOT disableUpdateManufacturingPrice(detail) DO 
    manufacturingPrice (detail)  <-
                                            IF updateManufacturingPrice(detail) THEN
                                                price(detail)
                                            ELSE
                                                round2(IF batch(detail) THEN 
                                                            prevPriceB[LedgerPriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                              batch(detail),
                                                                                              supplierStock(detail),
                                                                                              dateTime(detail))
                                                            ELSE prevPriceB[LedgerPriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                                                              sku(detail),
                                                                                              supplierStock(detail),
                                                                                              dateTime(detail)));
                                                                                          
@defineOperationProperty(updateManufacturingPrice, 'Изменять цену изготовителя', showContainer);
@deriveDocumentOperationProperty(UserInvoice, updateManufacturingPrice);


wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (InvoiceDetail detail) = round2([= (X/Y-1)*100](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail)!= 0.0));
wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (UserInvoiceDetail detail) = round2([= (X/Y-1)*100](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail)!= 0.0));

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i)  showManufacturingPrice, updateManufacturingPrice
    PROPERTIES(d)  SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d)  
                   manufacturingPrice, wholesaleMarkup READONLY, includeVAT, manufacturingSum

;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(i));
            MOVE PROPERTY(updateManufacturingPrice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d) 
                  manufacturingPrice, wholesaleMarkup, includeVAT, manufacturingSum
;

//overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//
//manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, showManufacturingPrice);

showBatchManufacturingPrice (UserOrder o) = showBatch(o) AND showManufacturingPrice(o);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, showBatchManufacturingPrice);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showManufacturingPrice);

showBatchManufacturingPrice (UserInvoice i) = showBatch(i) AND showManufacturingPrice(i);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showBatchManufacturingPrice);