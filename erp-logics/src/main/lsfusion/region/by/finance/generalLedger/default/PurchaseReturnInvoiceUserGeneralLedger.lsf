MODULE PurchaseReturnInvoiceUserGeneralLedger;

REQUIRE GeneralLedgerStock, PurchaseReturnInvoice, DimensionLegalEntity, DimensionStock, DimensionTax;

NAMESPACE PurchaseReturn;

//------------------- Приход товара/тары от поставщ. --------------------//

EXTEND CLASS Invoice : GeneralLedger.GLDocument;
isPosted[GLDocument](Invoice document) += isPosted(document);
name[GLDocument](Invoice document) += description(document);

number[GLDocument](Invoice document) += number(document);
series[GLDocument](Invoice document) += series(document);

dateTime[GLDocument](Invoice document) += dateTime(document);
operation[GLDocument](Invoice document) += operation(document);
//editGLDocument (GLDocument)+= editInvoice(GLDocument);

description(Invoice invoice, Range range) =  CONCAT ', ', description(invoice),
                                                       staticCaption(tax(range)),
                                                       'шкала' + number(range),
                                                       'тек.ставка' + valueRate(range, date(invoice)); 
                                                          
///////////////////////// Сторно ///////////////////////////
//-------------------------------- НДС поставщика с разбивкой по ставке----------------------------------//
//-- Тара
negativeVATSumContainerInvoiceDetail (Invoice invoice, Range range) = -VATSumContainerInvoiceDetail(invoice, range);
@defineGeneralLedgerDoubleOperationStock (invoice,                                      // основание
                                          range,                                        // шкала
                                          InvSupVATC,                                   // идентификатор
                                          customer,                                     // компания
                                          customerStock,
                                          negativeVATSumContainerInvoiceDetail,          // сумма
                                          description,                                  // описание
                                          '18.5',                                       // дебет
                                          '60.1',                                       // кредит
                                          'by_default',                                 // идентификатор плана счетов
                                          'by_default_purchase_invoice'                         // идентификатор операции
                                          );
overCreateInvSupVATCInvoiceRange(UserGeneralLedger generalLedger, Dimension dimension, Invoice invoice) + {  
    credit(generalLedger, DimensionType dimensionType) <- supplier(invoice) WHERE dimensionType == DimensionType.organization;
    debit(generalLedger, DimensionType dimensionType) <- CASE WHEN dimensionType == DimensionType.stock THEN customerStock(invoice)
                                                               WHEN dimensionType == DimensionType.range THEN dimension;
    
    idOperation(generalLedger) <- '01';
}

//-- Услуги
negativeVATSumChargeInvoiceDetail (Invoice invoice, Range range) = -VATSumChargeInvoiceDetail(invoice, range);
@defineGeneralLedgerDoubleOperationStock (invoice,
                                          range,
                                          InvSupVATCH,
                                          customer,
                                          customerStock,
                                          negativeVATSumChargeInvoiceDetail,
                                          description,
                                          '18.6',
                                          '60.1',
                                          'by_default',
                                          'by_default_purchase_invoice'
                                          );
overCreateInvSupVATCHInvoiceRange(UserGeneralLedger generalLedger, Dimension dimension, Invoice invoice) + {  
    credit(generalLedger, DimensionType dimensionType) <- supplier(invoice) WHERE dimensionType == DimensionType.organization;
    debit(generalLedger, DimensionType dimensionType) <- CASE WHEN dimensionType == DimensionType.stock THEN customerStock(invoice)
                                                               WHEN dimensionType == DimensionType.range THEN dimension;
    
    idOperation(generalLedger) <- '01';
}
//-- Товар
negativeVATSumItemInvoiceDetail (Invoice invoice, Range range) = -VATSumItemInvoiceDetail(invoice, range);
@defineGeneralLedgerDoubleOperationStock (invoice,
                                          range,
                                          InvSupVATI,
                                          customer,
                                          customerStock,
                                          negativeVATSumItemInvoiceDetail,
                                          description,
                                          '18.1',
                                          '60.1',
                                          'by_default',
                                          'by_default_purchase_invoice'
                                          );
overCreateInvSupVATIInvoiceRange(UserGeneralLedger generalLedger, Dimension dimension, Invoice invoice) + {  
    credit(generalLedger, DimensionType dimensionType) <- supplier(invoice) WHERE dimensionType == DimensionType.organization;
    debit(generalLedger, DimensionType dimensionType) <- CASE WHEN dimensionType == DimensionType.stock THEN customerStock(invoice)
                                                               WHEN dimensionType == DimensionType.range THEN dimension;
    
    idOperation(generalLedger) <- '01';
}
//-------------------------------- Сумма поставщика ----------------------------------//
//-- Тара
negativeSumContainerInvoiceDetail (Invoice invoice) = -sumContainerInvoiceDetail(invoice);
@defineGeneralLedgerOperationStock (invoice,
                                          InvSupC,
                                          customer,
                                          customerStock,
                                          negativeSumContainerInvoiceDetail,
                                          description,
                                          '41.3',
                                          '60.1',
                                          'by_default',
                                          'by_default_purchase_invoice'
                                          );
overCreateInvSupCInvoice(UserGeneralLedger generalLedger, Invoice invoice) + {  
    credit(generalLedger, DimensionType dimensionType) <- supplier(invoice) WHERE dimensionType == DimensionType.organization;
    debit(generalLedger, DimensionType dimensionType) <- customerStock(invoice) WHERE dimensionType == DimensionType.stock;  
    idOperation(generalLedger) <- '01';
}
  

//-- Товар
negativeSumItemInvoiceDetail (Invoice invoice) = -sumItemInvoiceDetail(invoice);
@defineGeneralLedgerOperationStock (invoice,
                                          InvSupIH,
                                          customer,
                                          customerStock,
                                          negativeSumItemInvoiceDetail,
                                          description,
                                          '41.2',
                                          '60.1',
                                          'by_default',
                                          'by_default_purchase_invoice'
                                          );
overCreateInvSupIHInvoice(UserGeneralLedger generalLedger, Invoice invoice) + {  
    credit(generalLedger, DimensionType dimensionType) <- supplier(invoice) WHERE dimensionType == DimensionType.organization;
    debit(generalLedger, DimensionType dimensionType) <- customerStock(invoice) WHERE dimensionType == DimensionType.stock;  
    idOperation(generalLedger) <- '01';
}
// ----------------------------------- Стандартные данные ----------------------------------- //

//@defineLoadDefaultOperation (Purchase, iname, isid){
//    @defineLoadDefaultOperationPrefix (Purchase, iname, isid, ){
//    loadDefaultOperation 'Добавить значение операций'(ISTRING[100] iname, ISTRING[100] isid)  { 
//        NEW t = Purchase.Operation {
//            name(t) <- iname;
//            id (t) <- isid;
//        }
//    }
//};
//};
//loadDefaultOperationsPurchaseInvoiceBy 'Загрузить стандартные операции прихода товара' ()  { 
//    EXEC loadDefaultOperation ('Приход товара от поставщика', 'by_default_purchase_invoice');
//} ;
//
//loadDefaultOperations () + {  loadDefaultOperationsPurchaseInvoiceBy(); }

@extendFormGeneralLedgerDocument(invoices, i);