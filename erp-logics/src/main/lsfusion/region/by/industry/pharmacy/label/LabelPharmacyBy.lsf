MODULE LabelPharmacyBy;

REQUIRE LabelBy, ItemPharmacyBy;

NAMESPACE Label;

//печать серии
seriesPharmacy 'Серия лекарственного средства'  = DATA VARSTRING[20] (LabelTransactionDetail);
createAttribute(LabelTransactionDetail d) +
    {  seriesPharmacy(d) <- seriesPharmacy(batch(d)); }

EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY seriesPharmacy;
EXTEND FORM customLabelTransaction PROPERTIES(d) seriesPharmacy;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY seriesPharmacy PROPERTIES(dts) READONLY seriesPharmacy;

//печать по отмеченным партиям
select 'Отм.' = DATA LOCAL NESTED BOOLEAN (Batch, Stock) CHANGEKEY 'F3';
resetAllSelectedSkuStock 'Сбросить для всех'()  { 
    select(Batch batch, Stock stock) <- NULL WHERE select(batch, stock);
} ASON CONTEXTMENU select[Batch,Stock];

countSelectBatchStocks 'Отм.' = GROUP SUM 1 IF select(Batch batch, Stock stock) CHARWIDTH 3 TOOLBAR;
countSelectBatch = GROUP SUM 1 IF select(Batch batch, Stock stock) BY sku(batch), stock;
countSelectBatch = GROUP SUM 1 IF select(Batch batch, Stock stock) BY sku(batch);
countSelect = GROUP SUM 1 IF select(Batch batch, Stock stock) BY batch;

EXTEND FORM currentBalanceBatchStock
    PROPERTIES (bt, st) select BEFORE nameSku(bt)
;

//печать по партиям из остатков
createBatchLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore)  { 
    // бежим по всем типам ценников из управленческих параметров
    // для каждого создаем по операции печати ценников
    FOR [ GROUP SUM 1 IF select(Sku s,LabelType l,departmentStore) AND NOT exclude(l,s) BY l](LabelType labelType) NEW t = LabelTransaction DO { 
        departmentStore(t) <- departmentStore;
        labelType(t) <- labelType;
        addedTransaction() <- t;
        
        FOR select(Batch batch, departmentStore) AND select(sku(batch), labelType, departmentStore) AND NOT exclude(labelType,sku(batch)) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) INLINE NEW d = LabelTransactionDetail DO {
            
            labelTransaction(d) <- t;
            sku(d) <- sku(batch);
            batch(d) <- batch;

            name(d) <- name(sku(d));
            createAttribute(d);

            quantity(d) <-  OVERRIDE overQuantityPrint(sku(d)), 
                                     (IF include(labelType, sku(d)) THEN INTEGER(currentBalance(batch, departmentStore))
                                                         ELSE count(labelType, sku(d)));
                                                 
            price(d) <- calcPrice(pt, d);
            retailPrice(d) <- overRetailPrice(d);
        } 
        overCreate(t);
        // вызываем печатную форму для каждого из них       

        DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);

        IF notCheckEqualRetailPrice() THEN
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
        ELSE
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d) AND NOT skipDelete(d);
            
        DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);
         
        print(t);                 
    }
} TOOLBAR;

createSelectedBatchStockLabelTransaction 'Распечатать ценники'()  { 
    IF (GROUP SUM 1 IF select(Batch batch, Stock stock)) THEN {
        NEWSESSION NESTED (select[Batch,Stock]) {
            FOR [ GROUP SUM 1 IF select(Batch batch, Stock stock) BY stock] (DepartmentStore stock) AND stock IS DepartmentStore DO {        
                select(Sku sku, LabelType labelType, stock) <- countSelectBatch(sku, stock) AND inPrint(labelType, sku, stock);
                createBatchLabelTransaction(stock);
            }
            
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Batch batch, Stock stock) <- NULL;
        }
    }
} TOOLBAR;

createBatchSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore, LabelType labelType)  { 

    NEW t = LabelTransaction {
        departmentStore(t) <- departmentStore;
        labelType(t) <- labelType;
        addedTransaction() <- t;
        
        FOR select(Batch batch, departmentStore) AND NOT exclude(labelType,sku(batch)) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) INLINE NEW d = LabelTransactionDetail DO {
            labelTransaction(d) <- t;
            sku(d) <- sku(batch);
            batch(d) <- batch;
            
            name(d) <- name(sku(d));
            documentQuantity(d) <- currentBalance(batch, departmentStore); 

            createAttribute(d);           
            

            price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
            retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
    
            quantity(d) <- IF NOT countLabel(departmentStore) 
                                                     THEN (IF include(labelType(d), sku(d)) 
                                                        THEN INTEGER(documentQuantity(d))
                                                         ELSE count(labelType(d), sku(d)))
                                                     ELSE countLabel(departmentStore);                                                              
        }
        overCreate(t);
        IF change(departmentStore) THEN {
            LOCAL printed = BOOLEAN();
            printed() <- NULL;
            DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {    
                print(t);
                printed() <- TRUE;
            }             
            IF NOT printed() THEN {
                cancel();
            }             
        } ELSE {
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);

            IF notCheckEqualRetailPrice() THEN
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
            ELSE
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d)  AND NOT skipDelete(d);
                
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);
        
            print(t);
        }     
    }  
} TOOLBAR ;


createSelectedBatchStockSnapshotLabelTransaction 'Перепечатать ценники'()  { 
    IF (GROUP SUM 1 IF select(Batch batch, Stock stock)) THEN {            
        NEWSESSION NESTED (select[Batch,Stock]) {

            FOR [ GROUP SUM 1 IF select(Batch batch, Stock stock) BY stock](DepartmentStore stock) AND stock IS DepartmentStore DO {  
                DIALOG selectLabelTypes OBJECTS ds = stock, l INPUT NOMANAGESESSION DO { 
                    select(Sku sku) <- TRUE IF countSelectBatch(sku);     
                    IF NOT countSelectType() THEN {
                        select(l) <- TRUE;
                    }            
                    FOR select(LabelType type) DO {
                        createBatchSnapshotLabelTransactionDepartmentStore(stock, type);
                    }                     
                }                                                  
            }                      
            APPLY;
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    }
} TOOLBAR;

EXTEND FORM currentBalanceBatchStock
    PROPERTIES () DRAW stb createSelectedBatchStockLabelTransaction, createSelectedBatchStockSnapshotLabelTransaction
;    

DESIGN currentBalanceBatchStock {
    ledgerBox {
        NEW actionContainer {
            caption = 'Действия';
            type = CONTAINERH;
            NEW labelContainer {
                caption = 'Ценники';
                type = CONTAINERV;
                MOVE PROPERTY (createSelectedBatchStockLabelTransaction());
                MOVE PROPERTY (createSelectedBatchStockSnapshotLabelTransaction());
            } 
        }
    }
}




