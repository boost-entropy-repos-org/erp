MODULE ItemPharmacyBy;

REQUIRE ItemPharmacy, ItemPharmacyGroupBy, PriceListType, StockPharmacy, StorePharmacyBy;

NAMESPACE Item;

@defineExternalizable(manufacturer, STRING[100], ext);

defaultExtIdNumeratorManufacturer = DATA Numerator ();
nameDefaultExtIdNumeratorManufacturer 'Производители товара' = name(defaultExtIdNumeratorManufacturer()) IN defaultNumerator;
WHEN SET(Manufacturer o IS Manufacturer) AND defaultExtIdNumeratorManufacturer() AND NOT extId(o) DO {
    extId(o) <- CONCAT '', series(defaultExtIdNumeratorManufacturer()), curStringValue(defaultExtIdNumeratorManufacturer());  
    incrementValueSession(defaultExtIdNumeratorManufacturer());
} 

EXTEND FORM defaultNumerators PROPERTIES() nameDefaultExtIdNumeratorManufacturer;

EXTEND FORM manufacturer
    PROPERTIES(m) extId SHOWIF showIDs()
;  

DESIGN manufacturer {
    PROPERTY(extId(m)){
        caption = 'Дополнительный код';
    }
}

EXTEND FORM manufacturerDialog
    PROPERTIES(m) READONLY extId SHOWIF showIDs()
;

DESIGN manufacturerDialog {
    PROPERTY(extId(m)){
        caption = 'Дополнительный код';
    }
}   

EXTEND FORM attributesItem
    PROPERTIES READONLY extId(manufacturer) AFTER id(manufacturer) SHOWIF showIDs()
;

DESIGN attributesItem {
    PROPERTY(extId(manufacturer)){
        caption = 'Дополнительный код';
    }
}

//---------------- специальный тип цены (опт)-----------------//

CLASS WholesalePharmacyPriceListType 'Оптовая цена на медтовары' : PriceListType;

name 'Наименование' = DATA ISTRING[50](WholesalePharmacyPriceListType);
name(WholesalePharmacyPriceListType type) += name(type) IF type IS WholesalePharmacyPriceListType;

calcPriceListType = DATA CalcPriceListType (WholesalePharmacyPriceListType);
nameCalcPriceListType 'Вид цены с основной наценкой' (WholesalePharmacyPriceListType type) = name[PriceListType](calcPriceListType(type));

ledgerPriceListType(WholesalePharmacyPriceListType type) = basePriceListType(calcPriceListType(type)) AS LedgerPriceListType MATERIALIZED INDEXED; //DATA LedgerPriceListType (WholesalePharmacyPriceListType);

ledgerPriceListType(WholesalePharmacyPriceListType type) += ledgerPriceListType(type);

@defineDocumentHeaderCurrency(wholesalePharmacyPriceListType);
currency(WholesalePharmacyPriceListType pharmacyPriceListType) += currency(pharmacyPriceListType);

// -------------------- Старый механизм расчета --------------------- //
//---цена товара
//markupWholesaleBPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    wholesaleMarkupPharmacySkuPriceDate(sku,
//                                        priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                                        DATE(dateTime));
//maxPriceWholesaleBPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//           priceBBasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//priceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceBCalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceWholesaleBPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;
//
//
//markupWholesaleAPharmacyPriceListTypeSkuStockDateTime 'Предельная надбавка' (type, sku, stock, dateTime) =
//    wholesaleMarkupPharmacySkuPriceDate(sku,
//                                        priceABasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                                        DATE(dateTime));
//maxPriceWholesaleAPharmacyPriceListTypeSkuStockDateTime 'Предельная цена' (type, sku, stock, dateTime) =
//    round((100 + markupWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) *
//           priceABasePriceListTypeSkuStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime)/100, 0);
//priceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceACalcPriceListTypeSkuStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), sku, stock, dateTime),
//                       maxPriceWholesaleAPharmacyPriceListTypeSkuStockDateTime(type, sku, stock, dateTime)) COMPLEX;

//---цена партии
//markupWholesaleBPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    wholesaleMarkupPharmacyBatchPriceDate(batch,
//                                          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                                          DATE(dateTime));
//markupWholesaleAPharmacyPriceListTypeBatchStockDateTime 'Предельная надбавка' (type, batch, stock, dateTime) =
//    wholesaleMarkupPharmacyBatchPriceDate(batch,
//                                          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                                          DATE(dateTime));
//
//maxPriceWholesaleBPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceBBasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);
//maxPriceWholesaleAPharmacyPriceListTypeBatchStockDateTime 'Предельная цена' (type, batch, stock, dateTime) =
//    round((100 + markupWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime))*
//          priceABasePriceListTypeBatchStockDateTime(basePriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime)/100, 0);
//
//priceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceBCalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceWholesaleBPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)) COMPLEX;
//priceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime) =
//    NUMERIC[16,4] (MIN priceACalcPriceListTypeBatchStockDateTime(calcPriceListTypeWholesalePharmacyPriceListType(type), batch, stock, dateTime),
//                       maxPriceWholesaleAPharmacyPriceListTypeBatchStockDateTime(type, batch, stock, dateTime)) COMPLEX;

// -------------------- Новый механизм расчета --------------------- //

limitMarkup(NUMERIC[16,4] price, CalcPriceListType type, Sku sku, DATE date) =
    MIN markup(type, sku),
        wholesaleMarkupPharmacy(sku, price, date);

limitPrice(NUMERIC[16,4] price, CalcPriceListType type, Sku sku, DATE date) =
    NUMERIC[16,4](trunc (round2(price) * (100 + limitMarkup(price, type, sku, date)) / 100.0, 2)) COMPLEX;

//---цена товара
priceWholesaleB(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceB(ledgerPriceListType(type), sku, stock, dateTime),
        calcPriceListType(type),
        sku,
        DATE(dateTime));

priceWholesaleA(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceA(ledgerPriceListType(type), sku, stock, dateTime),
        calcPriceListType(type),
        sku,
        DATE(dateTime));

priceB(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceWholesaleB(type, sku, stock, dateTime);
priceA(WholesalePharmacyPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceWholesaleA(type, sku, stock, dateTime);

//---цена партии
priceWholesaleB(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceB(ledgerPriceListType(type), batch, stock, dateTime),
        calcPriceListType(type),
        sku(batch),
        DATE(dateTime));

priceWholesaleA(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    limitPrice(
        priceA(ledgerPriceListType(type), batch, stock, dateTime),
        calcPriceListType(type),
        sku(batch),
        DATE(dateTime));

priceB(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceWholesaleB(type, batch, stock, dateTime);
priceA(WholesalePharmacyPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceWholesaleA(type, batch, stock, dateTime);

FORM wholesalePharmacyPriceListType 'Оптовая цена на медтовары'
    OBJECTS p = WholesalePharmacyPriceListType PANEL
    PROPERTIES(p) name, nameCurrency,
                  nameCalcPriceListType

    EDIT WholesalePharmacyPriceListType OBJECT p
;

DESIGN wholesalePharmacyPriceListType {
    BOX(p){
        MOVE PROPERTY(name(p));
        MOVE PROPERTY(nameCurrency(p));
        MOVE PROPERTY(nameCalcPriceListType(p));
    }
}

EXTEND FORM priceListTypes
    PROPERTIES(pt) NEWSESSION addWholesalePharmacyPriceListType = NEW[WholesalePharmacyPriceListType]
;

DESIGN priceListTypes {
    PROPERTY (addWholesalePharmacyPriceListType) {
        caption = 'Добавить опт.цену на медтовары';
    }
}

// ----------------------------------- Обязательный и основной перечень ----------------------------------- //
CLASS PharmacyAdditionalGroupType {
    compalsory 'Обязательные ЛС',
    base 'Основные ЛС'    
}: GroupType;
TABLE pharmacyAdditionalGroupType (PharmacyAdditionalGroupType);

name(PharmacyAdditionalGroupType group)+=ISTRING[100](staticCaption(group)) IF group IS PharmacyAdditionalGroupType;

CLASS PharmacyCompalsoryGroup 'Группа обязательного перечня': Group;
TABLE pharmacyCompalsoryGroup(PharmacyCompalsoryGroup);
TABLE pharmacyCompalsoryGroupPharmacyCategory(PharmacyCompalsoryGroup, PharmacyCategory);

name 'Наименование' = DATA ISTRING[50](PharmacyCompalsoryGroup);
pharmacyCompalsoryGroupName = GROUP NAGGR PharmacyCompalsoryGroup pharmacyCompalsoryGroup BY name(pharmacyCompalsoryGroup);

@defineExternalizable(pharmacyCompalsoryGroup, STRING[100]);
name(PharmacyCompalsoryGroup group) += name(group);
groupType(PharmacyCompalsoryGroup group) += PharmacyAdditionalGroupType.compalsory IF group IS PharmacyCompalsoryGroup;

minBalance 'Минимальный остаток' = DATA NUMERIC[16,5](PharmacyCompalsoryGroup, PharmacyCategory);

inactive 'Неактивная' = DATA BOOLEAN (PharmacyCompalsoryGroup);
active 'Активная' (PharmacyCompalsoryGroup group) = group IS PharmacyCompalsoryGroup AND NOT inactive(group);

FORM pharmacyCompalsoryGroup 'Группа обязательного перечня'
    OBJECTS pg = PharmacyCompalsoryGroup PANEL
    PROPERTIES(pg) name, id, inactive
    
    OBJECTS pc = PharmacyCategory
    PROPERTIES(pc) READONLY order, staticCaption
    ORDER order(pc)
    PROPERTIES(pg, pc) minBalance
    
    EDIT PharmacyCompalsoryGroup OBJECT pg 
;

DESIGN pharmacyCompalsoryGroup {
    PROPERTY(name(pg)) {
        width = 300;
        flex = 0;
    }
}

FORM dialogPharmacyCompalsoryGroups 'Группы обязательного перечня'
    OBJECTS g = PharmacyCompalsoryGroup
    PROPERTIES(g) READONLY name, id
    ORDER name(g)
    FILTERGROUP active
        FILTER 'Активные' active(g) DEFAULT    
    LIST PharmacyCompalsoryGroup OBJECT g
;

@defineObjectItemAttribute(pharmacyCompalsoryGroup, PharmacyCompalsoryGroup, name, 'Группа обязательного перечня', itemPharmacy);

@defineItemFilterValue(pharmacyCompalsoryGroup, 'Группа обязательного перечня', pg);

@defineUniteFilterAttributeItem(pharmacyCompalsoryGroup, name, 'группа обязательного перечня', 'группы обязательного перечня', item);

namePharmacyCompalsoryGroupActive 'Группа обязательного перечня' (Item item) = IF active(pharmacyCompalsoryGroup(item))
    THEN name(pharmacyCompalsoryGroup(item)) IN itemPharmacy;

//
CLASS PharmacyBaseGroup 'Группа основного перечня': Group;
TABLE pharmacyBaseGroup(PharmacyBaseGroup);
name 'Наименование' = DATA ISTRING[50](PharmacyBaseGroup);
pharmacyBaseGroupName = GROUP NAGGR PharmacyBaseGroup pharmacyBaseGroup BY name(pharmacyBaseGroup);

@defineExternalizable(pharmacyBaseGroup, STRING[100]);
name(PharmacyBaseGroup group) += name(group);
groupType(PharmacyBaseGroup group) += PharmacyAdditionalGroupType.base IF group IS PharmacyBaseGroup;

FORM pharmacyBaseGroup 'Группа основного перечня'
    OBJECTS ph = PharmacyBaseGroup PANEL
    PROPERTIES(ph) name, id
    EDIT PharmacyBaseGroup OBJECT ph 
;

DESIGN pharmacyBaseGroup {
    PROPERTY(name(ph)) {
        width = 300;
        flex = 0;
    }
}

FORM pharmacyBaseGroups 'Группы основного перечня'
    OBJECTS g = PharmacyBaseGroup
    PROPERTIES(g) READONLYIF isReadonly() name, id
    PROPERTIES (g) NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES () isEditable
    ORDER name(g)
    LIST PharmacyBaseGroup OBJECT g
;

@defineObjectItemAttribute(pharmacyBaseGroup, PharmacyBaseGroup, name, 'Группа основного перечня', itemPharmacy);

@defineItemFilterValue(pharmacyBaseGroup, 'Группа основного перечня', ph);

@defineUniteFilterAttributeItem(pharmacyBaseGroup, name, 'группа основного перечня', 'группы основного перечня', item);
