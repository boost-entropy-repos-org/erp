MODULE EPrescription;

REQUIRE Utils, Integration, Retail, POSPharmacy, LegalEntityBy;

//------------- Настройки -------------
clientId 'Идентификатор' = DATA STRING[150]();
clientSecret 'Секретный ключ' = DATA STRING[150]();
scopes 'Scopes' = DATA STRING[1000]();
urlToken 'URL для получения токена' = DATA STRING[255]();
urlAPI 'URL к API' = DATA STRING[255]();

EXTEND FORM integrationData
    PROPERTIES() clientId, clientSecret, scopes, urlToken, urlAPI
;

DESIGN integrationData {
    pane {
       NEW ePrescription {
        caption = 'Электронные рецепты';
        fill = 1;
        MOVE PROPERTY(clientId());
        MOVE PROPERTY(clientSecret());
        MOVE PROPERTY(scopes());
        MOVE PROPERTY(urlToken());
        MOVE PROPERTY(urlAPI());
       }
    }
}

//-------------- Справочники ---------------
CLASS Gender 'Пол' {
    female 'Женский',
    male 'Мужской',
    unknown 'Неопределен',
    other 'Другой'
}
name 'Наименование' (Gender g) = staticCaption(g);

CLASS Medication 'Выписан по' {
    internationalNonproprietary 'МНН',
    trade 'TH'
}
name 'Наименование' (Medication m) = staticCaption(m);

CLASS MedicationPrescriptionStatus 'Статус' {
    active 'Действительный',
    onhold 'Приостановлен',
    completed 'Готово',
    enteredinerror 'Ошибка',
    stopped 'Стоп'
}
TABLE medicationPrescriptionStatus (MedicationPrescriptionStatus);
code  = DATA STRING[100] (MedicationPrescriptionStatus);
onStarted() + { 
    code(MedicationPrescriptionStatus s) <- 'active' WHERE s == MedicationPrescriptionStatus.active; 
    code(MedicationPrescriptionStatus s) <- 'on-hold' WHERE s == MedicationPrescriptionStatus.onhold; 
    code(MedicationPrescriptionStatus s) <- 'completed' WHERE s == MedicationPrescriptionStatus.completed; 
    code(MedicationPrescriptionStatus s) <- 'entered-in-error' WHERE s == MedicationPrescriptionStatus.enteredinerror; 
    code(MedicationPrescriptionStatus s) <- 'stopped' WHERE s == MedicationPrescriptionStatus.stopped; 
}
medicationPrescriptionStatus 'Статус' = GROUP AGGR MedicationPrescriptionStatus status BY code(status);
name 'Наименование' (MedicationPrescriptionStatus s) = staticCaption(s);

CLASS MedicamentType 'Тип лекарственного средства' {
    medicinal 'Лекарственное',
    narcotic 'Наркотическое',
    psychotropic 'Психотропное'
}
name 'Наименование' (MedicamentType t) = staticCaption(t);

//-------------- Клиент ------------
CLASS Client 'Клиент';
TABLE client(Client);

@defineExternalizable(client, STRING[100]);

idCard 'Номер карты' = DATA STRING[16] (Client) CHARWIDTH 16;
clientCard = GROUP AGGR Client client BY idCard(client);

family 'Фамилия' = DATA STRING[100] (Client);
given 'Имя и отчество' = DATA STRING[100] (Client);

gender 'Пол' = DATA Gender (Client);
nameGender 'Пол' (Client c) = name(gender(c));

birthday 'Дата рождения' = DATA DATE (Client);

active 'Активный' = DATA BOOLEAN (Client);

FORM clients 'Клиенты'
    OBJECTS c = Client
    PROPERTIES(c) READONLY active, idCard, family, given, nameGender, birthday
    
    LIST Client OBJECT c
;

//-------------- Электронный рецепт ------------
CLASS EPrescription 'Электронный рецепт';
TABLE ePrescription(EPrescription);

@defineExternalizable(ePrescription, STRING[100]);


seriesNumber 'Серия и номер' = DATA STRING[13] (EPrescription);

client 'Клиент' = DATA Client(EPrescription) NONULL DELETE;

nameOrganization 'Наименование мед. учреждения' = DATA STRING[255] (EPrescription);
addressOrganization 'Адрес мед. учреждения' = DATA STRING[255] (EPrescription);
idOrganization = DATA STRING[100] (EPrescription);

namePractitioner 'ФИО врача' = DATA STRING[100] (EPrescription);
idPractitioner = DATA STRING[100] (EPrescription);

startValidityPeriod 'Действует с' = DATA DATE (EPrescription);
endValidityPeriod 'Действует по' = DATA DATE (EPrescription);

medication 'Выписано по' = DATA Medication (EPrescription);
nameMedication 'Выписано по' (EPrescription ep) = name(medication(ep));
dosageInstruction 'Инструкция по дозировке и способу применения ' = DATA STRING[255] (EPrescription);
note 'Дополнительная информация' = DATA STRING[1000] (EPrescription);
dateWritten 'Дата выписки' = DATA DATE (EPrescription);

//active 'Активный' = DATA BOOLEAN (EPrescription);
status 'Статус' = DATA MedicationPrescriptionStatus (EPrescription);
nameStatus 'Статус' (EPrescription ep) = name(status(ep));

quantity 'Выписано' = DATA INTEGER (EPrescription);
quantitySold 'Продано' = DATA INTEGER (EPrescription);
quantityLeft 'Остаток' (EPrescription ep) =  quantity(ep) (-) quantitySold(ep);

factor 'Коэффициент суммы оплаты клиентом' = DATA NUMERIC[3,2] (EPrescription);
medicamentType 'Тип лекарственного средства' = DATA MedicamentType (EPrescription);
nameMedicamentType 'Тип лекарственного средства' (EPrescription ep) = name(medicamentType(ep));

//международное
internationalNonproprietaryId 'Код лекарственного средства' = DATA STRING[100] (EPrescription);
internationalNonproprietaryName 'Наименование' = DATA STRING[100] (EPrescription);

//торговое
tradeId 'Код лекарственного средства' = DATA STRING[100] (EPrescription);
tradeName 'Наименование' = DATA STRING[100] (EPrescription);
tradeProductForm 'Лекарственная форма' = DATA STRING[100] (EPrescription);

FORM ePrescriptions 'Электронные рецепты'
    OBJECTS ep = EPrescription
    PROPERTIES(ep) READONLY nameStatus, seriesNumber, dateWritten, startValidityPeriod, endValidityPeriod, factor 
    PROPERTIES READONLY idCard1 = idCard(client(ep)) HEADER 'Номер карты',
                            family1 = family(client(ep)) HEADER 'Фамилия', given1 = given(client(ep)) HEADER 'Имя и отчество'                            
    PROPERTIES(ep) READONLY nameOrganization, addressOrganization, namePractitioner, nameMedication,
                            internationalNonproprietaryId, internationalNonproprietaryName,
                            tradeId, tradeName, tradeProductForm, nameMedicamentType,
                            quantity, quantitySold, quantityLeft,
                            dosageInstruction, note
    ORDER dateWritten(ep) DESC
;

NAVIGATOR {
    retailNavigator {
        NEW FOLDER ePrescriptionData 'Электронные рецепты' {
            NEW clients;
            NEW ePrescriptions;
        }
    }
}

FORM ePrescriptionClient 'Электронные рецепты'
    OBJECTS c = Client PANEL
    PROPERTIES(c) READONLY active, idCard, family, given, nameGender, birthday
    
    OBJECTS ep = EPrescription
    PROPERTIES(ep) READONLY nameStatus, seriesNumber, dateWritten, startValidityPeriod, endValidityPeriod, factor
    PROPERTIES(ep) READONLY PANEL nameOrganization, addressOrganization, namePractitioner, nameMedication,
                                  internationalNonproprietaryId, internationalNonproprietaryName,
                                  tradeId, tradeName, tradeProductForm, nameMedicamentType,
                                  quantity, quantitySold, quantityLeft,
                                  dosageInstruction, note
                                  
    ORDER dateWritten(ep) DESC
    FILTERS client(ep) == c
    
    FILTERGROUP active
        FILTER 'Действительные' status(ep) == MedicationPrescriptionStatus.active AND iterate(currentDate(),startValidityPeriod(ep),endValidityPeriod(ep)) 'F5' DEFAULT
    
    LIST EPrescription OBJECT ep
;
DESIGN ePrescriptionClient {
    BOX(ep){
        NEW container BEFORE GRIDBOX(ep) {
            fill = 1;
            type = SPLITH;
            MOVE GRIDBOX(ep);
            MOVE PANEL(ep){
                type = CONTAINERV;
                MOVE PROPERTY(nameOrganization(ep));
                MOVE PROPERTY(addressOrganization(ep));
                MOVE PROPERTY(namePractitioner(ep));
                MOVE PROPERTY(nameMedication(ep));
                NEW item {
                    type = CONTAINERH;
                    NEW international {
                        caption = 'Международное наименование';
                        type = CONTAINERV;
                        MOVE PROPERTY(internationalNonproprietaryId(ep));
                        MOVE PROPERTY(internationalNonproprietaryName(ep));
                    }
                    NEW trade {
                        caption = 'Торговое наименование';
                        type = CONTAINERV;
                        MOVE PROPERTY(tradeId(ep));
                        MOVE PROPERTY(tradeName(ep));
                        MOVE PROPERTY(tradeProductForm(ep));
                    }
                }
                MOVE PROPERTY(nameMedicamentType(ep));
                NEW quantity {
                    type = CONTAINERH;
                    caption = 'Количество (дозы)';
                    MOVE PROPERTY(quantity(ep));
                    MOVE PROPERTY(quantitySold(ep));
                    MOVE PROPERTY(quantityLeft(ep));
                }
                MOVE PROPERTY(dosageInstruction(ep));
                MOVE PROPERTY(note(ep));
            }
        }
    }
}

token = DATA LOCAL NESTED STRING[2500]();

httpHeadersToken(TEXT name) = CASE
    WHEN name == 'Content-Type' THEN 'application/x-www-form-urlencoded';

httpBodyToken() = 'grant_type=client_credentials&client_id=' + clientId() + '&client_secret=' + clientSecret() + '&scope=' + scopes();

getToken () {
    LOCAL result = FILE();
    logToFile('EPrescription', 'GET: ' + urlToken() + '\n' + httpBodyToken());
    TRY {
        EXTERNAL HTTP urlToken() HEADERS httpHeadersToken PARAMS httpBodyToken() TO result;
        IMPORT JSON FROM result() TO() token = access_token;
        logToFile('EPrescription', result());
    } CATCH {
        logToFile('EPrescription', messageCaughtException());
        logToFile('EPrescription', result());
        MESSAGE 'Ошибка авторизации';
    }
}

GROUP resource;
resourceType = DATA LOCAL STRING[100] (INTEGER);
idClient = DATA LOCAL STRING[100] (INTEGER);
gender = DATA LOCAL STRING[10] (INTEGER);
birthDate = DATA LOCAL DATE (INTEGER);
active = DATA LOCAL BOOLEAN (INTEGER);

entryName = DATA LOCAL INTEGER (INTEGER);
use = DATA LOCAL STRING[100] (INTEGER);

nameFamily = DATA LOCAL INTEGER (INTEGER);
family = DATA LOCAL STRING[100] (INTEGER);

nameGiven = DATA LOCAL INTEGER (INTEGER);
given = DATA LOCAL STRING[100] (INTEGER);

subEntry = DATA LOCAL INTEGER (INTEGER);
subResourceType = DATA LOCAL STRING[100] (INTEGER);
subId = DATA LOCAL STRING[100] (INTEGER);
subStatus = DATA LOCAL STRING[20] (INTEGER);
subNote = DATA LOCAL STRING[1000] (INTEGER);
subDateWritten = DATA LOCAL DATE (INTEGER);

subEntryIdentifier = DATA LOCAL INTEGER (INTEGER);
identifierSystem = DATA LOCAL STRING[255] (INTEGER);
seriesNumber = DATA LOCAL STRING[13] (INTEGER);

subEntryDosageInstruction = DATA LOCAL INTEGER (INTEGER);
dosageInstruction = DATA LOCAL STRING[100] (INTEGER);

subEntryExtension = DATA LOCAL INTEGER (INTEGER);
extensionURL = DATA LOCAL STRING[255] (INTEGER);
factor = DATA LOCAL NUMERIC[3,2] (INTEGER);
GROUP valueCodeableConcept;
extensionCoding = DATA LOCAL INTEGER (INTEGER);
system = DATA LOCAL STRING[255] (INTEGER);
code = DATA LOCAL STRING[15] (INTEGER);

GROUP medication: resource;
subMedication = DATA LOCAL STRING[20] (INTEGER);

GROUP dispense: resource;
GROUP validityPeriod: dispense;
subStart = DATA LOCAL DATE (INTEGER);
subEnd = DATA LOCAL DATE (INTEGER);
GROUP quantity: dispense;
subQuantity = DATA LOCAL NUMERIC[16,5] (INTEGER);

subEntryContained = DATA LOCAL INTEGER (INTEGER);
containedResourceType = DATA LOCAL STRING[100] (INTEGER);
containedId = DATA LOCAL STRING[20] (INTEGER);
isBrand = DATA LOCAL BOOLEAN (INTEGER);
GROUP code;
containedSubCoding = DATA LOCAL INTEGER (INTEGER);
subSystem = DATA LOCAL STRING[255] (INTEGER);
subCode = DATA LOCAL STRING[100] (INTEGER);
subDisplay = DATA LOCAL STRING[100] (INTEGER);
GROUP product;
GROUP form: product;
containedFormCoding = DATA LOCAL INTEGER (INTEGER);
formSystem = DATA LOCAL STRING[255] (INTEGER);
formCode = DATA LOCAL STRING[100] (INTEGER);
formDisplay = DATA LOCAL STRING[100] (INTEGER);

GROUP patient: resource;
subPatient = DATA LOCAL STRING[100] (INTEGER);

GROUP prescriber: resource;
subPrescriber = DATA LOCAL STRING[100] (INTEGER);

GROUP name: resource;
subUse = DATA LOCAL STRING[100] (INTEGER);

subEntrySubFamily = DATA LOCAL INTEGER (INTEGER);
subFamily = DATA LOCAL STRING[100] (INTEGER);

subEntrySubGiven = DATA LOCAL INTEGER (INTEGER);
subGiven = DATA LOCAL STRING[100] (INTEGER);

subEntryPractitionerRole = DATA LOCAL INTEGER (INTEGER);
GROUP managingOrganization;
subOrganization = DATA LOCAL STRING[100] (INTEGER);

subName = DATA LOCAL STRING[255] (INTEGER);

subEntryAddress = DATA LOCAL INTEGER (INTEGER);
address = DATA LOCAL STRING[255] (INTEGER);

subEntryAuthorizingPrescription = DATA LOCAL INTEGER (INTEGER);
subPrescription = DATA LOCAL STRING[100] (INTEGER);

GROUP quantitySold EXTID 'quantity': resource;
quantitySold = DATA LOCAL NUMERIC[16,5] (INTEGER);

FORM importBundle
    OBJECTS entry = INTEGER
    PROPERTIES(entry) IN resource resourceType, idClient EXTID 'id', gender, birthDate, active
    
    OBJECTS name = INTEGER IN resource
    PROPERTIES(name) use
    FILTERS entryName(name) = entry
    
    OBJECTS family = INTEGER
    PROPERTIES(family) family EXTID 'value'
    FILTERS nameFamily(family) == name
    
    OBJECTS given = INTEGER
    PROPERTIES(given) given EXTID 'value'
    FILTERS nameGiven(given) == name
    
    OBJECTS subEntry = INTEGER EXTID 'entry' IN resource
    PROPERTIES(subEntry) IN resource subResourceType EXTID 'resourceType', subId EXTID 'id', subStatus EXTID 'status',
                                    subNote EXTID 'note', subDateWritten EXTID 'dateWritten'
    PROPERTIES(subEntry) IN medication subMedication EXTID 'reference'
    PROPERTIES(subEntry) IN validityPeriod subStart EXTID 'start', subEnd EXTID 'end'
    PROPERTIES(subEntry) IN quantity subQuantity EXTID 'value'
    PROPERTIES(subEntry) IN patient subPatient EXTID 'reference'
    PROPERTIES(subEntry) IN prescriber subPrescriber EXTID 'reference'
    FILTERS subEntry(subEntry) == entry
    
    OBJECTS identifier = INTEGER IN resource
    PROPERTIES(identifier) identifierSystem EXTID 'system', seriesNumber EXTID 'value'
    FILTERS subEntryIdentifier(identifier) == subEntry
    
    OBJECTS dosageInstruction = INTEGER IN resource
    PROPERTIES(dosageInstruction) dosageInstruction EXTID 'text'
    FILTERS subEntryDosageInstruction(dosageInstruction) == subEntry
    
    OBJECTS extension = INTEGER IN resource
    PROPERTIES(extension) extensionURL EXTID 'url', factor EXTID 'valueDecimal'
    FILTERS subEntryExtension(extension) == subEntry
    
    OBJECTS coding = INTEGER IN valueCodeableConcept
    PROPERTIES(coding) system, code
    FILTERS extensionCoding(coding) == extension
    
    OBJECTS contained = INTEGER IN resource
    PROPERTIES(contained) containedResourceType EXTID 'resourceType', containedId EXTID 'id', isBrand
    FILTERS subEntryContained(contained) == subEntry
    
    OBJECTS subCoding = INTEGER EXTID 'coding' IN code
    PROPERTIES(subCoding) subSystem EXTID 'system', subCode EXTID 'code', subDisplay EXTID 'display'
    FILTERS containedSubCoding(subCoding) == contained
    
    OBJECTS formCoding = INTEGER EXTID 'coding' IN form
    PROPERTIES(formCoding) formSystem EXTID 'system', formCode EXTID 'code', formDisplay EXTID 'display'
    FILTERS containedFormCoding(formCoding) == contained
    
    PROPERTIES(subEntry) IN name subUse EXTID 'use'
      
    OBJECTS subFamily = INTEGER EXTID 'family' IN name
    PROPERTIES(subFamily) subFamily EXTID 'value'
    FILTERS subEntrySubFamily(subFamily) == subEntry
      
    OBJECTS subGiven = INTEGER EXTID 'given' IN name
    PROPERTIES(subGiven) subGiven EXTID 'value'
    FILTERS subEntrySubGiven(subGiven) == subEntry
    
    OBJECTS practitionerRole = INTEGER IN resource
    PROPERTIES(practitionerRole) IN managingOrganization subOrganization EXTID 'reference'
    FILTERS subEntryPractitionerRole(practitionerRole) == subEntry
    
    PROPERTIES(subEntry) IN resource subName EXTID 'name'
    
    OBJECTS address = INTEGER IN resource
    PROPERTIES(address) address EXTID 'text'
    FILTERS subEntryAddress(address) == subEntry
    
    OBJECTS authorizingPrescription = INTEGER IN resource
    PROPERTIES(authorizingPrescription) subPrescription EXTID 'reference'
    FILTERS subEntryAuthorizingPrescription(authorizingPrescription) == subEntry
    
    PROPERTIES(subEntry) IN quantitySold quantitySold EXTID 'value'
;

httpHeadersPrescription(TEXT name) = CASE
    WHEN name == 'Authorization' THEN 'Bearer ' + token();

getPrescription 'Получить рецепты' (STRING[16] card) {
    IF card THEN {
        getToken();
        LOCAL result = FILE();
        logToFile('EPrescription', 'GET: ' + urlAPI() + '/MedicationPrescription/$by-card?patientIdentifier=' + card);
        TRY {
            EXTERNAL HTTP GET urlAPI() + '/MedicationPrescription/$by-card?patientIdentifier=' + card
                HEADERS httpHeadersPrescription TO result;
                
            IMPORT importBundle JSON FROM result();
            
            FOR resourceType(INTEGER i) == 'Patient'  AND Client c == client(idClient(i)) DO {
                family(c) <- STRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
                given(c) <- STRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
                gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
                active(c) <- active(i);
            }
            
            FOR resourceType(INTEGER i) == 'Patient'  AND NOT client(idClient(i)) DO NEW c = Client {
                id(c) <- idClient(i);
                idCard(c) <- card;
                family(c) <- STRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
                given(c) <- STRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
                gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
                birthday(c) <- birthDate(i);
                active(c) <- active(i);
            }
            
            FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND EPrescription ep == ePrescription(subId(i)) DO {
                status(ep) <- medicationPrescriptionStatus(subStatus(i));
                quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j
                                    AND (subStatus(j) == 'completed' OR subStatus(j) == 'in-progress');
            }
            
            FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND NOT ePrescription(subId(i)) DO NEW ep = EPrescription {
                id(ep) <- subId(i);
                seriesNumber(ep) <- GROUP MAX seriesNumber(INTEGER j) IF subEntryIdentifier(j) == i AND identifierSystem(j) == 'http://uiip.bas-net.by/hl7/fhir/serial-number';
                client(ep) <- client(getWord(subPatient(i),'/',2));
                note(ep) <- subNote(i);
                dateWritten(ep) <- subDateWritten(i);
                //active(ep) <- TRUE IF subStatus(i) == 'active';
                status(ep) <- medicationPrescriptionStatus(subStatus(i));
                dosageInstruction(ep) <- STRING[255](GROUP CONCAT dosageInstruction(INTEGER j) IF subEntryDosageInstruction(j) == i,' ');
                medication(ep) <- CASE WHEN subMedication(i) == '#internalMedication1' THEN Medication.trade
                                       WHEN subMedication(i) == '#internalMedication2' THEN Medication.internationalNonproprietary;
                startValidityPeriod(ep) <- subStart(i);
                endValidityPeriod(ep) <- subEnd(i);
                quantity(ep) <- subQuantity(i);
                quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j
                                    AND (subStatus(j) == 'completed' OR subStatus(j) == 'in-progress');
                factor(ep) <- OVERRIDE (GROUP MAX factor(INTEGER j) IF subEntryExtension(j) == i AND extensionURL(j) == 'http://fhir.org/fhir/StructureDefinition/by-factor'), 1.0;
                medicamentType(ep) <- GROUP MAX MedicamentType t IF getWord(staticName(t),'.',2) == code(INTEGER j) IF subEntryExtension(extensionCoding(j)) == i AND 
                                      system(j) == 'http://hl7.org/fhir/vs/by-medicament-type';
                internationalNonproprietaryId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                     containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                     subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                     containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                     NOT isBrand(containedSubCoding(j));
                internationalNonproprietaryName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                       containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                       subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                       containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                       NOT isBrand(containedSubCoding(j));
                tradeId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                               containedResourceType(containedSubCoding(j)) == 'Medication' AND
                               subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                               containedId(containedSubCoding(j)) == 'internalMedication1' AND
                               isBrand(containedSubCoding(j));
                tradeName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                                 containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                 subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                                 containedId(containedSubCoding(j)) == 'internalMedication1' AND
                                 isBrand(containedSubCoding(j));
                tradeProductForm(ep) <- GROUP MAX (OVERRIDE formDisplay(INTEGER j), formCode(j)) IF subEntryContained(containedFormCoding(j)) == i AND
                                        containedResourceType(containedFormCoding(j)) == 'Medication' AND
                                        formSystem(j) == 'http://www.pharma.by/Справочник.ЛекарственнаяФорма' AND
                                        containedId(containedFormCoding(j)) == 'internalMedication1' AND
                                        isBrand(containedFormCoding(j));
                idPractitioner(ep) <- STRING[100](getWord(subPrescriber(i),'/',2));
                namePractitioner(ep) <- STRING[100](CONCAT ' ', (GROUP CONCAT subFamily(INTEGER j) IF subResourceType(subEntrySubFamily(j)) == 'Practitioner' AND subId(subEntrySubFamily(j)) == idPractitioner(ep) AND subUse(subEntrySubFamily(j)) == 'official', ' '),
                                      (GROUP CONCAT subGiven(INTEGER j) IF subResourceType(subEntrySubGiven(j)) == 'Practitioner' AND subId(subEntrySubGiven(j)) == idPractitioner(ep) AND subUse(subEntrySubGiven(j)) == 'official', ' '));
                idOrganization(ep) <- STRING[100](GROUP MAX getWord(subOrganization(INTEGER j),'/',2) IF subResourceType(subEntryPractitionerRole(j)) == 'Practitioner' AND subId(subEntryPractitionerRole(j)) == idPractitioner(ep));
                nameOrganization(ep) <- STRING[255](GROUP MAX subName(INTEGER j) IF subResourceType(j) == 'Organization' AND subId(j) == idOrganization(ep));
                addressOrganization(ep) <- STRING[255](GROUP CONCAT address(INTEGER j) IF subResourceType(subEntryAddress(j)) == 'Organization' AND subId(subEntryAddress(j)) == idOrganization(ep), ' ');
            }
            logToFile('EPrescription', result());
        } CATCH {
            logToFile('EPrescription', messageCaughtException());
            logToFile('EPrescription', result());
            MESSAGE 'Ошибка получения электронных рецептов, отображаемые рецепты могут содержать устаревшую информацию';
        }
    }
}

card 'Номер карты' = DATA LOCAL NESTED STRING[16]();

getPrescription 'Получить рецепты' () {
    getPrescription(card());
    DIALOG ePrescriptionClient OBJECTS c = client(idClient(0));
}

getFromFile 'Загрузить из файла' (STRING[16] card) {
    INPUT f = FILE DO {
        //LOCAL f = FILE();
        //READ 'C://Users/Ini/Desktop/ER.json' TO f;
        IMPORT importBundle JSON CHARSET 'CP1251' FROM f;
        
        FOR resourceType(INTEGER i) == 'Patient'  AND Client c == client(idClient(i)) DO {
            family(c) <- STRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
            given(c) <- STRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
            gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
            active(c) <- active(i);
        }
        
        FOR resourceType(INTEGER i) == 'Patient'  AND NOT client(idClient(i)) DO NEW c = Client {
            id(c) <- idClient(i);
            idCard(c) <- card;
            family(c) <- STRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
            given(c) <- STRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
            gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
            birthday(c) <- birthDate(i);
            active(c) <- active(i);
        }
        
        FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND EPrescription ep == ePrescription(subId(i)) DO {
            status(ep) <- medicationPrescriptionStatus(subStatus(i));
            quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j
                                AND (subStatus(j) == 'completed' OR subStatus(j) == 'in-progress');
        }
        
        FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND NOT ePrescription(subId(i)) DO NEW ep = EPrescription {
            id(ep) <- subId(i);
            seriesNumber(ep) <- GROUP MAX seriesNumber(INTEGER j) IF subEntryIdentifier(j) == i AND identifierSystem(j) == 'http://uiip.bas-net.by/hl7/fhir/serial-number';
            client(ep) <- client(getWord(subPatient(i),'/',2));
            note(ep) <- subNote(i);
            dateWritten(ep) <- subDateWritten(i);
            //active(ep) <- TRUE IF subStatus(i) == 'active';
            status(ep) <- medicationPrescriptionStatus(subStatus(i));
            dosageInstruction(ep) <- STRING[255](GROUP CONCAT dosageInstruction(INTEGER j) IF subEntryDosageInstruction(j) == i,' ');
            medication(ep) <- CASE WHEN subMedication(i) == '#internalMedication1' THEN Medication.trade
                                   WHEN subMedication(i) == '#internalMedication2' THEN Medication.internationalNonproprietary;
            startValidityPeriod(ep) <- subStart(i);
            endValidityPeriod(ep) <- subEnd(i);
            quantity(ep) <- subQuantity(i);
            quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j
                                AND (subStatus(j) == 'completed' OR subStatus(j) == 'in-progress');
            factor(ep) <- OVERRIDE (GROUP MAX factor(INTEGER j) IF subEntryExtension(j) == i AND extensionURL(j) == 'http://fhir.org/fhir/StructureDefinition/by-factor'), 1.0;
            medicamentType(ep) <- GROUP MAX MedicamentType t IF getWord(staticName(t),'.',2) == code(INTEGER j) IF subEntryExtension(extensionCoding(j)) == i AND 
                                  system(j) == 'http://hl7.org/fhir/vs/by-medicament-type';
            internationalNonproprietaryId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                 containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                 subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                 containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                 NOT isBrand(containedSubCoding(j));
            internationalNonproprietaryName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                   containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                   subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                   containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                   NOT isBrand(containedSubCoding(j));
            tradeId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                           containedResourceType(containedSubCoding(j)) == 'Medication' AND
                           subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                           containedId(containedSubCoding(j)) == 'internalMedication1' AND
                           isBrand(containedSubCoding(j));
            tradeName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                             containedResourceType(containedSubCoding(j)) == 'Medication' AND
                             subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                             containedId(containedSubCoding(j)) == 'internalMedication1' AND
                             isBrand(containedSubCoding(j));
            tradeProductForm(ep) <- GROUP MAX (OVERRIDE formDisplay(INTEGER j), formCode(j)) IF subEntryContained(containedFormCoding(j)) == i AND
                                    containedResourceType(containedFormCoding(j)) == 'Medication' AND
                                    formSystem(j) == 'http://www.pharma.by/Справочник.ЛекарственнаяФорма' AND
                                    containedId(containedFormCoding(j)) == 'internalMedication1' AND
                                    isBrand(containedFormCoding(j));
            idPractitioner(ep) <- STRING[100](getWord(subPrescriber(i),'/',2));
            namePractitioner(ep) <- STRING[100](CONCAT ' ', (GROUP CONCAT subFamily(INTEGER j) IF subResourceType(subEntrySubFamily(j)) == 'Practitioner' AND subId(subEntrySubFamily(j)) == idPractitioner(ep) AND subUse(subEntrySubFamily(j)) == 'official', ' '),
                                  (GROUP CONCAT subGiven(INTEGER j) IF subResourceType(subEntrySubGiven(j)) == 'Practitioner' AND subId(subEntrySubGiven(j)) == idPractitioner(ep) AND subUse(subEntrySubGiven(j)) == 'official', ' '));
            idOrganization(ep) <- STRING[100](GROUP MAX getWord(subOrganization(INTEGER j),'/',2) IF subResourceType(subEntryPractitionerRole(j)) == 'Practitioner' AND subId(subEntryPractitionerRole(j)) == idPractitioner(ep));
            nameOrganization(ep) <- STRING[255](GROUP MAX subName(INTEGER j) IF subResourceType(j) == 'Organization' AND subId(j) == idOrganization(ep));
            addressOrganization(ep) <- STRING[255](GROUP CONCAT address(INTEGER j) IF subResourceType(subEntryAddress(j)) == 'Organization' AND subId(subEntryAddress(j)) == idOrganization(ep), ' ');
        }
    }
}

getFromFile 'Загрузить из файла' () {
    getFromFile(card());
    DIALOG ePrescriptionClient OBJECTS c = client(idClient(0));
}

//коды для товаров
GROUP itemEPrescription 'Электронный рецепт' : public;
internationalNonproprietaryId 'Код МНН' = DATA STRING[100] (Item) IN itemEPrescription CHARWIDTH 10;
tradeId 'Код ТН' = DATA STRING[100] (Item) IN itemEPrescription CHARWIDTH 10;

EXTEND FORM item
    PROPERTIES(i) internationalNonproprietaryId, tradeId
;
DESIGN item {
    itemPrimaryColumn2 {
        MOVE GROUP(itemEPrescription,i) {
            alignment = STRETCH;
            type = CONTAINERV;
        }
    }
}
EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() internationalNonproprietaryId, tradeId
;

//фильтр по клиенту и рецепту
filterClient = DATA LOCAL NESTED Client();
nameFilterClient 'Код карты клиента' () = idCard(filterClient()) CHARWIDTH 16;
filterEPrescription = DATA LOCAL NESTED EPrescription();
nameFilterEPrescription 'Рецепт' () = CONCAT ', ', 'кол-во: ' + quantityLeft(filterEPrescription()), tradeName(filterEPrescription()), tradeProductForm(filterEPrescription());
filterEPrescription (Batch bt) = internationalNonproprietaryId(sku(bt)) == internationalNonproprietaryId(filterEPrescription()) OR 
                                            tradeId(sku(bt)) == tradeId(filterEPrescription()) OR NOT filterEPrescription();
filterMedication = DATA LOCAL NESTED Medication();
nameFilterMedication 'Фильтр' () = name(filterMedication()) CHARWIDTH 5;
filterMedication(Batch bt) = CASE WHEN filterMedication() == Medication.trade AND filterEPrescription() THEN tradeId(sku(bt)) == tradeId(filterEPrescription())
                                        WHEN filterMedication() == Medication.internationalNonproprietary AND filterEPrescription() THEN internationalNonproprietaryId(sku(bt)) == internationalNonproprietaryId(filterEPrescription())
                                        ELSE TRUE;

WHEN LOCAL DROPPED(filterClient()) DO {
    filterMedication() <- NULL;
    filterEPrescription() <- NULL;
}

WHEN LOCAL CHANGED(filterEPrescription()) DO {
    filterMedication() <- IF filterEPrescription() THEN Medication.trade ELSE NULL;
}

overChangeBarcode (STRING[30] string, Receipt receipt) + {
    IF receipt IS Receipt AND length(string) == 16 THEN {
        getPrescription(string);
        filterClient() <- clientCard(string);
        filterEPrescription() <- NULL;
        DIALOG ePrescriptionClient OBJECTS c = clientCard(string), ep = filterEPrescription() CHANGE;
        
        consumedChangeBarcodeReceipt() <- TRUE;
    }
}

changeFilterClient () {
    ASK 'Вы действительно хотите сбросить клиента?' DO {
        filterClient() <- NULL;
    }
}

changeFilterEPrescription () {
    DIALOG ePrescriptionClient OBJECTS c = filterClient(), ep = filterEPrescription() CHANGE;
}

ePrescription = ABSTRACT EPrescription (ReceiptDetail) MATERIALIZED;
ePrescription = DATA EPrescription (ReceiptSaleDetail);
ePrescription(ReceiptSaleDetail detail) += ePrescription(detail);

idEPrescription 'Электронный рецепт' (ReceiptDetail detail) = id(ePrescription(detail));
idCardEPrescription 'Номер карты' (ReceiptDetail detail) = idCard(client(ePrescription(detail)));
captionClient 'Клиент' (ReceiptDetail detail) = CONCAT ' ', family(client(ePrescription(detail))), given(client(ePrescription(detail))) CHARWIDTH 35; 
 
EXTEND FORM zReport
    PROPERTIES (d) AFTER nameBatch(d) idCardEPrescription, captionClient, idEPrescription
;

EXTEND FORM zReports
    PROPERTIES (d) READONLY AFTER nameBatch(d) idCardEPrescription, captionClient, idEPrescription
;

dosageQuantity 'Кол-во доз' = ABSTRACT INTEGER (ReceiptDetail) MATERIALIZED;
dosageQuantity 'Кол-во доз' (receiptDetail) = DATA INTEGER (ReceiptSaleDetail);
dosageQuantity(ReceiptSaleDetail detail) += dosageQuantity(detail);


dosageQuantity 'Кол-во доз' = GROUP SUM dosageQuantity(ReceiptSaleDetail receiptDetail)
        BY batch(receiptDetail), receipt(receiptDetail);

changeDosage(Batch batch, Receipt receipt)  { 
    INPUT n = NUMERIC[16,5] DO
        dosageQuantity(ReceiptSaleDetail detail) <- n WHERE receiptDetail(batch, receipt) == detail;
}

dosageQuantity 'Кол-во доз' (EPrescription ep, Receipt receipt) = GROUP SUM dosageQuantity(ReceiptSaleDetail detail) BY ePrescription(detail), receipt(detail);

backgroundDosage (Batch batch, Receipt receipt) = IF ePrescription(receiptDetail(batch, receipt)) AND 
    (dosageQuantity(ePrescription(receiptDetail(batch, receipt)),receipt) > quantityLeft(ePrescription(receiptDetail(batch, receipt))) OR NOT dosageQuantity(batch,receipt)) THEN RGB(255,128,128);
backgroundDosage (ReceiptDetail detail) = IF ePrescription(detail) AND 
    (dosageQuantity(ePrescription(detail),receipt(detail)) > quantityLeft(ePrescription(detail)) OR NOT dosageQuantity(detail)) THEN RGB(255,128,128);
readOnlyDosage (ReceiptDetail detail) = detail IS ReceiptDetail AND NOT ePrescription(detail);


overCreateReceiptSaleDetail (Batch batch, Receipt receipt) + {
    ePrescription(ReceiptSaleDetail detail) <- filterEPrescription() WHERE detail == receiptDetail(batch, receipt);
}

in(EPrescription ep, Receipt receipt) = GROUP SUM 1 BY ePrescription(ReceiptDetail d), receipt(d);

incorrectReceipt(Receipt r) += WHEN (GROUP SUM 1 IF [GROUP SUM 1 IF in(EPrescription ep, r) BY client(ep)](Client c) AND NOT active(c))
                               THEN TEXT('Запрещено отоваривать по рецепту неактивного клиента ' + (GROUP CONCAT (CONCAT ' ', idCard(Client c), family(c), given(c)) IF [GROUP SUM 1 IF in(EPrescription ep, r) BY client(ep)](c) AND NOT active(c),', '));
incorrectReceipt(Receipt r) += WHEN (GROUP SUM 1 IF [GROUP SUM 1 IF in(EPrescription ep, r) AND NOT status(ep) == MedicationPrescriptionStatus.active BY ep](EPrescription p))
                               THEN TEXT('Запрещено отоваривать по неактивному рецепту ' + (GROUP CONCAT (CONCAT ' ', seriesNumber(EPrescription p), 'от ' + dateWritten(p)) IF [GROUP SUM 1 IF in(EPrescription ep, r) AND NOT status(ep) == MedicationPrescriptionStatus.active BY ep](p),', '));
incorrectReceipt(Receipt r) += WHEN (GROUP SUM 1 IF [GROUP SUM 1 IF in(EPrescription ep, r) AND NOT (date(r) >= startValidityPeriod(ep) AND date(r) <= endValidityPeriod(ep)) BY ep](EPrescription p))
                               THEN TEXT('Запрещено отоваривать по рецепту с неактивным сроком действия ' + (GROUP CONCAT (CONCAT ' ', seriesNumber(EPrescription p), 'от ' + dateWritten(p)) IF [GROUP SUM 1 IF in(EPrescription ep, r) AND NOT (date(r) >= startValidityPeriod(ep) AND date(r) <= endValidityPeriod(ep)) BY ep](p),', '));
incorrectReceipt(Receipt r) += WHEN (GROUP SUM 1 IF [GROUP SUM 1 IF in(EPrescription ep, r) AND dosageQuantity(ep,r) > quantityLeft(ep) BY ep](EPrescription p))
                               THEN TEXT('Заданное количество доз превышает остаток по рецепту ' + (GROUP CONCAT (CONCAT ' ', seriesNumber(EPrescription p), 'от ' + dateWritten(p)) IF [GROUP SUM 1 IF in(EPrescription ep, r) AND dosageQuantity(ep,r) > quantityLeft(ep) BY ep](p),', '));
incorrectReceipt(Receipt r) += WHEN (GROUP SUM 1 IF [GROUP SUM 1 IF in(EPrescription ep, r) AND NOT dosageQuantity(ep,r) BY ep](EPrescription p))
                               THEN TEXT('Не задано количество доз для товаров, отпускаемых по рецепту ' + (GROUP CONCAT (CONCAT ' ', seriesNumber(EPrescription p), 'от ' + dateWritten(p)) IF [GROUP SUM 1 IF in(EPrescription ep, r) AND NOT dosageQuantity(ep,r) BY ep](p),', '));

idEPrescription 'Код' = DATA STRING[20] (LegalEntity) CHARWIDTH 15;

EXTEND FORM legalEntity
    PROPERTIES(l) idEPrescription
;
DESIGN legalEntity {
    column2 {
        NEW ePrescription {
            caption = 'Электронный рецепт';
            fill = 1;
            MOVE PROPERTY(idEPrescription(l));
        }
    }
}

textDispense(EPrescription ep, Receipt r) = '\{"resourceType": "Parameters", ' +
                                                    '"parameter": [ \{ ' +
                                                    '"name": "medicationDispense", ' +
                                                    '"resource": \{ ' +
                                                    '"resourceType": "MedicationDispense", ' +
                                                    '"extension": [ \{ ' +
                                                    '"url": "http://fhir.org/fhir/StructureDefinition/by-finalDispense", ' +
                                                    '"valueBoolean": ' + (IF dosageQuantity(ep,r) == quantityLeft(ep) THEN 'true' ELSE 'false') + ' \} ], ' +
                                                    '"contained": [ \{ ' +
                                                    '"resourceType": "Medication", ' +
                                                    '"id": "internalMedication1", ' +
                                                    '"isBrand": true, ' +
                                                    '"code": \{ "coding": [ \{ ' +
                                                    '"system": "http://www.pharma.by/Справочник.Дозировка", ' +
                                                    '"code": "' + tradeId(ep) + '" ' + ' \} ] \} \}, ' +
                                                    '\{ "resourceType": "Location", ' +
                                                    '"identifier": [ \{ ' +
                                                    '"system": "http://klass.belcmt.by/", ' +
                                                    '"value": "' + idEPrescription(legalEntityDepartmentStore(r)) + '" \}, ' +
                                                    '\{ "system": "http://uiip.bas-net.by/hl7/fhir/organization-number-in-the-statistical-register", ' +
                                                    '"value": "' + OKPO(legalEntityDepartmentStore(r)) + '" \} ], ' +
                                                    '"name": "' + replace(nameDepartmentStore(r),'"','\\"') + '", ' +
                                                    '"address": \{ "extension": [ \{ ' +
                                                    '"url": "http://fhir.org/fhir/StructureDefinition/by-AddressType", ' +
                                                    '"valueCodeableConcept": \{ "coding": [ \{ ' +
                                                    '"system": "http://hl7.org/fhir/vs/by-address-type", ' +
                                                    '"code": "location" ' + '\} ] \} \} ], ' +
                                                    '"use": "home", ' +
                                                    '"text": "' + replace(address(departmentStore(r)),'"','\\"') +'" \} \} ], ' +
                                                    '"status": "completed", ' +
                                                    '"note": "", ' +
                                                    '"patient": \{ ' +
                                                    '"reference": "Patient/' + id(client(ep)) + '" \}, ' +
                                                    '"authorizingPrescription": [ \{ ' +
                                                    '"reference": "MedicationPrescription/' + id(ep) + '" \} ], ' +
                                                    '"quantity": \{ ' +
                                                    '"value": ' + dosageQuantity(ep,r) + ' \}, ' +
                                                    '"medication": \{ ' +
                                                    '"reference": "' + '#internalMedication1' + '" \}, ' +
                                                    '"whenHandedOver": "' + toChar(date(r),'YYYY-MM-DD') + '" \} \} ] \}';

httpHeadersDispense(TEXT name) = CASE
    WHEN name == 'Authorization' THEN 'Bearer ' + token()
    WHEN name == 'Content-Type' THEN 'application/json';

idMedicationDispense 'Код регистрации отпуска' = DATA STRING[100] (EPrescription, Receipt);

postDispense 'Повторить регистрацию отпуска' (EPrescription ep, Receipt r) {
    IF NOT idMedicationDispense(ep,r) THEN {
        LOCAL file = TEXT();
        file() <- textDispense(ep,r);
        stringToFile(file(),'UTF-8','json');
        
        getToken();
        LOCAL result = FILE();
        logToFile('EPrescription', 'POST: ' + urlAPI() + '/MedicationDispense/$register' + '\n' + file());
        TRY {
            EXTERNAL HTTP POST urlAPI() + '/MedicationDispense/$register' HEADERS httpHeadersDispense PARAMS resultFile() TO result;
            IMPORT importBundle JSON FROM result();
            
            idMedicationDispense(ep,r) <- GROUP MAX idClient(INTEGER i) IF resourceType(i) == 'MedicationDispense';
            status(ep) <- MedicationPrescriptionStatus.completed WHERE dosageQuantity(ep,r) == quantityLeft(ep);
            quantitySold(ep) <- quantitySold(ep) (+) dosageQuantity(ep,r);
            
            APPLY;
            MESSAGE 'Операция регистрации отпуска по электронному рецепту ' + (CONCAT ' ', seriesNumber(ep), 'от ' + dateWritten(ep)) + ' проведена успешно';
            logToFile('EPrescription', result());
        }
        CATCH {
            logToFile('EPrescription', messageCaughtException());
            logToFile('EPrescription', result());
            MESSAGE 'Ошибка проведения операции регистрации отпуска по электронному рецепту ' + (CONCAT ' ', seriesNumber(ep), 'от ' + dateWritten(ep));
        }
    }
}


postDispense (Receipt r) {
    FOR in(EPrescription ep, r) DO {
        postDispense(ep,r);
    }
}
postPrint (Receipt receipt) + {
    postDispense(receipt);
    filterClient() <- NULL;
    filterEPrescription() <- NULL;
    filterMedication() <- NULL;
    
}

EXTEND FORM POS
    PROPERTIES() SHOWIF filterClient() nameFilterClient ON CHANGE changeFilterClient(), nameFilterEPrescription ON CHANGE changeFilterEPrescription(), nameFilterMedication
    FILTERS filterEPrescription(bt), filterMedication(bt)
    FILTERS filterEPrescription(bt1), filterMedication(bt1)
    PROPERTIES (bt,r) dosageQuantityReceiptGrid = dosageQuantity SHOWIF filterEPrescription() BEFORE currentPOSPrice(bt, r) BACKGROUND backgroundDosage(bt,r) ON CHANGE changeDosage(bt,r)
    PROPERTIES (d) dosageQuantityGrid = dosageQuantity BEFORE priceGrid BACKGROUND backgroundDosage(d) READONLYIF readOnlyDosage(d) 
;
DESIGN POS {
    NEW ePrescription AFTER north {
        caption = 'Электронный рецепт';
        type = CONTAINERH;
        alignment = STRETCH;
        MOVE PROPERTY(nameFilterClient()) {
            focusable = FALSE; font = 'bold 22'; panelCaptionAbove = TRUE; flex = 0; changeKey = 'F8';
        }
        MOVE PROPERTY(nameFilterEPrescription()) {
            focusable = FALSE; font = '22'; panelCaptionAbove = TRUE; changeKey = 'F6';
        }
        MOVE PROPERTY(nameFilterMedication()) {
            focusable = FALSE; font = 'bold 22'; panelCaptionAbove = TRUE; flex = 0; changeKey = 'F7';
        }
    }
    BOX(bt) {
        PROPERTY(dosageQuantityReceiptGrid) { focusable = TRUE; font = '18'; charWidth = 3; }
    }
    BOX(d) {
        PROPERTY(dosageQuantityGrid) { focusable = TRUE; font = '18'; charWidth = 5; }
    }
}

isCanceled 'Отменен' = DATA BOOLEAN (EPrescription, Receipt);

postCancelDispense 'Отменить отпуск' (EPrescription ep, Receipt r) {
    IF NOT isCanceled(ep,r) AND idMedicationDispense(ep,r) THEN {
        getToken();
        LOCAL result = FILE();
        logToFile('EPrescription', 'POST: ' + urlAPI() + '/MedicationDispense/' + idMedicationDispense(ep,r) + '/$set-as-error');
        TRY {
            EXTERNAL HTTP POST urlAPI() + '/MedicationDispense/' + idMedicationDispense(ep,r) + '/$set-as-error' HEADERS httpHeadersDispense TO result;
            IMPORT importBundle JSON FROM result();
            
            isCanceled(ep,r) <- TRUE IF idMedicationDispense(ep,r) == (GROUP MAX idClient(INTEGER i) IF resourceType(i) == 'MedicationDispense');
            quantitySold(ep) <- quantitySold(ep) (-) dosageQuantity(ep,r);
            status(ep) <- MedicationPrescriptionStatus.active;
            APPLY;
            MESSAGE 'Операция отметки об ошибочности отпуска по электронному рецепту ' + (CONCAT ' ', seriesNumber(ep), 'от ' + dateWritten(ep)) + ' проведена успешно';
            logToFile('EPrescription', result());
        }
        CATCH {
            logToFile('EPrescription', messageCaughtException());
            logToFile('EPrescription', result());
            MESSAGE 'Ошибка проведения операции отметки об ошибочности отпуска по электронному рецепту ' + (CONCAT ' ', seriesNumber(ep), 'от ' + dateWritten(ep));
        }
    }
}

nameSku 'Товар' (EPrescription ep, Receipt r) = GROUP CONCAT nameSku(ReceiptSaleDetail detail),', ' BY ePrescription(detail), receipt(detail) CHARWIDTH 20;


FORM ePrescriptionDashboard 'Обработка электронных рецептов'
    OBJECTS d1 = (r1 = Receipt, ep1 = EPrescription)
    PROPERTIES READONLY dateTime(r1), nameDepartmentStore(r1), nameEmployee(r1), nameSku(ep1,r1), dosageQuantity(ep1,r1),
                        seriesNumber(ep1), idCard1 = idCard(client(ep1)) HEADER 'Номер карты',
                        family1 = family(client(ep1)) HEADER 'Фамилия', given1 = given(client(ep1)) HEADER 'Имя и отчество'
    PROPERTIES postDispense(ep1,r1) TOOLBAR
    ORDER dateTime(r1) DESC
    FILTERS in(ep1,r1) AND NOT idMedicationDispense(ep1,r1)
    
    OBJECTS d2 = (r2 = Receipt, ep2 = EPrescription)
    PROPERTIES READONLY dateTime(r2), nameDepartmentStore(r2), nameEmployee(r2), nameSku(ep2,r2), dosageQuantity(ep2,r2),
                        seriesNumber(ep2), idCard2 = idCard(client(ep2)) HEADER 'Номер карты',
                        family2 = family(client(ep2)) HEADER 'Фамилия', given2 = given(client(ep2)) HEADER 'Имя и отчество'
    PROPERTIES postCancelDispense(ep2,r2) TOOLBAR
    ORDER dateTime(r2) DESC
    FILTERS in(ep2,r2) AND idMedicationDispense(ep2,r2) AND NOT isCanceled(ep2,r2)
;

DESIGN ePrescriptionDashboard {
    OBJECTS {
        type = TABBED;
        BOX(d1) { caption = 'Повторная регистрация отпуска по рецептам'; }
        BOX(d2) { caption = 'Отмена отпуска по рецептам'; }
    }
}

NAVIGATOR {
    retailDashboardNavigator {
        NEW ePrescriptionDashboard;
    }
}

EXTEND FORM ePrescriptions
    OBJECTS r = Receipt
    PROPERTIES READONLY dateTime(r), nameDepartmentStore(r), nameEmployee(r), nameSku(ep,r), dosageQuantity(ep,r),
                        idMedicationDispense(ep,r), isCanceled(ep,r)
    PROPERTIES TOOLBAR postDispense(ep,r) SHOWIF NOT idMedicationDispense(ep,r), postCancelDispense(ep,r) SHOWIF (NOT isCanceled(ep,r) AND idMedicationDispense(ep,r))
    FILTERS in(ep,r)
;

CONSTRAINT DROPPED(Receipt r IS Receipt) AND (GROUP SUM 1 IF PREV(in(EPrescription ep,r)))
    MESSAGE 'Запрещено удалять чек продажи товаров по электронным рецептам';
CONSTRAINT DROPPED(ReceiptSaleDetail d IS ReceiptSaleDetail) AND (GROUP SUM 1 IF PREV(ePrescription(d)))
    MESSAGE 'Запрещено удалять строку чека продажи товаров по электронным рецептам';
CONSTRAINT DROPPED(Client c IS Client) AND (GROUP SUM 1 IF in(EPrescription ep, Receipt r) AND client(ep) == c)
    MESSAGE 'Запрещено удалять клиента с продажами по электронным рецептам';
CONSTRAINT DROPPED(EPrescription ep IS EPrescription) AND (GROUP SUM 1 IF PREV(in(ep, Receipt r)))
    MESSAGE 'Запрещено удалять электронный рецепт с продажами';

//действие очистки для планировщика
clearEPrescription () {
    DELETE EPrescription ep WHERE ep IS EPrescription AND NOT (GROUP SUM 1 IF in(ep, Receipt r));
    DELETE Client c WHERE c IS Client AND NOT (GROUP SUM 1 IF in(EPrescription ep, Receipt r) AND client(ep) == c);
    APPLY;
}