MODULE EPrescription;

REQUIRE Utils, Integration, Retail;

//------------- Настройки -------------
clientId 'Идентификатор' = DATA VARSTRING[150]();
clientSecret 'Секретный ключ' = DATA VARSTRING[150]();
scopes 'Scopes' = DATA VARSTRING[1000]();
urlToken 'URL для получения токена' = DATA VARSTRING[255]();
urlAPI 'URL к API' = DATA VARSTRING[255]();

EXTEND FORM integrationData
    PROPERTIES() clientId, clientSecret, scopes, urlToken, urlAPI
;

DESIGN integrationData {
    pane {
       NEW ePrescription {
        caption = 'Электронные рецепты';
        fill = 1;
        MOVE PROPERTY(clientId());
        MOVE PROPERTY(clientSecret());
        MOVE PROPERTY(scopes());
        MOVE PROPERTY(urlToken());
        MOVE PROPERTY(urlAPI());
       }
    }
}

//-------------- Справочники ---------------
CLASS Gender 'Пол' {
    female 'Женский',
    male 'Мужской',
    unknown 'Неопределен',
    other 'Другой'
}
name 'Наименование' (Gender g) = staticCaption(g);

CLASS MedicationPrescriptionStatus 'Статус' {
    active 'Действительный',
    onhold 'Приостановлен',
    completed 'Готово',
    enteredinerror 'Ошибка',
    stopped 'Стоп'
}
TABLE medicationPrescriptionStatus (MedicationPrescriptionStatus);
code  = DATA VARSTRING[100] (MedicationPrescriptionStatus);
onStarted() + { 
    code(MedicationPrescriptionStatus s) <- 'active' WHERE s == MedicationPrescriptionStatus.active; 
    code(MedicationPrescriptionStatus s) <- 'on-hold' WHERE s == MedicationPrescriptionStatus.onhold; 
    code(MedicationPrescriptionStatus s) <- 'completed' WHERE s == MedicationPrescriptionStatus.completed; 
    code(MedicationPrescriptionStatus s) <- 'entered-in-error' WHERE s == MedicationPrescriptionStatus.enteredinerror; 
    code(MedicationPrescriptionStatus s) <- 'stopped' WHERE s == MedicationPrescriptionStatus.stopped; 
}
medicationPrescriptionStatus 'Статус' = GROUP AGGR MedicationPrescriptionStatus status BY code(status);
name 'Наименование' (MedicationPrescriptionStatus s) = staticCaption(s);

CLASS MedicamentType 'Тип лекарственного средства' {
    medicinal 'Лекарственное',
    narcotic 'Наркотическое',
    psychotropic 'Психотропное'
}
name 'Наименование' (MedicamentType t) = staticCaption(t);

//-------------- Клиент ------------
CLASS Client 'Клиент';
TABLE client(Client);

@defineExternalizable(client, VARSTRING[100]);

idCard 'Код карточки' = DATA VARSTRING[16] (Client) CHARWIDTH 16;
//clientCard 'Статус' = GROUP AGGR Client client BY idCard(client);

family 'Фамилия' = DATA VARSTRING[100] (Client);
given 'Имя и отчество' = DATA VARSTRING[100] (Client);

gender 'Пол' = DATA Gender (Client);
nameGender 'Пол' (Client c) = name(gender(c));

birthday 'Дата рождения' = DATA DATE (Client);

active 'Активный' = DATA BOOLEAN (Client);

FORM clients 'Клиенты'
    OBJECTS c = Client
    PROPERTIES(c) READONLY active, idCard, family, given, nameGender, birthday
;

//-------------- Электронный рецепт ------------
CLASS EPrescription 'Электронный рецепт';
TABLE ePrescription(EPrescription);

@defineExternalizable(ePrescription, VARSTRING[100]);


seriesNumber 'Серия и номер' = DATA VARSTRING[13] (EPrescription);

client 'Клиент' = DATA Client(EPrescription);

nameOrganization 'Наименование мед. учреждения' = DATA VARSTRING[255] (EPrescription);
addressOrganization 'Адрес мед. учреждения' = DATA VARSTRING[255] (EPrescription);
idOrganization = DATA VARSTRING[100] (EPrescription);

namePractitioner 'ФИО врача' = DATA VARSTRING[100] (EPrescription);
idPractitioner = DATA VARSTRING[100] (EPrescription);

startValidityPeriod 'Действует с' = DATA DATE (EPrescription);
endValidityPeriod 'Действует по' = DATA DATE (EPrescription);

medication 'Выписано по' = DATA VARSTRING[3] (EPrescription);
dosageInstruction 'Инструкция по дозировке и способу применения ' = DATA VARSTRING[255] (EPrescription);
note 'Дополнительная информация' = DATA VARSTRING[1000] (EPrescription);
dateWritten 'Дата выписки' = DATA DATE (EPrescription);

//active 'Активный' = DATA BOOLEAN (EPrescription);
status 'Статус' = DATA MedicationPrescriptionStatus (EPrescription);
nameStatus 'Статус' (EPrescription ep) = name(status(ep));

quantity 'Выписано' = DATA NUMERIC[16,5] (EPrescription);
quantitySold 'Продано' = DATA NUMERIC[16,5] (EPrescription);
quantityLeft 'Остаток' (EPrescription ep) =  quantity(ep) (-) quantitySold(ep);

factor 'Коэффициент суммы оплаты клиентом' = DATA NUMERIC[3,2] (EPrescription);
medicamentType 'Тип лекарственного средства' = DATA MedicamentType (EPrescription);
nameMedicamentType 'Тип лекарственного средства' (EPrescription ep) = name(medicamentType(ep));

//международное
internationalNonproprietaryId 'Код лекарственного средства' = DATA VARSTRING[100] (EPrescription);
internationalNonproprietaryName 'Наименование' = DATA VARSTRING[100] (EPrescription);

//торговое
tradeId 'Код лекарственного средства' = DATA VARSTRING[100] (EPrescription);
tradeName 'Наименование' = DATA VARSTRING[100] (EPrescription);
tradeProductForm 'Лекарственная форма' = DATA VARSTRING[100] (EPrescription);

FORM ePrescriptions 'Электронные рецепты'
    OBJECTS ep = EPrescription
    PROPERTIES(ep) READONLY nameStatus, seriesNumber, dateWritten, startValidityPeriod, endValidityPeriod, factor,
                            nameOrganization, addressOrganization, namePractitioner, medication,
                            internationalNonproprietaryId, internationalNonproprietaryName,
                            tradeId, tradeName, tradeProductForm, nameMedicamentType,
                            quantity, quantitySold, quantityLeft,
                            dosageInstruction, note
    ORDER dateWritten(ep) DESC
;

NAVIGATOR {
    retailNavigator {
        NEW FOLDER ePrescriptionData 'Электронные рецепты' {
            NEW clients;
            NEW ePrescriptions;
        }
    }
}

FORM ePrescriptionClient 'Электронные рецепты'
    OBJECTS c = Client PANEL
    PROPERTIES(c) READONLY active, idCard, family, given, nameGender, birthday
    
    OBJECTS ep = EPrescription
    PROPERTIES(ep) READONLY nameStatus, seriesNumber, dateWritten, startValidityPeriod, endValidityPeriod, factor
    PROPERTIES(ep) READONLY PANEL nameOrganization, addressOrganization, namePractitioner, medication,
                                  internationalNonproprietaryId, internationalNonproprietaryName,
                                  tradeId, tradeName, tradeProductForm, nameMedicamentType,
                                  quantity, quantitySold, quantityLeft,
                                  dosageInstruction, note
                                  
    ORDER dateWritten(ep) DESC
    FILTERS client(ep) == c
;
DESIGN ePrescriptionClient {
    BOX(ep){
        NEW container BEFORE GRIDBOX(ep) {
            fill = 1;
            type = SPLITH;
            MOVE GRIDBOX(ep);
            MOVE PANEL(ep){
                type = CONTAINERV;
                MOVE PROPERTY(nameOrganization(ep));
                MOVE PROPERTY(addressOrganization(ep));
                MOVE PROPERTY(namePractitioner(ep));
                MOVE PROPERTY(medication(ep));
                NEW item {
                    type = CONTAINERH;
                    NEW international {
                        caption = 'Международное наименование';
                        type = CONTAINERV;
                        MOVE PROPERTY(internationalNonproprietaryId(ep));
                        MOVE PROPERTY(internationalNonproprietaryName(ep));
                    }
                    NEW trade {
                        caption = 'Торговое наименование';
                        type = CONTAINERV;
                        MOVE PROPERTY(tradeId(ep));
                        MOVE PROPERTY(tradeName(ep));
                        MOVE PROPERTY(tradeProductForm(ep));
                    }
                }
                MOVE PROPERTY(nameMedicamentType(ep));
                NEW quantity {
                    type = CONTAINERH;
                    caption = 'Количество';
                    MOVE PROPERTY(quantity(ep));
                    MOVE PROPERTY(quantitySold(ep));
                    MOVE PROPERTY(quantityLeft(ep));
                }
                MOVE PROPERTY(dosageInstruction(ep));
                MOVE PROPERTY(note(ep));
            }
        }
    }
}

token = DATA LOCAL NESTED VARSTRING[2500]();

httpHeadersToken(TEXT name) = CASE
    WHEN name == 'Content-type' THEN 'application/x-www-form-urlencoded';

httpBodyToken() = 'grant_type=client_credentials&client_id=' + clientId() + '&client_secret=' + clientSecret() + '&scope=' + scopes();

getToken () {
    LOCAL result = FILE();
    EXTERNAL HTTP urlToken() HEADERS httpHeadersToken PARAMS httpBodyToken() TO result;
    
    IMPORT JSON FROM result() TO() token = access_token;
}

GROUP resource;
resourceType = DATA LOCAL VARSTRING[100] (INTEGER);
idClient = DATA LOCAL VARSTRING[100] (INTEGER);
gender = DATA LOCAL VARSTRING[10] (INTEGER);
birthDate = DATA LOCAL DATE (INTEGER);
active = DATA LOCAL BOOLEAN (INTEGER);

entryName = DATA LOCAL INTEGER (INTEGER);
use = DATA LOCAL VARSTRING[100] (INTEGER);

nameFamily = DATA LOCAL INTEGER (INTEGER);
family = DATA LOCAL VARSTRING[100] (INTEGER);

nameGiven = DATA LOCAL INTEGER (INTEGER);
given = DATA LOCAL VARSTRING[100] (INTEGER);

subEntry = DATA LOCAL INTEGER (INTEGER);
subResourceType = DATA LOCAL VARSTRING[100] (INTEGER);
subId = DATA LOCAL VARSTRING[100] (INTEGER);
subStatus = DATA LOCAL VARSTRING[20] (INTEGER);
subNote = DATA LOCAL VARSTRING[1000] (INTEGER);
subDateWritten = DATA LOCAL DATE (INTEGER);

subEntryIdentifier = DATA LOCAL INTEGER (INTEGER);
identifierSystem = DATA LOCAL VARSTRING[255] (INTEGER);
seriesNumber = DATA LOCAL VARSTRING[13] (INTEGER);

subEntryDosageInstruction = DATA LOCAL INTEGER (INTEGER);
dosageInstruction = DATA LOCAL VARSTRING[100] (INTEGER);

subEntryExtension = DATA LOCAL INTEGER (INTEGER);
extensionURL = DATA LOCAL VARSTRING[255] (INTEGER);
factor = DATA LOCAL NUMERIC[3,2] (INTEGER);
GROUP valueCodeableConcept;
extensionCoding = DATA LOCAL INTEGER (INTEGER);
system = DATA LOCAL VARSTRING[255] (INTEGER);
code = DATA LOCAL VARSTRING[15] (INTEGER);

GROUP medication: resource;
subMedication = DATA LOCAL VARSTRING[20] (INTEGER);

GROUP dispense: resource;
GROUP validityPeriod: dispense;
subStart = DATA LOCAL DATE (INTEGER);
subEnd = DATA LOCAL DATE (INTEGER);
GROUP quantity: dispense;
subQuantity = DATA LOCAL NUMERIC[16,5] (INTEGER);

subEntryContained = DATA LOCAL INTEGER (INTEGER);
containedResourceType = DATA LOCAL VARSTRING[100] (INTEGER);
containedId = DATA LOCAL VARSTRING[20] (INTEGER);
isBrand = DATA LOCAL BOOLEAN (INTEGER);
GROUP code;
containedSubCoding = DATA LOCAL INTEGER (INTEGER);
subSystem = DATA LOCAL VARSTRING[255] (INTEGER);
subCode = DATA LOCAL VARSTRING[100] (INTEGER);
subDisplay = DATA LOCAL VARSTRING[100] (INTEGER);
GROUP product;
GROUP form: product;
containedFormCoding = DATA LOCAL INTEGER (INTEGER);
formSystem = DATA LOCAL VARSTRING[255] (INTEGER);
formCode = DATA LOCAL VARSTRING[100] (INTEGER);
formDisplay = DATA LOCAL VARSTRING[100] (INTEGER);

GROUP patient: resource;
subPatient = DATA LOCAL VARSTRING[100] (INTEGER);

GROUP prescriber: resource;
subPrescriber = DATA LOCAL VARSTRING[100] (INTEGER);

GROUP name: resource;
subUse = DATA LOCAL VARSTRING[100] (INTEGER);

subEntrySubFamily = DATA LOCAL INTEGER (INTEGER);
subFamily = DATA LOCAL VARSTRING[100] (INTEGER);

subEntrySubGiven = DATA LOCAL INTEGER (INTEGER);
subGiven = DATA LOCAL VARSTRING[100] (INTEGER);

subEntryPractitionerRole = DATA LOCAL INTEGER (INTEGER);
GROUP managingOrganization;
subOrganization = DATA LOCAL VARSTRING[100] (INTEGER);

subName = DATA LOCAL VARSTRING[255] (INTEGER);

subEntryAddress = DATA LOCAL INTEGER (INTEGER);
address = DATA LOCAL VARSTRING[255] (INTEGER);

subEntryAuthorizingPrescription = DATA LOCAL INTEGER (INTEGER);
subPrescription = DATA LOCAL VARSTRING[100] (INTEGER);

GROUP quantitySold EXTID 'quantity': resource;
quantitySold = DATA LOCAL NUMERIC[16,5] (INTEGER);

FORM tst
    OBJECTS entry = INTEGER
    PROPERTIES(entry) IN resource resourceType, idClient EXTID 'id', gender, birthDate, active
    
    OBJECTS name = INTEGER IN resource
    PROPERTIES(name) use
    FILTERS entryName(name) = entry
    
    OBJECTS family = INTEGER
    PROPERTIES(family) family EXTID 'value'
    FILTERS nameFamily(family) == name
    
    OBJECTS given = INTEGER
    PROPERTIES(given) given EXTID 'value'
    FILTERS nameGiven(given) == name
    
    OBJECTS subEntry = INTEGER EXTID 'entry' IN resource
    PROPERTIES(subEntry) IN resource subResourceType EXTID 'resourceType', subId EXTID 'id', subStatus EXTID 'status',
                                    subNote EXTID 'note', subDateWritten EXTID 'dateWritten'
    PROPERTIES(subEntry) IN medication subMedication EXTID 'reference'
    PROPERTIES(subEntry) IN validityPeriod subStart EXTID 'start', subEnd EXTID 'end'
    PROPERTIES(subEntry) IN quantity subQuantity EXTID 'value'
    PROPERTIES(subEntry) IN patient subPatient EXTID 'reference'
    PROPERTIES(subEntry) IN prescriber subPrescriber EXTID 'reference'
    FILTERS subEntry(subEntry) == entry
    
    OBJECTS identifier = INTEGER IN resource
    PROPERTIES(identifier) identifierSystem EXTID 'system', seriesNumber EXTID 'value'
    FILTERS subEntryIdentifier(identifier) == subEntry
    
    OBJECTS dosageInstruction = INTEGER IN resource
    PROPERTIES(dosageInstruction) dosageInstruction EXTID 'text'
    FILTERS subEntryDosageInstruction(dosageInstruction) == subEntry
    
    OBJECTS extension = INTEGER IN resource
    PROPERTIES(extension) extensionURL EXTID 'url', factor EXTID 'valueDecimal'
    FILTERS subEntryExtension(extension) == subEntry
    
    OBJECTS coding = INTEGER IN valueCodeableConcept
    PROPERTIES(coding) system, code
    FILTERS extensionCoding(coding) == extension
    
    OBJECTS contained = INTEGER IN resource
    PROPERTIES(contained) containedResourceType EXTID 'resourceType', containedId EXTID 'id', isBrand
    FILTERS subEntryContained(contained) == subEntry
    
    OBJECTS subCoding = INTEGER EXTID 'coding' IN code
    PROPERTIES(subCoding) subSystem EXTID 'system', subCode EXTID 'code', subDisplay EXTID 'display'
    FILTERS containedSubCoding(subCoding) == contained
    
    OBJECTS formCoding = INTEGER EXTID 'coding' IN form
    PROPERTIES(formCoding) formSystem EXTID 'system', formCode EXTID 'code', formDisplay EXTID 'display'
    FILTERS containedFormCoding(formCoding) == contained
    
    PROPERTIES(subEntry) IN name subUse EXTID 'use'
      
    OBJECTS subFamily = INTEGER EXTID 'family' IN name
    PROPERTIES(subFamily) subFamily EXTID 'value'
    FILTERS subEntrySubFamily(subFamily) == subEntry
      
    OBJECTS subGiven = INTEGER EXTID 'given' IN name
    PROPERTIES(subGiven) subGiven EXTID 'value'
    FILTERS subEntrySubGiven(subGiven) == subEntry
    
    OBJECTS practitionerRole = INTEGER IN resource
    PROPERTIES(practitionerRole) IN managingOrganization subOrganization EXTID 'reference'
    FILTERS subEntryPractitionerRole(practitionerRole) == subEntry
    
    PROPERTIES(subEntry) IN resource subName EXTID 'name'
    
    OBJECTS address = INTEGER IN resource
    PROPERTIES(address) address EXTID 'text'
    FILTERS subEntryAddress(address) == subEntry
    
    OBJECTS authorizingPrescription = INTEGER IN resource
    PROPERTIES(authorizingPrescription) subPrescription EXTID 'reference'
    FILTERS subEntryAuthorizingPrescription(authorizingPrescription) == subEntry
    
    PROPERTIES(subEntry) IN quantitySold quantitySold EXTID 'value'
;

httpHeadersPrescription(TEXT name) = CASE
    WHEN name == 'Authorization' THEN 'Bearer ' + token();

getPrescription 'Получить рецепты' (VARSTRING[16] card) {
    IF card THEN {
        getToken();
        LOCAL result = FILE();
        EXTERNAL HTTP GET urlAPI() + '/MedicationPrescription/$by-card?patientIdentifier=' + card
            HEADERS httpHeadersPrescription TO result;
        
        IMPORT tst JSON FROM result();
        
        FOR resourceType(INTEGER i) == 'Patient'  AND Client c == client(idClient(i)) DO {
            family(c) <- VARSTRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
            given(c) <- VARSTRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
            gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
            active(c) <- active(i);
        }
        
        FOR resourceType(INTEGER i) == 'Patient'  AND NOT client(idClient(i)) DO NEW c = Client {
            id(c) <- idClient(i);
            idCard(c) <- card;
            family(c) <- VARSTRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
            given(c) <- VARSTRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
            gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
            birthday(c) <- birthDate(i);
            active(c) <- active(i);
        }
        
        FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND EPrescription ep == ePrescription(subId(i)) DO {
            status(ep) <- medicationPrescriptionStatus(subStatus(i));
            //возможно нужно учитывать статус
            quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j;
        }
        
        FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND NOT ePrescription(subId(i)) DO NEW ep = EPrescription {
            id(ep) <- subId(i);
            seriesNumber(ep) <- GROUP MAX seriesNumber(INTEGER j) IF subEntryIdentifier(j) == i AND identifierSystem(j) == 'http://uiip.bas-net.by/hl7/fhir/serial-number';
            client(ep) <- client(getWord(subPatient(i),'/',2));
            note(ep) <- subNote(i);
            dateWritten(ep) <- subDateWritten(i);
            //active(ep) <- TRUE IF subStatus(i) == 'active';
            status(ep) <- medicationPrescriptionStatus(subStatus(i));
            dosageInstruction(ep) <- VARSTRING[255](GROUP CONCAT dosageInstruction(INTEGER j) IF subEntryDosageInstruction(j) == i,' ');
            medication(ep) <- CASE WHEN subMedication(i) == '#internalMedication1' THEN 'ТН'
                                   WHEN subMedication(i) == '#internalMedication2' THEN 'МНН';
            startValidityPeriod(ep) <- subStart(i);
            endValidityPeriod(ep) <- subEnd(i);
            quantity(ep) <- subQuantity(i);
            //возможно нужно учитывать статус
            quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j;
            factor(ep) <- OVERRIDE (GROUP MAX factor(INTEGER j) IF subEntryExtension(j) == i AND extensionURL(j) == 'http://fhir.org/fhir/StructureDefinition/by-factor'), 1.0;
            medicamentType(ep) <- GROUP MAX MedicamentType t IF getWord(staticName(t),'.',2) == code(INTEGER j) IF subEntryExtension(extensionCoding(j)) == i AND 
                                  system(j) == 'http://hl7.org/fhir/vs/by-medicament-type';
            internationalNonproprietaryId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                 containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                 subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                 containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                 NOT isBrand(containedSubCoding(j));
            internationalNonproprietaryName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                   containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                   subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                   containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                   NOT isBrand(containedSubCoding(j));
            tradeId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                           containedResourceType(containedSubCoding(j)) == 'Medication' AND
                           subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                           containedId(containedSubCoding(j)) == 'internalMedication1' AND
                           isBrand(containedSubCoding(j));
            tradeName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                             containedResourceType(containedSubCoding(j)) == 'Medication' AND
                             subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                             containedId(containedSubCoding(j)) == 'internalMedication1' AND
                             isBrand(containedSubCoding(j));
            tradeProductForm(ep) <- GROUP MAX (OVERRIDE formDisplay(INTEGER j), formCode(j)) IF subEntryContained(containedFormCoding(j)) == i AND
                                    containedResourceType(containedFormCoding(j)) == 'Medication' AND
                                    formSystem(j) == 'http://www.pharma.by/Справочник.ЛекарственнаяФорма' AND
                                    containedId(containedFormCoding(j)) == 'internalMedication1' AND
                                    isBrand(containedFormCoding(j));
            idPractitioner(ep) <- VARSTRING[100](getWord(subPrescriber(i),'/',2));
            namePractitioner(ep) <- VARSTRING[100](CONCAT ' ', (GROUP CONCAT subFamily(INTEGER j) IF subResourceType(subEntrySubFamily(j)) == 'Practitioner' AND subId(subEntrySubFamily(j)) == idPractitioner(ep) AND subUse(subEntrySubFamily(j)) == 'official', ' '),
                                  (GROUP CONCAT subGiven(INTEGER j) IF subResourceType(subEntrySubGiven(j)) == 'Practitioner' AND subId(subEntrySubGiven(j)) == idPractitioner(ep) AND subUse(subEntrySubGiven(j)) == 'official', ' '));
            idOrganization(ep) <- VARSTRING[100](GROUP MAX getWord(subOrganization(INTEGER j),'/',2) IF subResourceType(subEntryPractitionerRole(j)) == 'Practitioner' AND subId(subEntryPractitionerRole(j)) == idPractitioner(ep));
            nameOrganization(ep) <- VARSTRING[255](GROUP MAX subName(INTEGER j) IF subResourceType(j) == 'Organization' AND subId(j) == idOrganization(ep));
            addressOrganization(ep) <- VARSTRING[255](GROUP CONCAT address(INTEGER j) IF subResourceType(subEntryAddress(j)) == 'Organization' AND subId(subEntryAddress(j)) == idOrganization(ep), ' ');
        }
        DIALOG ePrescriptionClient OBJECTS c = client(idClient(0));
    }
}

card 'Номер карточки' = DATA LOCAL NESTED VARSTRING[16]();

getPrescription 'Получить рецепты' () {
    getPrescription(card());
}

getFromFile 'Загрузить из файла' () {
    INPUT f = FILE DO {
        IMPORT tst JSON CHARSET 'CP1251' FROM f;
        
        FOR resourceType(INTEGER i) == 'Patient'  AND Client c == client(idClient(i)) DO {
            family(c) <- VARSTRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
            given(c) <- VARSTRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
            gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
            active(c) <- active(i);
        }
        
        FOR resourceType(INTEGER i) == 'Patient'  AND NOT client(idClient(i)) DO NEW c = Client {
            id(c) <- idClient(i);
            //idCard(c) <- card;
            family(c) <- VARSTRING[100](GROUP CONCAT family(INTEGER j) IF entryName(nameFamily(j)) == i AND use(nameFamily(j)) == 'official', ' ');
            given(c) <- VARSTRING[100](GROUP CONCAT given(INTEGER j) IF entryName(nameGiven(j)) == i AND use(nameGiven(j)) == 'official', ' ');
            gender(c) <- GROUP MAX Gender g IF getWord(staticName(g),'.',2) == gender(i);
            birthday(c) <- birthDate(i);
            active(c) <- active(i);
        }
        
        FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND EPrescription ep == ePrescription(subId(i)) DO {
            status(ep) <- medicationPrescriptionStatus(subStatus(i));
            //возможно нужно учитывать статус
            quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j;
        }
        
        FOR subResourceType(INTEGER i) == 'MedicationPrescription' AND NOT ePrescription(subId(i)) DO NEW ep = EPrescription {
            id(ep) <- subId(i);
            seriesNumber(ep) <- GROUP MAX seriesNumber(INTEGER j) IF subEntryIdentifier(j) == i AND identifierSystem(j) == 'http://uiip.bas-net.by/hl7/fhir/serial-number';
            client(ep) <- client(getWord(subPatient(i),'/',2));
            note(ep) <- subNote(i);
            dateWritten(ep) <- subDateWritten(i);
            //active(ep) <- TRUE IF subStatus(i) == 'active';
            status(ep) <- medicationPrescriptionStatus(subStatus(i));
            dosageInstruction(ep) <- VARSTRING[255](GROUP CONCAT dosageInstruction(INTEGER j) IF subEntryDosageInstruction(j) == i,' ');
            medication(ep) <- CASE WHEN subMedication(i) == '#internalMedication1' THEN 'ТН'
                                   WHEN subMedication(i) == '#internalMedication2' THEN 'МНН';
            startValidityPeriod(ep) <- subStart(i);
            endValidityPeriod(ep) <- subEnd(i);
            quantity(ep) <- subQuantity(i);
            //возможно нужно учитывать статус
            quantitySold(ep) <- GROUP SUM quantitySold(INTEGER j) IF subResourceType(j) == 'MedicationDispense' AND id(ep) == getWord(subPrescription(INTEGER n),'/',2) AND subEntryAuthorizingPrescription(n) == j;
            factor(ep) <- OVERRIDE (GROUP MAX factor(INTEGER j) IF subEntryExtension(j) == i AND extensionURL(j) == 'http://fhir.org/fhir/StructureDefinition/by-factor'), 1.0;
            medicamentType(ep) <- GROUP MAX MedicamentType t IF getWord(staticName(t),'.',2) == code(INTEGER j) IF subEntryExtension(extensionCoding(j)) == i AND 
                                  system(j) == 'http://hl7.org/fhir/vs/by-medicament-type';
            internationalNonproprietaryId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                 containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                 subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                 containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                 NOT isBrand(containedSubCoding(j));
            internationalNonproprietaryName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND 
                                                   containedResourceType(containedSubCoding(j)) == 'Medication' AND
                                                   subSystem(j) == 'http://www.pharma.by/Справочник.МеждународноеНаименование' AND 
                                                   containedId(containedSubCoding(j)) == 'internalMedication2' AND
                                                   NOT isBrand(containedSubCoding(j));
            tradeId(ep) <- GROUP MAX subCode(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                           containedResourceType(containedSubCoding(j)) == 'Medication' AND
                           subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                           containedId(containedSubCoding(j)) == 'internalMedication1' AND
                           isBrand(containedSubCoding(j));
            tradeName(ep) <- GROUP MAX subDisplay(INTEGER j) IF subEntryContained(containedSubCoding(j)) == i AND
                             containedResourceType(containedSubCoding(j)) == 'Medication' AND
                             subSystem(j) == 'http://www.pharma.by/Справочник.Дозировка' AND
                             containedId(containedSubCoding(j)) == 'internalMedication1' AND
                             isBrand(containedSubCoding(j));
            tradeProductForm(ep) <- GROUP MAX (OVERRIDE formDisplay(INTEGER j), formCode(j)) IF subEntryContained(containedFormCoding(j)) == i AND
                                    containedResourceType(containedFormCoding(j)) == 'Medication' AND
                                    formSystem(j) == 'http://www.pharma.by/Справочник.ЛекарственнаяФорма' AND
                                    containedId(containedFormCoding(j)) == 'internalMedication1' AND
                                    isBrand(containedFormCoding(j));
            idPractitioner(ep) <- VARSTRING[100](getWord(subPrescriber(i),'/',2));
            namePractitioner(ep) <- VARSTRING[100](CONCAT ' ', (GROUP CONCAT subFamily(INTEGER j) IF subResourceType(subEntrySubFamily(j)) == 'Practitioner' AND subId(subEntrySubFamily(j)) == idPractitioner(ep) AND subUse(subEntrySubFamily(j)) == 'official', ' '),
                                  (GROUP CONCAT subGiven(INTEGER j) IF subResourceType(subEntrySubGiven(j)) == 'Practitioner' AND subId(subEntrySubGiven(j)) == idPractitioner(ep) AND subUse(subEntrySubGiven(j)) == 'official', ' '));
            idOrganization(ep) <- VARSTRING[100](GROUP MAX getWord(subOrganization(INTEGER j),'/',2) IF subResourceType(subEntryPractitionerRole(j)) == 'Practitioner' AND subId(subEntryPractitionerRole(j)) == idPractitioner(ep));
            nameOrganization(ep) <- VARSTRING[255](GROUP MAX subName(INTEGER j) IF subResourceType(j) == 'Organization' AND subId(j) == idOrganization(ep));
            addressOrganization(ep) <- VARSTRING[255](GROUP CONCAT address(INTEGER j) IF subResourceType(subEntryAddress(j)) == 'Organization' AND subId(subEntryAddress(j)) == idOrganization(ep), ' ');
        }
        DIALOG ePrescriptionClient OBJECTS c = client(idClient(0));
    }
}

EXTEND FORM integrationData
    PROPERTIES() card, getPrescription, getFromFile
;

DESIGN integrationData {
    ePrescription {
        MOVE PROPERTY(card());
        MOVE PROPERTY(getPrescription());
        MOVE PROPERTY(getFromFile());
    }
}