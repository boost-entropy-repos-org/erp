MODULE StoreSaleReturnInvoice;

REQUIRE StoreSale, SaleReturnInvoice, Store;

NAMESPACE SaleReturn;

// --------------------- НДС расчетный ----------------------- //
dateSale 'Дата продажи' = ABSTRACT DATE (Invoice) IN documentPrm;
dateSale 'Дата продажи' = DATA DATE (UserInvoice) IN documentPrm;
dateSale (UserInvoice invoice) += dateSale(invoice);

WHEN LOCAL SET(UserInvoice o IS UserInvoice) DO {
    IF o IS UserInvoice AND NOT dateSale(o) THEN dateSale(o) <- currentDate();
}

showDateSale 'Показывать дату продажи при возврате от покупателя' = DATA BOOLEAN (Sale.Operation);

EXTEND FORM Sale.operation
    PROPERTIES (o) showDateSale
;

DESIGN Sale.operation {
    showContainer {
        MOVE PROPERTY(showDateSale(o));
    }    
}

showDateSale = showDateSale(operation(UserInvoice invoice));

EXTEND FORM userInvoice
    PROPERTIES (i) dateSale SHOWIF showDateSale(i)
;

EXTEND FORM invoices
    PROPERTIES (i) READONLY dateSale
;

VAT = ABSTRACT Range(Invoice);
numberVAT 'НДС расч.' (Invoice invoice) = number(VAT(invoice)) IN documentPrm;

VAT = DATA Range(UserInvoice);
numberVAT 'НДС расч.' (UserInvoice userInvoice) = number(VAT(userInvoice)) IN documentPrm;
valueVAT 'НДС расч.' (UserInvoice userInvoice) = valueRate (VAT(userInvoice),  dateSale(userInvoice)) IN documentPrm;
VAT (UserInvoice invoice) += VAT(invoice);

CONSTRAINT tax(VAT(UserInvoice userInvoice)) != Tax.taxVAT OR
           country(VAT(userInvoice)) != country(supplierStock[Invoice](userInvoice)) OR
           rangeType(VAT(userInvoice)) != RangeType.units
           CHECKED BY VAT[UserInvoice]
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: продажа';

useCountVATOperationuser = useCountVAT(operation(UserInvoice invoice));

VAT (UserInvoice userInvoice) <- range(Tax.taxVAT, store(supplierStock(userInvoice)))
        IF useCountVATOperationuser(userInvoice)
        WHEN CHANGED(supplierStock(userInvoice));

//@deriveDocumentDetailVATHeader(userInvoice, VAT, supplierStock);

overVAT (UserInvoiceDetail d) += VAT(userInvoice(d));
WHEN LOCAL CHANGED(VAT(userInvoice(UserInvoiceDetail d))) DO {
    VAT(d) <- overVAT (d); 
}

EXTEND FORM userInvoice
    PROPERTIES(i) numberVAT SHOWIF useCountVATOperationuser(i), valueVAT SHOWIF useCountVATOperationuser(i);
;

WHEN LOCAL FORMS userInvoice (CHANGED(quantity(UserInvoiceDetail d)) OR CHANGED(invoicePrice(d)) OR CHANGED(valueVAT(d)))
                               AND (VAT(userInvoice(d)) OR useReverseVAT(operation(d))) AND includeVAT(priceListType(d)) DO {
    invoiceSum(d) <- round(quantity(d) * invoicePrice(d), currency(d));
    VATSum(d) <- round(invoiceSum(d) * calcValueVAT(d) / (100.0 + calcValueVAT(d)), currency(d));
    sum(d) <- invoiceSum(d) (-) VATSum(d); 
}