MODULE StoreSaleInvoice;

REQUIRE StoreSale, SaleInvoice, Store, PriceRoundStore;

NAMESPACE Sale;

// --------------------- НДС расчетный ----------------------- //

@defineDocumentInterfaceHeaderTAX(invoice, VAT, 'НДС расч.');

CONSTRAINT tax(VAT(UserInvoice userInvoice)) != Tax.taxVAT OR
           country(VAT(userInvoice)) != country(supplierStock[Invoice](userInvoice)) OR
           rangeType(VAT(userInvoice)) != RangeType.units
           CHECKED BY VAT[UserInvoice]
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: продажа';

useCountVATOperation = useCountVAT(operation(UserInvoice invoice));

VAT (UserInvoice userInvoice) <- range(Tax.taxVAT, store(supplierStock(userInvoice)))
        IF useCountVATOperation(userInvoice)
        WHEN CHANGED(supplierStock(userInvoice));

//@deriveDocumentDetailVATHeader(userInvoice, VAT, supplierStock);

overVAT (UserInvoiceDetail d) += VAT(userInvoice(d));
WHEN LOCAL CHANGED(VAT(userInvoice(UserInvoiceDetail d))) DO {
    VAT(d) <- overVAT (d); 
}

EXTEND FORM userInvoice
    PROPERTIES(i) numberVAT SHOWIF useCountVATOperation(i), valueVAT SHOWIF useCountVATOperation(i);
;

WHEN LOCAL FORMS userInvoice, invoices (CHANGED(quantity(UserInvoiceDetail d)) OR CHANGED(invoicePrice(d)) OR CHANGED(valueVAT(d)))
                               AND (VAT(userInvoice(d)) OR useReverseVAT(operation(d))) AND includeVAT(priceListType(d)) DO {
    invoiceSum(d) <- round(quantity(d) * invoicePrice(d), currency(d));
    VATSum(d) <- round(invoiceSum(d) * calcValueVAT(d) / (100.0 + calcValueVAT(d)), currency(d));
    sum(d) <- invoiceSum(d) (-) VATSum(d); 
}