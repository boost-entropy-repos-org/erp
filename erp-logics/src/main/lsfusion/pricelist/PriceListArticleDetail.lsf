MODULE PriceListArticleDetail;

REQUIRE PriceList, ItemArticle;

NAMESPACE PriceList;

CLASS UserAPriceListDetail 'Строка прайса (артикул)';
TABLE userAPriceListDetail (UserAPriceListDetail);

@defineExternalizable(userAPriceListDetail, VARSTRING[100]);

@defineDocumentRelation(userPriceList, UserAPriceListDetail, 'Строка прайса (артикул)');

@defineDocumentDetailIndex(userPriceList, UserAPriceListDetail);
@defineDocumentDetailPosted(userPriceList, UserAPriceListDetail);

@defineDocumentDetailDataTimePrefix(userPriceList, UserAPriceListDetail, from, 'с ');
@defineDocumentDetailDataTimePrefix(userPriceList, UserAPriceListDetail, to, 'по ');

article 'Артикул' = DATA Article (UserAPriceListDetail);
idArticle 'Код' (UserAPriceListDetail d) = id(article(d));
captionArticle 'Наименование' (UserAPriceListDetail d) = caption(article(d));
nameBrandArticle 'Бренд' (UserAPriceListDetail d) = nameBrand(article(d));
// Цены
price 'Цена (новая)' = DATA NUMERIC[16,4] (UserAPriceListDetail, DataPriceListType); //annotation не нужен, делим скриптом с учетом валюты вида цен

in (UserAPriceListDetail detail, DataPriceListType type) = in(userPriceList(detail), type);

price(UserAPriceListDetail detail, DataPriceListType type) => in (detail, type) RESOLVE RIGHT;

CLASS APriceListDetail 'Строка прайса по товару на основе артикула' : PriceListDetail;
in (UserAPriceListDetail d, Item i) = article(d) == article(i);
@defineAggregation(userAPriceListDetail, item, aPriceListDetail, in);
priceList (APriceListDetail d) += userPriceList(userAPriceListDetail(d));
sku (APriceListDetail d) += item(d);
price(APriceListDetail d, DataPriceListType t) += price(userAPriceListDetail(d), t);

// Действующие цены

priceB 'Цена' (DataPriceListType type, Article article, DATETIME dateTime) =
    GROUP LAST price(UserAPriceListDetail detail, type)
          ORDER fromDateTime(detail), detail
          WHERE isPosted(detail) AND in(userPriceList(detail), type) AND
                fromDateTime(detail) < dateTime AND NOT toDateTime(detail) < dateTime
          BY article(detail) COMPLEX;

prevPriceB 'Цена' (DataPriceListType type, Article article, DATETIME dateTime) = PREV(priceB(type, article, dateTime));

priceB 'Цена до' (UserAPriceListDetail d, DataPriceListType t) = priceB(t, article(d), fromDateTime(d));
prevPriceB 'Цена до' (UserAPriceListDetail d, DataPriceListType t) = PREV(priceB(d, t));


EXTEND FORM userPriceList
    OBJECTS ad = UserAPriceListDetail
    PROPERTIES(ad) index, idArticle, captionArticle, nameBrandArticle
    PROPERTIES(ad, tc) price COLUMNS (tc) HEADER headerNameData(tc) BACKGROUND background(tc)
    PROPERTIES(ad, to) READONLY prevPriceB COLUMNS 'type' (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to) TODRAW ad 
    PROPERTIES(ad) NEW, DELETE GRID
    FILTERS userPriceList(ad) == p
;

DESIGN userPriceList {
    detailContainer {
        MOVE BOX(ad) FIRST {
            caption = 'Спецификация (артикул)';
        }
    }
}
