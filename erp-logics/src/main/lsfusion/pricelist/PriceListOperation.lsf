MODULE PriceListOperation;

REQUIRE PriceList;

NAMESPACE PriceList;

@defineOperation('(прайс)');
@defineOperationRole();
@extendFormFilterRole(o, dialogOperations);
//@extendFormFilterRole(o, operations);     //-- пока не нужен

skipShowEdit(PriceListLedger pl) +=  preventChangesDocument(mainRole(currentUser()),operation(pl));

TABLE priceListTypeOperation(PriceListType, Operation);

change 'Изменять цены' = DATA BOOLEAN (DataPriceListType, Operation);
orderIn 'Порядок (изм.)' = DATA INTEGER (DataPriceListType, Operation);
show 'Показывать цены' = DATA BOOLEAN (PriceListType, Operation);
orderShow 'Порядок (показ.)' = DATA INTEGER (PriceListType, Operation);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);
TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);
@defineOperationStock(, st, 'Склады');
@defineOperationLegalEntity( ,legalEntity, l, 'Организации');



dataLegalEntity = DATA LegalEntity (Operation);

nameDefaultLegalEntity 'Организация по умолчанию' (Operation operation) = name(dataLegalEntity(operation));
isDefault 'Организация по умолчанию' (LegalEntity legalEntity, Operation operation) =
    dataLegalEntity(operation) == legalEntity;

CONSTRAINT dataLegalEntity(Operation operation) AND NOT in(dataLegalEntity(operation), operation)
    CHECKED BY dataLegalEntity[Operation] MESSAGE 'Организация по умолчанию должна быть в списке отмеченных организаций';

@defineOperationCurrency();
@defineOperationGroupType();
userDefaultCurrency = DATA Currency (Operation);
//userDefaultCurrencyOperation(operation) => inCurrencyOperation(userDefaultCurrencyOperation(operation), operation) RESOLVE RIGHT;
calcDefaultCurrency(Operation operation) =
    GROUP
    MAX Currency currency IF in(currency, operation) MATERIALIZED;
defaultCurrency(Operation operation) = OVERRIDE userDefaultCurrency(operation),
                                               calcDefaultCurrency(operation) MATERIALIZED;
nameDefaultCurrency 'Валюта по умолчанию' (Operation operation) = name(defaultCurrency(operation));
isDefault 'Валюта по умолчанию' (Currency currency, Operation operation) =
    defaultCurrency(operation) == currency;

CONSTRAINT userDefaultCurrency(Operation operation) AND NOT in(userDefaultCurrency(operation), operation)
    CHECKED BY userDefaultCurrency[Operation] MESSAGE 'Валюта по умолчанию должны быть в списке отмеченных валют';

//Определение операции для прайсов
//@defineDocumentOperationContainer(priceList, p){
//    @defineDocumentOperationContainer(priceList, p, isPostedPriceList, nameCurrency, first){
//    
//        operationPriceList = ABSTRACT Operation (PriceList) MATERIALIZED;
//        nameOperationPriceList 'Операция' = nameOperation(operationPriceList(priceList));
//        idOperationPriceList 'ID операции' = idOperation(operationPriceList(priceList));
//        operationUserPriceList = DATA Operation (UserPriceList);
//        nameOperationUserPriceList 'Операция' = nameOperation(operationUserPriceList(userPriceList));
//        idOperationUserPriceList 'ID операции' = idOperation(operationUserPriceList(userPriceList));
//        operationPriceList(priceList) += operationUserPriceList(priceList);
//    
//        operationPriceListDetail 'Операция' (priceListDetail) = operationPriceList(priceListPriceListDetail(priceListDetail));
//        operationUserPriceListDetail 'Операция' (userPriceListDetail) = operationUserPriceList(userPriceListUserPriceListDetail(userPriceListDetail));
//    
//        EXTEND FORM userPriceList
//            PROPERTIES(p) nameOperationUserPriceList
//        ;
//    
//        DESIGN userPriceList{
//            first {
//                NEW PROPERTY(nameOperationUserPriceList(p));
//            }
//            PROPERTY(nameOperationUserPriceList(p)) {charWidth = 30;} 
//        }
//        EXTEND FORM priceLists
//            PROPERTIES(p) READONLYIF isReadonly() nameOperationPriceList BEFORE nameCurrencyPriceList(p)
//        ;
//    };
//};
    
operation = ABSTRACT Operation (PriceList) MATERIALIZED;
nameOperation 'Операция' = name(operation(PriceList priceList));
idOperation 'ID операции' = id(operation(PriceList priceList));
operation = DATA Operation (UserPriceList);
nameOperation 'Операция' = name(operation(UserPriceList userPriceList));
idOperation 'ID операции' = id(operation(UserPriceList userPriceList));
operation(UserPriceList priceList) += operation(priceList);

operation 'Операция' (PriceListDetail priceListDetail) = operation(priceList(priceListDetail)) MATERIALIZED;
operation 'Операция' (UserPriceListDetail userPriceListDetail) = operation(userPriceList(userPriceListDetail));
operation (PriceListDetail ledger) += operation(ledger);

skipChange(PriceList p) += preventChangesDocument(mainRole(currentUser()),operation(p));

@defineDocumentOperationConstraint(priceList, 'прайс', PriceList);
@extendFormFilterRoleAccess(priceList, p, priceLists);



EXTEND FORM userPriceList
    PROPERTIES(p) nameOperation
;

DESIGN userPriceList{
    first {
        MOVE PROPERTY(nameOperation(p));
    }
    PROPERTY(nameOperation(p)) {charWidth = 30;} 
}
EXTEND FORM priceLists
    PROPERTIES(p) READONLYIF isReadonly() BACKGROUND background(p) nameOperation BEFORE nameCurrency(p)
;

@defineDocumentOperationRole(userPriceList);

in(UserPriceList priceList, DataPriceListType dataPriceListType) <- change(dataPriceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));
orderIn(UserPriceList priceList, DataPriceListType dataPriceListType) <- orderIn(dataPriceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));
show(UserPriceList priceList, PriceListType priceListType) <- show(priceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));
orderShow(UserPriceList priceList, PriceListType priceListType) <- orderShow(priceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));    

WHEN LOCAL CHANGED(operation(UserPriceList priceList)) AND dataLegalEntity(operation(priceList)) DO
    company(priceList) <- dataLegalEntity(operation(priceList));

WHEN LOCAL CHANGED(operation(UserPriceList priceList)) AND defaultCurrency(operation(priceList)) DO
    currency(priceList) <- defaultCurrency(operation(priceList));

copyOperation(UserPriceList priceList, UserPriceList userPriceList) = {
    operation(userPriceList) <- operation(priceList);
}
copyAbstractData(UserPriceList priceList, UserPriceList userPriceList) += { copyOperation(priceList, userPriceList); }

CONSTRAINT operation(UserPriceList priceList) AND company(priceList) AND NOT in(company(priceList), operation(priceList))
    CHECKED BY company[UserPriceList] MESSAGE 'Компания прайса должна соответствовать ограничениям операции';

groupType(UserPriceList priceList) <- IF operation(priceList) THEN groupType(operation(priceList))
                                        ELSE SystemGroupType.skuGroupType
    WHEN CHANGED(operation(priceList)) OR
         SET(priceList IS UserPriceList);
         
doNotSetStocksUserPriceList 'Не проставлять склады по умолчанию' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) doNotSetStocksUserPriceList
;
DESIGN operation {
    BOX(st) {
        MOVE PROPERTY(doNotSetStocksUserPriceList(o)) FIRST;
    }
}

skipSetStocks = DATA LOCAL BOOLEAN (UserPriceList);

WHEN LOCAL CHANGED(operation(UserPriceList priceList)) AND NOT doNotSetStocksUserPriceList(operation(priceList))
    AND NOT skipSetStocks(priceList) DO {
    allStocks(priceList) <- allStocks(operation(priceList));
    dataIn(priceList, StockGroup stockGroup) <- dataIn(stockGroup, operation(priceList));
    dataIn(priceList, Stock stock) <- dataIn(stock, operation(priceList));
} 

CONSTRAINT operation(UserPriceList priceList) AND NOT in(Stock stock, operation(priceList)) AND in(priceList, stock)
    CHECKED BY in[PriceList,Stock] MESSAGE 'Склады прайса должны соответствовать ограничениям операции';


showOriginalNameSku 'Наименование поставщика' = DATA BOOLEAN (Operation);
showOriginalNameSku(UserPriceList priceList) <- showOriginalNameSku(operation(priceList))
    WHEN CHANGED(operation(priceList));
    
showDateTime 'Даты действия' = DATA BOOLEAN (Operation);
showDateTimeUser(UserPriceList priceList) <- showDateTime(operation(priceList))
    WHEN CHANGED(operation(priceList));  
      
showBatch 'Партия' = DATA BOOLEAN (Operation);
showBatchUser(UserPriceList priceList) <- showBatch(operation(priceList))
    WHEN CHANGED(operation(priceList));    
 
showCompany 'Организация строки' = DATA BOOLEAN (Operation);
showCompanyUser(UserPriceList priceList) <- showCompany(operation(priceList))
    WHEN CHANGED(operation(priceList));             
         
showOriginalIdBarcodeSku 'Штрихкод поставщика' = DATA BOOLEAN (Operation);
showOriginalIdBarcodeSku(UserPriceList priceList) <- showOriginalIdBarcodeSku(operation(priceList))
    WHEN CHANGED(operation(priceList));
    
showNotCompanyStocks 'Склады контрагентов' = DATA BOOLEAN (Operation);
showNotCompanyStocks(UserPriceList priceList) <- showNotCompanyStocks(operation(priceList))
    WHEN CHANGED(operation(priceList));
show (Operation o, Stock st) =  IF showNotCompanyStocks(o) THEN st IS Stock ELSE (isCompany(st) AND o IS Operation);
show (Operation o, StockGroup g) =  IF showNotCompanyStocks(o) THEN g IS StockGroup ELSE (countCompanyStock(g) AND o IS Operation);
EXTEND FORM operation
    OBJECTS pt = PriceListType
    PROPERTIES(pt, o) change TODRAW pt, orderIn TODRAW pt, show, orderShow
    PROPERTIES(pt) READONLY name, nameCurrency, objectClassName
    FILTERGROUP filters
        FILTER 'Показывать отмеченные' change(pt, o) 'F9'
    PROPERTIES(l, o) isDefault AFTER in(l,o)
    PROPERTIES(c, o) isDefault AFTER in(c,o)
    PROPERTIES(o) nameDefaultLegalEntity, nameDefaultCurrency
    PROPERTIES(st) READONLY nameLegalEntity
    FILTERS show(o,stg),
            show(o,st)
    PROPERTIES(o) showOriginalIdBarcodeSku, showOriginalNameSku, showDateTime, showBatch, 
                  showCompany, showNotCompanyStocks
    
;

DESIGN operation {
    BOX(st) {
        NEW topSt FIRST{
        type = CONTAINERH;
            MOVE PROPERTY(showNotCompanyStocks(o)); 
            MOVE PROPERTY(doNotSetStocksUserPriceList(o)) ;            
        }           
    }
    headContainer {
        NEW defaultContainer{
            type = CONTAINERH;
            caption = 'Параметры по умолчанию';
            MOVE PROPERTY(nameDefaultLegalEntity(o));
            MOVE PROPERTY(nameDefaultCurrency(o));
        }
    }
    tabContainer {
        MOVE BOX(pt) BEFORE legalEntityContainer;
        NEW showContainer {
            caption = 'Отображение свойств';
            type = CONTAINERV;
            MOVE PROPERTY(showOriginalIdBarcodeSku(o));
            MOVE PROPERTY(showOriginalNameSku(o));
            MOVE PROPERTY(showDateTime(o));
            MOVE PROPERTY(showBatch(o));
            MOVE PROPERTY(showCompany(o));
        }
        NEW constraintContainer {
            caption = 'Ограничения';
        }
        NEW paramsContainer {
            caption = 'Параметры';
        }
    }
}

// Подсчет цен по прайс-листам

priceListDetailA  (DataPriceListType type, sku, Stock stock, DATETIME dateTime, operation) =
    GROUP
          BY sku(PriceListDetail detail), operation(detail) LAST detail
          ORDER fromDateTime(detail), detail
          WHERE in(detail, type) AND isPosted(detail) AND in(priceList(detail),stock) AND
                fromDateTime(detail) <= dateTime AND NOT toDateTime(detail) < dateTime COMPLEX;


//-- Фильтр
filterPriceListOperation  = DATA LOCAL Operation ();
nameFilterPriceListOperation 'Операция' = name(filterPriceListOperation()) CHARWIDTH 15;          
filterOperation (PriceList i) = operation(i) == filterPriceListOperation() OR (i IS PriceList AND NOT filterPriceListOperation());   

EXTEND FORM priceLists
    PROPERTIES() nameFilterPriceListOperation
    
    FILTERS filterOperation(p)
;
DESIGN priceLists {
    topFilters {
        MOVE PROPERTY(nameFilterPriceListOperation()) BEFORE PROPERTY(nameFilterPriceListCompany());
    }
}

NAVIGATOR {
    priceListMasterData {
        NEW operations;
    }
}

@defineOperationProperty(allowRepeatSku, 'Разрешить повтор SKU', constraintContainer);

CONSTRAINT NOT allowRepeatSku(operation(priceList(PriceListDetail d1))) AND SETCHANGED (sku(d1)) AND sku(d1) == sku(PriceListDetail d2) AND priceList(d1) == priceList(d2) AND NOT d1 == d2
    MESSAGE 'SKU может быть включен в прайс только один раз';
    
@defineOperationProperty(showNameCompany, 'Организация', showContainer);
@defineOperationProperty(showContract, 'Договор', showContainer);
@defineOperationProperty(showLabelType, 'Тип ценника', paramsContainer);

showNameCompany = showNameCompany(operation(PriceList p));
showContract = showContract(operation(PriceList p));
showLabelType = showLabelType(operation(PriceList p));

EXTEND FORM userPriceList
    PROPERTIES(p) SHOWIF showNameCompany(p) nameCompany, nameCompanyStock
;

DESIGN userPriceList{
    GROUP(documentPrm,p) {
        MOVE PROPERTY(nameCompany(p)) AFTER PROPERTY(nameCurrency(p));
        MOVE PROPERTY(nameCompanyStock(p)) AFTER PROPERTY(nameCompany(p));
    }    
}

@defineOperationProperty(countDaysToExcludePriceLists, 'Кол-во дней через которое прайс исключается из регистра', INTEGER, paramsContainer);

// Установка даты действия по для прайсов

setToDateTime 'Установить дату действия по' (UserPriceList p) = {
    LOCAL toDateTime = DATETIME();
    
    toDateTime() <- [= GROUP 
                             BY userPriceList(UserPriceListDetail d) MAX (OVERRIDE [= GROUP 
                                                    BY sku(UserPriceListDetail ud), DataPriceListType t, Stock st, DATETIME dt MIN fromDateTime(ud) IF isPosted(userPriceList(ud)) AND NOT PREV(toDateTime(ud)) 
                                                        AND in(ud, t) AND in(ud, st) AND fromDateTime(ud) > dt](sku(d), DataPriceListType t, Stock s, fromDateTime(d)), 2040_01_01_00:00) 
                                  IF in(d, t) AND in(d, s)](p);
    IF toDateTime() < 2040_01_01_00:00 THEN {
        toDate(p) <- DATE(toDateTime());
        toTime(p) <- TIME(toDateTime());
    }
}

excludePriceListsToDate 'Исключить прайсы из регистра до даты' () = {
    exclude(UserPriceListDetail d) <- TRUE WHERE toDate(d) < subtract(currentDate(), countDaysToExcludePriceLists(operation(d))) AND NOT exclude(d) AND countDaysToExcludePriceLists(operation(d));
    APPLY ;
}

EXTEND FORM options PROPERTIES() excludePriceListsToDate;
DESIGN options { price { MOVE PROPERTY(excludePriceListsToDate()); } }

clearApplicationLog () += {
    NEWSESSION {
        excludePriceListsToDate();
    } 
}

nameOperation 'Операция' (PriceListDetail priceListDetail) = name(operation(priceListDetail));
priceListType 'Вид цены' (PriceListDetail priceListDetail) = OVERRIDE dialogPriceListType(sku(priceListDetail)), defaultChangePriceListType(priceListDetail);
namePriceListType 'Вид цены' (PriceListDetail priceListDetail) = name(priceListType(priceListDetail));
price 'Цена' (PriceListDetail priceListDetail) = price(priceListDetail, priceListType(priceListDetail));

EXTEND FORM movementPriceSkuStocks
    OBJECTS d = (d = PriceListDetail, sd = Stock)
    PROPERTIES READONLY isPosted(d), exclude(d), seriesNumber(d), name(sd), nameOperation(d), fromDateTime(d), toDateTime(d), namePriceListType(d), price(d)
    ORDER name(sd), fromDateTime(d) DESC
    FILTERS sku(d) == s,
            in(d,sd)
;

DESIGN movementPriceSkuStocks {
    BOX {
        NEW tab AFTER BOX(pp){
            type = TABBED;
            fill = 1;
            MOVE BOX(pp);
            MOVE BOX(d);
        }       
    }
}

EXTEND FORM movementPriceSkuStock
    OBJECTS d = PriceListDetail
    PROPERTIES READONLY isPosted(d), exclude(d), seriesNumber(d), nameOperation(d), fromDateTime(d), toDateTime(d), namePriceListType(d), price(d)
    ORDER fromDateTime(d) DESC
    FILTERS sku(d) == s,
            in(d,st)    
;

DESIGN movementPriceSkuStock {
    BOX {
        NEW tab AFTER BOX(pp){
            type = TABBED;
            fill = 1;
            MOVE BOX(pp);
            MOVE BOX(d);
        }       
    }
}

EXTEND FORM movementPriceSkuStockSupplier
    OBJECTS d = PriceListDetail
    PROPERTIES READONLY isPosted(d), exclude(d), seriesNumber(d), nameOperation(d), nameCompany(d), fromDateTime(d), toDateTime(d), namePriceListType(d), price(d)
    ORDER fromDateTime(d) DESC
    FILTERS sku(d) == s,
            in(d,st),
            (d IS PriceListDetail AND NOT dialogSupplier(sku(d),st)) OR dialogSupplier(sku(d),st) == company(d)
;

DESIGN movementPriceSkuStockSupplier {
    BOX {
        NEW tab AFTER BOX(pp){
            type = TABBED;
            fill = 1;
            MOVE BOX(pp);
            MOVE BOX(d);
        }       
    }
}