MODULE ContractSaleReport;

REQUIRE SaleReportContract;

NAMESPACE SaleReport;

invoiceSumBalance 'Сумма остатка товара с НДС' = GROUP BY contractSku(invoiceDetail(Batch batch)), DATETIME date 
    SUM round2(prevBalanceB(batch, Stock stock, date)*price(invoiceDetail(batch))*(valueVAT(batch) (+) 100)/100);
invoiceSumBalance 'Сумма остатка товара с НДС' (ContractSku contract, DATE date) = invoiceSumBalance(contract, toDateTime(date));

overCreateReportSales = ABSTRACT LIST (SaleReport, DATE);

createReportSales 'Создать акт реализации' (Contract contract, DATE dt) = {
    IF balanceBA(contract, dt) (-) currentBalance(contract) (-) invoiceSumBalance(contract, dt) THEN {
        NEW r = SaleReport {
            company(r) <- partyB(contract);
            supplier(r) <- partyA(contract);
            contractSku(r) <- contract;
            NEW d = SaleReportDetail {
                saleReport(d) <- r;
                invoiceSum(d) <- balanceBA(contract, dt) (-) currentBalance(contract) (-) invoiceSumBalance(contract, dt);
            }
            isPosted(r) <- TRUE;
            
            overCreateReportSales(r, dt);
        }
        APPLY ;
    }
}

createReportsSales 'Создать по остаткам' () = {
    DIALOG contracts OBJECTS c INPUT DO {
        IF NOT (GROUP SUM 1 IF in(Contract cc)) THEN
            in(c) <- TRUE;
        FOR in(Contract contract) DO {
            createReportSales(contract, currentDate());
        } 
    }
    in(Contract c) <- NULL;
}

EXTEND FORM reportsSales
    PROPERTIES createReportsSales() TOOLBAR TODRAW r;
;

createReportsSalesAll 'Создать по остаткам' (DATE dt) = {
    FOR type(paymentCondition(ContractSku c)) == AgreementPaymentType.implement AND isCompany(partyB(c)) AND NOT skipSaleLedger(c) DO {
        createReportSales(c, dt);
    }
}
