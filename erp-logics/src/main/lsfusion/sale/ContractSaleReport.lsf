MODULE ContractSaleReport;

REQUIRE SaleReportContract;

NAMESPACE SaleReport;

invoiceSumBalance 'Сумма остатка товара с НДС' = GROUP 
    SUM round2(prevCurrentBalance(Batch batch, Stock stock)*price(invoiceDetail(batch))*(valueVAT(batch) (+) 100)/100) BY contractSku(invoiceDetail(batch));

overCreateReportSales = ABSTRACT LIST (SaleReport);

createReportSales 'Создать акт реализации' (Contract contract) = {
    IF currentBalanceA(contract) (-) currentBalance(contract) (-) invoiceSumBalance(contract) THEN {
        NEW r = SaleReport {
            company(r) <- partyB(contract);
            supplier(r) <- partyA(contract);
            contractSku(r) <- contract;
            NEW d = SaleReportDetail {
                saleReport(d) <- r;
                invoiceSum(d) <- currentBalanceA(contract) (-) currentBalance(contract) (-) invoiceSumBalance(contract);
            }
            isPosted(r) <- TRUE;
            
            overCreateReportSales(r);
        }
        APPLY ;
    }
}

createReportsSales 'Создать по остаткам' () = {
    DIALOG contracts OBJECTS c INPUT DO {
        IF NOT (GROUP SUM 1 IF in(Contract cc)) THEN
            in(c) <- TRUE;
        FOR in(Contract contract) DO {
            createReportSales(contract);
        } 
    }
    in(Contract c) <- NULL;
}

EXTEND FORM reportsSales
    PROPERTIES createReportsSales() TOOLBAR TODRAW r;
;

createReportsSalesAll 'Создать по остаткам' () = {
    FOR type(paymentCondition(ContractSku c)) == AgreementPaymentType.implement AND isCompany(partyB(c)) AND NOT skipSaleLedger(c) DO {
        createReportSales(c);
    }
}
