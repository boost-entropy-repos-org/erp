MODULE StockDocumentSkuLedger;

REQUIRE StockDocument, SkuLedger;

NAMESPACE Stock;

stockDocumentLedger = ABSTRACT StockDocumentLedger (SkuLedger) MATERIALIZED INDEXED;

numberDocument 'Номер документа' (SkuLedger ledger) = number(stockDocumentLedger(ledger)) CHARWIDTH 8;
seriesDocument 'Серия документа' (SkuLedger ledger) = series(stockDocumentLedger(ledger)) CHARWIDTH 3 NOFLEX;
seriesNumberDocument 'Серия/номер документа' (SkuLedger ledger) = seriesNumber(stockDocumentLedger(ledger)) CHARWIDTH 10;

legalEntityDocument (SkuLedger ledger) = legalEntity(stockDocumentLedger(ledger)); 
nameLegalEntityDocument 'Контрагент' (SkuLedger ledger) = name(legalEntityDocument(ledger));
overNameLegalEntityDocument 'Контрагент' (SkuLedger ledger) = OVERRIDE nameLegalEntityDocument(ledger), 'Не задан';

legalEntityStockDocument (SkuLedger ledger) = legalEntityStock(stockDocumentLedger(ledger));
nameLegalEntityStockDocument 'Склад контрагента' (SkuLedger ledger) = name(legalEntityStockDocument(ledger));
idLegalEntityStockDocument 'Склад контрагента' (SkuLedger ledger) = id(legalEntityStockDocument(ledger));
overNameLegalEntityStockDocument 'Склад контрагента' (SkuLedger ledger) = OVERRIDE nameLegalEntityStockDocument(ledger), 'Не задан';

operationDocument (SkuLedger ledger) = operation(stockDocumentLedger(ledger));
nameOperationDocument 'Операция' (SkuLedger ledger) = name(operationDocument (ledger));
overNameOperationDocument 'Операция' (SkuLedger ledger) = OVERRIDE nameOperationDocument(ledger),  'Не задана';

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY AFTER dateTime(bil) numberDocument, seriesDocument
    PROPERTIES(bil) READONLY BEFORE quantity(bil) nameLegalEntityDocument, nameLegalEntityStockDocument
;

EXTEND FORM costSkuBatchLedger
    PROPERTIES(bil) READONLY AFTER dateTime(bil) numberDocument, seriesDocument
    PROPERTIES(bil) READONLY BEFORE quantity(bil) nameLegalEntityDocument, nameLegalEntityStockDocument
;

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(bil) READONLY AFTER dateTime(bil) numberDocument, seriesDocument
    PROPERTIES(bil) READONLY BEFORE signedQuantity(bil) nameLegalEntityDocument, nameLegalEntityStockDocument
;

EXTEND FORM balanceSkuStock
    PROPERTIES(bil) READONLY AFTER dateTime(bil) numberDocument, seriesDocument
    PROPERTIES(bil) READONLY BEFORE signedQuantity(bil) nameLegalEntityDocument, nameLegalEntityStockDocument
;

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bil) READONLY AFTER dateTime(bil) numberDocument, seriesDocument 
    PROPERTIES(bil) READONLY BEFORE signedQuantity(bil) nameLegalEntityDocument, nameLegalEntityStockDocument
;

EXTEND FORM balanceBatchStock
    PROPERTIES(bil) READONLY AFTER dateTime(bil) numberDocument, seriesDocument
    PROPERTIES(bil) READONLY BEFORE signedQuantity(bil) nameLegalEntityDocument, nameLegalEntityStockDocument
;

EXTEND FORM skuLedger
    PROPERTIES(s) READONLY AFTER dateTime(s) numberDocument, seriesDocument
    PROPERTIES(s) READONLY BEFORE signedQuantity(s) overNameOperationDocument, overNameLegalEntityDocument, overNameLegalEntityStockDocument
;

// --------- Суммы по документу ------------//

showSkuLedgerStockDocument 'Показывать суммы по регистру в товарном отчете' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() showSkuLedgerStockDocument
;

DESIGN options {
    stock1 {
        MOVE PROPERTY(showSkuLedgerStockDocument());
    }
}

sumSkuLedger 'Сумма по регистру' = GROUP SUM signedSum(SkuLedger l) BY stockDocumentLedger(l) CHARWIDTH 12;

EXTEND FORM sumStockDocumentLedger
    PROPERTIES(il) sumSkuLedger SHOWIF showSkuLedgerStockDocument()
    FILTERGROUP incorrectIncSum FILTER 'Неправильная сумма по регистру' NOT sum(il) == sumSkuLedger(il) 'F7'

    PROPERTIES(ol) sumSkuLedger SHOWIF showSkuLedgerStockDocument()
    FILTERGROUP incorrectOutSum FILTER 'Неправильная сумма по регистру' NOT sum(ol) == -sumSkuLedger(ol) 'F7'
;

accountDeltaQuantity 'Отклонение от фактического, количество'  = ABSTRACT NUMERIC[16,5](Sku, Stock);    
accountDeltaQuantity 'Отклонение от фактического, количество' = ABSTRACT NUMERIC[16,5](Sku, Stock, DATE, DATE);
accountDeltaBQuantity 'Отклонение от фактического (до), количество' = ABSTRACT NUMERIC[16,5](Sku, Stock, DATETIME);

accountDeltaSum 'Отклонение от фактического, сумма'  = ABSTRACT NUMERIC[18,4](Sku, Stock);    
accountDeltaSum 'Отклонение от фактического, сумма' = ABSTRACT NUMERIC[18,4](Sku, Stock, DATE, DATE);
accountDeltaBSum 'Отклонение от фактического (до), сумма' = ABSTRACT NUMERIC[18,4](Sku, Stock, DATETIME);

accountBalanceQuantity 'Бухгалтерский остаток, количество' (Sku s,Stock st) =  currentBalance(s,st) (+) accountDeltaQuantity(s,st);
prevAccountBalanceQuantity 'Бухгалтерский остаток, количество' (Sku s,Stock st) = PREV(accountBalanceQuantity(s,st));

accountBalanceSum 'Бухгалтерский остаток, сумма' (Sku s,Stock st) =  currentSum(s,st) (+) accountDeltaSum(s,st);
prevAccountBalanceSum 'Бухгалтерский остаток, сумма' (Sku s,Stock st) = PREV(accountBalanceSum(s,st));

accountBalanceBQuantity 'Бухгалтерский остаток (до), количество' (Sku s,Stock st, DATETIME  dt) =  balanceB(s,st,dt) (+) accountDeltaBQuantity(s,st,dt);
prevAccountBalanceBQuantity 'Бухгалтерский остаток (до), количество' (Sku sku, Stock stock, DATETIME dateTime) = PREV(accountBalanceBQuantity(sku, stock, dateTime) IF dateTime IS DATETIME);

accountBalanceBSum 'Суммовой бухгалтерский остаток (до), сумма' (Sku s,Stock st, DATETIME  dt) =  sumB(s,st,dt) (+) accountDeltaBSum(s,st,dt);
prevAccountBalanceBSum 'Суммовое бухгалтерский остаток (до), сумма' (Sku sku, Stock stock, DATETIME dateTime) = PREV(accountBalanceBSum(sku, stock, dateTime) IF dateTime IS DATETIME);