MODULE MarketingContract;

REQUIRE Contract, LegalEntity, Item, Store;

NAMESPACE Marketing;

CLASS ContractMarketing 'Договор маркетинга' : Contract;
TABLE contractMarketing(ContractMarketing);

@defineDocumentHeaderNumber(ContractMarketing);

@defineExternalizable(contractMarketing, VARSTRING[100]);
@defineNumeratedID(ContractMarketing, 'Договоры маркетинга (код)', Id);

id(ContractMarketing c) += id(c);

number (ContractMarketing contract) += number(contract);
series (ContractMarketing contract) += series(contract);

@defineNumeratedDefault(ContractMarketing, 'Договоры маркетинга', 'ДМ');

dateFrom 'Действует (с)' = DATA DATE (ContractMarketing);
dateTo 'Действует (по)' = DATA DATE (ContractMarketing);
name 'Наименование' = DATA VARSTRING[100](ContractMarketing);
prolongation 'Пролонгация' = DATA BOOLEAN (ContractMarketing);
description 'Описание' = ABSTRACT VARSTRING[250](ContractMarketing) CHARWIDTH 30;

supplier = DATA LegalEntity (ContractMarketing);
nameSupplier 'Поставщик' (ContractMarketing c) = name(supplier(c));

customer = DATA LegalEntity (ContractMarketing);
nameCustomer 'Получатель' (ContractMarketing c) = name(customer(c));

paymentDelay 'Отсрочка платежа по договору, дн' = DATA NUMERIC[3,0] (ContractMarketing);

fromCount 'От объема' = DATA BOOLEAN (ContractMarketing);
fromPayment 'От оплат' = DATA BOOLEAN (ContractMarketing);

CLASS ContractType 'Тип договора' {
    infoServices 'Информационные услуги',
    tradeBonus 'Торговая премия',
    audioAd 'Аудио-реклама',
    adServices 'Рекламные услуги'
}
TABLE contractType (ContractType);
name 'Наименование' (ContractType t) = staticCaption(t) IF t IS ContractType IN id CHARWIDTH 25;

FORM contractTypes 'Типы договоров'
    OBJECTS t = ContractType
    PROPERTIES(t) READONLY name
    LIST ContractType OBJECT t
;

contractType = DATA ContractType (ContractMarketing);
nameContractType 'Тип договора' (ContractMarketing c) = name(contractType(c));

CLASS Weighted 'Весовой' {
    yes 'Весовой',
    no 'Штучный'
}
TABLE weighted(Weighted);
name 'Наименование' (Weighted w) = staticCaption(w) IF w IS Weighted IN id;

FORM weighted 'Типы товара'
    OBJECTS w = Weighted
    PROPERTIES(w) READONLY name
    LIST Weighted OBJECT w
;

CLASS Period 'Период' {
    month 'Месяц',
    quarter 'Квартал'
}
TABLE period (Period);
name 'Наименование' (Period p) = staticCaption(p) IF p IS Period IN id CHARWIDTH 10;

period = DATA Period (ContractMarketing);
namePeriod 'Периодичность выставления' (ContractMarketing c) = name(period(c));

FORM dialogPeriod 'Период'
    OBJECTS p = Period
    PROPERTIES(p) READONLY name
    
    LIST Period OBJECT p
;

personSupplier 'в лице ' = DATA VARSTRING[500](ContractMarketing) CHARWIDTH 50;
basedOnSupplier ', действующего на основании' = DATA VARSTRING[500] (ContractMarketing) CHARWIDTH 50;

scanFile 'Файл' = DATA FILE (ContractMarketing);

inputScanFile 'Загрузить' (ContractMarketing c)  { INPUT f = FILE DO { scanFile(c) <- f; } }
openScanFile 'Просмотреть' (ContractMarketing c)  { open(scanFile(c)); }
deleteScanFile 'Удалить' (ContractMarketing c)  { scanFile(c) <- NULL; }

FORM contractMarketing 'Договор маркетинга'
    OBJECTS c = ContractMarketing PANEL 
    PROPERTIES (c) nameNumerator, number, series, dateFrom, dateTo, name, prolongation, nameSupplier, nameCustomer, paymentDelay, 
                   nameContractType, namePeriod, fromCount, fromPayment, personSupplier, basedOnSupplier, inputScanFile, openScanFile, deleteScanFile
    
    EDIT ContractMarketing OBJECT c
;

DESIGN contractMarketing {
    type = CONTAINERV;
    fill = 1;
    NEW params FIRST {
        type = CONTAINERV ;
        NEW props  {
            type = CONTAINERH;
            fill = 1;
            MOVE GROUP (numbered, c);
            NEW dates {
                caption = 'Срок действия';
                type = CONTAINERH;
                fill = 1;
                MOVE PROPERTY (dateFrom(c));
                MOVE PROPERTY (dateTo(c));
                MOVE PROPERTY (name(c));
                MOVE PROPERTY (prolongation(c));
                MOVE PROPERTY (namePeriod(c));
            }
        }
        NEW othersParams {
            caption = 'Параметры';
            type = CONTAINERH ;
            fill = 1;
            MOVE PROPERTY (nameSupplier(c));
            MOVE PROPERTY (nameCustomer(c));
            MOVE PROPERTY (nameContractType(c));
            MOVE PROPERTY (paymentDelay(c));
            MOVE PROPERTY (fromCount(c));
            MOVE PROPERTY (fromPayment(c));
        }
        NEW person {
            caption = 'Строка для задания и акта';
            type = CONTAINERH;
            MOVE PROPERTY (personSupplier(c));
            MOVE PROPERTY (basedOnSupplier(c));
        }
        NEW file {
            type = CONTAINERH;
            caption = 'Файл документа';
            MOVE PROPERTY (inputScanFile(c));
            MOVE PROPERTY (openScanFile(c));
            MOVE PROPERTY (deleteScanFile(c));
        }
    }
    NEW conditions AFTER params {
        type = TABBED;
        fill = 1;
        caption = 'Условия';
    }
}

FORM contractMarketings 'Договоры маркетинга'
    OBJECTS c = ContractMarketing 
    PROPERTIES (c) READONLY number, dateFrom, dateTo, name, prolongation, nameSupplier, nameCustomer, paymentDelay, 
                   nameContractType, namePeriod, fromCount, fromPayment           
    PROPERTIES (c) NEWSESSION NEW, EDIT, DELETE 
;

DESIGN contractMarketings {
    type = SPLITV;
    MOVE BOX (c) FIRST {
        fill = 1;
    }
    NEW conditions AFTER BOX (c){
        type = TABBED;
        fill = 1;
        caption = 'Условия';
    }
}

FORM dialogContractMarketings 'Договоры маркетинга'
    OBJECTS c = ContractMarketing 
    PROPERTIES (c) READONLY number, dateFrom, dateTo, name, prolongation, nameSupplier, nameCustomer, paymentDelay, 
                   nameContractType, namePeriod, fromCount, fromPayment   
                   
    LIST ContractMarketing OBJECT c
;

DESIGN dialogContractMarketings {
    size = (1200, 800);
}

CLASS ConditionList 'Сопроводительный лист (маркетинг)';
TABLE conditionList(ConditionList);

dateFrom 'Дата с' = DATA DATE (ConditionList);
dateTo 'Дата по' = DATA DATE (ConditionList);

@defineDocumentHeaderNumber(ConditionList);
@defineNumeratedDefault(ConditionList, 'Сопроводительные листы (маркетинг)', 'СМ');

contractMarketing = DATA ContractMarketing (ConditionList) NONULL DELETE INDEXED;

supplier (ConditionList l) = supplier(contractMarketing(l)) MATERIALIZED INDEXED;

FORM conditionList 'Сопроводительный лист (маркетинг)'
    OBJECTS l = ConditionList PANEL 
    PROPERTIES (l) nameNumerator, series, number, dateFrom, dateTo
    
    EDIT ConditionList OBJECT l
;

DESIGN conditionList {
    type = CONTAINERV;
    NEW params FIRST {
        MOVE BOX (l);
    }
    NEW conditions AFTER params {
        type = TABBED;
        fill = 1;
    }
}

EXTEND FORM contractMarketing
    
    OBJECTS l = ConditionList
    PROPERTIES (l) seriesNumber, dateFrom, dateTo
    FILTERS contractMarketing(l) = c
;

DESIGN contractMarketing {
    NEW lists AFTER params {
        type = SPLITH;
        fill = 1;
        MOVE BOX (l){
            fill = 2;
        }
        MOVE conditions {
            fill = 3;
        }
    }
}

EXTEND FORM contractMarketings
    
    OBJECTS l = ConditionList
    PROPERTIES (l) READONLY seriesNumber, dateFrom, dateTo
    FILTERS contractMarketing(l) = c
;

DESIGN contractMarketings {
    NEW conditionLists AFTER BOX (c) {
        type = SPLITH;
        fill = 1;
        MOVE BOX (l){
            fill = 2;
        }
        MOVE conditions {
            fill = 3;
        }
    }
}

CLASS MarketingCondition 'Условие договора маркетинга';
TABLE marketingCondition(MarketingCondition);

conditionList 'Сопроводительный лист' = DATA ConditionList (MarketingCondition)  NONULL DELETE INDEXED;

contractMarketing (MarketingCondition c) = contractMarketing(conditionList(c)) MATERIALIZED INDEXED;

dateFrom (MarketingCondition c) = dateFrom(conditionList(c)) MATERIALIZED;
dateTo (MarketingCondition c) = dateTo(conditionList(c)) MATERIALIZED;

supplier (MarketingCondition c) = supplier(conditionList(c)) MATERIALIZED INDEXED;

CLASS ConditionType 'Вид маркетинга' {
    fixed 'Маркетинг фиксированный'
}
TABLE conditionType (ConditionType);
name 'Наименование' (ConditionType t) = staticCaption(t) IF t IS ConditionType IN id;

notShowIf = ABSTRACT BOOLEAN (ConditionList, ConditionType);
showIf (ConditionList l, ConditionType t) = NOT notShowIf(l, t);
    
conditionType  = DATA ConditionType(MarketingCondition);
nameConditionType 'Вид маркетинга' (MarketingCondition c) = staticCaption(conditionType(c));

CLASS CalcBase 'База расчета' {
    supplierVAT 'Приход поставщика с НДС',
    supplier 'Приход поставщика без НДС',
    turnoverVAT 'Розничный ТО с НДС в учетных ценах',
    turnover 'Розничный ТО без НДС в учетных ценах',
    turnoverCostVAT 'Розничный ТО с НДС в с/с',
    turnoverCost 'Розничный ТО без НДС в с/с'
}
TABLE calcBase (CalcBase);
name 'Наименование' (CalcBase b) = staticCaption(b) IF b IS CalcBase IN id;

TABLE conditionListConditionType (ConditionList, ConditionType);
calcBase = DATA CalcBase (ConditionList, ConditionType);
nameCalcBase 'База расчета' (ConditionList l, ConditionType t) = staticCaption(calcBase(l, t));
calcBase (MarketingCondition mc) = calcBase(conditionList(mc), conditionType(mc)) MATERIALIZED;

marketingPercent 'Процент маркетинга, %' = DATA NUMERIC[5,2]  (MarketingCondition);

itemGroup = DATA ItemGroup (MarketingCondition);
nameItemGroup 'Категория' (MarketingCondition c) = name(itemGroup(c));

brand = DATA Brand (MarketingCondition);
nameBrand 'Бренд' (MarketingCondition c) = name(brand(c));

country = DATA Country (MarketingCondition);
nameCountry 'Страна изготовитель' (MarketingCondition c) = name(country(c));

region = DATA Region (MarketingCondition);
nameRegion 'Регион' (MarketingCondition c) = name(region(c));

in 'Вкл.' = DATA BOOLEAN (Item, MarketingCondition);
countItems (MarketingCondition c) = GROUP SUM 1 IF in(Item i, c);
items 'Товары' (MarketingCondition c) = GROUP CONCAT name(Item i) IF in(i, c), ', ' CHARWIDTH 50;

item = DATA Item (MarketingCondition);
nameItem 'Товар' (MarketingCondition c) = name(item(c));

weighted = DATA Weighted (MarketingCondition);
nameWeighted 'Вес' (MarketingCondition c) = staticCaption(weighted(c)) CHARWIDTH 10;

isException 'Исключение' = DATA BOOLEAN (MarketingCondition);

TABLE marketingConditionLegalEntity(MarketingCondition, LegalEntity);
inLegalEntityStock 'Отм.' = DATA BOOLEAN (MarketingCondition, LegalEntity);
countLegalEntities (MarketingCondition c) = GROUP SUM 1 IF inLegalEntityStock(c, LegalEntity l) MATERIALIZED; 
legalEntities 'Юр. лица' (MarketingCondition c) = GROUP CONCAT name(LegalEntity l), ',' IF inLegalEntityStock(c, l) CHARWIDTH 30;

FORM dialogLegalEntityStocks 'Юр. лица'
    OBJECTS c = MarketingCondition PANEL 
    OBJECTS l = LegalEntity
    PROPERTIES inLegalEntityStock(c, l)
    PROPERTIES (l) READONLY name, id, fullName 
    
    FILTERS isCompany(l)
    FILTERGROUP com FILTER 'Активные' active(l) DEFAULT 
;

showSelectLegalEntities (MarketingCondition c)  { 
    SHOW dialogLegalEntityStocks OBJECTS c = c;
}

TABLE marketingConditionDepartmentStore(MarketingCondition, DepartmentStore);
inStock 'Отм.' = DATA BOOLEAN (MarketingCondition, DepartmentStore);
countStocks (MarketingCondition c) = GROUP SUM 1 IF inStock(c, Stock s) MATERIALIZED; 
stocks 'Склады' (MarketingCondition c) = GROUP CONCAT name(DepartmentStore s), ',' IF inStock(c, s) CHARWIDTH 30;

FORM dialogStockMerch 'Склады'
    OBJECTS c = MarketingCondition
    OBJECTS s = DepartmentStore
    PROPERTIES inStock(c, s), name(s) READONLY 
;

showSelectStocks (MarketingCondition c)  { 
    SHOW dialogStockMerch OBJECTS c = c;
}

CLASS StockGroupMarketing 'Группа складов';
TABLE stockGroupMarketing (StockGroupMarketing);

name 'Наименование' = DATA VARISTRING[100] (StockGroupMarketing) CHARWIDTH 15;

in 'Вкл.' = DATA BOOLEAN (MarketingCondition, StockGroupMarketing);
countStockGroups (MarketingCondition c) = GROUP SUM 1 IF in(c, StockGroupMarketing s) MATERIALIZED; 
stockGroups 'Группы складов' (MarketingCondition c) = GROUP CONCAT name(StockGroupMarketing s), ',' IF in(c, s) CHARWIDTH 30;

in 'Вкл.' = DATA BOOLEAN (DepartmentStore, StockGroupMarketing);
countStockGroups (DepartmentStore c) = GROUP SUM 1 IF in(c, StockGroupMarketing s) MATERIALIZED; 
stockGroups 'Группы складов (маркетинг)' (DepartmentStore c) = GROUP CONCAT name(StockGroupMarketing s), ',' IF in(c, s) CHARWIDTH 30;

inGroup (MarketingCondition c, DepartmentStore s) = GROUP SUM 1 IF in(c, StockGroupMarketing g) AND in(s, g);

FORM stockGroupMarketing 'Группа складов'
    OBJECTS o = StockGroupMarketing PANEL
    PROPERTIES(o) name
    
    OBJECTS d = DepartmentStore
    PROPERTIES in(d, o), name(d) READONLY 
    
    EDIT StockGroupMarketing OBJECT o
;

FORM stockGroupMarketings 'Группы складов'
    OBJECTS o = StockGroupMarketing
    PROPERTIES(o) READONLY name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogStockGroupMarketingCondition 'Группы складов'
    OBJECTS c = MarketingCondition PANEL 
    OBJECTS o = StockGroupMarketing
    PROPERTIES in(c, o), name(o) READONLY
;

FORM dialogStockGroupStocks 'Группы складов'
    OBJECTS c = DepartmentStore PANEL 
    OBJECTS o = StockGroupMarketing
    PROPERTIES in(c, o), name(o) READONLY
;

dialogStockGroupsStocks (DepartmentStore d)  { 
    SHOW dialogStockGroupStocks;
}

EXTEND FORM departmentStore PROPERTIES stockGroups(d) ON CHANGE dialogStockGroupsStocks(d);

DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY (stockGroups(d));
    }
}

dialogStockGroupsMarketingCondition (MarketingCondition d)  { 
    SHOW dialogStockGroupMarketingCondition;
}

FORM calcBases 'Базы расчета'
    OBJECTS b = CalcBase
    PROPERTIES READONLY staticCaption(b)
;

dialogTreeItemGroups (MarketingCondition mc)  {   
    DIALOG dialogTreeItemGroups OBJECTS tg = itemGroup(mc) CHANGE;
}

FORM dialogItems 'Товары'
    OBJECTS c = MarketingCondition PANEL 
    OBJECTS i = Item
    PROPERTIES in(i, c)
    PROPERTIES (i) READONLY id, idBarcode, name, nameItemGroup
    
    FILTERGROUP ative
        FILTER 'Активные' active(i) DEFAULT
    
    FILTERGROUP select FILTER 'Отмеченные' in(i, c)
;
DESIGN dialogItems { size = (1024, 768); }

selectItems (MarketingCondition c) {
    DIALOG dialogItems OBJECTS c = c, i INPUT DO {
        IF NOT countItems(c) > 1 THEN {
            in(Item ii, c) <- NULL;
            in(i, c) <- TRUE;
        }
    }
}

META defineConditionTypeMarketing(nameType, captionType)
    EXTEND CLASS ConditionType {
        nameType ''###captionType
    }
    
    show###nameType (ConditionList l) = showIf(l, ConditionType.nameType);
    
    nameCalcBase###nameType 'База расчета' (ConditionList l) = name(calcBase(l, ConditionType.nameType));
    
    EXTEND FORM contractMarketing
        
        PROPERTIES (l) PANEL READONLY nameCalcBase###nameType
        
        OBJECTS nameType = MarketingCondition
        PROPERTIES (##nameType) READONLY nameItemGroup, nameBrand, nameCountry, nameWeighted , nameRegion, legalEntities, stockGroups,
                       stocks, items, marketingPercent, isException
        FILTERS conditionList(##nameType) = l, conditionType(##nameType) = ConditionType.nameType
    ;
    
    DESIGN contractMarketing {
        conditions {
            MOVE BOX (##nameType){
                caption = ''###captionType;
                NEW properties###nameType FIRST {
                    type = CONTAINERH;
                    caption = 'Параметры договора';
                    MOVE PROPERTY (nameCalcBase###nameType(l));
                }
                showIf = show###nameType(l);
            }
        }
    }
    
    EXTEND FORM contractMarketings
    
        PROPERTIES (l) PANEL READONLY nameCalcBase###nameType
        
        OBJECTS nameType = MarketingCondition
        PROPERTIES (##nameType) READONLY nameItemGroup, nameBrand, nameCountry, nameWeighted , nameRegion, legalEntities, stockGroups,
                       stocks, items, marketingPercent, isException
        FILTERS conditionList(##nameType) = l, conditionType(##nameType) = ConditionType.##nameType
    ;
    
    DESIGN contractMarketings {
        conditions {
            MOVE BOX (##nameType){
                caption = ''###captionType;
                NEW properties###nameType FIRST {
                    type = CONTAINERH;
                    caption = 'Параметры договора';
                    MOVE PROPERTY (nameCalcBase###nameType(l));
                }
                showIf = show###nameType(l);
            }
        }
    }
    
    showCalcBases###nameType (ConditionList l)  { 
        DIALOG calcBases OBJECTS b INPUT DO {
            calcBase(l, ConditionType t) <- b WHERE t == ConditionType.##nameType;
        }
    }
    EXTEND FORM conditionList
        PROPERTIES (l) PANEL nameCalcBase###nameType ON CHANGE showCalcBases###nameType(l)
        
        OBJECTS nameType = MarketingCondition
        PROPERTIES (##nameType) nameItemGroup ON CHANGE dialogTreeItemGroups(##nameType), nameBrand, nameCountry, nameWeighted , nameRegion,  
                        legalEntities ON CHANGE showSelectLegalEntities(##nameType), stockGroups ON CHANGE dialogStockGroupsMarketingCondition(##nameType),
                        stocks ON CHANGE showSelectStocks(##nameType), items ON CHANGE selectItems(nameType), marketingPercent, isException, NEW, DELETE 
        FILTERS conditionList(##nameType) = l, conditionType(##nameType) = ConditionType.##nameType
    ;
    
    DESIGN conditionList {
        conditions {
            MOVE BOX (##nameType){
                caption = ''###captionType;
                NEW properties###nameType FIRST {
                    type = CONTAINERH;
                    caption = 'Параметры договора';
                    MOVE PROPERTY (nameCalcBase###nameType(l));
                }
                showIf = show###nameType(l);
            }
        }
    }
END

@defineConditionTypeMarketing(retail, 'Маркетинг розничный');

@defineConditionTypeMarketing(logistic, 'Логистический бонус');

@defineConditionTypeMarketing(merch, 'Мерчендайзинг');

//-------------------------------------Маркетинг фиксированный--------------------------------------------//

CLASS FixedMarketingCondition 'Условие договора маркетинга (фиксированный)';
TABLE fixedMArketingCondition (FixedMarketingCondition);

conditionList = DATA ConditionList(FixedMarketingCondition) NONULL DELETE INDEXED;
contractMarketing (FixedMarketingCondition mc) = contractMarketing(conditionList(mc));

CLASS FixedMarketingType 'Вид' {
    dmp 'ДМП',
    represent 'Представленность'
}
TABLE fixedMarketingType (FixedMarketingType);
name (FixedMarketingType t) = staticCaption(t) IF t IS FixedMarketingType IN id;

type = DATA FixedMarketingType (FixedMarketingCondition);
nameType 'Вид' (FixedMarketingCondition c) = staticCaption(type(c));

currency = DATA Currency (FixedMarketingCondition);
nameCurrency 'Валюта' (FixedMarketingCondition c) = name(currency(c));

monthSum 'Сумма в месяц' = DATA NUMERIC[16,4] (FixedMarketingCondition);
isVAT 'С НДС' = DATA BOOLEAN (FixedMarketingCondition);

itemGroup = DATA ItemGroup (FixedMarketingCondition);
nameItemGroup 'Категория' (FixedMarketingCondition c) = name(itemGroup(c));

//showFixed (ContractMarketing c) = contractType(c) == ContractType.infoServices OR contractType(c) == ContractType.tradeBonus;
//showFixed (ConditionList l) = showFixed(contractMarketing(l));

EXTEND FORM contractMarketing
    OBJECTS fixed = FixedMarketingCondition
    PROPERTIES (fixed) READONLY nameType, nameCurrency, monthSum, isVAT, nameItemGroup
    FILTERS conditionList(fixed) = l   
;
DESIGN contractMarketing {
    conditions {
        MOVE BOX (fixed) {
            caption = 'Маркетинг фиксированный';
//            showIf = showFixed(c);
        }
    }
}

EXTEND FORM contractMarketings 
    OBJECTS fixed = FixedMarketingCondition
    PROPERTIES (fixed) READONLY nameType, nameCurrency, monthSum, isVAT, nameItemGroup
    FILTERS conditionList(fixed) = l
;
DESIGN contractMarketings {
    conditions {
        MOVE BOX (fixed) {
            caption = 'Маркетинг фиксированный';
//            showIf = showFixed(c);
        }
    }
}

EXTEND FORM conditionList
    OBJECTS fixed = FixedMarketingCondition
    PROPERTIES (fixed) nameType, nameCurrency, monthSum, isVAT, nameItemGroup, NEW, DELETE 
    FILTERS conditionList(fixed) = l
;
DESIGN conditionList {
    conditions {
        MOVE BOX (fixed) {
            caption = 'Маркетинг фиксированный';
//            showIf = showFixed(l);
        }
    }
}

@defineConditionTypeMarketing(defects, 'Браки');

inConditionStock (MarketingCondition c, DepartmentStore st) = st IS DepartmentStore AND active(st) AND 
    ((inStock(c, st) OR NOT countStocks(c)) AND (region(st) == region(c) OR NOT region(c)) AND (inGroup(c, st) OR NOT countStockGroups(c))
    AND (inLegalEntityStock(c, legalEntity(st)) OR legalEntity(st) = customer(contractMarketing(c)))) MATERIALIZED;


addConditionList 'Добавить' (ContractMarketing c)  { 
    NEWSESSION NEW l = ConditionList {
        contractMarketing(l) <- c;
        dateFrom(l) <- currentDate();
        SHOW EDIT ConditionList = l DOCKED;
    }
} IMAGE 'add.png';

copyConditionList 'Копировать' (ConditionList l)  { 
    NEWSESSION NEW cl = ConditionList {
        contractMarketing(cl) <- contractMarketing(l);
        dateFrom(cl) <- currentDate();
        calcBase(cl, ConditionType t) <- calcBase(l, t);
        FOR conditionList(MarketingCondition mc) == l NEW nc = MarketingCondition DO {
            conditionList(nc) <- cl;
            conditionType(nc) <- conditionType(mc);
            itemGroup(nc) <- itemGroup(mc);
            brand(nc) <- brand(mc);
            country(nc) <- country(mc);
            weighted(nc) <- weighted(mc);
            region(nc) <- region(mc);
            inStock(nc, DepartmentStore st) <- inStock(mc, st);
            inLegalEntityStock(nc, LegalEntity le) <- inLegalEntityStock(mc, le);
            item(nc) <- item(mc);
            marketingPercent(nc) <- marketingPercent(mc);            
        }
        FOR conditionList(FixedMarketingCondition mc) == l NEW nc = FixedMarketingCondition DO {
            conditionList(nc) <- cl;
            itemGroup(nc) <- itemGroup(mc);
            type(nc) <- type(mc);
            currency(nc) <- currency(mc);
            monthSum(nc) <- monthSum(mc);
            isVAT(nc) <- isVAT(mc);
        }
        SHOW EDIT ConditionList = cl DOCKED;
    }
}

copyContractMarketing 'Копировать' (ContractMarketing c)  { 
    NEWSESSION NEW nc = ContractMarketing {
        dateFrom(nc) <- dateTo(c);
        dateTo(nc) <- sum(dateTo(c), 1 + daysBetweenDates(dateTo(c), dateFrom(c)));
        prolongation(nc) <- prolongation(c);
        customer(nc) <- customer(c);
        supplier(nc) <- supplier(c);
        paymentDelay(nc) <- paymentDelay(c);
        contractType(nc) <- contractType(c);
        fromPayment(nc) <- fromPayment(c);
        fromCount(nc) <- fromCount(c);
        numerator(nc) <- numerator(c);
        series(nc) <- series(c);
        number(nc) <- number(c);
        name(nc) <- name(c);
        period(nc) <- period(c);
        personSupplier(nc) <- personSupplier(c);
        basedOnSupplier(nc) <- basedOnSupplier(c);
        FOR ConditionList cl = [GROUP LAST ConditionList ccl ORDER dateTo(ccl) BY contractMarketing(ccl)](c) NEW ncl = ConditionList DO {
            contractMarketing(ncl) <- nc;
            dateFrom(ncl) <- currentDate();
            calcBase(ncl, ConditionType t) <- calcBase(cl, t);
            FOR conditionList(MarketingCondition mc) == cl NEW nmc = MarketingCondition DO {
                conditionList(nmc) <- ncl;
                conditionType(nmc) <- conditionType(mc);
                itemGroup(nmc) <- itemGroup(mc);
                brand(nmc) <- brand(mc);
                country(nmc) <- country(mc);
                weighted(nmc) <- weighted(mc);
                region(nmc) <- region(mc);
                inStock(nmc, DepartmentStore st) <- inStock(mc, st);
                inLegalEntityStock(nmc, LegalEntity le) <- inLegalEntityStock(mc, le);
                item(nmc) <- item(mc);
                marketingPercent(nmc) <- marketingPercent(mc);
            }
            FOR conditionList(FixedMarketingCondition fc) == cl NEW nfc = FixedMarketingCondition DO {
                conditionList(nfc) <- ncl;
                type(nfc) <- type(fc);
                currency(nfc) <- currency(fc);
                monthSum(nfc) <- monthSum(fc);
                isVAT(nfc) <- isVAT(fc);
                itemGroup(nfc) <- itemGroup(fc);    
            }    
        }
        SHOW EDIT ContractMarketing = nc DOCKED;
    }
}
EXTEND FORM contractMarketings PROPERTIES DRAW c TOOLBAR copyContractMarketing(c);

hide = ABSTRACT BOOLEAN (ConditionList);

EXTEND FORM contractMarketing
    PROPERTIES DRAW l TOOLBAR SHOWIF PREV (c IS ContractMarketing)  copyConditionList(l), addConditionList(c)
    PROPERTIES (l) SHOWIF (NOT hide(l) AND PREV (c IS ContractMarketing)) NEWSESSION EDIT, DELETE 
;

//CONSTRAINT NOT (dateFrom(ConditionList d1) > dateTo(ConditionList d2) OR dateTo(d1) < dateFrom(d2))
//    AND contractMarketing(d1) == contractMarketing(d2) AND d1 != d2 MESSAGE 'Пересечение сроков действия сопроводительных листов';

NAVIGATOR {
    dashboardNavigator {
        NEW FOLDER marketing 'Маркетинг' {
            NEW contractMarketings;
            NEW stockGroupMarketings;
        }
    }
}
importContractMarketings 'Импорт договоров' ()  { 
    
    LOCAL groupNumber = INTEGER (INTEGER);
    LOCAL idStock = VARSTRING[10](INTEGER);
    LOCAL inGroup = BOOLEAN (DepartmentStore, INTEGER);
    
    LOCAL number = VARSTRING[28](INTEGER);
    LOCAL dfrom = DATE (INTEGER);
    LOCAL dto = DATE (INTEGER);
    LOCAL name = VARSTRING[100](INTEGER);
    LOCAL prolongation = BOOLEAN (INTEGER);
    LOCAL nameSupplier = VARSTRING[100](INTEGER);
    LOCAL idSupplier = VARSTRING[10](INTEGER);
    LOCAL customer = VARSTRING[100](INTEGER);
    LOCAL delay = INTEGER (INTEGER);
    LOCAL contractType = VARSTRING[100](INTEGER);
    LOCAL period = VARSTRING[10](INTEGER);
    LOCAL fromCount = INTEGER (INTEGER);
    LOCAL fromPayment = INTEGER (INTEGER);
    LOCAL idList = VARSTRING[30](INTEGER);
    LOCAL conditionType = VARSTRING[50](INTEGER);
    LOCAL dfList = DATE (INTEGER);
    LOCAL dtList = DATE (INTEGER);
    LOCAL calcBase = VARSTRING[100](INTEGER);
    LOCAL fixedType = VARSTRING[100](INTEGER);
    LOCAL category = VARSTRING[100](INTEGER);
    LOCAL subCategory = VARSTRING[100](INTEGER);
    LOCAL brand = VARSTRING[100](INTEGER);
    LOCAL country = VARSTRING[100](INTEGER);
    LOCAL weight = VARSTRING[100](INTEGER);
    LOCAL region = VARSTRING[100](INTEGER);
    LOCAL stocks = VARSTRING[10](INTEGER);
    LOCAL barcode = VARSTRING[15](INTEGER);
    LOCAL percent = NUMERIC[6,4](INTEGER);
    LOCAL exeption = VARSTRING[15](INTEGER);
    LOCAL currency = VARSTRING[10](INTEGER);
    LOCAL sum = NUMERIC[10,2](INTEGER);
    
    INPUT f = EXCELFILE DO {
    
        IMPORT XLS NOHEADER SHEET 2 FROM f AS EXCELFILE TO groupNumber = A, idStock = B;
        
        FOR imported(INTEGER i) DO {
            inGroup(DepartmentStore s, INTEGER g) <- id(s) == idStock(i) WHERE (g == (GROUP MAX groupNumber(INTEGER ii) IF ii < i));
        }
        
        IMPORT XLS NOHEADER FROM f AS EXCELFILE TO number, dfrom, dto, name, prolongation, nameSupplier, idSupplier, customer, 
        delay, contractType, period, fromCount, fromPayment, idList, conditionType, dfList, dtList, calcBase, fixedType, 
        category, subCategory, brand, country, weight, region, stocks, barcode, percent, exeption, currency, sum;

        FOR [GROUP MIN INTEGER i IF i > 0 BY number(i), dfrom(i), dto(i), idSupplier(i)]
        (VARSTRING[28] number, DATE df, DATE dt, VARSTRING[100] sup) NEW c = ContractMarketing DO {
            number(c) <- number;
            dateFrom(c) <- df;
            dateTo(c) <- dt;
            supplier(c) <- legalEntity(sup);
        }
        FOR INTEGER i == [GROUP MIN INTEGER ii BY  number(ii), dfrom(ii), dto(ii), idSupplier(ii)](VARSTRING[28] number, DATE df, DATE dt, VARSTRING[10] idsup)
            AND ContractMarketing c == (GROUP LAST ContractMarketing cc WHERE number(cc) = number AND dateFrom(cc) == df AND dateTo(cc) == dt AND id(supplier(cc)) == idsup) DO {
            
            name(c) <- name(i);
            prolongation(c) <- prolongation(i);
            customer(c) <- GROUP LAST LegalEntity l WHERE isSubstring(name(l), customer(i));
            paymentDelay(c) <- delay(i);
            contractType(c) <- GROUP LAST ContractType t WHERE name(t) == contractType(i);
            period(c) <- GROUP LAST Period p WHERE name(p) == period(i);
            fromCount(c) <- fromCount(i) == 1;
            fromPayment(c) <- fromPayment(i) == 1;
        }
                
        FOR [GROUP MIN INTEGER i IF i > 0 BY number(i), dfrom(i), dto(i), idSupplier(i), dfList(i), dtList(i)](VARSTRING[28] n, DATE df, DATE dt, VARSTRING[10] ids, DATE dfl, DATE dtl)
            NEW c = ConditionList DO {
                contractMarketing(c) <- (GROUP LAST ContractMarketing m WHERE number(m) == n AND dateFrom(m) = df AND dateTo(m) = dt AND id(supplier(m)) = ids);
                dateFrom(c) <- dfl;
                dateTo(c) <- dtl;
        }  
        
        FOR imported(INTEGER i) AND number(ContractMarketing c) == number(i) AND dateFrom(c) == dfrom(i) 
            AND dateTo(c) == dto(i) AND id(supplier(c)) == idSupplier(i) AND i > 0 DO {
                    
            FOR ConditionList l == (GROUP LAST ConditionList ll WHERE dateFrom(ll) == dfList(i) AND dateTo(ll) == dtList(i) AND contractMarketing(ll) == c) DO {
                                
                IF calcBase(i) THEN NEW mc = MarketingCondition {
                    
                    conditionList(mc) <- l;
                    
                    calcBase(l, ConditionType t) <- (GROUP LAST CalcBase b WHERE name(b) == calcBase(i)) 
                                                    WHERE t == (GROUP LAST ConditionType tt WHERE name(tt) == conditionType(i));
                                                    
                    conditionType(mc) <- GROUP LAST ConditionType t WHERE name(t) == conditionType(i);
                                                    
                    itemGroup(mc) <- IF upper(subCategory(i)) == 'ВСЕ' THEN GROUP LAST SkuGroup g WHERE name(g) == category(i)
                                     ELSE GROUP LAST SkuGroup g WHERE name(g) == subCategory(i);
                    
                    brand(mc) <- brandName(brand(i));
                    country(mc) <- countryName(country(i));
                    weighted(mc) <- GROUP LAST Weighted w WHERE name(w) == weight(i);
                    region(mc) <- GROUP LAST Region r WHERE name(r) == upper(region(i));
                    inStock(mc, DepartmentStore s) <- id(s) == stocks(i) OR inGroup(s, INTEGER (stocks(i)));
                    item(mc) <- GROUP LAST Item it WHERE id(it) == barcode(i);
                    marketingPercent(mc) <- round2(percent(i) * 100.0);
                    isException(mc) <- exeption(i) == 'Исключение';
                }
                ELSE NEW fc = FixedMarketingCondition {
                    
                    conditionList(fc) <- l;
                    type(fc) <- GROUP LAST FixedMarketingType t WHERE name(t) == fixedType(i);
                    itemGroup(fc) <- IF subCategory(i) == 'Все' THEN GROUP LAST SkuGroup g WHERE name(g) == category(i)
                                     ELSE GROUP LAST SkuGroup g WHERE name(g) == subCategory(i);
                    
                    currency(fc) <- GROUP LAST Currency r WHERE shortName(r) == currency(i);
                    monthSum(fc) <- sum(i);
                }
            }
        }
    }
}

EXTEND FORM contractMarketings PROPERTIES DRAW c TOOLBAR importContractMarketings();

CONSTRAINT ContractMarketing c IS ContractMarketing AND NOT isCompany(customer(c)) CHECKED BY customer[ContractMarketing] 
    MESSAGE 'Получатель не является компанией';
    
migratedItemCondition = DATA BOOLEAN ();
onStarted() + { 
    IF NOT migratedItemCondition() THEN {
        NEWSESSION {
            setNoCancelInTransaction();
            migratedItemCondition() <- TRUE;
            in(Item i, MarketingCondition c) <- i == item(c);
            APPLY;
        }    
    }
}