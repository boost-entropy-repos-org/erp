MODULE AnalyticalReport;

REQUIRE Imply, Sku;

META createGroup(object, name, number)
    g###object name = DATA LOCAL BOOLEAN();
    WHEN LOCAL SET(g###object()) AND countGroup() < 3 DO addGroup(number, name);
    WHEN LOCAL SET(g###object()) AND countGroup() == 3 DO { g###object() <- NULL; };
    WHEN LOCAL DROPPED(g###object()) DO deleteGroup(number);   
END 

order 'Номер' = DATA LOCAL INTEGER(INTEGER);
nameGroup 'Группировка' = DATA LOCAL VARSTRING[100](INTEGER);

countGroup = OVERRIDE [=GROUP MAX order(INTEGER i)](), 0;

addGroup(INTEGER i, VARSTRING[100] name) = {
    nameGroup(i) <- name;
    order(i) <- (OVERRIDE [=GROUP MAX order(INTEGER in)](), 0) + 1;
}
reorderGroup() = {
    order(INTEGER i) <- PARTITION SUM 1 IF nameGroup(i) ORDER order(i);
}
deleteGroup(INTEGER i) = {
    nameGroup(i) <- NULL;
    order(i) <- NULL;
    reorderGroup();
}

@createGroup(stock, 'По магазину', 1);
@createGroup(supplier, 'По поставщику', 2);
@createGroup(group, 'По группам товара', 3);
@createGroup(sku, 'По товару', 4);
@createGroup(brand, 'По бренду', 5);
@createGroup(month, 'По месяцам', 6);
@createGroup(week, 'По неделям', 7);
@createGroup(day, 'По дням', 8);


nameGroupDB(INTEGER i) = CASE
    WHEN i == 1 THEN 'nameStock'
    WHEN i == 2 THEN 'nameSupplier'
    WHEN i == 3 THEN 'group1'
    WHEN i == 4 THEN 'nameSku'
    WHEN i == 5 THEN 'brand'
    WHEN i == 6 THEN 'TIME_FORMAT(__time,\'yyyy-MM\')'
    WHEN i == 7 THEN 'TIME_FORMAT(__time,\'yyyy неделя ww\')'
    WHEN i == 8 THEN 'TIME_FORMAT(__time,\'yyyy-MM-dd\')';

nameGroup1() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 1;
nameGroup2() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 2;
nameGroup3() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 3;

nameGroups = CONCAT ', ', (OVERRIDE nameGroup1(), '\'\'') + ' AS nameGroup1', (OVERRIDE nameGroup2(), '\'\'') + ' AS nameGroup2', (OVERRIDE nameGroup3(), '\'\'') + ' AS nameGroup3';

isTimeGroup() = order(6) OR order(7) OR order(8);

nameGroup1 = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup2 = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup3 = DATA LOCAL VARSTRING[255] (INTEGER);

quantitySold 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,4] (INTEGER);
costSumSold 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSold 'Продано (надбавка)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATSold 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSold 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnover 'Оборачиваемость' = DATA LOCAL NUMERIC[12,3] (INTEGER);
costBalance 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceB 'Остаток на начало' = DATA LOCAL NUMERIC[16,4] (INTEGER);
costBalanceB 'Себестоимость на начало' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceA 'Остаток на конец' = DATA LOCAL NUMERIC[16,4] (INTEGER);
costBalanceA 'Себестоимость на конец' = DATA LOCAL NUMERIC[18,4] (INTEGER);

fillAnalyticalReport (DATE dateFrom, DATE dateTo) = {
    nameGroup1(INTEGER i) <- NULL;
    nameGroup2(INTEGER i) <- NULL;
    nameGroup3(INTEGER i) <- NULL;
    
    quantitySold(INTEGER i) <- NULL;
    costSumSold(INTEGER i) <- NULL;
    markupSumSold(INTEGER i) <- NULL;
    sumVATSold(INTEGER i) <- NULL;
    sumSold(INTEGER i) <- NULL;
    turnover(INTEGER i) <- NULL;
    
    balanceB(INTEGER i) <- NULL;
    costBalanceB(INTEGER i) <- NULL;
    
    balanceA(INTEGER i) <- NULL;
    costBalanceA(INTEGER i) <- NULL;
     
    query('SELECT SUM(quantitySold) AS quantitySold, SUM(costSumSold) AS costSumSold, SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold) AS markupSumSold, SUM(sumVATSold) AS sumVATSold, SUM(sumSold) AS sumSold, SUM(costBalance)/SUM(costSumSold) AS turnover, SUM(costBalance) AS costBalance, ' 
        + nameGroups() 
        + ' FROM turnover WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\') GROUP BY ' 
        + CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3());
        
    IMPORT JSON FROM queryResult() TO nameGroup1 = nameGroup1, nameGroup2 = nameGroup2, nameGroup3 = nameGroup3, 
                                      quantitySold = quantitySold, costSumSold = costSumSold, markupSumSold = markupSumSold,
                                      sumVATSold = sumVATSold, sumSold = sumSold, turnover = turnover, costBalance = costBalance;
    
    IF NOT isTimeGroup() THEN {
        LOCAL localNameGroup1 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup2 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup3 = VARSTRING[255] (INTEGER);
        LOCAL localBalanceB = NUMERIC[16,4] (INTEGER);
        LOCAL localCostBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localBalanceA = NUMERIC[16,4] (INTEGER);
        LOCAL localCostBalanceA = NUMERIC[18,4] (INTEGER);
        
        query('SELECT SUM(balance) AS balanceB, SUM(costBalance) AS costBalanceB, '
            + nameGroups()
            + ' FROM turnover WHERE __time = TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') GROUP BY '
            + CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3());
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceB = balanceB, localCostBalanceB = costBalanceB;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP BY nameGroup1(INTEGER n), nameGroup2(n), nameGroup3(n) LAST n ORDER n](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i)) DO {
            balanceB(number) <- localBalanceB(i);
            costBalanceB(number) <- localCostBalanceB(i);
        }
        
        query('SELECT SUM(balance) AS balanceA, SUM(costBalance) AS costBalanceA, '
            + nameGroups()
            + ' FROM turnover WHERE __time = TIME_PARSE(\'' + sum(dateTo,1) + '\',\'yyyy-MM-dd\') GROUP BY '
            + CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3());
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceA = balanceA, localCostBalanceA = costBalanceA;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP BY nameGroup1(INTEGER n), nameGroup2(n), nameGroup3(n) LAST n ORDER n](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i)) DO {
            balanceA(number) <- localBalanceA(i);
            costBalanceA(number) <- localCostBalanceA(i);
        }
    }                                
}

FORM printAnalyticalReport 'Аналитический отчет'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1, nameGroup2, nameGroup3
    PROPERTIES(i) READONLY balanceB, costBalanceB
    PROPERTIES(i) READONLY quantitySold, costSumSold, markupSumSold, sumVATSold, sumSold, turnover, costBalance
    PROPERTIES(i) READONLY balanceA, costBalanceA
    FILTERS nameGroup1(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1(i), nameGroup2(i), nameGroup3(i)
;

printAnalyticalReport 'Аналитический отчет' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillAnalyticalReport(dateFrom, dateTo);    
    PRINT printAnalyticalReport OBJECTS df = dateFrom, dt = dateTo;
}  IMAGE 'print.png' IN print;

printAnalyticalReportXLSX 'Аналитический отчет (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillAnalyticalReport(dateFrom, dateTo);
    PRINT printAnalyticalReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM analyticalReport 'Аналитический отчет'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
    
    PROPERTIES() gStock, gSupplier, gGroup, gSku, gBrand, gMonth, gWeek, gDay
    
    OBJECTS gr = INTEGER 
    PROPERTIES(gr) READONLY order, nameGroup
    ORDER order(gr)
    FILTERS nameGroup(gr)
    
    PROPERTIES(df,dt) printAnalyticalReport, printAnalyticalReportXLSX
;

DESIGN analyticalReport {
    NEW topContainer {
        type = CONTAINERH;
        NEW dates {
            type = CONTAINERH;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        NEW printSkuContainer {
            type = CONTAINERH;
            caption = 'Печать';
            MOVE PROPERTY(printAnalyticalReport(df,dt));
            MOVE PROPERTY(printAnalyticalReportXLSX(df,dt));
        }
    }
    NEW bottomContainer {
        fill = 1;
        type = CONTAINERH;
        caption = 'Группировка';
        NEW checkBoxContainer{
            type = CONTAINERV;
            MOVE PROPERTY(gStock());
            MOVE PROPERTY(gSupplier());
            MOVE PROPERTY(gGroup());
            MOVE PROPERTY(gSku());
            MOVE PROPERTY(gBrand());
            MOVE PROPERTY(gMonth());
            MOVE PROPERTY(gWeek());
            MOVE PROPERTY(gDay());
        }
        MOVE BOX(gr) { caption = 'Порядок группировки'; };  
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    stockReports{
        NEW analyticalReport;
    }
}