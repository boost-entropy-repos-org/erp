MODULE TurnoverBI;

REQUIRE BI, PurchaseLedger, SaleLedger, Pricing, Item, Druid, ReportBI, DefaultLookupBI;

NAMESPACE BI;

overExportTurnover = ABSTRACT (DATE);
overExportTurnover = DATA LOCAL BOOLEAN ();

balance = DATA LOCAL NUMERIC[16,5] (Batch, Stock);
balance = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sum = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

exportTurnover 'Выгрузить Оборачиваемость' (DATE dFrom, DATE dTo) = {
    balance(Batch b, Stock st) <- balanceA(b, st, dTo);
    balance(Sku s, Stock st) <- balanceA(s, st, dTo);
    sum(Sku s, Stock st) <- sumA(s, st, dTo);

    LOCAL date = DATE ();
    date() <- dTo;
    
    WHILE date() >= dFrom DO {
        printToLog('' + currentDateTime() + ' Started EXPORT ' + date() + ' - ' + (GROUP SUM 1 IF balance(Batch b, Stock st)));
        overExportTurnover(date());
        IF NOT overExportTurnover() THEN {
            EXPORT CSV ',' FROM dateTime = [=FORMULA VARSTRING[20] 'to_char(($1),\'MM/DD/YY\')'](date()),
                                stock = Stock st, formatStock = parent(stockGroup(st)), legalEntityStock = legalEntity(st),
                                sku = sku(Batch b), supplier = supplier(b), supplierStock = supplierStock(b), cost = DOUBLE(cost(b)), valueVAT = DOUBLE(valueVAT(b)), //rp = retailPricingPriceA(b, st, date()),
                                group1 = skuGroup2(sku(b)), group2 = skuGroup3(sku(b)), group3 = skuGroup4(sku(b)), group4 = skuGroup5(sku(b)),
                                brand = brand(sku(b)), price = DOUBLE(sum(sku(b), st) / balance(sku(b), st)), UOM = UOM(sku(b)),
                                balance = DOUBLE(balance(b, st)),
                                quantityPurchase = DOUBLE(OVERRIDE quantityPurchase(b, st, date()), 0), sumVATPurchase = DOUBLE(OVERRIDE sumVATPurchase(b, st, date()), 0), sumPurchase = DOUBLE(OVERRIDE sumPurchase(b, st, date()), 0), 
                                quantitySold = DOUBLE(OVERRIDE quantitySold(b, st, date()), 0), sumVATSold = DOUBLE(OVERRIDE sumVATSold(b, st, date()), 0), sumSold = DOUBLE(OVERRIDE sumSold(b, st, date()), 0) 
                   WHERE balance(b, st) OR quantityPurchase(b, st, date()) OR quantitySold(b, st, date()) OR sumSold(b, st, date());
        }

        ingestBatch('turnover', date());

        balance(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, date()) WHERE signedQuantity(b, st, date()); 
        balance(Sku s, Stock st) <- balance(s, st) (-) signedQuantity(s, st, date()) WHERE signedQuantity(s, st, date()); 
        sum(Sku s, Stock st) <- sum(s, st) (-) signedSum(s, st, date()) WHERE signedSum(s, st, date()); 
        date() <- subtract(date(), 1);
    }
    
    runKillTask('turnover', dFrom, dTo);
     
} CONFIRM;

EXTEND FORM integrationData
    PROPERTIES exportTurnover(druidFrom, druidTo)
;


@defineReport(turnover, 'Оборачиваемость');


@createGroup(turnover, stock, 'По магазину', 1, 'stock', 'LOOKUP(stock,\'stock_name\')', 'Магазин');
@createGroup(turnover, supplier, 'По поставщику', 2, 'supplier', 'LOOKUP(supplier,\'legalEntity_name\')', 'Поставщик');
@createGroup(turnover, group1, 'По направлению', 3, 'group1', 'LOOKUP(group1,\'group_name\')', 'Направление');
@createGroup(turnover, group2, 'По группе', 4, 'group2', 'LOOKUP(group2,\'group_name\')', 'Группа');
@createGroup(turnover, group3, 'По подгруппе', 5, 'group3', 'LOOKUP(group3,\'group_name\')', 'Подгруппа');
@createGroup(turnover, group4, 'По субгруппе', 6, 'group4', 'LOOKUP(group4,\'group_name\')', 'Субгруппа');
@createGroup(turnover, sku, 'По товару', 7, 'sku', 'LOOKUP(sku,\'sku_name\')', 'Товар');
@createGroup(turnover, brand, 'По бренду', 8, 'brand', 'LOOKUP(brand,\'brand_name\')', 'Бренд');
@createGroup(turnover, month, 'По месяцам', 9, 'TIME_FORMAT(__time,\'yyyy-MM\')', 'Месяц');
@createGroup(turnover, week, 'По неделям', 10, 'TIME_FORMAT(__time,\'yyyy неделя ww\')', 'Неделя');
@createGroup(turnover, day, 'По дням', 11, 'TIME_FORMAT(__time,\'yyyy-MM-dd\')', 'День');
@createGroup(turnover, supplierStock, 'По складу поставщика', 12, 'supplierStock', 'LOOKUP(supplierStock,\'stock_name\')', 'Склад поставщика');
@createGroup(turnover, UOM, 'По единице измерения', 13, 'UOM', 'LOOKUP(UOM,\'UOM_name\')', 'Еденица измерения');


nameGroupsTurnover = CONCAT ', ', (OVERRIDE exprGroup1Turnover(), '\'\'') + ' AS nameGroup1',
                                           (OVERRIDE exprGroup2Turnover(), '\'\'') + ' AS nameGroup2',
                                           (OVERRIDE exprGroup3Turnover(), '\'\'') + ' AS nameGroup3',
                                           (IF gSkuTurnover() THEN 'LOOKUP(sku,\'sku_barcode\')' ELSE '\'\'') + ' AS barcodeSku';

isTimeGroup() = gMonthTurnover() OR gWeekTurnover() OR gDayTurnover();

isTimeGroup2() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 2 AND ( i == 9 OR i == 10 OR i == 11));
isTimeGroup3() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 3 AND ( i == 9 OR i == 10 OR i == 11));
printSumGroup1() = TRUE IF NOT isTimeGroup() OR NOT (isTimeGroup2() OR isTimeGroup3());
printSumGroup2() = TRUE IF NOT isTimeGroup() OR NOT isTimeGroup3();

nameGroup1Turnover = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup2Turnover = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup3Turnover = DATA LOCAL VARSTRING[255] (INTEGER);
barcodeSku = DATA LOCAL VARSTRING[15] (INTEGER);

quantitySold 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costSumSold 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costSumVATSold 'Продано (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSold 'Продано (надбавка, руб)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
percMarkupSumSold 'Продано (надбавка, %)' = DATA LOCAL NUMERIC[8,2] (INTEGER);
sumVATSold 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSold 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPriceSold 'Продано (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantityPurchase 'Закуплено (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumMinusVATPurchase 'Закуплено (сумма без НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATPurchase 'Закуплено (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPurchase 'Закуплено (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPricePurchase 'Закуплено (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

costBalance 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnover 'Оборачиваемость' = DATA LOCAL NUMERIC[12,3] (INTEGER);
daysOnStock 'Дней на складе' = DATA LOCAL INTEGER (INTEGER);

balanceB 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceB 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceB 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceB 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceA 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceA 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceA 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceA 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);


countRowsTurnover 'Количество строк' () = GROUP SUM 1 IF nameGroup1Turnover(INTEGER i);

isBalanceB 'Остаток на начало' = DATA LOCAL BOOLEAN ();
isIn 'Приход' = DATA LOCAL BOOLEAN ();
isOut 'Расход' = DATA LOCAL BOOLEAN ();
isBalanceA 'Остаток на конец' = DATA LOCAL BOOLEAN ();

isQuantity 'Количество' = DATA LOCAL BOOLEAN ();
isCost 'Себестоимость' = DATA LOCAL BOOLEAN ();
isCostVAT 'Себестоимость с НДС' = DATA LOCAL BOOLEAN ();
isMarkup 'Надбавка' = DATA LOCAL BOOLEAN ();
isSum 'Сумма' = DATA LOCAL BOOLEAN ();
isTurnover 'Оборачиваемость' = DATA LOCAL BOOLEAN ();
isDaysOnStock 'Дней на складе' = DATA LOCAL BOOLEAN ();

overIsOut 'Расход' = OVERRIDE isOut(), (isMarkup() OR isTurnover());
overIsCost 'Себестоимость' = OVERRIDE isCost(), (isMarkup() OR isTurnover());

//------- Группы складов -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (StockGroup);

levelParentInclude(StockGroup stockGroup) = GROUP MIN level(stockGroup, StockGroup parent) IF dataInclude(parent);    
nearestParentInclude(StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(stockGroup));
nearestInclude(StockGroup stockGroup) = dataInclude(nearestParentInclude(stockGroup));

include 'Вкл' (StockGroup stockGroup) = OVERRIDE dataInclude(stockGroup), nearestInclude (stockGroup);

deleteIncludeStockGroups 'Сбросить отмеченные'() = {
    dataInclude(StockGroup g) <- NULL;
};

nameIncludeStockGroups 'Группы складов (все)' ()= GROUP CONCAT TEXT(name(StockGroup stockGroup)) IF dataInclude(stockGroup), ', ' ORDER stockGroup CHARWIDTH 20;

//------- Склады -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Stock);

include 'Вкл' (Stock stock) = (OVERRIDE dataInclude(stock), include(stockGroup(stock))) IF isCompany(stock);

deleteIncludeStocks 'Сбросить отмеченные'() = {
    dataInclude (Stock st) <- NULL;
};

nameIncludeStocks 'Склады (все)' ()= GROUP CONCAT TEXT(name(Stock stock)) IF dataInclude(stock), ', ' ORDER stock CHARWIDTH 20;

nameIncludeStockGroupsStock 'Группы складов, склады (все)' () = CONCAT '; ', nameIncludeStockGroups(), nameIncludeStocks() CHARWIDTH 20;

FORM dialogStockGroupsStock 'Склады'
    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent
    PROPERTIES READONLY VALUE(a), name(sg)
    PROPERTIES include(sg)
    ORDER name(sg)
    PROPERTIES deleteIncludeStockGroups() TODRAW sg TOOLBAR
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) include
    ORDER name(s)
    PROPERTIES deleteIncludeStocks() TODRAW s TOOLBAR
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' include(s) 'F9'
;
DESIGN dialogStockGroupsStock {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }
            MOVE BOX(s) {
                fill = 1.5;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeStockGroupsStock() = {
    DIALOG dialogStockGroupsStock;
}

//------- Поставщики -------
include 'Вкл' = DATA LOCAL BOOLEAN (LegalEntity);

deleteIncludeLegalEntities 'Сбросить отмеченные'() = {
    include(LegalEntity l) <- NULL;
};

nameIncludeLegalEntities 'Поставщики (все)' () = GROUP CONCAT TEXT((OVERRIDE name(LegalEntity le),'')) IF include(le), ', ' ORDER le CHARWIDTH 20;

FORM dialogLegalEntity 'Поставщики'
    OBJECTS le = LegalEntity
    PROPERTIES include(le)
    PROPERTIES(le) READONLY id, name, fullName
    ORDER name(le)
    FILTERS isSupplier(le)
    FILTERGROUP inLegalEntity FILTER 'Отмеченные' include(le)
    PROPERTIES deleteIncludeLegalEntities() TODRAW le TOOLBAR
;
DESIGN dialogLegalEntity {
    BOX { size = (1024, 768); }
}

changeIncludeLegalEntities() = {
    DIALOG dialogLegalEntity OBJECTS le INPUT DO {
        IF NOT (GROUP SUM 1 IF include(LegalEntity l)) THEN
            include(le) <- TRUE;
    }
}

//------- Брэнды -------
include 'Вкл' = DATA LOCAL BOOLEAN (Brand);

deleteIncludeBrands 'Сбросить отмеченные'() = {
    include(Brand b) <- NULL;
};

nameIncludeBrands 'Брэнд (все)' () = GROUP CONCAT TEXT((OVERRIDE name(Brand b),'')) IF include(b), ', ' ORDER b CHARWIDTH 20;

commaBrandId 'Список кодов' = DATA LOCAL VARISTRING[4000]() FIXEDCHARWIDTH 30;

addCommaBrandId 'Добавить' () = {
    IF commaBrandId() THEN {
        include(Brand b) <- TRUE WHERE (GROUP SUM 1 IF isWordInCSV(id(b), replace(commaBrandId(),' ',',')) == 1);
        commaBrandId() <- NULL;
    }
}

FORM dialogBrand 'Брэнды'
    OBJECTS b = Brand
    PROPERTIES PANEL commaBrandId(), addCommaBrandId()
    PROPERTIES include(b)
    PROPERTIES(b) READONLY id, name
    ORDER name(b)
    FILTERGROUP inBrand FILTER 'Отмеченные' include(b)
    PROPERTIES deleteIncludeBrands() TODRAW b TOOLBAR    
;
DESIGN dialogBrand {
    BOX { size = (1024, 768); }
}

changeIncludeBrands() = {
    DIALOG dialogBrand OBJECTS b INPUT DO {
        IF NOT (GROUP SUM 1 IF include(Brand br)) THEN
            include(b) <- TRUE;
    }
}

//------- Группы товаров -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (SkuGroup);

levelParentInclude(SkuGroup skuGroup) = GROUP MIN level(skuGroup, SkuGroup parent) IF dataInclude(parent);    
nearestParentInclude(SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(skuGroup));
nearestInclude(SkuGroup skuGroup) = dataInclude(nearestParentInclude (skuGroup));

include 'Вкл' (SkuGroup skuGroup) = OVERRIDE dataInclude(skuGroup), nearestInclude(skuGroup);

deleteIncludeSkuGroups 'Сбросить отмеченные'() = {
    dataInclude(SkuGroup g) <- NULL;
};

nameIncludeSkuGroups 'Группы товаров (все)' ()= GROUP CONCAT TEXT(name(SkuGroup skuGroup)) IF dataInclude(skuGroup), ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups1 'Направления (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 2, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups2 'Группы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 3, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups3 'Подгруппы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 4, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups4 'Субгруппы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 5, ', ' ORDER skuGroup CHARWIDTH 20;

//------- Товары -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Sku);

includeSkuGroup (Sku sku) = TRUE IF (GROUP MAX 1 IF include(SkuGroup g) AND isParent(g, sku));

include 'Вкл' (Sku sku) = OVERRIDE dataInclude(sku), includeSkuGroup(sku);

deleteIncludeSkus 'Сбросить отмеченные'() = {
    dataInclude(Sku b) <- NULL;
};

nameIncludeSkus 'Товары (все)' = GROUP CONCAT replace(name(Sku sku), '\n', '') IF dataInclude(sku), ', ' ORDER sku CHARWIDTH 20;
nameIncludeBarcodes 'ШК (все)' = GROUP CONCAT TEXT(idBarcode(Sku sku)) IF dataInclude(sku), ',' ORDER sku CHARWIDTH 20;

commaBarcodeId 'Список ШК' = DATA LOCAL VARISTRING[4000]() FIXEDCHARWIDTH 30;

addCommaBarcodeId 'Добавить' () = {
    IF commaBarcodeId() THEN {
        dataInclude(Sku sku) <- TRUE WHERE [=GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(commaBarcodeId(),' ',',')) == 1 BY sku(barcode)](sku);
        commaBarcodeId() <- NULL;
    }
}

FORM dialogSku 'Товары'
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), name(sk)
    PROPERTIES include(sk)
    ORDER order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups() TODRAW sk TOOLBAR

    OBJECTS sku = Sku
    PROPERTIES PANEL commaBarcodeId(), addCommaBarcodeId()
    PROPERTIES include(sku)
    PROPERTIES(sku) READONLY idBarcode, name, shortNameUOM
    ORDER name(sku)
    FILTERS isParent(sk,sku)
    FILTERGROUP inSku FILTER 'Отмеченные' include(sku)
    PROPERTIES deleteIncludeSkus() TODRAW sku TOOLBAR
;
DESIGN dialogSku {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE skuTree) {
                caption = 'Склады';
            }
            MOVE BOX(sku) {
                fill = 1.5;
                GRID(sku) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeSkus() = {
    DIALOG dialogSku;
}
changeIncludeBarcodes() = {
    INPUT s = VARISTRING[4000] DO {
        dataInclude(Sku sku) <- TRUE IF [=GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(s,' ',',')) == 1 BY sku(barcode)](sku);
    }
}

filterGroups() = CONCAT ' OR', ' group1 IN (' + nameIncludeSkuGroups1() + ')',
                                       ' group2 IN (' + nameIncludeSkuGroups2() + ')',
                                       ' group3 IN (' + nameIncludeSkuGroups3() + ')',
                                       ' group4 IN (' + nameIncludeSkuGroups4() + ')';
filter() = (OVERRIDE ' AND stock IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Stock s) +'\'') IF include(s),',') + ')','')
                    + (OVERRIDE ' AND supplier IN (' + (GROUP CONCAT TEXT('\''+ TEXT(LegalEntity le) +'\'') IF include(le),',') + ')','')
                    + (OVERRIDE ' AND brand IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Brand b) +'\'') IF include(b),',') + ')','')
                    + (OVERRIDE ' AND (' + filterGroups() + ')','')
                    + (OVERRIDE ' AND sku IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Sku sku) +'\'') IF dataInclude(sku),',') + ')','');
values() = (IF overIsOut() AND isQuantity() THEN 'SUM(quantitySold)' ELSE '\'\'') + ' AS quantitySold, '
                            + (IF overIsOut() AND overIsCost() THEN 'SUM(costSumSold)' ELSE '\'\'') + ' AS costSumSold, '
                            + (IF overIsOut() AND isCostVAT() THEN 'SUM(costSumVATSold)' ELSE '\'\'') + ' AS costSumVATSold, '
                            + (IF overIsOut() AND isMarkup() THEN 'SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold)' ELSE '\'\'') + ' AS markupSumSold, '
                            + (IF overIsOut() AND isMarkup() THEN '(SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold))*100/SUM(costSumSold)' ELSE '\'\'') + ' AS percMarkupSumSold, '
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumVATSold)' ELSE '\'\'') + ' AS sumVATSold, '
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumSold)' ELSE '\'\'') + ' AS sumSold, '
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumPriceSold)' ELSE '\'\'') + ' AS sumPriceSold, '
                            + (IF isIn() AND isQuantity() THEN 'SUM(quantityPurchase)' ELSE '\'\'') + ' AS quantityPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumPurchase)-SUM(sumVATPurchase)' ELSE '\'\'') + ' AS sumMinusVATPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumVATPurchase)' ELSE '\'\'') + ' AS sumVATPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumPurchase)' ELSE '\'\'') + ' AS sumPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumPricePurchase)' ELSE '\'\'') + ' AS sumPricePurchase, '
                            + (IF isTurnover() THEN 'SUM(costBalance)/SUM(costSumSold)' ELSE '\'\'') + ' AS turnover, '
                            + (IF isTurnover() THEN 'SUM(costBalance)' ELSE '\'\'') + ' AS costBalance, '
                            + (IF isDaysOnStock() THEN 'COUNT(DISTINCT __time)' ELSE '\'\'') + ' AS daysOnStock, ';

fillTurnoverReport (DATE dateFrom, DATE dateTo) = {
    nameGroup1Turnover(INTEGER i) <- NULL;
    nameGroup2Turnover(INTEGER i) <- NULL;
    nameGroup3Turnover(INTEGER i) <- NULL;
    barcodeSku(INTEGER i) <- NULL;
    
    quantitySold(INTEGER i) <- NULL;
    costSumSold(INTEGER i) <- NULL;
    costSumVATSold(INTEGER i) <- NULL;
    markupSumSold(INTEGER i) <- NULL;
    percMarkupSumSold(INTEGER i) <- NULL;
    sumVATSold(INTEGER i) <- NULL;
    sumSold(INTEGER i) <- NULL;
    sumPriceSold(INTEGER i) <- NULL;
    
    quantityPurchase(INTEGER i) <- NULL;
    sumMinusVATPurchase(INTEGER i) <- NULL;
    sumVATPurchase(INTEGER i) <- NULL;
    sumPurchase(INTEGER i) <- NULL;
    sumPricePurchase(INTEGER i) <- NULL;
    
    costBalance(INTEGER i) <- NULL;
    turnover(INTEGER i) <- NULL;
    daysOnStock(INTEGER i) <- NULL;
    
    balanceB(INTEGER i) <- NULL;
    costBalanceB(INTEGER i) <- NULL;
    costVATBalanceB(INTEGER i) <- NULL;
    sumBalanceB(INTEGER i) <- NULL;
    
    balanceA(INTEGER i) <- NULL;
    costBalanceA(INTEGER i) <- NULL;
    costVATBalanceA(INTEGER i) <- NULL;
    sumBalanceA(INTEGER i) <- NULL;
    
    IF isTimeGroup() THEN {
        query(replace('SELECT ' + values() 
             + (IF isBalanceA() AND isQuantity() THEN 'SUM(balance)' + (IF gDayTurnover() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS balanceA, '
             + (IF isBalanceA() AND overIsCost() THEN 'SUM(costBalance)' + (IF gDayTurnover() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS costBalanceA, '
             + (IF isBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance)' + (IF gDayTurnover() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS costVATBalanceA, '
             + (IF isBalanceA() AND isSum() THEN 'SUM(sumBalance)' + (IF gDayTurnover() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS sumBalanceA, '
             + nameGroupsTurnover() + ' FROM turnover'
             + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
             + filter()
             + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover())
             + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO nameGroup1Turnover = nameGroup1, nameGroup2Turnover = nameGroup2, nameGroup3Turnover = nameGroup3, 
                                          quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                          markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                          sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                          quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                          sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                          turnover = turnover, costBalance = costBalance, balanceA = balanceA, costBalanceA = costBalanceA,
                                          costVATBalanceA = costVATBalanceA, sumBalanceA = sumBalanceA, daysOnStock = daysOnStock,
                                          barcodeSku = barcodeSku;
    } ELSE {
        query(replace('SELECT ' + values() 
             + nameGroupsTurnover() + ' FROM turnover'
             + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
             + filter()
             + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover())
             + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO nameGroup1Turnover = nameGroup1, nameGroup2Turnover = nameGroup2, nameGroup3Turnover = nameGroup3, 
                                          quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                          markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                          sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                          quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                          sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                          turnover = turnover, costBalance = costBalance, daysOnStock = daysOnStock,
                                          barcodeSku = barcodeSku;
        
        LOCAL localNameGroup1 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup2 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup3 = VARSTRING[255] (INTEGER);
        LOCAL localBarcodeSku = VARSTRING[15] (INTEGER);
        LOCAL localBalanceB = NUMERIC[16,5] (INTEGER);
        LOCAL localCostBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localCostVATBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localSumBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localBalanceA = NUMERIC[16,5] (INTEGER);
        LOCAL localCostBalanceA = NUMERIC[18,4] (INTEGER);
        LOCAL localCostVATBalanceA = NUMERIC[18,4] (INTEGER);
        LOCAL localSumBalanceA = NUMERIC[18,4] (INTEGER);
        
        query(replace('SELECT '
            + (IF isBalanceB() AND isQuantity() THEN 'SUM(balance)' ELSE '\'\'') + ' AS balanceB, '
            + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalance)' ELSE '\'\'') + ' AS costBalanceB, '
            + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalance)' ELSE '\'\'') + ' AS costVATBalanceB, '
            + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalance)' ELSE '\'\'') + ' AS sumBalanceB, '
            + nameGroupsTurnover() + ' FROM turnover'
            + ' WHERE __time = TIME_PARSE(\'' + sum(dateFrom,-1) + '\',\'yyyy-MM-dd\')'
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceB = balanceB, localCostBalanceB = costBalanceB, localCostVATBalanceB = costVATBalanceB,
                                          localSumBalanceB = sumBalanceB, localBarcodeSku = barcodeSku;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP LAST INTEGER n ORDER n BY nameGroup1Turnover(n), nameGroup2Turnover(n), nameGroup3Turnover(n), barcodeSku(n)](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i), localBarcodeSku(i)) DO {
            balanceB(number) <- localBalanceB(i);
            costBalanceB(number) <- localCostBalanceB(i);
            costVATBalanceB(number) <- localCostVATBalanceB(i);
            sumBalanceB(number) <- localSumBalanceB(i);
        }
        
        query(replace('SELECT '
            + (IF isBalanceA() AND isQuantity() THEN 'SUM(balance)' ELSE '\'\'') + ' AS balanceA, '
            + (IF isBalanceA() AND overIsCost() THEN 'SUM(costBalance)' ELSE '\'\'') + ' AS costBalanceA, '
            + (IF isBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance)' ELSE '\'\'') + ' AS costVATBalanceA, '
            + (IF isBalanceA() AND isSum() THEN 'SUM(sumBalance)' ELSE '\'\'') + ' AS sumBalanceA, '
            + nameGroupsTurnover() + ' FROM turnover'
            + ' WHERE __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceA = balanceA, localCostBalanceA = costBalanceA, localCostVATBalanceA = costVATBalanceA,
                                          localSumBalanceA = sumBalanceA, localBarcodeSku = barcodeSku;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP LAST INTEGER n ORDER n BY nameGroup1Turnover(n), nameGroup2Turnover(n), nameGroup3Turnover(n), barcodeSku(n)](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i), localBarcodeSku(i)) DO {
            balanceA(number) <- localBalanceA(i);
            costBalanceA(number) <- localCostBalanceA(i);
            costVATBalanceA(number) <- localCostVATBalanceA(i);
            sumBalanceA(number) <- localSumBalanceA(i);
        }
    }                                
}

FORM printTurnoverReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsTurnover, maxRowCount, nameIncludeStockGroupsStock, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeSkuGroups, nameIncludeSkus, 
                 printSumGroup1, printSumGroup2
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Turnover, nameGroup2Turnover, nameGroup3Turnover, barcodeSku SHOWIF gSkuTurnover()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND isQuantity()),
                           costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
                           costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
                           sumBalanceB SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND isQuantity()),
                           costSumSold SHOWIF (overIsOut() AND overIsCost()),
                           costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
                           markupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           percMarkupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           sumVATSold SHOWIF (overIsOut() AND isSum()),
                           sumSold SHOWIF (overIsOut() AND isSum()),
                           sumPriceSold SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND isQuantity()),
                           sumMinusVATPurchase SHOWIF (isIn() AND isSum()),
                           sumVATPurchase SHOWIF (isIn() AND isSum()),
                           sumPurchase SHOWIF (isIn() AND isSum()),
                           sumPricePurchase SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
                           costBalance SHOWIF isTurnover(),
                           daysOnStock SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (isBalanceA() AND isQuantity()),
                           costBalanceA SHOWIF (isBalanceA() AND overIsCost()),
                           costVATBalanceA SHOWIF (isBalanceA() AND isCostVAT()),
                           sumBalanceA SHOWIF (isBalanceA() AND isSum())
    FILTERS nameGroup1Turnover(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1Turnover(i), nameGroup2Turnover(i), nameGroup3Turnover(i), barcodeSku(i)
;

printTurnoverReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printTurnoverReportTable 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsTurnover, maxRowCount, nameIncludeStockGroupsStock, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeSkuGroups, nameIncludeSkus,
                 captionGroup1Turnover, captionGroup2Turnover, captionGroup3Turnover
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Turnover, nameGroup2Turnover, nameGroup3Turnover, barcodeSku SHOWIF gSkuTurnover()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND isQuantity()),
                           costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
                           costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
                           sumBalanceB SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND isQuantity()),
                           costSumSold SHOWIF (overIsOut() AND overIsCost()),
                           costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
                           markupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           percMarkupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           sumVATSold SHOWIF (overIsOut() AND isSum()),
                           sumSold SHOWIF (overIsOut() AND isSum()),
                           sumPriceSold SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND isQuantity()),
                           sumMinusVATPurchase SHOWIF (isIn() AND isSum()),
                           sumVATPurchase SHOWIF (isIn() AND isSum()),
                           sumPurchase SHOWIF (isIn() AND isSum()),
                           sumPricePurchase SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
                           costBalance SHOWIF isTurnover(),
                           daysOnStock SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (isBalanceA() AND isQuantity()),
                           costBalanceA SHOWIF (isBalanceA() AND overIsCost()),
                           costVATBalanceA SHOWIF (isBalanceA() AND isCostVAT()),
                           sumBalanceA SHOWIF (isBalanceA() AND isSum())
    FILTERS nameGroup1Turnover(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1Turnover(i), nameGroup2Turnover(i), nameGroup3Turnover(i), barcodeSku(i)
;

printTurnoverReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

showGroup1 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 2;
showGroup2 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 3;
showGroup3 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 4;
showGroup4 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 5;
hideGroup1Turnover() += TRUE IF NOT showGroup1();
hideGroup2Turnover() += TRUE IF NOT showGroup2();
hideGroup3Turnover() += TRUE IF NOT showGroup3();
hideGroup4Turnover() += TRUE IF NOT showGroup4();

EXTEND FORM turnoverReport    
    PROPERTIES() isBalanceB, isIn, overIsOut, isBalanceA,
                 isQuantity, overIsCost, isCostVAT, isMarkup, isSum, isTurnover, isDaysOnStock
    
    PROPERTIES nameIncludeStockGroups() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeStocks() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeLegalEntities() ON CHANGE changeIncludeLegalEntities()
    PROPERTIES nameIncludeBrands() ON CHANGE changeIncludeBrands()
    PROPERTIES nameIncludeSkuGroups() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeSkus() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeBarcodes() ON CHANGE changeIncludeBarcodes()
    
    PROPERTIES(df,dt) printTurnoverReportXLSX, printTurnoverReportTableXLSX
;

DESIGN turnoverReport {
    filters {
        MOVE PROPERTY(nameIncludeStockGroups());
        MOVE PROPERTY(nameIncludeStocks());
        MOVE PROPERTY(nameIncludeLegalEntities());
        MOVE PROPERTY(nameIncludeBrands());
        MOVE PROPERTY(nameIncludeSkuGroups());
        MOVE PROPERTY(nameIncludeSkus());
        MOVE PROPERTY(nameIncludeBarcodes());
    }
    lhContainer {
        NEW col1 {
            type = CONTAINERV;
            MOVE PROPERTY(isBalanceB());
            MOVE PROPERTY(isIn());
            MOVE PROPERTY(overIsOut());
            MOVE PROPERTY(isBalanceA());
        }
        NEW col2 {
            type = CONTAINERV;
            MOVE PROPERTY(isQuantity());
            MOVE PROPERTY(overIsCost());
            MOVE PROPERTY(isCostVAT());
            MOVE PROPERTY(isMarkup());
            MOVE PROPERTY(isSum());
            MOVE PROPERTY(isTurnover());
            MOVE PROPERTY(isDaysOnStock());
        }
    }
    print {
        MOVE PROPERTY (printTurnoverReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printTurnoverReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
}