MODULE TurnoverBI;

REQUIRE PurchaseLedger, SaleLedger, Pricing, Item, Druid;

NAMESPACE BI;

exportTurnover 'Выгрузить Оборачиваемость' (DATE dFrom, DATE dTo) = {
    LOCAL balance = NUMERIC[16,5] (Batch, Stock);
    balance(Batch b, Stock st) <- balanceA(b, st, dTo);
    
    LOCAL balance = NUMERIC[16,5] (Sku, Stock);
    balance(Sku s, Stock st) <- balanceA(s, st, dTo);

    LOCAL sum = NUMERIC[18,4] (Sku, Stock);
    sum(Sku s, Stock st) <- sumA(s, st, dTo);

    LOCAL date = DATE ();
    date() <- dTo;
    
    WHILE date() >= dFrom DO {
        printToLog('' + currentDateTime() + ' Started EXPORT ' + date() + ' - ' + (GROUP SUM 1 IF balance(Batch b, Stock st)));
        EXPORT CSV ',' FROM dateTime = [=FORMULA VARSTRING[20] 'to_char(($1),\'MM/DD/YY\')'](date()),
                            nameStock = name(Stock st), nameSku = replace(nameSku(Batch b), '\n', ''), barcodeSku = idBarcodeSku(b), nameSupplier = nameSupplier(b), cost = DOUBLE(cost(b)), valueVAT = DOUBLE(valueVAT(b)), //rp = retailPricingPriceA(b, st, date()),
                            group1 = nameSkuGroup2(sku(b)), brand = nameBrand(sku(b)), price = DOUBLE(sum(sku(b), st) / balance(sku(b), st)),
                            balance = DOUBLE(balance(b, st)),
                            quantityPurchase = DOUBLE(OVERRIDE quantityPurchase(b, st, date()), 0), sumVATPurchase = DOUBLE(OVERRIDE sumVATPurchase(b, st, date()), 0), sumPurchase = DOUBLE(OVERRIDE sumPurchase(b, st, date()), 0), 
                            quantitySold = DOUBLE(OVERRIDE quantitySold(b, st, date()), 0), sumVATSold = DOUBLE(OVERRIDE sumVATSold(b, st, date()), 0), sumSold = DOUBLE(OVERRIDE sumSold(b, st, date()), 0) 
               WHERE balance(b, st) OR quantityPurchase(b, st, date()) OR quantitySold(b, st, date()) OR sumSold(b, st, date());

        ingestBatch('turnover', date());

        balance(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, date()) WHERE signedQuantity(b, st, date()); 
        balance(Sku s, Stock st) <- balance(s, st) (-) signedQuantity(s, st, date()) WHERE signedQuantity(s, st, date()); 
        sum(Sku s, Stock st) <- sum(s, st) (-) signedSum(s, st, date()) WHERE signedSum(s, st, date()); 
        date() <- subtract(date(), 1);
    }
    
    runKillTask('turnover', dFrom, dTo); 
} CONFIRM;

EXTEND FORM integrationData
    PROPERTIES exportTurnover(druidFrom, druidTo)
;


META createGroup(object, name, number)
    g###object name = DATA LOCAL BOOLEAN();
    WHEN LOCAL SET(g###object()) AND countGroup() < 3 DO addGroup(number, name);
    WHEN LOCAL SET(g###object()) AND countGroup() == 3 DO { g###object() <- NULL; };
    WHEN LOCAL DROPPED(g###object()) DO deleteGroup(number);   
END 

order 'Номер' = DATA LOCAL INTEGER(INTEGER);
nameGroup 'Группировка' = DATA LOCAL VARSTRING[100](INTEGER);

countGroup = OVERRIDE [=GROUP MAX order(INTEGER i)](), 0;

addGroup(INTEGER i, VARSTRING[100] name) = {
    nameGroup(i) <- name;
    order(i) <- (OVERRIDE [=GROUP MAX order(INTEGER in)](), 0) + 1;
}
reorderGroup() = {
    order(INTEGER i) <- PARTITION SUM 1 IF nameGroup(i) ORDER order(i);
}
deleteGroup(INTEGER i) = {
    nameGroup(i) <- NULL;
    order(i) <- NULL;
    reorderGroup();
}

@createGroup(stock, 'По магазину', 1);
@createGroup(supplier, 'По поставщику', 2);
@createGroup(group, 'По группам товара', 3);
@createGroup(sku, 'По товару', 4);
@createGroup(brand, 'По бренду', 5);
@createGroup(month, 'По месяцам', 6);
@createGroup(week, 'По неделям', 7);
@createGroup(day, 'По дням', 8);


nameGroupDB(INTEGER i) = CASE
    WHEN i == 1 THEN 'nameStock'
    WHEN i == 2 THEN 'nameSupplier'
    WHEN i == 3 THEN 'group1'
    WHEN i == 4 THEN 'nameSku'
    WHEN i == 5 THEN 'brand'
    WHEN i == 6 THEN 'TIME_FORMAT(__time,\'yyyy-MM\')'
    WHEN i == 7 THEN 'TIME_FORMAT(__time,\'yyyy неделя ww\')'
    WHEN i == 8 THEN 'TIME_FORMAT(__time,\'yyyy-MM-dd\')';

nameGroup1() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 1;
nameGroup2() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 2;
nameGroup3() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 3;

nameGroups = CONCAT ', ', (OVERRIDE nameGroup1(), '\'\'') + ' AS nameGroup1', (OVERRIDE nameGroup2(), '\'\'') + ' AS nameGroup2', (OVERRIDE nameGroup3(), '\'\'') + ' AS nameGroup3';

isTimeGroup() = order(6) OR order(7) OR order(8);

nameGroup1 = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup2 = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup3 = DATA LOCAL VARSTRING[255] (INTEGER);

quantitySold 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costSumSold 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costSumVATSold 'Продано (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSold 'Продано (надбавка, руб)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
percMarkupSumSold 'Продано (надбавка, %)' = DATA LOCAL NUMERIC[8,2] (INTEGER);
sumVATSold 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSold 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPriceSold 'Продано (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantityPurchase 'Закуплено (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumMinusVATPurchase 'Закуплено (сумма без НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATPurchase 'Закуплено (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPurchase 'Закуплено (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPricePurchase 'Закуплено (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

costBalance 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnover 'Оборачиваемость' = DATA LOCAL NUMERIC[12,3] (INTEGER);

balanceB 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceB 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceB 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceB 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceA 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceA 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceA 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceA 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);


countRows 'Количество строк' () = GROUP SUM 1 IF nameGroup1(INTEGER i);

//------- Группы складов -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (StockGroup);

levelParentInclude(StockGroup stockGroup) = GROUP MIN level(stockGroup, StockGroup parent) IF dataInclude(parent);    
nearestParentInclude(StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(stockGroup));
nearestInclude(StockGroup stockGroup) = dataInclude(nearestParentInclude(stockGroup));

include 'Вкл' (StockGroup stockGroup) = OVERRIDE dataInclude(stockGroup), nearestInclude (stockGroup);

deleteIncludeStockGroups 'Сбросить отмеченные'() = {
    dataInclude(StockGroup g) <- NULL;
};

nameIncludeStockGroups 'Группы складов (все)' ()= GROUP CONCAT name(StockGroup stockGroup) IF dataInclude(stockGroup), ', ' ORDER stockGroup CHARWIDTH 20;

//------- Склады -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Stock);

include 'Вкл' (Stock stock) = (OVERRIDE dataInclude(stock), include(stockGroup(stock))) IF isCompany(stock);

deleteIncludeStocks 'Сбросить отмеченные'() = {
    dataInclude (Stock st) <- NULL;
};

nameIncludeStocks 'Склады (все)' ()= GROUP CONCAT name(Stock stock) IF dataInclude(stock), ', ' ORDER stock CHARWIDTH 20;

nameIncludeStockGroupsStock 'Группы складов, склады (все)' () = CONCAT '; ', nameIncludeStockGroups(), nameIncludeStocks() CHARWIDTH 20;

FORM dialogStockGroupsStock 'Склады'
    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent
    PROPERTIES READONLY VALUE(a), name(sg)
    PROPERTIES include(sg)
    ORDER name(sg)
    PROPERTIES deleteIncludeStockGroups() TODRAW sg TOOLBAR
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) include
    ORDER name(s)
    PROPERTIES deleteIncludeStocks() TODRAW s TOOLBAR
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' include(s) 'F9'
;
DESIGN dialogStockGroupsStock {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }
            MOVE BOX(s) {
                fill = 1.5;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeStockGroupsStock() = {
    DIALOG dialogStockGroupsStock;
}

//------- Поставщики -------
include 'Вкл' = DATA LOCAL BOOLEAN (LegalEntity);

deleteIncludeLegalEntities 'Сбросить отмеченные'() = {
    include(LegalEntity l) <- NULL;
};

nameIncludeLegalEntities 'Поставщики (все)' () = GROUP CONCAT (OVERRIDE name(LegalEntity le),'') IF include(le), ', ' ORDER le CHARWIDTH 20;

FORM dialogLegalEntity 'Поставщики'
    OBJECTS le = LegalEntity
    PROPERTIES include(le)
    PROPERTIES(le) READONLY id, name, fullName
    ORDER name(le)
    FILTERS isSupplier(le)
    FILTERGROUP inLegalEntity FILTER 'Отмеченные' include(le)
    PROPERTIES deleteIncludeLegalEntities() TODRAW le TOOLBAR
;
DESIGN dialogLegalEntity {
    BOX { size = (1024, 768); }
}

changeIncludeLegalEntities() = {
    DIALOG dialogLegalEntity OBJECTS le INPUT DO {
        IF NOT (GROUP SUM 1 IF include(LegalEntity l)) THEN
            include(le) <- TRUE;
    }
}

//------- Брэнды -------
include 'Вкл' = DATA LOCAL BOOLEAN (Brand);

deleteIncludeBrands 'Сбросить отмеченные'() = {
    include(Brand b) <- NULL;
};

nameIncludeBrands 'Брэнд (все)' () = GROUP CONCAT (OVERRIDE name(Brand b),'') IF include(b), ', ' ORDER b CHARWIDTH 20;

commaBrandId 'Список кодов' = DATA LOCAL VARISTRING[4000]() FIXEDCHARWIDTH 30;

addCommaBrandId 'Добавить' () = {
    IF commaBrandId() THEN {
        include(Brand b) <- TRUE WHERE (GROUP SUM 1 IF isWordInCSV(id(b), replace(commaBrandId(),' ',',')) == 1);
        commaBrandId() <- NULL;
    }
}

FORM dialogBrand 'Брэнды'
    OBJECTS b = Brand
    PROPERTIES PANEL commaBrandId(), addCommaBrandId()
    PROPERTIES include(b)
    PROPERTIES(b) READONLY id, name
    ORDER name(b)
    FILTERGROUP inBrand FILTER 'Отмеченные' include(b)
    PROPERTIES deleteIncludeBrands() TODRAW b TOOLBAR    
;
DESIGN dialogBrand {
    BOX { size = (1024, 768); }
}

changeIncludeBrands() = {
    DIALOG dialogBrand OBJECTS b INPUT DO {
        IF NOT (GROUP SUM 1 IF include(Brand br)) THEN
            include(b) <- TRUE;
    }
}

//------- Группы товаров -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (SkuGroup);

levelParentInclude(SkuGroup skuGroup) = GROUP MIN level(skuGroup, SkuGroup parent) IF dataInclude(parent);    
nearestParentInclude(SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(skuGroup));
nearestInclude(SkuGroup skuGroup) = dataInclude(nearestParentInclude (skuGroup));

include 'Вкл' (SkuGroup skuGroup) = OVERRIDE dataInclude(skuGroup), nearestInclude(skuGroup);

deleteIncludeSkuGroups 'Сбросить отмеченные'() = {
    dataInclude(SkuGroup g) <- NULL;
};

nameIncludeSkuGroups 'Группы товаров (все)' ()= GROUP CONCAT name(SkuGroup skuGroup) IF dataInclude(skuGroup), ', ' ORDER skuGroup CHARWIDTH 20;

//------- Товары -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Sku);

includeSkuGroup (Sku sku) = TRUE IF (GROUP MAX 1 IF include(SkuGroup g) AND isParent(g, sku));

include 'Вкл' (Sku sku) = OVERRIDE dataInclude(sku), includeSkuGroup(sku);

deleteIncludeSkus 'Сбросить отмеченные'() = {
    dataInclude(Sku b) <- NULL;
};

nameIncludeSkus 'Товары (все)' = GROUP CONCAT name(Sku sku) IF dataInclude(sku), ', ' ORDER sku CHARWIDTH 20;
nameIncludeBarcodes 'ШК (все)' = GROUP CONCAT idBarcode(Sku sku) IF dataInclude(sku), ',' ORDER sku CHARWIDTH 20;

commaBarcodeId 'Список ШК' = DATA LOCAL VARISTRING[4000]() FIXEDCHARWIDTH 30;

addCommaBarcodeId 'Добавить' () = {
    IF commaBarcodeId() THEN {
        dataInclude(Sku sku) <- TRUE WHERE [=GROUP BY sku(Barcode barcode) SUM 1 IF isWordInCSV(id(barcode), replace(commaBarcodeId(),' ',',')) == 1](sku);
        commaBarcodeId() <- NULL;
    }
}

FORM dialogSku 'Товары'
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), name(sk)
    PROPERTIES include(sk)
    ORDER order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups() TODRAW sk TOOLBAR

    OBJECTS sku = Sku
    PROPERTIES PANEL commaBarcodeId(), addCommaBarcodeId()
    PROPERTIES include(sku)
    PROPERTIES(sku) READONLY idBarcode, name, shortNameUOM
    ORDER name(sku)
    FILTERS isParent(sk,sku)
    FILTERGROUP inSku FILTER 'Отмеченные' include(sku)
    PROPERTIES deleteIncludeSkus() TODRAW sku TOOLBAR
;
DESIGN dialogSku {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE skuTree) {
                caption = 'Склады';
            }
            MOVE BOX(sku) {
                fill = 1.5;
                GRID(sku) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeSkus() = {
    DIALOG dialogSku;
}
changeIncludeBarcodes() = {
    INPUT s = VARISTRING[4000] DO {
        dataInclude(Sku sku) <- TRUE IF [=GROUP BY sku(Barcode barcode) SUM 1 IF isWordInCSV(id(barcode), replace(s,' ',',')) == 1](sku);
    }
}


fillTurnoverReport (DATE dateFrom, DATE dateTo) = {
    nameGroup1(INTEGER i) <- NULL;
    nameGroup2(INTEGER i) <- NULL;
    nameGroup3(INTEGER i) <- NULL;
    
    quantitySold(INTEGER i) <- NULL;
    costSumSold(INTEGER i) <- NULL;
    costSumVATSold(INTEGER i) <- NULL;
    markupSumSold(INTEGER i) <- NULL;
    percMarkupSumSold(INTEGER i) <- NULL;
    sumVATSold(INTEGER i) <- NULL;
    sumSold(INTEGER i) <- NULL;
    sumPriceSold(INTEGER i) <- NULL;
    
    quantityPurchase(INTEGER i) <- NULL;
    sumMinusVATPurchase(INTEGER i) <- NULL;
    sumVATPurchase(INTEGER i) <- NULL;
    sumPurchase(INTEGER i) <- NULL;
    sumPricePurchase(INTEGER i) <- NULL;
    
    costBalance(INTEGER i) <- NULL;
    turnover(INTEGER i) <- NULL;
    
    balanceB(INTEGER i) <- NULL;
    costBalanceB(INTEGER i) <- NULL;
    costVATBalanceB(INTEGER i) <- NULL;
    sumBalanceB(INTEGER i) <- NULL;
    
    balanceA(INTEGER i) <- NULL;
    costBalanceA(INTEGER i) <- NULL;
    costVATBalanceA(INTEGER i) <- NULL;
    sumBalanceA(INTEGER i) <- NULL;
    
    query(replace('SELECT SUM(quantitySold) AS quantitySold, SUM(costSumSold) AS costSumSold, SUM(costSumVATSold) AS costSumVATSold, SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold) AS markupSumSold, (SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold))/SUM(costSumSold) AS percMarkupSumSold, SUM(sumVATSold) AS sumVATSold, SUM(sumSold) AS sumSold, SUM(sumPriceSold) AS sumPriceSold, SUM(quantityPurchase) AS quantityPurchase, SUM(sumPurchase)-SUM(sumVATPurchase) AS sumMinusVATPurchase, SUM(sumVATPurchase) AS sumVATPurchase, SUM(sumPurchase) AS sumPurchase, SUM(sumPricePurchase) AS sumPricePurchase,  SUM(costBalance)/SUM(costSumSold) AS turnover, SUM(costBalance) AS costBalance, ' 
         + nameGroups() + ' FROM turnover'
         + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
         + (OVERRIDE ' AND nameStock IN (' + (GROUP CONCAT TEXT('\''+ name(Stock s) +'\'') IF include(s),',') + ')','')
         + (OVERRIDE ' AND nameSupplier IN (' + (GROUP CONCAT TEXT('\''+ name(LegalEntity le) +'\'') IF include(le),',') + ')','')
         + (OVERRIDE ' AND brand IN (' + (GROUP CONCAT TEXT('\''+ (OVERRIDE name(Brand b),'') +'\'') IF include(b),',') + ')','')
         + (OVERRIDE ' AND barcodeSku IN (' + (GROUP CONCAT TEXT('\''+ idBarcode(Sku sku) +'\'') IF include(sku),',') + ')','')
         + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3())
         + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
        
    IMPORT JSON FROM queryResult() TO nameGroup1 = nameGroup1, nameGroup2 = nameGroup2, nameGroup3 = nameGroup3, 
                                      quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                      markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                      sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                      quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                      sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                      turnover = turnover, costBalance = costBalance;
    
    IF NOT isTimeGroup() THEN {
        LOCAL localNameGroup1 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup2 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup3 = VARSTRING[255] (INTEGER);
        LOCAL localBalanceB = NUMERIC[16,5] (INTEGER);
        LOCAL localCostBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localCostVATBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localSumBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localBalanceA = NUMERIC[16,5] (INTEGER);
        LOCAL localCostBalanceA = NUMERIC[18,4] (INTEGER);
        LOCAL localCostVATBalanceA = NUMERIC[18,4] (INTEGER);
        LOCAL localSumBalanceA = NUMERIC[18,4] (INTEGER);
        
        query(replace('SELECT SUM(balance) AS balanceB, SUM(costBalance) AS costBalanceB, SUM(costVATBalance) AS costVATBalanceB, SUM(sumBalance) AS sumBalanceB, '
            + nameGroups() + ' FROM turnover'
            + ' WHERE __time = TIME_PARSE(\'' + sum(dateFrom,-1) + '\',\'yyyy-MM-dd\')'
            + (OVERRIDE ' AND nameStock IN (' + (GROUP CONCAT TEXT('\''+ name(Stock s) +'\'') IF include(s),',') + ')','')
            + (OVERRIDE ' AND nameSupplier IN (' + (GROUP CONCAT TEXT('\''+ name(LegalEntity le) +'\'') IF include(le),',') + ')','')
            + (OVERRIDE ' AND brand IN (' + (GROUP CONCAT TEXT('\''+ (OVERRIDE name(Brand b),'') +'\'') IF include(b),',') + ')','')
            + (OVERRIDE ' AND barcodeSku IN (' + (GROUP CONCAT TEXT('\''+ idBarcode(Sku sku) +'\'') IF include(sku),',') + ')','')
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceB = balanceB, localCostBalanceB = costBalanceB, localCostVATBalanceB = costVATBalanceB,
                                          localSumBalanceB = sumBalanceB;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP BY nameGroup1(INTEGER n), nameGroup2(n), nameGroup3(n) LAST n ORDER n](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i)) DO {
            balanceB(number) <- localBalanceB(i);
            costBalanceB(number) <- localCostBalanceB(i);
            costVATBalanceB(number) <- localCostVATBalanceB(i);
            sumBalanceB(number) <- localSumBalanceB(i);
        }
        
        query(replace('SELECT SUM(balance) AS balanceA, SUM(costBalance) AS costBalanceA, SUM(costVATBalance) AS costVATBalanceA, SUM(sumBalance) AS sumBalanceA, '
            + nameGroups() + ' FROM turnover'
            + ' WHERE __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
            + (OVERRIDE ' AND nameStock IN (' + (GROUP CONCAT TEXT('\''+ name(Stock s) +'\'') IF include(s),',') + ')','')
            + (OVERRIDE ' AND nameSupplier IN (' + (GROUP CONCAT TEXT('\''+ name(LegalEntity le) +'\'') IF include(le),',') + ')','')
            + (OVERRIDE ' AND brand IN (' + (GROUP CONCAT TEXT('\''+ (OVERRIDE name(Brand b),'') +'\'') IF include(b),',') + ')','')
            + (OVERRIDE ' AND barcodeSku IN (' + (GROUP CONCAT TEXT('\''+ idBarcode(Sku sku) +'\'') IF include(sku),',') + ')','')
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceA = balanceA, localCostBalanceA = costBalanceA, localCostVATBalanceA = costVATBalanceA,
                                          localSumBalanceA = sumBalanceA;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP BY nameGroup1(INTEGER n), nameGroup2(n), nameGroup3(n) LAST n ORDER n](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i)) DO {
            balanceA(number) <- localBalanceA(i);
            costBalanceA(number) <- localCostBalanceA(i);
            costVATBalanceA(number) <- localCostVATBalanceA(i);
            sumBalanceA(number) <- localSumBalanceA(i);
        }
    }                                
}

FORM printTurnoverReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRows, maxRowCount, nameIncludeStockGroupsStock, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeSkuGroups
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1, nameGroup2, nameGroup3
    PROPERTIES(i) READONLY balanceB, costBalanceB, costVATBalanceB, sumBalanceB
    PROPERTIES(i) READONLY quantitySold, costSumSold, costSumVATSold, markupSumSold, percMarkupSumSold, sumVATSold, sumSold, sumPriceSold
    PROPERTIES(i) READONLY quantityPurchase, sumMinusVATPurchase, sumVATPurchase, sumPurchase, sumPricePurchase
    PROPERTIES(i) READONLY turnover, costBalance
    PROPERTIES(i) READONLY balanceA, costBalanceA, costVATBalanceA, sumBalanceA
    FILTERS nameGroup1(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1(i), nameGroup2(i), nameGroup3(i)
;

printTurnoverReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printTurnoverReportTable 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRows, maxRowCount, nameIncludeStockGroupsStock, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeSkuGroups
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1, nameGroup2, nameGroup3
    PROPERTIES(i) READONLY balanceB, costBalanceB, costVATBalanceB, sumBalanceB
    PROPERTIES(i) READONLY quantitySold, costSumSold, costSumVATSold, markupSumSold, percMarkupSumSold, sumVATSold, sumSold, sumPriceSold
    PROPERTIES(i) READONLY quantityPurchase, sumMinusVATPurchase, sumVATPurchase, sumPurchase, sumPricePurchase
    PROPERTIES(i) READONLY turnover, costBalance
    PROPERTIES(i) READONLY balanceA, costBalanceA, costVATBalanceA, sumBalanceA
    FILTERS nameGroup1(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1(i), nameGroup2(i), nameGroup3(i)
;

printTurnoverReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM turnoverReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
    
    PROPERTIES nameIncludeStockGroups() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeStocks() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeLegalEntities() ON CHANGE changeIncludeLegalEntities()
    PROPERTIES nameIncludeBrands() ON CHANGE changeIncludeBrands()
    PROPERTIES nameIncludeSkuGroups() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeSkus() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeBarcodes() ON CHANGE changeIncludeBarcodes()
    
//-- выбор группировки    
    PROPERTIES() gStock, gSupplier, gGroup, gSku, gBrand, gMonth, gWeek, gDay
    
    OBJECTS gr = INTEGER 
    PROPERTIES(gr) READONLY order, nameGroup
    ORDER order(gr)
    FILTERS nameGroup(gr)
    
    PROPERTIES(df,dt) printTurnoverReportXLSX, printTurnoverReportTableXLSX
    
    EVENTS 
        ON INIT {
            SEEK turnoverReport.df = sum(currentDate(), -1);
            SEEK turnoverReport.dt = sum(currentDate(), -1);
        }
;

DESIGN turnoverReport {
    NEW topContainer {
        type = CONTAINERV;
        alignment = STRETCH;
        NEW dates {
            type = CONTAINERH;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        NEW filters {
            type = CONTAINERV;
            alignment = STRETCH;
            caption = 'Фильтры';
            MOVE PROPERTY (nameIncludeStockGroups());
            MOVE PROPERTY (nameIncludeStocks());
            MOVE PROPERTY (nameIncludeLegalEntities());
            MOVE PROPERTY (nameIncludeBrands());
            MOVE PROPERTY (nameIncludeSkuGroups());
            MOVE PROPERTY (nameIncludeSkus());
            MOVE PROPERTY (nameIncludeBarcodes());
        }
    }
    NEW bottomContainer {
        fill = 2;
        type = SPLITV;
        NEW rhContainer {
            fill = 1;
            type = CONTAINERH;
            caption = 'Группировка';
            NEW checkBoxContainer{
                type = CONTAINERV;
                MOVE PROPERTY(gStock());
                MOVE PROPERTY(gSupplier());
                MOVE PROPERTY(gGroup());
                MOVE PROPERTY(gSku());
                MOVE PROPERTY(gBrand());
                MOVE PROPERTY(gMonth());
                MOVE PROPERTY(gWeek());
                MOVE PROPERTY(gDay());
            }
            MOVE BOX(gr) { caption = 'Порядок группировки'; };
        } 
    }
    NEW print {
        type = COLUMNS;
        columns = 2;
        alignment = STRETCH;
        MOVE PROPERTY (printTurnoverReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printTurnoverReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    dashboardNavigator {
        NEW FOLDER bi 'BI' {
            NEW turnoverReport;
        }
    }
}