MODULE TurnoverBI;

REQUIRE BI, PurchaseLedger, SaleLedger, Pricing, Item, Druid;

NAMESPACE BI;

exportTurnover 'Выгрузить Оборачиваемость' (DATE dFrom, DATE dTo) = {
    LOCAL balance = NUMERIC[16,5] (Batch, Stock);
    balance(Batch b, Stock st) <- balanceA(b, st, dTo);
    
    LOCAL balance = NUMERIC[16,5] (Sku, Stock);
    balance(Sku s, Stock st) <- balanceA(s, st, dTo);

    LOCAL sum = NUMERIC[18,4] (Sku, Stock);
    sum(Sku s, Stock st) <- sumA(s, st, dTo);

    LOCAL date = DATE ();
    date() <- dTo;
    
    WHILE date() >= dFrom DO {
        printToLog('' + currentDateTime() + ' Started EXPORT ' + date() + ' - ' + (GROUP SUM 1 IF balance(Batch b, Stock st)));
        EXPORT CSV ',' FROM dateTime = [=FORMULA VARSTRING[20] 'to_char(($1),\'MM/DD/YY\')'](date()),
                            nameStock = name(Stock st), nameFormatStock = nameParent(stockGroup(st)),
                            nameSku = replace(nameSku(Batch b), '\n', ''), barcodeSku = idBarcodeSku(b), idSku = idSku(b), nameSupplier = nameSupplier(b), cost = DOUBLE(cost(b)), valueVAT = DOUBLE(valueVAT(b)), //rp = retailPricingPriceA(b, st, date()),
                            group1 = nameSkuGroup2(sku(b)), group2 = nameSkuGroup3(sku(b)), group3 = nameSkuGroup4(sku(b)), group4 = nameSkuGroup5(sku(b)),
                            brand = nameBrand(sku(b)), price = DOUBLE(sum(sku(b), st) / balance(sku(b), st)),
                            balance = DOUBLE(balance(b, st)),
                            quantityPurchase = DOUBLE(OVERRIDE quantityPurchase(b, st, date()), 0), sumVATPurchase = DOUBLE(OVERRIDE sumVATPurchase(b, st, date()), 0), sumPurchase = DOUBLE(OVERRIDE sumPurchase(b, st, date()), 0), 
                            quantitySold = DOUBLE(OVERRIDE quantitySold(b, st, date()), 0), sumVATSold = DOUBLE(OVERRIDE sumVATSold(b, st, date()), 0), sumSold = DOUBLE(OVERRIDE sumSold(b, st, date()), 0) 
               WHERE balance(b, st) OR quantityPurchase(b, st, date()) OR quantitySold(b, st, date()) OR sumSold(b, st, date());

        ingestBatch('turnover', date());

        balance(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, date()) WHERE signedQuantity(b, st, date()); 
        balance(Sku s, Stock st) <- balance(s, st) (-) signedQuantity(s, st, date()) WHERE signedQuantity(s, st, date()); 
        sum(Sku s, Stock st) <- sum(s, st) (-) signedSum(s, st, date()) WHERE signedSum(s, st, date()); 
        date() <- subtract(date(), 1);
    }
    
    runKillTask('turnover', dFrom, dTo); 
} CONFIRM;

EXTEND FORM integrationData
    PROPERTIES exportTurnover(druidFrom, druidTo)
;


META createGroup(object, name, number)
    g###object name = DATA LOCAL BOOLEAN();
    WHEN LOCAL SET(g###object()) AND countGroup() < 3 DO addGroup(number, name);
    WHEN LOCAL SET(g###object()) AND countGroup() == 3 DO { g###object() <- NULL; };
    WHEN LOCAL DROPPED(g###object()) DO deleteGroup(number);   
END 

order 'Номер' = DATA LOCAL INTEGER(INTEGER);
nameGroup 'Группировка' = DATA LOCAL VARSTRING[100](INTEGER);

countGroup = OVERRIDE [=GROUP MAX order(INTEGER i)](), 0;

addGroup(INTEGER i, VARSTRING[100] name) = {
    nameGroup(i) <- name;
    order(i) <- (OVERRIDE [=GROUP MAX order(INTEGER in)](), 0) + 1;
}
reorderGroup() = {
    order(INTEGER i) <- PARTITION SUM 1 IF nameGroup(i) ORDER order(i);
}
deleteGroup(INTEGER i) = {
    nameGroup(i) <- NULL;
    order(i) <- NULL;
    reorderGroup();
}

@createGroup(stock, 'По магазину', 1);
@createGroup(supplier, 'По поставщику', 2);
@createGroup(group1, 'По направлению', 3);
@createGroup(group2, 'По группе', 4);
@createGroup(group3, 'По подгруппе', 5);
@createGroup(group4, 'По субгруппе', 6);
@createGroup(sku, 'По товару', 7);
@createGroup(brand, 'По бренду', 8);
@createGroup(month, 'По месяцам', 9);
@createGroup(week, 'По неделям', 10);
@createGroup(day, 'По дням', 11);
@createGroup(supplierStock, 'По складу поставщика', 12);


nameGroupDB(INTEGER i) = CASE
    WHEN i == 1 THEN 'nameStock'
    WHEN i == 2 THEN 'nameSupplier'
    WHEN i == 3 THEN 'group1'
    WHEN i == 4 THEN 'group2'
    WHEN i == 5 THEN 'group3'
    WHEN i == 6 THEN 'group4'
    WHEN i == 7 THEN 'nameSku'
    WHEN i == 8 THEN 'brand'
    WHEN i == 9 THEN 'TIME_FORMAT(__time,\'yyyy-MM\')'
    WHEN i == 10 THEN 'TIME_FORMAT(__time,\'yyyy неделя ww\')'
    WHEN i == 11 THEN 'TIME_FORMAT(__time,\'yyyy-MM-dd\')'
    WHEN i == 12 THEN 'nameSupplierStock';
    
captionGroup(INTEGER i) = CASE
    WHEN i == 1 THEN 'Магазин'
    WHEN i == 2 THEN 'Поставщик'
    WHEN i == 3 THEN 'Направление'
    WHEN i == 4 THEN 'Группа'
    WHEN i == 5 THEN 'Подгруппа'
    WHEN i == 6 THEN 'Субгруппа'
    WHEN i == 7 THEN 'Товар'
    WHEN i == 8 THEN 'Бренд'
    WHEN i == 9 THEN 'Месяц'
    WHEN i == 10 THEN 'Неделя'
    WHEN i == 11 THEN 'День'
    WHEN i == 12 THEN 'Склад поставщика';

nameGroup1() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 1;
nameGroup2() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 2;
nameGroup3() = GROUP MAX nameGroupDB(INTEGER i) IF order(i) == 3;

captionGroup1() = GROUP MAX captionGroup(INTEGER i) IF order(i) == 1;
captionGroup2() = GROUP MAX captionGroup(INTEGER i) IF order(i) == 2;
captionGroup3() = GROUP MAX captionGroup(INTEGER i) IF order(i) == 3;

nameGroups = CONCAT ', ', (OVERRIDE nameGroup1(), '\'\'') + ' AS nameGroup1', (OVERRIDE nameGroup2(), '\'\'') + ' AS nameGroup2', (OVERRIDE nameGroup3(), '\'\'') + ' AS nameGroup3',
                              (IF gSku() THEN 'barcodeSku' ELSE '\'\'') + ' AS barcodeSku';

isTimeGroup() = gMonth() OR gWeek() OR gDay();

isTimeGroup2() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 2 AND ( i == 9 OR i == 10 OR i == 11));
isTimeGroup3() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 3 AND ( i == 9 OR i == 10 OR i == 11));
printSumGroup1() = TRUE IF NOT isTimeGroup() OR NOT (isTimeGroup2() OR isTimeGroup3());
printSumGroup2() = TRUE IF NOT isTimeGroup() OR NOT isTimeGroup3();

nameGroup1 = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup2 = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup3 = DATA LOCAL VARSTRING[255] (INTEGER);
barcodeSku = DATA LOCAL VARSTRING[15] (INTEGER);

quantitySold 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costSumSold 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costSumVATSold 'Продано (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSold 'Продано (надбавка, руб)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
percMarkupSumSold 'Продано (надбавка, %)' = DATA LOCAL NUMERIC[8,2] (INTEGER);
sumVATSold 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSold 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPriceSold 'Продано (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantityPurchase 'Закуплено (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumMinusVATPurchase 'Закуплено (сумма без НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATPurchase 'Закуплено (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPurchase 'Закуплено (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPricePurchase 'Закуплено (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

costBalance 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnover 'Оборачиваемость' = DATA LOCAL NUMERIC[12,3] (INTEGER);
daysOnStock 'Дней на складе' = DATA LOCAL INTEGER (INTEGER);

balanceB 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceB 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceB 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceB 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceA 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceA 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceA 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceA 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);


countRows 'Количество строк' () = GROUP SUM 1 IF nameGroup1(INTEGER i);

isBalanceB 'Остаток на начало' = DATA LOCAL BOOLEAN ();
isIn 'Приход' = DATA LOCAL BOOLEAN ();
isOut 'Расход' = DATA LOCAL BOOLEAN ();
isBalanceA 'Остаток на конец' = DATA LOCAL BOOLEAN ();

isQuantity 'Количество' = DATA LOCAL BOOLEAN ();
isCost 'Себестоимость' = DATA LOCAL BOOLEAN ();
isCostVAT 'Себестоимость с НДС' = DATA LOCAL BOOLEAN ();
isMarkup 'Надбавка' = DATA LOCAL BOOLEAN ();
isSum 'Сумма' = DATA LOCAL BOOLEAN ();
isTurnover 'Оборачиваемость' = DATA LOCAL BOOLEAN ();
isDaysOnStock 'Дней на складе' = DATA LOCAL BOOLEAN ();

overIsOut 'Расход' = OVERRIDE isOut(), (isMarkup() OR isTurnover());
overIsCost 'Себестоимость' = OVERRIDE isCost(), (isMarkup() OR isTurnover());

//------- Группы складов -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (StockGroup);

levelParentInclude(StockGroup stockGroup) = GROUP MIN level(stockGroup, StockGroup parent) IF dataInclude(parent);    
nearestParentInclude(StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(stockGroup));
nearestInclude(StockGroup stockGroup) = dataInclude(nearestParentInclude(stockGroup));

include 'Вкл' (StockGroup stockGroup) = OVERRIDE dataInclude(stockGroup), nearestInclude (stockGroup);

deleteIncludeStockGroups 'Сбросить отмеченные'() = {
    dataInclude(StockGroup g) <- NULL;
};

nameIncludeStockGroups 'Группы складов (все)' ()= GROUP CONCAT TEXT(name(StockGroup stockGroup)) IF dataInclude(stockGroup), ', ' ORDER stockGroup CHARWIDTH 20;

//------- Склады -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Stock);

include 'Вкл' (Stock stock) = (OVERRIDE dataInclude(stock), include(stockGroup(stock))) IF isCompany(stock);

deleteIncludeStocks 'Сбросить отмеченные'() = {
    dataInclude (Stock st) <- NULL;
};

nameIncludeStocks 'Склады (все)' ()= GROUP CONCAT TEXT(name(Stock stock)) IF dataInclude(stock), ', ' ORDER stock CHARWIDTH 20;

nameIncludeStockGroupsStock 'Группы складов, склады (все)' () = CONCAT '; ', nameIncludeStockGroups(), nameIncludeStocks() CHARWIDTH 20;

FORM dialogStockGroupsStock 'Склады'
    TREE stockTree a = STRING[3], sg = StockGroup PARENT parent
    PROPERTIES READONLY VALUE(a), name(sg)
    PROPERTIES include(sg)
    ORDER name(sg)
    PROPERTIES deleteIncludeStockGroups() TODRAW sg TOOLBAR
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) include
    ORDER name(s)
    PROPERTIES deleteIncludeStocks() TODRAW s TOOLBAR
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' include(s) 'F9'
;
DESIGN dialogStockGroupsStock {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }
            MOVE BOX(s) {
                fill = 1.5;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeStockGroupsStock() = {
    DIALOG dialogStockGroupsStock;
}

//------- Поставщики -------
include 'Вкл' = DATA LOCAL BOOLEAN (LegalEntity);

deleteIncludeLegalEntities 'Сбросить отмеченные'() = {
    include(LegalEntity l) <- NULL;
};

nameIncludeLegalEntities 'Поставщики (все)' () = GROUP CONCAT TEXT((OVERRIDE name(LegalEntity le),'')) IF include(le), ', ' ORDER le CHARWIDTH 20;

FORM dialogLegalEntity 'Поставщики'
    OBJECTS le = LegalEntity
    PROPERTIES include(le)
    PROPERTIES(le) READONLY id, name, fullName
    ORDER name(le)
    FILTERS isSupplier(le)
    FILTERGROUP inLegalEntity FILTER 'Отмеченные' include(le)
    PROPERTIES deleteIncludeLegalEntities() TODRAW le TOOLBAR
;
DESIGN dialogLegalEntity {
    BOX { size = (1024, 768); }
}

changeIncludeLegalEntities() = {
    DIALOG dialogLegalEntity OBJECTS le INPUT DO {
        IF NOT (GROUP SUM 1 IF include(LegalEntity l)) THEN
            include(le) <- TRUE;
    }
}

//------- Брэнды -------
include 'Вкл' = DATA LOCAL BOOLEAN (Brand);

deleteIncludeBrands 'Сбросить отмеченные'() = {
    include(Brand b) <- NULL;
};

nameIncludeBrands 'Брэнд (все)' () = GROUP CONCAT TEXT((OVERRIDE name(Brand b),'')) IF include(b), ', ' ORDER b CHARWIDTH 20;

commaBrandId 'Список кодов' = DATA LOCAL VARISTRING[4000]() FIXEDCHARWIDTH 30;

addCommaBrandId 'Добавить' () = {
    IF commaBrandId() THEN {
        include(Brand b) <- TRUE WHERE (GROUP SUM 1 IF isWordInCSV(id(b), replace(commaBrandId(),' ',',')) == 1);
        commaBrandId() <- NULL;
    }
}

FORM dialogBrand 'Брэнды'
    OBJECTS b = Brand
    PROPERTIES PANEL commaBrandId(), addCommaBrandId()
    PROPERTIES include(b)
    PROPERTIES(b) READONLY id, name
    ORDER name(b)
    FILTERGROUP inBrand FILTER 'Отмеченные' include(b)
    PROPERTIES deleteIncludeBrands() TODRAW b TOOLBAR    
;
DESIGN dialogBrand {
    BOX { size = (1024, 768); }
}

changeIncludeBrands() = {
    DIALOG dialogBrand OBJECTS b INPUT DO {
        IF NOT (GROUP SUM 1 IF include(Brand br)) THEN
            include(b) <- TRUE;
    }
}

//------- Группы товаров -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (SkuGroup);

levelParentInclude(SkuGroup skuGroup) = GROUP MIN level(skuGroup, SkuGroup parent) IF dataInclude(parent);    
nearestParentInclude(SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(skuGroup));
nearestInclude(SkuGroup skuGroup) = dataInclude(nearestParentInclude (skuGroup));

include 'Вкл' (SkuGroup skuGroup) = OVERRIDE dataInclude(skuGroup), nearestInclude(skuGroup);

deleteIncludeSkuGroups 'Сбросить отмеченные'() = {
    dataInclude(SkuGroup g) <- NULL;
};

nameIncludeSkuGroups 'Группы товаров (все)' ()= GROUP CONCAT TEXT(name(SkuGroup skuGroup)) IF dataInclude(skuGroup), ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups1 'Направления (все)' = GROUP CONCAT TEXT('\''+ (OVERRIDE name(SkuGroup skuGroup),'') +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 2, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups2 'Группы (все)' = GROUP CONCAT TEXT('\''+ (OVERRIDE name(SkuGroup skuGroup),'') +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 3, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups3 'Подгруппы (все)' = GROUP CONCAT TEXT('\''+ (OVERRIDE name(SkuGroup skuGroup),'') +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 4, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups4 'Субгруппы (все)' = GROUP CONCAT TEXT('\''+ (OVERRIDE name(SkuGroup skuGroup),'') +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 5, ', ' ORDER skuGroup CHARWIDTH 20;

//------- Товары -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Sku);

includeSkuGroup (Sku sku) = TRUE IF (GROUP MAX 1 IF include(SkuGroup g) AND isParent(g, sku));

include 'Вкл' (Sku sku) = OVERRIDE dataInclude(sku), includeSkuGroup(sku);

deleteIncludeSkus 'Сбросить отмеченные'() = {
    dataInclude(Sku b) <- NULL;
};

nameIncludeSkus 'Товары (все)' = GROUP CONCAT replace(name(Sku sku), '\n', '') IF dataInclude(sku), ', ' ORDER sku CHARWIDTH 20;
nameIncludeBarcodes 'ШК (все)' = GROUP CONCAT TEXT(idBarcode(Sku sku)) IF dataInclude(sku), ',' ORDER sku CHARWIDTH 20;

commaBarcodeId 'Список ШК' = DATA LOCAL VARISTRING[4000]() FIXEDCHARWIDTH 30;

addCommaBarcodeId 'Добавить' () = {
    IF commaBarcodeId() THEN {
        dataInclude(Sku sku) <- TRUE WHERE [=GROUP BY sku(Barcode barcode) SUM 1 IF isWordInCSV(id(barcode), replace(commaBarcodeId(),' ',',')) == 1](sku);
        commaBarcodeId() <- NULL;
    }
}

FORM dialogSku 'Товары'
    TREE skuTree sk = SkuGroup PARENT parent
    PROPERTIES READONLY order(sk), name(sk)
    PROPERTIES include(sk)
    ORDER order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups() TODRAW sk TOOLBAR

    OBJECTS sku = Sku
    PROPERTIES PANEL commaBarcodeId(), addCommaBarcodeId()
    PROPERTIES include(sku)
    PROPERTIES(sku) READONLY idBarcode, name, shortNameUOM
    ORDER name(sku)
    FILTERS isParent(sk,sku)
    FILTERGROUP inSku FILTER 'Отмеченные' include(sku)
    PROPERTIES deleteIncludeSkus() TODRAW sku TOOLBAR
;
DESIGN dialogSku {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE skuTree) {
                caption = 'Склады';
            }
            MOVE BOX(sku) {
                fill = 1.5;
                GRID(sku) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeSkus() = {
    DIALOG dialogSku;
}
changeIncludeBarcodes() = {
    INPUT s = VARISTRING[4000] DO {
        dataInclude(Sku sku) <- TRUE IF [=GROUP BY sku(Barcode barcode) SUM 1 IF isWordInCSV(id(barcode), replace(s,' ',',')) == 1](sku);
    }
}

filter() = (OVERRIDE ' AND nameStock IN (' + (GROUP CONCAT TEXT('\''+ name(Stock s) +'\'') IF include(s),',') + ')','')
                    + (OVERRIDE ' AND nameSupplier IN (' + (GROUP CONCAT TEXT('\''+ name(LegalEntity le) +'\'') IF include(le),',') + ')','')
                    + (OVERRIDE ' AND brand IN (' + (GROUP CONCAT TEXT('\''+ (OVERRIDE replace(name(Brand b),'\'','\'\''),'') +'\'') IF include(b),',') + ')','')
                    + (OVERRIDE ' AND group1 IN (' + nameIncludeSkuGroups1() + ')','')
                    + (OVERRIDE ' AND group2 IN (' + nameIncludeSkuGroups2() + ')','')
                    + (OVERRIDE ' AND group3 IN (' + nameIncludeSkuGroups3() + ')','')
                    + (OVERRIDE ' AND group4 IN (' + nameIncludeSkuGroups4() + ')','')
                    + (OVERRIDE ' AND barcodeSku IN (' + (GROUP CONCAT TEXT('\''+ idBarcode(Sku sku) +'\'') IF dataInclude(sku),',') + ')','');
values() = (IF overIsOut() AND isQuantity() THEN 'SUM(quantitySold)' ELSE '\'\'') + ' AS quantitySold, '
                            + (IF overIsOut() AND overIsCost() THEN 'SUM(costSumSold)' ELSE '\'\'') + ' AS costSumSold, '
                            + (IF overIsOut() AND isCostVAT() THEN 'SUM(costSumVATSold)' ELSE '\'\'') + ' AS costSumVATSold, '
                            + (IF overIsOut() AND isMarkup() THEN 'SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold)' ELSE '\'\'') + ' AS markupSumSold, '
                            + (IF overIsOut() AND isMarkup() THEN '(SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold))*100/SUM(costSumSold)' ELSE '\'\'') + ' AS percMarkupSumSold, '
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumVATSold)' ELSE '\'\'') + ' AS sumVATSold, '
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumSold)' ELSE '\'\'') + ' AS sumSold, '
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumPriceSold)' ELSE '\'\'') + ' AS sumPriceSold, '
                            + (IF isIn() AND isQuantity() THEN 'SUM(quantityPurchase)' ELSE '\'\'') + ' AS quantityPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumPurchase)-SUM(sumVATPurchase)' ELSE '\'\'') + ' AS sumMinusVATPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumVATPurchase)' ELSE '\'\'') + ' AS sumVATPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumPurchase)' ELSE '\'\'') + ' AS sumPurchase, '
                            + (IF isIn() AND isSum() THEN 'SUM(sumPricePurchase)' ELSE '\'\'') + ' AS sumPricePurchase, '
                            + (IF isTurnover() THEN 'SUM(costBalance)/SUM(costSumSold)' ELSE '\'\'') + ' AS turnover, '
                            + (IF isTurnover() THEN 'SUM(costBalance)' ELSE '\'\'') + ' AS costBalance, '
                            + (IF isDaysOnStock() THEN 'COUNT(DISTINCT __time)' ELSE '\'\'') + ' AS daysOnStock, ';

fillTurnoverReport (DATE dateFrom, DATE dateTo) = {
    nameGroup1(INTEGER i) <- NULL;
    nameGroup2(INTEGER i) <- NULL;
    nameGroup3(INTEGER i) <- NULL;
    barcodeSku(INTEGER i) <- NULL;
    
    quantitySold(INTEGER i) <- NULL;
    costSumSold(INTEGER i) <- NULL;
    costSumVATSold(INTEGER i) <- NULL;
    markupSumSold(INTEGER i) <- NULL;
    percMarkupSumSold(INTEGER i) <- NULL;
    sumVATSold(INTEGER i) <- NULL;
    sumSold(INTEGER i) <- NULL;
    sumPriceSold(INTEGER i) <- NULL;
    
    quantityPurchase(INTEGER i) <- NULL;
    sumMinusVATPurchase(INTEGER i) <- NULL;
    sumVATPurchase(INTEGER i) <- NULL;
    sumPurchase(INTEGER i) <- NULL;
    sumPricePurchase(INTEGER i) <- NULL;
    
    costBalance(INTEGER i) <- NULL;
    turnover(INTEGER i) <- NULL;
    daysOnStock(INTEGER i) <- NULL;
    
    balanceB(INTEGER i) <- NULL;
    costBalanceB(INTEGER i) <- NULL;
    costVATBalanceB(INTEGER i) <- NULL;
    sumBalanceB(INTEGER i) <- NULL;
    
    balanceA(INTEGER i) <- NULL;
    costBalanceA(INTEGER i) <- NULL;
    costVATBalanceA(INTEGER i) <- NULL;
    sumBalanceA(INTEGER i) <- NULL;
    
    IF isTimeGroup() THEN {
        query(replace('SELECT ' + values() 
             + (IF isBalanceA() AND isQuantity() THEN 'SUM(balance)' + (IF gDay() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS balanceA, '
             + (IF isBalanceA() AND overIsCost() THEN 'SUM(costBalance)' + (IF gDay() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS costBalanceA, '
             + (IF isBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance)' + (IF gDay() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS costVATBalanceA, '
             + (IF isBalanceA() AND isSum() THEN 'SUM(sumBalance)' + (IF gDay() THEN '' ELSE '/COUNT(DISTINCT __time)') ELSE '\'\'') + ' AS sumBalanceA, '
             + nameGroups() + ' FROM turnover'
             + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
             + filter()
             + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3(), IF gSku() THEN 'barcodeSku' ELSE NULL)
             + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO nameGroup1 = nameGroup1, nameGroup2 = nameGroup2, nameGroup3 = nameGroup3, 
                                          quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                          markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                          sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                          quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                          sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                          turnover = turnover, costBalance = costBalance, balanceA = balanceA, costBalanceA = costBalanceA,
                                          costVATBalanceA = costVATBalanceA, sumBalanceA = sumBalanceA, daysOnStock = daysOnStock,
                                          barcodeSku = barcodeSku;
    } ELSE {
        query(replace('SELECT ' + values() 
             + nameGroups() + ' FROM turnover'
             + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
             + filter()
             + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3(), IF gSku() THEN 'barcodeSku' ELSE NULL)
             + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO nameGroup1 = nameGroup1, nameGroup2 = nameGroup2, nameGroup3 = nameGroup3, 
                                          quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                          markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                          sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                          quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                          sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                          turnover = turnover, costBalance = costBalance, daysOnStock = daysOnStock,
                                          barcodeSku = barcodeSku;
        
        LOCAL localNameGroup1 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup2 = VARSTRING[255] (INTEGER);
        LOCAL localNameGroup3 = VARSTRING[255] (INTEGER);
        LOCAL localBarcodeSku = VARSTRING[15] (INTEGER);
        LOCAL localBalanceB = NUMERIC[16,5] (INTEGER);
        LOCAL localCostBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localCostVATBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localSumBalanceB = NUMERIC[18,4] (INTEGER);
        LOCAL localBalanceA = NUMERIC[16,5] (INTEGER);
        LOCAL localCostBalanceA = NUMERIC[18,4] (INTEGER);
        LOCAL localCostVATBalanceA = NUMERIC[18,4] (INTEGER);
        LOCAL localSumBalanceA = NUMERIC[18,4] (INTEGER);
        
        query(replace('SELECT '
            + (IF isBalanceB() AND isQuantity() THEN 'SUM(balance)' ELSE '\'\'') + ' AS balanceB, '
            + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalance)' ELSE '\'\'') + ' AS costBalanceB, '
            + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalance)' ELSE '\'\'') + ' AS costVATBalanceB, '
            + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalance)' ELSE '\'\'') + ' AS sumBalanceB, '
            + nameGroups() + ' FROM turnover'
            + ' WHERE __time = TIME_PARSE(\'' + sum(dateFrom,-1) + '\',\'yyyy-MM-dd\')'
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3(), IF gSku() THEN 'barcodeSku' ELSE NULL)
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceB = balanceB, localCostBalanceB = costBalanceB, localCostVATBalanceB = costVATBalanceB,
                                          localSumBalanceB = sumBalanceB, localBarcodeSku = barcodeSku;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP BY nameGroup1(INTEGER n), nameGroup2(n), nameGroup3(n), barcodeSku(n) LAST n ORDER n](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i), localBarcodeSku(i)) DO {
            balanceB(number) <- localBalanceB(i);
            costBalanceB(number) <- localCostBalanceB(i);
            costVATBalanceB(number) <- localCostVATBalanceB(i);
            sumBalanceB(number) <- localSumBalanceB(i);
        }
        
        query(replace('SELECT '
            + (IF isBalanceA() AND isQuantity() THEN 'SUM(balance)' ELSE '\'\'') + ' AS balanceA, '
            + (IF isBalanceA() AND overIsCost() THEN 'SUM(costBalance)' ELSE '\'\'') + ' AS costBalanceA, '
            + (IF isBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance)' ELSE '\'\'') + ' AS costVATBalanceA, '
            + (IF isBalanceA() AND isSum() THEN 'SUM(sumBalance)' ELSE '\'\'') + ' AS sumBalanceA, '
            + nameGroups() + ' FROM turnover'
            + ' WHERE __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1(), nameGroup2(), nameGroup3(), IF gSku() THEN 'barcodeSku' ELSE NULL)
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
            
        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3,
                                          localBalanceA = balanceA, localCostBalanceA = costBalanceA, localCostVATBalanceA = costVATBalanceA,
                                          localSumBalanceA = sumBalanceA, localBarcodeSku = barcodeSku;
        
        FOR imported(INTEGER i) AND INTEGER number = [= GROUP BY nameGroup1(INTEGER n), nameGroup2(n), nameGroup3(n), barcodeSku(n) LAST n ORDER n](localNameGroup1(i), localNameGroup2(i), localNameGroup3(i), localBarcodeSku(i)) DO {
            balanceA(number) <- localBalanceA(i);
            costBalanceA(number) <- localCostBalanceA(i);
            costVATBalanceA(number) <- localCostVATBalanceA(i);
            sumBalanceA(number) <- localSumBalanceA(i);
        }
    }                                
}

FORM printTurnoverReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRows, maxRowCount, nameIncludeStockGroupsStock, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeSkuGroups, nameIncludeSkus, 
                 printSumGroup1, printSumGroup2
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1, nameGroup2, nameGroup3, barcodeSku SHOWIF gSku()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND isQuantity()),
                           costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
                           costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
                           sumBalanceB SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND isQuantity()),
                           costSumSold SHOWIF (overIsOut() AND overIsCost()),
                           costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
                           markupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           percMarkupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           sumVATSold SHOWIF (overIsOut() AND isSum()),
                           sumSold SHOWIF (overIsOut() AND isSum()),
                           sumPriceSold SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND isQuantity()),
                           sumMinusVATPurchase SHOWIF (isIn() AND isSum()),
                           sumVATPurchase SHOWIF (isIn() AND isSum()),
                           sumPurchase SHOWIF (isIn() AND isSum()),
                           sumPricePurchase SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
                           costBalance SHOWIF isTurnover(),
                           daysOnStock SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (isBalanceA() AND isQuantity()),
                           costBalanceA SHOWIF (isBalanceA() AND overIsCost()),
                           costVATBalanceA SHOWIF (isBalanceA() AND isCostVAT()),
                           sumBalanceA SHOWIF (isBalanceA() AND isSum())
    FILTERS nameGroup1(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1(i), nameGroup2(i), nameGroup3(i), barcodeSku(i)
;

printTurnoverReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printTurnoverReportTable 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRows, maxRowCount, nameIncludeStockGroupsStock, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeSkuGroups, nameIncludeSkus,
                 captionGroup1, captionGroup2, captionGroup3
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1, nameGroup2, nameGroup3, barcodeSku SHOWIF gSku()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND isQuantity()),
                           costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
                           costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
                           sumBalanceB SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND isQuantity()),
                           costSumSold SHOWIF (overIsOut() AND overIsCost()),
                           costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
                           markupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           percMarkupSumSold SHOWIF (overIsOut() AND isMarkup()),
                           sumVATSold SHOWIF (overIsOut() AND isSum()),
                           sumSold SHOWIF (overIsOut() AND isSum()),
                           sumPriceSold SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND isQuantity()),
                           sumMinusVATPurchase SHOWIF (isIn() AND isSum()),
                           sumVATPurchase SHOWIF (isIn() AND isSum()),
                           sumPurchase SHOWIF (isIn() AND isSum()),
                           sumPricePurchase SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
                           costBalance SHOWIF isTurnover(),
                           daysOnStock SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (isBalanceA() AND isQuantity()),
                           costBalanceA SHOWIF (isBalanceA() AND overIsCost()),
                           costVATBalanceA SHOWIF (isBalanceA() AND isCostVAT()),
                           sumBalanceA SHOWIF (isBalanceA() AND isSum())
    FILTERS nameGroup1(i) AND dt IS DATE AND df IS DATE,
            balanceB(i) OR quantitySold(i) OR balanceA(i)
            
    ORDER nameGroup1(i), nameGroup2(i), nameGroup3(i), barcodeSku(i)
;

printTurnoverReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

showGroup1 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 2;
showGroup2 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 3;
showGroup3 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 4;
showGroup4 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 5;

FORM turnoverReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
    
    PROPERTIES() isBalanceB, isIn, overIsOut, isBalanceA,
                 isQuantity, overIsCost, isCostVAT, isMarkup, isSum, isTurnover, isDaysOnStock
    
    PROPERTIES nameIncludeStockGroups() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeStocks() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeLegalEntities() ON CHANGE changeIncludeLegalEntities()
    PROPERTIES nameIncludeBrands() ON CHANGE changeIncludeBrands()
    PROPERTIES nameIncludeSkuGroups() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeSkus() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeBarcodes() ON CHANGE changeIncludeBarcodes()
    
//-- выбор группировки    
    PROPERTIES() gStock, gSupplier, gGroup1 SHOWIF showGroup1(), gGroup2 SHOWIF showGroup2(), gGroup3 SHOWIF showGroup3(),
                 gGroup4 SHOWIF showGroup4(), gSku, gBrand, gMonth, gWeek, gDay, gSupplierStock
    
    OBJECTS gr = INTEGER 
    PROPERTIES(gr) READONLY order, nameGroup
    ORDER order(gr)
    FILTERS nameGroup(gr)
    
    PROPERTIES(df,dt) printTurnoverReportXLSX, printTurnoverReportTableXLSX
    
    EVENTS 
        ON INIT {
            SEEK turnoverReport.df = sum(currentDate(), -1);
            SEEK turnoverReport.dt = sum(currentDate(), -1);
        }
;

DESIGN turnoverReport {
    NEW topContainer {
        type = CONTAINERV;
        alignment = STRETCH;
        NEW dates {
            type = CONTAINERH;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        NEW filters {
            type = CONTAINERV;
            alignment = STRETCH;
            caption = 'Фильтры';
            MOVE PROPERTY(nameIncludeStockGroups());
            MOVE PROPERTY(nameIncludeStocks());
            MOVE PROPERTY(nameIncludeLegalEntities());
            MOVE PROPERTY(nameIncludeBrands());
            MOVE PROPERTY(nameIncludeSkuGroups());
            MOVE PROPERTY(nameIncludeSkus());
            MOVE PROPERTY(nameIncludeBarcodes());
        }
    }
    NEW bottomContainer {
        fill = 2;
        type = CONTAINERH;
        NEW rhContainer {
            fill = 1;
            type = CONTAINERH;
            caption = 'Группировка';
            NEW checkBoxContainer{
                type = CONTAINERV;
                MOVE PROPERTY(gStock());
                MOVE PROPERTY(gSupplier());
                MOVE PROPERTY(gSupplierStock());
                MOVE PROPERTY(gGroup1());
                MOVE PROPERTY(gGroup2());
                MOVE PROPERTY(gGroup3());
                MOVE PROPERTY(gGroup4());
                MOVE PROPERTY(gSku());
                MOVE PROPERTY(gBrand());
                MOVE PROPERTY(gMonth());
                MOVE PROPERTY(gWeek());
                MOVE PROPERTY(gDay());
            }
            MOVE BOX(gr) { caption = 'Порядок группировки'; };
        }
        NEW lhContainer {
            type = CONTAINERH;
            caption = 'Данные';
            NEW col1 {
                type = CONTAINERV;
                MOVE PROPERTY(isBalanceB());
                MOVE PROPERTY(isIn());
                MOVE PROPERTY(overIsOut());
                MOVE PROPERTY(isBalanceA());
            }
            NEW col2 {
                type = CONTAINERV;
                MOVE PROPERTY(isQuantity());
                MOVE PROPERTY(overIsCost());
                MOVE PROPERTY(isCostVAT());
                MOVE PROPERTY(isMarkup());
                MOVE PROPERTY(isSum());
                MOVE PROPERTY(isTurnover());
                MOVE PROPERTY(isDaysOnStock());
            }
        }
    }
    NEW print {
        type = COLUMNS;
        columns = 2;
        alignment = STRETCH;
        MOVE PROPERTY (printTurnoverReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printTurnoverReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    BI {
       NEW turnoverReport;
    }
}