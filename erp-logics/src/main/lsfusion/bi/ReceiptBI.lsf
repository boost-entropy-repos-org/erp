MODULE ReceiptBI;

REQUIRE BI, ZReport, GiftCard, Druid, ReportBI;

NAMESPACE BI;

exportReceipt 'Выгрузить Чеки' (DATE dFrom, DATE dTo) = {
    FOR iterate(DATE date, dFrom, dTo) DO {
        EXPORT CSV ',' FROM dateTime = [=FORMULA VARSTRING[20] 'to_char(($1),\'MM/DD/YY HH24:MI:SS\')'](dateTime(Receipt r)),
                            nameDepartmentStore = nameDepartmentStore(r), idDepartmentStore = idDepartmentStore(r),
                            number = number(r), overNumberCashRegister = overNumberCashRegister(r), nameEmployee = nameEmployee(r),
                            idEmployee = idEmployee(r), sumReceiptDetail = sumReceiptDetail(r), discountSum = discountSum(r),
                            sumVATReceiptDetail = sumVATReceiptDetail(r), countReceiptDetail = countReceiptDetail(r),
                            quantityReceiptDetail = quantityReceiptDetail(r), sumCashPayment = sumCashPayment(r),
                            sumCardPayment = sumCardPayment(r), sumGiftCardPayment = sumGiftCardPayment(r),
                            sumReceiptDetailGiftCard = sumReceiptDetailGiftCard(r)
            WHERE date(r) == date AND isPosted(r);
        ingestBatch('receipt', date);
    }
    runKillTask('receipt', dFrom, dTo);
    FOR iterate(DATE date, dFrom, dTo) DO {
        EXPORT CSV ',' FROM dateTime = [=FORMULA VARSTRING[20] 'to_char(($1),\'MM/DD/YY HH24:MI:SS\')'](dateTime(ReceiptDetail d)),
                            nameDepartmentStore = nameDepartmentStore(d), idDepartmentStore = id(departmentStore(d)),
                            overNumberCashRegister = overNumberCashRegister(receipt(d)), nameEmployee = nameEmployee(d),
                            idEmployee = idEmployee(receipt(d)), nameSku = nameSku(d), barcodeSku = idBarcode(d), idSku = idSku(d),
                            quantity = signedQuantity(d), price = price(d), sum = signedSum(d), discountSum = signedDiscountSum(d),
                            sumVAT = signedSumVAT(d)
            WHERE date(d) == date AND isPosted(d);
        ingestBatch('receiptdetail', date);
    }
    runKillTask('receiptdetail', dFrom, dTo);
} CONFIRM;

EXTEND FORM integrationData
    PROPERTIES exportReceipt(druidFrom, druidTo)
;

@defineReport(receipt, 'Продажа (по чекам)');

@createGroup(receipt, stock, 'По магазину', 1, 'nameDepartmentStore', 'Магазин');
@createGroup(receipt, cashRegister, 'По кассе', 2, 'overNumberCashRegister', 'Касса');
@createGroup(receipt, employee, 'По кассиру', 3, 'nameEmployee', 'Кассир');
@createGroup(receipt, month, 'По месяцам', 4, 'TIME_FORMAT(__time,\'yyyy-MM\')', 'Месяц');
@createGroup(receipt, week, 'По неделям', 5, 'TIME_FORMAT(__time,\'yyyy неделя ww\')', 'Неделя');
@createGroup(receipt, day, 'По дням', 6, 'TIME_FORMAT(__time,\'yyyy-MM-dd\')', 'День');

nameGroupsReceipt = CONCAT ', ', (OVERRIDE nameGroup1Receipt(), '\'\'') + ' AS nameGroup1',
                                           (OVERRIDE nameGroup2Receipt(), '\'\'') + ' AS nameGroup2',
                                           (OVERRIDE nameGroup3Receipt(), '\'\'') + ' AS nameGroup3';

nameGroup1Receipt = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup2Receipt = DATA LOCAL VARSTRING[255] (INTEGER);
nameGroup3Receipt = DATA LOCAL VARSTRING[255] (INTEGER);

sumReceiptDetail 'Сумма' = DATA LOCAL NUMERIC[18,4] (INTEGER);
discountSum 'Сумма скидки' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATReceiptDetail 'Сумма НДС' = DATA LOCAL NUMERIC[18,4] (INTEGER);
countReceiptDetail 'Кол-во строк' = DATA LOCAL INTEGER (INTEGER);
quantityReceiptDetail 'Кол-во' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumCashPayment 'Сумма продаж (наличные)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumCardPayment 'Сумма продаж (карточка)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumGiftCardPayment 'Сумма продаж (сертификат)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumReceiptDetailGiftCard 'Сумма проданных сертификатов' = DATA LOCAL NUMERIC[18,4] (INTEGER);

countRowsReceipt 'Количество строк' () = GROUP SUM 1 IF nameGroup1Receipt(INTEGER i);

//------- Магазины -------
include 'Вкл' = DATA LOCAL BOOLEAN (DepartmentStore);

deleteIncludeDepartmentStores 'Сбросить отмеченные'() = {
    include (DepartmentStore ds) <- NULL;
};

nameIncludeDepartmentStores 'Отделы магазина (все)' ()= GROUP CONCAT TEXT(name(DepartmentStore ds)) IF include(ds), ', ' ORDER ds CHARWIDTH 20;

FORM dialogDepartmentStores 'Магазины'
    OBJECTS s = DepartmentStore
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) include
    ORDER name(s)
    PROPERTIES deleteIncludeDepartmentStores() TODRAW s TOOLBAR

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' include(s) 'F9'
;
DESIGN dialogDepartmentStores {
    BOX {
        size = (1024, 768);
        MOVE BOX(s) {
            fill = 1;
            GRID(s) {
                defaultComponent = TRUE;
            }
            PROPERTY(name(s)){
                charWidth = 35;
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeDepartmentStores() = {
    DIALOG dialogDepartmentStores;
}

fillReceiptReport (DATE dateFrom, DATE dateTo) = {
    nameGroup1Receipt(INTEGER i) <- NULL;
    nameGroup2Receipt(INTEGER i) <- NULL;
    nameGroup3Receipt(INTEGER i) <- NULL;
    sumReceiptDetail(INTEGER i) <- NULL;
    discountSum(INTEGER i) <- NULL;
    sumVATReceiptDetail(INTEGER i) <- NULL;
    countReceiptDetail(INTEGER i) <- NULL;
    quantityReceiptDetail(INTEGER i) <- NULL;
    sumCashPayment(INTEGER i) <- NULL;
    sumCardPayment(INTEGER i) <- NULL;
    sumGiftCardPayment(INTEGER i) <- NULL;
    sumReceiptDetailGiftCard(INTEGER i) <- NULL;
    
    query(replace('SELECT ' 
        + 'SUM(sumReceiptDetail) AS sumReceiptDetail, SUM(discountSum) AS discountSum, SUM(sumVATReceiptDetail) AS sumVATReceiptDetail, '
        + 'SUM(countReceiptDetail) AS countReceiptDetail, SUM(quantityReceiptDetail) AS quantityReceiptDetail, SUM(sumCashPayment) AS sumCashPayment, '
        + 'SUM(sumCardPayment) AS sumCardPayment, SUM(sumGiftCardPayment) AS sumGiftCardPayment, SUM(sumReceiptDetailGiftCard) AS sumReceiptDetailGiftCard, '
        + nameGroupsReceipt() + ' FROM receipt'
        + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + ' 00:00:00' + '\',\'yyyy-MM-dd HH:mm:ss\') AND TIME_PARSE(\'' + dateTo + ' 23:59:59' + '\',\'yyyy-MM-dd HH:mm:ss\')'
        + (OVERRIDE ' AND nameDepartmentStore IN (' + (GROUP CONCAT TEXT('\''+ name(DepartmentStore s) +'\'') IF include(s),',') + ')','')
        + ' GROUP BY ' + (CONCAT ', ', nameGroup1Receipt(), nameGroup2Receipt(), nameGroup3Receipt())
        + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
        
        IMPORT JSON FROM queryResult() TO nameGroup1Receipt = nameGroup1, nameGroup2Receipt = nameGroup2, nameGroup3Receipt = nameGroup3, 
                                          sumReceiptDetail = sumReceiptDetail, discountSum = discountSum, sumVATReceiptDetail = sumVATReceiptDetail,
                                          countReceiptDetail = countReceiptDetail, quantityReceiptDetail = quantityReceiptDetail, sumCashPayment = sumCashPayment,
                                          sumCardPayment = sumCardPayment, sumGiftCardPayment = sumGiftCardPayment, sumReceiptDetailGiftCard = sumReceiptDetailGiftCard;
}

FORM printReceiptReport 'Продажа (по чекам)'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsReceipt, maxRowCount, nameIncludeDepartmentStores
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Receipt, nameGroup2Receipt, nameGroup3Receipt
    PROPERTIES(i) READONLY sumReceiptDetail, discountSum, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                           sumCashPayment, sumCardPayment, sumGiftCardPayment, sumReceiptDetailGiftCard
    FILTERS nameGroup1Receipt(i) AND dt IS DATE AND df IS DATE,
            sumReceiptDetail(i)
            
    ORDER nameGroup1Receipt(i), nameGroup2Receipt(i), nameGroup3Receipt(i)
;

printReceiptReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReceiptReport(dateFrom, dateTo);
    PRINT printReceiptReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printReceiptReportTable 'Продажа (по чекам)'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsReceipt, maxRowCount, captionGroup1Receipt, captionGroup2Receipt, captionGroup3Receipt,
                 nameIncludeDepartmentStores
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Receipt, nameGroup2Receipt, nameGroup3Receipt
    PROPERTIES(i) READONLY sumReceiptDetail, discountSum, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                           sumCashPayment, sumCardPayment, sumGiftCardPayment, sumReceiptDetailGiftCard
    FILTERS nameGroup1Receipt(i) AND dt IS DATE AND df IS DATE,
            sumReceiptDetail(i)
            
    ORDER nameGroup1Receipt(i), nameGroup2Receipt(i), nameGroup3Receipt(i)
;

printReceiptReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo) = {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReceiptReport(dateFrom, dateTo);
    PRINT printReceiptReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

EXTEND FORM receiptReport
    PROPERTIES nameIncludeDepartmentStores() ON CHANGE changeIncludeDepartmentStores()
          
    PROPERTIES(df,dt) printReceiptReportXLSX, printReceiptReportTableXLSX
;

DESIGN receiptReport {
    filters {
        MOVE PROPERTY(nameIncludeDepartmentStores());
    }
    print {
        MOVE PROPERTY (printReceiptReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printReceiptReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
}