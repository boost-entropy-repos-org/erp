MODULE Druid;

REQUIRE Utils, Time, Authentication;

host 'Хост для подключения' = DATA VARSTRING[100] ();
maxRowCount 'Максимальное количество записей' = DATA INTEGER ();
// ----------------- Загрузка данных ------------------- //

exportDirectory 'Путь для экспорта файлов' = DATA VARSTRING[500] ();
// file:///mnt/backup/csv/
// ftp://ftpuser:f7y45cnb@195.201.124.251:21/csv/

importDirectory 'Путь для импорта файлов' = DATA VARSTRING[500] ();
// /mnt/backup/csv/


EXTEND FORM integrationData
    PROPERTIES host(), maxRowCount(), exportDirectory(), importDirectory()
    
    OBJECTS dates = (druidFrom = DATE, druidTo = DATE) PANEL
    PROPERTIES druidFrom 'С' = VALUE(druidFrom), druidTo 'По' = VALUE(druidTo)
;

DESIGN integrationData {
    pane {
        NEW druid {
            caption = 'Druid';
            MOVE PROPERTY(host());
            MOVE PROPERTY(maxRowCount());
            MOVE PROPERTY(exportDirectory());
            MOVE PROPERTY(importDirectory());
            
            MOVE BOX(dates);
        }
    }
} 

runImportTask(VARSTRING[100] id, DATE date)  { 
    LOCAL template = FILE();
    READ 'file://bi/' + id + '.json' TO template;
    fileToString(template(), 'UTF-8');
    
    stringToFile(replace(replace(resultString(), '<DIRECTORY>', importDirectory()),
                                                       '<FILE>', id + date + '.csv')
                                                       , 'UTF-8', 'json');
    
    LOCAL result = FILE();
    EXTERNAL HTTP 'http://' + host() + ':8090/druid/indexer/v1/task' PARAMS resultFile() TO result;
}

ingestBatch (VARSTRING[100] id, DATE date)  { 
    printToLog('' + currentDateTime() + ' Started WRITE ');
    WRITE exportDirectory() + id + date FROM exportFile();
    printToLog('' + currentDateTime() + 'Ended WRITE ');
    
    runImportTask(id, date);
}

loadLookups 'Загрузить справочники'  ABSTRACT LIST ( );
loadLookups () + { 
    stringToFile('\{\}', 'UTF-8', 'json');
    LOCAL result = FILE();
    TRY { EXTERNAL HTTP 'http://' + host() + ':8081/druid/coordinator/v1/lookups/config' PARAMS resultFile() TO result; }
}

escapeJSONValue (TEXT t) = replace(replace(replace(replace(t, '\\', '\\\\'), '"', '\\"'), '\n', ''), '\r', '');

loadLookup (VARSTRING[100] id, TEXT json)  { 
    IF json != '' THEN {
        printToLog('' + currentDateTime() + ' Started Load lookup ' + id);    
        stringToFile('\{ "version": "' + lpad(TEXT([= FORMULA LONG 'SELECT EXTRACT (epoch FROM ($1))'](currentDateTime())), 12, '0') + '", "lookupExtractorFactory": \{ "type": "map", "injective" : true, "map": \{' + json + ' \} \} \}', 'UTF-8', 'json');
        LOCAL result = FILE();
//        WRITE 'file://d:/temp/test.json' FROM resultCustomFile(); 
        EXTERNAL HTTP 'http://' + host() + ':8081/druid/coordinator/v1/lookups/config/__default/' + id PARAMS resultFile() TO result; 
        printToLog('' + currentDateTime() + 'Ended Load lookup ' + id);
    }
}

EXTEND FORM integrationData
    PROPERTIES() loadLookups
;

DESIGN integrationData {
    druid {
        MOVE PROPERTY(loadLookups());
    }
}

runKillTask(VARSTRING[100] id, DATE dFrom, DATE dTo)  { 
    stringToFile('\{ "type":"kill", "dataSource" : "' + id + '", "interval" : "' + dFrom + '/' + sum(dTo, 1) + '" \}' 
                                                       , 'UTF-8', 'json');
    
    LOCAL result = FILE();
    EXTERNAL HTTP 'http://' + host() + ':8090/druid/indexer/v1/task' PARAMS resultFile() TO result;
}

// ----------------- Запросы ------------------- //

queryResult = DATA LOCAL FILE();

// example : 'SELECT columns FROM dataset GROUP BY group';

CLASS QueryLog 'Query Log';
TABLE queryLog (QueryLog);

customUser = DATA CustomUser (QueryLog);
nameCustomUser 'Пользователь' (QueryLog l) = name(customUser(l));
dateTimeStart 'Время начала' = DATA DATETIME(QueryLog);
dateTimeEnd 'Время окончания' = DATA DATETIME(QueryLog);

text 'Текст' = DATA TEXT (QueryLog);

EXTEND FORM integrationData
    OBJECTS ql = QueryLog
    PROPERTIES(ql) READONLY nameCustomUser, dateTimeStart, dateTimeEnd, text PANEL
;
DESIGN integrationData {
    druid {
        MOVE BOX(ql) {
            MOVE PROPERTY(text(ql));
        }
    }
}

query(TEXT q)  { 
    LOCAL startTime = DATETIME();
    startTime() <- currentDateTime();

	NEWSESSION NESTED (startTime) {
	    NEW l = QueryLog {
	        customUser(l) <- currentUser();
	        dateTimeStart(l) <- startTime();
	        dateTimeEnd(l) <- currentDateTime();
	        text(l) <- q;
	    }
        APPLY;
	}
    
	stringToFile('\{"query": "' + q + '"\}','UTF-8','json');
	EXTERNAL HTTP 'http://' + host() + ':8082/druid/v2/sql' PARAMS resultFile() TO queryResult;
	
}
// example : IMPORT JSON TO columns = columns FROM result();

// ----------------- Обращение к метаданным ------------------- //

dataSource 'Данные' = DATA LOCAL VARSTRING[100] (INTEGER);

readDataSource()  { 
    LOCAL result = FILE();
    EXTERNAL HTTP 'http://' + host() + ':8082/druid/v2/datasources' TO result;
        
    fileToString(result(), 'UTF-8');
    
    resultString() <- replace(resultString(), '[', '');
    resultString() <- replace(resultString(), ']', '');
    resultString() <- replace(resultString(), '"', '');
    
    dataSource(INTEGER i) <- getWord(resultString(), ',', i) IF iterate(i, 1, INTEGER(wordCount(resultString(), ',')));
}

dimension 'Измерения' = DATA LOCAL VARSTRING[100] (INTEGER);
measure 'Метрики' = DATA LOCAL VARSTRING[100] (INTEGER);

readDimensionsAndMeasures (VARSTRING[100] ds)  { 
    LOCAL result = FILE();
    EXTERNAL HTTP 'http://' + host() + ':8082/druid/v2/datasources/' + ds  TO result;
    
    LOCAL dimensions = TEXT();
    LOCAL measures = TEXT();
    
    IMPORT JSON LIST FROM result() TO dimensions, measures;    
    
    dimensions() <- replace(dimensions(), '[', '');
    dimensions() <- replace(dimensions(), ']', '');
    dimensions() <- replace(dimensions(), '"', '');

    dimension(INTEGER i) <- getWord(dimensions(), ',', i) IF iterate(i, 1, INTEGER(wordCount(dimensions(), ',')));
    
    measures() <- replace(measures(), '[', '');
    measures() <- replace(measures(), ']', '');
    measures() <- replace(measures(), '"', '');

    measure(INTEGER i) <- getWord(measures(), ',', i) IF iterate(i, 1, INTEGER(wordCount(measures(), ',')));
}

selD 'Вкл' = DATA LOCAL BOOLEAN (INTEGER);
selM 'Вкл' = DATA LOCAL BOOLEAN (INTEGER);

runQuery 'Выполнить' (VARSTRING[100] ds)  { 

    LOCAL dimensions = TEXT();
    dimensions () <- (GROUP CONCAT dimension(INTEGER i) IF selD(i), ',');
    
    LOCAL measures = TEXT();
    measures () <- (GROUP CONCAT measure(INTEGER i) IF selM(i), ',');

    LOCAL sumMeasures = TEXT();
    sumMeasures () <- (GROUP CONCAT ('sum(' + measure(INTEGER i) + ') AS ' + measure(i)) IF selM(i), ',');
    
	LOCAL query = TEXT();
	query() <- 'SELECT ' + dimensions() + ',' + sumMeasures() + ' FROM ' + ds + ' GROUP BY ' + dimensions();
	
	stringToFile('\{"query": "' + query() + '"\}','UTF-8','json');

	LOCAL result = FILE();
	EXTERNAL HTTP 'http://' + host() + ':8082/druid/v2/sql' PARAMS resultFile() TO result;

    open(result());
//	IMPORT JSON TO columns = columns FROM result();

}

FORM druidConnector
    OBJECTS s 'Данные' = INTEGER
    PROPERTIES(s) READONLY dataSource
    FILTERS dataSource(s)
    
    OBJECTS d 'Измерения' = INTEGER
    PROPERTIES(d) selD
    PROPERTIES(d) READONLY dimension
    FILTERS dimension(d)

    OBJECTS m 'Метрики' = INTEGER
    PROPERTIES(m) selM
    PROPERTIES(m) READONLY measure
    FILTERS measure(m)
    
    EVENTS ON INIT readDataSource(),
           ON CHANGE s {
                readDimensionsAndMeasures(dataSource(s));
           }
;