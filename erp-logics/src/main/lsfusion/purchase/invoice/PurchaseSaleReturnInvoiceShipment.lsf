MODULE PurchaseSaleReturnInvoiceShipment;

REQUIRE SaleReturnShipment, PurchaseSaleReturnInvoice, PurchaseSaleReturnShipment, PurchaseReturnShipment;

PRIORITY PurchaseReturn;

//----------------------------------------------------------------------------//

GROUP shipment 'Информация о поставке' : base;

// Галочка по созданию акта расценки на закупке
@defineDocumentInterfaceProperty (invoice, createSaleReturnShipment, 'Создать поставку (продажа-возврат)');

// -- Операция
createSaleReturnShipment 'Поставка (продажа-возврат)' = DATA BOOLEAN (Purchase.Operation);

EXTEND FORM Purchase.operation
    PROPERTIES(o) createSaleReturnShipment
;
DESIGN Purchase.operation {
    saleReturnContainer {
        MOVE PROPERTY(createSaleReturnShipment(o));
    }
}
@deriveDocumentOperationProperty(UserInvoice, createSaleReturnShipment);

backgroundSaleReturnShipment 'Цвет' (Invoice invoice) = RGB(238, 250, 200) IF invoice IS Invoice;
//--
createShipment(SaleReturnInvoice invoice) += createSaleReturnShipment(invoice(invoice));

@defineDocumentInterfaceDetailPricePrefix(invoice, saleReturnShipment, ' учетная (продажа-возврат)');
@defineDocumentInterfaceDetailQuantityPrefix (invoice, saleReturnShipment, ' поставлено (продажа-возврат)');
saleReturnShipmentQuantity(UserInvoiceDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

@defineDocumentInterfaceDetailExpiryDatePrefix(invoice, saleReturn);
saleReturnExpiryDate(UserInvoiceDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));
expiryDate(SaleReturnInvoiceDetail detail) += saleReturnExpiryDate[UserInvoiceDetail](invoiceDetail(detail));

@defineDocumentInterfaceDetailManufactureDatePrefix(invoice, saleReturn);
saleReturnManufactureDate(UserInvoiceDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));
manufactureDate(SaleReturnInvoiceDetail detail) += saleReturnManufactureDate[UserInvoiceDetail](invoiceDetail(detail));

@defineDocumentInterfaceHeaderTimePrefix(Invoice, saleReturnShipment, ' поставки (продажа-возврат)');

saleReturnShipmentDate(UserInvoice i) <- date(i) WHEN CHANGED(date(i));
saleReturnShipmentTime(UserInvoice i) <- time(i) WHEN CHANGED(time(i));

@defineDocumentInterfaceDetailDataSumPrefix (invoice, saleReturnShipment, ' учетная (продажа-возврат)');
@deriveDocumentDetailSumPrefix(userInvoice, saleReturnShipment, currency, saleReturnShipmentQuantity);

@defineDocumentInterfaceHeaderCreateShipment (invoice);
@defineDocumentInterfaceHeaderSumPrefix (invoice, saleReturnShipment, ' учетная (продажа-возврат)');

shipmentDate(SaleReturnInvoice invoice) += saleReturnShipmentDate(invoice(invoice));
shipmentTime(SaleReturnInvoice invoice) += saleReturnShipmentTime(invoice(invoice));

shipmentQuantity(SaleReturnInvoiceDetail detail) += saleReturnShipmentQuantity(invoiceDetail(detail));
shipmentPrice(SaleReturnInvoiceDetail detail) += saleReturnShipmentPrice(invoiceDetail(detail));
shipmentSum (SaleReturnInvoiceDetail detail) += saleReturnShipmentSum(invoiceDetail(detail));

showSaleReturnShipment(UserInvoice i) = createSaleReturnShipment(i) OR createSaleReturnInvoice(i); 
showSaleReturnShipment(UserInvoiceDetail d) = showSaleReturnShipment(userInvoice(d)); 

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundSaleReturnShipment(i) SHOWIF createSaleReturnInvoice(i) createSaleReturnShipment
    PROPERTIES(i) BACKGROUND backgroundSaleReturnShipment(i) SHOWIF createSaleReturnShipment(i) saleReturnShipmentSumUserInvoiceDetail,
                  saleReturnShipmentDate, saleReturnShipmentTime
    PROPERTIES(d) BEFORE deleteid SHOWIF createSaleReturnShipment[Invoice](i) BACKGROUND backgroundSaleReturnShipment(i)
                  saleReturnExpiryDate, saleReturnShipmentSum
    PROPERTIES(d) BEFORE saleReturnShipmentSum(d) SHOWIF showSaleReturnShipment(i) BACKGROUND backgroundSaleReturnShipment(i)
                  saleReturnShipmentPrice  
    PROPERTIES(d) saleReturnShipmentQuantity AFTER quantity(d) SHOWIF createSaleReturnShipment[Invoice](i) BACKGROUND backgroundSaleReturnShipment(i)
;
DESIGN userInvoice {
    headerCreateDocuments{
        NEW headerCreateSaleReturnShipment {
            caption = 'Поставка (продажа-возврат)';
            type = CONTAINERH;
            NEW CreateSaleReturnShipment1{
                MOVE PROPERTY(createSaleReturnShipment(i));
            }
            NEW CreateSaleReturnShipment2{
                MOVE PROPERTY(saleReturnShipmentDate(i));
                MOVE PROPERTY(saleReturnShipmentTime(i));
            }
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundSaleReturnShipment(i) saleReturnShipmentSumInvoiceDetail BEFORE orders(i)
    PROPERTIES(d) READONLY SHOWIF createSaleReturnShipment(i) BACKGROUND backgroundSaleReturnShipment(i)
                  saleReturnExpiryDate, saleReturnShipmentPrice, saleReturnShipmentSum
    PROPERTIES(d) READONLY saleReturnShipmentQuantity AFTER quantity(d) SHOWIF createSaleReturnShipment(i) BACKGROUND backgroundSaleReturnShipment(i)
;

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

@deriveDocumentDetailPriceAccountBatch (userInvoice, saleReturnShipment, sku, supplierStock);

receiveShipment (SaleReturnInvoice invoice)+= {
    IF invoice IS SaleReturnInvoice THEN {
        createSaleReturnShipment(Invoice i) <- TRUE WHERE i == invoice(invoice);
        saleReturnShipmentDate(Invoice i) <- currentDate() WHERE i == invoice(invoice);
        saleReturnShipmentTime(Invoice i) <- currentTime() WHERE i == invoice(invoice);
    } 
};

deleteCreate (SaleReturn.InvoiceShipment shipment)+= WHEN invoice(shipment) IS SaleReturnInvoice THEN  {
    createSaleReturnShipment(Invoice invoice) <- NULL WHERE invoice == invoice(invoice(shipment));          
};

//-- возврат поставщику
quantitySaleReturnShipmentDetail 'Поставлено' (purchaseReturnInvoiceDetail) = GROUP BY PurchaseSaleReturnInvoice.invoiceDetail(invoiceDetail(SaleReturn.ShipmentDetail d)) SUM quantity(d);

quantitySaleReturn 'Поставлено' (ShipmentDetail d) = quantitySaleReturnShipmentDetail(invoiceDetail(d));
quantitySaleReturnShipmentDetail 'Поставлено' (d) = GROUP BY shipmentDetail(SaleReturn.ShipmentDetail sd) SUM quantity(sd);

quantityShippedPurchaseReturn 'Поставлено (кол-во)' (s) = GROUP BY shipment(ShipmentDetail d) SUM (quantitySaleReturnShipmentDetail(d) (+) quantitySaleReturn(d));

isTransitPurchaseReturn 'В пути' (Shipment s) = isCompany(supplier(s)) AND isCompany(customer(s)) AND supplier(s) == customer(s) AND NOT quantityShippedPurchaseReturn(s);

