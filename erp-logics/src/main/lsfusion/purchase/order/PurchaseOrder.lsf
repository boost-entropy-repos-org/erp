MODULE PurchaseOrder;

REQUIRE Order, PurchaseOperation, PurchasePack, PriceListLedger;

NAMESPACE Purchase;

@defineOrder(' (закупка)', customer, customer, supplier, company, company, , Purchase, p);

    isUserOpened(UserOrder o)=  isOpened[Order](o) AND is(o);

    overCopy = ABSTRACT LIST (UserOrderDetail, OrderDetail);
    overCopy = ABSTRACT LIST (Order, UserOrder);
    copy 'Копировать'(Order order) = {
	NEWSESSION {
	        NEW o = UserOrder {
	            supplier(o) <- supplier(order);
	            supplierStock(o) <- supplierStock(order) IF active(supplierStock(order));
	            customer(o) <- customer(order);
	            customerStock(o) <- customerStock(order) IF active(customerStock(order));
	            currency(o) <- currency(order);
	            agreement(o) <- agreement(order);
	            priceListType(o) <- priceListType(order);
	            note(o) <- note(order);
	
	            overCopy(order, o);
	
	            FOR order(OrderDetail orderDetail) == order DO {
	                NEW d=UserOrderDetail {
	                    userOrder(d) <- o;
	                    sku(d) <- sku(orderDetail);
	                    quantity(d) <- quantity(orderDetail);
	                    
	                    overCopy(d, orderDetail);
	                }
	            }
	
	            SHOW userOrder OBJECTS o = o DOCKED;
	        }
	    }
} TOOLBAR;
    
//-- Копирование строк     
    overCopy = ABSTRACT LIST (UserOrderDetail, UserOrderDetail);

    copy 'Копировать'(UserOrderDetail detail) = {
        NEW d = UserOrderDetail {          

            userOrder(d) <- userOrder(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            priceListType(d) <- priceListType(detail);      
            shipmentDataDate(d) <- shipmentDataDate(detail);         
            shipmentDataTime(d) <- shipmentDataTime(detail);        
            closeDataDate(d) <- closeDataDate(detail);  
            
            EXEC overCopy(d, detail);                              
        }
    } CHANGEKEY 'F5' TOOLBAR;
    
    EXTEND FORM userOrder PROPERTIES(d) copy ;
    DESIGN userOrder { PROPERTY(copy(d)) { focusable = FALSE; } }
    
    filterOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Order o) = date(o) >= filterOrderDateFrom() OR (o IS Order AND NOT filterOrderDateFrom());      
    
    filterOrderDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Order o) = date(o) <= filterOrderDateTo() OR (o IS Order AND NOT filterOrderDateTo());      
    
    filterOrderCustomer  = DATA LOCAL LegalEntity ();
    nameFilterOrderCustomer 'Покупатель' = name(filterOrderCustomer()) CHARWIDTH 15;          
    filterCustomer (Order o) = customer(o) == filterOrderCustomer() OR (o IS Order AND NOT filterOrderCustomer());    

    filterOrderCustomerStock  = DATA LOCAL Stock ();
    nameFilterOrderCustomerStock 'Склад покупателя' = name(filterOrderCustomerStock()) CHARWIDTH 15;          
    filterCustomerStock (Order o) = customerStock(o) == filterOrderCustomerStock() OR (o IS Order AND NOT filterOrderCustomerStock());  

    filterOrderSupplier = DATA LOCAL LegalEntity ();
    nameFilterOrderSupplier 'Поставщик' = name(filterOrderSupplier()) CHARWIDTH 15;          
    filterSupplier (Order o) = supplier(o) == filterOrderSupplier() OR (o IS Order AND NOT filterOrderSupplier());      

    filterOrderSupplierStock  = DATA LOCAL Stock ();
    nameFilterOrderSupplierStock 'Склад поставщика' = name(filterOrderSupplierStock()) CHARWIDTH 15;          
    filterSupplierStock (Order o) = supplierStock(o) == filterOrderSupplierStock() OR (o IS Order AND NOT filterOrderSupplierStock()); 
           
    filterOrderCustomUser  = DATA LOCAL CustomUser ();
    nameFilterOrderCustomUser 'Создан пользователем' = name[Contact](filterOrderCustomUser()) CHARWIDTH 15;          
    filterCustomUser (Order i) = createdUser[UserOrder](i) == filterOrderCustomUser() OR (i IS Order AND NOT filterOrderCustomUser());  

    filterOrderComputer = DATA LOCAL Computer ();
    nameFilterOrderComputer 'Создан на компьютере' = hostname(filterOrderComputer()) CHARWIDTH 15;          
    filterComputer (Order i) = createdComputer(i) == filterOrderComputer() OR (i IS Order AND NOT filterOrderComputer());
    
    overShowEdit = ABSTRACT VALUE BOOLEAN (Order);
    overShowDelete = ABSTRACT VALUE BOOLEAN (Order);      
    skipShowEdit = ABSTRACT VALUE BOOLEAN (Order);
    skipShowDelete = ABSTRACT VALUE BOOLEAN (Order);
    
    backgroundDraft 'Цвет' (Order o) = RGB(212,255,212) IF isDraft(o);      
    overBackgroundDraft(Order o) = OVERRIDE backgroundSku(o), backgroundDraft(o);
    
    backgroundShipmentDate 'Цвет' = ABSTRACT VALUE COLOR (Order);
    backgroundShipmentDate(Order o) += backgroundSku(o);
    
    FORM orders 'Заказы' AUTOREFRESH 60 
    
        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderSupplier, nameFilterOrderSupplierStock, 
                     nameFilterOrderCustomer, nameFilterOrderCustomerStock, nameFilterOrderCustomUser, nameFilterOrderComputer
        FILTERS isSupplier(filterOrderSupplier())    
            
        OBJECTS o = Order LAST
        PROPERTIES (o) selected
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) isClosed
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND overBackgroundDraft(o) isPosted, number, series, date, time
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                nameAgreement, seriesNumberContractSku
        PROPERTIES (o) READONLY BACKGROUND backgroundSku(o) countOrderDetail, quantityOrderDetail, sumOrderDetail,
                                VATSumOrderDetail, invoiceSumOrderDetail
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundShipmentDate(o) shipmentDate, shipmentTime
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) closeDate, note

        PROPERTIES (o) READONLY PANEL createdNameUser[UserOrder], createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES (o) NEWSESSION addUserOrder = NEW[UserOrder], editO = EDIT  SHOWIF overShowEdit(o)
        PROPERTIES (o) copy
        PROPERTIES (o) close[UserOrder] SHOWIF isOpened[UserOrder](o), open SHOWIF isClosed[UserOrder](o)
        PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF overShowDelete(o) //isUserOpenedOrder(o)

        OBJECTS d=OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity BACKGROUND backgroundParam(d), namePriceListType, 
                       price BACKGROUND backgroundParam(d), sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       nameCustomerStock, shipmentDate, shipmentTime
        ORDER index(d)

        FILTERS order(d) == o
        FILTERS filterDateFrom(o), 
                filterDateTo(o),
                filterSupplier(o),
                filterSupplierStock(o),
                filterCustomer(o),
                filterCustomerStock(o),
                filterCustomUser(o),
                filterComputer(o)                            
        
        LIST Order OBJECT o
    ;

    DESIGN orders 'Заказы (закупка)' {
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {  
                    caption = 'Фильтры';
                    type = CONTAINERV; 
                    NEW topFilters1 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(filterOrderDateFrom());
                        MOVE PROPERTY(filterOrderDateTo());                            
                        MOVE PROPERTY(nameFilterOrderSupplier());
                        MOVE PROPERTY(nameFilterOrderSupplierStock());     
                        MOVE PROPERTY(nameFilterOrderCustomer());
                        MOVE PROPERTY(nameFilterOrderCustomerStock());                                               
                    }
                    NEW topFilters2 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(nameFilterOrderCustomUser());
                        MOVE PROPERTY(nameFilterOrderComputer());                            
                    }                
                }
                MOVE BOX(o) {
                    fill = 1;
                }
            }
//            NEW BOX(o) {
//                fill = 2;
//            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE GROUP(created,o);
                    MOVE GROUP(posted,o);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;

                        MOVE PROPERTY(copy(o)) { caption = 'Заказ (закупка)';}
                    }
                }
            }
        }
    }
    @extendFormEditable(orders);
    @defineFilterIsOpened (order, orders, o); 
    @defineDocumentLogForm(orders, o);
 
    edit(UserOrderDetail d) += { DIALOG userOrder OBJECTS o = userOrder(d), d = d DOCKED; }
    
    show 'Просмотреть' (UserOrder i) =  {
        NEWSESSION{
            SHOW userOrder OBJECTS o = i DOCKED READONLY;
        }
        
    }TOOLBAR;
        
    showToShow (UserOrder i) = is(i) AND NOT overShowEdit(i);
    EXTEND FORM orders 
        PROPERTIES show(o) SHOWIF showToShow(o) BEFORE editO
    
    ;  
};
@extendFormFilterAccessStock(Order, o, orders, customerStock, company);

externalStock (Order o) += supplierStock(o);

in(Order o) += o IS Order;

@defineOrderBatch(customer, customer, p);

usePriceShipmentDateTime 'Использовать дату/время поставки при определении цены поставщика' = DATA BOOLEAN () COMPLEX;
EXTEND FORM options
    PROPERTIES() usePriceShipmentDateTime
;
DESIGN options {
    orders {
        MOVE PROPERTY(usePriceShipmentDateTime());
    }
}

priceDateTime(UserOrder d) += WHEN usePriceShipmentDateTime() AND d IS UserOrder THEN shipmentDateTime(d);

prevList (LedgerPriceListType priceListType, UserOrderDetail userOrderDetail) += WHEN sku(userOrderDetail) AND differentOrganizations(priceListType) AND NOT overPriceStockUser(userOrder(userOrderDetail)) THEN  
                                                     prevPriceA(priceListType,
                                                                sku(userOrderDetail),
                                                                priceStock(userOrderDetail),
                                                                supplier(userOrderDetail),
                                                                priceDateTime(userOrderDetail));

@defineOrderBatchDialog();

@implementOrderDestination(supplier, customer);

//использовать цены склада поставщика
usePriceSupplierStock 'Использовать цены для склада поставщика' = ABSTRACT BOOLEAN (Order);
usePriceSupplierStock 'Использовать цены для склада поставщика'  = DATA BOOLEAN (UserOrder);

usePriceSupplierStock(UserOrder order) += usePriceSupplierStock(order);

EXTEND FORM userOrder
    PROPERTIES (o) usePriceSupplierStock         
;          

DESIGN userOrder {
    headerExtraParams{
        NEW prices {
            caption = 'Цены';
            type = COLUMNS;
            columns = 1;
            MOVE PROPERTY(usePriceSupplierStock(o));
        }         
    }
}

overPriceStockUser(UserOrder o) += WHEN usePriceSupplierStock(o) THEN supplierStock(o); 

EXTEND FORM userOrder
    PROPERTIES READONLY TODRAW sts AFTER prevCurrentBalance(ks, st) prevCurrentBalance(ks, sst)
                           
    FILTERS sst == supplierStock(o), 
            legalEntity(sst) == supplier(o),
            isCompany(sst),
            active(sst)     
;

DESIGN userOrder {
    PROPERTY(prevCurrentBalance(ks, sst)){
        caption = 'Текущий остаток (поставщик)';
        background = RGB(240, 240, 224);
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o);
@extendFormFilterRoleAccess(order, o, orders);
@defineDocumentOperationConstraint(order, 'заказ (закупка)', Purchase);
operation[Order.Order](Order order) += operation(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (закупка)', userOrder);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);


@defineDocumentOperationRoleOver(userOrder, purchase);

overCopy(Order s, UserOrder d) += {
    operation(d) <- operation(s);
}

@defineOperationFilterProperty(order, o, orders, nameFilterOrderSupplier);

@defineOperationProperty(usePriceSupplierStock, 'Использовать цены для склада поставщика', paramsContainer);
@deriveDocumentOperationProperty(userOrder, usePriceSupplierStock);

@deriveShipmentDate();
       
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserOrder userOrder) AND NOT isSupplier(supplier(userOrder))
    CHECKED BY supplier[UserOrder] MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserOrder userOrder) AND NOT isCompany(customer(userOrder))
    CHECKED BY customer[UserOrder] MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterOrderSupplier() AND NOT isSupplier(filterOrderSupplier())
    CHECKED BY filterOrderSupplier[] MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterOrderCustomer() AND NOT isCompany(filterOrderCustomer())
    CHECKED BY filterOrderCustomer[] MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся компанией';  
CONSTRAINT filterOrderCustomerStock() AND NOT isCompany(filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Для фильтра в заказе выбрана в качестве склада покупателя склад, который не принадлежит компании';      
        
CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT in(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[]   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT in(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';            

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserOrder, supplier, userOrder);

@defineDocumentLegalEntityStockAccess(UserOrder, customer, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
DESIGN userOrder {
    PROPERTY(packQuantity(d)) { background = #FFBC02; }
}
DESIGN orders {
    PROPERTY(packQuantity(d)) { background = #FFBC02; }
}

packQuantity[Order.OrderDetail](OrderDetail detail) += packQuantity(detail);
DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, customer);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, customer);

overChangeQuantityValueSku(UserOrderDetail detail) += {
    IF packBarcode(sku(detail)) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

overChangeQuantityValueBatch(UserOrderDetail detail) += {
    IF packBarcode(sku(batch(detail))) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortment (Sku sku, Stock stock, UserOrder userOrder) =
    companyA(ledgerPriceListType(priceListType(userOrder, sku)),
                                                sku, stock, dateTime(userOrder)) == supplier(userOrder);

EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'В заказе' quantityCustomer(ks, o, st) 'F9'
        FILTER 'С остатком' prevCurrentBalance(ks, st) OR isCharge(ks) 'F10'
        
    FILTERGROUP filter1
        FILTER 'С поступлением' countPurchaseSupplier(supplier(o), ks) 'F8' 
        FILTER 'С поступлением со склада' quantityPurchaseSupplier (supplierStock(o), ks) 'shift F8'                                                                                             
                                                                                             
;

EXTEND FORM userOrder

    FILTERGROUP filter4
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityCustomer(b, o, sto) 'F9'
        
    FILTERGROUP filter5
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(o), sku(b)) 'F8'
        FILTER 'В прайсе ' companyA(priceListType(o, b), b, customerStock(o), dateTime(o)) == supplier(o) 'F7'
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(order, userOrder, o, customerStock);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

EXTEND FORM userOrder
    PROPERTIES READONLY TODRAW sts AFTER prevCurrentBalance(ks, sst)
            prevAvailableQuantity(ks, sst, o)
                           
    FILTERS sst == supplierStock(o), 
            legalEntity(sst) == supplier(o),
            isCompany(sst),
            active(sst)     
;

DESIGN userOrder {
    PROPERTY(prevAvailableQuantity(ks, sst, o)){
        caption = 'Доступное кол-во (поставщик)';
        background = RGB(240, 240, 224);
    }
}

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(Order, sku, shipmentDateTime, customerStock, supplier);
operation[OrderLedger](OrderDetail ledger) += operation(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);
//skipToShowEdit = ABSTRACT BOOLEAN (Order);
//skipToShowDelete = ABSTRACT BOOLEAN (Order);
//overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipToShowEdit(i);
//overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipToShowDelete(i); 
overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowEdit(i); 

NAVIGATOR {
    purchasePurchaseNavigator {
        NEW orders;
    }
}

CONSTRAINT  isPosted(UserOrder i) AND isContract(operation(i)) AND NOT contractSku[Order](i) 
    MESSAGE 'Для заказа (закупка) обязан быть задан договор';   
CONSTRAINT  isPosted(UserOrderDetail d) AND isPrice(operation(d)) AND NOT price(d)
    MESSAGE 'Для строки заказа (закупка) должна быть задана цена';   