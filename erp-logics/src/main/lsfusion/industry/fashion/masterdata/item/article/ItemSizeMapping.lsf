MODULE ItemSizeMapping;

REQUIRE System, Item, CustomsGroupItem, ImportTNVED, ItemArticle, ItemFashion, ItemFashionSticker;

NAMESPACE Item;

// --------------------------------------------  Отображение размеров ---------------------------------------------------- //

CLASS SizeMapping 'Соответствие размеров';
TABLE sizeMapping(SizeMapping);

itemGroup = DATA ItemGroup (SizeMapping);
idItemGroup 'Группа' (SizeMapping m) = id(itemGroup(m));
canonicalNameItemGroup 'Группа' (SizeMapping m) = canonicalName(itemGroup(m));
 
size = DATA Size (SizeMapping);
idSize 'Код размера' (SizeMapping m) = id(size(m));
nameSize 'Размер' (SizeMapping m) = name(size(m));
nameOriginalSize 'Размер (ориг.)' (SizeMapping m) = nameOriginal(size(m));

//replaceSizeSize(s, size) += (s, size){sizeSizeMapping(m) <- size WHERE sizeSizeMapping(m) == s;}

brand = DATA Brand (SizeMapping);
nameBrand 'Бренд' (SizeMapping m) = name(brand(m));
 
sizeHeight 'Рост' = DATA VARSTRING[10] (SizeMapping);
sizeChest 'Обхват груди' = DATA VARSTRING[10] (SizeMapping);
sizeNeck 'Обхват шеи' = DATA VARSTRING[10] (SizeMapping);
footLength 'Длина стопы' = DATA VARSTRING[10] (SizeMapping);
insoleLength 'Длина стельки' = DATA VARSTRING[10] (SizeMapping);
sizeHead 'Обхват головы' = DATA VARSTRING[10] (SizeMapping);
sizeHand 'Обхват кисти' = DATA VARSTRING[10] (SizeMapping);
sizeUnderChest 'Обхват под грудью' = DATA VARSTRING[10] (SizeMapping);
sizeCupBra 'Размер чашечки' = DATA VARSTRING[10] (SizeMapping);
sizeHips 'Обхват бедер' = DATA VARSTRING[10] (SizeMapping);
sizeWaist 'Обхват талии' = DATA VARSTRING[10] (SizeMapping);
legLength 'Длина ноги по внутр.поверхности' = DATA VARSTRING[10] (SizeMapping);

CLASS SizeMappingEx 'Соответствие размеров по наименованию';
TABLE sizeMappingEx(SizeMappingEx);

name 'Наименование' = DATA VARSTRING[100] (SizeMappingEx);

sizeHeight 'Рост' = DATA BOOLEAN (SizeMappingEx);
sizeChest 'Обхват груди' = DATA BOOLEAN (SizeMappingEx);
sizeNeck 'Обхват шеи' = DATA BOOLEAN (SizeMappingEx);
footLength 'Длина стопы' = DATA BOOLEAN (SizeMappingEx);
insoleLength 'Длина стельки' = DATA BOOLEAN (SizeMappingEx);
sizeHead 'Обхват головы' = DATA BOOLEAN (SizeMappingEx);
sizeHand 'Обхват кисти' = DATA BOOLEAN (SizeMappingEx);
sizeUnderChest 'Обхват под грудью' = DATA BOOLEAN (SizeMappingEx);
sizeCupBra 'Размер чашечки' = DATA BOOLEAN (SizeMappingEx);
sizeHips 'Обхват бедер' = DATA BOOLEAN (SizeMappingEx);
sizeWaist 'Обхват талии' = DATA BOOLEAN (SizeMappingEx);
legLength 'Длина ноги по внутр.поверхности' = DATA BOOLEAN (SizeMappingEx);

over = ABSTRACT CASE BOOLEAN (SizeMappingEx);

isFull (SizeMappingEx mx)=   sizeHeight(mx) OR 
                        sizeChest(mx) OR 
                        sizeNeck(mx) OR
                        footLength(mx) OR
                        insoleLength(mx) OR
                        sizeHead(mx) OR
                        sizeHand(mx) OR
                        sizeUnderChest(mx) OR
                        sizeCupBra(mx) OR
                        sizeHips(mx) OR
                        sizeWaist(mx) OR
                        legLength(mx) OR
                        over(mx);

countMappingEx (Item i)= GROUP SUM 1 IF  isISubstring(caption(i), name(SizeMappingEx mx)) == 1 AND isFull(mx);

background (SizeMappingEx mx)= RGB(224, 224, 255) IF mx IS SizeMappingEx; 
FORM sizeMappings 'Соответствие размеров'
    OBJECTS m = SizeMapping
    PROPERTIES(m) canonicalNameItemGroup, idItemGroup, 
                  idSize, nameSize, nameOriginalSize, nameBrand,                  
                  sizeHeight, sizeChest, sizeNeck, footLength,
                  insoleLength, sizeHead, sizeHand, sizeUnderChest,
                  sizeCupBra, sizeHips, sizeWaist, legLength,
                  NEW, DELETE GRID
                   
    ORDER idItemGroup(m), idSize(m)
    
    OBJECTS mx = SizeMappingEx
    PROPERTIES(mx) name, sizeHeight, sizeChest, sizeNeck, footLength,
                  insoleLength, sizeHead, sizeHand, sizeUnderChest,
                  sizeCupBra, sizeHips, sizeWaist, legLength,
                  NEW, DELETE GRID         
                   
;

isEACArticle 'EAC для артикула' = DATA BOOLEAN (SizeMappingEx);
countMappingExIsEAC(Article a)= GROUP SUM 1 IF  isISubstring(caption(a), name(SizeMappingEx mx)) == 1 AND isEACArticle(mx);
mapIsEAC 'Заполнить "EAC" по наименованию' (Article a)   { 
    isEAC(a) <- TRUE WHERE  countMappingExIsEAC (a); 
} ASON CONTEXTMENU isEAC[Article]; 

EXTEND FORM sizeMappings
    PROPERTIES(mx) BACKGROUND background(mx) isEACArticle
;

sizeMapping (g, s, b)= GROUP MAX SizeMapping m BY itemGroup(m), size(m), brand(m);

TABLE itemGroupSizeBrand (ItemGroup, Size, Brand); 
levelParentSizeMapping (ItemGroup itemGroup, Size size, Brand brand) = GROUP
                                                                  MIN level(itemGroup, ItemGroup parent) IF sizeMapping(parent, size, brand) MATERIALIZED;    
nearestParentSizeMapping (ItemGroup itemGroup, Size size, Brand brand) = itemGroup(itemGroup, levelParentSizeMapping(itemGroup, size, brand));
nearestSizeMapping (ItemGroup itemGroup, Size size, Brand brand) = sizeMapping(nearestParentSizeMapping (itemGroup, size, brand), size, brand);

overSizeMapping 'Соответствие по умолчанию' (ItemGroup itemGroup, Size size, Brand brand) =
    OVERRIDE sizeMapping(itemGroup, size, brand), 
             nearestSizeMapping(itemGroup, size, brand) MATERIALIZED;    

             
TABLE itemGroupSize (ItemGroup, Size);
sizeMapping (g, s)= GROUP MAX SizeMapping m BY itemGroup(m), size(m);
levelParentSizeMapping (ItemGroup itemGroup, Size size) = GROUP
                                                                  MIN level(itemGroup, ItemGroup parent) IF sizeMapping(parent, size) MATERIALIZED;    
nearestParentSizeMapping (ItemGroup itemGroup, Size size) = itemGroup(itemGroup, levelParentSizeMapping(itemGroup, size));
nearestSizeMapping (ItemGroup itemGroup, Size size) = sizeMapping(nearestParentSizeMapping (itemGroup, size), size);

overSizeMapping 'Соответствие по умолчанию' (ItemGroup itemGroup, Size size) =
    OVERRIDE sizeMapping(itemGroup, size), 
             nearestSizeMapping(itemGroup, size) MATERIALIZED;  

inMap = DATA LOCAL BOOLEAN (Item);            
            
META createSizeMappingExAttribute(property, mappingProp, captionProp, shortcutProp, prefix)

    countMappingEx###property###prefix(Item i) = GROUP SUM 1 IF  isISubstring(caption(i), name(SizeMappingEx mx)) == 1 AND mappingProp(mx);
    
    mappingProp###prefix##SizeMapping (ItemGroup g, Size s, Brand b) = mappingProp(overSizeMapping(g, s, b));  //  sizeMappingItemGroupSizeBrand
    mappingProp###prefix##SizeMapping (ItemGroup g, Size s) = mappingProp(overSizeMapping(g, s));
    mappingProp###prefix##SizeMapping (Item i) = OVERRIDE mappingProp##SizeMapping(itemGroup(i), size(i), brand(i)), mappingProp##SizeMapping(itemGroup(i), size(i));
    map###property###prefix 'Заполнить '##captionProp##' по соответствию' ()   { 
        property###prefix(Item i) <- mappingProp###prefix##SizeMapping(i) 
            WHERE countMappingEx###property###prefix(i) AND inMap(i) AND mappingProp###prefix##SizeMapping(i); 
    } 
    map###property###prefix 'Заполнить '##captionProp##' по соответствию' (Item i)  { 
        inMap(Item item) <- NULL;
        inMap(i) <- TRUE;
        map###property###prefix();
    } ASON CONTEXTMENU shortcutProp[Item]; 
END
META createSizeMappingExAttribute(property, captionProp, shortcutProp, prefix)
    @createSizeMappingExAttribute(property, property, captionProp, shortcutProp, prefix); 
END

@createSizeMappingExAttribute(sizeHeight, 'рост', sizeHeight, );
@createSizeMappingExAttribute(sizeUnderChest, 'обхват под грудью', sizeUnderChest, );
@createSizeMappingExAttribute(sizeCupBra, 'размер чашечки', sizeCupBra, );
@createSizeMappingExAttribute(sizeHips, 'обхват бедер', sizeHips, );
@createSizeMappingExAttribute(sizeWaist, 'обхват талии', sizeWaist, );
@createSizeMappingExAttribute(sizeChest, 'обхват груди', sizeChest, );
@createSizeMappingExAttribute(sizeNeck, 'обхват шеи', sizeNeck, );
@createSizeMappingExAttribute(sizeHead, 'обхват головы', sizeHead, );
@createSizeMappingExAttribute(sizeHand, 'обхват кисти', sizeHand, );
@createSizeMappingExAttribute(footLength, 'длину стопы', footLength, );
@createSizeMappingExAttribute(insoleLength, 'длину стельки', insoleLength, );
 
@createSizeMappingExAttribute(legLength, 'длину ноги по внутр.поверхности', legLength, );

NAVIGATOR {
    skuNavigator {
        NEW sizeMappings;        
    }
}
//-- Заполнение матрицы
updateSizeMapping 'Обновить матрицу из товаров'  ABSTRACT LIST ( ) TOOLBAR;
EXTEND FORM sizeMappings PROPERTIES() updateSizeMapping TODRAW m;

META createSizeMappingAttribute(attribute, type)
    @createSizeMappingAttribute(attribute, type, attribute);
END
META createSizeMappingAttribute(attribute, type, postfix)
    count###postfix = GROUP SUM 1 BY itemGroup(Item i), size(i), brand(i), attribute(i);
    best###attribute(ItemGroup itemGroup, Size size, Brand brand) = GROUP
                                                         LAST type attribute 
                                                         ORDER count###postfix(itemGroup, size, brand, attribute), attribute
                                                         WHERE count###postfix(itemGroup, size, brand, attribute);
    
    updateSizeMapping() + { 
        FOR best###attribute(ItemGroup itemGroup, Size size, Brand brand) DO {
            IF NOT sizeMapping(itemGroup, size, brand) THEN {
                NEW m = SizeMapping {
                    itemGroup(m) <- itemGroup;
                    size(m) <- size;
                    brand(m) <- brand;
                }
            }
            attribute(SizeMapping m) <- best###attribute(itemGroup, size, brand) WHERE m == sizeMapping(itemGroup, size, brand) AND NOT attribute(m);
        }
    }
END

@createSizeMappingAttribute(sizeHeight, VARISTRING[10]);
@createSizeMappingAttribute(sizeChest, VARSTRING[10]);
@createSizeMappingAttribute(sizeNeck, VARSTRING[10]);
@createSizeMappingAttribute(footLength, VARSTRING[10]);
@createSizeMappingAttribute(insoleLength, VARSTRING[10]);
@createSizeMappingAttribute(sizeHead, VARSTRING[10]);
@createSizeMappingAttribute(sizeHand, VARSTRING[10]);
@createSizeMappingAttribute(sizeUnderChest, VARSTRING[10]);
@createSizeMappingAttribute(sizeCupBra, VARSTRING[10]);
@createSizeMappingAttribute(sizeHips, VARSTRING[10]);
@createSizeMappingAttribute(sizeWaist, VARSTRING[10]);

@createSizeMappingAttribute(legLength, VARSTRING[10]);