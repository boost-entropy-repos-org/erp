MODULE PricingPharmacy;

REQUIRE Pricing, ItemPharmacyBy, PurchaseInvoicePharmacy;

NAMESPACE Pricing;

limitRetailMarkupPharmacyCondition 'Условие округления предельной розничной цены' = DATA RoundCondition ();
nameLimitRetailMarkupPharmacyCondition 'Условие округления предельной розничной цены' = name(limitRetailMarkupPharmacyCondition());

onlyModRetailPrice 'Ограничение на кратность цены относительно количества блистеров' = DATA BOOLEAN ();

//currentRetailPrice 'Цена розничная' (Batch bt, Stock stock) = prevPriceB[PriceListType,Batch,Stock,DATETIME](SystemLedgerPriceListType.retailPricingPriceListType, bt, stock, currentDateTime());

//CONSTRAINT (SETCHANGED(currentRetailPricingPrice(Sku sk, Stock st)) OR SETCHANGED(blisterAmount(sk))) AND blisterAmount(sk) AND currentRetailPricingPrice(sk,st) AND st IS DepartmentStore
//    AND onlyModRetailPrice() AND NOT trunc(currentRetailPricingPrice(sk,st)/blisterAmount(sk),2) == currentRetailPricingPrice(sk,st)/blisterAmount(sk)
//        MESSAGE 'Розничная цена должна быть кратна количеству блистеров';

allowNoModReatilPrice 'Разрешить некратную цену' = DATA BOOLEAN (Batch, Stock);

CONSTRAINT (SETCHANGED(retailPricingPriceB(Batch bt, Stock st, currentDateTime())) OR SETCHANGED(blisterAmount(bt))) AND blisterAmount(bt) 
    AND retailPricingPriceB(bt, st, currentDateTime()) AND st IS DepartmentStore AND onlyModRetailPrice() AND NOT allowNoModReatilPrice(bt,st)
    AND NOT trunc(retailPricingPriceB(bt, st, currentDateTime())/blisterAmount(bt),2) == retailPricingPriceB(bt, st, currentDateTime())/blisterAmount(bt)
        MESSAGE 'Розничная цена должна быть кратна количеству блистеров';

EXTEND FORM options
    PROPERTIES () nameLimitRetailMarkupPharmacyCondition, onlyModRetailPrice
;

DESIGN options {
    pricings {
        MOVE PROPERTY(nameLimitRetailMarkupPharmacyCondition());       
    }
    pharmacy {
        MOVE PROPERTY(onlyModRetailPrice());
    }
}
