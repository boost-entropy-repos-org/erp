MODULE InventoryPharmacy;

REQUIRE Inventory, POSPharmacy, PurchaseLedger, PurchaseInvoicePharmacy;

NAMESPACE Inventory;

@defineOperationProperty(isRetailPharmacy, 'По аптекам', paramsContainer);

isRetailPharmacy (Inventory inventory) = isRetailPharmacy(operation(inventory));

pageInventoryDetail =  GROUP MAX (PageInventoryDetail detail)
    BY batch(detail), pageInventory(detail);
      
pageInventory = GROUP MAX (PageInventory page) BY inventory(listInventory(page)) MATERIALIZED;

CONSTRAINT isRetailPharmacy(inventory(ListInventory li)) AND countPageInventory(li)>1.0
    MESSAGE 'В инвентаризации по аптеке должна быть только 1 страница описи';
    
CONSTRAINT isRetailPharmacy(Inventory li) AND countListInventory(li)>1.0
    MESSAGE 'В инвентаризации по аптеке должна быть только 1 опись';

currentPrice 'Розничная цена' = DATA LOCAL NESTED NUMERIC[16,4] (Sku, PageInventory);
calcCurrentPrice 'Розничная цена' (Sku sku, PageInventory li) = prevAccountPriceB(sku, stock(listInventory(li)), dateTime(listInventory(li)));

TABLE batchPageInventory (Batch, PageInventory);    
currentPrice 'Розничная цена' = DATA LOCAL NESTED NUMERIC[16,4] (Batch, PageInventory);
calcCurrentPrice 'Розничная цена' (Batch batch, PageInventory li) = prevAccountPriceB(batch, stock(listInventory(li)), dateTime(listInventory(li)));

quantity 'Кол-во в описи' = DATA LOCAL NESTED NUMERIC[16,5] (PageInventory, Batch);
quantity 'Кол-во в описи' = DATA LOCAL NESTED NUMERIC[16,5] (PageInventory, Sku, NUMERIC[16,4]);

changeQuantityValue (Batch batch, PageInventory li, NUMERIC[16,5] n) =  {
    IF pageInventoryDetail(batch, li) THEN {
        quantity(PageInventoryDetail detail) <- OVERRIDE n, 0.0 WHERE detail == pageInventoryDetail(batch, li);
        APPLY {};
    } ELSE {
        NEW d = PageInventoryDetail {
            pageInventory(d) <- li;
            sku(d) <- sku(batch);
            batch(d) <- batch;
            quantity(d) <- n;
            price (d)  <- prevAccountPriceB(batch(d), stock(d), dateTime(d));
        }
        APPLY {};
    }
    quantity(li,batch) <- n;
}

//quantity 'Кол-во в описи' = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    //BY pageInventory(pageInventoryDetail), batch(pageInventoryDetail);
//quantity 'Кол-во в описи' = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    //BY pageInventory(pageInventoryDetail), sku(batch(pageInventoryDetail)), currentPrice(batch(pageInventoryDetail), pageInventory(pageInventoryDetail));
prevBalanceB 'Тек. остаток' = DATA LOCAL NESTED NUMERIC[16,5] (Batch, PageInventory);
calcPrevBalanceB 'Тек. остаток' (Batch batch, PageInventory li) = prevBalanceB(batch, stock(listInventory(li)), dateTime(listInventory(li)));

changeQuantity(Batch batch, PageInventory li) = {
    INPUT n = NUMERIC[16,5] DO {
        changeQuantityValue(batch, li, (OVERRIDE n,0.0));
        quantity(li, Sku sk, NUMERIC[16,4] price) <- (OVERRIDE [= GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
            BY pageInventory(pageInventoryDetail), sku(batch(pageInventoryDetail)), currentPrice(batch(pageInventoryDetail), pageInventory(pageInventoryDetail))](li,sk,price), 0.0) 
            WHERE sk == sku(batch) AND price == currentPrice(batch,li); 
    }
}

prevBalanceB = DATA LOCAL NESTED NUMERIC[16,5](Batch, PageInventory, NUMERIC[16,4]);
calcPrevBalanceB (Batch batch, PageInventory page, NUMERIC[16,4] price) = prevBalanceB(batch, page) 
    IF currentPrice(batch, page)==price;

prevBalanceB 'Остаток' = DATA LOCAL NESTED NUMERIC[16,5] (Sku, PageInventory, NUMERIC[16,4]);
calcPrevBalanceB 'Остаток'  = 
    GROUP SUM prevBalanceB(Batch b, stock(listInventory(PageInventory li)), dateTime(listInventory(li))) BY sku(b), li, currentPrice(b,li);

countLedger (Batch bt, PageInventory li) = prevCountLedger(bt, stock(listInventory(li)));
quantityPurchase 'Кол-во в приходе' (Batch bt, PageInventory li) = quantityPurchase(bt, stock(listInventory(li)));

quantityPurchase = DATA LOCAL NESTED NUMERIC[16,5] (Sku, PageInventory, NUMERIC[16,4]);
calcQuantityPurchase  = GROUP SUM quantityPurchase(Batch batch, PageInventory page) 
    IF currentPrice(batch, page)==NUMERIC[16,4] price BY sku(batch), page, price;

quantityPurchase = DATA LOCAL NESTED NUMERIC[16,5](Batch, PageInventory, NUMERIC[16,4]); 
calcQuantityPurchase(Batch batch, PageInventory page, NUMERIC[16,4] price) =  quantityPurchase(batch, page)
    IF currentPrice(batch, page)== price;
    
quantity = 
    GROUP SUM quantity(PageInventoryDetail detail) BY batch(detail), pageInventory(detail), currentPrice(batch(detail), pageInventory(detail));   
    
calculatedQuantity = DATA LOCAL NESTED NUMERIC[16,5](Sku, PageInventory, NUMERIC[16,4]);
    
limitBalance (Batch batch, PageInventory page, NUMERIC[16,4] price) = IF prevBalanceB(sku(batch), page, price) >= calculatedQuantity(sku(batch), page, price)
    THEN prevBalanceB(batch, page, price)
    ELSE quantityPurchase(batch, page, price);

calculatedQuantity (Batch batch, PageInventory page, NUMERIC[16,4] price) = PARTITION UNGROUP calculatedQuantity
    LIMIT STRICT limitBalance(batch, page, price)
    ORDER DESC expiryDate(batch), date(batch), batch
    BY sku(batch), page, price;

changeQuantity (Sku sku, PageInventory page, NUMERIC[16,5] price) =  {
    INPUT quantity = NUMERIC[16,5] DO {
        calculatedQuantity(sku, page, price) <- quantity;
        quantity(PageInventoryDetail detail) <- 0.0 WHERE quantity(batch(detail), page, price) AND pageInventory(detail)==page AND sku(detail)== sku;
        quantity(page, Batch batch) <- 0.0 WHERE quantity(batch, page, price) AND sku(batch)==sku;
        FOR NUMERIC[16,4] q == calculatedQuantity(Batch batch, page, price) AND sku(batch)==sku DO {
            changeQuantityValue(batch, page, q);
        }
        quantity(page,sku,price) <- OVERRIDE quantity, 0.0;
    }
}

//блистеры

quantityInventoryRoundCondition 'Кол-во знаков после запятой в описи' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES quantityInventoryRoundCondition()
;

DESIGN options {
    inventory{
        MOVE PROPERTY(quantityInventoryRoundCondition());
    }
}

blisterQuantity 'Кол-во блистеров' (Batch batch, PageInventory li) = round0(quantity(li, batch)*blisterAmount(batch));

readOnlyBlisterQuantity (Batch batch, PageInventory li) = li IS PageInventory AND NOT blisterAmount(batch);
readOnlyBlisterQuantity (Sku sku, PageInventory li) = li IS PageInventory AND NOT blisterAmount(sku);

backgroundBlisterQuantity 'Цвет' (Batch batch, PageInventory li)  = RGB(250, 236, 199) IF li IS PageInventory AND blisterAmount(batch);
backgroundBlisterQuantity 'Цвет' (Sku sku, PageInventory li)  = RGB(250, 236, 199) IF li IS PageInventory AND blisterAmount(sku);

changeBlisterQuantityValue (Batch batch, PageInventory li, NUMERIC[16,4] i) = {
    IF pageInventoryDetail(batch, li) THEN {
        quantity(PageInventoryDetail detail) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), quantityInventoryRoundCondition())) WHERE detail == pageInventoryDetail(batch, li);;
        APPLY {};
    } ELSE {
        IF i != 0 THEN {
            NEW d = PageInventoryDetail {
                pageInventory(d) <- li;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                quantity(d) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), quantityInventoryRoundCondition()));
                price (d)  <- prevAccountPriceB(batch(d), stock(d), dateTime(d));
            }
            APPLY {};
        }
    }
    quantity(li,batch) <- NUMERIC[16,5](round(NUMERIC[16,5](i)/blisterAmount(batch), quantityInventoryRoundCondition()));
}

changeBlisterQuantity(Batch batch, PageInventory li) = {
    INPUT i = INTEGER DO {
        changeBlisterQuantityValue(batch,li,NUMERIC[16,4](OVERRIDE i,0.0));
        quantity(li, Sku sk, NUMERIC[16,4] price) <- (OVERRIDE [= GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
                    BY pageInventory(pageInventoryDetail), sku(batch(pageInventoryDetail)), currentPrice(batch(pageInventoryDetail), pageInventory(pageInventoryDetail))](li,sk,price), 0.0) 
                    WHERE sk == sku(batch) AND price == currentPrice(batch,li);
    }
}

//
calculatedBlisterQuantity = DATA LOCAL NESTED INTEGER(Sku, PageInventory, NUMERIC[16,4]);
numCalculatedBlisterQuantity (Sku sku, PageInventory page, NUMERIC[16,4] price) = NUMERIC[16,5](calculatedBlisterQuantity(sku, page, price));
    
limitBlisterBalance (Batch batch, PageInventory page, NUMERIC[16,4] price) = IF prevBalanceB(sku(batch), page, price)*blisterAmount(batch)>= calculatedBlisterQuantity(sku(batch), page, price)
    THEN prevBalanceB(batch, page, price)*blisterAmount(batch)
    ELSE quantityPurchase(batch, page, price)*blisterAmount(batch);

calculatedBlisterQuantity (Batch batch, PageInventory page, NUMERIC[16,4] price) = PARTITION UNGROUP numCalculatedBlisterQuantity
    LIMIT STRICT limitBlisterBalance(batch, page, price)
    ORDER DESC expiryDate(batch), date(batch), batch
    BY sku(batch), page, price;

changeBlisterQuantity (Sku sku, PageInventory page, NUMERIC[16,5] price) =  {
    INPUT quantity = INTEGER DO {
        calculatedBlisterQuantity(sku, page, price) <- quantity;
        FOR quantity(Batch batch, page, price) AND sku(batch)==sku DO {
            quantity(PageInventoryDetail detail) <- 0.0 WHERE batch(detail)==batch AND pageInventory(detail)==page;
            quantity(page,batch) <- 0.0;
        }
        FOR NUMERIC[16,4] q == calculatedBlisterQuantity(Batch batch, page, price) AND sku(batch)==sku DO {
            changeBlisterQuantityValue(batch, page, q);
        }
        quantity(page,sku,price) <- OVERRIDE NUMERIC[16,5](round(NUMERIC[16,5](quantity)/blisterAmount(sku), quantityInventoryRoundCondition())), 0.0;
    }
}

quantityBlister 'Кол-во блистеров в описи' (PageInventory page, Sku sku, NUMERIC[16,4] price) = quantity(page, sku, price)* blisterAmount(sku);

//фильтр по цене
filterPrice 'Ввести цену' (Batch bt, PageInventory li) = (filterPrice() AND currentPrice(bt, li)==filterPrice()) OR NOT filterPrice();

filterBarcode 'Ввести штрихкод' (Batch bt) = (filterBarcode() AND sku(barcode(filterBarcode()))==sku(bt)) OR NOT filterBarcode();
filterBarcode 'Ввести штрихкод' (Sku sku) = (filterBarcode() AND sku(barcode(filterBarcode()))==sku) OR NOT filterBarcode();

checkPurchaseQuantity 'Контролировать в инвентаризации превышение количества по приходу' = DATA BOOLEAN ();

quantityBatchInSku 'Кол-во партий по товару+цена+стр.инвентар.' = DATA LOCAL NESTED INTEGER (Sku, NUMERIC[16,4], PageInventory);
quantityBatchInSkuOst 'Кол-во партий с остатком по товару+цена+стр.инвентар.' = DATA LOCAL NESTED INTEGER (Sku, NUMERIC[16,4], PageInventory);
quantityBatchInSkuDvi 'Кол-во партий с движением по товару+цена+стр.инвентар.' = DATA LOCAL NESTED INTEGER (Sku, NUMERIC[16,4], PageInventory);
//quantityBatchInSku 'Кол-во партий по товару+цена+стр.инвентар.'  = GROUP SUM 1 IF currentPrice(Batch batch, PageInventory li) BY sku(batch), currentPrice(batch,li), li ; 
//quantityBatchInSkuOst 'Кол-во партий с остатком по товару+цена+стр.инвентар.' = GROUP SUM 1 IF currentPrice(Batch bt, PageInventory li) AND prevBalanceB(bt, li) BY sku(bt), currentPrice(bt,li), li ;
//quantityBatchInSkuDvi 'Кол-во партий с движением по товару+цена+стр.инвентар.' = GROUP SUM 1 IF currentPrice(Batch bt, PageInventory li) AND countLedger(bt, li) AND currentPrice(bt, li) BY sku(bt), currentPrice(bt,li), li ;

filterPrice 'Ввести цену' (Sku sku, PageInventory li) = (filterPrice() AND quantityBatchInSku(sku, filterPrice(), li)) OR NOT filterPrice();

EXTEND FORM options
    PROPERTIES() checkPurchaseQuantity
;

DESIGN options {
    pane {
        pharmacy {   
            MOVE PROPERTY(checkPurchaseQuantity());
        }
    }
}  

CONSTRAINT quantity(PageInventory li, Batch bt) > quantityPurchase(bt, li) AND checkPurchaseQuantity() AND isRetailPharmacy(inventory(listInventory(li)))
    MESSAGE 'Количество в описи по партии больше количества поступления';

//логика работы с текущей инвентаризацией
currentPharmacyListInventory 'Текущая инвентаризация' = DATA LOCAL NESTED PageInventory ();
showCurrenct (Batch batch) = batch IS Batch AND currentPharmacyListInventory();

number 'Номер инвентаризации' (PageInventory page) = number(inventory(listInventory(page)));
date 'Дата инвентаризации' (PageInventory page)= date(listInventory(page));
stock (PageInventory page) = stock(listInventory(page));
nameStock 'Склад' (PageInventory page) = name(stock(page));

showBalanceB 'Показывать остаток по партии в инвентаризационной описи' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() showBalanceB
;

DESIGN options {
    pane {
        pharmacy {   
            MOVE PROPERTY(showBalanceB());
        }
    }
}  
   
currentPharmacyListInventoryBalanceB() = currentPharmacyListInventory() AND showBalanceB();

overFillLocal = ABSTRACT LIST (PageInventory);

fillLocal(PageInventory page) = {
    quantityBatchInSku(Sku sk, NUMERIC[16,4] n, page) <- NULL;
    quantityBatchInSkuOst(Sku sk, NUMERIC[16,4] n, page) <- NULL;
    quantityBatchInSkuDvi(Sku sk, NUMERIC[16,4] n, page) <- NULL;

    quantity(page, Batch bt) <- NULL;
    quantity(page, Sku sk, NUMERIC[16,4] n) <- NULL;
    
    currentPrice(Batch bt, page) <- NULL;
    currentPrice(Sku sku, page) <- NULL;
    prevBalanceB (Batch bt, page) <- NULL; 
    prevBalanceB (Batch bt, page, NUMERIC[16,4] n) <- NULL;   
    prevBalanceB (Sku sku, page, NUMERIC[16,4] n) <- NULL;   
    quantityPurchase (Batch bt, page, NUMERIC[16,4] n) <- NULL;   
    quantityPurchase (Sku sku, page, NUMERIC[16,4] n) <- NULL;       
    
    currentPrice(Sku sku, page) <- calcCurrentPrice(sku, page) WHERE calcCurrentPrice(sku, page);
    currentPrice(Batch bt, page) <- calcCurrentPrice(bt, page) WHERE calcCurrentPrice(bt, page);
    prevBalanceB(Batch bt, page) <- calcPrevBalanceB(bt, page) WHERE calcPrevBalanceB(bt, page);
    prevBalanceB (Batch bt, page, NUMERIC[16,4] n) <- calcPrevBalanceB(bt, page, n) WHERE calcPrevBalanceB(bt, page, n);
    prevBalanceB (Sku sku, page, NUMERIC[16,4] n) <- calcPrevBalanceB(sku, page, n) WHERE calcPrevBalanceB(sku, page, n);
    quantityPurchase (Batch bt, page, NUMERIC[16,4] n) <- calcQuantityPurchase(bt, page, n) WHERE calcQuantityPurchase(bt, page, n);
    quantityPurchase (Sku sku, page, NUMERIC[16,4] n) <- calcQuantityPurchase(sku, page, n) WHERE calcQuantityPurchase(sku, page, n);    
    
    quantityBatchInSku(Sku sk, NUMERIC[16,4] n, page) <- [= GROUP SUM 1 IF currentPrice(Batch batch, PageInventory li) BY sku(batch), currentPrice(batch,li), li](sk,n,page) WHERE currentPrice(sk, page)==n;
    quantityBatchInSkuOst(Sku sk, NUMERIC[16,4] n, page) <- [= GROUP SUM 1 IF currentPrice(Batch bt, PageInventory li) AND prevBalanceB(bt, li) BY sku(bt), currentPrice(bt,li), li](sk,n,page) WHERE currentPrice(sk, page)==n;
    quantityBatchInSkuDvi(Sku sk, NUMERIC[16,4] n, page) <- [= GROUP SUM 1 IF currentPrice(Batch bt, PageInventory li) AND countLedger(bt, li) AND currentPrice(bt, li) BY sku(bt), currentPrice(bt,li), li](sk,n,page) WHERE currentPrice(sk, page)==n;
    
    quantity(page, Batch bt) <- (OVERRIDE [= GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
        BY pageInventory(pageInventoryDetail), batch(pageInventoryDetail)](page,bt), 0.0) WHERE currentPrice(bt,page);
    quantity(page, Sku sk, NUMERIC[16,4] n) <- (OVERRIDE [= GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
        BY pageInventory(pageInventoryDetail), sku(batch(pageInventoryDetail)), currentPrice(batch(pageInventoryDetail), pageInventory(pageInventoryDetail))](page,sk,n), 0.0) 
        WHERE quantityBatchInSku(sk,n,page);
        
    overFillLocal(page);    
}

setCurrentPharmacyListInventory 'Открыть' (Inventory inventory) = {
    fillLocal(pageInventory(inventory));
    currentPharmacyListInventory() <- pageInventory(inventory);
} TOOLBAR CONFIRM IMAGE 'edit.png';

skipCurrentPharmacyListInventory 'Закрыть' () = {
    currentPharmacyListInventory() <- NULL;
} TOOLBAR CONFIRM; 

//создание ивентаризации для аптеки
defaultRetailPharmacyInventoryOperation 'Операция инвентаризации о аптекам' = DATA Operation();
nameDefaultRetailPharmacyInventoryOperation 'Операция инвентаризации о аптекам' = name(defaultRetailPharmacyInventoryOperation());

EXTEND FORM options
    PROPERTIES () nameDefaultRetailPharmacyInventoryOperation
;

DESIGN options {
    pharmacy {
        MOVE PROPERTY(nameDefaultRetailPharmacyInventoryOperation());   
    }
}

overCreatePageInventory = ABSTRACT LIST (PageInventory);

createRetailPharmacyInventory 'Создать инвентаризацию' () = {
    DIALOG departmentStores OBJECTS d INPUT DO {
        NEW in = Inventory {
            include(d, in) <- TRUE;
            date(in) <- currentDate();
            operation(in) <- defaultRetailPharmacyInventoryOperation();
            NEW li = ListInventory {
                stock(li) <- d;
                inventory(li) <- in;
                NEW pi = PageInventory {
                    listInventory(pi) <- li;   
                    overCreatePageInventory(pi); 
                }
	        }
        }
        APPLY {};   
    }
} TOOLBAR IMAGE 'add.png';

FORM inventoryPharmacyDashboard 'Инвентаризационные описи'
    OBJECTS in=Inventory LAST
    PROPERTIES(in) READONLY SHOWIF NOT currentPharmacyListInventory() isPosted , number, series, date, time, nameStock, name, note, quantityShortage, sumShortage
    PROPERTIES (in) SHOWIF NOT currentPharmacyListInventory() setCurrentPharmacyListInventory
    PROPERTIES () SHOWIF NOT currentPharmacyListInventory() createRetailPharmacyInventory TODRAW in
    FILTERS isOpened(in), isDraft(in), isRetailPharmacy(in)
    FILTERS accessCompanyStockCurrentUser(in) OR NOT countStocks(in)
    
    PROPERTIES () SHOWIF currentPharmacyListInventory() filterPrice, filterNameSku, filterBarcode, skipFilters
    OBJECTS li = PageInventory PANEL
    PROPERTIES (li) SELECTOR SHOWIF currentPharmacyListInventory() number, date, nameStock, note
    FILTERS currentPharmacyListInventory()==li
    
    OBJECTS sn = (s=Sku,n=NUMERIC[16,4]) GRID
    PROPERTIES (s) READONLY SHOWIF currentPharmacyListInventory() name, nameCountry, nameManufacturer GRID
    PROPERTIES price=VALUE(n) READONLY SHOWIF currentPharmacyListInventory()
    PROPERTIES (li, s, n) SHOWIF currentPharmacyListInventory() quantity  ON CHANGE changeQuantity(s, li, n)
    PROPERTIES (li, s, n) SHOWIF currentPharmacyListInventory() quantityBlister READONLYIF readOnlyBlisterQuantity(s, li) ON CHANGE changeBlisterQuantity(s, li, n) BACKGROUND backgroundBlisterQuantity(s, li)
    PROPERTIES (s, li, n) READONLY SHOWIF currentPharmacyListInventoryBalanceB() prevBalanceB
    FILTERS filterPrice(s, li), filterNameSku(s), filterBarcode(s)
    
    ORDER name(s)
    FILTERS quantityBatchInSku(s,n,li)
    FILTERGROUP balancessku
        FILTER 'С остатком в аптеке' quantityBatchInSkuOst(s,n,li)
        FILTER 'С движением в аптеке' quantityBatchInSkuDvi(s,n,li) DEFAULT
        FILTER 'В описи' quantity(li, s, n) > 0.0
   
    OBJECTS bt = Batch GRID
    PROPERTIES (bt) READONLY SHOWIF currentPharmacyListInventory() nameSku
    PROPERTIES (bt, li) READONLY SHOWIF currentPharmacyListInventoryBalanceB() prevBalanceB
    PROPERTIES (li, bt) SHOWIF currentPharmacyListInventory() quantity ON CHANGE changeQuantity(bt, li)// QUICKFILTER nameSku(bt)
    PROPERTIES (bt, li) READONLY SHOWIF currentPharmacyListInventory() currentPrice
    PROPERTIES (bt, li) SHOWIF currentPharmacyListInventory() blisterQuantity ON CHANGE changeBlisterQuantity(bt, li) READONLYIF readOnlyBlisterQuantity(bt, li) BACKGROUND backgroundBlisterQuantity(bt, li)
    PROPERTIES (bt, li) READONLY SHOWIF currentPharmacyListInventory() quantityPurchase
    PROPERTIES (bt) READONLY SHOWIF currentPharmacyListInventory() expiryDate, numberDocument, nameManufacturer, nameCountry, nameSupplier, seriesPharmacy 
    ORDER nameSku(bt)
    FILTERS sku(bt)==s AND currentPrice(bt,li)==n
    //FILTERS filterPrice(bt, li), filterNameSku(bt), filterBarcode(bt)
    FILTERGROUP balances
        FILTER 'С остатком в аптеке' prevBalanceB(bt, li)
        FILTER 'С движением в аптеке' countLedger(bt, li) AND currentPrice(bt, li)
    PROPERTIES () SHOWIF currentPharmacyListInventory() skipCurrentPharmacyListInventory TOOLBAR TODRAW li
     
    OBJECTS          dp=PageInventoryDetail GRID
    PROPERTIES (dp)  READONLY SHOWIF currentPharmacyListInventory() index, nameSkuTypeSku, idBarcodeSku, nameSku, idBatch, nameBatch, 
                              quantity, price, sum
    FILTERS pageInventory(dp)==li
;

DESIGN inventoryPharmacyDashboard {
    NEW inventories {
        type = CONTAINERH; 
        fill = 1;
        MOVE BOX(in);
    }
    NEW inventory {
        type = CONTAINERH;
        MOVE PROPERTY(date(li)) { focusable = FALSE; font = '18'; charWidth = 7;};
        MOVE PROPERTY(number(li)) { focusable = TRUE; font = '18'; charWidth = 8;};
        MOVE PROPERTY(nameStock(li)) { focusable = FALSE; font = '18'; charWidth = 12;};
        MOVE PROPERTY(note(li)) { focusable = FALSE; font = '18'; charWidth = 15;};
        MOVE PROPERTY(skipCurrentPharmacyListInventory()) { focusable = TRUE; font = '18'; charWidth = 15;}; 
    }
    NEW header {
        type = CONTAINERH;
        MOVE PROPERTY(filterPrice()){ caption = 'Ввести цену'; panelCaptionAbove = TRUE; font = 'bold 22'; changeKey = 'F5'; }
        MOVE PROPERTY(filterNameSku()){ caption = 'Ввести наименование'; panelCaptionAbove = TRUE; font = 'bold 22'; changeKey = 'F3'; }
        MOVE PROPERTY(filterBarcode()){ caption = 'Ввести штрих код'; panelCaptionAbove = TRUE; font = 'bold 22'; changeKey = 'F4'; }
        MOVE PROPERTY(skipFilters()){ panelCaptionAbove = TRUE; fontSize = 14; }
    }
    NEW tabbed {
        type = TABBED;
        fill = 2;
        NEW sku {
            caption = 'Товар';
            type = CONTAINERV;
            fill = 1;
            MOVE BOX(sn) {
                fill = 2.5;
                PROPERTY(name(s)) { focusable = TRUE; font = '18'; charWidth = 45;}
                PROPERTY(nameCountry(s)) { focusable = TRUE; font = '18'; charWidth = 10;}
                PROPERTY(nameManufacturer(s)) { focusable = TRUE; font = '18'; charWidth = 15;}
                PROPERTY(price) { caption = 'Цена'; focusable = TRUE; font = '18'; charWidth = 10;}
                PROPERTY(quantity(li, s, n)) { focusable = TRUE; font = '18'; charWidth = 5; background = #D4FFD4;}
                PROPERTY(quantityBlister(li, s, n)) { focusable = TRUE; font = '18'; charWidth = 5; background = #D4FFD4;}
                PROPERTY(prevBalanceB(s, li, n)) { focusable = FALSE; font = '18'; charWidth = 5;}
            
            }
            MOVE BOX(bt) {
                fill = 1;
                PROPERTY(nameSku(bt)) { focusable = FALSE; font = '18'; charWidth = 45;}
                PROPERTY(prevBalanceB(bt, li)) { focusable = TRUE; font = '18'; charWidth = 3;}
                PROPERTY(quantity(li, bt)) { focusable = TRUE; font = '18'; charWidth = 3; background = #D4FFD4;}
                PROPERTY(quantityPurchase(bt, li)) { focusable = TRUE; font = '18'; charWidth = 3;}
                PROPERTY(blisterQuantity(bt, li)) { focusable = TRUE; font = '18'; charWidth = 3;}
                PROPERTY(currentPrice(bt, li)) { focusable = TRUE; font = '18'; charWidth = 3;}
                PROPERTY(numberDocument(bt)) { focusable = FALSE; font = '18'; charWidth = 7;}
                PROPERTY(expiryDate(bt)) { focusable = FALSE; font = '18'; charWidth = 7;}
                PROPERTY(seriesPharmacy(bt)) { focusable = FALSE; font = '18'; charWidth = 5;}
                PROPERTY(nameManufacturer(bt)) { focusable = FALSE; font = '18'; charWidth = 15;}
                PROPERTY(nameCountry(bt)) { focusable = FALSE; font = '18'; charWidth = 8;}
                PROPERTY(nameSupplier(bt)) { focusable = FALSE; font = '18'; charWidth = 8;}
            }
        }
        MOVE BOX(dp); 
    }
    MOVE TOOLBARBOX;    
}

@extendFormFilterRoleAccess(inventory, in, inventoryPharmacyDashboard);

NAVIGATOR {
    retailDashboardNavigator {
        NEW inventoryPharmacyDashboard;
    }
}