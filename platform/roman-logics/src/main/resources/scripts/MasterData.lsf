MODULE RomanMasterData;

REQUIRE System,
        Stock,
        Store,
        I18n,
        LegalEntityBy,
        Barcode,
        RetailCRM,
        StockDocument,
        Employee,
        UserPriceChange,
        Contract,
        Supplier,
        POS,
        Warehouse,
        Company,
        RomanLogicsModule;

PRIORITY Stock, LegalEntity, Store, RomanLogicsModule;

NAMESPACE MasterData;

//--------------------------------- Дисконтные группы -------------------------------------------//

nameSkuGroup(group) += name(group) IF group IS Category;

inDiscountSkuGroupSku (discountSkuGroup, sku) += brandSupplierArticleSku(sku) == discountSkuGroup;
roundGroupSku(sku) += brandSupplierArticleSku(sku);
roundPriceCurrencyArticle 'Округление для артикула' (price, currency, article) = roundPriceCurrencyRoundGroup(price, currency, brandSupplierArticle(article));
// для фильтров

inArticleSku(article, sku) = articleSku(sku) == article;

inBrandSupplier (supplier, brandSupplier) = supplierBrandSupplier(brandSupplier) == supplier;
inArticleBrand (brandSupplier, article) = brandSupplierArticle(article) == brandSupplier;
inSkuBrand(brandSupplier, sku) = brandSupplierArticleSku(sku) == brandSupplier;

inCategorySupplierSupplier (supplier, categorySupplier) = supplierCategorySupplier(categorySupplier) == supplier;

inSubCategorySupplierCategorySupplier (categorySupplier, subCategorySupplier) = categorySupplierSubCategorySupplier(subCategorySupplier) == categorySupplier;
inArticleSubCategorySupplier (subCategorySupplier, article) = subCategorySupplierArticle(article) == subCategorySupplier;
inArticleCategorySupplier (categorySupplier, article) = categorySupplierArticle(article) == categorySupplier;

inArticleCategory (category, article) = categoryArticle(article) == category OR
                                        article == article AND NOT category;

inSkuCategory (category, sku) = categoryArticleSku(sku) == category OR
                                sku == sku AND NOT category;

//stringEqualsAll(string) = string == 'Все';

inSupplierBrandArticle(supplier, brand, article) = brandSupplierArticle(article) == brand AND supplier IS Supplier OR
                                                   supplierArticle(article) == supplier AND NOT brand OR
                                                   article == article AND NOT supplier AND NOT brand;

inSupplierBrandSku(supplier, brand, sku) = brandSupplierArticleSku(sku) == brand AND supplier IS Supplier OR
                                           supplierArticleSku(sku) == supplier AND NOT brand OR
                                           sku == sku AND NOT supplier AND NOT brand;

inCategorySupplierSubCategorySupplierArticle(categorySupplier, subCategorySupplier, article) = subCategorySupplierArticle(article) == subCategorySupplier AND categorySupplier IS CategorySupplier OR
                                                                                               categorySupplierArticle(article) == categorySupplier AND NOT subCategorySupplier OR
                                                                                               article == article AND NOT categorySupplier AND NOT subCategorySupplier;

inSeasonSeasonYear (season, seasonYear) = seasonSeasonYear(seasonYear)==season;

// подбор курса обмена валют
META defineNearestRateExchangeObject(object, typeEx, typeCur, propDate, group)
    @defineNearestRateExchangeObjectInner(object, ###object, typeEx, typeCur, propDate, group);
END

META defineNearestRateExchangeObjectInner(object, class, typeEx, typeCur, propDate, group)

    nearestPredDate###typeEx###typeCur###object(object) = GROUP MAX date IF rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), date) AND date <= propDate(object) AND date IS DATE BY object;

    rateExchange###typeEx###typeCur###object 'Курс обмена' (object) = rateExchange(typeExchange###typeEx###object(object), currency###typeCur###object(object), nearestPredDate###typeEx###typeCur###object(object)) IF object IS class IN group;

END

priceRateDocumentSku(document, sku) <- priceRateOriginDocumentSku(document, sku) WHEN CHANGED(date(document) AND sku IS Sku) OR
                                                                                      CHANGED(currencyDocument(document) AND sku IS Sku) OR
                                                                                      CHANGED(quantityDocumentSku(document, sku)) ;

//------------------------ Приведение штрих-кодов RomanLogicsModule к логике Barcode.lsf -----------------------------//

syncBarcodeSku 'Синхронизировать штрих-код' (sku) = ACTION (sku) {
//    SET dataBarcodeIdDate(barcode, date) IF barcode == barcode(sku AS RomanLogicsModule.Sku) AND date == 2001_01_01 NOT NULL;

    LOCAL syncBarcode = Barcode();
    SET syncBarcode() <- [GROUP MAX barcode BY skuBarcode(barcode)](sku AS RomanLogicsModule.Sku); //dataBarcodeIdDate(barcode(sku), 2001_01_01);
    IF TRUE IF NOT syncBarcode() IS Barcode THEN {
        ADDOBJ Barcode;
        SET syncBarcode() <- addedObject();
        SET skuBarcode(barcode) <- sku AS RomanLogicsModule.Sku WHERE barcode == syncBarcode();
    }

    SET idBarcode(barcode) <- barcode(sku AS RomanLogicsModule.Sku) WHERE barcode == syncBarcode();
} IN base;

WHEN CHANGED(barcode(sku)) AND sku IS RomanLogicsModule.Sku DO EXEC syncBarcodeSku(sku);

EXTEND FORM migrationData
    OBJECTS s = Sku
    PROPERTIES(s) READONLY nameSku, barcode FORCE GRID, idBarcodeSku
    PROPERTIES(s) syncBarcodeSku
;
EXTEND DESIGN migrationData {
    pane {
        ADD s.box;
    }
}

// ---------------------------------- Формы изменения атрибутов ------------------------------------- //
TABLE category (Category);

nameCategory 'Наименование' = DATA ISTRING[150](Category);

TABLE categoryCategory(Category, Category);
@defineHierarchy(category);

FORM category 'Товарная группа'
    OBJECTS g = Category FIXED PANEL
    PROPERTIES(g) nameParentCategory, name, nameOrigin, nameTypeInvoiceCategory, warrantyCategory, nameUnitOfMeasureCategory, necessaryStampCategory

    OBJECTS l = Language
    PROPERTIES nameLanguage(l) READONLY, languageName(g, l)

    EDIT Category OBJECT g
;

DESIGN category FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;
        ADD g.box {
            childConstraints = TO THE BOTTOM;
            NEW row1 {
                title = 'Родитель';
                ADD PROPERTY (nameParentCategory);
            }
            NEW row2 {
                childConstraints = TO THE RIGHT;
                title = 'Название';
                ADD PROPERTY (name);
                ADD PROPERTY (nameOrigin);
            }
            NEW row3 {
                title = 'Доп. информация';
                childConstraints = TO THE RIGHT;
                ADD PROPERTY (nameTypeInvoiceCategory) {preferredCharWidth = 15;}
                ADD PROPERTY (warrantyCategory);
                ADD PROPERTY (nameUnitOfMeasureCategory) {preferredCharWidth = 15;}
                ADD PROPERTY (necessaryStampCategory);
            }
        };
        ADD l.box;
    }
    ADD functions.box;
}

addCategory 'Добавить' = ACTION (category) NEWSESSION {
    ADDOBJ Category;
    FOR g == addedObject() DO {
        SET parentCategory(g) <- category AS Category;
        FORM category OBJECTS g=addedObject() MODAL;
        IF formResult() == FormResult.ok THEN
            EXEC apply();
    };
} TOOLBAR IMAGE 'add.png' EDITKEY 'INSERT';


FORM categories 'Товарные группы'
    TREE treeGroups g=Category PARENT parentCategory
    PROPERTIES READONLY name(g)
    PROPERTIES(g) addCategory, EDITFORM
    ORDER BY name

    OBJECTS c = Category
    PROPERTIES(c) READONLY name, canonicalNameCategory, nameOrigin, nameTypeInvoiceCategory, warrantyCategory, nameUnitOfMeasureCategory, necessaryStampCategory, nameParentCategory
    PROPERTIES(c) DELETE

    ORDER BY canonicalNameCategory

    FILTERGROUP filters
        FILTER 'Все листья' 'F10' isParentLeafCategoryCategory(c, g) DEFAULT
        FILTER 'Всех потомков' 'F9' isParentCategoryCategory(c, g)
        FILTER 'Только непосредственных потомков' 'F8' parentCategory(c) == g

    DIALOG Category OBJECT c
;

DESIGN categories FROM DEFAULT {

    NEW topContainer {
        childConstraints = TO THE RIGHT;
        type = SPLITH;

        ADD treeGroups.tree.box;

        ADD c.box {
            fillHorizontal = 4;
            c.grid { defaultComponent = TRUE; }
        }
    }

    ADD functions.box;
}

// ---------------------------------- Формы для выбора атрибутов ------------------------------------ //

FORM gender 'Пол'
    OBJECTS g = Gender FIXED PANEL
    PROPERTIES(g) sidGender

    OBJECTS l= Language
    PROPERTIES(l) READONLY nameLanguage
    PROPERTIES(g, l) languageName

    EDIT Gender OBJECT g;
;

FORM genders 'Пол'
    OBJECTS g = Gender FIXED PANEL
    PROPERTIES(g) sidGender

    PROPERTIES(g) ADDFORM, EDITFORM, DELETE
    DIALOG Gender OBJECT g
;

FORM gendersDialog 'Пол'

    OBJECTS g = Gender
    PROPERTIES(g) READONLY sidGender
    PROPERTIES(g) ADDFORM, EDITFORM, DELETE
    DIALOG Gender OBJECT g;
;

FORM typeFabric 'Тип одежды'

    OBJECTS t = TypeFabric FIXED PANEL
    PROPERTIES(t) name

    OBJECTS l= Language
    PROPERTIES(l) READONLY nameLanguage
    PROPERTIES(t, l) languageName

    EDIT TypeFabric OBJECT t;
;

FORM typeFabrics 'Типы одежды'
    OBJECTS t = TypeFabric
    PROPERTIES(t) READONLY name
    PROPERTIES(t) ADDFORM, EDITFORM, DELETE
    DIALOG TypeFabric OBJECT t
;

FORM seasonYear 'Сезон'

    //OBJECTS ss = Season FIXED PANEL
    //PROPERTIES(ss) name

    OBJECTS s = SeasonYear FIXED PANEL
    PROPERTIES(s) nameSeasonSeasonYear, yearSeasonYear, nameSeasonYear

    EDIT SeasonYear OBJECT s;
;

FORM seasonYears 'Сезоны'
    OBJECTS ss = Season
    PROPERTIES(ss) READONLY name
    OBJECTS s = SeasonYear
    PROPERTIES(s) READONLY nameSeasonSeasonYear, yearSeasonYear, nameSeasonYear
    PROPERTIES(s) ADDFORM, EDITFORM, DELETE
;

FORM dialogSeasonYear 'Сезон'
    OBJECTS s = SeasonYear
    PROPERTIES(s) READONLY nameSeasonSeasonYear, yearSeasonYear, nameSeasonYear
    PROPERTIES(s) ADDFORM, EDITFORM, DELETE
    DIALOG SeasonYear OBJECT s;
;

FORM unitOfMeasures 'Единицы измерений'
    OBJECTS u = UnitOfMeasure
    PROPERTIES(u) READONLY nameUOM, shortNameUOM, nameOrigin
    DIALOG UnitOfMeasure OBJECT u
;

FORM typeLabel 'Тип этикетки'
    OBJECTS tl = TypeLabel FIXED PANEL
    PROPERTIES(tl) name, sidTypeLabel
    EDIT TypeLabel OBJECT tl
;

FORM typeLabels 'Типы этикеток'
    OBJECTS tl = TypeLabel
    PROPERTIES(tl) READONLY name, sidTypeLabel
    PROPERTIES(tl) ADDFORM, EDITFORM, DELETE
    DIALOG TypeLabel OBJECT tl;
;

//----------------------Определения себестоимости при создании оптового прайса  ----------------------//

// todo : это нужно убрать
priceCustomBatch 'Себестоимость (БУ)' (batch) = ABSTRACT NUMERIC[14,2] (Batch) PERSISTENT;
priceManagerialBatch 'Себестоимость (УУ)' (batch) = ABSTRACT NUMERIC[14,2] (Batch) PERSISTENT;


concatPriceCustomBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) IF priceCustomBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceCustomArticleDateTime (article, dateTime) = concatPriceCustomBatchArticleDateTime(article, dateTime)[2];
priceCustomDateTime(article, dateTime) = priceCustomBatch(batchPriceCustomArticleDateTime(article, dateTime));


concatPriceManagerialBatchArticleDateTime (article, dateTime) = GROUP MAX orderBatch(batch) IF priceManagerialBatch(batch) AND
                                                                dateTimeBatch(batch) < (dateTime AS DATETIME)
                                                                BY articleSku(skuBatch(batch)), dateTime;

batchPriceManagerialArticleDateTime (article, dateTime) = concatPriceManagerialBatchArticleDateTime(article, dateTime)[2];
priceManagerialDateTime(article, dateTime) = priceManagerialBatch(batchPriceManagerialArticleDateTime(article, dateTime));


//--------------------------------- Склады временного хранения -------------------------------------------//

TABLE customStore (CustomStore);
warehouseGroupCustomStore = DATA WarehouseGroup(CustomStore);
nameWarehouseGroupCustomStore 'Группа складов' (customStore) = nameWarehouseGroup(warehouseGroupCustomStore(customStore));

stockGroupStock (stock) += warehouseGroupCustomStore(stock);

legalEntityStock(stock) += legalEntityCustomStore(stock);

allowImportExportXLSLegalEntityUA 'Разрешить импорт/экспорт из/в Excel(Украина)' = DATA BOOLEAN (LegalEntity) IN lawGroup;
allowImportExportXMLLegalEntityBY 'Разрешить импорт/экспорт из/в XML(Беларусь)' = DATA BOOLEAN (LegalEntity) IN lawGroup;

FORM customStore 'Склад временного хранения'

    OBJECTS c=CustomStore FIXED PANEL

    PROPERTIES(c) name, nameLegalEntityStock, nameWarehouseGroupCustomStore //fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  //UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  //addressLegalEntity, dialogAddressLegalEntity,
                  //postAddressLegalEntity, dialogPostAddressLegalEntity,
                  //managerLegalEntity, dialogManagerLegalEntity,
                  //accountantLegalEntity, dialogAccountantLegalEntity,
                  //phoneLegalEntity, dialogPhoneLegalEntity,
                  //emailLegalEntity, siteLegalEntity, allowImportExportXLSLegalEntityUA, allowImportExportXMLLegalEntityBY

    EDIT CustomStore OBJECT c
;

DESIGN customStore FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        c.box {
            childConstraints = TO THE BOTTOM;

//            NEW row1 {
//                childConstraints = TO THE RIGHT;
//                ADD c.lawGroup{
//                    childConstraints = TO THE BOTTOM;
//                }
//            }
//            NEW row2{
//                childConstraints = TO THE RIGHT;
//                ADD c.contactGroup {
//                    childConstraints = TO THE BOTTOM;
//                }
//                ADD c.managementGroup {
//                    childConstraints = TO THE BOTTOM;
//                }
//                ADD c.docGroup {
//                    childConstraints = TO THE BOTTOM;
//                }
//            }
        }

        ADD functions.box;
    }
}

FORM customStores 'Склады временного хранения'

    OBJECTS c=CustomStore

    PROPERTIES(c) READONLY name, nameLegalEntityStock, nameWarehouseGroupCustomStore//, fullNameLegalEntity, nameOwnershipLegalEntity, shortNameOwnershipLegalEntity,
                  //UNPLegalEntity, OKPOLegalEntity, OKYLPLegalEntity,
                  //addressLegalEntity, postAddressLegalEntity, managerLegalEntity, accountantLegalEntity, phoneLegalEntity,
                  //emailLegalEntity, siteLegalEntity, allowImportExportXLSLegalEntityUA, allowImportExportXMLLegalEntityBY

    PROPERTIES(c) ADDFORM, EDITFORM, DELETE

;

EXTEND FORM company
    PROPERTIES(co) nameOrigin, addressOriginSubject, addressSubject, contractImporter, sidImporter
;

EXTEND DESIGN company {
    co.box {
        NEW column3 {
            title = 'Данные для Sintitex';
            childConstraints = TO THE BOTTOM;

            ADD PROPERTY (nameOrigin(co));
            ADD PROPERTY (addressOriginSubject(co));
            ADD PROPERTY (addressSubject(co));
            ADD PROPERTY (contractImporter(co));
            ADD PROPERTY (sidImporter(co));
        }
    }
}


@extendStockFormStockDocumentLedger(warehouse, w);
@extendStockFormStockDocumentLedger(departmentStore, d);

//----------------------------Concat для фрахта и декларации--------------------------//

canonicalBrandFreight 'Бренды' (freight) = toString255(
    [GROUP CONCAT name(brandSupplier) IF quantityFreightBrandSupplier(freight, brandSupplier), ' , '
           BY freight
           ORDER brandSupplier](freight))
    MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;


@defineNumeratedObjectDefault(Freight, 'Нумератор для фрахтов', 'ФР');

EXTEND FORM freightListForm
    PROPERTIES (freight) READONLY numberObject BEFORE date, seriesObject BEFORE date, canonicalBrandFreight BEFORE date
;

FORM skuDialog 'SKU'

    OBJECTS s=Sku

    PROPERTIES(s) FORCE GRID READONLY barcode, nameSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku, shortNameUOMSku,
                                      nameSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem, nameColorSupplierItem

    DIALOG Sku OBJECT s
;

//----------------------------- для печати маркировок ----------------------------------------------------------------//

nameImporterSku 'Наименование' (importer, sku) = nameLegalEntity(importer) IF importer IS LegalEntity AND sku IS Sku;
addressImporterSku 'Адрес' (importer, sku) = addressLegalEntity(importer) IF importer IS LegalEntity AND sku IS Sku;

localeLanguageCompany (company) = localeLanguage(languageLegalEntity(company));
mainCompositionSkuCompany 'Состав (иностр.)' (sku, company) = mainCompositionSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
additionalCompositionSkuCompany 'Доп. состав (иностр.)' (sku, company) = additionalCompositionSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
nameCategoryArticleSkuCompany 'Номенклатурная группа' (sku, company)= nameCategoryArticleSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
sidGenderArticleSkuCompany 'Пол' (sku, company) = sidGenderArticleSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 10 MAXCHARWIDTH 30 PREFCHARWIDTH 30;
nameCountrySkuCompany 'Страна (сделано в)' (sku, company) = nameCountrySkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
nameCountryBrandSupplierSkuCompany 'Страна поставки' (sku, company) =nameCountryBrandSupplierSkuLanguage(sku, languageLegalEntity(company)) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;

META defineCompositionSkuLanguageDetailCustom (detail, stockProp)
    mainComposition###detail 'Состав (иностр.)' (detail) = mainCompositionSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    additionalComposition###detail 'Доп. состав (иностр.)' (detail) = additionalCompositionSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    nameCategoryArticle###detail 'Номенклатурная группа' (detail)= nameCategoryArticleSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    sidGenderArticle###detail 'Пол' (detail) = sidGenderArticleSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 10 MAXCHARWIDTH 30 PREFCHARWIDTH 30;
    nameCountry###detail 'Страна (сделано в)' (detail) = nameCountrySkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;
    nameCountryBrandSupplier###detail 'Страна поставки' (detail) = nameCountryBrandSupplierSkuLanguage(sku###detail(detail), languageStock(stockProp###detail(detail))) MINCHARWIDTH 20 MAXCHARWIDTH 50 PREFCHARWIDTH 50;

END

//-------------------------------- НДС на кассе ------------------------- //

overVATRetailSkuDepartmentStoreDateTime(sku, departmentStore, dateTime) += retailVATBSkuDepartmentStoreDateTime(sku, departmentStore, dateTime);

//@implementSkuLedger(userPriceChange, sku, departmentStore);
//quantityInLIFOSkuLedger (ledger) += quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger);
//limitInLIFOSkuLedgerBatch (ledger, batch) +=  (quantityUserPriceChangeDetail(ledger) (-) quantityUserPriceChangeDetail(ledger)) AND  batch IS Batch;
//sumInSkuLedger(ledger) += (retailPriceUserPriceChangeDetail(ledger) (-) curRetailPriceUserPriceChangeDetail(ledger))*quantityUserPriceChangeDetail(ledger);

// ------------------------------- Добавление объектов правильных классов -------------------- //

// Магазины
addRomanStore 'Добавить' = ACTION () NEWSESSION {
    FOR ADDOBJ st = RomanLogicsModule.Store DO {
        FORM store OBJECTS s = st MANAGESESSION DOCKEDMODAL;
    }
} EDITKEY 'INSERT' IMAGE 'add.png' TOOLBAR;

EXTEND FORM stores
    PROPERTIES() addRomanStore TODRAW s FORCE PANEL;
;

EXTEND DESIGN stores {
    REMOVE PROPERTY(addForm_Store_Store);
    //s.filters { ADD PROPERTY(addRomanStore) BEFORE PROPERTY(editFormStore_store); }
}

FORM destinations 'Магазины'
    OBJECTS d=Destination
    PROPERTIES(d) READONLY name, nameStoreTypeStore, nameLegalEntityStore, nameRegionStore
    DIALOG Destination OBJECT d
;

//Единицы измерения

addRomanUOM 'Добавить' = ACTION () NEWSESSION {
    FOR ADDOBJ um = RomanLogicsModule.UnitOfMeasure DO {
        FORM UOM OBJECTS u = um MANAGESESSION DOCKEDMODAL;
    }
} EDITKEY 'INSERT' IMAGE 'add.png' TOOLBAR;

EXTEND FORM UOMs
    PROPERTIES() addRomanUOM TODRAW u FORCE PANEL;
;

EXTEND DESIGN UOMs {
    REMOVE PROPERTY(addForm_Stock_UOM);
}


// ------------------------------------------------------------ Глобальные параметры --------------------------------- //
imageLabel 'Картинка' = DATA IMAGEFILE ();
loadImageLabel 'Загрузить изображение' () = ACTION LOADFILE imageLabel();

EXTEND FORM options
    PROPERTIES() barcodePrefix,
                 nameDictionaryComposition, nameDictionaryName,
                 nameTypeExchangeSTX, nameTypeExchangeCustom, //nameTypeExchangePayCustom, nameTypeExchangePayManagerial,
                 nameCurrencyPayFreights, nameCurrencyCustom,
                 NDSPercentCustom, percentCostFreights, tariffVolumeFreights,
                 sidTypeDutyDuty, nameTypeDutyDuty, sidTypeDutyNDS, nameTypeDutyNDS,
                 sidTypeDutyRegistration, nameTypeDutyRegistration, imageLabel, loadImageLabel
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(barcodePrefix);
        ADD PROPERTY(nameDictionaryComposition);
        ADD PROPERTY(nameDictionaryName);
        ADD PROPERTY(nameTypeExchangeSTX);
        ADD PROPERTY(nameTypeExchangeCustom);
        //ADD PROPERTY(nameTypeExchangePayCustom);
        //ADD PROPERTY(nameTypeExchangePayManagerial);
        ADD PROPERTY(nameCurrencyPayFreights);
        ADD PROPERTY(nameCurrencyCustom);
        ADD PROPERTY(NDSPercentCustom);
        ADD PROPERTY(percentCostFreights);
        ADD PROPERTY(tariffVolumeFreights);
        ADD PROPERTY(sidTypeDutyDuty);
        ADD PROPERTY(nameTypeDutyDuty);
        ADD PROPERTY(sidTypeDutyNDS);
        ADD PROPERTY(nameTypeDutyNDS);
        ADD PROPERTY(sidTypeDutyRegistration);
        ADD PROPERTY(nameTypeDutyRegistration);
        ADD PROPERTY(imageLabel);
        ADD PROPERTY(loadImageLabel);
    }
}

EXTEND FORM migrationData

    OBJECTS l = Language FIXED PANEL
    PROPERTIES(l) SELECTOR nameLanguage

    OBJECTS m = MultiLanguageNamed
    PROPERTIES(m) objectClassName TODRAW m FORCE GRID
    PROPERTIES(m) name TODRAW m FORCE GRID
    PROPERTIES(m, l) languageName

;

EXTEND DESIGN migrationData {
    pane {
        NEW lm {
            caption = 'Перевод';
            ADD l.box{
                caption = 'Язык перевода(иностр.)';
            }
            ADD m.box{
                caption = 'Наименования';
            }
        }
    }
}

//------------------------ Для учета рекламных материалов---------------------------------//
boxInvoiceAddFormInvoice 'Добавить' (supplier) = ACTION (supplier) NEWSESSION {
    FOR ADDOBJ i = RomanLogicsModule.BoxInvoice DO {
        SET supplierDocument (i) <- supplier AS Supplier;
        FORM boxInvoiceEditForm OBJECTS invoice = i MANAGESESSION DOCKEDMODAL;
    }
} EDITKEY 'INSERT' IMAGE 'add.png' TOOLBAR;

EXTEND FORM boxInvoiceForm
    PROPERTIES(supplier) boxInvoiceAddFormInvoice TODRAW invoice FORCE PANEL
;

simpleInvoiceAddFormInvoice 'Добавить' (supplier) = ACTION (supplier) NEWSESSION {
    FOR ADDOBJ i = RomanLogicsModule.SimpleInvoice DO {
        SET supplierDocument (i) <- supplier AS Supplier;
        FORM simpleInvoiceEditForm OBJECTS invoice = i MANAGESESSION DOCKEDMODAL;
        }
    } EDITKEY 'INSERT' IMAGE 'add.png' TOOLBAR;

EXTEND FORM simpleInvoiceForm
    PROPERTIES(supplier) simpleInvoiceAddFormInvoice TODRAW invoice FORCE PANEL

;