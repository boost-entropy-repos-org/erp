MODULE Return;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        DocumentTransfer,
        RomanSale,
        ConsignmentBy,
        ContractCompany,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Возврат ------------------------------------ //

CLASS ReturnOut 'Возврат товаров по накладным' : Historizable, NumberedObject, OutStockDocumentLedger, InnerDocument;
CLASS ReturnOutPosted 'Проведенный возврат товаров по накладным' : ReturnOut, PostedObject;
CLASS ReturnOutDetail 'Строка возврата товаров по накладным';

@defineDocumentTransferOut(return, 'Возврат товаров по накладным', sku, stock);
@defineDocumentFormTransferOut(return, 'Возврат товаров по накладным');

CONSTRAINT legalEntityStockReturnOut(returnOut) == destinationLegalEntityStockReturnOut(returnOut) CHECKED BY destinationStockReturnOut
    MESSAGE 'Возврат товаров должна идти между складами разных компаний';

@defineDocumentDetailSkuArticle(returnOut);
@extendFormDocumentDetailSkuArticle(returnOut, d, returnOut);
@extendFormDocumentDetailSkuArticleReadonly(returnOuts, d, returnOut);

@defineDocumentCurrency(returnOut);
@deriveDocumentCurrency(returnOut, stock);

@defineDocumentContract(ReturnOut, contractSku, destinationLegalEntityStock, legalEntityStock, singleContractSkuSupplierCustomer,
                        'Сторона A договора возврата товаров не соответствуют компании склада-отправителя',
                        'Сторона B договора возврата товаров не соответствуют компании склада-получателя');

EXTEND FORM returnOut
    PROPERTIES(t) seriesNumberContractSkuReturnOut, isCommissionReturnOut
;

EXTEND FORM returnOuts
    PROPERTIES(t) isCommissionReturnOut
;

saleInBatchDetailReturnOutDetail = DATA SaleInBatchDetail (ReturnOutDetail);
descriptionBatchReturnOutDetail 'Партия' (returnOutDetail) = descriptionBatch(saleInBatchDetailReturnOutDetail(returnOutDetail));

CONSTRAINT skuBatch(saleInBatchDetailReturnOutDetail(detail)) != skuReturnOutDetail(detail) CHECKED BY saleInBatchDetailReturnOutDetail
    MESSAGE 'Партия строки возврата должна соответствовать SKU строки возврата';

CONSTRAINT contractSkuReturnOut(returnOutReturnOutDetail(detail)) != contractSkuSaleInBatchDetail(saleInBatchDetailReturnOutDetail(detail)) CHECKED BY saleInBatchDetailReturnOutDetail
    MESSAGE 'Договор партии строки возврата должен соответствовать договору возврата';

currentBalanceBatchReturnOutDetail 'Текущий остаток' (batch, returnOutDetail) = currentBalanceBatchStock(batch, stockReturnOut(returnOutReturnOutDetail(returnOutDetail)));
currentBalanceReturnOutDetail 'Текущий остаток' (returnOutDetail) = currentBalanceBatchReturnOutDetail(saleInBatchDetailReturnOutDetail(returnOutDetail), returnOutDetail);

FORM saleInBatchDetailDialog 'Партия'

    OBJECTS rd = ReturnOutDetail FIXED PANEL

    OBJECTS bt = SaleInBatchDetail
    PROPERTIES (bt) READONLY nameSkuBatch, nameStockBatch, descriptionBatch, nameOwnerBatchA, numberCommissionContractSkuBatchA,
                            importerPriceBatchA, supplierPriceBatchA, numberSupplierVATBatchA, valueSupplierVATBatchA

    PROPERTIES(bt, rd) READONLY currentBalanceBatchReturnOutDetail
    FILTERGROUP balanceFilters
            FILTER 'Товары с остатком' 'F10' currentBalanceBatchReturnOutDetail(bt, rd) != 0 DEFAULT

    FILTERS skuBatch(bt) == skuReturnOutDetail(rd) AND
            contractSkuReturnOut(returnOutReturnOutDetail(rd)) == contractSkuSaleInBatchDetail(bt)
;

dialogBatchReturnOutDetail 'Партия' (returnOutDetail) = ACTION (returnOutDetail) {
    FORM saleInBatchDetailDialog OBJECTS rd = returnOutDetail MODAL;
    IF formResult() == FormResult.ok THEN {
        SET saleInBatchDetailReturnOutDetail(returnOutDetail) <- chosenObject('bt');
    }
}


EXTEND FORM returnOut
    PROPERTIES(d) descriptionBatchReturnOutDetail ON CHANGE dialogBatchReturnOutDetail(d) BEFORE deleteod, currentBalanceReturnOutDetail READONLY BEFORE deleteod
;

EXTEND FORM returnOuts
    PROPERTIES(d) READONLY descriptionBatchReturnOutDetail
;

@defineDocumentRetailPrice(returnOut, d);

isCommissionReturnOutDetail(detail) = isCommissionReturnOut(returnOutReturnOutDetail(detail));

useRetailPriceReturnOutDetail(detail) = [stockReturnOutDetail(detail) IS DepartmentStore
    AND NOT costLedgerDepartmentStore(stockReturnOutDetail(detail))](detail)
    OR isCommissionReturnOutDetail(detail);
@defineDocumentTransferAccount(returnOut, useRetailPriceReturnOutDetail);

@defineDocumentSkipSkuLedgerCustom(returnOut, returnOutDetail);
@extendFormDocumentSkipSkuLedgerCustom(returnOut, t, returnOut);
@extendFormDocumentSkipSkuLedgerCustomReadonly(returnOuts, t, returnOut);

// Проводим по регистру
@implementSkuLedgerOutFIFO(ReturnOutDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityReturnOutDetail (ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += quantityReturnOutDetail(ledger) IF batch == saleInBatchDetailReturnOutDetail(ledger);
changedDataSkuLedger(ledger) += CHANGED(saleInBatchDetailReturnOutDetail(ledger));
sumOutSkuLedger(ledger) += accountSumReturnOutDetail(ledger);
skipSkuLedger (ledger) += skipSkuLedgerReturnOutDetail(ledger);

@defineConstraintSkuLedgerCosted(returnOut, 'Не хватает остатков по партиям для возврата товаров');

// Товарные накладные

@defineConsignmentHeader(returnOut);
@implementConsignmentHeader(ReturnOut);

supplierConsignment (consignment) += legalEntityStockReturnOut(consignment);
supplierStockConsignment (consignment) += stockReturnOut(consignment);
customerConsignment (consignment) += destinationLegalEntityStockReturnOut(consignment);
customerStockConsignment (consignment) += destinationStockReturnOut(consignment);

EXTEND CLASS ReturnOutDetail : ConsignmentDetail;
consignmentConsignmentDetail (consignmentDetail) += returnOutReturnOutDetail (consignmentDetail);
skuConsignmentDetail (consignmentDetail) += skuReturnOutDetail (consignmentDetail);
quantityConsignmentDetail (consignmentDetail) += quantityReturnOutDetail (consignmentDetail);

supplierSumReturnOutDetailC (returnOutDetail) = retailPriceReturnOutDetail(returnOutDetail)* quantityReturnOutDetail (returnOutDetail);
supplierSumReturnOutDetailS (returnOutDetail) = supplierPriceBatchA(saleInBatchDetailReturnOutDetail(returnOutDetail))* quantityReturnOutDetail (returnOutDetail);
sumVATReturnOutDetailS (returnOutDetail) =  [round0(X*Y/100)](supplierSumReturnOutDetailS(returnOutDetail),
    valueSupplierVATBatchA(saleInBatchDetailReturnOutDetail(returnOutDetail)));

priceConsignmentDetail (consignmentDetail) += IF isCommissionReturnOutDetail(consignmentDetail) THEN retailPriceReturnOutDetail(consignmentDetail)
    ELSE supplierPriceBatchA(saleInBatchDetailReturnOutDetail(consignmentDetail));

sumConsignmentDetail (consignmentDetail) += IF isCommissionReturnOutDetail(consignmentDetail) THEN supplierSumReturnOutDetailC(consignmentDetail)
    ELSE supplierSumReturnOutDetailS(consignmentDetail);

vatConsignmentDetail (consignmentDetail) += valueSupplierVATBatchA(saleInBatchDetailReturnOutDetail(consignmentDetail))
   IF NOT isCommissionReturnOutDetail(consignmentDetail);

sumVATConsignmentDetail (consignmentDetail) +=  sumVATReturnOutDetailS(consignmentDetail) IF NOT isCommissionReturnOutDetail(consignmentDetail);

sumInvoiceConsignmentDetail (consignmentDetail) += IF isCommissionReturnOutDetail(consignmentDetail) THEN supplierSumReturnOutDetailC(consignmentDetail)
    ELSE supplierSumReturnOutDetailS(consignmentDetail) (+) sumVATReturnOutDetailS(consignmentDetail);

grossWeightConsignmentDetail (consignmentDetail) += grossWeightReturnOutDetail (consignmentDetail);
packQuantityConsignmentDetail (consignmentDetail) += packQuantityReturnOutDetail (consignmentDetail);
//shortNameUOMConsignmentDetail (consignmentDetail) += shortNameUOMReturnOutDetail (consignmentDetail);

noteReturnOutDetail (returnOutDetail) = [FORMULA STRING[30] '\'Цена импортера:\' ||  \' \' || CAST($1 AS TEXT)'](
    importerPriceBatchA(saleInBatchDetailReturnOutDetail(returnOutDetail)));
noteConsignmentDetail (consignmentDetail) += noteReturnOutDetail(consignmentDetail);  // нужно ли?

@defineDocumentFormTransferOutConsignment(return, t);
// todo: заполнить необходимыми данными

EXTEND FORM returnOut
    PROPERTIES(t) nameCurrencyReturnOut
;
EXTEND FORM returnOuts
    PROPERTIES(t) READONLY nameCurrencyReturnOut
;

// ---------------------------------------- Поступление ------------------------------------ //

CLASS ReturnIn 'Получение товаров по накладным' : Historizable, IncStockDocumentLedger;
CLASS ReturnInDetail 'Строка получения товаров по накладным';

@defineDocumentTransferIn(return, 'Получение товаров по накладным', sku, stock);
@defineDocumentFormTransferIn(return, 'Получение товаров по накладным');

@defineDocumentDetailSkuArticle(returnIn);
@extendFormDocumentDetailSkuArticleReadonly(returnIns, d, returnIn);

batchReturnInDetail (detail) = batchSaleInBatchDetail(saleInBatchDetailReturnOutDetail(returnOutDetailReturnInDetail(detail))) PERSISTENT;
descriptionBatchReturnInDetail 'Партия' (detail) = descriptionBatch(batchReturnInDetail(detail));

costReturnInBatch(returnIn, batch) = GROUP SUM quantityReturnInDetail(detail) BY returnInReturnInDetail(detail), batchReturnInDetail(detail) PERSISTENT;

EXTEND FORM returnIns
    PROPERTIES(d) descriptionBatchReturnInDetail
;

retailPriceReturnInDetail 'Цена розничная' (detail) = retailPriceReturnOutDetail(returnOutDetailReturnInDetail(detail));
retailSumReturnInDetail 'Сумма розничная' (detail) = quantityReturnInDetail(detail) * retailPriceReturnInDetail(detail);

skipSkuLedgerReturnIn 'Не проводить по учету' (returnIn) = skipSkuLedgerReturnOut(returnOutReturnIn(returnIn));
skipSkuLedgerReturnInDetail (detail) = skipSkuLedgerReturnOutDetail(returnOutDetailReturnInDetail(detail));

isCommissionReturnInDetail(detail) = isCommissionReturnOutDetail(returnOutDetailReturnInDetail(detail));

useRetailPriceReturnInDetail(detail) = [stockReturnInDetail(detail) IS DepartmentStore
    AND NOT costLedgerDepartmentStore(stockReturnInDetail(detail))](detail)
    OR isCommissionReturnInDetail(detail);
@defineDocumentTransferAccount(returnIn, useRetailPriceReturnInDetail);
@extendFormDocumentSkipSkuLedgerCustomReadonly(returnIns, t, returnIn);


@implementSkuLedgerInLIFO(ReturnInDetail, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityReturnInDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += quantityReturnInDetail(ledger) IF batch == batchReturnInDetail(ledger);
sumInSkuLedger(ledger) += accountSumReturnInDetail(ledger);
skipSkuLedger (ledger) += skipSkuLedgerReturnInDetail(ledger);

nameCurrencyReturnIn 'Валюта' (returnIn) = nameCurrencyReturnOut(returnOutReturnIn(returnIn)) MINCHARWIDTH 10 PREFCHARWIDTH 10 MAXCHARWIDTH 15;

// ---------------------------------------- Приемка ------------------------------------ //

CLASS ReturnRec 'Приемка товаров по накладной (возврат)' : Historizable;
CLASS ReturnRecPosted 'Проведенная приемка товаров по накладной (возврат)' : ReturnRec, PostedObject;

CLASS ReturnRecDetail 'Строка приемки товаров по накладной (возврат)';

@defineDocumentTransferRec(return, 'Приемка товаров по накладным (возврат)', sku, stock);
@defineDocumentFormTransferRec(return, 'Приемка товаров по накладным (возврат)');

@defineDocumentDetailSkuArticle(returnRec);
@extendFormDocumentDetailSkuArticle(returnRec, d, returnRec);

@extendFormDocumentDetailSkuArticleReadonly(returnIns, r, returnRec);

// ---------------------------------------- Акт расхождений ------------------------------------ //
CLASS ReturnDiff 'Акт расхождений приемки товаров по накладной (возврат)' : Historizable;

CLASS ABSTRACT ReturnDiffDetail 'Строка расхождений акта приемки товаров по накладной (возврат)';
CLASS ReturnDiffEDetail 'Строка расхождений акта приемки товаров по накладной (возврат, излишек)' : ReturnDiffDetail;
CLASS ReturnDiffSDetail 'Строка расхождений акта приемки товаров по накладной (возврат, недостача)' : ReturnDiffDetail;

@defineDocumentTransferDiff(return, 'Акт расхождений приемки товаров по накладной (возврат)', sku, stock);
@defineDocumentFormTransferDiff(return);

@defineDocumentDetailSkuArticle(returnDiff);
@extendFormDocumentDetailSkuArticleReadonlyQuantity(returnIns, f, returnDiff, signedQuantityReturnDiffDetail);

costReturnDiffEDetail(detail) = 0.0 IF detail IS ReturnDiffEDetail;

EXTEND CLASS ReturnDiffEDetail : BatchB;
@implementBatchCustom(returnDiffEDetail, sku, stock, cost);
quantityBatch (batch) += quantityReturnDiffEDetail(batch);
skipASkuLedger (ledger) += ledger IS ReturnDiffEDetail;

@implementSkuLedgerOutFIFO(ReturnDiffSDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityReturnDiffSDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += costReturnInBatch(returnInReturnDiffSDetail(ledger), batch);
orderOutFIFOSkuLedgerBatch (ledger, batch) += orderBBatch(batch) IF ledger IS ReturnDiffSDetail;

accountPriceReturnRecBatchA (returnRec, batchA) = GROUP MAX accountPriceReturnInDetailBatchA(detail, batchA) BY returnRecReturnInDetail(detail), batchA;
accountSumReturnDiffSDetail (detail) = GROUP SUM costDataSkuLedgerBatch(detail, batch) * accountPriceReturnRecBatchA(returnRecReturnDiffSDetail(detail), batch) BY detail PERSISTENT;
sumOutSkuLedger(ledger) += accountSumReturnDiffSDetail(ledger);

skipASkuLedger (ledger) += ledger IS ReturnDiffSDetail;

EXTEND FORM returnIns
    PROPERTIES(t) READONLY nameCurrencyReturnIn
;

//---------------------------------------- Товарный отчет ------------------------- //

// расход
dateTimeStockDocumentLedger (ledger) += dateTimeReturnOut(ledger);
isPostedStockDocumentLedger (ledger) += isPostedReturnOut(ledger);
stockStockDocumentLedger (ledger) += stockReturnOut(ledger);
descriptionStockDocumentLedger (ledger) += descriptionReturnOut(ledger);

sumOutStockDocumentLedger (ledger) += accountSumReturnOut(ledger);
sumItemOutStockDocumentLedger (ledger) += accountSumReturnOut(ledger);
sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS ReturnOut;

// приход
dateTimeStockDocumentLedger (ledger) += dateTimeReturnIn(ledger);
isPostedStockDocumentLedger (ledger) += isPostedReturnIn(ledger);
stockStockDocumentLedger (ledger) += stockReturnIn(ledger);
descriptionStockDocumentLedger (ledger) += descriptionReturnIn(ledger);

sumIncStockDocumentLedger (ledger) += accountSumReturnIn(ledger);
sumItemIncStockDocumentLedger (ledger) += accountSumReturnIn(ledger);
sumContainerIncStockDocumentLedger (ledger) += 0.0 IF ledger IS ReturnIn;
