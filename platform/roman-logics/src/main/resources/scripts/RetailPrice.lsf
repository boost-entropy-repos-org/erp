MODULE RetailPrice;

REQUIRE System,
        RomanMasterData,
        POS,
        RomanStock,
        PriceRound,
        UserPriceChange,
        Currency,
        PriceRound,
        RomanSales,
        RomanLogicsModule,
        Barcode,
        PriceListType;

PRIORITY MasterData, Stock, RomanLogicsModule;

// -------------------------------------- Надбавки --------------------------------------- //

CLASS CoefficientBrandRetail 'Надбавка';
TABLE coefficientBrandRetail (CoefficientBrandRetail);

dateCoefficientBrandRetail 'Дата введения' = DATA DATE(CoefficientBrandRetail) IN base;
markupCoefficientBrandRetail 'Множитель' = DATA NUMERIC[14,2](CoefficientBrandRetail) IN base;

brandSupplierCoefficientBrandRetail = DATA BrandSupplier(CoefficientBrandRetail) AUTOSET;
categorySupplierCoefficientBrandRetail = DATA CategorySupplier(CoefficientBrandRetail) AUTOSET;
seasonYearCoefficientBrandRetail = DATA SeasonYear(CoefficientBrandRetail) AUTOSET;

nameBrandSupplierCoefficientBrandRetail 'Бренд' (coefficientBrandRetail) = name(brandSupplierCoefficientBrandRetail(coefficientBrandRetail));
nameCategorySupplierCoefficientBrandRetail 'Группа' (coefficientBrandRetail) = name(categorySupplierCoefficientBrandRetail(coefficientBrandRetail));
nameSeasonYearCoefficientBrandRetail 'Сезон' (coefficientBrandRetail) = nameSeasonYear(seasonYearCoefficientBrandRetail(coefficientBrandRetail));

//uniqueCoefficientBrandCategorySeasonDate (brandSupplier, categorySupplier, seasonYear, date) = GROUP AGGR coefficientBrandRetail
//                                                                                                         BY brandSupplierCoefficientBrandRetail(coefficientBrandRetail),
//                                                                                                            categorySupplierCoefficientBrandRetail(coefficientBrandRetail),
//                                                                                                            seasonYearCoefficientBrandRetail(coefficientBrandRetail),
//                                                                                                            dateCoefficientBrandRetail(coefficientBrandRetail)
//                                                                                                      WHERE coefficientBrandRetail IS CoefficientBrandRetail;

inArticleCoefficientBrandRetail(coefficientBrandRetail, article) = (brandSupplierArticle(article) == brandSupplierCoefficientBrandRetail(coefficientBrandRetail) OR (article IS Article AND coefficientBrandRetail IS CoefficientBrandRetail AND NOT brandSupplierCoefficientBrandRetail(coefficientBrandRetail))) AND
                                                                   (categorySupplierArticle(article) == categorySupplierCoefficientBrandRetail(coefficientBrandRetail) OR (article IS Article AND coefficientBrandRetail IS CoefficientBrandRetail AND NOT categorySupplierCoefficientBrandRetail(coefficientBrandRetail))) AND
                                                                   (seasonYearArticle(article) == seasonYearCoefficientBrandRetail(coefficientBrandRetail) OR (article IS Article AND coefficientBrandRetail IS CoefficientBrandRetail AND NOT seasonYearCoefficientBrandRetail(coefficientBrandRetail)));

dateCoefficientBrandRetailArticle(coefficientBrandRetail, article) = dateCoefficientBrandRetail(coefficientBrandRetail) IF inArticleCoefficientBrandRetail(coefficientBrandRetail, article);
orderCoefficientBrandRetailArticle(coefficientBrandRetail, article) = STRUCT(dateCoefficientBrandRetailArticle(coefficientBrandRetail, article), coefficientBrandRetail) IF inArticleCoefficientBrandRetail(coefficientBrandRetail, article);

concatCoefficientBrandRetailArticleDate (article, date) = GROUP MAX orderCoefficientBrandRetailArticle(coefficientBrandRetail, article) IF
                                                                    dateCoefficientBrandRetailArticle(coefficientBrandRetail, article) < (date AS DATE)
                                                                 BY article, date;

coefficientBrandRetailArticleDate (article, date) = concatCoefficientBrandRetailArticleDate(article, date)[2];
markupCoefficientBrandRetailArticleDate (article, date) = markupCoefficientBrandRetail(coefficientBrandRetailArticleDate(article, date));
markupCoefficientBrandRetailSkuDate (sku, date) = markupCoefficientBrandRetailArticleDate(articleSku(sku), date);

FORM coefficientBrandRetail 'Надбавка'

    OBJECTS c=CoefficientBrandRetail FIXED PANEL
    PROPERTIES(c) nameBrandSupplierCoefficientBrandRetail, nameCategorySupplierCoefficientBrandRetail,
                    nameSeasonYearCoefficientBrandRetail, dateCoefficientBrandRetail, markupCoefficientBrandRetail

    EDIT CoefficientBrandRetail OBJECT c
;


FORM coefficientRetails 'Надбавки'

    OBJECTS s=Supplier
    PROPERTIES (s) READONLY nameLegalEntity

    OBJECTS b=BrandSupplier
    PROPERTIES(b) READONLY name
    FILTERS supplierBrandSupplier(b) == s

    OBJECTS c=CoefficientBrandRetail
    PROPERTIES (c) READONLY nameCategorySupplierCoefficientBrandRetail, nameSeasonYearCoefficientBrandRetail, dateCoefficientBrandRetail, markupCoefficientBrandRetail

    PROPERTIES(c) ADDFORM, EDITFORM, DELETE
    FILTERS brandSupplierCoefficientBrandRetail(c) == b

;

DESIGN coefficientRetails FROM DEFAULT {
    main {

        NEW bottomContainer {
            childConstraints = TO THE RIGHT;
            ADD s.box;
            ADD b.box;
        }

        ADD c.box {
            fillVertical = 3;
        };

        ADD functions.box;
    }
}

// ------------------------------------------------ Прайсы -------------------------------- //

CLASS MethodPrice 'Метод расчёта'
{
    coefficient 'С надбавкой',
    RRP 'Рекомендуемая',
    previous 'Предыдущая'
};


CLASS ABSTRACT PriceSetDocument 'Документ изменения цен' : NumeratedObject;
CLASS BasePriceSetDocument 'Базовый прайс' : PriceSetDocument;
CLASS DiscountPriceSetDocument 'Распродажа' : PriceSetDocument;
CLASS MixPriceSetDocument 'Базовый прайс с распродажей' : BasePriceSetDocument, DiscountPriceSetDocument;

TABLE priceSetDocument (PriceSetDocument);
TABLE basePriceSetDocument (BasePriceSetDocument);
TABLE discountPriceSetDocument (DiscountPriceSetDocument);

@defineNumeratedObjectDefault(PriceSetDocument, 'Нумератор для розничных прайсов', 'РП');

// Сроки действия прайсов
@defineDocumentHeaderTime(PriceSetDocument);

dateTimeToDataPriceSetDocument 'Дата/время окончания' = DATA DATETIME(PriceSetDocument) IN documentPrmGroup;

maxDateTime 'Максимальная дата' = DATA DATETIME();
EXTEND FORM options
     PROPERTIES() maxDateTime
;
EXTEND DESIGN options {
    commons {
        ADD PROPERTY(maxDateTime);
    }
}
dateTimeToPriceSetDocument 'Дата/время окончания' (priceSetDocument) = OVERRIDE maxDateTime() IF priceSetDocument IS PriceSetDocument,
                                                                                dateTimeToDataPriceSetDocument(priceSetDocument) IN base PERSISTENT;

CONSTRAINT dateTimeToPriceSetDocument(document) < dateTimePriceSetDocument(document) MESSAGE 'Дата/время окончания действия документа меньше даты/времени его начала';

// Проведение
isPostedPriceSetDocument 'Проведен' (priceSetDocument) = DATA BOOLEAN (PriceSetDocument);
isDraftPriceSetDocument 'Не проведен' (priceSetDocument) = priceSetDocument IS PriceSetDocument AND NOT isPostedPriceSetDocument(priceSetDocument);

prePostPriceSetDocument 'Провести' (priceSetDocument) = ACTION SET isPostedPriceSetDocument(priceSetDocument) <- TRUE;

statusPriceSetDocument 'Статус' (priceSetDocument) = IF isPostedPriceSetDocument(priceSetDocument)
                                                      THEN ('Проведен' IF priceSetDocument IS PriceSetDocument)
                                                      ELSE ('Не проведен' IF priceSetDocument IS PriceSetDocument) MINCHARWIDTH 11;

// Основание
freightBasePriceSetDocument = DATA Freight(BasePriceSetDocument);
importerBasePriceSetDocument = DATA Importer(BasePriceSetDocument);

basePriceSetDocumentFreightImporter (freight, importer) = GROUP AGGR basePriceSetDocument
    BY freightBasePriceSetDocument(basePriceSetDocument), importerBasePriceSetDocument(basePriceSetDocument)
    WHERE basePriceSetDocument IS BasePriceSetDocument;

userReasonPriceSetDocument 'Основание прайса' = DATA STRING[100] (PriceSetDocument);
reasonPriceSetDocument 'Основание прайса' (priceSetDocument) = OVERRIDE seriesNumberObject(freightBasePriceSetDocument (priceSetDocument)),
                                                                        userReasonPriceSetDocument(priceSetDocument) IN recognize;

// Валюта

currencyPriceSetDocument = DATA Currency (PriceSetDocument);
nameCurrencyPriceSetDocument 'Валюта' (priceSetDocument) = nameCurrency(currencyPriceSetDocument(priceSetDocument)) MINCHARWIDTH 3 PREFCHARWIDTH 8;

roundCurrencyPriceSetDocument (number, priceSetDocument) = roundPriceCurrency(number, currencyPriceSetDocument(priceSetDocument));

// ----------------------------------------------- Спецификация --------------------------------------- //

// По артикулам
TABLE priceSetDocumentArticle(PriceSetDocument, Article);

inPriceSetDocumentArticle 'Артикул в документе' = DATA BOOLEAN(PriceSetDocument, Article);

userDateTimePriceSetDocumentArticle 'Дата/время (начало)' = DATA DATETIME(PriceSetDocument, Article);
userDateTimePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

userDateTimeToPriceSetDocumentArticle 'Дата/время (конец)' = DATA DATETIME(PriceSetDocument, Article);
userDateTimeToPriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

dateTimePriceSetDocumentArticle 'Дата/время (начало)' (priceSetDocument, article) = OVERRIDE (dateTimePriceSetDocument(priceSetDocument) IF inPriceSetDocumentArticle(priceSetDocument, article)),
                                                                                             userDateTimePriceSetDocumentArticle(priceSetDocument, article) PERSISTENT;
dateTimeToPriceSetDocumentArticle 'Дата/время (конец)' (priceSetDocument, article) = OVERRIDE (dateTimeToPriceSetDocument(priceSetDocument) IF inPriceSetDocumentArticle(priceSetDocument, article)),
                                                                                              userDateTimeToPriceSetDocumentArticle(priceSetDocument, article) PERSISTENT;

// Базовые цены
priceInBasePriceSetDocumentArticle 'Цена поставщика' = DATA NUMERIC[14,2](BasePriceSetDocument, Article);
priceInBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

currencyBasePriceSetDocumentArticle = DATA Currency (BasePriceSetDocument, Article);
nameCurrencyBasePriceSetDocumentArticle 'Валюта' (basePriceSetDocument, article) = nameCurrency(currencyBasePriceSetDocumentArticle(basePriceSetDocument, article)) MINCHARWIDTH 8;
currencyBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

roundCurrencyBasePriceSetDocumentArticle '' (number, basePriceSetDocument, article) = roundPriceCurrency(number, currencyBasePriceSetDocumentArticle(basePriceSetDocument, article));

currencyRRPBasePriceSetDocumentArticle  = DATA Currency(BasePriceSetDocument, Article);
nameCurrencyRRPBasePriceSetDocumentArticle 'Валюта RRP' (basePriceSetDocument, article) = nameCurrency(currencyRRPBasePriceSetDocumentArticle(basePriceSetDocument, article)) MINCHARWIDTH 8;
currencyRRPBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

RRPBasePriceSetDocumentArticle 'Рекомендуемая цена' = DATA NUMERIC[14,2](BasePriceSetDocument, Article);
hasNotRRPBasePriceSetDocumentArticle 'Нет рекомендуемой цены' (basePriceSetDocument, article) =
    basePriceSetDocument IS BasePriceSetDocument AND article IS Article AND NOT RRPBasePriceSetDocumentArticle(basePriceSetDocument, article);
RRPBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

typeExchangeBasePriceSetDocumentArticle = DATA TypeExchange (BasePriceSetDocument, Article);
nameTypeExchangeBasePriceSetDocumentArticle 'Тип обмена' (basePriceSetDocument, article) = nameTypeExchange(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article));
CONSTRAINT currencyTypeExchange(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article)) != currencyPriceSetDocument(basePriceSetDocument)
           CHECKED BY typeExchangeBasePriceSetDocumentArticle
           MESSAGE 'Валюта типа обмена должна совпадать с валютой прайса';
typeExchangeBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

rateBasePriceSetDocumentArticle 'Обменный курс' = DATA NUMERIC[14,2](BasePriceSetDocument, Article);
rateBasePriceSetDocumentArticle(basePriceSetDocument, article) <- rateTypeExchangeCurrencyDate(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article),
                                                                                               currencyBasePriceSetDocumentArticle(basePriceSetDocument, article),
                                                                                               datePriceSetDocument(basePriceSetDocument))
                                                          WHEN CHANGED(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                               CHANGED(currencyBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                               CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentArticle(basePriceSetDocument, article));
rateBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

rateRRPBasePriceSetDocumentArticle 'Обменный курс RRP' = DATA NUMERIC[14,2](BasePriceSetDocument, Article);
rateRRPBasePriceSetDocumentArticle(basePriceSetDocument, article) <- rateTypeExchangeCurrencyDate(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article),
                                                                                                  currencyRRPBasePriceSetDocumentArticle(basePriceSetDocument, article),
                                                                                                  datePriceSetDocument(basePriceSetDocument))
                                                             WHEN CHANGED(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                                  CHANGED(currencyRRPBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                                                  CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentArticle(basePriceSetDocument, article));
rateRRPBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

markupBasePriceSetDocumentArticle 'Наценка' = DATA NUMERIC[14,2] (BasePriceSetDocument, Article);
markupBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

priceOutBasePriceSetDocumentArticle 'Цена с надбавкой' (basePriceSetDocument, article) = roundCurrencyBasePriceSetDocumentArticle(
                                                                                                    priceInBasePriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                    markupBasePriceSetDocumentArticle(basePriceSetDocument, article), basePriceSetDocument, article) PERSISTENT;

priceOutRateBasePriceSetDocumentArticle 'Цена с надбавкой (руб.)' (basePriceSetDocument, article) = roundCurrencyPriceSetDocument(
                                                                                                         priceOutBasePriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                         rateBasePriceSetDocumentArticle(basePriceSetDocument, article), basePriceSetDocument) PERSISTENT;

RRPRateBasePriceSetDocumentArticle 'Рекомендуемая (руб.)' (basePriceSetDocument, article) = roundCurrencyPriceSetDocument(
                                                                                                 RRPBasePriceSetDocumentArticle(basePriceSetDocument, article) *
                                                                                                 rateRRPBasePriceSetDocumentArticle(basePriceSetDocument, article), basePriceSetDocument) PERSISTENT;

methodBasePriceSetDocumentArticle = DATA MethodPrice(BasePriceSetDocument, Article);
nameMethodBasePriceSetDocumentArticle 'Метод расчёта' (basePriceSetDocument, article) = staticName(methodBasePriceSetDocumentArticle(basePriceSetDocument, article)) MAXCHARWIDTH 20;
methodBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

priceBasePriceSetDocumentArticle 'Базовая цена' = DATA NUMERIC[14,2](BasePriceSetDocument, Article);
priceBasePriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

// Уценки
percentDiscountPriceSetDocumentArticle 'Процент уценки' = DATA NUMERIC[14,2](DiscountPriceSetDocument, Article) IN base;
percentDiscountPriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

priceDiscountPriceSetDocumentArticle 'Цена со скидкой' = DATA NUMERIC[14,2](DiscountPriceSetDocument, Article);
priceDiscountPriceSetDocumentArticle(document, article) => inPriceSetDocumentArticle(document, article) RESOLVE FALSE;

// По товарам
TABLE priceSetDocumentSku(PriceSetDocument, Sku);

inPriceSetDocumentSku 'Товар в документе' = DATA BOOLEAN(PriceSetDocument, Sku);

userDateTimePriceSetDocumentSku 'Дата/время (начало)' = DATA DATETIME(PriceSetDocument, Sku);
userDateTimePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

userDateTimeToPriceSetDocumentSku 'Дата/время (конец)' = DATA DATETIME(PriceSetDocument, Sku);
userDateTimeToPriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

dateTimePriceSetDocumentSku 'Дата/время (начало)' (priceSetDocument, sku) = OVERRIDE dateTimePriceSetDocument(priceSetDocument) IF inPriceSetDocumentSku(priceSetDocument, sku),
                                                                                     userDateTimePriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;
dateTimeToPriceSetDocumentSku 'Дата/время (конец)' (priceSetDocument, sku) = OVERRIDE dateTimeToPriceSetDocument(priceSetDocument) IF inPriceSetDocumentSku(priceSetDocument, sku),
                                                                                      userDateTimeToPriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;

// Базовые цены
priceInBasePriceSetDocumentSku 'Цена поставщика' = DATA NUMERIC[14,2](BasePriceSetDocument, Sku);
priceInBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

currencyRRPBasePriceSetDocumentSku = DATA Currency(BasePriceSetDocument, Sku);
nameCurrencyRRPBasePriceSetDocumentSku 'Валюта RRP' (basePriceSetDocument, sku) = nameCurrency(currencyRRPBasePriceSetDocumentSku(basePriceSetDocument, sku)) MINCHARWIDTH 8;
currencyRRPBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

RRPBasePriceSetDocumentSku 'Рекомендуемая цена' = DATA NUMERIC[14,2](BasePriceSetDocument, Sku);
RRPBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;
hasNotRRPBasePriceSetDocumentSku 'Нет рекомендуемой цены' (basePriceSetDocument, sku) =
    basePriceSetDocument IS BasePriceSetDocument AND sku IS Sku AND NOT RRPBasePriceSetDocumentSku(basePriceSetDocument, sku);

currencyBasePriceSetDocumentSku = DATA Currency (BasePriceSetDocument, Sku);
nameCurrencyBasePriceSetDocumentSku 'Валюта' (basePriceSetDocument, sku) = nameCurrency(currencyBasePriceSetDocumentSku(basePriceSetDocument, sku)) MINCHARWIDTH 8;
currencyBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

roundCurrencyBasePriceSetDocumentSku '' (number, basePriceSetDocument, sku) = roundPriceCurrency(number, currencyBasePriceSetDocumentSku(basePriceSetDocument, sku));

typeExchangeBasePriceSetDocumentSku = DATA TypeExchange (BasePriceSetDocument, Sku);
nameTypeExchangeBasePriceSetDocumentSku 'Тип обмена' (basePriceSetDocument, sku) = nameTypeExchange(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku));
CONSTRAINT currencyTypeExchange(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku)) != currencyPriceSetDocument(basePriceSetDocument)
           CHECKED BY typeExchangeBasePriceSetDocumentSku
           MESSAGE 'Валюта типа обмена должна совпадать с валютой прайса';
typeExchangeBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

rateBasePriceSetDocumentSku 'Обменный курс' = DATA NUMERIC[14,2] (BasePriceSetDocument, Sku);
rateBasePriceSetDocumentSku(basePriceSetDocument, sku) <- rateTypeExchangeCurrencyDate(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku),
                                                                                       currencyBasePriceSetDocumentSku(basePriceSetDocument, sku),
                                                                                       datePriceSetDocument(basePriceSetDocument))
                                                          WHEN CHANGED(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                               CHANGED(currencyBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                               CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentSku(basePriceSetDocument, sku));
rateBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

rateRRPBasePriceSetDocumentSku 'Обменный курс RRP' = DATA NUMERIC[14,2] (BasePriceSetDocument, Sku);
rateRRPBasePriceSetDocumentSku(basePriceSetDocument, sku) <- rateTypeExchangeCurrencyDate(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku),
                                                                                          currencyRRPBasePriceSetDocumentSku(basePriceSetDocument, sku),
                                                                                          datePriceSetDocument(basePriceSetDocument))
                                                          WHEN CHANGED(typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                               CHANGED(currencyRRPBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                                               CHANGED(datePriceSetDocument(basePriceSetDocument) AND inPriceSetDocumentSku(basePriceSetDocument, sku));
rateRRPBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceSetDocumentSeriesNumberShortNameCurrency (series, number, currency) = GROUP AGGR priceSetDocument BY seriesObject(priceSetDocument), numberObject(priceSetDocument), shortNameCurrency(currencyPriceSetDocument(priceSetDocument))
                                                                                        WHERE priceSetDocument IS PriceSetDocument;

markupBasePriceSetDocumentSku 'Наценка' = DATA NUMERIC[14,2] (BasePriceSetDocument, Sku);
markupBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceOutBasePriceSetDocumentSku 'Цена с надбавкой' (basePriceSetDocument, sku) = roundCurrencyBasePriceSetDocumentSku(priceInBasePriceSetDocumentSku(basePriceSetDocument, sku) *
                                                                                        markupBasePriceSetDocumentSku(basePriceSetDocument, sku), basePriceSetDocument, sku) PERSISTENT;

priceOutRateBasePriceSetDocumentSku 'Цена с надбавкой (руб.)' (basePriceSetDocument, sku) = roundCurrencyPriceSetDocument(priceOutBasePriceSetDocumentSku(basePriceSetDocument, sku) *
                                                                                                   rateBasePriceSetDocumentSku(basePriceSetDocument, sku), basePriceSetDocument) PERSISTENT;

RRPRateBasePriceSetDocumentSku 'Рекомендуемая (руб.)' (basePriceSetDocument, sku) = roundCurrencyPriceSetDocument(RRPBasePriceSetDocumentSku(basePriceSetDocument, sku) *
                                                                                           rateBasePriceSetDocumentSku(basePriceSetDocument, sku), basePriceSetDocument) PERSISTENT;

methodBasePriceSetDocumentSku = DATA MethodPrice(BasePriceSetDocument, Sku);
nameMethodBasePriceSetDocumentSku 'Метод расчёта' (basePriceSetDocument, sku) = staticName(methodBasePriceSetDocumentSku(basePriceSetDocument, sku)) MAXCHARWIDTH 20;
methodBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceBasePriceSetDocumentSku 'Базовая цена' = DATA NUMERIC[14,2](BasePriceSetDocument, Sku);
priceBasePriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

// Уценки
percentDiscountPriceSetDocumentSku 'Процент уценки' = DATA NUMERIC[14,2](DiscountPriceSetDocument, Sku) IN base;
percentDiscountPriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

priceDiscountPriceSetDocumentSku 'Цена со скидкой' = DATA NUMERIC[14,2](DiscountPriceSetDocument, Sku);
priceDiscountPriceSetDocumentSku(document, sku) => inPriceSetDocumentSku(document, sku) RESOLVE FALSE;

// -------------------------------- Сводная по артикулам / товарам --------------------------------- //
overInPriceSetDocumentSku 'Товар в документе' (priceSetDocument, sku) = OVERRIDE inPriceSetDocumentArticle(priceSetDocument, articleSku(sku)),
                                                                                 inPriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;

overDateTimePriceSetDocumentSku 'Дата/время (начало)' (priceSetDocument, sku) = OVERRIDE dateTimePriceSetDocumentArticle(priceSetDocument, articleSku(sku)),
                                                                                         dateTimePriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;
overDateTimeToPriceSetDocumentSku 'Дата/время (конец)' (priceSetDocument, sku) = OVERRIDE dateTimeToPriceSetDocumentArticle(priceSetDocument, articleSku(sku)),
                                                                                          dateTimeToPriceSetDocumentSku(priceSetDocument, sku) PERSISTENT;

// Базовые прайс
overPriceInBasePriceSetDocumentSku 'Цена поставщика' (basePriceSetDocument, sku) = OVERRIDE priceInBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                                            priceInBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overRRPBasePriceSetDocumentSku 'Рекомендуемая цена' (basePriceSetDocument, sku) = OVERRIDE RRPBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                                           RRPBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overCurrencyBasePriceSetDocumentSku (basePriceSetDocument, sku) = OVERRIDE currencyBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                           currencyBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overCurrencyRRPBasePriceSetDocumentSku (basePriceSetDocument, sku) = OVERRIDE currencyRRPBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                              currencyRRPBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overTypeExchangeBasePriceSetDocumentSku (basePriceSetDocument, sku) = OVERRIDE typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                               typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overMarkupBasePriceSetDocumentSku (basePriceSetDocument, sku) = OVERRIDE markupBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                         markupBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overMethodBasePriceSetDocumentSku (basePriceSetDocument, sku) = OVERRIDE methodBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                         methodBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

overPriceBasePriceSetDocumentSku 'Базовая цена' (basePriceSetDocument, sku) = OVERRIDE priceBasePriceSetDocumentArticle(basePriceSetDocument, articleSku(sku)),
                                                                                       priceBasePriceSetDocumentSku(basePriceSetDocument, sku) PERSISTENT;

// Уценки
overPercentDiscountPriceSetDocumentSku 'Процент уценки' (discountPriceSetDocument, sku) = OVERRIDE percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, articleSku(sku)),
                                                                                                   percentDiscountPriceSetDocumentSku(discountPriceSetDocument, sku);
overPriceDiscountPriceSetDocumentSku 'Цена со скидкой' (discountPriceSetDocument, sku) = OVERRIDE priceDiscountPriceSetDocumentArticle(discountPriceSetDocument, articleSku(sku)),
                                                                                                  priceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku) PERSISTENT;

//--------------------------------------------- Агрегации ----------------------------------------------- //

META definePriceSetDocumentAggregations(document, caption)

    // ---------------------------------------- Артикулы ---------------------------------------- //
    order###document##Article = STRUCT(dateTimePriceSetDocumentArticle(document, article), document) IF inPriceSetDocumentArticle(document, article) PERSISTENT;

    concatB###document##ArticleCurrencyDateTime (article, currency, dateTime) = GROUP MAX order###document##Article(document, article) IF
                                                                                          price###document##Article(document, article) AND
                                                                                          dateTimePriceSetDocumentArticle(document, article) < (dateTime AS DATETIME) AND
                                                                                          dateTimeToPriceSetDocumentArticle(document, article) > (dateTime AS DATETIME) AND
                                                                                          isPostedPriceSetDocument(document)
                                                                                       BY article, currencyPriceSetDocument(document), dateTime;
    document##BArticleCurrencyDateTime (article, currency, dateTime) = concatB###document##ArticleCurrencyDateTime(article, currency, dateTime)[2];

    concatA###document##ArticleCurrencyDateTime (article, currency, dateTime) = GROUP MAX order###document##Article(document, article) IF
                                                                                          price###document##Article(document, article) AND
                                                                                          dateTimePriceSetDocumentArticle(document, article) <= (dateTime AS DATETIME) AND
                                                                                          dateTimeToPriceSetDocumentArticle(document, article) > (dateTime AS DATETIME) AND
                                                                                          isPostedPriceSetDocument(document)
                                                                                       BY article, currencyPriceSetDocument(document), dateTime;
    document##AArticleCurrencyDateTime (article, currency, dateTime) = concatA###document##ArticleCurrencyDateTime(article, currency, dateTime)[2];

    // Цены на дату
    priceB###document##ArticleCurrencyDateTime(article, currency, dateTime) = price###document##Article(document##BArticleCurrencyDateTime(article, currency, dateTime), article);
    prevPriceB###document##ArticleCurrencyDateTime(article, currency, dateTime) = PREV(price###document##Article(document##BArticleCurrencyDateTime(article, currency, dateTime), article));

    priceA###document##ArticleCurrencyDateTime(article, currency, dateTime) = price###document##Article(document##AArticleCurrencyDateTime(article, currency, dateTime), article);

    // Предыдущие цены
    priceB###document##Article caption###' (предыдущая)' (document, article) = priceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article)) MINCHARWIDTH 15;
    prevPriceB###document##Article caption###' (предыдущая)' (document, article) = prevPriceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article)) MINCHARWIDTH 15;

    priceDocumentB###document##Article caption###' (предыдущая)' (document, article) = priceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;
    prevPriceDocumentB###document##Article caption###' (предыдущая)' (document, article) = prevPriceB###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;

    priceA###document##Article caption###' (действующая)' (document, article) = priceA###document##ArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article)) MINCHARWIDTH 15;

    // ---------------------------------------- Sku ---------------------------------------- //
    order###document##Sku = STRUCT(overDateTimePriceSetDocumentSku(document, sku), document) IF overInPriceSetDocumentSku(document, sku) PERSISTENT;

    concatB###document##SkuCurrencyDateTime (sku, currency, dateTime) = GROUP MAX order###document##Sku(document, sku) IF
                                                                                  overPrice###document##Sku (document, sku) AND
                                                                                  overDateTimePriceSetDocumentSku(document, sku) < (dateTime AS DATETIME) AND
                                                                                  overDateTimeToPriceSetDocumentSku(document, sku) > (dateTime AS DATETIME) AND
                                                                                  isPostedPriceSetDocument(document)
                                                                              BY sku, currencyPriceSetDocument(document), dateTime;

    document##BSkuCurrencyDateTime (sku, currency, dateTime) = concatB###document##SkuCurrencyDateTime(sku, currency, dateTime)[2];

    concatA###document##SkuCurrencyDateTime (sku, currency, dateTime) = GROUP MAX order###document##Sku(document, sku) IF
                                                                                  overPrice###document##Sku (document, sku) AND
                                                                                  overDateTimePriceSetDocumentSku(document, sku) <= (dateTime AS DATETIME) AND
                                                                                  overDateTimeToPriceSetDocumentSku(document, sku) > (dateTime AS DATETIME) AND
                                                                                  isPostedPriceSetDocument(document)
                                                                              BY sku, currencyPriceSetDocument(document), dateTime;

    document##ASkuCurrencyDateTime (sku, currency, dateTime) = concatA###document##SkuCurrencyDateTime(sku, currency, dateTime)[2];

    // Цены на дату
    priceB###document##SkuCurrencyDateTime(sku, currency, dateTime) = overPrice###document##Sku(document##BSkuCurrencyDateTime(sku, currency, dateTime), sku);
    prevPriceB###document##SkuCurrencyDateTime(sku, currency, dateTime) = PREV(overPrice###document##Sku(document##BSkuCurrencyDateTime(sku, currency, dateTime), sku));

    priceA###document##SkuCurrencyDateTime(sku, currency, dateTime) = overPrice###document##Sku(document##ASkuCurrencyDateTime(sku, currency, dateTime), sku);

    // Предыдущие цены
    priceB###document##Sku caption###' (предыдущая)' (document, sku) = priceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku)) MINCHARWIDTH 15;
    prevPriceB###document##Sku caption###' (предыдущая)' (document, sku) = prevPriceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku)) MINCHARWIDTH 15;

    priceDocumentB###document##Sku caption###' (предыдущая)' (document, sku) = priceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;
    prevPriceDocumentB###document##Sku caption###' (предыдущая)' (document, sku) = prevPriceB###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocument(document)) MINCHARWIDTH 15;

    priceA###document##Sku caption###' (действующая)' (document, sku) = priceA###document##SkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku)) MINCHARWIDTH 15;

END

@definePriceSetDocumentAggregations(basePriceSetDocument, 'Базовая цена');
@definePriceSetDocumentAggregations(discountPriceSetDocument, 'Цена со скидкой');

concatBBasePriceSetDocumentArticleCurrencyRRPDateTime (article, currency, dateTime) = GROUP MAX orderBasePriceSetDocumentArticle(basePriceSetDocument, article) IF
                                                                                                RRPBasePriceSetDocumentArticle(basePriceSetDocument, article) AND
                                                                                                dateTimePriceSetDocumentArticle(basePriceSetDocument, article) < (dateTime AS DATETIME) AND
                                                                                                dateTimeToPriceSetDocumentArticle(basePriceSetDocument, article) > (dateTime AS DATETIME) AND
                                                                                                isPostedPriceSetDocument(basePriceSetDocument)
                                                                                             BY article, currencyPriceSetDocument(basePriceSetDocument), dateTime;

basePriceSetDocumentBArticleCurrencyRRPDateTime (article, currency, dateTime) = concatBBasePriceSetDocumentArticleCurrencyRRPDateTime(article, currency, dateTime)[2];

concatBBasePriceSetDocumentSkuCurrencyRRPDateTime (sku, currency, dateTime) = GROUP MAX orderBasePriceSetDocumentSku(basePriceSetDocument, sku) IF
                                                                                        overRRPBasePriceSetDocumentSku(basePriceSetDocument, sku) AND
                                                                                        overDateTimePriceSetDocumentSku(basePriceSetDocument, sku) < (dateTime AS DATETIME) AND
                                                                                        overDateTimeToPriceSetDocumentSku(basePriceSetDocument, sku) > (dateTime AS DATETIME) AND
                                                                                        isPostedPriceSetDocument(basePriceSetDocument)
                                                                                     BY sku, currencyPriceSetDocument(basePriceSetDocument), dateTime;

basePriceSetDocumentBSkuCurrencyRRPDateTime (sku, currency, dateTime) = concatBBasePriceSetDocumentSkuCurrencyRRPDateTime(sku, currency, dateTime)[2];


// ----------------------------------------------- Последние параметры для базовых цен --------------------------------- //

// ----------------------------------------------- Артикулы --------------------------------- //

// Цены на дату
priceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = priceInBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article);
prevPriceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(priceInBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

RRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = RRPBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article);
prevRRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(RRPBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

prevCurrencyBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(currencyBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));
prevCurrencyRRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(currencyRRPBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyRRPDateTime(article, currency, dateTime), article));

prevTypeExchangeBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(typeExchangeBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

prevMarkupBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(markupBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

prevMethodBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(methodBasePriceSetDocumentArticle(basePriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

// Предыдущие цены
priceInBPriceSetDocumentArticle 'Цена поставщика (предыдущая)' (document, article) = priceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));
prevPriceInBPriceSetDocumentArticle 'Цена поставщика (предыдущая)' (document, article) = prevPriceInBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

priceInRateBBasePriceSetDocumentArticle 'Цена поставщика (руб.)' (document, article) = priceInBPriceSetDocumentArticle(document, article) *
                                                                                       rateBasePriceSetDocumentArticle (document, article);

RRPBPriceSetDocumentArticle 'Рекомендуемая цена (предыдущая)' (document, article) = RRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));
prevRRPBPriceSetDocumentArticle 'Рекомендуемая цена (предыдущая)' (document, article) = prevRRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevCurrencyBPriceSetDocumentArticle 'Валюта (предыдущая)' (document, article) = prevCurrencyBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));
prevCurrencyRRPBPriceSetDocumentArticle 'Валюта RRP (предыдущая)' (document, article) = prevCurrencyRRPBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevTypeExchangeBPriceSetDocumentArticle 'Тип обмена (предыдущий)' (document, article) = prevTypeExchangeBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevMarkupBPriceSetDocumentArticle 'Наценка (предыдущая)' (document, article) = prevMarkupBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

prevMethodBPriceSetDocumentArticle 'Метод расчёта (предыдущий)' (document, article) = prevMethodBBasePriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

// ----------------------------------------------- Sku --------------------------------- //

// Цены на дату
priceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = overPriceInBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku);
prevPriceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overPriceInBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

RRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = overRRPBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku);
prevRRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overRRPBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

prevCurrencyBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overCurrencyBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));
prevCurrencyRRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overCurrencyRRPBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyRRPDateTime(sku, currency, dateTime), sku));
prevTypeExchangeBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overTypeExchangeBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

prevMarkupBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overMarkupBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

prevMethodBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overMethodBasePriceSetDocumentSku(basePriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

// Предыдущие цены
priceInBPriceSetDocumentSku 'Цена поставщика (предыдущая)' (document, sku) = priceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));
prevPriceInBPriceSetDocumentSku 'Цена поставщика (предыдущая)' (document, sku) = prevPriceInBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

priceInRateBPriceSetDocumentSku 'Цена поставщика (руб.)' (document, sku) = priceInBPriceSetDocumentSku(document, sku) *
                                                                           rateBasePriceSetDocumentSku(document, sku);

RRPBPriceSetDocumentSku 'Рекомендуемая цена (предыдущая)' (document, sku) = RRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));
prevRRPBPriceSetDocumentSku 'Рекомендуемая цена (предыдущая)' (document, sku) = prevRRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevCurrencyBPriceSetDocumentSku 'Валюта (предыдущая)' (document, sku) = prevCurrencyBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));
prevCurrencyRRPBPriceSetDocumentSku 'Валюта (предыдущая)' (document, sku) = prevCurrencyRRPBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevTypeExchangeBPriceSetDocumentSku 'Тип обмена (предыдущий)' (document, sku) = prevTypeExchangeBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevMarkupBPriceSetDocumentSku 'Наценка (предыдущая)' (document, sku) = prevMarkupBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

prevMethodBPriceSetDocumentSku 'Метод расчёта (предыдущий)' (document, sku) = prevMethodBBasePriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

// ----------------------------------------------- Последние параметры для цен с уценкой --------------------------------- //

// ----------------------------------------------- Артикулы --------------------------------- //

// Цены на дату
prevPercentBDiscountPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = PREV(percentDiscountPriceSetDocumentArticle(discountPriceSetDocumentBArticleCurrencyDateTime(article, currency, dateTime), article));

// Предыдущие цены
prevPercentBPriceSetDocumentArticle 'Процент скидки (предыдущий)' (document, article) = prevPercentBDiscountPriceSetDocumentArticleCurrencyDateTime(article, currencyPriceSetDocument(document), dateTimePriceSetDocumentArticle(document, article));

// ----------------------------------------------- Sku --------------------------------- //

// Цены на дату
prevPercentBDiscountPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = PREV(overPercentDiscountPriceSetDocumentSku(discountPriceSetDocumentBSkuCurrencyDateTime(sku, currency, dateTime), sku));

// Предыдущие цены
prevPercentBPriceSetDocumentSku 'Процент скидки (предыдущий)' (document, sku) = prevPercentBDiscountPriceSetDocumentSkuCurrencyDateTime(sku, currencyPriceSetDocument(document), dateTimePriceSetDocumentSku(document, sku));

// -------------------------------------- Записываем значения по умолчанию ------------------------------------- //

// Подставление значений для базового прайса

// --------------- Артикулы ---------------- //

priceInBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevPriceInBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

RRPBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevRRPBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

currencyBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevCurrencyBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED (inPriceSetDocumentArticle(basePriceSetDocument, article)); //OR CHANGED (currencyPriceSetDocument(basePriceSetDocument))

currencyRRPBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevCurrencyRRPBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED (inPriceSetDocumentArticle(basePriceSetDocument, article));

typeExchangeBasePriceSetDocumentArticle(basePriceSetDocument, article) <- prevTypeExchangeBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED (inPriceSetDocumentArticle(basePriceSetDocument, article));

markupBasePriceSetDocumentArticle (basePriceSetDocument, article) <- prevMarkupBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

methodBasePriceSetDocumentArticle (basePriceSetDocument, article) <- prevMethodBPriceSetDocumentArticle (basePriceSetDocument, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(basePriceSetDocument, article));

coefficientPriceBasePriceSetDocumentArticle (basePriceSetDocument, article) = roundPriceCurrencyArticle(priceOutRateBasePriceSetDocumentArticle(basePriceSetDocument, article), currencyPriceSetDocument(basePriceSetDocument), article) PERSISTENT;
RRPPriceBasePriceSetDocumentArticle (basePriceSetDocument, article) = roundPriceCurrencyArticle(RRPRateBasePriceSetDocumentArticle(basePriceSetDocument, article), currencyPriceSetDocument(basePriceSetDocument), article) PERSISTENT;
priceBasePriceSetDocumentArticle(basePriceSetDocument, article) <-
                            IF methodBasePriceSetDocumentArticle(basePriceSetDocument, article) == MethodPrice.coefficient THEN coefficientPriceBasePriceSetDocumentArticle (basePriceSetDocument, article) ELSE
                               IF methodBasePriceSetDocumentArticle(basePriceSetDocument, article) == MethodPrice.RRP THEN RRPPriceBasePriceSetDocumentArticle (basePriceSetDocument, article) ELSE
                                  prevPriceBBasePriceSetDocumentArticle(basePriceSetDocument, article) IF methodBasePriceSetDocumentArticle(basePriceSetDocument, article) == MethodPrice.previous
                            WHEN CHANGED (methodBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                 CHANGED (priceOutRateBasePriceSetDocumentArticle(basePriceSetDocument, article)) OR
                                 CHANGED (RRPRateBasePriceSetDocumentArticle(basePriceSetDocument, article));

// Уценка
percentDiscountPriceSetDocumentArticle (document, article) <- prevPercentBPriceSetDocumentArticle (document, article)
    WHEN ASSIGNED(inPriceSetDocumentArticle(document, article));

priceAllowancePriceSetDocumentArticle (discountPriceSetDocument, article) =
                         IF article IS Article AND
                            discountPriceSetDocument IS DiscountPriceSetDocument AND
                            NOT discountPriceSetDocument IS BasePriceSetDocument
                         THEN priceBBasePriceSetDocumentArticle(discountPriceSetDocument, article)
                         ELSE priceBasePriceSetDocumentArticle(discountPriceSetDocument, article);

calcPriceDiscountPriceSetDocumentArticle 'Цена без процентов' (discountPriceSetDocument, article) = [X*(100-Y)/100]
                                                                                                       (priceAllowancePriceSetDocumentArticle(discountPriceSetDocument, article),
                                                                                                       percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, article));

defaultPriceDiscountPriceSetDocumentArticle (discountPriceSetDocument, article) = roundPriceCurrencyArticle(calcPriceDiscountPriceSetDocumentArticle(discountPriceSetDocument, article), currencyPriceSetDocument(discountPriceSetDocument), article) PERSISTENT;
priceDiscountPriceSetDocumentArticle(discountPriceSetDocument, article) <- defaultPriceDiscountPriceSetDocumentArticle (discountPriceSetDocument, article)
                                        WHEN CHANGED(priceBasePriceSetDocumentArticle(discountPriceSetDocument, article)) OR
                                             CHANGED(percentDiscountPriceSetDocumentArticle(discountPriceSetDocument, article)) OR
                                             CHANGED(dateTimePriceSetDocumentArticle(discountPriceSetDocument, article));

// --------------- Sku ---------------- //

priceInBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevPriceInBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

RRPBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevRRPBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

currencyBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevCurrencyBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

currencyRRPBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevCurrencyRRPBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

typeExchangeBasePriceSetDocumentSku(basePriceSetDocument, sku) <- prevTypeExchangeBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

markupBasePriceSetDocumentSku (basePriceSetDocument, sku) <- prevMarkupBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

methodBasePriceSetDocumentSku (basePriceSetDocument, sku) <- prevMethodBPriceSetDocumentSku (basePriceSetDocument, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(basePriceSetDocument, sku));

coefficientPriceBasePriceSetDocumentSku (basePriceSetDocument, sku) = roundPriceCurrencySku(priceOutRateBasePriceSetDocumentSku(basePriceSetDocument, sku), currencyPriceSetDocument(basePriceSetDocument), sku) PERSISTENT;
RRPPriceBasePriceSetDocumentSku (basePriceSetDocument, sku) = roundPriceCurrencySku(RRPRateBasePriceSetDocumentSku(basePriceSetDocument, sku), currencyPriceSetDocument(basePriceSetDocument), sku) PERSISTENT;
priceBasePriceSetDocumentSku(basePriceSetDocument, sku) <-
                            IF methodBasePriceSetDocumentSku(basePriceSetDocument, sku) == MethodPrice.coefficient THEN coefficientPriceBasePriceSetDocumentSku(basePriceSetDocument, sku) ELSE
                                IF methodBasePriceSetDocumentSku(basePriceSetDocument, sku) == MethodPrice.RRP THEN RRPPriceBasePriceSetDocumentSku(basePriceSetDocument, sku) ELSE
                                   prevPriceBBasePriceSetDocumentSku(basePriceSetDocument, sku) IF methodBasePriceSetDocumentSku(basePriceSetDocument, sku) == MethodPrice.previous
                            WHEN CHANGED (methodBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                 CHANGED (priceOutRateBasePriceSetDocumentSku(basePriceSetDocument, sku)) OR
                                 CHANGED (RRPRateBasePriceSetDocumentSku(basePriceSetDocument, sku));

// Уценка

percentDiscountPriceSetDocumentSku (document, sku) <- prevPercentBPriceSetDocumentSku (document, sku)
    WHEN ASSIGNED(inPriceSetDocumentSku(document, sku));

priceAllowancePriceSetDocumentSku (discountPriceSetDocument, sku) =
                         IF sku IS Sku AND
                            discountPriceSetDocument IS DiscountPriceSetDocument AND
                            NOT discountPriceSetDocument IS BasePriceSetDocument
                         THEN priceBBasePriceSetDocumentSku(discountPriceSetDocument, sku)
                         ELSE priceBasePriceSetDocumentSku(discountPriceSetDocument, sku);

calcPriceDiscountPriceSetDocumentSku 'Цена без процентов' (discountPriceSetDocument, sku) = [X*(100-Y)/100]
                                                                                               (priceAllowancePriceSetDocumentSku (discountPriceSetDocument, sku),
                                                                                               overPercentDiscountPriceSetDocumentSku(discountPriceSetDocument, sku));

defaultPriceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku) = roundPriceCurrencySku(calcPriceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku), currencyPriceSetDocument(discountPriceSetDocument), sku);
priceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku) <- defaultPriceDiscountPriceSetDocumentSku(discountPriceSetDocument, sku)
                                        WHEN CHANGED(priceBasePriceSetDocumentSku(discountPriceSetDocument, sku)) OR
                                             CHANGED(percentDiscountPriceSetDocumentSku(discountPriceSetDocument, sku)) OR
                                             CHANGED(dateTimePriceSetDocumentSku(discountPriceSetDocument, sku));

// Состав фрахта
quantityPriceSetDocumentBrandSupplierArticle (priceSetDocument, brandSupplier) = GROUP SUM 1 IF inPriceSetDocumentArticle(priceSetDocument, article)
    BY priceSetDocument, brandSupplierArticle(article);

quantityPriceSetDocumentBrandSupplierSku (priceSetDocument, brandSupplier) = GROUP SUM 1 IF inPriceSetDocumentSku(priceSetDocument, sku)
    BY priceSetDocument, brandSupplierArticleSku(sku);

canonicalBrandPriceSetDocument 'Бренды' (priceSetDocument) = toString255(
    [GROUP CONCAT name(brandSupplier) IF (quantityPriceSetDocumentBrandSupplierArticle(priceSetDocument, brandSupplier) OR quantityPriceSetDocumentBrandSupplierSku(priceSetDocument, brandSupplier)), ' , '
           BY priceSetDocument
           ORDER brandSupplier](priceSetDocument)) MINCHARWIDTH 50 MAXCHARWIDTH 100 PREFCHARWIDTH 100 PERSISTENT;

// ------------------------------------------------- Значения для использования в операциях -------------------------------- //

// Артикул
priceBPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = OVERRIDE priceBBasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime), priceBDiscountPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime);

priceAPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime) = OVERRIDE priceABasePriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime), priceADiscountPriceSetDocumentArticleCurrencyDateTime(article, currency, dateTime);

// Sku
priceBPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = OVERRIDE priceBBasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime), priceBDiscountPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime);

priceAPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime) = OVERRIDE priceABasePriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime), priceADiscountPriceSetDocumentSkuCurrencyDateTime(sku, currency, dateTime);

// Цена на кассе
EXTEND CLASS SystemPriceListType { userPriceListType 'Продажная' }
priceSystemPriceListTypeSkuStockDateTime (listType, sku, departmentStore, dateTime) += priceBPriceSetDocumentSkuCurrencyDateTime(sku, currencyStock(departmentStore), dateTime) IF departmentStore IS DepartmentStore WHEN listType == SystemPriceListType.userPriceListType;
priceSystemPriceListTypeBatchStockDateTime (listType, batch, departmentStore, dateTime) += priceBPriceSetDocumentSkuCurrencyDateTime(skuBatch(batch), currencyStock(departmentStore), dateTime) IF departmentStore IS DepartmentStore WHEN listType == SystemPriceListType.userPriceListType;

// -------------------------------------------------- Форма истории изменения цен ------------------------------------- //

FORM logPriceArticle 'История цен'

    OBJECTS a=Article
    OBJECTS d=DiscountPriceSetDocument
    PROPERTIES(d, a) READONLY dateTimePriceSetDocumentArticle
    PROPERTIES(d, a) READONLY priceDiscountPriceSetDocumentArticle

    FILTERS inPriceSetDocumentArticle(d, a)

;

showFormLogPriceArticle 'История' (article) = ACTION FORM logPriceArticle OBJECTS a = article NEWSESSION MODAL;

// ------------------------------------------------- Форма по редактированию розничных прайсов --------------------------------- //

averagePriceSoldArticleWeekDateFromToDocument 'Средняя цена за неделю' (article, week, dateFrom, dateTo, priceSetDocument)=  roundPriceCurrency((sumSoldArticleWeekDateFromTo(article, week, dateFrom, dateTo) /
        quantitySoldArticleWeekDateFromTo(article, week, dateFrom, dateTo)), currencyPriceSetDocument(priceSetDocument));

averageSoldArticleWeekDateFromToDocument 'Продано за неделю кол-во/цена' (article, week, dateFrom, dateTo, priceSetDocument)= [FORMULA STRING[30] 'CAST($1 AS TEXT) || \'(\' || CAST($2 AS TEXT) || \')\'']
        (round0(quantitySoldArticleWeekDateFromTo(article, week, dateFrom, dateTo)), averagePriceSoldArticleWeekDateFromToDocument(article, week, dateFrom, dateTo, priceSetDocument)) MINCHARWIDTH 15 PREFCHARWIDTH 20;

articleSaleLedger (salesLedger) = articleSku(skuSaleLedger(salesLedger));


FORM priceSetDocument 'Розничный прайс'
    OBJECTS p=PriceSetDocument FIXED PANEL
    PROPERTIES(p) isPostedPriceSetDocument, objectClassName, nameNumeratorObject, numberObject, seriesObject, datePriceSetDocument, timePriceSetDocument,
                  dateTimeToPriceSetDocument, nameCurrencyPriceSetDocument, reasonPriceSetDocument

    OBJECTS dates = (dFrom = DATE, dTo = DATE) FIXED PANEL
    PROPERTIES OBJVALUE(dFrom), OBJVALUE(dTo)

    OBJECTS w = INTEGER
    FILTERS quantityArticleSoldWeekDateFromTo(w, dFrom, dTo)

    TREE treeSupplierBrand v=STRING[3], s=Supplier, b=BrandSupplier
    PROPERTIES READONLY OBJVALUE(v), supplierName = nameLegalEntity(s), name(b)
    ORDER BY supplierName

    TREE treeCategory vv=STRING[3], c=Category
    PROPERTIES READONLY OBJVALUE(vv), categoryName = name(c)
    ORDER BY categoryName

    TREE treeCategorySubCategory vvv=STRING[3], cs=CategorySupplier, sc=SubCategorySupplier
    PROPERTIES READONLY OBJVALUE(vvv), name(cs), name(sc)

    OBJECTS aa=Article
    PROPERTIES (aa)    READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle, nameSubCategorySupplierArticle, currentBalanceArticle
    PROPERTIES (p, aa) READONLY prevPriceDocumentBBasePriceSetDocumentArticle


    PROPERTIES        READONLY balanceBArticleDate(aa, dFrom), averageSoldArticleWeekDateFromToDocument(aa, w, dFrom, dTo, p)  COLUMNS (w) HEADER toString4(w),
                      quantitySoldArticleDateFromTo(aa, dFrom, dTo), balanceAArticleDate(aa, dTo)
    PROPERTIES (p,aa) prevPriceDocumentBDiscountPriceSetDocumentArticle READONLY, inPriceSetDocumentArticle, percentDiscountPriceSetDocumentArticle

    OBJECTS sl = SaleLedger
    PROPERTIES(sl) READONLY dateSaleLedger, dateTimeSaleLedger, nameStockSaleLedger, nameSkuSaleLedger, descriptionSaleLedger,
                           quantitySaleLedger, costSumSkuLedger, markupSumSaleLedger, sumVATSaleLedger, sumSaleLedger, averagePriceSaleLedger
    FILTERS isPostedSaleLedger(sl)
    FILTERS dateSaleLedger(sl) >= dFrom, dateSaleLedger(sl) <= dTo,
            articleSaleLedger(sl)== aa
    ORDER BY dateTimeSaleLedger

    FILTERGROUP filtersSold
        FILTER 'Показывать проданные за интервал' 'F11' sumSoldArticleDateFromTo(aa, dFrom, dTo)

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandArticle(s, b, aa), stringEqualsAll(vv),
            inArticleCategory(c, aa)

    FILTERS stringEqualsAll(vvv), inCategorySupplierSupplier(s, cs), inSubCategorySupplierCategorySupplier(cs, sc), inCategorySupplierSubCategorySupplierArticle(cs, sc, aa)//, inArticleSubCategorySupplier(sc, aa)

    OBJECTS ss=Sku
    PROPERTIES (ss)    READONLY FORCE GRID sidArticleSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem, currentBalanceSku
    PROPERTIES (p, ss) READONLY prevPriceDocumentBBasePriceSetDocumentSku, prevPriceDocumentBDiscountPriceSetDocumentSku
    PROPERTIES (p, ss) inPriceSetDocumentSku

    FILTERS stringEqualsAll(v), inBrandSupplier(s, b), inSupplierBrandSku(s, b, ss), stringEqualsAll(vv),
            inSkuCategory(c, ss)

    OBJECTS a=Article
    PROPERTIES (p, a) inPriceSetDocumentArticle,
                      dateTimePriceSetDocumentArticle, dateTimeToPriceSetDocumentArticle
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle
    PROPERTIES (p, a) priceInBasePriceSetDocumentArticle, markupBasePriceSetDocumentArticle, priceOutBasePriceSetDocumentArticle,
                      nameCurrencyBasePriceSetDocumentArticle, RRPBasePriceSetDocumentArticle, nameCurrencyRRPBasePriceSetDocumentArticle,
                      nameTypeExchangeBasePriceSetDocumentArticle, rateBasePriceSetDocumentArticle, rateRRPBasePriceSetDocumentArticle,
                      priceOutRateBasePriceSetDocumentArticle, RRPRateBasePriceSetDocumentArticle, prevPriceBBasePriceSetDocumentArticle,
                      nameMethodBasePriceSetDocumentArticle, priceBasePriceSetDocumentArticle

    PROPERTIES (p, a) percentDiscountPriceSetDocumentArticle, calcPriceDiscountPriceSetDocumentArticle, prevPriceBDiscountPriceSetDocumentArticle,
                      priceDiscountPriceSetDocumentArticle

    FILTERS inPriceSetDocumentArticle(p, a), inSupplierBrandArticle(s, b, a), inArticleCategory(c, a)

    FILTERGROUP filters
        FILTER 'Есть рекомендуемая цена' 'F7' RRPBasePriceSetDocumentArticle(p, a)
        FILTER 'Нет рекомендуемой цены' 'shift F7' hasNotRRPBasePriceSetDocumentArticle(p, a)

    FILTERGROUP filtersBalanceArticle
        FILTER 'Ненулевые остатки' 'F8' currentBalanceArticle(aa) DEFAULT
        FILTER 'Показывать отмеченные' 'F3' inPriceSetDocumentArticle(p,aa)

    FILTERGROUP filtersMethod
        FILTER 'Показывать без метода' 'F9' TRUE IF NOT methodBasePriceSetDocumentArticle(p, a)

    FILTERGROUP filtersBalanceSku
        FILTER 'Ненулевые остатки' 'F5' currentBalanceSku(ss) DEFAULT

    OBJECTS sk=Sku
    PROPERTIES (p, sk) inPriceSetDocumentSku,
                       dateTimePriceSetDocumentSku, dateTimeToPriceSetDocumentSku
    PROPERTIES(sk) READONLY FORCE GRID barcode, sidArticleSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem
    PROPERTIES (p, sk) priceInBasePriceSetDocumentSku, markupBasePriceSetDocumentSku, priceOutBasePriceSetDocumentSku, nameCurrencyBasePriceSetDocumentSku,
                       RRPBasePriceSetDocumentSku, nameCurrencyRRPBasePriceSetDocumentSku, nameTypeExchangeBasePriceSetDocumentSku,
                       rateBasePriceSetDocumentSku, rateRRPBasePriceSetDocumentSku, priceOutRateBasePriceSetDocumentSku, RRPRateBasePriceSetDocumentSku,
                       prevPriceBBasePriceSetDocumentSku, nameMethodBasePriceSetDocumentSku, priceBasePriceSetDocumentSku

    PROPERTIES (p, sk) percentDiscountPriceSetDocumentSku, calcPriceDiscountPriceSetDocumentSku, prevPriceBDiscountPriceSetDocumentSku,
                       priceDiscountPriceSetDocumentSku

    FILTERS inPriceSetDocumentSku(p, sk)

    FILTERGROUP filters
        FILTER 'Есть рекомендуемая цена' 'F4' RRPBasePriceSetDocumentSku(p, sk)
        FILTER 'Нет рекомендуемой цены' 'shift F4' hasNotRRPBasePriceSetDocumentSku(p, sk)

    FILTERGROUP filtersMethodSku
        FILTER 'Показывать без метода' 'F6' TRUE IF NOT methodBasePriceSetDocumentSku(p, sk)

    EVENTS
        ON OK prePostPriceSetDocument(p)

    EDIT PriceSetDocument OBJECT p
;

DESIGN priceSetDocument FROM DEFAULT {
    main {
        preferredSize = (1600, 1200);
        childConstraints = TO THE BOTTOM;
        NEW headerContainer {
            childConstraints = TO THE BOTTOM;
            NEW headerRow1 {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(isPostedPriceSetDocument);
                ADD PROPERTY(objectClassName) {
                    preferredCharWidth = 15;
                }
                ADD PROPERTY(nameNumeratorObject);
                ADD PROPERTY(numberObject);
                ADD PROPERTY(seriesObject);
                ADD PROPERTY(datePriceSetDocument);
                ADD PROPERTY(timePriceSetDocument);
                ADD PROPERTY(dateTimeToPriceSetDocument);
            }
            NEW headerRow2 {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(nameCurrencyPriceSetDocument);
                ADD PROPERTY(reasonPriceSetDocument);
            }
        }

        NEW allContainer {
            childConstraints = TO THE RIGHT;
            type = SPLITH;
            NEW treeContainer {
                childConstraints = TO THE BOTTOM;
                fillHorizontal = 1;
                ADD treeSupplierBrand.tree.box;
                ADD treeCategory.tree.box;
                ADD treeCategorySubCategory.tree.box;
            }
            NEW RightContainer {
                childConstraints = TO THE BOTTOM;
                ADD dates.box;
                REMOVE w.box;
                NEW specContainer{
                    type = TABBED;
                    fillHorizontal = 4;
                    NEW  articleContainer{
                        title = 'Артикул';
                        type = TABBED;
                        ADD a.box {title = 'Спецификация'; }
                        NEW saleContainer{
                            title = 'Подбор';
                            type = SPLITV;
                            ADD aa.box {
                                aa.grid {
                                    fillVertical = 2.5;
                                }
                            }
                            ADD sl.box {
                                sl.grid {
                                    fillVertical = 1;
                                }
                            }
                        }
                    }

                    NEW  skuContainer{
                        title = 'SKU';
                        type = TABBED;
                        ADD sk.box {title = 'Спецификация';}
                        ADD ss.box {title = 'Подбор';}

                    }
                }
            }
        }
    }

    ADD functions.box;

    PROPERTY(datePriceSetDocument) { background = #FFEEEE; }
    PROPERTY(timePriceSetDocument) { background = #FFEEEE; }
    PROPERTY(nameCurrencyPriceSetDocument) { background = #FFEEEE; }

    PROPERTY(formOk) {
        caption = 'Провести';
    }

    PROPERTY(formClose) {
        askConfirm = TRUE;
    }
    PROPERTY(balanceBArticleDate) {
        caption = 'Остаток на начало периода';
    }
    PROPERTY(balanceAArticleDate) {
        caption = 'Остаток на конец периода';
    }
}

// ------------------------------------------------ Формирование документов переоценки ----------------------------------- //

TABLE stockPriceSetDocument(Stock, PriceSetDocument);

userPriceChangeStockPriceSetDocument (stock, priceSetDocument) = DATA UserPriceChange (Stock, PriceSetDocument);
nameUserPriceChangeStockPriceSetDocument 'Документ переоценки' (stock, priceSetDocument) = descriptionUserPriceChange(
    userPriceChangeStockPriceSetDocument (stock, priceSetDocument)) MINCHARWIDTH 30 MAXCHARWIDTH 30 PREFCHARWIDTH 30;

createUserPriceChangeStockPriceSetDocument 'Создать документ переоценки' =  ACTION (stock, priceSetDocument) NEWSESSION {
    IF NOT userPriceChangeStockPriceSetDocument(stock, priceSetDocument) AND isPostedPriceSetDocument(priceSetDocument) AND stock IS DepartmentStore THEN {
        LOCAL priceDateTime = DATETIME ();
        SET priceDateTime() <- dateTimePriceSetDocument(priceSetDocument);

        ADDOBJ UserPriceChangePosted;
        FOR p == addedObject() DO {
            SET userPriceChangeStockPriceSetDocument(stock, priceSetDocument) <- p AS UserPriceChange;
            SET departmentStoreUserPriceChange(p) <- stock;
            SET dateUserPriceChange(p) <- datePriceSetDocument(priceSetDocument);
            SET timeUserPriceChange(p) <- timePriceSetDocument(priceSetDocument);
            SET noteUserPriceChange(p) <- [FORMULA STRING[200] 'CAST($1 AS TEXT) || \' \' || CAST($2 AS TEXT) ||  \' от \' || CAST($3 AS TEXT)'](
                                          objectClassName(priceSetDocument), seriesNumberObject(priceSetDocument), datePriceSetDocument(priceSetDocument));

            FOR balanceBASkuStockDateTime(sku, stock, priceDateTime()) !=0 AND overInPriceSetDocumentSku(priceSetDocument, sku)
                AND priceAPriceSetDocumentSkuCurrencyDateTime(sku, currencyStock(stock), priceDateTime()) != retailPriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime())
                AND isPostedPriceSetDocument(priceSetDocument) DO {
                ADDOBJ UserPriceChangeDetail;
                FOR  d == addedObject() DO {
                    SET userPriceChangeUserPriceChangeDetail(d) <- p AS UserPriceChange;
                    SET skuUserPriceChangeDetail(d) <- sku AS Sku;
                    SET quantityUserPriceChangeDetail(d) <- balanceBASkuStockDateTime(sku, stock, priceDateTime());

                    SET curImporterPriceUserPriceChangeDetail(d) <- importerPriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET curSupplierPriceUserPriceChangeDetail(d) <- supplierPriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET curRetailVATUserPriceChangeDetail(d) <- retailVATBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET curWareUserPriceChangeDetail(d) <- wareBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET curWarePriceUserPriceChangeDetail(d) <- warePriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET curRetailPriceUserPriceChangeDetail(d) <- retailPriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());

                    SET importerPriceUserPriceChangeDetail(d) <- importerPriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET supplierPriceUserPriceChangeDetail(d) <- supplierPriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET retailVATUserPriceChangeDetail(d) <- retailVATBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET wareUserPriceChangeDetail(d) <- wareBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET warePriceUserPriceChangeDetail(d) <- warePriceBSkuDepartmentStoreDateTime(sku, stock, priceDateTime());
                    SET retailPriceUserPriceChangeDetail(d) <- priceAPriceSetDocumentSkuCurrencyDateTime(sku, currencyStock(stock), priceDateTime());

                }
            }
        }
        FORM userPriceChange OBJECTS u = userPriceChangeStockPriceSetDocument (stock, priceSetDocument) MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC apply();
        }
    }
} CONFIRM;

// ------------------------------------------- Печать маркировки article -------------------------------------- //

quantityStockPriceSetDocumentArticle 'Кол-во' (stock, priceSetDocument, article) =
    GROUP SUM balanceBSkuStockDateTime(sku, stock, dateTimePriceSetDocument(priceSetDocument))
    BY stock, priceSetDocument, articleSku(sku);


quantityStockPriceSetDocument (stock, priceSetDocument) =
    GROUP SUM balanceBSkuStockDateTime(sku, stock, dateTimePriceSetDocument(priceSetDocument))
    IF overInPriceSetDocumentSku(priceSetDocument, sku)
    BY stock, priceSetDocument;
    
countStockPriceSetDocumentArticle(stock, priceSetDocument, article) = toInteger(quantityStockPriceSetDocumentArticle(stock, priceSetDocument, article));

shouldBePrintArticle(article) = DATA SESSION BOOLEAN (Article);

FORM priceArticlePriceSetDocumentPrint 'Цены для маркировки' PRINT

    OBJECTS s = Stock FIXED PANEL, p = PriceSetDocument FIXED PANEL, a = Article
    PROPERTIES(p, a) READONLY priceABasePriceSetDocumentArticle, priceADiscountPriceSetDocumentArticle
    PROPERTIES(s, p, a) READONLY countStockPriceSetDocumentArticle

    FILTERS shouldBePrintArticle(a)
;

printPricePriceSetDocumentArticle 'Печать цен для маркировки' = ACTION (stock, priceSetDocument, article) IF isPostedPriceSetDocument(priceSetDocument) THEN {
    SET shouldBePrintArticle(a) <- NULL;
    SET shouldBePrintArticle(a) <- TRUE IF (a == (article AS Article));
    FORM priceArticlePriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
}

printAllPricePriceSetDocumentArticle 'Печать цен для маркировки' = ACTION (stock, priceSetDocument) {
    SET shouldBePrintArticle(article) <- NULL;
    SET shouldBePrintArticle(article) <- TRUE IF (quantityStockPriceSetDocumentArticle(stock, priceSetDocument, article) AND
                                                  inPriceSetDocumentArticle(priceSetDocument, article));
    FORM priceArticlePriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
} TOOLBAR;

importPriceList 'Импорт (TEDDY)'= ACTION CUSTOM 'roman.actions.ImportPriceListActionProperty' TOOLBAR;

// ------------------------------------------- Печать маркировки sku -------------------------------------- //

quantityStockPriceSetDocumentSku 'Кол-во' (stock, priceSetDocument, sku) =
    GROUP SUM balanceBSkuStockDateTime(sku, stock, dateTimePriceSetDocument(priceSetDocument))
    BY stock, priceSetDocument, sku;

countStockPriceSetDocumentSku(stock, priceSetDocument, sku) = toInteger(quantityStockPriceSetDocumentSku(stock, priceSetDocument, sku));

shouldBePrintSku(sku) = DATA SESSION BOOLEAN (Sku);

FORM priceSkuPriceSetDocumentPrint 'Цены для маркировки' PRINT

    OBJECTS s = Stock FIXED PANEL, p = PriceSetDocument FIXED PANEL, sk = Sku
    PROPERTIES(p, sk) READONLY priceABasePriceSetDocumentSku, priceADiscountPriceSetDocumentSku
    PROPERTIES(s, p, sk) READONLY countStockPriceSetDocumentSku

    FILTERS shouldBePrintSku(sk)
;

printPricePriceSetDocumentSku 'Печать цен для маркировки' = ACTION (stock, priceSetDocument, sku) IF isPostedPriceSetDocument(priceSetDocument) THEN {
    SET shouldBePrintSku(sk) <- NULL;
    SET shouldBePrintSku(sk) <- TRUE IF (sk == (sku AS Sku));
    FORM priceSkuPriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
}

printAllPricePriceSetDocumentSku 'Печать цен для маркировки' = ACTION (stock, priceSetDocument) {
    SET shouldBePrintSku(sku) <- NULL;
    SET shouldBePrintSku(sku) <- TRUE IF (quantityStockPriceSetDocumentSku(stock, priceSetDocument, sku) AND
                                                  inPriceSetDocumentSku(priceSetDocument, sku));
    FORM priceSkuPriceSetDocumentPrint OBJECTS s = stock, p = priceSetDocument MODAL;
} TOOLBAR;


FORM priceSetDocuments 'Розничные прайсы'

    OBJECTS p=PriceSetDocument
    PROPERTIES(p) READONLY statusPriceSetDocument, objectClassName, numberObject, seriesObject, datePriceSetDocument,
                           timePriceSetDocument, dateTimeToPriceSetDocument, nameCurrencyPriceSetDocument, canonicalBrandPriceSetDocument, reasonPriceSetDocument
    PROPERTIES() importPriceList FORCE PANEL TODRAW p
    PROPERTIES(p) ADDFORM, EDITFORM, deletep=DELETE FORCE PANEL TOOLBAR

    TREE stockTree sg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = nameStockGroup(sg)

    OBJECTS ts = Stock.Stock
    PROPERTIES    READONLY tsTreeName = nameStock(ts)

    FILTERS isParentStockGroupStock(sg, ts)

    OBJECTS a=Article
    PROPERTIES(a) READONLY sidArticle, nameCategoryArticle, nameBrandSupplierArticle

    PROPERTIES (p, a) READONLY priceInBasePriceSetDocumentArticle, markupBasePriceSetDocumentArticle, priceOutBasePriceSetDocumentArticle,
                      nameCurrencyBasePriceSetDocumentArticle, RRPBasePriceSetDocumentArticle, nameCurrencyRRPBasePriceSetDocumentArticle,
                      nameTypeExchangeBasePriceSetDocumentArticle, rateBasePriceSetDocumentArticle, rateRRPBasePriceSetDocumentArticle,
                      priceOutRateBasePriceSetDocumentArticle, RRPRateBasePriceSetDocumentArticle, prevPriceBBasePriceSetDocumentArticle,
                      nameMethodBasePriceSetDocumentArticle, priceBasePriceSetDocumentArticle, percentDiscountPriceSetDocumentArticle,
                      calcPriceDiscountPriceSetDocumentArticle, prevPriceBDiscountPriceSetDocumentArticle, priceDiscountPriceSetDocumentArticle

    PROPERTIES(ts, p) createUserPriceChangeStockPriceSetDocument FORCE GRID
    PROPERTIES(ts, p) READONLY nameUserPriceChangeStockPriceSetDocument

    PROPERTIES(ts, p, a) READONLY quantityStockPriceSetDocumentArticle

    PROPERTIES(ts, p, a) printPricePriceSetDocumentArticle

    PROPERTIES(ts, p) printAllPricePriceSetDocumentArticle TODRAW a FORCE PANEL

    FILTERS inPriceSetDocumentArticle(p, a)
    FILTERGROUP filters1
        FILTER 'Склады с остатками' 'F10' quantityStockPriceSetDocument(ts, p) DEFAULT

    OBJECTS sk=Sku
    PROPERTIES(sk) READONLY FORCE GRID barcode, sidArticleSku, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidSizeSupplierItem, sidColorSupplierItem
    PROPERTIES (p, sk) READONLY priceInBasePriceSetDocumentSku, markupBasePriceSetDocumentSku, priceOutBasePriceSetDocumentSku,
                       nameCurrencyBasePriceSetDocumentSku, RRPBasePriceSetDocumentSku, nameCurrencyRRPBasePriceSetDocumentSku,
                       nameTypeExchangeBasePriceSetDocumentSku, rateBasePriceSetDocumentSku, rateRRPBasePriceSetDocumentSku,
                       priceOutRateBasePriceSetDocumentSku, RRPRateBasePriceSetDocumentSku, prevPriceBBasePriceSetDocumentSku,
                       nameMethodBasePriceSetDocumentSku, priceBasePriceSetDocumentSku, percentDiscountPriceSetDocumentSku,
                       calcPriceDiscountPriceSetDocumentSku, prevPriceBDiscountPriceSetDocumentSku, priceDiscountPriceSetDocumentSku

    PROPERTIES(ts, p, sk) READONLY quantityStockPriceSetDocumentSku
    PROPERTIES(ts, p, sk) printPricePriceSetDocumentSku
    PROPERTIES(ts, p) printAllPricePriceSetDocumentSku TODRAW sk FORCE PANEL

    FILTERS inPriceSetDocumentSku(p, sk)
;

DESIGN priceSetDocuments FROM DEFAULT {

    NEW topContainer {

        type = SPLITV;
        ADD p.box;
        NEW firstContainer{
            type = SPLITV;
            NEW secondContainer{
                type = SPLITH;
                childConstraints = TO THE RIGHT;
                ADD stockTree.tree.box { title = 'Склады'; }
                ADD ts.box { title = 'Склад'; }
            }

            NEW bottomContainer {
                type = TABBED;
                ADD a.box {
                    fillVertical = 3;
                };

                ADD sk.box {
                    fillVertical = 3;
                };
            }
        }
    }

    ADD functions.box;
    PROPERTY (deletep) {
        askConfirm = TRUE;
    }
    PROPERTY(objectClassName) {
        preferredCharWidth = 10;
    }
}

// -------------------------------------------- Расценка фрахтов ------------------------------------------ //

quantityPriceSetDocumentFreight (freight) = GROUP SUM 1 IF freightBasePriceSetDocument(basePriceSetDocument) BY freightBasePriceSetDocument(basePriceSetDocument);

isPriceSetFreightImporter 'Статус' (freight, importer) = IF basePriceSetDocumentFreightImporter (freight, importer)
                                     THEN 'Расценен' IF freight IS Freight AND importer IS Importer
                                     ELSE 'Не расценен' IF freight IS Freight AND importer IS Importer MINCHARWIDTH 11;

quantityImportersFreight (freight) = GROUP SUM 1 IF quantityImporterFreight (importer, freight) BY freight IF importer IS Importer;

quantityNeededPriceSetDocumentFreight (freight) = GROUP SUM 1 IF quantityImporterFreight (importer, freight)
    AND NOT basePriceSetDocumentFreightImporter(freight, importer) BY freight IF importer IS Importer;

needPriceSetDocumentFreight (freight) = TRUE IF NOT
    (quantityImportersFreight (freight) (-) quantityNeededPriceSetDocumentFreight(freight)) == quantityImportersFreight (freight);

isPriceSetFreight 'Статус' (freight) = IF needPriceSetDocumentFreight (freight)
                                        THEN 'Не расценен' IF freight IS Freight
                                        ELSE
                                            IF  quantityNeededPriceSetDocumentFreight (freight)
                                            THEN 'Расценен частично' IF freight IS Freight
                                            ELSE 'Расценен' IF freight IS Freight MINCHARWIDTH 11;

backgroundPriceSetDocumentFreightImporter 'Цвет' (freight, importer) = RGB(212,255,212)
    IF freight IS Freight AND importer IS Importer AND NOT basePriceSetDocumentFreightImporter(freight, importer);

backgroundPriceSetDocumentFreight 'Цвет' (freight) = RGB(212,255,212)
    IF freight IS Freight AND needPriceSetDocumentFreight (freight);

typeExchangeRetailCurrency =  DATA TypeExchange(Currency);
nameTypeExchangeRetailCurrency 'Тип обмена для розницы' (currency) = nameTypeExchange(typeExchangeRetailCurrency(currency));
EXTEND FORM currency PROPERTIES(c) nameTypeExchangeRetailCurrency;
EXTEND FORM currencies PROPERTIES(c) READONLY nameTypeExchangeRetailCurrency;

// розничный прайс по фрахту
createPriceSetDocument 'Расценить по артикулам' =  ACTION (freight, importer) NEWSESSION {
    FOR ADDOBJ p = BasePriceSetDocument DO {
        SET freightBasePriceSetDocument(p) <- freight;
        SET importerBasePriceSetDocument(p) <- importer;
        SET currencyPriceSetDocument(p) <- currencyCountryFreight(freight);
        SET inPriceSetDocumentArticle(p, article) <- TRUE IF quantityImporterFreightArticle(importer, freight, article);
        SET priceInBasePriceSetDocumentArticle(p, article) <- priceInImporterFreightArticle(importer, freight, article);
        SET currencyBasePriceSetDocumentArticle(p, article) <- currencyFreight(freight) WHERE inPriceSetDocumentArticle(p, article);
        SET typeExchangeBasePriceSetDocumentArticle(p, article) <- typeExchangeRetailCurrency(currencyFreight(freight)) WHERE inPriceSetDocumentArticle(p, article);
        SET markupBasePriceSetDocumentArticle(p, article) <- markupCoefficientBrandRetailArticleDate(article, date(freight)) WHERE inPriceSetDocumentArticle(p, article);
        SET currencyRRPBasePriceSetDocumentArticle(p, article) <- currencyRRPImporterFreightArticle(importer, freight, article);
        SET RRPBasePriceSetDocumentArticle(p, article) <- RRPImporterFreightArticle(importer, freight, article);

        FORM priceSetDocument OBJECTS p = p MANAGESESSION DOCKEDMODAL;
    }
} TOOLBAR;


createPriceSetDocumentSku 'Расценить по товарам' =  ACTION (freight, importer) NEWSESSION {
    FOR ADDOBJ p = BasePriceSetDocument DO {
        SET freightBasePriceSetDocument(p) <- freight AS Freight;
        SET importerBasePriceSetDocument(p) <- importer;
        SET currencyPriceSetDocument(p) <- currencyCountryFreight(freight);
        SET inPriceSetDocumentSku(p, sku) <- TRUE IF quantityImporterFreightSku(importer, freight, sku);
        SET priceInBasePriceSetDocumentSku(p, sku) <- priceInImporterFreightSku(importer, freight, sku);
        SET currencyBasePriceSetDocumentSku(p, sku) <- currencyFreight(freight) WHERE inPriceSetDocumentSku(p, sku);
        SET typeExchangeBasePriceSetDocumentSku(p, sku) <- typeExchangeRetailCurrency(currencyFreight(freight)) WHERE inPriceSetDocumentSku(p, sku);
        SET currencyRRPBasePriceSetDocumentSku(p, sku) <- currencyRRPInImporterFreightSku(importer, freight, sku);
        SET RRPBasePriceSetDocumentSku(p, sku) <- RRPInImporterFreightSku(importer, freight, sku);
        SET markupBasePriceSetDocumentSku (p, sku) <- markupCoefficientBrandRetailSkuDate(sku, date(freight)) WHERE inPriceSetDocumentSku(p, sku);

        FORM priceSetDocument OBJECTS p = p MANAGESESSION DOCKEDMODAL;
    };
} TOOLBAR;


//Печать марккировки
imageLabelSku (sku) = imageLabel() IF sku IS Sku;

countSku = DATA SESSION INTEGER (Sku);

FORM printMarksDocument 'Печать маркировок товара' PRINT

    OBJECTS dt = DATETIME FIXED PANEL
    PROPERTIES(dt) OBJVALUE

    OBJECTS imp = Company FIXED PANEL
    PROPERTIES(imp) OBJVALUE, nameLegalEntity, addressLegalEntity, languageLegalEntity, localeLanguageCompany

    OBJECTS c = Currency FIXED PANEL
    PROPERTIES(c) nameCurrency, shortNameCurrency

    OBJECTS s = Sku
    PROPERTIES(s) READONLY sidArticleSku, sidSizeSupplierItem, nameCommonSizeSku, sidGenderArticleSku, sidTypeLabelArticleSku,
                  nameCategoryArticleSku, mainCompositionSku, additionalCompositionSku, nameCountryBrandSupplierSku, nameBrandSupplierArticleSku,
                  barcode, nameCountrySku, sidColorSupplierItem, nameColorSupplierItem, translateNameColorSupplierItem,
                  nameSupplierArticleSku, addressSupplierArticleSku, warrantySku, imageLabelSku, countSku

    ORDER BY sidArticleSku, sidColorSupplierItem, sidSizeSupplierItem

    PROPERTIES(s, imp)     READONLY mainCompositionSkuCompany, additionalCompositionSkuCompany, nameCategoryArticleSkuCompany, sidGenderArticleSkuCompany,
                           nameCountrySkuCompany, nameCountryBrandSupplierSkuCompany

    PROPERTIES(s, c, dt)   priceABasePriceSetDocumentSkuCurrencyDateTime, priceADiscountPriceSetDocumentSkuCurrencyDateTime
    PROPERTIES(imp, s)     nameImporterSku, addressImporterSku

    FILTERS shouldBePrintSku(s)
;

printMarksSkuPriceSetDocument 'Печать маркировок товаров' (priceSetDocument) = ACTION (priceSetDocument) {

    SET shouldBePrintSku(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintSku(sku) <- TRUE IF quantityFreightSku(freightBasePriceSetDocument(priceSetDocument), sku);
    SET countSku(sku) <- toInteger(quantityFreightSku(freightBasePriceSetDocument(priceSetDocument), sku));
    FORM printMarksDocument OBJECTS dt = dateTimePriceSetDocument(priceSetDocument), c = currencyPriceSetDocument(priceSetDocument) MODAL;            //imp = companyStock(stockWHfromCSR(WHfromCSR)),

} CONFIRM;


printMarksSkuFreight 'Печать маркировок товаров' (freight, importer) = ACTION (freight, importer) {

    SET shouldBePrintSku(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintSku(sku) <- TRUE IF quantityImporterFreightSku(importer, freight, sku);
    SET countSku(sku) <- toInteger(quantityImporterFreightSku(importer, freight, sku));
    FORM printMarksDocument OBJECTS dt = dateTimePriceSetDocument (basePriceSetDocumentFreightImporter(freight, importer)),
        imp = importer, c = currencyPriceSetDocument(basePriceSetDocumentFreightImporter(freight, importer)) MODAL;

} CONFIRM TOOLBAR;

FORM freights 'Расценка фрахтов'

    OBJECTS f = FreightComplete
    PROPERTIES(f) READONLY numberObject, seriesObject, date, dateArrivalFreight, objectClassName,
                  canonicalBrandFreight, nameRouteFreight, nameExporterFreight, grossWeightFreight
    PROPERTIES (f) isPriceSetFreight BACKGROUND backgroundPriceSetDocumentFreight(f)


    FILTERGROUP filtersDocument
        FILTER 'Показывать нерасценённые фрахты' 'F11' needPriceSetDocumentFreight(f)

    OBJECTS i = Importer
    PROPERTIES(f, i) READONLY isPriceSetFreightImporter BACKGROUND backgroundPriceSetDocumentFreightImporter(f, i)
    PROPERTIES(i) READONLY name, sidImporter
    PROPERTIES (f, i) FORCE PANEL printMarksSkuFreight SHOWIF basePriceSetDocumentFreightImporter (f,i)
    PROPERTIES (f, i) createPriceSetDocument SHOWIF needPriceSetDocumentFreight(f),
                     createPriceSetDocumentSku SHOWIF needPriceSetDocumentFreight(f)

    FILTERS quantityImporterFreight (i, f)
;
