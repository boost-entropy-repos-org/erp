MODULE CStoWH;

REQUIRE System,

        Stock,
        Numerator,
        Document,
        RomanDocument,
        ConsignmentBy,
        Declaration,
        RomanMasterData,
        RomanStock,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule, Utils, Store;

CLASS CStoWH 'Расход с СВХ' : Historizable, NumberedObject;
CLASS CStoWHDetail 'Строка расхода с СВХ';
CLASS CStoWHPosted 'Проведенный расход с СВХ' : CStoWH, PostedObject;

@defineDocument(CStoWH);

@defineDocumentStock(CStoWH, customStore, 'СВХ');
@defineDocumentStock(CStoWH, stock, 'Склад-получатель', destination);
//@defineDocumentStock(CStoWH, stock, 'Склад');

@defineDocumentPosted(CStoWH);
@defineDocumentDescription (CStoWH, 'Расход с СВХ');

@defineDocumentDetailNumber(CStoWH);

declarationDetailCStoWHDetail = DATA DeclarationDetail (CStoWHDetail) NOT NULL;
skuCStoWHDetail (CStoWHDetail) = skuDeclarationDetail (declarationDetailCStoWHDetail(CStoWHDetail));
declarationCStoWHDetail (CStoWHDetail) = declarationDeclarationDetail(declarationDetailCStoWHDetail(CStoWHDetail));

@defineDocumentDetailSkuArticle (CStoWH);

@defineDocumentDetailQuantity(CStoWH);

@defineDocumentHeaderQuantity(CStoWH);
@defineDocumentHeaderSkuQuantity(CStoWH, sku);

freightUnitCStoWHDetail (CStoWHDetail) = DATA FreightUnit(CStoWHDetail);
barcodeFreightUnitCStoWHDetail 'Штрих-код короба' (CStoWHDetail) = barcode(freightUnitCStoWHDetail(CStoWHDetail));
destinationCStoWHDetail (CStoWHDetail) = destinationFreightUnit(freightUnitCStoWHDetail(CStoWHDetail));
nameDestinationCStoWHDetail 'Пункт назначения' (CStoWHDetail) = nameDestinationFreightUnit(freightUnitCStoWHDetail(CStoWHDetail));

netWeightCStoWHDetail 'Вес нетто (ед.)' (CStoWHDetail) = netWeightDeclarationDetail(declarationDetailCStoWHDetail(CStoWHDetail));
sumNetWeightCStoWHDetail 'Вес нетто' (CStoWHDetail) = netWeightCStoWHDetail(CStoWHDetail)*quantityCStoWHDetail(CStoWHDetail);
sumGrossWeightCStoWHDetail 'Вес брутто' (CStoWHDetail) =
    grossWeightDeclarationDetail(declarationDetailCStoWHDetail(CStoWHDetail)) * quantityCStoWHDetail(CStoWHDetail);

priceCStoWHDetail 'Цена' (CStoWHDetail) = supplierPriceDeclarationDetail (declarationDetailCStoWHDetail(CStoWHDetail));
sumCStoWHDetail 'Стоимость' (CStoWHDetail) = priceCStoWHDetail(CStoWHDetail) * quantityCStoWHDetail(CStoWHDetail) PERSISTENT;
sumCStoWHDetailCStoWH 'Общая стоимость' (CStoWH) =
    GROUP SUM sumCStoWHDetail(CStoWHDetail) BY CStoWHCStoWHDetail(CStoWHDetail) IN documentSumGroup PERSISTENT  MINCHARWIDTH 15 PREFCHARWIDTH 15;

@implementSkuLedgerOutFIFO(CStoWHDetail, sku, customStore);
quantityOutFIFOSkuLedger(outUserSkuLedger) += quantityCStoWHDetail (outUserSkuLedger);
limitOutFIFOSkuLedgerBatch(outUserSkuLedger, batch) += quantityCStoWHDetail(outUserSkuLedger) IF batch == declarationDetailCStoWHDetail (outUserSkuLedger);
sumOutSkuLedger(outUserSkuLedger) += sumCStoWHDetail(outUserSkuLedger);

quantityCStoWHBatch (CStoWH, batch) =
    GROUP SUM quantityCStoWHDetail(CStoWHDetail)
    BY CStoWHCStoWHDetail(CStoWHDetail), declarationDetailCStoWHDetail(CStoWHDetail);

quantitySkuCStoWH (sku, CStoWH) =
    GROUP SUM quantityCStoWHDetail (CStoWHDetail)
    BY skuCStoWHDetail(CStoWHDetail), CStoWHCStoWHDetail(CStoWHDetail);

quantitySkuFreightUnitCStoWH (sku, freightUnit, CStoWH) =
    GROUP SUM quantityCStoWHDetail (CStoWHDetail)
    BY skuCStoWHDetail(CStoWHDetail), freightUnitCStoWHDetail(CStoWHDetail), CStoWHCStoWHDetail(CStoWHDetail);


// подбор строк для расхода

expenseFreightUnitDeclarationDetail 'Расход' (freightUnit, declarationDetail) = GROUP SUM quantityCStoWHDetail(CStoWHDetail) IF isPostedCStoWHDetail(CStoWHDetail)
    BY freightUnitCStoWHDetail(CStoWHDetail), declarationDetailCStoWHDetail(CStoWHDetail);

currentBalanceFreightUnitDeclarationDetail 'Текущий остаток' (freightUnit, declarationDetail) =
    inFreightUnitDeclarationDetail(freightUnit, declarationDetail) (-)                   // приход
    quantityCertificatedFreightUnitDeclarationDetail(freightUnit, declarationDetail) (-) // на сертификацию
    expenseFreightUnitDeclarationDetail(freightUnit, declarationDetail);                 // отгрузка

currentBalanceDeclarationFreightUnit 'Текущий остаток' (declaration, freightUnit) = GROUP SUM currentBalanceFreightUnitDeclarationDetail(freightUnit, declarationDetail)
                                                                      BY declarationDeclarationDetail(declarationDetail), freightUnit;

currentBalanceDeclaration 'Текущий остаток' (declaration) = GROUP SUM currentBalanceDeclarationFreightUnit(declaration, freightUnit)
                                                                      BY declaration;


isAvailableDeclarationCStoWH 'Декларация доступна для расхода' (declaration, CStoWH) =
    declaration IS RegisteredDeclaration AND
    currentBalanceDeclaration (declaration)>0 AND
    dateTimeCStoWH(CStoWH) >= dateTimeDeclaration(declaration) AND
    customStoreCStoWH(CStoWH)==customStoreDeclaration(declaration) AND
    legalEntityStock(destinationStockCStoWH(CStoWH))==importerDeclaration(declaration);

isCustomsDeclarationCStoWH 'Отгрузка с СВХ декларации' (declaration, CStoWH) =
    customStoreDeclaration (declaration) == customStoreCStoWH (CStoWH);

inCStoWHDeclaration (CStoWH, declaration) = GROUP SUM 1
    IF declarationCStoWHDetail(CStoWHDetail) == declaration AS Declaration
        AND CStoWHCStoWHDetail (CStoWHDetail) == CStoWH AS CStoWH
    BY CStoWHCStoWHDetail(CStoWHDetail), declarationCStoWHDetail(CStoWHDetail);

//declarationsCStoWH 'Декларации' (CStoWH) = GROUP CONCAT toString255(sidDeclaration(declaration))
//    IF inCStoWHDeclaration (CStoWH, declaration), ', ' BY CStoWH IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;

declarationsCStoWH 'Декларации' (CStoWH) =
    GROUP CONCAT toString255([FORMULA STRING[30] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) '] (sidDeclaration(declaration), dateDeclaration(declaration)))
                 IF inCStoWHDeclaration (CStoWH, declaration), ', '
          BY CStoWH
          ORDER declaration IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;

quantityInputFreightUnitDeclarationDetail 'Кол-во подобрано' = DATA SESSION NUMERIC[14,3] (FreightUnit, DeclarationDetail);

quantityInputDeclarationFreightUnit 'Кол-во подобрано' (declaration, freightUnit) = GROUP SUM quantityInputFreightUnitDeclarationDetail(freightUnit, declarationDetail)
    BY declarationDeclarationDetail(declarationDetail), freightUnit;

quantityInputDeclaration 'Кол-во подобрано' (declaration) =  GROUP SUM quantityInputDeclarationFreightUnit(declaration, freightUnit)
    BY declaration;


isInputDeclarationDetail 'Вкл' = DATA SESSION BOOLEAN (DeclarationDetail);

toFillQuantityInputAllDeclarationDetails 'Проставить количество' (declaration) = ACTION (declaration) {
    FOR currentBalanceDeclarationFreightUnit(declaration, freightUnit) IF currentBalanceFreightUnitDeclarationDetail(freightUnit, declarationDetail) DO {
            SET quantityInputFreightUnitDeclarationDetail (freightUnit, declarationDetail) <- currentBalanceFreightUnitDeclarationDetail (freightUnit, declarationDetail);
    }
}

toFillQuantityInputDetailDeclarationFreightUnit 'Проставить количество' (declaration, freightUnit) = ACTION (declaration, freightUnit) {
    IF currentBalanceDeclarationFreightUnit(declaration, freightUnit) THEN {
        FOR currentBalanceFreightUnitDeclarationDetail(freightUnit, declarationDetail) DO {
            SET quantityInputFreightUnitDeclarationDetail (freightUnit, declarationDetail) <- currentBalanceFreightUnitDeclarationDetail (freightUnit, declarationDetail);
        }
    }
}


inCStoWHInnerInvoice (CStoWH, innerInvoice) = GROUP SUM quantityDeclarationDetail(declarationDetailCStoWHDetail(CStoWHDetail))
                                                     BY CStoWHCStoWHDetail(CStoWHDetail), innerInvoiceDeclarationDetail(declarationDetailCStoWHDetail(CStoWHDetail));

//inCStoWHInnerInvoice (CStoWH, innerInvoice) = GROUP SUM inDeclarationDetailInnerInvoice (declarationDetailCStoWHDetail(CStoWHDetail), innerInvoice)
//    BY CStoWHCStoWHDetail(CStoWHDetail), innerInvoice;

//stringInnerInvoice (innerInvoice) =
//    [FORMULA STRING[30] 'CAST($1 AS TEXT) ||  \' от \' || CAST($2 AS TEXT) '] (
//    sidInnerInvoice(innerInvoice), dateInnerInvoice(innerInvoice));

innerInvoicesCStoWH 'Инвойсы' (CStoWH) =
    GROUP CONCAT stringInnerInvoice(innerInvoice) IF inCStoWHInnerInvoice (CStoWH, innerInvoice), ', '
          BY CStoWH
          ORDER innerInvoice IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;

declarationCurrencyCStoWHDetail 'Валюта (ИД)' (CStoWHDetail) = currencyDeclaration(declarationCStoWHDetail(CStoWHDetail));
declarationCurrencyCStoWH (CStoWH) = GROUP EQUAL declarationCurrencyCStoWHDetail(CStoWHDetail) BY CStoWHCStoWHDetail(CStoWHDetail);
shortNameDeclarationCurrencyCStoWH 'Валюта декларации' (CStoWH) = shortNameCurrency(declarationCurrencyCStoWH(CStoWH)) IN documentPrmGroup;

printSumCStoWHDetail 'Стоимость для печати накладной' (CStoWHDetail)= roundPriceCurrency(sumCStoWHDetail(CStoWHDetail)/rateExchangeCustomDeclarationDetail(declarationDetailCStoWHDetail(CStoWHDetail)), declarationCurrencyCStoWHDetail(CStoWHDetail)) PERSISTENT;

@defineDocumentCurrency(CStoWH);
@deriveDocumentCurrency(CStoWH, destinationStock);

// кол-во отгруженного товара по коробам и sku
quantityCStoWHFreightUnitSku(CStoWH, freightUnit, sku) = GROUP SUM quantityCStoWHDetail(CStoWHDetail)
    BY CStoWHCStoWHDetail(CStoWHDetail), freightUnitCStoWHDetail(CStoWHDetail), skuCStoWHDetail(CStoWHDetail);

FORM declarationDetailCStoWHInput 'Подбор строк декларации'
    OBJECTS c=CStoWH FIXED PANEL
    PROPERTIES (c) numberObject, seriesObject

    OBJECTS d=Declaration
    PROPERTIES(d) READONLY objectClassName, nameCustomStoreDeclaration, sidDeclaration, currentBalanceDeclaration, quantityInputDeclaration, canonicalBrandDeclaration
    PROPERTIES(d) toFillQuantityInputAllDeclarationDetails

    OBJECTS f=FreightUnit
    PROPERTIES READONLY barcodeFreightUnit = barcode(f), nameDestinationFreightUnit(f) FORCE GRID, currentBalanceDeclarationFreightUnit(d, f)
    PROPERTIES(d, f)    quantityInputDeclarationFreightUnit READONLY, toFillQuantityInputDetailDeclarationFreightUnit

    OBJECTS dd=DeclarationDetail
    PROPERTIES (dd) READONLY barcodeDeclarationDetail, nameBrandDeclarationDetail, sidArticleDeclarationDetail,
                             sidColorDeclarationDetail, nameCategoryDeclarationDetail, mainCompositionDeclarationDetail,
                             nameCountryDeclarationDetail, sidCustomCategory10DeclarationDetail
    PROPERTIES (f, dd) currentBalanceFreightUnitDeclarationDetail READONLY, quantityInputFreightUnitDeclarationDetail

    FILTERS isAvailableDeclarationCStoWH (d, c),
            currentBalanceDeclarationFreightUnit(d, f),
            currentBalanceFreightUnitDeclarationDetail(f, dd)
;

DESIGN declarationDetailCStoWHInput FROM DEFAULT {
    main {
        f.box {
            title = 'Короба';
        }
    }
}

inputDeclarationDetailCStoWH 'Подбор строк декларации' = ACTION (CStoWH) {
    FORM declarationDetailCStoWHInput MODAL;
        IF formResult() == FormResult.ok THEN {
            FOR qty == quantityInputFreightUnitDeclarationDetail (freightUnit, declarationDetail) ADDOBJ cd=CStoWHDetail DO {
                SET CStoWHCStoWHDetail(cd) <- CStoWH;
                SET declarationDetailCStoWHDetail(cd) <- declarationDetail;
                SET quantityCStoWHDetail(cd) <- qty;
                SET freightUnitCStoWHDetail(cd) <- freightUnit;
                }
            }
        SET quantityInputFreightUnitDeclarationDetail(freightUnit, declarationDetail) <- NULL;
} TOOLBAR;

//@defineAddDetailDialogBarcode(CStoWH, sku);
//@defineAddDetailDialogTerminal(WHtoS);

FORM CStoWH 'Расход с СВХ'
    OBJECTS c = CStoWH FIXED PANEL
    PROPERTIES (c) objectClassName, numberObject, seriesObject, dateCStoWH, timeCStoWH, nameCustomStoreCStoWH, nameDestinationStockCStoWH,
                   inputDeclarationDetailCStoWH, shortNameDeclarationCurrencyCStoWH, nameCurrencyCStoWH

    PROPERTIES (c) READONLY declarationsCStoWH, innerInvoicesCStoWH, quantityCStoWHDetailCStoWH, sumCStoWHDetailCStoWH

    OBJECTS d = CStoWHDetail
    PROPERTIES(d) READONLY indexCStoWHDetail, barcodeCStoWHDetail, nameCategoryCStoWHDetail, nameBrandCStoWHDetail, sidArticleCStoWHDetail,
                  sidSizeCStoWHDetail, sidColorCStoWHDetail, nameColorCStoWHDetail, barcodeFreightUnitCStoWHDetail, nameDestinationCStoWHDetail,
                  sumNetWeightCStoWHDetail, sumGrossWeightCStoWHDetail, quantityCStoWHDetail, priceCStoWHDetail, sumCStoWHDetail
    PROPERTIES(d) DELETESESSION
    PROPERTIES(c) TODRAW d deleteCStoWHDetailCStoWH

    FILTERS inCStoWHCStoWHDetail(c, d)

    EVENTS
        ON OK prePostCStoWH(c)

    EDIT CStoWH OBJECT c
;

DESIGN CStoWH FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        c.box {
            childConstraints = TO THE RIGHT;
            NEW columnHeaderPrm {
                childConstraints = TO THE BOTTOM;
                ADD c.documentHeaderGroup {
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY (objectClassName);
                    ADD PROPERTY (nameCustomStoreCStoWH);
                    ADD PROPERTY (nameDestinationStockCStoWH);
                    ADD PROPERTY (numberObject);
                    ADD PROPERTY (seriesObject);
                    ADD PROPERTY (dateCStoWH);
                    ADD PROPERTY (timeCStoWH);
                }
                NEW row12 {
                    childConstraints = TO THE RIGHT;
                    ADD c.documentPrmGroup {
                        title = 'Справочная информация';
                        childConstraints = TO THE RIGHT;
                    }
                    NEW columnHeaderDeclaration {
                        title = 'Декларации';
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY(inputDeclarationDetailCStoWH);
                        ADD PROPERTY(declarationsCStoWH);
                    }
                }
            }
            NEW columnHeaderSum {
                ADD c.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }
    }
    PROPERTY(formOk) {
        caption = 'Провести';
    }

    PROPERTY(nameCustomStoreCStoWH) { background = #FFEEEE; }
    PROPERTY(nameDestinationStockCStoWH) { background = #FFEEEE; }
}

FORM CStoWHs 'Расходы с СВХ'
    OBJECTS t = CStoWH
    PROPERTIES (t) READONLY objectClassName, numberObject, seriesObject, dateCStoWH, timeCStoWH, nameCustomStoreCStoWH,
                            nameDestinationStockCStoWH, declarationsCStoWH, innerInvoicesCStoWH, quantityCStoWHDetailCStoWH, sumCStoWHDetailCStoWH

    PROPERTIES (t) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (t) ADDFORM, EDITFORM, deletet=DELETE FORCE PANEL TOOLBAR

    PROPERTIES (t)  FORCE PANEL printConsignmentVerticalA, printConsignmentHorizontalA,
                     printConsignmentVerticalB, printConsignmentHorizontalB,
                     printConsignmentSimpleHorizontal, editConsignment,
                     printConsignmentSimpleVertical

    OBJECTS d = CStoWHDetail
    PROPERTIES(d) READONLY indexCStoWHDetail, barcodeCStoWHDetail, nameCategoryCStoWHDetail, nameBrandCStoWHDetail, sidArticleCStoWHDetail,
                  sidSizeCStoWHDetail, sidColorCStoWHDetail, nameColorCStoWHDetail, barcodeFreightUnitCStoWHDetail, nameDestinationCStoWHDetail,
                  sumNetWeightCStoWHDetail, sumGrossWeightCStoWHDetail, quantityCStoWHDetail, priceCStoWHDetail, sumCStoWHDetail

    FILTERS inCStoWHCStoWHDetail(t, d)
;

DESIGN CStoWHs FROM DEFAULT {

    NEW topContainer {

        type = SPLITV;

        PROPERTY(objectClassName) {
                preferredCharWidth = 15;
        }

        ADD t.box{
            PROPERTY (deletet) {
                askConfirm = TRUE;
            }
        }

        NEW docContainer{

            type = TABBED;
            ADD d.box{
                caption = 'Спецификация';
            }

            NEW historyContainer{

                caption = 'История';
                childConstraints = TO THE BOTTOM;
                ADD t.historyGroup;
                ADD t.postedGroup;
            }

            ADD t.printGroup {
                childConstraints = TO THE BOTTOM;
                NEW case55{
                    childConstraints = TO THE BOTTOM;

                    NEW contOne {
                        title = 'Накладная';
                        ADD PROPERTY(editConsignment);
                    }
                    NEW tn{
                        childConstraints = TO THE RIGHT;
                        title = 'ТН-2';
                        ADD PROPERTY(printConsignmentSimpleVertical);
                        ADD PROPERTY(printConsignmentSimpleHorizontal);
                    }
                }
                NEW ttn1{
                    childConstraints = TO THE RIGHT;
                    title = 'ТТН-1';
                    NEW ttn1V {
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY(printConsignmentVerticalA);
                        ADD PROPERTY(printConsignmentVerticalB);
                    }
                    NEW ttn1H {
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY(printConsignmentHorizontalA);
                        ADD PROPERTY(printConsignmentHorizontalB);
                    }
                }
            }
        }
    }
    ADD functions.box;
}

@defineDocumentRetailPrice (CStoWH, d);

useRetailPriceCStoWHDetail(CStoWHDetail) = destinationStockCStoWHDetail(CStoWHDetail) IS DepartmentStore
    AND NOT costLedgerDepartmentStore(destinationStockCStoWHDetail(CStoWHDetail));
@defineDocumentTransferAccount(CStoWH, useRetailPriceCStoWHDetail);

@defineConsignmentHeader(CStoWH);
@implementConsignmentHeader(CStoWH);

supplierConsignment (consignment) += legalEntityStock(customStoreCStoWH(consignment));
supplierStockConsignment (consignment) += customStoreCStoWH(consignment);
customerConsignment (consignment) += legalEntityStock(destinationStockCStoWH(consignment));
customerStockConsignment (consignment) += destinationStockCStoWH(consignment);

EXTEND CLASS CStoWHDetail : ConsignmentDetail;
consignmentConsignmentDetail (consignmentDetail) += CStoWHCStoWHDetail (consignmentDetail);
skuConsignmentDetail (consignmentDetail) += skuCStoWHDetail (consignmentDetail);
quantityConsignmentDetail (consignmentDetail) += quantityCStoWHDetail (consignmentDetail);
priceConsignmentDetail (consignmentDetail) += priceCStoWHDetail (consignmentDetail);
sumInvoiceConsignmentDetail (consignmentDetail) += printSumCStoWHDetail (consignmentDetail);
sumConsignmentDetail (consignmentDetail) += printSumCStoWHDetail (consignmentDetail);
grossWeightConsignmentDetail (consignmentDetail) += sumGrossWeightCStoWHDetail (consignmentDetail);

currencyConsignment(consignment) += declarationCurrencyCStoWH(consignment);
isCustomsFlowConsignment (consignment) += consignment IS CStoWH;
noteConsignment(consignment) += innerInvoicesCStoWH(consignment);

