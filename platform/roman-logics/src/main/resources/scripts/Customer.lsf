MODULE Customer;

REQUIRE System,
        Historizable,
        Utils,
        LegalEntity,
        Stock,
        StockContract,
        Agreement,
        Bank;


// ---------------------------------------- Договоры ------------------------------------ //

CLASS Customer 'Покупатель' : LegalEntity;
TABLE customer (Customer);

//CLASS ContractSkuCustomer 'Договор с покупателем' : ContractSku;
//
//legalEntityContractSkuCustomer = DATA LegalEntity (ContractSkuCustomer) AUTOSET;
//nameLegalEntityContractSkuCustomer 'Продавец' (contractSkuCustomer) = name(legalEntityContractSkuCustomer(contractSkuCustomer)) IN recognize MAXCHARWIDTH 30 PREFCHARWIDTH 30;
//partyAContract (contract) += legalEntityContractSkuCustomer(contract);
//
//customerContractSkuCustomer = DATA Customer (ContractSkuCustomer) AUTOSET;
//nameCustomerContractSkuCustomer 'Покупатель' (contractSkuCustomer) = name(customerContractSkuCustomer(contractSkuCustomer)) IN recognize MAXCHARWIDTH 30 PREFCHARWIDTH 30;
//partyBContract (contract) += customerContractSkuCustomer(contract);
//
//TABLE legalEntityCustomer(legalEntity, customer);
//@defineContractDefault(contractSkuCustomer, legalEntity, customer);

// ---------------------------------------- Группы покупателей -------------------------------- //

CLASS CustomerGroup 'Группа покупателей' : LegalEntityGroup;
TABLE customerGroup (CustomerGroup);

nameCustomerGroup 'Наименование' = DATA ISTRING[100](CustomerGroup);

customerGroupCustomer (customer) = DATA CustomerGroup (Customer) AUTOSET NOT NULL;
nameCustomerGroupCustomer 'Группа покупателей' (customer) = nameCustomerGroup(customerGroupCustomer(customer));

TABLE customerGroupCustomerGroup(CustomerGroup, CustomerGroup);
@defineHierarchy(customerGroup);
//parentLegalEntityGroup(customerGroup) += parentCustomerGroup(customerGroup);
//legalEntityGroupLegalEntity(customer) += customerGroupCustomer(customer);

inCustomerGroupCustomer (customerGroup, customer) =
    OVERRIDE customer IS Customer AND NOT customerGroup IS CustomerGroup,
             isParentCustomerGroupCustomerGroup(customerGroupCustomer(customer), customerGroup);

FORM customerGroup 'Группа покупателей'
    OBJECTS s = CustomerGroup FIXED PANEL
    PROPERTIES(s) nameCustomerGroup, nameParentLegalEntityGroup

    EDIT CustomerGroup OBJECT s
;

FORM customerGroups 'Группы покупателей'
    TREE customerGroupTree sg = CustomerGroup PARENT parentCustomerGroup
    PROPERTIES READONLY sgTreeName = nameCustomerGroup(sg)
    ORDER BY nameCustomerGroup(sg)

    DIALOG CustomerGroup OBJECT sg
;

// Формы
//FORM contractSkuCustomer 'Договор с покупателем'
//    OBJECTS c=ContractSkuCustomer FIXED PANEL
//    PROPERTIES(c) nameLegalEntityContractSkuCustomer, nameCustomerContractSkuCustomer,
//                  numberContract, dateFromContract, dateToContract,
//                  nameCurrencyContract, noteContract
//
//    OBJECTS pc = PaymentCondition
//    PROPERTIES(pc) READONLY datePaymentCondition, numberContractPaymentCondition,
//                            nameFormPaymentCondition
//    PROPERTIES(pc) ADDSESSIONFORM, EDITSESSIONFORM, DELETESESSION
//    ORDER BY datePaymentCondition
//
//    FILTERS contractPaymentCondition(pc) == c
//
//    EDIT ContractSkuCustomer OBJECT c
//;
//
//FORM contractsSkuCustomer 'Договора'
//    OBJECTS c=ContractSkuCustomer
//    PROPERTIES(c) READONLY numberContract, dateFromContract, dateToContract,
//                           nameLegalEntityContractSkuCustomer, nameCustomerContractSkuCustomer
//
//    PROPERTIES(c) ADDFORM, EDITFORM, DELETE
//    ORDER BY dateFromContract
//
//    DIALOG ContractSkuCustomer OBJECT c
//;

FORM customer 'Покупатель'
    OBJECTS cu=Customer FIXED PANEL
    PROPERTIES(cu) nameLegalEntity, nameCustomerGroupCustomer, nameOwnershipLegalEntity,
                   shortNameOwnershipLegalEntity, fullNameLegalEntity,
                   addressLegalEntity ON CHANGE dialogAddressLegalEntity(cu),
                   postAddressLegalEntity ON CHANGE dialogPostAddressLegalEntity(cu),
                   managerLegalEntity ON CHANGE dialogManagerLegalEntity(cu),
                   accountantLegalEntity ON CHANGE dialogAccountantLegalEntity(cu),
                   phoneLegalEntity ON CHANGE dialogPhoneLegalEntity(cu),
                   emailLegalEntity, siteLegalEntity

    OBJECTS a=Bank.Account
    PROPERTIES(a)  numberAccount, nameBankAccount, addressBankAccount, departmentBankAccount, CBUBankAccount, MFOBankAccount, noteAccount, ADDOBJ, DELETESESSION
    FILTERS Bank.legalEntityAccount(a) == cu

    OBJECTS co=LegalEntity
    PROPERTIES(co) READONLY nameLegalEntity
    FILTERGROUP filters
        FILTER 'Есть договор' 'F10' countContractPartyAPartyB(co, cu) DEFAULT

//    OBJECTS c=ContractSkuCustomer
//    PROPERTIES isLegalEntityCustomerContractSkuCustomer(co, cu, c)
//    PROPERTIES(c) READONLY numberContract, nameLegalEntityContractSkuCustomer, nameTypeContractSku, dateFromContract,
//                  dateToContract, nameCurrencyContract, noteContract
//    PROPERTIES(c) ADDFORM, EDITFORM, DELETE
//    FILTERS legalEntityContractSkuCustomer(c) == co,
//            customerContractSkuCustomer(c) == cu

    OBJECTS co2=LegalEntity
    PROPERTIES(co2) READONLY nameLegalEntity

    OBJECTS ag=Agreement
    PROPERTIES(ag, cu, co2) isDefaultAgreementSupplierCustomer
    PROPERTIES(ag, cu) inAgreementCustomer
    PROPERTIES(ag) READONLY nameAgreement, numberObject, seriesObject, dateAgreement, timeAgreement,
                            fromDateAgreement, fromTimeAgreement, toDateAgreement, toTimeAgreement,
                            nameCurrencyAgreement, namePriceListTypeAgreement, noteAgreement
    PROPERTIES createAgreementSupplierCustomer(co2, cu) TODRAW ag FORCE PANEL TOOLBAR, addAgreementsSupplierCustomer(co2, cu) TODRAW ag FORCE PANEL TOOLBAR
    FILTERS inAgreementCustomer(ag, cu),
            inAgreementSupplier(ag,co2)

    EDIT Customer OBJECT cu
;

DESIGN customer FROM DEFAULT {
    main{
       preferredSize = (1024, 768);
       cu.box {
            childConstraints = TO THE RIGHT;

            NEW column1 {
                childConstraints = TO THE BOTTOM;
                ADD PROPERTY(nameLegalEntity(cu));
                ADD PROPERTY(nameCustomerGroupCustomer);
                ADD cu.lawGroup;
            }

            NEW column2 {
                childConstraints = TO THE BOTTOM;
                ADD cu.contactGroup;
                ADD cu.managementGroup;
            }
       }

       NEW extendContainer BEFORE functions.box {
            type = TABBED;
            ADD a.box;
//            NEW customerContainer {
//                title = 'Договоры';
//                type = SPLITH;
//                childConstraints = TO THE RIGHT;
//
//                ADD co.box;
//                ADD c.box {
//                    fillHorizontal = 3;
//                    c.grid { defaultComponent = TRUE; }
//                }
//            }
            NEW agreementContainer{
                caption = 'Соглашения';
                type = SPLITH;
                ADD co2.box;
                ADD ag.box{fillHorizontal = 3;}
            }
       }
   }
}

FORM customers 'Покупатели'
    TREE customerGroupTree cg = CustomerGroup PARENT parentCustomerGroup
    PROPERTIES READONLY cgTreeName = nameCustomerGroup(cg)
    PROPERTIES(cg) ADDFORM, EDITFORM, deletecg=DELETE FORCE PANEL TOOLBAR

    OBJECTS cu=Customer
    PROPERTIES(cu) READONLY nameLegalEntity, fullNameLegalEntity, nameCustomerGroupCustomer, shortNameOwnershipLegalEntity, numberAccountLegalEntity, addressLegalEntity, phoneLegalEntity
    PROPERTIES(cu) ADDFORM, EDITFORM, DELETE

    FILTERS inCustomerGroupCustomer(cg, cu)
;

DESIGN customers FROM DEFAULT{
    NEW topContainer{
        childConstraints = TO THE RIGHT;
        type = SPLITH;
        ADD customerGroupTree.tree.box{
            PROPERTY(deletecg){
                askConfirm = TRUE;
            }
        }
        ADD cu.box{
            fillHorizontal = 2.0;
        }
    }
    ADD functions.box;
}

// --------------------------------------------------- Макросы по добавлению покупателя в документы ------------------------------------ //
META defineDocumentHeaderCustomer (object)
    customer###object (object) = DATA LegalEntity (object);
    nameCustomer###object 'Покупатель' (object)= nameLegalEntity(customer###object(object)) IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentAbstractHeaderCustomer (object)
    customer###object (object) = ABSTRACT LegalEntity (object) PERSISTENT;
    nameCustomer###object 'Покупатель' (object)= nameLegalEntity(customer###object(object)) IN documentPrmGroup MINCHARWIDTH 10 PREFCHARWIDTH 20;
END
META defineDocumentInterfaceHeaderCustomer (object)
    @defineDocumentAbstractHeaderCustomer(object);
    @defineDocumentHeaderCustomer(user###object);
    customer###object (object) += customer###user###object(object);
END

META defineDocumentDetailCustomer (object, detail)
    customer###detail (idetail) = customer###object(object###detail(idetail));
    nameCustomer###detail 'Покупатель' (idetail) = nameCustomer###object(object###detail(idetail));
END

META defineDocumentCustomer (object, detail)
    @defineDocumentHeaderCustomer(object);
    @defineDocumentDetailCustomer(object, detail);
END
META defineDocumentDetailDataCustomer (object, detail)
    dataCustomer###detail (detail) = DATA Customer (detail);
    customer###detail (idetail) = OVERRIDE customer###object(object###detail(idetail)), dataCustomer###detail(idetail) PERSISTENT;
    nameCustomer###detail 'Покупатель' (idetail) = nameLegalEntity(customer###detail(idetail));
END
META defineDocumentDataCustomer (object, detail)
    @defineDocumentHeaderCustomer(object);
    @defineDocumentDetailDataCustomer(object, detail);
END
META defineDocumentDataCustomer (object)
    @defineDocumentDataCustomer(object, object##Detail);
END
META defineDocumentDetailCustomer(detail)
    customer###detail (detail) = DATA Customer (detail);
    nameCustomer###detail 'Покупатель' (detail) = nameLegalEntity(customer###detail (detail));
END

META defineDocumentAbstractCustomer (object, detail)
    @defineDocumentAbstractHeaderCustomer(object);
    @defineDocumentDetailCustomer(object, detail);
END
META defineDocumentInterfaceCustomer (object, detail)
    @defineDocumentInterfaceHeaderCustomer(object);
    @defineDocumentDetailCustomer(object, detail);
    @defineDocumentDetailCustomer(user###object, user###detail);
END

META defineDocumentCustomer (object)
    @defineDocumentCustomer(object, object##Detail);
END
META defineDocumentAbstractCustomer (object)
    @defineDocumentAbstractCustomer(object, object##Detail);
END
META defineDocumentInterfaceCustomer (object)
    @defineDocumentInterfaceCustomer(object, object##Detail);
END