MODULE WHfromRF;

REQUIRE System,

        Utils,
        Stock,
        Country,
        Numerator,
        Document,
        RomanDocument,
        ConsignmentBy,
        RomanStock,
        RetailPrice,
        Barcode,
        RomanMasterData,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

CLASS WHfromRF 'Приход из РФ' : Historizable, NumeratedObject;
CLASS WHfromRFPosted 'Проведенный приход из РФ' : WHfromRF, PostedObject;
CLASS WHfromRFDetail 'Строка прихода из РФ';

GROUP exchangeGroup 'Курсы обмена' : public;

@defineDocumentTables(WHfromRF);

@defineNumeratedObjectDefault(WHfromRF, 'Нумератор для прихода из РФ', 'РФ');

// расходы для фрахтов РФ
currencyPayFreight 'Валюта платежей за РФ (ИД)' (freight) = currencyPayFreights() IF routeFreight(freight) == Route.rf;
typeExchangePayFreight 'Тип обмена (ИД)' (freight) = typeExchangeSTX() IF routeFreight(freight) == Route.rf;

@defineNearestRateExchangeObject(freight, pay, pay, dateArrivalFreight, base);

tariffVolumeFreight 'Тариф для перевозок (м3)' = DATA NUMERIC[14,2](Freight);
percentCostFreight 'Процент расходов за оформление' = DATA NUMERIC[14,2](Freight);
rateExchangeDataPayFreight 'Курс обмена' = DATA NUMERIC[14,2](Freight);

tariffVolumeFreight(freight) <- tariffVolumeFreights() WHEN freight IS Freight;
percentCostFreight(freight) <- percentCostFreights() WHEN freight IS Freight;
rateExchangeDataPayFreight(freight) <- rateExchangePayPayFreight(freight) WHEN CHANGED (dateArrivalFreight(freight));

isWHfromRFFreight(freight) = TRUE IF (routeFreight(freight) == Route.rf AND freight IS FreightArrived);

sumRateRegistrationFreightSku 'Затраты на оформление' (freight, sku) = (priceInFullFreightSku(freight, sku) * percentCostFreight(freight))/100 IF routeFreight(freight) == Route.rf;
sumRegistrationFreightSku 'Затраты на оформление' (freight, sku) = sumRateRegistrationFreightSku(freight, sku)/rateExchangeDataPayFreight(freight);

sumDeliveryFreight 'Затраты на доставку' (freight) = volumeDataFreight(freight) * tariffVolumeFreight(freight) IF routeFreight(freight) == Route.rf;
sumRateDeliveryFreight 'Затраты на доставку (конверт.)' (freight) = sumDeliveryFreight(freight) * rateExchangeDataPayFreight(freight);

sumDeliveryFreightSku 'Затраты на доставку' (freight, sku) = (sumRateDeliveryFreight(freight) * sumGrossWeightFreightSku(freight, sku))/grossWeightFreight(freight);

priceRFFreightSku 'Себестоимость' (freight, sku) = (priceInFullFreightSku(freight, sku) (+)
                                                    sumRateRegistrationFreightSku(freight, sku) (+)
                                                    sumDeliveryFreightSku(freight, sku)) IF routeFreight(freight) == Route.rf;

EXTEND FORM freightInvoiceForm
    PROPERTIES tariffVolumeFreight(freight), percentCostFreight(freight), rateExchangeDataPayFreight(freight)
    PROPERTIES FORCE GRID sumRateRegistrationFreightSku(freight, sku), sumDeliveryFreightSku(freight, sku), priceRFFreightSku(freight, sku)
;

freightWHfromRF (WHfromRF) = DATA FreightArrived (WHfromRF);
nameFreightWHfromRF 'Фрахт' (WHfromRF) =  name(freightWHfromRF(WHfromRF)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;
castFreightWHfromRF = FORMULA STRING[100] '\'Фрахт от \' || CAST($1 AS TEXT) || \' (\' || CAST($2 AS TEXT) || \')\'';
descriptionFreightWHfromRF 'Фрахт' (WHfromRF) = castFreightWHfromRF(dateArrivalFreight(freightWHfromRF(WHfromRF)), nameExporterFreight(freightWHfromRF(WHfromRF)));
shortNameCurrencyWHfromRF 'Валюта фрахта' (WHfromRF) = shortNameCurrency(currencyFreight(freightWHfromRF(WHfromRF))) IN exchangeGroup;

@defineDocumentRelation(WHfromRF);
@defineDocumentPosted(WHfromRF);
@defineDocumentDetailIndex(WHfromRF);
@defineDocumentTime(WHfromRF);
@defineDocumentHeaderNote(WHfromRF);
@defineDocumentDetailActions(WHfromRF);
@defineDocumentStock(WHfromRF, stock, 'Склад');
@defineDocumentDetailSku(WHfromRF, sku);
@defineDocumentDetailQuantity(WHfromRF);
@defineDocumentDescription(WHfromRF, 'Поступление товара из РФ');

@defineAddDetailDialogSkuStock(WHfromRF, sku, stock, dialogSku);

@defineDocumentHeaderQuantity(WHfromRF);
@defineDocumentHeaderSkuQuantity(WHfromRF, sku);

@defineDocumentDetailSkuArticle(WHfromRF);

companyDataWHfromRF 'Импортёр (ИД)' = DATA Company(WHfromRF);
nameCompanyDataWHfromRF 'Импортёр' = nameLegalEntity(companyDataWHfromRF(WHfromRF)) IN documentPrmGroup MINCHARWIDTH 20 PREFCHARWIDTH 40;

overCompanyWHfromRF 'Импортёр (ИД)' (WHfromRF) = OVERRIDE legalEntityStockWHfromRF(WHfromRF) IF legalEntityStockWHfromRF(WHfromRF) IS Company,
                                                          companyDataWHfromRF(WHfromRF);

costWHfromRFDetail 'Себестоимость' (WHfromRFDetail) = priceRFFreightSku(freightWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail)), skuWHfromRFDetail(WHfromRFDetail));

currencyWHfromRF (WHfromRF)= currencyStock(stockWHfromRF(WHfromRF));

rateExchangeDataWHfromRF 'Курс' = DATA NUMERIC[14,3] (WHfromRF) IN exchangeGroup;
typeExchangeWHfromRF 'Тип обмена (ИД)' = DATA TypeExchange(WHfromRF);
nameTypeExchangeWHfromRF 'Тип обмена' (WHfromRF) = nameTypeExchange(typeExchangeWHfromRF(WHfromRF)) IN exchangeGroup;
@defineNearestRateExchangeObject(WHfromRF, , , dateWHfromRF, exchangeGroup);

rateExchangeDataWHfromRF(WHfromRF) <- rateExchangeWHfromRF(WHfromRF)
    WHEN CHANGED (dateWHfromRF(WHfromRF)) OR CHANGED (currencyStock(stockWHfromRF(WHfromRF))) OR CHANGED(typeExchangeWHfromRF(WHfromRF));

rateExchangeDataWHfromRFDetail (WHfromRFDetail) = rateExchangeDataWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail));

//для учета по коробам
freightUnitWHfromRFDetail 'Короб (ИД)' (WHfromRFDetail) = DATA FreightUnit(WHfromRFDetail);
barcodeFreightUnitWHfromRFDetail 'Короб' (WHfromRFDetail) = barcode (freightUnitWHfromRFDetail(WHfromRFDetail));

quantitySkuFreightUnitFreight(sku, freightUnit, freight) = quantityFreightUnitSku(freightUnit, sku) IF freightFreightUnit(freightUnit) == freight;

quantityWHfromRFDetailsSkuFreightUnit 'Количество принятое (в коробе)' (sku, freightUnit, WHfromRF) =
    GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY skuWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail), WHfromRFWHfromRFDetail(WHfromRFDetail);

isNotShippedSkuFreightUnitWHfromRF (sku, freightUnit, WHfromRF) = quantitySkuFreightUnitFreight (sku, freightUnit, freightWHfromRF(WHfromRF))
    IF NOT quantityWHfromRFDetailsSkuFreightUnit(sku, freightUnit, WHfromRF);

//приемка по коробам
currentFreightUnit 'Тек. короб (ИД)' (WHfromRF) = DATA SESSION FreightUnit (WHfromRF);
barcodeCurrentFreightUnit 'Тек. короб (штрих-код)' (WHfromRF) = barcode(currentFreightUnit(WHfromRF));

withOutBarcodeSku (sku) = sku IS RomanLogicsModule.Item AND NOT barcode(sku);

quantityOriginCurrentBoxWHfromRFSku 'Ожидаемое к-во (тек. короб)' (WHfromRF, sku) = quantitySkuFreightUnitFreight(sku, currentFreightUnit(WHfromRF), freightWHfromRF(WHfromRF));
quantityWHfromRFSku 'Принятое к-во (тек. короб)' (WHfromRF, sku) = quantityWHfromRFDetailsSkuFreightUnit(sku, currentFreightUnit(WHfromRF), WHfromRF);

diffQuantityWHfromRFSku 'Расхождение (тек. короб)' (WHfromRF, sku)= quantityWHfromRFSku(WHfromRF, sku) (-) quantityOriginCurrentBoxWHfromRFSku(WHfromRF, sku);

quantityOriginWHfromRFDetail 'Ожидаемое к-во (тек. короб)' (WHfromRFDetail) = quantityOriginCurrentBoxWHfromRFSku(WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail));

backgroundSkuWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 255, 0) IF quantityWHfromRFDetail(WHfromRFDetail) > quantityOriginWHfromRFDetail(WHfromRFDetail);

quantityOriginWHfromRFSku 'Ожидаемое к-во' (WHfromRF, sku) = quantityFreightSku(freightWHfromRF(WHfromRF), sku);
quantityOriginWHfromRFSkuWHfromRFDetail 'Ожидаемое к-во' (WHfromRFDetail) = quantityOriginWHfromRFSku(WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail));

FORM addBarcodeWHfromRFFreightUnitSku 'Поиск товара(с коробами и выбором шрих-кода)'

    OBJECTS w = WHfromRF

    OBJECTS f = FreightUnit FIXED PANEL
    PROPERTIES(f) READONLY sidSupplierBox, barcode

    OBJECTS s = RomanLogicsModule.Item
    PROPERTIES(s) READONLY sidArticleSku, barcode, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    FILTERS quantityFreightSku(freightWHfromRF(w), s) > 0

    FILTERGROUP filters1
        FILTER 'Товар без шрих-кода' 'F9' withOutBarcodeSku(s) DEFAULT

    FILTERGROUP filters2
        FILTER 'Только из текущего короба' 'F10' quantitySkuFreightUnitFreight(s, f, freightWHfromRF(w)) > 0

;

DESIGN addBarcodeWHfromRFFreightUnitSku FROM DEFAULT {

    f.box{
        caption = 'Короб';
    }
}

FORM addBarcodeWHfromRFSku 'Поиск товара(с выбором шрих-кода)'

    OBJECTS w = WHfromRF

    OBJECTS s = RomanLogicsModule.Item
    PROPERTIES(s) READONLY sidArticleSku, barcode, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

    FILTERS quantityFreightSku(freightWHfromRF(w), s) > 0

    FILTERGROUP filters1
        FILTER 'Товар без шрих-кода' 'F9' withOutBarcodeSku(s) DEFAULT

;

FORM addSkuWHfromRF 'Ввод товара'

    OBJECTS i = RomanLogicsModule.Item FIXED PANEL
    PROPERTIES(i) READONLY barcode
    PROPERTIES(i) sidArticleSku, sidColorSupplierItem, nameColorSupplierItem, sidSizeSupplierItem

;

DESIGN addSkuWHfromRF FROM DEFAULT {

    i.box{
        caption = 'Свойства нового товара';
        childConstraints = TO THE BOTTOM;
        ADD PROPERTY(sidArticleSku);
        ADD PROPERTY(sidColorSupplierItem);
        ADD PROPERTY(nameColorSupplierItem);
        ADD PROPERTY(sidSizeSupplierItem);
    }
}

createSkuWHfromRF = ACTION (barcode) NEWSESSION {

    ADDOBJ RomanLogicsModule.Item;
    FOR s == addedObject() DO {
        SET barcode(s) <- (barcode AS STRING[15]);
        FORM addSkuWHfromRF OBJECTS i = s MODAL;
        IF formResult() == FormResult.ok THEN {
            EXEC apply();
        }
    }
}

detailWHfromRFFreightUnitSku (WHfromRF, freightUnit, sku) = GROUP MAX WHfromRFDetail BY WHfromRFWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail);


addDialogSkuFreightUnitWHfromRFBarcode 'Ввод штрих-кода' = ACTION (WHfromRF, barcode) {

    LOCAL dialogBarcodeSku = Sku();
    LOCAL dialogBarcodeDetail = WHfromRFDetail();


    IF barcodeToObject(barcode) IS FreightUnit THEN {
        SET currentFreightUnit (WHfromRF) <- barcodeToObject(barcode);
    } ELSE {

        SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, dateWHfromRF (WHfromRF));
        SET dialogBarcodeDetail() <- detailWHfromRFFreightUnitSku(WHfromRF, currentFreightUnit(WHfromRF), dialogBarcodeSku());

        IF barcode IS STRING[15] AND NOT dialogBarcodeSku() IS Sku THEN {

            IF currentFreightUnit(WHfromRF) THEN {
                FORM addBarcodeWHfromRFFreightUnitSku OBJECTS f = currentFreightUnit(WHfromRF), w = WHfromRF MODAL;
            } ELSE {
                FORM addBarcodeWHfromRFSku OBJECTS w = WHfromRF MODAL;
            }
            IF formResult() == FormResult.ok THEN {
                SET barcode(sku) <- barcode WHERE sku == chosenObject('s');
                SET dialogBarcodeSku() <- chosenObject('s');
            } ELSE {
                EXEC createSkuWHfromRF(barcode);
                SET dialogBarcodeSku() <- skuBarcodeIdDate(barcode, dateWHfromRF (WHfromRF));
            }
        }

        IF dialogBarcodeSku() IS Sku THEN {

            IF dialogBarcodeDetail() IS WHfromRFDetail THEN {
                SET quantityWHfromRFDetail(detail) <-
                    quantityWHfromRFDetail(detail) (+) (1.0 IF detail IS WHfromRFDetail)
                    WHERE detail == dialogBarcodeDetail();
                } ELSE {

                    ADDOBJ WHfromRFDetail;
                    FOR w == addedObject() DO {
                        SET WHfromRFWHfromRFDetail(w) <- WHfromRF AS WHfromRF;
                        SET skuWHfromRFDetail(w) <- dialogBarcodeSku();
                        SET freightUnitWHfromRFDetail(w) <- currentFreightUnit(WHfromRF);
                        SET quantityWHfromRFDetail(w) <- 1.0;
                    }
                }
        }
    }
};

changeAddDetailInputBarcodeWHfromRFDetailWHfromRF = ACTION (WHfromRF) {
    REQUEST STRING[15] INPUT;
    EXEC addDialogSkuFreightUnitWHfromRFBarcode(WHfromRF, requestedString());
};
addDetailInputBarcodeWHfromRFDetailWHfromRF 'Ввод штрих-кода :' (WHfromRF) = DATA SESSION STRING[15] (WHfromRF) TOOLBAR EDITKEY 'F4'
                                                                        ON CHANGE changeAddDetailInputBarcodeWHfromRFDetailWHfromRF(WHfromRF) EVENTID 'SCANNER';

fillWHfromRFDetailsSkuFreightUnit 'Заполнить строки из короба' (WHfromRF) = ACTION (WHfromRF) {
    FOR isNotShippedSkuFreightUnitWHfromRF (sku AS Sku, currentFreightUnit(WHfromRF), WHfromRF AS WHfromRF) DO {
        ADDOBJ WHfromRFDetail;
        FOR w == addedObject() DO {
            SET WHfromRFWHfromRFDetail(w) <- WHfromRF AS WHfromRF;
            SET skuWHfromRFDetail (w) <- sku AS Sku;
            SET quantityWHfromRFDetail (w) <- quantitySkuFreightUnitFreight (sku AS Sku, currentFreightUnit(WHfromRF), freightWHfromRF(WHfromRF));
            SET freightUnitWHfromRFDetail(w) <- currentFreightUnit(WHfromRF);
        }
    }
} EDITKEY 'F5' CONFIRM;

quantitySkuFreightUnitWHfromRF (sku, freightUnit, WHfromRF) = quantitySkuFreightUnitFreight(sku, freightUnit, freightWHfromRF(WHfromRF));
quantityPositionsSkuInWHfromRFFreightUnit 'Кол-во позиций в коробе' (WHfromRF, freightUnit) =
    GROUP SUM 1 IF quantitySkuFreightUnitWHfromRF(sku, freightUnit, WHfromRF) BY WHfromRF, freightUnit;
quantityPositionsSkuInFreightUnitWHfromRF 'Кол-во позиций в коробе' (WHfromRF) = quantityPositionsSkuInWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantitySkuInWHfromRFFreightUnit 'Кол-во товара в коробе' (WHfromRF, freightUnit) =
    GROUP SUM quantitySkuFreightUnitWHfromRF(sku, freightUnit, WHfromRF) BY WHfromRF, freightUnit;
quantitySkuInFreightUnitWHfromRF 'Кол-во товара в коробе' (WHfromRF) = quantitySkuInWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantityPositionsSkuWHfromRFFreightUnit 'Кол-во позиций в документе' (WHfromRF, freightUnit) =
    GROUP SUM 1 IF quantityWHfromRFDetail(WHfromRFDetail) BY WHfromRFWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail);
quantityPositionsSkuWHfromRF 'Кол-во позиций в документе' (WHfromRF) =
    quantityPositionsSkuWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantitySkuWHfromRFFreightUnit 'Кол-во товара в документе' (WHfromRF, freightUnit) =
    GROUP SUM quantityWHfromRFDetail(WHfromRFDetail) BY WHfromRFWHfromRFDetail(WHfromRFDetail), freightUnitWHfromRFDetail(WHfromRFDetail);
quantitySkuWHfromRF 'Кол-во товара в документе' (WHfromRF) =
    quantitySkuWHfromRFFreightUnit(WHfromRF, currentFreightUnit(WHfromRF));

quantityRemainedPositionSkuWHfromRF 'Кол-во оставшихся позиций в коробе' (WHfromRF) =
    OVERRIDE 0 IF WHfromRF, quantityPositionsSkuInFreightUnitWHfromRF(WHfromRF) (-) quantityPositionsSkuWHfromRF(WHfromRF);

quantityRemainedSkuWHfromRF 'Кол-во оставшегося товара в коробе' (WHfromRF) =
    OVERRIDE 0 IF WHfromRF, quantitySkuInFreightUnitWHfromRF(WHfromRF) (-) quantitySkuWHfromRF(WHfromRF);

quantitySkuInWHfromRF 'Кол-во товара' (WHfromRF, sku) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail);

CONSTRAINT currentFreightUnit(WHfromRF) IS FreightUnit AND NOT quantitySkuInFreightUnitWHfromRF(WHfromRF) CHECKED BY currentFreightUnit MESSAGE 'Короб должен быть из текущей поставки';

CONSTRAINT WHfromRF IS WHfromRF AND NOT isWHfromRFFreight(freightWHfromRF(WHfromRF)) CHECKED BY freightWHfromRF MESSAGE 'Фрахт должен быть прибывшим из РФ';

quantitySkuInWHfromRFWHfromRFDetail 'Кол-во принятое' (WHfromRFDetail) = quantitySkuInWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail));


printMarksSkuFreightUnit 'Печать маркировок товаров' (WHfromRF) = ACTION (WHfromRF) {

    SET shouldBePrintSku(sku) <- NULL;
    SET countSku(sku) <- NULL;
    SET shouldBePrintSku(sku) <- TRUE IF quantitySkuFreightUnitWHfromRF(sku, currentFreightUnit(WHfromRF), WHfromRF);
    SET countSku(sku) <- toInteger(quantitySkuFreightUnitWHfromRF(sku, currentFreightUnit(WHfromRF), WHfromRF));
    FORM printMarksDocument OBJECTS dt = dateTimeWHfromRF(WHfromRF), imp = overCompanyWHfromRF(WHfromRF), c = currencyStock(stockWHfromRF(WHfromRF)) MODAL;

} CONFIRM;

selectWHfromRFDetail 'Отметить для маркировки' = DATA BOOLEAN (WHfromRFDetail);
selectWHfromRF (WHfromRF) = GROUP SUM 1 IF selectWHfromRFDetail(WHfromRFDetail) BY WHfromRFWHfromRFDetail(WHfromRFDetail);
selectQuantitySkuInWHfromRF (WHfromRF, sku) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail) IF selectWHfromRFDetail(WHfromRFDetail)
    BY WHfromRFWHfromRFDetail(WHfromRFDetail), skuWHfromRFDetail(WHfromRFDetail);

printMarksSkuWHfromRF 'Печать маркировок товаров' (WHfromRF) = ACTION (WHfromRF) {

    SET shouldBePrintSku(sku) <- NULL;
    SET countSku(sku) <- NULL;

    IF selectWHfromRF (WHfromRF) THEN {
        SET shouldBePrintSku(sku) <- TRUE IF selectQuantitySkuInWHfromRF(WHfromRF, sku);
        SET countSku(sku) <- toInteger(selectQuantitySkuInWHfromRF(WHfromRF, sku));
    } ELSE {
        SET shouldBePrintSku(sku) <- TRUE IF quantitySkuInWHfromRF(WHfromRF, sku);
        SET countSku(sku) <- toInteger(quantitySkuInWHfromRF(WHfromRF, sku));
    }
    FORM printMarksDocument OBJECTS dt = dateTimeWHfromRF(WHfromRF), imp = overCompanyWHfromRF(WHfromRF), c = currencyStock(stockWHfromRF(WHfromRF)) MODAL;

} CONFIRM TOOLBAR;

// Атрибуты поставщика

originalNameArticleSkuWHfromRFDetail 'Наименование(ориг.)' (WHfromRFDetail) = originalNameArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
nameCountryOfOriginArticleSkuWHfromRFDetail 'Страна происхождения' (WHfromRFDetail) = nameCountryOfOriginArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
nameBrandSupplierArticleSkuWHfromRFDetail 'Бренд' (WHfromRFDetail) = nameBrandSupplierArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
netWeightArticleSkuWHfromRFDetail 'Вес нетто(ориг.)' (WHfromRFDetail) = netWeightArticleSku(skuWHfromRFDetail(WHfromRFDetail));
mainCompositionOriginArticleSkuWHfromRFDetail 'Состав(ориг.)' (WHfromRFDetail) = mainCompositionOriginArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;

// Внутренние атрибуты

languageWHfromRF (WHfromRF) = languageStock(stockWHfromRF(WHfromRF));
//stockWHfromRFDetail (WHfromRFDetail) = stockWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail));
languageWHfromRFDetail (WHfromRFDetail) = languageWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail));
@defineCompositionSkuLanguageDetailCustom (WHfromRFDetail, stock);

sidGenderArticleSkuWHfromRFDetail 'Пол товара' (WHfromRFDetail) = sidGenderArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeGenderArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT g FORM gendersDialog MODAL;
    IF formResult() == FormResult.ok THEN {
        SET genderArticle(article) <- chosenObject('g') WHERE article == articleSku(skuWHfromRFDetail(WHfromRFDetail));
    }
}

nameCategoryArticleSkuWHfromRFDetail 'Номенклатурная группа' (WHfromRFDetail) = nameCategoryArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeCategoryArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT c FORM categories MODAL;
    IF formResult() == FormResult.ok THEN {
        SET categoryArticle(article) <- chosenObject('c') WHERE article == articleSku(skuWHfromRFDetail(WHfromRFDetail));
    }
}

nameTypeFabricArticleSkuWHfromRFDetail 'Тип одежды' (WHfromRFDetail) = nameTypeFabricArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeTypeFabricArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT t FORM typeFabrics MODAL;
    IF formResult() == FormResult.ok THEN {
        SET typeFabricArticle(article) <- chosenObject('t') WHERE article == articleSku(skuWHfromRFDetail(WHfromRFDetail));
    }
}

nameUnitOfMeasureArticleSkuWHfromRFDetail 'Ед. измерения товара' (WHfromRFDetail) = nameUnitOfMeasureArticleSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 15 MINCHARWIDTH 10;
changeUnitOfMeasureArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT u FORM unitOfMeasures MODAL;
    IF formResult() == FormResult.ok THEN {
        SET unitOfMeasureArticle(article) <- chosenObject('u') WHERE article == articleSku(skuWHfromRFDetail(WHfromRFDetail));
    }
}

netWeightSkuWHfromRFDetail 'Вес нетто(ед.)' (WHfromRFDetail) = netWeightSku(skuWHfromRFDetail(WHfromRFDetail));
changeNetWeightSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST NUMERIC[14,6] INPUT;
    SET netWeightSku(sku) <- requestedNumeric() WHERE sku == skuWHfromRFDetail(WHfromRFDetail);
}

nameCountryOfOriginSkuWHfromRFDetail 'Страна происхождения' (WHfromRFDetail) = nameCountryOfOriginSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeCountryOfOriginSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST OBJECT c FORM countries MODAL;
    IF formResult() == FormResult.ok THEN {
        SET countryOfOriginSku(sku) <- chosenObject('c') WHERE sku == skuWHfromRFDetail(WHfromRFDetail);
    }
}

mainCompositionOriginSkuWHfromRFDetail 'Состав (ориг.)' (WHfromRFDetail) = mainCompositionOriginSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeMainCompositionOriginSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET mainCompositionOriginSku(sku) <- requestedString() WHERE sku == skuWHfromRFDetail(WHfromRFDetail);
    EXEC translationMainCompositionSkuLanguage(skuWHfromRFDetail(WHfromRFDetail), languageWHfromRFDetail(WHfromRFDetail));
    EXEC translationMainCompositionSku(skuWHfromRFDetail(WHfromRFDetail));
}


additionalCompositionOriginSkuWHfromRFDetail 'Дополнительный состав (ориг.)' (WHfromRFDetail) = additionalCompositionOriginSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeAdditionalCompositionOriginSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET additionalCompositionOriginSku(sku) <- requestedString() WHERE sku == skuWHfromRFDetail(WHfromRFDetail);
    EXEC translationAdditionalCompositionSkuLanguage(skuWHfromRFDetail(WHfromRFDetail), languageWHfromRFDetail(WHfromRFDetail));
    EXEC translationAdditionalCompositionSku(skuWHfromRFDetail(WHfromRFDetail));
}

coefficientArticleSkuWHfromRFDetail 'Кол-во в комплекте' (WHfromRFDetail) = coefficientArticleSku(skuWHfromRFDetail(WHfromRFDetail));
changeCoefficientArticleSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST INTEGER INPUT;
    SET coefficientArticle(article) <- requestedInteger() WHERE article == articleSku(skuWHfromRFDetail(WHfromRFDetail));
}

mainCompositionSkuWHfromRFDetail 'Состав' (WHfromRFDetail) = mainCompositionSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeMainCompositionSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET mainCompositionSku(sku) <- requestedString() WHERE sku == skuWHfromRFDetail(WHfromRFDetail);
}

additionalCompositionSkuWHfromRFDetail 'Дополнительный состав' (WHfromRFDetail) = additionalCompositionSku(skuWHfromRFDetail(WHfromRFDetail)) PREFCHARWIDTH 30 MINCHARWIDTH 20;
changeAdditionalCompositionSkuWHfromRFDetail = ACTION (WHfromRFDetail) {
    REQUEST STRING[200] INPUT;
    SET additionalCompositionSku(sku) <- requestedString() WHERE sku == skuWHfromRFDetail(WHfromRFDetail);
}

quantityArticleWHfromRF (article, WHfromRF) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY articleSku(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail);

quantityArticleWHfromRFDetail (WHfromRFDetail) =
    quantityArticleWHfromRF(articleSku(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail));

backgroundArticleWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 128, 128) IF quantityArticleWHfromRFDetail(WHfromRFDetail) == 1;

quantityArticleSizeWHfromRF (article, sizeSupplier, WHfromRF) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY articleSku(skuWHfromRFDetail(WHfromRFDetail)), sizeSupplierItem(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail);

quantityArticleSizeWHfromRFDetail (WHfromRFDetail) =
    quantityArticleSizeWHfromRF(articleSku(skuWHfromRFDetail(WHfromRFDetail)),
                                sizeSupplierItem(skuWHfromRFDetail(WHfromRFDetail)),
                                WHfromRFWHfromRFDetail(WHfromRFDetail));

backgroundArticleSizeWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 128, 128) IF quantityArticleSizeWHfromRFDetail(WHfromRFDetail) == 1;

quantityArticleColorWHfromRF (article, colorSupplier, WHfromRF) = GROUP SUM quantityWHfromRFDetail(WHfromRFDetail)
    BY articleSku(skuWHfromRFDetail(WHfromRFDetail)), colorSupplierItem(skuWHfromRFDetail(WHfromRFDetail)), WHfromRFWHfromRFDetail(WHfromRFDetail);

quantityArticleColorWHfromRFDetail (WHfromRFDetail) =
    quantityArticleColorWHfromRF(articleSku(skuWHfromRFDetail(WHfromRFDetail)),
                                colorSupplierItem(skuWHfromRFDetail(WHfromRFDetail)),
                                WHfromRFWHfromRFDetail(WHfromRFDetail));

backgroundArticleColorWHfromRFDetail 'Цвет' (WHfromRFDetail) = RGB(255, 128, 128) IF quantityArticleColorWHfromRFDetail(WHfromRFDetail) == 1;

currencyWHfromRFDetail  (WHfromRFDetail) = currencyStock(stockWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail)));
//costWHfromRFDetail(WHfromRFDetail) =
//    priceInFreightSku(freightWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail)), skuWHfromRFDetail(WHfromRFDetail));

retailPriceWHfromRFDetail 'Цена розничная' = DATA NUMERIC[14,2] (WHfromRFDetail);
retailSumWHfromRFDetail 'Сумма розничная' (WHfromRFDetail) = quantityWHfromRFDetail(WHfromRFDetail) * retailPriceWHfromRFDetail(WHfromRFDetail);

retailPriceWHfromRFDetail(WHfromRFDetail) <- priceAPriceSetDocumentSkuCurrencyDateTime(skuWHfromRFDetail(WHfromRFDetail), currencyWHfromRFDetail(WHfromRFDetail), dateTimeWHfromRFDetail(WHfromRFDetail))
                                                        WHEN CHANGED(dateTimeWHfromRFDetail(WHfromRFDetail))
                                                             OR CHANGED(skuWHfromRFDetail(WHfromRFDetail));

costSumWHfromRFDetail (WHfromRFDetail) = roundPriceCurrency(costWHfromRFDetail(WHfromRFDetail) * quantityWHfromRFDetail(WHfromRFDetail) * rateExchangeDataWHfromRFDetail(WHfromRFDetail), currencyWHfromRFDetail(WHfromRFDetail));

accountSumWHfromRFDetail 'Сумма учетная' (WHfromRFDetail) = IF stockWHfromRF(WHfromRFWHfromRFDetail(WHfromRFDetail)) IS DepartmentStore  THEN retailSumWHfromRFDetail(WHfromRFDetail)
                                                            ELSE costSumWHfromRFDetail(WHfromRFDetail);


accountSumWHfromRF 'Сумма учетная' (WHfromRF) = GROUP SUM accountSumWHfromRFDetail(WHfromRFDetail) BY WHfromRFWHfromRFDetail(WHfromRFDetail) IN documentSumGroup;

// Проводим по регистру

EXTEND CLASS WHfromRFDetail : BatchB;
@implementBatchCustom(WHfromRFDetail, sku, stock, cost);
quantityBatch (batch) += quantityWHfromRFDetail(batch);
sumInSkuLedger(batch) += accountSumWHfromRFDetail(batch);
skipASkuLedger (ledger) += ledger IS WHfromRFDetail;
//costBatch (batch) += priceRFWHfromRFDetail(batch);

FORM WHfromRF 'Приход товара из РФ'

    OBJECTS w = WHfromRF FIXED PANEL, d = WHfromRFDetail
    PROPERTIES(w) objectClassName, nameNumeratorObject, numberObject, seriesObject, dateWHfromRF, timeWHfromRF, nameLegalEntityStockWHfromRF, nameCompanyDataWHfromRF,
                  nameFreightWHfromRF, nameStockWHfromRF, barcodeCurrentFreightUnit, fillWHfromRFDetailsSkuFreightUnit,
                  printMarksSkuFreightUnit, printMarksSkuWHfromRF TODRAW d FORCE PANEL
    PROPERTIES(w) READONLY quantityRemainedPositionSkuWHfromRF SHOWIF barcodeCurrentFreightUnit(w),
                           quantityRemainedSkuWHfromRF SHOWIF barcodeCurrentFreightUnit(w),
                           shortNameCurrencyWHfromRF
    PROPERTIES(w)          nameTypeExchangeWHfromRF, rateExchangeDataWHfromRF

    PROPERTIES(d) READONLY indexWHfromRFDetail, barcodeWHfromRFDetail, nameCategoryArticleSkuWHfromRFDetail,
                           nameBrandWHfromRFDetail, sidArticleWHfromRFDetail, sidSizeWHfromRFDetail,
                           sidColorWHfromRFDetail, nameColorWHfromRFDetail, barcodeFreightUnitWHfromRFDetail

    PROPERTIES(d) quantityWHfromRFDetail BACKGROUND backgroundSkuWHfromRFDetail(d), quantitySkuInWHfromRFWHfromRFDetail, quantityOriginWHfromRFSkuWHfromRFDetail
    PROPERTIES(d) READONLY nameUnitOfMeasureArticleSkuWHfromRFDetail

    PROPERTIES(d) retailPriceWHfromRFDetail, accountSumWHfromRFDetail, selectWHfromRFDetail

    PROPERTIES(d) DELETESESSION

    PROPERTIES(w) TODRAW d addDetailInputBarcodeWHfromRFDetailWHfromRF, deleteWHfromRFDetailWHfromRF

    PROPERTIES(d) READONLY FORCE PANEL originalNameArticleSkuWHfromRFDetail, nameCountryOfOriginArticleSkuWHfromRFDetail,
                                       nameBrandSupplierArticleSkuWHfromRFDetail, netWeightArticleSkuWHfromRFDetail,
                                       mainCompositionOriginArticleSkuWHfromRFDetail

    PROPERTIES(d) FORCE PANEL sidGenderArticleSkuWHfromRFDetail ON CHANGE changeGenderArticleSkuWHfromRFDetail(d),
                              c = nameCategoryArticleSkuWHfromRFDetail ON CHANGE changeCategoryArticleSkuWHfromRFDetail(d),
                              nameTypeFabricArticleSkuWHfromRFDetail ON CHANGE changeTypeFabricArticleSkuWHfromRFDetail(d),
                              u = nameUnitOfMeasureArticleSkuWHfromRFDetail ON CHANGE changeUnitOfMeasureArticleSkuWHfromRFDetail(d),
                              netWeightSkuWHfromRFDetail ON CHANGE changeNetWeightSkuWHfromRFDetail(d),
                              nameCountryOfOriginSkuWHfromRFDetail ON CHANGE changeCountryOfOriginSkuWHfromRFDetail(d),
                              mainCompositionOriginSkuWHfromRFDetail ON CHANGE changeMainCompositionOriginSkuWHfromRFDetail(d),
                              mainCompositionSkuWHfromRFDetail ON CHANGE changeMainCompositionSkuWHfromRFDetail(d),
                              additionalCompositionOriginSkuWHfromRFDetail ON CHANGE changeAdditionalCompositionOriginSkuWHfromRFDetail(d),
                              additionalCompositionSkuWHfromRFDetail ON CHANGE changeAdditionalCompositionSkuWHfromRFDetail(d),
                              coefficientArticleSkuWHfromRFDetail ON CHANGE changeCoefficientArticleSkuWHfromRFDetail(d)
    PROPERTIES(d) FORCE GRID  nameTypeLabelWHfromRFDetail ON CHANGE changeTypeLabelWHfromRFDetail(d)

    PROPERTIES(d) FORCE PANEL SHOWIF languageWHfromRF(w) BACKGROUND backgroundArticleColorWHfromRFDetail(d) mainCompositionWHfromRFDetail, additionalCompositionWHfromRFDetail

    OBJECTS s = Sku
    PROPERTIES(s) READONLY barcode, nameCategoryArticleSku, nameBrandSupplierArticleSku, sidArticleSku,
                           sidSizeSupplierItem FORCE GRID, sidColorSupplierItem FORCE GRID, nameColorSupplierItem FORCE GRID, shortNameUOMSku
    PROPERTIES(w, s) quantityWHfromRFSku, quantityOriginCurrentBoxWHfromRFSku, diffQuantityWHfromRFSku

    FILTERGROUP filtersQuantityOrigin
        FILTER 'Показывать с расхождением' 'F8' diffQuantityWHfromRFSku(w, s) DEFAULT
        FILTER 'Показывать ожидаемые/принятые' 'F7' quantityOriginCurrentBoxWHfromRFSku(w, s) OR quantityWHfromRFSku(w, s)


    FILTERS inWHfromRFWHfromRFDetail(w, d)

    FILTERGROUP filtersQuantity
        FILTER 'Показывать принятые' 'F9' quantityWHfromRFDetail(d) DEFAULT

    EVENTS
        ON OK prePostWHfromRF(w)

    EDIT WHfromRF OBJECT w
;

DESIGN WHfromRF FROM DEFAULT {

    main {
        preferredSize = (1024, 768);
        NEW top {
            childConstraints =  TO THE BOTTOM;

            w.box{
                NEW head{
                    caption = 'Шапка документа';
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(objectClassName){preferredCharWidth = 15;}
                    ADD PROPERTY(nameStockWHfromRF);
                    ADD PROPERTY(nameNumeratorObject);
                    ADD PROPERTY(numberObject);
                    ADD PROPERTY(seriesObject);
                    ADD PROPERTY(dateWHfromRF);
                    ADD PROPERTY(timeWHfromRF);
                }
                ADD w.documentPrmGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
                ADD w.exchangeGroup {
                    childConstraints = TO THE RIGHTBOTTOM;
                }
                NEW freightUnit{
                    caption = 'Короб';
                    childConstraints = TO THE RIGHT;
                    ADD PROPERTY(quantityRemainedPositionSkuWHfromRF);
                    ADD PROPERTY(quantityRemainedSkuWHfromRF);
                    ADD PROPERTY(barcodeCurrentFreightUnit);
                    ADD PROPERTY(fillWHfromRFDetailsSkuFreightUnit);
                    ADD PROPERTY(printMarksSkuFreightUnit);
                }
            }
        }

        NEW wor {
            type = TABBED;
            ADD d.box {
                NEW firstCase {
                    caption = 'Атрибуты поставщика';
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD PROPERTY(originalNameArticleSkuWHfromRFDetail);
                    ADD PROPERTY(nameCountryOfOriginArticleSkuWHfromRFDetail);
                    ADD PROPERTY(nameBrandSupplierArticleSkuWHfromRFDetail);
                    ADD PROPERTY(netWeightArticleSkuWHfromRFDetail);
                    ADD PROPERTY(mainCompositionOriginArticleSkuWHfromRFDetail);
                }

                NEW row {
                    title = 'Внутренние атрибуты';
                    childConstraints =  TO THE BOTTOM;
                    NEW row1 {
                        caption = 'Общие';
                        childConstraints =  TO THE RIGHTBOTTOM;
                        ADD PROPERTY(sidGenderArticleSkuWHfromRFDetail);
                        ADD PROPERTY(c);
                        ADD PROPERTY(nameTypeFabricArticleSkuWHfromRFDetail);
                        ADD PROPERTY(u);
                        ADD PROPERTY(netWeightSkuWHfromRFDetail);
                        ADD PROPERTY(nameCountryOfOriginSkuWHfromRFDetail);
                        ADD PROPERTY(coefficientArticleSkuWHfromRFDetail);
                    }
                    NEW row2 {
                        caption = 'Состав';
                        childConstraints =  TO THE RIGHTBOTTOM;
                        ADD PROPERTY(mainCompositionOriginSkuWHfromRFDetail);
                        ADD PROPERTY(mainCompositionSkuWHfromRFDetail);
                        ADD PROPERTY(mainCompositionWHfromRFDetail);
                    }
                    NEW row3 {
                        caption = 'Доп. состав';
                        childConstraints =  TO THE RIGHTBOTTOM;
                        ADD PROPERTY(additionalCompositionOriginSkuWHfromRFDetail);
                        ADD PROPERTY(additionalCompositionSkuWHfromRFDetail);
                        ADD PROPERTY(additionalCompositionWHfromRFDetail);
                    }

                }
            }
            ADD s.box {title = 'Содержимое короба';}
        }

        PROPERTY(formOk) {
            caption = 'Провести';
        }

         PROPERTY(nameStockWHfromRF) { background = #FFEEEE; }
         PROPERTY(nameCompanyDataWHfromRF) { background = #FFEEEE; }
         PROPERTY(nameFreightWHfromRF) { background = #FFEEEE; }
         PROPERTY(nameTypeExchangeWHfromRF) { background = #FFEEEE; }
         PROPERTY(barcodeCurrentFreightUnit) { background = #FFEEEE; }



        ADD functions.box;
    }
}

statusRecWHfromRF 'Статус приемки' (WHfromRF) =
    IF WHfromRF IS WHfromRFPosted THEN 'Проведен' ELSE 'Не проведен' IF (WHfromRF IS WHfromRF) PREFCHARWIDTH 15 MINCHARWIDTH 15;

FORM WHfromRFs 'Приход товара из РФ'

    OBJECTS w = WHfromRF

    PROPERTIES(w) READONLY objectClassName, numberObject, seriesObject, dateWHfromRF, timeWHfromRF, nameFreightWHfromRF, nameStockWHfromRF,
                           countWHfromRFDetailWHfromRF, quantityWHfromRFDetailWHfromRF, statusRecWHfromRF,
                           descriptionFreightWHfromRF, nameLegalEntityStockWHfromRF, accountSumWHfromRF

    PROPERTIES(w) ADDFORM, EDITFORM, deletew=DELETE FORCE PANEL TOOLBAR

    PROPERTIES (w) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed,
                                        hostnameComputerClosed

    OBJECTS d = WHfromRFDetail
    PROPERTIES(d) READONLY indexWHfromRFDetail, barcodeWHfromRFDetail, nameCategoryArticleSkuWHfromRFDetail,
                           nameBrandWHfromRFDetail, sidArticleWHfromRFDetail, sidSizeWHfromRFDetail,
                           sidColorWHfromRFDetail, nameColorWHfromRFDetail, barcodeFreightUnitWHfromRFDetail,
                           quantityWHfromRFDetail, nameUnitOfMeasureArticleSkuWHfromRFDetail,
                           retailPriceWHfromRFDetail, accountSumWHfromRFDetail

    FILTERS WHfromRFWHfromRFDetail(d) == w
;

DESIGN WHfromRFs FROM DEFAULT{

    NEW topContainer {

        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD w.box;
        NEW docDetail{

            type = TABBED;
            ADD d.box{
                title = 'Спецификация';
            };
            NEW documentHistory {

                title = 'История';
                ADD w.historyGroup;
                ADD w.postedGroup;
            }

        }
    }

    ADD functions.box;

    PROPERTY (deletew) {
        caption = 'Удалить';
        askConfirm = TRUE;
    }
}
