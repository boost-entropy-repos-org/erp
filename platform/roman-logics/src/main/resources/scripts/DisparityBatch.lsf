MODULE DisparityBatch;

REQUIRE System,
        Document,
        RomanDocument,
        Stock,
        RomanStock,
        RetailPrice,
        DocumentTransfer,
        Move,
        Transfer,
        RomanLogicsModule;

PRIORITY Stock, RomanLogicsModule;

// ---------------------------------------- Пересорт внутри между партиями внутри одного Sku ------------------------------------ //
CLASS DisparityBatch 'Пересорт м/у партиями': Historizable, NumeratedObject;
TABLE disparityBatch(DisparityBatch);
CLASS DisparityBatchPosted 'Проведенный пересорт м/у партиями' : DisparityBatch, PostedObject;

CLASS DisparityInBatchDetail 'Строка пересорта м/у партиями (In)';
TABLE disparityInBatchDetail(DisparityInBatchDetail);

CLASS DisparityOutBatchDetail 'Строка пересорта м/у партиями (Out)';
TABLE disparityOutBatchDetail(DisparityOutBatchDetail);

@defineNumeratedObjectDefault(DisparityBatch, 'Нумератор для пересорта', 'ПР');

@defineDocumentRelation(disparityBatch, DisparityInBatchDetail, ' (In)');
@defineDocumentRelation(disparityBatch, DisparityOutBatchDetail, ' (Out)');

@defineDocumentDetailIndex(disparityBatch, DisparityInBatchDetail);
@defineDocumentDetailIndex(disparityBatch, DisparityOutBatchDetail);

@defineDocumentHeaderTime(DisparityBatch);
@defineDocumentDetailTime(disparityBatch, DisparityInBatchDetail);
@defineDocumentDetailTime(disparityBatch, DisparityOutBatchDetail);

@defineDocumentHeaderNote(DisparityBatch);

@defineDocumentDetailActionsCustom(disparityBatch, DisparityInBatchDetail);
@defineDocumentDetailActionsCustom(disparityBatch, DisparityOutBatchDetail);

@defineDocumentHeaderStock(disparityBatch, stock, 'Склад');
@defineDocumentDetailStock (disparityBatch, disparityInBatchDetail, stock, 'Склад');
@defineDocumentDetailStock (disparityBatch, disparityOutBatchDetail, stock, 'Склад');

@defineDocumentHeaderPosted (DisparityBatch);
@defineDocumentDetailPosted (disparityBatch, DisparityInBatchDetail);
@defineDocumentDetailPosted (disparityBatch, DisparityOutBatchDetail);

@defineDocumentHeaderDescription(DisparityBatch, 'Пересорт м/у партиями');
@defineDocumentDetailDescription(disparityBatch, DisparityInBatchDetail);
@defineDocumentDetailDescription(disparityBatch, DisparityOutBatchDetail);

@defineDocumentDetailNumber(disparityBatch, DisparityInBatchDetail);
@defineDocumentDetailNumber(disparityBatch, DisparityOutBatchDetail);

@defineDocumentDetailSkuCustom(disparityInBatchDetail, sku);
@defineDocumentDetailSkuCustom(disparityOutBatchDetail, sku);

@defineDocumentDetailQuantityCustom(disparityInBatchDetail);
@defineDocumentDetailQuantityCustom(disparityOutBatchDetail);

@defineDocumentHeaderQuantityCustomPrefix (disparityBatch, disparityInBatchDetail, , ' (In)');
@defineDocumentHeaderQuantityCustomPrefix (disparityBatch, disparityOutBatchDetail, , ' (Out)');

@defineDocumentHeaderSkuQuantityCaptionCustom (disparityBatch, disparityInBatchDetail, sku, ' (In)');
@defineDocumentHeaderSkuQuantityCaptionCustom (disparityBatch, disparityOutBatchDetail, sku, ' (Out)');

// Кнопки подбора
@defineAddDetailDialogSkuStockCustom (disparityBatch, disparityInBatchDetail, ' (In)', sku, stock, dialogSku);
@defineAddDetailDialogSkuStockCustom (disparityBatch, disparityOutBatchDetail, ' (Out)', sku, stock, dialogSku);
@defineAddDetailDialogBarcodeCustom(disparityBatch, disparityInBatchDetail, sku);
@defineAddDetailDialogBarcodeCustom(disparityBatch, disparityOutBatchDetail, sku);

@defineDocumentDetailBatchCustom(disparityInBatchDetail, batch);
@defineDocumentDetailBatchCustom(disparityOutBatchDetail, batch);


CONSTRAINT disparityBatch IS DisparityBatch AND  isPostedDisparityBatch(disparityBatch)
    AND quantityDisparityInBatchDetailSkuDisparityBatch(sku, disparityBatch) != quantityDisparityOutBatchDetailSkuDisparityBatch(sku, disparityBatch)
    MESSAGE 'Количество для SKU и документа по (In) и (Out) должны быть равны';


diffCurrentBalanceBatchStock 'Разница' (batch, stock)= currentBalanceABatchStock(batch, stock) (-) currentBalanceBatchStock(batch, stock);
diffNegativeBalanceBatchStock 'Отрицательные' (batch, stock) =  -diffCurrentBalanceBatchStock(batch, stock) IF  diffCurrentBalanceBatchStock(batch, stock) <0;
diffPositiveBalanceBatchStock 'Положительные' (batch, stock) =  diffCurrentBalanceBatchStock(batch, stock) IF  diffCurrentBalanceBatchStock(batch, stock) >0;

diffNegativeBalanceSkuStock 'Отрицательные' (sku, stock) =  GROUP SUM  diffNegativeBalanceBatchStock(batch, stock) BY skuBatch(batch), stock;
diffPositiveBalanceSkuStock 'Положительные' (sku, stock) =  GROUP SUM  diffPositiveBalanceBatchStock(batch, stock) BY skuBatch(batch), stock;

diffPositiveBalanceStock 'Положительные' (stock) =  GROUP SUM  diffPositiveBalanceSkuStock(sku, stock) BY stock;

diffBalanceSkuStock 'Разница' (sku, stock) = min(diffNegativeBalanceSkuStock (sku, stock), diffPositiveBalanceSkuStock (sku, stock));


diffBalanceStock 'К-во годное к пересорту' (stock) = GROUP SUM diffBalanceSkuStock(sku, stock) BY stock;
diffBalanceDisparityBatch 'К-во годное к пересорту' (disparityBatch) = diffBalanceStock(stockDisparityBatch(disparityBatch)) IN documentPrmGroup;

quantityPositiveDisparityBatchStock(batch, stock) = PARTITION UNGROUP diffBalanceSkuStock
                                                      LIMIT diffPositiveBalanceBatchStock (batch, stock)
                                                      BY skuBatch(batch), stock
                                                      ORDER orderBatch(batch);

quantityNegativeDisparityBatchStock(batch, stock) = PARTITION UNGROUP diffBalanceSkuStock
                                                      LIMIT diffNegativeBalanceBatchStock(batch, stock)
                                                      BY skuBatch(batch), stock
                                                      ORDER orderBatch(batch);

disparityBatchStock (stock) = GROUP MAX disparityBatch BY stockDisparityBatch(disparityBatch);


FORM disparityBatch 'Пересорт м/у партиями'
    OBJECTS o = DisparityBatch FIXED PANEL

    PROPERTIES (o) objectClassName, nameNumeratorObject, numberObject, seriesObject, dateDisparityBatch, timeDisparityBatch, noteDisparityBatch, //nameStockDisparityBatch
                   countDisparityInBatchDetailDisparityBatch, quantityDisparityInBatchDetailDisparityBatch,
                   countDisparityOutBatchDetailDisparityBatch, quantityDisparityOutBatchDetailDisparityBatch, diffBalanceDisparityBatch

    OBJECTS di = DisparityInBatchDetail
    OBJECTS do = DisparityOutBatchDetail

    PROPERTIES(o) TODRAW di addDetailDialogSkuStockDisparityInBatchDetailDisparityBatch, addDetailInputBarcodeDisparityInBatchDetailDisparityBatch,
                            deleteDisparityInBatchDetailDisparityBatch

    PROPERTIES(o) TODRAW do addDetailDialogSkuStockDisparityOutBatchDetailDisparityBatch, addDetailInputBarcodeDisparityOutBatchDetailDisparityBatch,
                            deleteDisparityOutBatchDetailDisparityBatch

    FILTERS disparityBatchDisparityInBatchDetail(di) == o,
            disparityBatchDisparityOutBatchDetail(do) == o

    EVENTS
        ON OK prePostDisparityBatch(o)

    EDIT DisparityBatch OBJECT o
;

DESIGN disparityBatch FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        o.box {
            childConstraints = TO THE RIGHT;
            NEW columnHeaderPrm {
                childConstraints = TO THE RIGHT;
                NEW columnHeaderPrm1 {
                    childConstraints = TO THE BOTTOM;
                    ADD o.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY (objectClassName);
                        ADD PROPERTY (nameNumeratorObject);
                        ADD PROPERTY (numberObject);
                        ADD PROPERTY (seriesObject);
                        ADD PROPERTY (dateDisparityBatch);
                        ADD PROPERTY (timeDisparityBatch);
                    }
                    ADD o.documentPrmGroup {
                        childConstraints = TO THE RIGHT;
                    }
                }
                ADD o.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

FORM disparityBatches 'Пересорты м/у партиями'
    OBJECTS o = DisparityBatch
    PROPERTIES (o) READONLY isPostedDisparityBatch FORCE GRID, numberObject, seriesObject, dateDisparityBatch, timeDisparityBatch, nameStockDisparityBatch, noteDisparityBatch,
                   countDisparityInBatchDetailDisparityBatch, quantityDisparityInBatchDetailDisparityBatch,
                   countDisparityOutBatchDetailDisparityBatch, quantityDisparityOutBatchDetailDisparityBatch

    PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (o)    ADDFORM, EDITFORM, deleteo=DELETE FORCE PANEL TOOLBAR

    OBJECTS di = DisparityInBatchDetail
    OBJECTS do = DisparityOutBatchDetail

    FILTERS disparityBatchDisparityInBatchDetail(di) == o,
            disparityBatchDisparityOutBatchDetail(do) == o
;

DESIGN disparityBatches FROM DEFAULT {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD o.box {
            fillVertical = 1;
        };

        NEW documentDetail {
            type = TABBED;
            fillVertical = 2.5;
            NEW detail {
                title = 'Спецификация';
                ADD di.box;
                ADD do.box;

            }
            NEW documentHistory {
                title = 'История';

                ADD o.historyGroup;
                ADD o.postedGroup;
            }
        }
    }
}

@defineDocumentDetailSkuArticleCustom(disparityInBatchDetail);
@extendFormDocumentDetailSkuArticleCustom(disparityBatch, di, disparityInBatchDetail);
@extendFormDocumentDetailSkuArticleReadonlyCustom(disparityBatches, di, disparityInBatchDetail);

@defineDocumentDetailSkuArticleCustom(disparityOutBatchDetail);
@extendFormDocumentDetailSkuArticleCustom(disparityBatch, do, disparityOutBatchDetail);
@extendFormDocumentDetailSkuArticleReadonlyCustom(disparityBatches, do, disparityOutBatchDetail);

createMixDisparityBatch 'Сделать подборку строк пересорта' = ACTION (disparityBatch) {

    FOR quantityNegativeDisparityBatchStock(batch, stockDisparityBatch(disparityBatch)) DO {
        ADDOBJ DisparityOutBatchDetail;
        FOR d == addedObject() DO {
            SET disparityBatchDisparityOutBatchDetail(d) <- disparityBatch;
            SET skuDisparityOutBatchDetail(d) <- skuBatch(batch);
            SET batchDisparityOutBatchDetail(d) <- batch;
            SET quantityDisparityOutBatchDetail(d) <- quantityNegativeDisparityBatchStock(batch, stockDisparityBatch(disparityBatch));
        }
    }

    FOR quantityPositiveDisparityBatchStock(batch, stockDisparityBatch(disparityBatch)) DO {
        ADDOBJ DisparityInBatchDetail;
        FOR d == addedObject() DO {
            SET disparityBatchDisparityInBatchDetail(d) <- disparityBatch;
            SET skuDisparityInBatchDetail(d) <- skuBatch(batch);
            SET batchDisparityInBatchDetail(d) <- batch;
            SET quantityDisparityInBatchDetail(d) <- quantityPositiveDisparityBatchStock(batch, stockDisparityBatch(disparityBatch));
        }
    }
} IN documentPrmGroup CONFIRM;

@implementSkuLedgerOutFIFO(DisparityOutBatchDetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityDisparityOutBatchDetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += quantityDisparityOutBatchDetail(ledger) IF batchDisparityOutBatchDetail(ledger) == batch;
changedDataSkuLedger(ledger) += CHANGED(batchDisparityOutBatchDetail(ledger));
sumOutSkuLedger(ledger) += 0.0 IF ledger IS DisparityOutBatchDetail;
skipASkuLedger (ledger) += ledger IS DisparityOutBatchDetail;

@implementSkuLedgerInLIFO(DisparityInBatchDetail, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityDisparityInBatchDetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += quantityDisparityInBatchDetail(ledger) IF batchDisparityInBatchDetail(ledger) == batch;
changedDataSkuLedger(ledger) += CHANGED(batchDisparityInBatchDetail(ledger));
sumInSkuLedger(ledger) += 0.0 IF ledger IS DisparityInBatchDetail;
skipASkuLedger (ledger) += ledger IS DisparityInBatchDetail;

FORM stockDisparity 'Склады'

    OBJECTS o = DisparityBatch FIXED PANEL

    TREE stockTree  sg = StockGroup PARENT parentStockGroup
    PROPERTIES READONLY sgTreeName = nameStockGroup(sg)

    OBJECTS ts = Stock
    PROPERTIES READONLY tsTreeName = nameStock(ts), diffBalanceStock(ts)
    FILTERS isParentStockGroupStock(sg, ts)
    FILTERGROUP filters2
        FILTER 'Только с возможностью пересорта' 'F10' diffBalanceStock(ts) > 0 DEFAULT
;

DESIGN stockDisparity FROM DEFAULT {
    main{
        preferredSize = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            childConstraints = TO THE RIGHT;

            ADD stockTree.tree.box {
                title = 'Склады';
            }

            ADD ts.box;
        }

        ADD functions.box;
    }
}

showActionDisparityBatch (disparityBatch)= disparityBatch IS DisparityBatch AND NOT quantityDisparityInBatchDetailDisparityBatch(disparityBatch)
    AND NOT quantityDisparityOutBatchDetailDisparityBatch(disparityBatch);

stockForDisparityBatch 'Склад' (disparityBatch) = ACTION (disparityBatch) {
    FORM stockDisparity OBJECTS o = disparityBatch MODAL;
    IF formResult() == FormResult.ok THEN {
        SET stockDisparityBatch(disparityBatch) <- chosenObject('ts');
    }
}


EXTEND FORM disparityBatch
    PROPERTIES(o)  nameStockDisparityBatch ON CHANGE stockForDisparityBatch(o), createMixDisparityBatch SHOWIF showActionDisparityBatch(o)
    PROPERTIES(di) descriptionBatchDisparityInBatchDetail
    PROPERTIES(do) descriptionBatchDisparityOutBatchDetail
;
EXTEND DESIGN disparityBatch {
    o.documentHeaderGroup {
        ADD PROPERTY (nameStockDisparityBatch) BEFORE PROPERTY (nameNumeratorObject);
    }
}


EXTEND FORM disparityBatches
    PROPERTIES(di) READONLY descriptionBatchDisparityInBatchDetail
    PROPERTIES(do) READONLY descriptionBatchDisparityOutBatchDetail
;

// ---------------------------------------- Пересорт на складе ------------------------------------ //

CLASS DisparityBatchA 'Пересорт м/у партиями (бухг.)': Historizable, NumeratedObject;
TABLE disparityBatchA(DisparityBatchA);
CLASS DisparityBatchAPosted 'Проведенный пересорт м/у партиями (бухг.)' : DisparityBatchA, PostedObject;

CLASS DisparityInBatchADetail 'Строка пересорта м/у партиями (бухг.) (In)';
TABLE disparityInBatchADetail(DisparityInBatchADetail);

CLASS DisparityOutBatchADetail 'Строка пересорта м/у партиями (бухг.) (Out)';
TABLE disparityOutBatchADetail(DisparityOutBatchADetail);

@defineNumeratedObjectDefault(DisparityBatchA, 'Нумератор для пересорта м/у партиями (бухг.)', 'ПБ');

@defineDocumentRelation(disparityBatchA, DisparityInBatchADetail, ' (In)');
@defineDocumentRelation(disparityBatchA, DisparityOutBatchADetail, ' (Out)');

@defineDocumentDetailIndex(disparityBatchA, DisparityInBatchADetail);
@defineDocumentDetailIndex(disparityBatchA, DisparityOutBatchADetail);

@defineDocumentHeaderTime(DisparityBatchA);
@defineDocumentDetailTime(disparityBatchA, DisparityInBatchADetail);
@defineDocumentDetailTime(disparityBatchA, DisparityOutBatchADetail);

@defineDocumentHeaderNote(DisparityBatchA);

@defineDocumentDetailActionsCustom(disparityBatchA, DisparityInBatchADetail);
@defineDocumentDetailActionsCustom(disparityBatchA, DisparityOutBatchADetail);

@defineDocumentHeaderStock(disparityBatchA, stock, 'Склад');
@defineDocumentDetailStock (disparityBatchA, disparityInBatchADetail, stock, 'Склад');
@defineDocumentDetailStock (disparityBatchA, disparityOutBatchADetail, stock, 'Склад');

@defineDocumentHeaderCurrency(disparityBatchA);
@deriveDocumentCurrency(disparityBatchA, stock);
@defineDocumentDetailCurrency(disparityBatchA, disparityInBatchADetail);
@defineDocumentDetailCurrency(disparityBatchA, disparityOutBatchADetail);

@defineDocumentHeaderPosted (DisparityBatchA);
@defineDocumentDetailPosted (disparityBatchA, DisparityInBatchADetail);
@defineDocumentDetailPosted (disparityBatchA, DisparityOutBatchADetail);

@defineDocumentHeaderDescription(DisparityBatchA, 'Пересорт м/у партиями (бухг.)');
@defineDocumentDetailDescription(disparityBatchA, DisparityInBatchADetail);
@defineDocumentDetailDescription(disparityBatchA, DisparityOutBatchADetail);

@defineDocumentDetailNumber(disparityBatchA, DisparityInBatchADetail);
@defineDocumentDetailNumber(disparityBatchA, DisparityOutBatchADetail);

@defineDocumentDetailSkuCustom(disparityInBatchADetail, sku);
@defineDocumentDetailSkuCustom(disparityOutBatchADetail, sku);

@defineDocumentDetailQuantityCustom(disparityInBatchADetail);
@defineDocumentDetailQuantityCustom(disparityOutBatchADetail);

@defineDocumentHeaderQuantityCustomPrefix (disparityBatchA, disparityInBatchADetail, , ' (In)');
@defineDocumentHeaderQuantityCustomPrefix (disparityBatchA, disparityOutBatchADetail, , ' (Out)');

@defineDocumentHeaderSkuQuantityCaptionCustom (disparityBatchA, disparityInBatchADetail, sku, ' (In)');
@defineDocumentHeaderSkuQuantityCaptionCustom (disparityBatchA, disparityOutBatchADetail, sku, ' (Out)');

// Кнопки подбора
@defineAddDetailDialogSkuStockCustom (disparityBatchA, disparityInBatchADetail, ' (In)', sku, stock, dialogSku);
@defineAddDetailDialogSkuStockCustom (disparityBatchA, disparityOutBatchADetail, ' (Out)', sku, stock, dialogSku);
@defineAddDetailDialogBarcodeCustom(disparityBatchA, disparityInBatchADetail, sku);
@defineAddDetailDialogBarcodeCustom(disparityBatchA, disparityOutBatchADetail, sku);

@defineDocumentDetailBatchCustom(disparityInBatchADetail, batch);
@defineDocumentDetailBatchCustom(disparityOutBatchADetail, batch);

@defineDocumentHeaderAndDetailSumCustomCaption (disparityBatchA, disparityInBatchADetail, ' (всего) (In)', );
@defineDocumentHeaderAndDetailSumCustomCaption (disparityBatchA, disparityOutBatchADetail, ' (всего) (Out)', );


CONSTRAINT disparityBatchA IS DisparityBatchA AND isPostedDisparityBatchA(disparityBatchA)
    AND sumDisparityInBatchADetailDisparityBatchA(disparityBatchA) != sumDisparityOutBatchADetailDisparityBatchA(disparityBatchA)
    MESSAGE 'Суммы для документа по (In) и (Out) должны быть равны';

priceDisparityInBatchADetail(disparityInBatchADetail) <- priceBatchStockDateTime(batchDisparityInBatchADetail(disparityInBatchADetail), stockDisparityInBatchADetail(disparityInBatchADetail), dateTimeDisparityInBatchADetail(disparityInBatchADetail))
    WHEN CHANGED (batchDisparityInBatchADetail(disparityInBatchADetail)) OR CHANGED (dateTimeDisparityInBatchADetail(disparityInBatchADetail));

priceDisparityOutBatchADetail(disparityOutBatchADetail) <- priceBatchStockDateTime(batchDisparityOutBatchADetail(disparityOutBatchADetail), stockDisparityOutBatchADetail(disparityOutBatchADetail), dateTimeDisparityOutBatchADetail(disparityOutBatchADetail))
    WHEN CHANGED (batchDisparityOutBatchADetail(disparityOutBatchADetail)) OR CHANGED (dateTimeDisparityOutBatchADetail(disparityOutBatchADetail));


diffSumNegativeBalanceBatchDisparityBatchA 'Отрицательные сумма' (batch, disparityBatchA)= diffNegativeBalanceBatchStock(batch, stockDisparityBatchA(disparityBatchA)) *
    priceBatchStockDateTime(batch, stockDisparityBatchA(disparityBatchA), dateTimeDisparityBatchA(disparityBatchA));
diffSumPositiveBalanceBatchDisparityBatchA 'Положительные сумма' (batch, disparityBatchA)= diffPositiveBalanceBatchStock(batch, stockDisparityBatchA(disparityBatchA)) *
    priceBatchStockDateTime(batch, stockDisparityBatchA(disparityBatchA), dateTimeDisparityBatchA(disparityBatchA));

diffSumNegativeBalanceStock 'Отрицательные' (stock) =  GROUP SUM diffSumNegativeBalanceBatchDisparityBatchA(batch, disparityBatchA)  BY stockDisparityBatchA(disparityBatchA);
diffSumPositiveBalanceStock 'Положительные' (stock) =  GROUP SUM  diffSumPositiveBalanceBatchDisparityBatchA(batch, disparityBatchA)  BY stockDisparityBatchA(disparityBatchA);

diffSumBalanceStock 'Сумма годная к пересорту' (stock) = min(diffSumNegativeBalanceStock (stock), diffSumPositiveBalanceStock (stock));
diffSumBalanceDisparityBatchA 'Сумма годная к пересорту' (disparityBatchA) = diffSumBalanceStock(stockDisparityBatchA(disparityBatchA)) IN documentPrmGroup;

sumPositiveDisparityBatchDisparityBatchA(batch, disparityBatchA) = PARTITION UNGROUP diffSumBalanceStock
                                                      LIMIT diffSumPositiveBalanceBatchDisparityBatchA (batch, disparityBatchA)
                                                      BY stockDisparityBatchA(disparityBatchA)
                                                      ORDER orderBatch(batch);

sumNegativeDisparityBatchDisparityBatchA(batch, disparityBatchA) = PARTITION UNGROUP diffSumBalanceStock
                                                      LIMIT diffSumNegativeBalanceBatchDisparityBatchA (batch, disparityBatchA)
                                                      BY stockDisparityBatchA(disparityBatchA)
                                                      ORDER orderBatch(batch);

integerQuantityPositiveBatchDisparityBatchA 'Целое' (batch, disparityBatchA) = divideInteger(sumPositiveDisparityBatchDisparityBatchA(batch, disparityBatchA),
    priceBatchStockDateTime(batch, stockDisparityBatchA(disparityBatchA), dateTimeDisparityBatchA(disparityBatchA)));
integerQuantityNegativeBatchDisparityBatchA 'Целое' (batch, disparityBatchA) = divideInteger(sumNegativeDisparityBatchDisparityBatchA(batch, disparityBatchA),
    priceBatchStockDateTime(batch, stockDisparityBatchA(disparityBatchA), dateTimeDisparityBatchA(disparityBatchA)));


sumDiffDisparityBatchADetailDisparityBatchA 'Разница суммы всего In и Out' (disparityBatchA) = sumDisparityInBatchADetailDisparityBatchA(disparityBatchA) (-)
    sumDisparityOutBatchADetailDisparityBatchA(disparityBatchA) IN documentSumGroup;

FORM disparityBatchA 'Пересорт м/у партиями (бухг.)'
    OBJECTS o = DisparityBatchA FIXED PANEL

    PROPERTIES (o) objectClassName, nameNumeratorObject, numberObject, seriesObject, dateDisparityBatchA, timeDisparityBatchA, noteDisparityBatchA, //nameStockDisparityBatchA
                   countDisparityInBatchADetailDisparityBatchA, quantityDisparityInBatchADetailDisparityBatchA, sumDisparityInBatchADetailDisparityBatchA,
                   countDisparityOutBatchADetailDisparityBatchA, quantityDisparityOutBatchADetailDisparityBatchA, sumDisparityOutBatchADetailDisparityBatchA,
                   sumDiffDisparityBatchADetailDisparityBatchA

    OBJECTS di = DisparityInBatchADetail
    OBJECTS do = DisparityOutBatchADetail

    PROPERTIES(o) TODRAW di addDetailDialogSkuStockDisparityInBatchADetailDisparityBatchA, addDetailInputBarcodeDisparityInBatchADetailDisparityBatchA,
                            deleteDisparityInBatchADetailDisparityBatchA

    PROPERTIES(o) TODRAW do addDetailDialogSkuStockDisparityOutBatchADetailDisparityBatchA, addDetailInputBarcodeDisparityOutBatchADetailDisparityBatchA,
                            deleteDisparityOutBatchADetailDisparityBatchA

    FILTERS disparityBatchADisparityInBatchADetail(di) == o,
            disparityBatchADisparityOutBatchADetail(do) == o

    EVENTS
        ON OK prePostDisparityBatchA(o)

    EDIT DisparityBatchA OBJECT o
;

DESIGN disparityBatchA FROM DEFAULT {
    main {
        preferredSize = (1024, 768);
        o.box {
            childConstraints = TO THE RIGHT;
            NEW columnHeaderPrm {
                childConstraints = TO THE RIGHT;
                NEW columnHeaderPrm1 {
                    childConstraints = TO THE BOTTOM;
                    ADD o.documentHeaderGroup {
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY (objectClassName);
                        ADD PROPERTY (nameNumeratorObject);
                        ADD PROPERTY (numberObject);
                        ADD PROPERTY (seriesObject);
                        ADD PROPERTY (dateDisparityBatchA);
                        ADD PROPERTY (timeDisparityBatchA);
                    }
                    ADD o.documentPrmGroup {
                        childConstraints = TO THE RIGHT;
                    }
                }
                ADD o.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                    NEW row1 {
                        title = 'Строки';
                        childConstraints = TO THE RIGHT;
                        ADD PROPERTY (countDisparityInBatchADetailDisparityBatchA);
                        ADD PROPERTY (countDisparityOutBatchADetailDisparityBatchA);
                    }
                    NEW row2 {
                        childConstraints = TO THE RIGHT;
                        title = 'Количество';
                        ADD PROPERTY (quantityDisparityInBatchADetailDisparityBatchA);
                        ADD PROPERTY (quantityDisparityOutBatchADetailDisparityBatchA);
                    }
                    NEW row3 {
                        childConstraints = TO THE RIGHT;
                        title = 'Сумма';
                        ADD PROPERTY (sumDisparityInBatchADetailDisparityBatchA);
                        ADD PROPERTY (sumDisparityOutBatchADetailDisparityBatchA);
                    }
                    NEW row4 {
                        childConstraints = TO THE RIGHT;
                        title = 'Разница';
                        ADD PROPERTY (sumDiffDisparityBatchADetailDisparityBatchA);
                    }
                }
            }
        }
        PROPERTY(formOk) {
            caption = 'Провести';
        }
    }
}

FORM disparityBatchAs 'Пересорты м/у партиями (бухг.)'
    OBJECTS o = DisparityBatchA
    PROPERTIES (o) READONLY isPostedDisparityBatchA FORCE GRID, numberObject, seriesObject, dateDisparityBatchA, timeDisparityBatchA, nameStockDisparityBatchA, noteDisparityBatchA,
                   countDisparityInBatchADetailDisparityBatchA, quantityDisparityInBatchADetailDisparityBatchA, sumDisparityInBatchADetailDisparityBatchA,
                   countDisparityOutBatchADetailDisparityBatchA, quantityDisparityOutBatchADetailDisparityBatchA, sumDisparityOutBatchADetailDisparityBatchA

    PROPERTIES (o) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

    PROPERTIES (o)    ADDFORM, EDITFORM, deleteo=DELETE FORCE PANEL TOOLBAR

    OBJECTS di = DisparityInBatchADetail
    OBJECTS do = DisparityOutBatchADetail

    FILTERS disparityBatchADisparityInBatchADetail(di) == o,
            disparityBatchADisparityOutBatchADetail(do) == o
;

DESIGN disparityBatchAs FROM DEFAULT {
    PROPERTY (deleteo) {
        askConfirm = TRUE;
    }

    NEW documentContainer BEFORE functions.box {
        type = SPLITV;
        childConstraints = TO THE BOTTOM;

        ADD o.box {
            fillVertical = 1;
        };

        NEW documentDetail {
            type = TABBED;
            fillVertical = 2.5;
            NEW detail {
                title = 'Спецификация';
                ADD di.box;
                ADD do.box;

            }
            NEW documentHistory {
                title = 'История';

                ADD o.historyGroup;
                ADD o.postedGroup;
            }
        }
    }
}

@defineDocumentDetailSkuArticleCustom(disparityInBatchADetail);
@extendFormDocumentDetailSkuArticleCustom(disparityBatchA, di, disparityInBatchADetail);
@extendFormDocumentDetailSkuArticleReadonlyCustom(disparityBatchAs, di, disparityInBatchADetail);

@defineDocumentDetailSkuArticleCustom(disparityOutBatchADetail);
@extendFormDocumentDetailSkuArticleCustom(disparityBatchA, do, disparityOutBatchADetail);
@extendFormDocumentDetailSkuArticleReadonlyCustom(disparityBatchAs, do, disparityOutBatchADetail);

createMixDisparityBatchA 'Сделать подборку строк пересорта' = ACTION (disparityBatchA) {

    FOR integerQuantityNegativeBatchDisparityBatchA(batch, disparityBatchA) DO {
        ADDOBJ DisparityOutBatchADetail;
        FOR d == addedObject() DO {
            SET disparityBatchADisparityOutBatchADetail(d) <- disparityBatchA;
            SET skuDisparityOutBatchADetail(d) <- skuBatch(batch);
            SET batchDisparityOutBatchADetail(d) <- batch;
            SET quantityDisparityOutBatchADetail(d) <- toNumeric14p3(integerQuantityNegativeBatchDisparityBatchA(batch, disparityBatchA));
            SET priceDisparityOutBatchADetail(d) <- priceBatchStockDateTime(batch, stockDisparityBatchA(disparityBatchA), dateTimeDisparityBatchA(disparityBatchA));
        }
    }

    FOR integerQuantityPositiveBatchDisparityBatchA(batch, disparityBatchA) DO {
        ADDOBJ DisparityInBatchADetail;
        FOR d == addedObject() DO {
            SET disparityBatchADisparityInBatchADetail(d) <- disparityBatchA;
            SET skuDisparityInBatchADetail(d) <- skuBatch(batch);
            SET batchDisparityInBatchADetail(d) <- batch;
            SET quantityDisparityInBatchADetail(d) <- toNumeric14p3(integerQuantityPositiveBatchDisparityBatchA(batch, disparityBatchA));
            SET priceDisparityInBatchADetail(d) <- priceBatchStockDateTime(batch, stockDisparityBatchA(disparityBatchA), dateTimeDisparityBatchA(disparityBatchA));
        }
    }
} IN documentPrmGroup CONFIRM;

@implementSkuLedgerOutFIFO(DisparityOutBatchADetail, sku, stock);
quantityOutFIFOSkuLedger (ledger) += quantityDisparityOutBatchADetail(ledger);
limitOutFIFOSkuLedgerBatch (ledger, batch) += quantityDisparityOutBatchADetail(ledger) IF batchDisparityOutBatchADetail(ledger) == batch;
sumOutSkuLedger(ledger) += sumDisparityOutBatchADetail(ledger);

@implementSkuLedgerInLIFO(DisparityInBatchADetail, sku, stock);
quantityInLIFOSkuLedger (ledger) += quantityDisparityInBatchADetail(ledger);
limitInLIFOSkuLedgerBatch (ledger, batch) += quantityDisparityInBatchADetail(ledger) IF batchDisparityInBatchADetail(ledger) == batch;
sumInSkuLedger(ledger) += sumDisparityInBatchADetail(ledger);

EXTEND FORM disparityBatchA
    PROPERTIES(o)  nameStockDisparityBatchA, createMixDisparityBatchA
    PROPERTIES(di) descriptionBatchDisparityInBatchADetail, priceDisparityInBatchADetail, sumDisparityInBatchADetail
    PROPERTIES(do) descriptionBatchDisparityOutBatchADetail, priceDisparityOutBatchADetail, sumDisparityOutBatchADetail
;
EXTEND DESIGN disparityBatchA {
    o.documentHeaderGroup {
        ADD PROPERTY (nameStockDisparityBatchA) BEFORE PROPERTY (nameNumeratorObject);
    }
}


EXTEND FORM disparityBatchAs
    PROPERTIES(di) READONLY descriptionBatchDisparityInBatchADetail, priceDisparityInBatchADetail, sumDisparityInBatchADetail
    PROPERTIES(do) READONLY descriptionBatchDisparityOutBatchADetail, priceDisparityOutBatchADetail, sumDisparityOutBatchADetail
;


