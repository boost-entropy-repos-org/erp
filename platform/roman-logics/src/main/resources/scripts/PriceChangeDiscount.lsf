MODULE PriceChangeDiscount;

REQUIRE PriceChange,
        POS;

//-----------------Переоценка проданных со скидкой позиций---------------------------------
CLASS PriceChangeZReport 'Переоценка по проданным товарам' : PriceChangeDocument;
CLASS PriceChangeZReportDetail 'Строка переоценки по проданным товарам' : PriceChangeDocumentDetail;

isDiscountPriceChangeDepartmentStore 'Проводить уценку проданных со скидкой позиций' = DATA BOOLEAN (DepartmentStore);

EXTEND FORM departmentStore
    PROPERTIES (d) isDiscountPriceChangeDepartmentStore
;

EXTEND FORM departmentStores
    PROPERTIES (d) isDiscountPriceChangeDepartmentStore
;

@defineDocumentHeaderNote(ZReport);

needToPriceChangeReceiptSaleDetail (receiptSaleDetail) =
    TRUE IF discountSumReceiptSaleDetail (receiptSaleDetail) > 0
    AND isDiscountPriceChangeDepartmentStore(departmentStoreReceiptSaleDetail(receiptSaleDetail));

needToPriceChangeZReport (zReport) = GROUP SUM 1 IF needToPriceChangeReceiptSaleDetail (receiptSaleDetail)
    BY zReportReceipt (receiptReceiptSaleDetail(receiptSaleDetail));

@defineDocumentAggregationHeader(zReport, priceChangeZReport, needToPriceChangeZReport);

@defineAggregation(receiptSaleDetail, priceChangeZReportDetail, needToPriceChangeReceiptSaleDetail);
priceChangeZReportPriceChangeZReportDetail (detail) = priceChangeZReportZReport(zReportReceiptDetail(receiptSaleDetailPriceChangeZReportDetail(detail)));

@defineDocumentHeaderCount(priceChangeZReport);

departmentStorePriceChangeZReport (priceChangeZReport) = departmentStoreZReport(zReportPriceChangeZReport(priceChangeZReport));
departmentStorePriceChangeZReportDetail (priceChangeZReportDetail) =
    departmentStoreReceiptDetail(receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail));

@defineDocumentAggregationHeaderPosted(zReport, priceChangeZReport);

isPostedPriceChangeZReportDetail 'Проведен' (priceChangeZReportDetail) = isPostedReceiptDetail(receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail));

@defineDocumentAggregationHeaderDescription(zReport, priceChangeZReport);

@defineDocumentPriceChangeNumber(zReport);

skuPriceChangeZReportDetail (priceChangeZReportDetail) = skuReceiptSaleDetail (receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail));
nameSkuPriceChangeZReportDetail 'SKU' (priceChangeZReportDetail) = nameSku(skuPriceChangeZReportDetail(priceChangeZReportDetail)) IN recognize;
idBarcodeSkuPriceChangeZReportDetail 'Штрих-код' (priceChangeZReportDetail) = idBarcodeSku(skuPriceChangeZReportDetail(priceChangeZReportDetail)) IN recognize;

quantityPriceChangeZReportDetail 'Количество' (priceChangeZReportDetail) = quantityReceiptDetail(receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail));

dateTimePriceChangeZReportDetail (priceChangeZReportDetail) = dateTimeReceiptSaleDetail (receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail));

curImporterPricePriceChangeZReportDetail (priceChangeZReportDetail) = importerPriceBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

curSupplierPricePriceChangeZReportDetail (priceChangeZReportDetail) = supplierPriceBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

curRetailVATPriceChangeZReportDetail (priceChangeZReportDetail) = retailVATBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

curValueRetailVATPriceChangeZReportDetail (priceChangeZReportDetail) = valueRateRangeDate (curRetailVATPriceChangeZReportDetail (priceChangeZReportDetail),
    toDate(dateTimePriceChangeZReportDetail(priceChangeZReportDetail)));

curWarePriceChangeZReportDetail (priceChangeZReportDetail) = wareBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

curWarePricePriceChangeZReportDetail (priceChangeZReportDetail) = warePriceBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

curRetailPricePriceChangeZReportDetail (priceChangeZReportDetail) = priceReceiptSaleDetail (receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail));

importerPricePriceChangeZReportDetail (priceChangeZReportDetail) = importerPriceBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

supplierPricePriceChangeZReportDetail (priceChangeZReportDetail) = supplierPriceBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

retailVATPriceChangeZReportDetail (priceChangeZReportDetail) = retailVATBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

valueRetailVATPriceChangeZReportDetail (priceChangeZReportDetail) = valueRateRangeDate (retailVATPriceChangeZReportDetail (priceChangeZReportDetail),
    toDate(dateTimePriceChangeZReportDetail(priceChangeZReportDetail)));

warePriceChangeZReportDetail (priceChangeZReportDetail) = wareBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

nameWarePriceChangeZReportDetail 'Посуда' (priceChangeZReportDetail) = nameWare(warePriceChangeZReportDetail (priceChangeZReportDetail));

warePricePriceChangeZReportDetail (priceChangeZReportDetail) = warePriceBSkuDepartmentStoreDateTime
    (skuPriceChangeZReportDetail(priceChangeZReportDetail), departmentStorePriceChangeZReportDetail(priceChangeZReportDetail), dateTimePriceChangeZReportDetail(priceChangeZReportDetail));

retailPricePriceChangeZReportDetail (priceChangeZReportDetail) =
    (priceReceiptSaleDetail (receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail)) * quantityPriceChangeZReportDetail (priceChangeZReportDetail) -
     discountSumReceiptSaleDetail (receiptSaleDetailPriceChangeZReportDetail(priceChangeZReportDetail)))/quantityPriceChangeZReportDetail (priceChangeZReportDetail);

numberDisposalPriceChangeZReport '№ распоряжения на переоценку' (priceChangeZReport) = DATA STRING[30] (PriceChangeZReport);
priceChangeCommitteePriceChangeZReport 'Комиссия переоценки ИД' (priceChangeZReport) = DATA PriceChangeCommittee (PriceChangeZReport);

@implementPriceChangeDocument(priceChangeZReport, sku);
@implementPriceChangeDocumentDetailAllPrice (priceChangeZReport);