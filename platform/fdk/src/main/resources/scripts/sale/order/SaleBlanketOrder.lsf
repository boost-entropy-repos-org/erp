MODULE SaleBlanketOrder;

REQUIRE SaleOrder, BlanketOrder, SaleOperation;

NAMESPACE Sale;

//----------------------------------------------- Множественный Заказ ---------------------------------------------------//
@defineBlanketOrder(' (продажа)');
@defineOrderBlanketOrder(' (продажа)');

numeratorBlanketOrderStock(order, stock) <- saleDefaultNumeratorUserOrder() WHEN ASSIGNED(inBlanketOrderStock(order, stock));

//----------------------------------------------- Операции -----------------------------------------------------//

operationBlanketOrder = DATA Operation (BlanketOrder);
nameOperationBlanketOrder 'Операция' = nameOperation(operationBlanketOrder(blanketOrder));

operationOrder(order) += operationBlanketOrder(blanketOrderBlanketOrderOrder(order));

operationBlanketOrderDetail 'Операция' (blanketOrderDetail) = operationBlanketOrder(blanketOrderBlanketOrderDetail(blanketOrderDetail));

CONSTRAINT operationBlanketOrderDetail(blanketOrderDetail) AND priceListTypeBlanketOrderDetail(blanketOrderDetail)
           AND NOT inPriceListTypeOperation(priceListTypeBlanketOrderDetail(blanketOrderDetail), operationBlanketOrderDetail(blanketOrderDetail))
    CHECKED BY priceListTypeBlanketOrderDetail
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT operationBlanketOrder(blanketOrder) AND priceListTypeBlanketOrderStock(blanketOrder, stock)
           AND NOT inPriceListTypeOperation(priceListTypeBlanketOrderStock(blanketOrder, stock), operationBlanketOrder(blanketOrder))
    CHECKED BY priceListTypeBlanketOrderStock
    MESSAGE 'Вид цены должен совпадать с отмеченными в операции';

CONSTRAINT operationBlanketOrder(blanketOrder)
           AND NOT inSupplierOperation(supplierBlanketOrder(blanketOrder), operationBlanketOrder(blanketOrder))
    CHECKED BY supplierBlanketOrder
    MESSAGE 'Поставщик должен совпадать с отмеченными в операции';

CONSTRAINT operationBlanketOrder(blanketOrder)
           AND NOT inCustomerOperation(customerBlanketOrder(blanketOrder), operationBlanketOrder(blanketOrder))
    CHECKED BY customerBlanketOrder
    MESSAGE 'Покупатель должен совпадать с отмеченными в операции';

EXTEND FORM blanketOrder
    PROPERTIES(o) nameOperationBlanketOrder
;

EXTEND DESIGN blanketOrder{
    o.documentPrmGroup{
        ADD PROPERTY(nameOperationBlanketOrder) BEFORE PROPERTY(nameCurrencyBlanketOrder);
    }
}

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplierBlanketOrder(blanketOrder) AND NOT isCompanyLegalEntity(supplierBlanketOrder(blanketOrder))
    CHECKED BY supplierBlanketOrder MESSAGE 'Для множественного заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customerBlanketOrder(blanketOrder) AND NOT isCustomerLegalEntity(customerBlanketOrder(blanketOrder))
    CHECKED BY customerBlanketOrder MESSAGE 'Для множественного заказа выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentLegalEntityStockAccess(BlanketOrder, supplier, company, blanketOrder);

//------------------------------ Расширение формы -----------------------------//

// Резервы
@extendFormDocumentOrderLedgerStock(blanketOrder, blanketOrder, o);

NAVIGATOR {
    saleSaleNavigator {
        ADD blanketOrders BEFORE orders;
    }
}
