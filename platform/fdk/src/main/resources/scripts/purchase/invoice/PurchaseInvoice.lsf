MODULE PurchaseInvoice;

REQUIRE Utils, PurchaseOrder, OrderInvoice, PurchaseOperation, CustomsGroup, PriceListStock, PriceListLedger;

NAMESPACE Purchase;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (закупка)', customerStock);

@defineInvoiceBatch(customerStock);

@defineDocumentBatchPriceListType(userInvoice, customerStock);
@extendFormDocumentBatch(userInvoice, userInvoice, i);
@extendFormDocumentBatchAll(userInvoice, userInvoice, i);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

// вторая валюта
@defineInvoiceHomeCurrency();

@deriveDocumentDetailVAT (userInvoice, , date,  sku, customerStock); // записываем ставку

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperation(invoice, i);

@defineDocumentOperationPriceListType(userInvoice, 'накладной (закупка)');

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');

@defineDocumentOperationRole(userInvoice);

@defineOperationProperty(isHomeCurrency, 'Конвертация', showContainer);
@deriveDocumentOperationProperty(UserInvoice, isHomeCurrency);

// -------------------------------------------- Инвойс на основе заказа -------------------------------------- //

@defineOrderInvoice(' (закупка)', customerStock);
@defineOrderInvoiceAction (' (закупка)');

// --------------------------- Себестоимость ---------------------------------- //

extraCostPriceInvoiceDetail = ABSTRACT NUMERIC[14,2] (InvoiceDetail) PERSISTENT;
extraCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2] (UserInvoiceDetail) PERSISTENT;
extraCostPriceInvoiceDetail (detail) += extraCostPriceUserInvoiceDetail(detail);

customCostPriceInvoiceDetail = ABSTRACT NUMERIC[14,2](InvoiceDetail) PERSISTENT;
customCostPriceUserInvoiceDetail = ABSTRACT NUMERIC[14,2](UserInvoiceDetail) PERSISTENT;
customCostPriceInvoiceDetail(detail) += customCostPriceUserInvoiceDetail(detail);

certificateCostPriceInvoiceDetail 'Цена за сертификацию' = ABSTRACT NUMERIC[14,2](InvoiceDetail) PERSISTENT;
certificateCostPriceUserInvoiceDetail 'Цена за сертификацию' = ABSTRACT NUMERIC[14,2](UserInvoiceDetail) PERSISTENT;
certificateCostPriceInvoiceDetail(detail) += certificateCostPriceUserInvoiceDetail(detail);

incomePriceInvoiceDetail (detail) = IF isHomeCurrencyInvoice(invoiceInvoiceDetail(detail)) THEN
                                       homePriceInvoiceDetail(detail)
                                    ELSE priceInvoiceDetail(detail);

incomePriceUserInvoiceDetail (detail) = IF isHomeCurrencyUserInvoice(userInvoiceUserInvoiceDetail(detail)) THEN
                                         homePriceUserInvoiceDetail(detail)
                                    ELSE priceUserInvoiceDetail(detail);

costPriceInvoiceDetail(detail) = incomePriceInvoiceDetail(detail) (+) extraCostPriceInvoiceDetail(detail) (+)
                                 customCostPriceInvoiceDetail(detail) (+) certificateCostPriceInvoiceDetail(detail);

costPriceUserInvoiceDetail(detail) = incomePriceUserInvoiceDetail(detail) (+) extraCostPriceUserInvoiceDetail(detail) (+)
                                     customCostPriceUserInvoiceDetail(detail) (+) certificateCostPriceUserInvoiceDetail(detail);

// -------------------------------------- Формирование задолженности ---------------------------------------------------

CONSTRAINT supplierUserInvoice(userInvoice) AND NOT isSupplierLegalEntity(supplierUserInvoice(userInvoice))
    CHECKED BY supplierUserInvoice MESSAGE 'Для накладной выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customerUserInvoice(userInvoice) AND NOT isCompanyLegalEntity(customerUserInvoice(userInvoice))
    CHECKED BY customerUserInvoice MESSAGE 'Для накладной выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@defineDocumentSupplierCustomerStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
Invoice.packQuantityInvoiceDetail(detail) += packQuantityInvoiceDetail(detail);
EXTEND DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            title = 'Упаковка';
            ADD PROPERTY(showPackUserInvoice);
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, customerStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

//overChangeQuantityValueSkuUserInvoiceDetail(detail) += ACTION (detail) {
//    IF  packBarcodeSku(skuUserInvoiceDetail(detail)) THEN {
//        SET packQuantityUserInvoiceDetail(detail) <- quantityUserInvoiceDetail(detail)/amountPackUserInvoiceDetail(detail);
//    }
//}

// -- Операция
@defineOperationProperty(showPack, 'Упаковка', showContainer);
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' 'F10' prevCurrentBalanceSkuUserInvoice(ks, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailSkuUserInvoice(ks, i)
    FILTERGROUP filter2
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserInvoice(i), ks)
        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeSkuStockDateTime(priceListTypeUserInvoiceSku(i, ks), ks, customerStockUserInvoice(i), dateTimeUserInvoice(i)) == supplierUserInvoice(i)
;
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' 'F10' prevCurrentBalanceBatchUserInvoice(b, i)
        FILTER 'В документе ' 'F9' quantityUserInvoiceDetailBatchUserInvoice(b, i)
    FILTERGROUP filter4
        FILTER 'С поступлением ' 'F8' quantityPurchaseSupplierSku(supplierUserInvoice(i), skuBatch(b))
        FILTER 'В ассортименте ' 'F7' companyLedgerPriceListTypeBatchStockDateTime(priceListTypeUserInvoiceBatch(i, b), b, customerStockUserInvoice(i), dateTimeUserInvoice(i)) == supplierUserInvoice(i)
;

// Резервы
@extendFormDocumentOrderLedger(userInvoice, userInvoice, customerStock, i);
@extendFormDocumentOrderLedgerAll(userInvoice, userInvoice, i);

// --------------- Проведение по регистру закупок ------------- //

@implementPurchaseLedger(Invoice, sku, customerStock);
supplierPurchaseLedger (ledger) += supplierInvoiceDetail(ledger);
quantityPurchaseLedger (ledger) += quantityInvoiceDetail(ledger);
VATPurchaseLedger (ledger) += VATInvoiceDetail(ledger);
sumPurchaseLedger (ledger) += sumInvoiceDetail(ledger);

// --------------- Проведение по регистру цен ------------- //

EXTEND CLASS InvoiceDetail : PriceListLedger;

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(ledger);

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(ledger);

skuPriceListLedger (ledger) += skuInvoiceDetail(ledger);

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(ledger);

companyPriceListLedger (ledger) += supplierInvoiceDetail(ledger);

inPriceListLedgerStock (ledger, stock) += customerStockInvoiceDetail(ledger) == stock;

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoiceStockPriceListType 'Закупки (последняя по складу)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(priceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceInvoiceDetail(ledger) WHEN CLASS(priceInvoiceDetail(ledger)) AND type == SystemLedgerPriceListType.purchaseInvoiceStockPriceListType;

// Создаем вид цен по всем складам компании
CLASS InvoicePriceListLedger : PriceListLedger;

@defineAggregation(invoiceDetail, invoicePriceListLedger, isInvoiceDetail);

fromDateTimePriceListLedger (ledger) += dateTimeInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

isPostedPriceListLedger(ledger) += isPostedInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

skuPriceListLedger (ledger) += skuInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

descriptionPriceListLedger (ledger) += descriptionInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

companyPriceListLedger (ledger) += supplierInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger));

inPriceListLedgerStock (ledger, stock) += isCompanyStock(stock) AND priceStockGroupStock(customerStockInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) == priceStockGroupStock(stock);

EXTEND CLASS SystemLedgerPriceListType { purchaseInvoicePriceListType 'Закупки (последняя по ценовой группе)' }
batchLedgerPriceListType(type) += type == SystemLedgerPriceListType.purchaseInvoicePriceListType;
inPriceListLedgerSystemLedgerPriceListType (ledger, type) += TRUE WHEN CLASS(priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.purchaseInvoicePriceListType;
pricePriceListLedgerSystemLedgerPriceListType (ledger, type) += priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger)) WHEN CLASS(priceInvoiceDetail(invoiceDetailInvoicePriceListLedger(ledger))) AND type == SystemLedgerPriceListType.purchaseInvoicePriceListType;


NAVIGATOR {
    purchasePurchaseNavigator {
        ADD invoices;
    }
}

//Платежи
@defineInvoicePayment();

