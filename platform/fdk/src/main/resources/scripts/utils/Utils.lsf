MODULE Utils;

REQUIRE System, Time;

dateDiffersCurrent(date) = date IS DATE AND date != currentDate();

// --------------------------------------------- Стандартные группы --------------------------------- //

GROUP printGroup 'Печатные формы' : public;

// --------------------------------------------- Работа со строками --------------------------------- //

stringEqualsAll(string) = string == STRING[3]('Все');

toText = FORMULA TEXT 'CAST($1 AS TEXT)';

toString2 = FORMULA STRING[2] 'CAST($1 AS character(2))' FIXEDCHARWIDTH 2;
toString3 = FORMULA STRING[3] 'CAST($1 AS character(3))' FIXEDCHARWIDTH 3;
toString4 = FORMULA STRING[4] 'CAST($1 AS character(4))' FIXEDCHARWIDTH 4;
toString10 = FORMULA STRING[4] 'CAST($1 AS character(10))' FIXEDCHARWIDTH 10;
toString15 = FORMULA STRING[15] 'CAST($1 AS character(15))' FIXEDCHARWIDTH 15;
toString50 = FORMULA STRING[50] 'CAST($1 AS character(50))';
toString255 = FORMULA STRING[255] 'CAST($1 AS character(255))';

isWordInCSV = FORMULA INTEGER 'CASE WHEN CAST($1 AS text)=ANY(string_to_array($2,\',\')) THEN 1 ELSE 0 END';

isSubstring = FORMULA BOOLEAN 'CASE WHEN (($1) LIKE (\'%\'||($2)||\'%\')) THEN 1 ELSE NULL END';

replace = FORMULA 'replace($1,$2,$3)';

charLength = FORMULA INTEGER 'char_length($1)';
// --------------------------------------------- Работа с числами --------------------------------- //

ceil = FORMULA 'CEIL($1)';
min = FORMULA '($1+$2-ABS($1-$2))/2';

sqr = FORMULA '($1)*($1)';
sqrt = FORMULA 'sqrt($1)';
percent = FORMULA '(($1)*($2)/100)';
share = FORMULA '(($1)*100/($2))';
round = FORMULA 'round(CAST(($1) as numeric),$2)';
delta = FORMULA 'abs(($1)-($2))';

divideInteger = FORMULA INTEGER 'CAST(CAST(trunc($1) AS integer)/CAST(trunc($2) as integer) as integer)';
divideIntegerNeg = FORMULA INTEGER 'CASE WHEN CAST(($1) AS integer)<0 THEN -CAST(((-CAST(($1) as integer)-1)/CAST(($2) as integer)) as integer) ELSE CAST(CAST(($1) as integer)/CAST(($2) as integer) as integer) END';
divideIntegerRnd = FORMULA INTEGER 'CAST(round(($1)/($2),0) as integer)';
subtractIntegerIncl = FORMULA INTEGER '(($1)-($2)+1)';

toInteger = FORMULA INTEGER 'CAST($1 AS integer)';
toNumeric14p2 = FORMULA NUMERIC[14,2] 'CAST($1 AS numeric(14,2))';
toNumeric14p3 = FORMULA NUMERIC[14,3] 'CAST($1 AS numeric(14,3))';
toNumeric16p2 = FORMULA NUMERIC[16,2] 'CAST($1 AS numeric(16,2))';

iterate(i, from, to) = RECURSION i==from AND from IS INTEGER AND to IS INTEGER STEP i==$i+1 AND i<=to CYCLES IMPOSSIBLE;
count(i, count) = iterate(i, 1, count);

// --------------------------------------------- Работа с датами --------------------------------- //
daysInclBetweenDates (date1, date2) = subtractIntegerIncl (date2, date1) IF date1 IS DATE AND date2 IS DATE;
weeksInclBetweenDates(date1, date2) = divideInteger(daysInclBetweenDates(date1, date2), 7);
weeksNullInclBetweenDates (date1, date2) = weeksInclBetweenDates (date1, date2) != 0;

sumDateWeekFromFormula = FORMULA DATE '(($1)+($2)*7)';
sumDateWeekFrom (date, int) = sumDateWeekFromFormula(date, int) IF date IS DATE AND int IS INTEGER;
sumDateWeekToFormula = FORMULA DATE '(($1)+($2)*7+6)';
sumDateWeekTo (date, int) = sumDateWeekToFormula(date, int) IF date IS DATE AND int IS INTEGER;

incrementYearDate = FORMULA DATE '(CAST(($1) AS date) + interval \'1 year\')';

// --------------------------------------------- Округления --------------------------------- //
roundM1 (number) = round(number, -1);
round0 (number) = round(number, 0);
round1 (number) = round(number, 1);
round2 (number) = round(number, 2);
round3 (number) = round(number, 3);
round6 (number) = round(number, 6);

// --------------------------------------------- Yes/No --------------------------------- //
CLASS YesNo 'Логическое' {
    yes 'ДА',
    no 'НЕТ'
};

classSIDToYesNo 'Да/нет по ИД'(string) = GROUP AGGR yesNo BY staticName (yesNo) WHERE yesNo IS YesNo;

META defineHistorizableYesNo(property, defaultProperty, caption, object1, object1Identity, object2, object2Identity, group)
    @defineHistorizableCustomDefault(property, defaultProperty, caption, YesNo, staticCaption,
        object1, object1Identity, object2, object2Identity, 7, group);
END

META defineHistorizableYesNo(property, defaultProperty, caption, object1, object1Identity, object2, object2Identity, object3, object3Identity, group)
    @defineHistorizableCustomDefault(property, defaultProperty, caption, YesNo, staticCaption,
        object1, object1Identity, object2, object2Identity, object3, object3Identity, 7, group);
END

// --------------------------------------------- Диалоги --------------------------------- //

FORM dialogDate 'Выбор даты'
    OBJECTS d = DATE FIXED PANEL
    PROPERTIES(d) objValue = OBJVALUE
;

DESIGN dialogDate FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Введите дату';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

FORM dialogNumeric 'Выбор числа'
    OBJECTS n = NUMERIC[20,7] FIXED PANEL
    PROPERTIES(n) objValue = OBJVALUE
;

DESIGN dialogNumeric FROM DEFAULT {
    PROPERTY (objValue) {
        caption = 'Введите число';
        font = 'Tahoma bold 64';
        panelLabelAbove = TRUE;
    }
}

// --------------------------- Агрегации --------------------------------- //

// -- Агрегации для 1го объекта -- //

META defineAggregationCustom (primProperty, primObject, aggrObject, aggrClass, aggrProperty)
    aggrObject###primObject (primObject) =
        GROUP AGGR aggrObject BY primProperty(aggrObject)
        WHERE aggrObject IS aggrClass PERSISTENT INDEXED;

    aggrProperty(primObject) => aggrObject###primObject(primObject) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty(primProperty(aggrObject)) RESOLVE FALSE;
END

META defineAggregationCustom (primProperty, primObject, aggrObject, aggrProperty)
    @defineAggregationCustom(primProperty, primObject, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (primObject, primClass, aggrObject, aggrClass, aggrProperty)
    primObject###aggrObject = DATA primClass (aggrClass) INDEXED;

    @defineAggregationCustom (primObject###aggrObject, primObject, aggrObject, aggrProperty);
END

META defineAggregation (primObject, aggrObject, aggrProperty)
    @defineAggregationClass(primObject, ###primObject, aggrObject, ###aggrObject, aggrProperty);
END

// -- Агрегации для 2х объектов -- //

META defineAggregationCustom (prim1Property, prim2Property, prim1Object, prim2Object, aggrObject, aggrClass, aggrProperty)
    aggrObject###prim1Object###prim2Object (prim1Object, prim2Object) =
        GROUP AGGR aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject)
        WHERE aggrObject IS aggrClass;

    aggrProperty(prim1Object, prim2Object) => aggrObject###prim1Object###prim2Object(prim1Object, prim2Object) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject)) RESOLVE FALSE;
END

META defineAggregationCustom (prim1Property, prim2Property, prim1Object, prim2Object, aggrObject, aggrProperty)
    @defineAggregationCustom(prim1Property, prim2Property, prim1Object, prim2Object, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (prim1Object, prim1Class, prim2Object, prim2Class, aggrObject, aggrClass, aggrProperty)
    prim1Object###aggrObject = DATA prim1Class (aggrClass) INDEXED;
    prim2Object###aggrObject = DATA prim2Class (aggrClass) INDEXED;

    @defineAggregationCustom(prim1Object###aggrObject, prim2Object###aggrObject, prim1Object, prim2Object, aggrObject, aggrProperty);
END

META defineAggregation (prim1Object, prim2Object, aggrObject, aggrProperty)
    @defineAggregationClass(prim1Object, ###prim1Object, prim2Object, ###prim2Object, aggrObject, ###aggrObject, aggrProperty);
END

// -- Агрегации для 3х объектов -- //

META defineAggregationCustom (prim1Property, prim2Property, prim3Property, prim1Object, prim2Object, prim3Object, aggrObject, aggrClass, aggrProperty)
    aggrObject###prim1Object###prim2Object###prim3Object (prim1Object, prim2Object, prim3Object) =
        GROUP AGGR aggrObject BY prim1Property(aggrObject), prim2Property(aggrObject), prim3Property(aggrObject)
        WHERE aggrObject IS aggrClass PERSISTENT INDEXED;

    aggrProperty(prim1Object, prim2Object, prim3Object) => aggrObject###prim1Object###prim2Object###prim3Object(prim1Object, prim2Object, prim3Object) RESOLVE TRUE;

    is###aggrObject(aggrObject) = aggrObject IS aggrClass;
    is###aggrObject(aggrObject) => aggrProperty(prim1Property(aggrObject), prim2Property(aggrObject), prim3Property(aggrObject)) RESOLVE FALSE;
END

META defineAggregationCustom (prim1Property, prim2Property, prim3Property, prim1Object, prim2Object, prim3Object, aggrObject, aggrProperty)
    @defineAggregationCustom(prim1Property, prim2Property, prim3Property, prim1Object, prim2Object, prim3Object, aggrObject, ###aggrObject, aggrProperty);
END

META defineAggregationClass (prim1Object, prim1Class, prim2Object, prim2Class, prim3Object, prim3Class, aggrObject, aggrClass, aggrProperty)
    prim1Object###aggrObject = DATA prim1Class (aggrClass);
    prim2Object###aggrObject = DATA prim2Class (aggrClass);
    prim3Object###aggrObject = DATA prim3Class (aggrClass);

    @defineAggregationCustom(prim1Object###aggrObject, prim2Object###aggrObject, prim3Object###aggrObject, prim1Object, prim2Object, prim3Object, aggrObject, aggrProperty);
END

META defineAggregation (prim1Object, prim2Object, prim3Object, aggrObject, aggrProperty)
    @defineAggregationClass(prim1Object, ###prim1Object, prim2Object, ###prim2Object, prim3Object, ###prim3Object, aggrObject, ###aggrObject, aggrProperty);
END

// --------------------------- Групповая корректировка на форме --------------------------------- //

isEditable 'Включить корректировку на форме' = DATA SESSION BOOLEAN();

isReadonly = TRUE IF NOT isEditable();

META extendFormEditable (form)
    EXTEND FORM form
        PROPERTIES() isEditable
    ;
    EXTEND DESIGN form {
        functions.box {
            ADD PROPERTY(isEditable()) BEFORE rightControls;
        }
    }
END
