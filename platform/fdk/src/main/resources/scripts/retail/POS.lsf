MODULE POS;

REQUIRE ZReport;

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceListGroupCashRegister 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (GroupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceListGroupCashRegister
;

// ----------------------------- Кассовый модуль ---------------- //

POSPriceListTypeReceipt (receipt) = priceListTypeGroupMachinery(groupCashRegisterReceipt(receipt));

POSPriceSkuReceiptDateTime 'Цена в кассе' (sku, receipt, dateTime) =
    IF usePriceListGroupCashRegister(groupCashRegisterReceipt(receipt)) THEN
        pricePriceListTypeSkuStockDateTime(POSPriceListTypeReceipt(receipt), sku, departmentStoreReceipt(receipt), dateTime)
    ELSE
        transactionPriceBarcodeGroupMachinery(barcodeSku(sku), groupCashRegisterReceipt(receipt)) IF dateTime IS DATETIME;
currentPOSPriceSkuReceipt 'Текущая цена' (sku, receipt) = POSPriceSkuReceiptDateTime(sku, receipt, currentDateTime());

zReportCashRegister = DATA ZReport (CashRegister);

currentCashRegister () = cashRegisterComputer(currentComputer());

GROUP receiptZReportGroup 'Z-отчет' : public;

currentZReport() = zReportCashRegister(currentCashRegister());
numberCurrentZReport 'Номер текущего Z-отчета' () = numberZReport(currentZReport()) IN receiptZReportGroup;
sumCashCurrentZReport() = sumCashZReport(currentZReport());

closedCurrentZReport() = TRUE IF NOT currentZReport();

currentSumCashCurrentCashRegister 'Сумма наличных в кассе' () =
    curSumIncomeCashOperation(currentCashRegister()) (-) curSumOutcomeCashOperation(currentCashRegister()) (+) sumCashCurrentZReport();

//CONSTRAINT currentSumCashCurrentCashRegister() < 0 AND cashRegister == currentCashRegister() MESSAGE 'Сумма наличных денег в кассе не должна быть отрицательной';

// Операции с чеками

createCurrentReceipt 'Создать новый чек' = ACTION () {
    FOR ADDOBJ r = Receipt DO {
        EXEC seek(r);
        SET zReportReceipt(r) <- currentZReport();
        SET numberReceipt(r) <- maxNumberReceiptZReport(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayTextReceiptDetail 'Вывести текст на дисплей'(receiptDetail) = ABSTRACT ACTION (ReceiptDetail);

// Проведение чека

GROUP receiptActionGroup 'Оплата' : public;

postPrintReceipt 'Напечатать фискальный чек' = ABSTRACT ACTION (Receipt);
noFiscalPostPrintReceipt 'Создать чек (без фискального регистратора)' = ACTION (receipt) {
    IF receipt IS Receipt THEN {
        EXEC apply();
        EXEC createCurrentReceipt();
    }
}
postPrintReceipt(receipt) += ACTION IF NOT sidCashRegisterModelReceipt(receipt) THEN noFiscalPostPrintReceipt(receipt);

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) READONLY sumReceiptDetailReceipt, changePaymentReceipt

    OBJECTS p = Payment FIXED GRID
    PROPERTIES(p) sumPayment, namePaymentTypePayment, ADDOBJ, deletep=DELETESESSION
    FILTERS receiptPayment(p) == r
;

DESIGN postReceiptPayment FROM DEFAULT {

    main {
        preferredSize = (800, 320);
        NEW payContainer {
            childConstraints = TO THE BOTTOM;
            ADD p.box {
                p.grid {
                    defaultComponent = TRUE;
                }
                PROPERTY(sumPayment) { font = 'Tahoma bold 36'; }
                PROPERTY(namePaymentTypePayment) { font = 'Tahoma bold 36'; }
                PROPERTY(deletep) { font = 'Tahoma bold 36'; }
            }
            NEW southContainer {
                childConstraints = TO THE RIGHT;
                ADD PROPERTY(sumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
                ADD PROPERTY(changePaymentReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 72'; }
            }
            ADD functions.box;
        }
    }
}

postReceipt 'Смешанный платеж' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    //FOR receiptPayment(payment) == receipt DO {
    DELETE payment WHERE receiptPayment(payment) == receipt;
    //}
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCashPaymentType();
        }
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCardPaymentType();
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            EXEC postPrintReceipt(receipt);
        } ELSE {
            //FOR receiptPayment(p) == receipt DO {
            DELETE p WHERE receiptPayment(p) == receipt;
            //}
        }
    }
} EDITKEY 'F9' IN receiptActionGroup;

postCardReceipt 'Карточкой' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    //FOR receiptPayment(payment) == receipt DO {
    DELETE payment WHERE receiptPayment(payment) == receipt;
    //}
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCardPaymentType();
            SET sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        EXEC postPrintReceipt(receipt);
    }
} EDITKEY 'F10' CONFIRM IN receiptActionGroup;

postCashReceipt 'Наличными' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    //FOR receiptPayment(payment) == receipt DO {
    DELETE payment WHERE receiptPayment(payment) == receipt;
    //}
    IF sumReceiptDetailReceipt(receipt) THEN {
        ADDOBJ Payment;
        FOR p == addedObject() DO {
            SET receiptPayment(p) <- receipt;
            SET paymentTypePayment(p) <- minCashPaymentType();
            SET sumPayment(p) <- sumReceiptDetailReceipt(receipt);
        }
        FORM postReceiptPayment OBJECTS r = receipt MODAL CHECK;
        IF formResult() == FormResult.ok THEN {
            EXEC postPrintReceipt(receipt);
        } ELSE {
            //FOR receiptPayment(p) == receipt DO {
            DELETE p WHERE receiptPayment(p) == receipt;
            //}
        }
    }
} EDITKEY 'F11' IN receiptActionGroup;

cancelReceipt 'Отменить чек' = ACTION (receipt) {
    IF sumReceiptDetailReceipt(receipt) THEN {
        EXEC cancel();
        EXEC createCurrentReceipt();
    }
    EXEC fiscalCancelReceipt();
} EDITKEY 'shift F11' CONFIRM IN receiptActionGroup;

// Операции по добавлению строк в чек

// Продажи
createReceiptSaleDetail 'Добавить строку продажи' = ACTION (receipt, sku, barcode) {
    FOR ADDOBJ d = ReceiptSaleDetail DO {
        EXEC seek(d);
        SET receiptReceiptSaleDetail(d) <- receipt;
        SET idBarcodeReceiptDetail(d) <- barcode;
        SET skuReceiptSaleDetail(d) <- sku;
        SET quantityReceiptSaleDetail(d) <- 1.0;
        SET priceReceiptSaleDetail(d) <- currentPOSPriceSkuReceipt(sku, receipt);
        SET VATReceiptSaleDetail(d) <- VATRetailSkuDepartmentStoreDateTime(sku, departmentStoreReceipt(receipt), currentDateTime());
    }
}

GROUP receiptSaleActionGroup 'Продажа' : public;

// По штрих-коду
changeBarcodeSaleReceipt = ACTION (receipt) {
    REQUEST STRING[15] INPUT;
    LOCAL dialogBarcodeSku = Sku();
    SET dialogBarcodeSku() <- skuBarcodeIdDate(requestedString(), currentDate());

    IF dialogBarcodeSku() IS Sku THEN {
        EXEC createReceiptSaleDetail(receipt, dialogBarcodeSku(), requestedString());
    } ELSE
        MESSAGE 'Не найден штрих-код';
};

// Поиск подбором
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = DepartmentStore FIXED PANEL
    OBJECTS r = Receipt FIXED PANEL

    TREE skuTree sk = SkuGroup PARENT parentSkuGroup
    PROPERTIES READONLY skuTreeName = nameSkuGroupStock(sk, st)
    ORDER BY skuTreeName

    OBJECTS           s=Sku
    PROPERTIES        READONLY nameSkuStock(s, st), idBarcodeSku(s)
    FILTERS           isParentSkuGroupSku(sk, s)
    ORDER BY          nameSkuStock

    PROPERTIES(s, st) READONLY prevCurrentBalanceSkuStock

    PROPERTIES(s, r)  READONLY currentPOSPriceSkuReceipt

    FILTERGROUP filters
        FILTER 'Товары с остатком' 'F10' prevCurrentBalanceSkuStock(s, st) DEFAULT

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN searchSkuSaleReceipt FROM DEFAULT {
    main{
        preferredSize = (1024, 768);
        NEW topContainer BEFORE functions.box {
            type = SPLITH;
            ADD skuTree.tree.box { title = 'Группы'; }
            ADD s.box {
                fillHorizontal = 2;
                s.grid {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}

searchSkuSaleReceipt 'Поиск' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FORM searchSkuSaleReceipt OBJECTS st = departmentStoreReceipt(receipt), r = receipt MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptSaleDetail(receipt, chosenObject('s'), idBarcodeSku(chosenObject('s')));
    }
} EDITKEY 'F3' IN receiptSaleActionGroup;

// Возвраты

createReceiptReturnDetail 'Добавить строку возврата' = ACTION (receipt, receiptSaleDetail, barcode) {
    FOR ADDOBJ d = ReceiptReturnDetail DO {
        EXEC seek(d);
        SET receiptReceiptReturnDetail(d) <- receipt;
        SET idBarcodeReceiptDetail(d) <- barcode;
        SET receiptSaleDetailReceiptReturnDetail(d) <- receiptSaleDetail;
        SET skuReceiptReturnDetail(d) <- skuReceiptSaleDetail(receiptSaleDetail);
        SET quantityReceiptReturnDetail(d) <- 1.0;
        SET priceReceiptReturnDetail(d) <- priceReceiptSaleDetail(receiptSaleDetail);
        SET VATReceiptReturnDetail(d) <- VATReceiptSaleDetail(receiptSaleDetail);
    }
}

GROUP receiptReturnActionGroup 'Возврат' : public;

// По штрих-коду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = DepartmentStore FIXED PANEL

    OBJECTS s = Sku FIXED PANEL
    PROPERTIES idBarcodeSku(s) READONLY, nameSkuStock(s, d)

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY numberReceiptReceiptDetail, dateTimeReceiptSaleDetail, numberDiscountCardReceiptDetail, nameLegalEntityDiscountCardReceiptDetail, sumReceiptDetailReceiptDetail,
                           indexReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                           sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID, discountSumReceiptDetail
    FILTERS departmentStoreReceiptSaleDetail(r) == d,
            skuReceiptSaleDetail(r) == s
;

DESIGN scanBarcodeReturnReceipt FROM DEFAULT {
    PROPERTY(idBarcodeSku) {
        focusable = FALSE;
    }
    PROPERTY(nameSkuStock) {
        focusable = FALSE;
    }
}

scanBarcodeReturnReceipt 'Ввести штрих-код' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FORM barcodeInput MODAL;
    IF formResult() == FormResult.ok THEN {
        LOCAL dialogBarcodeSku = Sku();
        SET dialogBarcodeSku() <- skuBarcodeIdDate(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {
            FORM scanBarcodeReturnReceipt OBJECTS d = departmentStoreReceipt(receipt), s = dialogBarcodeSku() MODAL;
            IF formResult() == FormResult.ok THEN {
                EXEC createReceiptReturnDetail(receipt, chosenObject('r'), barcodeInput());
            }
        } ELSE
            MESSAGE 'Не найден штрих-код';
    }
} EDITKEY 'F7' IN receiptReturnActionGroup;

// Поиск

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = DepartmentStore FIXED PANEL

    OBJECTS s = Receipt FIXED GRID
    PROPERTIES(s) READONLY  numberReceipt, dateReceipt, timeReceipt,
                            numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt, sumReceiptDetailReceipt, discountSumReceiptDetailReceipt,
                            countReceiptDetailReceipt, quantityReceiptDetailReceipt
    FILTERS departmentStoreReceipt(s) == st

    OBJECTS r = ReceiptSaleDetail FIXED GRID
    PROPERTIES(r) READONLY  idBarcodeReceiptDetail, nameSkuReceiptDetail, quantityReceiptDetail, quantityReturnedReceiptSaleDetail, priceReceiptDetail,
                            sumReceiptDetail, discountPercentReceiptSaleDetail, discountSumReceiptDetail
    FILTERS receiptReceiptSaleDetail(r) == s
;

searchSkuReturnReceipt 'Поиск' = ACTION (receipt) {
    SET zReportReceipt(receipt) <- currentZReport();
    FORM searchSkuReturnReceipt OBJECTS st = departmentStoreReceipt(receipt) MODAL;
    IF formResult() == FormResult.ok THEN {
        EXEC createReceiptReturnDetail(receipt, chosenObject('r'), idBarcodeSku(skuReceiptSaleDetail(chosenObject('r'))));
    }
} EDITKEY 'F6' IN receiptReturnActionGroup;

// Дисконтные карты

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = STRING[18], s = STRING[2]) FIXED PANEL
    PROPERTIES number = OBJVALUE(n), series = OBJVALUE(s)
;

DESIGN inputDiscountCardNumberReceipt FROM DEFAULT{
    NEW centerContainer BEFORE functions.box {
        childConstraints = TO THE RIGHT;
        ADD PROPERTY(number) { caption = 'Номер'; font = 'Tahoma bold 72'; }
        ADD PROPERTY(series) { minimumCharWidth = 3; caption = 'Серия'; font = 'Tahoma bold 72'; }
    }
}

inputDiscountCardNumberReceipt 'Ввести номер' = ACTION (receipt) {
    FORM inputDiscountCardNumberReceipt MODAL;
    IF formResult() == FormResult.ok THEN {
        IF TRUE IF NOT chosenString('s') == '' THEN {
            IF discountCardSeriesNumber(ustring2(chosenString('s'),chosenString('n'))) THEN {
                IF dateToDiscountCard(discountCardSeriesNumber(ustring2(chosenString('s'),chosenString('n'))))<dateReceipt(receipt) THEN
                    MESSAGE 'Закончился срок действия карты'
                ELSE
                    SET discountCardReceipt(receipt) <- discountCardSeriesNumber(ustring2(chosenString('s'),chosenString('n')));
            }
            ELSE
                MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
        }
        ELSE {
            IF discountCardNumber(chosenString('n')) THEN {
                IF dateToDiscountCard(discountCardNumber(chosenString('n')))<dateReceipt(receipt) THEN
                    MESSAGE 'Закончился срок действия карты'
                ELSE
                    SET discountCardReceipt(receipt) <- discountCardNumber(chosenString('n'));
            }
            ELSE
                MESSAGE 'Дисконтная карта с таким номером не найдена';
        }
    }
} IN receiptDiscountGroup EDITKEY 'F5';

clearDiscountCardReceipt 'Сбросить' = ACTION (receipt) {
    SET discountCardReceipt(receipt) <- NULL;
} IN receiptDiscountGroup EDITKEY 'shift F5';

// Операции с Z-отчетами

openCurrentZReport 'Открыть Z-отчет' = ACTION () {
    ADDOBJ ZReportPosted;
    FOR z == addedObject() DO {
        SET numberZReport(z) <- toString255(z);
        SET cashRegisterZReport(z) <- currentCashRegister();
        SET departmentStoreZReport(z) <- departmentStoreCashRegister(currentCashRegister()); // todo : приходится ставить из-за того, что на ADDOBJ срабатывает resolveAdd
        SET zReportCashRegister(cashRegister) <- z AS ZReport WHERE cashRegister == currentCashRegister();
        EXEC apply();
    }
} CONFIRM IN receiptZReportGroup;

closeCurrentZReport 'Закрыть Z-отчет' = ACTION () {
    EXEC cancel();
    SET timeZReport(z) <- currentTime() WHERE z == currentZReport();
    SET dateZReport(z) <- currentDate() WHERE z == currentZReport();
    IF curSumCashCashOperation(cashRegisterZReport(currentZReport())) THEN {
        FOR ADDOBJ o = OutcomeCashOperation DO {
            SET dateOutcomeCashOperation(o) <- dateZReport(currentZReport());
            SET timeOutcomeCashOperation(o) <- timeZReport(currentZReport());
            SET departmentStoreOutcomeCashOperation(o) <- departmentStoreZReport(currentZReport());
            SET cashRegisterOutcomeCashOperation(o) <- cashRegisterZReport(currentZReport());
            SET sumCashOutcomeCashOperation(o) <- curSumCashCashOperation(cashRegisterZReport(currentZReport()));
        }
    }
    SET zReportCashRegister(cashRegister) <- NULL WHERE cashRegister == currentCashRegister();
    EXEC apply();
} CONFIRM IN receiptZReportGroup;

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы

posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) PERSISTENT;
cumulativeSumDiscountCard 'Накопленная сумма' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) PERSISTENT;

prevCumulativeSumReceipt (receipt) = OVERRIDE 0 IF receipt IS Receipt, [PREV(cumulativeSumDiscountCard(discountCard))](discountCardReceipt(receipt));
cumulativeSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN cumulativeSumDiscountCard(discountCardReceipt(receipt))
                                                                                              ELSE prevCumulativeSumReceipt (receipt);

EXTEND FORM discountCards
    PROPERTIES(d) posSumDiscountCard, cumulativeSumDiscountCard
;

// Расчет сумм скидок

TABLE receiptSaleDetailPromotionCondition(ReceiptSaleDetail, PromotionCondition);
quantityReceiptSaleDetailPromotionCondition 'Кол-во по акции' = DATA NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition) INDEXED;
promotionSumReceiptSaleDetailPromotionCondition 'Сумма скидки' = DATA NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
setUserPromotionReceiptSaleDetailPromotionCondition 'Применить скидку' = DATA BOOLEAN (ReceiptSaleDetail, PromotionCondition);

setUserPromotionReceipt (receipt) = GROUP SUM 1 IF setUserPromotionReceiptSaleDetailPromotionCondition (receiptSaleDetail, promotionCondition)  BY receiptReceiptSaleDetail (receiptSaleDetail);

promotionSumReceiptSaleDetail (detail) = GROUP SUM promotionSumReceiptSaleDetailPromotionCondition(detail, condition)
                                               BY detail;

inReceiptPromotion (receipt, promotion) = inPromotionStore(promotion, storeReceipt(receipt)) AND
                                          dateReceipt(receipt) >= dateFromPromotion(promotion) AND dateReceipt(receipt) <= dateToPromotion(promotion) AND
                                          NOT timeReceipt(receipt) < timeOfFromPromotion(promotion) AND NOT timeReceipt(receipt) > timeOfToPromotion(promotion) AND
                                          NOT sumReceiptDetailReceipt(receipt) < minSumBillPromotion(promotion) AND NOT sumReceiptDetailReceipt(receipt) > maxSumBillPromotion(promotion)
                                          AND NOT skipPromotionDOW(promotion, DOWInDate(dateReceipt(receipt)))
                                          AND NOT cumulativeSumReceiptPromotion (receipt, promotion) < minCumulativeSumPromotion(promotion) AND NOT cumulativeSumReceiptPromotion (receipt, promotion) > maxCumulativeSumPromotion(promotion)
                                          AND NOT (hasDiscountCardPromotion(promotion) AND NOT inPromotionDiscountCard(promotion, discountCardReceipt(receipt)));

inReceiptSaleDetailPromotionCondition (receiptDetail, promotionCondition) =
    inReceiptPromotion(receiptReceiptDetail(receiptDetail), promotionPromotionCondition(promotionCondition))
    AND inPromotionConditionSku(promotionCondition, skuReceiptDetail(receiptDetail));

maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

isAppliedPromotionReceiptSaleDetailPromotionCondition 'Акция применяется' (receiptSaleDetail, promotionCondition) =
    IF userSetPromotionCondition(promotionCondition) THEN setUserPromotionReceiptSaleDetailPromotionCondition(receiptSaleDetail, promotionCondition)
      ELSE receiptSaleDetail IS ReceiptSaleDetail AND promotionCondition IS PromotionCondition;

calculatePromotionsReceipt 'Рассчитать акции' = ACTION (receipt) {

    SET quantityReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    SET promotionSumReceiptSaleDetailPromotionCondition(detail, condition) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;
    SET discountSumReceiptSaleDetail(detail) <- NULL WHERE receiptReceiptSaleDetail(detail) == receipt;

    LOCAL maxSalePriceSku = NUMERIC[14,2] (Sku);
    SET maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    FOR promotionGroup IS PromotionGroup DO {
        LOCAL leftSku = NUMERIC[14,3] (Sku);
        SET leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'

        LOCAL leftQuantityReceiptSaleDetail = NUMERIC[14,3] (ReceiptSaleDetail);
        SET leftQuantityReceiptSaleDetail(detail) <- quantityReceiptSaleDetail(detail) WHERE receiptReceiptSaleDetail(detail) == receipt;

        LOCAL leftSumReceiptSaleDetail = NUMERIC[16,3] (ReceiptSaleDetail);
        SET leftSumReceiptSaleDetail(detail) <- (priceSumReceiptSaleDetail(detail) (-) promotionSumReceiptSaleDetail(detail)) WHERE receiptReceiptSaleDetail(detail) == receipt;

        FOR promotionGroupPromotion(promotion) == promotionGroup AND inReceiptPromotion(receipt, promotion) ORDER orderPromotion(promotion) DO {
            LOCAL quantityPromotionCondition = NUMERIC[14,3] (PromotionCondition);
            SET quantityPromotionCondition(promotionCondition) <- [GROUP SUM leftSku (sku)
                                                                             IF inPromotionConditionSku(promotionCondition, sku)
                                                                             BY promotionCondition](promotionCondition) IF
                                                                                promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL sumPromotionCondition = NUMERIC[14,3] (PromotionCondition);
            SET sumPromotionCondition(promotionCondition) <- [GROUP SUM leftSku (sku) * maxSalePriceSku(sku)
                                                                    IF inPromotionConditionSku(promotionCondition, sku)
                                                                    BY promotionCondition](promotionCondition) IF
                                                                       promotionPromotionCondition(promotionCondition) == promotion;

            LOCAL countPromotionCondition = INTEGER (PromotionCondition);
            SET countPromotionCondition(promotionCondition) <- MIN divideInteger(quantityPromotionCondition (promotionCondition), minQuantityPromotionCondition (promotionCondition)),
                                                                   divideInteger(sumPromotionCondition(promotionCondition), minSumPromotionCondition(promotionCondition));

            LOCAL countPromotion = INTEGER ();
            SET countPromotion () <- [GROUP MIN countPromotionCondition(promotionCondition)]();

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND [GROUP SUM 1 IF countPromotionCondition(promotionCondition) > 0]() == countPromotionConditionPromotion(promotion) THEN {

//                MESSAGE name(promotion);
//                MESSAGE toString255(cumulativeSumReceipt(receipt));
//                MESSAGE toString255(minCumulativeSumPromotion(promotion));
//                MESSAGE toString255(cumulativeSumReceipt(receipt) < minCumulativeSumPromotion(promotion));
//
                LOCAL takenPromotionCondition = NUMERIC[14,3] (PromotionCondition);
                SET takenPromotionCondition(promotionCondition) <- min(countPromotion() * quantityDiscountPromotionCondition(promotionCondition), quantityPromotionCondition(promotionCondition));

                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (Sku, PromotionCondition);
                SET takenSkuPromotionCondition(sku, promotionCondition) <- [PARTITION UNGROUP takenPromotionCondition
                                                                                      LIMIT leftSku (sku)
                                                                                            IF inPromotionConditionSku(promotionCondition, sku)
                                                                                      BY promotionCondition
                                                                                      ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                LOCAL takenSku = NUMERIC[14,3] (Sku);
                SET takenSku(sku) <- [GROUP SUM takenSkuPromotionCondition(sku, promotionCondition) BY sku] (sku);

                SET leftSku(sku) <- leftSku(sku) (-) takenSku(sku);

                LOCAL takenReceiptSaleDetailPromotionCondition = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                SET takenReceiptSaleDetailPromotionCondition (detail, condition) <- [PARTITION UNGROUP takenSkuPromotionCondition
                                                                                               LIMIT leftQuantityReceiptSaleDetail(detail)
                                                                                               BY skuReceiptSaleDetail(detail), promotionCondition
                                                                                               ORDER DESC detail](detail, condition);

                LOCAL takenReceiptSaleDetail = NUMERIC[14,3] (ReceiptSaleDetail);
                SET takenReceiptSaleDetail(detail) <- [GROUP SUM takenReceiptSaleDetailPromotionCondition(detail, condition) BY detail](detail);

                SET leftQuantityReceiptSaleDetail(detail) <- leftQuantityReceiptSaleDetail(detail) (-) takenReceiptSaleDetail(detail);

                SET quantityReceiptSaleDetailPromotionCondition(detail, condition) <- takenReceiptSaleDetailPromotionCondition(detail, condition)
                    WHERE takenReceiptSaleDetailPromotionCondition(detail, condition) AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, condition);

                SET promotionSumReceiptSaleDetailPromotionCondition (detail, condition) <-
                    IF sumReceiptPromotionCondition(condition) THEN
                        takenReceiptSaleDetailPromotionCondition(detail, condition) * (priceReceiptSaleDetail(detail) (-) sumReceiptPromotionCondition(condition) / quantityDiscountPromotionCondition (condition))
                    ELSE
                       IF sumDiscountPromotionCondition(condition) THEN
                            takenReceiptSaleDetailPromotionCondition(detail, condition) * sumDiscountPromotionCondition(condition)
                        ELSE
                            IF resultPricePromotionCondition(condition) THEN
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) - resultPricePromotionCondition(condition))
                            ELSE
                                takenReceiptSaleDetailPromotionCondition(detail, condition) * (leftSumReceiptSaleDetail(detail) / quantityReceiptSaleDetail(detail) * percentPromotionCondition(condition) / 100)
                            WHERE takenReceiptSaleDetailPromotionCondition(detail, condition) AND isAppliedPromotionReceiptSaleDetailPromotionCondition(detail, condition);
            }
        }
    }

    SET discountSumReceiptSaleDetail(detail) <- promotionSumReceiptSaleDetail(detail) WHERE receiptReceiptSaleDetail(detail) == receipt;
    SET discountSumReceiptSaleDetail(detail) <- calcDiscountSumReceiptSaleDetail(detail) WHERE detail IS ReceiptSaleDetail AND receiptReceiptSaleDetail(detail) == receipt AND discountPercentReceiptSaleDetail(detail) AND NOT promotionSumReceiptSaleDetail(detail);
}

// Форма POS-терминала

prevCurrentBalanceSkuReceipt (sku, receipt) = prevCurrentBalanceSkuStock(sku, departmentStoreReceipt(receipt));
prevCurrentBalanceReceiptDetail 'Тек. остаток' (receiptDetail) = prevCurrentBalanceSkuReceipt(skuReceiptDetail(receiptDetail), receiptReceiptDetail(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = Receipt FIXED PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetailReceipt, sumReceiptDetailReceipt,
                                          searchSkuSaleReceipt,
                                          searchSkuReturnReceipt, scanBarcodeReturnReceipt,
                                          postReceipt, postCardReceipt, postCashReceipt, cancelReceipt,
                                          numberDiscountCardReceipt, nameLegalEntityDiscountCardReceipt,
                                          inputDiscountCardNumberReceipt, clearDiscountCardReceipt

    OBJECTS d = ReceiptDetail FIXED GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY indexReceiptDetail, typeReceiptDetail, idBarcodeReceiptDetail, nameSkuReceiptDetail, prevCurrentBalanceReceiptDetail
    PROPERTIES(d) SHOWIF currentZReport()          quantityReceiptDetail, priceReceiptDetail, sumReceiptDetail, discountPercentReceiptSaleDetail FORCE GRID,
                                                   discountSumReceiptDetail, numberVATReceiptDetail, valueVATReceiptDetail, deleted=DELETESESSION
    FILTERS receiptReceiptDetail(d) == r

    OBJECTS bs = STRING[15] FIXED PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = OBJVALUE ON CHANGE changeBarcodeSaleReceipt(r) EVENTID 'SCANNER'

    OBJECTS pc = PromotionCondition FIXED GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, namePromotionCondition, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pc) SHOWIF currentZReport()       quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition
    FILTERS quantityReceiptSaleDetailPromotionCondition(d, pc) AND NOT userSetPromotionCondition(pc)

    OBJECTS pcu = PromotionCondition FIXED GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotionPromotionCondition, namePromotionCondition, dateFromPromotionCondition, dateToPromotionCondition, percentPromotionCondition
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantityReceiptSaleDetailPromotionCondition, promotionSumReceiptSaleDetailPromotionCondition, setUserPromotionReceiptSaleDetailPromotionCondition
    FILTERS userSetPromotionCondition(pcu) AND inReceiptSaleDetailPromotionCondition(d, pcu)

    PROPERTIES() fiscalAdvancePaper, fiscalCutReceipt

    EVENTS
        ON INIT createCurrentReceipt()

    HINTTABLE LIST POSPriceListTypeReceipt, departmentStoreReceipt, groupCashRegisterReceipt
;

DESIGN POS FROM DEFAULT {
    main {
        childConstraints = TO THE BOTTOM;

        REMOVE functions.box CASCADE;

        NEW northContainer {
            ADD PROPERTY(closedCurrentZReportMessage()) {
                focusable = FALSE;
                font = 'Tahoma 100';
                fillVertical = 1.0;
            }
        }
        NEW centerContainer {
            childConstraints = TO THE BOTTOM;
//            type = SPLITV;
            NEW receiptContainer {
//                type = SPLITV;
                childConstraints = TO THE BOTTOM;
                ADD d.box {
                    fillVertical = 2;
                    PROPERTY(indexReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(typeReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(idBarcodeReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(nameSkuReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(prevCurrentBalanceReceiptDetail) { focusable = FALSE; font = 'Tahoma 14'; }
                    PROPERTY(quantityReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(priceReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(sumReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(discountPercentReceiptSaleDetail) { font = 'Tahoma 14'; }
                    PROPERTY(discountSumReceiptDetail) { font = 'Tahoma 14'; }
                    PROPERTY(deleted) { font = 'Tahoma 14'; }
                }
                NEW promotionContainer {
                    type = TABBED;
                    //                fillVertical = 0.3;
                        ADD pc.box {
                          //  fillVertical = 0.3;
                        }
                        ADD pcu.box {
                            title = 'Возможные акции';
                         //   fillVertical = 0.3;
                        }
                }
            }
            NEW eastContainer {
                childConstraints = TO THE BOTTOM;
                NEW firstEastContainer{
                    childConstraints = TO THE RIGHTBOTTOM;
                    ADD r.receiptSaleActionGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(searchSkuSaleReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                        ADD PROPERTY(barcodeSale) { caption = 'Ввести штрих-код'; panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; editKey = 'F4'; }
                    }
                    ADD r.receiptReturnActionGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(searchSkuReturnReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                        ADD PROPERTY(scanBarcodeReturnReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                    }
                    ADD r.receiptActionGroup {
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY(postReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                        NEW receiptActionGroup1 {
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(postCardReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                            ADD PROPERTY(postCashReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                        }
                        ADD PROPERTY(cancelReceipt) { focusable = FALSE; font = 'Tahoma bold 24'; }
                        directions = (0.0, -0.1, 0.0, 0.1);
                    }
                }
                NEW secondEastContainer{
                    childConstraints = TO THE RIGHTBOTTOM;
                    NEW secondFirstEastContainer{
                        childConstraints = TO THE BOTTOM;
                        ADD r.receiptDiscountGroup {
                            childConstraints = TO THE BOTTOM;
                            NEW receiptDiscountGroup1 {
                                childConstraints = TO THE RIGHTBOTTOM;
                                ADD PROPERTY(numberDiscountCardReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; }
                                ADD PROPERTY(nameLegalEntityDiscountCardReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 24'; }
                            }
                            NEW buttonDiscountContainer {
                                childConstraints = TO THE RIGHT;
                                ADD PROPERTY(inputDiscountCardNumberReceipt) { focusable = FALSE; font = 'Tahoma bold 14'; }
                                ADD PROPERTY(clearDiscountCardReceipt) { focusable = FALSE; font = 'Tahoma bold 14'; }
                            }
                            directions = ( -0.1, 0.0, 0.1, 0.0);
                        }
                    }
                    NEW sumContainer {
                        title = 'Итого';
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY(discountSumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 54'; }
                        ADD PROPERTY(sumReceiptDetailReceipt) { panelLabelAbove = TRUE; focusable = FALSE; font = 'Tahoma bold 54'; }
                        directions = (0.0, -0.1, 0.0, 0.1);
                    }
                }
            }
        }

        NEW southContainer {
            childConstraints = TO THE RIGHT;
            NEW currentContainer {
                title = 'Текущие значения';
                childConstraints = TO THE RIGHTBOTTOM;
                ADD PROPERTY(formRefresh) { focusable = FALSE; }
                ADD PROPERTY(hostnameCurrentComputer) { focusable = FALSE; }
                ADD PROPERTY(currentDateTime) { focusable = FALSE; }
                ADD PROPERTY(currentUserName) { focusable = FALSE; }
            }
            NEW actionsContainer {
                title = 'Действия с кассой';
                childConstraints = TO THE RIGHTBOTTOM;
                ADD PROPERTY(fiscalAdvancePaper) { focusable = FALSE; }
                ADD PROPERTY(fiscalCutReceipt) { focusable = FALSE; }
            }
        }
    }
}

WHEN SESSION FORMS POS CHANGED(quantityReceiptDetailReceipt(receipt)) OR CHANGED(discountCardReceipt(receipt)) OR CHANGED(setUserPromotionReceipt(receipt)) OR CHANGED(discountPercentReceipt(receipt)) DO EXEC calculatePromotionsReceipt(receipt);
WHEN SESSION FORMS POS CHANGED(quantityReceiptDetail(receiptDetail)) OR CHANGED(sumReceiptDetail(receiptDetail)) DO EXEC fiscalDisplayTextReceiptDetail(receiptDetail);

NAVIGATOR {
    retailNavigator {
        NEW POSNavigator 'Касса' BEFORE retailMasterData {
            ADD POS;
            ADD zReports;
            ADD centralCashRegister;
            ADD operationCashRegister;
            ADD groupsCashRegister;
            ADD cashRegistersModels;
        }
    }
}

// ----------------------------------------- Кассовые операции ---------------------------------------------- //
fiscalZReport 'Закрыть Z-отчёт' = ABSTRACT ACTION() CONFIRM;
fiscalZReport() += ACTION IF NOT sidModelCurrentCashRegister() THEN closeCurrentZReport();

currentZReportDepartmentStore() = currentZReport() IF departmentStoreCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() IF departmentStoreCurrentCashRegister();

EXTEND FORM operationCashRegister
    PROPERTIES READONLY currentSumCashCurrentCashRegister() TODRAW interval FORCE PANEL
    PROPERTIES() READONLY numberCurrentZReport SHOWIF departmentStoreCurrentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()

    OBJECTS z = ZReportPosted
    PROPERTIES(z) READONLY objectClassName, numberZReport, dateZReport, timeZReport, nameDepartmentStoreZReport,
                           numberCashRegisterZReport, sumCashZReport, sumReceiptDetailZReport, basisZReport
    ORDER BY dateZReport(z), timeZReport(z)
    FILTERS dateZReport(z) >= (dFrom AS DATE),
            dateZReport(z) <= (dTo AS DATE)
;

EXTEND DESIGN operationCashRegister{
    actions {
        ADD PROPERTY(fiscalZReport) { font = 'Tahoma 24'; }
        ADD PROPERTY(openCurrentZReport) { font = 'Tahoma 24'; };
        ADD PROPERTY(numberCurrentZReport) { font = 'Tahoma 24'; };
    }
    ADD z.box IN topContainer BEFORE functions.box;
}

// Update data
fiscalUpdateData 'Загрузить информацию' = ABSTRACT ACTION();
fiscalUpdateDataShowIf = departmentStoreCurrentCashRegister() IF closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

EXTEND DESIGN operationCashRegister{
    actions {
            ADD PROPERTY(fiscalUpdateData) BEFORE PROPERTY(fiscalXReport) { font = 'Tahoma 24'; }
            }
}
