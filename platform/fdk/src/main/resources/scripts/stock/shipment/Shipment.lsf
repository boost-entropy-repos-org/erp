MODULE Shipment;

REQUIRE Order, Invoice, StockDocument;

CLASS ABSTRACT Shipment 'Поставка' : Document;
CLASS ABSTRACT ShipmentDetail 'Строка поставки' : DocumentDetail;

@defineDocumentAbstract(shipment);
@defineDocumentAbstractNumber(shipment);

@defineDocumentAbstractLegalEntity(shipment, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(shipment, customer, 'Покупатель');

@defineDocumentAbstractDataStock(shipment, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(shipment, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(shipment, stock, 'Склад (с)', from);
@defineDocumentAbstractDataStock(shipment, stock, 'Склад (на)', to);

@defineDocumentAbstractPosted(shipment);

@defineDocumentAbstractDetailSku(shipment, sku);

@defineDocumentAbstractDetailQuantity(shipment);
@defineDocumentDetailGrossWeight(shipment, sku);
@defineDocumentAbstractDetailQuantityPrefix(shipment, pack, ' (упаковок)');
@defineDocumentHeaderSkuQuantity(shipment, sku);

@defineDocumentHeaderGrossWeight(shipment);

quantityShipmentDetailOrderShipment = ABSTRACT NUMERIC[14,3] (Order, Shipment);

editShipment 'Редактировать' = ABSTRACT ACTION (Shipment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;

// ----------------------------------- Создавать поставку по умолчанию для склада ------------------------------------------ //

META defineDocumentHeaderCreateShipment(object)
    createShipment###object 'Создать поставку' (object) = DATA BOOLEAN(###object) IN documentPrmGroup;
END
META defineDocumentAbstractHeaderCreateShipment(object)
    createShipment###object 'Создать поставку' (object) = ABSTRACT BOOLEAN(###object);
END

META defineDocumentInterfaceHeaderCreateShipment (object)
    @defineDocumentAbstractHeaderCreateShipment (object);
    @defineDocumentHeaderCreateShipment (user###object);
    createShipment###object (object) += createShipment###user###object(object);
END

//----------------------------------------------- Поставка ---------------------------------------------------//

META defineShipment(captions, sign, stockProp)

    CLASS ABSTRACT Shipment 'Поставка'###sign : Shipment.Shipment;
    CLASS ABSTRACT ShipmentDetail 'Строка поставки'###sign : Shipment.ShipmentDetail;

    CLASS UserShipment 'Поставка (польз.)'###sign : Shipment, Historizable, NumeratedDocument;
    CLASS UserShipmentDetail 'Строка поставки (польз.)'###sign : ShipmentDetail;
    CLASS UserShipmentPosted 'Проведенная поставка (польз.)'###sign : UserShipment, PostedObject;

    @defineDocumentInterface(shipment);
    Shipment.shipmentShipmentDetail (detail) += shipmentShipmentDetail(detail);
    Shipment.dateShipment (shipment) += dateShipment(shipment);
    Shipment.timeShipment (shipment) += timeShipment(shipment);

    @defineDocumentInterfaceNumber(shipment);
    Shipment.numberShipment (shipment) += numberShipment(shipment);
    Shipment.seriesShipment (shipment) += seriesShipment(shipment);

    @defineDocumentInterfaceLegalEntity (shipment, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (shipment, customer, 'Покупатель');
    Shipment.supplierShipment(shipment) += supplierShipment(shipment);
    Shipment.customerShipment(shipment) += customerShipment(shipment);

    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад покупателя', customer);
    Shipment.supplierStockShipment(shipment) += supplierStockShipment(shipment);
    Shipment.customerStockShipment(shipment) += customerStockShipment(shipment);
    Shipment.dataSupplierStockShipmentDetail(detail) += dataSupplierStockShipmentDetail(detail);
    Shipment.dataCustomerStockShipmentDetail(detail) += dataCustomerStockShipmentDetail(detail);

    CONSTRAINT supplierUserShipment(userShipment) AND supplierStockUserShipment(userShipment) AND NOT
    inLegalEntityStock(supplierUserShipment(userShipment), supplierStockUserShipment(userShipment))
        CHECKED BY supplierStockUserShipment
            MESSAGE 'Поставщик и склад поставщика для поставки не имеют связи';
    CONSTRAINT customerUserShipment(userShipment) AND customerStockUserShipment(userShipment) AND NOT
    inLegalEntityStock(customerUserShipment(userShipment), customerStockUserShipment(userShipment))
        CHECKED BY customerStockUserShipment
            MESSAGE 'Покупатель и склад покупателя для поставки не имеют связи';

    @defineDocumentInterfacePosted(shipment);
    Shipment.isPostedShipment (shipment) += isPostedShipment(shipment);

    @defineDocumentInterfaceDescription(shipment, 'Поставка'###sign);

    @defineDocumentInterfaceCurrency(shipment);
    @deriveDocumentCurrency(userShipment, stockProp);

    @defineDocumentInterfaceDetailSku(shipment, sku);
    Shipment.skuShipmentDetail(detail) += skuShipmentDetail(detail);

    @defineDocumentInterfaceDetailQuantity(shipment);
    Shipment.quantityShipmentDetail(detail) += quantityShipmentDetail(detail);

    @defineDocumentInterfaceDetailExpiryDate(shipment);

    @defineDocumentInterfaceDetailPrice(shipment);

    @defineDocumentInterfaceDetailDataSum(shipment);
    @deriveDocumentDetailSum(userShipment, quantity);

    @defineDocumentInterfaceHeaderQuantity(shipment);
    @defineDocumentHeaderSkuQuantity(shipment, sku);
    @defineDocumentHeaderSkuQuantity(userShipment, sku);
    @defineDocumentInterfaceHeaderSum(shipment);

    @defineDocumentInterfaceHeaderItemSum (shipment, , );

    @defineAddDetailDialogSkuStock(userShipment, sku, stockProp, dialogSku);
    @defineAddDetailDialogBarcode(userShipment, sku);

    @implementDocumentSupplierCustomer(shipment);

// --------------------------- Формы --------------------------------- //

    editShipment 'Редактировать' = ABSTRACT ACTION (Shipment) IMAGE 'edit.png' EDITKEY 'BACK_SPACE' HIDE TOOLBAR;
    Shipment.editShipment (shipment) += editShipment(shipment);

    FORM userShipment 'Поставка'###sign
        OBJECTS s = UserShipment FIXED PANEL
        PROPERTIES (s) objectClassName, nameSupplierUserShipment, nameCustomerUserShipment, nameSupplierStockUserShipment, nameCustomerStockUserShipment,
                       nameNumeratorObject, numberObject, seriesObject, dateUserShipment, timeUserShipment,
                       nameCurrencyUserShipment, noteUserShipment, countUserShipmentDetailUserShipment, quantityUserShipmentDetailUserShipment,
                       sumUserShipmentDetailUserShipment

        OBJECTS d = UserShipmentDetail
        PROPERTIES (d) indexUserShipmentDetail, idBarcodeSkuUserShipmentDetail, nameSkuUserShipmentDetail, shortNameUOMSkuUserShipmentDetail
        PROPERTIES (d) quantityUserShipmentDetail, priceUserShipmentDetail, sumUserShipmentDetail, expiryDateUserShipmentDetail,
                       name###stockProp###shipmentDetail, ADDOBJ, deletesd=DELETESESSION

        PROPERTIES(s) TODRAW d fillDocumentShipment, addDetailDialogSkuStockUserShipmentDetailUserShipment,
                               addDetailInputBarcodeUserShipmentDetailUserShipment, deleteUserShipmentDetailUserShipment
        FILTERS userShipmentUserShipmentDetail(d) == s

        EVENTS
            ON OK prePostUserShipment(s)

        EDIT UserShipment OBJECT s
    ;

    DESIGN userShipment FROM DEFAULT{
        main {
            preferredSize = (1024, 768);

            NEW specification.box BEFORE functions.box{
                type = TABBED;
                ADD d.box;
            }

            NEW header.box BEFORE specification.box {
                childConstraints = TO THE RIGHT;

                NEW headerRow1 {
                    childConstraints = TO THE BOTTOM;

                    ADD s.documentHeaderGroup {
                        childConstraints = TO THE RIGHTBOTTOM;
                        ADD PROPERTY(objectClassName) { preferredCharWidth = 10; }
                        ADD PROPERTY(nameNumeratorObject);
                        ADD PROPERTY(numberObject);
                        ADD PROPERTY(seriesObject);
                        ADD PROPERTY(dateUserShipment);
                        ADD PROPERTY(timeUserShipment);
                    }
                    NEW headerRow11 {
                        childConstraints = TO THE RIGHTBOTTOM;
                        NEW headerRow111 {
                            title = 'Поставщик';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameSupplierUserShipment);
                            ADD PROPERTY(nameSupplierStockUserShipment);
                        }
                        NEW headerRow112 {
                            title = 'Покупатель';
                            childConstraints = TO THE RIGHTBOTTOM;
                            ADD PROPERTY(nameCustomerUserShipment);
                            ADD PROPERTY(nameCustomerStockUserShipment);
                        }
                    }

                    NEW headerTabbedPane {
                        type = TABBED;
                        NEW headerMainParams {
                            title = 'Основные параметры';
                            childConstraints = TO THE BOTTOM;
                            ADD s.documentPrmGroup {
                                childConstraints = TO THE RIGHTBOTTOM;
                            }
                        }
                        NEW headerExtraParams {
                            title = 'Дополнительные параметры';
                            minimumSize = (500, -1);
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerCreateDetail {
                            title = 'Основание';
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                        NEW headerCreateDocuments {
                            title = 'Производные документы';
                            minimumSize = (500, -1);
                            childConstraints = TO THE RIGHTBOTTOM;
                        }
                    }
                }

                ADD s.documentSumGroup {
                    childConstraints = TO THE BOTTOM;
                }
            }

            d.panel{
                childConstraints = TO THE BOTTOM;
            }
            PROPERTY(formOk) {
                caption = 'Провести';
            }
        }
    }

    @defineDocumentSkuSystemLedgerPriceListType(userShipment, accountPriceListType, stockProp);
    @extendFormDocumentSku(userShipment, userShipment, s);
    @extendFormDocumentSkuAll(userShipment, userShipment, s);

    addUserShipment 'Добавить' = ACTION ADDFORM UserShipment;
    editUserShipment 'Редактировать' (userShipment) = ACTION EDITFORM UserShipment;
    editShipment (shipment) += editUserShipment(shipment);

    overCopyShipment = ABSTRACT ACTION (Shipment, Shipment);

    copyShipment 'Копировать' = ACTION (shipment) NEWSESSION {
        FOR ADDOBJ s = UserShipment DO {
            SET supplierUserShipment(s) <- supplierShipment(shipment);
            SET supplierStockUserShipment(s) <- supplierStockShipment(shipment);
            SET customerUserShipment(s) <- customerShipment(shipment);
            SET customerStockUserShipment(s) <- customerStockShipment(shipment);
            SET currencyUserShipment(s) <- currencyShipment(shipment);
            SET noteUserShipment(s) <- noteShipment(shipment);

            EXEC overCopyShipment(shipment, s);

            FOR shipmentShipmentDetail(shipmentDetail) == shipment DO {
                FOR ADDOBJ d=UserShipmentDetail DO {
                    SET userShipmentUserShipmentDetail(d) <- s;
                    SET skuUserShipmentDetail(d) <- skuShipmentDetail(shipmentDetail);
                    SET quantityUserShipmentDetail(d) <- quantityShipmentDetail(shipmentDetail);
                    SET priceUserShipmentDetail(d) <- priceShipmentDetail(shipmentDetail);
                    SET expiryDateUserShipmentDetail(d) <- expiryDateShipmentDetail(shipmentDetail);
                    SET data###stockProp###userShipmentDetail(d) <- data###stockProp###shipmentDetail(shipmentDetail);
                }
            }

            FORM userShipment OBJECTS s = s MANAGESESSION DOCKEDMODAL;
        }
    } TOOLBAR;

    FORM shipments captions TITLE captions###sign
        OBJECTS s = Shipment
        PROPERTIES (s) READONLY isPostedShipment FORCE GRID, numberShipment, seriesShipment, dateShipment, timeShipment,
                                nameSupplierShipment, nameSupplierStockShipment, nameCustomerShipment, nameCustomerStockShipment,
                                nameCurrencyShipment, countShipmentDetailShipment, quantityShipmentDetailShipment, sumShipmentDetailShipment,
                                noteShipment, objectClassName
        PROPERTIES (s) READONLY FORCE PANEL nameUserCreatedHistorizable, timeCreatedHistorizable, hostnameComputerCreatedHistorizable, nameUserClosed, timeClosed, hostnameComputerClosed

        PROPERTIES ()  addUserShipment TODRAW s
        PROPERTIES (s) editShipment, copyShipment
        PROPERTIES (s) deletes=DELETE FORCE PANEL TOOLBAR SHOWIF isUserShipment(s)

        OBJECTS d = ShipmentDetail
        PROPERTIES (d) READONLY indexShipmentDetail, idBarcodeSkuShipmentDetail, nameSkuShipmentDetail, shortNameUOMSkuShipmentDetail
        PROPERTIES (d) READONLY quantityShipmentDetail, priceShipmentDetail, sumShipmentDetail, expiryDateShipmentDetail, name###stockProp###shipmentDetail
        FILTERS shipmentShipmentDetail(d) == s

        DIALOG Shipment OBJECT s
    ;
    @extendFormFilterAccess(Shipment, s, shipments, stockProp);

    DESIGN shipments FROM DEFAULT {
        PROPERTY (deletes) {
            askConfirm = TRUE;
        }

        NEW documentContainer BEFORE functions.box {
            type = SPLITV;
            childConstraints = TO THE BOTTOM;

            ADD s.box { fillVertical = 2.0; }

            NEW documentDetail {
                type = TABBED;

                ADD d.box {
                    title = 'Спецификация';
                }
                NEW documentHistory {
                    title = 'История';

                    ADD s.historyGroup;
                    ADD s.postedGroup;
                }
                NEW printTab {
                    title = 'Печатные формы';
                    NEW printContainer {
                        title = 'Печать';
                        childConstraints = TO THE BOTTOM;
                    }
                }
                NEW actionContainer {
                    title = 'Действия';
                    childConstraints = TO THE RIGHT;
                    NEW createdContainer {
                        title = 'Создание на основе';
                        childConstraints = TO THE BOTTOM;
                        ADD PROPERTY(copyShipment) { caption = 'Поставка'###sign;}
                    }
                }
            }
        }
    }

END

META defineShipmentBatch(stockProp)
    @defineDocumentInterfaceDetailBatch(shipment, batch);

    changeBatchUserShipmentDetail = ACTION (userShipmentDetail) {
        FORM dialogBatch OBJECTS st = stockProp###userShipmentDetail(userShipmentDetail),
                                 t = dateTimeUserShipmentDetail(userShipmentDetail),
                                 sk = skuUserShipmentDetail(userShipmentDetail) MODAL SHOWDROP;

        IF formResult() == FormResult.ok THEN {
            SET batchUserShipmentDetail(userShipmentDetail) <- chosenObject('bt');
        } ELSE IF formResult() == FormResult.drop THEN {
            SET batchUserShipmentDetail(userShipmentDetail) <- NULL;
        }
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatchUserShipmentDetail ON CHANGE changeBatchUserShipmentDetail(d) AFTER shortNameUOMSkuUserShipmentDetail;
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatchShipmentDetail AFTER shortNameUOMSkuShipmentDetail;

END

META defineShipmentStockDestination(fromStock, toStock)
    Shipment.fromStockShipment(shipment) += fromStock##Shipment(shipment);
    Shipment.toStockShipment(shipment) += toStock##Shipment(shipment);
    Shipment.dataFromStockShipmentDetail(detail) += data###fromStock##ShipmentDetail(detail);
    Shipment.dataToStockShipmentDetail(detail) += data###toStock##ShipmentDetail(detail);
END