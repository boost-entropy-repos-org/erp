MODULE ScalesItem;

REQUIRE Item, Machinery, Scales;

NAMESPACE Item;

createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += ACTION (transaction, groupMachinery) {
    IF groupMachinery IS GroupScales THEN
        SET nameMachineryPriceTransactionBarcode(transaction, barcode) <- titleScalesBarcode(barcode) WHERE inMachineryPriceTransactionBarcode(transaction, barcode);
}

GROUP scalesGroup 'Весы' : public;

// Фильтрация для передачи на весы
passScalesItem 'Передавать на весы' = DATA BOOLEAN (Item) IN scalesGroup;
overInGroupMachinerySku(groupMachinery, sku) += groupMachinery IS GroupScales AND sku IS Item AND NOT passScalesItem(sku);

// Формат этикетки
labelFormatPackItem = DATA LabelFormat(Item);
idLabelFormatPackItem 'Код формата этикетки' (item) = idLabelFormat(labelFormatPackItem(item)) IN scalesGroup;
labelFormatBarcode 'Формат этикетки' = idLabelFormatPackItem(skuBarcode(barcode));

@defineMachineryPriceTransactionAttribute(labelFormat, 'Формат этикетки', INTEGER);

// Сроки годности
daysExpiryPackItem 'Срок годности в днях с момента фасовки' = DATA NUMERIC[8,2] (Item) IN scalesGroup;
hoursExpiryPackItem 'Срок годности в часах с момента фасовки' = DATA INTEGER (Item) IN scalesGroup;

daysExpiryBarcode 'Срок годности в днях с момента фасовки' = daysExpiryPackItem(skuBarcode(barcode));
hoursExpiryBarcode 'Срок годности в часах с момента фасовки' = hoursExpiryPackItem(skuBarcode(barcode));

@defineMachineryPriceTransactionAttribute(daysExpiry, 'Срок годности в днях с момента фасовки', NUMERIC[8,2]);
@defineMachineryPriceTransactionAttribute(hoursExpiry, 'Срок годности в часах с момента фасовки', INTEGER);

// Состав товара
compositionScalesItem 'Состав товара (ингредиенты) для весов' = DATA TEXT (Item) IN scalesGroup;
compositionBarcode 'Состав товара' = compositionScalesItem(skuBarcode(barcode));

@defineMachineryPriceTransactionAttribute(composition, 'Состав товара', TEXT);

synchronizeCompositionMachineryPriceTransactionGroupScales = ACTION (transaction, groupMachinery) {
    FOR compositionMachineryPriceTransactionBarcode(transaction, barcode) IF groupMachinery IS GroupScales
        AND NOT cellScalesGroupScalesComposition(groupMachinery, compositionMachineryPriceTransactionBarcode(transaction, barcode))
        ADDOBJ c = CellScales DO {
            SET groupScalesCellScales(c) <- groupMachinery;
            SET compositionCellScales(c) <- compositionMachineryPriceTransactionBarcode (transaction, barcode);
        }
}

snapshotAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);
createAttributeMachineryPriceTransactionGroupMachinery(transaction, groupMachinery) += synchronizeCompositionMachineryPriceTransactionGroupScales(transaction, groupMachinery);

EXTEND FORM item
    PROPERTIES(i) passScalesItem
    PROPERTIES(i) SHOWIF passScalesItem(i) idLabelFormatPackItem, daysExpiryPackItem, hoursExpiryPackItem, compositionScalesItem
;
EXTEND DESIGN item { itemPrimaryColumn2 { ADD i.scalesGroup; } }

overCopyItem(s, d) += ACTION (s, d) {
    SET passScalesItem(d) <- passScalesItem(s);
    SET labelFormatPackItem(d) <- labelFormatPackItem(s);
    SET daysExpiryPackItem(d) <- daysExpiryPackItem(s);
    SET hoursExpiryPackItem(d) <- hoursExpiryPackItem(s);
    SET compositionScalesItem(d) <- compositionScalesItem(s);
}
